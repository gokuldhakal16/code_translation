self._update_head(course_locator, index_entry, course_locator.branch, new_structure['_id'])
from salttesting.unit import skipIf, TestCase from salttesting.case import ModuleCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if cur_retry < 5: update_ccxcon.apply_async( kwargs={'course_id': course_id, 'cur_retry': cur_retry + 1},
if view_name == 'ccx_manage_student' and not is_email(identifier): self.assertContains(response, 'Could not find a user with name or email ', status_code=200)
URLCONF_MODULES = None
repo = _get_local_repo_dir(saltenv)
try: import pymongo HAS_PYMONGO = True except ImportError: HAS_PYMONGO = False
from __future__ import absolute_import import atexit import os import readline import sys from code import InteractiveConsole
course = modulestore().get_course(course_id, depth=4)
out = -np.sum(sample_weight * log_logistic(yz)) + .5 * alpha * np.dot(w, w) return out
with salt.utils.fopen(file_path): plist = plistlib.readPlist(true_path)
if mode: current_umask = os.umask(0o77)
call = _get_user_defined_method(type(obj), '__call__', 'im_func') if call is not None: sig = signature(call)
self.other_sequential_2.children.append(self.other_vertical_1.location)
return str((template_name, sorted(context.iteritems())))
delete = self.run_cloud('-d {0} --assume-yes'.format(self.INSTANCE_NAME)) delete_str = ''.join(delete)
assert_array_equal(X_2.astype(bool), univariate_filter.inverse_transform(X_r.astype(bool)))
CommitOnSuccessManager.ENABLED = False OuterAtomic.ALLOW_NESTED = True if not hasattr(OuterAtomic, 'atomic_for_testcase_calls'): OuterAtomic.atomic_for_testcase_calls = 0 OuterAtomic.atomic_for_testcase_calls += 1 return wrapped_func(*args, **kwargs)
import re
pass
new_info = info(new_name) if new_info: raise CommandExecutionError( 'User \'{0}\' already exists'.format(new_name) )
_config_filename_ = 'spm' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'spm')
from __future__ import absolute_import
return image.convert('RGB')
return student.views.index(request)
ret['changes'] = exc.info.get('changes', {}) ret['comment'] = exc.strerror_without_changes
from __future__ import absolute_import
oa = OAS(store_precision=False) oa.fit(X) assert_almost_equal(oa.score(X), score_, 4) assert(oa.precision_ is None)
self.make_course(pdf_textbooks=[PDF_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('pdf_book', book_index='fooey', chapter=1)
import salt.ext.six as six
if serialized_block['type'] == 'html': self.assertIn('student_view_multi_device', serialized_block) self.assertTrue(serialized_block['student_view_multi_device'])
fd = None if body is not None: h['content-length'] = '{0}'.format(len(body)) fd = StringIO(body)
state = self.v_sample0 ki = 0
self.set_many({key: value})
lw = LedoitWolf(block_size=25).fit(X) assert_almost_equal(lw.covariance_, cov)
labels = [0, 1, 2, 3] * 3 + [4, 5] * 5
attempt.status = "must_retry" attempt.system_error("System error") attempt.approve() attempt.status = "must_retry" attempt.deny(DENY_ERROR_MSG)
about_base = marketing_urls.get('ROOT', None)
tsne = TSNE(n_iter=199) assert_raises_regexp(ValueError, "n_iter .*", tsne.fit_transform, np.array([[0.0]]))
for i in range(self.n_layers_ - 1): n_fan_in, n_fan_out = layer_units[i], layer_units[i + 1]
'http_max_body': int,
ECOMMERCE_PUBLIC_URL_ROOT = None ECOMMERCE_API_URL = None ECOMMERCE_API_SIGNING_KEY = None ECOMMERCE_API_TIMEOUT = 5 ECOMMERCE_SERVICE_WORKER_USERNAME = 'ecommerce_worker'
try: WindowsError except NameError: WindowsError = None
regression.fit(x, y, sample_weight=w)
try: configuration = json.loads(json_string) except ValueError: raise GroupConfigurationsValidationError(_("invalid JSON")) configuration["version"] = UserPartition.VERSION return configuration
composite_dtypes = ((None, 'int8'), ('complex128', theano.config.floatX))
for i, this_layer in list(enumerate(self.dbm.hidden_layers))[1::2]:
if self.get_compound_hints(new_cmap, student_answers): return
current_commit_id = get_commit_id(def_ms.courses[reload_dir]) log.debug('commit_id="%s"', commit_id) log.debug('current_commit_id="%s"', current_commit_id)
super(CertificatesListHandlerTestCase, self).setUp('contentstore.views.certificates.tracker')
self._install_course_fixture() self._navigate_to_courseware_video_and_render()
import salt.ext.six as six
path = urlparse.urlparse(url).path resolver = resolve(path) ccx_key = resolver.kwargs['course_id']
self._create_a_timed_exam_and_attempt()
try: import progressbar HAS_PROGRESSBAR = True except ImportError: HAS_PROGRESSBAR = False
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
with super(CreateCommentUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
course_location = self.store.make_course_key('Org1', 'Course1', 'Run1') course = self._create_course_with_access_groups(course_location, self.user)
dis = euclidean_distances(X)
raise InvalidCreditRequirements
import os import time import logging
assert_equals( '"' + mock_static_content.get_canonicalized_asset_path.return_value + '"', replace_static_urls(STATIC_SOURCE, DATA_DIRECTORY, course_id=COURSE_KEY) )
'http_request_timeout': float,
if subnet_names: for i in subnet_names: r = __salt__['boto_vpc.get_resource_id']('subnet', name=i, region=region, key=key, keyid=keyid, profile=profile)
msg = "No merge commit for {commit} in {branch}!".format( commit=commit, branch=branch, ) raise DoesNotExist(msg, commit, branch)
self.kwargs['version'] = str(kwargs.get('version', 2))
normalizer = proba_k.sum(axis=1)[:, np.newaxis] normalizer[normalizer == 0.0] = 1.0 proba_k /= normalizer
ret['create'][nodename] = nodedata alias, driver = nodedata['provider'].split(':') defined.add((alias, driver, nodename))
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
self.navigate_to_video() execute_video_steps(tab1_video_names)
new_user_partition = UserPartition(
epoch_num = 2
atexit.register(self.cleanup)
index = self.problem_list.index(problem_name) + 1 self.q(css='a.problem-button:nth-of-type({})'.format(index)).first.click()
from __future__ import absolute_import
from .tasks import update_search_index
ais_nodata('mnistvh.mat', do_exact=do_exact, betas=betas)
#pylint: skip-file from __future__ import unicode_literals
subtask_id = initial_subtask_status.task_id new_subtask = send_course_email.subtask( ( entry_id, email_id, to_list, global_email_context, initial_subtask_status.to_dict(), ), task_id=subtask_id, routing_key=routing_key, ) return new_subtask
def _mean_shift_single_seed(my_mean, X, nbrs, max_iter): bandwidth = nbrs.get_params()['radius']
all_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))
world.ItemFactory.create( parent_location=parent_location, category='problem', display_name=display_name, data=problem_xml )
self.q(css='.remove-action').filter(lambda el: language_code == el.get_attribute('data-lang')).click()
from sklearn.neighbors import KNeighborsClassifier
import salt.utils from salt.state import STATE_INTERNAL_KEYWORDS as _STATE_INTERNAL_KEYWORDS from salt.exceptions import ( CommandExecutionError )
from __future__ import unicode_literals
self._fields[key.field_name] = value
pass
onlyrepo = True for arepo in six.iterkeys(repos): if arepo == repo: continue if repos[arepo]['file'] == repofile: onlyrepo = False
from __future__ import absolute_import
new_children.append(new_block_key)
from salt.modules import logadm
self.assertIn(self.provider.name, response.content)
response = client2.post(self.url, creds) self._assert_response(response, success=True)
data = dict()
if args: return item(*args)
self._find_within(".discussion-show").first.click() EmptyPromise( self.is_discussion_expanded, "Discussion expanded" ).fulfill()
_delete_item(usage_key, request.user)
self.assertEqual(CourseEnrollment.objects.count(), 1) enrollment = CourseEnrollment.objects.get(course_id=course_key) self.assertEqual(enrollment.user.username, "test")
return getattr(self.client, method)(*args, HTTP_X_EDX_API_KEY=TEST_API_KEY, **kwargs)
ret['comment'] = out ret['result'] = False return ret
status = 'satisfied' reason = {'final_grade': grade_summary['percent']}
np.subtract(S, Y[:, None], tmp) tmp[ind, I] = S[ind, I] - Y2
self.user.is_active = False self.user.save()
if course_key.for_branch(None) in self._active_bulk_ops.records: del self._active_bulk_ops.records[course_key.for_branch(None)]
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
import salt.utils from salt.exceptions import CommandExecutionError, SaltRenderError from salt.ext.six import string_types
continue
if HAS_REQUESTS is False: parser.error( 'The python \'requests\' library needs to be installed' )
self.course_info['number'] = "335535897951379478207964576572017930000"
response = self.client.get(reverse("dashboard")) self.assertHttpOK(response)
macro_measure = metric(y_true, y_pred, average="macro") assert_almost_equal(macro_measure, np.mean(label_measure))
usage_id = unicode(usage_key) bookmarks_cache = self._bookmarks_cache(usage_key.course_key, fetch=True) for bookmark in bookmarks_cache: if bookmark['usage_id'] == usage_id: return True return False
data_home = get_data_home(data_home) shutil.rmtree(data_home)
staticfiles.finders.get_finder.cache_clear()
_config_filename_ = 'proxy' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'proxy')
varname = tokens[0][0] self.functions_used.add(varname)
__ = CourseOverview.get_from_id(self.course.id)
from __future__ import absolute_import import logging import re
self.assertEqual(response.status_code, 403)
return CourseLocator(org, course, run, deprecated=True)
folders_list_in_path.extend(['data', 'uploads', file_name])
ret['comment'] = 'Image \'{0}\' could not be {1}'.format(name, action)
self._assert_course_verification_status(VERIFY_STATUS_NEED_TO_VERIFY)
security_attributes = win32security.SECURITY_ATTRIBUTES() security_attributes.bInheritHandle = 1
assert correctness in ['correct', 'incorrect'] assert problem_type in PROBLEM_DICT answer_problem(world.scenario_dict['COURSE'].number, problem_type, correctness)
profile = vm_.get( 'lxc_profile', vm_.get('container_profile', None))
description = "A CourseKey object, saved to the DB in the form of a string" KEY_CLASS = CourseKey
for axes in all_axes: axes.get_xaxis().set_visible(False) axes.get_yaxis().set_visible(False)
html = module.get_problem_html(encapsulate=False)
import inspect import logging import sys
return json.dumps({})
from __future__ import absolute_import
CourseMode( course_id=self.xss_course_key, mode_slug=CourseMode.HONOR, mode_display_name="honor cert", min_price=self.cost ).save()
from pylearn2.utils.rng import make_np_rng
if backing in ('aufs', 'dir', 'overlayfs', 'btrfs'): lvname = vgname = None
ret['result'] = None return ret
estimator_weight = self.learning_rate * np.log(1. / beta)
archive_object = MicrositeHistory( key=instance.key, site=instance.site, values=instance.values, ) archive_object.save()
import salt.utils
from tempfile import mkdtemp import shutil from functools import partial
try: CertificateInvalidation.objects.get( generated_certificate=self.generated_certificate, invalidated_by=self.global_staff, notes=self.notes, active=True, ) except ObjectDoesNotExist: self.fail("The certificate is not invalidated.")
self.assertIn("example_source.mp4", self.item_descriptor.render(STUDENT_VIEW).content)
index = world.get_setting_entry_index(DISPLAY_NAME) world.set_field_value(index, "<script>alert('test')</script>") verify_modified_display_name_with_html() world.save_component()
snapshot = models.TextField(blank=True)
from os import environ
import logging
ForestClassifier = FOREST_CLASSIFIERS[name]
'ENABLE_XBLOCK_VIEW_ENDPOINT': False,
self.course_nav.go_to_section('Test Section', 'Test Subsection')
import salt.loader import salt.syspaths
empty = ParameterGrid({}) assert_equal(len(empty), 1) assert_equal(list(empty), [{}]) assert_grid_iter_equals_getitem(empty) assert_raises(IndexError, lambda: empty[1])
if not ( self._is_anonymous(self.context["thread"]) and not self._is_user_privileged(endorser_id) ): return DjangoUser.objects.get(id=endorser_id).username
from __future__ import absolute_import import grp
self.assertIn( deploy_dir_path, default_config['deploy_scripts_search_path'] )
no_courses = get_courses(user, org=primary) self.assertEqual(no_courses, [])
self.assertEquals(preview.latex_preview('pi'), r'\pi')
for label_index, weight in enumerate(n_samples_per_label): lightest_fold = np.argmin(n_samples_per_fold) n_samples_per_fold[lightest_fold] += weight label_to_fold[indices[label_index]] = lightest_fold
ORA_STUB_URL = os.environ.get('ora_url', 'http://localhost:8041')
raise NotImplementedError()
bluez.__salt__ = {}
self.assertTrue(self.run_cloud('-f remove_key {0} id={1}'.format(PROVIDER_NAME, finger_print)))
@property def buffered(self): return self.__buffered
last_indent = start if verbose >= 3: print("... " + line.rstrip())
client = get_file_client.return_value client.cache_file.return_value = self.top_file.name
corr_rank = np.bincount(rank, minlength=n_ranks + 1).cumsum() rank = corr_rank[rank]
loaderCls = MockLoader
signing_key = _sig_key( secret_access_key, datestamp, location, product )
repofile = '' for arepo in repos: if arepo == repo: repofile = repos[arepo]['file']
from __future__ import absolute_import import logging
return [self.modulestore.get_item(child) for child in self.children]
solver = 'svd'
X = iris.data y = np.array(iris.target) est = GradientBoostingClassifier(n_estimators=20, max_depth=1, random_state=1, init=ZeroEstimator()) est.fit(X, y)
X = check_array(X, copy=False, ensure_2d=False, warn_on_dtype=True, dtype=FLOAT_DTYPES) original_ndim = X.ndim
X_checked = assert_warns(DeprecationWarning, check_array, [42], ensure_2d=True) assert_array_equal(np.array([[42]]), X_checked)
for name, profile in create_list: make_minion = salt.config.get_cloud_config_value( 'make_minion', profile, self.opts, default=True ) if make_minion is False: continue
return False
new_data = kde.sample(44, random_state=0) new_data = pca.inverse_transform(new_data)
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
super(XBlockAcidBase, self).setUp()
self.assertDictEqual(cookie_data1.__dict__, cookie_data2.__dict__)
import salt.utils import salt.utils.decorators as decorators from salt.utils.locales import sdecode as _sdecode from salt.exceptions import CommandExecutionError, SaltInvocationError
import salt.daemons.flo self.master = salt.daemons.flo.IofloMaster(self.config)
create_account(self.USERNAME, self.USERNAME, self.EMAIL)
if self.name == "edx.video.seeked": self['name'] = "edx.video.position.changed"
reset_to_default = False try: reset_to_default = xblock.start.year < 1900 except ValueError: reset_to_default = True
continue
return self.q(css='div.csh_hint_text').text
settings.WIKI_ENABLED = True self.course.allow_public_wiki_access = True self.assertIsNotNone(self.get_wiki_tab(self.user, self.course))
raise NotImplementedError()
self._update_no_improvement_count(early_stopping, X_val, y_val)
continue
if button == 'pause': self.wait_for(lambda: self.state != 'buffering', 'Player is Ready for Pause')
import os import logging
del self.bias_from_marginals
pass
import salt.utils
newrelic.agent.add_custom_parameter('course_id', unicode(self.course_key)) newrelic.agent.add_custom_parameter('org', unicode(self.course_key.org))
import salt.utils from salt.modules import pagerduty import json
self.client.logout() super(TestUsersDefaultRole, self).tearDown()
import integration import salt.utils from salt import fileclient from salt.ext import six from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('..')
del self._args_for_getstate del self._kwargs_for_getstate return {'args': args, 'kwargs': kwargs}
self.dispatch = Pickler.dispatch.copy()
keys, values_lists = zip(*sorted(sub_grid.items())[::-1]) sizes = [len(v_list) for v_list in values_lists] total = np.product(sizes)
return None
leaf_ptr = self.dummy_leaf_.next_leaf_ leaves = [] while leaf_ptr is not None: leaves.append(leaf_ptr) leaf_ptr = leaf_ptr.next_leaf_ return leaves
path = path[len(self.storage.prefix):]
self.assertEquals(preview.latex_preview('2^3^4'), '2^{3^{4}}')
users_state = {}
return {'stdout': _cmd_run_values[' '.join(key)], 'stderr': '', 'retcode': 0, 'pid': 12345}
if login_when_done: user = authenticate(username=username, password=password) login(request, user)
if key not in self: root = self.__root last = root[0] last[1] = root[0] = self.__map[key] = [last, root, key] dict_setitem(self, key, value)
if self.transcript_language == 'en': return Transcript.asset(self.location, youtube_id).data
expected_url = _third_party_login_url( backend_name, "login", redirect_url=self.courseware_url ) self.assertContains(response, expected_url)
content_type, __ = mimetypes.guess_type(template)
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch, MagicMock from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
NO_BOTO_MODULE = True BOTO_NOT_CONFIGURED = True try: import boto NO_BOTO_MODULE = False try: boto.connect_iam() BOTO_NOT_CONFIGURED = False except boto.exception.NoAuthHandlerFound: pass except ImportError: pass
return self.page_num + 1
return ImageFile(open(TEST_DATA_ROOT / 'badges' / name + '.png'))
import argparse import gc import logging import os
test_data = state_run['cmd_|-test_failing_state_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
ransac_estimator.fit(X, yyy)
import pickle
event_info['correct_map'] = correct_map.get_dict() event_info['success'] = success event_info['attempts'] = self.attempts self.track_function_unmask('problem_rescore', event_info)
return str(self)
colors_ = cycle(colors.cnames.keys())
cur_out = self._func(*augmented) rval = [x + y for x, y in safe_zip(rval, cur_out)]
from __future__ import absolute_import
self.assertEqual(len(self.certificates_page.certificates), 1)
self.assert_correct_filter_response(self.url, 'asset_type', 'OTHER')
expected_message = self.get_dashboard_analytics_message() self.assertTrue(expected_message in response.content)
self.assertTrue(self.reset_password_page.is_form_visible())
if not has_studio_write_access(request.user, source_course_key): raise PermissionDenied()
mean = X.mean(axis=0) std = X.std(axis=0) X = (X - mean) / std
self.assertFalse(user_has_role(self.user, CourseCreatorRole()))
import sys from salt.ext.six.moves import map if sys.version_info < (2, 7): import unittest2 as unittest else: import unittest
'text/plain': json.loads
self.lc_block.max_count = 1 self.lc_block.capa_type = 'multiplechoiceresponse' self.lc_block.refresh_children() self.assertTrue(self.lc_block.validate())
if os.path.isfile(cached_file_path): file_meta = _find_file_meta(metadata, bucket_name, saltenv, path) if file_meta: file_etag = file_meta['ETag']
__func_alias__ = { 'id_': 'id', 'reload_': 'reload', }
continue
watch = salt.utils.alias_function(wait, 'watch')
import msgpack
try: shutil.rmtree(repo['lockfile']) except OSError as exc: _add_error(failed, repo, exc)
y_pred, sigma = gp.predict(x, return_std=True)
ret.update({esxi_host: _format_syslog_config(response)})
response = self.the_input.handle_ajax("obviously_not_real", {}) self.assertEqual(response, {})
choose_track_url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.post(choose_track_url, self.POST_PARAMS_FOR_COURSE_MODE['unsupported'])
xpath = "//option[@selected='true']/b" self.assert_has_text(xml, xpath, 'Option 2')
loader = jinja2.FileSystemLoader( context, os.path.dirname(tmplpath))
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
task_type = 'exec_summary_report' task_class = exec_summary_report_csv task_input = {} task_key = "" return submit_task(request, task_type, task_class, course_key, task_input, task_key)
self.assertTrue(self.run_function('system.set_restart_delay', [90])) self.assertEqual( self.run_function('system.get_restart_delay'), '90 seconds')
utils.get_programs(self.user)
if prefix: pipsearch = __salt__['pip.list'](prefix, bin_env, user=user, cwd=cwd)
gsu = model.get_sampling_updates updates, layer_to_chains = gsu(layer_to_chains, self.theano_rng, num_steps=self.num_gibbs_steps, return_layer_to_updated=True)
with open(filename) as f: results = f.read() os.remove(filename) return results
epsilon = lr_scalers.get(param, 1.) * learning_rate scale = T.maximum(self.eps, T.sqrt(new_sum_squared_grad)) delta_x_t = (-epsilon / scale * grads[param])
with self.assertNumQueries(0): all_deadlines = VerificationDeadline.deadlines_for_courses(course_keys) self.assertEqual(all_deadlines, deadlines)
del configure_custom
AutoAuthPage( self.browser, username="testcert", email="cert@example.com", password="testuser", course_id=self.course_id ).visit()
keep_looping = False for alias, entries in six.iteritems(providers.copy()): for driver, details in six.iteritems(entries):
items = list(items) return (items[i:i + chunk_size] for i in xrange(0, len(items), chunk_size))
self.assertIn('/courses/' + self.course_key.to_deprecated_string() + '/jump_to_id/vertical_test', html)
for _ in range(2): get_user_credentials(staff_user)
from reclass.adapters.salt import ext_pillar as reclass_ext_pillar from reclass.errors import ReclassException
return _ENROLLMENT_ATTRIBUTES
return True
self.q(css=self._bounded_selector("div.form-actions .action-save")).first.click()
still_in_grace = CapaFactory.create(showanswer='past_due', max_attempts="1", attempts="1", due=self.yesterday_str, graceperiod=self.two_day_delta_str) self.assertFalse(still_in_grace.answer_available())
if name not in list_folders(location): return '{0} not found in {1}'.format(name, location)
if not mime_type or mime_type not in mimetypes_list:
pass
'django_nose',
if isinstance(bricks, str): bricks = [bricks]
'openedx.core.djangoapps.credentials',
return 'Undefined SHIM state'
self.set_up_books(1)
username = user.username if user else ""
try: import six except ImportError: HAS_SIX = False
self.q(css=self.auto_enroll_upload_button_selector).click()
self.client.login(username=self.user.username, password='test')
raise NotImplementedError()
_PKG_TARGETS_EPOCH = { 'RedHat': {'7': 'comps-extras'}, }
self.selector = prefix + ' .certificates-list-item-{}'.format(index) self.index = index super(CertificateSectionPage, self).__init__(container.browser, **container.course_info)
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0)
updates = dict([(key, val) for key, val in kwargs.items() if not key.startswith('__')])
self.update_enrollment(mode=mode)
course_page = CoursewarePage(self.browser, self.course_id) self.browser.get(course_page.url + '?tpa_hint=oa2-dummy')
if problem_url: usage_key = course_id.make_usage_key_from_deprecated_string(problem_url) usage_keys.append(usage_key)
continue
return ( self.created_at < deadline and self.expiration_datetime > deadline )
raise SaltClientError(general_exception)
assert_raises(ValueError, km.fit, [[0., 1.]])
log.debug('Pinging all connected minions ' 'due to key rotation') salt.utils.master.ping_all_connected_minions(self.opts)
request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO['username'])
return '{}[data-locator="{}"] {}'.format( self.BODY_SELECTOR, self.locator, selector )
updates = _filter_list_by_category(updates=updates, categories=categories)
state = models.CharField(max_length=50)
set_has_profile_image(username, False)
axes = self._output_axes assert len(axes) == 4
def print_to_console(payload): print(payload)
from __future__ import absolute_import
self.assertEqual(map(str.strip, result.splitlines()), self.OVERRIDES_JS)
assert_raises(ValueError, sample_without_replacement, 0, 1) assert_raises(ValueError, sample_without_replacement, 1, 2)
answer = event_info.get('answers', {}).get(response.answer_id) if answer is not None: event_info['answers'][response.answer_id] = response.unmask_name(answer)
__virtualname__ = 'user'
return self.default_modulestore.make_course_key(org, course, run)
self.NOTE_ID_DOES_NOT_EXIST = 99999
return []
self.assertEquals(3, self.response.content.count('grade_None'))
import logging
if node.value == '': node.value = '0'
raise SaltSystemExit('Cannot complete login due to an incorrect user name or password.')
opts = apply_cloud_config(overrides, defaults)
return sum(self.stack_calls(stack) for stack in self._stacks)
payload = { "course_id": unicode(course_id or self.course.id) } if marketing_email_opt_in: payload["email_opt_in"] = True return self.client.post(self.url, payload)
(13, True, False, u"False"),
terms_of_service_and_honor_code = branding_api.get_tos_and_honor_code_url() if terms_of_service_and_honor_code != branding_api.EMPTY_URL: data.update({'company_tos_url': terms_of_service_and_honor_code})
query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(now, query) self.assertIs(result, None)
nsamples[0].set_value(x) for ii, psample in enumerate(psamples): if ii > 0: nsamples[ii].set_value(psample.get_value())
user = User.objects.get(email=self.enrolled_student.email) self.assertFalse(CourseEnrollment.is_enrolled(user, self.course.id))
@skipIf(not salt.utils.is_linux(), 'These tests can only be run on linux') class UseraddModuleTest(integration.ModuleCase):
import logging import os
password_hash='*EEF6F854748ACF841226BB1C2422BEC70AE7F1FF', new_password_hash=user2_pwd_hash, connection_user=self.user, connection_pass=self.password, connection_charset='utf8', saltenv={"LC_ALL": "en_US.utf8"}
self.wait_for_field(field_id) self.make_field_editable(field_id) return self.mode_for_field(field_id) == 'edit'
for video in videos: video["status"] = StatusDisplayStrings.get(video["status"])
return reverse_url(handler_name, 'course_key_string', course_key, kwargs)
dtype_numeric = dtype == "numeric"
def downward_state(self, state): return state def downward_message(self, state): return state
is_increasing = assert_no_warnings(check_increasing, x, y) assert_true(is_increasing)
uniform_batch_size = True
cmd = 'Install-Module -name "{0}" -Force'.format(name) no_ret = _pshell(cmd) return name in list_modules()
from __future__ import division
assert_equal(est.estimators_[0, 0].max_depth, 1) for i in range(1, 11): assert_equal(est.estimators_[-i, 0].max_depth, 2)
self.the_cmathml = self.GetContentMathML(self.asciimath, pmathml) return self.the_cmathml
self.assertIs( descriptor._field_data._authored_data._source.fallback, descriptor._unwrapped_field_data )
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch from salttesting.helpers import ensure_in_syspath
self.assertFalse(mock_push_update.called)
import logging
__func_alias__ = { 'list_': 'list' }
if len(possible_ids) == 0: return 'noname'
super(AboutWithCappedEnrollmentsTestCase, self).setUp()
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
CourseEnrollmentFactory.create(user=self.user, course_id=self.course.id, is_active=True)
import os.path
if first_octet < 1: return False elif first_octet > 223: return False elif first_octet == 127: return False
resp = self.client.get(url, HTTP_HOST=settings.MICROSITE_TEST_HOSTNAME) self.assertContains(resp, settings.MICROSITE_CONFIGURATION['test_microsite']['email_from_address'])
exc_info_on_loglevel=logging.DEBUG
__virtualname__ = 'sentry'
log = logging.getLogger(__name__)
UserFactory.create(username=self.USERNAME, email=self.EMAIL, password=self.PASSWORD)
default=_("Text")
if 'provider' in server_: server_['driver'] = server_.pop('provider')
xpath = "//div[@class='block']/p/b" self.assert_has_text(xml, xpath, 'prompt HTML')
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
from .xqueue import * from .support import * from .webview import *
if not GlobalStaff().has_user(request.user): raise PermissionDenied()
from __future__ import unicode_literals
X = X_2d n = X.shape[0]
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
from __future__ import absolute_import
for (country, rule_type) in country_rules: self.assertIn( { 'country': country, 'rule_type': rule_type }, snapshot['country_rules'] )
super(DonationTest, self).setUp() self.user = UserFactory.create() self.cart = Order.get_cart_for_user(self.user)
#epub_tocdepth = 3
sock.shutdown(socket.SHUT_RDWR) sock.close() break
X_dense[3, :] = 0.0
y_multirf = regr_multirf.predict(X_test) y_rf = regr_rf.predict(X_test)
from __future__ import absolute_import import sys import copy import types
UNKNOWN_TASK_ID = 'unknown-task_id' FILTERED_OUT_ROLES = ['staff', 'instructor', 'finance_admin', 'sales_admin'] UPDATE_STATUS_SUCCEEDED = 'succeeded' UPDATE_STATUS_FAILED = 'failed' UPDATE_STATUS_SKIPPED = 'skipped'
import salt.utils
self.options.log_file = self._default_logging_logfile_
output_buffer = StringIO(render_to_string("instructor/instructor_dashboard_2/executive_summary.html", data_dict))
return self._folds[0][0].get_input_space()
return '<math ' in self.expr
module = CapaFactory.create(max_attempts=0, done=False) self.assertTrue(module.should_show_save_button())
attrs['__config__'] = True attrs['__flatten__'] = False attrs['__config_name__'] = None
programs = get_programs(self.client.user) self.run_modes = self._flatten(programs)
return self.field_decorator(field_value)
from __future__ import absolute_import import collections import fnmatch import os
import os import stat
#latex_use_parts = False
def __init__(self, message, status=HTTP_200_OK): data = {'detail': message} super(DetailResponse, self).__init__(resp_obj=data, status=status)
APPL_KINDS = OrderedDict([('master', 0), ('minion', 1), ('syndic', 2), ('caller', 3)])
unpack_tarball(src,dst) run_scripts(dst+package.name, scripts=["getscript","postinst"] )
curr_batch_size = np.minimum(self._batch_size, self.len_curr_counts[curr_len]) curr_pos = self.len_indices_pos[curr_len]
if name not in nodes: return {} salt.utils.cloud.cache_node(nodes[name], __active_provider_name__, __opts__) return nodes[name]
ret_list.append('%s: %s,' % (key, val))
created = models.DateTimeField(db_index=True) state = models.TextField(null=True, blank=True) grade = models.FloatField(null=True, blank=True) max_grade = models.FloatField(null=True, blank=True)
response = requests.post(url, data=data, headers=headers, verify=False)
'ENABLE_CSMH_EXTENDED': False,
if block.fields[field_name].is_set_on(block): return getattr(block, field_name) else: return default_value
log.shutdown_multiprocessing_logging_listener()
modulestore().update_item(course, ModuleStoreEnum.UserID.test)
__virtualname__ = 'gnome'
match_type = match_type.group()[6:-1].lower() if match_type in html_types: context_type = 'html' elif match_type not in javascript_types: context_type = 'unknown'
self.assertFalse(self.course.visible_to_staff_only) orig_block_structure = get_course_blocks(self.user, self.course_usage_key) self.assertFalse( VisibilityTransformer.get_visible_to_staff_only(orig_block_structure, self.course_usage_key) )
return
current_log_likelihood = None self.converged_ = False
homework_1_score = 1.0 / 2 homework_2_score = 0.0 self.check_grade_percent(round((homework_1_score + homework_2_score) / 2, 2))
<script type="{}"> ${{x | n, dump_js_escaped_json}} </script>
process_config_dir._mixin_prio_ = ConfigDirMixIn._mixin_prio_
definition_xml.attrib.update(xml_object.attrib)
iter_labels = labels if self.multi_class == 'multinomial': iter_labels = [None]
url(r'^edge/(?P<org>[^/]+)/(?P<course>[^/]+)/course/(?P<coursename>[^/]+)$', 'contentstore.views.landing', name='landing'),
task_folder = task_service.GetFolder(location)
return has_studio_read_access(self._user, course_key)
assert_equal(_barnes_hut_tsne.test_index2offset(), 1) assert_equal(_barnes_hut_tsne.test_index_offset(), 1)
self.assertEquals(render.get_score_bucket(11, 10), 'incorrect') self.assertEquals(render.get_score_bucket(-1, 10), 'incorrect')
self.assertRaises( ValidationError, BadgeClass( slug='test', issuing_component='test2', criteria='test3', description='test4', image=get_image('unbalanced') ).full_clean )
count = 100 if not isinstance(trim_output, bool): count = trim_output
module = CapaFactory.create(attempts=1)
try: from salt._compat import ElementTree as ET HAS_ELEMENT_TREE = True except ImportError: HAS_ELEMENT_TREE = False
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
n_components = 10
request = Mock() request.GET = request.POST = {'task_id': task_id} return instructor_task_status(request)
__, encoded_from_addr = forbid_multi_line_headers('from', from_addr, 'utf-8')
assert_equal(iterations, expected_n_iter) if n_samples is not None: assert_equal(collected_test_samples, set(range(n_samples)))
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
HAS_PWD = False
grade_summary['percent'] = round(grade_summary['percent'] * 100 + 0.05) / 100
'verify_env': bool,
clf = QuadraticDiscriminantAnalysis() y_pred = clf.fit(X6, y6).predict(X6) assert_array_equal(y_pred, y6)
pass
if problem_type in ("radio_text", "checkbox_text"): selector_template = "input#{}_2_{input}" else: selector_template = "input#input_{}_2_{input}"
import salt.utils
self.assertEqual(len(course_summaries), 1)
user = [user]
Score = namedtuple("Score", "earned possible graded section module_id")
import logging
assert world.is_css_not_present(ASSET_NAMES_CSS)
self.enroll_staff(self.staff_user) self.attempt_upload_file_and_verify_result(test_case, 'import_resources', self.initial_configuration)
is_enrolled = CourseEnrollment.is_enrolled(self.user, self.course.id) self.assertTrue(is_enrolled)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
continue
url = "{base}/verify_student/{entry_point}/{course}/".format( base=BASE_URL, entry_point=self._entry_point, course=self._course_id ) return url
assert_raises(ValueError, _hc_cut, n_leaves + 1, children, n_leaves)
state_run = self.run_function('state.sls', mods='requisites.listen_simple')
data_to_sign = self._compute_digest(user_id) self.signature = signing.dumps(data_to_sign, salt=self.key_salt)
is_valid, errors, updated_data = CourseMetadata.validate_and_update_from_json( course_module, request.json, user=request.user, )
second_result = SoftwareSecurePhotoVerification.get_initial_verification(user=user) self.assertIsNotNone(second_result) self.assertEqual(second_result, first_result)
if not xblock.group_access: return False for partition in get_user_partition_info(xblock): if any(g["selected"] for g in partition["groups"]): return True return False
return floatingip_id
result = {} metadata = cls.fetch_all(descriptor) for key, value in metadata.iteritems(): if key in cls.filtered_list(): continue result[key] = value return result
import pylearn2.config.yaml_parse
success = 'correct' for answer_id in correct_map: if not correct_map.is_correct(answer_id): success = 'incorrect'
import salt.ext.six as six
response = self.client.post(self.url, { "email": self.EMAIL, "password": "invalid" }) self.assertHttpForbidden(response)
self.course_fixture._update_xblock(component.locator, {'metadata': metadata}) self.browser.refresh() self.container_page.wait_for_page()
self.opts = opts self.lst = lst if self.flag: return {} return []
self.user_partition.scheme.current_group = groups[1] group2 = self.partition_service.get_group(self.user_partition) self.assertEqual(group2, groups[1])
n_samples, n_features = X.shape max_features = ensemble.max_features
return 'configuration/{}/current/{}'.format(cls.__name__, entity_id)
unicode_text = "好 各位同学".decode('utf-8') self.assertIn(unicode_text, self.video.captions_text)
transformed_grid = hasher.transform(np.c_[xx.ravel(), yy.ravel()]) y_grid_pred = nb.predict_proba(transformed_grid)[:, 1]
(12, True, False, u"False")
rng = self.mlp.rng if self.irange is None: raise ValueError("Recurrent layer requires an irange value in " "order to initialize its weight matrices")
self.client.logout() self.assert_can_create_course(HTTP_X_EDX_API_KEY=settings.EDX_API_KEY)
incremental_count = batch.shape[0] sample_count = batch.shape[0]
return (os.access(exe, os.X_OK) and (os.path.isfile(exe) or os.path.islink(exe)))
return timedelta(microseconds=self.refund_window_microseconds)
return course_metadata_utils.has_course_ended(self.end)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
kwargs = {'hostname': host, 'creds': creds}
if result['retcode'] != 0 and result['stderr']: raise CommandExecutionError(result['stderr'])
for name in names: ret[name] = '' cmd = ['pacman', '-Sp', '--needed', '--print-format', '%n %v'] cmd.extend(names)
if self._is_training_data(X): return 2. - float(self.train_sizes) / self.n_max_train_sizes else: return float(self.train_sizes) / self.n_max_train_sizes
subject = '/'
p, h = max_pool_c01b(z, (pool_rows, pool_cols) ) func = function([z], [p, h], mode = mode_without_gpu)
names = F.readline().decode('ascii').strip().split(',')
self.password = 'test' self.user = UserFactory.create(password=self.password) self.staff = UserFactory.create(password=self.password, is_staff=True)
enrollment = cls.get_or_create_enrollment(user, course_key) enrollment.update_enrollment(is_active=True, mode=mode) if badges_enabled(): from lms.djangoapps.badges.events.course_meta import award_enrollment_badge award_enrollment_badge(user)
self.estimators_ = [] self.estimator_weights_ = np.zeros(self.n_estimators, dtype=np.float64) self.estimator_errors_ = np.ones(self.n_estimators, dtype=np.float64)
assert sp.issparse(rp.transform(sparse_data))
import salt.utils.s3 from salt.modules import s3
block_wrappers = []
hidden_layer_sizes = self.hidden_layer_sizes if not hasattr(hidden_layer_sizes, "__iter__"): hidden_layer_sizes = [hidden_layer_sizes] hidden_layer_sizes = list(hidden_layer_sizes)
from yaml import Loader, SafeLoader
paid_course = CourseMode.is_white_label(self.course_id) if paid_course or CourseMode.is_professional_slug(self.mode): return True return False
if '_when' not in data: data['_when'] = when
return self.get_comment_list_url(obj, endorsed=True)
child_position = None if is_entrance_exams_enabled(): if category == 'chapter' and is_entrance_exam: fields['is_entrance_exam'] = is_entrance_exam
new_tab = self.get_item_from_modulestore(usage_key) self.assertEquals(new_tab.display_name, 'Empty')
from __future__ import absolute_import import logging
best_candidate = None best_pot = None best_dist_sq = None for trial in range(n_local_trials): new_dist_sq = np.minimum(closest_dist_sq, distance_to_candidates[trial]) new_pot = new_dist_sq.sum()
return course_metadata_utils.course_end_datetime_text( self.end, format_string, self.runtime.service(self, "i18n").strftime )
reports_dir = Env.REPORT_DIR.makedirs_p() clean_dir(reports_dir)
'tcp_keepalive_intvl': float,
return { 'Content-type': 'application/json', 'Accept': 'application/json', 'X-CSRFToken': self.session_cookies.get('csrftoken', '') }
from __future__ import unicode_literals
self.assertNotIn('contents', result)
return T.switch(x < 0., 0., x)
for attr in self.q(css='a.action-staff-lock>i').attrs('class'): if 'fa-check-square-o' in attr: return True return False
def __init__(self, *args, **kwargs): super(OrgInstructorRole, self).__init__('instructor', *args, **kwargs)
answer_map = dict() for response in self.responders.keys(): results = self.responder_answers[response] answer_map.update(results)
self._expanded_class_weight = compute_class_weight(self.class_weight, self.classes_, y) sample_weight = self._validate_sample_weight(sample_weight, n_samples)
vmcfg = {} kwargs = salt.utils.clean_kwargs(**kwargs) for k, v in kwargs.iteritems(): vmcfg[k] = v
response = requests.get(self.url) self.assertEqual(response.status_code, 400)
ssh_gateway_port: 22
XQUEUE_STUB_URL = os.environ.get('xqueue_url', 'http://localhost:8040')
xblock_desc.publish = "not-applicable"
return self.q(css='body.view-team').present and not self.q(css='.ui-loading').present
CONTEXT_EXTRA_FIELDS = 'context_extra_fields'
from __future__ import absolute_import import os import threading
from urllib2 import urlopen PY2 = True
self.make_course(textbooks=[IMAGE_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('book', book_index=0, page='xyzzy')
del schedule[job]['_seconds']
return [Badge(element, self.browser) for element in self.q(css=".badge-display:not(.badge-placeholder)")]
auth = _auth(profile=profile)
self.label_name_to_index = {} for index, name in enumerate(self.label_index_to_name): self.label_name_to_index[name] = index
if not isinstance(config, dict): return False, ('Configuration for sh beacon must be a dictionary.') return True, 'Valid beacon configuration'
assert_true(np.all(np.less_equal(sorted_dists_exact, sorted_dists_approx)))
_validate_username(username) _validate_password(password, username) _validate_email(email)
asset_md = store.get_all_asset_metadata(course.id, 'asset') self.assertEquals(asset_md, [])
self.assertTrue(hasattr(course_overview, 'image_set')) self.assertEqual(course_overview.image_set.small_url, '') self.assertEqual(course_overview.image_set.large_url, '')
args = [func.__self__, ] + args
context.update(get_certificate_header_context(is_secure=request.is_secure())) context.update(get_certificate_footer_context())
import salt.utils.cloud
comment += 'Search was done without error.\n'
keep_looping = True continue
ret = __salt__['k8s.label_present'](name, value, node, apiserver)
votes = np.zeros((n_samples, n_classes))
from salt.cloud.clouds import opennebula from salt.exceptions import SaltCloudSystemExit, SaltCloudNotFound
enable_self_generated_certs.delay(unicode(course_key))
self.assertEqual(len(email_info), 0)
AutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=staff).visit()
obj = self.construct_scalar(node) if six.PY2: obj = obj.encode('utf-8') return SLSString(obj)
grains['os_family'] = _OS_FAMILY_MAP.get(grains['os'], grains['os'])
if not settings.FEATURES.get('ENABLE_CSMH_EXTENDED'): post_save.connect(save_history, sender=StudentModule)
STRING_PAYLOAD = 'string_payload'
return False
kernel = self.kernel if callable(kernel): kernel = 'precomputed'
RSTR_RE = r'(?:^|\r?\n)' + RSTR + '(?:\r?\n|$)'
password = generate_unique_password(generated_passwords) errors = create_and_enroll_user( email, username, name, country, password, course_id, course_mode, request.user, email_params ) row_errors.extend(errors)
if hasattr(self, 'mlp'): return self.mlp return None
CREDIT_TASK_MAX_RETRIES = 5
if hasattr(client, 'create_user'): client.create_user(name, passwd) return True
'publish_port': int,
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
enrollment.activate() self.assertTrue(CourseEnrollment.is_enrolled(user, course_id)) self.assert_enrollment_event_was_emitted(user, course_id)
salt.log.setup.shutdown_multiprocessing_logging()
return wrap_fragment( frag, render_to_string( "edit_unit_link.html", {'frag_content': frag.content, 'edit_link': edit_link} ) )
pass
return ItemFactory.create( parent_location=parent_location, category=category, display_name=display_name, publish_item=False, user_id=self.user.id, **kwargs )
import salt.utils.http
selector = self._bounded_selector(".annotator-outer") self.wait_for_element_invisibility(selector, text)
self.method = method self.submit_url = submit_url self.fields = [] self._field_overrides = defaultdict(dict)
self.assertIsNone(rewrite_video_url(None, None))
self.assertEquals(resp.status_code, 400)
for key in ret: ret[key] = sorted(ret[key]) if save_cache: salt.fileserver.write_file_list_cache( __opts__, ret, list_cache, w_lock ) return ret.get(form, [])
user = User() user.save() DarkLangConfig( released_languages=languages, changed_by=user, enabled=True ).save()
if created: return
elif existing['code'] == 404:
return {'queue_len': self.queue_len, }
self.assertFalse(enrollment['is_active'])
from napalm import get_network_driver HAS_NAPALM = True
setattr(self, hyperparameter.name, np.exp(theta[i:i + hyperparameter.n_elements])) i += hyperparameter.n_elements
group1_id = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, self.user_partition)
selector = self.get_element_selector(CSS_CLASS_NAMES['video_spinner']) return self.q(css=selector).visible
import os import ast import logging
from __future__ import print_function from __future__ import absolute_import
virtualenv_mod.__salt__ = {'cmd.which_bin': lambda _: 'pyvenv'}
for key in desired_keys: if key not in item: item[key] = None
partitions += _other_partitions(verified_partitions, partitions, course_key) course.set_user_partitions_for_scheme(partitions, scheme) modulestore().update_item(course, ModuleStoreEnum.UserID.system)
import salt.utils.odict as odict
transform.fit(X) assert_not_equal(transform.sample_interval_, None)
if xblock.category == 'chapter': return None
from __future__ import absolute_import import logging import socket import msgpack import weakref import time
return self.q(css='.wrapper-content ' + prefix + ' .no-content')
def __setstate__(self, state): self._is_child = True self.__init__(state['opts'], log_queue=state['log_queue'])
dict(safe_zip(range(-19, 20), range(-19, 20))),
return True
html_use_smartypants = True
OverrideFieldData.provider_classes = None
from salt.utils.odict import OrderedDict
y_pred1 = clf.fit(X1, y).predict(X1) assert_array_equal(y_pred1, y, 'solver %s' % solver)
html_module = self.store.get_item(course_id.make_usage_key('html', 'nonportable')) self.assertIn('/static/foo.jpg', html_module.data)
self.lcp = self.new_lcp(None)
X = 0.3 * rnd.randn(100, 2) X_train = np.r_[X + 2, X - 2]
pass #destroy(vm_['name'])
qbuffer.extend([[None, s] for s in args])
import xml.etree.ElementTree as ElementTree
'disable_modules': list,
request = mock.Mock() self.view.check_throttles(request)
sampling_algorithm["custom-pool"] = \ lambda n_population, n_samples, random_state=None: \ sample_without_replacement(n_population, n_samples, method="pool", random_state=random_state)
if self.estimators_ is None or len(self.estimators_) == 0: raise NotFittedError("Estimator not fitted, call `fit`" " before making predictions`.")
self.prefix = os.path.join(self.RESOURCE_PREFIX, module)
self.first_checkpoint.add_verification_attempt(SoftwareSecurePhotoVerification.objects.create(user=self.user))
skip_if_no_sklearn() mapping = {'dataset_iterator': 'DatasetKFold'} test_yaml = test_yaml_dataset_iterator % mapping trainer = yaml_parse.load(test_yaml) trainer.main_loop()
from __future__ import absolute_import import logging from salt.ext.six import string_types
from random import choice characters = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)' SECRET_KEY = ''.join([choice(characters) for i in range(50)])
params = self._signed_callback_params(self.order.id, "145.00", "145.00") result = process_postpay_callback(params)
return cls(task_id, **options)
set_user_preference(self.user, LANGUAGE_KEY, 'eo') self.middleware.process_request(self.request) self.assertEquals(self.request.session[LANGUAGE_SESSION_KEY], 'eo')
self.course_data['org'] = 'University of California, Berkeley' self.assert_course_creation_failed(r"(?s)Unable to create course 'Robot Super Course'.*")
from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON, )
import salt.ext.six as six
('subjectbody', SubjectBodyExtractor()),
predict = pipe.predict(X) assert_equal(predict.shape, (n_samples,))
self.login() self.enroll(course_id)
#html_use_modindex = True
with patch('os.path.exists', return_value=False): self.assertRaises(SaltClientError, lambda: self.client.pub('*', 'test.ping'))
cherrypy.session.release_lock()
self.reset_tracker()
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
try: os.remove(shim_tmp_file.name) except IOError: pass
assert sls_obj.__str__() == '{foo: bar, baz: qux}' assert sls_obj.__repr__() == '{foo: bar, baz: qux}'
if xblock.location in blocks_visited: return
LogoutPage(self.browser).visit()
__, __ = self.log_in_as_instructor()
if isinstance(block_key, BlockUsageLocator): return block_key.map_into_course(course_key) elif not isinstance(block_key, BlockKey): block_key = BlockKey(*block_key)
tree = self._compute_metadata_inheritance_tree(course_id)
link_cohort_to_partition_group( cohort, self.user_partition.id, self.groups[0].id, )
X_train, X_test, y_train, y_test, sw_train, sw_test = \ train_test_split(X, y, sample_weight, test_size=0.9, random_state=42)
time = {} n_samples = np.linspace(start=0, stop=opts.n_population, num=opts.n_steps).astype(np.int)
from __future__ import absolute_import
import salt.utils.cloud import salt.config as config from salt.exceptions import SaltCloudSystemExit
youtube_id = deserialize_field(cls.youtube_id_1_0, pieces[1]) ret[speed] = youtube_id
{% from 'lib.sls' import port with context %} port {{ port }} bind {{ bind }}
out, err = DETAILS['server'].sendline(cmd)
pass
return None
problem = self.build_problem(answer='[1j, 5]') input_dict = {'1_2_1': '3'} with self.assertRaises(StudentInputError): problem.grade_answers(input_dict)
pass
completed = True
return False
database: image: mongo:3.0 command: mongod --smallfiles --quiet --logpath=/dev/null '
seed = module.seed self.assertTrue(seed is not None)
return reverse_url(handler_name, 'library_key_string', library_key, kwargs)
log = logging.getLogger(__name__)
'course_action_state',
role = CourseCcxCoachRole(self.course.id) role.add_users(self.coach) self.request_factory = RequestFactory()
config = CourseOverviewImageConfig.current() course_overview = CourseOverview.get_from_id(course.id) image_urls = course_overview.image_urls
ret['result'] = True ret['comment'] = 'vm {0} already stopped'.format(name)
self.user = UserFactory.create()
from __future__ import absolute_import import json
config.toggle() config.edit() config.groups[2].remove() config.save()
from __future__ import absolute_import
scores = cross_val_score(BernoulliNB(alpha=10), X > 4, y, cv=10) assert_greater(scores.mean(), 0.83)
log.debug("Cached file: path={0}, md5={1}, etag={2}".format(cached_file_path, cached_md5, file_md5)) if cached_md5 == file_md5: return
multi_db = True
stdout = list_(runas=runas) service_lines = [line for line in stdout.splitlines()]
add_user_to_cohort(first_cohort, self.student.username) self.assert_student_in_group(None)
import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm from sklearn.neighbors import KernelDensity
if not name: return 'Required parameter "name" not passed'
vm_['gateway'] = get_ssh_gateway_config(vm_)
from __future__ import absolute_import
import logging import random from salt.state import _gen_tag from salt.exceptions import SaltInvocationError
obj_sm.ClientApplicationID = "My App"
if user_profile.requires_parental_consent() and user_profile.has_profile_image: user_profile.profile_image_uploaded_at = None
ret = self.run_state('ssh_known_hosts.present', test=True, **kwargs) self.assertSaltNoneReturn(ret)
return subnet
self.video.a11y_audit.config.set_scope( include=["div.video"] ) self.video.a11y_audit.check_for_accessibility_errors()
block.fields.update(definition.get('fields')) block.definition_loaded = True
self.inputs[input_id] = input_type_cls(self.capa_system, problemtree, state) return self.inputs[input_id].get_html()
from __future__ import absolute_import
pass
self.components_ = self.random_state_.gamma( init_gamma, init_var, (self.n_topics, n_features))
if service not in current_settings: changes_needed = True break
self.runtime.publish( self, 'grade', { 'value': json_data['grade'], 'max_value': 1 } )
salt '*' win_wua.list_update 12345678-abcd-1234-abcd-1234567890ab
if 'pub_key' not in vm_ and 'priv_key' not in vm_: log.debug('Generating keys for \'{0[name]}\''.format(vm_))
return [('127.0.0.1:11211 (1)', {})]
salt -L 'kevin,stewart,dave' system.reboot && \\ salt-run state.event 'salt/minion/*/start' count=3 quiet=True && \\ salt -L 'kevin,stewart,dave' state.highstate
self.assertEqual(False, data["accomplishments_shared"])
if uid is None: return None try: return User.objects.get(anonymoususerid__anonymous_user_id=uid) except ObjectDoesNotExist: return None
assert_array_almost_equal(np.asarray([1.0, 2.0, 3.0]), cw)
cls.num += 1 return cls.num
theme_root = settings.ENV_ROOT / "themes" / settings.THEME_NAME
import logging log = logging.getLogger(__name__)
return self.q(css=self.search_bar_selector).present
buttons = world.css_find('div.new-component-{} button'.format(category))
fit_params = fit_params if fit_params is not None else {} fit_params = dict([(k, _index_param_value(X, v, train)) for k, v in fit_params.items()])
PAYMENT_REPORT_GENERATOR_GROUP = 'shoppingcart_report_access'
return self.hidbias + tensor.dot(x, self.weights)
from salt.utils.decorators import memoize
return "Maxout"
problem_location = task_input.get('problem_location') student_data = list_problem_responses(course_id, problem_location) features = ['username', 'state'] header, rows = format_dictlist(student_data, features)
instance = model(pk=pk, **data)
from salt.states import win_network
emit_field_changed_events( user_profile, user_profile.user, sender._meta.db_table, excluded_fields=['meta'] )
salt.utils.compat.pack_dunder(__name__)
from __future__ import absolute_import
self.api_response(data={"last_visited_module_id": unicode(initial_unit.location)})
task_definition = task_folder.GetTask(name).Definition
__virtualname__ = 'system'
inter_clust_dists = np.inf * intra_clust_dists
if block_type == 'html': self.assertElementAttrsSubset(element, {'filename': filename})
if not hasattr(self, 'inference_procedure') or \ self.inference_procedure is None: self.inference_procedure = WeightDoubling() self.inference_procedure.set_dbm(self)
__proxyenabled__ = ['*']
path %= { 'minion_id': minion_id }
for name, Tree in CLF_TREES.items(): clf = Tree(random_state=0)
draft_video = self.store.get_item(course_id.make_usage_key('video', self.DRAFT_VIDEO)) self.assertTrue(getattr(draft_video, 'is_draft', False))
topics_data = self._serialize_and_paginate( TopicsPagination, topics, request, BulkTeamCountTopicSerializer, {'course_id': course.id}, ) topics_data["sort_order"] = sort_order
from salt.utils.validate import net
import logging import re
import salt.utils import hashlib import datetime import socket import salt.utils.network import salt.utils.validate.net
__salt__['cmd.run'](['attrib', '-R', cache_file], python_shell=False)
'ioflo_console_logdir': str,
from __future__ import absolute_import
dense_results = BaggingRegressor( base_estimator=CustomSVR(), random_state=1, **params ).fit(X_train, y_train).predict(X_test)
attempt = SoftwareSecurePhotoVerification(user=user) attempt.mark_ready() assert_equals(attempt, SoftwareSecurePhotoVerification.active_for_user(user))
for entry in toc: if entry['url_name'] == url_name: return entry return None
APP.config_from_object('django.conf:settings') APP.autodiscover_tasks(lambda: settings.INSTALLED_APPS)
with self.store.default_store(ModuleStoreEnum.Type.split): resp = self.client.get_html('/c4x/InvalidOrg/InvalidCourse/asset/invalid.png') self.assertEqual(resp.status_code, 404)
self.assertFalse(self._has_changes(locations['grandparent'])) self.assertFalse(self._has_changes(locations['parent']))
return _graph_connected_component(graph, 0).sum() == graph.shape[0]
spca_lasso = MiniBatchSparsePCA(n_components=3, method='cd', alpha=alpha, random_state=0).fit(Y) assert_array_almost_equal(spca_lasso.components_, spca_lars.components_)
'microsite_configuration',
if response_msg: tree.append(self._render_response_msg_html(response_msg))
from __future__ import absolute_import import logging
self.assertTrue(self.xmodule.verify_oauth_body_sign.called)
for mode in ('audit', 'honor'): CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
REQUIRED_PARAMETERS = [ 'roles', 'context_id', 'oauth_version', 'oauth_consumer_key', 'oauth_signature', 'oauth_signature_method', 'oauth_timestamp', 'oauth_nonce', 'user_id' ]
permutation = _find_permutation(sample_id_bis, sample_id) y = y[permutation, :]
coloring_matrix = np.random.normal(size=(n_features, n_features)) X_train = np.dot(base_X_train, coloring_matrix) X_test = np.dot(base_X_test, coloring_matrix)
self.choice = None
output_filename = course_key.to_deprecated_string().replace('/', '-') + ".csv"
import salt.client.ssh.shell import salt.client.ssh import salt.utils import salt.utils.thin import salt.utils.url import salt.roster import salt.state import salt.loader import salt.minion
log = logging.getLogger(__name__)
video_url = world.browser.url
if not course.certificates or not course.certificates.get('certificates'): return [] return [cert['id'] for cert in course.certificates['certificates']]
self.descriptor = descriptor self._runtime = None super(XModule, self).__init__(*args, **kwargs) self.runtime.xmodule_instance = self
self.assertTrue( self.run_function('shadow.set_password', [TEST_USER, 'Pa$$W0rd']))
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON )
X = np.arange(12).reshape(3, 4)
self.assertEqual(iptables.build_rule(jump='LOG', **{'log-prefix': 'spam: '}), '--jump LOG --log-prefix "spam: "')
_, X = self._count_vocab(raw_documents, fixed_vocab=True) if self.binary: X.data.fill(1) return X
import salt.utils from salt.returners import local_cache
names_inv_actual = sel.inverse_transform([feature_names_t]) assert_array_equal(feature_names_inv, names_inv_actual.ravel())
params = get_required_parameters(request.POST) if not params: return HttpResponseBadRequest() params.update(get_optional_parameters(request.POST))
from __future__ import absolute_import import os
return (self.network_address.is_link_local and self.broadcast_address.is_link_local)
from salt.beacons import inotify
n_samples = 200 outliers_fraction = 0.25 clusters_separation = [0, 1, 2]
return self.delete_student_state_button.is_present()
super(ContainsFormatVisitor, self).__init__(file_contents, results) self.contains_format_call = False
af = AffinityPropagation(affinity="euclidean") assert_raises(ValueError, af.predict, X)
if isinstance(opts['file_ignore_regex'], str): ignore_regex = [opts['file_ignore_regex']] elif isinstance(opts['file_ignore_regex'], list): ignore_regex = opts['file_ignore_regex']
#default_role = None
user2 = UserFactory.create(email=self.new_email, password="test2")
X, y = make_classification(n_samples=20, n_features=10, shuffle=False, random_state=0)
for _ in xrange(30): self._send_bad_redirection_login()
inspect_image(image)
cached_pkg = installer
indices = np.argsort(n_samples_per_label)[::-1] n_samples_per_label = n_samples_per_label[indices]
return u'<p class="error_msg">{msg}</p>'.format(msg=msg)
(y,x) = (oy,ox) if mode=='full' else (oy,ox) - topleft
self.update_structure(dest_course_key, new_structure)
test_course_data = self.assert_created_course() course_id = _get_course_id(self.store, test_course_data) course_module = self.store.get_course(course_id) self.assertEquals(course_module.language, 'hr')
response = self.session.post( STUDIO_BASE_URL + '/xblock/' + loc, data=xblock_desc.serialize(), headers=self.headers, )
email, password = self._create_unique_user()
self.modules = defaultdict(dict) self.definitions = {} self.definitions_in_db = set() self.course_key = None
return user_profile.requires_parental_consent()
d = self._decision_function(X) y_pred = self.classes_.take(d.argmax(1)) return y_pred
'reverification',
proxyfile = '/etc/salt/proxy' status_file, msg_new, msg_old = _proxy_conf_file(proxyfile, test) changes_new.extend(msg_new) changes_old.extend(msg_old) status_proc = False
if os.name == 'nt': socket.inet_pton = inet_pton socket.inet_ntop = inet_ntop
survey = SurveyForm.get(course_descriptor.course_survey_name)
return comdat['stderr']
sequential_position_css = '#sequence-list #tab_{0}'.format(sequential_position - 1) self.q(css=sequential_position_css).first.click()
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
resp = self._change_enrollment('enroll') self.assertEqual(resp.status_code, 403)
return '/api/badges/v1/assertions/user/{}/'.format(self.user.username)
return next((tab for tab in tab_list if tab.tab_id == tab_id), None)
if (not hasattr(openid_request, 'return_to') or not openid_request.return_to): log.error('empty return_to') return False
estimators = all_estimators(include_meta_estimators=True)
from __future__ import absolute_import import json import logging import pprint import time
CREDIT_PROVIDER_TIMESTAMP_EXPIRATION = 15 * 60
self.new_post_button.click() EmptyPromise( lambda: ( self.new_post_form ), "New post action succeeded" ).fulfill()
import salt.ext.six as six from salt.ext.six.moves.urllib.parse import urlparse as _urlparse try: import msgpack except ImportError: import msgpack_pure as msgpack
try: import certifi HAS_CERTIFI = True except ImportError: HAS_CERTIFI = False
timed_exam_attempt_context = None try: timed_exam_attempt_context = get_attempt_status_summary( user.id, unicode(course.id), unicode(section.location) )
self.assertTrue( CourseEnrollment.objects.filter(course_id=self.course.id, user=student).exists() )
self.assertEqual(len(res_json['certificates']), 2)
if y is None: return self.fit(X, **fit_params).transform(X) else: return self.fit(X, y, **fit_params).transform(X)
log.debug("No module %s for user %s -- access denied?", usage_key, user) raise Http404
grains['virtual_subtype'] = 'Xen HVM DomU'
'clone']
email_instructions = _(u"The email address you used to register with {platform_name}").format( platform_name=settings.PLATFORM_NAME )
min_estimators = 15 max_estimators = 175
user = UserFactory.create() status = SoftwareSecurePhotoVerification.user_status(user) self.assertEquals(status, ('none', ''))
parent_ids = [ valid_parent for valid_parent in all_parent_ids if self.has_path_to_root(valid_parent, course) ]
if not path or not os.path.isfile(path): return ret
image_url = microsite.get_value('logo_image_url') if image_url: return '{static_url}{image_url}'.format( static_url=settings.STATIC_URL, image_url=image_url )
raise NotImplementedError()
return transformer.transform(X) * transformer_weights[name]
pass
provider_str = CONFIG_NAME providers = self.run_cloud('--list-providers') log.debug("providers: %s", providers)
self._setup_mode_and_enrollment(self.FUTURE, "verified")
providers_config = opts['providers']
import salt.client from salt.utils import parsers, print_cli from salt.utils.verify import verify_log import salt.output
update_course_structure.apply_async([unicode(course_key)], countdown=0)
response_file = response_obj["files"][i] self.assertEqual(response_file["file_name"], file_info["file_name"]) self.assertEqual(response_file["upload_url"], mock_key_instance.generate_url())
del sys del builtins del encoding
return
with open(filename, "w") as metric_file: metric_file.write(str(metric))
return usage_id.replace(library_key=(usage_id.library_key.replace(version_guid=None, branch=None)))
self.teams_page.click_specific_topic("Example Topic") self.teams_page.verify_topic_team_count(1)
X_train = np.vstack([shifted_gaussian, stretched_gaussian])
from __future__ import absolute_import import os import sys import stat import codecs import shutil import hashlib import socket import tempfile import time import subprocess import multiprocessing import logging import pipes import msgpack import traceback import copy import re import uuid
escaped_encoded_from_addr = escape(encoded_from_addr) if len(escaped_encoded_from_addr) >= 320 and truncate: from_addr = format_address(course_name)
not_loaded = list(set(mods) - set(already_loaded))
HAS_KEYSTONE = False try: from keystoneclient.v2_0 import client import keystoneclient.exceptions HAS_KEYSTONE = True except ImportError: pass
pkginfo = salt.utils.pkg.rpm.pkginfo(**cur) cur = {} if pkginfo is not None: yield pkginfo
import jinja2
mode = CourseModeFactory.create() mode.course_id = self.course.id mode.min_price = min_price mode.mode_slug = mode_slug mode.expiration_date = expiration_date mode.save() return mode
for k in upd: dest[k] = upd[k]
if form_value: cc_content.flagAbuse(user, cc_content) else: cc_content.unFlagAbuse(user, cc_content, removeAll=False)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) import os
raise NotImplementedError
HAS_LIBS = False try: import azure HAS_LIBS = True except ImportError: pass
params["terms_of_service"] = "tRUe" self.assert_success(params)
dbkey['run'] = _id_field['run']
predictions = cval.cross_val_predict(clf, X_sparse, X) assert_equal(predictions.shape, (10, 2))
__virtualname__ = 'task'
self.course_key = course_key self.user_id = user_id self._locations_to_scores = {} self._has_fetched = False
return not self.q(css='div.ui-loading').visible
clf = GradientBoostingClassifier(n_estimators=100, random_state=1) clf.fit(X, y)
cmd = 'which zfs'
'EMBARGO': False,
import salt.utils.error
return [MockTenants()]
stringified_sources_list = map(lambda loc: loc.to_deprecated_string(), self.sources_list) self.xml_attributes['sources'] = ';'.join(stringified_sources_list) return xml_object
if not os.path.exists(os.path.dirname(file_path)): os.makedirs(os.path.dirname(file_path))
x_squared_norms = (X ** 2).sum(axis=1) labels_array, inertia_array = _labels_inertia( X, x_squared_norms, noisy_centers) assert_array_almost_equal(inertia_array, inertia_gold) assert_array_equal(labels_array, labels_gold)
mock_uses_shib.return_value = True
from salt.modules import neutron
try: from salt.ext.six.moves._thread import get_ident as _get_ident except ImportError: from salt.ext.six.moves._dummy_thread import get_ident as _get_ident
return self.client.post(self.url, self._post_body(user, client, token_type))
show_keypair = self.run_cloud('-f show_keypair {0} keyname={1}'.format(PROVIDER_NAME, 'MyPubKey'))
view = super(AtomicMixin, cls).as_view(**initkwargs) return cls.create_atomic_wrapper(view)
BlockCountsTransformer(['problem', 'chapter']).transform(usage_info=None, block_structure=self.block_structure)
return FAKE_MICROSITE.get(name, default)
CONFIG_ROOT = path(os.environ.get('CONFIG_ROOT', ENV_ROOT))
self._make_eligible() self._purchase_credit() request_uuid = self._initiate_request() self._set_request_status(request_uuid, "rejected")
merged_group_ids = _MergedGroupAccess._intersection(xblock_partition_access, merged_parent_group_ids)
paver.easy.sh("exit 1")
for block_hierarchy in course_hierarchy: self.add_parents(block_hierarchy, block_map)
new_stores = [store for store in get_mixed_stores(new_mixed_setting) if store['NAME'] != 'split'] old_stores = get_mixed_stores(self.OLD_MIXED_CONFIG_WITH_DICT)
CreditCourse.objects.create(course_key=self.course.id, enabled=True)
self.q(css=self._bounded_selector('.add-admin-role')).click() wait_for_ajax_or_reload(self.browser)
from salt.returners import smtp_return as smtp
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
self.user = user self.role = role
elif access_point == self.ENROLLMENT_ACCESS_POINT: message_dict = messages.ENROLL_MESSAGES elif access_point == self.COURSEWARE_ACCESS_POINT: message_dict = messages.COURSEWARE_MESSAGES
raise NotImplementedError
microsite.set_by_domain(self.microsite.site.domain) self.assertEqual(microsite.get_dict('nested_dict'), self.microsite.values['nested_dict'])
model = Bookmark fields = ( 'id', 'course_id', 'usage_id', 'block_type', 'display_name', 'path', 'created', )
from __future__ import absolute_import
current_hash = get_hash_tuple(full_header_path, full_cython_path, full_gen_file_path)
VERIFY_STATUS_NEED_TO_VERIFY = "verify_need_to_verify" VERIFY_STATUS_SUBMITTED = "verify_submitted" VERIFY_STATUS_APPROVED = "verify_approved" VERIFY_STATUS_MISSED_DEADLINE = "verify_missed_deadline" VERIFY_STATUS_NEED_TO_REVERIFY = "verify_need_to_reverify"
pass
if suffix in ('new',): return
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
is_increasing = y_[0] < y_[-1] assert_true(is_increasing)
flags = [('Name', name)]
import salt.utils import salt.utils.url import salt.fileserver from salt.utils.event import tagify
self.notes_page.go_to_page(3) self._verify_pagination_info( notes_count_on_current_page=1, header_text='Showing 26-26 out of 26 total', previous_button_enabled=True, next_button_enabled=False, current_page_number=2, total_pages=2 )
with salt.utils.fopen(target_cache_file, 'rb') as fp_: target_cache_data = salt.payload.Serial(__opts__).load(fp_) self.assertDictEqual(__context__, target_cache_data)
all_thumbnails = content_store.get_all_content_thumbnails_for_course(course.id) self.assertGreater(len(all_thumbnails), 0)
problem_page.click_hint()
acond = anorm * sqrt(ddnorm) res1 = phibar**2 res2 = res2 + psi**2 rnorm = sqrt(res1 + res2) arnorm = alfa * abs(tau)
self.q(css=self.PAGE_NUMBER_INPUT_CSS).results[0].send_keys(unicode(page_number), Keys.ENTER) self.wait_for_ajax()
role_class(*args)
ir = IsotonicRegression(increasing='auto', out_of_bounds="raise")
log.debug( 'While the userdel exited with code 12, this is a known bug on ' 'debian based distributions. See http://goo.gl/HH3FzT' ) return True
pass
import salt.utils import salt.utils.mac_utils from salt.exceptions import SaltInvocationError
from __future__ import unicode_literals
bwait = self.opts.get('batch_wait', 0) wait = []
Sdist.run(self)
DEFAULT_ASSET_COLLECTION_NAME = 'assetstore'
return self._library_key
self.key = key return key
update_url = reverse_usage_url("xblock_handler", usage_key) return self.client.ajax_post( update_url, data={ 'metadata': metadata, } )
'ENABLE_OPENBADGES': False,
if '_when' in data and data['_when'] != when: data['_when_run'] = True data['_when'] = when seconds = when - now
print('=' * 80) print("Elastic-Net penalty") results.append(benchmark(SGDClassifier(alpha=.0001, n_iter=50, penalty="elasticnet")))
n_samples = self.X.shape[0] D = self.D ij = self.ij F = self.F
return [ tt.lower() for tt in map(_ustr,t) ]
return unicode(data)
if not path.endswith('/'): path = path + '/'
assert_almost_equal(clf.coef_, clf_weighted.coef_, decimal=2)
filter_rows_broadcastable = False filter_cols_broadcastable = False output_channels_broadcastable = hid_grads.type.broadcastable[0]
ex_sls.add(exc)
assert_array_equal(rfe.get_support(), rfe_svc.get_support())
tmp *= 1 - damping A *= damping A -= tmp
dog_stats_api.histogram( 'DjangoXBlockUserStateClient.{}'.format(evt_name), value, timestamp=evt_time, sample_rate=self.API_DATADOG_SAMPLE_RATE, )
if requested_sort == 'date_added': requested_sort = 'uploadDate' elif requested_sort == 'display_name': requested_sort = 'displayname' sort = [(requested_sort, sort_direction)]
if not is_entrance_exams_enabled(): return False if not course.entrance_exam_enabled: return False if not course.entrance_exam_id: return False return True
if kwargs.get('server', False): task_action.Server = kwargs.get('server') else: return 'Required parameter "server" not found'
self.assert_request_status_code(302, reverse('logout'))
provider_url = reverse('openid-provider-login') factory = RequestFactory() request = factory.request() abs_provider_url = request.build_absolute_uri(location=provider_url)
'module_dirs': list,
return getattr(obj, methodname)(*args, **kwargs)
raise TemplateNotFound(template)
self.video.click_player_button('transcript_button')
return theano.function(*args, on_unused_input='ignore', **kwargs)
raise SyntaxError('encoding problem: utf-8')
super(PythonLinter, self).__init__() self._skip_python_dirs = SKIP_DIRS + ('tests', 'test/acceptance')
grains = {} grains['cpu_flags'] = []
course_id = student_module.course_id student = student_module.student usage_key = student_module.module_state_key
signature = _compute_signature(real_parameters, access_key_secret, 'GET', '/iaas/') real_parameters['signature'] = signature
assertNumProblems(expected_display_name, 1)
assert_array_almost_equal(coef_dense, coef_sorted.toarray())
from __future__ import absolute_import import os.path
pass
seed_permissions_roles(course_key)
sim = np.array([[0, 5, 9, 4], [5, 0, 2, 2], [4, 2, 1, 0]])
return [JsTestSubSuite(test_id, **self.opts) for test_id in Env.JS_TEST_ID_KEYS]
tag = self.resolve(yaml.nodes.ScalarNode, node.value, [True, True]) deep = False
content = ET.Element('ve')
draft_problem = self.store.get_item(self.problem.location) self.assertTrue(getattr(draft_problem, 'is_draft', False))
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.assertDeserializeEqual('"false"', '"false"') self.assertDeserializeNonString()
batch_inertia, centers_squared_diff = _mini_batch_step( X_valid, x_squared_norms[validation_indices], cluster_centers, counts, old_center_buffer, False, distances=None, verbose=self.verbose)
if content and content[-1] == '\n': content = content[:-1]
CREDIT_REQUIREMENT_XBLOCK_CATEGORIES = [ "edx-reverification-block", ]
default_grade = '-1'
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
if math_expr.strip() == "": return float('nan')
read_from_file(os.path.join(dataset_conf_path,"installed.lst"))
module = CapaFactory.create(max_attempts="2", attempts="1") self.assertFalse(module.closed())
est = TreeEstimator() assert_raises(NotFittedError, est.predict, T)
self.presence_events = True
s.cmd.run('echo at render time', cwd='/') s.file.managed('target.txt', source='salt://source.txt')
def test_get_missing_template(self): with self.assertRaises(CourseEmailTemplate.DoesNotExist): CourseEmailTemplate.get_template()
exc_info_on_loglevel=logging.DEBUG
choice.text = "choice_{0}".format(ind) input_element.append(choice)
logging.getLogger().setLevel(logging.ERROR)
self.assertEquals(preview.latex_preview('2*3'), r'2\cdot 3')
self.assertTrue(BulkEmailFlag.feature_enabled(self.course.id)) response = self.client.get(self.url) self.assertTrue(self.email_link in response.content)
X_dense = check_array([[1, 2], [3, 4]]) assert_true(isinstance(X_dense, np.ndarray)) assert_raises(ValueError, check_array, X_ndim.tolist())
export_name = escape_invalid_characters(name=filename, invalid_char_list=['/', '\\'])
X, y = make_blobs(random_state=1) for Model in [DPGMM, VBGMM]: dpgmm = Model(n_components=10, random_state=1, alpha=20, n_iter=50, verbose=2)
FEATURES['ENABLE_OPENBADGES'] = True
for (suffix, mode, kind) in SUFFIXES: self.suffix_map[suffix] = (suffix, mode, kind) suffix_order.append(suffix)
cert_type=server type_ext=True
expected_X_norm = (np.sqrt(X.shape[0]) * np.mean((X - expected_X_mean) ** 2, axis=0) ** .5)
ret = { 'name': name, 'changes': {}, 'result': False, 'comment': '', }
if kw_overrides_match is _marker: return profile_match return kw_overrides_match
import logging import glob import re
if name is 'SpectralClustering': return set_random_state(alg) with warnings.catch_warnings(record=True): pred2 = alg.fit_predict(X) assert_array_equal(pred, pred2)
vertical = self.store.create_child( self.user_id, sequential.location, 'vertical', block_id='moon_unit' )
fake_course_key = CourseKey.from_string('course-v1:FakeOrg+CN1+CR-FALLNEVER1') self.assertEqual(utils.get_course_chapters(fake_course_key), None)
import logging import os import plistlib import re
container = self.go_to_nested_container_page() verify_ordering(self, container, expected_ordering)
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
core.__salt__ = {}
self._set_form_verification_deadline(form, None) form.save()
try: validate_uploaded_image(uploaded_file) except ImageValidationError as error: return Response( {"developer_message": error.message, "user_message": error.user_message}, status=status.HTTP_400_BAD_REQUEST, )
import salt.fileserver import salt.loader import salt.utils.minions import salt.daemons.masterapi
import salt.ext.six as six
DEBUG = True SITE_NAME = 'localhost:{}'.format(LETTUCE_SERVER_PORT)
for pkgname in ret[reponame]: sorted_versions = sorted( [_LooseVersion(x) for x in ret[reponame][pkgname]], reverse=True ) ret[reponame][pkgname] = [x.vstring for x in sorted_versions]
resp = self.client.get(course_wiki_page, follow=False) self.assertEqual(resp.status_code, 302)
pass
enrollment_number = super(CourseEnrollmentManager, self).get_queryset().filter( course_id=course_id, is_active=1 ).count() return enrollment_number
from __future__ import absolute_import
from salt.states import postgres_user
return self.array
super(Donation, cls).add_to_order(order, currency=currency)
self.different_client.login(username=self.different_user.username, password=self.test_password) self.send_get(self.different_client, expected_status=404)
y = np.array([3, 3, -1, -1, 3])
from __future__ import absolute_import, with_statement import copy import os import sys import time import errno import types import signal import logging import threading import contextlib import subprocess import multiprocessing import multiprocessing.util
dselect_pkg_avail = _get_pkg_ds_avail()
os.remove(os.path.join(mine_file))
return courselike
cached_file_path = _get_cached_file_name( fnd['bucket'], load['saltenv'], fnd['path'])
"callback_url": callback_url,
PRIVATE_REQS = 'requirements/private.txt' if os.path.exists(PRIVATE_REQS): PYTHON_REQ_FILES.append(PRIVATE_REQS)
train_score = Perceptron().fit(X, y).score(X, y) assert_less(train_score, 0.8)
try: correctness = self.check_formula( correct_answer, given, samples ) except Exception: correctness = 'incorrect' if correctness == 'correct': hints_to_show.append(name)
dual_coefs = np.empty([n_targets, n_samples])
url(r'^list_financial_report_downloads$', 'instructor.views.api.list_financial_report_downloads', name="list_financial_report_downloads"),
from __future__ import absolute_import
self._create_course_unit(subtitles=True) self.assertTrue(self.video.is_captions_visible())
return token.application
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
world.wait_for_ajax_complete()
bdt = AdaBoostClassifier(DecisionTreeClassifier(max_depth=1), algorithm="SAMME", n_estimators=200)
if [ -z '$debian_chroot' ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
HOSTNAME_MODULESTORE_DEFAULT_MAPPINGS = { 'preview\.': 'draft-preferred' }
self.functions = functions self.returners = returners
self.course.enable_subsection_gating = True self.save_course()
log.debug( 'ext_pillar.mongo: no document found in collection {0}'.format( collection ) ) return {}
self.add_team_configuration(max_team_size=4, topics=[self.make_topic()]) self.assertTrue(self.course.teams_enabled)
os.setegid(uinfo['gid']) os.seteuid(uinfo['uid'])
return [('127.0.0.1:11211 (1)', {})]
from __future__ import absolute_import
return None
url_path = embargo_api.message_url_path(self.course.id, access_point) self.assertEqual(url_path, expected_url_path)
allowance_section.click_add_allowance_button()
if cls.USE_PLUGIN_MANAGER: return set(cls.get_available_plugins().itervalues()) else: return set()
self.assertDictEqual(json.loads(response.content), self._serialize_credit_course(cc1))
return self.client.get(url)
plot_calibration_curve(LinearSVC(), "SVC", 2)
os.remove(hashdir) os.makedirs(hashdir)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
import salt.utils from salt.utils.locales import sdecode as _sdecode from salt.exceptions import SaltInvocationError
return JsonResponse({ 'url': reverse_url('course_handler'), 'destination_course_key': unicode(destination_course_key) })
ndar = ndar.copy() ndar -= ndar.min() ndar *= 1.0 / (ndar.max() + eps) return ndar
django_cache.clear() config_cache.clear()
return self.posterior.get_params()
keys = list(keys)
from __future__ import absolute_import import json import logging
LOGGING_STORE_HANDLER = TemporaryLoggingHandler()
verified.delete() self.assertFalse(CourseMode.has_payment_options(self.course_key))
world.css_click('.mce-primary')
self.timeout_map = {}
return name
resp = self.create_xblock(category='static_tab', parent_usage_key=course.location) usage_key = self.response_usage_key(resp)
if not os.path.isdir(orig_path): raise IOError("You need to download the SVHN format2 dataset MAT files " "before running this conversion script.")
clf = SGDClassifier(loss="hinge", alpha=0.01, n_iter=200, fit_intercept=True) clf.fit(X, Y)
if conf.get('normalize_on_the_fly', False): return data
if hasattr(variable, 'name') and variable.name is not None: return variable.name return anon
activations = self._forward_pass(activations)
pkg_params = { name: { 'version': kwargs.get('version'), 'extra_install_flags': kwargs.get('extra_install_flags') } }
handler404 = 'contentstore.views.render_404' handler500 = 'contentstore.views.render_500'
import salt.utils import salt.utils.url import salt.fileserver from salt.utils.event import tagify
sys.exit(1)
self.check_event_response_by_http_status( 'edit_resource', self.generate_edit_resource(self.non_existing_resource_id), 400 )
ret['comment'] = 'Database {0} is already present, so cannot be created'\ .format(name) return ret
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
import logging import os import functools from itertools import repeat import warnings
out_path = __opts__['reactor_path']
self.assertEqual( {c.id for c in CourseOverview.get_all_courses(org='TEST_ORG_1')}, {c.id for c in org_courses[1]}, )
return survey_link.format(UNIQUE_ID=unique_id_for_user(user))
#latex_preamble = ''
return self.q(css=self._bounded_selector('.cohorts-state')).selected
for name in ALL_TREES: yield (check_no_sparse_y_support, name)
_update_microsite_context(context, configuration)
import salt.utils import salt.utils.decorators as decorators from salt.utils.decorators import depends from salt.exceptions import CommandExecutionError
is_enrolled = CourseEnrollment.is_enrolled(self.user, self.course.id) self.assertFalse(is_enrolled)
self._assert_num_attempts(students, initial_attempts) self._test_run_with_task(reset_problem_attempts, 'reset', num_students) self._assert_num_attempts(students, 0)
if youtube_stub_config: YouTubeStubConfig.configure(youtube_stub_config) if subtitles: self.assets.append('subs_3_yD_cEKoCk.srt.sjson') self.navigate_to_course_unit()
if key == settings.SESSION_COOKIE_NAME: domain = microsite.get_value('SESSION_COOKIE_DOMAIN', domain)
rubric = RubricPage(self.browser) rubric.wait_for_page(timeout=60) return rubric
return mapping[math_string]
info_log.assert_called_with('email sent to new created user at %s', 'test_student@example.com')
lines = contents.read().splitlines() try: lines.remove('') except ValueError: pass return lines
return JsonResponse( { 'success': False, 'message': _('Invalid data, generate_for must be "new" or "all".'), }, status=400 )
if isinstance(cfg, dict): c_cfg = cfg else: c_cfg = cfg('{0}'.format(virtualname), {})
import integration import salt.utils
return u"{}?{}".format(reverse('finish_auth'), urllib.urlencode(params))
if not db_exists(name, **connection_args): log.info('DB \'{0}\' does not exist'.format(name)) return False
elif user_groups[partition_id].id in allowed_group_ids: continue
tag = 'salt/netapi/hook' if tag_suffix: tag += tag_suffix
self.assertEqual(self.run_function('xattr.list', [TEST_FILE]), {})
affiliate_id = 'test-partner' self.client.cookies[settings.AFFILIATE_COOKIE_NAME] = affiliate_id user = self.create_account_and_fetch_profile().user self.assertEqual(UserAttribute.get_user_attribute(user, settings.AFFILIATE_COOKIE_NAME), affiliate_id)
self.assertEqual(iptables.build_rule(jump='LOG', **{'log-prefix': 'long prefix'}), '--jump LOG --log-prefix "long prefix"')
return ( self.video_upload_pipeline is not None and 'course_video_upload_token' in self.video_upload_pipeline )
colors_hue = np.arange(n_colors) colors_hue = as_floatX(colors_hue) colors_hue *= 1./n_colors
while listening_to_events:
clf = svm.SVC(kernel='linear') clf.fit(X, Y)
for visible in self.VISIBLE_CONTENT[user_tag]: self.assertIn(visible, content)
error_msg = models.TextField(blank=True)
self.skipTest('We\'ve hit the max open files setting')
verify_date_or_time(COURSE_START_TIME_CSS, DUMMY_TIME)
cmd_ret = _srvmgr(func=str().join(pscmd_validate), as_json=True)
CountryAccessRule.objects.get_or_create( restricted_course=restricted_course, country=country, rule_type='blacklist' )
nchanges = 1 hstrs.append((u'{0} {1}{2[ENDC]}' .format(hcolor, data, colors)))
return "{}/badges".format(self._base_url)
answer_id = "1_2_1_choiceinput_{index}_numtolerance_input_{ind}".format( index=index, ind=ind ) answer_dict[answer_id] = answer
return [(k,self[k]) for k in self.__tokdict.keys()]
return {'pythonversion': list(sys.version_info)}
from __future__ import absolute_import
return response
the_html2 = problem.get_html() self.assertEquals(the_html, the_html2)
try: entry = cls._get_record_for_user(user) entry.delete() except ObjectDoesNotExist: return
languages_data_folder = sys.argv[1] dataset = load_files(languages_data_folder)
course = self.set_up_course(due_date_display_format=None) text = self.get_text(course) self.assertIn(self.time_with_tz, text)
if not __execute_cmd('config -g cfgUserAdmin -o ' 'cfgUserAdminEnable -i {0} 1'.format(uid)): delete_user(username, uid) return False
content = None try: content = self.load_asset_from_location(loc) except (ItemNotFoundError, NotFoundError): return HttpResponseNotFound()
student_choices = set(choices) required_selected = len(self.correct_choices - student_choices) == 0 no_extra_selected = len(student_choices - self.correct_choices) == 0 correct = required_selected and no_extra_selected return correct
from __future__ import unicode_literals
from __future__ import absolute_import import os import threading import platform import time
train_with_monitoring_datasets( train_dataset=dataset1, monitoring_datasets=uneven_monitoring_datasets, model_force_batch_size=False, train_iteration_mode='sequential', monitor_iteration_mode='sequential')
self.get_selector('#generate-exception-certificates').click()
precision = [1.] recall = [0.] tp = 0 fp = 0 fn = len(pos_scores) count = fn
n_samples = int(X.shape[0]) rs = check_random_state(self.random_state)
curr_indices = self.len_indices[curr_len][curr_pos:curr_pos + curr_batch_size]
self.q(css='a[data-section=certificates]').first.click() certificates_section = CertificatesPage(self.browser) certificates_section.wait_for_page() return certificates_section
last_ind = tps.searchsorted(tps[-1]) sl = slice(last_ind, None, -1) return np.r_[precision[sl], 1], np.r_[recall[sl], 0], thresholds[sl]
unvisited_children = list( child for child in get_children(current_node) if child not in yield_results )
return {}
sh("i18n_tool generate")
self.assertEqual( StudentModule.objects.filter( student=self.module_to_reset.student, course_id=self.course.id, module_state_key=self.module_to_reset.module_state_key, ).count(), 1 )
instance.__flatten__ = True
DEPRECATED_ADVANCED_COMPONENT_TYPES = []
self.field_data_cache = FieldDataCache.cache_for_descriptor_descendents( self.course_key, self.request.user, self.toy_course, depth=2 )
from salt.ext import six
self._track_reverification_events('edx.bi.reverify.started', user.id, course_id, checkpoint.checkpoint_name)
self.assert_social_auth_does_not_exist_for_user(created_user, strategy)
model_channels = model.get_monitoring_channels(nested_ipt[-1]) channels = {} for name in model_channels: channels[name] = (model_channels[name], nested_ipt[-1], (spaces[-1], sources[-1])) custom_channels.update(channels)
if self.flag == 1: raise Unauthorized return True
from salt.states import eselect
init_bias = \ init_sigmoid_bias_from_array(bias_from_marginals.X / 2. + 0.5)
rnd = np.random.RandomState(0) X = rnd.normal(size=(3, 1)) mcd = MinCovDet() mcd.fit(X)
import salt.utils from salt.ext.six import string_types from salt.exceptions import SaltInvocationError, CommandExecutionError import salt.ext.six as six
if isinstance(precompute, six.string_types) and precompute == 'auto': precompute = (n_samples > n_features)
if not SignatureValidator(lti_consumer).verify(request): return HttpResponseForbidden()
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
v0 = random_state.uniform(-1,1, A.shape[0]) w, _ = eigsh(A, k=k, sigma=0.0, v0=v0)
stop = 0 for k, centroid in enumerate(centroids): start, stop = stop, stop + n_samples_per_cluster[k]
self.socket.sendall(bytes_)
if not self.is_cohorted: return False return bool(self.cohort_config.get( "auto_cohort", False))
return self.event[u'current_tab'] == 1
else: response = self.client.get(reverse(url_name), params)
from __future__ import absolute_import import os import shutil
value = self.cleaned_data["following"] if value is False: raise ValidationError("The value of the 'following' parameter must be true.") else: return value
from salt.ext.six import binary_type, string_types, text_type from salt.ext.six.moves import cStringIO, StringIO
import logging
mock_get.return_value.content = "Error" self.assertRaises(EdxNotesParseError, helpers.get_notes, self.request, self.course)
return self.q(css=self._bounded_selector('.flag-role .value')).text[0]
mask = [1] * 10 + [0] * 10 assert_raises(AssertionError, assert_almost_equal, matthews_corrcoef(y_1, y_2, sample_weight=mask), 0.)
from __future__ import absolute_import
X_FRAME_OPTIONS = 'ALLOW'
level = logging.CRITICAL
ccx_course_key = CCXLocator.from_course_locator(course.id, '1') self._add_role_access_to_user(self.user, ccx_course_key)
__virtualname__ = 'pkg'
from __future__ import absolute_import
X = check_array(X, accept_sparse=['csr', 'csc'])
response = self.client.get(manage_users_url) self.assertEqual(response.status_code, 200) self.assertIn(extra_user.username, response.content)
component_class = XBlock.load_class(category, select=settings.XBLOCK_SELECT_FUNCTION) mixologist = Mixologist(settings.XBLOCK_MIXINS) return mixologist.mix(component_class)
self.create_reverification_xblock()
pass
return int(r_hash.hexdigest()[:7], 16) % NUM_RANDOMIZATION_BINS
import salt.utils
import integration from salttesting import skipIf
cov = pca.get_covariance() precision = pca.get_precision() assert_array_almost_equal(np.dot(cov, precision), np.eye(X.shape[1]), 12)
from salttesting.unit import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
plt.subplot(2, 2, i + 1) plt.subplots_adjust(wspace=0.4, hspace=0.4)
log_msg = ( 'remove_credit_requirement_status was called with ' 'user_id={user_id}, course_key_or_id={course_key_or_id} ' 'req_namespace={req_namespace}, req_name={req_name}, '.format( user_id=user_id, course_key_or_id=course_key_or_id, req_namespace=req_namespace, req_name=req_name ) ) log.info(log_msg)
Group(name=settings.PAYMENT_REPORT_GENERATOR_GROUP).save() self.assertFalse(_can_download_report(self.user))
user = BetaTesterFactory(course_key=course_descriptor.id) normal_student = UserFactory() instructor = InstructorFactory(course_key=course_descriptor.id)
return
self.visit(node)
exc_info_on_loglevel=logging.DEBUG
test_success = win_mod_reg.delete_key_recursive('HKEY_CURRENT_USER', subkey) self.assertTrue(test_success)
import salt import salt.loader import salt.utils from salt.utils.process import SignalHandlingMultiprocessingProcess
assert x.ndim == 4 axes = self.input_space.axes assert len(axes) == 4
from salt.modules import deb_apache deb_apache.__grains__ = {} deb_apache.__salt__ = {} deb_apache.__context__ = {}
modulestore = XMLModuleStore( DATA_DIR, source_dirs=['toy'], xblock_mixins=(XModuleMixin,), load_error_modules=False)
student_id = AutoAuthPage(self.browser).visit().get_user_id()
import salt.utils
assert_array_equal(X_truth[:, :2], out_X_unstructured[0]) assert_array_equal(X_truth[:, :2], out_X_structured[0])
import salt.utils
possible_params = selector._get_param_names() possible_params.remove('score_func') selector.set_params(**{possible_params[0]: self.param})
cherrypy.server.unsubscribe()
'DISPLAY_ANALYTICS_ENROLLMENTS': True,
#html_sidebars = {}
if not settings.FEATURES.get('ENABLE_CORS_HEADERS'): raise MiddlewareNotUsed()
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
'ENABLE_MAX_SCORE_CACHE': True,
with no_stdout_stderr(): TheilSenRegressor(verbose=True, random_state=0).fit(X, y) TheilSenRegressor(verbose=True, max_subpopulation=10, random_state=0).fit(X, y)
child_blocks = self.q(css=self._bounded_selector("div[data-id]")) return frozenset(child.text for child in child_blocks)
CONFIG_ROOT = path(os.environ.get('CONFIG_ROOT', ENV_ROOT))
if isinstance(value, string_types) and ' ' in value: value = re.sub(r'\s+', '\t', value)
auth = self._create_authorization_header(token) return self.csrf_client.get(target_url, params, HTTP_AUTHORIZATION=auth)
#latex_show_urls = False
from __future__ import unicode_literals
self._verify_components_visible(['problem']) self._verify_student_view_locked()
if 'user_partition_id' not in old_content or old_content['user_partition_id'] != self.user_partition_id: selected_partition = self.get_selected_partition() if selected_partition is not None:
return self._fetch()
estimator.set_params(alpha=.5)
hasher = FeatureHasher() hasher.set_params(n_features=np.inf) assert_raises(TypeError, hasher.fit)
EDX_PLATFORM_REVISION = 'unknown'
if not set_permissions(username, permissions, uid): log.warning('unable to set user permissions') delete_user(username, uid) return False
return lambda course, reverse_url_func: reverse_url_func(reverse_name, args=[course.id.to_deprecated_string()])
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) second_checkpoint.add_verification_attempt(attempt) self.assertEqual(second_checkpoint.photo_verification.count(), 1)
self.assertEqual(own_metadata(course1_item), own_metadata(course2_item))
for (label_to_value_map, label_to_value_func) in zip(label_to_value_maps, norb.label_to_value_funcs): for label, expected_value in six.iteritems(label_to_value_map): actual_value = label_to_value_func(label) assert expected_value == actual_value
class Meta(ConfigurationModel.Meta): app_label = "util"
return repr(tuple(key))
Env.METRICS_DIR.makedirs_p() _prepare_report_dir(complexity_report_dir)
for minion in minion_tracker[queue]['minions']: if minion not in parts: parts[minion] = {} parts[minion]['ret'] = {}
assert_raises(TypeError, csc_median_axis_0, sp.csr_matrix(X))
user_partititons = self.course.user_partitions
new_communities = get_community_names() failed_communities = dict()
self.assertEqual( self.run_function('xattr.read', [NO_FILE, 'spongebob']), 'ERROR: File not found: {0}'.format(NO_FILE))
if 'chapters' in textbook: for entry in textbook['chapters']: entry['url'] = remap_static_url(entry['url'], course)
from __future__ import absolute_import
with remove_ccx(course_key) as (course_key, restore): return restore(self._modulestore.create_item( user_id, course_key, block_type, block_id=block_id, fields=fields, **kwargs ))
ct_out_map = ( ('application/json', json.dumps), ('application/x-yaml', functools.partial( yaml.safe_dump, default_flow_style=False)), )
world.wait_for( lambda _: len(world.browser.windows) == 2, timeout=5, timeout_msg="Timed out waiting for the LTI window to appear." )
if block.date is None: return datetime.max.replace(tzinfo=pytz.UTC) return block.date
i_best_alpha = np.argmin(mse_path.mean(axis=-1)) best_alpha = all_alphas[i_best_alpha]
return None, None
code_prolog = CODE_PROLOG % random_seed
for lhs in self.objects: for rhs in self.objects: if lhs is rhs: continue self.assertNotEqual(lhs, rhs)
_, suff_stats = self._e_step(X, cal_sstats=True, random_init=True, parallel=parallel)
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_key_string) get_course_with_access(request.user, 'staff', course_key)
self.assertEqual(resp.status_code, 200)
unique_name = uuid.uuid4().hex[0:30]
BASE_URL = os.environ.get('test_url', 'http://localhost:8003')
delete_comment(request, comment_id) return Response(status=204)
"spec", "spec_helpers",
return True, '', list(zip_longest(sources, source_hashes[:len(sources)]))
response = self.http_get_for_course(self.invalid_course_id) self.assertEqual(response.status_code, 404)
source_suffix = '.rst'
PY2 = sys.version_info[0] == 2 PY3 = sys.version_info[0] == 3
for _ in range(20): next_index = random.randrange(len(alphabet)) password += alphabet[next_index]
clf = LassoCV()
clf.fit(X, y, sample_weight=[0.001] * 3 + [1] * 2)
self.setup_course() self.setup_user(admin=False, enroll=False, login=True) self.verify_response()
assert_not_debug_mode()
students_require_certs = students_to_generate_certs_for
rng = np.random.RandomState(0)
video = self.store.get_item(child_to_move_location) self.assertEqual( old_parent_location, video.get_parent().location.for_branch(None) )
set_user_preference(self.user, "dict_pref", {"int_key": 10}) set_user_preference(self.user, "string_pref", "value")
self.args = args
self.assertOLXIsDraftOnly(block_list_to_revert) self.publish(block_list_to_revert) self.assertOLXIsPublishedOnly(block_list_to_revert) self.revert_to_published(block_list_to_revert) self.assertOLXIsPublishedOnly(block_list_to_revert)
return self._validation_paragraph('not-configured').present
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return bool(obj["pinned"])
try: email = CourseEmail.create( course_id, request.user, targets, subject, message, template_name=template_name, from_addr=from_addr ) except ValueError as err: return HttpResponseBadRequest(repr(err))
if not suffix: url = url.rstrip('/')
import integration import salt.loader import salt.config import salt.utils from salt.state import HighState from salt.utils.pydsl import PyDslError
default_enrollment_mode = audit_mode or honor_mode
SYSTEM_SHARED_MEM_FS = '/dev/shm'
from __future__ import absolute_import
response = None log.exception("Outcome Service: Error when sending result.")
from __future__ import absolute_import import os import copy import logging
registration_price = CourseMode.min_course_price_for_currency( course_key, settings.PAID_COURSE_REGISTRATION_CURRENCY[0] ) course_price = get_cosmetic_display_price(course, registration_price) can_add_course_to_cart = _is_shopping_cart_enabled and registration_price
self.course = self.store.get_course(self.course.id)
CertificateGenerationConfiguration(enabled=True).save() resp = views.progress(self.request, course_id=unicode(self.course.id)) self.assertNotContains(resp, 'Request Certificate')
win_servermanager.__salt__ = {} win_servermanager.__opts__ = {}
context = {'payment_support_email': microsite.get_value('payment_support_email', settings.PAYMENT_SUPPORT_EMAIL)} return render_to_response("commerce/checkout_error.html", context)
try: get_course_overview_with_access(request.user, 'load', course_id) return redirect("/courses/{course_id}/wiki/{path}".format(course_id=course_id.to_deprecated_string(), path=wiki_path)) except Http404: pass
import salt.ext.six as six
self.assertEqual(result_dict['value'], "pong")
import sys if sys.version_info < (2, 7): import unittest2 as unittest else: import unittest
if position != seq_module.position: seq_module.position = position
fake_data_api.add_course(self.COURSE_ID, course_modes=course_modes) api.add_enrollment(self.USERNAME, self.COURSE_ID)
CertificateGenerationConfiguration.objects.create(enabled=True)
import salt.ext.six as six
for student in students[5:6]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.deleted, mode='honor' )
self.assertEqual(len(all_modes[other_course_key]), 1) self.assertEqual(all_modes[other_course_key][0], CourseMode.DEFAULT_MODE)
self.assertNotIn(malicious_code, resp.content)
clf = self.factory(alpha=0.1, n_iter=1000, class_weight=[0.5]) clf.fit(X, Y)
n_features = 2000 t = np.pi * np.linspace(0, 1, n_features)
myiterator = d.iterator(mode=i, batch_size=b, num_batches=n, data_specs=self._flat_data_specs, return_tuple=True, rng=sd)
new_indexed_count = self.index_recent_changes(store, before_time) self.assertEqual(new_indexed_count, 5)
self.addCleanup(self.cleanup_modulestore) super(ModuleStoreNoSettings, self).setUp()
try: exec_fn( code_prolog + LAZY_IMPORTS + code, globals_dict, python_path=python_path, extra_files=extra_files, slug=slug, ) except SafeExecException as e: emsg = e.message else: emsg = None
self._setup_mode_and_enrollment(self.FUTURE, "verified")
import integration from salt.config import cloud_providers_config from salt.ext.six.moves import range
return self.provider_id
from __future__ import absolute_import
__virtualname__ = 'whoosh'
import salt.ext.six as six from salt.exceptions import SaltClientError
result = __salt__['cmd.retcode']('tuned-adm off') if int(result) != 0: return False return True
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'vmware', vm_['profile'], vm_=vm_) is False: return False
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
scipy_works = False
self.assertEquals(resp.status_code, 200) self.assertTrue(resp.get('Content-Disposition').startswith('attachment'))
return -self.ebm.free_energy(X) - self.logZ_driver * self.logZ_lr_scale
for item in mask.split(','): if item not in _MASK_TYPES: return 'Invalid mask type: {0}' . format(item)
self.settings_detail.visit() self.settings_detail.require_entrance_exam(required=False) self.settings_detail.save_changes()
if existing['code'] == 200:
draft_xblock = self.store.get_item( self.vertical_x1a, revision=ModuleStoreEnum.RevisionOption.draft_only ) self.assertIsNotNone(draft_xblock)
return all(hasattr(file_to_test, method) for method in ['read', 'name'])
from salt.states import apache_conf
return services[name]
per_remote_only = {} for param in PER_REMOTE_ONLY: if param in per_remote_conf: per_remote_only[param] = per_remote_conf.pop(param)
problem_location = re.sub(r'[:/]', '_', problem_location) csv_name = 'student_state_from_{}'.format(problem_location) upload_csv_to_report_store(rows, csv_name, course_id, start_date)
super(SSLClientTest, self).setUp() self.client = Client() self.factory = RequestFactory() self.mock = Mock()
from salt.exceptions import SaltInvocationError, CommandExecutionError
vim-enhanced: pkg.purged: - version: 7.4.160-1.el7 - ignore_epoch: True
def get(self, _key): return None def set(self, key, value, timeout=None): pass
kernel = C(1.0, (1e-3, 1e3)) * RBF(10, (1e-2, 1e2)) gp = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)
if __opts__.get('requests_lib', False): from requests.exceptions import HTTPError else: from urllib2 import HTTPError
inp = iter(inp) mlb = MultiLabelBinarizer(classes=[1, 3, 2]) assert_array_equal(mlb.fit(inp).transform(inp), indicator_mat)
assert_array_almost_equal(grad_1, grad_2) assert_almost_equal(loss_1, loss_2)
response = self.client.post(update_url, post_data) self.assertEquals(response.status_code, 302)
self.download_results = None
norm_phi = np.dot(exp_doc_topic_d, exp_topic_word_d) + EPS
return field_object.field_name
alias, driver = profile_data.get('provider').split(':') provider_details = self.opts['providers'][alias][driver].copy() del provider_details['profiles']
self.components_ = self._make_random_matrix(self.n_components_, n_features)
self.publish_item(store, self.vertical.location) with self.assertRaises(SearchIndexingError): self.reindex_course(store)
self.check_event_response_by_http_status('remove_resource', resource, test_case['status'])
else: script_content = url script_name = '{0}.sh'.format( hashlib.sha1(script_content).hexdigest() )
self._studio_reindex()
'statici18n',
if salt.utils.is_windows(): return (False, 'The file execution module cannot be loaded: only available on non-Windows systems - use win_file instead.') return True
errstring = "Error: too few arguments" with self.assertRaisesRegexp(CommandError, errstring): call_command('export')
self.course_outline.a11y_audit.config.set_scope( include=['section.edit-settings-timed-examination'] ) self.course_outline.a11y_audit.check_for_accessibility_errors()
def __setstate__(self, state): self._is_child = True self.__init__(state['opts'], log_queue=state['log_queue'])
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
return fnd
else: self.generic_visit(node)
if data is None: return {}
return tab_dict
answers = ["Second", "Third", "Fourth"]
add_trigger(task_definition=task_definition, **kwargs)
import salt.utils.jid import salt.returners from salt.utils.decorators import memoize
self.sigma = 0
ASSET_XML_TAG = 'asset'
course_key = course.location.course_key
setattr(_MovedItems, move.name, move)
html_short_title = 'scikit-learn'
continue
for subs_id in youtube_subs.values(): self.clear_sub_content(subs_id)
if isinstance(opts, string_types): opts = opts.split(',')
if self.shuffle: rng = check_random_state(self.random_state) else: rng = self.random_state
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
data_y = data_y - 1
raise NotImplementedError
if 'enabled' not in repo_opts: repo_opts['enabled'] = int(str(repo_opts.pop('disabled', False)).lower() != 'true')
for app in ADDL_INSTALLED_APPS: INSTALLED_APPS += (app,)
self.cohort_management_page.select_discussion_topic(self.inline_key)
return sqrt(squared_norm(x))
photo_id_url = ( self.image_url("photo_id") if copy_id_photo_from is None else self.image_url("photo_id", override_receipt_id=copy_id_photo_from.receipt_id) )
if HAS_ZMQ: zmq.eventloop.ioloop.install() self.io_loop = LOOP_CLASS() for req_channel in self.req_channels:
#html_sidebars = {}
if mappings: for key in mappings.iterkeys(): if re.match(key, hostname): return mappings[key]
if salt.utils.is_windows(): return __virtualname__ return (False, 'Module cyg: module only works on Windows systems.')
_install_opener(auth)
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
from __future__ import absolute_import
safe_update(ups, p_up)
response = self.client.ajax_post(LIBRARY_REST_URL, data) self.assertEqual(response.status_code, 400)
from salttesting.helpers import ensure_in_syspath, destructiveTest from salt.ext.six.moves import range ensure_in_syspath('../../')
try: return view(request, course_id=course_id) except DashboardError, error: return error.response()
else: merged = closest_subcluster.merge_subcluster( subcluster, self.threshold) if merged: self.init_centroids_[closest_index] = \ closest_subcluster.centroid_ self.init_sq_norm_[closest_index] = \ closest_subcluster.sq_norm_ return False
labels = np.array(labels, copy=True) unique_labels = np.unique(labels) for i in unique_labels: yield labels == i
return wrap_fragment(frag, static_replace.replace_static_urls( frag.content, data_dir, course_id, static_asset_path=static_asset_path ))
LOGGING_TEMP_HANDLER = None break
from __future__ import absolute_import
raise SkipTest("Test too slow.")
action_name = ugettext_noop('reset') update_fcn = partial(reset_attempts_module_state, xmodule_instance_args) visit_fcn = partial(perform_module_state_update, update_fcn, None) return run_main_task(entry_id, visit_fcn, action_name)
module = self.get_module_for_user(self.student_user) module.system.publish(module, 'grade', grade_dict) return module
ret['result'] = True ret['comment'] = 'vm {0} is absent'.format(name)
y_upper = clf.predict(xx)
password_label = _(u"Password")
with check_mongo_calls(1): cached_structure = self._get_structure(self.new_course)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
response = self.client.post( self.url, data='Test Invalid data', content_type='application/json', REQUEST_METHOD='DELETE' ) self.assertEqual(response.status_code, 400)
with check_mongo_calls(import_reads, first_import_writes): import_course_from_xml( source_store, 'test_user', TEST_DATA_DIR, source_dirs=['manual-testing-complete'], static_content_store=source_content, target_id=source_course_key, create_if_not_present=True, raise_on_failure=True, )
self.mc_setup_response()
self._build_data_specs()
return repo.branches()
try: from salt._compat import ElementTree as ET HAS_ELEMENT_TREE = True except ImportError: HAS_ELEMENT_TREE = False
user_course_ids = random.sample(range(TOTAL_COURSES_COUNT), USER_COURSES_COUNT)
openstack_config.__salt__ = {}
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course_key): assertProblemNameEquals(problem_new_name)
import salt.utils
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
assert_raises(ValueError, ForestEstimator(min_samples_leaf=-1).fit, X, y) assert_raises(ValueError, ForestEstimator(min_samples_leaf=0).fit, X, y)
from_xmodule = [entry_point for entry_point in entry_points if entry_point.dist.key == 'xmodule'] if from_xmodule: return default_select(identifier, from_xmodule) else: return default_select(identifier, entry_points)
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
if db_exists(name, **connection_args): log.info('DB \'{0}\' already exists'.format(name)) return False
if iface_type not in ['slave']: return __salt__['cmd.run']('ip link set {0} up'.format(iface)) return None
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
X = np.hstack((iris.data, E)) y = iris.target
import salt.syspaths as syspaths
log = logging.getLogger(__name__)
return self.q(css='{} .request-response-error'.format(self.EE_CONTAINER)).first
self.db_connection.close_connections()
second_config.edit() second_config.name = "Updated Second Content Group" self.assertEqual(second_config.get_text('.action-primary'), "Save") second_config.save()
from salt.ext import six
salt '*' vsphere.get_vsan_eligible_disks my.esxi.host root bad-password
self.login_user() reg_item = PaidCourseRegistration.add_to_order(self.cart, course_key, mode_slug=self.course_mode.mode_slug) return reg_item
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if source and not (not follow_symlinks and os.path.islink(real_name)): name_sum = get_hash(real_name, source_sum['hash_type']) else: name_sum = None
self._find_within(".forum-thread-expand").first.click() EmptyPromise( lambda: bool(self.get_response_total_text()), "Thread expanded" ).fulfill()
req = django_to_webob_request(request)
target_mod = module + '.' if not module.endswith('.') else module
self.assertTrue(certificate_generation_history.exists())
covars_tied = np.array([x for x in covars_diag]).mean(axis=0) precs_tied = np.diag(np.sqrt(1. / covars_tied))
if self.q(css=".submission-success").visible: return self.q(css=".submission-success h4").text
state = __salt__['{0}.state'.format(container_type)]
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
a = '\xe0\xe1\xe2\xe3\xe4\xe5\xe7\xe8\xe9\xea\xeb' expected = 'aaaaaaceeee' assert_equal(strip_accents_ascii(a), expected)
save_definition = False if kwargs.get('task_definition', False): task_definition = kwargs.get('task_definition') else: save_definition = True
v3 = CountVectorizer(vocabulary=None) assert_raises(ValueError, v3.transform, train_data)
return True
import salt.utils.boto3 import salt.utils.compat import salt.utils from salt.exceptions import SaltInvocationError from salt.ext.six import string_types
epoch_num = 5
return (field_object.usage_id.map_into_course(self.course_id), field_object.field_name)
SupportStaffRole().remove_users(self.admin) response = self.client.get('/support/') self.assertTrue(response.status_code, 302)
if keep_symlinks: symlinks = __salt__['cp.list_master_symlinks'](__env__, srcpath) fns_ = process_symlinks(fns_, symlinks) for fn_ in fns_: if not fn_.strip(): continue
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
assert_almost_equal(np.abs(Yt[0][0]), 1., 1)
contents = String(scope=Scope.content) error_msg = String(scope=Scope.content) display_name = String(scope=Scope.settings)
overrides = overrides.copy() if overrides else {} overrides.setdefault("course_id", unicode(self.course.id)) return make_minimal_cs_thread(overrides)
return "original_get_html"
assert_array_almost_equal(x_loadings_sign_flip, x_weights_sign_flip, 4) assert_array_almost_equal(np.abs(x_loadings_sign_flip), 1, 4) assert_array_almost_equal(np.abs(x_weights_sign_flip), 1, 4)
PROGRAMS_STUB_URL = os.environ.get('programs_url', 'http://localhost:8090')
return self._find_within('.discussion-thread#thread_{}'.format(thread_id)).present
iris = datasets.load_iris()
self.dismiss_ui_and_verify(rerun)
from __future__ import absolute_import
course_locator = self._map_revision_to_branch(course_locator, revision=revision) return super(DraftVersioningModuleStore, self).get_items(course_locator, **kwargs)
if this_package in installed_packages_list:
intersphinx_mapping = { 'python2': ('http://docs.python.org/2', None), 'python3': ('http://docs.python.org/3', None) }
estimator_weight = (-1. * self.learning_rate * (((n_classes - 1.) / n_classes) * inner1d(y_coding, np.log(y_predict_proba))))
for part_svc in [ps_shared_cache_1, ps_diff_cache, ps_uncached]: self.assertEqual( first_group.id, part_svc.get_user_group_id_for_partition(user_partition_id) )
self.assertIn(REG_STR, resp.content)
ccx = CustomCourseForEdX.objects.get() course_enrollments = get_override_for_ccx(ccx, self.course, 'max_student_enrollments_allowed') self.assertEqual(course_enrollments, settings.CCX_MAX_STUDENTS_ALLOWED)
self.q(css=self._bounded_selector(".tab-manage_students")).first.click()
raise NotImplementedError("Unable to send refund processing emails to microsite teams.")
self.q(css=self._bounded_selector(self.TAG_SELECTOR)).filter(lambda el: tag_name in el.text).click()
self.add_dropdown_to_section(vertical_1.location, 'H2P1_GROUP1', 1).location.html_id()
with open(os.path.abspath(path), 'w') as cur_file: cur_file.write(text)
a = A aaaa = AAAA ns = NS spf = SPF mx = MX
ret['comment'] = "Service {0} doesn't exist".format(name)
children = [unicode(child) for child in children] return children.index(usage_key)
pkg_params = __salt__['pkg_resource.parse_targets'](name, pkgs, **kwargs)[0]
leaves = est.apply(X) leave_indicator = [node_indicator[i, j] for i, j in enumerate(leaves)] assert_array_almost_equal(leave_indicator, np.ones(shape=n_samples))
if birth_year: self.set_birth_year(birth_year)
try: import requests
dict(safe_zip(range(-5, 6), range(-5, 6))),
self.assertEqual(buffer_e, expected_data) self.assertFalse(term.isalive())
@decorators.memoize def __detect_os(): return salt.utils.which('nginx')
if ttype == 'zeromq': import salt.transport.zeromq return salt.transport.zeromq.ZeroMQPubServerChannel(opts, **kwargs)
ret[name]['config'] = get_vmconfig( ret[name]['vmid'], ret[name]['node'], ret[name]['type'] )
import copy
self.setup()
return instr
plt.subplots_adjust(wspace=0.25) plt.show()
W = rng.uniform(-self.irange, self.irange, (input_dim, self.dim * 3))
self.assertDictEqual(json.loads(response.content), data)
secret = secret or self.JWT_SECRET_KEY token = jwt.encode(payload, secret) return token
dense_classifier = IsolationForest( n_estimators=10, random_state=1, **params).fit(X_train) dense_results = dense_classifier.predict(X_test)
self.send_future_map = {}
if not key: key = salt.utils.aws.IROLE_CODE
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON
if not base.startswith(resolved(settings.DATA_DIR)): raise SuspiciousOperation("Attempted to import course outside of data dir")
return AppVersionConfig.last_supported_date(platform_name, platform_version) or self.NO_LAST_SUPPORTED_DATE
return self.page.q(css=self.get_selector(css=selector))
self.assertEqual(result, allow_access)
from __future__ import absolute_import import copy import fnmatch import itertools import logging import os import re import string
revoke_access(course_ccx, staff, 'staff')
- user: admin - password: sekrit
salt '*' win_wua.list_update KB3030298
self.assertNotEqual(old_tab.is_hidden, new_is_hidden_setting)
assert_raises(ValueError, _fast_dot, A, A)
log = logging.getLogger(__name__)
pass
msg = re.sub('(?ms)<html>(.*)</html>', '\\1', msg)
from salt._compat import subprocess
self._cleanup_index_file() super(StudioLibraryContainerTest, self).tearDown()
val = _dmi_cast(key, line.strip(), clean) if val is not None: key_data[1].append(val)
break
from __future__ import absolute_import import logging import os import tempfile
from lms.djangoapps.ccx.utils import get_ccx_from_ccx_locator return get_ccx_from_ccx_locator(course_id)
config.cancel()
resp = self.client.get_html(self.url) self.assertEquals(resp.status_code, 200) self.assertContains(resp, "Export My Course Content")
base_json_obj['resultScore'] = round(self.module_score, 2) base_json_obj['comment'] = self.score_comment return Response(json.dumps(base_json_obj), content_type=LTI_2_0_JSON_CONTENT_TYPE)
locale.__salt__ = {} locale.__opts__ = {}
win_network.__salt__ = {} win_network.__opts__ = {}
self.assertFalse(self.user.is_active)
if self.embargoed_countries == '': return [] return [country.strip().upper() for country in self.embargoed_countries.split(',')]
if sys.version_info[0] < 3: import __builtin__ as builtins else:
super(XBlockAcidBase, self).setUp()
self.q(css=".xblock-student_view .timed-exam .start-timed-exam").first.click() self.wait_for_element_presence(".proctored_exam_status .exam-timer", "Timer bar")
ele = (ele * 2 * numpy.pi) / 360. azi = (azi * 2 * numpy.pi) / 360.
score = self.decision_function(X) decisions = self.loss_._score_to_decision(score) return self.classes_.take(decisions, axis=0)
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
from salt.states import drac
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'qingcloud', vm_['profile'], vm_=vm_) is False: return False
if not os.path.exists(device): msg = "Device {0} doesn't exist!" raise CommandExecutionError(msg.format(device))
if X is not None: X = check_array(X, accept_sparse='csr') n_samples1 = X.shape[0] else: n_samples1 = self._fit_X.shape[0]
return microsite.is_request_in_microsite()
if settings.FEATURES.get('AUTOMATIC_AUTH_FOR_TESTING'): urlpatterns += ( url(r'^auto_auth$', 'student.views.auto_auth'), )
response['Accept-Ranges'] = 'bytes' response['Content-Type'] = content.content_type
try: static_content_store.save(content) except Exception as err: log.exception(u'Error importing {0}, error={1}'.format( fullname_with_subpath, err ))
from __future__ import absolute_import
def __init__(self, collection, page, num_pages, thread_count=0, corrected_text=None): self.collection = collection self.page = page self.num_pages = num_pages self.thread_count = thread_count self.corrected_text = corrected_text
self.workd[yslice] = self.OP(self.workd[xslice])
if not salt.utils.istextfile(path): raise SaltInvocationError( 'Cannot perform string replacements on a binary file: {0}'.format(path))
self.client.login(username=self.username, password=self.password)
EmptyPromise( lambda: self.q(css=create_ccx_button).present, "Create a new Custom Course for edX" ).fulfill() self.q(css=create_ccx_button).click()
MobileApiConfig(video_profiles="mobile_low,youtube").save()
if self.match_check(ind, fun): return True
problem_child = self.store.create_child(self.user_id, chapter_location, 'problem', 'Problem_Child') self.assertFalse(self.store.has_published_version(problem_child))
from __future__ import absolute_import
pred_entropies = stats.distributions.entropy(lp_model.label_distributions_.T)
import salt.utils from salt.exceptions import SaltInvocationError
safe_exec("rnums = [random.randint(0, 999) for _ in xrange(100)]", g) self.assertNotEqual(g['rnums'], rnums)
response = self.api_response() self.assertIn("/courses/{}/".format(self.course.id), response.data['handouts_html'])
registry = Registry() hkey = registry.hkeys[local_hive] key_path = local_key access_mask = registry.registry_32[use_32bit_registry]
clf = DecisionTreeClassifier(max_depth=2, min_samples_split=2, criterion="gini", random_state=2) clf = clf.fit(X, y2, sample_weight=w)
self.conn.put_method.return_value = method_ret self.conn.put_integration.return_value = method_integration_ret self.conn.put_method_response.return_value = method_response_200_ret self.conn.put_intgration_response.return_value = method_integration_response_200_ret
self.assertEquals(block_counts_for_course['problem'], 6) self.assertEquals(block_counts_for_chapter_x['problem'], 3)
if hasattr(self.current_request_configuration, 'cache'): return self.current_request_configuration.cache.get(key)
log.exception("Error in get_module") return None
res = __salt__['cmd.run_all'](cmd, python_shell=False)
self.url = reverse('course_modes_choose', args=[unicode(self.course.id)])
import jinja2 import jinja2.exceptions import salt.ext.six as six
__virtualname__ = 'cyg'
z,zz = 0,0
attr_dict = {key: getattr(self, key) for key in self.FEATURES} attr_dict['created'] = attr_dict['created'].isoformat() return attr_dict
rng = check_random_state(404) y_pred = rng.rand(10)
'rss_proxy',
return self.course_overview
with self.store.bulk_operations(dest_id): source_courselike, courselike, data_path = self.get_courselike(courselike_key, runtime, dest_id)
textline_element = response_element.find("div") self.assertEqual(textline_element.text, 'Input Template Render')
'sudo_user': str,
self.mlp.modify_updates(updates)
transcripts_utils.download_youtube_subs(good_youtube_sub, self.course, settings)
resp = self.client.post(reverse('shoppingcart.views.use_code'), {'code': 'coupon1'}) self.assertEqual(resp.status_code, 200)
link_href = self._find_within(".post-body p a").attrs('href') return link_href[0] if link_href else None
if not salt.utils.cloud.wait_for_port(ip_address, port=winrm_port, timeout=ssh_connect_timeout): raise SaltCloudSystemExit( 'Failed to connect to remote windows host (winrm)' )
conn.get_instance_profile(name) return True
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course_key)) delete_course_and_groups(self.course_key, self.user.id)
assign_coach_role_to_ccx(ccx_locator, request.user, course.id)
org_access_role(lib_key_pacific.org).add_users(self.non_staff_user)
return _load_output(self._output_dir, _get_func_fullname(self.func), timestamp=self.timestamp, metadata=self.metadata, mmap_mode=self.mmap_mode, verbose=self.verbose)
self.opts = opts self.lst = lst return {}
d1 = datetime.datetime(2003, 1, 1) d2 = datetime.datetime(2008, 1, 1)
pythoncom.CoInitialize()
exc_info_on_loglevel=logging.DEBUG
n_samples = 12 n_samples_partial_fit = 3 n_features = 2 rng = np.random.RandomState(42) X = rng.rand(n_samples, n_features) X_partial_fit = rng.rand(n_samples_partial_fit, n_features)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
continue
if self.n_components is None: n_components = X.shape[1] else: n_components = self.n_components
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, username=username, email=email, staff=staff).visit()
try: output = html5lib.parseFragment(html, treebuilder='lxml', namespaceHTMLElements=False)[0] except IndexError: raise ex
validator = kwarg validation_arg = ()
TEST_DATA_SPLIT_MODULESTORE = functools.partial( mixed_store_config, mkdtemp_clean(), {}, store_order=[StoreConstructors.split, StoreConstructors.draft] )
activation_key = create_account(self.USERNAME, self.OLD_PASSWORD, self.OLD_EMAIL) activate_account(activation_key)
if hasattr(error, 'order'): _record_payment_info(params, error.order) else: log.info(json.dumps(params)) return { 'success': False,
if len(inputfiles) > settings.MAX_FILEUPLOADS_PER_INPUT: msg = 'Submission aborted! Maximum %d files may be submitted at once' % \ settings.MAX_FILEUPLOADS_PER_INPUT return msg
self.assertFalse(chemical_equations_equal('H2 + O2 -> H2O2', 'O2 + H2 -> 2H2O2'))
X = np.array([[1, 2], [2, 1], [-2, 1], [-2, -1]]) y_ref = np.array([2, 0, 1, 2])
from __future__ import absolute_import, print_function import errno import logging import os
action_state.delete()
__virtualname__ = 'ip'
url(r'^submit_feedback$', 'util.views.submit_feedback'),
vectorizer = HashingVectorizer(decode_error='ignore', n_features=2 ** 18, non_negative=True)
([[], []], 0 ),
return self._block_relations[usage_key].children if usage_key in self else []
clf.partial_fit(X3, Y3)
kws.update(context) context = kws assert 'opts' in context assert 'saltenv' in context
SUB_EVENT = set([ 'state.highstate', 'state.sls', ])
params['signed_field_names'] = 'reason_code,message' params['signature'] = self._signature(params)
if len(results.violations) != len(rules): for violation in results.violations: print("Found violation: {}".format(violation.rule))
if 'beacons' not in opts: opts['beacons'] = {}
cr_ec2 = MockEC2() cr_ec2.user_id = user_id return [cr_ec2]
list_of_ids = [unicode(top_parent_object.location)] for child in top_parent_object.get_children(): list_of_ids.extend(id_list(child)) return list_of_ids
def _set_cookie_wrapper(key, value='', max_age=None, expires=None, path='/', domain=None, secure=None, httponly=False):
first_checkpoint = VerificationCheckpoint.objects.create( course_id=self.course.id, checkpoint_location=self.checkpoint_midterm ) second_checkpoint = VerificationCheckpoint.objects.create( course_id=self.course.id, checkpoint_location=self.checkpoint_final )
self.assertIsInstance( microsite.get_backend( 'microsite_configuration.backends.database.DatabaseMicrositeBackend', BaseMicrositeBackend ), DatabaseMicrositeBackend )
from __future__ import absolute_import
for student in students[:7]: CertificateWhitelistFactory.create(user=student, course_id=self.course.id, whitelist=True)
X_sparse_test = X_sparse_test.copy()
import salt.utils.locales
return (floating_network, port)
self.rows = shape[0] self.cols = shape[1]
new_params = estimator.get_params() for param_name, original_value in original_params.items(): new_value = new_params[param_name]
return signature[start:end] + 'x' * (end - start) + signature[end:]
try: import win32gui import win32con HAS_WIN32 = True except ImportError: HAS_WIN32 = False
from __future__ import absolute_import import logging import os import stat
services = sorted(set(services))
root.set('org', self.courselike_key.org) root.set('library', self.courselike_key.library)
close_bracket = (token_type == tokenize.OP and text in ']})')
return User.objects.get(email=email)
NUM_RANDOMIZATION_BINS = 20 MAX_RANDOMIZATION_BINS = 1000
self.student = UserFactory( username=self.STUDENT_USERNAME, email=self.STUDENT_EMAIL, password=self.STUDENT_PASSWORD, )
from __future__ import absolute_import import logging from copy import copy
from __future__ import absolute_import
certificate.click_edit_certificate_button() certificate.course_title = "Updated Course Title Override 2" self.assertEqual(certificate.get_text('.action-primary'), "Save") certificate.click_save_certificate_button()
colors = [color_map[y] for y in y_train] plt.scatter(X[:, 0], X[:, 1], c=colors, cmap=plt.cm.Paired)
site_configuration = SiteConfigurationFactory.create( site=self.site, )
docs_train, docs_test, y_train, y_test = train_test_split( dataset.data, dataset.target, test_size=0.5)
from salt.modules import launchctl
raise ValueError("Unknown activation function %s" % self.activation)
key = lambda course: course.sorting_score courses = sorted(courses, key=key)
compute_inherited_metadata(course_descriptor)
for name, scorer in SCORERS.items(): repr(scorer)
self.assertNotIn('index_in_children_list', attributes) self.assertNotIn('parent_sequential_url', attributes) self.assertNotIn('parent_url', attributes)
os.chmod(fn, st_mode | read_all)
page.wait_for_element_visibility('.new-component-html', 'HTML component menu is visible')
'simple_history',
y = np.zeros(n_eval) if eval_MSE: MSE = np.zeros(n_eval)
layer_to_chains[self.dbm.visible_layer] = inputs
warnings.filterwarnings('always', '', DeprecationWarning, __name__)
BODY_SELECTOR = "#structure-panel" TAB_SELECTOR = ".tab#view-course-structure" CHILD_SELECTOR = ".note-group" CHILD_CLASS = EdxNotesChapterGroup
self._initialize_mixed(mappings={})
for field_name in remove_fields: self.fields.pop(field_name)
depth = len(samples)
intersphinx_mapping = {'http://docs.python.org/': None}
self._change_enrollment('enroll', email_opt_in=email_opt_in)
n_samples = 60 n_features = 20
z = np.zeros((X.shape[0], self.n_components))
[{0: 'a', 1: 'b'}, {0: 'a'}],
if not hasattr(self, 'detector_normalization'): self.detector_normalization = None
#latex_appendices = []
data_lst = np.array(data.data, dtype=object) data_lst = data_lst[indices] data.data = data_lst.tolist()
return self.backend.events[idx]
if self.normalize_y: self.y_train_mean = np.mean(y, axis=0) y = y - self.y_train_mean else: self.y_train_mean = np.zeros(1)
with super(InlineDiscussionUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
import os import copy import json import logging
import glob import shutil import logging import os
if self.isalive(): self.wait()
self.set_user_module_score(real_user, score, self.max_score(), comment) return Response(status=200)
robust_cov = MinCovDet().fit(X)
OAUTH_ID_TOKEN_EXPIRATION = 5 * 60
L = np.empty((max_features, max_features), dtype=Gram.dtype)
X, y = datasets.make_friedman3(n_samples=1200, random_state=random_state) X_train, y_train = X[:200], y[:200] X_test, y_test = X[200:], y[200:]
self.update_enrollment(is_active=False)
'auth_timeout': int,
self.assertTrue( self.user.roles.filter(name="Student", course_id=new_course_key) )
return self.q(css='.advance-modules-list li').text
self.setup_logfile_logger() verify_log(self.config)
error_item_names = self.advanced_settings.get_error_item_names() self.assertEqual(set(wrong_settings_list), set(error_item_names))
IPFilter.objects.create( blacklist="192.168.10.20", enabled=True )
raw_video = cls.fetch_about_attribute(course_key, 'video') if raw_video: return cls.parse_video_tag(raw_video)
expiration_date = models.DateField(default=None, null=True, blank=True)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import salt.utils.jid
#html_file_suffix = ''
from __future__ import absolute_import, print_function import os import operator import re import subprocess import tempfile import time import logging import uuid
self.full_path = full_path self.directory = os.path.dirname(full_path) self.is_file = os.path.isfile(full_path) self.violations = []
return "split_test"
EmptyPromise(lambda: self.is_button_shown('transcript_button'), "transcript button is shown").fulfill()
import logging import os import re
p, h = prob_max_pool_c01b(z, (pool_rows, pool_cols), top_down = t) func = function([z, t], [p, h], mode = mode_with_gpu)
with self.assertRaises(SpecificStudentIdMissingError): generate_certificates_for_students( self.create_task_request(self.instructor), self.course.id, student_set='specific_student', specific_student_id=None )
return port
log.debug(u"Referrer hostname is `None`, so it is not on the whitelist.")
nova.__grains__ = {} nova.__salt__ = {} nova.__context__ = {} nova.__opts__ = {}
import ioflo.base.deeding from ioflo.aid.odicting import odict
windows = world.browser.windows assert_equal(len(windows), 2)
LETTUCE_SELENIUM_CLIENT = os.environ.get('LETTUCE_SELENIUM_CLIENT', 'local')
self.set_date('due_date', "#due_date", date)
self.wait_for_ajax() closed_caption_state_selector = self.get_element_selector(CSS_CLASS_NAMES['closed_captions']) return self.q(css=closed_caption_state_selector).visible
mlp = MLPClassifier(hidden_layer_sizes=(50,), max_iter=10, alpha=1e-4, algorithm='sgd', verbose=10, tol=1e-4, random_state=1, learning_rate_init=.1)
self.install_results = None
block_sizes = ('hw_sector_size', 'minimum_io_size', 'physical_block_size', 'logical_block_size') discard_sizes = ('discard_max_bytes', 'discard_max_hw_bytes', )
optioninput_element = etree.Element("optioninput")
pkg_resource.__grains__ = {} pkg_resource.__salt__ = {}
serialized['required'] = required
display_headers.append(enrollment_report_headers.get(header_element, header_element))
C = np.dot(sample_weight, y * y) * 10 if y_min is not None: y[0] = y_min sample_weight[0] = C if y_max is not None: y[-1] = y_max sample_weight[-1] = C
pass
tops.append(os.path.dirname(xml.__file__))
options_str = ",".join(options)
if self.credit_type[0] not in graders: raise LoncapaProblemError('partial_credit attribute should be one of: ' + ','.join(graders))
for attribute in ABOUT_ATTRIBUTES: if attribute in jsondict: cls.update_about_item(descriptor, attribute, jsondict[attribute], user.id)
if len(name) > 10: name = name[:10] return name.replace(' ', '_').strip()
y_true = [1, 2, 3, 3] y_pred = [1, 2, 3, 1] y_true_bin = [0, 1, 1] y_pred_bin = [0, 1, 0]
return beta_from_design(dataset.X, **kwargs)
import salt.utils
out.get('deploy_kwargs', {}) or out.pop('deploy_kwargs', {})
return network
STATUS_MESSAGE_PATH = ENV_ROOT / "status_message.json"
self.assertIn('/gitlogs/MITx/edx4edx/edx4edx', response.content)
self.assertEqual(self.video.speed, '2.0x')
msg = colorize('green', "Confirming servers are running...") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc)
eligibility = CreditEligibility.objects.get(username=self.USERNAME) eligibility.deadline = datetime.datetime.now(pytz.UTC) + datetime.timedelta(days=29) eligibility.save()
theano_rng = MRG_RandomStreams(2013*5*4) cost_weights = theano_rng.normal(size=output_conv2d.shape, dtype=output_conv2d.dtype) cost = (cost_weights * output).sum()
self.find_css('.action-secondary').first.click()
USE_I18N = True
from .tasks import update_course_structure
if feature_names is None: feature_names = [str(i) for i in range(gbrt.n_features)] elif isinstance(feature_names, np.ndarray): feature_names = feature_names.tolist()
thread_local_branch_setting = getattr(self.thread_cache, 'branch_setting', None) if thread_local_branch_setting: return thread_local_branch_setting else: return self.default_branch_setting_func()
if invoice_transaction.amount > 0: payment_status = 'Invoice Paid' else: payment_status = 'Refunded'
pass
back_uuid = uuid(dev) if back_uuid is not None: result['cache'] = back_uuid
if len(idset) > 1: self.context['overall_message'] = msg else: self.context['messages'][0] = msg
already_exists and cinfos['out']['Image'] == iinfos['out']['Id']
from __future__ import unicode_literals
__virtualname__ = 'bluetooth'
keys_config['key_logfile'] = os.devnull keys_config['pki_dir'] = self.options.gen_keys_dir
return self.best_estimator_.transform(Xt)
with open(dquality_dir / "diff_quality_pep8.html", "w") as f: f.write(_pep8_output(count, violations_list, is_html=True))
current_pred = _samme_proba(estimator, n_classes, X)
for member in pkg_files: member.uid = uid member.gid = gid member.uname = uname member.gname = gname
self._requested_xblock_fields = set()
iris = load_iris()
embargoed = models.BooleanField(default=False)
from salt.modules import supervisord
ret['changes']['home'] = ''
request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO["username"]) self.assertEqual(request["parameters"]["user_country"], "")
raise NotImplementedError
param += self.mlp.theano_rng.normal(size=param.shape, avg=0., std=self._std_dev, dtype=param.dtype) return param
if FEATURES.get('ENABLE_CSMH_EXTENDED'): INSTALLED_APPS += ('coursewarehistoryextended',)
#pylint: disable=E0602
if not item_index_dictionary and not item.has_children: return
import copy import logging import json
if 'database' not in kwargs: return False
click_css(self, '.view-live-button', require_notification=False) self.browser.switch_to_window(self.browser.window_handles[-1])
return reverse_func(self.type, args=[course.id.to_deprecated_string(), self.url_slug])
win_path.__salt__ = {} win_path.__opts__ = {}
order = 'C'
self._studio_publish_content(0)
mac_sysctl.__salt__ = {}
self.sock = None self.io_loop = io_loop or IOLoop.current() self._closing = False
self.client.logout() ModuleStoreTestCase.tearDown(self)
if len(inflight_futures) == 0: continue
keystone.region_name: 'RegionOne'
CourseFinanceAdminRole(self.course.id).remove_users(self.instructor)
self.base_extauth_bypass_sending_activation_email(True)
vectorizer = vec_factory(max_df=0.6, max_features=4) vectorizer.fit(ALL_FOOD_DOCS) assert_equal(set(vectorizer.vocabulary_), expected_vocabulary) assert_equal(vectorizer.stop_words_, expected_stop_words)
def __init__(self, bulk_ops_record_type, **kwargs): super(ActiveBulkThread, self).__init__(**kwargs) self.records = defaultdict(bulk_ops_record_type)
ir = IsotonicRegression() copy.copy(ir)
return models.Application.objects.create( name=name, user=user, client_id=client_id, client_type=models.Application.CLIENT_PUBLIC, authorization_grant_type=models.Application.GRANT_PASSWORD, redirect_uris=redirect_uri, )
message = "<script>alert('XSS');</script>" x = "<string>{}</strong>".format(message)
if not user or user.is_anonymous(): return None
self._studio_reindex()
from __future__ import absolute_import import salt.utils import sys import types
if "tags" in kwargs: kwargs["tags"] = _clean_tags(kwargs["tags"]) dog_stats_api.histogram(metric_name, *args, **kwargs)
user_partititons = self.course.user_partitions self.assertEqual(len(user_partititons), 2) self.assertEqual(user_partititons[0].name, 'Name 0')
module = get_module( user, request, problem.scope_ids.usage_id, field_data_cache, )._xmodule module.system.publish(problem, 'grade', grade_dict)
logging.basicConfig(level=logging.DEBUG, format="%(levelname)s %(message)s")
return store.asset_collection
try: import boto import boto3 from boto.exception import BotoServerError
course = CourseFactory.create(course_image='', default_store=default_store) self.assertEquals( 'static/test.png', course_image_url(course), )
super(UnderscoreTemplateLinter, self).__init__() self._skip_underscore_dirs = SKIP_DIRS + ('test',)
self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS + PayAndVerifyView.VERIFICATION_STEPS, PayAndVerifyView.PAYMENT_CONFIRMATION_STEP, )
return self._cache_key_for_kvs_key(kvs_key) in self._cache
self._enroll(course.id, "verified")
__virtualname__ = 'pkgutil'
return AES.new(key, AES.MODE_CBC, generate_aes_iv(key))
'auto_accept': bool, 'autosign_timeout': int,
import salt.utils import salt.utils.fsutils from salt.exceptions import CommandExecutionError from salt.exceptions import get_error_message as _get_error_message
get_blob_properties = show_blob_properties
one_class = np.array([0, 0, 0, 0]) lb = LabelBinarizer().fit(one_class)
scsi_controller_properties = devices['scsi'][scsi_controller_label] scsi_spec = _add_new_scsi_controller_helper(scsi_controller_label, scsi_controller_properties, bus_number) device_specs.append(scsi_spec) bus_number += 1
if hasattr(clz, 'check_throttles'): clz.check_throttles = _check_throttles_decorator(clz.check_throttles)
return getattr(self.steps[0][1], '_pairwise', False)
cart.purchase() cart.purchase() self.assertEquals(len(mail.outbox), 1)
from salt.states import ipset
return False
salt.utils.files.process_read_exception(exc, path)
template = key.lower() if '.' not in template: template = "%s.%s" % (template, settings.STATIC_TEMPLATE_VIEW_DEFAULT_FILE_EXTENSION)
STATES_WITH_STATUS = [state for state in READY_STATES] + [PROGRESS]
vectorizer = TfidfVectorizer(ngram_range=(1, 3), analyzer='char', use_idf=False)
base_url = AssetBaseUrlConfig.get_base_url() excluded_exts = AssetExcludedExtensionsConfig.get_excluded_extensions() url = StaticContent.get_canonicalized_asset_path(course_id, rest, base_url, excluded_exts)
return u"Course '{}': Instructor Email {}Enabled".format(self.course_id.to_deprecated_string(), not_en)
self.assertEqual(response.status_code, 302)
ret['comment'] = 'Event module not available. Beacon add failed.'
course_page.wait_for_page()
analytics_patcher = patch('lms.djangoapps.verify_student.views.analytics') self.mock_tracker = analytics_patcher.start() self.addCleanup(analytics_patcher.stop)
mock_file.name = name return mock_file
comment, passed, retries = _search(quidditch, retries) if not passed: return (comment, str(passed))
return cls.verification_valid_or_pending(user, earliest_allowed_date, queryset).exists()
repr(slo)
labels = km.predict(X) assert_equal(v_measure_score(true_labels, labels), 1.0)
self._captions_visibility(True)
#unused_docs = []
from __future__ import absolute_import from ctypes import CDLL, POINTER, Structure, CFUNCTYPE, cast, pointer, sizeof from ctypes import c_void_p, c_uint, c_char_p, c_char, c_int from ctypes.util import find_library
mongo_course = self.store.get_course(self.course_locations[self.MONGO_COURSEID].course_key) mongo_course.wiki_slug = 'simple' self.store.update_item(mongo_course, self.user_id)
from __future__ import absolute_import import time import pprint import logging
retval = self.service.set_credit_requirement_status( self.user.id, self.course.id, 'grade', 'grade' ) self.assertIsNone(retval)
targets.append(':'.join(_get_repo_tag(str(target))))
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'
self.assertEquals( preview.latex_preview('epsilon_max', variables=['epsilon_max']), r'\epsilon_{max}' )
has_skipped = cache_values.get(has_skipped_cache_key) if has_skipped is None: has_skipped = SkippedReverification.check_user_skipped_reverification_exists(user, course_key) cache.set(has_skipped_cache_key, has_skipped)
echo "manual" > /etc/init/salt-master.override
self.assertEqual(safe_key('test', 'prefix', 5), 'prefix:5:test')
if total_recipients <= settings.BULK_EMAIL_JOB_SIZE_THRESHOLD: routing_key = settings.BULK_EMAIL_ROUTING_KEY_SMALL_JOBS
client = DjangoTestClient() response1 = client.get(path='/shib-login/', data={}, follow=False, **identity) postvars = {'email': u'post_email@stanford.edu',
if method in self.URL_HANDLERS: handlers_list = self.URL_HANDLERS[method] else: self.log_error("Unrecognized method '{method}'".format(method=method)) return
for i, hyperparameter in enumerate(kernel.hyperparameters): theta[i] = np.log(42) kernel.theta = theta assert_almost_equal(getattr(kernel, hyperparameter.name), 42)
start_index = end_triple_quote_match.start()
self.sock = None self.io_loop = io_loop or IOLoop.current() self._closing = False self.streams = set()
self.processes = 0
num_labels_by_type = numpy.array(norb.SmallNORB.num_labels_by_type, 'int') num_labels_by_type[instance_index] = len(new_to_old_instance)
pass
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.5, random_state=0)
rgr = MultiOutputRegressor(GradientBoostingRegressor(random_state=0)) rgr.fit(X, y, w)
try: record = cls.objects.get(course_id=course_id) return record.email_enabled except cls.DoesNotExist: return False
try: import requests import requests.exceptions HAS_LIBS = True except ImportError: HAS_LIBS = False
self.assertTrue('Activate Course Enrollment' in response.content)
send_user_notification = Signal(providing_args=["user", "state"])
return
with self.assertRaises(ItemNotFoundError): self.store.get_item(self.writable_chapter_location)
return { 'is_cohorted': True, 'always_cohort_inline_discussions': True, 'cohorted_inline_discussions': [], 'cohorted_course_wide_discussions': [], 'id': 1 }
student = require_student_from_identifier(request.GET.get('student')) course = get_course_by_id(SlashSeparatedCourseKey.from_deprecated_string(course_id)) return JsonResponse(dump_student_extensions(course, student))
coupon = Coupon( code='test_code', description='test_description', course_id=self.course.id, percentage_discount='10', created_by=self.instructor, is_active=True ) coupon.save()
if len(rtnv) == 0: rtnv.append([])
pass
fetched = self.store.get_item(discussion_item.location)
ROLE = 'staff' def __init__(self, *args, **kwargs): super(CourseStaffRole, self).__init__(self.ROLE, *args, **kwargs)
im = im.convert('RGB')
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
lc_block = self._add_library_content_block(course, self.lib_key) lc_block = self._refresh_children(lc_block) self.assertEqual(len(lc_block.children), 0)
assert np.all(dist < 5 * bandwidth)
pw_user.__grains__ = {} pw_user.__salt__ = {} pw_user.__context__ = {}
src_estate, src_yard, src_share = msg['route']['src'] salt.transport.jobber_estate_name = src_estate salt.transport.jobber_yard_name = src_yard
import os
with open(Env.METRICS_DIR / "pep8", "w") as f: f.write(violations_count_str + '\n\n') f.write(violations_list)
disabled_create_block_types = XBlockDisableConfig.disabled_create_block_types() return [c_type for c_type in ADVANCED_COMPONENT_TYPES if c_type not in disabled_create_block_types]
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self._assert_chapter_loaded(self.course, self.chapter)
with open(self.TEST_INDEX_FILENAME, "w+") as index_file: json.dump({}, index_file)
self.__dict__[attr] = val
from salt.states import pyenv
for chunk in iter(lambda: ifile.read(chunk_size), b''): hash_obj.update(chunk) return hash_obj.hexdigest()
response.data["start"] = (self.page.number - 1) * self.get_page_size(self.request)
problem = new_loncapa_problem(xml_str) problem.done = True problem.student_answers = {'1_2_1': 'choice_1'}
self.run_function('beacons.delete', ['ps']) self.run_function('beacons.save')
course_key = CourseKey.from_string(course_id) self.assertTrue(CreditCourse.objects.filter(course_key=course_key, enabled=enabled).exists())
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
tstart = time() clf = factory(alpha=alpha).fit(X, Y) delta = (time() - tstart)
TIMEINT = int(time.time())
return self._asides
return '{num_members} / {max_size} {members_text}'.format( num_members=num_members, max_size=max_size, members_text='Member' if num_members == max_size else 'Members' )
if token_privileges[privilege] == privilege_attrs: log.debug( 'The requested privilege {0} is already in the ' 'requested state.'.format(privilege_name) ) return True
for utmp in '/var/run/utmp', '/run/utmp': try: result[os.stat(utmp).st_mtime] = utmp except Exception: pass return result[sorted(result).pop()]
resp = self.create_xblock(parent_usage_key=self.seq_usage_key, category='problem', boilerplate='multiplechoice.yaml') self.problem_usage_key = self.response_usage_key(resp)
if not basedir: basedir = _get_yum_config_value('reposdir')
h = hashlib.md5() h.update(str(seed)) return h.hexdigest()
AUTH_ENTRY_LOGIN = 'login' AUTH_ENTRY_REGISTER = 'register' AUTH_ENTRY_ACCOUNT_SETTINGS = 'account_settings'
__virtualname__ = 'desktop'
_config_filename_ = 'master'
header = [field for field in output[0].lower().split(" ") if field] del output[0]
from __future__ import absolute_import
for item in mask.split(','): if item not in _MASK_TYPES: return 'Invalid mask type: {0}' . format(item)
msg = 'Disabling timed exam {exam_id}'.format(exam_id=exam['id']) log.info(msg) update_exam( exam_id=exam['id'], is_proctored=False, is_active=False, )
self.factory(alpha=0, learning_rate="optimal")
input_data = ifile.read() if not input_data.strip(): log.error('Template is nothing but whitespace: {0}'.format(template)) return ret
pass
keystone.__salt__ = {}
self.find_css('.signatory-name-input').first.fill(value)
self._process_map = {}
return self.cleaned_data.get("page") or 1
from __future__ import absolute_import
master_doc = 'index'
assert_array_equal(np.sort(X_counted.data), np.sort(X_hashed.data))
salt.utils.cloud.remove_key(self.opts['pki_dir'], os.path.basename(key_file)) continue
problem = self.build_problem(answer=u"\\\\", case_sensitive=False, regexp=True) self.assert_grade(problem, u"\\", "correct")
from __future__ import absolute_import import logging
item.is_draft = (item.location.revision == MongoRevisionKey.draft) item.location = item.location.replace(revision=MongoRevisionKey.published) return item
return super(NullBackend, self).clear()
if sp.issparse(preds[0]): preds = sp.vstack(preds, format=preds[0].format) else: preds = np.concatenate(preds) return preds[inv_locs]
cv = check_cv(self.cv, y, classifier=True) folds = list(cv.split(X, y))
user_list[0].course_groups.add(non_cohort) user_list[0].course_groups.clear() self.assertFalse(mock_tracker.emit.called)
module = CapaFactory.create(attempts=0, done=True)
import salt.utils from salt.exceptions import CommandExecutionError
self.user.is_active = False self.user.save() verify_get_own_information(9)
return self.lcp.get_max_score()
has_access.return_value = True response = views.section_problem_grade_distrib(self.request, 'test/test/test', '1') self.assertEqual(json.dumps(self.simple_data), response.content)
self.assertEqual(xblock_info['is_header_visible'], False) self.assertEqual(xblock_info['display_name'], 'Subsection - Entrance Exam')
self.app = app
self.wait_for_ajax() video_selector = '{0}'.format(CSS_CLASS_NAMES['video_container']) self.wait_for_element_presence(video_selector, 'Video is initialized')
return getattr(course, 'enable_ccx', False)
from __future__ import absolute_import import os
return self._extra_fields_setting.get(field_name) in ["required", "optional"]
metadata_translations = { 'slug': 'url_name', 'name': 'display_name', }
packed_coef_inter = _pack(self.coefs_, self.intercepts_)
call_command('force_publish', unicode(self.course.id), '--commit')
from __future__ import absolute_import import os import threading
copy = copy if copy is not None else self.copy X = check_array(X, accept_sparse='csr') return normalize(X, norm=self.norm, axis=1, copy=copy)
assert element.value.strip() == expected
self.ha_cmd = ha_cmd self.objectify = objectify return True
self.youtube_configuration.update({ 'youtube_api_blocked': True, })
state = (self._corrupt_switch, self._sample_switch, self._bias_switch)
folds_iter = self.iterator(mode="random_slice", num_batches=nfolds, rng=rng) folds = list(folds_iter) return folds
self.client.login(username=self.coach.username, password="test")
log.warning('Unable to find group named %s for Zendesk ticket with ID %s.', group_name, ticket_id)
try: from pyamg import smoothed_aggregation_solver except ImportError: raise SkipTest("pyamg not available.")
self.check_import(root_dir, content_store, course_id)
content_location = StaticContent.compute_location( location.course_key, asset_name ) try: contentstore().find(content_location) except NotFoundError: return False else: return True
return dataset.y.mean(axis=0)
FEATURES['ENABLE_LTI_PROVIDER'] = True INSTALLED_APPS += ('lti_provider',) AUTHENTICATION_BACKENDS += ('lti_provider.users.LtiBackend',)
if self.read_committed is True: if connection.vendor == 'mysql': cursor = connection.cursor() cursor.execute("SET TRANSACTION ISOLATION LEVEL READ COMMITTED")
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
self.page.create_experiment_group_configuration() config = self.page.experiment_group_configurations[0] config.description = "Description of the group configuration."
plt.figure(figsize=(20, 6))
return '{} {}'.format(self.selector, selector)
from salttesting.unit import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
enabled = [] for line in service_lines: if line.startswith('PID'): continue
return ResponseXMLFactory.choicegroup_input_xml(**kwargs)
assert_raises(ValueError, dbscan, [[0], [1]], sample_weight=[2]) assert_raises(ValueError, dbscan, [[0], [1]], sample_weight=[2, 3, 4])
raise NotImplementedError(str(self.__class__) + " does not implement " "sample_from_p_z.")
self.instructor_dashboard_page = InstructorDashboardPage(self.browser, self.course_id) self.instructor_dashboard_page.visit() self.cohort_management_page = self.instructor_dashboard_page.select_cohort_management()
ident = re.sub(r' \[.+B\]$', '', ident) ret[ident] = True
return LoncapaProblem(xml, id='1', seed=seed, capa_system=capa_system or test_capa_system(), capa_module=mock_capa_module())
self.q(css='div.problem .clarification:nth-child({index}) i[data-tooltip]'.format(index=index + 1)).click()
kernel_svm = svm.SVC(gamma=.2) linear_svm = svm.LinearSVC()
fs_root = mkdtemp()
from __future__ import unicode_literals
self._create_library() self._create_xblock_children(self.library_location, self.children) return self
warnings.filterwarnings('always', '', DeprecationWarning, __name__)
iris = load_iris() X = iris.data[:, [0, 2]] y = iris.target X = X[y != 2] y = y[y != 2]
LOGGING_TEMP_HANDLER = StreamHandler(sys.stderr)
ModeCreationPage( self.browser, self.course_id, mode_slug=u'verified', mode_display_name=u'Verified Certificate', min_price=10, suggested_prices='10,20' ).visit()
import time import math import fnmatch import logging from copy import copy from collections import defaultdict
response = self.client.get(reverse(url_name)) self.assertRedirects(response, reverse("dashboard"))
from __future__ import absolute_import from distutils.version import LooseVersion import re import logging
module.reset_problem({})
self.assertEquals(293, self.response.content.count('grade_None'))
Xtrans = Xtrans.toarray() Xtrans2 = mkchi2(k=2).fit_transform(Xsp, y).toarray() assert_equal(Xtrans, Xtrans2)
y_pred = KMeans(n_clusters=2, random_state=random_state).fit_predict(X)
return self.bias.get_value()
y = np.array([3, 7, 5, 9, 8, 7, 10]) x = np.arange(len(y))
penalty = penalty + abs(var ** self.p).sum()
'edx_proctoring',
from __future__ import absolute_import
import salt.utils.jid import salt.returners import salt.ext.six as six
from __future__ import unicode_literals
location = self.old_course_key.make_usage_key('discussion', block_id='Discussion1') self.draft_mongo.delete_item(location, self.user_id)
import salt.log.setup
salt '*' win_update.list_updates categories="['Critical Updates']" verbose=True
self.assertTrue(self._is_location_published(location)) self.assertTrue(modulestore().has_changes(modulestore().get_item(location)))
self.navigate_to_video()
return _makeTags( tagStr, True )
return aside_id.definition_key
from __future__ import absolute_import import time import json import pprint import logging import hmac import uuid import sys import base64 from hashlib import sha1
try: import rfc3987 HAS_RFC3987 = True except ImportError: HAS_RFC3987 = False
from salt.states import boto_cloudwatch_alarm
self.settings_detail.refresh_page() self.settings_detail.wait_for_prerequisite_course_options() self.assertTrue(is_option_value_selected( browser_query=self.settings_detail.pre_requisite_course_options, value='' ))
n_valid = valid_repr.shape[0] n_test = test_repr.shape[0]
if user: self.q(css='input[id^=sd_fu_]').fill(user) self.q(css='section.staff-modal a.staff-debug-sdelete').click()
for k, v in result_json.items(): if isinstance(v, list): result_json[k] += next_page_results[k]
self.assertIn( {'type': 'html_textbooks'}, list(xmodule_tabs.CourseTabList.iterate_displayable(self.course, inline_collections=False)), )
names = []
self.post_process(root, export_fs)
op = optparse.OptionParser() op.add_option("--n-times", dest="n_times", default=5, type=int, help="Benchmark results are average over n_times experiments")
for opt in ssl_option: key = next(six.iterkeys(opt))
if (student_username != request.user.username) and (not staff_access): raise PermissionDenied
self.client.login(username=self.audit_course_instructor.username, password='test')
y_pred = self._fit_stage(i, X, y, y_pred, sample_weight, sample_mask, random_state, X_idx_sorted, X_csc, X_csr)
buckets = 10 bucket_width = 1. / float(buckets) for i in xrange(buckets): lower_lim = i * bucket_width upper_lim = (i+1) * bucket_width
if self.__called: self._reset() self.__called = False
if existing['code'] == 200:
return self.runtime.service(self, 'library_tools')
get_deployment = show_deployment
if hasattr(searchindex, 'decode'): searchindex = searchindex.decode('UTF-8')
return self.q(css="div.problem section.inputtype div.incorrect span.status").is_present()
wua_session = win32com.client.Dispatch('Microsoft.Update.Session')
from __future__ import absolute_import
log.info('Spot instance status: {0}'.format( data[0]['status']['message'] )) return None
ret = self.run_function('beacons.enable') self.assertTrue(ret['result'])
from salt.ext.six.moves import range
success = self.client.login(username=self.SUPPORT_USERNAME, password=self.SUPPORT_PASSWORD) self.assertTrue(success, msg="Couldn't log in as support staff")
random_instance = check_random_state(random_state) sample_indices = random_instance.randint(0, n_samples, n_samples) return sample_indices
IS_WIN = win_firewall.__virtual__()
self.assertEqual( StudentModule.objects.filter( student=self.module_to_reset.student, course_id=self.course.id, module_state_key=self.module_to_reset.module_state_key, ).count(), 0 )
items = raw data = items
msg = '<div class="capa_alert">%s</div>' % msg return msg
MAXSIZE = int((1 << 31) - 1)
X = [[1., 2.], [3., 4.]]
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
if use_post: response = self.client.post(url) else: response = self.client.get(url) self.assertEquals(response.status_code, 404)
memory = Memory(os.path.join(get_data_home(), 'mnist_benchmark_data'), mmap_mode='r')
BODY_SELECTOR = "#search-results-panel" TAB_SELECTOR = ".tab#view-search-results"
p_idx = rng.randint(num_p)
energy = dbm.energy(V = v_state, hidden = [y_state]) unnormalized_prob = T.exp(-energy) assert unnormalized_prob.ndim == 1 unnormalized_prob = unnormalized_prob[0] unnormalized_prob = function([], unnormalized_prob)
delattr(obj.__class__, self.name)
keyed_result = OrderedDict() for component in result: keyed_result[component['module']] = component del keyed_result[component['module']]['module']
self.options.saltfile = os.path.abspath(self.options.saltfile)
from __future__ import unicode_literals
if PY3_OR_LATER: dispatch[pickle.BUILD[0]] = load_build else: dispatch[pickle.BUILD] = load_build
from __future__ import absolute_import import copy import re import os import logging
self.assert_created_course()
display_name = 'chapter created' resp = self.create_xblock(display_name=display_name, category='chapter') chap_usage_key = self.response_usage_key(resp)
pass
if not updates: return 'No updates found. Check software and drivers parameters. One must be true.'
EmptyPromise(self.is_upload_finished, 'Upload Finished', timeout=30).fulfill()
if mp is not None: try: _sem = mp.Semaphore()
form = self.get_form(expected_valid=True) self.assertDictEqual(form.cleaned_data, self.cleaned_data)
assert_is_none(get_current_request())
from __future__ import absolute_import
mode = CourseMode(mode_slug=slug) self.assertEqual(self.course.get_mode_display_name(mode), expected_display_name)
import salt.utils import salt.utils.decorators as decorators import salt.utils.network import salt.utils.validate.net from salt.exceptions import CommandExecutionError
stats = celery.control.inspect().stats() or {} return HttpResponse(json.dumps(stats, indent=4), content_type="application/json")
from __future__ import absolute_import
self.assertEqual( deploy_dir_path, default_config['deploy_scripts_search_path'][0] )
kwargs.setdefault('enabled', True) SAMLConfiguration(**kwargs).save()
clf = NearestCentroid() clf.fit(X, y) assert_array_equal(clf.predict(T), true_result)
verification_deadline = datetime(year=2020, month=12, day=31, tzinfo=pytz.utc) expiration_datetime = datetime.now(pytz.utc) response, expected = self._get_update_response_and_expected_data(expiration_datetime, verification_deadline)
self.assert_grade(problem, "Other String", "incorrect")
likelihood = np.exp(values - values.max(axis=1)[:, np.newaxis]) return likelihood / likelihood.sum(axis=1)[:, np.newaxis]
rng = np.random.RandomState(0) X_ = rng.random_sample((5, 10)) y_ = np.ones(X_.shape[0]) y_[0] = 0
self.cmap.set_overall_message(None) self.assertEqual(self.cmap.get_overall_message(), "")
self._params = {}
if match is not None: return True
for asset in assets: self.assertEquals(asset['displayname'], asset_displayname)
y_lower = clf.predict(xx)
MESSAGE = _('The specified remote branch is not available.')
import logging
Client:
self.assertFalse(self.cmap.is_partially_correct('9_2_1'))
for frac in np.linspace(0, 0.5, 6): est = ForestEstimator(min_weight_fraction_leaf=frac, n_estimators=1, random_state=0) if "RandomForest" in name: est.bootstrap = False
for setting in settings: settings[setting] = str(settings[setting])
fields: - field_1 - field_2
from salttesting.unit import skipIf from salttesting.helpers import ( ensure_in_syspath, destructiveTest) ensure_in_syspath('../../../')
import salt.fileclient import salt.utils.url
TestDaemon.transplant_configs(transport=self.options.transport)
if logout_first: self.client.logout() self.client.login(username=self.user.username, password=self.user_password)
for i in range(self.n_layers_ - 1): end = start + layer_units[i + 1] self._intercept_indptr.append((start, end)) start = end
pkg_params = {name: version_num}
'openedx.core.djangoapps.site_configuration',
exc_info_on_loglevel=logging.DEBUG
self.split_modulestore.fix_not_found(course_version_locator, user_id)
latex += render_frac(numerator, denominator) + r"\cdot "
if from_config is not None: __context__[contextkey] = from_config return from_config
var_f_star = self.kernel_.diag(X) - np.einsum("ij,ij->j", v, v)
for i in range(X.shape[0]): assert_almost_equal(np.linalg.norm(X[0].data, 1), 1.0)
scores = cross_val_score(clf, X_sparse, multioutput_y) assert_array_equal(scores, clf.score(X_sparse, multioutput_y))
dest_info.edit_info.previous_version = dest_info.edit_info.update_version dest_info.edit_info.update_version = old_dest_structure_version dest_info.edit_info.edited_by = user_id dest_info.edit_info.edited_on = datetime.datetime.now(UTC)
salt '*' schedule.list show_all=True
X = self._check_fit_data(X) return self.fit(X)._transform(X)
if __grains__['os'] in ['Windows']: changes_needed = False current_settings = __salt__['proxy.get_proxy_win']() current_domains = __salt__['proxy.get_proxy_bypass']()
response = self.client.get(self.url) expected_html = ( 'Enable Student-Generated Certificates' if is_enabled else 'Disable Student-Generated Certificates' ) self.assertContains(response, expected_html)
permutation_option = None if response.has_shuffle(): permutation_option = 'shuffle' elif response.has_answerpool(): permutation_option = 'answerpool'
self.assertFalse(self.advanced_settings.is_validation_modal_present())
weights = rand_data.weights g = GaussianMixture(weights_init=weights, n_components=n_components) g.fit(X) assert_array_equal(weights, g.weights_init)
from __future__ import absolute_import import os
self.events.append({"event": event, "event_type": event_type}) old_publish(block, event_type, event)
self.assertContains(response, "super-ugly")
assert False
user=user, course_id=course.location.course_key, status=CertificateStatuses.downloadable
import salt.master self.master = salt.master.Master(self.config)
GitBase.__init__(self, opts, valid_providers=('gitpython', 'pygit2'))
required_keys = ['provider'] alias, driver = provider.split(':')
if response is None: response = HttpResponse(content.stream_data()) response['Content-Length'] = content.length
termination_criterion = EpochCounter(5)
attempts_left_open = CapaFactory.create(showanswer='finished', max_attempts="1", attempts="0", due=self.tomorrow_str) self.assertFalse(attempts_left_open.answer_available())
request.grant_type = None
X_features = combined_features.fit(X, y).transform(X)
from __future__ import print_function
try: final_grade = CreditRequirementStatus.objects.get( username=username, requirement__namespace="grade", requirement__name="grade", requirement__course__course_key=course_key, status="satisfied" ).reason["final_grade"]
option2=main2
procArgs = (None, cmd, security_attributes, security_attributes, 1, 0, user_environment, None, startup_info)
redirect_url = reverse('dashboard') + '?course_closed=1%2F1%2F15%2C+12%3A00+AM' self.assertRedirects(response, redirect_url)
exc_type, exc_value, exc_tb = sys.exc_info()
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
minion.setdefault('grains', {}).update( salt.config.get_cloud_config_value( 'grains', vm_, opts, default={}, search_global=True ) ) return minion
self._pool = None self._output = None self._jobs = list() self._managed_pool = False
assert_greater(X.std(axis=0).std(), 43.8)
import logging import os import inspect import zipfile from tempfile import TemporaryFile
X = self._validate_for_predict(X) X = self._compute_kernel(X)
self._lock = threading.Lock()
import win32serviceutil import win32service import win32event import win32api
self.assertTrue(all(isinstance(course, CourseSummary) for course in courses_summary_list)) self.assertEqual(len(courses_summary_list), 1)
self.assertEqual(url_path, '/embargo/blocked-message/courseware/default/')
with self.assertRaises(CommandError): self.command.handle('not/found', all=False)
pca = PCA(n_components=50) pca.fit(X) pca_test = PCA(n_components=50, svd_solver='full') pca_test.fit(X) assert_array_almost_equal(pca.components_, pca_test.components_)
npm_output = result['stdout'] or result['stderr'] try: return json.loads(npm_output) except ValueError: pass
weights = np.sum(y_true_binarize, axis=0, dtype=int)
if request is not None and hasattr(request, 'META'): return get_ip(request) else: return default
deploy_scripts_search_paths.append((entry, True))
agent_version = 1
from ratelimitbackend import admin
choose_track_url = reverse('course_modes_choose', args=[unicode(self.course.id)]) self.client.post(choose_track_url, self.POST_PARAMS_FOR_COURSE_MODE['verified'])
task = object_ref.Clone(folder_ref, vm_name, clone_spec) salt.utils.vmware.wait_for_task(task, vm_name, 'clone', 5, 'info')
self.assertEqual(buffer_o, expected_data) self.assertFalse(term.isalive())
if len(self.estimators_) > 1: self.estimators_.pop(-1) return None, None, None
with self.assertRaisesRegexp(LTIError, "Content-Type must be"): request = Mock(headers={u'Content-Type': u'Non-existent'}) self.xmodule.verify_lti_2_0_result_rest_headers(request)
current_val = request_params.pop('DeveloperProviderName', None) if current_val is None and DeveloperProviderName is not None: request_params['DeveloperProviderName'] = DeveloperProviderName
le = LabelEncoder() assert_raises(ValueError, le.transform, []) assert_raises(ValueError, le.inverse_transform, [])
import salt import salt.utils import salt.version import salt.loader import salt.ext.six as six from salt.utils.decorators import depends
exclude_dirs = ['images', 'scripts', 'sandbox']
precision = tp / T.maximum(1., tp + fp) return precision
NEVER_PUBLISHED = 1 UNPUBLISHED_CHANGES = 2 PUBLISHED = 3 VALUES = [NEVER_PUBLISHED, UNPUBLISHED_CHANGES, PUBLISHED]
self.client.login(username=self.global_staff.username, password="test") self._assert_certificates_visible(False)
return self.make_call(reverse('team_membership_list'), expected_status, 'post', data, **kwargs)
from __future__ import unicode_literals from datetime import timedelta
width = self.ext.config['dailymotion_width'][0] height = self.ext.config['dailymotion_height'][0] return flash_object(url, width, height)
from __future__ import absolute_import import os import re import fnmatch import json import subprocess
self.video.wait_for_state('pause')
X_0 = X[y == 0, :] y_0 = y[y == 0]
continue
import salt.utils
self.assertTrue(pkg_targets)
self.assertEqual(len(site_configuration_history), 2)
enrolled = CourseEnrollment.objects.users_enrolled_in(course_id=course_id).values_list('email', flat=True) return CourseEnrollmentAllowed.objects.filter(course_id=course_id).exclude(email__in=enrolled)
if 'minimum_grade_credit' in request.json: update_credit_course_requirements.delay(unicode(course_key))
FilterActs = None WeightActs = None
from __future__ import absolute_import import textwrap
return method(self.noc_info, other.noc_info)
__virtualname__ = 'nictagadm'
user=user, course_id=course.location.course_key, status=CertificateStatuses.downloadable
fancy = False
assert_true(id1, id2)
attempts_left_open = CapaFactory.create(showanswer='past_due', max_attempts="1", attempts="0", due=self.tomorrow_str) self.assertFalse(attempts_left_open.answer_available())
for whitelist_country in whitelist: CountryAccessRule.objects.create( rule_type=CountryAccessRule.WHITELIST_RULE, restricted_course=self.restricted_course, country=Country.objects.get(country=whitelist_country) )
problem.save() self.assertIn('graceperiod', own_metadata(problem)) self.assertEqual(problem.graceperiod, new_graceperiod)
if response.status_code != 200: log.error( "Outcome service response: Unexpected status code %s", response.status_code ) return False
self.elapsed = 0 self.total_errors = 0 self.counters = dict.fromkeys(self._benchmark_keys, 0) self.messages = {}
print('Loading model...') model = serial.load(model_path) model.set_batch_size(m) return model
self.client = Client() assert_true(self.client.login(username=uname, password=password))
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call )
self._assert_cert_status(self.courses[0].id, self.user, CertificateStatuses.notpassing) self._assert_cert_status(self.courses[1].id, self.user, other_status)
continue
for line in installed_list_file: l=line.rstrip().split(' ') if l: self.installed_packages_list[l[0]]=\ this_package=self.package_info(
PASSWORD_MIN_LENGTH = 2 PASSWORD_MAX_LENGTH = 75
if not installer: log.error('No installer configured for version {0} of package ' '{1}'.format(version_num, pkg_name)) ret[pkg_name] = {'no installer': version_num} continue
repr(slo)
y_hat = sum(all_y_hat) / len(self.estimators_)
import datetime import json
assert_array_almost_equal(X_transformed[:, :-1], svd.fit_transform(X)) assert_array_equal(X_transformed[:, -1], select.fit_transform(X, y).ravel())
powerpath.__salt__ = {}
cohorts_status = {}
response = self.client.post(url, { 'unique_student_identifier': self.student.email, })
module.runtime = inner_system inner_system.xmodule_instance = module
self._studio_publish_content(1)
permutation = random_state.permutation(dim) aux = aux[permutation].T[permutation] chol += aux prec = np.dot(chol.T, chol)
#pylint: disable=E0602
message = models.CharField(max_length=MAX_MESSAGE_LENGTH)
self.navigate_to_video() self.video.show_captions()
return -2
autosummary_generate = True
pass
X = check_array(X, accept_sparse=['csr', 'csc'])
assert_almost_equal(dists[3], 2, decimal=5)
__virtualname__ = 'sysrc'
NOVACLIENT_MINVER = '2.6.1'
def two_pass_var(X): mean = X.mean(axis=0) Y = X.copy() return np.mean((Y - mean)**2, axis=0)
import salt.payload import salt.utils from salt.defaults import DEFAULT_TARGET_DELIM from salt.exceptions import CommandExecutionError import salt.auth.ldap import salt.ext.six as six
y = f(X).ravel()
#today = '' #today_fmt = '%B %d, %Y'
self.sigma_[:, :] -= epsilon
self.filter(id=entry_id).delete()
from request_cache.middleware import RequestCache
self.wait_for_ajax() return self._is_element_visible(".response_{} .response-body".format(comment_id))
for pkg_name, pkg_info in installed.items(): self.assertEqual(installed[pkg_name].get('source'), run_out[pkg_name]['source_rpm'])
STUDENT_FILEUPLOAD_MAX_SIZE = ENV_TOKENS.get("STUDENT_FILEUPLOAD_MAX_SIZE", STUDENT_FILEUPLOAD_MAX_SIZE)
salt '*' vsphere.list_ssds my.esxi.host root bad-password
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
ms = MeanShift(bandwidth=1.2) labels = ms.fit_predict(X) labels2 = ms.predict(X) assert_array_equal(labels, labels2)
verify_file_presence(False)
self.assertEquals(self.get_about_page_link(), "//localhost:8000/courses/mitX/101/test/about")
CourseEnrollment.unenroll_by_email("not_jack@fake.edx.org", course_id) self.assert_no_events_were_emitted()
email_placeholder = _(u"username@domain.com")
index = world.get_setting_entry_index(DISPLAY_NAME) world.set_field_value(index, '3.4') verify_modified_display_name()
'ENABLE_SERVICE_STATUS': False,
hglib.init(rp_) new_remote = True
from __future__ import absolute_import, print_function import sys import inspect import textwrap import functools
return cls.objects.filter(course_id=course_key, status=status).count()
Y = rng.random_sample((3, 4)) assert_raises(ValueError, paired_distances, X, Y)
log_ais_w = numpy.zeros(batch_size, dtype=floatX)
from __future__ import unicode_literals
try: with fopen(fp_, 'rb') as fp2_: block = fp2_.read(blocksize) except IOError: return False
HAS_PSUTIL = False try: import psutil HAS_PSUTIL = True except ImportError: pass
from salt.version import SaltStackVersion
time.sleep(2)
self.assertEqual(cart.status, 'purchased')
return
self.go_to_sequential_position(1) execute_video_steps(tab1_video_names)
(['honor', 'verified', 'audit'], 'honor'),
with self.assertRaisesRegexp(GitExportError, unicode(GitExportError.CANNOT_PULL)): git_export_utils.export_to_git( course_key, 'https://user:blah@example.com/r.git')
updates[sum_square_grad] = new_sum_squared_grad updates[param] = param + delta_x_t
params.update(default_flow_style=False)
return self.rescore_submission_button.click()
to_process = [] if children: to_process = self._query_children_for_cache_children(course_key, children)
legacy_profile = UserProfile.objects.get(id=self.user.id) name_change_info = legacy_profile.get_meta()["old_names"] self.assertEqual(expected_entries, len(name_change_info)) return name_change_info
config.toggle() self.assertFalse(config.details_error_icon_is_present) self.assertFalse(config.details_message_is_present)
pass
if hint_list: hintgroup_element = etree.SubElement(response_element, "hintgroup")
x_weights_sign_flip = pls_ca.x_weights_ / x_weights
return library_key.replace(version_guid=None, branch=None)
log.debug("configuration error in split test module: no such child") return []
self._X_ = X = unique_X self._y_ = y = isotonic_regression(unique_y, unique_sample_weight, self.y_min, self.y_max, increasing=self.increasing_)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
get_storage = show_storage
course_mode = CourseMode.objects.get(pk=1) self.assertEqual(course_mode.expiration_datetime.replace(tzinfo=None), expiration.replace(tzinfo=None))
'transcript': 'http://video.google.com/timedtext?lang=en&v=OEoXaMPEzfM',
probas_ = self.predict_proba(X) return np.log(probas_)
if depth: cmd = '{0} -d {1}'.format(cmd, depth) elif recursive: cmd = '{0} -r'.format(cmd)
import integration
n_samples = 500
instructor_user = User.objects.create_user('test_instructor_user', 'test_instructor_user@openedx.org', 'test') CourseInstructorRole(self.master_course_key).add_users(instructor_user)
([[10, 10, 8], [9, 8, 1], [9, 7, 4]], 18 ),
self.process_root(root, export_fs)
dictionary = np.array(dictionary, order='F')
if ac_only is not None: task_definition.Settings.DisallowStartIfOnBatteries = ac_only if stop_if_on_batteries is not None: task_definition.Settings.StopIfGoingOnBatteries = stop_if_on_batteries if wake_to_run is not None: task_definition.Settings.WakeToRun = wake_to_run
self.exceptions = [TransportableException]
if IdentityPoolName is not None and IdentityPoolName != request_params.get('IdentityPoolName'): request_params['IdentityPoolName'] = IdentityPoolName
Env.METRICS_DIR.makedirs_p()
server_thread = threading.Thread(target=self.server.serve_forever) server_thread.daemon = True server_thread.start()
staff_role = CourseStaffRole(course_key) staff_role.remove_users(*staff_role.users_with_role()) instructor_role = CourseInstructorRole(course_key) instructor_role.remove_users(*instructor_role.users_with_role())
break
account_settings = AccountSettingsPage(self.browser).visit() account_settings.switch_account_settings_tabs('accounts-tab')
self.assertEquals(preview.latex_preview('x', variables=['x']), 'x')
from __future__ import absolute_import
if name in self.opts['schedule']: del self.opts['schedule'][name] schedule = self.opts['schedule']
if len(err_rows) > 1: upload_csv_to_report_store(err_rows, 'grade_report_err', course_id, start_date)
return ' '.join(scopes)
course_url = get_url('course_handler', destination_course_key, 'course_key_string') response = self.client.ajax_post(course_url, rerun_course_data)
self.assert_grade(problem, "Other String", "incorrect") self.assert_grade(problem, "second", "incorrect")
label_measure = metric(y_true, y_pred, average=None) assert_array_almost_equal(label_measure, [metric(y_true_binarize[:, i], y_pred_binarize[:, i]) for i in range(n_classes)])
#latex_appendices = []
self.assertEqual(len(courses), 1) self.verify_course(courses[0])
raise NotImplementedError('Not implemented for sparse dataset')
from salt.modules import win_ip from salt.exceptions import CommandExecutionError, SaltInvocationError
self.teams_page.verify_my_team_count(expected_number_of_teams)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
if name in list_folders(location): return '{0} already exists'.format(name)
self.wait_for_ajax()
mode = 'partitions'
key = safe_key(key, '', '')
try: perms = self.application.opts['external_auth'][token['eauth']][token['name']]
continue
import yaml from yaml.nodes import MappingNode, SequenceNode from yaml.constructor import ConstructorError try: yaml.Loader = yaml.CLoader yaml.Dumper = yaml.CDumper except Exception: pass
self.assertEqual(response.status_code, 400)
y_true_inv = ["b" if i == "a" else "a" for i in y_true]
return (0., 0., 0., 0)
if (children_left[node_id] != children_right[node_id]): stack.append((children_left[node_id], parent_depth + 1)) stack.append((children_right[node_id], parent_depth + 1)) else: is_leaves[node_id] = True
opts['providers'][lprovider] = {} opts['providers'][lprovider][lprovider] = provider_config
for key, value in pkg_nfo.items(): if key == 'source_rpm': t_nfo['source'] = value else: t_nfo[key] = value
#categories = None
self.assertEquals(preview.latex_preview('sqrt(3)'), r'\sqrt{3}')
raise NotImplementedError
os.environ['EXPENSIVE_TESTS'] = 'True'
from __future__ import absolute_import import os
if 'FEATURES' in ENV_TOKENS: del ENV_TOKENS['FEATURES']
fe_bp_h1 = free_energy_at_beta(W_list, b_list, nsamples, beta, pa_bias, marginalize_odd=marginalize_odd) free_energy_fn = theano.function([beta], fe_bp_h1)
import salt.config from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) import os
get_request_dict = {} result = module.reset_problem(get_request_dict)
continue
__virtualname__ = 'imgadm'
'default': { 'BACKEND': 'django.core.cache.backends.dummy.DummyCache', },
Y_proba = clf_sprs.predict_proba(X_test)
self.user.is_staff = True self.assertTrue(user_has_role(self.user, CourseCreatorRole()))
#latex_use_modindex = True
_verify_page_names('First', 'Empty')
CourseEnrollment.enroll(self.honor_user, self.course_key, "honor")
self.assertFalse(user.badgeassertion_set.all())
course_publish_orphans = self.store.get_orphans(course_locator_publish)
from __future__ import absolute_import
serialized['x-ordering'] = ordering
step_incr = -1 start_idx = (num_assets - 1) - start_idx end_idx = (num_assets - 1) - end_idx
if curr_problem in prob_grade_distrib: prob_grade_distrib[curr_problem]['grade_distrib'].append((row['grade'], row['count_grade']))
self.wait_for_ajax() return self._get_element_text(".response-count")
value = loader.construct_scalar(node) return float(value)
content = json.loads(response.content) parameters = content['parameters']
import salt.utils from salt.exceptions import SaltInvocationError
container_ref = None if datacenter: datacenter_ref = salt.utils.vmware.get_mor_by_property(_get_si(), vim.Datacenter, datacenter) container_ref = datacenter_ref if datacenter_ref else None
elif existing['code'] == 404:
return convolution_indices.evaluate(inshp, kshp, offset, nkern, mode=mode, ws=False)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'ec2', vm_['profile'], vm_=vm_) is False: return False
from __future__ import unicode_literals
if driver == 'vmware' and profile_key.get('image', True): non_image_drivers.append('vmware')
return self.oauth2_adapter.create_confidential_client( name='Test Confidential Application', user=user, client_id=client_id, redirect_uri=DUMMY_REDIRECT_URL, )
ofile.writelines(lines)
self.assertTrue(self.run_function('pkgutil.forget', [TEST_PKG_NAME]))
import contracts contracts.disable_all()
from __future__ import absolute_import import os
epoch_num = 15 termination_criterion = EpochCounter(epoch_num)
yield
OAUTH2_PROVIDER_APPLICATION_MODEL = 'oauth2_provider.Application'
log = logging.getLogger(__name__)
with self.assertRaises(ItemNotFoundError): modulestore().get_item(course.location.for_branch(BRANCH_NAME_PUBLISHED))
self._verify_exam_data(sequence, expected_active)
self.assertNotIn(self.seq_loc, chapter.children)
return course.cert_html_view_enabled if course else False
available_version = salt.utils.alias_function(latest_version, 'available_version')
self.assertEqual( course_complete.badge_description(self.course, 'honor'), 'Completed the course "Badged" (honor, 2015-05-19 - 2015-05-20)' )
__virtualname__ = 'django'
n_samples = X.shape[0]
resp = self.client.get('/copyright') self.assertEqual(resp.status_code, 404)
self.definition_loaded = False self.from_storable(kwargs)
time.sleep(2 + randint(1, 10)) rlogger = logging.getLogger() for handler in rlogger.handlers: rlogger.removeHandler(handler) logging.basicConfig()
self.create_thread_helper(mock_request, extra_response_data={'context': ThreadContext.STANDALONE})
from __future__ import unicode_literals
num_braces = 0
plt.matshow(cm) plt.title('Confusion matrix of the %s classifier' % name) plt.colorbar()
ret = salt.utils.cloud.bootstrap(vm_, __opts__) ret.update(data.__dict__)
ax_response.toMessage(response.fields)
import salt.returners
from salttesting import skipIf, TestCase from salttesting.mock import ( mock_open, NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
root_courselike_dir = self.root_dir + '/' + self.target_dir self.process_extra(root, courselike, root_courselike_dir, xml_centric_courselike_key, export_fs)
self.sock.bind(('localhost', port)) self.sock.listen(5) netutil.add_accept_handler( self.sock, self.handle_connection, io_loop=self.io_loop, )
stub = get_request_or_stub() expected_url = "http://{site_name}/foobar".format(site_name=settings.SITE_NAME) self.assertEqual(stub.build_absolute_uri("foobar"), expected_url)
if len(self._flat_data_specs[1]) == 0: X = () self.run_prereqs(X, d) a(*X)
URLCONF_MODULES = ['myapp.url']
__virtualname__ = 'docker'
if perm != 'global': return ACCESS_DENIED return ( ACCESS_GRANTED if GlobalStaff().has_user(user) or SupportStaffRole().has_user(user) else ACCESS_DENIED )
self._start_time = time.time()
section_titles = [t for t in section_titles if t]
response_dict = self._get_page_data(response) self.assertEqual(response_dict['message_key'], expected_message)
from salt.states import aws_sqs
return MilestoneError() if any_unfulfilled_milestones(course_id, user.id) else ACCESS_GRANTED
super(TestRequireStudentIdentifier, self).setUp() self.student = UserFactory.create()
return ':'.join((image, tag))
page.wait_for_component_menu() click_css(page, 'button>span.large-html-icon', menu_index, require_notification=False)
covars = np.asarray(covars) _validate_covars(covars, self.covariance_type, self.n_components) self.covars_ = covars
return 1
return ('%(classname)s(dim=%(dim)s, dtype=%(dtype)s)' % dict(classname=self.__class__.__name__, dim=self.dim, dtype=self.dtype))
if self._is_in_bulk_operation(course_key, ignore_case): return self._get_bulk_ops_record(course_key, ignore_case).index else: return self.db_connection.get_course_index(course_key, ignore_case)
for byte_range_string in byte_ranges_string.split(','): byte_range_string = byte_range_string.strip()
y_true, _, probas_pred = make_prediction(binary=False)
os.remove(os.path.join(data_file))
mock_get_scores.assert_called_with( self.course.id.to_deprecated_string(), anonymous_id_for_user(self.student_user, self.course.id) )
for k, v in six.iteritems(self.parent.global_data): if k not in self._data: self._data[k] = copy.deepcopy(v)
raise NotImplementedError( "get_html() must be provided by specific modules - not present in {0}" .format(self.__class__))
return {'default_impl': True}
from salt.modules import cassandra
serialized = configparser.serialize(data).strip() assert serialized == "[foo]\nbar = baz", serialized
cat = [False, False, False] _check_one_hot(X, X2, cat, 3)
if isinstance(opts['file_ignore_glob'], str): opts['file_ignore_glob'] = [opts['file_ignore_glob']]
TASK_LOG.error(u"Task (%s) has no InstructorTask object for id %s", task_id, entry_id)
queue = [course] while len(queue) > 0: node = queue.pop() queue.extend(node.get_children()) return True
from urllib2 import urlopen from urllib2 import HTTPError
for n_neighbors in [3, 5, 7]: I_computed = _compute_mi(x, y, False, False, n_neighbors) assert_almost_equal(I_computed, I_theory, 1)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.assertFalse(CourseEnrollment.is_enrolled(self.user, non_existent_course_key))
definition, children = cls.load_definition(definition_xml, runtime, def_id, id_generator)
data_test, targets_test = data[n_samples / 2:], digits.target[n_samples / 2:] #data_test = scaler.transform(data_test)
data = fetch_species_distributions()
good_states = ['AZ', 'FR'] blocked_states = ['US', 'AQ'] currently_blocked = EmbargoedState.current().embargoed_countries_list
'returner_dirs': list,
n_features = 501 n_relevant_features = 3 noise_level = .2 coef_min = .2 n_samples = 25 block_size = n_relevant_features
GENERATE_PROFILE_SCORES = False
self.download_collection = win32com.client.Dispatch('Microsoft.Update.UpdateColl')
from salttesting import TestCase, skipIf from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON )
return create_xblock_info( course_module, include_child_info=True, course_outline=True, include_children_predicate=lambda xblock: not xblock.category == 'vertical', user=request.user )
from __future__ import absolute_import import os
try: from keystoneclient.apiclient.exceptions import \ Unauthorized as kstone_Unauthorized from glanceclient.exc import \ HTTPUnauthorized as glance_Unauthorized HAS_DEPENDENCIES = True except ImportError: HAS_DEPENDENCIES = False
FIELD_OVERRIDE_PROVIDERS = tuple(ENV_TOKENS.get('FIELD_OVERRIDE_PROVIDERS', []))
__virtualname__ = 'pkg'
if form_value: user.follow(cc_content) else: user.unfollow(cc_content)
module.system.DEBUG = True
module = CapaFactory.create(rerandomize=rerandomize, attempts=0, done=True)
log = None if __name__ == '__main__':
partitioned_fields = self.partition_fields_by_scope(block_type, fields)
try:
from __future__ import absolute_import import copy import os import collections import logging import tornado.gen
del intfs['w']
for student in students[5:6]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.deleted, mode='honor' )
return '/etc/sysconfig/scripts/SuSEfirewall2-custom'
def edge(request): return redirect('/')
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
expected_url = course_image_url(course) self.assertEqual( course_overview_after.image_urls, { 'raw': expected_url, 'small': expected_url, 'large': expected_url } )
asset = self.get_sample_asset(name, asset_type) response = self.client.post(self.url, {"name": name, "file": asset}) return response
from salt.modules import pkgutil from salt.exceptions import CommandExecutionError, MinionError
from __future__ import unicode_literals
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
if not settings.FEATURES.get('ENABLE_EXPORT_GIT'): filtered_list.append('giturl')
if predicate: self.assertTrue(expression) else: self.assertFalse(expression)
layer_to_updated = OrderedDict()
d = TreeEstimator(random_state=0, max_depth=max_depth).fit(X, y) s = TreeEstimator(random_state=0, max_depth=max_depth).fit(X_sparse, y)
AccessTestData(expected_access=True), AccessTestData(xblock_access={1: None}, expected_access=True), AccessTestData(xblock_access={1: []}, expected_access=True),
self.q(css='input.save').click() self.wait_for_ajax()
clf_base_regressor = CalibratedClassifierCV(Ridge()) clf_base_regressor.fit(X_train, y_train) clf_base_regressor.predict(X_test)
def __contains__(self, item): return True def __getitem__(self, item): return "notmigrations"
response = self.post_credit_request(None, 'a/b/c') self.assert_error_response(response, 'A username must be specified.')
'METADATA_URL': 'https://www.googleapis.com/youtube/v3/videos/',
answer_objs = SurveyAnswer.objects.filter( user=self.student, form=self.survey )
result = _get_xblock_parent(self.vert1) self.assertEqual(result.location, self.seq1.location)
with dog_stats_api.timer('instructor_tasks.time.overall', tags=[u'action:{name}'.format(name=action_name)]): task_progress = task_fcn(entry_id, course_id, task_input, action_name)
if not hasattr(self, 'num_channels'): self.num_channels = self.nchannels
csv_file, courses_info = self.generate_registration_codes_csv(orderitems, site_name)
import sass
return set(MicrositeOrganizationMapping.objects.all().values_list('organization', flat=True))
result = next(k for k in parse_result if isinstance(k, numbers.Number)) return result
changed_modules = StudentModule.objects.filter(module_state_key__in=self.ee_modules) self.assertEqual(changed_modules.count(), 0)
self.parseAction += map(self._normalizeParseActionArgs, list(fns)) self.callDuringTry = self.callDuringTry or ("callDuringTry" in kwargs and kwargs["callDuringTry"]) return self
self.course_outline.open_subsection_settings_dialog()
self.assert_error(params, "honor_code", expected_error)
tstart = datetime.now() clf = DecisionTreeRegressor() clf.fit(X, Y).predict(X) delta = (datetime.now() - tstart)
classifier = OneVsRestClassifier(svm.SVC(kernel='linear', probability=True, random_state=random_state)) y_score = classifier.fit(X_train, y_train).decision_function(X_test)
return key
train, valid, test, transfer = utlc.load_sparse_dataset("ule", normalize=True, transfer=True) assert train.shape[0] == transfer.shape[0]
if not eventtime: eventtime = str(int(time.time()))
import salt.utils
fig, axs = plot_partial_dependence(clf, boston.data, ['CRIM', 'ZN', ('CRIM', 'ZN')], grid_resolution=grid_resolution, feature_names=boston.feature_names)
FEATURES['DISABLE_START_DATES'] = True
choices = [(short, full) for (short, full) in raw_choices] + [('no_data', 'No Data')]
ret['comment'] = 'Tablespace {0} is not present, so it cannot ' \ 'be removed'.format(name) return ret
raise NotImplementedError()
X = np.linspace(0.1, 9.9, 20) X = np.atleast_2d(X).T
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
self.assertFalse(ApiAccessRequest.objects.all().exists()) response = self.client.post(self.url, VALID_DATA) self._assert_post_success(response)
assets, __ = store.get_all_content_for_course(course_loc) for asset in assets: print "Deleting {0}...".format(asset) store.delete(asset['_id'])
if close_bracket and not hang_closing: yield (start, "E123 closing bracket does not match " "indentation of opening bracket's line") hangs[depth] = hang
object_list = get_mors_with_properties(service_instance, object_type, property_list=[property_name], container_ref=container_ref)
clf = svm.SVC(kernel='rbf', gamma=1, decision_function_shape='ovo') clf.fit(X, Y)
STATIC_GRAB = False DEV_CONTENT = True
text_document = self._white_spaces.sub(" ", text_document)
log = logging.getLogger(__name__)
module = CapaFactory.create(attempts=1)
self.expect_error_on_file_content( '', "The file must end with the extension '.csv'.", file_suffix='.notcsv' )
unrestricted_course = CourseFactory.create() with self.assertNumQueries(1): embargo_api.check_course_access(unrestricted_course.id, user=self.user, ip_address='0.0.0.0')
train, valid, test, transfer = utlc.load_ndarray_dataset("ule", normalize=True, transfer=True) assert train.shape[0] == transfer.shape[0]
if isinstance(obj, Promise): return force_text(obj) super(LocalizedJSONEncoder, self).default(obj)
assert_array_equal(mb_k_means.predict(X), mb_k_means.labels_)
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
search_string = 'UpdateID=\'{0}\''.format(name)
assert_equal(3, LeavePLabelOut(n_labels=2).get_n_splits(X, y, labels)) assert_equal(3, LeaveOneLabelOut().get_n_splits(X, y, labels))
span_element = rendered_html.find('span') self.assertEqual(span_element.get('attr'), "TEST")
port = 4505 master_ip = None
if len(returned_minions) < 1: return {} end_loop = True
is_stopped = False for proc in all_processes: if proc.startswith(name) \ and _is_stopped_state(all_processes[proc]['state']): is_stopped = True break
AutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=staff).visit()
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
self.team_size = CourseTeamMembership.objects.filter(team=self).count() self.save()
return self.client.post(url, post_args)
g.precisions_init = precisions_not_positive[covar_type] assert_raise_message(ValueError, "'%s precision' should be %s" % (covar_type, not_positive_errors[covar_type]), g.fit, X)
clf = PassiveAggressiveClassifier(class_weight="balanced") assert_raises(ValueError, clf.partial_fit, X, y, classes=np.unique(y))
lsfh = LSHForest(min_hash_match=0, n_candidates=n_points).fit(X)
mappings = inspect_container(name).get('NetworkSettings', {}).get( 'Ports', {}) if not mappings: return {}
data_home = get_data_home(data_home=DATA_HOME) assert_true(os.path.exists(data_home))
__virtualname__ = 'sqlite3'
self.unit_page.xblocks[1].save_settings()
with super(TestNavigation, cls).setUpClassAndTestData(): cls.test_course = CourseFactory.create() cls.test_course_proctored = CourseFactory.create() cls.course = CourseFactory.create()
return 4.0 / (max_squared_sum + int(fit_intercept) + 4.0 * alpha_scaled)
if options: ret['comment'] += ' ' + _build_option_string(options) return ret
OverrideFieldData.provider_classes = None OverrideModulestoreFieldData.provider_classes = None
course = xml.CourseFactory.build() sequence = xml.SequenceFactory.build(parent=course) split_test = SplitTestModuleFactory( parent=sequence, attribs={ 'user_partition_id': '0',
data['Image'] = '{0}:{1}'.format(repo_name, repo_tag) data['Id'] = status
self.assertIn("Password Reset Email Sent", self.login_page.wait_for_success())
error = unicode(self) return HttpResponseBadRequest(json.dumps({'error': error}))
radio_button = self.q(css=self._bounded_selector(self.select_content_group_button_css)).results[0] radio_button.click() return radio_button.is_selected()
enrollment = _get_fake_enrollment(student_id, course_id) if enrollment and mode is not None: enrollment['mode'] = mode if enrollment and is_active is not None: enrollment['is_active'] = is_active return enrollment
X = iris.data batch_size = X.shape[0] // 3 ipca = IncrementalPCA(n_components=2, batch_size=batch_size) pca = PCA(n_components=2) pca.fit_transform(X)
AWS_QUERYSTRING_AUTH = AUTH_TOKENS.get('AWS_QUERYSTRING_AUTH', True) AWS_S3_CUSTOM_DOMAIN = AUTH_TOKENS.get('AWS_S3_CUSTOM_DOMAIN', 'edxuploads.s3.amazonaws.com')
pass
EXAMPLE_FULL_NAME = u'John Doë'
json = salt.utils.import_json() couchbase.set_json_converters(json.dumps, json.loads)
print(client_error)
exif_dict = piexif.load(exif) exif_dict['0th'][piexif.ImageIFD.Orientation] = orientation return piexif.dump(exif_dict)
self.strategy.session_setdefault('auth_entry', 'login')
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
assert_raises(ValueError, compute_sample_weight, [{1: 2, 2: 1}], y_)
self.has_conf = False self.val = self.run_function('sysctl.get', [ASSIGN_CMD])
from __future__ import absolute_import import json import logging import os import tempfile
req = django_to_webob_request(request) try: resp = instance.handle(handler, req, suffix)
shutil.rmtree(cachedir, ignore_errors=True)
dict(safe_zip(range(2), (0.8, 1.3))))
try: if not fnmatch.fnmatch(repo.url, remote): continue except TypeError: if not fnmatch.fnmatch(repo.url, six.text_type(remote)): continue
destroy(vm_['name'])
return column_or_1d(y, warn=True)
import salt.utils from salt import utils, exceptions
__virtualname__ = 'couchbase'
inner_img = img[:, ring_w:img.shape[1] - ring_w, ring_w:img.shape[2] - ring_w]
self.get_selector('#add-exception').click()
microsite_template = microsite.get_template(uri) return ( microsite_template if microsite_template else super(DynamicTemplateLookup, self).get_template(uri) )
'range_server': str,
raise CommandError( _( 'Invalid group name: "{group_name}". {messages}' ).format( group_name=group_name, messages=exc.messages[0] ) )
if apply_net_settings: try: __salt__['ip.apply_network_settings'](**kwargs) except AttributeError as error: ret['result'] = False ret['comment'] = str(error) return ret
assert_raises(ValueError, next, StratifiedShuffleSplit(3, 0.2).split(X, y))
if host_ref is None: host_ref = search_index.FindByIp(ip=host, vmSearch=False)
data_stream = stream_reuters_documents()
pass
return msgpack.dumps(msg, use_bin_type=use_bin_type)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
topo_tensors = norb.get_topological_view(single_tensor=False) expected_topo_tensors = tuple(expected_topo_tensor[:, i, ...] for i in range(2))
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
import logging
del expected_event['event']['currentTime']
XBlockDisableConfig.objects.create( disabled_blocks='', enabled=True )
if bulk_write_record.active and course_key.branch in bulk_write_record.dirty_branches: return bulk_write_record.structure_for_branch(course_key.branch)
ret = self.run_run_plus(fun='fileserver.envs', args=['backend="roots"']) self.assertIsInstance(ret['fun'], list)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
log = logger.getLogger(__name__)
from third_party_auth.tasks import SAML_XML_NS XMLDSIG_XML_NS = 'http://www.w3.org/2000/09/xmldsig#'
anonymous_client = APIClient() request_method = getattr(anonymous_client, method) response = request_method(self.url) self.check_response(response, 401) self.assert_no_events_were_emitted()
if "face_image" not in params: msg = _("Missing required parameter face_image") return None, HttpResponseBadRequest(msg)
if power: vb_start_vm(vm_name, timeout=boot_timeout) ips = vb_wait_for_network_address(wait_for_ip_timeout, machine_name=vm_name)
s = cPickle.dumps(obj, get_pickle_protocol()) return cPickle.loads(s)
return self.q(css='.create-user-button').present
return isinstance(op, _ElemwiseNoGradient)
if other_names is None: other_names = []
from salttesting import TestCase, skipIf from salttesting.mock import ( create_autospec, MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
config = settings.PROFILE_IMAGE_BACKEND storage_class = get_storage_class(config['class']) return storage_class(**config['options'])
_ = lambda text: text
with self.assertRaises(InvalidVersionError): self.store.convert_to_draft(self.chapter_loc, self.user.id)
raise Exception(msg), None, sys.exc_info()[2]
import logging import re import socket
self.steps = tosequence(steps) transforms = estimators[:-1] estimator = estimators[-1]
import integration from salt.config import cloud_providers_config
to_string(monitor)
return SoftwareSecurePhotoVerification.user_status(self.user)[0]
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
if 'custom_checking' in self.text_customization: return self.text_customization.get('custom_checking')
if self.cancelled: raise CancelledError("Semaphore cancelled")
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.login(email, password) self.enroll(self.course, verify=True)
if name in list_tasks(location): return True else: return False
iris = load_iris() scaler = StandardScaler() km = KMeans(random_state=0)
has_saltcloud = False
futures = [] for x in range(0, 3): future = tornado.concurrent.Future() future.add_done_callback(self.stop) futures.append(future)
if user is None: user = self.user return Mock( user_id=user.id, commentable_id=self.DISCUSSION_TOPIC_ID, context=context, **{'thread.user_id': self.user.id} )
script = "calculated_ans = 'x+x'"
self._validate_params(self.n_features, self.input_type) return self
return self.make_call( reverse('teams_detail', args=[team_id]), expected_status, 'patch', json.dumps(data) if data else None, 'application/merge-patch+json', **kwargs )
score = self._init_decision_function(X) predict_stages(self.estimators_, X, self.learning_rate, score) return score
def __init__(self): super(NullSpace, self).__init__()
self.assertEqual(len(response['results']), expected_length) unused_class = self.create_badge_class(check_course, slug='unused_slug', issuing_component='unused_component')
strides = a.strides total_buffer_len = (a_end - a_start) // a.itemsize
if force_must_retry: attempt.status = 'must_retry'
url = certs_api.get_certificate_url(self.student.id, self.course.id) self.assertEqual(url, "")
if key_betas is not None: betas = numpy.hstack((betas, key_betas)) betas.sort()
pass
self.assertIsNone( certs_api.get_certificate_for_user(self.student_no_cert.username, self.course_1.id) )
import integration from salt.config import cloud_providers_config from salt.ext.six.moves import range
redirect_url = answers['_redirect_url'] if '_redirect_url' in answers else reverse('dashboard')
self._send_handler_response("GET")
save_course_update_items(location, course_updates, course_update_items, user) return _get_visible_update(course_update_items)
pass
from __future__ import absolute_import
self.client.logout() resp = self.client.get(self.url_unlocked) self.assertEqual(resp.status_code, 200)
y = [["ham", "spam"][i] for i in LabelEncoder().fit_transform(Y)] clf.fit(X[:, :-1], y)
atexit.register(self.release_readlock, lockdirName=lockdirName)
binary = salt.utils.which('at') if not binary: return '\'at.at\' is not available.'
pr_url = os.environ.get('CI_PULL_REQUEST') if not pr_url: exit("not a pull request")
with self.assertRaises(NotImplementedError): send_refund_notification(self.course_enrollment, [1, 2, 3])
aid = self.answer_ids[-1] new_cmap.set_hint_and_mode(aid, hint_text, hintmode)
means = np.array([[0, 0, -1], [0, 2, 0], [0, -2, 0], [0, 0, 5]])
content.pop('group_id', None)
rval = X.copy()
import salt.ext.six as six
return self.q(css=self.VIEW_MODE_OPTIONS_CSS).filter(lambda el: el.is_selected()).first.text[0]
log = logging.getLogger(__name__)
self.assertIn('donation_for_course', self.client.session) self.assertIn(unicode(self.course.id), self.client.session['donation_for_course'])
response = self.client.get(self.path) self.assertEqual(response.status_code, 403)
EXPORTED_ASSET_DIR = 'assets'
ret = self.run_function( 'state.sls', mods='testappend.issue-2227' ) self.assertSaltTrueReturn(ret)
assert_equal(neighbors.shape[1], n_neighbors)
url(r'^api/user/', include('openedx.core.djangoapps.user_api.urls')),
return {'xml': True}
'lms.djangoapps.teams',
if not hasattr(self.user, '_roles'): self.user._roles = RoleCache(self.user)
'file_buffer_size': int,
for k in self.file_mapping: if mod_name not in k: yield k
from __future__ import absolute_import try: import pwd except ImportError: pass
element = etree.fromstring(xml_str) state = {'value': 'x^2+1/2'} self.the_input = lookup_tag('formulaequationinput')(test_capa_system(), element, state)
return self.mlp.get_weights()
log.info('Runner completed: {0}'.format(data['jid'])) del event del namespaced_event return data['return']
try: json.loads(self.configuration) except ValueError: raise ValidationError('Must be valid JSON string.')
assert_equal(X_pred.shape[0], n_samples)
newXBlock = self.store.publish(xblock.location, self.user_id) self.assertFalse(self.store.has_changes(newXBlock))
log = logging.getLogger(__name__)
response = requests.delete(reset_config_url) self.assertEqual(response.status_code, 200)
django_settings.SOCIAL_AUTH_STRATEGY = 'third_party_auth.strategy.ConfigurationModelStrategy'
blocks = get_course_blocks(user, usage_key, transformers)
return { 'id': user.id, 'username': user.username, 'email': user.email, 'role': role }
return self.make_call( reverse('team_membership_detail', args=[team_id, username]), expected_status, 'get', data, **kwargs )
structure['blocks'][block_key] = content
option2 = main2
from salttesting.helpers import destructiveTest, ensure_in_syspath
si = _get_si()
if cc_thread['closed']: raise PermissionDenied
context["autoSubmitRegForm"] = True
'tcp_master_pub_port': int,
self.assert_redirect_to_provider_looks_correct(self.client.get( pipeline.get_login_url(self.provider.provider_id, pipeline.AUTH_ENTRY_LOGIN)))
if 'packages' not in excludes: data['packages'] = __salt__['pkg.list_pkgs']()
STATIC_ROOT = (TEST_ROOT / "staticfiles" / "cms").abspath()
__salt__['saltutil.refresh_modules']()
self.validation_scores_.append(self.score(X_val, y_val))
self.navigate_to_course_unit() self.edit_component() self.open_advanced_tab() self.video.upload_handout(handout_filename) if save_settings: self.save_unit_settings()
expected_msg = 'Error: test error' self.assertEqual(expected_msg, result['success'])
linter = JavaScriptLinter() results = FileResults('') linter.check_javascript_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
RETAIN_TO_DEPTH = { 'first_of_year': 1, 'first_of_month': 2, 'first_of_day': 3, 'first_of_hour': 4, 'most_recent': 5, }
return self.q(css=self.xblock_component_selector).attrs('data-block-type')[index]
available_version = latest_version
return self.find_css("#start_date").present
y_true, y_pred, _ = make_prediction(binary=False)
print "Failed with load_factor of {}".format(load_factor)
'pillar_version': int,
_subscriptions = [ {'protocol': s['Protocol'], 'endpoint': s['Endpoint']} for s in _subscriptions ]
self.q(css=self._bounded_selector(".check-discussion-subcategory-%s" % key)).first.click()
return process_request_response
return self.alpha_
import codecs from fractions import Fraction import unittest
self.store.publish(item_location, self.user_id) item = self.store.get_item(item_location) self.assertTrue(self.store.has_published_version(item)) _check_asides(item)
return ItemFactory.create( category='library_content', parent_location=course.location, user_id=self.user.id, publish_item=False, source_library_id=unicode(library_key), **(other_settings or {}) )
reg = 1E-3 * evals.sum(1)
if self.is_time_limited: view_html = self._time_limited_student_view(context)
sh('find {dir} -type f -delete'.format(dir=directory))
reset = key_node.tag == u'!reset'
return etree.Element("choiceresponse")
import salt.utils.event
random_state = check_random_state(0)
items = self.store.get_items(self.course.id) self.assertEqual(len(items), 0)
filemod.replace(self.tfile.name, r'Etiam', 'Salticus', flags=['MULTILINE', 'ignorecase'])
verbose_name_plural = "Microsite histories"
import logging
s6.__salt__ = {} s6.SERVICE_DIR = '/etc/service'
return True
variation = close - open
print("Compute structured hierarchical clustering...") st = time.time()
parent_ids.sort(key=lambda parent: (parent.type, parent.id)) return BlockUsageLocator.make_relative( locator, block_type=parent_ids[0].type, block_id=parent_ids[0].id, )
if GlobalStaff().has_user(caller): return
self.application = application self.events_to_fire = 0 return application
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'joyent'
set_runtime_service('instructor', InstructorService())
msg = 'Unable to load file contents at path %s for item %s: %s ' % ( filepath, def_id, err) raise Exception, msg, sys.exc_info()[2]
self.verify_content_existence(self.store, root_dir, course_id, 'tabs', 'static_tab', '.html')
os.kill(pid, signum)
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
REQUIRE_JS = "js/vendor/requiresjs/require.js"
if not hasattr(draft_node.module, 'xml_attributes'): draft_node.module.xml_attributes = {}
self.course = modulestore().get_course(self.course.id)
FEATURES['AUTOMATIC_AUTH_FOR_TESTING'] = True
url = reverse('verify_student_verify_now', kwargs={'course_id': unicode(course_id)}) self.assertRedirects(response, url, status_code)
if need_space is not True and not need_space[1]: yield (need_space[0], "E225 missing whitespace around operator") need_space = False
self.opts = opts self.grains = grains self.minion_id = minion_id self.ext = ext self.functions = functions self.pillar = pillar self.pillarenv = pillarenv
self.payment_and_verification_flow.webcam_capture() self.payment_and_verification_flow.next_verification_step(self.immediate_verification_page)
self._send_handler_response("DELETE")
digits = datasets.load_digits()
diff = self._diff_list_dicts(api_keys, items_dt, 'id')
self.X_min_, self.X_max_ = np.min(X), np.max(X)
from __future__ import absolute_import, division, print_function import contextlib import copy import collections import datetime
pass
student_module.save(force_update=True)
lshf = LSHForest(min_hash_match=31) ignore_warnings(lshf.fit)(X_train)
cmd = '{0} '.format(path) cmd += '| Select-Object -Property FullName, Extension, Exists, ' \ '@{Name="LastWriteTime";Expression={Get-Date ($_.LastWriteTime) -Format g}}'
incxml = etree.XML(ifp.read())
restricted_course, __ = RestrictedCourse.objects.get_or_create(course_key=course_key) restricted_course.enroll_msg_key = 'default' restricted_course.access_msg_key = 'default' restricted_course.disable_access_check = disable_access_check restricted_course.save()
module.save_problem(get_request_dict)
subject = render_to_string('emails/activation_email_subject.txt', context) subject = ''.join(subject.splitlines()) message = render_to_string('emails/activation_email.txt', context)
__grains__ = {}
if existing['code'] == 200:
est = Ridge(alpha=alpha, fit_intercept=intercept, solver=solver) est.fit(X, y, sample_weight=sample_weight) coefs = est.coef_ inter = est.intercept_
block_structure.request_xblock_fields('hide_from_toc')
if drop_first: n_components = n_components + 1
self._verify_unit_warning( self.UnitState(is_released=False, publish_state=self.PublishState.NEVER_PUBLISHED, is_locked=True), self.STAFF_ONLY_WARNING )
self.request.user = AnonymousUser() context = user_has_cart_context_processor(self.request) self.assertFalse(context['should_display_shopping_cart_func']())
node = mock.Mock(due=1, extended_due=None) self.assertEqual(self.call_fut(node), 1)
from salt.ext.six import string_types
resp = self.create_xblock(category='problem', boilerplate='nosuchboilerplate.yaml') self.assertEqual(resp.status_code, 200)
fetch = get
if os.path.isdir(SCIKIT_LEARN_DATA): shutil.rmtree(SCIKIT_LEARN_DATA) if os.path.isdir(SCIKIT_LEARN_EMPTY_DATA): shutil.rmtree(SCIKIT_LEARN_EMPTY_DATA)
for category in update.Categories: if category.Name in results['Categories']: results['Categories'][category.Name] += 1 else: results['Categories'][category.Name] = 1
return self.q(css=ERROR_ITEM_CONTENT_SELECTOR).text
email_params = get_email_params(self.course, True) email_params["email_address"] = "user@example.com" email_params["full_name"] = "Jean Reno" return email_params
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
dset = fetch_mldata(dataname, transpose_data=False, data_home=tmpdir) assert_equal(dset.data.shape, (3, 2))
module.system.DEBUG = False
MAX_SCREEN_LIST_LENGTH = 250
TEST_DIR = path(__file__).dirname() PLATFORM_ROOT = TEST_DIR.parent.parent.parent.parent.parent.parent TEST_DATA_ROOT = PLATFORM_ROOT / TEST_DATA_DIR COURSE_DATA_DIR = TEST_DATA_ROOT / COURSE_NAME
tmp = __salt__['config.option'](attributes_from_pillar, {}) if attributes: attributes = dictupdate.update(tmp, attributes) else: attributes = tmp
return {'cond_module': cond_descriptor, 'source_module': source_descriptor, 'child_module': child_descriptor}
import integration import salt.utils from salttesting.helpers import ( destructiveTest )
_logger.info('loading file %s' % datasets['test_batch']) data = serial.load(datasets['test_batch'])
MIGRATION_MODULES = NoOpMigrationModules()
if name in list_folders(location): return True else: return False
from salt.modules import virtualenv_mod from salt.exceptions import CommandExecutionError
microsite.clear() return response
tgt_func = { 'range': target_range, 'glob': target_range, }
X = X_2d n = X.shape[0]
return descriptor.id
d = dr + 1.0j * di
ss = cval.ShuffleSplit(10, random_state=21) assert_array_equal(list(a for a, b in ss), list(a for a, b in ss))
from __future__ import absolute_import import re import logging
reg = LinearRegression(fit_intercept=intercept) reg.fit(X, y, sample_weight=sample_weight) coefs1 = reg.coef_ inter1 = reg.intercept_
import salt.config import salt.loader from salt.modules import boto_apigateway
return True
embargo_redirect = embargo_api.redirect_if_blocked( course.id, user=request.user, ip_address=get_ip(request), url=request.path ) if embargo_redirect is not None: return redirect(embargo_redirect)
fn = getattr(model, '%s_data_specs' % self.method)
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
providers = salt.loader.log_handlers(opts)
return
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
pred = mb_k_means.predict(mb_k_means.cluster_centers_) assert_array_equal(pred, np.arange(n_clusters))
if refresh: refresh_db()
self.submit_question_answer('p1', {'2_1': u'Correct'})
from __future__ import unicode_literals
'example_certificate': True,
change_info = self.run_function('group.info', [CHANGE_GROUP]) if change_info: self.run_function('group.delete', [CHANGE_GROUP])
return False
{% set port = 6379 %}
mock_course_module = MagicMock(id=self.course.id, position=None) mock_course_module.get_display_items.return_value = [MagicMock()] self.assertIsNone(helpers.get_course_position(mock_course_module))
CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] ).install()
import salt.ext.six as six
if not patterns: return default return any(fnmatch(filename, pattern) for pattern in patterns)
with self.assertNumQueries(0): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
new_client.__singleton_init__(io_loop=io_loop, socket_path=socket_path) loop_instance_map[key] = new_client
clf = MyEstimator(empty=np.nan) clf2 = clone(clf)
self.annealed = sharedX(base_lr, 'annealed')
setattr(self._modulestore, name, value)
TASK_LOG.info(u'%s, Task type: %s, Finalizing grade task', task_info_string, action_name) return task_progress.update_task_state(extra_meta=current_step)
world.scenario_dict['CHAPTER'] = world.ItemFactory.create( parent_location=world.scenario_dict['COURSE'].location, category='chapter', display_name='Test Chapter',
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'rackspace' DRIVER_NAME = 'openstack'
response = self.client.get(activation_link) self.assertEqual(response.status_code, 200)
staff = self.make_staff() self.assertTrue(CourseStaffRole(self.course.id).has_user(staff))
remove_user_from_cohort(cohorts[cohort_index], self.user.username)
return self.estimators_[index]
self._check_parameters(X)
import salt.utils from salt.modules import file as filemod from salt.modules import config as configmod from salt.modules import cmdmod from salt.exceptions import CommandExecutionError
with patch('capa.capa_problem.LoncapaProblem.grade_answers') as mock_grade: mock_grade.side_effect = exception_class('test error')
if not has_course_author_access(user, course_key): raise PermissionDenied() return CoursewareSearchIndexer.do_course_reindex(modulestore(), course_key)
for embedded in (x for x in data if isinstance(x, dict)): try: data = embedded[each] embed_match = True break except KeyError: pass if not embed_match: return default
component = self.store.publish(component.location, self.user_id) self.assertFalse(self.store.has_changes(component))
search = re.search(linere, line) if not search: continue
_ZFILE_PREFIX = asbytes('ZF') _MAX_LEN = len(hex_str(2 ** 64))
return CourseFactory.create( org=course_location.org, number=course_location.course, run=course_location.run )
FEATURES['AUTOMATIC_VERIFY_STUDENT_IDENTITY_FOR_TESTING'] = True
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON)
import salt.loader import salt.utils import salt.client.ssh
self.descriptor.display_name = '\x1e' with self.assertRaises(ValueError): self.descriptor.definition_to_xml(None)
self.assertEqual( first_request["parameters"]["request_uuid"], second_request["parameters"]["request_uuid"] )
return
import integration import salt.utils
return True
return [ self._cohort_name(opt.text) for opt in self._get_cohort_options().filter(lambda el: el.get_attribute('value') != "") ]
return sum(self.maxpoints.values())
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
params = self._signed_callback_params(self.order.id, self.COST, "abcd") result = process_postpay_callback(params)
relevant_frames = 0 for frame_record in inspect.stack(): frame = frame_record[0] if '__unittest' in frame.f_globals: break relevant_frames += 1
if os.path.isdir(tmp_dir): shutil.rmtree(tmp_dir) elif os.path.isfile(tmp_dir): os.remove(tmp_dir)
self.distribution.salt_syspaths_hardcoded_path = os.path.join( self.build_lib, 'salt', '_syspaths.py' ) self.run_command('generate_salt_syspaths')
CELERYD_PREFETCH_MULTIPLIER = 1
try: delattr(_MovedItems, name) except AttributeError: try: del moves.__dict__[name] except KeyError: raise AttributeError("no such move, %r" % (name,))
response_content = {'test_response': 'test_content'} self.server.config['This is only a test.'] = response_content
return self
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
self.assertFalse(form.is_valid())
import contextlib import errno import logging import os import shutil import subprocess import time
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( patch, MagicMock, NO_MOCK, NO_MOCK_REASON )
input_dict = {'1_2_1': '42'} correct_map = problem.grade_answers(input_dict)
match.__grains__ = {} match.__salt__ = {} match.__opts__ = {} match.__pillar__ = {}
host[host.index(o_hostname.split('.')[0])] = hostname.split('.')[0]
privacy_policy = branding_api.get_privacy_url() if privacy_policy != branding_api.EMPTY_URL: data.update({'company_privacy_url': privacy_policy})
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
import logging import subprocess
import yaml import pprint import logging import urllib
for i, n_outliers in enumerate(range_n_outliers): for j in range(repeat):
tmp = X - X.max(axis=1)[:, np.newaxis] np.exp(tmp, out=X) X /= X.sum(axis=1)[:, np.newaxis] return X
'django_comment_client', 'django_comment_common', 'discussion_api', 'notes',
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
import logging
GITHUB_REPO_ROOT = ENV_ROOT / "data"
attempt_3.mark_ready() assert_equals(attempt_3, SoftwareSecurePhotoVerification.active_for_user(user))
cur.executemany(cmd, newitems)
import salt.ext.six as six
raise NotImplementedError("Applications must monkey-patch this function before using local_resource_url for studio_view")
self.assertIn(self.SUCCESSFUL_RESPONSE, response.content) self.assertEqual(response.status_code, 200)
mock_refund_seat.reset_mock() self.course_enrollment.refundable = mock.Mock(return_value=False) self.send_signal() self.assertFalse(mock_refund_seat.called)
num_certs = 0 for cert in refunded_certs: num_certs += 1 self.assertEqual(num_certs, 2)
api.set_credit_requirement_status("bob", self.course_key, "grade", "grade")
from __future__ import absolute_import import os import struct
assert_raises(ValueError, cls().partial_fit, X2, y2)
return False
post_params = {key: json.dumps(val)} response = requests.put(self.url, data=post_params) self.assertEqual(response.status_code, 200)
beta = np.array(self.beta0)
return URLPath.create_article(parent, slug, title=slug)
from __future__ import absolute_import import logging
self.assertTrue(self._search_for_content(self.EDITED_SEARCH_STRING))
resp_data = json.loads(response.content) user_message_url = get_absolute_url(user_message_path) self.assertEqual(resp_data['user_message_url'], user_message_url)
simple_auth_pages = ( '/home/', )
elif trigger_types[trigger_type] == TASK_TRIGGER_REGISTRATION: trigger.Id = 'OnTaskCreation_ID1'
alpha_ = 1. / np.var(y) lambda_ = np.ones(n_features)
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
assert isinstance(sls_data, OrderedDict) assert not isinstance(yml_data, OrderedDict)
return ipsecpolicy
from __future__ import absolute_import
self.assertEquals(self.request.COOKIES[settings.SESSION_COOKIE_NAME], session_id)
n_nonzero_coefs = max(int(0.1 * X.shape[1]), 1)
microsite.set_by_domain(self.microsite.site.domain) self.assertEqual( microsite.get_all_orgs(), set(self.microsite.get_organizations()) )
import copy import logging import os
msg = name + ' is non deterministic on 32bit Python' raise SkipTest(msg)
event = self.handle_callback_and_get_context_info(mock_tracker, problem_display_name) return event['module']
return SurveyAnswer.objects.filter(form=form, user=user).exists()
pass
from salt.exceptions import CommandExecutionError from salt.modules import uptime
neighbors.kneighbors_graph = ignore_warnings(neighbors.kneighbors_graph) neighbors.radius_neighbors_graph = ignore_warnings( neighbors.radius_neighbors_graph)
import salt.output from salt.ext.six import string_types from salt.utils import get_colors import salt.utils.locales
assert_page_correct( page=3, page_size=4, expected_start=8, expected_stop=10, expected_next=None, expected_prev=2 )
if all_options_selected and not has_option: all_options_selected = False return all_options_selected
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
response = self.csrf_client.post( '/oauth2-test/', data={'access_token': self.access_token.token} ) self.assertEqual(response.status_code, status.HTTP_200_OK)
pass
for microsite in settings.MICROSITE_CONFIGURATION.itervalues(): org_filter = microsite.get('course_org_filter') if org_filter: org_filter_set.add(org_filter)
if hasher == 'sha256': h = hashlib.sha256(password) elif hasher == 'md5': h = hashlib.md5(password) else: return NotImplemented
sale_dict = dict((feature, getattr(invoice, feature)) for feature in sale_features)
features = [
gc = AgglomerativeClustering(n_clusters=10) brc2 = Birch(n_clusters=gc) brc2.fit(X) assert_array_equal(brc1.subcluster_labels_, brc2.subcluster_labels_) assert_array_equal(brc1.labels_, brc2.labels_)
return ['platform', 'version', 'expire_at', 'enabled', 'created_at', 'updated_at']
pkg, ver = re.split('[; ]', line, 1)[0].rsplit('-', 1)
email_label = _(u"Email")
X, y = hastie_X, hastie_y ForestEstimator = FOREST_ESTIMATORS[name] clf = ForestEstimator(n_estimators=5, max_depth=3, warm_start=True, random_state=1) clf.fit(X, y)
url( r'^courses/{}/edxnotes'.format( settings.COURSE_ID_PATTERN, ), include('edxnotes.urls'), name='edxnotes_endpoints', ),
self.find_css('p.group-configuration-usage-text a').first.click()
jid_dir_name = jid_file.rpartition('/')[2] self.assertEqual(jid_dir_name, 'jid')
AutoAuthPage( self.browser, username=username, email=email, password=password ).visit()
from __future__ import absolute_import import re import logging
pass
rng = check_random_state(0) n_features = 5 n_samples = 50 n_output = 3
if not clone_type and power: task = new_vm_ref.PowerOn() salt.utils.vmware.wait_for_task(task, vm_name, 'power', 5, 'info')
'file_client': str,
st = os.statvfs(path) total = st.f_blocks * st.f_frsize used = (st.f_blocks - st.f_bfree) * st.f_frsize return total, used
return self._active_count == 1
from salt.modules import cron from salt.ext.six.moves import builtins, StringIO
__virtualname__ = 'virt'
X = check_array(X) n_eval, _ = X.shape n_samples, n_features = self.X.shape n_samples_y, n_targets = self.y.shape
NO_BOTO_MODULE = True BOTO_NOT_CONFIGURED = True try: import boto NO_BOTO_MODULE = False try: boto.connect_iam() BOTO_NOT_CONFIGURED = False except boto.exception.NoAuthHandlerFound: pass except ImportError: pass
self.assert_grade(problem, answer, "correct") self.assert_grade(problem, answer.lower(), "correct")
'splash',
import logging
src_dir = os.path.join(sys.prefix, "src") if os.path.isdir(src_dir): files_to_fingerprint.append(src_dir)
return 1 / numpy.cos(arg)
chunk[key] = name
pass
with super(ForumFormDiscussionUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
from __future__ import absolute_import import time
import salt.utils import salt.utils.fsutils from salt.exceptions import CommandExecutionError
from __future__ import unicode_literals
import salt.utils
check_ortho(pls_ca.x_scores_, "x scores are not orthogonal") check_ortho(pls_ca.y_scores_, "y scores are not orthogonal")
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.status = "must_retry" attempt.system_error("Error!")
xblock.group_access = value self.store.update_item(xblock, self.user.id)
from salt.states import service
from salttesting.parser import PNUM, print_header from salttesting.parser.cover import SaltCoverageTestingParser
invalidate_generated_certificates(course_id, students_to_generate_certs_for, statuses_to_regenerate)
mcd = MinCovDet().fit(X) err_loc_mcd[i, j] = np.sum(mcd.location_ ** 2) err_cov_mcd[i, j] = mcd.error_norm(np.eye(n_features))
key = self.q(css=KEY_CSS).nth(i).text[0] if key == expected_key: return i
module.reset_problem({})
required_boto3_version = '1.2.1'
if "TRACKING_IGNORE_URL_PATTERNS" in ENV_TOKENS: TRACKING_IGNORE_URL_PATTERNS = ENV_TOKENS.get("TRACKING_IGNORE_URL_PATTERNS")
ADD_USER = __random_string() DEL_USER = __random_string() PRIMARY_GROUP_USER = __random_string() CHANGE_USER = __random_string()
self.assertReturnNonEmptySaltType(ret) for state_id, state_result in six.iteritems(ret): self.assertSaltTrueReturn(dict([(state_id, state_result)]))
import signals import exceptions
X = iris.data[:, pair] y = iris.target
if six.text_type(remote) not in repo['url']: continue
html = module.get_problem_html()
linter = MakoTemplateLinter() self.assertEqual(linter._is_valid_directory(data['directory']), data['expected'])
self._check_params(n_samples)
return
self.user.is_staff = True self.user.save()
with disable_overrides(): original_due_date = getattr(unit, 'due', None)
print "running action..." action(eobjs.email)
action_name = ugettext_noop('generated') task_fn = partial(upload_may_enroll_csv, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
module.system.render_template = Mock(return_value="<div>Test Template HTML</div>")
return self.best_estimator_.predict(X)
if 'index' in kwargs: pull_opts.append('--dkr-index-url={0}'.format(kwargs['index']))
django_user_service = DjangoXBlockUserService(self.anon_user) xb_user = django_user_service.get_current_user() self.assertTrue(xb_user.is_current_user) self.assert_is_anon_xb_user(xb_user)
with remove_ccx(xblock) as (xblock, restore): return restore(self._modulestore.has_published_version(xblock))
return cls.__name__
breadcrumbs = self._breadcrumb(num_units=num_units, modified_name=modified_name) breadcrumbs.reverse() self.assertEqual(bookmarked_breadcrumbs, breadcrumbs)
from salt.modules import mine
tag = get_tag(d) try: resolver = resolvers[tag] except KeyError: reraise_as(TypeError('config does not know of any object type "'+tag+'"')) return resolver(d)
from salt.modules import win_powercfg as powercfg
nested_args = mapping.nest(theano_args) fixed_var_descr = self.cost.get_fixed_var_descr(model, nested_args) self.on_load_batch = fixed_var_descr.on_load_batch
(error, msg) = self._send_to_queue(header, body, files_to_upload)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
tmp.sort(cmp=lambda x, y: cmp(x.lstrip('-'), y.lstrip('-'))) return tmp
import salt.ext.six as six
log = logging.getLogger(__name__)
return "{}/library/{}".format(BASE_URL, unicode(self.locator))
y = np.reshape(y, (-1, 1))
X = make_low_rank_matrix(n_samples=n_samples, n_features=n_features, effective_rank=effective_rank, tail_strength=tail_strength, random_state=generator)
continue
return SurveyAnswer.get_answers(self, user, limit_num_users=limit_num_users)
state_run = self.run_function('state.sls', mods='requisites.listen_in_simple')
with self.settings(FEATURES={'CUSTOM_COURSES_EDX': ccx_feature_flag}): course = self.ccx_enabled_course if enable_ccx else self.ccx_disabled_course self.assertEquals( expected_result, self.check_ccx_tab(course) )
if graceperiodjson is not None: if 'grace_period' in graceperiodjson: graceperiodjson = graceperiodjson['grace_period']
for i in range(3):
X = iris.data
if (not hasattr(estimator, "decision_function") and not hasattr(estimator, "predict_proba")): raise ValueError("The base estimator should implement " "decision_function or predict_proba!")
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
self.n_iter_ = 0 self.t_ = 0 self.n_outputs_ = y.shape[1]
super(BaggingRegressor, self)._validate_estimator( default=DecisionTreeRegressor())
if f.__call__.func_code.co_flags & STAR_ARGS: return f numargs = f.__call__.func_code.co_argcount if hasattr(f.__call__,"im_self"): numargs -= 1
self.desired_space = Conv2DSpace(shape=space.shape, channels=space.num_channels, axes=('c', 0, 1, 'b'))
return self.base_loader.load_template_source(template_name, template_dirs)
s_database = quote_identifier(dbc, for_grants=(table is '*'))
world.wait_for( lambda _: world.css_has_value(grace_period_css, grace_period) )
return self.q(css=self.auto_enroll_upload_button_selector).is_present()
from salt.daemons.flo import core from salt.daemons.test.plan import actors
X_sliced = X_sparse[np.arange(X_sparse.shape[0])] y_sliced = y_sparse[np.arange(y_sparse.shape[0])]
os.chmod(dfn, stat.S_IRUSR | stat.S_IWUSR)
ret = self.run_function( 'git.merge', [self.repo], rev=self.branches[1] ) self.assertTrue('Fast-forward' in ret.splitlines())
if ancestor: direct_children_only = lambda parent: parent == ancestor ancestors.append(create_xblock_info( ancestor, include_child_info=include_child_info, course_outline=course_outline, include_children_predicate=direct_children_only )) collect_ancestor_info(get_parent_xblock(ancestor))
return u"{checkpoint} in {course}".format( checkpoint=self.checkpoint_name, course=self.course_id )
with patch( 'openedx.core.lib.block_structure.transformer_registry.TransformerRegistry.get_registered_transformers' ) as mock_available_transforms: mock_available_transforms.return_value = {transformer for transformer in transformers} yield
pass
verbose_name=_("Changed by"),
raise ItemNotFoundError(usage_key)
opt_args['objective_error'] = objective_error opt_args['kwargs']['angle'] = self.angle opt_args['kwargs']['verbose'] = self.verbose
self.define_option_problem(PROBLEM_URL_NAME) self._test_run_with_task(task_class, action_name, 0)
CourseEnrollment.enroll(user, course_id, "honor") self.assert_no_events_were_emitted()
course = CourseFactory.create() create_account(self.USERNAME, self.PASSWORD, self.EMAIL)
else: new_subcluster1, new_subcluster2 = _split_node( closest_subcluster.child_, threshold, branching_factor) self.update_split_subclusters( closest_subcluster, new_subcluster1, new_subcluster2)
testing.assert_array_equal(F.transform(X), np.around(X, decimals=1))
from __future__ import print_function from __future__ import absolute_import import os import sys
tables = None
gs.fit(X, y)
problem_name = own_metadata(child).get('display_name', '')
resp = self.client.post(reverse('shoppingcart.views.use_code'), {'code': coupon.code}) self.assertEqual(resp.status_code, 200)
for enrollment in manual_enrollments: self.assertEqual(enrollment.enrollment.mode, CourseMode.AUDIT)
rets = {} for ret in ssh.run_iter(): rets.update(ret)
assert np.all((ps == 0) + (ps == 1)) assert np.all((hs == 0) + (hs == 1))
X = super(TfidfVectorizer, self).fit_transform(raw_documents) self._tfidf.fit(X) return self
master_config.update(overrides) overrides = master_config
with mock.patch('requests.post', side_effect=Timeout) as mock_post: self.call_create_zendesk_ticket() self.assertTrue(mock_post.called)
used_ids = set(p.id for p in course.user_partitions) return generate_int_id(used_ids=used_ids)
self.assertTrue(cohorts.is_course_cohorted(self.course.id))
from __future__ import absolute_import import os import fnmatch import re import logging
self.instructor = InstructorFactory(course_key=self.course.id) self.staff = [ StaffFactory(course_key=self.course.id) for __ in xrange(STAFF_COUNT) ]
try: import MySQLdb HAS_MYSQL = True except ImportError: HAS_MYSQL = False
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
payment_data = checkout_with_ecommerce_service( request.user, course_id, current_mode, request.POST.get('processor') )
usage_key, _ = strip_ccx(usage_key) return self._modulestore.has_item(usage_key, **kwargs)
self.verify_expected_team_id(team, 'fully-specified-team') del team['id']
success = self.success return (bool(success), success)
from .comment import Comment from .thread import Thread from .user import User from .commentable import Commentable
def __init__(self, name): self.name = name
return True
n_jobs = min(_get_n_jobs(n_jobs), n_estimators)
try: set_defaults() except Exception as e: logger.exception(e)
return _check_range_and_return('horizontal shift', label, -5, 5)
return self.q(css='#tabpanel-browse ' + CARD_TITLE_CSS).map(lambda e: e.text).results
return 'localtime'
import matplotlib.pyplot as plt from itertools import cycle
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
n_inliers_best = n_inliers_subset score_best = score_subset inlier_mask_best = inlier_mask_subset X_inlier_best = X_inlier_subset y_inlier_best = y_inlier_subset
xpath = "//div[@class='indicator-container']/span[@class='status correct']" self.assert_no_xpath(xml, xpath, self.context)
assert world.is_css_present('.error_message', wait_time=0)
raise TypeError("Model.censor_updates has been replaced by " "Model.modify_updates.")
from salt.modules import proxy as proxy
kwargs = {'script': script, 'cfn': 'check_func'} xml_str = CustomResponseXMLFactory().build_xml(**kwargs)
import logging import os import subprocess import re import collections import decimal
if kw_overrides_match is _marker: return profile_match return kw_overrides_match
if l2_reg != 0.: HHt.flat[::n_components + 1] += l2_reg if l1_reg != 0.: XHt -= l1_reg
import salt.utils.reactor import salt.syspaths import salt.utils.event import salt.utils.process from salt.ext.six import string_types
rng = np.random.RandomState(0)
from __future__ import absolute_import
super(BaggingClassifier, self)._validate_estimator( default=DecisionTreeClassifier())
PIPELINE_JS_COMPRESSOR = None
if bulk_write_record.active: bulk_write_record.set_structure_for_branch(course_key.branch, new_structure)
from salt.exceptions import SaltInvocationError, CommandExecutionError from salt.ext.six import string_types, integer_types import salt.utils
assert_equal(train.intersection(test), set())
from __future__ import absolute_import
if self.list_path: self.path = reverse(self.list_path)
with self.assertNumQueries(1): CountryAccessRule.check_country_access(course_id, 'NZ')
for row in db_query: curr_problem = course_id.make_usage_key_from_deprecated_string(row['module_state_key'])
self.q(css='.dismiss-button').click()
'list_max_length': get_config_value('list_max_length'),
if not self.event.connect_pub(timeout=timeout): raise SaltReqTimeoutError() payload = channel.send(payload_kwargs, timeout=timeout)
xml_object.tag = self.category node.tag = self.category
languages.sort() return languages
from salt.states import splunk_search
substring = [ "--with-xunitmp --xunitmp-file={}".format(self.xunit_report), "--processes={}".format(self.num_processes), "--no-color --process-timeout=1200" ]
is_course_full = False if course.max_student_enrollments_allowed is not None: is_course_full = self.num_enrolled_in_exclude_admins(course.id) >= course.max_student_enrollments_allowed return is_course_full
if item not in ['constraint']: cmd += [item_id] if isinstance(item_type, six.string_types): cmd += [item_type]
__virtualname__ = 'virtualenv'
def __init__( self, contentstore=None,
import salt.ext.six as six
self._create_course_unit() self.assertFalse(self.video.is_autoplay_enabled)
from __future__ import absolute_import import datetime
self.kwargs['os_auth_url'] = auth_url
wua_session = win32com.client.Dispatch('Microsoft.Update.Session') wua_session.ClientApplicationID = 'Salt: Install Update'
url(r'^get_students_problem_grades$', 'class_dashboard.dashboard_data.get_students_problem_grades', name="get_students_problem_grades"),
message = _('This student (%s) is already allowed to skip the entrance exam.') % self.student.email self.assertContains(response, message)
request_lowstate = [{ "client": "local", "tgt": "*", "fun": "test.fib", "arg": "10" }]
if exploded_grant[position_tracker + 1] == '@': phrase = 'pre-host'
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
return self.q(css=self._bounded_selector('.remove-admin-role')).present
functions = self.functions self.functions = {} returners = self.returners self.returners = {}
print(metrics.classification_report(y_test, y_predicted, target_names=dataset.target_names))
form = self._admin_form(course_mode)
validation = self.store.get_item(self.video_location).validate() self.assertEqual(len(validation.messages), 0)
from __future__ import absolute_import import os import time import signal import multiprocessing
self.assertNotIn('error_code', json.loads(response.content))
path_cache = None parents_cache = None
import logging
import integration import salt.utils
from __future__ import absolute_import
import salt.utils import salt.syspaths from salt.exceptions import SaltInvocationError
return _git_run(command, cwd=cwd, runas=user, ignore_retcode=ignore_retcode, redirect_stderr=True)['stdout']
if isinstance(value, datetime.timedelta) or value is None: return value return self.from_json(value)
EmptyPromise(lambda: self.is_captions_visible() == captions_new_state, "Transcripts are {state}".format(state=state)).fulfill()
handler = SysLogHandler(**syslog_opts)
if use_svd: U = svd(Gi, full_matrices=0)[0] else: Ci = np.dot(Gi, Gi.T) U = eigh(Ci)[1][:, ::-1]
UserProfile(user=user).save()
dist_dict = defaultdict(int) dist_dict.update(single_source_shortest_path_length(dist_matrix, i))
name = _sdecode(name) snap_name = _validate_snap_name(name, snap_name, runas=runas)
chunk = self.data[self.cursor:(self.cursor + chunk_size)] self.cursor += chunk_size return chunk
import salt.utils import salt.utils.mac_utils from salt.exceptions import CommandExecutionError
if acl_name == '': _search_name = __current_perms[name].get('comment').get(_acl_type) else: _search_name = acl_name
extra['tz_aware'] = extra.get('tz_aware', True)
opts = _parse_network_settings(settings, current_network_settings)
from_xmodule = [entry_point for entry_point in entry_points if entry_point.dist.key == 'xmodule'] return default_select(identifier, from_xmodule)
create_kwargs = salt.utils.clean_kwargs(**copy.deepcopy(kwargs)) send_signal = create_kwargs.pop('send_signal', False)
status = 'failed' reason = { 'final_grade': grade_summary['percent'], 'minimum_grade': min_grade }
import salt.ext.six as six
try: from xblock_django.user_service import DjangoXBlockUserService from crum import get_current_user
self.assertEqual(views.get_cosmetic_display_price(self.course, registration_price), "$99")
if func_code.co_flags & 0x08: index = pos_count + keyword_only_count if func_code.co_flags & 0x04: index += 1
result.status_code
continue
return {'master': __opts__.get('master', '')}
mgmt_command = -1
self.settings_detail.refresh_page() self.settings_detail.wait_for_prerequisite_course_options() dropdown_status = is_option_value_selected( browser_query=self.settings_detail.pre_requisite_course_options, value=pre_requisite_course_id ) self.assertTrue(dropdown_status)
return struct.calcsize('P') * 8 == 32
self.assertEqual(self.ipv6_interface.with_hostmask, '2001:658:22a:cafe:200::1/::ffff:ffff:ffff:ffff')
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
self.n_classes = np.unique(y).shape[0] if self.n_classes == 2: self.n_classes = 1
INVOICE_CORP_ADDRESS = "Please place your corporate address\nin this configuration" INVOICE_PAYMENT_INSTRUCTIONS = "This is where you can\nput directions on how people\nbuying registration codes"
world.wait(1) continue
import time import logging
(ok_, err, sl_) = _unify_sources_and_hashes(source=source, source_hash=source_hash, sources=sources, source_hashes=source_hashes) if not ok_: return _error(ret, err)
from salt.modules import devmap import os.path
response_element = etree.Element("formularesponse")
b01c_shape = [result.shape[0], space.shape[0], space.shape[1], space.num_channels] result = result.flatten() result = tensor.reshape(result, newshape=b01c_shape, ndim=4)
return "is-editing" in self.q( css=self._bounded_selector(self.NAME_FIELD_WRAPPER_SELECTOR) )[0].get_attribute("class")
self.cohort_management_page.select_cohort_some_inline_discussion()
raise TypeError("Unknown object type in has_access(): '{0}'" .format(type(obj)))
comment, passed, retries = _download(win_updater, retries) ret['comment'] += comment if not passed: ret['result'] = False return ret
usage_key = self._map_revision_to_branch(usage_key, revision=revision) return super(DraftVersioningModuleStore, self).has_item(usage_key)
from __future__ import absolute_import import os
_config_filename_ = 'minion' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'minion') _setup_mp_logging_listener_ = True
course_info_page = CourseInfoPage(self.browser, self.course_id) self._make_har_file(course_info_page)
io_loop = ioloop.IOLoop() io_loop.make_current()
clf = svm.SVC(kernel='linear', C=0.1, decision_function_shape='ovo').fit(iris.data, iris.target)
return self._get_course_info(request, course)
([[10, 10, 8, 11], [9, 8, 1, 1], [9, 7, 4, 10]], 15 ),
u = linalg.solve_triangular(self.G.T, np.dot(self.Ft.T, rt) - f.T, lower=True)
_ = lambda text: text
course, course_data_path = self.import_courselike( runtime, courselike_key, dest_id, source_course, ) return source_course, course, course_data_path
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
rng = check_random_state(0)
if ret.get(esxi_host) is None: ret.update({esxi_host: {}}) ret[esxi_host].update(response)
if lang_code == 'zh_HANT': self.video.select_language(lang_code) unicode_text = lang_text.decode('utf-8') self.assertIn(unicode_text, self.video.captions_text)
raise SaltCloudSystemExit( 'The request_instance action must be called with -a or --action.' )
if not assume_centered: X = X - X.mean(0)
network_spec = _add_new_network_adapter_helper(network_adapter_label, network_name, adapter_type, switch_type, container_ref) adapter_mapping = _set_network_adapter_mapping(devices['network'][network_adapter_label]) device_specs.append(network_spec) nics_map.append(adapter_mapping)
return self.q(css='.warning').results[0].text
for child in children: self._block_relations[child].parents.remove(usage_key)
results = (course for course in results if self.user_can_access_course(self.request.user, course))
self.assertTrue(filecmp.cmp(path_test + '.bak', path_in))
destroy(vm_['name'])
if __grains__['kernelrelease'] == "5.9": return (False, 'The smf execution module failed to load: SMF not available on Solaris 9.') return __virtualname__
axis0 = 'sample' axis1 = 'label' if average == 'samples': axis0, axis1 = axis1, axis0
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit()
request = RequestFactory().request() request.user = user all_tabs = get_course_tab_list(request, course) return any([tab.name == u'My Notes' for tab in all_tabs])
self.find_css('.action-primary').first.click() self.page.wait_for_ajax()
self.assertFalse(runtime.user_is_beta_tester) self.assertEqual(runtime.days_early_for_beta, 5)
from .models import SAMLProviderConfig return SAMLProviderConfig.current(idp_name).get_config()
if query_interval is not None: command.QUERY_INTERVAL = query_interval
attempt_2 = SoftwareSecurePhotoVerification(user=user) attempt_2.mark_ready() assert_equals(attempt_2, SoftwareSecurePhotoVerification.active_for_user(user))
with self.settings(PIPELINE_ENABLED=True): js_include = compressed_js('base_application') self.assertIn(u'lms-base-application.js', js_include)
git@github.com:user/repo.git: git.latest: - user: deployer - identity: /home/deployer/.ssh/id_rsa
'openedx.core.djangoapps.programs',
state('A').cmd.run('echo this is state A', cwd='/')
del DEFAULT_FILE_STORAGE MEDIA_ROOT = "/edx/var/edxapp/uploads"
cr_ec2 = MockEC2() cr_ec2.tenant_id = tenantid cr_ec2.user_id = userid return cr_ec2
assert choice_type in group_element_names group_element = etree.Element(group_element_names[choice_type])
for k, prec in enumerate(precisions): prec = _check_precision_matrix(prec, covariance_type)
pass
urlpatterns += ( url(r'^certificates/', include('certificates.urls', app_name="certificates", namespace="certificates")),
from salt.states import win_certutil as certutil
if 'host' not in payload: payload.update({"host": self.host})
response = self.client.post(self.url, self.params) self.assertEqual(response.status_code, 400)
execfile
answer.field_value = value answer.course_key = course_key answer.save()
if (isinstance(original_arg, six.string_types) and not original_arg.startswith('{')): return original_arg else: return arg
if cached_md5 == file_md5: return
kwargs['size'] = '10'
assert_event_matches(expected, actual, tolerate=EventMatchTolerates.strict())
return time.strftime('%Y-%m-%dT%H:%M:%SZ', value)
xblock_info = self._get_xblock_info(chapter.location) self._verify_visibility_state(xblock_info, VisibilityState.live)
n_population = 10
error_msg = "XQueue received invalid grade request" self._send_immediate_response(False, message=error_msg)
for injected in injected_func_globals: del func_globals[injected]
self._active_count -= 1
X = iris.data
config.groups[0].remove() config.save()
return True
form = self.get_form(expected_valid=True) self.assertDictEqual(form.cleaned_data, expected_cleaned_data)
with self.assertRaisesRegexp(CommandError, unicode(GitExportError.URL_BAD)): call_command('git_export', 'foo/bar/baz', 'silly', stderr=StringIO.StringIO())
from salt.modules import pyenv
readonly_fields = ('sender',)
super(IsCommentableCohortedTestCase, self).setUp() self.toy_course_key = ToyCourseFactory.create().id
if kwargs.get(push, False): ret['Push'] = __salt__['cp.push'](path)
import salt.returners import salt.utils.jid import salt.exceptions
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) signal_handler.send.assert_called_with('course_published', course_key=course.id)
replication_map = { 'class': replication_strategy }
assert test.X.shape[0] % batch_size == 0
_mock_count.return_value = None with self.assertRaises(SystemExit): call_task('pavelib.quality.run_safecommit_report')
- cn=foo,ou=users,dc=example,dc=com: - delete_others: True
tasks = instructor_task.api.get_entrance_exam_instructor_task_history(course_id, entrance_exam_key)
def rval(): X, y = self.dataset.get_batch_design(self.batch_size, include_labels=True) self.y_cache = y return X return rval
errors = modulestore.get_course_errors(SlashSeparatedCourseKey("edX", "toy", "2012_Fall")) assert errors == []
effective_diff = np.sum((new_centers_csr - old_centers) ** 2) assert_almost_equal(incremental_diff_csr, effective_diff)
roles = get_role_ids(course_id) for role in roles: if user.id in roles[role]: return True return False
#html_logo = 'images/theano_logo-200x67.png' #html_logo = 'images/theano_logo_allblue_200x46.png'
km = KMeans(precompute_distances="wrong") assert_raises(ValueError, km.fit, X)
self.add_credit_course()
from salt.states import modjk import salt.ext.six as six
from __future__ import absolute_import
return has_access(user, action, xmodule.descriptor, course_key)
return
self.client.login(username=self.global_staff.username, password="test")
from sklearn.linear_model import Lasso
_new_value_type = 'simple' if isinstance(val, dict): _new_value_type = 'complex' elif isinstance(val, list): _new_value_type = 'complex'
log.exception("Could not send notification email for initial verification for user %s", user.id)
for section in self.course_outline_page.sections(): self.assertEqual(collapsed, section.is_collapsed)
return self.make_theano_batch(name=name, dtype=dtype, batch_size=batch_size)
non_draft_loc = as_published(location)
_skip_console_logging_config_ = True _logfile_config_setting_name_ = 'key_logfile' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'key')
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
raise SaltClientError( 'The salt master could not be contacted. Is master running?' )
raise NotImplementedError()
EmptyPromise( lambda: self.find_css('.signatory-panel-body .signatory-name-input').present, 'On signatory edit view' ).fulfill()
CREDIT_MODES = [CREDIT_MODE]
moments_1[k] = moments_1[i] + moments_1[j] moments_2[k] = moments_2[i] + moments_2[j]
from __future__ import absolute_import import logging
from __future__ import absolute_import
import yaml import salt.ext.six as six
context.update(course.cert_html_view_overrides)
url(r'get_coupon_codes', 'instructor.views.api.get_coupon_codes', name="get_coupon_codes"),
num_choices = len(self.descriptor.get_children())
start = DateTimeField(null=True) end = DateTimeField(null=True) advertised_start = TextField(null=True) announcement = DateTimeField(null=True)
task_input = {'student_set': "all_whitelisted"}
try: return cls.objects.get(user=student, course_id=course_id) except cls.DoesNotExist: pass return None
cost = SumOfCosts([SumOfParams(), (0., DummyCost())]) model = DummyModel(shapes, lr_scalers=scales) dataset = ArangeDataset(1) momentum = 0.5
self.assertIsNotNone(current_last_activity)
self.assert_account_settings_context_looks_correct(account_settings_context(request), user, linked=True) self.assert_social_auth_exists_for_user(request.user, strategy)
world.browser.execute_script("window.scrollTo(0,1024)") assert world.is_css_present("button.check.is-disabled")
return HttpResponseBadRequest('Requested page must be numeric')
if sample_weight is None: break
return ThreadSerializer(thread, context=get_context(self.course, self.request)).data
MODULESTORE = TEST_DATA_MONGO_MODULESTORE __test__ = True
cert = GeneratedCertificate.eligible_certificates.get(user=self.student) self.assertEqual(cert.status, CertificateStatuses.notpassing)
__virtualname__ = 'debconf'
if isinstance(batch, np.ndarray): return batch.shape else: return tuple(get_shape(b) for b in batch)
course_key = courselike.id
from __future__ import unicode_literals
CourseFixture( org='test_org', number='335535897951379478207964576572017930000', run='test_run', display_name='Test Course 335535897951379478207964576572017930000', ).install()
with patch('capa.capa_problem.LoncapaProblem.get_html') as mock_html: mock_html.return_value = "<div>Test Problem HTML</div>"
self._mixin_after_parsed_funcs.append(self.__setup_extended_logging) self._mixin_after_parsed_funcs.append(self._setup_mp_logging_listener) self._mixin_after_parsed_funcs.append(self.__setup_console_logger)
from salt.modules import dig
for db_alias in self.dbs.keys(): sh("cp {db} {db_cache}".format(db_cache=self.db_caches[db_alias], db=self.dbs[db_alias]))
assert_raise_message(ValueError, msg, check_X_y, X, y, ensure_min_samples=2, ensure_2d=False)
component = self.store.get_item(component.location) component.display_name = 'Changed Display Name' self.store.update_item(component, self.user_id)
import salt.ext.six as six
return stdout
self.course_info_page.visit() self.tab_nav.go_to_tab('Test Static Tab') self.assertTrue(self.tab_nav.is_on_tab('Test Static Tab'))
import logging import socket import time
attribute = getattr(module, attribute_name) setattr(attribute_replacement, __BACKUP_ATTRIBUTE_NAME, attribute) setattr(module, attribute_name, attribute_replacement) return is_patched(module, attribute_name)
generate_subs_from_source( result_subs_dict, os.path.splitext(user_filename)[1][1:], srt_transcripts.data.decode('utf-8-sig'), item, lang )
if has_access(user, u'staff', descriptor.location, course_id): system.error_descriptor_class = ErrorDescriptor else: system.error_descriptor_class = NonStaffErrorDescriptor
mode = str(mode)
for student in students[7:]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.generating, mode='honor', grade=default_grade )
from __future__ import absolute_import
response = external_auth.views.redirect_with_get('root', request.GET)
'ENABLE_MKTG_SITE': False,
monitoring_dataset = DenseDesignMatrix(X=X)
X = make_low_rank_matrix(n_samples=n_samples, n_features=n_features, effective_rank=rank, tail_strength=0.1, random_state=0) assert_equal(X.shape, (n_samples, n_features))
if __grains__['os_family'] == 'RedHat': network_c = salt.utils.fopen('/etc/sysconfig/network', 'r').readlines()
ensure_in_syspath('../../') from salt.modules import ssh from salt.exceptions import CommandExecutionError
existing_config = None if __salt__['chronos.has_job'](name): existing_config = __salt__['chronos.job'](name)['job']
url = "i4x://MITx/999/chapter/notfound" with self.assertRaises(tools.DashboardError): tools.find_unit(self.course, url)
import salt.loader import salt.utils import salt.utils.locales
course_modules_json = json.dumps(valid_input.get('course_modules'))
self.assertEqual(mock.call_count, 0)
self.form_data.setlist('requested_fields', ['field1', 'field2'])
BULK_EMAIL_DEFAULT_RETRY_DELAY = 30
AFFILIATE_COOKIE_NAME = 'affiliate_id'
combined = ":".join([key_prefix, version, key])
from salt.modules import pip from salt.exceptions import CommandExecutionError
class Channel(object): @staticmethod def factory(opts, **kwargs): ttype = 'zeromq'
PaymentFakeView.PAYMENT_STATUS_RESPONSE = new_status return HttpResponse()
client_cache = None event_user = 'Reactor'
child._field_data.set(child, 'due', child_due) compute_inherited_metadata(descriptor) self.override_metadata_check(descriptor, child, course_due, child_due)
num_incorrect = num_pool - 1 num_incorrect = min(num_incorrect, len(incorrect_choices))
time.sleep(60)
COURSE_EMAIL_MESSAGE_BODY_TAG = '{{message_body}}'
pass
multi_db = True
rgr_lasso = Lasso(alpha=0.001) rgr_lasso.fit(proj_operator, proj.ravel()) rec_l1 = rgr_lasso.coef_.reshape(l, l)
return _get_block_structure_manager(course_key).update_collected()
if installer.startswith(('salt:', 'http:', 'https:', 'ftp:')):
self._future._future_with_timeout = self if self._future.done(): future_with_timeout_callback(self._future)
check_lti_popup(parent_window)
try: from code_block_timer import CodeBlockTimer except ImportError: CodeBlockTimer = None
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
generated_password = ['first'] password = generate_unique_password(generated_password, 12) self.assertNotEquals(password, 'first')
initial_status = "submitted" VerificationStatus.add_verification_status( checkpoint=self.first_checkpoint, user=self.user, status=initial_status ) VerificationStatus.add_verification_status( checkpoint=self.second_checkpoint, user=self.user, status=initial_status )
from __future__ import absolute_import import logging import re
raise NotImplementedError()
if not string.islower(): raise ValidationError(_(u"This value must be all lowercase."))
__func_alias__ = { 'list_vms': 'list' }
command.extend(['--', filename])
block_bits = width if (not max_bits or width < max_bits) else max_bits block_size = 2 ** block_bits
svc = svm.SVC(kernel='linear', C=0.1, decision_function_shape='ovo') clf = svc.fit(iris.data, iris.target)
from __future__ import absolute_import, print_function, generators import os import copy import glob import time import signal import logging import traceback import multiprocessing import sys from itertools import groupby
self._updates.append(update)
ret = self.run_state('ssh_known_hosts.absent', test=True, **kwargs) self.assertSaltTrueReturn(ret)
length = arr.size if hasattr(arr, 'size') else len(arr) return np.nan if length == 0 else np.mean(arr, *args, **kwargs)
ensemble = BaggingClassifier(base_estimator=LogisticRegression(), random_state=rng, max_samples=5).fit(X_train, y_train)
try: from Cheetah.Template import Template HAS_LIBS = True except ImportError: HAS_LIBS = False
run = problem_key.run if not run: problem_key = course_key.make_usage_key_from_deprecated_string(problem_location) if problem_key.course_key != course_key: raise InvalidKeyError(type(problem_key), problem_key)
from __future__ import absolute_import import os import re import socket import logging from string import ascii_letters, digits
resp = self.client.get(self._receipt_url) self.assertContains(resp, expected_text)
import salt.utils.http
if resp.context: self.assertEqual(resp.context['course'], self.course)
from __future__ import absolute_import import logging import json
cohort_list[0].users.add(*user_list) cohort_list[0].users.clear() assert_events("removed", user_list, cohort_list[:1]) mock_tracker.reset_mock()
self._export_import_course_round_trip( self.store, contentstore, source_course_key, self.export_dir )
config_course_cohorts_legacy( course, discussions=[], cohorted=True, auto_cohort_groups=["OtherGroup"] )
sh("i18n_tool generate")
if Microsite.objects.all()[:1].exists(): return True else: return False
from __future__ import absolute_import import inspect import tempfile import shutil import os import collections
return {}
self.code = self.capa_system.filestore.open('src/' + answer_src).read()
if key == "ROOT" or key == "COURSES": continue
self.assertRaises( Http404, views.container_handler, request, usage_key_string='i4x://InvalidOrg/InvalidCourse/vertical/static/InvalidContent', )
import salt.utils from salt.exceptions import CommandExecutionError
self.library_fixture.create_xblock(self.library_fixture.library_location, XBlockFixtureDesc("html", "Html4"))
token = win32security.LogonUser(username, domain, password, win32con.LOGON32_LOGON_INTERACTIVE, win32con.LOGON32_PROVIDER_DEFAULT)
log.error('Received message without share: {0}'.format(msg)) return
if master is not None: tmp_ip = _host_to_ip(master) if tmp_ip is not None: master_ip = tmp_ip
score[i] += n_ranked_above / rank[label]
return self.q(css='.wrapper-last-publish').first.text[0]
self.course_db = {}
K.flat[::n_samples + 1] -= alpha[0]
with self.assertRaises(ValueError): with store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course.id):
test_course = self.store.create_course('testx', 'GreekHero', 'test_run', self.user_id) self.assertTrue(self.store.has_published_version(test_course))
if not ((requester_perms & STUDIO_EDIT_ROLES) or (user.id == request.user.id)): return permissions_error_response
ret |= {"voted"} if _is_author_or_privileged(cc_content, context): ret |= {"raw_body"}
pinv2_args = {'check_finite': False}
self.times_called += 1 if self.times_called % 2 == 0: return True, 'Task Completed' return False, 'Task Errored In Some Way'
mlp.n_layers_ = 3
return self.q(css='#view-updated-button').visible
if vm.guest.toolsStatus == "toolsOk": status = 'VMware tools is already up to date' return status
print_filename = True
assert_array_equal(clf.apply(X), clf_2.apply(X))
(solution_id, subset_choices) = self.sample_from_answer_pool(choices_list, rng, num_choices)
gentoo_service.__grains__ = {} gentoo_service.__salt__ = {} gentoo_service.__context__ = {} gentoo_service.__opts__ = {}
return False
if result is False: target_pkgs.append((prefix, state_pkg_name.replace(',', ';')))
state_run = self.run_function('state.sls', mods='requisites.onchanges_simple')
try: import docker import docker.utils HAS_DOCKER_PY = True except ImportError: HAS_DOCKER_PY = False
pass
result = jboss7.bindings_exist(name='bindings', jboss_config={}, bindings={'env': 'DEV'}, profile=None)
'ENABLE_CREATOR_GROUP': False,
self.assertEqual(self.problem_page.problem_name, self.problem_name)
'ENABLE_LTI_PROVIDER': False,
im_path = serial.preprocess(im_path) label_path = serial.preprocess(label_path)
E = np.empty(0) assert_raises(ValueError, _fast_dot, E, E)
cloud_downtime = random.randint(0, opts.splay) print('Sleeping random period before calling salt-cloud: {0}'.format(cloud_downtime)) time.sleep(cloud_downtime)
assert_equals(attempt_2, SoftwareSecurePhotoVerification.active_for_user(user))
opts.log_file = os.path.join(opts.artifact_dir, 'salt-buildpackage.log')
ret = {'name': name, 'result': False, 'comment': '', 'changes': {},
__salt__['cmd.run']('attrib -R "{0}"'.format(notify_path))
split_test = self._update_partition_id(0)
with patch('openedx.core.djangoapps.safe_sessions.middleware.log.' + log_level) as mock_log: yield mock_log.assert_any_call(log_string)
from __future__ import absolute_import
#ax.plot([1], [1], [1], color=c, label=label)
SUPPORTED_BSD_LIKE = ['FreeBSD', 'NetBSD', 'OpenBSD']
a = "this is \xe0 test" expected = 'this is a test' assert_equal(strip_accents_ascii(a), expected)
for field_name in self.DEFAULT_FIELDS: self.field_handlers[field_name](form_desc, required=True)
return self.find_css('.staff-lock .tip-warning').visible
assert_array_equal(out, sw_out)
return self.find_css("#start_time").first.attrs('value')[0]
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
from salt.textformat import TextFormat from salt.log.handlers import (TemporaryLoggingHandler, StreamHandler, SysLogHandler, FileHandler, WatchedFileHandler, QueueHandler) from salt.log.mixins import LoggingMixInMeta, NewStyleClassMixIn
bulk_write_record = self._get_bulk_ops_record(course_key) if bulk_write_record.active: bulk_write_record.modules[version_guid][block_key] = block
_update_social_context(request, context, course, user, user_certificate, platform_name)
return Mode( self.mode_slug, self.mode_display_name, self.min_price, self.suggested_prices, self.currency, self.expiration_datetime, self.description, self.sku, self.bulk_sku )
import logging
pass
return self.q(css='p.card-description').map(lambda e: e.text).results
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandExecutionError, MinionError
from __future__ import absolute_import import logging import json
merged_parent_group_ids = None
pass
'unsubmitted': 'unanswered', 'incomplete': 'incorrect', 'queued': 'processing',
log = logging.getLogger(__name__)
try:
assert_raises(ValueError, _inverse_binarize_thresholding, y=csr_matrix([[1, 2], [2, 1]]), output_type="foo", classes=[1, 2, 3], threshold=0)
self.q(css=TEAMS_LINK_CSS).filter( text='View Teams in the {topic_name} Topic'.format(topic_name=topic_name) )[0].click() self.wait_for_ajax()
self.thread_cache = threading.local()
return self._is_element_visible(".response_{} .edit-post-body".format(response_id))
params.update(default_flow_style=False, indent=__opts__['output_indent'])
prefix = _('Hint ({hint_num} of {hints_count}): ').format(hint_num=hint_index + 1, hints_count=len(demand_hints))
partitions = self._get_partition_info() self.assertEqual(len(partitions), 1) self.assertEqual(partitions[0]["scheme"], "cohort")
from urllib2 import HTTPError from urllib2 import quote from urllib2 import urlopen
self.state = state
self.modulestore = modulestore self.course_key = course_key self.definition_locator = DefinitionLocator(block_type, definition_id) self.field_converter = field_converter
history = HistoricalRecords()
tip = resolved(joinpath(base, dirname(info.name))) return _is_bad_path(info.linkname, base=tip)
if 'port' in _options: _options['port'] = int(_options['port']) return _options
response = self.client.get(course_one_teams_url) self.assertIn('"teams": {"count": 1', response.content)
sls[ks_opts['keyboard']['xlayouts']] = {'keyboard': ['system']}
state_ret['result'] = None
prob_sum = prob.sum(axis=1) all_zero = (prob_sum == 0) if np.any(all_zero): prob[all_zero, :] = 1 prob_sum[all_zero] = len(self.classes_)
parameters = {'n_estimators': (1, 2), 'base_estimator__C': (1, 2)}
import hashlib import logging import os.path import random import signal
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
PARTNER_SUPPORT_EMAIL = ''
__virtualname__ = 'git'
virtualenv_mod.__salt__ = {} virtualenv_mod.__opts__ = {} virtualenv_mod.__env__ = {}
_new_dir(CACHE_ROOT)
loaded_mods = list(set(loaded_mods) | set(persist_mods))
while n_features > 2: sfm.threshold += 0.1 X_transform = sfm.transform(X) n_features = X_transform.shape[1]
import salt.ext.six as six
self.q(css='a.nav-item').filter(text=topic)[0].click()
self._reset_event_aggregation() self.local.event.set_event_handler(self._process_event)
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
checkpoint = VerificationCheckpoint(course_id=self.course_key, checkpoint_location=self.reverification_location) checkpoint.save()
response = self.client.get(reverse('sysadmin_courses')) self.assertNotRegexpMatches(response.content, table_re)
with self._mock_xqueue() as mock_queue: certs_api.generate_example_certificates(self.COURSE_KEY)
for state in __salt__['state.show_lowstate'](): if 'state' not in state: continue
course = CourseFactory.create(static_asset_path="foo") self.assertEquals( course_image_url(course), '/static/foo/images/course_image.jpg' )
import logging
try: ret = self.run_function( 'state.template_str', ['\n'.join(template)] )
assert_raises( AssertionError, monitor.update_channels, 0 )
import salt.output.highstate
self._verify_masquerade_for_group(self.user_partition.groups[0]) self._verify_masquerade_for_group(self.user_partition.groups[1]) self._verify_masquerade_for_group(None)
import salt.utils
self.assertFalse(CourseMode.objects.filter(id=self.course_mode.id).exists())
assert False
import logging import salt.ext.six as six
resp = self.create_xblock(parent_usage_key=chap_usage_key, category='vertical') vert_usage_key = self.response_usage_key(resp)
ret_multip = {} for obj in output_multip: ret_multip.update(obj)
ws.close()
ret['changes'].pop('diff', None) return _error(ret, 'Parent directory not present')
if ':' in key: namespace, key = key.split(':', 1) else: namespace, key = key, None
module = ''
clf = svm.SVC(kernel='linear', C=1.0) clf.fit(X, y)
link = world.retry_on_exception( lambda: _find_matching_button(category, component_type), ignored_exceptions=AssertionError )
self.database.connection.close()
from urllib.error import HTTPError from urllib.parse import quote from urllib.request import urlopen
with with_edx_domain_context(is_edx_domain): response = self.client.get(reverse(url_name), params)
from __future__ import absolute_import
if not settings.FEATURES.get("ENABLE_CREDIT_ELIGIBILITY"): return {}
handout_links = self.course_info_page.handout_links self.assertEqual(len(handout_links), 1) self.assertIn('demoPDF.pdf', handout_links[0])
pass
try: import consul HAS_CONSUL = True except ImportError: HAS_CONSUL = False
set_crontab(
self.delete_item(store, self.html_unit1.location) self.reindex_library(store) response = self.search() self.assertEqual(response["total"], 1)
for label in np.unique(labels): assert_equal(len(np.unique(folds[labels == label])), 1)
default="images_course_image.jpg"
__virtualname__ = 'syslog'
value = default
__salt__
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath
req_kwargs = {}
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
if X.flags.c_contiguous: return check_array(X.T, copy=False, order='F'), True else: return check_array(X, copy=False, order='F'), False
SYMMETRIC_METRICS = [ "accuracy_score", "unnormalized_accuracy_score", "hamming_loss", "jaccard_similarity_score", "unnormalized_jaccard_similarity_score", "zero_one_loss", "unnormalized_zero_one_loss",
for name in ["", "a"]: params["name"] = name assert_name_error("Your legal name must be a minimum of two characters long")
self._check_vocabulary() return [t for t, i in sorted(six.iteritems(self.vocabulary_), key=itemgetter(1))]
url = self.reverse_url(reverse_args, **kwargs) response = self.url_method(url, **kwargs) if expected_response_code is not None: self.assertEqual(response.status_code, expected_response_code) return response
uploaded_file = request.FILES['file']
us_rule.delete() self._assert_history([('AU', 'blacklist')])
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
sync = SyncWrapper(AsyncReqChannel.factory, (opts,), kwargs) return sync
return sorted(results, key=lambda course: unicode(course.id))
rng = np.random.RandomState(0) X, y = make_regression(n_samples=20, n_features=1, random_state=0, noise=4.0, bias=100.0)
self.freeze_set = self.freeze_set.union(parameter_set)
_upload_file(self.srt_file, self.item_descriptor.location, uk_translation_filename)
self.coach = UserFactory.create() self.mstore = modulestore()
rev = rev.lower() remote_rev = rev remote_rev_type = 'sha1'
from salttesting.helpers import ( ensure_in_syspath, ) ensure_in_syspath('../../')
now_patch = patch('onelogin.saml2.utils.OneLogin_Saml2_Utils.now', return_value=timestamp) now_patch.start() self.addCleanup(now_patch.stop)
#modindex_common_prefix = []
'renderer_blacklist': list,
exam_attempts_section.remove_student_attempt() self.assertFalse(exam_attempts_section.is_student_attempt_visible)
clf_sparse = SVC(kernel="linear") rfe_sparse = RFE(estimator=clf_sparse, n_features_to_select=4, step=0.1) rfe_sparse.fit(X_sparse, y) X_r_sparse = rfe_sparse.transform(X_sparse)
self.course_nav.go_to_vertical('Test Vertical-2')
def run_reqserver(self, **kwargs): secrets = kwargs.pop('secrets', None) if secrets is not None: SMaster.secrets = secrets
errstring = "Invalid course key." with self.assertRaisesRegexp(CommandError, errstring): call_command('force_publish', 'TestX/TS01')
Y = iris.target
company_label = _(u"Company")
if not fnmatch.fnmatch(repo['url'], six.text_type(remote)): continue
return self.enabled and self.enable_studio_authoring
ret['result'] = None ret['comment'] = ( 'Sysctl option {0} would be changed to {1}'.format(name, value) ) return ret
return len(self.q(css='.xblock-header').filter( lambda el: 'xblock-header-video' in el.get_attribute('class')).results)
@ignore_warnings def test_random_hasher(): hasher = RandomTreesEmbedding(n_estimators=30, random_state=1) X, y = datasets.make_circles(factor=0.5) X_transformed = hasher.fit_transform(X)
self._deferred_print = [] return super(StandardReport, self).init_file( filename, lines, expected, line_offset)
for config_key in ('log_file', 'key_logfile'): log_setting = opts.get(config_key, '') if log_setting is None: continue
multioutput = None
assert_greater_equal(w[0], 0)
MAX_ATTEMPTS = 30 for i in range(MAX_ATTEMPTS): if exists( table_name, region, key, keyid, profile ): return True else:
while re.search(RSTR_RE, stdout): stdout = re.split(RSTR_RE, stdout, 1)[1].strip()
n_samples_per_center = 100 grid_size = 3 scale = 0.1 n_clusters = grid_size ** 2
problem = new_loncapa_problem(xml_str) problem.done = True problem.student_answers = {'1_2_1': 'choice_1'}
if hasattr(course, 'syllabus_present') and course.syllabus_present: course.tabs.append(CourseTab.load('syllabus'))
if self.should_show_check_button(): check_button = self.check_button_name() check_button_checking = self.check_button_checking_name() else: check_button = False check_button_checking = False
graders = { 'edc': self.grade_via_every_decision_counts, 'halves': self.grade_via_halves, 'false': self.grade_without_partial_credit }
for _ in range(num_threads): thread = threading.Thread(target=self._thread_target) thread.daemon = True thread.start() self._workers.append(thread)
__virtualname__ = 'group'
for child in old_block_relations[block_key].children: if child in pruned_block_relations: self._add_to_relations(pruned_block_relations, block_key, child)
return json.dumps({ k: v.encode('utf-8') if isinstance(v, basestring) else v for k, v in post_dict.items() })
from __future__ import absolute_import import datetime import os import time import pickle import logging
if state.transposed: results = results[:, ::-1]
class_priority = ['video', 'problem']
coupon = Coupon(code=code, description='testing code', course_id=course_key, percentage_discount=self.percentage_discount, created_by=self.user, is_active=is_active) coupon.save()
pythoncom.CoInitialize()
if parents.issubset(to_delete): next_tier.add(child_block_key)
clf = svm.LinearSVC(penalty='l2', dual=True, random_state=0).fit(X, Y) assert_array_equal(clf.predict(T), true_result)
'clean_dynamic_modules': bool,
CIFAR_FOLDER = "./cifar-10-batches-py/" SVHN_FOLDER = "./SVHN/"
return list(whitelist_countries - blacklist_countries)
del team['date_created'] del team['discussion_topic_id']
self.assertEqual( res_json['message'], u"Student (username/email={user_name}) already in certificate exception list.".format(user_name=user) )
country, __ = Country.objects.get_or_create(country='IR')
membership1 = CohortMembership( course_id=course_1_auto_cohort_1.course_id, user=self.user1, course_user_group=course_1_auto_cohort_1 ) membership1.save() membership2 = CohortMembership( course_id=course_1_auto_cohort_1.course_id, user=self.user2, course_user_group=course_1_auto_cohort_1 ) membership2.save()
if isinstance(pillar_rows, list): for row in pillar_rows: rows.append(row) else: rows.append(pillar_rows)
self.context = self._extract_context(self.tree)
course_outline_page = CourseOutlinePage( self.browser, self.course_org, self.course_number, self.course_run ) course_outline_page.visit() course_outline_page.wait_for_page()
ret = ret[self.quoteCharLen:-self.endQuoteCharLen]
HAS_WHOOSH = False try: import whoosh.index import whoosh.fields import whoosh.store import whoosh.qparser HAS_WHOOSH = True except ImportError: pass
y = [5, 0, 5] for X in ([[5, 0], [0, 5], [10, 10]],
from _dummy_thread import get_ident as _get_ident
range_ = T.tile(range_.dimshuffle(0, 'x'), (1, self.binary_target_dim)).flatten()
escaped_string_for_js = js_escaped_string(None) self.assertEquals(u"", escaped_string_for_js)
get_input_endpoint = show_input_endpoint
atomic_replace(os.path.join(dataset_conf_path,"installed.lst.2"), os.path.join(dataset_conf_path,"installed.lst"))
from salttesting import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
def render_to_template_mock(*args): pass
if not path or not os.path.isfile(path): return ret
export_course_to_xml(self.store, content_store, course_id, root_dir, 'test_export')
log = logging.getLogger(__name__)
('body_stats', Pipeline([ ('selector', ItemSelector(key='body')),
import salt.client import salt.loader import salt.runner import salt.utils import salt.utils.event import salt.utils.http import salt.utils.slack
self.dashboard_page.visit() self.assertTrue(self.dashboard_page.has_library(name=name, org=org, number=number))
return self.browser.get_cookie(cookie_name)
if hasattr(zmq, 'RECONNECT_IVL_MAX'): self.socket.setsockopt( zmq.RECONNECT_IVL_MAX, 5000 )
return sum(estimator.predict(X[:, features]) for estimator, features in zip(estimators, estimators_features))
ssh_gateway_private_key: /path/to/key.pem
world.wait_for_visible('.mce-window')
from __future__ import absolute_import
class ObjectiveSmallGradient: def __init__(self): self.it = -1
ret['result'] = True ret['comment'] = enabled_msg return ret
if 'salt' in kws: kws['salt'] = AliasedLoader(kws['salt'])
clf = svm.LinearSVC(penalty='l2', loss='hinge', dual=True, random_state=0) clf.fit(X, Y) assert_array_equal(clf.predict(T), true_result)
self.record_visit_unit( 'Lecture 1 - Doing the Right Thing', 'Discussion Prompt: Ethics of Torture', 'Discussion Prompt: Ethics of Torture' )
return _check_range_and_return('vertical shift', label, -5, 5)
self._cache = cache
self.exp_dirichlet_component_ = np.exp( _dirichlet_expectation_2d(self.components_)) self.n_batch_iter_ += 1 return
extra_fields = microsite.get_value( 'REGISTRATION_EXTRA_FIELDS', getattr(settings, 'REGISTRATION_EXTRA_FIELDS', {}) )
cov = ShrunkCovariance(shrinkage=0.) cov.fit(X) assert_array_almost_equal(empirical_covariance(X), cov.covariance_, 4)
return [x for x in _services if _service_is_sysv(x)]
self.wait_for_field(field_id) query = self.q(css='.u-field-{} .u-field-message-help'.format(field_id)) return query.text[0] if query.present else None
return ( MAX_COMMENT_DEPTH is not None and ( MAX_COMMENT_DEPTH < 0 or (parent and parent["depth"] >= MAX_COMMENT_DEPTH) ) )
self.certificates_section.add_certificate_exception(self.user_name, '')
def read(self): return MOCK_STATUS_OUTPUT def close(self): pass
course = modulestore().get_course(self.course.id) self.assertNotIn("notes", course.advanced_modules)
self.verify_expected_team_id(new_teams[2], 'a-really-long-team-n')
from django.core.urlresolvers import reverse from django.test import TestCase import mock from edx_oauth2_provider.tests.factories import AccessTokenFactory, ClientFactory
X = csc_matrix(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
with self.assertNumQueries(1): all_deadlines = VerificationDeadline.deadlines_for_courses(course_keys) self.assertEqual(all_deadlines, {})
ret = ava.difference(ena)
sequential = get_and_verify_publish_state('sequential', self.SEQUENTIAL, True) self.assertFalse(getattr(sequential, "is_draft", False))
y_test = check_array(y_test, dtype=np.float64, ensure_2d=False)
man_pages = [ ('index', 'getting_started', u'getting_started Documentation', [u'EdX Doc Team'], 1) ]
return Fragment(self.FRAG_CONTENT)
return JsonResponse(result, encoder=EdxJSONEncoder)
self.assertTrue(section.release_date) self.assertFalse(section.due_date) self.assertFalse(section.policy)
if self.database.connection.alive(): return True else: raise HeartbeatFailure("Can't connect to {}".format(self.database.name), 'mongo')
if self.has_answerpool(): return
_builtin_isinstance = isinstance
return mixed_setting["default"]["OPTIONS"]["stores"]
from salt.exceptions import CommandExecutionError import salt.utils
serializer = CreditProviderCallbackSerializer(data=data, provider=provider) serializer.is_valid(raise_exception=True)
self.assertEqual(two_toys.grade_cutoffs['C'], 0.5999)
v, W = v[::-1], W[:, ::-1] return v, W
try: import certifi HAS_CERTIFI = True except ImportError: HAS_CERTIFI = False
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
image_index[0] = min(image_index[0], len(row_indices))
super(BaseComponentEditorView, self).__init__(browser) self.locator = locator
self._configure_message_timeout(10000) DonationConfiguration(enabled=True).save()
ext_user = User.objects.get(email=self.ext_user.email) self.assertFalse(auth.user_has_role(ext_user, CourseStaffRole(self.course.id)))
mean = species.cov_train.mean(axis=0) std = species.cov_train.std(axis=0) train_cover_std = (species.cov_train - mean) / std
enable_course_home_improvements = BooleanField( default=False, verbose_name=_("Enable course home page improvements.") )
response = self.client.post(self.url, { "email": self.EMAIL, "password": self.PASSWORD, }) self.assertHttpOK(response)
self.assertEqual(len(new_stores), len(old_stores)) for new_store in new_stores: self.assertStoreValuesEqual(new_store, old_stores[new_store['NAME']])
import salt.client from salt.ext import six from salt.ext.six.moves import zip
response = self._load_dashboard() self.assertContains(response, "credit-error-msg")
msg = _('All ok!')
Vi = V[i, :, n_neighbors - s_i:] alpha_i = np.linalg.norm(Vi.sum(0)) / np.sqrt(s_i)
return False
def tile_columns(self, **kwargs): raise NotImplementedError('override me')
instance = self.run_cloud('-p gce-test {0}'.format(self.INSTANCE_NAME)) ret_str = '{0}:'.format(self.INSTANCE_NAME)
continue
module.system.render_template = Mock(return_value="<div>Test Template HTML</div>")
if self.opts.get('quiet', False): return
pass
return sig.replace(parameters=tuple(sig.parameters.values())[1:])
xml = self.render_to_xml(self.context) xpath = "//div[@class='indicator-container']/span[@class='status correct']" self.assert_has_xpath(xml, xpath, self.context)
try: return get_student_from_identifier(unique_student_identifier) except User.DoesNotExist: raise DashboardError( _("Could not find student matching identifier: {student_identifier}").format( student_identifier=unique_student_identifier ) )
sample_weight = compute_sample_weight({1: 2, 2: 1}, y) assert_array_almost_equal(sample_weight, [2., 2., 2., 1., 1., 1.])
myqueue: boto_sqs.present: - region: us-east-1 - profile: mysqsprofile
if enrollment.mode in CourseMode.VERIFIED_MODES:
y_pred, y_pred_std = gpr.predict(X2, return_std=True) y_pred = y_mean + y_pred y_pred_norm, y_pred_std_norm = gpr_norm.predict(X2, return_std=True)
self._enabled = False
import logging from uuid import uuid4 try: import couchdb HAS_COUCH = True except ImportError: HAS_COUCH = False
self.factory(penalty='foobar', l1_ratio=0.85)
assert_true(X_scaled is not X)
fh_ = os.open(lock_fn, open_flags)
self._export_import_course_round_trip( self.store, contentstore, source_course_key, self.export_dir )
pkg_404_comms = []
data.__grains__ = {} data.__salt__ = {} data.__opts__ = {}
return ACCESS_GRANTED
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
LOGGER.debug('Starting service on port {0}'.format(self.port))
check_entrance_exam_problems_for_rescoring(usage_key)
self._choose_algorithm(self.algorithm, self.metric)
role = MockRoles() role.user_id = user role.tenant_id = tenant return [role]
salt '*' win_path.add 'c:\\python27' 0
import salt.ext.six as six
import salt.utils
config.cancel()
signal_handler = getattr(self, "signal_handler", None) if signal_handler and bulk_ops_record.has_publish_item: signal_handler.send("pre_publish", course_key=course_id)
deadline = self.UPGRADE_DEADLINE if mode == "verified" else None form = self._admin_form(mode, upgrade_deadline=deadline)
safe_cookie_data = SafeCookieData.create( cookies[settings.SESSION_COOKIE_NAME].value, user_id, )
pref = UserOrgTag.objects.filter(user=user).order_by("-modified") return pref[0].modified.isoformat(' ') if len(pref) > 0 else self.DEFAULT_DATETIME_STR
self.skipTest('This test fails when using tests/runtests.py. salt-runtests will be available soon.')
abstract = True
self.courseware_page.start_proctored_exam()
assert_warns(RuntimeWarning, k_means, X, n_clusters=n_clusters, init=centers)
#'papersize': 'letterpaper',
from __future__ import absolute_import, print_function import os import yaml import tarfile import shutil import msgpack import datetime import hashlib import logging import pwd import grp import sys
XBlockDisableConfig.objects.create( disabled_create_blocks='', enabled=True )
from ._scipy_sparse_lsqr_backport import lsqr as sparse_lsqr
HAS_LIBS = False try: from pysphere import VIServer, MORTypes, VIException HAS_LIBS = True
import logging
CACHE_TOOLBOX_DEFAULT_TIMEOUT = getattr( settings, 'CACHE_TOOLBOX_DEFAULT_TIMEOUT', 60 * 60 * 24 * 3, )
from __future__ import absolute_import import copy import logging import os import re
u'resource_link_id': self.get_resource_link_id(), u'lis_result_sourcedid': self.get_lis_result_sourcedid(),
y_pred_rf = rf.predict_proba(X_test)[:, 1] fpr_rf, tpr_rf, _ = roc_curve(y_test, y_pred_rf)
from __future__ import absolute_import import logging
import salt.utils
PER_STUDENT_ANONYMIZED_DESCRIPTORS = set( class_ for (name, class_) in XModuleDescriptor.load_classes() if not issubclass(class_, PER_COURSE_ANONYMIZED_DESCRIPTORS) )
A = np.empty(n_nodes, dtype=object) inertia = list()
__func_alias__ = { 'list_': 'list' }
course = CourseFactory.create() create_account(self.USERNAME, self.PASSWORD, self.EMAIL)
self.store.publish(problem_location, self.user_id)
re.compile(regex) opts['file_ignore_regex'].append(regex)
if 'arg' in chunk and not isinstance(chunk['arg'], list): chunk['arg'] = [chunk['arg']]
centers = _init_centroids(X, n_clusters, init, random_state=random_state, x_squared_norms=x_squared_norms) if verbose: print("Initialization complete")
for student in students[:]: CertificateWhitelistFactory.create(user=student, course_id=self.course.id, whitelist=True)
from __future__ import absolute_import import json import hashlib import base64 import time from subprocess import Popen, PIPE
pass_kwargs = {} faults = ['mode', 'makedirs'] for key in kwargs: if key not in faults: pass_kwargs[key] = kwargs[key]
salt.log.setup.set_multiprocessing_logging_queue(self.log_queue)
bridge.__grains__ = {}
vim-enhanced: pkg.removed: - version: 7.4.160-1.el7 - ignore_epoch: True
for child in xblock.get_children():
self._assert_output(output, (self.user, self.courses[0].id, True))
import salt.ext.six as six
raise NotImplementedError()
return
rng = np.random.RandomState(0)
builtin_deploy_dir = os.path.join( os.path.dirname(__file__), 'deploy' )
CourseEnrollment.enroll(self.user, course_id or self.course.id)
mlp_first_part = MLP( layers=[ first_indep_layer ], input_space=VectorSpace(features_in_first_mlp), input_source=('features0') )
if not settings.FEATURES['ADVANCED_SECURITY']: return False min_days_pw_reset = settings.ADVANCED_SECURITY_CONFIG.get( 'MIN_DAYS_FOR_STUDENT_ACCOUNTS_PASSWORD_RESETS' ) return min_days_pw_reset
enrollment.activate() self.assertTrue(CourseEnrollment.is_enrolled(user, course_id)) self.assert_no_events_were_emitted()
__virtualname__ = 'service'
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.signal_handler.send("course_published", course_key=course_id.for_branch(None)) bulk_ops_record.has_publish_item = False
#html_title = None
if include_pat and not exclude_pat: ret = retchk_include elif exclude_pat and not include_pat: ret = retchk_exclude elif include_pat and exclude_pat: ret = retchk_include and retchk_exclude else: ret = True
lasso_lars = LassoLars(alpha=alpha, fit_intercept=False, verbose=verbose, normalize=False, precompute=gram, fit_path=False) lasso_lars.fit(dictionary.T, X.T, Xy=cov) new_code = lasso_lars.coef_
return npm_output
label_type_to_index = {'category': 0, 'instance': 1, 'elevation': 2, 'azimuth': 3, 'lighting': 4}
for covariance_type in ["full", "tied", "diag", "spherical"]: yield check_positive_definite_covars, covariance_type
manager = self.__manager self.__manager = None yield
val = Decimal("{0:.2f}".format(Decimal(self.percentage_discount / 100.00) * cost)) return cost - val
if args is None: args = [] else: args = _normalize_args(args)
response = MagicMock() response.status_code = status response.content = xml.format(major_code=major_code).encode('ascii', 'ignore') return response
dict(safe_zip(range(9), numpy.arange(9) * 5 + 30)),
self.send_delete(self.client, expected_status=404)
return self.q(css='.wrapper-alert.is-shown').is_present()
system_config.domain_join = None system_config.win_rm = None
for name in datasets: datasets[name] = datasets[name].T
history = HistoricalRecords()
self._validate_layer_names(layers) total = 0 for layer in self.layers: if layer.layer_name in layers: total += layer.get_input_space().get_total_dimension() return total
from salt.modules import win_system
return role
self._make_eligible() self._purchase_credit() request_uuid = self._initiate_request() self._set_request_status(request_uuid, "approved")
n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)
return ( self.q(css="#login-anchor").is_present() and self.q(css="#register-anchor").is_present() and self.current_form is not None )
CreditProvider.objects.create( provider_id="ASU", enable_integration=True, provider_url="https://credit.example.com/request", )
method = None
clf = svm.SVC(kernel='linear', probability=True, random_state=0) probas_pred = clf.fit(X[:half], y[:half]).predict_proba(X[half:])
xsupi = _cg(fhess_p, fgrad, maxiter=maxinner, tol=termcond)
with make_image_file() as image_file: response = self.client.post(self.url, {'file': image_file}, format='multipart') self.check_response(response, 204)
pass
pass
url(r'^api/certificates/', include('lms.djangoapps.certificates.apis.urls', namespace='certificates_api')),
_response = _request("PUT", options['url'] + options['db'])
est = TreeEstimator() y2 = y[:-1] assert_raises(ValueError, est.fit, X, y2)
parsed = urlparse.urlparse(constructed) params = urlparse.parse_qs(parsed.query)
residual_threshold = np.median(np.abs(y - np.median(y)))
available_version = salt.utils.alias_function(latest_version, 'available_version')
self.mean_ = np.mean(X, axis=0) X -= self.mean_ if self.n_components is None: n_components = X.shape[1] else: n_components = self.n_components
from __future__ import absolute_import import hashlib import logging import sys
mp = int(os.environ.get('JOBLIB_MULTIPROCESSING', 1)) or None if mp: try: import multiprocessing as mp import multiprocessing.pool except ImportError: mp = None
self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS + PayAndVerifyView.VERIFICATION_STEPS, PayAndVerifyView.MAKE_PAYMENT_STEP, )
__virtualname__ = 'gpg'
response = self._get_page("verify_student_verify_now", course.id) self.assertNotContains(response, "Verification is no longer available")
self.certificates_section.refresh()
for row in rows: yield [unicode(item).encode('utf-8') for item in row]
if isinstance(sources, str): sources = sources.split(',') for src in sources: _get_src(tree_base, src, saltenv)
if not args.show_plot: print(n, np.mean(time_per_iteration))
data_x = np.cast[config.floatX](data['data']) data_x = data_x[MNISTPlus.idx[which_set]]
self.problem_type_lookup = {} for problem_type in self.problem_types: block = self.make_block("problem", self.library, data=self._get_capa_problem_type_xml(*problem_type)) self.problem_type_lookup[block.location] = problem_type
from __future__ import absolute_import import logging import json
def __init__(self, *args): self.args = args
scalar_label = int(scalar_label) assert scalar_label >= 0 assert scalar_label < 9 return 30 + 5 * scalar_label
add_user_to_cohort(test_cohort, self.student.username) self.assert_student_in_group(None)
for name in SPARSE_TREES: yield check_min_weight_fraction_leaf, name, "multilabel", True
submission_dict = {'test': 'the_answer'} input_dict = {'1_2_1': json.dumps(submission_dict)} correct_map = problem.grade_answers(input_dict)
return ['--file', _git_config(cwd, user)]
new_user = authenticate(username=user.username, password=params['password']) login(request, new_user) request.session.set_expiry(0)
for field_name, field in cls.fields.items(): if field.scope == Scope.settings and xml_object.get(field_name) is not None: del xml_object.attrib[field_name]
X = [[1]] Y = [0]
transcripts_utils.generate_subs_from_source(youtube_subs, 'SRT', srt_filedata, self.course)
from __future__ import absolute_import import os import shutil
if self.level > exc_info_on_loglevel: return formatted_record
return self._get_element_text(".group-visibility-label")
CourseEnrollment.unenroll(user, course_id) self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assertFalse(CourseEnrollment.is_enrolled_by_partial(user, course_id_partial)) self.assert_no_events_were_emitted()
block_id = BlockKey.from_usage_key(parent_usage_key) if block_id not in new_structure['blocks']: raise ItemNotFoundError(parent_usage_key)
assert_array_equal(est.oob_improvement_[-10:] == 0.0, np.zeros(10, dtype=np.bool))
if 'expires' in cookie: cookie['expires'] = salt.ext.six.moves.http_cookiejar.http2time(cookie['expires'])
__virtualname__ = 'salt'
pass
old_center_buffer = np.zeros(0, np.double)
'ENABLE_CREDIT_ELIGIBILITY': ENABLE_CREDIT_ELIGIBILITY,
self.mock_module = MagicMock() self.mock_module.id = 1 self.dispatch = 'score_update'
self.log_ais_w = numpy.zeros(n_runs, dtype=config.floatX)
HAS_LIBS = False try: from servicenow_rest.api import Client
import salt.utils.itertools import salt.utils.systemd from salt.exceptions import CommandExecutionError from salt.ext import six
apache.__grains__ = {} apache.__salt__ = {} apache.__context__ = {}
v3.set_params(strip_accents='ascii', lowercase=False) assert_equal(v3.build_preprocessor(), strip_accents_ascii)
unique_username = 'user' + str(uuid.uuid4().hex)[:12] unique_email = unique_username + "@example.com" return unique_username, unique_email
import integration import salt.utils
return floatingip_id
for url in user_info["header_urls"].values(): self.assertIn("http://testserver/", url)
if thirdparty: scheme = "https" if settings.HTTPS == "on" else "http" url = '{scheme}://{host}{path}'.format( scheme=scheme, host=settings.SITE_NAME, path=url )
self.content_store.find(location)
local_cache.clean_old_jobs()
test_course_data = self.assert_created_course(number_suffix=uuid4().hex) self.assertTrue(are_permissions_roles_seeded(_get_course_id(self.store, test_course_data)))
self.assertTrue(self.run_function('timezone.set_time', ['3:14']))
return HttpResponseBadRequest(u'Could not parse request JSON.')
statuses = ["approved", "denied", "pending", "must_reverify"] reverifications = reverification_info(statuses)
to_json_val = super(StaticTab, self).to_json() to_json_val.update({'url_slug': self.url_slug}) return to_json_val
def __init__(self, location, content_type): self.location = location self.content_type = content_type
self.assertTrue(self.run_function('softwareupdate.reset_catalog')) self.assertEqual(self.run_function('softwareupdate.get_catalog'), 'Default')
if protocol == 6:
est = RandomForestClassifier() transformer = SelectFromModel(estimator=est) transformer.fit(data, y) assert_true(transformer.estimator is est)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
for idx in range(3): self._create_cert(self.courses[idx].id, self.user, CertificateStatuses.error)
if item.has_children: for child_loc in item.children: _internal_depth_first(child_loc, False)
retc["timestamp"] = time.time()
self.setup_groups_partitions(num_user_partitions=3)
__virtualname__ = 'pkg'
POLL_ALL_LOCATIONS = True
iris = datasets.load_iris() X = iris.data y = iris.target n_classes = np.unique(y).size
return item.location.version_agnostic().replace(branch=None)
for item in cls.__dict__: if item[0] == '_': continue
from scipy.sparse import csc_matrix
if not parent_location: return xblock
context.update(extra_context)
if (not directed) and isspmatrix_csc(csgraph): csgraph = csgraph.T
return self._xblock_map[usage_key]
key.__opts__ = {}
re.compile(r'^/api/course_structure/v[\d+]/courses/{}/$'.format(settings.COURSE_ID_PATTERN)),
data = { "email": self.EMAIL, "name": self.NAME, "username": self.USERNAME, "password": self.PASSWORD, }
ret = { 'data': None, 'dest': None, }
est = TreeEstimator(random_state=0) est.fit(X, y, sample_weight=sample_weight) assert_equal(est.tree_.max_depth, 1)
try: try: return super(PutAsCreateMixin, self).update(request, *args, **kwargs) except Http404: return super(PutAsCreateMixin, self).create(request, *args, **kwargs)
from __future__ import absolute_import
resp = self.client.get(course_wiki_page, follow=True) target_url, __ = resp.redirect_chain[-1] self.assertTrue(reverse('signin_user') in target_url)
raise SaltInvocationError('Command must be specified')
endpoint = get_xrds_url('login', request) if not endpoint: return default_render_failure(request, "Invalid OpenID request")
result_map = {} for key in key_list: index = self._get_index_of(key) val = get_codemirror_value(self, index) result_map[key] = val return result_map
self._remove_subtree(BlockKey.from_usage_key(location), new_structure['blocks'])
click_css(self, 'a.action-save')
response_providers = get_credit_provider_display_names(self.course_key) self.assertListEqual(self.PROVIDERS_LIST, response_providers)
response = requests.get(self.url, params={"test_param": 2}) self.assertEqual(response.status_code, 200)
path = os.path.expanduser(path)
r = int(np.sqrt(m)) c = m // r while r * c < m: c += 1 return (r, c)
fire('{0}/{1}'.format(tag, _m['type']), _m)
service = super(DescriptorSystem, self).service(block=block, service_name=service_name) if callable(service): return service(block) return service
destroy(vm_['name'])
else: return _(u"Donation for {platform_name}").format(platform_name=settings.PLATFORM_NAME)
if settings.FEATURES.get('EMBARGO'): urlpatterns += ( url(r'^embargo/', include('embargo.urls')), )
with check_mongo_calls(0): CourseOverview.get_from_id(course.id)
CREDIT_TASK_DEFAULT_RETRY_DELAY = 30
X = X_digits_multi[:10] y = y_digits_multi[:10]
import os
self._assert_course_verification_status(VERIFY_STATUS_MISSED_DEADLINE)
import salt.utils
pass
CourseModeFactory.create( course_id=self.course.id, mode_slug='professional', mode_display_name='professional', )
honor, _ = self.create_mode('honor', 'Honor') self.assertFalse(CourseMode.has_payment_options(self.course_key))
return render_to_string(template_name, dictionary, context, namespace="lms." + namespace)
log = logging.getLogger(__name__)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
input_msg = correctmap.get_msg('1_2_1') self.assertEqual(input_msg, "Test Message")
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
problem = self.build_problem(options=["hasnot", "hasn't", "has'nt"], correct_option="hasn't")
__virtualname__ = 'junos'
time.sleep(0.5)
ret.update(difference)
error_msg = _("An error occurred while deleting the score.") return HttpResponse(error_msg, status=500)
retcode = __salt__['cmd.retcode']('pw groupmod {0} -d {1}'.format( name, username), python_shell=False)
le = LabelEncoder() Y_multi = le.fit_transform(y)
if email_opt_in is not None: opt_in = email_opt_in == 'true' mock_update_email_opt_in.assert_called_once_with(self.user, self.course.org, opt_in) else: self.assertFalse(mock_update_email_opt_in.called)
from __future__ import absolute_import
self.assert_payload_contains_ids(load_video_event)
try:
from safe_lxml import defuse_xml_libs defuse_xml_libs()
self.courseware_page.visit() annotation_component_page = AnnotationComponentPage(self.browser) self.assertEqual( annotation_component_page.component_name, 'Test Annotation Module'.format() ) return annotation_component_page
self.submit_rescore_all_student_answers('instructor', problem_url_name)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
'openedx.core.djangoapps.user_api', 'django_openid_auth',
return etree.Element("optionresponse")
course.tabs.append(CourseTab.load("edxnotes")) modulestore().update_item(course, user_id)
results.append(benchmark(LinearSVC(loss='l2', penalty=penalty, dual=False, tol=1e-3)))
bt = BallTree(X) distances_nn, neighbors_nn = bt.query(X, k=k + 1) neighbors_nn = neighbors_nn[:, 1:]
return self.mlp.get_lr_scalers()
on_course_publish(self.course.id) requirements = get_credit_requirements(self.course.id, namespace="reverification") self.assertEqual(len(requirements), 0)
draft = 'draft-branch' published = 'published-branch' library = 'library'
y = train['y'][:, 0] - 1 assert y.shape == (5000,)
train_object.algorithm.termination_criterion.prop_decrease = 0.5 train_object.algorithm.termination_criterion.N = 1
super(Syndic, self).destroy() if hasattr(self, 'local'): del self.local
try: modulestore().get_course(course_key) except ItemNotFoundError: logging.error("Could not find course: %s", course_key) return HttpResponseBadRequest()
return urlparse(handler_url(self.block, 'handler', query=query_string)).query
url( r'^reverify/{course_id}/{usage_id}/$'.format( course_id=settings.COURSE_ID_PATTERN, usage_id=settings.USAGE_ID_PATTERN ), views.InCourseReverifyView.as_view(), name="verify_student_incourse_reverify" ),
import salt.utils.compat import salt.utils.odict as odict
Y = np.vstack((y_diabetes, y_diabetes)).T
X_3d = X[:, :, np.newaxis] clf = MockClassifier(allow_nd=True) scores = cval.cross_val_score(clf, X_3d, y)
model.fit(X, y) n_iter_cold_start = model.n_iter_ assert_equal(n_iter_cold_start, n_iter_reference)
import integration from salt.config import cloud_providers_config
self.check_discussion( tab_list=self.tabs_with_discussion, discussion_link_in_course="other_discussion_link", expected_discussion_link="other_discussion_link", expected_can_display_value=True, )
if valid_commands: if cmd not in valid_commands: channel.send_message('Using {0} is not allowed.'.format(cmd)) return
cmd = ['softwareupdate', '--set-catalog', url]
sparse_results = sparse_classifier.decision_function(X_test_sparse) dense_results = dense_classifier.decision_function(X_test) assert_array_equal(sparse_results, dense_results)
global Image if Image is None: raise RuntimeError("You are trying to use PIL-dependent functionality" " but don't have PIL installed.")
for vert in [vertical, private_vertical, public_vertical]: self.assertIn(vert.location, sequential.children)
from __future__ import absolute_import
for username in userlist: self.check_state(username, descriptor, 0, 1, 2)
return 1 - (0.5 ** (1 / n_subsamples) * (n_samples - n_subsamples + 1) + n_subsamples - 1) / n_samples
from __future__ import absolute_import import os import time import logging import traceback
matcher = Matcher.return_value matcher.confirm_top.return_value = True
ccx_ids_to_delete.append(get_override_for_ccx(ccx, block, 'due_id')) clear_ccx_field_info_from_ccx_map(ccx, block, 'due')
from salt.utils.filebuffer import BufferedReader, InvalidFileMode
config_spec = vim.vm.ConfigSpec()
self.assertTrue(linode._validate_name('abc'))
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
X = variation.copy().T X /= X.std(axis=0) edge_model.fit(X)
with self.assertRaises(CourseOverview.DoesNotExist): self.store.delete_course(course.id, ModuleStoreEnum.UserID.test) CourseOverview.get_from_id(course.id)
port: 8000 ssl_crt: /etc/pki/api/certs/server.crt ssl_key: /etc/pki/api/certs/server.key debug: False disable_ssl: False websockets: True
import salt.config import salt.loader from salt.modules import boto_s3_bucket
from salt.states import cloud import salt.utils.cloud
set_idxs = safe_zip(*minibatch)[0]
self.assertSetEqual( set(response.data['blocks'].iterkeys()), self.non_orphaned_block_usage_keys, )
'openedx.core.djangoapps.credit',
assert_raises(ValueError, scale, X_csr, with_mean=False, axis=1)
self.assert_user_setting_event_emitted( setting='profile_image_uploaded_at', old=TEST_UPLOAD_DT, new=None )
cert_asn1 = c.dump_certificate(c.FILETYPE_ASN1, cert)
data = {"time": eventtime} data.update(payload)
METRICS_WITHOUT_SAMPLE_WEIGHT = [ "cohen_kappa_score",
decision_only = OneVsRestClassifier(svm.SVC(probability=False)) decision_only.fit(X_train, Y_train) assert_raises(AttributeError, decision_only.predict_proba, X_test)
try: if os.fork() > 0: reinit_crypto() sys.exit(0) else: reinit_crypto() except OSError as ex: sys.exit(1)
self.assertEqual(len(mail.outbox), 1) self.assertEqual("Verification photos received", mail.outbox[0].subject)
import salt.ext.six as six
module_count_before = len(world.browser.find_by_css(module_css))
self.set_state_from_lcp()
self.assertProfessionalModeBypassed()
clf = GradientBoostingClassifier(n_estimators=10, random_state=1) clf.fit(iris.data, iris.target)
if purge: try: sid = getUserSid(name) win32profile.DeleteProfile(sid) except pywintypes.error as exc: (number, context, message) = exc
if len(names) == 1: return ret[names[0]] return ret
self._do_create_preference_test(True)
self.resid = np.array(v0, copy=True) info = 1
X_1d = X_1row.ravel() max_abs = np.abs(X_1d).max() assert_array_almost_equal(X_1d / max_abs, maxabs_scale(X_1d, copy=True))
history = PasswordHistory.objects.filter(user=user).order_by('-time_set')[:min_diff_passwords_required]
self.set_state_from_lcp()
if rank < n_negative: return data[rank] if rank - n_negative < n_zeros: return 0 return data[rank - n_zeros]
server = Server( name=vm_['name'], ram=vm_size['ram'], cores=vm_size['cores'], create_volumes=[volume] )
return MockBucket(bucket_name)
'ADDITIONAL_OPTIONS': { 'trashcan': { 'bucket': 'trash_fs' } }
for scaling in [2, 0.3]: assert_almost_equal( weighted_score, metric(y1, y2, sample_weight=sample_weight * scaling), err_msg="%s sample_weight is not invariant " "under scaling" % name)
NOTIFICATION_EMAIL_CSS = ENV_TOKENS.get('NOTIFICATION_EMAIL_CSS', NOTIFICATION_EMAIL_CSS) NOTIFICATION_EMAIL_EDX_LOGO = ENV_TOKENS.get('NOTIFICATION_EMAIL_EDX_LOGO', NOTIFICATION_EMAIL_EDX_LOGO)
if not isinstance(xmldict[name], list): xmldict[name] = [xmldict[name]] xmldict[name].append(to_dict(item))
kpca = KernelPCA(kernel="rbf", n_components=2, fit_inverse_transform=True, gamma=2.) X_kpca = kpca.fit_transform(X)
y = np.arange(10) % 3
self.enroll(self.course, True) self.enroll(self.test_course, True)
course_id, _ = strip_ccx(course_id) with self._modulestore.branch_setting(branch_setting, course_id): yield
if clean_current_key[0] != clean_ssh_key[0] or clean_current_key[1] != clean_ssh_key[1]: ssh_key_changed = True
self.assertEqual( CohortPartitionScheme.get_group_for_user( self.course_key, self.student, partition or self.user_partition, use_cached=False ), group )
from salt.utils.odict import OrderedDict import salt.ext.six as six
UserProfileFactory(user=self.user)
self.copy_from_server_to_local(remote_name, local_name) log.info(common_msg + "File %s has been locally cached to %s" % (remote_name, local_name))
if run_if_idle is not None: task_definition.Settings.RunOnlyIfIdle = run_if_idle
if is_prerequisite_courses_enabled(): fulfill_course_milestone(course_key, user)
return render_to_response(*args, **kwargs)
request.add_header('User-Agent', 'OpenAnything/1.0') html_content = opener.open(request).read() open(html_filename, 'wb').write(html_content)
elif (self.closed() and not is_survey_question) or needs_reset: return False else: return True
import salt.utils
import salt.loader from salt.template import compile_template from salt.ext.six import string_types from salt.roster import get_roster_file
import salt.utils import integration
T = column_or_1d(T) return 1. / (1. + np.exp(self.a_ * T + self.b_))
response = self.client.get_json(make_url_for_lib(key_str)) self.assertEqual(response.status_code, 404)
from __future__ import absolute_import import os import time import subprocess
start_index = start_index + len(start_delim)
X, y = iris.data, iris.target base = DecisionTreeClassifier()
_UA_PRODUCT = 'salt-cloud' _UA_VERSION = '0.2.0'
logger.info('computing mean') self.mean_ = numpy.asarray(X.mean(axis=0))[0, :]
if 'display_name' in param_dict: param_dict['course_name'] = param_dict['display_name']
for sub_grid in self.param_grid: if not sub_grid: if ind == 0: return {} else: ind -= 1 continue
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=rng)
probas_pred = probas_pred[:, 1]
import salt.ext.six as six from salt.ext.six.moves import range from salt.config import minion_config
return isinstance(v, str) and len(v.strip()) == 0
if form.is_valid(): form.save( from_email=theming_helpers.get_value('default_from_email', settings.DEFAULT_FROM_EMAIL), domain_override=orig_host, use_https=is_secure ) else: raise UserNotFound
context['script_code'] = all_code context['python_path'] = python_path context['extra_files'] = extra_files or None return context
self.video.wait_for_position('0:05') self.video.click_player_button('do_not_show_again')
self._install_indv_pkg(package, out_file)
self.minions = {}
footer_el = footer_nav.find_element_by_xpath('..') return 'hidden' not in footer_el.get_attribute('class').split()
curl -sSk https://localhost:8000 \\ -b ~/cookies.txt \\ -H 'Accept: application/x-yaml' \\ -d client=local \\ -d tgt='*' \\ -d fun=test.ping
continue
os.setsid()
self.assertEqual(self.video.speed, '2.0x')
op = optparse.OptionParser() op.add_option("--n-times", dest="n_times", default=5, type=int, help="Benchmark results are average over n_times experiments")
unicode_user = UserFactory(first_name=u'Ⓡⓞⓑⓞⓣ', last_name=u'ՇﻉรՇ') CourseEnrollmentFactory.create(user=unicode_user, course_id=self.course.id) self.students.append(unicode_user)
from __future__ import absolute_import import logging import os import shutil import tempfile from contextlib import contextmanager
destroy = salt.utils.alias_function(remove, 'destroy')
self.refresh_course()
if self.min_weight_fraction_leaf != 0. and sample_weight is not None: min_weight_leaf = (self.min_weight_fraction_leaf * np.sum(sample_weight)) else: min_weight_leaf = 0.
with self.assertNumQueries(0): self.assertEquals('a_value', self.kvs.get(user_state_key('a_field')))
os.remove(CONFIG)
ofh.write('')
return self.store.get_modulestore_type(self.course.id) == ModuleStoreEnum.Type.split
clf.intercept_scaling = 1 clf.fit(X, y) assert_almost_equal(clf.intercept_, 0, decimal=5)
source = utils.find_staff_lock_source(item) self.assertEqual(source.location, expected_source.location) self.assertTrue(source.visible_to_staff_only)
self.cost_from_X_data_specs()[0].validate(data) X, Y = data Y_hat = self.fprop(X) return self.cost(Y, Y_hat)
backend_name = forms.ChoiceField(choices=((name, name) for name in _PSA_OAUTH2_BACKENDS))
return ret
import salt.utils.sdb
resp = self.create_xblock(parent_usage_key=self.chapter_usage_key, category='sequential') self.seq_usage_key = self.response_usage_key(resp)
clf = AdaBoostRegressor(n_estimators=10, random_state=0) clf.fit(boston.data, boston.target, sample_weight=boston_weights)
assert_equal(grid_search_no_score.best_params_, grid_search.best_params_) assert_equal(grid_search.score(X, y), grid_search_no_score.score(X, y))
return self.reset_attempts_button.click()
assert_true(init_param.default is None) continue
import salt.returners import salt.utils.slack
from nose.plugins.skip import SkipTest import theano.sandbox.cuda as cuda_ndarray if cuda_ndarray.cuda_available == False: raise SkipTest('Optional package cuda disabled')
log.error('Lane Router Received message without share: {0}'.format(msg)) return
if not os.path.isdir(os.path.join(local_path, 'h5')): os.makedirs(os.path.join(local_path, 'h5'))
pass
if user_found_by_email_lookup and LoginFailures.is_feature_enabled(): LoginFailures.increment_lockout_counter(user_found_by_email_lookup)
return self.q(css=".button.button-reindex")[0]
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course.id): course.enrollment_domain = domain self.store.update_item(course, self.test_user_id)
node_position_model = manifold.LocallyLinearEmbedding( n_components=2, eigen_solver='dense', n_neighbors=6)
current_leaf = birch_instance.dummy_leaf_.next_leaf_ while current_leaf: subclusters = current_leaf.subclusters_ for sc in subclusters: assert_greater_equal(threshold, sc.radius) current_leaf = current_leaf.next_leaf_
field_name = models.CharField(max_length=64, db_index=True)
y_pred = clf.classes_.take(y_proba.argmax(axis=1), axis=0) assert_array_equal(y_pred, true_result)
notes = self.server.get_all_notes() self.assertGreater(len(notes), 0, "Notes are empty.") return notes
assert np.all((ps == 0) + (ps == 1)) assert np.all((hs == 0) + (hs == 1))
context.update(configuration.get('default', {}))
return (v_prime * Q ** 2).sum(axis=-1)
test_invalid_token("AAAAAAAAAAA=", "initialization_vector")
target_names = np.array(['a', 'b', 'c']) y = target_names[y_idx]
self.pdf.drawString( horizontal_padding_from_border, y_pos, _(u'Date: {date}').format(date=self.date) )
print public_key_str print private_key_str
if not physical_line.rstrip() and line_number == len(lines): return 0, "W391 blank line at end of file"
log.error('Volume {0} must be stopped before deletion'.format(target)) return False
url_path = StaticContent.serialize_asset_key_with_slash( course_key.make_asset_key('asset', placeholder_id).for_branch(None) ) return url_path.replace(placeholder_id, '')
super(Minion, self).__init__(opts) self.timeout = timeout self.safe = safe
self.client.logout() super(TestCourseListing, self).tearDown()
try: existing_user = User.objects.get(username=username) existing_user_profile = UserProfile.objects.get(user=existing_user) except ObjectDoesNotExist: raise UserNotFound() return existing_user, existing_user_profile
correct_map = CorrectMap() if 'correct_map' in state_dict: correct_map.set_dict(state_dict['correct_map'])
if schema_attr is None: cret = __salt__['postgres.schema_create'](dbname, name, owner=owner, **db_args) else: msg = 'Schema {0} already exists in database {1}' cret = None
return {}
try: search = client.saved_searches[name] except KeyError: pass return search
self.assertTrue(are_permissions_roles_seeded(second_course_id))
StudentModuleHistoryExtended.objects.filter(student_module=instance).all().delete()
#modindex_common_prefix = []
del subobj gc.collect()
self.assertTrue(all(isinstance(course, CourseSummary) for course in courses_list_by_staff))
'edxval',
self.X_topo_space = self.view_converter.topo_space assert not contains_nan(self.X)
rval_space = out_space
self.set_programs_api_configuration() self.dashboard_page.visit() self.assertFalse(self.dashboard_page.is_programs_tab_present()) self.assertFalse(self.dashboard_page.is_new_program_button_present())
preprocessor = GlobalContrastNormalization(subtract_mean=False, sqrt_bias=0.0, use_std=False)
import msgpack
return html.cssselect('.courses-processing li[data-course-key="{}"]'.format(unicode(course_key)))
import integration
self._prefixlen = self._prefix_from_prefix_string(addr[1])
self.courseware_page.visit() self.courseware_page.wait_for_page()
self.user_preference.value = "new value" self.user_preference.save() self.assert_user_setting_event_emitted(setting=self.TEST_KEY, old=self.TEST_VALUE, new="new value")
__virtualname__ = 'pip'
self.mock_tracker.reset_mock() try: views.server_track(request, str(sentinel.event_type), '{}')
eligible_certificates = EligibleCertificateManager()
if out != 'grains': log.error('Invalid outputter {0} specified, fall back to nested'.format(out)) return outputters['nested']
lib_page.a11y_audit.config.set_rules({ "ignore": [
return BlockUsageLocator(course_key, 'course', course_key.run)
inactive_children = [child for child in children if child not in active_children]
return self.submit_question_answer( self.problem_display_name, {'2_1': response1, '2_2': response2} )
continue
params['signature'] = signature if signature is not None else self._signature(params) return params
self.store.convert_to_draft(self.vertical_x1a, self.user_id) self.store.convert_to_draft(self.vertical_y1a, self.user_id)
clf = ForestClassifier(class_weight=[{-1: 0.5, 1: 1.}], random_state=0) assert_raises(ValueError, clf.fit, X, _y)
COURSE_ABOUT_VISIBILITY_PERMISSION = 'see_exists'
titles = ['Label Spreading 30% data', 'Label Spreading 50% data', 'Label Spreading 100% data', 'SVC with rbf kernel']
is_increasing = assert_no_warnings(check_increasing, x, y) assert_true(is_increasing)
url(r'^lang_pref/session_language', 'lang_pref.views.update_session_language', name='session_language'),
template = Template(filename=file_path, module_directory=self.module_directory, input_encoding='utf-8', output_encoding='utf-8', default_filters=['decode.utf8'], encoding_errors='replace', uri=template_name) return template, None
params = { 'enrollment_action': 'enroll', 'course_id': unicode(self.course.id) } self.client.post(reverse('change_enrollment'), params)
self.user.password = u'new password' with self.assertRaises(IntegrityError): self.user.save() self.assert_no_events_were_emitted()
super(Conv2DSpace, self)._validate_impl(is_numeric, batch)
is_small_course = False enrollment_count = CourseEnrollment.objects.num_enrolled_in(course_key) max_enrollment_for_buttons = settings.FEATURES.get("MAX_ENROLLMENT_INSTR_BUTTONS") if max_enrollment_for_buttons is not None: is_small_course = enrollment_count <= max_enrollment_for_buttons return is_small_course
self.xblock.location = Location("org", "import", "run", "category", "stubxblock")
self._W = W
check_xblock_names(active_groups + inactive_groups, container.xblocks[1:]) if verify_missing_groups_not_present: self.verify_add_missing_groups_button_not_present(container)
backend_name = forms.ChoiceField(choices=((name, name) for name in _PSA_SAML_BACKENDS))
with self.settings(PIPELINE_ENABLED=False): js_include = compressed_js('base_application') self.assertIn(u'/static/js/src/logger.js', js_include)
rets = {} for ret in ssh.run_iter(mine=True): rets.update(ret)
expected_grades = [self._format_user_grade(header_row, **grade) for grade in user_grades] self.verify_rows_in_csv(expected_grades)
primitive_command = -2
X = [[0], [1]] Y = [[-1], [2]]
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
all_folds[te2] = 1
import logging
from __future__ import absolute_import import logging
LASTCALL = int(time.mktime(datetime.datetime.now().timetuple()))
try: from StringIO import StringIO except: from io import StringIO
if 'Key not removed' in rval: return 'Key not removed' elif 'Key removed' in rval: return 'Key removed' else: return 'Key not present'
output = StringIO.StringIO() test_log_handler = logging.StreamHandler(output) test_log_handler.setLevel(logging.DEBUG) glog = git_import.log glog.addHandler(test_log_handler)
self.assertEqual(new_draft_version, new_published_version)
return
if (name not in (MULTIOUTPUT_METRICS + THRESHOLDED_MULTILABEL_METRICS + MULTILABELS_METRICS)): assert_raises(ValueError, metric, y1_row, y2_row)
data[:, 2] /= data[:, 5]
import salt.utils from salt.exceptions import CommandExecutionError
wua_session = win32com.client.Dispatch('Microsoft.Update.Session')
discrete_estimator_errors = bdt_discrete.estimator_errors_[:n_trees_discrete] real_estimator_errors = bdt_real.estimator_errors_[:n_trees_real] discrete_estimator_weights = bdt_discrete.estimator_weights_[:n_trees_discrete]
self.assertNotIn(REG_STR, resp.content)
return zlib.compress(pickle.dumps(data, pickle.HIGHEST_PROTOCOL))
import salt.utils from salt.exceptions import SaltCloudSystemExit
from pylearn2.utils import utlc
if not organizations_enabled(): return None from organizations import api as organizations_api return organizations_api.add_organization_course(organization_data=organization_data, course_key=course_id)
return cls.objects.get(course_key=course_key, enabled=True)
django_user_service = DjangoXBlockUserService(self.user, user_is_staff=False) anonymous_user_id = django_user_service.get_anonymous_user_id(username=self.user.username, course_id='edx/toy/2012_Fall') self.assertIsNone(anonymous_user_id)
if name in all_virt and name not in pkgs: candidate = '1' else: candidate = ''
before_activation = model.reconstruct_without_dec_acti(X, P)
grid_indices = [0, ] * 5
from __future__ import absolute_import import logging import collections import salt.exceptions
raise
y += 0.01 * np.random.normal((n_samples,))
dup_gr_nbrs = np.all(sample_mask, axis=1) sample_mask[:, 0][dup_gr_nbrs] = False
make_thumbnail('images/no_image.png', thumb_file, 200, 140)
send_admin_notification = Signal(providing_args=["user"])
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salt.modules import cpan cpan.__grains__ = {} cpan.__salt__ = {} cpan.__context__ = {}
return np.dot(X.ravel(), Y.ravel())
self.shape = tuple(shape) self.num_channels = num_channels if axes is None: axes = self.default_axes assert len(axes) == 4 self.axes = tuple(axes)
has_children = True field1 = String(default="something", scope=Scope.user_state) field2 = Integer(scope=Scope.user_state)
import integration import salt.utils
from __future__ import print_function from __future__ import absolute_import import os import sys import errno import logging import traceback from salt.ext.six import string_types
from __future__ import absolute_import import os import random import string
self.course_nav.go_to_vertical('Test Vertical-1') self.video.wait_for_video_player_render() self.video.speed = '0.50'
url = reverse('dashboard')
self.login_page.visit() self.assertScreenshot('#login .login-providers', 'login-providers-{}'.format(self.browser.name))
config = models.CourseTalkWidgetConfiguration.current() config.enabled = enabled config.platform_key = self.PLATFORM_KEY config.save()
self.event_collection.drop() self.start_time = datetime.now()
X, y = make_blobs(n_samples=80, centers=5, random_state=0) X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
self.reset_RNG()
query = self.q(css='.page-content-secondary > .team-user-membership-status') return query.text[0] if query.present else ''
X /= np.sqrt(np.sum(X ** 2, axis=0))
ridge.fit(X, y, sample_weight=np.ones(n_samples)) assert_greater(ridge.score(X, y), 0.9)
assert result == any(subbatch_results), ("composite batch had a " "mixture of numeric and " "symbolic subbatches. This " "should never happen.") return result
self.course_nav.q(css='input[id^=input_][id$=_2_1]').fill('A*x^2 + sqrt(y)')
current_line_number = 0 for line_break_index in self._line_start_indexes: if line_break_index <= index: current_line_number += 1 else: break return current_line_number
#pylint: disable=E0602
return [note for note in data if note.get(field_name) == value]
if not is_mongo_running(): msg = colorize('red', "Mongo is not running locally.") print msg sys.exit(1)
self.assert_no_xpath(xml, "//label[@class='choicegroup_incorrect']", self.context)
import salt.utils from salt.exceptions import ( CommandExecutionError, MinionError)
link = reverse('download_transcripts') resp = self.client.get(link, {'locator': 'BAD_LOCATOR'}) self.assertEqual(resp.status_code, 404)
if pkg[0].find("/") > 0: origin = pkg[0] pkg = [k for k, v in old.iteritems() if v['origin'] == origin][0]
css_class = 'start-date' title = ugettext_lazy('Course Starts') @property def date(self): return self.course.start
sample_weight = sample_weight * sample_mask.astype(np.float64)
rng = check_random_state(13) X = rng.rand(100, 2) sample_weight = np.ones(100) reg_y = rng.rand(100)
return StaticContent.compute_location(location.course_key, filename)
import integration import salt.utils
_change_access(course, user, level, 'revoke', send_email)
return not isinstance(obj, six.string_types) and isinstance(obj, Iterable)
dummy_v = T.tensor4() sqfilt = T.square(self._filters)
from salt.modules import pecl
print("Computing embedding") X_red = manifold.SpectralEmbedding(n_components=2).fit_transform(X) print("Done.")
FEATURES = { 'DISPLAY_DEBUG_INFO_TO_STAFF': True,
self.verify_staff_debug_present(True)
return ( _has_catalog_visibility(courselike, CATALOG_VISIBILITY_CATALOG_AND_ABOUT) or _has_catalog_visibility(courselike, CATALOG_VISIBILITY_ABOUT) or _has_staff_access_to_descriptor(user, courselike, courselike.id) )
pass
try:
etree.fromstring(etree.tostring(root), self.xmlparser)
from __future__ import absolute_import, print_function import fnmatch import logging import os
from __future__ import absolute_import
n_samples, n_features = iris.data.shape target = iris.target_names[iris.target] clf = LogisticRegression(random_state=0).fit(iris.data, target)
assert_equal(name, world.browser.find_by_css('.problem-header').text)
mode = 1 M_matvec = None Minv_matvec = None if Minv is not None: raise ValueError("Minv should not be " "specified with M = None.")
mongo_course1_id = self.import_and_populate_course()
lines[grid_dimension[0]] = '==> ' + lines[grid_dimension[0]]
session = requests.Session() response = session.get(STUDIO_BASE_URL + "/auto_auth?staff=true")
pythoncom.CoInitialize()
try: import pymongo version = pymongo.version version = '.'.join(version.split('.')[:2]) HAS_PYMONGO = True except ImportError: HAS_PYMONGO = False
is_from_cdn = StaticContentServer.is_cdn_request(request) newrelic.agent.add_custom_parameter('contentserver.from_cdn', is_from_cdn)
port = 4505 master_ip = None
'top_file': str,
__virtualname__ = 'service'
assert_equal(X.format, X_checked.format)
final_template, final_locals = process_template(template, _globals) _globals.update(final_locals)
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
self.assertEqual(cert.status, ExampleCertificate.STATUS_STARTED)
created_enrollments.append(data.create_course_enrollment( self.user.username, unicode(course.id), 'honor', True ))
f = ignore_warnings X = sp.lil_matrix((3, 1)) X[0, 0] = -1 X[2, 0] = 1
instructor_task = self._create_entry() succeeded, message = get_task_completion_info(instructor_task) self.assertFalse(succeeded) self.assertEquals(message, "No status information available")
X = X / 255
assert_raises(ValueError, cval.StratifiedShuffleSplit, y, 3, 0.2)
self._verify_response(200)
sign_active = np.empty(max_features, dtype=np.int8) drop = False
_do_scale_test(scaled) assert_almost_equal(scaled.sum(axis=0).mean(), scaled.sum(axis=1).mean(), decimal=1)
EXPECTED_SECTIONS = { 'Test Section': ['Test Subsection'], 'Test Section 2': ['Test Subsection 2', 'Test Subsection 3'] }
return self.q(css='.course-run>.value').text
user_country_from_ip = _country_code_from_ip(ip_address)
return _reduce_memmap_backed(a, m)
self.criteria = criteria[_REQUIRES_PATH] + \ criteria[_REQUIRES_STAT] + \ criteria[_REQUIRES_CONTENTS]
post = None
user = kwargs['instance'] user._changed_fields = get_changed_fields_dict(user, sender)
iterator = SequentialSubsetIterator(10, 3, 5)
return cls.read_data_file('{}.pub'.format(key_name))
pillar = salt.utils.gitfs.GitPillar(opts) pillar.init_remotes( opts_dict['git'], git_pillar.PER_REMOTE_OVERRIDES ) ret.append(pillar)
termination_key = '{0}BlockDeviceMapping.{1}.Ebs.DeleteOnTermination'.format(spot_prefix, dev_index) params[termination_key] = str(set_del_root_vol_on_destroy).lower()
return progress
return self.prior.log_p_z(z)
return "input_" + cls.answer_key(response_num, input_num)
linter = JavaScriptLinter() results = FileResults('') linter.check_javascript_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
instructor = UserFactory() allow_access(self.course, instructor, 'instructor') self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
if N.size(imshp)==2: inshp = (1,)+imshp
system.__salt__ = {}
return str(key)
bounds = np.tile([-np.inf, np.inf], (parameters.shape[0], 1)) bounds[-1][0] = 1e-12
enrollment = CourseEnrollment.get_enrollment(student, self.course.id) self.assertEqual(enrollment.is_active, False)
return (user, name, email, enabled)
self.q(css=self._bounded_selector(".check-cohort-inline-discussions")).first.click()
import integration from salt.fileserver import roots from salt import fileclient
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath, MockWraps from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch ensure_in_syspath('../')
with self.assertRaisesRegexp(CommandError, ".*ENABLE_TEAMS must be enabled.*"): call_command('reindex_course_team', self.team1.team_id)
ret['comment'] = ('File {0} is not present and is not set for ' 'creation').format(name) return ret
elif any(requirement['status'] in non_eligible_statuses for requirement in requirement_statuses): eligibility_status = "not_eligible"
assert_raises(ValueError, lshf.kneighbors, X[0])
'messages': messages,
_sentinel = object()
return self.default_modulestore
xT_A = self.lmul(self.transpose_left(x, True)) rval = self.transpose_right(xT_A, True) return rval
for field_name in ["display_name", "weight"]: self.problem_in_course.fields[field_name].delete_from(self.problem_in_course)
import integration import salt.utils
master_course_object, master_course_key, _, _ = get_valid_course(unicode(ccx_course_object.course_id))
response = self.the_input.handle_ajax("obviously_not_real", {}) self.assertEqual(response, {})
self.assertContains(response, 'course-container', 3) self._assert_responses(response, program_count)
classes = np.unique(y) classes = (classes[classes != -1]) self.classes_ = classes
selector = '{} .acid-block {} .pass'.format(self.context_selector, test_selector) return bool(self.q(css=selector).results)
CourseFixture('foobar_org', '1117', 'seed_forum', 'seed_foo').install() print 'Forums permissions/roles data has been seeded'
from salttesting.helpers import ensure_in_syspath, skip_if_binaries_missing import salt.utils ensure_in_syspath('../../')
httpretty.register_uri( httpretty.PUT, "http://localhost:4567/api/v1/threads/{}".format(thread_data["id"]), body=_get_thread_callback(thread_data) )
content = json.loads(response.content) self.assertEqual(response.status_code, 200) self.assertEqual(content['return_code'], 0)
return launchctl('disable', 'system/{0}'.format(label), runas=runas)
import logging import json
user_answer = flat_user_answer(user_answer)
X = np.arange(100)[:, np.newaxis] y = np.ones(100) y[:50] = 0.0
import os
if isinstance(config_data, dict): append_dict_profile_to_interface_list(config_data)
with open(self.TEST_INDEX_FILENAME, "w+") as index_file: json.dump({}, index_file) self.addCleanup(remove_file, self.TEST_INDEX_FILENAME)
key = OpenSSL.crypto.load_privatekey( OpenSSL.crypto.FILETYPE_PEM, fic2.read()) bits = key.bits()
import salt.utils.cloud as suc
ind -= total
wmi = types.ModuleType('wmi') sys.modules['wmi'] = wmi
target = win32file.GetLongPathName(target)
'service_status',
return self._compiled_cache[2:]
chapter_css = '.course-navigation .chapter .group-heading' return self.q(css=chapter_css).map(lambda el: el.text.strip()).results
mock_get.return_value = Mock(status_code=200, text=response_success, content=response_success) transcript_name = transcripts_utils.youtube_video_transcript_name(youtube_text_api) self.assertIsNone(transcript_name)
self.assertFalse(utils.is_bin_str(''))
#epub_exclude_files = []
with self._secondary_action_menu_open("#comment_{}".format(comment_id)): return self._is_element_visible("#comment_{} .action-delete".format(comment_id))
from salt.modules import systemd
if isinstance(machinestate, int): return MACHINE_STATES_ENUM.get(machinestate, UNKNOWN_MACHINE_STATE) elif isinstance(machinestate, str): return MACHINE_STATES.get(machinestate, UNKNOWN_MACHINE_STATE) else: return UNKNOWN_MACHINE_STATE
m_log_alphas = -np.log10(model.cv_alphas_)
module = CapaFactory.create(due=self.yesterday_str, force_save_button="true", done=True) self.assertFalse(module.should_show_save_button())
n_samples = 200
pkg_info = _get_package_info(key, saltenv=saltenv) if not pkg_info: continue for pkg_ver in pkg_info.keys(): if pkg_info[pkg_ver]['full_name'] == pkg_name: val = pkg_ver
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
self._source = source self._name = name
if settings.FEATURES.get('AUTOMATIC_AUTH_FOR_TESTING'): urlpatterns += ( url(r'^auto_auth$', 'student.views.auto_auth'), )
if netloc: return url
saltenv = env
import salt.utils.xmlutil as xml from salt._compat import ElementTree as ET
for block_type, block_id in self.selected_children(): yield self.runtime.get_block(self.location.course_key.make_usage_key(block_type, block_id))
return u''.join(filter(None, parts))
tasks = instructor_task.api.get_entrance_exam_instructor_task_history(course_id, entrance_exam_key, student)
from salt.pillar import Pillar import salt.utils import salt.utils.s3 as s3
self.client.logout() self._test_return_login()
queue_msg = u"<span>{0}</span>".format(_("Error running code."))
#html_use_smartypants = True
return name
self.assertTrue('Activate Course Enrollment' in response.content)
else: self.log_error( "Multiple response patterns matched '{0}'".format(xqueue_body_json), ) return
"public_fields": [ 'username', 'profile_image', 'account_privacy', ],
if 'pinned' not in thread: thread['pinned'] = False
if not children_only: ret, perms = __salt__['file.check_perms'](name, ret, user, group, dir_mode, follow_symlinks)
non_editable_fields = super(HtmlDescriptor, self).non_editable_metadata_fields non_editable_fields.append(HtmlDescriptor.use_latex_compiler) return non_editable_fields
X.indptr[m + 2:n] += nz_n - nz_m X.indptr[m + 1] = m_start + nz_n X.indptr[n] = n_stop - nz_m
return self.q(css='ul.listing-courses .course-item')
elif (name in CROSS_DECOMPOSITION or name in ['LinearSVC', 'LogisticRegression']): continue
selector = RFE(estimator, step=0.01) sel = selector.fit(X, y) assert_equal(sel.support_.sum(), n_features // 2)
Cov -= gamma_ * corr_eq_dir
queryset = (ExampleCertificate.objects).select_related('example_cert_set').filter(example_cert_set=self) for cert in queryset: yield cert
LTI_USER_EMAIL_DOMAIN = 'lti.example.com'
assert_raises( AssertionError, monitor.update_channels, ['train_objective'], start=2, end=1 )
url_path = ""
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
touch(name, makedirs=makedirs) retry_res, retry_msg = _check_file(name) if not retry_res: return _error(ret, check_msg)
sampler_updates = self.sampler.updates()
os.remove(layer0_filename) os.remove(layer1_filename)
import logging import re import os from salt.ext.six.moves import map
ret['hash_type'] = __opts__['hash_type']
import salt.utils import salt.output import salt.exceptions
pass
from __future__ import absolute_import
if salt.utils.is_proxy() and 'proxy' in __opts__: return True return (False, 'The marathon execution module cannot be loaded: this only works in proxy minions.')
if len(ret) == 1 and not pkg_glob: try: return next(six.itervalues(ret)) except StopIteration: return '' return ret
if transport in ('zeromq', 'tcp'): key_dirs = _check_minions_directories(pki_dir) else: key_dirs = _check_minions_directories_raetkey(pki_dir)
self.assert_cookie_data_equal(safe_cookie_data_1, safe_cookie_data_2)
self.client = Client() cache.clear()
self._do_create_preference_test(False)
sub_cmd = 'DROP ROLE "{0}"'.format(name) _psql_prepare_and_run( ['-c', sub_cmd], runas=runas, host=host, user=user, port=port, maintenance_db=maintenance_db, password=password)
return registration.activation_key
if not arglist and not parse_argv: arglist = [] (options, args) = parser.parse_args(arglist) options.reporter = None
return "<CourseFixture: org='{org}', number='{number}', run='{run}'>".format(**self._course_dict)
img[:, ring_w:ring_w + inner_h, ring_w:ring_w + inner_w] = inner_img
visible_fields = _visible_fields
assert_array_almost_equal( X_dense.astype(dtype), X2_dense, 15) assert_array_almost_equal( y_dense.astype(dtype), y2, 15)
__func_alias__ = { 'list_records': 'list', }
self.certificates_section.refresh()
kwargs['explanation_text'] = None return super(CodeResponseXMLFactory, self).build_xml(**kwargs)
skip_if_no_sklearn() mapping = {'dataset_iterator': 'DatasetShuffleSplit'} test_yaml = test_yaml_dataset_iterator % mapping trainer = yaml_parse.load(test_yaml) trainer.main_loop()
return view_course_access(depth=depth, access_action='load_mobile', check_for_milestones=True)
if names: snap_ids = _find_guids(res)
y = 0.5 * X.ravel() + rng.randn(n_samples, 1).ravel()
service = _get_service(name) label = service['plist']['Label']
data = process_sls_data(sls_templ, tmplctx)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
creds_map = {}
for item in ret: self.assertSaltTrueReturn(item)
DarkLangConfig( released_languages=('es, en'), changed_by=self.user, enabled=True ).save()
for _, record in self._active_records: if branch and branch not in record.index.get('versions', {}): continue
layer_to_state = model.make_layer_to_state(m) vis_sample = layer_to_state[model.visible_layer]
set_course_cohort_settings(course_key=self.course.id, is_cohorted=True) check_cohorted(True)
return CoursewareSearchIndexer.do_course_reindex(store, self.course.id)
value = value.replace('\\', '') if setval is None: return False return value in setval.split()
sampling_algorithm["custom-auto"] = \ lambda n_population, n_samples, random_state=None: \ sample_without_replacement(n_population, n_samples, method="auto", random_state=random_state)
template_pdf = "certificate-template-{id.org}-{id.course}.pdf".format(id=course_id)
self.assertEqual( res_json['message'], u'Please select one or more certificate statuses that require certificate regeneration.' )
drag(container, first_handle + 3, first_handle, 40) drag(container, first_handle + 2, first_handle, 40)
from openedx.core.djangoapps.credit.api import set_credit_requirement_status
('defunct-cart', 'defunct-cart'),
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
import tornado.ioloop
counts[to_reassign] = np.min(counts[~to_reassign])
instance._state.db = using or DEFAULT_DB_ALIAS
return False
correct_map = problem.grade_answers({'1_2_1': 'choice_0'}) self.assertAlmostEqual(correct_map.get_npoints('1_2_1'), 1)
from __future__ import absolute_import
wrapper_frag = Fragment(content=new_content) wrapper_frag.add_frag_resources(fragment) return wrapper_frag
iris = datasets.load_iris() X = iris.data y = iris.target X, y = X[y != 2], y[y != 2] n_samples, n_features = X.shape
__remove_null_logging_handler() __remove_queue_logging_handler()
if dE < tol * errors[-1]: if verbose == 1: print("") elif verbose: print("--- Convergence reached after %d iterations" % ii) break
if 'download_track' not in field_data and track is not None: field_data['download_track'] = True
self.assertTrue('success' in result and result['success'])
retain_settings = opts.get('retain_settings', False) result = current if retain_settings else {}
n, p = 10, 5 rng = np.random.RandomState(0)
while True: self.len_idx = np.mod(self.len_idx+1, len(self.len_unique)) curr_len = self.len_unique[self.len_idx] if self.len_curr_counts[curr_len] > 0: break
assert_allclose(f(x_mlp).flatten(), g(x).flatten(), rtol=1e-5, atol=5e-5)
module_system = get_test_system()
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
best = cherrypy.lib.cptools.accept([i for (i, _) in ct_out_map])
return True
self._create_course_unit(youtube_stub_config={'youtube_api_blocked': True}) self.assertFalse(self.video.is_button_shown('play'))
fl = mlp_composite.layers[0]
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
assert_raise_message(NotFittedError, "This GaussianMixture instance is not fitted " "yet. Call 'fit' with appropriate arguments " "before using this method.", g.predict, X)
est = TreeEstimator() assert_raises(NotFittedError, est.apply, T)
try: return self._client.get( self.user.username, kvs_key.block_scope_id, fields=[kvs_key.field_name], ).updated except self._client.DoesNotExist: return None
if new['code'] == 200:
E = (np.diag(A) + np.diag(R)) > 0 e[:, it % convergence_iter] = E K = np.sum(E, axis=0)
if inv: X_pred2 = kpca.inverse_transform(X_pred_transformed) assert_equal(X_pred2.shape, X_pred.shape)
if iface_type not in ['slave']: return __salt__['cmd.run']('ifup {0}'.format(iface)) return None
raise NotImplementedError()
resp = self.client.put(self._url()) self.assertEqual(resp.status_code, 405)
if self.check_running(): self.action_log_info('An instance is already running. Exiting') self.shutdown(1)
raise NotImplementedError()
_, sap, _ = randomized_svd(X, k, power_iteration_normalizer=normalizer, random_state=0)
true_path = os.path.realpath(file_path) if not os.path.exists(true_path): continue
assert expected_mutual_information(np.array([[70000]]), 70000) <= 1
'recon_randomize': bool,
path = salt.utils.url.unescape(path)
(['honor', 'verified', 'audit', 'credit'], 'credit'),
dashboard_tracking_code = models.TextField(default="", blank=True)
ret['result'] = None
'corsheaders.middleware.CorsMiddleware', 'cors_csrf.middleware.CorsCSRFMiddleware', 'cors_csrf.middleware.CsrfCrossDomainCookieMiddleware', 'django.middleware.csrf.CsrfViewMiddleware',
source_image = VirtualHardDisk(uri=vm_['image']) img_ref = None if win_installer: os_type = 'Windows' else: os_type = 'Linux'
from salttesting.helpers import ensure_in_syspath
from __future__ import absolute_import from unittest2 import skipIf from integration.cloud.helpers import random_name from salt.utils import virtualbox import json import logging import os import unittest import integration
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
classifier.fit(X_train, Y_train)
mask = str(mask).upper()
self.assertEqual(len(mail.outbox), 0)
import logging import os
resp = self.client.post( '/course/bad/course/key/entrance_exam', {}, http_accept='text/html' ) self.assertEqual(resp.status_code, 400)
wait_for_visible(css_selector, index=index) retry_on_exception(lambda: css_find(css_selector)[index].fill(text)) wait_for(lambda _: css_has_value(css_selector, text, index=index)) return True
'start': course_overview.start, 'start_display': course_overview.start_display, 'start_type': course_overview.start_type, 'end': course_overview.end,
request = Request.blank('/translation/uk') response = self.item.transcript(request=request, dispatch='translation/uk') self.assertEqual(response.status, '404 Not Found')
if certificate_data.get('course_title'): certificate_response["course_title"] = certificate_data['course_title']
from salt.states import virtualenv_mod
import salt.ext.six as six
if GeneratedCertificate.certificate_for_student(self.user, self.course_id) is not None: return False
assert_almost_equal(s_, np.dot(np.dot(mixing_, k_), m))
from __future__ import absolute_import import os
keep_lambda = np.ones(n_features, dtype=bool)
if value is not None: self.config[option.dest] = value
pass
from __future__ import absolute_import from random import randint from re import findall import pprint import logging import time import os.path import subprocess
from __future__ import absolute_import
win_autoruns.__salt__ = {} win_autoruns.__grains__ = {}
utf8_comment = b("It is true that\n\xc2\xbd\xc2\xb2 = \xc2\xbc") f = BytesIO() assert_raises(UnicodeDecodeError, dump_svmlight_file, X, y, f, comment=utf8_comment)
mock_threads.return_value = [], 1, 1
self.table_entry.state = state self.creator_admin.save_model(self.request, self.table_entry, None, True)
salt '*' win_update.download_updates categories="['Critical Updates']"
return np.memmap(filename, dtype=dtype, shape=shape, mode=mode, offset=offset, order=order)
EX_THIN_PYTHON_INVALID = 10 EX_THIN_DEPLOY = 11 EX_THIN_CHECKSUM = 12 EX_MOD_DEPLOY = 13 EX_SCP_NOT_FOUND = 14
return self.length
super(CourseRole, self).__init__(role, course_key.org, course_key)
from __future__ import unicode_literals
import tornado.stack_context
if not bool(role): log.info( '{0} \'{1}\' could not be found'.format(typ_.capitalize(), name) ) return False
self.wait_for_page()
module = CapaFactory.create(attempts=attempts - 2, max_attempts=attempts) self.assertEqual(module.check_button_name(), "Check")
module = CapaFactory.create(done=False)
import os import tempfile import hashlib import logging
with self.assert_logged_with_message( "SafeCookieData user at request '{}' does not match user at response: '{}'".format( user_at_request, user_at_response ), log_level=log_level, ): yield
self.assertEqual(expected_team['name'], team_card_name) self.assertEqual(expected_team['description'], team_card_description)
state.marked[state.marked == 2] = 0 return _step3
rng = np.random.RandomState(0) iris_weights = rng.randint(10, size=iris.target.shape) boston_weights = rng.randint(10, size=boston.target.shape)
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
try: return CourseTeamMembership.objects.get(user__username=username, team=team) except CourseTeamMembership.DoesNotExist: raise Http404
definition = LicenseMixin.parse_license_from_xml(definition, xml_object)
response, __ = self._get_update_response_and_expected_data(None, None) self.assertEqual(response.status_code, 200)
'ENABLE_FEEDBACK_SUBMISSION': False,
if when > data['_when']: data['_when'] = when data['_when_run'] = True
import logging
self.q(css='.dropdown-menu li a').nth(2).click()
self.cd['foo'] = 'global'
tasks = json.loads(response.content)['tasks'] self.assertEqual(len(tasks), 0)
import integration from salt.config import cloud_providers_config
UID_FIELD = "id"
y = np.array([3, 7, 5, 9, 8, 7, 10]) x = np.arange(len(y))
import salt.ext.six as six
log.info('Denying API request from user [%s].', self.user.id) self.status = self.DENIED self.save()
from salt.runners.winrepo import ( genrepo as _genrepo, update_git_repos as _update_git_repos, PER_REMOTE_OVERRIDES ) from salt.ext import six try: import msgpack except ImportError:
self.q(css='a[data-section=membership]').first.click() membership_section = MembershipPage(self.browser) membership_section.wait_for_page() return membership_section
css_include = compressed_css('style-main-v1', raw=True) self.assertIn(u'lms-main-v1.css?raw', css_include)
certificate_invalidation = CertificateInvalidation.objects.get(generated_certificate=generated_certificate)
return random.randint(1, 100000000)
log.info( 'Since parallel deployment is in use, ssh console output ' 'is disabled. All ssh output will be logged though' ) opts['display_ssh_output'] = False
if all_students and student: return HttpResponseBadRequest( "all_students and unique_student_identifier are mutually exclusive." ) if all_students and delete_module: return HttpResponseBadRequest( "all_students and delete_module are mutually exclusive." )
return {"course": unicode(normalized_structure_key), "org": normalized_structure_key.org}
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
STATICFILES_STORAGE = 'openedx.core.lib.django_require.staticstorage.OptimizedCachedRequireJsStorage'
value = json.loads(value)
_ = lambda text: text
self.service.set_credit_requirement_status( self.user.id, self.course.id, 'grade', 'grade' )
cert = GeneratedCertificate.eligible_certificates.get(user=user, course_id=course_key) self.assertEqual(cert.status, expected_status)
connectivity = grid_to_graph(*face.shape)
data_train = Avicenna(which_set='train', standardize=True) assert data_train.X.shape == (150205, 120)
safe_cookie_data_1 = SafeCookieData.create(session_id, user_id) self.assertTrue(safe_cookie_data_1.verify(user_id))
return getattr(settings, "MICROSITE_CONFIGURATION", False)
return {'name': name, 'changes': {}, 'result': True, 'comment': ''}
tab_css = self._tab_css(tab_name)
action_name = ugettext_noop('emailed') visit_fcn = perform_delegate_email_batches return run_main_task(entry_id, visit_fcn, action_name)
from salttesting import TestCase
youtube_str = '1.00:p2Q6BrNhdh8' youtube_str_hack = '1.0:p2Q6BrNhdh8' self.assertEqual( VideoDescriptor._parse_youtube(youtube_str), VideoDescriptor._parse_youtube(youtube_str_hack) )
instructor = UserFactory() allow_access(self.course, instructor, 'instructor') self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
template = self.system.render_template('lti_form.html', self.get_context()) return Response(template, content_type='text/html')
return models.AccessToken.objects.get(token=token_string)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
dec = clf.decision_function(T) res = (dec > 0).astype(np.int) + 1 assert_array_equal(res, true_result)
return { key: value for key, value in self.cleaned_data.items() if key in self.extended_profile_fields and value is not None }
ret['changes']['removed'] = removed_ids
XBLOCK_FIELD_DATA_WRAPPERS = ()
with mock.patch( 'openedx.core.djangoapps.content.course_overviews.models.CourseOverview.objects.get' ) as mock_getter:
git_mod.__salt__ = {} git_mod.__context__ = {} log = logging.getLogger(__name__)
self.assertFalse(self.store.has_changes(test_course)) self.assertFalse(self.store.has_changes(chapter))
if _ret['result'] is not True and _ret['comment']: add_comment(path, _ret['comment'])
return self.find_courses(data['user'], CourseStaffRole.ROLE, data.get('values'))
from __future__ import absolute_import
VS = VectorSpace(dim=27) VS_sparse = VectorSpace(dim=27, sparse=True)
ssh_gateway: gateway.example.com
items = store.get_items(course.id, settings={'group_access': {'$exists': True}}) return GroupConfiguration._get_content_groups_items_usage_info(course, items)
from salt.modules import cmdmod from salt.exceptions import CommandExecutionError, SaltInvocationError import salt.utils import salt.utils.odict
return v6_int_to_packed(self._ip)
with self.assertRaises(SurveyFormNotFound): SurveyForm.get(self.test_survey_name)
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
tab_ids[0], tab_ids[1] = tab_ids[1], tab_ids[0]
attempt2 = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt2.mark_ready() attempt2.submit() attempt2.approve() attempt2.save()
'dark_lang',
lc_block = self._add_library_content_block(course, self.lib_key) lc_block = self._refresh_children(lc_block) self.assertEqual(len(lc_block.children), 1)
unit['hidden'] = False for child in unit.get('children', ()): unhide(child)
from __future__ import absolute_import
est = DummyRegressor() est.fit(X_learn, y_learn) y_pred_learn = est.predict(X_learn) y_pred_test = est.predict(X_test)
cls.create_and_enroll_student( courses=[cls.test_course_2], username='student_enrolled_other_course_not_on_team' )
if isinstance(comps[1], string_types) and ' ' in comps[1]: comps[1] = re.sub(r'\s+', '\t', comps[1])
learning_rate = 1.
asset_md = store.find_asset_metadata(new_asset_loc) self.assertIsNone(asset_md)
instances = weakref.WeakValueDictionary()
import json
if layer_to_clamp is None: layer_to_clamp = OrderedDict()
return models.Client.objects.create( name=name, user=user, client_id=client_id, redirect_uri=redirect_uri, client_type=constants.CONFIDENTIAL, )
ssh_gateway_config['ssh_gateway_password'] = config.get_cloud_config_value( 'ssh_gateway_password', vm_, __opts__, default=None, search_global=False )
OverrideFieldData.provider_classes = None
from salt.states import portage_config
data['stdout'] = '' if is_json else data.get('stdout', '')[:idx] state['changes'] = data
return upload_file.size
if env_key in matches or fnmatch.filter(self.avail[env_key], inc_sls): resolved_envs = [env_key] else: resolved_envs = []
for tab in course.tabs: if tab.type == 'discussion' or tab.type == 'external_discussion': return tab return None
svm = SVC(kernel="precomputed") assert_raises(ValueError, cval.cross_val_score, svm, X, y)
memcacheoptions = (host, port)
y_wrong = y_[:-1] assert_raises(ValueError, clf.fit, X, y_wrong)
language_codes = self.translations() index = language_codes.index(old_lang_code) self.select_translation_language(new_lang_code, index) self.upload_asset(transcript_name, asset_type='transcript', index=index)
accuracy_scorer = make_scorer(accuracy_score) f1_scorer = make_scorer(f1_score)
ret['result'] = None ret['comment'] = "No changes"
col = np.argmax(self.marked[row] == 2) if self.marked[row, col] != 2: col = -1 return col
self.q(css='button.signatory-panel-close').click() self.mode = 'details' self.wait_for_signatory_detail_view()
_ret[minion] = _response['rows'][0]['value']
resource = {"id": self.resource_id, 'event': test_case['event']} self.check_event_response_by_key('handle_vote', resource, 'newVotes', test_case['new_votes'])
instructor_task.api.submit_cohort_students(request, course_key, filename)
margin = 1 / np.sqrt(np.sum(clf.coef_ ** 2)) yy_down = yy + a * margin yy_up = yy - a * margin
if not consumer: consumer = LtiConsumer.objects.get( consumer_key=consumer_key, )
request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.user.username) self.assertEqual(request['parameters']['user_mailing_address'], '')
salt '*' vsphere.get_host_datetime my.esxi.host root bad-password
from salttesting.helpers import ensure_in_syspath, expensiveTest from salttesting import skipIf
org_list = list(set(org_list) | set(course.org for course in courses))
result = self.get_team_detail(self.solar_team.team_id, 200, {'expand': 'user'}) self.verify_expanded_private_user(result['membership'][0]['user'])
W = rng.uniform(-self.irange, self.irange, (input_dim, self.dim))
import integration from salt import client from salt.exceptions import EauthAuthenticationError, SaltInvocationError, SaltClientError
boston = datasets.load_boston()
# Copyright (C) 2014 Floris Bruynooghe <flub@devork.be>
if syndic_min_wait is not None: yield syndic_min_wait chunk_ret = yield self.all_returns(pub_data['jid'], finish_futures=[job_not_running], minions_remaining=minions_remaining, )
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
COMPREHENSIVE_THEME_DIR = ""
self.assertEquals(preview.latex_preview('log10(3)'), r'\log_{10}(3)')
warnings.filterwarnings( 'ignore', 'With-statements now directly support multiple context managers', DeprecationWarning )
data[:, 5] = data[:, 4] / data[:, 5]
from instructor.views.api import save_registration_code
self._set_microsite_config_from_obj(microsite.site.domain, domain, microsite)
self.url = reverse( self.url_endpoint_name, kwargs={'username': self.user.username, 'preference_key': preference_key} )
is_author_mode = True
import msgpack import zmq import salt.ext.six as six
self.assert_grade(problem, json.dumps({0: 4}), "correct") self.assert_grade(problem, json.dumps({0: 5}), "incorrect")
certificates = course.certificates.get('certificates', []) if only_active: certificates = [certificate for certificate in certificates if certificate.get('is_active', False)] return certificates
self.registration.activate() self.assertTrue(self.user.is_active) self.assertFalse(mock_segment_identify.called)
if code in self.expected: return if self.print_filename and not self.file_errors: print(self.filename) self.file_errors += 1 self.total_errors += 1 return code
from __future__ import unicode_literals
self.secure()
self.n_observations = 0 self.minibatch_index = 0
'packages': ('openassessment',),
course_id = course.id if course else self.course.id for mode_slug in course_modes: CourseModeFactory.create( course_id=course_id, mode_slug=mode_slug, mode_display_name=mode_slug, )
try: content = contentstore().find(self.content_location) contentstore().delete(content.location) except NotFoundError: pass
print("\r[dl] %6.2f%% %s" % (min(totalsize,blocks*blocksize)*100.0/totalsize, hook_download_filename), end='') sys.stdout.flush()
self.check_index_and_outline(course_staff_client)
self._convert_to_draft(xblock.location, user_id, ignore_if_draft=True)
self.current_view = self.MAPPING[tab_name](self.browser) self.current_view.visit()
from salt.modules import pam
from __future__ import absolute_import import sys import types import subprocess
block_structure._collect_requested_xblock_fields()
published_only = 'rev-opt-published-only'
if not hasattr(self, 'W_lr_scale'): self.W_lr_scale = None
return self._is_on_tab(tab_name)
role = CourseStaffRole(self.course_key) role.add_users(self.student) self.assertGreater(len(role.users_with_role()), 0)
import salt.utils.jid
if (algorithm == 'kd_tree' and metric not in neighbors.KDTree.valid_metrics): assert_raises(ValueError, neighbors.NearestNeighbors, algorithm=algorithm, metric=metric, metric_params=metric_params) continue
comps = fun.split('.') if len(comps) < 2: __context__['retcode'] = 1 return 'Invalid function passed'
if kwargs: for key, value in kwargs.iteritems(): setattr(state_object, key, value)
SREQTestCase.thread_running.clear() SREQTestCase.echo_server.join()
from __future__ import absolute_import import logging
queuestate = {'key': queuekey, 'time': qtime, }
module_state_key = LocationKeyField(max_length=255, db_index=True, db_column='module_id') student = models.ForeignKey(User, db_index=True)
errstring = "Error: too few arguments" with self.assertRaisesRegexp(CommandError, errstring): call_command('export_olx')
kvs = MongoKeyValueStore( definition_data, None, [], metadata, ) field_data = KvsFieldData(kvs) return field_data
with mock.patch.dict('django.conf.settings.FEATURES', {'ENABLE_MKTG_SITE': True}): result = get_email_params(self.course, True)
django_settings.SOCIAL_AUTH_RAISE_EXCEPTIONS = False
EmptyPromise( lambda: self.q(css=enrollment_button).present, "Enrollment button" ).fulfill() self.q(css=enrollment_button).click()
self.youtube_configuration['time_to_response'] = 0.4 self.metadata = self.metadata_for_mode('youtube_html5')
assert_almost_equal(metric(y1_1d, y2_list), measure, err_msg="%s is not representation invariant " "with mix np-array-1d and list" % name)
FOOTER_OPENEDX_URL = "http://open.edx.org"
return network
window = tensor.alloc(0.0, batch, channel, res_r, res_c, pr, pc) window.name = 'unravlled_winodows_' + name
if chapter.hide_from_toc or local_hide_from_toc: continue
from __future__ import absolute_import
if kwargs.get('verbose', False): for c_id in ret: ret[c_id]['Info'] = inspect_container(c_id)
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, with_system_user, skip_if_binaries_missing ) ensure_in_syspath('../../')
if not _wipe(dev): return False
'js/vendor/requirejs/require.js', 'js/RequireJS-namespace-undefine.js', 'js/vendor/URI.min.js', 'common/js/vendor/backbone.js', 'edx-pattern-library/js/modernizr-custom.js',
#epub_cover = ()
user = StaffFactory.create(course_key=course.id) self.assertTrue(access._has_access_course(user, 'enroll', course))
super(MongoModuleStore, self).create_course( org, course, run, user_id, runtime=xblock.runtime, **kwargs )
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course_key))
self.visbiasY = sharedX( numpy.zeros(nvisy), name='vbY', borrow=True )
descriptor.bind_for_student = partial(xblock_class.bind_for_student, descriptor)
first_request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO["username"])
unit = self.go_to_unit_page() component = unit.xblocks[1] self.modify_display_name_and_verify(component)
from __future__ import unicode_literals
verify_name(self.seq_usage_key, self.chapter_usage_key, "Duplicate of sequential")
urlpatterns += ( url(r'^survey/', include('survey.urls')), )
resp = self.client.put(self.exam_url) self.assertEqual(resp.status_code, 405)
if properties: optlist = [] for prop in properties.keys():
storage = get_profile_image_storage() for name in profile_image_names.values(): storage.delete(name)
from __future__ import absolute_import
changing_email = False if "email" in update: changing_email = True new_email = update["email"] del update["email"]
if dot_models.Application.objects.filter(client_id=self._get_client_id(request)).exists(): return self.dot_adapter else: return self.dop_adapter
problems = { "checkbox_two_choices": checkbox_two_choices, "checkbox_2_choices_2_inputs": checkbox_two_choices_two_inputs }
add_discussion(container, group_a_menu) container.duplicate(self.group_a_item_1_action_index)
from salt.pillar import mysql
self.assertFalse(SignatureValidator(self.lti_consumer).check_client_key(key))
return self.q(css="button[data-url='accomplishments']").visible
return HttpResponse()
save_button_css = '%s %s' % (self.discussion_form_selectors[key], '.action-save') self.q(css=self._bounded_selector(save_button_css)).first.click()
self.assertOrphanCount(course.id, 0) self.assertOrphanCount(published_branch, 1) self.assertIn(orphan, self.store.get_items(published_branch))
self.assert_enrollment_activation(False, selected_mode)
ret = instance.copy()
import salt.config import salt.loader from salt.modules import boto_cloudtrail
import salt.utils.jid import salt.returners
from __future__ import absolute_import import logging import salt.utils.vault
pass
self.save_and_verify_discussion_topics(key=self.inline_key)
if http_event_collector_debug: log.debug('auto flushing')
from __future__ import absolute_import
if org_target: if record.index['org'] != org_target: continue
raise NotImplementedError(_("Problem's definition does not support rescoring."))
if existing['code'] == 200:
new_group = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, user_partition) self.assertEqual(old_group.id, new_group.id)
LogoutPage(self.browser).visit() self._login_as_a_verified_user() self.courseware_page.visit()
if pkgs is None: version_num = kwargs.get('version') variant_spec = kwargs.get('variant') spec = None
asset_key = asset_metadata_list[0].asset_id course_key = asset_key.course_key
for key in self.colors: self.colors[key] = ''
self.assertEqual(len(v_data['course_modes']), 2)
salt '*' vsphere.get_service_running my.esxi.host root bad-password 'ssh'
#end class
X, y = make_classification(n_samples=200, n_features=20, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, flip_y=0.0, class_sep=10, shuffle=False, random_state=0)
return self._cohort_name( self._get_cohort_options().filter(lambda el: el.is_selected()).first.text[0] )
active_attempts = cls.objects.filter(user=user, status='ready').order_by('-created_at') if active_attempts: return active_attempts[0] else: return None
handouts_location = self.course.id.make_usage_key('course_info', 'handouts') course_handouts_url = reverse_usage_url('xblock_handler', handouts_location)
pass
scenario.steps = [] return
try: import salt.utils.etcd_util HAS_LIBS = True except ImportError: HAS_LIBS = False
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'azure', vm_['profile'], vm_=vm_) is False: return False
for argument in args: ret['args'].append(str(type(argument)))
log.error( 'Failed to read the virtual function for ' '{0}: {1}'.format( self.tag, module_name ), exc_info=True ) return (False, module_name, error_reason)
source = find_staff_lock_source(xblock) return _xblock_type_and_display_name(source) if source else None
#html_static_path.append('source/_static')
salt.utils.reinit_crypto() os.close(stdout_child_fd) os.close(stderr_child_fd)
with remove_ccx(location) as (location, restore): return restore( self._modulestore.unpublish(location, user_id, **kwargs) )
full_name = UserProfile.objects.get(user=user).name
return self.q(css=self.PAGINATION_HEADER_TEXT_CSS).text[0]
exc_info_on_loglevel=logging.DEBUG
ground_truth = np.zeros((n_features, n_targets)) ground_truth[:n_informative, :] = 100 * generator.rand(n_informative, n_targets)
X = random_state.rand(n_samples * n_components) X = X.reshape((n_samples, n_components))
params = {'bandwidth': np.logspace(-1, 1, 20)} grid = GridSearchCV(KernelDensity(), params) grid.fit(data)
choices = self.xml.xpath('choicegroup/choice') return [choice.get("name") for choice in choices]
wrappers=wrappers, wrappers_asides=wrappers_asides, error_descriptor_class=ErrorDescriptor, get_user_role=lambda: get_user_role(request.user, course_id),
return []
assert_raises(ValueError, _inverse_binarize_thresholding, y=csr_matrix([[1, 2], [2, 1]]), output_type="foo", classes=[1, 2], threshold=0)
input_dict = {'1_2_1': 'California'} correct_map = problem.grade_answers(input_dict) self.assertEquals(correct_map.get_hint('1_2_1'), "")
T = sp.lil_matrix((3, 1)) T[0, 0] = 2 T[1, 0] = 3 T[2, 0] = 4
from salt.states import mac_xattr as xattr
gp.fit(X, y)
new_file.insert(0, marker_end + '\n') new_file.insert(0, content) new_file.insert(0, marker_start + '\n') done = True
mid = int(numpy.floor(kernel_shape / 2.)) centered_X = X - convout[:, mid:-mid, mid:-mid, :]
TRACKING_IGNORE_URL_PATTERNS = [r'^/event', r'^/login', r'^/heartbeat', r'^/segmentio/event', r'^/performance']
from __future__ import absolute_import
from __future__ import absolute_import
pathname = name_to_pathname(self.url_name) filepath = u'{category}/{pathname}.html'.format( category=self.category, pathname=pathname )
response = organizations_helpers.get_organization_by_short_name('non_existing') self.assertIsNone(response)
assert_equal(type(X_transformed), np.ndarray)
component = self.store.get_item(xblock.location) component.display_name = 'Changed Display Name'
libv = LibVersion() libv.print_versions() libv.print_exp_env_info(args.print_theano)
old_tab = CourseTabList.get_tab_by_type(self.course.tabs, tab_type)
return self.q(css='.breadcrumb').present
img = circle1 + circle2 mask = img.astype(bool) img = img.astype(float)
X = x[:, np.newaxis] X_plot = x_plot[:, np.newaxis]
serializer_context = { 'request': request, 'block_structure': blocks, 'requested_fields': requested_fields or [], }
pass
pstate['sg2'] += param_val ** 2 dx_t = - (scale * learning_rate / np.sqrt(pstate['sg2']) * param_val) rval += [param_val + dx_t]
return { key: value[0] if len(value) == 1 else value for key, value in urlparse.parse_qs(query).items() }
self.check_val('0', False)
if created: manual_cohorts = CourseUserGroup.objects.filter( course_id=course.id, group_type=CourseUserGroup.COHORT ).exclude(name__in=course.auto_cohort_groups) for cohort in manual_cohorts: CourseCohort.create(course_user_group=cohort)
self.run_function('beacons.save')
from notification_prefs.views import enable_notifications
coef_grads[layer] = safe_sparse_dot(activations[layer].T, deltas[layer]) coef_grads[layer] += (self.alpha * self.coefs_[layer]) coef_grads[layer] /= n_samples intercept_grads[layer] = np.mean(deltas[layer], 0) return coef_grads, intercept_grads
if enc in ['e', 'ecdsa']: return 'ecdsa-sha2-nistp256' return enc
np.testing.assert_array_equal(grad_x.data[grad_x.data > 0], grad_y.data[grad_y.data > 0])
from theano.tensor.nnet.conv import conv2d, ConvOp
if dependencies[0] != "jquery": dependencies.insert(0, "jquery")
from __future__ import absolute_import, print_function
CreditProvider.objects.create( provider_id=self.PROVIDER_ID, display_name=self.PROVIDER_NAME, provider_status_url=self.PROVIDER_STATUS_URL, enable_integration=True, )
CELERY_ALWAYS_EAGER = True
self.course.start = _LAST_WEEK self.assertTrue(self.course.has_started()) self.course.start = _NEXT_WEEK self.assertFalse(self.course.has_started())
assert_raises(ValueError, classifier.decision_function, X.T) assert_raises(ValueError, classifier.decision_function, X.T)
language = language or settings.LANGUAGE_CODE with override_language(language): return get_subject_and_message(subject_template, message_template, param_dict)
import json import logging
width = self.ext.config['youtube_width'][0] height = self.ext.config['youtube_height'][0] return flash_object(url, width, height)
return "http://fake-edx-s3.edx.org/"
if not preview_lang: return
shim_file += "c"
response = api.add_enrollment(username, unicode(course_id), mode=mode, is_active=is_active)
"Test for Annotation Xmodule functional logic."
from salt.states import win_dism as dism
from __future__ import absolute_import
import fnmatch import logging
from salttesting import TestCase
self.q(css='a[data-section=special_exams]').first.click() timed_exam_section = SpecialExamsPage(self.browser) timed_exam_section.wait_for_page() return timed_exam_section
kwargs = {} if cls.grading_policy is not None: kwargs['grading_policy'] = cls.grading_policy cls.course = CourseFactory.create(**kwargs)
if existing['code'] == 200:
if request.method == 'GET': return _get_entrance_exam(request, course_key)
if severities is None: severity_match = True else: if update.MsrcSeverity in severities: severity_match = True
needed_holds.append(hold)
with self.assertRaises(IOError): CourseOverview.load_from_module_store(self.store.make_course_key('Non', 'Existent', 'Course'))
neighbors_nn = np.argsort(distances, axis=1)[:, :k]
known_vendors = ['nvidia', 'amd', 'ati', 'intel'] gpu_classes = ('vga compatible controller', '3d controller')
([], '', CourseMode.DEFAULT_MODE_SLUG),
SORTED_LEVEL_NAMES = [ l[0] for l in sorted(six.iteritems(LOG_LEVELS), key=lambda x: x[1]) ]
pre_matches = __salt__['git.config_get_regexp']( cwd=repo, key=key, value_regex=value_regex, user=user, ignore_retcode=True, **{'global': global_} )
raise ValueError("Cannot use a custom kernel function. " "Precompute the kernel matrix instead.")
return np.dot(np.dot(u * (1. / np.sqrt(s)), u.T), W)
return submit_rescore_problem_for_student(self.create_task_request(instructor), InstructorTaskModuleTestCase.problem_location(problem_url_name), student)
from __future__ import absolute_import import logging
uid = uinfo['uid']
CertificateGenerationConfiguration.objects.create(enabled=True)
while len(acceptable) > 1: if acceptable[0] == wait_for: break else: acceptable.pop(0)
for child, parents in enumerate(self.get_parents_map(children_map)): self.assertSetEqual(set(block_structure.get_parents(child)), set(parents))
users_state_after_post = self._post_words(['word1', 'word2'])
BROKER_POOL_LIMIT = 0 BROKER_CONNECTION_TIMEOUT = 1
if enrollment_mode is None and is_active is None: return True
return self.q(css='.program-card').present
course_fixture.add_children(*[ self._build_fixture(self.UnitState(*state)) for state in itertools.product(*features) ])
keys, values_lists = zip(*sorted(sub_grid.items())[::-1]) sizes = [len(v_list) for v_list in values_lists] total = np.product(sizes)
devmap.__grains__ = {} devmap.__salt__ = {} devmap.__context__ = {} devmap.__opts__ = {}
test = SVHN('test', path=local_path) check_dtype(test) test.apply_preprocessor(pipeline, can_fit=False)
graph_matrix = self._build_graph()
xblock_info.update(_get_gating_info(course, xblock))
if settings.COMPREHENSIVE_THEME_DIR: enable_comprehensive_theme(settings.COMPREHENSIVE_THEME_DIR)
return [Attribute('size', '20'), Attribute('label', ''), ]
bt1_pyfunc = BallTree(X, metric=dist_func, leaf_size=1, p=2)
self.cache.set(key, compressed_pickled_data, None)
import salt.ext.six as six import json
clf = DecisionTreeClassifier().fit(X, y)
oid = self.repo.lookup_reference(remote_ref).get_object().id if local_ref not in refs: self.repo.create_reference(local_ref, oid)
X_train, X_test = X[:n_samples_train], X[n_samples_train:] y_train, y_test = y[:n_samples_train], y[n_samples_train:]
XBLOCK_MIXINS = (LmsBlockMixin, InheritanceMixin, XModuleMixin, EditInfoMixin)
import numpy from theano import tensor
import hashlib import re import salt.utils.dictupdate as dictupdate from salt.exceptions import SaltInvocationError import salt.ext.six as six
max_row = np.sqrt(n_plots) max_row = np.round(max_row) max_row = int(max_row)
output = tensor.dot(patch_stack, kerns.flatten(2).T).reshape((B, OR, OC, K))
params = [('course_id', self.course_id)] response = self.client.get(self.url, params)
if not has_studio_write_access(user, course_key): raise PermissionDenied() course_module = modulestore().get_course(course_key, depth=depth) return course_module
if isinstance(estimator, DBSCAN): return if "random_state" in estimator.get_params(): estimator.set_params(random_state=random_state)
import salt.config import salt.loader from salt.modules import boto_vpc from salt.exceptions import SaltInvocationError, CommandExecutionError from salt.modules.boto_vpc import _maybe_set_name_tag, _maybe_set_tags from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
ipset.__salt__ = {}
if newline: output += '\n'
from __future__ import absolute_import import unittest import logging
self.user = random.getrandbits(32) self.new_course = modulestore().create_course( 'org', 'course', 'test_run', self.user, BRANCH_NAME_DRAFT, )
self.clear() self.get_collected()
self.notes_page.wait_for_ajax() note = self.notes_page.notes[0] assert_page(note, self.raw_note_list[4]['usage_id'], "Recent Activity")
phase_data = self.run_data.setdefault(test_phase, {}) amount_data = phase_data.setdefault(amount_md, {}) __ = amount_data.setdefault(modulestores, time_taken)
self._active_count += 1
for page in self.pages: page.visit()
from __future__ import unicode_literals
proc.sendline(phrase)
while listening_to_events:
for sec_index, sec_title in enumerate(section_titles):
if youtube_id: return 'https://www.youtube.com/watch?v={0}'.format(youtube_id) else: return ''
self._submit_photos(face_image=self.IMAGE_DATA + "1112") reverification_data = self._get_post_data()
self._necessary_X_, self._necessary_y_ = X, y
import os import sys import time
import salt.utils
X = rng.random_sample((10, 3))
rng = np.random.RandomState(0) n_samples, n_features, n_components = 500, 2, 2
if wua_download_list.Count == 0: log.debug('No updates to download') ret['Success'] = False ret['Message'] = 'No updates to download' return ret
self.client.logout()
DEBUG_TOOLBAR_MONGO_STACKTRACES = False
params, response = _validate_post_params(request.POST) if response is not None: return response
from __future__ import absolute_import
from __future__ import absolute_import import os import random import string
self.assertTrue(self.store.has_changes(parent))
from salt.exceptions import CommandExecutionError, SaltInvocationError
ret['comment'] = 'Event module not available. Beacon disable job failed.'
self.assertFalse(zendesk_mock_class.mock_calls) self.assertFalse(datadog_mock.mock_calls)
with os.fdopen(fh_, 'w'): pass log.trace('Write lock %s obtained', lock_fn) obtained_lock = True yield break
if support_sample_weight: if sample_weight is None: curr_sample_weight = np.ones((n_samples,)) else: curr_sample_weight = sample_weight.copy()
self.assertEquals(len(audit_log_calls), 0)
suff_stats = np.zeros(self.components_.shape) for sstats in sstats_list: suff_stats += sstats suff_stats *= self.exp_dirichlet_component_
sampling_algorithm["python-core-sample"] = \ lambda n_population, n_sample: \ random.sample(xrange(n_population), n_sample)
eps = 0.8 min_samples = 10 metric = 'euclidean' core_samples, labels = dbscan(X, metric=metric, eps=eps, min_samples=min_samples)
self.run_function('desktop.set_output_volume', [current_vol])
self.config = dict()
list_maintenance_windows = salt.utils.alias_function(list_windows, 'list_maintenance_windows')
return _check_range_and_return('lighting', label, -1, 5, -1)
overview_v10.version = 9 overview_v10.save()
latest_version_config = cls.objects.filter(platform=platform, enabled=True).first() if latest_version_config: return latest_version_config.version
try: self.destroy()
from salt.modules import cp from salt.utils import templates from salt.exceptions import CommandExecutionError
assert_less(distances_ratio.max(), 1 + eps) assert_less(1 - eps, distances_ratio.min())
homework_1_score = 1.0 / 2 homework_2_score = 1.0 / 1 self.check_grade_percent(round((homework_1_score + homework_2_score) / 2, 2))
from __future__ import absolute_import import os import hashlib
from __future__ import absolute_import
return u'{0}@test.com'.format(username)
__salt__['file.remove'](tmpfilename)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.addCleanup(YouTubeStubConfig.reset)
self.assert_no_setting_changed_event()
query = queries[[rng.randint(0, n_queries)]]
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
import time import salt.ext.six as six from salt.ext.six.moves import range
return BadgrBackend()
if (not hasattr(openid_request, 'trust_root') or not openid_request.trust_root): log.error('no trust_root') return False
self.register_page.visit()
boston = datasets.load_boston() perm = rng.permutation(boston.target.size) boston.data = boston.data[perm] boston.target = boston.target[perm]
disabled_ret = ('first second third | wc -l ; export SALTY_VARIABLE=saltines ' '&& echo $SALTY_VARIABLE ; echo duh &> /dev/null') ret_key = 'test_|-shell_enabled_|-{0}_|-configurable_test_state'.format(disabled_ret)
fragment = Fragment( self.system.render_template(self.mako_template, self.get_context()) ) shim_xmodule_js(self, fragment) return fragment
policy_str = '{}'
self.assertEqual(draft_version, new_draft_version) self.assertNotEqual(published_version, new_published_version)
add_button_html = '<div class="add-xblock-component new-component-item adding"></div>' if can_add: self.assertIn(add_button_html, html) else: self.assertNotIn(add_button_html, html)
return self.q(css='.course-number-override .certificate-value').first.text[0]
cmd = '{0} | ConvertTo-Json -Depth 32'.format(cmd)
with salt.utils.fopen(path_test, 'r') as fp_test_: self.assertTrue(fp_test_.read().startswith('en_US.UTF-8'))
return self.example_cert_set.course_key
if user: self.q(css='input[id^=sd_fu_]').first.fill(user) self.q(css='section.staff-modal a.staff-debug-rescore').click()
USER_PARTITION_SCHEME_NAMESPACE = 'openedx.user_partition_scheme'
return self.conditional.encode_conditional_params(z)
newline = ( '{0}\t{1}\t{2}\n'.format( name, type_opts, device_fmt)
if not self.ALLOW_NESTED and connection.in_atomic_block: raise transaction.TransactionManagementError('Cannot be inside an atomic block.')
log.exception( u"%s in Range header: %s for content: %s", exception.message, header_value, unicode(loc) )
self.created_by = created_by self.created_by_email = created_by_email self.created_on = created_on or now self.fields = fields or {}
rng = np.random.RandomState(0) X = rng.randn(10, 2) connectivity = kneighbors_graph(X, 5, include_self=False)
enet.set_params(alpha=alpha_optim) coef_ = enet.fit(X, y).coef_
css = '.group-name' return self.find_css(css).first.text[0]
return self.best_estimator_.transform(Xt)
self.create_mode('professional', 'Professional Education Verified Certificate', 10)
from __future__ import absolute_import import os import random import string
f = open(json_file_path) lines = f.readlines() f.close() content = ''.join(lines) return yaml.load(content)
with salt.utils.fopen(full, 'r') as _fh: for line in _fh: if line.startswith('#'): lines.append(line) continue
for name, TreeEstimator in CLF_TREES.items(): est = TreeEstimator() assert_raises(NotFittedError, est.predict_proba, X)
self.assertEquals( value, request.META.get('HTTP_ACCEPT_LANGUAGE', UNSET) )
return
if abs(r - round(r)) > 0.01: return False r = int(round(r))
recall = tp / T.maximum(1., y.sum()) return recall
clean_warning_registry() with warnings.catch_warnings(record=True) as w: warnings.simplefilter('always')
'openedx.core.djangoapps.api_admin',
self.assertEqual(info['blocks'], [])
self.estimators_.extend(trees)
if len(children) == 3: return LatexRendered( children[1].latex, parens=children[0].latex, tall=children[1].tall ) else: return children[0]
return self.q(css=self.selector).present
ret = self.run_function('virtualenv.create', [venv_dir]) self.assertEqual(ret['retcode'], 0)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
obj = OrderedDict([ ('foo', 1), ('bar', 2), ('baz', {'qux': True}) ])
self.conn.get_rest_apis.return_value = no_apis_ret self.conn.create_rest_api.side_effect = ClientError(error_content, 'create_rest_api')
mix_clf_format = product(EXAMPLES["multilabel-indicator"], EXAMPLES["multiclass"] + EXAMPLES["binary"])
self.q(css='.dropdown-menu li a').nth(1).click()
return '.send-email {}'.format(selector)
item_id_show = item_id if item in ['constraint'] or '=' in item_id: item_id_show = None
klist = list(kwargs.keys()) klist.sort() qbuffer.extend([[k, kwargs[k]] for k in klist])
super(RegisterPage, self).__init__(browser) self._course_id = course_id
print 'Not logged in' for page in auth_pages: print "Checking '{0}'".format(page) self.check_page_get(page, expected=302)
from salt.modules import win_shadow import salt.utils
import salt.pillar import salt.utils.minions
exp_doc_topic = np.exp(_dirichlet_expectation_2d(doc_topic_distr))
svc_realpath = _get_svc_path(name)[0] down_file = os.path.join(svc_realpath, 'down')
return not self.q(css=self._bounded_selector('.wrapper-xblock article')).present
return self.iterator()
if os.path.isfile(join(dirname(abspath(__file__)), 'private.py')):
folds = list(cv.split(X)) best_mse = np.inf
i = 200 while i > 0: module = CapaFactory.create(rerandomize=rerandomize) assert 0 <= module.seed < 1000 i -= 1
return rows
if namespace in NAMESPACE_CHOICES.values(): if namespace == 'entrance_exams': return '{}.{}'.format(unicode(course_key), NAMESPACE_CHOICES['ENTRANCE_EXAM'])
copy = copy if copy is not None else self.copy return binarize(X, threshold=self.threshold, copy=copy)
IS_WIN = win_ntp.__virtual__()
after_jump = [] after_jump_arguments = (
from salt.states import jboss7 from salt.exceptions import CommandExecutionError
assert_raises(ValueError, rp.transform, data[:, 1:5])
if self.teams_configuration: return len(self.teams_configuration.get('topics', [])) > 0 return False
def __hash__(self): return (hash(self.srcport) ^ hash(self.destport) ^ hash(self.protocol) ^ hash(self.destaddr))
if hasattr(self, 'scale_'): del self.scale_ del self.n_samples_seen_ del self.max_abs_
Ioinits = { 'lane_stack': '.salt.lane.manor.stack', }
return cls.current().cdn_user_agents
lw = LedoitWolf() loglik_lw = lw.fit(X_train).score(X_test)
query = self.q(css='.search-team-descriptions') if query.present: query.first.click() self.wait_for_ajax()
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
self.wait_for_ajax() return self.q(css='#u-field-message-account_privacy').text[0]
self.assert_register_response_before_pipeline_looks_correct(self.client.get('/register'))
CourseEnrollment.unenroll(self.user, self.courses[0].id, skip_refund=True)
self.space._validate_impl(is_numeric, batch[0])
start = TODAY().replace(tzinfo=pytz.UTC) override_field_for_ccx(ccx_course_object, master_course_object, 'start', start) override_field_for_ccx(ccx_course_object, master_course_object, 'due', None)
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
BULK_EMAIL_LOG_SENT_EMAILS = False
changes[namespace] = { 'new': config, 'old': update_config, }
class_mapping = defaultdict(int) class_mapping.default_factory = class_mapping.__len__ yt = self._transform(y, class_mapping)
filtered_visible_ids = None
if self.request_cache is not None: self.request_cache.data.setdefault('course_cache', {})[course_version_guid] = system return system
GEOIP_PATH = REPO_ROOT / "common/static/data/geoip/GeoIP.dat" GEOIPV6_PATH = REPO_ROOT / "common/static/data/geoip/GeoIPv6.dat"
from __future__ import absolute_import
log.warning("Multiple gating milestones found for prereq UsageKey %s", prereq_content_key)
with warnings.catch_warnings(record=True) as recorded_warnings: raise_named_version_warning() self.assertEqual( 'Deprecation Message!', str(recorded_warnings[0].message) )
return [MockEndpoints()]
html_use_index = False
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
_keys = {} for key in keys: if keys[key]: _keys[key] = keys[key] return _keys
self.assertTrue(subsection.release_date) self.assertFalse(subsection.due_date) self.assertFalse(subsection.policy)
options = {'statsd': True}
import logging import os
enrollment.deactivate() self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assert_no_events_were_emitted()
dashboard_page = DashboardPage(self.browser) self._make_har_file(dashboard_page)
self.wait_for_element_absence(self.upload_image_popup_window_selector, 'upload dialog is hidden')
assert_almost_equal(clf.alpha_, min(clf.alphas_)) assert_equal(clf.l1_ratio_, min(clf.l1_ratio))
self.assert_redirect_to_register_looks_correct(actions.do_complete(backend, social_views._do_login))
import salt.ext.six as six
confirmation_message = self.cohort_management_page.get_cohort_discussions_message(key=key) self.assertEqual("Your changes have been saved.", confirmation_message)
parse_result = reversed( [k for k in parse_result
self.assertEqual(set(subtree_roots_urls), set(expected_roots_urls))
return service
out, err = DETAILS['server'].sendline(cmd)
return
world.visit('/') course_link_css = 'a.course-link' world.css_click(course_link_css) course_title_css = 'span.course-title' assert_true(world.is_css_present(course_title_css))
for sel in PROBLEM_DICT[problem_type][correctness]: if bool(isnt_marked):
enetcv_unconstrained = ElasticNetCV(n_alphas=3, eps=1e-1, max_iter=max_iter, cv=2, n_jobs=1) enetcv_unconstrained.fit(X, y) assert_true(min(enetcv_unconstrained.coef_) < 0)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
y = np.dot(X, w)
if psutil.version_info < (1, 0, 1): net_io_counters = psutil.network_io_counters()
self.assertTrue(version)
'ALLOW_COURSE_RERUNS': True,
if formatted_record[-1:] != '\n': formatted_record += '\n'
from __future__ import absolute_import import logging
scores = cross_val_score(pipeline, X[:, np.newaxis], y, scoring="mean_squared_error", cv=10)
if all_students or delete_module: if not has_access(request.user, 'instructor', course): return HttpResponseForbidden(_("Requires instructor access."))
user = User.objects.get(email=email) self.assertFalse(user.is_active) return user
return None
if not __salt__['user.info'](user): user = __salt__['user.current']() if not user: user = 'SYSTEM'
request.session[LANGUAGE_SESSION_KEY] = preview_lang
from __future__ import absolute_import
rnd = np.random.RandomState(37) X = rnd.uniform(size=(10, 4))
current_provider = provider.Registry.get_from_pipeline({'backend': backend.name, 'kwargs': kwargs}) return current_provider and current_provider.skip_email_verification
import json import logging
from __future__ import absolute_import import os import textwrap
self.assertEqual(len(installed), 2)
socket = context.socket(zmq.PUB) socket.setsockopt(zmq.LINGER, 100) socket.bind('ipc://' + self.timer_sock)
return self.get_attrs(location).get(attr, default)
for X, y in datasets: X = StandardScaler().fit_transform(X) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.4)
max_scores_cache.set(self.locations[0], 1) self.assertEqual(max_scores_cache.num_cached_updates(), 1)
patcher = patch('pavelib.quality.sh') self._mock_paver_sh = patcher.start()
self.assertIn('Cannot Find Certificate', response.content)
root = CourseFactory.build(days_early_for_beta="null") sequence = SequenceFactory.build(parent=root) ProblemFactory.build(parent=sequence)
tasks.environment = MockEnvironment()
param.update({key: str(data).lower()})
self._verify_and_return_staff_page().set_staff_view_mode('Student') self.assertEqual(0, self.courseware.num_xblock_components)
def fit(self, X, y): super(CustomSVR, self).fit(X, y) self.data_type_ = type(X) return self
return self.q(css=self.get_selector(css=css_selector))
self.q(css=".register-button").click()
asset_key = course.id.make_asset_key('asset', course.course_image) content_store.find(asset_key)
authentication_classes = []
self._enabled = True
from salt.states import kmod
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
if symbolic: activations[idx] = T.switch(clamp, initial, activations[idx]) else: activations[idx] = np.switch(clamp, initial, activations[idx])
ret.update({host_name: {'Error': error}})
raise SkipTest("XFailed Test") diabetes = datasets.load_diabetes() X, y = diabetes.data, diabetes.target
import contextlib import functools import glob import logging import os import re import tempfile
ngrams_nnz = X.nnz assert_true(ngrams_nnz > token_nnz) assert_true(ngrams_nnz < 2 * token_nnz)
delete_index, = np.where(unlabeled_indices == image_index) delete_indices = np.concatenate((delete_indices, delete_index))
environ.__grains__ = {} environ.__salt__ = {} environ.__context__ = {}
new_groups = [Group(10, 'New Group 10'), Group(20, 'New Group 20'), Group(30, 'New Group 30')] new_user_partition = UserPartition(
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath
try: result = super(StringOrDate, self).to_json(value) except: return value if result is None: return value else: return result
if error: ret['changes'] = {} ret['result'] = False ret['comment'] = str(error)
yield found + 1, "E201 whitespace after '%s'" % char
import os import inspect import pkgutil import warnings import sys import re import platform import struct
self.assertNotIn(self.module_key, self.loader)
clf = GradientBoostingClassifier(n_estimators=100, random_state=1) assert_raises(ValueError, clf.fit, X, y + [0, 1])
matching = get_matching_by_name(name) if not matching: continue
self._check_grade_response(callback_url, expected_header, json.dumps(response_content))
from unit.modules.boto_iot_test import BotoIoTTestCaseMixin
from __future__ import absolute_import import pprint import logging import time import urllib
user = self.opts.get('user', 'root') salt.utils.verify.check_path_traversal(self.opts['pki_dir'], user)
response = self.fetch('/login', method='POST', body=yaml.dump(self.auth_creds_dict), headers={'Content-Type': self.content_type_map['yaml']})
FEATURES['ENABLE_DASHBOARD_SEARCH'] = True
if lang == 'en': return u'subs_{0}.srt.sjson'.format(subs_id) else: return u'{0}_subs_{1}.srt.sjson'.format(lang, subs_id)
return course_metadata_utils.url_name_for_course_location(self.location)
points = [round0_25(point) for point in points]
resp = self.client.ajax_post('/course/', self.course_data) self.assertEqual(resp.status_code, 403)
return html
if 'mirrorlist' in repo_opts: todelete.append('baseurl') elif 'baseurl' in repo_opts: todelete.append('mirrorlist')
cluster_ref = salt.utils.vmware.get_mor_by_property(_get_si(), vim.ClusterComputeResource, cluster_name) if cluster_ref: return {cluster_name: 'cluster already exists'}
return False
self._assert_reg_field( no_extra_fields_setting, { "name": "password", "type": "hidden", "required": False, } )
invalid_list = [None, "string", 5, datetime.datetime.today()]
return self.find_css('.signatory-panel-body .signatory-organization-value').first.text[0]
self._initialize(y, layer_units)
if full_funcname not in self._dict: self._dict[full_funcname] = func if funcname not in mod_dict: setattr(mod_dict, funcname, func) mod_dict[funcname] = func self._apply_outputter(func, mod)
'master_pubkey_signature': str,
pos_v = data neg_v = self.sampler.particles
active_script = "return " + title_selector + " === document.activeElement;" return self.browser.execute_script(active_script)
self.assert_grade( problem, submission, correctness, msg="{0} should be {1}".format(name, correctness) )
__virtualname__ = 'docker'
rval = 1./ (self.model.alpha + self.model.w ) rval.name = 'var_s1' return rval
from __future__ import absolute_import import os
non_editable_fields = super(VerticalBlock, self).non_editable_metadata_fields non_editable_fields.extend([ self.fields['due'], ]) return non_editable_fields
response = self.http_get(reverse(self.view), HTTP_AUTHORIZATION=auth_header) self.assertEqual(response.status_code, 200)
user_id = context.get('user_id') course_title = context.get('course_title')
comment = cc.Comment.find(comment_id) result = _vote_or_unvote(request, course_id, comment, value) comment_voted.send(sender=None, user=request.user, post=comment) return result
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
self.course_nav.go_to_vertical('Test Problem 2')
certs_in_queue = [call_args[0] for (call_args, __) in mock_queue.call_args_list] self.assertEqual(len(certs_in_queue), expected_num) for cert in certs_in_queue: self.assertTrue(isinstance(cert, ExampleCertificate))
self.assertTrue(self.video.is_aligned(False))
import salt.utils
config_course_cohorts( course, is_cohorted=True, auto_cohorts=["AutoGroup"] )
self.assertEqual(new_version.location.course_key, target_location_namespace)
value = str(value).lower()
self.video.click_player_button('fullscreen')
deadline = self.date return deadline is not None and deadline <= datetime.now(pytz.UTC)
__virtualname__ = 'varnish'
train.algorithm.termination_criterion = EpochCounter(max_epochs=1) train.extensions.pop(0) train.save_freq = 0 train.main_loop()
user = cc.User.from_django_user(request.user) thread = cc.Thread.find(thread_id) user.unfollow(thread) return JsonResponse({})
memory_oper = ['read', 'write'] memory_scope = ['local', 'global']
(False, "en", "lms-footer.css"), (False, "ar", "lms-footer-rtl.css"),
self.q(css=self._bounded_selector(".annotator-item textarea")).first.fill(value)
pass
params[u'oauth_signature'] = urllib.unquote(params[u'oauth_signature']).decode('utf8')
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.assertEqual(meter.progress, list(progresses))
alt_class = BadgeClassFactory.create( slug=badge_class.slug, issuing_component=badge_class.issuing_component, course_id=CourseFactory.create().location.course_key ) BadgeAssertionFactory.create(user=self.user, badge_class=alt_class)
if get_parents and current_node != start_node: parents = get_parents(current_node)
import numpy as np import matplotlib.pyplot as plt from sklearn.tree import DecisionTreeRegressor from sklearn.ensemble import AdaBoostRegressor
AWS_API_DESCRIPTION = _dict_to_json_pretty({"provisioned_by": "Salt boto_apigateway.present State", "context": "See deployment or stage description"})
password = generate_random_string(password_length) while password in generated_passwords: password = generate_random_string(password_length) generated_passwords.append(password) return password
self.assertIn( 'test_content_field', new_version.get_explicitly_set_fields_by_scope(scope=Scope.content) ) self.assertIn( 'test_settings_field', new_version.get_explicitly_set_fields_by_scope(scope=Scope.settings) )
return __render_script('{0}.sh'.format(os_), vm_, opts, minion)
return json.dumps(self.create_segmentio_event(**kwargs))
newnode['hostname'] = vm_['name'] newnode['ostemplate'] = vm_['image']
from salttesting.helpers import ensure_in_syspath from salttesting.mixins import RUNTIME_VARS ensure_in_syspath('../../')
rng = np.random.RandomState(0)
CreditProvider.objects.create( provider_id="ASU", enable_integration=True, provider_url="https://credit.example.com/request" )
from salt.modules import rsync from salt.exceptions import CommandExecutionError, SaltInvocationError
arr = np.random.random(100) assert not contains_nan(arr) arr[0] = np.nan assert contains_nan(arr)
COURSE_CATALOG_VISIBILITY_PERMISSION = 'see_exists'
sequence.default_time_limit_minutes += sequence.default_time_limit_minutes self.store.update_item(sequence, self.user.id)
with restrict_course(self.course.id) as redirect_path: self.assert_access_denied(redirect_path)
return cls.PROFILE_COUNTRY_CACHE_KEY.format(user_id=user_id)
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'profitbricks' DRIVER_NAME = 'profitbricks'
TOKEN_RESPONSE_DATA = None
for collection in vmconfig_type['collection']: if collection in vmconfig_type['create_only']: continue
X_train, X_test, y_train, y_test = train_test_split(boston.data, boston.target, random_state=rng)
plt.figure(figsize=(8, 8)) accuracy = plt.subplot(211) timescale = plt.subplot(212)
test_model = CourseMetadata.fetch(self.fullcourse) self.assertIn('giturl', test_model)
__proxyenabled__ = ['esxi']
for p in listener_policies: if re.match(r'^ELBSecurityPolicy-\d{4}-\d{2}$', p): default_aws_policies.add(p)
self.assertFalse(user.is_staff)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
#html_logo = None
time.sleep(3)
call_command("loaddata", "course_email_template.json")
'syndic_wait': int,
sparse_results = sparse_classifier.staged_predict(X_test_sparse) dense_results = dense_classifier.staged_predict(X_test) for sprase_res, dense_res in zip(sparse_results, dense_results): assert_array_equal(sprase_res, dense_res)
lshf = LSHForest(min_hash_match=32) ignore_warnings(lshf.fit)(X_train)
import salt.utils from salt.ext.six import string_types
from __future__ import absolute_import import logging
s3.query( key=creds.key, keyid=creds.keyid, kms_keyid=creds.kms_keyid, bucket=bucket, service_url=creds.service_url, path=_quote(path), local_file=cached_file_path, verify_ssl=creds.verify_ssl, location=creds.location )
logging.getLogger().setLevel(logging.ERROR)
AssetBaseUrlConfig.objects.create(enabled=True, base_url='fakecdn.edx.org') expected_cdn_url = "//fakecdn.edx.org" + expected_path_start
if kw_overrides_match is _marker: return profile_match return kw_overrides_match
test_course = CourseFactory.create(default_store=modulestore_type, emit_signals=True) self.client.login(username="jack", password="test")
call_command('manage_user', TEST_USERNAME, TEST_EMAIL, '--remove') self.assertEqual([], list(User.objects.all()))
self.assertIn( settings.MICROSITE_CONFIGURATION['test_microsite']["urls"]['PRIVACY'], data['company_privacy_url'] )
self.theta0, self.thetaL, self.thetaU = theta0, thetaL, thetaU self.corr = corr self.optimizer = 'Welch' self.verbose = verbose
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
node = mock.Mock(due=2, extended_due=1) self.assertEqual(self.call_fut(node), 2)
return redirect_with_get('login', request.GET, False)
__opts__ = { 'pepa_roots': { 'base': '/srv/salt' }, 'pepa_delimiter': '..', 'pepa_validate': False }
win32security.SetNamedSecurityInfo( path, win32security.SE_FILE_OBJECT, win32security.OWNER_SECURITY_INFORMATION + win32security.GROUP_SECURITY_INFORMATION, userSID, groupSID, None, None )
for param in self.params: value = param.get_value(borrow=True) if not isfinite(value): raise RuntimeError("NaN in " + param.name)
self.assertEqual(len(courses), 1)
xml_reports = []
self.settings_page.a11y_audit.config.set_rules({ "ignore": [
service = SERVICES.get(name, None) if service: fake_server = service['class'](port_num=service['port']) setattr(world, name, fake_server)
self.enrollment.can_refund = True self.assertTrue(self.enrollment.refundable())
Y = np.clip(y_pred, eps, 1 - eps)
providers_config_path = _absolute_path(providers_config_path, config_dir)
self.show_question_answer('p1')
ret = self.run_run_plus(fun='fileserver.empty_dir_list', args=['backend="roots"']) self.assertIsInstance(ret['fun'], list)
return self.enabled and self.enable_certification
xblock = self.store.create_item( self.user_id, test_course.id, 'vertical', block_id='test_vertical' )
return any(self._value_matches(target, test_val) for test_val in criteria['$in'])
if token != '': params_with_headers['SecurityToken'] = token
for kernel in kernels: if not kernel.is_stationary(): continue K = kernel(X, X + 1) assert_almost_equal(K[0, 0], np.diag(K))
if getattr(self, 'video_speed_optimizations', True) and cdn_url: branding_info = BrandingInfoConfig.get_config().get(self.system.user_location)
return True
SECRET_KEY = 'dev key'
return not resolved(joinpath(base, path)).startswith(base)
user = User.objects.get(username=self.USERNAME) request = RequestFactory().get("/api/user/v1/accounts/") request.user = user account_settings = get_account_settings(request)
self.workd[yslice] = self.OP(self.workd[xslice])
link_tgt = self.repo[tree[path].oid].data path = os.path.normpath( os.path.join(os.path.dirname(path), link_tgt) )
create_xblock( parent_locator=unicode(created_block.location), user=request.user, category='sequential', display_name=_('Entrance Exam - Subsection') ) add_entrance_exam_milestone(course.id, created_block)
num_examples = {'train': 32561, 'test': 16281}[which_set] assert len(content) == num_examples, (len(content), num_examples)
X = datasets.make_classification(n_samples, n_features, n_informative=n_features-2, random_state=rng)[0]
if __name__ == '__main__':
xblock_info = create_xblock_info( xblock, data=data, metadata=own_metadata(xblock), include_ancestor_info=include_ancestor_info ) if include_publishing_info: add_container_page_publishing_info(xblock, xblock_info) return xblock_info
def downward_state(self, state): return state def downward_message(self, state): return state
from salttesting import TestCase, skipIf from salt.exceptions import SaltInvocationError from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, mock_open, NO_MOCK, NO_MOCK_REASON )
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
predictions = np.array([ est.predict(X) for est in self.estimators_[:limit]]).T
'service_status',
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
self.centroids_ = self.init_centroids_[:n_samples + 1, :] self.squared_norm_ = self.init_sq_norm_[:n_samples + 1]
self.purchased_callback() self.status = 'purchased' self.fulfilled_time = datetime.now(pytz.utc) self.save()
__salt__['cmd.run']('automount -cv') return True
return None
AUDIT_LOG.info("Bad password_reset user passed in.") limiter.tick_bad_request_counter(request)
generated_certificate = GeneratedCertificate.eligible_certificates.get( user=self.enrolled_user_1, course_id=self.course.id, ) self.assertFalse(generated_certificate.is_valid())
from salt.exceptions import SaltInvocationError import salt.utils
element = etree.fromstring(xml_str) state = {'value': 'H2OYeah', } self.the_input = lookup_tag('chemicalequationinput')(test_capa_system(), element, state)
self.client.logout() self._test_return_login(user_is_activated=False)
self.working_dir = rp_
import json
self.prev_floatX = config.floatX config.floatX = 'float64'
response = render_to_response('provider_login.html', { 'error': error, 'return_to': return_to })
__virtualname__ = 'mysql'
if win32event.WaitForSingleObject(hProcess, win32event.INFINITE) == win32con.WAIT_OBJECT_0: exitcode = win32process.GetExitCodeProcess(hProcess) ret['retcode'] = exitcode
module = CapaFactory.create(due=self.yesterday_str, done=True) self.assertFalse(module.should_show_reset_button())
if self.backward: self.setup_response_backward() return
xml = etree.fromstring(expr) xml = self.formulaInstance.preprocess_pmathml(xml) test = etree.tostring(xml)
expected_message = self.emails[0].html_message returned_email_info = email_info[0] received_message = returned_email_info[u'email'][u'html_message'] self.assertEqual(expected_message, received_message)
with super(CreateThreadUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
m = "'init' must be 'pca', 'random' or a NumPy array" assert_raises_regexp(ValueError, m, TSNE, init="not available")
message = message.strip()
return request.session.get('partial_pipeline')
self.assertEqual(self._get_enrollments(), [])
modulestore = XMLModuleStore(DATA_DIR, source_dirs=['toy']) courses = modulestore.get_courses() self.assertEquals(len(courses), 1) course = courses[0]
import salt.utils.network from salt._compat import ipaddress
client.user_credentials.post({ 'username': username, 'credential': {'program_id': program_id}, 'attributes': [] })
kwargs['name'] = repo
raise NotImplementedError()
if not overrides_disabled(): for provider in self.providers: value = provider.get(block, name, NOTSET) if value is not NOTSET: return value return NOTSET
X_train = X_train.astype(np.float64) X_test = X_test.astype(np.float64) normalize(X_train, copy=False) normalize(X_test, copy=False)
attempt = SoftwareSecurePhotoVerification.objects.create(user=user)
reload_the_page(step)
g.precisions_init = rand_data.precisions[covar_type] g.fit(X) assert_array_equal(rand_data.precisions[covar_type], g.precisions_init)
key_fields = key_fields or cls.KEY_FIELDS return 'configuration/{}/key_values/{}'.format(cls.__name__, ','.join(key_fields))
return self.q(css="div.problems-wrapper").text[0]
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
from __future__ import absolute_import import copy import hashlib import logging import os
UNICODETEST_WITH_SIGNS = 'Testing Unicode \N{COPYRIGHT SIGN},\N{TRADE MARK SIGN},\N{REGISTERED SIGN} '+TIMESTR UNICODETEST_WITHOUT_SIGNS = 'Testing Unicode'+TIMESTR UNICODE_TEST_KEY = 'UnicodeKey \N{TRADE MARK SIGN} '+TIME_INT_UNICODE UNICODE_TEST_KEY_DEL = 'Delete Me \N{TRADE MARK SIGN} '+TIME_INT_UNICODE
self.store.revert_to_published(component.location, self.user_id) component = self.store.get_item(component.location) self.assertFalse(self.store.has_changes(component))
if 'encrypted' in kwargs and 'snapshot' not in kwargs: params['Encrypted'] = kwargs['encrypted']
root = etree.Element("glassets") with self.assertRaises(ContractNotRespected): AssetMetadata.add_all_assets_as_xml(root, self.course_assets)
scaler_batch = MinMaxScaler().fit(X)
self.registration = Registration() self.registration.register(self.user) self.registration.save()
return super(NullBackend, self).has_override_value(val_name)
from salt.states import cmd
ram = ET.SubElement(content, 'ram-size') ram.text = config.get_cloud_config_value( 'ram', vm_, __opts__, default='256', search_global=False )
cmd = 'Uninstall-Module "{0}"'.format(name) no_ret = _pshell(cmd) return name not in list_modules()
import salt.ext.six as six
self.now = datetime.datetime.now()
credit_course = CreditCourse.objects.create( course_key=self.course.id, enabled=True, )
modulestore().update_item(self.problem_in_course, self.user.id) self.problem_in_course = modulestore().get_item(self.problem_in_course.location)
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
draft_html = self.store.get_item(course_id.make_usage_key('html', self.DRAFT_HTML)) self.assertTrue(getattr(draft_html, 'is_draft', False))
_write_metric(num_violations, (Env.METRICS_DIR / "jshint"))
return HttpResponse()
self.add_team_configuration(max_team_size=4, topics=[]) self.assertFalse(self.course.teams_enabled)
if not self.cpub and not self.connect_pub(timeout=wait): break
X = csr_matrix(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
self.assertIsInstance( descriptor._field_data._authored_data._source, OverrideFieldData )
self.access_token.delete() response = self.post_with_bearer_token('/oauth2-test/') self.check_error_codes( response, status_code=status.HTTP_401_UNAUTHORIZED, error_code=authentication.OAUTH2_TOKEN_ERROR_NONEXISTENT )
if matches is not None: subscription['endpoint'] = _endpoint.replace( matches.groupdict()['pass'], '****')
return allowed_origins
rval, xdummy = z_hs.owner.op.grad((dummy_v, sqfilt), (x,))
reg_item = PaidCourseRegistration.add_to_order(cart, course_key) return reg_item
from salt.ext.six.moves import map, range, zip from salt.ext.six.moves.urllib.parse import urlencode, urlparse
self.assertEquals(cohorts.get_cohort(user, course.id).name, "AutoGroup")
return dict(dic1.items() + dic2.items())
self.key = key self.time = time return True
call_task('pavelib.assets.watch_assets', options={'background': True})
mouse_hover_action = ActionChains(self.browser).move_to_element(element) mouse_hover_action.perform()
if user1['member_order'] == user2['member_order'] - 1: found = True break
self.assertContains(resp, 'Robot_Course_Outside_Microsite')
if current_node not in yield_results:
self.assertSessionLangEquals( 'rel', self.process_request(preview_lang='rel') )
return True
axes = self.input_space.axes assert len(axes) == 4
self.assertFalse(res_json['success'])
self.assertTrue(BulkEmailFlag.feature_enabled(course_id))
AUTH_BASE_URL = os.environ.get('test_url', 'http://localhost:8031')
iris = datasets.load_iris() perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
if service_name == 'SSH' or service_name == 'ssh': temp_service_name = 'TSM-SSH' else: temp_service_name = service_name
self.hash_functions_ = [] self.trees_ = [] self.original_indices_ = []
log = logging.getLogger(__name__)
keyboard.__salt__ = {} keyboard.__grains__ = {'os_family': ''}
from __future__ import absolute_import import logging import os import os.path
self.assertEqual(self.cohort1.name, response_dict.get("name"))
err = Exception mock_index_dictionary.return_value = err
self.syndic_mode = self.opts.get('syndic_mode', 'sync') self.syndic_failover = self.opts.get('syndic_failover', 'random')
LogoutPage(self.browser).visit() self._auto_auth("STAFF_TESTER", "staff101@example.com", True) self.course_outline.visit()
Order.get_cart_for_user(self.user).start_purchase() Order.get_cart_for_user(self.user).start_purchase() Order.get_cart_for_user(self.user).start_purchase()
ZENDESK_USER = AUTH_TOKENS.get("ZENDESK_USER") ZENDESK_API_KEY = AUTH_TOKENS.get("ZENDESK_API_KEY")
window_height = window_width * ((num_rows * 1.8) / num_columns) figure, all_axes = pyplot.subplots(num_rows, num_columns, squeeze=False, figsize=(window_width, window_height))
import datetime import json import ddt import mock from nose.plugins.attrib import attr from pytz import UTC from django.utils.timezone import UTC as django_utc
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandNotFoundError
textinput = self.q(css=self._bounded_selector("#cohort-name")).results[0] textinput.clear() textinput.send_keys(cohort_name)
else: local = salt.client.LocalClient() ret = local.cmd('{0}'.format(target), cmd, args, kwargs)
from salt.states import win_system
staff_user = UserFactory.create() CourseStaffRole(self.course.location.course_key).add_users(staff_user)
protocol = (pickle.DEFAULT_PROTOCOL if PY3_OR_LATER else pickle.HIGHEST_PROTOCOL) Pickler.__init__(self, self.stream, protocol=protocol) self._hash = hashlib.new(hash_name)
AUTH_PROVIDERS = ('pygit2',) AUTH_PARAMS = ('user', 'password', 'pubkey', 'privkey', 'passphrase', 'insecure_auth')
frgd_arr = to_array(frgd_img) mask_arr = frgd_arr > 0.1
slices = gen_even_slices(10, -1) assert_raises_regex(ValueError, "gen_even_slices got n_packs=-1, must be" " >=1", next, slices)
all_messages = [] for msg_group in self.NOTIFICATION_MESSAGES.values(): all_messages.extend(msg_group)
students = self._create_students(10)
y_hat = sum(all_y_hat) / self.n_estimators
self.check_components_on_page( ADVANCED_COMPONENT_TYPES, ['Word cloud', 'Annotation', 'Text Annotation', 'Video Annotation', 'Image Annotation', 'split_test'], )
import salt.utils from salt.exceptions import CommandExecutionError
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
students_to_gradesets = {} students_to_errors = {} for student, gradeset, err_msg in iterate_grades_for(course_id, students): students_to_gradesets[student] = gradeset if err_msg: students_to_errors[student] = err_msg return students_to_gradesets, students_to_errors
from __future__ import absolute_import import logging
code_length = getattr(settings, 'REGISTRATION_CODE_LENGTH', 8) return generate_random_string(code_length)
self.assertEqual(unicode(self.annotation), u'{} : {}'.format(self.course_key.to_deprecated_string(), self.TEST_ANNOTATION))
assert_raises(ValueError, cval.KFold, 5, 1.5) assert_raises(ValueError, cval.StratifiedKFold, y, 1.5)
if ( settings.FEATURES.get('AUTH_USE_SHIB') and course.enrollment_domain and course.enrollment_domain.startswith(SHIBBOLETH_DOMAIN_PREFIX) ): return redirect_with_get('shib-login', request.GET)
Created Certificate for "DBReplica_No.1": "/etc/pki/my_little/certs/DBReplica_No.1.crt"
self._assets.extend(asset_name)
assert np.isfinite(data_x).all() assert np.isfinite(data_y).all() assert data_x.shape[0] == data_y.shape[0]
path = os.path.expanduser(path)
for module in cls._iter_scorable_xmodules(block_structure): cls._collect_max_score(block_structure, module)
call_command('post_cohort_membership_fix', commit='commit')
if hasattr(self, 'vae'): return self.vae else: return None
model.set_params(warm_start=True) model.fit(X, y) n_iter_warm_start = model.n_iter_ assert_equal(n_iter_warm_start, 1)
split_table = split_tables[0] __, rendered_height = split_table.wrap(0, 0) split_table.drawOn(self.pdf, table_left_padding, y_pos - rendered_height)
while np.sum(support_) > n_features_to_select: features = np.arange(n_features)[support_]
from __future__ import absolute_import
if __pub_jid and python_shell is None: return True elif __opts__.get('cmd_safe', True) is False and python_shell is None: return True
assert self.conv2d.get_params() == [self.filters]
self.wait_for( lambda: self.team_capacity_text == self.format_capacity_text(num_members, max_size), description="Team capacity text is not correct" )
elif not entrance_exam_enabled and course_entrance_exam_present: delete_entrance_exam(request, course_key)
from salt.exceptions import SaltInvocationError import salt.utils.http
partial_credit = xml.xpath('.')[0].get('partial_credit', default=False)
EmptyPromise( lambda: self.find_css('.actions .delete.action-icon').present, 'Certificate delete button is displayed' ).fulfill()
try: result = wua_installer.Install()
EmptyPromise( lambda: cohort_name == cohort_management_page.get_selected_cohort(), "Waiting for new cohort" ).fulfill() cohort_management_page.add_students_to_selected_cohort([student])
haproxyconn.__opts__ = {}
required.append(item_name)
import salt.utils from salt.ext.six import string_types from salt.exceptions import CommandExecutionError import logging
return student_complex == instructor_complex
def f(x): x = x.ravel()
for i in range(10):
return self.check_outbox(u"Vous avez été")
result = user.Rename(new_name)[0]
LOOKUP.clear()
from __future__ import absolute_import
return {}
kwargs['timeout'] = timeout
settings.DEFAULT_TEMPLATE_ENGINE['DIRS'].insert(0, theme_root / 'templates') edxmako.paths.add_lookup('main', theme_root / 'templates', prepend=True)
return T.sum(T.mean(T.sqr(Y-Y_hat), axis=batch_axis))
xpath = "//div[@class='indicator-container']/span" self.assert_no_xpath(xml, xpath, self.context)
return replace(path, pattern, '', flags=flags, bufsize=bufsize, dry_run=True, search_only=True, show_changes=False, ignore_if_missing=ignore_if_missing)
ir = IsotonicRegression() assert_array_equal(ir.fit_transform(np.ones(len(x)), y), np.mean(y))
sparse_classifier = BaggingClassifier( base_estimator=CustomSVC(decision_function_shape='ovr'), random_state=1, **params ).fit(X_train_sparse, y_train) sparse_results = getattr(sparse_classifier, f)(X_test_sparse)
problem1_content_before_switch = self.problem_page.problem_content
task_folder = task_service.GetFolder(location)
args = args and list(args) or []
precs_chol_diag = 1. / np.sqrt(covars_diag) log_prob = _estimate_log_gaussian_prob_diag(X, means, precs_chol_diag) assert_array_almost_equal(log_prob, log_prob_naive)
from __future__ import absolute_import
assert isinstance(error, MemoryError) if str(error): raise error else: raise TypicalMemoryError(msg)
self._update_release_dates(self.date_one, self.date_two, self.date_two) self._verify_release_date_source(self.sequential, self.sequential)
from __future__ import absolute_import
totals_data.append( ['', '{tax_label}: {tax_id}'.format(tax_label=self.tax_label, tax_id=self.tax_id)] )
deployed = _wget('deploy', opts, url, timeout=timeout) res = '\n'.join(deployed['msg'])
import salt.ext.six as six try:
self.assertEqual(-1, split_test.user_partition_id) self.assertEqual(0, len(split_test.children))
__virtualname__ = 'win_dacl'
import salt.ext.six as six
dog_stats_api.increment( DEPRECATION_VSCOMPAT_EVENT, tags=["location:customtag_descriptor_render_template"] )
return None
if unicode(val) == student_answers[aid]: return '$' + key
for submodule in submodules: if submodule.__name__.startswith(mod.__name__ + '.'): reload(submodule) self._reload_submodules(submodule)
user2 = UserFactory() with self.assertRaises(PermissionDenied): reindex_course_and_check_access(self.course.id, user2)
os.utime(path_test, (fstats_orig.st_mtime-age, fstats_orig.st_atime-age))
y = lfw_people.target target_names = lfw_people.target_names n_classes = target_names.shape[0]
#html_split_index = False
[(CourseMode.DEFAULT_SHOPPINGCART_MODE_SLUG, CourseMode.DEFAULT_SHOPPINGCART_MODE_SLUG)]
self._auto_auth(self.USERNAME, self.EMAIL, False)
y = iris.target
cv = (rng.rand() + 1.0) ** 2 samples = mixture.sample_gaussian( mu, cv, covariance_type='spherical', n_samples=n_samples)
self.course_key = course_key
self.key = key return 1
try: problem.grade_answers({'1_2_1': '42'})
raise NotImplementedError()
options = self.parse_options_string(options_string) self.reset_task_messages() call_task("pavelib.js_test.test_js_dev", options=options) self.verify_messages(options=options, dev_mode=True)
footer_style.append(('BACKGROUND', (1, 6), (1, 6), '#EEEEEE'))
transfer_students.Command().handle( source_course=original_key, dest_course_list=new_key_one + "," + new_key_two ) self.assertTrue(self.signal_fired)
log = logging.getLogger(__name__)
if dispatch == 'preview_chemcalc': return self.preview_chemcalc(data) return {}
top_level_logger.propagate = False
true_path = os.path.realpath(file_path) if not os.path.exists(true_path): continue
return { 'id': self.id, 'name': self.name, 'query': self.query, 'viewers': self.viewers, }
np.testing.assert_equal(list(KFold(3).split(X)), list(cv.split(X)))
file_to_upload = 'image.jpg' self.settings_page.upload_image('#upload-banner-image', file_to_upload) self.assertIn(file_to_upload, self.settings_page.get_uploaded_image_path('#banner-image'))
if value == 'True': new_line = key elif value == 'False': new_line = '' else: new_line = '{0} {1}'.format(key, value)
if sig: return __salt__['status.pid'](sig)
from __future__ import absolute_import
if case_sensitive: casify = lambda x: x else:
usage_key = request_params['usage_key'] course_key = request_params['course_key']
cached_pkg = __salt__['cp.is_cached'](installer, saltenv) if not cached_pkg: cached_pkg = __salt__['cp.cache_file'](installer, saltenv)
cmd_str = ( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str)
else: ret = _load_result(new_member, ret)
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.25, random_state=42)
if db != 'read_replica': DATABASES[db].update(get_db_overrides(db))
indptr_3 = X_sparse_unpruned.indptr[3] indptr_4 = X_sparse_unpruned.indptr[4] X_sparse_unpruned.data[indptr_3:indptr_4] = 0.0
queryset = queryset.order_by('name')
estimator_weight = self.learning_rate * ( np.log((1. - estimator_error) / estimator_error) + np.log(n_classes - 1.))
rval = X.copy()
htmlhelp_basename = 'theanodoc'
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.approve()
if include_default_option: field_dict["options"].append({ "value": "", "name": "--", "default": True })
return str(uuid.uuid4())
self.eof_index = len(string)
self.release_languages('ar, es-419')
def __init__(self, course_key): detail = _('[{course_key}] is not a valid course key.').format(course_key=course_key) super(InvalidCourseKey, self).__init__(detail)
from salt.states import modjk_worker
tuned_parameters = [{'shrinkage': shrinkages}] cv = GridSearchCV(ShrunkCovariance(), tuned_parameters) cv.fit(X_train)
pass
from salt.modules import glusterfs from salt.exceptions import SaltInvocationError
return self.q(css=self._bounded_selector('.add-admin-role')).text[0]
for app in ADDL_INSTALLED_APPS: INSTALLED_APPS += (app,)
clf = MockClassifier() grid_search = GridSearchCV(clf, {'foo_param': [1, 2, 3]}, refit=True) grid_search.fit(X, y)
problem = self.build_problem(sample_dict=sample_dict, num_samples=10, tolerance=0.01, answer="x+2*y", hints=hints)
return [s.earned for s in self.get_grade_summary()['totaled_scores']['Homework']]
with self.assert_last_activity_updated(should_update): user = getattr(self, user) signal.send(sender=None, user=user, post=self.mock_comment())
safe_exec("a = int(math.pi)", g) self.assertEqual(g['a'], 3)
return cls.AUDIT in modes_dict or cls.HONOR in modes_dict
from __future__ import absolute_import
sample_weight = np.asarray(sample_weight, dtype=np.float64, order="C")
if usage_info.has_staff_access: return
try: import Crypto
logging.warning("Did not find key commentable_id in content.") passes_condition = False
import integration import salt.ext.six as six from salt.modules import mysql as mysqlmod
submissions_score_set_handler(None, **SUBMISSION_SET_KWARGS) self.get_user_mock.assert_called_once_with('anonymous_id')
for email in ('bad_email', 'bad_email@', '@bad_email'): self.assertEqual(self.do_email_validation(email), 'Valid e-mail address required.')
self.addCleanup(patcher.stop) self.addCleanup(self._mock_paver_needs.stop)
ws = create_connection('wss://localhost:8000/formatted_events/d0ce6c1a37e99dcc0374392f272fe19c0090cca7')
def setUp(self): super(TestRenderXBlockSelfPaced, self).setUp() SelfPacedConfiguration(enabled=True).save() def course_options(self): return {'self_paced': True}
pre_requisite_courses = get_prerequisite_courses_display(course)
_win(kernel32.GetExitCodeProcess, wintypes.BOOL,
block_structure.request_xblock_fields('category')
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
import integration
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
try: from libcloud.compute.base import NodeState import libcloud.security libcloud.security.CA_CERTS_PATH.append('/etc/ssl/certs/YaST-CA.pem') HAS_LIBCLOUD = True except ImportError: HAS_LIBCLOUD = False
mako_middleware_process_request(self.request) return views.progress(self.request, course_id=unicode(course.id), student_id=self.user.id).content
from __future__ import absolute_import import os import shutil
greet = Word( alphas ) + "," + Word( alphas ) + "!"
'openedx.core.djangoapps.theming',
pipeline = Pipeline([('imputer', Imputer(missing_values=0)), ('tree', tree.DecisionTreeRegressor(random_state=0))])
with self.assertNumQueries(1): self.field_data_cache = FieldDataCache([self.mock_descriptor], course_id, self.user) self.kvs = DjangoKeyValueStore(self.field_data_cache)
cmd.extend(packages)
return data['user'].is_staff
for n, (name, estimator) in enumerate(estimators): y_predict = np.zeros((n_test, n_repeat))
__virtualname__ = 'foreman'
epoch_num = 1
return 'Looks like jail {0} has not been created'.format(name)
category_name = "problem" return world.ItemFactory.create( parent_location=section_location(course), category=category_name, display_name=str(problem_type), data=problem_xml, metadata=metadata )
with self.assert_signature_error_logged('Signature .* does not match'): yield
print('Loading model...') model = serial.load(model_path) model.set_batch_size(m) return model
#html_show_sphinx = True
super(XMLParsingSystem, self).__init__(**kwargs) self.process_xml = process_xml
with self.store.branch_setting(ModuleStoreEnum.Branch.published_only, course_key): self.assertTrue(self.store.has_item(problem_location)) assertProblemNameEquals(problem_original_name)
#epub_guide = ()
__virtualname__ = 'group'
return ProfileImageView().post(request, username)
invalid_get_dict = MultiDict({'input': 'test'}) with self.assertRaises(ValueError): result = CapaModule.make_dict_of_responses(invalid_get_dict)
for verification in candidates: if verification.active_at_datetime(deadline): return verification
field_dictionary, filter_dictionary, _ = LmsSearchFilterGenerator.generate_field_filters() self.assertTrue('start_date' in filter_dictionary) self.assertEqual(0, len(field_dictionary['course']))
for i, octet in enumerate(octets):
from __future__ import absolute_import import copy import logging import re import os.path
self.browser.refresh() self.wait_for_page()
self.course.start = _LAST_WEEK self.assertTrue(self.course.has_started()) self.course.start = _NEXT_WEEK self.assertFalse(self.course.has_started())
from salt.ext.six.moves.urllib.parse import urlencode as _urlencode
if expected != actual: raise AssertionError("values not equal, expected: %r, actual: %r" % (expected, actual))
sorted_idx = np.argsort(predictions, axis=1)
super(UngenerateCertificatesTest, self).setUp() self.course = self.courses[0]
context['company_tos_urltext'] = _("Terms of Service &amp; Honor Code")
from __future__ import absolute_import import integration
if err == 'usage:': break ret[csnap][ctag] = res['stderr']
parser.add_argument( '--all', action='store_true', dest='all', default=False, help='Generate course overview for all courses.', )
if whiten: assert_almost_equal(s_, np.dot(np.dot(mixing_, k_), m))
__virtualname__ = 'virt'
return self.cleaned_data.get("order_by") or "last_activity_at"
return
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
with tempfile.NamedTemporaryFile(mode='w', prefix='shim_', delete=False) as shim_tmp_file: shim_tmp_file.write(cmd_str)
rval = [None] * self.n_unique_specs
remove_steps |= set([self.INTRO_STEP])
n_topics, X = _build_sparse_mtx() lda = LatentDirichletAllocation(n_topics=n_topics, max_iter=10, random_state=0) distr = lda.fit_transform(X) perplexity_1 = lda.perplexity(X, distr, sub_sampling=False)
return response.set_cookie_wrapped_func( key, value, max_age=max_age, expires=expires, path=path, domain=domain, secure=secure, httponly=httponly )
pass
element = self.q(css=".inline-error").first if element and self.is_error_visible: return element.text[0] else: return None
container.visit() container.delete(0)
return eval(xml.text)
from salt.states import mysql_query import os
if optname == 'proto' and valuestr == 'none': valuestr = 'static'
from __future__ import absolute_import, print_function
return UserFactory()
vars().update(ENV_TOKENS)
from __future__ import absolute_import
__virtualname__ = 'ip'
VIDEO_CDN_URL = ENV_TOKENS.get('VIDEO_CDN_URL', {})
valid_file = TemporaryFile() test_file = TemporaryFile()
if state != self.is_cohorted: self.q(css=self._bounded_selector('.cohorts-state')).first.click() self.wait_for_ajax()
LogoutPage(self.browser).visit() StudioAutoAuthPage( self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=True ).visit()
if not settings.FEATURES.get('MILESTONES_APP', False): return {} from milestones import api as milestones_api return milestones_api.get_milestone_relationship_types()
num_braces = 0
with patch('lms.djangoapps.verify_student.models.requests.post', new=mock_software_secure_post_error): attempt = self.create_and_submit() assert_equals(attempt.status, "must_retry")
if self.act_enc is None: act_enc = lambda x: x else: act_enc = self.act_enc return act_enc(self._hidden_input(x))
rng = np.random.RandomState(0) X = rng.rand(5, 5)
import salt.utils
from __future__ import unicode_literals
return traverse_topologically( start_node=self.root_block_usage_key, get_parents=self.get_parents, get_children=self.get_children, filter_func=filter_func, yield_descendants_of_unyielded=yield_descendants_of_unyielded, )
if must_answer_survey(self.course, self.effective_user): raise Redirect(reverse('course_survey', args=[unicode(self.course.id)]))
endorsement = obj.get("endorsement") return endorsement["time"] if endorsement else None
assert_equal(train.intersection(test), set())
self.assertEquals( preview.latex_preview('(2+3^2)'), r'\left(2+3^{2}\right)' )
est = TreeEstimator(min_samples_split=0.2, max_leaf_nodes=max_leaf_nodes, random_state=0) est.fit(X, y) node_samples = est.tree_.n_node_samples[est.tree_.children_left != -1]
logoption = 0 for opt in _options['options']: logoption = logoption | getattr(syslog, opt)
distances, neighbors = lshf.radius_neighbors(query, radius=mean_dist, return_distance=True) assert_array_less(distances[0], mean_dist)
return page_title_breadcrumbs(*crumbs)
MAILCHIMP_NEW_USER_LIST_ID = ENV_TOKENS.get("MAILCHIMP_NEW_USER_LIST_ID")
assert_raises(ValueError, cval.cross_val_score, svm, linear_kernel.tolist(), y)
from __future__ import absolute_import import logging import os import datetime
results[guid]['NeedsReboot'] = str(update.RebootRequired)
logistic = linear_model.LogisticRegression() rbm = BernoulliRBM(random_state=0, verbose=True)
assert_greater(clf.score(X_test, y_test), 0.99)
if args.validate: __opts__['pepa_validate'] = True
proc = Process(target=event_stream, args=(handler, child_pipe)) proc.start()
return self.prior.get_params()
self.assertEqual(1, len(mail.outbox)) self.assertIn(expected_message, mail.outbox[0].subject) self.assertIn(expected_message, mail.outbox[0].body)
rng = np.random.RandomState(0) n_topics, X = _build_sparse_mtx() lda = LatentDirichletAllocation(n_topics=n_topics, evaluate_every=1, learning_method='batch', random_state=rng) lda.fit(X)
task_id = str(uuid4())
old_inertia_csr, incremental_diff_csr = _mini_batch_step( X_mb_csr, x_mb_squared_norms_csr, new_centers_csr, counts_csr, buffer_csr, 1, None, random_reassign=False) assert_greater(old_inertia_csr, 0.0)
search = re.search(linere, line) if not search: continue
ans = True
from __future__ import absolute_import, print_function import itertools
MIGRATION_MODULES = NoOpMigrationModules()
import MySQLdb import MySQLdb.cursors import MySQLdb.converters from MySQLdb.constants import FIELD_TYPE, FLAG HAS_MYSQLDB = True
def __setstate__(self, state): self._is_child = True self.__init__(state['opts'], log_queue=state['log_queue'])
if user is not None and has_course_author_access(user, course_key): return True
([], 'honor'),
for key, value in kwargs.items(): if key in old: if value == 'max': value = old['{0}_max'.format(key)]
view, args, kwargs = resolve(url) response = view(request, *args, **kwargs)
import salt.utils import salt.ext.six as six from salt.exceptions import CommandExecutionError
([], 'honor'),
html_theme = 'scikit-learn'
existing_config = None if __salt__['marathon.has_app'](name): existing_config = __salt__['marathon.app'](name)['app']
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'ec2'
clean_warning_registry() with warnings.catch_warnings(): warnings.simplefilter("ignore", self.category) return fn(*args, **kwargs)
import msgpack
saltenv = env
modulestore().get_course(self.course.id, depth=None)
CHAPTER = 'Test Section' SECTION = 'Test Subsection' EXPECTED_SCORES = [(0, 3), (0, 1)]
for mode_slug, min_price in modes_and_prices: self.create_mode(mode_slug, mode_slug.capitalize(), min_price=min_price)
users_state = self._get_users_state()
from __future__ import unicode_literals
assert_raises(ValueError, partial_dependence, GradientBoostingClassifier(), [0], X=X)
template = lookup_template(namespace, template_name) return template.render_unicode(**context_dictionary)
self.dashboard_page.visit()
statobj = inputtypes.Status('test') self.assertEqual(str(statobj), 'test') self.assertEqual(unicode(statobj), u'test')
print "======== Roundtrip diff: ========="
raise NotImplementedError()
import threading self._w_monitor = ZeroMQSocketMonitor(self._socket) t = threading.Thread(target=self._w_monitor.start_poll) t.start()
true_and_pred = y_true.multiply(y_pred) tp_sum = count_nonzero(true_and_pred, axis=sum_axis, sample_weight=sample_weight) pred_sum = count_nonzero(y_pred, axis=sum_axis, sample_weight=sample_weight) true_sum = count_nonzero(y_true, axis=sum_axis, sample_weight=sample_weight)
from __future__ import absolute_import import os import logging import signal import tempfile from threading import Thread, Event
rexp = re.compile('(?m)^ ["]?' r'([^,|\s].*[^"|\n|,])[,|"]?')
pass
user_not_added = User.objects.create_user('testuser2', 'test+courses2@edx.org', 'foo2') self.assertFalse(user_has_role(user_not_added, CourseCreatorRole()))
try: fields = kwargs['context'].pop('fields', DEFAULT_FIELDS) or DEFAULT_FIELDS except KeyError: fields = DEFAULT_FIELDS super(BookmarkSerializer, self).__init__(*args, **kwargs)
shutil.copyfile(path_in, path_test)
from salt.modules import firewalld
from salt.states import svn
Pickler.save(self, _ConsistentSet(set_items))
if oper in ('=', ''): oper = '==' return oper, verstr
stored_file_name = file_storage.save(stored_file_name, uploaded_file)
self._install_course_fixture() self._navigate_to_courseware_video_no_render()
continue
if symtab: varset = symtab else: varset = { 'p': sympy.Symbol('p'), 'g': sympy.Symbol('g'),
self.assertIn(html, html_encapsulated)
from salt.utils import configcomparer
base_estimator.fit(X_inlier_best, y_inlier_best)
import json import logging
self.client = AjaxEnabledTestClient()
reset_queries()
retval = self.service.set_credit_requirement_status( 0, self.course.id, 'grade', 'grade' ) self.assertIsNone(retval)
timeout = __FUN_TIMEOUT.get( fun,
self.verify_discussion_topics_after_reload(self.inline_key, cohorted_topics_after)
error = mean_absolute_error(y_true, y_pred) assert_almost_equal(error, (1. / 3 + 2. / 3 + 2. / 3) / 4.)
ret = __salt__['k8s.label_absent'](name, node, apiserver)
return msg.strip()
self.process_requirements()
if on_rtd: os.environ['DJANGO_SETTINGS_MODULE'] = 'lms' else: os.environ['DJANGO_SETTINGS_MODULE'] = 'lms'
out = [head] (head, tail) = os.path.split(head)
self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS, PayAndVerifyView.PAYMENT_CONFIRMATION_STEP, )
self.assert_error(params, field, expected_error)
d = TreeEstimator(random_state=0, max_depth=max_depth).fit(X, y) s = TreeEstimator(random_state=0, max_depth=max_depth).fit(X_sparse, y)
for url in urls: self.assert_request_status_code(404, url)
X = check_array(X, ensure_min_features=2, ensure_min_samples=2, estimator=self)
cmd.append(path)
try: float(slug) except ValueError: return False return True
CourseEnrollment.enroll(self.instructor, self.course.id) self.test_send_to_all()
input_dict = {'1_2_1': '-1', '1_2_2': '2', '1_2_3': '3'} correct_map = problem.grade_answers(input_dict)
import stat import os import logging
return { 'item_description': 'Course %s Description' % index, 'quantity': index, 'list_price': 10, 'discount': discount, 'item_total': 10 }
ret['changes'] = { 'old': current_state, 'new': new_state, }
return modules_to_update.filter(state__contains='"done": true')
return middleware.RequestCache.get_request_cache(name)
assert_page_correct( page=2, page_size=4, expected_start=4, expected_stop=8, expected_next=3, expected_prev=1 )
return settings.STATIC_URL + relative_url
course.self_paced = True self.store.update_item(course, self.user.id) self.assertTrue(course.self_paced)
y1 += [0]*n_classes y2 += [0]*n_classes
import os import glob
return self.kernel.bounds
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
self.store.delete_item(component.location, self.user_id) vertical = self.store.get_item(vertical.location) self.assertTrue(self._has_changes(vertical.location))
test = -3
self.assertEqual(updated_course.display_coursenumber, None)
parent_location = parent_location.map_into_course(target_id)
assert isinstance(value, UsageKey) self.scope_ids = self.scope_ids._replace( def_id=value, usage_id=value, )
cost = SumOfCosts([SumOfOneHalfParamsSquared(), (0., DummyCost())])
for course_id, store in self.mappings.iteritems(): candidate_key = store.make_course_key(org, course, run) if candidate_key == course_id: return candidate_key
funcs = self.run_function('sys.list_functions') self.assertIn('hosts.list_hosts', funcs) self.assertIn('pkg.install', funcs)
from salt.exceptions import CommandExecutionError, CommandNotFoundError
self.assertOLXIsDraftOnly(block_list_to_unpublish) with self.assertRaises(ItemNotFoundError): self.unpublish(block_list_to_unpublish)
assert layer_name is None
role = MockRoles() if self.flag == 1: role.id = None return role role.id = role_id return role
s = (y != 4) X = X[s, :] y = y[s] y = (y != 1).astype(int)
image = image * 255. image = np.cast['uint8'](image)
for library in NPM_INSTALLED_LIBRARIES: sh('/bin/cp -rf node_modules/{library} {vendor_dir}'.format( library=library, vendor_dir=NPM_VENDOR_DIRECTORY, ))
from salt.states import network
meta = xml_object.find('meta') if meta is None: return '' dmdata = meta.text if remove: xml_object.remove(meta) return dmdata
success = convnet_compile() if success: convnet_available.compiled = True else: convnet_available.compile_error = False _logger.debug('compilation success: %s', success)
self._assert_history([], enroll_msg='embargo', access_msg='embargo')
ssh_gateway_config['ssh_gateway_key'] = config.get_cloud_config_value( 'ssh_gateway_private_key', vm_, __opts__, default=None, search_global=False )
else: ret = _load_result(new, ret)
template_context['js_init_parameters'] = json.dumps(frag.json_init_args).replace("/", r"\/")
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
return xblock._edit_info.get('edited_by')
task_type = 'cohort_students' task_class = cohort_students task_input = {'file_name': file_name} task_key = "" return submit_task(request, task_type, task_class, course_key, task_input, task_key)
import logging
authorization_header = ( '{0} Credential={1}/{2}, SignedHeaders={3}, Signature={4}' ).format( algorithm, access_key_id, credential_scope, signed_headers, signature, )
K_gradient = np.empty((X.shape[0], X.shape[0], 0)) return K, K_gradient
n_samples = 100 x = np.random.uniform(size=n_samples) > 0.5
if 'snapshot_ids' in kwargs: kwargs['snapshot_id'] = kwargs['snapshot_ids']
mylocalrepo: git.config_unset: - name: foo.bar - value_regex: 'baz' - repo: /path/to/repo
return UserPreference.get_value(user, LANGUAGE_KEY)
return ( 'split_test' in ADVANCED_COMPONENT_TYPES and 'split_test' in course.advanced_modules )
from salt.states import keyboard
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.approve()
locator_cls = CCXBlockUsageLocator if isinstance(course_key, CCXLocator) else BlockUsageLocator return locator_cls(course_key, 'course', 'course')
clf.fit(docs_train, y_train)
question = etree.SubElement(root, "p") question.text = question_text
width = self.ext.config['vimeo_width'][0] height = self.ext.config['vimeo_height'][0] return flash_object(url, width, height)
octets = ip_address.split('.') if len(octets) != 4: return False
if self._assertion_errors: raise BulkAssertionError(self._assertion_errors)
finish_time = time() self._ddog_histogram(evt_time, 'delete_many.response_time', (finish_time - evt_time) * 1000)
_ret = [] for row in _response['rows']: _ret.append(row['key']) return _ret
return { 'gender': {'user__profile__gender': value}, 'level_of_education': {'user__profile__level_of_education': value}, }[feature]
np.clip(X, 0, np.finfo(X.dtype).max, out=X) return X
self.assertEquals(self.request.safe_cookie_verified_user_id, self.user.id)
return self.system.render_template('lti.html', self.get_context())
images = np.zeros((3,) + face.shape) images[0] = face images[1] = face + 1 images[2] = face + 2 return images
new_user_partition = UserPartition(
world.create_user('robot', 'test') user = User.objects.get(username='robot')
self.assert_oauth_status("fooooooooooToken", status.HTTP_401_UNAUTHORIZED)
refund_cutoff_date = self.refund_cutoff_date() if refund_cutoff_date and datetime.now(UTC) > refund_cutoff_date: return False
alpha = float(alpha) random_state = check_random_state(random_state)
response = self.client.get(self.url) self.assertFalse(self.email_modal_link in response.content)
visited = set()
params[field] = "" assert_extra_field_error()
r_time = 0
'bootstrap_delay': int,
self._each_parens(r'\left[x^y\right]', 'x^y', '[', tall=True)
super(PresenterTestCase, self).setUp()
assert self.match_social_auth(social_auth) return social_auth.uid
REQUIRE_STANDALONE_MODULES = {}
import salt.ext.six as six
self.assertTrue(mock_audit_log.called)
from salt.modules import introspect
return key_checker(['type'])(tab_dict, raise_error)
from salt.states import module
scalings = (V[:rank] / std).T / S[:rank]
log.warning("_find_course_asset request of XML modulestore - not implemented.") return (None, None)
continue
__func_alias__ = { 'list_': 'list' }
return self.page.q(css=self._bounded_selector(selector))
scores = cross_val_score(clf, X, y2) assert_array_equal(scores, clf.score(X, y2))
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
if name not in loader.file_mapping: return {}
clf = DecisionTreeClassifier(max_depth=3, min_samples_split=2) clf.fit(X, y)
PY3 = sys.version_info[0] == 3
defaults = DEFAULT_MASTER_OPTS defaults.update(DEFAULT_SPM_OPTS)
log = logging.getLogger(__name__)
self.assertEqual(json.loads(resp.content).get('status'), 'Transcripts are supported only for "video" modules.')
THIRD_PARTY_AUTH_CUSTOM_AUTH_FORMS = AUTH_TOKENS.get('THIRD_PARTY_AUTH_CUSTOM_AUTH_FORMS', {})
diff_quality_percentage_pass = True
for backend_path in settings.AUTHENTICATION_BACKENDS: backend = auth.load_backend(backend_path) if backend.get_user(user.id): return backend_path
X_train, X_test, y_train, y_test = train_test_split(cal_housing.data, cal_housing.target, test_size=0.2, random_state=1) names = cal_housing.feature_names
log = saltlog.SaltLoggingClass(__name__)
grid_search.scoring = 'sklearn' assert_raises(ValueError, grid_search.fit, X, y)
self.assertTrue(self.client.login(username=requesting_user.username, password=TEST_PASSWORD)) if make_inactive: requesting_user.is_active = False requesting_user.save()
self.INVALID_TOKEN = ("\n\nIt appears the LOGENTRIES_TOKEN " "parameter you entered is incorrect!\n\n") self.LINE_SEP = _to_unicode(r'\u2028')
instructor_task = cls( course_id=course_id, task_type=task_type, task_id=task_id, task_key=task_key, task_input=json_task_input, task_state=QUEUING, requester=requester ) instructor_task.save_now()
from salt import syspaths import salt.config import salt.loader from salt.client import mixins from salt.utils.error import raise_error
if issubclass(Estimator, ProjectedGradientNMF): with ignore_warnings(): yield check_get_params_invariance, name, Estimator else: yield check_get_params_invariance, name, Estimator
'tools.lowdata_fmt.on': True,
collapsed = ipaddress.collapse_addresses([ip1, ip2]) self.assertEqual(list(collapsed), [ipaddress.IPv4Network('1.1.0.0/23')])
return etree.parse(file_object, parser=EDX_XML_PARSER).getroot()
stream1 = StringIO() stream2 = StringIO() handler1 = StreamHandler(stream1) handler2 = StreamHandler(stream2)
centers = [[1, 1], [-1, -1], [1, -1]] X, _ = make_blobs(n_samples=10000, centers=centers, cluster_std=0.6)
BACKEND.clear()
S, rows, cols = make_checkerboard((30, 30), 3, noise=0.5, random_state=0)
return self.func_to_count(param)
EDX_PLATFORM_REVISION = dealer.git.Backend(path=REPO_ROOT).revision
self.assertEqual([jid_dir_name], os.listdir(TMP_JID_DIR))
response = self.client.get(self.url, content_type="application/json") self.assertHttpOK(response)
if not __execute_cmd('config -g cfgUserAdmin -o \ cfgUserAdminUserName -i {0} {1}'.format(uid, username)): delete_user(username, uid) return False
url = reverse('instructor_dashboard', kwargs={'course_id': self.course.id.to_deprecated_string()}) self.assert_request_status_code(200, url)
from __future__ import absolute_import, print_function import logging
AutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=False).visit()
return functools.partial(self.cache, ignore=ignore, verbose=verbose, mmap_mode=mmap_mode)
return self.asset_md.setdefault(item, default)
iterator = itertools.islice(iterator, pre_dispatch)
get_parents=None, get_children=get_children, filter_func=filter_func,
last_el = self.table_of_contents[-1] while last_el.getchildren(): last_el = last_el[-1]
confirm_prompt(self, require_notification=False) self.wait_for_ajax()
if refresh: refresh_db()
errstring = "No user found identified by 99" with self.assertRaisesRegexp(CommandError, errstring): self.command.handle("org/course/name", "99")
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
n_classes = int(y.max()) + 1 if loss == 'multinomial' else 1
self.seed = seed rng = make_np_rng(seed, which_method="permutation") self.permut = rng.permutation(index_tab)
h = alpha_i * np.ones(s_i) - np.dot(Vi.T, np.ones(n_neighbors))
self.assertListEqual(json.loads(response.content), expected)
actual = GroupConfiguration.get_or_create_content_group(self.store, self.course)
callback_url_path = reverse('certificates.views.update_example_certificate')
rxml = etree.fromstring(req.text)
base_dashboards_from_pillar = ([_DEFAULT_DASHBOARD_PILLAR] + base_dashboards_from_pillar) base_panels_from_pillar = ([_DEFAULT_PANEL_PILLAR] + base_panels_from_pillar) base_rows_from_pillar = [_DEFAULT_ROW_PILLAR] + base_rows_from_pillar
import salt.fileclient import salt.utils.url
from ioflo.aid.odicting import odict
self.set_config(False) course = CourseFactory.create()
return nt_uri[SHORTNAME_SLICE]
if not(len(users) == 1 and caller == users[0]): _check_caller_authority(caller, role) role.remove_users(*users)
microsite.clear() domain = request.META.get('HTTP_HOST', None) microsite.set_by_domain(domain) return None
import salt.utils import salt.fileserver
self.fs_files.database.connection.close()
self.assertTrue(isinstance(kubectl_out, dict))
X_var *= X.shape[0] X_std = np.sqrt(X_var, X_var) del X_var X_std[X_std == 0] = 1 inplace_column_scale(X, 1. / X_std)
self.attempt_login(403, ns="http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0")
self.video.wait_for_state('pause')
self.q(css='#course-index-tabs .programs-tab a').click() self.wait_for_element_visibility("div.programs-tab.active", "Switch to programs tab")
raise NotImplementedError(str(type(self)) + " does not implement get_default_cost.")
from __future__ import unicode_literals
IS_PY3 = sys.version_info > (3,)
salt.utils.cloud.accept_key( self.opts['pki_dir'], vm_['pub_key'], key_id )
#pylint: disable=E0602
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from openedx.core.lib.block_structure.transformer_registry import TransformerRegistry TransformerRegistry.USE_PLUGIN_MANAGER = False
split_test.add_missing_groups(self.request) split_test = self._assert_children(3) self.assertEqual(group_id_to_child, split_test.group_id_to_child)
return self.report_download_links.map(lambda el: el.text)
cov = EmpiricalCovariance(assume_centered=True) cov.fit(X) assert_array_equal(cov.location_, np.zeros(X.shape[1]))
all_proba = Parallel(n_jobs=n_jobs, verbose=self.verbose, backend="threading")( delayed(parallel_helper)(e, 'predict_proba', X, check_input=False) for e in self.estimators_)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'aliyun', vm_['profile'], vm_=vm_) is False: return False
data_parser = struct.Struct('LHHHHHHL') ReparseTag, ReparseDataLength, Reserved, SubstituteNameOffset, \ SubstituteNameLength, PrintNameOffset, \ PrintNameLength, Flags = data_parser.unpack(reparse_data[:data_parser.size])
return self.storage_space.np_format_as(design_mat, self.topo_space)
dataset = datasets.load_iris() X = dataset.data
set_credit_requirements(self.course.id, requirements)
from openedx.core.djangoapps.credit import api, tasks
last = self.n_layers_ - 2
if privacy is not None: profile_page.visit()
'syndic_master_port', opts.get( 'master_port', minion_defaults.get( 'master_port', DEFAULT_MINION_OPTS['master_port'] ) )
if LOCAL_DEBUG: print msg if output_type == 'html': f.write(msg + '\n<br>\n')
return get_default_time_display(xblock.start) if xblock.start != DEFAULT_START_DATE else None
iris = load_iris() X = iris.data pca = PCA(n_components=2, svd_solver='full') pipeline = Pipeline([('pca', pca)])
self.q(css=self._bounded_selector(".annotator-close")).first.click() self.wait_for_notes_invisibility("Note is canceled.") return self
the_html2 = problem.get_html() self.assertEquals(the_html, the_html2)
return __render_script(os_, vm_, opts, minion)
if not settings.FEATURES.get('CUSTOM_COURSES_EDX'): filtered_list.append('enable_ccx') filtered_list.append('ccx_connector')
THEME_NAME = ENV_TOKENS.get('THEME_NAME', None) COMPREHENSIVE_THEME_DIR = path(ENV_TOKENS.get('COMPREHENSIVE_THEME_DIR', COMPREHENSIVE_THEME_DIR))
if output == '': return {'jobs': jobs}
return [child.version_agnostic() for child in children]
import numpy as np from sklearn.tree import DecisionTreeRegressor import matplotlib.pyplot as plt
try: self.assertIn(self.INSTANCE_NAME, delete_str) self.assertIn('True', delete_str) except AssertionError: raise
from salt.modules import dpkg
number_aware_alphabetical_key = cmp_to_key(number_aware_alphabetical_cmp)
signature = hmac.new( signing_key, string_to_sign.encode('utf-8'), hashlib.sha256).hexdigest()
_ = lambda text: text
assert_equal(sys.modules['warnings'].filters, [])
grid_search = GridSearchCV(clf, param_grid=param_grid) start = time() grid_search.fit(X, y)
course_key = course.id if view_as_ccx: course_key = CCXLocator.from_course_locator(course_key, self.ccx.id) return progress( self.request, course_id=unicode(course_key), student_id=self.student.id )
self.assertNotRegexpMatches(problem_html, r"data-block-type=[\"\']acid_aside[\"\']")
if __grains__['os'] in ['MacOS', 'Darwin'] and config == '/etc/fstab': config = "/etc/auto_salt"
try: self._verify_modulestore_support(course_key, method) return True except NotImplementedError: return False
from salt.utils import migrations from salt.utils import kinds
context = {}
self.verify_success_on_file_content( 'username,cohort\nfoo_username,bar_cohort', mock_store_upload, mock_cohort_task )
AutoAuthPage(self.browser, course_id=self.course_id).visit()
recipient_selector_css = "input[name='send_to'][value='{}']".format(recipient) self.q(css=self._bounded_selector(recipient_selector_css))[0].click()
return auth_data
return self.find_css("#due_date").first.attrs('value')[0]
from __future__ import absolute_import import datetime import os import re import copy
try: fh_ = salt.utils.atomicfile.atomic_open(path, 'w') for line in new_file: fh_.write(line) finally: fh_.close()
[heappush(inertia, (ini[idx], k, coord_col[idx])) for idx in range(n_additions)]
'LICENSING': False,
def __init__(self, location, content): self.location = location self.content = content def get_id(self): return self.location.to_deprecated_son()
LETTUCE_SELENIUM_CLIENT = os.environ.get('LETTUCE_SELENIUM_CLIENT', 'local')
if 'open_in_browser_url' in self.context: self['page'] = self.context.pop('open_in_browser_url').rpartition('/')[0]
course_about = get_course_about_section(self.request, self.course, 'short_description') self.assertEqual(course_about, "A course about toys.")
return True
with self.assertNumQueries(0): embargo_api.message_url_path(self.course.id, "enrollment")
local_branch = local_rev = None
return None
instance = cls.current() json_data = json.loads(instance.configuration) if instance.enabled else {} return json_data
SOCIAL_MEDIA_FOOTER_URLS = {}
self._create_block_hierarchy()
if published.visible_to_staff_only: return False
minion = { 'master': 'salt', 'log_level': 'info', 'hash_type': 'sha256', }
ccx = CcxFactory(course_id=self.course.id, coach=self.coach) ccx_locator = CCXLocator.from_course_locator(self.course.id, unicode(ccx.id))
self.send_get(self.anonymous_client, expected_status=401) self.send_put(self.anonymous_client, "new_value", expected_status=401) self.send_delete(self.anonymous_client, expected_status=401)
if self.current_group: return self.current_group groups = user_partition.groups if not groups or len(groups) == 0: return None return groups[0]
if sp.issparse(X) and X.getformat() not in ["csr", "csc"]: X = X.tocsr()
return self.posterior.encode_conditional_params(X)
ret['result'] = __salt__['file.search']( name, '^[ \t]*{0}'.format(regex.lstrip('^')), multiline=True )
return get_course_cohort_settings(course_key).is_cohorted
self.get_selector('#certificate-exception').fill(student)
if isinstance(config[mod], dict): del config[mod]['enabled'] else: self._remove_list_item(config[mod], 'enabled')
for line in self.get_statistics(prefix): print(line)
if (not course_enrollment.refundable()) or skip_refund: return
self.assertEqual(safe_key('test', 5, 'version'), '5:version:test')
return
self.contentstore.delete(asset_key)
DEFAULT_GROUPS = []
import salt.returners import salt.utils.jid
return (self.large_width, self.large_height)
if RateLimitConfiguration.current().enabled: return func(*args, **kwargs) else: msg = "Rate limiting is disabled because `RateLimitConfiguration` is not enabled." LOGGER.info(msg) return
self.s_rng = make_theano_rng(seed, which_method="uniform")
reinit_crypto() sys.exit(salt.defaults.exitcodes.EX_OK)
self.reload_course() new_tab_ids = [tab.tab_id for tab in self.course.tabs] self.assertEqual(new_tab_ids, tab_ids + [removed_tab]) self.assertNotEqual(new_tab_ids, orig_tab_ids)
from __future__ import absolute_import import multiprocessing import ctypes import logging import os import hashlib import shutil import binascii
course_key = CourseKey.from_string(course_id) with modulestore().bulk_operations(course_key): response = get_course_topics(request, course_key) return Response(response)
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
ret['deploy_kwargs'] = deploy_kwargs
course_outline = self.api_response().data course_outline[0]['summary'].pop("id") self.assertEqual(course_outline[0]['summary'], expected_output)
from __future__ import absolute_import import os import sys from random import randint import grp
return Response(get_thread(request, thread_id))
self.assertEquals(course.tabs[2], {'type': 'discussion', 'name': 'Discussion'})
if self.target_id: assert len(self.xml_module_store.modules) == 1
info = prlctl('snapshot-list', name, runas=runas)
return set_system_date_time(years=int(dt_obj.strftime('%Y')), months=int(dt_obj.strftime('%m')), days=int(dt_obj.strftime('%d')))
check_is_fitted(self, 'estimator_') return self.estimator_.predict(X)
from __future__ import absolute_import import logging import time import decimal
httpretty.register_uri( httpretty.GET, "http://localhost:4567/api/v1/threads/{id}".format(id=thread["id"]), body=json.dumps(thread), status=200 )
self.setup_cohorts(self.course)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
COURSE_ENROLLMENT_CACHE_KEY = u"enrollment.{}.{}.mode"
import os import errno import logging import re import string
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
_ = lambda text: text
pass
from __future__ import absolute_import, print_function import os import copy import math import random import logging import operator import collections import json from functools import reduce
score_bucket = get_score_bucket(grade, max_grade)
import logging
changes[namespace] = { 'new': config, 'old': update_config, } return config
config = CourseOverviewImageConfig.current() if not config.enabled: return
tree = etree.Element('span')
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
train.algorithm.termination_criterion = EpochCounter(max_epochs=1) train.extensions.pop(0) train.save_freq = 0 train.main_loop()
for X in [X_1row, X_1col, X_list_1row, X_list_1row]:
result = super(NORB, self).get_topological_view(mat)
XBLOCK_MIXINS = ( LmsBlockMixin, InheritanceMixin, XModuleMixin, EditInfoMixin, AuthoringMixin, )
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_key_string)
clf = svm.LinearSVC(random_state=0).fit(X, Y) sp_clf = svm.LinearSVC(random_state=0).fit(X_sp, Y)
digits = datasets.load_digits() X = np.asarray(digits.data, 'float32') X, Y = nudge_dataset(X, digits.target)
import salt.config import salt.netapi
json_dict = kwargs.copy() json_dict['type'] = type_name return cls.from_json(json_dict)
return None
enabled_provider = provider.Registry.get(provider_id) if not enabled_provider: raise ValueError('Provider %s not enabled' % provider_id) return enabled_provider
return "library_content"
out = StringIO() DummyCommand().execute(*args, stdout=out, **kwargs) out.seek(0) return json.loads(out.read())
assert_true(world.css_has_value(css, date_or_time))
assert_false("the" in vocabulary)
'origin': 'git@github.com:MITx/content-mit-6002x.git',
pass
wait_for_present(css_selector=css, timeout=wait_time) return world.browser.find_by_css(css)
def left_op(imgs): return self.op(imgs, self.s_filters)
return cls.objects.create( enrolled_by=user, enrolled_email=email, state_transition=state_transition, reason=reason, enrollment=enrollment )
from __future__ import absolute_import
from salt.modules import qemu_nbd
raise NotImplementedError
course_masquerade = get_course_masquerade(user, course_key) return bool(course_masquerade and course_masquerade.user_name)
raise NotImplementedError
mock_get.return_value.content = "Error" self.assertRaises(EdxNotesParseError, helpers.get_notes, self.request, self.course)
out, err = DETAILS['server'].sendline(cmd)
COMPONENT_TYPES = ['discussion', 'html', 'problem', 'video']
if isinstance(address, int): self._check_int_address(address) self._ip = address return
from Crypto.Cipher import PKCS1_OAEP
from salt.minion import Matcher
h_mean = self.mean_h_given_v(v) h_mean_shape = (batch_size, self.nhid) h_sample = rng.binomial(size=h_mean_shape, n = 1, p = h_mean, dtype = h_mean.dtype)
from unit.transport.req_test import ReqChannelMixin from unit.transport.pub_test import PubChannelMixin
plsca = PLSCanonical(n_components=2) plsca.fit(X_train, Y_train) X_train_r, Y_train_r = plsca.transform(X_train, Y_train) X_test_r, Y_test_r = plsca.transform(X_test, Y_test)
if existing['code'] == 200:
try: syncing.remove(name) except KeyError: print( ' {LIGHT_RED}*{ENDC} {0} already synced??? ' '{1}'.format(name, output, **self.colors) )
with mock.patch('commerce.signals.refund_seat') as mock_refund_seat: self.send_signal() self.assertFalse(mock_refund_seat.called)
CreditRequirementStatus.objects.create( username=username, requirement=requirement, status='satisfied', reason={'final_grade': final_grade} )
return self.adjust_for_viewer(X)
course_overviews = CourseOverview.objects.all()
for item in ret: self.assertSaltTrueReturn(item)
if self.beta0 is not None: self.beta0 = np.atleast_2d(self.beta0) if self.beta0.shape[1] != 1: self.beta0 = self.beta0.T
if self.axis == 1: X = check_array(X, accept_sparse='csr', dtype=FLOAT_DTYPES, force_all_finite=False, copy=self.copy)
if library_role: library_role(self.lib_key).add_users(self.non_staff_user) if course_role: course_role(course.location.course_key).add_users(self.non_staff_user)
return sorted(returners_)
resultset = self.collection.find(query, record_filter)
app.release_serving()
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
print problem.get_html()
D = pairwise_distances(X) core3, label3 = dbscan(D, sample_weight=sample_weight, metric='precomputed') assert_array_equal(core1, core3) assert_array_equal(label1, label3)
x_p_nrm, y_p_nrm = norm(x_p), norm(y_p) x_n_nrm, y_n_nrm = norm(x_n), norm(y_n)
assert start >= 0 assert stop > start assert stop <= X.shape[0] X = X[start:stop, :] y = y[start:stop] assert X.shape[0] == y.shape[0]
filedata = json.dumps(subs, indent=2) filename = subs_filename(subs_id, language) return save_to_store(filedata, filename, 'application/json', item.location)
return course_metadata_utils.course_starts_within(self.start, days)
def __init__(self): self.modules = {'A': MockContext()}
subsection_css = ( ".course-navigation .chapter-content-container:nth-of-type({0}) " ".menu-item:nth-of-type({1})" ).format(sec_index + 1, subsec_index + 1)
component = self.store.publish(xblock.location, self.user_id) self.assertFalse(self.store.has_changes(component))
__opts__['test'] = orig_test if errors: __context__['retcode'] = 1 return errors return high_
if not found: return False
if is_jail(name): return 'Looks like there was an issue deleteing jail \ {0}'.format(name)
ret = msgpack.loads(msg, use_list=True, encoding=encoding)
import salt.utils import salt.utils.network import salt.utils.validate.net from salt.exceptions import ( CommandExecutionError, SaltInvocationError ) from salt.ext.six.moves import range
import salt.ext.six as six
try: import win32com import pythoncom import pywintypes HAS_WIN_LIBS = True except ImportError: HAS_WIN_LIBS = False
link_map = settings.MKTG_URL_LINK_MAP enable_mktg_site = microsite.get_value( 'ENABLE_MKTG_SITE', settings.FEATURES.get('ENABLE_MKTG_SITE', False) )
exc_info_on_loglevel=logging.DEBUG
self._auto_publish_no_children(item.location, item.location.category, user_id, **kwargs)
return { "has_access": self.has_access, "error_code": self.error_code, "developer_message": self.developer_message, "user_message": self.user_message }
grains['virtual_subtype'] = 'Xen PV DomU'
self.user = UserFactory(password=self.password, is_staff=True) self.client.login(username=self.user.username, password=self.password)
from __future__ import absolute_import
if env is not None and not isinstance(env, dict): ret['comment'] = ('Invalidly-formatted \'env\' parameter. See ' 'documentation.') return ret
self.assertFalse(self._has_changes(published_xblock.location))
context = { "request": get_request_or_stub() }
if not old_is_active: new_enrollment.update_enrollment(is_active=False, skip_refund=True)
self.initdb(default_ms) self._create_block_hierarchy() with self.assertRaises(InvalidVersionError): self.store.revert_to_published(self.vertical_x1a, self.user_id)
clf = ForestClassifier(random_state=0).fit(X, y)
self.draft_store.delete_course(course.id, self.dummy_user)
raise
if 'provider' in provider_config: provider_config['driver'] = provider_config.pop('provider')
return None
raise NotImplementedError("Not used")
ind -= total
import salt.utils import salt.utils.jid import salt.returners
coach_user = UserFactory( username='test_coach_user', email='test_coach_user@openedx.org', password='test' ) CourseCcxCoachRole(self.master_course_key).add_users(coach_user)
temp_poll_answers = self.poll_answers temp_poll_answers[self.poll_answer] -= 1 self.poll_answers = temp_poll_answers
with mock_create_basket(expect_called=False): response = self._post_to_view()
for trainer in self.trainers: for extension in trainer.extensions: extension.on_save(trainer.model, trainer.dataset, trainer.algorithm)
out = __salt__['cmd.run_all'](cmd, output_loglevel='trace', python_shell=False)
space, source = data_specs if not isinstance(source, tuple): source = (source,)
y_in_classes = in1d(y, classes) y_seen = y[y_in_classes] indices = np.searchsorted(sorted_class, y_seen) indptr = np.hstack((0, np.cumsum(y_in_classes)))
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) all_estimators = [GradientBoostingRegressor, GradientBoostingClassifier]
X = csr_matrix(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
self.run_function('cmd.run', ['truncate -s 0 {0}'.format(f)])
ret['hash_type'] = __opts__['hash_type']
request_context = get_template_request_context() if request_context: for item in request_context: context_dictionary.update(item) for item in context_instance: context_dictionary.update(item) if context: context_dictionary.update(context)
assert_raises(ValueError, ForestEstimator(oob_score=True, bootstrap=False).fit, X, y)
bytes_to_pad = AES.block_size - len(data) % AES.block_size return data + (bytes_to_pad * chr(bytes_to_pad))
result = {} for key in keys: if key in d: result[key] = d[key] return result
user: MYLOGIN apikey: JVkbSJDGHSDKUKSDJfhsdklfjgsjdkflhjlsdfffhgdgjkenrtuinv driver: softlayer
X, y = self._build_y(X, y, sample_weight)
form_descriptions = _get_form_descriptions(request)
y = np.array([3, 3, -1, -1, 2])
return self.def_ms.get_courses()
EMAIL_MIN_LENGTH = 3 EMAIL_MAX_LENGTH = 254
from salt.exceptions import CommandExecutionError import salt.utils
import salt.utils
return self._require_oauth_field("access_token")
EmptyPromise( lambda: cohort_name == cohort_management_page.get_selected_cohort(), "Waiting for new cohort" ).fulfill() cohort_management_page.add_students_to_selected_cohort([student])
regex = re.compile(r'^{0}\s+=\s+{1}$'.format(re.escape(name), re.escape(value)))
url = "{base}/course_modes/choose/{course_id}/".format( base=BASE_URL, course_id=self._course_id ) return url
restore_asset_from_trashcan(unicode(asset_key))
import logging import salt.utils import salt.utils.http
layers = [model.visible_layer] + model.hidden_layers
if self.io_loop is None: self.io_loop = tornado.ioloop.IOLoop.current()
components = sp.csr_matrix((data, indices, indptr), shape=(n_components, n_features))
if not hasattr(self, 'non_redundant'): self.non_redundant = False if not hasattr(self, 'mask_weights'): self.mask_weights = None
del self.async
X_dense = theano.sparse.dense_from_sparse(X) noise = self.random_stream.binomial(size=X_dense.shape, n=1, prob=self.ratio, ndim=None)
try:
from __future__ import absolute_import import pprint import textwrap
self.assertIn(self.student_name, self.certificates_section.last_certificate_invalidation.text) self.assertIn(notes, self.certificates_section.last_certificate_invalidation.text)
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
skip_if_no_data() data = stl10.STL10(which_set='train') data = stl10.STL10(which_set='test')
data = fetch_olivetti_faces() targets = data.target
__all__ = [ CodeResponse, NumericalResponse, FormulaResponse, CustomResponse, SchematicResponse, ExternalResponse, ImageResponse, OptionResponse, SymbolicResponse, StringResponse, ChoiceResponse, MultipleChoiceResponse, TrueFalseResponse, JavascriptResponse, AnnotationResponse, ChoiceTextResponse, ]
import salt.utils from salt.exceptions import CommandExecutionError try: import salt.utils.pycrypto HAS_CRYPT = True except ImportError: HAS_CRYPT = False
xml = etree.fromstring(expr) xml = self.formulaInstance.preprocess_pmathml(xml) test = etree.tostring(xml)
FROM_ABOUT_INFO = from_about_dictionary FROM_COURSE_PROPERTY = from_course_property FROM_COURSE_MODE = from_course_mode
return (router, ext_network)
if hasattr(self, '_target_space'): return self._target_space else: return self.get_output_space()
from __future__ import absolute_import import re
self.assertEqual(len(mail.outbox), 0)
ret['retcode'] = 1 return ret
self.page = LibraryUsersPage(self.browser, self.library_key) self.page.visit()
import yaml
dict_delitem(self, key) link_prev, link_next, key = self.__map.pop(key) link_prev[1] = link_next link_next[0] = link_prev
clf = TreeClassifier(class_weight=[{-1: 0.5, 1: 1.}], random_state=0) assert_raises(ValueError, clf.fit, X, _y)
course_url = u'/course/{}'.format(unicode(self.course.id)) self.assertEqual(xblock_studio_url(self.course), course_url)
from __future__ import absolute_import
__virtualname__ = 'fluent'
response = self.session.put( "{}/xblock/{}".format(STUDIO_BASE_URL, locator), data=json.dumps(data), headers=self.headers, )
indices = np.arange(n_features) generator.shuffle(indices) X[:, :] = X[:, indices]
from __future__ import absolute_import, print_function import math import time import copy from datetime import datetime, timedelta
certificates = Dict( display_name=_("Certificate Configuration"), help=_("Enter course-specific configuration information here (JSON format)"), scope=Scope.settings, )
import logging import pythoncom import threading
course_module = modulestore().get_course(course_id)
html_last_updated_fmt = '%b %d, %Y'
assert_array_equal(X_trans, [[0., 1., 0., 1., 1.], [1., 0., 1., 0., 1.]])
ret = self.run_function( 'state.template_str', [template], timeout=120 )
response = self.post_with_bearer_token('/oauth2-test/') self.assertEqual(response.status_code, status.HTTP_200_OK)
inputs = inputs[1:] neg_inputs = neg_inputs[1:]
exc_info_on_loglevel=logging.DEBUG
return super(AdaBoostRegressor, self).fit(X, y, sample_weight)
self.assertEqual(len(mail.outbox), 0)
idx = mapping if isinstance(flat, CompositeSpace): assert 0 <= idx < len(flat.components) return flat.components[idx] else: assert idx == 0 return flat
import logging
code = np.empty((n_samples, n_components)) slices = list(gen_even_slices(n_samples, _get_n_jobs(n_jobs)))
dest_usage_key = source_item.location.replace(name=uuid4().hex) category = dest_usage_key.block_type
from __future__ import absolute_import import logging
cputime_percent = (1.0e-7 * cputime / host_cpus) / vcpus
user = UserFactory.create(is_staff=True, is_superuser=True) user.save() self.client.login(username=user.username, password='test')
return PROCESSOR_MODULE.get_purchase_endpoint()
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, expensiveTest
rbmA_params = [numpy.asarray(q, dtype=config.floatX) for q in rbmA_params] rbmB_params = [numpy.asarray(q, dtype=config.floatX) for q in rbmB_params]
self._add_entrance_exam() self._pass_entrance_exam() self.init_course_access() self.api_response()
for pkg_name in ['track.contexts', 'track.middleware', 'dd.dogapi']: logging.getLogger(pkg_name).setLevel(logging.CRITICAL)
import pickle
task = host_ref.Destroy_Task()
from pylearn2.datasets.mnist import MNIST dataset = MNIST(which_set='train') data = numpy.asarray(dataset.X, dtype=config.floatX)
AutoAuthPage(self.browser, course_id=self.course_id).visit()
StudentModule.objects.create( student=user, course_id=self.course_key, module_state_key=problem_location, state=json.dumps({}) )
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.ext.six import integer_types
html_favicon = 'logos/favicon.ico'
if insecure: kwargs['insecure'] = True
flo = numpy.floor sub = numpy.subtract mul = numpy.multiply div = numpy.divide mod = numpy.mod
ret['comment'] += '\n\nChanges made: ' + comments
_, setting = self._get_setting_entry(field_name) setting.find_element_by_class_name('setting-clear').click()
from markdown.util import etree
return LocalFSReportStore.from_config(config_name='GRADES_DOWNLOAD')
self.find_css('button.action-add-group').first.click()
sparse_results = sparse_classifier.staged_decision_function( X_test_sparse) dense_results = dense_classifier.staged_decision_function(X_test) for sprase_res, dense_res in zip(sparse_results, dense_results): assert_array_equal(sprase_res, dense_res)
log = logging.getLogger(__name__)
available_version = salt.utils.alias_function(latest_version, 'available_version')
self.course_outline.visit()
EMAIL_OPTIN_MINIMUM_AGE = PARENTAL_CONSENT_AGE_LIMIT
pass
self.set_config(enabled=False)
if self.scope_ids.user_id is not None and user_id == self.scope_ids.user_id: if getattr(xmodule_runtime, 'position', None):
import jinja2 import jinja2.exceptions
response = self.client.get( '/verify_student/software-secure-fake-response' ) self.assertEqual(response.status_code, 404)
return True
assert left is not right assert left.fixed_vars is not right.fixed_vars assert left.on_load_batch is not right.on_load_batch
self._auto_auth({'username': 'test', 'course_id': course_id})
else: ret = _load_result(existing, ret)
self.courseware.go_to_sequential_position(2)
from __future__ import absolute_import import os
with check_mongo_calls(max_find.pop(0), max_send): with self.assertRaises(ItemNotFoundError): self.store.get_item(self.fake_location)
self.fit(X) return self.labels_
import salt.config import salt.payload import salt.utils.dictupdate
_make_archive_copy(instance)
if not view_func.__module__.startswith('wiki.'): return
self.send_future_map[message_id] = future
proc.start()
from salt.states import htpasswd
with self.assertRaises(LTIError): req = self.get_signed_grade_mock_request() self.xmodule.verify_oauth_body_sign(req)
return _click_edit(self, '.visibility-button', '.xblock-visibility_view', self._bounded_selector)
plt.scatter(X[:, 0], X[:, 1], c=targets_train, cmap=plt.cm.Paired)
clf = GradientBoostingClassifier(n_estimators=10, random_state=1) clf.fit(X, y)
optional = [ 'InstanceName', 'InternetChargeType', 'InternetMaxBandwidthIn', 'InternetMaxBandwidthOut', 'HostName', 'Password', 'SystemDisk.Category', ]
self.client.logout()
self.user = user
X = X.copy('F')
if len(names) == 1: return ret[names[0]] return ret
import salt.utils from salt.ext.six import string_types from salt.log.setup import LOG_LEVELS
destroy(vm_['name'])
if isinstance(value, basestring): return value return json.dumps(value, cls=EdxJSONEncoder)
problem = new_loncapa_problem(xml_str)
import salt.utils.http
ax[0, 0].hist(X[:, 0], bins=bins, fc='#AAAAFF', normed=True) ax[0, 0].text(-3.5, 0.31, "Histogram")
from __future__ import absolute_import
FEATURES['ENABLE_COURSEWARE_SEARCH'] = True
'mine_return_job': bool,
if self._course_key is None: self._course_key = SlashSeparatedCourseKey.from_deprecated_string(self._results_fields["course"]) return self._course_key
'master_roots': dict,
if 0 not in classes[j]: classes[j] = np.insert(classes[j], 0, 0) class_prob_j = np.insert(class_prob_j, 0, 0.0)
log.error('Minion process encountered exception: {0}'.format(exc)) os._exit(salt.defaults.exitcodes.EX_GENERIC)
self.q(css=self.NEXT_PAGE_BUTTON_CSS).click() self.wait_for_ajax()
return '{}[data-id="{}"] {}'.format( self.BODY_SELECTOR, self.locator, selector )
return self.cmap
if kwargs['shell'] is True: kwargs['executable'] = shell kwargs['close_fds'] = True
fake_data_api.reset() cached_details = api.get_course_enrollment_details(self.COURSE_ID)
xml_centric_courselike_key = self.get_key() adapt_references(courselike, xml_centric_courselike_key, export_fs) courselike.add_xml_to_node(root)
self.assertTrue(self.store.has_item(course.id.make_usage_key('html', "multi_parent_html")))
try: import tornado.testing import tornado.concurrent from tornado.testing import AsyncTestCase HAS_TORNADO = True except ImportError: HAS_TORNADO = False
fast_forward = None
resp = self.client.get_html( get_url(handler, course_key, 'course_key_string') ) self.assertEqual(resp.status_code, 200)
self.assertEqual( [logmsg_dbg.format(newmax)], handler.messages )
return len(tsql_query("SELECT database_id FROM sys.databases WHERE NAME='{0}'".format(database_name), **kwargs)) == 1
est.sparsify() assert_true(sparse.issparse(est.coef_)) pred = est.predict(X) assert_array_equal(pred, pred_orig)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import salt.utils
self._create_courses_and_enrollments( (self.TEST_ORG, True), (self.TEST_ORG, True), (self.TEST_ORG, True), )
try: do_email_change_request(user, email, activation_key) except ValueError as err: return err.message
fignum = 1
value = True if value == "true" else False
try: raise TypicalMemoryError("test") except TypicalMemoryError as e: pass
assert_greater(len(estimators), 0)
return {'name': name, 'changes': {}, 'result': False, 'comment': 'Invalidly formatted pkgs parameter. See ' 'minion log.'}
TASK_LOG.info(u'%s, Task type: %s, Finalizing detailed enrollment task', task_info_string, action_name) return task_progress.update_task_state(extra_meta=current_step)
'MILESTONES_APP': False,
parts = dn.split(r'.') leftmost = parts[0] remainder = parts[1:]
response = self._get_reverify_page() self.assertContains(response, "reverify-container")
stdin = kernel32.GetStdHandle(STD_INPUT_HANDLE) dupin = DuplicateHandle(srchandle=stdin, inherit=True)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
url = reverse('team_membership_detail', args=[team_id, username]) + '?admin=true' return self.make_call(url, expected_status, 'delete', **kwargs)
if all_students or delete_module: if not has_access(request.user, 'instructor', course): return HttpResponseForbidden("Requires instructor access.")
ret['changes'] = { 'testing': { 'old': 'Unchanged', 'new': 'Something pretended to change' } }
self.cohort_name = "OnlyCohort" self.setup_cohort_config(self.course_fixture) self.cohort_id = self.add_manual_cohort(self.course_fixture, self.cohort_name)
ret['changes'] = {}
if design_batch.ndim != 2: design_batch = dataset.get_design_matrix(design_batch) mapped_batch_design = dataset.mapback_for_viewer(design_batch) mapped_batch = dataset.get_topological_view(mapped_batch_design) return mapped_batch
optima = [self._constrained_optimization(obj_func, self.kernel_.theta, self.kernel_.bounds)]
return self.oauth2_adapter.create_public_client( name='Test Public Application', user=user, client_id=client_id, redirect_uri=DUMMY_REDIRECT_URL, )
riak.__salt__ = {}
super(CustomSVR, self).fit(X, y, sample_weight=sample_weight) self.data_type_ = type(X) return self
return False
#pylint: disable=E0602
os.remove(destdir) os.makedirs(destdir)
pass
parameters = {'alpha': alphas} fit_params = {'sample_weight': sample_weight} gs = GridSearchCV(Ridge(), parameters, fit_params=fit_params, cv=cv) gs.fit(X, y)
self.lc_block.max_count = 10 self.lc_block.capa_type = 'multiplechoiceresponse' self.lc_block.refresh_children() result = self.lc_block.validate()
import os import logging
return not enabled(name, runas=runas)
query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(None, query) self.assertIs(result, None)
course_locator = self._map_revision_to_branch(course_locator) return super(DraftVersioningModuleStore, self).get_course_history_info(course_locator)
import logging
self.payment_and_verification_flow.proceed_to_payment()
if isinstance(address, bytes): self.network_address = IPv4Address(address) self._prefixlen = self._max_prefixlen self.netmask = IPv4Address(self._ALL_ONES) #fixme: address/network test here return
split_test_module.user_partition_id = -1 [active_children, inactive_children] = split_test_module.active_and_inactive_children() self.assertEqual(active_children, []) self.assertEqual(inactive_children, children)
except (AttributeError, ValueError): violations['total'] = None return violations
course = get_course_and_check_access(course_key, user)
resp = self.client.get('/') self.assertEqual(resp.status_code, 200) self.assertContains(resp, 'footer-edx-v3')
rp = SparseRandomProjection(n_components=10, dense_output=False, random_state=0) rp = rp.fit(data) assert isinstance(rp.transform(data), np.ndarray)
if salt_token and self.resolver.get_token(salt_token): return True
from salt.modules import keystone
cache.clear()
P3P_HEADER = 'CP="Open EdX does not have a P3P policy."'
import os.path import re
self._original = dict((data, _zero_pad( data.get_topological_view().astype('float32'), self._pad_randomized)) for data in randomize_now)
face = sp.misc.imresize(face, 0.10) / 255.
from __future__ import absolute_import
if sparse: decay = .01
post_data['name'] = 'Another name'
from urllib.request import urlopen from urllib.error import HTTPError
item_locs.add( unicode(as_published(Location._from_deprecated_son(item['_id'], course_key.run))) )
from salt.states import redismod
for key, val in six.iteritems(params): params[key] = str(val)
self.url = reverse('instructor_dashboard', kwargs={'course_id': self.course_key.to_deprecated_string()}) self.email_link = '<a href="" data-section="send_email">Email</a>'
return not self == edit_info
exc_info_on_loglevel=logging.DEBUG
tokens = [x[1:-1].decode('utf8').replace("&#39;", "'") for x in lexer]
ret = self.run_run_plus(fun='fileserver.file_list', args=['backend="roots"']) self.assertIsInstance(ret['fun'], list)
import salt.ext.six as six
y = y.T
X = 1. / (np.arange(1, 11) + np.arange(0, 10)[:, np.newaxis]) y = np.ones(10)
self.advanced_settings.visit() self.assertTrue(self.advanced_settings.is_browser_on_page())
self.required_html_ids = [descriptor.location.html_id() for descriptor in self.descriptor.get_required_module_descriptors()]
self.load_data()
self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p()
config = sconfig.master_config('/etc/salt/master') self.assertEqual(config['log_file'], env_fpath) os.environ.clear() os.environ.update(original_environ)
import salt.ext.six as six from salt.ext.six.moves.urllib.error import URLError from salt.ext.six.moves.urllib.request import urlopen
import salt.utils import salt.utils.itertools from salt.exceptions import CommandExecutionError, MinionError
self.assertNotEqual(discussion_item.discussion_id, '$$GUID$$')
course_outline_page = CourseOutlinePage( self.browser, self.course_info['org'], self.course_info['number'], self.course_info['run'] ) course_outline_page.visit()
HAS_LIBS = False try: import splunklib.client from splunklib.client import AuthenticationError from splunklib.binding import HTTPError HAS_LIBS = True except ImportError: pass
X_pred_transformed = kpca.transform(X_pred) assert_equal(X_pred_transformed.shape[1], X_fit_transformed.shape[1])
dump_data = self.serial.dumps(data, use_bin_type=True)
external_solver = ['Isomap', 'KernelPCA', 'LocallyLinearEmbedding', 'RandomizedLasso', 'LogisticRegressionCV']
self.assertEqual(fire_event_mock.call_args[0][0]['fun'], 'test.echo')
ttype = 'zeromq'
#self.assertEqual(iptables.build_rule(jump='CONNSECMARK',
with patch_edxnotes_api_settings("http://example.com"): self.assertEqual("http://example.com/", get_endpoint_function())
return False
from __future__ import absolute_import, print_function import os import pwd import time import signal import optparse import subprocess import random import tempfile import shutil import sys
for child in children_map[block_to_remove]: for parent in parents_map[block_to_remove]: removed_children_map[parent].append(child)
continue
continue
user = User.objects.get(username=self.USERNAME) request = RequestFactory().get('/url') request.user = user account_settings = get_account_settings(request)
#source_encoding = 'utf-8-sig'
self.assertFalse(result['success']) self.assertIn(u"payment was declined", result['error_html'])
self.client.logout() response = self.client.post(reverse('commerce:checkout_receipt')) self.assertEqual(response.status_code, 302)
name = str(name)
if cherrypy.request.method == 'OPTIONS': cherrypy.serving.request.handler = cors_handler
return self._decision_function(X)
raise
self.assertEquals(xmodule_tabs.CourseTabList.get_tab_by_type(self.course.tabs, tab.type), tab)
self.settings_detail.visit() self.assertTrue(self.settings_detail.is_browser_on_page())
return self.q(css=self.search_bar_selector).present
is_increasing = assert_warns_message(UserWarning, "interval", check_increasing, x, y)
ORA2_FILE_PREFIX = ENV_TOKENS.get("ORA2_FILE_PREFIX", ORA2_FILE_PREFIX)
self.assert_social_auth_exists_for_user(request.user, strategy) self.assert_account_settings_context_looks_correct(account_settings_context(request), request.user, linked=True)
return anonymous_id_for_user(user, None, save=save)
packages_really_to_remove.append(this_package)
from __future__ import unicode_literals
if not isinstance(course_id, basestring): raise ValueError('course_id must be a string. {} is not acceptable.'.format(type(course_id)))
lush_magic = { 507333717: 'uint8', 507333716: 'int32', 507333713: 'float32', 507333715: 'float64' }
self.assertEqual(result.get(), "succeeded") rerun_state = CourseRerunState.objects.find_first(course_key=split_rerun_id) self.assertEqual(rerun_state.state, CourseRerunUIStateManager.State.SUCCEEDED)
self.assertInUnsucceededCourseActions(destination_course_key)
from __future__ import absolute_import import copy import contextlib
reqs = CreditRequirement.get_course_requirements(course_key)
CourseEnrollmentFactory( is_active=True, course_id=self.course.id, user=self.user )
if is_updated or asides_updated: new_structure = self.version_structure(course_key, original_structure, user_id) block_data = self._get_block_from_structure(new_structure, block_key)
task_folder = task_service.GetFolder(location)
self.assertEqual(1, 1)
self._xblock_map = {}
raise NotImplementedError
try: del self._process_map[pid] except KeyError: pass
assert isinstance(sls_data, OrderedDict) assert not isinstance(yml_data, OrderedDict)
from __future__ import absolute_import
batch_names = ['monitoring_%s' % s for s in self._flat_data_specs[1]] theano_args = self._flat_data_specs[0].make_theano_batch(batch_names)
self._check_linkedin_visibility(False)
if gateway is not None: if not salt.utils.validate.net.ipv4_addr(gateway): errors.append('Gateway IP {0} is invalid.'.format(gateway))
assert_raises(Exception, getattr(delegator, method), delegator_data.fit_args[0])
if not isinstance(notes, list): notes = [notes] for note in notes: self.notes.append(note)
from salt.modules import haproxyconn
import os.path import shutil
request_password_change(self.EMAIL, self.ORIG_HOST, self.IS_SECURE)
return [ {k: kwargs[k]} for k in sorted(six.iterkeys(kwargs)) ]
import sys import contextlib import os from salt.ext.six.moves import range from salt.ext.six.moves import map
age = opts.get('fileserver_list_cache_time', 30) + 1
clf_multi_loss = log_loss(y, clf_multi.predict_proba(X)) clf_wrong_loss = log_loss(y, clf_multi._predict_proba_lr(X)) assert_greater(clf_wrong_loss, clf_multi_loss)
course_key = self.make_course_key(org, course, run) if course_key in self.mappings and self.mappings[course_key].has_course(course_key): raise DuplicateCourseError(course_key, course_key)
if modules_max_memory is True: resource.setrlimit(resource.RLIMIT_AS, old_mem_limit) self.module_refresh.value = False
ica = FastICA(n_components=1, whiten=False, random_state=0) assert_warns(UserWarning, ica.fit, m) assert_true(hasattr(ica, 'mixing_'))
assert V is orig_V assert drop_mask is orig_drop_mask
caption_line_selector = ".subtitles li[data-index='{index}']".format(index=line_number - 1) attributes = self.q(css=caption_line_selector).attrs('class') return 'focused' in attributes
from __future__ import absolute_import import logging
self.assertFalse(self.post.called) self.assertTrue(logger.error.called)
self._conv_op = GpuDnnConv() self._desc = GpuDnnConvDesc(border_mode=border_mode, subsample=self._subsample, conv_mode='conv')
super(SurveyForm, self).save(*args, **kwargs)
unavailable_certificates = \ [cert for cert in generated_certificates if cert.status == CertificateStatuses.unavailable and cert.grade == default_grade]
log.error(err)
from __future__ import absolute_import import socket import logging
course_names = self.dashboard_page.wait_for_page().available_courses self.assertIn(self.course_info["display_name"], course_names)
course = CourseFactory.create(default_store=modulestore_type, run="TestRun", **course_kwargs) self.check_course_overview_against_course(course)
assert start >= 0 assert stop > start assert stop <= X.shape[0] X = X[start:stop, :] y = y[start:stop, :] assert X.shape[0] == y.shape[0]
y1 = np.append(y1, [2] * 4) y2 = np.append(y2, [2] * 4) assert_equal(cohen_kappa_score(y1, y2, labels=[0, 1]), kappa)
self.assertEqual(len(self.certificates_page.certificates), 1)
src_x, src_y = src_dimensions target_x, target_y = target image_x, image_y = image.size
random_state = self.random_state_ if random_init else None
block = modulestore().get_item(block_location) block.group_access = access_dict modulestore().update_item(block, 1)
return etree.Element('truefalseresponse')
iris = load_iris() perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
if not using_ip_for_id and 'append_domain' in opts: opts['id'] = _append_domain(opts) if append_master: opts['id'] += '_master'
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
import yaml
assets, count = content_store.get_all_content_for_course(course.id) self.assertEqual(count, 2)
W_irange = 2 / numpy.sqrt(nvis * nhid)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, mock_open, patch, NO_MOCK, NO_MOCK_REASON )
return xblock._edit_info.get('edited_on')
if socks.get(timer_in) == zmq.POLLIN: sec_event = serial.loads(timer_in.recv())
return tenant_id
y1 = ir.predict([min(x) - 10, max(x) + 10]) assert_equal(sum(np.isnan(y1)), 2)
n_leaves = n_samples children = [c[::-1] for c in children]
source = "/foo/bar/fubar.pkg" package_id = "com.foo.fubar.pkg"
bindvolumes = volumes
self.assertNotContains(response, "How it Works") self.assertNotContains(response, "Find courses") self.assertNotContains(response, "Schools & Partners")
CELERY_RESULT_BACKEND = 'djcelery.backends.cache:CacheBackend'
response_element = etree.Element("stringresponse")
assert_array_almost_equal(clf.coef_, clf_balanced.coef_, 6)
probas = self.predict_proba(X) return self.classes_[np.argmax(probas, axis=1)].ravel()
block = modulestore().get_course(course.id, depth=None) for __ in range(depth - 1): children = block.get_children() block = children[-1]
self.expect_error_on_file_content( 'username,email\n', "The file must contain a 'cohort' column containing cohort names." )
return (tok.lower() for tok in re.findall(r"\w+", doc))
attempt.created_at = attempt.created_at - timedelta(days=364) attempt.save()
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
ENROLLMENT_COURSE_DETAILS_CACHE_TIMEOUT = ENV_TOKENS.get('ENROLLMENT_COURSE_DETAILS_CACHE_TIMEOUT', 60)
vals['type'] = 'acl' if comps[0] == 'default': vals['type'] = 'default' comps.pop(0)
for key in locations: self.assertFalse(self._has_changes(locations[key]))
overview = CourseOverview.get_from_id(course.id)
import os import stat import string import logging
return self.header_description.startswith(u"Showing results for")
return False
parent = kwargs.pop('parent', None) or store.get_item(parent_location)
args = [_sdecode(name)] args.extend(_normalize_args(command))
grads = coef_grads + intercept_grads self._optimizer.update_params(grads)
puppet.__salt__ = {}
run_once = True
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
self._assert_num_requests(1)
response = salt.utils.vmware.esxcli(host, username, password, cmd, protocol=protocol, port=port) ret.update({host: response})
ret.__opts__ = {} ret.__salt__ = {}
course = get_course_overview_with_access(user, 'staff', course_id) return bool(has_access(user, 'staff', course))
command = self.command.Command() return command.handle(*args, **kwargs)
_win(kernel32.GetCurrentProcess, wintypes.HANDLE)
ret['msg'] = _urlopen(url, timeout=timeout).read().splitlines()
assert sreq.send_auto({}) == {'enc': 'clear', 'load': {}}
import salt.utils.cloud import salt.config as config from salt.exceptions import ( SaltCloudNotFound, SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
__virtualname__ = 'service'
pass
r1sq = rnorm**2 - dampsq * xxnorm r1norm = sqrt(abs(r1sq)) if r1sq < 0: r1norm = -r1norm r2norm = rnorm
return datetime.datetime.utcnow().replace(tzinfo=utc)
return unicode(obj)
uuid = request["parameters"]["request_uuid"] with self.assertNumQueries(3): api.update_credit_request_status(uuid, self.PROVIDER_ID, "approved")
import salt.returners import salt.utils.jid import salt.exceptions from salt.exceptions import CommandExecutionError
import salt.config import salt.loader from salt.modules import boto_elb
self._set_block_values(block_structure, self.transform_data_key)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
ip_address = "192.168.10.20" IPFilter.objects.create( blacklist=ip_address, enabled=True )
@ignore_warnings(category=DeprecationWarning) def test_eval(self): if not self.do_test_eval:
import integration import salt.utils
urlpatterns += patterns( 'contentstore.views',
multi_device_support = False
import salt.ext.six as six
from __future__ import absolute_import
salt '*' vsphere.list_non_ssds my.esxi.host root bad-password
import copy import threading import collections from contextlib import contextmanager
ItemFactory.create( category="html", parent_location=library.location, user_id=self.user_id, publish_item=False, modulestore=self.store, data=message ) library = self.store.get_library(library.location.library_key)
X = check_array(X, copy=whiten, dtype=FLOAT_DTYPES).T
import salt.returners import salt.utils.jid import salt.exceptions
return policy.get(policy_key(usage_id), {})
n_classes = n_classes.astype(theano.config.floatX) return sm * (1 - n_classes * min_val) + min_val
header = [field for field in output[0].lower().split(" ") if field] del output[0]
cap = pcapy.open_live(self.iface, 65536, 1, 0)
ret['result'] = None
no_ids = [] self.reload_course() for textbook in self.course.pdf_textbooks: del textbook["id"] no_ids.append(textbook) self.assertEqual(no_ids, textbooks)
from __future__ import absolute_import
option1 = main1
sequential_open_distrib = {} for row in db_query: row_loc = course_id.make_usage_key_from_deprecated_string(row['module_state_key']) sequential_open_distrib[row_loc] = row['count_sequential']
'retry_dns': float,
extract_dir_relative = path.relpath(extract_dir, settings.DATA_DIR)
if hasattr(clusterer, "random_state"): clusterer.set_params(random_state=0)
import salt.utils import salt.payload
salt '*' vsphere.coredump_network_enable my.esxi.host root bad-password True
from salt.modules import drac
instructor_user = UserFactory( username='test_instructor_user', email='test_instructor_user@openedx.org', password='test' ) CourseInstructorRole(self.master_course_key).add_users(instructor_user)
return models.AccessToken.objects.get(token=token_string)
log = logging.getLogger(__name__)
input_element.click() input_element.send_keys(Keys.CONTROL + 'a') input_element.send_keys(value) return input_element
if 'connection_default_file' in kwargs: get_opts = False else: get_opts = True
self.event[u'old'] = self.event[u'current_tab'] self.event[u'new'] = self.event[u'current_tab'] + self.offset
raise ItemNotFoundError(destination_course)
for dtype in ['f8', 'f4']: A = A.astype(dtype) B = B.astype(dtype)
import logging
page = StaffPage(self.browser, self.course_id) EmptyPromise(page.is_browser_on_page, 'Browser is on staff page in LMS').fulfill() return page
return (len(active_groups) + len(inactive_groups) == len(container.xblocks) - 1, len(active_groups))
return self._grade_answers(None)
key = self.__read_master_key() if key == self.key: return payload self.key = key payload_kwargs['key'] = self.key payload = channel.send(payload_kwargs)
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch
from __future__ import absolute_import
result = self.collection.update( {'_id': location.to_deprecated_son()}, {'$set': update}, multi=False, upsert=allow_not_found,
from __future__ import absolute_import import logging import string import json import datetime
url_path = ""
import integration from salt.exceptions import CommandExecutionError
CACHE_TIMEOUT = 0
trigger_time = datetime.now(UTC) return CoursewareSearchIndexer.index( store, self.course.id, triggered_at=trigger_time, reindex_age=(trigger_time - since_time) )
total_n_estimators = self.n_estimators if total_n_estimators < self.estimators_.shape[0]: raise ValueError('resize with smaller n_estimators %d < %d' % (total_n_estimators, self.estimators_[0]))
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
ANALYTICS_DATA_URL = ENV_TOKENS.get("ANALYTICS_DATA_URL", ANALYTICS_DATA_URL) ANALYTICS_DATA_TOKEN = AUTH_TOKENS.get("ANALYTICS_DATA_TOKEN", ANALYTICS_DATA_TOKEN)
DEBUG = True
block = self._add_simple_content_block()
with self.assertRaises(Http404): self.get_form(expected_valid=False)
course_publish_orphans = self.store.get_orphans(course_locator_publish)
return True
if config_file_path.endswith(suffix_to_strip): config_file_full_stem = config_file_path[0:-len(suffix_to_strip)] else: config_file_full_stem = config_file_path
state_run = self.run_function('state.sls', mods='requisites.listen_simple')
expected_response = { "enabled": False } self._verify_cohort_settings_response(expected_response)
import salt.ext.six as six
return ACCESS_GRANTED if (can_load() or can_enroll()) else ACCESS_DENIED
from __future__ import absolute_import import os
CELERYD_PREFETCH_MULTIPLIER = 1
ASSET_AMOUNT_PER_TEST = (0, 1, 10, 100, 1000, 10000)
self.assertIsNone(get_template_request_context())
from unit.transport.req_test import ReqChannelMixin from unit.transport.pub_test import PubChannelMixin
B, IR, IC, C = ishp4 K, KR, KC, CH = kshp4
time.sleep(0.5)
if '..' in template: log.warning( 'Discarded template path \'{0}\', relative paths are ' 'prohibited'.format(template) ) raise TemplateNotFound(template)
assert_array_almost_equal(X_truth[:, 2], out_X_unstructured[4]) assert_array_almost_equal(X_truth[:, 2], out_X_structured[4])
course_id = CourseKeyField(max_length=255, db_index=True, unique=True)
scalers = [StandardScaler(with_mean=False, with_std=False), MinMaxScaler(), MaxAbsScaler()]
assert_array_almost_equal( X_dense.astype(dtype), X2_dense, 4) assert_array_almost_equal( y_dense.astype(dtype), y2, 4)
error_msg = "XQueue could not decode grade request" self._send_immediate_response(False, message=error_msg)
searcher = SearchEngine.get_search_engine(index_name)
column = info[0].index('LoadPercentage')
y = 0.5 * X.ravel() + rng.randn(n_samples, 1).ravel()
if openid_request.mode == 'checkid_immediate': return provider_respond(server, openid_request, openid_request.answer(False), {})
cohort = CohortFactory(course_id=self.course.id, users=[]) self._verify_non_staff_cannot_access( remove_user_from_cohort, "POST", [unicode(self.course.id), cohort.id] )
for choice in subset_choices: choicegroup.append(choice)
for i in range(len(group) - 1): connections.append((group[i], group[i + 1]))
return self._is_element_visible("#comment_{} .response-body".format(comment_id))
if usage_id_filter is None and usage_key_filter is not None: usage_id_filter = usage_key_filter
wf = wf_cls(window_shape=(3, 3), randomize=[ddata], flip=flip)
EmptyPromise(lambda: self.q(css='.bookmark-button').visible, "Bookmark button visible").fulfill() return True
import logging
bulk_ops_record.nest()
from salttesting.unit import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON ensure_in_syspath('../..')
salt '*' schedule.list show_disabled=False
self.wait_for_element_visibility( self._bounded_selector(self.ADDER_SELECTOR), "Adder is visible." )
problem = new_loncapa_problem(xml_str)
self.assertEqual(response.status_code, 200) result = json.loads(response.content)
if self.index is None: return []
get_version = { 'Linux': linux_cpustats, 'FreeBSD': freebsd_cpustats, }
self.assertEqual(new_version.location, target_location)
result_dict = json.loads(response.content)
return (security_group, name, description)
payment_support_email = microsite.get_value('payment_support_email', settings.PAYMENT_SUPPORT_EMAIL)
if on_rtd: os.environ['DJANGO_SETTINGS_MODULE'] = 'lms' else: os.environ['DJANGO_SETTINGS_MODULE'] = 'lms'
request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO["username"])
ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))
import salt.utils from salt.exceptions import CommandExecutionError
return self.qty * self.unit_cost
sample_weight, estimator_weight, estimator_error = self._boost( iboost, X, y, sample_weight)
course = self.store.get_course(course.id) self.assertEqual(len(course.children), 1) self.assertNotIn(dangling_pointer, course.children)
milestones_api.add_course_milestone(course_key, 'requires', milestone)
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandExecutionError
self.assertIn(draft_html.location, public_vertical.children)
fake_key = SlashSeparatedCourseKey('a', 'b', 'c') self.assertRaises(Http404, lambda: cohorts.is_course_cohorted(fake_key))
self._create_block_hierarchy() self.store.publish(self.course.location, self.user_id)
test_model = CourseMetadata.fetch(self.fullcourse) self.assertNotIn('giturl', test_model)
html5_id_to_remove = [x for x in videos['html5'] if x != html5_id] if html5_id_to_remove: remove_subs_from_store(html5_id_to_remove, item)
store.delete_course(refetch_course.id, user)
self.wait_for_element_visibility( '#alert-confirmation-title', 'Alert confirmation title element is available' ) return self.get_element('#alert-confirmation-title')
self.emails_sent += new_subtask_status.succeeded return update_subtask_status(entry_id, current_task_id, new_subtask_status)
token_query = dop_models.AccessToken.objects.select_related('user') return token_query.filter(token=access_token).first()
clf = mixture.GaussianMixture(n_components=2, covariance_type='full') clf.fit(X_train)
if hasattr(self, 'oob_improvement_'): self.oob_improvement_.resize(total_n_estimators) else: self.oob_improvement_ = np.zeros((total_n_estimators,), dtype=np.float64)
if len(names) == 1: return ret[names[0]] return ret
rval = X.copy()
batch_unsubscribe = mailchimp.listBatchUnsubscribe result = batch_unsubscribe(id=list_id, emails=emails, send_goodbye=False, delete_member=False) log.debug(result)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from salt.modules import hg
nonce = '0123456789012345678901234567890123456789012345678901234567890123' self.assertTrue(SignatureValidator(self.lti_consumer).check_nonce(nonce))
import json import logging import uuid import time
from __future__ import absolute_import
score += _loglikelihood(topic_word_prior, self.components_, dirichlet_component_, n_features)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
students_already_have_certs = User.objects.filter( ~Q(generatedcertificate__status=CertificateStatuses.unavailable), generatedcertificate__course_id=course_id)
set_prerequisite_courses(course.id, [unicode(pre_requisite_course.id)]) completed_milestones = milestones_achieved_by_user(student, unicode(pre_requisite_course.id)) self.assertEqual(len(completed_milestones), 0)
CourseModeFactory.create( course_id=self.course_key, mode_display_name="Verified Expired", mode_slug="verified_expired", expiration_datetime=past )
if task.State == TASK_STATE_RUNNING: return 'Task already running'
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON
staff = set(CourseStaffRole(course_key).users_with_role()).union(instructors)
self.assertFalse(linode._validate_name('foo-'))
try: self[key] except KeyError: return default
import ddt from mock import call, patch from nose.plugins.attrib import attr import before_after
from salt.modules import znc
etcd_mod.__opts__ = {} etcd_mod.__utils__ = {}
self.page.visit()
self.suffix_map['.pyx'] = tuple()
'msg': '', 'drag_and_drop_json': json.dumps(user_input)
self._create_and_purchase_verified(student, course.id)
sysbench.__salt__ = {}
context = { "profiles": [self.TEST_PROFILE], "allow_cache_miss": "True" if allow_cache_miss else "False" } return self.video.student_view_data(context)
fd_, adminfile = salt.utils.mkstemp(prefix="salt-", close_fd=False)
log.info('Starting the Salt Publisher on {0}'.format(pub_uri)) pub_sock.bind(pub_uri)
return ''
#pylint: disable=E0602
self.assertNotContains(response, "How it Works") self.assertNotContains(response, "Find courses") self.assertNotContains(response, "Schools & Partners")
self.workd = _aligned_zeros(3 * n, self.tp) self.workl = _aligned_zeros(self.ncv * (self.ncv + 8), self.tp)
validate = URLValidator() try: validate(url) return True except ValidationError: return False
assert_true(id1, id2)
lib = glob.glob(os.path.join( '/opt/local/lib', 'libcrypto.so*')) lib = lib[0] if len(lib) > 0 else None
import numpy as np import matplotlib.pyplot as plt from sklearn import neighbors
self.assertEqual(certificate_statuses.count(CertificateStatuses.generating), 8) self.assertEqual(certificate_statuses.count(CertificateStatuses.unavailable), 2)
class KwargsStruct(object): def __init__(self, **entries): self.__dict__.update(entries)
renderers = salt.loader.render(__opts__, __salt__) config = {}
#pepa_grains:
if comps[0] == 'user' and not comps[1]: comps[1] = user elif comps[0] == 'group' and not comps[1]: comps[1] = group vals[comps[0]] = comps[1]
import logging
created_time = models.DateTimeField(auto_now_add=True)
self.course_enrollment = CourseEnrollment.enroll(user=self.user, course_key=self.course_id, mode=self.mode) self.save()
salt '*' win_update.install_updates categories="['Critical Updates']"
if not get_override_for_user(student, unit, 'due'): raise DashboardError(_("No due date extension is set for that student and unit."))
available_version = salt.utils.alias_function(latest_version, 'available_version')
try: import SoftLayer HAS_SLLIBS = True except ImportError: HAS_SLLIBS = False
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
if noise > 0.0: y += generator.normal(scale=noise, size=y.shape)
X_homo = X + sigma * rng.randn(n_samples, n_features)
from __future__ import absolute_import, print_function
return parse(out)
TEMPLATE_NAME = None
('union', FeatureUnion( transformer_list=[
self.user.is_active = False self.user.save()
mode = 1 M_matvec = None Minv_matvec = None if Minv is not None: raise ValueError("Minv should not be " "specified with M = None.")
log.error('Received local command remotely! Ignoring: {0}'.format(msg)) return
result = _chkconfig_is_enabled(name, runlevel) if result: return True
self.assertEquals(2, len(response_results)) self.assertEquals(True, response_max_exceeded)
test_invalid_token("AAAAAAAAAAAAAAAAAAAAAC6iLXGhjkFytJoJSBJZzJ4=", "padding")
self.assertEqual(response.status_code, 400)
ground_truth_coef = rng.randn(n_features) y = np.dot(X, ground_truth_coef)
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
task_folder = task_service.GetFolder(location)
self.assert_enrollment_status( as_server=True, mode=None, is_active='foo', expected_status=status.HTTP_400_BAD_REQUEST )
def __get_s3_meta(bucket, key=key, keyid=keyid): return s3.query( key=key, keyid=keyid, kms_keyid=keyid, bucket=bucket, service_url=service_url, verify_ssl=verify_ssl, location=location, return_bin=False)
override_field_for_ccx(self.ccx, self.course, field, value)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return grade_request['xqueue_header']
self.clear.mminion.returners = {'.prep_jid': lambda x: 1}
if self.eigen_solver == 'auto': if K.shape[0] > 200 and n_components < 10: eigen_solver = 'arpack' else: eigen_solver = 'dense' else: eigen_solver = self.eigen_solver
scov = np.cov(X, rowvar=0., bias=1.)
__virtualname__ = 'ntp'
urls = _get_default_profile_image_urls()
if self.opts['transport'] in ('zeromq', 'tcp'): key_dirs = self._check_minions_directories() else: key_dirs = self._check_minions_directories()
if not inspect.isclass(filt): continue
files = {} for pid in pids: ppath = '/proc/{0}'.format(pid) try: tids = os.listdir('{0}/task'.format(ppath)) except OSError: continue
try: result = CourseTeam.objects.get(team_id=team_id) except ObjectDoesNotExist: raise CommandError(u"Argument {0} is not a course_team team_id".format(team_id)) return result
new_data = new_data.reshape((4, 11, -1)) real_data = digits.data[:44].reshape((4, 11, -1))
from __future__ import absolute_import
self.publish(block_list_parents_to_publish)
if not course_key_string or not action_state_id: return HttpResponseBadRequest()
from __future__ import absolute_import import random import string from copy import deepcopy
section = self.course_outline_page.section(SECTION_NAME) subsection = section.subsection(SUBSECTION_NAME) unit = subsection.expand_subsection().unit(UNIT_NAME) return (section, subsection, unit)
self.create_programs_config(enable_studio_tab=False) response = self.client.get(self.path) self.assertEqual(response.status_code, 404)
non_default_count = pos_count - pos_default_count for name in positional[:non_default_count]: annotation = annotations.get(name, _empty) parameters.append(Parameter(name, annotation=annotation, kind=_POSITIONAL_OR_KEYWORD))
def fit(self, X, y): self.y = y return self def predict(self, X): return self.y
pipe2 = clone(pipe) assert_false(pipe.named_steps['svc'] is pipe2.named_steps['svc'])
EmptyPromise( lambda: cohort_name == cohort_management_page.get_selected_cohort(), "Waiting for new cohort" ).fulfill() cohort_management_page.add_students_to_selected_cohort([student])
USE_I18N = True
self.active = False self.save()
srcpath = srcpath + '/'
self.client.logout() response = self.client.get( '/verify_student/software-secure-fake-response' ) self.assertEqual(response.status_code, 302)
module = CapaFactory.create(attempts=1, done=True)
network.__grains__ = {} network.__salt__ = {}
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
git_import.add_repo(self.TEST_REPO, repo_dir / 'edx4edx_lite', self.TEST_BRANCH)
self._verify_xblock_info_state(xblock_info, 'staff_only_message', expected_state, path)
if sp.issparse(X): centers[c] = X[best_candidate].toarray() else: centers[c] = X[best_candidate] current_pot = best_pot closest_dist_sq = best_dist_sq
self._auto_auth(self.USERNAME, self.EMAIL, False) self.courseware_search_page.visit()
enable_sigusr1_handler()
if CourseMode.is_white_label(course_id): course_mode = CourseMode.DEFAULT_SHOPPINGCART_MODE_SLUG else: course_mode = None
out, err = DETAILS['server'].sendline(cmd)
self.assertEqual(response.status_code, 200)
pca = PCA(svd_solver='full') pca.fit(X) assert_almost_equal(pca.explained_variance_ratio_.sum(), 1.0, 3)
return Fragment(self.FRAG_CONTENT)
__virtualname__ = 'smartos'
else: self.append_subcluster(subcluster) return True
self.assertTrue(fstats_post.st_mtime, fstats_orig.st_mtime-age)
self._create_block_hierarchy() self.store.publish(self.course.location, self.user_id)
from __future__ import absolute_import
_win(advapi32.CreateProcessWithLogonW, wintypes.BOOL,
self.q(css='a.action-export').click()
course_names = self.dashboard_page.wait_for_page().available_courses self.assertIn(self.course_info["display_name"], course_names)
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course_key))
import integration
import re import logging from salt.ext.six import string_types
from salt.states import mac_defaults as macdefaults
if tag_key is None: tag_key = self.__class__.__name__ self._tag_key = tag_key
stochastic = None
with self.assertRaises(SearchIndexingError): reindex_course_and_check_access(self.course.id, self.user)
if salt.utils.is_windows(): fp_.close() try: os.unlink(fn_) continue except OSError: continue
'ENABLE_INSTRUCTOR_BACKGROUND_TASKS': True,
au_rule.delete() self._assert_history([])
ranks = {'leaves': []} colors = {'bounds': None}
return not self.q(css=CSS_CLASS_NAMES['video_spinner']).visible
active_reg_button = not(registered or is_course_full or not can_enroll)
break
time.sleep(1) if not os.path.isfile(dest): _unlock_cache(lk_fn) return False
from urllib.request import urlopen
saltenv = env
return self._string
),
if is_feature_enabled(): BACKEND.enable_microsites(log)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
dataset = obj
from docutils.statemachine import ViewList self.content = ViewList(lines, self.content.parent)
X = check_array(X, order='C', dtype='float64') assert_raises(ValueError, clf.fit, X, y, check_input=False)
checks = (get_pending_update, get_pending_file_rename, get_pending_servermanager, get_pending_component_servicing, get_pending_computer_name, get_pending_domain_join)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'vsphere', vm_['profile'], vm_=vm_) is False: return False
self.assertNotIn('proctoring', section_actual)
self.q(css='.action-edit-members').first.click() self.wait_for_ajax()
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
return self._get_bulk_ops_record(course_key, ignore_case).active
assert_raises(ValueError, auc, [0.0, 0.5, 1.0], [0.1, 0.2])
return stdout
try: model.add_polyak_channels(self._worker.param_to_mean, algorithm.monitoring_dataset) except AttributeError: pass
if item in ['constraint']: cmd += [item_type]
PARTNER_SUPPORT_EMAIL = ENV_TOKENS.get('PARTNER_SUPPORT_EMAIL', PARTNER_SUPPORT_EMAIL)
clear_cmd = '/usr/sbin/svcadm clear {0}'.format(name) __salt__['cmd.retcode'](clear_cmd, python_shell=False) return not __salt__['cmd.retcode'](cmd, python_shell=False)
from __future__ import absolute_import
from salttesting.unit import TestCase from salttesting.helpers import ensure_in_syspath
if params: parameters.update(params)
from __future__ import absolute_import import logging
error_rate = OrderedDict((label, []) for label, _ in ensemble_clfs)
check_problem(step)
try: xml = self.preprocess_pmathml(self.expr)
log = logging.getLogger(__name__)
from __future__ import absolute_import import itertools import os import json import socket import sys import re import platform import logging import locale import salt.exceptions
if step_score: self.scores_.append(step_score(self.estimator_, features)) self.n_features_ = support_.sum() self.support_ = support_ self.ranking_ = ranking_
cls.mapping[transformer.match_key] = transformer return transformer
file_path = InstructorDashboardPage.get_asset_path(filename) self.q(css=self.auto_enroll_browse_button_selector).results[0].send_keys(file_path) self.click_upload_file_button()
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.case_sensitive = True
chapter = self._find_url_name(toc, chapter_url_name) if chapter: return self._find_url_name(chapter['sections'], section_url_name) return None
with self.assertNumQueries(3): self._assert_group_assignment(user, VerificationPartitionScheme.DENY)
VerificationDeadline.set_deadline(self.course.id, self.VERIFICATION_DEADLINE)
delete = self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME)) ret_str = ' shutting-down'
for user in users: CourseEnrollment.enroll(user, course_key)
field_data['attempts'] = int(attempts)
api.set_credit_requirements(self.course_key, requirements[1:])
'ipv6': bool,
('ALIGN', (2, 0), (4, 0), 'CENTER'),
with self.assertRaises(GitImportErrorRemoteBranchMissing): git_import.add_repo(self.TEST_REPO, repo_dir / 'edx4edx_lite', 'asdfasdfasdf')
self._has_staff_access = None
self.factory(eta0=0, learning_rate="constant")
response = client.delete(url) self.assertEqual(expected_status, response.status_code) return response
student = request.user
return self.label_binarizer_.y_type_.startswith('multilabel')
return _load_output(output_dir, _get_func_fullname(self.func), timestamp=self.timestamp, mmap_mode=self.mmap_mode, verbose=self._verbose)
self.assertEquals(parent_status.get('total'), total) self.assertEquals(parent_status.get('action_name'), action_name)
from salt.modules import keyboard
current_state = __salt__['tuned.active']()
FEATURES['ENABLE_SOFTWARE_SECURE_FAKE'] = True
for key in list(to_cleanup.keys()): instance = to_cleanup.pop(key) del instance
auth = self._create_authorization_header(token) return self.csrf_client.post(target_url, HTTP_AUTHORIZATION=auth)
from __future__ import unicode_literals
mode_display_name = models.CharField(max_length=255, verbose_name=_("Display Name"))
raise NotImplementedError()
left_index = np.searchsorted(tree, bin_X & left_mask) right_index = np.searchsorted(tree, bin_X | right_mask, side='right') return left_index, right_index
self.login_student() self.assertEqual(self.get_progress_detail(), u'2/2')
self.case_sensitive = False
opts['grains'] = salt.loader.grains(opts) super(SMinion, self).__init__(opts)
return y, None
n_topics, X = _build_sparse_mtx() prior = 1. / n_topics lda_1 = LatentDirichletAllocation(n_topics=n_topics, doc_topic_prior=prior, topic_word_prior=prior, random_state=0) lda_2 = LatentDirichletAllocation(n_topics=n_topics, random_state=0)
degrees_of_freedom = max(self.n_components - 1.0, 1) n_samples = X.shape[0] k = min(n_samples - 1, int(3. * self.perplexity + 1))
if __opts__['test']: ret['result'] = None ret['changes'] = {'reg': {'Will remove': remove_change}} return ret
directories_to_create.reverse() for directory_to_create in directories_to_create: log.debug('Creating directory: %s', directory_to_create) mkdir(directory_to_create, user=user, group=group, mode=mode)
from __future__ import absolute_import import os import re import sys import shutil import subprocess
xpath = "//div[@class='indicator-container']/span" self.assert_no_xpath(xml, xpath, self.context)
import salt.utils from salt.modules import state
import salt.utils import salt.modules.cmdmod from salt.exceptions import CommandExecutionError
problem = self.build_problem(answer=".*tre+", regexp=True) self.assert_grade(problem, "There is a tree", "correct")
urlpatterns += ( url(r'^api/', include('edx_proctoring.urls')), )
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
source_list = _validate_str_list(source)
request = RequestFactory() request.COOKIES = {} request.META = {} request.path = '/' return request
assert isinstance(key_or_alias, string_types) try: return super(alias_dict, self).__getitem__(key_or_alias) except KeyError: return super(alias_dict, self).__getitem__( self.__a2k__[key_or_alias])
import salt.minion import salt.utils from salt.defaults import DEFAULT_TARGET_DELIM from salt.ext.six import string_types
return self.enabled and self.program_listing_enabled
mode_result = 6
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
call_command('git_add_course', self.TEST_REPO, directory_path=self.git_repo_dir / 'edx4edx_lite', repository_branch=self.TEST_BRANCH)
TestCase._enter_atomics = enter_atomics_wrapper(TestCase._enter_atomics) TestCase._rollback_atomics = rollback_atomics_wrapper(TestCase._rollback_atomics)
dtype = 'uint8' ntrain = 50000
for index, (name, label, (x, y)) in enumerate( zip(names, labels, embedding.T)):
self.assertEqual(certificate.get_text('.action-primary'), "Create") certificate.click_create_certificate_button() self.assertIn(course_title_override, certificate.course_title) return certificate
return self.encode(inputs)
CourseEnrollment.enroll(user, course_id) self.assertTrue(CourseEnrollment.is_enrolled(user, course_id)) self.assertTrue(CourseEnrollment.is_enrolled_by_partial(user, course_id_partial)) self.assert_no_events_were_emitted()
if sp.issparse(predictions[0]): predictions = sp.vstack(predictions, format=predictions[0].format) else: predictions = np.concatenate(predictions) return predictions[inv_test_indices]
if not _check_features(): ret['error'] = 'bookmarks are not supported' return ret
from __future__ import absolute_import import socket import logging
raise AccessListFallback
else: return CommitOnSuccessManager(using, read_committed)
assert len(state) == 2 assert isinstance(coeffs, float) _, state = state state = [state] coeffs = [coeffs]
self.some_url = '/'
import_course_from_xml( source_store, 'test_user', TEST_DATA_DIR, source_dirs=['manual-testing-complete'], static_content_store=source_content, target_id=source_course_key, create_if_not_present=True, raise_on_failure=True, )
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
from salt.modules import lvs
Xcoo = coo_matrix(X) mkchi2(k=2).fit_transform(Xcoo, y)
GraphLassoCV(alphas=[0.8, 0.5], tol=1e-1, n_jobs=1).fit(X)
HAS_LIBS = False try: import github import github.PaginatedList import github.NamedUser from github.GithubException import UnknownObjectException
if isinstance(space, CompositeSpace): return tuple(make_dtype_tree(dtype, component) for component in space.components) else: return super_self._clean_dtype_arg(dtype)
if not dataset: ret['error'] = 'one or more snapshots must be specified'
data_content = None
ENROLLMENT_COURSE_DETAILS_CACHE_TIMEOUT = 60
if verification_deadline is not None: if upgrade_deadline is not None and verification_deadline < upgrade_deadline: raise forms.ValidationError("Verification deadline must be after the upgrade deadline.")
try: cert = GeneratedCertificate.eligible_certificates.get( user__username=username, course_id=course_key ) except GeneratedCertificate.DoesNotExist: return None return format_certificate_for_user(username, cert)
files = request.FILES or {} error_msg = _check_files_limits(files) if error_msg: return JsonResponse({'success': error_msg}, status=413)
import integration import salt.utils
if self.edx_video_id and edxval_api: try: val_profiles = ["youtube", "desktop_webm", "desktop_mp4"] val_video_urls = edxval_api.get_urls_for_profiles(self.edx_video_id, val_profiles)
pillar_dir = os.path.normpath(os.path.join(gitpil.working_dir, root))
self.dashboard_page.visit() self.assertFalse(self.dashboard_page.pre_requisite_message_displayed())
import integration
from __future__ import absolute_import import logging
self.assertEqual( StudentModule.objects.filter( student=self.module_to_reset.student, course_id=self.module_to_reset.course_id, ).count(), 0 )
with restrict_course(self.course.id): response = self.client.get( url, HTTP_X_FORWARDED_FOR=ip_address, REMOTE_ADDR=ip_address ) self.assertEqual(response.status_code, 200)
self.assertTrue( self.run_function('softwareupdate.schedule_enable', [True])) self.assertTrue(self.run_function('softwareupdate.schedule_enabled'))
modal = self.edit() modal.is_explicitly_locked = is_locked modal.save()
self.send_response(200)
all_assets.extend(course_assets.setdefault(asset_type, [])) asset_idx = all_assets.find(asset_key)
log.error('No host given to create this VM on') raise SaltCloudExecutionFailure
global _local_random
return expected_prefix + '-' + team['discussion_topic_id']
weight_cdf = sample_weight[sorted_idx].cumsum() percentile_idx = np.searchsorted( weight_cdf, (percentile / 100.) * weight_cdf[-1]) return array[sorted_idx[percentile_idx]]
all_assets.extend(course_assets.setdefault(asset_key.block_type, [])) idx = all_assets.find(asset_key)
list_updates = salt.utils.alias_function(list_upgrades, 'list_updates')
'ENABLE_COURSEWARE_INDEX': False,
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=rng)
gateway_set = True
self.certificates_page.visit() self.assertEqual(len(self.certificates_page.certificates), 0)
cls.create_image(prefix, (1, 1), 'yellow', 'special/{}_lock.png', locked=True)
self.theta0 = np.atleast_2d(self.theta0) lth = self.theta0.size
course = self._create_course("verified") self._enroll(course.id, "verified") response = self._get_page('verify_student_verify_now', course.id)
self.create_programs_config(enable_certification=False)
transformers = Parallel(n_jobs=self.n_jobs)( delayed(_fit_one_transformer)(trans, X, y) for name, trans in self.transformer_list) self._update_transformer_list(transformers) return self
likelihood = (i * likelihood + x_likelihood) / (i + batch_size0)
urls = { 'raw': raw_image_url, 'small': raw_image_url, 'large': raw_image_url, }
enrollment_mode = self.dashboard_page.get_enrollment_mode(self.course_info["display_name"]) self.assertEqual(enrollment_mode, 'verified')
import salt.transport.ipc import salt.config
return v
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath ensure_in_syspath('../../')
flags = libvirt.VIR_DOMAIN_MEM_MAXIMUM if config: flags = flags | libvirt.VIR_DOMAIN_AFFECT_CONFIG
self._verify_non_staff_cannot_access(cohort_discussion_topics, "GET", [unicode(self.course.id)])
if correct: style = QUESTION_HINT_CORRECT_STYLE else: style = QUESTION_HINT_INCORRECT_STYLE
self.reindex_button.click()
need_space = (prev_end, start != prev_end)
if minion.schedule.loop_interval < loop_interval: loop_interval = minion.schedule.loop_interval log.debug( 'Overriding loop_interval because of scheduled jobs.' )
raise NotImplementedError(str(self.__class__) + " does not " + "implement kl_divergence")
from salt.utils import get_group_list
if is_whitelisted: LOGGER.info( u"Student %s is whitelisted in '%s'", student.id, unicode(course_id) ) passing = True else: passing = False
self.html_unit = ItemFactory.create( parent_location=self.vertical.location, category="html", display_name="Html Content", modulestore=store, publish_item=False, )
inputs = SparseType('csr', dtype=theano.config.floatX)() return theano.function([inputs], self(inputs), name=name)
stream1 = StringIO() stream2 = StringIO() handler1 = StreamHandler(stream1) handler2 = StreamHandler(stream2)
import salt.ext.six as six
if requirements or pip_pkgs: before = set(__salt__['pip.freeze'](bin_env=name, user=user, use_vt=use_vt))
self._init_state()
name = os.path.join(name, os.path.basename(source))
return ItemFactory.create( parent_location=parent.location, category="video", display_name="Group {} Sees This Video".format(group), )
from __future__ import absolute_import
from __future__ import absolute_import import os import time import subprocess
return self.q(css='.page-content-secondary .tooltip-custom').text[0]
self.client.login(username="jack", password="test")
if current.node in visited or not filter_func(current.node): stack.pop() continue
ret = self.run_run_plus(fun='fileserver.dir_list', args=['backend="[roots]"']) self.assertIsInstance(ret['fun'], list)
self._verify_branch_setting(ModuleStoreEnum.Branch.draft_preferred) _verify_revision_is_published(location)
osarch = sorted(archinfo, key=archinfo.get, reverse=True)
time.sleep(1) return info(name).get('uid') == uid
try: course_key = CourseKey.from_string(course_id) except InvalidKeyError: raise Http404
descriptor.save() return descriptor
self.assertEquals(preview.latex_preview('log2(3)'), r'\log_2(3)')
xml = self.render_to_xml(self.context) xpath = "//div[@class='indicator-container']/span[@class='status correct']" self.assert_has_xpath(xml, xpath, self.context)
with patch('student.models.cc.User.save'): uname = 'student' email = 'student@edx.org'
#========================================================================== #smtp inet n - n - - smtpd if private == 'y': private = '-'
return self.has_access
dbm = make_random_basic_binary_dbm( rng = rng, pool_size_1 = pool_size_1, )
@ignore_warnings(category=DeprecationWarning) def score(self, g, X): return g.score(X).sum()
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) self._assert_course_verification_status(VERIFY_STATUS_NEED_TO_VERIFY)
X, y = make_classification(n_samples=200, n_features=100, n_informative=3, random_state=0)
import salt.ext.six as six
return self.q(css=CLASS_SELECTORS['video_controls']).visible
attempt.upload_face_image(face_image)
assert_array_equal(np.sort(s1[:23149]), np.sort(s2))
return deserialize_count_specs(self.courses_completed)
SCORE_CHANGED.send( sender=None, points_possible=event['max_value'], points_earned=event['value'], user_id=user_id, course_id=unicode(course_id), usage_id=unicode(descriptor.location) )
instance.set_grading_policy(policy)
if template not in salt.utils.templates.TEMPLATE_REGISTRY: raise CommandExecutionError( 'Attempted to render file paths with unavailable engine ' '{0}'.format(template) )
try: return machine.launchVMProcess(session, "", "") except Exception as e: log.debug(e.message, exc_info=True) return None
key = self.lti_consumer.consumer_key self.assertTrue(SignatureValidator(self.lti_consumer).check_client_key(key))
service = super(ModuleSystem, self).service(block=block, service_name=service_name) if callable(service): return service(block) return service
f, p = f_oneway(X.astype(np.float), y) assert_array_almost_equal(f, fint, decimal=4) assert_array_almost_equal(p, pint, decimal=4)
def utcoffset(self, _dt): return timedelta(hours=4)
self.browser.refresh() self.cohort_management_page.wait_for_page() self.instructor_dashboard_page.select_cohort_management() self.cohort_management_page.wait_for_page() self.cohort_discussion_topics_are_visible()
if not course_org_filter: org_filter_out_set = microsite.get_all_orgs() if org_filter_out_set: exclude_dictionary['org'] = list(org_filter_out_set)
self.wait_for_ajax() caption_state_selector = self.get_element_selector(CSS_CLASS_NAMES['captions']) return self.q(css=caption_state_selector).visible
try:
return self.q(css='.wrapper-notification-error.is-shown')
([], 'honor'),
pygit2ver = distutils.version.LooseVersion(pygit2.__version__) pygit2_minver = distutils.version.LooseVersion(PYGIT2_MINVER)
self.batch_size = batch_size if (isinstance(dataset[0], theano.Variable)): self.dataset = [set.get_value(borrow=True) for set in dataset] else: self.dataset = dataset
self.assertIsNotNone(self.request.session)
enrollment_mode = self.dashboard_page.get_enrollment_mode(self.course_info["display_name"]) self.assertEqual(enrollment_mode, 'verified')
rp = SparseRandomProjection(n_components=10, dense_output=True, random_state=0) rp.fit(data) assert isinstance(rp.transform(data), np.ndarray)
if vm.guest.toolsStatus in ["toolsNotRunning", "toolsNotInstalled"]: status = 'VMware tools is either not running or not installed' return status
self._future._future_with_timeout = None self.set_exception(tornado.ioloop.TimeoutError())
modulestore().update_item(course_module, request.user.id)
unicode_text = "好 各位同学".decode('utf-8') self.assertIn(unicode_text, self.video.captions_text)
self._initialize_mixed(contentstore=contentstore, mappings={})
X = check_array(X) if X.ndim == 1: X = X[:, np.newaxis]
users_state_after_post = self._post_words( ['word1', 'word2', 'word3'])
key = world.css_value(KEY_CSS, index=i) if key == expected_key: return i
centers = clusterer.cluster_centers_ ax2.scatter(centers[:, 0], centers[:, 1], marker='o', c="white", alpha=1, s=200)
self.assert_oauth_status(self.dot_access_token, status.HTTP_200_OK)
shutil.copyfile(path_in, path_test)
task_id = entry.task_id course_id = entry.course_id task_input = json.loads(entry.task_input)
g = GaussianMixture(n_components=n_components, n_init=1, max_iter=5, reg_covar=0, random_state=random_state, warm_start=False, tol=1e-6) h = GaussianMixture(n_components=n_components, n_init=1, max_iter=5, reg_covar=0, random_state=random_state, warm_start=True, tol=1e-6)
import logging import os.path
enable_jquery_animations(page) enable_css_animations(page)
assert len(course_assets['assets']) == 0 self.asset_collection.update( {'_id': doc_id}, {'$set': {'assets': {}}} )
from_address = theming_helpers.get_value( 'email_from_address', settings.DEFAULT_FROM_EMAIL ) user = User.objects.get(id=user_id) user.email_user(subject, message, from_address)
CONFIG_PREFIX = SERVICE_VARIANT + "." if SERVICE_VARIANT else ""
import yaml import json
if max_iter is None: max_iter = 1000
'ENABLE_VIDEO_UPLOAD_PIPELINE': False,
errors = self.errors return (bool(errors), errors)
self.create_programs_config() self.mock_programs_api(data={'results': []}) actual = utils.get_programs_for_dashboard(self.user, self.COURSE_KEYS) self.assertEqual(actual, {})
response = copy(obj_a)
authors = [ 'Thomas S. Hatch <thatch45@gmail.com> and many others, please see the Authors file', ]
grade_distrib = get_problem_set_grade_distrib(course_id, problem_set)
import salt.exceptions
if kwarg: kwarg['__kwarg__'] = True arglist.append(kwarg)
remote_rev = all_remote_refs['refs/tags/' + rev + '^{}'] remote_rev_type = 'tag'
CourseOverviewImageConfig.objects.all().delete() CourseOverviewImageConfig.objects.create( enabled=enabled, small_width=200, small_height=100, large_width=400, large_height=200 )
for parent in parents: self._block_relations[parent].children.remove(usage_key)
get_user_credentials(self.user)
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandExecutionError
self.assert_student_in_group(None)
from __future__ import absolute_import import socket
'METADATA_URL': 'www.googleapis.com/youtube/v3/videos/',
for i, (X_train_text, y_train) in enumerate(minibatch_iterators):
from salt.modules import dockerng as dockerng_mod from salt.exceptions import CommandExecutionError, SaltInvocationError
y = y[:m]
return {}
for row in data: writer.writerow(row) csv_data = read_and_flush() yield csv_data
'tools.salt_token.on': True, 'tools.salt_auth.on': False,
[DISPLAY_NAME, 'Video', False], ['Default Video URL', 'https://www.youtube.com/watch?v=3_yD_cEKoCk, , ', False],
if "default" in kwargs: kwargs["defaultValue"] = kwargs["default"]
from __future__ import absolute_import
return str(obj)
neigh_ind = np.empty(n_samples, dtype='object') neigh_ind[:] = neigh_ind_list
pass
self.q(css='.create-team .action-primary').first.click() self.wait_for_ajax()
REPORT_DIR = REPO_ROOT / 'reports' METRICS_DIR = REPORT_DIR / 'metrics'
self.import_path = import_path self.locked = locked
freezer_includes.extend([ 'cherrypy', 'dateutils', 'pyghmi', 'croniter', 'mako', 'gnupg', ])
msg = EmailMessage(subject, None, from_address, [to_address]) msg.attach(notification_msg) msg.send()
from salt.exceptions import CommandExecutionError
return False
self.asset_collection.update( {'_id': course_assets.doc_id}, {'$set': {self._make_mongo_asset_key(asset_key.asset_type): all_asset_info}} ) return 1
import salt.utils import salt.utils.decorators as decorators
if timeout is not None and __context__['docker.client'].timeout != timeout: __context__['docker.client'].timeout = timeout
n_folds = 5 n_iter = 1000
self.assertFalse(payload.get('success')) self.assertIn('There was an error receiving your login information', payload.get('value'))
huge = 2 ** (n_bits - 1) - 1 clf = DecisionTreeClassifier(splitter='best', max_leaf_nodes=huge) assert_raises(MemoryError, clf.fit, X, y)
underlying_updates = modulestore().get_item(updates_usage_key) underlying_content = underlying_updates.items[0]['content'] if new_format else underlying_updates.data self.assertIn("\"/static/", underlying_content)
if schedule[job]['_seconds'] > 0: schedule[job]['seconds'] = schedule[job]['_seconds'] elif 'seconds' in schedule[job]: del schedule[job]['seconds']
grid_search_no_score.fit(X, y)
'correct': 'is_correct',
self.assertEquals(3, len(response.content.splitlines()))
always_cohort_inline_discussions = True
salt '*' vsphere.vmotion_disable my.esxi.host root bad-password
best_doublecolon_len = doublecolon_len best_doublecolon_start = doublecolon_start
assert_raises(ValueError, _inverse_binarize_thresholding, y=np.array([[1, 2, 3], [2, 1, 3]]), output_type="binary", classes=[1, 2, 3], threshold=0)
yield_results[current_node] = should_yield_node
updates[mean_square_grad] = new_mean_squared_grad updates[param] = param + delta_x_t
pygments_style = 'sphinx'
aside2 = AsideBar(scope_ids=ScopeIds('user', block_type2, def_id, usage_id), runtime=self.runtime) aside2.field21 = 'new_value21'
module = CapaFactory.create(rerandomize=RANDOMIZATION.NEVER, max_attempts=0, done=True, correct=True) self.assertFalse(module.should_show_reset_button())
import salt.config import salt.loader
),
CreditRequirementStatus.add_or_update_requirement_status( username, req_to_update, status=status, reason=reason )
component = self.store.publish(xblock.location, self.user_id) self.assertFalse(self.store.has_changes(component))
'env_order': list,
LogoutPage(self.browser).visit()
if sample_weight.sum() <= 0: raise ValueError( "Attempting to fit with a non-positive " "weighted number of samples.")
return self.runtime.get_edited_by(self)
syndic.tune_in_no_block() log.info('Syndic successfully connected to {0}'.format(opts['master'])) break
continue
return self.q(css=self._bounded_selector(".check-cohort-inline-discussions:checked"))
qemu_img.__salt__ = {}
proj_grad_W = squared_norm(gradW * np.logical_or(gradW < 0, W > 0)) proj_grad_H = squared_norm(gradH * np.logical_or(gradH < 0, H > 0))
bytes = bytearray
desc_score_indices = np.argsort(y_score, kind="mergesort")[::-1] y_score = y_score[desc_score_indices] y_true = y_true[desc_score_indices] if sample_weight is not None: weight = sample_weight[desc_score_indices] else: weight = 1.
return []
if not np.any(Y_ == i): continue plt.scatter(X[Y_ == i, 0], X[Y_ == i, 1], .8, color=color)
_options['checktype'] = str(_options['checktype'])
target_mod = module + '.' if not module.endswith('.') else module
if not data: data = json.dumps({})
termination_criterion = EpochCounter(5)
conditional_page = ConditionalPage(self.browser) conditional_page.fill_in_poll() self.courseware_page.visit() self.assertTrue(conditional_page.is_content_visible())
#html_split_index = False
import salt.exceptions import salt.utils.event
clf = ForestClassifier(class_weight='auto', warm_start=True, random_state=0) assert_warns(UserWarning, clf.fit, X, y) assert_warns(UserWarning, clf.fit, X, _y)
module = CapaFactory.create(rerandomize=rerandomize, done=True)
return '%s.%s:%d' % ( model._meta.app_label, model._meta.model_name, getattr(instance_or_pk, 'pk', instance_or_pk), )
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.q(css="body.discussion .forum-nav-sort-control option[value='{0}']".format(sort_by)).click()
self.student_id = "99" self.student_name = "testcert" self.student_email = "cert@example.com"
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor', grade=default_grade )
text_present = False text_list = page.q(css=css_selector).text if len(text_list) > 0 and (text in text_list): text_present = True return text_present
fgraph = f.maker.env
response = self.client.get(reverse('branding.views.courses')) self.assertEqual(response.status_code, 200)
self.bulk.update_definition(self.course_key, self.definition) self.assertConnCalls(call.insert_definition(self.definition, self.course_key))
if service_name == 'SSH' or service_name == 'ssh': temp_service_name = 'TSM-SSH' else: temp_service_name = service_name
start_flow_url = reverse('verify_student_start_flow', args=[unicode(self.course.id)]) self.assertRedirects(response, start_flow_url)
try: self.minion = salt.minion.SMinion(opts) except SaltClientError as exc: raise SystemExit(str(exc))
check_node(test_course.location, None, after_create, self.user_id, after_create, after_edit, editing_user)
import salt.loader
self.assertEqual( self.run_function('xattr.list', [TEST_FILE]), {'spongebob': 'squarepants', 'crabby': 'patty'})
<%block name="requirejs"> {expression} </%block>
return status in cls.PASSED_STATUSES
response = self._credit_provider_callback( request_uuid, 'approved', provider_id=other_provider_id, secret_key=other_provider_secret_key, keys={other_provider_id: other_provider_secret_key} )
#pylint: disable=E0602
_response = _request("GET", options['url'] + options['db'] + "/_design/salt/_view/minions?group=true")
from __future__ import absolute_import, print_function import os import sys import copy import time import hmac import base64 import hashlib import logging import stat import traceback import binascii import weakref import getpass
return self.q(css="div.problem span.message").text[0]
DETAILS['grains_cache'] = parse(out)
rng = np.random.RandomState(0) noise = 0.1 * rng.randn(Npts, 1) X = np.concatenate((X, noise), 1)
if expr_form == 'list' and len(tgt) == seen: break
dict(safe_zip(range(-5, 6), range(-5, 6))),
errstring = "migrate_to_split requires at least two arguments" with self.assertRaisesRegexp(CommandError, errstring): self.command.handle()
self.install_collection = win32com.client.Dispatch('Microsoft.Update.UpdateColl')
self._zendesk_instance.update_ticket(ticket_id=ticket_id, data=update)
status = InstructorTaskModuleTestCase.get_task_status(instructor_task.task_id) self.assertEqual(status['message'], expected_message)
#pepa_pillars:
simplefilter('ignore')
CONFIG_ROOT = path(os.environ.get('CONFIG_ROOT', ENV_ROOT))
kernel_current = __salt__['cmd.run']('uname -a') for kernel in kernel_versions: if kernel in kernel_current: kernel_restart = False break
raise VersionConflictError(course_key, version_guid)
response = self.client.get(test_url) self.assertIn(str(self.cert.verify_uuid), response.content)
try: import psutil HAS_PSUTIL = True except ImportError: HAS_PSUTIL = False
'event_return_whitelist': list,
for field in ('traits', 'integrations', 'userAgent'): if field in context['client']: del context['client'][field]
def default(self, noDefaultEncodingObj): return noDefaultEncodingObj.value.replace("<script>", "sample-encoder-was-here")
now = time.mktime(datetime.utcnow().timetuple())
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0, noise=10)
lines = '\n'.join(l.rstrip(' ') for l in lines.split('\n')) return lines
command = 'Add-WindowsFeature' management_tools = '' if LooseVersion(__grains__['osversion']) >= LooseVersion('6.2'): command = 'Install-WindowsFeature' management_tools = '-IncludeManagementTools'
ccx = self.make_ccx(max_students_allowed=2) ccx_course_key = CCXLocator.from_course_locator(self.course.id, ccx.id) staff = self.make_staff() instructor = self.make_instructor()
plt.scatter(diabetes_X_test, diabetes_y_test, color='black') plt.plot(diabetes_X_test, regr.predict(diabetes_X_test), color='blue', linewidth=3)
response['X-XRDS-Location'] = get_xrds_url('xrds', request) return response
using_ip_for_id = False if not opts.get('id'): opts['id'], using_ip_for_id = get_id( opts, cache_minion_id=cache_minion_id)
student_views.create_account(strategy.request) self.assert_json_failure_response_is_username_collision(student_views.create_account(strategy.request))
from __future__ import absolute_import import logging import re
import salt.utils.event
return etree.Element("imageresponse")
inner_img = inner_img.reshape(len(output), -1) end_idx = start_idx + inner_img.shape[1] output[:, start_idx: end_idx] = inner_img
cache_key = programs_config.CACHE_KEY if programs_config.is_cache_enabled and not user.is_staff else None return get_edx_api_data(programs_config, user, 'programs', resource_id=program_id, cache_key=cache_key)
from urllib2 import urlopen
return microsite.get_template_path(relative_path, **kwargs)
from __future__ import absolute_import import logging import os import os.path import json
S = -euclidean_distances(X, squared=True) preference = np.median(S) * 10 cluster_centers_indices, labels = affinity_propagation( S, preference=preference)
service_url: amazonaws.com
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
X = [np.nan, 5, 6, 7, 8] assert_raises_regex(ValueError, "Input contains NaN, infinity or a value too large", scale, X)
self.assertTrue(config['blah'])
self.courseware_page.click_next_button_on_bottom() self.assert_navigation_state('Test Section 1', 'Test Subsection 1,2', 0, next_enabled=True, prev_enabled=True)
if 'public_key' not in kwargs and 'csr' not in kwargs: kwargs['public_key'] = kwargs['signing_private_key']
cohort_management_section.wait_for_ajax() cohort_management_section.wait_for_page() return cohort_management_section
STATUS = Choices('created', 'ready', 'submitted', 'must_retry', 'approved', 'denied') user = models.ForeignKey(User, db_index=True)
grader_element = etree.SubElement(codeparam_element, "grader_payload") grader_element.text = str(grader_payload)
return cls.objects.filter(order__status='purchased', coupon__course_id=course_id).aggregate(Count('coupon'))
if isinstance(basedir, six.string_types): basedir = [x.strip() for x in basedir.split(',')]
X_nan = np.arange(4).reshape(2, 2).astype(np.float) X_nan[0, 0] = np.nan assert_raises(ValueError, check_array, X_nan)
if hasattr(key, 'version_agnostic') and hasattr(key, 'for_branch'): return key.for_branch(None).version_agnostic() else: return key
existing_nodes = [name_node.value for name_node, value_node in node.value] mergeable_items = [x for x in merge if x[0].value not in existing_nodes]
self.assertEqual(ip1.compare_networks(ip2), -1) self.assertEqual(ip2.compare_networks(ip1), 1)
_default_logging_level_ = 'warning' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'master') _loglevel_config_setting_name_ = 'cli_salt_run_log_file'
import salt.utils import salt.config as config from salt.exceptions import ( SaltCloudConfigError, SaltCloudNotFound, SaltCloudExecutionFailure, SaltCloudExecutionTimeout, SaltCloudSystemExit )
if np_version < (1, 7, 1): _ravel = np.ravel else: _ravel = partial(np.ravel, order='K')
path = path.replace(os.sep, '/') if path.startswith('./'): path = path[2:] return path
'simple_history',
self.factory(coef_init=np.zeros((3,))).fit(X, Y)
for partition in self.course_partitions: if partition.id == user_partition_id: return partition return None
import salt.utils
store = self._verify_modulestore_support(location.course_key, 'publish') return store.publish(location, user_id, **kwargs)
log.error('Unrecognized target engine "{0}" for' ' target expression "{1}"'.format( target_info['engine'], word, ) ) return False
varnish.__salt__ = {}
if ret is None: lines.append(str(entry)) ret = 'new'
SEARCH_ENGINE = "search.tests.mock_search_engine.MockSearchEngine" MOCK_SEARCH_BACKING_FILE = ( TEST_ROOT / "index_file.dat" ).abspath()
return (name, network, device_id, admin_state_up)
return self.course_locations[string].course_key
out_file = os.path.join(salt.syspaths.CONFIG_DIR, new_name)
self._assert_chapter_loaded(self.course, self.chapter)
rval = shared(obj.get_value()) obj.__getstate__ = None
if field_decorator is None: self.field_decorator = lambda x: x else: self.field_decorator = field_decorator
self._check_non_staff_light(self.course) self._check_non_staff_dark(self.course) self._check_non_staff_light(self.test_course) self._check_non_staff_dark(self.test_course)
provider_ids = self.request.GET.get('provider_ids', None)
import salt.utils
require_course_email_auth = models.BooleanField(default=True)
u_flipped, _, v_flipped = randomized_svd(mat, 3, flip_sign=True) u_based, v_based = max_loading_is_positive(u_flipped, v_flipped) assert_true(u_based) assert_false(v_based)
with warnings.catch_warnings(record=True) as recorded_warnings: raise_warning() self.assertEqual( 'Deprecation Message!', str(recorded_warnings[0].message) )
deadline_is_explicit = models.BooleanField(default=False)
code = "a = 0\n" + ("a += 1\n" * 12345)
L = np.empty((max_features, max_features), dtype=X.dtype)
import salt.utils import salt.output from salt.utils.locales import sdecode
self.foundCategories = _gather_update_categories(self.download_collection) log.debug('found categories: {0}'.format(str(self.foundCategories))) return True
self.assertEqual(1, len(editable_fields), editable_fields) self.assert_field_values( editable_fields, 'display_name', XModuleMixin.display_name, explicitly_set=False, value=None, default_value=None )
if start_type == 2: win32service.ChangeServiceConfig2( handle_svc, win32service.SERVICE_CONFIG_DELAYED_AUTO_START_INFO, start_delayed)
try: certificate_exception, student = parse_request_data_and_get_user(request, course_key) except ValueError as error: return JsonResponse({'success': False, 'message': error.message}, status=400)
self.courseware_page.click_previous_button_on_bottom() self.assert_navigation_state('Test Section 1', 'Test Subsection 1,1', 2, next_enabled=True, prev_enabled=True)
assert not any([key in rval for key in contrib]) assert all([key in params for key in contrib])
rng = np.random.RandomState(1999) n, p = 50, 3
super(DraftModuleStore, self).update_item( item, user_id, isPublish=True, is_publish_root=is_root, allow_not_found=True ) to_be_deleted.append(as_draft(item_location).to_deprecated_son())
action_name = ugettext_noop('generated') task_fn = partial(upload_course_survey_report, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
self.minions = self._spawn_minions()
self.setup_logfile_logger() verify_log(self.config) profiling_enabled = self.options.profiling_enabled
if exc.winerror == 1332: return '' else: raise
yield prev_end, "E225 missing whitespace around operator"
ADVANCED_SECURITY_CONFIG = {}
item_list_generator = _generate_items_for_subtask( item_querysets, item_fields, total_num_items, items_per_task, total_num_subtasks, entry.course_id, )
mock = MagicMock(return_value=False) with patch.object(composer, '_valid_composer', mock): self.assertRaises(CommandNotFoundError, composer.install, 'd')
dest_course_id = self._map_revision_to_branch(dest_course_id, revision=revision) return super(DraftVersioningModuleStore, self).clone_course( source_course_id, dest_course_id, user_id, fields=fields, **kwargs )
import yaml try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
genesis.__grains__ = {} genesis.__salt__ = {} genesis.__context__ = {} genesis.__opts__ = {}
plot_batch_errors(all_errors, n_components, batch_sizes, data)
import salt.utils
MODULESTORE = convert_module_store_setting_if_needed(MODULESTORE)
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
mlb = MultiLabelBinarizer(classes=[1, 3, 2]) assert_array_equal(mlb.fit_transform(inp), indicator_mat) assert_array_equal(mlb.classes_, [1, 3, 2])
left_mask = np.tril(np.ones((tri_size, tri_size), dtype=int))[:, 1:] right_mask = left_mask[::-1, ::-1]
source_store = self.store._get_modulestore_by_type(source_modulestore) dest_store = self.store._get_modulestore_by_type(destination_modulestore) self.assertCoursesEqual(source_store, source_course_key, dest_store, dest_course_id)
self.assertOrphanCount(course.id, 1) self.assertOrphanCount(published_branch, 1)
from __future__ import absolute_import, print_function
import logging import sys import xml.etree.ElementTree as ET
time_fit = collections.defaultdict(list) time_transform = collections.defaultdict(list)
network.__salt__ = {} network.__grains__ = {} network.__opts__ = {}
VerificationStatus.add_verification_status(checkpoint, self.user, "submitted")
from yaml import Loader, SafeLoader
from __future__ import absolute_import
__virtualname__ = 'minion'
return [Attribute('height'), Attribute('width'), Attribute('molecules'), Attribute('geometries'), ]
error_msg = _('Invalid grader reply. Please contact the course staff.') oldcmap.set(self.answer_id, msg=error_msg) return oldcmap
if not payload_hash: payload_hash = hashlib.sha256(data).hexdigest()
ii = iter_offset - 1
return self.find_css("#due_time").first.attrs('value')[0]
if self.restricted.filter(user=student).exists(): cert.status = status.restricted cert.save()
if grade_response is None: grade_response = self.server.config.get( 'default', copy.deepcopy(self.DEFAULT_GRADE_RESPONSE) )
raise NotImplementedError()
self.close()
import integration
return getattr(settings, 'SOCIAL_AUTH_SAML_SP_PUBLIC_CERT', '')
max_value_length = settings.TRACK_MAX_EVENT / 4
from __future__ import absolute_import
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
self.assertEqual(result['order'].bill_to_ccnum, '####')
import os import stat import os.path import logging import struct
raise ItemNotFoundError(course_key)
for mode, min_price in course_modes: CourseModeFactory.create(mode_slug=mode, course_id=self.course.id, min_price=min_price)
CONTACT_MAILING_ADDRESS = ''
choice, answers = choice_answers_pair
tasks = instructor_task.api.get_instructor_task_history(course_id, task_type=task_type)
problem_not_specified = self.build_problem(answer="Second") problems = [problem_specified, problem_not_specified]
self._make_eligible()
_check_fields( get_editable_fields(cc_content, context), data, "This field is not editable." )
assert isinstance(num_steps, py_integer_types) assert num_steps > 0
video_data = local_cache['course_videos'].get(video_descriptor.edx_video_id, {})
from salt.utils import get_colors
from __future__ import absolute_import
if sys.platform.startswith('win'): return max(0, t - .1) else: return t
htmlhelp_basename = 'scikit-learndoc'
theta = self.theta_
self.request_map = defaultdict(list)
exc_info_on_loglevel=logging.DEBUG
self.add_to_cart() self.request.user = self.user context = user_has_cart_context_processor(self.request) self.assertFalse(context['should_display_shopping_cart_func']())
self.n_unique_specs = 0
result = embargo_api.check_course_access(self.course.id, ip_address='0.0.0.0') self.assertFalse(result)
if depth is not None: depth -= 1
X, y = X[y < 2], y[y < 2]
from __future__ import absolute_import from __future__ import print_function import sys import getopt import re import email.utils import datetime
return course_id in [ item.course_id for item in order.orderitem_set.all().select_subclasses("paidcourseregistration") if isinstance(item, cls) ]
for name in ALL_TREES: yield check_min_weight_fraction_leaf, name, "iris"
sysctl = salt.utils.which('sysctl') arch = salt.utils.which('arch') cmds = {}
from __future__ import absolute_import, print_function import os import sys
if isinstance(ret, dict) and 'newname' in ret: salt.utils.cloud.remove_key( self.opts['pki_dir'], ret['newname'] ) continue
ret = _psql_prepare_and_run(['-c', query], user=user, host=host, port=port, maintenance_db=maintenance_db, password=password, runas=runas) return ret['retcode'] == 0
self._enter_mockbin()
raise ValueError
self.mean_ = np.mean(X, axis=0) X -= self.mean_
self.assertTrue(views.is_course_passed(self.course, None, self.student, self.request))
chapter_index = self._chapter_index(chapter) if chapter_index is None: return None
warnings.filterwarnings('always', category=DeprecationWarning, module='^{0}\.'.format(re.escape(__name__)))
import logging
reviewing_user = models.ForeignKey( User, db_index=True, default=None, null=True, related_name="photo_verifications_reviewed" )
assert_allclose(ecov.error_norm(prec_pred[k]), 0, atol=0.1)
from __future__ import unicode_literals
self.assertEqual( self.run_function('pip.list', ['pip'], bin_env=venv_dir), {'pip': '6.0'} )
self.courseware_page.start_timed_exam()
targeted_pkgs = list(targets.keys()) if pkgs else None
return BACKEND.get_dict(dict_name, default, **kwargs)
for course_overview in [course_overview_cache_miss, course_overview_cache_hit]: course_overview_tabs = course_overview.tabs.all() course_resp_tabs = {tab.tab_id for tab in course_overview_tabs} self.assertEqual(self.COURSE_OVERVIEW_TABS, course_resp_tabs)
url = self.browser.current_url fragment_index = url.find('#') if fragment_index >= 0: url = url[0:fragment_index]
SERVICE_VARIANT = os.environ.get('SERVICE_VARIANT', None)
AUTH_TOKENS = convert_tokens(AUTH_TOKENS)
def __add__(self, other): if not isinstance(other, int): return NotImplemented return self.__class__(int(self) + other)
days=5 \ CN='My Little CA' \ C=US \ ST=Utah \ L=Salt Lake City \ O=Saltstack \ emailAddress=pleasedontemail@example.com
self.db_connection.ensure_indexes()
X, y = datasets.make_hastie_10_2(n_samples=12000, random_state=1)
self.assertIn('<button class="{} inactive progress-0 nav-item"'.format(self.ICON_CLASSES[user_tag]), content) for tooltip in self.TOOLTIPS[user_tag]: self.assertIn(tooltip, content)
test_score = heldout_score(clf, X_test, y_test)
if not s3_meta: continue
from salt.states import grafana
self.prev_floatX = config.floatX config.floatX = 'float64'
scaler = StandardScaler(with_mean=True).fit(X) assert_raises(ValueError, scaler.transform, X_csr) assert_raises(ValueError, scaler.transform, X_csc)
self.assertIn("EXCEPTION!", get_processor_exception_html(CCProcessorException()))
except ItemNotFoundError: return False
tempdir = tempfile.mkdtemp() egg = zipfile.ZipFile(top_dirname) egg.extractall(tempdir) top = os.path.join(tempdir, base) os.chdir(tempdir)
self.chapter = ItemFactory.create( parent_location=self.course.location, category='chapter', display_name='untitled chapter' )
for code in [129, 500, 2 ** 8 - 1, 2 ** 16 - 1]:
return base64.urlsafe_b64encode(aes_encrypt(data, key))
from __future__ import absolute_import import logging
salt '*' pkg.install sources='[{"<pkg name>": "salt://pkgs/<pkg filename>"}]' instance="overwrite"
return self.func(*args)
log.exception("Unable to generate html from LoncapaProblem") raise
self.mstore = modulestore()
ports = list(map(int, str(ports).split(',')))
'ENABLE_DISCUSSION_SERVICE': True, 'ENABLE_TEXTBOOK': True, 'ENABLE_STUDENT_NOTES': True,
return self.q(css=BUTTON_SELECTORS['handout_download']).visible
with filesystem.open('updates.html', 'r') as grading_policy: on_disk = grading_policy.read() self.assertEqual(on_disk, course_updates.data)
data[:, 3] /= data[:, 5]
self.xml.set('cfn', 'symmath_check')
render_pipe = check_render_pipe_str(line.strip()[2:], renderers, blacklist, whitelist)
middleware.RequestCache.clear_request_cache()
import salt.defaults.exitcodes import salt.utils import salt.utils.nb_popen import salt.utils.vt
]
available_version = salt.utils.alias_function(latest_version, 'available_version')
from django.conf import settings
def __init__(self): pass
zero_mean = rng.normal(size=shape) * self.sigma return zero_mean + v_mean
RSA_X931_PADDING = 5
import salt.ext.six as six try: import hglib HAS_HG = True except ImportError: HAS_HG = False
IS_RDP = rdp.__virtual__()
self.browser.refresh() profile_page.wait_for_page() self.verify_profile_page_is_public(profile_page)
estimator = RandomForestRegressor(random_state=0, n_estimators=100) score = cross_val_score(estimator, X_full, y_full).mean() print("Score with the complete dataset = %.2f" % score)
log = logging.getLogger(__name__)
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=rng)
db = {}
verify_date_or_time(COURSE_START_DATE_CSS, '12/20/2013') verify_date_or_time(COURSE_START_TIME_CSS, DUMMY_TIME)
_ = lambda text: text
EX_AGGREGATE = 20
rate = '40/minute' def allow_request(self, request, view): return self.has_api_key_permissions(request) or super(EnrollmentUserThrottle, self).allow_request(request, view)
with check_mongo_calls(courses_list_from_group_calls): _accessible_courses_list_from_groups(self.request)
CourseRerunState.objects.initiated(source_course_key, destination_course_key, request.user, fields['display_name'])
colors_hsv = colors_hsv.reshape((1, )+colors_hsv.shape) colors_rgb = matplotlib.colors.hsv_to_rgb(colors_hsv) colors_rgb = colors_rgb[0]
minion_id = kwargs['opts']['id']
xblock_actions = {'deletable': True, 'draggable': True, 'childAddable': True} explanatory_message = None
fresh_pillar = self.fetch_pillar() self.cache[self.minion_id] = {self.saltenv: fresh_pillar} log.debug('Pillar cache miss for minion {0}'.format(self.minion_id))
tmp = sorted(class_mapping, key=class_mapping.get)
width = self.ext.config['metacafe_width'][0] height = self.ext.config['metacafe_height'][0] return flash_object(url, width, height)
import salt.utils from salt.exceptions import CommandExecutionError
current_name = None
unpickled_scorer = pickle.loads(pickle.dumps(scorer)) score3 = unpickled_scorer(clf, X_test, y_test) assert_almost_equal(score1, score3)
@functools.wraps(fn) def wrapped(*args, **kwargs): orig_mode = config.mode if orig_mode in ["DebugMode", "DEBUG_MODE"]: config.mode = "FAST_RUN"
parents = list( self.collection.find(query, {'_id': True}, sort=[SORT_REVISION_FAVOR_DRAFT]) ) if len(parents) == 0: return cache_and_return(None)
proc_args.insert(0, sys.executable)
return self.q(css='.bit-publishing .wrapper-visibility .copy .inherited-from').visible
enrollment_message = _create_recent_enrollment_message( course_enrollments, course_modes_by_course )
(options, __) = parser.parse_args(arglist, values=new_options)
from salt.states import event
import urllib2 urlopen = urllib2.urlopen
log = logging.getLogger(__name__)
assert np.allclose(dt.mean(dtype='float64'), 0) assert np.allclose(dt.std(dtype='float64'), 1.)
rval = np.transpose(rval, tuple(self.axes.index(axis) for axis in ('b', 0, 1, 'c')))
if pkginfo[version_num].get('use_scheduler', False):
override_field_for_ccx( ccx_course_object, master_course_object, 'max_student_enrollments_allowed', valid_input['max_students_allowed'] )
return self.backend_name == pipeline['backend']
return self.q(css=self._bounded_selector('.check-discussion-category:checked')).is_present()
return os.path.join(__salt__['config.get']('cachedir'), 'file_backup')
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
try: assert_is_none(world.browser.get_alert()) except NoAlertPresentException: pass
'acceptance_wait_time_max': float,
return False
return self._stacks[stack]
if not include_first: results = results[1:]
import salt.utils import salt.modules.cmdmod import salt.utils.systemd
class AsyncTestCase(object): pass
resp_asset = post_asset_update(True, course) self.assertTrue(resp_asset['locked']) verify_asset_locked_state(True)
blocks_stack.extend(children)
_resolver_configured = False
return psutil.NUM_CPUS
student_module = StudentModule.objects.filter( course_id=self.course.id, student=self.student_user ) baseline = BaseStudentModuleHistory.get_history(student_module) self.assertEqual(len(baseline), 3)
obj_au_settings = obj_au.Settings
ASSET_IGNORE_REGEX = r"(^\._.*$)|(^\.DS_Store$)|(^.*~$)"
_write_file_network(network, _DEB_NETWORKING_FILE, True)
success = 'correct' for answer_id in correct_map: if not correct_map.is_correct(answer_id): success = 'incorrect'
return self.enabled and self.xseries_ad_enabled
return [{u"description": i, u"name": i, u"id": i} for i in map(str, xrange(num_topics))]
assert_raises(ValueError, compute_sample_weight, {1: 2, 2: 1}, y_)
test3 = value 3B
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
with patch('student.views.get_credit_provider_display_names') as mock_method: mock_method.return_value = providers_list response = self._load_dashboard()
correctness = correctmap.get_correctness('1_2_1') self.assertEqual(correctness, 'correct')
self.certificate_page = CertificatePage(self.browser, self.user_id, self.course_id)
return ( 'change_date', 'changed_by', 'enabled', 'entity_id', 'org_info_str', 'key_summary', )
paramvalues['binddn'] = _render_template(paramvalues['binddn'], username) paramvalues['binddn'] = ldap.filter.escape_filter_chars(paramvalues['binddn'])
intra_clust_dists = np.ones(distances.shape[0], dtype=distances.dtype)
import pyrax import pyrax.exceptions
import integration
)
a = '\xe0\xe1\xe2\xe3\xe4\xe5\xe7\xe8\xe9\xea\xeb' expected = 'aaaaaaceeee' assert_equal(strip_accents_unicode(a), expected)
'master_tops': dict,
return False
return self.construct_scalar(node)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../')
adder['tail_text'] = elt.tail if elt.tail else '' components.append(adder)
return response.content
response = self.get_with_bearer_token('/oauth2-test/') self.assertEqual(response.status_code, status.HTTP_200_OK)
url( r'^u/(?P<username>[\w.@+-]+)$', 'student_profile.views.learner_profile', name='learner_profile', ),
return []
'lang_pref.middleware.LanguagePreferenceMiddleware',
if self.xqueue_grade_response is not None: XQueueResponseFixture(self.submission, self.xqueue_grade_response).install()
from pylearn2.costs.mlp import L1WeightDecay as _L1WD from pylearn2.costs.mlp import WeightDecay as _WD
return CourseUserGroup.objects.filter(course_id=course_key, group_type=CourseUserGroup.COHORT, name=name).exists()
log.setup_temp_logger( getattr(self.options, 'log_level', 'error') )
self.check_caches("smstc_cache_test_key")
values = [arg_val] values.extend(arg_vals) arguments[param.name] = tuple(values) break
time.sleep(0.2)
'USE_CUSTOM_THEME': False,
self._submit_photos( face_image=self.IMAGE_DATA + "4567", photo_id_image=self.IMAGE_DATA + "8910", ) initial_data = self._get_post_data()
if time_since_last_activity > timedelta(seconds=timeout_in_seconds): del request.session[LAST_TOUCH_KEYNAME] auth.logout(request) return
import salt.utils import integration
config = sconfig.master_config(master_config)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
ForestEstimator = FOREST_ESTIMATORS[name]
return False
if user is not None: for role in [CourseInstructorRole, CourseStaffRole]: role(course_id).add_users(user)
if not HAS_REQUESTS: return False return __virtualname__
fancy = None
return False
for phase in self.run_data.keys(): if phase in ('fake_assets',): continue per_phase = self.run_data[phase] html.add_header(1, phase)
settings.apply_settings(self.settings) self.assertFalse(self.settings.SOCIAL_AUTH_RAISE_EXCEPTIONS)
def setUp(self): super(TestFilteredChildren, self).setUp() self.users = {number: UserFactory() for number in USER_NUMBERS}
if ret and 'ret_kwargs' in ret: _options.update(ret['ret_kwargs'])
import salt.utils import salt.utils.aws import salt.utils.xmlutil as xml from salt._compat import ElementTree as ET
import re import time import datetime
return self.func_to_count(param1, param2)
from __future__ import absolute_import, print_function
def test_barycenter_kneighbors_graph(): X = np.array([[0, 1], [1.01, 1.], [2, 0]])
assert_in(role, ['instructor', 'staff'])
csgraph_from_dense = None
import integration import salt.utils
log.warning("find_asset_metadata request of XML modulestore - not implemented.") return None
thumbnail_content = StaticContent(thumbnail_file_location, thumbnail_name, 'image/jpeg', thumbnail_file)
import salt.ext.six as six try: import salt.utils.psutil_compat as psutil
self.click_button('create_video', require_notification=True) self.wait_for_video_component_render()
from salt.utils import schema
self.assertTrue(self.store.has_changes(xblock))
shutil.copyfile(path_in, path_test)
ret['changes'] = {'old': '', 'new': name}
self.assertOLXIsDraftOnly(block_list_to_revert) self.publish(block_list_to_revert) self.assertOLXIsPublishedOnly(block_list_to_revert)
for handler in logging.root.handlers: handler.addFilter(SleekXMPPMUC())
source = String( help=_("The external URL to download the video."), display_name=_("Download Video"), scope=Scope.settings, default="" ) download_video = Boolean(
import copy import os import logging
if not sp.issparse(X) or hasattr(init, '__array__'): X_mean = X.mean(axis=0) if not sp.issparse(X): X -= X_mean
return re.sub(r'(;;|;_)', _unquote_slashes, text)
context = get_ccx_creation_dict(course) messages.error(request, context['use_ccx_con_error_message']) return render_to_response('ccx/coach_dashboard.html', context)
non_editable_metadata_fields = self.lc_block.non_editable_metadata_fields self.assertIn(LibraryContentDescriptor.mode, non_editable_metadata_fields) self.assertNotIn(LibraryContentDescriptor.display_name, non_editable_metadata_fields)
X_plot = np.linspace(-6, 6, 1000)[:, None] X_src = np.zeros((1, 1))
('arg', [1234]), ('kwarg', {'ext_source': 'redis'}),
from __future__ import absolute_import import logging
clf_isotonic = CalibratedClassifierCV(clf, cv=2, method='isotonic') clf_isotonic.fit(X_train, y_train, sw_train) prob_pos_isotonic = clf_isotonic.predict_proba(X_test)[:, 1]
import salt.utils.jid
if stdout is None and stderr is None: self.assertFalse(term.isalive())
try: os.makedirs(PREREQS_STATE_DIR) except OSError: if not os.path.isdir(PREREQS_STATE_DIR): raise
from __future__ import absolute_import import logging import pipes
X, y = iris.data, iris.target y_bin = y.copy() y_bin[y_bin == 2] = 0
ranks = np.ravel(ranks)
_ret = {}
vocabulary = defaultdict() vocabulary.default_factory = vocabulary.__len__
import salt.utils
try: import boto.sqs HAS_BOTO = True except ImportError: HAS_BOTO = False
self.click(".action-save") self.page.wait_for_ajax()
ret['changes']['added'] = create_result
rng = check_random_state(0)
out = out + out.T
CourseEnrollment.unenroll_by_email("jack@fake.edx.org", course_id) self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assert_unenrollment_event_was_emitted(user, course_id)
from __future__ import absolute_import
email_label = _(u"Email")
'PREVENT_CONCURRENT_LOGINS': True,
try: os.remove(path) except IOError: pass return None
nb = BernoulliNB() nb.fit(X_transformed, y)
self.course_dir = self.create_course_xml(self.content_dir, self.truncated_key)
target = (iris.target > 0).astype(np.intp) target = np.array(["setosa", "not-setosa"])[target]
iris = datasets.load_iris() X, y = iris.data[:, 1:3], iris.target
value = answers[name] defaults = {"field_value": value} if course_key: defaults['course_key'] = course_key
return self.icon_for_field(field_id, FIELD_ICONS[field_id])
module_class = SplitTestModule
import salt.utils.systemd import salt.utils.odict as odict
vm_size = override_size(vm_)
from __future__ import absolute_import
y = column_or_1d(y, warn=True) _check_numpy_unicode_bug(y) self.classes_, y = np.unique(y, return_inverse=True) return y
assert_raises(ValueError, plot_partial_dependence, clf, X, ['foobar'])
return line
import salt.config import salt.loader
results = data.get_course_enrollments(self.user.username) self.assertEqual(results, created_enrollments)
tp = y_true == y_pred tp_bins = y_true[tp] if sample_weight is not None: tp_bins_weights = np.asarray(sample_weight)[tp] else: tp_bins_weights = None
print( ' {LIGHT_RED}*{ENDC} {0} Failed to sync {2}: ' '{1}'.format( name, output['ret'], modules_kind, **self.colors) ) return False
tag = match.group(0) if ( ALLOWED_BASIC_TAG_PATTERN.match(tag) or ALLOWED_A_PATTERN.match(tag) or ALLOWED_IMG_PATTERN.match(tag) ): return tag else: return ""
self.client.login(username=self.user.username, password='test')
HAS_AUGEAS = False try: from augeas import Augeas as _Augeas HAS_AUGEAS = True except ImportError: pass
self.assertFalse(linode._validate_name('fooàààààbar'))
function = Group(inner_varname + Suppress("(") + expr + Suppress(")"))("function") function.setParseAction(self.function_parse_action)
for p_type in pkgtypes: ret[p_type].update(set(expanded[p_type]))
runtime_reqs_sec = self.total_complete / elapsed_time.total_seconds() print('Recalibrating. Current reqs/sec: {0}'.format(runtime_reqs_sec)) return
link = link[3:]
import salt.utils
if name in list_tasks(location):
priority = None
add_user_with_status_unrequested(user) course_creator_status = get_course_creator_status(user)
return [{'username': username, 'remote_id': 'remote_' + username} for username in usernames]
transcripts_utils.download_youtube_subs(good_youtube_sub, self.course, settings)
test_model = CourseMetadata.fetch(self.fullcourse) self.assertIn('edxnotes', test_model)
EmptyPromise( lambda: len(self.report_download_links) >= 1, 'Waiting for downloadable report' ).fulfill()
trees = ExtraTreesClassifier(max_depth=3, n_estimators=10, random_state=0) trees.fit(X, y)
ssh_dir = os.path.dirname(full) if user: uinfo = __salt__['user.info'](user)
query_features.append('cohort') query_features_names['cohort'] = _('Cohort')
account_settings = get_account_settings(self.default_request) self.assertEqual("Mickey Mouse", account_settings["name"])
for device in devices: if pvdisplay(device): raise CommandExecutionError('Device "{0}" was not affected.'.format(device))
self.assertTrue(CourseStructure.objects.filter(course_id=self.course.id).exists()) response = self.http_get_for_course() self.assertEqual(response.status_code, 200)
try: verification_status = cls.objects.filter(checkpoint__photo_verification=photo_verification).latest() return verification_status.checkpoint.checkpoint_location except cls.DoesNotExist: return ""
Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape)
data_dir = string_utils.preprocess('${PYLEARN2_DATA_PATH}') info['filename'] = os.path.join(data_dir, info['filename'])
CourseEnrollment.enroll(self.user, self.course_key, 'verified') ret_val = CourseEnrollment.unenroll(self.user, self.course_key) self.assertFalse(ret_val)
'master_shuffle': bool,
start = request.json.get('start', CourseFields.start.default) run = request.json.get('run')
if res['retcode'] != 0: ret[zpool] = res['stderr'] if 'stderr' in res else res['stdout'] else: ret[zpool] = 'created'
self.browser.switch_to_window(browser_window_handles[-1])
RestrictedCourse.objects.get(course_key=self.course.id).delete()
import pprint import logging import time
import os import hashlib
try: import pymongo HAS_PYMONGO = True except ImportError: HAS_PYMONGO = False
self.functions = salt.loader.minion_mods(self.opts) self.returners = salt.loader.returners(self.opts, self.functions)
dlogz = self.log_mean(log_ais_w)
exc_info_on_loglevel=logging.DEBUG
for i in xrange(int(numpy.sqrt(N)),0, -1): if 0 == N % i: return (i, N/i)
return (self.network_address.is_multicast and self.broadcast_address.is_multicast)
super(AutoAuthDisabledTestCase, self).setUp() self.url = '/auto_auth' self.client = Client()
return [('127.0.0.1:11211 (1)', {})]
raise CommandError( _( 'Skipping user "{}" because the specified and existing email ' 'addresses do not match.' ).format(user.username) )
assert rbmA_params[0].shape[0] == rbmB_params[0].shape[0] assert len(rbmA_params[1]) == len(rbmB_params[1])
r = requests.post(self.server_uri, data=json.dumps(data), headers=headers, verify=http_event_collector_SSL_verify)
compressed_pickled_data = zlib.compress(pickled_data, 1) tagger.measure('compressed_size', len(compressed_pickled_data))
raise ValueError("class_weight provided should be a " "dict or 'balanced'")
_set_verification_partitions(course_key, icrv_blocks)
task = host_ref.parent.Destroy_Task()
v_1 = DictVectorizer().fit([d_sorted]) v_2 = DictVectorizer().fit([d_shuffled])
module_store_setting['default']['OPTIONS']['stores'] = convert_old_stores_into_list( get_mixed_stores(module_store_setting) ) assert isinstance(get_mixed_stores(module_store_setting), list)
self.assertRaises(ValueError, utils.find_json, LORUM_IPSUM)
response = getattr(self.client, verb)(LIBRARY_REST_URL) self.assertEqual(response.status_code, 405)
listener_state = 'cmd_|-listener_test_listening_resolution_one_|-echo "Successful listen resolution"_|-mod_watch' self.assertIn(listener_state, state_run)
if (valid_repr.shape[1] > valid_repr.shape[0]): valid_repr = numpy.dot(valid_repr, valid_repr.T) test_repr = numpy.dot(test_repr, test_repr.T)
try: from log4mongo.handlers import MongoHandler, MongoFormatter HAS_MONGO = True except ImportError: HAS_MONGO = False
K = squareform(K) np.fill_diagonal(K, 1)
{key_field: 'fake'}, {key_field: getattr(locator, key_field) + 'X'}, {key_field: 'X' + getattr(locator, key_field)},
super(DashboardSearchTest, self).tearDown() os.remove(self.TEST_INDEX_FILENAME)
from __future__ import absolute_import from textwrap import dedent
course_page = self._goto_staff_page() course_page.set_staff_view_mode_specific_student(student_a_username) verify_expected_problem_visibility(self, course_page, [self.alpha_text, self.everyone_text])
from salt.exceptions import SaltInvocationError, CommandExecutionError
random_state = check_random_state(est.random_state) seed = random_state.randint(0, np.iinfo(np.int32).max)
quoteChar = quoteChar.strip() if len(quoteChar) == 0: warnings.warn("quoteChar cannot be the empty string",SyntaxWarning,stacklevel=2) raise SyntaxError()
if revision == ModuleStoreEnum.RevisionOption.published_only: query['_id.revision'] = MongoRevisionKey.published
from __future__ import unicode_literals
self.assertFalse(course.is_cohorted)
else: ret = _load_result(deleted, ret)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
if not comps: continue
response = searcher.search(field_dictionary={"library": library_search_key}) self.assertEqual(response["total"], 2)
python_block_regex = re.compile(r'<%\s(?P<code>.*?)%>', re.DOTALL)
__virtualname__ = 'ip'
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
brc = Birch(n_clusters=None, branching_factor=1, threshold=0.01) assert_raises(ValueError, brc.fit, X)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call
faces_centered -= faces_centered.mean(axis=1).reshape(n_samples, -1)
if power_iteration_normalizer == 'auto': if n_iter <= 2: power_iteration_normalizer = 'none' else: power_iteration_normalizer = 'LU'
mount_ignore_fs_keys = { 'ramfs': ['size'] }
import sys import os
problem = new_loncapa_problem(xml_str, capa_system=the_system) rendered_html = etree.XML(problem.get_html())
__virtualname__ = 'pkg'
X = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1]] y = [1, 1, 1, 1, 1, 1]
import logging import json
if STATE_CONF: tmplctx = STATE_CONF.copy() if tmplctx: prefix = sls + '::'
start_index = expression.end_index
full_event = dict(event, **task_info)
linux_lvm.__salt__ = {}
return self.q(css="a#add-allowance").present
indices, indptr, spmat_shape, sptype, outshp = \ convolution_indices.conv_eval(imgshp, maxpoolshp, maxpoolshp, mode='valid')
data.update(invalid_fields)
ridge.fit(X, y, sample_weights_OK) ridge.fit(X, y, sample_weights_OK_1) ridge.fit(X, y, sample_weights_OK_2)
return HttpResponse(status=status.HTTP_500_INTERNAL_SERVER_ERROR)
import tornado.ioloop
from __future__ import print_function
self.assertFalse(res_json['success'])
rval = -T.dot(state, self.bias)
return provider_details
from __future__ import absolute_import
new_doc = {} new_doc['views'] = get_valid_salt_views() new_doc['language'] = "javascript"
X, y = make_blobs(random_state=1) for Model in [DPGMM, VBGMM]: dpgmm = Model(n_components=10, random_state=1, alpha=20, n_iter=50, verbose=1)
ip_addresses = vb_get_network_addresses(machine_name=BOOTABLE_BASE_BOX_NAME)
return (self.network_address.is_private and self.broadcast_address.is_private)
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.save_problem(get_request_dict)
self.course.discussion_topics = {} self.course.save() self.discussion_num = 0 self.instructor = InstructorFactory(course_key=self.course.id)
kwargs[param_name] = arg
iph = unpack('!BBHHHBBH4s4s', ip_header)
mocked_attr.return_value = {'foo': 'bar'} self.assertEqual(utils.get_course_chapters(self.course_key), [])
mask_missing_values = _get_mask(X.data, missing_values) mask_valids = np.logical_not(mask_missing_values)
with patch.dict(local_cache.__opts__, {'keep_jobs': 0.00000001}): local_cache.clean_old_jobs()
student_id = AutoAuthPage(self.browser).visit().get_user_id()
from __future__ import absolute_import
if settings.FEATURES.get('ENABLE_OAUTH2_PROVIDER'): urlpatterns += ( url( r'^oauth2/login/$', auth_exchange.views.LoginWithAccessTokenView.as_view(), name="login_with_access_token" ), )
self.assertFalse(user.badgeassertion_set.all())
for i, update in enumerate(updates): results['update {0}'.format(i)] = update
mongo_db = { 'host': 'localhost', 'user': '', 'password': '', 'db': 'xlog', }
from salt.cloud.clouds import saltify
task_progress.skipped += 1
__virtualname__ = 'network'
definition_guid = course_key.as_object_id(definition_guid) return self.db_connection.get_definition(definition_guid, course_key)
debian_ip.__grains__ = {} debian_ip.__salt__ = {}
SkippedReverification.add_skipped_reverification_attempt( checkpoint=self.checkpoint, user_id=self.user.id, course_id=unicode(self.course.id) )
apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
def _install_signal_handlers(self): signal.signal(signal.SIGTERM, self._handle_signals) signal.signal(signal.SIGINT, self._handle_signals)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call )
clf.set_params(scale=True) X_score, Y_score = clf.fit_transform(X_s, Y_s) assert_array_almost_equal(X_s_score, X_score) assert_array_almost_equal(Y_s_score, Y_score)
return iter(getattr(d, _iteritems)(**kw))
from salt.exceptions import CommandExecutionError from salt.exceptions import SaltInvocationError import logging
x=dataset_resolver() logger.info(x.resolve_dataset("toaster-oven")) logger.info(x.resolve_dataset("fake-dataset"))
certificate.course_title = course_title_override
from salt.states import rbenv
X = np.arange(-200, 200) y = 0.2 * X + 20 data = np.column_stack([X, y])
self._auto_auth(self.USERNAME, self.EMAIL, False) self.courseware_search_page.visit()
'openedx.core.djangoapps.common_views',
with patch('student.models.cc.User.save'): uname = 'student' email = 'student@edx.org'
'notification_prefs',
self.verify_success_on_file_content( 'username,email,cohort\nfoo_username,bar_email,baz_cohort', mock_store_upload, mock_cohort_task )
module = CapaFactory.create(due=self.yesterday_str) self.assertFalse(module.should_show_check_button())
self.course_nav.go_to_vertical('Test Vertical-0')
ret['size'] = size.splitlines()[-1].split()[1]
import salt.output import salt.minion
import re import inspect
thumbnail_content, thumbnail_location = static_content_store.generate_thumbnail(content)
course = self.store.delete_course(course_key, self.user_id)
grains['locale_info']['defaultlanguage'] = 'unknown' grains['locale_info']['defaultencoding'] = 'unknown'
return self.display_name_with_default
if self.connect_callback is not None: def handle_future(future): response = future.result() self.io_loop.add_callback(self.connect_callback, response) future.add_done_callback(handle_future)
minimum = 1 maximum = times for i in range(times): self.assertIn(generate_int_id(minimum, maximum), range(minimum, maximum + 1))
__func_alias__ = { 'time_': 'time' }
import os.path
for key in todelete: if key in six.iterkeys(filerepos[repo].copy()): del filerepos[repo][key]
intfs = __salt__['sysfs.interfaces'](path)
return (np.where([True, True, False, False, True])[0], np.where([False, False, True, True])[0])
return cls
FIELD_BLACKLIST = ['last_activity_at', 'team_size']
container.add_missing_groups() self.verify_groups(container, ['alpha', 'gamma'], ['beta'])
return self.q(css=self._bounded_selector('.action-delete:not(.is-disabled) .remove-user')).present
context = { 'reorderable_items': set(), 'read_only': True } html = get_preview_fragment(request, html, context).content
self._auto_auth(self.USERNAME, self.EMAIL, False) self.dashboard.visit()
self.assertIsInstance(ret, list)
modulestore().delete_course(destination_course_key, user_id)
rng = check_random_state(0)
raise NotImplementedError
from __future__ import absolute_import import copy
return self.q(css=self.BOOKMARKS_BUTTON_SELECTOR).visible
ps_new_cache = self._create_service(username, {}) self.assertEqual( second_group.id, ps_new_cache.get_user_group_id_for_partition(user_partition_id) )
if position is not None: try: position = int(position) except (ValueError, TypeError): log.exception('Non-integer %r passed as position.', position) position = None
import salt.utils
site_configuration_history = SiteConfigurationHistory.objects.filter( site=site_configuration.site, ).all()
self.assertFalse(CourseEnrollment.is_enrolled(self.user, self.course.id))
import salt.utils
self.problem_page.click_choice('choice_choice_1') self.problem_page.click_check() self.problem_page.wait_for_expected_status('label.choicegroup_incorrect', 'incorrect')
import integration import salt.utils
if key.scope not in self._allowed_scopes: raise InvalidScopeError(key, self._allowed_scopes)
#html_use_index = True
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit()
if hasattr(modulestore, '_drop_database'):
def test_no_auth(self): self.logout() self.api_response(expected_response_code=401)
log = logging.getLogger(__name__)
try: ret = json.dumps({'return': resp}) except TypeError as exc: code = 500 ret = str(exc)
uninstaller = pkginfo[version_num].get('uninstaller')
cls.clear_caches()
if not isinstance(value, six.text_type): if not isinstance(value, (set, list, dict)): value = str(value) values[key] = value
self.notes = list()
clf = GradientBoostingClassifier(n_estimators=10, random_state=1) clf.fit(iris.data, iris.target)
log_likelihoods, responsibilities = self.score_samples(X) current_log_likelihood = log_likelihoods.mean()
return Client.objects.create( client_id=self.client_id, client_type=PUBLIC, )
with default_signals(signal.SIGINT, signal.SIGTERM):
data = {} if email: data['email'] = email return self.client.post(path=reverse('password_change_request'), data=data)
pass
absent_state = 'cmd_|-listener_test_listening_non_changing_state_|-echo "Only run once"_|-mod_watch' self.assertNotIn(absent_state, state_run)
Xt = X for name, transform in self.steps[:-1]: Xt = transform.transform(Xt) return self.steps[-1][-1].predict_proba(Xt)
ret['comment'] = 'Database {0} is not present, so it cannot be removed'\ .format(name) return ret
self.assertEqual(is_active, new_is_active) self.assertEqual(course_mode, new_mode)
return site_prefix() + reverse( 'certificates:html_view', kwargs={'user_id': user_id, 'course_id': unicode(course_key)}) + '?evidence_visit=1'
cache.delete(CreditProvider.CREDIT_PROVIDERS_CACHE_KEY)
effort = self.store.get_item(course_key.make_usage_key('about', 'end_date')) self.assertEqual(effort.data, 'TBD')
if which_set in ['train', 'test']: data_x, data_y = load_data("{0}{1}_32x32.mat".format(path, which_set))
from __future__ import absolute_import
return u"{} : {}".format(self.course_id.to_deprecated_string(), self.annotation)
for key, val in six.iteritems(repo_conf): setattr(self, key, val)
if sp.issparse(X): variances = mean_variance_axis(X, axis=0)[1] else: variances = np.var(X, axis=0) return np.mean(variances) * tol
return location in self._locations_to_scores
try: from pyVmomi import vim, vmodl HAS_PYVMOMI = True except ImportError: HAS_PYVMOMI = False
return self.q(css=".license-value").first.text[0]
uid_patch = patch('onelogin.saml2.utils.OneLogin_Saml2_Utils.generate_unique_id', return_value='TESTID') uid_patch.start() self.addCleanup(uid_patch.stop)
with self.assertNumQueries(6): self._get_list()
import salt.syspaths import salt.utils import salt.utils.event import salt.ext.six as six from salt.ext.six import string_types
for student in students[:3]: self.assertIn( GeneratedCertificate.certificate_for_student(student, self.course.id).status, CertificateStatuses.PASSED_STATUSES )
with self.assertNumQueries(20): api.set_credit_requirement_status( "bob", self.course_key, requirements[1]["namespace"], requirements[1]["name"] )
self.assertGroupContent( groups[0], title=u"cool (2)", notes=[u"Third note", None] )
import subprocess
n_runs = 5
user.masquerade_settings = { self.course_key: CourseMasquerade(self.course_key, role=role) }
import salt.utils
import salt from salt.modules import syslog_ng
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, Mock, NO_MOCK, NO_MOCK_REASON, patch )
return self.q(css='input[name=list-profiles-csv]')
attempt = SoftwareSecurePhotoVerification(user=self.user, photo_id_key="dummy_photo_id_key") attempt.mark_ready() attempt.save() attempt.submit()
sample_weight /= sample_weight_sum
from mako.lookup import TemplateLookup lookup = TemplateLookup(directories=[os.path.dirname(tmplpath)])
from salt.modules import match
if not os.path.exists(local_name):
if not fnmatch.fnmatch(repo['url'], six.text_type(remote)): continue
super(SplitMongoModuleStore, self).clone_course(source_course_id, dest_course_id, user_id, fields, **kwargs) return new_course
import salt.ext.six as six
patch_stack = patches.reshape((B*OR*OC, KR*KC*CH))
log.error('The master key has changed, the salt master could ' 'have been subverted, verify salt master\'s public ' 'key') return ''
problem_page.fill_answer("4") problem_page.click_check() self.assertFalse(problem_page.is_correct())
pass
num_vis = rng.randint(1,11) n_classes = rng.randint(1, 11)
full = _get_config_file(user, config)
ret = self.run_state('ssh_known_hosts.absent', test=True, **kwargs) self.assertSaltNoneReturn(ret)
if not header: if __salt__['file.search']( name, salt.utils.build_whitespace_split_regex(chunk), multiline=True): continue
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
FEATURES['ENABLE_TEAMS'] = True
expr_s = re.sub( r'script([a-zA-Z0-9]+)', '\\mathcal{\\1}', expr_s )
raise NotImplementedError
cachedir = self.cachedir[:-7] if self.cachedir is not None else None return (self.__class__, (cachedir, self.mmap_mode, self.compress, self._verbose))
coffee_file_path = os.path.dirname(__file__) + "/test_files/js/*.coffee" os.system("node_modules/.bin/coffee -c %s" % (coffee_file_path))
self.counters['logical lines'] += 1
self.assertEqual(len(mail.outbox), 0) user_status = VerificationStatus.objects.filter(user=self.user).count() self.assertEqual(user_status, 0)
return None
return os.path.join('/sys/block/', dev)
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
class WriteSaltVersion(Command):
import salt.utils
self.unit_page = None
all_assets = SortedAssetList(iterable=[], key=key_func) for asset_type, val in course_assets.iteritems(): all_assets.update(val)
self.assertDeserializeEqual(False, 'false') self.assertDeserializeEqual(True, 'true') self.assertDeserializeEqual(-2.78, '-2.78')
self._cache.delete(self._encode_root_cache_key(root_block_usage_key)) logger.info( "Deleted BlockStructure %r from the cache.", root_block_usage_key, )
segment_context = full_segment_event.get('context')
patch_extractor = sp_extract_patches(IR, IC, KR, KC, CH, RasterOrders.channel_row_col, RasterOrders.channel_row_col, subsample, border_mode, flip_patches=True).tocsc()
self._reset() return self.partial_fit(X, y)
list_keypairs = self.run_cloud('-f list_keypairs {0}'.format(PROVIDER_NAME))
pass
_mock_counts.return_value = {'total': 0} with self.assertRaises(SystemExit): call_task('pavelib.quality.run_safelint', options={"thresholds": "invalid"})
context[context_key] = request.META.get(header_name, '').decode('latin1')
if credit_service: credit_state = credit_service.get_credit_state(user_id, course_id) if credit_state: context.update({ 'credit_state': credit_state })
kwargs['program'] = self.script
self._assertOLXBase(block_list, draft=True, published=False)
ret = self.run_state('ssh_known_hosts.present', **dict(kwargs, name=GITHUB_IP)) self.assertSaltStateChangesEqual( ret, GITHUB_FINGERPRINT, keys=('new', 'fingerprint') )
params = self.get_params() updates = OrderedDict(izip_no_length_check(params, params)) self.modify_updates(updates) f = function([], updates=updates) f()
obj = UTC.localize(obj)
assert_greater(mb_k_means.cluster_centers_.any(axis=1).sum(), 10)
return self.q(css=self._bounded_selector('.visibility-button')).is_present()
NOT_CONFIGURED = "not-configured"
problem = new_loncapa_problem(xml_str)
from __future__ import absolute_import from uuid import uuid4 as _uuid
import salt.utils.jid import salt.returners import salt.ext.six as six
set_credit_requirement_status( user.username, course_key, 'reverification', checkpoint.checkpoint_location, status='declined' )
from salt.modules import grub_legacy from salt.exceptions import CommandExecutionError
input_formula = "x + y" self.assert_grade(problem, input_formula, "incorrect")
mock_get.return_value = Mock(status_code=200, text=response_success, content=response_success) transcript_name = transcripts_utils.youtube_video_transcript_name(youtube_text_api) self.assertEqual(transcript_name, 'Custom')
from salt.states import lxc import salt.utils
if instance.state == CourseCreator.DENIED or granted_state_change: send_user_notification.send( sender=sender, user=instance.user, state=instance.state )
mapped = [mapped]
from salt.modules import ddns
assert world.is_css_not_present(modal_css, wait_time=10)
LogoutPage(self.browser).visit() self._auto_auth("STAFF_TESTER", "staff101@example.com", True)
super(TestEventPublishing, self).setUp() self.mock_user = UserFactory() self.mock_user.id = 1 self.request_factory = RequestFactory()
for enrollment in manual_enrollments: self.assertEqual(enrollment.enrollment.mode, CourseMode.DEFAULT_SHOPPINGCART_MODE_SLUG)
self.coach = coach = AdminFactory.create(password="test") self.client.login(username=coach.username, password="test")
self.enrollment = CourseEnrollmentFactory( user=self.user, course_id=self.course.id, mode="verified" )
if should_recompile(): _logger.debug('recompiling')
skiprows = 1 if headers else 0 x = np.loadtxt(test_path, delimiter=delimiter, skiprows=skiprows)
return self.name + " for " + (self.course_id.to_deprecated_string() if self.course_id else "all courses")
X, y, _, _, _ = _preprocess_data(X, y, fit_intercept, normalize, copy=False)
continue
win32security.SetNamedSecurityInfo( path, win32security.SE_FILE_OBJECT, win32security.OWNER_SECURITY_INFORMATION, userSID, None, None, None )
VerificationDeadline.set_deadline(course_key, verification_deadline)
output = assets._get_asset_json("my_file", content_type, upload_date, location, thumbnail_location, True)
del_info = self.run_function('group.info', [DEL_GROUP]) if del_info: self.run_function('group.delete', [DEL_GROUP])
return hasattr(self, '_has_shuffle')
raise ValueError("Invalid value for test_size: %r" % test_size)
source, source_hash = __salt__['file.source_list']( source, source_hash, __env__ )
clf = GaussianNB(priors=np.array([-1., 2.])) assert_raises(ValueError, clf.fit, X, y)
os.remove(path)
time.sleep((2 ** (RoleRetries - retry)) + (random.randint(0, 1000) / 1000)) continue
import salt.utils.args from salt.utils.odict import OrderedDict
self.mock_module = MagicMock() self.mock_module.id = 1 self.dispatch = 'score_update'
def loss_grad_fun(t): return mlp._loss_grad_lbfgs(t, X, Y, activations, deltas, coef_grads, intercept_grads)
for fname, dirpath in get_all_files(directory): if fname == filename: return dirpath return None
mode = 2 if Minv is None: Minv_matvec = get_inv_matvec(M, symmetric=True, tol=tol) else: Minv = _aslinearoperator_with_dtype(Minv) Minv_matvec = Minv.matvec M_matvec = _aslinearoperator_with_dtype(M).matvec
role = CourseCcxCoachRole(course_key) self.assertTrue(role.has_user(self.coach))
self.assertInCourseListing(existent_course_key)
warnings.warn(premature, RuntimeWarning, stacklevel=3) break
params = [] params.append(name) for root_dev in layout:
grains = {'mem_total': 0} if osdata['kernel'] == 'Linux': meminfo = '/proc/meminfo'
clf.intercept_scaling = 100 clf.fit(X, y) intercept1 = clf.intercept_ assert_less(intercept1, -1)
__func_alias__ = { 'reload_': 'reload' }
RANDOM_SEED = np.random.randint(2 ** 10)
from salt.ext.six import string_types, iteritems
problem = self.build_problem(sample_dict=sample_dict, num_samples=10, tolerance=0.01, answer="$calculated_ans", script=script)
test_user = UserFactory() self.register_with_redemption_code(test_user, course_registration_code.code)
return self.prior.get_params()
('LEFTPADDING', (0, 1), (0, 1), 5 * mm),
try: ccx = CustomCourseForEdX.objects.get( id=ccx_id, course_id=course.id, coach=coach ) except CustomCourseForEdX.DoesNotExist: return None return ccx
return self.q(css='.new-course-button')
with warnings.catch_warnings(record=True) as recorded_warnings:
self.factory(alpha=0.01, n_iter=20).fit(X2, np.ones(9))
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.5, random_state=random_state)
self.send_get(self.anonymous_client, expected_status=401) self.send_patch(self.anonymous_client, {}, expected_status=401)
assert_equal(ransac_estimator.inlier_mask_.shape[0], n_samples)
from __future__ import unicode_literals
self.set_logged_in_cookies(request)
last_valid_score = self.validation_scores_[-1]
days_good_for = settings.VERIFY_STUDENT["DAYS_GOOD_FOR"] return datetime.now(pytz.UTC) - timedelta(days=days_good_for)
if hasattr(self, 'event'): del self.event
return None
def get_readonly_fields(self, request, obj=None):
if library_role: library_role(self.lib_key).add_users(self.non_staff_user) if course_role: course_role(course.location.course_key).add_users(self.non_staff_user)
'edx_proctoring',
from __future__ import absolute_import
out *= .5 np.tanh(out, out) out += 1 out *= .5
clf = LinearSVC() X, y_idx = make_blobs(n_samples=100, n_features=2, random_state=42, centers=3, cluster_std=3.0)
from salt.modules import artifactory
return dict( super(GradingPolicySerializer, self).to_representation( defaultdict(lambda: None, obj) ) )
return self.background_task_history_button.click()
ret['result'] = True ret['comment'] = 'property {0} already has value "{1}"'.format(name, value)
return super(SoftDeleteCouponManager, self).get_queryset().filter(is_active=True)
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.todo', 'numpydoc', 'sphinx.ext.autosummary'] #, 'ext']
ret = utils.repack_dictlist(LORUM_IPSUM) self.assertDictEqual(ret, {})
from salt.modules import mysql
_save = self.run_function('beacons.save') self.assertTrue(_save['result'])
self.user.password = u'new password' self.user.save() self.assert_user_setting_event_emitted(setting='password', old=None, new=None)
leaf_weights = node_weights[node_weights != 0] assert_greater_equal( np.min(leaf_weights), total_weight * est.min_weight_fraction_leaf, "Failed with {0} " "min_weight_fraction_leaf={1}".format( name, est.min_weight_fraction_leaf))
PLATFORM_CLASSES = {IOS.NAME: IOS, Android.NAME: Android}
monitoring_dataset = DenseDesignMatrix(X=X)
from __future__ import absolute_import import logging
sorted_block_requirements = sorted( block_requirements, key=lambda x: (x['start_date'] is None, x['start_date'], x['display_name']) )
raise NotImplementedError()
minion = salt.cli.daemons.Minion() minion.start() break
import logging
import salt.utils.odict from salt.modules import seed from salttesting.helpers import ensure_in_syspath
if privacy is None: privacy = self.PRIVACY_PUBLIC self.visit_profile_page(username, privacy=privacy)
assert_less(np.sum(s_clf.coef_ != 0.0), 2 * n_informative)
return {"library": unicode(normalized_structure_key)}
output = os.linesep.join(output.splitlines())
sel = np.zeros(self.num_examples, dtype=bool) sel[next_index] = True next_index = sel
self.assertEqual(len(httpretty.httpretty.latest_requests), count)
from __future__ import absolute_import
class_=class_, selector=selector
graph = graph.tocsr()
pass
_refresh_db = True
proc.start()
TEST_RUNNER = 'openedx.core.djangolib.nose.NoseTestSuiteRunner'
self.assertIsNone(rewrite_video_url("", ""))
if hasattr(settings, 'DEPRECATED_ADVANCED_COMPONENT_TYPES'): xblock_types.extend( xblock_type for xblock_type in settings.DEPRECATED_ADVANCED_COMPONENT_TYPES if xblock_type not in xblock_types )
if role is not None: role().add_users(user)
{% for k, v in details['servers'].iteritems() %} {{ k }}: dellchassis.blade_idrac: - idrac_password: {{ v['idrac_password'] }} {% endfor %}
CLIENT_NAME = "edx-notes" DEFAULT_PAGE = 1 DEFAULT_PAGE_SIZE = 25
self.assertEqual(4.0, calc.evaluator({}, {}, '4.'))
if err == 'usage:': break ret[csnap] = res['stderr']
user_exists = __salt__['mongodb.user_exists'](name, user, password, host, port, database, authdb) if user_exists is True: return ret
self.export_fs = None
parent = self._get_raw_parent_location(as_published(location), ModuleStoreEnum.RevisionOption.draft_preferred) if parent: self._update_single_item(parent, update) self._update_ancestors(parent, update)
__virtualname__ = 'pkg' log = logging.getLogger(__name__)
self.login() response = self.api_response(expected_response_code=302) self.assertTrue(self.username in response['location'])
y_train = self.y_train_ if y_train.ndim == 1: y_train = y_train[:, np.newaxis]
resp = self.client.post( '/course/bad/course/key/entrance_exam', {}, http_accept='application/json' ) self.assertEqual(resp.status_code, 400)
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.save_problem(get_request_dict)
response = self.client.get(self.programs_path) self.assertRedirects( response, '{login_url}?next={programs}'.format( login_url=settings.LOGIN_URL, programs=self.programs_path ) )
euclidean_pkl = pickle.loads(pickle.dumps(euclidean)) pyfunc_pkl = pickle.loads(pickle.dumps(pyfunc))
xml = self.xml cxml = xml.xpath('//*[@id=$id]//choice', id=xml.get('id'))
max_scores_cache.fetch_from_remote([location_to_cache]) self.assertIsNone(max_scores_cache.get(location_to_cache)) self.check_grade_percent(0.33)
#html_use_opensearch = ''
pass
assert key.user_id == self.user.id
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.deny("Not valid!")
self.client.login(username=self.non_staff_user.username, password='test') response = self.call_add_users_to_cohorts('') self.assertEqual(response.status_code, 403)
salt '*' vsphere.vsan_add_disks my.esxi.host root bad-password
ssh_gateway_config = {'ssh_gateway': ssh_gateway}
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import integration import salt.utils
assert_almost_equal((RBF(2.0) + 1.0)(X), (1.0 + RBF(2.0))(X))
stdout = json.loads(result['stdout']) return stdout != {}
import integration import salt.config from salt.state import HighState from salt.utils.odict import OrderedDict, DefaultOrderedDict
FIRST_TIME_VERIFY_MSG = 'first-time-verify' VERIFY_NOW_MSG = 'verify-now' VERIFY_LATER_MSG = 'verify-later' UPGRADE_MSG = 'upgrade' PAYMENT_CONFIRMATION_MSG = 'payment-confirmation'
cls.engine().remove(cls.DOCUMENT_TYPE_NAME, [course_team.team_id])
uncertainty_index = uncertainty_index = np.argsort(pred_entropies)[-5:]
self.check_response('done_0', 'done-unmarked') self.check_response('done_1', 'done-marked')
from salt.modules import win_license as license
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
if raw: self.set_raw_content(content) else: self.set_content(content) self.cancel()
self.problem.system.is_author_mode = True self.assertEqual("original_get_html", self.problem.get_html())
'state_top': str,
log = logging.getLogger(__name__)
self.assertTrue(res_json['success']) self.assertEqual( res_json['message'], u"Certificate generation started for white listed students." )
else: return ""
from __future__ import absolute_import import pyrax
del post_data[post_key] expected_pattern = r"<title>(\s+)Receipt"
result = self.client.get_html(self._url()) self.assertNotIn('Test certificate', result.content)
return module.sort_key or module.discussion_target
for section in self.chapter.get_children(): section.visible_to_staff_only = True self.store.update_item(section, ModuleStoreEnum.UserID.test)
modified_cohort_name = "renamed random cohort" default_cohort.name = modified_cohort_name default_cohort.save()
X = iris.data[45:, :] y = iris.target[45:] solvers = ("lbfgs", "newton-cg") class_weight_dict = _compute_class_weight_dictionary(y)
rng = np.random.RandomState([2012, 10, 9]) batch_size = 5 rows = 10 cols = 9 channels = 3 filter_rows = 4 filter_cols = filter_rows + 1 num_filters = 6
from __future__ import absolute_import
self.cert.mode = 'audit' self.cert.status = status self.cert.save()
assert not world.is_css_present('iframe', wait_time=0)
split_test = self._update_partition_id(-50) self.assertEqual(2, len(split_test.children)) self.assertEqual(initial_group_id_to_child, split_test.group_id_to_child)
if parent_url is not None and index is not None: course_key = descriptor.location.course_key parent_location = course_key.make_usage_key_from_deprecated_string(parent_url)
self.attributes["commentable_id"] = self.attributes["id"] self.retrieved = True return self
estimators = [ ('Eigenfaces - RandomizedPCA', decomposition.RandomizedPCA(n_components=n_components, whiten=True), True),
lw = LedoitWolf(store_precision=False) lw.fit(X) assert_almost_equal(lw.score(X), score_, 4) assert(lw.precision_ is None)
Created Certificate for "www.example.com": /etc/pki/my_little/certs/www.example.com.crt"
self.assertRedirects(response, reverse('dashboard'))
course_display_name = self.advanced_settings.get('Course Display Name') self.advanced_settings.set('Course Display Name', 1) self.advanced_settings.wait_for_modal_load()
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
item = self.draft_mongo.get_item(vert_location, 0) self.assertFalse(getattr(item, 'is_draft', False), "Item was published. Draft should not exist")
HAS_MYSQLDB = False
from __future__ import print_function from __future__ import absolute_import
with override_settings(CREDIT_PROVIDER_SECRET_KEYS={}): response = self.post_credit_request(self.user.username, self.eligibility.course.course_key) self.assertEqual(response.status_code, 400)
for prop in state_cfg: if isinstance(state_cfg[prop], (list)) and len(state_cfg[prop]) == 0: continue
allowance_section.submit_allowance_form('10', self.USERNAME)
data = np.asarray(data[skip:skip+trials])[:, 0, :, :]
if public: for filename in self.filenames: make_readable(filename)
from __future__ import absolute_import import logging from time import time, sleep
return " ".join(str(arg) for arg in args if arg)
import salt.utils.dictupdate as dictupdate
return (name, ipsecpolicy, ikepolicy, vpnservice, peer_cidrs, peer_address, peer_id, psk, admin_state_up, kwargs)
self._set_mock_request_data(mock_request, { "threads_count": threads_count, "comments_count": comments_count, })
log.debug( 'ext_tops.mongo: no document found in collection {0}'.format( collection ) ) return {}
if existing['code'] == 200:
DEBUG_TOOLBAR_MONGO_STACKTRACES = False
#html_style = 'default.css' html_theme = 'solar' html_theme_path = ["./themes"]
self.course = CourseFactory()
Donation.add_to_order(cart, amount, course_id=course_id)
if valid_size < 1.0: valid_size /= 1.0 - np.true_divide(self.n_test, self.n) self.valid_size = valid_size
try:
if properties: optlist = [] for prop in properties.keys():
for param, value in zip(self.get_params(), values): param.set_value(value, borrow=borrow)
self.definition = block_data.get('definition', None)
import salt.netapi
command = resubmit_error_certificates
raise RuntimeError('The passed keys need to be a list')
expected_message = self.get_dashboard_enrollment_message() self.assertTrue(expected_message in response.content)
import logging
best_labels, best_inertia = \ _labels_inertia(X, x_squared_norms, best_centers, precompute_distances=precompute_distances, distances=distances)
pca.fit(X_digits)
return xblock_local_resource_url(block, uri)
with override_settings(REGISTRATION_EXTRA_FIELDS=extra_fields_setting): response = self.client.get(self.url) self.assertHttpOK(response)
if do_oob: sample_mask = _random_sample_mask(n_samples, n_inbag, random_state) old_oob_score = loss_(y[~sample_mask], y_pred[~sample_mask], sample_weight[~sample_mask])
email_obj = CourseEmail.objects.get(id=email_id) targets = [target.target_type for target in email_obj.targets.all()]
module = module + '.' if not module.endswith('.') else module
return {}
response = self.client.post(reverse('admin:student_courseaccessrole_add'), data=data) self.assertRedirects(response, reverse('admin:student_courseaccessrole_changelist'))
u"{user}@example.com".format( user=(u'e' * (EMAIL_MAX_LENGTH - 11)) )
wiki_courses = self.store.get_courses_for_wiki('999') self.assertEqual(len(wiki_courses), 0)
request.grant_type = grant_type request.user = user
os.remove(saved_path)
xmin, xmax = plt.xlim() ymin, ymax = plt.ylim() coef = clf.coef_ intercept = clf.intercept_
import integration
return _check_stop_list(self.stop_words)
Options.FORWARD_PROPERTIES = {'fields', 'many_to_many', 'concrete_fields', 'local_concrete_fields', '_forward_fields_map'}
import salt.utils import salt.utils.itertools from salt.exceptions import SaltInvocationError, CommandExecutionError
mdadm.__salt__ = {} mdadm.__opts__ = {}
subsection_css = ( ".course-navigation .chapter-content-container:nth-of-type({0}) " ".menu-item a p:nth-of-type(1)" ).format(section_index)
plt.fill_between(alphas, scores + std_error, scores - std_error, alpha=0.2)
upload_file = request.FILES['file'] filename = upload_file.name mime_type = upload_file.content_type size = get_file_size(upload_file)
sub_cmd = 'DROP SCHEMA "{0}"'.format(name) _psql_prepare_and_run( ['-c', sub_cmd], runas=user, maintenance_db=dbname, host=db_host, user=db_user, port=db_port, password=db_password)
ttype = 'zeromq'
fig = plt.figure(fignum, figsize=(4, 3)) plt.clf() ax = Axes3D(fig, rect=[0, 0, .95, 1], elev=48, azim=134)
full_segment_event = request.json
try: ranges.last.value = 'Failure' except InvalidElementStateException:
super(DraftModuleStore, self).delete_course(course_key, user_id)
_delete = self.run_function('beacons.delete', ['ps']) self.assertTrue(_delete['result'])
response = requests.get(self._get_url("api/v1/search")) self.assertEqual(response.status_code, 400)
self.assertIsInstance( self.run_function('softwareupdate.list_available'), dict)
msg = '%200s has no associated address class' % (type(self),) raise NotImplementedError(msg)
try: mod = import_module(app + '.startup') except ImportError: continue
return self.link_value
return cls.populate(modulestore().get_course(course_key))
from __future__ import absolute_import import os import sys import getpass import platform import yaml import signal import shutil import tempfile import logging
url( r'^account/', include('student_account.urls') ),
return page.q(css='.wrapper-notification-mini.is-hiding').present
assert isinstance(course_key, CourseKey) store = self._get_modulestore_for_courselike(course_key) try: return store.get_course(course_key, depth=depth, **kwargs) except ItemNotFoundError: return None
self.config.pop(self._logfile_config_setting_name_)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, expensiveTest
return u'%b %d, %Y'
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
original_image_shape = (96, 96)
if xml_path: xml_text = xml_path
AUTH_PROVIDERS = ('pygit2',) AUTH_PARAMS = ('user', 'password', 'pubkey', 'privkey', 'passphrase', 'insecure_auth')
assert_almost_equal(np.diag(y_cov), np.exp(kernel.theta[0]), 5)
for i in range(X.shape[0]): assert_almost_equal(np.linalg.norm(X[0].data, 2), 1.0)
if course_key is None: return self._bulk_ops_record_type()
indices = np.searchsorted(sorted_labels, labels[:n_labels]) tp_sum = tp_sum[indices] true_sum = true_sum[indices] pred_sum = pred_sum[indices]
yield super(SharedModuleStoreTestCase, cls).setUpClass()
self.course.grading_policy = grading_policy self.update_course(self.course, self.student_user.id) self.refresh_course()
for iter_ in range(self.n_iter):
super(SendMsgBot, self).__init__(jid, password)
url = self._reverse_urls(['courseware'], course)[0] self.assert_request_status_code(302, url)
section_titles = [t.split('\n')[0] for t in section_titles]
si = _get_si()
assert_equal(grid_search_no_score.best_params_, grid_search.best_params_) assert_equal(grid_search.score(X, y), grid_search_no_score.score(X, y))
return self.store.get_course(courselike.id.replace(branch=None, version_guid=None))
from __future__ import absolute_import, print_function import os
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, Mock, MagicMock, patch
return Fragment(content=u"<div>Nothing to randomize between</div>")
return ( cls.is_restricted_course(unicode(course_id)) and cls._get_restricted_courses_from_cache().get(unicode(course_id))["disable_access_check"] )
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch )
if settings.ROOT_URLCONF == 'lms.urls': url_pattern = '/info' else: url_pattern = '/course/{}'.format(unicode(course_key))
import logging
from salt.states import boto_sns
self.assertEqual(course_id, str(course.id))
from __future__ import absolute_import import datetime import hashlib import logging import re import os import socket
asset_key = StaticContent.get_asset_key_from_path(course_key, relative_path)
next_url = None if self.page.has_next(): next_url = replace_query_param(self.base_url, "page", self.page.next_page_number()) return next_url
super(MultinomialSampler, self).__init__(0, *args, **kwargs)
if len(children) < self.max_leases: self.client.create(self.create_path, self.data, ephemeral=self.ephemeral_lease)
observer.schedule(self, 'common/lib/xmodule/', recursive=True)
cohorted_topics = self.q(css=self._bounded_selector('.check-discussion-subcategory-%s:checked' % key)) return len(cohorted_topics.results)
self.__clear_hosts() f = salt.utils.fopen(HFN, 'w') f.close()
assert_array_equal(reg.predict([[0.2, -1.0]]), np.array([-1]))
return True
deadline = models.DateTimeField( default=default_deadline_for_credit_eligibility, help_text=ugettext_lazy("Deadline for purchasing and requesting credit.") )
self.assertTrue(self._has_changes(parent.location)) self.assertTrue(self._has_changes(child.location))
n_jobs, n_estimators, starts = _partition_estimators(self.n_estimators, self.n_jobs)
_valid_mask_octets = frozenset((255, 254, 252, 248, 240, 224, 192, 128, 0))
return {}
activation_key = create_account(self.USERNAME, self.PASSWORD, self.EMAIL) activate_account(activation_key)
return OAuth2Client.objects.create(client_type=constants.CONFIDENTIAL)
return ret
elif trigger_types[trigger_type] == TASK_TRIGGER_DAILY: trigger.Id = 'Daily_ID1' trigger.DaysInterval = kwargs.get('days_interval', 1)
docs_train, docs_test, y_train, y_test = train_test_split( dataset.data, dataset.target, test_size=0.25, random_state=None)
launch_mcd_on_dataset(500, 1, 100, 0.001, 0.001, 350)
def setUp(self): super(SignalDisconnectTestMixin, self).setUp() SignalHandler.course_published.disconnect(listen_for_course_publish)
if not snapshot: ret['error'] = 'one or more snapshots must be specified'
canonical_request = '\n'.join(( method, uri, querystring, canonical_headers, signed_headers, payload_hash ))
self.save() response = perform_request( 'get', url, retrieve_params, metric_action='model.retrieve', metric_tags=self._metric_tags, )
clf = svm.SVC().fit(X, Y) assert_raises(ValueError, clf.predict, sparse.lil_matrix(X))
if __opts__['pillar_roots'].get(branch, []) == [pillar_dir]: return {}
from salt.exceptions import CommandExecutionError import salt.utils.http
if apply_change is True: assign(name, value) return 'Updated and applied' return 'Updated'
return True
from __future__ import absolute_import import yaml import re import tempfile import os
if isinstance(member, dict):
__MP_LOGGING_CONFIGURED = True
self.assert_redirect_to_login_looks_correct(actions.do_complete(request.backend, social_views._do_login))
import salt.client import salt.utils import salt.utils.virt import salt.utils.cloud import salt.key from salt.utils.odict import OrderedDict as _OrderedDict
self.run_function('pkg.remove', [DEL_PKG]) del_list = self.run_function('pkg.list_pkgs') try: self.assertNotIn(DEL_PKG, del_list) except AssertionError: raise
from __future__ import absolute_import import os import re import sys import time import types import socket import logging import logging.handlers import traceback import multiprocessing
api_call = lambda: generate_certificates_for_students( self.create_task_request(self.instructor), self.course.id ) self._test_resubmission(api_call)
if not changes.get('purge_desired'): changes = changes['installed']
from __future__ import absolute_import import logging
from pylearn2.datasets import cifar10
REQUEST_CONTEXT.request = request
query_features = _task_input.get('features') student_data = get_proctored_exam_results(course_id, query_features) header, rows = format_dictlist(student_data, query_features)
return False
new_auth = object.__new__(cls) new_auth.__singleton_init__(opts, io_loop=io_loop) loop_instance_map[key] = new_auth
return self.rescore_submission_button.is_present()
for prop in 'cpus', 'disk', 'ip_address', 'nameserver', 'password', 'swap', 'poolid', 'storage':
assert_array_equal(X_transformed_sparse.toarray(), X_transformed_dense)
pkginfo = _get_package_info(pkg_name, saltenv=saltenv)
settings.LOCALE_PATHS = (theme_root / 'conf/locale',) + settings.LOCALE_PATHS
transformers = {}
iris = datasets.load_iris() perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
self.assertReturnNonEmptySaltType(ret) for state_id, state_result in six.iteritems(ret): self.assertSaltTrueReturn(dict([(state_id, state_result)]))
return {'name': name, 'changes': {}, 'result': True, 'comment': ''}
name_placeholder = _(u"Jane Doe")
from __future__ import absolute_import
with self.assertRaises(CourseActionStateItemNotFoundError): CourseRerunState.objects.find_first(course_key=destination_course_key)
selector = self.get_element_selector(VIDEO_MENUS["language"] + ' li.is-active') return self.q(css=selector).first.attrs('data-lang-code')[0]
X = csr_matrix(Xdigits[:4])
modal.release_date = '3/12/1972' modal.release_time = '04:01' modal.due_date = '7/21/2014' modal.due_time = '23:39' modal.policy = 'Lab'
remove_users(self.admin, CourseCreatorRole(), self.user) self.assertFalse(user_has_role(self.user, CourseCreatorRole()))
with warnings.catch_warnings(record=True): test_bins = get_bin_seeds(X, 0.01, 1) assert_array_equal(test_bins, X)
return []
group = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, self.user_partition)
last_mean = np.zeros(n_features) last_var = np.zeros_like(last_mean) last_n = 0
return self.list_display
if sp.isspmatrix_csr(X): return bincount(X.indices, minlength=X.shape[1]) else: return np.diff(sp.csc_matrix(X, copy=False).indptr)
G = neighbors.kneighbors_graph(X, n_neighbors, mode='distance').toarray()
if len(student) != 2: if len(student) > 0: build_row_errors('data_format_error', student[user_index], row_num)
_check_caller_authority(caller, role) role.add_users(*users)
password: USE_KEYRING
ret = salt.utils.cloud.bootstrap(vm_, __opts__)
__virtualname__ = 'vmadm'
cv = list(super(StratifiedValidationKFold, self).__iter__()) for train, valid, test in get_k_fold_splits(cv): yield train, valid, test
self.foundCategories = []
scsi_spec.device.sharedBus = vim.vm.device.VirtualSCSIController.Sharing.noSharing
'debug': False
for _id in bulk_write_record.structures.viewkeys() - bulk_write_record.structures_in_db: dirty = True
log = logging.getLogger(__name__)
res_r = int(numpy.floor(last_pool_r/rs)) + 1 res_c = int(numpy.floor(last_pool_c/cs)) + 1
config_course_cohorts(course, is_cohorted=True)
from __future__ import absolute_import import os import tempfile import logging import shutil
if block: time.sleep(0.01) else: yield
with self.assertRaises(ValueError): microsite.get_backend('microsite_configuration.microsite.invalid_method', BaseMicrositeBackend)
for item in global_vars: for name in names: self.assertIn(name, list(item.keys()))
current_fetch_url = None if remote in remotes: current_fetch_url = remotes[remote]['fetch']
cv_score = cv_estimate(3)
subscription['endpoint'] = _endpoint
elif existing['code'] == 404:
self.set_many({kvs_key: value})
my-minion: arg: - 30 fun: test.sleep jid: 20160503150049487736 pid: 9601 ret: tgt: my-minion tgt_type: glob user: root
SplitModuleTest.modulestore = class_(
cluster_centers = _init_centroids( X, self.n_clusters, self.init, random_state=random_state, x_squared_norms=x_squared_norms, init_size=init_size)
import salt.master import integration from salt import auth
groups = [name]
layer_below = self.dbm.hidden_layers[i-1]
return self.q(css='.wrapper-create-course #new-course-org')
self.context['debug'] = self.capa_system.DEBUG
resource['id'] = self.resource_id_second self.check_event_response_by_key('handle_vote', resource, 'newVotes', test_case['new_votes'])
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, call )
self.assertTrue('Activate Course Enrollment' in resp.content)
import base64 import hashlib import hmac import StringIO
with patch_edxnotes_api_settings(None): self.assertRaises(ImproperlyConfigured, get_endpoint_function)
self.intervals = {}
def __iter__(self): return self
if ret: run(name, 'touch \'{0}\''.format(SEED_MARKER), python_shell=False)
self.client.logout()
params = { 'photo_id_image': self.IMAGE_DATA } response = self._submit_photos(expected_status_code=400, **params) self.assertEqual(response.content, "Missing required parameter face_image")
certificate.click_delete_certificate_button() self.certificates_page.click_confirmation_prompt_primary_button()
self._iter_mode = resolve_iterator_class('sequential')
return _xblock_type_and_display_name(find_release_date_source(xblock))
import salt.ext.six as six
log = logging.getLogger(__name__)
angle = np.arctan(u[1] / u[0])
history = HistoricalRecords()
if use_svd: v = svd(Xi, full_matrices=True)[0] else: Ci = np.dot(Xi, Xi.T) v = eigh(Ci)[1][:, ::-1]
mock_create.return_value = None
if rbm == rbm_list[-1]: if targets: assert len(rbm.hidden_layers) == 2 else: assert len(rbm.hidden_layers) == 1 else: assert len(rbm.hidden_layers) == 1
config = VerifiedTrackCohortedCourse.objects.create(course_key=course_key, enabled=True) config.save() self.assertTrue(VerifiedTrackCohortedCourse.is_verified_track_cohort_enabled(course_key))
import pprint import logging import time import hashlib
return ret
self.client.logout() response = self.client.get(url, **{'HTTP_X_EDX_API_KEY': self.API_KEY}) self.assertEqual(response.status_code, status.HTTP_200_OK)
redirect_to = get_next_url_for_login_page(request)
if 'honor' not in course_mode_slugs: cert_status['status'] = CertificateStatuses.auditing return cert_status
import salt.ext.six as six
self.q(css='a[data-section=send_email]').first.click() email_section = BulkEmailPage(self.browser) email_section.wait_for_page() return email_section
certs_api.set_cert_generation_enabled(self.course.id, True)
lowest_passing_grade = DecimalField(max_digits=5, decimal_places=2, null=True)
agc = AgglomerativeClustering(n_clusters=2, connectivity=connectivity) agc.fit(X) n_samples = X.shape[0] n_nodes = agc.children_.shape[0] assert_equal(n_nodes, n_samples - 1)
if lti_key in lti_params and lti_params[lti_key]: details[details_key] = lti_params[lti_key]
acts = self._hidden_input(inputs) hiddens = self.act_enc(acts) act_grad = tensor.grad(hiddens.sum(), acts) return act_grad
for param, value in params.items(): self.assertIn(param, allowed_params) self.assertIn('{}={}'.format(param, value[0]), expected)
return signal_job(jid, salt_SIGKILL)
course_id = CourseKeyField(max_length=255, db_index=True)
for i in range(current_page, 0, -1): _check_page() if current_page > 1: page.click_on_page(current_page - 1) current_page -= 1
from __future__ import absolute_import
self.auto_enroll_section.upload_correct_csv_file() self.assertTrue(self.auto_enroll_section.is_notification_displayed(section_type=self.auto_enroll_section.NOTIFICATION_SUCCESS))
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath ) ensure_in_syspath('../../')
self._npy_counter = 1 if protocol is None: protocol = (pickle.DEFAULT_PROTOCOL if PY3_OR_LATER else pickle.HIGHEST_PROTOCOL)
should_yield_node = filter_func(current_node) if should_yield_node: yield current_node
has_children = True field1 = String(default="something", scope=Scope.user_state) field2 = Integer(scope=Scope.user_state)
return render_message_to_string( self.subject_template, self.message_template, self.get_email_params(), language=language )
add_user_with_status_unrequested(self.admin) self.assertIsNone(get_course_creator_status(self.admin))
child_id_regex = None child_type = None if child_types_ids: child_type = child_types_ids[0][0] child_id_regex = '|'.join([child[1] for child in child_types_ids])
course_wide_entries = discussion_category_map.pop('entries')
updated_deadline = VerificationDeadline.deadline_for_course(self.course.id) self.assertEqual(updated_deadline, new_deadline)
self.assertEqual(self.run_function('xattr.list', [NO_FILE]), 'ERROR: File not found: {0}'.format(NO_FILE))
pip_version = version(pip_bin)
with check_mongo_calls_range(max_finds=max_mongo_calls, min_finds=min_mongo_calls): _course_overview_2 = CourseOverview.get_from_id(course.id)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
ret['Success'] = False ret['Result'] = format(error)
def course_id(course_num): return world.scenario_dict['COURSE'].id.replace(course=course_num)
self.assertEquals(destination_course.wiki_slug, destination_wiki_slug)
__virtualname__ = 'service'
resp = self.client.get_html(get_url('container_handler', self.vert_loc)) self.assertEqual(resp.status_code, 200)
import salt.config import salt.loader
embargo_redirect = embargo_api.redirect_if_blocked( course_key, user=request.user, ip_address=get_ip(request), url=request.path ) if embargo_redirect: return redirect(embargo_redirect)
text = "J'ai mang\xe9 du kangourou ce midi, c'\xe9tait pas tr\xeas bon." text_bytes = text.encode('utf-8')
self.assertIsNone(VerificationDeadline.deadline_for_course(self.course.id))
num_braces = 0
response_properties = ["codeparam", "responseparam", "answer", "openendedparam"]
try: import memcache HAS_LIBS = True except ImportError: HAS_LIBS = False
import salt.ext.six as six
timed_exams = [ timed_exam for timed_exam in _timed_exams if is_item_in_course_tree(timed_exam) ]
import salt.utils.cloud import salt.config as config from salt.exceptions import SaltCloudSystemExit
from salt.pillar import Pillar
from salt.log.setup import ( LOG_LEVELS, SORTED_LEVEL_NAMES, is_console_configured, is_logfile_configured, is_logging_configured, is_temp_logging_configured, setup_temp_logger, setup_console_logger, setup_logfile_logger, set_logger_level, )
if isinstance(self, ClassifierMixin): if self.n_outputs_ == 1: return self.classes_.take(np.argmax(proba, axis=1), axis=0)
module1.set_state_from_lcp() self.assertEqual(module1.lcp.inputs.keys(), module1.input_state.keys())
dest_modulestore = self._get_modulestore_for_courselike(dest_course_id) if source_modulestore == dest_modulestore: return source_modulestore.clone_course(source_course_id, dest_course_id, user_id, fields, **kwargs)
raise ValueError( "%s doesn't support multi-label classification" % ( self.__class__.__name__))
progress = _progress_summary(student, request, course, field_data_cache, scores_client) if progress: return progress.chapters else: return None
raise NotImplementedError()
raise
self._create_video_component() self.edit_component() self.assertTrue(self.video.verify_settings())
from salt.ext.six import string_types import salt.utils import salt.ext.six as six
this_sample = this_layer.sample(state_below=state_below, state_above=state_above, layer_above=layer_above, theano_rng=theano_rng)
return User.objects.none()
if salt_params: for key, value in six.iteritems(params): params_from_salt[key] = value params_to_use = params_from_salt else: params_to_use = params
num_certs = GeneratedCertificate.eligible_certificates.filter(user=self.student).count() self.assertEqual(num_certs, 1)
self._create_course_unit_with_handout('textbook.pdf', save_settings=False) self.assertEqual(self.video.download_handout('application/pdf', is_editor=True), (True, True))
if not settings.FEATURES['AUTH_USE_CERTIFICATES']: return HttpResponseForbidden()
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if settings.FEATURES["USE_CUSTOM_THEME"]: template = "theme-" + template
textvalue = 'correct string' if correct else 'incorrect string' self.problem_page.fill_answer(textvalue)
prepend_root_dirs = [ 'formula_path', 'pillar_path', 'reactor_path', 'spm_cache_dir', 'spm_build_dir' ]
self.fake_payment_page.submit_payment()
continue
__func_alias__ = { 'set_': 'set', 'rm_': 'rm' }
providers[provider_alias][driver]['profiles'] = {}
response = self.client.get_json(LIBRARY_REST_URL) self.assertEqual(response.status_code, 404)
return self.default_answer_map
self.navigate_to_video() self.video.show_closed_captions()
if port is None: port = 443 if protocol is None: protocol = 'https'
from __future__ import absolute_import
with outer_atomic(): if section_module.hide_from_toc or unicode(section_module.location) in gated_content: continue
pil_from_ndarray(ndarray).save(filepath)
_timed_exams = modulestore().get_items( course_key, qualifiers={ 'category': 'sequential', }, settings={ 'is_time_limited': True, } )
catalog_visibility = TextField(null=True) short_description = TextField(null=True) course_video_url = TextField(null=True) effort = TextField(null=True) self_paced = BooleanField(default=False)
attribute = getattr(module, attribute_name) return hasattr(attribute, __BACKUP_ATTRIBUTE_NAME)
self.system.error_tracker(msg) return 'Oops, couldn't load grommet'
modulestore = MockModulestore() modulestore.set_blocks({ block_key: MockXBlock(block_key, children=children, modulestore=modulestore) for block_key, children in enumerate(children_map) }) return modulestore
fake_data_api.add_course(self.COURSE_ID, course_modes=['honor', 'verified', 'audit'])
np.random.seed(42)
assert_array_equal(mb_k_means.predict(X), mb_k_means.labels_)
config = {} for key, value in settings.MICROSITE_CONFIGURATION.iteritems(): config[key] = value return config
url = BASE_URL + "/signup" def is_browser_on_page(self): return self.q(css='body.view-signup').present
os.environ['SALT_CLOUD_CONFIG'] = env_fpath config = sconfig.cloud_config(fpath) self.assertEqual(config['log_file'], fpath)
message_cache_key = ( 'embargo.message_url_path.courseware.{course_key}' ).format(course_key=self.course.id) cache.delete(message_cache_key)
mcc = assert_warns_message(RuntimeWarning, 'invalid value encountered', matthews_corrcoef, y_true, rng.randint(-100, 100) * np.ones(20, dtype=int))
listener_state = 'cmd_|-listener_test_listening_change_state_|-echo "Listening State"_|-mod_watch' self.assertIn(listener_state, state_run)
__salt__['kmod.load']('bonding')
self.assertContains(response, "<li class=\"wrapper-organization\">", 1)
return None
try: from mpl_toolkits.basemap import Basemap basemap = True except ImportError: basemap = False
from django.test import TestCase
import logging
for address in addresses: formatted_addresses.append('{0}, {1}'.format(address.strip(), addresses[address].strip()))
xi_, yi, swi, idx = dataset._random_py() xi = sp.csr_matrix((xi_), shape=(1, X.shape[1]))
X = np.c_[X, E]
from __future__ import absolute_import import logging import re import pprint import time
self.assertEqual(self.store.has_published_version(item), publish_state)
try: import SoftLayer HAS_SLLIBS = True except ImportError: HAS_SLLIBS = False
endorsement = obj.get("endorsement") if endorsement: return self._get_user_label(int(endorsement["user_id"])) else: return None
import integration from salt.config import minion_config
run_check_cmd_kwargs = {'runas': user, 'python_shell': True} if 'shell' in __grains__: run_check_cmd_kwargs['shell'] = __grains__['shell']
X0 = np.array([[10000, 9999, 9998], [1, 1, 1]]) y = [0, 1]
fake_data_api.add_course(self.COURSE_ID, course_modes=['professional']) api.add_enrollment(self.USERNAME, self.COURSE_ID, mode='verified')
with remove_ccx(course_id) as (course_id, restore): return restore(self._modulestore.has_course( course_id, ignore_case=ignore_case, **kwargs ))
self.q(css='.new-library-button').first.click() self.wait_for_ajax()
exc_info_on_loglevel=logging.DEBUG
BASE_URL = os.environ.get('test_url', 'http://localhost:8003')
log = logging.getLogger(__name__)
vm_['instance_id'] = data.id
new_url = _urlparse(url) if not new_url.path:
self.navigate_to_video()
preprocessor = ZCA(filter_bias=0.0, n_components=3) preprocessed_X = self.get_preprocessed_data(preprocessor)
return tenant_id
from __future__ import absolute_import, print_function import os import logging
TEST_DIR = REPO_ROOT / ".testids"
IPFilter.objects.create( blacklist=", ".join(blacklist), whitelist=", ".join(whitelist), enabled=is_enabled )
request = Request(self.request_factory.get('/')) request.user = requesting_user with check_mongo_calls(0): return list_courses(request, specified_user.username, org=org, filter_=filter_)
local_addr = ''.join(x for x in local_addr if x not in '[]')
return check_sum_of_calls(object_with_method, [method_name], maximum_calls, minimum_calls)
clf = MultinomialNB().fit(X_train, y_train, sample_weight=sw_train) prob_pos_clf = clf.predict_proba(X_test)[:, 1]
n_samples_per_label = np.bincount(labels)
#html_use_opensearch = ''
log.info( 'Failed to get mtime on {0}, ' 'dangling symlink ?'.format(file_path)) continue
K = check_array(K, dtype=FLOAT_DTYPES) n_samples = K.shape[0] self.K_fit_rows_ = np.sum(K, axis=0) / n_samples self.K_fit_all_ = self.K_fit_rows_.sum() / n_samples return self
__func_alias__ = { 'list_': 'list' }
if not alias.strip(): line_to_add = ''
tasks = instructor_task.api.get_instructor_task_history(course_id, module_state_key, student)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( patch, DEFAULT, create_autospec, NO_MOCK, NO_MOCK_REASON ) ensure_in_syspath('../../')
num_bytes = count * numpy.dtype(num_type).itemsize string = file_handle.read(num_bytes) return numpy.fromstring(string, dtype=num_type)
y_true, _, probas_pred = make_prediction(binary=True) fpr, tpr, thresholds = roc_curve(y_true, probas_pred)
'ioflo_verbose': int,
MASQUERADE_SETTINGS_KEY = 'masquerade_settings'
page_size = TOPICS_PER_PAGE
return getattr(self.cost, attr)
default = self.defaults.get(option.dest) value = getattr(self.options, option.dest, default) if value != default: continue
self.assertEqual(module.attempts, 1)
return '{name}_{size}.{file_extension}'.format(name=name, size=size, file_extension=file_extension)
if not permissions.can_access_self_blocks(requesting_user, course_key): raise PermissionDenied( "Course blocks for '{requesting_username}' cannot be accessed." .format(requesting_username=requesting_user.username) ) return requesting_user
actual_url = staticfiles_storage.url(path_overrides[module])
hosts = [] for name in h: name = name.strip() if len(name) > 0: hosts.append(name)
self._pydsl_all_decls = {}
self.check_toggle_tab_visiblity('wiki', True) self.check_toggle_tab_visiblity('wiki', False)
return not any(self._value_matches(target, test_val) for test_val in criteria['$nin'])
from salt.modules.tomcat import _extract_war_version
Ensure myasg is deleted: boto_asg.absent: - name: myasg - force: True
self.win_installer = self.update_session.CreateUpdateInstaller() self.win_installer.Updates = self.install_collection
self._update_head(dest_course_key, index_entry, dest_course_key.branch, new_structure['_id'])
if not isinstance(config, dict): return False, ('Configuration for wtmp beacon must be a dictionary.') return True, 'Valid beacon configuration'
assert_raises(NotImplementedError, conv_model.cost, Y, Y_hat) assert_raises(NotImplementedError, mlp_model.cost, Y1, Y1_hat)
ScopeIds(None, block_type, location, location), dbmodel, for_parent=kwargs.get('for_parent'),
_, setting = self._get_setting_entry(field_name) return self._verify_setting_entry(setting, field_name, field_value)
import salt.utils.virt
incorrect = y_predict != y
for saltenv in SALTENVS: saltenv_root = os.path.join(FS_ROOT, saltenv) _new_dir(saltenv_root)
import logging log = logging.getLogger(__file__)
self.assertIsNone(xblock_info.get('is_header_visible', None))
from salt.modules import service import os
input_dict = {'1_2_1': '-999', '1_2_2': '2', '1_2_3': '3'} correct_map = problem.grade_answers(input_dict)
X_trans = maxabs_scale(X) assert_array_almost_equal(X_trans, X_expected)
from __future__ import absolute_import import time
disturb_mem.disturb_mem() rng = np.random.RandomState([2012, 11, 27, 8])
if nrepl > 0: found = True has_changes = True if pattern != repl else has_changes
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import salt.utils
if server_tmp is None: continue
return self.best_estimator_.predict_proba(X)
log = logging.getLogger(__name__)
return self.best_estimator_.decision_function(X)
import integration from salt.config import cloud_providers_config from salt.ext.six.moves import range
self.assertTrue(self._has_changes(published_xblock.location))
y = np.zeros((10, 2))
self.assertIn(draft_video.location, public_vertical.children)
self.n_layers_ = len(layer_units)
ret += '{0}\n'.format(pprint.pformat(data))
with storebuilder.build() as (__, store): course = CourseFactory.create(modulestore=store)
mock_val_api.ValVideoNotFoundError = _MockValVideoNotFoundError mock_val_api.export_to_xml = Mock(side_effect=mock_val_api.ValVideoNotFoundError) self.descriptor.edx_video_id = 'test_edx_video_id'
self.q(css='.label-username').first.click()
_, _, relative_path, params, query_string, fragment = urlparse(path)
for i in range(current_page, total_pages): _check_page() if current_page < total_pages: page.click_on_page(current_page + 1) current_page += 1
url = path
#pylint: disable=E0602
assert_raises(ValueError, gs.fit, X, y)
from django.core import management
self.label_distributions_ = np.multiply( clamp_weights, self.label_distributions_) + y_static remaining_iter -= 1
super(TestTrackerInstantiation, self).setUp() self.get_backend = tracker._instantiate_backend_from_name
self._asides.append(aside)
if len(set(current_domains).intersection(bypass_domains)) != len(bypass_domains): changes_needed = True
iris = datasets.load_iris()
return self.q(css='.choose-file-button').present
self.assertTrue(CourseEnrollment.is_enrolled(self.user, course_key)) return test_course_data
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
return remote_id
for _ in xrange(len(self.aes) + walkback): steps.append(self._update(self.activations, clamped=clamped))
Z = Z.reshape(xx.shape) plt.figure() plt.pcolormesh(xx, yy, Z, cmap=cmap_light)
X = check_array(X, accept_sparse=('csr', 'csc'), copy=False, ensure_2d=False, dtype=FLOAT_DTYPES) original_ndim = X.ndim
from __future__ import absolute_import import os import random
resource_map = API_SETTINGS.get('RESOURCE_MAP', {}) resource_name = kwargs.pop('resource') resource_method = request.method resource = resource_map.get(resource_name)
import fnmatch import logging import time
self.set_header('Access-Control-Expose-Headers', 'X-Auth-Token')
return dict(kernels=self.kernels)
if desc: system_info['comment'] = desc.decode('utf-8') else: return False
labels = (label == 'root' and node_id == 0) or label == 'all'
import integration import salt.utils
import copy import logging import time
data = rng.binomial(1, 0.5, size=np.size(indices)) * 2 - 1
ecommerce_url_root = helpers.get_value('ECOMMERCE_PUBLIC_URL_ROOT', settings.ECOMMERCE_PUBLIC_URL_ROOT) return urljoin(ecommerce_url_root, self.config.single_course_checkout_page)
min_soft = MAX_OPEN_FILES[limits]['soft_limit'] min_hard = MAX_OPEN_FILES[limits]['hard_limit']
action_name = ugettext_noop('deleted') update_fcn = partial(delete_problem_module_state, xmodule_instance_args) visit_fcn = partial(perform_module_state_update, update_fcn, None) return run_main_task(entry_id, visit_fcn, action_name)
salt '*' vsphere.ntp_configure my.esxi.host root bad-password '[192.174.1.100, 192.174.1.200]'
problem = self.store.get_item(problem_location) problem.display_name = problem_new_name self.store.update_item(problem, self.user_id)
'idset': idset,
return all([ self.child_test_passed('.child-counts-match'), self.child_test_passed('.child-values-match') ])
AutoAuthPage( self.browser, username="testprogress", email="progress@example.com", password="testuser", course_id=self.course_id ).visit()
from contextlib import contextmanager import logging import sqlite3
if exc.errno != errno.EINTR: raise break
ls = salt.utils.alias_function(list_tab, 'ls')
course_location_one = locator.CourseLocator('Org1', 'Course1', 'Run1') new_course_one = self._create_course(course_location_one)
import salt.utils
request = mock.Mock() with self.assertRaises(Throttled): self.view.check_throttles(request)
ret['changes']['summary'] = _summary(result['stdout']) ret['result'] = True if not __opts__['test'] else None
self.service.set_credit_requirement_status( self.user.id, no_credit_course.id, 'grade', 'grade' )
mb_k_means = MiniBatchKMeans(init="random", n_clusters=n_clusters, random_state=42, n_init=10).fit(X) _check_fitted_model(mb_k_means)
self.recursive_build(source_courselike, courselike, courselike_key, dest_id)
if not _check_cygwin_installed(cyg_arch): LOG.debug('Cygwin ({0}) not installed,\ could not update'.format(cyg_arch)) return False
X_train_fit, y_train_fit = slow_model._build_y(X_train, y_train, sample_weight=weights, trim_duplicates=False) slow_model._build_f(X_train_fit, y_train_fit)
HAS_FCNTL = False
self.survey.save_user_answers(self.student, self.student_answers, None) self.assertFalse(must_answer_survey(self.course, self.student))
ip_same1 = ip_same2 = ipaddress.IPv4Network('1.1.1.1/32') self.assertEqual(list(ipaddress.collapse_addresses( [ip_same1, ip_same2])), [ip_same1])
raise NotImplementedError
user_exam_summary = get_attempt_status_summary( usage_info.user.id, unicode(block_key.course_key), unicode(block_key), ) return user_exam_summary and user_exam_summary['status'] != ProctoredExamStudentAttemptStatus.declined
return
'ENTRANCE_EXAMS': False,
elif isinstance(get_mixed_stores(module_store_setting), dict): warnings.warn( "Using a dict for the Stores option in the MixedModuleStore is deprecated. Please use a list instead.", DeprecationWarning )
cache_key = self._cache_key_for_kvs_key(kvs_key) field_object = self._cache.get(cache_key) if field_object is None: raise KeyError(kvs_key.field_name) field_object.delete() del self._cache[cache_key]
import salt.utils import socket
structure_entry = self._lookup_course(structure_id, head_validation=head_validation) root = structure_entry.structure['root'] result = self._load_items(structure_entry, [root], depth, **kwargs) return result[0]
termination_criterion = EpochCounter(5)
if virtual_ret is not True: self.missing_modules[module_name] = virtual_err self.missing_modules[name] = virtual_err return False
if wildcard: return '*' else: return unicode(badge_class.course_id)
from salt.ext.six.moves import shlex_quote as _cmd_quote
__context__['systemd.journald'].seek_tail() __context__['systemd.journald'].get_previous() return __context__['systemd.journald']
X = np.array([[1, 2, 0], [0, 0, 0]], dtype=np.uint8)
GlobalStaff().add_users(self.user) self.client.login(username=self.user.username, password='foo')
self.refresh_course() return section
for resource, xblock_name in itertools.product(self.test_recommendations.values(), self.XBLOCK_NAMES): self.call_event('add_resource', resource, xblock_name)
layer_trainers[-1].main_loop()
ldap3 = inspect.getmodule(connect)
if role is not None: role().add_users(user)
dense_classifier = dense_results = AdaBoostRegressor( base_estimator=CustomSVR(), random_state=1 ).fit(X_train, y_train)
mb_k_means = MiniBatchKMeans(n_clusters=20, batch_size=201, random_state=42, init="random") mb_k_means.fit(zeroed_X) assert_greater(mb_k_means.cluster_centers_.any(axis=1).sum(), 10)
for pattern in self.ALLOW_URL_PATTERNS: if pattern.match(request.path) is not None: return None
ret['changes'] = {'feature': __salt__['win_servermanager.install'](name, recurse, restart)}
return self.descriptor.is_configured
salt_path = os.path.abspath(os.path.join(__file__, os.path.pardir)) return {'saltpath': os.path.dirname(salt_path)}
from __future__ import absolute_import
if emsg: raise e
resp = self.create_xblock(parent_usage_key=self.seq_usage_key, category='problem', boilerplate='multiplechoice.yaml') self.problem_usage_key = self.response_usage_key(resp)
import salt.payload import salt.utils import salt.utils.files import salt.utils.jid import salt.exceptions
import time import os import multiprocessing import logging from salt.ext.six.moves import range
if seconds < 0: continue
X, y = datasets.samples_generator.make_s_curve(n_samples, random_state=0)
with check_number_of_calls(object_with_method, method_name, num_calls, num_calls): yield
xblock_class = XBlock.load_class(block_type, select=settings.XBLOCK_SELECT_FUNCTION) content = xblock_class.open_local_resource(uri)
from urllib.request import urlopen PY2 = False
return None, None
ave = kl(Y, Y_hat, 1)
salt '*' win_wua.list_updates summary=True
dev['hash'] = all_devices['hash'] log.info('Found device %s in Zenoss', device) return dev
mac_desktop.__salt__ = {}
LibraryExportManager(modulestore, contentstore, library_key, root_dir, library_dir).export()
self.bookmarks_page.click_bookmarks_button() self.assertTrue(self.bookmarks_page.results_present()) self.assertEqual(self.bookmarks_page.results_header_text(), 'My Bookmarks')
scores = cross_val_score(GaussianNB(), X, y, cv=10) assert_greater(scores.mean(), 0.77)
instructor = self.make_instructor() self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
rng = np.random.RandomState(0) rand_data = RandomData(rng) n_samples = 500 n_features = rand_data.n_features n_components = rand_data.n_components
import salt.ext.six as six
self._coef_indptr = [] self._intercept_indptr = [] start = 0
X1 *= np.sqrt(p)
grains['virtual_subtype'] = 'Xen Dom0'
self.certificates_section.wait_for_certificate_exceptions_section()
SplitMongoKVSid = namedtuple('SplitMongoKVSid', 'id, def_id') new_contract('BlockUsageLocator', BlockUsageLocator)
self._update_cutoff()
import time import logging
return Fraction(treedic['1 factors'][0] / treedic['2 factors'][0])
log.exception(u"Error occurred while caching course enrollment details for course %s", course_id) raise errors.CourseEnrollmentError(u"An unexpected error occurred while retrieving course enrollment details.")
pickled_estimator = pickle.dumps(estimator) unpickled_estimator = pickle.loads(pickled_estimator)
if pkey == key: continue
self.subscriber.read_async(event_handler)
for key, val in six.iteritems(self.loader._dict): self.assertEqual(key.split('.', 1)[0], 'test')
_options.update( _fetch_profile_opts( cfg, virtualname, __salt__, _options, profile_attr, profile_attrs ) )
certs_list = self.run_function('keychain.list_certs') self.assertIn(CERT_ALIAS, certs_list)
from __future__ import absolute_import
self.assertEqual(CourseMode.can_auto_enroll(self.course_key), can_auto_enroll)
result = get_email_params(self.course, False)
partitions = self._get_partition_info() self.assertEqual(len(partitions), 1) self.assertEqual(partitions[0]["scheme"], "verification")
pca = TruncatedSVD(n_components=2) X_reduced = pca.fit_transform(X_transformed)
return six.next(six.iterkeys(obj))
import integration
raise NotImplementedError(str(type(self)) + " does not implement continue_learning.")
return [('127.0.0.1:11211 (1)', {})]
self.conn.put_method.return_value = method_ret self.conn.put_integration.return_value = method_integration_ret self.conn.put_method_response.side_effect = ClientError(error_content, 'put_method_response')
self.q(css=subsection_css).first.click() self._on_section_promise(section_title, subsection_title).fulfill()
return _has_instructor_access_to_location(user, descriptor.location, course_key)
Z = np.ones((data.Ny, data.Nx), dtype=np.float64)
from salt.modules import at
'contentserver',
return np.mean( [estimator.log_marginal_likelihood( theta[n_dims * i:n_dims * (i + 1)]) for i, estimator in enumerate(estimators)])
os.remove(hashdir) os.makedirs(hashdir)
return saved_ifcfg.split('\n')
mako_middleware_process_request(request)
team.add_user(self.user)
filtered_list = list(cls.FILTERED_LIST)
b = np.zeros((self.dim * 3,))
call_command('manage_group', TEST_GROUP, '--permissions', 'auth:Group:add_group') self.check_groups([TEST_GROUP]) self.check_permissions(TEST_GROUP, ['add_group'])
kwargs['program'] = self.script
x = X.mean(axis=0) d = clf.decision_function([x])
from __future__ import absolute_import import sys import os.path
while f1 != f2: f1=f2 (f2,ext)=os.path.splitext(f1)
elif request.method == 'DELETE': return delete_entrance_exam(request, course_key)
neigh_ind = neigh_ind[ sample_range, np.argsort(dist[sample_range, neigh_ind])]
youtube_video_id = microsite.get_value('homepage_promo_video_youtube_id', "your-youtube-id") context['homepage_promo_video_youtube_id'] = youtube_video_id
xblocks = (blocks[ref] for ref in refs) return set([xblock.location for xblock in xblocks])
self.factory().fit(X5, Y5, intercept_init=0)
course_masquerade = get_course_masquerade(user, course_key) return course_masquerade.role if course_masquerade else None
clf = svm.SVC(kernel='precomputed') assert_raises(ValueError, clf.fit, X, Y)
set_crontab(
mock_ip.return_value = 'IR'
cmd = 'cmd /c {0}'.format(cmd)
self.assertEqual(self.team_page.team_name, self.team['name']) self.assertTrue(self.team_page.edit_team_button_present)
y_noisy = y + 0.05 * np.random.randn(len(y))
small_width = models.IntegerField(default=375) small_height = models.IntegerField(default=200)
greek.append('hbar')
self.assertFalse(all_gradesets[student3]) self.assertFalse(all_gradesets[student4])
if 'root' not in repo_conf: repo_conf['root'] = ''
return obj.user.email
errstring = "Invalid course_id" with self.assertRaisesRegexp(CommandError, errstring): call_command('export_olx', 'x/y/z')
course_mode = CourseMode.DEFAULT_SHOPPINGCART_MODE
'ENABLE_MOBILE_REST_API': False,
empty = ParameterGrid({}) assert_equal(len(empty), 1) assert_equal(list(empty), [{}]) assert_grid_iter_equals_getitem(empty) assert_raises(IndexError, lambda: empty[1])
if len(found.intersection(minions)) >= len(minions): raise StopIteration()
selector = self.get_element_selector(VIDEO_BUTTONS[button_id]) return self.q(css=selector).visible
n_samples = len(y) n_classes = float(len(np.unique(y)))
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
score_bucket = "incorrect" if grade > 0 and grade < max_grade: score_bucket = "partial" elif grade == max_grade: score_bucket = "correct" return score_bucket
return super(SplitMongoKVS, self).default(key)
raise SaltCloudSystemExit( 'The request_instance action must be called with -a or --action.' )
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES from salt.exceptions import CommandExecutionError
for blob in result: file_name = os.path.join(base_dir, blob)
return any(role.has_permission(permission) for role in user.roles.filter(course_id=course_id))
for vdev in vdevs: if not os.path.isfile(vdev): ret[vdev] = 'failed' else: if vdev not in ret: ret[vdev] = 'created' return ret
with salt.utils.fopen(path, 'r') as fp_: return fp_.read()
assert_equal( self.components_.shape, (self.n_components_, n_features), err_msg=('An error has occurred the self.components_ matrix has ' ' not the proper shape.'))
currency = models.CharField(default="usd", max_length=8)
ntp_config = vim.HostNtpConfig(server=ntp_servers)
from salt.exceptions import SaltInvocationError import salt.utils.http
self.assertEqual(course.display_name, u"Φυσικά το όνομα Unicode")
from salt.modules import nftables import salt.utils from salt.exceptions import CommandExecutionError
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
for path in [DATA_HOME, LOAD_FILES_ROOT]: _remove_dir(path)
for prop in vmconfig['state']: if prop in vmconfig_type['instance'] or \ prop in vmconfig_type['collection'] or \ prop in vmconfig_type['create_only']: continue
if remove: __salt__['file.remove'](info(name)['home'])
'renderer': str,
self.conn.put_method.side_effect = ClientError(error_content, 'put_method')
del installed_packages_list[package.name]
return self.model.current()
return self.load_item(usage_id, for_parent=for_parent)
self.assert_can_access(self.beta_user, self.alpha_module.discussion_id, thread_id, False)
return self._is_element_visible("#wmd-input-comment-body-{}".format(response_id))
self.assertTrue(BulkEmailFlag.feature_enabled(course_id))
self.assertEqual(response.status_code, 200) self.assertEqual(len(mail.outbox), 1)
return _check_range_and_return('instance', label, -1, 9, -1)
from __future__ import absolute_import from salt.exceptions import CommandExecutionError, CommandNotFoundError
continue
from __future__ import unicode_literals
t_start = datetime.now() sampling(n_population, n_samples) delta = (datetime.now() - t_start) time = compute_time(t_start, delta) return time
cmd = __salt__['cmd.run_all']('racadm {0} {1}'.format(command, modswitch))
old_tab_list = course_item.tabs
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
shutil.copyfile(path_in, path_test)
return (isinstance(batch, np.ndarray) or scipy.sparse.issparse(batch) or str(type(batch)) == "<type 'CudaNdarray'>")
'rest_timeout': int,
mask = np.ones((size, size), dtype=np.int16) A = grid_to_graph(n_x=size, n_y=size, n_z=size, mask=mask) assert_true(connected_components(A)[0] == 1)
return False
self._count += 1 self._apply_learning_rate(algorithm)
from scipy import misc face = misc.face(gray=True)
for student in students[2:5]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.error, mode='honor', grade=default_grade )
dir_suffix = "-py3"
return event['event_type'].startswith('edx.course.enrollment.')
pass
(False, True), (False, False),
course_enrollments.sort(key=lambda x: x.created, reverse=True)
from salttesting.unit import TestCase from salttesting.helpers import ensure_in_syspath
self.dashboard_page.upgrade_enrollment(self.course_info["display_name"], self.upgrade_page)
return self.q(css='input[name=export-ora2-data]')
node.visible_to_staff_only = True self.mstore.update_item(node, self.coach.id)
image_id = inspect_image(name)['Id']
elif result is _empty and isinstance(state_result, dict) and ret: ret = check_state_result(state_result, recurse=True)
from __future__ import absolute_import import json import yaml import os
key = safe_key('key', 'a' * 300, 'version') self.assertTrue(self._is_valid_key(key))
assert x.ndim == 4 axes = self._input_space.axes assert len(axes) == 4
return EmptyPromise( lambda: self._is_on_tab(tab_name), "{0} is the current tab".format(tab_name) )
if n_components == X.shape[1]: assert_array_almost_equal(X, X2)
'learner_dashboard',
import os import re import plistlib from distutils.version import LooseVersion
X = np.cast['float32'](X) X = X.reshape(-1, 2 * 96 * 96)
yaml_parse = None control = None cuda = None
config_course_cohorts( course, is_cohorted=True, discussion_topics=["General", "Feedback"], cohorted_discussions=["Feedback"] )
from __future__ import absolute_import
self._fit_transform(X) return self.embedding_
if _TRAFFICLINE: cmd = _traffic_line('-S') else: cmd = _traffic_ctl('server', 'stop')
self.assertNotIn('Search for a course', response.content)
from __future__ import absolute_import import os
if photo_verifications: return photo_verifications[0].expiration_datetime.strftime(date_format)
username = "test_{uuid}".format(uuid=self.unique_id[0:6]) auto_auth_page = AutoAuthPage(self.browser, username=username).visit() user_id = auto_auth_page.get_user_id() return username, user_id
pass
super(CoursePage, self).__init__(browser) self.course_id = course_id
prob /= prob.sum(axis=1).reshape((prob.shape[0], -1)) return prob
if metric == 'precomputed' and sparse.issparse(X): neighborhoods = np.empty(X.shape[0], dtype=object)
authentication_classes = (OAuth2Authentication, SessionAuthentication,) permission_classes = (IsAuthenticated,) serializer_class = CourseSerializer pagination_class = None def get_queryset(self): return list(Course.iterator())
if dep in inspected: continue inspected.append(dep)
absent_state = 'cmd_|-listener_test_listening_non_changing_state_|-echo "Only run once"_|-mod_watch' self.assertNotIn(absent_state, state_run)
y = iris.target
self._check_staff(self.course) self._check_staff(self.test_course)
html = module.render(STUDENT_VIEW).content
mean = np.zeros(2)
import salt.ext.six as six import salt.utils.dictupdate as dictupdate
from salt.states import boto_ec2
from __future__ import absolute_import import logging
_ = lambda text: text
self.assertIn('Welcome to edX.', self.video.captions_text)
assert all(called)
transduction = self.classes_[np.argmax(self.label_distributions_, axis=1)] self.transduction_ = transduction.ravel() self.n_iter_ = self.max_iter - remaining_iter return self
_max_parts = self._HEXTET_COUNT + 1 if len(parts) > _max_parts: msg = "At most %d colons permitted in %r" % (_max_parts-1, ip_str) raise AddressValueError(msg)
default_encoded_video = {}
answer_objs = SurveyAnswer.objects.filter( user=self.user, form=self.survey )
store = self._verify_modulestore_support(dest_key.course_key, 'copy_from_template') return store.copy_from_template(source_keys, dest_key, user_id)
inlier_idxs_subset = sample_idxs[inlier_mask_subset] X_inlier_subset = X[inlier_idxs_subset] y_inlier_subset = y[inlier_idxs_subset]
def get(key, default=None): return connection_args.get('connection_' + key, __salt__['config.get'](prefix + key, default))
import salt.fileserver as fs import salt.modules import salt.utils import salt.utils.s3 as s3
return {"username": settings.SAUCE.get('USERNAME'), "access-key": settings.SAUCE.get('ACCESS_ID')}
return ", ".join(DOC_PATHS.keys())
alpha = float(alpha) random_state = check_random_state(random_state)
EmptyPromise( lambda: indicator == self.indicator_for_field(field_id), "Indicator \"{0}\" is visible.".format(self.indicator_for_field(field_id)) ).fulfill()
from salt.states import win_update
return wrapper
test_configuration = [ { "urlname": "two_done_block_test_case_0", #"olx": self.olx_scenarios[0],
if cache: __salt__['file.remove'](tfile)
try: import psycopg2 import psycopg2.extras HAS_PG = True except ImportError: HAS_PG = False
config = old_to_new(config)
log.warning("Asset's course {} does not match other assets for course {} - not saved.".format( asset_md.asset_id.course_key, course_key )) continue
arn = ret['get_user_response']['get_user_result']['user']['arn']
opts['open_mode'] = opts['open_mode'] is True opts['auto_accept'] = opts['auto_accept'] is True opts['file_roots'] = _validate_file_roots(opts)
COURSE_REGEX = re.compile(r'^(.*?/courses/)(?!v[0-9]+/[^/]+){}'.format(settings.COURSE_ID_PATTERN))
self.verify_success_on_file_content( 'username,email,cohort\rfoo_username,bar_email,baz_cohort', mock_store_upload, mock_cohort_task )
CourseEnrollmentFactory.create(user=self.user, course_id=self.course.id) self.client.login(username=self.user.username, password=self.test_password)
train_with_monitoring_datasets( train_dataset=dataset1, monitoring_datasets=no_monitoring_datasets, model_force_batch_size=False, train_iteration_mode='sequential', monitor_iteration_mode='sequential')
np.random.seed(12345)
object_results = map(ordered_objects, search_queryset_pks) paged_results.object_list = object_results
path = microsite_tags.microsite_template_path('footer.html') self.assertEqual("footer.html", path)
remove_master_course_staff_from_ccx(self.course, self.ccx_locator, self.ccx.display_name) self.assertEqual(len(outbox), len(list_staff_master_course) + len(list_instructor_master_course))
self.course = modulestore().get_course(self.course.id)
if 'tag' in _options: syslog.openlog(ident=_options['tag'], logoption=logoption) else: syslog.openlog(logoption=logoption)
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
from __future__ import absolute_import import logging
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
return redirect(reverse('about_course', args=[unicode(course_key)]))
return InheritingFieldData( inheritable_names=InheritanceMixin.fields.keys(), kvs=kvs, )
html_module_location = course_key.make_usage_key('html', 'nonportable_link') html_module = self.store.get_item(html_module_location) self.assertIn('/jump_to_id/nonportable_link', html_module.data)
asset_url = '' try: template_asset = CertificateTemplateAsset.objects.get(asset_slug=asset_slug) asset_url = template_asset.asset.url except CertificateTemplateAsset.DoesNotExist: pass return asset_url
self._set_opt_in_pref(self.user, "org_alias", False)
WebDriverWait(browser, 6).until(EC.alert_is_present()) return browser.switch_to.alert
self.assertTrue(chemical_equations_equal('H2 + O2 -> H2O2', 'O2 + H2 -> H2O2', exact=True))
if expected is not actual: raise AssertionError("values not identical, expected %r, actual %r" % (expected, actual))
_win(kernel32.DuplicateHandle, wintypes.BOOL,
'pillar_source_merging_strategy': str,
i = np.argsort(dist2, axis=1) row_ind = np.arange(n_rows)[:, None] dist2 = dist2[row_ind, i] ind2 = ind2[row_ind, i]
ret = salt.modules.vsphere.system_info(host=host, username=user, password=password)
return [ destination_course.make_usage_key(*k) for k in dest_structure['blocks'][block_key].fields['children'] ]
problem.display_name = "updated before calling revert" self.store.update_item(problem, self.user_id) self.store.revert_to_published(self.vertical_x1a, self.user_id)
return self.q(css=".field-exam-review-rules").visible
if auth_entry and auth_entry in pipeline.AUTH_DISPATCH_URLS: redirect_uri = pipeline.AUTH_DISPATCH_URLS[auth_entry]
task_folder = task_service.GetFolder(location) task_folder.CreateFolder(name)
with patch('capa.responsetypes.LoncapaResponse.evaluate_answers') as mock_evaluate_answers: mock_evaluate_answers.return_value = CorrectMap(CapaFactory.answer_key(), 'incorrect') result = module.rescore_problem()
return JsonError(["username parameter is required"])
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self._submit_photos(expected_status_code=400) self._assert_confirmation_email(False)
from __future__ import absolute_import import os
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
return get_members(mailchimp, list_id, 'subscribed')
params = self._signed_callback_params(self.order.id, self.COST, self.COST, signature="invalid!") result = process_postpay_callback(params)
return self.q(css=self._bounded_selector('.add-admin-role')).present
microsite_courses = get_courses(user, org=alternate) self.assertTrue( all(course.org == alternate_course.org for course in microsite_courses) )
if self.store_precision: precision = self.precision_ else: precision = pinvh(self.covariance_) return precision
return self.enabled and self.enable_learner_issuance
BODY_SELECTOR = "#recent-panel" TAB_SELECTOR = ".tab#view-recent-activity"
return sorted(set(estimators), key=itemgetter(0))
assert has_expected
__virtualname__ = 'memcache'
homework_grader = graders.AssignmentFormatGrader("Homework", 12, 2) homework_grader2 = graders.grader_from_conf(homework_grader)
if do_assemble: __salt__['raid.assemble'](name, devices, **kwargs) else: __salt__['raid.create'](name, level, devices, **kwargs)
action_name = ugettext_noop('rescored') update_fcn = partial(rescore_problem_module_state, xmodule_instance_args)
__virtualname__ = 'user'
action_name = ugettext_noop('generating_enrollment_report') task_fn = partial(upload_enrollment_report, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
age = 5*24*60*60
vbox_guest.__salt__ = {} vbox_guest.__opts__ = {}
return (loads, (dumps(np.asarray(a), protocol=HIGHEST_PROTOCOL),))
'html5_sources': ['http://www.example.com/source.mp4'], 'data': ''
import logging
url = BASE_URL + "/logout" def is_browser_on_page(self): return self.q(css='.btn-login').present
if not name and not pkgs: return 'Must pass a single package or a list of packages'
items = store.get_items(course_key)
self.check_groups(group_permissions.keys()) for group_name, permission_codenames in group_permissions.items(): self.check_permissions(group_name, permission_codenames)
name = self.cleaned_data.get("name").strip() or None
self.navigate_to_video()
for (name, TreeEstimator), dtype in product(ALL_TREES.items(), [np.float64, np.float32]): est = TreeEstimator(random_state=0)
response = self.client.get(reverse('branding.views.courses')) self.assertEqual(response.status_code, 200)
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
if get_team(commentable_id) is not None: params['context'] = ThreadContext.STANDALONE else: params['context'] = ThreadContext.COURSE
for layer, state in safe_izip(dbm.hidden_layers, H_hat): upward_state = layer.upward_state(state) layer.get_output_space().validate(upward_state)
continue
self.reset_password_page.visit()
queried_children = to_process_dict.values()
import salt.utils.boto3 import salt.utils.compat import salt.utils
n_rows = 1 n_cols = np.ceil(n_plots*1./n_rows) n_cols = int(n_cols) half_perimeter = n_cols + 1
uninstall_python(python, runas=runas) return False
X = np.zeros((5, 5)) assert_array_equal(clf.predict(X), np.zeros(5))
SUBSCRIBE_BATCH_SIZE = 1000
if s3_meta: bucket_files[bucket] = __get_pillar_files_from_s3_meta(s3_meta)
return self._field_data
self.assertTrue('Activate Course Enrollment' in response.content)
api_path = getattr(settings, "ENROLLMENT_DATA_API", DEFAULT_DATA_API)
responder.update_score(score_msg, cmap, queuekey)
ret['result'] = False ret['comment'] = "Can't determine AllocationId for address {0}.".format(ip) return ret
return super(NullBackend, self).get_template_path(relative_path, **kwargs)
client = get_file_client(__opts__)
from salttesting.helpers import ensure_in_syspath, requires_salt_modules
git_import.add_repo(self.TEST_REPO, repo_dir / 'edx4edx_lite', self.TEST_BRANCH) def_ms = modulestore() self.assertIsNotNone(def_ms.get_course(self.TEST_BRANCH_COURSE))
import logging import os.path import re import tempfile
payment_info = json.loads(response.content) self.assertEqual(payment_info["payment_url"], "/shoppingcart/payment_fake")
from __future__ import absolute_import
if result['retcode'] in (0, 2): __context__[k] = ret = not result['retcode']
# dbar = dbarn epln = eplnn dlta = cs * dbar + sn * alpha gbar = sn * dbar - cs * alpha
train, test = set(train), set(test)
prev_coef = coef prev_alpha[0] = alpha[0] coef = np.zeros_like(coef)
self.assertEqual(certificate_exception['user_email'], self.user.email) self.assertEqual(certificate_exception['user_name'], self.user.username)
from salt.serializers.yamlex import deserialize
raise GitLockError( exc.errno, 'Checkout lock exists for {0} remote \'{1}\'' .format(self.role, self.id) )
ret['changes'] = exc.info.get('changes', {}) ret['comment'] = exc.strerror_without_changes
xblock.group_access = {partition_id: group_ids} self.store.update_item(xblock, self.user.id)
import warnings import numbers import numpy as np from scipy import linalg from scipy.stats import chi2
log = logging.getLogger(__name__)
try: access_group = Group.objects.get(name=settings.PAYMENT_REPORT_GENERATOR_GROUP) except Group.DoesNotExist: return False return access_group in user.groups.all()
if not isinstance(answers, (list, tuple)): answers = [answers]
print("Estimated betas") print(np.round(pls1.coef_, 1))
resp = self.client.get_html(get_url('course_handler', course_key, 'course_key_string')) return resp
services = sorted(set(services))
kernel_id = 138
"decision": decision,
clf = MultinomialNB() assert_raises(ValueError, clf.fit, -X, y2) y_pred = clf.fit(X, y2).predict(X)
yield check_oob_score, name, csc_matrix(boston.data), boston.target, 50
import binascii import hashlib import logging import os import re import subprocess
default_level = None from_logout = _is_from_logout(request) if from_logout: default_level = logger.getEffectiveLevel() logger.setLevel(ERROR) try: yield finally: if from_logout: logger.setLevel(default_level)
from __future__ import absolute_import import logging
import integration import salt.utils
pass
from course_modes.models import CourseMode cert_set = cls.objects.create(course_key=course_key)
self.assertEqual(tab.name, expected_name)
log.exception(u"Error while #{}ing student") log.exception(exc) results.append({ 'identifier': identifier, 'error': True, })
'lms.djangoapps.verify_student',
import salt.ext.six as six try: import zmq except ImportError: pass
clf = MultinomialNB() clf.fit(X_train, y_train, sw_train) prob_pos_clf = clf.predict_proba(X_test)[:, 1]
FEATURES['ENABLE_EDXNOTES'] = True
pred_entropies = stats.distributions.entropy( lp_model.label_distributions_.T)
return beta_from_design(dataset.y, **kwargs)
resp = self.client.get(reverse('dashboard')) self.assertNotContains(resp, 'Robot_Super_Course') self.assertContains(resp, 'Robot_Course_Outside_Microsite')
import logging
PIPELINE_ENABLED = False STATICFILES_STORAGE = 'openedx.core.storage.DevelopmentStorage'
return request.build_absolute_uri(staticfiles_storage.url(name))
req_basepath = (self.venv_dir)
if os.path.isfile(this_minion_key): os.unlink(this_minion_key)
course = course or self.course self.register_get_threads_response(threads, page, num_pages) ret = get_thread_list(self.request, course.id, page, page_size, topic_id_list) return ret
CreditRequirementStatus.remove_requirement_status( username, req_to_remove )
swagger = _Swagger(api_name, stage_name, lambda_funcname_format, swagger_file, common_args)
response = self._get_page( 'verify_student_verify_now', course.id, expected_status_code=302 ) self._assert_redirects_to_dashboard(response)
process_option_funcs = [] for option_key in options.__dict__: process_option_func = getattr( self, 'process_{0}'.format(option_key), None ) if process_option_func is not None: process_option_funcs.append(process_option_func)
if len(names) == 1: return ret[names[0]] return ret
return cls.objects.filter(order__isnull=False, course_id=course_id)
for random_matrix in all_random_matrix: yield check_input_size_random_matrix, random_matrix yield check_size_generated, random_matrix yield check_zero_mean_and_unit_norm, random_matrix
return [Attribute('src'), Attribute('height'), Attribute('label', ''), Attribute('width'), ]
assert_equal(_dynamic_max_trials(100, 100, 2, 0.99), 1)
from salt.exceptions import SaltInvocationError import salt.utils.boto import salt.utils.boto3
delete = salt.utils.alias_function(remove, 'delete') purge = salt.utils.alias_function(remove, 'purge')
from __future__ import absolute_import import sys
import_course_from_xml( self.store, self.user.id, root_dir, ['test_export'], static_content_store=content_store, target_id=course_id, )
elif course_overview.location.org in orgs_to_exclude: continue
if ADD_PKG in pkg_list: self.run_function('pkg.remove', [ADD_PKG]) if DEL_PKG in pkg_list: self.run_function('pkg.remove', [DEL_PKG])
return os.path.getsize(self.path(name))
transcripts = Dict(
from salt.modules import mac_brew
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, call, mock_open, NO_MOCK, NO_MOCK_REASON, MagicMock
plt.matshow(importances, cmap=plt.cm.hot) plt.title("Pixel importances with forests of trees") plt.show()
if not summary: summary.append(line) continue
self.refresh_cached_metadata_inheritance_tree(xblock.scope_ids.usage_id.course_key, xblock.runtime)
all_variables, all_functions = add_defaults(variables, functions, case_sensitive)
if not salt.utils.which('zypper'): return (False, "Module zypper: zypper package manager not found") return __virtualname__
self.should_fetch_course = kwargs.get('should_fetch_course') self.imports_dir = path('test_root/courses/')
HAS_GLANCE = False try: from glanceclient import client from glanceclient import exc HAS_GLANCE = True except ImportError: pass
import salt.config import salt.loader from salt.modules import boto_lambda from salt.exceptions import SaltInvocationError
import salt.utils
random_state = np.random.RandomState(0) n_samples, n_features = X.shape X = np.c_[X, random_state.randn(n_samples, 200 * n_features)]
from __future__ import absolute_import import logging
repo_opts = dict( (x, kwargs[x]) for x in kwargs if not x.startswith('__') and x not in ('saltenv',) )
self.status = 'paying' self.save()
resp = self.client.post( reverse('submit_answers', args=['NonExisting']), self.student_answers ) self.assertEquals(resp.status_code, 404)
_view_name = 'profile_image_upload' _replacement_method = 'openedx.core.djangoapps.profile_images.views.ProfileImageView.post'
self.assertEqual(node.tag, 'sequential')
scheme_extensions = None
answers = List(help="Poll answers from xml", scope=Scope.content, default=[])
if self.termination_criterion is None: return True else: return self.termination_criterion.continue_learning(self.model)
from __future__ import absolute_import
self.coefs_ = self._best_coefs self.intercepts_ = self._best_intercepts
_win(kernel32.CreatePipe, wintypes.BOOL,
self.assertEqual(response.status_code, 200)
module.system.render_template = Mock(return_value="<div>Test Template HTML</div>")
return self.find_css('.signatory-panel-body .signatory-title-value').first.text[0]
activate_account(activation_key) account = get_account_settings(request) self.assertTrue(account['is_active'])
'ENABLE_COURSEWARE_SEARCH': False,
import salt.utils from salt.utils.odict import OrderedDict from salt._compat import string_io from salt.ext.six import string_types
if self.opts['add_proxymodule_to_opts']: self.opts['proxymodule'] = self.proxy
self.certificates_section.refresh()
from salt.exceptions import CommandExecutionError import salt.utils
total_amount = PaidCourseRegistration.get_total_amount_of_purchased_item(course_key=self.course_key) self.assertEqual(total_amount, 0.00)
fake_data_api.add_course(self.COURSE_ID, course_modes=['honor']) api.update_enrollment(self.USERNAME, self.COURSE_ID, mode='honor', is_active=False)
if existing['code'] == 200:
expected = [(o, o) for o in options] self.assertEqual(f(input), expected)
import salt.ext.six as six
if error == 0: self.input_state['queuekey'] = queuekey self.input_state['queuestate'] = 'queued' self.input_state['queuetime'] = time.time()
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
_fh.writelines(rules)
return u"//{}/{}/{}".format(settings.CMS_BASE, page, block.location)
messages = [
from __future__ import absolute_import import logging import gc import datetime
if salt.utils.is_windows(): runners = None utils = None funcs = None
self._setup_mode_and_enrollment(self.PAST, "verified")
with mock_registered_transformers(self.registered_transformers): self.transformers += self.registered_transformers
return Fragment(self.get_html())
import salt.config import salt.loader
ANALYTICS_DASHBOARD_URL = ENV_TOKENS.get("ANALYTICS_DASHBOARD_URL", ANALYTICS_DASHBOARD_URL) ANALYTICS_DASHBOARD_NAME = ENV_TOKENS.get("ANALYTICS_DASHBOARD_NAME", PLATFORM_NAME + " Insights")
if not name: return 'Required parameter "name" not passed'
return self.q(css=".wrapper-register-choose").is_present()
for type_list in valid_types: if r in type_list: return True if int(r / 10.) in type_list and (r % 10) == 0: return True
import datetime import json import logging import os import re import traceback import shutil import types
score_means = list() score_stds = list() percentiles = (1, 3, 6, 10, 15, 20, 30, 40, 60, 80, 100)
split_test = self._update_partition_id(0) self.assertEqual(2, len(split_test.children)) initial_group_id_to_child = split_test.group_id_to_child
for element in collection: if element.location.block_id == _id: return element
changes[namespace] = { 'new': config, 'old': update_config, }
courses_list_by_groups, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(len(courses_list_by_groups), 1)
return self._validation_paragraph('error').present
if branch_setting != ModuleStoreEnum.Branch.published_only: raise ValueError(u"Cannot set branch setting to {} on a ReadOnly store".format(branch_setting)) yield
users_state_before_fail = self._get_users_state()
if not isinstance(config, dict): return False, ('Configuration for diskusage beacon ' 'must be a dictionary.') return True, 'Valid beacon configuration'
import salt.daemons.masterapi
from __future__ import absolute_import import os import random import string import time
mock_count.return_value = None with self.assertRaises(BuildFailure): pavelib.quality.run_jshint("")
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.correct_responses[name] = self.COMPUTED_ANSWER_CORRECT self.incorrect_responses[name] = self.COMPUTED_ANSWER_INCORRECT
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
from __future__ import absolute_import
total_amount = models.FloatField()
from openedx.core.djangoapps.credit.api.eligibility import ( is_credit_course, set_credit_requirement_status as api_set_credit_requirement_status )
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
if isinstance(exceptions, tuple): names = " or ".join(e.__name__ for e in exceptions) else: names = exceptions.__name__
published_branch = course.id.for_branch( ModuleStoreEnum.BranchName.published )
#)
return models.Application.objects.create( name=name, user=user, client_id=client_id, client_type=models.Application.CLIENT_CONFIDENTIAL, authorization_grant_type=authorization_grant_type, redirect_uris=redirect_uri, )
return self.q(css='h1.page-header-title').text
violations_count_str = "Number of pep8 violations: {count}".format(count=count) print violations_count_str print violations_list
usage_key = UsageKey.from_string('i4x://edX/apis/html/interactive') usage_key.replace(course_key=self.course.id) self.assertEqual(Bookmark.get_path(usage_key), [])
salt '*' vsphere.syslog_service_reload my.esxi.host root bad-password
with salt.utils.fopen(file_path): plist = plistlib.readPlist(true_path)
import salt.utils from salt.utils import files as util_files
copy_Gram = True
try: validate_email(eamap.external_email) context['ask_for_email'] = False except ValidationError: context['ask_for_email'] = True
rval = -(self.beta * T.dot(state, self.ising_bias()))
provider = CreditProvider.objects.get() provider.active = False provider.save()
for prop in properties_update: value = properties[prop] res = __salt__['zpool.set'](name, prop, value)
SupportedFieldType(StudentViewTransformer.STUDENT_VIEW_DATA, StudentViewTransformer), SupportedFieldType(StudentViewTransformer.STUDENT_VIEW_MULTI_DEVICE, StudentViewTransformer),
proba = sum(all_proba) / self.n_estimators
verify_name(self.seq_usage_key, self.chapter_usage_key, "customized name", display_name="customized name")
expect = kwargs.get('expect', '') options = kwargs.get('options', [])
if salt.utils.is_windows():
students_to_generate_certs_for = students_to_generate_certs_for.filter( certificatewhitelist__course_id=course_id, certificatewhitelist__whitelist=True ).exclude( generatedcertificate__course_id=course_id, generatedcertificate__status__in=CertificateStatuses.PASSED_STATUSES )
self.assertIn("copyright", json_data)
global __AccessKeyId__, __SecretAccessKey__, __Token__, __Expiration__
UserFactory.create(username=self.USERNAME, email=self.EMAIL, password=self.PASSWORD)
if isinstance(data, dict) and not pillar_key: return data elif not pillar_key: return {'redis_pillar': data} else: return {pillar_key: data}
trainer = yaml_parse.load(convert_to_one_hot_yaml % {'filename': filename}) trainer.main_loop()
lti_endpoint = self.server.config.get('lti_endpoint', self.DEFAULT_LTI_ENDPOINT) return lti_endpoint in self.path
response = self.client.post(reverse('donation')) self.assertEqual(response.status_code, 404)
self.assertTrue(filecmp.cmp(path_test, path_out))
self.section = get_module_for_descriptor( self.effective_user, self.request, self.section, self.field_data_cache, self.course_key, self.position, course=self.course, )
bg = nodes.container() bg['classes'] = ['lit-background'] node.append(bg)
return T.nnet.sigmoid(conditional_params[0])
ret = {} for minion, data in six.iteritems(returns): ret[minion] = json.loads(data) return ret
val_course_data = self.get_cached_val_data_for_course(video_profile_names, self.location.course_key) val_video_data = val_course_data.get(self.edx_video_id, {})
movie_reviews_data_folder = sys.argv[1] dataset = load_files(movie_reviews_data_folder, shuffle=False) print("n_samples: %d" % len(dataset.data))
course_badge_check(user, course_key)
if line.startswith('-'): if summary and summary_data and fault_data: result.update(_merge_data(summary_data, fault_data))
beta = linalg.solve_triangular(G, np.dot(Q.T, Yt))
self.q(css=self.VIEW_MODE_OPTIONS_CSS).filter(lambda el: el.text.strip() == view_mode).first.click() self.wait_for_ajax()
region_str = "[[[10,10], [20,10], [20, 30]], [[100,100], [120,100], [120,150]]]"
__remove_temp_logging_handler()
import salt.ext.six as six
list1.sort() list2.sort() return list1 == list2
registration_codes_list = CourseRegistrationCode.objects.filter( course_id=course_id ).order_by('invoice_item__invoice__company_name')
shutil.move(src_filename, dst_filename)
from __future__ import absolute_import import copy import logging import os import subprocess from distutils.version import LooseVersion
([CourseMode.VERIFIED, CourseMode.AUDIT], CourseMode.DEFAULT_MODE_SLUG),
pipeline.items.append( preprocessing.ExtractPatches(patch_shape=(8, 8), num_patches=150000) )
X1 = np.array([[-2, ], [-1, ], [-1, ], [1, ], [1, ], [2, ]], dtype='f')
html, __ = self._get_container_preview(root_usage_key)
if 'X-Edx-Api-Key' in self.headers: response = self.server._response_str logger.debug("Comment Service: sending response %s", json.dumps(response))
from __future__ import absolute_import
clf_base_regressor = \ CalibratedClassifierCV(RandomForestRegressor(), method="sigmoid") assert_raises(RuntimeError, clf_base_regressor.fit, X_train, y_train)
assert_warns(DataConversionWarning, clf.fit, X, y_) assert_array_equal(clf.predict(T), true_result) assert_equal(100, len(clf.estimators_))
parent_dir = os.path.dirname(path)
import salt.client.netapi import salt.utils.parsers as parsers from salt.utils.verify import check_user, verify_files, verify_log
import salt.ext.six as six
import salt.utils
return "{}/{}".format(self._badge_create_url, slug)
sp = SpectralClustering(n_clusters=2, affinity='<unknown>') assert_raises(ValueError, sp.fit, X)
self._update_release_dates(self.date_one, self.date_one, self.date_one) self._verify_release_date_source(self.sequential, self.chapter)
reload(vboxapi) _virtualboxManager = vboxapi.VirtualBoxManager(None, None)
import yaml import salt.ext.six as six
return int(self.broadcast_address) - int(self.network_address) + 1
DEPRECATION_VSCOMPAT_EVENT = 'deprecation.vscompat'
dmi_data = _dmi_data(dmi_raw, clean, fields) if len(dmi_data): record['data'] = dmi_data dmi.append(record) elif not clean: dmi.append(record)
is_dynamic = False
Y /= np.sum(Y, axis=1)[:, np.newaxis]
return SPF(domain, 'TXT', nameserver)
expected_energy_p = model.energy( layer_to_chains[model.visible_layer], [layer_to_chains[layer] for layer in model.hidden_layers] ).mean()
from __future__ import absolute_import from __future__ import print_function import logging
import salt.ext.six as six
return False
time_lapse = time.time() - self.start_time full_msg = "%s: %.2fs, %.1f min" % (msg, time_lapse, time_lapse / 60)
depth = len(b_list)
from __future__ import absolute_import
v_mean, v_var = self.mean_var_v_given_h_s(h_sample, s_sample) v_mean_shape = (batch_size, self.nvis) v_sample = rng.normal(size=v_mean_shape) * tensor.sqrt(v_var) + v_mean
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, show_reset_button=False, done=False) self.assertFalse(module.should_show_reset_button())
salt myminion git.submodule /path/to/repo/sub/repo add opts='https://mydomain.tld/repo.git'
class CourseModeFactory(DjangoModelFactory): class Meta(object): model = CourseMode
problem_state = json.loads(studentmodule.state) problem_state["attempts"] = 0
xblock, fields = (block, block.fields)
try:
project = 'Pylearn2' copyright = '2011-2015, LISA lab'
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON ensure_in_syspath('../../')
self._verify_visibility_state(xblock_info, VisibilityState.ready)
if not self._is_masquerading_as_student(): raise Http404('No {block_type} found with name {url_name}'.format( block_type=block_type, url_name=url_name, ))
super(CourseDescriptorTestCase, self).setUp() self.course = get_dummy_course(start=_TODAY)
memberships = list(CourseTeamMembership.get_memberships(team_id=team_id))
#sys.path.append(os.path.abspath('some/directory'))
BODY_SELECTOR = ".note-section" TITLE_SELECTOR = ".course-subtitle"
self.assertIn(orphan, self.store.get_orphans(course.id))
sparse_results = sparse_classifier.predict_proba(X_test_sparse) dense_results = dense_classifier.predict_proba(X_test) assert_array_equal(sparse_results, dense_results)
options = opts.split(',')
apache2.service.running()
if self.cache_cli: self.cache_cli.put_cache([load['id']])
if answer_script: answer_element = etree.SubElement(response_element, "answer") answer_element.set("type", "loncapa/python") answer_element.text = str(answer_script)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
UserSocialAuth._meta.app_label = "default" Nonce._meta.app_label = "default" Association._meta.app_label = "default" Code._meta.app_label = "default"
linter = PythonLinter() results = FileResults('') linter.check_python_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
assert_true(modulestore.has_course(locator, ignore_case))
ROLE = "course_creator_group" def __init__(self, *args, **kwargs): super(CourseCreatorRole, self).__init__(self.ROLE, *args, **kwargs)
self.assertFalse(res_json['success']) self.assertEqual( res_json['message'], u'Invalid data, generate_for must be "new" or "all".' )
wait_for_xblock_initialization(self, '.xblock[data-block-type="split_test"]')
with self.assertNumQueries(6): override_field_for_ccx(self.ccx, chapter, 'start', ccx_start)
self.seed = randomization_bin(self.runtime.seed, unicode(self.location).encode('utf-8'))
options = repo_string.strip().split() branch_env = options[0] repo_location = options[1] root = ''
check_lti_iframe_content("Wrong LTI signature")
CourseModeFactory.create(mode_slug="honor", course_id=self.course.id, min_price=100)
rng = np.random.RandomState(0) n_samples, n_features = 10, 5
GRADES_DOWNLOAD_ROUTING_KEY = HIGH_MEM_QUEUE
return {k: dic.get(k) for k in keys}
AutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=True).visit()
return self.student_view(context)
return _get_enabled_disabled("false")
self.q(css=".action-toggle-notes").first.click() return self
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
request_params.pop('IdentityPoolName', None) r = __salt__['boto_cognitoidentity.update_identity_pool'](**request_params)
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.utils import vt
self.client.login(username=self.user.username, password=self.test_password) response = self.send_get(self.client) self.assertEqual({}, response.data)
import logging import os
task_progress['traceback'] = traceback_string
self.assertIn("Payment Form", resp.content)
self.assertIn("2015-JULY-17", text)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch ensure_in_syspath('../../')
version = 'dev' release = 'dev'
access.has_access(None, 'staff', 'global', None)
return list(set(enrolled_students) - set(students_already_have_certs))
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
repofile = '' for repo in repos: if repo == name: repofile = repos[repo]['file']
for raw in jinfo_iter: if raw is None: break
from __future__ import absolute_import
Ht = check_array(H.T, order='C') X = check_array(X, accept_sparse='csr')
user = self.create_user_and_enroll(enrollment_type) if verification_status: self.add_verification_status(user, verification_status)
log = logging.getLogger(__name__)
self._fields[key.field_name] = value
open(self.distribution.salt_ssh_packaging_file, 'w').write('Packaged for Salt-SSH\n')
self.assertEqual(len([r for r in httpretty.httpretty.latest_requests if r.method == 'PATCH']), 0)
self.assertContains(response, 'programData') self.assertContains(response, self.data['name'])
assert_greater(np.mean(labels == true_labels), .3)
call_command('seed_permissions_roles', unicode(cls.course_id))
from salt.modules import cmdmod from salt.exceptions import CommandExecutionError from salt.log import LOG_LEVELS
self.assertEqual(len(self._get_enrollments()), 1)
from __future__ import absolute_import import socket import logging
return np.tanh(X, out=X)
name = _make_profile_image_name(username) return {size: _get_profile_image_filename(name, size) for size in _PROFILE_IMAGE_SIZES}
from salt.modules import iptables
assets_deleted = content_store.remove_redundant_content_for_courses() success = True
(27, True, u"True"),
X = coo_matrix(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
from __future__ import absolute_import
post_login_handler = _finish_auth_url(params) js_success_var = 'var nextUrl = "{}";'.format(post_login_handler) self.assertContains(response, js_success_var)
deadline = second_attempt.created_at + timedelta(days=1) query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(deadline, query) self.assertEqual(result, second_attempt)
termination_criterion = EpochCounter(5)
from salt.modules import rabbitmq from salt.exceptions import CommandExecutionError
sub = salt.utils.cloud.simple_types_filter(cur) sub.update({'tag': name}) ret.append(sub)
blocks_visited.add(xblock.location)
return vpnservice
self.store.create_child( self.user_id, locations['parent'], 'vertical', block_id='new_child', )
sfm = SelectFromModel(clf, threshold=0.25) sfm.fit(X, y) n_features = sfm.transform(X).shape[1]
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
course_overview_2 = CourseOverview.get_from_id(course.id) self.assertFalse(course_overview_2.mobile_available)
learn_rates = [annealed * self.learning_rates[p] for p in self.params]
from __future__ import absolute_import
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
return (self.role, self.org, self.course_id, self.user_id)
read_data = "".join(textwrap.dedent(c) for c in content) return patch.object(pavelib.i18n, 'open', create=True, new=mock_open(read_data=read_data))
from __future__ import unicode_literals
base_estimator = LinearSVC(random_state=0)
world.scenario_dict['COURSE'] = world.CourseFactory.create( org='edx', number=course, display_name='Test Course', metadata=metadata, grading_policy=grading_policy, )
if inline_collections: for item in tab.items(course): yield item elif len(list(tab.items(course))) > 0: yield tab
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch )
from salt.utils.rsax931 import RSAX931Signer, RSAX931Verifier
self.config.pop(cli_log_datefmt)
indices = self.get_indices(i) return tuple(len(i) for i in indices)
enrollment_mode = self.dashboard_page.get_enrollment_mode(self.course_info["display_name"]) self.assertEqual(enrollment_mode, 'honor')
costMatrix *= T.neq(Y, -1) return model.cost_from_cost_matrix(costMatrix)
def test_sparse_random_projection_transformer_invalid_density(): for RandomProjection in all_SparseRandomProjection: assert_raises(ValueError, RandomProjection(density=1.1).fit, data)
if count: failure_string = "Too many pep8 violations. " + violations_count_str failure_string += "\n\nViolations:\n{violations_list}".format(violations_list=violations_list) raise BuildFailure(failure_string)
disk_name = next(six.iterkeys(diskp[0])) disk_type = diskp[0][disk_name]['format'] disk_file_name = '{0}.{1}'.format(disk_name, disk_type)
return self.page_num - 1
PYTHON_COVERAGERC = REPO_ROOT / ".coveragerc"
self._pool = None warnings.warn( 'Multiprocessing backed parallel loops cannot be nested' ' below threads, setting n_jobs=1', stacklevel=3) return 1
return str((template_name, context))
io_loop.run_sync(ipc_subscriber.connect)
import re
self.assertEquals(3, self.response.content.count('grade_C'))
separator = u' <b>{}</b> '.format(_('or')) return {self.answer_id: separator.join(self.correct_answer)}
self.navigate_to_video()
_export_field_content(item, item_dir)
min_dist_inds = dists.argmin(axis=1)
jll = safe_sparse_dot(X, (self.feature_log_prob_ - neg_prob).T) jll += self.class_log_prior_ + neg_prob.sum(axis=1)
problem_vertical = ItemFactory.create( parent_location=self.problem_section.location, category='vertical', display_name='Problem Unit' )
store = self._get_modulestore_for_courselike(asset_key.course_key) return store.find_asset_metadata(asset_key, **kwargs)
if os_family == 'FreeBSD': return
self.labels = np.array(labels, copy=True) self.unique_labels = np.unique(labels) self.n_unique_labels = len(self.unique_labels)
npy_filename_root = os.path.join(preprocess('${PYLEARN2_DATA_PATH}'), 'icml07data', 'npy', npy_filename)
self.assertIn( 'oauth_body_hash="00hq6RNueFa8QiEjhep5cJRHWAI%3D"', prepped_req.headers['Authorization'] )
import salt.utils as utils
import integration
y_seq_of_seqs = [[], [1, 2], [3], [0, 1, 3], [2]] assert_raises(ValueError, LabelBinarizer().fit_transform, y_seq_of_seqs)
BINS = frozenset(('svc', 'supervise', 'svok')) return all(salt.utils.which(b) for b in BINS)
from salt.modules import environ import os
break
X, y = util_shuffle(X, y, random_state=generator)
X_true -= X_true.mean()
assert_almost_equal(errors, errors3) assert_almost_equal(values, values3)
return social_auth.uid[len(self.lti_consumer_key) + 1:]
actual = json.loads(response.content) self.assertEqual(actual, expected)
LogoutPage(self.browser).visit() StudioAutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=staff).visit()
from collections import namedtuple from copy import deepcopy import ddt import itertools from nose.plugins.attrib import attr from unittest import TestCase
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
warnings.warn(premature, RuntimeWarning, stacklevel=2) break
form = self.get_form(expected_valid=False) self.assertEqual(form.errors, {expected_field: [expected_message]})
self.store.convert_to_draft(problem.location, self.user.id) problem = self.store.get_item(problem.location)
to_process_non_drafts = super(DraftModuleStore, self)._query_children_for_cache_children(course_key, items)
from jinja2 import Environment try: import ldap import ldap.modlist import ldap.filter HAS_LDAP = True except ImportError: HAS_LDAP = False
prod = np.dot(W1, W2) pv = make_viewer(prod.T) return pv
if X.shape[1] == 1: ddof = 0
def default(obj): return msgpack.ExtType(78, obj)
role.add_users(self.user)
self.assertIn(INSTANCE_NAME, ret.keys())
return self._certificate_data
return user_id in self.context["staff_user_ids"] or user_id in self.context["ta_user_ids"]
return self.q(css='.action-delete').first
add_users(self.admin, CourseCreatorRole(), self.user)
self.instructor_dashboard_page = InstructorDashboardPage(self.browser, self.course_id) self.instructor_dashboard_page.visit() self.cohort_management_page = self.instructor_dashboard_page.select_cohort_management()
selected_sort = self.sort_page.get_selected_sort_preference() self.assertEqual(selected_sort, "activity")
block_types_list = {'block_type1', 'block_type2'} for field_name in ['block_counts', 'student_view_data']: self.form_data.setlist(field_name, block_types_list) self.cleaned_data[field_name] = block_types_list
config.delete() self.assertEqual(len(self.page.experiment_group_configurations), 0)
assert_array_equal(linkage_X_ward[:, :2], out_X_unstructured[0]) assert_array_equal(linkage_X_ward[:, :2], out_X_structured[0])
with patch('salt.utils.which', mock_true): ret = parallels.__virtual__() self.assertTrue(ret) self.assertEqual(ret, 'parallels')
context_dict.setdefault("STATIC_URL", "/dummy-static/") try: xml_str = self.template.render_unicode(**context_dict) except: raise TemplateError(exceptions.text_error_template().render())
HAS_RANGE = False try: import seco.range HAS_RANGE = True except ImportError: pass
expected = inspect.getargspec(load_ndarray_dataset)[0][1:] data = load_ndarray_dataset(conf['dataset'], **subdict(conf, expected))
self._verify_unit_warning( self.UnitState(is_released=False, publish_state=self.PublishState.UNPUBLISHED_CHANGES, is_locked=False), self.FUTURE_UNPUBLISHED_WARNING )
Yt = IncrementalPCA(n_components=2).fit(X).transform(Xt)
add_lookup('main', '', package=__name__) self.assertEqual(utils.render_mustache('test.mustache', {}), 'Testing 1 2 3.\n')
g.precisions_init = precisions_bad_shape[covar_type] assert_raise_message(ValueError, "The parameter '%s precision' should have " "the shape of" % covar_type, g.fit, X)
super(InheritingFieldData, self).__init__(**kwargs) self.inheritable_names = set(inheritable_names)
zendesk_tags = list(tags.values()) + ["LMS"]
if len(self.costs) > 1: output = self._get_samples_from_model(model, data)
_step.given('I edit the component') world.wait_for_ajax_complete() _step.given('I save changes')
self.assertTrue(self.store.has_changes(self.store.get_item(self.course.location)))
mem -= 256 for vm_ in list_domains(): dom = _get_domain(vm_) if dom.ID() > 0: mem -= dom.info()[2] / 1024 return mem
return self.q(css=self._bounded_selector('h3.card-title')).map(lambda e: e.text).results
locate.__salt__ = {}
self.assertEqual( [len(courses_list), len(courses_list_by_groups), len(courses_summary_list)], [0, 0, 0] )
if isinstance(opts, list): opts = ','.join(opts)
if serialized.startswith("="): serialized = serialized[1:].strip()
'ENABLE_SERVICE_STATUS': False,
ADVANCED_PROBLEM_TYPES = [ { 'component': 'openassessment', 'boilerplate_name': None, }, ]
self.login_page.password_reset(email="nobody@nowhere.com")
for attr in REQUISITES: if attr in kwargs: try: iter(kwargs[attr]) except TypeError: kwargs[attr] = [kwargs[attr]] self.kwargs = kwargs
self.update_enrollment(is_active=True)
raise SkipTest
from django.template.base import ( TemplateSyntaxError, Library, token_kwargs, TemplateDoesNotExist ) from django.template.loader_tags import IncludeNode
return dict(parse_qsl(urlparse(url).query))
if y.ndim == 1: y = y.reshape((-1, 1))
api.update_credit_request_status(request["parameters"]["request_uuid"], self.PROVIDER_ID, status) self._assert_credit_status(status)
assert abs(exact_logz - logz) < 0.01*exact_logz
response.set_cookie_wrapped_func = response.set_cookie response.set_cookie = _set_cookie_wrapper
self.xmodule_runtime = xmodule_runtime
return structure_key
'monitoring',
sample_ids = [0, 1] common_nodes = (node_indicator.toarray()[sample_ids].sum(axis=0) == len(sample_ids))
X[0, 2] *= 2 assert_equal(X[0, 2], 5)
self._setup_mode_and_enrollment(self.PAST, "verified")
try: next_child = current.children.next()
discount = Decimal("{0:.2f}".format(Decimal(percentage_discount / 100.00) * value)) return value - discount
answer_ids = [] for response in self.responders.keys(): results = self.responder_answers[response] answer_ids.append(results.keys()) return answer_ids
v3.set_params = '_invalid_analyzer_type_' assert_raises(ValueError, v3.build_analyzer)
key = safe_key(key, '', '')
self.assertEqual(self.captured_request.POST.get("course_id"), "edX/DemoX/Fall")
results.append(str(self.glob_match(word)))
return self.client.post(url, post_args)
for child_hierarchy in block_hierarchy.get('#children', []): self.add_parents(child_hierarchy, block_map)
problem_page.fill_answer("20") problem_page.click_check() self.assertTrue(problem_page.is_correct())
request = self.request_factory.get(reverse('about_course', args=[unicode(ccx_locator)])) request.user = student mako_middleware_process_request(request)
MAX_DATABASE_LOCK_RETRIES = 5
changed_module = StudentModule.objects.get(pk=self.module_to_reset.pk) self.assertEqual( json.loads(changed_module.state)['attempts'], 0 )
from salt.modules import vsphere from salt.exceptions import CommandExecutionError
from __future__ import absolute_import import sys
rng = check_random_state(2) X = 0.3 * rng.randn(120, 2) X_train = np.r_[X + 2, X - 2] X_train = X[:100]
log = logging.getLogger(__name__)
different = (mbk_means_labels == 4) ax = fig.add_subplot(1, 3, 3)
tfp.add(base, arcname=os.path.join('py{0}'.format(py_ver), base)) continue
clf_invalid_method = CalibratedClassifierCV(clf, method="foo") assert_raises(ValueError, clf_invalid_method.fit, X_train, y_train)
mock_get.return_value.content = json.dumps({}) self.assertRaises(EdxNotesParseError, helpers.get_notes, self.request, self.course)
import re import logging
return student.views.index(request, user=request.user)
'gating.apps.GatingConfig',
self.assert_enrollment_status(as_server=True, mode=CourseMode.VERIFIED)
mode = 'r+'
self.assertTrue(self.coach_dashboard_page.is_browser_on_enrollment_page())
from salt.states import rdp
class Meta(object): model = Dummy
response = organizations_helpers.get_organization_by_short_name(self.organization['short_name']) self.assertIsNone(response)
import salt.loader import salt.utils import salt.utils.event from salt.exceptions import SaltInvocationError
saved_fields.extend(key.field_name for key in set_many_data)
groups = [] for g in p.groups:
self.assertSaltTrueReturn(ret)
fgroups = hgroups filters_per_group = hcolors_per_group
if node.name != '__repr__': self.generic_visit(node)
if instance in vmconfig['state'] and vmconfig['state'][instance] is not None: for state_cfg in vmconfig['state'][instance]: if vmconfig_type['instance'][instance] not in state_cfg: continue
self.max_size_in_mem = kwargs.pop('max_size_in_mem', 512000)
pass
ret_dense = test_func(DENSE_FILTER) ret_sparse = test_func(SPARSE_FILTER) if ret_dense is not None and ret_sparse is not None: assert_array_almost_equal(ret_dense, ret_sparse, decimal=3)
import logging
return self._estimate_log_prob(X) + self._estimate_log_weights()
STATIC_URL = STATIC_URL_BASE.encode('ascii') if not STATIC_URL.endswith("/"): STATIC_URL += "/" STATIC_URL += EDX_PLATFORM_REVISION + "/"
img = imread(file_path) if img.ndim is 0: raise RuntimeError("Failed to read the image file %s, " "Please make sure that libjpeg is installed" % file_path)
import salt.ext.six as six
updates = self._get_updates(grads) for param, update in zip(self.params, updates): param += update
interface = interface.split('\\') interface = ''.join(interface)
connection, address = self._socket.accept() self.socket_queue.put((connection, address), True, None)
from salt.modules import config
modulestore().request_cache = None modulestore().metadata_inheritance_cache_subsystem = None
username = re.sub(r'\s', '', _flatten_to_ascii(eamap.external_name), flags=re.UNICODE)
invalid_cdn_url = 'http://http://fakecdn.com/' self.assertIsNone(rewrite_video_url(invalid_cdn_url, self.original_video_url))
self.assertFalse(auth.user_has_role(self.user, CourseCreatorRole()))
def get_asides(self, block): return []
safe_cookie_data_2 = SafeCookieData.parse(serialized_value) self.assertTrue(safe_cookie_data_2.verify(user_id))
programs_config = self.create_programs_config(cache_ttl=cache_ttl) self.assertEqual(programs_config.is_cache_enabled, is_cache_enabled)
import salt.client import salt.utils.virt import salt.utils.cloud import salt.key from salt.exceptions import SaltClientError
rng = np.random.RandomState(0) X = np.c_[X, rng.randn(n_samples, 200 * n_features)]
if six.PY3: py_integer_types = (int, np.integer) py_number_types = (int, float, complex, np.number) else:
self.assertGreaterEqual(iteration_over_courses_time_1.elapsed, iteration_over_groups_time_1.elapsed) self.assertGreaterEqual(iteration_over_courses_time_2.elapsed, iteration_over_groups_time_2.elapsed)
self.video.wait_for_state(state)
self.assertEqual(certificate_grades.count('0.0'), 8) self.assertEqual(certificate_grades.count(default_grade), 2)
is_present = self.q(css=selector).present return is_present, is_present
return len(self.q(css='section.updates section article').results)
world.wait_for_ajax_complete()
simultaneous_sort(dist, ind)
U, s, V = linalg.svd(X, full_matrices=False)
static_tab_loc = course_key.make_usage_key('static_tab', tab.url_slug) tab.locator = static_tab_loc
result[mask] = 0.0
if name in ret['changes']: ret['changes'][name]['new']['status'] = image['status']
allowable_chars = string.ascii_letters + string.digits username = '' for _index in range(30): username = username + random.SystemRandom().choice(allowable_chars) return username
if "field_type" in kwargs: kwargs["type"] = kwargs["field_type"]
import salt.defaults.exitcodes import salt.utils import salt.utils.systemd from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.ext import six
video_id = cls.fetch_youtube_video_id(course_key) if video_id: return "http://www.youtube.com/watch?v={0}".format(video_id)
clf = self.factory() assert_raises(ValueError, clf.fit, X2, Y2, coef_init=np.zeros((2, 2)))
self.assertFalse(self.video.is_autoplay_enabled)
n_classes = 4 n_samples = 50
ext_user = User.objects.get(email=self.ext_user.email) self.assertTrue(auth.user_has_role(ext_user, CourseStaffRole(self.course.id)))
if compzone is True: ret['result'] = True messages.append('Timezone {0} already set'.format(name)) else: do_zone = True
response = self._load_dashboard() self.assertNotContains(response, "credit-eligibility-msg") self.assertNotContains(response, "purchase-credit-btn")
track_function = _get_track_function_for_task(student_module.student, xmodule_instance_args) track_function('problem_delete_state', {}) return UPDATE_STATUS_SUCCEEDED
instructor = AdminFactory.create() self.client.login(username=instructor.username, password="test")
self.client.logout()
assert_greater(brier_score_loss(y_test, prob_pos_clf), brier_score_loss(y_test, prob_pos_pc_clf))
config = DonationConfiguration.current() config.enabled = True config.save()
log = logging.getLogger(__name__)
import logging import warnings
self.generated_certificate.invalidate()
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
upload_finish_time = datetime.utcnow().replace(microsecond=0, second=0)
prior = DiagonalGaussianPrior() vae = DummyVAE() prior.set_vae(vae) prior.initialize_parameters(nhid=5) prior.sample_from_p_z(10)
theano.config.floatX = self.orig_floatX
import logging
Z = Z.reshape(xx.shape) plt.figure() plt.pcolormesh(xx, yy, Z, cmap=cmap_light)
email_placeholder = _(u"username@domain.com")
monit.__salt__ = {}
'ret_port': int,
gpr = GaussianProcessRegressor(kernel=kernel) gpr.fit(X, y_norm) gpr_norm = GaussianProcessRegressor(kernel=kernel, normalize_y=True) gpr_norm.fit(X, y)
assert isinstance(model.hidden_layers[-1], dbm.Softmax)
pass
from __future__ import absolute_import import os import json import logging import logging.handlers import datetime
from __future__ import absolute_import, with_statement from distutils.version import LooseVersion import time import inspect import logging
STUDENTMODULEHISTORYEXTENDED_OFFSET = ENV_TOKENS.get( 'STUDENTMODULEHISTORYEXTENDED_OFFSET', STUDENTMODULEHISTORYEXTENDED_OFFSET )
cmd_opt = []
self.assertEqual(len(self.store.get_orphans(course_key)), number)
log.error('Detected nodegroup expansion failure of "{0}"'.format(word)) return False
return Registration.objects.get(user__email=email)
if refresh: refresh_db()
'USE_MICROSITES': False,
'result': {'start_index': 3, 'end_index': 11, 'quote_length': 1}
__virtualname__ = 'buildout' log = logging.getLogger(__name__)
path = event.path while path != '/': if path in config: break path = os.path.dirname(path)
return
extract_dir_relative = path.relpath(extract_dir, settings.DATA_DIR)
ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_ ).astype(np.bool_) ref_inlier_mask[outliers] = False
resp = self._get_preview(usage_key, data) self.assertEqual(resp.status_code, expected_code) if content_contains: self.assertIn(content_contains, resp.content) return resp
class Meta(object): model = CourseCohort
import logging import os
courses_list_by_groups, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(courses_list_by_groups, []) self.assertEqual(courses_list, courses_list_by_groups)
db_query = models.StudentModule.objects.filter( course_id__exact=course_id, module_type__exact="sequential", ).values('module_state_key').annotate(count_sequential=Count('module_state_key'))
import salt.config as config
- pattern: | CentOS \(2.6.32[^\n]+\n\s+root[^\n]+\n\)+
self.assertEqual(len(self.lib_page.xblocks), 1) problem_block = self.lib_page.xblocks[0] self.assertIn("Laura Roslin", problem_block.author_content)
return MilestoneError() if get_pre_requisite_courses_not_completed(user, course_id) else ACCESS_GRANTED
from __future__ import absolute_import
response = self._regenerate(course_key=self.CERT_COURSE_KEY) self.assertEqual(response.status_code, 400)
for field in self.fields.values(): if field.scope in (Scope.parent, Scope.children): continue
exams = get_all_exams_for_course(unicode(self.course.id)) self.assertEqual(len(exams), 1)
import salt.utils from salt.exceptions import CommandExecutionError, MinionError
cache_key = CourseEnrollment.cache_key_name( instance.user.id, unicode(instance.course_id) ) cache.delete(cache_key)
out_file.write('%d -> %d ;\n' % (parent, node_id))
self.config.pop(self._logfile_loglevel_config_setting_name_)
return False
iris = datasets.load_iris() X = iris.data y = iris.target
X, y = iris.data, iris.target
from __future__ import absolute_import import os import textwrap
manage.py ... transfer_students -f edX/Open_DemoX/edx_demo_course -t edX/Open_DemoX/new_demoX
if ltype: cmd = '{0} -t {1}'.format(cmd, ltype)
import salt.ext.six as six
(False, False), (False, True),
self.assert_function_values( 'sqrt',
child_vertical_usage_key = self._create_vertical(parent_usage_key=root_usage_key) resp = self.create_xblock(parent_usage_key=child_vertical_usage_key, category='problem', boilerplate='multiplechoice.yaml') self.assertEqual(resp.status_code, 200)
scorer = get_scorer('mean_squared_error') ridge_gcv4 = RidgeCV(fit_intercept=False, scoring=scorer) ridge_gcv4.fit(filter_(X_diabetes), y_diabetes) assert_equal(ridge_gcv4.alpha_, alpha_)
return self.modulestore.get_library(self.courselike_key, depth=None, lazy=False)
req_to_remove = CreditRequirement.get_course_requirements(course_key, namespace=req_namespace, name=req_name)
raise
call_command('seed_permissions_roles', unicode(self.course_id))
y = (y > 4).astype(np.int)
return [('127.0.0.1:11211 (1)', {})]
from salt.modules import alternatives
pass
non_displayed_tabs = set(old_tab_list) - set(new_tab_list) new_tab_list.extend(non_displayed_tabs)
config = sconfig.minion_config(minion_config)
sh('git clean -fdX conf/locale')
assert_raises(ValueError, mlb.inverse_transform, np.array([[1]])) assert_raises(ValueError, mlb.inverse_transform, np.array([[1, 1, 1]]))
fit_params = fit_params if fit_params is not None else {} fit_params = dict([(k, _index_param_value(X, v, train)) for k, v in fit_params.items()])
X_composite = mlp_composite.get_input_space().make_theano_batch() X_first_part = mlp_first_part.get_input_space().make_theano_batch() X_second_part = mlp_second_part.get_input_space().make_theano_batch()
if 0 in classes_k: class_prior_k[classes_k == 0] += zeros_samp_weight_sum
print(metrics.classification_report(y_test, y_predicted, target_names=dataset.target_names))
self.assertEqual(cached_structure, not_cached_structure)
del self.map[key]
queryset = cls.objects.filter( course_id=course_id, module_type='problem', grade__isnull=False ) if "read_replica" in settings.DATABASES: return queryset.using("read_replica") else: return queryset
import salt.utils
salt '*' vsphere.get_vmotion_enabled my.esxi.host root bad-password
nn.set_params(algorithm='kd_tree')
dupe_counters[title] += 1 title = u"{title} ({counter})".format(title=title, counter=dupe_counters[title])
missing_course_key = CourseKey.from_string('course-v1:FakeOrganization+CN999+CR-FALL99') self.assertIsNone(ccxconapi.course_info_to_ccxcon(missing_course_key)) self.assertEqual(mock_post.call_count, 0)
y_weights = np.dot(Y.T, x_score) / np.dot(x_score.T, x_score)
wua_searcher = wua_session.CreateUpdateSearcher()
fit_params = fit_params if fit_params is not None else {} fit_params = dict([(k, _index_param_value(X, v, train)) for k, v in fit_params.items()])
self._verify_branch_setting(ModuleStoreEnum.Branch.draft_preferred) _verify_revision_is_published(location)
self.strategy.clean_partial_pipeline()
([TestTransformer1(), UnregisteredTestTransformer3()], [UnregisteredTestTransformer3.name()]),
#def file_list_emptydirs(load):
_ = lambda text: text
skf = StratifiedKFold(n_folds=4) train_index, test_index = next(iter(skf.split(iris.data, iris.target)))
from __future__ import absolute_import try: import pwd except ImportError: pass import logging import time
upload_csv_to_report_store(rows, 'student_profile_info', course_id, start_date)
from __future__ import absolute_import import json import logging
cp.__salt__ = {} cp.__opts__ = {} cp.__pillar__ = {} cp.__grains__ = {} cp.__context__ = {}
deadline = course_deadlines.get(enrollment.course_id)
import logging
return hasattr(self.__get_module(fullname), "__path__")
altered_grader = CourseGradingModel.fetch(self.course.id) self.assertEqual(test_grader.grace_period, altered_grader.grace_period, "Noop update")
self.client.logout()
batch = _undo_op(batch, 'Cast')
import logging import warnings from yaml.scanner import ScannerError from yaml.parser import ParserError from yaml.constructor import ConstructorError
is_collection = False
def __setstate__(self, state): self._is_child = True self.__init__(state['opts'], log_queue=state['log_queue'])
import integration
if params.get('decision') == u'CANCEL': raise CCProcessorUserCancelled()
self.assertEqual(d1, d2) self.assertNotEqual(d1.keys(), d2.keys())
def __init__(self, course_descriptor): self.graders = [ CourseGradingModel.jsonize_grader(i, grader) for i, grader in enumerate(course_descriptor.raw_grader)
SignatureValidator.verify = MagicMock(return_value=True) self.consumer = models.LtiConsumer( consumer_name='consumer', consumer_key=LTI_DEFAULT_PARAMS['oauth_consumer_key'], consumer_secret='secret' ) self.consumer.save()
return result['dict']
thumbs = store.get_all_content_thumbnails_for_course(course_loc) for thumb in thumbs: print "Deleting {0}...".format(thumb) store.delete(thumb['_id'])
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
#html_sidebars = {}
exc_info_on_loglevel=logging.DEBUG
self.assertEquals(xmodule_tabs.CourseTabList.get_tab_by_id(self.course.tabs, tab.tab_id), tab)
self.exceptions.extend([KeyboardInterrupt, WorkerInterrupt])
VERSION_1_SCHEME = "random"
from __future__ import absolute_import, print_function import random import string
assert_equal(len(np.unique(km.labels_)), 3)
for X in [X_1row, X_1col, X_list_1row, X_list_1row]:
self.assert_login_response_before_pipeline_looks_correct(self.client.get('/login'))
if modes_dict is None: modes_dict = cls.modes_for_course_dict(course_id) if cls.HONOR in modes_dict: return cls.HONOR elif cls.AUDIT in modes_dict: return cls.AUDIT
self.user.profile.country = unrestricted_country.country self.user.profile.save() self.assert_enrollment_status()
return modulestore.get_library(structure_key, depth=None)
from salt.ext.six import string_types
container = self.go_to_nested_container_page() self.verify_groups(container, ['alpha', 'gamma'], ['beta'])
return loads(_MssqlEncoder().encode({'resultset': cur.fetchall()}))['resultset']
add_instructor(destination_course_key, request.user, request.user)
folders_list_in_path = folders_list_in_path[:-4]
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
with salt.utils.fopen(requirements_file_path, 'a') as fhw: fhw.write('pep8==1.3.3\n')
pythonpath = os.environ.get('PYTHONPATH', '') pythonpath = throot + ':' + pythonpath os.environ['PYTHONPATH'] = pythonpath
TEST_ROOT = REPO_ROOT / "test_root" LOG_DIR = (TEST_ROOT / "log").abspath()
return set_logged_in_cookies(request, response, user)
salt_log_setup.setup_multiprocessing_logging_listener( self.master_opts )
old_password_hash = user.password
if zmq is None: raise unittest.SkipTest
return self.page_num < self.num_pages
lock_content = cls.create_image(prefix, (32, 32), 'green', '{}_lock.png', locked=True)
CourseEnrollmentFactory.create(user=self.user, course_id=self.course.id, is_active=True)
X_orig = sparse_random_matrix(5, 5, density=0.75, random_state=0)
self.assertIn('test error', result['success'])
courseware_page = CoursewarePage(self.browser, self.course_id) self._make_har_file(courseware_page)
self.assertGreater(len(sections), 0, "No sections found")
config.add_extension( '_isotonic', sources=['_isotonic.c'], include_dirs=[numpy.get_include()], libraries=libraries, )
for processor in get_template_context_processors(): context.update(processor(request))
badge_class = BadgeClass.get_badge_class( slug='new_slug', issuing_component='new_component', description=None, criteria=None, display_name=None, image_file_handle=None, create=False ) self.assertIsNone(badge_class)
self.backend = backend return 'salt'
'provider', 'provider.oauth2', 'edx_oauth2_provider',
if dataset in ["digits", "boston"]: n_samples = X.shape[0] // 5 X = X[:n_samples] X_sparse = X_sparse[:n_samples] y = y[:n_samples]
string_lines = StringLines(file_string) for violation in self.violations: violation.prepare_results(self.full_path, string_lines) if line_comment_delim is not None: self._filter_commented_code(line_comment_delim)
if getattr(node, 'due', None): units.append(node) else: for child in node.get_children(): visit(child)
from __future__ import absolute_import import os
return [ factories.UserCredential( id=1, username='test', credential=factories.ProgramCredential() ), factories.UserCredential( id=2, username='test', credential=factories.ProgramCredential() ) ]
pls_2 = pls_.PLSRegression(n_components=X.shape[1]) pls_2.fit(X, Y)
from salt.states import mac_keychain as keychain
solution_element = rendered_html.find("div") self.assertEqual(solution_element.text, 'Input Template Render')
from __future__ import absolute_import from __future__ import print_function import logging
from __future__ import absolute_import import os import shutil
curl -sSk https://localhost:8000/login \\ -c ~/cookies.txt \\ -H 'Accept: application/x-yaml' \\ -d username=saltdev \\ -d password=saltdev \\ -d eauth=auto
X = np.eye(4) y = np.array(['a', 'b', 'c', 'd'])
import os import logging from salt.ext.six import string_types import salt.ext.six as six from salt.ext.six.moves import zip
dir_mode = __salt__['config.manage_mode'](dir_mode) file_mode = __salt__['config.manage_mode'](file_mode)
self.update_masquerade(role='student') self.verify_show_answer_present(False)
EmptyPromise( lambda: message in (self.message_for_field(field_id) or ''), "Messsage \"{0}\" is visible.".format(message) ).fulfill()
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if log.level <= logging.DEBUG: log.debug('Event data that caused an exception: {0}'.format( self.event_queue))
assert_raises(ValueError, load_svmlight_file, datafile, n_features=20)
cauth = EmbargoedState(embargoed_countries='US, AQ') cauth.save() currently_blocked = EmbargoedState.current().embargoed_countries_list
import yaml import json
return _check_range_and_return('rotation change', label, -4, 4)
if len(new_retains) < fake_retain[retainable]: new_retains.add(fake_file_list[0]) retained_files |= new_retains
regr = linear_model.LinearRegression()
block_structure.request_xblock_fields('graded', 'format', 'display_name', 'category')
outline_response = self.client.get(link.get("href"), {}, HTTP_ACCEPT='text/html') self.assertEqual(outline_response.status_code, 200)
try: import zmq
CourseEnrollmentFactory(user=self.student, course_id=self.course_id)
return 'Software definition {0} not found'.format(name)
assert_array_equal(lfw_people.target, [2, 0, 1, 0, 2, 0, 2, 1, 1, 2])
VERIFY_STUDENT = AUTH_TOKENS.get("VERIFY_STUDENT", VERIFY_STUDENT)
"shareable_fields": [ 'username', 'profile_image', 'country', 'time_zone', 'language_proficiencies', 'bio', 'account_privacy', 'accomplishments_shared', ],
X_composite = mlp_composite.get_input_space().make_theano_batch() X_first_part = mlp_first_part.get_input_space().make_theano_batch() X_second_part = mlp_second_part.get_input_space().make_theano_batch()
X = [[1, 1, 0], [1, 1, 0], [1, 0, 0]] tr = TfidfTransformer(smooth_idf=False, norm='l2')
if bootstrap_features: features = random_state.randint(0, n_features, max_features) else: features = sample_without_replacement(n_features, max_features, random_state=random_state)
if predicate: self.assertIn(member, container) else: self.assertNotIn(member, container)
if __opts__.get('requests_lib', False): from requests.exceptions import HTTPError else: from urllib2 import HTTPError
X, y = iris.data, iris.target y[y == 2] = 1
#if not sig_valid:
from salt.states import blockdev import salt.utils
self.launch_uri = self.uri + 'wrong_lti_endpoint' response = requests.post(self.launch_uri, data=self.payload) self.assertIn('Invalid request URL', response.content)
if __opts__['test']: ret['result'] = None return ret
asset_filename = subs_filename(subs_id, lang) if not filename else filename return Transcript.get_asset(location, asset_filename)
from mpl_toolkits.mplot3d import Axes3D Axes3D
if 'COMMAND' in chunks[1]:
return subnet
from __future__ import absolute_import import logging
self.connect_pub()
self.cpush = True
layers = [self.visible_layer] + self.hidden_layers
self.assertEqual(len(mail.outbox), 1)
raise ValueError("Invalid value for train_size: %r" % train_size)
self.assertTrue(self.cohort_management_page.is_category_selected())
simplefilter('ignore')
from __future__ import absolute_import import os import os.path import time import logging import pprint import base64 import salt.cache import salt.config as config import salt.utils.cloud from salt.exceptions import SaltCloudSystemExit
self.assert_grade(problem, "Other String", "incorrect")
try: import redis HAS_REDIS = True except ImportError: HAS_REDIS = False
assert_true(np.any(y_pred3 != y7))
pass
return self.q(css='.active .bookmark-icon').visible
self.profile.gender = "unknown" with self.assertRaises(IntegrityError): self.profile.save() self.assert_no_events_were_emitted()
if raise_error is not None: raise raise_error
X, y = make_blobs(n_samples=80, centers=4) brc = Birch(threshold=0.5, n_clusters=None) brc.fit(X) check_threshold(brc, 0.5)
self.attempt_login(200) user.is_active = False
ret = { 'name': name, 'changes': {}, 'result': False, 'comment': '', }
update_locale = salt.utils.which('update-locale') if update_locale is None: raise CommandExecutionError( 'Cannot set locale: "update-locale" was not found.')
if tolerates is None: return cls.default() else: return tolerates
choice = random.SystemRandom().choice return ''.join([choice(chars) for _i in range(length)])
dummy_course = CourseFactory.create() GeneratedCertificateFactory.create( user=self.user, course_id=dummy_course.id, status=CertificateStatuses.generating, mode='honor' )
assert_array_almost_equal(lr1.coef_, lr2.coef_) msg = "Arrays are not almost equal to 6 decimals" assert_raise_message(AssertionError, msg, assert_array_almost_equal, lr1.coef_, lr3.coef_)
iris = load_iris() perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
assert_equals(out.count("But it is "), 1)
assert_raises(ValueError, svm.SVC(C=-1).fit, X, Y)
'master_port': int,
response_element.set("answer", str(answer))
pass
#html_show_sourcelink = True
assign_default_role(course_key, user_who_created_course)
'EMBARGO': False,
__virtualname__ = 'esxi'
self.assert_query_params_equal(httpretty.last_request(), expected_params)
if not properties: properties = {}
X = X_digits_binary[:100] y = y_digits_binary[:100]
return self.__dict__
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, call, patch from salttesting.helpers import ensure_in_syspath
(self.gx, self.gy) = [int(x) - 15 for x in m.groups()]
log.error('Running \'git --version\' returned no stdout') __context__[contextkey] = 'unknown'
win_ntp.__salt__ = {}
return [self.create_student('robot%d' % i) for i in xrange(num_students)]
re.compile(r'^Schedule & Details Settings \|'): [ "jquery", "js/base", "js/models/course", "js/models/settings/course_details", "js/views/settings/main"],
import logging
h5file, node = self.init_hdf5(h_file_n, ([sizes[which_set], image_size], [sizes[which_set], 1]), title="SVHN Dataset", y_dtype='int')
for row in unicodecsv.DictReader(csv_file): if row.get('Username') == username: self.assertEqual(row[column_header], expected_cell_content)
return frozenset(child.display_name for child in self.library_fixture.children)
sites.models.SITE_CACHE.clear()
go_to_section("data_download")
self.check_event_response_by_key('endorse_resource', resource, test_case['key'], test_case['val'])
account_settings.switch_account_settings_tabs('accounts-tab')
__func_alias__ = { 'set_': 'set' }
self.url = reverse('instructor_dashboard', kwargs={'course_id': self.course.id.to_deprecated_string()})
import salt.ext.six as six
for student in students[2:5]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.error, mode='honor', grade=default_grade )
response = self.post_with_bearer_token('/oauth2-test/', token=self.refresh_token.token) self.check_error_codes( response, status_code=status.HTTP_401_UNAUTHORIZED, error_code=authentication.OAUTH2_TOKEN_ERROR_NONEXISTENT )
self.course_info_page.visit() self.tab_nav.go_to_tab('Test Static Tab') self.assertTrue(self.tab_nav.is_on_tab('Test Static Tab'))
if 'course_id' in data and data['course_id'] is None:
return descriptor.location.library_key
[arrayfuncs.cholesky_delete(L[:n_active, :n_active], ii) for ii in idx]
self.assertCoursesEqual(source_library1_key, source_library2_key)
response = self.client.get(reverse('branding.views.courses')) self.assertEqual(response.status_code, 200)
subject = "Re-verification Status" mock_send_email.assert_called_once_with(self.user.id, subject, ANY)
@patch.object(OrderItem, 'purchased_callback') @patch.object(OrderItem, 'pdf_receipt_display_name')
if existing_vhost == '' and perms == ['', '', '']: continue perm_need_change = True
import salt.utils import salt.utils.locales import salt.utils.cloud import salt.ext.six
__, __, re_course = self.load_test_import_course(target_id=course.id, module_store=module_store)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self.q(css="button.js-reset").click()
distances = paired_distances(X[connectivity.row], X[connectivity.col], metric=affinity)
systemd.__salt__ = {} systemd.__context__ = {}
return self.descriptor.runtime.modulestore.get_course(self.course_id)
from __future__ import unicode_literals
for key in locations: self.assertFalse(self._has_changes(locations[key]))
course_key = CourseKeyField(max_length=255, db_index=True)
remote_rev = None remote_rev_type = None
course.set_grading_policy(course.grading_policy) grade_summary = course.grader.grade(totaled_scores, generate_random_scores=settings.GENERATE_PROFILE_SCORES)
resp = self.client.get('/course/bad/course/key/entrance_exam') self.assertEqual(resp.status_code, 400)
DonationConfiguration(enabled=True).save()
X = X * self._idf_diag
overview = CourseOverview.get_from_id(course.id) self.assertFalse(hasattr(overview, 'image_set'))
from __future__ import absolute_import, print_function import os import sys import time import logging import threading import traceback from random import randint
X = g.sample(n_samples=100) g = self.model(n_components=self.n_components, covariance_type=self.covariance_type, random_state=rng, min_covar=1e-1, n_iter=1, init_params=params) g.fit(X)
from __future__ import absolute_import try: import pwd HAS_PWD = True except ImportError: HAS_PWD = False import copy import logging
return Response({'handouts_html': None})
path = os.path.realpath(os.path.expanduser(path))
return self._hidden_activation(inputs)
for item in stat: stat[item] = 0 r_time = s_time
skip_if_no_sklearn() mapping = {'dataset_iterator': 'StratifiedDatasetValidationShuffleSplit'} test_yaml = test_yaml_dataset_iterator % mapping trainer = yaml_parse.load(test_yaml) trainer.main_loop()
pushed = data.setdefault('Layers', {}).setdefault( 'Pushed', []) pushed.append(item['id'])
if __opts__['test']: ret['result'] = None ret['comment'] = 'Service {0} set to be enabled'.format(name) return ret
ddm = get_rnd_design_matrix() folds = ddm.split_dataset_nfolds(10) assert folds[0].shape[0] == np.ceil(ddm.get_num_examples() / 10)
return numpy.clip(X * 2. - 1., -1., 1.)
clean_me = search.findPackages(None, destructive=destructive, package_names=package_names, time_limit=time_limit, exclude=exclude, pkgdir=search.pkgdir)
def __init__(self, estimator): raise RuntimeError("sklearn not available.")
distinct_value_indices = np.where(np.logical_not(isclose( np.diff(y_score), 0)))[0] threshold_idxs = np.r_[distinct_value_indices, y_true.size - 1]
def fit(self, X, y): return self
master_profile.setdefault('preseed_minion_keys', {}) master_profile['preseed_minion_keys'].update({name: pub})
clf_sigmoid = CalibratedClassifierCV(clf, cv=2, method='sigmoid') clf_sigmoid.fit(X_train, y_train, sw_train) prob_pos_sigmoid = clf_sigmoid.predict_proba(X_test)[:, 1]
public_vertical = get_and_verify_publish_state('vertical', self.PUBLISHED_VERTICAL, True)
course = modulestore().get_course(course_key) if course is None: return HttpResponse(status=400)
yield (check_non_transformer_estimators_n_iter, name, estimator, 'Multi' in name)
}
from salttesting import TestCase from salttesting.mock import MagicMock, patch from salttesting.helpers import ensure_in_syspath, TestsLoggingHandler from salt.exceptions import CommandExecutionError
token = self.auth.mk_token(creds) if 'token' not in token: raise cherrypy.HTTPError(401, 'Could not authenticate using provided credentials')
if os.path.isfile(cache_file): os.remove(cache_file)
CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52 CSRF_COOKIE_SECURE = False
from __future__ import absolute_import from __future__ import generators import os import re import sys import glob import time import codecs import logging from copy import deepcopy import types
reg = svm.SVR(kernel='rbf', gamma=1).fit(X, y)
micro_measure = metric(y_true, y_pred, average="micro") assert_almost_equal(micro_measure, metric(y_true_binarize.ravel(), y_pred_binarize.ravel()))
MAX_ATTEMPTS = 30 for i in range(MAX_ATTEMPTS): if not exists(table_name, region, key, keyid, profile): return True else:
sh("i18n_tool transifex push")
super(ContentStoreToyCourseTest, self).setUp() self.staff_usr = AdminFactory.create() self.non_staff_usr = UserFactory.create() self.client = Client()
self.assertFalse(utils.ancestor_has_staff_lock(self.orphan))
grid_search.scoring = 'sklearn' assert_raises(ValueError, grid_search.fit, X, y)
self.assertFalse(UserPreference.objects.filter(user=user, key=NOTIFICATION_PREF_KEY)) request = self.request_factory.get("dummy") request.user = AnonymousUser()
self.dummy_leaf_ = _CFNode(threshold, branching_factor, is_leaf=True, n_features=n_features) self.dummy_leaf_.next_leaf_ = self.root_ self.root_.prev_leaf_ = self.dummy_leaf_
ret = _get_namespaces(apiserver_url, namespace) return ret
url = reverse('verify_student_verify_now', kwargs=course_kwargs)
for dummy in range(6): BadgeAssertionFactory.create()
CourseUpdateDesc = namedtuple("CourseUpdateDesc", ['date', 'content'])
from salt.version import __version_info__ return {'saltversioninfo': list(__version_info__)}
generate_certificates_for_students( request, params["course_key"], student_set="specific_student", specific_student_id=params["user"].id ) return HttpResponse(200)
if not name: raise ValueError(u"{key} must contain at least one underscore".format(key=key))
url( r'^courses/{course_key}/xblock/{usage_key}/view/(?P<view_name>[^/]*)$'.format( course_key=settings.COURSE_ID_PATTERN, usage_key=settings.USAGE_ID_PATTERN, ), 'courseware.module_render.xblock_view', name='xblock_view', ),
self.outline.visit() subsection = self.outline.section(section_name).subsection(subsection_name) return subsection.expand_subsection().unit(unit_name).go_to()
'ext_job_cache': str,
return Fragment(self.FRAG_CONTENT)
from __future__ import absolute_import
x_squared_norms = row_norms(X, squared=True)
self.assertEqual(initially_enrolled, CourseEnrollment.is_enrolled(self.user, course_id))
from defusedxml.lxml import parse, fromstring, XML
self.dbs[db].remove()
return Fragment(self.get_html())
self.check_val('true', True)
with salt.utils.fopen(jid_file, 'w+b') as fn_: fn_.write(serial.dumps(jid_dict))
resp = self.client.get_json(course_update_url) payload = json.loads(resp.content) self.assertTrue(len(payload) == 1)
self.affinity_matrix_ = 0.5 * (self.affinity_matrix_ + self.affinity_matrix_.T) return self.affinity_matrix_
raise NotImplementedError
filePaths = [k['Key'] for k in data] ret[bucket] += [k for k in filePaths if not k.endswith('/')]
out = StringIO() assert_raises(IndexError, export_graphviz, clf, out, class_names=[])
from salt.modules import postgres
STATIC_URL = '/static/' STATIC_ROOT = ENV_ROOT / "staticfiles"
self.store.delete_item( self.icrv.location, ModuleStoreEnum.UserID.test, revision=ModuleStoreEnum.RevisionOption.published_only ) self._update_partitions()
span_element = rendered_html.find('span') self.assertEqual(span_element.text, 'Test text')
start_time = time.time() yield execution_time = time.time() - start_time LOGGER.info(u"Execution time: {time} seconds".format(time=execution_time))
def has_permission(self, request, view): if request.user.is_staff: return True return super(IsUserInUrlOrStaff, self).has_permission(request, view)
ret = ava.union(ena)
import salt.utils from salt.ext.six import string_types
from __future__ import unicode_literals
update_course_in_cache.apply_async([unicode(course_key)], countdown=0)
'exclude_paths': get_config_value('exclude_paths', ()),
assert_true(score_auc < 1.0) assert_true(score_accuracy < 1.0) assert_not_equal(score_auc, score_accuracy)
self.clients.setsockopt(zmq.IPV4ONLY, 0)
self.bulk.insert_course_index(self.course_key, self.index_entry) self.assertConnCalls(call.insert_course_index(self.index_entry, self.course_key)) self.assertCacheNotCleared()
os.umask(0o777)
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
alternate_course = self.create_course( org=md5(self.course.org).hexdigest() )
response = self._submit_photos(self.course_key, self.reverification_location, self.IMAGE_DATA) self.assertEquals(response.status_code, 400)
linklocal_network = IPv6Network('fe80::/10') return self in linklocal_network
X, _, X_offset, _, X_scale = _preprocess_data(X, y, fit_intercept, normalize=normalize) return X, y, X_offset, y, X_scale
mode, is_active = CourseEnrollment.enrollment_mode_for_user(self.user, self.course_key) self.assertTrue(is_active) self.assertEqual(mode, 'verified')
return not re.search(r'manufacturer|to be filled|available|asset|^no(ne|t)', val, flags=re.IGNORECASE)
container = self.go_to_nested_container_page() self.modify_display_name_and_verify(container)
cov = ShrunkCovariance() cov.fit(X) assert_array_almost_equal( shrunk_covariance(empirical_covariance(X)), cov.covariance_, 4)
func = getattr(block.__class__, handler_name, None) if not func: raise ValueError("{!r} is not a function name".format(handler_name))
index = 0 params = kernel.get_params() for hyperparameter in kernel.hyperparameters: if hyperparameter.bounds is "fixed": continue size = hyperparameter.n_elements
self.assertEqual(problem.context['expect'], '42')
for i in permissions.split(','): perm = i.strip()
if y.ndim > 2 or (y.dtype == object and len(y) and not isinstance(y.flat[0], string_types)):
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(boston.data, boston.target, random_state=rng)
notification_selector = '.auto_enroll_csv .results .message-%s' % section_type self.wait_for_element_presence(notification_selector, "%s Notification" % section_type.title()) return self.q(css=notification_selector).is_present()
raise NotImplementedError()
__virtualname__ = 'sysctl'
self.assertTrue('Activate Course Enrollment' in response.content)
request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO['username'])
f = plt.figure(figsize=(7, 5)) for index, image_index in enumerate(uncertainty_index): image = images[image_index]
self.assertEqual( self.run_function('shadow.get_login_failed_count', [TEST_USER]), '0')
num_braces = 0
__, __ = self.log_in_as_instructor()
with ignore_warnings(): estimator = Estimator()
from __future__ import absolute_import import logging import os import re
cert.set_version(kwargs['version'] - 1)
get_storage_container = show_storage_container
import salt.utils.extmods
region[np.logical_and(firstring, righthalf)] = 2 region[np.logical_and(secondring, np.logical_not(righthalf))] = 2
kf = cval.KFold(300, 3, shuffle=True, random_state=0) ind = np.arange(300)
from salt.states import rabbitmq_cluster
with patch('capa.capa_problem.LoncapaProblem.supports_rescoring') as mock_supports_rescoring: mock_supports_rescoring.return_value = False with self.assertRaises(NotImplementedError): module.rescore_problem()
store.save_asset_metadata_list(md_list, ModuleStoreEnum.UserID.test)
if request is not None and hasattr(request, 'META') and header_name in request.META: return request.META[header_name] else: return default
ovr = OneVsRestClassifier(DecisionTreeClassifier()) ovr.fit(iris.data, iris.target) assert_raises(AttributeError, lambda x: ovr.coef_, None)
get_service_certificate = show_service_certificate
with mock_create_refund(status=200, response=[]): self.send_signal() self.assertFalse(mock_send_notification.called)
from __future__ import absolute_import
cputime_percent = (1.0e-7 * cputime / host_cpus) / vcpus
in_block = False
self.assertTrue( self.run_function( 'runtests_decorators.booldependsTrue' ) )
self.assertEqual( self.safe_cookie_data._compute_digest(self.user_id), self.safe_cookie_data._compute_digest(self.user_id), )
def downward_state(self, state): return state def downward_message(self, state): return state
for staged_proba in clf.staged_predict_proba(X_test): assert_equal(y_test.shape[0], staged_proba.shape[0]) assert_equal(2, staged_proba.shape[1])
course_key = CourseKey.from_string(course_id) course = modulestore().get_course(course_key)
attempt.status = "submitted" attempt.deny(DENY_ERROR_MSG) attempt.status = "submitted" attempt.approve()
from salt.modules import win_autoruns
FEATURES['ENABLE_CONTENT_LIBRARIES'] = True
salt '*' vsphere.update_date_time my.esxi.host root bad-password
'sls_list': list,
single = salt.client.ssh.Single( __opts__, cmd, fsclient=__context__['fileclient'], minion_opts=__salt__.minion_opts, **st_kwargs)
return reverse( self.namespaced_url, kwargs={ 'course_id': self.course.id, 'username': username } )
return ret
world.css_click(css_selector='.chapter', index=1) subsection_css = 'a[href*="Test_Subsection_2/"]'
cohort_name = 'I AM A RANDOM COHORT' data = {'name': cohort_name, 'assignment_type': CourseCohort.RANDOM} response_dict = self.put_handler(self.course, data=data)
self._verify_unit_warning( self.UnitState(is_released=False, publish_state=self.PublishState.PUBLISHED, is_locked=False), None )
import salt.utils
for update in wua_search_result.Updates: if update.IsDownloaded: log.debug(u'To be installed: {0}'.format(update.Title)) wua_install_list.Add(update)
old = list_pkgs(saltenv=saltenv)
from __future__ import absolute_import
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] h1_state = layer_to_state[h1] h2_state = layer_to_state[h2]
self.assertFalse(self._is_location_published(self.problem_usage_key))
X = np.asarray(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
user.is_staff = True
w = clf.coef_[0] a = -w[0] / w[1] xx = np.linspace(-5, 5) yy = a * xx - (clf.intercept_[0]) / w[1]
if not request.user.is_authenticated(): return redirect(reverse('signin_user'), next=request.path)
self.update_state( course_key=course_key, new_state=self.State.SUCCEEDED, )
from __future__ import unicode_literals
self.instructor = AdminFactory.create() self.client.login(username=self.instructor.username, password="test")
result = data.get_course_enrollment(self.user.username, unicode(self.course.id)) self.assertIsNone(result)
self._pydsl_render_stack = []
HAS_GRP = False
response = self._regenerate( course_key=self.CERT_COURSE_KEY, username=self.STUDENT_USERNAME ) self.assertEqual(response.status_code, 200)
if out['result'] is None: ret['result'] = False ret['comment'] = out['comment'] return ret
if vm_['profile'] and config.is_profile_configured( __opts__, __active_provider_name__ or 'dimensiondata', vm_['profile']) is False: return False
from salt.states import ini_manage
sections_list = [] for chapter in self.get_progress_summary(): sections_list.extend(chapter['sections'])
self.clear._send_pub = lambda payload: True
random = np.random.RandomState(seed=0) E = random.normal(size=(len(X), 2200))
if not GlobalStatusMessage.current().enabled: return None
from salt.utils.yamldumper import OrderedDumper
time_last_reset = history[0].time_set
raise NotImplementedError('partial sum')
courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(len(courses_list), 1)
from django.core.wsgi import get_wsgi_application
if email_students: send_beta_role_email(action, user, email_params) if auto_enroll: if not CourseEnrollment.is_enrolled(user, course_id): CourseEnrollment.enroll(user, course_id)
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 5)
new_f.func_name = f.func_name return new_f
if isinstance(instances, str) or isinstance(instances, six.text_type): instances = [instances] conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)
self.case_sensitive = False
salt '*' vsphere.get_firewall_status my.esxi.host root bad-password
_MIXED_MODULESTORE = None
mock_plugin = Mock() mock_plugin.type = tab_type mock_plugin.priority = priority return mock_plugin
from ...search_indexes import CourseTeamIndexer
self.course.visible_to_staff_only = True self.store.update_item(self.course, self.user.id)
self.assertEqual(len(paths[milestone_key]), 0)
if settings.ROOT_URLCONF != 'lms.urls': raise unittest.SkipTest('Test only valid in lms')
Ensure mylc exists: boto_lc.present: - name: mylc - image_id: ami-0b9c9f62 - profile: myprofile
log = logging.getLogger(__name__)
config = cls.current() if not config.enabled: return False return block_type in config.disabled_blocks.split()
super(TestLibraryAccess, self).setUp() self.non_staff_user, self.non_staff_user_password = self.create_non_staff_user()
out.insert(0, head) (head, tail) = os.path.split(head)
return xmlstore.get_item(usage_key, for_parent=for_parent)
valid_input['course_modules'] = None
self.assertFalse(self.page.intro_video_element.visible)
assert_true((ovr_clf.predict(iris.data) == cs_clf.predict(iris.data)).mean() > .9)
from __future__ import absolute_import
dtype_orig = None
return self.map.get(key, default)
for course in self.list_courses(): if course['org'] == org and course['number'] == number and course['run'] == run: return True return False
if directory is None and action != 'selfupdate': raise SaltInvocationError( 'The \'directory\' argument is required for composer.{0}'.format(action) )
if 'sysctl.default_config' in __salt__: config = __salt__['sysctl.default_config']() else: config = '/etc/sysctl.conf'
from __future__ import unicode_literals
course = self.store.get_course(self.course.id, depth=None)
response = JsonResponse(payment_data)
w = rng.randn(num_features)
from __future__ import unicode_literals
for mode in test_modes: key = 'Mode: {0}'.format(mode)
os.unlink(output_file)
@ignore_warnings(category=DeprecationWarning) def test_aic(): n_samples, n_dim, n_components = 50, 3, 2 X = rng.randn(n_samples, n_dim)
task_definition = task_folder.GetTask(name).Definition
answer_given = submission[0]
return course_id in [ item.course_id for item in order.orderitem_set.all().select_subclasses("courseregcodeitem") if isinstance(item, cls) ]
if '-N' not in cmd and '--forward' not in cmd: cmd.append('--forward')
pass
self.wait_for_element_visibility('div.problem section.inputtype div .status', 'wait for status icon')
self.wait_for_certificate_delete_button() self.find_css('.actions .delete.action-icon').first.click()
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
import salt.utils import salt.utils.pagerduty from salt.ext.six import string_types
self.assertEqual(response.status_code, 400)
import integration from salt.utils import event
time_format = _get_date_time_format(time) dt_obj = datetime.strptime(time, time_format)
if self.poll_answers is None: self.poll_answers = {}
if self.structure: ordered_blocks = OrderedDict() self._traverse_tree(self.structure['root'], self.structure['blocks'], ordered_blocks) return ordered_blocks
system = self.get_system() descriptor = system.process_xml(xml_str_in)
def __init__(self, method, detail=None): if isinstance(detail, dict): self.detail = detail else: super(MethodNotAllowed, self).__init__(method, detail)
try: import ssl HAS_SSL = True
DELAY = 0.5
pass
if isinstance(address, int): self.network_address = IPv6Address(address) self._prefixlen = self._max_prefixlen self.netmask = IPv6Address(self._ALL_ONES) return
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
for url_name, url_path in header_urls.iteritems(): header_urls[url_name] = request.build_absolute_uri(url_path)
assert_array_almost_equal(K.flat[::6], np.ones(5))
node = mock.Mock(due=1, extended_due=2) self.assertEqual(self.call_fut(node), 2)
if unsafely: exec_fn = codejail_not_safe_exec else: exec_fn = codejail_safe_exec
if updated_user.password != old_password_hash: entry = PasswordHistory() entry.create(updated_user)
import os import re import logging
store = self._get_modulestore_for_courselike(usage_key.course_key) return store.get_item(usage_key, depth, **kwargs)
return self.q(css='.conditional-wrapper').visible
copy_cov = False cov = np.dot(dictionary, X.T)
envs = __opts__.get('azurefs_envs', []) for env in envs: storage_conn = azure.get_storage_conn(opts=envs[env]) result = azure.list_blobs( storage_conn=storage_conn, container=env, )
if self._annotation is not _empty: formatted = '{0}:{1}'.format(formatted, formatannotation(self._annotation))
data_specs = (IndexSpace(max_labels=10, dim=1), 'targets') it = self.test.iterator(mode='sequential', data_specs=data_specs, batch_size=100) for y in it: pass
with self.assertRaises(ValidationError): SurveyForm.create('badform', '<input name="oops" /><<<>')
try: self.proc_run(msg) except Exception as exc: log.error( 'Exception caught by jobber: {0}'.format(exc), exc_info=True)
self._enroll_students_in_course(self.course.id, extra_count) return {}
import salt.utils
self.q(css=self.NOTE_SELECTOR).first.click() return self
import msgpack if msgpack.loads(msgpack.dumps([1, 2, 3]), use_list=True) is None: raise ImportError
X2 = np.ones(17) kf = KFold(3) check_cv_coverage(kf, X2, y=None, labels=None, expected_n_iter=3)
def __unicode__(self): return u'SystemUser'
return
import_logs = CourseImportLog.objects.all() import_logs.delete()
firewalld.__grains__ = {} firewalld.__salt__ = {} firewalld.__context__ = {} firewalld.__opts__ = {}
beta1 = sqrt_inner_product(bs)
- cn=admin,dc=example,dc=com: - delete_others: True - replace: cn: - admin description: - LDAP administrator objectClass: - simpleSecurityObject - organizationalRole userPassword: - {{pillar.ldap_admin_password}}
manager = vb_get_manager() machines = manager.getArray(vb_get_box(), "machines") return [ vb_xpcom_to_attribute_dict(machine, "IMachine", **kwargs) for machine in machines ]
return self.client.patch( self.url, json.dumps(request_data), content_type="application/merge-patch+json" )
for addr in salt.utils.network.ip_addrs(): addr = ipaddress.ip_address(addr) if addr.is_loopback: continue possible_ids.append(str(addr))
pass
return True
problem = "<problem>" for problem_type in args: problem += "<{problem_type}></{problem_type}>".format(problem_type=problem_type) problem += "</problem>" return problem
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.nfac = nfac
try: import psycopg2 HAS_POSTGRES = True except ImportError: HAS_POSTGRES = False
return CourseLocator(org, course, run, deprecated=True)
return self.q(css=self.xblock_component_selector)
self.send_response(200) self.send_header('Content-type', 'application/json') self.end_headers() self.wfile.write(response)
from __future__ import absolute_import, print_function import optparse import pprint import time import os
self.assertContains(self.client.delete(course_update_url + '19'), "delete", status_code=400)
log.warning( "Could not retrieve information from VAL for Bumper edx Video ID: %s.", video.bumper['edx_video_id'] ) return []
FEATURES['ENABLE_FINANCIAL_ASSISTANCE_FORM'] = True
course_url = '/home/' resp = self.client.get_html(course_url) self.assertEquals(resp.status_code, 200)
if partition_id not in user_groups: return False
actual_enabled = certs_api.cert_generation_enabled(self.course.id) self.assertEqual(is_enabled, actual_enabled)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
ret['comment'] = 'Event module not available. Schedule enable job failed.'
from salt.modules import smf
pass
nodes = query('get', 'nodes')
EDXNOTES_STUB_URL = os.environ.get('edxnotes_url', 'http://localhost:8042')
from . import core from . import worker from . import maint from . import reactor from . import zero from . import jobber from . import dummy
init = getattr(cls.__init__, 'deprecated_original', cls.__init__) if init is object.__init__: return []
previous_count = len(selected) block_keys = LibraryContentModule.make_selection(selected, library_children, max_count, mode) selected = block_keys['selected']
flops = kerns[1] * kerns[2] * 2 #nb flops by output image flops *= out[1] * out[2] flops *= images[0] * kerns[3] * images[3] return flops
import salt.config as config import salt.utils.cloud from salt.exceptions import SaltCloudSystemExit, SaltCloudException
proc.start()
cmd = '{0} {1}'.format(cmd, ' '.join(dataset))
import matplotlib.pyplot as plt
LogoutPage(self.browser).visit() self._login_as_a_verified_user() self.courseware_page.visit()
from __future__ import unicode_literals
from __future__ import print_function from __future__ import absolute_import import os import sys import logging from salt.ext.six.moves import input
service = MockServices() if self.flag == 1: service.id = 'asd' return [service] elif self.flag == 2: service.id = service_id return service return [service]
HTTPServer.shutdown(self)
multi_db = True
self.upload_asset(handout_filename)
scaling = 0.3 selection_threshold = 0.5
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, done=True) self.assertFalse(module.should_show_save_button())
return super(PaymentFakeView, self).dispatch(*args, **kwargs)
if not __opts__['test'] and len(ret['changes']) > 0: ret['result'] = _write_config(config)
y = np.zeros((10, 3)) y[5:, 0] = 1 y[:, 1] = 1 y[:, 2] = 1
if rerandomize in [RANDOMIZATION.NEVER, 'false', RANDOMIZATION.PER_STUDENT]: self.assertEqual(seed, _reset_and_get_seed(module))
raise exc
SYNDIC_CONNECT_TIMEOUT = 5 SYNDIC_EVENT_TIMEOUT = 5
self.cohort_management_page.select_cohort(cohort_name) self.assertEquals(self.cohort_management_page.get_selected_cohort(), cohort_name) self.assertIn(expected_description, self.cohort_management_page.get_cohort_group_setup())
self.W = sharedX(W, name='W') self.v = sharedX(v, name='v') self.mean = sharedX(mean, name='mean')
return spanify(render_expression(left))
show_min_grade_warning = False if course_module.minimum_grade_credit > 0 else True settings_context.update( { 'is_credit_course': True, 'credit_requirements': paired_requirements, 'show_min_grade_warning': show_min_grade_warning, } )
plt.scatter(X_test[:, 0], X_test[:, 1], s=80, facecolors='none', zorder=10)
([]),
import logging log = logging.getLogger(__name__)
distribution['no_data'] = profiles.filter( **{feature: None} ).count()
context['courses_list'] = microsite.get_template_path('courses_list.html')
OAuth2AuthenticationAllowInactiveUser, SessionAuthenticationAllowInactiveUser,
return self.q(css='.wrapper-last-draft').first.text[0]
return CourseEmailTemplate._render(self.plain_template, plaintext, context)
if not self.user_can_access_course(user, course): raise Http404
_y = np.vstack((y, np.array(y) * 2)).T clf = ForestClassifier(random_state=0).fit(X, _y)
self.courseware.go_to_sequential_position(position) self.video.wait_for_video_player_render()
content = 'outside <strong>inside</strong> after' payload = get_response(content, 'June 22, 2000') self.assertHTMLEqual(content, payload['content'], "text outside tag")
Z = Z.reshape(xx.shape) ax.contourf(xx, yy, Z, cmap=cm, alpha=.8)
from __future__ import absolute_import
exists = conn.describe_stacks(name) log.debug('Stack {0} exists.'.format(name)) return True
assert_array_almost_equal(theil_sen.coef_, lstq.coef_, 9)
return self._cds.local_modules[usage_id].scope_ids.def_id
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
mode = __salt__['config.manage_mode'](mode)
import logging
if wait_to_finish: salt.utils.cloud.run_func_until_ret_arg(fun=describe_volumes, kwargs={'volume_id': volume_id}, fun_call=call, argument_being_watched='status', required_argument_response='available')
self.assertEqual(config.get_text('.action-primary'), "Create") self.assertFalse(config.delete_button_is_present) config.save()
PARENTAL_CONSENT_AGE_LIMIT = 13
course_enrollment.mode = u'verified' course_enrollment.save() self.assertEqual(course_enrollment.mode, u'verified')
rng = np.random.RandomState(0) x = rng.randint(10, size=(10, 5)) weights = np.ones(x.shape)
ransac_estimator0.fit(X, y) assert_warns(DeprecationWarning, ransac_estimator2.fit, X, y) assert_array_almost_equal(ransac_estimator0.predict(X), ransac_estimator2.predict(X))
if self.algorithm in _STOCHASTIC_ALGOS: self._fit_stochastic(X, y, activations, deltas, coef_grads, intercept_grads, layer_units, incremental)
if type == 'source': return ret
ret.update({host_name: {'Disks Added': 'No new VSAN-eligible disks were found to add.'}})
data, vm_ = request_instance(vm_)
unique_together = ('username', 'course', 'provider') get_latest_by = 'created'
return self.q(css="{} .action-close".format(self.TAB_SELECTOR)).present
task_key = hashlib.md5(task_key_stub).hexdigest()
select_element = page.q(css=selector) self.assertTrue(select_element.is_present()) return [option.text for option in Select(select_element[0]).options]
has_changes = False
raise NotImplementedError
if fnmatch.fnmatch(chunk['__sls__'], req_val): if requisite == 'prereq': chunk['__prereq__'] = True reqs.append(chunk) found = True continue
_base.update(copy.deepcopy(_overrides)) return _base
rho = evals[:, n_components:].sum(1) / evals[:, :n_components].sum(1) eta = np.median(rho)
log.warning( "Error while previewing formula", exc_info=True ) result['error'] = _("Error while rendering preview")
BOK_CHOY_STUB_DIR = REPO_ROOT / "common" / "djangoapps" / "terrain"
self.user.is_active = user_is_active
verify_group_id_not_present(profiled_user=self.student, pass_group_id=False) verify_group_id_not_present(profiled_user=self.moderator, pass_group_id=False)
store_iterator = iter(modulestores) next_modulestore = lambda *args, **kwargs: store_iterator.next()
self.url = 'git+' + self.url
import salt.ext.six as six import salt.utils import salt.client from salt.utils.openstack import nova try: import novaclient.exceptions except ImportError as exc: pass
mode = 'create' group_attr = __salt__['postgres.role_get']( name, return_password=not refresh_password, **db_args) if group_attr is not None: mode = 'update'
log = logging.getLogger(__file__)
break
try: return content and not content['closed'] except KeyError: return False
raise NotImplementedError("%s does not implement definition_from_xml" % cls.__name__)
self.factory(loss="foobar")
course_tab_list += _get_dynamic_tabs(course, user) return course_tab_list
mode = models.CharField(max_length=100, default='', blank=True) image = models.ImageField(upload_to='badge_classes', validators=[validate_badge_image])
node = object() self.assertEqual(self.call_fut(node), None)
return _error(ret, u_check)
solr.__salt__ = {} solr.__opts__ = {}
grain = getattr(filt, '__grain__', 'os_family') if grain not in match_groups: match_groups[grain] = OrderedDict([])
from student.roles import CourseCcxCoachRole, CourseInstructorRole, CourseStaffRole course_locator = course_id
n_min = plots.shape[1] n_min -= int(np.ceil(plots.shape[1] * self.share)) plots = plots[:, n_min:]
'python_bin': None, 'user': 'sandbox',
course.delete() with self.assertNumQueries(1): CountryAccessRule.check_country_access(course_id, 'NZ')
return SlashSeparatedCourseKey(org, course, url_name)
return ( usage_key.block_type in self.block_types or usage_key.block_type in BLOCK_TYPES_WITH_CHILDREN )
return dict(_list_hosts())
emails = list(emails)
response_element = etree.Element("customresponse")
import os import yaml import salt.ext.six as six
PAYLOAD_EXTRA_FIELDS = 'payload_extra_fields'
configured_probes = rpm_probes_config.get('out', {}) if not isinstance(defaults, dict): defaults = {} expected_probes = _expand_probes(probes, defaults)
item = self.get_item(item_location)
try:
try: user = User.objects.get(id=user_id) except ObjectDoesNotExist: return None
random_state = check_random_state(0) p = random_state.rand(n_samples) * (2 * np.pi - 0.55) t = random_state.rand(n_samples) * np.pi
log = logging.getLogger(__name__)
all_item_keys = self._locations_in_subtree(self) newrelic.agent.add_custom_parameter('seq.num_items', len(all_item_keys))
best_optimal_theta = [] best_optimal_rlf_value = [] best_optimal_par = []
params_without_course_id = get_params_from_user_info_call(False) self.assertNotIn("group_id", params_without_course_id)
t3 = TfidfTransformer(use_idf=True) assert_raises(ValueError, t3.transform, counts_train)
X, y = make_classification(n_samples=200, n_features=20, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, flip_y=0.0, class_sep=10, shuffle=False, random_state=0)
DETAILS['url'] = opts['proxy']['url']
url(r'^programs/(?P<program_id>\d+)/[\w\-]*/?$', views.program_details, name='program_details_view'),
return None, phi_a1
if delta_remaining < delta_min: ret['comment'] = 'Certificate will expire in {0}, which is less than {1}'.format(delta_remaining, delta_min) return ret
requests.put( '{}/set_config'.format(COMMENTS_STUB_URL), data=self.get_config_data() )
log = logging.getLogger(__name__)
import salt.client import salt.output import salt.exceptions from salt.utils import print_cli
import os import logging import json
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'linode'
new_block = self.store.get_item(new_block.location)
config = cls.current() if not config.enabled: return () return config.disabled_blocks.split()
my_stdout = my_stdout.replace( my_globals['__doc__'], '')
view_name = None
self.assertEqual(result['success'], 'correct')
def ordered_dict_presenter(dumper, data): return dumper.represent_dict(six.iteritems(data)) yaml.add_representer( OrderedDict, ordered_dict_presenter, Dumper=yaml.dumper.SafeDumper)
return comdat['stderr']
from uuid import uuid4
self.track_selection_page.visit()
ret['comment'] = 'Cluster {0}/{1} is not present, so it cannot ' \ 'be removed'.format(version, name) return ret
return launchctl('load', path, runas=runas)
return self.find_css("#due_date").present
from salt.utils.aggregation import aggregate, Map, Scalar
module_store = modulestore() course_items = import_course_from_xml( module_store, self.user.id, TEST_DATA_DIR, ['toy'], static_content_store=contentstore(), verbose=True ) course = course_items[0] verify_asset_locked_state(False)
return self.q(css='section.about-accomplishments').present
self.course_fixture.create_xblock( parent_vertical.locator, XBlockFixtureDesc(category='poll', display_name="", data=load_data_str('poll_markdown.xml')) ) self.course_outline_page.visit()
if is_entrance_exams_enabled(): graders = [grader for grader in graders if grader.get('type') != u'Entrance Exam'] return graders
self._original_iterator = None self._pre_dispatch_amount = 0
self.logout() self.login(self.instructor_user) self.assertTrue(self.enroll(self.course))
create_account(self.USERNAME, self.PASSWORD, self.EMAIL)
y = 0.5 * X.ravel()
import salt.ext.six as six from Crypto.Cipher import PKCS1_OAEP
return self.get_displayable_field_names() + ['edit_link']
pass
random_state = check_random_state(0) tsne = TSNE(metric="chebyshev") X = random_state.randn(5, 2) tsne.fit_transform(X)
return ''
from __future__ import absolute_import import signal import logging
return self.get_selector('div.certificate-exception-container')
p_shared = sharedX(zv[:,0:rows:pool_rows,0:cols:pool_cols,:]) h_shared = sharedX(zv) z_shared = sharedX(zv)
return self.q(css='.new-library-button').present
self.current_video_display_name = video_display_name
queryset = CourseMode.objects.all()
from salttesting.helpers import ( destructiveTest, requires_network, requires_salt_modules, ensure_in_syspath ) ensure_in_syspath('../../')
cc_thread, context = _get_thread_and_context( request, thread_id, retrieve_kwargs={"user_id": unicode(request.user.id)} ) serializer = ThreadSerializer(cc_thread, context=context) return serializer.data
from salttesting.case import ModuleCase
self.the_input.capa_system.render_template = lambda *args: "<aaa" with self.assertRaises(etree.XMLSyntaxError): self.the_input.get_html()
self.assertTrue(retry.called) (__, kwargs) = retry.call_args exc = kwargs['exc'] self.assertIsInstance(exc, SMTPDataError)
vdata = sum(_SERVICE_TYPES[service] for service in services)
xf.XMODULE_FACTORY_LOCK.enable()
if err is not None: raise FixtureError("Could not create course {0}. Error message: '{1}'".format(self, err))
__virtualname__ = 'reclass'
team_membership = team['membership'] del team['membership']
from __future__ import absolute_import import re
if http_event_collector_debug: log.debug(r.text) log.debug(data)
meta_dict = json.loads(profile.meta) if profile.meta else {} for meta_feature, meta_key in meta_features: student_dict[meta_feature] = meta_dict.get(meta_key)
import yaml import jinja2 import jinja2.exceptions from xml.dom import minidom import salt.ext.six as six
transformer_weights={ 'subject': 0.8, 'body_bow': 0.5, 'body_stats': 1.0, },
super(AdaBoostRegressor, self)._validate_estimator( default=DecisionTreeRegressor(max_depth=3))
x_s = x2[:,offset:offset+size] xWlist.append( W.lmul( x_s.reshape( (n_rows,)+W.col_shape()), T)) offset += size
StudentModuleHistory( id=initial_id, course_key=None, usage_key=None, username="", version="", created=datetime.datetime.now(), ).save()
CREDIT_HELP_LINK_URL = "#"
return cls.read_data_file('{}.key'.format(key_name))
user_list[0].course_groups.add(*cohort_list) assert_events("added", user_list[:1], cohort_list) mock_tracker.reset_mock()
dtype = dtype[0]
if is_order_type_business: email.content_subtype = "html"
from salt.ext import six from salt.ext.six.moves import zip
import logging logging.basicConfig(filename=TEST_ROOT / "log" / "cms_acceptance.log", level=logging.ERROR)
html = self.get_page_html(xblock) self.assertIn(expected_section_tag, html) self.assertRegexpMatches(html, expected_breadcrumbs)
COURSES_WITH_UNSAFE_CODE = []
response_dict = self._get_page_data(response) self.assertEqual(response_dict['contribution_amount'], expected_amount)
for frag in remainder: pats.append(re.escape(frag))
if load['tgt_type'] == 'list': int_payload['topic_lst'] = load['tgt'] pub_sock.send(int_payload)
block_structure.request_xblock_fields('is_proctored_enabled') block_structure.request_xblock_fields('is_practice_exam')
if stdout is None and stderr is None: self.assertFalse(term.isalive())
policy = self.grading_policy policy['GRADE_CUTOFFS'] = value self.grading_policy = policy
return v
css = '.action-close' return self.find_css(css).first.click()
default="images_course_image.jpg"
ret = utils.find_json(test_sample_json) self.assertDictEqual(ret, expected_ret)
clear_data_home(data_home=data_home) assert_false(os.path.exists(data_home))
CONTENT_RE = re.compile(r"(?P<start>\d{1,11})-(?P<stop>\d{1,11})/(?P<end>\d{1,11})")
self.q(css='div.problem button.check').click() self.wait_for_ajax()
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0, noise=10)
self.non_lin_name = "rectifier" self.left_slope = left_slope
user_groups = {} for partition, groups in partition_groups: user_groups[partition.id] = partition.scheme.get_group_for_user( course_key, user, partition, )
self.course_info_page.visit() self.tab_nav.go_to_tab('Course')
from salt.states import boto_elasticache
y_true += [0]*n_classes y_pred += [0]*n_classes
y_true = rng.randint(0, 3, size=10) assert_raise_message(ValueError, "multiclass format is not supported", roc_auc_score, y_true, y_pred)
from salt.modules import ldapmod
from __future__ import unicode_literals
return self.q(css=self.experiment_groups_css).present or self.q(css=".experiment-groups-doc").present
tag_sha = tag_obj.target.hex
__virtualname__ = 'autoruns'
_mixin_prio_ = 100
break
continue
X = np.atleast_2d(np.random.uniform(0, 10.0, size=100)).T X = X.astype(np.float32)
return self.q(css='.prompt.{dialog_type} .message'.format(dialog_type=dialog_type)).text[0]
ret = self.run_function('state.sls', mods='testappend.step-2') self.assertSaltTrueReturn(ret)
test_data = state_run['cmd_|-test_non_failing_state_|-echo "Should not run"_|-run']['comment'] expected_result = 'State was not run because onfail req did not change' self.assertIn(expected_result, test_data)
transformers = BlockStructureTransformers() if user is not None: transformers += COURSE_BLOCK_ACCESS_TRANSFORMERS + [ProctoredExamTransformer()] transformers += [ BlocksAPITransformer( block_counts, student_view_data, depth, nav_depth ) ]
'user': str,
from salttesting import TestCase from salttesting.case import ShellTestCase from salttesting.mixins import CheckShellBinaryNameAndVersionMixIn from salttesting.parser import PNUM, print_header, SaltTestcaseParser from salttesting.helpers import requires_sshd_server from salttesting.helpers import ensure_in_syspath, RedirectStdStreams
if hasattr(self, 'vae'): return self.vae else: return None
ret.update(set( [x for x in _get_sysv_services() if not _sysv_enabled(x)] )) return sorted(ret)
ret = {'name': name, 'result': True, 'changes': {}, 'comment': ''}
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
X = X_2d[:100, :]
return not isinstance(obj, six.string_types) and isinstance(obj, Sequence)
self.assert_register_response_in_pipeline_looks_correct( student_views.register_user(strategy.request), pipeline.get(request)['kwargs'])
return self.q(css=self.BOOKMARKS_BUTTON_SELECTOR).visible
else: return OuterAtomic(using, savepoint, read_committed)
from __future__ import absolute_import
__virtualname__ = 'file'
sh( "diff-cover {xml_report_str} --compare-branch={compare_branch} " "--html-report {diff_html_path}".format( xml_report_str=xml_report_str, compare_branch=compare_branch, diff_html_path=diff_html_path, ) )
try: for link in listdir: path = dirpath + link readlink = os.readlink(path) filenames = []
users = [UserFactory() for _ in range(3)] self._enroll_users(users, self.course.id)
from __future__ import unicode_literals
self.assertNotContains(resp, 'This is a Test Microsite footer')
ddof = 1
old_stdout, old_stderr = sys.stdout, sys.stderr try: sys.stdout = StringIO() sys.stderr = StringIO()
self.store.delete_item(published_xblock.location, self.user_id)
self.create_programs_config(program_listing_enabled=True) response = self.client.get(path=self.view_path) self.assertContains(response, '<li class="tab-nav-item">')
self._samples = samples self._sigma = sigma
kf = cval.KFold(300, 3) check_cv_coverage(kf, expected_n_iter=3, n_samples=300)
if which_set != 'unlabeled': data_y = data['labs_ex'][set_indices] data_y = data_y[ex_range] - 1
self.client.logout()
return " ".join([self.MODAL_SELECTOR, selector])
salt.log.setup.shutdown_multiprocessing_logging()
master_doc = 'index'
FEATURES['ENABLE_PREREQUISITE_COURSES'] = True
self.grading_policy['GRADER'] return self._grading_policy['RAW_GRADER']
from __future__ import absolute_import
@ddt.data(*flatten(CONTAINER_XMODULES))
with self.assertNumQueries(0): RestrictedCourse.is_restricted_course(new_course_id)
return dict([(k, v) for k, v in dic.iteritems() if v is not None])
return True
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
'dark_lang',
nvcc_compiler.add_standard_rpath(cuda_convnet_loc)
import salt.utils as utils import salt.ext.six as six
from salttesting.helpers import ensure_in_syspath, requires_salt_modules from salttesting import skipIf ensure_in_syspath('../../')
self.assert_no_matching_events_were_emitted({'event_type': self.USER_SETTINGS_CHANGED_EVENT_NAME})
train, test = slice(None, None, 2), slice(1, None, 2) probas_pred = clf.fit(X[train], y[train]).predict_proba(X[test])
__context__.pop('pkg.list_pkgs', None) new = list_pkgs() ret = salt.utils.compare_dicts(old, new)
from __future__ import absolute_import import random import string from salt.ext.six.moves import range
import integration
pass
stores = [{'NAME': name, 'ENGINE': 'This space deliberately left blank'} for name in names]
from sklearn.externals.six.moves import cStringIO as StringIO import sys old_stdout = sys.stdout try: sys.stdout = StringIO()
assertion, args = assertion_tuple[0], assertion_tuple[1:] getattr(self, assertion)(*args)
return []
return int(self.get_setting_element(self.COUNT_LABEL).get_attribute('value'))
skip_if_no_sklearn() mapping = {'dataset_iterator': 'DatasetValidationKFold'} test_yaml = test_yaml_dataset_iterator % mapping trainer = yaml_parse.load(test_yaml) trainer.main_loop()
self.wait_for_element_visibility( self._bounded_selector(self.VIEWER_SELECTOR), "Note Viewer is visible." )
pass
DARK_LANGUAGE_KEY = 'dark-lang'
if self.lcp.is_queued(): prev_submit_time = self.lcp.get_recentmost_queuetime()
assert_equal(X.indptr.shape[0], 7) assert_equal(X.shape[0], 6) assert_equal(X.shape[1], 21) assert_equal(y.shape[0], 6)
pass
from __future__ import absolute_import import sys
LOGGER.debug(self._format_msg(format_str, *args))
for i in range(self.n_eigen + self.minibatch_size): self.G[i,i] += self.regularizer
return X[:n_samples], X[n_samples:]
self.prev_floatX = config.floatX config.floatX = 'float64'
import os import re import shutil import logging
self.data = { "access_token": self.access_token, "client_id": self.client_id, }
from salt.utils.odict import OrderedDict from salt.modules import pillar as pillarmod
for student in students_require_certs: task_progress.attempted += 1 status = generate_user_certificates( student, course_id, course=course )
self.assertEqual(self.run_function('xattr.clear', [NO_FILE]), 'ERROR: File not found: {0}'.format(NO_FILE))
student_complex = complex(student_complex) instructor_complex = complex(instructor_complex)
launch_mcd_on_dataset(1000, 5, 450, 0.1, 0.1, 540)
return _LDAPConnection(**connargs).ldap
W[0, 1] = .5 W[0, 2] = 1. W[0, 3] = 2.
with override_settings(CREDIT_PROVIDER_SECRET_KEYS={}): response = self._credit_provider_callback(request_uuid, 'approved', keys={}) self.assertEqual(response.status_code, 403)
'log_datefmt_logfile': str,
estimator = _make_estimators(X_train, y_train, y_ml_train)
y = np.array(g(X) > 0, dtype=int)
connectivity = connectivity + connectivity.T
self.load_extra_content( system, course_descriptor, 'static_tab', self.data_dir / course_dir / 'tabs', course_dir, url_name )
with self.assertRaises(IntegrityError): VerificationCheckpoint.objects.create(course_id=self.course.id, checkpoint_location=self.checkpoint_midterm)
worktree_data = dict([(x, '') for x in tracked_data_points])
kde = grid.best_estimator_
objects = CourseRerunUIStateManager()
return submit_reset_problem_attempts_for_all_students(self.create_task_request(instructor), location)
raise ItemNotFoundError(course_key)
self.create_programs_config(enabled=False) actual = utils.get_programs(self.user) self.assertEqual(actual, [])
import pprint
sysrc.__salt__ = {} sysrc.__opts__ = {}
try: latest = cls.objects.filter(course_key=course_key).latest() except cls.DoesNotExist: return False else: return latest.enabled
self.page.visit() config = self.page.experiment_group_configurations[0] config.toggle() usage = config.usages[0] config.click_unit_anchor()
titles = [] for child in self._xmodule.get_child_descriptors(): titles.extend(child.get_content_titles()) return titles
get_edx_api_data(program_config, self.user, 'programs', cache_key=cache_key) get_edx_api_data(program_config, self.user, 'programs', resource_id=resource_id, cache_key=cache_key)
stable_x = (x.T - x.max(axis=1)).T numer = np.exp(stable_x) return (numer.T / numer.sum(axis=1)).T
__func_alias__ = { 'set_': 'set' }
assert_array_almost_equal(coef_unsorted.toarray(), coef_sorted.toarray()) assert_array_almost_equal(sparse_svc.predict_proba(X_test_unsorted), sparse_svc.predict_proba(X_test))
with mock_create_basket(exception=exceptions.SlumberBaseException): response = self._post_to_view() self.assertValidEcommerceInternalRequestErrorResponse(response) self.assertUserNotEnrolled()
BOK_CHOY_MONGO_DATABASE = "test" BOK_CHOY_CACHE = memcache.Client(['0.0.0.0:11211'], debug=0)
from salt import utils
return ret
assert_raises(TypeError, KFold, n_folds=4, shuffle=None)
continue
os.environ['NO_PREREQ_INSTALL'] = 'true'
response = self.client.get(self.url) self.assertEqual(response.status_code, 200)
return self.status == CertificateStatuses.downloadable
warnings.filterwarnings(
property_spec = vmodl.query.PropertyCollector.PropertySpec( type=obj_type, all=True if not property_list else False, pathSet=property_list )
problem = new_loncapa_problem(xml_str) problem.done = True
apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
for idx, code in enumerate(sorted(final_codes)):
certs_enabled = CertificateGenerationConfiguration.current().enabled if certs_enabled and access['admin']: sections.append(_section_certificates(course))
queue_instances(vm_['instance_id_list'])
export_extra_content( export_fs, self.modulestore, self.courselike_key, xml_centric_courselike_key, 'custom_tag_template', 'custom_tags' )
StudentViewTransformer.collect(block_structure) BlockCountsTransformer.collect(block_structure) BlockDepthTransformer.collect(block_structure) BlockNavigationTransformer.collect(block_structure)
for extension in self.cv_extensions: extension.setup(self.trainers)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.course_outline.visit() self.course_outline.open_subsection_settings_dialog(0) self.course_outline.select_access_tab() self.course_outline.make_gating_prerequisite()
return True
return self.q(css='.bookmarks-empty-header').text[0]
return bool(_OVERRIDES_DISABLED.disabled)
'ipc_mode': str,
real_cov = np.dot(coloring_matrix.T, coloring_matrix) emp_cov = empirical_covariance(X_train) loglik_real = -log_likelihood(emp_cov, linalg.inv(real_cov))
return self.q(css=self._bounded_selector(self.VALIDATION_SELECTOR)).present
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
del DEFAULT_FILE_STORAGE MEDIA_ROOT = "/edx/var/edxapp/uploads"
CertificateGenerationConfiguration.objects.create(enabled=True)
TEST_RUNNER = 'openedx.core.djangolib.nose.NoseTestSuiteRunner'
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(self.INSTANCE_NAME))
suite = BokChoyTestSuite('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string(suite)
from salt.modules import incron
request = get_request_for_user(self.user) answer_entrance_exam_problem(self.course, request, self.problem_1)
buggy = Buggy() buggy.a = 2 assert_raises(RuntimeError, clone, buggy)
else: def _spawn(self): self.pid, self.child_fd, self.child_fde = self.__fork_ptys()
if not __execute_cmd('config -g cfgUserAdmin -o ' 'cfgUserAdminUserName -i {0} {1}' .format(uid, username), host=host, admin_username=admin_username, admin_password=admin_password): delete_user(username, uid) return False
kernel32.CloseHandle(process_info.hProcess)
for item in _CREATE_OPTIONS_REQUIRED[set_type]: if item not in kwargs: return 'Error: {0} is a required argument'.format(item)
from salt.ext.six import exec_ import salt.utils import salt.loader from salt.fileclient import get_file_client from salt.utils.pyobjects import Registry, StateFactory, SaltObject, Map import salt.ext.six as six
except Exception: log.exception("error executing xblock handler") raise
self.init_queries.append("CREATE TABLE inspector_ignored (path CHAR(4096))") self.init_queries.append("CREATE TABLE inspector_allowed (path CHAR(4096))")
'test': bool,
from sklearn.tree._tree import TREE_LEAF X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) k = 4
self.settings_patcher = patch.dict('django.conf.settings.FEATURES', {'MILESTONES_APP': True}) self.settings_patcher.start()
SERVICE_VARIANT = os.environ.get('SERVICE_VARIANT', None)
input_dict = {'1_2_1': '21'} correct_map = problem.grade_answers(input_dict)
StudentViewTransformer.collect(self.block_structure) self.block_structure._collect_requested_xblock_fields()
expiration_date = models.DateField(default=None, null=True, blank=True)
return self.q(css='span.filter-column').visible
location = Location("HarvardX", "ER22x", "2013_Spring", "conditional", "condone")
flags = libvirt.VIR_DOMAIN_VCPU_MAXIMUM if config: flags = flags | libvirt.VIR_DOMAIN_AFFECT_CONFIG
self.course_key = self.store.make_course_key('Org_1', 'Course_1', 'Run_1') self._create_course_with_given_location(self.course_key)
self.assertTrue(filecmp.cmp(path_in, path_test))
'float64': 0x1E3D4C53, 'int32': 0x1E3D4C54, 'uint8': 0x1E3D4C55, 'int16': 0x1E3D4C56
else: mpub = self.opts['pki_dir'] + '/' + 'master.pub' if os.path.isfile(mpub): self.pubkey = mpub
import logging
rhobar1 = sqrt(rhobar**2 + damp**2) cs1 = rhobar / rhobar1 sn1 = damp / rhobar1 psi = sn1 * phibar phibar = cs1 * phibar
from __future__ import absolute_import
problem = new_loncapa_problem(xml_str)
if getattr(settings, "THEME_NAME", "") == "": settings.THEME_NAME = None return
if database: return client.add_database_user(name, passwd) return client.add_cluster_admin(name, passwd)
self.assertContains(response, checkbox_html, html=True) self.assertContains(response, org_name_string)
#html_title = None
photo_id_key = data_dict["PhotoIDKey"].decode("base64") user_photo_key = data_dict["UserPhotoKey"].decode("base64")
skip_perm_errors = self.options.eauth != ''
self.tag_map[tag].append(future) self.request_map[request].append((tag, future))
frgd_img = to_img(data.X[i], 28) frgd_img = frgd_img.convert('L')
if 'schedule' not in opts: opts['schedule'] = {}
cache_key = self._cache_key_for_kvs_key(kvs_key) return ( cache_key in self._cache and kvs_key.field_name in self._cache[cache_key] )
MAX_BOOKMARKS_PER_COURSE = 100
try: uid_int = base36_to_int(uidb36) user = User.objects.get(id=uid_int) user.is_active = True user.save() except (ValueError, User.DoesNotExist): pass
self._find_within(".load-response-button").click() EmptyPromise( self.is_ajax_finished, "Loading more Responses" ).fulfill()
value_regex = None
__salt__['jboss7.read_simple_binding'].return_value = {'success': True, 'result': {'value': 'DEV2'}}
TEST_DIR = path(__file__).dirname() TEST_DATA_DIR = 'common/test/data/' PLATFORM_ROOT = TEST_DIR.parent.parent.parent.parent TEST_DATA_ROOT = PLATFORM_ROOT / TEST_DATA_DIR
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, mock_open, call, NO_MOCK, NO_MOCK_REASON )
try: metadata = literal_eval(md)
if not self.hyperparameter_periodicity.fixed: periodicity_gradient = \ 4 * arg / self.length_scale**2 * cos_of_arg \ * sin_of_arg * K periodicity_gradient = periodicity_gradient[:, :, np.newaxis]
return self.q(css='body.view-course-create-rerun').present
'WHAT_IS_VERIFIED_CERT': 'verified-certificate',
import salt.ext.six as six
continue
self.assertFalse(self._has_changes(published_xblock.location))
self.assertTrue("success_file" in os.path.basename(filename)) store_file_data(storage, filename)
status_code = 400 default_detail = "The course key provided was invalid."
grad = numpy.gradient(a) grad_x, grad_y = grad
except ProcessingError as err: log.warning("Module encountered an error while processing AJAX call", exc_info=True) return JsonResponse({'success': err.args[0]}, status=200)
train_data, test_data, target_train, target_test = train_test_split( data, target, test_size=.1, random_state=0)
from .overrides import get_override_for_ccx return get_override_for_ccx(self, self.course, 'start')
def ordered_dict_presenter(dumper, data): return dumper.represent_dict(list(data.items()))
ret['result'] = True ret['comment'] = 'property {0} deleted'.format(name) ret['changes'][name] = None del config[name]
__virtualname__ = 'ldap'
from __future__ import absolute_import
self.assertEqual(len(team_membership), 1) member = team_membership[0]['user'] self.assertEqual(member['username'], creator)
try: return cls.objects.get( user=user, course_id=course_key ) except cls.DoesNotExist: return None
updates[mean_square_grad] = new_mean_squared_grad updates[mean_square_dx] = new_mean_square_dx updates[param] = param + delta_x_t
from salt.exceptions import CommandExecutionError
import salt.utils
import logging log = logging.getLogger(__name__)
import fnmatch import re
return self.q(css="div.problem section.inputtype div.correct span.status").is_present()
assert_greater_equal(call_count, minimum_calls)
return self.q(css='#fileupload .error-block').visible
msg = "No valid user id found in endpoint URL" log.info("[LTI]: {}".format(msg)) raise LTIError(msg)
field_data_cache = FieldDataCache([], course.id, request.user) about_module = get_module( request.user, request, loc, field_data_cache, log_if_not_found=False, wrap_xmodule_display=False, static_asset_path=course.static_asset_path, course=course )
from __future__ import absolute_import
#man_show_urls = False
self.wait_for_ajax() self.wait_for_element_presence(MODAL_SELECTOR, 'Validation Modal is present')
log.error( 'Unrecognized target engine "{0}" for' ' target expression "{1}"'.format( target_info['engine'], word, ) ) return []
from salt.states import selinux
filesystem = OSFS(root_dir / 'test_export/policies/2012_Fall') self.assertTrue(filesystem.exists('grading_policy.json'))
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath
if 'topo_space' not in self.__dict__: self._update_topo_space()
call_command( "migrate_to_split", str(self.course.id), str(self.user.id), )
import theano from theano import tensor try: from theano.sparse import SparseType except ImportError: warnings.warn("Could not import theano.sparse.SparseType") from theano.compile.mode import get_default_mode
Xy = np.empty(shape=n_features, dtype=common_dtype, order='C') np.dot(X.T, y, out=Xy)
from __future__ import absolute_import import os.path
yield check_estimators_overwrite_params
bulk_write_record = self._get_bulk_ops_record(course_key) if bulk_write_record.active: try: del bulk_write_record.modules[version_guid][block_key] except KeyError: pass
def __virtual__(): if not HAS_SQLITE3: return (False, 'The sqlite3 execution module failed to load: the sqlite3 python library is not available.') return True
parent = verticals[0] new_block = self.store.create_child( self.user.id, parent.location, 'html', 'new_component' )
self.provider_id = provider_id
if not formatted: indent = "" nextLevelIndent = "" nl = ""
for course_key, record in self._active_bulk_ops.records.iteritems(): if record.active: yield (course_key, record)
log.exception('Error occurred while sending payment confirmation email')
self.assertFalse(result['success']) self.assertIn(u"did not return a required parameter", result['error_html'])
try: return int(value) except (ValueError, TypeError): return 0
XA_checked, XB_checked = check_pairwise_arrays(XA, XB) assert_equal(XA_checked.dtype, np.float32) assert_equal(XB_checked.dtype, np.float32)
resp_head['Access-Control-Allow-Origin'] = req_head.get('Origin', '*') resp_head['Access-Control-Expose-Headers'] = 'GET, POST' resp_head['Access-Control-Allow-Credentials'] = 'true'
self.mappings[lib_key] = store
estimator_error = np.mean( np.average(incorrect, weights=sample_weight, axis=0))
goals_label = _(u"Tell us why you're interested in {platform_name}").format( platform_name=settings.PLATFORM_NAME )
os.remove(filename)
return not self.is_private
STATIC_ROOT_BASE = ENV_TOKENS.get('STATIC_ROOT_BASE', None) if STATIC_ROOT_BASE: STATIC_ROOT = path(STATIC_ROOT_BASE)
n_estimators_values = [1, 5, 10, 20, 30, 40, 50] accuracies_trees = np.zeros(len(n_estimators_values), dtype=float)
self.assert_no_xpath(xml, "//label[@class='choicegroup_incorrect']", self.context)
if domain and 'edge.edx.org' in domain: return redirect(reverse("signin_user"))
break
from contextlib import contextmanager import sys import json import logging
about_base = re.sub(r"^https?://", "", about_base)
scenarios = { "2_choices_correct": ("checkbox_two_choices", "correct"), "2_choices_incorrect": ("checkbox_two_choices", "incorrect"),
dirty_flags = _porttree().dbapi.aux_get(cpv, ["IUSE"])[0].split() return list(set(dirty_flags))
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from ctypes import cdll, c_char_p, c_int, c_void_p, pointer, create_string_buffer from ctypes.util import find_library
import sys from collections import namedtuple, Iterable, Sequence, Mapping import logging
n = 23149 X_test = X[:n, :] y_test = y[:n] X = X[n:, :] y = y[n:]
iface['up'] = (val != 'Media disconnected')
exec(compile(open(SALT_VERSION).read(), SALT_VERSION, 'exec'))
self.browser.refresh()
BSD = ('OpenBSD', 'FreeBSD')
cache[cache.keys()[0]] = ("Hey there!", {})
from .models import CourseStructure
rows=None, cols=None,
X = [[1, 1, 5], [1, 1, 0]] t3.fit(X) X_incompt = [[1, 3], [1, 3]] assert_raises(ValueError, t3.transform, X_incompt)
import salt.utils.error
is_eligible = api.is_user_eligible_for_credit("staff", credit_course.course_key) self.assertFalse(is_eligible)
def __init__(self, access_key, secret_key): pass def get_bucket(self, bucket_name): return MockBucket(bucket_name)
return 0
self.assertIn('test.ping', funcs)
key = RSA.importKey(rsa_pub_key_str) cipher = PKCS1_OAEP.new(key) encrypted_data = cipher.encrypt(data) return encrypted_data
RestrictedCourse.objects.create(course_key=self.course.id)
if __salt__['mysql.grant_exists']( grant, database, user, host, grant_option, escape, **connection_args):
self.wait_for_element_visibility( '#entrance-exam-enabled', 'Entrance exam checkbox is available' ) return self.get_element('#entrance-exam-enabled')
non_editable_metadata_fields = self.split_test_module.non_editable_metadata_fields self.assertIn(SplitTestDescriptor.due, non_editable_metadata_fields) self.assertIn(SplitTestDescriptor.user_partitions, non_editable_metadata_fields) self.assertNotIn(SplitTestDescriptor.display_name, non_editable_metadata_fields)
else: response.content = msg
return _merge_statuses([boot_ret, buildout_ret])
response.remove_headers = headers
if getattr(sys, 'frozen', False): application_path = os.path.dirname(sys.executable) elif __file__: application_path = os.path.dirname(__file__)
self.assertTrue('success' in result and not result['success'])
_OSFS_INSTANCE = {}
return os.sep.join(folders_list_in_path)
OAUTH2_PROVIDER_APPLICATION_MODEL = 'oauth2_provider.Application'
shared_dataset = np.random.rand(20, 19).astype(theano.config.floatX)
return element.is_displayed() and all(size > 0 for size in element.size.itervalues())
M = M.T
from __future__ import absolute_import, print_function import datetime import json import logging import time
scores = cval.cross_val_score(clf, X, y) assert_array_equal(scores, clf.score(X, y))
return _check_range_and_return('lumination_change', label, -19, 19)
if self.structure_json: return json.loads(self.structure_json) return None
self.local = salt.client.get_local_client( self.opts['_minion_conf_file'], io_loop=self.io_loop)
from __future__ import absolute_import import os
if os.path.isfile(CONFIG): os.remove(CONFIG)
__virtualname__ = 'reclass'
parsed_html = lxml.html.fromstring(response.content) return parsed_html.find_class('course-status')[0].find_class('status-release-value')[0].text_content()
self.login(self.email, self.pw)
for member in val: if fnmatch.fnmatch(str(member).lower(), comps[1].lower()): return True return False
if not pvdisplay(device): cmd.append(device) elif not override: raise CommandExecutionError('Device "{0}" is already an LVM physical volume.'.format(device))
#pylint: disable=E0602
self.check_children()
from __future__ import absolute_import
EDXMKTG_LOGGED_IN_COOKIE_NAME = ENV_TOKENS.get('EDXMKTG_LOGGED_IN_COOKIE_NAME', EDXMKTG_LOGGED_IN_COOKIE_NAME) EDXMKTG_USER_INFO_COOKIE_NAME = ENV_TOKENS.get('EDXMKTG_USER_INFO_COOKIE_NAME', EDXMKTG_USER_INFO_COOKIE_NAME)
self.assertEqual(self.field.to_representation(value), value)
world.css_click('input[name="calculate-grades-csv"]')
self.dbm = dbm
assert_array_almost_equal(clf.scores_[2], clf1.scores_[2]) assert_array_almost_equal(clf.intercept_[2:], clf1.intercept_) assert_array_almost_equal(clf.coef_[2][np.newaxis, :], clf1.coef_)
import salt.utils
log.error('Lane Router Received message without share: {0}'.format(msg)) return
SOCIAL_AUTH_PIPELINE_TIMEOUT = ENV_TOKENS.get('SOCIAL_AUTH_PIPELINE_TIMEOUT', 600)
import salt.utils.jid import salt.returners
if 'nobase' not in ks_opts['packages']['options']: sls['base'] = {'pkg_group': ['installed']}
FEATURES['AUTOMATIC_AUTH_FOR_TESTING'] = True
desired_volumes = sorted(list(data) + [ k for k in _image_get(config['image_path']) or [] if k not in data])
weights_format = ('v', 'h')
return
marginalize_odd = (depth % 2) == 0
input_problem_answer(step, problem_type, correctness)
import integration
available_version = salt.utils.alias_function(latest_version, 'available_version')
self._mock_paver_needs = patch.object(pavelib.quality.run_jshint, 'needs').start() self._mock_paver_needs.return_value = 0
return self._cohort_name(self.q(css=self._bounded_selector(".group-header-title .title-value")).text[0])
rsp_msg = rsqt_msg.get_response()
pred = np.argmax(sp_clf.decision_function(iris.data), 1) assert_array_almost_equal(pred, clf.predict(iris.data.toarray()))
assert zca_dataset.has_targets()
{ u'description': 'Test description', u'version': CERTIFICATE_SCHEMA_VERSION },
call_command('import', self.content_dir, self.good_dir) store = modulestore() self.assertIsNotNone(store.get_course(self.base_course_key))
context_fields_to_remove = set(CONTEXT_FIELDS_TO_INCLUDE) context_fields_to_remove.add('client_id') for field in context_fields_to_remove: if field in context: del context[field]
api.add_enrollment(self.USERNAME, self.COURSE_ID, mode='audit')
for app in ENV_TOKENS.get('ADDL_INSTALLED_APPS', []): INSTALLED_APPS += (app,)
if depth == 0: self.load_item.side_effect = lambda x: LeafModuleFactory(descriptor_cls=HtmlDescriptor) else: self.load_item.side_effect = lambda x: ContainerModuleFactory( descriptor_cls=VerticalBlock, depth=depth - 1 )
run_command = (test_command + 'prepare').format(mode) __salt__['cmd.run'](run_command)
self.assertTrue( self.thread_page_1.check_threads_rendered_successfully(thread_count=self.thread_count) )
self.course = CourseFactory.create(org='MITx', course='999', display_name='Robot Super Course')
from __future__ import absolute_import
_exprArgCache = {} def resetCache(): ParserElement._exprArgCache.clear() resetCache = staticmethod(resetCache)
clear_pw = True password = ''.join(random.SystemRandom().choice( string.ascii_uppercase + string.digits) for x in range(15))
from salt.ext.six import string_types
csv_file = open(path, 'r')
cipher = aes_cipher_from_key(key) padded_data = cipher.decrypt(encrypted_data) return unpad(padded_data)
filterwarnings('ignore', message='No request passed to the backend, unable to rate-limit')
else: course_path = "/".join((static_asset_path or data_directory, rest))
ret = self.run_function( 'mysql.db_remove', name=dbname, connection_user=self.user, connection_pass=self.password ) self.assertEqual(True, ret)
import salt.utils import salt.utils.s3
import yaml try: yaml.Loader = yaml.CLoader yaml.Dumper = yaml.CDumper except Exception: pass
from salt.states import mac_assistive as assistive
return self.q(css='.join-team .action-primary').present
unique_rank, inv_rank = np.unique(y_score[i], return_inverse=True) n_ranks = unique_rank.size rank = n_ranks - inv_rank
video_html = get_preview_fragment(request, self.video, context).content self.assertNotRegexpMatches(video_html, "<select")
X_mean = X.mean(axis=-1) X -= X_mean[:, np.newaxis]
self.assertSaltTrueReturn(ret)
self.model.enforce_constraints()
#epub_max_image_width = 0
return self.q(css=".field-hide-after-due").visible
self.assertIsNotNone(self.page.new_post_button) self.page.click_new_post_button() self.assertIsNotNone(self.page.new_post_form)
all_modes = CourseMode.modes_for_course_dict(self.course_key, only_selectable=False) self.assertItemsEqual(all_modes.keys(), available_modes)
yield check_sample_weight_multiclass, cls
pairs, target, target_names = load_func( index_file_path, data_folder_path, resize=resize, color=color, slice_=slice_)
wait_lock(w_lock, list_cache, 15 * 60)
new_container = True
response = self.client.get(self.url) self.assert_no_xss(response, '<script>alert("XSS")</script>')
unicode_text = "好 各位同学".decode('utf-8') self.assertTrue(self.video.downloaded_transcript_contains_text('srt', unicode_text))
self.cohort_management_page.select_cohort_some_inline_discussion()
folds = np.zeros(n_samples) for i, (_, test) in enumerate(lkf.split(X, y, labels)): folds[test] = i
return sorted(set(enabled + available))
ApiResponse = collections.namedtuple('ApiResponse', ['http_response', 'data'])
masquerade_settings = getattr(user, 'masquerade_settings', {}) return masquerade_settings.get(course_key, None)
return []
return "file://"+urllib.pathname2url(os.path.abspath(filename))
salt '*' vsphere.set_coredump_network_config my.esxi.host root bad-password 'dump_ip.host.com'
from __future__ import absolute_import import logging import os import time import pickle from copy import deepcopy
enrollment = CourseEnrollment.objects.get( user=user, course_id=source_key )
tol = 2 * np.finfo(A.dtype).eps
clf_quantile = GradientBoostingRegressor(n_estimators=100, loss='quantile', max_depth=4, alpha=0.5, random_state=7)
newrelic.agent.add_custom_parameter('course_id', unicode(course_key)) newrelic.agent.add_custom_parameter('org', unicode(course_key.org))
CourseEnrollment.enroll(self.user, course.id)
__func_alias__ = { 'get_': 'get', 'set_': 'set', 'rm_': 'rm', 'ls_': 'ls' }
if api != 2: log.error('Foreman API v2 is supported only, please specify' 'version 2 in your Salt master config') raise Exception
return CourseAssetsFromStorage(course_key, doc_id, course_assets['assets'])
from __future__ import absolute_import import collections import logging
from __future__ import absolute_import import os import logging import fnmatch
DEBUG = False SESSION_COOKIE_SECURE = False SESSION_SAVE_EVERY_REQUEST = False SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
from track.backends.django import TrackingLog
for key, val in original_values_map.iteritems(): self.assertEquals( self.advanced_settings.get(key), val, 'Undoing Should revert back to original value' )
elif request.method == 'DELETE': try: re_validate_certificate(request, course_key, certificate) except ValueError as error: return JsonResponse({'message': error.message}, status=400)
tempdir = tempfile.mkdtemp() egg = zipfile.ZipFile(top_dirname) egg.extractall(tempdir) top = os.path.join(tempdir, base) os.chdir(tempdir)
'AUTOMATIC_AUTH_FOR_TESTING': False,
from __future__ import absolute_import
import salt.ext.six as six
return self.default
cls.course_commentable_id = "course_level_commentable"
import salt.utils.gitfs import salt.utils.dictupdate from salt.exceptions import FileserverConfigError from salt.pillar import Pillar
return { "cc_requester": User(id=requester_id), "is_requester_privileged": is_requester_privileged, "course": CourseFactory(cohort_config={"cohorted": is_cohorted}), "thread": thread, }
course = CourseFactory.create(default_store=modulestore_type, emit_signals=True)
rexp1 = re.compile('(?m)^ [*|-] ' r'([^ ].*)[\r\n].*restart*')
return self._get_cohort_messages("confirmations", wait_for_messages)
__virtualname__ = 'kmod'
try: os.makedirs(self._temp_folder) os.chmod(self._temp_folder, FOLDER_PERMISSIONS) except OSError as e: if e.errno != errno.EEXIST: raise e
ret['Comment'] = "Failed with failure code: {0}".format(exc[5]) ret['Success'] = False
course_key = usage_key.course_key
ModeCreationPage( self.browser, self.course_id, mode_slug=u'verified', mode_display_name=u'Verified Certificate', min_price=10, suggested_prices='10,20' ).visit()
list_args = ' '.join(str_args) _validate_ret(parallels._normalize_args(list_args))
call_command('post_cohort_membership_fix')
self.async.close()
_win(kernel32.CloseHandle, wintypes.BOOL,
time_left = max_time - time.time() vb_wait_for_session_state(session, timeout=time_left) log.info("Started machine %s", name)
self.instructor = AdminFactory.create() self.client.login(username=self.instructor.username, password="test")
from __future__ import absolute_import
Xf = np.asfortranarray(X) est = TreeEstimator() est.fit(Xf, y) assert_almost_equal(est.predict(T), true_result)
FEATURES['ENABLE_EDXNOTES'] = enable_edxnotes with override_settings(FEATURES=FEATURES): self.assertEqual(EdxNotesTab.is_enabled(self.course), enable_edxnotes)
gated_content = gating_api.get_gated_content(self.course, self.effective_user) if gated_content: if unicode(self.section.location) in gated_content: raise Http404
return [('127.0.0.1:11211 (1)', {})]
import salt.utils
('paying', 'paying'),
fields = {}
if emit_signals and bulk_ops_record.is_root: self.send_pre_publish_signal(bulk_ops_record, structure_key)
import salt.ext.six.moves.http_client
display_id = slugify(chapter.display_name_with_default_escaped) local_hide_from_toc = False if required_content: if unicode(chapter.location) not in required_content: local_hide_from_toc = True
'rule': None
tasks = instructor_task.api.get_instructor_task_history(course_id, module_state_key)
import salt import salt.utils.fsutils from salt.modules import btrfs from salt.exceptions import CommandExecutionError
from __future__ import absolute_import import os import random import string
params = self._signed_callback_params(self.order.id, self.COST, self.COST) result = process_postpay_callback(params)
assert_bad({})
return super(NullBackend, self).get_value(val_name, default, **kwargs)
third = e.count(':')
if not self.done(): self.set_result(future)
raise ThreadNotFoundError("Thread not found.")
affinity = 'euclidean'
self.password = 'abc' self.student = UserFactory.create(username='student', email='student@test.com', password=self.password)
my-minion: - esxi-1.example.com - esxi-2.example.com
cauth = CourseAuthorization(course_id=course_id, email_enabled=False) cauth.save()
from salt.states import ssh_auth
problem = new_loncapa_problem(xml_str)
wip1 = W_list[i+1] hi_mean += T.dot(samples[i+1], wip1.T) * beta
instance.__allow_additional_items__ = True
if kwargs.get(push, False): ret['Push'] = __salt__['cp.push'](path)
world.trigger_event(SELECTORS['url_inputs'], event='input', index=index)
import salt.ext.six as six
return _get_array_element('scale change', label, (0.78, 1.0))
sample_weight = compute_sample_weight(None, y) assert_array_almost_equal(sample_weight, [1., 1., 1., 1., 1., 1., 1.])
settings = _normalize_server_settings(**settings)
for url_name in self.EXPECTED_URL_NAMES: self.assertContains(response, reverse(url_name))
return ' '.join([self.selector, css])
edit_task(task_definition=task_definition, user_name=user_name, password=password)
'jinja_lstrip_blocks': bool,
for draft in to_process_drafts: draft_loc = Location._from_deprecated_son(draft["_id"], course_key.run) draft_as_non_draft_loc = as_published(draft_loc)
pkginfo = _get_package_info(target, saltenv=saltenv)
request_lowstate = { "client": "local", "tgt": "*", "fun": "test.fib", "arg": ["10"] }
if getattr(self.options, 'daemon', False) is True: return
return start
lib_key = CourseKey.from_string(self._library_key) return unicode(lib_key.make_usage_key('library', 'library'))
bad_id = SlashSeparatedCourseKey(u'Broken{}'.format(self.course.id.org), 'hello', self.course.id.run + '_typo')
return self.rows_, self.columns_
with self.assertRaises(xmodule.exceptions.NotFoundError): module.rescore_problem()
return X
self.test_cleanup()
return response
css = '.group-name' self.find_css(css).first.fill(value)
continue
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'azure' PROFILE_NAME = 'azure-test' REQUIRED_AZURE = '0.11.1'
pass
altered_grader = CourseGradingModel.fetch(self.course.id) self.assertDictEqual(test_grader.grade_cutoffs, altered_grader.grade_cutoffs, "Noop update")
req_kwargs['prefetch'] = False
from __future__ import absolute_import import os import random import string
super(ExponentialLoss, self).__init__(1)
return CourseEmailTemplate.get_template(name=self.template_name)
for item in ret: self.assertSaltTrueReturn(item)
self.check_assertion_structure(assertion, response['results'][0])
if instance in vmconfig['state'] and vmconfig['state'][instance] is not None: for state_cfg in vmconfig['state'][instance]: add_instance = True
braces = '}' * num_braces + "\n" rval = (basic_setup + setup_nv_images + setup_nv_targets + setup_nv_denoms + do_normalize + braces) rval = rval % locals() return rval
instance_map = weakref.WeakKeyDictionary()
__virtualname__ = 'json'
import salt.utils from salt.exceptions import CommandExecutionError
if convnet_available.compiled: _logger.debug('already compiled') return True
@patch('salt.utils.which', lambda exe: exe) def test_existing_binary_in_linux(self): self.assertTrue(salt.utils.which('this-binary-exists-under-linux'))
from __future__ import absolute_import import os import shutil import textwrap
n_samples, n_features, n_classes = 50, 20, 3 X, y = make_classification(n_samples=n_samples, n_features=n_features, n_informative=10, n_classes=n_classes, random_state=0)
microsite.enable_microsites_pre_startup(log)
if not using_ip_for_id and 'append_domain' in opts: opts['id'] = _append_domain(opts)
database += token try: if exploded_grant[position_tracker + 1] == '.': phrase = 'tables' except IndexError: break
from __future__ import absolute_import
pkg_params = __salt__['pkg_resource.parse_targets'](name, pkgs, **kwargs)[0]
'ENABLE_S3_GRADE_DOWNLOADS': False,
enrollments = self._create_enrollments(solo_course_id, shared_course_id) meter = utils.ProgramProgressMeter(self.user, enrollments)
return self.q(css='.wrapper-content ' + self.certficate_css + ' .no-content a.new-button').text[0]
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
set_credit_requirements(self.course.id, requirements)
usernames = [x for x in usernames if x] initial = usernames[:]
assert_array_almost_equal(comp_a[:9], comp_r[:9]) assert_array_almost_equal(comp_a[9:], comp_r[9:], decimal=2)
if self._connecting_future.done(): self._connecting_future = self.connect() yield self._connecting_future
state = dict(state.items() + matrices.items()) del matrices
from unit.modules.boto_s3_bucket_test import BotoS3BucketTestCaseMixin
deploy_d_from_syspaths = os.path.join( syspaths.CONFIG_DIR, 'cloud.deploy.d' )
return BlockUsageLocator(course_key, 'course', course_key.run)
self.assertEqual(len(partition.groups), 2) self.assertItemsEqual( [g.id for g in partition.groups], [ VerificationPartitionScheme.ALLOW, VerificationPartitionScheme.DENY, ] )
import re import os
unicode_text = "好 各位同学".decode('utf-8') self.assertIn(unicode_text, self.video.captions_text)
httpretty.register_uri( httpretty.POST, "{}/baskets/".format(TEST_API_URL), body=json.dumps({'payment_data': expected_payment_data}), content_type="application/json", )
logging.root.removeHandler(__MP_LOGGING_QUEUE_HANDLER) __MP_LOGGING_QUEUE_HANDLER = None __MP_LOGGING_CONFIGURED = False
choices.append((choice.get("name"), components))
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
config = settings.CC_PROCESSOR.get( settings.CC_PROCESSOR_NAME, {} )
mask = img.astype(bool)
resp = self.client.patch(self.detail_url, data, format='json', HTTP_AUTHORIZATION=self.auth) self.expect_error_fields(expected_errors, resp)
bandwidth = estimate_bandwidth(X, quantile=0.2, n_samples=500)
with self.assertRaisesRegexp(CommandError, ".* requires one or more arguments.*"): call_command('reindex_course')
import yaml import salt.ext.six as six
self.basic_setup() self.check_grade_percent(0) self.assertEqual(self.get_grade_summary()['grade'], None)
X = np.arange(200)[:, np.newaxis] y = np.zeros(200) y[50:100] = 1 y[100:200] = 2 X[100:200, 0] = 200
if iface_type not in ['slave']: return __salt__['cmd.run']('ip link set {0} down'.format(iface)) return None
certificate_count = 3 for __ in xrange(certificate_count): self.generate_certificate(course_id=self.course.id, mode='honor', status=CertificateStatuses.downloadable)
urlpatterns += ( url(r'^404$', handler404), url(r'^500$', handler500), )
y_proba = clf.predict_proba(T) assert_true(np.all(y_proba >= 0.0)) assert_true(np.all(y_proba <= 1.0))
cm = confusion_matrix(y_true, y_pred) assert_array_equal(cm, [[19, 4, 1], [4, 3, 24], [0, 2, 18]])
'whitelist_modules': list,
try: verify_format_docstrings() except SkipTest as e: import traceback traceback.print_exc(e) raise AssertionError( "Some file raised SkipTest on import, and inadvertently" " canceled the documentation testing." )
block.edit() block.reset_field_val("Display Name") block.save_settings() self.assertEqual(block.name, name_default)
return self.q(css="div.modal div.modal-header").present and self._are_all_assets_present()
row = self.n_eigen + self.minibatch_index self.Xt[row] = x
self._check_grade_response(callback_url, expected_header, json.dumps(response_content))
'utils_dirs': list,
from multiprocessing.pool import Pool
return self.input_space
parent = block.get_parent() while parent: yield parent parent = parent.get_parent()
while f1 != f2: f1=f2 (f2,ext)=os.path.splitext(f1)
)
user = UserFactory.create(username="ma1", email="ma1@ma1.info", password="edx") self.assertFalse(EdxNotesTab.is_enabled(self.course, user=user))
multi_db = True
ret['result'] = False ret['comment'] = \ 'Failed to configure repo \'{0}\': {1}'.format(name, exc) return ret
from __future__ import absolute_import import os import yaml import shutil import time
for req_file in PYTHON_REQ_FILES: sh("pip install -q --disable-pip-version-check --exists-action w -r {req_file}".format(req_file=req_file))
from __future__ import absolute_import
self.course_nav.go_to_vertical('Test Vertical-1')
y_pred_grd = grd.predict_proba(X_test)[:, 1] fpr_grd, tpr_grd, _ = roc_curve(y_test, y_pred_grd)
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
self.provider.enable_integration = True self.provider.save()
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch, Mock
for cache in settings.CACHES: caches[cache].clear()
if index < 0: index = len(sysPath) + index + 1 if index > len(sysPath): index = len(sysPath)
if isinstance(student_answer, list): student_answer = student_answer[0]
from salt.states import win_servermanager
header_row = OrderedDict([('id', 'Student ID'), ('email', 'Email'), ('username', 'Username')])
return {}
self.assertNotEqual(httpretty.last_request().headers, {})
input_css = "$('.CodeMirror')[0].CodeMirror.setValue('{}');".format(response_str) self.browser.execute_script(input_css)
n_samples = 100 n_features = 300
from salt.states import pecl
filter_func = filter_func or (lambda __: True)
load(filename, mmap_mode=self._mmap_mode).max()
AA = 1. / np.sqrt(np.sum(least_squares * sign_active[:n_active]))
return [tuple(map(int, score.split('/'))) for score in text_scores]
indexed_count = { "count": 0 }
self.photo_id_key = rsa_encrypted_aes_key.encode('base64') self.save()
CoursewareSearchIndexer.do_course_reindex(modulestore(), self.course.id)
return True
import logging
command.handle(output_path, *org_list, courses=only_courses)
from __future__ import absolute_import import re import logging
new_candidates = [] for candidate in candidates: if candidate.endswith('.xml'): new_candidates.append(candidate[:-4] + '.html') return candidates + new_candidates
self.assertNotIn("\"/static/", response.content)
reverse_chars = self.exploded[::-1].replace(':', '') return '.'.join(reverse_chars) + '.ip6.arpa'
walk_l = list(_depth_limited_walk(name, max_depth)) walk_d = {} for i in walk_l: walk_d[i[0]] = (i[1], i[2])
super(TestFooter, self).setUp() cache.clear()
url(r'^post_metrics_data_csv_url', 'class_dashboard.dashboard_data.post_metrics_data_csv', name="post_metrics_data_csv"),
tab_id = models.CharField(max_length=50) course_overview = models.ForeignKey(CourseOverview, db_index=True, related_name="tabs")
from __future__ import absolute_import, with_statement import copy import ctypes import os import re import sys import time import errno import signal import stat import logging import multiprocessing import tempfile import traceback
giturl = "" data_dir = ""
expected = self.course actual = self.ccx.course self.assertEqual(expected, actual)
from __future__ import absolute_import
return self.cleaned_data['return_type'] or 'dict'
with super(ForumDiscussionSearchUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
lookup_tag = customrender.registry.get_class_for_tag
'ENABLE_MAX_FAILED_LOGIN_ATTEMPTS': False,
host = name
win32api.SetFileAttributes(path, file_attributes)
self.assertTrue(self.store.has_changes(xblock))
completed_funcs = []
self.wait_for( lambda: "added to this cohort" in self.get_cohort_confirmation_messages(wait_for_messages=True)[0], "Student(s) added confirmation message." )
ret = {'name': name, 'result': None, 'comment': '', 'changes': {},
mako_middleware_process_request(self.request) self.request.user = self.user
for course_key in courses: self.assertFalse(is_course_in_block_structure_cache(course_key, self.store))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
interface = interface.split('\\') interface = ''.join(interface)
user = MockUsers() if self.flag == 1: user.id = None return user user.id = user_id return user
age = 5*24*60*60
return self._require_oauth_field("client_id")
if not hasattr(self, 'components_'): self._init_latent_vars(n_features)
param_grid = ParameterGrid(self.param_distributions) grid_size = len(param_grid)
self._test_email_address_failures(SESLocalAddressCharacterError(554, "Email address contains a bad character"))
store.save_asset_metadata_list(md_list, ModuleStoreEnum.UserID.test)
from __future__ import absolute_import, print_function import logging
from salt.states import test
clf = BayesianRidge(compute_score=True) clf.fit(X, y)
self.client.login(username="jack", password="test") LinkedInAddToProfileConfiguration( company_identifier='0_mC_o2MizqdtZEmkVXjH4eYwMj4DnkCWrZP_D9', enabled=True ).save()
import salt.ext.six as six
if not self._verify_auth(): self.redirect('/login') return
if Minv is not None: raise ValueError("Minv should not be specified when sigma is")
pred = km.predict(X) assert_array_equal(pred, km.labels_)
termination_criterion = EpochCounter(5)
for course_mode in CourseMode.objects.filter(course_id=self.course.id): course_mode.sku = None course_mode.save()
for param_name, param in self.parameters.items(): if (param._partial_kwarg and param_name not in kwargs): kwargs[param_name] = param.default
#show_authors = False
return self.broadcast_beta(self.beta)
course_mode_info = self._enrollment_with_complete_course('honor') self.assertTrue(course_mode_info['show_upsell']) self.assertEquals(course_mode_info['days_for_upsell'], 1)
self.factory(l1_ratio=1.1)
MESSAGE = _('Unable to get git log')
return unicode(self.course_key)
from __future__ import absolute_import import re import logging
pw_group.__grains__ = {} pw_group.__salt__ = {} pw_group.__context__ = {} pw_group.grinfo = {}
blocks_stack.extend(children)
return get_members(mailchimp, list_id, 'cleaned')
LogoutPage(self.browser).visit()
cached_metadata = self._get_cached_metadata_inheritance_tree(course_id, force_refresh=True) if runtime: runtime.cached_metadata = cached_metadata
from __future__ import absolute_import
page.wait_for_component_menu() click_css(page, 'button>span.large-discussion-icon', menu_index)
self.assertIn( ' Failed to error service', self.run_function('service.launchctl', ['error']))
sfn = '' source_sum = {}
fi exit 0
from salt.utils import args from salt.utils.odict import OrderedDict from salt.exceptions import (SaltInvocationError, SaltSystemExit, CommandNotFoundError) from salt import utils
from __future__ import absolute_import import logging
mode = __salt__['config.manage_mode'](mode)
make_asset_xml(num_assets, ASSET_XML_PATH) validate_xml(ASSET_XSD_PATH, ASSET_XML_PATH)
course_mode = CourseMode( course_id=course.id, mode_slug=CourseMode.DEFAULT_MODE_SLUG, mode_display_name=CourseMode.DEFAULT_MODE_SLUG, min_price=10, ) course_mode.save()
if self.isalive() and _ACTIVE is not None: _ACTIVE.append(self)
for i in params: if _is_simple_type(i): _current_parameter = SimpleParameter(i) else: _current_parameter = TypedParameter() _parse_typed_parameter(i) _current_option.add_parameter(_current_parameter)
model = CourseRegistrationCodeInvoiceItem extra = 0 can_delete = False readonly_fields = ( 'qty', 'unit_price', 'currency', 'course_id', ) def has_add_permission(self, request): return False
for prop in 'acpi', 'cores', 'cpu', 'pool', 'storage', 'sata0', 'ostype', 'ide2', 'net0':
safe_course_key = loc.course_key if safe_course_key.run is None: safe_course_key = safe_course_key.replace(run='only')
'update_restart_services': list,
u'\xa0': u' ', u'\u2013': u'-',
return structure['blocks'].get(block_key)
spca_lasso = SparsePCA(n_components=3, method='cd', random_state=0, alpha=alpha) spca_lasso.fit(Y) assert_array_almost_equal(spca_lasso.components_, spca_lars.components_)
with self.assertRaises(AttributeError): getattr(self.profile, '_changed_fields')
fstypes.add('*')
has_changes = None if (is_xblock_unit or course_outline) and not is_library_block: has_changes = modulestore().has_changes(xblock)
time.sleep(20) ret = self.run_function('grains.item', ['setgrain'])
if self.contentstore: self.contentstore.copy_all_course_assets(source_course_id, dest_course_id) return dest_course_id
return [XBlock.tags, XBlock.name]
self.assertEqual(1, len(removed)) volumes.remove(removed[0]) return removed[0]
cache.clear()
best = sorted(grid_scores, key=lambda x: x.mean_validation_score, reverse=True)[0] self.best_params_ = best.parameters self.best_score_ = best.mean_validation_score
if not expected_probes: return { 'remove': configured_probes }
discussion_id_map_json = CompressedTextField(verbose_name='Discussion ID Map JSON', blank=True, null=True)
def landing(request, org, course, coursename): return render_to_response('temp-course-landing.html', {})
self.run_function('keychain.uninstall', [CERT_ALIAS]) certs_list = self.run_function('keychain.list_certs')
watch = salt.utils.alias_function(wait, 'watch')
attempt.mark_ready() self._assert_course_verification_status(VERIFY_STATUS_NEED_TO_VERIFY)
'include_paths': get_config_value('include_paths', ()),
boston = datasets.load_boston() perm = rng.permutation(boston.target.size) boston.data = boston.data[perm] boston.target = boston.target[perm]
fetch = get
self.submit_question_answer('p1', {'2_1': u'Correct'})
params = {'amount': donation_amount} if course_id is not None: params['course_id'] = course_id
self.assertEqual(max_scores_cache.num_cached_from_remote(), 1)
if root_name == COURSE_ROOT: if courselike_module.entrance_exam_enabled: remove_entrance_exam_milestone_reference(request, courselike_key) log.info( "entrance exam milestone content reference for course %s has been removed", courselike_module.id )
url = endpoint + urlquote(user.username) response = openid_request.answer(True, None, url)
_, sa, _ = randomized_svd(X, k, n_iter=0, power_iteration_normalizer=normalizer, random_state=0)
response = self.client.get_html('/course/edX/test') self.assertEquals(response.status_code, 404)
sampling_algorithm["custom-reservoir-sampling"] = \ lambda n_population, n_samples, random_state=None: \ sample_without_replacement(n_population, n_samples, method="reservoir_sampling", random_state=random_state)
self.send_response(200) self.send_header('Content-type', 'application/json') self.end_headers() self.wfile.write(response)
response = self.fetch('/login', method='POST', body=urlencode(self.auth_creds), headers={'Content-Type': self.content_type_map['form']})
response = self._enroll_through_view(self.course) self.assertEqual(response.status_code, 400)
start_delim_index = template.find(start_delim, start_index, close_char_index) if 0 <= start_delim_index < open_char_index: return None
if (not partial and param.kind != _VAR_POSITIONAL and param.default is _empty): raise TypeError('{arg!r} parameter lacking default value'. \ format(arg=param_name))
if name[-1] == '/' and name != '/': name = name[:-1]
if not self.blank and value is self.Empty: raise ValidationError(self.error_messages['blank']) else: return super(OpaqueKeyField, self).validate(value, model_instance)
template_name = 'api_admin/terms_of_service.html'
group.__salt__ = {} group.__opts__ = {}
'API': 'https://www.youtube.com/iframe_api',
self.last_time = time.time()
from salt.utils import cache
self._enable_cohorting() self._create_verified_cohort() self._create_named_random_cohort("Random 1") self._create_named_random_cohort("Random 2") self._enable_verified_track_cohorting()
assert last_row % stride[0] == 0 num_row_steps = last_row / stride[0] + 1
response = self.send_get(client, query_parameters='view=shared') verify_fields_visible_to_all_users(response)
from __future__ import absolute_import, print_function import re import sys import platform
sort_order = 'name' topics = get_alphabetical_topics(course)
expr = stripXML(self.mathml_start + expr + self.mathml_end) expected = stripXML(self.mathml_start + expected + self.mathml_end)
_params = [sharedX(rng.randn(5)), sharedX(rng.randn(5, 3)), sharedX(rng.randn(4, 4, 4))]
try: with open(env_path) as env_file: return json.load(env_file)
X_ = X[:, np.newaxis, :] Y_ = Y[np.newaxis, :, :]
time.sleep(0.5)
max_squared_sum = get_max_squared_sum(X) step_size = get_auto_step_size(max_squared_sum, alpha, "log", fit_intercept)
self.assertRaises( FileserverConfigError, role_class, *args )
if not cpy_error and 'port' in mod_opts: return __virtualname__
ts = datetime(starting.year, starting.month, starting.day - starting.weekday())
verification_statuses = cache_values.get(verification_status_cache_key) if verification_statuses is None: verification_statuses = VerificationStatus.get_all_checkpoints(user.id, course_key) cache.set(verification_status_cache_key, verification_statuses)
if sys.getwindowsversion().major < 6: raise SaltInvocationError('Symlinks are only supported on Windows Vista or later.')
Env.METRICS_DIR.makedirs_p()
try:
proba = all_proba[0]
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
DEBUG = True
ddns.__grains__ = {} ddns.__salt__ = {}
cached_pkg = cached_pkg.replace('/', '\\') cache_path, _ = os.path.split(cached_pkg)
self.assertIn(map_key(actual_item_location), actual_item_map.keys())
RegistrationFactory(user=self.user)
on_saltstack = 'SALT_ON_SALTSTACK' in os.environ
from __future__ import absolute_import
self.get_courseware_page() self.assertEqual(self.get_progress_detail(), u'2/2')
freq = defaultdict(int) for tok in tokens(doc): freq[tok] += 1 return freq
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, mock_open, NO_MOCK, NO_MOCK_REASON )
'con_cache': bool, 'rotate_aes_key': bool,
with self.assertRaises(InvalidKeyError): call_command('reindex_library', invalid_key)
xpath = "//div[@class='{0}']".format(expected_css_class) self.assert_has_xpath(xml, xpath, self.context)
import contracts contracts.disable_all()
node = Element(self.category) super(XmlDescriptor, self).add_xml_to_node(node) return etree.tostring(node)
CourseEnrollmentFactory.create(user=self.user, course_id=self.course.id, is_active=True)
use_cache = credential_configuration.is_cache_enabled and not user.is_staff cache_key = credential_configuration.CACHE_KEY + '.' + user.username if use_cache else None
_, y_true = make_multilabel_classification(n_features=1, n_classes=n_classes, random_state=0, allow_unlabeled=True, n_samples=n_samples) _, y_pred = make_multilabel_classification(n_features=1, n_classes=n_classes, random_state=1, allow_unlabeled=True, n_samples=n_samples)
self.client = Client()
self.assertEquals( preview.latex_preview('2*3/4/5'), r'\frac{2\cdot 3}{4\cdot 5}' )
__opts__ = salt.config.client_config( os.environ.get('SALT_MINION_CONFIG', '/etc/salt/minion'))
import integration import salt.utils
if settings.FEATURES.get('ENABLE_MKTG_EMAIL_OPT_IN'): _update_email_opt_in(request, course_id.org)
try: import six except ImportError: pass
self.key = key self.value = value self.time = time self.min_compress_len = min_compress_len return True
with DefaultStorage().open(task_input['file_name']) as f: total_assignments = 0 for _line in unicodecsv.DictReader(UniversalNewlineIterator(f)): total_assignments += 1
if vmconfig['hostname'] in __salt__['vmadm.list'](order='hostname'): ret['result'] = True
while True: rows = cursor.fetchmany(self.QUERY_INTERVAL) if not rows: break for row in rows: yield row
ret['comment'] = 'Event module not available. Schedule add failed.' ret['result'] = True
if self._get_version(draft_block) != self._get_version(published_block): return True
'ENABLE_READING_FROM_MULTIPLE_HISTORY_TABLES': True,
test = [[1], [3], [4]] assert_array_almost_equal(clf.predict(test), [1, 3, 4], 2)
rng = np.random.RandomState(0) rand_data = RandomData(rng) n_features = rand_data.n_features n_components = rand_data.n_components
from salt.exceptions import CommandExecutionError import salt.utils import salt.modules.cmdmod
from __future__ import absolute_import import hashlib import logging import copy
output = _cmd('at', '-c', str(jobid))
if rolename == FORUM_ROLE_ADMINISTRATOR and not has_instructor_access: return HttpResponseBadRequest("Operation requires instructor access.")
'ENFORCE_PASSWORD_POLICY': False,
y_train = np.copy(y) y_train[unlabeled_set] = -1
visible_reqs = api.get_credit_requirements(self.course_key) self.assertEqual(len(visible_reqs), 1) self.assertEqual(visible_reqs[0]["namespace"], "grade")
alternate_course = self.create_course(course='mobile', mobile_available=True)
#texinfo_domain_indices = True
self.problem_page.a11y_audit.check_for_accessibility_errors()
mlp = MLP(nvis=10, layers=[Linear(layer_name='h', dim=10, irange=0.01)]) Conditional(mlp=mlp, name='conditional')
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
edit_link = "//" + settings.CMS_BASE + '/container/' + unicode(block.location)
import salt.config import salt.utils try: import salt.utils.cloud HAS_CLOUD = True except ImportError: HAS_CLOUD = False
COURSE_NAME = 'manual-testing-complete'
C = np.dot(A.T, A) C_ = fast_dot(A.T, A) assert_almost_equal(C, C_, decimal=5)
self._verify_masquerade_for_all_groups()
raise
ret = self._run_initscript(init_script, minions, False, 'bogusaction', 2)
self.cohort_management_page.select_cohort_some_inline_discussion()
if not fragment.js_init_fn: fragment.initialize_js('XBlockToXModuleShim') fragment.json_init_args = {'xmodule-type': block.js_module_name}
'pillar_merge_lists': bool,
resp = self.client.delete(reverse_usage_url('xblock_handler', usage_key)) self.assertEqual(resp.status_code, 204)
trust_root = TrustRoot.parse(openid_request.trust_root) if not trust_root: log.error('invalid trust_root') return False
Donation.add_to_order(cart, 10.0, None) cart.purchase(first='FirstNameTesting123', street1='StreetTesting123') self.orderid_courseless_donation = cart.id
hint_index = int(data['hint_index']) return self.get_demand_hint(hint_index)
target = [-1] * len(JUNK_FOOD_DOCS) + [1] * len(NOTJUNK_FOOD_DOCS)
from salt.states import apache_module
unique_together = (('user', 'name',), )
self._data[key] = value
if self.closed() and not is_survey_question: return False
for i, tab in enumerate(xmodule_tabs.CourseTabList.iterate_displayable( self.course, inline_collections=False )): self.assertEquals(tab.type, self.course.tabs[i].type)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch )
result = jboss7.bindings_exist(name='bindings', jboss_config={}, bindings={'env': 'DEV2'}, profile=None)
action = models.CharField(max_length=100, db_index=True)
if node.attr == 'display_name_with_default_escaped': self.results.violations.append(ExpressionRuleViolation( Rules.python_deprecated_display_name, self.node_to_expression(node) )) self.generic_visit(node)
honor.suggested_prices = '5, 10, 15' honor.save() self.assertTrue(CourseMode.has_payment_options(self.course_key))
self.assertEqual(len(response.redirect_chain), 1) self.assertIn(302, response.redirect_chain[0]) self.assertEqual(len(outbox), outbox_count)
assert_warns(UserWarning, BaggingRegressor(base_estimator=DecisionTreeRegressor(), n_estimators=1, bootstrap=True, oob_score=True, random_state=rng).fit, X_train, y_train)
sys.exit(0)
(12, True, u"False")
new_settings = get_agent_settings() failed_settings = dict()
pass
return prlctl('snapshot', args, runas=runas)
import salt.utils.locales
self._prefixlen = self._prefix_from_prefix_string(addr[1])
n_samples, n_features = 5, 4 y = rng.randn(n_samples) X = rng.randn(n_samples, n_features)
module = CapaFactory.create(max_attempts=0) self.assertFalse(module.should_show_check_button())
X = check_array(X, accept_sparse='csr') return self
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
ret.add('base')
config = DashboardConfiguration(recent_enrollment_time_delta=timeout) config.save()
cls.course_hidden_visibility = CourseFactory.create( display_name='Hidden_course', org='TestMicrositeX', catalog_visibility=CATALOG_VISIBILITY_NONE, emit_signals=True, )
BlockDepthTransformer.collect(block_structure) BlockNavigationTransformer.collect(block_structure) block_structure._collect_requested_xblock_fields()
return label.split(' (')[0]
if row_max[-1] == 0: y_i_all_argmax = np.append(y_i_all_argmax, [len(y.data)])
form = CourseEmailTemplateForm(form_data) self.assertFalse(form.is_valid())
auth_minion: myminion config_profile: my_openstack_profile
log.error('Wrong VM type. Valid options are: qemu, openvz (proxmox3) or lxc (proxmox4)') raise SaltCloudExecutionFailure
epsilon = 1e-9 * np.var(X, axis=0).max()
self.q(css=self.content_groups_css + " .new-button").first.click()
metadata_translations = dict(RawDescriptor.metadata_translations) metadata_translations['id'] = 'discussion_id' metadata_translations['for'] = 'discussion_target'
try: value = result.get(timeout=4.0) success = True except TimeoutError: value = None success = False
for key in baseline: params = baseline.copy() del params[key] with self.assertRaises(CCProcessorDataException): payment_accepted(params)
for X in (X_dense, X_sparse_pruned, X_sparse_unpruned):
wb = trials - len(self.aes) if wb <= 0: return 0 else: return wb
self.make_course(pdf_textbooks=[PDF_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('pdf_book', book_index=0, chapter='xyzzy')
clf = NearestCentroid() clf.fit(X_csr, y) assert_array_equal(clf.predict(T_csr), true_result)
self.new_email = email self.activation_key = uuid.uuid4().hex self.save() return self.activation_key
return strip_key_collection(retval)
return self.q(css='.wrapper-content ' + self.certficate_css + ' .no-content').present
self.store_precision = True
with patch('openedx.core.djangoapps.safe_sessions.middleware.log.error') as mock_log: yield self.assertFalse(mock_log.called)
total_amount_paid = InvoiceTransaction.get_total_amount_of_paid_course_invoices(self.course_key) self.assertEqual(float(total_amount_paid), 0)
return [self._filters]
admin = User.objects.get(username=username, email=email)
if res['retcode'] != 0: ret[name] = res['stderr'] if 'stderr' in res else res['stdout'] else: ret[name] = 'created'
X, y = datasets.make_friedman2(n_samples=1200, random_state=random_state) X_train, y_train = X[:200], y[:200] X_test, y_test = X[200:], y[200:]
return get_endpoint(settings.EDXNOTES_PUBLIC_API, path)
self.cohort_management_page.select_discussion_topic(self.inline_key)
X, y = datasets.make_hastie_10_2(n_samples=12000, random_state=1) _, n_features = X.shape
ret = [] for data in running(): ret.append(signal_job(data['jid'], salt_SIGKILL)) return ret
return security_group_rule_id
csv_file = open(path, 'r')
self.client.post( url_course2, data=json.dumps(self.certificate_exception), content_type='application/json' )
if vm_: for item in list(required_keys): if item in vm_: required_keys.remove(item)
_address_class = IPv6Address
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
logout_url = reverse('logout') response = self.client.post(logout_url)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
self.wait_for_closed_captions() closed_captions_selector = self.get_element_selector(CSS_CLASS_NAMES['closed_captions']) subs = self.q(css=closed_captions_selector).html return ' '.join(subs)
XBLOCK_SELECT_FUNCTION = prefer_xmodules
from __future__ import absolute_import
self.lc_block.get_child_descriptors() event_data = self._assert_event_was_published("assigned")
eps_range = np.linspace(0.01, 0.99, 100)
import pprint
role_class(*args) role_class(*args)
self.assertTrue(PasswordHistory.is_allowable_password_reuse(user, "test")) self.assertTrue(PasswordHistory.is_allowable_password_reuse(staff, "test"))
return self._decision_function(X)
self.q(css="input.proctored_exam").first.click()
current_users_state = self._get_users_state() self._check_response(users_state_before_fail, current_users_state)
return view_auth_classes(is_user)
spmatrix = spmatrix.copy()
X = X.reshape(-1, 2 * numpy.prod(self.original_image_shape))
import salt.utils
try: os.remove(trans_tar) except (OSError, IOError): pass
params = self._signed_callback_params( self.order.id, self.COST, self.COST, card_number='nodigits' ) result = process_postpay_callback(params)
self.registration.activate() self.assertTrue(self.user.is_active) mock_segment_identify.assert_called_with( self.user.id, expected_segment_payload, expected_segment_mailchimp_list )
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
import salt.utils from salt.exceptions import SaltInvocationError
MOBILE_APP_USER_AGENT_REGEXES = [ r'edX/org.edx.mobile', ]
current_umask = os.umask(0o027) verify_files([logfile], self.config['user']) os.umask(current_umask)
try: self.io_loop.start() except (KeyboardInterrupt, SystemExit): salt.log.setup.shutdown_multiprocessing_logging()
self._test_visible_to_students(False, 'private_no_start', None)
yield check_pipeline_consistency
pass
with self.assertRaises(exceptions.TemplateRuntimeError): env.from_string("{{ document|load_json }}").render(document="{'foo': 'it works'}")
X, y = make_classification(n_samples=1000, n_features=25, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, random_state=0)
ip_header = packet[eth_length:20+eth_length]
return False
self._assert_queue_task(mock_send, cert)
'ioflo_realtime': bool,
continue
sample_indices = _generate_sample_indices(random_state, n_samples) sample_counts = bincount(sample_indices, minlength=n_samples) unsampled_mask = sample_counts == 0 indices_range = np.arange(n_samples) unsampled_indices = indices_range[unsampled_mask] return unsampled_indices
self.test_create_account()
from __future__ import absolute_import import os import shutil import tempfile
self.assertEqual(result['contents'], 'Test HTML')
result = get_email_params( self.course, True, course_key=self.course_key, display_name=self.ccx.display_name )
params["email"] = "this_email_address_has_76_characters_in_it_so_it_is_unacceptable@example.com" assert_email_error("Email cannot be more than 75 characters long")
if microsite.has_override_value('SESSION_COOKIE_DOMAIN'):
from .aws import * import os from django.core.exceptions import ImproperlyConfigured
self.store.convert_to_draft(item_location, self.user_id) item = self.store.get_item(item_location) self.assertTrue(self.store.has_published_version(item))
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
rng = np.random.RandomState() mean = rng.uniform(1e-6, 1. - 1e-6, (rows, cols, channels))
__MP_LOGGING_QUEUE_PROCESS.terminate()
to_ignore = name.rsplit('-', 1)[0]
try: import memcache HAS_MEMCACHE = True except ImportError: HAS_MEMCACHE = False
self.reset_tracker()
descriptor = CapaDescriptor(get_test_system(), scope_ids=1) descriptor.data = xml if name: descriptor.display_name = name return descriptor
super(BadImplementationAbstractEnrollmentReportProvider, self).get_user_profile(user_id)
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, course_id=self.course_id, staff=False).visit()
return T.maximum(0.0, x)
full_path = path(__file__).abspath().dirname() / "data" / rel_path with open(full_path) as data_file: return data_file.read()
if process_manager._process_map.keys(): process_manager.send_signal_to_processes(signal.SIGILL) process_manager.stop_restarting() process_manager.kill_children()
self._configure_credit()
continue
ALL_USERS_VISIBILITY = 'all_users'
from salt.modules import win_disk
self._params = {}
course = CourseFactory.create() self.assertIsInstance(course, CourseDescriptor)
reg_code = CourseRegistrationCode.objects.get(code=reg_code.code) self.assertEqual(reg_code.is_valid, True)
self.video.click_player_button('play') self.video.wait_for_position('0:03') self.video.click_player_button('pause')
pass
resp = self.client.put( '/shoppingcart/payment_fake', data="success", content_type='text/plain' ) self.assertEqual(resp.status_code, 200)
world.wait(1) continue
from salt.states import boto_elb
from __future__ import absolute_import import sys
self.descriptor = self.modulestore.return_value.get_item.return_value
np.testing.assert_equal(list(cv), list(wrapped_old_skf.split()))
course_modes = CourseMode.objects.filter(course_id=course.id) actual = [course_mode.mode_display_name for course_mode in course_modes] self.assertListEqual(actual, ['Verified Certificate', 'Honor Certificate'])
disk_names = [] for disk in eligible: disk_names.append(disk.canonicalName) ret.update({host_name: {'Disks Added': disk_names}})
true_importances = np.zeros(n_features)
METRICS_WITH_AVERAGING = [ "precision_score", "recall_score", "f1_score", "f2_score", "f0.5_score" ]
if not api_enabled(request, course_key): log.debug('Notes are disabled for course: {0}'.format(course_id)) raise Http404
_list = self.run_function('beacons.list', return_yaml=False) self.assertFalse(_list['ps']['enabled'])
self.assertTrue(profile_page.profile_has_default_image) self.assertTrue(profile_page.profile_has_image_with_public_access())
return self.q(css='body.view-library').present
module.get_score = lambda: {'score': 1, 'total': 1}
return name in _get_svc_list(name, 'ENABLED')
if not channel.startswith('#'): channel = '#{0}'.format(channel)
return [ p for p in self.user_partitions if p.scheme == scheme ]
bandwidth = cluster.estimate_bandwidth(X, quantile=0.3)
self.assertNotIn(self.user_name, self.certificates_section.last_certificate_exception.text) self.assertNotIn(notes, self.certificates_section.last_certificate_exception.text)
K = self.kernel_(self.X_train_)
backend = "multiprocessing"
CourseEnrollmentFactory.create(user=self.user, course_id=self.course.id, is_active=True)
sum_comb_c = sum(comb2(n_c) for n_c in contingency.sum(axis=1)) sum_comb_k = sum(comb2(n_k) for n_k in contingency.sum(axis=0))
self.assertFalse(result, msg="User should not have access because the user isn't staff.")
odds = filter(lambda i: i not in skip_idxs, range(1, len(activations), 2))
suite = BokChoyTestSuite('', default_store='invalid') name = 'tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') )
PIPELINE_JS_COMPRESSOR = None
flags = [('Name', name)]
from salt.ext import six from salt.ext.six.moves import zip
from __future__ import absolute_import
return response
self.assertEqual(course.course_image, 'images_course_image.jpg')
self.assertNotIn(test_discussion.location, self.store.get_orphans(course.id))
return list(map(_normalize_dir, ret))
raised = False fmt = OneHotFormatter(max_labels=50) try: fmt.theano_expr(theano.tensor.vector(dtype=theano.config.floatX)) except TypeError: raised = True assert raised
return False
request.url = 'http://testurl/' self.xmodule.verify_oauth_body_sign(request)
cost = SumOfCosts([SumOfParams(), (0., DummyCost())]) model = DummyModel(shapes, lr_scalers=scales) dataset = ArangeDataset(1) momentum = 0.5
cluster_ids, mu = milk.kmeans(X, k)
if not snapshot: ret['error'] = 'one or more snapshots must be specified'
upload_csv_to_report_store(csv_rows, 'course_survey_results', course_id, start_date)
p = linear_response * (linear_response > 0.) + self.left_slope *\ linear_response * (linear_response < 0.) return p
import pwd runas = pwd.getpwuid(os.getuid())[0]
if not settings.FEATURES.get('ENABLE_TEAMS'): filtered_list.append('teams_configuration')
st_ = salt.client.ssh.state.SSHState(__opts__, __pillar__)
REQUIRE_JS = "js/vendor/requirejs/require.js"
query_features = task_input.get('features') student_data = list_may_enroll(course_id, query_features) header, rows = format_dictlist(student_data, query_features)
import salt.utils
self.user_preference.delete() self.assert_user_setting_event_emitted(setting=self.TEST_KEY, old=self.TEST_VALUE, new=None)
response.data["current_page"] = self.page.number
import os import stat import logging
import os import uuid import pprint import logging try:
from django.core import mail return mail.outbox
knn.fit(X, y_str) y_pred = knn.predict(X[:n_test_pts] + epsilon) assert_array_equal(y_pred, y_str[:n_test_pts])
ensure_in_syspath('../../') import salt.ext.six as six from salt.ext.six.moves import reload_module from salt.utils import locales
if _get_msupdate_status(): try: obj_sm.RemoveService('7971f918-a847-4430-9279-4a52d1efe18d') ret['msupdate'] = msupdate except Exception as error:
print('explained variance ratio (first two components): %s' % str(pca.explained_variance_ratio_))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.assertEquals(source_course.wiki_slug, source_wiki_slug)
self.accum.append(function(theano_args, givens=g, updates=u, mode=self.theano_function_mode, name=function_name))
submission = student_answers[self.answer_id]
request_token=None, course=course
self.user = UserFactory.create( username="inactive", email="inactive@example.com", password=self.PASSWORD, is_active=True )
self.certificates_section.refresh()
display_name=_("Certificate Web/HTML View Overrides"), help=_("Enter course-specific overrides for the Web/HTML template parameters here (JSON format)"), scope=Scope.settings,
pass
pass
try: import pythoncom import win32com.client HAS_DEPENDENCIES = True except ImportError: HAS_DEPENDENCIES = False from salt.ext.six.moves import range
log.debug('SQL Query: {0}'.format(cmd)) cur.execute(cmd) return True
ret = [] for process in response['Processes']: cur_proc = {} for idx, val in enumerate(process): cur_proc[columns[idx]] = val ret.append(cur_proc) return ret
return {'ok': False, 'msg': msg}
self.send_future_map[message] = future
from __future__ import absolute_import import json
salt '*' vsphere.get_syslog_config my.esxi.host root bad-password
raise SkipTest
if url is not None: return redirect(url)
task_key = hashlib.md5(task_key_stub).hexdigest()
self.t_ = None
if not update.IsDownloaded and not update.IsInstalled: results['Available'] += 1
#html_domain_indices = True
self.store.publish(locations['parent_sibling'], self.user_id) self.store.publish(locations['parent'], self.user_id)
dense_classifier = AdaBoostClassifier( base_estimator=CustomSVC(probability=True), random_state=1, algorithm="SAMME" ).fit(X_train, y_train)
return self.get_setting_element(self.PROBLEM_TYPE_LABEL).get_attribute('value')
self.update_structure(asset_key.course_key, new_structure)
data = fetch_20newsgroups_vectorized().data[:500]
if expected_labels != [self.VISIBILITY_LABEL_ALL]: expected_labels.append(self.VISIBILITY_LABEL_SPECIFIC) self.assertItemsEqual(expected_labels, [option.text for option in visibility_editor.selected_options])
ret.update({esxi_host: {'Coredump Config': _format_coredump_stdout(response)}})
return {key: val for key, val in self.session.cookies.items()}
expr = stripXML(self.mathml_start + expr + self.mathml_end) expected = stripXML(self.mathml_start + expected + self.mathml_end)
except: pass
return self.q(css='.prompt.{dialog_type}'.format(dialog_type=dialog_type)).visible
import integration import salt.utils
__test__ = True pass
from __future__ import absolute_import
- 'olcDatabase={1}hdb,cn=config': - replace: olcRootDN: - cn=admin,dc=example,dc=com olcRootPW: []
expected_status = ( status.HTTP_200_OK if CourseMode.DEFAULT_MODE_SLUG in configured_modes else status.HTTP_400_BAD_REQUEST ) self.assert_enrollment_status( as_server=True, is_active=False, expected_status=expected_status, )
classes = np.unique(y)
CourseOverview.objects.filter(id=course_key).delete() CourseOverview.load_from_module_store(course_key)
from salt.states import rabbitmq_plugin
self.assertEquals(5, self.response.content.count('grade_A'))
__virtualname__ = 'group'
assert len(world.browser.windows) == 1 alert = world.browser.get_alert() alert.accept() check_no_alert()
return
def __init__(self, array): self.array = array self.shape = array.shape self.ndim = array.ndim self.iloc = ArraySlicingWrapper(array)
return self._get_dot_token(access_token) or self._get_dop_token(access_token)
pass
func_globals.update(overridden_func_globals)
params_bad_ordernum = params.copy() params_bad_ordernum['orderNumber'] = str(order1.id + 10) with self.assertRaises(CCProcessorDataException): payment_accepted(params_bad_ordernum)
dog_stats_api.start(**options)
return self.tracker.backends['mem']
try: imp.find_module(app_name) except ImportError: try: __import__(app_name) except ImportError: continue INSTALLED_APPS += (app_name,)
return SurveyForm.create(self.test_survey_name, self.test_form)
if base_rev is None: fast_forward = True else: fast_forward = __salt__['git.merge_base']( target, refs=[base_rev, remote_rev], is_ancestor=True, user=user)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
exception_classes = [StudentInputError, LoncapaProblemError, ResponseError] for exception_class in exception_classes:
self.assertTrue(self.cart.has_items(item_type=Donation)) self.assertEqual(self.cart.total_cost, unit_cost)
for value in settings.MICROSITE_CONFIGURATION.itervalues(): org_filter = value.get('course_org_filter', None) if org_filter == org: return value.get(val_name, default) return default
wtf_numpy = np.zeros((pool_size_1,)) for i in xrange(pool_size_1): wtf_numpy[i] = on_probs[i] on_probs = wtf_numpy
with filesystem.open('grading_policy.json', 'r') as grading_policy: on_disk = loads(grading_policy.read()) self.assertEqual(on_disk, course.grading_policy)
node_depth = np.zeros(shape=n_nodes) is_leaves = np.zeros(shape=n_nodes, dtype=bool)
self.config.pop('log_datefmt_console', None)
self.assertTrue( 'ERROR' not in self.run_function( 'git.add', [self.repo, filename] ) )
assert self.prefix is not None return "-".join((self.prefix, ) + tuple(getattr(self, field) for field in self.KEY_FIELDS))
import yaml from jinja2 import Environment, DictLoader, exceptions try:
transform = SkewedChi2Sampler(skewedness=c, n_components=1000, random_state=42) X_trans = transform.fit_transform(X) Y_trans = transform.transform(Y)
return { 'email': self._attach_email_claim, 'profile': self._attach_profile_claim }
component = self.store.create_child( self.user_id, test_course.location, 'vertical', )
descriptor = modulestore().get_item(self.course.location) section_grader_type = CourseGradingModel.get_section_grader_type(self.course.location)
for line in output.splitlines(): job_tag = ''
simplefilter('ignore')
res2 = clear_password(name, runas)
module.data = rewrite_nonportable_content_links( source_course_id, dest_course_id, module.data )
super(CertificatesDetailHandlerTestCase, self).setUp('contentstore.views.certificates.tracker')
if code.ndim == 1: code = code[np.newaxis, :] return code
import salt.loader import salt.config import integration from salt.exceptions import SaltRenderError from salt.ext.six.moves import StringIO
from __future__ import absolute_import
auth = _auth(url) if auth is False: ret['res'] = False ret['msg'] = 'missing username and password settings (grain/pillar)' return ret
import salt.utils from salt.utils import which as _which from salt.exceptions import SaltInvocationError
n_iter_ = max(n_iter_) if n_iter_ >= max_iter and verbose > 0: warnings.warn("Liblinear failed to converge, increase " "the number of iterations.", ConvergenceWarning)
resp = self.client.delete('/course/bad/course/key/entrance_exam') self.assertEqual(resp.status_code, 400)
from __future__ import print_function from __future__ import absolute_import import glob import logging import os import re import sqlite3 as lite from salt.exceptions import SaltInvocationError
exams = get_all_exams_for_course(course_key)
from salt.runners import cache import salt.utils
if m_p > m_n: u = x_p / x_p_nrm v = y_p / y_p_nrm sigma = m_p else: u = x_n / x_n_nrm v = y_n / y_n_nrm sigma = m_n
space = [self.spaces[s] for s in self._get_sources] return space[0] if len(space) == 1 else tuple(space)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
exc_info_on_loglevel=logging.DEBUG
parent.insert(parent.index(next_include), incxml)
if presort == 'auto' and issparse(X): presort = False elif presort == 'auto': presort = True
self.class_names = [array[0].encode('utf-8') for array in test['class_names'][0]]
__virtualname__ = 'grub'
page_num = ((offset / MAX_STUDENTS_PER_PAGE_GRADE_BOOK) + 1)
from __future__ import absolute_import, print_function import os import re import time import logging try: import msgpack HAS_MSGPACK = True except ImportError: HAS_MSGPACK = False
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
split_store = modulestore()
sh("mongo {host}:{port} {repo_root}/scripts/delete-mongo-test-dbs.js".format( host=MONGO_HOST, port=MONGO_PORT_NUM, repo_root=Env.REPO_ROOT, ))
self.create_programs_config(program_details_enabled=False) response = self.client.get(self.details_page) self.assertEquals(response.status_code, 404)
pass
sign_active[idx] = -sign_active[idx]
elif video_descriptor.html5_sources: video_url = video_descriptor.html5_sources[0] else: video_url = video_descriptor.source
self._update_head(asset_key.course_key, index_entry, asset_key.branch, new_structure['_id'])
max_squared_sum = 4 + 9 + 16 max_squared_sum_ = row_norms(X, squared=True).max() assert_almost_equal(max_squared_sum, max_squared_sum_, decimal=4)
self.assertEqual(buffer_o, expected_data) self.assertFalse(term.isalive())
course = self.store.get_course(self.store.make_course_key( 'test_org', 'import_draft_order', 'import_draft_order' )) self.assertIsNotNone(course)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'rackspace', vm_['profile'], vm_=vm_) is False: return False
task_folder = task_service.GetFolder(location) task = task_folder.GetTask(name)
self.verify_show_answer_present(True)
import logging
self.distribution.salt_download_windows_dlls = True self.run_command('download-windows-dlls') self.distribution.salt_download_windows_dlls = None
self._verify_unit_warning( self.UnitState(is_released=False, publish_state=self.PublishState.NEVER_PUBLISHED, is_locked=False), self.NEVER_PUBLISHED_WARNING )
accept_header = self.request.headers.get('Accept', '*/*') parsed_accept_header = [cgi.parse_header(h)[0] for h in accept_header.split(',')]
self._assert_course_verification_status(VERIFY_STATUS_NEED_TO_REVERIFY)
self.track_selection_page.enroll('verified')
self.assertFalse(os.path.exists(path_test + '.bak'))
from __future__ import unicode_literals
from __future__ import absolute_import
mono_shape = shape[:s_index] + (1, ) + shape[(s_index + 1):]
target_mod = module + '.' if not module.endswith('.') else module
self.verify_pdf_certificate()
return self.q(css='.action-edit-members').present
return []
return self.q(css='ul.listing-courses')
import integration from salt.exceptions import CommandExecutionError
der = asn1.DerSequence() der.decode(cert_asn1)
sampling_algorithm["numpy-permutation"] = \ lambda n_population, n_sample: \ np.random.permutation(n_population)[:n_sample]
ssh_interface = _get_ssh_interface(vm_)
self.assertFalse(self.has_notes_tab(self.course, self.user))
user = models.ForeignKey(User, db_index=True, null=True) course_id = CourseKeyField(max_length=255, db_index=True)
ret[minion] = data['full_ret']
if self.skipDownloaded and update.IsDownloaded: log.debug(u'Skipped update {0} - already downloaded'.format(update.title)) continue
y_predicted = grid_search.predict(docs_test)
azure.get_blob( storage_conn=storage_conn, container=env, name=blob, local_path=file_name, )
from .celery import APP as CELERY_APP
from __future__ import absolute_import
self.assertSetEqual( set(course_action_state.course_key for course_action_state in expected), set(course_action_state.course_key for course_action_state in found))
results = np.array(np.where(state.marked == 1)).T
MODULESTORE = convert_module_store_setting_if_needed(MODULESTORE)
uid = self.provider.get_social_auth_uid('uid') if uid is not 'uid': query_set = query_set.filter(uid__startswith=uid[:-3])
cache_stat = os.stat(list_cache) age = time.time() - cache_stat.st_mtime
TEST_ROOT = path("test_root") STATIC_ROOT = TEST_ROOT / "staticfiles"
except ValueError: pass
assert_warns(RuntimeWarning, mb_k_means.fit, X)
return parse(out)
logrotate.__salt__ = {}
url(r'^api/bookmarks/', include('openedx.core.djangoapps.bookmarks.urls')),
self.run_cloud('-f remove_key {0} id={1}'.format(PROVIDER_NAME, finger_print)) raise
self.cohort_management_page.select_discussion_topic(self.inline_key)
log = logging.getLogger(__name__)
response = self.client.get(self.url) self.assertNotIn(self.email_modal_link, response.content)
EmptyPromise( lambda: self.q(css=self.certficate_css + " .new-button").present, 'Create first certificate button is displayed' ).fulfill()
db=None, collection=None, host=None, port=None, tz_aware=True, user=None, password=None, ** kwargs
TEST_COURSE = (COURSE_NAME, )
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, patch )
from __future__ import absolute_import
from .metrics import r2_score return r2_score(y, self.predict(X), sample_weight=sample_weight, multioutput='uniform_average')
assert_raises(VerificationException, attempt.approve) assert_raises(VerificationException, attempt.deny)
self.verify_validation_update_usage_info(expected_result, mocked_message)
from salt.pillar import nodegroups
clf = PassiveAggressiveClassifier().fit(X, y) assert_array_equal(clf.classes_, np.unique(y))
return
self.set_logged_in_cookies(request)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
log.info( 'Assuming network_mode \'{0}\' is a network.'.format( kwargs['network_mode']) )
assert_raises(ValueError, e.fit, X_zero_samples, [])
for key, matrix in matrices.items(): del result[key]
X, y_bin = iris.data, iris.target.copy() y_bin[y_bin == 2] = 0
self.xblock.location = Location("org", "import", "run", "category", "stubxblock")
def boot_time(): return psutil.BOOT_TIME
fresh = modulestore().get_course(self.course.id) test_model = CourseMetadata.fetch(fresh)
dest_structure['blocks'][new_parent_block_key].fields['children'] = new_children
for batch in chunk(formated_data, SUBSCRIBE_BATCH_SIZE): result = mailchimp.listBatchSubscribe(id=list_id, batch=batch, double_optin=False, update_existing=True)
logreg.fit(X, Y)
topleft = N.array([kshp[0]-1,kshp[1]-1])
call_command('manage_group', TEST_GROUP, '--remove') self.check_groups([])
file_to_upload = 'image.jpg' self.settings_page.upload_image('#upload-video-thumbnail-image', file_to_upload) self.assertIn(file_to_upload, self.settings_page.get_uploaded_image_path('#video-thumbnail-image'))
return options, args
if line.lstrip().startswith('#') or line.isspace(): continue if line.startswith('iface'): sline = line.split()
path = list() n_alphas = self.alphas inner_verbose = max(0, self.verbose - 1)
include_dependencies = bool(request.GET.get('include-dependencies', False))
z = mask[:, None] * z + (1 - mask[:, None]) * state_before
if self.optimizer not in self._optimizer_types: raise ValueError("optimizer should be one of %s" % self._optimizer_types)
from salt.states import npm
from salt.states import win_dns_client
from __future__ import unicode_literals
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
raise NotImplementedError()
self._login(staff_email, staff_password, should_succeed=False, err_msg_check="Your password has expired due to password policy on this account")
from __future__ import absolute_import
print_monitor_cv.main(filename)
from __future__ import absolute_import
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import salt.utils.templates from salt.exceptions import SaltRenderError
self.q(css=self.PREVIOUS_PAGE_BUTTON_CSS).click() self.wait_for_ajax()
BLACKLIST = [ 'CompositeLayer',
__func_alias__ = { 'set_': 'set' }
self.lc_block = store.get_item(self.lc_block.location) self.problem_in_course = store.get_item(self.problem_in_course.location)
_context.update({ 'base_asset_url': StaticContent.get_base_url_path_for_course_assets(self.location.course_key), 'enable_latex_compiler': self.use_latex_compiler, 'editor': self.editor }) return _context
user_groups = _get_user_partition_groups( self.course.id, [self.split_test_user_partition], self.user ) self.assertEquals(len(user_groups), 1)
grad_shared = sharedX(zv) z_shared = sharedX(zv)
with self.assertRaises(SearchIndexingError): reindex_course_and_check_access(self.course.id, self.user)
fpr, tpr, thresholds = roc_curve(y_true, y_score, drop_intermediate=False) assert_equal(thresholds.size, np.unique(np.round(thresholds, 2)).size)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
gender_label = _(u"Gender")
qry = 'OPTIMIZE TABLE {0}.{1}'.format(s_name, s_table) _execute(cur, qry) results = cur.fetchall() log.debug(results) return results
for t in cls.tags: self._mapping[t] = cls
copy = self.get_json(obj["url"]) self.assertEqual(obj, copy)
if numpy.size(imgshp)==2: imgshp = (1,)+imgshp
super(MyFetcher, self).__init__() self.client = client
from __future__ import absolute_import
mock_model_log_exception.assert_called_once_with( 'Error sending API user notification email for request [%s].', self.api_access_request.id ) self.assertEqual(self.api_access_request.status, ApiAccessRequest.APPROVED)
return self.make_call(reverse('topics_list'), expected_status, 'get', data, **kwargs)
import salt.ext.six as six
from __future__ import absolute_import import os import yaml import signal import shutil
assert_array_equal(votes[0, :], 1) assert_array_equal(np.argmax(votes[1:], axis=1), ovo_prediction[1:]) assert_equal(ovo_prediction[0], normalized_confidences[0].argmax())
el = course_listing[0]
empty_asset_trashcan([self.course.id])
arguments = [] for name in argument_names: arguments.append(getattr(self, name)) return check(*arguments)
from __future__ import absolute_import
'use_master_when_local': bool,
cmd = ['launchctl', sub_cmd] cmd.extend(args)
self.assert_student_in_group(self.groups[0])
compare_branch = getattr(options, 'compare_branch', None) compare_branch_string = u'' if compare_branch: compare_branch_string = u'--compare-branch={0}'.format(compare_branch)
bookmark = Bookmark.objects.get(user=user, usage_key=usage_key) bookmark.delete() _track_event('edx.bookmark.removed', bookmark)
return self.q(css=self._bounded_selector(self.OPTION_SELECTOR)).results
self.course_ids = [unicode(e.course_id) for e in enrollments]
ttype = 'zeromq'
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON
if isinstance(dtype, tuple): return tuple(replace_none_dtypes(d, fallback_dtype) for d in dtype) else: return fallback_dtype if dtype is None else dtype
from cassandra.cluster import Cluster from cassandra.cluster import NoHostAvailable from cassandra.connection import ConnectionException, ConnectionShutdown from cassandra.auth import PlainTextAuthProvider from cassandra.query import dict_factory HAS_DRIVER = True
return False
newaliases = _which('newaliases') if newaliases is not None: __salt__['cmd.run'](newaliases)
from __future__ import absolute_import import os
self.settings_detail.course_pacing = 'Self-Paced' self.settings_detail.save_changes() self.settings_detail.refresh_page() self.assertEqual(self.settings_detail.course_pacing, 'Self-Paced')
from salt.modules import localemod from salt.exceptions import CommandExecutionError
if not hasattr(view_converter, 'topo_space'): raise NotImplementedError("Not able to get a topo_space " "from this converter: %s" % view_converter)
metadata_translations = dict(RawDescriptor.metadata_translations) metadata_translations['attempts'] = 'max_attempts'
result = self.get_result(allow_cache_miss) self.verify_result_with_fallback_and_youtube(result)
cookies.append(cookie)
self.assertIs( bool(access.has_access(user, 'load', modulestore().get_item(block_location), self.course.id)), is_accessible )
import salt.utils
if instance_guid and not consumer.instance_guid: consumer.instance_guid = instance_guid consumer.save() return consumer
microsite.set_by_domain(self.microsite_subdomain) self.assertEqual(microsite.get_value('platform_name'), 'Test Microsite')
self.account_settings_page = AccountSettingsPage(self.browser) self.account_settings_page.visit() self.account_settings_page.wait_for_ajax()
self.assertEqual(num_children, len(reverted_parent.children))
import salt.ext.six as six
for status in statuses: if reverifications[status]: reverifications[status].sort(key=lambda x: x.date) return reverifications
X, y = make_classification(n_samples=200, n_features=100, n_informative=3, random_state=0)
self.course_entry = CourseEnvelope(course_entry_override.course_key, self.course_entry.structure)
import integration
return True
beta = 5 eps = 1e-6 graph.data = np.exp(-beta * graph.data / graph.data.std()) + eps
try:
distances[k - n_samples] = edge.weight
return xblock._edited_on
clf = GradientBoostingClassifier(loss=loss, n_estimators=10, random_state=1, presort=presort)
return self._get_xblocks()
elif trigger_types[trigger_type] == TASK_TRIGGER_BOOT: trigger.Id = 'OnBoot_ID1'
with Timer() as iteration_over_courses_time_1: courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(len(courses_list), USER_COURSES_COUNT)
if course_key.org is None or course_key.course is None or course_key.run is None: return self._active_bulk_ops.records[ course_key.replace(org=None, course=None, run=None, branch=None) ]
UserPartition.scheme_extensions = None super(GroupAccessTestCase, self).tearDown()
if sl_: tmpret = _get_template_texts(source_list=sl_, template=template, defaults=defaults, context=context) if not tmpret['result']: return tmpret text = tmpret['data']
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) signal_handler.send.assert_called_with('course_published', course_key=course.id)
children = self.q(css='.note-group') return [EdxNotesTagsGroup(self.browser, child.get_attribute("id")) for child in children]
page.wait_for_component_menu() click_css(page, 'button>span.large-advanced-icon', menu_index, require_notification=False)
loc_str = unicode(location) if self._max_scores_cache.get(loc_str) != max_score: self._max_scores_updates[loc_str] = max_score
gpg_info_file = '{0}/gpg-agent-info-salt'.format(gnupghome) with salt.utils.fopen(gpg_info_file, 'r') as fow: gpg_raw_info = fow.readlines()
from edxmako.shortcuts import render_to_response from mako.exceptions import TopLevelLookupException from django.http import HttpResponseNotFound
super(HtmlResponse, self).__init__(html, content_type='text/plain')
security_descriptor = win32security.GetFileSecurity( path, win32security.OWNER_SECURITY_INFORMATION) owner_sid = security_descriptor.GetSecurityDescriptorOwner()
super(UniqueCourseTest, self).__init__(*args, **kwargs)
from __future__ import absolute_import
from __future__ import absolute_import
import json from functools import partial import factory from factory.django import DjangoModelFactory
settings.WIKI_ENABLED = False self.assertIsNone(self.get_wiki_tab(self.user, self.course)) self.assertIsNone(self.get_wiki_tab(self.instructor, self.course))
self.assertTrue(storage.exists(file_name)) with storage.open(file_name, 'r') as f: self.assertEqual(expected_content, f.read())
css = {'scss': [resource_string(__name__, 'css/codemirror/codemirror.scss')]} js = {'coffee': [resource_string(__name__, 'js/src/raw/edit/json.coffee')]} js_module_name = "JSONEditingDescriptor"
PERSONAL = 'personal' BUSINESS = 'business' ORDER_TYPES = ( (PERSONAL, 'personal'), (BUSINESS, 'business'), )
import salt.pillar
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, expensiveTest
self.factory(alpha=-.1)
args = vars(ArgParser().parse_args())
new_module = modulestore().get_item(chapter_locator)
return CourseDetails.fetch(course_key)
from salttesting import TestCase, skipIf from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON )
coef = np.zeros(n_features) coef[:n_relevant_features] = coef_min + rng.rand(n_relevant_features)
future = async.async_method()
self.find_css('.group-configuration-description-input').first.fill(value)
'log_granular_levels': dict,
image_shape = (64, 64)
return False
subnet = yaml_data['minion'][0]
exclude_patterns = ['build', 'links.rst']
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.course_hierarchy = self.get_course_hierarchy() self.blocks = self.build_course(self.course_hierarchy) self.course = self.blocks['course']
self.base_loader = base_loader
p_idx = rng.randint(num_p)
course = self.set_up_course(due_date_display_format=u"") text = self.get_text(course) self.assertNotIn("due ", text)
self.assertTrue(glusterfs.delete_volume('Newvolume1')) self.assertTrue(mock_run.called) self.assertTrue(mock_stop_volume.called)
__context__[contextkey] = True
source_version = block.edit_info.source_version return source_version if source_version is not None else block.edit_info.update_version
self._assert_request_status(request_uuid, "pending")
self._test_readonly_field('username', 'Username', self.username)
import integration
return self.get_item(xblock.location.for_version(new_id))
part = dtime.strftime(code)
num_concurrent_tasks = 5
year = datetime.date.today().year age_limit = settings.PARENTAL_CONSENT_AGE_LIMIT profile.year_of_birth = (year - age_limit) - 1 profile.save()
self.assertEqual( info['blocks'], [[reverse_usage_url('container_handler', vertical2.location), 'notes problem in vert2']] )
AUDIT_LOG.info("Redemption of a invalid RegistrationCode %s", registration_code) limiter.tick_bad_request_counter(request) raise Http404()
self._set_group_access({0: [1]}) expected[0]["groups"][1]["selected"] = True self.assertEqual(self._get_partition_info(), expected)
return module.get_explicitly_set_fields_by_scope(Scope.settings)
has_correct_url = self.url.endswith(self.url_path) teams_list_view_present = self.q(css='.teams-main').present return has_correct_url and teams_list_view_present
EmptyPromise( lambda: "login" not in self.browser.current_url, "redirected from the login page" ).fulfill()
('BACKGROUND', (1, 4), (1, 4), '#EEEEEE'),
epoch_num = 6 termination_criterion = EpochCounter(epoch_num)
'COURSES_ARE_BROWSABLE': True,
self.assertEquals(len(mail.outbox), 3)
task_type = 'grade_course' task_class = calculate_grades_csv task_input = {} task_key = "" return submit_task(request, task_type, task_class, course_key, task_input, task_key)
if self.conn.queue_exists(qname): return True return False
else: ret['comment'] = 'Datasource updated.'
pass
n_iter_search = 20 random_search = RandomizedSearchCV(clf, param_distributions=param_dist, n_iter=n_iter_search)
self._validate(is_numeric, batch)
import integration import salt.version from salt import config
self.white_label_course = CourseFactory.create() self.white_label_course_mode = CourseModeFactory.create( course_id=self.white_label_course.id, mode_slug=CourseMode.HONOR, min_price=10, suggested_prices='10', )
microsite.set_by_domain(self.microsite.site.domain) self.assertTrue(microsite.has_override_value('platform_name'))
award = Mock()
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
__virtualname__ = 'user'
self.q(css=self._bounded_selector('.remove-admin-role')).click() wait_for_ajax_or_reload(self.browser)
HOST = '1.2.3.4' USER = 'root' PASSWORD = 'SuperSecret!' ERROR = 'Some Testing Error Message'
iris = load_iris() X = iris.data[:, [0, 2]] y = iris.target X = X[y != 2] y = y[y != 2]
if pkg_ver: if installed_pkg_ver != pkg_ver: pkgs_to_install.append(pkg) else: pkgs_satisfied.append(installed_name_ver)
return self.q(css="a.remove-attempt").present
response = self.client.post(self.send_mail_url, test_email) self.assertEquals(json.loads(response.content), self.success_content)
return vb_machinestate_to_tuple(machinestate)[0]
import integration import salt.utils
y_pred3 = clf.fit(X, y3).predict(X) assert_true(np.any(y_pred3 != y3), 'solver %s' % solver)
return self.get_courses(**kwargs)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self._update_release_dates(self.date_one, self.date_two, self.date_two) self._verify_release_date_source(self.vertical, self.sequential)
import salt.client.ssh
self.client.logout() self.assertEqual(403, self._post_to_view().status_code)
page.browser.execute_script("jQuery.fx.off = true;")
MODULE_DOCS = __doc__
from salt.states import layman
course_with_disabled_forums = CourseFactory.create() CourseEnrollmentFactory.create(user=user, course_id=course_with_disabled_forums.id) _remove_discussion_tab(course_with_disabled_forums, user.id) return course_with_disabled_forums
attrs.append(node.id) self.accessed_names.add('.'.join(reversed(attrs)))
from __future__ import absolute_import
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
self._socket = self.context.socket(zmq.REQ) if hasattr(zmq, 'RECONNECT_IVL_MAX'): self._socket.setsockopt( zmq.RECONNECT_IVL_MAX, 5000 )
self._configure_course()
se = SpectralEmbedding(n_components=1, affinity="precomputed", random_state=np.random.RandomState(seed), eigen_solver="<unknown>") assert_raises(ValueError, se.fit, S)
X, y = make_multilabel_classification(allow_unlabeled=False, random_state=0) X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
cherrypy.config.update(conf['global'])
self.org = org self.course_id = course_id self.run = run self.language = None
from __future__ import absolute_import
return remote_key.split(u"___", 1)[1]
self.server.config['test_1'] = {'response': True} self.server.config['test_2'] = {'response': False}
idx = np.argsort(np.sum((X - mean[np.newaxis, :]) ** 2, axis=1)) X = X[idx, :]
n_samples, n_features = 6, 5 y = rng.randn(n_samples) X = rng.randn(n_samples, n_features)
from salttesting.helpers import ensure_in_syspath, skip_if_binaries_missing ensure_in_syspath('../../')
exc_info_on_loglevel=logging.DEBUG
CourseEnrollmentFactory(user=other_user, course_id=self.courses[0].id)
return self.backend_name == pipeline['backend'] and self.idp_slug == pipeline['kwargs']['response']['idp_name']
return tab.is_enabled(course, user=user)
return _client().cache_local_file(path)
with check_mongo_calls(4, 2):
os.environ.clear() os.environ.update(original_environ)
filter: {'kw': 'args'}
return False
add_user_with_status_unrequested(self.user) self.assertEqual('granted', get_course_creator_status(self.user))
self._add_prerequisite_course() self.init_course_access() self._verify_unfulfilled_milestone_response()
if not isinstance(cmp_result, numbers.Integral): log.error('The version comparison function did not return an ' 'integer/long.') return False
owner = batch.owner assert 'Subtensor' in str(owner.op) batch = owner.inputs[0]
self.join(other2, main)
data = fetch_olivetti_faces() X = data.images.reshape((len(data.images), -1)) y = data.target
for row in db_query: row_loc = course_id.make_usage_key_from_deprecated_string(row['module_state_key']) if row_loc not in prob_grade_distrib: prob_grade_distrib[row_loc] = { 'max_grade': 0, 'grade_distrib': [], }
return self.q(css=TOPIC_CARD_CSS).results
self.assertEqual(response.status_code, expected_status) parsed_content = json.loads(response.content) self.assertEqual(parsed_content, expected_content)
return self.list_display
iris = datasets.load_iris() perm = rng.permutation(iris.target.size) iris.data, iris.target = shuffle(iris.data, iris.target, random_state=rng)
end_idx = num_assets
resp = self.client.get(url) self.assertEqual(resp.status_code, 200) self.assertIn("Course is full", resp.content)
self.q(css='div.problem .choicegroup input[value="' + choice_value + '"]').click() self.wait_for_ajax()
if features is not None: valid_set = valid_set[:, features] test_set = test_set[:, features]
np.testing.assert_allclose(f([[1]], [[0]]), [20, 20 / np.sqrt(2)])
if 'tgt_type' not in data: data['tgt_type'] = 'glob' kwargs = {}
CourseEnrollmentFactory.create( user=self.user, course_id=course_key, mode=mode )
kwargs.setdefault("name", "Dummy") kwargs.setdefault("backend_name", "dummy") return cls.configure_oauth_provider(**kwargs)
z = zr.astype(self.tp.upper())
prior = DummyPrior() vae = DummyVAE() prior.set_vae(vae) prior.set_vae(vae)
if timed_exam.is_proctored_exam and not timed_exam.is_practice_exam: try: update_review_policy( exam_id=exam_id, set_by_user_id=timed_exam.edited_by, review_policy=timed_exam.exam_review_rules ) except ProctoredExamReviewPolicyNotFoundException:
for error_inputs, error_message in self.BAD_JSON_INPUTS: for einput in error_inputs: with self.assertRaisesRegexp(LTIError, error_message): self.xmodule.parse_lti_2_0_result_json(einput)
self.setup_system_xmodule_mocks_for_lti20_request_test() mock_request = self.get_signed_lti20_mock_request(self.GOOD_JSON_PUT) response = self.xmodule.lti_2_0_result_rest_handler(mock_request, None) self.assertEqual(response.status_code, 404)
try: course_key = CourseKey.from_string(args[0]) except InvalidKeyError: try: course_key = SlashSeparatedCourseKey.from_deprecated_string(args[0]) except InvalidKeyError: raise CommandError(unicode(GitExportError.BAD_COURSE))
return fnd
import salt.ext.six as six
mkn = max_kernel_norm dn = detector_normalization on = output_normalization
MAX_MEMORY = np.int(2e9)
self.assertDeserializeEqual(False, 'false') self.assertDeserializeEqual(True, 'true')
import salt.client import salt.runner import salt.wheel
unique_tab_types = [ CoursewareTab.type, CourseInfoTab.type, 'textbooks', 'pdf_textbooks', 'html_textbooks', ]
PIPELINE_CSS_COMPRESSOR = None PIPELINE_JS_COMPRESSOR = None
parser = PDFParser(pdf_buffer) document = PDFDocument(parser, password)
for line in f:
self.execute_check_function(idset, submission)
staff_access = False errored_courses = {} if has_access(user, 'staff', 'global'): staff_access = True errored_courses = modulestore().get_errored_courses()
self.assertTrue(res_json['success'])
x = np.arange(plots.shape[1]) x += n_min
mod.__deepcopy__ = lambda x: mod
VIDEO_SOURCE_DIR = REPO_ROOT / "test_root" / "data" / "video"
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
LogoutPage(self.browser).visit() self._make_har_file(login_page)
COMMENT_WITH_NL = tokenize.generate_tokens(['#\n'].pop).send(None)[1] == '#\n'
required_boto3_version = '1.2.1'
mock_create_subtask_fcn_args = mock_create_subtask_fcn.call_args_list self.assertEqual(len(mock_create_subtask_fcn_args[0][0][0]), 3) self.assertEqual(len(mock_create_subtask_fcn_args[1][0][0]), 3) self.assertEqual(len(mock_create_subtask_fcn_args[2][0][0]), 2)
version = '0.1' release = '0.1'
with remove_ccx(location) as (location, restore): return restore( self._modulestore.convert_to_draft(location, user_id) )
if not user: user = AnonymousUser()
import os import stat import logging
if self.n_classes_ > 1: max_features = max(1, int(np.sqrt(self.n_features))) else: max_features = self.n_features
age = years_ago - 1 self.assertEqual(self.profile.age, age)
return list(reversed(course_updates.items))
data, vm_ = request_instance(vm_)
y_pred_proba_mo = knn_mo.predict_proba(X_test) assert_equal(len(y_pred_proba_mo), n_output)
enrollment = self.enroll() enrollment.is_active = False enrollment.save() self.assertIsNone(self.service.get_credit_state(self.user.id, self.course.id))
validators = ( traverse_tree, )
if clear_load['fun'] != 'saltutil.find_job': log.warning( 'Authentication failure of type "token" occurred.' ) return ''
self.assertIn( 'spongebob', self.run_function('softwareupdate.list_ignored')) self.assertIn( 'squidward', self.run_function('softwareupdate.list_ignored'))
self.assertEquals(3, self.response.content.count('grade_B'))
from __future__ import absolute_import import os
return getattr(cls.Meta, 'read_only_fields', '') + getattr(cls.Meta, 'explicit_read_only_fields', '')
return block_type in DETACHED_BLOCK_TYPES
n_samples, self.n_features_ = X.shape
self.run_script( 'salt-call', '-c {0} --output-file={1} -g'.format( self.get_config_dir(), output_file ), catch_stderr=True, with_retcode=True ) stat1 = os.stat(output_file)
from __future__ import absolute_import import os import shutil import tempfile import uuid
c_int32 = astype(a_int32, dtype=np.int32, copy=False) assert_true(c_int32 is a_int32)
language_preference = get_user_preference(self.real_user, LANGUAGE_KEY) if not language_preference: language_preference = settings.LANGUAGE_CODE return language_preference
self.store.delete_course(course_id, self.user.id)
CourseEnrollment.enroll(user, course_id) self.assertTrue(CourseEnrollment.is_enrolled(user, course_id)) self.assert_enrollment_event_was_emitted(user, course_id)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
super(FormatInterpolateVisitor, self).__init__(file_contents, results) self.interpolates_text_or_html = False self.format_caller_node = None
from sklearn import datasets, svm, metrics
from __future__ import absolute_import
try: from genshi.template import MarkupTemplate from genshi.template import NewTextTemplate from genshi.template import OldTextTemplate HAS_LIBS = True except ImportError: HAS_LIBS = False
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
epoch_num = 15 termination_criterion = EpochCounter(epoch_num)
email_feature_dict['email'] = email_info
if act_func is not None: activations[i] = act_func(activations[i])
oob_best_iter = x[np.argmin(cumsum)]
image = ':'.join(_get_repo_tag(name)) all_tags = __salt__['dockerng.list_tags']()
keyring.set_keyring(TestKeyring()) HAS_KEYRING = True
copy_course_videos(source_course_key, destination_course_key)
clf = ensemble.RandomForestClassifier(n_estimators=100, random_state=0)
high_reg_model = ElasticNet(alpha=final_alpha * 10).fit(X, y) assert_greater(low_reg_model.n_iter_, high_reg_model.n_iter_)
PY2 = sys.version_info[0] == 2 PY3 = sys.version_info[0] == 3
def __init__(self): super(_RequestCache, self).__init__() self.data = {} self.request = None
if self.find_css('.collection-edit').present: return 'edit' elif self.find_css('.collection').present: return 'details'
K = self.kernel_(self.X_train_) K[np.diag_indices_from(K)] += self.alpha
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
if rate_limiter.is_rate_limit_exceeded(request): log.info(u"Bad request rate limit exceeded for update example certificate end-point.") return HttpResponseForbidden("Rate limit exceeded")
runtime = SubFactory(ContainerDescriptorRuntimeFactory) children = range(3)
from __future__ import absolute_import
return len(self._line_start_indexes)
from __future__ import absolute_import import os import yaml import shutil
roc_auc_scorer = make_scorer(roc_auc_score, greater_is_better=True, needs_threshold=True) average_precision_scorer = make_scorer(average_precision_score, needs_threshold=True) precision_scorer = make_scorer(precision_score) recall_scorer = make_scorer(recall_score)
self.cleanup() if self.running: self.running = False self.timer_stop.set() self.timer.join()
stack = [node] locations = [] while stack: curr = stack.pop() locations.append(curr.location) if curr.has_children: stack.extend(curr.get_children()) return locations
opts['hash_type'] = opts['hash_type'].lower()
return self.q(css='.is-active').attrs('data-url')[0]
config = CertificateHtmlViewConfiguration(enabled=enabled, configuration=configuration_string) config.save() return config
html5_ids = [x.split('/')[-1].rsplit('.', 1)[0] for x in html5_sources] return html5_ids
from salt.exceptions import CommandExecutionError from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self._create_cert(self.courses[0].id, self.user, CertificateStatuses.error) self._create_cert(self.courses[1].id, self.user, other_status)
precompute = False
idx = 0 start_idx = end_idx for rd in rings: start_idx = restore_ring(img, idx, rd, dense_input, start_idx) idx += rd
import os
url = '{0}&order_by=display_name&sort_order=desc'.format(self.list_url_master_course) resp = self.client.get(url, {}, HTTP_AUTHORIZATION=self.auth)
return self.pk_with_subclass, set([self._tax_deduction_msg()])
raise SaltInvocationError('Only can use keystone admin token ' + 'with Glance API v1')
if cmp_result < -1: cmp_result = -1 elif cmp_result > 1: cmp_result = 1
raise NotImplementedError()
'to-port',
input_dict = {'1_2_1': '42'} correct_map = problem.grade_answers(input_dict)
X = 5 * rng.rand(10000, 1) y = np.sin(X).ravel()
clf = svm.SVR(kernel=lambda x, y: np.array([[1.0]])) clf.fit(X, y) assert_raises(ValueError, clf.predict, X)
from salt.modules import twilio_notify
msg = "Specified problem does not support rescoring." raise UpdateProblemModuleStateError(msg)
assert len(state) == 2 if isinstance(coeffs, str): coeffs = float(coeffs) assert isinstance(coeffs, float) _, state = state state = [state] coeffs = [coeffs]
try: content = contentstore().find(asset_key) except NotFoundError: raise AssetNotFoundException
if name in CROSS_DECOMPOSITION: for iter_ in estimator.n_iter_: assert_greater_equal(iter_, 1) else: assert_greater_equal(estimator.n_iter_, 1)
with modulestore().default_store(ModuleStoreEnum.Type.split): self.course = CourseFactory.create()
self.problem_page.a11y_audit.config.set_scope( include=['div#seq_content'])
'pidfile': '/var/run/salt-api.pid', 'logfile': '/var/log/salt/api', 'rest_timeout': 300,
average_times_exact = [] average_times_approx = [] std_times_approx = [] accuracies = [] std_accuracies = [] average_speedups = [] std_speedups = []
if n_useless > 0: X[:, -n_useless:] = generator.randn(n_samples, n_useless)
return { cls.STRING_PAYLOAD, cls.ROOT_EXTRA_FIELDS, cls.CONTEXT_EXTRA_FIELDS, }
return u"[{username}] {name}: {value}".format( name=self.name, value=self.value, username=self.user.username, )
if per_example is None: return None
tab_id_locator = request.json['tab_id_locator']
if 'custom_check' in self.text_customization:
print("--- Dense matrices")
return model.log_prob(X) - self.noise.log_prob(X)
grid_search_no_score = GridSearchCV(clf_no_score, {'C': Cs}) assert_raise_message(TypeError, "no scoring", grid_search_no_score.fit, [[1]])
user.is_staff = False user.save()
context['duplicate_provider'] = pipeline.get_duplicate_provider(messages.get_messages(request))
pass
self.check_val('True', True)
cohort = CohortFactory(course_id=course_id, name=cohort_name) CourseCohortFactory(course_user_group=cohort, assignment_type=assignment_type) return cohort
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) signal_handler.send.assert_called_with('course_published', course_key=course.id)
with self.assertNumQueries(1): with self.assertRaises(ObjectDoesNotExist): api.get_bookmark(user=self.other_user, usage_key=self.vertical_1.location)
return
world.browser.execute_script("jQuery.fx.off = true;")
store = self._verify_modulestore_support(xblock.location.course_key, 'has_changes') return store.has_changes(xblock)
course_key, _ = strip_ccx(course_key) return self._modulestore.check_supports(course_key, method)
if INSTANCE_NAME in [i.strip() for i in self.run_cloud('--query')]: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
assert_equal(iterations, expected_n_iter) if n_samples is not None: assert_equal(collected_test_samples, set(range(n_samples)))
open(self.distribution.salt_version_hardcoded_path, 'w').write( INSTALL_VERSION_TEMPLATE.format( date=DATE, full_version_info=__saltstack_version__.full_info ) )
venv_dir = os.path.join( integration.TMP, 'pip-installed-specific-env' )
from __future__ import absolute_import import logging
self.assertTrue(item.is_staff_only) if hasattr(item, 'children'): for child in item.children(): self._verify_descendants_are_staff_only(child)
target = iris.target_names[iris.target] clf = GradientBoostingClassifier(n_estimators=10, random_state=1) clf.fit(iris.data, target)
dropped_minions = set(curr_minions) - set(minions_detected)
def custom_score(y_true, y_pred): return (((y_true == y_pred).sum() - (y_true != y_pred).sum()) / y_true.shape[0])
rng = make_np_rng(None, 322, which_method="shuffle")
X2, Y2, p_c, p_w_c = make_multilabel_classification( n_samples=25, n_features=20, n_classes=3, random_state=0, allow_unlabeled=allow_unlabeled, return_distributions=True)
self.assertInCourseListing(source_course_key) self.assertInCourseListing(destination_course_key)
import salt.utils.event
self.prev_floatX = config.floatX config.floatX = 'float64'
if sample_weight is None: sample_weight = np.ones(n_samples, dtype=np.float64, order='C')
course_overview = enrollment.course_overview if not course_overview: log.error( "User %s enrolled in broken or non-existent course %s", user.username, enrollment.course_id ) continue
self.assert_response_with_delete_cookie()
from __future__ import absolute_import import re
FEATURES['ENTRANCE_EXAMS'] = True ENTRANCE_EXAM_MIN_SCORE_PCT = 50
if len(nontext) / len(data) > 0.30: return True return False
import salt.ext.six as six from salt.ext.six.moves import map, range, reload_module
xml = etree.fromstring(expr) xml = self.formulaInstance.preprocess_pmathml(xml) test = etree.tostring(xml)
self.add(metadata_to_insert)
from __future__ import absolute_import from __future__ import unicode_literals import sys import time from salttesting import TestCase, skipIf from salttesting.helpers import destructiveTest from salt.modules import reg as win_mod_reg try:
self.check_event_response_by_key('flag_resource', resource, 'reason', '')
return False
CourseEnrollment.enroll(user, course_id) self.assertTrue(CourseEnrollment.is_enrolled(user, course_id)) self.assert_enrollment_event_was_emitted(user, course_id)
if not settings.FEATURES.get('MILESTONES_APP', False): return None from milestones import api as milestones_api return milestones_api.add_milestone(milestone_data)
from __future__ import absolute_import import yaml
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, mock_open, patch, NO_MOCK, NO_MOCK_REASON )
import salt.utils from salt.ext.six.moves import range
self.assertIn( "Certificate has been successfully invalidated for {user}.".format(user=self.student_name), self.certificates_section.certificate_invalidation_message.text )
self._verify_unit_warning( self.UnitState(is_released=True, publish_state=self.PublishState.UNPUBLISHED_CHANGES, is_locked=False), self.LIVE_UNPUBLISHED_WARNING )
self.assertTrue(self.creator_admin.has_change_permission(self.request)) self.request.user = self.user self.assertFalse(self.creator_admin.has_change_permission(self.request))
self.assertEqual(len(httpretty.httpretty.latest_requests), 1)
return [('127.0.0.1:11211 (1)', {})]
rng = np.random.RandomState(42) X = rng.randint(20, size=(4, 5))
self.assertIsNone(auth.authenticate(password=password, username=username))
course_about_accessor = lambda object, field_name: CourseDetails.fetch_about_attribute(object.id, field_name)
from edxval.api import copy_course_videos
self.assertEqual(record.course_key, self.course_key)
self.__init__()
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'openstack', vm_['profile'], vm_=vm_) is False: return False
if not uninstaller: log.error('Error: No installer or uninstaller configured ' 'for package {0}'.format(name)) ret[target] = {'no uninstaller': version_num} continue
payload['email'] = user.email
__opts__['test'] = orig_test return ret
import os
if not self.options.name and not \ self._check_enabled_suites(include_unit=True, include_cloud_provider=True): self._enable_suites(include_unit=True)
self.assertFalse(EmbargoedCourse.is_embargoed(course_id))
thread_yields = [100, 200, 500, 1000] thread_locks = [2, 4, 8, 16]
if directory is not None: cmd.extend(['--working-dir', directory])
return conn.validate_template(template_body, template_url)
assert preprocessor.P_.shape == (self.X.shape[1], self.X.shape[1]) assert_allclose(np.dot(preprocessor.P_, preprocessor.inv_P_), identity, rtol=1e-4)
BASE_URL = os.environ.get('test_url', 'http://localhost:8031')
self.assertFalse(CourseEnrollment.is_enrolled(self.user, self.course.id)) self.assert_no_events_were_emitted()
params_wrong_amt = params.copy() params_wrong_amt['ccAuthReply_amount'] = '1.00' with self.assertRaises(CCProcessorWrongAmountException): payment_accepted(params_wrong_amt)
TASK_LOG = logging.getLogger('edx.celery.task')
from salt.modules import openstack_config from salt.exceptions import CommandExecutionError
if user: state_object.updated_user = user
cwd = str(cwd)
return context["cc_requester"]["id"] == cc_content["user_id"]
error_msg = _(u"You must agree to the {platform_name} {terms_of_service}.").format( platform_name=get_themed_value("PLATFORM_NAME", settings.PLATFORM_NAME), terms_of_service=terms_link )
VERIFICATION_DEADLINE = "verification" UPGRADE_DEADLINE = "upgrade"
from __future__ import absolute_import import logging import time
clf = self.factory().fit(X2, Y2, coef_init=np.zeros((3, 2)))
courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(courses_list, [])
rabbitmq.__salt__ = {}
html_logo = 'logos/scikit-learn-logo-small.png'
skip_if_no_sklearn() mapping = {'dataset_iterator': 'StratifiedDatasetKFold'} test_yaml = test_yaml_dataset_iterator % mapping trainer = yaml_parse.load(test_yaml) trainer.main_loop()
self.assert_grade(problem, 'choice_3', 'incorrect') self.assert_grade(problem, 'not_a_choice', 'incorrect')
return 'present'
import salt.crypt import salt.utils.event import salt.payload import salt.transport import salt.ext.six as six
if 'gateway' in vm_: deploy_kwargs.update({'gateway': vm_['gateway']})
if grad.shape[0] > n_features: grad[-1] = z0.sum() return out, grad
from salttesting import TestCase from salttesting.mock import ( MagicMock, mock_open, patch, ) from salt.modules import hosts from salt.ext.six.moves import StringIO
response_dict = self._get_page_data(response) self.assertEqual(response_dict['course_mode_slug'], expected_mode)
for func in dir(base): if not func.startswith('process_'): continue
def __singleton_init__(self, opts, **kwargs): self.opts = dict(opts) self.ttype = 'zeromq'
'MAX_NOTE_LIMIT': 1000,
grade_summary['raw_scores'] = raw_scores
from __future__ import absolute_import import re import salt.ext.six as six
set_tsign = sub(set_limit, flo(div(set_sizes, set_batch))) set_tsize = mul(set_tsign, flo(div(set_range, set_limit)))
return aes_decrypt(base64.urlsafe_b64decode(encoded_data), key)
if refresh: refresh_db()
return iter(getattr(d, _iterkeys)(**kw))
assert_raises(ValueError, auc, [1.0, 0.0, 0.5], [0.0, 0.0, 0.0])
if sys.version_info[0] == 3: MAX_SIZE = sys.maxsize string_types = (str,) else: MAX_SIZE = sys.maxint string_types = (basestring,) from itertools import imap as map
from salt.states import win_firewall import salt.utils
folders_list_in_path.extend(['data', 'uploads', file_name])
from __future__ import absolute_import, print_function from mock import call import re
email_context = {'name': '', 'email': ''} email_context.update(global_email_context)
if set(dns_servers or ['None']) != set(cur_dns_servers): changes['dns_servers'] = dns_servers
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call )
MULTILABELS_METRICS = [ "accuracy_score", "unnormalized_accuracy_score", "hamming_loss", "jaccard_similarity_score", "unnormalized_jaccard_similarity_score", "zero_one_loss", "unnormalized_zero_one_loss",
#pylint: disable=E0602
extra['w'] = extra.get('w', 0)
from salt.log.setup import LOG_LEVELS from salt.log.mixins import NewStyleClassMixIn import salt.utils.network
self.assertItemsEqual( data.keys(), ['company_about_url', 'company_privacy_url', 'company_tos_url'] )
self.thread_page_2.check_focus_is_set(selector=".discussion-article")
LmsAutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id).visit()
'shoppingcart',
return False if str is None else str.lower() == "true"
import logging
return False
return coin_flip()
resp_asset = post_asset_update(False, course) self.assertFalse(resp_asset['locked']) verify_asset_locked_state(False)
t1 = phi / rho t2 = -theta / rho dk = (1 / rho) * w
if slug_is_numerical(slug): slug = slug + "_"
precs_full = np.array([np.diag(1. / np.sqrt(x)) for x in covars_diag])
__salt__
items = store.get_items(course.id, settings={'group_access': {'$exists': True}}, include_orphans=False) return GroupConfiguration._get_content_groups_usage_info(course, items)
self._validate_vocabulary() max_df = self.max_df min_df = self.min_df max_features = self.max_features
'state_output_diff': bool,
self.assertTrue(self.lc_block.has_dynamic_children())
import logging import os
next_cart = Order.get_cart_for_user(user=self.user) self.assertNotEqual(cart, next_cart) self.assertEqual(next_cart.status, 'cart')
binary_metric = (lambda y_true, y_score, average="macro": _average_binary_score( precision_score, y_true, y_score, average)) _check_averaging(binary_metric, y_true, y_pred, y_true_binarize, y_pred_binarize, is_multilabel=True)
self.assertTrue(self._is_valid_key(key), msg="Failed for key length {0}".format(length))
arnorm = alfa * beta if arnorm == 0: print(msg[0]) return x, istop, itn, r1norm, r2norm, anorm, acond, arnorm, xnorm, var
ModeCreationPage( self.browser, self.course_id, mode_slug=u'verified', mode_display_name=u'Verified Certificate', min_price=10, suggested_prices='10,20' ).visit()
days_early_for_beta = FloatField(null=True) mobile_available = BooleanField(default=False) visible_to_staff_only = BooleanField(default=False)
CourseEnrollmentFactory.create( user=user, course_id=course_key, mode=mode )
return serializer.data
return any(is_marketing_link_set(name) for name in names)
self.assertFalse([ requirement for requirement in requirements if requirement['namespace'] == 'proctored_exam' ])
entrance_exam_minimum_score_pct = _get_default_entrance_exam_minimum_pct() if ee_min_score != '' and ee_min_score is not None: entrance_exam_minimum_score_pct = float(ee_min_score) return create_entrance_exam(request, course_key, entrance_exam_minimum_score_pct)
from salt.cloud import libcloudfuncs libcloudfuncs.check_libcloud_version()
super(VectorSpace, self)._validate_impl(is_numeric, batch)
import yaml
return [ block for block in modulestore().get_items( course_key, qualifiers={"category": category}, revision=ModuleStoreEnum.RevisionOption.published_only, ) if _is_in_course_tree(block) ]
NAME_CHARS = u'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-' NAME_CHARS_W_UNICODE = NAME_CHARS + u'àĚŘǅΦШΩΣӔ'
sls[ps_opts['d-i']['languagechooser']['language-name-fb']['argument']] = { 'locale': ['system'] }
from __future__ import absolute_import import re
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from salt.ext.six.moves import map from salt.exceptions import CommandNotFoundError
import salt.ext.six as six
from .aws import * import os from django.core.exceptions import ImproperlyConfigured
labels = np.array([1, 1, 1, 2, 2]) assert_raises(ValueError, cval.LabelKFold, labels, n_folds=3)
url(r'^api/profile_images/', include('openedx.core.djangoapps.profile_images.urls')),
ret.update(difference)
return None
task_folder = task_service.GetFolder(location) task_definition = task_folder.GetTask(name).Definition actions = task_definition.Actions
TRACK_MAX_EVENT = 50000
self.context['return_to_annotation'] = False xml = self.render_to_xml(self.context) self.assert_no_xpath(xml, xpath, self.context)
print(file=ex_file) print('Examples using ``%s``' % backref, file=ex_file) print('%s--' % ('-' * len(backref)), file=ex_file) print(file=ex_file)
for correctness in ['correct', 'incorrect']: self.problem.correct_map = CorrectMap()
before_finders = list(settings.STATICFILES_FINDERS) before_dirs = list(settings.STATICFILES_DIRS)
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
segment_event_name = segment_properties['name'] disallowed_substring_names = [ a.lower() for a in getattr(settings, 'TRACKING_SEGMENTIO_DISALLOWED_SUBSTRING_NAMES', []) ]
self.assertEqual( self.run_function('timezone.set_zone', ['spongebob']), 'ERROR executing \'timezone.set_zone\': ' 'Invalid Timezone: spongebob')
assert world.is_css_present(sel)
return self.entrance_exam_message_selector.is_present() \ and "You have passed the entrance exam" in self.entrance_exam_message_selector.text[0]
__virtualname__ = 'random'
self.assertEqual(module.attempts, 1)
return self.client.get(reverse('xdomain_proxy'))
assert_equals(expected, deserialize_field(self.test_field(), arg))
dbm = make_random_basic_binary_dbm( rng = rng, pool_size_1 = pool_size_1, )
if not name and not pkgs: return 'Must pass a single package or a list of packages'
return cache_and_return(Location._from_deprecated_son(parents[0]['_id'], location.course_key.run))
transformer_clone = clone(transformer) X_pred = transformer_clone.fit_transform(X, y=y_)
_, res = SendMessageTimeout(HWND_BROADCAST, WM_SETTINGCHANGE, 0, 0, SMTO_ABORTIFHUNG, 5000) return not bool(res)
self.assertRaises( ValidationError, CourseCompleteImageConfiguration(mode='test2', icon=get_image('unbalanced')).full_clean )
assert_raises(ValueError, precision_recall_fscore_support, [0, 1, 2], [1, 2, 0], average='mega')
return get_url("TOS_AND_HONOR")
app.connect('build-finished', embed_code_links)
from salt.modules import rpm
score += _loglikelihood(doc_topic_prior, doc_topic_distr, dirichlet_doc_topic, self.n_topics)
if self.child_descriptor is None: return [] return [self.child_descriptor]
return np.log(self.predict_proba(X))
ntf = tempfile.NamedTemporaryFile() ntf.write(self.as_string()) ntf.flush() return ntf
mako_middleware_process_request(request)
return _render_report_form(start_date, end_date, start_letter, end_letter, report_type, date_fmt_error=True)
distances = np.zeros(shape=(X.shape[0],), dtype=np.float64)
assert_raises(ValueError, plot_partial_dependence, clf, iris.data, [0, 1], grid_resolution=grid_resolution)
if dns_label.match(name): return True else: return False
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, source_course_key): component = self.store.get_item(published_xblock.location) self.assertEqual(component.display_name, updated_display_name)
import matplotlib.pyplot as plt
__remove_null_logging_handler()
received_objects = fetch_results.received_objects
cond = np.logical_or(y == i, y == j) y = y[cond] y_binary = np.zeros_like(y) y_binary[y == j] = 1 return _partial_fit_binary(estimator, X[cond], y_binary)
return self.q(css='.wrapper-content ' + self.certficate_css + ' .no-content').text[0]
education_level_label = _(u"Highest level of education completed")
initialize_permissions(destination_course_key, User.objects.get(id=user_id))
exc_info_on_loglevel=logging.DEBUG
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
for name in SCORERS.keys(): yield check_scorer_memmap, name
email, password = self._setup_user() self._login(email, password) email, password = self._setup_user(is_staff=True) self._login(email, password)
raise NotImplementedError
stack_k = stack[k] stack[k] = _cleanup(v) v = stack_k
listen_for_course_publish(self, self.course.id)
import os import os.path import logging
is_microsite.return_value = True is_enabled = EcommerceService().is_enabled(self.user) self.assertTrue(is_enabled)
client_args={"disable_ssl_certificate_validation": True}
courses_list_by_groups, __ = _accessible_courses_list_from_groups(self.request)
precompute = 'auto' Xy = None
state_label = _(u"State/Province/Region")
open_jids.add(jinfo['jid'])
self.assertNotIn(self.module_key, self.loader)
response = getattr(self.client, method)(self.path) self.assertEqual(response.status_code, 405)
import salt.utils.boto3 import salt.utils.compat import salt.utils from salt.ext.six import string_types
X = check_array(X, accept_sparse=['csc'], ensure_2d=False) if issparse(X): X.sort_indices()
email_params = get_email_params(course, auto_enroll=True, course_key=ccx_id, display_name=ccx.display_name) enroll_email( course_id=ccx_id, student_email=request.user.email, auto_enroll=True, email_students=True, email_params=email_params, )
try: import git import gitdb HAS_GITPYTHON = True except ImportError: HAS_GITPYTHON = False
n_clusters_range = [2, 10, 50, 90] n_samples = 100 n_runs = 10
out_file = os.path.join(conn['reactor_path'], member.name)
self.create_credentials_config() self.create_programs_config()
self.learning_rates = {} self.base_lr = theano._asarray(base_lr, dtype=theano.config.floatX)
import salt.utils import salt.ext.six as six
self.browser.execute_script("jQuery.fx.off = true;")
scsi_spec.device.sharedBus = vim.vm.device.VirtualSCSIController.Sharing.virtualSharing
'master_finger': str,
target_mod = module + '.' if not module.endswith('.') else module
rho_0 = math.tanh(F - 1.96 * F_se) rho_1 = math.tanh(F + 1.96 * F_se)
required_boto3_version = '1.2.1'
request = HttpRequest() request.method = "GET" request.session = session
'openedx.core.djangoapps.self_paced',
self._dict = {}
def _str_header(self, name, symbol='`'): return ['**' + name + '**'] + [symbol*(len(name)+4)]
tol = 2 * np.finfo(M.dtype).eps
self.assertEqual(context['currency'], 'PKR') self.assertEqual(context['currency_symbol'], 'Rs')
if not properties: properties = {}
for asset in assets: asset_node = etree.SubElement(node, "asset") asset.to_xml(asset_node)
__virtualname__ = 'service'
create_exam( course_id=unicode(self.course.id), content_id='foo3', exam_name='A Proctored Exam', time_limit_mins=10, is_proctored=True, is_active=True, is_practice_exam=True )
if __name__ == '__main__':
cached_pkg = uninstaller
if self.post_dict.get('roles'): role = '<h5>Role: {}</h5>'.format(self.post_dict['roles']) else: role = ''
self.logout() self.login(self.global_staff_user) self.assertTrue(self.enroll(self.course))
for saltenv in environments: env_files = [k for k in files if k['Key'].startswith(saltenv)]
return saltstack_version
set_limits = False if prev_soft < min_soft: soft = min_soft set_limits = True else: soft = prev_soft
if record.failure_count >= max_failures_allowed: lockout_period_secs = settings.MAX_FAILED_LOGIN_ATTEMPTS_LOCKOUT_PERIOD_SECS record.lockout_until = datetime.now(UTC) + timedelta(seconds=lockout_period_secs)
if ( tag == 'msubsup' and len(k) == 3 and gettag(k[2]) == 'mrow' and
if os.path.isfile('/etc/mtab'): shutil.move('/etc/mtab', '/tmp/mtab')
import integration
rng = np.random.RandomState(0) n_samples, n_features = 500, 2
if kw_overrides_match is None: return profile_match return kw_overrides_match
bokchoy_utils.clear_mongo() self.cache.flush_all()
from __future__ import absolute_import import logging import json
saltenv = env
self.verify_show_answer_present(False)
return get_instructions(xmltree)
return int(info[1][column:end])
def test_user_role(): return 'staff'
return xml_import_data.policy.get(policy_key(usage_id), {})
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return ' '.join([ descriptor.display_org_with_default, descriptor.display_number_with_default ])
if module not in get_modules(): log.error('Module {0} not available'.format(module)) return False
resources_dir = None def get_html(self): return self.studio_view(None).content
ccx = CcxFactory(course_id=self.course.id, coach=self.coach) override_field_for_ccx(ccx, self.course, 'max_student_enrollments_allowed', max_students_allowed) return ccx
from raet import raeting, nacling from raet.lane.stacking import LaneStack from raet.lane.yarding import RemoteYard import salt.config import salt.client import salt.utils import salt.syspaths as syspaths from salt.utils import kinds
element_css = self.BOTTOM_ADD_SECTION_BUTTON if click_child_icon: element_css += " .fa-plus" click_css(self, element_css)
discussion_topics = { "Topic B": {"id": "Topic B"}, }
add_user_to_cohort(cohorts[cohort_index], self.user.username)
output = self._run_command(self.TEST_ORG, query_interval=4)
self.set_call_count += 1 self.map[key] = val self.timeout_from_last_call = timeout
assert not world.is_css_present('.link_lti_new_window', wait_time=0)
func = 'modjk.{0}'.format(cmd) args = [worker, lbn, profile] response = __salt__['publish.publish'](target, func, args, expr_form)
children_headers = self._set_library_content_settings(count=2, capa_type="Custom Evaluated Script") self.assertEqual(children_headers, set())
BULK_EMAIL_ROUTING_KEY_SMALL_JOBS = LOW_PRIORITY_QUEUE
rng = np.random.RandomState(0)
httpretty.register_uri( httpretty.GET, "http://localhost:4567/api/v1/comments/{id}".format(id=comment_id), body="", status=status_code )
return 1
Registry.enabled = True
self.course_id = course_id self.load_error_modules = load_error_modules self.modulestore = xmlstore
yyy = np.column_stack([y, y, y])
self.courseware_page.visit() self.courseware_page.wait_for_page() self.assertFalse(element_has_text( page=self.courseware_page, css_selector=entrance_exam_link_selector, text='Entrance Exam' ))
cumsum = -np.cumsum(clf.oob_improvement_)
H = self.mf(V)[0] downward_state = self.hidden_layers[0].downward_state(H) recons = self.visible_layer.inpaint_update( layer_above=self.hidden_layers[0], state_above=downward_state, drop_mask=None, V=None) return recons
cache_key = self._cache_key_for_kvs_key(kvs_key) if cache_key not in self._cache: raise KeyError(kvs_key.field_name) field_object = self._cache[cache_key] return json.loads(field_object.value)
setattr(self.options, option.dest, self.config[option.dest])
from __future__ import absolute_import import re import sys
actual_branch_setting = self.get_branch_setting() if actual_branch_setting != expected_branch_setting: raise InvalidBranchSetting( expected_setting=expected_branch_setting, actual_setting=actual_branch_setting )
self.client.logout() resp = self._activate_user(self.email) self.assertEqual(resp.status_code, 200)
if is_comment_too_deep(parent=cc.Comment(comment_id)): return JsonError(_("Comment level too deep")) return _create_comment(request, CourseKey.from_string(course_id), parent_id=comment_id)
index_tab = [] for i in xrange(3): index_tab.extend(repeat(i, set_range[i]))
from salt.exceptions import CommandExecutionError from salt.ext import six
from __future__ import absolute_import import logging
responses = self.xml.xpath('//stringresponse[@id=$id]', id=self.id) if responses: response = responses[0]
enrollment_mode = request.GET.get('enrollment_mode', 'honor')
estimator.set_params(n_components=1)
resp = self.client.get(reverse('activate', kwargs={'key': activation_key})) return resp
REPORT_REQUESTED_EVENT_NAME = u'edx.instructor.report.requested'
account_manager = salt.utils.vmware.get_inventory(service_instance).accountManager
import salt.modules.k8s as k8s
_, n_features = self.means_.shape
coef_init = np.zeros((n_features, n_classes), dtype=np.float64, order='C')
"remote_id": 'remote_' + username,
problem_descriptor = modulestore().get_item(usage_key) problems[unicode(usage_key)] = problem_descriptor
ret_override_cfg = ret_cfg.get( attr_name, override_cfg_default ) if ret_override_cfg: return ret_override_cfg
explained_variance_ = (S ** 2) / n_samples total_var = explained_variance_.sum() explained_variance_ratio_ = explained_variance_ / total_var
'sock_dir': str,
pass
url = xblock_studio_url(xblock) self.assertIsNotNone(url) resp = self.client.get_html(url) self.assertEqual(resp.status_code, 200) return resp.content
unnorm_predict_proba = np.array([[0.005183999999999999, 0.02194787379972565]]) predict_proba = unnorm_predict_proba / np.sum(unnorm_predict_proba) assert_array_almost_equal(clf.predict_proba(X_test), predict_proba)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.check_emails_sent(50, task_history_request, True)
self.assertEqual(len(httpretty.httpretty.latest_requests), 1)
self.edit_component(1) self.open_advanced_tab() self.video.set_field_value('YouTube ID', 'sampleid123') self.save_unit_settings()
import salt.utils
site_configuration = SiteConfigurationFactory.create( site=self.site, )
next_page = False
self.assertFalse([ requirement for requirement in requirements if requirement['namespace'] == 'proctored_exam' ])
'django.contrib.auth.hashers.SHA1PasswordHasher', 'django.contrib.auth.hashers.MD5PasswordHasher',
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
self.login(self.enrolled_user)
data.extend([np.ones((1, 784))] * 2)
descriptor = descriptor.get_children()[0] self.course_descriptor_no_inheritance_check(descriptor)
#pylint: disable=E0602
exc_info_on_loglevel=logging.DEBUG
self.map = {} self.set_call_count = 0 self.timeout_from_last_call = 0
return set(JIRA_RE.findall(text))
cherrypy._cpreqbody.process_urlencoded(entity) cherrypy.serving.request.unserialized_data = entity.params cherrypy.serving.request.raw_body = ''
METRIC_UNDEFINED_BINARY_MULTICLASS = set(METRIC_UNDEFINED_BINARY).union( set(METRIC_UNDEFINED_MULTICLASS))
course_overview_after = CourseOverview.get_from_id(course.id)
opts = ''.join([opt for opt in opts if opt in 'AfIMq']) targets = pkg_params
assert_raises( AssertionError, monitor.update_channels, [] )
layer_1_detector = FilterActs()(images, filters)
'keysize': int,
'django.middleware.clickjacking.XFrameOptionsMiddleware',
BULK_EMAIL_INFINITE_RETRY_CAP = 1000
self._discussion_page = InlineDiscussionPage(self.browser, self.discussion_id)
ALL_ASSETS_XML_TAG = 'assets'
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from __future__ import absolute_import import errno import fnmatch import logging import os import re import time
for mode in (CourseMode.DEFAULT_MODE_SLUG, 'verified'): CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
self.save_and_verify_discussion_topics(key=self.inline_key)
return { 'user': self.user, 'enrollment': self.enrollment, 'allowed': self.allowed, 'auto_enroll': self.auto_enroll, }
if 'file_client' not in __opts__ or not __opts__['file_client']: __opts__['file_client'] = 'local'
import salt.ext.six as six
continue
elif existing['code'] == 404:
indices = self.lambdas_.argsort()[::-1] self.lambdas_ = self.lambdas_[indices] self.alphas_ = self.alphas_[:, indices]
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
if not isinstance(servers, list): ret['result'] = False ret['comment'] = 'servers entry is not a list !' return ret
import salt.cloud
logistic_classifier = linear_model.LogisticRegression(C=100.0) logistic_classifier.fit(X_train, Y_train)
n_neighbors = 5
with TIMER.timer("insert_course_index", course_context): course_index['last_update'] = datetime.datetime.now(pytz.utc) self.course_index.insert(course_index)
GeneratedCertificate.eligible_certificates.create( user=user, course_id=course_key, status=status )
drop_mask_Y = T.zeros_like(Y)
self.assertRegexpMatches( without_new_lines, r'<targetedfeedbackset.*?>.*?explanation-id="feedback1".*?</targetedfeedbackset>.*' + r'<targetedfeedbackset.*?>\s*</targetedfeedbackset>' )
for max_leaf_nodes, name in product((None, 1000), ALL_TREES.keys()): TreeEstimator = ALL_TREES[name]
NOT_STUDIO_EDITABLE = ( PollDescriptor, )
version_num = '' if options: version_num = options.get('version', False)
latex_documents = [('index', 'user_guide.tex', u('scikit-learn user guide'), u('scikit-learn developers'), 'manual'), ]
raise AssertionError('Error performing exclusion: ' 's1: %s s2: %s other: %s' % (s1, s2, other))
self.correct_responses[name] = self.SCHEMATIC_CORRECT self.incorrect_responses[name] = self.SCHEMATIC_INCORRECT
email_label = _(u"Email")
task_entry = self._create_input_entry(course_id="bogus/course/id") with self.assertRaises(ItemNotFoundError): self._run_task_with_mock_celery(task_class, task_entry.id, task_entry.task_id)
from __future__ import absolute_import
from datetime import timedelta
y = [3, 3, -1, -1, 2]
self.go_to_tab_and_assert_problem(1, self.problem1_name) problem1_content_after_coming_back = self.problem_page.problem_content self.assertIn(problem1_content_after_coming_back, problem1_content_before_switch)
log = logging.getLogger(__name__)
return self.make_call(reverse('teams_detail', args=[team_id]), expected_status, 'get', data, **kwargs)
i = np.argsort(dist2, axis=1) row_ind = np.arange(n_rows)[:, None] dist2 = dist2[row_ind, i] ind2 = ind2[row_ind, i]
from salttesting import skipIf from salttesting.helpers import ( ensure_in_syspath, destructiveTest) ensure_in_syspath('../../')
from __future__ import absolute_import
pass
this_extensions = deepcopy(extensions)
user: MYLOGIN apikey: JVkbSJDGHSDKUKSDJfhsdklfjgsjdkflhjlsdfffhgdgjkenrtuinv driver: softlayer_hw
'ALLOW_HIDING_DISCUSSION_TAB': False,
from __future__ import absolute_import
pass
source_subs_filedata = request.FILES['transcript-file'].read().decode('utf-8-sig') source_subs_filename = request.FILES['transcript-file'].name
assert_equals(len(base64.urlsafe_b64encode(encrypted_aes_key)), 344)
desired_upstream = None remote_rev_type = 'sha1'
grouping_tag = grouping_tags[test_conditions['input_type']] self.assert_no_xpath(xml, "//{0}[@class='choicetextgroup_incorrect']".format(grouping_tag), self.context)
if settings.ROOT_URLCONF != 'lms.urls': raise unittest.SkipTest('Test only valid in lms')
self.assertNotIn(self.student_name, self.certificates_section.last_certificate_invalidation.text) self.assertNotIn(notes, self.certificates_section.last_certificate_invalidation.text)
is_hidden = False
if Bookmark.objects.filter(user=user, course_key=course_key).count() >= settings.MAX_BOOKMARKS_PER_COURSE: return False
from __future__ import absolute_import
to_input = self.to_input(batch) return self.orig_view_converter.get_formatted_batch(to_input, dspace)
try: return data.get('code', None) except AttributeError: return None
key.set_contents_from_string( data, headers={ "Content-Encoding": content_encoding, "Content-Length": len(data), "Content-Type": content_type, } )
urlpatterns += ( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name="404"), )
response = self.client.post(reverse('admin:student_courseaccessrole_add'), data=data) self.assertRedirects(response, reverse('admin:student_courseaccessrole_changelist'))
self.assertEquals(len(audit_log_calls), 0)
raised = False try: fmt.format(numpy.zeros(10, dtype='float64')) except TypeError: raised = True assert raised
task_folder = task_service.GetFolder(location)
y_score = sparse_random_matrix(n_components=y_true.shape[0], n_features=y_true.shape[1], random_state=random_state)
fire('{0}/{1}'.format(tag, _m['type']), _m)
return LibraryLocator( self.courselike_key.org, self.courselike_key.library )
from pylearn2.datasets import preprocessing
from salt.states import win_license as license
import logging
from __future__ import absolute_import import os
return [ Location._from_deprecated_son(course['_id'], course['_id']['name']).course_key for course in courses ]
line_X = np.arange(-5, 5) line_y = model.predict(line_X[:, np.newaxis]) line_y_ransac = model_ransac.predict(line_X[:, np.newaxis])
('subject', Pipeline([ ('selector', ItemSelector(key='subject')), ('tfidf', TfidfVectorizer(min_df=50)), ])),
return HttpResponse(json.dumps(request.META))
set_crontab(
self._enable_cohorting() self._create_verified_cohort() self.assertFalse(VerifiedTrackCohortedCourse.is_verified_track_cohort_enabled(self.course.id)) self._verify_no_automatic_cohorting() self.assertFalse(error_logger.called)
if completed: return 'is-complete', "'{}' is marked complete" else: return 'is-not-started', "'{}' is in not-yet-started status"
ret = {} ifaces = _get_interfaces() for face in ifaces: if 'hwaddr' in ifaces[face]: ret[face] = ifaces[face]['hwaddr'] return {'hwaddr_interfaces': ret}
self.transformer_data = defaultdict(dict)
'ENABLE_MKTG_EMAIL_OPT_IN': False,
for email in ["", "a"]: params["email"] = email assert_email_error("A properly formatted e-mail is required")
X = [[2, 1], [3, 1], [1, 3], [2, 3]] y = [0, 0, 1, 1]
task_key = hashlib.md5(task_key_stub).hexdigest() return submit_task(request, task_type, task_class, course_key, task_input, task_key)
return cls.objects.filter(user=user, status='cart').exists()
assert_almost_equal(dists[0], 0, decimal=5)
cv = StratifiedKFold(n_folds=6) classifier = svm.SVC(kernel='linear', probability=True, random_state=random_state)
uptime = datetime.datetime.now() - startup_time
temp_dir = tempfile.mkdtemp(dir=TMP_JID_DIR)
import os import logging
self.assertFalse(request.is_secure()) return SENTINEL
from salt import template
sequential2 = ItemFactory.create( parent_location=self.chapter.location, category='sequential', display_name='Section 2', modulestore=store, publish_item=True, start=datetime(2015, 3, 1, tzinfo=UTC), )
from salt.modules import win_dns_client
for X, y in classification_datasets: X_train = X[:150] y_train = y[:150] X_test = X[150:]
self.assertOLXIsPublishedOnly(block_list_to_delete) self.delete_item(block_list_to_delete, revision=revision) self._check_for_item_deletion(block_list_to_delete, result) self.assertOLXIsDeleted(block_list_children)
if not relpath.startswith('../'): ret.add(os.path.join(repo['mountpoint'], relpath))
colors = ['r-', 'b-', 'y-', 'm-']
'auto_log_stacks': get_config_value('auto_log_stacks'),
from salt.exceptions import CommandExecutionError from salt.modules import mac_xattr as xattr import salt.utils.mac_utils
if not user.is_authenticated(): return HttpResponseForbidden()
n_estimators_per_job = (n_estimators // n_jobs) * np.ones(n_jobs, dtype=np.int) n_estimators_per_job[:n_estimators % n_jobs] += 1 starts = np.cumsum(n_estimators_per_job)
return "SELECT MAX(id) FROM {table_name} GROUP BY {key_fields}".format( key_fields=', '.join(key_fields_escaped),
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch from salttesting.helpers import ensure_in_syspath
self.create_programs_config(program_listing_enabled=False) response = self.client.get(path=self.view_path) self.assertContains(response, '<li class="item nav-global-01">')
from __future__ import absolute_import
self.assert_enrollment_status(as_server=True)
self.client.login(username=user.username, password="test")
try: self.assertIn(ret_str, instance) except AssertionError: self.run_cloud('-d {0} --assume-yes'.format(self.INSTANCE_NAME)) raise
if apply_routes: try: __salt__['ip.apply_network_settings'](**kwargs) except AttributeError as error: ret['result'] = False ret['comment'] = str(error) return ret
super(TestProctoredExams, self).setUp() self.course = CourseFactory.create( org='edX', course='900', run='test_run', enable_proctored_exams=True )
return launchctl('list', label, return_stdout=True, output_loglevel='trace', runas=runas)
module = CapaFactory.create(force_save_button="true", rerandomize=RANDOMIZATION.ALWAYS, done=True) self.assertTrue(module.should_show_save_button())
self._build_f(X, y) return self
click_css(page, component_css, 0)
bias = T.dvector() kerns = T.dvector() input = T.dmatrix() rng = N.random.RandomState(3423489)
sw = np.ones(6) clf = GaussianNB().fit(X, y) clf_sw = GaussianNB().fit(X, y, sw)
theano.config.warn.sum_div_dimshuffle_bug = False
return start_index
X_1, y_1 = datasets.make_classification(n_samples=n_samples, n_features=n_features, n_informative=5, random_state=1)
wtf_numpy = np.zeros((n_classes,)) for i in xrange(n_classes): wtf_numpy[i] = probs[i] probs = wtf_numpy
(all_events_pattern, saltnado_websockets.AllEventsHandler), (formatted_events_pattern, saltnado_websockets.FormattedEventsHandler),
parser.add_argument( '--commit', action='store_true', dest='commit', default=False, help='Really commit the changes, otherwise, just dry run', )
problem = self.build_problem(answer="Second", case_sensitive=False)
mock_stop = MagicMock() with patch.object(parallels, 'prlctl', mock_stop): parallels.stop(name, runas=runas) mock_stop.assert_called_once_with('stop', [name], runas=runas)
formulahint_element.set("samples", sample_str)
if self._aborting: return
raise NotImplementedError(str(type(self)) + " does not implement " + "get_batch")
if not request.user.is_staff: raise Http404 cilset = CourseImportLog.objects.order_by('-created')
return prlctl('exec', args, runas=runas)
s = s + record.exc_text.decode(sys.getfilesystemencoding())
for mode_slug in course_modes: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode_slug, mode_display_name=mode_slug, )
if merged_group_ids is not None: self._access[partition.id] = merged_group_ids
from sklearn import datasets datasets.mldata.urlopen = mock_mldata_urlopen(mock_datasets)
return self.network_address in other or ( self.broadcast_address in other or ( other.network_address in self or ( other.broadcast_address in self)))
self.assertTrue(self.video.is_video_rendered('youtube'))
return self._get_groups(self.content_groups_css)
base_attr = super(BulkAssertionTest, self).__getattribute__(name) if name.startswith('assert'): return self._wrap_assertion(base_attr) else: return base_attr
resp_params = PaymentFakeView.response_post_params(post_params) self.assertEqual(resp_params.get('decision'), 'DECLINE')
if not settings.FEATURES.get('MILESTONES_APP', False): return None from milestones import api as milestones_api return milestones_api.remove_content_references(content_id)
from __future__ import absolute_import
self.payment_and_verification_flow.proceed_to_payment()
X, redirects, index_map = get_adjacency_matrix( redirects_filename, page_links_filename, limit=5000000) names = dict((i, name) for name, i in iteritems(index_map))
from salt.states import pkgng
from __future__ import absolute_import import logging
os.remove(filename)
from __future__ import absolute_import
return self._is_element_visible(".add-response-btn")
mock_key.side_effect = mock_key_instances + [Mock()]
if not language: language = settings.LANGUAGE_CODE
thumbnail_location = asset.get('thumbnail_location', None) if thumbnail_location: thumbnail_location = course_key.make_asset_key( 'thumbnail', thumbnail_location[4])
group_auth_match = False for group_config in group_perm_keys: group_config = group_config.rstrip('%') for group in groups: if group == group_config: group_auth_match = True
self.process_manager.add_process(self.run_reqserver, kwargs=kwargs, name='ReqServer')
from __future__ import unicode_literals
'ALLOW_AUTOMATED_SIGNUPS': False,
self.setup_cohort_config(self.course_fixture) self.cohort_1_name = "Cohort 1" self.cohort_1_id = self.add_manual_cohort(self.course_fixture, self.cohort_1_name)
for name, TreeClassifier in CLF_TREES.items(): clf = TreeClassifier(random_state=0) clf.fit(X, y)
image_dtype = numpy.dtype(image_dtype)
return prlctl('snapshot-switch', args, runas=runas)
import logging
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, with_system_user_and_group )
raise NotImplementedError(str(type(self))+" does not implement " + "continue_learning.")
if (len(set(isinstance(label, string_types) for label in ys_labels)) > 1): raise ValueError("Mix of label input types (string and number)")
cmd = ['prlctl', sub_cmd] if args: cmd.extend(_normalize_args(args))
if order_items.count() == 1: receipt_template = order_items[0].single_item_receipt_template context.update(order_items[0].single_item_receipt_context)
if check_course: return RandomBadgeClassFactory.create(course_id=self.course.location.course_key, **kwargs) return RandomBadgeClassFactory.create(**kwargs)
ret[key] = {'new': '', 'old': old[key]}
os.rmdir(path)
stack = deque([_Node(start_node, get_children)])
clf = self.factory(alpha=0.01, eta0=0.01, n_iter=5, shuffle=False, learning_rate=lr) clf.fit(X, Y)
if exc.errno != errno.EEXIST: raise else: ret['comment'] = 'File {0} exists and cannot be overwritten'.format(name)
for _ in range(100): response = self.client.post(self.url, data=payload) if response.status_code == 403: break
super(CoursePage, self).__init__(browser) self.course_info = { 'course_org': course_org, 'course_num': course_num, 'course_run': course_run }
world.wait(1) continue
self.assertEquals(7, self.response.content.count('grade_Pass'))
from __future__ import absolute_import import os from time import sleep import textwrap
if max_depth is None or depth <= max_depth:
from __future__ import absolute_import import json import logging import threading import salt.ext.six as six
if update.MsrcSeverity: if update.MsrcSeverity in results['Severity']: results['Severity'][update.MsrcSeverity] += 1 else: results['Severity'][update.MsrcSeverity] = 1
version = sys.version_info if version[0] == 3: if version[1] == 3: reload = None else: from importlib import reload
_, _, X_offset, _, X_scale = _preprocess_data(X, y, fit_intercept, normalize, return_mean=True) mean_dot = X_offset * np.sum(y)
self.delete_team(self.wind_team.team_id, 204, user='staff')
module.save()
import salt.ext.six
self.addCleanup(mock_sh.stop)
subdict_str = _select_block(dict_str[pos:], '{', '}') value = _parse_dict_recursive(subdict_str) pos_tmp = pos + len(subdict_str)
'ENABLE_PREREQUISITE_COURSES': False,
self.config['loglevel'] = 'info'
from salt.modules import aliases from salt.exceptions import SaltInvocationError
STUDIO_EDIT_ROLES = 8 STUDIO_VIEW_USERS = 4 STUDIO_EDIT_CONTENT = 2 STUDIO_VIEW_CONTENT = 1
self.assertTrue(search_paths[1].endswith(deploy_path))
filter_selected_events = lambda event: event.get('name', '') == 'edx.ui.lms.outline.selected' selected_events = self.wait_for_events(event_filter=filter_selected_events, timeout=2)
import dson import logging
continue
self.find_css('.signatory-title-input').first.fill(value)
#source_encoding = 'utf-8'
ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_ ).astype(np.bool_) ref_inlier_mask[outliers] = False
assert_raises_regexp(ValueError, ".*loss='l3' is not supported.*", svm.LinearSVC(loss="l3").fit, X, y)
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
response = requests.post(self.launch_uri, data=self.payload) self.assertIn('Wrong LTI signature', response.content)
return Fragment(self.get_html())
task_type = 'problem_responses_csv' task_class = calculate_problem_responses_csv task_input = {'problem_location': problem_location} task_key = "" return submit_task(request, task_type, task_class, course_key, task_input, task_key)
child_to_group = { xblock.group_id_to_child.get(unicode(group.id), None): group.id for group in partition_for_this_block.groups }
self.instructor_dashboard_page = InstructorDashboardPage(self.browser, self.course_id) self.instructor_dashboard_page.visit() self.cohort_management_page = self.instructor_dashboard_page.select_cohort_management() self.cohort_management_page.wait_for_page()
return u"Invalid user preference key '{preference_key}'.".format(preference_key=preference_key)
return stdout
urls = get_xmodule_urls() return HttpResponse(json.dumps(urls), content_type="application/json")
icrv_location = self.icrv.location self.store.delete_item( self.icrv.location, ModuleStoreEnum.UserID.test, revision=ModuleStoreEnum.RevisionOption.published_only ) self._update_partitions()
rng = np.random.RandomState(0) X = rng.randn(97, 149) Y = rng.randn(111, 149)
import os import logging
log = logging.getLogger(__name__)
return [part.strip() for part in self.q(css='.path').text[0].split('>')]
self._captions_visibility(False)
ret = self.run_run_plus(fun='fileserver.update', args=['backend="roots"']) self.assertTrue(ret['fun'])
for mode in all_modes[course_key]: if mode.min_price > 0 and not CourseMode.is_credit_mode(mode): return mode
except Exception as err: print("Error running process {}".format(err), file=sys.stderr)
self.assertIn( 'Invalid value passed for arch', self.run_function('system.set_boot_arch', ['spongebob']))
cmd = 'rpm --import {0}'.format(pkg_pub_key_file) __salt__['cmd.run'](cmd, runas=runas, use_vt=True)
num_braces = 0
pki_dir = pki_dir.replace('minion', 'master')
response.set('id', response_id_str) response_id += 1
scheme_id = UserPartition.VERSION_1_SCHEME
CourseFinanceAdminRole(self.course.id).add_users(self.instructor)
get_storage_keys = show_storage_keys
from django.core.management.base import BaseCommand from django.contrib.auth.models import User
grains['manufacturer'] = sysinfo['Manufacturer'] grains['productname'] = sysinfo['Product'] grains['uuid'] = sysinfo['UUID']
log.error('Spot instance request resulted in state \'{0}\'. ' 'Nothing else we can do here.') return False
return self.q(css='div.batch-enrollment').present
post_params = sign(self.CLIENT_POST_PARAMS)
service_variant = ''
dest_info = dest_structure['blocks'][block_key]
self.attempt_upload_file_and_verify_result(test_case, 'upload_screenshot')
return etree.Element("choicetextresponse")
'ENABLE_ONLOAD_BEACON': False,
__ = source_store.find_asset_metadata(asset_key)
loss, grad, p = _multinomial_loss_grad(w, X, Y, alpha, sample_weight) sample_weight = sample_weight[:, np.newaxis]
el.find_element_by_css_selector('#upgrade-to-verified').click()
minibatch_size = 1000
from salttesting import skipIf, TestCase from salttesting.helpers import ( ensure_in_syspath, requires_network, TestsLoggingHandler ) ensure_in_syspath('../../')
self.type = None self.data = None self.choices_display_names = None
from __future__ import absolute_import
with remove_ccx(usage_key) as (usage_key, restore): orig_key, version = self._modulestore.get_block_original_usage(usage_key) return restore(orig_key), version
return BACKEND.is_request_in_microsite()
return [ m['content_id'] for m in find_gating_milestones( course.id, None, 'requires', {'id': user.id} ) ]
self.assertFalse(self.creator_admin.has_add_permission(self.request))
FEATURES['ENABLE_DASHBOARD_SEARCH'] = True
if redirect: self.assertRedirects(response, reverse('dashboard')) else: self.assertEquals(response.status_code, 200)
import time import logging
from __future__ import absolute_import import os import logging import copy
grains['os'] = grains['osfullname'] = 'Solaris' grains['osrelease'] = ''
VerificationDeadline.set_deadline(self.course.id, self.VERIFICATION_DEADLINE)
self.fake_payment_page.submit_payment()
django_settings.SOCIAL_AUTH_LOGIN_ERROR_URL = '/'
return self.course_id.to_deprecated_string()
return course_key.to_deprecated_string()
X, y = check_X_y(X, y, accept_sparse=("csr", "csc"), multi_output=True, y_numeric=True)
parent = None
warnings.simplefilter("ignore", UserWarning) assert_equal(assert_warns(UserWarning, f), 3)
self.assertIsNotNone(ver_block)
from salt.utils import dictdiffer from salt.exceptions import CommandExecutionError
self.video.click_player_button('fullscreen')
all_images.extend(conn.list_images())
from salt.modules import tls import integration
return self._tags[course_id].get(key)
self.assertEqual(len(httpretty.httpretty.latest_requests), 3)
braces = '}' * num_braces rval = basic_setup + \ setup_nv_images + \ setup_nv_filters + \ setup_nv_targets + \ do_convolution + \ braces rval = rval % locals() return rval
self._make_eligible()
cherrypy.config.update({'environment': "test_suite"})
return list( { attr: video[attr] for attr in ["edx_video_id", "client_video_id", "created", "duration", "status"] } for video in _get_videos(course) )
n_samples = len(digits.images) data = digits.images.reshape((n_samples, -1))
user=user, course_id=course.location.course_key, status=CertificateStatuses.downloadable
from salt.modules import sqlite3 import salt
self.assertEqual(response.status_code, 302) self.assertEqual( response.url, reverse('courseware', args=[course_id]) )
if result['requireType'] == 'require': world.wait(1) continue
return {'Authorization': 'Token {}'.format(settings.BADGR_API_TOKEN)}
import salt.utils
self.assertFalse(BulkEmailFlag.feature_enabled(self.course.id)) response = self.client.get(self.url) self.assertNotIn(self.email_modal_link, response.content)
if block_key is None: block_key = BlockKey(block_data.block_type, LocalId())
tasks.environment.messages = []
self.verify_pdf_certificate()
self._validate_hyperparameters() if np.any(np.array(hidden_layer_sizes) <= 0): raise ValueError("hidden_layer_sizes must be > 0, got %s." % hidden_layer_sizes)
microsite.set_by_domain(self.microsite_subdomain) configs = microsite.get_all_config() self.assertEqual(len(configs.keys()), 3)
return self._is_element_visible(".response_{} .action-show-comments".format(response_id))
self._transformer_data = defaultdict(dict)
self.assertNotContains(response, "How it Works") self.assertNotContains(response, "Schools & Partners")
if bool(actual_data) != bool(data): ret.update({item: {'old': actual_data, 'new': data}})
if not trust_root.validateURL(openid_request.return_to): log.error('invalid return_to') return False
from __future__ import absolute_import, with_statement import logging
if raw['data']['return'] == {}: continue
est = TreeEstimator(max_features=10) assert_raises(ValueError, est.fit, X, y)
if existing['code'] == 200:
startup_info = STARTUPINFO(dwFlags=win32con.STARTF_USESTDHANDLES, hStdInput=dupin, hStdOutput=c2pwrite, hStdError=errwrite)
self.check_assertion_structure(assertion, response['results'][0])
self.client.login(username=self.non_staff_usr, password='test') resp = self.client.get(self.url_locked) self.assertEqual(resp.status_code, 403)
with remove_ccx(location) as (location, restore): return restore( self._modulestore.get_parent_location(location, **kwargs) )
WORKS_WITH_STORES = (ModuleStoreEnum.Type.split, )
filename = '_' + fragment_name contents[filename] = fragment
return {'shell': os.environ.get('SHELL', '/bin/sh')}
X_test = np.array([[0, 1, 1, 0, 0, 1]])
mylocalrepo: git.config_unset: - name: foo.bar - all: True
requested_tab_id_locators = request.json['tabs']
from salttesting import (expectedFailure, skipIf) from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
selected_numtolerance_inputs = [ key for key in a_dict if key.partition("_numtolerance_input_")[0] + "bc" in selected_choices ]
if xblock.fields['visible_to_staff_only'].is_set_on(xblock): return xblock
self.options.saltfile = os.environ.get('SALT_SALTFILE', None)
first_checkpoint.add_verification_attempt(SoftwareSecurePhotoVerification.objects.create(user=self.user)) self.assertEqual(first_checkpoint.photo_verification.count(), 2)
der_sig_in = asn1.DerObject() der_sig_in.decode(der_sig)
continue
if not success: raise IOError("Could not acquire valid {driver} browser session.".format(driver=browser_driver))
from __future__ import absolute_import
from salt.modules import hadoop
course_locator = self._map_revision_to_branch(course_locator) return super(DraftVersioningModuleStore, self).get_course_successors( course_locator, version_history_depth=version_history_depth )
try:
'renderer_whitelist': list,
with self.assertRaisesRegexp(CommandError, 'Error: too few arguments'): call_command('delete_orphans')
pass
self.assertEqual( dict(self.cd), {'foo': 'global'}, )
return [ v[-1][0] for v in self.__tokdict.values() ]
if "Subprocess return code: 1" not in error_message: return False else: return True
@ddt.data(*flatten(CONTAINER_XMODULES))
store = self._get_modulestore_for_courselike(course_key) return store.get_orphans(course_key, **kwargs)
serial = salt.payload.Serial(self.opts.get('serial', ''))
assert_raises(ValueError, svm.SVC(C=-1).fit, X, Y)
assert_greater((X_sparse.data == 0.).sum(), 0) assert_greater((X_sparse_test.data == 0.).sum(), 0)
self.video.wait_for_state('pause')
sh("coverage combine --rcfile={}".format(rcfile))
from __future__ import absolute_import
from __future__ import absolute_import import os import glob import tempfile import time import logging
from tornado import gen from tornado import ioloop from tornado import netutil
return self.get(path, data or {}, follow, HTTP_ACCEPT="text/html", **extra)
try: if servers[index - 1] == ip: return True except IndexError: pass
if self.subcmd == 'apply': self.subcmd_args = [args[0]] del args[0]
httpretty.register_uri( httpretty.GET, "http://localhost:4567/api/v1/threads/{id}".format(id=thread_id), body="", status=status_code )
gmm = mixture.GaussianMixture(n_components=n_components, covariance_type=cv_type) gmm.fit(X) bic.append(gmm.bic(X)) if bic[-1] < lowest_bic: lowest_bic = bic[-1] best_gmm = gmm
if use_org_level_role: OrgLibraryUserRole(self.lib_key.org).add_users(self.non_staff_user) else: LibraryUserRole(self.lib_key).add_users(self.non_staff_user)
user_perms = get_user_permissions(request.user, course_key) if not user_perms & STUDIO_VIEW_USERS: raise PermissionDenied()
if hasattr(self.beta_tester, '_roles'): del self.beta_tester._roles self.assertFalse(CourseBetaTesterRole(self.course.id).has_user(self.beta_tester))
try: import raven from raven.handlers.logging import SentryHandler HAS_RAVEN = True except ImportError: HAS_RAVEN = False
with self.assertRaises(StudentInputError): problem = self.build_problem(answer='(1 5)')
hadoop.__salt__ = {}
return salt.utils.pem_finger(os.path.join(__opts__['pki_dir'], 'minion.pub'), sum_type=__opts__.get('hash_type', 'md5'))
nagios.__salt__ = {}
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.get_items_call_count += 1 item = self.blocks.get(block_key) if not item: raise ItemNotFoundError return item
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, requires_salt_modules
val = '\n'.join([v for v in val.split('\n') if not v.startswith('#')])
'ping_interval': int,
self._update_feature_log_prob() self._update_class_log_prior(class_prior=class_prior) return self
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
new_settings = get_container_setting(name=name, container=container, settings=settings.keys()) failed_settings = dict()
all_lists = np.all([not hasattr(v, "rvs") for v in self.param_distributions.values()]) rnd = check_random_state(self.random_state)
try: return self.encrypt_session_key(request.session.session_key) except AttributeError: return ''
self.assertEquals(USER_COUNT + 1, len(response.content.splitlines()))
tab_content = get_static_tab_contents(request, course, tab) self.assertIn(self.course.id.to_deprecated_string(), tab_content) self.assertIn('static_tab', tab_content)
user = CourseCreator.objects.get(user=user) if user.state != CourseCreator.GRANTED: user.state = CourseCreator.PENDING user.save()
#latex_font_size = '10pt'
bytes = bytearray
htpasswd.__salt__ = {} htpasswd.__opts__ = {'test': False}
self.assertTrue(self.user.roles.filter(name="Student", course_id=self.course_key))
self.notes_page.wait_for_ajax() note = self.notes_page.notes[0] assert_page(note, self.raw_note_list[2]['usage_id'], "Tags")
from __future__ import absolute_import import os import tempfile
self.assertTrue(linode._validate_name('foo_bar'))
self.browser.refresh() self.wait_for_page()
name = 'elevation' _check_is_integral(name, label) _check_range(name, label, -1, 8) if label == -1: return None else: return label * 5 + 30
field_data['attempts'] = int(attempts)
instructor = self.make_instructor() self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
if esxi_hosts: if not isinstance(esxi_hosts, list): raise CommandExecutionError('\'esxi_hosts\' must be a list.')
assert_raises(ValueError, clf.fit, X, np.ones(len(X)))
if self._module_system: delattr(self._module_system, name) delattr(self._descriptor_system, name)
if any(relative_path.lower().endswith(excluded_ext.lower()) for excluded_ext in excluded_exts): serve_from_cdn = False
__proxyenabled__ = ['fx2']
many_days = datetime.timedelta(days=60)
for n_samples, n_features in ((6, 5), ):
return self.get_input_space()
self.server.config['test_reset'] = 'This is a reset config test'
import integration
self.assertEqual(result['success'], 'incorrect')
from __future__ import absolute_import import os
response = self.client.get( reverse('course_modes_choose', args=[unicode(self.course.id)]), follow=False, )
required_fields = set(fields) all_fields = set(self.fields.keys()) for field_name in all_fields - required_fields: self.fields.pop(field_name)
self.course_outline.select_advanced_tab()
self.assertEqual(response.status_code, 403)
template_loc = self.location.replace(category='custom_tag_template', name=template_name)
signal_handler.send.assert_called_with('course_deleted', course_key=course_key)
vm_['private_key'] = key_filename
import os import urlparse
user_account = vim.host.LocalAccountManager.AccountSpecification() user_account.id = username user_account.password = new_password
with self.store.branch_setting(ModuleStoreEnum.Branch.published_only, course_key): assertProblemNameEquals(problem_original_name) assertNumProblems(problem_new_name, 0)
try: return getattr(self, '_%s_cache' % related_name) except AttributeError: pass
self.users = [ UserFactory.create() for dummy0 in range(self.USER_COUNT) ]
receipt_id = models.CharField( db_index=True, default=generateUUID, max_length=255, )
with storebuilder.build() as (__, store): course = CourseFactory.create(modulestore=store)
return self.str_versions
import salt.utils.gitfs from salt.exceptions import FileserverConfigError
for video in self.previous_uploads: self.assertIn(video["edx_video_id"], response.content)
context['certificate_id_number_title'] = _('Certificate ID Number')
nonzero = dists != 0 dists = dists[nonzero]
if re.match(GUID_REGEX, snap_name): return snap_name.strip('{}') else: return snapshot_name_to_id(name, snap_name, strict=True, runas=runas)
stack = deque([start_node])
for train, test in kfold.split(X, y): est.fit(X[train], y[train]) expected_predictions[test] = func(X[test])
ensure_in_syspath(CODE_DIR)
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
return dict([(pref.key, pref.value) for pref in user.preferences.all()])
cls.create_and_enroll_student( courses=[cls.test_course_1, cls.test_course_2], username='student_enrolled_both_courses_other_team' )
response = requests.get(self.url + "?test_param=") self.assertEqual(response.status_code, 400)
import salt.utils.jid import salt.returners import salt.loader from salt.template import compile_template
import salt.search import salt.ext.six as six
alpha_scaled = float(alpha) / n_samples
from __future__ import absolute_import import os
X = [[1, 0, 0], [1, 1, 1]]
sys.stderr.write( 'WARNING: CONFIG \'{0}\' directory does not exist.\n'.format( self.options.config_dir ) )
staff_lock = self._create_xblock_with_start_date( name + "_locked", start_date, publish, visible_to_staff_only=True ) self.assertFalse(utils.is_currently_visible_to_students(staff_lock))
if not GlobalStaff().has_user(user): course_keys = [course_key for course_key in course_keys if has_access(user, access_type, course_key)]
if self.path.startswith("/set_config"): return StubHttpRequestHandler.do_PUT(self) self._send_handler_response("PUT")
__virtualname__ = 'shadow'
self.tree = etree.XML(problem_text)
self.assertIsNone(course_outline_initial_state('no-such-locator', course_structure))
return redirect('about_course', course_id.to_deprecated_string())
with open(filename) as f: results = f.read() os.remove(filename) return results
certificates_display_behavior = TextField(null=True) certificates_show_before_end = BooleanField(default=False) cert_html_view_enabled = BooleanField(default=False) has_any_active_web_certificate = BooleanField(default=False) cert_name_short = TextField() cert_name_long = TextField()
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
for user in get_users_with_role(CourseStaffRole.ROLE): add_user_with_status_unrequested(user)
np.add(A, S, tmp) I = np.argmax(tmp, axis=1)
self.file_mapping = salt.utils.odict.OrderedDict()
import salt.utils from salt.exceptions import CommandExecutionError
import logging import re
config = BrandingApiConfig(enabled=enabled) config.save()
with self.assertRaises(SearchIndexingError): CoursewareSearchIndexer.do_course_reindex(modulestore(), self.course.id)
xmin = TT.switch(cond, constant(numpy.nan), a + (-B + TT.sqrt(radical)) / (3 * A)) return xmin
if classes is not None: label = label[:, classes]
query = self._qs(self.browser.current_url) return 'code' in query
self.verify_end_date("edX/test_about_blob_end_date/2012_Fall", "Learning never ends")
from salttesting.unit import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
sys = 'cms' if sys == 'studio' else sys return cmd("python manage.py", sys, "--settings={}".format(settings), *args)
settings = partitioned_fields[Scope.settings] settings = self._serialize_fields(block_key.type, settings) if not is_updated: is_updated = self._compare_settings(settings, original_entry.fields)
else: if self.n_outputs_ == 1: return proba[:, 0]
s = (y == 2) + (y == 4) X = X[s, :] y = y[s] y = (y != 2).astype(int)
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
try: self._spawn()
saltenv = env
if opts['master_sign_pubkey']:
if enrollment_mode is None: self.assertFalse(CourseEnrollment.is_enrolled(self.user, self.course.id))
import integration
S = func([[1]], metric='precomputed') assert_true(isinstance(S, np.ndarray))
from __future__ import absolute_import
#
import pprint import logging
from salt.states import zk_concurrency
cherrypy.config['saltopts'] = opts cherrypy.config['apiopts'] = apiopts
self.assertRegexpMatches(html, r'&#34;group_name&#34;: &#34;student_cohort&#34;')
Xt = X for name, transform in self.steps: Xt = transform.transform(Xt) return Xt
local_master = True
children_unstructured = out_unstructured[0] children_structured = out_structured[0]
warnings.simplefilter('ignore', _NonBLASDotWarning)
'cython_enable': bool,
output['texture_id'][i] = textid output['texture_pos'][i] = (px, py)
from __future__ import absolute_import import logging import socket
iris = datasets.load_iris()
if ApiAccessConfig.current().enabled: return view_func(view_obj, *args, **kwargs) return HttpResponseNotFound()
try: import win32con import win32api import win32process import win32security import win32pipe import win32event import win32profile import msvcrt import ctypes from ctypes import wintypes HAS_WIN32 = True except ImportError: HAS_WIN32 = False
from __future__ import absolute_import import logging import datetime from copy import copy
if entry_needs_updating: instructor_task.task_state = result_state if task_output is not None: instructor_task.task_output = task_output
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
filename = sanitize_filename(' '.join(tooltip.split(' ')[3:]))
tree = etree.Element(problemtree.tag) for item in problemtree: item_xhtml = self._extract_html(item) if item_xhtml is not None: tree.append(item_xhtml)
with remove_ccx(location) as (location, restore): return restore( self._modulestore.revert_to_published(location, user_id) )
found_rerun = CourseRerunState.objects.find_first(course_key=self.course_key) found_rerun_state = {key: getattr(found_rerun, key) for key in self.expected_rerun_state} self.assertDictEqual(found_rerun_state, self.expected_rerun_state) return found_rerun
exc_info=log.isEnabledFor(logging.DEBUG)
session_status = request.session.setdefault("import_status", {}) courselike_string = unicode(courselike_key) + filename _save_request_status(request, courselike_string, 0)
xml.tail = self.tail return xml
problem_specified = self.build_problem(answer="Second", case_sensitive=True)
uid = uinfo['uid']
pass
raised = False try: fmt = OneHotFormatter(max_labels=10, dtype='invalid') except TypeError: raised = True assert raised
if inspect: for container in containers: container_id = container.get('Id') if container_id: inspect = _get_container_infos(container_id) container['detail'] = inspect.copy()
os.makedirs(fn_)
self.assert_function_values('abs', [-1, 0, 1, 'j'], [1, 0, 1, 1])
asset_location = StaticContent.get_location_from_path('/c4x/edX/toy/asset/sample_static.txt') content = contentstore().find(asset_location) self.assertEqual(content.locked, locked)
expected_msg = u'Error: test error \u03a9' self.assertEqual(result['success'], expected_msg)
import json import logging
new_chapter = self.store.create_child(self.user_id, courses[0].location, 'chapter', 'new_chapter') asides = new_chapter.runtime.get_asides(new_chapter)
import salt.utils.http
from mock import call
return self.batch_size * self.num_batches
parse_string = self._find_string_wrapping_expression(mako_template, expression) if parse_string is None: results.violations.append(ExpressionRuleViolation( Rules.mako_js_missing_quotes, expression ))
self.addCleanup(self._mock_paver_needs.stop)
_validate_opts(opts) return opts
from __future__ import absolute_import import logging
#
list_ = salt.utils.alias_function(list_running, 'list_')
model = SelectFromModel(clf, prefit=False) model.fit(data, y) assert_array_equal(model.transform(data), X_transform)
settings.ALLOWED_HOSTS.append(hostname) self.addCleanup(settings.ALLOWED_HOSTS.pop)
FEATURES['EMBARGO'] = True
score = module.max_score() block_structure.set_transformer_block_field(module.location, cls, 'max_score', score)
pred = mb_k_means.predict(mb_k_means.cluster_centers_) assert_array_equal(pred, np.arange(n_clusters))
pipe.recv()
return [t.value for t in TagAvailableValues.objects.filter(category=self)]
self.xblock.location = Location("org", "import", "run", "category", "stubxblock") self.xblock.save()
'edxmako', 'pipeline', 'static_replace', 'require',
logging.debug("Current state of '{}' element is '{}'".format(state_selector, current_state))
gid_from_name = False if grains['os_family'] == 'MacOS' else True
grains = {} pillars = {}
if expanded_nodegroup or not first_call: return ret else: log.debug('No nested nodegroups detected. ' 'Using original nodegroup definition: {0}' .format(nodegroups[nodegroup])) return nodegroups[nodegroup]
try:
return v[::-1], W[:, ::-1]
self.context['options'] = [(id_num, '<b>Option {0}</b>'.format(id_num)) for id_num in range(5)] self.context['value'] = 2
from __future__ import absolute_import import logging import socket import pprint
return parse(out)
rng = np.random.RandomState(0) n_features = 5 n_samples = 4 X = rng.randn(n_samples, n_features)
self.assertEqual(len(h_data['course_modes']), 1) self.assertEqual(h_data['course_modes'][0]['slug'], CourseMode.HONOR)
msg_format += _(" (out of {total})")
exc_info_on_loglevel=logging.DEBUG
maxscore = 0 for responder in self.responders.values(): maxscore += responder.get_max_score() return maxscore
module_location = module.location.map_into_course(target_id) _update_module_location(module, module_location.replace(revision=MongoRevisionKey.draft))
from salttesting.unit import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../')
httpretty.register_uri(httpretty.POST, urljoin(ZENDESK_URL, '/api/v2/tickets.json'), status=status, body='{}', content_type=JSON)
pass
from salt.cloud.clouds import vmware from salt.exceptions import SaltCloudSystemExit
import salt.config import salt.transport.ipc
return
import contextlib import textwrap import json try: import dns.query import dns.tsigkeyring HAS_DNS = True except ImportError: HAS_DNS = False
profile = self.user.profile.__class__.objects.get(user=self.user) self.assertEqual(profile.has_profile_image, has_profile_image)
import salt.utils import salt.defaults.exitcodes from salt.utils.filebuffer import BufferedReader
INSTALLED_APPS += ('openedx.core.djangoapps.api_admin',)
from __future__ import absolute_import
from __future__ import absolute_import, print_function import time import os import copy import logging
TASK_LOG.info(u'%s, Task type: %s, Finishing task: %s', task_info_string, action_name, task_progress) return task_progress
from __future__ import absolute_import
fn_.write(self.dumps(msg, use_bin_type=True))
def obj_func(theta, eval_gradient=True): if eval_gradient: lml, grad = self.log_marginal_likelihood( theta, eval_gradient=True) return -lml, -grad else: return -self.log_marginal_likelihood(theta)
iris = datasets.load_iris() rng = check_random_state(42) perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
import hashlib import json import logging import requests import dogstats_wrapper as dog_stats_api
#epub_fix_images = False
if test: return 'Test succeeded.'
data = fetch_species_distributions() species_names = ['Bradypus Variegatus', 'Microryzomys Minutus']
from __future__ import absolute_import import logging
self.assertFalse(self.creator_admin.has_delete_permission(self.request))
self.check_val('False', False)
OIDC_COURSE_HANDLER_CACHE_TIMEOUT = 0
unlink_cohort_partition_group( test_cohort, ) self.assert_student_in_group(None)
u'{"@type": "Result", "resultScore": 0.1}',
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
from salt.exceptions import CommandExecutionError import salt.utils
return pairs, conf_list
from __future__ import absolute_import
pass
from courseware.views.views import render_xblock return render_xblock(request, unicode(usage_key), check_if_enrolled=False)
import salt.utils import salt.utils.jid
return self.current_group.get(user.id, {}).get(user_partition.id)
(True, False), (True, True),
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
if self.event_queue: self.flush_events() self.stop = True super(EventReturn, self)._handle_signals(signum, sigframe)
note = self.filter_by_id(self.notes, note_id) if note: index = self.notes.index(note[0]) self.notes.pop(index) return True else: return False
from salt.states import boto_dynamodb
import yaml import salt.ext.six as six
self.video.edx_video_id = self.TEST_EDX_VIDEO_ID self.setup_val_video(associate_course_in_val=False) result = self.get_result(allow_cache_miss) if allow_cache_miss: self.verify_result_with_val_profile(result) else: self.verify_result_with_fallback_and_youtube(result)
assert_raises(ValueError, lambda X, y: GradientBoostingClassifier( loss='deviance').fit(X, y), X, [0, 0, 0, 0])
with self.assertRaises(ValueError): self.settings_service.get_settings_bucket(None)
content = self.get_courseware_page().content self.assertTrue(self.sequential_display_name in content, "Subsection should be visible") self.assertEqual(staff_debug_expected, 'Staff Debug Info' in content)
assert_equal(slo.get_n_splits(X, y, labels=l), n_iter)
certificate_template_asset.asset = SimpleUploadedFile('picture2.jpg', 'file contents') certificate_template_asset.save()
import salt.ext.six as six
entry_needs_updating = True entry_needs_saving = False task_output = None
try: os.remove(trans_tar) except (OSError, IOError): pass
if maxdepth is not None: relpieces = relname.split('/') if not relpieces[-1]: relpieces = relpieces[:-1] if len(relpieces) > maxdepth + 1: continue
import salt.utils import salt.utils.url from salt.exceptions import CommandExecutionError from salt.ext import six
return sum(i.line_cost for i in self.orderitem_set.filter(status=self.status))
self._install_masquerade(self.course_instructor) self.assertEqual( 'student', access.get_user_role(self.course_instructor, self.course_key) )
logger.warning("no '{0}' found".format(this_check))
train_score = Perceptron().fit(X_kpca, y).score(X_kpca, y) assert_equal(train_score, 1.0)
__virtualname__ = 'service'
with self._capture_assertion_errors(): context = assertion(*args, **kwargs)
import salt.utils import salt.ext.six as six from salt.exceptions import CommandExecutionError
from __future__ import absolute_import import os import json import logging import base64 import pprint import inspect import yaml import datetime from Crypto.Hash import SHA256 from Crypto.PublicKey import RSA from Crypto.Signature import PKCS1_v1_5
parameters = { 'vect__max_df': (0.5, 0.75, 1.0), #'vect__max_features': (None, 5000, 10000, 50000),
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
if self.xml.get('inline', ''): tree.set('class', 'inline')
import re import os
for status in ["submitted", "must_retry", "approved"]: attempt.status = status attempt.save() assert_true(SoftwareSecurePhotoVerification.user_has_valid_or_pending(user), status)
module = CapaFactory.create(attempts=1)
with self.assertRaisesRegexp(Exception, 'Unknown parenthesis'): preview.LatexRendered('x^2', parens='not parens')
LOGGER.debug("Flushing the test database...") call_command('flush', interactive=False, verbosity=0) world.absorb({}, 'scenario_dict')
cet = CourseEmailTemplate.objects.get(name=None) self.assertIsNotNone(cet)
super(BinomialSampler, self).__init__(0, *args, **kwargs)
self.factory(shuffle="false")
cmd = 'state.pkg {0}/salt_state.tgz test={1} pkg_sum={2} hash_type={3}'.format( __opts__['thin_dir'], test, trans_tar_sum, __opts__['hash_type'])
__remove_temp_logging_handler()
plt.figure() fig = plt.gcf() cls_runtime = [] for cls_name, stats in sorted(cls_stats.items()): cls_runtime.append(stats['total_fit_time'])
return '{}.{}'.format(self.backend_class.__module__, self.backend_class.__name__)
self.wait_for_element_visibility(upload_btn_selector, 'upload button is present')
tgt = ipaddress.ip_network(tgt)
from __future__ import absolute_import from inspect import ArgSpec
classes = np.unique(y) class_weight = compute_class_weight("balanced", classes, y) class_weight_dict = dict(zip(classes, class_weight)) return class_weight_dict
if not locations: locations = [get_location()]
vmconfig['changed']['set_{0}'.format(collection)][prop] = vmconfig['state'][collection][prop]
pass
for _ in xrange(30): response = self.client.post('/admin/login/', post_params) self.assertEquals(response.status_code, 200)
if _rule.get('from_port') is None: _rule['from_port'] = -1 if _rule.get('to_port') is None: _rule['to_port'] = -1
def __init__(self): self.cmds = Mockcmds()
from __future__ import absolute_import
try: remove_all_instructors(course_key) except Exception as err: log.error("Error in deleting course groups for {0}: {1}".format(course_key, err))
if not os.path.isdir(GPG_KEYDIR): os.makedirs(GPG_KEYDIR)
inp = self.get_inputs() out = self.get_outputs() chmod = []
statobj = inputtypes.Status('queued', func) self.assertEqual(statobj.display_name, u'PROCESSING')
self._pkgdb_fun('register_pkg', pkg_name, formula_def, self.db_conn)
U, mu, V = fbpca.pca(X, n_comps, raw=True, n_iter=n_iter, l=n_oversamples+n_comps) call_time = time() - t0
request_info = xmodule_instance_args.get('request_info', {}) if xmodule_instance_args is not None else {} task_info = {'student': student.username, 'task_id': _get_task_id_from_xmodule_args(xmodule_instance_args)}
std_error = scores_std / np.sqrt(n_folds)
default_headers = { 'HTTP_AUTHORIZATION': 'Bearer ' + self.access_token } default_headers.update(headers) response = self.client.get(uri, follow=True, **default_headers) return response
import logging
TESTABLE_BLOCK_TYPES = set(DIRECT_ONLY_CATEGORIES) TESTABLE_BLOCK_TYPES.discard('course')
self.assertTrue(expected_published_prefix in unit.last_published_text) self.assertTrue(expected_saved_prefix in unit.last_saved_text)
self.connected = False msg = ('No master could be reached or all masters ' 'denied the minions connection attempt.') log.error(msg)
Ensure myelb ELB exists: boto_elb.present: - name: myelb - region: us-east-1 - profile: keyid: GKTADJGHEIQSXMKKRBJ08H key: askdjghsdfjkghWupUjasdflkdfklgjsdfjajkghs
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
from __future__ import absolute_import import re import logging
return service
for key in locations: self.assertFalse(self._has_changes(locations[key]))
import ipdb ipdb.set_trace() assert True
return self.q(css='.team-edit-fields').present
clf = LinearDiscriminantAnalysis(solver="svd").fit(X, y) means_transformed = clf.transform(means)
self.assertEqual(len(encoded_unexpected_from_addr), 318) self.assertEqual(len(escaped_encoded_unexpected_from_addr), 324) self.assertEqual(len(unexpected_from_addr), 137)
import salt.ext.six as six HAS_NEUTRON = False try: from neutronclient.v2_0 import client from neutronclient.shell import NeutronShell
raise NotImplementedError()
return course_mode_tuple.slug in [cls.PROFESSIONAL, cls.NO_ID_PROFESSIONAL_MODE] if course_mode_tuple else False
from integration import TMP_CONF_DIR from salttesting import TestCase
ret['changes'] = { 'testing': { 'old': 'Unchanged', 'new': 'Something pretended to change' } }
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return self[u'name']
__func_alias__ = { 'set_': 'set' }
delete = self.run_cloud('-d {0} --assume-yes'.format(self.INSTANCE_NAME)) delete_str = ''.join(delete)
import logging
return sorted(modules_by_category[category], key=get_module_sort_key)
trainer = yaml_parse.load(test_yaml_layer0 % {'layer0_filename': layer0_filename}) trainer.main_loop()
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] y_state = layer_to_state[y]
'cache_sreqs': bool,
try: self.assertIn(self.INSTANCE_NAME, delete_str) self.assertIn('True', delete_str) except AssertionError: raise
block_structure = block_structure_cls(root_block_usage_key=0)
sync_cohort_with_mode.apply_async(kwargs=args, countdown=300)
closest_dist_sq = euclidean_distances( centers[0, np.newaxis], X, Y_norm_squared=x_squared_norms, squared=True) current_pot = closest_dist_sq.sum()
self.assertRedirects(resp, settings.LOGIN_REDIRECT_URL + '?next=' + reverse('dashboard'))
if signal.getsignal(signal.SIGINT) is signal.SIG_DFL: signal.signal(signal.SIGINT, self._handle_signals)
log = logging.getLogger(__name__)
self.register_page.visit()
log = logging.getLogger(__name__)
fig = plt.figure(figsize=(9, 8))
if user is None: user = self.honor_user request = Request(self.request_factory.get('/')) request.user = user return request
if space.axes != self.axes: batch = _undo_op(batch, 'DimShuffle', strict=True)
original_item = self.get_item_from_modulestore(source_usage_key) duplicated_item = self.get_item_from_modulestore(duplicate_usage_key)
assert_array_almost_equal(huber_warm.coef_, huber_warm_coef, 1)
existing_program_ids = get_awarded_certificate_programs(student)
for current_vname in current_communities: if current_vname not in communities: ret_communities['changes'][current_vname] = {'old': current_communities[current_vname], 'new': None}
non_eligible_statuses = ['failed', 'declined']
import salt.ext.six as six if six.PY3: import ipaddress else: import salt.ext.ipaddress as ipaddress from salt.ext.six.moves import range
new_nsamples[not marginalize_odd] += pa_bias * (1. - beta)
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
ssh_key_name = config.get_cloud_config_value( 'ssh_key_name', vm_, __opts__, search_global=False )
query = 'objects:' pos = searchindex.find(query) if pos < 0: raise ValueError('"objects:" not found in search index')
if 'grains' not in __opts__ or not __opts__['grains']: __opts__['grains'] = salt.loader.grains(__opts__)
return [ self.create_student( username='student_{}'.format(index), email='student_{}@example.com'.format(index) ) for index in xrange(number_of_students) ]
self.channel = salt.transport.Channel.factory(self.opts['master_uri'])
self.get_data_specs(model)[0].validate(data) X = data return self.cost(X, model.reconstruct(X))
pass
if self.status == "approved": return
request = RequestFactory().post('unused_url') request.user = self.user request.META['HTTP_HOST'] = "aGenericValidHostName" self.append_allowed_hosts("aGenericValidHostName")
if access_key != settings.VERIFY_STUDENT["SOFTWARE_SECURE"]["API_ACCESS_KEY"]: return HttpResponseBadRequest("Access key invalid")
import logging try: import json5 as json HAS_JSON5 = True except ImportError: HAS_JSON5 = False
FEATURES['ENABLE_PREREQUISITE_COURSES'] = True
from __future__ import absolute_import
runner = salt.runner.RunnerClient(__opts__['__master_opts__']) return runner.cmd(fun, arg)
self.select_content_group_radio_button() select_option_by_text( self.q(css=self._bounded_selector(self.content_group_selector_css)), content_group )
publish.__opts__ = {}
import salt.ext.six as six from jinja2 import BaseLoader, Markup, TemplateNotFound, nodes from jinja2.environment import TemplateModule from jinja2.ext import Extension from jinja2.exceptions import TemplateRuntimeError import jinja2 import yaml
import salt.utils
pass
url = reverse('verify_student_start_flow', kwargs=course_kwargs)
dt = out_array.dtype if output_pixel_vals: dt = 'uint8' out_array[:, :, i] = np.zeros(out_shape, dtype=dt) + \ channel_defaults[i]
from datetime import datetime from mock import patch, Mock
details['extends'] = extends keep_looping = True
name_instructions = _(u"Your legal name, used for any certificates you earn.")
from openedx.core.djangoapps.programs.models import ProgramsApiConfig
except Exception: log.critical('Unexpected error while polling minion events', exc_info=True) return None
composite_space = CompositeSpace(spaces) sources = tuple(sources) return (composite_space, sources)
scal_points = new_W / norms.dimshuffle('x',0)
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
if exc.winerror == 2: return target raise
__func_alias__ = {'set_': 'set'}
coef = safe_sparse_dot(self.dual_coef_, self.support_vectors_)
self._wait_for( lambda: self.position == position, 'Position is {position}'.format(position=position) )
assert_equal(10 + 9, n_lines)
if not self.fields['download_track'].is_set_on(self) and self.track: self.download_track = True
download_template_deps = ('dist', 'release', 'arch')
import integration import salt.utils
from __future__ import absolute_import
from __future__ import absolute_import
import salt.utils.memcached
if self.y is None: return self.X else: return (self.X, self.y)
return not self == block_data
chunks = [kwargs]
import salt.config import salt.payload import salt.state import salt.utils import salt.utils.jid import salt.utils.url from salt.exceptions import SaltInvocationError
self.assertIs(descriptor._unwrapped_field_data, original_field_data) self.assertIsNot(descriptor._unwrapped_field_data, descriptor._field_data)
keystone.auth_key: 203802934809284k2j34lkj2l3kj43k
httpretty.register_uri(httpretty.POST, "https://verify.example.com/submit/")
return self.q(css='#course-index-tabs .programs-tab a').present
return _is_batch_all(batch, lambda x: isinstance(x, theano.gof.Variable))
config = {} candidates = Microsite.objects.all() for microsite in candidates: values = microsite.values config[microsite.key] = values return config
certificate_invalidation.deactivate()
error_summary = _("An error occurred while creating your receipt.")
notification_msg = MIMEMultipart('related') msg_alternative = MIMEMultipart('alternative') notification_msg.attach(msg_alternative) subject = _(u'Course Credit Eligibility')
import os
credit_state = self.service.get_credit_state(self.user.id, self.course.id) self.assertEqual(credit_state['credit_requirement_status'][0]['status'], "satisfied")
query = self.q(css=self._bounded_selector("#cohort-select option")) return len(query) > 0, query
if salt.utils.is_true(kwargs.get('refresh', True)): refresh_db(saltenv)
time.sleep(10)
return False
mode = models.CharField(default=CourseMode.DEFAULT_MODE_SLUG, max_length=100)
log.error('Unable to create symlink {0}'.format(down_file)) if not start: os.unlink(down_file) return False
from __future__ import absolute_import
X = X[:, np.newaxis]
user_preference = kwargs["instance"] emit_setting_changed_event( user_preference.user, sender._meta.db_table, user_preference.key, user_preference._old_value, user_preference.value ) user_preference._old_value = None
m = Memory(cachedir=lfw_home, compress=6, verbose=0) load_func = m.cache(_fetch_lfw_pairs)
for n, color in enumerate(colors): data = X_test[y_test == n] plt.scatter(data[:, 0], data[:, 1], marker='x', color=color)
return u"grades.MaxScores.{}___{}".format(self.cache_prefix, unicode(location))
import salt.loader
self.publish((('html', 'html00'),))
try: from celery import Celery from celery.exceptions import TimeoutError HAS_CELERY = True except ImportError: HAS_CELERY = False
FILE_UPLOAD_STORAGE_BUCKET_NAME = 'edxuploads' FILE_UPLOAD_STORAGE_PREFIX = 'submissions_attachments'
os.environ.update(DPKG_ENV_VARS)
pass
import logging logging.basicConfig(filename=TEST_ROOT / "log" / "lms_acceptance.log", level=logging.ERROR)
key = '^' + name.lstrip('^').rstrip('$') + '$'
self.user = UserFactory(is_staff=True) self.client = AjaxEnabledTestClient() self.client.login(username=self.user.username, password='test')
import os import logging import smtplib from email.utils import formatdate
from salt.modules import chef
if krel[0] > 5 or (krel[0] == 5 and krel[1] > 0): if not os.path.exists('/usr/sbin/rcctl'): return __virtualname__
for lib in self.libs: for x in xrange(5): self.update_lib(lib) self.loader.clear() self._verify_libs()
if isinstance(address, bytes): self.network_address = IPv6Address(address) self._prefixlen = self._max_prefixlen self.netmask = IPv6Address(self._ALL_ONES) return
n_folds = 5 n_iter = 1000
nkfd_form = unicodedata.normalize('NFKD', s) return nkfd_form.encode('ASCII', 'ignore').decode('ASCII')
with store.branch_setting(ModuleStoreEnum.Branch.draft_preferred): store.delete_item(item_location, ModuleStoreEnum.UserID.test)
import salt.ext.six as six
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.assertContains( response, "<article class=\"course {}\">".format(self.MODE_CLASSES[status]) )
self.user = {}
#html_theme_options = {}
from __future__ import absolute_import import logging import time import json
conditions_map = {
cached_requirements = __salt__['cp.cache_file']( requirements, saltenv )
if LANGUAGE_SESSION_KEY in request.session: del request.session[LANGUAGE_SESSION_KEY]
return euclidean_distances(X, self.cluster_centers_)
raise exc
__virtualname__ = 'service'
__salt__['file.write']('{0}-make.conf'.format(os.path.join(cdir, jname)), 'WITH_PKGNG=yes')
self.kernel.theta = theta
with self.assertNumQueries(0): self.field_data_cache = FieldDataCache([mock_descriptor()], course_id, self.user) self.kvs = DjangoKeyValueStore(self.field_data_cache)
try: import exceptions except ImportError: pass
self.label_distributions_ = np.zeros((n_samples, n_classes)) for label in classes: self.label_distributions_[y == label, classes == label] = 1
user_profile._changed_fields = get_changed_fields_dict(user_profile, sender)
'file_roots': dict,
X = np.asfortranarray(iris.data.astype(tree._tree.DTYPE)) y = iris.target
self.assertEqual(result['success'], 'incorrect')
Y = None
enrollment = CourseEnrollment.get_or_create_enrollment(user, course_id) self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assert_no_events_were_emitted()
return Fragment(self.FRAG_CONTENT)
from safe_lxml import defuse_xml_libs defuse_xml_libs()
'user',
(32, False, u"False"),
import_library_from_xml( self.store, 'test_user', self.export_dir, ['exported_source_library'], static_content_store=contentstore(), target_id=source_library2_key, load_error_modules=False, raise_on_failure=True, create_if_not_present=True, )
return environ.setdefault(key, value)
'name': get_config_value('name'),
return {self.answer_id: self.initial_display}
return set([p.id for p in course.user_partitions])
for block_data in block_list: (block_type, block_id) = block_data self.assertOLXMissing(block_type, block_id, draft=True) self.assertOLXMissing(block_type, block_id, draft=False)
clf = svm.LinearSVC(verbose=1) clf.fit(X, Y)
return self.q(css='.outline .no-content').is_present()
indices = []
'edxval',
if isinstance(decision_tree, _tree.Tree): recurse(decision_tree, 0, criterion="impurity") else: recurse(decision_tree.tree_, 0, criterion=decision_tree.criterion)
assert_raises(ValueError, lshf.partial_fit, np.random.randn(n_samples_partial_fit, n_features - 1))
if not _exists: _exists = name in ls_(cache=False, path=path) return _exists
'submission': submission,
limited_epoch_train(os.path.join(pylearn2.__path__[0], "scripts/autoencoder_example/hcae.yaml"))
if self.whiten: W = W / tensor.sqrt(self.v[:self.component_cutoff])
ransac_estimator.fit(X, y)
self.assert_correct_json_response(json_response)
data={'metadata': {'user_partition_id': str(partition_id)}}
import salt.utils from salt.exceptions import CommandExecutionError
self.assertTrue(context['reg_code_info_list'][0]['is_redeemed']) self.assertFalse(context['reg_code_info_list'][1]['is_redeemed'])
self.set_time("#start_time", time)
import salt.config import salt.loader
return OrderedDict()
msg = "Singleton array array(42) cannot be considered a valid collection." assert_raise_message(TypeError, msg, check_array, 42, ensure_2d=False)
description = "A Location object, saved to the DB in the form of a string" KEY_CLASS = UsageKey
EDXMKTG_LOGGED_IN_COOKIE_NAME = ENV_TOKENS.get('EDXMKTG_LOGGED_IN_COOKIE_NAME', EDXMKTG_LOGGED_IN_COOKIE_NAME) EDXMKTG_USER_INFO_COOKIE_NAME = ENV_TOKENS.get('EDXMKTG_USER_INFO_COOKIE_NAME', EDXMKTG_USER_INFO_COOKIE_NAME)
self.assertProfessionalModeBypassed()
response_dict = _reset_syslog_config_params(host, username, password, cmd, resets, valid_resets, protocol=protocol, port=port) ret.update({host: response_dict})
all_leaves = est.tree_.children_left == TREE_LEAF assert_array_almost_equal(np.dot(node_indicator, all_leaves), np.ones(shape=n_samples))
from __future__ import absolute_import import os import os.path import tempfile
{% from "doc1.sls" import var1, var2 as local2 %} {{ var1.foo }} {{ local2.bar }}
energy = dbm.energy(V = v_state, hidden = [y_state]) unnormalized_prob = T.exp(-energy) assert unnormalized_prob.ndim == 1 unnormalized_prob = unnormalized_prob[0] unnormalized_prob = function([], unnormalized_prob)
self.assertTrue(inspect.isfunction(self.loader[self.module_key]))
from salt.ext.six.moves import builtins as __builtin__ __builtin__.__salt__ = {}
sparse_results = sparse_classifier.predict_log_proba(X_test_sparse) dense_results = dense_classifier.predict_log_proba(X_test) assert_array_equal(sparse_results, dense_results)
user = User.objects.get(id=user_id) return anonymous_id_for_user(user, None)
CourseEnrollmentFactory(user=self.student, course_id=self.course.id)
block_wrappers.append(partial(replace_course_urls, course_id))
with salt.utils.flopen(filename, 'rb') as _fp: _contents = _fp.read() result = gpg.encrypt(_contents, recipients, passphrase=gpg_passphrase, output=output)
key = signature.get_shared_secret_key("asu") sig = signature.signature({}, key) self.assertEqual(sig, "7d70a26b834d9881cc14466eceac8d39188fc5ef5ffad9ab281a8327c2c0d093")
if num_threads is None: num_threads = multiprocessing.cpu_count() self.num_threads = num_threads
from salt.states import augeas
clf = GaussianNB()
if not self.has_partial_credit: return self.grade_without_partial_credit(student_answers=student_answers)
from __future__ import absolute_import
if isinstance(value, UsageKey): return value return course_key.make_usage_key_from_deprecated_string(value)
if node.value == '': node.value = '0'
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON
if asset_collection is None: asset_collection = self.DEFAULT_ASSET_COLLECTION_NAME self.asset_collection = self.database[asset_collection]
items_index = []
if exc.winerror == 1332: return '' else: raise
remove(item, force)
q = (cdist(x, mu[np.newaxis], "mahalanobis", VI=A) ** 2).reshape(-1) return q
from __future__ import absolute_import import re import os import logging import tarfile from contextlib import closing
from pickle import Pickler
for key, val in six.iteritems(dict_from): if key in dict_to: raise KeyError(key) dict_to[key] = val return dict_to
h = {'Host': '127.0.0.1'}
from salt.modules import rh_ip import jinja2.exceptions import os
self.assertTrue('Activate Course Enrollment' in response.content)
self.course_fixture = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
import salt.utils import tempfile import salt.utils.locales import salt.utils.url from salt.ext.six import string_types from salt.exceptions import CommandExecutionError, CommandNotFoundError
import salt.utils
use = zipped[:1]
DarkLangConfig = apps.get_model("dark_lang", "DarkLangConfig") objects = DarkLangConfig.objects if not objects.exists(): objects.create(enabled=True)
if location.category in DIRECT_ONLY_CATEGORIES: raise InvalidVersionError(location)
unrestricted_country, __ = self._setup_embargo()
return not isinstance(course_access.course_id, CCXLocator)
STATIC_ROOT = (TEST_ROOT / "staticfiles" / "lms").abspath()
result = self.store.get_library(LibraryLocator("non", "existent")) self.assertEqual(result, None)
__virtualname__ = 'dockerng'
else: self.send_response(200)
email = staff.email password = 'test' self.login(email, password) self.enroll(self.course, verify=True)
from salt.modules import dnsmasq
return [('127.0.0.1:11211 (1)', {})]
if self.mode != mode and mode is not None: self.mode = mode mode_changed = True
callback_url = request.build_absolute_uri( reverse("shoppingcart.views.postpay_callback") )
self.assertFalse(result['success']) self.assertIn(u"badly-typed value", result['error_html'])
import salt.utils
return redirect_to
yield current.node visited.add(current.node) stack.pop()
self.check_response('done_0', 'done-unmarked') self.check_response('done_1', 'done-unmarked')
courses_summary_list, __ = _accessible_courses_summary_list(self.request)
if options['course']: try: course_key = CourseKey.from_string(options['course']) except InvalidKeyError: course_key = SlashSeparatedCourseKey.from_deprecated_string(options['course'])
with remove_ccx(course_key) as (course_key, restore): return restore(self._modulestore.create_xblock( runtime, course_key, block_type, block_id=block_id, fields=fields, **kwargs ))
for student in students[5:6]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.deleted, mode='honor', grade=default_grade )
if tornado.util.errno_from_exception(e) == errno.ECONNABORTED: continue raise
field_data[attr] = deserialize_field(cls.fields[attr], value)
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
import salt.utils.event
continue
course_items_table.drawOn(self.pdf, table_left_padding, y_pos - rendered_height)
extra_data = [ unicode(course_id) if course_id else "", "donation_course" if course_id else "donation_general" ]
return self.q(css=CLASS_SELECTORS['slider_range']).visible
return super(NullBackend, self).is_request_in_microsite()
self.assert_grade(problem, answer, "correct") self.assert_grade(problem, answer.lower(), "correct")
X, Y = make_blobs(n_samples=50, centers=2, random_state=0, cluster_std=0.60)
svm = SVC(kernel="precomputed") assert_raises(ValueError, cross_val_score, svm, X, y)
from salt.utils import namespaced_function import salt.ext.six as six import salt.utils.cloud import salt.config as config from salt.utils import http from salt import syspaths
'SHOW_LANGUAGE_SELECTOR': False,
_default_logging_level_ = 'warning' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'ssh') _loglevel_config_setting_name_ = 'cli_salt_run_log_file'
return json.loads(response.content)["access_token"]
self.mock_programs_api() self.mock_credentials_api(self.student, data={"results": []}, reset_url=False)
return getattr(problem_class, 'human_name', problem_class.__name__)
preds2 = np.zeros_like(y) for train, test in cv: est.fit(X[train], y[train]) preds2[test] = est.predict(X[test])
stdout = json.loads(result['stdout']) return stdout != {}
labels = _get_labels(node, apiserver_url)
from __future__ import absolute_import
patched_client_login = Client.login
if 'HOME' in os.environ: os.environ['HOME'] = pwuser.pw_dir
seed_milestone_relationship_types() course_milestones = milestones_api.get_course_milestones(course_key=course_key, relationship="fulfills")
n_samples_range = np.logspace(2, 6, 5) colors = plt.cm.Blues(np.linspace(0.3, 1.0, len(n_samples_range)))
ir = IsotonicRegression(increasing='auto', out_of_bounds="clip") ir.fit(x, y)
return ( 'name', 'enabled', 'lti_consumer_key', 'lti_max_timestamp_age', 'change_date', 'changed_by', 'edit_link', )
mode_slug = models.CharField(max_length=100, verbose_name=_("Mode"))
if not xblock.has_children: return False for child in xblock.get_children(): if is_visible_to_specific_content_groups(child): return True return False
log = logging.getLogger(__file__)
cls.req_server_channel = salt.transport.server.ReqServerChannel.factory(cls.master_opts) cls.req_server_channel.pre_fork(cls.process_manager)
datacenter_id = 2
import salt.utils from salt.utils.locales import sdecode, sdecode_if_string
new_stores = get_mixed_stores(new_mixed_setting) self.assertIsInstance(new_stores, list)
self.assertEqual( response['content-disposition'], 'attachment' ) rows = response.content.strip().split('\r') headers = rows[0]
return Date().to_json(datetime_obj)
is_stopped = False for proc in all_processes: if proc.startswith(name) \ and _is_stopped_state(all_processes[proc]['state']): is_stopped = True break
import integration import salt.utils
if vb_machine_exists(INSTANCE_NAME): vb_destroy_machine(INSTANCE_NAME)
click_css(self, 'a.action-discard', 0, require_notification=False) confirm_prompt(self) self.wait_for_ajax()
'ENABLE_CORS_HEADERS': False,
if self.fitted: self.fit()
item = order.orderitem_set.all().select_subclasses()[0] coupon_redemption = CouponRedemption.objects.select_related('coupon').filter(order=order)
return [fold.set_input_space(space) for fold in self._folds]
all_files = __salt__['file.readdir'](name)
K_test = np.dot(X_[180:], X_[:180].T) y_test = y_[180:]
elif existing['code'] == 404:
cv = np.tile(covars, (means.shape[0], 1, 1)) return _log_multivariate_normal_density_full(X, means, cv)
items = source_hash.split('=', 1)
return self.get(path, data or {}, follow, HTTP_ACCEPT="application/json", **extra)
import salt import salt.utils.odict import salt.utils import salt.utils.dictupdate import salt.utils.network from salt.exceptions import CommandExecutionError, SaltInvocationError import salt.utils.cloud import salt.config
from __future__ import absolute_import
full_name = UserProfile.objects.get(user=user).name
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
vmconfig['changed']['add_{0}'.format(instance)].append(state_cfg)
if template not in salt.utils.templates.TEMPLATE_REGISTRY: raise CommandExecutionError( 'Attempted to render file paths with unavailable engine ' '{0}'.format(template) )
self.previous_version = edit_info.get('previous_version', None)
DIRECT_ONLY_CATEGORIES = ['course', 'chapter', 'sequential', 'about', 'static_tab', 'course_info']
for key, val in six.iteritems(string_kwarg): invalid_kwargs.append('{0}={1}'.format(key, val))
return len(self.q(css=self.section_selector))
ovr = OneVsRestClassifier(LinearSVC(random_state=0)) assert_raises(ValueError, lambda x: ovr.coef_, None)
if not (settings.FEATURES.get("ENABLE_CREDIT_ELIGIBILITY", False) and is_credit_course(course_key)): return None
Y = Y.astype(np.float64) if sample_weight is not None: sample_weight = np.atleast_2d(sample_weight) Y *= check_array(sample_weight).T
INSTALLED_APPS += ('lettuce.django',) LETTUCE_APPS = ('courseware', 'instructor')
paver.easy.sh("exit 1")
NETWORK_DEVICE['UP'] = True
content = '<garbage tag No closing brace to force <span>error</span>' payload = {'content': content, 'date': 'January 11, 2013'}
pass
DEPRECATED_SETTINGS = ["CSS Class for Course Reruns", "Hide Progress Tab", "XQA Key"]
instructor = self.make_instructor() self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
return obj
self.assertFalse(thread_page.check_if_selector_is_focused(selector='.thread-wrapper'))
from __future__ import absolute_import
existing_files = self._pkgfiles_fun('check_existing', pkg_name, pkg_files, formula_def)
from __future__ import absolute_import import os import copy
providers_config = cloud_providers_config(providers_config_path)
old_time = datetime.datetime.now(UTC) self.store.publish(component.location, publish_user) updated_component = self.store.get_item(component.location)
'error': _("Refresh the page and make an attempt before resetting."),
request.user = request.client.user
input_dict = {'1_2_1': 'California'} correct_map = problem.grade_answers(input_dict) self.assertEquals(correct_map.get_hint('1_2_1'), "")
from __future__ import absolute_import
try: face = sp.face(gray=True) except AttributeError: from scipy import misc face = misc.face(gray=True)
ret['comment'] = 'Event module not available. Beacon enable job failed.'
tsvd = TruncatedSVD(n_components=52, random_state=42) Xt = tsvd.fit_transform(X) Xinv = tsvd.inverse_transform(Xt) assert_array_almost_equal(Xinv, Xdense, decimal=1)
if not organizations_enabled(): return [] from organizations import api as organizations_api return organizations_api.get_course_organizations(course_id)
if signal.getsignal(signal.SIGINT) is signal.SIG_DFL: signal.signal(signal.SIGINT, self._handle_signals)
assert False, "studio_view should produce valid html"
return PushNotificationConfig.is_enabled()
train_with_monitoring_datasets( train_dataset=dataset3, monitoring_datasets=no_monitoring_datasets, model_force_batch_size=False, train_iteration_mode='sequential', monitor_iteration_mode='sequential')
n_classes = 3 plot_colors = "bry" plot_step = 0.02
if len(set(ret).intersection(minions)) >= len(minions): return ret
VERSION = 4
self.solar_team.add_user(self.users[user])
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
'order_masters': bool,
ret['comment'] = 'Event module not available. Beacons enable job failed.'
__virtualname__ = 'virtualenv'
self.clear_user_answers(user) SurveyAnswer.save_answers(self, user, answers, course_key)
score = MagicMock() score.possible = possible score.earned = earned return score
return __MP_LOGGING_QUEUE
self.configuration = kwargs.pop('configuration', None) if not self.configuration: self.configuration = settings.ACCOUNT_VISIBILITY_CONFIGURATION
'loop_interval': float,
if val_video_data: encoded_videos = val_video_data.get('profiles', {})
self.clear_subs_content()
tab = tab_class(tab_dict=dict_tab)
return caches[alias]
self.assertIn('level-element', html)
url = reverse('instructor_dashboard', kwargs={'course_id': self.course.id.to_deprecated_string()}) self.assert_request_status_code(200, url)
import salt.utils
from salt.utils.odict import OrderedDict
self.assertEqual(response.status_code, 204)
test_invalid_token("AAAAAAAAAAAAAAAAAAAAANRGw8HDEmlcLVFawgY9wI8=", "padding")
self.assertLessEqual(old_time, updated_component.published_on) self.assertEqual(updated_component.published_by, publish_user)
return bool(user and has_access(user, 'staff', course, course.id))
return word.strip().lower()
#latex_logo = None
inner_module = inner_get_module(location.replace(category="problem", name='choiceprob')) inner_module.attempts = 1 inner_module.save()
'cli_summary': bool,
metadata_translations = { 'slug': 'url_name', 'name': 'display_name', }
import salt.utils
for kernel in kernels: gpc = GaussianProcessClassifier(kernel=kernel).fit(X, y) assert_almost_equal(gpc.log_marginal_likelihood(gpc.kernel_.theta), gpc.log_marginal_likelihood(), 7)
'tools.salt_token.on': True, 'tools.salt_auth.on': False,
n_iter = 4 n_iter_specified = False
return self.posterior.sample_from_epsilon(shape)
train_data, test_data, target_train, target_test = train_test_split( data, target, test_size=.2, random_state=0)
listener_state = 'cmd_|-listener_test_listening_change_state_|-echo "Listening State"_|-mod_watch' self.assertIn(listener_state, state_run)
this_yaml = test_yaml_which_set % {'which_set': 'valid'} try: trainer = yaml_parse.load(this_yaml) trainer.main_loop() raise AssertionError except ValueError: pass
self.client.login(username=self.instructor.username, password="test") self._assert_certificates_visible(False)
self.assertFalse(res_json['success'])
url(r'^api/courses/', include('course_api.urls')),
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath, destructiveTest
import salt.utils from salt.exceptions import CommandExecutionError
MobileApiConfig(video_profiles="mobile_low,mobile_high,youtube").save()
options = dict(d) task_id = options['task_id'] del options['task_id'] return SubtaskStatus.create(task_id, **options)
X = Xboston y = yboston
'packages': ('openassessment',),
PAYMENT_STATUS_RESPONSE = "success"
for kernel in kernels: gpr = GaussianProcessRegressor(kernel=kernel).fit(X, y) assert_equal(gpr.log_marginal_likelihood(gpr.kernel_.theta), gpr.log_marginal_likelihood())
section_description = { 'section_descriptor': section, 'xmoduledescriptors': [child for child in xmoduledescriptors if child.has_score] }
self.q(css='.form-create.create-user .user-email-input').fill(email)
errstring = "Error: too few arguments" with self.assertRaisesRegexp(CommandError, errstring): call_command('force_publish')
PACKAGES_TO_UNINSTALL = [
_ = lambda text: text
termination_criterion = EpochCounter(5)
self.assertEqual(len(site_configuration_history), 1)
raise SkipTest
levels = np.linspace(0, Z.max(), 25) plt.contourf(X, Y, Z, levels=levels, cmap=plt.cm.Reds)
for line in lines: name = _ips_get_pkgname(line) version = _ips_get_pkgversion(line) __salt__['pkg_resource.add_pkg'](ret, name, version)
num_vis = rng.randint(1,11) n_classes = rng.randint(1, 11)
assert hasattr(self, 'shape')
read_only_fields = () explicit_read_only_fields = ("profile_image", "requires_parental_consent")
self.access = accesskey self.user_id = userid return True
import salt.utils from salt.version import SaltStackVersion as _SaltStackVersion from salt.exceptions import CommandExecutionError, CommandNotFoundError
'processors': get_config_value('processors'),
from __future__ import absolute_import
self._assert_cert_status(phantom_course, self.user, CertificateStatuses.error)
registration = world.RegistrationFactory(user=user) registration.register(user) registration.activate() CourseEnrollment.enroll(user, course_key)
upload_csv_to_report_store(rows, 'enrollment_report', course_id, start_date, config_name='FINANCIAL_REPORTS')
if value == 'course_org_filter': return alternate return default
responseparam_element = etree.SubElement(response_element, "responseparam") responseparam_element.set("type", "tolerance") responseparam_element.set("default", str(tolerance))
from __future__ import absolute_import
url_full = tornado.httputil.url_concat(url, params)
#epub_pre_files = []
return self.make_call(reverse('team_membership_list'), expected_status, 'get', data, **kwargs)
RestrictedCourse.invalidate_cache_for_course(instance.course_key) CountryAccessRule.invalidate_cache_for_course(instance.course_key)
try: os.makedirs(minion_sock_dir, 0o755) except OSError as exc: log.error('Could not create SOCK_DIR: {0}'.format(exc)) if minion_sock_dir == default_minion_sock_dir: raise
value = loader.construct_scalar(node) if '.' not in value: raise yaml.YAMLError("import tag suffix contains no '.'") return try_to_import(value)
if cls.has_professional_mode(modes_dict): return False
assert images[3] == kerns[3] flops = kerns[1] * kerns[2] * 2 #nb flops by output image flops *= out[1] * out[2] flops *= images[3] * kerns[0] * images[0] return flops
- volumes: - /usr/local/etc/ssl/certs/example.crt: bind: /etc/ssl/certs/com.example.internal.crt ro: True
return files, symlinks
face_image_url = models.URLField(blank=True, max_length=255) photo_id_image_url = models.URLField(blank=True, max_length=255)
return stdout
if self.child_fde in rlist: try: stderr = self._translate_newlines( salt.utils.to_str( os.read(self.child_fde, maxsize) ) )
corr_eq_dir = np.dot(Gram[:n_active, n_active:].T, least_squares)
clf = DecisionTreeClassifier(max_depth=3) clf.fit(X, y_degraded)
naughty_update = { "username": "not_allowed", "gender": "undecided", "email": "not an email address" }
try: C = linalg.cholesky(R, lower=True) except linalg.LinAlgError: return reduced_likelihood_function_value, par
if course_org_filter: org_filter_out_set.remove(course_org_filter)
('saml_key', 'MIICsDCCAhmgAw'), ('saml_key_alt', 'MIICWDCCAcGgAw'),
AUTHENTICATION_BACKENDS = ( 'ratelimitbackend.backends.RateLimitModelBackend', )
estimators = [c for c in estimators if not is_abstract(c[1])]
self.client.logout() response = self.client.get(self.get_token_url) self.assertEqual(response.status_code, 302)
import salt.utils from salt.modules import pkg_resource import salt.ext.six as six
return self.q(css='.action-publish').first
with self.assertNumQueries(0): self._assert_group_assignment(user, VerificationPartitionScheme.DENY)
for test_index in self._iter_test_indices(X, y, labels): test_mask = np.zeros(_num_samples(X), dtype=np.bool) test_mask[test_index] = True yield test_mask
self.assertTrue(stat1.st_size < stat2.st_size)
import salt.ext.six as six
self._setup_mode_and_enrollment(self.PAST, "verified")
score_css = 'div.problem-progress' expected_text = '({})'.format(score) world.wait_for(lambda _: world.css_has_text(score_css, expected_text))
assert_greater(np.abs(stable_var(A) - one_pass_var(A)).max(), tol)
adapters = _parse_interfaces() adapters[iface] = data
import salt.utils import salt.utils.locales import salt.utils.systemd import salt.ext.six as six from salt.exceptions import CommandExecutionError
if name == 'due': return None if name == 'start' and block.category != 'course': return None
while top_level_logger.handlers: top_level_logger.handlers.pop()
pass
self.q(css=self.active_problem_selector('.annotation-return')).click()
from __future__ import unicode_literals
status.__salt__ = {}
xblock.children = children
EmptyPromise( lambda: self.q(css='div.add-xblock-component').present, 'Wait for the menu of components to be present' ).fulfill()
plt.figure()
estimator = clone(self.estimator) if self.verbose > 0: print("Fitting estimator with %d features." % np.sum(support_))
__salt__['pkg.install']('ifenslave-2.6')
test_data = state_run['cmd_|-test_one_changing_state_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
self.assertEqual( self.run_function('shadow.del_password', [NO_USER]), 'ERROR: User not found: {0}'.format(NO_USER))
expr = stripXML(self.mathml_start + expr + self.mathml_end) expected = stripXML(self.mathml_start + expected + self.mathml_end)
self.service.remove_credit_requirement_status( self.user.id, self.course.id, 'grade', 'grade' )
from __future__ import absolute_import from json import JSONEncoder, loads
email = student[EMAIL_INDEX] username = student[USERNAME_INDEX] name = student[NAME_INDEX] country = student[COUNTRY_INDEX][:2]
cherrypy.request.lowstate = [data]
return LOOKUP[namespace].get_template(name)
log = logging.getLogger(__name__)
from salt.states import reg
task_entry = self._create_input_entry() with self.assertRaises(ItemNotFoundError): self._run_task_with_mock_celery(task_class, task_entry.id, task_entry.task_id)
self.lc_block.source_library_id = "" result = self.lc_block.validate()
return _('Free')
self.assertEqual(expected, dtime.strftime(fmt.encode('utf8')).decode('utf8'))
import logging
import logging import codecs try: import sqlite3 HAS_SQLITE3 = True except ImportError: HAS_SQLITE3 = False
for i, j in product([0, 1], repeat=2): metric([i], [j])
vertical1.children.append(html.location) self.store.update_item(vertical1, self.user.id)
return etree.Element("javascriptinput")
Axes3D
import salt.ext.six as six
if not self.q(css="input.no_special_exam").present: return False
self.assertFalse(BulkEmailFlag.feature_enabled(course_id))
pass
other_course = CourseLocator(org='other', course='other', run='other') self._assert_enabled_for_course(other_course, False)
valid_file.seek(0) test_file.seek(0)
import salt.utils from salt.modules import ini_manage as ini
import os import logging import re
import salt.key import salt.crypt
DONATION_TYPES = ( ("general", "A general donation"), ("course", "A donation to a particular course") )
if Y.ndim == 1: Y = Y[:, np.newaxis] if Y.shape[1] == 1: Y = np.append(1 - Y, Y, axis=1)
axis = np.linspace(emp_percentiles[0, col], emp_percentiles[1, col], num=grid_resolution, endpoint=True)
self.assertIsNone(self.request.session.get(SESSION_KEY))
latex_domain_indices = False
if raw: self.set_raw_content(content) else: self.set_content(content) self.save()
msg = "does not match the number of clusters" assert_raises_regex(ValueError, msg, MiniBatchKMeans(init=test_init, random_state=42).fit, X_csr)
self.assertEqual(first_cohort.users.get(), course_user)
version_history = modulestore().get_block_generations(updated_problem.location) self.assertEqual(version_history.locator.version_guid, first_problem.location.version_guid)
self.navigate_to_video()
self.get_data_specs(model)[0].validate(data) return None
cipher = aes_cipher_from_key(key) padded_data = pad(data) return cipher.encrypt(padded_data)
X = [[2, 1, 2], [9, 1, 1], [6, 1, 2], [0, 1, 2]] y = [0, 1, 2, 2]
import salt.utils
axes = self.input_space.axes assert len(axes) == 4
self.wait_for( lambda: self._is_element_visible(".MathJax_SVG"), description="MathJax Preview is rendered" )
def make_thunk(self, node, storage_map, compute_map, no_recycling): if not convnet_available(): raise RuntimeError('Could not compile cuda_convnet')
return sorted(st_.states)
return {'xqueue_callback_url_prefix': 'dummy_value', 'request_info': {}, }
ext_user = User.objects.get(email=self.ext_user.email) self.assertFalse(auth.user_has_role(ext_user, CourseInstructorRole(self.course.id)))
if ApiAccessRequest.api_access_status(request.user) is not None: return redirect(reverse('api_admin:api-status')) return super(ApiRequestView, self).get(request)
from __future__ import absolute_import import logging
return self.MODE_TO_CERT_NAME.get( cert_mode, _(u"{platform_name} Certificate for {course_name}") ).format( platform_name=microsite.get_value('platform_name', settings.PLATFORM_NAME), course_name=course_name )
rbm1.random_state = 42 d_score = rbm1.score_samples(X) rbm1.random_state = 42 s_score = rbm1.score_samples(lil_matrix(X)) assert_almost_equal(d_score, s_score)
repr = [inputs]
import salt.utils.cloud import salt.config as config from salt.exceptions import ( SaltCloudException, SaltCloudSystemExit, SaltCloudConfigError, SaltCloudExecutionTimeout, SaltCloudExecutionFailure )
from salt.utils.schema import (Schema, StringItem, IntegerItem, SecretItem, PortItem, BooleanItem, RequirementsItem, DictItem, AnyOfItem ) from salt.config.schemas.minion import MinionConfiguration
from __future__ import absolute_import
from __future__ import absolute_import import os import subprocess
URLCONF_MODULES = ['myapp.url', 'another_app.urls']
ret['result'] = False ret['comment'] = 'Failed to create data pipeline {0}: {1}'.format( name, result_pipeline_definition['error']) return ret
self.cohort_management_page.save_discussion_topics(key)
above_cutoff = (abs(s) > cond * np.max(abs(s))) psigma_diag = np.zeros_like(s) psigma_diag[above_cutoff] = 1.0 / s[above_cutoff]
if enum_value == cls.released: return cls.LAST_MONTH elif enum_value == cls.future: return cls.NEXT_MONTH else: return DEFAULT_START_DATE
from __future__ import absolute_import
xblock_info = create_xblock_info(xblock, include_ancestor_info=is_unit_page)
if missing_values == 0: n_zeros_axis = np.zeros(X.shape[not axis], dtype=int) else: n_zeros_axis = X.shape[axis] - np.diff(X.indptr)
#log.debug('diff_mtime_map: the maps are the same') return False
for mode in configured_modes: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode, mode_display_name=mode, )
resp = self.client.post('/password_reset_confirm/{0}-{1}/'.format(uidb36, token), { 'new_password1': 'bar', 'new_password2': 'bar' }, follow=True)
break
from salt.log.mixins import NewStyleClassMixIn from salt.log.setup import LOG_LEVELS
call_command('manage_group', TEST_GROUP) self.check_groups([TEST_GROUP])
event_info = dict() event_info['module_id'] = self.capa_module.location.to_deprecated_string() event_info['problem_part_id'] = self.id
_list = self.run_function('beacons.list', return_yaml=False) self.assertTrue(_list['enabled'])
self.assertEquals(serializer.data['root'], unicode(self.block_structure.root_block_usage_key))
from __future__ import unicode_literals
log = logging.getLogger(__name__)
raise NotImplementedError(str(self.__class__) + " does not implement " "_get_required_mlp_output_space")
from __future__ import absolute_import
start = datetime.now(UTC) first_block = self.add_icrv_xblock(related_assessment_name="Midterm Start Date")
template_dir_name = None module_class = StaticTabModule
assert_raises(ValueError, chi2_kernel, [[0, -1]]) assert_raises(ValueError, chi2_kernel, [[0, -1]], [[-1, -1]]) assert_raises(ValueError, chi2_kernel, [[0, 1]], [[-1, -1]])
return parse(out)
self.assert_enrollment_status()
chapter = self.store.create_child(self.user_id, self.course.location, 'chapter', block_id='Overview', asides=asides) self.writable_chapter_location = chapter.location
return False
(['professional'], 'professional'), (['no-id-professional'], 'no-id-professional')
instructor = UserFactory.create(password="test") role = CourseInstructorRole(self.course.id) role.add_users(instructor) return instructor
request = self.factory.get('/login') request.META['HTTP_REFERER'] = referer return request
time.sleep(1) return info(name).get('home') == home
lazymod_py_file = lazymod.__file__ if lazymod_py_file.endswith("c"): lazymod_py_file = lazymod_py_file[:-1]
if not ((user.id and CourseEnrollment.is_enrolled(user, course.id)) or has_access(user, 'staff', course)): raise UserNotEnrolled(course.id)
dst_path = os.path.dirname(os.path.abspath(dst_filename)) dst_temp_filename=os.tempnam(dst_path);
UserPreference.objects.get_or_create( user=user, key=NOTIFICATION_PREF_KEY, defaults={ "value": UsernameCipher.encrypt(user.username) } )
title_css = ".csv-upload .message-title" detail_css = ".csv-upload .summary-item" return self._get_messages(title_css, detail_css)
modulestore = XMLModuleStore( DATA_DIR, course_ids=course_ids, default_class='xmodule.hidden_module.HiddenDescriptor', xblock_mixins=XBLOCK_MIXINS, ) yield modulestore
return CourseUserGroup.objects.get( course_id=course_key, group_type=CourseUserGroup.COHORT, name=name )
from salt import exceptions
import logging from salt.serializers import json
if uninstaller.startswith(('salt:', 'http:', 'https:', 'ftp:')):
X, y = make_classification(n_samples=20, n_classes=2, random_state=0)
self.assertFalse(linode._validate_name('ab'))
response = self._change_password() self.assertEqual(response.status_code, 200)
if os.path.isfile(rtag) and refresh: os.remove(rtag)
self.cache = caches['default']
raise NotImplementedError("%s doesn't implement make_symbolic_state" % type(self))
chgroups(name, ()) return _dscl(['/Users/{0}'.format(name)], ctype='delete')['retcode'] == 0
run_map = False
vms[profile] = extended
G = neighbors.kneighbors_graph(X, n_neighbors, mode='distance').toarray()
self._auto_publish_no_children(item.location, item.location.category, user_id, **kwargs) self._auto_publish_no_children(parent_usage_key, item.location.category, user_id, **kwargs) return item
(status, ring, pending, node) = line.split()
([]),
item = OrderItem(user=self.user, order=Order.get_cart_for_user(self.user)) with self.assertRaises(NotImplementedError): item.purchased_callback()
'f82b5416c9f54b5ce33989511bb5ef2e', self._get_anonymous_id(SlashSeparatedCourseKey('MITx', '6.00x', '2013_Spring'), descriptor_class)
del result['X'] del result['y']
for certificate in certificates: is_active = certificate.get('is_active', False) break
CourseEnrollment.enroll(self.user, self.course.id) self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course.id))
if not hasattr(user, '_roles'): user._roles = RoleCache(user)
_options['checktype'] = '1'
import salt.ext.six.moves.http_client
if modules_max_memory is True: resource.setrlimit(resource.RLIMIT_AS, old_mem_limit)
return self.REMOVE_SPAN_TAG_RE.search(element.get_attribute('innerHTML')).groups()[0].strip()
from salt.modules import mac_desktop from salt.exceptions import CommandExecutionError
max_depth = ((2 ** 31) - 1 if self.max_depth is None else self.max_depth) max_leaf_nodes = (-1 if self.max_leaf_nodes is None else self.max_leaf_nodes)
self._closed_captions_visibility(True)
raise NotImplementedError(str(self.__class__) + " does not implement " "log_conditional.")
data["children"] = obj["children"]
'error': _("Problem is closed."),
self.fail('An exception should be thrown')
university = microsite.get_value('university')
self.assertAssetsEqual(self.LOCKED_ASSET_KEY, self.LOCKED_ASSET_KEY.course_key, course_id)
return None
'pillar_cache_backend': str,
raise SaltCloudSystemExit( 'The request_instance action must be called with -a or --action.' )
'openedx.core.djangoapps.safe_sessions.middleware.SafeSessionMiddleware',
return unicode(self.id)
kernel = RBF(length_scale=1.0)
msg_format = _("Progress: {action} {succeeded} of {attempted} so far")
start_response(H[code], get_headers(ret, { 'Content-Type': 'application/json', })) return (ret,)
n_ranked_above = sum(rank[r] <= rank[label] for r in relevant)
if terminal.stdout is not None: terminal.recv() if terminal.stderr is not None: terminal.recv_err() time.sleep(0.125)
try: result = super(StringOrDate, self).from_json(value) except ValueError: return value if result is None: return value else: return result
for CourseState in self.course_actions_displayable_states + self.courses_with_state3_non_displayable: action_class.objects.update_state( CourseState.course_key, CourseState.state, should_display=CourseState.should_display, allow_not_found=True )
from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.ext.six import integer_types
pipe = Pipeline([('cls', LinearRegression())])
self.q(css='.nav-item .new-button').click()
ret = __salt__['vsphere.system_info'](host=host, username=user, password=password)
with patch_edxnotes_api_settings("http://example.com"): self.assertEqual("http://example.com/some_path/", get_endpoint_function("some_path/"))
if value is self.Empty: return return super(OpaqueKeyField, self).run_validators(value)
test = isinstance(test_list, tuple) and (not test_list[0]) self.assertTrue(test)
try: eauth = self.opts.get('external_auth', {}).get(token['eauth'], {})
assert isinstance(reference, UsageKey) if source_course_id == reference.course_key: return reference.map_into_course(dest_course_id) else: return reference
self.split_test_module.user_partition_id = 2 [active_children, inactive_children] = split_test_module.active_and_inactive_children() self.assertEqual(active_children, []) self.assertEqual(inactive_children, children)
xpath = "//div[@class='block']/p/b" self.assert_has_text(xml, xpath, 'HTML')
theano.compile.debugmode.default_make_thunk.append( get_unbound_function(BaseActs.make_thunk))
pattern=r'^((\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})|([A-Za-z0-9][A-Za-z0-9\.\-]{1,255}))$', min_length=1, required=True)
import logging import struct
return course_metadata_utils.clean_course_key(self.location.course_key, padding_char)
select = Select(browser_query.first.results[0]) ddl_selected_value = select.first_selected_option.get_attribute('value') return ddl_selected_value == value
exc_info_on_loglevel=logging.DEBUG
total_pages = int(math.ceil(float(total_students) / MAX_STUDENTS_PER_PAGE_GRADE_BOOK)) or 1
from salt.states import user
if remaining_iterations == 0: if verbose: print('Maximum number of iterations reached') results = location, covariance, det, support, dist
from __future__ import absolute_import import logging
if not self._verify_auth(): self.redirect('/login') return
continue
args.append(arg)
import salt.runner
user = User.objects.get(username=username)
filterwarnings('ignore', message='No request passed to the backend, unable to rate-limit')
from salt.states import alias
estimator.partial_fit(X, y, np.array((0, 1))) return estimator
countdown = ((2 ** retry_index) * base_delay) * random.uniform(.75, 1.25)
tapi, ntaps = 0, 0
self.find_css('.action-edit .edit').first.click()
U, V = svd_flip(U, V, u_based_decision=False)
output = FilterActs()(images, filters)
log.error("etcd: error. python-etcd does not fully support python 2.6, no error information available") raise
if not hasattr(self, 'rng'): self.setup_rng()
scaler_batch = MinMaxScaler().fit(X)
import salt.ext.six as six import salt.utils
import salt.utils import salt.exceptions
_base_iterator_cls = None
import salt.minion import salt.loader import salt.utils
return instr.encode('mbcs')
with remove_ccx(course_key) as (course_key, restore): return restore(self._modulestore.get_orphans(course_key, **kwargs))
selectors = compound_hint.get('value').upper().split() selector_set = set(selectors)
super(BaseLmsIndexTest, self).setUp()
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
out_file = os.path.join(conn['formula_path'], new_name)
self.assertTrue(self._is_valid_key(key), msg="Failed for unicode character {0}".format(unicode_char))
__virtualname__ = 'pkg'
self.post.assert_called_with(callback_url, data=expected_callback_dict)
ir.fit(x, y) ir.out_of_bounds = "xyz" assert_raises(ValueError, ir.transform, x)
vmconfig = _parse_vmconfig(vmconfig, vmconfig_type['instance']) log.debug('smartos.vm_present::{0}::vmconfig - {1}'.format(name, vmconfig))
if last_expression is not None: results.violations.append(ExpressionRuleViolation( rule, last_expression ))
if not timestamp: return False try: parse_datetime(timestamp) except ValueError: return False else: return True
self.browser.execute_script("window.scrollTo" + str(self.coordinates_for_scrolling(MANUAL_BUTTON_SELECTOR))) self.q(css=MANUAL_BUTTON_SELECTOR).click()
transport = 'ssh' address = self.url
self.assertNotIn(self.module_key, self.loader)
score_css = "div.chapters>section:nth-of-type({0}) div.sections>div:nth-of-type({1}) div.scores>ol>li".format( chapter_index, section_index )
return hasattr(self, method)
from __future__ import absolute_import import os import time import json import pprint import logging import decimal
return self.q(css='.wrapper-release .copy').first.text[0]
if not isinstance(self.course_id, CourseLocator): return response
projected_2 = rp.transform(data) assert_array_equal(projected_1, projected_2)
for param in ('path', 'image', 'vgname', 'template'): kwargs.pop(param, None)
cls.course_with_visibility = CourseFactory.create( display_name='visible_course', org='TestMicrositeX', course="foo", catalog_visibility=CATALOG_VISIBILITY_CATALOG_AND_ABOUT, emit_signals=True, )
set_credit_requirements(course.id, requirements)
MISSING = 0 COLLAPSE = 1 EXPAND = 2
datastore_cluster_ref = salt.utils.vmware.get_mor_by_property(_get_si(), vim.StoragePod, datastore_cluster_name) if datastore_cluster_ref: return {datastore_cluster_name: 'datastore cluster already exists'}
response = self.client.get(self.ping_url)
if len(User.objects.filter(username=uname)) > 0: return
if isinstance(arg, XBlock): return unicode(arg.location) else: return unicode(arg)
X = [[1], [2]] Y = [1, 2]
input_dict = {'1_2_1': '0'} correct_map = problem.grade_answers(input_dict)
import salt.ext.six.moves.http_client from salt.exceptions import CommandExecutionError
response = self.fetch('/', method='POST', body=json.dumps(valid_lowstate), headers={'Content-Type': self.content_type_map['json']})
self.create_credentials_config() self.mock_credentials_api(self.user, data={'results': []}) actual = get_user_program_credentials(self.user) self.assertEqual(actual, [])
delattr(self._modulestore, name)
_CreateTransaction = ctypes.windll.ktmw32.CreateTransaction _CommitTransaction = ctypes.windll.ktmw32.CommitTransaction _MoveFileTransacted = ctypes.windll.kernel32.MoveFileTransactedW _CloseHandle = ctypes.windll.kernel32.CloseHandle CAN_RENAME_OPEN_FILE = True
render_pipe = template_shebang(template, renderers, default, blacklist, whitelist, input_data)
api.set_credit_requirement_status(username, self.course_key, "grade", "grade", status="failed") self.assert_grade_requirement_status('failed', 0)
httpretty.register_uri( httpretty.POST, '{}/baskets/1/'.format(TEST_API_URL), status=200, body='{}', adding_headers={'Content-Type': JSON} )
if 'gw' in vm_: newnode['net0'] = newnode['net0'] + ',gw=' + vm_['gw']
self.client.login(username=self.coach.username, password="test")
from salt.exceptions import CommandExecutionError from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
course_key = ccx_key.to_course_locator() return _has_access_course_key(user, action, course_key)
LP_SRC_FORMAT = 'deb http://ppa.launchpad.net/{0}/{1}/ubuntu {2} main' LP_PVT_SRC_FORMAT = 'deb https://{0}private-ppa.launchpad.net/{1}/{2}/ubuntu' \ ' {3} main'
REQUEST_CACHE.data = {} REQUEST_CACHE.request = None
import salt.utils
assert_greater(gpr.log_marginal_likelihood(gpr.kernel_.theta), gpr.log_marginal_likelihood(gpr.kernel.theta))
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
#sys.exit(retcode)
output = os.popen('mongo --eval "print(\'running\')"').read() return output and "running" in output
X = (X - self.X_mean) / self.X_std
self.assertNotEqual(global_vars, [], msg='No modules were loaded.')
return urllib.quote_plus(smart_str(val))
orphan = course_key.make_usage_key('chapter', 'OrphanChapter') self.store.create_item( self.user_id, orphan.course_key, orphan.block_type, block_id=orphan.block_id )
BULK_EMAIL_RETRY_DELAY_BETWEEN_SENDS = 0.02
expected_y = y.mf_update( state_below = v.upward_state(v_state))
dictionary = dict(mako_context) return loader.render_to_string(file_name, dictionary=dictionary)
test_invalid_token(self.tokens[self.user][:-4], "aes")
task_type = 'proctored_exam_results_report' task_class = proctored_exam_results_csv task_input = {'features': features} task_key = "" return submit_task(request, task_type, task_class, course_key, task_input, task_key)
from __future__ import absolute_import import logging import time import json
utils.get_programs(self.user)
sh("pip uninstall --disable-pip-version-check -y {}".format(package_name)) uninstalled = True
try: return dict1[key] except KeyError: if default is None: return dict2[key] else: return dict2.get(key, default)
if not parent_location: return None
self.grid_scores_ = scores[::-1] / cv.get_n_splits(X, y) return self
self.assertEqual(google_provider.id, google_state.provider.id) self.assertEqual(self.user, google_state.user) self.assertEqual(user_social_auth_google.id, google_state.association_id)
y = np.array([3, 7, 5, 9, 8, 7, 10]) x = np.arange(len(y))
chapters = courses2[0].get_children() self.assertEquals(2, len(chapters)) self.assertIn(new_chapter_display_name, [item.display_name for item in chapters])
if which_set == 'test': content = content[1:] content = content[:-1]
task_folder = task_service.GetFolder(location) tasks = task_folder.GetTasks(0)
elif existing['code'] == 404: ret['comment'] = 'A node with this name was not found.' else: ret = _load_result(existing, ret)
if strategy == "mean": if missing_values != 0: n_non_missing = n_zeros_axis
n_samples, n_features = iris.data.shape
U, V = svd_flip(U, V)
return dict(result=True, data=outf.name)
'ssh_connect_timeout', vm_, __opts__, 900
item.video_bumper["transcripts"][lang] = filename
return LibrarySearchIndexer.do_library_reindex(store, self.library.location.library_key)
self.assertTrue(CourseEnrollment.is_enrolled(self.user, course_id)) self.assertTrue(self.user.roles.filter(name="Student", course_id=course_id))
self.assert_grade_requirement_status(None, 0)
import salt.utils
return self.find_css(css).first.text[0]
go_to_section("data_download")
from __future__ import absolute_import import logging import salt.utils
cache = {"course_cache": "blah blah blah"} modulestore().request_cache.data.update(cache)
return _after_ignition_network_profile(cmd, ret, name, network_profile, path, nic_opts)
#html_use_opensearch = ''
status = 'pending'
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../')
if getattr(self.distribution, 'salt_ssh_packaging_file', None) is None: print('This command is not meant to be called on it\'s own') exit(1)
self.factory(n_iter=-10000)
from __future__ import absolute_import import logging import time
del __define_global_system_encoding_variable__
ret['ping_status'] = bool(len(done))
kwargs['public_key'] = get_public_key(kwargs['public_key']).replace('\n', '')
display_output(data, opts=self.minion_opts) self.assertTrue(True)
print "checking initialization..." eobjs = before_ideal.create_user(self.course_key) before = EmailEnrollmentState(self.course_key, eobjs.email) self.assertEqual(before, before_ideal)
usage_id = LocationKeyField(max_length=255, db_index=True)
key_user = key_user.replace('\\', '_')
self.course = CourseFactory.create()
assert world.css_visible('iframe') check_lti_iframe_content("This is LTI tool. Success.")
'result': {'start_index': 2, 'end_index': 16, 'quote_length': 3}
css = {'scss': [resource_string(__name__, 'css/codemirror/codemirror.scss')]} js = {'coffee': [resource_string(__name__, 'js/src/raw/edit/xml.coffee')]} js_module_name = "XMLEditingDescriptor"
_mbce = MeanBinaryCrossEntropy() reconstruction_cost = lambda a, b: _mbce.cost(a, b) / ds.X.shape[1]
X -= X.min() with warnings.catch_warnings(record=True): estimator = Estimator()
m = Memory(cachedir=lfw_home, compress=6, verbose=0) load_func = m.cache(_fetch_lfw_people)
post_save.connect(invalidate_country_rule_cache, sender=CountryAccessRule) post_save.connect(invalidate_country_rule_cache, sender=RestrictedCourse) post_delete.connect(invalidate_country_rule_cache, sender=CountryAccessRule) post_delete.connect(invalidate_country_rule_cache, sender=RestrictedCourse)
VerificationStatus.add_status_from_checkpoints( checkpoints=[self.first_checkpoint, self.second_checkpoint], user=self.user, status=status )
space, source = data_specs if isinstance(space, CompositeSpace): sub_spaces = space.components sub_sources = source else: sub_spaces = (space,) sub_sources = (source,)
if contains_nan(mu): logger.info('nan found') return X
self.params_on_monitor = np.asarray(model.get_param_values())
from pylearn2.utils import serial
coupon = Coupon(code=code, description='testing code', course_id=course_key, percentage_discount=self.percentage_discount, created_by=self.user, is_active=is_active) coupon.save()
'syndic_finger': str,
BULK_EMAIL_EMAILS_PER_TASK = 100
with MongoContentstoreBuilder().build() as contentstore: with self.build_with_contentstore(contentstore) as modulestore: yield contentstore, modulestore
fig = plt.figure(figsize=(15, 8)) plt.suptitle("Manifold Learning with %i points, %i neighbors" % (1000, n_neighbors), fontsize=14)
required_boto3_version = '1.2.1'
pass
query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(None, query) self.assertEqual(result, attempt)
return getattr(settings, 'SOCIAL_AUTH_OAUTH_SECRETS', {}).get(self.backend_name, '')
from __future__ import absolute_import import logging
next_page = False continue
sparse_results = sparse_classifier.predict(X_test_sparse) dense_results = dense_classifier.predict(X_test) assert_array_equal(sparse_results, dense_results)
return BASE_URL + "/courses/" + self.course_id + "/" + self.url_path
if user_must_complete_entrance_exam(request, user, course): return redirect(reverse('courseware', args=[unicode(course.id)]))
for parent, children in enumerate(children_map): for child in children:
COUNTRIES_OVERRIDE = { "TW": "Taiwan", 'XK': _('Kosovo'), }
from __future__ import absolute_import
self.course.html_textbooks = [] self.assertNotIn( {'type': 'html_textbooks'}, list(xmodule_tabs.CourseTabList.iterate_displayable(self.course, inline_collections=False)), )
if not add_noise: assert_almost_equal(np.dot(s1_, s1) / n_samples, 1, decimal=3) assert_almost_equal(np.dot(s2_, s2) / n_samples, 1, decimal=3)
email_image = email_payload_first[1]
init = cls.__init__
if self.instance and self.instance.get("pinned") is None: self.instance["pinned"] = False
cause_copy = sharedX(np.zeros((num_samples,))).dimshuffle(0,'x') v_state = v_state[0,:] + cause_copy y_state = y_state[0,:] + cause_copy
reraise_as("Couldn't open {0}".format(filepath))
from __future__ import absolute_import
import salt.pillar
admin = AdminFactory()
y = np.dot(X, w) y = np.sign(y)
from __future__ import absolute_import
return ( "Staff" if user_id in self.context["staff_user_ids"] else "Community TA" if user_id in self.context["ta_user_ids"] else None )
model1 = clf.fit(X, Y[:, 0]).coef_ model2 = clf.fit(X, Y[:, :1]).coef_ assert_array_almost_equal(model1, model2)
try: import salt.utils.psutil_compat as psutil HAS_PSUTIL = True except ImportError: HAS_PSUTIL = False
return self.best_estimator_.predict_proba(X)
err_loc_emp_full[i, j] = np.sum(X.mean(0) ** 2) err_cov_emp_full[i, j] = EmpiricalCovariance().fit(X).error_norm( np.eye(n_features))
self.q(css='input.calibration-feedback-button').first.click()
AUTH_ENTRY_LOGIN_API = 'login_api' AUTH_ENTRY_REGISTER_API = 'register_api'
cc_thread, context = _get_thread_and_context(request, thread_id) if can_delete(cc_thread, context): cc_thread.delete() thread_deleted.send(sender=None, user=request.user, post=cc_thread) else: raise PermissionDenied
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
response = client.get('/')
return self.q(css='div.csh_hint_text').attrs('student_answer')
super(MultiprocessingProcess, self).__init__(*args, **kwargs)
return self.find_css('.wrapper-delete-button').first.attrs('data-tooltip')[0]
from salt.output import nested nested.__opts__ = {} ret = nested.output(obj).rstrip() return ret
max_scores_cache.push_to_remote()
if ltype: cmd = '{0} -t {1}'.format(cmd, ltype)
jid_dir_name = jid_file.rpartition('/')[2] self.assertEqual(jid_dir_name, 'jid')
class PortItem(IntegerItem):
self.page = _Page(page_num, num_pages) self.base_url = request.build_absolute_uri() self.count = result_count super(DiscussionAPIPagination, self).__init__()
CACHE_TIMEOUT = 0
return False
import copy import logging import os import re from distutils.version import LooseVersion as _LooseVersion
import tornado.httputil import tornado.simple_httpclient from tornado.httpclient import HTTPClient
ldapmod.__salt__ = {}
label = _(u"I agree to the {platform_name} {terms_of_service}.").format( platform_name=get_themed_value("PLATFORM_NAME", settings.PLATFORM_NAME), terms_of_service=terms_link )
cls.team_commentable_id = "team_discussion_id" cls.team = CourseTeamFactory.create( name=u'The Only Team', course_id=cls.course.id, topic_id='topic_id', discussion_topic_id=cls.team_commentable_id )
self.set_select_value(self.SCORED_LABEL, str(scored)) EmptyPromise(lambda: self.scored == scored, "scored is updated in modal.").fulfill()
init_bound = np.sqrt(2. / (fan_in + fan_out))
finish_time = time() self._ddog_histogram(evt_time, 'get_many.blks_out', block_count) self._ddog_histogram(evt_time, 'get_many.response_time', (finish_time - evt_time) * 1000)
if array.size > 0: mode = stats.mode(array) most_frequent_value = mode[0][0] most_frequent_count = mode[1][0] else: most_frequent_value = 0 most_frequent_count = 0
raise NotImplementedError( str(type(self)) + " does not implement fprop.")
students = self._create_students(10)
svd = TruncatedSVD(opts.n_components) normalizer = Normalizer(copy=False) lsa = make_pipeline(svd, normalizer)
self._test_email_address_failures(SESIllegalAddressError(554, "Email address is illegal"))
UserCourseTagFactory( user=self.student, course_id=self.course.id, key='xblock.partition_service.partition_{0}'.format(self.partition.id), value=str(user_tag) )
y = iris.target
self.set_state_from_lcp()
self.notes_page.go_to_page(2) self._verify_pagination_info( notes_count_on_current_page=1, header_text='Showing 26-26 out of 26 total', previous_button_enabled=True, next_button_enabled=False, current_page_number=2, total_pages=2 )
assert_array_almost_equal(clf_lda_svd.explained_variance_ratio_, clf_lda_eigen.explained_variance_ratio_[:tested_length])
import logging import salt.utils
return str(self.q(css='.main-article h1').text[0])
for service in services: service_key = None
test_string = "%%user_id%%" result = Ks.substitute_keywords_with_data( test_string, self.context, ) self.assertEquals(test_string, result)
inv = not callable(kernel)
try: self._find_one(usage_key) return True except ItemNotFoundError: return False
INSTALLED_APPS += ('django_extensions',)
super(RegenerateCertificatesTest, self).setUp() self.course = self.courses[0]
try: import salt.utils.psutil_compat as psutil HAS_PSUTIL = True except ImportError: HAS_PSUTIL = False
with open(filename, 'rb') as matlab_file: matlab_dict = io.loadmat(matlab_file, struct_as_record=True)
"xmodule_js",
if cal_sstats: norm_phi = np.dot(exp_doc_topic_d, exp_topic_word_d) + EPS suff_stats[:, ids] += np.outer(exp_doc_topic_d, cnts / norm_phi)
spmat = spmat.ensure_sorted_indices()
import re
lazy.invalidate(library_descriptor, '_unwrapped_field_data') library_descriptor._field_data = inheriting_field_data(InheritanceKeyValueStore(init_dict))
addr = _split_optional_netmask(address)
return 1
__virtualname__ = 'pkg'
__virtualname__ = 'sysctl'
self.wait_for(lambda: self.speed == expected_speed, "Video speed changed")
_min_parts = 3 if len(parts) < _min_parts: msg = "At least %d parts expected in %r" % (_min_parts, ip_str) raise AddressValueError(msg)
msg = Messages.ORDER_COMPLETED.format(order_number=response_data['order']['number']) log.debug(msg) response = DetailResponse(msg)
os.environ['REQUIRE_BUILD_PROFILE_OPTIMIZE'] = 'none'
return self.q(css="#is_prereq:checked").present
for __ in xrange(certificate_count): self.generate_certificate( course_id=self.course.id, mode='verified', status=CertificateStatuses.downloadable )
wiki_slug = None wiki_tag = xml_object.find("wiki") if wiki_tag is not None: wiki_slug = wiki_tag.attrib.get("slug", default=None) xml_object.remove(wiki_tag)
from salt.modules import munin
options = re.sub(r"([a-zA-Z])('|\\')([a-zA-Z])", r"\1&#39;\3", options)
return
import salt.ext.six as six import salt.utils import salt.utils.vmware import salt.utils.http from salt.utils import dictupdate from salt.exceptions import CommandExecutionError
return ['sub']
import salt.utils import salt.ext.six as six
pass
from __future__ import unicode_literals
clf = RandomForestClassifier(n_estimators=20)
return json.loads(reactivation_email_for_user(user).content)
'courseware_access': has_access( request.user, 'load_mobile', course_overview ).to_json(),
configuration_id = content.pop("id") group_ids = [group.pop("id") for group in content["groups"]] return (configuration_id, group_ids)
course = world.CourseFactory.create( org='edx', number='999', display_name='Test Course' )
breadcrumbs = self.q(css=self.BOOKMARKED_BREADCRUMBS).text return [breadcrumb.replace('\n', '').split('-') for breadcrumb in breadcrumbs]
provider_details.update(profile_data) profile_data = provider_details
grains['virtual_subtype'] = 'Xen PV DomU'
self.check_event_response_by_http_status( 'edit_resource', self.generate_edit_resource(self.resource_id), 200 )
world.browser.execute_script('window.prompt = function(){return %s;}') % prompt
from __future__ import absolute_import, print_function import os.path import logging
TASK_COMPATIBILITY_AT = 0 TASK_COMPATIBILITY_V1 = 1 TASK_COMPATIBILITY_V2 = 2 TASK_COMPATIBILITY_V3 = 3
self.assertTrue(self.certificates_section.certificate_exceptions_section.visible)
from __future__ import absolute_import import socket import logging import threading from multiprocessing import Queue
with self.assertRaises(TestException): module = self.descriptor._xmodule
import logging import os import re import datetime
pass
config_course_cohorts(course, is_cohorted=True, discussion_topics=["General", "Feedback"])
return 'Error: table_type hook and priority required'
for student in students[2:5]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.error, mode='honor' )
self.problem = ItemFactory.create( category="problem", parent_location=self.library.location,
self._create_courses_and_enrollments((self.TEST_ORG, True)) self._set_opt_in_pref(self.user, self.TEST_ORG, opt_in_pref)
internal_result = self.check_formula(ans1, ans2, self.samples) return internal_result == "correct"
return ret
from __future__ import absolute_import
import salt.utils from salt import crypt
'openedx.core.djangoapps.coursetalk',
space, source = data_specs if isinstance(space, CompositeSpace): sub_spaces = space.components sub_sources = source else: sub_spaces = (space,) sub_sources = (source,)
self.enrollment.can_refund = True self.assertTrue(self.enrollment.refundable())
labels_csr, new_inertia_csr = _labels_inertia( X_mb_csr, x_mb_squared_norms_csr, new_centers_csr) assert_greater(new_inertia_csr, 0.0) assert_less(new_inertia_csr, old_inertia_csr)
if child.location.category == 'problem': c_problem += 1 stack_data = []
super(MixedModuleStore, self).clone_course(source_course_id, dest_course_id, user_id, fields, **kwargs)
from salttesting import skipIf from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch ensure_in_syspath('../../')
split_test = self._assert_children(2) group_id_to_child = split_test.group_id_to_child.copy() self.assertEqual(2, len(group_id_to_child))
if key is not None:
self.assertEquals( preview.latex_preview('(2+3)/(4+5)'), r'\frac{2+3}{4+5}' )
FEATURES['MILESTONES_APP'] = True
return None if self._is_anonymous(obj) else obj["username"]
monitoring_train = DenseDesignMatrix(X=X) monitoring_test = DenseDesignMatrix(X=Y)
centos7-2-iad-rackspace: provider: rackspace-iad size: general1-2 snapshot: <cinder snapshot id>
rendered_html = etree.XML(problem.get_html())
import salt.utils from salt.state import STATE_INTERNAL_KEYWORDS as _STATE_INTERNAL_KEYWORDS
m_obj = re.match(r'^/courses/{}'.format(settings.COURSE_ID_PATTERN), input_str) if m_obj: return CourseKey.from_string(m_obj.group('course_id')) return None
PIPELINE_JS_COMPRESSOR = None
if return_distance: dist, neigh_ind = results else: neigh_ind = results
microsite.set_by_domain(self.microsite.site.domain) self.assertTrue(microsite.is_request_in_microsite())
data['changed'] = salt.fileserver.diff_mtime_map(old_mtime_map, new_mtime_map)
if cyg_arch == 'x86_64': return 'cygwin64' elif cyg_arch == 'x86': return 'cygwin' raise SaltInvocationError( 'Invalid architecture {arch}'.format(arch=cyg_arch))
return aside_id.usage_key
query = self.q(css=SETTINGS_NAME_SELECTOR) return query.attrs('id')
url = TEST_SERVER_HOST if path: url += path return url
row_items = [E.TD(x) for x in items] self.table.append(E.TR(*row_items))
if num_violations > violations_limit > -1: raise BuildFailure( "JSHint Failed. Too many violations ({count}).\nThe limit is {violations_limit}.".format( count=num_violations, violations_limit=violations_limit ) )
import ioflo.base.deeding
if 'family' in _CREATE_OPTIONS[set_type]: cmd = '{0} family {1}'.format(cmd, ipset_family)
doc_topic_distr /= doc_topic_distr.sum(axis=1)[:, np.newaxis] return doc_topic_distr
import salt.log.setup
for item in structure.get_children(): prepare_item_index(item, groups_usage_info=groups_usage_info) searcher.index(cls.DOCUMENT_TYPE, items_index) cls.remove_deleted_items(searcher, structure_key, indexed_items)
to_expand = '~' + str(user) if user else '~'
if not organizations_enabled(): return None from organizations import api as organizations_api from organizations.exceptions import InvalidOrganizationException try: return organizations_api.get_organization_by_short_name(organization_short_name) except InvalidOrganizationException: return None
manager = CourseImportManager(*args, **kwargs) return list(manager.run_imports())
total_amount = Invoice.get_invoice_total_amount_for_course(self.course_key) self.assertEqual(total_amount, 123.45)
y_pred = - clf.decision_function(X_test)
enrollment_mode, is_active = CourseEnrollment.enrollment_mode_for_user(student, course_key) show_generate_cert_btn = ( is_active and CourseMode.is_eligible_for_certificate(enrollment_mode) and certs_api.cert_generation_enabled(course_key) )
self.assertTrue(self.video.is_aligned(False))
if api_response.data is not None and api_response.data != '': content = json.dumps(api_response.data)
if (n_inliers_subset == n_inliers_best and score_subset < score_best): continue
trainer = yaml_parse.load(test_yaml_layer2 % {'layer0_filename': layer0_filename, 'layer1_filename': layer1_filename, 'layer2_filename': layer2_filename}) trainer.main_loop()
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return self.q(css=self._bounded_selector('a.duplicate-button'))
cohort = CohortFactory(course_id=self.course.id, users=[]) self._verify_non_staff_cannot_access(users_in_cohort, "GET", [unicode(self.course.id), cohort.id])
from __future__ import unicode_literals
neighborhoods = neighbors_model.radius_neighbors(X, eps, return_distance=False)
from __future__ import unicode_literals
c_mapping = DataSpecsMapping(channel.data_specs) channel_inputs = c_mapping.flatten(channel.graph_input, return_tuple=True) inputs = c_mapping.flatten(nested_theano_args[i + 1], return_tuple=True)
expected_fields = CourseSummary.course_info_fields + ['id', 'location'] return all([hasattr(course_summary, field) for field in expected_fields])
return CourseDetails.fetch_about_attribute(course_overview.id, 'overview')
url( r'^v1/blocks/{}'.format(settings.USAGE_KEY_PATTERN), BlocksView.as_view(), name="blocks_in_block_tree" ),
tsne = TSNE(early_exaggeration=0.99) assert_raises_regexp(ValueError, "early_exaggeration .*", tsne.fit_transform, np.array([[0.0]]))
serialized_tab = tab.to_json() deserialized_tab = tab.from_json(serialized_tab) self.assertEquals(serialized_tab, deserialized_tab)
destination_block.edit_info.source_version = ( new_block.edit_info.source_version or new_block.edit_info.update_version )
from salt.states import tomcat
self.assertIn(self.user_name, self.certificates_section.last_certificate_exception.text) self.assertIn(notes, self.certificates_section.last_certificate_exception.text)
for kernel in kernels: K_call_diag = np.diag(kernel(X)) K_diag = kernel.diag(X) assert_almost_equal(K_call_diag, K_diag, 5)
self.refit()
for namespace, directories in namespace_dirs.items(): for directory in directories: add_lookup(namespace, directory)
self.event_publisher = salt.utils.event.AsyncEventPublisher( self.opts, self.handle_event, io_loop=self.io_loop, )
from __future__ import absolute_import
return ItemFactory.create( category="html", parent_location=self.library.location, user_id=self.user.id, publish_item=False )
self.join(other2, main)
self.create_cohorted_discussions()
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
cm = metrics.confusion_matrix(y_test, y_predicted) print(cm)
response = self._load_dashboard() self.assertContains(response, "credit-request-rejected-msg")
return _vote_or_unvote(request, course_id, cc.Thread.find(thread_id), undo_vote=True)
lw = LedoitWolf(store_precision=False, assume_centered=True) lw.fit(X_centered) assert_almost_equal(lw.score(X_centered), score_, 4) assert(lw.precision_ is None)
self.assertTrue(access.has_ccx_coach_role(self.coach, ccx_locator))
cert_type=server type_ext=True
verbose = getattr(options, "verbose", None) cmd = "i18n_tool extract" if verbose: cmd += " -vv" sh(cmd)
pred = grid_search.fit(train_data, target_train).predict(test_data) assert_array_equal(pred, target_test)
make_pkgng_aware(name)
service.__salt__ = {} service.__opts__ = {}
from __future__ import absolute_import
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
from __future__ import unicode_literals
return self._get_modulestore_for_courselike(course_id).get_modulestore_type()
rng = np.random.RandomState(0) rand_data = RandomData(rng, scale=5) n_samples = rand_data.n_samples n_features = rand_data.n_features n_components = rand_data.n_components
class Meta(object): list_serializer_class = BulkTeamCountTopicListSerializer
continue
super(LibraryEditPageTest, self).setUp() self.lib_page = LibraryEditPage(self.browser, self.library_key) self.lib_page.visit() self.lib_page.wait_until_ready()
url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'),
microsite.set_by_domain('unknown') self.assertEqual(microsite.get_value('university'), 'default_university')
response = self.assert_enrollment_status( as_server=True, mode=new_mode, is_active=new_is_active, expected_status=expected_status, )
return obj.get("votes", {}).get("up_count", 0)
teams_per_topic = 10 topics = self.setup_topics(teams_per_topic=teams_per_topic) self.assert_serializer_output(topics, num_teams_per_topic=teams_per_topic, num_queries=1)
old_value = tab[key] new_value = 'New Value' tab[key] = new_value self.assertEquals(tab[key], new_value) tab[key] = old_value self.assertEquals(tab[key], old_value)
response = self._change_password(email=self.NEW_EMAIL) self.assertEqual(response.status_code, 400)
return self.source_from(self, **kwargs)
#
i18n = self.runtime.service(self, "i18n") return course_metadata_utils.course_start_datetime_text( self.start, self.advertised_start, format_string, i18n.ugettext, i18n.strftime )
clf = self.factory(alpha=0.1, n_iter=1000, class_weight={0: 0.5}) clf.fit(X, Y)
from __future__ import absolute_import
elif trigger_types[trigger_type] == TASK_TRIGGER_LOGON: trigger.Id = 'OnLogon_ID1'
assert_greater(np.mean(pred == iris.target), .9)
__virtualname__ = 'user'
rsync.__salt__ = {}
__virtualname__ = 'sys'
return 'v{}.0'.format(ver)
if block_type in self.disabled_xblock_types: return self.default_class return super(DescriptorSystem, self).load_block_type(block_type)
self.dashboard_page.visit()
block = self.store.get_item(block_location) block.group_access = access_dict self.store.update_item(block, 1)
resource = url.split('salt://', 1)[-1]
from salt.cloud.clouds import linode
self.user = User.objects.get(pk=self.user.pk)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
extra = {} for key, value in six.iteritems(data): if key in expected_extra_kws: continue extra[key] = copy.deepcopy(value)
if hasattr(self, 'usesTime') and self.usesTime(): record.asctime = self.formatTime(record, self.datefmt)
STATUS_STARTED = 'started' STATUS_SUCCESS = 'success' STATUS_ERROR = 'error'
return HAS_SQLITE3
if axis == 0: X = X.transpose() mask = mask.transpose()
try: return User.objects.get(username=requested_username) except User.DoesNotExist: raise Http404( "Requested user '{requested_username}' does not exist.".format(requested_username=requested_username) )
CourseEnrollment.unenroll(self.user, course_key)
if 2 in pdp_lim: Z_level = np.linspace(*pdp_lim[2], num=8)
if position == "denominator": latex += render_frac(numerator, denominator) else: num_latex = r"\cdot ".join(k.latex for k in numerator) latex += num_latex
resp = self._login(self.email, self.pw) data = parse_json(resp) self.assertFalse(data['success'])
request.session['attempting_upgrade'] = (message == self.UPGRADE_MSG)
if old_value is not None: __salt__['file.sed'](makeconf, '^{0}=.*'.format(var), '')
if not key_data: return {}
self.wait_for_ajax() return self.q(css='#u-field-select-account_privacy').visible
xi_, yi, swi, idx = dataset._next_py() xi = sp.csr_matrix((xi_), shape=(1, X.shape[1]))
try: return getattr(self, descriptor.cache_name) except AttributeError: pass
self.opts['beacons'][name]['enabled'] = enabled_value
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course.id))
cet = CourseEmailTemplate.objects.get(name='foo') self.assertIsNotNone(cet)
course = CourseFactory.create(default_store=default_store) not_enrolled_user = UserFactory.create() self.request.user = AdminFactory.create()
idx = np.arange(X.shape[0]) np.random.seed(13) np.random.shuffle(idx) X = X[idx] y = y[idx]
page.wait_for_element_visibility('.new-component-advanced', 'Advanced component menu is visible')
course_enrollment.mode = u'verified' course_enrollment.save() self.assertEqual(course_enrollment.mode, u'verified')
CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] ).install()
import salt.ext.six as six HAS_SVN = False try: import pysvn HAS_SVN = True CLIENT = pysvn.Client() except ImportError: pass
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
self.assertEqual(302, response.status_code) self.assertEqual('/register', response.get('Location'))
kwargs.update(arg)
def test_split(): skip_if_no_data() n_train = 100 n_valid = 200 n_test = 300
kwargs['choice_type'] = 'multiple' return ResponseXMLFactory.choicegroup_input_xml(**kwargs)
image_length = 96 if which_norb == 'small' else 108
return 'bookmarked' if self.q(css='.bookmark-button.bookmarked').present else ''
selector = self.get_element_selector(CSS_CLASS_NAMES['video_time']) current_seek_position = self.q(css=selector).text[0] return current_seek_position.split('/')[0].strip()
from __future__ import absolute_import import json import logging as logger
trainer = yaml_parse.load(topo_view_yaml % {'filename': filename}) trainer.main_loop()
pred = km.fit_predict(X) assert_array_equal(pred, km.labels_)
available_version = latest_version
rdp.__salt__ = {}
def set( self, answer_id=None, correctness=None, npoints=None, msg='', hint='', hintmode=None, queuestate=None,
service.__grains__ = {} service.__salt__ = {}
from salt.modules import postfix
raise NotImplementedError
return store.db_connection.structures
from __future__ import absolute_import import os import time
delete_user(name, runas) msg = 'Error' return _format_response(res2, msg)
if not name == '/': name = name.rstrip('/')
clf = MockClassifier() grid_search = GridSearchCV(clf, {'foo_param': [1]}) grid_search.fit(X, y) assert_true(hasattr(grid_search, "grid_scores_"))
for svd in svds: assert_array_less(0.0, svd.explained_variance_ratio_)
import salt.ext.six as six from salt.ext.six.moves import StringIO
data = JUNK_FOOD_DOCS + NOTJUNK_FOOD_DOCS
with patch('student.models.cc.User.save'): uname = 'student' email = 'student@edx.org' password = 'test'
import salt.utils.reactor import salt.utils.event import ioflo.base.deeding
self._check_non_staff_light(self.test_course) self._check_non_staff_dark(self.test_course) self._check_staff(self.course)
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
from salt.modules import ret import salt.loader
for topic_id in range(self.NUM_TOPICS): team = CourseTeamFactory.create( name=u"Team for topic {}".format(topic_id), course_id=self.course.id, topic_id=topic_id, )
outline_page = self.course_outline_page.visit() outline_page.q(css='.outline-item.outline-subsection.is-collapsed .ui-toggle-expansion').click() verify_ordering(self, outline_page, expected_ordering)
from __future__ import unicode_literals
has_partial_fit = hasattr(self, 'partial_fit_')
if not os.path.isfile(config): try: with salt.utils.fopen(config, 'w+') as _fh:
if createhome: __salt__['file.mkdir'](home, user=uid, group=gid)
charged_amt = Decimal(params['ccAuthReply_amount'])
import logging
self.assertIn(REG_STR, resp.content)
unvisited_children.reverse() stack.extend(unvisited_children)
additional_handlers = []
return None
pkg, ver = line.split(None)[1].rsplit('-', 1)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
raise NotImplementedError
for p in user_partitions: has_selected = any(g["selected"] for g in p["groups"]) has_selected_groups = has_selected_groups or has_selected
iterator = super(HDF5DatasetDeprecated, self).iterator(*args, **kwargs) iterator.__class__ = HDF5DatasetIterator return iterator
this_yaml = test_yaml_which_set % {'which_set': 'train'} trainer = yaml_parse.load(this_yaml) trainer.main_loop()
if status is not None: if status in self.NOTIFICATION_MESSAGES: found_msg = False for message in self.NOTIFICATION_MESSAGES[status]: if message in response.content: found_msg = True break
output = self._run_command(self.TEST_ORG) self._assert_output( output, (self.user, self.courses[0].id, True), expect_pref_datetime=False )
ForestRegressor = FOREST_REGRESSORS[name]
if created: self._ddog_increment(evt_time, 'set_many.state_created') else: self._ddog_increment(evt_time, 'set_many.state_updated')
super(ViewsTestCase, self).setUp()
overrides.update( deploy_scripts_search_path=tuple(deploy_scripts_search_path) )
from ..gaussian_process.kernels import Kernel as GPKernel
vmcfg = {} kwargs = salt.utils.clean_kwargs(**kwargs) for k, v in kwargs.iteritems(): vmcfg[k] = v
pass
self.assertIn( finger_print, [i.strip() for i in _key] )
if "memorySize" in machine: del machine["memorySize"] return machine
for item in list(required_keys): if item in provider_key: required_keys.remove(item)
self.update_version = edit_info.get('update_version', None)
#pylint: disable=E0602
try: import win32api import win32file import win32security import win32con from pywintypes import error as pywinerror HAS_WINDOWS_MODULES = True except ImportError: HAS_WINDOWS_MODULES = False
self.assertOLXIsDraftOnly(block_list_to_revert) with self.assertRaises(InvalidVersionError): self.revert_to_published(block_list_to_revert)
ret = __salt__['event.fire']({}, 'module_refresh')
s = data[:, 11] == 1 data = np.c_[data[s, :11], data[s, 12:]] target = target[s]
response = self._load_dashboard() self.assertContains(response, "credit-request-approved-msg")
return self.child(title)
cc_user = cc.User.from_django_user(request.user) cc_user.default_sort_key = request.GET.get('sort_key') cc_user.save()
try: matches = CONTENT_RE.search(request.META["HTTP_CONTENT_RANGE"]) content_range = matches.groupdict()
return course_metadata_utils.display_name_with_default(self)
image = __salt__['glance.image_show'](image['id'])
rnd = np.random.RandomState(42) n_samples = 10 X = rnd.uniform(size=(n_samples, 4))
remove_all_instructors(action_state.course_key)
if not record.exc_info_on_loglevel_instance and not exc_info_on_loglevel_formatted: return formatted_record
for prov_name, prov_settings in six.iteritems(config.pop('providers')): config[prov_name] = prov_settings break
losses[losses <= 0] = 0 return np.average(losses, weights=sample_weight)
ret['Not Actioned/Not Running'] = list(names) ret['Not Found'] = list(names) return ret
'ENABLE_OAUTH2_PROVIDER': False,
if num_steps != 1: for i in xrange(num_steps): layer_to_state = self.sample(layer_to_state, theano_rng, layer_to_clamp, num_steps=1) return layer_to_state
course = self.store.get_course(course.id)
return False
self._block_relations = pruned_block_relations
import os import time import calendar import logging import math import binascii import salt.utils from salt._compat import string_types from salt.ext.six.moves import range as _range from datetime import datetime
__func_alias__ = { 'list_nictags': 'list' }
fields.update({ 'language': getattr(settings, 'DEFAULT_COURSE_LANGUAGE', 'en'), 'cert_html_view_enabled': True, })
self.q(css="#next_step_button").click() next_page_object.wait_for_page()
'ADVANCED_SECURITY': True,
'provider', 'provider.oauth2', 'edx_oauth2_provider',
self.client.post(url, post_args)
self._set_gender(gender_enum) self.assertEqual(self.profile.gender_display, display_gender)
for tab_type in CourseTabPluginManager.get_tab_types(): if not tab_type.is_dynamic and tab_type.is_default: tab_enabled = tab_type.is_enabled(course_module, user=request.user) update_tab(course_tabs, tab_type, tab_enabled)
self.white_label_course_mode.min_price = 0 self.white_label_course_mode.suggested_prices = ''
self.assertTrue(filecmp.cmp(path_test, path_out))
for student in students[5:7]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.unavailable, mode='honor', grade=default_grade )
import salt.modules.rvm import salt.states.rvm as rvm
for item in good_out: self.assertIn(item, ret_output)
certs_api.set_cert_generation_enabled(self.course.id, True) self._assert_enable_certs_button(False)
return self.get_selector('div.white-listed-students table tr:last-child td')
from __future__ import unicode_literals
self.store.convert_to_draft(self.problem.location, self.user.id)
return self.find_css('a.group-toggle.hide-groups').present
self.alpha_ = best_alpha self.cv_alphas_ = all_alphas self.cv_mse_path_ = mse_path
enable_mktg_site = microsite.get_value( 'ENABLE_MKTG_SITE', settings.FEATURES.get('ENABLE_MKTG_SITE', False) ) if enable_mktg_site: return name in settings.MKTG_URLS else: return name in settings.MKTG_URL_LINK_MAP
response = self.client.get(self.url) self.assertTrue(self.email_modal_link in response.content)
if 'detached' not in published._class_tags and published.start is not None: return datetime.now(UTC) > published.start
rabbitmq_cluster.__salt__ = {} rabbitmq_cluster.__opts__ = {}
r = FOREST_REGRESSORS[name](random_state=0) assert_false(hasattr(r, "classes_")) assert_false(hasattr(r, "n_classes_"))
asset_key = make_asset_id(course_id, asset) asset_md = AssetMetadata(asset_key) asset_md.from_xml(asset) all_assets.append(asset_md)
sig0 = der_sig_in.payload
ret['comment'] = 'stage {0} does not exist'.format(self._stage_name)
__, course_ids = mock_get_programs.call_args[0] self.assertEqual(list(course_ids), [self.course_1.id]) self._assert_responses(response, 1)
return
unknown = [k for k, w in known.items() if not w] known = dict((k, w) for k, w in known.items() if w)
from __future__ import generators from __future__ import absolute_import import logging import socket
logging.captureWarnings(True)
if requesting_user.username == target_username: return True elif not target_username: raise TypeError("target_username must be specified") else: staff = GlobalStaff() return staff.has_user(requesting_user)
mock_logger.exception.assert_called_once_with(expected_log_msg)
response = self.client.get(self.url, content_type="application/json") self.assertHttpOK(response)
reload(sklearn.lda) return sklearn.lda
algorithm = "full"
self.course_outline.visit() self.course_outline.open_subsection_settings_dialog(1) self.course_outline.select_access_tab() self.course_outline.add_prerequisite_to_subsection("80")
response = getattr(self.client, method)(self.path, content_type=JSON_CONTENT_TYPE) self.assertEqual(response.status_code, 403)
self.normalize = bool(self.normalize)
X = np.array([[1.], [0.], [0.], [5.]]) X_csr = sparse.csr_matrix(X) X_csc = sparse.csc_matrix(X)
angle = np.arctan2(w[0][1], w[0][0])
max_squared_sum = row_norms(X, squared=True).max()
available_version = salt.utils.alias_function(latest_version, 'available_version')
self.courseware_page.click_next_button_on_top() self.assert_navigation_state('Test Section 1', 'Test Subsection 1,1', 1, next_enabled=True, prev_enabled=True)
microsite.enable_microsites(log)
y = np.array([0.0, 1.1, 2.0, 3.0]) msg = type_of_target(y) assert_raise_message(ValueError, msg, check_classification_targets, y)
self.assertEqual(parallels._validate_snap_name(name, snap_id), snap_id)
from __future__ import absolute_import
return self.countdown > 0
destroy(vm_['name'])
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True], credit_type='edc' )
hidden_layer_sizes = self.hidden_layer_sizes if not hasattr(hidden_layer_sizes, "__iter__"): hidden_layer_sizes = [hidden_layer_sizes] hidden_layer_sizes = list(hidden_layer_sizes)
return re.split(r'\s+', out['stdout'])[1][:-1] == 'inode/blockdevice'
survey = self._create_test_survey() self.assertEquals(len(survey.get_answers()), 0)
folders_list_in_path = folders_list_in_path[:-4]
if not bool(Versioning) and bool(_describe.get('Versioning')): Versioning = {'Status': 'Suspended'}
self.assertNotIn(malicious_code, resp.content)
ret.setdefault('context', {}).update(extra)
if self.edx_video_id: video_profile_names = context.get("profiles", ["mobile_low"])
task_folder = task_service.GetFolder(location)
def utcoffset(self, _dt): return None
from salt.states import win_powercfg as powercfg
env_path = os.environ.get(env_var, path) if not env_path or not os.path.isfile(env_path): env_path = path if path != default_path: env_path = path
self._assert_enable_certs_button_is_disabled()
return False
import logging log = logging.getLogger(__name__)
import fnmatch import logging import os
required_boto3_version = '1.2.1'
log = logging.getLogger(__name__)
self.assertListEqual( self.get_item_from_modulestore(self.seq2_usage_key).children, [unit_1_key, unit_2_key] )
try: config = cls.objects.get(course_key=course_key) return config.verified_cohort_name except cls.DoesNotExist: return None
md4 = hashlib.new("md4") md4.update(string) return md4.hexdigest()
from __future__ import absolute_import
new_obj = object.__new__(cls) new_obj.__singleton_init__(opts, **kwargs) loop_instance_map[key] = new_obj
def __init__(self): self.data = {}
cmd = '{0}.{1}'.format(self.cmd_prefix, cmd)
if self.request_cache is not None: return self.request_cache.data.setdefault('parent-location-{}'.format(branch), ParentLocationCache()) else: return ParentLocationCache()
return
return self.user
courses = [ course_with_prereq, CourseFactory.create(start=self.NEXT_WEEK, mobile_available=True), CourseFactory.create(visible_to_staff_only=True, mobile_available=True), CourseFactory.create(start=self.LAST_WEEK, mobile_available=True, visible_to_staff_only=False), ]
return self.q(css=self._bounded_selector("a.link-to-group-settings")).first.click()
self.timeout_futures()
if case_sensitive: casify = lambda x: x else:
else:
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
field_data_cache = FieldDataCache.cache_for_descriptor_descendents( course_id, self.staff_user, descriptor ) return render.get_module( self.staff_user, self.request, location, field_data_cache, )
self.command.handle('fake/course/id', all=False) self.assertTrue(mock_log.exception.called)
X, y = check_X_y(X, y, multi_output=True, y_numeric=True) self.y_ndim_ = y.ndim if y.ndim == 1: y = y[:, np.newaxis]
from salt.ext import six
self.is_released = is_released self.publish_state = publish_state self.is_locked = is_locked
from salt.modules import kmod
target_org = org or microsite_org courses = CourseOverview.get_all_courses(org=target_org, filter_=filter_)
self.assertFalse(element_has_text( page=course_outline_page, css_selector='.add-item a.button-new', text='New Subsection' ))
from __future__ import absolute_import
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
provider = generics.get_object_or_404(CreditProvider, provider_id=provider_id)
with open(self.TEST_INDEX_FILENAME, "w+") as index_file: json.dump({}, index_file)
return cls.current().enabled
self.request.user = user self.assertEqual(self.permission.has_object_permission(self.request, None, self.obj), permitted)
all_links = self.q(css='a.enter-course').map(lambda el: el.get_attribute('href')).results
y[::5] += 1 * (0.5 - np.random.rand(8))
self.children.extend(args) return self
#html_split_index = False
cmap_light = ListedColormap(['#FFAAAA', '#AAFFAA', '#AAAAFF']) cmap_bold = ListedColormap(['#FF0000', '#00FF00', '#0000FF'])
estimator_error = np.mean( np.average(incorrect, weights=sample_weight, axis=0))
import salt.utils import salt.ext.six as six from salt.exceptions import CommandExecutionError
if course_id in course_summaries: log.warning( u"Modulestore %s have duplicate courses %s; skipping from result.", store, course_id ) else: course_summaries[course_id] = course_summary
history = HistoricalRecords()
from salt.modules import kapacitor
import salt.utils.event
with warnings.catch_warnings(record=True): transformer = Transformer() set_random_state(transformer) set_testing_parameters(transformer)
element = self.q(css=".is-empty").first if element: return element.text[0] else: return None
pass
after = expiration + timedelta(seconds=1) query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(after, query) self.assertIs(result, None)
for key in kwargs.keys(): if not key.startswith('_'): params.setdefault(key, kwargs[key])
org = models.CharField(max_length=64, db_index=True, blank=True) course_id = CourseKeyField(max_length=255, db_index=True, blank=True) role = models.CharField(max_length=64, db_index=True)
for vm_ in list_active_vms(): info[vm_] = _info(vm_)
_mock_counts.return_value = {} with self.assertRaises(SystemExit): call_task('pavelib.quality.run_safelint')
MESSAGE = _('Unable to run import command.')
self.dashboard_page.visit() self.assertTrue(self.dashboard_page.has_course( org=new_org, number=self.course_number, run=self.course_run ))
from salt.modules import locate
cp.readfp(StringIO.StringIO(stream_or_string))
return location.name
from salt.utils.context import ContextDict, NamespacedDictWrapper
return False
'ENABLE_VERIFIED_CERTIFICATES': False,
from __future__ import absolute_import
if set(formatted_addresses) == set(current_addresses): _LOG.debug('%s already contains the provided addresses.', setting) return True
assert_almost_equal(np.cov(clf.transform(scatter).T), np.eye(2))
self.wait_for_field(field_id) query = self.q(css='.u-field-{} .u-field-value'.format(field_id)) if not query.present: return None return query.text[0]
end = info[1].index(' ', column+1)
self.mock.reset_mock() request = self._create_ssl_request(self.MOCK_URL) request.user = UserFactory() dec_mock(request) self.assertTrue(self.mock.called)
from __future__ import unicode_literals
return '\n'.join([(' ' * spaces) + l for l in pprint.pformat(text).splitlines()])
'debug': False
mode = CourseMode.objects.get(course_id=course_key, mode_slug=mode_slug) mode.expiration_datetime = upgrade_deadline mode.save()
call_command("loaddata", "course_email_template.json")
selector = self.get_element_selector(CSS_CLASS_NAMES['poster']) self.q(css=selector).click()
problem_location = self.problem_location(problem_url_name) modx_url = self.modx_url(problem_location, 'problem_show') resp = self.client.post(modx_url) return resp
from __future__ import absolute_import
if not has_studio_write_access(request.user, usage_key.course_key): raise PermissionDenied()
return self._get_xblocks(".is-active ")
ROUTING_KEY = getattr(settings, 'CREDENTIALS_GENERATION_ROUTING_KEY', None)
cls.apply_policy(metadata, runtime.get_policy(usage_id))
import salt.loader import salt.payload import salt.utils import salt.utils.templates import salt.utils.url from salt.utils.locales import sdecode from salt.exceptions import CommandExecutionError
continue
self.initialize_course( course_factory_kwargs={ 'user_partitions': [user_partition] } )
self.answer_problem(correct=True) self.problem_page.click_check() self.wait_for_status('correct')
self.assertFalse( self.run_function('pkgutil.is_installed', ['spongebob']))
display_name = String(help="Display name for this module", scope=Scope.settings)
pub_data = self.saltclients['local_async'](*f_call.get('args', ()), **f_call.get('kwargs', {}))
self.assertDictEqual(json.loads(response.content), data)
return Response(status=400, data=form_errors)
return self.country_access_rules(request.user, ip_address, request.path)
TRANSFORMER_VERSION_KEY = '_version'
version = float('.'.join(numpy.version.version.split('.')[:2]))
import salt.config import salt.loader import salt.utils.boto
'/etc/ssl/certs/ca-certificates.crt', '/etc/pki/tls/certs/ca-bundle.crt', '/etc/pki/tls/certs/ca-bundle.trust.crt', '/etc/ssl/certs/ca-bundle.crt', '/var/lib/ca-certificates/ca-bundle.pem', '/etc/ssl/cert.pem',
if self._is_in_bulk_operation(course_key, False): self._clear_bulk_ops_record(course_key) self.db_connection.delete_course_index(course_key)
self.run_command('write_salt_version')
cv_score -= cv_score[0] cv_best_iter = x[np.argmin(cv_score)]
all_answers = survey.get_answers(limit_num_users=1) self.assertEquals(len(all_answers.keys()), 1)
self.n_nonzero_coefs_ = max(int(0.1 * n_features), 1)
_delete_entrance_exam(request, course_key) return _create_entrance_exam( request=request, course_key=course_key, entrance_exam_minimum_score_pct=entrance_exam_minimum_score_pct )
context.update(configuration.get(user_certificate.mode, {}))
layers = model.get_all_layers() states = [final_state['V_hat']] + final_state['H_hat']
'log_level_logfile': str,
switch_user(request, lti_user, lti_consumer)
return ModuleStoreEnum.Type.split
return u"{user}, {course}".format( user=self.username, course=self.course.course_key, )
response = client.patch(self.url, data=json.dumps(json_data), content_type=content_type) self.assertEqual(expected_status, response.status_code) return response
Push.alert( data=push_payload, channels={"$in": push_channels}, where={"deviceType": "android"}, )
render_args, _ = module.system.render_template.call_args context = render_args[1] self.assertIn("error", context['problem']['html'])
from salt.modules import guestfs
list_display = ('user', 'course_id')
greek += [x.capitalize() for x in greek]
fullname_with_subpath = content_path.replace(static_dir, '') if fullname_with_subpath.startswith('/'): fullname_with_subpath = fullname_with_subpath[1:] asset_key = StaticContent.compute_location(target_id, fullname_with_subpath)
for key in wrong: params = baseline.copy() params[key] = wrong[key] with self.assertRaises(CCProcessorDataException): payment_accepted(params)
X = X[:5, :] y = y[:5] clf.fit(X, y) assert_array_equal(np.diff(clf.scores_) > 0, True)
if (X.dtype == X_checked.dtype and X.format == X_checked.format): assert_true(X is X_checked)
import yaml import salt.ext.six as six from salt.ext.six.moves import range log = logging.getLogger(__name__)
self._global_clustering() return self
lines.append(line) continue
simultaneous_sort(dist, ind)
url = BASE_URL + "/auto_auth" query_str = urllib.urlencode(self._params) if query_str: url += "?" + query_str return url
value = dateutil.parser.parse(value)
))
from __future__ import absolute_import import re
return exe
courses = split_store.get_courses(BRANCH_NAME_DRAFT)
try: import salt.modules.shadow as shadow HAS_SHADOW = True except ImportError: HAS_SHADOW = False
block_structure.request_xblock_fields('category')
from __future__ import absolute_import import os import sys import copy import site import fnmatch import logging import datetime import traceback import re
from salt.modules import win_ntp
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import destructiveTest
return '<div>{0}</div>'.format(saxutils.escape(repr(context)))
self.assertEqual(course.edited_by, "testassist@edx.org") self.assertDictEqual(course.grade_cutoffs, {"Pass": 0.45})
FOOTER_CACHE_TIMEOUT = 30 * 60
from __future__ import absolute_import import logging
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
responseparam_element = etree.SubElement(response_element, 'responseparam') responseparam_element.set('partial_answers', partial_answers)
response_element = etree.Element('symbolicresponse')
if ret in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
super(TFD, self).__init__(X=data_x, y=data_y, y_labels=y_labels, view_converter=view_converter)
__virtualname__ = 'reg'
if not course.course_survey_name: return redirect(redirect_url)
try: AdaGrad(-1.0) allows_null = True except AssertionError: allows_null = False assert not allows_null
EmptyPromise(self.is_timestamp_visible, 'Timestamp Visible', timeout=30).fulfill()
pass
response_msg_div.set("class", "response_message")
F, _ = f_regression(X, y)
providers = OAuth2ProviderConfig.objects.all() self.assertEquals(len(providers), pcount + 2) self.assertEquals(providers[pcount].id, provider1.id) provider2 = providers[pcount + 1]
pca = PCA(n_components=8).fit(data_train)
def _warning_function(): warnings.warn("deprecation warning", DeprecationWarning)
admin.site.register(CourseEventBadgesConfiguration, ConfigurationModelAdmin)
about_dictionary = { item.location.name: item.data for item in modulestore.get_items(course.id, qualifiers={"category": "about"}) }
course2.certificates_display_behavior = 'early_no_info' cert_status = {'status': 'unavailable'} self.assertEqual(_cert_info(user, course2, cert_status, course_mode), {})
branch = (branch == 'trunk' and 'base' or branch)
return stdout
from __future__ import absolute_import
import re
decrypt = salt.loader.render( self.opts, {}).get(self._pillar_enc)
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'vultr'
self.update_masquerade(role='staff') self.verify_staff_debug_present(True)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
from __future__ import absolute_import import datetime import math import sys import logging import copy
current_log_likelihood = None self.converged_ = False
ind = self.subclusters_.index(subcluster) self.subclusters_[ind] = new_subcluster1 self.init_centroids_[ind] = new_subcluster1.centroid_ self.init_sq_norm_[ind] = new_subcluster1.sq_norm_ self.append_subcluster(new_subcluster2)
state = np.random.RandomState(0) X = state.rand(10, 10) kpca = KernelPCA(random_state=state).fit(X) transformed1 = kpca.transform(X)
assert_array_equal(lfw_pairs_train.target, [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]) assert_array_equal(lfw_pairs_train.target_names, expected_classes)
any_ = saltnado.Any(futures) self.assertIs(any_.done(), False)
'id': course_id, 'name': course_overview.display_name, 'number': course_overview.display_number_with_default, 'org': course_overview.display_org_with_default,
from __future__ import absolute_import import os import struct
if salt.utils.is_windows(): fp_.close() try: os.unlink(fn_) except OSError: pass
Ensure mysecgroup exists: boto_secgroup.present: - name: mysecgroup - description: My security group - profile: keyid: GKTADJGHEIQSXMKKRBJ08H key: askdjghsdfjkghWupUjasdflkdfklgjsdfjajkghs region: us-east-1
io_loop = tornado.ioloop.IOLoop()
self.estimators_ = []
from __future__ import absolute_import from salt.ext.six.moves import zip
self._upload_file('auto_reg_enrollment.csv')
daymonth_max = 28
if isinstance(value, (bool)): value = 'true' if value else 'false' if not value: value = ""
if relevant_verification is not None: if relevant_verification.status == "approved": status = VERIFY_STATUS_APPROVED elif relevant_verification.status == "submitted": status = VERIFY_STATUS_SUBMITTED
pass
set_crontab(
return module.seed
return redirect_to_custom_form(strategy.request, auth_entry, kwargs)
'root_dir': str,
train_algo = SGD( learning_rate = 0.1, cost = MeanSquaredReconstructionError(), batch_size = 10, monitoring_batches = 10, monitoring_dataset = trainset, termination_criterion = EpochCounter(max_epochs=MAX_EPOCHS_UNSUPERVISED), update_callbacks = None )
obj_spec = vmodl.query.PropertyCollector.ObjectSpec( obj=obj_view, skip=True, selectSet=[traversal_spec] )
return microsite.get_value(val_name, default=default, **kwargs)
self.assertEqual(len(mail.outbox), 1)
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, course_id=self.course_id, staff=True).visit()
init = getattr(estimator.__init__, 'deprecated_original', estimator.__init__)
response, _ = self._login_response('test@edx.org', 'test_password') self._assert_response(response, success=True)
if not os.path.isfile(config): raise CommandExecutionError('Bad config file "{0}"'.format(config))
child_descriptor = self.child_descriptor if child_descriptor is None: return None return self.system.get_module(child_descriptor)
return settings.FEATURES.get('ENABLE_COURSEWARE_INDEX', False)
import salt.utils from salt.utils.pycrypto import gen_hash import integration
status_code = status.HTTP_400_BAD_REQUEST
named_ids = [] for snap_id in snap_ids: if snapshot_id_to_name(name, snap_id, runas=runas) == snap_name: named_ids.append(snap_id)
print('=' * 80) print("NearestCentroid (aka Rocchio classifier)") results.append(benchmark(NearestCentroid()))
(child_to_delete_location, old_parent_location, ModuleStoreEnum.RevisionOption.draft_preferred), (child_to_delete_location, old_parent_location, ModuleStoreEnum.RevisionOption.published_only),
name = name.split('.')[0]
col_mean, col_var, n_total_samples = \ _incremental_mean_and_var(X, last_mean=self.mean_, last_variance=self.var_, last_sample_count=self.n_samples_seen_)
assert V is orig_V assert drop_mask is orig_drop_mask
form = self._admin_form("verified", upgrade_deadline=self.UPGRADE_DEADLINE)
__virtualname__ = 'service'
self.save_course() self.url_nonexist = self.get_details_url("1=20")
ret['result'] = True ret['comment'] = 'vm {0} already running'.format(name)
y_i_all_argmax = np.flatnonzero(y_data_repeated_max == y.data)
__virtualname__ = 'logstash'
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
with warnings.catch_warnings(): warnings.simplefilter("ignore") check_cv_coverage(skf_3, X2, y, labels=None, expected_n_iter=3)
if param_name not in PARAMETERS: param_name = 'custom_' + param_name
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
self.course_nav.go_to_vertical('Test Vertical-2') self.video.wait_for_video_player_render()
try: connection.commit() except DatabaseError: try: connection.rollback() except Error: connection.close() raise
self.validate_xblock_info_consistency(xblock_info, has_child_info=True, has_ancestor_info=True)
sys.modules['cherrypy'].config = mock_decorator_with_params
self.assertEqual(resp.status_code, 200)
X, y = datasets.make_classification(n_samples=1000, n_features=100, n_informative=20, random_state=1234)
response = self.client.post( reverse('change_enrollment'), { 'course_id': course.id.to_deprecated_string(), 'enrollment_action': 'enroll' } ) return response
mathml_start = '<math xmlns="http://www.w3.org/1998/Math/MathML"><mstyle displaystyle="true">' mathml_end = '</mstyle></math>'
add_user_to_cohort(second_cohort, self.student.username) self.assert_student_in_group(self.groups[1])
return bool(getattr(content, "locked", False))
ans = set()
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
def fit(self, X, y): super(CustomSVC, self).fit(X, y) self.data_type_ = type(X) return self
from __future__ import absolute_import import os import pwd import glob import shutil
from salt.modules import moosefs
return Response(status=status.HTTP_204_NO_CONTENT)
logger.debug( "Comment Service received PUT request {0} to path {1}" .format(json.dumps(post_dict), self.path) )
source_course_key = CourseKeyField(max_length=255, db_index=True)
mock_create_subtask_fcn_args = mock_create_subtask_fcn.call_args_list self.assertEqual(len(mock_create_subtask_fcn_args[0][0][0]), 3) self.assertEqual(len(mock_create_subtask_fcn_args[1][0][0]), 3) self.assertEqual(len(mock_create_subtask_fcn_args[2][0][0]), 5)
for parent_desc_list in parents_descendants_list: if parent_desc_list is not None: parent_desc_list.items.append(unicode(block_key))
try: CourseTeamIndexer.index(kwargs['instance']) except ElasticSearchConnectionError: pass
log.exception( "Indexing error encountered, courseware index may be out of date %s - %r", structure_key, err ) error_list.append(_('General indexing error occurred'))
from courseware.module_render import get_module_for_descriptor field_data_cache = FieldDataCache([descriptor], course.id, request.user) return get_module_for_descriptor( request.user, request, descriptor, field_data_cache, course.id, course=course )
stack_data.append({ 'color': percent, 'value': count_grade, 'tooltip': tooltip, 'module_url': child.location.to_deprecated_string(), })
response = self.client.get(url) email_section = '<div class="vert-left send-email" id="section-send-email">' self.assertIn(email_section, response.content)
EXAMPLE_SLUG = '15bb687e0c59ef2f0a49f6838f511bf4ca6c566dd45da6293cabbd9369390e1a'
self.assertEqual(processor_hash('test'), 'GqNJWF7X7L07nEhqMAZ+OVyks1Y=') self.assertEqual(processor_hash('edx '), '/KowheysqM2PFYuxVKg0P8Flfk4=')
cohort = CohortFactory(course_id=self.course.id, users=[]) response_dict = self.request_remove_user_from_cohort(None, cohort) self.verify_removed_user_from_cohort( None, response_dict, cohort, expected_error_msg='No username specified' )
clf = ElasticNet() brc3 = Birch(n_clusters=clf) assert_raises(ValueError, brc3.fit, X)
from __future__ import absolute_import from datetime import tzinfo, datetime, timedelta import uuid import logging import json
pass
'-oStrictHostKeyChecking=no', '-oUserKnownHostsFile=/dev/null', '-oControlPath=none'
tags_found = _git_tag_points_at(cwd, wt_ptr['HEAD'], user) if tags_found: wt_ptr['tags'] = tags_found
selectable_modes = CourseMode.modes_for_course_dict(self.course_key) self.assertItemsEqual(selectable_modes.keys(), expected_selectable_modes)
else: ret = _load_result(existing, ret)
with assert_raises(ValueError): course = self.process_xml(CourseFactory.build(policy={'days_early_for_beta': 'null'}))
class_priority = ['video', 'problem']
resp = self.client.get(self.url) return json.loads(resp.content)
self._reset() return self.partial_fit(X, y)
commit = False current_rules = __salt__['firewall.get_rule'](name) if not current_rules: commit = True ret['changes'] = {'new rule': name}
if settings.FEATURES['CLASS_DASHBOARD'] and access['staff']: sections.append(_section_metrics(course, access))
order = np.lexsort((y, x)) x, y = x[order], y[order]
import logging
try: group_id = get_group_id_for_comments_service(request, course_key, commentable_id) except ValueError: return HttpResponseBadRequest("Invalid cohort id") if group_id is not None: thread.group_id = group_id
for _ in range(2): self.assertIsInstance(CourseOverview.get_from_id(course.id), CourseOverview)
self.assertNotContains(response, "How it Works") self.assertNotContains(response, "Find courses") self.assertNotContains(response, "Schools & Partners")
diag_mask = (connectivity.row != connectivity.col) connectivity.row = connectivity.row[diag_mask] connectivity.col = connectivity.col[diag_mask] connectivity.data = connectivity.data[diag_mask] del diag_mask
redirect_to = get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to)
if solution_element is None: continue
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath ensure_in_syspath('../../')
if getattr(xblock, 'is_draft', False): published_xblock_location = as_published(xblock.location) try: xblock.runtime.lookup_item(published_xblock_location) except ItemNotFoundError: return False return True
return files, symlinks
from __future__ import absolute_import import pprint
problem = CapaFactory.create() self.assertFalse(problem.answer_available())
try: html = lxml.html.fragment_fromstring(fragment.content) except lxml.etree.ParserError: assert_student_view_invalid_html(block, fragment.content) else: assert_student_view_valid_html(block, html)
self.make_course(pdf_textbooks=[HTML_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('html_book', book_index=0, chapter='xyzzy')
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, done=True) self.assertFalse(module.should_show_check_button())
import logging
with cls.store.bulk_operations(course.id, emit_signals=False):
self._create_courses_and_enrollments( (self.TEST_ORG, True), ("org_alias", True) )
#html_file_suffix = None
base = np.memmap(filename, dtype=dtype, shape=total_buffer_len, mode=mode, offset=offset, order=order) return as_strided(base, shape=shape, strides=strides)
def test_compare_phases_ignored(self): self.assertTrue(compare_chemical_expression( "H2O(s) + CO2", "H2O+CO2", ignore_state=True))
return self.q(css=VIDEO_MODAL_SELECTOR)
HAS_RANGE = False try: import seco.range HAS_RANGE = True except ImportError: pass
response = self.send_get(client) self.assertEqual("m", response.data["gender"])
pass
attributes = self.q(css=self._bounded_selector('.cohort-management-assignment-type-settings')).attrs('class') if 'is-disabled' in attributes[0].split(): return True return False
prev_soft, prev_hard = resource.getrlimit(resource.RLIMIT_NOFILE)
return self.q(css=self.type_filter_element).present
from salt.modules import postgres
response = self.ajax_request('No', {})
return 1
from __future__ import unicode_literals
if v[-1] < (1. - self.prop_decrease) * self.best_value: self.countdown = self.N else: self.countdown = self.countdown - 1
assert X.ndim == 4 return T.nnet.softmax(X.reshape((X.shape[0], self.dim)) * self.P)
minion.setup() _minions.append(minion)
return super(DraftVersioningModuleStore, self)._find_course_assets( self._map_revision_to_branch(course_key) )
#'preamble': '',
self.previous_version = self.update_version = self.definition_locator = None self.xmodule_runtime = None
self.centroids_ = np.empty((n_classes, n_features), dtype=np.float64) nk = np.zeros(n_classes)
func_name = "H{}".format(level) self.body.append(getattr(E, func_name)(text))
return xblock
return False
from __future__ import absolute_import import os import json
modulestore().get_item(usage_key)
import salt.ext.six as six
course_key = CourseKey.from_string(course_id) certs_api.generate_example_certificates(course_key) return redirect(_instructor_dash_url(course_key, section='certificates'))
return _fail( ret, 'No revision matching \'{0}\' exists in the remote ' 'repository'.format(rev) )
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] y_state = layer_to_state[y]
self.pub_channel.on_recv(self._process_cmd_socket)
children = self.q(css=self.CHILD_SELECTOR) return [self.CHILD_CLASS(self.browser, child.get_attribute("id")) for child in children]
est = TreeEstimator(min_samples_split=10, max_leaf_nodes=max_leaf_nodes, random_state=0) est.fit(X, y) node_samples = est.tree_.n_node_samples[est.tree_.children_left != -1]
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
nested_args = mapping.nest(theano_args) fixed_var_descr = self.cost.get_fixed_var_descr(model, nested_args) self.on_load_batch = fixed_var_descr.on_load_batch
self.page.visit() config = self.page.experiment_group_configurations[0] config.toggle() config.click_outline_anchor()
import hmac import hashlib import binascii import datetime import base64 import msgpack import json import re import decimal
selector = self.get_element_selector(VIDEO_MENUS[menu_name]) return self.q(css=selector).present
from __future__ import unicode_literals
__virtualname__ = 'network'
test_command = 'sysbench --num-threads=64 --test=memory ' test_command += '--memory-oper={0} --memory-scope={1} ' test_command += '--memory-block-size=1K --memory-total-size=32G run ' result = None ret_val = {}
return self.data_specs
del good
from salt.ext import six
field_object = self._cache.get(self._cache_key_for_kvs_key(kvs_key)) if field_object is None: return None else: return field_object.modified
return cPickle.loads(s)
X = lfw_people.data n_features = X.shape[1]
updates, layer_to_chains = model.get_sampling_updates( layer_to_chains, self.theano_rng, num_steps=self.num_gibbs_steps, return_layer_to_updated=True)
return check_mongo_calls_range(max_finds=calls)
self.assertEqual(counter.value, 0) self.assertEqual(pool._job_queue.qsize(), 1)
def has_delete_permission(self, request, obj=None): return False
self.assertIn(SplitTestDescriptor.user_partition_id.name, editable_metadata_fields)
if self.whitelist == '': return [] return self.IPFilterList([addr.strip() for addr in self.whitelist.split(',')])
self.assert_requirement_status(grade, due_date, 'satisfied')
from __future__ import absolute_import
import matplotlib.pyplot as plt
from __future__ import absolute_import import os import stat import logging
self.assertFalse(auth.user_has_role(self.user, CourseCreatorRole()))
from salt.modules import logrotate
probas_pred = probas_pred[:, 1]
return self.is_proctored_enabled
pass
random_state = check_random_state(42)
user = User.objects.get(email=self.notenrolled_student.email) self.assertTrue(CourseEnrollment.is_enrolled(user, self.course.id))
try:
return reverse_url(handler_name, 'usage_key_string', usage_key, kwargs)
logging.exception(u"Failed to generate thumbnail for {0}. Exception: {1}".format(content.location, str(e)))
return None, None
self.assertEqual(certificate_grades.count('0.0'), 5) self.assertEqual(certificate_grades.count(default_grade), 5)
if d_estate in self.road_stack.value.nameRemotes: self.road_stack.value.message(msg, self.road_stack.value.nameRemotes[d_estate].uid) return
if expected_n_iter is not None: assert_equal(len(cv), expected_n_iter) else: expected_n_iter = len(cv)
row = reader.next()
return self.q(css="#register-username").attrs('value')[0]
self._mock_paver_needs = patch.object(pavelib.quality.run_quality, 'needs').start() self._mock_paver_needs.return_value = 0
import integration import salt.utils
log.info(u"deleting course from split-mongo: %s", course_key) self.delete_course_index(course_key)
pca = PCA(n_components=15, whiten=False) data = pca.fit_transform(digits.data)
([], CourseMode.DEFAULT_MODE_SLUG),
L1_units = theano.tensor.abs_(model.encode(X)).sum(axis=1).mean()
'syndic_event_forward_timeout': float,
from salt.states import ddns
for field in ('client_type', 'client_secret', 'client_id', 'authorization_grant_type'): form.fields.pop(field)
member.name = member.name.replace('{0}/'.format(package), '') out_path = salt.syspaths.CONFIG_DIR
return sorted(__salt__)
import integration
import copy import fnmatch import logging import os import signal import sys
precor = [None] * len(self.activations) for idx, val in evens_copy + odds_copy: assert precor[idx] is None precor[idx] = val assert None not in precor
store = self._get_modulestore_for_courselike(course_key) if hasattr(store, method): return store else: raise NotImplementedError(u"Cannot call {} on store {}".format(method, store))
return [self.visible_layer] + self.hidden_layers
from __future__ import absolute_import
super(TestLTIModuleListing, self).setUp()
return [Attribute('width'), Attribute('height'), Attribute('target_shape') ]
invalid_json = "{u'name': 'Test Name', []}"
tag = course_tag_api.get_course_tag(self.user, self.course_id, self.test_key) self.assertIsNone(tag)
requirement = CreditRequirement.objects.create( course=course, namespace='grade', name='grade', )
self.bracketname = '[%-17s]' % self.name self.bracketlevel = '[%-8s]' % self.levelname self.bracketprocess = '[%5s]' % self.process
self.request.user = UserFactory.create(is_staff=True) self.assertTrue(self.permission.has_permission(self.request, None))
if not show_explanation or not self.done: continue
result = self.client.login(username=self.USERNAME, password=self.OLD_PASSWORD) self.assertFalse(result)
step = None if 0 in cost_matrix.shape else _step1
return (self.expiration_date - timedelta(days=1)).strftime("%B %d, %Y") if self.expiration_date else None
last_touch = request.session.get(LAST_TOUCH_KEYNAME)
_pre_compute = self._pre_compute_svd _errors = self._errors_svd _values = self._values_svd
raise KeyError('Cannot assign to module key {0} in the ' 'FunctionWrapper'.format(cmd))
'config_models',
self.update_masquerade(role='student') self.verify_staff_debug_present(False)
expected_url = _third_party_login_url( backend_name, "login", redirect_url=_finish_auth_url(params), ) self.assertContains(response, expected_url)
demand_hints = self.lcp.tree.xpath("//problem/demandhint/hint") demand_hint_possible = len(demand_hints) > 0
zpool.__salt__ = {}
self.update_structure(parent_usage_key.course_key, new_structure)
url(r'^api-admin/', include('openedx.core.djangoapps.api_admin.urls', namespace='api_admin')),
_, _, exclude_dictionary = LmsSearchFilterGenerator.generate_field_filters(user=self.user) self.assertNotIn('org', exclude_dictionary)
for dirpath, _dirnames, filenames in os.walk(directory): for filename in filenames: yield (filename, dirpath)
tags = list(tags or []) tags.append('LMS')
return self.q(css='ul.listing-courses .course-item .info-date-block').first.text[0]
return self.q(css='#content .container section.course-content .sequential-status-message')
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course_key)) self.assertTrue(self.user.roles.filter(name="Student", course_id=self.course_key))
assert_array_almost_equal(grad_interp[:n_features], grad[:n_features]) assert_almost_equal(grad_interp[-1] + alpha * w[-1], grad[-1])
xblock_group_access = get_field_on_block(xblock, 'group_access', default_value={})
if categories is None: category_match = True else: for category in update.Categories: if category.Name in categories: category_match = True
original_modified = tag.modified tag.value = "barfoo" tag.save() self.assertEquals(tag.value, "barfoo") self.assertNotEqual(original_modified, tag.modified)
from sklearn import datasets, svm, pipeline from sklearn.kernel_approximation import (RBFSampler, Nystroem) from sklearn.decomposition import PCA
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, mock_open, patch, NO_MOCK, NO_MOCK_REASON )
data = JUNK_FOOD_DOCS + NOTJUNK_FOOD_DOCS
self.assertEqual(response_dict, self.expected_response)
if name is None: return REQUEST_CACHE else: return REQUEST_CACHE.data.setdefault(name, {})
self.q(css="input[name=cancel]").click()
assert_equal(len(folds), len(labels)) for i in np.unique(folds): assert_greater_equal(tolerance, abs(sum(folds == i) - ideal_n_labels_per_fold))
import salt.utils
if not _is_master() and _get_none_or_value(host) is None: err = [ 'solr.pre_indexing_check can only be called by "master" minions'] return _get_return_dict(False, err)
'LICENSING': False,
if publish == "discard_changes": store.revert_to_published(xblock.location, user.id) return JsonResponse({'id': unicode(xblock.location)})
self.randomize_datasets(randomize_now)
import logging
TASK_LOGON_NONE = 0 TASK_LOGON_PASSWORD = 1 TASK_LOGON_S4U = 2 TASK_LOGON_INTERACTIVE_TOKEN = 3 TASK_LOGON_GROUP = 4 TASK_LOGON_SERVICE_ACCOUNT = 5 TASK_LOGON_INTERACTIVE_TOKEN_OR_PASSWORD = 6
assert_raises(ValueError, lambda: GradientBoostingClassifier().feature_importances_)
short_name = '.'.join(parts[:(i + 1)]) break
def __call__(self, est, X, y): return 1
courses_list[course_key] = course
import integration import salt.utils
assert_raises(VerificationException, attempt.submit)
course_tag_api.set_course_tag(user, course_key, partition_key, group.id)
comment, passed, retries = _search(win_updater, retries) ret['comment'] += comment if not passed: ret['result'] = False return ret
if ENV_TOKENS.get('AUDIT_CERT_CUTOFF_DATE', None): AUDIT_CERT_CUTOFF_DATE = dateutil.parser.parse(ENV_TOKENS.get('AUDIT_CERT_CUTOFF_DATE'))
instance = kwargs['instance'] instance.orig_state = instance.state
grains, pillars = self._get_cached_minion_data(*minion_ids)
return self.get_text('.title')
module = self.get_student_module(username, descriptor) state = json.loads(module.state) return state['attempts']
from __future__ import absolute_import import os import shutil import tempfile
reload(sklearn.qda) return sklearn.qda
warnings.simplefilter('ignore', ConvergenceWarning)
if packages_to_upgrade==[]:
assert isinstance(course_key, CourseKey) store = self._get_modulestore_for_courselike(course_key) return store.delete_course(course_key, user_id)
y_pred = self.init_.predict(X) begin_at_stage = 0
course = get_course(course_id)
descriptor.runtime.export_fs = MemoryFS() node = etree.Element('unknown') descriptor.add_xml_to_node(node)
cls.create_and_enroll_student( courses=[cls.test_course_2], username='student_enrolled_public_profile' ) profile = cls.users['student_enrolled_public_profile'].profile profile.year_of_birth = 1970 profile.save()
test_data = state_run['cmd_|-test_changes_expected_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
self.assertEquals(self.conn.get_definitions.call_count, 0)
return self.q(css='.user-list .user-item').map( lambda el: UserWrapper(self.browser, el.get_attribute('data-email')) ).results
ret = {'name': name, 'result': False, 'comment': '', 'changes': {},
from __future__ import absolute_import import logging
remap_dict[fullname_with_subpath] = asset_key
add_instance = False
error_msg = ('Invalid parameter %s for estimator %s. ' 'Check the list of available parameters ' 'with `estimator.get_params().keys()`.')
bintflist = [intf for iflist in bintf.values() for intf in iflist] result.update(__salt__['sysfs.read'](bintflist, path))
self.assertEqual(response.status_code, 200) res_json = json.loads(response.content)
self.assertTrue(config['blah'])
self.class_log_prior_ = (np.log(self.class_count_) - np.log(self.class_count_.sum()))
try: import logstash HAS_LOGSTASH = True except ImportError: HAS_LOGSTASH = False
'sources': [u'example.mp4', u'example.webm', u'http://www.meowmix.com'],
'AUTOMATIC_VERIFY_STUDENT_IDENTITY_FOR_TESTING': False,
self.do_shuffle(self.xml, problem) self.do_answer_pool(self.xml, problem)
p, h = max_pool_c01b(z, (pool_rows, pool_cols), top_down = t) func = function([z, t], [p, h], mode = mode_without_gpu)
shutil.rmtree(root_dir)
X_scaled_back = scaler.inverse_transform(X_scaled) assert_array_almost_equal(X_scaled_back, X)
with self.store.branch_setting(ModuleStoreEnum.Branch.published_only, course_key): assertProblemNameEquals(problem_new_name) assertNumProblems(problem_original_name, 0)
sensors.__salt__ = {}
from __future__ import absolute_import import functools import copy import logging import os import pipes import time import traceback
if not assume_unique: ar1, rev_idx = np.unique(ar1, return_inverse=True) ar2 = np.unique(ar2)
self._paths = [prepare_path_for_serialization(path) for path in value] if value else value
import salt.ext.six as six
for state in READY_STATES: instructor_tasks = instructor_tasks.exclude(task_state=state) return instructor_tasks.order_by('-id')
children = xblock_info['child_info']['children'] self.assertTrue(len(children) > index) return children[index]
return super(NullBackend, self).set_config_by_domain(domain)
self.q(css='div.problem button.reset').click() self.wait_for_ajax()
VS_batch = VS.make_theano_batch() new_SVS_batch = VS.format_as(VS_batch, VS_sparse) new_VS_batch = VS.undo_format_as(new_SVS_batch, VS_sparse) assert new_VS_batch is VS_batch assert new_SVS_batch is not VS_batch
self.assertTrue(self._search_for_content(self.SEARCH_STRING))
self._auto_auth() self.client.logout() self._auto_auth() self.assertEqual(User.objects.all().count(), 2)
for low in self.lowstate: if not self._verify_client(low): return
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
if not salt.utils.cloud.wait_for_port(ip_address, port=445, timeout=ssh_connect_timeout): raise SaltCloudSystemExit( 'Failed to connect to remote windows host' )
assert_raises(ValueError, cval.StratifiedShuffleSplit, y, train_size=2) assert_raises(ValueError, cval.StratifiedShuffleSplit, y, test_size=2)
assert X.ndim == 2 return T.nnet.softmax(X * self.P)
self.go_to_tab_and_assert_problem(2, self.problem2_name)
_options = dict( _options_browser( cfg, ret_config, defaults, virtualname, attrs, ) )
def __setstate__(self, state): self._is_child = True args = state['args'] kwargs = state['kwargs'] self.__init__(*args, **kwargs)
import salt.ext.six as six from salt.ext.six.moves import range try:
return etree.Element(self.tag)
TreeClassifier = CLF_TREES[name] _y = np.vstack((y, np.array(y) * 2)).T
from __future__ import absolute_import
return _get_backing_memmap(a) is not None
course = CourseFactory.create( org=course_location.org, number=course_location.course, run=course_location.run, default_store=store ) self._add_role_access_to_user(user, course.id) return course
return xmodule_instance_args.get('xqueue_callback_url_prefix', '') if xmodule_instance_args is not None else ''
mean_tpr /= n_classes
model = SelectFromModel(clf, prefit=True) assert_raises(ValueError, model.fit, data, y)
errorlog = make_error_tracker() course_descriptor = None try: course_descriptor = self.load_course(course_dir, course_ids, errorlog.tracker, target_course_id)
CourseModeFactory.create( course_id=self.course_key, mode_display_name="Honor Not Expired", mode_slug="honor_not_expired", expiration_datetime=future )
permutation = rng.permutation(self.n) ind_test = permutation[:self.n_test] ind_train = permutation[self.n_test:self.n_test + self.n_train] yield ind_train, ind_test
user = cc.User.from_django_user(request.user) commentable = cc.Commentable.find(commentable_id) user.unfollow(commentable) return JsonResponse({})
import salt.config as config from salt.exceptions import SaltCloudSystemExit import salt.utils.cloud
clf = OneVsRestClassifier(base_clf).fit(X, Y) y_pred = clf.predict([[0, 0, 4]])[0] assert_array_equal(y_pred, [0, 0, 1])
return getattr(self._modulestore, name)
super(TestGenerateCourseBlocks, self).setUp() self.course_1 = CourseFactory.create() self.course_2 = CourseFactory.create() self.command = generate_course_blocks.Command()
with self.settings(OPENID_SSO_SERVER_URL=abs_provider_url):
from __future__ import absolute_import
pred = np.array([l.argmax() for l in Y_proba]) assert_false((pred - Y_pred).any())
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
for i, file_path in enumerate(file_paths): if i % 1000 == 0: logger.info("Loading face #%05d / %05d", i + 1, n_faces)
super(VectorSequenceSpace, self)._validate_impl(is_numeric, batch)
(13, True, u"False"),
salt.log.setup.setup_multiprocessing_logging()
instructor_dashboard_page = InstructorDashboardPage(self.browser, self.course_id) instructor_dashboard_page.visit() return instructor_dashboard_page
self.assertNotIn(self.module_key + '2', self.loader)
self.n_classes = 1
import salt.ext.six as six from salt.ext.six.moves import input try: import msgpack except ImportError: pass
codeparam_element = etree.SubElement(response_element, "codeparam")
if not any(r for r in trusted_roots if fnmatch.fnmatch(trust_root, r)): log.error('non-trusted root') return False
pass
visible_layer = BinaryVector(nvis=100) hidden_layer = BinaryVectorMaxPool(detector_layer_dim=500, pool_size=1, layer_name='h', irange=0.05, init_bias=-2.0) model = DBM(visible_layer=visible_layer, hidden_layers=[hidden_layer], batch_size=100, niter=1)
from django.core.cache import cache from django.test.utils import override_settings from lang_pref import LANGUAGE_KEY
from pylearn2.gui.patch_viewer import PatchViewer
assert_less(np.sqrt(np.mean((X_iso - X_iso2) ** 2)), 2 * noise_scale)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
self.assertEqual(res_json['message'], u'Please select certificate statuses from the list only.')
b = np.zeros((self.dim,))
clf = MockClassifier() grid_search = GridSearchCV(clf, {'foo_param': [1]}) grid_search.fit(X, y) assert_true(hasattr(grid_search, "grid_scores_"))
init_space, source = self.data_specs X_space, init_y_space = init_space.components new_y_space = VectorSpace(dim=num_classes) new_space = CompositeSpace((X_space, new_y_space)) self.data_specs = (new_space, source)
cmd = '{0} {1}'.format(cmd, properties)
dec_mock(request) self.assertTrue(self.mock.called) self.assertEqual(0, len(ExternalAuthMap.objects.all()))
self.cert = GeneratedCertificate.eligible_certificates.create( user=self.student, course_id=self.CERT_COURSE_KEY, grade=self.CERT_GRADE, status=self.CERT_STATUS, mode=self.CERT_MODE, download_url=self.CERT_DOWNLOAD_URL, )
group_id = get_cohort_id(request.user, course_key)
mid = int(np.floor(kernel_shape/ 2.)) centered_X = X - convout[:,:,mid:-mid,mid:-mid]
m_space, m_source = model.get_monitoring_data_specs() spaces.append(m_space) sources.append(m_source)
message = self.q(css=self._bounded_selector(".input-group-other .copy-error")) if not message: return None return message.results[0].text
from config_models.models import cache from embargo.models import IPFilter from embargo.forms import RestrictedCourseForm, IPFilterForm
AutoAuthPage(self.browser, course_id=self.course_id).visit() self._link_dummy_account() LogoutPage(self.browser).visit()
num_enrollments = len(enrollments) self.assertDictContainsSubset({'attempted': num_enrollments, 'succeeded': num_enrollments, 'failed': 0}, result)
return []
if 'last_update' in from_index: query['last_update'] = from_index['last_update']
from __future__ import absolute_import
handler404 = 'static_template_view.views.render_404' handler500 = 'static_template_view.views.render_500'
return advertised_start is None and start == DEFAULT_START_DATE
get_user_credentials(self.user)
if self.schedule.loop_interval < self.loop_interval: self.loop_interval = self.schedule.loop_interval
uninstall_ruby(ruby, runas=runas) return False
self._send_handler_response("POST")
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, call )
diabetes_y_train = diabetes.target[:-20] diabetes_y_test = diabetes.target[-20:]
ret['changes'] = exc.info.get('changes', {}) ret['comment'] = exc.strerror_without_changes
new_ssl_option.append("{0} '{1}'".format(normal_key, opt[key].replace("'", '')))
return self.relative_path_to_absolute_uri(self.ACCOUNT_SETTINGS_REFERER)
user = serializers.PrimaryKeyRelatedField(queryset=User.objects.all()) class Meta(object): model = UserPreference depth = 1
if e in punish: second = punish.index(e) else: second = -1
import salt.utils from salt.modules.cron import ( _needs_change, _cron_matched )
if not self.fields['download_video'].is_set_on(self): self.download_video = self.download_video self.force_save_fields(['download_video'])
y += 0.01 * np.random.normal((n_samples,))
return dict(result=True, data=tmplsrc)
if prev_state[0] is not None: try: next(nvlist(args, ['require']))[2].insert(0, dict([prev_state]))
self.verify_server_task("lms", options)
if kwargs.get('current_zone_only') == 'True': cmd_prefix += '-G '
if course_id: return cls.objects.filter(user=user, badge_class__course_id=course_id) return cls.objects.filter(user=user)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
pids = {} procfs = os.listdir('/proc/') for pfile in procfs: try: pids[int(pfile)] = [] except ValueError: pass
if re_pattern: minion_id = re.sub(re_pattern, re_replace, minion_id)
err_msg = colorize( 'red', "No coverage info found. Run `paver test` before running " "`paver coverage`.\n" ) sys.stderr.write(err_msg) return
field_data_cache = FieldDataCache([], course.id, user)
return ''.join(self.fed)
'ALLOW_UNICODE_COURSE_ID': False,
self.validate_xblock_info_consistency(xblock_info)
self.assert_no_events_emitted() try: response = segmentio.segmentio_event(request) self.assertEquals(response.status_code, 200)
child_classes = set(child.get_icon_class() for child in self.get_children()) new_class = 'other' for higher_class in CLASS_PRIORITY: if higher_class in child_classes: new_class = higher_class return new_class
PIPELINE_DISABLE_WRAPPER = True
if opts['root_dir']: tmpdir = os.path.join(opts['root_dir'], 'tmp') else: tmpdir = opts['root_dir']
from openedx.core.djangoapps.credit.api.eligibility import ( is_credit_course, )
safe_exec("a = 1/2", g) self.assertEqual(g['a'], 0.5)
if relevant_course_mode.sku: processors = ecommerce_api_client(request.user).payment.processors.get() else: processors = [settings.CC_PROCESSOR_NAME]
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath
root_dir = path(mkdtemp_clean()) export_course_to_xml( self.store, content_store, course_id, root_dir, 'test_no_xml_attributes' )
from __future__ import absolute_import
new_module_store_setting['default']['OPTIONS']['stores'] = convert_old_stores_into_list( module_store_setting ) module_store_setting = new_module_store_setting
return { "id": self.id, "name": self.name, "version": Group.VERSION }
import salt.loader import salt.utils import salt.utils.cloud import salt.utils.validate.net import salt.config from salt import syspaths from salt.ext.six import string_types
cfg_branch, _, environment = branch_env.partition(':')
metric_str = metric if name in METRICS_WITH_POS_LABEL: metric_str = partial(metric_str, pos_label=pos_label_str)
from __future__ import unicode_literals
JINJA = jinja2.Environment( loader=jinja2.FileSystemLoader( os.path.join(salt.utils.templates.TEMPLATE_DIRNAME, 'virt') ) )
__virtualname__ = 'etcd'
answered_survey = SurveyAnswer.do_survey_answers_exist(survey, user) return not answered_survey and not has_staff_access
(2, 2.0, classification_cost)
if self.escQuote: ret = ret.replace(self.escQuote, self.endQuoteChar)
OverrideFieldData.provider_classes = None super(SharedModuleStoreTestCase, self).setUp()
num_fields_updated = max(0, len(state) - num_new_fields_set) self._ddog_histogram(evt_time, 'set_many.fields_updated', num_fields_updated)
try:
from salt.ext.six import string_types
return None
user_country_from_profile = _get_user_country_from_profile(user)
clf = svm.SVC() assert_raises(ValueError, clf.fit, X, Y, sample_weight=range(len(X) - 1))
import salt.utils json = salt.utils.import_json()
cached_pkg = cached_pkg.replace('/', '\\') cache_path, _ = os.path.split(cached_pkg)
self.clear_child_cache()
iso = manifold.Isomap(n_components, 2) X_iso = iso.fit_transform(X)
return v[::-1], W.T[:, ::-1]
if 'rows' not in _response: log.error('Unable to get available minions: {0}'.format(_response)) return []
__remove_queue_logging_handler()
X -= X.min() - .1 y_names = np.array(["one", "two", "three"])[y]
self.verbose_mod = 1 self.start_time = time() self.begin_at_stage = begin_at_stage
mylocalrepo: git.config_set: - name: user.email - value: foo@bar.net - repo: /path/to/repo
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
if not self.warm_start: self._clear_state()
cache_key = cls.CACHE_KEY.format(course_key=course_key) cache.delete(cache_key) log.info("Invalidated country access list for course %s", course_key)
from salt.modules import win_network
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
return modulestore().has_item(location, revision=ModuleStoreEnum.RevisionOption.published_only)
unlock_content = cls.create_image(prefix, (32, 32), 'blue', '{}_unlock.png')
bookmark_service = BookmarksService(self.other_user) with self.assertNumQueries(1): self.assertFalse(bookmark_service.is_bookmarked(usage_key=self.sequential_1.location))
from salt.ext.six import string_types
return 'ERROR: Failure deploying thin, undefined state: {0}'.format(stdout), stderr, retcode
self.assertEqual(self.settings_detail.course_pacing, 'Instructor-Paced')
xblock.runtime.wrappers.append(partial( wrap_xblock, 'StudioRuntime', usage_id_serializer=unicode, request_token=request_token(request), ))
resp = self.client.post(reverse('shoppingcart.views.remove_item', args=[]), {'id': reg_item.id})
try: etype = etype.__name__ except AttributeError: pass
request.user = user request.scopes = [SCOPE_VALUE_DICT[scope]] request.client = client request.state = None request.refresh_token = None request.extra_credentials = None request.grant_type = client.authorization_grant_type
clf = NearestCentroid() clf.fit(X_csr.tocoo(), y) assert_array_equal(clf.predict(T_csr.tolil()), true_result)
if not self.value and self.xml.text: self.value = self.xml.text.strip()
return [('127.0.0.1:11211 (1)', {})]
assert_almost_equal(np.std(y - np.dot(X, c)), 1.0, decimal=1)
instructor_task = _reserve_task(course_key, task_type, task_key, task_input, request.user)
_cleanup()
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
self.assertEqual({'k2': 'v2'}, grains['a_custom'])
self.block_type = block_data.get('block_type', None)
for item in ret: self.assertSaltTrueReturn(item)
import copy import logging import os import re import string from distutils.version import LooseVersion as _LooseVersion
return InstructorTask.create(course_id, task_type, task_key, task_input, requester)
instructor_role = CourseInstructorRole(course_id)
CLIENT_TIMEOUT = 60
from salt.states import archive as archive
cls.html_unit = ItemFactory.create( parent_location=cls.vertical.location, category="html", display_name="Html Content", publish_item=False, )
OAUTH_OIDC_ISSUER = 'https://www.example.com/oauth2'
add_course_url = urlparse.urljoin(course.ccx_connector, CCXCON_COURSEXS_URL) resp = oauth_ccxcon.post( url=add_course_url, json=payload, headers=headers, timeout=CCXCON_REQUEST_TIMEOUT )
self.assertFalse(self.store.has_changes(new_blocks["about"])) self.assertTrue(published_version_exists(new_blocks["chapter"]))
if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern
if not cleaned_data.get('all_blocks', None): raise ValidationError({'username': ['This field is required unless all_blocks is requested.']})
from __future__ import absolute_import
IS_WIN = win_timezone.__virtual__()
if 'set_{0}'.format(collection) not in vmconfig['changed']: vmconfig['changed']['set_{0}'.format(collection)] = {}
instance.course_user_group.users.remove(instance.user) instance.course_user_group.save()
with self.assertRaises(CourseUserGroup.DoesNotExist): get_cohort_by_name(self.course.id, "AutoGroup")
return HttpResponse()
ecommerce_service = EcommerceService() if ecommerce_service.is_enabled(user): url = ecommerce_service.checkout_page_url(sku)
self.assertIsNone(cohorts.get_cohort(user, course.id, assign=False))
eobjs = mes.create_user(self.course_key) ees = EmailEnrollmentState(self.course_key, eobjs.email) self.assertEqual(mes, ees)
self._block_relations.pop(usage_key, None) self._block_data_map.pop(usage_key, None)
face = face / 255
top_level_logger.setLevel(logging.NOTSET)
need_dash_t = ('CentOS-5',)
sample_dict = {'x': (-10, 10)}
startup_time = stats_line[:14] startup_time = time.strptime(startup_time, '%Y%m%d%H%M%S') startup_time = datetime.datetime(*startup_time[:6])
X_csr_scaled = scale(X_csr, with_mean=False, with_std=False, copy=True) assert_array_almost_equal(X_csr.toarray(), X_csr_scaled.toarray())
encoder=CourseSettingsEncoder
log.error("Unable to add Credit requirement status for user with id %d", attempt.user.id)
profile_str = 'virtualbox-config' providers = self.run_cloud('--list-providers') log.debug("providers: %s", providers)
if key.scope not in self.VALID_SCOPES: raise InvalidScopeError(key, self.VALID_SCOPES) if key.scope == Scope.content: self._load_definition()
from __future__ import absolute_import import errno import os import locale import logging from distutils.version import LooseVersion
input_space = VectorSpace(1) class DummyDBM(object): def __init__(self): self.rng = rng layer.set_dbm(DummyDBM()) layer.set_input_space(input_space)
CertificateGenerationConfiguration(enabled=True).save()
continue
ensemble = BaggingClassifier(base_estimator=DecisionTreeClassifier(), random_state=rng).fit(X_train, y_train)
P = noise + X_dense P = theano.tensor.switch(P > 0, 1, 0) P = tensor.cast(P, theano.config.floatX)
shutil.copyfile(path_in, path_test)
if np.any(classes != sorted_class): indices = np.searchsorted(sorted_class, classes) Y = Y[:, indices]
self.assertTrue(user_has_role(self.user, CourseCreatorRole()))
from __future__ import absolute_import
path = os.path.join(integration.FILES, 'conf', 'cloud.providers.d', provider + '.conf') config = cloud_providers_config(path)
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
else: local = salt.client.LocalClient() ret = local.cmd('{0}'.format(target), cmd, args, kwargs)
self.assertEqual(resp.status_code, 200)
return obj["id"] in self.context["cc_requester"]["upvoted_ids"]
log = logging.getLogger(__name__)
'master_failback': bool,
return dispatch_to_register()
clf = QuadraticDiscriminantAnalysis(reg_param=0.1) with ignore_warnings(): clf.fit(X5, y5) y_pred5 = clf.predict(X5) assert_array_equal(y_pred5, y5)
return self.make_call(reverse('teams_detail', args=[team_id]), expected_status, 'delete', **kwargs)
return len(self._find_within(".discussion-response"))
from salt.modules import mac_package as macpackage
return super(MongoBulkOpsMixin, self)._is_in_bulk_operation( course_id.for_branch(None), ignore_case )
SignalHandler.pre_publish.disconnect(receiver=on_pre_publish) self.addCleanup(SignalHandler.pre_publish.connect, receiver=on_pre_publish)
expected_info = [ 'created', 'sent_to', 'email', 'number_sent', 'requester', ] return {info: None for info in expected_info}
__context__ = {'ports.install_error': 'salt'}
rendered_html = etree.XML(problem.get_html())
ROLE = 'sales_admin' def __init__(self, *args, **kwargs): super(CourseSalesAdminRole, self).__init__(self.ROLE, *args, **kwargs)
url = AUTH_BASE_URL + "/auto_auth" query_str = urllib.urlencode(self._params) if query_str: url += "?" + query_str return url
try: from salt.ext import ssl_match_hostname HAS_SSL_MATCH_HOSTNAME = True except ImportError: HAS_SSL_MATCH_HOSTNAME = False
try: SETUP_DIRNAME = os.path.dirname(__file__) except NameError: SETUP_DIRNAME = os.path.dirname(sys.argv[0])
username = serializers.CharField() email = serializers.CharField()
else: with closing(_gen_open(f)) as f: actual_dtype, data, ind, indptr, labels, query = \ _load_svmlight_file(f, dtype, multilabel, zero_based, query_id)
RegistrationFactory(user=self.user)
return None
m = 15 monitoring_dataset = get_topological_dataset(rng, rows, cols, channels, m)
member.name = '{0}.sls.orig'.format(package) out_path = conn['pillar_path']
return HttpResponse(get_edxnotes_id_token(request.user), content_type='text/plain')
self.set_config(False)
ps_diff_cache = self._create_service(username, {})
kwargs['course_id'] = self.course.id.to_deprecated_string() url = reverse(url_name, kwargs=kwargs) return url
if center and scale: data_x -= 127.5 data_x /= 127.5 elif center: data_x -= 127.5 elif scale: data_x /= 255.
def test_unicode_values(self): country = Country.objects.create(country='NZ') self.assertEquals(unicode(country), "New Zealand (NZ)")
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
pass
from __future__ import absolute_import import os import shutil
self.user = User.objects.create_user(uname, email, self.user_password)
del_info = self.run_function('user.info', [DEL_USER]) if del_info: self.run_function('user.delete', [DEL_USER])
if self.n_components == 0: return np.diag(1. / self.noise_variance_) if self.n_components == n_features: return linalg.inv(self.get_covariance())
DAG_CHILDREN_MAP = [[1, 2], [3], [3, 4], [5, 6], [], [], []]
#latex_use_parts = False
self.assertEqual(len(mail.outbox), 1) self.assertEqual(mail.outbox[0].to[0], self.instructor.email)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
pred = mb_k_means.predict(mb_k_means.cluster_centers_) assert_array_equal(pred, np.arange(n_clusters))
message = self.q(css='div.wrapper-msg') if message.present: return message.text[0] return None
return self._get_course_info(request, course)
monitoring_train = DenseDesignMatrix(X=X) monitoring_test = DenseDesignMatrix(X=Y)
import salt.config import salt.client.raet
return combined
self.assertOLXIsPublishedOnly(block_list_to_delete) self.delete_item(block_list_to_delete, revision=revision) self._check_for_item_deletion(block_list_to_delete, result) self.assertOLXIsDeleted(autopublished_children) self.assertOLXIsDeleted(block_list_draft_children)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
self.assertFalse(CourseMode.is_professional_mode(None))
from contextlib import contextmanager import logging
if (best_candidate is None) or (new_pot < best_pot): best_candidate = candidate_ids[trial] best_pot = new_pot best_dist_sq = new_dist_sq
qry = 'REPAIR TABLE {0}.{1}'.format(s_name, s_table) _execute(cur, qry) results = cur.fetchall() log.debug(results) return results
return Response(create_comment(request, request.data))
self.set_user_module_score(user, None, None)
client = self.login_client(api_client, user) new_value = "new value" self.send_put(client, new_value, expected_status=403 if user == "staff_user" else 404)
self.assertEquals(set(child_usage_ids), set(child.scope_ids.usage_id for child in block.get_children()))
self.assertEqual( self.run_function('xattr.read', [TEST_FILE, 'spongebob']), 'squarepants')
self.assertFalse(VerifiedTrackCohortedCourse.is_verified_track_cohort_enabled(course_key))
self.assertEqual(True, ipaddress.ip_address('100::').is_reserved) self.assertEqual(True, ipaddress.ip_network('4000::1/128').is_reserved)
import salt.ext.six as six
for course_key, store_name in self.mappings.iteritems(): if store_name == key: self.mappings[course_key] = store self.modulestores.append(store)
if not settings.FEATURES.get('MILESTONES_APP', False): return [] from milestones import api as milestones_api return milestones_api.get_course_milestones(course_id)
context['accomplishment_copy_course_description'] = _('a course of study offered by ' '{partner_short_name}.').format( partner_short_name=context['organization_short_name'], platform_name=platform_name)
XA_checked, XB_checked = check_pairwise_arrays(XA.astype(np.float), XB) assert_equal(XA_checked.dtype, np.float) assert_equal(XB_checked.dtype, np.float)
unit = self.go_to_unit_page() verify_ordering(self, unit, [{"": ["Unit HTML", "Unit Problem"]}])
cache.clear()
ret = self.run_state('ssh_known_hosts.absent', **kwargs) self.assertSaltStateChangesEqual(ret, {})
self.assertEqual( utils.get_discussion_category_map(self.course, requesting_user or self.user), expected )
course_key = CourseKey.from_string(course_id) CourseMode.objects.get_or_create(course_id=course_key, **PARAMETERS)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
the_dir = tempfile.mkdtemp(suffix=suffix, prefix=prefix, dir=dir) atexit.register(cleanup_tempdir, the_dir) return the_dir
_opts = __opts__.get('sqlite3', {})
'django.middleware.clickjacking.XFrameOptionsMiddleware',
plt.subplot(2, 3, pairidx + 1)
if not clean: dmi.append(record) continue
return self.q( css='#paging-header-select option' ).filter( lambda e: e.is_selected() ).results[0].text.strip()
return 'latex' not in template['template_id'] or course.use_latex_compiler
default_response = None
import os
if backup is not False: shutil.copy2(path, '{0}{1}'.format(path, backup))
self.best_cost = self.coeff * np.inf self.best_model = None
primary_course = CourseFactory.create(org=primary, emit_signals=True) alternate_course = CourseFactory.create(org=alternate, emit_signals=True)
mlp_second_part = MLP( layers=[ second_indep_layer ], input_space=VectorSpace(features_in_second_mlp), input_source=('features1') )
if 'parent_id' not in data: data["parent_id"] = None
currently_fixing = []
err_msg = None
plt.matshow(ranking, cmap=plt.cm.Blues) plt.colorbar() plt.title("Ranking of pixels with RFE") plt.show()
from salt.modules import debian_service
import integration
import salt.cloud import salt.utils.cloud from salt.exceptions import SaltCloudException, SaltCloudSystemExit import salt.ext.six as six import salt.syspaths as syspaths log = logging.getLogger(__name__)
centos7-2-iad-rackspace: provider: rackspace-iad size: general1-2 boot_volume: <volume id>
with open(CONFIG_ROOT / CONFIG_PREFIX + "auth.json") as auth_file: AUTH_TOKENS = json.load(auth_file)
import salt.config opts = salt.config.client_config(c_path)
self.assertFalse(result['success']) self.assertIn(u"corrupted message regarding your charge", result['error_html'])
with patch('xmodule.capa_module.CapaModule.get_problem_html') as mock_html: mock_html.return_value = "<div>Test HTML</div>"
this_sample = this_layer.sample(state_below=state_below, state_above=state_above, layer_above=layer_above, theano_rng=theano_rng)
else: for str_group_id, usage_key in self.group_id_to_child.items():
salt '*' vsphere.set_syslog_config my.esxi.host root bad-password \ loghost ssl://localhost:5432,tcp://10.1.0.1:1514
with self.assertNumQueries(len(kv_dict)): self.kvs.set_many(kv_dict) for key in kv_dict: self.assertEquals(self.kvs.get(key), kv_dict[key])
self.class_names = [array[0].encode('utf-8') for array in train['class_names'][0]]
if not alpha == 0: assert_array_less(np.diff(costs), 0)
_strip_value(value, lookup)
X = generator.multivariate_normal(mean, cov * np.identity(n_features), (n_samples,))
from __future__ import absolute_import
self.q(css='nav.%s * .previous-page-link' % position)[0].click() self.wait_until_ready()
msg += _('Email address must end in {domain}').format(domain="@{0}".format(email_domain)) return msg
X = np.array([[0, 1], [1.01, 1.], [2, 0]])
CountryAccessRule.objects.all().delete()
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandNotFoundError
assert_raises(ValueError, agglo.fit, X[:0])
if is_active and (enrollment_mode in CourseMode.VERIFIED_MODES + [CourseMode.NO_ID_PROFESSIONAL_MODE]): return redirect(reverse('dashboard'))
category = item['location']['category'] apply_cached_metadata = category not in DETACHED_XBLOCK_TYPES and \ not (category == 'course' and depth == 0) return apply_cached_metadata
if not os.path.isdir(sourcepath): _LOG.error('Path is not present: %s', sourcepath) return False
from __future__ import absolute_import, print_function
self.user = User.objects.create_user(self.uname, self.email, self.password)
import salt.loader import salt.utils import salt.utils.jid from salt.ext.six.moves import range
if source: cmd = '{0} -s {1}'.format(cmd, source)
return dom.reset(0) == 0
import json
with self.assertRaisesRegexp(CommandError, "^No courses found for orgs:"): self._run_command("other_org")
choose_track_url = reverse('course_modes_choose', args=[unicode(self.course.id)]) self.client.post(choose_track_url, self.POST_PARAMS_FOR_COURSE_MODE[CourseMode.DEFAULT_MODE_SLUG])
textvalue = "x^2+2*x+y" if correct else 'x^2' self.problem_page.fill_answer(textvalue)
import integration from salt.config import cloud_providers_config from salt.ext.six.moves import range
from __future__ import print_function from __future__ import absolute_import import os import logging
from salt.modules import beacons from salt.exceptions import CommandExecutionError import integration
import salt.config import salt.loader
X = np.cast['float32'](train['X'])
clf.classes_ = unique_labels(classes) return True
index = int(grader.get('id', len(descriptor.raw_grader))) grader = CourseGradingModel.parse_grader(grader)
mock_progress.return_value = True module = CapaFactory.create() module.weight = 0 progress = module.get_progress() self.assertIsNone(progress) self.assertFalse(mock_progress.called)
expected_msg = u'Error: ȧƈƈḗƞŧḗḓ ŧḗẋŧ ƒǿř ŧḗşŧīƞɠ' self.assertEqual(expected_msg, result['success'])
self.assert_not_enrolled()
est.fit(X, y) t = np.asarray(T) assert_raises(ValueError, est.predict, t[:, 1:])
METRICS_WITH_POS_LABEL = [ "roc_curve",
if not value.strip(): raise ValidationError("This field may not be blank.")
self.teams_page.click_all_topics() self.verify_my_team_count(0)
if course_tabs != course_module.tabs: course_module.tabs = course_tabs
seed = rng.randint(1, np.iinfo(np.int32).max)
desc = ET.SubElement(content, 'description') desc.text = config.get_cloud_config_value( 'desc', vm_, __opts__, default=vm_['name'], search_global=False )
course_organization = get_course_organizations(course_key) if course_organization: org_id = course_organization[0]['id']
for _ in range(num_students): random_id = uuid4().hex[:8] self.create_student(username='student{0}'.format(random_id))
from salt.utils import fopen, is_darwin, vt
self.course_fixture.add_course_details({'start_date': datetime.now() + timedelta(days=1)})
return
value = models.TextField(default='null')
course_key = request.data.get('course_key') try: course_key = CourseKey.from_string(course_key) except InvalidKeyError: raise InvalidCourseKey(course_key)
REQUIRE_BASE_URL = "./"
return True
url(r'^api/enrollment/v1/', include('enrollment.urls')),
this_labels = np.unique(this_labels, return_index=True)[1][this_labels] np.testing.assert_array_equal(this_labels, labels)
'backup_mode': str,
if math_expr.strip() == "": return ""
domain = domain.split(':')[0] microsites = cls.objects.filter(site__domain__iexact=domain)
content = get_content(service_instance, object_type, property_list=property_list, container_ref=container_ref)
revoke_access(course_ccx, instructor, 'instructor')
response = self.client.get(reverse('signup'), follow=True) self.assertEqual(response.status_code, 404)
stdin_read, stdin_write = win32pipe.CreatePipe(security_attributes, 0) stdin_read = make_inheritable(stdin_read)
self.restricted_course.delete() self._assert_history_deleted()
from salttesting.helpers import ensure_in_syspath
from __future__ import unicode_literals
with self.assertNumQueries(1): bookmarks = api.get_bookmarks(user=self.user, course_key=course.id, serialized=False) self.assertEqual(len(bookmarks), count)
if self.cleaned_data.get("verification_deadline"): return self.cleaned_data.get("verification_deadline").replace(tzinfo=UTC)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch ) ensure_in_syspath('../../')
import copy import logging import salt.ext.six as six from salt.serializers.yamlex import merge_recursive as _yamlex_merge_recursive
from salt.states import bower from salt.exceptions import CommandExecutionError
ret = __salt__['k8s.folder_absent'](name, node, apiserver)
latex = fname + inner return LatexRendered(latex, tall=children[1].tall)
CreditCourse.objects.create(course_key=course.id, enabled=True)
COURSE_SLUG = "100" COURSE_NAME = "test_course"
hash_exists_locally = True
num_dimensions += 1
'Content-Type': 'application/x-www-form-urlencoded',
from salt.states import ssh_known_hosts
self.assertFalse(hasattr(course_overview, 'image_set'))
import integration import salt.utils
if tmpdir is not None: shutil.rmtree(tmpdir)
if len(col_names) == 1: data_name = col_names[0] dataset['data'] = matlab_dict[data_name] else: for name in col_names: dataset[name] = matlab_dict[name]
with self.assertRaisesRegexp(Exception, "Error in xml"): self.check_group('checkboxtextgroup', 'invalid', 'checkbox')
with self.assertNumQueries(18): self.client.get(self.teams_url)
newnode['hostname'] = vm_['name'] newnode['ostemplate'] = vm_['image']
#html_static_path = add_base(['_static'])
requirements = get_credit_requirements(self.course.id, namespace="reverification") self.assertEqual(len(requirements), 1)
self.auth = salt.crypt.AsyncAuth(self.opts, io_loop=self._io_loop)
from salt.config import minion_config
if bulk_ops_record.is_root: self._start_outermost_bulk_operation(bulk_ops_record, course_key)
return dict(enumerables)[enum_value]
return self.get_text('.name')
return {'name': name, 'changes': {}, 'result': True, 'comment': ''}
from __future__ import absolute_import
return bits
rbm.learning_rate = 0.06 rbm.n_iter = 20 rbm.n_components = 100 logistic.C = 6000.0
import salt.utils
my_estimator = MyEstimator() str(my_estimator)
url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.get(url)
for result in resultset: location = as_published(Location._from_deprecated_son(result['_id'], course_id.run))
res = grainsmod.filter_by(dict1, grain='xxx', merge=mdict1, default='Z') self.assertEqual(res, mdict1)
config.groups[2].name = "Second Group"
self.enter_search_term(text) self.search()
linter = JavaScriptLinter() results = FileResults('') linter.check_javascript_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
return self.q(css='.page-header .page-title')[0].text
return self.q(css=".error").present
Q = random_state.normal(size=(A.shape[1], size))
W = rng.randn(n_components, n_features) h = rng.randn(n_samples, n_components) noise = rng.gamma(1, size=n_features) * rng.randn(n_samples, n_features)
from __future__ import absolute_import import time
self.assertEqual(response.status_code, 200)
y_true, y_pred, _ = make_prediction(binary=True)
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit()
factory_class = SparseSGDClassifier
current_subs = data.get('current_subs') if current_subs is not None: for sub in current_subs: remove_subs_from_store(sub, item)
iris = datasets.load_iris()
n_targets = 2 X, y = X_diabetes, y_diabetes y_n = np.tile(y, (n_targets, 1)).T
del __context__['pagerduty_util.resource_cache'][resource_name] return _query(method='POST', action=resource_name, data=data, profile=profile, subdomain=subdomain, api_key=api_key)
self.record_visit_outline()
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
from __future__ import absolute_import import tornado.stack_context import tornado.gen from tornado.testing import AsyncTestCase, gen_test import threading import time
parse_coverage( Env.BOK_CHOY_REPORT_DIR, Env.BOK_CHOY_COVERAGERC )
self.set_config(True) CourseOverviewImageSet.create_for_course(overview) self.assertTrue(hasattr(overview, 'image_set'))
django_settings.SOCIAL_AUTH_LOGIN_REDIRECT_URL = _SOCIAL_AUTH_LOGIN_REDIRECT_URL
import salt.utils import salt.utils.decorators as decorators from salt.utils.odict import OrderedDict
(27, True, False, u"False"),
self.assertRaises(RuntimeError, utils.kwargs_warn_until, {}, [])
#html_copy_source = True
if num_violations > violations_limit > -1: raise BuildFailure("Failed. Too many pylint violations. " "The limit is {violations_limit}.".format(violations_limit=violations_limit))
import copy import logging import re
'API': 'www.youtube.com/iframe_api',
self._create_course_unit(subtitles=True) self.video.hide_captions() self.assertFalse(self.video.is_captions_visible())
maxDiff = None
if not snapshot: ret['error'] = 'one or more snapshots must be specified'
self._test_missing_current_task(generate_certificates)
block_locator = course_key.make_usage_key( block_type=block_key.type, block_id=block_key.id, )
n_components, labels = connected_components(connectivity)
if not lazy: descendent_definitions = self.get_definitions( course_key, [ block.definition for block in new_module_data.itervalues() ] ) definitions = {definition['_id']: definition for definition in descendent_definitions}
self.assertEqual(element.tag, tag)
if self.axis == 0: X = check_array(X, accept_sparse='csc', dtype=np.float64, force_all_finite=False)
response = func(*args, **kwargs) remove_headers_from_response(response, *headers) return response
win_path.__salt__ = {}
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(boston.data[:50], boston.target[:50], random_state=rng)
CourseEnrollmentFactory( is_active=False, mode=CourseMode.NO_ID_PROFESSIONAL_MODE, course_id=self.course.id, user=self.user )
from __future__ import absolute_import import os
return response
self.wait_for_ajax() return self.q(css='.u-field-{}'.format(field_id)).visible
return self._enabled
pass
from salt.states import lvs_server
self.assertEqual(self.team_management_page.header_page_name, title) self.assertEqual(self.team_management_page.header_page_description, description) self.assertEqual(self.team_management_page.header_page_breadcrumbs, breadcrumbs)
ret['result'] = True return ret
if xblock.category == 'chapter': return xblock
survey.save_user_answers(self.student, self.student_answers_update, self.course_id)
Donation.add_to_order(self.cart, self.COST) self.cart.start_purchase() self.cart.purchase()
with self.assertNumQueries(1): all_deadlines = VerificationDeadline.deadlines_for_courses(course_keys) self.assertEqual(all_deadlines, {})
ExampleCertificateSet.objects.all().delete()
import logging
__context__[contextkey] = 'docker-exec'
assert max(pd.max(), hd.max()) < .17
self._load_data(which_set, context_len, data_mode)
self.assertIn('test.recho', funcs)
arguments[kwargs_param.name] = kwargs
FOOTER_BROWSER_CACHE_MAX_AGE = 5 * 60
return self.n_iter
if estimator_error == 0: break
y[::5] += 3 * (0.5 - rng.rand(X.shape[0]/5))
self.client.login(username="inactive", password=self.PASSWORD)
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.assertEqual(expected_block.fields, actual_block.fields) for field in expected_block.fields.values(): self.assertFieldEqual(field, expected_block, actual_block)
data = dict(self.data.items()) self.cleaned_data['confirmed'] = data['confirmed'] = 'true' self.data = data is_valid = False
self.assertEqual(course_date, expected_course_date)
__virtualname__ = 'saltcloud'
self.assertIn(settings.EDXMKTG_LOGGED_IN_COOKIE_NAME, self.client.cookies) self.assertIn(settings.EDXMKTG_USER_INFO_COOKIE_NAME, self.client.cookies)
if user is None: return False if user.is_authenticated(): return CourseEnrollment.is_enrolled(user, course.id) else: return False
from __future__ import absolute_import
course_id=course_overview.id
current_network_settings = _parse_rh_config(_RH_NETWORK_FILE)
info = salt.utils.alias_function(version, 'info')
Xt = X for name, transform in self.steps[:-1]: Xt = transform.transform(Xt) return self.steps[-1][-1].predict_log_proba(Xt)
module.system.DEBUG = True
self.wait_for_ajax() return self.q(css='#u-field-message-account_privacy').visible
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
fields = getattr(self, 'unmixed_class', self.__class__).fields
return self.database.connection.max_wire_version
remove = salt.utils.alias_function(destroy, 'remove')
self.assertParentReferences( element, course_key, **kwargs )
profile_page.visit()
get_management_certificate = show_management_certificate
mock_call = mock_track_function.mock_calls[-1] event = mock_call[1][2]
self.assertEqual(self.factory(lhs), self.factory(rhs))
new_locator = course_key.make_usage_key(block_key.type, block_key.id) return self.get_item(new_locator, **kwargs)
pass
results[guid]['Categories'] = [] for category in update.Categories: results[guid]['Categories'].append(category.Name)
if not self._whiten and can_fit: assert proc_var[0] > orig_var.max()
new = list_pkgs(saltenv=saltenv)
return self.q(css='.course-number-override')
assert len(key) <= 250 self.cache[key] = value
else: for prefix, state_pkg_name, version_spec in pkgs_details:
tmplstr = tmplstr.decode(SLS_ENCODING)
httpd = make_server('localhost', mod_opts['port'], application)
location = course_key.make_usage_key('course', 'test') link = utils.get_lms_link_for_item(location) self.assertEquals(link, "//localhost:8000/courses/mitX/101/test/jump_to/i4x://mitX/101/course/test")
for config_key in ('spm_logfile',): log_setting = opts.get(config_key, '') if log_setting is None: continue
import salt.modules.win_status as status
__virtualname__ = 'sqlite'
added_to_index = self.reindex_course(store) self.assertEqual(added_to_index, 3) response = self.search() self.assertEqual(response["total"], 3)
result = VerificationStatus.objects.filter(checkpoint=self.first_checkpoint)[0] self.assertEqual(result.status, status) self.assertEqual(result.user, self.user)
from __future__ import unicode_literals
CourseEnrollment.unenroll(self.user, course_id or self.course.id)
if load.get('fun', '') != 'saltutil.find_job': return good
self.assertEqual(response.status_code, 302)
for name in res: res[name]['__sls__'] = fn_
response_dict = self.put_handler(self.course, expected_response_code=400) self.assertEqual("Cohort name must be specified.", response_dict.get("error"))
del channel
self._test_run_with_task( generate_certificates, 'certificates generated', 0, 0, expected_attempted=1, expected_total=1 )
if save_definition: return _save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=task_definition.Principal.UserID, password=None, logon_type=task_definition.Principal.LogonType)
#pylint: disable=E0602
width = self.ext.config['veoh_width'][0] height = self.ext.config['veoh_height'][0] return flash_object(url, width, height)
return ModuleStoreEnum.Type.mongo
errors = [] minions = [] for minion in response: minions.append(minion) if not response[minion]: errors.append(minion)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON ensure_in_syspath('../')
indptr_3 = X_sparse_unpruned.indptr[3] indptr_4 = X_sparse_unpruned.indptr[4] X_sparse_unpruned.data[indptr_3:indptr_4] = 0.0
if valid_users: if partner not in valid_users: target_room.message('{0} not authorized to run Salt commands'.format(partner)) return
'PREVENT_CONCURRENT_LOGINS': False,
for key, val in six.iteritems(func_globals['__opts__']): self.assertEqual(self.opts[key], val)
for gen in xrange(3): gc.collect(gen) scanner.dump_all_objects( format_str.format("gc-gen-{}".format(gen)) )
self.assert_grade(problem, 'choice_3', 'incorrect')
if os.path.isdir(dest): salt.utils.rm_rf(dest) fn_ = salt.utils.fopen(dest, 'wb+')
os.chdir('/') os.setsid() os.umask(18)
exc_info_on_loglevel=logging.DEBUG
draft_only = 'rev-opt-draft-only'
courses = modulestore().get_courses(branch=BRANCH_NAME_DRAFT) self.assertEqual(len(courses), 3)
url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.get(url)
user = User(username="rusty", email="rusty@fake.edx.org") course_id = SlashSeparatedCourseKey("edX", "Test101", "2013")
from __future__ import absolute_import import logging import re import getopt import copy from os import path as ospath
return [ parent_block_key for parent_block_key, value in structure['blocks'].iteritems() if block_key in value.fields.get('children', []) ]
year_of_birth = self.year_of_birth year = datetime.now(UTC).year if year_of_birth is not None: return self._calculate_age(year, year_of_birth)
from __future__ import absolute_import import os import random import string
self.login_page.visit().login(email=email, password=password)
import ioflo.app.run import salt.ext.six as six
axes = self.input_space.axes assert len(axes) == 4
return self._get_course_info(request, course)
sum_sqr_XX = conv2d(T.sqr(X), filters=filters, border_mode='full')
__virtualname__ = 'ports'
warnings.warn("non-uniform sample weights unsupported for svd, " "forcing usage of eigen") gcv_mode = 'eigen'
return None
__virtualname__ = 'service'
bulk_sku = models.CharField( max_length=255, null=True, blank=True,
courses_list_by_staff, __ = get_courses_accessible_to_user(self.request) self.assertEqual(len(courses_list_by_staff), TOTAL_COURSES_COUNT)
latest_version_url = '{artifactory_url}/api/search/latestVersion?g={group_url}&a={artifact_id}&repos={repository}'.format( artifactory_url=artifactory_url, repository=repository, group_url=group_url, artifact_id=artifact_id) log.debug('latest_version_url=%s', latest_version_url) return latest_version_url
segment_properties = full_segment_event.get('properties', {})
create_manual_course_enrollment( user=user, course_id=course_id, mode=course_mode, enrolled_by=enrolled_by, reason='Enrolling via csv upload', state_transition=UNENROLLED_TO_ENROLLED, )
pass
sample_silhouette_values = silhouette_samples(X, cluster_labels)
cached_pkg = __salt__['cp.is_cached'](uninstaller) if not cached_pkg: cached_pkg = __salt__['cp.cache_file'](uninstaller)
self.assertNotIn('broadcast_address', self.ipv6_network._cache) self.assertNotIn('hostmask', self.ipv6_network._cache)
import salt.utils.url
from __future__ import absolute_import from copy import deepcopy
translations_selector = '.metadata-video-translations .remove-setting' return self.q(css=translations_selector).attrs('data-lang')
def test_user_role(): return 'staff'
return (user, None)
target_shim_file = '.{0}'.format(binascii.hexlify(os.urandom(6))) self.shell.send(shim_tmp_file.name, target_shim_file)
meta_features = [] for feature in features: if 'meta.' in feature: meta_key = feature.split('.')[1] meta_features.append((feature, meta_key))
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
self.find_css('.collection-name-input').first.fill(value)
continue
n_connected_components, _ = connected_components(graph) return n_connected_components == 1
self.assert_no_xpath(xml, "//label[@class='choicegroup_incorrect']", self.context)
saltenv = env
lib1 = LibraryFactory.create()
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'softlayer_hw', vm_['profile'], vm_=vm_) is False: return False
raise NotImplementedError
permutation = rng.permutation(n_samples) ind_test = permutation[:n_test] ind_train = permutation[n_test:(n_test + n_train)] yield ind_train, ind_test
comment, passed, retries = _install(win_updater, retries) ret['comment'] += comment if not passed: ret['result'] = False return ret
TRACKING_IGNORE_URL_PATTERNS = [r'^/event', r'^/login', r'^/heartbeat']
if xblock_name is None: xblock_name = TestRecommender.XBLOCK_NAMES[0] url = self.get_handler_url(handler, xblock_name) return self.client.post(url, json.dumps(resource), '')
#default_role = None
destroy(server_['name'])
self.lc_block.max_count = 1 self._create_capa_problems() self.lc_block.refresh_children() self.assertTrue(self.lc_block.validate())
diff_threshold = int(getattr(options, 'percentage', -1)) percentage_string = u'' if diff_threshold > -1: percentage_string = u'--fail-under={0}'.format(diff_threshold)
exc_info_on_loglevel=logging.DEBUG
module = CapaFactory.create(due=self.yesterday_str, done=True) self.assertFalse(module.should_show_save_button())
if stop_words is not None: tokens = [w for w in tokens if w not in stop_words]
response = self.api_response()
self._do_mstep(X, z, self.params)
expected_y = y.mf_update( state_below = v.upward_state(v_state))
CourseUserGroup.objects.create( name="TestOtherGroupType", course_id=self.course_key, group_type="dummy" ) self.assertFalse(mock_tracker.called)
return get_url("PRIVACY")
return reclass_ext_pillar(minion_id, pillar, **kwargs)
update = salt.utils.alias_function(refresh_db, 'update')
return self.status_message == 'Contains staff only content' if self.has_status_message else False
#self.assertIn("4 matching components", library_block.author_content)
pass
MIN_IDEAL_BATCH_DURATION = .2
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=rng)
dangling_pointer = course.id.make_usage_key('chapter', 'DanglingPointer')
localemod.__context__ = {} localemod.__grains__ = {} localemod.__salt__ = {}
validate_badge_image(get_image('good'))
exclude_patterns = []
self.assertFalse(self.cohort_management_page.is_category_selected())
config = self.cohort_config if config is None: return False return bool(config.get("cohorted"))
self.wait_for_element_visibility(email_selector, 'Email field is visible') self.q(css=email_selector).fill(email)
content = service_instance.content.propertyCollector.RetrieveContents([filter_spec])
certificates[0]['is_active'] = False self.store.update_item(self.course, self.user.id)
pass
mock_sh = patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh = mock_sh.start()
from __future__ import absolute_import import logging
name = _sdecode(name) snap_name = _sdecode(snap_name)
self.dashboard_page = DashboardPage(self.browser)
from __future__ import absolute_import, print_function import os
export_course_to_xml(self.store, content_store, course_id, root_dir, 'test_export')
mod_random.__grains__ = {} mod_random.__salt__ = {} mod_random.__context__ = {} mod_random.__opts__ = {}
echo "Working hard..."
if kwargs.get('refresh', True): refresh_db()
return "/".join([BASE_URL, self.url_path, unicode(self.locator)])
self.course.discussion_blackouts = [[]] self.assertTrue(self.course.forum_posts_allowed)
return HttpResponse("Mode '{mode_slug}' created for '{course}'.".format( mode_slug=PARAMETERS['mode_slug'], course=course_id ))
return True
def test_lle_init_parameters(): X = np.random.rand(5, 3)
course_key_string = request.query_params.get('course_id', None) if not course_key_string: raise ValidationError('course_id is required.')
self.assertEqual( self.run_function( 'git.rev_parse', [self.repo, 'HEAD'], opts='--abbrev-ref' ), 'master' )
try: api.regenerate_user_certificates(params["user"], params["course_key"], course=course)
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
try: default_group = grp.getgrgid(pwd.getpwnam(user).pw_gid).gr_name ugroups.remove(default_group) except KeyError: pass
ordering = ['country']
list_check = lambda x: isinstance(x, list) clf = CheckingClassifier(check_X=list_check) scores = cval.cross_val_score(clf, X.tolist(), y.tolist())
least_squares, info = solve_cholesky(L[:n_active, :n_active], sign_active[:n_active], lower=True)
multi_db = True COURSE_SLUG = "100" COURSE_NAME = "test_course"
session_user_id = SafeSessionMiddleware.get_user_id_from_session(request)
target_users = [user for user in self.users if user.email == email] assert len(target_users) == 1 return target_users[0]
response = self.client.post(reverse('admin:student_courseaccessrole_add'), data=data) self.assertRedirects(response, reverse('admin:student_courseaccessrole_changelist'))
if store is not None and i not in (4, 5): store.save_asset_metadata(asset_md, asset[4])
y_1 = regr_1.predict(X) y_2 = regr_2.predict(X)
oracle.__salt__ = {} oracle.cx_Oracle = object()
resource = {"id": resource_id} edited_recommendations = { key: value + " edited" for key, value in self.test_recommendations[self.resource_id].iteritems() } resource.update(edited_recommendations) return resource
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
splitted_data = train_test_split(X, y, random_state=42) with TempMemmap(splitted_data) as (X_train, X_test, y_train, y_test): _lars_path_residues(X_train, y_train, X_test, y_test, copy=False)
if '_when' not in data: data['_when'] = when
average_weight = score_weight score_weight = None not_average_axis = 0
if value is None and key != '_id.revision': del query[key]
if ret['result'] is not False: msg = _format_terse(tcolor, comps, ret, colors, tabular) hstrs.append(msg) continue
CourseFixture(**self.course_info).install()
from __future__ import unicode_literals
from __future__ import absolute_import import logging
if 'enabled' not in new_item: new_item['enabled'] = True
return (arg.dtype is not None and str(arg.dtype).startswith('complex'))
'ENABLE_LIBRARY_INDEX': False,
constants = random_state.randn(5)
from __future__ import absolute_import
self.distribution.salt_installing_m2crypto_windows = True self.run_command('install-m2crypto-windows') self.distribution.salt_installing_m2crypto_windows = None
response = self.client.get( self._url(), HTTP_ACCEPT="text/plain", ) self.assertEqual(response.status_code, 406)
profile_str = 'gce-config:' provider = 'gce' providers = self.run_cloud('--list-providers') self.INSTANCE_NAME = _random_name()
result = first.copy() result.update(second) return result
return self.data_specs
from __future__ import absolute_import import os import re
self.store.publish(item_location, self.user_id) item = self.store.get_item(item_location) self.assertTrue(self.store.has_published_version(item))
the_html = problem.get_html() self.assertRegexpMatches(the_html, r"<div>\s+</div>")
return etree.Element("schematic")
self.q(css="#verify_later_button").click() DashboardPage(self.browser).wait_for_page()
from reclass.adapters.salt import top as reclass_top from reclass.errors import ReclassException
import scipy.sparse
ishfts = 1 self.mode = mode self.iparam[0] = ishfts self.iparam[2] = maxiter self.iparam[3] = 1 self.iparam[6] = mode
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
ScopeIds(None, block_type, definition_id, usage_id), field_data,
use_svd = (n_neighbors > d_in)
return dict((k, self.errored_courses[k].errors) for k in self.errored_courses)
y_true[np.where(y_true == 0)] = -1 y_true_copy = y_true.copy() _test_precision_recall_curve(y_true, probas_pred) assert_array_equal(y_true_copy, y_true)
import salt.ext.six as six
yield prev_end, "E225 missing whitespace around operator" need_space = False
pull_result = __salt__['dockerng.pull']( image, client_timeout=client_timeout, )
store = self._verify_modulestore_support(location.course_key, 'convert_to_draft') return store.convert_to_draft(location, user_id)
labels = np.zeros_like(mean) labels[np.arange(labels.shape[0]), am] = 1.0
return self.q(css='button.action-linkedin-profile')
self.wait_for_captions() captions_selector = self.get_element_selector(CSS_CLASS_NAMES['captions_text']) subs = self.q(css=captions_selector).html return ' '.join(subs)
self.request.user = self.user context = user_has_cart_context_processor(self.request) self.assertFalse(context['should_display_shopping_cart_func']())
from __future__ import absolute_import
err = st_.verify_data(kwargs) if err: __context__['retcode'] = 1 return err
select_option_by_value( browser_query=self.settings_detail.pre_requisite_course_options, value=pre_requisite_course_id ) self.settings_detail.save_changes() self.assertEqual( 'Your changes have been saved.', self.settings_detail.alert_confirmation_title.text )
n_samples = 200 X, y = make_circles(n_samples=n_samples, shuffle=False) outer, inner = 0, 1 labels = -np.ones(n_samples) labels[0] = outer labels[-1] = inner
self.send_response(200, 'This is LTI Provider.', {'Content-type': 'text/plain'})
if not settings.FEATURES['ADVANCED_SECURITY']: return False min_diff_pw = settings.ADVANCED_SECURITY_CONFIG.get( 'MIN_DIFFERENT_STAFF_PASSWORDS_BEFORE_REUSE', 0 ) return min_diff_pw > 0
latex_documents = [ ('index', 'pylearn2.tex', 'Pylearn2 Documentation', 'LISA lab, University of Montreal', 'manual'), ]
self.course_nav.q(css='select option[value="{}"]'.format('blue')).first.click()
courses_list = list(get_course_enrollments(self.student, None, [])) self.assertEqual(len(courses_list), 0)
self.store_precision = True
self.assertEqual(result['success'], 'correct') self.assertEqual(module.attempts, num_attempts + 1)
digits = datasets.load_digits(n_class=9)
var_dict_list = self.randomize_variables(self.samples) try: self.tupleize_answers(answer, var_dict_list) return True except StudentInputError: return False
return cls.current().platform_key if cls.is_enabled() else ''
return self.q(css='.prompt.error').visible
le = LabelEncoder() if isinstance(class_weight, dict) or multi_class == 'multinomial': class_weight_ = compute_class_weight(class_weight, classes, y) sample_weight *= class_weight_[le.fit_transform(y)]
if not activation_key: activation_key = uuid.uuid4().hex
self.import_static(data_path, dest_id)
try: ret = self.run_function( 'state.template_str', ['\n'.join(template)] )
salt '*' win_wua.list_updates categories=['Feature Packs','Windows 8.1'] summary=True
SignalHandler.course_published.disconnect(listen_for_course_publish)
import salt.ext.six as six
__virtualname__ = 'gentoolkit'
return ( obj["anonymous"] or obj["anonymous_to_peers"] and not self.context["is_requester_privileged"] )
return None
reduced_likelihood_function_value = - np.inf par = {}
self.client.defaults['SERVER_NAME'] = 'example.none' self.url_prefix = 'http://example.none'
return self.get_text('.course-title-override .certificate-value')
refetched = self.store.get_item(discussion_item.location)
EmptyPromise( lambda: self.current_form != login_form, "Finish toggling to the password reset form" ).fulfill()
dashboard = DashboardPage(self.browser) dashboard.wait_for_page() return dashboard
with patch.dict(local_cache.__opts__, {'keep_jobs': 0.00000001}): local_cache.clean_old_jobs()
__SKLEARN_SETUP__
self.backend = backend self.server = server return 'server disabled'
return __salt__['cmd.run'](cmd, runas=runas)
return status
self.client.login(username=self.white_label_course_instructor.username, password='test')
return _("{currency_symbol}{price}").format(currency_symbol=currency_symbol, price=price)
ups[self.annealed] = annealed ups[self.iteration] = self.iteration + 1
if not hasattr(cls, "_plugins"): plugins = {}
check_is_fitted(self, 'cluster_centers_') X = self._check_test_data(X) x_squared_norms = row_norms(X, squared=True) return -_labels_inertia(X, x_squared_norms, self.cluster_centers_)[1]
patcher = mock.patch.object(linter_class, '_is_valid_directory', return_value=True) patch_start = patcher.start() self.addCleanup(patcher.stop) return patch_start
from salt.exceptions import CommandExecutionError
stream1 = StringIO() stream2 = StringIO() handler1 = StreamHandler(stream1) handler2 = StreamHandler(stream2)
self.video.hide_closed_captions() self.video.wait_for_closed_captions_to_be_hidden() self.video.reload_page() self.video.wait_for_closed_captions_to_be_hidden()
from __future__ import absolute_import
response_element = etree.Element("schematicresponse")
self.assertFalse( utils.is_commentable_cohorted(course.id, to_id("General")), "Course doesn't even have a 'General' topic" )
assert_false(hasattr(MLPClassifier(algorithm='l-bfgs'), 'partial_fit'))
if device_vg and len(bricks) > 1: raise SaltInvocationError('Block device backend volume does not ' + 'support multiple bricks')
self.download_collection = win32com.client.Dispatch('Microsoft.Update.UpdateColl')
bulk_write_record.index = copy.deepcopy(bulk_write_record.initial_index) bulk_write_record.course_key = course_key
if usage_key.block_type != "problem": return False descriptor = self.store.get_item(usage_key, depth=0) assert isinstance(descriptor, CapaDescriptor) return capa_type in descriptor.problem_types
encoding = {'encoding': 'latin-1'} if six.PY3 else {}
if config.__flatten__ is True: serialized_config = config.serialize() cls.after_items_update.append(serialized_config) skip_order = True else: properties[item_name] = config.serialize()
block = modulestore().get_item(locator) pre_def_id = block.definition_locator.definition_id pre_version_guid = block.location.version_guid
for minion_id, minion_key in six.iteritems(preseed_minion_keys): rpath = os.path.join( preseed_minion_keys_tempdir, minion_id ) ssh_file(opts, rpath, minion_key, ssh_kwargs)
output = f(np.transpose(self.image, map_to_another_axes)) output_def = np.array(f_def(self.image)) output = np.transpose(output, map_to_default)
__virtualname__ = 'partition'
content = StaticContent('loc', 'name', 'content_type', 'data', None, None, None) self.assertIsNone(content.thumbnail_location)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, Mock, NO_MOCK, NO_MOCK_REASON )
return has_access(requesting_user, CourseStaffRole.ROLE, course_key)
create_attach_volumes = volume_create_attach
question_element = rendered_html.find("p") self.assertEqual(question_element.text, "Test question")
self.assertTrue(self.settings_detail.entrance_exam_field)
self.assert_requirement_status(0.70, self.EXPIRED_DUE_DATE, 'failed')
courses = CourseOverview.get_all_courses( org=org, filter_=filter_, ) if org == microsite_org else []
for student in students[3:]: self.assertIsNone( GeneratedCertificate.certificate_for_student(student, self.course.id) )
url( r'^courses/{}/progress/(?P<student_id>[^/]*)/$'.format( settings.COURSE_ID_PATTERN, ), 'courseware.views.views.progress', name='student_progress', ),
for idx, text in enumerate(text_options): if text == POLL_ANSWER: self.q(css=text_selector).nth(idx).click()
initial_photo_response = requests.get(initial_data["UserPhoto"]) self.assertEqual(initial_photo_response.status_code, 200)
import salt.utils from salt.exceptions import CommandExecutionError, MinionError import salt.ext.six as six
assignment = GradedAssignment( user=self.user, course_key=self.course.id, usage_key=desc.location, outcome_service=outcome_service, lis_result_sourcedid=result_id, version_number=0 ) assignment.save() return assignment
from salt.states import artifactory
est = DeprecatedAttributeEstimator(a=1)
return self.find_css("#due_time").present
'pillar_roots': dict,
from __future__ import absolute_import
if sp.issparse(coef): coef.data.flags.writeable = False else: coef.flags.writeable = False return coef
if root: self.result[root] = self.focus = {} else: self.focus = self.result
dist_matrix[dist_matrix != 0] = 1
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.5, random_state=0)
comps = name.split('}') name = comps[1]
face = sp.face(gray=True)
assert len(image.shape) == 3 assert len(shape) == 2 shrunk = fit_inside(image, shape) letterboxed = letterbox(shrunk, shape) return letterboxed
new = list_pkgs(saltenv=saltenv) tries = 0 difference = salt.utils.compare_dicts(old, new)
assert_true(X_scaled is not X)
err_string = "Invalid course_key: '{0}'".format(invalid_key) with self.assertRaisesRegexp(CommandError, err_string): call_command('reindex_course', invalid_key)
import integration from salt.cli import daemons
rng = np.random.RandomState(0) n_samples, n_features = 500, 2
self.check_permissions(clone_request(self.request, 'POST'))
response = self.client.get(self.url) expected_html = '<button class="is-disabled" disabled>Enable Student-Generated Certificates</button>' self.assertContains(response, expected_html)
kf = KFold(3) kf2 = KFold(3, shuffle=True, random_state=0) kf3 = KFold(3, shuffle=True, random_state=1)
self.assertIsInstance(descriptor._field_data, LmsFieldData)
from __future__ import absolute_import
if kwargs: salt.utils.warn_until( 'Carbon', 'kwargs must be passed inside the low under "kwargs"' )
youtube_id = videos.get('youtube', None) if youtube_id: transcripts_presence['is_youtube_mode'] = True
self.assertEqual(CourseEnrollment.objects.count(), 1) enrollment = CourseEnrollment.objects.get(course_id=course_key) self.assertEqual(enrollment.user.username, "test")
"download_url": ( cert.download_url or get_certificate_url(cert.user.id, cert.course_id) if cert.status == CertificateStatuses.downloadable else None ),
if zk_hosts is not None and path not in SEMAPHORE_MAP: zk = _get_zk_conn(zk_hosts) SEMAPHORE_MAP[path] = _Semaphore(zk, path, identifier, max_leases=max_concurrency, ephemeral_lease=ephemeral_lease)
fields = ["field1", "field2", "field3"] block_structure.request_xblock_fields(*fields)
course_id = None
GITHUB_REPO_ROOT = ENV_TOKENS.get('GITHUB_REPO_ROOT', GITHUB_REPO_ROOT)
JSON_SCHEMA_DRAFT_4 = 'http://json-schema.org/draft-04/schema#'
from salt.utils.odict import OrderedDict
if __opts__['test']: ret['result'] = None ret['comment'] = 'Service {0} is set to start'.format(name) return ret
from __future__ import absolute_import
return y - expit(pred.ravel())
enrollment = CourseEnrollment.get_enrollment(student, course_key) if enrollment and enrollment.mode not in REQUIREMENTS_DISPLAY_MODES: return None
return self.check_root()
for child in children_map[block_to_remove]: if pruned_parents_map[child]: continue for block in traverse_post_order(child, get_children=lambda block: pruned_children_map[block]): missing_blocks.append(block) pruned_children_map[block] = []
assert_array_equal(np.log(proba[k]), log_proba[k])
from __future__ import absolute_import import logging
available_version = salt.utils.alias_function(latest_version, 'available_version')
return list(self._get_selected_child_blocks())
from __future__ import absolute_import
import sys from salt.ext.six.moves import map if sys.version_info < (2, 7): import unittest2 as unittest else: import unittest
with super(FollowedThreadsUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
self.assertFalse(self.user.is_active)
context = get_context(self.course, self.request, make_minimal_cs_thread(thread_data)) return CommentSerializer(comment, context=context).data
return None
assignments = outcomes.get_assignments_for_problem( problem_descriptor, user_id, course_key ) for assignment in assignments: assignment.version_number += 1 assignment.save() return assignments
trainer.main_loop(time_budget) return trainer
logger.error("'{0}' not found " "but mandatory".format(this_check)) return False
self.problem_section = ItemFactory.create(parent_location=chapter.location, category='sequential', metadata={'graded': True, 'format': 'Homework'}, display_name=TEST_SECTION_NAME)
import salt.utils
import logging import os import os.path import re
VERIFY_STUDENT["SOFTWARE_SECURE"] = { "API_ACCESS_KEY": "BBBBBBBBBBBBBBBBBBBB", "API_SECRET_KEY": "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", }
if Replication is not None: config_items.append(versioning_item) config_items.append(replication_item) else: config_items.append(replication_item) config_items.append(versioning_item)
self.verify_lists_expected_cohorts([])
self.update_module() self.update_lib() self.loader.clear() self.assertEqual(self.loader[self.module_key](), (self.count, self.lib_count))
self.check_anonymous_request_rejected('post') self.assertFalse(mock_log.info.called)
from __future__ import absolute_import
to_del = [] if not full:
filters_regex = re.compile(r'\|([.,\w\s]*)\}') filters_match = filters_regex.search(expression.expression)
import logging import json import datetime
course = CourseFactory.create() self.verify_url( unicode(course.id.make_asset_key('asset', course.course_image)), course_image_url(course) )
self.assertEquals( preview.latex_preview('f(3^2)', functions=['f']), r'\text{f}\left(3^{2}\right)' )
return response
y_pred[:, k] += (learning_rate * tree.value[:, 0, 0].take(terminal_regions, axis=0))
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
AccessTestData(partition_groups={1: 1, 2: 2}, merged_parents_list=[{1: {3}}, {1: {1}}], expected_access=True),
key = safe_key('key', 'prefix', 'a' * 300) self.assertTrue(self._is_valid_key(key))
comb_name = comb_name.decode('utf-8', 'replace')
answers = ["Second", "Third", "Fourth"] problem = self.build_problem(answer="sample_answer", case_sensitive=False, additional_answers=answers)
import salt.utils import salt.utils.files import salt.utils.templates import salt.utils.validate.net from salt.exceptions import CommandExecutionError, SaltInvocationError
num_braces = 0
log.exception("Error in django view.") return render_to_response(template_path, context)
with self.assertRaises(NotImplementedError): self.client.ajax_post( self.url, data={'invalid_request': None}, )
if not is_mysql_running(): msg = colorize('red', "MySQL is not running locally.") print msg sys.exit(1)
if not cmd_path: return False elif not _which('ldd'): raise CommandNotFoundError('ldd')
modulestore().update_item(course, ModuleStoreEnum.UserID.primitive_command)
__virtualname__ = 'influxdb'
if port_name.match(name): return True else: return False
self.assertIn('Search for a course', response.content)
assert_false(X_sparse_unsorted.has_sorted_indices) assert_false(X_test_unsorted.has_sorted_indices)
'USE_YOUTUBE_OBJECT_API': False,
except ValidationError as err: return Response(err.messages, status=status.HTTP_400_BAD_REQUEST)
self.save()
try:
self.refresh_cached_metadata_inheritance_tree(location.course_key)
cost_weights = rng.normal(size=(num_filters, rows - filter_rows + 1, cols - filter_cols + 1, batch_size)) cost = (constant(cost_weights) * output).sum()
multi_db = True
warnings.warn("TODO: add unit test that iterators uneven property is set correctly.")
state = devices[str(dev_id)]['state']['on'] and Const.LAMP_OFF or Const.LAMP_ON
r = 0.1 real_cov = toeplitz(r ** np.arange(n_features)) coloring_matrix = cholesky(real_cov)
if structure is None: structure = self.db_connection.get_structure(version_guid, course_key) bulk_write_record.structures[version_guid] = structure if structure is not None: bulk_write_record.structures_in_db.add(version_guid)
dest = self._extrn_path(url, saltenv, cachedir=cachedir) makedirs = True
courses = self.get_courses() return [course.location.course_key for course in courses if course.wiki_slug == wiki_slug]
from __future__ import absolute_import
for mode_slug in course_modes: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode_slug, mode_display_name=mode_slug, )
students = self._create_students(5)
self.assertEqual(len(actual), 2) self.assertEqual(actual, expected)
self.assertEqual(new_version.test_content_field, 'Explicitly set') self.assertEqual(new_version.test_settings_field, 'Explicitly set')
exec_(final_template, _globals)
ret['comment'] = 'Event module not available. Schedule enable job failed.'
with self.assertRaises(SearchIndexingError): CoursewareSearchIndexer.do_course_reindex(modulestore(), self.course.id)
attempts = random.randint(1, 10) module = CapaFactory.create(attempts=attempts, max_attempts=attempts, force_save_button="true", done=True) self.assertFalse(module.should_show_save_button())
X, y = datasets.make_classification(n_samples=2000, n_features=10, n_informative=3, n_redundant=0, n_repeated=0, shuffle=False, random_state=0)
input_dict = {'1_2_1': '0', '1_2_2': '0'} correct_map = problem.grade_answers(input_dict)
ret = self.run_run_plus(fun='fileserver.symlink_list', args=['backend="roots"']) self.assertIsInstance(ret['fun'], dict)
other_cmap = CorrectMap() other_cmap.update(self.cmap)
from __future__ import absolute_import
xblock_info = self._get_xblock_info(chapter.location) self._verify_visibility_state(xblock_info, VisibilityState.ready) self.assertFalse(course.self_paced)
if not multilabel: labels = frombuffer_empty(labels, np.float64) data = frombuffer_empty(data, actual_dtype) indices = frombuffer_empty(ind, np.intc)
return any(self.correct_map.is_queued(answer_id) for answer_id in self.correct_map)
'event_match_type': str,
self._change_student_enrollment(self.enrolled_student, self.course, 'enroll')
fraction_mode_ever = True position = "denominator"
split_modulestore = modulestore()._get_modulestore_by_type(ModuleStoreEnum.Type.split) active_version_collection = split_modulestore.db_connection.course_index structure_collection = split_modulestore.db_connection.structures
from __future__ import division import warnings import numpy as np
non_editable_fields.extend([DiscussionDescriptor.discussion_id, DiscussionDescriptor.sort_key]) return non_editable_fields
self.assertNotEqual(prg1, prg2) self.assertEqual(prg1, prg3)
from salt.exceptions import SaltSystemExit import salt.modules.cmdmod import salt.utils
namespace_dirs = {namespace: list(look.directories) for namespace, look in LOOKUP.items()}
return self.list_display
'edxmako.middleware.MakoMiddleware',
self._timeout_future(tag, future) if future in self.timeout_map: tornado.ioloop.IOLoop.current().remove_timeout(self.timeout_map[future]) del self.timeout_map[future]
authentication_classes = () permission_classes = ()
settings.TRACKING_BACKENDS.update({'second': None}) backends = self._reload_backends() self.assertEqual(len(backends), 1)
X = [[0., 1., +0.5], [0., 1., -0.1], [0., 1., +1.1]]
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
log.error('Received message without share: {0}'.format(msg)) return
_("This is the wiki for **{organization}**'s _{course_name}_.").format( organization=course.display_org_with_default, course_name=course.display_name_with_default_escaped, )
self.assertAcceptEquals( 'rel;q=1.0, rel;q=0.5', self.process_request(accept='rel-ter;q=1.0, rel;q=0.5') )
for k in np.linspace(80, n_samples, 10): k = int(k)
return True
if decision in self.FAILED_DECISIONS: signed_field_names.remove("auth_amount")
garbage_prepend_json = '{0}{1}'.format(LORUM_IPSUM, test_sample_json) ret = utils.find_json(garbage_prepend_json) self.assertDictEqual(ret, expected_ret)
self.assertTrue(pkg_targets)
y = np.reshape(y, (-1, 1))
self.assertIn( 'Invalid value passed for path.', self.run_function('system.set_startup_disk', ['spongebob']))
return __virtualname__
cov = pca.get_covariance() precision = pca.get_precision() assert_array_almost_equal(np.dot(cov, precision), np.eye(d), 12)
child_descriptor = self.descriptor.get_child(usage_id) child_block = None if child_descriptor is not None: child_block = self.system.get_module(child_descriptor)
key_path = None
authenticate_lti_user(request, params['user_id'], lti_consumer)
return self._get_structures_for_branch_and_locator(branch, self._create_course_locator, **kwargs)
with remove_ccx(location) as (location, restore): return restore( self._modulestore.publish(location, user_id, **kwargs) )
from salt.states import at
payment_data = payment_data['payment_form_data']
delattr(tp, self.name) return result
expected_p, expected_h = h1.mf_update( state_below = v.upward_state(v_state), state_above = h2.downward_state(h2_state), layer_above = h2)
__virtualname__ = 'service'
return self.get_selected_option_text(self.LIBRARY_LABEL)
if not os.path.isfile(path): raise SaltInvocationError('File not found: {0}'.format(path))
import salt.utils import salt.utils.dictupdate import salt.utils.minions
if AUTH_TOKEN_HEADER in self.request.headers: return self.request.headers[AUTH_TOKEN_HEADER] else: return self.get_cookie(AUTH_COOKIE_NAME)
course_names = self.dashboard_page.wait_for_page().available_courses self.assertIn(self.course_info["display_name"], course_names)
assert_greater(1, 0) _assert_greater(1, 0) assert_raises(AssertionError, assert_greater, 0, 1) assert_raises(AssertionError, _assert_greater, 0, 1)
solution_element.tag = 'targetedfeedback' targetedfeedbackset.append(solution_element)
expire_dt = now + datetime.timedelta(seconds=cache_ttl) return expire_dt.strftime(HTTP_DATE_FORMAT)
from __future__ import absolute_import import logging import os
return fnd
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] h1_state = layer_to_state[h1] h2_state = layer_to_state[h2]
ax.view_init(40, -10)
idx = np.where(land_reference > -9999) coverages_land = data.coverages[:, idx[0], idx[1]].T
with check_mongo_calls(1): self._run_command()
scores = as_float_array(scores, copy=True) scores[np.isnan(scores)] = np.finfo(scores.dtype).min return scores
UserFactory.create(username=self.USERNAME, email=self.EMAIL, password=self.PASSWORD)
MMINION = None
AUDIT_LOG.info(u"User %s w/o external auth attempting login", user)
np.array([[[0, 1], [2, 3]], [[4, 5], [6, 7]]]),
('ALIGN', (5, 0), (5, 0), 'RIGHT'),
if mod_key not in functions: continue
verify_group_id_always_present(profiled_user=self.student, pass_group_id=True) verify_group_id_always_present(profiled_user=self.student, pass_group_id=False) verify_group_id_always_present(profiled_user=self.moderator, pass_group_id=True) verify_group_id_always_present(profiled_user=self.moderator, pass_group_id=False)
for ext in self.extensions: ext.setup(self.model, self.dataset, self.algorithm)
self.client.logout()
DATA_DIR = MODULE_DIR.parent.parent.parent.parent / "test" / "data"
addresses.append(line.strip()) continue
if hasattr(self, 'scale_'): del self.scale_ del self.n_samples_seen_ del self.mean_ del self.var_
self.q(css=self.editor_mode_css).click() self.browser.execute_script("tinyMCE.activeEditor.setContent('%s')" % content)
CourseOverviewImageSet.objects.create(course_overview=overview)
return self.q(css='.wrapper-create-course').visible
return self._line_start_indexes[line_number - 1]
if r == 0: return True
return
ItemFactory.create( parent_location=self.course.location, category="discussion", discussion_id="Topic_A", discussion_category="Chapter", discussion_target="Discussion", start=now )
response = self._regenerate( course_key=self.CERT_COURSE_KEY, username=self.STUDENT_USERNAME ) self.assertEqual(response.status_code, 400)
import copy import logging import sys
mappings = getattr(settings, 'HOSTNAME_MODULESTORE_DEFAULT_MAPPINGS', None)
empty_child_container = self._create_item(self.vertical.location, 'split_test', 'Split Test') self.validate_preview_html(empty_child_container, self.reorderable_child_view, can_add=False)
return '{0} not found'.format(name)
continue
if state is not None: state = json.loads(state)
unfreeze(name, path=path)
msg = "0 sample(s) (shape=(0,)) while a minimum of 1 is required." assert_raise_message(ValueError, msg, check_array, [], ensure_2d=False)
self.add_child()
create_course(step, course)
for svd in svds: assert_array_less(svd.explained_variance_ratio_.sum(), 1.0)
return [reverse(name, kwargs={'course_id': course.id.to_deprecated_string()}) for name in names]
'ALLOW_WIKI_ROOT_ACCESS': True,
return self.q(css='.bit-publishing .wrapper-visibility').first.text[0]
n_samples = 100
self.xblock.save()
clf = BernoulliNB(alpha=1.0) clf.fit(X, Y)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
log.exception(u"Error occurred while retrieving course enrollment details from the cache")
activations = [X] activations.extend(np.empty((batch_size, n_fan_out)) for n_fan_out in layer_units[1:]) deltas = [np.empty_like(a_layer) for a_layer in activations]
if not pkginfo: log.error('Unable to locate package {0}'.format(name)) ret[target] = 'Unable to locate package {0}'.format(target) continue
from salt.ext.six import string_types from salt.exceptions import get_error_message as _get_error_message
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call
course_id = CourseKeyField.Empty
try: face = sp.face(gray=True) except AttributeError: from scipy import misc face = misc.face(gray=True)
from salt.ext import six
add_user_with_status_granted(self.admin, self.user) self.assertEqual('unrequested', get_course_creator_status(self.user))
attempt_3 = SoftwareSecurePhotoVerification( user=user, created_at=attempt_2.created_at + timedelta(days=1) ) attempt_3.save()
self.generated_certificate.invalidate()
url = reverse('create_mode', args=[unicode(self.course.id)]) self.client.get(url, parameters)
rng = np.random.RandomState(0) X = rng.rand(10, 20) y = np.arange(10).astype(np.int)
assert_array_almost_equal(tpr, tpr_correct, decimal=2) assert_equal(fpr.shape, tpr.shape) assert_equal(fpr.shape, thresholds.shape)
from __future__ import absolute_import
self.enrollment.update_enrollment(mode=CourseMode.HONOR)
elem = self.get_setting_element(label) if elem: select = Select(elem) return select.first_selected_option.text else: return None
return []
real_user = self.runtime.get_real_user(self.runtime.anonymous_student_id) return real_user
le = LabelEncoder() le.fit([1, 2, 3, 1, -1]) assert_raises(ValueError, le.inverse_transform, [-1])
pass
go_to_section("data_download")
import salt.utils import logging import re
from unit.modules.boto_elasticsearch_domain_test import BotoElasticsearchDomainTestCaseMixin
'ENABLE_EDXNOTES': False,
req_status = api.get_credit_requirement_status(self.course_key, "bob", namespace="grade", name="grade") self.assertEqual(len(req_status), 0)
unmodified_overview = CourseOverview.get_from_id(course.id) self.assertEqual(unmodified_overview.version, 11)
'openedx.core.djangoapps.credit',
self.assertEqual(302, response.status_code) self.assertEqual('/login', response.get('Location'))
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
if create_after_overview: self.assertFalse(hasattr(course_overview, 'image_set')) self.set_config(enabled=True) course_overview = CourseOverview.get_from_id(course.id)
self.assertEquals(len(self.backend.events), 0)
continue
first_transaction.delete() second_transaction.delete() self._assert_history_transactions([])
return {}
for resource_id, resource in self.test_recommendations.iteritems(): for xblock_name in self.XBLOCK_NAMES: result = self.call_event('add_resource', resource, xblock_name)
__salt__['file.comment_line'](name, regex, char, True, backup)
course_id = None
learn_more = model.train_batch(dataset, batch_size) model.monitor.report_batch(batch_size) if not learn_more: break
with self.assertNumQueries(3): embargo_api.check_course_access(self.course.id, user=self.user, ip_address='0.0.0.0')
course_id = CourseKeyField(max_length=255, db_index=True)
pythoncom.CoInitialize() c = wmi.WMI(find_classes=0)
epilog += " http://edx.readthedocs.org/projects/edx-developer-guide/en/latest/conventions/safe_templates.html#safe-template-linter\n"
if not metric_base.startswith('virt.'): metric_base += '.' + ret['id'].replace('.', '_')
fragment.add_javascript_url(self.runtime.local_resource_url(self, 'public/js/library_content_edit.js')) fragment.initialize_js('LibraryContentAuthorView') return fragment
return self.get_selector('#btn-start-generating-certificates')
import salt.payload from salt.utils.odict import OrderedDict import salt.exceptions
CELERY_RESULT_BACKEND = 'djcelery.backends.cache:CacheBackend'
from salt.utils.schema import (Schema, IPv4Item, ) from salt.config.schemas.common import (MinionDefaultInclude, IncludeConfig )
index_entry = self._get_index_if_valid(course_key, force) structure = self._lookup_course(course_key).structure
raise
StudioAutoAuthPage( self.browser, username=self.staff_user["username"], email=self.staff_user["email"] ).visit()
return True
extend(state('.start').stateconf.require(stateconf='xxx::goal'))
if mswindows: def _execute(self): raise NotImplementedError
cur_block = unordered_structure[block]
from salt.ext.six import string_types
if hasattr(settings, 'LMS_SEGMENT_KEY') and settings.LMS_SEGMENT_KEY: tracking_context = tracker.get_tracker().resolve_context() identity_args = [
from __future__ import absolute_import import logging
n_classes = 3 n_estimators = 30 plot_colors = "ryb" cmap = plt.cm.RdYlBu
self.root_block_usage_key = root_block_usage_key
try: return getattr(self._module_system, name) except AttributeError: return getattr(self._descriptor_system, name)
for student in students[:7]: CertificateWhitelistFactory.create(user=student, course_id=self.course.id, whitelist=True)
try: import salt.utils.openstack.neutron as suoneu HAS_NEUTRON = True except NameError as exc: HAS_NEUTRON = False
root = _gluster_xml('volume status {0}'.format(name)) if not _gluster_ok(root): return None
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../')
request_uuid = self._create_credit_request_and_get_uuid()
all_lists = np.all([not hasattr(v, "rvs") for v in self.param_distributions.values()]) rnd = check_random_state(self.random_state)
return self.badgeassertion_set.filter(user=user)
return JsonResponse( _("Successfully removed invalid due date extension (unit has no due date).") )
snap_ids = _find_guids(info)
self.assertTrue(EmbargoedCourse.is_embargoed(course_id)) self.assertEquals( unicode(cauth), u"Course '{course_id}' is Embargoed".format(course_id=course_id) )
try: return PaidCourseRegistrationAnnotation.objects.get(course_id=self.course_id).annotation except PaidCourseRegistrationAnnotation.DoesNotExist: return u""
__, nonstaff_user = self.create_non_staff_authed_user_client() auth.add_users(self.user, CourseStaffRole(self.course.id), nonstaff_user)
submissions_score_reset_handler(None, **SUBMISSION_RESET_KWARGS) self.get_user_mock.assert_called_once_with('anonymous_id')
raise SaltClientError('Connection to master lost')
n_components = 100 n_features = 500
'cmd_safe': bool,
self.assertSetEqual( {block['id'] for block in response.data}, self.non_orphaned_block_usage_keys, )
init_params = init_params[1:]
fignum = 1
assert_equal(hamming_loss(y1[0], y2[0]), sp_hamming(y1[0], y2[0]))
if not container_ref: container_ref = service_instance.content.rootFolder
try: self.assertIn(ret_str, delete) except AssertionError: raise
y_true = np.zeros((1, n_labels)) assert_equal(lrap_score(y_true, y_score), 1.) assert_equal(lrap_score(y_true, y_score_ties), 1.)
log = logging.getLogger(__name__)
import salt.utils from salt.exceptions import CommandExecutionError
return ngroup_pillar
assert_raises(ValueError, Pipeline, [('svc', SVC()), ('svc', SVC())])
exc_info_on_loglevel=logging.DEBUG
X = np.array(list(product(range(N_per_side), repeat=2)))
X, y = make_classification(n_samples=20, n_features=10, shuffle=False, random_state=0)
cert_type=server type_ext=True
'search_index_interval': int,
key = RSA.importKey(rsa_priv_key_str) cipher = PKCS1_OAEP.new(key) return cipher.decrypt(data)
self.refresh_course()
from __future__ import absolute_import import os import string import random
raise PyDslError( 'An error occurred while running highstate: {0}'.format( '; '.join(result) ) )
continue theano.tests.unittest_tools.verify_grad(op, [a.get_value()])
from __future__ import absolute_import
resp = self.client.post('/courses/def/generate_user_cert') self.assertEqual(resp.status_code, 404)
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) signal_handler.send.assert_called_with('course_published', course_key=course.id)
classifier.set_params(n_iter=1000)
try: HAS_JUNOS = True import jnpr.junos import jnpr.junos.utils import jnpr.junos.utils.config import jnpr.junos.utils.sw except ImportError: HAS_JUNOS = False
self.assertEqual( res_json['message'], u"{user} does not exist in the LMS. Please check your spelling and retry.".format(user=invalid_user), )
categories = np.empty(N_CATEGORIES, dtype=object) for k in category_names.keys(): categories[category_names[k]] = k
USERNAME_MIN_LENGTH = 2 USERNAME_MAX_LENGTH = 30
admin = AdminFactory()
Z = Z.reshape(xx.shape) plt.figure(1, figsize=(4, 3)) plt.pcolormesh(xx, yy, Z, cmap=plt.cm.Paired)
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, done=False) self.assertTrue(module.should_show_save_button())
if self.themed(name): base = self.theme_location else: base = self.location path = safe_join(base, name) return os.path.normpath(path)
elif strategy == "most_frequent":
resp = self.client.get(self.url_unlocked) self.assertEqual(resp.status_code, 200) self.assertEquals('Origin', resp['Vary'])
course_overview = CourseOverview.get_from_id(course.id) return self.serializer_class(course_overview, context={'request': self._get_request()}).data
self.assertFalse(form.is_valid())
if os.path.isdir(tmp_dir): shutil.rmtree(tmp_dir) elif os.path.isfile(tmp_dir): os.remove(tmp_dir)
batch0 = slice(0, chunk_size) scaler_batch = MaxAbsScaler().fit(X[batch0]) scaler_incr = MaxAbsScaler().partial_fit(X[batch0])
import salt.utils from salt.ext.six.moves import range
winrm_port = config.get_cloud_config_value( 'winrm_port', vm_, __opts__, default=5986 )
'random_reauth_delay': int,
assert_equal(sample_without_replacement(0, 0).shape, (0, ))
return abs(student_complex - instructor_complex) <= tolerance
ret = get_editable_fields( Comment(user_id=context["cc_requester"]["id"], type="comment"), context ) ret |= NON_UPDATABLE_COMMENT_FIELDS return ret
super(TestLibraryExport, self).setUp() self.export_page = ExportLibraryPage(self.browser, self.library_key) self.export_page.visit()
self.cache.clear() self.addCleanup(self.cache.clear)
context = { 'reorderable_items': set(), 'read_only': True } html = get_preview_fragment(request, html, context).content
if sp_version >= (0, 12): solvers.append('lbfgs')
if not isinstance(lowstate, list): raise cherrypy.HTTPError(400, 'Lowstates must be a list')
from __future__ import absolute_import
raise ItemNotFoundError(definition_locator)
if line.startswith('bridge name'): continue vals = line.split() if not vals: continue
decorator `django.utils.decorators.decorator_from_middleware(middleware_class)`
if repo['uri'] not in repos: repos[repo['uri']] = [repo]
AccessTestData(partition_groups={1: 1, 2: 2}, merged_parents_list=[{1: {}}]), AccessTestData(partition_groups={1: 1, 2: 2}, merged_parents_list=[{1: {3}}]),
Y = np.concatenate(((1 - Y), Y), axis=1)
clf = QuadraticDiscriminantAnalysis(reg_param=0.01) with ignore_warnings(): clf.fit(X2, y6) y_pred = clf.predict(X2) assert_array_equal(y_pred, y6)
if self.value == '': self.value = 'null'
course_email_template = course_email.get_template() try: connection = get_connection() connection.open()
import salt.utils.openstack.swift as suos
time.sleep(10)
return _reduce_memmap_backed(a, m)
os.makedirs(fn_, **mode)
module = __name__.replace('.video_module', '', 2)
a = svm.SVC(C=1, kernel=lambda x, y: x * y.T, probability=True, random_state=0) b = base.clone(a)
if n_local_trials is None: n_local_trials = 2 + int(np.log(n_clusters))
return self._on_user_authentication_failed(request)
response = self.client.post(self.url, data) self.assertHttpBadRequest(response)
return self._bookmarks_cache(course_key, fetch=True)
from salt.states import influxdb_user
try: sec_index = self._section_titles().index(section_title) except ValueError: self.warning("Could not find section '{0}'".format(section_title)) return
if item in ['constraint']: extra_args = extra_args + ['id={0}'.format(item_id)] cmd += extra_args
from __future__ import absolute_import import logging
html = self.get_problem_html(encapsulate=False)
raise NotImplementedError()
PAID_COURSE_REGISTRATION_CURRENCY = ['usd', '$']
newpath = (next_usage, path) queue.append((parent, newpath))
try: os.remove(path) except IOError: pass return None
super(XBlockTestCase, self).setUp()
log.warning('Failed to retrieve CourseOverview for [%s]. Using empty course name.', course_id) return None
allowed_minions = set()
self.assertEqual(len(courses), 2)
import glob import logging import os import stat
if self.backward: return self.check_string_backward(expected, given)
self.start_time = datetime.now(UTC) - timedelta(seconds=1)
ensemble = BaggingClassifier(base_estimator=Perceptron(), n_estimators=3)
def __init__(self, *args, **kwargs): super(CourseTeamSerializerWithoutMembership, self).__init__(*args, **kwargs) del self.fields['membership']
from __future__ import absolute_import, print_function, with_statement import signal import logging import weakref import traceback import collections
return self._validation_paragraph('not-configured').text[0]
site_configuration = SiteConfigurationFactory.create( site=self.site, )
self.context.update({ 'response_id': self.id,
self.url = xml.get('url') or "http://qisx.mit.edu:8889/pyloncapa"
comment += ('\n' + config_comment)
from __future__ import absolute_import import os import textwrap import tempfile
a_start, a_end = np.byte_bounds(a) m_start = np.byte_bounds(m)[0] offset = a_start - m_start
rng = np.random.RandomState(0) n, p = 50, 3
self.code = None answer = None try: answer = xml.xpath('//*[@id=$id]//answer', id=xml.get('id'))[0] except IndexError:
url_pattern = '/u/test#about_me' response = self._auto_auth({ 'username': 'test', 'redirect_to': url_pattern, 'staff': 'true', }, status_code=302)
self.define_randomized_custom_response_problem(problem_url_name, redefine=True) self.render_problem('u1', problem_url_name) self.check_state('u1', descriptor, 1, 1, 2)
cmd = "dscl . -create /Users/{0} Password '*'".format(name) salt.utils.mac_utils.execute_return_success(cmd)
__virtualname__ = 'zabbix'
for p, y, expected in cases: assert_almost_equal(loss_function.dloss(p, y), expected)
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.approve()
click_css( self, self._bounded_selector(self.ADD_BUTTON_SELECTOR), require_notification=require_notification, )
pipeline = Pipeline([ ('vect', TfidfVectorizer(min_df=3, max_df=0.95)), ('clf', LinearSVC(C=1000)), ])
exc_info_on_loglevel=logging.DEBUG
subsection_css = 'a[href*="Test_Subsection_2/"]' world.css_click(subsection_css)
correct = 0 for key in correct_map: correct += correct_map.get_npoints(key)
shutil.rmtree(clone_parent_dir)
if not settings.FEATURES['ADVANCED_SECURITY']: return False min_days_between_reset = settings.ADVANCED_SECURITY_CONFIG.get( 'MIN_DAYS_FOR_STAFF_ACCOUNTS_PASSWORD_RESETS' ) return min_days_between_reset
import salt.utils from salt.exceptions import CommandExecutionError
self.page.modal_dialog_visible(dialog_type) self.assertIn(dialog_message, self.page.modal_dialog_text(dialog_type))
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
self.assertIn(self.test_form, resp.content)
self.key = key return 1
if not os.path.isdir(sourcepath): _LOG.error('Path is not present: %s', sourcepath) return False
raise DeprecationWarning( '`salt.utils.cloud.deploy_script now only accepts ' 'dictionaries for it\'s `minion_conf` parameter. ' 'Loading YAML...' )
assert isinstance(sls_data, dict) assert isinstance(yml_data, dict) assert sls_data == yml_data
log = logging.getLogger(__name__)
Microsite.objects.all().delete() microsite.clear() microsite.set_by_domain('unknown') self.assertIsNone(microsite.get_value('platform_name'))
language_options = DarkLangConfig.current().released_languages_list if settings.LANGUAGE_CODE not in language_options: language_options.append(settings.LANGUAGE_CODE) return language_options
component = self.draft_store.get_item(location) self.assertEqual(component.published_on, published_date) self.assertEqual(component.published_by, published_by)
full_name = self.imported_names[local_name] + remainder yield name, full_name
fd_, adminfile = salt.utils.mkstemp(prefix="salt-", close_fd=False)
return self
raise NotImplementedError()
if not locale_info['charmap'] and not on_ubuntu: locale_info['charmap'] = locale_info['codeset'] locale = salt.utils.locales.join_locale(locale_info)
SuperWeightDoubling = WeightDoubling
depth = len(b_list)
return self.update(id=entry_id, updated_user=user, should_display=should_display)
self.q(css=".filterable-column .nav-item").click()
custom_parameters = {}
continue
temp_dir = __salt__['temp.dir'](prefix='pkg-')
course_usage_main_vertical = self.lc_block.children[0] course_usage_inner_vertical = self.store.get_item(course_usage_main_vertical).children[0] inner_vertical_in_course = self.store.get_item(course_usage_inner_vertical) course_usage_html = inner_vertical_in_course.children[0] course_usage_problem = inner_vertical_in_course.children[1]
_, mod = include('a-non-pydsl-sls', 'a-pydsl-sls')
properties[name] = serialized_section
self.assertEqual(test, expected)
if x['subnet_id'] not in subnet_ids and x['subnet_id'] is not None: to_delete.append(x['id'])
from __future__ import absolute_import import fnmatch import logging import os import pprint
import logging
return NotAny( self )
self._navigate_to_courseware_video() self.video.wait_for_video_class()
datasetCache = cache.datasetCache filename = datasetCache.cache_file(filename)
top_idx = set(component.argsort()[-3:][::-1]) assert_true(tuple(sorted(top_idx)) in correct_idx_grps)
return _makeTags( tagStr, False )
try: self.assertIn(ret_str, instance) except AssertionError: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME)) raise
if __grains__.get('os_family') == 'Debian': cfg_file = '/etc/mdadm/mdadm.conf' else: cfg_file = '/etc/mdadm.conf'
self.orderitem_set.all().delete()
key1 = user_state_key('field_a') key2 = user_state_key('field_b') new_value = 'new value' newer_value = 'newer value' return {key1: new_value, key2: newer_value}
ret['comment'] = 'User {0} is not present, so it cannot be removed'\ .format(name) return ret
if d_estate in self.road_stack.value.nameRemotes: self.road_stack.value.message(msg, self.road_stack.value.nameRemotes[d_estate].uid) return
self.assertIn( "<script type=\"text/javascript\">function(){}</script>", etree.tostring(rendered_html) )
KEY_EXPIRATION_IN_SECONDS = 86400
self.url_map.update({ self.apiopts.get('webhook_url', 'hook').lstrip('/'): Webhook, })
self.assertTrue(filesystem.exists('policy.json'))
return (region, service_id, publicurl, adminurl, internalurl)
edx_user = User(username=self.edx_user_id) edx_user.save() lti_user = LtiUser( lti_consumer=self.lti_consumer, lti_user_id=self.lti_user_id, edx_user=edx_user ) lti_user.save() return lti_user
self.certificates_section.wait_for_certificate_invalidations_section()
args = (machine, session) progress = wait_for(_start_machine, timeout=timeout_in_seconds, func_args=args) if not progress: progress = machine.launchVMProcess(session, "", "")
task_folder = task_service.GetFolder(location) task = task_folder.GetTask(name)
self.assertEqual(result['success'], 'correct')
from __future__ import absolute_import import os import re import pprint import logging import msgpack from ast import literal_eval
for key, value in key_value_map.iteritems(): index = self._get_index_of(key) type_in_codemirror(self, index, value) self.save()
self.assertIn(orphan_chapter.location, self.store.get_orphans(course.id))
if user: self.q(css='input[id^=sd_fu_]').first.fill(user) self.q(css='section.staff-modal a.staff-debug-reset').click()
X = np.asarray(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
cv = list(check_cv(cv, X, y, classifier=is_classifier(estimator))) scorer = check_scoring(estimator, scoring=scoring)
FEATURES['ENABLE_EXPORT_GIT'] = True GIT_REPO_EXPORT_DIR = TEST_ROOT / "export_course_repos"
cli_log_path, self.config.get( self._logfile_config_setting_name_, self._default_logging_logfile_ )
_subscriptions = __salt__['boto_sns.get_all_subscriptions_by_topic']( name, region=region, key=key, keyid=keyid, profile=profile )
expected_body = json.dumps({'correct': True, 'score': 1, 'msg': '<div></div>'}) self._check_grade_response(callback_url, expected_header, expected_body)
ccx = CcxFactory(course_id=self.course.id, coach=self.coach) ccx_locator = CCXLocator.from_course_locator(self.course.id, unicode(ccx.id))
requirements = CreditRequirement.objects.filter(course__course_key=course_key, active=True)
self.assertEqual(params['access_key'], '0123456789012345678901') self.assertEqual(params['profile_id'], 'edx')
import os import re import stat import tempfile
detR = (np.diag(C) ** (2. / n_samples)).prod()
node = _guess_node_id(node) apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
from salt.version import __version__ return {'saltversion': __version__}
email_body = mail.outbox[0].body result = re.search(r'(?P<url>https?://[^\s]+)', email_body) self.assertIsNot(result, None)
url(r'^generate_example_certificates$', 'instructor.views.api.generate_example_certificates', name='generate_example_certificates'),
if self.advertised_start: return self.advertised_start elif self.start != DEFAULT_START_DATE: return defaultfilters.date(self.start, "DATE_FORMAT") else: return None
self.io_loop.start()
sorted_active_contents = sorted(active_contents, key=itemgetter('group_name')) sorted_inactive_contents = sorted(inactive_contents, key=itemgetter('group_name'))
ret['comment'] = ('User {0} is not present, so it cannot be removed' ).format(name) return ret
return self.runtime.get_published_on(self)
ret = {}
course_id = self.course.id self.assertRaises(ValueError, update_course_structure, course_id)
try: currIndex = sysPath.index(path) if currIndex != index: sysPath.pop(currIndex) else: return True except ValueError: pass
'auth_safemode': bool,
self.assertBlockHasContent(child_usage_key, 'data', child_data)
if setup_option or query_yes_no(self.CONFIRMATION_PROMPT, default="no"): course_keys = [course.id for course in modulestore().get_courses()] else: return
AVAIL_SVR_DIRS = []
linkedin_config = LinkedInAddToProfileConfiguration.current()
if self.learning_rate <= 0: raise ValueError("learning_rate must be greater than zero")
return comb(n, 2, exact=1)
self.set_select_value(self.LIBRARY_LABEL, library_name) EmptyPromise(lambda: self.library_name == library_name, "library_name is updated in modal.").fulfill()
additional_noise[np.abs(additional_noise) < .997] = 0
if amount_value < mode_info.min_price: error_msg = _("No selected price or selected price is too low.") return self.get(request, course_id, error=error_msg)
self.assertTrue(self.user.roles.filter(name="Student", course_id=self.course_key))
import os import os.path import time import logging
config = microsite.values return config.get(val_name, default)
try:
'tcp_pub_port': int,
def is_browser_on_page(self): wait_for_ajax_or_reload(self.browser) return self.q(css='body.view-settings').visible
return self._batch_size
import logging
self.assertEqual(actual, expected)
if not (self.n_jobs == 1 or self.n_jobs is None): path_params['copy_X'] = False
base_estimator = Lasso() ransac_estimator = RANSACRegressor(base_estimator) assert_raises(ValueError, ransac_estimator.fit, X, y, weights)
dlogz = log_mean(log_ais_w)
self.assertTrue(hasattr(course_overview_before, 'image_set'))
self._set_opt_in_pref(self.user, self.TEST_ORG, True) self._set_opt_in_pref(self.user, "org_alias", False)
import logging
import salt.utils
recommended_datastores = si.content.storageResourceManager.RecommendDatastores(storageSpec=storage_spec)
if not path or not os.path.isfile(path): return ret
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.assertIsNone(getattr(self.request, 'session', None)) self.assertIsNone(getattr(self.request, 'safe_cookie_verified_user_id', None))
def __init__( self, parseElementList ): self.parseElementTrace = parseElementList def __str__( self ): return "RecursiveGrammarException: %s" % self.parseElementTrace
assert_is_none(SoftwareSecurePhotoVerification.active_for_user(user))
return (security_group, remote_group_id, direction, protocol, port_range_min, port_range_max, ethertype)
d_Z = np.empty(theta.shape[0])
se = SpectralEmbedding(n_components=1, affinity="<unknown>", random_state=np.random.RandomState(seed)) assert_raises(ValueError, se.fit, S)
from __future__ import absolute_import from collections import Callable
message = 'foo: bar="baz", qux="quux"' self.assertTrue(mock_log.info.called_with(message))
keep_idx = numpy.arange(not marginalize_odd, depth, 2) for i in keep_idx: fe -= T.dot(samples[i], b_list[i]) * beta
APP.config_from_object('django.conf:settings') APP.autodiscover_tasks(lambda: settings.INSTALLED_APPS)
l_ups, learn_rates = self.learning_rate_updates(gradients) safe_update(ups, l_ups)
continue
failed_commands.discard('lspci') failed_commands.discard('dmidecode')
sls_file = '{0}\\init.sls'.format(os.sep.join(repo)) if not os.path.exists(sls_file):
if perm != 'global': debug("Deny: invalid permission '%s'", perm) return ACCESS_DENIED return ACCESS_GRANTED if GlobalStaff().has_user(user) else ACCESS_DENIED
from __future__ import absolute_import import os import logging import socket import pprint import yaml
probas = [c.fit(X, y).predict_proba(X) for c in (clf1, clf2, clf3, eclf)]
from __future__ import absolute_import import sys import warnings
self.assertTrue(pipeline.running(request))
name = event.get(u'name') return cls.mapping[name](event)
from salt.modules import mod_random import salt.utils.pycrypto from salt.exceptions import SaltInvocationError
if not predicate: raise ProfileDistribution.ValidationError()
y = np.zeros((10, 10)) y[:5, :5] = 1 y[5:, 5:] = 1
store = self._verify_modulestore_support(course_id, 'branch_setting') with store.branch_setting(branch_setting, course_id): yield
from tempfile import NamedTemporaryFile import logging import os
expected_p, expected_h = h1.mf_update( state_below = v.upward_state(v_state), state_above = h2.downward_state(h2_state), layer_above = h2)
'timeout': get_config_value('timeout', 1),
y = np.array([5, 6.1, 6, 7, 10, 9, 10]) x = np.arange(len(y))
get_storage_container_metadata = show_storage_container_metadata
{{ salt['cmd.run']('whoami') }} {{ salt.cmd.run('whoami') }}
except RateLimitException: return JsonResponse({ "success": False, "value": _('Too many failed login attempts. Try again later.'),
self.store.publish(self.vertical.location, self.user.id) draft_container = self.store.get_item(draft_container.location) test_container_html(draft_container)
self.q(css=self._bounded_selector(self.ADD_BUTTON_SELECTOR)).click()
vb_start_vm(BOOTABLE_BASE_BOX_NAME) ip_addresses = vb_wait_for_network_address(20, machine_name=BOOTABLE_BASE_BOX_NAME) network_count = len(ip_addresses) self.assertGreater(network_count, 0)
if is_css_present(css_selector): return retry_on_exception(lambda: css_find(css_selector, wait_time=timeout)[index].text) else: return ""
h.update(r['Salt']) r['Hash'] = h.hexdigest()
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
published_xblock = self.store.create_item( self.user_id, self.course.id, 'vertical', block_id='test_vertical', asides=[aside1, aside2] )
for missing in SUBMISSION_RESET_KWARGS: kwargs = SUBMISSION_RESET_KWARGS.copy() del kwargs[missing] submissions_score_reset_handler(None, **kwargs) self.signal_mock.assert_not_called()
import integration
try:
self.find_css('.action-add-signatory').first.click()
self.X_topo_space = view_converter.topo_space
self.assertEqual(None, ret)
grade_status = CreditRequirementStatus.objects.get( username=self.USER_INFO['username'], requirement__namespace="grade", requirement__name="grade" ) grade_status.reason = {} grade_status.save()
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
return VisibilityState.needs_attention
tsne = TSNE(metric="precomputed") assert_raises_regexp(ValueError, ".* square distance matrix", tsne.fit_transform, np.array([[0.0], [1.0]]))
new_hash = compute_fingerprint(paths) if new_hash != old_hash: install_func()
CourseEnrollmentFactory(user=self.student, course_id=self.course_id)
if not config.is_certification_enabled: LOGGER.warning( 'Task award_program_certificates cannot be executed when program certification is disabled in API config', ) raise self.retry(countdown=countdown, max_retries=config.max_retries)
resp = self.create_xblock(parent_usage_key=self.chapter_usage_key, category='sequential') self.seq_usage_key = self.response_usage_key(resp)
bulk_ops_record = self._get_bulk_ops_record(structure_key) if not bulk_ops_record.active: return
self.wait_for_add_certificate_button() self.q(css=self.certficate_css + " .action-add").first.click()
response = self.client.get( "/", HTTP_X_FORWARDED_FOR=request_ip, REMOTE_ADDR=request_ip )
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
predictions = [pred_block_i for pred_block_i, _ in prediction_blocks] test_indices = np.concatenate([indices_i for _, indices_i in prediction_blocks])
self._publish_events(block_structure, block_key, previous_count, max_count, block_keys) all_selected_children.update(usage_info.course_key.make_usage_key(s[0], s[1]) for s in selected)
if course_user_group is None: course_user_group, __ = CourseUserGroup.create(cohort_name, course_id) course_cohort, __ = cls.objects.get_or_create( course_user_group=course_user_group, defaults={'assignment_type': assignment_type} ) return course_cohort
if is_list_of_files(answer): new_answers[answer_id] = [f.name for f in answer] else: new_answers[answer_id] = answers[answer_id]
face_image = decode_image_data(face_data)
mock_run.return_value = xml_command_fail self.assertFalse(glusterfs.add_volume_bricks('Newvolume1', ['new:/path']))
data_dict = get_executive_report(course_id) data_dict.update( { 'total_enrollments': true_enrollment_count, 'report_generation_date': report_generation_date.strftime("%Y-%m-%d"), } )
split_test = self._update_partition_id(0)
for key, expected_value in subset.iteritems(): self.assertEquals(superset[key], expected_value)
def __singleton_init__(self, opts, **kwargs): self.opts = dict(opts)
assert_equal((i + 1), scaler_incr.n_samples_seen_)
A = np.abs(random_state.randn(30, 10)) NMF(n_components=15, random_state=0, tol=1e-2).fit(A)
from __future__ import absolute_import
np.random.seed(0) X = np.zeros((n_samples, 2)) step = 4. * np.pi / n_samples
return [item + '\n' for item in ifcfg.split('\n')]
state = self.sample_fn(bp1, state)
def __init__(self): self.Unauthorized = Unauthorized self.AuthorizationFailure = AuthorizationFailure
from __future__ import absolute_import, print_function
'show_jid': bool,
return 'is-disabled' not in self.q(css=css).attrs('class')[0]
from win32file import ReadFile, WriteFile from win32pipe import PeekNamedPipe import msvcrt import win32api import win32con import win32process
log.exception("Couldn't load textbook ({0}, {1})".format(title, book_url)) continue
print("training score : %.3f (%s)" % (clf.score(X, y), multi_class))
from __future__ import absolute_import, print_function import json import logging
time.sleep(5)
self._update_head(usage_locator.course_key, index_entry, usage_locator.branch, new_id) result = usage_locator.course_key.for_version(new_id)
self.browser.execute_script("jQuery.fx.off = true;")
i = begin_at_stage for i in range(begin_at_stage, self.n_estimators):
if acl_name == '': _search_name = __current_perms[name].get('comment').get(_acl_type) else: _search_name = acl_name
shared = str(shared).lower()
if settings.ROOT_URLCONF != 'lms.urls': raise unittest.SkipTest('Test only valid in lms') super(XBlockTestCase, cls).setUpClass()
num_purchases = 0 for item in purchases: num_purchases += 1 self.assertEqual(num_purchases, 2)
url(r'^get_students_opened_subsection$', 'class_dashboard.dashboard_data.get_students_opened_subsection', name="get_students_opened_subsection"),
assert isinstance(course_id, CourseKey) for course in self.get_courses(**kwargs): if course.id == course_id: return course return None
return self.design_mat_to_topo_view(design_mat)
vector = np.zeros_like(grad) vector[1] = 1 hess_col = hess(vector)
finished_future = yield Any(inflight_futures) try: b_ret = finished_future.result() except TimeoutException: break chunk_ret.update(b_ret) inflight_futures.remove(finished_future)
DEFAULT_TARGET_DELIM = ':'
s, v = 0.75, 0.9 c = s * v m = v - c
if "tags" in kwargs: kwargs["tags"] = _clean_tags(kwargs["tags"]) dog_stats_api.increment(metric_name, *args, **kwargs)
diabetes = datasets.load_diabetes()
raise BuildFailure(file_not_found_message)
if '.' in state[name]: comps = state[name].split('.') state[name] = {'__sls__': sls, '__env__': saltenv, comps[0]: [comps[1]]} continue
shrinkages = np.logspace(-2, 0, 30) negative_logliks = [-ShrunkCovariance(shrinkage=s).fit(X_train).score(X_test) for s in shrinkages]
import salt.ext.six as six
import salt.loader import salt.utils import salt.utils.cloud import salt.utils.validate.net from salt import syspaths
BROKER_POOL_LIMIT = 0 BROKER_CONNECTION_TIMEOUT = 1
assert_page_correct( page=1, page_size=4, expected_start=0, expected_stop=4, expected_next=2, expected_prev=None )
pass
from napalm import get_network_driver HAS_NAPALM = True
rng = np.random.RandomState(42) S = rng.standard_t(1.5, size=(20000, 2)) S[:, 0] *= 2.
self.assertFalse(SignatureValidator(self.lti_consumer).check_nonce(nonce))
gd = grid_dimension[0] grid_indices[gd] = add_mod(grid_indices[gd], step, len(grid_to_short_label[gd]))
self.settings_page.visit()
return sorted(ret)
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
course_mode_info = self._enrollment_with_complete_course(enrollment_mode) self.assertFalse(course_mode_info['show_upsell']) self.assertIsNone(course_mode_info['days_for_upsell'])
import shutil import tempfile import os from distutils.version import LooseVersion try:
self.store_builders = store_builders self.mappings = mappings or {} self.mixed_modulestore = None
from salttesting.unit import skipIf from salttesting.case import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../..')
from salttesting import TestCase, expectedFailure from salttesting.helpers import ensure_in_syspath
return self.q(css=self._bounded_selector('.xblock-student_view'))[0].text
import salt.defaults.exitcodes import salt.ext.six as six
np.array([[], []]),
self.assertFalse(self.cohort_management_page.is_category_selected())
resp = self.client.ajax_post( self.url, data={'tabs': [{'tab_id': tab_id} for tab_id in invalid_tab_ids]}, ) self.check_invalid_tab_id_response(resp)
silhouette_avg = silhouette_score(X, cluster_labels) print("For n_clusters =", n_clusters, "The average silhouette_score is :", silhouette_avg)
(index < 2 or tokens[index - 2][1] != 'class') and not keyword.iskeyword(prev_text)): yield prev_end, "E211 whitespace before '%s'" % text
self.navigate_to_video()
headers = {"Content-Type": request.META['CONTENT_TYPE']} result, __ = self.endpoint.validate_request(url, method, body, headers) return result
for layer, state in safe_izip(dbm.hidden_layers, H_hat): upward_state = layer.upward_state(state) layer.get_output_space().validate(upward_state)
return self.build_membership_data_raw(self.users[username].username, team.team_id)
import json
self.assertEqual( utils.get_discussion_category_map(self.course, self.instructor, cohorted_if_in_list, exclude_unstarted), expected )
from __future__ import absolute_import
Z = Z.reshape(xx.shape) plt.contourf(xx, yy, Z, cmap=plt.cm.Paired, alpha=0.8)
raise ValueError("The constant target value must be " "present in training data")
log.shutdown_multiprocessing_logging_listener(daemonizing=True)
tags = list(set(tags))
#html_title = None
if node_ids: if labels: node_string += 'node ' node_string += characters[0] + str(node_id) + characters[4]
__remove_null_logging_handler()
response = self.session.post( STUDIO_BASE_URL + '/course/', data=self._encode_post_dict(self._course_dict), headers=self.headers )
def __init__(self, message='Test'): super(Unauthorized, self).__init__(message) self.msg = message
gsn._corrupt_switch = False
import salt.ext.six as six
log = logging.getLogger(__name__)
class_prior = np.array([0.75, 0.25]) assert_array_almost_equal(np.exp(clf.class_log_prior_), class_prior)
TASK_TRIGGER_EVENT = 0 TASK_TRIGGER_TIME = 1 TASK_TRIGGER_DAILY = 2 TASK_TRIGGER_WEEKLY = 3 TASK_TRIGGER_MONTHLY = 4 TASK_TRIGGER_MONTHLYDOW = 5 TASK_TRIGGER_IDLE = 6 TASK_TRIGGER_REGISTRATION = 7 TASK_TRIGGER_BOOT = 8 TASK_TRIGGER_LOGON = 9 TASK_TRIGGER_SESSION_STATE_CHANGE = 11
int_payload['topic_lst'] = match_ids
return np.sum(self.score_samples(X))
try: return self._config.get_setting(name) except KeyError: return self.strategy.setting(name, default)
pending_change = PendingEmailChange.objects.filter(user=self.user) self.assertEqual(0, len(pending_change))
if serialized_block['type'] == 'video': self.assertIn('student_view_data', serialized_block)
return [Attribute('file'), Attribute('missing', None)]
import salt.utils.http
p = np.zeros((y.shape[0], k), dtype=np.float64) for i in range(k): p[:, i] = y == i
for ginput, expected in self.GOOD_DISPATCH_INPUTS: self.assertEquals(self.xmodule.parse_lti_2_0_handler_suffix(ginput), expected)
return self.child(title)
children = self.client.get_children(self.path, self._watch_lease_change)
system = -4
BULK_EMAIL_ROUTING_KEY = HIGH_PRIORITY_QUEUE
if not kwargs: cmd += ' '
if auth.user_has_role(user, CourseInstructorRole(course_id)): return 'instructor' else: return 'staff'
bulk_write_record = self._get_bulk_ops_record(course_key) if bulk_write_record.active: bulk_write_record.definitions[definition['_id']] = definition else: self.db_connection.insert_definition(definition, course_key)
override_field_for_ccx(ccx, course, 'max_student_enrollments_allowed', settings.CCX_MAX_STUDENTS_ALLOWED)
continue
self.assertEquals( block_structure_result, i in expected_accessible_blocks, "block_structure return value {0} not equal to expected value for block {1} for user {2}".format( block_structure_result, i, user.username ) )
if third_party_auth.is_enabled() and pipeline.running(request): running_pipeline = pipeline.get(request) redirect_url = pipeline.get_complete_url(running_pipeline['backend'])
from salt.exceptions import SaltSystemExit
email = staff.email password = 'test' self.login(email, password) self.enroll(self.course, verify=True)
def default(self, obj): if isinstance(obj, datetime): return get_default_time_display(obj) return json.JSONEncoder.default(self, obj)
import integration
preferences_api.set_user_preference(user, LANGUAGE_KEY, get_language())
selected.add(arg)
if field in self._dirty_fields: del self._dirty_fields[field]
problem = new_loncapa_problem(xml_str) rendered_html = etree.XML(problem.get_html())
assert_equal(grid_search.best_score_, 1.0) best_vectorizer = grid_search.best_estimator_.named_steps['vect'] assert_equal(best_vectorizer.ngram_range, (1, 1))
self.assert_account_settings_context_looks_correct(account_settings_context(request), request.user, linked=False) self.assert_social_auth_does_not_exist_for_user(request.user, strategy)
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch from salttesting.helpers import ensure_in_syspath
self._assert_requirements_displayed(response, [ PayAndVerifyView.PHOTO_ID_REQ, PayAndVerifyView.WEBCAM_REQ, ])
rng = np.random.RandomState(0) X = rng.rand(10, 2)
return self._check_login_or_register_page(self.register_page_url, "registerUrl")
default_pc = 0.5
from salt.utils.odict import OrderedDict
return self.runtime.get_subtree_edited_by(self)
continue
self.TA_role_2.inherit_permissions(self.TA_role)
import integration
if pkg: pkg = _cmd_quote(pkg)
os.environ[JOBLIB_SPAWNED_PROCESS] = '1'
microsite_url = get_microsite_url(name) if microsite_url != EMPTY_URL: return microsite_url
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self._update_staff_locks(False, False, False) self.assertIsNone(utils.find_staff_lock_source(self.vertical))
return self.enabled and self.cache_ttl > 0
import os import sys import time import signal import tempfile import traceback import inspect
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, self.course.id): self.store.delete_item(self.subsection.location, ModuleStoreEnum.UserID.test)
ret = {'result': False, 'comment': None}
metric_tag_fields = [ 'course_id', 'group_id', 'pinned', 'closed', 'anonymous', 'anonymous_to_peers', 'endorsed', 'read' ]
if status is not None: days_until_deadline = None
return { 'user': user or self.user, 'usage_key': block.location, 'course_key': block.location.course_key, 'display_name': block.display_name, }
url = self.homework.location.to_deprecated_string() found_unit = tools.find_unit(self.course, url) self.assertEqual(found_unit.location, self.homework.location)
if os.environ.get('TRAVIS') == "true": raise SkipTest("This test needs to be skipped on Travis")
course.position = 2 course.save()
return [mock.call(self.store, course.id) for course in courses]
import salt.utils from salt.ext.six import string_types from salt.exceptions import CommandExecutionError
response = self.assert_request_status_code(400, url, method="POST", data=data) self.assertIn("The sale associated with this invoice has already been invalidated.", response.content)
try: return CourseEmailTemplate.objects.get(name=name) except CourseEmailTemplate.DoesNotExist: log.exception("Attempting to fetch a non-existent course email template") raise
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
def test_ransac_residual_metric(): residual_metric1 = lambda dy: np.sum(np.abs(dy), axis=1) residual_metric2 = lambda dy: np.sum(dy ** 2, axis=1)
cat = [True, True, True] _check_one_hot(X, X2, cat, 5)
assert_not_equal(len(np.intersect1d(tr_a, tr_b)), len(tr1))
def __init__(cls, name, bases, dict): type.__init__(cls, name, bases, dict) cls.libv = LibVersion()
from __future__ import absolute_import import os import sys import stat import time import uuid import pprint import logging import yaml
log = logging.getLogger(__name__)
if firewall and syslog_config == 'loghost': if esxi_hosts: if not isinstance(esxi_hosts, list): raise CommandExecutionError('\'esxi_hosts\' must be a list.')
X, y = samples_generator.make_classification( n_features=20, n_informative=3, n_redundant=0, n_classes=4, n_clusters_per_class=2)
from __future__ import absolute_import import logging
return self.child_at(index)
stage_vars = _get_stage_variables(stage_variables)
def __init__(self, opts, **kwargs): pass
salt.utils.cloud.fire_event( 'event', 'requesting instance', 'salt/cloud/{0}/requesting'.format(vm_['name']), {'kwargs': newnode}, )
self.assertFalse(self.cohort_management_page.is_category_selected())
sh( "mongo {} --eval 'db.dropDatabase()' > /dev/null".format( Env.BOK_CHOY_MONGO_DATABASE, ) )
esx_cmd += ' -s {0} -u {1} -p \'{2}\' ' \ '--protocol={3} --portnumber={4} {5}'.format(host, user, pwd, protocol, port, cmd)
__func_alias__ = { 'set_': 'set' }
self.cart1 = Order.get_cart_for_user(self.first_verified_user) CertificateItem.add_to_order(self.cart1, self.course_key, self.cost, 'verified') self.cart1.purchase()
doc_topics, sstats_list = zip(*results) doc_topic_distr = np.vstack(doc_topics)
url = reverse('dashboard')
import os import time import logging
if not available(name): return False
super(LabelSpreading, self).__init__(kernel=kernel, gamma=gamma, n_neighbors=n_neighbors, alpha=alpha, max_iter=max_iter, tol=tol, n_jobs=n_jobs)
num_labels_by_type = (len(_categories),
if preserve_state \ and orig_state == 'stopped' \ and state(name) != 'stopped': stop(name)
safe_exec("rnums = [random.randint(0, 999) for _ in xrange(100)]", g, random_seed=17) self.assertEqual(g['rnums'], rnums)
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
if __Expiration__ != '': timenow = datetime.utcnow() timestamp = timenow.strftime('%Y-%m-%dT%H:%M:%SZ') if timestamp < __Expiration__: return __AccessKeyId__, __SecretAccessKey__, __Token__
print "static_asset_path = {0}".format(course.static_asset_path) self.assertEqual(course.static_asset_path, 'test_import_course')
import os import fnmatch
knn_mo = neighbors.KNeighborsClassifier(weights=weights, algorithm=algorithm) knn_mo.fit(X_train, y_train) y_pred_mo = knn_mo.predict(X_test)
plt.xlim(0, 100) plt.legend(loc='best') plt.title('Feature selection scores - Mutual incoherence: %.1f' % mi)
from __future__ import absolute_import import json import os import logging import copy import time from pprint import pformat
return _git_run(command, cwd=cwd, runas=user, ignore_retcode=ignore_retcode, redirect_stderr=True)['stdout']
self.submit_question_answer('p1', {'2_1': 'Incorrect'})
response = requests.get(self._get_url("api/v1/annotations"), params={"user": "dummy-user-id"})
test_invalid_token("AAAAAAAAAAAAAAAAAAAAACpyUxTGIrUjnpuUsNi7mAY=", "username")
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
import integration import salt.utils
self.assertFalse(CourseEnrollment.is_enrolled(self.user, self.course_key))
scaling = 0.3 coef_grid, scores_path = lasso_stability_path(X, y, scaling=scaling, random_state=42, n_resampling=30)
if 'provider' in details: details['driver'] = details.pop('provider')
user_partititons = self.course.user_partitions
self.assertEqual(response.status_code, 404) if error_type: self.assertEqual(response.data, error_type.to_json())
return ( _has_catalog_visibility(courselike, CATALOG_VISIBILITY_CATALOG_AND_ABOUT) or _has_staff_access_to_descriptor(user, courselike, courselike.id) )
response = self._generate( course_key=self.EXISTED_COURSE_KEY_2, username=self.STUDENT_USERNAME ) self.assertEqual(response.status_code, 400)
self.click(".action-publish") self.page.wait_for_ajax()
logging.debug("[%s]: %s" % (self, msg))
cohort_tuple = namedtuple("Cohort", "name id user_count assignment_type user_partition_id group_id") return cohort_tuple( name=cohort.name, id=cohort.id, user_count=user_count, assignment_type=assignment_type, user_partition_id=user_partition_id, group_id=group_id )
from salt.ext.six.moves.urllib.parse import urlparse
for desc in xblock_descriptions: loc = self.create_xblock(parent_loc, desc) self._create_xblock_children(loc, desc.children)
self.update_enrollement("enroll", "newuser@hotmail.com") self.check_outbox("You have been")
if not request.user.is_superuser and not ApiKeyHeaderPermission().has_permission(request, self): return Response(status=status.HTTP_403_FORBIDDEN)
capa_system = test_capa_system() capa_system.can_execute_unsafe_code = lambda: False
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch, call, Mock
from __future__ import absolute_import import logging import pprint import re import time import datetime
if options is None: options = '' do_matrix = 'matrix' in options do_qubit = 'qubit' in options do_numerical = 'numerical' in options
models_dict.pop(next_model) for model, dep_list in models_dict.iteritems(): if next_model in dep_list: dep_list.remove(next_model)
from __future__ import absolute_import import logging
return self.q(css="table.allowance-table tr.allowance-items").present
self.assertEqual(mail.outbox[0].subject, expected_subject)
embargo_redirect = embargo_api.redirect_if_blocked( course.id, user=request.user, ip_address=get_ip(request), url=request.path ) if embargo_redirect is not None: return redirect(embargo_redirect)
from salt.ext.six import string_types import salt.utils.odict as odict
request.view_name = view_func.__name__
assert_true(id1, id2)
if os.path.isfile(testfile): os.unlink(testfile)
import salt.ext.six as six import tornado.ioloop import tornado.iostream
repo_dir = self.git_repo_dir if not os.path.isdir(repo_dir): os.mkdir(repo_dir) self.addCleanup(shutil.rmtree, repo_dir)
from salt.modules import apache
from salt.utils.args import KWARG_REGEX
if getattr(libvirt, 'VIR_CONNECT_BASELINE_CPU_MIGRATABLE', False): flags += libvirt.VIR_CONNECT_BASELINE_CPU_MIGRATABLE else: raise ValueError
response = self._get_page(payment_flow, course.id) self._assert_contribution_amount(response, "12.34")
json_fields = json.dumps(fields, cls=EdxJSONEncoder) rerun_course.delay(unicode(source_course_key), unicode(destination_course_key), request.user.id, json_fields)
self.assert_enrollment_activation(False, selected_mode)
import salt.utils import salt.key
with self.assertRaisesRegexp(GitExportError, unicode(GitExportError.XML_EXPORT_FAIL)): git_export_utils.export_to_git( course_key, 'file://{0}'.format(self.bare_repo_dir))
if self.section.default_tab: courseware_context['default_tab'] = self.section.default_tab
certs_api.set_cert_generation_enabled(self.COURSE_KEY, True) self._assert_enabled_for_course(self.COURSE_KEY, True)
import salt.utils
return len(np.unique(X.nonzero()[1]))
url = marketing_link(name)
self.assertEqual(component.edited_by, self.user_id) old_edited_on = component.edited_on
default_z += T.alloc(*([0.]+[shape[elem] for elem in self.h_space.axes])).astype(default_z.dtype) assert default_z.ndim == 4
import salt.utils
self.dashboard_page.visit()
CourseEnrollment.enroll(self.user, self.course.id, mode="honor")
cret = mod_run_check( run_check_cmd_kwargs, onlyif, unless ) if isinstance(cret, dict): ret.update(cret) return ret
parent = np.arange(n_nodes, dtype=np.intp) used_node = np.ones(n_nodes, dtype=np.intp) children = []
return super(SoftDeleteCouponManager, self).get_queryset()
self.lc_block.source_library_id = "library-v1:BAD+WOLF" result = self.lc_block.validate()
self.pipe = None
self.create_xblock(parent_usage_key=self.chapter_usage_key, category='sequential2')
if isinstance(target_name, numbers.Integral): target_name = col_names[target_name] if isinstance(data_name, numbers.Integral): data_name = col_names[data_name]
X[0, 0] = 0 X[2, 1] = 0 X[4, 3] = 0 X_lil = sp.lil_matrix(X) X_lil[1, 0] = 0 X[1, 0] = 0
response = self._get_page( 'verify_student_upgrade_and_verify', course.id, expected_status_code=302 ) self._assert_redirects_to_verify_start(response, course.id)
face = sp.misc.imresize(face, 0.10) / 255.
y = zca_dataset.mapback_for_viewer(zca_dataset.X) z = x/np.abs(x).max(axis=0) assert_allclose(z[start:stop], y, rtol=1e-2)
course_instructors = list_with_level(course, 'instructor') course_instructors_ids = [anonymous_id_for_user(user, course_key) for user in course_instructors] course_details = CourseDetails.fetch(course_key)
credit_api.set_credit_requirements(
yield check_clustering yield check_estimators_partial_fit_n_features
check_node(sibling.location, None, after_create, self.user_id, None, after_create, self.user_id)
self.assertIn( 'Failed to setup the Syslog logging handler', '\n'.join(ret[1]) ) self.assertEqual(ret[2], 2)
__context__.pop('pkg.list_pkgs', None) new = list_pkgs() ret = salt.utils.compare_dicts(old, new)
return hasattr(self, '_has_mask')
if draft_node.parent_location is None: continue
from __future__ import absolute_import
return True
violations_count_str = "Number of {safecommit_script} violations: {num_violations}\n".format( safecommit_script=safecommit_script, num_violations=num_violations )
record_purchase(params, result['order']) return {'success': True, 'order': result['order'], 'error_html': ''}
from scipy import misc face = misc.face(gray=True)
cache.clear() CertificateGenerationConfiguration.objects.create(enabled=True) self.client.login(username=self.global_staff.username, password='test')
import salt.modules.cmdmod
return
self.assertIn(expected_copyright, json_data['copyright'])
from salt.modules import redismod from datetime import datetime
subs = ''
response = self._get_reverify_page() self.assertContains(response, "reverify-blocked")
page.browser.execute_script("jQuery.fx.off = false;")
urlpatterns += url(r'^template/(?P<template>.+)$', 'openedx.core.djangoapps.debug.views.show_reference_template'),
clf = DecisionTreeClassifier() clf.feature_importances_
#html_short_title = None
try: return get_draft() except ItemNotFoundError: return get_published()
alias = get_svc_alias() if name in alias: log.error('This service is aliased, enable its alias instead') return False
sh("i18n_tool generate")
self.certificates_section.wait_for_certificate_invalidations_section()
for block_key_string, serialized_block in serializer.data['blocks'].iteritems(): self.assertEquals(serialized_block['id'], block_key_string) self.assert_basic_block(block_key_string, serialized_block)
XBLOCK_SETTINGS = { "VideoDescriptor": { "licensing_enabled": True } }
kwargs['w'] = 1
elif "+" not in argument: if argument.endswith('.el') or argument.endswith('.$el'): return True return False
from salt.modules import raet_publish import salt.transport from salt.exceptions import SaltReqTimeoutError
for data in generated_certificates: data['report_run_date'] = report_run_date
from __future__ import absolute_import
rcon = salt.utils.which('restorecon') if rcon: cmd = [rcon, fconfig] subprocess.call(cmd)
else: eligibility_status = "partial_eligible"
n_samples, self.n_features_ = X.shape y = self._validate_y(y)
self.go_to_tab_and_assert_problem(1, self.problem1_name) problem1_content_after_coming_back = self.problem_page.problem_content self.assertEqual(problem1_content_before_switch, problem1_content_after_coming_back)
with self.store.bulk_operations(course.id, emit_signals=False):
request_kwargs = { 'name': vm_info['name'], 'clone_from': vm_info['clonefrom'] }
'dynamath': dynamath,
for saltenv, buckets in six.iteritems(_get_buckets()): bucket_files = {} for bucket_name in buckets: s3_meta = __get_s3_meta(bucket_name)
rerun_state = CourseRerunState.objects.update_state( course_key=self.course.id, new_state=state, allow_not_found=True ) CourseRerunState.objects.update_should_display( entry_id=rerun_state.id, user=UserFactory(), should_display=should_display )
self.assertEqual(len(actual), 2) self.assertEqual(actual, expected)
if microsite_org: return courses
with self.assertRaises(ValueError): self.runtime.service(self.mock_block, 'user_tags').get_tag('fake_scope', self.key)
cache.clear()
patcher = patch.object(api, 'api_enabled', Mock(return_value=True)) patcher.start() self.addCleanup(patcher.stop)
from __future__ import absolute_import
return True
module = CapaFactory.create(attempts=attempts, max_attempts=attempts, done=True) self.assertFalse(module.should_show_reset_button())
courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(len(courses_list), 1)
from salt.exceptions import CommandExecutionError import salt.utils
LOAD_P = '.load.p' MINIONS_P = '.minions.p' RETURN_P = 'return.p' OUT_P = 'out.p'
pillar_root = os.path.abspath(self.options.pillar_root) self.config['pillar_roots'] = {'base': _expand_glob_path([pillar_root])}
test_command = 'sysbench --num-threads=16 --test=fileio ' test_command += '--file-num=32 --file-total-size=1G --file-test-mode={0} ' result = None ret_val = {}
STATUS_VISIBLE = 'visible' STATUS_DELETED = 'deleted' TEMPLATE_DIR = 'courseware'
EmptyPromise( lambda: self.find_css('.signatory-panel-body .signatory-name-value').present, 'On signatory details view' ).fulfill()
return course.id.run
errstring = "Invalid course_key: 'InvalidCourseID'." with self.assertRaisesRegexp(CommandError, errstring): call_command('export', "InvalidCourseID", self.temp_dir_1)
n_samples = 12 n_features = 2 n_iter = 10 rng = np.random.RandomState(42) X = rng.rand(n_samples, n_features)
if os.getenv('DISPLAY') is None: try: import matplotlib matplotlib.use('Agg') except: pass
get_input_space = Model.get_input_space get_output_space = Model.get_output_space
from __future__ import division import warnings import numpy as np from scipy import linalg
dirname = os.path.normpath(os.path.dirname(path))
resp_params['signed_field_names'] = ",".join(signed_fields)
log_loss_scorer = make_scorer(log_loss, greater_is_better=False, needs_proba=True)
data = query('get', 'nodes/{0}/{1}/{2}/config'.format(node, node_type, vmid))
core_samples, labels = dbscan(X, algorithm=algorithm, eps=1, min_samples=4) assert_array_equal(core_samples, []) assert_array_equal(labels, -np.ones(n_samples))
if "MultiTask" in name: return np.reshape(y, (-1, 1)) return y
if library: component_types = [component for component in component_types if component != 'discussion']
student_answer = self.student_answers.get(choicegroup.get('id')) expl_id_for_student_answer = None
try: import influxdb import influxdb.influxdb08 HAS_INFLUXDB = True except ImportError: HAS_INFLUXDB = False
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
if 'selinux' in ks_opts.keys(): for mode in ks_opts['selinux']: sls[mode] = {'selinux': ['mode']}
X, y = datasets.make_friedman1(n_samples=1200, random_state=random_state, noise=1.0) X_train, y_train = X[:200], y[:200] X_test, y_test = X[200:], y[200:]
import salt.crypt import salt.utils import salt.utils.cloud import salt.config import salt.syspaths import uuid
status = 'failed' reason = { 'current_date': now, 'deadline': deadline }
content = "<p><br><br></p>" payload = get_response(content, 'January 11, 2013') self.assertHTMLEqual(content, payload['content'])
from __future__ import absolute_import import warnings
if instance in vmconfig['current'] and vmconfig['current'][instance] is not None: for current_cfg in vmconfig['current'][instance]: remove_instance = True
self.assertEqual(len(mail.outbox), 0)
super(SharedModuleStoreTestCase, cls).setUpClass() cls.start_modulestore_isolation()
return User.objects.filter( courseenrollment__course_id=course_id, courseenrollment__is_active=True )
last_request = httpretty.last_request() return json.loads(last_request.body)
resp = self.client.post( '/shoppingcart/payment_fake', dict(post_params) )
return page.q(css='.wrapper-notification-mini.is-shown').present
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
return super(SplitBulkWriteMixin, self)._get_bulk_ops_record( course_key.replace(branch=None, version_guid=None), ignore_case )
from __future__ import absolute_import import os.path
config.delete() self.assertEqual(len(self.page.experiment_group_configurations), 1)
for X, y in classification_datasets: X = X y = y mlp = MLPClassifier(algorithm='sgd', max_iter=100, random_state=1, tol=0, alpha=1e-5, learning_rate_init=0.2)
from openedx.core.lib.block_structure.factory import BlockStructureFactory from xmodule.modulestore.tests.django_utils import ModuleStoreTestCase from xmodule.modulestore.tests.factories import SampleCourseFactory
oh = OneHotEncoder(handle_unknown='error') oh.fit(X) assert_raises(ValueError, oh.transform, y)
try: userSID, domainName, objectType = win32security.LookupAccountName(None, user) except pywinerror: err += 'User does not exist\n'
from __future__ import absolute_import import os
get_request_dict = { CapaFactoryWithFiles.input_key(response_num=2): fileobjs, CapaFactoryWithFiles.input_key(response_num=3): 'None', }
data = {'changed': False, 'files': {'changed': []}, 'backend': 'roots'}
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, mock_open, NO_MOCK, NO_MOCK_REASON )
self.task_input = "THIS IS INVALID JSON"
course = CourseFactory.create() create_account(self.USERNAME, self.PASSWORD, self.EMAIL)
self.addCleanup(self.cleanup_scheme_extensions)
from __future__ import absolute_import
iris = datasets.load_iris() X = iris.data[:, [0, 2]] y = iris.target
X_scaled_back = scaler.inverse_transform(X_scaled) assert_array_almost_equal(X_scaled_back, X)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'azure', vm_['profile'], vm_=vm_) is False: return False
raise NotImplementedError()
self.io_loop.spawn_callback(salt.engines.start_engines, self.opts, self.process_manager, proxy=self.proxy)
cohort.name = "NewName" cohort.save() self.assertFalse(mock_tracker.called)
def cpu_affinity(self, *args, **kwargs): if args or kwargs: return self.set_cpu_affinity(*args, **kwargs) else: return self.get_cpu_affinity()
from salt.utils.odict import OrderedDict from salt.modules import boto_secgroup
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.check_problem(get_request_dict)
if reload_items:
if 'error' in _response: return set_salt_view()
self.course_outline_page.visit() self.assertEquals(self.course_outline_page.expand_collapse_link_state, ExpandCollapseLinkState.MISSING)
nn = NearestNeighbors(metric='chebyshev', n_neighbors=n_neighbors)
def refresh_thread_page(self, thread_id): self.browser.refresh() self.thread_page.wait_for_page()
wmi = types.ModuleType('wmi') sys.modules['wmi'] = wmi
self.q( css='#paging-header-select option[value={sort_order}]'.format(sort_order=sort_order) ).click() self.wait_for_ajax()
def single_fdr(alpha, n_informative, random_state): X, y = make_regression(n_samples=150, n_features=20, n_informative=n_informative, shuffle=False, random_state=random_state, noise=10)
if not hasattr(self, 'needs_reformat'): self.needs_reformat = self.needs_reshape del self.needs_reshape
self.repo = git.Repo.init(self.cachedir) new = True
modulestore().update_item(descriptor, request.user.id)
Yt /= np.sqrt((Yt ** 2).sum())
return u"{} : {}".format(self.course_id.to_deprecated_string(), self.annotation)
self.assertTrue(payment_accepted(params)['accepted'])
self._assertion_errors.append(formatted_exc)
return reverse_course_url( 'group_configurations_detail_handler', self.course.id, kwargs={'group_configuration_id': cid}, )
assert_equal(pairwise_distances([[1]], metric=lambda x, y: 5)[0, 0], 5)
)
original_values_map = self.get_settings_fields_of_each_type() self.set_wrong_inputs_to_fields()
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
'transcript': 'http://video.google.com/timedtext?lang=en&v=3_yD_cEKoCk',
config.toggle()
logger.info(this_package) packages_really_to_upgrade.append(this_package)
assert unsup_counter.get_value() == train_batches assert sup_counter.get_value() == train_batches
return self.filter_by(data, "usage_id", usage_id)
add_problem_to_course(world.scenario_dict['COURSE'].number, problem_type, problem_settings)
__salt__
rng = np.random.RandomState(0)
alphas /= alphas[0] alphas = alphas[::-1] coefs = coefs[:, ::-1] mask = alphas >= eps mask[0] = True alphas = alphas[mask] coefs = coefs[:, mask] return alphas, coefs
from __future__ import absolute_import
test_stats = {'n_test': 0, 'n_test_pos': 0}
return xmodule_instance_args.get('task_id', UNKNOWN_TASK_ID) if xmodule_instance_args is not None else UNKNOWN_TASK_ID
log.exception( 'Failed to handle marketing opt-in flag: user="%s", course="%s"', user.username, course_key )
response = self.send_get(client, query_parameters='view=shared') self._verify_private_account_response( response, requires_parental_consent=True, account_privacy=PRIVATE_VISIBILITY )
add_period = lambda x: '.' + x return map(add_period, cls.current().excluded_extensions.split())
repr(fbeta_score)
projected_distances = projected_distances[non_identical]
vsan_config = vim.vsan.host.ConfigInfo() vsan_config.enabled = True
L = np.zeros((max_features, max_features), dtype=X.dtype)
import salt.utils from salt._compat import subprocess, ipaddress
data = {'changed': False, 'backend': 'gitfs'}
from .tasks import update_library_index
speed_selector = self.get_element_selector(CSS_CLASS_NAMES['video_speed']) return self.q(css=speed_selector).text[0]
return restore( self._modulestore._clean_locator_for_mapping(locator) )
module = CapaFactory.create(rerandomize=RANDOMIZATION.NEVER, max_attempts=2, done=True) self.assertTrue(module.should_show_save_button())
AUTH_BASE_URL = os.environ.get('test_url', 'http://localhost:8031')
import logging
past_due_date = CapaFactory.create(showanswer='finished', max_attempts="1", attempts="0", due=self.yesterday_str) self.assertTrue(past_due_date.answer_available())
pass
return (super(ExternalLinkCourseTab, cls).validate(tab_dict, raise_error) and key_checker(['link', 'name'])(tab_dict, raise_error))
import salt.search
figure.subplots_adjust(bottom=0.05)
self._create_courses_and_enrollments( (self.TEST_ORG, True), ("other_org", True) )
return True
request_uuid = self._create_credit_request_and_get_uuid() response = self._credit_provider_callback(request_uuid, 'invalid') self.assertEqual(response.status_code, 400)
true_sum = pred_sum = tp_sum = np.zeros(len(labels))
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch
LOGGER.error(self._format_msg(format_str, *args))
if not settings.FEATURES.get('MILESTONES_APP', False): return None from milestones import api as milestones_api return milestones_api.add_course_milestone(course_id, relationship, milestone)
self.assertEqual(len(all_gradesets), 5)
set_inventory_base_uri_default(__opts__, kwargs)
super(TrackSelectionPage, self).__init__(browser) self._course_id = course_id
'microsite_configuration.middleware.MicrositeSessionCookieDomainMiddleware',
idf = np.log(float(n_samples) / df) + 1.0 self._idf_diag = sp.spdiags(idf, diags=0, m=n_features, n=n_features)
clf = linear_model.LogisticRegression(C=1e5) clf.fit(X, y)
assert_in('attempts', seq.xml_attributes)
XP = np.empty((n_samples, self.n_output_features_), dtype=X.dtype)
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
for iteration_idx in range(n_iter): minibatch_indices = random_state.randint( 0, n_samples, self.batch_size)
assets_by_type = defaultdict(lambda: SortedAssetList(iterable=course_assets.get(asset_type, [])))
asides2 = published_xblock2.runtime.get_asides(published_xblock2) self.assertEquals(asides2[0].field11, 'aside1_default_value1') self.assertEquals(asides2[0].field12, 'aside1_default_value2')
from salt.modules import virt from salt.modules import config from salt._compat import ElementTree as ET import salt.utils
query = self.q(css='.browse-teams') if query.present: query.first.click() self.wait_for_ajax()
if existing['code'] == 200:
print "Couldn't uninstall unwanted Python packages!" return
import salt.ext.six as six
self._run_command()
AutoAuthPage(self.browser).visit() url = BASE_URL + "/course_modes/choose/" + self.course_id self.browser.get(url) self._assert_dashboard_message()
self._get_hasher().fit(X, y=y) return self
n_components = 150
ps_uncached = self._create_service(username)
from distutils.version import LooseVersion try:
cache_root_path = all_cached_pkgs[0] specific_pkg = '{0}/{1}/'.format(cache_root_path, name)
clf = GradientBoostingRegressor(n_estimators=10, random_state=1) clf.fit(boston.data, boston.target)
role.add_users(self.student) role.remove_users(self.student) self.assertFalse(role.has_user(self.student))
if start[1] != indent[depth]: yield (start, "E124 closing bracket does not match " "visual indentation")
log.info('Creating master maintenance process') self.process_manager.add_process(Maintenance, args=(self.opts,))
'openedx.core.djangoapps.theming',
self.set_config(True) super(CourseOverviewImageSetTestCase, self).setUp()
X_list = [1., 3., 5., 0.] X_arr = np.array(X_list)
from salt import utils
Y = np.dot(D, X)
PER_REMOTE_ONLY = ('name',) SYMLINK_RECURSE_DEPTH = 100
assert_raises(VerificationException, attempt.submit)
if rolename not in [FORUM_ROLE_ADMINISTRATOR, FORUM_ROLE_MODERATOR, FORUM_ROLE_COMMUNITY_TA]: return HttpResponseBadRequest(strip_tags( "Unrecognized rolename '{}'.".format(rolename) ))
if isinstance(module, DiscussionDescriptor) and 'discussion_id' not in items: items['discussion_id'] = module.discussion_id
base_estimator = LinearRegression() ransac_estimator = RANSACRegressor(base_estimator, min_samples=2, residual_threshold=0.0, random_state=0)
student = self._user_factory_with_history() self.assertFalse(PasswordHistory.is_password_reset_too_soon(student))
if php is not None: cmd = [php] + cmd
return self.module.__func_alias__.get(self.objpath[0], self.objpath[0])
bulk_write_record = self._get_bulk_ops_record(course_key) if bulk_write_record.active: return bulk_write_record.modules[version_guid].get(block_id, None) else: return None
self.tag_map = defaultdict(list)
del channel
self.assertFalse(hasattr(draft_open_assessment, "xml_attributes"))
_setup_mp_logging_listener_ = False
FEATURES['ENABLE_EDXNOTES'] = True
raise NotImplementedError
self.assertFalse(section.due_date) self.assertFalse(section.policy)
block_structure.remove_block_if( check_child_removal )
min_samples = X.shape[1] + 1
self.minions = {}
self.edited_on = edit_info.get('edited_on', None) self.edited_by = edit_info.get('edited_by', None)
log.warning( '{0} remote \'{1}\' is an empty repository and will ' 'be skipped.'.format(self.role, self.id) ) return False
self.label_index_to_name = ('category', 'instance', 'elevation', 'azimuth', 'lighting condition')
time.sleep(1) continue
import salt.utils
self.assertTrue('Activate Course Enrollment' in response.content)
#html_use_index = True
super(BaseVisitor, self).__init__() self.file_contents = file_contents self.lines = StringLines(self.file_contents) self.results = results
origin = bool(re.search('/', pkgname))
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
if isinstance(devices, str): devices = devices.split(',')
ret['changes'] = {'old': '', 'new': '{0}@{1}'.format(user, host)}
hasher = RandomTreesEmbedding(n_estimators=30, random_state=1) assert_array_equal(hasher.fit(X).transform(X).toarray(), X_transformed.toarray())
pipeline = Pipeline([ ('vect', CountVectorizer()), ('tfidf', TfidfTransformer()), ('clf', SGDClassifier()), ])
try: indent = min(len(s) - len(s.lstrip()) for s in docstring if s.strip()) except ValueError: indent = 0
orig_tab_ids = [tab.tab_id for tab in self.course.tabs] tab_ids = list(orig_tab_ids) num_orig_tabs = len(orig_tab_ids)
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
for tab_list in [[], self.tabs_with_discussion, self.tabs_without_discussion]: self.check_discussion( tab_list=tab_list, expected_discussion_link=not None, expected_can_display_value=False, )
network = int(self.network_address) broadcast = int(self.broadcast_address) for x in long_range(network + 1, broadcast): yield self._address_class(x)
terminal_regions = tree.apply(X)
kwargs['choice_type'] = 'multiple' return ResponseXMLFactory.choicegroup_input_xml(**kwargs)
CCX_MAX_STUDENTS_ALLOWED = 200
'captionDataDir': getattr(self, 'data_dir', None),
yaml_key_val_pair = '- key1: val1' ret = utils.repack_dictlist(yaml_key_val_pair) self.assertDictEqual(ret, {'key1': 'val1'})
is_x_old_in_X = int(mask.sum() < X.shape[0])
request, strategy = self.get_request_and_strategy( auth_entry=pipeline.AUTH_ENTRY_REGISTER, redirect_uri='social:complete') strategy.request.backend.auth_complete = mock.MagicMock(return_value=self.fake_auth_complete(strategy))
if 'user_id' in kwargs: kwargs['user_id'] = str(kwargs['user_id']) return kwargs
if 'enabled' not in kwargs: schedule[name]['enabled'] = True
final_alpha = 1e-5 low_reg_model = ElasticNet(alpha=final_alpha).fit(X, y)
params["username"] = params["password"] = "test_username_and_password" assert_password_error("Username and password fields cannot match")
if len(cur_state_below) == 1: cur_state_below, = cur_state_below
self._base_test_extauth_auto_activate_user_with_flag(log_user_string="user.id: 1")
for B in combinations(features, k): for b in product(*[values[B[j]] for j in range(k)]): mask_b = np.ones(n_samples, dtype=np.bool)
if salt.utils.compare_versions(ver1=pip_version, oper='>=', ver2='1.4'): cmd.append('--pre')
if settings.FEATURES["ENABLE_SYSADMIN_DASHBOARD"]: urlpatterns += ( url(r'^sysadmin/', include('dashboard.sysadmin_urls')), )
self.assertTrue(self.video.downloaded_transcript_contains_text('srt', 'Welcome to edX.'))
X = check_array(X, dtype=np.float64, order='F', copy=self.copy_X and self.fit_intercept) y = check_array(y, dtype=np.float64, ensure_2d=False)
import sys import logging
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch
from __future__ import absolute_import
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_id) if has_instructor_access_for_class(request.user, course_key): try: data = dashboard_data.get_d3_problem_grade_distrib(course_key)
self._assert_course_verification_status(None)
for chapter_module in course_module.get_display_items(): if chapter_module.hide_from_toc: continue
selector = self.get_element_selector(CSS_CLASS_NAMES['error_message']) return self.q(css=selector).visible
if _mini_batch_convergence( self, iteration_idx, n_iter, tol, n_samples, centers_squared_diff, batch_inertia, convergence_context, verbose=self.verbose): break
X_whitened = pca.fit_transform(X_.copy()) assert_equal(X_whitened.shape, (n_samples, n_components)) X_whitened2 = pca.transform(X_) assert_array_almost_equal(X_whitened, X_whitened2)
import logging import os
format = ugettext("LONG_DATE_FORMAT") if format == "LONG_DATE_FORMAT": format = DEFAULT_LONG_DATE_FORMAT
NAME_MIN_LENGTH = 2 NAME_MAX_LENGTH = 255
from __future__ import absolute_import import json import pprint import logging from os import path from functools import wraps
return self.event[u'current_tab'] == self.event[u'tab_count']
mock_user = MagicMock() mock_user.is_authenticated.return_value = False self.assertEqual(views.user_groups(mock_user), [])
handler = cherrypy.request.ws_handler
_config_filename_ = 'master'
assert_raises(ValueError, pipe.set_params, anova__C=0.1)
self.all_words = temp_all_words
from __future__ import absolute_import import os import platform
item = order.orderitem_set.all().select_subclasses()[0]
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 3)
repo = kwargs.get('repo', '') if not fromrepo and repo: fromrepo = repo
mdata = AssetMetadata(asset_key, asset_key.path) mdata.from_storable(all_assets[asset_idx]) mdata.update(attr_dict)
assert_array_equal(np.intersect1d(train, test), [])
k1_dims = self.k1.n_dims self.k1.theta = theta[:k1_dims] self.k2.theta = theta[k1_dims:]
selector = self.get_element_selector(VIDEO_BUTTONS['quality']) return self.q(css=selector).visible
assert_true(np.all(np.diff(distances[0]) >= 0))
def fit(self, X, y): return self def score(self, X, y): return 1.0
self.assertEqual(len(site_configuration_history), 1)
if not args: format_str = urllib.unquote(format_str) return u"{0} - - [{1}] {2}\n".format( self.client_address[0], self.log_date_time_string(), format_str % args )
import os import tarfile import tempfile import json import shutil from contextlib import closing
import salt.utils import salt.utils.locales
import salt.ext.six as six
course_outline_page.q(css='.outline-item.outline-subsection.is-collapsed .ui-toggle-expansion').first.click()
import salt.utils
raise NotImplementedError("%s doesn't implement make_state" % type(self))
classifier = OneVsRestClassifier(svm.SVC(kernel='linear', probability=True, random_state=random_state)) y_score = classifier.fit(X_train, y_train).decision_function(X_test)
sh("i18n_tool transifex pull")
self.assertEqual(len(long_name), 48) self.assertTrue(linode._validate_name(long_name))
log = logging.getLogger(__name__)
context_processors = _builtin_context_processors context_processors += tuple(settings.DEFAULT_TEMPLATE_ENGINE['OPTIONS']['context_processors']) return tuple(import_string(path) for path in context_processors)
from __future__ import absolute_import import logging import os import re
x, y, z = repr.get_value(borrow=True).T do_3d_scatter(x, y, z)
from yaml.constructor import ConstructorError from salt.utils.yamlloader import SaltYamlSafeLoader import salt.utils
self.assertTrue(microsite.BACKEND.has_configuration_set()) Microsite.objects.all().delete() self.assertFalse(microsite.BACKEND.has_configuration_set())
cost_value.name = 'objective'
X_3d = X[:, :, np.newaxis] clf = MockClassifier(allow_nd=True) scores = cross_val_score(clf, X_3d, y2)
return SearchEngine.get_search_engine(self.INDEX_NAME)
vect = HashingVectorizer(analyzer='char', non_negative=True, binary=True, norm=None, dtype=np.float64) X = vect.transform(test_data) assert_equal(X.dtype, np.float64)
return graders[self.credit_type[0]]( student_answers=student_answers )
else: raise ValueError("unrecognized mode '%s'" % mode)
value = sp.sparse.linalg.svds(A, k=1, return_singular_vectors=False)
self.q(css='a.nav-item').filter(text=topic)[0].click()
return self.best_estimator_.predict(X)
if getattr(self.distribution, 'salt_syspaths_hardcoded_path', None) is None: print('This command is not meant to be called on it\'s own') exit(1)
from salt.exceptions import SaltRenderError import salt.utils.templates
return self.eof_index
set_input_value(page, css, value).send_keys(Keys.ENTER) page.wait_for_ajax()
form_desc = json.loads(response.content)
import glob import os import re import itertools import fnmatch
try: info_module.get_html() except ValueError: self.fail("CourseInfoModule could not parse an invalid date!")
return '1234'
return module.seed
EmptyPromise( lambda: self.q(css='.assetupload-modal .action-upload').present, 'Signature image upload dialog opened' ).fulfill()
if '.' in high[name]: comps = high[name].split('.') high[name] = { comps[0]: [comps[1]] } continue
y = np.array([3, 7, 5, 9, 8, 7, 10]) x = np.arange(len(y))
if hasattr(self, "doc"): doc = self.doc else: doc = None
import salt.ext.six as six
purchased_callback.assert_called_with()
test.__salt__ = {} test.__opts__ = {} test.__low__ = {'__reqs__': {'watch': ''}}
import yaml
world.retry_on_exception(lambda: link.click())
return
assert_equal(sample_without_replacement(5, 0).shape, (0, )) assert_equal(sample_without_replacement(5, 1).shape, (1, ))
lexer = shlex.shlex(options[1:-1].encode('utf8')) lexer.quotes = "'" lexer.whitespace = ", "
return Response(create_thread(request, request.data))
import salt.ext.six as six
'state_output': str,
log_proba = all_log_proba[0]
return ApiKeyHeaderPermission().has_permission(request, self)
available_version = salt.utils.alias_function(latest_version, 'available_version')
if physical_line.rstrip() == physical_line: return len(physical_line), "W292 no newline at end of file"
decisions = sum(all_decisions) / self.n_estimators
import salt.utils from salt.exceptions import SaltInvocationError, CommandExecutionError
self.wait_for_field('image') self.wait_for_ajax() return self.q(css='.message-banner p').text[0]
HAS_LIBS = False try: import salt.ext.six as six HAS_LIBS = True except ImportError: try: import six HAS_LIBS = True except ImportError: pass
if not given: return False
import dns.resolver
action = request.POST.get("enrollment_action") if 'course_id' not in request.POST: return HttpResponseBadRequest(_("Course id not specified"))
_role_present(ret, IdentityPoolId, AuthenticatedRole, UnauthenticatedRole, conn_params)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
import logging import salt.utils
path = self._last_visited_module_path(request, course) path_ids = [unicode(module.location) for module in path] return Response({ "last_visited_module_id": path_ids[0], "last_visited_module_path": path_ids, })
self.two_day_delta_str = "2 days"
_update_course_context(request, context, course, platform_name)
self.assertEqual(resp_obj.status_code, http_code) self.assertIn('error_code', resp_obj.data) self.assertEqual(resp_obj.data['error_code'], error_code_str)
exc_info_on_loglevel=logging.DEBUG
call_command('import', self.content_dir, self.course_dir) self.assertIsNotNone(store.get_course(self.truncated_key))
self.forward_events = tornado.ioloop.PeriodicCallback(self._forward_events, self.opts['syndic_event_forward_timeout'] * 1000, io_loop=self.io_loop) self.forward_events.start()
exc_info_on_loglevel=logging.DEBUG
from salt.states import hipchat
instance = self.run_cloud('-p gce-test-extra {0}'.format(self.INSTANCE_NAME)) ret_str = '{0}:'.format(self.INSTANCE_NAME)
from __future__ import absolute_import
from salttesting.case import TestCase from salttesting.helpers import ensure_in_syspath, TestsLoggingHandler
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON, mock_open
KEY_CSRF_TOKENS = ('csrf_token', 'csrf') for key in KEY_CSRF_TOKENS: if key in context_dictionary: context_dictionary[key] = unicode(context_dictionary[key])
return 1
course_module = modulestore().get_course(course_id) if course_module is None: return Response(status=status.HTTP_404_NOT_FOUND)
from unit.modules.boto_vpc_test import BotoVpcTestCaseMixin
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
past_due_date_correct = CapaFactory.create(showanswer='correct_or_past_due', max_attempts="1", attempts="0", due=self.yesterday_str, correct=True) self.assertTrue(past_due_date_correct.answer_available())
eq_dir = np.dot(X.T[:n_active].T, least_squares) corr_eq_dir = np.dot(X.T[n_active:], eq_dir)
return ACCESS_DENIED if is_prerequisite_courses_enabled() else ACCESS_GRANTED
tot_bytes = win32api.GlobalMemoryStatusEx()['TotalPhys'] grains['mem_total'] = int(tot_bytes / (1024 ** 2))
return self.test_passed('.js-init-run')
raise CommandExecutionError( 'You must specify an egg for this editable' )
_ = lambda text: text
digits = load_digits() data = digits.data
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
request.session['ExternalAuthMap'] = eamap
time.sleep(5)
if not isinstance(ssh_gateway, str): return None
raise NotImplementedError("Specific Modulestores must implement get_definition_id")
ret['comment'] = ret['comment'] + ' and will be started' ret['result'] = None return ret
__builtin__.__salt__ = {}
n_estimators, n_classes = self.estimators_.shape leaves = np.zeros((X.shape[0], n_estimators, n_classes))
import salt.utils
world.clear_courses()
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if use in colors: for color in colors: if color == 'ENDC': continue colors[color] = colors[use]
if key.scope not in self.VALID_SCOPES: raise InvalidScopeError(key, self.VALID_SCOPES) if key.scope == Scope.content: self._load_definition()
if ret.get('Exists'): log.info('DSC Compile Config: {0}'.format(ret)) return ret
self.mu = sharedX(bias, name = 'mu')
return self.q(css=self._bounded_selector('.flag-role .msg-you')).present
return reverse_course_url('certificates.certificates_list_handler', self.course.id)
self.course.display_coursenumber = None updated_course = self.update_course(self.course, self.user.id)
config.groups[1].remove() config.groups[0].name = "First Group" config.save()
from salt.states import postgres_schema
from salt.exceptions import SaltInvocationError from salt.utils.reclass import ( prepend_reclass_source_path, filter_out_source_path_option, set_inventory_base_uri_default )
self.fit_, self.partial_fit_ = True, False return self._fit(X)
self.setup_logfile_logger() verify_log(self.config)
if not __opts__.get('state_verbose', False) and \ ret['result'] and not schanged: continue
from __future__ import absolute_import import datetime import logging
from salt.modules import drbd
rmtree(fs_root, ignore_errors=True)
'pidfile': str,
self.find_css('a.group-toggle').first.click()
X, y = check_X_y(X, y, ['csr', 'csc'])
if any(new_locator.block_id == child.block_id for child in new_parent.children): continue new_parent_cursor = 0 for old_child_loc in old_parent.children: if old_child_loc.block_id == draft_location.block_id:
return getattr(request, 'is_from_logout', False)
from __future__ import absolute_import
cauth = EmbargoedCourse(course_id=course_id, embargoed=True) cauth.save()
from salt.states import winrepo
y = 0.5 * X.ravel()
return '{}{:02d}'.format(block_type, num)
if i + 1 == len(course_keys): self.assertTrue(badge_class.get_for_user(user)) else: self.assertFalse(badge_class.get_for_user(user))
pass
self._check_linkedin_visibility(True)
if add: auth.add_users(caller, CourseCreatorRole(), user) else: auth.remove_users(caller, CourseCreatorRole(), user)
self.assertIn("Some Rights Reserved", self.lms_courseware.course_license)
angle = 0.0 perplexity = 10 n_samples = 100 for n_components in [2, 3]: n_features = 5 degrees_of_freedom = float(n_components - 1.0)
return start(name)
return self.q(css='#dashboard-search-results')
super(CoachAccessTestCaseCCX, cls).setUpClass() cls.course = CourseFactory.create()
from __future__ import absolute_import
if rest.endswith('?raw'): return original
train_composite = Train(shared_dataset, mlp_composite, SGD(0.1, batch_size=5, monitoring_dataset=shared_dataset)) train_composite.algorithm.termination_criterion = EpochCounter(1) train_composite.main_loop()
mailing_address_label = _(u"Mailing address")
self.course = CourseFactory.create( org=org, number=course_number, run=course_run )
result = self.get_result(allow_cache_miss) self.verify_result_with_val_profile(result)
G_iso = neighbors.kneighbors_graph(clf.embedding_, n_neighbors, mode='distance').toarray()
for xblock_name in self.XBLOCK_NAMES: self.check_event_response_by_key('flag_resource', resource, 'reason', 'reason 0', xblock_name)
with storebuilder.build() as (__, store): course1 = CourseFactory.create(modulestore=store) course2 = CourseFactory.create(modulestore=store)
import logging
self.problem_page.q( css='div.problem input.ctinput[type="text"]' ).nth(input_num).fill(value)
from salt.states import mysql_grants
Z, (pi, W_sr, L, b, a) = \ self._posterior_mode(K, return_temporaries=True)
self.assertEqual(resp.data, {"state": desired_state})
sequential = self.store.create_child( self.user_id, chapter.location, 'sequential', block_id='subsection_one' ) self.store.publish(sequential.location, self.user_id)
mock_refund_seat.reset_mock() self.send_signal(skip_refund=True) self.assertFalse(mock_refund_seat.called)
from __future__ import division
if '@' not in snapshot: ret['result'] = False ret['comment'] = 'invalid snapshot name: {0}'.format(snapshot)
response.data["current_page"] = self.page.number
xblocks = self.course_fixture.get_nested_xblocks(category="vertical") for index in range(num_units): self._bookmark_unit(xblocks[index].locator)
dashboard = DashboardPage(self.browser) dashboard.wait_for_page() return dashboard
if ext == '': subfiles = os.listdir(fpath) for suffix in suffix_order: if '' == suffix:
import logging import re
import salt.ext.six as six
self.user = UserFactory.create(username=self.USERNAME, password=self.PASSWORD) self.user.profile.name = self.USER_FULL_NAME self.user.profile.save()
X = np.ones((5, 10))
with translation.override("fr"):
self.assertEqual(response.status_code, 400)
comps = member.path.split('/') if len(comps) > 1 and comps[0] == comps[1]: member.path = '/'.join(comps[1:])
from __future__ import absolute_import from datetime import datetime from dateutil.relativedelta import relativedelta import json import pprint import tempfile
return cls.objects.filter(invoice__isnull=False, course_id=course_id)
name = ET.SubElement(content, 'name') name.text = vm_['name']
#epub_scheme = ''
from __future__ import absolute_import
PACKAGED_FOR_SALT_SSH_FILE = os.path.join(os.path.abspath(SETUP_DIRNAME), '.salt-ssh-package') PACKAGED_FOR_SALT_SSH = os.path.isfile(PACKAGED_FOR_SALT_SSH_FILE)
Language = namedtuple('Language', 'code name')
assert_raises(ValueError, plot_partial_dependence, clf, X, [0])
user = self.create_user_and_enroll('verified') self.add_verification_status(user, VerificationStatus.DENIED_STATUS)
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
if self.act_enc is None: act_enc = lambda x: x else: act_enc = self.act_enc return act_enc(self._mappings(inputs))
MobileApiConfig(video_profiles="youtube,mobile_high").save()
from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.modules.dockerng import ( CLIENT_TIMEOUT, STOP_TIMEOUT, VALID_CREATE_OPTS, _validate_input, _get_repo_tag ) import salt.utils import salt.ext.six as six
module = CapaFactory.create(rerandomize=rerandomize, done=True)
try: open(libcuda_convnet_so).close() return True except IOError: return False
self.assertTrue(getattr(vertical, "is_draft", False))
rotation = np.zeros((n_components, n_components)) rotation[:, 0] = vectors[random_state.randint(n_samples), :].T
cmd = __salt__['cmd.run_all']('racadm {0} {1}'.format(command, modswitch))
noise = rng.randn(*X.shape) / 100 X_reembedded = clf.transform(X + noise) assert_less(linalg.norm(X_reembedded - clf.embedding_), tol)
page = DashboardPage(self.browser) page.wait_for_page() self.assertIn( 'The course you are looking for is closed for enrollment', page.banner_text )
is_oneshot = True
rec_check = records[tb_offset:] try: rname = rec_check[0][1] if rname == '<ipython console>' or rname.endswith('<string>'): return rec_check except IndexError: pass
signal_handler.send.assert_called_with('course_published', course_key=course.id)
self.assertIs(VerificationDeadline.deadline_for_course(self.course.id), None)
self._bias_switch = True
import salt.ext.six as six
return {"course": unicode(normalized_structure_key), "org": normalized_structure_key.org}
if source_item.has_children and not children_handled: dest_module.children = dest_module.children or [] for child in source_item.children: dupe = _duplicate_item(dest_module.location, child, user=user)
mock_tracker.assert_any_call( event_name, kwargs, )
def __init__(self): super(MongoBulkOpsRecord, self).__init__() self.dirty = False
block_path = course_export_dir if draft: block_path = os.path.join(block_path, 'drafts') return os.path.join(block_path, block_type)
data = data.copy()
return models.Application.objects.get(**filters)
MEDIA_ROOT = ENV_TOKENS.get('MEDIA_ROOT', MEDIA_ROOT) MEDIA_URL = ENV_TOKENS.get('MEDIA_URL', MEDIA_URL)
from salt.modules import sysmod
with warnings.catch_warnings(record=True) as recorded_warnings: kwargs_warn_until(
self.make_course(pdf_textbooks=[PDF_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('pdf_book', book_index=0, chapter='fooey', page='xyzzy')
from __future__ import absolute_import
from __future__ import absolute_import
return service
return _("All learners")
import salt.utils
try: instance.handle_ajax(dispatch, data) instance.save() except: log.exception("error processing ajax call") raise
clf = GridSearchCV(clf, {'anova__percentile': [5, 10, 20]}, cv=cv)
with check_mongo_calls(max_find.pop(0), max_send): self.assertFalse(self.store.has_item(self.fake_location))
checkpoint.add_verification_attempt(self.attempt)
if requesting_user.username != username: if not requesting_user.is_staff or not allow_staff: raise UserNotAuthorized()
log = logging.getLogger(__name__)
page_size = TEAM_MEMBERSHIPS_PER_PAGE
num_examples = 40 theano_rng = MRG_RandomStreams(2012+11+1)
query = X[rng.randint(0, n_samples)].reshape(1, -1)
e = np.zeros((n_samples, convergence_iter))
return False
if isinstance(mine_args, dict): self.args = [] self.kwargs = mine_args elif isinstance(mine_args, list): self.args = mine_args self.kwargs = {}
pass
raise NotImplementedError
pyenv.__grains__ = {} pyenv.__salt__ = {}
import os import datetime import yaml import zmq from collections import namedtuple
url = BASE_URL + '/dashboard/programs/123/program-name/' def is_browser_on_page(self): return self.q(css='.js-program-details-wrapper').present
import os
v, W = self._cov_eigen(X)
self._assert_no_redirect(self.course_with_bogus_survey)
__virtualname__ = 'pgjsonb'
if not settings.FEATURES.get('EMBARGO'): raise MiddlewareNotUsed()
return None if value == "" else value
msg = "Error in problem xml include: %s" % ( etree.tostring(next_include, pretty_print=True)) system.error_tracker(msg)
wi = W_list[i] hi_mean += T.dot(samples[i-1], wi) * beta
try:
self.fed.append('&%s;' % name)
initialize_permissions(new_course.id, user) return new_course
query = self.q(css='.u-field-{}'.format(field_id)) return query.text[0] if query.present else None
if self.__no_lock: self.__no_lock = not self.__refresh
if current_state == 'off': ret['result'] = True ret['comment'] = 'System already in the correct state' return ret
self.store.publish(vertical.location, self.user_id) self.assertFalse(self._has_changes(vertical.location))
THIRD_PARTY_AUTH_BACKENDS = ["google-oauth2", "facebook"] THIRD_PARTY_AUTH_PROVIDERS = ["Google", "Facebook"]
result = first.copy() result.update(second) return result
if 'SYN' in flags and len(flags) == 1: return 100 elif 'FIN' in flags: return 120
return _get_enabled_disabled("true")
from salt.cloud.clouds import dimensiondata from salt.exceptions import SaltCloudSystemExit
CourseEnrollmentFactory( user=self.user, is_active=True, mode=mode, course_id=unicode(self.course.id), )
from salt.states import saltmod
return cls.objects.filter( user=user, status="approved", created_at__gte=(earliest_allowed_date or cls._earliest_allowed_date()) ).exists()
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
from __future__ import absolute_import
service = MockServices() if self.flag == 1: service.id = 'asd' return [service] return [service]
if prewarm == "auto": prewarm = not use_shared_mem forward_reduce_ndarray = ArrayMemmapReducer( max_nbytes, pool_folder, mmap_mode, verbose, prewarm=prewarm) forward_reducers[np.ndarray] = forward_reduce_ndarray forward_reducers[np.memmap] = reduce_memmap
from salt.states import mount import os
clf_unconstrained = LassoCV(n_alphas=3, eps=1e-1, max_iter=max_iter, cv=2, n_jobs=1) clf_unconstrained.fit(X, y) assert_true(min(clf_unconstrained.coef_) < 0)
if properties: optlist = [] for prop in properties.keys():
if coupon_redemption.exists(): coupon_codes = [redemption.coupon.code for redemption in coupon_redemption] order_item_dict.update({'coupon_code': ", ".join(coupon_codes)})
assert_array_almost_equal((tfidf ** 2).sum(axis=1), [1., 1., 1.])
pass
self.assertTrue(hasattr(user, 'profile'))
self.fitted = False
X = self._check_non_neg_array(X, "LatentDirichletAllocation.score") doc_topic_distr = self.transform(X) score = self._approx_bound(X, doc_topic_distr, sub_sampling=False) return score
epoch_num = 1
split_test = self._update_partition_id(0) self.assertEqual(2, len(split_test.children)) self.assertEqual(initial_group_id_to_child, split_test.group_id_to_child)
pmap[alias][driver] = []
return self.browser.execute_script("return $('{}').is(':focus')".format(selector))
try: json = self.module_data[location] except KeyError: json = self.modulestore._find_one(location) self.module_data[location] = json return json
from __future__ import absolute_import import glob import sys import os
self._pid = os.getpid() self._sigterm_handler = signal.getsignal(signal.SIGTERM) self._restart_processes = True
return self.q(css=TEAMS_HEADER_CSS + ' .page-description')[0].text
chapter = self.store.get_item(self.chapter_loc) self.assertIn(self.seq_loc, chapter.children)
mock = MagicMock(return_value=True) with patch.object(composer, '_valid_composer', mock): self.assertRaises(SaltInvocationError, composer.install, None)
if self._match_pattern(handlers_list): return else: self.send_response(404, content="404 Not Found")
return self.metric == 'precomputed'
if isinstance(self.opts['peer_run'][match], list): perms.update(self.opts['peer_run'][match])
self.assertIsNone( GeneratedCertificate.certificate_for_student(students[4], self.course.id) )
if child.location in prob_grade_distrib:
log = logging.getLogger(__name__)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
original_course = self.source_modulestore.get_course(source_course_key, **kwargs) if original_course is None: raise ItemNotFoundError(unicode(source_course_key))
if kernel != kernel_white: K1 = kernel(X) K2 = pairwise_kernels(X, metric=kernel) assert_array_almost_equal(K1, K2)
#add_module_names = True
ret = self.run_function( 'state.sls', mods='issue-1879.step-1', timeout=120 ) self.assertSaltTrueReturn(ret)
return StackedBlocks(layers)
return __virtualname__
if bucket_size is None: bucket_size = _size_map(_fssys('bucket_size'))
self.current_view = self.MAPPING["search"](self.browser) if text.strip(): self.current_view.wait_for_page()
import integration import salt.utils
action_name = ugettext_noop('cohorted') task_fn = partial(cohort_students_and_upload, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
raids = __salt__['raid.list']() if raids.get(name): ret['comment'] = 'Raid {0} already present'.format(name) return ret
if valid_commands: if cmd not in valid_commands: target_room.message('Using {0} is not allowed.'.format(cmd)) return
course_item.tabs = new_tab_list modulestore().update_item(course_item, request.user.id)
return self._get_sampling_pos(model, X, Y), OrderedDict()
self.assertFalse(self.store.has_changes(self.store.get_item(self.course.location)))
if uid is None: user = list_users() uid = user[username]['index']
from __future__ import absolute_import, print_function import logging import os
if 'remove_{0}'.format(instance) not in vmconfig['changed']: vmconfig['changed']['remove_{0}'.format(instance)] = []
ret['changes'] = exc.info.get('changes', {}) ret['comment'] = exc.strerror_without_changes
if course is None: course = modulestore().get_course(course_id, depth=0)
from salt.modules import win_dism as dism
self.assertIn( 'Invalid String Value for Enabled', self.run_function('system.set_remote_login', ['spongebob']))
return self
return professional_mode if professional_mode else verified_mode
from __future__ import absolute_import, print_function import os import tempfile import time
first_request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO["username"])
service = _get_service(name) label = service['plist']['Label']
if new_datetime is not None: self.expiration_datetime_is_explicit = True self._expiration_datetime = new_datetime
clf = svm.LinearSVC(random_state=0).fit(X, Y)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
transform = AdditiveChi2Sampler(sample_steps=3) X_trans = transform.fit_transform(X) Y_trans = transform.transform(Y)
_config_filename_ = 'master'
xx, yy = np.meshgrid(np.linspace(-4, 5, 500), np.linspace(-4, 5, 500))
self.total_violations = 0 self.totals_by_rule = dict.fromkeys( [rule.rule_id for rule in Rules.__members__.values()], 0 )
n_samples, self.n_features_ = X.shape is_classification = isinstance(self, ClassifierMixin)
enable_spectral_norm = False
data = query_instance(vm_)
return modulestore().db_connection.get_structure( course.location.as_object_id(course.location.version_guid) )
if drop and method == 'lasso':
time.sleep((2 ** (RoleRetries - retry)) + (random.randint(0, 1000) / 1000)) continue
from salt.states import boto_iam_role
return uid
if isinstance(cherrypy.serving.request.lowstate, list): creds = cherrypy.serving.request.lowstate[0] else: creds = cherrypy.serving.request.lowstate
from lms.envs.dev import (WIKI_ENABLED)
created_courses = [] for course_number in course_numbers: created_courses.append(CourseFactory.create(number=course_number))
resources = find_release_resources() sh("i18n_tool transifex push " + " ".join(resources))
index = self.get_course_index(course_key)
expected_grades = [self._format_user_grade(header_row, **user_grade) for user_grade in user_grades] self.verify_rows_in_csv(expected_grades)
CATEGORY = "vertical" DATA = '' METADATA = {} MODEL_DATA = {'data': '<some_module></some_module>'}
current_proba = _samme_proba(estimator, n_classes, X)
num_optout = len(optouts) to_list = [recipient for recipient in to_list if recipient['email'] not in optouts] return to_list, num_optout
import salt.utils.thin
SORT_REVISION_FAVOR_PUBLISHED = ('_id.revision', pymongo.ASCENDING)
students = User.objects.filter(courseenrollment__course_id=course_key) if len(students) == 0: self.stdout.write("No students enrolled in %s" % course_key.to_deprecated_string()) return
self.assertFalse(glusterfs.delete_volume('Newvolume3'))
credit_api.update_credit_request_status(uuid, self.PROVIDER_ID, status)
import salt.loader
return "Oh yes!"
self.kernel = kernel self.gamma = gamma self.n_neighbors = n_neighbors
X, y = iris.data, iris.target.astype(np.float64) n_samples, n_features = X.shape n_classes = len(np.unique(y))
random_state = check_random_state(random_state) r = random_state.randint(0, n_samples_abnormal, 3377) abnormal_samples = abnormal_samples[r] abnormal_targets = abnormal_targets[r]
assert len(state) == 2 if isinstance(coeffs, str): coeffs = float(coeffs) assert isinstance(coeffs, float) _, state = state state = [state] coeffs = [coeffs]
if matched == ';': return ';;' elif matched == '/': return ';_' else: return matched
answer_correct = CapaFactory.create(showanswer='correct_or_past_due', max_attempts="1", attempts="0", due=self.tomorrow_str, correct=True) self.assertTrue(answer_correct.answer_available())
return _error(ret, u_check)
import salt.utils from salt.exceptions import CommandExecutionError
print _pep8_output(count, violations_list)
from __future__ import absolute_import import copy import errno import fnmatch import glob import hashlib import logging import os import shutil from datetime import datetime from salt.exceptions import FileserverConfigError
self.submit_question_answer('p2', {'2_1': u'Incorrect'})
from __future__ import absolute_import import os import traceback
containers = [__salt__['dockerng.inspect_container'](c)['Id'] for c in containers] networks = __salt__['dockerng.networks'](names=[name]) if networks:
x = _ravel(x) return np.dot(x, x)
if created: enrollment.mode = CourseMode.DEFAULT_MODE_SLUG enrollment.is_active = False enrollment.save()
multi_target_forest.fit(X, y)
monitoring_dataset = DenseDesignMatrix(X=X, y=Y)
self.assertIsNone(self.profile.age)
for certificate in certificates: certificate['is_active'] = is_active break
return self.conditional.log_conditional(X, theta)
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
batch_size = old_batch_size
normalizer = (1.0 - pow(self.gamma, self.n_observations - self.minibatch_index)) /\ (1.0 - self.gamma)
self._check_results(self.staff, set(range(len(self.parents_map))), {}, transformers)
if self.key_betas is not None and \ ki < len(self.key_betas) and \ bp1 == self.key_betas[ki]:
folds_iter = self.iterator(mode="sequential", num_batches=nfolds) folds = list(folds_iter) return folds
if error: ret['changes'] = {} ret['result'] = False ret['comment'] = str(error)
return textwrap.dedent("\n".join(lines)).split("\n")
variables, functions = add_defaults(variables, functions, case_sensitive)
response = self.client.get(self.url) self.assertTrue(self.e_commerce_link in response.content) self.assertFalse('Coupons List' in response.content)
user_partitions = UserPartitionList( help=_("The list of group configurations for partitioning students in content experiments."), default=[], scope=Scope.settings )
return self._decision_function(X)
'session_inactivity_timeout.middleware.SessionInactivityTimeout',
else: assert self.line_search_mode == 'exhaustive'
result = query(params) return result['InstanceId']
)
SEARCH_ENGINE = "search.tests.mock_search_engine.MockSearchEngine"
msg += _('Failed in authenticating {username}, error {error}\n').format( username=euser, error=err ) continue
graders = _filter_entrance_exam_grader(graders)
os.environ.get('TMPDIR', tempfile.gettempdir()) if salt.utils.is_darwin() else '/tmp'
HAS_FCNTL = False
CourseEnrollment.unenroll(user, course_id) self.assert_no_events_were_emitted()
del params["password"] assert_password_error("A valid password is required")
'__salt__': __salt__, '__pillar__': __pillar__, '__grains__': __grains__
self.advanced_settings_page.visit() self.advanced_settings_page.set_values(self.course_advanced_settings) self.advanced_settings_page.wait_for_ajax()
page_input = self.q(css="#page-number-input")[0] page_input.click() page_input.send_keys(str(number)) page_input.send_keys(Keys.RETURN) self.wait_until_ready()
self.user.is_staff = True self.assertTrue(user_has_role(self.user, CourseCreatorRole()))
logger.debug('Websocket already connected, returning') return
self.addCleanup(self._mock_paver_needs.stop) self.addCleanup(os.remove, self.f.name)
self.login_page.visit().password_reset(email=email)
request = RequestFactory().get('/') request.user = student return request
stream_stdout=None, stream_stderr=None, ):
(32, False, True, u"True"),
pass
profile_str = 'ec2-config' providers = self.run_cloud('--list-providers')
current_time = datetime.datetime.now(UTC()) if override_time is not False: current_time = override_time
self.xblock.location = Location("org", "import", "run", "category", "stubxblock")
course_mode = CourseMode.DEFAULT_SHOPPINGCART_MODE
staff = AdminFactory(password=self.password) self.client.logout() self.client.login(username=staff.username, password=self.password) self.assert_valid_get_response(self.eligibility)
for mode in available_modes: CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
CourseRerunState.objects.failed(course_key=destination_course_key) logging.exception(u'Course Rerun Error')
from salt.states import boto_secgroup from salt.utils.odict import OrderedDict
fake_course_image = 'sample_image.png' patched_create_thumbnail.side_effect = Exception("Kaboom!")
self.sequential.children = [self.vertical.location] self.sequential = self.store.update_item(self.sequential, ModuleStoreEnum.UserID.test)
rng = np.random.RandomState(42) all_data, _ = make_blobs(n_samples=n_samples_max + n_queries, n_features=n_features, centers=n_centers, shuffle=True, random_state=0) queries = all_data[:n_queries] index_data = all_data[n_queries:]
self._credit_provider_callback(request_uuid, 'approved') self._assert_request_status(request_uuid, "approved")
params = {'Action': 'CancelSpotInstanceRequests', 'SpotInstanceRequestId.1': sir_id} data = aws.query(params, location=location, provider=provider, opts=__opts__, sigver='4')
unit = self.go_to_unit_page() test_block = unit.xblocks[1] title_on_unit_page = test_block.name container = test_block.go_to_container() self.assertEqual(container.name, title_on_unit_page)
from __future__ import absolute_import
if survey.utils.must_answer_survey(course, request.user): return redirect(reverse('course_survey', args=[unicode(course.id)]))
if CourseMode.is_white_label(course_id): course_mode = CourseMode.DEFAULT_SHOPPINGCART_MODE_SLUG else: course_mode = None
return self.child_at(index)
return iter(sorted(self._stacks.keys(), key=lambda stack: (self.stack_calls(stack), stack), reverse=True))
statuses = api.get_credit_requests_for_user(self.USER_INFO["username"]) self.assertEqual(statuses[0]["status"], expected_status)
phase_variable = 'PYLEARN2_TRAIN_PHASE' phase_value = 'phase%d' % (number + 1) os.environ[phase_variable] = phase_value
course_query = self._course_key_to_son(course_key) self.collection.remove(course_query, multi=True) self.delete_all_asset_metadata(course_key, user_id)
exc_info_on_loglevel=logging.DEBUG
ret['result'] = __salt__['reg.set_value'](hive=hive, key=key, vname=vname, vdata=vdata, vtype=vtype, use_32bit_registry=use_32bit_registry)
self.assertEqual(k_args, tuple()) self.assertEqual( k_kwargs.get('url'), urlparse.urljoin(self.course.ccx_connector, ccxconapi.CCXCON_COURSEXS_URL) )
return (requested_fields or set()) | {'type', 'display_name'}
try: user.email_user( subject, message, theming_helpers.get_value('default_from_email', settings.DEFAULT_FROM_EMAIL) )
import re import socket
return True
self.cmap.set_overall_message("Test message")
descending_grades = sorted(grade_cutoffs, key=lambda x: grade_cutoffs[x], reverse=True) for possible_grade in descending_grades: if percentage >= grade_cutoffs[possible_grade]: letter_grade = possible_grade break
with self.assertNumQueries(1): RestrictedCourse.is_restricted_course(course_id) RestrictedCourse.is_disabled_access_check(course_id)
import os import stat
self._create_course_unit(subtitles=True) self.edit_component() self.video.upload_transcript('english_single_transcript.srt')
certs_api.set_cert_generation_enabled(self.course.id, False) self._assert_enable_certs_button_is_disabled()
self.runtime.set('location', self.location.to_deprecated_string())
return self._get_head(xblock, ModuleStoreEnum.BranchName.published) is not None
from __future__ import absolute_import import logging
estimator.fit(X_train)
course_location = locator.CourseLocator('Org1', 'Course1', 'Run1') self.course, self.enrollment = self._create_course_and_enrollment(course_location)
return ['Test Section {}'.format(index), 'Test Subsection {}'.format(index), 'Test Problem {}'.format(index)]
rval_axes = self.output_axes assert len(rval_axes) == 4
for k, v in six.iteritems(self.loader._dict): self.assertTrue(k.startswith(self.module_name))
from salt.exceptions import SaltInvocationError import salt.utils
return super(NullBackend, self).get_value_for_org(org, val_name, default)
PROFILE = logging.PROFILE = 15 TRACE = logging.TRACE = 5 GARBAGE = logging.GARBAGE = 1 QUIET = logging.QUIET = 1000
from __future__ import absolute_import import salt.utils from datetime import datetime import logging import time
class_name = class_name.encode('utf-8')
self.enrollment = CourseEnrollment.enroll(self.user, self.course_id, mode=CourseMode.VERIFIED)
exc_info_on_loglevel=logging.DEBUG
from __future__ import unicode_literals
course = def_ms.courses.get(course_path, None)
incorrect_jid_length = 2012 self.assertEqual(utils.jid.jid_to_time(incorrect_jid_length), '')
syncing.remove(name) continue
library2_key = self._create_library(library="lib2") self._login_as_non_staff_user()
patcher = mock.patch('terrain.stubs.xqueue.post') self.post = patcher.start() self.addCleanup(patcher.stop)
import salt.client import salt.config import salt.loader import salt.output import salt.pillar import salt.runner
return 'latex' not in template['template_id'] or course.use_latex_compiler
self.wait_for_field(field_id) query = self.q(css='.u-field-{} .u-field-title'.format(field_id)) return query.text[0] if query.present else None
sess_cookies = None
child = self.store.get_item(locations['child']) child.display_name = 'Changed Display Name' self.store.update_item(child, self.user_id)
from __future__ import absolute_import import os
ide_controllers[device.key] = len(device.device)
AccessTestData(partition_groups={1: 1, 2: 2}, xblock_access={1: [3]}, merged_parents_list=[{1: {1}}]), AccessTestData(partition_groups={1: 1, 2: 2}, xblock_access={1: [2]}, merged_parents_list=[{1: {1}}]),
"corruptor" : *corr
X = make_low_rank_matrix(n_samples=n_samples, n_features=n_features, effective_rank=rank, tail_strength=0.0, random_state=0) assert_equal(X.shape, (n_samples, n_features))
list_maintenance_windows = salt.utils.alias_function(list_windows, 'list_maintenance_windows')
from __future__ import absolute_import import os import pwd import grp import random
for group in self.option_groups: for option in group.option_list: if option.dest is None: continue
rng = np.random.RandomState(0) X = rng.normal(size=(10, 4)) y = multioutput_estimator_convert_y_2d(name, X[:, 0]) regressor = Regressor()
n_responses = 3 y = rng.randn(n_samples, n_responses) r.fit(x, y) assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))
return
port: 8000 address: 0.0.0.0 backlog: 128 ssl_crt: /etc/pki/api/certs/server.crt ssl_key: /etc/pki/api/certs/server.key debug: False disable_ssl: False webhook_disable_auth: False cors_origin: null
clf = ElasticNet() clf.coef_ = [1, 2, 3]
blocks = _get_course_date_summary_blocks(course, user) return '\n'.join( b.render() for b in blocks )
assert isinstance(model.hidden_layers[-1], Softmax) layer_to_clamp[model.hidden_layers[-1]] = True layer_to_pos_samples[model.hidden_layers[-1]] = Y hid = model.hidden_layers[:-1]
from __future__ import absolute_import
'update_url': (bool, string_types),
header = None rows = [] err_rows = [["id", "username", "error_msg"]] current_step = {'step': 'Calculating Grades'}
if conf.get('normalize', True): return sharedX(data_x, borrow=True) else: return theano.shared(theano._asarray(data_x), borrow=True)
re.compile(r'^Pages \|'): [ 'js/models/explicit_url', 'coffee/src/views/tabs', 'xmodule', 'coffee/src/main', 'xblock/cms.runtime.v1' ],
class FakeWriter(object): def __init__(self): self.output = ""
if hasattr(self, 'has_targeted'): return
expected_callback_dict = { 'xqueue_header': expected_header, 'xqueue_body': expected_body, }
check_array(X, accept_sparse='csr') return self
from __future__ import absolute_import import logging
import salt.ext.six as six try: import boto import boto3 from boto.exception import BotoServerError HAS_BOTO = True except ImportError: HAS_BOTO = False
tab2_css = 'div.ui-tabs-panel#tab2' world.wait_for_visible(tab2_css)
if not enabled: ret['result'] = True ret['comment'] = enabled_msg ret['changes'].update(enabled_changes) return ret
return self.wrap_xblock(block, view_name, Fragment(), context)
X_embedded = 1e-4 * random_state.randn(n_samples, self.n_components)
self.position = position
return md5(key + md5(key).hexdigest()).hexdigest()[:AES.block_size]
self.create_random_units(False, conditional_loc)
user_list[0].course_groups.remove(*cohort_list) assert_events("removed", user_list[:1], cohort_list) mock_tracker.reset_mock()
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
if guid is None: return 'No GUID Specified'
import salt.exceptions import salt.ext.six as six import salt.utils
continue
res = grainsmod.filter_by(dict2, grain='xxx', default='xxx', base='default') self.assertEqual(res, dict2['default'])
if mp is not None: try: from multiprocessing.context import assert_spawning except ImportError: from multiprocessing.forking import assert_spawning else: assert_spawning = None
SEARCH_SKIP_ENROLLMENT_START_DATE_FILTERING = True
context['show_homepage_promo_video'] = microsite.get_value('show_homepage_promo_video', False)
NEVER = lambda x: False ALWAYS = lambda x: True
boston = datasets.load_boston() boston.data, boston.target = shuffle(boston.data, boston.target, random_state=rng)
for student in students[2:7]: CertificateWhitelistFactory.create(user=student, course_id=self.course.id, whitelist=True)
thread_author = getattr(self, thread_author) self._setup_mock(
CourseEmailTemplate = apps.get_model("bulk_email", "CourseEmailTemplate") if not CourseEmailTemplate.objects.exists(): call_command("loaddata", "course_email_template.json")
rh_service.__salt__ = {}
index = counter[chosen] minibatch = self.dataset[chosen][ index * self.batch_size:(index + 1) * self.batch_size ] counter[chosen] = (counter[chosen] + 1) % self.limit[chosen] yield minibatch
EDX_XML_PARSER = XMLParser(dtd_validation=False, load_dtd=False, remove_comments=True, remove_blank_text=True, encoding='utf-8')
salt.utils.fopen(master_config, 'w').write( 'blah: false\n' 'root_dir: {0}\n' 'log_file: {1}\n'.format(tempdir, master_config) )
else: if bootstrap: indices = random_state.randint(0, n_samples, max_samples) else: indices = sample_without_replacement(n_samples, max_samples, random_state=random_state)
return self._residues
for candidate in candidates: if system.resources_fs.exists(candidate): filepath = candidate break
if value is None: return ret
encoder=CourseSettingsEncoder
def __init__(self, W): self.W = W super(ModelWithW, self).__init__()
grinfo = next(iter(x for x in grp.getgrall() if x.gr_name == name))
from salt.states import virt import salt.utils
module = CapaFactory.create(attempts=attempts, max_attempts=attempts) self.assertFalse(module.should_show_check_button())
if __opts__['test']: ret['result'] = None return ret
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
if is_pointer_tag(node): definition['filename'] = [filepath, filepath]
remove_master_course_staff_from_ccx( self.course, self.ccx_locator, self.ccx.display_name, send_email=True ) self.assertEqual(len(outbox), len(list_staff_master_course) + len(list_instructor_master_course))
course_one_team.add_user(self.user)
return datetime.datetime.strptime(date_input.strip(), "%Y-%m-%d").replace(tzinfo=pytz.UTC)
affiliate_id = request.COOKIES.get(settings.AFFILIATE_COOKIE_NAME) if user is not None and affiliate_id is not None: UserAttribute.set_user_attribute(user, settings.AFFILIATE_COOKIE_NAME, affiliate_id)
signal.signal(signal.SIGINT, self._handle_signals)
if should_force_account_creation(): return dispatch_to_register() return dispatch_to_login()
block_type = 'html' for idx in xrange(0, 16): block_id = _make_block_id(block_type, idx) self.all_units.append((block_type, block_id))
if isinstance(account_ou, str): account_ou = account_ou.split('\\') account_ou = ''.join(account_ou)
import salt.config import salt.auth import salt.client import salt.runner import salt.wheel import salt.utils import salt.syspaths as syspaths from salt.utils.event import tagify from salt.exceptions import EauthAuthenticationError
import salt.ext.six as six
assert_array_almost_equal(linkage_X_ward[:, 2], out_X_unstructured[4]) assert_array_almost_equal(linkage_X_ward[:, 2], out_X_structured[4])
second_attempt = SoftwareSecurePhotoVerification.objects.create(user=user)
if kwargs.get('sfun') in ['wait_rm_key', 'wait_rm']: return rm_( name, kwargs.get('profile'))
update_linode(node_id, update_args={'Label': name}) log.debug('Set name for {0} - was linode{1}.'.format(name, node_id))
return tenant_id
thresholds_option=thresholds_option
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
test_data = state_run['cmd_|-test_non_failing_state_|-echo "Should not run"_|-run']['comment'] expected_result = 'State was not run because onfail req did not change' self.assertIn(expected_result, test_data)
FEATURES['ENFORCE_PASSWORD_POLICY'] = False FEATURES['ENABLE_MAX_FAILED_LOGIN_ATTEMPTS'] = False FEATURES['SQUELCH_PII_IN_LOGS'] = False FEATURES['PREVENT_CONCURRENT_LOGINS'] = False FEATURES['ADVANCED_SECURITY'] = False PASSWORD_MIN_LENGTH = None PASSWORD_COMPLEXITY = {}
re.compile(r'^Course Outline \|'): [ "js/base", "js/models/course", "js/models/location", "js/models/section"],
go_to_section("data_download")
self.assertEqual(item.title, title) self.assertEqual(item.subtitles, subtitles)
from __future__ import absolute_import, print_function import logging import logging.handlers import time import datetime import socket import threading
import integration
new_message = ', '.join(str(arg) for arg in new_exc.args)
__proxyenabled__ = ['cisconso']
from __future__ import absolute_import import time
__opts__.get( 'log_level', 'error' )
if x_auth: cherrypy.request.cookie['session_id'] = x_auth
for lib in self.list_libraries(): if all([lib[key] == kwargs[key] for key in kwargs]): return True return False
self.assertEqual(len(email_info), 1)
self.service.set_credit_requirement_status( self.user.id, self.course.id, 'grade', 'grade' )
from __future__ import absolute_import
from __future__ import absolute_import, print_function import os import copy import json import stat import shutil import fnmatch import hashlib import logging
([], 'credit'),
self.assertIsNone(self.profile.level_of_education_display)
'ADVANCED_SECURITY': False,
from salttesting import TestCase from salttesting.mock import patch, MagicMock from salttesting.helpers import ensure_in_syspath
from __future__ import absolute_import
self.check_emails_sent(50, task_history_request)
resp = self.client.get_html(url) self.assertEquals(resp.status_code, 404)
self.store.publish(problem.location, self.user.id)
return not self.is_private
initializable_fields = updatable_fields + ['thread_type', 'context']
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self.verified_course_mode = CourseMode( course_id=self.verified_course_key, mode_slug=CourseMode.HONOR, mode_display_name="honor cert", min_price=self.cost ) self.verified_course_mode.save()
try: groupSID, domainName, objectType = win32security.LookupAccountName(None, pgroup) except pywinerror: err += 'Group does not exist\n'
from salt.utils.schema import (Schema, StringItem, ArrayItem, OneOfItem)
test_success = win_mod_reg.delete_key_recursive('HKEY_LOCAL_MACHINE', subkey) self.assertTrue(test_success)
kl_divergence = 2.0 * np.dot(P, np.log(P / Q))
assert_true(np.all(K > 0)) assert_true(np.all(K - np.diag(np.diag(K)) < 1))
with salt.utils.fopen(proc_fn, 'w+b') as fp_: fp_.write(salt.payload.Serial(self.opts).dumps(ret))
from salt.ext import six
del params["name"] assert_name_error("Your legal name must be a minimum of two characters long")
ret = 'present' if entry.match(line): lines.append(line) else: ret = 'change' lines.append(str(entry))
assert_raises(ValueError, model.fit, mat) continue
return (-2 * self.score(X).sum() + self._n_parameters() * np.log(X.shape[0]))
from . import signals
mixing = rng.randn(6, 2) m = np.dot(mixing, s)
self.notes_page.go_to_page(2) self._verify_pagination_info( notes_count_on_current_page=1, header_text='Showing 26-26 out of 26 total', previous_button_enabled=True, next_button_enabled=False, current_page_number=2, total_pages=2 )
channel = sc.server.channels.find(_m['channel'])
pass
from salttesting.helpers import ensure_in_syspath, expensiveTest
lib_key = LibraryLocator(org=org, library=library) if lib_key in self.mappings: raise DuplicateCourseError(lib_key, lib_key)
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
data = { "email": self.EMAIL, "password": self.PASSWORD, }
versions = get_course_versions(unicode(self.course.id)) new_draft_version = versions['draft-branch'] new_published_version = versions['published-branch']
inp = {} inp['default'] = 'default' inp['hostname'] = minion_id
if os_name == 'CentOS' \ and grains['osrelease'].startswith('5.'): target = target.replace('.i686', '.i386')
return [tuple(items.split("=")) for items in opt]
#html_additional_pages = {}
old_cwd = None
self.send_response(500, 'Bad Request: does not contain API key') self.send_header('Content-type', 'text/plain') self.end_headers() return False
for cls in [BernoulliNB, MultinomialNB, GaussianNB]: assert_raises(ValueError, cls().fit, X2, y2[:-1])
return self.q(css='.components-list li>a').text
from __future__ import absolute_import import logging import os import subprocess
@patch('salt.utils.which', lambda exe: None) def test_missing_binary_in_linux(self): self.assertTrue( salt.utils.which('this-binary-does-not-exist') is None )
return True
self._click_button('advanced_tab')
for train, test in cval.LabelKFold(labels, n_folds=n_folds): assert_equal(len(np.intersect1d(labels[train], labels[test])), 0)
return (floating_network, port)
perf_test = True
self.client.logout()
DEPRECATED_ADVANCED_COMPONENT_TYPES = []
link = utils.get_lms_link_for_item(location, True) self.assertEquals( link, "//preview.localhost/courses/mitX/101/test/jump_to/i4x://mitX/101/vertical/contacting_us" )
self.testing_course.enrollment_start = self.tomorrow self.testing_course.enrollment_end = self.nextday self.testing_course = self.update_course(self.testing_course, self.user.id)
DATADOG = AUTH_TOKENS.get("DATADOG", {}) DATADOG.update(ENV_TOKENS.get("DATADOG", {}))
if len(list_item.children) == 2: enum.append(list_item) list_item = nodes.list_item() list_item['classes'] = ['lit-item']
log = logging.getLogger(__name__)
'auth_tries': int,
return LibraryLocator.from_string(self.source_library_id)
'oauth2_provider',
self.assertTrue('Activate Course Enrollment' in response.content)
pred = pred.ravel() return 2.0 * (y - pred > 0.0) - 1.0
target_found = True
for key, val in data.iteritems():
while i > 1: p = parts.pop(0) i -= 1 popped.append(p)
choose_track_url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.get(choose_track_url)
tid = tid + random.choice(string.ascii_lowercase)
re.compile(r'^Advanced Settings \|'): [ "jquery", "js/base", "js/models/course", "js/models/settings/advanced", "js/views/settings/advanced", "codemirror"],
empty_distribution = grades.answer_distributions(self.course.id)
CommitOnSuccessManager.ENABLED = True OuterAtomic.ALLOW_NESTED = False OuterAtomic.atomic_for_testcase_calls -= 1 return wrapped_func(*args, **kwargs)
CourseEnrollment.enroll(self.user, self.course.id, mode="honor")
resource = {"id": self.non_existing_resource_id, 'reason': ''} self.check_event_response_by_http_status(test_case, resource, 400)
cmd = 'xar -x -f {0} {1}'.format(pkg, ' '.join(files)) __salt__['cmd.run'](cmd, cwd=temp_dir, output_loglevel='quiet')
resp = self.client.get(reverse('view_survey', args=['NonExisting'])) self.assertEquals(resp.status_code, 302)
order = np.argsort(categories) categories = categories[order] y = sp.csr_matrix(y[:, order])
for create_data, additional_data_to_expect in data: xblock_cache = XBlockCache.create(create_data) create_data.update(additional_data_to_expect) self.assert_xblock_cache_data(xblock_cache, create_data)
new_course = modulestore().create_course( org, number, run, user.id, fields=fields, )
log = logging.getLogger(__name__)
self._configure_testshib_provider() super(TestShibIntegrationTest, self).test_login()
sample_weight = (sample_weight * compute_sample_weight(self.class_weight, y))
from __future__ import absolute_import
service = MockServices() service.id = '005' service.name = name service.description = description service.type = service_type return service
course_listing = self.q(css=".course").filter(lambda el: course_name in el.text).results
EXPECTED_ITEMS = ['Test Problem 1', 'Test Problem 2', 'Test HTML']
guestfs.__salt__ = {}
THRESHOLDED_MULTILABEL_METRICS = [ "log_loss", "unnormalized_log_loss",
REQUIRE_DEBUG = False
actual_events = self.wait_for_events(event_filter={'event_type': event_type}, number_of_matches=1) self.assert_events_match(event_data, actual_events)
self._enable_cohorting() self._create_verified_cohort() self._enable_verified_track_cohorting() self.assertTrue(VerifiedTrackCohortedCourse.is_verified_track_cohort_enabled(self.course.id)) self._enroll_in_course()
save_path.replace('\\', r'\\')
assert_array_almost_equal(dist1, dist2)
if answers:
from salt.states import apache import salt.utils
location = self.problem_location(problem_url_name) modx_url = self.modx_url(location, "problem_get") resp = self.client.get(modx_url) return resp
meta = {} if user_info.profile.meta: meta = json.loads(user_info.profile.meta)
self.assertEqual(toy.graded, True)
updated_overview = CourseOverview.get_from_id(course.id) self.assertEqual(updated_overview.version, 10)
PYTHON_LIB_ZIP = "python_lib.zip"
if field_errors: raise AccountValidationError(field_errors)
return self._base * min(1, self._anneal_start / self._count)
actual_collection = get_edx_api_data(program_config, self.user, 'programs', cache_key=cache_key) self.assertEqual(actual_collection, expected_collection)
self.video.wait_for( lambda: (text in self.video.closed_captions_text), u'Closed captions contain "{}" text'.format(text), timeout=5 )
import integration
COURSE_CERT_AWARDED.send(**self.signal_kwargs) self.assertEqual(mock_is_certification_enabled.call_count, 1)
fields = self.q(css='div.problem div.capa_inputtype.textline input') fields = fields.nth(input_num) if input_num is not None else fields fields.fill(text)
estimator = MockImprovingEstimator(1) assert_raises(ValueError, learning_curve, estimator, X, y, exploit_incremental_learning=True)
return self._create_user(username, email, is_staff=True)
return etree.Element("annotationresponse")
import salt.utils from salt.exceptions import CommandExecutionError
course_keys = map(self._parse_course_key, args)
chisq = f_obs chisq -= f_exp chisq **= 2 chisq /= f_exp chisq = chisq.sum(axis=0) return chisq, special.chdtrc(k - 1, chisq)
__type__ = None __format__ = None _attributes = None __flatten__ = False
from __future__ import absolute_import
create_volume = volume_create
clf = LogisticRegression(random_state=0) clf.fit(X, Y1) clf.coef_[:] = 0 clf.intercept_[:] = 0 assert_array_almost_equal(clf.decision_function(X), 0)
render_kw_only_separator = False
self.assertEqual(len(self.certificates_page.certificates), 1) course_number = self.certificates_page.get_course_number() self.assertEqual(self.course_info['number'], course_number)
course_path = "/courses/{}".format(course_id.to_deprecated_string())
self.shell.exec_cmd('rm \'$HOME/{0}\''.format(target_shim_file))
SupportedFieldType( 'merged_visible_to_staff_only', VisibilityTransformer, requested_field_name='visible_to_staff_only', )
import logging
cluster_centers_indices = np.unique(labels) labels = np.searchsorted(cluster_centers_indices, labels)
return d.iteritems() if hasattr(d, "iteritems") else d.items()
courses = ['toy', 'simple', 'simple_with_draft', 'test_unicode']
invoice_copy_preference = True invoice_preference_value = get_user_preference(request.user, INVOICE_KEY) if invoice_preference_value is not None: invoice_copy_preference = invoice_preference_value == 'True' return JsonResponse({ 'invoice_copy': invoice_copy_preference })
orphans = self.store.get_orphans(course_key) self.assertEqual(len(orphans), 0)
from __future__ import absolute_import import os import sys import re import shutil import yaml from datetime import datetime import logging
if text: wait_for(lambda _: css_text(css_selector, index=index))
'nodegroups': dict,
'edxmako.shortcuts.marketing_link_context_processor',
USER_RESPONSE_DATA = None
return next((tab for tab in tab_list if tab.type == tab_type), None)
if os.path.exists(venv_path): shutil.rmtree(venv_path) if os.path.exists(requirements_file_path): os.unlink(requirements_file_path)
from __future__ import absolute_import
if ' ' in e: first = 1 else: first = -1
from salt.log.mixins import NewStyleClassMixIn, ExcInfoOnLogLevelFormatMixIn
activations = [X]
self.assertEqual(str(results[0].time), '2013-01-01 17:01:00+00:00')
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
import salt.ext.six as six
wtf_numpy = np.zeros((pool_size_1,)) for i in xrange(pool_size_1): wtf_numpy[i] = on_probs[i] on_probs = wtf_numpy
ind = np.logical_and(y_pred < n_labels, y_true < n_labels) y_pred = y_pred[ind] y_true = y_true[ind] sample_weight = sample_weight[ind]
return settings.FEATURES.get('ENABLE_OPENBADGES', False)
warn_until( 'Carbon', 'It\'s time to start raising `SaltInvocationError` instead of ' 'returning warnings', _dont_call_warnings=True )
self.client.logout() response = self.client.get(self.path) self.assertEqual(response.status_code, 401)
with remove_ccx(course_key) as (course_key, restore): return restore(self._modulestore.fill_in_run(course_key))
info = prlctl('snapshot-list', [name, '--id', snap_id], runas=runas)
try: role = Role.objects.get(name=rolename, course_id=course_id) except Role.DoesNotExist: return False return role.users.filter(username=uname).exists()
log = logging.getLogger(__name__)
resp = self.client.get(self.url_unlocked, HTTP_RANGE=header_value) self.assertEqual(resp.status_code, 200) self.assertNotIn('Content-Range', resp)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
app = cherrypy.tree.apps.get(app_path) if not app: raise AssertionError("No application mounted at '{0}'".format(app_path))
from salt.states import hg
user_id = abs(hash(username))
return self._check_login_or_register_page(self.login_page_url, "loginUrl")
all_corr = ['absolute_exponential', 'squared_exponential', 'cubic', 'linear']
raise NotImplementedError
self.user_partition.scheme.current_group = groups[1] group2_id = self.partition_service.get_user_group_id_for_partition(user_partition_id) self.assertEqual(group2_id, groups[1].id)
inherited_settings_map.setdefault(block_key, {}).update(inheriting_settings)
return self.q(css='input[name=calculate-grades-csv]')
asset_md.thumbnail = 'ABC39XJUDN2' return asset_md
from __future__ import absolute_import
response = self.client.get(reverse("dashboard")) self.assertHttpOK(response)
if key.field_name in self._fields: del self._fields[key.field_name]
link = CourseUserGroupPartitionGroup( course_user_group=cohort, partition_id=partition_id, group_id=group_id, ) link.save() return link
self.page_num = page_num self.num_pages = num_pages
self.train_set.adjust_for_viewer(self.train_set.X)
certs_api.set_cert_generation_enabled(self.course.id, True)
('started', 'started'),
import salt.modules.cmdmod
idx = int(rng.rand(1) * n_samples) entry = X[idx] seen.add(idx)
httpretty.enable()
__virtualname__ = 'mongo'
self.dashboard_page.visit()
link_cohort_to_partition_group( test_cohort, self.user_partition.id, self.groups[0].id, ) add_user_to_cohort(test_cohort, self.student.username) self.assert_student_in_group(self.groups[0])
self.assertFalse(CourseInstructorRole(self.course.id).has_user(nonstaff_user)) self.assertTrue(CourseStaffRole(self.course.id).has_user(nonstaff_user))
add_function_parentheses = False
response = self.client.get(reverse('branding.views.courses')) self.assertEqual(response.status_code, 200)
return self.get_selector('.certificate-exception-container div.message')
clf = svm.NuSVC(nu=0.0) assert_raises(ValueError, clf.fit, X_sp, Y)
'disable_returners': list,
world.visit('/') assert_in(uname, world.css_text('span.account-username', timeout=10))
log = logging.getLogger(__name__)
return CourseLocator( org=course_info['org'], course=course_info['course'], run=course_info['run'], branch=branch, )
dog_stats_api.increment( 'DjangoXBlockUserStateClient.{}'.format(evt_name), timestamp=evt_time, sample_rate=self.API_DATADOG_SAMPLE_RATE, )
mode = 'create' user_attr = __salt__['postgres.role_get']( name, return_password=not refresh_password, **db_args) if user_attr is not None: mode = 'update'
import salt.ext.six as six
if err == 'usage:': break ret[csnap][ctag] = res['stderr']
for key, value in attrs.items(): self.assertEquals(getattr(video, key), value)
self.publish_unit_and_verify_groups_in_lms( courseware_page, [u'Group A', u'Group B', u'Group ID 2 (inactive)'], publish=False )
merged_parent_group_ids = set()
sys.stdout.write('Invalid options passed. Please try -h for '
return [update['Title'] for update in updates_verbose]
from salttesting.helpers import ensure_in_syspath, skip_if_binaries_missing ensure_in_syspath('../../')
problem_info = prob_grade_distrib[child.location]
chapter = modulestore().get_item(chapter.location.version_agnostic()) del chapter.visible_to_staff_only modulestore().update_item(chapter, self.user_id)
req_to_update = next(( req for req in reqs if req.namespace == req_namespace and req.name == req_name ), None)
msg = "0 feature(s) (shape=(1, 0)) while a minimum of 1 is required." assert_raise_message(ValueError, msg, check_array, [[]])
from __future__ import absolute_import import os import os.path import logging import time
ret['master'] = ip_port[0]
epub_title = u'getting_started' epub_author = u'EdX Doc Team' epub_publisher = u'EdX Doc Team' epub_copyright = u'2013, EdX Doc Team'
ith_cluster_silhouette_values = \ sample_silhouette_values[cluster_labels == i]
return slug in [cls.PROFESSIONAL, cls.NO_ID_PROFESSIONAL_MODE]
from salt.modules import win_path
return self.runtime.get_subtree_edited_on(self)
context = {'payment_support_email': microsite.get_value('payment_support_email', settings.PAYMENT_SUPPORT_EMAIL)} return render_to_response("commerce/checkout_cancel.html", context)
return self.metric in ["rbf"]
return len(get_event_differences(expected_event, actual_event, tolerate=tolerate)) == 0
class MockEstimator(object): def predict_proba(self, X): assert_array_equal(X.shape, probs.shape) return probs mock = MockEstimator()
import salt.utils.itertools from salt.exceptions import CommandExecutionError
return np.asarray([clf.predict_proba(X) for clf in self.estimators_])
return comdat['stderr']
return arg
user_requested_access(self.user) self.assertEqual('granted', get_course_creator_status(self.user))
return False
Xs = {'train': x[0:ntrain], 'test': data['data'][0:ntest]}
self.assertNotEqual(v['Name'], name)
date = master_date.strftime('%Y-%m-%d %H:%M')
rng = np.random.RandomState(0) X = rng.rand(10, 20)
max_scores_cache.fetch_from_remote([location_to_cache]) self.assertIsNotNone(max_scores_cache.get(location_to_cache)) self.check_grade_percent(0.33)
old_definition = self.get_definition(course_key, definition_locator.definition_id) if old_definition is None: raise ItemNotFoundError(definition_locator)
'correct': correct,
self.q(css='{} .section-name'.format(parent_css)).first.click()
try: complex(settings[setting]) value = settings[setting] except ValueError: value = "'{0}'".format(settings[setting])
if staff not in list_staff_ccx: try: enroll_email( course_id=ccx_key, student_email=staff.email, auto_enroll=True, email_students=send_email, email_params=email_params, )
import logging import json import salt.ext.six as six
self.course.edxnotes = _edxnotes self.assertEqual(helpers.is_feature_enabled(self.course), _edxnotes)
super(AutoAuthEnabledTestCase, self).setUp() self.url = '/auto_auth' self.client = Client()
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
response = self.client.post(self.visibility_url) self.assertEqual(response.status_code, 404)
orig_name = orig_name[len(tag) + 1:-12]
return self.q(css=".courses-listing-item")
from __future__ import absolute_import, print_function import subprocess import hashlib import pprint import optparse
opts['open_mode'] = opts['open_mode'] is True
mask = label_counts > 1 n_samples = np.sum(mask) label_counts = label_counts[mask] k_all = k_all[mask] c = c[mask] radius = radius[mask]
import collections
try: import systemd.journal HAS_SYSTEMD = True except ImportError: HAS_SYSTEMD = False
for p_name, p_value in six.iteritems(self.pack): setattr(mod, p_name, p_value)
c1 = TT.as_tensor_variable(c1) c2 = TT.as_tensor_variable(c2) maxiter = n_iters
return meta("NewBase", bases, {})
redirect_url = request.GET.get('redirect_url') return view_student_survey(request.user, survey_name, redirect_url=redirect_url)
accepts = request.META.get('HTTP_ACCEPT', '*/*')
MAX_MESSAGE_LENGTH = 1000
if is_mp_logging_listener_configured(): shutdown_multiprocessing_logging_listener()
if not hasattr(self, 'sampling_procedure') or \ self.sampling_procedure is None: self.sampling_procedure = GibbsEvenOdd() self.sampling_procedure.set_dbm(self)
head_sha = None
import salt.config import salt.loader from salt.modules import boto_cognitoidentity
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
world.clear_courses()
from __future__ import unicode_literals
return ''
reloc_spec = vim.vm.RelocateSpec()
if course_overview and not hasattr(course_overview, 'image_set'): CourseOverviewImageSet.create_for_course(course_overview)
serializer.save(changed_by=self.request.user)
import salt.utils import salt.utils.dictupdate from salt.exceptions import SaltException
django_settings.SOCIAL_AUTH_PROTECTED_USER_FIELDS = ['email']
if not (entry == '.' or entry.startswith(('file://', '/'))): match = egg_match.search(entry)
pc_clf.fit(this_X_train, 2 * y_train - 1, sample_weight=sw_train) prob_pos_pc_clf_relabeled = pc_clf.predict_proba(this_X_test)[:, 1] assert_array_almost_equal(prob_pos_pc_clf, prob_pos_pc_clf_relabeled)
assert_raises(ValueError, sel.inverse_transform, np.array([[1], [2]]))
REST_FRAMEWORK,
return self.q(css="body.discussion .forum-nav-sort-control").present
with self.assertNumQueries(0): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
html_theme = 'default'
return _create_item(request)
for student in students[:7]: CertificateWhitelistFactory.create(user=student, course_id=self.course.id, whitelist=True)
return self._generate_cert(cert, course, student, grade_contents, template_pdf, generate_pdf)
'worker_threads': int,
xml = etree.fromstring(expr) xml = self.formulaInstance.preprocess_pmathml(xml) test = etree.tostring(xml)
self.assertNotIn("enrollment_action", self.captured_request.POST) self.assertNotIn("course_id", self.captured_request.POST)
password_history_entry = PasswordHistory() password_history_entry.create(user)
module = CapaFactory.create() self.assertTrue(module.should_show_check_button())
return ''
y = np.mod(np.arange(len(y)), 3)
kwargs['close_fds'] = True
exception_classes = [StudentInputError, LoncapaProblemError, ResponseError] for exception_class in exception_classes:
(True, True), (True, False),
self.user_partition.scheme.current_group = groups[0] group1 = self.partition_service.get_group(self.user_partition) self.assertEqual(group1, groups[0])
verify_order(self.html_usage_key, self.usage_key)
from django.core.wsgi import get_wsgi_application
if name in list_tasks(location): return '{0} already exists'.format(name)
task_folder.DeleteFolder(name, 0)
log = logging.getLogger(__name__)
return os.sep.join(folders_list_in_path)
if not cached_pkg: log.error('Unable to cache {0}'.format(uninstaller)) ret[target] = {'unable to cache': uninstaller} continue
errstring = "Unparsable course_id" with self.assertRaisesRegexp(CommandError, errstring): call_command('export_olx', 'InvalidCourseID')
import salt.utils import salt.utils.odict
salt '*' win_wua.list_updates
if tol > 0.0 and ewa_diff <= tol: if verbose: print('Converged (small centers change) at iteration %d/%d' % (iteration_idx + 1, n_iter)) return True
self.assert_bookmark_data_is_valid(bookmarks[-1], bookmarks_data[0], check_optional_fields=check_all_fields) self.assert_bookmark_data_is_valid(bookmarks[0], bookmarks_data[-1], check_optional_fields=check_all_fields)
for store in self.modulestores: if store.get_modulestore_type() == modulestore_type: return store return None
value = np.zeros_like(X.data)
from __future__ import absolute_import
with self.assert_logged(r'SafeCookieData signature error .*|test_session_id|.*: ' + sig_error_string): yield
iris = datasets.load_iris()
return self.answer_values
from __future__ import print_function
if int(sec_event % 30) == 0: cw = CacheWorker(self.opts) cw.start()
self.assertEqual( second_group.id, ps_uncached.get_user_group_id_for_partition(user_partition_id) )
return "<p>{raw_body}</p>".format(raw_body=raw_body)
n_jobs, n_estimators, starts = _partition_estimators(self.n_estimators, self.n_jobs)
if service != 'README': ret.add(service)
HIDDEN_SIZE = 1000 SALT_PEPPER_NOISE = 0.4 GAUSSIAN_NOISE = 0.5
import salt.daemons.flo import salt.daemons.masterapi from raet import raeting from raet.lane.stacking import LaneStack from raet.lane.yarding import RemoteYard
notes = deepcopy(self.notes) notes.reverse() return notes
server.ping()
'ENFORCE_PASSWORD_POLICY': True,
ext_auth_response = _external_auth_intercept(request, initial_mode) if ext_auth_response is not None: return ext_auth_response
reset_student_attempts( self.course_key, user, problem_location, requesting_user=user, delete_module=True, )
test_data = state_run['cmd_|-test_two_changing_states_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
xml = etree.tostring(node) block = cls.from_xml(xml, runtime, id_generator) return block
import salt.ext.six as six try: import zmq except ImportError: pass
exc_info_on_loglevel=logging.DEBUG
pass
return False
UID_FIELD = "email"
@property def score(self): raise AttributeError
oa = OAS() loglik_oa = oa.fit(X_train).score(X_test)
cc = salt.utils.cache.ContextCache(__opts__, __name__) retrieved_cache = cc.get_cache_context() self.assertDictEqual(retrieved_cache, __context__)
if __grains__['os'] in ['MacOS', 'Darwin']: ret['changes'] = {'new': []}
course.tabs = [tab for tab in course.tabs if not tab.type == 'discussion'] modulestore().update_item(course, user_id)
return X
from salt.states import keystone
clf = IsolationForest(max_samples=100, random_state=rng) clf.fit(X_train) y_pred_train = clf.predict(X_train) y_pred_test = clf.predict(X_test) y_pred_outliers = clf.predict(X_outliers)
return self.courses.values()
pass
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, expensiveTest
return ContainerPage(self.browser, self.locator).visit()
self.setup_user()
return 'server frontend'
current_umask = os.umask(0o027) verify_files([logfile], self.config['user']) os.umask(current_umask)
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
for entry in toc: if entry['url_name'] == url_name: return entry return None
try: mask = importances >= threshold except TypeError: raise ValueError("Invalid threshold: all features are discarded.")
ret = self.run_state('ssh_known_hosts.absent', **kwargs) self.assertSaltStateChangesEqual( ret, GITHUB_FINGERPRINT, keys=('old', 'fingerprint') )
import salt.ext.six as six if six.PY3: import ipaddress else: import salt.ext.ipaddress as ipaddress HAS_RANGE = False try:
STATIC_URL = '/static/' + EDX_PLATFORM_REVISION + "/" STATIC_ROOT = ENV_ROOT / "staticfiles" / EDX_PLATFORM_REVISION
if not GlobalStaff().has_user(request.user): raise PermissionDenied()
shutil.rmtree(root_dir)
self.login_and_enroll() self.logout()
resp = self.client.post('/courses/def/abc/in_valid/generate_user_cert') self.assertEqual(resp.status_code, HttpResponseBadRequest.status_code) self.assertIn("Course is not valid", resp.content)
apache: pkg: - installed - name: httpd service: - running - enable: True - name: httpd
should_display = models.BooleanField(default=False)
MOBILE_STORE_URLS = ENV_TOKENS.get('MOBILE_STORE_URLS', MOBILE_STORE_URLS)
print(('%10s ' + '%16s ' * (len(header_fields) - 1)) % tuple(header_fields))
resource = self.generate_edit_resource(self.resource_id) for xblock_name in self.XBLOCK_NAMES: self.check_event_response_by_http_status('edit_resource', resource, 200, xblock_name)
self._enroll(course.id, "verified")
cmd = '{0}.{1}'.format(self.cmd_prefix, cmd)
clf = self.factory() clf.fit(X2, Y2)
y_pred = base_estimator.predict(X)
response = self._get_progress_page()
courses = sorted( courses, key=lambda course: (course.has_ended(), course.start is None, course.start), reverse=False ) return courses
self.n_iter_final = it
self.assertEqual(CourseMode.is_eligible_for_certificate(mode_slug), expected_eligibility)
instructor_task = InstructorTask.objects.get(id=instructor_task.id) instructor_task.task_state = PROGRESS instructor_task.save()
with open(self.TEST_INDEX_FILENAME, "w+") as index_file: json.dump({}, index_file) self.addCleanup(remove_file, self.TEST_INDEX_FILENAME)
from __future__ import absolute_import
with patch_edxnotes_api_settings("http://example.com/"): self.assertEqual("http://example.com/", get_endpoint_function())
from __future__ import absolute_import import logging import yaml import urllib
return self.q(css='.hidden-contents').visible
__pillar__.update(kwargs.get('pillar', {}))
self.browser.refresh() self.wait_for_video_player_render()
return [Attribute('genex_dna_sequence'), Attribute('genex_problem_number') ]
if first_octet == 169 and second_octet == 254: return False
RM_SUBDIRS_RETRY_TIME = 0.1
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
log.error('PhotoVerification: Error parsing this error message: %s', self.error_msg) return _("There was an error verifying your ID photos.")
assert_equal(train.union(test), set(range(n_samples)))
from salt.modules import modjk
self.assertEqual('', self.run_function('service.status', ['spongebob']))
self.assertTrue(all(isinstance(course, CourseSummary) for course in course_summaries))
lr_tracker = LearningRateTracker() algorithm = SGD(learning_rate, cost, batch_size=batch_size, monitoring_batches=3, monitoring_dataset=monitoring_dataset, termination_criterion=termination_criterion, update_callbacks=[annealed_rate, lr_tracker], set_batch_size=False)
return output_scores
return value
raise SaltInvocationError(kwarg + ' cannot be None')
test_string = "this string has no subtags" result = Ks.substitute_keywords_with_data( test_string, self.context, ) self.assertEquals(test_string, result)
discussion_item = self.store.create_item(self.user.id, course.id, 'discussion', 'new_component')
from __future__ import absolute_import
self._enroll(course.id, "verified")
#epub_language = ''
if guid is None: return "No GUID Specified"
self.options.config_dir = os.path.abspath(self.options.config_dir)
self._change_library_content_settings(count=count, capa_type=capa_type) self._auto_auth(self.USERNAME, self.EMAIL, False) self._goto_library_block_page() return self.library_content_page.children_headers
self._find_within("#comment_{} .wmd-input".format(comment_id)).fill(new_body)
return self.q(css="div.problem div.problem-hint").text[0]
self.find_css('.certificate-description-input').first.fill(value)
url = reverse( 'info', kwargs={ 'course_id': unicode(self.course.id), } ) return self.client.get(url)
stat_f = os.path.join(PLUGINDIR, plugin) execute_bit = stat.S_IXUSR & os.stat(stat_f)[stat.ST_MODE] if execute_bit: ret.append(plugin)
success, task_message = get_task_completion_info(task) status = _("Complete") if success else _("Incomplete") task_feature_dict['status'] = status task_feature_dict['task_message'] = task_message
alternate_course = self.create_course( org=md5(self.course.org).hexdigest() )
iris = datasets.load_iris() X = iris.data y = iris.target
all_items = self.sequence_items
self._raise_unless_scope_is_allowed(key)
self.dashboard_page.visit()
pred2 = svm.libsvm.cross_validation(iris.data, iris.target.astype(np.float64), 5, kernel='linear', random_seed=0) assert_array_equal(pred, pred2)
from __future__ import absolute_import
return False
return self.q(css=".badges-modal").is_focused()
super(AcidView, self).__init__(browser) if isinstance(context_selector, unicode): context_selector = context_selector.encode('utf-8') self.context_selector = context_selector
user2 = UserFactory() add_instructor(rerun_course_key, self.user, user2)
import logging
extract_state_confs(data)
__virtualname__ = 'apt'
rng = np.random.RandomState(0)
makedirs_perms(directory, user, group, mode)
for k in xrange(n_samples, n_nodes): while True: edge = heappop(inertia) if used_node[edge.a] and used_node[edge.b]: break i = edge.a j = edge.b
self._each_parens(r'\{x+y\}', 'x+y', '{')
return _has_staff_access_to_location(user, descriptor.location, course_key)
from __future__ import absolute_import
self.assertTrue(len(controllers) == 0)
y = iris.target colors = "bry"
assert np.all((ps == 0) + (ps == 1)) assert np.all((hs == 0) + (hs == 1))
if user != current_user: msg += ' Try running as user {0}.'.format(user) else: msg += ' Please give {0} read permissions.'.format(user)
sparse_classifier = BaggingRegressor( base_estimator=CustomSVR(), random_state=1, **params ).fit(X_train_sparse, y_train) sparse_results = sparse_classifier.predict(X_test_sparse)
import logging
deploy_scripts_search_paths = [] for entry in config.get('deploy_scripts_search_path', []): if entry.startswith(builtin_deploy_dir): continue
attr = getattr(student, feature) try: DjangoJSONEncoder().default(attr) return attr except TypeError: return unicode(attr)
X_transformed = Nystroem(n_components=X.shape[0]).fit_transform(X) K = rbf_kernel(X) assert_array_almost_equal(np.dot(X_transformed, X_transformed.T), K)
course = self.store.get_course(course_id) self.assertGreater(len(course.textbooks), 0)
self.assertNotIn('Search for a course', response.content) self.assertNotIn('<aside aria-label="Refine Your Search" class="search-facets phone-menu">', response.content)
photo_id_image = ( decode_image_data(photo_id_data) if photo_id_data is not None else None )
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandExecutionError, MinionError
X_trans = minmax_scale(X) assert_array_almost_equal(X_trans, X_expected_0_1) X_trans = minmax_scale(X, feature_range=(1, 2)) assert_array_almost_equal(X_trans, X_expected_1_2)
when = _when[0]
import yaml
self.certificates_section.wait_for_certificate_invalidations_section()
self.video.show_captions()
pred = mb_k_means.predict(X) assert_array_equal(mb_k_means.predict(X), mb_k_means.labels_)
import salt.loader import salt.utils from salt.utils import print_cli import salt.ext.six as six
return (-2 * self.score(X) * X.shape[0] + self._n_parameters() * np.log(X.shape[0]))
key = safe_key('test', '', version)
latex_font_size = '11pt'
p, r, f, s = precision_recall_fscore_support(y_true, y_pred, pos_label=None, average='weighted')
self.upgrade_page.indicate_contribution()
shutil.rmtree(t_path)
conn_parameters['key'] = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(50))
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
pid = 0
ipc_server.start(ipc_server_socket_path)
from __future__ import absolute_import
import salt.utils from salt.modules import puppet from salt.exceptions import CommandExecutionError
self.assertOLXIsDraftOnly(block_list_publish) self.assertOLXIsDraftOnly(block_list_untouched)
for child_location, parent_location, revision in expected_results: self.assertEqual( parent_location, self.store.get_parent_location(child_location, revision=revision) )
apache2.service.require(state('libapache2-mod-wsgi').pkg, pkg='apache2') \\ .watch(file='/etc/apache2/httpd.conf')
xblock = self.store.create_item( self.user_id, test_course.id, 'vertical', block_id='test_vertical' )
store = self._get_modulestore_for_courselike(course_key) if not hasattr(store, 'fill_in_run'): return course_key return store.fill_in_run(course_key)
self.assertEqual(iptables.build_rule(**{'if': '!eth0'}), '! -i eth0')
import msgpack if msgpack.loads(msgpack.dumps([1, 2, 3]), use_list=True) is None: raise ImportError available = True
__func_alias__ = { 'apply_': 'apply' }
for instance in vmconfig_type['instance']: if instance in vmconfig_type['create_only']: continue
my_memcached_config: memcached.host: 127.0.0.1 memcached.port: 11211
return True
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
if self.chapter: return self._find_block(self.chapter, self.section_url_name, 'section')
self.assertTrue(self.video.downloaded_transcript_contains_text('srt', '00:00:00,260'))
deploy_scripts_search_path[idx] = entry continue
AUTHOR_VIEW = 'author_view'
from salt.modules import extfs
self.course.tabs.append(CourseTab.load("notes")) self.course.advanced_modules = ["notes"]
import salt.ext.six as six from salt.ext.six.moves import filter from salt.ext.six.moves.urllib.parse import quote as _quote
partitions.append({ "id": p.id, "name": p.name, "scheme": p.scheme.name, "groups": groups, })
import salt.utils
if os.path.isfile(path_item): with open(path_item, "rb") as file_handle: hasher.update(file_handle.read())
output = self._run_command(self.TEST_ORG) self._assert_output(output, (self.user, self.courses[0].id, opt_in_pref))
self.set_logged_in_cookies(request)
url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.get(url)
self.reset_tracker()
))
log_prob_x = logsumexp(jll, axis=1) return jll - np.atleast_2d(log_prob_x).T
version_guids, id_version_map = self.collect_ids_from_matching_indexes(branch, **kwargs) if not version_guids: return for entry in self.find_structures_by_id(version_guids): for course_index in id_version_map[entry['_id']]: yield entry, course_index
raise DeprecationWarning( '`salt.utils.cloud.deploy_script now only accepts ' 'dictionaries for it\'s `master_conf` parameter. ' 'Loading from YAML ...' )
if child.parent is None or child.parent > descriptor.scope_ids.usage_id: child.parent = descriptor.location child.save()
content = get_cached_content(location) if content is None: try: content = AssetManager.find(location, as_stream=True) except (ItemNotFoundError, NotFoundError): raise
self.add_dropdown_to_section(vertical_1.location, 'H2P1_GROUP1', 1).location.html_id()
metadata = _init() return list(metadata.keys())
user2 = UserFactory.create() user2.save() assert_is_none(SoftwareSecurePhotoVerification.active_for_user(user2))
raise SaltCloudSystemExit( 'The wait_for_instance action must be called with -a or --action.' )
ret['comment'] = ('User {0} is not present, so it cannot be removed' ).format(name) return ret
section_css = '.course-navigation .chapter:nth-of-type({0})'.format(sec_index + 1) self.q(css=section_css).first.click()
if offset.isdigit(): offset = int(offset) else: offset = 0
subobj.main_loop(time_budget=time_budget)
("restricted_course", "country")
china = np.array(china, dtype=np.float64) / 255
return CourseUserGroup.objects.get( course_id=course_key, group_type=CourseUserGroup.COHORT, id=cohort_id )
action_name = 'generating_exec_summary_report' task_fn = partial(upload_exec_summary_report, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
try: from netaddr import all_matching_cidrs HAS_NETADDR = True except ImportError: HAS_NETADDR = False
doublecolon_start = index
response_content = {'test_response': 'test_content'} self.server.config['default'] = response_content
v2 = CountVectorizer(vocabulary=v1.vocabulary_)
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
del pillar
scaler = MinMaxScaler(feature_range=(2, 1)) assert_raises(ValueError, scaler.fit, X)
mlb = MultiLabelBinarizer(classes=[1, 3, 2]) assert_array_equal(mlb.fit(inp).transform(inp), indicator_mat) assert_array_equal(mlb.classes_, [1, 3, 2])
return self.best_estimator_.transform(X)
self.section = modulestore().get_item(self.section.location, depth=None) self.field_data_cache.add_descriptor_descendents(self.section, depth=None)
clf_balanced = PassiveAggressiveClassifier(C=0.1, n_iter=1000, class_weight="balanced") clf_balanced.fit(X2, y2)
self.register_page.visit() self.assertScreenshot('#register .login-providers', 'register-providers-{}'.format(self.browser.name))
df[k] = np.sum(mask)
self._install_masquerade(self.course_staff) self.assertEqual( 'student', access.get_user_role(self.course_staff, self.course_key) )
self._initialize_mixed(mappings={})
options = self.parse_options_string(options_string) self.reset_task_messages() call_task("pavelib.js_test.test_js_run", options=options) self.verify_messages(options=options, dev_mode=False)
from salt.utils import SaltInvocationError import logging log = logging.getLogger(__name__)
return y - np.nan_to_num(np.exp(pred[:, k] - logsumexp(pred, axis=1)))
cmd.extend(args)
license_text = self.q(css='section.license span.license-text') if license_text.is_present(): return license_text.text[0] return None
win_firewall.__salt__ = {} win_firewall.__opts__ = {}
if course is None: course = modulestore().get_course(xblock.location.course_key)
raise ItemNotFoundError(locator)
self._test_email_address_failures(SESDomainEndsWithDotError(554, "Email address ends with a dot"))
Y = np.dot(X, B) + np.random.normal(size=n * q).reshape((n, q)) + 5
return json.loads(response.content)
homework_1_score = 1.0 / 2 homework_2_score = 1.0 / 1 self.check_grade_percent(round((homework_1_score + homework_2_score) / 2, 2))
block_start = get_field_on_block(block_structure.get_xblock(block_key), 'start') if min_all_parents_start_date is None: merged_start_value = block_start or DEFAULT_START_DATE
from salttesting import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock
from salt.exceptions import CommandExecutionError import salt.utils
self.assertEqual(len(site_configuration_history), 1)
ssh_args.extend(['-t', '-t'])
url(r'^get_proctored_exam_results$', 'instructor.views.api.get_proctored_exam_results', name="get_proctored_exam_results"),
module.xml_attributes = xml_attrs
old = list_pkgs()
raise NotImplementedError("Package resources do not support URLs")
retained_files |= get_first_n_at_depth(files_by_y_week_dow, first_of_week_depth, keep_count + 1)
else: ret = _load_result(existing, ret)
from __future__ import absolute_import
with self.assertRaises(Exception): self.build_problem(math_display=True, expect="2*x+3*y", num_inputs=3)
CouponRedemption.remove_code_redemption_from_item(item, user)
published_video = self.store.publish(self.video.location, self.user.id) self.validate_preview_html(self.video, STUDENT_VIEW, can_add=False)
try: import jsonschema import jsonschema.exceptions HAS_JSONSCHEMA = True except ImportError: HAS_JSONSCHEMA = False
import psutil
from __future__ import absolute_import import logging import re
self.assert_matching_events_were_emitted( event_filter={'name': u'edx.instructor.report.requested', 'report_type': report_type} )
if task_progress.attempted % status_interval == 0: task_progress.update_task_state(extra_meta=current_step) task_progress.attempted += 1
self.assertEqual(len(cache), 1) cache_exc_msg, cache_globals = cache.values()[0] self.assertIn("ZeroDivisionError", cache_exc_msg)
if deadline is None: return candidates[0]
__outputter__ = { 'items': 'nested', 'item': 'nested', 'setval': 'nested', }
self.login_staff() self.assertEqual(self.get_progress_detail(), u'0/2')
self.f = tempfile.NamedTemporaryFile(delete=False) self.f.close()
self.user.is_staff = True self.user.save() video_outline = self.api_response().data self.assertEqual(len(video_outline), 2)
dict(safe_zip(range(5), range(5))),
if self.subsample < 1.0: self.oob_improvement_ = np.zeros((self.n_estimators), dtype=np.float64)
dpkg.__grains__ = {} dpkg.__salt__ = {} dpkg.__context__ = {}
from __future__ import absolute_import import logging from copy import copy
subtask_status.increment(failed=num_pending, state=FAILURE) return subtask_status, exc
import salt.utils.pagerduty from salt.ext.six import string_types
datasetCache = cache.datasetCache im_path = datasetCache.cache_file(im_path)
{% load_yaml as var1 %} foo: it works {% endload %} {% load_yaml as var2 %} bar: for real {% endload %}
config_id = create_config(kwargs={'name': name, 'linode_id': node_id, 'root_disk_id': root_disk_id, 'swap_disk_id': swap_disk_id})['ConfigID']
course_key, _ = strip_ccx(course_key) return self._modulestore.delete_course(course_key, user_id)
try: searcher.index(cls.DISCOVERY_DOCUMENT_TYPE, [course_info])
try: item = cls.objects.select_related('microsite').get(organization=org) return item.microsite except ObjectDoesNotExist: return None
HAS_LIBS = False try: import vboxapi
return "input_" + cls.answer_key(input_num)
Z = kmeans.predict(np.c_[xx.ravel(), yy.ravel()])
columns = [col[astype(mask, bool, copy=False)] for col, mask in zip(columns_all, mask_valids)]
return (0, 0, self.rule.rule_id)
'microsite_configuration',
UserProfileFactory(user=self.user)
rng = np.random.RandomState(2)
return self.reset_attempts_button.is_present()
if self._usage_key is None: self._usage_key = self.get_course_key().make_usage_key_from_deprecated_string(self._results_fields["id"]) return self._usage_key
self.page.visit() config = self.page.experiment_group_configurations[0]
self.assertTrue(search_paths[0].endswith(etc_deploy_path))
import salt.ext.six as six
for _ in range(2): utils.get_programs(staff_user)
return self.type == other.get('type') and name_is_eq
ssh_gateway_config['ssh_gateway_user'] = config.get_cloud_config_value( 'ssh_gateway_username', vm_, __opts__, default=None, search_global=False )
actual = json.loads(response.content)['detail'] self.assertEqual(actual, expected_msg)
(True, "en", "lms-footer-edx.css"), (True, "ar", "lms-footer-edx-rtl.css"),
jdict['__master_id__'] = event['data']['master_id']
self.assertTrue( self.run_function( 'git.clone', [clone_parent_dir, self.repo], name=clone_name ) ) shutil.rmtree(clone_parent_dir)
CourseModeFactory.create(course_id=self.COURSE_KEY, mode_slug=CourseMode.HONOR) with self._mock_xqueue() as mock_queue: certs_api.generate_example_certificates(self.COURSE_KEY)
return datetime.fromtimestamp(os.path.getmtime(self.path(name)))
import salt.utils import salt.utils.minions
data = payload.format(score=0.8) return self._send_lti2(data)
M = np.zeros((N, N), dtype=np.float64) for i in range(N): s_i = s_range[i]
response = self.client.post(self.send_mail_url, test_email) self.assertEquals(json.loads(response.content), self.success_content)
return self.q(css=CARD_TITLE_CSS).map(lambda e: e.text).results
result = list_files('.py') for path in result: logger.info(path)
unvisited_children = list(get_children(current_node))
self.add_course_to_user_cart(self.course_key) self.assertEquals(self.cart.orderitem_set.count(), 1)
try: uidb64 = force_text(urlsafe_base64_encode(force_bytes(base36_to_int(uidb36)))) except ValueError:
return self._descriptors[location.to_deprecated_string()]
store.get_items(SlashSeparatedCourseKey('a', 'b', 'c'), qualifiers={'category': 'vertical'})
self.login_page.visit()
return fnd
kernel32 = ctypes.WinDLL('kernel32') advapi32 = ctypes.WinDLL('advapi32')
return [lib for lib in modulestore().get_libraries() if has_studio_read_access(user, lib.location.library_key)]
self.conn.create_stage.side_effect = ClientError(error_content, 'create_stage') self.conn.create_deployment.side_effect = ClientError(error_content, 'create_deployment')
from salttesting import skipIf, TestCase from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
return JsonResponse({"error": unicode(err)}, 400)
self.wait_for_first_certificate_button() self.q(css=self.certficate_css + " .new-button").first.click()
items = self._latest_history()['items'] self.assertItemsEqual(items, expected_items)
return { 'username': user.username, 'email': user.email, 'first_name': user.first_name, 'last_name': user.last_name, }
if self.find_css('.collection-edit').present: return 'edit' elif self.find_css('.collection').present: return 'details'
b_time = int(psutil.boot_time())
if course.discussion_link: discussion_tab = CourseTab.load( 'external_discussion', name=_('External Discussion'), link=course.discussion_link ) else: discussion_tab = CourseTab.load('discussion')
import xml.etree.cElementTree as ElementTree
from salt.modules import monit
resp = self.client.delete(reverse_usage_url("xblock_handler", chapter1_usage_key)) self.assertEqual(resp.status_code, 204)
self._perform_test_using_store(store_type, self._test_delete_course_from_search_index_after_course_deletion)
args = [name] if snap_name: args.extend(['--name', snap_name]) if desc: args.extend(['--description', desc])
score = score * self.weight / total total = self.weight
new_block.graceperiod = timedelta(1) self.store.update_item(new_block, self.user.id)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
import salt.utils
self._verify_unit_warning( self.UnitState(is_released=True, publish_state=self.PublishState.PUBLISHED, is_locked=True), self.STAFF_ONLY_WARNING )
response = None
'id': str,
self.assertEquals(response.status_code, 403)
assert_array_equal(clf.predict([[0.2, -1.0]]), np.array([-1]))
model.dataset = dataset
class SyslogNGTestCase(TestCase): def test_generate_source_config(self): self._config_generator_template(SOURCE_1_CONFIG, SOURCE_1_EXPECTED)
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True], credit_type='halves' )
try: delattr(_MovedItems, name) except AttributeError: try: del moves.__dict__[name] except KeyError: raise AttributeError("no such move, %r" % (name,))
transformer = self.transformer_dataset.transformer out_space = self.data_specs[0] if isinstance(out_space, CompositeSpace): out_space = out_space.components[0]
return models.Client.objects.get(**filters)
accuracy.plot([64, 64], [0.7, 1], label="n_features")
return get_processor_config().get('PURCHASE_ENDPOINT', '')
return super(EligibleCertificateManager, self).get_queryset().exclude( status__in=(CertificateStatuses.audit_passing, CertificateStatuses.audit_notpassing) )
self.request.social_strategy.clean_partial_pipeline() raise OAuthValidationError( { "error": "invalid_grant", "error_description": "access_token is not valid", } )
response = ( _visible_to_nonstaff_users(courselike) and _can_access_descriptor_with_start_date(user, courselike, courselike.id) ) return ( ACCESS_GRANTED if (response or _has_staff_access_to_descriptor(user, courselike, courselike.id)) else response )
clf = self.factory(alpha=0.01, n_iter=5, shuffle=False) clf.fit(X, Y) Y_ = np.array(Y)[:, np.newaxis]
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
lib_page = LibraryEditPage(self.browser, LibraryLocator(org, number)) lib_page.wait_for_page()
assert_almost_equal(s[:k], sa)
return ACCESS_GRANTED if descriptor.mobile_available else MobileAvailabilityError()
make_asset_xml(num_assets, ASSET_XML_PATH) validate_xml(ASSET_XSD_PATH, ASSET_XML_PATH)
from salt.states import postgres_extension
self.assertEqual(correct_map.get_overall_message(), 'Message text')
if file_name == os.path.basename(__file__): return results
self.create_programs_config()
master = copy.deepcopy(salt.config.DEFAULT_MASTER_OPTS) master.update( log_level='info', log_level_logfile='info' )
try: import pyrax from salt.utils.openstack.pyrax.authenticate import Authenticate from salt.utils.openstack.pyrax.queues import RackspaceQueues
with patch_edxnotes_api_settings("http://example.com"): self.assertEqual("http://example.com/some_path/", get_endpoint_function("/some_path"))
last_sum = last_mean * last_sample_count new_sum = X.sum(axis=0)
tenant = MockTenants() tenant.name = name tenant.description = description tenant.enabled = enabled return tenant
updates = _wua_search(software_updates=software, driver_updates=drivers, skip_installed=not installed)
dt = X.dtype if output_pixel_vals: dt = 'uint8' out_array = np.zeros(out_shape, dtype=dt)
if vm.config.template: status = 'VMware tools cannot be updated on a template' return status
cp = salt.utils.alias_function(copy_from, 'cp')
from __future__ import absolute_import
TAGS = {
return _('{section_or_subsection} "{display_name}"').format( section_or_subsection=xblock_type_display_name(xblock), display_name=xblock.display_name_with_default)
self.assertEqual(safe_key(1, 'prefix', 'version'), 'prefix:version:1')
from __future__ import absolute_import import datetime import json import logging import pprint import time try: import slackclient HAS_SLACKCLIENT = True except ImportError: HAS_SLACKCLIENT = False
n_samples_values = np.logspace(np.log10(n_samples_min), np.log10(n_samples_max), n_steps).astype(np.int)
if id_ not in minion_timeouts: minion_timeouts[id_] = time.time() + timeout
survey = None exists = SurveyForm.objects.filter(name=name).exists() if exists: survey = SurveyForm.objects.get(name=name) elif throw_if_not_found: raise SurveyFormNotFound() return survey
import salt.utils.cloud import salt.utils.xmlutil from salt.exceptions import SaltCloudSystemExit from salt.utils import warn_until
original = Microsite.objects.get(id=instance.id) _make_archive_copy(original)
if osdata['kernel'] in skip_cmds: _cmds = ()
'SHOW_BUMPER_PERIODICITY': 7 * 24 * 3600,
all_alphas = np.unique(all_alphas) stride = int(max(1, int(len(all_alphas) / float(self.max_n_alphas)))) all_alphas = all_alphas[::stride]
'max_open_files': int,
ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_ ).astype(np.bool_) ref_inlier_mask[outliers] = False
with warnings.catch_warnings(record=True) as w: warnings.simplefilter("always")
for field_name in InheritanceMixin.fields: record_filter['metadata.{0}'.format(field_name)] = 1
courses2 = import_course_from_xml( self.store, self.user_id, self.export_dir, source_dirs=[top_level_export_dir], static_content_store=contentstore, target_id=dest_course_key2, create_if_not_present=True, raise_on_failure=True, )
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
'providers_config', os.path.join(salt.syspaths.CONFIG_DIR, 'cloud.providers')
response = self._get_page(payment_flow, course.id, expected_status_code=302) self.assertRedirects(response, redirect_url)
reraise_as(IOError("Cannot open " + path + " but can open " + parent + "."))
ret = self.run_run_plus(fun='fileserver.dir_list', args=['backend="roots"']) self.assertIsInstance(ret['fun'], list)
uncommented_start_index = self._uncommented_start_index(mako_template, start_index) if uncommented_start_index != start_index: start_index = uncommented_start_index continue
import json
set_has_profile_image(username, True, _make_upload_dt())
try: if not fnmatch.fnmatch(repo.url, remote): continue except TypeError: if not fnmatch.fnmatch(repo.url, six.text_type(remote)): continue
from __future__ import absolute_import
if val_video_urls["youtube"]: youtube_streams = "1.00:{}".format(val_video_urls["youtube"])
from salt.modules import win_groupadd
err = SearchIndexingError mock_index_dictionary.return_value = err
return StudentModule.objects.get(course_id=self.course.id, student=User.objects.get(username=username), module_type=descriptor.location.category, module_state_key=descriptor.location, )
ROLE = 'ccx_coach' def __init__(self, *args, **kwargs): super(CourseCcxCoachRole, self).__init__(self.ROLE, *args, **kwargs)
return _('TBD')
name_is_eq = (other.get('name') is None or self.name == other['name'])
_ = lambda text: text
(14, True, u"True"),
return self.oauth2_adapter.create_confidential_client( name='Test Confidential Client', user=user, client_id=client_id, redirect_uri=DUMMY_REDIRECT_URL, )
return self.q(css=self._bounded_selector('span.message-text a')).first.text[0]
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proj.settings')
instructor_task = api_call() instructor_task = InstructorTask.objects.get(id=instructor_task.id) instructor_task.task_state = PROGRESS instructor_task.save() with self.assertRaises(AlreadyRunningError): api_call()
call_command('manage_group', TEST_GROUP, '--permissions', 'auth:Group:change_group') self.check_groups([TEST_GROUP]) self.check_permissions(TEST_GROUP, ['change_group'])
import logging
self.profile.meta = {u'foo': u'bar'} self.profile.save() self.assert_no_events_were_emitted()
if self.rerandomize in [RANDOMIZATION.ALWAYS, RANDOMIZATION.ONRESET] and self.is_submitted(): return True else: if self.is_correct(): return False else: return self.show_reset_button
PROFILE_COUNTRY_CACHE_KEY = u"user.{user_id}.profile.country"
return {'html': self.get_problem_html(encapsulate=False)}
update_subtask_status(entry_id, task_id, subtask_status)
return (self.small_width, self.small_height)
assert_true(ocur == X.shape[1])
GRADES_UPDATED = Signal(providing_args=["username", "grade_summary", "course_key", "deadline"])
return LibraryLocator( org=library_info['org'], library=library_info['course'], branch=branch, )
self.client.logout()
'verify_master_pubkey_sign': bool,
self.course_info['number'] = "3355358979513794782079645765720179311111"
for db_alias in self.dbs.keys(): sh("cp {db_cache} {db}".format(db_cache=self.db_caches[db_alias], db=self.dbs[db_alias]))
task_definition = task_service.NewTask(0)
ret = {} for minion, data in six.iteritems(returns): ret[minion] = json.loads(data) return ret
if created: _send_new_pending_email(instance)
file_handle.seek(0) return magic
power = reduce(lambda a, b: b ** a, parse_result) return power
try: from setuptools import setup except ImportError: from distutils.core import setup
__salt__['saltutil.refresh_modules']()
clf3 = MultinomialNB() clf3.partial_fit(X, y2, classes=np.unique(y2))
all_assets, __ = contentstore('trashcan').get_all_content_for_course(self.course.id) self.assertGreater(len(all_assets), 0)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
try: import salt.utils.openstack.neutron as suoneu HAS_NEUTRON = True except NameError as exc: HAS_NEUTRON = False
self.assertIsNone(utils.find_staff_lock_source(self.orphan))
_NEUPD_WHICH = ['LM', 'SM', 'LR', 'SR', 'LI', 'SI']
for user in [self.alpha_user, self.beta_user, self.non_cohorted_user]: self.assertTrue(CourseEnrollment.is_enrolled(user, self.course.id))
try: if isinstance(date, six.string_types): try: if HAS_TIMELIB: return timelib.strtodatetime(to_bytes(date)) except ValueError: pass
self.assertIn('Welcome to edX.', self.video.captions_text)
self.assertFalse('<h2>Enrollment Information</h2>' in response.content)
trans_tar_sum = salt.utils.get_hash(trans_tar, __opts__['hash_type'])
SALT_KEEPALIVE = 99
'reactor_refresh_interval': int,
(new_options, __) = parser.parse_args([])
item = self.cart.orderitem_set.all().select_subclasses()[0] self.assertEquals(item.unit_cost, self.get_discount(self.cost))
ret['result'] = True ret['comment'] = 'property {0} is absent'.format(name)
self.mock_programs_api() self.mock_credentials_api(self.user, reset_url=False) actual = get_programs_credentials(self.user, category='xseries') expected = self.expected_credentials_display_data()
_refresh_course_tabs(request, course_module)
CONFIG_PREFIX = SERVICE_VARIANT + "." if SERVICE_VARIANT else ""
if not self.has_course(source_course_id): raise ItemNotFoundError("Cannot find a course at {0}. Aborting".format(source_course_id))
'minion_restart_command': list,
X, y = datasets.make_hastie_10_2(n_samples=12000, random_state=1)
leaf_count = node_counts[node_counts != 0] assert_greater(np.min(leaf_count), len(X) * 0.25 - 1, "Failed with {0}".format(name))
assert_raises(ValueError, calibration_curve, [1.1], [-0.1], normalize=False)
tag = gettag(xml)
self.fit_transform(raw_documents) return self
for mode in [CourseMode.DEFAULT_MODE_SLUG, CourseMode.VERIFIED]: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode, mode_display_name=mode, )
add_info = self.run_function('user.info', [ADD_USER]) if add_info: self.run_function('user.delete', [ADD_USER])
from config_models.models import cache
draft = self.get_item_from_modulestore(self.problem_usage_key, verify_is_draft=True) self.assertNotEqual(draft.data, published.data)
return 0
self.assertEqual(iptables.build_rule(jump='REDIRECT', **{'to-port': 8080}), '--jump REDIRECT --to-port 8080')
assert_array_equal(X.A, v.transform(iter(D) if iterable else D).A)
from __future__ import absolute_import import logging import os import os.path import hashlib import json
resp = self.client.get(reverse('dashboard')) self.assertEquals(resp.status_code, 200)
def identity_estimator(): pass identity_estimator.decision_function = lambda y_predict: y_predict identity_estimator.predict = lambda y_predict: y_predict
link_index = None for index in range(len(all_links)): if course_id in all_links[index]: link_index = index break
if force: file_attributes = win32api.GetFileAttributes(path) win32api.SetFileAttributes(path, win32con.FILE_ATTRIBUTE_NORMAL)
self.module_store = modulestore()._get_modulestore_by_type(ModuleStoreEnum.Type.mongo)
eligibilities = api.get_eligibilities_for_user("staff") self.assertEqual(eligibilities, [])
return [ desc for desc in [ desc for (_, desc) in XModuleDescriptor.load_classes() ] ]
return self.keys
self.assertTrue(self.run_function('softwareupdate.reset_catalog')) self.assertEqual(self.run_function('softwareupdate.get_catalog'), 'Default')
for app in ENV_TOKENS.get('ADDL_INSTALLED_APPS', []): INSTALLED_APPS += (app,)
assert_almost_equal(entropy(y), sum(importances)) assert_less(np.abs(true_importances - importances).mean(), 0.01)
return ( auth.user_has_role(user, CourseBetaTesterRole(descriptor.id)) or _has_staff_access_to_descriptor(user, descriptor, descriptor.id) or _is_descriptor_mobile_available(descriptor) )
self.assertIn(self.split_test_module.child_descriptor.url_name, ['split_test_cond0', 'split_test_cond1'])
regex = r'\d+.\d+'
'transport': str,
#texinfo_no_detailmenu = False
log = logging.getLogger(__name__)
for exception_class in [StudentInputError, LoncapaProblemError, ResponseError]:
comment = str(ret['comment']) comment = comment.strip().replace( u'\n', u'\n' + u' ' * 14)
return len(self.q(css=self.subsection_selector))
descriptor_filter = partial(descriptor_affects_grading, course.block_types_affecting_grading) return FieldDataCache.cache_for_descriptor_descendents( course.id, user, course, depth=None, descriptor_filter=descriptor_filter )
dist_matrix = np.dot(self.centroids_, subcluster.centroid_) dist_matrix *= -2. dist_matrix += self.squared_norm_ closest_index = np.argmin(dist_matrix) closest_subcluster = self.subclusters_[closest_index]
obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')
assert_true(X_scaled is X)
return course_metadata_utils.clean_course_key(self.location.course_key, padding_char)
from __future__ import absolute_import import os import logging
from __future__ import absolute_import
from __future__ import absolute_import import logging import socket import pprint
self.q(css='.add-xblock-component-button[data-type={}]'.format(category_type)).first.click() return self.q(css='.{}-type-tabs>li>a'.format(category_type)).text
bandwidth = 1.2
self._check_params(n_samples)
__func_alias__ = { 'set_': 'set' }
from __future__ import absolute_import import re import logging try: import pwd HAS_PWD = True except ImportError: HAS_PWD = False
problem1_content_before_switch = self.problem_page.problem_content
pyximport = None
log.exception( "Unexpected exception while attempting to initiate refund for user [%s], course [%s]", course_enrollment.user.id, course_enrollment.course_id, )
if is_staff: user.is_staff = True user.save() CourseEnrollment.enroll(user, course_key)
import logging log = logging.getLogger(__name__)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
add_info = self.run_function('group.info', [ADD_GROUP]) if add_info: self.run_function('group.delete', [ADD_GROUP])
sparse_results = sparse_classifier.score(X_test_sparse, y_test) dense_results = dense_classifier.score(X_test, y_test) assert_array_equal(sparse_results, dense_results)
from salt.states import alternatives
user_id = entry.requester.id task_id = entry.task_id
grandkids = [] for descendant in descendants: grandkids.extend(descendant.children)
'lms.djangoapps.verify_student',
updates, layer_to_chains = model.get_sampling_updates( layer_to_chains, self.theano_rng, num_steps=self.num_gibbs_steps, return_layer_to_updated=True)
self.import_page.upload_tarball(self.tarball_name) self.assertEqual(self.import_page.finished_target_url(), self.landing_page.url)
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
reclass_opts = __opts__['master_tops']['reclass']
from __future__ import absolute_import
self._assert_course_verification_status(VERIFY_STATUS_MISSED_DEADLINE)
EX_THIN_DEPLOY = 11 EX_THIN_CHECKSUM = 12 EX_MOD_DEPLOY = 13 EX_SCP_NOT_FOUND = 14 EX_CANTCREAT = 73
_bulk_ops_record_type = BulkOpsRecord
errstring = "Course with 'TestX/TS01/2015_Q7' key not found." with self.assertRaisesRegexp(CommandError, errstring): call_command('delete_course', 'TestX/TS01/2015_Q7')
for cache in caches.all(): self.assertIsNone(cache.get(key)) cache.set(key, "Not None")
children = np.array(children)[:, ::-1]
assert_almost_equal(ref_i.coef_, clf_i.coef_, decimal=3) assert_almost_equal(ref_w.coef_, clf_w.coef_, decimal=3) assert_almost_equal(ref_i.intercept_, clf_i.intercept_, decimal=3)
pass
self.assertIn( 'Invalid String Value for Enabled', self.run_function('system.set_remote_events', ['spongebob']))
draggables = world.css_find(css_class + ' .drag-handle') source = draggables.first target = draggables.last
import re import os.path import logging import difflib
def _get_courses_with_access_type(self, user, access_type):
preview_lang = request.GET.get('preview-lang', None) if not preview_lang and auth_user: preview_lang = get_user_preference(request.user, DARK_LANGUAGE_KEY)
dispatch[type(len)] = save_global dispatch[type(object)] = save_global dispatch[type(Pickler)] = save_global dispatch[type(pickle.dump)] = save_global
serializer = serializer_cls(page, context=serializer_ctx, many=True)
if test3 <= ctol: istop = 3 if test2 <= atol: istop = 2 if test1 <= rtol: istop = 1
self.q(css=".contribution-option > input").first.click() self.q(css="input[name='verified_mode']").click()
import logging
p_up = dict(self.sgd_updates(self.params, gradients, learn_rates))
has_score = False
deleted = [] valid = [] for enrollment in enrollments: if enrollment.get("course_details") is not None: valid.append(enrollment) else: deleted.append(enrollment)
from __future__ import absolute_import
url_path = "settings/grading" def is_browser_on_page(self): return self.q(css='body.grading').present
if uid is None: user = list_users() uid = user[username]['index']
is_verified, has_skipped, has_completed = _get_user_statuses(user, course_key, checkpoint)
tag = 'split_test'
opts['hash_type'] = opts['hash_type'].lower()
nic_opts = {}
current = set() for wd in wm.watches: current.add(wm.watches[wd].path)
from __future__ import absolute_import
return get_test_system(*args, **kwargs)
import logging import salt.utils.http
from sklearn.ensemble import RandomForestClassifier from sklearn.svm import SVC
handler = WatchedFileHandler(log_path, mode='a', encoding='utf-8', delay=0)
self.setup_mongo_course() result_fragment = self.module.render(STUDENT_VIEW, context=self.default_context) self.assertIn('View Unit in Studio', result_fragment.content)
xmodule.save() return xmodule
self.navigate_to_video()
assert_no_warnings(metric, y_true_bin, y_pred_bin)
import salt.utils
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
self.check_discussion( tab_list=self.tabs_with_discussion, expected_discussion_link="default_discussion_link", expected_can_display_value=True, )
return resource_filename(self.module, os.path.join(self.base_dir, name))
return None
elif zones[avz] != 'available': raise SaltCloudException( 'The specified availability zone isn\'t currently available: ' '{0}\n'.format( avz ) )
self.status = 'refunded' self.save() orderitems = OrderItem.objects.filter(order=self).select_subclasses() self._emit_order_event('Refunded Order', orderitems)
return False
query = self._course_key_to_son(location.course_key) query['definition.children'] = unicode(location)
properties_current = __salt__['zpool.get'](name)[name]
def ordered_dict_presenter(dumper, data): return dumper.represent_dict(data.items())
django_user_service = DjangoXBlockUserService(self.user) xb_user = django_user_service.get_current_user() self.assertTrue(xb_user.is_current_user) self.assert_xblock_user_matches_django(xb_user, self.user)
byte = response.read(4096) fic.write(byte)
request = Request(self.request_factory.get('/')) request.user = requesting_user with check_mongo_calls(0): return course_detail(request, target_user.username, course_key)
from __future__ import absolute_import import textwrap
self.assertRaises( FileserverConfigError, role_class, *args )
ret['msg'] = _urlopen(url6, timeout=timeout).read().splitlines()
CountryAccessRule.objects.create( rule_type=CountryAccessRule.BLACKLIST_RULE, restricted_course=self.restricted_course, country=Country.objects.get(country='US') )
from __future__ import unicode_literals
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
raise salt.exceptions.SaltSystemExit( 'The minimum required python version to run salt-ssh is "2.6".' )
from salttesting.helpers import ensure_in_syspath from salttesting.unit import skipIf ensure_in_syspath('../')
obj = OAuth2ProviderConfig(**kwargs) obj.save() return obj
self.assertIn( 'Invalid value passed for seconds.', self.run_funcdtion('system.set_restart_delay', [70]))
import salt.utils.compat import salt.utils from salt.ext.six import string_types
user.set_password(password) user.save() history = PasswordHistory() history.create(user)
ret = _default_runlevel()
outcomes, __ = OutcomeService.objects.get_or_create( lis_outcome_service_url=result_service, lti_consumer=lti_consumer )
from __future__ import absolute_import import os import yaml import shutil import tempfile
ret['comment'] = 'Event module not available. Schedule add failed.'
if 'tgt' not in load or 'jid' not in load or 'fun' not in load \ or 'arg' not in load: return False
if username is None: username = requesting_user.username try: existing_user = User.objects.get(username=username) except ObjectDoesNotExist: raise UserNotFound() _check_authorized(requesting_user, username, allow_staff) return existing_user
rp2 = RandomProjection(random_state=0, eps=0.5) projected_3 = rp2.fit_transform(data) assert_array_equal(projected_1, projected_3)
course_key = 'non/existing/keyone' error_msg = u"Course {} does not exist.".format(course_key) with self.assertRaisesRegexp(serializers.ValidationError, error_msg): validate_course_id(course_key)
return check_sum_of_calls(XBlock, ['__init__'], instantiations, instantiations, include_arguments=False)
X_train = check_array(X_train, 'csc', dtype=dtype, order=X_order) alphas, coefs, _ = path(X_train, y_train, **path_params) del X_train, y_train
if runas: os.seteuid(euid) os.setegid(egid) if exc is not None: raise CommandExecutionError( 'Exception encountered unpacking zipfile: {0}'.format(exc) )
self.user.is_staff = True
return '{0}#{1}{2}'.format(self.base_url, self.anchor, self.section)
cache.delete(CreditCourse.CREDIT_COURSES_CACHE_KEY)
raise salt.exceptions.CommandExecutionError(lazy_obj.missing_fun_string(fun))
git@github.com:user/repo.git: git.latest: - user: deployer - identity: - /home/deployer/.ssh/id_rsa - /home/deployer/.ssh/id_rsa_alternate
connectivity = kneighbors_graph(X, n_neighbors=10, include_self=False) connectivity = 0.5 * (connectivity + connectivity.T)
for field in _Swagger.SWAGGER_OBJ_V2_FIELDS_REQUIRED: if field not in self._cfg: raise ValueError('Missing Swagger Object Field: {0}'.format(field))
for dsc in dscs: afile = os.path.basename(dsc) adist = os.path.join(dest_dir, afile) shutil.copy(dsc, adist)
n_jobs, n_estimators, starts = _partition_estimators( self.n_estimators, self.n_jobs)
self.advanced_settings.undo_changes_via_modal()
self.assertTrue(CourseEnrollment.is_enrolled(self.user, course_id)) self.assertTrue(self.user.roles.filter(name="Student", course_id=course_id))
return response
raise NotImplementedError()
user = MockUsers() user.name = name user.password = password user.email = email user.enabled = enabled self.tenant_id = tenant_id return user
self.q(css='.wrapper-create-library .new-library-save').click()
log = logging.getLogger(__name__)
super(BadImplementationAbstractEnrollmentReportProvider, self)
inpaint_cost = 0.5 * inpaint_cost + 0.5 * new_inpaint_cost
return self.list_display
getattr(delegator, method)(delegator_data.fit_args[0])
self.assertIn(self.provider.name, response.content)
log.error("etcd: {0}".format(err)) raise
course = self._create_course("verified") self._set_contribution("12.34", course.id)
if not os.path.exists(config): error = '{0} not found.'.format(config) log.error(error) raise CommandExecutionError(error)
'USE_MICROSITES': False,
component_css = 'button[data-category=html]' if boilerplate: component_css += '[data-boilerplate={}]'.format(boilerplate) else: component_css += ':not([data-boilerplate])'
if data_type == 'subsection': for tooltip_dict in tooltips[index]: num_students = tooltip_dict['num_students'] subsection = tooltip_dict['subsection_name'] results.append(['', subsection, num_students])
course5 = CourseFactory.create(org='otherorg', number='999') course5_key = course5.id
from __future__ import unicode_literals
isotonic = CalibratedClassifierCV(est, cv=2, method='isotonic')
'config_models',
return min(self.cleaned_data.get("page_size") or 10, 100)
self.import_children(source_courselike, courselike, courselike_key, dest_id)
if set(lgrp['members']) ^ set(members): change['members'] = members
from salt.exceptions import CommandExecutionError import salt.utils
clf_3 = ForestEstimator(n_estimators=15, max_depth=3, warm_start=True, random_state=1, bootstrap=True, oob_score=False) clf_3.fit(X, y) assert_true(not(hasattr(clf_3, 'oob_score_')))
from __future__ import absolute_import
component_2 = _graph_connected_component(affinity, p[stop - 1]) assert_equal(component_2.sum(), component_size) assert_array_equal(component_1, component_2)
return self.q(css="span.current-page")[0].get_attribute('innerHTML')
#except:
from __future__ import absolute_import import logging from salt.ext.six.moves import StringIO
APP_UPGRADE_CACHE_TIMEOUT = ENV_TOKENS.get('APP_UPGRADE_CACHE_TIMEOUT', APP_UPGRADE_CACHE_TIMEOUT)
xblock._published_by = published_block.edit_info.edited_by xblock._published_on = published_block.edit_info.edited_on
microsite.set_by_domain(self.microsite.site.domain) self.assertEqual(microsite.get_value('email_from_address'), self.microsite.values['email_from_address'])
if support_fraction is None: n_support = int(np.ceil(0.5 * (n_samples + n_features + 1))) else: n_support = int(support_fraction * n_samples)
'milestones',
if (is_ppa and repo_type == 'deb' and source.type == 'deb-src' and source.uri == repo_uri and source.dist == repo_dist):
def test__get_cron_cmdstr(self): self.assertEqual('crontab /tmp', cron._get_cron_cmdstr(STUB_PATH))
_ = lambda text: text
boston = load_boston() X, y = boston['data'], boston['target']
"original_usage_version": None, "descendants": [],
from __future__ import absolute_import
valid_repr = transform_valid(valid_set) test_repr = transform_test(test_set)
from __future__ import absolute_import
#html_additional_pages = {}
return self.q(css="div.problem div.problem-hint").html[0].split(' <', 1)[0]
students = self._create_students(10)
if has_expected: break
return self.find_css("#grading_type").present
from pylearn2.utils import serial from pylearn2.utils.logger import ( CustomStreamHandler, CustomFormatter, restore_defaults )
db_name = "foo'3" self._db_creation_loop(db_name=db_name, returning_name=db_name, test_conn=True, character_set='utf8', connection_user=self.user, connection_pass=self.password )
try: ip_int = self._ip_int_from_string(ip_str) except AddressValueError: self._report_invalid_netmask(ip_str)
assert_method = getattr(self, expected_result) assert_method(block_list)
X = StandardScaler().fit_transform(X)
n_jobs, n_estimators, starts = _partition_estimators(self.n_estimators, self.n_jobs)
'AUTOPLAY_VIDEOS': False,
for item in self.orderitem_set.all(): if item.is_discounted: item.unit_cost = item.list_price item.save()
'statici18n',
self.assertRaises( IntegrityError, BadgeClass.get_badge_class, slug='new_slug', issuing_component='new_component', image_file_handle=get_image('good') )
return cls._do_reindex(modulestore, course_key)
for ky in oy+N.arange(kshp[0]): for kx in ox+N.arange(kshp[1]):
train, target = iris.data, iris.target n_samples, n_features = train.shape
'tcp_keepalive_cnt': float,
from __future__ import absolute_import
num_queries = 1
assert_array_equal(unique_labels(np.array([[0, 0, 1], [1, 0, 1], [0, 0, 0]])), np.arange(3))
return _write_styles('.xmodule_edit', output_root, _list_descriptors())
if db != 'read_replica': DATABASES[db].update(get_db_overrides(db))
'acceptance_wait_time': float,
progress = {'message': TEST_FAILURE_MESSAGE, 'exception': TEST_FAILURE_EXCEPTION, } return self._create_entry(task_state=FAILURE, task_output=progress)
self.assert_grade( two_choice_two_input, self._make_answer_dict([(True, ["Platypus"])]), "correct" )
return VisibilityError() if descriptor.visible_to_staff_only else ACCESS_GRANTED
self.assertTrue(mock_send.called) __, kwargs = mock_send.call_args_list[0]
self._pool = None
context['certificate_date_issued_title'] = _("Issued On:")
X = np.zeros((n_samples, n_features)) y = np.zeros(n_samples, dtype=np.int)
DEBUG = True
score_dict = self.get_score() return score_dict['score'] == score_dict['total']
return response
if not change_password(username, password, uid): log.warning('unable to set user password') delete_user(username, uid) return False
self.q(css='.new-course-button').first.click() self.wait_for_ajax()
non_image_drivers = ['nova', 'virtualbox']
from salt.states import glusterfs import salt.utils.cloud import salt.modules.glusterfs as mod_glusterfs
log.error('Pillar data could not be refreshed. ' 'One or more masters may be down!')
self.cleaned_data['requested_fields'] |= {'field1', 'field2', 'student_view_data', 'block_counts'} self.assert_equals_cleaned_data()
tstart = datetime.now() clf = DecisionTreeClassifier() clf.fit(X, Y).predict(X) delta = (datetime.now() - tstart)
CountryAccessRule.invalidate_cache_for_course(restricted_course.course_key)
module_type = BlockTypeKeyField(max_length=64, db_index=True)
return Response(status=status.HTTP_204_NO_CONTENT)
rng = np.random.RandomState(42) old_centers = centers + rng.normal(size=centers.shape)
self.assertEquals(preview.latex_preview('2||3'), r'2\|3')
if old == '*': return True
self.split_test_module.user_partition_id = SplitTestFields.no_partition_selected['value']
salt.utils.enable_ctrl_logoff_handler()
n_samples_train, n_samples_test, n_features = 75, 150, 500 np.random.seed(0) coef = np.random.randn(n_features)
('svc', SVC(kernel='linear')),
try: return self.checkpoint_status.filter(user_id=user_id).latest() except ObjectDoesNotExist: return None
try: import dogstats_wrapper as dog_stats_api except ImportError: dog_stats_api = None
ApiAccessConfig(enabled=False).save() response = self.client.get(self.url) self.assertEqual(response.status_code, 404)
return user_id
__func_alias__ = { 'list_': 'list' }
from datetime import datetime
ipaddr.IPNetwork(address)
X_train = np.array([[0, 0, 0], [1, 1, 1]]) y_train = [0, 1]
problem_vertical = ItemFactory.create( parent_location=problem_section.location, category='vertical', display_name=problem_vertical_name ) problem_vertical_list.append(problem_vertical)
import salt.utils from salt.grains import core
yield self.auth.authenticate()
from __future__ import absolute_import
self.login(email, password) self.enroll(self.course, verify=True)
hwaddr = salt.utils.alias_function(hw_addr, 'hwaddr')
ActionChains(self.browser).move_to_element(self.element).perform() self.wait_for_viewer_visibility() return self
self.course_nav.q(css='button.check.Check').click() self.course_nav.wait_for_ajax()
user = None email = None language = None try: user = get_student_from_identifier(identifier) except User.DoesNotExist: email = identifier else: email = user.email language = get_user_email_language(user)
import integration
n_jobs = 1
skip_cmds = ('AIX',)
self.assertTrue(self.video.select_transcript_format('txt'))
Z = Z.reshape(xx.shape) plt.pcolormesh(xx, yy, Z, cmap=plt.cm.Paired)
assert_false(np.may_share_memory(b_float32, a_int32))
url( r'^user/(?P<user_id>[^/]*)/course/{course_id}'.format(course_id=settings.COURSE_ID_PATTERN), views.render_html_view, name='html_view' ),
tfidf_test2 = tv.transform(test_data).toarray() assert_array_almost_equal(tfidf_test, tfidf_test2)
self.check_headers(self.handler._get_headers())
from __future__ import absolute_import
from salt.utils.odict import OrderedDict from salt.utils import warn_until from salt.state import HighState
reload_the_page(step) edit_component_and_select_settings()
pass
cookies[settings.SESSION_COOKIE_NAME] = unicode(safe_cookie_data)
self.options.report = (reporter or self.options.reporter)(self.options) return self.options.report
avg_weights = None
md.inlinePatterns.add('mathjax', MathJaxPattern(), '<escape')
from __future__ import print_function import os import collections import hashlib import time import logging import random import getpass from salt.ext.six.moves import input
retval = func(field_decorator=strip_key_collection, *args, **kwargs)
fit_params = fit_params if fit_params is not None else {} fit_params = dict([(k, _index_param_value(X, v, train)) for k, v in fit_params.items()])
out = -np.sum(sample_weight * log_logistic(yz)) + .5 * alpha * np.dot(w, w)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self._install_course_fixture() self._navigate_to_course_unit_page()
super(LmsSearchResultProcessorTestCase, self).setUp() self.build_course()
if error: ret['changes'] = {} ret['result'] = False ret['comment'] = str(error)
ret['comment'] = "Label {0} already set".format(name)
monitoring_dataset = DenseDesignMatrix(X=X)
set_user_preference(self.user, ACCOUNT_VISIBILITY_PREF_KEY, preference_visibility) self.create_mock_profile(self.user) response = self.send_get(client)
import salt.utils
from __future__ import absolute_import import logging
from __future__ import absolute_import
if repo and not fromrepo: fromrepo = repo
import salt.utils from salt.exceptions import CommandExecutionError
vmconfig['changed'][prop] = vmconfig['state'][prop]
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath
SKIP_STEPS = [ INTRO_STEP, ]
import fnmatch import glob import logging
import salt.utils import salt.utils.itertools import salt.utils.mac_utils from salt.exceptions import SaltInvocationError
ret = self.run_state( 'file.prepend', name=name, text='cheese' ) self.assertSaltTrueReturn(ret) self.assertTrue(os.path.isfile(name))
assert_raise_message(ValueError, msg, check_X_y, X, y, ensure_min_features=3, allow_nd=True)
assert_allclose(np.sort(g.weights_), np.sort(rand_data.weights), rtol=0.1, atol=1e-2)
try: import ntsecuritycon import psutil import pywintypes import win32api import win32net import win32security HAS_WIN32 = True except ImportError: HAS_WIN32 = False
def test_invalid_sample_without_replacement_algorithm(): assert_raises(ValueError, sample_without_replacement, 5, 4, "unknown")
for char in key: if ord(char) < 33 or ord(char) == 127: return False
data = { 'parent_locator': unicode(parent_usage_key), 'duplicate_source_locator': unicode(source_usage_key) } if display_name is not None: data['display_name'] = display_name
ret = _psql_prepare_and_run(['-c', query], user=user, host=host, port=port, maintenance_db=maintenance_db, password=password, runas=runas) return ret['retcode'] == 0
check_arguments_for_rescoring(usage_key)
[self.shape[i] for i in (2, 0, 1)])
rng = np.random.RandomState(0) X = np.c_[X, rng.randn(n_samples, 200 * n_features)]
return self.q(css='.page-content-secondary .team-capacity :last-child').text[0]
X = check_array(X, accept_sparse=['csr', 'csc']) n_samples = X.shape[0]
if descriptor_orig_usage_key is not None: tracking_context['module']['original_usage_key'] = unicode(descriptor_orig_usage_key) tracking_context['module']['original_usage_version'] = unicode(descriptor_orig_version)
self.field_handlers = {} for field_name in self.DEFAULT_FIELDS + self.EXTRA_FIELDS: handler = getattr(self, "_add_{field_name}_field".format(field_name=field_name)) self.field_handlers[field_name] = handler
if update.IsDownloaded and not update.IsInstalled: results['Downloaded'] += 1
log.warning('Cannot get projects, you may need to update libcloud to 0.15 or later') return False
from __future__ import absolute_import
OrderItemSubclassPK = namedtuple('OrderItemSubclassPK', ['cls', 'pk'])
user = XBlockUser() user.opt_attrs['edx-platform.username'] = 'test user' return user
self.assertEqual( res_json['message'], u"{user} does not exist in the LMS. Please check your spelling and retry.".format(user=invalid_user) )
verified, _ = self.create_mode('verified', 'Verified', min_price=5) self.assertTrue(CourseMode.has_payment_options(self.course_key))
from __future__ import absolute_import
with self.assertRaises(UnsupportedRevisionError): self.store.get_items( self.course_locations[self.MONGO_COURSEID].course_key, revision=ModuleStoreEnum.RevisionOption.draft_preferred )
_, _, traceback_obj = sys.exc_info() raise ResponseError(err.message, traceback_obj)
if not date_time: msg = '[{}] is not a valid timestamp'.format(value) log.warning(msg) raise serializers.ValidationError(msg)
repo_name: my_repo
self.dashboard_page.visit()
if shuffle: X, y = util_shuffle(X, y, random_state=generator)
'ENABLE_MAX_FAILED_LOGIN_ATTEMPTS': True,
iris = datasets.load_iris() y_true, y_pred, _ = make_prediction(dataset=iris, binary=False)
unbalanced_X = iris.data[:125] unbalanced_y = iris.target[:125] sample_weight = compute_sample_weight("balanced", unbalanced_y)
self._metric_base = metric_base self._sample_rate = sample_rate
course.cohort_config = {} self.assertFalse(course.is_cohorted)
'openedx.core.djangoapps.programs',
est = DummyRegressor(strategy="constant", constant=constants) est.fit(X_learn, y_learn) y_pred_learn = est.predict(X_learn) y_pred_test = est.predict(X_test)
from __future__ import absolute_import
import logging import re import os HAS_DBUS = False try: import dbus HAS_DBUS = True except ImportError: pass
return parse(out)
if actual_data != data: ret.update({item: {'old': actual_data, 'new': data}})
AccessTestData( partition_groups={1: 1, 2: 2}, xblock_access={1: [1]}, merged_parents_list=[{1: {3}}, {1: {1}}], expected_access=True, ),
key = "subtask-{}".format(task_id) cache.delete(key)
mock_prlctl = MagicMock(return_value=guid_str) with patch.object(parallels, 'prlctl', mock_prlctl): parallels.list_snapshots(name) mock_prlctl.assert_called_once_with('snapshot-list', [name], runas=None)
AutoAuthPage(self.browser, course_id=self.course_id).visit()
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
for course in courses_in_progress: CourseRerunState.objects.initiated( sourse_course_key, destination_course_key=course.id, user=self.user, display_name="test course" )
return cPickle.dumps(obj, get_pickle_protocol())
search_string = '' search_params = []
return create_xblock_info( modulestore().get_item(location), include_child_info=True, include_children_predicate=ALWAYS, course_outline=True )
return CompositeSpace((CompositeSpace((image_space,) * 2), VectorSpace(dim=1)))
overrides = salt.utils.clean_kwargs(**copy.deepcopy(kwargs)) profile_match = salt.utils.dictupdate.update( copy.deepcopy(profile_match), overrides ) return profile_match
signal_handler.reset_mock() section = self.store.create_item(self.user_id, course.id, 'chapter') signal_handler.send.assert_called_with('course_published', course_key=course.id)
kwargs['force'] = True return image_present(name, **kwargs)
ret = self.run_state('ssh_known_hosts.present', test=True, **kwargs) self.assertSaltTrueReturn(ret)
import os import logging
memcached.host: 127.0.0.1 memcached.port: 11211
for algorithm in ALGORITHMS:
if self.is_captions_visible() != captions_new_state: self.click_player_button('transcript_button')
from __future__ import absolute_import
self.assertEqual(response.status_code, 200)
self.assert_has_text(xml, "//div[@class='capa_alert']", self.context['submitted_message'])
try: from libcloud.compute.base import NodeState HAS_LIBCLOUD = True except ImportError: HAS_LIBCLOUD = False
redirect_to = get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to)
for average in ['macro', 'weighted', 'micro']: assert_not_equal(recall_13(average=average), recall_all(average=average))
self.assertEqual(200, response.status_code)
access_key_id, secret_access_key, token = creds(provider)
self.login_and_enroll(course_id)
mof_s = mof_h = win32file._getmaxstdio()
for n_labels in range(2, 10): y_score = n_labels - (np.arange(n_labels).reshape((1, n_labels)) + 1)
grid_search = GridSearchCV(km, param_grid=dict(n_clusters=[2, 3, 4])) grid_search.fit(X) assert_equal(grid_search.best_params_["n_clusters"], 4)
_response = _request("GET", options['url'] + options['db'] + "/_design/salt")
ret = _default_runlevel()
return course.id.course
ret.update({esxi_host: response})
if ret['result'] and not schanged: msg = _format_terse(tcolor, comps, ret, colors, tabular) hstrs.append(msg) continue
self.assertEqual(cached_structure, not_cached_structure)
kwargs.pop('_view_name')
current_enrollment, __ = CourseEnrollment.enrollment_mode_for_user(self.user, self.course_key) self.assertEquals('verified', current_enrollment)
after = expiration + timedelta(seconds=1) self.assertFalse(attempt.active_at_datetime(after))
from __future__ import absolute_import
if N.size(imgshp)==2: imgshp = (1,)+imgshp
library = LibraryFactory.create() expected_url = u'/library/{}'.format(unicode(library.location.library_key)) self.assertEqual(xblock_studio_url(library), expected_url)
students = [instructor, staff, self.coach] + [ UserFactory.create(is_staff=False) for _ in range(3) ]
if correctness == 'incorrect': second_addend += random.randint(1, 10)
try: return dateutil.parser.parse(datestr).replace(tzinfo=utc) except ValueError: raise DashboardError(_("Unable to parse date: ") + datestr)
CSRF_COOKIE_SECURE = ENV_TOKENS.get('CSRF_COOKIE_SECURE', False)
if not (is_fitted or has_partial_fit): raise NotFittedError("Fit training data before predicting")
return self.q(css=' '.join([self.PAGE_SELECTOR, css_selector]))
caption_line_selector = ".subtitles li[data-index='{index}']".format(index=line_number - 1) self.q(css=caption_line_selector).results[0].send_keys(Keys.ENTER)
with self.assertRaises(SearchIndexingError): CoursewareSearchIndexer.do_course_reindex(modulestore(), self.course.id)
from __future__ import absolute_import import os.path
block_info.setdefault('paths', []) block_info['paths'].append(current_path) for child_block_info in block_info['children']: add_path_info(child_block_info, current_path + [block_info])
import salt.ext.six as six
self._each_parens('(x+y)', 'x+y', '(')
key = self.lti_consumer.consumer_key secret = SignatureValidator(self.lti_consumer).get_client_secret(key, None) self.assertEqual(secret, self.lti_consumer.consumer_secret)
FEATURES['EMBARGO'] = True
raise WorkerInterrupt()
from __future__ import unicode_literals
__virtualname__ = 'cisconso'
xmpp.__salt__ = {} xmpp.__opts__ = {}
url_path = embargo_api.message_url_path(self.course.id, access_point)
return self._decision_function(X)
import salt.utils import salt.utils.decorators as decorators
pass
with check_mongo_calls(1): self._run_command()
import salt.config import salt.loader
tomcat.__salt__ = {} tomcat.__opts__ = {} tomcat.__env__ = {}
mask[np.argsort(scores, kind="mergesort")[-self.k:]] = 1 return mask
import logging
return
pass
UserFactory.create(username=self.USERNAME, email=self.EMAIL, password=self.PASSWORD)
return tensor.dot(inputs[0], self.wxf)
return usage_id
tasks.update_xblocks_cache.apply_async([unicode(course_key)], countdown=0)
resource_value = resource_object['service_key'] if '@' in resource_value: resource_value = resource_value[0:resource_value.find('@')]
(ModuleStoreEnum.RevisionOption.published_only, 'assertOLXIsDraftOnly'), (ModuleStoreEnum.RevisionOption.all, 'assertOLXIsDeleted'), (None, 'assertOLXIsDeleted'),
if upgrade_deadline is not None and verification_deadline < upgrade_deadline: raise serializers.ValidationError( 'Verification deadline must be after the course mode upgrade deadlines.')
return
with super(CreateSubCommentUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
file_root = os.path.abspath(self.options.file_root) self.config['file_roots'] = {'base': _expand_glob_path([file_root])}
self.assertTrue('success' in result and result['success'])
django_args.append('--help')
from __future__ import absolute_import
return self.modulestores[0]
input_type = X.format if sp.issparse(X) else type(X) err = "Expected a CSR or CSC sparse matrix, got %s." % input_type raise TypeError(err)
X = check_array(X, accept_sparse=['csr', 'csc', 'coo'], ensure_min_features=2, estimator=self) return AgglomerativeClustering.fit(self, X.T, **params)
try: data_root = path(settings.GITHUB_REPO_ROOT) subdir = base64.urlsafe_b64encode(repr(courselike_key)) course_dir = data_root / subdir filename = request.FILES['course-data'].name
try: key = unicode(key, 'utf-8') value = unicode(value, 'utf-8') except UnicodeDecodeError: self.log_message("Could not decode request params as UTF-8")
inherited = String(scope=Scope.settings, default="the default") not_inherited = String(scope=Scope.settings, default="nothing")
from __future__ import absolute_import import logging
try: self.url = reverse('login_post') except NoReverseMatch: self.url = reverse('login')
coef_grads, intercept_grads = self._compute_loss_grad( last, n_samples, activations, deltas, coef_grads, intercept_grads)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
return etree.Element( 'video_asset', attrib={'export_edx_video_id': edx_video_id} )
clf = svm.OneClassSVM() rnd = check_random_state(2)
type_in_codemirror(self, index, text, find_prefix='$("{}").find'.format(self.editor_selector))
response = self.session.get(url, headers=self.headers)
from salt.modules import data
default=None
raise CommandExecutionError('Service not found: {0}'.format(name))
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return self.context["cc_requester"]["id"] in obj.get("abuse_flaggers", [])
import salt.utils from salt.exceptions import CommandExecutionError
return reverse('social:complete', kwargs={'backend': self.PROVIDER_BACKEND})
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
from salt.states import kapacitor
try: kwargs['command'] = salt.utils.shlex_split(kwargs['command']) except AttributeError: pass
print(metrics.classification_report(y_test, y_predicted, target_names=dataset.target_names))
setattr(builtins, '__salt_system_encoding__', encoding)
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
log.info('Created node {0}'.format(vm_['name']))
with self.assertRaises(NotFoundError): self.item.get_transcript(transcripts)
return self._active_count > 0
assert_raises(ValueError, lshf.radius_neighbors, X[0])
for __ in range(int(num_responses)): response_element = self.create_response_element(**kwargs)
for j in range(n_components): w = w_init[j, :].copy() w /= np.sqrt((w ** 2).sum())
return '{}[data-locator="{}"] {}'.format( self.BODY_SELECTOR, self.locator, selector )
cost = sum(costs) model_terms = sum([param.sum() for param in model.get_params()]) cost = cost * model_terms return cost
using_firefox = (os.environ.get('SELENIUM_BROWSER', 'firefox') == 'firefox') validate_firefox = getattr(options, 'validate_firefox_version', using_firefox)
return 'self' if self.self_paced else 'instructor'
url = '{base}/course_modes/create_mode/{course_id}/'.format( base=BASE_URL, course_id=self._course_id ) query_string = urllib.urlencode(self._parameters) if query_string: url += '?' + query_string return url
pass
X_pca = pca.transform(X) assert_array_almost_equal(pca.explained_variance_, np.var(X_pca, axis=0))
__virtualname__ = 'winrepo'
course = store.get_course(course_key) self.enroll(course, True)
return sum([self.counters[key] for key in self.messages if key.startswith(prefix)])
import collections
p, h = prob_max_pool_c01b(z, (pool_rows, pool_cols) ) func = function([z], [p, h], mode = mode_with_gpu)
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course_key): assertProblemNameEquals(problem_original_name)
return self.descriptor.validate()
for extension in self.cv_extensions: extension.on_save(self.trainers)
from salttesting.unit import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../../')
return False
dist_array = pairwise_distances(X).flatten() np.sort(dist_array) radius = dist_array[15]
with self.assertRaises(Exception): self.client.get(test_url)
self.assertEqual(self.cart.total_cost, self.get_discount(self.cost))
config = old_to_new(config)
pass
if isinstance(value, Country): if value.code: return value.code else: return None return value
conf[opt] = [x.strip() for x in cp.get('main', opt).split(',')]
for i in range(X.shape[0]): x = X[i] out[i, i] = metric(x, x, **kwds)
self.update_structure(destination_course, destination_structure) self._update_head(destination_course, index_entry, destination_course.branch, destination_structure['_id'])
from __future__ import absolute_import
self.q(css='.action-remove-member').first.click()
files = [k for k in s3_meta if 'Key' in k]
return self.SEPARATOR.join([self.version, self.session_id, self.key_salt, self.signature])
pass
import salt.utils from salt.pillar.sql_base import SqlBaseExtPillar
if existing['code'] == 200:
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
self._verify_split_test_import( 'split_test_copy', 'split_test_module', 'split1', {"0": 'sample_0', "2": 'sample_2'}, )
self.certificates_section.remove_first_certificate_exception() self.assertNotIn(self.user_name, self.certificates_section.last_certificate_exception.text) self.assertNotIn(notes, self.certificates_section.last_certificate_exception.text)
mount_invisible_keys = [ 'actimeo', 'comment', 'direct-io-mode', 'password', 'retry', 'port', ]
html_problem_semantics = [ "codeparam", "responseparam", "answer", "script", "hintgroup", "openendedparam", "openendedrubric", ]
pgettext = real_pgettext
problem = self.store.get_item(problem.location)
import sklearn version = sklearn.__version__ release = sklearn.__version__
continue
from __future__ import absolute_import
if bucket_size: cmd += ' --bucket {0}'.format(bucket_size)
self.assertIn( 'Failed to setup the Syslog logging handler', '\n'.join(ret[1]) ) self.assertEqual(ret[2], 2)
dataset_sources="sources.lst" dataset_web="http://www.stevenpigeon.org/secret" dataset_conf_path="" dataset_data_path="" root_conf_path=None root_data_path=None user_conf_path=None user_data_path=None super_powers=False
spot_prefix = ''
if logging.getLoggerClass() is not SaltLoggingClass:
layers = [self.visible_layer] + self.hidden_layers
self.assertEqual(self.cudnn2d.get_params(), [self.filters])
from netaddr import IPAddress from netaddr.core import AddrFormatError
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
iris = datasets.load_iris()
response = problem.responders.values()[0] self.assertFalse(response.has_mask()) self.assertFalse(response.has_answerpool())
import copy import logging import re
ret = self.run_state( 'file.directory', name=tmp_dir, follow_symlinks=True, user=user, group=group, recurse=['user', 'group'] ) self.assertSaltTrueReturn(ret)
REPO_ROOT = path(__file__).abspath().parent.parent.parent
filter_spec = vmodl.query.PropertyCollector.FilterSpec( objectSet=[obj_spec], propSet=[property_spec], reportMissingObjectsInResults=False )
chapter = path[1].name if n > 1 else None section = path[2].name if n > 2 else None vertical = path[3].name if n > 3 else None position = None
updated_user = User.objects.get(id=uid_int)
precompute = np.empty(shape=(n_features, n_features), dtype=X.dtype, order='C') np.dot(X.T, X, out=precompute)
self._reconnect()
from tokenize import open as open_py_source
try: manual_enrollment = cls.objects.filter(enrollment=enrollment).latest('time_stamp') except cls.DoesNotExist: manual_enrollment = None return manual_enrollment
from __future__ import absolute_import import logging
if text_message is None: text_message = html_to_text(html_message)
course_id = CourseKeyField(max_length=255, db_index=True, unique=True)
exc_info_on_loglevel=logging.DEBUG
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
return mode_slug in cls.VERIFIED_MODES
self.children = []
return self.q(css='body.view-export').present
return ((storage_used + storage_need) < (storage_total * max_disk_usage))
from __future__ import absolute_import import time
return 0.5 - scores
self._verify_xblock_info_state(xblock_info, 'visibility_state', expected_state, path, should_equal)
super(AdminCourseModeFormTest, self).setUp() self.course = CourseFactory.create()
response = self.ajax_request('bad_answer', {}) self.assertDictEqual(response, {'error': 'Unknown Command!'})
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
self._verify_unit_warning( self.UnitState(is_released=False, publish_state=self.PublishState.PUBLISHED, is_locked=True), self.STAFF_ONLY_WARNING )
return original_arg
edge_model = covariance.GraphLassoCV()
def __init__(self, opts, io_loop=None): pass
import salt.utils import salt.utils.templates import salt.utils.validate.net import salt.ext.six as six
unicode_text = "好 各位同学".decode('utf-8')
email = user.email if user.is_authenticated() else request.POST.get('email')
cov = pca.get_covariance() precision = pca.get_precision() assert_array_almost_equal(np.dot(cov, precision), np.eye(X.shape[1]), 12)
from __future__ import division import numpy as np import scipy.sparse as sp import operator import array
signatory = certificate.signatories[0] signatory.edit()
if self.failed_only: opts += "--failed"
import re import logging
from __future__ import absolute_import import os import yaml import pipes import shutil
__virtualname__ = 'varstack'
request_headers = self.request.headers.get('Access-Control-Request-Headers') allowed_headers = request_headers.split(',')
self.good_dir = self.create_course_xml(self.content_dir, self.base_course_key)
code_redemption = RegistrationCodeRedemption(registration_code=course_reg_code, redeemed_by=user) code_redemption.save() return code_redemption
raise NotImplementedError( "%s does not implement definition_to_xml" % self.__class__.__name__)
if not hasattr(self, 'center'): self.center = False if not hasattr(self, 'gcn'): self.gcn = False
if cls.test_course_key not in [c.id for c in courses]: import_course_from_xml( store, ModuleStoreEnum.UserID.mgmt_command, DATA_DIR, XML_COURSE_DIRS, create_if_not_present=True )
def __setstate__(self, state): self.__init__(state['opts'])
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.ext.six import string_types
json.dumps(assets._get_asset_json( "sample_static.txt", content_type, upload_date, asset_location, None, lock)), "application/json"
return store.create_item(user.id, usage_key.course_key, usage_key.block_type, block_id=usage_key.block_id)
import grp
remove_users(self.admin, CourseCreatorRole(), self.user) self.assertTrue(user_has_role(self.user, CourseCreatorRole()))
assert_policy_entries( [ADVANCED_MODULES_KEY, DISPLAY_NAME_KEY, "Show Calculator"], ["[]", DISPLAY_NAME_VALUE, "false"])
dtype = np.float64
for cline in content.split('\n'): new_file.append(cline + '\n')
for key, func in six.iteritems(self.loader): break self.assertNotEqual(self.loader._dict, {})
for output_dir in [self.temp_dir_1, self.temp_dir_2]: call_command('export', course_id, output_dir)
return "{}/v1/issuer/issuers/{}".format(settings.BADGR_BASE_URL, settings.BADGR_ISSUER_SLUG)
email_placeholder = _(u"username@domain.com")
return iter(self.estimators_)
if gid is not None: gid_group = None for lgrp in grps: if lgrp['gid'] == gid: gid_group = lgrp['name'] break
set_random_state(lda, 3) set_random_state(tree, 3) assert_equal(tree.random_state, 3)
try: return self.store.get_item(location) except ItemNotFoundError: return None
([UnregisteredTestTransformer3()], [UnregisteredTestTransformer3.name()]),
usage_key = self.course.id.make_usage_key('vertical', None)
with store.branch_setting(ModuleStoreEnum.Branch.draft_preferred): store.publish(item_location, ModuleStoreEnum.UserID.test)
self._click_button('settings_tab')
import salt.ext.six as six
dbc = quote_identifier(dbc, for_grants=(table is '*'))
def context_manager_no_warning(): with ignore_warnings(): _warning_function()
self.client.logout() staff_user = StaffFactory(course_key=self.course.id) staff_user.is_staff = True self.client.login(username=staff_user.username, password='test')
from __future__ import absolute_import import os
self.request.backend = social_utils.load_backend(self.request.social_strategy, self.BACKEND, redirect_uri)
import salt.utils
self.register_flag_response("thread", thread_id)
self.X -= union.mean(axis=0, dtype='float64') std = union.std(axis=0, dtype='float64') std[std < 1e-3] = 1e-3 self.X /= std
import datetime import pytz
train_obj.main_loop() state.results = jobman.tools.resolve(state.extract_results)(train_obj) return channel.COMPLETE
original_values_map = self.get_settings_fields_of_each_type() self.set_wrong_inputs_to_fields() self.advanced_settings.wait_for_modal_load()
depths = [_find_longest_prefix_match(tree, tree_queries, MAX_HASH_SIZE, self._left_mask, self._right_mask) for tree, tree_queries in zip(self.trees_, np.rollaxis(bin_queries, 1))]
self._assert_user_name(self.user.profile.name)
exception = Exception("failure in rerunning") try: raise exception except: CourseRerunState.objects.failed(course_key=self.course_key)
response = self._add_edx4edx() self.assertRegexpMatches(response.content, table_re)
from __future__ import absolute_import
lars_broken = linear_model.LassoLarsIC('<unknown>') assert_raises(ValueError, lars_broken.fit, X, y)
self.release_languages('ar, es-419')
return salt.utils.pem_finger(os.path.join(__opts__['pki_dir'], 'minion_master.pub'), sum_type=__opts__.get('hash_type', 'md5'))
import re import copy
alert = get_modal_alert(self.student_admin_section.browser) alert.dismiss()
else: return res
from sklearn import datasets datasets.mldata.urlopen = urlopen
missing_node_cache(prov_dir, nodes, provider, opts)
etcd.host: 127.0.0.1 etcd.port: 4001
self.__xml = False self.__no_lock = False self.__no_raise = False self.__refresh = False
from urllib.request import Request, build_opener
update_entrance_exam(request, self.course.id, {})
notes = deepcopy(notes[start:end])
if signal.getsignal(signal.SIGINT) is signal.SIG_DFL: signal.signal(signal.SIGINT, self._handle_signals)
__import__(name) return sys.modules[name]
self.wait_for( lambda: len(self.q(css='.team-card')) == expected_count, description="Expected number of teams is wrong" )
#epub_show_urls = 'inline'
iface_data['inet6'] = {} iface_data['inet6']['addrfam'] = 'inet6'
return self.page.num_pages
return cls.current().cache_ttl
assert not any([key in rval for key in contrib]) assert all([key in params for key in contrib])
import logging
X = np.ones((10, 2)) X[:5, :] = 0
if vm.summary.runtime.powerState != "poweredOn": status = 'VM must be powered on to upgrade tools' return status
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=status, )
ORDER_STATUS_MAP = { 'cart': 'defunct-cart', 'paying': 'defunct-paying', }
assert_raises(ValueError, binarizer.transform, sparse.csc_matrix(X))
if instance.id and not instance.contacted: old_instance = ApiAccessRequest.objects.get(pk=instance.id) if instance.status != old_instance.status: _send_decision_email(instance)
return cls.objects.filter(microsite_id=microsite_pk).values_list('organization', flat=True)
received_objects = fetch_results['received_objects']
_optname = _optname.replace('-', '_') iface_data[addrfam][_optname] = value
notes = [] for component in self.components: notes.extend(component.notes) return notes
logging.root.setLevel(GARBAGE)
saltify.__opts__ = {} saltify.__opts__['providers'] = {}
return [x for x in cmd['stdout'].split('\n') if check_ip(x)]
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proj.settings')
stream.send('Server-side exception handling payload')
regression = IsotonicRegression() n_samples = 50 x = np.linspace(-3, 3, n_samples) y = x + rng.uniform(size=n_samples)
from __future__ import absolute_import
self.course_info_page.visit() self.tab_nav.go_to_tab('Wiki')
return os.getcwd()
before = attempt.created_at - timedelta(seconds=1) self.assertFalse(attempt.active_at_datetime(before))
ret = yield _do_transfer()
return True
import uuid SECRET_KEY = uuid.uuid4().hex
courselike_label = self.parent_xml.split('.')[0]
log.info('Approving API request from user [%s].', self.user.id) self.status = self.APPROVED self.save()
from __future__ import unicode_literals
fmt = CustomFormatter() handler = CustomStreamHandler(stdout=stdout, stderr=stderr, formatter=fmt) top_level_logger.addHandler(handler)
X = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1], [6, 3], [-4, 7]]
#`clean_warning_registry()` is called internally by assert_warns class TestWarns(unittest.TestCase): def test_warn(self): def f(): warnings.warn("yo") return 3
import salt.ext.six as six
modes = CourseMode.modes_for_course(self.course_key) self.assertEqual([CourseMode.DEFAULT_MODE], modes)
md5 = hashlib.md5() for data in resource: md5.update(repr(data)) return md5.hexdigest()
module = CapaFactory.create(attempts=attempts - 3) self.assertEqual(module.check_button_name(), "Check")
self.verbose = bool(self.verbose)
salt.utils.files.process_read_exception(exc, key)
form = RestrictedCourseForm(data={'course_key': 'not/valid'}) self._assert_course_field_error(form)
self.q(css=self.search_bar_selector + ' input[type="text"]').fill(text)
try: cached_mapping = CourseStructure.objects.get(course_id=course.id).discussion_id_map if not cached_mapping: raise DiscussionIdMapIsNotCached() return cached_mapping.get(discussion_id) except CourseStructure.DoesNotExist: raise DiscussionIdMapIsNotCached()
from __future__ import unicode_literals
raise tools.DashboardError("Oh noes!")
self.assertEqual(CourseEnrollment.objects.count(), 1) enrollment = CourseEnrollment.objects.get(course_id=course_key) self.assertEqual(enrollment.user.username, "test")
ActionChains(self.browser).move_to_element(self.element).click().perform() return self
@ignore_warnings def test_factor_analysis(): rng = np.random.RandomState(0) n_samples, n_features, n_components = 20, 5, 3
break
world.browser.execute_script('window.confirm = function(){return false;} ; window.alert = function(){return;}')
dtype = None
field_errors = {}
return data_key + 't1.val1.' + unicode(block_key)
X = check_array(X) n_samples, n_features = X.shape
verifications = SoftwareSecurePhotoVerification.objects.filter(user=user)
from __future__ import absolute_import import os import pwd import shutil import re import tempfile
self._login_as_non_staff_user()
self.assertFalse(self.cohort_management_page.is_category_selected())
X1[:, -1] = 1.0
datasetCache = cache.datasetCache im_path = datasetCache.cache_file(im_path) label_path = datasetCache.cache_file(label_path)
GeneratedCertificate.eligible_certificates.all().delete()
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, call, NO_MOCK, NO_MOCK_REASON, MagicMock
import salt.ext.six as six
DEBUG = True
if is_request_from_mobile_app(request): return MobilePlatform.get_instance(user_agent)
preprocessor = CentralWindow(self._window_shape) for data in self._center: preprocessor.apply(data)
from __future__ import absolute_import import logging import os import time import re
if len(name.split()) > 1: cmd_kwargs.update({'args': name.split(' ', 1)[1]})
if isinstance(cmd, str): funs_to_check = [cmd] else: funs_to_check = cmd for fun in funs_to_check: if re.match(blacklisted_module, fun): return True
attempt = self.create_and_submit() assert_equals(attempt.status, "submitted")
from __future__ import absolute_import
from __future__ import absolute_import
iris = datasets.load_iris() rng = check_random_state(0) perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
from salt.ext.six.moves import range import salt.utils.cloud import salt.config as config from salt.exceptions import ( SaltCloudNotFound, SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
import salt.utils.network from salt.modules.inspectlib.dbhandle import DBHandle from salt.modules.inspectlib.exceptions import (InspectorQueryException, SIException)
task_folder = task_service.GetFolder(location) folders = task_folder.GetFolders(0)
huge = 2 ** (n_bits + 1) clf = DecisionTreeClassifier(splitter='best', max_leaf_nodes=huge) assert_raises(Exception, clf.fit, X, y)
self.assertFalse(has_access(self.non_staff_user, 'load', self_paced_course))
result = ExampleCertificateSet.latest_status(self.COURSE_KEY) self.assertIs(result, None)
PIPELINE_UGLIFYJS_BINARY = 'node_modules/.bin/uglifyjs'
log_url = sanitize_url(url_full, hide_fields)
csv_file.seek(0) csv_data = csv_file.read() csv_file.seek(0) csv_file.truncate() return csv_data
raise NotImplementedError()
from __future__ import absolute_import
info.insert(2, '')
assert_greater(clf.score(X_test, y_test), 0.99)
available_version = salt.utils.alias_function(latest_version, 'available_version')
if n_classes == 2: proba[:, 0] = 1. - proba[:, 1] else: proba /= np.sum(proba, axis=1)[:, np.newaxis]
import salt.utils
legacy_profile = UserProfile.objects.get(id=self.user.id) legacy_profile.year_of_birth = 2000 legacy_profile.save()
self.assertTrue(self.video.is_error_message_shown)
keyfile = os.path.join( opts['cachedir'], '.{0}_key'.format(user.replace('\\', '_')) )
redirect_response = self._redirect_if_necessary( message, already_verified, already_paid, is_enrolled, course_key, user_is_trying_to_pay, request.user, relevant_course_mode.sku ) if redirect_response is not None: return redirect_response
self.rm_lib() self.loader.clear() self.assertNotIn(self.module_key, self.loader)
self.iteration = sharedX(theano._asarray(0, dtype='int32'), name='iter')
course_key = SlashSeparatedCourseKey('mitX', '101', 'test') return utils.get_lms_link_for_about_page(course_key)
self.assertEqual(correct_map.get_overall_message(), "Overall message")
if not all(parent in yield_results for parent in parents): continue
self.assertEqual(response.status_code, 200) certificate_exception = json.loads(response.content)
import integration import salt.loader import inspect import yaml
self.children.extend(args) return self
randomize_module = RandomizeModule( randomize_descriptor, self.system, scope_ids=ScopeIds(None, None, self.course.id, self.course.id) )
from __future__ import absolute_import
self.assertFalse(user(email).is_active)
course_fixture = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
time_step = 5 return np.zeros((time_step, batch_size, self.dim), dtype=dtype)
return name not in _get_svc_list(name, 'ENABLED')
self.q(css=self._bounded_selector(".check-all-inline-discussions")).first.click()
source, source_hash = __salt__['file.source_list'](source, source_hash, __env__)
return self.find_courses(data['user'], CourseInstructorRole.ROLE, data.get('values'))
def __init__(self, user=None, course_id=None): self.user = user self.course_id = course_id
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'joyent', vm_['profile'], vm_=vm_) is False: return False
link = self._get_link(cobj) self._link_cache[full_name] = link
log = logging.getLogger(__name__)
import integration import salt.utils import salt.utils.find
response_element = etree.Element("javascriptresponse")
for name in SYMMETRIC_METRICS: metric = ALL_METRICS[name] assert_almost_equal(metric(y_true, y_pred), metric(y_pred, y_true), err_msg="%s is not symmetric" % name)
self.stderr.write(_('Could not find a group named "{}" - skipping.').format(group_name))
self.assertEqual(modal.release_date, u'1/1/1970')
salt '*' vsphere.get_coredump_network_config my.esxi.host root bad-password
self._base_test_extauth_auto_activate_user_with_flag(log_user_string="inactive@stanford.edu")
return {}
return [ credentials_factories.UserCredential( id=1, username='test', credential=credentials_factories.ProgramCredential() ), credentials_factories.UserCredential( id=2, username='test', credential=credentials_factories.ProgramCredential() ) ]
cart = Order.get_cart_for_user(request.user) cart.reset_cart_items_prices() CouponRedemption.remove_coupon_redemption_from_cart(request.user, cart) return HttpResponse('reset')
fstats_orig = os.stat(path_test)
RateLimitConfiguration = apps.get_model("util", "RateLimitConfiguration") objects = RateLimitConfiguration.objects if not objects.exists(): objects.create(enabled=True)
certs = __salt__['keychain.list_certs'](keychain)
on_course_publish(course_key)
repo = repo.split('\\') definition = name.split('.') repo.extend(definition)
eps = 1e-5 n, m = V.shape W, H = _initialize_nmf(V, r, init, random_state=0)
log.removeHandler(handler)
if validation.empty: validation.set_summary(summary)
from __future__ import absolute_import import os import tempfile
default_z += T.alloc(*([0.]+[shape[elem] for elem in self.h_space.axes])).astype(default_z.dtype) assert default_z.ndim == 4
elif usage_key.category in DIRECT_ONLY_CATEGORIES: return get_published()
import yaml from yaml.nodes import MappingNode from yaml.constructor import ConstructorError from yaml.scanner import ScannerError import salt.ext.six as six
self.setup_logfile_logger() verify_log(self.config)
AWS_QUERYSTRING_AUTH = AUTH_TOKENS.get('AWS_QUERYSTRING_AUTH', True)
open_assessment = ItemFactory.create( parent_location=vertical.location, category="openassessment", display_name="untitled", ) draft_open_assessment = self.store.convert_to_draft( open_assessment.location, self.user.id )
self.avg()
self.process_manager.stop_restarting() self.process_manager.send_signal_to_processes(signum) self.process_manager.kill_children() exit(0)
with open(self.f.name, 'w') as f: f.write("foo/hello/test.py:304:15: E203 whitespace before ':'")
fake_course_image = 'sample_image.png' course_overview = self._assert_image_urls_all_default(modulestore_type, fake_course_image)
#today = '' #today_fmt = '%B %d, %Y'
user = User(username=username, email=email, is_active=False) user.set_password(password)
import json import salt.ext.six import salt.ext.six.moves.http_client from salt.ext.six.moves.urllib.parse import urljoin as _urljoin
ascending = 1 descending = 2
return True
if 'admin_source' not in kwargs: os.unlink(adminfile)
from __future__ import absolute_import
expected_classes = ['Abdelatif Smith', 'Abhati Kepler', 'Onur Lopez'] assert_array_equal(lfw_people.target_names, expected_classes)
data = "Some data" ItemFactory.create( parent_location=self.library.location, category="html", display_name="Html Content 3", data=data, modulestore=store, publish_item=False, )
pls_ca = pls_.PLSCanonical(n_components=X.shape[1]) pls_ca.fit(X, Y)
self.navigate_to_video()
return 1 / numpy.sin(arg)
shutil.rmtree(folder_path)
if user not in self._user_enrollments: self._user_enrollments[user] = CourseEnrollment.enrollments_for_user(user) return self._user_enrollments[user]
ItemFactory.create( parent=parent, category='discussion', display_name='released', start=self.now, )
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'ATOMIC_REQUESTS': True, },
reg = RidgeClassifier(class_weight='balanced') reg.fit(X, y) assert_array_equal(reg.predict([[0.2, -1.0]]), np.array([1]))
if exc.errno != errno.EEXIST: raise
mask = labels == curr_label current_distances = distances[mask]
#html_last_updated_fmt = '%b %d, %Y'
recipient_list.append(finance_email)
import re
ret['comment'] = 'Database {0} is not present, so it cannot ' \ 'be removed'.format(name) return ret
JoblibException.__init__(self, message, etype) self.message = message self.etype = etype
if self.runtime.user_is_staff: msg = u"Staff debug info: {tb}".format(tb=cgi.escape(traceback.format_exc()))
header_callback('HTTP/1.0 {0} MESSAGE'.format(result.status_code)) streaming_callback(result.content) return { 'handle': result, }
if len(y) == 0: words = generator.randint(n_features, size=n_words) return words, y
if not self._check_enabled_suites(include_cloud_provider=True) and not self.options.name: return status
touch(name, makedirs=makedirs) retry_res, retry_msg = _check_file(name) if not retry_res: return _error(ret, check_msg)
return False
self.check_assertion_structure(assertion, response['results'][0])
if self.request_cache is None: return None return self.request_cache.data.setdefault('course_cache', {}).get(course_version_guid)
pre = __salt__['git.config_get_regexp']( cwd=repo, key=key, value_regex=None, user=user, ignore_retcode=True, **{'global': global_} )
self._assert_course_verification_status(VERIFY_STATUS_SUBMITTED)
else: mpriv = self.opts['pki_dir'] + '/' + 'master_sign.pem' if os.path.isfile(mpriv): self.privkey = mpriv
title = None
pylint_pattern = re.compile(r".(\d+):\ \[(\D\d+.+\]).")
import salt.utils from salt import syspaths from salt._compat import ElementTree as ET import salt.utils.http as http import salt.utils.aws as aws import salt.loader from salt.template import compile_template
from __future__ import absolute_import
C = np.array([[0., -0.7], [3.5, .7]]) stretched_gaussian = np.dot(np.random.randn(n_samples, 2), C)
return x * (x > 0)
from __future__ import absolute_import import logging
return PROCESSOR_MODULE.render_purchase_form_html(cart, **kwargs)
chapter = ItemFactory.create(parent_location=self.course.location, display_name=TEST_SECTION_NAME)
from salt.ext.six.moves import range from salt.ext.six.moves import zip from salt.ext.six.moves import map from stat import S_IMODE
import salt.ext.six as six
import logging import os
include_expired = not is_active if is_active is not None else False
line_start_indexes = [0] index = 0 while True: index = string.find('\n', index) if index < 0: break index += 1 line_start_indexes.append(index) return line_start_indexes
self.assertFalse(bool(version))
rng = np.random.RandomState(42)
with modulestore().default_store(ModuleStoreEnum.Type.mongo): self.course = CourseFactory.create()
node = _guess_node_id(node) apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
courses = [] for modulestore in self.modulestores: courses.extend(modulestore.get_courses_for_wiki(wiki_slug, **kwargs)) return courses
if salt.utils.is_true(kwargs.get('removed')): return {}
import os
context = {
course_email = CourseEmail.create( self.course.id, self.instructor, [SEND_TO_MYSELF, SEND_TO_STAFF, SEND_TO_LEARNERS], "Test Subject", "<p>This is a test message</p>" ) return course_email.id
return {key: val for key, val in self.session.cookies.items()}
disable_jquery_animations(page) disable_css_animations(page)
return self.prior.sample_from_p_z(num_samples, **kwargs)
id_cache = os.path.join(root_dir, config_dir.lstrip(os.path.sep), 'minion_id')
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
try: length = len(line.decode('utf-8')) except UnicodeError: pass
netapi = salt.netapi.NetapiClient(__opts__) if not netapi._is_master_running(): raise salt.exceptions.SaltDaemonNotRunning( 'Salt Master must be running.')
salt.utils.atomicfile.atomic_open( os.path.join(hn_dir, RETURN_P), 'w+b' )
'recon_default': float,
coefs2 = ridge_regression( X * np.sqrt(sample_weight)[:, np.newaxis], y * np.sqrt(sample_weight), alpha=alpha, solver=solver) assert_array_almost_equal(coefs, coefs2)
FEATURES['ENABLE_OAUTH2_PROVIDER'] = True
ModeCreationPage( self.browser, self.course_id, mode_slug=u'verified', mode_display_name=u'Verified Certificate', min_price=10, suggested_prices='10,20' ).visit()
assert self.get_mlp() is None self.mlp = mlp
for attr, val in attr_dict.iteritems(): if attr in self.ATTRS_ALLOWED_TO_UPDATE: setattr(self, attr, val) else: self.fields[attr] = val
course = modulestore().get_course(course_id, depth=4)
grains.update(_virtual(grains)) grains.update(_ps(grains))
y_subpopulation = np.zeros((max(n_subsamples, n_features))) lstsq, = get_lapack_funcs(('gelss',), (X_subpopulation, y_subpopulation))
self.course_enrollment.change_mode(self.mode) self.course_enrollment.activate()
return traverse_post_order( start_node=self.root_block_usage_key, get_children=self.get_children, filter_func=filter_func, )
self.mappings[course_key] = store
#html_additional_pages = {}
data = dict( logo_src=branding_api.get_logo_url(), logo_url=branding_api.get_base_url(is_secure), ) return data
return self._get_xblocks(".is-inactive ")
options.mode = 'dev' test_js(options)
report_dir = (Env.REPORT_DIR / system).makedirs_p()
courses_list_by_groups, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(len(courses_list_by_groups), 1)
_porttree().dbapi.settings.reset() _porttree().dbapi.settings.lock() return use, use_expand_hidden, usemask, useforce
with self.assert_logged('SafeCookieData not created due to invalid value for session_id'): yield
def g_test(x): return x ** 3, (3 * x ** 2).mean(axis=-1)
DEFAULT_COURSE_ABOUT_IMAGE_URL = ENV_TOKENS.get('DEFAULT_COURSE_ABOUT_IMAGE_URL', DEFAULT_COURSE_ABOUT_IMAGE_URL)
return ret
from __future__ import absolute_import
from __future__ import unicode_literals
tag = self.runtime.service(self.mock_block, 'user_tags').get_tag(self.scope, self.key) self.assertIsNone(tag)
'always_verify_signature': bool,
return self._tax_deduction_msg()
assert_equal(rp.n_components, 'auto') assert_equal(rp.n_components_, 110)
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
'permissive_pki_access': bool,
self.store.create_child( self.user_id, self.course.location, 'static_tab' )
assert_equal(7, counts_1.max()) assert_equal(7, counts_3.max()) assert_equal(7, counts_None.max())
grid = GridSearchCV(clf, refit=False, param_grid=param_grid, cv=ShuffleSplit(train_size=train_size, n_iter=250, random_state=1)) grid.fit(X, y) scores = [x[1] for x in grid.grid_scores_]
ret = {'name': name, 'result': False, 'comment': '', 'changes': {},
'verified_track_content',
rval = transform(raw_batch)
for plot in self.plots: if plot.freq is None: plot.freq = self.freq
instructor_task = self._create_email_subtask_entry( total=total, attempted=attempted, succeeded=succeeded, skipped=skipped, task_state=SUCCESS, ) return self._test_get_status_from_result(instructor_task.task_id)
self.q(css=self.COMPONENT_BUTTONS[button_name]).first.click() self.wait_for_ajax()
pass
assert library.location.library_key.version_guid is not None return library.location.library_key.version_guid
return course_metadata_utils.course_end_datetime_text( self.end, format_string, strftime_localized )
from salt.utils.openstack.pyrax import authenticate
self.assertFalse(self.video.is_menu_present('download_transcript'))
self.factory(penalty='foobar', l1_ratio=0.85)
self.client.logout() resp = self.client.get(self.url_locked) self.assertEqual(resp.status_code, 403)
return _render_certificate_template(request, context, course, user_certificate)
return
assert_equal(len(slo), n_iter)
return self.student_email_input.is_present()
self.advanced_settings.wait_for_modal_load()
state_run = self.run_function('state.sls', mods='requisites.onfail_in_simple')
with mock_create_basket(exception=exceptions.Timeout): response = self._post_to_view() self.assertValidEcommerceInternalRequestErrorResponse(response) self.assertUserNotEnrolled()
flags += libvirt.VIR_CONNECT_BASELINE_CPU_EXPAND_FEATURES
assert len(state) == 2 assert isinstance(coeffs, float) _, state = state state = [state] coeffs = [coeffs]
from __future__ import absolute_import
serialized_course_team['content'] = { 'text': self.content_text() }
import integration
return ''.join(traceback.format_exception(*exc_info))
if isinstance(space, CompositeSpace): return all(specifies_all_dtypes(subspace) for subspace in space.components) else: return space.dtype is not None
self.assertFalse(form.is_valid())
import integration
if content.thumbnail_location is not None: try: thumbnail_content = trash.find(content.thumbnail_location) store.save(thumbnail_content) except Exception:
assert_array_equal(mb_k_means.predict(X_csr), mb_k_means.labels_)
for vdev in vdevs: if os.path.isfile(vdev): ret[vdev] = 'existed' else: dlist.append(vdev)
self.assertEqual(data['course_mode_slug'], "verified")
_run_command(['yum', '-y', 'install'] + build_reqs)
self._update_password(staff_email, "updated") self._login(staff_email, "updated")
'enable_lspci': bool,
import integration import salt.utils
expr = stripXML(self.mathml_start + expr + self.mathml_end) expected = stripXML(self.mathml_start + expected + self.mathml_end)
self._send_pub(payload)
return self.list_price if self.list_price else self.unit_cost
return len(tsql_query(query="SELECT name FROM sysusers WHERE name='{0}'".format(username), **kwargs)) == 1
self.mean_ = numpy.mean(X, axis=0) X -= self.mean_
group_element_names = { 'checkbox': 'checkboxgroup', 'radio': 'radiogroup', 'multiple': 'choicegroup' }
self.update_masquerade(role='student', user_name=self.student_user.username) self.assertEqual(self.get_progress_detail(), u'2/2')
MOCK_HOSTNAME = 'very.long.complex.fqdn.that.is.crazy.extra.long.example.com'
remote_ref_type = 'ref' if len(ref) <= 40 \ and all(x in string.hexdigits for x in ref): ref = ref.lower() remote_ref_type = 'hash'
from __future__ import absolute_import
__virtualname__ = 'quiet'
import salt.utils.compat from salt.utils.odict import OrderedDict import yaml import salt.ext.six as six
slot = str(slot) return slots[slot]['slotname']
ax.plot_surface(X, Y, Z.T, cstride=1, rstride=1, color=c, alpha=0.8)
return ( CourseKey.from_string(course_key_or_id) if isinstance(course_key_or_id, basestring) else course_key_or_id )
if not os.path.exists(TMP_JID_DIR): os.makedirs(TMP_JID_DIR)
self.errored_courses[course_dir] = errorlog
container.add_missing_groups() self.verify_groups(container, ['Group B', 'Second Group', 'Group D'], ['Group ID 0'])
long_name += '1' self.assertEqual(len(long_name), 49) self.assertFalse(linode._validate_name(long_name))
log = logging.getLogger(__name__)
if '@' in username_or_email: return User.objects.get(email=username_or_email) else: return User.objects.get(username=username_or_email)
use = zipped[1:]
([], []),
if math_string != '4': raise err
metric_str = metric if name in METRICS_WITH_POS_LABEL: metric_str = partial(metric_str, pos_label=pos_label_str)
from __future__ import absolute_import import os import shutil
from salt.states import postgres_group
for static_dir in STATICFILES_DIRS: try: _, data_dir = static_dir except ValueError: data_dir = static_dir
assert_equal(clf.fit(x, y).score(x, y), 1.0, 'using covariance: %s' % solver)
@ignore_warnings(category=DeprecationWarning) def test_verbose_second_level(): X = rng.randn(30, 5) X[:10] += 2 g = mixture.GMM(n_components=2, n_init=2, verbose=2)
if xblock_name is None: xblock_name = TestCrowdsourceHinter.XBLOCK_NAMES[0] resp = self.call_event(handler, resource, xblock_name) self.assertEqual(resp[resp_key], resp_val) self.assert_request_status_code(200, self.course_url)
ForestClassifier = FOREST_CLASSIFIERS[name]
from salt.modules import mac_pkgutil
if is_request_from_mobile_app(request): return HttpResponse(status=401)
for name in names: ret[name] = ''
saltenviron(environ)
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
self._auto_auth(self.USERNAME, self.EMAIL, False)
assert_raises(ValueError, auc, [0.0], [0.1])
log.debug(' Response content: {0}'.format(response))
self.wait_for( lambda: "Add a New Cohort" in self.q(css=self._bounded_selector(".form-title")).text, "Create cohort form is visible" )
from __future__ import absolute_import import os
return _dismiss_notification(request, action_state_id)
assert_equal(y[train].size + y[test].size, y.size)
return [True]
def future_with_timeout_callback(future): if future._future_with_timeout is not None: future._future_with_timeout._done_callback(future)
return has_studio_write_access(user, course_key)
n_jobs, _, _ = _partition_estimators(self.n_estimators, self.n_jobs)
assert_array_equal(votes, np.round(decisions))
if 'username' in ret and not ret['username']: ret['username'] = salt.utils.get_user()
from __future__ import unicode_literals
import copy import re import logging
clf = GradientBoostingRegressor(n_estimators=10, random_state=1) clf.fit(boston.data, boston.target)
if not os.path.exists(dataset_conf_path): os.makedirs(dataset_conf_path)
account_settings = AccountSettingsPage(self.browser).visit() account_settings.switch_account_settings_tabs('accounts-tab')
'master_failback_interval': int,
CourseEnrollment.enroll(user_who_created_course, course_key)
self._assertOLXBase(block_list, draft=True, published=True)
cls.url = reverse('instructor_dashboard', kwargs={'course_id': cls.course_key.to_deprecated_string()}) cls.email_link = '<a href="" data-section="send_email">Email</a>'
return Fragment(self.get_html())
y = [0, 1, 2, 3] * 3 + [4, 5] * 5 X = np.ones_like(y)
#html_favicon = None
def __unicode__(self): return u'ApiAccessConfig [enabled={}]'.format(self.enabled)
self.client.login(username=self.global_staff.username, password="test")
return BACKEND.get_value_for_org(org, val_name, default)
self.assertDeserializeEqual('False', 'False') self.assertDeserializeEqual('True', 'True')
def __setstate__(self, state): self._is_child = True Reactor.__init__( self, state['opts'], log_queue=state['log_queue'])
try: import boto import boto.exception logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
if len(indices) != n_samples: return False hit = np.zeros(n_samples, bool) hit[indices] = True if not np.all(hit): return False return True
'master_uri_format': str,
self.assertEqual( self.course.clean_id(), "course_ORSXG5C7N5ZGOL3UMVZXIX3DN52XE43FF52GK43UL5ZHK3Q=" ) self.assertEqual( self.course.clean_id(padding_char='$'), "course_ORSXG5C7N5ZGOL3UMVZXIX3DN52XE43FF52GK43UL5ZHK3Q$" )
cache = uuid() if cache: if not force: log.error('BCache cache {0} is already on the system'.format(cache)) return False cache = _bdev()
#epub_use_index = True
return LtiConsumer( consumer_name='Consumer Name', consumer_key='Consumer Key', consumer_secret='Consumer Secret' )
from __future__ import absolute_import import libcloud.security import platform import os
if self.cleaned_data.get("_expiration_datetime"): return self.cleaned_data.get("_expiration_datetime").replace(tzinfo=UTC)
u_flipped_with_transpose, _, v_flipped_with_transpose = randomized_svd( mat, 3, flip_sign=True, transpose=True) u_based, v_based = max_loading_is_positive( u_flipped_with_transpose, v_flipped_with_transpose) assert_true(u_based) assert_false(v_based)
from __future__ import absolute_import import os import re import logging import glob
get_space = lambda i: (model.aes[i].get_input_space() if i == 0 else model.aes[i - 1].get_output_space())
y = f(X).ravel()
from __future__ import absolute_import import os
if not isinstance(content, str): raise AssertionError("Expected content to be of type str, got " + str(type(content)))
__virtualname__ = 'raid'
return data['alias'], data['driver'], ()
submitted = self._unpack(student_answer) option_ids = submitted['options_value'] if len(option_ids) == 1: return option_ids[0] return None
for mode in [CourseMode.DEFAULT_MODE_SLUG, CourseMode.VERIFIED]: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode, mode_display_name=mode, )
cohort = CohortFactory(course_id=self.course.id, users=[]) self._verify_non_staff_cannot_access( add_users_to_cohort, "POST", [unicode(self.course.id), cohort.id] )
from salttesting import skipIf from salttesting.helpers import ( ensure_in_syspath, requires_salt_modules, requires_system_grains, destructiveTest, ) ensure_in_syspath('../../')
courses_list_by_groups, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(courses_list_by_groups, [])
self.group_configurations_page.visit() self.assertFalse(self.group_configurations_page.experiment_group_sections_present)
sequential = self.store.create_child( self.user_id, chapter.location, 'sequential', block_id='subsection_one' ) self.store.publish(sequential.location, self.user_id)
return (self.network_address.is_loopback and self.broadcast_address.is_loopback)
return capa_module
self.check_discussion( tab_list=self.tabs_without_discussion, expected_discussion_link=not None, expected_can_display_value=False, )
salt '*' vsphere.get_service_policy my.esxi.host root bad-password 'ssh'
self.assertTrue(self.profile.requires_parental_consent()) self.assertTrue(self.profile.requires_parental_consent(default_requires_consent=True)) self.assertFalse(self.profile.requires_parental_consent(default_requires_consent=False))
exc_info_on_loglevel=logging.DEBUG
raised = False try: fmt.theano_expr(theano.tensor.itensor3()) except ValueError: raised = True assert raised
assert_equal(distances.shape, (n_queries,)) assert_equal(distances.dtype, object) assert_equal(neighbors.shape, (n_queries,)) assert_equal(neighbors.dtype, object)
instance = self.run_cloud('-p ec2-test {0}'.format(INSTANCE_NAME)) ret_str = '{0}:'.format(INSTANCE_NAME)
errors = [] minions = [] for minion in response: minions.append(minion) if not response[minion]: errors.append(minion)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
set_input_value(self, self.COURSE_RUN_INPUT, value)
if total is None: return (None, None) else: max_scores_cache.set(problem_descriptor.location, total)
return self.state != 'buffering'
last_name_label = _(u"Last Name")
if not os.path.isdir(repo_dir): os.mkdir(repo_dir) self.addCleanup(shutil.rmtree, repo_dir)
for key, value in configs: self.setConfig(key, value)
import re import os import logging
log = logging.getLogger(__file__)
ret = {'pid': PId}
import logging
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True], credit_type='edc' )
skip_if_no_sklearn() mapping = {'dataset_iterator': 'StratifiedDatasetValidationKFold'} test_yaml = test_yaml_dataset_iterator % mapping trainer = yaml_parse.load(test_yaml) trainer.main_loop()
import os import logging import smtplib import StringIO from email.utils import formatdate
plt.figure(1, figsize=(3, 2.2)) plt.imshow(face, cmap=plt.cm.gray, vmin=vmin, vmax=256)
return [('127.0.0.1:11211 (1)', {})]
self.course = CourseFactory.create(default_store=store) self.course.course_image = '' url = course_image_url(self.course) self.assertEqual('static/test.png', url)
get_version = { 'Linux': linux_netstats, 'FreeBSD': freebsd_netstats, }
response = self.client.post(self.send_mail_url, test_email) self.assertEquals(json.loads(response.content), self.success_content)
if avz not in zones: raise SaltCloudException( 'The specified availability zone isn\'t valid in this region: ' '{0}\n'.format( avz ) )
from salt.states import host
cmd = 'make-bcache --cache /dev/{0} --block {1} --wipe-bcache'.format(dev, block_size)
url = reverse('create_mode', args=[unicode(self.course.id)]) response = self.client.get(url)
with open(file_path, "w") as file_handle: with self._log_execution_time(): self._write_email_opt_in_prefs(file_handle, org_list, courses)
self._do_create_preferences_test(False)
from django.db import migrations, models
return submit_delete_problem_state_for_all_students(self.create_task_request(instructor), location)
newrelic.agent.add_custom_parameter('seq.num_units', len(display_items))
new_mean_squared_grad = (self.decay * mean_square_grad + (1 - self.decay) * T.sqr(grads[param]))
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
from lms.envs.test import ( WIKI_ENABLED, PLATFORM_NAME, SITE_NAME, DEFAULT_FILE_STORAGE, MEDIA_ROOT, MEDIA_URL, )
sorted_mappings = sorted(mappings, key=lambda m: (-len(m[0]), m[0]))
responsibilities = np.zeros((X.shape[0], self.n_components))
self.save()
log.error('Detected nodegroup expansion failure of "{0}"'.format(word)) return []
return os.path.dirname(self._get_module_path(module))
CourseModeFactory.create(course_id=self.COURSE_KEY, mode_slug=CourseMode.HONOR) data = certs_api.get_certificate_header_context(is_secure=True)
self.set_year_of_birth(current_year - 10) self.profile.save() self.assertFalse(self.profile.has_profile_image)
task_type = 'grade_problems' task_class = calculate_problem_grade_report task_input = {} task_key = "" return submit_task(request, task_type, task_class, course_key, task_input, task_key)
course_mode_info = { enrollment.course_id: complete_course_mode_info( enrollment.course_id, enrollment, modes=course_modes_by_course[enrollment.course_id] ) for enrollment in course_enrollments }
from __future__ import absolute_import try: import grp except ImportError: pass
if batch is None or (isinstance(batch, tuple) and len(batch) == 0): return True
validate_xml(input_xsd, output_xml)
n_dtypes = 2 old_nchannels = shape[2] shape[2] = old_nchannels / 2 assert shape[2] * 2 == old_nchannels, \
response = client2.post(self.url, creds) self._assert_response(response, success=True)
self.q(css=self.content_groups_css + " .action-add").first.click()
def __init__(self, *vargs): pass
destroy(vm_['name'])
import logging import os
if d_yard in self.lane_stack.value.nameRemotes: self.lane_stack.value.transmit(msg, self.lane_stack.value.nameRemotes[d_yard].uid) return return
scikit_classifier_results = [] scikit_regressor_results = []
self.assertEqual( self.run_function('shadow.get_login_failed_last', [NO_USER]), 'ERROR: User not found: {0}'.format(NO_USER))
ws.send('websocket client ready')
REQUIRE_DEBUG = False
set_course_cohort_settings(course_key=self.course.id, is_cohorted=False) check_cohorted(False)
self.field_data = inheriting_field_data(kvs=DictKeyValueStore())
return 'assets.{}'.format(asset_type)
self.master_opts['file_roots']['base'] = [os.path.join(integration.FILES, 'file', 'base')]
from __future__ import absolute_import import os import time import random import logging import itertools from collections import deque from _socket import gaierror
X -= X.min()
saltstack_version.sha = out.strip() saltstack_version.noc = -1
from __future__ import absolute_import
with self._secondary_action_menu_open("#comment_{}".format(comment_id)): return self._is_element_visible("#comment_{} .action-edit".format(comment_id))
return u"{verification_reminder} {refund_reminder}".format( verification_reminder=verification_reminder, refund_reminder=refund_reminder )
import socket import random import time import codecs import uuid import logging import json
x = np.atleast_2d(np.linspace(0, 10, 1000)).T
import salt.utils.dictupdate as dictupdate from salt.utils import exactly_one from salt.exceptions import SaltInvocationError, CommandExecutionError
yml_obj = obj.copy()
return ''
theta0, thetaL, thetaU = self.theta0, self.thetaL, self.thetaU corr = self.corr verbose = self.verbose
__virtualname__ = 'system'
return self.q(css=self._bounded_selector('.cohort-management-group-setup .setup-value')).first.text[0]
self.assertFalse(has_access(self.normal_student, 'load', self.content, self.course.id))
if not salt_data: return _globals
import salt.utils from salt.exceptions import CommandExecutionError
avg_X2 = np.dot(responsibilities.T, X * X) * norm avg_means2 = gmm.means_ ** 2 avg_X_means = gmm.means_ * weighted_X_sum * norm return avg_X2 - 2 * avg_X_means + avg_means2 + min_covar
import salt.ext.six as six
test_ssh_host = host test_ssh_port = port
for state in READY_STATES: running_tasks = running_tasks.exclude(task_state=state) return len(running_tasks) > 0
from salt.exceptions import CommandExecutionError
return self.get_selector('div.running-tasks-container')
return environ.get(key)
errs = {} for store in self.modulestores: errs.update(store.get_errored_courses()) return errs
random_state = np.random.RandomState(0) n_samples, n_features = X.shape X = np.c_[X, random_state.randn(n_samples, 200 * n_features)]
return cls.objects.filter(requirement__in=requirements, username=username)
score = float(score) if not 0 <= score <= 1: raise LTIError('score value outside the permitted range of 0-1.')
draft_preferred = 'draft-preferred' published_only = 'published-only'
if not settings.FEATURES['ADVANCED_SECURITY']: return False min_diff_pw = settings.ADVANCED_SECURITY_CONFIG.get( 'MIN_DIFFERENT_STUDENT_PASSWORDS_BEFORE_REUSE', 0 ) return min_diff_pw > 0
state_run = self.run_function('state.sls', mods='requisites.onchanges_in_simple')
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.save_problem(get_request_dict)
temp_file = _mkstemp_copy(path=path, preserve_inode=preserve_inode)
self.payment_and_verification_flow.proceed_to_payment()
finger += '{0}:'.format(pre[ind])
self.assertEqual("original_get_html", self.problem.get_html())
def capture(f, mapping=mapping): new_f = lambda *args: f(mapping.flatten(args, return_tuple=True)) return new_f
mappings = mappings or {} self.store = MixedModuleStore( contentstore, create_modulestore_instance=create_modulestore_instance, mappings=mappings, **self.options ) self.addCleanup(self.store.close_all_connections)
return social_models.DjangoStorage.user.user_model().objects.get(username=username)
from __future__ import unicode_literals
log.debug('Destroying carbon socket')
lti_params = response[LTI_PARAMS_KEY] return lti_params['oauth_consumer_key'] + ":" + lti_params['user_id']
salt '*' win_update.list_updates fields="['Title', 'Description']"
for periodic_cb in six.itervalues(self.periodic_callbacks): periodic_cb.start()
#latex_appendices = []
if not os.path.isabs(url_data.path): raise CommandExecutionError( 'Path \'{0}\' is not absolute'.format(url_data.path) ) return url_data.path
if value == 0: return 0 return math.pow(2, math.ceil(math.log(value, 2)))
self._create_test_file( 'test_include.xml', '<test>Test include</test>' )
with patch('capa.capa_problem.LoncapaProblem.grade_answers') as mock_grade: mock_grade.side_effect = exception_class('test error')
self._layers.append(layer) if self._params is not None: self._params.update(layer._params)
self.resid = np.zeros(n, tp) info = 0
vect = CountVectorizer(analyzer='char', max_df=1.0, binary=True, dtype=np.float32) X_sparse = vect.fit_transform(test_data) assert_equal(X_sparse.dtype, np.float32)
from __future__ import absolute_import import os import logging
self.video.show_captions()
raise NotImplementedError()
EmptyPromise( lambda: self.q(css=".current-signature-image .signature-image").present, 'Signature image available' ).fulfill()
if not settings.FEATURES.get(feature_name, False): return HttpResponseBadRequest() return view_func(request, *args, **kwargs)
return topic_name_to_id(course, name)
_config_filename_ = 'master' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'master') _setup_mp_logging_listener_ = True
return (self.get_input_space(), self.get_input_source())
GitBase.__init__(self, opts, valid_providers=('gitpython', 'pygit2'), cache_root=winrepo_dir)
make_user_coach(coach, master_course_key)
return CreditCourse.is_credit_course(course_key=course_key)
if os.path.exists(filename): os.remove(filename)
self.register_comment() update_comment(self.request, "test_comment", {}) for request in httpretty.httpretty.latest_requests: self.assertEqual(request.method, "GET")
from __future__ import absolute_import import time import datetime
post = None
resp = self.client.post( '/shoppingcart/payment_fake', dict(post_params) )
return response
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath, TestsLoggingHandler from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
tmp_file = os.path.join(integration.TMP, 'issue-2379-file-append.txt') salt.utils.fopen(tmp_file, 'w').write(
btrfs.__grains__ = {} btrfs.__salt__ = {} btrfs.__context__ = {}
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
large_width = models.IntegerField(default=750) large_height = models.IntegerField(default=400)
delete_user_preference(request.user, DARK_LANGUAGE_KEY) user_pref = get_user_preference(request.user, LANGUAGE_KEY) if user_pref: request.session[LANGUAGE_SESSION_KEY] = user_pref
response = self.client.put(self.path, json.dumps(expected), content_type=JSON_CONTENT_TYPE)
import salt.utils import salt.utils.files import salt.utils.decorators as decorators from salt.exceptions import ( SaltInvocationError, CommandExecutionError, ) from salt.ext.six.moves import range
import matplotlib.pyplot as plt
V = rng.rand(n_features, n_features) VI = np.dot(V, V.T)
if blocked and unsatisfied: ret['blocked'] = blocked
from salttesting.helpers import ensure_in_syspath
grid = np.random.rand(10, 2, 1) assert_raises(ValueError, partial_dependence, clf, [0], grid=grid)
cost = None
try: import Crypto.Random except ImportError:
split_test = self.get_item_from_modulestore(self.split_test_usage_key, True) self.assertEqual(expected_number, len(split_test.children)) return split_test
import json import logging import requests
__virtualname__ = 'junos'
if gated_content and unicode(section.location) in gated_content: continue if section.hide_from_toc: continue
if line > num_template_lines: return template
self.assertRolledBack() self.assertFalse(email_user.called)
before = attempt.created_at - timedelta(seconds=1) query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(before, query) self.assertIs(result, None)
try: import boto import boto.ec2 logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
if self.child_fd: fd_flags = fcntl.fcntl(self.child_fd, fcntl.F_GETFL) if self.child_fde: fde_flags = fcntl.fcntl(self.child_fde, fcntl.F_GETFL)
'grains_dirs': list,
if not sparse.isspmatrix_lil(connectivity): if not sparse.isspmatrix(connectivity): connectivity = sparse.lil_matrix(connectivity) else: connectivity = connectivity.tolil()
rmtree(fs_root, ignore_errors=True)
click_css(self, '.wrapper-mast nav.nav-actions .button-new')
X = iris.data
if ccxs.exists(): return ccxs[0] return None
from course_modes.models import CourseMode
elif isinstance(proxy, six.string_types): return preprocess(proxy) else: return proxy
from __future__ import absolute_import
self.assertTrue(all_gradesets[student1]) self.assertTrue(all_gradesets[student2]) self.assertTrue(all_gradesets[student5])
self._check_is_symbolic(batch) self._validate(is_numeric=False, batch=batch)
self.assertEqual(expected_title, unit.release_title) self.assertEqual(expected_date, unit.release_date)
self.refresh_course() return problem
modulestore().get_item(usage_key)
self.assertEqual(str(user.username.encode('utf-8')), UsernameCipher().decrypt(str(pref.value)))
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
response = self.client.get(self.path, **headers) self.assertEqual(response.status_code, 403)
relative_path = parts.repo or "gentoo"
profile_privacy = UserPreference.get_value(user, ACCOUNT_VISIBILITY_PREF_KEY) return profile_privacy if profile_privacy else configuration.get('default_visibility')
return _after_ignition_network_profile(cmd, ret, name, network_profile, path, nic_opts)
from __future__ import absolute_import
self.testing_course.enrollment_start = self.tomorrow self.testing_course.enrollment_end = self.nextday self.testing_course = self.update_course(self.testing_course, self.user.id)
return name.replace(':', '/')
providers_string = _("{first_provider} and {second_provider}").format( first_provider=providers[0], second_provider=providers[1] )
user = self.create_user_and_enroll('honor') with self.assertNumQueries(3): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
from __future__ import absolute_import import os import re import logging
self.assertFalse(result['success']) self.assertIn(u"inconsistent data", result['error_html'])
return sorted(iteritems(d), key=operator.itemgetter(1), reverse=True)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
from __future__ import absolute_import import os
if self.cert_status is not None: return { 'status': self.cert_status, 'can_unenroll': self.cert_status not in DISABLE_UNENROLL_CERT_STATES } else: return {}
request = Request.blank('') response = self.item_descriptor.studio_transcript(request=request, dispatch='translation/uk') self.assertEqual(response.status, '400 Bad Request')
post_login_handler = _finish_auth_url(params) js_success_var = 'var nextUrl = "{}";'.format(post_login_handler) self.assertContains(response, js_success_var)
self.profile.level_of_education = level_of_education self.profile.save()
modules = get_accessible_discussion_modules(course, self.non_staff_user) self.assertTrue( all(module.display_name == 'released' for module in modules) )
iris = datasets.load_iris()
brc4 = Birch(threshold=10000.) assert_warns(UserWarning, brc4.fit, X)
packages_really_to_upgrade=[] for this_package in packages_to_upgrade: if this_package in installed_packages_list:
if not self.test_spec: test_spec = self.test_dir else: test_spec = self.test_dir / self.test_spec
return self.get_comment_list_url(obj, endorsed=False)
self.assertFalse(version)
import_course_from_xml( draft_store, 999, DATA_DIR, ['test_import_course'], static_content_store=content_store, do_import_static=False, verbose=True, target_id=SlashSeparatedCourseKey('guestx', 'foo', 'bar') )
if url_name is None or url_name == "": url_name = fallback_name()
DEBUG_TOOLBAR_MONGO_STACKTRACES = True
self.assertIn('Activate Course Enrollment', response.content)
X_no_array = NotAnArray(X_dense) result = check_array(X_no_array) assert_true(isinstance(result, np.ndarray))
from __future__ import absolute_import
return start(name, path=path)
ridge_gcv.fit(filter_(X_diabetes), y_diabetes, sample_weight=np.ones(n_samples)) assert_equal(ridge_gcv.alpha_, alpha_)
GeneratedCertificateFactory( user=self.bob, course_id=self.alternate_course_id, mode=MODES.verified, status=failing_status, )
course = modulestore().get_course(course_key, depth=0) if course is None: raise CourseNotFoundError return course
#import salt.ext.six as six
ret[bucket_name] += [k for k in filePaths if not k.endswith('/')]
try: temp_file = _mkstemp_copy(path=path, preserve_inode=False) except (OSError, IOError) as exc: raise CommandExecutionError("Exception: {0}".format(exc))
from salt.exceptions import SaltSystemExit import salt.utils import salt.modules.vsphere
self.get_readlock(local_name) self.release_writelock()
ret['changes'] = exc.info.get('changes', {}) ret['comment'] = exc.strerror_without_changes
self.client.logout() ModuleStoreTestCase.tearDown(self)
assert_raises(ValueError, next, KFold(4).split(X1))
for obj in objs: name = str(obj.Name).replace(prefix, '', 1) ret[name] = str(obj.LogModuleId)
ip_blacklist_url = reverse( 'embargo_blocked_message', kwargs={ 'access_point': 'courseware', 'message_key': 'embargo' } ) return redirect(ip_blacklist_url)
if job.startswith('__') and not show_all: del schedule[job] continue
return comdat['stderr']
pv = get_weights_report.get_weights_report(model_path=model_path, rescale=rescale, border=border) if out is None: pv.show() else: pv.save(out)
lc_block = self._add_library_content_block(course, self.lib_key) lc_block = self._refresh_children(lc_block) self.assertEqual(len(lc_block.children), 1)
from salt.exceptions import SaltException from salt.modules import grains as grainsmod from salt.utils import dictupdate
if not organizations: raise Exception( 'Configuration error. Microsite {key} does not have any ORGs mapped to it!'.format( key=microsite_object.key ) )
return _save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=task_definition.Principal.UserID, password=None, logon_type=task_definition.Principal.LogonType)
self.assert_enrollment_status(username='fake-user', expected_status=status.HTTP_404_NOT_FOUND, as_server=False) self.assert_enrollment_status(username='fake-user', expected_status=status.HTTP_406_NOT_ACCEPTABLE, as_server=True)
relative_path = 'just_a_test.jpg' absolute_path = base_url + relative_path
X = np.array([
if deploy: vm_info['key_filename'] = key_filename vm_info['ssh_host'] = ip
client_kwargs['version'] = 'auto'
precompute = self.precompute if hasattr(precompute, '__array__'): Gram = precompute elif precompute == 'auto': Gram = 'auto' else: Gram = None return Gram
return self.q(css='.annotatable-title').text[0]
import salt.utils.reactor
if template not in salt.utils.templates.TEMPLATE_REGISTRY: raise CommandExecutionError( 'Attempted to render file paths with unavailable engine ' '{0}'.format(template) )
return False
saltenv = env
if not version: version = __salt__['pkg.version'](name)
self.assertEqual(response.status_code, 405)
from __future__ import absolute_import from __future__ import unicode_literals import sys import logging
from __future__ import absolute_import import socket
world.wait_for_js_to_load()
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath ) ensure_in_syspath('../../')
self.register_get_thread_response(thread) return get_comment_list(self.request, thread["id"], endorsed, page, page_size)
self.assertEqual(self.do_email_validation(self.user.email), 'Old email is the same as the new email.')
X[:, :n_informative] = generator.randn(n_samples, n_informative)
self.unit_page.xblocks[1].open_advanced_tab()
pkg_info = self._pkgdb_fun('info', package, self.db_conn) if pkg_info is None: raise SPMInvocationError('Package {0} not installed'.format(package))
return getattr(estimator, "_estimator_type", None) == "classifier"
config = CourseEventBadgesConfiguration.current().enrolled_settings enrollments = user.courseenrollment_set.filter(is_active=True).count() award_badge(config, enrollments, user)
self.client.login(username=self.user.username, password='test')
text = views.course_about(self.request, unicode(course_key)).content return text
return _error(ret, u_check)
input_dict = {'1_2_1': '21'} correct_map = problem.grade_answers(input_dict)
config.delete() self.assertEqual(len(self.group_configurations_page.content_groups), 0)
BlockCountsTransformer.collect(self.block_structure) self.block_structure._collect_requested_xblock_fields()
with self.store.branch_setting(ModuleStoreEnum.Branch.published_only, source_course_key): component = self.store.get_item(unit.location) self.assertEqual(component.display_name, updated_display_name)
self.click(".action-cancel")
super(FakePaymentPage, self).__init__(browser) self._course_id = course_id
import salt.ext.six as six
super(ForgotPasswordPageTest, self).setUp() self.user_info = self._create_user() self.reset_password_page = ResetPasswordPage(self.browser)
try: shutil.rmtree(lock_file) except OSError as exc: _add_error(failed, exc)
import numpy import theano from theano import tensor from theano.compat.six.moves import zip as izip, reduce
'external_auth', 'django_openid_auth',
mock_from_django_user.return_value = Mock()
has_skipped = cls.objects.filter(user_id=user_id, course_id=course_id).exists() return has_skipped
module.system.user_is_staff = False
if not self._verify_auth(): self.redirect('/login') return
import salt.pillar import salt.utils from salt.defaults import DEFAULT_TARGET_DELIM from salt.exceptions import CommandExecutionError
y = test['y'][:, 0] - 1 assert y.shape == (8000,)
return {'access_token', 'refresh_token', 'token_type', 'expires_in', 'scope'}
return self.q(css='.create-team.wrapper-msg .copy')[0].text
return etree.Element('multiplechoiceresponse')
ret['comment'] = 'Event module not available. Beacons enable job failed.'
call_command("loaddata", "course_email_template.json")
joined += ','
grid_search_no_score = GridSearchCV(clf_no_score, {'C': Cs}) assert_raise_message(TypeError, "no scoring", grid_search_no_score.fit, [[1]])
check_perms(path, None, perms['user'], perms['group'], perms['mode'])
return json.dumps({'message': 'Task revoked before running'})
msg_p_elements = msg_div_element.findall('p') self.assertEqual(msg_p_elements[0].tag, "p") self.assertEqual(msg_p_elements[0].text, "Test message 1")
wa = CountVectorizer(ngram_range=(1, 2), encoding='ascii').build_analyzer() assert_raises(UnicodeDecodeError, wa, text_bytes)
query = self.q(css=CREATE_TEAM_LINK_CSS) if query.present: query.first.click() self.wait_for_ajax()
os.killpg(os.getpgid(process.pid), signal.SIGKILL) process.wait()
ret = self.run_function('beacons.disable_beacon', ['ps']) self.assertTrue(ret['result'])
from salt.states import boto_asg
if HAS_LDAP: return __virtualname__ return (False, 'The ldapmod execution module cannot be loaded: ' 'ldap config not present.')
from __future__ import absolute_import import os import re import time import logging
from __future__ import unicode_literals
url( r'^courses/{}/survey$'.format( settings.COURSE_ID_PATTERN, ), 'courseware.views.views.course_survey', name='course_survey', ),
PER_REMOTE_OVERRIDES = ('ssl_verify',)
self._pool = None warnings.warn( 'Multiprocessing-backed parallel loops cannot be nested,' ' setting n_jobs=1', stacklevel=3) return 1
feature_names = [feature_names[i] for i in ch2.get_support(indices=True)]
self._auto_auth(self.cohort_default_student_username, self.cohort_default_student_email, False) self.courseware_search_page.visit()
return "visibility"
data['course_price'] = 100 response = self.client.post(set_course_price_url, data) self.assertTrue("CourseMode price updated successfully" in response.content)
return cls.default() | { cls.PAYLOAD_EXTRA_FIELDS }
user, created = User.objects.get_or_create(username=USERNAME, email=EMAIL) if created: user.set_unusable_password() user.save()
course_outline.visit() subsection = course_outline.section_at(0).subsection_at(0) subsection.expand_subsection() unit = subsection.unit_at(0) unit.publish()
SEARCH_ENGINE = "search.elastic.ElasticSearchEngine"
addr_str = str(address) self._ip = self._ip_int_from_string(addr_str)
response = self.client.post(url) self.assertEquals(response.status_code, 403)
problem = new_loncapa_problem(xml_str)
self.user.profile.year_of_birth = 1980 self.user.profile.profile_image_uploaded_at = TEST_PROFILE_IMAGE_UPLOAD_DT self.user.profile.save()
assert_raises(VerificationException, attempt.submit) assert_raises(VerificationException, attempt.approve) assert_raises(VerificationException, attempt.deny)
import salt.utils
return comdat['stderr']
w = rng.randn(num_features)
existing_answers = survey.get_answers(user=user).get(user.id, {})
source_keys = [source_container.children[0]] new_blocks = self.store.copy_from_template(source_keys, dest_key=course.location, user_id=self.user_id) self.assertEqual(len(new_blocks), 1)
import salt.config import salt.loader
test_container_html(draft_container)
msg = _("answer-pool value should be an integer") raise LoncapaProblemError(msg)
model = self.model
args = [name] if tree: args.append('--tree') if snap_name: args.extend(['--id', snap_name])
self.format_caller_node = node.func.value
self.q(css=BUTTON_SELECTORS[button_name]).nth(index).click() if require_notification: wait_for_notification(self) self.wait_for_ajax()
super(StatsEventerTestCase, self).setUp()
self.send_response(200, json.dumps(content), {"Content-Type": "application/json"})
return comdat['stderr']
default_store=ModuleStoreEnum.Type.mongo
if self.only_on_web: return {"only_on_web": True}
from __future__ import absolute_import import copy
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
ofile.write(line.strip() + os.linesep)
self.assertEqual(expected_message, error.exception.message)
self.assertFalse(payload.get('success')) self.assertIn('incorrect', payload.get('value'))
doc_resolvers = {} doc_resolvers['sklearn'] = SphinxDocLinkResolver(app.builder.outdir, relative=True)
with self.assertRaises(ItemNotFoundError): store.find_asset_metadata(new_asset_loc) with self.assertRaises(ItemNotFoundError): store.get_all_asset_metadata(fake_course_id, 'asset')
mac_brew.__context__ = {} mac_brew.__salt__ = {} mac_brew.__opts__ = {'user': MagicMock(return_value='bar')}
with self.assertNumQueries(24): self.client.get(self.teams_url)
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
test_course_data = self.assert_created_course() course_id = _get_course_id(self.store, test_course_data) delete_course_and_groups(course_id, self.user.id) self.assert_created_course()
import salt.utils
actions = None
from salt.log.setup import LOG_LEVELS from salt.log.mixins import NewStyleClassMixIn import salt.utils.network
with mock.patch.dict('django.conf.settings.FEATURES', {'ENABLE_MKTG_SITE': True}): self.assertEquals(self.get_about_page_link(), None)
estimator.fit(X[bootstrap_idx], y[bootstrap_idx]) y_predict = estimator.predict(X)
hasher = RandomTreesEmbedding(n_estimators=10, sparse_output=False) X, y = datasets.make_circles(factor=0.5) X_transformed = hasher.fit_transform(X)
return self.is_enabled(self.PREVIOUS_PAGE_BUTTON_CSS)
ind = rng.randint(0, X.shape[0], 20) sample_weight = np.bincount(ind, minlength=X.shape[0])
return opts
sh("NO_EDXAPP_SUDO=1 EDX_PLATFORM_SETTINGS_OVERRIDE={settings} /edx/bin/edxapp-migrate-{system} --traceback --pythonpath=. {fake}".format( settings=settings, system=system, fake=fake))
import salt.payload import salt.utils
if regedit: return rehash() else: return False
self.page.visit()
self._corrupt_switch = True
monitoring_dataset = DenseDesignMatrix(X=X)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( patch, MagicMock, NO_MOCK, NO_MOCK_REASON )
if wua_download_list.Count == 0: log.debug('No updates to download') else: log.debug('Downloading...') wua_downloader.Updates = wua_download_list
methods = ['standard', 'ltsa', 'hessian', 'modified'] labels = ['LLE', 'LTSA', 'Hessian LLE', 'Modified LLE']
X = check_array(X, accept_sparse='csr') return safe_sparse_dot(X, self.components_.T)
import os import re import subprocess import sys
self._add_block(self._block_relations, root_block_usage_key)
already_pushed = data.setdefault('Layers', {}).setdefault( 'Already_Pushed', []) already_pushed.append(item['id'])
archive.__salt__ = {} archive.__pillar__ = {} archive.__grains__ = {"id": "0"} archive.__opts__ = {}
pass
X, y = make_classification(n_samples=1000, n_features=10, n_informative=3, n_redundant=0, n_repeated=0, n_classes=2, random_state=0, shuffle=False)
def from_json(self, value): if value in ("", "true"): return RANDOMIZATION.ALWAYS elif value == "false": return RANDOMIZATION.PER_STUDENT return value to_json = from_json
self.certificates_section.wait_for_certificate_exceptions_section()
if 'provider' in provider: driver = provider.pop('provider') else: driver = provider['driver']
_default_logging_level_ = 'info' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'minion')
fd, name = mkstemp(suffix='.png') os.close(fd)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
xblock = modulestore().get_item(location) xblock.display_name = display_name self.store.update_item(xblock, self.user.id)
log_resp = weighted_log_prob - log_prob_norm[:, np.newaxis]
duration = video_data.get('duration', None) size = default_encoded_video.get('file_size', 0)
from salt import minion from salt.utils import event from salt.exceptions import SaltSystemExit import salt.syspaths
stack.append(_Node(next_child, get_children))
from salttesting import skipIf from salttesting.helpers import ( ensure_in_syspath, requires_network, )
problem_name, correctness = scenarios[name] problem = problems[problem_name]
return True
available_version = salt.utils.alias_function(latest_version, 'available_version')
import salt.pillar.git_pillar import salt.utils.gitfs from salt.exceptions import SaltRunnerError from salt.ext import six
warnings.filterwarnings( 'ignore', '^Module backports was already imported from (.*), but (.*) is being added to sys.path$', UserWarning )
except Exception: return __salt__['cmd.run']( '{0} vcpu-pin {1} {2} {3}'.format(_get_xtool(), vm_, vcpu, cpus), python_shell=False)
pca = PCA(n_components=2)
win32api.CloseHandle(hProcess)
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS)
split_test = self._update_partition_id(0) self.assertEqual(2, len(split_test.children)) initial_vertical_0_location = split_test.children[0] initial_vertical_1_location = split_test.children[1]
self._verify_and_return_staff_page().set_staff_view_mode('Student') self._verify_components_visible(expected_components)
CELERY_ALWAYS_EAGER = True HTTPS = 'off'
if make_new: self.filters = tables.Filters(complib='blosc', complevel=5) self.make_data(which_set, path)
email_opt_in = request.POST.get('email_opt_in') if email_opt_in is not None: email_opt_in_boolean = email_opt_in == 'true' preferences_api.update_email_opt_in(request.user, org, email_opt_in_boolean)
n_samples, n_features = X.shape _, n_targets = y.shape
(['honor', 'verified', 'audit'], 'verified'),
from smtplib import SMTPException
return self.cleaned_data.get("order_direction") or "desc"
usage_key_string = json.loads(resp.content).get('locator') return UsageKey.from_string(usage_key_string)
out = [] for res in self.__toklist: if isinstance(res,ParseResults): out.append( res.asList() ) else: out.append( res ) return out
if is_staff is not None: user.is_staff = (is_staff == "true") user.save()
comps = [i.strip() for i in line.split('=', 1)]
self.wait_for_ajax() self.wait_for_element_absence(btn_selector, 'Wait for the XBlock to finish reloading')
students_to_generate_certs_for = students_to_generate_certs_for.filter( certificatewhitelist__course_id=course_id, certificatewhitelist__whitelist=True )
mmd = min_dists.mean()
if hasattr(self, "classes_") and self.n_outputs_ == 1: self.n_classes_ = self.n_classes_[0] self.classes_ = self.classes_[0]
self.q(css='a[data-section=data_download]').first.click() data_download_section = DataDownloadPage(self.browser) data_download_section.wait_for_page() return data_download_section
world.wait_for_visible('#data-student-profiles-table')
test1=value 1
CourseTeamIndexer.engine().destroy() for team in self.test_team_name_id_map.values(): CourseTeamIndexer.index(team)
from __future__ import absolute_import
from __future__ import absolute_import, print_function import datetime import copy import textwrap import difflib import logging import tempfile import os import pipes import time import shutil import re import random
self.assertTrue( self.run_function('pkgutil.is_installed', ['com.apple.pkg.BaseSystemResources']))
pass
predictions = cval.cross_val_predict(clf, X, y) assert_equal(predictions.shape, (10,))
from salt.modules import mac_keychain as keychain
assert_less(0, 1) _assert_less(0, 1) assert_raises(AssertionError, assert_less, 1, 0) assert_raises(AssertionError, _assert_less, 1, 0)
still_in_grace = CapaFactory.create(showanswer='correct_or_past_due', max_attempts="1", attempts="1", due=self.yesterday_str, graceperiod=self.two_day_delta_str) self.assertFalse(still_in_grace.answer_available())
return BACKEND.get_value(val_name, default, **kwargs)
composer.__grains__ = {} composer.__salt__ = {} composer.__context__ = {} composer.__opts__ = {}
item = self.store.get_item(usage_key) if verify_is_draft: self.assertTrue(getattr(item, 'is_draft', False)) return item
def stop(self): pass
from __future__ import absolute_import
assert_raises(ValueError, _fast_dot, A, A[0])
import os import re
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
continue
tracker.emit( SETTING_CHANGE_INITIATED, { "setting": "password", "old": None, "new": None, "user_id": request.user.id, } )
'state_auto_order': bool,
params = dict([param.strip().replace('"', '').split('=') for param in params.split(',')])
bin_sizes = defaultdict(int) for point in X: binned_point = np.round(point / bin_size) bin_sizes[tuple(binned_point)] += 1
message_template = 'emails/course_creator_revoked.txt'
pw = ParzenWindows(MNIST(which_set='test').X, .20) print(pw.get_ll(history))
if len(set(ml)) != 1: raise ValueError("Composite space is empty or containing " "incompatible index spaces") return ml[0]
self.chapter = self.store.get_item(self.chapter.location)
self.assertTrue( self._check_equality(source_usage_key, usage_key, parent_usage_key, check_asides=check_asides), "Duplicated item differs from original" )
rlist, _, _ = select.select(rfds, [], [], 0)
resp = self.create_xblock(parent_usage_key=self.usage_key, category='chapter') self.chapter_usage_key = self.response_usage_key(resp)
if request.user.is_staff: return True user = get_object_or_404(User, username__iexact=url_username) if field_name in visible_fields(user.profile, user): return True raise Http404()
draft_items_locations = {item.location for item in draft_items} return [ item for item in base_get_items(MongoRevisionKey.published) if item.location not in draft_items_locations ]
self.assertFalse(views.is_course_passed(self.course, None, self.student, self.request))
application: 6789012345 directory: 3456789012
break
exc_info_on_loglevel=logging.DEBUG
SplitTestFields.build_partition_values(self.user_partitions, self.get_selected_partition())
task_folder = task_service.GetFolder(location) task_definition = task_folder.GetTask(name).Definition triggers = task_definition.Triggers
data[s].ndim = len(data[s].shape)
actual_response = json.loads(response.content) self.assertEqual(actual_response, TEST_PAYMENT_DATA)
iris = load_iris()
from collections import namedtuple import datetime BlockInfo = namedtuple('BlockInfo', 'block_id, category, fields, sub_tree')
'organizations',
assert_raises(ValueError, check_is_fitted, ARDRegression, "coef_") assert_raises(TypeError, check_is_fitted, "SVR", "support_")
for fpath in glob.glob(os.path.join(path, 'distribute-*.tar.gz*')): os.unlink(fpath)
resp = self.create_xblock(parent_usage_key=chap_usage_key, category='sequential') self.seq_usage_key = self.response_usage_key(resp) self.seq_update_url = reverse_usage_url("xblock_handler", self.seq_usage_key)
return "/assets/" + self._course_key + "/"
type_in_codemirror(self, 0, content)
lines = StringLines(data['string']) self.assertEqual(lines.line_number_to_line(data['line_number']), data['line'])
parents = self.collection.find(query, {'_id': True}, sort=[SORT_REVISION_FAVOR_DRAFT])
module = CapaFactory.create(max_attempts="1", attempts="0") self.assertFalse(module.closed())
self._wait_for( lambda: self.state == state, 'State is {state}'.format(state=state) )
gp = GaussianProcessRegressor(kernel=kernel, alpha=(dy / y) ** 2, n_restarts_optimizer=10)
from Crypto.PublicKey import RSA import salt.ext.six as six from salt.ext.six.moves import range
problem_text = re.sub(r"startouttext\s*/", "text", problem_text) problem_text = re.sub(r"endouttext\s*/", "/text", problem_text) self.problem_text = problem_text
export_extra_content( export_fs, self.modulestore, self.courselike_key, xml_centric_courselike_key, 'course_info', 'info', '.html' )
for subsection in section.get_children(): c_subsection += 1 subsection_name = own_metadata(subsection).get('display_name', '')
return get_test_descriptor_system(*args, **kwargs)
import logging import os import shutil
return valid_type.__name__
self.go_to_tab_and_assert_problem(1, self.problem1_name)
correct = ['unknown'] * len(idset) messages = [''] * len(idset) overall_message = ""
self.ignored_asset_keys.add(key_name)
try: import Crypto.Random HAS_CRYPTO = True except ImportError: HAS_CRYPTO = False
X, y = hastie_X, hastie_y ForestEstimator = FOREST_ESTIMATORS[name] clf = ForestEstimator(n_estimators=15, max_depth=3, warm_start=False, random_state=1, bootstrap=True, oob_score=True) clf.fit(X, y)
b_float32 = astype(a_int32, dtype=np.float32, copy=False) assert_equal(b_float32.dtype, np.float32)
self._assert_request_status(request_uuid, 'pending')
children = self.q(css='.note-section') return [EdxNotesSubsectionGroup(self.browser, child.get_attribute("id")) for child in children]
user = User.objects.get(username=username) world.scenario_dict['USER'] = user
der_cert = der[0] #der_algo = der[1] der_sig = der[2]
'log_fmt_console': str,
'options': self.xml.get('options'), 'testdat': 'hello world',
rval = np.log(x) rval -= rval.mean() return rval
with check_mongo_calls(max_find, max_send): wiki_courses = self.store.get_courses_for_wiki('999') self.assertEqual(len(wiki_courses), 1) self.assertIn(
if not log_format: log_format = '[%(levelname)-8s] %(message)s' if not date_format: date_format = '%H:%M:%S'
ports = list(map(int, str(ports).split(',')))
yield check_estimators_empty_data_messages
contents='ssh-rsa AAAAB3NzaC1kc3MAAACBAL0sQ9fJ5bYTEyY== root'
'log_file': str,
self._aborting = False if not self._managed_pool: n_jobs = self._initialize_pool() else: n_jobs = self._effective_n_jobs()
gp.fit(X, y)
if display_name is not None: metadata['display_name'] = display_name
celery_task_patcher = patch.object( sync_cohort_with_mode, 'apply_async', mock.Mock(wraps=sync_cohort_with_mode.apply_async) ) self.mocked_celery_task = celery_task_patcher.start() self.addCleanup(celery_task_patcher.stop)
TEST_ROOT = REPO_ROOT / "test_root" LOG_DIR = (TEST_ROOT / "log").abspath()
latex_documents = [ ( 'index', 'getting_started.tex', u'edX Studio Documentation', u'EdX Doc Team', 'manual', ), ]
return service_id
exc_str = exc_str_prefix + _nested_output(self.info)
return self.page.paginator.count
from salt.modules.cmdmod import _parse_env import salt.utils from salt.exceptions import ( CommandExecutionError, MinionError, SaltInvocationError )
from __future__ import absolute_import
self.o.maxtimeout = config['api_login_timeout'] self.o.wait_for_rsp(timeout=1)
self.assertContains( self.client.ajax_post(course_update_url, {'garbage': 1}), 'Failed to save', status_code=400 )
locked = self.is_content_locked(content) newrelic.agent.add_custom_parameter('contentserver.locked', locked)
if __opts__.get('state_output_diff', False) and \ ret['result'] and not schanged: continue
return self.attempts > 0
pass
for student in students[:4]: CertificateWhitelistFactory.create( user=student, course_id=self.course.id, whitelist=True )
class_sep = 1e6 make = partial(make_classification, class_sep=class_sep, n_redundant=0, n_repeated=0, flip_y=0, shift=0, scale=1, shuffle=False)
return True
import logging
problem = self.store.get_item(problem.location)
tls.__grains__ = {} tls.__salt__ = {} tls.__context__ = {} tls.__opts__ = {}
import copy import os import re import logging import json
return urllib.unquote(urllib.unquote(response_str))
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(boston.data, boston.target, random_state=rng)
result = symmath_check(expected_str, expected_str, dynamath=[dynamath]) self.assertTrue('ok' in result and result['ok'])
courses_list = list(get_course_enrollments(self.student, None, [])) self.assertEqual(len(courses_list), 2)
from salt.states import lvs_service
cc_rendered_selector = self.get_element_selector(CSS_CLASS_NAMES['closed_captions']) self.wait_for_element_visibility(cc_rendered_selector, 'Closed captions rendered')
sample_interval = 0.3 transform = AdditiveChi2Sampler(sample_steps=4, sample_interval=sample_interval) assert_equal(transform.sample_interval, sample_interval) transform.fit(X) assert_equal(transform.sample_interval_, sample_interval)
params["username"] = "invalid username" assert_username_error("Usernames must contain only letters, numbers, underscores (_), and hyphens (-).")
store = DjangoOpenIDStore() server = Server(store, endpoint)
self.fed.append(data)
stdout, stderr, retcode = single.shell.copy_id()
alias, driver = driver.split(':')
multioutput_y = np.column_stack([y2, y2[::-1]]) scores = cross_val_score(clf, X_sparse, multioutput_y) assert_array_equal(scores, clf.score(X_sparse, multioutput_y))
self.x_sum = numpy.zeros([self.n_dim])
return ( {"cohort_id": cohort.id, "cohort_name": cohort.name, "user_id": user_id} for user_id in user_id_iter for cohort in cohort_iter )
CONFIG_FILE = open(settings.REPO_ROOT / "docs" / "lms_config.ini") CONFIG = ConfigParser.ConfigParser() CONFIG.readfp(CONFIG_FILE)
'master_job_cache': str,
self.send_delete(self.client) self.send_get(self.client, expected_status=404)
lines[ind] = newline + os.linesep
S = func(np.array([[1]], dtype='int'), metric='precomputed') assert_equal('f', S.dtype.kind)
new_course_id = self.store.make_course_key('anotherX', 'anotherToy', 'Someday') self.check_import(root_dir, content_store, new_course_id) self.assertCoursesEqual(course_id, new_course_id)
from __future__ import absolute_import
return (p.name != 'self' and p.kind != p.VAR_KEYWORD and p.kind != p.VAR_POSITIONAL)
self.assertGreater(exam_score * 100, 50)
return sequence.xmodule_runtime.render( sequence, STUDENT_VIEW, { 'requested_child': requested_child, 'next_url': next_url, 'prev_url': prev_url, }, ).content
for zp in res['stdout'].splitlines(): zp = zp.split("\t") zp_data = {}
enrollment_record = CourseEnrollment.objects.get( user=user, course_id=course_id ) self.assertFalse(enrollment_record.is_active)
return (name, kwargs)
__saltstack_version__ = __get_version(__saltstack_version__) del __get_version
import salt.utils from salt.exceptions import CommandExecutionError
if not rd_data: err_msg = 'There was an error querying EC2 for the root device ' \ 'of image id {0}. Empty response.'.format(image_id) raise SaltCloudSystemExit(err_msg)
self._auto_auth({'username': 'test', 'course_id': course_id})
connection.close()
regex = re.compile('^' + answer + '$', flags=flags | re.UNICODE) return re.search(regex, given)
from __future__ import absolute_import
return np.abs(y_truth - y_prediction).sum() > tol
super(ProblemTypeTestBase, self).setUp() self.courseware_page.visit() self.problem_page = ProblemPage(self.browser)
self.q(css="input.no_special_exam").first.click()
Created Certificate for "DBReplica_No.1": "/etc/pki/my_little/certs/DBReplica_No.1.crt"
course = CourseFactory.create(start=datetime(2013, 9, 16, 7, 17, 28)) course = modulestore().get_course(course.id) return course
mathjax_container = self.q(css="div.problem p .MathJax_SVG") return mathjax_container.visible and mathjax_container.present
self.assertTrue('success' in result and not result['success'])
assert_array_almost_equal(K.flat[::6], [linalg.norm(x) ** 2 for x in X])
if hasattr(self, 'input_source'): return self.input_source else: return 'features'
n_samples_per_fold = np.zeros(self.n_folds)
return ret
return not self == other
is_eligible = api.is_user_eligible_for_credit("staff", credit_course.course_key) self.assertFalse(is_eligible)
templates_path = ['templates']
from __future__ import absolute_import
self.q(css=self._bounded_selector("a.link-cross-reference[data-section=data_download]")).first.click()
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
user = UserFactory.create() self.assert_user_has_object_permission(user, False)
n_samples_range = np.logspace(1, 9, 9)
check_cohorted(False)
if params.get('decision') == u'DECLINE': raise CCProcessorUserDeclined()
log.debug( 'The \'{0}\' cloud driver defined under \'{1}\' provider ' 'alias is unable to get the sizes information'.format( driver, alias ) ) continue
merged_start_value = min_all_parents_start_date
from __future__ import absolute_import import json try:
def award(self, badge_class, user, evidence_url=None): return BadgeAssertionFactory(badge_class=badge_class, user=user)
return None
ret = {} for name in names: ret[name] = ''
return [profile.strip() for profile in cls.current().video_profiles.split(",") if profile]
'STUDIO_REQUEST_EMAIL': '',
grouping_tag = grouping_tags[test_conditions['input_type']] self.assert_no_xpath(xml, "//{0}[@class='choicetextgroup_incorrect']".format(grouping_tag), self.context)
block_relations, transformer_data, block_data_map = zunpickle(zp_data_from_cache) block_structure = BlockStructureModulestoreData(root_block_usage_key) block_structure._block_relations = block_relations block_structure._transformer_data = transformer_data block_structure._block_data_map = block_data_map
ret['changes'] = {name: __salt__['chocolatey.uninstall'](name, version, uninstall_args, override_args)}
digits = load_digits() X = digits.images.reshape((len(digits.images), -1)) y = digits.target
get_blob_service_properties = show_blob_service_properties
from salt.states import debconfmod
num_drafts = self._get_draft_counts(course) self.assertEqual(num_drafts, 1)
return self.runtime.get_published_by(self)
from __future__ import absolute_import
module_class = EmptyXModuleWithChildren has_children = True
from __future__ import absolute_import import json import salt.utils.http import logging
inputs = SparseType('csr', dtype=theano.config.floatX)() return theano.function([inputs], self(inputs), name=name)
import salt.ext.six as six
module_path, _, name = path.rpartition('.') return getattr(import_module(module_path), name)
ensemble = BaggingClassifier(SVC(decision_function_shape='ovr'), n_jobs=3, random_state=0).fit(X_train, y_train)
self.course_outline.visit() subsection = self.course_outline.section_at(section_index).subsection_at(0) subsection.expand_subsection() subsection.add_unit()
X = [[0], [0]] Y = [[1], [2]] D = paired_euclidean_distances(X, Y) assert_array_almost_equal(D, [1., 2.])
return self.q(css=self.thread_selector + " " + selector)
import salt.utils
raise NotImplementedError
resp = self._build_and_run_request(user, fields) self.assertEqual(resp.status_code, 200)
Z = -9999 + np.zeros(land_mask.shape[0]) Z[land_mask] = np.exp(kde.score_samples(xy)) Z = Z.reshape(X.shape)
if ext not in self.suffix_map:
__virtualname__ = 'timezone'
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
raise NotImplementedError('Not implemented in _PCABase. Use a ' + 'subclass (and implement it there).')
if rerandomize == RANDOMIZATION.NEVER: self.assertEqual(seed, 1, msg="Seed should always be 1 when rerandomize='%s'" % rerandomize)
est = DummyRegressor(strategy="quantile", quantile=0.5) est.fit(X_learn, y_learn) y_pred_learn = est.predict(X_learn) y_pred_test = est.predict(X_test)
est = DummyRegressor(strategy='mean') est.fit(X, y)
if len(minions - allowed_minions_from_auth_list) > 0: return False
return self.page.q(css=self.prefix + selector)
__grains__ = grains
'AUTH_USE_OPENID': False, 'AUTH_USE_CERTIFICATES': False, 'AUTH_USE_OPENID_PROVIDER': False, 'AUTH_USE_SHIB': False, 'AUTH_USE_CAS': False,
locale_dirs = ['locale/'] gettext_compact = False
world.click_course_content() outline_css = 'li.nav-course-courseware-outline a' world.css_click(outline_css)
return self._folds[0][-1].get_output_space()
if h_len < len(dev_header): sys_header = dev_header[h_len:] dev_header = dev_header[0:h_len]
self.assertTrue(linode._validate_name('foo-bar'))
return _vote_or_unvote(request, course_id, cc.Comment.find(comment_id), undo_vote=True)
module_class = EmptyXModule
retcode = __salt__['cmd.retcode']('pw groupmod {0} -m {1}'.format( name, username), python_shell=False)
IS_WIN = win_autoruns.__virtual__()
z = self.sample_from_p_z(num_samples=num_samples, **kwargs) theta = self.decode_theta(z) X = self.sample_from_p_x_given_z(num_samples=num_samples, theta=theta)
store_fields = ["OPTIONS", "DOC_STORE_CONFIG"] for field in store_fields: self.assertEqual(store_setting1[field], store_setting2[field])
lbound = N.array([kshp[0]-1,kshp[1]-1]) if mode=='valid' else N.zeros(2) ubound = lbound + (inshp[1:]-kshp+1) if mode=='valid' else fulloutshp
with closing(uploaded_file):
K = squareform(K) np.fill_diagonal(K, 1)
error_response(response, "Can't find transcripts in storage for {}".format(old_name))
chaos_user = UserFactory() locked_toc = self._return_table_of_contents() for toc_section in self.expected_locked_toc: self.assertIn(toc_section, locked_toc)
reg = svm.SVR(kernel='linear', C=0.1).fit(X, y)
sreq.destroy()
try: user_preferences = get_user_preferences(request.user, username=username) except UserNotAuthorized: return Response(status=status.HTTP_403_FORBIDDEN) except UserNotFound: return Response(status=status.HTTP_404_NOT_FOUND) return Response(user_preferences)
space, source = model.get_monitoring_data_specs()
cmd = '{0} add -exist {1} {2}'.format(_ipset_cmd(), set, cmd) out = __salt__['cmd.run'](cmd, python_shell=False)
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, skip_if_binaries_missing ) from salttesting.mock import NO_MOCK, NO_MOCK_REASON, Mock, patch ensure_in_syspath('../../')
if ret['result']:
from __future__ import absolute_import
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
super(TestCohorts, self).setUp() self.toy_course_key = ToyCourseFactory.create().id
import salt.utils
product = self.batch_size * self.num_batches if product > self._dataset_size: return self.batch_size * (self.num_batches - 1) else: return product
from __future__ import absolute_import
'multiprocessing': bool,
if self._session_expired: raise ForceRetryError("Retry on session loss at top")
self.assertNotContains(resp, 'Hidden_course')
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
HAS_LIBS = False HAS_SIX = False try: import requests
states_dir = os.path.abspath(self.options.states_dir) self.config['states_dirs'] = [states_dir]
from __future__ import absolute_import import os
MUTABLE = False
student_module__in=[module.id for module in student_modules]
nearest_center, inertia = _labels_inertia(X, x_squared_norms, centers, distances=distances)
if name == 'ROOT': return settings.MKTG_URLS.get('ROOT') return settings.MKTG_URLS.get('ROOT') + settings.MKTG_URLS.get(name)
assert_almost_equal(dists[1], 1 - np.cos(np.pi / 4))
else: ret = _load_result(existing, ret)
exc_info_on_loglevel=logging.DEBUG
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
TASK_VALIDATE_ONLY = 0x1 TASK_CREATE = 0x2 TASK_UPDATE = 0x4 TASK_CREATE_OR_UPDATE = 0x6 TASK_DISABLE = 0x8 TASK_DONT_ADD_PRINCIPAL_ACE = 0x10 TASK_IGNORE_REGISTRATION_TRIGGERS = 0x20
user = UserFactory.create(username="rusty", password="test") self.client.login(username="rusty", password="test")
continue
self.annotation.delete() self.assertEqual(u"", self.reg.csv_report_comments)
sources, duration = self.video.sources[0], self.video.duration self.assert_bumper_payload_contains_ids(load_video_event, sources, duration)
other_icrv = ItemFactory.create(parent=self.verticals[3], category='edx-reverification-block') self._update_partitions()
err_count = 0 while True: try: shutil.rmtree(fullname, False, None) break except os.error: if err_count > 0: raise err_count += 1 time.sleep(RM_SUBDIRS_RETRY_TIME)
from __future__ import print_function
example_input[1, 3] = 0.0 example_input[1, 4] = 1.0
rm_ = ind
mock_request = Mock() mock_request.GET = mock_request.POST = {'task_id': task_id} response = instructor_task_status(mock_request) status = json.loads(response.content) return status
if not organizations_enabled(): return [] from organizations import api as organizations_api return organizations_api.get_organization(organization_id)
return True
from salt.modules import dnsutil
return (self.network_address.is_reserved and self.broadcast_address.is_reserved)
self.lengths = [len(s) for s in self._sequence_data] self.len_unique = np.unique(self.lengths)
cmd.extend(packages)
return redirect_with_get('signin_user', request.GET)
return get_instructions(xmltree)
return sum(estimator.decision_function(X[:, features]) for estimator, features in zip(estimators, estimators_features))
python_shell = False if '*.' in cmd: python_shell = True
return self.to_storable() == edit_info.to_storable()
csmh = BaseStudentModuleHistory.get_history(student_module) self.assertEqual(len(csmh), 3)
conditional_params = self.mlp.fprop(X) if not type(conditional_params) == tuple: conditional_params = (conditional_params, ) return conditional_params
y1 = np.array([[0, 1, 1], [1, 0, 1]]) y2 = np.array([[0, 0, 1], [1, 0, 1]])
label_bg_color = Attribute('label_bg_color', default=None).parse_from_xml(self.xml) if label_bg_color: to_js['label_bg_color'] = label_bg_color
self._capture_basic_metrics()
self.assertTrue(image_url.endswith('src_course_image-png-{}x{}.jpg'.format(*target)))
super(DuplicateCourseError, self).__init__( u'Cannot create course {}, which duplicates {}'.format(course_id, existing_entry) ) self.course_id = course_id self.existing_entry = existing_entry
import salt.utils from salt.exceptions import CommandExecutionError try: import salt.utils.pycrypto HAS_CRYPT = True except ImportError: HAS_CRYPT = False
sparse_results = sparse_classifier.staged_predict_proba(X_test_sparse) dense_results = dense_classifier.staged_predict_proba(X_test) for sprase_res, dense_res in zip(sparse_results, dense_results): assert_array_equal(sprase_res, dense_res)
GeneratedCertificate.eligible_certificates.all().delete()
max_scores_cache.fetch_from_remote(field_data_cache.scorable_locations)
self.assertEqual(content.content_type, 'application/pdf')
import salt.ext.six as six
time.sleep(0.5)
import salt.utils.cloud import salt.config as config from salt.exceptions import SaltCloudSystemExit
import salt.thorium
password = generate_unique_password([], 12) self.assertEquals(len(password), 12) for letter in password: self.assertNotIn(letter, 'aAeEiIoOuU1l')
error_msg = u"Superterrible error happened: ☠" module.lcp.get_html = Mock(side_effect=Exception(error_msg))
message = self.q(css='BODY').text[0] match = re.search('Payment page', message) return True if match else False
return set_system_date_time(hours=int(dt_obj.strftime('%H')), minutes=int(dt_obj.strftime('%M')), seconds=int(dt_obj.strftime('%S')))
import integration import salt.utils import salt.utils.find
return False
import salt.utils
assert_raises(ValueError, plot_partial_dependence, clf, X, [{'foo': 'bar'}])
self.process_manager.stop_restarting() self.process_manager.send_signal_to_processes(signum) self.process_manager.kill_children()
if field_name == 'children': continue
for student in students[2:5]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.error, mode='honor' )
assert_greater(np.abs(s[:k] - sa).max(), 0.01)
permutation = np.asarray(permutation, dtype=np.intp) return _update_cdnmf_fast(W, HHt, XHt, permutation)
self.assertContains(response, "Email is not enabled for this course.", status_code=403)
if xblock.category == 'vertical': if parent_xblock is None: parent_xblock = get_parent_xblock(xblock) parent_category = parent_xblock.category if parent_xblock else None return parent_category == 'sequential' return False
from cPickle import loads from cPickle import dumps
return True
'ADDITIONAL_OPTIONS': { 'trashcan': { 'bucket': 'trash_fs' } }
self.course_outline.select_advanced_tab()
course_key = self.course_key.to_deprecated_string() self._add_course_mode(mode_slug='verified') self.add_reg_code(course_key, mode_slug='verified')
ManualEnrollmentAudit.create_manual_enrollment_audit( manual_enrollment_audit.enrolled_by, student.email, ALLOWEDTOENROLL_TO_ENROLLED, manual_enrollment_audit.reason, enrollment )
return (self.close_date is not None and datetime.datetime.now(UTC()) > self.close_date)
response = self._generate(username=self.STUDENT_USERNAME) self.assertEqual(response.status_code, 400)
try: if block_data.asides: aside_fields = {block_key.type: {}} for aside in block_data.asides: aside_fields[block_key.type].update(aside['fields']) except AttributeError: pass
self.assertIn('Welcome to edX.', self.video.captions_text)
sparse_matrix_params = { "n_components": opts.n_components, "random_state": opts.random_seed, "density": opts.density, "eps": opts.eps, }
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0)
self.event.fire_event(data, tagify('present', 'presence'), timeout=3) old_present.clear() old_present.update(present)
if not record.exc_text: record.exc_text = self.formatException(record.exc_info)
try: imp.find_module(app_name) except ImportError: try: __import__(app_name) except ImportError: continue INSTALLED_APPS += (app_name,)
student = certificate_invalidation.generated_certificate.user instructor_task.api.generate_certificates_for_students( request, course_key, student_set="specific_student", specific_student_id=student.id )
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
self.assertEqual(i18n_service.ugettext(self.test_language), 'dummy language')
grains['virtual'] = 'kvm'
DEFAULT_USER_MESSAGE = ugettext_noop(u'An error has occurred. Please try again.')
attr = cls._translate(attr)
import salt.utils from salt.exceptions import SaltInvocationError, CommandExecutionError from salt.modules.freebsdports import _normalize, _options_file_exists
n_faces = 5 rng = check_random_state(4) face_ids = rng.randint(test.shape[0], size=(n_faces, )) test = test[face_ids, :]
pass
get_version = { 'Linux': linux_netdev, 'FreeBSD': freebsd_netdev, }
self.xmodule_runtime.xmodule_instance = None
'edxmako.shortcuts.microsite_footer_context_processor',
([TestTransformer1(), TestTransformer2()], []),
self.assertNotIn(self.module_key, self.loader)
continue
self.now = datetime.datetime.now()
QUEUING = 'QUEUING' PROGRESS = 'PROGRESS'
self.win_downloader = self.update_session.CreateUpdateDownloader() self.win_downloader.Updates = self.download_collection
return (self.start_line, self.start_column, self.rule.rule_id)
with mock_order_endpoint(order_number=self.ORDER_NUMBER, exception=exceptions.HttpNotFoundError): response = self.client.get(self.path) self.assertEqual(response.status_code, 404)
total_cost += l1_act_cost
raise NotImplementedError(str(self.__class__) + " does not implement " "_get_default_output_layer")
@property def score(self): raise AttributeError
from __future__ import absolute_import
test_cov = empirical_covariance( X_test - self.location_, assume_centered=True) res = log_likelihood(test_cov, self.get_precision())
old_inertia, incremental_diff = _mini_batch_step( X_mb, x_mb_squared_norms, new_centers, counts, buffer, 1, None, random_reassign=False) assert_greater(old_inertia, 0.0)
self.check_val('false', False)
PAIRWISE_DISTANCE_FUNCTIONS = { 'cityblock': manhattan_distances, 'cosine': cosine_distances, 'euclidean': euclidean_distances, 'l2': euclidean_distances, 'l1': manhattan_distances, 'manhattan': manhattan_distances,
import logging import salt.utils
if not isinstance(new_c_data, list): log.error('ConCache Worker returned unusable result') del new_c_data continue
expand = kwargs.get('expand', False)
self.verify_server_task("studio", options)
X_df = MockDataFrame(X) X_train, X_test = cval.train_test_split(X_df) assert_true(isinstance(X_train, MockDataFrame)) assert_true(isinstance(X_test, MockDataFrame))
past_due_date = CapaFactory.create(showanswer='correct_or_past_due', max_attempts="1", attempts="0", due=self.yesterday_str) self.assertTrue(past_due_date.answer_available())
X = [[3, 2], [1, 6]] y = [1, 0]
import salt.utils from salt._compat import subprocess
return NoneToEmptyQuerySet(self.model, using=self._db)
if not ccx: raise Http404 schedule = get_ccx_schedule(course, ccx) json_schedule = json.dumps(schedule, indent=4) return HttpResponse(json_schedule, content_type='application/json')
redirect_url = embargo_api.redirect_if_blocked( course_id, user=user, ip_address=get_ip(request), url=request.path ) if redirect_url: return HttpResponse(redirect_url)
X, y, X_test, y_test = build_dataset(n_samples=200, n_features=100, n_informative_features=100) max_iter = 150
enrollment_mode = self.dashboard_page.get_enrollment_mode(self.course_info["display_name"]) self.assertEqual(enrollment_mode, 'verified')
__virtualname__ = 'pkg'
write_body = [False]
context['document_title'] = _("{partner_short_name} {course_number} Certificate | {platform_name}").format( partner_short_name=context['organization_short_name'], course_number=context['course_number'], platform_name=platform_name )
exc_info_on_loglevel=logging.DEBUG
topo = self.train_set.get_batch_topo(1) assert topo.ndim == 4
from util.testing import patch_testcase, patch_sessions patch_testcase() patch_sessions()
for i, val in minibatch: if val is not None: activations[i] = val
from __future__ import absolute_import import copy import logging
if queue in minion_tracker: minion_tracker[queue]['active'] = False
func_globals = func.__globals__ injected_func_globals = [] overridden_func_globals = {} for override in overrides: if override in func_globals: overridden_func_globals[override] = func_globals[override] else: injected_func_globals.append(override)
structure_json = models.TextField(verbose_name='Structure JSON', blank=True, null=True)
if not self._requested_xblock_fields: return for xblock_usage_key, xblock in self._xblock_map.iteritems(): for field_name in self._requested_xblock_fields: self._set_xblock_field(xblock_usage_key, xblock, field_name)
for param in self.params: value = param.get_value(borrow=True) if not isfinite(value): raise RuntimeError("NaN in " + param.name)
import salt.utils.http
from salt.exceptions import CommandExecutionError from salt.modules import parted
OUTPUT_FIELD_NAMES = [ "email", "full_name", "course_id", "is_opted_in_for_email", "preference_set_datetime" ]
if self._dirty: self.redo_theano()
self._create_video()
if not self.q(css="input.practice_exam").present: return False
self.assertRedirects(resp, settings.LOGIN_REDIRECT_URL + '?next=/home/')
import salt.utils import salt.utils.decorators as decorators
section_context.update({ 'proctoring': timed_exam_attempt_context, })
return (subnet, router, name, admin_state_up)
display_name = models.CharField(max_length=255, default="", blank=True)
from __future__ import absolute_import import time import logging
p = T.tanh(linear_response) return p
X, y = datasets.make_regression(n_targets=1) X_train, y_train = X[:50], y[:50] X_test, y_test = X[50:], y[50:]
mock_get_cache.return_value = self.cache
window = tensor.alloc(0.0, batch, channel, res_r, res_c, pr, pc) window.name = 'unravlled_winodows_' + name
self._make_draft_content_different_from_published()
return self.q(css=".badges-modal").visible
pass
if not has_course_author_access(request.user, item.location.course_key): raise PermissionDenied()
super(OverrideFieldDataTests, cls).setUpClass() cls.course = CourseFactory.create(enable_ccx=True)
do_utc = False do_zone = False
self.payment_and_verification_flow.immediate_verification()
patch_stack = patches.reshape((B*OR*OC, KR*KC*CH))
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.fit_transform(X) return self
task_folder = task_service.GetFolder(location) task = task_folder.GetTask(name)
configuration = self.get_configuration() return val_name in configuration
self._redirect_if_needed_to_pay_for_course() self._redirect_if_needed_to_register() self._redirect_if_needed_for_prereqs() self._redirect_if_needed_for_course_survey()
for num, item in enumerate(extra_data, start=1): key = u"merchant_defined_data{num}".format(num=num) params[key] = item
from __future__ import absolute_import import copy import logging import time import traceback
import salt.crypt import salt.payload import salt.transport import salt.utils.args from salt.exceptions import SaltReqTimeoutError
assert_raises(ValueError, cv.fit, K_train.tolist(), y_train)
if addresses: if addresses[0] == 'None': addresses[0] = None elif addresses is None: addresses = [None]
import tornado.gen from Crypto.Cipher import PKCS1_OAEP from Crypto.PublicKey import RSA
os.chdir(cwd)
os.chmod(path, stat.S_IWUSR) func(path)
try: fans = my_sympify(str(ans), matrix=do_matrix, do_qubit=do_qubit) except Exception, err: fans = None
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(boston.data, boston.target, random_state=rng)
try:
pass
node = _get_node(instance_id=vm_['instance_id']) ret.update(node)
pass
vmax = arr.max(axis=0) out = np.log(np.sum(np.exp(arr - vmax), axis=0)) out += vmax return out
X = sp.csr_matrix(X, dtype=np.float64, copy=copy)
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, done=True) self.assertTrue(module.should_show_reset_button())
FEATURES['AUTOMATIC_AUTH_FOR_TESTING'] = True
curl -sSik https://localhost:8000 \\ -d client=local \\ -d tgt='*' \\ -d fun='cmd.run' \\ -d arg='du -sh .' \\ -d arg='/path/to/dir'
cart = Order.get_cart_for_user(request.user) try: cart_items = cart.find_item_by_course_id(course_registration.course_id)
ret = self.run_run_plus(fun='fileserver.update', args=['backend="[roots]"']) self.assertTrue(ret['fun'])
db_alias = ( 'read_replica' if 'read_replica' in settings.DATABASES else 'default' ) return connections[db_alias].cursor()
for child_location in xblock.children: child = block_structure.get_xblock(child_location) group = child_to_group.get(child_location, None) child.group_access[partition_for_this_block.id] = [group] if group else []
'ORGANIZATIONS_APP': False,
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
ASSET_XSD_PATH = PLATFORM_ROOT / "common" / "lib" / "xmodule" / "xmodule" / "assetstore" / "tests" / ASSET_XSD_FILE
return (router, subnet)
try: temp_file = _mkstemp_copy(path=path, preserve_inode=preserve_inode) except (OSError, IOError) as exc: raise CommandExecutionError("Exception: {0}".format(exc))
response = render_to_response(path, context) response.mako_context = context response.mako_template = path return response
return models.Client.objects.create( name=name, user=user, client_id=client_id, redirect_uri=redirect_uri, client_type=constants.PUBLIC, )
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
if not settings.FEATURES.get('MILESTONES_APP', False): return [] from milestones import api as milestones_api return milestones_api.get_milestones(namespace)
self.lcp.ungraded_response(score_msg, queuekey) self.set_state_from_lcp() return dict()
compute_full_tree = self.n_clusters < max(100, .02 * n_samples)
import logging import json import yaml
def __init__(self, requestedLocation, currentHeadVersionGuid): super(VersionConflictError, self).__init__(u'Requested {}, but current head is {}'.format( requestedLocation, currentHeadVersionGuid ))
syslog_opts['address'] = os.sep.join( parsed_log_path.path.split(os.sep)[:-1] )
from __future__ import absolute_import
self.course_outline.open_subsection_settings_dialog()
url = reverse('instructor_dashboard', kwargs={'course_id': self.course.id.to_deprecated_string()}) response = self.client.get(url)
from __future__ import absolute_import
self.assertFalse(is_valid) self.assertEqual(len(errors), 3) self.assertFalse(test_model)
if self._syndics[master].done():
from __future__ import absolute_import import errno import functools import logging import os import re import shutil import time import tempfile
FIELD_OVERRIDE_PROVIDERS = ()
pass
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
main(args=[])
from __future__ import absolute_import
return total / coeff_sum
from salt.modules import nagios import os
return self
ofile.writelines(lines)
from __future__ import absolute_import import os import string import random
self.set_state_from_lcp()
return dict(zip(('request', 'user', 'course_key', 'course_mode', 'amount'), patched_create_order.call_args[0]))
self.verify_success_on_file_content( 'email,cohort\nfoo_email,bar_cohort', mock_store_upload, mock_cohort_task )
self.request.session[LANGUAGE_SESSION_KEY] = 'en' set_user_preference(self.user, LANGUAGE_KEY, 'eo') self.middleware.process_request(self.request)
A = rng.random_sample([2, 2]) for dtype in ['f8', 'f4']: A = A.astype(dtype) B = B.astype(dtype)
ret['error'] = 'This package does not seem to exist' return ret
if res['stderr'].startswith('Successfully created VM'): return res['stderr'][24:]
return dict([item for d in dicts for item in d.items()])
out = np.empty(len(list_of_arrays), dtype=object) out[:] = list_of_arrays return out
if cache: cleaned_results = json_safe(globals_dict) cache.set(key, (emsg, cleaned_results))
return Select(select_browser_query.first.results[0]).options
t_path_dirs = os.listdir(t_path) if not t_path_dirs and t_path not in dirs_to_remove: dirs_to_remove.add(t_path) continue
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
IN_PROGRESS = "in_progress" FAILED = "failed" SUCCEEDED = "succeeded"
super(PresenterTestCase, self).tearDown()
_check_config_exists()
pass
new_patch = patch(function_name, new=mock) new_patch.start() self.addCleanup(new_patch.stop) return mock
FEATURES['COURSES_ARE_BROWSEABLE'] = True HOMEPAGE_COURSE_MAX = 9
return False
@decorators.memoize def __detect_os(): return salt.utils.which('ipvsadm')
TEST_PROFILE_IMAGE_BACKEND = deepcopy(settings.PROFILE_IMAGE_BACKEND) TEST_PROFILE_IMAGE_BACKEND['options']['base_url'] = '/profile-images/'
payload = {self._pattern: json.dumps(self._response_dict)} response = requests.put(url, data=payload)
if not has_access_on_students_profiles: raise Http404 try: student = User.objects.get(id=student_id) except (ValueError, User.DoesNotExist): raise Http404
return SelectKBest(chi2, k=k)
Xs.append(np.array([[1, 0.0003817754041], [2, 0.0003817753750]], dtype=np.float32))
if save_definition: return _save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=user_name, password=password, logon_type=task_definition.Principal.LogonType)
import salt.utils from tests import integration
t2 = TfidfTransformer(norm='l1', use_idf=False) tf = t2.fit(counts_train).transform(counts_train).toarray() assert_equal(t2.idf_, None)
continue
for block in blocks: for field in fields: self.assertIsNone(block_structure.get_xblock_field(block.location, field))
STANDALONE = 'standalone' COURSE = 'course'
if salt.utils.is_windows() or 'systemd-detect-virt' in cmd or 'prtdiag' in cmd: continue failed_commands.add(command)
types = [(MockDataFrame, MockDataFrame)] try: from pandas import Series, DataFrame types.append((DataFrame, Series)) except ImportError: pass
self.reload_course() new_tab = CourseTabList.get_tab_by_type(self.course.tabs, tab_type) self.assertEqual(new_tab.is_hidden, new_is_hidden_setting)
y_size = n_classes + 1 while (not allow_unlabeled and y_size == 0) or y_size > n_classes: y_size = generator.poisson(n_labels)
if settings.COMPREHENSIVE_THEME_DIR: enable_comprehensive_theme(settings.COMPREHENSIVE_THEME_DIR)
n_samples = 500
raise ValueError( "kd_tree algorithm does not support callable metric '%s'" % metric)
selector = self.get_element_selector(CSS_CLASS_NAMES['error_message']) return self.q(css=selector).text[0]
y_true = rng.randint(0, 3, size=10) assert_raise_message(ValueError, "multiclass format is not supported", average_precision_score, y_true, y_pred)
vmconfig['changed']['remove_{0}'.format(collection)].append(prop)
return '0{0}'.format(ret)
'environment': str,
request = RequestFactory().request() request.user = self.user all_tabs = get_course_tab_list(request, course) return any(tab.type == 'ccx_coach' for tab in all_tabs)
self.setup_inference_procedure() return self.inference_procedure.mf(*args, **kwargs)
self.assertIn( 'is not available', self.run_function('runtests_decorators.booldependsFalse' ) )
from __future__ import absolute_import import sys import types
return self.q(css='.bookmarks-results-header').text[0]
return self.mapbias + tensor.dot( self._factorsX(inputs) * self._factorsY(inputs), self.whf_in.T)
self.version_block(parent, user_id, new_structure['_id'])
self.submit_answer('Correct', 'Incorrect') self.assertEqual(self.get_progress_detail(), u'1/2')
self._add_draft_modules_to_course(new_course.location, source_course_key, user_id, **kwargs)
X = make_low_rank_matrix(n_samples=n_samples, n_features=n_features, effective_rank=rank, tail_strength=1.0, random_state=0) assert_equal(X.shape, (n_samples, n_features))
return
import logging
module = CapaFactory.create(done=False)
self.assertEqual(old_email, response.data["email"]) self.assertEqual("change my email", response.data["goals"])
for ind, merged_parent in enumerate(merged_parents_list): converted_object = _MergedGroupAccess([], block, []) converted_object._access = merged_parent merged_parents_list[ind] = converted_object
CourseFactory.create(emit_signals=True)
import salt.utils.boto3 import salt.utils.compat import salt.utils from salt.exceptions import SaltInvocationError from salt.ext.six import string_types
plt.subplot(2, 2, i + 1) Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
ax.xaxis.set_major_locator(MaxNLocator(nbins=6, prune='lower')) tick_formatter = ScalarFormatter() tick_formatter.set_powerlimits((-3, 4)) ax.xaxis.set_major_formatter(tick_formatter)
N_per_side = 5 Npts = N_per_side ** 2 n_neighbors = Npts - 1
return numpy.arccos(1. / val)
'INDIVIDUAL_DUE_DATES': False,
X, y = make_regression(random_state=random_state)
else: log.error(traceback.format_exc()) _ = self.capa_system.i18n.ugettext raise ResponseError( _("CustomResponse: check function returned an invalid dictionary!") )
assert_raises(ValueError, sel.transform, np.array([[1], [2]]))
self._create_course_modes(course_modes) enrollment = data.create_course_enrollment( self.user.username, unicode(self.course.id), enrollment_mode, True )
if getattr(xblock, "in_entrance_exam", False): xblock_info["is_header_visible"] = False
raised = False try: fmt = OneHotFormatter(max_labels=-10) except ValueError: raised = True assert raised
test_invalid_token("AAAAAAAAAAAAAAAAAAAAAMoazRI7ePLjEWXN1N7keLw=", "padding")
root_dir = self.server.config.get('root_dir') path = '{}{}'.format(root_dir, path) return path.split('?')[0]
ret[key] = {'old': old[key], 'new': new[key]}
n_samples = 80 n_features = 5 repeat = 10
model.tag[self._tag_key]['best_cost'] = self.best_cost
return self._send_lti2(payload)
extra_block = self.make_block("html", vertical_block_course)
for name in names: if name not in self.names_to_del: self.names_to_del.append(name)
matching_coupons = Coupon.objects.filter(code=code, is_active=True) if matching_coupons: return save_registration_code( user, course_id, mode_slug, invoice=invoice, order=order, invoice_item=invoice_item )
from __future__ import absolute_import
X2 = rng.randint(5, size=(6, 100)) y2 = np.array([1, 1, 2, 2, 3, 3])
self.assertFalse(library_container.has_validation_error) self.assertFalse(library_container.has_validation_warning)
verify_date_or_time(COURSE_END_TIME_CSS, DEFAULT_TIME) verify_date_or_time(ENROLLMENT_START_TIME_CSS, DEFAULT_TIME) verify_date_or_time(ENROLLMENT_END_TIME_CSS, DUMMY_TIME)
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
state_run = self.run_function('state.sls', mods='requisites.onfail_simple')
ans = False
files_to_fingerprint.append(sysconfig.get_python_lib())
log = logging.getLogger(__file__)
self.assertEqual(context[context_key], 'test latin1 Ó é ñ'.decode('utf8'))
#pepa_delimiter: ..
for kwargs_key in kwargs_keys: if kwargs_key.startswith('__pub_'): pub_data[kwargs_key] = kwargs.pop(kwargs_key)
assert_array_equal(clf.predict(T), true_result)
from __future__ import absolute_import, print_function import base64 import copy import getpass import json import logging import multiprocessing import subprocess import hashlib import tarfile import os import re import sys import time import yaml import uuid import tempfile import binascii import sys
self._upload_file('image.jpg')
'salt_event_pub_hwm': int, 'event_publisher_pub_hwm': int,
deploy_d_from_conf_file = os.path.join( os.path.dirname(config['conf_file']), 'cloud.deploy.d' )
from salt.serializers import json, yamlex, yaml, msgpack, python, configparser from salt.serializers import SerializationError from salt.utils.odict import OrderedDict
return
VerificationStatus.add_verification_status( checkpoint=self.first_checkpoint, user=self.user, status='submitted', ) attempt = SoftwareSecurePhotoVerification.objects.filter(user=self.user)
if record == channel_0.length: bad_channel.append(channel) continue
if sparse: decay = .01
try: import pymongo version = pymongo.version version = '.'.join(version.split('.')[:2]) HAS_PYMONGO = True except ImportError: HAS_PYMONGO = False
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
if packages is not None: args.append('--packages {pkgs}'.format(pkgs=packages)) if not _check_cygwin_installed(cyg_arch): _run_silent_cygwin(cyg_arch=cyg_arch)
for the_input in self.inputs.values(): if hasattr(the_input, 'ungraded_response'): the_input.ungraded_response(xqueue_msg, queuekey)
new_name = '{0}.sls.orig'.format(package) out_file = os.path.join(conn['pillar_path'], new_name)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'opennebula', vm_['profile']) is False: return False
response = self._regenerate(username=self.STUDENT_USERNAME) self.assertEqual(response.status_code, 400)
from __future__ import absolute_import import sys import types
with transaction.atomic(): return wrapped_func(*args, **kwargs)
kernel = self.kernel return kernel == "precomputed" or callable(kernel)
if self.assume_centered: self.location_ = np.zeros(X.shape[1]) else: self.location_ = X.mean(0)
locator = course.location.map_into_course(CourseLocator(version_guid=previous_version)) self.assertTrue( modulestore().has_item(locator), "couldn't find in %s" % previous_version )
else:
output_multip = enter_mainloop( _destroy_multiprocessing, parallel_data, pool_size=pool_size)
component_css = 'button[data-category={}]'.format(name) page.wait_for_element_visibility(component_css, 'Advanced component {} is visible'.format(name))
return 'telemetry_alert' if 'telemetry.get_alert_config' in __salt__ else False
if key_name is None: key_name = _format_dict_key(args, plugin)
from __future__ import absolute_import import logging import re
assets, count = content_store.get_all_content_for_course(self.course.id) self.assertEqual(count, 1) display_name = assets[0]['displayname'] self.assertEqual(display_name, invalid_displayname)
self.check_event_response_by_key( 'add_resource', self.test_recommendations[self.resource_id], 'id', self.resource_id )
self._job_queue = queue.Queue(queue_size)
from __future__ import absolute_import
if self.course_key is None: self.course_key = CourseKeyField.Empty entries = User.objects.filter( courseaccessrole__role=self._role_name, courseaccessrole__org=self.org, courseaccessrole__course_id=self.course_key ) return entries
y = np.mod(np.arange(len(y)), 3)
def __enter__(self): return self
if branch == ModuleStoreEnum.BranchName.published: revision = ModuleStoreEnum.RevisionOption.published_only store.delete_item(itemloc, user_id, revision=revision)
return reverse_course_url('group_configurations_list_handler', self.course.id)
from __future__ import absolute_import
CourseEnrollmentFactory(user=self.moderator, course_id=self.course.id) self.moderator.roles.add(Role.objects.get(name="Moderator", course_id=self.course.id))
self.course = self.store.publish(self.course.location, self.user_id)
return self.q(css='.form-create.create-user .user-email-input').visible
time.sleep(1) continue
ret = self.run_function('state.sls', mods='pip-installed-errors') self.assertSaltTrueReturn(ret)
sfn = tmp_filename
logadm.__salt__ = {}
salt '*' win_wua.list_updates categories=['Security Updates'] severities=['Critical']
self.assertEquals( response_data["content"], strip_none(make_mock_thread_data(course=self.course, text=text, thread_id=thread_id, num_children=1)) ) mock_request.assert_called_with( "get",
delvols_on_destroy = kwargs.get('del_all_vols_on_destroy', None)
if not has_course_author_access(request.user, course_key): return HttpResponse(status=403)
__func_alias__ = { 'list_': 'list' }
curr_logprob, z = self.score_samples(X)
if self.opts.get('permissive_pki_access', False) and stat.S_IWGRP & fmode.st_mode: return True elif stat.S_IWGRP & fmode.st_mode: return False
self.assertEqual(message.text, expected_message) self.assertEqual(message.type, expected_message_type)
FEATURES['ENABLE_COURSE_DISCOVERY'] = True
import salt.modules.cmdmod import salt.modules.smbios
if runas: os.seteuid(euid) os.setegid(egid) if exc is not None: raise CommandExecutionError( 'Exception encountered creating zipfile: {0}'.format(exc) )
return ret
self.assertTrue(self.video.downloaded_transcript_contains_text('txt', 'Welcome to edX.'))
save_submission(conf, valid_repr, test_repr)
stack = []
n_samples = [int(1e3), int(1e4), int(1e5), int(1e6)] n_features = int(1e2) n_queries = 100 n_neighbors = 10
self.store.publish(problem.location, self.user.id)
self.update_state( course_key=destination_course_key, new_state=self.State.IN_PROGRESS, user=user, allow_not_found=True, source_course_key=source_course_key, display_name=display_name, )
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
import salt.ext.six as six import salt.utils from salt.modules import network from salt.exceptions import CommandExecutionError if six.PY2: import salt.ext.ipaddress
pass
from __future__ import unicode_literals
from salt.states import mysql_user import salt
for section_format, sections in grading_context['graded_sections'].iteritems(): format_scores = [] for section in sections: section_descriptor = section['section_descriptor'] section_name = section_descriptor.display_name_with_default_escaped
return
if cherrypy.request.config.get('tools.sessions.on', False): cherrypy.session.release_lock()
import salt.utils import salt.utils.decorators as decorators
exc_info_on_loglevel=logging.DEBUG
self.check_group('radiotextgroup', 'choice', 'radio')
import tornado.testing import tornado.gen from tornado.testing import AsyncTestCase
from __future__ import absolute_import
return [None]
return EmptyPromise( lambda: self.link_title_for_link_field(field_id) == expected_title, "Link field with link title \"{0}\" is visible.".format(expected_title) ).fulfill()
shutil.copyfile(path_in, path_test)
centers = [[1, 1], [-1, -1], [1, -1]] X, labels_true = make_blobs(n_samples=300, centers=centers, cluster_std=0.5, random_state=0)
actual_items = source_store.get_items(dest_course_id, revision=ModuleStoreEnum.RevisionOption.published_only) chapter_is_found = False
import logging log = logging.getLogger(__file__)
indent_next = logical_line.endswith(':')
lookup_value = '[^/.]+'
import logging import re
response = self._regenerate()
if summary and not summary_data: summary.append(line) summary_data = _parse_fmdump("\n".join(summary))[0] continue
set_course_cohort_settings( course_key=self.course.id, is_cohorted=False, cohorted_discussions=["Topic_A"], always_cohort_inline_discussions=False, ) check_cohorted_topics([])
create_collection_index(self.collection, '_id.revision', background=True)
user: myuser password: mypassword url: https://api.cloud.xmission.com:4465/paci/v1.0/ driver: parallels
raise NotImplementedError
from salt.states import pyrax_queues
current_state = __salt__['tuned.active']()
temp_poll_answers = self.poll_answers
if not enabled(name): return False
if role == 'instructor': world.instructor = InstructorFactory(course_key=world.course_key) world.enroll_user(world.instructor, world.course_key)
params = pipe.get_params(deep=True) params2 = pipe2.get_params(deep=True)
for student in students[6:7]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.notpassing, mode='honor' )
self.student = UserFactory(username=uname, password=password, email=email)
self.assertEqual( self.run_function('xattr.read', [TEST_FILE, 'patrick']), 'ERROR: Attribute not found: patrick')
try: original_pip_version = pip.__version__ pip.__version__ = MagicMock( side_effect=AttributeError( 'Faked missing __version__ attribute' ) ) except AttributeError: pass
myrole: boto_iam_role.present: - profile: key: GKTADJGHEIQSXMKKRBJ08H keyid: askdjghsdfjkghWupUjasdflkdfklgjsdfjajkghs region: us-east-1
return urljoin(self.internal_service_url, '/api/v1/')
elif version_num not in pkginfo: log.error('Version {0} not found for package ' '{1}'.format(version_num, pkg_name)) ret[pkg_name] = {'not found': version_num} continue
__salt__['cmd.run']('attrib -R "{0}"'.format(notify_path))
self.q(css="select#allowance_type").present or self.q(css="label#timed_exam_allowance_type").present
data[match.group(1)] = re.sub(r'\\([$"\'\\`])', r'\1', match.group(2))
session = self.client.session session["donation_for_course"] = { unicode(course_id): amount } session.save()
self.socket.close()
P *= self.early_exaggeration
from salt.states import proxy as proxy
return
y = 0.5 * X.ravel()
self.assertIn("logo_image", json_data)
url(r'^api/user/', include('openedx.core.djangoapps.user_api.urls')),
self.estimators_ = []
'oauth2_provider',
n_classes = 1 if solver in ('liblinear', 'sag'): break
return
from __future__ import absolute_import import sys import os.path
is_verified = cache_values.get(enrollment_cache_key) if is_verified is None: is_verified = CourseEnrollment.is_enrolled_as_verified(user, course_key) cache.set(enrollment_cache_key, is_verified)
transcripts_info = video_descriptor.get_transcripts_info() transcript_langs = video_descriptor.available_translations(transcripts_info, verify_assets=False)
from logging import getLogger
old_name = None if "name" in update: old_name = existing_user_profile.name
raise NotImplementedError
n_components = 100 n_features = 1000 A = gaussian_random_matrix(n_components, n_features, random_state=0)
self.add_credit_course()
template = CourseEmailTemplate.get_template() self.assertIsNotNone(template.html_template) self.assertIsNotNone(template.plain_template)
css_click('#{}'.format(elem_id))
split_test = self._add_split_test_to_vertical(number=0, group_configuration_metadata={'user_partition_id': 0})
n_i = used_node[i] n_j = used_node[j] used_node[k] = n_i + n_j used_node[i] = used_node[j] = False
ANALYTICS_DASHBOARD_URL = None
return remove_root(root, sorted(glob2.glob('{root}/{glob}'.format(root=root, glob=glob))))
try: import psycopg2 HAS_POSTGRES = True except ImportError: HAS_POSTGRES = False
from __future__ import unicode_literals
return self.q(css=".field-time-limit").visible
payload = json.dumps(data)
clf = svm.SVC(kernel=my_kernel) clf.fit(X, Y)
auto_reject = self.auto_key.check_autoreject(load['id']) auto_sign = self.auto_key.check_autosign(load['id'])
'event_return_queue': int,
state.__salt__ = {} state.__context__ = {} state.__opts__ = {} state.__pillar__ = {}
import logging from salt.exceptions import SaltInvocationError from time import time, sleep
basedirs = _normalize_basedir(basedir) repos = list_repos(basedirs)
self._collection.clear() self._uri_cache.clear()
for tab in tabs: if tab.tab_id == "discussion" and django_comment_client.utils.is_discussion_enabled(self.id): return True return False
ndim = _read_int32(f) if debug: logger.debug('header ndim {0}'.format(ndim))
set_crontab(
'profiles_config', os.path.join(salt.syspaths.CONFIG_DIR, 'cloud.profiles')
alpha_ = 1. / np.var(y) lambda_ = 1.
self.q(css='button.signatory-panel-save').click() self.mode = 'details' self.wait_for_ajax() self.wait_for_signatory_detail_view()
return _error(ret, u_check)
new_conf.append(new_line)
X_pred_transformed = kpca.transform(X_pred) assert_equal(X_pred_transformed.shape[1], X_fit_transformed.shape[1])
city_label = _(u"City")
if settings.ROOT_URLCONF == 'lms.urls': url_pattern = '/dashboard' else: url_pattern = '/home'
if not run_diff_quality( violations_type="jshint", prefix=pythonpath_prefix, reports=jshint_reports, percentage_string=percentage_string, branch_string=compare_branch_string, dquality_dir=dquality_dir ): diff_quality_percentage_pass = False
self.expected_settings_change_initiated_event( 'email', email, 'you@there.com', username=username, user_id=user_id),
module = CapaFactory.create(max_attempts="1", attempts="0", due=self.yesterday_str) self.assertTrue(module.closed())
self.assertTrue(filecmp.cmp(path_test + '.bak', path_in))
msg = u"Skipping {}, already enrolled in destination course {}" print msg.format(user.username, unicode(dest_key))
self.assertEquals(preview.latex_preview('3.1415'), '3.1415')
import salt.ext.six as six
self.assertTrue(element_has_text( page=course_outline_page, css_selector='span.section-title', text='Entrance Exam' ))
self.check_modal_shows_correct_contents(self.type_fields) self.advanced_settings.refresh_and_wait_for_load()
from salttesting import skipIf, TestCase from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self._configure_message_timeout(10000)
import salt.utils from unit.modules.zcbuildout_test import Base, KNOWN_VIRTUALENV_BINARY_NAMES from salt.modules import zcbuildout as modbuildout from salt.states import zcbuildout as buildout from salt.modules import cmdmod as cmd
out, err = DETAILS['server'].sendline(cmd)
from __future__ import absolute_import import json import os
resp = self.client.get(reverse('shoppingcart.views.show_receipt', args=[self.cart.id])) self.assertEqual(resp.status_code, 200)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'linode', vm_['profile'], vm_=vm_) is False: return False
result = [] for image in res['stdout'].splitlines(): image = [var for var in image.split(" ") if var] result.append(image[2])
with self.assertRaises(Exception): self.check_group('invalid', 'choice', 'checkbox')
index = rng.randint(0, len(correct_choices) - 1) correct_choice = correct_choices[index] solution_id = correct_choice.get('explanation-id')
DEBUG = False USE_TZ = True SESSION_COOKIE_SECURE = False SESSION_SAVE_EVERY_REQUEST = False SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
msg = "no doc impacting files detected:\n" + u"\n".join(filenames) exit(msg, skip=True)
if is_comment_too_deep(parent=None): return JsonError(_("Comment level too deep")) return _create_comment(request, CourseKey.from_string(course_id), thread_id=thread_id)
cet = CourseEmailTemplate.objects.get(name=None) self.assertIsNotNone(cet)
X_filtered = np.vstack((X[y == 0][:500], X[y == 1][:100], X[y == 2][:10])) y_pred = KMeans(n_clusters=3, random_state=random_state).fit_predict(X_filtered)
return (BlockTypeKeyV1(key.block_family, key.block_scope_id), key.field_name)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
upload_csv_to_report_store(rows, 'proctored_exam_results_report', course_id, start_date)
response = self.send_patch(client, {field: ""}) self.assertEqual("", response.data[field])
ransac_estimator.fit(X, y)
cov = ShrunkCovariance(shrinkage=0.5, store_precision=False) cov.fit(X) assert(cov.precision_ is None)
if ret in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
response = self.client.post(reverse('admin:student_courseaccessrole_add'), data=data) self.assertRedirects(response, reverse('admin:student_courseaccessrole_changelist'))
self.assertEqual(len(httpretty.httpretty.latest_requests), 1)
get_request_dict = {CapaFactory.input_key(): '3.14'} module.check_problem(get_request_dict)
from __future__ import absolute_import import os import shutil
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
salt '*' vsphere.service_restart my.esxi.host root bad-password 'ntpd'
np.random.seed(0)
from __future__ import absolute_import import time import logging import re import sys import shlex
return course_metadata_utils.course_start_date_is_default( self.start, self.advertised_start, )
if not expected_url.startswith("/"): expected_url = "/" + expected_url self.assertEquals(expected_url, actual_url)
y = zca_dataset.mapback(zca_dataset.X) assert_allclose(x[start:stop], y)
exclude_trees = ['_build', 'templates', 'includes']
from salt.exceptions import CommandExecutionError, SaltInvocationError
return settings.FEATURES.get('ENTRANCE_EXAMS', False)
course = CourseFactory.create() item = ItemFactory.create(parent_location=course.location) self.assertIsInstance(item, SequenceDescriptor)
if generate_translation: for lang, filename in item.transcripts.items(): item.transcripts[lang] = os.path.split(filename)[-1]
X, y = make_circles(n_samples=400, factor=.3, noise=.05, random_state=0)
group_id, user_partition_id = get_masquerading_group_info(self.test_user, self.course.id) self.assertEqual(group_id, 1) self.assertEqual(user_partition_id, 0)
cdn_url = getattr(settings, 'VIDEO_CDN_URL', {}).get(self.system.user_location)
try: while True: observer.join(2) except KeyboardInterrupt: observer.stop() print("\nStopped asset watcher.")
return User.objects.filter( courseenrollment__course_id=course_id )
import salt.utils
user, client_name = mock_get_id_token.call_args[0] self.assertEqual(user, self.user) self.assertEqual(client_name, "programs")
self.options.log_level = self._default_logging_level_
import salt.utils from salt.exceptions import CommandExecutionError
def __init__(self): self.exceptions = MockExceptions()
self.assertTrue( self.run_function('xattr.write', [TEST_FILE, 'spongebob', 'squarepants']))
if self.multi_class == 'multinomial': classes_ = [None] warm_start_coef = [warm_start_coef]
self.load_data()
except NotFoundError: log.exception("Module indicating to user that request doesn't exist") raise Http404
perf_test = True
self.get_selector('#invalidate-certificate').click()
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
indptr_3 = X_sparse_unpruned.indptr[3] indptr_4 = X_sparse_unpruned.indptr[4] X_sparse_unpruned.data[indptr_3:indptr_4] = 0.0
pass
cohort_list[0].users.remove(*user_list) assert_events("removed", user_list, cohort_list[:1]) mock_tracker.reset_mock()
if isinstance(address, bytes): self._check_packed_address(address, 4) self._ip = _int_from_bytes(address, 'big') return
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
response = self._get_page(payment_flow, course.id) self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS, PayAndVerifyView.MAKE_PAYMENT_STEP ) self._assert_requirements_displayed(response, [])
cert_items = CertificateItem.objects.filter(order=order)
if is_advanced_problem: advanced_tab = page.q(css='.problem-type-tabs a').filter(text='Advanced').first advanced_tab.click()
child_to_delete_location = self.problem_y1a_1 old_parent_location = self.vertical_y1a self.store.delete_item(child_to_delete_location, self.user_id)
p_shared = sharedX(zv[:, :, 0:rows:pool_rows, 0:cols:pool_cols]) h_shared = sharedX(zv) z_shared = sharedX(zv)
return self.q(css='a.action-{}'.format(widget_name))
creq_in = context.socket(zmq.REP) creq_in.setsockopt(zmq.LINGER, 100) creq_in.bind('ipc://' + self.cache_sock)
return array.array(str("i"))
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(boston.data, boston.target, random_state=rng)
train_sizes_abs = _translate_train_sizes(train_sizes, n_max_training_samples) n_unique_ticks = train_sizes_abs.shape[0] if verbose > 0: print("[learning_curve] Training set sizes: " + str(train_sizes_abs))
message = "Error while calling " + str(type(self)) + ".expr" reraise_as(TypeError(message))
minibatch_iterators = iter_minibatches(data_stream, minibatch_size) total_vect_time = 0.0
finally: HIGHSTATE.pop_active()
import salt.utils.http
return result.get('payment_data')
return response
return Response(status=503, headers={'Retry-After': '120'})
import salt.loader import salt.utils import salt.utils.minion from salt.ext.six.moves import map
_current_statement = None _current_option = None _current_parameter = None _current_parameter_value = None
self._breadth_first(convert_item, [location])
current = stack[-1]
self.assertEqual(sysex.exception.args, (1,))
__virtualname__ = 'shadow'
key, value = name.split('=', 1) kwargs[key] = value
export_extra_content( export_fs, self.modulestore, self.courselike_key, xml_centric_courselike_key, 'static_tab', 'tabs', '.html' )
self.options.log_file = self.config.get(cli_setting_name)
ret['result'] = True ret['comment'] = 'image {0} is absent'.format(name)
FEATURES['MILESTONES_APP'] = True
assert_true(hasattr(InheritanceMixin, attribute))
self.assertTrue(self.cohort_management_page.is_save_button_disabled(key))
self.assertTrue(linode._validate_name('1foo')) self.assertTrue(linode._validate_name('foo0'))
U, S, V = randomized_svd(X, n_components=n_components, n_iter=self.iterated_power, flip_sign=True, random_state=random_state)
idx = np.arange(n_train) np.random.seed(13) np.random.shuffle(idx) X_train = X_train[idx] y_train = y_train[idx]
dd_intercept = np.squeeze(np.array(dX.sum(axis=0)))
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor' )
for n_comp in np.arange(1, X.shape[1]): pca = PCA(n_components=n_comp, svd_solver='randomized', random_state=0)
col_services = obj_sm.Services
content = map(lambda l: l[:-1].split(', '), content)
import salt.ext.six as six
return create_xblock_info( modulestore().get_item(location), include_child_info=True, include_children_predicate=ALWAYS, )
self.assertTrue(self._is_valid_key(key), msg="Failed for unicode character {0}".format(unicode_char))
entry = _fstab_entry(**entry_args) try: criteria = entry.pick(match_on)
multicast_network = IPv6Network('ff00::/8') return self in multicast_network
if not data[pkg_name]: data.pop(pkg_name)
__virtualname__ = 'svn'
self.page = CourseTeamPage( self.browser, self.course_info['org'], self.course_info['number'], self.course_info['run'] ) self._go_to_course_team_page()
iris = load_iris() X = iris.data y = iris.target transft = TransfT() pipeline = Pipeline([('mock', transft)])
from __future__ import absolute_import
MIGRATION_MODULES = {}
except Exception: log.critical('Unexpected error while polling master events', exc_info=True) return None
daemontools.__grains__ = {} daemontools.__salt__ = {} daemontools.__context__ = {} daemontools.__opts__ = {}
role, __ = Role.objects.get_or_create(course_id=course_id, name=FORUM_ROLE_STUDENT) user.roles.add(role)
clf = AdaBoostRegressor(random_state=0) clf.fit(X, y_regr) assert_array_equal(clf.predict(T), y_t_regr)
password: letmein apikey: 901d3f579h23c8v73q9
logprob, responsibilities = self.score_samples(X) return responsibilities.argmax(axis=1)
from __future__ import absolute_import
region_str = "[ [1,1], [5,10], [0,10] ]"
from salt.states import schedule
salt '*' win_wua.list_updates severities=['Critical']
saveload_fstr = '{0}.save_load'.format(self.opts['master_job_cache']) self.mminion.returners[saveload_fstr](load['jid'], load)
CSRF_COOKIE_SECURE = ENV_TOKENS.get('CSRF_COOKIE_SECURE', False)
self.assertEqual(parent.graceperiod, new_block.graceperiod) self.assertEqual(parent.start, new_block.start) self.assertEqual(course.start, new_block.start)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
help = "Create a course in one of {}".format([ModuleStoreEnum.Type.mongo, ModuleStoreEnum.Type.split]) args = "modulestore user org course run"
if course_data.get('name'):
blocked_states.append('IM') cauth.embargoed_countries = 'US, AQ, IM' cauth.save() currently_blocked = EmbargoedState.current().embargoed_countries_list
defaults.write( 'TIMEOUT=60\n' 'TICK=1\n' )
resources = find_release_resources() sh("i18n_tool transifex pull " + " ".join(resources))
'name': block.display_name_with_default_escaped, 'category': block.category, 'id': unicode(block.location)
salt 'jerry' system.reboot && \\ salt-run state.event 'salt/minion/jerry/start' count=1 quiet=True && \\ salt 'jerry' state.highstate
assert_raises(AssertionError, assert_raise_message, (ValueError, AttributeError), "test", _no_raise)
log.warning( 'Minion id {0} is not who it says it is!'.format( load['id'] ) ) return {}
new_sum_squared_grad = ( sum_square_grad + T.sqr(grads[param]) )
saltenv = env
lines = __salt__['cmd.run_stdout']("/bin/pkg list -Huv").splitlines() for line in lines: upgrades[_ips_get_pkgname(line)] = _ips_get_pkgversion(line) return upgrades
pass
self.position = position
self.wait_for_element_visibility('.create-user-button', "Add team member button is available") self.click_add_button() self.set_new_user_email(email) self.click_submit_new_user_form() self.wait_for_page()
extra_params = dict(x_left_lower_corner=-94.8, Nx=1212, y_left_lower_corner=-56.05, Ny=1592, grid_size=0.05) dtype = np.int16
if spot_config: sir_id = data[0]['spotInstanceRequestId']
self.assertEqual(resp.status_code, 200)
VERIFIED_MODES = [VERIFIED, PROFESSIONAL]
if self.__serialize_attr_aliases__ and argname in self.__serialize_attr_aliases__: argname = self.__serialize_attr_aliases__[argname] serialized[argname] = argvalue
whitelist = self.cleaned_data["whitelist"] return self._valid_ip_addresses(whitelist)
from __future__ import absolute_import import os import re import logging
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'profitbricks', vm_['profile']) is False: return False
self.cmap = dict() self.items = self.cmap.items self.keys = self.cmap.keys self.overall_message = "" self.set(*args, **kwargs)
__virtualname__ = 'json5'
assert_equals('"/static/data_dir/file.png"', replace_static_urls(STATIC_SOURCE, DATA_DIRECTORY))
CLASS_PRIORITY = ['video', 'problem']
clf_samme.algorithm = "SAMME.R" assert_array_less(0, np.abs(clf_samme.predict_proba(iris.data) - prob_samme))
super(TestCourseVerificationStatus, self).setUp()
module.lcp.get_html = Mock(side_effect=Exception("Test"))
return course_mode_tuple.slug in cls.CREDIT_MODES
from salt.states import postgres_cluster
try: fh_ = salt.utils.atomicfile.atomic_open(path, 'w') for line in new_file: fh_.write(line) finally: fh_.close()
__virtualname__ = 'group'
dict_delitem(self, key) link_prev, link_next, key = self.__map.pop(key) link_prev[1] = link_next link_next[0] = link_prev
self.store.delete_item(vertical.location, self.user_id) self.assertFalse(self._has_changes(sequential.location))
context = event.get('context', {}) if field in context: event[field] = context[field] del context[field] else: event[field] = default_value
from salttesting.helpers import ensure_in_syspath from salttesting import skipIf ensure_in_syspath('../../')
return ( course1['org'] == course2['display_organization'] and course1['number'] == course2['display_coursenumber'] and course1['run'] == course2['run'] )
ensure my cloudwatch service exists: pagerduty_service.present: - name: my cloudwatch service - service: escalation_policy_id: "my escalation policy" type: aws_cloudwatch description: "my cloudwatch service controlled by salt"
self._mock_ecommerce_courses_api(self.course_key, self.COURSE_API_RESPONSE) response_providers = get_credit_provider_display_names(self.course_key) self.assertListEqual(self.PROVIDERS_LIST, response_providers)
try: import docker import docker.utils HAS_DOCKER_PY = True except ImportError: HAS_DOCKER_PY = False
return len(tsql_query(query='sp_helprole "{0}"'.format(role), as_dict=True, **kwargs)) == 1
disable_animations(annotation_component_page)
content_location = Transcript.asset_location(location, name) content = StaticContent(content_location, name, mime_type, content) contentstore().save(content) return content_location
return section_titles.index(title.lower()) + 1
from unit.modules.boto_cloudtrail_test import BotoCloudTrailTestCaseMixin
self.assertTrue('success' in result and not result['success'])
required_boto3_version = '1.2.1'
return self.q(css=self._bounded_selector('.xblock-author_view'))[0].text
ret = self.run_function( 'state.sls', mods='pip-installed-weird-install' ) self.assertSaltTrueReturn(ret)
continue
assert_equal(X_counted.nnz, X_hashed.nnz)
mytopic: boto_sns.present: - region: us-east-1 - profile: mysnsprofile
store = modulestore() with store.default_store('split'): store.clone_course(source_course_key, destination_course_key, user_id, fields=fields)
import salt.ext.six as six
answer_element = etree.SubElement(codeparam_element, "answer_display") answer_element.text = str(answer_display)
masks = numpy.asarray([subset.sum(axis=0) for subset in data]).squeeze() nz_feats = combine(masks).nonzero()[0]
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
y = np.array([10, 9, 10, 7, 6, 6.1, 5]) x = np.arange(len(y))
train.save = MethodType(only_run_extensions, train)
return self.filter_by(data, "user", user)
__virtualname__ = 'service'
return (user_id, role_id, tenant_id)
language = models.CharField(blank=True, max_length=255, db_index=True) location = models.CharField(blank=True, max_length=255, db_index=True)
if not os.path.isdir(self.git_repo_dir / 'edx4edx'): os.mkdir(self.git_repo_dir / 'edx4edx')
except CyclicDefinitionError: return default_location
if ((filename_match(filename, filepatterns) and not self.excluded(filename, root))): runner(os.path.join(root, filename))
from salt.modules import solr import os
return auth.user_has_role(user, CourseStaffRole(CourseKey.from_string(course_id)))
self.request.user = self.effective_user
return "{}#{} {}".format( self.BODY_SELECTOR, self.item_id, selector, )
password_label = _(u"Password")
annotation_input_selector = self.active_problem_selector('.annotation-input') return self.q(css=annotation_input_selector).visible
return _write_styles('.xmodule_display', output_root, _list_modules())
_ = self.runtime.service(self, "i18n").ugettext check = _('Check') final_check = _('Final Check')
DEFAULT_SITE_ID = 1
try: return ( self.backend_name == pipeline['backend'] and self.lti_consumer_key == pipeline['kwargs']['response'][LTI_PARAMS_KEY]['oauth_consumer_key'] ) except KeyError: return False
course = CourseFactory.create(display_name="Test Course")
start_index = self._line_start_indexes[line_number - 1] if len(self._line_start_indexes) == line_number: line = self._string[start_index:] else: end_index = self._line_start_indexes[line_number] line = self._string[start_index:end_index - 1] return line
plt.contourf(X, Y, Z, levels=levels, cmap=plt.cm.Reds) plt.colorbar(format='%.2f')
if value is not UNSET: dct[key] = value
batch_size = v.shape[0]
except ValueError: return None
__virtualname__ = 'redis'
self.assertEqual(microsite.get_backend(None, BaseMicrositeBackend), None)
if self.opts['order_masters']: payload_kwargs['to'] = timeout
for n_labels in range(2, 10): y_score = np.ones((1, n_labels))
with patch('os.path.isfile', MagicMock(return_value=False)) as mock: local_cache.clean_old_jobs()
estimator_error = (sample_weight * error_vect).sum()
name = _sdecode(name) if snap_name: snap_name = _sdecode(snap_name)
from __future__ import absolute_import
import cherrypy from cherrypy.lib import cpstats import yaml import salt.ext.six as six
success = False num_attempts = 0 while (not success) and num_attempts < MAX_VALID_BROWSER_ATTEMPTS:
X = np.random.randn(10, 2) X[::2] = np.nan
today = date.today() TUESDAY = 2 days_until_tuesday = (TUESDAY - today.isoweekday()) % 7 return today + timedelta(days=days_until_tuesday)
options = self.q(css="body.discussion .forum-nav-sort-control option") return options.filter(lambda el: el.is_selected())[0].get_attribute("value")
assert_raises(ValueError, sample_without_replacement, -1, 5) assert_raises(ValueError, sample_without_replacement, 5, -1)
perf_test = True
export_extra_content( export_fs, self.modulestore, self.courselike_key, xml_centric_courselike_key, 'about', 'about', '.html' )
X_scaled = MinMaxScaler().fit_transform(X) assert_true(np.isfinite(X_scaled).all())
rendered_html = etree.XML(problem.get_html())
store.save(content)
import salt.payload import salt.transport import salt.utils.args from salt.exceptions import SaltReqTimeoutError
report_comments = models.TextField(default="")
GRADES_DOWNLOAD_ROUTING_KEY = HIGH_MEM_QUEUE
zypper.__salt__ = dict() zypper.__context__ = dict() zypper.rpm = None
'html5_sources': ['http://www.example.com/source.mp4'], 'data': ''
if expected is None: self.assertEqual(expected, constructed) else: self.assertTrue(constructed.startswith(notes_url))
batch_size = self.batch_size
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, Mock, MagicMock, patch )
indices = np.empty(X.shape[0], dtype=np.intp) values = np.empty(X.shape[0]) values.fill(np.infty)
from __future__ import absolute_import import integration
"spec", "spec_helpers",
class_counts = np.bincount(y)[2:] assert_almost_equal(np.dot(cw, class_counts), y.shape[0]) assert_true(cw[0] < cw[1] < cw[2])
url( r'^(?P<certificate_uuid>[0-9a-f]{32})$', views.render_cert_by_uuid, name='render_cert_by_uuid' ),
ica = FastICA(n_components=3)
err = Exception mock_index_dictionary.return_value = err
from __future__ import absolute_import
from __future__ import absolute_import import os
repofile = repos[repo]['file'] header, filerepos = _parse_repo_file(repofile)
assert mlp_composite.get_input_space() == fl.get_input_space()
import logging import os
self.rng = make_np_rng(None, [2012, 10, 17], which_method="uniform")
options = _get_options(ret=None)
if block_type == 'course': block_id = course_key.run xblock = self.create_xblock(runtime, course_key, block_type, block_id, fields) return self.update_item(xblock, user_id, allow_not_found=True)
X = np.ascontiguousarray(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
sample_str = self._sample_str(sample_dict, num_samples, tolerance) response_element.set("samples", sample_str)
pass
return self.q(css='.bookmarks-empty-detail-title').text[0]
assert_equal(lfw_people.images.shape, (10, 62, 47)) assert_equal(lfw_people.data.shape, (10, 2914))
self.setup_cohorts(self.course)
from __future__ import unicode_literals
grains = {'virtual': 'physical'}
self.store.unpublish(item_location, self.user_id) item = self.store.get_item(item_location) self.assertFalse(self.store.has_published_version(item)) _check_asides(item)
'ENABLE_STUDENT_HISTORY_VIEW': True,
os.remove(filename)
ex_sls.add(exc)
return self.scope_ids.usage_id.course_key.org
date_config = vim.HostDateTimeConfig(ntpConfig=ntp_config)
pass
self.assertEqual(mail.outbox[-1].to[0], 'finance@example.com')
module = module + '.' if not module.endswith('.') else module
resp_params = PaymentFakeView.response_post_params(post_params) self.assertEqual(resp_params.get('decision'), 'ACCEPT')
self.request.user = staff_user unlocked_toc = self._return_table_of_contents() for toc_section in self.expected_unlocked_toc: self.assertIn(toc_section, unlocked_toc)
try: return cls.objects.get(Q(invoice_id=invoice_id), Q(status='completed') | Q(status='refunded')) except InvoiceTransaction.DoesNotExist: return None
P /= self.early_exaggeration opt_args['n_iter'] = self.n_iter opt_args['it'] = it + 1 params, error, it = _gradient_descent(obj_func, params, **opt_args)
conn = s3.connection.S3Connection( settings.AWS_ACCESS_KEY_ID, settings.AWS_SECRET_ACCESS_KEY ) return conn.get_bucket(settings.VIDEO_UPLOAD_PIPELINE["BUCKET"])
teams_configuration = {} teams_configuration["topics"] = [] if topics is None else topics if max_team_size is not None: teams_configuration["max_team_size"] = max_team_size self.course.teams_configuration = teams_configuration
user_environment = win32profile.CreateEnvironmentBlock(token, False)
RequestCache.clear_request_cache()
('INNERGRID', (1, 1), (-2, -1), 0.50, '#cccccc'),
if not ensure_views(): return []
result = defaultdict(dict) for field in xblock.fields.itervalues(): if field.is_set_on(xblock): result[field.scope][field.name] = field.read_from(xblock) return result
saltenv=saltenv, pillarenv=kwargs.get('pillarenv'), pillar_override=kwargs.get('pillar'), )
from __future__ import absolute_import
if key not in self: root = self.__root last = root[0] last[1] = root[0] = self.__map[key] = [last, root, key] dict_setitem(self, key, value)
response = self.fetch('/', headers={'Accept': self.content_type_map['xml']}) self.assertEqual(response.code, 406)
os.environ.get('TMPDIR', tempfile.gettempdir()) if salt.utils.is_darwin() else '/tmp'
if '__opts__' not in globals(): globals()['__opts__'] = get_opts()
self.wait_for_element_visibility(selector, 'Success div is shown')
cls.objects.create( invoice=invoice, snapshot=json.dumps(invoice.snapshot()) )
is_hideable = False
self.browser.execute_script("window.scrollTo" + str(self.coordinates_for_scrolling(UNDO_BUTTON_SELECTOR))) self.q(css=UNDO_BUTTON_SELECTOR).click() self.wait_for_ajax()
_response = _request("GET", options['url'] + "_all_dbs") if options['db'] not in _response:
clf = svm.SVC(class_weight={1: 0.1}) clf.fit(X, Y) assert_array_almost_equal(clf.predict(X), [2] * 6)
self.assertFalse(os.path.exists(path_test + '.bak'))
cm = metrics.confusion_matrix(y_test, y_predicted) print(cm)
raise CommandError(e)
ssh_key_changed = True
self.no_labels = Attribute('no_labels', default="False").parse_from_xml(self.xml)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
VerificationDeadline.objects.all().delete()
resp = self._change_enrollment('unenroll') self.assertEqual(resp.status_code, 200)
notification_url = reverse_course_url('course_notifications_handler', self.course.id, kwargs={ 'action_state_id': 1, })
fragment = Fragment(content) fragment.add_css('body {background-color:red;}') fragment.add_javascript('alert("Hi!");') return fragment
out = np.packbits((projected > 0).astype(int)).view(dtype=HASH_DTYPE) return out.reshape(projected.shape[0], -1)
try: minions_remaining.remove(event['data']['id']) except ValueError: pass if len(minions_remaining) == 0: raise tornado.gen.Return(chunk_ret)
else: return provider_respond(server, openid_request, server.handleRequest(openid_request), {})
exc_info_on_loglevel=logging.DEBUG
if len(cls.tags) == 0: raise ValueError("No tags specified for class {0}".format(cls.__name__))
self.validate_xblock_info_consistency(xblock_info, has_child_info=has_child_info)
import salt.spm import salt.utils.parsers as parsers from salt.utils.verify import verify_log
if not cuda.cuda_available: convnet_available.compile_error = True _logger.debug('cuda unavailable') return False
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
session = self.client.session session['attempting_upgrade'] = True session.save()
self.file_mapping[f_noext] = (fpath, ext)
self.assertEqual(certificate_exception['user_email'], self.user.email) self.assertEqual(certificate_exception['user_name'], self.user.username)
request = Mock() request.META = {'HTTP_REFERER': http_referer} request.is_secure = lambda: is_secure return request
wua_searcher = wua_session.CreateUpdateSearcher() wua_download_list = win32com.client.Dispatch('Microsoft.Update.UpdateColl') wua_downloader = wua_session.CreateUpdateDownloader()
clf = PassiveAggressiveClassifier(C=0.1, n_iter=100, class_weight={1: 0.001}, random_state=100) clf.fit(X2, y2)
if len(new_name) < NAME_MIN_LENGTH: raise serializers.ValidationError( "The name field must be at least {} characters long.".format(NAME_MIN_LENGTH) ) return new_name
import salt.utils import salt.utils.locales from salt.modules.reg import read_value
elem.clear() elem.send_keys(value) elem.send_keys(Keys.TAB) self.save()
pass
err = SearchIndexingError mock_index_dictionary.return_value = err
with self.assertRaises(Http404): self._build_and_run_request(self._anon_user, self._anon_fields)
X, y = make_classification(n_samples=200, n_features=20, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, flip_y=0.0, class_sep=10, shuffle=False, random_state=0)
zmq_version()
self.socket.close()
return urljoin(self.public_service_url, '/api/v{}/'.format(self.api_version_number))
from __future__ import absolute_import
if (('python2.7/site-packages/gunicorn/workers/sync.py' in exc_str) and ('[Errno 11] Resource temporarily unavailable' in exc_str)): exc_str = ''
from __future__ import absolute_import
self.writable_chapter_location = self.store = self.fake_location = None self.course_locations = {}
draft_node_list = []
'contentstore', 'contentserver', 'course_creators', 'external_auth',
Xnan = np.array(X, dtype=np.float64) Xnan[0, 1] = np.nan LogisticRegression(random_state=0).fit(Xnan, Y1)
root_dir = path(mkdtemp_clean()) export_course_to_xml(self.store, content_store, course_id, root_dir, 'test_roundtrip')
urlpatterns += ( url(r'^xdomain_proxy.html$', 'cors_csrf.views.xdomain_proxy', name='xdomain_proxy'), )
try: import gen_rst except: pass
unicode_text = "好 各位同学".decode('utf-8') self.assertIn(unicode_text, self.video.captions_text)
__virtualname__ = 'carbon'
hyper_parameters = expand(flatten(state.hyper_parameters), dict_type=ydict)
dataset = fetch_olivetti_faces(shuffle=True, random_state=rng) faces = dataset.data
return True
testing.assert_array_equal(F.transform(X), np.around(X, decimals=3))
return random.choice((True, False))
try: file_result = file_result[next(six.iterkeys(file_result))] except AttributeError: pass
log.debug( "SafeCookieData received empty user_id '%s' for session_id '%s'.", user_id, session_id, )
y_pred, sigma = gp.predict(x, return_std=True)
jdict['__master_id__'] = master
task_type = 'rescore_problem' task_class = rescore_problem task_input, task_key = encode_entrance_exam_and_student_input(usage_key, student) return submit_task(request, task_type, task_class, usage_key.course_key, task_input, task_key)
self._make_eligible() self._purchase_credit()
try: sfn, source_sum, comment = __salt__['file.get_managed']( cron_path, template, source, source_hash, owner, group, mode, __env__, context, defaults,
self.cart.purchase() resp = self.client.get(instructor_dashboard) self.assertEqual(resp.status_code, 200)
from __future__ import absolute_import
CORRECTMAP_PY = inspect.getsource(correctmap)
from __future__ import absolute_import import time import threading
for item_type in item_types: if cart.has_items(item_type): return True
if 'pinned' not in thread.attributes: thread['pinned'] = False
lib_key = LibraryLocator("TestOrg", "TestLib") result = self.draft_store.has_course(lib_key) assert_false(result)
return ( context["is_requester_privileged"] or context["cc_requester"]["id"] == cc_content["user_id"] )
detached_locations = [ course_id.make_usage_key('static_tab', 'StaticTab'), course_id.make_usage_key('course_info', 'updates'), ]
redeem_url = reverse('register_code_redemption', args=[context['reg_code_info_list'][0]['code']])
from salt.states import aptpkg
HOMEPAGE_COURSE_MAX = None
dot_update = (old_W * scal_points).sum(axis=0)
from __future__ import absolute_import, print_function import os
for c in range(1, n_clusters): rand_vals = random_state.random_sample(n_local_trials) * current_pot candidate_ids = np.searchsorted(closest_dist_sq.cumsum(), rand_vals)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
data_train, targets_train = data[:n_samples / 2], digits.target[:n_samples / 2]
if not issubclass(clz, APIView): msg = ( u"{clz} is not a Django Rest Framework APIView subclass." ).format(clz=clz) LOGGER.warning(msg) return clz
if world.is_css_present('{}.is-shown'.format(saving_mini_css)): world.css_find('{}.is-hiding'.format(saving_mini_css))
if sys.platform.startswith('win'): import win32file else: import resource
from salt.states import boto_sqs
assert_raises(ValueError, ir.fit, x, y)
args = [name, '--id', snap_name]
ntaps += 1
from salt.modules import pw_group
super(DenseMulticlassSVM, self).fit(X, y) return self
while True: if mode == "B": if X_pinv is None: X_pinv = linalg.pinv2(X, **pinv2_args) x_weights = np.dot(X_pinv, y_score)
return redirect(reverse('dashboard'))
can_enroll = bool(has_access(request.user, 'enroll', course)) invitation_only = course.invitation_only is_course_full = CourseEnrollment.objects.is_course_full(course)
block = modulestore().get_item(block_location) block.user_partitions = partitions modulestore().update_item(block, 1)
FACEBOOK_API_VERSION = AUTH_TOKENS.get("FACEBOOK_API_VERSION") FACEBOOK_APP_SECRET = AUTH_TOKENS.get("FACEBOOK_APP_SECRET") FACEBOOK_APP_ID = AUTH_TOKENS.get("FACEBOOK_APP_ID")
_ = lambda text: text
AutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=True).visit()
BROKER_HEARTBEAT = 10.0 BROKER_HEARTBEAT_CHECKRATE = 2
from salttesting.case import TestCase from salttesting.helpers import ensure_in_syspath
if not modulestore().has_course(course_key): return Response(status=status.HTTP_404_NOT_FOUND)
k = centers.shape[0] squared_diff = 0.0 for center_idx in range(k): center_mask = nearest_center == center_idx count = center_mask.sum()
X = [[0, 1, 0], [0, -1, -1], [0, .5, .5]] y = [1, 0, 1]
self._add_entrance_exam() self.init_course_access() self._verify_unfulfilled_milestone_response()
}
from __future__ import unicode_literals
self.test_tab = ItemFactory.create( parent_location=self.course.location, category="static_tab", display_name="Static_1" ) self.reload_course()
cache.delete(VerificationDeadline.ALL_DEADLINES_CACHE_KEY)
return (('Could not run the query', ), (str(e), ))
user_name = 'SYSTEM'
self.assert_navigation_state('Test Section 1', 'Test Subsection 1,1', 0, next_enabled=True, prev_enabled=False)
import salt.output import salt.utils.http
validated_data["modes"] = self._new_course_mode_models(validated_data["modes"]) instance.update(validated_data) instance.save() return instance
from __future__ import absolute_import import sys
return ret
pass
if 'hostname' not in vmconfig: vmconfig['hostname'] = name
skip_entrance_exam = models.BooleanField(default=True)
return self.k1.is_stationary() and self.k2.is_stationary()
def setUp(self): super(TestCase, self).setUp() self.enabled_provider = self.configure_google_provider(enabled=True)
from __future__ import absolute_import import os import random import string
warning_msg = _("The problem's state was corrupted by an invalid submission. The submission consisted of:") warning += warning_msg + '<ul>'
CertificateGenerationConfiguration(enabled=True).save()
B, C, IR, IC = ishp4 K, CH, KR, KC = kshp4
source_courselike.static_asset_path = source_courselike.data_dir source_courselike.save() log.debug('course static_asset_path=%s', source_courselike.static_asset_path)
rng = np.random.RandomState(0) n, p = 50, 3
W, U, b = self._params if self.weight_noise: W = self.add_noise(W) U = self.add_noise(U)
proxy = False mongo_db = connect_to_mongodb( db, host, port=port, tz_aware=tz_aware, user=user, password=password, proxy=proxy, **kwargs )
from __future__ import absolute_import
return reclass_top(minion_id, **reclass_opts)
from __future__ import absolute_import try: import iptc IPTC_IMPORTED = True except ImportError: IPTC_IMPORTED = False
for course in store.get_courses(**kwargs): course_id = self._clean_locator_for_mapping(course.id) if course_id not in courses: courses[course_id] = course
'openedx.core.djangoapps.common_views',
for key in kwargs: args["openid." + key] = kwargs[key]
if already_exists: return _valid(comment='Container {0!r} already exists'.format(name)) dports, denvironment = {}, {}
import salt.modules.gem as gem
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from __future__ import absolute_import
from __future__ import absolute_import
addr = "camelot" msg = '%r does not appear to be an IPv4 or IPv6 %s' with self.assertCleanError(ValueError, msg, addr, kind): factory(addr)
X_inf = np.arange(4).reshape(2, 2).astype(np.float) X_inf[0, 0] = np.inf assert_raises(ValueError, check_array, X_inf)
task_type = 'may_enroll_info_csv' task_class = calculate_may_enroll_csv task_input = {'features': features} task_key = "" return submit_task(request, task_type, task_class, course_key, task_input, task_key)
np.testing.assert_almost_equal(np.diag(cm), np.ones(cm.shape[0]))
self.outline.visit()
return self.get_item(item_loc)
result = embargo_api.check_course_access(self.course.id, ip_address='0.0.0.0') self.assertTrue(result)
delayed_grade_func = lambda: self._send_grade_response( callback_url, xqueue_header, self.post_dict['xqueue_body'] )
fstats_orig = os.stat(path_test)
colors_hsv = np.ones((n_colors, 3)) colors_hsv[:, 2] *= .75 colors_hsv[:, 0] = colors_hue
raise NotImplementedError()
from __future__ import absolute_import
return
import salt.loader from salt.log import LOG_LEVELS
y = label_binarize(y, classes=[0, 1, 2]) n_classes = y.shape[1]
import salt.ext.six as six
pass
port_speed = config.get_cloud_config_value( 'port_speed', vm_, __opts__, default=273 ) kwargs['prices'].append({'id': port_speed})
from __future__ import unicode_literals
[adapt_references(child, destination_course_key, export_fs) for child in subtree.get_children()]
if amount < decimal.Decimal('0.01'): return HttpResponseBadRequest("Amount must be greater than 0")
raise NotImplementedError("Specific Modulestores must provide implementations of create_definition")
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
return StaffFactory(course_key=self.course.id)
self.assertTrue(self.open_assessment.has_score)
return False
log.info( "Refund successfully opened for user [%s], course [%s]: %r", unenrolled_user.id, course_key_str, refund_ids, )
certificate["version"] = CERTIFICATE_SCHEMA_VERSION if certificate.get("signatories") is None: certificate["signatories"] = [] certificate["editing"] = False return certificate
super(CapaModule, self).__init__(*args, **kwargs)
if '.' + transcript_format not in self.q(css=transcript_selector).text[0]: return False
content = contentstore('trashcan').find(asset_key, throw_on_not_found=False) self.assertIsNotNone(content)
destroy(vm_['name'])
try: user.email_user( subject, message, theming_helpers.get_value('default_from_email', settings.DEFAULT_FROM_EMAIL) )
block, _ = get_module_by_usage_id( request, unicode(course_key), unicode(usage_key), disable_staff_debug_info=True, course=course )
import logging
LIMITED_RETRY_ERRORS = ( SMTPConnectError, SMTPServerDisconnected, AWSConnectionError, )
field_data_cache = FieldDataCache.cache_for_descriptor_descendents(course_id, student, module_descriptor) student_data = KvsFieldData(DjangoKeyValueStore(field_data_cache))
N_REGIONS = 25
ps = precision_score(y_true, y_pred, pos_label=1, average='micro') assert_array_almost_equal(ps, 0.53, 2)
title_label = _(u"Title")
self.assertEqual(len(courses_list), 2) self.assertTrue(all(isinstance(course, CourseSummary) for course in courses_list))
mongo_course2_id = mongo_course1_id
cmd += ' seek={0}'.format((size/1024**2) - blocks) endres += _run_all(cmd, 'warn', wipe_failmsg)
return ret
response = self.searcher.search(field_dictionary={"course": self.course_id}) self.assertEqual(response["total"], expected_count)
reg.activate() reg.save()
user_name = 'SYSTEM'
from __future__ import absolute_import import re import os
course = CourseFactory.create(course_image=u'things_stuff.jpg', static_asset_path="foo") self.assertEquals( course_image_url(course), '/static/foo/things_stuff.jpg' )
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
for problem in problem_set: stack_data = []
return ret
remote_refs.append( line.split()[-1].replace(b'refs/heads/', b'refs/remotes/origin/') )
settings.apply_settings(self.settings) self.assertEqual([], provider.Registry.enabled())
return
ONLOAD_BEACON_SAMPLE_RATE = 0.0
sample_weight = np.empty(X.shape[0], dtype=np.float64) sample_weight[:] = 1. / X.shape[0]
assert_false(hasattr(SequenceDescriptor, attribute))
p = T.nnet.sigmoid(linear_response) return p
except StopIteration: log.info("Extension requested training halt.") continue_learning = False
rng = np.random.RandomState(0) n_samples = 100 n_features = 10
from salt.ext.six import string_types, text_type from salt.ext.six.moves import range from salt.ext.six.moves.urllib.request import urlopen as _urlopen
query = self.q(css='.ui-loading-indicator') return query.present and 'is-hidden' not in query.attrs('class')[0].split()
for honor_code in ["", "false", "not_boolean"]: params["honor_code"] = honor_code assert_honor_code_error("To enroll, you must follow the honor code.")
click_css(page, component_css, 0)
import sys del pip if 'pip' in sys.modules: del sys.modules['pip']
#html_show_copyright = True
result = api.baskets.post({ 'products': [{'sku': course_mode.sku}], 'checkout': True, 'payment_processor_name': processor })
course_id = CourseKeyField( max_length=255, db_index=True, help_text="Which course is this group associated with?", )
self._disallow_censor_updates()
layer_to_chains = model.sampling_procedure.sample( layer_to_chains, self.theano_rng, num_steps=self.num_gibbs_steps )
current_node = stack.pop()
has_active_or_pending = SoftwareSecurePhotoVerification.user_has_valid_or_pending( user, queryset=verifications )
parent = self.modulestore.get_parent_location( as_published(location), ModuleStoreEnum.RevisionOption.published_only if location.revision is None else ModuleStoreEnum.RevisionOption.draft_preferred )
except Exception as err: logger.debug('Error! Ending server side websocket connection. Reason = {0}'.format(str(err))) break
K_train = np.dot(X_[:180], X_[:180].T) y_train = y_[:180]
user = User.objects.select_related('profile').get(username=username)
self._click_button('save_settings')
element = self.q(css=selector).results[0] return element.size
dnsmasq.__salt__ = {}
EmptyPromise(self._is_loading_in_progress, "Loading is in progress.").fulfill()
store = self._get_modulestore_for_courselike(course_id) with store.bulk_operations(course_id, emit_signals): yield
used_all_attempts = CapaFactory.create(showanswer='past_due', max_attempts="1", attempts="1", due=self.tomorrow_str) self.assertFalse(used_all_attempts.answer_available())
if not include_expired: found_course_modes = found_course_modes.filter( Q(_expiration_datetime__isnull=True) | Q(_expiration_datetime__gte=now) )
package.where=dataset_data_path;
_globals['include'] = Registry.include _globals['extend'] = Registry.make_extend
courses = import_course_from_xml( self.store, self.user.id, TEST_DATA_DIR, ['conditional_and_poll'], static_content_store=content_store, create_if_not_present=True )
profile_path = reverse('learner_profile', kwargs={'username': "no_such_user"}) response = self.client.get(path=profile_path) self.assertEqual(404, response.status_code)
select_option_by_value(self.settings_page.pre_requisite_course_options, self.pre_requisite_course_id) self.settings_page.save_changes()
time.sleep(5)
in_block = True
label_to_fold = np.zeros(len(unique_labels))
self.wait_for_field(field_id) query = self.q(css='.u-field-link-title-{}'.format(field_id)) return query.text[0] if query.present else None
retcode = 1
argv = self.opts['argv']
import inspect import os
source_course_key = CourseKey.from_string(source_course_key_string) destination_course_key = CourseKey.from_string(destination_course_key_string) fields = deserialize_fields(fields) if fields else None
from salt.beacons import glxinfo
from salt.states import slack
__virtualname__ = 'service'
u"\u00A9 {org_name}. All rights reserved except where noted. " u"EdX, Open edX and the edX and Open EdX logos are registered trademarks " u"or trademarks of edX Inc."
win_firewall.__salt__ = {}
self.mock_programs_api()
from __future__ import absolute_import import contextlib
cv = check_cv(self.cv)
response = self.client.post(reverse('admin:course_modes_coursemode_add'), data=data) self.assertRedirects(response, reverse('admin:course_modes_coursemode_changelist'))
log.warning("Send-email task %s for email %s: being retried", current_task_id, email_id)
self.assertFalse(self._search_for_content(self.SEARCH_STRING))
apiserver_url = "http://127.0.0.1:8080"
from pylearn2.blocks import Block, StackedBlocks from pylearn2.models import Model from pylearn2.utils import sharedX from pylearn2.utils.theano_graph import is_pure_elemwise from pylearn2.utils.rng import make_np_rng, make_theano_rng from pylearn2.space import VectorSpace
from __future__ import absolute_import
course = modulestore().get_course(self.toy_course_key) config_course_cohorts(course, is_cohorted=True) self.assertEqual([], cohorts.get_course_cohorts(course))
split_tests = store.get_items(course.id, qualifiers={'category': 'split_test'}) return GroupConfiguration._get_content_experiment_usage_info(store, course, split_tests)
if not err_msg: err_msg = u"Unknown error" error_rows.append(student_fields + [err_msg]) task_progress.failed += 1 continue
from __future__ import absolute_import import os
sale_order_dict = dict((feature, getattr(purchased_course.order, feature)) for feature in sale_order_features)
log = logging.getLogger(__name__)
self.q(css=".settings-tab-button[data-tab='access']").first.click() self.wait_for_element_visibility('#is_prereq', 'Gating settings fields are present.')
keystone.auth_key: 303802934809284k2j34lkj2l3kj43k
__virtualname__ = 'win_iis'
cost = SumOfCosts([SumOfParams(), (0., DummyCost())])
self.assert_redirect_to_register_looks_correct(actions.do_complete(request.backend, social_views._do_login))
name = name.split('.')[0]
if not verify_assets: if other_langs: translations = list(other_langs) if not translations or sub: translations += ['en'] return translations
return meth
self.course_hierarchy = self.get_course_hierarchy() self.blocks = self.build_course(self.course_hierarchy) self.course = self.blocks['course']
import salt.modules.cmdmod
self.course.edxnotes = False self.assertFalse(has_notes_tab(self.user, self.course))
tmp_dir = mkdtemp() try: course_dir = export_course_to_directory(course_key, tmp_dir) compress_directory(course_dir, filename) finally: shutil.rmtree(tmp_dir, ignore_errors=True)
X_, y_ = make_classification(n_samples=200, n_features=100, weights=[0.833, 0.167], random_state=0)
if ret: run(name, 'touch \'{0}\''.format(SEED_MARKER), path=path, python_shell=False)
print("", file=out) print("{} violations total".format(self.total_violations), file=out)
self.check_tab_equality(tab, dict_tab)
return c_cfg.get(attr_name, cfg(default_cfg_key))
url = reverse("certificates:search") + "?user=" + user_filter if course_filter: url += '&course_id=' + course_filter return self.client.get(url)
cmd = 'emerge-webrsync -q' if salt.utils.which('emerge-delta-webrsync'): cmd = 'emerge-delta-webrsync -q' return __salt__['cmd.retcode'](cmd, python_shell=False) == 0
attempt.delete() status = SoftwareSecurePhotoVerification.user_status(user) self.assertEquals(status, ('must_reverify', "No photo ID was provided."))
VISIBLE_CONTENT = [ ['class=&#34;problems-wrapper'], ['Some HTML for group 1'] ]
log.info("background task (%s), state %s: result: %s", task_id, result_state, returned_result) task_output = InstructorTask.create_output_for_success(returned_result)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
context['accomplishment_banner_opening'] = _("{fullname}, you earned a certificate!").format( fullname=user_fullname )
keyname = key fn_ = '{0}/.ssh/{1}'.format(userinfo['home'], key)
X_non_outliers = -axis0_safe_slice(X, ~outliers_mask, n_non_outliers) grad[:n_features] = ( 2. / sigma * safe_sparse_dot(weighted_non_outliers, X_non_outliers))
self._verify_xblock_info_state(xblock_info, 'has_explicit_staff_lock', expected_state, path, should_equal)
self.assertFalse(self.page.experiment_group_configurations[0].is_expanded) self.assertTrue(self.page.experiment_group_configurations[1].is_expanded)
def test_patch_unsupported_media_type(self): response = self.client.patch( self.url, json.dumps({}), content_type=self.unsupported_media_type ) self.assertEqual(response.status_code, 415)
stack = [descriptor] while len(stack) > 0: next_descriptor = stack.pop() stack.extend(get_dynamic_descriptor_children(next_descriptor, user_id, module_creator)) yield next_descriptor
import salt.pillar import salt.utils from salt.defaults import DEFAULT_TARGET_DELIM
from salt.states import iptables
from salt.exceptions import SaltInvocationError import salt.utils
continue
_update_badge_context(context, course, user)
response = self.client.get(index_url, {}, HTTP_ACCEPT='application/json') self.assertEqual(response.status_code, 500)
from . import signals
widget = TrueCheckbox
mb_data = MNIST(which_set='test').X[105:106, :]
self.assertFalse('Invalid' in response.content)
num_students = len(students) self.assertDictContainsSubset({'attempted': num_students, 'succeeded': num_students, 'failed': 0}, result)
self.provider = Registry.get(provider_id) if not self.provider: raise Http404
clf = self.factory(alpha=0.1, n_iter=1000, fit_intercept=False, class_weight={1: 0.001}) clf.fit(X, y)
staff_role.add_users(self.user)
draft_course_structure = self._lookup_course(draft_course_key).structure new_structure = self.version_structure(draft_course_key, draft_course_structure, user_id)
import salt.utils.event import salt.client
for i in range(self.n_layers_ - 1): activations[i + 1] = safe_sparse_dot(activations[i], self.coefs_[i]) activations[i + 1] += self.intercepts_[i]
self.assertFalse( CourseEnrollment.is_enrolled(self.ext_user, self.course.id), 'Did not expect ext_user to be enrolled in course' )
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
EDXNOTES_PUBLIC_API = 'http://localhost:8042/api/v1' EDXNOTES_INTERNAL_API = 'http://localhost:8042/api/v1'
if statii[dev]['cache'] == cuuid: count += 1
self._process_map[pid]['Process'].join(1)
self._restrict_course(self.course.id) embargo_api.message_url_path(self.course.id, 'courseware')
docs_train, docs_test, y_train, y_test = train_test_split( dataset.data, dataset.target, test_size=0.5)
for (key, value) in problemtree.items(): tree.set(key, value)
time_left = max_time - time.time() progress.waitForCompletion(time_left * 1000)
from __future__ import absolute_import
return self.get_selector('div.certificate-invalidation-container table tr:last-child td')
from salt.modules import gentoo_service
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath
K_train = np.dot(X_[:180], X_[:180].T) y_train = y_[:180]
CourseModeFactory.create(mode_slug='honor', course_id=self.course.id) CourseModeFactory.create(mode_slug='verified', course_id=self.course.id, min_price=1)
organizations = microsite_object.get_organizations()
self.assertFalse(glusterfs.delete_volume('Newvolume1', False)) self.assertFalse(mock_run.called) self.assertFalse(mock_stop_volume.called)
parents = block_structure.get_parents(block_key)
data = np.copy(X.data[start: end]) nz = n_samples - data.size median[f_ind] = _get_median(data, nz)
try: validate_email(identifier) except ValidationError: return False return True
return self.provider.provider_id + '_unlink_form'
else: ret = _load_result(existing, ret)
return None
raise Exception
world.wait_for(lambda _: world.css_text('#data-student-profiles-table') not in [u'', u'Loading'])
from __future__ import absolute_import
import logging
def start(self): pass
textvalue = "pi + 1" if correct else str(random.randint(-2, 2)) self.problem_page.fill_answer(textvalue)
_write_test_file(file_name, "This is an arbitrary file for testing uploads")
task_folder = task_service.GetFolder(location)
return {'username': username, 'team_id': team}
return security_group_rule_id
from __future__ import absolute_import
__salt__['macpackage.unmount'](mount_point)
import_static_content( data_path, self.static_content_store, dest_id, subpath='static', verbose=self.verbose )
req_status = api.get_credit_requirement_status(self.course_key, "bob", namespace="grade", name="grade") self.assertEqual(req_status, [])
resp = self.client.get('/') self.assertEquals(resp['X-Frame-Options'], 'DENY')
path %= { 'minion_id': minion_id, 'role': role }
return reverse( 'verify_student_incourse_reverify', kwargs={ "course_id": unicode(course_key), "usage_id": checkpoint_location } )
self.q(css=self._bounded_selector(".annotator-save")).first.click() self.wait_for_notes_invisibility("Note is saved.") self.wait_for_ajax() return self
return usage_id
__virtualname__ = 'nova'
y_pred = clf.predict(xx)
for msg in messages.get_messages(request): if msg.extra_tags.split()[0] == "social-auth":
actual_payment_data = checkout_with_ecommerce_service( user, 'dummy-course-key', course_mode, 'test-processor' )
return regenerate_certificates( self.create_task_request(self.instructor), self.course.id, [CertificateStatuses.downloadable, CertificateStatuses.generating] )
import salt.utils.compat import salt.utils.odict as odict import salt.utils.boto
return {'idp': self.idp_slug}
return int((datetime_value - datetime(1970, 1, 1, tzinfo=UTC)).total_seconds())
installed_date=installed_packages_list[this_package].timestamp
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, NO_MOCK, NO_MOCK_REASON, patch ) from salttesting.helpers import ensure_in_syspath
CELERY_RESULT_BACKEND = 'djcelery.backends.cache:CacheBackend'
if ( tag == 'msup' and len(k) == 2 and gettag(k[1]) == 'mrow' and
clf = TreeClassifier(class_weight='the larch', random_state=0) assert_raises(ValueError, clf.fit, X, y) assert_raises(ValueError, clf.fit, X, _y)
mock_response = mock.Mock() mock_citc.return_value = mock_response course_id = u'course-v1:OrgFoo+CN199+CR-FALL01' tasks.update_ccxcon.delay(course_id) mock_citc.assert_called_once_with(CourseKey.from_string(course_id))
assert_roundtrip("12345678901234561234567890123456123456789012345601") assert_roundtrip("")
VENDOR_EXT_PATTERN = re.compile('^x-')
for parent_ref in parents: parent_block = modulestore().get_item(block_map[parent_ref].location) parent_block.children.append(block_key) block_map[parent_ref] = update_block(parent_block)
node_dict = show_instance(node_data.name, 'action')
with self.assertRaises(auth_models.User.DoesNotExist): self.get_user_by_email(strategy, email)
input_dict = {'1_2_1': '0', '1_2_2': '42'} correct_map = problem.grade_answers(input_dict)
self.assertEqual(test, expected)
self.client.login(username=self.user.username, password="password")
X_bernoulli = [[1, 100, 0], [0, 1, 0], [0, 100, 1]] X_multinomial = [[0, 1], [1, 3], [4, 0]]
log.exception('Unable to gather submission metadata, it will not be included in the event.')
self.wait_for_field(field_id) self.wait_for_ajax() return self.q(css='.u-field-{} .u-field-value .u-field-value-readonly'.format(field_id)).text[0]
'SHOW_BUMPER_PERIODICITY': 7 * 24 * 3600,
self.answer_ids = [x.get('id') for x in self.inputfields] if self.max_inputfields == 1: self.answer_id = self.answer_ids[0]
return parse(out)
problem = self.build_problem(script=script, cfn="check_func")
updates.append('{0}: {1}'.format( self.install_results.GetUpdateResult(i).ResultCode, self.install_collection.Item(i).Title))
import salt.utils from salt.exceptions import CommandExecutionError, MinionError import salt.ext.six as six
with self.assertRaisesRegexp(UserPartitionError, "Cannot assign user to an empty user partition"): RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, empty_partition)
if iface_type not in ('slave', 'source'): return __salt__['cmd.run'](['ifup', iface]) return None
resp = self.client.get(billing_url) self.assertEqual(resp.status_code, 404)
self.course.save() self.store.update_item(self.course, self.user.id)
return settings.FEATURES.get('ENABLE_PREREQUISITE_COURSES', False) \ and settings.FEATURES.get('MILESTONES_APP', False)
ret['comment'] = 'Event module not available. Beacon add failed.'
from unit.modules.boto_lambda_test import BotoLambdaTestCaseMixin, TempZipFile
self._assert_output(output)
self.install_results = None
if ret['changes']: sys.modules[ __salt__['test.ping'].__module__ ].__context__.pop('pkg._avail', None)
import salt.utils.cloud import salt.config as config from salt.exceptions import ( SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
s_1 = .5 * a.T.dot(C).dot(a) - .5 * R.T.ravel().dot(C.ravel())
y_true, _, probas_pred = make_prediction(binary=True) expected_auc = _auc(y_true, probas_pred)
cls._validate_cookie_params(session_id, user_id) safe_cookie_data = SafeCookieData( cls.CURRENT_VERSION, session_id, key_salt=get_random_string(), signature=None, ) safe_cookie_data.sign(user_id) return safe_cookie_data
factory_dict = PROBLEM_DICT['multiple choice'] problem_xml = factory_dict['factory'].build_xml(**factory_dict['kwargs'])
pred = Y_proba > .5 assert_array_equal(pred, Y_pred)
self.assertIn(str(verified_course_audit_track), response.content) for course in ( non_verified_course, verified_course_verified_track, verified_course_deadline_passed, unenrolled_course ): self.assertNotIn(str(course), response.content)
if notifier.check_events(1): notifier.read_events() notifier.process_events() queue = __context__['inotify.queue'] while queue: event = queue.popleft()
self.client.logout() response = self.client.get(self.path, content_type=JSON_CONTENT_TYPE) self.assertEqual(response.status_code, 401)
from __future__ import print_function from __future__ import absolute_import import copy import logging
raise NotImplementedError("Specific Modulestores must provide implementations of create_usage")
if nic and isinstance(nic, (six.string_types, dict)): nicp = get_network_profile(nic) else: nicp = {} if DEFAULT_NIC not in nicp: nicp[DEFAULT_NIC] = {}
TEST_DATA_MONGO_MODULESTORE = functools.partial(mixed_store_config, mkdtemp_clean(), {})
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.assertTrue(filecmp.cmp(path_test, path_out))
providers_string = _("{first_providers}, and {last_provider}").format( first_providers=u", ".join(providers[:-1]), last_provider=providers[-1] )
with Timer() as iteration_over_courses_time_2: courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(len(courses_list), USER_COURSES_COUNT)
status = VerificationStatus.get_user_status_at_checkpoint( self.user, self.course_key, self.reverification_location ) self.assertEqual(status, "submitted")
if salt.utils.is_windows(): return (False, 'The mount module cannot be loaded: not a POSIX-like system.') return True
drac.__grains__ = {} drac.__salt__ = {} drac.__context__ = {}
violations_count_str = "Number of pylint violations: " + str(num_violations) print violations_count_str
test3 = new value 3B
abc = RestrictedCourse.objects.get(course_key=new_course_id) abc.delete() with self.assertNumQueries(1): RestrictedCourse.is_restricted_course(new_course_id)
with super(UserProfileUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
self.store.publish(locations['child_sibling'], self.user_id)
__remove_null_logging_handler()
provider1 = self.configure_dummy_provider( enabled=True, icon_class='', icon_image=SimpleUploadedFile('icon.svg', '<svg><rect width="50" height="100"/></svg>'), )
microsite.set_by_domain(domain) return func(request, *args, **kwargs)
try: user_id = int(identifier) except ValueError: return User.objects.get(email=identifier) return User.objects.get(id=user_id)
return self.q(css='.dropdown-menu li a').text
return [ self._load_item( course_key, item, data_cache, using_descriptor_system=using_descriptor_system, apply_cached_metadata=self._should_apply_cached_metadata(item, depth), for_parent=for_parent, ) for item in items ]
self.assertIn(self.SUCCESSFUL_RESPONSE, response.content) self.assertEqual(response.status_code, 200)
if self.check_pidfile(): os.unlink(self.config['pidfile'])
'ENABLE_COMBINED_LOGIN_REGISTRATION': False,
ret = self.run_function('shadow.info', [NO_USER]) self.assertEqual(ret['name'], '')
self.assert_logged_in_cookie_redirect(actions.do_complete(
details = pipeline_kwargs.get('details')
request.text
for chunk in iter(lambda: ifile.read(chunk_size), b''): hash_obj.update(chunk) return hash_obj.hexdigest()
if key.field_name not in aside_fields: self._load_definition()
_describe = __salt__['boto_iot.describe_topic_rule'](ruleName=ruleName, region=region, key=key, keyid=keyid, profile=profile)['rule']
import integration
if line.startswith('pool') and line.endswith('write'): continue if line.endswith('bandwidth'): continue
topics = self.discussion_topics return [d["id"] for d in topics.values()]
self.assertTrue(allowance_section.is_allowance_record_visible)
X_new = assert_warns( DeprecationWarning, est.transform, X, threshold="mean") assert_less(0 < X_new.shape[1], X.shape[1])
from __future__ import absolute_import
try: original_published = super(DraftModuleStore, self).get_item(item_location) except ItemNotFoundError: original_published = None
world.browser.driver.get(url) assert_equal(world.css_text('body'), expected_text)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
return self._ip == 0
locked=getattr(content, 'locked', False)) as fp:
self.assertFalse(glusterfs.create_volume('newvolume', 'host1:/brick', start=True))
from sphinx.ext.autodoc import FunctionDocumenter as FunctionDocumenter
import salt.ext.six as six if six.PY3: import ipaddress else: import salt.ext.ipaddress as ipaddress
import salt.exceptions import salt.loader import salt.minion import salt.utils.args import salt.utils.event from salt.client import mixins from salt.output import display_output from salt.utils.lazy import verify_fun
import salt.utils.gitfs from salt.exceptions import FileserverConfigError
Ensure mysecgroup exists: boto_secgroup.present: - name: mysecgroup - description: My security group - profile: myprofile
from salt.modules import http import salt.utils.http
return 'unknown'
if self.metadata_inheritance_cache_subsystem is not None: self.metadata_inheritance_cache_subsystem.set(unicode(course_id), tree)
wait_for( func=lambda _: EC.presence_of_element_located((By.CSS_SELECTOR, css_selector,)), timeout=timeout, timeout_msg="Timed out waiting for {} to be present.".format(css_selector) )
inner_varname = Word(alphas + "_", alphanums + "_") varname = Group(inner_varname)("variable") varname.setParseAction(self.variable_parse_action)
from salt.modules import qemu_img import os
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
course_orphans = self.store.get_orphans(course_locator) self.assertEqual(len(course_orphans), 0)
X = check_array(X, accept_sparse=['csr', 'csc'])
from __future__ import print_function
if not reparse_data: return False
from __future__ import absolute_import import os import time import logging
return CourseTeam.objects.all()
profiles_config_path = _absolute_path(profiles_config_path, config_dir)
self.instructor = AdminFactory.create() self.client.login(username=self.instructor.username, password="test")
grub_legacy.__salt__ = {}
self.X_memmap_info = None self.y_memmap_info = None
return self.q(css='.wrapper-alert-error.is-shown').is_present()
contact_info = self._latest_history()['contact_info'] for key, value in kwargs.iteritems(): self.assertEqual(contact_info[key], value)
try: WINAPI = True import win32serviceutil except ImportError: WINAPI = False
k3 = 0.5**2 * RationalQuadratic(length_scale=1.0, alpha=1.0) k4 = 0.1**2 * RBF(length_scale=0.1) \ + WhiteKernel(noise_level=0.1**2,
if 'name' in todelete: raise SaltInvocationError('The repo name cannot be deleted')
leaf_count = node_counts[node_counts != 0] assert_greater(np.min(leaf_count), 4, "Failed with {0}".format(name))
train.apply_preprocessor(pipeline, can_fit=True) del train
y_true, y_pred, _ = make_prediction(binary=False)
tmp = np.zeros((n_samples, n_samples))
zfs.__salt__ = {}
continue
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, mock_open, NO_MOCK, NO_MOCK_REASON )
S.flat[::(n_samples + 1)] = preference
from __future__ import absolute_import import os import time
self.assert_logged_in_cookie_redirect(actions.do_complete(
clf = self.factory(loss='squared_loss', learning_rate='constant', eta0=eta, alpha=alpha, fit_intercept=True, n_iter=1, average=True, shuffle=False)
ret['Comment'] = "Failed with failure code: {0}".format(exc[5]) ret['Success'] = False
cls.req_server_channel = salt.transport.server.ReqServerChannel.factory(cls.master_opts) cls.req_server_channel.pre_fork(cls.process_manager)
salt '*' vsphere.vsan_enable my.esxi.host root bad-password
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
return self.q(css='.warning-heading-text').text[0]
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath
self.assertTrue(hasattr(course_overview, 'image_set'))
continue
grandkids = [] for descendant in descendants: grandkids.extend(descendant.children)
date = date.strftime('%Y-%m-%d %H:%M')
mathjax_container = self.q(css=".static_tab_wrapper .MathJax_SVG") EmptyPromise( lambda: mathjax_container.present and mathjax_container.visible, "MathJax is not visible" ).fulfill()
invoice = shoppingcart.models.Invoice.objects.get(id=sale_invoice_1.id) invoice.is_valid = True invoice.save()
self.update_structure(usage_locator.course_key, new_structure)
pass
braces = '}' * num_braces rval = basic_setup + \ setup_nv_hid_acts + \ setup_nv_filters + \ setup_nv_targets + \ do_convolution + \ braces rval = rval % locals() return rval
self.assertFalse(linode._validate_name('_foo'))
import salt.utils
clf = LinearDiscriminantAnalysis(priors=[0.5, 0.5]) clf.fit(X, y)
from . import signals
self.get_selector('#certificate-invalidation-user').fill(student)
new_mods = [m for m in sys.modules if m not in self.mods] for m in new_mods: del sys.modules[m]
context['client'] = dict(segment_context) context['agent'] = segment_context.get('userAgent', '')
from salt.states import apache_site
from __future__ import absolute_import import os import sys import random import subprocess import time
pass
return super(AdaBoostClassifier, self).fit(X, y, sample_weight)
self.assertNotIn("wsgiref.util", sys.modules) wsgiref_util = LazyModule("wsgiref.util") self.assertEqual(wsgiref_util.guess_scheme({}), "http")
urlpath = None article = None
total_student_count[curr_problem] = total_student_count.get(curr_problem, 0) + row['count_grade']
def _run_parallel_map_providers_query(*args, **kw): return communicator(run_parallel_map_providers_query)(*args[0], **kw)
for sub_grid in self.param_grid: if not sub_grid: if ind == 0: return {} else: ind -= 1 continue
self.q(css="input.timed_exam").first.click()
raise NotImplementedError( str(type(self)) + " does not implement " + "continue_learning.")
try: username, password = find_credentials(host) except SaltSystemExit as err: log.critical('Error: {0}'.format(err)) return False
return _write_js(output_root, _list_descriptors())
pass
some_range = range(10) joined_range = list(chain(*[some_range[slice] for slice in gen_even_slices(10, 3)])) assert_array_equal(some_range, joined_range)
self._create_course_unit_with_handout('asset.html', save_settings=False) self.video.clear_handout() self.save_unit_settings() self.assertFalse(self.video.is_handout_button_visible)
return 'SubtaskStatus<%r>' % (self.to_dict(),)
ave = elemwise_kl(Y, Y_hat)
return X
disks = _get_host_ssds(host_ref) + _get_host_non_ssds(host_ref)
view_html = None
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
X = np.ascontiguousarray(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
rexp = re.compile('(?m)^Conf '
config_course_cohorts(course, is_cohorted=False, discussion_topics=["General", "Feedback"])
pass
response_providers = get_credit_provider_display_names(self.course_key) self.assertListEqual(self.PROVIDERS_LIST, response_providers)
student = User.objects.prefetch_related("groups").get(id=student.id)
FEATURES['MILESTONES_APP'] = True
conf = { 'reposdir': ['/etc/yum/repos.d', '/etc/yum.repos.d'], }
train_sizes_abs = _translate_train_sizes(train_sizes, n_max_training_samples) n_unique_ticks = train_sizes_abs.shape[0] if verbose > 0: print("[learning_curve] Training set sizes: " + str(train_sizes_abs))
_args.append(arg)
clf = LogisticRegressionCV(cv=precomputed_folds) clf.fit(train, target)
for key, val in params.iteritems(): self.assertEqual(self.server.config.get(key), val)
import salt.utils from salt.exceptions import ( CommandExecutionError, CommandNotFoundError, SaltInvocationError )
def __init__(self, email, user, cenr, cea): self.email = email self.user = user self.cenr = cenr self.cea = cea
ENABLED = True
N_per_side = 5 Npts = N_per_side ** 2 n_neighbors = Npts - 1
for i, parents_index in enumerate(self.parents_map): if i == 0:
if not DETAILS['url'].endswith('/'): DETAILS['url'] += '/'
assert_raises(ValueError, MLPClassifier( algorithm='sgd').partial_fit, X, y, classes=[2])
eigvals, eigvec = eigsh(XH_X, k=k, tol=tol ** 2, maxiter=maxiter, ncv=ncv, which=which, v0=v0)
tab_id = self._active_sequence_tab.attrs('id')[0] return int(tab_id.split('_')[1])
raise CoursewareAccessException(access_response)
if pointval: choice_element.set("point_value", str(pointval))
node = _guess_node_id(node) apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
self.assertIn('Traceback', result['success'])
'master_sign_pubkey': bool,
self.refund_window_microseconds = int(refund_window.total_seconds() * 1000000)
response = self.client.get(self.notes_url, {"text": "test"}) self.assertEqual(response.status_code, 404)
from __future__ import absolute_import
keystone.auth_key: 203802934809284k2j34lkj2l3kj43k
metrics = {'ais': estimate_likelihood} datasets = {'mnist': MNIST}
log = logging.getLogger(__name__)
{0: 'animal', 1: 'human', 2: 'airplane', 3: 'truck', 4: 'car', 5: 'blank'},
node = etree.Element('unknown') descriptor.add_xml_to_node(node)
import salt.utils.http
'ENABLE_TEAMS': True,
for prefix in sorted(self._prefix_registry, reverse=True): if key.startswith(prefix): return self._prefix_registry[prefix]
params = [(param, request.GET[param]) for param in POST_AUTH_PARAMS if param in request.GET]
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
reg.fit(X, y, sample_weights_OK) reg.fit(X, y, sample_weights_OK_1) reg.fit(X, y, sample_weights_OK_2)
import salt.utils
if existing['code'] == 200:
self.q(css='a.nav-item').filter(text='All Topics')[0].click()
try:
y = np.ravel(y)
opts_pkg['id'] = self.id
from salt.states import status
dt_obj = salt.utils.date_cast(newtime)
label = "P{0}.{1}.{2}".format(c_subsection, c_unit, c_problem)
return self.q(css='{} input[name=entrance-exam-student-select-grade]'.format(self.EE_CONTAINER))
final_attrs['value'] = force_text(value)
other = other.__class__('%s/%s' % (other.network_address, other.prefixlen))
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
if not _check_equality(treedic['1 cleaned_mm_list'], treedic['2 cleaned_mm_list']): return False
self.total_violations += 1 self.totals_by_rule[violation.rule.rule_id] += 1
send_mail_to_student(student_email, email_params, language=language)
assert_equal(5, KFold(5).get_n_splits(X2))
_win(kernel32.SetHandleInformation, wintypes.BOOL,
return course_metadata_utils.course_start_date_is_default( self.start, self.advertised_start )
self.setup_mongo_course() result_fragment = self.module.render(STUDENT_VIEW, context=self.default_context) self.assertIn('View Unit in Studio', result_fragment.content)
import warnings import numpy as np from scipy import linalg
try: atomic_replace(temp_filename,local_dst) except Exception as e: raise IOError("[ac] %s %s --> %s" % (str(e),temp_filename,local_dst))
print(msg) self.exit(1)
course_image_url = TextField() social_sharing_url = TextField(null=True) end_of_course_survey_url = TextField(null=True)
request_info = xmodule_instance_args.get('request_info', {}) if xmodule_instance_args is not None else {} task_info = {"student": student.username, "task_id": _get_task_id_from_xmodule_args(xmodule_instance_args)}
y = multioutput_estimator_convert_y_2d(name, y)
self.assertEquals(3, self.response.content.count('grade_C'))
response = client.get(path='/shib-login/', data={}, follow=False, **identity)
X -= self.x_mean_ X /= self.x_std_ Ypred = np.dot(X, self.coef_) return Ypred + self.y_mean_
'SQUELCH_PII_IN_LOGS': True,
about_descriptor = XBlock.load_class('about') overview_template = about_descriptor.get_template('overview.yaml') self.expected_data['overview'] = overview_template.get('data')
transform = AdditiveChi2Sampler(sample_steps=4) assert_raises(ValueError, transform.fit, X)
output = self.old_ugettext(*args, **kwargs) return "XYZ " + output
num_braces = 0
qbuffer = []
return self.q(css='.form-actions .action-edit-team').present
other = UserFactory.create() self.client.login(username=other.username, password='test') self.enroll() self.logout()
X_csc_scaled = scale(X_csr.tocsc(), with_mean=False) assert_array_almost_equal(X_scaled, X_csc_scaled.toarray())
self._test_visible_to_students(False, 'public_unreleased', self.future, publish=True)
self.minions = []
CourseOverview.objects.filter(id=course_key).delete()
hwaddr = salt.utils.alias_function(hw_addr, 'hwaddr')
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON
self.enrollment = CourseEnrollmentFactory( user=self.user,
if self._is_grade_request():
import salt.utils from salt.exceptions import CommandExecutionError
filename = subs_filename(subs_id, lang) Transcript.delete_asset(item.location, filename)
dict(safe_zip(range(10), range(10))),
if subtitles: self.assets.append('subs_3_yD_cEKoCk.srt.sjson') self.navigate_to_course_unit()
assert_not_equal(X_fit_transformed.size, 0)
super(JavaScriptLinter, self).__init__() self._skip_javascript_dirs = SKIP_DIRS + ('i18n', 'static/coffee') self._skip_coffeescript_dirs = SKIP_DIRS self.underscore_linter = UnderscoreTemplateLinter()
from salt.modules import groupadd
return datetime.datetime.now(pytz.UTC) + datetime.timedelta( days=getattr(settings, "CREDIT_ELIGIBILITY_EXPIRATION_DAYS", 365) )
from salt.utils.openstack import pyrax as suop
from salt.modules import scsi import os import salt.utils import copy
import logging import re import os import bz2
b = kubectl_out.get("data", {}) self.assertTrue(isinstance(kubectl_out, dict)) self.assertEqual(expected_data, b)
import logging import time import json from salt.exceptions import (CommandExecutionError, MinionError)
log = logging.getLogger(__name__)
n_init_range = np.array([1, 5, 10, 15, 20])
try: import boto import boto.elasticache import boto.utils logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
bulk_ops_record.dirty = False
X = np.arange(10000)[:, np.newaxis] y = np.arange(10000)
return
'tcp_master_publish_pull': int,
link_name = '/' + link_name
resp = self.assert_enrollment_status(expected_status=status.HTTP_400_BAD_REQUEST)
if shift is None: shift = (2 * generator.rand(n_features) - 1) * class_sep X += shift
cid = cid if cid > 0 else self.ID return reverse_course_url( 'group_configurations_detail_handler', self.course.id, kwargs={'group_configuration_id': cid}, )
pass
_ = lambda text: text
types = [(MockDataFrame, MockDataFrame)] try: from pandas import Series, DataFrame types.append((DataFrame, Series)) except ImportError: pass
container = unit.xblocks[1].go_to_container() return container
self._textbooks.append({"chapters": chapters, "tab_title": book_title})
** blas_info)
show_email_settings_for = frozenset( enrollment.course_id for enrollment in course_enrollments if ( BulkEmailFlag.feature_enabled(enrollment.course_id) ) )
self._assert_course_verification_status(VERIFY_STATUS_APPROVED)
kwargs_param = param continue
est.fit(data, y) threshold = 0.5 * np.mean(est.feature_importances_) mask = est.feature_importances_ > threshold assert_array_equal(X_transform, data[:, mask])
page.wait_for_ajax()
return JsonResponse(data)
with self: if self.cmd: passed = self.run_test() if not passed: self.failed_suites.append(self)
if not os.path.isfile(config): try: with salt.utils.fopen(config, 'w+') as _fh:
def handle(self, *args, **options): return json.dumps(eventtracker.get_tracker().resolve_context())
import logging import subprocess
files = files_string.split(",") upload_css = 'a.upload-button' world.css_click(upload_css)
'course_modes',
return render_to_response('discussion/index.html', context)
EmptyPromise( lambda: self.q(css=".action-upload-signature").first.present, 'Signature image upload button available' ).fulfill()
self.assertOLXIsDraftAndPublished(block_list_to_revert) self.revert_to_published(block_list_to_revert) self.assertOLXIsPublishedOnly(block_list_to_revert)
from salt.states import pagerduty
MICROSITE_BACKEND = ENV_TOKENS.get("MICROSITE_BACKEND", MICROSITE_BACKEND) MICROSITE_TEMPLATE_BACKEND = ENV_TOKENS.get("MICROSITE_TEMPLATE_BACKEND", MICROSITE_TEMPLATE_BACKEND) MICROSITE_DATABASE_TEMPLATE_CACHE_TTL = ENV_TOKENS.get( "MICROSITE_DATABASE_TEMPLATE_CACHE_TTL", MICROSITE_DATABASE_TEMPLATE_CACHE_TTL )
module = CapaFactory.create(max_attempts="1", attempts="2") self.assertTrue(module.closed())
X = iris.data y = iris.target
to_js['base_image'] = Attribute('img').parse_from_xml(self.xml)
for kernel in ('linear', 'poly', 'rbf'): clf = svm.SVC(kernel=kernel, gamma=2) clf.fit(X, Y)
y = NORBSmall.load(which_set, 'cat') y_extra = NORBSmall.load(which_set, 'info')
post = __salt__['git.config_set']( cwd=repo, key=name, value=value, multivar=multivar, user=user, **{'global': global_} )
if parts[0].endswith('sh:'): out = ' '.join(parts[1:]) ret['comment'] = out
import salt.ext.six as six
assert self.local.get_params() == [self.filters]
self.measures.append((name, size))
obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')
PASSWORD_HASHERS = ( 'django.contrib.auth.hashers.SHA1PasswordHasher', 'django.contrib.auth.hashers.MD5PasswordHasher', )
description = cls._line_item_description(course_id=course_id)
XBlockDisableConfig.objects.create( disabled_create_blocks=xblocks, enabled=True ) self.assertEqual( XBlockDisableConfig.disabled_create_block_types(), expected_result )
indices = np.arange(10, 13)
label_to_row_indices = _make_label_to_row_indices(dataset.y)
check_has_course_method( XMLModuleStore(DATA_DIR, source_dirs=['toy', 'simple']), SlashSeparatedCourseKey('edX', 'toy', '2012_Fall'), locator_key_fields=SlashSeparatedCourseKey.KEY_FIELDS )
assert_almost_equal(dists[2], 1)
try: import elasticsearch logging.getLogger('elasticsearch').setLevel(logging.CRITICAL) HAS_ELASTICSEARCH = True except ImportError: HAS_ELASTICSEARCH = False
TestScenario( (self.demo_course.id, '='), "course_MVSFQL2EMVWW6WBOGEXUMYLMNRPTEMBRGQ======" ), TestScenario( (self.html_course.id, '~'), "course_MNXXK4TTMUWXMMJ2KVXGS5TFOJZWS5DZLAVUGUZNGIYDGK2ZGIYDSNQ~" ),
ROLE = LibraryUserRole.ROLE def __init__(self, *args, **kwargs): super(OrgLibraryUserRole, self).__init__(self.ROLE, *args, **kwargs)
from __future__ import absolute_import import json import logging import re import sys
self.mean_ = np.mean(X, axis=0) X -= self.mean_
#'wiki.plugins.notifications', 'course_wiki.plugins.markdownedx',
needed_holds = [] current_timestamp = gmtime() for hold in snapshots.keys(): if schedule[hold] == 0: continue
for axes_row in all_axes: for axes in axes_row: axes.get_xaxis().set_visible(False) axes.get_yaxis().set_visible(False)
all_parents = [] published_parents = 0 for parent in parents: if parent['_id']['revision'] is None: published_parents += 1 all_parents.append(parent)
self.__manager = None
return CourseMode.objects.get_or_create( course_id=self.course_key, mode_display_name=mode_name, mode_slug=mode_slug, min_price=min_price, suggested_prices=suggested_prices, currency=currency, _expiration_datetime=expiration_datetime, )
n_jobs, n_estimators, starts = _partition_estimators(n_more_estimators, self.n_jobs) total_n_estimators = sum(n_estimators)
salt.utils.gitfs.GitPillar(new_opts)
try: return CreditProvider.objects.get(active=True, provider_id=provider_id) except cls.DoesNotExist: return None
try: import zmq HAS_ZMQ = True except ImportError: HAS_ZMQ = False
from salt.states import mac_package as macpackage
exc_info_on_loglevel=logging.DEBUG
course.mobile_available = False with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred): self.store.update_item(course, ModuleStoreEnum.UserID.test)
steps = [self.activations[:]]
new_mean_squared_grad = ( self.decay * mean_square_grad + (1 - self.decay) * T.sqr(grads[param]) )
initial_element = etree.SubElement(codeparam_element, "initial_display") initial_element.text = str(initial_display)
self.estimators_ = [] self.estimators_samples_ = [] self.estimators_features_ = []
from salt.ext.six import string_types
if "enrollment_action" in request.POST: del request.POST["enrollment_action"] if "course_id" in request.POST: del request.POST["course_id"]
key = safe_key('test', prefix, '')
__zypper__.xml.call('ar', url, repo)
call_command('delete_orphans', unicode(published_branch), '--commit')
base_url = reverse('create_mode', args=[unicode(self.course.id)]) self.client.get(base_url)
delete_indices = np.array([])
self.store.convert_to_draft(self.vertical_y1a, self.user_id)
from salttesting import skipIf, TestCase from salttesting.mock import ( MagicMock, NO_MOCK, NO_MOCK_REASON, patch )
X, y = make_hastie_10_2(n_samples=20, random_state=1) X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=43)
return stdout
subject = u'Confirmation and Invoice for {course_name}'.format(course_name=course.display_name) message = render_to_string('emails/registration_codes_sale_email.txt', context)
import salt.utils.jid import salt.returners
if wait_to_finish: salt.utils.cloud.run_func_until_ret_arg(fun=describe_snapshots, kwargs={'snapshot_id': snapshot_id}, fun_call=call, argument_being_watched='status', required_argument_response='completed')
X = X_2d[:100, :] n = X.shape[0]
return self._validation_paragraph('warning').present
X = rng.rand(n_samples, n_features)
SupportedFieldType(None, BlockCountsTransformer, BlockCountsTransformer.BLOCK_COUNTS),
fit_transform = transform
return salt.utils.which('zfs')
self.assertIn("Password Reset Email Sent", self.reset_password_page.get_success_message())
self.assertFalse(linode._validate_name('-foo'))
only_courses = [self.courses[0].id, self.courses[1].id] self._run_command(self.TEST_ORG, only_courses=only_courses)
return True
import salt.ext.six as six
css = '.group-allocation' return self.find_css(css).first.text[0]
return 'xenstore' in __salt__['cmd.run'](__grains__['ps'])
with salt.utils.fopen('/etc/rc', 'r') as handle: lines = handle.readlines()
def __setstate__(self, state): self._is_child = True self.__init__(state['opts'], log_queue=state['log_queue'])
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) course_key = course.id
clf = BernoulliNB(alpha=1.0) clf.fit(X, Y)
pass
self.certificates_section.remove_first_certificate_invalidation()
error_message=_('Expected a <choice> or <compoundhint> tag; got {given_tag} instead').format( given_tag=choice.tag )
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
"redirect_url": redirect_url,
pass
from __future__ import absolute_import
key_list = [] key_list = _traverse_registry_tree(hkey, key_path, key_list, access_mask) key_list.append(r'{0}'.format(key_path))
complex_value_list = [] v_value = value while isinstance(v_value, dict): v_key = v_value.keys()[0] v_value = v_value.values()[0] complex_value_list.append(v_key)
from salt.modules import swift
return theano._asarray(arg, dtype=dtype)
self.progress_page.visit() self.tab_nav.go_to_tab('Home')
IcrvStatusEmailsConfiguration.objects.create(enabled=True) self.create_reverification_xblock()
self.assertIsNone(self.do_email_change(self.user, user1_new_email)) self.assertIsNone(self.do_email_change(user2, user2_new_email))
for i in range(max_iter): centers_old = centers.copy() labels, inertia = \ _labels_inertia(X, x_squared_norms, centers, precompute_distances=precompute_distances, distances=distances)
return self.test_passed('.local-resource-test')
'EDITABLE_SHORT_DESCRIPTION': True,
from __future__ import absolute_import import copy import logging import pprint import time import yaml
return _("regenerated") if self.is_regeneration else _("generated")
assert all([layer in layer_to_updated for layer in layer_to_state]) assert all([layer in layer_to_state for layer in layer_to_updated]) assert all([(layer_to_state[layer] is layer_to_updated[layer]) == layer_to_clamp[layer] for layer in layer_to_state])
if status == "satisfied" and not eligible_before_update: is_eligible, eligibility_record_created = CreditEligibility.update_eligibility(reqs, username, course_key) if eligibility_record_created and is_eligible: try: send_credit_notifications(username, course_key)
self.X1_bool = self.X1.round(0) self.X2_bool = self.X2.round(0)
def astype(array, dtype, copy=True): if not copy and array.dtype == dtype: return array return array.astype(dtype)
mode = 'create' mtdata = __salt__['postgres.create_metadata']( name, schema=schema, ext_version=ext_version, **db_args)
continue
import integration
self._test_view('about', 'text/html')
raise SkipTest('Sandbox RNNs are disabled.')
warnings.simplefilter('always') sp.csr_matrix([1.0, 2.0, 3.0]).max(axis=0)
expressions = self._find_unescaped_expressions(underscore_template) for expression in expressions: if not self._is_safe_unescaped_expression(expression): results.violations.append(ExpressionRuleViolation( Rules.underscore_not_escaped, expression ))
self.course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
self.cart, __ = self._create_cart()
for index in [i for i, x in enumerate(found) if x]:
return {ModuleStoreEnum.Type.split: self.db_connection.heartbeat()}
context['document_banner'] = _("{platform_name} acknowledges the following student accomplishment").format( platform_name=platform_name )
problem = new_loncapa_problem(xml_str)
long_name = u"Финансовое программирование и политика, часть 1: макроэкономические счета и анализ"
raise SaltCloudSystemExit( 'The following VM\'s were not found: {0}'.format( ', '.join(names) ) )
assert_equal(cv_repr, repr(cv))
result = requests.get( "http://169.254.169.254/latest/dynamic/instance-identity/document", proxies={'http': ''}, timeout=AWS_METADATA_TIMEOUT, )
sample_weight = np.ones(n_samples, dtype=np.float64, order='C')
upper_name = name.upper()
return
self._auto_auth(self.USERNAME, self.EMAIL, False)
random_state = check_random_state(0) y1 = random_state.randint(0, 2, size=(20, )) y2 = random_state.randint(0, 2, size=(20, ))
return u'<div class="{0}">{1}{2}</div>'.format(style, label_wrap, hints_wrap)
assert_almost_equal(matthews_corrcoef(y_true, y_true), 1.0)
raise NotImplementedError()
self.assertIn("'position': {}".format(expected_position), rendered_html)
return self
mock_threads.return_value = CommentClientPaginatedResult(collection=[], page=1, num_pages=1)
__virtualname__ = 'odbc'
return self.oauth2_adapter.create_public_client( name='Test Public Client', user=user, client_id=client_id, redirect_uri=DUMMY_REDIRECT_URL, )
import salt.utils.boto3 import salt.utils.compat
return tuple(Commit.iter_items( repo, "{start}..{end}".format(start=start_ref, end=end_ref), first_parent=True, no_merges=True, ))
print("{}: {}".format(self.full_path, self.rule.rule_id), file=out)
import logging
resp = self._change_enrollment('unenroll') self.assertEqual(resp.status_code, 400)
self.assertEqual(test, expected)
'rest_framework', 'openedx.core.djangoapps.user_api',
__virtualname__ = 'shadow'
pos_class = classes[1]
raise NotImplementedError()
assert_array_equal(np.argmin(samme_proba, axis=1), [2, 0, 0, 2]) assert_array_equal(np.argmax(samme_proba, axis=1), [0, 1, 1, 1])
changed = [] latest = [] for pkg_name, options in six.iteritems(pkg_params):
from salt.ext.six import string_types
VIDEO_CDN_URL = ENV_TOKENS.get('VIDEO_CDN_URL', {})
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
overview_v10 = CourseOverview.get_from_id(course.id) self.assertEqual(overview_v10.version, 10)
course_outline_url = reverse_course_url('course_handler', updated_course.id) response = self.client.get_html(course_outline_url)
self.students = [UserFactory() for _ in xrange(STUDENT_COUNT)] for student in self.students: CourseEnrollmentFactory.create(user=student, course_id=self.course.id)
url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.get(url)
return deserialize_count_specs(self.courses_enrolled)
if example_range: ex_range = slice(example_range[0], example_range[1]) else: ex_range = slice(None)
self.assertEqual(len(courses), 3)
self.assertEqual(courses_list, courses_list_by_groups)
if sl_: tmpret = _get_template_texts(source_list=sl_, template=template, defaults=defaults, context=context) if not tmpret['result']: return tmpret text = tmpret['data']
self.server.cleanup() self.respond()
self.course_nav.q(css='fieldset label:nth-child(3) input').nth(0).click()
anon_user = Client() resp = anon_user.post( self.postback_url, self.student_answers ) self.assertEquals(resp.status_code, 302)
def _str_header(self, name, symbol='`'): return ['.. rubric:: ' + name, '']
source = utils.find_release_date_source(item) self.assertEqual(source.location, expected_source.location) self.assertEqual(source.start, expected_source.start)
return 'problem'
from salt.exceptions import SaltInvocationError import salt.utils.pushover
self.assertEqual(len(mail.outbox), 2)
self.coach = UserFactory.create() self.mstore = modulestore()
del results[-1] max_exceeded = True
inject_globals['__env__'] = str(low['__env__'])
log.error( 'Failed to render template with error: {0}'.format( data['data'] ) ) return ''
try: import etcd from urllib3.exceptions import ReadTimeoutError, MaxRetryError HAS_LIBS = True except ImportError: HAS_LIBS = False
return self.q(css='div.discussion-module').attrs('data-discussion-id')[0]
metric = ALL_METRICS[name]
add_action(task_definition=task_definition, **kwargs)
if self.value == "": self.value = 'null'
return re.split(r'[\s,]+', cstr)
if not organizations_enabled(): return [] from organizations import api as organizations_api return organizations_api.get_organization_courses(organization_id)
self.assertEqual(result['order'].status, 'purchased') self.assert_dump_recorded(result['order'])
assert_raises_regexp(TypeError, 'estimator', check_consistent_length, [1, 2], RandomForestRegressor())
graded = False
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON ensure_in_syspath('../..')
"payment_params": get_signed_purchase_params( cart, callback_url=callback_url, extra_data=extra_data ),
pass
from __future__ import absolute_import import getpass import grp import pwd import os import shutil import sys
x = np.dot(x, np.arange(x.shape[1] ** 2).reshape(x.shape[1], x.shape[1]))
return unicode(repr(self))
log = logging.getLogger(__name__)
pass
get_version = { 'Linux': linux_diskstats, 'FreeBSD': freebsd_diskstats, }
if service_name == 'SSH' or service_name == 'ssh': temp_service_name = 'TSM-SSH' else: temp_service_name = service_name
fault = OrderedDict() for field in header: fault[field] = entry[header.index(field)]
inherited_settings = {}
cmd = '--{0}-{1}={2} --permanent'.format(action, _type, name)
regular_values = np.linspace(0, 256, n_clusters + 1) regular_labels = np.searchsorted(regular_values, face) - 1
if hasattr(int, 'bit_length'): _int_bit_length = lambda i: i.bit_length() else: _int_bit_length = lambda i: len(bin(abs(i))) - 2
grid_search = GridSearchCV(pipeline, parameters, n_jobs=-1, verbose=1)
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1)
score = sub_api.get_score(student_item) self.assertIs(score, None)
est = pickle.loads(pickle.dumps(est)) assert_true(sparse.issparse(est.coef_)) pred = est.predict(X) assert_array_equal(pred, pred_orig)
self.options.log_file_level = self.config.get( self._logfile_loglevel_config_setting_name_ )
_address_class = IPv4Address
pass
new_group_2 = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, user_partition) self.assertEqual(new_group, new_group_2)
dummy_v = T.tensor4() dummy_v.name = 'dummy_v'
if 'data' not in adapters[iface_name]: adapters[iface_name]['data'] = salt.utils.odict.OrderedDict()
test_score -= test_score[0] test_best_iter = x[np.argmin(test_score)]
return -1
from salt.modules import svn
with warnings.catch_warnings(record=True) as w: warnings.simplefilter("always")
REQUIRE_EXCLUDE = ("build.txt",)
ret = {} for name in names: ret[name] = ''
elif revision == ModuleStoreEnum.RevisionOption.draft_only: return get_draft()
if attr == self.ASSET_TYPE_ATTR: value = self.asset_id.asset_type elif attr == self.ASSET_BASENAME_ATTR: value = self.asset_id.path else: value = getattr(self, attr)
os.mkdir(path) self.addCleanup(shutil.rmtree, path)
self.assertTrue(exam_attempts_section.is_student_attempt_visible)
self.add_course_to_user_cart(self.xss_course_key) self.assertEquals(self.cart.orderitem_set.count(), 1)
return [ CourseKey.from_string(course_overview['id']) for course_overview in CourseOverview.objects.values('id') ]
for parent in path.split(os.path.sep): try: tree = self.repo.get_object(tree[parent][1]) except (KeyError, TypeError): return None return tree
get_version = { 'Linux': linux_version, 'FreeBSD': lambda: __salt__['cmd.run']('sysctl -n kern.version'), }
resp = self._login(email, password) data = parse_json(resp) self.assertTrue(data['success']) return resp
_ = lambda text: text
X, y = datasets.make_classification(n_samples=100000, n_features=20, n_informative=2, n_redundant=10, random_state=42)
verify_name(self.html_usage_key, self.seq_usage_key, "Duplicate of 'Text'")
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'softlayer', vm_['profile'], vm_=vm_) is False: return False
return reverse_course_url('course_rerun_handler', course_key)
response = self._load_dashboard() self.assertContains(response, "credit-request-pending-msg")
if not isinstance(user_exists, bool): ret['comment'] = user_exists ret['result'] = False return ret
self.assertIn('request_uuid', parameters) self.assertEqual(len(parameters['request_uuid']), 32)
warnings.filterwarnings(
level = getattr(syslog, _options['level']) facility = getattr(syslog, _options['facility'])
digits = load_digits() X, y = digits.data[:50], digits.target[:50] X_test = sparse.csr_matrix(digits.data[50:100])
if bypass_activation_email: self.assertFalse(mock_send_mail.called) else: self.assertTrue(mock_send_mail.called)
ADVANCED_SECURITY_CONFIG = {}
if obj.get("parent") is None: data["parent"] = None
expected_classes = ['Different persons', 'Same person'] assert_array_equal(lfw_pairs_train.target_names, expected_classes)
'ENABLE_THIRD_PARTY_AUTH': False,
self.bad_user_client = Client() self.good_user_client = Client() self.non_staff_client = Client() self.admin_client = Client()
self.assert_grade(problem, "invalid_option", "incorrect")
self.assertFalse(views.is_course_passed(self.course, None, self.student, self.request))
self.login(self.unenrolled_user) self.assertFalse(self.enroll(self.course)) self.assertTrue(self.enroll(self.test_course))
old_duration = self.parallel._smoothed_batch_duration if old_duration == 0: new_duration = this_batch_duration else: new_duration = 0.8 * old_duration + 0.2 * this_batch_duration self.parallel._smoothed_batch_duration = new_duration
CourseInstructorRole(dest_course_id).add_users( *CourseInstructorRole(source_course_id).users_with_role() ) CourseStaffRole(dest_course_id).add_users( *CourseStaffRole(source_course_id).users_with_role() )
temp_poll_answers = self.poll_answers temp_poll_answers[dispatch] += 1 self.poll_answers = temp_poll_answers
else: ret = _load_result(existing, ret)
msg = '<html>' + msg + '</html>'
api.update_credit_request_status(request["parameters"]["request_uuid"], self.PROVIDER_ID, status)
if 'retcode' not in event['data']: self.raw_events.append(event)
return self.q(css=".submission-success h4").text
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return frozenset()
with patch('sys.argv', ['salt-call']): ret = utils.daemonize_if({}) self.assertEqual(None, ret)
try: user = c.Win32_UserAccount(Name=name)[0] except IndexError: raise CommandExecutionError('User \'{0}\' does not exist'.format(name))
s_2 = -0.5 * (np.diag(K) - np.einsum('ij, ij -> j', C, C)) \
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
knn_graph = kneighbors_graph(X, 30, include_self=False)
resp = self.create_xblock(category='vertical') usage_key = self.response_usage_key(resp)
y = y[:m]
from __future__ import absolute_import
from __future__ import absolute_import import copy as pycopy import difflib import os import yaml
continue
'parent_url', module.xml_attributes.get('parent_sequential_url')
]
labels = spectral_clustering(graph, n_clusters=4, eigen_solver='arpack') label_im = -np.ones(mask.shape) label_im[mask] = labels
if 'extensions' not in d: self.extensions = []
AUTHENTICATION_BACKENDS = ( 'ratelimitbackend.backends.RateLimitModelBackend', )
log = logging.getLogger(__name__)
from openedx.core.djangoapps.credit import api
CourseEnrollment.unenroll(self.user, self.courses[3].id, skip_refund=True)
nnbrs = NearestNeighbors(algorithm='brute', metric='cosine').fit(X)
self.browser.refresh() profile_page.wait_for_page() self.verify_profile_page_is_private(profile_page)
return len(self.q(css='.wrapper-translations-settings .list-settings-item').results)
result = self.enroll(self.course) self.assertFalse(result)
from salttesting import skipIf, TestCase from salttesting.mock import ( MagicMock, NO_MOCK, NO_MOCK_REASON, patch)
self.assertEqual(initial_data["PhotoIDKey"], reverification_data["PhotoIDKey"])
pstat = os.lstat(path)
JOBLIB_SPAWNED_PROCESS = "__JOBLIB_SPAWNED_PARALLEL__"
return _absolute_url(is_secure=is_secure, url_path="")
XBLOCK_REMOVED_HTML_ELEMENTS = [ '<div class="wrap-instructor-info"', ]
continue
call_command('reindex_course_team', self.team1.team_id) mock_index.assert_called_once_with(self.team1) mock_index.reset_mock()
if isinstance(obj, CourseDescriptor): return _has_access_course(user, action, obj)
self.assertEqual(module.attempts, 1)
return self._validation_paragraph('error').text[0]
mock_init.side_effect = Exception response = get_credit_provider_display_names(self.course_key) self.assertTrue(mock_init.called) self.assertEqual(response, None)
return original_arg
super(IndexSequenceSpace, self)._validate_impl(is_numeric, batch)
ROLE = 'finance_admin' def __init__(self, *args, **kwargs): super(CourseFinanceAdminRole, self).__init__(self.ROLE, *args, **kwargs)
if iface_name not in adapters: adapters[iface_name] = salt.utils.odict.OrderedDict()
self.assertTrue(self.run_function('softwareupdate.reset_ignored')) self.assertEqual(self.run_function('softwareupdate.list_ignored'), [])
Pkg.installed("nginx", require=Pkg("some-other-package"))
raise self.retry(exc=exc, countdown=countdown, max_retries=config.max_retries)
store.get_items(SlashSeparatedCourseKey('abc', 'def', 'ghi'), qualifiers={'category': 'vertical'})
ele.value = grace_period
linter = JavaScriptLinter() results = FileResults('') linter.check_javascript_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
if self.tokenizer is not None: return self.tokenizer token_pattern = re.compile(self.token_pattern) return lambda doc: token_pattern.findall(doc)
self._set_group_access({0: [3]})
handler.release() return instance
self.fake_payment_page.submit_payment()
plt.figure(figsize=(10, 6)) plt.subplots_adjust(left=0.02, right=0.98)
if block_type == 'course': block_id = self.DEFAULT_ROOT_COURSE_BLOCK_ID elif block_type == 'library': block_id = self.DEFAULT_ROOT_LIBRARY_BLOCK_ID new_usage_key = course_key.make_usage_key(block_type, block_id)
if self.display_organization: return self.display_organization return self.org
leaf_indices = clf.apply(X) assert_equal(leaf_indices.shape, (len(X), clf.n_estimators))
if sp.issparse(X): return inertia, _k_means._mini_batch_update_csr( X, x_squared_norms, centers, counts, nearest_center, old_center_buffer, compute_squared_diff)
assert source == '' return None
try: kwargs['entrypoint'] = salt.utils.shlex_split(kwargs['entrypoint']) except AttributeError: pass
pred = grid_search.fit(train_data, target_train).predict(test_data) assert_array_equal(pred, target_test)
DEFAULT_DELAY_SEC = 0.5
'ENABLE_VIDEO_BUMPER': False,
from salt.ext.six.moves import builtins as __builtin__ __builtin__.__salt__ = {}
grid_search = GridSearchCV(pipeline, parameters, n_jobs=1)
source = "/foo/bar/fubar.pkg" package_id = "com.foo.fubar.pkg"
assert_raises(ValueError, _SigmoidCalibration().fit, np.vstack((exF, exF)), exY)
import salt.utils import salt.utils.vt
from salt.utils import is_linux from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.wait_for_element_visibility( ".wrapper-notification-error.is-shown .message", "Error message is visible" ) return self.error_notification.results[0].find_element_by_css_selector('.message').text
return (name, kwargs)
with patch('capa.capa_problem.LoncapaProblem.grade_answers') as mock_grade: mock_grade.side_effect = exception_class(u"ȧƈƈḗƞŧḗḓ ŧḗẋŧ ƒǿř ŧḗşŧīƞɠ")
if frame: try: func_name = frame.f_globals['__func_alias__'][func.__name__] except (AttributeError, KeyError): func_name = func.__name__
rval = X.copy() for i in xrange(rval.shape[0]): rval[i, :] /= np.abs(rval[i, :]).max() + 1e-12 return rval
components = self.q(css=".edx-notes-wrapper") return [AnnotatableComponent(self.browser, component.get_attribute("id")) for component in components]
skip_if_no_sklearn() mapping = {'dataset_iterator': 'DatasetValidationShuffleSplit'} test_yaml = test_yaml_dataset_iterator % mapping trainer = yaml_parse.load(test_yaml) trainer.main_loop()
try: records = _fixed_getframes(etb, context, tb_offset) except: raise print('\nUnfortunately, your original traceback can not be ' 'constructed.\n') return ''
cost = SumOfCosts([SumOfParams(), (0., DummyCost())])
from salt.exceptions import SaltInvocationError
return
ASSET_XML_PATH = COURSE_DATA_DIR / AssetMetadata.EXPORTED_ASSET_DIR / AssetMetadata.EXPORTED_ASSET_FILENAME
if isinstance(address, bytes): self._check_packed_address(address, 16) self._ip = _int_from_bytes(address, 'big') return
raise NotImplementedError(str(type(self))+" does not implement plot.")
pass
grid_search.score(X, y) grid_search.predict_proba(X) grid_search.decision_function(X) grid_search.transform(X)
self.assertRaises(SaltInvocationError, utils.format_call, dummy_func, {'1': 2})
GRAINS_CACHE = {} DETAILS = {}
self.assertRaises(TypeError, Progress, 2j, 3)
self.problem_section = ItemFactory.create(parent_location=chapter.location, category='sequential', metadata={'graded': True, 'format': 'Homework'}, display_name=self.TEST_SECTION_NAME)
response = requests.post(self.launch_uri, data=self.payload) self.assertIn('This is LTI tool. Success.', response.content)
W_list = [None] + W_list
_describe = __salt__['boto_iot.describe_policy'](policyName=policyName, region=region, key=key, keyid=keyid, profile=profile)['policy']
from salt.states import process
return self.q(css='body.view-teams').present
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_id) if has_instructor_access_for_class(request.user, course_key): try: data = dashboard_data.get_d3_section_grade_distrib(course_key, section)
from __future__ import absolute_import import os import os.path import tempfile
response = getattr(self.client, method)(self.url) self.assertEqual(405, response.status_code)
if estimator_error <= 0: return sample_weight, 1., 0.
self.assert_enrollment_status()
COURSE_ACTION_STATES = (CourseRerunState, )
selector_query = self.q(css=self._bounded_selector(self.content_group_selector_css)) return [ option.text for option in get_options(selector_query) if option.text != "Not selected" ]
self._loglevel_config_setting_name_, self.config['log_level']
return self._validation_paragraph('warning').text[0]
course = self._create_course("verified", sku='nonempty-sku') self._enroll(course.id)
XBLOCK_FIELD_DATA_WRAPPERS = ()
task_progress.failed += 1 err_rows.append([student.id, student.username, err_msg])
return re.compile(r"<([^>]+)>", flags=re.UNICODE).sub(" ", s)
if mode == 'connectivity': A_data = np.ones(n_samples1 * n_neighbors) A_ind = self.kneighbors(X, n_neighbors, return_distance=False)
obj.admin = request.user obj.save()
try: os.kill(int(open(pidfile).read().strip()), 0) sys.exit(1) except Exception as ex: pass
slug = hashlib.sha256(slug).hexdigest()
return cls.PROFESSIONAL in modes_dict or cls.NO_ID_PROFESSIONAL_MODE in modes_dict
old_content += line result = None
pass
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
parent = modulestore.get_parent_location(next_usage)
from __future__ import absolute_import
return xblock._edit_info.get('subtree_edited_on')
MODULE_DOCS = __doc__
ret = {'name': name, 'result': True, 'changes': {}, 'comment': ''}
out, err = DETAILS['server'].sendline('pkg_list\n')
attempt = self._submit_attempt(request.user, face_image, photo_id_image, initial_verification)
time.sleep(0.1) if not self.isalive(): return True else: return False
pass
items = self.store.get_items(course_key) self.assertIn(orphan, [item.location for item in items]) self.assertEqual(len(items), 3)
author_view = module_attr(AUTHOR_VIEW) has_author_view = True
reg_software.update({d_name: d_vers})
return
task_type = 'rescore_problem' task_class = rescore_problem task_input, task_key = encode_problem_and_student_input(usage_key) return submit_task(request, task_type, task_class, usage_key.course_key, task_input, task_key)
log.debug( 'KeyError when loading {0}'.format(module_name), exc_info=True )
if 'download_video' not in field_data and sources: field_data['source'] = field_data['html5_sources'][0]
raw_image_url = self.course_image_url
BULK_EMAIL_ROUTING_KEY_SMALL_JOBS = LOW_PRIORITY_QUEUE
wait = None
response = self.api_response() self.assertNotIn('\'/static/', response.data['handouts_html'])
CourseStaffRole(self.course.id).add_users(self.instructor) self.test_send_to_all()
certs_api.set_cert_generation_enabled(self.COURSE_KEY, False) self._assert_enabled_for_course(self.COURSE_KEY, False)
return False
return sig.replace(parameters=tuple(sig.parameters.values())[1:])
pass
clf = pickle.loads(pickle.dumps(clf)) assert_true(sp.issparse(clf.coef_)) pred = clf.predict(X) assert_array_equal(pred, Y)
return bool(os.stat( os.path.join('/etc/init.d', name)).st_mode & stat.S_IXUSR)
return self.build_problem( choices=choices, type=in_type, script=script )
except (AttributeError, ValueError): return None
raise NotImplementedError('Subclasses must implement course_partition')
new_deadline = (self.VERIFICATION_DEADLINE + timedelta(days=1)).replace(microsecond=0) self._set_form_verification_deadline(form, new_deadline) form.save()
X = JUNK_FOOD_DOCS
pass
print('Failed to save %s to .npy file:\n%s' % ( type(obj), traceback.format_exc()))
self.q(css='.page-content-secondary .members-info .team-member').first.click()
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
from __future__ import absolute_import, print_function
course = item.get_parent() item_dict['index'] = get_index(item_dict['location'], course.children)
from salt.modules import etcd_mod from salt.utils import etcd_util
return [MockRoles()]
svc_realpath = _get_svc_path(name)[0] down_file = os.path.join(svc_realpath, 'down')
self._assertOLXBase(block_list, draft=False, published=True)
n_trials = 10000
y_train, y_test = data_train.target, data_test.target
with super(UsersEndpointTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
response = self.send_get( client=self.client, url=reverse('bookmarks'), query_parameters='course_id=invalid' ) bookmarks_data = response.data['results']
if os.environ.get('TRAVIS_PYTHON_VERSION', None) is not None: time.sleep(10) else: time.sleep(2)
('ALIGN', (1, 0), (1, -1), 'LEFT'),
fchange = _check_dir_meta(name, user, group, mode) if fchange: changes[name] = fchange if clean: keep = _gen_keep_files(name, require, walk_d)
global tmpdir tmpdir = tempfile.mkdtemp() os.makedirs(os.path.join(tmpdir, 'mldata'))
k = redirects.get(k, k) return index_map.setdefault(k, len(index_map))
'event_return': str,
from __future__ import absolute_import
yield
class AsyncHTTPTestCase(object): pass
if self.signal_handler: self.signal_handler.send("course_deleted", course_key=course_key)
url_path = "course_team"
raise NotImplementedError("edX Platform doesn't currently implement XBlock resource urls")
studentmodule.state = json.dumps(problem_state) studentmodule.save()
features = map(lambda l: l[:-1], content) targets = map(lambda l: l[-1], content) del content
fn = None paths = ('/etc/yum/yum.conf', '/etc/yum.conf') for path in paths: if os.path.exists(path): fn = path break
y = np.dot(X, w)
from __future__ import absolute_import
boot(kwargs={'linode_id': node_id, 'config_id': config_id, 'check_running': False})
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_key_string) get_course_with_access(request.user, 'staff', course_key)
authentication_classes = (EnrollmentCrossDomainSessionAuth, OAuth2AuthenticationAllowInactiveUser) permission_classes = (IsAuthenticated,)
locator = xblock.location parent_location = modulestore().get_parent_location(locator) if parent_location is None: return None return modulestore().get_item(parent_location)
self.courseware_page.visit() self.courseware_page.wait_for_page() self.assertTrue(element_has_text( page=self.courseware_page, css_selector=entrance_exam_link_selector, text='Entrance Exam' ))
value = value.lstrip('@')
self.parse_args()
pass
#log_level: debug
grading_policy.update(course_policy)
self.create_programs_config() self.mock_programs_api(data={'results': []})
import salt.ext.six as six
with self.store.branch_setting(ModuleStoreEnum.Branch.published_only, dest_id): self.recursive_build(source_courselike, courselike, courselike_key, dest_id)
import salt.utils from salt.exceptions import SaltException
assert isinstance(location, (NoneType, UsageKey)) if location is None: return None return super(UsageKeyField, self).to_mongo(location.to_deprecated_string())
X_transformed_parallel2 = fs_parallel2.fit_transform(X) assert_array_equal( X_transformed.toarray(), X_transformed_parallel2.toarray() )
else: retcode = 0
from __future__ import absolute_import import os import sys import posixpath import ntpath import platform import tempfile
n_samples = n_features samples = np.arange(n_samples)
import salt.ext.six as six
from __future__ import absolute_import
if world.is_css_present('div#login_error'): assert_false(world.css_visible('div#login_error'))
MSE[MSE < 0.] = 0.
add_instructor(new_lib.location.library_key, request.user, request.user)
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
if path_cached: path_hash = hash_file(path) path_cached_hash = hash_file(path_cached)
scores = cval.cross_val_score(clf, X_sparse, X) assert_array_equal(scores, clf.score(X_sparse, X))
used_all_attempts = CapaFactory.create(showanswer='finished', max_attempts="1", attempts="1", due=self.tomorrow_str) self.assertTrue(used_all_attempts.answer_available())
size += (stat.st_size // 512 + 1) * 512
css_include = compressed_css('style-main-v1') self.assertIn(u'lms-main-v1.css', css_include)
__virtualname__ = 'couchdb'
return dict(zip( header_row, [ unicode(user.id), user.email, user.username, ] + grade ))
def __init__(self, rng): self.rng = rng
skip_if_no_sklearn() mapping = {'dataset_iterator': 'StratifiedDatasetShuffleSplit'} test_yaml = test_yaml_dataset_iterator % mapping trainer = yaml_parse.load(test_yaml) trainer.main_loop()
with np.errstate(divide='ignore'): retval = 1. / dist return retval ** 2
self._each_parens('[x+y]', 'x+y', '[')
if y.dtype.kind == 'f' and np.any(y != y.astype(int)): return 'continuous' + suffix
self.lc_block.max_count = 50 self.lc_block.refresh_children() result = self.lc_block.validate()
rbenv.__grains__ = {} rbenv.__salt__ = {}
if profile not in valid_profiles: raise salt.exceptions.SaltInvocationError('Invalid Profile Name')
log = logging.getLogger(__name__)
user_id = user_service.get_current_user().opt_attrs.get('edx-platform.user_id', None)
if len(names) == 1 and len(ret): return ret[names[0]]
return lxml.html.tostring(self.table)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
MY_NAME = 'test_ext_pillar_opts'
cache.delete_many([instance_key(model, x) for x in instance_or_pk])
test_modes = ['seqwr', 'seqrewr', 'seqrd', 'rndrd', 'rndwr', 'rndrw']
(ModuleStoreEnum.RevisionOption.published_only, 'assertOLXIsDeleted'), (ModuleStoreEnum.RevisionOption.all, 'assertOLXIsDeleted'), (None, 'assertOLXIsDeleted'),
css = prefix + ' .wrapper-collection' return [GroupConfiguration(self, prefix, index) for index in xrange(len(self.q(css=css)))]
from salt.modules import mac_defaults as macdefaults
import salt import salt.auth import salt.utils.event
from __future__ import absolute_import
self.assert_requirement_status(grade, due_date, None)
raise NotImplementedError("non-square filter shape", (frows, fcols))
from __future__ import absolute_import import copy import errno import fnmatch import hashlib import logging import os import shutil from datetime import datetime from salt.exceptions import FileserverConfigError
self.courseware_page.stop_timed_exam()
prompt = len(channels.values()) > 1
addr = {'address': val.rstrip('(Preferred)'), 'prefixlen': None} iface['inet6'].append(addr)
os.dup2(stdout_child_fd, pty.STDIN_FILENO) os.dup2(stdout_child_fd, pty.STDOUT_FILENO) os.dup2(stderr_child_fd, pty.STDERR_FILENO)
('refunded', 'refunded'),
Coupon.objects.create( code=code, description='testing code', course_id=course_key, percentage_discount=self.percentage_discount, created_by=self.user, is_active=is_active )
__opts__['test'] = orig_test
_locals[key](*validation_arg)
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
self.assertEqual(course_date, expected_course_date)
if pkg: pkg = _cmd_quote(pkg)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
'datadog',
self.student_answers = convert_files_to_filenames(answers) return self._grade_answers(answers)
user = UserFactory() user.name = 'mock_user' user.is_staff = is_staff user.is_enrolled = is_enrolled user.is_authenticated = lambda: is_authenticated return user
return saltstack_version
XDOMAIN_PROXY_CACHE_TIMEOUT = 60 * 15
tree = etree.fromstring(u'<div>{}</div>'.format(html))
if self._impl in ['c_svc', 'nu_svc'] and len(self.classes_) == 2: return -dec_func.ravel()
self.split_mongo.create_course( self.split_course_key.org, self.split_course_key.course, self.split_course_key.run, self.user_id, fields=fields, root_block_id='runid' )
if not child_class: child_class = self.CHILD_CLASS return self.children(child_class)[index]
coef = 1. / (binomial(k, n_features) * (n_features - k))
if isinstance(exc, zmq.ZMQError) and exc.errno == errno.EINTR: return
return self
return 'edx.mit.edu'
from __future__ import absolute_import
languages = dict(settings.ALL_LANGUAGES) try: return languages[self.course_team.language] except KeyError: return self.course_team.language
plt.figure()
return comdat['stderr']
with mock_basket_order(basket_id=1, exception=exceptions.HttpNotFoundError): response = self.client.get(self.path) self.assertEqual(response.status_code, 404)
modules_to_update = StudentModule.objects.filter(course_id=course_id, module_state_key__in=usage_keys)
return len(self.q(css=self.BOOKMARKED_ITEMS_SELECTOR).results)
coefs = coefs[np.newaxis, :, :] y_offset = np.atleast_1d(y_offset) y_test = y_test[:, np.newaxis]
self.returners['{0}.save_load'.format(self.opts['master_job_cache'])](jid, job_load)
return '{}:{}'.format(self.idp_slug, remote_id)
plt.figure() plt.legend(legend_rects, legend_labels, loc='upper left')
if not salt_api_acl_tool(username, cherrypy.request): raise cherrypy.HTTPError(401)
self._verify_cell_data_for_user(user_1, course.id, 'Cohort Name', '') self._verify_cell_data_for_user(user_2, course.id, 'Cohort Name', '')
return self.q(css=self.get_selector(css=css_selector))
return (name, admin_state_up, router_ext, network_type, physical_network, segmentation_id, shared)
store = self._verify_modulestore_support(location.course_key, 'unpublish') return store.unpublish(location, user_id, **kwargs)
assert_true((ovr_clf.coef_ != cs_clf.coef_).all())
cea = CourseEnrollmentAllowed(email='robot-allowed@robot.org', course_id=self.course.id) cea.save() self.allowed_email = 'robot-allowed@robot.org'
clf = TreeClassifier(class_weight=1, random_state=0) assert_raises(ValueError, clf.fit, X, _y)
d = np.diag(prec).reshape(1, prec.shape[0]) d = 1. / np.sqrt(d)
parent_block.edit_info.source_version = None self.decache_block(usage_locator.course_key, new_id, parent_block_key)
courses = [course for course in courses if course.id != course_key] if courses: courses = _remove_in_process_courses(courses, in_process_course_actions) settings_context.update({'possible_pre_requisite_courses': courses})
self.q(css=selector).first.click() return self
auth_entry = request.session.get(pipeline.AUTH_ENTRY_KEY)
django_user_service = DjangoXBlockUserService(self.user, user_is_staff=True) anonymous_user_id = django_user_service.get_anonymous_user_id(username="No User", course_id='edx/toy/2012_Fall') self.assertIsNone(anonymous_user_id)
continue
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
return social_auth.uid[len(self.idp_slug) + 1:]
if HAS_ZMQ: try: zmq_version_info = zmq.zmq_version_info() except AttributeError: zmq_version_info = tuple(
self._test_group_id_passed_to_user_profile( mock_request, True, self.moderator, profiled_user, requested_cohort.id, pass_group_id )
BROKER_HEARTBEAT = 10.0 BROKER_HEARTBEAT_CHECKRATE = 2
ret['comment'] = ('Database {0} is not present, so it cannot be removed' ).format(name) return ret
Z = Z.reshape(xx.shape) ax.contourf(xx, yy, Z, cmap=cm, alpha=.8)
reg_code = CourseRegistrationCode.objects.create( code="abcd1234", course_id=self.course.id, created_by=self.user )
else: ret = _load_result(existing, ret)
result = process_postpay_callback(params) self.assertTrue(result['success']) self.assert_dump_recorded(result['order'])
with tornado.stack_context.StackContext(self.functions.context_dict.clone): data['return'] = self.functions[fun](*args, **kwargs) data['success'] = True
0.416...
delete_course_and_groups(course_key, self.user.id)
self.assertEquals(4, len(response.content.splitlines()))
self.service.remove_credit_requirement_status( self.user.id, no_credit_course.id, 'grade', 'grade' )
return course.id.org
rval = (transform(raw_batch[0]),) + raw_batch[1:]
name = str(name)
from salt.exceptions import SaltInvocationError from salt.utils import exactly_one
evecs /= np.apply_along_axis(np.linalg.norm, 0, evecs)
get_request_dict = {CapaFactory.input_key(): '3.14'} module.check_problem(get_request_dict)
__func_alias__ = { 'set_': 'set' }
log = logging.getLogger(__name__)
targets = email_obj.targets.all() global_email_context = _get_course_email_context(course)
from __future__ import absolute_import import logging import time
if os_grain['kernel'] not in 'Darwin': self.skipTest( 'Test not applicable to \'{kernel}\' kernel'.format( **os_grain ) )
return self._extra_fields_setting.get(field_name) == "required"
source_suffix = '.txt'
return self.mean_h_given_v(v)
version_line_index = 0 version_column_index = 1 line = lines[version_line_index].split()[version_column_index] return _format_return_data(0, stdout=line)
handlers = logger.handlers level = logger.getEffectiveLevel()
from __future__ import absolute_import
if user is not None and user.is_authenticated(): if CourseEnrollmentAllowed.objects.filter(email=user.email, course_id=course_key): return ACCESS_GRANTED
__salt__ = salt.loader.minion_mods(__opts__) __grains__ = __opts__['grains']
assert_array_almost_equal(my_X, X)
import salt.loader import salt.utils.event from salt.utils.event import tagify from salt.exceptions import SaltInvocationError
return render_to_string('shoppingcart/cybersource_form.html', { 'action': get_purchase_endpoint(), 'params': get_signed_purchase_params(cart), })
do_test(1)
valid = SVHN('valid', path=local_path) check_dtype(valid) valid.apply_preprocessor(pipeline, can_fit=False)
X = check_array(X, dtype=DTYPE, order="C") return self._decision_function(X).ravel()
try: return CourseTeam.objects.get(team_id=team_id) except CourseTeam.DoesNotExist: raise Http404
return Env.BOK_CHOY_CACHE.set('test', 'test')
if n_iter > 0: ss = ((prev_alpha[0] - alpha_min) / (prev_alpha[0] - alpha[0])) coef[:] = prev_coef + ss * (coef - prev_coef) alpha[0] = alpha_min
batch0 = slice(0, chunk_size) scaler_batch = MinMaxScaler().fit(X[batch0]) scaler_incr = MinMaxScaler().partial_fit(X[batch0])
from salt.exceptions import SaltInvocationError
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return (tenant_id, subnet, router, network, floatingip, port, security_group, security_group_rule)
component = OrderedDict() for field in header: component[field] = entry[header.index(field)]
self.assertTrue(num_orig_tabs >= 5)
self.assertEqual( descriptor._xmodule.get_html(), descriptor.render(STUDENT_VIEW).content )
return { field: course['metadata'][field] for field in CourseSummary.course_info_fields if field in course['metadata'] }
__virtualname__ = 'service'
def __init__(self, role, org): super(OrgRole, self).__init__(role, org)
import salt.ext.six as six
boston = load_boston() perm = rng.permutation(boston.target.size) boston.data = boston.data[perm] boston.target = boston.target[perm]
providers_config_path = overrides['providers_config']
return numpy.arccosh(1. / val)
out_array[:, :, i] = tile_raster_images( X[i], img_shape, tile_shape, tile_spacing, scale_rows_to_unit_interval, output_pixel_vals)
self.assertTrue(video_xblocks == 2)
library = self.store.get_library(library_key) self.assertEqual(library.location.library_key, library_key)
from salt.states import disk
self._handouts.append(asset_name)
return self.q(css='.components-list').visible
MODULESTORE_FIELD_OVERRIDE_PROVIDERS = ()
self.assertFalse(self.signal_fired) self.assertTrue(skip_refund) self.signal_fired = True
return self.q(css=".submission-error li").text
self.assertTrue(filesystem.exists(exported_asset_name)) self.assertEqual(len(exported_static_files), 1)
y_true, y_pred, _ = make_prediction(binary=False)
assert False, "student_view should produce valid html"
with patch('openedx.core.djangoapps.safe_sessions.middleware.log.warning') as mock_log: yield self.assertFalse(mock_log.called)
return queryset.order_by('-created')
if not __opts__['test'] and len(ret['changes']) > 0: ret['result'] = _write_config(config)
X = check_array(X, accept_sparse=['csr', 'csc'])
ret = self.run_run_plus(fun='fileserver.envs', args=['backend="[roots]"']) self.assertIsInstance(ret['fun'], list)
pass
current_year = datetime.datetime.now().year self.set_year_of_birth(current_year - 10) self.assertFalse(self.profile.requires_parental_consent())
try: iter(update_callbacks) self.update_callbacks = update_callbacks except TypeError: self.update_callbacks = [update_callbacks]
K.flat[::n_samples + 1] += alpha[0]
raise RuntimeError( 'Please set {0}._default_logging_logfile_'.format( self.__class__.__name__ ) )
for code in sorted_codes: print(code + '. ' + codebook[code])
from salttesting import TestCase, skipIf from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON )
grad[:n_features] += alpha * 2. * w
from __future__ import absolute_import import copy import logging import re
exc_info_on_loglevel=logging.DEBUG
url = EcommerceService().payment_page_url() self.assertEqual(url, 'http://ecommerce_url/test_basket/')
- alarms: UnHealthyHostCount: attributes: threshold: 2.0
pass
default=_("Blank Advanced Problem")
__proxyenabled__ = ['ssh_sample']
X = np.arange(100)[:, np.newaxis] y = np.ones(100) y[:50] = 0.0
from __future__ import absolute_import
(cmd, cwd) = _render_cmd(cmd, cwd, template, saltenv, pillarenv, pillar_override)
X = np.random.RandomState(21).randn(10, 3) y = np.random.RandomState(12).randn(10)
assert_false(hasattr(SequenceDescriptor, 'rerandomize'))
refetched = self.client.get_json(first_update_url) self.assertHTMLEqual( content, json.loads(refetched.content)['content'], "get w/ provided id" )
log.warning("User [%s] was not authorized to initiate a refund for user [%s] " "upon unenrollment from course [%s]", request_user.id, unenrolled_user.id, course_key_str) return []
import salt.ext.six as six
cache_key = cls.MESSAGE_URL_CACHE_KEY.format( access_point=access_point, course_key=course_key ) url = cache.get(cache_key)
with wrap_ugettext_with_xyz(french_translation): self.assertEqual(i18n_service.ugettext(self.test_language), 'XYZ dummy language')
salt '*' win_wua.list_updates categories=['Critical Updates','Drivers']
self.assertTrue(self._has_changes(locations['grandparent'])) self.assertTrue(self._has_changes(locations['parent']))
break
from salt.states import vbox_guest
return self.client.get(reverse("dashboard"))
mouse_hover_action = ActionChains(self.browser).move_to_element(element) mouse_hover_action.perform()
row = (y*outshp[1]+x)*inshp[0]*ksize + l + fmapi*ksize if ws else\ y*outshp[1] + x
SSL_AUTH_EMAIL_DOMAIN = ENV_TOKENS.get("SSL_AUTH_EMAIL_DOMAIN", "MIT.EDU") SSL_AUTH_DN_FORMAT_STRING = ENV_TOKENS.get("SSL_AUTH_DN_FORMAT_STRING", "/C=US/ST=Massachusetts/O=Massachusetts Institute of Technology/OU=Client CA v1/CN={0}/emailAddress={1}")
_ = lambda text: text
nftables.__grains__ = {} nftables.__salt__ = {}
raise CommandError(_( 'Invalid permission option: "{}". Please specify permissions ' 'using the format: app_label:model_name:permission_codename.' ).format(permission))
patched_from_string.assert_called_once_with(mock_problem_location) patched_manager.filter.assert_called_once_with( course_id=self.course_key, module_state_key=mock_problem_key )
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.assertEquals( preview.latex_preview('-x+2-3+4', variables=['x']), '-x+2-3+4' )
self.publish(location.version_agnostic(), user_id, blacklist=EXCLUDE_ALL, **kwargs)
self.assertFalse(library_container.has_validation_error) self.assertFalse(library_container.has_validation_warning)
return transform(X)
HAS_PSUTIL = False try: import salt.utils.psutil_compat as psutil HAS_PSUTIL = True except ImportError: pass
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
self.store.delete_item( orphan.location, self.user.id, skip_auto_publish=True )
self.assert_has_xpath(xml_root, xpath, context_dict, exact_num=0)
for inputfile in inputfiles:
return OrderedDict()
error_msg = exc_info_to_str(sys.exc_info())
attempt.mark_ready() assert_equals(attempt.status, "ready")
from __future__ import absolute_import import logging import salt.utils.vault
suitable_disks = [] query = vsan_system.QueryDisksForVsan() for item in query: if item.state == 'eligible': suitable_disks.append(item)
request.session = {} gradeset = grade(student, request, course, keep_raw_scores) yield student, gradeset, ""
random_cohorts = CourseUserGroup.objects.filter( course_id=user_group.course_id, group_type=CourseUserGroup.COHORT, cohort__assignment_type=CourseCohort.RANDOM ) return len(random_cohorts) == 1 and random_cohorts[0].name == user_group.name
if not (allow_not_found and exception.args[0] == xblock.location): raise
with open(os.path.join(self.module_dir, '__init__.py'), 'w') as fh: fh.write(deep_init_base) fh.flush()
data = {} if headers and 'Accept' in headers: data['CONTENT_TYPE'] = headers['Accept'] response = self.client.get(url, data)
queue = deque([block]) while queue: item = queue.popleft() yield item queue.extend(item.get_children())
for dirs in six.itervalues(_find_dirs(metadata[saltenv])): dirs = _trim_env_off_path(dirs, saltenv, trim_slash=True) ret += [_f for _f in dirs if _f]
return HttpResponse(status=406)
_SEUPD_WHICH = ['LM', 'SM', 'LA', 'SA', 'BE']
number_part = Word(nums) inner_number = (number_part + Optional("." + Optional(number_part))) | ("." + number_part) inner_number = Combine(inner_number)
return '__file__' in globals()
salt '*' vsphere.get_coredump_network_config my.vcenter.location root bad-password \ esxi_hosts='[esxi-1.host.com, esxi-2.host.com]'
effective_diff = np.sum((new_centers - old_centers) ** 2) assert_almost_equal(incremental_diff, effective_diff)
BROKER_POOL_LIMIT = 0 BROKER_CONNECTION_TIMEOUT = 1
import salt.utils import salt.utils.cloud as suc from salt.exceptions import SaltInvocationError
for item in REPORT_TYPES: if report_type in item: return item[1](start_date, end_date, start_letter, end_letter) raise ReportTypeDoesNotExistException
if "pinned" not in thread: thread["pinned"] = False
self._setup_mode_and_enrollment(self.FUTURE, "verified")
'BOOTSTRAP_SCRIPT_VERSION', 'v2014.06.21'
for addr in hosts: if host in hosts[addr]: return addr return ''
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
exc_info_on_loglevel=logging.DEBUG
if verbose: print(msg + " Stopping.") return True
from __future__ import unicode_literals
return self.__dict__.get(attr)
d = load_linnerud() X = d.data Y = d.target
try: return self.matches[state] except IndexError: return None
from salt.modules import zfs from salt.utils.odict import OrderedDict
'shoppingcart.context_processor.user_has_cart_context_processor',
try: from salt._compat import ElementTree as ET HAS_ELEMENT_TREE = True except ImportError: HAS_ELEMENT_TREE = False
return HttpResponseBadRequest()
cached_file = __salt__['cp.is_cached'](cache_file, saltenv) if not cached_file: cached_file = __salt__['cp.cache_file'](cache_file, saltenv)
X, Y = np.meshgrid(xgrid, ygrid[::-1])
list_price = 'N/A' payment_amount = 'N/A' coupon_codes_used = 'N/A' registration_code_used = 'N/A' payment_status = _('Data Integrity Error') transaction_reference_number = 'N/A'
return '{}[data-locator="{}"] {}'.format( self.BODY_SELECTOR, self.locator, selector )
resp = self._change_enrollment('enroll') self.assertEqual(resp.status_code, 200) self.assertEqual(resp.content, full_url)
if not encoded_videos: video_url = self.html5_sources[0] if self.html5_sources else self.source if video_url: encoded_videos["fallback"] = { "url": video_url,
self._verify_editable(self._get_course_details_response(False))
if preference_visibility == PRIVATE_VISIBILITY: self._verify_private_account_response(response, account_privacy=PRIVATE_VISIBILITY) else: self._verify_full_shareable_account_response(response, ALL_USERS_VISIBILITY, badges_enabled=True)
errstring = "Invalid location string" with self.assertRaisesRegexp(CommandError, errstring): self.command.handle("foo", "bar")
'winrepo_source_dir': str,
import salt.ext.six as six
self.assertNotContains(resp, 'Robot_Course_Outside_Microsite')
from __future__ import absolute_import, print_function import logging
self.assertFalse(are_permissions_roles_seeded(self.base_course_key)) call_command('import', self.content_dir, self.good_dir) self.assertTrue(are_permissions_roles_seeded(self.base_course_key))
Map.__salt__ = __salt__ _globals['Map'] = Map
self.assertRegexpMatches(ret, r'^\d{12}$')
ids = set(ids) return self.db_connection.find_course_blocks_by_id(list(ids))
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
self.assertIn( 'Update not available', self.run_function('softwareupdate.update', ['spongebob']))
multi_db = True
return json.dumps(files.split())
'badges',
pass
self.addCleanup(ModuleIsolation().clean_up)
raise NotImplementedError()
return self.q(css='.wrapper-status').visible
columns = {} for idx, col_name in enumerate(response['Titles']): columns[idx] = col_name
params = self._signed_callback_params(self.order.id, self.COST, "abcd") params['decision'] = u'CANCEL' result = process_postpay_callback(params)
cv = list(super(ValidationKFold, self).__iter__()) for train, valid, test in get_k_fold_splits(cv): yield train, valid, test
response = self.client.get(self.notes_page_url) self.assertEqual(response.status_code, 404)
#texinfo_show_urls = 'footnote'
pass
for mode in [CourseMode.DEFAULT_MODE_SLUG, CourseMode.VERIFIED]: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode, mode_display_name=mode, )
good_status, is_tarball_mimetype = self.export_page.download_tarball() self.assertTrue(good_status) self.assertTrue(is_tarball_mimetype)
SIMPLE_CHILDREN_MAP = [[1, 2], [3, 4], [], [], []]
parents_map = [[], [0], [0], [1], [1], [2], [2, 4]]
return None
exp_doc_topic_d = exp_doc_topic[idx_d, :].copy() exp_topic_word_d = exp_topic_word_distr[:, ids]
raise SaltRenderError( 'Jinja variable {0}{1}'.format( exc, out), buf=tmplstr)
raise SaltInvocationError('Command must be specified')
response = self.client.get(url) self.assertEquals(response.status_code, 403)
while re.search(RSTR_RE, stderr): stderr = re.split(RSTR_RE, stderr, 1)[1].strip()
return self.dop_adapter.create_confidential_client( name='test_app', user=user, client_id=client_id, redirect_uri=DUMMY_REDIRECT_URL )
lim = max(abs(abs(np.diag(fast_dot(W1, W.T))) - 1)) W = W1 if lim < tol: break
(['honor', 'verified', 'audit'], 'honor'),
if norm(grad * np.logical_or(grad < 0, H > 0)) < tol: break
response = requests.post(self.url, data={"test_param": 2}) self.assertEqual(response.status_code, 200)
ret['comment'] = 'Event module not available. Beacon add failed.'
from __future__ import absolute_import import os import random import string
for __ in range(int(num_inputs)): input_element = self.create_input_element(**kwargs) if not None == input_element: response_element.append(input_element)
all_unittests_suite = suites.TestSuite('All Tests', subsuites=[js_suite, python_suite]) all_unittests_suite.run()
this_img = scale_to_unit_interval( this_x.reshape(img_shape))
self.join(other2, main)
post_data = models.model_to_dict(provider1) del post_data['icon_image']
GRADES_DOWNLOAD_ROUTING_KEY = HIGH_MEM_QUEUE
version_guids, id_version_map = self.collect_ids_from_matching_indexes(branch, **kwargs) if not version_guids: return for entry in self.find_course_blocks_by_id(version_guids): for course_index in id_version_map[entry['_id']]: yield entry, course_index
thumbnail_name = StaticContent.generate_thumbnail_name( content.location.name, dimensions=dimensions ) thumbnail_file_location = StaticContent.compute_location( content.location.course_key, thumbnail_name, is_thumbnail=True )
if gem_bin is None: if __salt__['rvm.is_installed'](runas=runas): return __salt__['rvm.do'](ruby, cmdline, runas=runas)
return prlctl('stop', args, runas=runas)
response = requests.get(self._get_url("api/v1/annotations")) self.assertEqual(response.status_code, 400)
from __future__ import unicode_literals
import salt.config import salt.loader
X1 = np.ones(18) kf = KFold(3) check_cv_coverage(kf, X1, y=None, labels=None, expected_n_iter=3)
glusterfs.__salt__ = {'glusterfs.peer': mod_glusterfs.peer} glusterfs.__opts__ = {}
course_image_asset_key = StaticContent.compute_location(course.id, course.course_image) course_image_content = StaticContent(course_image_asset_key, image_name, 'image/png', image_buff) contentstore().save(course_image_content)
results[guid]['Severity'] = str(update.MsrcSeverity)
with ignore_warnings(): yield check_transformer_n_iter, name, estimator
self.assertContains(response, "<td>Professional</td><td>2</td>")
self.assertEqual( len(CourseEnrollment.objects.filter(mode='honor', user_id__in=user_ids)), expected_conversions )
from __future__ import absolute_import
self.testing_cost = 20 self.testing_course_mode = CourseMode( course_id=self.testing_course.id, mode_slug=CourseMode.HONOR, mode_display_name="testing honor cert", min_price=self.testing_cost ) self.testing_course_mode.save()
gamma = 10. kernel = rbf_kernel(X, Y, gamma=gamma)
if self.default and CourseCompleteImageConfiguration.objects.filter(default=True).exclude(id=self.id): raise ValidationError(_(u"There can be only one default image."))
num_to_add = max_count - len(selected)
X_sparse_pruned = sparse.csr_matrix(X_dense)
icrv_status_emails = IcrvStatusEmailsConfiguration.current() if icrv_status_emails.enabled and checkpoints: user_id = attempt.user.id course_key = checkpoints[0].course_id related_assessment_location = checkpoints[0].checkpoint_location
server_port = 4567 self.server_url = 'http://127.0.0.1:%d' % server_port
try: import boto import boto.ec2 HAS_BOTO = True except ImportError: HAS_BOTO = False
if location.category in DIRECT_ONLY_CATEGORIES: raise InvalidVersionError(location)
obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')
length = arr.size if hasattr(arr, 'size') else len(arr) return np.nan if length == 0 else np.median(arr, *args, **kwargs)
team = self.post_create_team(data=self.build_team_data( name="New team", course=self.test_course_1, description="Another fantastic team", ), user=user)
output = StringIO.StringIO() import_log_handler = logging.StreamHandler(output) import_log_handler.setLevel(logging.DEBUG)
pkg_params = {name: kwargs.get('version')}
if paramvalues['binddn']: connargs['binddn'] = paramvalues['binddn'] if paramvalues['bindpw']: params['mandatory'].append('bindpw')
return SequenceDatasetIterator(self, data_specs, subset_iterator, return_tuple=return_tuple)
urlpatterns += patterns( '',
return '.cohort-management {}'.format(selector)
import salt.minion import salt.utils.verify import salt.utils.jid from salt.utils.event import tagify
mlb = MultiLabelBinarizer() assert_array_equal(mlb.fit(inp).transform(inp), indicator_mat) assert_array_equal(mlb.inverse_transform(indicator_mat), inp)
x = np.array([0, 1, 1, 0, 0]) y = np.array([1, 0, 0, 0, 1])
source_lines = list(islice(source_file_obj, first_line - 1, None))
world.auto_capture_screenshots = False
import ctypes import string
item2 = PaidCourseRegistration.objects.get(id=item2.id) self.assertIsNotNone(item2.course_enrollment) self.assertEqual(item2.course_enrollment.course_id, self.testing_course.id)
else: return HttpResponse(status=405)
master.update( salt.config.get_cloud_config_value( 'master', vm_, opts, default={}, search_global=True ) ) return master
cohort = get_course_cohorts(self.course)[0]
self.assertNotIn('course', course_xml.attrib) self.assertNotIn('org', course_xml.attrib)
bin_path = bin_path.strip('"') if exe_args is not None: bin_path = '{0} {1}'.format(bin_path, exe_args)
dictionary = _update_dict(dictionary, B, A, verbose=verbose, random_state=random_state)
task_folder = task_service.GetFolder(location) task_definition = task_folder.GetTask(name).Definition triggers = task_definition.Triggers
if app: if dmg: cmd = 'ls -d *.app' out = __salt__['cmd.run'](cmd, cwd=mount_point, python_shell=True)
if field.primary_key: continue
world.css_click(button_class) perform_action_in_plugin(action)
return HttpResponseBadRequest(u'The field {} is required.'.format(err.message))
self.q(css="#verify_now_button").click() PaymentAndVerificationFlow(self.browser, self._course_id, entry_point='verify-now').wait_for_page()
g = GaussianMixture(n_components=n_components, n_init=1, max_iter=2, reg_covar=0, random_state=random_state, warm_start=False) h = GaussianMixture(n_components=n_components, n_init=1, max_iter=1, reg_covar=0, random_state=random_state, warm_start=True)
from __future__ import absolute_import
filter_sequence_ui_event = lambda event: event.get('name', '').startswith('edx.ui.lms.sequence.')
from __future__ import absolute_import import pprint
(it is done to allow user to enter both /static/filename.srt and filename.srt)
for modulestore in self.modulestores: modulestore.close_connections()
return self.q(css='.wrapper-create-library').visible
self.assertEqual(len(exported_static_files), 1) self.assertTrue(filesystem.exists(expected_displayname)) self.assertEqual(exported_static_files[0], expected_displayname)
from salt.modules import composer from salt.exceptions import CommandExecutionError, CommandNotFoundError, SaltInvocationError
with check_mongo_calls(mongo_calls): _accessible_courses_summary_list(self.request)
version_guid = course_key.as_object_id(version_guid) return self.db_connection.get_structure(version_guid, course_key)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
X = iris.data[45:100, :] y = iris.target[45:100] solvers = ("lbfgs", "newton-cg", "liblinear") class_weight_dict = _compute_class_weight_dictionary(y)
module = self.descriptor._xmodule self.assertIsInstance(module, ErrorModule)
for module in module_store.modules[course_id].itervalues(): if module.location.category == parent_category: parents.append(module)
course_key = self.kwargs.get(self.lookup_field) if course_key is not None: self.kwargs[self.lookup_field] = CourseKey.from_string(course_key)
if wt_detached: tags_found = _git_tag_points_at(cwd, wt_head, user) if tags_found: wt_ptr['tags'] = tags_found
if self.lr_schedule == 'invscaling': self.learning_rate = (float(self.learning_rate_init) / (time_step + 1) ** self.power_t)
top_idx = set(component.argsort()[-3:][::-1]) assert_true(tuple(sorted(top_idx)) in correct_idx_grps)
AFFILIATE_COOKIE_NAME = ENV_TOKENS.get('AFFILIATE_COOKIE_NAME', AFFILIATE_COOKIE_NAME)
self.cohort_default_student_username = "cohort_default_student" self.cohort_default_student_email = "cohort_default_student@example.com" StudioAutoAuthPage( self.browser, username=self.cohort_default_student_username, email=self.cohort_default_student_email, no_login=True ).visit()
import salt.utils import salt.utils.mac_utils from salt.exceptions import SaltInvocationError
lookup_tag = inputtypes.registry.get_class_for_tag
url = reverse('activate', kwargs={'key': activation_key}) self.assert_request_status_code(200, url) self.assertTrue(User.objects.get(email=email).is_active)
import logging import sys
clf = svm.SVC(kernel='linear', probability=True, random_state=0) probas_pred = clf.fit(X[:half], y[:half]).predict_proba(X[half:])
request.POST['queuekey'] = fake_key self.mock_module.handle_ajax.assert_called_once_with(self.dispatch, request.POST)
if flip_y >= 0.0: flip_mask = generator.rand(n_samples) < flip_y y[flip_mask] = generator.randint(n_classes, size=flip_mask.sum())
import salt.utils
self.check_event_response_by_key('handle_vote', resource, 'newVotes', test_case['new_votes'])
CourseEnrollment.enroll(user, course_key=course.location.course_key) self.assertFalse(user.badgeassertion_set.all())
return self.filter_by(data, "id", note_id)
import logging import json from lxml import etree
status_headings = sorted( set([status for course in cert_data for status in cert_data[course]]) )
coffee = cls.js.setdefault('coffee', []) js = cls.js.setdefault('js', [])
treedic = {} treedic['1'] = _get_final_tree(s1) treedic['2'] = _get_final_tree(s2)
self.enrollment.delete()
return self.q(css="div.problem p").text
import integration
label_spread = label_propagation.LabelSpreading(kernel='knn', alpha=1.0) label_spread.fit(X, labels)
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains, with_system_user ) ensure_in_syspath('../../')
assert_equal(_dynamic_max_trials(1, 100, 10, 0), 0) assert_equal(_dynamic_max_trials(1, 100, 10, 1), float('inf'))
from __future__ import print_function from __future__ import absolute_import
assert_equal(X.indptr.shape[0], 7) assert_equal(X.shape[0], 6) assert_equal(X.shape[1], 22)
from __future__ import absolute_import import libcloud.security import platform import os
if self.signal_handler and bulk_ops_record.has_library_updated_item: self.signal_handler.send("library_updated", library_key=library_id) bulk_ops_record.has_library_updated_item = False
content = content or SRT_content srt_file = tempfile.NamedTemporaryFile(suffix=".srt") srt_file.content_type = 'application/x-subrip; charset=utf-8' srt_file.write(content) srt_file.seek(0) return srt_file
try: length = int(self.headers.getheader('content-length')) except (TypeError, ValueError): return "" else: return self.rfile.read(length)
f_init = compile_f_init() f_step = compile_f_step() self._compiled_cache = (state, indices, f_init, f_step) return self._compiled_cache[2:]
sorted_grid_scores = list(sorted(search.grid_scores_, key=lambda x: x.mean_validation_score)) best_score = sorted_grid_scores[-1].mean_validation_score assert_equal(search.best_score_, best_score)
self.xblock_keys = [self.course.location]
self.assertIsInstance(result_dict['task_id'], unicode) self.assertIsInstance(result_dict['time'], float) self.assertTrue(result_dict['time'] > 0.0)
if fit_intercept: grad[-1] = z0.sum()
'dummy_publisher': bool,
if self.cohort_config is None: return [] else: return self.cohort_config.get("auto_cohort_groups", [])
self.assertNotContains(resp, '<section class="university-partners university-partners2x6">')
bandwidth = estimate_bandwidth(X, n_samples=200) assert_true(0.9 <= bandwidth <= 1.5)
raise NotImplementedError("Not used")
mono_shape = shape[:s_index] + (1, ) + shape[(s_index + 1):]
@wraps(LiveMonitorMsg.get_response) def get_response(self): return ChannelListResponse()
labels, y = np.unique(y, return_inverse=True)
AccessTestData(partition_groups={1: 3, 2: 3}, xblock_access={1: [1, 2], 2: [1, 2]}),
self.assert_login_response_in_pipeline_looks_correct(student_views.signin_user(strategy.request))
pass
math_interpreter.check_variables(all_variables, all_functions)
self._create_course_unit(subtitles=True) self.video.show_captions() self.video.focus_caption_line(2) self.assertTrue(self.video.is_caption_line_focused(2))
changes = __salt__['pkg.install'](name, refresh=False, fromrepo=fromrepo, skip_verify=skip_verify, pkgs=targeted_pkgs, **kwargs)
return CreditEligibility.is_user_eligible_for_credit(course_key, username)
seq_css = 'ol#sequence-list>li>.nav-item>.sequence-tooltip' return self.q(css=seq_css).map(self._clean_seq_titles).results
from __future__ import absolute_import import os import random import string
from __future__ import unicode_literals
(['honor', 'verified', 'audit']),
CourseExportManager(modulestore, contentstore, course_key, root_dir, course_dir).export()
from __future__ import absolute_import import os
trans_tar = salt.client.ssh.state.prep_trans_tar( __context__['fileclient'], chunks, file_refs, __pillar__, id_=st_kwargs['id_'])
for y in clf.staged_predict(X_test): assert_equal(y.shape, y_pred.shape)
pkgs_str = ','.join([state_name for _, state_name in target_pkgs])
ret.update({host_name: {'Disks Added': eligible}})
message = self.serial.dumps(message)
return json.loads(self._cohorted_discussions)
from __future__ import absolute_import
evt1 = me.get_event(wait=0, tag='evt1', no_block=False) self.assertGotEvent(evt1, {'data': 'foo1'})
from salt.modules import sdb
from __future__ import absolute_import
from __future__ import absolute_import import os import sys import types import logging import traceback import multiprocessing import subprocess import json
alpha = np.mean(emp_cov ** 2) num = alpha + mu ** 2 den = (n_samples + 1.) * (alpha - (mu ** 2) / n_features)
__virtualname__ = 'win_iis'
win_shadow.__salt__ = {}
available_version = salt.utils.alias_function(latest_version, 'available_version')
self.key = key
self.prob2 = ItemFactory.create( parent_location=self.course.location, category='problem', display_name='untitled problem 2' )
self.X_topo_space = view_converter.topo_space
from __future__ import absolute_import
problem = new_loncapa_problem(xml_str, capa_system=self.capa_system)
self.make_course(textbooks=[IMAGE_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('book', book_index='fooey')
return run_multi_processes([cmd], out_log=out_log, err_log=err_log)
from __future__ import absolute_import
assert False
return '', 'Password authentication failed', 254
return self.opts['timeout']
return self.find_css('.signatory-panel-body .signatory-name-value').first.text[0]
datasets = list(datasets[label] for label in data_subsets.keys()) if len(datasets) == 1: datasets, = datasets
'corsheaders', 'cors_csrf',
assert_true(world.css_contains_text(problem_css, category))
FEATURES['ENABLE_CSMH_EXTENDED'] = True INSTALLED_APPS += ('coursewarehistoryextended',)
for group_name in groups or set():
import salt.ext.six as six
sys.path.insert(0, os.path.join( virtualenv.path_locations(env)[1], 'site-packages'))
from __future__ import absolute_import import json import logging import os.path import pprint import socket import urllib import yaml
self.submit_question_answer('p1', {'2_1': u'ⓤⓝⓘⓒⓞⓓⓔ'}) self.submit_question_answer('p2', {'2_1': 'Correct'})
clf = RandomForestClassifier(n_estimators=25) clf.fit(X_train_valid, y_train_valid) clf_probs = clf.predict_proba(X_test) score = log_loss(y_test, clf_probs)
from __future__ import absolute_import
return self.children()
VerificationCheckpoint.objects.create(course_id=self.course.id, checkpoint_location=self.checkpoint_midterm)
root_dir = path(mkdtemp_clean()) print 'Exporting to tempdir = {0}'.format(root_dir) export_course_to_xml(self.store, content_store, course.id, root_dir, 'test_export')
for chan_i in xrange(chans): channel = topo_X[..., chan_i] start_idx = foveate_channel(channel, rings, output, start_idx)
'ENABLE_DISCUSSION_SERVICE': True, 'ENABLE_TEXTBOOK': True,
store = modulestore() with store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course.id): store.publish(course.location, ModuleStoreEnum.UserID.test)
FEATURES['AUTOMATIC_AUTH_FOR_TESTING'] = True
return a
return provider_respond(server, openid_request, response, results)
def setUp(self): super(TestCourseActionStateManagerBase, self).setUp() self.course_key = CourseLocator("test_org", "test_course_num", "test_run")
from salt.ext.six import string_types
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, course_id=self.course_id, staff=False).visit()
msg = 'no signature found for builtin function {0!r}'.format(obj) raise ValueError(msg)
l = [] for mask in xrange(16): l.append(mlp.masked_fprop(inp, mask)) outsum = reduce(lambda x, y: x + y, l)
self.chap_1_handle = 0 self.chap_1_seq_1_handle = 1
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self.enroll_student(self.STUDENTS[0]['email'], self.STUDENTS[0]['password']) self.attempt_upload_file_and_verify_result(test_case, 'import_resources', self.initial_configuration)
import os import stat import itertools
after_created = attempt.created_at + timedelta(seconds=1) query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(after_created, query) self.assertEqual(result, attempt)
from __future__ import absolute_import import os import string import logging
self.prog_name = "{} {}".format(prog_name, subcommand) return super(TrackedCommand, self).create_parser(prog_name, subcommand)
import salt.utils
return self.q(css='.cohorts-state-section').visible or self.q(css='.new-cohort-form').visible
return wrap_message(result)
hastie_X, hastie_y = datasets.make_hastie_10_2(n_samples=20, random_state=1) hastie_X = hastie_X.astype(np.float32)
if 'emitatstartup' not in config: config['emitatstartup'] = True if 'onchangeonly' not in config: config['onchangeonly'] = False
problem_section = ItemFactory.create(parent_location=chapter.location, category='sequential', metadata={'graded': True, 'format': problem_section_format}, display_name=problem_section_name)
pass
self.user = UserFactory.build(username='test', email='test@edx.org') self.user.set_password('test_password') self.user.save()
course = def_ms.get_course(SlashSeparatedCourseKey('MITx', 'edx4edx', 'edx4edx'))
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
axis = uniques
batch_axis = self.output_space.get_batch_axis() return self.nonlin.cost(Y=Y, Y_hat=Y_hat, batch_axis=batch_axis)
REQUIRE_EXCLUDE = ("build.txt",)
self._check_params()
from __future__ import absolute_import
CELERY_ALWAYS_EAGER = True
service = _get_service(name) label = service['plist']['Label']
if superblock: result['superblock'] = super_(dev)
return XBlockFixtureDesc( 'problem', self.problem_name, data=self.factory.build_xml(**self.factory_kwargs), metadata={'rerandomize': 'always'} )
if self.serversonly: return ""
(count, violations_list) = _get_pep8_violations()
import logging
with patch('capa.responsetypes.LoncapaResponse.evaluate_answers') as mock_evaluate_answers: mock_evaluate_answers.return_value = CorrectMap(CapaFactory.answer_key(), 'correct') result = module.rescore_problem()
import salt.ext.six as six
global_admin = AdminFactory() for role in (CourseStaffRole, CourseInstructorRole): auth.add_users(global_admin, role(course.id), user)
if retcode_sv != 0: os.unlink(os.path.join([_service_path(name), name])) return False return True
self._block_data_map = defaultdict(_BlockData)
assert_false(hasattr(seq, 'attempts'))
if not position: position = get_rule_handle(table, chain, rule, family)
xblock = self.store.create_item( self.user_id, test_course.id, 'vertical', block_id='test_vertical' )
multioutput = None
serializer = None
latex_interpreter = ParseAugmenter(math_expr, case_sensitive) latex_interpreter.parse_algebra()
modulestore().update_item(course_updates, user.id)
self.assertNotEqual(original_problem, module.lcp)
if library_key_string: return _display_library(library_key_string, request)
print("Fitting ExtraTreesClassifier on faces data with %d cores..." % n_jobs) t0 = time() forest = ExtraTreesClassifier(n_estimators=1000, max_features=128, n_jobs=n_jobs, random_state=0)
elif not yield_descendants_of_unyielded and not any(yield_results[parent] for parent in parents): continue
if n_features > 1: X = np.hstack([X, np.random.randn(n_samples, n_features - 1)]) return X, y
'id': unicode(location)
bulk_ops_record.unnest()
if taps: if not isinstance(taps, list): taps = [taps]
self.track_selection_page.visit()
if instance_id is None: return { 'Error': 'A valid instance_id or resource_id was not specified.' }
cached_hash_file = __salt__['cp.cache_file'](source_hash, saltenv)
import logging
params.update(body) return params
continue
stats_line = '' stats_line = outs.split('\r\n')[1]
paid_course = CourseFactory.create() CourseModeFactory.create(course_id=paid_course.id, min_price=50, mode_slug=CourseMode.HONOR) CourseInstructorRole(paid_course.id).add_users(self.instructor) return paid_course
return _delete_entrance_exam(request=request, course_key=course_key)
result = api.get_credit_providers(['fake_provider_id']) self.assertEqual(result, [])
ret = {} for row in _response['rows']: jid = row['id'] if not salt.utils.jid.is_jid(jid): continue
self.logout()
X[:, j] = np.hstack((v, z, p))
with self.assert_logged(r'SafeCookieData .* is not bound to user'): yield
self.thread_page_1.click_and_open_thread(thread_id=self.thread_ids[1]) self.assertTrue(self.thread_page_2.is_browser_on_page())
block = self._add_simple_content_block() with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
cache.delete(key)
response = _query('linode', 'boot', args={'LinodeID': linode_id, 'ConfigID': config_id})['DATA'] boot_job_id = response['JobID']
self.assertContains(resp, 'This is a Test Microsite footer')
raise NotImplementedError()
env: /path/to/virtualenv/
return u"//{}/{}/{}".format(settings.CMS_BASE, page, unicode(course.id))
master, self.pub_channel = yield self.eval_master(opts=self.opts)
test_deviance = np.zeros((params['n_estimators'],), dtype=np.float64)
def from_json(self, values): return [UserPartition.from_json(v) for v in values] def to_json(self, values): return [user_partition.to_json() for user_partition in values]
beginning_of_unix_time = datetime(1970, 1, 1)
TASK_STATE_UNKNOWN = 0 TASK_STATE_DISABLED = 1 TASK_STATE_QUEUED = 2 TASK_STATE_READY = 3 TASK_STATE_RUNNING = 4
instance_map = weakref.WeakKeyDictionary()
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
from __future__ import absolute_import
subset_choices = [correct_choice] rng.shuffle(incorrect_choices) subset_choices += incorrect_choices[:num_incorrect] rng.shuffle(subset_choices)
self._assert_cert_status(self.courses[0].id, self.user, CertificateStatuses.notpassing)
course_key = CourseKeyField() class Meta(object): model = CreditCourse exclude = ('id',)
import integration from salt.output import display_output import salt.config
return s
self.assertEqual(search_results_page.header_name, 'Team Search') self.assertEqual( search_results_page.header_description, 'Showing results for "{search_query}"'.format(search_query=search_query) )
import salt.ext.six as six try: import msgpack except ImportError:
self.answer_problem(correct=False) self.problem_page.click_check() self.wait_for_status('incorrect')
self.client.get( pipeline.get_login_url(self.provider.provider_id, pipeline.AUTH_ENTRY_LOGIN))
__func_alias__ = { 'list_': 'list' }
clone_spec = vim.vm.CloneSpec( template=template, location=reloc_spec, config=config_spec )
wrappers.insert(0, wrap_with_license)
from __future__ import absolute_import import socket import os.path
obj.is_active = False obj.save()
class MyEstimator(BaseEstimator):
import salt.utils import salt.utils.templates import salt.utils.validate.net import salt.utils.odict
if scope != Scope.user_state: raise ValueError("Only Scope.user_state is supported") raise NotImplementedError()
location = u'i4x://edX/DemoX/edx-reverification-block/invalid_location' checkpoint = VerificationCheckpoint.get_or_create_verification_checkpoint(self.course.id, location)
config_course_cohorts( course, is_cohorted=True, auto_cohorts=[] )
__virtualname__ = 'pkg'
default_tolerance = '0.001%'
return self.find_css("#start_date").first.attrs('value')[0]
dquality_dir = (Env.REPORT_DIR / "diff_quality").makedirs_p()
cert_set = ExampleCertificateSet.objects.create(course_key=self.COURSE_KEY) return ExampleCertificate.objects.create( example_cert_set=cert_set, description=self.DESCRIPTION, template=self.TEMPLATE )
empty_distribution = grades.answer_distributions(self.course.id)
return microsite.get_value( 'COURSE_ABOUT_VISIBILITY_PERMISSION', settings.COURSE_ABOUT_VISIBILITY_PERMISSION )
self._check_linkedin_visibility(False)
return (self.get_input_space(), self.get_input_source())
if not hasattr(self, 'mask_weights'): self.mask_weights = None if not hasattr(self, 'max_col_norm'): self.max_col_norm = None
return redirect(reverse('cas-login'))
super(AccountSettingsPageTest, self).setUp() self.full_name = XSS_INJECTION self.username, self.user_id = self.log_in_as_unique_user(full_name=self.full_name) self.visit_account_settings_page()
return urljoin(self.public_service_url, '/api/v1/')
access_key_id, secret_access_key, token = aws.creds(provider)
self.user.is_active = user_is_active
matched = match.group(0) if matched == ';;': return ';' elif matched == ';_': return '/' else: return matched
cmd = '{0} {1}'.format(cmd, name)
ticket_url = self._zendesk_instance.create_ticket(data=ticket) return zendesk.get_id_from_url(ticket_url)
if name not in list_folders(location): return True else: return False
mean_square_grad = sharedX(param.get_value() * 0.)
if bool(actual_data) != bool(data): ret.update({item: {'old': actual_data, 'new': data}})
def __repr__(self): return _build_repr(self)
@context_cache def _test_refill_cache(comparison_context): self.assertEqual(__context__, comparison_context)
from salt import cloud, defaults
value = anonymous_id_for_user(data['user'], None) return value
from __future__ import print_function, with_statement
selected = block_keys['selected']
if self.expires_at and timezone.now() > self.expires_at: return False return bool(self.entity_id and self.sso_url and self.public_key)
try:
epoch_num = 6 termination_criterion = EpochCounter(epoch_num)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
from salt.modules import linux_acl from salt.exceptions import CommandExecutionError
self.assertEqual(course_date, expected_course_date)
from django.utils.translation import get_language
problem = self.store.get_item(problem_location) self.assertEquals(problem.display_name, expected_display_name)
if name: cmd = '{0} {1}'.format(cmd, name)
evaluate_prerequisite(self.course, self.prob1.location, self.user.id) self.assertFalse(mock_module_score.called)
n_labels = 15 n_samples = 1000 n_folds = 5
days_good_for = settings.VERIFY_STUDENT["DAYS_GOOD_FOR"] return self.created_at + timedelta(days=days_good_for)
if self.min_weight_fraction_leaf != 0. and sample_weight is not None: min_weight_leaf = (self.min_weight_fraction_leaf * np.sum(sample_weight)) else: min_weight_leaf = 0.
elif (accepted_count * 4) >= mof_s: level = logging.INFO
return self.q( css=self._bounded_selector("#cohort-management-group-add-students") ).results[0].get_attribute("value")
_DELETED_SENTINEL = object()
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
draft, split = range(2)
n_samples = K.shape[0] n_targets = y.shape[1]
self._verify_split_test_import( 'split_test_copy_with_draft', 'split_test_module_draft', 'fb34c21fe64941999eaead421a8711b8', {"0": '9f0941d021414798836ef140fb5f6841', "1": '0faf29473cf1497baa33fcc828b179cd'}, )
self.course.tabs = self.all_valid_tab_list
self.browser.refresh() self.wait_for_page()
from config_models.models import cache
config = XDomainProxyConfiguration.current() config.enabled = is_enabled if whitelist: config.whitelist = "\n".join(whitelist) config.save() cache.clear()
grandfathered_student = UserFactory() grandfathered_student.date_joined = timezone.now()
return len(self.q(css='nav.course-navigation a.chapter'))
if best_doublecolon_end == len(hextets): hextets += [''] hextets[best_doublecolon_start:best_doublecolon_end] = [''] if best_doublecolon_start == 0: hextets = [''] + hextets
create_account(self.USERNAME, self.PASSWORD, self.EMAIL)
EmptyPromise( lambda: self.field(field_id) is not None, "Field with id \"{0}\" is in DOM.".format(field_id) ).fulfill()
x_scaled = assert_no_warnings(scale, x) assert_array_almost_equal(scale(x), np.zeros(8))
LogoutPage(self.browser).visit() self._auto_auth("STAFF_TESTER", "staff101@example.com", True) self.course_outline.visit()
from salt.utils import format_call from salt.exceptions import SaltInvocationError
enrolled_students = enrolled_students[offset: offset + MAX_STUDENTS_PER_PAGE_GRADE_BOOK]
#[group for groups in ['external_auth'][extra['eauth']]]):
template = self.cleaned_data["plain_template"] self._validate_template(template) return template
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
self.assertFalse(self._has_changes(published_xblock.location))
parser.add_argument('repository_url') parser.add_argument('--directory_path', action='store') parser.add_argument('--repository_branch', action='store')
try: structure = CourseStructure.objects.get(course_id=course_key) structure.discussion_id_map_json = None structure.save() except CourseStructure.DoesNotExist: pass
super(TestSplitTestVert, self).setUp()
try: import boto import boto3 import boto.exception import boto3.session
from __future__ import unicode_literals
enrollment_start = DateTimeField(null=True) enrollment_end = DateTimeField(null=True) enrollment_domain = TextField(null=True) invitation_only = BooleanField(default=False) max_student_enrollments_allowed = IntegerField(null=True)
params[ '{0}BlockDeviceMapping.{1}.DeviceName'.format( spot_prefix, dev_index ) ] = rd_name
orig_view_name = None if hasattr(self, '_view_name'): orig_view_name = self._view_name self._view_name = None rt_repr = super(TestModuleSystem, self).__repr__() self._view_name = orig_view_name return rt_repr
time.sleep(self.server.config.get('time_to_response', self.DEFAULT_DELAY_SEC))
self.verify_expected_team_id(new_teams[0], 'the-best-team') self.verify_expected_team_id(new_teams[1], 'the-best-team') self.assertNotEqual(new_teams[0]['id'], new_teams[1]['id'])
return realpath(abspath(rpath))
n_samples = X.shape[0] X_train, y_train = X[:n_samples / 2], y[:n_samples / 2] X_test, y_test = X[n_samples / 2:], y[n_samples / 2:]
from salttesting import skipIf, TestCase from salt.exceptions import SaltInvocationError from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, Mock, NO_MOCK, NO_MOCK_REASON, patch )
if not salt.utils.is_darwin(): return False, 'Not Darwin'
assert_almost_equal(s[:k], sap, decimal=3)
datasource_properties = {'connection-url': 'jdbc:/old-connection-url'} ds_status = {'created': False}
return os.lchown(path, uid, gid)
self.create_mode('no-id-professional', 'no-id-professional', min_price=5) self.assertTrue(CourseMode.has_payment_options(self.course_key))
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
low['__jid__'] = jid low['__user__'] = user low['__tag__'] = tag
return StateRequisite(requisite, self.module, id_)
import yaml import msgpack import salt.ext.six as six if salt.utils.is_windows(): import win32api
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, max_attempts=0, done=True) self.assertTrue(module.should_show_reset_button())
self.register_page.click_third_party_dummy_provider()
from xmodule.modulestore.mongo.draft import DraftModuleStore as DraftMongoModuleStore
indent[depth] = start[1]
with self.store.bulk_operations(key): course = self.store.get_course(key) return course
super(BadImplementationAbstractEnrollmentReportProvider, self).get_enrollment_info(user, course_id)
actual_explicitly_set_fields = block.get_explicitly_set_fields_by_scope(scope=scope) assertion = self.assertIn if should_be_set else self.assertNotIn for field in expected_explicitly_set_fields: assertion(field, actual_explicitly_set_fields)
if d_yard in self.lane_stack.value.nameRemotes: self.lane_stack.value.transmit(msg, self.lane_stack.value.nameRemotes[d_yard].uid) return return
__virtualname__ = 'docker_events'
_('Git Commit'), _('Last Change'), _('Last Editor')],
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course_key))
with salt.utils.fopen(path_test, 'r') as fp_test_: self.assertTrue((sum(1 for _ in fp_test_) == 1))
raise ValueError('Timeout cannot be a float')
def _translate_newlines(self, data): if data is None or not data: return return data.replace('\r\n', os.linesep)
icrv_blocks = get_course_blocks(course_key, VERIFICATION_BLOCK_CATEGORY)
X_blobs, _ = make_blobs(n_samples=100, centers=10, random_state=0) X_blobs = sparse.csr_matrix(X_blobs)
minions_remaining = pub_data['minions']
import salt.utils
}
__virtualname__ = 'service'
GRAINS_CACHE = {} DETAILS = {}
raise ItemNotFoundError(course_key)
grader_payload = xqueue_body.get('grader_payload')
regressor.n_components = 1
eps = 0.8 min_samples = 10 metric = distance.euclidean core_samples, labels = dbscan(X, metric=metric, eps=eps, min_samples=min_samples, algorithm='ball_tree')
with mock_create_refund(status=500): self.send_signal() self.assertTrue(mock_log_exception.called)
parent_map = [[] for _ in children_map] for parent, children in enumerate(children_map): for child in children: parent_map[child].append(parent) return parent_map
self.split_test_module.user_partition_id = 999
if is_css_present(css_selector): return retry_on_exception(lambda: css_find(css_selector)[index].value) else: return ""
from __future__ import absolute_import
ret.setdefault('updated tags', []).append(ref_name)
course = CourseFactory.create(org='edX', course='999') self.assertEquals(course_image_url(course), '/c4x/edX/999/asset/{0}'.format(course.course_image))
import_course_from_xml( draft_store, 999, DATA_DIR, ['test_import_course'], static_content_store=content_store, do_import_static=False, verbose=True )
correct_error_message_text = 'No playable video sources found.' self.assertIn(correct_error_message_text, self.video.error_message_text)
optional_fields = params.get('fields', '').split(',') return DEFAULT_FIELDS + [field for field in optional_fields if field in OPTIONAL_FIELDS]
verticals = self.store.get_items(course_id, qualifiers={'category': 'vertical'})
train(os.path.join( pylearn2.__path__[0], 'train_extensions/tests/live_monitor_test.yaml' ))
return SurveyAnswer.do_survey_answers_exist(self, user)
for block in blocks: for field in fields: self.assertEquals( block_structure.get_xblock_field(block.location, field), block.field_map.get(field), )
if attr == 'parent_sequential_url': attr = 'parent_url' xml_attrs[attr] = val
self.assertIn( 'Service not found', self.run_function('service.list', ['spongebob']))
self.distribution.salt_installing_m2crypto_windows = True self.run_command('install-m2crypto-windows') self.distribution.salt_installing_m2crypto_windows = None
self.assertEqual(len(details['course_modes']), 3) self.assertEqual(details, cached_details)
header = cgi.parse_header(self.request.headers['Content-Type']) value, parameters = header return ct_in_map[value](data)
self.xml_data = "about page 463139"
self._navigate_to_course_unit_page() self.assertTrue(self.video.is_controls_visible())
self.animal_partition.groups.pop() self.color_partition.groups.pop()
args.extend(arg)
from crum import get_current_request
prob /= prob.sum(axis=1).reshape((prob.shape[0], -1)) return prob
import salt.ext.six as six HAS_LIBS = False try: import splunklib.client import requests HAS_LIBS = True except ImportError: pass
templates_path = ['.templates']
X, y = make_regression( n_samples=n_samples, n_features=n_features, random_state=0, noise=0.05)
self._init_socket()
self.user = UserFactory.create() self.client.login(username=self.user.username, password='test') CourseEnrollmentFactory.create(user=self.user, course_id=self.course_key)
NOT_SYMMETRIC_METRICS = [ "explained_variance_score", "r2_score", "confusion_matrix",
from __future__ import absolute_import import os import shutil
if not history_entries: raise self.DoesNotExist()
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, Mock, patch
X_scaled_back = scaler.inverse_transform(X_scaled) assert_array_almost_equal(X_scaled_back, X)
'rule': Rules.python_interpolate_html
'mine_enabled': bool,
import salt.ext.six as six try: import zmq HAS_ZMQ = True except ImportError: HAS_ZMQ = False
y = np.array([[y_i] for y_i in y]) assert min(y) == 0 assert max(y) == 2
'master_alive_interval': int,
if "language_proficiencies" in update: old_language_proficiencies = legacy_profile_serializer.data["language_proficiencies"]
tps = np.r_[0, tps] fps = np.r_[0, fps] thresholds = np.r_[thresholds[0] + 1, thresholds]
if output_pixel_vals: channel_defaults = [0, 0, 0, 255] else: channel_defaults = [0., 0., 0., 1.]
_infinitedict = lambda: collections.defaultdict(_infinitedict)
with mock.patch.dict('django.conf.settings.FEATURES', {'DISABLE_COURSE_CREATION': True}): self.assert_created_course()
self.assertEqual(len(outbox), 1)
entries = {} for name, overrides in six.iteritems(mapped): overrides.setdefault('name', name) entries[name] = overrides map_[profile] = entries continue
hash_val = ",".join([ "{0}={1}".format(key, post_params[key]) for key in signed_fields ]) public_sig = processor_hash(hash_val)
import salt.loader
resp = self.client.get('/') self.assertEqual(resp.status_code, 200) self.assertContains(resp, 'footer-openedx')
num_drafts = self._get_draft_counts(self.course) self.assertEqual(num_drafts, 0)
ps_shared_cache_1 = self._create_service(username, shared_cache) ps_shared_cache_2 = self._create_service(username, shared_cache)
y = column_or_1d(y, warn=True) _check_numpy_unicode_bug(y) self.classes_ = np.unique(y) return self
raise ValueError("No point was within bandwidth=%f of any seed." " Try a different seeding strategy \ or increase the bandwidth." % bandwidth)
resp = self.client.put( '/shoppingcart/payment_fake', data="failure", content_type='text/plain' ) self.assertEqual(resp.status_code, 200)
time.sleep(1)
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
import salt.ext.six as six from salt.exceptions import SaltClientError
country_model = apps.get_model("embargo", "Country") for country_code, __ in list(countries): country_model.objects.get_or_create(country=country_code)
from __future__ import unicode_literals
from __future__ import absolute_import import logging
return False
import integration import salt.utils
tracker.send(event)
class_ = load_function(engine) if issubclass(class_, ModuleStoreDraftAndPublished): options['branch_setting_func'] = lambda: ModuleStoreEnum.Branch.draft_preferred return class_( doc_store_config=doc_store_config, contentstore=contentstore, signal_handler=signal_handler, **options )
try:
from salttesting import TestCase from salttesting.mock import Mock, patch, mock_open
jll = self._joint_log_likelihood(X) return self.classes_[np.argmax(jll, axis=1)]
ip_int ^= self._ALL_ONES try: return self._prefix_from_ip_int(ip_int) except ValueError: self._report_invalid_netmask(ip_str)
self.toggle_button('done_0', {}, False) self.toggle_button('done_1', {}, True)
return cls.objects.filter( course__course_key=course_key, course__enabled=True, username=username, deadline__gt=datetime.datetime.now(pytz.UTC), ).exists()
return ( 'name', 'enabled', 'backend_name', 'secondary', 'skip_registration_form', 'skip_email_verification', 'change_date', 'changed_by', 'edit_link', )
self.assertEqual(self.loader[self.module_key](), self.count) self.loader.clear() self.assertNotIn(self.module_key, self.loader)
form_desc.override_field_properties( "password", default="", field_type="hidden", required=False, label="", instructions="", restrictions={} )
monitor_lr2 = MonitorBasedLRAdjuster(channel_name=dummy)
import salt.config from salt.utils.schedule import Schedule
max_scores_cache = MaxScoresCache("test_max_scores_cache") max_scores_cache.fetch_from_remote(self.locations)
this_yaml = test_yaml_which_set % {'which_set': 'bogus'} try: yaml_parse.load(this_yaml) raise AssertionError except ValueError: pass
y_pred_proba = clf.predict_proba(X) y_pred_log_proba = clf.predict_log_proba(X) assert_array_almost_equal(np.log(y_pred_proba), y_pred_log_proba, 8)
with self.assertRaises(RequestAlreadyCompleted): api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO['username'])
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
return ACCESS_GRANTED
if salt.utils.is_windows() and HAS_DEPENDENCIES: return True return (False, "Module win_wua: module has failed dependencies or is not on Windows client")
self.course_info_page.visit() self.tab_nav.go_to_tab('Course') self.course_nav.go_to_section('Test Section', 'Test Subsection')
with descriptor.runtime.export_fs.open('course/{url_name}.xml'.format(url_name=url_name)) as f: course_xml = etree.fromstring(f.read())
self.store.delete_course(self.course.id, self.user.id)
value = _fetch_option(cfg, ret_config, virtualname, options[option])
assert_raises(ValueError, scale, X_csr, with_mean=True) assert_raises(ValueError, StandardScaler(with_mean=True).fit, X_csr)
with self.assertRaises(CreditRequestNotFound): api.update_credit_request_status("invalid_uuid", self.PROVIDER_ID, "approved")
from __future__ import absolute_import import os import shutil import socket
classes = np.unique(iris.target) clf_samme = prob_samme = None
topo = self.train.get_batch_topo(1) assert topo.ndim == 4
try: import wmi import salt.utils.winapi except ImportError: pass
todelete = [] for key in repo_opts: if repo_opts[key] != 0 and not repo_opts[key]: del repo_opts[key] todelete.append(key)
prefix = prefix or '=' targets.append('{0}{1}{2}'.format(param, prefix, verstr))
ret = self.run_function('shadow.info', [TEST_USER]) self.assertEqual(ret['name'], TEST_USER)
self.assertTrue(self._is_valid_key(key), msg="Failed for unicode character {0}".format(unicode_char))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
dbkey['run'] = location.run content_id = unicode(location.for_branch(None))
self.load_courses()
inject_globals['__env__'] = str(cdata['kwargs']['env'])
X = 3 * diabetes.data
score = estimator.predict_proba(X)[:, 1]
output_emails = [row["email"] for row in output] for email in output_emails: self.assertIn(email, output_emails)
scores = [x[1] for x in grid.grid_scores_] scores = np.array(scores).reshape(len(C_range), len(gamma_range))
return self.page.paginator.num_pages
kwargs.update(kwargs.pop('metadata', {})) default_store_override = kwargs.pop('default_store', None)
self.value = {}
import logging
if 'disk' in vm_: log.warning('The "disk" option is not supported for LXC hosts and was ignored')
cart = Order.get_cart_for_user(user=student) CertificateItem.add_to_order(cart, course_id, 50, 'verified') cart.purchase()
reg = RidgeClassifier(class_weight={1: 0.001}) reg.fit(X, y)
af = AffinityPropagation(affinity="euclidean") labels = af.fit_predict(X) labels2 = af.predict(X) assert_array_equal(labels, labels2)
self.wait_for_ajax()
import salt.config as config from salt.exceptions import ( SaltCloudConfigError, SaltCloudExecutionFailure, SaltCloudExecutionTimeout, SaltCloudNotFound, SaltCloudSystemExit ) from salt.utils import is_true
if discussion_id is not None: default_query_params['commentable_id'] = discussion_id if get_team(discussion_id) is not None: default_query_params['context'] = ThreadContext.STANDALONE
self._assert_course_verification_status(VERIFY_STATUS_APPROVED)
for i in range(3):
world.browser.driver.execute_script(script, str(text)) world.wait_for_ajax_complete()
apikey: asdff7896asdh789 sharedsecret: saltybacon driver: gogrid
self.loader = LazyLoader([self.module_dir], self.opts, tag='module')
if name not in nodes: return {} salt.utils.cloud.cache_node(nodes[name], __active_provider_name__, __opts__) return nodes[name]
#default_role = None
estimator.fit(X, y) coef, intercept, dual_gap = (estimator.coef_, estimator.intercept_, estimator.dual_gap_)
copy_or_rename_transcript(new_name, old_name, item, user=request.user)
bookmark_data = self.get_bookmark_data(self.vertical_4) bookmark, __ = Bookmark.create(bookmark_data) bookmark_data['display_name'] = self.vertical_4.display_name_with_default self.assert_bookmark_model_is_valid(bookmark, bookmark_data)
self.forward_events = tornado.ioloop.PeriodicCallback(self._forward_events, self.opts['syndic_event_forward_timeout'] * 1000, io_loop=self.io_loop) self.forward_events.start()
os.makedirs(name)
wua_found = win32com.client.Dispatch('Microsoft.Update.UpdateColl')
self.add_credit_course() CourseFactory.create(org='edX', number='DemoX', display_name='Demo_Course')
log.debug('generated search string: {0}'.format(search_string)) return self.Search(search_string)
from __future__ import unicode_literals
return '{0} not found'.format(name)
from __future__ import absolute_import
if salt.utils.test_mode(test=test, **kwargs): opts['test'] = True else: opts['test'] = __opts__.get('test', None)
if org_to_include and course_overview.location.org != org_to_include: continue
return True
from salt.pillar import hg_pillar HGLIB = hg_pillar.hglib
response['X-XRDS-Location'] = get_xrds_url('xrds', request) return response
names_t_actual = sel.transform([feature_names]) assert_array_equal(feature_names_t, names_t_actual.ravel())
self._assert_credit_status("pending")
try: import netaddr HAS_NETADDR = True except ImportError as e: HAS_NETADDR = False
random_state = check_random_state(0) y_true = random_state.randint(0, 2, size=(n_samples, )) y_pred = random_state.randint(0, 2, size=(n_samples, ))
final_exit = 1
import salt.utils
clf = MyEstimator(empty=np.array([])) clf2 = clone(clf) assert_array_equal(clf.empty, clf2.empty)
urlpatterns += (url(r'^%s$' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),)
return self.pdf.current_page_count() == 1
mode = (0o0777 ^ mask) & 0o0666 os.chmod(img_dest, mode)
X, y = make_blobs() branching_factor = 9
self.assertFalse(zendesk_mock_class.return_value.mock_calls) self.assertFalse(datadog_mock.mock_calls)
self.assertRaises(KeyError, cd.__getitem__, 'foo')
cart.start_purchase()
self.store.publish(self.vertical_x1a, self.user_id) self.store.publish(problem_location, self.user_id)
for tree, dataset in product(REG_TREES, ["boston", "reg_small"]): if tree in SPARSE_TREES: yield (check_sparse_input, tree, dataset, 2)
return block_structure.get_transformer_block_field( block_key, cls, cls.MERGED_VISIBLE_TO_STAFF_ONLY, False )
reg_units = theano.tensor.abs_(model.encode(X)).sum(axis=1).mean()
visbias_a = visbias
'tcp_pull_port': int,
pass
pass
return 'dval'
X_dense[3, :] = 0.0
__virtualname__ = 'yaml'
import cgi import yaml import tornado.httpserver import tornado.ioloop import tornado.web import tornado.gen from tornado.concurrent import Future from zmq.eventloop import ioloop import salt.ext.six as six
Y = np.array([0, 0, 0, 1])
try: import pycontrol.pycontrol as f5 HAS_PYCONTROL = True except ImportError: HAS_PYCONTROL = False
alpha = 1.5 beta = 0.75
self.assertEqual(self.store.get_modulestore_type( SlashSeparatedCourseKey('foo', 'bar', '2012_Fall')), default_ms )
from __future__ import absolute_import
for memmap in (self.X, self.y): memmap.flush() memmap.setflags(write=False)
xblocks = get_course_blocks(course_key, category) return xblocks
phi_aj = phi(a_j) derphi_aj = derphi(a_j)
return self.q(css="#prereq_min_score").visible
for block_key in block_structure.topological_traversal(): assert ( block_structure.get_transformer_block_field( block_key, cls, data_key, ) == cls._create_block_value(block_key, data_key) )
kwargs['user'] = str(kwargs['user']) return
if not self.q(css="input.proctored_exam").present: return False
from salt.modules import mac_group from salt.exceptions import SaltInvocationError, CommandExecutionError
if virtual is not True and module_name != virtual: log.trace('Loaded {0} as virtual {1}'.format( module_name, virtual ))
try:
from safe_lxml import defuse_xml_libs defuse_xml_libs()
locals().update(_mk_common_exceptions())
model.threshold = 1.0 assert_greater(X_transform.shape[1], model.transform(data).shape[1])
from salt.modules import poudriere
'MAX_ENROLLMENT_INSTR_BUTTONS': 200,
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
with self.assertRaises(IndexError): mocked_request = self.get_signed_grade_mock_request(namespace_lti_v1p1=False) self.xmodule.parse_grade_xml_body(mocked_request.body)
redirect_url = embargo_api.redirect_if_blocked( course_key, user=request.user, ip_address=get_ip(request), url=request.path ) if redirect_url: return redirect(redirect_url)
honor_mode = CourseMode.mode_for_course(course_key, CourseMode.HONOR) audit_mode = CourseMode.mode_for_course(course_key, CourseMode.AUDIT)
'reactor': list,
assert_raises(ValueError, chi2_kernel, [[0, 1]], [[.2, .2, .6]])
return normalize_key_for_search(structure_key)
self.create_credentials_config() self.create_programs_config()
assert_bad({"files": [{"content_type": "video/mp4"}]})
#epub_identifier = ''
X_small = X[:, :4] lw = LedoitWolf() lw.fit(X_small) shrinkage_ = lw.shrinkage_
self.run_function('cp.get_url', [TEST_PKG_URL, TEST_PKG])
default_store = os.environ.get('DEFAULT_STORE', 'draft') return CourseLocator(org, number, run, deprecated=(default_store == 'draft'))
log_func = log.debug if request.user.id is None else log.warning log_func(
return start(name)
return False
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
if cert_mode == CourseMode.CREDIT_MODE: cert_mode = CourseMode.VERIFIED
print cmd, logfile run_background_process(cmd, out_log=logfile, err_log=logfile, cwd=cwd)
opennebula.__active_provider_name__ = '' opennebula.__opts__ = {} VM_NAME = 'my-vm'
result = salt.utils.slack.query(function='message', api_key=api_key, method='POST', header_dict={'Content-Type': 'application/x-www-form-urlencoded'}, data=_urlencode(parameters), opts=__opts__)
state = models.TextField(null=True, blank=True)
syslog.syslog(facility | level, '{0}'.format(json.dumps(ret)))
new_state = __salt__['tuned.profile'](profile)
SECRET_KEY = "very_secret_bok_choy_key"
course = self.get_item_from_modulestore(self.usage_key) self.assertNotIn(chapter1_usage_key, course.children) self.assertIn(chapter2_usage_key, course.children)
sparse_classifier = AdaBoostRegressor( base_estimator=CustomSVR(), random_state=1 ).fit(X_train_sparse, y_train)
if not is_cross_domain_request_allowed(request): log.debug("Could not set cross-domain CSRF cookie.") return response
assert_almost_equal(np.std(y - np.dot(X, c)), 1.0, decimal=1)
def __init__(self, opts, io_loop=None): super(SAuth, self).__init__(opts, io_loop=io_loop)
raise NotImplementedError()
if self.contentstore: self.contentstore.delete_all_course_assets(course_key) super(ModuleStoreWriteBase, self).delete_course(course_key, user_id)
assert_almost_equal(metric(y1_sparse_indicator, y2_sparse_indicator), measure, err_msg="%s failed representation invariance " "between dense and sparse indicator " "formats." % name)
return default
sparse_results = sparse_classifier.staged_predict(X_test_sparse) dense_results = dense_classifier.staged_predict(X_test) for sprase_res, dense_res in zip(sparse_results, dense_results): assert_array_equal(sprase_res, dense_res)
inline_xml = kwargs.pop('inline_xml')
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON
try: socket.inet_pton(address_family, ip) except socket.error: return False
if not settings.FEATURES.get('EMBARGO'): return True
return self.q(css="div.problem section.inputtype div.partially-correct span.status").is_present()
f = client.stream.write(payload) self.io_loop.add_future(f, lambda f: True)
version = IntegerField()
if not is_request_in_microsite(): return return TEMPLATES_BACKEND.get_template(uri)
return (router, subnet)
pass
s_database = dbc
import integration
'mailing',
dynamath = [student_answers.get(k + '_dynamath', None) for k in idset]
import errno import logging import os import shutil
return 'shoppingcart/receipt.html'
cache.clear()
estimator.means_init = np.array([X_train[y_train == i].mean(axis=0) for i in range(n_classes)])
format = ugettext("DATE_TIME_FORMAT") if format == "DATE_TIME_FORMAT": format = DEFAULT_DATE_TIME_FORMAT
if recursive:
super(GroupConfigurationsListHandlerTestCase, self).setUp()
import salt.ext.six as six
if self._build_requests_plus_30_for_minus_30(): if self._user_requested_plus_30_skip(): self.event[u'requested_skip_interval'] = -30
self.dbm = dbm
return sparse.csr_matrix(self.coef_)
if 'repositories' not in excludes: repos = __salt__['pkg.list_repos']() if repos: data['repositories'] = repos
call_command("loaddata", "course_email_template.json")
field_dict.update(self._field_overrides.get(name, {}))
from __future__ import absolute_import import hashlib import logging import sys
param_grid = [param_grid]
if valid_function is False: if invalid_functions.get(fun) is None: invalid_functions.update({fun: []}) invalid_functions[fun].append(vm_name) continue
else: return func(self, *args, **kwargs)
try: try: func, args, kwargs = self._job_queue.get(timeout=1)
if old_value is not None: __salt__['file.sed'](makeconf, value, '', limit=var)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, patch)
for user in [UserFactory(), UserFactory(), UserFactory()]: render.get_module_for_descriptor( user, request, descriptor, field_data_cache, course.id, course=course )
if not is_credit_course(course_key): return
from __future__ import absolute_import import difflib import itertools import logging import os import shutil import sys import traceback from collections import Iterable, Mapping, defaultdict
response = self._get_page(payment_flow, course.id) self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS, PayAndVerifyView.MAKE_PAYMENT_STEP ) self._assert_requirements_displayed(response, [])
train = TFD(which_set='train') topo = train.get_batch_topo(1) assert topo.ndim == 4
from salt.exceptions import SaltInvocationError import salt.utils
return _write_js(output_root, _list_modules())
try: store = self._verify_modulestore_support(usage_key.course_key, 'get_block_original_usage') return store.get_block_original_usage(usage_key) except NotImplementedError: return None, None
self.wait_for_ajax()
script_element = rendered_html.find('script') self.assertEqual(None, script_element)
CourseModeFactory.create(course_id=self.COURSE_KEY, mode_slug='honor') CourseModeFactory.create(course_id=self.COURSE_KEY, mode_slug='verified')
super(NoneToEmptyManager, self).__init__()
repl = str(repl)
log.error( 'Unable to resolve %s from %s remote \'%s\' ' 'to either an annotated or non-annotated tag', tag_ref, self.role, self.id ) return None
X_transformed_parallel2 = fs_parallel2.transform(X) assert_array_equal( X_transformed.toarray(), X_transformed_parallel2.toarray() )
with patch('lms.djangoapps.verify_student.models.requests.post', new=mock_software_secure_post_unavailable): attempt = self.create_and_submit() assert_equals(attempt.status, "must_retry")
__virtualname__ = 'pkg'
return response
import salt.crypt import salt.payload import salt.master import salt.transport.frame import salt.utils.event import salt.ext.six as six from salt.utils.cache import CacheCli
return True
pass
with self.assertRaises(UnsupportedRevisionError): self.store.get_item(self.fake_location, revision=ModuleStoreEnum.RevisionOption.draft_preferred)
PIPELINE_COMPILE_INPLACE = True
binding_status = {'updated': False}
unbalanced = ImageFile(get_image('unbalanced')) self.assertRaises(ValidationError, validate_badge_image, unbalanced)
if 0 < passed_index <= len(course_update_items): course_update_item = course_update_items[passed_index - 1] course_update_item["status"] = CourseInfoModule.STATUS_DELETED course_update_items[passed_index - 1] = course_update_item
backends = self._reload_backends() self.assertEqual(len(backends), 1) tracker.send({}) self.assertEqual(backends.values()[0].count, 1)
if root_node is not None: visitor = OuterFormatVisitor(file_contents, results) visitor.visit(root_node) results.prepare_results(file_contents, line_comment_delim=self.LINE_COMMENT_DELIM)
FEATURES['ENABLE_TEAMS'] = True
if class_probability is None: class_prob_j = np.empty(shape=classes[j].shape[0]) class_prob_j.fill(1 / classes[j].shape[0]) else: class_prob_j = np.asarray(class_probability[j])
compress = 3
product = partial(reduce, operator.mul) return sum(product(len(v) for v in p.values()) if p else 1 for p in self.param_grid)
obj_view = service_instance.content.viewManager.CreateContainerView( container_ref, [obj_type], True)
if isinstance(val, string_types): if val.lower() == 'true': val = True elif val.lower() == 'false': val = False ret[key] = val
from __future__ import unicode_literals
_ = args _ = kwargs
if isinstance(block_locator.block_id, LocalId): self.local_modules[block_locator] = module
library_fixture.add_children( XBlockFixtureDesc("html", "Html1"), XBlockFixtureDesc("html", "Html2"), XBlockFixtureDesc("html", "Html3"), )
required_boto3_version = '1.2.1'
return StudioLibraryContainerXBlockWrapper.from_xblock_wrapper(xblock)
self._verify_unit_warning( self.UnitState(is_released=False, publish_state=self.PublishState.UNPUBLISHED_CHANGES, is_locked=True), self.STAFF_ONLY_WARNING )
'overall_message': overall_message,
DEFAULT_DATETIME_STR = datetime.datetime(year=2014, month=12, day=1).isoformat(' ')
super(TabsPageTests, self).setUp()
trainer = yaml_parse.load(test_yaml_layer1 % {'layer0_filename': layer0_filename, 'layer1_filename': layer1_filename}) trainer.main_loop()
self.assertIsInstance(response, HttpResponseRedirect)
precisions_not_pos = np.ones((n_components, n_features, n_features)) precisions_not_pos[0] = np.eye(n_features) precisions_not_pos[0, 0, 0] = -1.
X_mm, y_mm, y_ml_mm, ESTIMATORS = None, None, None, None shutil.rmtree(TEMP_FOLDER)
from salt.exceptions import SaltSystemExit
additional_data = { u'video_bumper': { u'value': { "transcripts": {}, "video_id": "video_001" } } } self.course_fixture.add_advanced_settings(additional_data)
profile = UserProfile.objects.get(user=user) return profile.name
return self.runtime.service(self, "request_cache")
yield check_oob_score, name, csc_matrix(iris.data), iris.target
self.dashboard_page.visit()
from salt.config.schemas import ssh as ssh_schemas from salt.config.schemas.minion import MinionConfiguration
latex_logo = "logos/scikit-learn-logo.png"
preprocessor = ZCA(filter_bias=0.0, n_drop_components=2) preprocessed_X = self.get_preprocessed_data(preprocessor) assert_allclose(zca_truncated_X, preprocessed_X, rtol=1e-3)
pass
__virtualname__ = 'sysctl'
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath ensure_in_syspath('../../')
raise NotImplementedError()
from salt.modules import daemontools from salt.exceptions import CommandExecutionError
self.assertEqual(response.status_code, 200) self.assertIn('Financial Assistance Application', response.content)
return self.q(css='.problem-header').text[0]
for section in self.sections(): if section.is_collapsed: section.expand_subsection() for subsection in section.subsections(): if subsection.is_collapsed: subsection.expand_subsection()
self.assertEqual(len(self.video.q(css='video')), 1)
import salt.cloud.libcloudfuncs as libcloud
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salt.exceptions import CommandExecutionError
raise ReferentialIntegrityError( u"{} parents claim {}".format(len(parents), location) )
X = np.array([[1], [2], [3]]) Y = np.array([1, 2, 3]) clf = ARDRegression(compute_score=True) clf.fit(X, Y)
self.unit_page.xblocks[1].open_basic_tab()
self.assertEqual( res_json['message'], u"Certificate Invalidation does not exist, Please refresh the page and try again.", )
bad_exceptions[math] = None
import json import logging
return event['event_type'].startswith('edx.team.')
return self._find_block(self.course, self.chapter_url_name, 'chapter', CONTENT_DEPTH - 1)
self.certificates_section.wait_for_certificate_exceptions_section()
self.user = User.objects.get_by_natural_key(self.user.natural_key()[0])
from __future__ import absolute_import import sys
return {'result': ignore_already_stopped, 'comment': 'Container \'{0}\' absent'.format(name)}
binarized = label_binarize(y, classes, neg_label=neg_label, pos_label=pos_label, sparse_output=sparse_output) assert_array_equal(toarray(binarized), expected) assert_equal(issparse(binarized), sparse_output)
task_input = { 'statuses_to_regenerate': [ CertificateStatuses.downloadable, CertificateStatuses.error, CertificateStatuses.generating ] }
adder = { 'type': 'text', 'contents': choice_text, 'tail_text': '', 'value': '' } components.append(adder)
self.assertEqual(context['currency_symbol'], '$') self.assertEqual(context['currency'], 'usd')
MODULESTORE = TEST_DATA_SPLIT_MODULESTORE __test__ = True url_name = 'course'
ret.update({esxi_host: _format_firewall_stdout(response)})
if self.youtube_id_1_0: encoded_videos["youtube"] = { "url": self.create_youtube_url(self.youtube_id_1_0),
pass
from __future__ import absolute_import import os import shutil import tempfile
salt.utils.compat.pack_dunder(__name__)
AutoAuthPage( self.browser, username=self.username, email=self.email, password=self.password, course_id=self.course_id, staff=False ).visit()
with self.assertRaises(xmodule.exceptions.NotFoundError): get_request_dict = {CapaFactory.input_key(): '3.14'} module.check_problem(get_request_dict)
return {'HTTP_AUTHORIZATION': 'Basic ' + base64.b64encode('%s:%s' % (username, password))}
assert not value or all(0 <= v < self.num_layers for v in value) self.inputs_to_layers[key] = sorted(value)
if __grains__['os_family'] == 'RedHat': if not salt.utils.is_true(sanitizedkwargs[kwarg]): needs_update = True else: needs_update = True
while r < 100: r = r * 10 while r >= 1000: r = r / 10
self.assertNotIn(extra_user.username, response.content)
self.client.logout()
<vcenter-password> esxi_hosts='[esxi-1.example.com, esxi-2.example.com]'
self.assertContains(resp, 'Robot_Super_Course')
self.set_team_configuration(None) self.verify_teams_present(False)
if not iboost == self.n_estimators - 1: sample_weight *= np.exp(estimator_weight * ((sample_weight > 0) | (estimator_weight < 0)))
self.config.pop(cli_log_file_fmt)
return fn(*args, **kwargs)
rng = np.random.RandomState(1999) n_samples = 100 n_features = 3 X = rng.randn(n_samples, n_features) + 5 * rng.rand(1, n_features)
return self.find_css(css).first.text[0]
from salt.states import ntp
'sign_pub_messages': bool,
if (self._ip >> 112) != 0x2002: return None return IPv4Address((self._ip >> 80) & 0xFFFFFFFF)
descriptor = modulestore().get_course(course_key) del descriptor.graceperiod modulestore().update_item(descriptor, user.id)
store = modulestore() course_usage_key = store.make_course_usage_key(course_key) return BlockStructureManager(course_usage_key, store, _get_cache())
try: return request.user.username except AttributeError: return ''
note = self.filter_by_id(self.notes, note_id) if note: note[0].update(note_info) return note else: return None
EmptyPromise(self.is_error_modal_showing, 'Error Modal Displayed', timeout=30).fulfill()
from __future__ import absolute_import import difflib import os import yaml
from pylearn2.space import (SimplyTypedSpace, VectorSpace, Conv2DSpace, CompositeSpace, VectorSequenceSpace, IndexSequenceSpace, IndexSpace, NullSpace, is_symbolic_batch) from pylearn2.utils import function, safe_zip
import salt.defaults.exitcodes import salt.utils import salt.log.setup import salt.defaults.exitcodes from salt.log.mixins import NewStyleClassMixIn
ret = {'name': '', 'changes': {}, 'result': False, 'comment': ''}
warnings.warn("Do you really want to regularize the detector units to be more active than the pooling units?")
'organizations',
raise NotImplementedError(str(self.__class__) + " does not implement " "log_p_z.")
for course_dir in source_dirs: _err_cnt, _warn_cnt = validate_data_source_paths(path(data_dir), course_dir) err_cnt += _err_cnt warn_cnt += _warn_cnt
return {}
return Fragment(content=u"<div>Nothing here. Move along.</div>")
if photo_id_image is not None: initial_verification = None
import integration import salt.utils
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
content = '<ol/>' payload = get_response(content, 'January 11, 2013') self.assertHTMLEqual(content, payload['content'], "self closing ol")
self.repo = pygit2.init_repository(self.cachedir) new = True
cost = SumOfCosts([SumOfOneHalfParamsSquared(), (0., DummyCost())]) model = DummyModel(shapes, lr_scalers=scales) dataset = ArangeDataset(1) decay = 0.95
resp = self.client.get(self.get_url(self.student.username)) self.assertEqual(resp.status_code, status.HTTP_401_UNAUTHORIZED)
from __future__ import absolute_import, print_function
editable_fields[SplitTestFields.user_partition_id.name] = self._create_metadata_editor_info( SplitTestFields.user_partition_id )
self.assertEquals(preview.latex_preview('2^3^(4+5)'), '2^{3^{4+5}}')
from __future__ import absolute_import import json
CourseEnrollmentFactory(user=self.student, course_id=self.course.id)
form = self._admin_form(course_mode) self._set_form_verification_deadline(form, self.VERIFICATION_DEADLINE) self._assert_form_has_error(form, "Verification deadline can be set only for verified modes.")
log.info(str(ret))
for device in devices: if not pvdisplay(device): raise CommandExecutionError('Device "{0}" was not affected.'.format(device))
SERVICE_VARIANT = os.environ.get('SERVICE_VARIANT', None)
self.assertIn(self.user_name, self.certificates_section.last_certificate_exception.text) self.assertIn(expected_notes, self.certificates_section.last_certificate_exception.text)
if not courses: raise CommandError( u"No courses found for orgs: {orgs}".format( orgs=", ".join(org_list) ) )
from salt.states import memcached
verification_checkpoint = VerificationCheckpoint.objects.create( course_id=self.course.id, checkpoint_location=checkpoint_location ) self.assertEqual( VerificationCheckpoint.get_or_create_verification_checkpoint(self.course.id, checkpoint_location), verification_checkpoint )
err = Exception mock_index_dictionary.return_value = err
return self.conditional.conditional_expectation(theta)
running = (volinfo[target]['status'] == '1')
if hasattr(self, 'opts'): self.refresh_file_mapping() self.initial_load = False
enable_sigusr1_handler()
unique_together = (('microsite', 'template_uri'),)
return self.retried_nomax + self.retried_withmax
self._test_visible_to_students(True, 'public_no_start', None, publish=True)
if not uninstaller: uninstaller = pkginfo[version_num].get('installer')
if publish == 'make_public': modulestore().publish(xblock.location, user.id)
grid_search.score(X, y) grid_search.predict_proba(X) grid_search.decision_function(X) grid_search.transform(X)
sorted_grid_scores = list(sorted(search.grid_scores_, key=lambda x: x.mean_validation_score)) best_score = sorted_grid_scores[-1].mean_validation_score assert_equal(search.best_score_, best_score)
if role: role(self.course.id).add_users(self.user)
first_octet, second_octet, third_octet, fourth_octet = octets
cm = metrics.confusion_matrix(y_test, y_predicted) print(cm)
try: import redis HAS_REDIS = True except ImportError: HAS_REDIS = False
str_args = 'electrolytes --aqueous --anion hydroxide --cation=ammonium free radicals -- hydrogen' _validate_ret(parallels._normalize_args(str_args))
return self._mapping.keys()
from salt.modules import sysbench
for key, value in dict_: self[key] = value
'django.middleware.locale.LocaleMiddleware',
predictions = cval.cross_val_predict(clf, X_sparse, X) assert_array_equal(predictions.shape, (10, 2))
CourseModeFactory.create( course_id=self.course_key, mode_display_name="Honor No Expiration", mode_slug="honor_no_expiration", expiration_datetime=None )
assert_true(X_scaled is not X) assert_true(X_csr_scaled is not X_csr)
assert_bad({"files": [{"file_name": "test.mp4"}]})
for job in data.keys(): if 'enabled' not in data[job]: data[job]['enabled'] = True
is_increasing = assert_no_warnings(check_increasing, x, y) assert_false(is_increasing)
context['ewa_diff'] = ewa_diff context['ewa_inertia'] = ewa_inertia context['ewa_inertia_min'] = ewa_inertia_min context['no_improvement'] = no_improvement return False
from __future__ import absolute_import
self._assert_course_verification_status(VERIFY_STATUS_MISSED_DEADLINE)
sh("i18n_tool generate --strict")
raise RuntimeError('Invalid password provided.')
if isinstance(data, str): log.error('Error requesting instance: {0}'.format(data)) return {}
instance_map = weakref.WeakKeyDictionary()
return self.context["group_ids_to_names"].get(obj["group_id"])
stochastic = False
return dict((feature, getattr(student, feature)) for feature in features)
assert_raises(ValueError, pairwise_distances, X, Y, metric="blah")
from __future__ import absolute_import import os
try: if not _available(name, ret): return ret except CommandExecutionError as exc: ret['result'] = False ret['comment'] = exc.strerror return ret
'hash_type': str,
name_label = _(u"Full name")
from __future__ import unicode_literals
d = get_dummy_course('2012-12-02T12:00') self.assertEqual('', d.end_datetime_text())
return self.q(css=self.auto_enroll_browse_button_selector).is_present()
os.kill(parent_pid, 0)
raise NotImplementedError
credit_api.set_credit_requirement_status( self.user.username, self.course.id, "reverification", "midterm", status="failed", reason={} )
from ..preprocessing import LabelEncoder
self.user.passwordhistory_set.add(PasswordHistory(password='new_password')) self.user.save() self.assert_no_events_were_emitted()
host_c = salt.utils.fopen('/etc/hosts', 'r').readlines()
suff_stats = np.zeros(exp_topic_word_distr.shape) if cal_sstats else None
self.aliases[cmd] = value
func.__doc__ = doc
return not self.crosses_boundary()
if item_kind is None: items.append(value) else: items.append({'kind': item_kind, 'name': value})
import salt.ext.six as six
modulestore().get_item(usage_key)
vsan_config = vim.vsan.host.ConfigInfo() vsan_config.enabled = False
return course_metadata_utils.may_certify_for_course( self.certificates_display_behavior, self.certificates_show_before_end, self.has_ended() )
for layer in layer_to_state: old = layer_to_state[layer] new = updated[layer] if layer_to_clamp[layer]: assert new is old else: add_updates(old, new)
myminion: 2:7.4.160-1.el7
CourseModeFactory.create(mode_slug=CourseMode.NO_ID_PROFESSIONAL_MODE, course_id=self.course.id, min_price=100)
self.q(css='.create-user-button').first.click() self.wait_for(lambda: self.new_user_form_visible, "Add user form is visible")
self.subcluster_labels_ = clusterer.fit_predict( self.subcluster_centers_)
import salt.utils import salt.utils.process
if re.match(pattern, path): return False
state_run = self.run_function('state.sls', mods='requisites.listen_in_simple')
'open_mode': bool,
from __future__ import unicode_literals
elif result is None: ret['result'] = None ret['comment'] = out['comment'] return ret
return self.q(css="#is_prereq").visible
md5 = hashlib.md5() md5.update(repr(resource)) return md5.hexdigest()
self.assertEquals(preview.latex_preview('1.618k'), r'1.618\text{k}')
from sklearn.neighbors import kneighbors_graph connectivity = kneighbors_graph(X, n_neighbors=10, include_self=False)
def get_xml_editable_fields(self, field_data): runtime = get_test_descriptor_system() return runtime.construct_xblock_from_class( XmlDescriptor, scope_ids=Mock(), field_data=field_data, ).editable_metadata_fields
'openedx.core.djangoapps.user_api.middleware.UserTagsEventContextMiddleware',
expected_answers = {CapaFactory.answer_key(): '3.14'} self.assertEqual(module.lcp.student_answers, expected_answers)
PARENTAL_CONSENT_AGE_LIMIT = 13
self.assertEqual(response.status_code, 200)
f = np.asarray(f).ravel() prob = special.fdtrc(dfbn, dfwn, f) return f, prob
new_course_key = self.course_key.replace(course=self.course_key.course.upper()) resp = self._create_course_with_given_location(new_course_key) self.assertEqual(resp.status_code, 200)
self.dot_access_token.expires = datetime.utcnow() - timedelta(weeks=1) self.dot_access_token.save() self.assert_oauth_status(self.dot_access_token, status.HTTP_401_UNAUTHORIZED)
self.course_info['number'] = self.unique_id[0:6]
salt '*' vsphere.esxcli_cmd my.esxi.host root bad-password \ 'system coredump network get'
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
import glob import logging import re
seed.__salt__ = {} seed.__opts__ = {}
'RESTRICT_ENROLL_BY_REG_METHOD': False,
block_structure_result = xblock_key in block_structure has_access_result = bool(has_access(user, 'load', self.get_block(i), course_key=self.course.id))
for name in FOREST_CLASSIFIERS: yield check_gridsearch, name
dis = cosine_distances(X)
'edxmako', 'pipeline', 'static_replace',
avg_score = [] for train, test in cv: estimator.fit(X[train], y[train]) avg_score.append(scorer(estimator, X[test], y[test])) return np.mean(avg_score)
TIME_ZONE = ENV_TOKENS.get('TIME_ZONE', TIME_ZONE)
self.assertEqual(resp.status_code, 200)
alg.fit(X) alg.fit(X.tolist())
self.assertEqual(self.cmap.get_overall_message(), "Test message")
log.info("Send-email task %s for email %s: returning status %s", current_task_id, email_id, new_subtask_status) return new_subtask_status.to_dict()
self.find_css('.collection-name-input').first.fill(value)
__salt__['file.remove'](temp_dir)
},
assert_array_equal(clf.predict([[0.2, -1.0]]), np.array([-1]))
return self.store.check_supports(block.location.course_key, 'copy_from_template')
self.release_languages('fa')
if name == 'cybersource_config_key': return 'test_microsite' else: return None
io_loop = io_loop or tornado.ioloop.IOLoop.current() if io_loop not in AsyncAuth.instance_map: AsyncAuth.instance_map[io_loop] = weakref.WeakValueDictionary() loop_instance_map = AsyncAuth.instance_map[io_loop]
self.cohort_management_page.select_cohort_some_inline_discussion()
assert_raises(ValueError, precision_recall_curve, [0, 1, 2], [[0.0], [1.0], [1.0]])
try: code_redemption = cls.objects.get(registration_code__code=code, registration_code__course_id=course_id) except cls.DoesNotExist: code_redemption = None return code_redemption
return (user, password)
from salttesting import skipIf, TestCase from salttesting.helpers import destructiveTest, ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, call, mock_open, patch)
self.status = None self.__irix_hack = 'irix' in sys.platform.lower()
X, y = make_circles(factor=0.5, random_state=0, noise=0.05)
reindex_course_and_check_access(self.course.id, self.user)
'rule': None
self.assert_enrollment_status()
regr.fit(diabetes_X_train, diabetes_y_train)
__func_alias__ = { 'list_': 'list' }
'API': 'https://www.youtube.com/iframe_api',
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
self.x_sum *= self.gamma self.x_sum += x
self._check_underscore_expressions(underscore_template, results) results.prepare_results(underscore_template)
self.go_to_tab_and_assert_problem(2, self.problem2_name)
return queryset
return self.q(css=".inline-error").visible
results['Total'] += 1
if self.capa_system.xqueue is None: return {'success': False, 'message': _('Cannot connect to the queue')}
MODULESTORE = TEST_DATA_SPLIT_MODULESTORE
self.process = MultiprocessingProcess(target=raet_minion_run, kwargs={'cleanup_protecteds': [self.stack.ha], }) self.process.start() self._wait_caller(opts)
self.client.logout()
return True
ForestEstimator = FOREST_ESTIMATORS[name] rng = np.random.RandomState(0) weights = rng.rand(X.shape[0]) total_weight = np.sum(weights)
from __future__ import absolute_import
if not has_rejectfile_option: cmd.append('--reject-file=-')
self.generated_certificate.invalidate()
xpath = "//div[@class='drag_and_drop_problem_json']/p/b" self.assert_has_text(xml, xpath, 'HTML')
keys = [keys]
if isinstance(reference, basestring): reference = BlockUsageLocator.from_string(reference) elif isinstance(reference, BlockKey): return reference return BlockKey.from_usage_key(reference)
return self._batch_size(is_numeric=True, batch=batch)
scaler_incr = scaler_incr.partial_fit(chunk)
if os.path.isdir(base_dir / url_name): self._load_extra_content(system, course_descriptor, category, base_dir / url_name, course_dir)
self.q(css=self._bounded_selector('span.message-text a')).first.click()
x = np.arange(len(channel.batch_record))
elif existing['code'] == 404:
pass
self.login(email, password)
_ = lambda text: text
uid = kwargs.pop('uid', -1) gid = kwargs.pop('gid', -1)
if not os.path.exists(os.path.dirname(file_path)): os.makedirs(os.path.dirname(file_path))
from __future__ import absolute_import import logging
return np.empty(0, dtype=np.int), np.empty(0, dtype=float)
'startup_states': str,
return parameter in signature(estimator.fit).parameters
_config_filename_ = 'master' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'api')
mount_translate_options = { 'tcp': 'proto=tcp', 'udp': 'proto=udp', }
UPSELL_TO_VERIFIED_MODES = [HONOR, AUDIT]
disturb_mem.disturb_mem() rng = np.random.RandomState([2012, 11, 27])
if not opts['job_cache'] or opts.get('ext_job_cache'): return
self._submit_photos(face_image=self.IMAGE_DATA)
if not settings.configured: settings.configure()
from salt.utils import etcd_util try: from urllib3.exceptions import ReadTimeoutError, MaxRetryError HAS_URLLIB3 = True except ImportError: HAS_URLLIB3 = False
html = module.get_problem_html()
osa_script = self.run_function('assistive.installed', [OSA_SCRIPT]) if osa_script: self.run_function('assistive.remove', [OSA_SCRIPT])
import salt.utils
self.courseware_search_page.visit() staff_page = StaffPage(self.browser, self.course_id) self.assertEqual(staff_page.staff_view_mode, 'Staff') return staff_page
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
continue
if answer_name in self.correct_inputs and not partial_correct: inputs_correct = False
LIBRARY_LABEL = "Library" COUNT_LABEL = "Count" SCORED_LABEL = "Scored" PROBLEM_TYPE_LABEL = "Problem Type"
THRESHOLDED_METRICS_WITH_AVERAGING = [ "roc_auc_score", "average_precision_score", ]
to_json_val = {'type': self.type, 'name': self.name} if self.is_hidden: to_json_val.update({'is_hidden': True}) return to_json_val
zip_lib = self.capa_system.get_python_lib_zip() if zip_lib is not None: extra_files.append(("python_lib.zip", zip_lib)) python_path.append("python_lib.zip")
clf = self.factory(loss="log", alpha=0.01, n_iter=10).fit(X2, Y2)
self._submit_photos( face_image=self.IMAGE_DATA + "9999", photo_id_image=self.IMAGE_DATA + "1111", ) two_photo_reverification_data = self._get_post_data()
assert_greater(np.abs(s[:k] - sa).max(), 0.1)
self.store.publish(locations['parent'], self.user_id)
from __future__ import absolute_import, print_function import logging
import salt.utils from salt.exceptions import SaltInvocationError
try: lookup_key = _lookup_syslog_config(key) except KeyError: ret['comment'] = '\'{0}\' is not a valid config variable.'.format(key) return ret
for __ in range(10): group2_id = RandomUserPartitionScheme.get_group_for_user( self.MOCK_COURSE_ID, self.user, self.user_partition ) self.assertEqual(group1_id, group2_id)
assert_equal(sum(all_folds), 300)
from salt.exceptions import SaltRenderError import salt.utils.templates
LOGGER.info('Retrying task to award failed certificates to user %s', username) raise self.retry(countdown=countdown, max_retries=config.max_retries)
raw_student_words = data.getall('student_words[]') student_words = filter(None, map(self.good_word, raw_student_words))
self.save() orderitems = OrderItem.objects.filter(order=self).select_subclasses() site_name = microsite.get_value('SITE_NAME', settings.SITE_NAME)
self.assertIn(SESSION_KEY, self.client.session)
context = {} _update_context_with_basic_info(context, course_id, platform_name, configuration) invalid_template_path = 'certificates/invalid.html'
if timeout_in_seconds: utc_now = datetime.utcnow()
assert_raises(ValueError, ir.predict, [min(x) - 10, max(x) + 10])
expected = 'You can now <a href="' + reverse('login') + '">login</a>.' self.assertIn(expected, resp.content)
from __future__ import unicode_literals
kwargs = {} roles = [role.name for role in user.role_entities]
return 0
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
import salt.utils from salt.state import STATE_INTERNAL_KEYWORDS as _STATE_INTERNAL_KEYWORDS from salt.exceptions import SaltException from salt.ext import six
try: course_key = CourseKey.from_string(key) except InvalidKeyError: course_key = key return isinstance(course_key, CourseKey)
self._create_students(num_emails - 1)
log_format = '[%(name)s] %(message)s' handler = TestsLoggingHandler(format=log_format) log.addHandler(handler)
Sigma = Sigma[::-1] U, VT = svd_flip(U[:, ::-1], VT[::-1])
CourseEnrollment.enroll(self.user, self.course_key, mode="verified")
pass
exc_info_on_loglevel=logging.DEBUG
_upload_file(self.srt_file, self.item_descriptor.location, os.path.split(self.srt_file.name)[1])
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
pillar.fetch_remotes()
'post_params_decline': post_params_decline
if exc.errno != errno.EPIPE: raise exc
if self.remove_zero_eig or self.n_components is None: self.alphas_ = self.alphas_[:, self.lambdas_ > 0] self.lambdas_ = self.lambdas_[self.lambdas_ > 0]
SERVICE_VARIANT = os.environ.get('SERVICE_VARIANT', None)
self._check_results( test_user, expected_user_accessible_blocks, blocks_with_differing_access, transformers, )
if node_string[-2:] == '\\n': node_string = node_string[:-2] if node_string[-5:] == '<br/>': node_string = node_string[:-5]
if salt.utils.is_windows(): return (False, 'The network execution module cannot be loaded on Windows: use win_network instead.') return True
from napalm import get_network_driver HAS_NAPALM = True
return self.q(css=self.COURSE_RUN_INPUT).text[0]
w = random_state.randn(n_features, n_targets)
super(OAuth2ProviderConfig, self).clean() self.other_settings = clean_json(self.other_settings, dict)
salt '*' win_update.download_updates
response = requests.post(self.url, data={"test_param": None}) self.assertEqual(response.status_code, 400)
url(r'^api/val/v0/', include('edxval.urls')),
clf = MultiTaskLasso(alpha=1, tol=1e-8).fit(X, Y) assert_true(0 < clf.dual_gap_ < 1e-5) assert_array_almost_equal(clf.coef_[0], clf.coef_[1])
return ''
self.assert_enrollment_status(expected_status=status.HTTP_401_UNAUTHORIZED)
return nltk.tree.Tree(n.node, n[2:])
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
ext_user = User.objects.get(email=self.ext_user.email) self.assertTrue(auth.user_has_role(ext_user, CourseInstructorRole(self.course.id)))
self._state = threading.local() self._state.data = None self.global_data = {}
self.t_ = None
if self.hintmode == 'always': self.msg = self.hint + ('<br/>' if self.msg else '') + self.msg
import msgpack
from __future__ import absolute_import, with_statement import os import time import signal import datetime import itertools import threading import logging import errno import random
import salt.ext.six as six
self.assertTrue('Activate Course Enrollment' in response.content)
return JsonResponse( {"error": "If group_id is specified, user_partition_id must also be specified."}, 400 )
'ENABLE_FOOTER_MOBILE_APP_LINKS': False,
response.data["start"] = (self.page.number - 1) * self.get_page_size(self.request)
#today = '' today_fmt = '%B %d, %Y'
self.assert_grade(problem, '42', 'correct') self.assert_grade(problem, '0', 'incorrect')
import logging
if isinstance(obj, XBlock): return _has_access_descriptor(user, action, obj, course_key)
result.update(_merge_data(summary_data, fault_data))
self.skipTest( 'You don\'t have the required permissions to run this test' )
linkcode_resolve = make_linkcode_resolve('sklearn', u'https://github.com/scikit-learn/' 'scikit-learn/blob/{revision}/' '{package}/{path}#L{lineno}')
response = self.client.get(self.url) self.assert_tag_has_attr(response.content, "html", "lang", self.site_lang)
cauth = CourseAuthorization(course_id=self.course.id, email_enabled=True) cauth.save()
tasks = instructor_task.api.get_running_instructor_tasks(course_id)
self.client.logout() super(TestLibraryAccess, self).tearDown()
from salt.modules import win_timezone
self._examples_seen += num_examples self._num_batches_seen += 1
return os.sep.join(__file__.split(os.sep)[:-4]) + '/data/imports/' + filename
try: role_name = cls.ROLE REGISTERED_ACCESS_ROLES[role_name] = cls except AttributeError: log.exception(u"Unable to register Access Role with attribute 'ROLE'.") return cls
from __future__ import absolute_import, print_function
return None
unit.view_published_version() self.assertEqual(len(self.browser.window_handles), 2) self.courseware.wait_for_page()
continue
module = CapaFactory.create(xml=self.demand_xml)
from __future__ import unicode_literals
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'
if make_data is csr_matrix: assert_raises(type(exc), func, X, metric=metric, n_jobs=2, **kwds) continue else: raise
httpretty.register_uri( httpretty.POST, re.compile(r"http://localhost:4567/api/v1/(\w+)/threads"), body=_get_thread_callback(thread_data) )
body.update(custom_parameters)
solve_triangular_args = {'check_finite': False}
state_run = self.run_function('state.sls', mods='requisites.onchanges_multiple')
filepath = SettingsPage.get_asset_path(file_to_upload) self.q(css=self.upload_image_browse_button_selector).results[0].send_keys(filepath) self.q(css=self.upload_image_upload_button_selector).results[0].click()
ItemFactory.create( parent_location=self.course.location, category="discussion", discussion_id=topic_id, discussion_category=category, discussion_target=subcategory, **kwargs )
self.added_tags.extend(kwargs.items())
self._auto_auth("STAFF_TESTER", "staff101@example.com", True)
fields = dict(self.CREDENTIALS_DEFAULTS, **kwargs) CredentialsApiConfig(**fields).save() return CredentialsApiConfig.current()
test_command = 'sysbench --num-threads=64 --test=threads ' test_command += '--thread-yields={0} --thread-locks={1} run ' result = None ret_val = {}
self.logout_page.visit() AutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=staff).visit()
userKeys += ['id_rsa', 'id_dsa', 'id_ecdsa', 'id_ed25519']
self.root_path = root_path if not os.path.exists(root_path): os.makedirs(root_path)
y_type = type_of_target(y) if y_type == "multiclass": inversed = _inverse_binarize_multiclass(binarized, classes=classes)
self.course_key = SlashSeparatedCourseKey('edX', 'toy', '2012_Fall')
start = datetime.now(UTC) self.add_icrv_xblock(related_assessment_name="Midterm A", start_date=start)
self.download_results = None
JINJA = jinja2.Environment( loader=jinja2.FileSystemLoader( os.path.join(salt.utils.templates.TEMPLATE_DIRNAME, 'debian_ip') ) )
configuration = self.get_configuration() return configuration.get(val_name, default)
self.assert_grade(problem, "Second", "correct")
response_str = json.dumps( {'return_code': 0 if success else 1, 'content': message} )
DATADOG = AUTH_TOKENS.get("DATADOG", {}) DATADOG.update(ENV_TOKENS.get("DATADOG", {}))
le = LabelEncoder() ret = le.fit_transform([1, 1, 4, 5, -1, 0]) assert_array_equal(ret, [2, 2, 3, 4, 0, 1])
self.skipUI = skipUI self.skipDownloaded = skipDownloaded self.skipInstalled = skipInstalled self.skipReboot = skipReboot self.skipPresent = skipPresent self.skipHidden = skipHidden
email_opt_in = request.data['email_opt_in'].lower() == 'true' update_email_opt_in(request.user, org, email_opt_in) return HttpResponse(status=status.HTTP_200_OK)
rng = np.random.RandomState(random_state)
kwargs_for_reverse = {key_name: unicode(key_value)} if key_name else None if kwargs: kwargs_for_reverse.update(kwargs) return reverse('contentstore.views.' + handler_name, kwargs=kwargs_for_reverse)
ports = [4505, 4506]
return int(label.split(' (')[1].split(')')[0])
import salt.utils import salt.utils.itertools import salt.ext.six as six from salt.exceptions import SaltInvocationError from salt.ext.six.moves import range from salt.exceptions import CommandExecutionError
if not self.loadauth.time_auth(extra): log.warning( 'Authentication failure of type "eauth" occurred.' ) return ''
if snapshot.childSnapshotList: ret = _get_snapshots(snapshot.childSnapshotList, current_snapshot, snapshot_path) if current_snapshot: return ret snapshots.update(ret)
rng = check_random_state(0) n_features = 2 n_samples = 40 n_output = 3
n_targets = y.shape[1] Xy = np.empty(shape=(n_features, n_targets), dtype=common_dtype, order='F') np.dot(y.T, X, out=Xy.T)
cs = CourseStructure.objects.get(course_id=self.course.id) self.assertEqual(cs.structure_json, structure_json)
vm_['instance_id_list'] = [] for instance in data: vm_['instance_id_list'].append(instance['instanceId'])
if os.path.isfile(logfile): os.unlink(logfile)
self.course = CourseFactory.create(default_store=default_store)
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
if p.active and p.groups and (schemes is None or p.scheme.name in schemes):
current_info = info(name) if not current_info: raise CommandExecutionError('User \'{0}\' does not exist'.format(name))
self.assertGreater(len(modules), 10)
import salt.auth import salt.wheel
return self.EXPORTED_COURSE_AFTER_DIR_NAME.format(unicode(uuid.uuid4())[:8])
return library.location.library_key
threshold = min(step, np.sum(support_) - n_features_to_select)
X = self._validate_X_predict(X)
credit_requirements = get_credit_requirements(course_key) paired_requirements = {} for requirement in credit_requirements: namespace = requirement.pop("namespace") paired_requirements.setdefault(namespace, []).append(requirement)
return False
ret['comment'] = 'Event module not available. Schedule add failed.'
ret = self.run_function( 'state.sls', mods='issue-1879.step-2', timeout=120 ) self.assertSaltTrueReturn(ret)
self.certificates_section.wait_for_certificate_exceptions_section()
'minion_opts': ssh_schemas.DictItem(title='Minion Options', description='Dictionary of minion options', properties=MinionConfiguration()).serialize(),
self.assertEqual(resp.status_code, 400)
next_url = request.GET.get('next') if next_url: return redirect(next_url) else: return redirect('/course/')
if not all_packages: logger.warning("[up] '{0}' is not installed, " "cannot upgrade.".format(this_package)) pass
self.wait_for_field('image') return self.q(css='.u-field-upload-button').visible
self._verify_unit_warning( self.UnitState(is_released=True, publish_state=self.PublishState.NEVER_PUBLISHED, is_locked=True), self.STAFF_ONLY_WARNING )
import salt.ext.six as six
if self.server.delete_note(note_id): self.respond(204, "No Content") else: self.respond(404, "404 Not Found")
monitor.add_channel( name='momentum', ipt=None, val=self.momentum, data_specs=(NullSpace(), ''), dataset=monitoring_dataset)
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
user: myuser@pam or myuser@pve password: mypassword url: hypervisor.domain.tld driver: proxmox verify_ssl: True
self.assertEqual( res_json['message'], "{user} is not enrolled in this course. Please check your spelling and retry.".format( user=self.certificate_exception['user_name'] ) )
if 'retcode' in self.functions.pack['__context__']: ret['retcode'] = self.functions.pack['__context__']['retcode']
extra_context = {"platform_name": microsite.get_value('platform_name', settings.PLATFORM_NAME)}
courses2 = import_course_from_xml( self.store, self.user_id, self.export_dir, source_dirs=[top_level_export_dir], static_content_store=contentstore, target_id=dest_course_key2, create_if_not_present=True, raise_on_failure=True, )
self.register_flag_response("comment", comment_id)
action = str(action)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
from __future__ import absolute_import import salt.wheel
self.assertEqual(unicode(course.location.course_key), unicode(course.children[0].course_key))
pass
self.assertListEqual(problem.responders.values()[0].context['idset'], correct_order)
print(metrics.classification_report(y_test, y_predicted, target_names=dataset.target_names))
staff = UserFactory.create(password="test") role = CourseStaffRole(self.course.id) role.add_users(staff) return staff
grid_dimension = [0, ]
'interface': str,
if not self.hyperparameter_length_scale.fixed: length_scale_gradient = \ dists * K / (self.length_scale ** 2 * base) length_scale_gradient = length_scale_gradient[:, :, np.newaxis]
with self.assertRaises(ItemNotFoundError): self.publish((('html', 'html00'),))
import salt.cloud from salt.exceptions import ( SaltCloudConfigError, SaltCloudException, SaltCloudSystemExit, SaltCloudExecutionTimeout, SaltCloudExecutionFailure, SaltCloudPasswordError )
self.assertEqual(self.export_page.header_text, 'Course Export')
component = self.store.create_child( self.user_id, test_course.location, 'vertical', )
distances[:] = mindist
thumbnail_location=asset['thumbnail_location'], import_path=asset['import_path'], locked=asset.get('locked', False)
response = self.client.post(self.url, { "email": "invalid@example.com", "password": self.PASSWORD, }) self.assertHttpForbidden(response)
pow_term = atom + ZeroOrMore("^" + atom) pow_term = Group(pow_term)("power")
self.user.profile.mailing_address = None self.user.profile.save()
vec = np.zeros(n_features * n_classes) vec[0] = 1 hess_col = hessp(vec)
number_suffix = MatchFirst(Literal(k) for k in SUFFIXES.keys())
original_distances = original_distances[non_identical]
nbrs_X = neighbors.NearestNeighbors(n_neighbors=3) nbrs_X.fit(X) dist_X, ind_X = getattr(nbrs_X, method)(Y)
completion_check(user)
for entry in output: entry = [item for item in entry.split(" ") if item] entry = entry[0:3] + [" ".join(entry[3:])]
from salt.states import mongodb_database
for line in installed_list_file:
MINIMAL_MACHINE_ATTRIBUTES = [ "id", "image", "size", "state", "private_ips", "public_ips", ]
yaml.add_multi_constructor('!obj:', multi_constructor_obj) yaml.add_multi_constructor('!pkl:', multi_constructor_pkl) yaml.add_multi_constructor('!import:', multi_constructor_import)
roles = (CourseStaffRole, CourseInstructorRole)
model.fit(X_scaled, y) assert_true(np.isfinite(model.coef_).all())
if self.escChar: ret = re.sub(self.escCharReplacePattern,"\g<1>",ret)
self.create_programs_config() self.mock_programs_api(status_code=500) actual = utils.get_programs(self.user) self.assertEqual(actual, [])
return sample_weight, 1., 0.
self.assertEqual(module.attempts, 0)
super(DashboardPage, self).__init__(browser)
importances = est.feature_importances_ est.set_params(n_jobs=2) importances_parrallel = est.feature_importances_ assert_array_almost_equal(importances, importances_parrallel)
course = get_course_by_id(SlashSeparatedCourseKey.from_deprecated_string(course_id)) unit = find_unit(course, request.GET.get('url')) return JsonResponse(dump_module_extensions(course, unit))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
import integration from salt import fileclient
self.assertNotIn( 'test_content_field', new_version.get_explicitly_set_fields_by_scope(scope=Scope.content) ) self.assertNotIn( 'test_settings_field', new_version.get_explicitly_set_fields_by_scope(scope=Scope.settings) )
return "is-editing" in self.q(css=self.NAME_FIELD_WRAPPER_SELECTOR).first.attrs("class")[0]
for balancer in status: if not status[balancer]: ret['errors'].append(balancer) elif status[balancer]['activation'] != activation: ret['wrong_state'].append(balancer)
GIT_REPO_DIR = ENV_TOKENS.get('GIT_REPO_DIR', '/edx/var/edxapp/course_repos') GIT_IMPORT_STATIC = ENV_TOKENS.get('GIT_IMPORT_STATIC', True)
assert correctness in ['correct', 'incorrect', 'unanswered'] assert problem_type in PROBLEM_DICT
current_keys = set(current.keys()) state_keys = set(state.keys())
cert = request._req.subprocess_env.get(certkey, '')
counts = self.get_counters(request) return sum(counts.values()) >= self.requests
from salt.modules import varnish
Xt = X for name, transform in self.steps[:-1]: Xt = transform.transform(Xt) return self.steps[-1][-1].decision_function(Xt)
config_course_cohorts( course, is_cohorted=True, auto_cohorts=["AutoGroup"] )
stats_a = os.stat(filename_a) stats_b = os.stat(filename_b) return stats_a.st_dev == stats_b.st_dev;
if self.algorithm not in ('SAMME', 'SAMME.R'): raise ValueError("algorithm %s is not supported" % self.algorithm)
config.save() self.assertEqual(config.mode, 'edit') self.assertEqual(message, config.validation_message)
if isinstance(data, collections.Mapping): data_dict.update(data)
estimator.set_params(k=1)
self.submit_question_answer('H1P1', {'2_1': 'Correct', '2_2': 'Correct'}) self.check_grade_percent(0.25)
self.login_page.visit()
if os.getuid() == 0 and not salt.utils.is_windows(): os.kill(parent_pid, 0)
world.wait_for_ajax_complete()
signal_handler.reset_mock() unit = self.store.create_child(self.user_id, subsection.location, 'vertical') signal_handler.send.assert_not_called()
if (llx <= ans_x <= urx) and (lly <= ans_y <= ury): correct_map.set(aid, 'correct') break
from __future__ import absolute_import import os import base64 import logging
self.go_to_tab_and_assert_problem(2, self.problem2_name)
__virtualname__ = 'hg'
self.check_index_and_outline(self.client)
iris = datasets.load_iris()
if current_options: current_options = current_options[next(iter(current_options))] if default_options: default_options = default_options[next(iter(default_options))]
self._build_data_specs()
ws.close()
ofile.writelines(lines)
self.chapter1 = ItemFactory.create( parent_location=self.course.location, category='chapter', display_name='untitled chapter 1' )
removed_tab = tab_ids.pop(num_orig_tabs / 2) self.assertTrue(len(tab_ids) == num_orig_tabs - 1)
self._test_visible_to_students(True, 'public_released', self.past, publish=True)
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch from salttesting.helpers import ensure_in_syspath
html_domain_indices = False
REQUIREMENTS_DISPLAY_MODES = CourseMode.CREDIT_MODES + [CourseMode.VERIFIED]
Q, _ = linalg.qr(safe_sparse_dot(A, Q), mode='economic') return Q
debian_service.__grains__ = {} debian_service.__salt__ = {} debian_service.__context__ = {} debian_service.__opts__ = {}
social_auths = strategy.storage.user.get_social_auth_for_user( user, provider=self.provider.backend_name) self.assertEqual(0, len(social_auths))
self.alpha = alpha
from __future__ import absolute_import import os import random import string from distutils.version import LooseVersion
if label_type == 'azimuth': data_y = np.cast[config.floatX](data_y / 360.)
return iter(getattr(d, _itervalues)(**kw))
_win(kernel32.GetStdHandle, HANDLE_IHV,
if not salt.utils.is_proxy(): self.io_loop.spawn_callback(salt.engines.start_engines, self.opts, self.process_manager)
import sys import time import datetime
assert key.user_id == self.user.id
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
max_depth = node_indicator.sum(axis=1).max() assert_less_equal(est.tree_.max_depth, max_depth)
if not settings.FEATURES.get('ENABLE_VIDEO_UPLOAD_PIPELINE'): filtered_list.append('video_upload_pipeline')
script = "raise Exception('test')" problem = self.build_problem(answer=script)
if ( settings.FEATURES.get('AUTH_USE_SHIB') and course.enrollment_domain and course.enrollment_domain.startswith(SHIBBOLETH_DOMAIN_PREFIX) ): return redirect_with_get('shib-login', request.GET)
if assignment_type: self.set_assignment_type(assignment_type)
child.display_name = 'Changed Display Name' self.store.update_item(child, user_id=self.user_id)
if self._sample_switch: self._apply_corruption(activations, self._layer_samplers, idx_iter) return activations
store_outcome_parameters(params, request.user, lti_consumer)
perms = eauth.get(token['name'], []) perms.extend(eauth.get('*', []))
if create_after_overview: self.set_config(enabled=False)
self.q(css="input[name=authorize]").click()
'-oStrictHostKeyChecking=no', '-oUserKnownHostsFile=/dev/null', '-oControlPath=none'
link_cohort_to_partition_group( test_cohort, self.user_partition.id, self.groups[0].id, ) self.assert_student_in_group(self.groups[0])
from __future__ import unicode_literals
max_date = block_data.edit_info.edited_on max_date_by = block_data.edit_info.edited_by
diff[key] = changes_needed[key]
assert_raises(ValueError, _fast_dot, A.T, np.array([A, A]))
num_braces = 0
import logging import time import salt.ext.six as six
from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON, )
from __future__ import absolute_import import salt.runner
self._set_gender(None) self.assertIsNone(self.profile.gender_display)
test_model = CourseMetadata.fetch(self.fullcourse) self.assertNotIn('edxnotes', test_model)
item.sub = filename
ret['result'] = True ret['prefix'] = '' ret['version_spec'] = []
if request.content_type != MergePatchParser.media_type: raise UnsupportedMediaType(request.content_type) return Response(update_thread(request, thread_id, request.data))
htpasswd.__salt__ = {}
if not sparse.issparse(X) or has_sw: solver = 'cholesky' else: solver = 'sparse_cg'
X2 = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]
data['event_type'] = "re_validate" self.assert_request_status_code(200, url, method="POST", data=data)
grad_shared = sharedX(zv) z_shared = sharedX(zv)
assert (np.diag(cm)[:-1] > np.diag(cm)[1:]).all()
manage_directory(dirname) vdir.add(dirname)
'keep_jobs': int,
if refresh: refresh_db()
import salt.utils from salt.ext.six import string_types
return self.q(css='li.prerequisites > .tip').visible
self.assertTrue(user(email).is_active)
self.coach = AdminFactory.create(password="test") self.client.login(username=self.coach.username, password="test")
try: from Crypto.Util import asn1 import OpenSSL HAS_DEPS = True except ImportError: HAS_DEPS = False
from __future__ import absolute_import import logging
ret = self.run_script( 'salt-call', '-c {0} --output-file={1} test.versions'.format( self.get_config_dir(), output_file_append ), catch_stderr=True, with_retcode=True )
return None
@context_cache def _test_set_cache(): pass _test_set_cache()
lr = LogisticRegression() gnb = GaussianNB() svc = LinearSVC(C=1.0) rfc = RandomForestClassifier(n_estimators=100)
return self.q(css=self._bounded_selector('{} p.{}'.format(self.VALIDATION_SELECTOR, css_class)))
mathjax_container = self.q(css="div.problem div.problem-hint .MathJax_SVG") return mathjax_container.visible and mathjax_container.present
import sklearn
test_discussion = self.store.create_child(self.user.id, course.location, 'discussion', 'test_discussion')
self.notes_page.wait_for_ajax()
self.create_credentials_config(enable_learner_issuance=False) actual = get_user_program_credentials(self.user) self.assertEqual(actual, [])
continue
del params["terms_of_service"] assert_terms_of_service_error("You must accept the terms of service.")
return (retrieve_all, kwargs)
if key: return salt.utils.traverse_dict_and_list(defaults, key, default) else: return defaults
self.events.append(event)
super(TestPublishOverExportImport, self).setUp() self.user_id = ModuleStoreEnum.UserID.test self.export_dir = mkdtemp() self.addCleanup(rmtree, self.export_dir, ignore_errors=True)
raise NotImplementedError
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
nav_dict = dict()
files[name].append(pid) files[name] = sorted(set(files[name]))
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
if terminal_converter is None: return node else: return terminal_converter(node)
return reverse_func(view_name, args=[unicode(course.id), index])
microsite.set_by_domain(self.microsite_subdomain) self.assertTrue(microsite.is_request_in_microsite())
start = TODAY().replace(tzinfo=pytz.UTC) override_field_for_ccx(ccx, course, 'start', start) override_field_for_ccx(ccx, course, 'due', None)
with check_mongo_calls(1): ver_block = modulestore().get_item(self.reverification.location)
self.cohort_management_page.select_cohort_some_inline_discussion() self.assertFalse(self.cohort_management_page.is_save_button_disabled(self.inline_key)) self.assertFalse(self.cohort_management_page.inline_discussion_topics_disabled())
form = self.FORM_CLASS(self.form_data, initial=getattr(self, 'initial', None)) self.assertEqual(form.is_valid(), expected_valid) return form
total_num_subtasks = _get_number_of_subtasks(total_num_items, items_per_task) subtask_id_list = [str(uuid4()) for _ in range(total_num_subtasks)]
ret.append('.'.join(comps[:comps.index('ko')]))
resp_status = self.client.get( reverse_course_url( 'import_status_handler', self.course.id, kwargs={'filename': os.path.split(self.bad_tar)[1]} ) )
self.update_masquerade(role='staff') self.verify_show_answer_present(True)
self.assertNotIn('user', constructed)
i18n_service = self.runtime.service(self.mock_block, 'i18n') self.assertIsNotNone(i18n_service) self.assertIsInstance(i18n_service, ModuleI18nService)
from __future__ import absolute_import import sys
tab.is_hidden = request.json['is_hidden'] modulestore().update_item(course_item, request.user.id)
client = getattr(self, api_client) user = getattr(self, user) client.login(username=user.username, password=self.test_password) return client
#html_theme_path = []
DEFAULT_REASON = ugettext_noop("UNKNOWN REASON")
return [(unicode(path_item.usage_key), path_item.display_name) for path_item in path]
assets, count = content_store.get_all_content_for_course(self.course.id) self.assertEqual(count, 2)
return social_user.user.username
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
if self.per_second: seconds = channels['training_seconds_this_epoch'].val_record seconds = np.array(seconds) seconds = seconds.cumsum() x = seconds[x]
return self.backend.award(self, user, evidence_url=evidence_url)
self.assertEqual( len(CourseEnrollment.objects.filter(mode='honor', user_id__in=user_ids)), 0 )
from __future__ import absolute_import
super(BinomialDeviance, self).__init__(1)
if 'id' not in item: item['id'] = item['name'] ret[item['name']] = item
input_dict = {'1_2_1': 'Michigan'} correct_map = problem.grade_answers(input_dict) self.assertEquals(correct_map.get_hint('1_2_1'), "")
from __future__ import absolute_import
alphas = alphas[:n_iter + 1] coefs = coefs[:n_iter + 1]
if 'enabled' not in schedule[job]: schedule[job]['enabled'] = True
self.assertEqual(courses_list, courses_list_by_groups)
with patch('capa.correctmap.CorrectMap.is_correct') as mock_is_correct: mock_is_correct.return_value = False
startup_info = win32process.STARTUPINFO() startup_info.dwFlags = win32con.STARTF_USESTDHANDLES startup_info.hStdInput = stdin_read startup_info.hStdOutput = stdout_write startup_info.hStdError = stderr_write
if not salt_token or not self.auth.get_tok(salt_token): raise cherrypy.HTTPError(401)
raise NotImplementedError("%s does not implement batch_size" % type(self))
context['last_accessed_courseware_url'] = None if SelfPacedConfiguration.current().enable_course_home_improvements: context['last_accessed_courseware_url'] = get_last_accessed_courseware(course, request, user)
if os.getuid() == 0: os.chown(dir_, uid, gid) os.umask(cumask)
output.append('\'{0}\': {1!r}'.format(key, value))
CourseFinanceAdminRole(self.course.id).remove_users(self.instructor)
for fdpath in fd_: try: name = os.path.realpath(fdpath) os.stat(name) except OSError: continue
self.assertTrue(self.cohort_management_page.is_category_selected())
drag_handle_html = '<span data-tooltip="Drag to reorder" class="drag-handle action"></span>' self.assertIn(drag_handle_html, html)
return datetime.fromtimestamp(os.path.getctime(self.path(name)))
#~ asList = False
return open(file_name)
try: import salt.cloud HAS_SALTCLOUD = True except ImportError: HAS_SALTCLOUD = False
self.cart = Order.get_cart_for_user(self.user) CertificateItem.add_to_order( self.cart, self.course_key, self.COST, 'verified' ) self.cart.start_purchase()
socket.setdefaulttimeout(10)
import salt.utils.compat
#needs_sphinx = '1.0'
p.join()
df += int(self.smooth_idf) n_samples += int(self.smooth_idf)
group_vpc = conn.create_security_group(name=group_name, description=group_description, vpc_id=vpc_id) retrieved_group_id = boto_secgroup.get_group_id(group_name, group_vpc, **conn_parameters) self.assertEqual(group_vpc.id, retrieved_group_id)
clf = AdaBoostClassifier(RandomForestClassifier()) clf.fit(X, y_regr)
if not any( (salt.utils.compare_versions(ver1=x, oper='>=', ver2=candidate, cmp_func=version_cmp) for x in installed) ): ret[name] = candidate
if 'children' in qualifiers: settings['children'] = qualifiers.pop('children')
if user is None: user = self.user if user not in self.session_data: self.session_data[user] = {} request = Mock(user=user, session=self.session_data[user]) _load_preview_module(request, descriptor)
masked_terminal_regions = terminal_regions.copy() masked_terminal_regions[~sample_mask] = -1
result = staticfiles.finders.find('images/favicon.ico') self.assertEqual(result, settings.REPO_ROOT / 'lms/static/images/favicon.ico')
if not correct: second_addend += random.randint(1, 10)
self.assertEqual(rendered_html.tag, "div")
return render_body(obj["body"])
if not isinstance(library_key, LibraryLocator): library_key = LibraryLocator.from_string(library_key) try: return self.store.get_library( library_key, remove_version=False, remove_branch=False, head_validation=False ) except ItemNotFoundError: return None
assert_extra_field_error()
zk_concurrency.__salt__ = {} zk_concurrency.__opts__ = {}
qs_args = { 'issuing_component': badge_class.issuing_component, 'slug': badge_class.slug, } if check_course: qs_args['course_id'] = self.get_course_id(wildcard, badge_class) return qs_args
random_state = check_random_state(0) tsne = TSNE(verbose=2) X = random_state.randn(5, 2)
salt.utils.verify.check_path_traversal(self.opts['cachedir'], key_user, self.skip_perm_errors)
if 'port' in _options: _options['port'] = int(_options['port']) return _options
user_partitions = UserPartitionList( help=_("The list of group configurations for partitioning students in content experiments."), default=[], scope=Scope.settings )
if 'admin_source' not in kwargs: os.unlink(adminfile)
default_test_id = ( "{system}/djangoapps/*" " common/djangoapps/*" " openedx/core/djangoapps/*" " openedx/tests/*" " openedx/core/lib/*" )
return _click_edit(self, '.edit-button', '.xblock-studio_view')
estimators = [] estimators_samples = [] estimators_features = []
get_tracker.side_effect = Exception self.assertEquals( self.middleware.process_response(self.request, self.response), self.response )
assert x.ndim == 4 x_axes = self.input_axes assert len(x_axes) == 4
from salt.pillar import consul_pillar
try: os.makedirs(directory) except OSError as exc: if exc.errno == errno.EEXIST: pass else: raise
self._assert_course_verification_status(None)
self.video.reload_page()
from salt.modules import smtp
return self._folds[0].get_params()
MESSAGE = _('The underlying module store does not support import.')
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
if profile in current_state: ret['result'] = True ret['comment'] = 'System already in the correct state' return ret
from __future__ import absolute_import import os import logging import pwd import shutil
_ = lambda text: text
SERVICE_VARIANT = os.environ.get('SERVICE_VARIANT', None)
for pool_size in [1, 2, 5]: n = num_pools * pool_size
lines[ind] = ''
self._assert_survey_redirect(self.course)
'ENABLE_VIDEO_BEACON': False,
data_y = None if label_type is not None: data_y = data[label_type].reshape(-1, 1)
from napalm import get_network_driver HAS_NAPALM = True
jid_dir, jid_file = self._make_tmp_jid_dirs(create_files=False)
from salt.states import mongodb_user
if cache_file and cache_file.startswith('salt:'):
ItemFactory.create( parent=parent, category='discussion', display_name='scheduled', start=self.future, )
return os.path.realpath(module.__path__[0])
class_name = getattr(block, 'unmixed_class', block.__class__).__name__
self.distribution.salt_installing_pycrypto_windows = True self.run_command('install-pycrypto-windows') self.distribution.salt_installing_pycrypto_windows = None
assert_almost_equal(s, 2.0/3.0)
group = RandomUserPartitionScheme.get_group_for_user( self.MOCK_COURSE_ID, self.user, self.user_partition, assign=False )
'tcp_keepalive': bool,
if len(P.shape) == 2: P = squareform(P) kl_divergence = 2.0 * np.dot(P, np.log(P / Q))
for n_comp in np.arange(1, d): pca = PCA(n_components=n_comp, svd_solver='arpack', random_state=0)
self.config.pop(cli_log_file_datefmt)
self.assertIn('<div class="courses no-course-discovery"', response.content)
verify_group_id_present(profiled_user=self.student, pass_group_id=True) verify_group_id_present(profiled_user=self.moderator, pass_group_id=True) verify_group_id_present( profiled_user=self.student, pass_group_id=True, requested_cohort=self.student_cohort )
assert_warns(UserWarning, BaggingClassifier(base_estimator=base_estimator, n_estimators=1, bootstrap=True, oob_score=True, random_state=rng).fit, X_train, y_train)
if self.transcripts: for language in self.transcripts.keys(): _update_transcript_for_index(language)
self.course_info['number'] = self.unique_id[0:6]
_ALL_ONES = (2**IPV4LENGTH) - 1 _DECIMAL_DIGITS = frozenset('0123456789')
raise SaltCloudConfigError( 'Either an instance (or list of names) or a provider must be ' 'specified, but not both.' )
corr = safe_sparse_dot(y, X) corr /= row_norms(X.T) corr /= norm(y)
break
student_module.save(force_update=True)
if not sparse.issparse(X): iter_func = iter else: iter_func = _iterate_sparse_X
from textwrap import dedent
os.remove(tmp.name)
iptables.__grains__ = {} iptables.__salt__ = {} iptables.__context__ = {} iptables.__opts__ = {}
for course in [shib_course, open_enroll_course]: for student in [shib_student, other_ext_student, int_student]: request = self.request_factory.post('/change_enrollment')
self._reset_event_aggregation() self.local.event.set_event_handler(self._process_event)
moosefs.__salt__ = {}
X_blobs, y_blobs = make_blobs(n_samples=100, centers=10, random_state=0) X_blobs = sparse.csr_matrix(X_blobs)
return urlparse(handler_url(self.block, handler_name, suffix=suffix)).path
opts = next(six.itervalues(pillar)) prepend_reclass_source_path(opts) break
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
if d_yard in self.lane_stack.value.nameRemotes: self.lane_stack.value.transmit(msg, self.lane_stack.value.nameRemotes[d_yard].uid) return
self.assertEqual( self.run_function('xattr.delete', [NO_FILE, 'spongebob']), 'ERROR: File not found: {0}'.format(NO_FILE))
import multiprocessing import os
from __future__ import absolute_import, generators, print_function, with_statement import re import logging
if not cached_file: log.error('Unable to cache {0}'.format(cache_file)) ret[pkg_name] = { 'failed to cache cache_file': cache_file } continue
return self.q(css='.discussion-module .new-post-btn').present
self.browser.refresh()
__virtualname__ = 'pecl'
dependency_dict = defaultdict(lambda: defaultdict(set))
u'{user}@example.com'.format( user=(u'e' * (EMAIL_MAX_LENGTH - 11)) )
ret = client.get_datastore(DatastoreType.RUNNING) GRAINS_CACHE.update(ret) return GRAINS_CACHE
for page in self.pages: page.visit()
from __future__ import absolute_import import os import shutil import tempfile
conv_first_part = ConvElemwise(8, [2, 2], 'sf1', SigmoidConvNonlinearity(), .1) mlp_first_part = MLP(layers=[conv_first_part], input_space=Conv2DSpace(shape=[5, 5], num_channels=2))
if service_name == 'SSH' or service_name == 'ssh': temp_service_name = 'TSM-SSH' else: temp_service_name = service_name
if process_manager._process_map.keys(): process_manager.send_signal_to_processes(signal.SIGILL) process_manager.stop_restarting() process_manager.kill_children()
imputer = Imputer(missing_values, strategy=strategy, axis=0) imputer.fit(sparse.csc_matrix(X)) X_trans = imputer.transform(sparse.csc_matrix(X.copy()))
body = self.q(css=selector)[0] ActionChains(self.browser).move_to_element(body).perform() return self
prior = DiagonalGaussianPrior() vae = DummyVAE() prior.set_vae(vae) prior.initialize_parameters(nhid=5) z = T.tensor3('z') prior.log_p_z(z)
pass
if isinstance(course_descriptor, ErrorDescriptor): return course_descriptor
self.assertEqual(len(httpretty.httpretty.latest_requests), 3)
many_days = datetime.timedelta(days=60)
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
return self.conditional.get_params()
try: from .tools import websockets from . import event_processor
response = self.session.post( url, data=self._encode_post_dict(details), headers=self.headers, )
user = User.objects.get(email=email) user.set_password(new_password) user.save() history = PasswordHistory() history.create(user)
current_umask = os.umask(0o027) verify_files([logfile], self.config['user']) os.umask(current_umask)
axis = self.view_converter.axes.index('b') return axis
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
assert_almost_equal(X_unwhitened.std(axis=0).std(), 74.1, 1)
raise SaltClientError(msg)
log.trace('{0} already removed, skipping'.format(mod_key)) continue
if (n_inliers_best >= self.stop_n_inliers or score_best >= self.stop_score or self.n_trials_ >= _dynamic_max_trials(n_inliers_best, n_samples, min_samples, self.stop_probability)): break
else: from . import __check_build from .base import clone
with self.assertRaises(KeyError): data.get('block', 'foo')
coach_user = User.objects.create_user('test_coach_user', 'test_coach_user@openedx.org', 'test') CourseCcxCoachRole(self.master_course_key).add_users(coach_user)
self.assert_grade(problem, "Second", "correct") self.assert_grade(problem, "second", "correct")
import os import logging
response = salt.utils.vmware.esxcli(host, username, password, cmd, protocol=protocol, port=port) ret.update({host: response})
test_uuid = uuid.UUID(token, version=1) self.assertEqual(token, test_uuid.hex)
return "{};q={}".format(lang, priority)
self.__restore_sysctl()
time.sleep(5)
FOOD_CONTAINER = 3 FRUIT = 4 FURNITURE = 6 INSECTS = 7 LARGE_OMNIVORES_HERBIVORES = 11 MEDIUM_MAMMAL = 12
resp = self.client.post(reverse('shoppingcart.views.remove_item', args=[]), {'id': cert_item.id})
_EASY_CHOICE_FEATURES = ('gender', 'level_of_education') _OPEN_CHOICE_FEATURES = ('year_of_birth',)
centos7-2-iad-rackspace: provider: rackspace-iad size: general1-2 block_device: - source: image id: <image_id> dest: volume size: 100 shutdown: <preserve/remove> bootindex: 0
last_modified_at_str = content.last_modified_at.strftime(HTTP_DATE_FORMAT) if 'HTTP_IF_MODIFIED_SINCE' in request.META: if_modified_since = request.META['HTTP_IF_MODIFIED_SINCE'] if if_modified_since == last_modified_at_str: return HttpResponseNotModified()
_, s, _ = linalg.svd(X, full_matrices=False)
settings.DEFAULT_TEMPLATE_ENGINE['DIRS'] = [ path for path in settings.DEFAULT_TEMPLATE_ENGINE['DIRS'] if path != settings.MICROSITE_ROOT_DIR ]
args = [_sdecode(name)] if kill: args.append('--kill')
if __grains__['os_family'] == 'RedHat': output = _cmd('at', '-l') else: output = _cmd('atq')
set_pw_cmd = "shadow.set_password {0} '{1}'".format( self.userA, password if salt.utils.is_darwin() else hashed_pwd ) self.run_call(set_pw_cmd)
signal.signal(signal.SIGINT, self.signal_handler)
self.assertEqual(fetched.discussion_id, discussion_item.discussion_id) self.assertEqual(fetched.discussion_id, refetched.discussion_id)
from __future__ import unicode_literals
return self.q(css='.CodeMirror-scroll').present
changes_needed = True
continue
draft = 'draft' published = None
if profile_country is not None: self.user.profile.country = profile_country self.user.profile.save()
response = self.client.get(test_url) self.assertIn(str(self.cert.verify_uuid), response.content)
kwargs['base_url'] = os.environ.get('DOCKER_HOST')
Y = np.dot(U, V)
if isinstance(obj, OpaqueKey): return unicode(obj) return JSONEncoder.default(self, obj)
cherrypy.response.headers['Cache-Control'] = 'private'
self.wait_for_field(field_id) query = self.q(css='.u-field-{} {}'.format(field_id, field_type)) if query.present: query.first.click()
import salt.utils
from __future__ import absolute_import import logging
group_a_item_1_delete_index = 1 self.delete_and_verify(group_a_item_1_delete_index, expected_ordering)
if exc.errno != errno.EEXIST: raise
clf = ForestClassifier(class_weight='the larch', random_state=0) assert_raises(ValueError, clf.fit, X, y) assert_raises(ValueError, clf.fit, X, _y)
sections.append(_section_analytics(course, access))
for student in students[0:MAX_SCREEN_LIST_LENGTH + 1]: results.append({ 'name': student['student__profile__name'], 'username': student['student__username'], })
score_subset = base_estimator.score(X_inlier_subset, y_inlier_subset)
"payment_url": get_purchase_endpoint(),
SINGLE_EMAIL_FAILURE_ERRORS = (
all_modes, unexpired_modes = CourseMode.all_and_unexpired_modes_for_courses([course_key])
from salt.modules import postgres from salt.exceptions import SaltInvocationError
X = [[0, 1], [1, 0]] for n_components in [-1, 0, .99, 3]: assert_raises(ValueError, IncrementalPCA(n_components, batch_size=10).fit, X)
res = linkage_tree(X, affinity=manhattan_distances) assert_array_equal(res[0], linkage_tree(X, affinity="manhattan")[0])
admin = AdminFactory.create()
if strategy == "median": cols_to_keep = ~np.isnan(X_true).any(axis=0) else: cols_to_keep = ~np.isnan(X_true).all(axis=0)
self.assertEqual(module.attempts, 1)
self._submit_photos( face_image=self.IMAGE_DATA, photo_id_image=self.IMAGE_DATA )
@method_decorator(csrf_exempt) def dispatch(self, request, *args, **kwargs): return super(CreditCourseViewSet, self).dispatch(request, *args, **kwargs)
self.assertTrue(certificate_generation_history.exists())
self.assertIn('wrapper-xblock-message', html) self.assertNotRegexpMatches(html, r'wrapper-xblock[^-]+')
if policy == {}:
from __future__ import absolute_import import logging import os
def rval(a): return (a * self.y_cache).sum(axis=1) return rval
yield check_estimators_pickle
upload_csv_to_report_store(rows, 'may_enroll_info', course_id, start_date)
check_predictions(LogisticRegression(random_state=0), X, Y1) check_predictions(LogisticRegression(random_state=0), X_sp, Y1)
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor' )
assert_equal(n_splits[i], cv.get_n_splits(X, y, labels))
response_dict = self.request_add_users_to_cohort("", self.cohort1, self.course) self.verify_added_users_to_cohort( response_dict, self.cohort1, self.course, expected_added=[], expected_changed=[], expected_present=[], expected_unknown=[] )
self.cohort_management_page.select_cohort(cohort_name) self.cohort_management_page.set_cohort_associated_content_group(content_group) self._verify_settings_saved_and_reload(cohort_name)
_view_name = None client_class = PatchedClient
xgrid = np.arange(xmin, xmax, batch.grid_size) ygrid = np.arange(ymin, ymax, batch.grid_size)
if keyname(vm_) is None: raise SaltCloudSystemExit( 'The required \'keyname\' configuration setting is missing from the ' '\'ec2\' driver.' )
def __discover_version(saltstack_version): import os import subprocess
if win32api.GetUserName() == 'SYSTEM': return runas_system(cmd, username, password)
with check_mongo_calls(chapter_queries_1): self.client.get(outline_url, HTTP_ACCEPT='application/json')
self.process_manager.stop_restarting() self.process_manager.send_signal_to_processes(signum) self.process_manager.kill_children()
sequential.display_name = 'sequential1' sequential = self.store.update_item(sequential, self.user_id) self.assertTrue(self.store.has_published_version(sequential))
return self._folds[k]
self.assertEqual(jid_file, None)
kwargs.update({'state': comps[0], 'fun': comps[1], '__id__': name, 'name': name})
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
for line in response: splt = line.split(':', 1) splt[0] = splt[0].strip() splt[1] = splt[1].strip()
return ['--local']
refresh_db() return ret
self.assertEqual( ImportTestCase.date.to_json(ImportTestCase.date.from_json(course_due)), child.xblock_kvs.inherited_settings['due'] )
from __future__ import absolute_import, print_function
self.store.convert_to_draft(self.vertical_x1a, self.user_id) item = self.store.get_item(self.vertical_x1a) self.assertTrue(self.store.has_published_version(item))
user_preference = kwargs["instance"] user_preference._old_value = get_changed_fields_dict(user_preference, sender).get("value", None)
self.collection.database.connection.close()
return []
self._fill_flat(nested, self.spec_mapping, rval)
registration.activate()
import salt.ext.six as six
from __future__ import absolute_import import time
components = rng.binomial(1, 0.5, (n_components, n_features)) * 2 - 1 return 1 / np.sqrt(n_components) * components
if self.credit_type[0] not in graders: raise LoncapaProblemError('partial_credit attribute should be one of: ' + ','.join(graders))
extra = kwargs.get('extra', {})
return self.q(css='.wrapper-xblock.level-page .studio-xblock-wrapper').filter( lambda el: el.get_attribute('data-locator') == xblock_id )
self.assertEqual(str(ret['LIGHT_YELLOW']), str(ret['LIGHT_GRAY']))
options = _get_options(ret=None)
self.login_student() self.submit_answer('Correct', 'Correct') self.assertEqual(self.get_progress_detail(), u'2/2')
log_prob_of = (Y * log_prob).sum(axis=1) masked = log_prob_of * drop_mask_Y assert masked.ndim == 1
if not properties: properties = {}
return os.path.join(__opts__['cachedir'], 's3cache')
stress = ((dis.ravel() - disparities.ravel()) ** 2).sum() / 2
raise NotImplementedError()
if not hasattr(view_converter, 'topo_space'): raise NotImplementedError("Not able to get a topo_space " "from this converter: %s" % view_converter)
from __future__ import absolute_import import collections
__virtualname__ = 'zpool'
import integration from salt.config import cloud_providers_config
MULTIOUTPUT_METRICS = [ "mean_absolute_error", "mean_squared_error", "r2_score", "explained_variance_score" ]
log.debug('generated search string: {0}'.format(search_string)) return self.Search(search_string)
dbm = make_random_basic_binary_dbm( rng = rng, pool_size_1 = pool_size_1,
self.suffix_map = {}
stamp = time.strftime('%a_%b_%d_%H-%M-%S_%Y')
if not validate_trust_root(openid_request): return default_render_failure(request, "Invalid OpenID trust root")
self.assertIn(SESSION_KEY, self.client.session)
self._each_parens(r'\left\{x^y\right\}', 'x^y', '{', tall=True)
cache_values = cache.get_many([ enrollment_cache_key, has_skipped_cache_key, verification_status_cache_key ])
options.ignore = ('',) if options.select else tuple(options.ignore)
about_location = self.make_course_key(org, course, run).make_usage_key('about', 'overview')
credit_state = self.service.get_credit_state(self.user.id, self.course.id) self.assertEqual(credit_state['credit_requirement_status'][0]['status'], None)
img = circle1 + circle2 + circle3 + circle4
from __future__ import unicode_literals
self.student_answers = dict() self.correct_map = CorrectMap() self.done = False
self.assertTrue( self.run_function('xattr.delete', [TEST_FILE, 'squidward']))
min_indices = d_chunk.argmin(axis=1) min_values = d_chunk[np.arange(chunk_x.stop - chunk_x.start), min_indices]
assert key.user_id == self.user.id
Y_neg = Y.copy() Y_neg[0, 0] = -1 assert_raises(ValueError, transform.transform, Y_neg)
votes = np.round(ovo_decision) normalized_confidences = ovo_decision - votes
return self.q(css='button.start-timed-exam[data-start-immediately="false"]').is_present()
from edx_oauth2_provider.tests import IDTokenTestCase, UserInfoTestCase
apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
if not isinstance(err, ImportError): log.error('Import pygit2 failed: {0}'.format(err))
import salt.utils
'Content-Type': content_type,
from __future__ import absolute_import
ret.setdefault('updated branches', {})[ref_name] = \ {'old': old_sha, 'new': new_sha}
provider = PaidCourseEnrollmentReportProvider() self.assertIsNotNone(provider) self.assertTrue(isinstance(provider, PaidCourseEnrollmentReportProvider))
with make_uploaded_file( dimensions=(1, 1), extension=".png", content_type="image/png", force_size=upload_size ) as uploaded_file: self.check_validation_result(uploaded_file, expected_failure_message)
import salt.crypt import salt.utils import salt.client import salt.exceptions import salt.utils.event import salt.daemons.masterapi from salt.utils import kinds from salt.utils.event import tagify
if not done: ret['result'] = False if not quiet: __jid_event__.fire_event({'message': ret}, 'progress') return ret
for i in range(9): i += 13 registration_code_redemption = RegistrationCodeRedemption( registration_code_id=i, redeemed_by=self.instructor ) registration_code_redemption.save()
center_id = random_state.randint(n_samples) if sp.issparse(X): centers[0] = X[center_id].toarray() else: centers[0] = X[center_id]
d_clf = ElasticNet(alpha=alpha, l1_ratio=0.8, fit_intercept=fit_intercept, max_iter=max_iter, tol=1e-7, positive=positive, warm_start=True) d_clf.fit(X_train.toarray(), y_train)
task_definition = task_folder.GetTask(name).Definition
import salt import salt.utils import salt.utils.url import salt.fileclient from salt.utils.odict import OrderedDict
self.find_css('.action-primary').first.click() self.wait_for_ajax()
url( r'^courses/{}/instructor$'.format( settings.COURSE_ID_PATTERN, ), 'instructor.views.instructor_dashboard.instructor_dashboard_2', name='instructor_dashboard', ),
return 1 / numpy.cosh(arg)
comments.append( 'Container \'{0}\' is already configured as specified' .format(name) )
from __future__ import absolute_import from contextlib import contextmanager
if session_status[courselike_string] != 4: _save_request_status(request, courselike_string, -abs(session_status[courselike_string]))
return 'xqueue/submit' in self.path
ret = self.get_cache_returns(jid) if ret != {}: found.update(set(ret)) yield ret
comment = kwargs['post'] handle_activity(kwargs['user'], comment, long(comment.thread.user_id))
clf = svm.NuSVC(nu=0.0) assert_raises(ValueError, clf.fit, X, Y)
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=status, )
return self.q(css='.wrapper-release .title').first.text[0]
return self.q(css="#search_attempt_id").present
ips = sorted(set(ips)) nets = sorted(set(nets))
FEATURES['ENFORCE_PASSWORD_POLICY'] = False FEATURES['ENABLE_MAX_FAILED_LOGIN_ATTEMPTS'] = False FEATURES['SQUELCH_PII_IN_LOGS'] = False FEATURES['PREVENT_CONCURRENT_LOGINS'] = False FEATURES['ADVANCED_SECURITY'] = False
y = np.array([3, 7, 5, 9, 8, 7, 10]) x = np.arange(len(y))
self.course_outline_page.visit() section = self.course_outline_page.section_at(0) section.subsection_at(0).set_staff_lock(True) self.assertFalse(section.has_staff_lock_warning)
check_node(child.location, None, after_create, self.user_id, None, after_create, self.user_id)
__valid_configs = { 'user': [ 'tomcat-manager.user', 'tomcat-manager:user' ], 'passwd': [ 'tomcat-manager.passwd', 'tomcat-manager:passwd' ] }
evaluate_prerequisite(self.course, self.prob2.location, self.user.id) self.assertFalse(mock_module_score.called)
return [program['course_codes'][cc]['display_name'] for cc in course_codes]
file_handle.write(asbytes(length.ljust(_MAX_LEN))) file_handle.write(zlib.compress(asbytes(data), compress))
decision_only = OneVsRestClassifier(svm.SVR()).fit(X_train, Y_train) assert_raises(AttributeError, decision_only.predict_proba, X_test)
url(r'^gradebook$', 'instructor.views.gradebook_api.spoc_gradebook', name='spoc_gradebook'),
if not slsmod: errors.append( 'Environment {0} contains an empty sls ' 'index'.format(saltenv) )
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
'LOG_POSTPAY_CALLBACKS': True,
exc_info_on_loglevel=logging.DEBUG
assert_equal(len(lars.alphas_), 7)
'django_comment_common',
return { 'qty': self.qty, 'unit_price': unicode(self.unit_price), 'currency': self.currency }
HAS_RANGE = False try: import seco.range HAS_RANGE = True except ImportError: log.error('Unable to load range library')
response = self.http_get_for_course(HTTP_AUTHORIZATION=None) self.assertEqual(response.status_code, 401)
def test_linearsvx_loss_penalty_deprecations(): X, y = [[0.0], [1.0]], [0, 1]
from salt.states import http
pipeline = preprocessing.Pipeline() pipeline.items.append(preprocessing.GlobalContrastNormalization(batch_size=5000)) pipeline.items.append(preprocessing.LeCunLCN((32,32)))
is_redeemed = RegistrationCodeRedemption.objects.filter( registration_code=reg_code ).exists() self.assertFalse(is_redeemed)
#add_module_names = True
config = os.path.splitext(os.path.basename(path))[0]
try: return self[key] except KeyError: return default
if self.display_coursenumber: return self.display_coursenumber return self.number
courseware_page = CoursewarePage(self.browser, self.course_id) self.publish_unit_and_verify_groups_in_lms(courseware_page, [u'Group A', u'Group B', u'Group C'])
clf = GradientBoostingRegressor(n_estimators=100, random_state=1, max_features=0) assert_raises(ValueError, clf.fit, X, y)
create_collection_index(self.collection, '_id.category', background=True)
BODY_SELECTOR = "#tags-panel" TAB_SELECTOR = ".tab#view-tags" CHILD_SELECTOR = ".note-group" CHILD_CLASS = EdxNotesTagsGroup
return False
self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 1)
return request.POST.get('client_id')
from __future__ import absolute_import
self.contentstore = MongoContentStore(HOST, DB, port=PORT)
values = ','.join(values)
self.assertEqual(tab.link_func(self.course, self.reverse), expected_link)
resp = self.client.get('/') self.assertEquals(resp['X-Frame-Options'], 'ALLOW')
self.course_id = course_key self.cached_metadata = cached_metadata
from __future__ import absolute_import import collections import itertools import functools import logging import json import StringIO import tarfile import time from multiprocessing import Process, Pipe
from __future__ import absolute_import
__opts__['test'] = orig_test return ret
self.update_masquerade(role='staff') self.assertEqual(self.get_progress_detail(), u'0/2')
def frombuffer_empty(buf, dtype): if len(buf) == 0: return np.empty(0, dtype=dtype) else: return np.frombuffer(buf, dtype=dtype)
obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')
r2_scorer = make_scorer(r2_score) mean_squared_error_scorer = make_scorer(mean_squared_error, greater_is_better=False) mean_absolute_error_scorer = make_scorer(mean_absolute_error, greater_is_better=False) median_absolute_error_scorer = make_scorer(median_absolute_error, greater_is_better=False)
prefix = self.idp_slug + ":" return self.backend_name == social_auth.provider and social_auth.uid.startswith(prefix)
import salt.utils
for i in fxs: l.append(feature_names[i]) names.append(l)
return self.q(css=".certificates").present
from __future__ import unicode_literals
for field in InheritanceMixin.fields.values(): if field.is_set_on(descriptor): parent_metadata[field.name] = field.read_json(descriptor)
self.assertEqual(test, expected)
import logging
if existing['code'] == 200:
NOTES_DISABLED_TABS = ['course_structure', 'tags']
face = face.mean(axis=2)
mylocalrepo: git.config_set: - name: mysection.myattribute - multivar: - foo - bar - baz - repo: /path/to/repo
selected_choices = [key for key in a_dict if key.endswith("bc")] for key in selected_choices: binary_choices[key] = a_dict[key]
title = ugettext_noop("Textbooks") is_collection = True is_default = False
self._verify_unit_warning( self.UnitState(is_released=True, publish_state=self.PublishState.NEVER_PUBLISHED, is_locked=False), self.NEVER_PUBLISHED_WARNING )
ret['destroy'] = exist.difference(defined)
__salt__['file.replace']( '/etc/default/locale', '^LANG=.*', 'LANG="{0}"'.format(locale), append_if_not_found=True )
third_party_provider = None running_pipeline = None if third_party_auth.is_enabled() and pipeline.running(request): running_pipeline = pipeline.get(request) third_party_provider = provider.Registry.get_from_pipeline(running_pipeline)
self._auto_auth(self.USERNAME, self.EMAIL, False) self.courseware_search_page.visit() self.courseware_search_page.search_for_term(search_term) return search_term in self.courseware_search_page.search_results.html[0]
scaled = scaler.fit_transform(iris.data) separate_pred = km.fit_predict(scaled)
module = CapaFactory.create(attempts=attempts, max_attempts=attempts, done=True) self.assertFalse(module.should_show_save_button())
try: from requests.packages.urllib3 import disable_warnings disable_warnings() except Exception: pass
return {'name': name, 'changes': {}, 'result': True, 'comment': ''}
X = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1]]
influxDBVersionHeader = "X-Influxdb-Version"
strides = None total_buffer_len = None
from salt.modules import bridge
time_isoformat.split('+')[0], "%Y-%m-%dT%H:%M:%S.%f"
from __future__ import absolute_import
if np.any(np.less_equal(precision, 0.0)): raise ValueError("'%s precision' should be " "positive" % covariance_type)
rules_for_course = CountryAccessRule.objects.select_related('country').filter( restricted_course__course_key=course_id )
default="images_course_image.jpg"
block_structure.request_xblock_fields(*cls.FIELDS_TO_COLLECT) cls._collect_max_scores(block_structure)
params.pop('svc') params.pop('anova') params2.pop('svc') params2.pop('anova') assert_equal(params, params2)
'python_bin': None, 'user': 'sandbox',
user = User.objects.get(email=self.notenrolled_student.email) self.assertTrue(CourseEnrollment.is_enrolled(user, self.course.id))
resp = self.create_xblock(category='static_tab') usage_key = self.response_usage_key(resp)
from __future__ import unicode_literals
bulk_write_record = self._get_bulk_ops_record(course_key) if bulk_write_record.active: bulk_write_record.index = updated_index_entry else: self.db_connection.update_course_index(updated_index_entry, course_context=course_key)
import yaml
dns_reply = list() try: dns_reply = dns.resolver.query(peer) except dns.resolver.NoAnswer: continue for dns_ip in dns_reply: ip_only_peers.append(str(dns_ip))
Ensure myelb ELB exists: boto_elb.present: - name: myelb - region: us-east-1 - profile: myelbprofile
super(CrowdsourcehinterProblemPage, self).__init__(browser)
self.cpub = True
else: ret = _load_result(existing, ret)
n_population = 100
return super(XmlDescriptor, cls).parse_xml( etree.fromstring(xml_data), system,
dir_mode = __salt__['config.manage_mode'](dir_mode) file_mode = __salt__['config.manage_mode'](file_mode)
student_count_percent = 0 if total_student_count.get(child.location, 0) > 0: student_count_percent = count_grade * 100 / total_student_count[child.location]
assert np.allclose(X, np.dot(S_, A_.T) + ica.mean_)
self.results = batch()
msg = msg.replace('&#60;', '&lt;')
import salt.utils from salt.states.git import _fail, _neutral_test
import salt.utils import salt.ext.six as six import salt.utils.event from salt._compat import subprocess from salt.utils.network import host_to_ip as _host_to_ip
pass
out += ['.. autosummary::', ''] out += autosum
num_certs = GeneratedCertificate.eligible_certificates.filter(user=self.student).count() self.assertEqual(num_certs, 1)
import salt.utils
__func_alias__ = { 'set_': 'set', 'list_': 'list', }
assert_equal(len(data2cats.filenames), len(data2cats.target)) assert_equal(len(data2cats.filenames), len(data2cats.data))
I_theory = (np.log(sigma_1) + np.log(sigma_2) - 0.5 * np.log(np.linalg.det(cov)))
import logging import copy
test_data = state_run['cmd_|-test_failing_state_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
import collections
self.course.user_partitions.append(self.random_user_partition) self.assertIsNone(get_cohorted_user_partition(self.course))
assert_not_in(attribute, seq.xml_attributes)
MIN_DOCKER = (1, 4, 0) MIN_DOCKER_PY = (1, 4, 0)
if func_code.co_flags & 0x04: name = arg_names[pos_count + keyword_only_count] annotation = annotations.get(name, _empty) parameters.append(Parameter(name, annotation=annotation, kind=_VAR_POSITIONAL))
self.factory(loss="foobar")
self.assertEqual(response.status_code, 200)
if len(names) == 1: return ret[names[0]] return ret
from __future__ import absolute_import import logging
os.makedirs(name)
COURSE_BLOCK_ACCESS_TRANSFORMERS = [ library_content.ContentLibraryTransformer(), start_date.StartDateTransformer(), user_partitions.UserPartitionTransformer(), visibility.VisibilityTransformer(), ]
ORA2_FILE_PREFIX = None
assert_(loaded['a'].yaml_src.find("${TEST_VAR}") != -1) del environ['TEST_VAR']
scaler = StandardScaler(with_mean=False).fit(X) scaler_incr = StandardScaler(with_mean=False)
b = np.zeros((self.dim * 4,))
#unused_docs = []
bandwidth = ET.SubElement(content, 'bandwidth') bandwidth.text = config.get_cloud_config_value( 'bandwidth', vm_, __opts__, default='100', search_global=False )
if not os.access(cwd, os.R_OK): cwd = '/' if salt.utils.is_windows(): cwd = os.tempnam()[:3]
invoice = models.ForeignKey(Invoice, null=True) invoice_item = models.ForeignKey(CourseRegistrationCodeInvoiceItem, null=True)
try: os.remove(trans_tar) except (OSError, IOError): pass
block_wrappers.append(partial( replace_static_urls, getattr(descriptor, 'data_dir', None), course_id=course_id, static_asset_path=static_asset_path or descriptor.static_asset_path ))
good_lines = [line for line in text.split('\n') if not _QUOTE_RE.search(line)] return '\n'.join(good_lines)
self.login() self.api_response(expected_response_code=404, username=other.username)
clf = svm.SVC() clf.fit(X_sp, Y) assert_array_equal(clf.predict([X[2]]), [1.])
self.q(css=self._bounded_selector(".annotator-delete")).first.click() self.wait_for_notes_invisibility("Note is removed.") self.wait_for_ajax() return self
try: course_code_number = int(request.POST['total_registration_codes']) except ValueError: course_code_number = int(float(request.POST['total_registration_codes']))
view_html = proctoring_service.get_student_view( user_id=user_id, course_id=course_id, content_id=content_id, context=context, user_role=user_role_in_course )
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) signal_handler.send.assert_called_with('course_published', course_key=course.id)
import os
if self._user_info is None: user_info = self.get_user_info() if user_info is not None: self._user_info = self.get_user_info() return self._user_info
cmd = 'Get-PSRepository "{0}"'.format(name) no_ret = _pshell(cmd) return name not in list_modules()
status = None
self.attempt_upload_file_and_verify_result(test_case, 'upload_screenshot')
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
import salt.ext.six as six
self._test_view('sitemap_xml', 'application/xml')
import logging
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
import salt.ext.six as six
help=_("What format this module is in (used for deciding which " "grader to apply, and what to show in the TOC)"), scope=Scope.settings,
return
out_shape = [(ishp + tsp) * tshp - tsp for ishp, tshp, tsp in zip(img_shape, tile_shape, tile_spacing)]
children = [] for child in tree: children.append(_merge_children(child, tags))
BULK_EMAIL_MAX_RETRIES = 5
if request.status_code == 204: return True
super(LearnerProfilePage, self).__init__(browser) self.username = username
print(descriptor, descriptor._field_data) self.assertEqual(descriptor.due, ImportTestCase.date.from_json(from_date_string))
return client.programs.complete.post({'completed_courses': course_certificates})['program_ids']
page_number = link_info.split('>')[0].split('&page=')[1]
if name in list_tasks(location):
defaults.__grains__ = {} defaults.__salt__ = {} defaults.__opts__ = {}
'ENABLE_DEBUG_RUN_PYTHON': False,
multi_db = True
data = copy.deepcopy(high) try: rewrite_single_shorthand_state_decl(data) rewrite_sls_includes_excludes(data, sls, saltenv)
for i in range(1, 3): self.tab_nav.go_to_tab("PDF Book {}".format(i))
EDX_PLATFORM_REVISION = dealer.git.Backend(path=REPO_ROOT).revision
with override_settings(REGISTRATION_EXTRA_FIELDS={"country": "required"}): response = self.client.get(self.url) self.assertHttpOK(response)
import logging
ecode = win32process.GetExitCodeProcess(self._handle) if ecode == win32con.STILL_ACTIVE: raise self.exitstatus = ecode
monitoring_dataset = DenseDesignMatrix(X=X)
img.thumbnail((width_sc, height_sc), Image.ANTIALIAS)
if len(names) == 1: return ret[names[0]] return ret
registration_codes = CourseRegistrationCode.order_generated_registration_codes(self.course_key) self.assertEqual(registration_codes.count(), item.qty)
response = self._get_page( 'verify_student_upgrade_and_verify', course.id, expected_status_code=302 ) self._assert_redirects_to_dashboard(response)
course = self.get_item_from_modulestore(self.usage_key) self.assertIn(chap_usage_key, course.children)
from salttesting import skipIf, TestCase from salttesting.helpers import destructiveTest, ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
assert config.mode == "DEBUG_MODE" config.mode = orig_mode
throughputs = benchmark_throughputs(configuration) plot_benchmark_throughput(throughputs, configuration)
if settings.THEME_NAME == "": settings.THEME_NAME = None return
monitoring_dataset = DenseDesignMatrix(X=X)
return self
if settings.FEATURES.get('ENABLE_READING_FROM_MULTIPLE_HISTORY_TABLES'): history_entries += StudentModuleHistory.objects.prefetch_related('student_module').filter( student_module__in=student_modules ).order_by('-id')
return [user.name for user in self.users]
self._studio_add_content(0)
render_args, _ = module.system.render_template.call_args context = render_args[1] self.assertIn(error_msg, context['problem']['html'])
return submit_rescore_problem_for_all_students(self.create_task_request(instructor), InstructorTaskModuleTestCase.problem_location(problem_url_name))
EDX_API_KEY = AUTH_TOKENS.get("EDX_API_KEY")
CertificateGenerationConfiguration.objects.create(enabled=True)
if not hasattr(xblock, '_published_on'): self.modulestore.compute_published_info_internal(xblock) return getattr(xblock, '_published_on', None)
self._iterating = False
descriptor.raw_grader = descriptor.raw_grader
self.assertTrue(filecmp.cmp(path_test, path_out))
log = logging.getLogger(__name__)
import salt.utils
import ioflo.base.deeding
user = User.objects.get(email=self.user.email) self.assertFalse(auth.user_has_role(user, CourseStaffRole(self.course.id)))
read_only_fields = set(update.keys()).intersection( AccountUserSerializer.get_read_only_fields() + AccountLegacyProfileSerializer.get_read_only_fields() )
self.factory().fit(X, Y, intercept_init=np.zeros((3,)))
self.find_css('.action-edit .edit').first.click()
meter = utils.ProgramProgressMeter(self.user, []) self._assert_progress(meter)
lxc_init_interface['clone_from'] = _cloud_get(clone_from, None) if lxc_init_interface['clone_from'] is not None: break
import os
__, count = self.contentstore.get_all_content_for_course(self.course2_key) self.assertEqual(count, len(self.course2_files))
return self._doc_id
enetcv_constrained = ElasticNetCV(n_alphas=3, eps=1e-1, max_iter=max_iter, cv=2, positive=True, n_jobs=1) enetcv_constrained.fit(X, y) assert_true(min(enetcv_constrained.coef_) >= 0)
#])
self.create_programs_config(enable_student_dashboard=False) actual = utils.get_programs_for_dashboard(self.user, self.COURSE_KEYS) self.assertEqual(actual, {})
item_meta['ETag'] = item_meta['ETag'].strip('"')
tag_links = self.q(css=self._bounded_selector(self.TAG_SELECTOR)) if len(tag_links) == 0: return None return[tag_link.text for tag_link in tag_links]
X = np.sort(5 * np.random.rand(40, 1), axis=0) y = np.sin(X).ravel()
mock_get.return_value.content = json.dumps({"1": 2}) self.assertRaises(EdxNotesParseError, helpers.get_notes, self.request, self.course)
source_course = self.store.get_course( source_course.location.course_key, remove_version=False, remove_branch=False )
from salt.modules import htpasswd
H_hat[-1] = Y
log.error('{0} is not a valid mount point, skipping.'.format(mount)) continue
if path_cache is not None: path_cache[block_key] = True
def get_context(self): context = super(TodaysDate, self).get_context() context['date'] = '' return context
courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(courses_list, [])
import os
for label in np.unique(labels): assert_equal(len(np.unique(folds[labels == label])), 1)
self.temp_dir_1 = mkdtemp() self.temp_dir_2 = mkdtemp(dir="")
xblock._edit_info = payload['edit_info']
world.xqueue.config['default'] = response_dict
from __future__ import absolute_import
edxval_api.import_from_xml( video_asset_elem, field_data['edx_video_id'], course_id=course_id )
new_block_info = copy.deepcopy(source_block_info) existing_block_info = dest_structure['blocks'].get(new_block_key, BlockData()) new_block_info.defaults = new_block_info.fields
ret['result'] = None
from __future__ import absolute_import
reparse_data = _get_reparse_data(path)
self.assert_has_text(xml, "//span[@class='status']/span[@class='sr']", status_mark, exact=False)
from matplotlib.finance import quotes_historical_yahoo as quotes_historical_yahoo_ochl
axes = ['b', 0, 1, 'c'] random.shuffle(axes) axes = tuple(axes) print('axes:', axes)
text_content.append(lt_object.get_text().encode('utf-8'))
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
settings_button = world.browser.find_by_css('.settings-button') if len(settings_button) > 0: world.css_click('.settings-button')
self.assertIn('id', team) self.assertIn('discussion_topic_id', team) self.assertEqual(team['id'], self._expected_team_id(team, expected_prefix))
winrepo.__salt__ = {} winrepo.__opts__ = {}
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'parallels', vm_['profile'], vm_=vm_) is False: return False
from salt.exceptions import ( SaltClientError, CommandNotFoundError, CommandExecutionError, SaltInvocationError, )
GEOIP_PATH = REPO_ROOT / "common/static/data/geoip/GeoIP.dat" GEOIPV6_PATH = REPO_ROOT / "common/static/data/geoip/GeoIPv6.dat"
if not diff_quality_percentage_pass: raise BuildFailure("Diff-quality failure(s).")
log = logging.getLogger() log = logging.getLogger(__name__) info = log.info
for i in range(5): i += 1 registration_code_redemption = RegistrationCodeRedemption( registration_code_id=i, redeemed_by=self.instructor ) registration_code_redemption.save()
import integration from salt.config import cloud_providers_config, vm_profiles_config from utils.virtualbox import vb_xpcom_to_attribute_dict, vb_clone_vm, vb_destroy_machine, vb_create_machine, \ vb_get_box, vb_machine_exists, XPCOM_ATTRIBUTES, vb_start_vm, vb_stop_vm, \ vb_get_network_addresses, vb_wait_for_network_address, machine_get_machinestate_str
return self.q(css=TEAMS_HEADER_CSS + ' .page-title')[0].text
version.append(x)
y_pred1 = clf.fit(X7, y6).predict(X7) assert_array_equal(y_pred1, y6)
self.assertContains(response, unicode(self.course.id))
try: certificate_invalidation_data = parse_request_data(request) certificate = validate_request_data_and_get_certificate(certificate_invalidation_data, course_key) except ValueError as error: return JsonResponse({'message': error.message}, status=400)
from salttesting import TestCase from salt.ext.six.moves import range from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
user: fred password: saltybacon private_key: /root/mykey.pem private_key: mykey
return ''
self.find_css('.actions .delete').first.click() confirm_prompt(self.page)
user = data['user'] profile = UserProfile.objects.get(user=user) return profile.name
attributes = {}
return _get_backing_memmap(b)
self.assertEqual(self.client.session.get('attempting_upgrade'), is_upgrade)
os.rmdir(path)
self._api_base = api_base self._configuration = configuration
import salt.states.environ as envstate import salt.modules.environ as envmodule
assert((display_src and display_class) or (not display_src and not display_class))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
from salt.pillar import sqlite3
super(SAMLProviderConfig, self).clean() self.other_settings = clean_json(self.other_settings, dict)
input_dict = {'1_2_1': 'Michigan'} correct_map = problem.grade_answers(input_dict) self.assertEquals(correct_map.get_hint('1_2_1'), "")
try: return set((str(x) for x in thing)) except TypeError: return set((str(thing),))
return self.location.course_key
self.request.user = student self.request.session = {}
ModeCreationPage(self.browser, self.course_id).visit()
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
ellapsed = datetime.now() - start timeout = ellapsed.seconds + 3
MIGRATION_MODULES = { 'social.apps.django_app.default': 'social.apps.django_app.default.south_migrations' }
funparts = cmd.get('fun', '').split('.')
final_obj = OrderedDict(yaml.deserialize(yml_src)) assert obj != final_obj
if 'remove_{0}'.format(collection) not in vmconfig['changed']: vmconfig['changed']['remove_{0}'.format(collection)] = []
self.xml_data = "static 463139" self.xml_url = "8e4cce2b4aaf4ba28b1220804619e41f"
self.course_key = course_key self.role = role self.user_partition_id = user_partition_id self.group_id = group_id self.user_name = user_name
response = client.post(url, data=json.dumps(data), content_type=content_type) self.assertEqual(expected_status, response.status_code) return response
def long_range(start, end): while start < end: yield start start += 1
ret = self.run_function('group.delete', [DEL_GROUP]) self.assertTrue(ret)
_append_list(serv, 'minions', minion) _append_list(serv, 'jids', jid)
ret[minion] = data['full_ret']
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) import os
self.q(css='.button-view').first.click() self._switch_to_lms()
from salt.states import postgres_database
parent = np.arange(n_nodes, dtype=np.intp) used_node = np.ones(n_nodes, dtype=bool) children = [] if return_distance: distances = np.empty(n_nodes - n_samples)
app.add_javascript('js/copybutton.js') app.connect('autodoc-process-docstring', generate_example_rst)
copy_X = self.copy_X and self.fit_intercept
store = self._verify_modulestore_support(course_key, 'import_xblock') return store.import_xblock(user_id, course_key, block_type, block_id, fields, runtime, **kwargs)
result = Fragment() if 'activate_block_id' in context: result.add_content(u"Activate Block ID: {block_id}</p>".format(block_id=context['activate_block_id'])) return result
kwargs['version'] = 'auto'
from __future__ import absolute_import
from pylearn2.utils import serial from pylearn2.datasets import cifar10 from pylearn2.datasets import preprocessing
from salt.modules import rh_service
loss_l = self.loss.lower()
GATING_NAMESPACE_QUALIFIER = '.gating'
deploy_res = __salt__['tomcat.deploy_war'](war, name, 'yes', url, __env__, timeout, temp_war_location=temp_war_location)
self.store.convert_to_draft(problem.location, self.user.id) problem = self.store.get_item(problem.location)
space = CompositeSpace((self.get_input_space(), self.get_target_space())) source = (self.get_input_source(), self.get_target_source()) return (space, source)
time.sleep(0.01) ret = render(input_data, saltenv, sls, **render_kwargs)
upstream = None
try: import ethtool HAS_ETHTOOL = True except ImportError: HAS_ETHTOOL = False
from salt.state import STATE_INTERNAL_KEYWORDS as _STATE_INTERNAL_KEYWORDS
users = self.get_json(USER_LIST_URI)["results"] for user in users: if user["id"] == target_user.id: return user["url"] self.fail()
comment, passed, retries = _install(quidditch, retries) if not passed: return (comment, str(passed))
log = logging.getLogger(__name__)
self._process_includes()
for idx in range(num): (user, _, _) = _do_create_account(make_random_form()) if course_key is not None: CourseEnrollment.enroll(user, course_key)
_, sap, _ = randomized_svd(X, k, n_iter=5, power_iteration_normalizer=normalizer)
return self.construct_scalar(node)
X, y = make_hastie_10_2(n_samples=20, random_state=1)
return first_line.split(':')[2][0:10]
from __future__ import absolute_import import os import warnings from salt.utils.verify import verify_log
self.assertTrue(filecmp.cmp(path_in, path_test))
from salt.utils import network
varname = ur"{a}_{{{b}}}".format( a=enrich_varname(first), b=enrich_varname(second) )
X_dense = theano.sparse.dense_from_sparse(X) noise = self.random_stream.binomial(size=X_dense.shape, n=1, prob=self.one_ratio, ndim=None)
self.assertOLXIsPublishedOnly(block_list_publish) self.assertOLXIsDraftOnly(block_list_untouched)
super(GitExportError, self).__init__(unicode(message))
CELERYD_HIJACK_ROOT_LOGGER = False
monitoring_dataset = DenseDesignMatrix(X=X)
for current_cfg in vmconfig['current'][instance]: if vmconfig_type['instance'][instance] not in state_cfg: continue
all_assets = course_assets[asset_key.asset_type] md = AssetMetadata(asset_key, asset_key.path) md.from_storable(all_assets[asset_idx]) md.update(attr_dict)
labels, new_inertia = _labels_inertia( X_mb, x_mb_squared_norms, new_centers) assert_greater(new_inertia, 0.0) assert_less(new_inertia, old_inertia)
SALT_BUILD_FAIL = 101
def _complete_linkage(*args, **kwargs): kwargs['linkage'] = 'complete' return linkage_tree(*args, **kwargs)
for part_svc in [ps_shared_cache_1, ps_shared_cache_2, ps_diff_cache]: self.assertEqual( first_group.id, part_svc.get_user_group_id_for_partition(user_partition_id) )
self.assertEqual(len(mail.outbox), 0)
pkg_params = {name: version_num}
VERSION = 1
connection.drop_database(DB)
batch_size = 1
return priv
import salt.ext.six as six
verify_order(self.html_usage_key, self.seq_usage_key, 2) verify_order(self.seq_usage_key, self.chapter_usage_key, 0)
list_check = lambda x: isinstance(x, list) clf = CheckingClassifier(check_X=list_check) scores = cross_val_score(clf, X.tolist(), y2.tolist())
api.set_credit_requirement_status(username, self.course_key, "grade", "grade") self.assert_grade_requirement_status('satisfied', 0)
cls.js.setdefault('xmodule_js', resource_string(__name__, 'js/src/xmodule.js'))
source_suffix = '.rst'
assert_almost_equal(lrap_score([[1], [0], [1], [0]], [[0.5], [0.5], [0.5], [0.5]]), 1.)
func = with_comprehensive_theme(EDX_THEME_DIR)(func)
flags = [('Name', name)]
context['accomplishment_copy_more_about'] = _("More about {fullname}'s accomplishment").format( fullname=user_fullname )
n_jobs, _, _ = _partition_estimators(self.n_estimators, self.n_jobs)
self.assertEqual(VerificationDeadline.deadline_for_course(self.course.id), verification_deadline)
laplacian = _set_diag(laplacian, 1, norm_laplacian)
self.courseware_page.visit() self.assertEqual(self.problem_page.problem_name, 'Test Problem 2')
if not _contents_of_verticals: _contents_of_verticals = [[{'display_name': 'Video', 'metadata': self.metadata}]]
check_estimator(AdaBoostClassifier) check_estimator(MultiTaskElasticNet)
FOLDER_PERMISSIONS = stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR FILE_PERMISSIONS = stat.S_IRUSR | stat.S_IWUSR
old_group = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, self.user_partition) self.assertIn(old_group.id, [0, 1])
pred = km.predict(km.cluster_centers_) assert_array_equal(pred, np.arange(n_clusters))
if isinstance(command, dict): plugin = next(six.iterkeys(command)) args = command[plugin] else: plugin = command args = ''
__virtualname__ = 'svn'
return None
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
if not iboost == self.n_estimators - 1: sample_weight *= np.exp(estimator_weight * incorrect * ((sample_weight > 0) | (estimator_weight < 0)))
self.q(css=BROWSE_BUTTON_CSS).click()
self.clear.publish(self.valid_clear_load) self.assertEqual(fire_event_mock.call_args[0][0]['fun'], 'test.ping')
ret[name] = version_rev
return StaticContent.compute_location(course_key, path)
win_dns_client.__salt__ = {} win_dns_client.__opts__ = {}
def __init__(self, **kwargs): super(FilebasedMicrositeBackend, self).__init__(**kwargs)
'colors': colors
rbf_transform = RBFSampler(gamma=gamma, n_components=1000, random_state=42) X_trans = rbf_transform.fit_transform(X) Y_trans = rbf_transform.transform(Y) kernel_approx = np.dot(X_trans, Y_trans.T)
if dataset.y is not None: dataset.y = dataset.y[::patches.shape[0] / reassembled_shape[0]]
ps_path = 'C:\\Windows\\SYSTEM32\\WindowsPowerShell\\v1.0\\powershell.exe'
if not self._verify_auth(): self.redirect('/login') return
from __future__ import absolute_import
objects = CourseActionStateManager()
from __future__ import print_function from __future__ import absolute_import import socket
REQUIRE_DEBUG = False
indexed_count = cls.index(modulestore, structure_key) if indexed_count: cls._track_index_request(cls.INDEX_EVENT['name'], cls.INDEX_EVENT['category'], indexed_count) return indexed_count
self.course.teams_configuration['topics'] = [] self.assert_serializer_output([], num_teams_per_topic=0, num_queries=0)
self.assertIsNone(getattr(self.request, 'session', None))
if 'target' not in kwargs: target = '*' else: target = kwargs['target'] del kwargs['target']
self.course_nav.go_to_section('Test Section 2', 'Test Subsection 2')
return (vpnservice, kwargs)
if 'account_privacy' in update: update_user_preferences( requesting_user, {'account_privacy': update["account_privacy"]}, existing_user )
tolerance_xml = xml.xpath( '//*[@id=$id]//responseparam[@type="tolerance"]/@default', id=xml.get('id') )
#html_file_suffix = ''
from salt.modules import ipset
resp = self.client.get(reverse_usage_url('xblock_handler', usage_key)) self.assertEqual(resp.status_code, 200)
self.assertFalse(linode._validate_name(''))
'engines': list,
self.choose_new_seed()
cov = ShrunkCovariance(shrinkage=0.5) cov.fit(X) assert_array_almost_equal( shrunk_covariance(empirical_covariance(X), shrinkage=0.5), cov.covariance_, 4)
if self.options.verbose: print('checking %s' % filename) fchecker = self.checker_class( filename, lines=lines, options=self.options) return fchecker.check_all(expected=expected, line_offset=line_offset)
assert is_flat_specs(data_specs)
ct_in_map = { 'application/x-www-form-urlencoded': urlencoded_processor, 'application/json': json_processor, 'application/x-yaml': yaml_processor, 'text/yaml': yaml_processor, 'text/plain': text_processor, }
assert_raises(ValueError, neighbors.NearestNeighbors, algorithm='blah')
if self.advertised_start: return u'string' elif self.start != DEFAULT_START_DATE: return u'timestamp' else: return u'empty'
text_list = self._find_within(selector).text return text_list[0] if text_list else None
try: return SearchEngine.get_search_engine(index=cls.INDEX_NAME) except ConnectionError as err: logging.error('Error connecting to elasticsearch: %s', err) raise ElasticSearchConnectionError
stack.addRemote(RemoteYard(stack=stack, name='manor', lanename=lanename, dirpath=sockdirpath)) console.concise("Created Jobber Stack {0}\n".format(stack.name)) return stack
return False
emit_field_changed_events( user, user, sender._meta.db_table, excluded_fields=['last_login', 'first_name', 'last_name'], hidden_fields=['password'] )
app.add_domain(NumpyPythonDomain) app.add_domain(NumpyCDomain)
content = contentstore('trashcan').find(asset_key, throw_on_not_found=False) self.assertIsNotNone(content)
try: grad_not_implemented = theano.gradient.grad_not_implemented except: def grad_not_implemented(op, idx, ipt): return None
import salt.utils import salt.utils.itertools from salt.utils.decorators import which as _which
from __future__ import absolute_import import os
survey = self._create_test_survey() self.assertFalse(survey.has_user_answered_survey(self.student)) self.assertEquals(len(survey.get_answers()), 0)
after_created = attempt.created_at + timedelta(seconds=1) self.assertTrue(attempt.active_at_datetime(after_created))
cmd = 'dockerng.ps' docker_hosts = get('*', cmd)
ret = envstate.setenv('test', 'other') self.assertEqual(ret['changes'], {})
xblock_partition_access = set(xblock_group_access.get(partition.id) or []) or None
import salt.utils
if ( transcripts_presence['youtube_diff'] and transcripts_presence['youtube_local'] and
faces, target, target_names = load_func( data_folder_path, resize=resize, min_faces_per_person=min_faces_per_person, color=color, slice_=slice_)
old_mixed_setting = self.ALREADY_UPDATED_MIXED_CONFIG new_mixed_setting, new_default_store_setting = self.assertMigrated(old_mixed_setting) self.assertTrue(self.is_split_configured(new_mixed_setting)) self.assertEquals(old_mixed_setting, new_mixed_setting)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
modules, funcname = get_func_name(func) modules.append(funcname) return os.path.join(*modules)
properties_update = [] for prop in properties: if prop not in properties_current: continue
import salt.fileserver import salt.utils import salt.utils.url
Certificate "MasterDBReplica_No.2" already exists
LANGUAGES = ENV_TOKENS.get('LANGUAGES', LANGUAGES) LANGUAGE_CODE = ENV_TOKENS.get('LANGUAGE_CODE', LANGUAGE_CODE) USE_I18N = ENV_TOKENS.get('USE_I18N', USE_I18N)
exc_info_on_loglevel=logging.DEBUG
if namespace in LOOKUP: del LOOKUP[namespace]
hashes[clean_path(full_cython_path)] = current_hash
if refresh: refresh_db()
required_boto_version = '2.8.0' required_moto_version = '0.3.7'
from salt.utils.async import SyncWrapper
FEATURES['ENABLE_TEAMS'] = True
indices = np.array(indices, dtype=int) indices.shape = (-1, 2) return indices
inheriting_settings = inherited_settings_map[block_key].copy() block_fields = block_data.fields for field_name in inheritance.InheritanceMixin.fields: if field_name in block_fields: inheriting_settings[field_name] = block_fields[field_name]
return view_func(request, *args, **kwargs)
old_group = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, self.user_partition) self.assertIn(old_group.id, [0, 1])
return descriptor_global_local_resource_url(block, uri)
'description',
X = random_state.randn(100, 2) assert_equal(trustworthiness(X, 5.0 + X / 10.0), 1.0)
lr_tracker = LearningRateTracker() algorithm = SGD(learning_rate, cost, batch_size=batch_size, monitoring_batches=3, monitoring_dataset=monitoring_dataset, termination_criterion=termination_criterion, update_callbacks=[linear_decay, lr_tracker], set_batch_size=False)
from __future__ import unicode_literals
problem = self.store.get_item(problem.location)
import salt.utils import salt.modules.nxos
destroy(vm_['name'])
if os_family == 'suse': PATTERNS = 'pkg.list_installed_patterns' elif os_family == 'redhat': PATTERNS = 'pkg.group_list' else: PATTERNS = None
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
CourseModeFactory.create(mode_slug=mode, course_id=self.course.id, min_price=1)
return True
CELERY_IMPORTS = ( 'openedx.core.djangoapps.programs.tasks.v1.tasks', )
from_address = theming_helpers.get_value('default_from_email', settings.DEFAULT_FROM_EMAIL) to_address = user.email
if vm_info['profile'] and config.is_profile_configured( __opts__, __active_provider_name__ or 'virtualbox', vm_info['profile'] ) is False: return False
self._fit(X) return self
response = render_to_response(path, context) response.mako_context = context response.mako_template = path return response
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
if not isinstance(choices[0], (list, tuple)): choices = [choices]
EmptyPromise( lambda: self.find_css('a.detail-toggle.hide-details').present, 'Certificate details are expanded' ).fulfill()
atom = (tables.Int32Atom() if config.floatX == 'float32' else tables.Int64Atom())
LANGUAGES_BIDI = ("he", "ar", "fa", "ur", "fa-ir", "rtl")
assert_equal(np.size(sample_without_replacement(0, 0)), 0)
from salt.modules import linux_sysctl from salt.modules import systemd from salt.exceptions import CommandExecutionError
import sys import atexit import logging import threading import logging.handlers
donation = Donation.objects.get(pk=donation.id) self.assertEqual(donation.status, "purchased")
'METADATA_URL': 'https://www.googleapis.com/youtube/v3/videos',
for key, val in six.iteritems(kwargs): ret['kwargs'][key] = str(type(val))
if source is None: source = name
fig, (ax1, ax2) = plt.subplots(1, 2) fig.set_size_inches(18, 7)
import logging import os import shutil
return ( self.q(css='{} .acid-block'.format(self.context_selector)).present and wait_for_xblock_initialization(self, self.context_selector) and self._ajax_finished() )
return dict(zip(('user', 'course_key', 'course_mode', 'processor'), patched_create_order.call_args[0]))
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, call )
dx = manhattan_distances(X, Y=self.X, sum_over_features=False) f = self.regr(X) r = self.corr(self.theta_, dx).reshape(n_eval, n_samples)
idx = 0 start_idx = end_idx for rd in rings: start_idx = downsample_ring(img, idx, rd, output, start_idx) idx += rd
n_samples = 100 n_features = 500 rank = 5 k = 10
log.debug( 'The \'{0}\' cloud driver defined under \'{1}\' provider ' 'alias is unable to get the images information'.format( driver, alias ) ) continue
self.course.edxnotes = True self.assertTrue(has_notes_tab(self.user, self.course))
self.assertTrue(mock_audit_log.called)
self.payment_and_verification_flow.webcam_capture() self.payment_and_verification_flow.next_verification_step(self.immediate_verification_page)
htmlhelp_basename = 'edxdoc'
available_version = salt.utils.alias_function(latest_version, 'available_version')
from salt.renderers import gpg from salt.exceptions import SaltRenderError
from salttesting import skipIf, TestCase from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
'edx-ui-toolkit/js/utils/global-loader.js', 'edx-ui-toolkit/js/utils/string-utils.js', 'edx-ui-toolkit/js/utils/html-utils.js',
if not isinstance(course_key, basestring): raise ValueError('course_key must be a string. {} is not acceptable.'.format(type(course_key)))
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
view_converter = dense_design_matrix.DefaultViewConverter((image_size, image_size, 1), axes)
passed_jid = clear_load['jid'] if clear_load.get('jid') else None nocache = extra.get('nocache', False)
registration = Registration() registration.register(user)
with self.assertRaises(Exception): self.build_problem(type="invalidtextgroup")
dataset = datasets.load_iris()
assert (niter > 1) == (len(dbm.hidden_layers) > 1)
to_unset = [key for key in os.environ if key not in environ] for key in to_unset: ret[key] = setval(key, False, false_unsets, permanent=permanent)
params_not_accepted = params.copy() params_not_accepted['decision'] = "REJECT" self.assertFalse(payment_accepted(params_not_accepted)['accepted'])
log.debug('Downloading...') wua_downloader.Updates = wua_download_list
request.user.is_authenticated() and is_shopping_cart_enabled() and Order.does_user_have_cart(request.user) and Order.user_cart_has_items( request.user, [PaidCourseRegistration, CourseRegCodeItem] )
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
from __future__ import absolute_import import copy
hasher = RandomTreesEmbedding(n_estimators=10, random_state=0, max_depth=3) X_transformed = hasher.fit_transform(X)
if node.location.to_deprecated_string() == url: return node for child in node.get_children(): found = find(child, url) if found: return found return None
vmhost = vm_['host'] newnode['vmid'] = newid
n_classes_ = [n_classes_] classes_ = [classes_] class_prior_ = [class_prior_] constant = [constant]
version = unichr(unicode_char)
if d_yard in self.lane_stack.value.nameRemotes: self.lane_stack.value.transmit(msg, self.lane_stack.value.nameRemotes[d_yard].uid) return
return redirect_with_get('register_user', request.GET)
mock_plain = MagicMock() with patch.object(parallels, 'prlctl', mock_plain): parallels.list_vms(runas=runas) mock_plain.assert_called_once_with('list', [], runas=runas)
if existing['code'] == 200:
self.assertEqual(self.server.config, {})
return len(tsql_query(query="SELECT name FROM sys.syslogins WHERE name='{0}'".format(login), **kwargs)) == 1
"xmodule_js", "common_static",
REQUIRE_STANDALONE_MODULES = {}
CourseFixture(**self.course_info).install() course_id = self.course_id if enroll else None AutoAuthPage(self.browser, course_id=course_id).visit()
details['driver'] = provider
self.violations = [v for v in self.violations if not self._is_commented(v, line_comment_delim)]
fut = duedate.get_extended_due_date return fut(node)
digits = load_digits() X, y = digits.data, digits.target
new_structure = self.version_structure(course_key, structure, user_id)
self.assertTrue(mock_audit_log.called)
__virtualname__ = 'sysctl'
tmp = X[i, :].copy() X[i, :] = X[j, :] X[j, :] = tmp
self.delete_item(store, self.html_unit.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
if isinstance(metric, partial): metric.__module__ = 'tmp' metric.__name__ = name
for X in (X_dense, X_sparse_pruned, X_sparse_unpruned):
RSTR = '_edbc7885e4f9aac9b83b35999b68d015148caf467b78fa39c05f669c0ff89878' RSTR_RE = re.compile(r'(?:^|\r?\n)' + RSTR + r'(?:\r?\n|$)')
out = self._str_indent(out,indent) return '\n'.join(out)
self.client.ajax_post( self.seq1_url, data={'isPrereq': True} ) mock_add_prereq.assert_called_with(self.course.id, self.seq1.location)
from salt.ext.six import string_types
self._test_dir = tempfile.mkdtemp(prefix='salt-testdaemon-')
edit_button = self.q(css='.fa-pencil') edit_button.click()
'RUN_AS_ANALYTICS_SERVER_ENABLED': False,
link_pattern = '<a href="%s">%s</a>' orig_pattern = '<span class="n">%s</span>' period = '<span class="o">.</span>'
Z = Z.reshape(xx.shape) plt.contourf(xx, yy, Z, cmap=plt.cm.Paired) plt.axis('off')
apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
self.assertEqual(iptables.build_rule(jump='CLUSTERIP', **{'new': ''}), '--jump CLUSTERIP --new ')
super(CourseRerunTest, self).setUp(is_staff=True) self.dashboard_page = DashboardPage(self.browser)
return router
mako_middleware_process_request(request)
course.certificates['certificates'].pop(index) store.update_item(course, request.user.id) break
super(MongoModuleStore, self)._drop_database(database, collections, connections)
if module_name in self.loaded_modules: mod_dict = self.loaded_modules[module_name] else: mod_dict = self.mod_dict_class()
if len(ARGS) == 1: argv_prepared = ARGS[0].split() else: argv_prepared = ARGS
amount_value = decimal.Decimal(amount).quantize(decimal.Decimal('.01'), rounding=decimal.ROUND_DOWN)
return salt.utils.is_proxy() and 'proxy' in __opts__
fig = plt.figure() fig.subplots_adjust(left=0.05, right=0.95, wspace=0.05)
rexp = re.compile('(?m)^ [*|-] ' r'([^ ].*)[\r\n].*\(([^\)]+)')
'openedx.core.djangoapps.site_configuration',
d1 = DenseDesignMatrix(topo_view=topo_view) slice_d = from_dataset(d1, 5) assert slice_d.X.shape[1] == d1.X.shape[1] assert slice_d.X.shape[0] == 5
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.assertTrue(linode._validate_name('foo123bar'))
(['honor', 'verified', 'audit'], 'course_modes_choose', CourseMode.HONOR),
HAS_MARKUPSAFE = False
if request is not None and hasattr(request, 'META') and header_name in request.META: return request.META[header_name] else: return default
ridge = Ridge(alpha=penalties[:-1]) assert_raises(ValueError, ridge.fit, X, y)
try: import MySQLdb HAS_MYSQL = True except ImportError: HAS_MYSQL = False
pass
tasks.update_course_structure.delay(unicode(course_key)) raise CourseStructureNotAvailableError
if socks.get(cupd_in) == zmq.POLLIN: new_c_data = serial.loads(cupd_in.recv()) #cupd_in.send(serial.dumps('ACK'))
del self.lc_block._xmodule._selected_set initial_blocks_assigned = self.lc_block.get_child_descriptors() self.assertEqual(len(initial_blocks_assigned), 2)
UNENROLL_DONE.send(sender=None, course_enrollment=self.course_enrollment, skip_refund=skip_refund)
raise NotImplementedError()
rval = X.copy()
return True
if class_weight in ("auto", "balanced"): class_weight_ = compute_class_weight(class_weight, mask_classes, y_bin) sample_weight *= class_weight_[le.fit_transform(y_bin)]
I18N_REPORT_DIR = REPORT_DIR / 'i18n'
return False
with self.assertNumQueries(0): RestrictedCourse.is_restricted_course(course_id) RestrictedCourse.is_disabled_access_check(course_id)
if hasattr(self, 'proxy'): proxy = self.proxy else: proxy = None
pass
log = logging.getLogger(__name__)
X = [[0]] Y = [[1], [2]] D = euclidean_distances(X, Y) assert_array_almost_equal(D, [[1., 2.]])
fields = dict(self.DEFAULTS, **kwargs) ProgramsApiConfig(**fields).save() return ProgramsApiConfig.current()
with self._secondary_action_menu_open(".response_{} .discussion-response".format(response_id)): return self._is_element_visible(".response_{} .discussion-response .action-edit".format(response_id))
dot_product = -2 * np.dot(self.linear_sum_, self.centroid_) return sqrt( ((self.squared_sum_ + dot_product) / self.n_samples_) + self.sq_norm_)
y_true, _, probas_pred = make_prediction(binary=True)
sys.excepthook = __global_logging_exception_handler
try: #pylint: disable=unused-import import boto import boto.sns #pylint: enable=unused-import logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
check_is_fitted(self, "coefs_") y_scores = self.decision_function(X) y_scores = ACTIVATIONS[self.out_activation_](y_scores) return self.label_binarizer_.inverse_transform(y_scores)
self.q(css="a#add-allowance").click() self.wait_for_element_presence("div.modal div.modal-header", "Popup should be visible")
eps = 0.8 min_samples = 10
import matplotlib.pyplot as plt from itertools import cycle
with outer_atomic(read_committed=True):
import matplotlib.pyplot as plt plt.figure()
BaseLoader = getattr(yaml, 'CSafeLoader', yaml.SafeLoader) BaseDumper = yaml.SafeDumper if six.PY3 else getattr(yaml, 'CSafeDumper', yaml.SafeDumper)
digits = datasets.load_digits() perm = rng.permutation(digits.target.size) digits.data = digits.data[perm] digits.target = digits.target[perm]
return HttpResponseRedirect(reverse('shoppingcart.views.show_receipt', args=[result['order'].id]))
HTTPServer.shutdown(self)
self.assertFalse([ requirement for requirement in requirements if requirement['namespace'] == 'proctored_exam' ])
self.fit_transform(X) return self
saltenv = env
response = external_auth.views.redirect_with_get('root', request.GET)
handlers = [handlers]
for ds in dataset: for prop in properties.keys():
self.add_license_to_xml(xml_object, default="all-rights-reserved")
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
module = CapaFactory.create(rerandomize=rerandomize, attempts=0)
LMS_BASE_URL = os.environ.get('lms_url', 'http://localhost:8003')
pvals = T.alloc(1.0 / num_classes, num_classes) one_hot = self.s_rng.multinomial(size=(num_examples,), pvals=pvals)
sample_problem_xml = textwrap.dedent(xml)
if errors: return errors return high_data
self.assertIn('<span class="important-dates-item-text">$10</span>', resp.content)
assert_equal('Paragraph', dropdowns[0].text) assert_equal('Font Family', dropdowns[1].text)
self._test_email_address_failures(SESAddressBlacklistedError(554, "Email address is blacklisted"))
if file_access_rights(local_dst,os.W_OK,check_above=True):
assert_raises(ValueError, plot_partial_dependence, clf, X, [100])
err = ''
patcher = patch('shoppingcart.models.analytics') self.mock_tracker = patcher.start() self.addCleanup(patcher.stop)
bucket_files[bucket_name] = [k for k in s3_meta if 'Key' in k]
assert_page_correct( page=1, page_size=10, expected_start=0, expected_stop=10, expected_next=None, expected_prev=None )
raise SaltCloudSystemExit( 'The query_instance action must be called with -a or --action.' )
if url is None: url = cls._get_message_url_path_from_db(course_key, access_point) cache.set(cache_key, url)
self.find_css('li.group-configuration-usage-unit a').nth(index).click()
X, y = make_hastie_10_2(n_samples=20, random_state=1) X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=43)
if not salt.utils.is_proxy(): self.opts['grains'] = salt.loader.grains(opts)
LogoutPage(self.browser).visit() LmsAutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id).visit()
x_likelihood = numpy.sum((-energy_fn(1.0) + hq - log_z)[:batch_size0])
return ProviderApiPermissions.objects.create(client=client, provider_id=provider_id)
config = _load_config()
raise
ret_cfg = cfg('{0}.{1}'.format(ret_config, virtualname), {})
import lettuce.django
self.get_extended_hints(student_answers, new_cmap)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
notes = self.q(css=self._bounded_selector(".annotator-hl")) return [EdxNoteHighlight(self.browser, note, self.item_id) for note in notes]
params = self._signed_callback_params(self.order.id, self.COST, self.COST, decision='DECLINE') result = process_postpay_callback(params)
comps[1] = comps[1].lstrip('"').rstrip('"')
)
new_structure = self._lookup_course(xblock.location.course_key).structure
build.run(self) if getattr(self.distribution, 'running_salt_install', False):
CMS_BASE = 'localhost:8001'
if not isinstance(config, dict): return False, ('Configuration for btmp beacon must ' 'be a list of dictionaries.') return True, 'Valid beacon configuration'
import itertools from abc import ABCMeta, abstractmethod import warnings
certs_list = self.run_function('keychain.list_certs') if CERT_ALIAS in certs_list: self.run_function('keychain.uninstall', [CERT_ALIAS])
if 'openid_error' in request.session: error = True del request.session['openid_error']
def __init__(self, url): super(Redirect, self).__init__() self.url = url
from salt.modules import saltcloudmod
config, _ = self.create_group_configuration_experiment([Group("0", "Group A"), Group("1", "Group B")], True)
while self.dispatch_one_batch(iterator): self._iterating = True else: self._iterating = False
return context["is_requester_privileged"] or _is_author(cc_content, context)
if self._load_module(name) and key in self._dict: return True
from __future__ import absolute_import import logging
match = re.search(r'(.*?/common)(?:$|/)', path(__file__)) COMMON_ROOT = match.group(1)
from openedx.core.djangoapps.credit.api.eligibility import ( is_credit_course, get_credit_requirement_status, )
with remove_ccx(dest_key) as (dest_key, restore): return restore(self._modulestore.copy_from_template( source_keys, dest_key, user_id, **kwargs ))
self.assertEqual(any_.result(), futures[0])
def __grant_normalize(grant): if grant == 'ALL': grant = 'ALL PRIVILEGES'
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
from __future__ import absolute_import import inspect import logging import time from functools import wraps from collections import defaultdict
if logo_image: notification_msg.attach(logo_image)
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
ROLE = 'library_user' def __init__(self, *args, **kwargs): super(LibraryUserRole, self).__init__(self.ROLE, *args, **kwargs)
if hasattr(self, 'target_source'): return self.target_source else: return 'targets'
for ignore in list(_STATE_INTERNAL_KEYWORDS) + ['listen_in', 'preqrequired']: kwargs.pop(ignore, None)
self.assertEqual(exam['hide_after_due'], sequence.hide_after_due)
from __future__ import absolute_import import os import yaml import signal import shutil
self.config.pop(cli_log_path)
import integration from salt.config import cloud_providers_config
if (pip or distribute) and not os.path.exists(venv_setuptools): _install_script( 'https://bitbucket.org/pypa/setuptools/raw/default/ez_setup.py', path, venv_python, user, saltenv=saltenv, use_vt=use_vt )
from __future__ import absolute_import
'show_timeout': bool,
ret = pem_header+'\n' for i in range(0, len(pem_body), 64): ret += pem_body[i:i+64]+'\n' ret += pem_footer+'\n'
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.approve()
__pillar__ = {} if 'pepa_pillar' in __opts__: __pillar__ = __opts__['pepa_pillar'] if args.pillar: __pillar__.update(yaml.load(args.pillar))
MONGO_PORT_NUM = int(os.environ.get('EDXAPP_TEST_MONGO_PORT', '27017')) MONGO_HOST = os.environ.get('EDXAPP_TEST_MONGO_HOST', 'localhost')
certificates.update( status=CertificateStatuses.unavailable, verify_uuid='', download_uuid='', download_url='', grade='', )
instance._state.adding = False
contribution_amount = request.session.get( 'donation_for_course', {} ).get(unicode(course_key), '')
print "video {0} url_name: {1}".format(i, video.url_name)
self.assertEqual(should_exist, validator_data["storage"].exists(validator_data["filename"]))
return self.best_estimator_.predict_log_proba(X)
if settings.DEBUG or settings.FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover()
return self._cohort_count( self._get_cohort_options().filter(lambda el: el.is_selected()).first.text[0] )
_list = self.run_function('beacons.list', return_yaml=False) self.assertIn('ps', _list)
get_version = { 'Linux': linux_vmstats, 'FreeBSD': freebsd_vmstats, }
pass
clusterer = KMeans(n_clusters=n_clusters, random_state=10) cluster_labels = clusterer.fit_predict(X)
X_var *= X.shape[0] X_scale = np.sqrt(X_var, X_var) del X_var X_scale[X_scale == 0] = 1 inplace_column_scale(X, 1. / X_scale)
files_to_fingerprint = list(PYTHON_REQ_FILES)
self.converged_ = False
return self.asset_md.get(item, default)
try:
self.assertEqual(self.account_settings_page.value_for_dropdown_field('year_of_birth', ''), '')
if name in list_tasks(location):
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) for Cls in [GradientBoostingRegressor, GradientBoostingClassifier]: est = Cls(n_estimators=100, max_depth=1) est.fit(X, y)
CourseEnrollment.enroll(user, course_key)
else:
old = list_pkgs(saltenv=saltenv)
DOCMODULES = ['sklearn', 'matplotlib', 'numpy', 'scipy']
v0 = random_state.uniform(-1, 1, A.shape[0]) _, u = eigsh(A, ncv=self.n_svd_vecs, v0=v0)
from xmodule.modulestore.inheritance import InheritanceMixin from xmodule.modulestore import prefer_xmodules from xmodule.x_module import XModuleMixin
from __future__ import absolute_import import os import logging import socket import pprint
try: this_tar_file.extractall(dest_path) except Exception as e: raise IOError("[tar] error while extracting '%s'" %tar_filename) else: pass
kwargs = {'course_id': self.course_id.to_deprecated_string(), 'note_id': str(self.pk)} return reverse('notes_api_note', kwargs=kwargs)
pass
set_pw_cmd = "shadow.set_password {0} '{1}'".format( self.userB, password if salt.utils.is_darwin() else hashed_pwd ) self.run_call(set_pw_cmd)
import fnmatch import os import re import logging
log = logging.getLogger(__name__)
self.run_prereqs(X, d) a(*X) actual_ne += self._flat_data_specs[0].np_batch_size(X)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
chapter_aside.data_field = 'another one value' self.store.update_item(new_chapter, self.user_id, asides=[chapter_aside])
if video_list: sub_attr = source_subs_name try: generate_subs_from_source({1: sub_attr}, source_subs_ext, source_subs_filedata, item)
self.q(css=self._bounded_selector(self.NAME_INPUT_SELECTOR)).results[0].send_keys(Keys.ENTER) self.wait_for_ajax()
_write_metric(metrics_str, metrics_report) sh("cat {metrics_report}".format(metrics_report=metrics_report), ignore_error=True)
context.update(app_context)
def __init__(self, *args, **kwargs): if "resolve_entities" not in kwargs: kwargs["resolve_entities"] = False super(XMLParser, self).__init__(*args, **kwargs)
'cache_toolbox.middleware.CacheBackedAuthenticationMiddleware', 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
if data.get('essential'): return super(IDTokenHandler, self).claim_staff_courses(data) else: return None
if isinstance(course.id, CCXLocator): return False
l1 = np.random.normal(size=n) l2 = np.random.normal(size=n)
return False
self.assertIn("2013-SEPTEMBER-16", text)
import salt.utils.mac_utils from salt.exceptions import CommandExecutionError
try: new_configuration = GroupConfiguration(request.body, course).get_user_partition() except GroupConfigurationsValidationError as err: return JsonResponse({"error": err.message}, status=400)
for option in self._find_options(inputfield): if option['choice'] == choice: return option
pass
elem = self.get_setting_element(label) select = Select(elem) select.select_by_value(value) self.save()
#add_function_parentheses = True
doc = _generate_doc(ret)
opts = parse_bokchoy_opts(options) opts['test_dir'] = 'performance' run_bokchoy(**opts)
self.check_tab_json_methods(tab)
self.certificates_section.refresh()
n_clusters_1 = len(set(labels)) - int(-1 in labels) assert_equal(n_clusters_1, n_clusters)
_("There was a problem with the staff answer to this problem: complex boundary.")
self.input_space = VectorSpace(dim=self.nvis) self.input_source = 'features' self.latent_space = VectorSpace(dim=self.nhid)
import napalm
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
user.is_staff = True
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if not files: files = ["`{}`".format(coffeescript_files())] sh(cmd( "node_modules/.bin/coffee", "--compile", *files ))
if defaults: if option in defaults: log.info('Using default for %s %s', virtualname, option) yield option, defaults[option] continue
self.client.login(username=self.instructor.username, password='test') response = self.client.post(url) self.assertEqual(response.status_code, 403)
return v[::-1], W[:, ::-1]
else: return False
user = kwargs['user'] updated_state = kwargs['state'] update_course_creator_group(kwargs['caller'], user, updated_state == CourseCreator.GRANTED)
self.rule = rule self.full_path = '' self.is_disabled = False
'django.middleware.locale.LocaleMiddleware',
self.assertEqual([], os.listdir(TMP_JID_DIR))
return os.geteuid()==0
for pool_size in [1, 2, 5]: do_test(pool_size)
locator = BlockUsageLocator(course_locator, block_type='chapter', block_id='chapter1') self.assertTrue( modulestore().has_item(locator), "couldn't find chapter1" )
all_times = self.q(css=selector).text[0]
num_rows = max_num_channels // num_columns if num_rows * num_columns < max_num_channels: num_rows += 1
np.random.RandomState(j).shuffle(X[:, j]) np.random.RandomState(j).shuffle(X_true[:, j])
if isinstance(usage_key, BlockUsageLocator):
if is_verified: self.assertTrue(CourseMode.is_verified_slug(mode_slug)) else: self.assertFalse(CourseMode.is_verified_slug(mode_slug))
for block_key in self.post_order_traversal(): if block_key in old_block_relations: self._add_block(pruned_block_relations, block_key)
if entry in finished: continue else: finished.append(entry)
if save_definition: return _save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=task_definition.Principal.UserID, password=None, logon_type=task_definition.Principal.LogonType)
y_true *= 2 y_pred *= 2 loss = log_loss(y_true, y_pred, normalize=False) assert_almost_equal(loss, 0.6904911 * 6, decimal=6)
cmd = ['pkg', 'update', '-v', '--accept'] out = __salt__['cmd.run_all'](cmd, output_loglevel='trace', python_shell=False)
np.random.seed(0) n_samples, n_features = 100, 100
self.events = []
raise ItemNotFoundError(usage_locator)
try:
n_samples = 100 n_features = 500 rank = 5 k = 10
get_version = { 'Linux': linux_cpuinfo, 'FreeBSD': freebsd_cpuinfo, }
xblock_family = child.attrib.pop('xblock-family', None) if xblock_family: xblock_family = self._family_id_to_superclass(xblock_family) if issubclass(xblock_family, XBlockAside): aside_children.append(child)
user = UserFactory.create() CourseEnrollment.objects.create( user=user, course_id=self.course.id, mode=enrollment_type, is_active=True ) return user
queue.put(random_delay)
from __future__ import absolute_import, print_function, with_statement import os import re import sys import copy import time import types import signal import fnmatch import logging import threading import traceback import contextlib import multiprocessing from random import randint, shuffle from stat import S_IMODE
self.get_user_mock = self.setup_patch('courseware.models.user_by_anonymous_id', None) submissions_score_set_handler(None, **SUBMISSION_SET_KWARGS) self.signal_mock.assert_not_called()
remove_instance = False
send_password = False
CourseEnrollment.unenroll(self.student, self.CERT_COURSE_KEY)
linter = JavaScriptLinter() results = FileResults('') linter.check_javascript_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
import salt.ext.six as six
optima = [(self._constrained_optimization(obj_func, self.kernel_.theta, self.kernel_.bounds))]
resp = self.client.ajax_post( self.seq2_update_url, data={'children': [unicode(unit_1_key), unicode(unit_2_key)]} ) self.assertEqual(resp.status_code, 200)
'limits': { 'CPU': 1, },
choicegroup = mult_choice_response.xpath('./choicegroup[@type="MultipleChoice"]')[0] choices_list = list(choicegroup.iter('choice'))
self.course_info_page.visit() self.tab_nav.go_to_tab('Progress')
self.q(css="input.proctored_exam").first.click() self.q(css=".action-save").first.click() self.wait_for_ajax()
from __future__ import absolute_import
code = "1/0" g = {} cache = {} with self.assertRaises(SafeExecException): safe_exec(code, g, cache=DictCache(cache))
self.assertFalse(library_container.has_validation_not_configured_warning)
indexed_count = self.reindex_library(store) self.assertFalse(indexed_count)
return
return ikepolicy
self.assertTrue(provider_redirect_url.startswith(TESTSHIB_SSO_URL)) return self.client.post( self.complete_url, content_type='application/x-www-form-urlencoded', data=self.read_data_file('testshib_response.txt'), )
return login_required(inner)
check_is_fitted(self, "coefs_") y_pred = self._decision_scores(X) if y_pred.shape[1] == 1: return y_pred.ravel() return y_pred
self.start = time.time() self.connected = True
self.components_ = X[self.core_sample_indices_].copy()
self.q(css=".contribution-option > input").first.click()
def __init__(self, delay, func): self.func = func def start(self): self.func()
num_padded_bytes = ord(padded_data[-1]) return padded_data[:-num_padded_bytes]
self.optimizer = 'fmin_cobyla' self.verbose = False
'ajax_url': '{}/xmodule_handler'.format(location.to_deprecated_string()), 'element_id': u'i4x-HarvardX-ER22x-conditional-condone', 'depends': u'i4x-HarvardX-ER22x-problem-choiceprob'
return (NullSpace(), '')
features_in_first_mlp = 5 features_in_second_mlp = 10 targets_in_first_mlp = 2 targets_in_second_mlp = 2
try: new_configuration = GroupConfiguration(request.body, course, group_configuration_id).get_user_partition() except GroupConfigurationsValidationError as err: return JsonResponse({"error": err.message}, status=400)
CMS_SEGMENT_KEY = None
self.assertNotContains(resp, 'Robot_Super_Course')
import salt.ext.six as six
yield dec
retval = self.service.remove_credit_requirement_status( 0, self.course.id, 'grade', 'grade' ) self.assertIsNone(retval)
course_overview.delete() course_overview = None
#epub_uid = ''
return self.encode(inputs)
cached_module = self.modulestore.get_cached_block(course_key, version_guid, block_key) if cached_module: return cached_module
block = self.get_a_block() self.assertEqual(block.inherited, "the default") self.assertEqual(block.not_inherited, "nothing")
for key in kv_dict: self.kvs.set(key, 'test_value')
spec_mapping = tuple( self._fill_mapping(sub_space, sub_source) for sub_space, sub_source in safe_zip( space.components, source))
CHINESE_LANGUAGE_CODE_MAP = {
project = u'edX' copyright = u'2013, EdX Doc Team'
if not username: return redirect(reverse('api_admin:catalog-search')) return redirect(reverse('api_admin:catalog-list', kwargs={'username': username}))
self.assertTrue('success' in result and result['success'])
salt '*' vsphere.service_stop my.esxi.host root bad-password 'ssh'
return tuple([alias if alias else source for alias, source in safe_zip(self._aliases, self._sources)])
try: from pyVim.connect import GetSi, SmartConnect, Disconnect from pyVmomi import vim, vmodl HAS_PYVMOMI = True except ImportError: HAS_PYVMOMI = False
return self.matching_events_were_emitted( start_time=start_time, event_filter=event_filter, number_of_matches=number_of_matches )
return super_float("".join(parse_result))
self.page = IndexPage(self.browser)
scale = 0.5
prob /= prob_sum.reshape((prob.shape[0], -1))
courses, in_process_course_actions = _accessible_courses_summary_list(request)
ridge.fit(X, y, sample_weight=np.ones(n_samples)) assert_greater(ridge.score(X, y), 0.47)
raise NotImplementedError
INVOICE_CORP_ADDRESS = ENV_TOKENS.get('INVOICE_CORP_ADDRESS', INVOICE_CORP_ADDRESS) INVOICE_PAYMENT_INSTRUCTIONS = ENV_TOKENS.get('INVOICE_PAYMENT_INSTRUCTIONS', INVOICE_PAYMENT_INSTRUCTIONS)
if isinstance(ret, collections.Iterator): for i in ret: yield i else: yield ret
return self.q(css="#register-name").attrs('value')[0]
'address': __ipv4_quad, 'netmask': __ipv4_netmask, 'broadcast': __ipv4_quad, 'metric': __int,
store = self._verify_modulestore_support(location.course_key, 'delete_item') return store.delete_item(location, user_id=user_id, **kwargs)
course_cohort_settings = get_course_cohort_settings(course_key) if not course_cohort_settings.is_cohorted: return request_cache.data.setdefault(cache_key, None)
if (idx < len(lines) and _starts_till(lines[idx + 1], cnd) < 0) or idx + 1 == len(lines): out.append(cnd)
required_boto3_version = '1.2.1'
rng = np.random.RandomState(0) rand_data = RandomData(rng, scale=7) n_components = rand_data.n_components
outliers = abs_linear_loss[outliers_mask] num_outliers = np.count_nonzero(outliers_mask) n_non_outliers = X.shape[0] - num_outliers
'jinja_trim_blocks': bool,
delete_item(category='vertical', name='test_vertical')
result = salt.utils.slack.query(function='message', api_key=api_key, method='POST', header_dict={'Content-Type': 'application/x-www-form-urlencoded'}, data=urllib.urlencode(parameters))
from __future__ import absolute_import, print_function import os import sys import types import signal import getpass import logging import optparse import traceback import yaml from functools import partial
pass
import salt.utils
#pylint: disable=E0602
kwargs['w'] = 1
if name in get_all(): raise CommandExecutionError('Service Already Exists: {0}'.format(name))
self._check_verticals([self.vert_loc])
params, response = _validate_post_params(request.POST) if response is not None: return response
about_path = reverse('about_course', kwargs={'course_id': unicode(course_key)}) return u'{}{}'.format(site_prefix(), about_path)
if instructor not in list_instructor_ccx: try: enroll_email( course_id=ccx_key, student_email=instructor.email, auto_enroll=True, email_students=send_email, email_params=email_params, )
io_loop.start()
show_in_read_only_mode = False
Y = np.vstack((y_diabetes, y_diabetes)).T n_features = X_diabetes.shape[1]
data_train = fetch_20newsgroups(data_home=data_home, subset='train', categories=None, shuffle=True, random_state=12, remove=remove)
ret['hash_type'] = __opts__['hash_type']
xblocks = list(xblock_descriptor.children) for child in xblock_descriptor.children: xblocks.extend(self._get_nested_xblocks(child)) return xblocks
if not cwd: cwd = os.path.expanduser('~{0}'.format('' if not runas else runas))
print('Cloud configuration files provisioned via pillar.')
field_overrides = current_provider.get_register_form_data( running_pipeline.get('kwargs') )
from __future__ import absolute_import import os
request.need_to_delete_cookie = True
EmptyPromise( lambda: self.current_form != old_form, "Finish toggling to the other form" ).fulfill()
continue
if draft_only: revision = MongoRevisionKey.draft else: revision = ModuleStoreEnum.RevisionOption.all
self.load_extra_content( system, course_descriptor, 'course_info', self.data_dir / course_dir / 'info', course_dir, url_name )
VerificationDeadline.set_deadline(self.course.id, self.VERIFICATION_DEADLINE)
EX_GENERIC = 1
if relevant_verification is not None and relevant_verification.status == "approved": recent_verification_datetime = max( recent_verification_datetime if recent_verification_datetime is not None else relevant_verification.expiration_datetime, relevant_verification.expiration_datetime )
return ret
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch
ret = self.run_state( 'file.append', name=name, text='cheese' ) self.assertSaltTrueReturn(ret) self.assertTrue(os.path.isfile(name))
'enable_zip_modules': bool,
required_boto3_version = '1.2.1'
self.courseware_page.click_next_button_on_top() self.assert_navigation_state('Test Section 2', 'Test Subsection 2,1', 0, next_enabled=False, prev_enabled=True)
try: import dateutil.parser as dateutil_parser _WHEN_SUPPORTED = True _RANGE_SUPPORTED = True except ImportError: _WHEN_SUPPORTED = False _RANGE_SUPPORTED = False
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
return {'path': os.environ.get('PATH', '').strip()}
n_fits = len(out)
import salt.utils from salt.exceptions import CommandExecutionError, MinionError import salt.ext.six as six
self.unit_page.xblocks[xblock_index].edit()
return security_group
def test_version(self): pass
course = CourseFactory.create( org=org, number=course_number, run=course_run, display_name=display_name, default_store=ModuleStoreEnum.Type.split )
import integration from salt.utils.process import clean_proc from salt.utils import event
closest_subcluster.update(subcluster) self.init_centroids_[closest_index] = \ self.subclusters_[closest_index].centroid_ self.init_sq_norm_[closest_index] = \ self.subclusters_[closest_index].sq_norm_ return False
return certificate
vectors = vectors / np.sqrt((vectors ** 2).sum(axis=1))[:, np.newaxis]
math_interpreter = ParseAugmenter(math_expr, case_sensitive) math_interpreter.parse_algebra()
from __future__ import absolute_import import os import imp import sys import salt import time import logging import inspect import tempfile import functools from collections import MutableMapping from zipimport import zipimporter
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
from __future__ import print_function from __future__ import absolute_import from os.path import splitext, abspath from sys import modules
for logger in loggers: logger.setLevel(logging.NOTSET) logger.removeHandler(import_log_handler)
self._assert_course_verification_status(VERIFY_STATUS_APPROVED)
for format in ["binary", "multiclass", "multilabel-indicator"]: for y in EXAMPLES[format]: unique_labels(y)
import salt.utils from salt.exceptions import SaltInvocationError
from __future__ import absolute_import import logging import os import os.path import hashlib import re import json import yaml
for mode in ["honor", "verified"]: CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
x_weights = np.dot(X.T, y_score) / np.dot(y_score.T, y_score)
self.assertEqual(iptables.build_rule(**{'match-set': 'src flag1,flag2'}), '-m set --match-set src flag1,flag2')
self.course_nav.go_to_vertical('Test Vertical-1')
return True
X = [[0], [0]] Y = [[1], [2]] D = paired_manhattan_distances(X, Y) assert_array_almost_equal(D, [1., 2.])
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'nova', vm_['profile'], vm_=vm_) is False: return False
if not course: course = modulestore().get_course(course_overview.id)
formulahint_element = etree.SubElement(hintgroup_element, "formulahint")
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, MagicMock, NO_MOCK, NO_MOCK_REASON
fig = plt.figure() plt.subplots_adjust(hspace=-.1, wspace=.4, top=.95, bottom=.05)
clf.sparsify() assert_true(sp.issparse(clf.coef_)) pred = clf.predict(X) assert_array_equal(pred, Y)
#])
from __future__ import absolute_import import datetime import os import re import fnmatch import collections import copy import time
students = self._create_students(10)
stringToSign = 'GET&%2F&' + percent_encode(canonicalizedQueryString[1:])
if driver == 'linode' and profile_key.get('clonefrom', False): non_image_drivers.append('linode') non_size_drivers.append('linode')
prepend_root_dirs = [ 'pki_dir', 'cachedir', 'sock_dir', 'extension_modules', 'pidfile', ]
rval = -T.mean(log_hx)-T.mean(log_one_minus_hy) rval.name = 'NCE('+X_name+')'
out = salt.utils.fopen(path, 'wb')
import salt.utils.dictupdate as dictupdate
with modulestore().bulk_operations(course_key): course = modulestore().get_course(course_key, depth=depth) if course: return course else: raise Http404("Course not found.")
wua_session = win32com.client.Dispatch('Microsoft.Update.Session') wua_session.ClientApplicationID = 'Salt: Install Update'
json_result = [] for key in keys: info = block_structure.get_transformer_block_field( key, ContentLibraryTransformer, 'block_analytics_summary' ) json_result.append(info) return json_result
return { 'username': user.username, 'email': user.email, 'first_name': user.first_name, 'last_name': user.last_name, }
self.assert_valid_get_response(self.eligibility)
DELAY = 0.5
filters = {'course_id': course_key, 'user': request.user} if uri != '': filters['uri'] = uri
assert_equal(lfw_pairs_train.pairs.shape, (10, 2, 62, 47))
instructor = self.make_instructor() self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
SEARCH_ENGINE = "search.elastic.ElasticSearchEngine"
X = np.ones(17) y = [0] * 3 + [1] * 14
import logging
from salt.pillar import Pillar, git_pillar
course = modulestore().get_course(course_id) if course is None: return None return course.enrollment_domain
self.check_modal_shows_correct_contents(['Course Display Name']) self.advanced_settings.refresh_and_wait_for_load()
return fetch_lfw_people(download_if_missing=download_if_missing, **kwargs)
__salt__['dockerng.start']( name, )
conn_args = {} for arg in ['host', 'port', 'db', 'password']: if arg in connection_args: conn_args[arg] = connection_args[arg]
certs_api.set_cert_generation_enabled(self.COURSE_KEY, True) self._assert_enabled_for_course(self.COURSE_KEY, True)
if isinstance(value, bool): value = 'on' if value else 'off' elif ' ' in value: value = "'{0}'".format(value)
sigmoid = CalibratedClassifierCV(est, cv=2, method='sigmoid')
self.assertTrue(did_load_item)
call_command('flush', verbosity=0, interactive=False, load_initial_data=False)
__virtualname__ = 'buildout'
PROCESSOR_MODULE = __import__( 'shoppingcart.processors.' + settings.CC_PROCESSOR_NAME, fromlist=[ 'render_purchase_form_html', 'process_postpay_callback', 'get_purchase_endpoint', 'get_signed_purchase_params', ] )
response = self._auto_auth({ 'username': 'test', 'course_id': course_id, 'redirect': True, 'staff': 'true', }, status_code=302)
partial(replace_static_urls, None, course_id=course_id), _studio_wrap_xblock,
if self.rc > 0 and other.rc <= 0: noc_info = list(self.noc_info) noc_info[3] = -1 return method(tuple(noc_info), other.noc_info)
self.client.ajax_post( self.problem_update_url, data={'publish': 'make_public'} )
from __future__ import absolute_import
if not change_password(username, password, uid): log.warning('unable to set user password') delete_user(username, uid) return False
artifact_metadata_url = '{artifactory_url}/{repository}/{group_url}/{artifact_id}/maven-metadata.xml'.format( artifactory_url=artifactory_url, repository=repository, group_url=group_url, artifact_id=artifact_id) log.debug('artifact_metadata_url=%s', artifact_metadata_url) return artifact_metadata_url
name = _sdecode(name) snap_name = _validate_snap_name(name, snap_name, runas=runas)
query = 'CREATE DATABASE "{0}"'.format(name)
if _ret['result'] is False or ret['result'] is True: ret['result'] = _ret['result']
return block_structure.get_transformer_block_field( block_key, cls, cls.MERGED_START_DATE, False )
from itertools import imap as map range = xrange
if not isinstance(user_exists, bool): ret['comment'] = user_exists ret['result'] = False return ret
obj = obj.astimezone(UTC)
for test_index in self._iter_test_indices(): test_mask = self._empty_mask() test_mask[test_index] = True yield test_mask
return None
res = grainsmod.filter_by(dict2, grain='xxx', base='default') self.assertEqual(res, dict2['default'])
if grains['os_family'] == "RedHat": grains['osmajorrelease'] = grains['osrelease'].split('.', 1)[0]
import urllib.parse quote = urllib.parse.quote
from __future__ import absolute_import
if (self.is_model_valid is not None and not self.is_model_valid(base_estimator, X_subset, y_subset)): continue
result = self.client.login(username=self.USERNAME, password=self.OLD_PASSWORD) self.assertTrue(result)
if type(obj) is self.np.memmap: obj = self.np.asarray(obj) return Pickler.save(self, obj)
for attr in REQUISITES: if attr in kwargs: kwargs[attr] = [ req() if isinstance(req, StateRequisite) else req for req in kwargs[attr] ]
titles = ['SVC with linear kernel', 'LinearSVC (linear kernel)', 'SVC with RBF kernel', 'SVC with polynomial (degree 3) kernel']
button_classes = self.q(css=BROWSE_BUTTON_CSS).attrs('class') if len(button_classes) == 0: return False return 'is-active' in button_classes[0]
type = ''
non_staff_client, _ = self.create_non_staff_authed_user_client() response = non_staff_client.delete(outline_url, {}, HTTP_ACCEPT='application/json') self.assertEqual(response.status_code, 403)
thread_context = getattr(thread, "context", "course") if thread_context == "course" and not utils.discussion_category_id_access(course, request.user, discussion_id): raise Http404
src_dir = parent_dir.replace(':', '_')
log.warning("get_all_asset_metadata request of XML modulestore - not implemented.") return []
assert not isinstance(batch, list)
data_y = data_y[MNISTPlus.idx[which_set]]
__opts__['test'] = orig_test return ret
line = line[len(match.group(1)):] for daemon in start_daemon_parameter_regex.findall(line): daemons_flags[daemon] = True
HAS_SWIFT = False try: from swiftclient import client
try: select = Select(query.first.results[0]) return (True, select.first_selected_option.text) except StaleElementReferenceException: return (False, None)
self.key = key self.value = value self.time = time self.min_compress_len = min_compress_len return True
self.seed %= MAX_RANDOMIZATION_BINS
shutil.rmtree(root_dir)
self.assertTrue(component.has_validation_error) self.assertEqual(component.validation_error_text, self.VALIDATION_ERROR_LABEL) self.assertEqual([self.VALIDATION_ERROR_MESSAGE], component.validation_error_messages)
return "{0},{1}".format(bookmark.user.username, bookmark.usage_key)
return self.get_selector('div.certificate-generation-status')
self.assertEqual(context['currency'], 'usd') self.assertEqual(context['currency_symbol'], '$')
log = logging.getLogger(__name__)
X = sparse.csr_matrix(X)
self.assertNotIn(self.module_key + '3', self.loader) self.assertNotIn(self.module_key + '4', self.loader)
wait_for( func=lambda _: EC.invisibility_of_element_located((By.CSS_SELECTOR, css_selector,)), timeout=timeout, timeout_msg="Timed out waiting for {} to be invisible.".format(css_selector) )
import salt.ext.six as six
'master': (string_types, list),
course = course or self.course role = Role.objects.create(name=role_name, course_id=course.id) role.users = users
X = sp.csr_matrix(X, copy=copy)
self.module_refresh() return
label_css = 'button.show span.show-label' world.wait_for(lambda _: world.css_has_text(label_css, label_name))
#show_authors = False
self.hw1_names = ['h1p1', 'h1p2'] self.hw2_names = ['h2p1', 'h2p2'] self.hw3_names = ['h3p1', 'h3p2']
if __grains__['os'] in ['MacOS', 'Darwin'] and opts == 'defaults': opts = 'noowners'
with cls.store.bulk_operations(course.id, emit_signals=False):
return '{0} not found'.format(name)
self.initiate_rerun()
@functools.wraps(func) def capture(*args, **kwargs): stacks.capture_stack(args, kwargs) return func(*args, **kwargs)
if verification_deadline is not None and mode_slug not in CourseMode.VERIFIED_MODES: raise forms.ValidationError("Verification deadline can be set only for verified modes.")
insert_system_path(opts, opts['utils_dirs'])
self.assertEqual(xblock_info['enable_proctored_exams'], True)
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True, False], credit_type='halves' )
debconfmod.__grains__ = {} debconfmod.__salt__ = {} debconfmod.__context__ = {} debconfmod.__opts__ = {}
from __future__ import absolute_import, print_function import os import sys import pprint
try: section_content = about_information.get_value(**about_context)
if self.initial_index is None: return self.index.get('versions', {}).keys()
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
cet = CourseEmailTemplate.objects.get(name='foo') self.assertIsNotNone(cet)
call_command('reindex_course_team', self.team1.team_id, self.team2.team_id) mock_index.assert_any_call(self.team1) mock_index.assert_any_call(self.team2) mock_index.reset_mock()
self._assert_enable_certs_button(True)
from StringIO import StringIO
choices_correct = self._check_student_choices(binary_choices) inputs_correct = self._check_student_inputs(numtolerance_inputs) correct = choices_correct and inputs_correct
course_email = cls( course_id=course_id, sender=sender, subject=subject, html_message=html_message, text_message=text_message, template_name=template_name, from_addr=from_addr, )
import salt.ext.six as six from salt.ext.six.moves import filter from salt.ext.six.moves.urllib.parse import quote as _quote
return y
already_fixed = {}
plt.figure() for i in xrange(self.n_colors): plt.plot(x, plots[i], color=self.colors_rgb[i], alpha=.5)
from __future__ import absolute_import, print_function import logging
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import integration
config.enabled = False config.save() self.assertFalse(VerifiedTrackCohortedCourse.is_verified_track_cohort_enabled(course_key))
return iter(getattr(d, _iterlists)(**kw))
self.provider.enable_integration = True self.provider.save()
if text[-1] in SUFFIXES: return float(text[:-1]) * SUFFIXES[text[-1]] else: return float(text)
myminion: base: |_ httpd: 2.2.15-29.el6.centos updates: |_ httpd: 2.2.15-30.el6.centos
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, max_attempts=0, done=True, correct=False) self.assertTrue(module.should_show_reset_button())
if kl > tol or not (kl <= tol): raise AssertionError("KL divergence between two " "equivalent models should be 0 but is "+ str(kl))
return self.retrieve(request, *args, **kwargs)
self.assertEqual(f(None), "0")
Xt = X for name, transform in self.steps[:-1]: Xt = transform.transform(Xt) return self.steps[-1][-1].predict(Xt)
settings.ALLOWED_HOSTS = [request.META['HTTP_HOST']] self.assertEqual(safe_get_host(request), request.META['HTTP_HOST'])
self = layer
self.assertEquals( len(self.store.get_items(course_key.for_branch(None), settings={'display_name': display_name})), expected_number )
if tree.n_outputs == 1: value = tree.value[node_id][0, :] else: value = tree.value[node_id]
while not lines[0].startswith('{') and not lines[0].startswith('['): lines = lines[1:]
unenroll_email( course_id=ccx_key, student_email=instructor.email, email_students=send_email, email_params=email_params, )
list_staff_master_course = list_with_level(self.course, 'staff') list_instructor_master_course = list_with_level(self.course, 'instructor')
return cls._do_reindex(modulestore, library_key)
import salt.utils.jid import salt.returners
return False
__BACKUP_ATTRIBUTE_NAME = '__monkey_patch'
DEFAULT_THIN_DIR = '/var/tmp/.%%USER%%_%%FQDNUUID%%_salt'
pca = PCA(n_components=3)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
required_boto3_version = '1.2.1'
assert key.user_id == self.user.id
self.check_event_response_by_key( 'handle_vote', resource, 'newVotes', test_case['new_votes'], self.XBLOCK_NAMES[1] )
user_profile = UserProfile.objects.get(user=user) self.assertEqual(user_profile.name, "Robot Name")
return not WORKTREE_INFO[key].get('stale', False)
fifth = -(e.count('.'))
K = rbf_kernel(np.atleast_2d(x), np.atleast_2d(y), **kwds) return K
return self._is_element_visible(".edit-comment-body[data-id='{}']".format(comment_id))
self.blank_lines += 1 del self.tokens[0]
self.xmodule.is_condition_satisfied = lambda: True self.xmodule.descriptor.get_children = lambda: []
self.user.is_staff = True self.user.save() self.client.login(username=self.user.username, password='foo')
mixed_stores.remove(store) mixed_stores.insert(0, store) return
argv = self.opts['argv']
pass
line_number = self.index_to_line_number(index) return self.line_number_to_end_index(line_number)
clf = svm.LinearSVC(penalty='l1', loss='squared_hinge', dual=False, random_state=0).fit(X, Y) assert_array_equal(clf.predict(T), true_result)
ret['changes'] = { 'testing': { 'old': 'Unchanged', 'new': 'Something pretended to change' } }
with self.assertNumQueries(0): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
SECRET_KEY = 'dev key'
self.assertIn( 'Update not available', self.run_function('softwareupdate.download', ['spongebob']))
world.css_click(".mce-i-none")
from salt.utils.odict import OrderedDict
response = self._get_page(payment_flow, course.id) self._assert_contribution_amount(response, "")
userdata_file: /etc/salt/my-userdata-file
import salt.ext.six as six try: import git HAS_GITPYTHON = True except ImportError: HAS_GITPYTHON = False
self.key = key return None
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
ilo.__salt__ = {}
time.sleep(1) return info(name).get('shell') == shell
raise ValueError('Timeout cannot be a float')
self.assert_response(safe_cookie_data) self.assert_user_in_session()
self.prob1 = ItemFactory.create( parent_location=self.vert1.location, category='problem', display_name='untitled problem 1' )
Z = Z.reshape(grid.shape[:-1]) plt.contourf(multiples, multiples, Z, cmap=plt.cm.Paired) plt.axis('off')
self.path = preprocess(self.path) X, y = self._load_data()
difference = salt.utils.compare_dicts(old, new)
ctype='create'
from __future__ import absolute_import import optparse import pprint
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
__virtualname__ = 'fmadm'
super(ContainerBase, self).setUp(is_staff=is_staff)
pass
disable_animations(page) page.q(css=css).filter(_is_visible).nth(source_index).click()
if script: script_element = etree.SubElement(root, "script") script_element.set("type", "loncapa/python") script_element.text = str(script)
else: status = VERIFY_STATUS_MISSED_DEADLINE
key = cleaned_string(key) key_prefix = cleaned_string(key_prefix) version = cleaned_string(version)
if not CreditEligibility.is_user_eligible_for_credit(course_key, username): raise UserNotEligibleException(course_key, username)
return ContainerPage(self.browser, self.locator).visit()
classifier.fit(data[:n_samples / 2], digits.target[:n_samples / 2])
algo = cert.get_signature_algorithm()
credit_api.set_credit_requirement_status( self.user.username, self.course.id, "grade", "grade", status="satisfied", reason={"final_grade": 0.95} )
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
(n, d) = a.frac() (n2, d2) = b.frac() return Progress(n + n2, d + d2)
return ipsecpolicy
self.staff_user = User.objects.create_user( "patty", "patty@fake.edx.org", ) self.staff_user.is_staff = True
BULK_EMAIL_JOB_SIZE_THRESHOLD = 100
self.assertTrue(self.store.has_changes(component))
return _is_staff_for_article(article, user)
super(TestGenerateCourseOverview, self).setUp() self.course_key_1 = CourseFactory.create().id self.course_key_2 = CourseFactory.create().id self.command = generate_course_overview.Command()
clf = svm.OneClassSVM() clf.fit(X) pred = clf.predict(T)
self._params.update(l._params)
return urlparse(self.runtime.handler_url(self.block, handler_name, suffix=suffix)).path
import salt.ext.six as six
self.assertEqual(response.status_code, 200) msg = Messages.NO_ECOM_API.format(username=self.user.username, course_id=self.course.id) self.assertResponseMessage(response, msg)
_install_from_path.assert_called_with(source)
self.__setup_signals()
self.check_anonymous_request_rejected('delete') self.assertFalse(mock_log.info.called)
return_stdout = kwargs.pop('return_stdout', False)
self.current_request_configuration.data = {} self.current_request_configuration.cache = {}
is_secure_default = request.is_secure request.is_secure = lambda: False try: yield finally: request.is_secure = is_secure_default
for name in names: ret[name] = '' pkgs = list_pkgs(versions_as_list=True) repo = ['-o', 'APT::Default-Release={0}'.format(fromrepo)] \ if fromrepo else None
from __future__ import absolute_import import datetime import random import string
def_key = AsideDefinitionKeyV1(definition_id, aside_type) usage_key = AsideUsageKeyV1(usage_id, aside_type) return (def_key, usage_key)
import collections import logging import os import sys import traceback
from __future__ import unicode_literals
'course_structure_api',
#latex_use_parts = False
self.tab_nav.mathjax_has_rendered()
reconstruction_error = np.linalg.norm(K - K_iso) / Npts assert_almost_equal(reconstruction_error, clf.reconstruction_error())
query = self._qs(self.browser.current_url) return 'access_denied' in query['error']
waitpid_options = 0
return
if not use_winrm:
i, j = np.triu_indices(X.shape[0], k=1) X = X[i, j]
for i in xrange(len(p)): assert p[i] == precision[i], (i, p[i], precision[i]) assert recall[i] == recall[i]
scores = cross_val_score(reg, X, y, cv=5) assert_array_almost_equal(scores, [0.94, 0.97, 0.97, 0.99, 0.92], 2)
import numpy import theano from pylearn2.datasets.utlc import load_ndarray_dataset, load_sparse_dataset from pylearn2.utils import subdict, sharedX
import salt.utils
for i in xrange(k): dists[:, i] = numpy.square((X - mu[i, :])).sum(axis=1)
partition.scheme.set_group_for_user(user, partition, group)
pagerduty.__opts__ = {} pagerduty.__salt__ = { 'config.option': MagicMock(return_value=None) }
distances = np.sqrt(2. * distances) return children, n_components, n_leaves, parent, distances
import salt.ext.six as six try: import boto import boto.rds2 logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
return ret
valid_assocs = [a for a in associations if a.getExpiresIn() > 0] if valid_assocs: valid_assocs.sort(lambda a: a.getExpiresIn(), reverse=True) assoc = valid_assocs.sort[0]
if 'database' not in kwargs: return False if user_exists(username, **kwargs): return False
self.user = UserFactory.create(password=self.test_password) self.teams_url = reverse('teams_dashboard', args=[self.course.id])
staff = UserFactory() allow_access(self.course, staff, 'staff') self.assertTrue(CourseStaffRole(self.course.id).has_user(staff))
msg = 'Error occurred while evaluating CustomResponse' log.warning(msg, exc_info=True)
'MODE_CREATION_FOR_TESTING': False,
url( r'^v1/blocks/', BlocksInCourseView.as_view(), name="blocks_in_course" ),
super(CourseKeyVerificationTestCase, self).setUp() self.course = CourseFactory.create(org='edX', number='test_course_key', display_name='Test Course')
signature = _compute_signature(parameters, access_key_secret) parameters['Signature'] = signature
model = InvoiceTransaction extra = 0 readonly_fields = ( 'created', 'modified', 'created_by', 'last_modified_by' )
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course_id): parent = mongo_store.get_parent_location(self.problem_x1a_1) self.assertEqual(parent, self.vertical_x1a)
obj_au_settings = obj_au.Settings
email_body_plain = render_to_string('credit_notifications/credit_eligibility_email.txt', context) msg_alternative.attach(SafeMIMEText(email_body_plain, _subtype='plain', _charset='utf-8'))
images_grad, filters_grad = grad(cost, [images, filters]) reference_cost = (cost_weights * output_conv2d).sum() images_conv2d_grad, filters_conv2d_grad = grad(reference_cost, [images, filters])
team.add_user(self.student)
self.enrollment.update_enrollment(mode=CourseMode.VERIFIED)
if settings.LMS_SEGMENT_KEY: analytics.write_key = settings.LMS_SEGMENT_KEY
if item in ['constraint']: if isinstance(item_type, six.string_types): cmd += [item_type]
if child.visible_to_staff_only: continue
self.dispatch_table = copyreg.dispatch_table.copy()
self.courseware_page.a11y_audit.config.set_scope( include=['div.sequence-nav']) self.courseware_page.a11y_audit.check_for_accessibility_errors()
if ':' in item: key, value = item.split(':', 1) setinfo[key] = value[1:]
self.explicit = True return optparse.Option.take_action(self, action, dest, *args, **kwargs)
(osfullname, _) = osinfo.Name.split('|', 1) osfullname = osfullname.strip()
rewritten_url = cdn_base_url.rstrip("/") + "/" + parsed.path.lstrip("/") validator = URLValidator()
set_input_value(self, self._bounded_selector(self.NAME_INPUT_SELECTOR), new_name)
return True
self.certificates_section.add_certificate_exception(self.user_name, '')
'modules_max_memory': int,
SORT_REVISION_FAVOR_DRAFT = ('_id.revision', pymongo.DESCENDING)
return course.display_name_with_default.replace('<', '&lt;').replace('>', '&gt;')
msg_format += _(" (skipping {skipped})")
self._course_overview = None
else: ret = _load_result(existing, ret)
__import__(name) return sys.modules[name]
try: return CourseKey.from_string(data) except InvalidKeyError as ex: raise serializers.ValidationError("Invalid course key: {msg}".format(msg=ex.msg))
current_grant_by_default = _get_wmi_setting('IIsIPSecuritySetting', 'GrantByDefault', server)
self.functions, self.returners, self.function_errors, self.executors = self._load_modules()
name = '{0}-{1}'.format(name, version)
msg += 'salt-master will crash pretty soon! ' level = logging.CRITICAL
remove_review_policy(exam_id=exam_id)
K1 = kernel(X, Y) K2 = pairwise_kernels(X, Y, metric=kernel) assert_array_almost_equal(K1, K2)
tenant = MockTenants() if self.flag == 1: tenant.id = None return tenant tenant.id = tenant_id return tenant
return 24, 80
clf = svm.SVC(kernel='linear') clf.fit(X, y)
COURSE_TAB_NAMESPACE = 'openedx.course_tab'
from django.conf import settings from django.contrib.auth.models import User from django.db import models, migrations
exc = drf_exceptions.AuthenticationFailed({u'error_code': -1}) self.assertEqual(exc.detail, u"{u'error_code': -1}")
self.course.user_partitions = partitions self.course = self.store.update_item(self.course, ModuleStoreEnum.UserID.test)
metadata = None try: if os.path.getmtime(cache_file) > exp: metadata = _read_buckets_cache_file(cache_file) except OSError: pass
self.test_b_grade_exact()
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import integration import salt.utils
X, y = mnist.data / 255., mnist.target X_train, X_test = X[:60000], X[60000:] y_train, y_test = y[:60000], y[60000:]
self.verify_my_team_count(1)
from __future__ import absolute_import import logging import json import yaml
salt '*' vsphere.get_ntp_config my.esxi.host root bad-password
source = name
from __future__ import absolute_import
import salt.ext.six as six from salt.exceptions import SaltSystemExit
milestones = milestones_api.get_milestones("{usage_key}{qualifier}".format( usage_key=prereq_content_key, qualifier=GATING_NAMESPACE_QUALIFIER )) for milestone in milestones: milestones_api.remove_milestone(milestone.get('id'))
return True
for key, value in mappings.iteritems(): setattr(self, key, value)
for X in [data, csr_matrix(data)]: X = VarianceThreshold(threshold=.4).fit_transform(X) assert_equal((len(data), 1), X.shape)
youtube_stub_config_url = cls.URL + 'get_config' response = requests.get(youtube_stub_config_url) if response.ok: return json.loads(response.content) else: return {}
sign, ld = np.linalg.slogdet(A) if not sign > 0: return -np.inf return ld
'job_cache': bool,
gated_content = gating_api.get_gated_content(course, student)
from salt.states import lvm
template = self.cleaned_data["html_template"] self._validate_template(template) return template
import os
return NAMESPACE_CHOICES
from salt.exceptions import CommandExecutionError from salt.modules import mac_assistive as assistive
launchctl.__salt__ = {}
multi_db = True
sampling_algorithm = {}
ax.plot_surface(X, Y, Z, rstride=8, cstride=8, alpha=0.3, color=c) ax.plot([1], [1], [1], color=c, label=label)
from salt.modules import nfs3
return self.q(css='{} input[name=entrance-exam-task-history]'.format(self.EE_CONTAINER))
self.assertListEqual( self.get_item_from_modulestore(self.seq2_usage_key).children, [unit_1_key, unit_2_key], ) self.assertListEqual( self.get_item_from_modulestore(self.seq_usage_key).children,
teams_per_topic = 10 topics = self.setup_topics(num_topics=self.NUM_TOPICS, teams_per_topic=teams_per_topic) self.assert_serializer_output(topics, num_teams_per_topic=teams_per_topic, num_queries=1)
import time import os import codecs import logging
assert_true(clf.fit_intercept)
try: import sqlite3 HAS_SQLITE3 = True except ImportError: HAS_SQLITE3 = False
from salt.modules import useradd from salt.exceptions import CommandExecutionError import pwd
if privacy == self.PRIVACY_PUBLIC: self.assertEqual(profile_page.privacy, 'all_users') else: self.assertEqual(profile_page.privacy, 'private')
zero = sympy.Symbol('dotzero') identity = sympy.Symbol('dotidentity')
from __future__ import absolute_import import datetime import logging import json import sys import email.mime.multipart
if before is None and after is None and not match: match = content
try: fileserver.init() except FileserverConfigError as exc: critical_errors.append('{0}'.format(exc))
from __future__ import absolute_import
load_svmlight_file(.42)
cohort_name = 'I AM A RANDOM COHORT' data = {'name': cohort_name, 'assignment_type': CourseCohort.RANDOM} response_dict = self.put_handler(self.course, data=data)
X, y = 3 * diabetes.data, diabetes.target G = np.dot(X.T, X) Xy = np.dot(X.T, y)
self.verify_content_existence(self.store, root_dir, course_id, 'about', 'about', '.html')
mean_tpr = np.zeros_like(all_fpr) for i in range(n_classes): mean_tpr += interp(all_fpr, fpr[i], tpr[i])
self.assertDeserializeEqual(-2.78, '-2.78')
clf = cls().fit(X2, y2) assert_raises(ValueError, clf.predict, X2[:, :-1])
mode = __salt__['config.manage_mode']('0600') owner, group, crontab_dir = _get_cron_info()
'ENABLE_DISABLING_XBLOCK_TYPES': True,
self.check_event_response_by_key('handle_vote', resource, 'newVotes', test_case['new_votes'])
pass
comment, passed, retries = _search(quidditch, retries) if not passed: return (comment, str(passed))
user2 = UserFactory.create() SkippedReverification.add_skipped_reverification_attempt( checkpoint=self.checkpoint, user_id=user2.id, course_id=unicode(self.course.id) )
self.assertTrue(allowance_section.is_add_allowance_popup_visible)
for key in ['xqueue_header', 'xqueue_body']: if key not in data: raise Http404
return (port, name, admin_state_up)
self.assertEqual(item.title, title) self.assertEqual(item.notes, notes)
return
self.assertTrue(self._has_changes(locations['grandparent'])) self.assertTrue(self._has_changes(locations['parent']))
return self.save_asset_metadata_list([asset_metadata, ], user_id, import_only)
modulestore()
test_cases = [('unsubmitted', 'unanswered'), ('incomplete', 'incorrect'), ('incorrect', 'incorrect')]
cStyleComment = Regex(r"/\*(?:[^*]*\*+)+?/").setName("C style comment")
{'type': unique_tab_type}, {'type': unique_tab_type},
random_state = check_random_state(0)
overrides = overrides.copy() if overrides else {} overrides.setdefault("course_id", unicode(self.course.id)) return make_minimal_cs_thread(overrides)
with self.assertRaises(ItemNotFoundError): are_permissions_roles_seeded(course_id)
raise PermissionDenied()
pass
if partial_text: wait_for(lambda _: css_html(css_selector, index=index), timeout=8)
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
return self.q(css='{} input[name=skip-entrance-exam]'.format(self.EE_CONTAINER))
'recordedYoutubeIsAvailable': self.youtube_is_available,
instructor = UserFactory.create(username="instructor", email="instructor@e.com", password="test") role = CourseInstructorRole(self.course_limited.id) role.add_users(instructor)
def get_memmap_info(memmap): assert isinstance(memmap, numpy.memmap)
from __future__ import absolute_import import time import datetime
authentication_classes = (authentication.SessionAuthentication,) permission_classes = (ApiKeyHeaderPermission,) queryset = User.objects.all().prefetch_related("preferences") serializer_class = UserSerializer paginate_by = 10 paginate_by_param = "page_size"
'ENABLE_COSMETIC_DISPLAY_PRICE': False,
from salt.modules import serverdensity_device from salt.exceptions import CommandExecutionError
return self.q(css='#my-bookmarks').present
self.assertEqual( self.run_function('shadow.get_last_change', [NO_USER]), 'ERROR: User not found: {0}'.format(NO_USER))
content = contentstore().find(asset_key, throw_on_not_found=False) self.assertIsNone(content)
context['company_about_description'] = _("{platform_name} offers interactive online classes and MOOCs.").format( platform_name=platform_name)
allow_access(course_ccx, staff, 'staff')
try: return X.iloc[indices] except ValueError: warnings.warn("Copying input dataframe for slicing.", DataConversionWarning) return X.copy().iloc[indices]
os.remove(destdir) os.makedirs(destdir)
top_idx = set(component.argsort()[-3:][::-1]) assert_true(tuple(sorted(top_idx)) in correct_idx_grps)
self._write()
self.timer_stop = Event() self.timer = CacheTimer(self.opts, self.timer_stop) self.timer.start() self.running = True
if 'X-Edx-Api-Key' in self.headers: response = self.server._response_str logger.debug("Comment Service: sending response %s", json.dumps(response))
mock_get_request_user.return_value = AnonymousUser() mock_refund_seat.reset_mock() self.send_signal() self.assertFalse(mock_refund_seat.called)
import logging import re
assert_raises(ValueError, compute_sample_weight, {1: 2, 2: 1}, y, range(4))
class DraftReorderTestCase(ModuleStoreTestCase):
child_vertical = ItemFactory.create(parent_location=vertical.location, category='vertical', display_name='Child Vertical') self.assertEqual(xblock_type_display_name(child_vertical), u'Vertical')
return urlencode({ 'next': '/account/finish_auth?{}'.format(urlencode(params)) })
LMS_SEGMENT_KEY = os.environ.get('SEGMENT_KEY')
return self.q(css=self.BOTTOM_ADD_SECTION_BUTTON).first
self.expect_error_on_file_content( '', "The file must contain a 'cohort' column containing cohort names." )
url = reverse("progress", kwargs={"course_id": unicode(self.course.id)}) return self.client.get(url)
transformer = Conv2D(filters=filters, batch_size=len(input), input_space=input_space, border_mode='full') sum_sqr_XX = transformer.lmul(X ** 2)
__ = CourseOverview.get_from_id(course.id)
max_fd = resource.getrlimit(resource.RLIMIT_NOFILE) try: os.closerange(pty.STDERR_FILENO + 1, max_fd[0]) except OSError: pass
request = RequestFactory().request() request.user = user all_tabs = get_course_tab_list(request, self.course) return any(tab.type == 'discussion' for tab in all_tabs)
def run_autoencoder( self,
p = safe_sparse_dot(v, self.components_.T) p += self.intercept_hidden_ return expit(p, out=p)
self.assert_enrollment_status(as_server=True, mode=CourseMode.VERIFIED)
donation = Donation.add_to_order(self.cart, self.COST) self._assert_donation( donation, donation_type="general", unit_cost=self.COST, line_desc="Donation for edX" )
ROLE = 'instructor' def __init__(self, *args, **kwargs): super(CourseInstructorRole, self).__init__(self.ROLE, *args, **kwargs)
STATICFILES_STORAGE = 'pipeline.storage.PipelineCachedStorage'
try: return CourseRegCodeItemAnnotation.objects.get(course_id=self.course_id).annotation except CourseRegCodeItemAnnotation.DoesNotExist: return u""
import logging import os import re
user_enroll = get_enrollment(self.username, self.course_id) self.assertTrue(user_enroll['is_active'])
add_enrollment(user.username, unicode(course_key), mode)
module.save() return module
continue
testing.assert_array_equal( FunctionTransformer(np.log1p).transform(X), np.log1p(X), )
axes = self.input_axes assert len(axes) == 4
if EventMatchTolerates.STRING_PAYLOAD in tolerate: expected = parse_event_payload(expected) actual = parse_event_payload(actual)
self.course.end = None self.assertEqual( course_complete.badge_description(self.course, 'honor'), 'Completed the course "Badged" (honor)' )
cache.clear()
attempt.mark_ready() attempt.submit(copy_id_photo_from=initial_verification)
self.setup_logfile_logger() verify_log(self.config)
raise NotImplementedError()
('ALIGN', (2, 1), (2, -1), 'CENTER'),
if state == {}: state = None
return None
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
self.assertEqual(context['currency'], 'usd') self.assertEqual(context['currency_symbol'], '$')
return self.q(css='.signatory-title-value').first.html[0]
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
HAS_KEYSTONE = False try: from keystoneclient.v2_0 import client as kstone #import keystoneclient.apiclient.exceptions as kstone_exc HAS_KEYSTONE = True except ImportError: pass
assert_raises(ValueError, getattr(nbrs_D, method), X)
return True
patch_extractor = sp_extract_patches(IR, IC, KR, KC, CH, RasterOrders.row_col_channel, RasterOrders.row_col_channel, subsample, border_mode, flip_patches=True).tocsc()
'rule': Rules.python_wrap_html
comps = file_name.split('/') file_path = '/'.join(comps[:-1]) if not os.path.exists(file_path): os.makedirs(file_path)
args.date = parse_datestring(args.date).date()
return xblock._edit_info.get('subtree_edited_by')
stacklevel = 3
tracker._initialize_backends_from_django_settings()
fstats_post = os.stat(path_test)
return response
path = os.path.expanduser(path)
self._verify_masquerade_for_all_groups()
self.course_nav.go_to_vertical('Test Problem 1')
raise NotImplementedError(str(self.__class__) + " does not implement " "conditional_expectation.")
self.assertEqual(resp.status_code, 200)
from salt.daemons.flo import core from salt.daemons.test.plan import actors
sh_ = '/bin/sh' if os.path.isfile(os.path.join(root, 'bin/bash')): sh_ = '/bin/bash'
attempt = SoftwareSecurePhotoVerification(user=user) attempt.status = 'submitted' attempt.save()
NO_BOTO_MODULE = True BOTO_NOT_CONFIGURED = True try: import boto NO_BOTO_MODULE = False try: boto.connect_iam() BOTO_NOT_CONFIGURED = False except boto.exception.NoAuthHandlerFound: pass except ImportError: pass
self.skipTest('\'timelib\' is not installed')
return vb_machinestate_to_tuple(machinestate)[1]
student_answers = self.lcp.student_answers answer_ids = student_answers.keys()
return self.lti_consumer.consumer_secret
alphas = np.tile(np.sort(alphas)[::-1], (n_l1_ratio, 1))
import salt
from __future__ import absolute_import, print_function import glob import os import re import sys import json import time import shutil import optparse import subprocess import random
ret['message'] = 'Secret key for {0} deleted\n'.format(fingerprint)
sum_square_grad = sharedX(param.get_value() * 0.)
entry.save_now() return task_progress
sdb.__opts__ = {}
if self.is_active != is_active and is_active is not None: self.is_active = is_active activation_changed = True
cleanup_services = config.get_cloud_config_value( 'cleanup_services', get_configured_provider(), __opts__, search_global=False, default=False ) if cleanup_services: log.debug('Deleting service {0}'.format(service_name))
predictions = estimator.predict(X[:, features])
man = salt.utils.which('man') if not man: return False
self.wait_for_element_visibility( '#settings-language-value', 'Language selector element is available' ) return self.q(css='#settings-language-value')
__virtualname__ = 'disk'
_update_context_with_user_info(context, user, user_certificate)
video = self.store.get_item(child_to_move_location)
vm_['instance_id'] = data.id
continue
md5er = hashlib.md5() update_hash(md5er, obj) return md5er.hexdigest()
username: user@example.com password: secretpassword datacenter_id: <UUID> ssh_private_key: /path/to/private.key ssh_public_key: /path/to/public.key
return self._get_cohort_messages("errors")
rendered_html = etree.XML(problem.get_html())
check_is_fitted(self, ["classes_", "calibrated_classifiers_"]) return self.classes_[np.argmax(self.predict_proba(X), axis=1)]
return _get_array_element('contrast change', label, (0.8, 1.3))
def __init__(self): pass
instructor_courses = UserBasedRole(self.user, CourseInstructorRole.ROLE).courses_with_role() staff_courses = UserBasedRole(self.user, CourseStaffRole.ROLE).courses_with_role() all_courses = (instructor_courses | staff_courses)
arg_spec_for_format = arg_spec[:7 if PY3_OR_LATER else 4]
mode_slug = models.CharField(max_length=100)
return (name, description)
super(StudioPagePerformanceTest, self).setUp() AutoAuthPage(self.browser, staff=True).visit()
self.assertNotIn('url_name', course_xml.attrib)
self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS + PayAndVerifyView.VERIFICATION_STEPS, PayAndVerifyView.FACE_PHOTO_STEP )
y = np.linspace(0, resolution - 1, resolution) first_quarter = y < resolution / 4 y[first_quarter] = 3. y[np.logical_not(first_quarter)] = -1.
X1, y1 = load_svmlight_file(datafile)
enrolled_course_keys = [enrollment.course_id for enrollment in course_enrollments] course_deadlines = VerificationDeadline.deadlines_for_courses(enrolled_course_keys)
train_data = iter(ALL_FOOD_DOCS[:-1]) tv = TfidfVectorizer(norm='l1')
if (isinstance(self, SparseSGDClassifierTestCase) or isinstance(self, SparseSGDRegressorTestCase)): decay = .01
def __call__(self, event): context = event.get('context', {}) course_id = context.get('course_id')
with filesystem.open('updates.html', 'r') as course_policy: on_disk = course_policy.read() self.assertEqual(course_updates.data, on_disk)
problem_url_name = 'H1P1' self.define_option_problem(problem_url_name) location = InstructorTaskModuleTestCase.problem_location(problem_url_name) descriptor = self.module_store.get_item(location)
from __future__ import absolute_import
super(DraftModuleStore, self).clone_course(source_course_id, dest_course_id, user_id, fields)
VERIFY_STUDENT["SOFTWARE_SECURE"] = { "API_ACCESS_KEY": "BBBBBBBBBBBBBBBBBBBB", "API_SECRET_KEY": "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", }
self.reset_password_page.fill_password_reset_form(self.user_info['email'])
apache2.service.running() \\ .require(apache2.pkg, pkg='libapache2-mod-wsgi') \\ .watch(file='/etc/apache2/httpd.conf')
changed_old[dn] = o changed_new[dn] = n success_dn_set[dn] = True
if not isinstance(course_key, CCXLocator): send_ccx_course_published.delay(unicode(course_key))
uncertainty_index = np.argsort(pred_entropies)[-10:]
from salttesting import skipIf from salttesting.helpers import (ensure_in_syspath, destructiveTest) ensure_in_syspath('../../')
if 'order' in signature(np.copy).parameters: def safe_copy(X): return np.copy(X, order='K') else: safe_copy = np.copy
from __future__ import absolute_import import os import logging
super(CourseKeyField, self).__init__(**kwargs)
data.pop() for minion, ret in data: ret[minion] = json.loads(ret)
self.variables = variables self.p = p
y_true = (y_true == pos_label)
import logging import os
self._setup_mp_logging_listener()
splits = iter(cval.KFold(4, 2)) train, test = next(splits) assert_array_equal(test, [0, 1]) assert_array_equal(train, [2, 3])
return _get_fake_course_info(course_id)
if enrollment_mode is not None: CourseEnrollmentFactory( is_active=is_active, mode=enrollment_mode, course_id=self.course.id, user=self.user )
if info.external_attr == 2716663808: source = zfile.read(target) os.symlink(source, os.path.join(dest, target)) continue
item = self.store.get_item(item_location) item.visible_to_staff_only = True self.store.update_item(item, self.user.id)
module = descriptor
self._assert_user_name(self.FULL_NAME)
(['verified', 'audit'], 'course_modes_choose', CourseMode.DEFAULT_MODE_SLUG),
return router
assert_raises(ValueError, gs.fit, X, y)
pass
try: import cherrypy
updated_time = models.DateTimeField(auto_now=True)
print("Computing Spectral embedding") embedder = manifold.SpectralEmbedding(n_components=2, random_state=0, eigen_solver="arpack") t0 = time() X_se = embedder.fit_transform(X)
comment, passed, retries = _download(win_updater, retries) ret['comment'] += comment if not passed: ret['result'] = False return ret
if len(names) == 1: return ret[names[0]] return ret
lfw_people = fetch_lfw_people(data_home=SCIKIT_LEARN_DATA, resize=None, slice_=None, color=True, download_if_missing=False) assert_equal(lfw_people.images.shape, (17, 250, 250, 3))
return security_group
GITPYTHON_MINVER = '0.3' PYGIT2_MINVER = '0.20.3' LIBGIT2_MINVER = '0.20.0' DULWICH_MINVER = (0, 9, 4)
course = self._create_course("verified") response = self._get_page(payment_flow, course.id) self._assert_contribution_amount(response, "")
self.assertEqual(response.status_code, 400)
try: choc_path = _find_chocolatey(__context__, __salt__) except CommandExecutionError: choc_path = None if choc_path and not force: return 'Chocolatey found at {0}'.format(choc_path)
input_box = self.student_email_input.first.results[0] input_box.send_keys(email_addres)
for branch in [ModuleStoreEnum.RevisionOption.published_only, ModuleStoreEnum.RevisionOption.draft_only]: super(DraftVersioningModuleStore, self).fix_not_found( self._map_revision_to_branch(course_key, branch), user_id )
message_type = param_dict['message']
self.assertEquals(self.middleware.process_request(self.request), None)
server_thread = threading.Thread(target=self.serve_forever) server_thread.daemon = True server_thread.start()
if getattr(self.distribution, 'salt_version_hardcoded_path', None) is None: print('This command is not meant to be called on it\'s own') exit(1)
dummy = 'void'
system_info = win32net.NetServerGetInfo(None, 101)
parameters["signature"] = signature(parameters, shared_secret_key)
'ENABLE_CONTENT_LIBRARIES': True,
import logging
from __future__ import absolute_import import copy import logging try: import pwd HAS_PWD = True except ImportError: HAS_PWD = False
rng = rng = np.random.RandomState(42)
CourseAboutSearchIndexer.index_about_information(modulestore, structure)
self.update_masquerade(role='student', user_name=self.student_user.username) content = self.get_course_info_page().content self.assertIn("OOGIE BLOOGIE", content)
usage_key = usage_key.replace(course_key=modulestore().fill_in_run(usage_key.course_key))
certificate_count = 3 for __ in xrange(certificate_count): self.generate_certificate(course_id=self.course.id, mode='honor', status=CertificateStatuses.downloadable)
self.refresh_course()
self.check_event_response_by_key('flag_resource', resource, 'reason', 'reason 0')
return self.conditional.get_weights()
from __future__ import unicode_literals
signs = np.sign(X) signs = signs.view(dtype='|S{0}'.format(signs.strides[0])) unique_signs, cluster_index = np.unique(signs, return_inverse=True)
sorted_languages = sorted(languages.items(), key=itemgetter(1))
import salt.utils.jid import salt.returners
course = CourseFactory.create(mobile_available=True, default_store=modulestore_type) course_overview_1 = CourseOverview.get_from_id(course.id) self.assertTrue(course_overview_1.mobile_available)
__virtualname__ = 'varstack'
return str((template_name, sorted(context.iteritems())))
ret = salt.utils.cloud.bootstrap(vm_, __opts__)
self.assertEqual(bookmark, bookmark2) self.assertEqual(bookmark.xblock_cache, bookmark2.xblock_cache) self.assert_bookmark_model_is_valid(bookmark2, bookmark_data)
for course_key in courses: self.assertTrue(is_course_in_block_structure_cache(course_key, self.store))
assert all([len(arg) == len(args[0]) for arg in args]) return izip(*args)
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, max_attempts=0, done=True, correct=True) self.assertTrue(module.should_show_reset_button())
self.course_nav.go_to_vertical('Test Vertical-0')
return (self.get_input_space(), self.get_input_source())
this_algorithm = deepcopy(algorithm) this_algorithm._set_monitoring_dataset(datasets)
def _get_course_name(el): return el.text return self.q(css='h3.course-title > a').map(_get_course_name).results
gated_content = gating_api.get_gated_content(course, user)
return
return self.count
assert_warns(UserWarning, f) failed = True
skip_if_no_sklearn() trainer = yaml_parse.load(test_yaml) trainer.main_loop()
preds2 = np.zeros_like(y) for train, test in cv.split(X, y): est.fit(X[train], y[train]) preds2[test] = est.predict(X[test])
def test_real_user(useless): useless_user = Mock(email='fake@fake.com', id=useless) return useless_user
self.course = CourseFactory.create() self.checkpoint_location = u'i4x://{org}/{course}/edx-reverification-block/first_uuid'.format( org=self.course.id.org, course=self.course.id.course )
self.assertFalse(mock_send.called)
if not hasattr(self, 'freeze_set'): self.freeze_set = set([])
clf = NearestCentroid() clf.fit(X, y) assert_array_equal(clf.predict(T_csr), true_result)
query_features = task_input.get('features') student_data = enrolled_students_features(course_id, query_features) header, rows = format_dictlist(student_data, query_features)
return True
return page_title_breadcrumbs(*args)
response = self.client.get(self.url, params)
self.mock_tracker.reset_mock()
return self._get_xblocks()
least_squares[...] = 1 AA = 1.
team_list = self.get_teams_list(user=user, expected_status=200, data=course_two_data) self.assertEqual(team_list['count'], 0)
self.assertTrue( ('Got ' in comment and 'Generated script' in comment) or ('setuptools>=0.7' in comment) )
self.context['return_to_annotation'] = True xml = self.render_to_xml(self.context) self.assert_has_xpath(xml, xpath, self.context)
for X in [self.train.X, self.test.X]: assert X.min() == 0.0 assert X.max() == 1.0
from __future__ import absolute_import from salt.ext.six.moves import range
from __future__ import absolute_import
if not conf.get('sparse', False): valid_set = valid_set.get_value(borrow=True) test_set = test_set.get_value(borrow=True)
estimators = [("Tree", DecisionTreeRegressor()), ("Bagging(Tree)", BaggingRegressor(DecisionTreeRegressor()))]
self.top_words = self.top_dict( temp_all_words, self.num_top_words )
def __virtual__(): return False
from salt.modules import publish import salt.crypt import salt.transport from salt.exceptions import SaltReqTimeoutError
from salt.modules import debconfmod import os
return (url_name is not None and url_name.startswith(tag) and re.search('[0-9a-fA-F]{12}$', url_name))
return self.runtime.get_edited_on(self)
return self.q(css='input[name=problem-grade-report]')
from __future__ import absolute_import
assert_almost_equal(s[:k], sap, decimal=3)
def custom_score(y_true, y_pred): return (((y_true == y_pred).sum() - (y_true != y_pred).sum()) / y_true.shape[0])
new_flags.sort(cmp=lambda x, y: cmp(x.lstrip('-'), y.lstrip('-')))
bnorm = beta1 n_params = len(bs)
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
return self.q(css=self._bounded_selector(child_class.BODY_SELECTOR)).map( lambda el: child_class(self.browser, el.get_attribute('data-locator'))).results
log = logging.getLogger(__name__)
X = generator.randn(n_samples, n_features)
from salt.exceptions import SaltInvocationError
input_dict = {'1_2_1': '42', '1_2_2': '42'} correct_map = problem.grade_answers(input_dict)
if self._is_anonymous(obj) or obj["user_id"] is None: return None else: user_id = int(obj["user_id"]) return self._get_user_label(user_id)
super(LibraryNavigationTest, self).setUp() self.lib_page = LibraryEditPage(self.browser, self.library_key) self.lib_page.visit() self.lib_page.wait_until_ready()
__opts__['test'] = orig_test return ret
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
verification_status, verification_msg = SoftwareSecurePhotoVerification.user_status(user)
test_course = self.store.get_course(test_course.id.version_agnostic()) self.assertIn(test_chapter.location, test_course.children)
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
prev = _OVERRIDES_DISABLED.disabled _OVERRIDES_DISABLED.disabled += (True,) yield _OVERRIDES_DISABLED.disabled = prev
FEATURES['ENABLE_CSMH_EXTENDED'] = True INSTALLED_APPS += ('coursewarehistoryextended',)
import salt.utils
if not (has_forum_admin or has_instructor_access): return HttpResponseBadRequest( "Operation requires staff & forum admin or instructor access" )
for item in ret: self.assertSaltTrueReturn(item)
log = logging.getLogger(__name__)
if existing_id: dest_id = existing_id
CourseEnrollmentFactory(user=self.moderator, course_id=self.course.id) self.moderator.roles.add(Role.objects.get(name="Moderator", course_id=self.course.id))
self.assertEqual(XBlockDisableConfig.disabled_create_block_types(), ['poll', 'survey'])
return cls.objects.get(default=True).icon
request = self.create_request( data=self.create_segmentio_event_json(**kwargs), content_type='application/json' ) segmentio.track_segmentio_event(request)
return False
obj_sys = win32com.client.Dispatch('Microsoft.Update.SystemInfo')
func_globals.update(overrides)
import salt.returners import salt.utils.pushover from salt.exceptions import SaltInvocationError
u, d, _ = linalg.svd(X, full_matrices=False)
MUTABLE = False
K1 = pairwise_kernels(X, Y=X, metric=metric, **kwds) K2 = rbf_kernel(X, Y=X, **kwds) assert_array_almost_equal(K1, K2)
feature_names=feature_names[:-1], DESCR=descr_text)
auto_auth = AutoAuthPage(self.browser).visit() user_info = auto_auth.user_info LogoutPage(self.browser).visit() return user_info
__virtualname__ = 'ethtool'
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from esky import bdist_esky import bbfreeze HAS_ESKY = True
if not version: version_num = _get_latest_pkg_version(pkginfo) else: version_num = version
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
import salt.utils import salt.utils.cloud import salt.config as config from salt.exceptions import SaltCloudNotFound, SaltCloudSystemExit
return list(os.walk('/sys/fs/bcache/'))[0][1][0]
course_listings = self.dashboard_page.get_course_listings() self.assertEqual(len(course_listings), 1)
import salt.utils import salt.utils.cloud import salt.utils.xmlutil import salt.utils.vmware from salt.exceptions import SaltCloudSystemExit
'WHAT_IS_VERIFIED_CERT': 'verified-certificate',
try: os.symlink(svc_realpath, _service_path(name))
processed = request.build_absolute_uri(prefix + rest) return quote + processed + quote
subtask_status.increment(state=SUCCESS) return subtask_status, None
import salt.minion import salt.fileclient import salt.utils import salt.utils.url import salt.crypt import salt.transport from salt.exceptions import CommandExecutionError
log = logging.getLogger(__name__)
cache.clear()
_repack_pkgs = _namespaced_function(_repack_pkgs, globals())
ForestEstimator = FOREST_ESTIMATORS[name] est = ForestEstimator(max_depth=1, max_leaf_nodes=4, n_estimators=1, random_state=0).fit(X, y) assert_greater(est.estimators_[0].tree_.max_depth, 1)
try: from libcloud.compute.drivers.cloudstack import CloudStackNetwork import libcloud.security libcloud.security.CA_CERTS_PATH.append('/etc/ssl/certs/YaST-CA.pem') HAS_LIBS = True except ImportError: HAS_LIBS = False
log.info("Send-email task %s for email %s: succeeded", current_task_id, email_id) update_subtask_status(entry_id, current_task_id, new_subtask_status)
logger.info(self.__str__())
import salt.utils.http
role = __salt__['keystone.role_get'](name=name, profile=profile, **connection_args)
for field in self.CONTENT_FIELDS + self.SETTINGS_FIELDS + self.CHILDREN_FIELDS: self.assertTrue(new_version.fields[field].is_set_on(new_version))
clf.sparsify() assert_array_equal(pred, clf.predict(iris.data)) sp_clf.sparsify() assert_array_equal(pred, sp_clf.predict(iris.data))
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.course_outline_page.visit() self.assertEquals(self.course_outline_page.expand_collapse_link_state, ExpandCollapseLinkState.COLLAPSE) self.verify_all_sections(collapsed=False)
target = [-1] * len(JUNK_FOOD_DOCS) + [1] * len(NOTJUNK_FOOD_DOCS)
y_predicted = clf.predict(docs_test)
assert_raises(ValueError, check_symmetric, arr_bad)
machines = self.run_cloud('-p {0} {1} --log-level=debug'.format(PROFILE_NAME, INSTANCE_NAME)) self.assertIn(INSTANCE_NAME, machines.keys())
module.lcp.get_score = lambda: {'score': 0, 'total': 0}
import integration import salt.utils
mb_k_means = MiniBatchKMeans(n_clusters=3, init=test_init, random_state=42).fit(X_csr) _check_fitted_model(mb_k_means)
self.assertTrue(hasattr(course_overview_after, 'image_set')) image_set = course_overview_after.image_set self.assertEqual(image_set.small_url, broken_small_url) self.assertEqual(image_set.large_url, broken_large_url)
yaml_src_path = os.path.join(os.path.dirname(__file__), 'test_vae_cost_vae_criterion.yaml') train_object = yaml_parse.load_path(yaml_src_path) train_object.main_loop()
from salttesting.helpers import ensure_in_syspath
from __future__ import absolute_import
from salt.states import quota
sanitized_html_id = re.sub(r'[:-]', '_', html_id) return sanitized_html_id
template_context['js_init_parameters'] = json.dumps(frag.json_init_args).replace("/", r"\/")
for sys in systems: sh(django_cmd(sys, settings, "collectstatic --noinput > /dev/null")) print("\t\tFinished collecting {} assets.".format(sys))
try: obj_sm.AddService2('7971f918-a847-4430-9279-4a52d1efe18d', 7, '') ret['msupdate'] = msupdate except Exception as error:
if 'SYN' in flags and len(flags) == 1: return 10 elif 'FIN' in flags: return 12
self.wait_for_element_presence(self.upload_image_popup_window_selector, 'upload dialog is present')
if values is not None: course_ids = list(set(course_ids) & set(values))
for key in list(__context__): try: if key.startswith('validation.docker.'): __context__.pop(key) except AttributeError: pass
import salt.utils
return ikepolicy
click_css(self, 'a.action-cancel', require_notification=False)
language = UserPreference.get_value(data['user'], LANGUAGE_KEY)
overflow_grader = graders.AssignmentFormatGrader("Lab", 3, 2) lab_grader = graders.AssignmentFormatGrader("Lab", 7, 3)
milestones_api.add_course_milestone(prerequisite_course_key, 'fulfills', milestone)
if start_date is None: start_date = datetime.datetime(1970, 1, 1)
sls[ps_opts['d-i']['kbd-chooser']['method']['argument']] = { 'keyboard': ['system'] }
for name in names: latest_installed = '0' latest_available = '0'
if len(self.classes_) == 2: return dec_func[:, 1] - dec_func[:, 0] return dec_func
if prerequisite_course_keys: for prerequisite_course_key_string in prerequisite_course_keys: prerequisite_course_key = CourseKey.from_string(prerequisite_course_key_string) add_prerequisite_course(course_key, prerequisite_course_key)
msg = "Wait for status to be {}".format(message) self.wait_for_element_visibility(status_selector, msg)
greek.append('infty')
overview = CourseOverview.get_from_id(self.course_default.id) with self.assertRaises(ValueError): access.has_access(self.user, '_non_existent_action', overview)
resp = self.client.get(self.url + '?_accept=application/x-tgz') self._verify_export_succeeded(resp)
self.assertIn( "No user with the provided email address exists.", self.login_page.wait_for_errors() )
self.assertLessEqual( datetime.datetime.now(UTC()), child.start )
from unit.modules.boto_apigateway_test import BotoApiGatewayTestCaseMixin
with self.bulk_operations(source_course): source_structure = self._lookup_course(source_course).structure
raise NotImplementedError()
task_input = {'statuses_to_regenerate': [CertificateStatuses.downloadable, CertificateStatuses.error]}
if mod_opts.get('websockets', False): from . import saltnado_websockets
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
n_samples = X_diabetes.shape[0]
all = 'rev-opt-all'
next_offset = offset + MAX_STUDENTS_PER_PAGE_GRADE_BOOK previous_offset = offset - MAX_STUDENTS_PER_PAGE_GRADE_BOOK
pass
import salt.ext.six as six
origin = bool(re.search('/', name))
return contentstore().find(Transcript.asset_location(location, filename))
clf = svm.OneClassSVM(nu=0.1, kernel="rbf", gamma=0.1) clf.fit(X_train)
continue
export_course_to_xml( self.store, self.contentstore, self.course.id, self.root_export_dir, self.export_dir, )
instructor = AdminFactory.create() self.client.login(username=instructor.username, password="test")
return self._batch_size(is_numeric=False, batch=batch)
first_addend = random.randint(-100, 100) second_addend = 10 - first_addend
super(CourseGraderUpdatesTest, self).setUp() self.url = get_url(self.course.id, 'grading_handler') self.starting_graders = CourseGradingModel(self.course).graders
try: self.assertNotIn(CERT_ALIAS, str(certs_list)) except CommandExecutionError: self.run_function('keychain.uninstall', [CERT_ALIAS])
import salt.config import salt.loader from salt.modules import boto_iot
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.profile.year_of_birth = year_of_birth self.profile.save()
import integration
return self.page.q(css=self.MODAL_SELECTOR).present
registration_code = CourseRegistrationCode.objects.all()[0].code redeem_url = reverse('register_code_redemption', args=[registration_code]) self.login_user()
U, S, V = randomized_svd(X, n_components, random_state=random_state) W, H = np.zeros(U.shape), np.zeros(V.shape)
matcher = Matcher.return_value matcher.confirm_top.return_value = True
import os import sys
id_token = get_id_token(student, api_config.OAUTH2_CLIENT_NAME) return EdxRestApiClient(api_config.internal_api_url, jwt=id_token)
n_samples = len(digits.images) X = digits.images.reshape((n_samples, -1)) y = digits.target
if [ -z '$debian_chroot' ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit()
if 'load' in msg: role = self.road_stack.value.nameRemotes[sender].role
properties = properties.split(',')
import salt.utils
__virtualname__ = 'bigip'
from salt.modules import npm from salt.exceptions import CommandExecutionError import json
ax1.axvline(x=silhouette_avg, color="red", linestyle="--")
url_to_enroll = reverse(course_about, args=[course_id]) if settings.FEATURES.get('ENABLE_MKTG_SITE'): url_to_enroll = marketing_link('COURSES')
import salt.utils
AFFILIATE_COOKIE_NAME = 'affiliate_id'
self._navigate_to_courseware_video() self.video.wait_for_video_player_render()
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, Mock, patch, NO_MOCK, NO_MOCK_REASON )
from salt.ext.six import string_types
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
affinity[0, n_sample + 1] = 1 affinity[n_sample + 1, 0] = 1 affinity.flat[::2 * n_sample + 1] = 0 affinity = 0.5 * (affinity + affinity.T)
pod_spec = vim.storageDrs.PodSelectionSpec(storagePod=datastore_cluster_ref)
ret = self.run_run_plus(fun='fileserver.file_list', args=['backend="[roots]"']) self.assertIsInstance(ret['fun'], list)
if pkg_ver: if installed_pkgs[pkg_name].get('version') != pkg_ver: pkgs_to_install.append(pkg) else: pkgs_satisfied.append(installed_name_ver)
for partition_id, group_id in user_partition_groups.iteritems(): user_partition_groups[partition_id] = self.groups[group_id - 1]
fields['advertised_start'] = None
raise CommandExecutionError( 'none of the specified sources were found' )
pref = UserPreference.get_value(user, 'testkey_none') self.assertIsNone(pref)
post_params = sign(self.CLIENT_POST_PARAMS)
assert_array_equal(clf.feature_log_prob_, (num - denom))
for this_X in (X, X_csr): mb_k_means = MiniBatchKMeans(n_clusters=n_clusters, batch_size=100, random_state=42) mb_k_means.fit(this_X)
def convert_to_draft(self, location, user_id): raise NotImplementedError()
self.assertTrue(self.user.roles.filter(name="Student", course_id=self.course_key))
continue
if attempt.status == 'denied': status = 'must_reverify'
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
json_return = json.dumps(ret['return']) del ret['return'] json_full_ret = json.dumps(ret)
credit_course = self.add_credit_course() credit_course.enabled = False credit_course.save()
try: export_dir = mkdtemp() yield export_dir finally: rmtree(export_dir, ignore_errors=True)
ws.send('websocket client ready')
self.cart = Order.get_cart_for_user(self.user) CertificateItem.add_to_order(self.cart, self.verified_course_key, self.cost, 'verified') self.cart.start_purchase()
CourseEnrollmentFactory( user=self.user_2, course_id=self.course.id, is_active=True, mode='audit' ) CertificateWhitelistFactory(course_id=self.course.id, user=self.user_2)
self._test_dropdown_field( u'country', u'Country or Region', u'', [u'Pakistan', u'Palau'], )
from __future__ import absolute_import import os import tempfile import sys import errno import time import random import shutil import salt.ext.six as six
m.opts['grains'] = grains
from __future__ import absolute_import
certificate = res_json['certificates'][1] self.assertEqual(certificate.get('total_issued_certificate'), 3) self.assertEqual(certificate.get('mode'), 'verified')
courses, in_process_course_actions = _accessible_courses_summary_list(request)
self.course_outline_page.visit() self.assertFalse(self.course_outline_page.deprecated_warning_visible)
from edx_proctoring.api import get_all_exams_for_course
log = logging.getLogger(__name__)
__func_alias__ = { 'set_': 'set' }
assert_greater(gpc.log_marginal_likelihood(gpc.kernel_.theta), gpc.log_marginal_likelihood(kernel.theta))
self.backend = backend self.server = server self.weight = weight return 'server weight'
if len(violation_list_for_line) == 4: num_violations_report += 1
'STORE_BILLING_INFO': False,
versions = get_course_versions(unicode(self.course.id)) draft_version = versions['draft-branch'] published_version = versions['published-branch']
self.assertTrue(self.video.is_button_shown('transcript_button')) self._verify_caption_text('Welcome to edX.')
from django.test import TestCase from nose.plugins.attrib import attr
self.assertEqual(_get_release_date(response), 'Unscheduled') _assert_settings_link_present(response)
with self.assertNumQueries(12): api.set_credit_requirement_status( user.username, self.course_key, requirements[0]["namespace"], requirements[0]["name"] )
return value.isoformat()
for n_neighbors in [3, 5, 7]: I_computed = _compute_mi(x, y, True, False, n_neighbors) assert_almost_equal(I_computed, I_theory, 1)
if should_grade_section: scores = []
trigger = task_definition.Triggers.Create(trigger_types[trigger_type])
if request.method != 'POST': return HttpResponseNotAllowed('POST') request.backend.start() return complete(request, backend, *args, **kwargs)
x_plot = np.linspace(0, 10, 100)
np.random.seed(0)
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, show_reset_button=False, done=True) self.assertTrue(module.should_show_reset_button())
self.assertLess(old_edited_on, updated_component.edited_on) self.assertEqual(updated_component.edited_by, edit_user)
return [item + '\n' for item in ifcfg.split('\n')]
mnt_image = salt.utils.alias_function(mount_image, 'mnt_image')
rho, _ = spearmanr(x, y) increasing_bool = rho >= 0
convergence_context = {}
if ssh_interface == 'private_ips': vm_['ssh_host'] = data['private_ips'][0] else: vm_['ssh_host'] = data['public_ips'][0]
if self.instance: raise ValidationError("This field is not allowed in an update.") return value
pca = PCA(n_components=n_digits).fit(data) bench_k_means(KMeans(init=pca.components_, n_clusters=n_digits, n_init=1), name="PCA-based", data=data) print(79 * '_')
from salt.utils import dictupdate
course = Course( validated_data["id"], self._new_course_mode_models(validated_data["modes"]), verification_deadline=validated_data["verification_deadline"] ) course.save() return course
g_endpoint_url = re.sub('/v2', '', g_endpoint_url['internalurl'])
import salt.log import salt.utils import salt.utils.network
url = settings.STATIC_URL + settings.DEFAULT_COURSE_ABOUT_IMAGE_URL
super(AdvancedProblemComponentTest, self).setUp(is_staff=is_staff)
from __future__ import absolute_import import logging import salt.ext.six as six
self.courseware_page.click_previous_button_on_bottom() self.assert_navigation_state('Test Section 1', 'Test Subsection 1,1', 3, next_enabled=True, prev_enabled=True)
self._optimizer.iteration_ends(self.t_)
if context is not None: return nested(self._capture_assertion_errors(), context)
record = 0 clean = intersect while len(clean) > 0: bad_channel = [] for channel in clean: channel_0 = channels_0[channel] channel_1 = channels_1[channel]
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
lp_model = label_propagation.LabelSpreading(gamma=0.25, max_iter=5) lp_model.fit(X, y_train) predicted_labels = lp_model.transduction_[unlabeled_set] true_labels = y[unlabeled_set]
X, y = make_hastie_10_2(n_samples=20, random_state=1) clf = BaggingClassifier(n_estimators=5, warm_start=True, oob_score=True) assert_raises(ValueError, clf.fit, X, y)
if 'run_on_start' in data: if data['run_on_start']: run = True else: self.intervals[job] = int(time.time()) else: run = True
return dict( self.items() )
return self.get_text('.certificate-id .certificate-value')
lti_user = create_lti_user(lti_user_id, lti_consumer)
publish_event( "removed", result=format_block_keys(block_keys['selected']), removed=format_block_keys(block_keys['invalid']), reason="invalid" )
request = args[0] request.META['CROSS_DOMAIN_CSRF_COOKIE_USED'] = True
cert_type=server cert_filename="something_completely_different"
first_addend = random.randint(-100, 100) second_addend = 10 - first_addend
from __future__ import absolute_import
w = np.zeros(n_features + 1) loss_interp, grad_interp = _logistic_loss_and_grad( w, X, y, alpha=1. ) assert_array_almost_equal(loss, loss_interp)
if not settings.FEATURES.get('CERTIFICATES_HTML_VIEW', False): return False
import salt.utils.cloud
from salt.modules import mac_user from salt.exceptions import SaltInvocationError, CommandExecutionError
test_options.pop(0) if len(test_options) <= 1: break
self.test_send_to_all()
new_lr = self._base_lr / (self.decay_factor ** self._count) if new_lr <= self.min_lr: self._min_reached = True new_lr = self.min_lr
salt '*' vsphere.enable_firewall_ruleset my.esxi.host root bad-password True 'syslog'
with remove_ccx(xblock) as (xblock, restore): return restore(self._modulestore.has_changes(xblock))
self.assertEqual(self.team_membership11.last_activity_at, current_last_activity)
mod = inspect.getmodule(register_check) for (name, function) in inspect.getmembers(mod, inspect.isfunction): register_check(function)
registration_code_redemption = RegistrationCodeRedemption.registration_code_used_for_enrollment( course_enrollment) paid_course_reg_item = PaidCourseRegistration.get_course_item_for_user_enrollment( user=user, course_id=course_id, course_enrollment=course_enrollment )
GIT_REPO_EXPORT_DIR = ENV_TOKENS.get('GIT_REPO_EXPORT_DIR', '/edx/var/edxapp/export_course_repos')
from openedx.core.djangoapps.credit.api.eligibility import ( is_credit_course, remove_credit_requirement_status as api_remove_credit_requirement_status )
report_name = u"ORA_data" self.data_download_section.generate_ora2_response_report_button.click() self.data_download_section.wait_for_available_report() self.verify_report_download(report_name)
reverse_octets = str(self).split('.')[::-1] return '.'.join(reverse_octets) + '.in-addr.arpa'
ret['changes'] = {'new': '', 'old': name}
if len(rtnv) == 0: rtnv.append([])
choice_element.append(inp)
#'pointsize': '10pt',
__virtualname__ = 'augeas'
spmatshp = (outsize*N.prod(kshp)*inshp[0],insize) if ws else\ (nkern*outsize,insize) spmat = scipy_sparse.lil_matrix(spmatshp)
module = CapaFactory.create(attempts=1)
cmd, arg = command.split(' ', 1)
from __future__ import absolute_import from distutils.version import LooseVersion import glob import grp import os import pwd import sys import shutil import stat import tempfile import textwrap import filecmp import textwrap
url(r'^{}/problem_grade_distribution/(?P<section>\d+)$'.format(settings.COURSE_ID_PATTERN), 'class_dashboard.views.section_problem_grade_distrib', name="section_problem_grade_distrib"),
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'digital_ocean', vm_['profile'], vm_=vm_) is False: return False
sys.path.append(project_path)
self.assertTrue(pkg_targets) version = self.run_function('pkg.version', pkg_targets)
for dir_name in dir_names: pillar_node[dir_name] = {}
pass
D = generator.randn(n_features, n_components) D /= np.sqrt(np.sum((D ** 2), axis=0))
'template',
self.assertEqual(self.import_page.header_text, 'Course Import')
self.assertEqual(block.edited_by, "testassist@edx.org") self.assertDictEqual( block.grade_cutoffs, {"Pass": 0.45}, )
raise NotImplementedError()
import integration
return predictions[np.arange(X.shape[0]), median_estimators]
log.debug("No refund opened for user [%s], course [%s]", unenrolled_user.id, course_key_str)
if 'defaults' in opts and __grains__['os'] in ['MacOS', 'Darwin']: opts = None
if not os.path.exists(remote_name): log.error("Error : Specified file %s does not exist" % remote_name) return filename
response = self.client.get(self.url) if is_visible: self.assertContains(response, "Student-Generated Certificates") else: self.assertNotContains(response, "Student-Generated Certificates")
root_block = block_structure.get_xblock(block_structure.root_block_usage_key) user_partitions = getattr(root_block, 'user_partitions', []) or [] block_structure.set_transformer_data(cls, 'user_partitions', user_partitions)
try: import pythoncom import wmi import win32net import win32api import win32con import pywintypes from ctypes import windll HAS_WIN32NET_MODS = True except ImportError: HAS_WIN32NET_MODS = False
return from_addr_format.format( course_title=course_title_no_quotes, course_name=course_name, from_email=theming_helpers.get_value( 'bulk_email_default_from_email', settings.BULK_EMAIL_DEFAULT_FROM_EMAIL ) )
metadata_to_inherit = self.cached_metadata.get(unicode(non_draft_loc), {}) inherit_metadata(module, metadata_to_inherit)
self._send_immediate_response(True)
pd_result = Parallel(n_jobs=n_jobs, verbose=verbose)( delayed(partial_dependence)(gbrt, fxs, X=X, grid_resolution=grid_resolution, percentiles=percentiles) for fxs in features)
hg.__salt__ = {}
comment, passed, retries = _download(quidditch, retries) if not passed: return (comment, str(passed))
A_xT = self.rmul(self.transpose_right(x, True)) rval = self.transpose_left(A_xT, True) return rval
if not is_request_in_microsite(): return relative_path return TEMPLATES_BACKEND.get_template_path(relative_path, **kwargs)
rows, cols, channels = self.shape self.topo_space = Conv2DSpace(shape=(rows, cols), num_channels=channels, axes=self.axes)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
import salt.utils
if config[service] is None: defaults = { 'oncleanshutdown': False, 'emitatstartup': True, 'onchangeonly': False } config[service] = defaults
clf = MockClassifier() grid_search = GridSearchCV(clf, {'foo_param': [1, 2, 3]}, refit=True) grid_search.fit(X, y)
product = partial(reduce, operator.mul) return sum(product(len(v) for v in p.values()) if p else 1 for p in self.param_grid)
self._assert_can_reverify()
handle_svc = win32service.CreateService(handle_scm, name, display_name, win32service.SERVICE_ALL_ACCESS, service_type, start_type, error_control, bin_path, load_order_group, 0, dependencies, account_name, account_password)
del dirs[:]
from __future__ import absolute_import, print_function import json import logging import time
class Meta(ConfigurationModel.Meta): app_label = "shoppingcart"
self.store.publish(item_location, self.user_id) item = self.store.get_item(item_location) self.assertTrue(self.store.has_published_version(item))
return fragment
api_key: <supersecretapi_key> driver: vultr
counts[center_idx] += count
__virtualname__ = 'cassandra'
response = self.client.get(reverse("dashboard")) self.assertHttpOK(response)
return urlparse(self.runtime.handler_url(self.block, 'handler', query=query_string)).query
return LibraryLocator(org=org, library=library)
if isinstance(address, int): self._check_int_address(address) self._ip = address return
credit_course = self.add_credit_course() CreditEligibility.objects.create( course=credit_course, username="staff", deadline=datetime.datetime.now(pytz.UTC) - datetime.timedelta(days=1) )
self.assertEqual(len(self.library.children), 2)
raise
from __future__ import absolute_import from datetime import datetime
with patch.object(XQueueCertInterface, 'add_example_cert') as mock_queue: yield mock_queue
'recon_max': float,
content = html_parsed[0].tail
milestones_helpers.remove_course_content_user_milestones( course_key=usage_key.course_key, content_key=usage_key, user=student, relationship='fulfills' )
self.assertTrue(self.certificates_section.pending_tasks_section.visible)
clf = ExtraTreesClassifier(n_estimators=500, max_features=1, criterion="entropy", random_state=0).fit(X, y)
if ip.startswith('fe80:'): return False return True
assert_array_almost_equal(x_rotations_sign_flip, x_weights_sign_flip) assert_array_almost_equal(np.abs(x_rotations_sign_flip), 1, 4) assert_array_almost_equal(np.abs(x_weights_sign_flip), 1, 4)
import salt.utils import salt.utils.itertools import salt.utils.decorators as decorators import salt.utils.pkg.rpm from salt.exceptions import ( CommandExecutionError, MinionError, SaltInvocationError )
private_vertical = get_and_verify_publish_state('vertical', self.PRIVATE_VERTICAL, False)
log.warning(u"Unknown unit in Range header: %s for content: %s", header_value, unicode(loc))
has_partial_range = tree.xpath('responseparam[@partial_range]') if has_partial_range: partial_range = float(has_partial_range[0].get('partial_range', default='2')) else: partial_range = 2
if not key: query_params['recurse'] = 'True' function = 'kv/' else: function = 'kv/{0}'.format(key)
import salt.ext.six as six from salt.ext.six.moves import range, zip from salt.ext.six.moves.urllib.parse import urlparse as _urlparse
if false_unsets is not True: ret['changes'].update({key: ''})
spot_prefix = 'LaunchSpecification.'
import salt.utils
__func_alias__ = { 'list_': 'list' }
if settings != DEFAULT_SETTINGS: collect_assets(['lms'], asset_settings_lms) collect_assets(['studio'], asset_settings_cms)
if 'host' not in payload: payload.update({"host": self.host})
self._load_definition() if key.block_scope_id.block_type not in self.aside_fields: raise KeyError()
image_path = "{0}/ext2_saved".format(mountpoint) orig_fstype = ret['before']['type']
X, y, X_offset, y_offset, X_scale = _preprocess_data( X, y, fit_intercept=fit_intercept, normalize=normalize, copy=copy)
return False
ordered_key_fields = ['category', 'name', 'course', 'tag', 'org', 'revision']
Y = np.zeros((y.shape[0], self.K), dtype=np.float64) for k in range(self.K): Y[:, k] = y == k
mock_course_module = MagicMock() mock_course_module.position = 3 mock_course_module.get_display_items.return_value = [] self.assertIsNone(helpers.get_course_position(mock_course_module))
self.assertEqual(len(mail.outbox), 1) self.assertEqual( mail.outbox[0].subject, 'You are eligible for credit from Hogwarts School of Witchcraft and Wizardry' )
certs = _list_certs()
self.assertFalse(xb_user.opt_attrs[ATTR_KEY_IS_AUTHENTICATED]) self.assertIsNone(xb_user.full_name) self.assertListEqual(xb_user.emails, [])
self.course_outline.change_problem_release_date()
assert handlers == logger.handlers assert level == logger.getEffectiveLevel()
frag = Fragment(u"Hello there!") return frag
)
exc_info_on_loglevel=logging.DEBUG
if not settings.FEATURES.get('ENABLE_EDXNOTES'): filtered_list.append('edxnotes')
return event['event_type'] == self.CHANGE_INITIATED_EVENT_NAME
checkpoint = verification_statuses.get(checkpoint) has_completed_check = bool(checkpoint)
if not path: raise ValueError('no path specified')
return block_structure.get_transformer_block_field( block_key, cls, cls.BLOCK_DEPTH, )
post_params = sign(self.CLIENT_POST_PARAMS)
if enabled is not None: task_definition.Settings.Enabled = enabled if hidden is not None: task_definition.Settings.Hidden = hidden
__virtualname__ = 'pkgutil'
shutil.rmtree(t_path)
__allow_additional_items__ = True
target_user = self.get_user(email) target_user.click_delete() self.wait_for_page()
response = redirect(reverse('cas-login'))
import salt.utils
mock_email_change.side_effect = [ValueError, "mock value error thrown"] self.client.login(username=self.user.username, password=self.test_password) old_email = self.user.email
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../') import integration
self._subtree_edited_on = kwargs.get('_subtree_edited_on', None) self._subtree_edited_by = kwargs.get('_subtree_edited_by', None)
self.setup_extensions()
return SON([ (key, id_dict[key]) for key in ('tag', 'org', 'course', 'category', 'name', 'revision') ])
for i, hyperparameter in enumerate(kernel.hyperparameters): assert_equal(theta[i], np.log(getattr(kernel, hyperparameter.name)))
return BASE_URL + "/" + self.url_path + "/user/" + self.user_id + "/course/" + self.course_id
return 0
course_enrollments = list(get_course_enrollments(user, course_org_filter, org_filter_out_set))
from salt.modules import linux_lvm from salt.exceptions import CommandExecutionError
key = 'a' * length
if self.weight == 0: return None
return UserPartition( partition_id, name, description, groups, MockUserPartitionScheme(scheme) ).to_json()
import salt.modules.rvm as rvm
try: return cls.objects.get(user=user).status except cls.DoesNotExist: return None
dists = pairwise_distances(query, X, metric='cosine').ravel()
self.assert_field_type(load_video_event, 'time', datetime.datetime) del load_video_event['time']
params["email"] = "not_an_email_address" assert_email_error("A properly formatted e-mail is required")
students = 'all_whitelisted'
self.disable_cohorting(self.course_fixture) self.refresh_thread_page(self.thread_id) self.assertEquals(self.thread_page.get_group_visibility_label(), "This post is visible to everyone.")
if generate_translation: old_langs = set(old_metadata.get('transcripts', {})) if old_metadata else set() new_langs = set(item.transcripts)
root = etree.Element("problem")
self._add_simple_content_block() with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
from __future__ import absolute_import import copy
if refresh: refresh_db()
tflat = _flatten(t.asList()) rep << And( [ Literal(tt) for tt in tflat ] )
return self.is_acquired
assert_raises(ValueError, cross_val_score, svm, linear_kernel.tolist(), y)
'ssh_list_nodegroups': dict,
sample_dict = {'x': (-10, 10), 'y': (-10, 10)}
cmd = 'Uninstall-Module "{0}"'.format(name) no_ret = _pshell(cmd) return name not in list_modules()
response = views.container_handler( request=request, usage_key_string=unicode(self.vertical.location) ) self.assertEqual(response.status_code, 200)
yield (start, "E128 continuation line " "under-indented for visual indent")
user = User.objects.get(pk=user.pk)
top_level_logger.propagate = True
_x = lambda s: s if return_password else ''
assert_raises(ValueError, sel.transform, np.array([[1], [2]]))
MAX_ASSET_UPLOAD_FILE_SIZE_URL = ""
inline_topics = self.q(css=self._bounded_selector('.check-discussion-subcategory-inline')) return all(topic.get_attribute('disabled') == 'true' for topic in inline_topics)
_config_filename_ = 'master' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'master') _setup_mp_logging_listener_ = True
sindex = get_data(searchindex_url) filenames, objects = parse_sphinx_searchindex(sindex)
XA_checked, XB_checked = check_pairwise_arrays(XA, XB.astype(np.float)) assert_equal(XA_checked.dtype, np.float) assert_equal(XB_checked.dtype, np.float)
import salt.states.gem as gem gem.__salt__ = {} gem.__opts__ = {'test': False}
required_boto3_version = '1.2.1'
if values: engine = values['ENGINE'] options = values.get('OPTIONS', {}) backends[name] = _instantiate_backend_from_name(engine, options)
import salt.utils
time.sleep(2)
proba[proba < np.finfo(proba.dtype).eps] = np.finfo(proba.dtype).eps log_proba = np.log(proba)
file_name = '{artifact_id}-{version}{classifier}.{packaging}'.format( artifact_id=artifact_id, version=version, packaging=packaging, classifier=__get_classifier_url(classifier))
log = salt.log.setup.logging.getLogger(__name__)
bool_dict = [True, "True", "true", "T", "t", "1"] return value in bool_dict
hw_section = next(section for section in sections_list if section.get('url_name') == hw_url_name) return [s.earned for s in hw_section['scores']]
self.assert_redirect_to_provider_looks_correct(self.client.get( pipeline.get_login_url(self.provider.provider_id, pipeline.AUTH_ENTRY_LOGIN)))
import integration import salt.utils from salt.exceptions import CommandExecutionError
self.B = sharedX(numpy.zeros(self.nvis) + B0, name='B', borrow=True)
expiration_datetime_custom.short_description = "Upgrade Deadline"
new_group = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, user_partition) self.assertIn(new_group.id, [3, 4])
return self.q(css='a.problem-button').text
Created Private Key: "/etc/pki/my_little/certs//DBReplica_No.1.key." Created CSR for "DBReplica_No.1": "/etc/pki/my_little/certs/DBReplica_No.1.csr."
self.courses.append([CourseFactory().location.course_key for _i in range(3)])
if date.isdigit(): date = int(date) else: date = float(date)
self.assertTrue(fstats_post.st_mtime, fstats_orig.st_mtime-age)
self._fit(X, compute_sources=False) return self
import salt.minion
prefix = unichr(unicode_char)
assert_array_equal(clf.predict([[0.2, -1.0]]), np.array([-1]))
return self.lines[0]
cmdline = salt.utils.shlex_split(_text[len(trigger):]) cmd = cmdline[0] args = [] kwargs = {}
self.notes_page.search("note") self.assertFalse(self.notes_page.is_error_visible) self.assertIn(u"Search Results", self.notes_page.tabs)
'log_fmt_logfile': (tuple, str),
cached_calls = [ [num_uncached_mongo_calls, num_uncached_sql_queries], [num_cached_mongo_calls, num_cached_sql_queries], ] for expected_mongo_calls, expected_sql_queries in cached_calls: with self.assertNumQueries(expected_sql_queries): with check_mongo_calls(expected_mongo_calls): call_single_thread()
filtered_answers = {} for answer_key in answers.keys(): if answer_key in allowed_field_names: filtered_answers[answer_key] = escape(answers[answer_key])
elem = self.get_setting_element(label) select = Select(elem) select.select_by_value(value)
try: import boto import boto.exception from boto.exception import BotoServerError
p = T.switch(p > 0., p, self.left_slope * p) return p
instructor_task.api.submit_bulk_course_email(request, course_id, email.id)
obj = (klass, ('HASHED', obj.dtype, obj.shape, obj.strides))
self.modulestore.cache_items(self, [block_key], course_key, lazy=self.lazy) json_data = self.module_data.get(block_key) if json_data is None: raise ItemNotFoundError(block_key)
_ = lambda text: text
redirect_url = get_redirect_url(params["course_key"], params["checkpoint"]) return JsonResponse({"url": redirect_url})
start = datetime.now(UTC) self.add_icrv_xblock(related_assessment_name="Midterm A", start_date=start)
return resolve_iterator_class(mode).uniform_batch_size
self._assert_cert_status({ 'description': 'honor', 'status': 'started' })
try: import pip HAS_PIP = True except ImportError: HAS_PIP = False
log = logging.getLogger(__name__)
self.validate_preview_html(self.video, STUDENT_VIEW, can_add=False)
if self.source in self.html5_sources:
self.certificates_section.fill_certificate_invalidation_user_name_field("") self.certificates_section.click_invalidate_certificate_button() self.certificates_section.wait_for_ajax()
from __future__ import absolute_import
return (isinstance(subspace, NullSpace) or (isinstance(subspace, CompositeSpace) and len(subspace.components) == 0))
self.add_to_cart() self.request.user = self.user context = user_has_cart_context_processor(self.request) self.assertFalse(context['should_display_shopping_cart_func']())
filtered_response = self.verify_response(params={'org': self.course.org, 'username': self.staff_user.username}) self.assertTrue(
return "{base}/register?course_id={course_id}&enrollment_action={action}".format( base=BASE_URL, course_id=self._course_id, action="enroll", )
self.q(css='.create-team .action-cancel').first.click() self.wait_for_ajax()
else: yield enrollment
self._validate_estimator()
expr = Forward()
course_modes = CourseMode.modes_for_course( obj.id, include_expired=self.include_expired, only_selectable=False ) return [ ModeSerializer(mode).data for mode in course_modes ]
import integration import salt.utils
self.repo = dulwich.repo.Repo.init(self.cachedir) new = True
with self.assertRaisesRegexp(CommandError, ".* requires one or more arguments.*"): call_command('reindex_library')
self.verify_end_date('edX/toy/TT_2012_Fall')
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] h1_state = layer_to_state[h1] h2_state = layer_to_state[h2]
LETTUCE_SERVER_PORT = 8003 XQUEUE_PORT = 8040 YOUTUBE_PORT = 8031 LTI_PORT = 8765 VIDEO_SOURCE_PORT = 8777
assert_raises(ValueError, clf.partial_fit, X2[:, :-1], y2)
with self._mock_geoip('US'): result = embargo_api.check_course_access(self.course.id, user=self.user, ip_address='0.0.0.0')
return self.feature_names_
self.setup_user() self.assertFalse(access.has_ccx_coach_role(self.user, ccx_locator))
if not user_must_complete_entrance_exam(request, user, course): required_content = [content for content in required_content if not content == course.entrance_exam_id]
oldcmap = self.correct_map
response = self.client.get(self.dashboard_url) self.assertContains(response, attempt.expiration_datetime.strftime("%m/%d/%Y"))
fields = fields.split(',')
world.clear_courses()
self.assertTrue(filecmp.cmp(path_test + '.bak', path_in))
if data.get('essential'): return super(IDTokenHandler, self).claim_instructor_courses(data) else: return None
def value_from_datadict(self, data, files, name): value = data.get(name, '') return value.lower() == 'true'
dashboard_url = reverse('dashboard') self._test_change_session_hash(dashboard_url, reverse('signin_user') + '?next=' + dashboard_url)
__virtualname__ = 'firewall'
assert X.ndim == 2 return T.nnet.softmax(X*self.P)
if self._course_id is not None: url += "?{params}".format( params=urlencode({ "course_id": self._course_id, "enrollment_action": "enroll" }) )
f_init = compile_f_init() cc = self._compiled_cache self._compiled_cache = (state, indices, f_init, cc[3]) return self._compiled_cache[2:]
ret['comment'] = 'The state of "{0}" was changed!'.format(profile)
self.require_index = None
with self.assertNumQueries(2): embargo_api.message_url_path(self.course.id, "enrollment")
calibrated_clf.fit(X_train, y_train) probs_without_sw = calibrated_clf.predict_proba(X_test)
def wrap_f_init(*args): data = f_init(*args) length = len(data) / 2 return data[:length], data[length:] return wrap_f_init
else: self._send_immediate_response(False, message="Invalid request URL")
valid_block_keys = set([(c.block_type, c.block_id) for c in children]) invalid_block_keys = (selected - valid_block_keys) if invalid_block_keys: selected -= invalid_block_keys
return [item['data']['content'] for item in response['results']]
return [[False]]
suggested_prices = models.CommaSeparatedIntegerField(max_length=255, blank=True, default='')
ssh_keys = get_public_keys(vm_)
self.assertFalse(self._search_for_content(self.EDITED_SEARCH_STRING))
self._validate_estimator()
if not ret: return None if 'ret_config' not in ret: return '' return str(ret['ret_config'])
if course_id is None: course_id = self.course.id return CourseEnrollment.enroll(self.user, course_id, mode='honor')
owner['user'] = 'SYSTEM' owner['user_domain'] = 'NT AUTHORITY'
_PKG_TARGETS_DOT = { 'RedHat': {'5': 'python-migrate0.5', '6': 'tomcat6-el-2.1-api', '7': 'tomcat-el-2.2-api'} }
if isinstance(cfg, dict): return c_cfg.get(attr_name, cfg.get(default_cfg_key)) else: return c_cfg.get(attr_name, cfg(default_cfg_key))
data = { "indexed_count": indexed_count, 'category': category, } tracker.emit( event_name, data )
if sample_weight is None: base_estimator.fit(X_subset, y_subset) else: base_estimator.fit(X_subset, y_subset, sample_weight=sample_weight[subset_idxs])
if request._finished: future = Future() future.set_exception(TimeoutException()) return future
self.assertOLXIsDraftOnly(block_list_to_unpublish) with self.assertRaises(ItemNotFoundError): self.unpublish(block_list_to_unpublish)
import logging
clf = OneVsRestClassifier(base_clf).fit(X, Y) y_pred = clf.predict([[3, 0, 0]])[0] assert_equal(y_pred, 1)
old = list_pkgs()
ret['comment'] = ( 'User {0}@{1} is not present, so it cannot be removed' ).format(name, host) return ret
'rejected_retry': bool,
global custom_data_home custom_data_home = tempfile.mkdtemp() makedirs(join(custom_data_home, 'mldata')) globs['custom_data_home'] = custom_data_home return globs
'max_minions': int,
def setUp(self): super(DatabaseMicrositeTestCase, self).setUp() self.microsite = MicrositeFactory.create() MicrositeOrganizationMappingFactory.create(microsite=self.microsite, organization='TestMicrositeX')
'AUTOPLAY_VIDEOS': False,
if not isinstance(Y, np.ndarray): raise ValueError("y_pred should be an array of floats.")
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, expensiveTest
xpath = "//div[@class='%s ']" % div_class self.assert_has_xpath(xml, xpath, self.context)
self.client.logout() response = self.client.get(self.url) self.assertEqual(response.status_code, 302)
return REQUEST_CACHE.request
dual_coef = linalg.solve(K, y, sym_pos=True, overwrite_a=False)
import salt.config import salt.loader import salt.transport.client import salt.utils import salt.utils.minions import salt.payload
super(SupportViewCertificatesTests, self).setUp() SupportStaffRole().add_users(self.user)
cls.coach = AdminFactory.create()
if mean is None: mean = X.mean(axis=0) X = X - mean
import salt.utils import integration from salt.utils.verify import ( check_user, verify_env, verify_socket, zmq_version, check_max_open_files, valid_id )
('completed', 'completed'),
return False
if service_name == 'SSH' or service_name == 'ssh': temp_service_name = 'TSM-SSH' else: temp_service_name = service_name
__func_alias__ = { 'true_': 'true', 'false_': 'false' }
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
class UserPreferenceFactory(DjangoModelFactory): class Meta(object): model = UserPreference
for update in self.search_results.Updates: if update.InstallationBehavior.CanRequestUserInput: log.debug(U'Skipped update {0} - requests user input'.format(update.title)) continue
ModeCreationPage(self.browser, self.course_id, mode_slug=u'verified', mode_display_name=u'Verified Certificate', min_price=10, suggested_prices='10,20').visit()
from __future__ import absolute_import import logging
for parameter, default in PARAMETERS.iteritems(): PARAMETERS[parameter] = request.GET.get(parameter, default)
'staff_access': True, 'ordered_grades': sorted(course.grade_cutoffs.items(), key=lambda i: i[1], reverse=True),
SplitTestTransformer.collect(block_structure)
self.assertEqual(len(snapshot['country_rules']), len(country_rules))
response = self.client.get(self.url) self.assertFalse(self.email_modal_link in response.content)
AutoAuthPage(self.browser, course_id=self.course_id).visit() self.team_page.visit() self.assertFalse(self.team_page.edit_team_button_present)
self.course_id = course_entry.course_key self.lazy = lazy self.module_data = module_data self.default_class = default_class self.local_modules = {} self._services['library_tools'] = LibraryToolsService(modulestore)
from __future__ import absolute_import import logging from copy import deepcopy
data_x = data['images'][set_indices] data_x = np.cast['float32'](data_x) data_x = data_x[ex_range] data_x = data_x.reshape(data_x.shape[0], image_size ** 2)
if not hasattr(self, 'freeze_set'): self.freeze_set = set([])
gid = group_to_gid(gid)
estimator.fit(X, y)
rng = np.random.RandomState(1999) n, p = 50, 3
state_value = getattr(_virtualboxManager.constants, "SessionState_" + expected_state) return xp_session.state == state_value
os.chmod(keyfile, stat.S_IRUSR | stat.S_IWUSR)
cmd = '/bin/pkg uninstall -v {0}'.format(pkg2rm) out = __salt__['cmd.run_all'](cmd, output_loglevel='trace')
import salt.ext.six as six
backend = self.select_backend(request) view = self.get_view_for_backend(backend) return view(request, *args, **kwargs)
if len(combined) > 250: combined = fasthash(combined)
output = self.run_cloud('-d {0} --assume-yes --log-level=debug'.format(machine_name)) return output.get(CONFIG_NAME, {}).get(PROVIDER_NAME, {})
act_grad = self._activation_grad(inputs) jacobian = self.weights * act_grad.dimshuffle(0, 'x', 1) return jacobian
matching = [] for disk in disks: for suitable_disk in suitable_disks: if disk.canonicalName == suitable_disk.disk.canonicalName: matching.append(disk)
import json import logging import random import string
self._goto_problem_page()
return self.q(css='.page-header .breadcrumbs')[0].text
assert_greater(ridge_outlier_score, huber_outlier_score)
n_labels = 15 n_samples = 1000 n_folds = 5
result = self.service.delete_student_attempt( 'bad_student', unicode(self.course.id), 'foo/bar/baz', requesting_user=self.student, ) self.assertIsNone(result)
container.delete(0) self.verify_groups(container, ['alpha'], [], verify_missing_groups_not_present=False)
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
'ADDITIONAL_OPTIONS': { 'trashcan': { 'bucket': 'trash_fs' } }
self._create_courses_and_enrollments( (self.TEST_ORG, True), (self.TEST_ORG, True), (self.TEST_ORG, True), ("org_alias", True) )
return self._get_element_text(".load-response-button")
cursor.execute(query, [module_id.to_deprecated_string()])
layout = device.get_result()
continue
self._create_courses_and_enrollments( ("MyOrg", True), ("myorg", True) )
_config_filename_ = 'master'
import os.path import msgpack
with np.errstate(under='ignore'): rbm1.score_samples([np.arange(1000) * 100])
self.assertTrue(has_access(beta_tester, 'load', self_paced_course)) self.assertTrue(has_access(beta_tester, 'load', self_paced_section, self_paced_course.id))
if block_key not in missing_blocks: self.assertEquals( set(block_structure.get_children(block_key)), set(children), )
rendered_html = etree.XML(problem.get_html())
'tcp_keepalive_idle': float,
nodes = modulestore().get_items(reusable_location, qualifiers={'category': 'chapter'}) new_course_loc = modulestore().delete_item(nodes[0].location, self.user_id)
resp = self.client.get(self.list_url_master_course, {}, HTTP_AUTHORIZATION=self.auth)
tags = tags or [u'auto_refund'] create_zendesk_ticket(name, email, subject, body, tags)
self.assertTrue(exam_attempts_section.is_search_text_field_visible)
if self.choice is None: return None return self.descriptor.get_children()[self.choice]
self.base_url = base_url self.anchor = anchor self.section = section
return
unfiltered_response = self.verify_response(params={'username': self.staff_user.username}) for org in [self.course.org, alternate_course.org]: self.assertTrue(
loc_str = unicode(location) max_score = self._max_scores_updates.get(loc_str) if max_score is None: max_score = self._max_scores_cache.get(loc_str) return max_score
from salt.exceptions import (CommandExecutionError, SaltInvocationError, SaltRenderError) import salt.utils import salt.syspaths from salt.exceptions import MinionError
return port
return router
bitmask = 0xffffffff h = 0
block = self.store.get_item(block_location) self.assertEqual(block.merged_group_access, expected_dict)
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandExecutionError
rng = make_np_rng(None, 322, which_method="shuffle")
self.go_to_tab_and_assert_problem(1, self.problem1_name)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 5)
assert_raises(ValueError, unique_labels)
return self._folds[0].get_output_space()
return ''
self.assertEqual(response.status_code, 404)
modulestore = XMLModuleStore( data_dir, default_class=None, source_dirs=source_dirs )
username = email.split("@")[0] try: email = people[username]['email'] except KeyError: pass
if params: endpoint = 'resources'
validated_lti_params = self.get_validated_lti_params(self.strategy)
field_errors = self._validate_patch(request.data) if field_errors: return Response({'field_errors': field_errors}, status=status.HTTP_400_BAD_REQUEST) return self.partial_update(request, *args, **kwargs)
course_key = CourseKeyField(max_length=255, db_index=True, null=True)
'cache_jobs': bool,
link = link.replace('\\', '/')
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
config.toggle()
unlink_cohort_partition_group(test_cohort) link_cohort_to_partition_group( test_cohort, self.user_partition.id, self.groups[1].id, ) self.assert_student_in_group(self.groups[1])
EmptyPromise( lambda: self.q(css='a.button.action-primary').present, 'Delete prompt is displayed' ).fulfill()
from salt.log import setup_console_logger from salt.serializers import DeserializationError, SerializationError
self.settings_patcher.stop() super(GatingTestCase, self).tearDown()
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath
return TEST_COURSE_KEY.make_usage_key('problem', problem_url_name)
BaseLoader = getattr(yaml, 'CSafeLoader', yaml.SafeLoader) BaseDumper = getattr(yaml, 'CSafeDumper', yaml.SafeDumper)
return
return self.children()
return len(self.q(css='.team-member'))
self.assertEquals(provider2.icon_image, provider1.icon_image) self.assertEquals(provider2.name, post_data['name'])
return np.all([kernel.is_stationary() for kernel in self.kernels])
if coefs.ndim > 1: ranks = np.argsort(safe_sqr(coefs).sum(axis=0)) else: ranks = np.argsort(safe_sqr(coefs))
course_data_path = path(self.data_dir) / source_courselike.data_dir
centered_obs = observations - self.location_ mahalanobis_dist = np.sum( np.dot(centered_obs, precision) * centered_obs, 1)
return
if mismatch: return False
with self.assertRaisesRegexp(CommandError, ".* requires one or more arguments.*"): call_command('reindex_course_team')
ret = {'pid': process_info.dwProcessId}
self.page.visit() self.page.wait_until_no_loading_indicator()
self.problem_page.q( css='div.problem input.ctinput[type="{}"]'.format(self.choice_type) ).nth(input_num).click()
if self.negative_class_index is None: y = T.eq(y, self.positive_class_index)
logging.root.addHandler(LOGGING_STORE_HANDLER)
from sklearn.tree._tree import TREE_LEAF k = 4
self.stdin = sys.stdin.fileno() self.stdout = sys.stdout.fileno() self.stderr = sys.stderr.fileno()
from salt.serializers import DeserializationError, SerializationError from salt.utils.aggregation import aggregate, Map, Sequence from salt.utils.odict import OrderedDict
unicode_text = "好 各位同学".decode('utf-8') self.assertTrue(self.video.downloaded_transcript_contains_text('srt', unicode_text))
pass
self.assertEqual(self.account_settings_page.title_for_field(field_id), title) self.assertEqual(self.account_settings_page.value_for_readonly_field(field_id), value)
while (svd_restarts < max_svd_restarts) and not has_converged:
if category not in ['html', 'problem', 'video']: return HttpResponseBadRequest( "Category '%s' not supported for Libraries" % category, content_type='text/plain' )
sample_weight = self._validate_sample_weight(sample_weight, n_samples)
if __opts__['test']: ret['result'] = None ret['comment'] = 'Service {0} set to be disabled'.format(name) return ret
extval = kwargs.get(extname) or kwargs.get(extlongname) or \ csrexts.get(extname) or csrexts.get(extlongname)
assert isinstance(sls_data, dict) assert isinstance(yml_data, dict) assert sls_data == yml_data
self.track_selection_page.visit()
inherited_metadata_filter_list = list(filtered_metadata.keys()) inherited_metadata_filter_list.extend(INHERITED_FILTER_LIST)
OverrideFieldData.provider_classes = None
break
this_yaml = test_yaml_which_set % {'which_set': ['train', 'test']} trainer = yaml_parse.load(this_yaml) trainer.main_loop()
url(r'^choose/{}/$'.format(settings.COURSE_ID_PATTERN), views.ChooseModeView.as_view(), name='course_modes_choose'),
config_course_cohorts(self.course1, is_cohorted=True, auto_cohorts=["Course1AutoGroup1", "Course1AutoGroup2"])
import django try: django.setup()
second_checkpoint.photo_verification.remove(attempt) self.assertEqual(second_checkpoint.photo_verification.count(), 0)
event = self.create_segmentio_event() for field in fields: if field in event: del event[field] return event
pass
for tab in tab_list: if tab.type == tab_type: return True return False
return "{}/container/{}".format(BASE_URL, self.locator)
assert_almost_equal(clf.coef_, clf_weighted.coef_, decimal=2) assert_almost_equal(clf.coef_, clf_balanced.coef_, decimal=2)
return AccountLegacyProfileSerializer.get_profile_image(user_profile, user_profile.user)
in_cart = False reg_then_add_to_cart_link = ""
pass
return (subnet, name)
return sel
mako_middleware_process_request(request)
scope_map = defaultdict(set) for descriptor in descriptors: for field in descriptor.fields.values(): scope_map[field.scope].add(field) return scope_map
from salt.utils import cloud from integration import TMP, CODE_DIR
db_table = 'django_comment_client_permission'
if BulkEmailFlag.feature_enabled(course_key): sections.append(_section_send_email(course, access))
_associate_eip_with_interface(eni_id, associate_public_ip, vm_=vm_)
response = searcher.search( doc_type=CoursewareSearchIndexer.DOCUMENT_TYPE, field_dictionary={"course": unicode(self.course.id)} ) self.assertEqual(response["total"], 3)
continue
ret = self.run_function('system.list_startup_disks') self.assertIsInstance(ret, list) self.assertIn(self.run_function('system.get_startup_disk'), ret)
for block in [component, child, sibling]: check_node(block.location, None, after_create, self.user_id, None, after_create, self.user_id)
BACKEND.set_config_by_domain(domain)
for section in self.course_outline_page.sections(): section.expand_subsection()
self._load_page(access_point, 'default')
from salt.states import supervisord
call_command('manage_group', TEST_GROUP) self.check_groups([TEST_GROUP]) self.check_permissions(TEST_GROUP, [])
curr_minion = {} curr_minion.update(minion_info) curr_minion.update({'id': minion}) minions[minion] = curr_minion
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
fd_ = []
from __future__ import unicode_literals
from contextlib import contextmanager import logging
num_braces = 0
epoch_num = 6 termination_criterion = EpochCounter(epoch_num)
raise NotImplementedError
if entrance_exam_url: problems = get_problems_in_section(entrance_exam_url) usage_keys = [UsageKey.from_string(location) for location in problems.keys()]
tab_ids[num_orig_tabs - 1], tab_ids[num_orig_tabs - 2] = tab_ids[num_orig_tabs - 2], tab_ids[num_orig_tabs - 1]
if self.structure_json: return json.loads(self.structure_json) return None
response_dict = self._get_page_data(response) self.assertEqual(response_dict['full_name'], full_name)
assert_raises(ValueError, chi2_kernel, csr_matrix(X), csr_matrix(Y)) assert_raises(ValueError, additive_chi2_kernel, csr_matrix(X), csr_matrix(Y))
assert_raises(ValueError, AdaBoostClassifier(learning_rate=-1).fit, X, y_class)
pass
for user_partition in self.user_partitions: if user_partition.id == user_partition_id: return user_partition raise NoSuchUserPartitionError("could not find a UserPartition with ID [{}]".format(user_partition_id))
return "<LibraryFixture: org='{org}', number='{number}'>".format(**self.library_info)
def __init__(self): super(NoBatchSizeError, self).__init__("Neither the " "TrainingAlgorithm nor the model were given a specification " "of the batch size.")
y_pred[:, k] += learning_rate * tree.predict(X).ravel()
for mode in unexpired_modes[course_key]: if mode.min_price > 0 and not CourseMode.is_credit_mode(mode): return mode
import salt.netapi
from salt.modules import parallels from salt.exceptions import SaltInvocationError
for item in matching: if name not in ret['create']: break
return True
event_iter = self.get_event_iter_returns(jid, minions, timeout=timeout)
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
import salt.ext.six as six
cv = check_cv(self.cv, classifier=False)
pred = Y_proba > .5 assert_array_equal(pred, Y_pred_sprs.toarray())
for alias, driver, name in vms_to_destroy: ret = processed[alias][driver][name] if not ret: continue
yield self.auth.authenticate()
self.assert_enrollment_status(as_server=True, mode=selected_mode)
courses_having_prerequisites = frozenset( enrollment.course_id for enrollment in course_enrollments if enrollment.course_overview.pre_requisite_courses ) courses_requirements_not_met = get_pre_requisite_courses_not_completed(user, courses_having_prerequisites)
category = xblock.category if category == 'course': return 'chapter' elif category == 'chapter': return 'sequential' elif category == 'sequential': return 'vertical' return None
self.lc_block = self.store.get_item(self.lc_block.location) self._bind_course_module(self.lc_block) self.lc_block.xmodule_runtime.publish = self.publisher
remove_user_from_cohort(second_cohort, self.student.username) self.assert_student_in_group(None)
CourseModeFactory.create(course_id=self.COURSE_KEY, mode_slug=CourseMode.HONOR) data = certs_api.get_certificate_footer_context()
position = "numerator" numerator = [] denominator = []
from __future__ import absolute_import import os
log.error('Wrong type, skipping {0}'.format(kwarg))
if ttl is None: ttl = 60 status = _zone.add_record(_type, name, _value, ttl, identifier) return _wait_for_sync(status.id, conn, wait_for_sync)
idx = idx.item(0)
self.config.pop('log_datefmt_console', None)
from __future__ import absolute_import
with self.assertRaises(ResponseError): problem.grade_answers({'1_2_1': '42'})
username = request.data.get('username') if not username: raise ValidationError({'detail': 'A username must be specified.'})
self.assertTrue(self.video.downloaded_transcript_contains_text('txt', 'Equal transcripts'))
'support',
PLATFORM_NAME = "Your Platform Name Here" CC_MERCHANT_NAME = PLATFORM_NAME COPYRIGHT_YEAR = "2015"
self.batch_axis=list(axes).index('b') self.axes_to_sum = list(range(len(axes))) self.axes_to_sum.remove(self.batch_axis)
query_features = microsite.get_value('student_profile_download_fields')
CREDIT_PROVIDER_SECRET_KEYS = {}
LANGUAGE_KEY = 'pref-lang'
self.code_book_ = random_state.random_sample((n_classes, code_size_)) self.code_book_[self.code_book_ > 0.5] = 1
return np.dot(A, B)
from __future__ import absolute_import import os import sys import textwrap import tempfile
estimators = [DecisionTreeClassifier(max_depth=2), DecisionTreeRegressor(max_depth=2)] sets = [datasets.load_iris(), datasets.load_boston()]
rvals, _ = scan( armijo, outputs_info=states, n_steps=n_iters, name='armijo', mode=theano.Mode(linker='cvm'), profile=profile)
available = list(_available_services().keys())
self.assertEqual( 'student', access.get_user_role(self.anonymous_user, self.course_key) )
log = logger.getLogger(__name__)
sh("coverage xml --rcfile={}".format(rcfile)) sh("coverage html --rcfile={}".format(rcfile)) call_task('diff_coverage', options=dict(options))
from __future__ import absolute_import import sqlite3 import os
memory = Memory(os.path.join(get_data_home(), 'covertype_benchmark_data'), mmap_mode='r')
self.set(key, _DELETED_SENTINEL)
X = sparse.csr_matrix(X)
for svd_10, svd_20 in svds_10_v_20: assert_greater( svd_20.explained_variance_ratio_.sum(), svd_10.explained_variance_ratio_.sum(), )
return ups
super(PipelineRenderTest, cls).setUpClass() call_task('pavelib.assets.update_assets', args=('lms', '--settings=test'))
log.debug('SQL Query: {0}'.format(cmd)) cur.execute(cmd) return True
startup.enable_microsites() directories = LOOKUP['main'].directories self.assertEqual(len([directory for directory in directories if 'external_module' in directory]), 1)
return len(self.q(css=".forum-nav-thread").results) == thread_count
return strategy.storage.user.user_model().objects.get(email=email)
super(CourseViewMixin, self).perform_authentication(request) if request.user.is_anonymous() and not settings.DEBUG: raise AuthenticationFailed
loaded = yaml.load(yamlfile) logger.info(loaded) assert loaded['corruptor'] is loaded['dae'].corruptor
team_list = self.get_teams_list(user=user, expected_status=200, data=course_one_data) self.assertEqual(team_list['count'], 0)
cache.clear() CertificateGenerationConfiguration.objects.create(enabled=True) self.client.login(username=self.global_staff.username, password='test')
import salt.utils from salt.exceptions import CommandExecutionError
thread = self.make_minimal_cs_thread({ "thread_type": thread_type, response_field: [make_minimal_cs_comment()], response_total_field: 5, })
import salt.wheel
inject_globals['__env__'] = 'base'
after_due_date = CapaFactory.create(showanswer='closed', max_attempts="1", attempts="0", due=self.yesterday_str)
n_expected = combinations(n_population, n_samples, exact=True)
xml = renderer.get_html() context = extract_context(xml) self.assertEqual(context, {'id': 'solution_12'})
monitoring_dataset = DenseDesignMatrix(X=X)
if item in ['constraint']: if not isinstance(extra_args, (list, tuple)) or '--full' not in extra_args: cmd += ['--full']
self.verify_run_all_servers_task(options)
n_samples = 12 n_features = 2 n_iter = 10 rng = np.random.RandomState(42) X = rng.rand(n_samples, n_features)
return BASE_URL + "/u/" + self.username
block = store.create_child( user_id, parent_loc, block_info.category, block_id=block_info.block_id, fields=block_info.fields, ) for tree in block_info.sub_tree: create_sub_tree(block.location, tree)
self.provide_info(email, password) self.submit()
test_options.pop(0) if len(test_options) <= 1: break
self.wait_for_ajax()
if hasattr(X, 'T'): assert_raises(ValueError, transformer.transform, X.T)
return association_response
VALID_SERVICE_DIRS = [ '/service', '/var/service', '/etc/service', ] SERVICE_DIR = None for service_dir in VALID_SERVICE_DIRS: if os.path.exists(service_dir): SERVICE_DIR = service_dir break
if name not in list_tasks(location): return True else: return False
return len(self.q(css='div.wrapper-note-excerpts').results)
key = str(socket_path)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call ensure_in_syspath('../../')
list_item = nodes.list_item() list_item['classes'] = ['lit-item']
with self.assertRaisesRegexp(CommandError, unicode(GitExportError.BAD_COURSE)): call_command('git_export', 'foo/bar:baz', 'silly', stderr=StringIO.StringIO())
MAXSIZE = int((1 << 31) - 1)
comps[1] = '.'.join(comps[1:len(comps)])
return self.q(css='.problem-header').text[0]
limiter = BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning("Rate limit exceeded in password_reset") return HttpResponseForbidden()
y = 0.5 * X.ravel() + rng.randn(n_samples, 1).ravel()
AutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=False).visit()
with self.assertNumQueries(0): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
self.wait_for_captions() captions_selector = self.q(css=CSS_CLASS_NAMES['captions_text_getter']) captions_selector.click()
import salt.utils try: import wmi except ImportError: pass
boston = load_boston() perm = rng.permutation(boston.target.size) boston.data = boston.data[perm] boston.target = boston.target[perm]
self.assertEquals(11, self.response.content.count('grade_F'))
block_locator = self._map_revision_to_branch(block_locator) return super(DraftVersioningModuleStore, self).get_block_generations(block_locator)
for name in keyword_only: default = _empty if kwdefaults is not None: default = kwdefaults.get(name, _empty)
return "str(random.randint(0, 1e9))"
parent_xblock.save()
if publish: unit.publish_action.click() unit.view_published_version() self.assertEqual(len(self.browser.window_handles), 2) courseware_page.wait_for_page()
return u"Course '{}' is {}Embargoed".format(self.course_id.to_deprecated_string(), not_em)
traversal_spec = vmodl.query.PropertyCollector.TraversalSpec( name='traverseEntities', path='view', skip=False, type=vim.view.ContainerView )
launch_mcd_on_dataset(1700, 5, 800, 0.1, 0.1, 870)
assert_equal(_top_import_error, None)
import salt.utils import salt.utils.mac_utils from salt.exceptions import CommandExecutionError, SaltInvocationError
del_cached_content(thumbnail_location) if thumbnail_content is not None: content.thumbnail_location = thumbnail_location
self._bind_module(lc_block) chosen_child = get_child_of_lc_block(lc_block) chosen_child_defn_id = chosen_child.definition_locator.definition_id lc_block.save()
else: terms_text = _(u"Terms of Service and Honor Code")
yield check_estimators_unfitted if 'class_weight' in Classifier().get_params().keys(): yield check_class_weight_classifiers
termination_criterion = EpochCounter(5)
self.assert_no_xpath(xml, "//label[@class='choicetextgroup_incorrect']", self.context)
from salt.ext.six.moves.urllib.parse import urlencode as _urlencode
raw_path = script.get('system_path', '').split(":") + DEFAULT_PATH
type = 'courseware' title = ugettext_noop('Course') priority = 10 view_name = 'courseware' is_movable = False is_default = False
module_path, _, name = engine_path.rpartition('.') return getattr(importlib.import_module(module_path), name)
#keep_warnings = False
@classmethod def get_template_dir(cls): return 'foo'
X, y = make_classification(n_samples=200, n_features=20, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, flip_y=0.0, class_sep=10, shuffle=False, random_state=0)
elif existing['code'] == 404: ret['comment'] = 'A Monitor with this name was not found.' else: ret = _load_result(existing, ret)
self.assert_grade(problem, 'choice_3', 'incorrect')
import salt.utils import salt.utils.files import salt.utils.itertools import salt.utils.url from salt.exceptions import SaltInvocationError, CommandExecutionError from salt.ext import six
ret = line_search_wolfe2(f, fprime, xk, pk, gfk, old_fval, old_old_fval, **kwargs)
problem_location = self.problem_location(problem_url_name) modx_url = self.modx_url(problem_location, 'problem_reset') resp = self.client.post(modx_url) return resp
from __future__ import absolute_import import os import sys import shutil import tempfile import stat
z = mask[:, None] * z + (1 - mask[:, None]) * state_before
import salt.utils
if not validate_trust_root(openid_request): return default_render_failure(request, "Invalid OpenID trust root")
oob_error = 1 - clf.oob_score_ error_rate[label].append((i, oob_error))
return services[name]
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON
SOCIAL_SHARING_SETTINGS = ENV_TOKENS.get('SOCIAL_SHARING_SETTINGS', SOCIAL_SHARING_SETTINGS)
self.assertIn("ufeff", filedata) self.ufeff_srt_file.write(filedata) self.ufeff_srt_file.seek(0)
'subscription_id': course_overview.clean_id(padding_char='_'),
return self.storage_space.np_format_as(batch, space)
assert_raises(ValueError, cls().partial_fit, X2, y2[:-1], classes=np.unique(y2))
user.__salt__ = {} user.__opts__ = {} user.__grains__ = {}
for mode in cls.VERIFIED_MODES: if mode in course_mode_dict: return True return False
html_encapsulated = module.get_problem_html(encapsulate=True)
chunks = self.state.compile_high_data(high)
import salt.ext.six as six
Z = Z.reshape(XX.shape) plt.figure(fignum, figsize=(4, 3)) plt.pcolormesh(XX, YY, Z, cmap=plt.cm.Paired)
if instance.state == CourseCreator.PENDING: send_admin_notification.send( sender=sender, user=instance.user )
description = models.TextField(null=True, blank=True)
from __future__ import absolute_import
target_location = self.xblock.location.replace(revision='draft') _update_module_location(self.xblock, target_location)
pass
CONFIG_ROOT = path(os.environ.get('CONFIG_ROOT', ENV_ROOT))
self.event.fire_event(new_job_load, tagify([clear_load['jid'], 'new'], 'job'))
from __future__ import absolute_import import logging
missing = index - len(self) + 1 if missing > 0: self.extend([None] * missing) list.__setitem__(self, index, value)
trainset = ToyDataset() testset = ToyDataset() return trainset, testset
return (vpnservice, desc)
from __future__ import unicode_literals
pre = __salt__['git.config_get']( cwd=repo, key=name, user=user, ignore_retcode=True, **{'all': True, 'global': global_} )
grains.update(_hw_data(grains))
delete_course_and_groups(course_id, self.user.id)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.assert_user_setting_event_emitted( setting='profile_image_uploaded_at', old=old, new=new )
return reverse_course_url( 'textbooks_detail_handler', self.course.id, kwargs={'textbook_id': textbook_id} )
config.save()
]
return self.scope_ids.usage_id.course_key.library
return force_text(urlsafe_base64_encode(force_bytes(base36_to_int(uidb36 or self.uidb36))))
return urlparse.urljoin(BASE_URL, relative_path)
return self.q(css='.item-progresspoint-success-date').visible
sample_weight = sample_weight / sample_weight.sum(dtype=np.float64)
MONGO_PORT_NUM = int(os.environ.get('EDXAPP_TEST_MONGO_PORT', '27017')) MONGO_HOST = os.environ.get('EDXAPP_TEST_MONGO_HOST', 'localhost')
ide_spec = _add_new_ide_controller_helper(ide_controller_label, None, bus_number) device_specs.append(ide_spec) bus_number += 1
mailchimp = MailSnake(api_key) result = mailchimp.ping() log.debug(result) return mailchimp
self.assertIn(self.seq_loc, course.system.module_data)
import os import re
self.youtube_configuration.update({ 'time_to_response': 2.0, 'youtube_api_blocked': True, })
with remove_ccx(parent_usage_key) as (parent_usage_key, restore): return restore(self._modulestore.create_child( user_id, parent_usage_key, block_type, block_id=block_id, fields=fields, **kwargs ))
for leaf in np.where(tree.children_left == TREE_LEAF)[0]: self._update_terminal_region(tree, masked_terminal_regions, leaf, X, y, residual, y_pred[:, k], sample_weight)
raise NotImplementedError
log.debug("running salt-cloud with %s", arg_str) output = self.run_script('salt-cloud', arg_str, catch_stderr, timeout=timeout)
import salt.ext.six as six
reorderable_items = set() if view_name == 'reorderable_container_child_preview': reorderable_items.add(xblock.location)
BROKER_HEARTBEAT = 10.0 BROKER_HEARTBEAT_CHECKRATE = 2
from __future__ import absolute_import
return course_metadata_utils.has_course_started(self.start)
return '/boot/grub/menu.lst'
return getattr(request, 'need_to_delete_cookie', False)
'master_use_pubkey_signature': bool,
BSD = ('OpenBSD', 'FreeBSD')
from student.views import login_user return shim_student_view(login_user, check_logged_in=True)(request)
HAS_IMPORTLIB = False
from salttesting.helpers import ensure_in_syspath, expensiveTest
if credit_type is not None: response_element.set('partial_credit', str(credit_type))
X = np.atleast_2d([1., 3., 5., 6., 7., 8.]).T
log = logging.getLogger(__name__)
from __future__ import absolute_import import collections import math
'user_message': _(u"The ordering {ordering} is not supported").format(ordering=order_by_input),
from __future__ import absolute_import
from __future__ import absolute_import, print_function import errno import logging import os import shutil import tempfile import time import re import traceback import functools
if servers is False: return False
if not username: username = request.user.username if username != request.user.username and not has_api_key_permissions: return Response(status=status.HTTP_404_NOT_FOUND)
#templates_path.append('source/_templates')
from salt.modules import system
bin_queries = np.asarray([hasher.transform(X)[:, 0] for hasher in self.hash_functions_]) bin_queries = np.rollaxis(bin_queries, 1)
self.crypt = kwargs.get('crypt', 'aes')
import warnings
resp = self.client.put( '/shoppingcart/payment_fake', data="decline", content_type='text/plain' ) self.assertEqual(resp.status_code, 200)
denied_banner = any(item.display for item in reverifications["denied"])
X = iris.data d = X.shape[1]
import uuid SECRET_KEY = uuid.uuid4().hex
if hasattr(self._dataset, 'get'): rval = self._next(next_index) else: rval = self._fallback_next(next_index)
from salttesting import TestCase from salttesting.mock import MagicMock, patch
return [('127.0.0.1:11211 (1)', {})]
self.q(css=self._bounded_selector(".annotator-item input")).first.fill(" ".join(tags))
self.assertEqual(_install_from_path.called, 0)
return
temp_dir_path = tempfile.mkdtemp() self.addCleanup(shutil.rmtree, temp_dir_path)
raise NotImplementedError()
config_course_cohorts(self.course, is_cohorted=True)
solution_tags = ['solution']
return [MockUsers()]
return ret1 == ret2 == 0
import salt.utils from salt.utils import which as _which from salt.exceptions import CommandNotFoundError, CommandExecutionError
'ENABLE_SHOPPING_CART': False,
file = getattr(instance, field.attname) data[field.attname] = file.name
p = linear_response return p
expanded_cached_pkg = str(os.path.expandvars(cached_pkg))
sh(cmd( "touch", 'lms/urls.py', 'cms/urls.py', ))
self.course_nav.go_to_vertical('Test Vertical-2')
theme_root = settings.ENV_ROOT / "themes" / settings.THEME_NAME
request = self.factory.get('/') request.user = AnonymousUser() mako_middleware_process_request(request) student.views.index(request)
course_id = CourseKeyField(max_length=255, db_index=True)
svc = SVC(kernel="linear") rfecv = RFECV(estimator=svc, step=1, cv=StratifiedKFold(2), scoring='accuracy') rfecv.fit(X, y)
pts = pts[pts['species'] == species_name] bunch['pts_%s' % label] = pts
del params["honor_code"] assert_honor_code_error("To enroll, you must follow the honor code.")
with open(os.path.join(os.path.dirname(__file__), 'data', filename)) as f: return f.read()
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'cloudstack', vm_['profile'], vm_=vm_) is False: return False
max_scores_cache.fetch_from_remote(field_data_cache.scorable_locations)
self.navigate_to_video()
DEFAULT_COURSE_ABOUT_IMAGE_URL = ENV_TOKENS.get('DEFAULT_COURSE_ABOUT_IMAGE_URL', DEFAULT_COURSE_ABOUT_IMAGE_URL)
return [ credential['credential']['program_id'] for credential in get_user_credentials(student) if 'program_id' in credential['credential'] and credential['status'] == 'awarded' ]
targets = [x for x in pkg_params if x in old] if not targets: return {}
self.categories = categories
from __future__ import absolute_import import tempfile
error_msg = 'Error not available'
from __future__ import absolute_import
if serialized_block['id'] == unicode(self.html_block.location): self.assertTrue(serialized_block['visible_to_staff_only']) else: self.assertFalse(serialized_block['visible_to_staff_only'])
FEATURES['ENABLE_PAYMENT_FAKE'] = True
expected = '<video url_name="SampleProblem" download_video="false"/>\n' self.assertEquals(expected, etree.tostring(xml, pretty_print=True))
sls[ks_opts['lang']['lang']] = {'locale': ['system']}
from .overrides import get_override_for_ccx return get_override_for_ccx(self, self.course, 'max_student_enrollments_allowed')
assert_raises_regexp = assert_raises_regex
self.assertEqual(len(self.video.q(css='video')), 1)
assert_raises(ValueError, _fast_dot, A, A[0, :][None, :])
from distutils.version import LooseVersion from sklearn.utils.extmath import svd_flip
if not hasattr(self, 'chapter'): self.chapter = ItemFactory.create( parent_location=self.course.location, category='chapter' )
y_pred = clf.classes_.take(y_proba.argmax(axis=1), axis=0) assert_array_equal(y_pred, true_result)
from __future__ import absolute_import
return 0 < self.major < 2014
changes_dict = {'init': []} changes = changes_dict.get('init')
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
properties = obj_schema.get('properties') if properties: for _, prop_obj_schema in properties.iteritems(): dep_models_list.extend(self._build_dependent_model_list(prop_obj_schema))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON)
fields = field_dictionary if field_dictionary else self._get_default_search() return self.searcher.search(query_string=query_string, field_dictionary=fields, doc_type=self.DOCUMENT_TYPE)
self.distribution.running_salt_install = True self.distribution.salt_version_hardcoded_path = os.path.join( self.build_lib, 'salt', '_version.py' ) if IS_WINDOWS_PLATFORM:
for i in permissions.split(','): perm = i.strip()
with open(state_file_path, "w") as state_file: state_file.write(expected_version)
super(SymbolicResponse, self).setup_response()
schedule.__salt__ = {} schedule.__opts__ = {} schedule.__pillar__ = {}
course_id = _get_course_id(self.store, test_course_data) delete_course_and_groups(course_id, self.user.id) with self.assertRaises(ItemNotFoundError): are_permissions_roles_seeded(course_id)
#html_show_sourcelink = True
mlp.n_iter_ = 0 mlp.learning_rate_ = 0.1
certificate_type = context.get('certificate_type')
self._assert_enable_certs_button(False)
import salt.runner import salt.utils import salt.config import salt.syspaths
if self.transcript_language == 'en':
if exif is None: image.save(string_io, format='JPEG') else: image.save(string_io, format='JPEG', exif=exif)
return (router, name, admin_state_up, kwargs)
'CERTIFICATES_HTML_VIEW': False,
total_amount = PaidCourseRegistration.get_total_amount_of_purchased_item(self.course_key) self.assertEqual(total_amount, 36)
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
return frozenset(child.data for child in self.library_fixture.children)
if page_refresh: self.browser.refresh() return self.q(css='{} .section-name'.format(parent_css)).text
_, labels_no_copy = affinity_propagation(S, preference=preference, copy=False) assert_array_equal(labels, labels_no_copy)
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
return modulestore().update_item(block, ModuleStoreEnum.UserID.test)
from __future__ import absolute_import
if "TRACKING_IGNORE_URL_PATTERNS" in ENV_TOKENS: TRACKING_IGNORE_URL_PATTERNS = ENV_TOKENS.get("TRACKING_IGNORE_URL_PATTERNS")
CELERY_RESULT_BACKEND = 'djcelery.backends.cache:CacheBackend'
MIN_PRICE = 1438
self._close()
if obj <= best_obj: best_obj = obj best_alpha = alpha best_alpha_ind = ind
self.assertEqual(module.attempts, 3)
self.login_page.click_third_party_dummy_provider()
return self.mean_h_given_v(v)
self.assertEqual(first_request["parameters"]["course_num"], self.course_key.course) self.assertEqual(second_request["parameters"]["course_num"], other_course_key.course)
VerificationDeadline.set_deadline(self.id, self.verification_deadline, is_explicit=True)
return getattr(settings, 'SOCIAL_AUTH_SAML_SP_PRIVATE_KEY', '')
return self.ROOT + value
num_queries = 2
still_in_grace = CapaFactory.create(showanswer='closed', max_attempts="1", attempts="0", due=self.yesterday_str, graceperiod=self.two_day_delta_str) self.assertFalse(still_in_grace.answer_available())
_valid(status, comment='Kill signal \'{0}\' successfully' ' sent to the container \'{1}\''.format(signal, container), id_=container)
'ext_pillar': list,
return response
return self.q(css='section.banner-user')
my_X = X.copy() km = KMeans(copy_x=False, n_clusters=n_clusters, random_state=42) km.fit(my_X) _check_fitted_model(km)
import elementtree.ElementTree as ElementTree
AutoAuthPage(self.browser).visit()
many_days = datetime.timedelta(days=60)
assert_array_equal(y, [1, 2, 3, 4, 1, 2])
([TestTransformer1()], []),
lc_block = self._add_library_content_block(course, self.lib_key) lc_block = self._refresh_children(lc_block) self.assertEqual(len(lc_block.children), 2)
mean = layer.mf_update( state_below=T.alloc(0., 1, 1), state_above=None, layer_above=None)
sim = np.array([[0, 5, 9, 4], [5, 0, 2, 2], [3, 2, 0, 1], [4, 2, 1, 0]])
salt.log.setup.setup_multiprocessing_logging()
res = grainsmod.filter_by(dict1) self.assertIs(res, None)
def _tile_columns(self): raise NotImplementedError('TODO')
if not kwargs.get('no_django', False): kwargs['lookup'] = edxmako.LOOKUP['main'] super(Template, self).__init__(*args, **kwargs)
elif value["version"] >= 2: if "scheme" not in value: raise TypeError("UserPartition dict {0} missing value key 'scheme'".format(value))
if when > data['_when']: data['_when'] = when data['_when_run'] = True
cmd += '{0}'.format(pkg2inst)
return get_test_system(course_id=self.course.id)
connected_minions = None return_count = 0
sleekxmpp_version = distutils.version.LooseVersion(sleekxmpp.__version__) valid_version = distutils.version.LooseVersion('1.3.1') if sleekxmpp_version >= valid_version: return __virtualname__
if type(MultiprocessingProcess) is type(tgt) and ( issubclass(tgt, MultiprocessingProcess)): need_log_queue = True else: need_log_queue = False
for saltenv in environments: env_files = [k for k in files if k['Key'].startswith(saltenv)]
_update_certificate_context(context, user_certificate, platform_name)
instance_map = weakref.WeakKeyDictionary()
import logging import json import os try:
seed = random_state.randint(0, np.iinfo(np.int32).max)
import tornado.ioloop
test_score = np.zeros((params['n_estimators'],), dtype=np.float64)
export_fs.makeopendir('policies')
with Timer() as iteration_over_groups_time_1: courses_list, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(len(courses_list), USER_COURSES_COUNT)
X -= X.min()
state_below=dbm.hidden_layers[-2].upward_state(H_hat[-1])))
if self.presort == 'auto' and issparse(X): presort = False elif self.presort == 'auto': presort = True
'pillarenv': str,
idx = mapping if isinstance(flat, (tuple, list)): assert 0 <= idx < len(flat) return flat[idx] else: assert idx == 0 return flat
self._grading_policy['RAW_GRADER'] = value self.grading_policy['GRADER'] = value
return
rpm.__salt__ = {}
return self.q(css='.page-header .page-description')[0].text
from salt.exceptions import CommandExecutionError
self.assertEqual(response.status_code, status_code) self.assertDictEqual(response.data, {'detail': msg})
self.user_partition.get_scheme(self.non_random_scheme.name) self.user_partition.get_scheme(self.random_scheme.name)
default_axes = ('b', 0, 1, 'c')
self.expect = contextualize_text(xml.get('expect') or xml.get('answer'), self.context)
date_fmt = '%Y%m%d%H%M%SZ'
destroy(vm_['name'])
stacklevel = 2
config['course_org_filter'] = organizations[0] self.current_request_configuration.data = config
return self.q(css='.join-team .join-team-message').present
module = CapaFactory.create() module.get_progress = Mock(wraps=module.get_progress) module.get_html() module.get_progress.assert_called_once_with()
'ENABLE_TEAMS': True,
'grains': dict,
request = build_launch_request() del request.POST[missing_param] return views.lti_launch(request, None, None)
ret = self.run_function('virtualenv.create', [venv_dir]) self.assertEqual(ret['retcode'], 0)
descriptor = modulestore().get_course(course_key) descriptor.grade_cutoffs = cutoffs modulestore().update_item(descriptor, user.id) return cutoffs
module = module + '.' if not module.endswith('.') else module
resp = self.client.get(self.urls['course_modes_choose'], follow=True) self.assertRedirects(resp, self.urls['verify_student_start_flow'])
input_dict = {'1_2_1': '0'} correct_map = problem.grade_answers(input_dict)
mongo_course = self.store.get_course(self.course_locations[self.MONGO_COURSEID].course_key) self.assertEqual(len(mongo_course.children), 1)
return self.kernel.is_stationary()
assert_in(InheritanceMixin, root.xblock_mixins)
_DFLT_IPC_MODE = 'tcp' _MASTER_TRIES = -1
raise NotImplementedError
continue
return course_key
if user is not None and password is not None: mongo_conn.authenticate(user, password)
return edxval_api.get_video_info_for_course_and_profiles(unicode(course_id), video_profile_names)
faces_centered = faces - faces.mean(axis=0)
expected_p, expected_h = h1.mf_update( state_below = v.upward_state(v_state), state_above = h2.downward_state(h2_state), layer_above = h2)
mock_no_data = MagicMock(return_value='') with patch.object(parallels, 'prlctl', mock_no_data): self.assertRaises(SaltInvocationError, parallels.snapshot_id_to_name, name, snap_id)
columns_index = [8, 7, 2, 3, 4, 5, 6, 1, 0] cal_housing = cal_housing[:, columns_index] joblib.dump(cal_housing, filepath, compress=6)
if not self.conn.queue_exists(qname): return {} for queue in self.conn.list(): if queue.name == qname: return queue
return TagCategories.objects.all()
import logging import socket import json from distutils.version import LooseVersion
from __future__ import absolute_import
if server_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'scaleway', server_['profile'], vm_=server_) is False: return False
from __future__ import absolute_import import grp import pwd
if min_length > 1: params[field] = "a" assert_extra_field_error()
from __future__ import absolute_import import time import errno import threading
input_type = kwargs.get('type', 'radiotextgroup') input_element = etree.Element(input_type)
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.approve()
if existing['code'] == 200:
from __future__ import unicode_literals
if os.path.isfile(cache_file): cache_file_mtime = os.path.getmtime(cache_file) else: cache_file_mtime = 0
X = -np.ones((5, 10)) lda = LatentDirichletAllocation() regex = r"^Negative values in data passed" assert_raises_regexp(ValueError, regex, lda.fit, X)
self.len_indices_pos[curr_len] += curr_batch_size self.len_curr_counts[curr_len] -= curr_batch_size self.total_curr_counts -= curr_batch_size return curr_indices
drafts.sort(key=lambda x: x.index)
return self.q(css=MODAL_SELECTOR).present
if 'pub_sig' in payload and self.opts['verify_master_pubkey_sign']: return True elif 'pub_sig' not in payload and not self.opts['verify_master_pubkey_sign']: return True
pkg_params = __salt__['pkg_resource.parse_targets'](name, pkgs, **kwargs)[0]
import salt.utils
return True
y1 = np.array([[0, 1, 1], [1, 0, 1]]) y2 = np.array([[0, 0, 1], [1, 0, 1]])
AutoAuthPage(self.browser, course_id=self.course_id).visit()
CreditProvider.objects.create( provider_id="ASU", enable_integration=True, provider_url="https://credit.example.com/request", )
import integration from salt.exceptions import CommandExecutionError
if name in list_tasks(location) and not force: return '{0} already exists'.format(name)
if __PLATFORM.startswith('win'): ROOT_DIR = r'c:\salt' else: ROOT_DIR = '/'
assert_array_equal(X, Xdigits)
section = get_current_child(chapter, min_depth=1) if section is None: log.debug("No section found when loading current position in course") return None
config.add_subpackage('tests')
y = check_array(y, accept_sparse='csr', ensure_2d=False, dtype=None)
if not isinstance(usrgrps, list): usrgrps = [usrgrps] for usrgrp in usrgrps: params['usrgrps'].append({"usrgrpid": usrgrp})
import os import yaml
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
'key_logfile': str,
if len(dbm.hidden_layers) > 2: state_below = dbm.hidden_layers[-3].upward_state(H_hat[-3]) else: state_below = dbm.visible_layer.upward_state(V)
has_previous_line = self.start_line > 1 if has_previous_line: line_to_check = string_lines.line_number_to_line(self.start_line - 1) self._mark_disabled(line_to_check, scope_start_string=True) if self.is_disabled: return
U *= sqrt(X.shape[0])
from __future__ import absolute_import import logging
resp = self.client.get_json( get_url('xblock_view_handler', self.vert_loc, kwargs={'view_name': 'container_preview'}) ) self.assertEqual(resp.status_code, 200)
certificate_html_view_configuration_model = apps.get_model("certificates", "CertificateHtmlViewConfiguration") certificate_html_view_configuration_model.objects.all().delete()
urlpatterns = ( '',
_("Expected a {expected_tag} tag; got {given_tag} instead").format( expected_tag=u"<choice>", given_tag=choice.tag, )
self.assertEqual(len(response.redirect_chain), 1) self.assertIn(302, response.redirect_chain[0]) self.assertEqual(len(outbox), outbox_count) if send_email:
pass
if verbose: for img_id in ret: ret[img_id]['Info'] = inspect_image(img_id)
self.assertEqual(requirements[2]["name"], first_block.get_credit_requirement_name()) self.assertEqual(requirements[3]["name"], second_block.get_credit_requirement_name())
self._aborting = True
self.assertContains(response, 'course-container', 2) self._assert_responses(response, 1)
if not os.path.exists(path): error = '"{0} not found.'.format(path) log.error(error) raise CommandExecutionError(error)
if SALT_CRON_IDENTIFIER in comment_line: parts = comment_line.split(SALT_CRON_IDENTIFIER) comment_line = parts[0].rstrip() if len(parts[1]) > 1: identifier = parts[1][1:]
self.oauth_page.confirm() self.oauth_page.wait_for_element_absence( 'input[name=authorize]', 'Authorization button is not present' )
return (None, None)
bandwidth = config.get_cloud_config_value( 'bandwidth', vm_, __opts__, default=1800 ) kwargs['prices'].append({'id': bandwidth})
if compute_squared_diff: diff = centers[center_idx].ravel() - old_center_buffer.ravel() squared_diff += np.dot(diff, diff)
if used_ids is None: used_ids = [] cid = random.randint(minimum, maximum) while cid in used_ids: cid = random.randint(minimum, maximum) return cid
if auth_user: set_user_preference(request.user, DARK_LANGUAGE_KEY, preview_lang)
axes = ['b', 0, 1, 'c'] random.shuffle(axes) axes = tuple(axes) print('axes:', axes)
from StringIO import StringIO
from salt.modules import status from salt.exceptions import CommandExecutionError
return False
obj = LTIProviderConfig(**kwargs) obj.save() return obj
request = RequestFactory().post('unused_url') request.user = self.user request.META['HTTP_HOST'] = "aGenericValidHostName" self.append_allowed_hosts("aGenericValidHostName")
os.setegid(uinfo['gid']) os.seteuid(uinfo['uid'])
if not hasattr(self, 'n_samples_seen_'): self.n_samples_seen_ = X.shape[0] else: max_abs = np.maximum(self.max_abs_, max_abs) self.n_samples_seen_ += X.shape[0]
errstring = "Course not found." with self.assertRaisesRegexp(CommandError, errstring): call_command('force_publish', unicode('course-v1:org+course+run'))
BROKER_HEARTBEAT = 10.0 BROKER_HEARTBEAT_CHECKRATE = 2
TestScenario((self.demo_course,), "Empty"), TestScenario((self.html_course,), "Intro to &lt;html&gt;"),
self.config.pop('log_datefmt_logfile', None)
log.warning('"lsof" returncode = 1, likely no active TCP sessions.') return remotes
return False
self.notes_page.go_to_page(3) self._verify_pagination_info( notes_count_on_current_page=1, header_text='Showing 26-26 out of 26 total', previous_button_enabled=True, next_button_enabled=False, current_page_number=2, total_pages=2 )
inlier_mask_subset = residuals_subset < residual_threshold n_inliers_subset = np.sum(inlier_mask_subset)
cs, sn, rho = _sym_ortho(rhobar1, beta)
hash_val = ",".join([ "{0}={1}".format(key, resp_params[key]) for key in signed_fields ]) resp_params['signature'] = processor_hash(hash_val)
layer_to_chains = model.sampling_procedure.sample( layer_to_chains, self.theano_rng, layer_to_clamp=layer_to_clamp, num_steps=1 )
conn.create_instance_profile(name) log.info('Created {0} instance profile.'.format(name))
return self.q(css='.actual-course-number .certificate-value').first.text[0]
store = self._verify_modulestore_support(xblock.location.course_key, 'update_item') return store.update_item(xblock, user_id, allow_not_found, **kwargs)
private_ip_assignment = get_private_ip(vm_) if private_ip_assignment: create_private_ip(node_id)
curl -sSik https://localhost:8000 \\ -d client=runner \\ -d fun='jobs.lookup_jid' \\ -d jid='20150129182456704682' \\ -d outputter=highstate
with remove_ccx(course_key) as (course_key, restore): return restore(self._modulestore.get_items(course_key, **kwargs))
accept = parse_accept_header(request.META.get("HTTP_ACCEPT", "")) return media_type in [t for (t, p, q) in accept]
return self._data.get(key, default)
with open(self.TEST_INDEX_FILENAME, "w+") as index_file: json.dump({}, index_file) self.addCleanup(remove_file, self.TEST_INDEX_FILENAME)
pattern = klass(re) pattern.md = md pattern.ext = self md.inlinePatterns.add(name, pattern, "<reference")
import logging import sys
response = self.client.post(self.url, { "email": self.EMAIL, }) self.assertHttpBadRequest(response)
return False
n_clusters_1 = len(set(labels)) - int(-1 in labels) assert_equal(n_clusters_1, n_clusters)
y_grid_pred = trees.predict_proba(np.c_[xx.ravel(), yy.ravel()])[:, 1]
x = np.array([1e-40] * 1000000) logx = np.log(x) assert_almost_equal(np.exp(logsumexp(logx)), x.sum())
grp = Group(name=settings.PAYMENT_REPORT_GENERATOR_GROUP) grp.save() self.user.groups.add(grp) self.assertTrue(_can_download_report(self.user))
microsites_root = settings.MICROSITE_ROOT_DIR if self.has_configuration_set(): settings.DEFAULT_TEMPLATE_ENGINE['DIRS'].append(microsites_root)
return self.child_at(index)
try: value = int(value) except (ValueError, TypeError): pass try: value = float(value) except (ValueError, TypeError): pass
log = logging.getLogger(__name__)
from __future__ import absolute_import import logging import os import pprint import time
from __future__ import absolute_import import logging import os import re import datetime
time_tuple = (years, months, days, hours, minutes, seconds, 0)
element = etree.fromstring(xml_str) renderer = lookup_tag('math')(test_capa_system(), element) self.assertEqual(renderer.mathstr, mathjax_out)
output[:, i:i + width, j:j + width] = dense_input[ :, idx][:, None, None] idx += 1
"Test for Annotation Xmodule functional logic."
self.wait_for_element_visibility( 'div.certificate-invalidation-container', 'Certificate invalidations section is visible.' ) self.wait_for_element_visibility('#invalidate-certificate', 'Invalidate Certificate button is visible')
cls.partial_fit(X_train, y_train, classes=all_classes)
import salt.utils.cloud import salt.utils.pycrypto as sup import salt.config as config from salt.utils import namespaced_function from salt.exceptions import ( SaltCloudConfigError, SaltCloudNotFound, SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
from salttesting.helpers import ensure_in_syspath
block_structure = BlockStructureModulestoreData(root_block_usage_key=0) for block in blocks: block_structure._add_xblock(block.location, block)
predictions = cross_val_predict(clf, X_sparse, multioutput_y) assert_array_equal(predictions.shape, (150, 2))
if '_dataset' in d: d['_datasets'] = [d['_dataset']] del d['_dataset']
pass
return (user_id, role_id, tenant_id)
timeout = None
python_domain.PythonDomain.indices = []
ROLE = 'beta_testers' def __init__(self, *args, **kwargs): super(CourseBetaTesterRole, self).__init__(self.ROLE, *args, **kwargs)
return ret
PaymentFakeView.PAYMENT_STATUS_RESPONSE = "success"
train_obj = pylearn2.config.yaml_parse.load(final_yaml_str)
return self.fit(X).labels_
gs = GridSearchCV(clf, [{'parameter': [0, 1, 2]}], scoring='accuracy', refit=False, error_score='raise')
monitoring_dataset = DenseDesignMatrix(X=X)
text = text.rstrip('\r\n') self.tokens = [(token_type, text) + token[2:]] self.check_logical()
from __future__ import absolute_import import datetime
from salt.cli.batch import Batch
from salt.modules import deb_postgres
EmptyPromise( lambda: self.q(css='.signatory-panel-delete').present, 'Delete icon is displayed' ).fulfill()
ret = None
self._create_a_timed_exam_and_attempt()
image_pair = tuple(image_pair[0, :, :, :, 0])
assert_array_equal(children_unstructured, children_structured)
np.random.seed(0)
os.remove(filename)
if (self._ip >> 96) != 0x20010000: return None return (IPv4Address((self._ip >> 64) & 0xFFFFFFFF), IPv4Address(~self._ip & 0xFFFFFFFF))
if not settings.FEATURES['ADVANCED_SECURITY']: return False min_days_between_reset = settings.ADVANCED_SECURITY_CONFIG.get( 'MIN_TIME_IN_DAYS_BETWEEN_ALLOWED_RESETS' ) return min_days_between_reset
user_partition_id = self.user_partition.id groups = self.user_partition.groups self.user_partition.scheme.current_group = groups[0]
return settings.FEATURES.get(cls.ENABLE_SEARCH_KEY, False)
API_DATADOG_SAMPLE_RATE = 0.1
response = self._load_dashboard() self.assertContains(response, "credit-eligibility-msg") self.assertContains(response, "purchase-credit-btn")
course_name = re.sub(r"[^\w.-]", '_', course_id.course)
log.debug("children of randomize module (should be only 1): %s", self.child)
resource = {"id": self.resource_id, 'reason': ''} self.check_event_response_by_http_status(test_case['handler'], resource, test_case['status'])
return self.q(css='.page-content-secondary .team-members .team-member').present
import tornado import tornado.gen import tornado.concurrent
if query: url += '?' + query
def __init__(self, partitions, **kwargs): super(StaticPartitionService, self).__init__(**kwargs) self._partitions = partitions @property def course_partitions(self): return self._partitions
rng = np.random.RandomState(0) noise = noise_scale * rng.randn(*X.shape) X_iso2 = iso.transform(X + noise)
]
enc.fit([[0], [1]]) assert_raises(ValueError, enc.transform, [[0], [-1]])
self.factory().fit(X, Y, coef_init=np.zeros((3,)))
return '<mstyle' in self.expr
func_name = inspect.stack()[1][3] names = next(six.itervalues(yaml.load(getattr(self, func_name).__doc__)))
self.backend = backend self.server = server return 'server enabled'
if force: SEMAPHORE_MAP[path].assured_path = True
self.create_credentials_config() self.create_programs_config()
self.q(css="a.forgot-password").click()
import salt.utils import salt.utils.decorators as decorators from salt.utils.odict import OrderedDict
self.track_selection_page.enroll('verified')
ROLE = "support" def __init__(self, *args, **kwargs): super(SupportStaffRole, self).__init__(self.ROLE, *args, **kwargs)
context = self._get_sample_plain_context() context['course_image_url'] = "/location/of/course/image/url" return context
import salt.utils from salt.exceptions import CommandExecutionError from salt.ext.six import string_types
ssh = salt.client.ssh.SSH(opts)
return dict((_instantiate(k, bindings), _instantiate(v, bindings)) for k, v in six.iteritems(proxy))
cfg = __salt__.get('config.option', __opts__)
from salt://map.sls import Samba
self.assertEqual(cert.status, ExampleCertificate.STATUS_ERROR) self.assertIn(self.ERROR_MSG, cert.error_reason)
wiki_courses = self.store.get_courses_for_wiki('999') self.assertIn(
order_history_list = order_history(user, course_org_filter=course_org_filter, org_filter_out_set=org_filter_out_set)
log_likelihood_gradient_dims = \ 0.5 * np.einsum("ijl,ijk->kl", tmp, K_gradient) log_likelihood_gradient = log_likelihood_gradient_dims.sum(-1)
from salt.exceptions import CommandExecutionError import salt.utils
return datetime.now(UTC()) <= self.start
raise NotImplementedError()
from __future__ import absolute_import import json
return AccountLegacyProfileSerializer.convert_empty_to_None(value)
class_priority = ['video', 'problem']
self.assertEqual( self.run_function('xattr.delete', [TEST_FILE, 'patrick']), 'ERROR: Attribute not found: patrick')
return errors
data = {"time": eventtime} data.update(payload)
from __future__ import print_function from __future__ import absolute_import import os
import logging
continue
X = np.asmatrix(X)
role, created = Role.objects.get_or_create(name=name, course_id=course_key) if created is False: role.course_id = course_key role.save() return role
#after = _sed_esc(after, escape_all) limit = _sed_esc(limit, escape_all)
from salt.modules import archive from salt.exceptions import CommandNotFoundError from salt.utils import which_bin
global __FQDN__ grains = {}
self.assertEqual(self.video.speed, '0.50x')
if course_key is not None and mode_slug in CourseMode.VERIFIED_MODES: verification_models.VerificationDeadline.set_deadline(course_key, verification_deadline)
from __future__ import absolute_import
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return browser.execute_script("return typeof(jQuery) == 'undefined' || jQuery.active == 0")
_sparse_kernels = ["linear", "poly", "rbf", "sigmoid", "precomputed"]
self.assertIsNone( CourseEnrollment.enroll_by_email("not_jack@fake.edx.org", course_id) ) self.assert_no_events_were_emitted()
X = [[3, 2], [1, 6]] y = [1, 0] clf = MLPClassifier
kernel = (large_kernel.sum(axis=2))
if answer_id in self.cmap: return self.cmap[answer_id]['correctness'] in ['correct', 'partially-correct'] return None
from cms.djangoapps.contentstore.courseware_index import CourseAboutSearchIndexer CourseAboutSearchIndexer.remove_deleted_items(course_key)
remove_entrance_exam_graders(course_key, request.user)
pass
enable_sig_handler('SIGINFO', _handle_sigusr1)
self.assertEqual(iptables.build_rule(dports=['!80', 443], proto='tcp'), '-p tcp -m multiport ! --dports 80,443')
target_source = self.add_mask_source(self.get_target_space(), 'targets') return target_source
courses = self._get_courses_for_org(org_list) only_courses = options.get("courses")
p = mp.Process(target=train_mlp) p.start()
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
def test_email_flag_false_mongo_true(self): BulkEmailFlag.objects.create(enabled=False) response = self.client.get(self.url) self.assertFalse(self.email_link in response.content)
if self.increasing == 'auto': self.increasing_ = check_increasing(X, y) else: self.increasing_ = self.increasing
cleaned_files = [] with contextlib.closing(zipfile.ZipFile(zip_file, "r")) as zfile: files = zfile.namelist()
kde = KernelDensity(bandwidth, kernel=kernel).fit(X) samp = kde.sample(100) assert_equal(X.shape, samp.shape)
out = salt.utils.fopen(path, 'wb')
requested_format = request.GET.get('_accept', request.META.get('HTTP_ACCEPT', 'text/html'))
self.assertIsNone(SurveyForm.get(self.test_survey_name, throw_if_not_found=False))
self.assertFalse(utils.is_commentable_cohorted(course.id, team.discussion_topic_id)) self.assertTrue(utils.is_commentable_cohorted(course.id, "random"))
enable_sigusr1_handler()
DEBUG = True
win_timezone.__salt__ = {}
headers = super(WeightActs, self).c_headers() headers.append('weight_acts.cuh') return headers
return JsonResponse({"error": "Assignment type must be specified."}, 400)
from __future__ import absolute_import import logging
if csv_type is not None: try: redemption_set = registration_code.registrationcoderedemption_set redeemed_by = redemption_set.get(registration_code=registration_code).redeemed_by course_registration_dict['redeemed_by'] = redeemed_by.email except ObjectDoesNotExist: pass
if not settings.FEATURES.get('MILESTONES_APP', False): return False return bool( get_course_milestones_fulfillment_paths(course_id, {"id": user_id}) )
resp = self.client.get_json(url) course_detail_json = json.loads(resp.content) self.assertEqual(pre_requisite_course_keys, course_detail_json['pre_requisite_courses'])
__virtualname__ = 'lowpkg'
'state_events': bool,
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
save_hashes(hashes, HASH_FILE)
current_cohort = get_cohort(user, course_key) verified_cohort = get_cohort_by_name(course_key, verified_cohort_name)
if salt.utils.is_windows(): from salt.utils.win_functions import get_parent_pid ppid = get_parent_pid() else: ppid = os.getppid()
record = { 'handle': handle, 'description': dmi_raw.pop(0).strip(), 'type': int(htype) }
return total / len(model_output)
assert_array_equal(np.intersect1d(train, test), [])
'user_message': _(u"The ordering {ordering} is not supported").format(ordering=ordering),
docs_train, docs_test, y_train, y_test = train_test_split( dataset.data, dataset.target, test_size=0.25, random_state=None)
X = rng.randint(0, 4, size=(1000, 1)) y = rng.rand(1000) n_trees = 500
if urlparse.urlparse(url_path).netloc: return url_path
tagger.sample_rate = 1 return None
i = len(os.path.commonprefix([start_list, path_list]))
fallback_url = settings.STATIC_URL + settings.DEFAULT_COURSE_ABOUT_IMAGE_URL course_overview = self._assert_image_urls_all_default(modulestore_type, course_image, fallback_url)
import salt.utils import salt.utils.decorators as decorators
raise NotImplementedError
from __future__ import absolute_import import os from os.path import join from shutil import rmtree from tempfile import mkdtemp
from __future__ import absolute_import import logging
import unittest from nose.plugins.attrib import attr
self.payment_and_verification_flow.proceed_to_payment()
self.assertDeserializeEqual(False, 'false') self.assertDeserializeEqual(True, 'true')
COMMENTS_STUB_URL = os.environ.get('comments_url', 'http://localhost:4567')
response = self.assert_request_status_code(400, url, method="POST", data=data) self.assertIn("This invoice is already active.", response.content)
for X in [X_1row, X_1col, X_list_1row, X_list_1row]:
bulk_record = self._get_bulk_ops_record(location.course_key)
f = function([X], output, mode="DEBUG_MODE") f(np.zeros((1, 1)).astype(X.dtype))
if python_shell: cmd = 'chcp 437 > nul & ' + cmd
if __name__ == '__main__': main()
LOGGING_NULL_HANDLER = None break
self.assertEqual( self.run_function('shadow.set_password', [NO_USER, 'P@SSw0rd']), 'ERROR: User not found: {0}'.format(NO_USER))
return dict(map(get_discussion_id_map_entry, get_accessible_discussion_modules(course, user)))
n_classes = 1 labels = labels[1:]
if adjacent: self.leaveWhitespace() self.adjacent = adjacent self.skipWhitespace = True self.joinString = joinString
self.notes_page.wait_for_ajax() note = self.notes_page.notes[1] assert_page(note, self.raw_note_list[2]['usage_id'], "Location in Course")
salt.utils.atomicfile.atomic_open( os.path.join(hn_dir, OUT_P), 'w+b' )
pipeline.items.append(preprocessing.GlobalContrastNormalization( sqrt_bias=10., use_std=True))
self.assertEquals(course.entrance_exam_minimum_score_pct, .5)
return parse(out)
from __future__ import absolute_import import re
response = requests.post(self.url) self.assertEqual(response.status_code, 400)
temp_all_words = self.all_words
@receiver(pre_delete, sender=CohortMembership)
mask = str(mask).upper()
log = logging.getLogger(__name__)
response = self._generate()
return launchctl('list', return_stdout=True, output_loglevel='trace', runas=runas)
self._do_create_preferences_test(True)
import hashlib import random
self.course.edxnotes = False self.assertEqual("original_get_html", self.problem.get_html())
settings.STATICFILES_DIRS.append( (u'themes/{}'.format(settings.THEME_NAME), theme_root / 'static') )
incxml = etree.XML(ifp.read())
from __future__ import absolute_import
course = get_dummy_course('2012-12-02T12:00') self.assertEqual('', course.end_datetime_text("DATE_TIME"))
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
develop.run(self)
return self.system.render_template('module-error.html', { 'staff_access': False, 'data': "", 'error': "", })
clustering = AgglomerativeClustering( n_clusters=10, connectivity=connectivity.toarray(), affinity="manhattan", linkage="ward") assert_raises(ValueError, clustering.fit, X)
course_keys = CourseOverview.get_all_course_keys() for expected_course_key in courses: self.assertNotIn(expected_course_key, course_keys)
self.assertEquals(self.draft_store.get_all_asset_metadata(course.id, 'asset'), [])
if mod_loc.name not in name: return False
locked_toc = self._return_table_of_contents() for toc_section in self.expected_locked_toc: self.assertIn(toc_section, locked_toc)
t = datetime.datetime.utcnow()
mod.myfunc(1, 2, "three")
self._verify_editable(self._get_course_details_response(True))
_mock_counts.return_value = {'total': 0} call_task('pavelib.quality.run_safelint')
mount.__grains__ = {} mount.__salt__ = {} mount.__context__ = {}
return self.q(css='.sidebar').present
if hasattr(mod, 'run'): mod.run()
try: import pymongo HAS_MONGODB = True except ImportError: HAS_MONGODB = False
elif response.status_code != 200 or not success: if response.status_code == 200: response.status_code = 400 response.content = msg
return "start_date"
with self.assertRaises(AssertionError): Cudnn2D(filters=self.filters, batch_size=-1, input_space=self.input_space)
'log_datefmt': str,
self.track_selection_page.enroll('verified')
n_splits = int(n_features / block_size) X2 = X ** 2 emp_cov_trace = np.sum(X2, axis=0) / n_samples mu = np.sum(emp_cov_trace) / n_features
required_boto3_version = '1.2.1'
ssh_gateway_password: ExamplePasswordHere
walk_l = list(_depth_limited_walk(name, max_depth)) walk_d = {} for i in walk_l: walk_d[i[0]] = (i[1], i[2])
from __future__ import absolute_import
self.assertNotEqual(id(boto_ec2_conn), id(boto3_ec2_conn))
return [x for sub in seq for x in sub]
rel_indent[row] = expand_indent(line) - indent_level
try: WindowsError except NameError: WindowsError = None
if store.has_course(destination_course_key, ignore_case=True): raise DuplicateCourseError(source_course_key, destination_course_key)
clf = QuadraticDiscriminantAnalysis().fit(X6, y6) assert_true(not hasattr(clf, 'covariances_'))
self.stub_api() self.auth() self.listing_page.visit() self.assertTrue(self.listing_page.is_sidebar_present) self.assertTrue(self.listing_page.are_cards_present)
self.testing_course.enrollment_start = self.tomorrow self.testing_course.enrollment_end = self.nextday self.testing_course = self.update_course(self.testing_course, self.user.id)
import salt.utils import salt.utils.decorators as decorators
with self.assertRaises(UnsupportedRevisionError): self.store.has_item(self.fake_location, revision=ModuleStoreEnum.RevisionOption.draft_preferred)
_kwargs.update(string_kwarg)
present = _if_str_then_list(present) checks[None] = present boolean = _if_str_then_list(boolean) checks[bool] = boolean
class Meta(object): app_label = "courseware" unique_together = (('student', 'field_name'),) student = models.ForeignKey(User, db_index=True)
private_ips = [] public_ips = []
if 'add_{0}'.format(instance) not in vmconfig['changed']: vmconfig['changed']['add_{0}'.format(instance)] = []
FINANCIAL_ASSISTANCE_MIN_LENGTH = 800 FINANCIAL_ASSISTANCE_MAX_LENGTH = 2500
assert_allclose(np.cov(preprocessed_X.transpose(), bias=1), identity, rtol=1e-4, atol=1e-4)
y_true, y_pred, _ = make_prediction(binary=True)
self.aes = self._layers
raise NotImplementedError
import salt.loader import salt.utils.process
if _TRAFFICLINE: cmd = _traffic_line('-U') else: cmd = _traffic_ctl('server', 'start')
srcinfo.append(__salt__['cp.cache_file'](pkg_src, saltenv))
self.initiate_rerun()
import integration
import salt.utils.pycrypto from salt.exceptions import SaltInvocationError
return function([], T.cast(T.argmax(self.estimated_rewards), 'int32'))
rng = self.mlp.rng if self.irange is None: raise ValueError("Recurrent layer requires an irange value in " "order to initialize its weight matrices")
import os
self.set_date('release_date', "#start_date", date)
predicted = cross_val_predict(lr, boston.data, y, cv=10)
non_outliers = linear_loss[~outliers_mask] weighted_non_outliers = sample_weight[~outliers_mask] * non_outliers weighted_loss = np.dot(weighted_non_outliers.T, non_outliers) squared_loss = weighted_loss / sigma
monitor = lm.LiveMonitor() monitor.update_channels(['train_objective'], start=1, end=2) assert(len(monitor.channels['train_objective'].val_record) == 1)
pos_switch = pos_label == 0 if pos_switch: pos_label = -neg_label
destroy(vm_['name'])
log.debug( 'The \'{0}\' cloud driver defined under \'{1}\' provider ' 'alias is unable to get the locations information'.format( driver, alias ) ) continue
self.assertEqual(self.course_info_page.num_updates, 1)
return psutil.TOTAL_PHYMEM
raise CertificateError( "too many wildcards in certificate DNS name: " + repr(dn))
if USERA in user_list: self.run_function('user.delete', [USERA], remove=True) #need to exit cherypy engine cherrypy.engine.exit()
SEARCH_ENGINE = None ELASTIC_FIELD_MAPPINGS = { "start_date": { "type": "date" } }
assert self.get_dbm() is None self.dbm = dbm
if 'user_id' in context and 'course_id' in context: message_body = substitute_keywords_with_data(message_body, context)
for block in blocks: if blocks[block]['block_type'] == 'sequential': block_format = blocks[block]['format'] if block_format not in assignments: assignments[block_format] = OrderedDict() assignments[block_format][block] = list()
import salt.utils
return _ENROLLMENTS
AssetBaseUrlConfig.objects.create(enabled=True, base_url='fakecdn.edx.org') expected_cdn_url = "//fakecdn.edx.org"
with patch('capa.capa_problem.LoncapaProblem.rescore_existing_answers') as mock_rescore: mock_rescore.side_effect = exception_class(u'test error \u03a9') result = module.rescore_problem()
__virtualname__ = 'pkg'
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
if role_arn is None: access_key_id, secret_access_key, token = creds(prov_dict) else: access_key_id, secret_access_key, token = assumed_creds(prov_dict, role_arn, location=location)
vim-enhanced: pkg.installed: - version: 7.4.160-1.el7 - ignore_epoch: True
assert_almost_equal(np.abs(np.dot(d1[:2], [1, 0])), 1.0)
subset_idxs = sample_without_replacement(n_samples, min_samples, random_state=random_state) X_subset = X[subset_idxs] y_subset = y[subset_idxs]
raise CommandExecutionError( 'Unterminated marked block. End of file reached before marker_end.' )
tmp *= 1 - damping R *= damping R += tmp
config.floatX = self.prev_floatX
wrapped = obj.__wrapped__
import salt.utils
def __enter__(self): return self
scores = cross_val_score(MultinomialNB(alpha=10), X, y, cv=10) assert_greater(scores.mean(), 0.86)
if existing['code'] == 200:
other_user = UserFactory() self.assertFalse(ApiAccessRequest.has_api_access(other_user))
try: groupSID, domainName, objectType = win32security.LookupAccountName(None, group) except pywinerror: err += 'Group does not exist\n'
gmm.fit(X)
import salt.utils.event from salt.ext import six
payload = json.dumps({ 'children': None, 'data': handouts_html, 'id': self._handouts_loc, 'metadata': dict(), })
with super(ForumEventTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
_win(kernel32.WaitForSingleObject, DWORD_IDV,
ipca = IncrementalPCA(n_components=2, batch_size=10).fit(X) Y = ipca.transform(X) Y_inverse = ipca.inverse_transform(Y) assert_almost_equal(X, Y_inverse, decimal=3)
n_samples = 10000 n_features = 100 n_queries = 30 rng = np.random.RandomState(42)
from salt.utils.odict import OrderedDict from salt.ext.six.moves import range from salt.ext import six
super(CeleryConfigTest, self).setUp() self.client = Client() self.ping_url = reverse('status.service.celery.ping')
action_name = ugettext_noop('generated') task_fn = partial(upload_problem_responses_csv, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
VerificationStatus.add_status_from_checkpoints( checkpoints=[self.first_checkpoint], user=user, status=status )
assert sls_obj['foo'].__str__() == '"bar"' assert sls_obj['foo'].__repr__() == '"bar"'
epoch_num = 15 termination_criterion = EpochCounter(epoch_num)
__virtualname__ = 'locale'
log = logging.getLogger(__name__)
node = mock.Mock(due=None, extended_due=1) self.assertEqual(self.call_fut(node), None)
import integration import salt.utils
status_by_req = defaultdict(lambda: False) for status in CreditRequirementStatus.get_statuses(requirements, username): status_by_req[status.requirement.id] = status.status
return hashlib.md5(settings.PROFILE_IMAGE_SECRET_KEY + username).hexdigest()
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salt.ext.six.moves import range
Xs = []
for label, clf_err in error_rate.items(): xs, ys = zip(*clf_err) plt.plot(xs, ys, label=label)
assert_array_equal(X_r, iris.data)
with mock_create_refund(status=200, response=[1, 2, 3]): self.send_signal() self.assertTrue(mock_send_notification.called) self.assertTrue(mock_log_warning.called)
raise ItemNotFoundError(library_id)
scorer = make_scorer(fbeta_score, beta=2) score1 = scorer(clf, X_test, y_test) score2 = fbeta_score(y_test, clf.predict(X_test), beta=2) assert_almost_equal(score1, score2)
mean_square_grad = sharedX(param.get_value() * 0.) mean_square_dx = sharedX(param.get_value() * 0.)
component_types = COMPONENT_TYPES[:]
return middleware.RequestCache.get_current_request()
munin.__salt__ = {}
if template not in salt.utils.templates.TEMPLATE_REGISTRY: raise CommandExecutionError( 'Attempted to render file paths with unavailable engine ' '{0}'.format(template) )
raise NotImplementedError(str(type(self))+" does not implement setup.")
cm = confusion_matrix(y_true, y_pred, labels=[2, 1]) assert_array_equal(cm, [[18, 2], [24, 3]])
repos = tuple( x for x, y in six.iteritems(list_repos()) if str(y.get('enabled', '1')) == '1' )
self.presence_events = True
break
service = _get_service(name) path = service['file_path']
cid = cid if cid > 0 else self._id return reverse_course_url( 'certificates.certificates_detail_handler', self.course.id, kwargs={'certificate_id': cid}, )
i18n_service = self.runtime.service(descriptor, 'i18n') self.assertIsNotNone(i18n_service) self.assertIsInstance(i18n_service, ModuleI18nService) return i18n_service
figure_list = []
if view_html: fragment.add_content(view_html) return fragment
self.mock_tracker.reset_mock() try: views.server_track(request, str(sentinel.event_type), '{}')
return redirect(request.GET.get('next', 'dashboard'))
return courseware.views.views.courses(request)
mako_middleware_process_request(self.request)
for xblock in all_blocks: for __, field in xblock.fields.iteritems(): if field.is_set_on(xblock): __ = field.read_from(xblock)
if role is not None: role().add_users(user)
if location.category in DIRECT_ONLY_CATEGORIES: return location return location.replace(revision=MongoRevisionKey.draft)
patcher = mock.patch('terrain.stubs.xqueue.Timer') timer = patcher.start() timer.side_effect = FakeTimer self.addCleanup(patcher.stop)
self.assertTrue(is_survey_required_for_course(self.course))
if problemtree in self.responders: overall_msg = self.correct_map.get_overall_message() return self.responders[problemtree].render_html( self._extract_html, response_msg=overall_msg )
score[pred_or_true == 0.0] = 1.0
response = self.session.post( url, data=self._encode_post_dict(self._advanced_settings), headers=self.headers, )
settings.STATICFILES_DIRS.append( (u'themes/{}'.format(settings.THEME_NAME), theme_root / 'static') )
pass
super(TestVertSplitTestVert, self).setUp()
import salt.utils
assert_raises(ValueError, next, StratifiedShuffleSplit(train_size=2).split(X, y)) assert_raises(ValueError, next, StratifiedShuffleSplit(test_size=2).split(X, y))
EmptyPromise( lambda: self.outline_page.is_browser_on_page(), "loaded page {!r}".format(self.outline_page), timeout=30 ).fulfill()
pkgs = [x for x in targets if x not in list_pkgs()] if not pkgs: return {}
exc_info_on_loglevel=logging.DEBUG
for k in self.file_mapping: if mod_name in k: yield k
raise ValueError( 'Second argument should be a filename, %s (type %s) was given' % (filename, type(filename)) )
return sorted(get_editable_fields(obj, self.context))
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.__init__(**state)
from __future__ import absolute_import import sys import re
from __future__ import absolute_import import logging import os import os.path from copy import deepcopy import json
if '/' == asset_key_string[0]: asset_key_string = asset_key_string[1:] asset_key = AssetKey.from_string(asset_key_string) try: delete_asset(course_key, asset_key) except AssetNotFoundException: pass
self._subcluster_norms = row_norms( self.subcluster_centers_, squared=True)
return _absolute_url(is_secure, url_path)
return self._section_scores(chapter_index, section_index)
'ENABLE_PAID_COURSE_REGISTRATION': False,
mcc = assert_warns_message(RuntimeWarning, 'invalid value encountered', matthews_corrcoef, [0, 0, 0, 0], [0, 0, 0, 0])
self._test_visible_to_students(False, 'private_unreleased', self.future)
import salt.ext.six as six from salt.ext.six.moves import range
high, ext_errors = self.state.reconcile_extend(high) errors += ext_errors
self.custom_fields = kwargs.pop('custom_fields', [])
return copy.copy(self.rng)
response = requests.Response() response.status_code = 400 return response
self.advanced_settings.visit() self.advanced_settings.set_values({"Advanced Module List": json.dumps(block_types)})
dir_name.rmtree_p() dir_name.mkdir_p()
self.set_group_access(self.chapter_location, {self.animal_partition.id: [self.dog_group.id]}) self.check_access(self.red_cat, self.vertical_location, False)
restart_django_servers()
with patch('mongodb_proxy.MongoProxy') as mock_proxy: mock_proxy.return_value.alive.return_value = False useless_conn = MongoConnection('useless', 'useless', 'useless')
cmd = 'emerge-webrsync -q' if salt.utils.which('emerge-delta-webrsync'): cmd = 'emerge-delta-webrsync -q' return __salt__['cmd.retcode'](cmd, python_shell=False) == 0
self.assertIn( 'Invalid String Value for Enabled', self.run_function('system.set_disable_keyboard_on_lock', ['spongebob']))
query = self.q(css=self._bounded_selector('.copy-error')) if query.visible: return query.text[0] return ''
return False
other_args = {'anion': 'hydroxide', 'cation': 'ammonium'} _validate_ret(parallels._normalize_args(other_args))
if ttype == 'zeromq': import salt.transport.zeromq return salt.transport.zeromq.AsyncZeroMQPubChannel(opts, **kwargs)
from __future__ import absolute_import
parent_element.remove(solution_element)
with open(report_file) as f: violations_list = f.readlines() num_lines = len(violations_list) return num_lines, violations_list
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
return location.replace(revision=MongoRevisionKey.published)
import logging
del results[-1] max_exceeded = True
iterator = SequentialSubsetIterator(10, 3, 4) for i in range(4): iterator.next()
response = self.client.get(self._get_url(self.course_key, "invalid_checkpoint")) self.assertEqual(response.status_code, 404)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if self.max_attempts is not None and self.attempts >= self.max_attempts: return True if self.is_past_due(): return True return False
names = F.readline().strip().split(',')
return OverrideFieldData.wrap(TESTUSER, self.course, DictFieldData({ 'foo': 'bar', 'bees': 'knees', }))
return self.find_css('.actions .delete').present
import tornado import tornado.tcpserver import tornado.gen import tornado.concurrent import tornado.tcpclient import tornado.netutil
expected = digits.target[n_samples / 2:] predicted = classifier.predict(data[n_samples / 2:])
if did_validate: updated_data = cls.update_from_dict(key_values, descriptor, user, save=False)
with warnings.catch_warnings(record=True): estimator_1 = Estimator() estimator_2 = Estimator() set_testing_parameters(estimator_1) set_testing_parameters(estimator_2) set_random_state(estimator_1) set_random_state(estimator_2)
if self.signal_handler: self.signal_handler.send("item_deleted", usage_key=usage_key, user_id=user_id)
raise CommandExecutionError( 'Error {0}: {1}'.format(exc.response.status_code, exc.explanation) )
from salt.modules import djangomod
xpath = "//span[contains(@class,'selected')]/p/b" self.assert_has_text(xml, xpath, 'HTML 2', exact=False)
__virtualname__ = 'influxdb'
ioloop.install()
shutil.rmtree(self._output_dir, ignore_errors=True)
myrole: boto_iam_role.present: - profile: myiamprofile
cert = GeneratedCertificate.eligible_certificates.get(user=self.student, course_id=self.course.id) self.assertEqual(cert.status, CertificateStatuses.downloadable)
if country not in cls.ALL_COUNTRIES: return True
self.course.advanced_modules = ["notes"] self.assertFalse(self.has_notes_tab(self.course, self.user))
allow_user = user.is_active or user.is_anonymous() return allow_user and self.config.checkout_on_ecommerce_service
result = jboss7.datasource_exists(name='appDS', jboss_config={}, datasource_properties=datasource_properties, profile=None)
objects = UserProfile.objects course_key = CourseKey.from_string(course_id) students = objects.filter(user__courseenrollment__course_id=course_key, user__courseenrollment__is_active=True) return students
PREVIEW_VIEWS = [STUDENT_VIEW, AUTHOR_VIEW]
validator_data["storage"] = storage validator_data["filename"] = filename verify_file_presence(True)
store = self._verify_modulestore_support(None, 'create_course') course = store.create_course(org, course, run, user_id, **kwargs)
W[0, 1] = .5 W[0, 2] = 1. W[0, 3] = 2.
unicode_text = "好 各位同学".decode('utf-8') self.assertTrue(self.video.downloaded_transcript_contains_text('srt', unicode_text))
self.assertTrue( self.run_function('softwareupdate.schedule_enable', [False])) self.assertFalse(self.run_function('softwareupdate.schedule_enabled'))
xblocks = self._get_nested_xblocks(self) if category: xblocks = [x for x in xblocks if x.category == category] return xblocks
return xblock._edit_info.get('published_date')
return state
ret[pkg] = {'old': oldstate, 'new': state} return ret
'-oStrictHostKeyChecking={0}'.format(host_key_checking), '-oUserKnownHostsFile={0}'.format(known_hosts_file), '-oControlPath=none'
total_mu = (n_new * new_mu + n_past * mu) / n_total
if content.get('group_id') is not None: content['group_name'] = get_cohort_by_id(course_key, content.get('group_id')).name
return self.q(css=self.prefix + " .signatory-details-list, .signatory-edit-list").present
for student in students[:3]: CertificateWhitelistFactory.create( user=student, course_id=self.course.id, whitelist=True )
elif existing['code'] == 404: response = __salt__['bigip.create_node'](hostname, username, password, name, address)
if key is None: continue
'ALWAYS_REDIRECT_HOMEPAGE_TO_DASHBOARD_FOR_AUTHENTICATED_USER': True,
self.exp_dirichlet_component_ = np.exp( _dirichlet_expectation_2d(self.components_))
norb_train = FoveatedNORB(which_set="train", scale=1, restrict_instances=[4, 6, 7, 8])
cache.clear()
resp = self.client.get_html(self.url) self.assertEqual(resp.status_code, 200) self.assertIn('course-nav-list', resp.content)
topics = self.setup_topics(teams_per_topic=0) self.assert_serializer_output(topics, num_teams_per_topic=0, num_queries=1)
return {key: getattr(self, key) for key in self.FEATURES}
self.verify_lists_expected_cohorts([])
self.category = category self.display_name = display_name self.data = data self.metadata = metadata self.grader_type = grader_type self.publish = publish self.children = [] self.locator = None self.fields = kwargs
suggested_prices = models.CommaSeparatedIntegerField(max_length=255, blank=True, default='')
schedule_keys = set(data.keys())
t_start = datetime.now() clf.fit(X) delta = (datetime.now() - t_start) time_to_fit = compute_time(t_start, delta)
response_dict = json.loads(response.read())
f = lambda *args: 0 assert_raises(ValueError, make_scorer, f, needs_threshold=True, needs_proba=True)
if hasattr(instance, '_changed_fields'): del instance._changed_fields
socket.setdefaulttimeout(10)
self.import_page.upload_tarball('funny_cat_video.mp4') self.import_page.wait_for_filename_error()
ret = self.run_state( 'file.directory', name=tmp_dir, follow_symlinks=False, user=user, group=group, recurse=['user', 'group'] ) self.assertSaltTrueReturn(ret)
sys_doc_load = self.valid_clear_load sys_doc_load['fun'] = 'sys.doc' self.clear.publish(sys_doc_load)
import logging
self.mock_block.service_declaration.return_value = None with self.assertRaises(NoSuchServiceError): self.runtime.service(self.mock_block, 'i18n')
emp_cov = EmpiricalCovariance().fit(X)
cls.cache_regex = salt.utils.cache.CacheRegex(prepend='^')
embargoed_countries = models.TextField( blank=True, help_text="A comma-separated list of country codes that fall under U.S. embargo restrictions" )
warnings.filterwarnings( 'ignore', '^Module backports was already imported from (.*), but (.*) is being added to sys.path$', UserWarning )
block_type = 'vertical' for idx in xrange(0, 8): block_id = _make_block_id(block_type, idx) self.all_verticals.append((block_type, block_id))
text_document = self._white_spaces.sub(" ", text_document)
'rule': Rules.python_interpolate_html
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
assert_true(sp.issparse(X1)) assert_true(sp.issparse(Y1)) assert_equal(60915113, X1.data.size) assert_equal(2606875, Y1.data.size)
self.skipTest('Unable to get the SHELL environment variable')
db = DBSCAN(eps=0.3, min_samples=10).fit(X) core_samples_mask = np.zeros_like(db.labels_, dtype=bool) core_samples_mask[db.core_sample_indices_] = True labels = db.labels_
if self.optimizer == 'Welch' and self.theta0.size == 1: self.optimizer = 'fmin_cobyla'
result = self.service.delete_student_attempt( self.student.username, unicode(self.course.id), self.other_problem_urlname, requesting_user=self.student, ) self.assertIsNone(result)
import salt.transport.client
import logging
REQUEST_CONTEXT.request = None return response
if category == "static_tab": dog_stats_api.increment( DEPRECATION_VSCOMPAT_EVENT, tags=( "location:xml_load_extra_content_static_tab", u"course_dir:{}".format(course_dir), ) )
chef.__grains__ = {} chef.__salt__ = {} chef.__context__ = {}
log = logging.getLogger(__name__)
"median_absolute_error",
n_samples = 12 n_features = 2 n_estimators = 5 rng = np.random.RandomState(42) X = rng.rand(n_samples, n_features)
MESSAGE = _('git clone or pull failed!')
self.duration_sec = 'unknown'
except (TypeError, ValueError, InvalidTabsException) as err: return HttpResponseBadRequest( django.utils.html.escape(err.message), content_type="text/plain" )
import logging import sys import glob import yaml import jinja2 import re from os.path import isfile, join
self.assertTrue(self._has_changes(draft_xblock.location))
from salt.states import grafana_datasource
return datetime.now(UTC()) > self.start
dataset = datasets.load_iris()
results.append({ 'identifier': identifier, 'error': error, 'userDoesNotExist': user_does_not_exist })
add_component(self.lib_page, "html", "Text") self.assertEqual(len(self.lib_page.xblocks), 1) first_block_id = self.lib_page.xblocks[0].locator
if items_for_task: yield items_for_task num_items_queued += len(items_for_task)
for enabled in cls._enabled_providers(): if enabled.is_active_for_pipeline(running_pipeline): return enabled
pass
BULK_EMAIL_DEFAULT_FROM_EMAIL = 'no-reply@example.com'
__virtualname__ = 'mongodb_user'
h = .02
from __future__ import absolute_import import json import logging
assert_raises(ValueError, cval.StratifiedShuffleSplit, y, 3, 2) assert_raises(ValueError, cval.StratifiedShuffleSplit, y, 3, 3, 2)
for current_value in current_values: permissions = str() for permission_name in _PERMISSION_TYPES: if current_value['vdata'] == _PERMISSION_TYPES[permission_name]: permissions = permission_name break ret[current_value['vname']] = permissions
log = logging.getLogger(__name__)
n_components = init.shape[1] if n_samples != init.shape[0]: raise ValueError("init matrix should be of shape (%d, %d)" % (n_samples, n_components)) X = init
assert_raises(ValueError, cval.KFold, 2.5, 2)
pipeline.items.append(preprocessing.ZCA())
assert_equal(lshf._fit_X.shape[0], n_samples + n_samples_partial_fit) assert_equal(len(lshf.original_indices_[0]), n_samples + n_samples_partial_fit) assert_equal(len(lshf.trees_[1]), n_samples + n_samples_partial_fit)
loaded_mods = list(set(loaded_mods) & set(persist_mods))
if is_library: role_hierarchy = (CourseInstructorRole, CourseStaffRole, LibraryUserRole) else: role_hierarchy = (CourseInstructorRole, CourseStaffRole)
endpoint: myendpoint.example.com:1138/services/Cloud
from __future__ import absolute_import import logging
values = set(values.split(',')) if values else set()
e = salt.utils.event.get_event('minion', sock_dir=self.minion_opts['sock_dir'], opts=self.minion_opts)
'enrollment',
from __future__ import absolute_import import os
from __future__ import absolute_import
if isinstance(space, VectorSpace) and space.sparse: del kwargs["batch_size"]
self.assertEqual(len(response.redirect_chain), 1) self.assertIn(302, response.redirect_chain[0]) self.assertEqual(len(outbox), outbox_count) if send_email:
self.create_programs_config() mock_init.side_effect = Exception actual = utils.get_programs(self.user) self.assertEqual(actual, []) self.assertTrue(mock_init.called)
self.check_event_response_by_key('handle_vote', resource, 'newVotes', test_case['new_votes'])
subject = render_to_string(subject_template, param_dict) message = render_to_string(message_template, param_dict) return subject, message
from copy import deepcopy import logging import os import hashlib
proc.wait()
nav_dict[sec_title] = self._subsection_titles(sec_index + 1)
assert sreq.send_auto({'load': 'foo'}) == {'load': 'foo', 'enc': 'clear'}
with self.assertRaises(exceptions.TemplateRuntimeError): env.from_string('{{ document|load_json }}').render(document={"foo": "it works"})
import salt.ext.six as six
with check_mongo_calls_range(max_finds=4, max_sends=2): self._update_partitions(reload_items=False)
with patch('capa.capa_problem.LoncapaProblem.grade_answers') as mock_grade: error_msg = u"Superterrible error happened: ☠" mock_grade.side_effect = Exception(error_msg)
return (self._version, self.network_address, self.netmask)
H, W = img_shape Hs, Ws = tile_spacing
CREDIT_NOTIFICATION_CACHE_TIMEOUT = 5 * 60 * 60
old_center_buffer = np.zeros(n_features, np.double)
course.cohort_config = {'cohorted': False} self.assertFalse(course.is_cohorted)
return
self._ddog_histogram(evt_time, 'set_many.fields_in', len(state))
import re import logging
self.edit_info = EditInfo(**block_data.get('edit_info', {}))
selector = '{} .acid-parent-block {} .pass'.format(self.context_selector, test_selector) return bool(self.q(css=selector).execute(try_interval=0.1, timeout=3))
if isinstance(opts['master'], list): conn = False local_masters = copy.copy(opts['master']) last_exc = None
'msg': '', 'value': '3', 'params': params, 'display_file': display_file, 'display_class': display_class, 'problem_state': problem_state,
if not badges_enabled(): return return function(*args, **kwargs)
if keysize < 2048: keysize = 2048 tdir = tempfile.mkdtemp()
if isinstance(instances, str) or isinstance(instances, six.text_type): instances = [instances] conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)
if isinstance(block, XModuleDescriptor):
c=self.cols, tabsize=self.tabsize, m=self.mode, payload=self.payload, ln=self.linenumbers)
UNICODE_CHAR_CODES = (range(30) + [127] + [129, 500, 2 ** 8 - 1, 2 ** 8 + 1, 2 ** 16 - 1])
if save_definition: task_definition.RegistrationInfo.Author = 'Salt Minion' task_definition.RegistrationInfo.Source = "Salt Minion Daemon"
if load['jid'] == 'req': load['jid'] = prep_jid(nocache=load.get('nocache', False))
my_etcd_config: etcd.host: 127.0.0.1 etcd.port: 4001
from __future__ import absolute_import import logging
X, y = datasets.make_classification(n_samples=2000, n_features=10, n_informative=3, n_redundant=0, n_repeated=0, shuffle=False, random_state=1)
from salt.modules import zpool
import salt.config import salt.loader from salt.modules import boto_elasticsearch_domain
if not addresses: addresses = dict() _LOG.debug('Empty %s specified.', setting)
if link_map[name] is not None: return reverse(link_map[name])
self.certificates_section.click_generate_certificate_exceptions_button() self.certificates_section.wait_for_ajax()
return self.get_text('.message-status.error')
log.trace('Trying pysss.getgrouplist for \'{0}\''.format(user)) try:
redirect_url = "{login_url}?next={original_url}".format( login_url=reverse("signin_user"), original_url=url, ) self.assertRedirects(response, redirect_url)
from __future__ import absolute_import import logging
assert_true(X_scaled is not X)
if not m_data: return
import json
self.repo.git.tag('-d', ref.name[10:])
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
def __init__(self, detail): if isinstance(detail, dict): self.detail = detail else: super(_DictAPIException, self).__init__(detail)
self.url = reverse('dashboard') self.site_lang = settings.LANGUAGE_CODE
if extracted: self.users.add(*extracted) for user in self.users.all(): CohortMembership.objects.create( user=user, course_user_group=self, )
html_static_path = ['images']
array_val = request.POST.getlist(key) answers[key] = request.POST[key] if len(array_val) == 0 else ','.join(array_val)
if not should_grade_section: should_grade_section = any( descriptor.location.to_deprecated_string() in submissions_scores for descriptor in section['xmoduledescriptors'] )
assert_true(X_scaled is not X) assert_true(X_csr_scaled is not X_csr)
required_content = milestones_helpers.get_required_content(course, user)
if deploy_d_from_conf_file not in deploy_scripts_search_paths: deploy_scripts_search_paths.append( (deploy_d_from_conf_file, True) ) if deploy_d_from_syspaths not in deploy_scripts_search_paths: deploy_scripts_search_paths.append( (deploy_d_from_syspaths, True) )
if settings.FEATURES.get("ENABLE_LTI_PROVIDER"): urlpatterns += ( url(r'^lti_provider/', include('lti_provider.urls')), )
cohort = cohorts.get_cohort_by_id(course_key, int(cohort_id))
self.q(css='input.check').first.click() self.wait_for_ajax()
if self.pendings: self.pendings += bytes_ bytes_ = self.pendings
pass
import salt.utils import salt.modules.selinux from salt.exceptions import CommandExecutionError, FileLockError, MinionError
return start(name)
user = User.objects.get(email=self.enrolled_student.email) self.assertFalse(CourseEnrollment.is_enrolled(user, self.course.id))
'SHOW_LANGUAGE_SELECTOR': False,
'syndic_jid_forward_cache_hwm': int,
self.assertFalse(self.video.is_spinner_shown)
X = check_array(X, accept_sparse='csr') check_non_negative(X, whom) return X
plaintext_msg = course_email_template.render_plaintext(course_email.text_message, email_context) html_msg = course_email_template.render_htmltext(course_email.html_message, email_context)
assert_raises(ValueError, precision_recall_fscore_support, y_true, y_pred, pos_label=2, average='macro')
if not data.startswith(self.PICKLE_PAD): return {} load = self.serial.loads(data[len(self.PICKLE_PAD):], raw=raw) return load
self.publish_unit_and_verify_groups_in_lms(courseware_page, [u'Group A', u'Group B'])
random_state = np.random.RandomState(0) X = np.c_[X, random_state.randn(n_samples, 200 * n_features)]
p_idx = rng.randint(num_p)
db_table = 'django_comment_client_role'
return JsonResponse( CourseDetails.update_from_json(course_key, request.json, request.user), encoder=CourseSettingsEncoder )
try:
payload = json.loads(response.content) thread = extract_thread(payload) if extract_thread else payload self._assert_thread_contains_group_info(thread)
from __future__ import absolute_import
from salt.modules import win_service
try: atomic_replace(temp_filename,local_dst) except Exception as e: raise IOError("[ac] %s %s --> %s" % (str(e),temp_filename,local_dst))
return self.assertCleanError(ipaddress.NetmaskValueError, details, *args)
return None
salt '*' vsphere.service_start my.esxi.host root bad-password 'ntpd'
path = self.path(name) return FileSystemStorage(path).open(path, mode)
if is_jail(name): return '{0} already exists'.format(name)
import salt.utils import salt.utils.dictupdate from salt.defaults import DEFAULT_TARGET_DELIM from salt.exceptions import SaltException
pass
self.browser.execute_script(script) time.sleep(DELAY) self.wait_for_ajax()
return fnd
attach_file(filename, sub_path) modal_css = 'div.wrapper-modal-window-assetupload' button_css = '{} .action-upload'.format(modal_css) world.css_click(button_css)
from salttesting import TestCase, skipIf from salttesting.helpers import ( ensure_in_syspath, requires_network, skip_if_binaries_missing ) ensure_in_syspath('../..')
from __future__ import absolute_import import os
pythoncom.CoInitialize()
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
ir = IsotonicRegression(increasing='auto', out_of_bounds="xyz")
component.display_name = 'Changed' self.store.update_item(component, edit_user) updated_component = self.store.get_item(component.location)
if not hasattr(request, '_xblock_token'): request._xblock_token = uuid.uuid1().get_hex()
assert max(pd.max(), hd.max()) < .17
regex = r'^\d+'
if mode_slug is None: mode_slug = self.course_mode.mode_slug course_reg_code = CourseRegistrationCode( code=self.reg_code, course_id=course_key, created_by=self.user, mode_slug=mode_slug, is_valid=is_valid ) course_reg_code.save()
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
task_input = {'statuses_to_regenerate': [CertificateStatuses.deleted, CertificateStatuses.generating]}
if ret['retcode'] > 1: del ret['stdout'] return ret elif not ret['retcode']: return data
return X, y
from salt.utils import build_whitespace_split_regex
HAS_RESOURCE = False
n_classes = 4 n_samples = 100
salt.utils.daemonize()
if kwargs: payload_kwargs['kwargs'] = kwargs
from __future__ import absolute_import import copy import logging import re import os import time import datetime
self.assertIsNone(self.service.get_credit_state(self.user.id, self.course.id))
self.install_collection = win32com.client.Dispatch('Microsoft.Update.UpdateColl')
return self.q(css="#prereq").visible
assert_false(hasattr(BaggingClassifier(base).fit(X, y), 'decision_function'))
return pprint.pformat((args, kwargs)).decode()
if minimum_grade_credit is not None: minimum_grade_credit = minimum_grade_credit
pass
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
CREDIT_PROVIDER_TIMESTAMP_EXPIRATION = 15 * 60
apply_sdb(opts)
clf = self.factory(alpha=0.1, n_iter=1000, fit_intercept=False) clf.fit(X, Y, sample_weight=np.arange(7))
return self.ebm.free_energy(X)
response = self.client.get(self.url) self.assertRedirects(response, reverse('api_admin:api-request'))
linkedin = 'LinkedIn' facebook = 'Facebook' twitter = 'Twitter'
cmd = list2cmdline(['wmic', 'os', 'get', 'lastbootuptime']) outs = __salt__['cmd.run'](cmd)
SignalHandler.course_published.connect(listen_for_course_publish)
log = logging.getLogger(__name__)
if key.scope not in self.VALID_SCOPES: return False
setattr(_MovedItems, move.name, move)
HAS_LIBS = False try: import dns.query import dns.update import dns.tsigkeyring HAS_LIBS = True except ImportError: HAS_LIBS = False
return self._num_batches
try: post_dict = urlparse.parse_qs(contents, keep_blank_values=True) return { key: list_val[0] for key, list_val in post_dict.items() }
os.environ['REQUIRE_BUILD_PROFILE_OPTIMIZE'] = 'none'
print("Computing t-SNE embedding") tsne = manifold.TSNE(n_components=2, init='pca', random_state=0) t0 = time() X_tsne = tsne.fit_transform(X)
root = get_or_create_root()
__virtualname__ = 'mongo'
from salt.exceptions import ( SaltCloudNotFound, SaltCloudException, SaltCloudSystemExit, SaltCloudConfigError )
LTI_AGGREGATE_SCORE_PASSBACK_DELAY = ENV_TOKENS.get( 'LTI_AGGREGATE_SCORE_PASSBACK_DELAY', LTI_AGGREGATE_SCORE_PASSBACK_DELAY )
manage.py ... enroll_user_in_course -e test@example.com -c edX/Open_DemoX/edx_demo_course
random_state = check_random_state(0) y_true = random_state.randint(0, 2, size=(20, )) y_pred = random_state.randint(0, 2, size=(20, ))
STATICFILES_STORAGE = 'pipeline.storage.NonPackagingPipelineStorage'
train_composite = Train(dataset_composite, mlp_composite, SGD(0.0001, batch_size=20)) train_composite.algorithm.termination_criterion = EpochCounter(1) train_composite.main_loop()
filesystem = OSFS(root_dir / 'test_export/static') exported_static_files = filesystem.listdir() self.assertTrue(filesystem.exists(asset_displayname)) self.assertEqual(len(exported_static_files), 1)
if asset_idx is None: raise ItemNotFoundError(asset_key) all_asset_info.pop(asset_idx) return all_asset_info
pv = PatchViewer(grid_shape, vis_chains.shape[1:3], is_color=vis_chains.shape[-1] == 3) for i in xrange(m): pv.add_patch(vis_chains[i, :], rescale=False) return pv
'state_verbose': bool,
css_classes.append('xmodule_edit')
expected_text = "This component is out of date. The library has new content." library_block = self._get_library_xblock_wrapper(self.unit_page.xblocks[1])
cls.objects.filter(id__in=requirement_ids).update(active=False)
used_all_attempts = CapaFactory.create(showanswer='closed', max_attempts="1", attempts="1", due=self.tomorrow_str) self.assertTrue(used_all_attempts.answer_available())
linux_sysctl.__salt__ = {} linux_sysctl.__context__ = {} systemd.__context__ = {}
course = self.process_xml(xml.CourseFactory.build()) self.assertEquals(course_image_url(course), '/static/xml_test_course/images/course_image.jpg')
return salt.utils.which('gpg')
from __future__ import absolute_import
from salt import exceptions from salt.states.git import _fail, _neutral_test
for i, clf in enumerate((kernel_svm, nystroem_approx_svm, fourier_approx_svm)): plt.subplot(1, 3, i + 1) Z = clf.predict(flat_grid)
import salt.utils.event
r = [] for attr, value in sorted(self.__dict__.items()): if attr.startswith("hyperparameter_"): r.append(value) return r
from __future__ import unicode_literals
warnings.warn("Do you really want to regularize the detector units to be more active than the pooling units?")
from markdown.util import etree, AtomicString
from __future__ import absolute_import import os import shutil
with self.assertNumQueries(1): VerificationDeadline.deadlines_for_courses(course_keys)
COURSE_CATALOG_VISIBILITY_PERMISSION = ENV_TOKENS.get( 'COURSE_CATALOG_VISIBILITY_PERMISSION', COURSE_CATALOG_VISIBILITY_PERMISSION ) COURSE_ABOUT_VISIBILITY_PERMISSION = ENV_TOKENS.get( 'COURSE_ABOUT_VISIBILITY_PERMISSION', COURSE_ABOUT_VISIBILITY_PERMISSION )
out, err = DETAILS['server'].sendline(cmd)
if self.contentstore: self.contentstore.close_connections() super(ModuleStoreReadBase, self).close_connections()
time.sleep(0.01) continue
import logging import hmac import base64 import subprocess
from salt.utils import args
url_user_invoice_preference = reverse('get_user_invoice_preference', kwargs={'course_id': self.course.id.to_deprecated_string()})
'tcp_master_pull_port': int,
self._update_staff_locks(True, False, False) self._verify_staff_lock_source(self.vertical, self.chapter)
call_task('pavelib.quality.run_safelint', options={"thresholds": '{"rules": {"javascript-escape": 5}}'})
with self.assert_no_error_logged(): with self.assert_no_warning_logged(): yield
problem = self.build_problem(answer="1+1j", tolerance=1e-3) self.assert_grade(problem, '1+j', 'correct')
return (key.block_scope_id, key.field_name)
raise
course_page.set_staff_view_mode_specific_student(student_b_username) verify_expected_problem_visibility(self, course_page, [self.beta_text, self.everyone_text])
if subtitles: self.assets.append('subs_{}.srt.sjson'.format(subtitle_id)) self.navigate_to_course_unit()
ret['changes']['diff'] = changes_needed comments.append('Container \'{0}\' was replaced'.format(name))
course_honor_mode = CourseMode.mode_for_course(self.course.id, 'honor')
kwargs.update(signing_policy)
self.assertIn("Error", resp.content)
'pillar_cache': bool,
self.put = send
response = self.client.post(self.url, { "password": self.PASSWORD, }) self.assertHttpBadRequest(response)
continue
xpath = "//div[@class='%s inline']" % div_class self.assert_has_xpath(xml, xpath, self.context)
__func_alias__ = { 'list_': 'list' }
'answers': student_answers,
exam_review_policy = get_review_policy_by_exam_id(exam['id']) self.assertEqual(exam_review_policy['review_policy'], sequence.exam_review_rules)
if len(self.credit_type) > 1: raise LoncapaProblemError('Only one type of partial credit is allowed for Checkbox problems.')
clf_random = ElasticNet(selection='invalid') assert_raises(ValueError, clf_random.fit, X, y)
report_dir = (Env.REPORT_DIR / system).makedirs_p()
movie_reviews_data_folder = sys.argv[1] dataset = load_files(movie_reviews_data_folder, shuffle=False) print("n_samples: %d" % len(dataset.data))
self.assertEqual(google_provider.id, google_state.provider.id) self.assertEqual(self.user, google_state.user)
allow_access(course_ccx, instructor, 'instructor')
CONFIG_PREFIX = SERVICE_VARIANT + "." if SERVICE_VARIANT else ""
if not hasattr(coeffs, '__iter__'): coeffs = [coeffs] * len(self.layers)
sample_weight = (sample_weight * compute_sample_weight(self.class_weight, y))
if self.due is None: return False return datetime.now(UTC()) > self.due
drop_idx = [active.pop(ii) for ii in idx]
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
with self.assertRaises(AssertionError): self.kvs.set(self.other_key_factory(self.existing_field_name), "new_value")
this_scores = cross_val_score(clf, X, y, n_jobs=1) score_means.append(this_scores.mean()) score_stds.append(this_scores.std())
click_css(self, 'a.duplicate-button', source_index)
from sklearn.linear_model import ElasticNet
from __future__ import absolute_import
import salt.fileserver import salt.utils from salt.utils.event import tagify import salt.ext.six as six
for i in range(0, 4): np.testing.assert_allclose(fl.get_params()[i].eval(), mlp_composite.get_params()[i].eval())
if '.' not in tag_suffix: raise yaml.YAMLError("!import: tag suffix contains no '.'") return try_to_import(tag_suffix)
self.attempt_login(200)
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, username=username, email=email, staff=staff).visit()
valid_input, field_errors = get_valid_input(request.data) if field_errors: return Response( status=status.HTTP_400_BAD_REQUEST, data={ 'field_errors': field_errors } )
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
missing = [] for key in required_keys: if params.get(key) is None: missing.append(key)
from __future__ import print_function
problem.grade_answers({'1_2_1': 'test'})
import salt.utils import salt.exceptions
if not token or token['eauth'] not in self.opts['external_auth']: log.warning('Authentication failure of type "token" occurred.') return ''
self.setup_mongo_course(course_edit_method='XML') result_fragment = self.module.render(STUDENT_VIEW, context=self.default_context) self.assertNotIn('View Unit in Studio', result_fragment.content)
import json
return _save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=task_definition.Principal.UserID, password=None, logon_type=task_definition.Principal.LogonType)
super(NoseTestSuite, self).__exit__(exc_type, exc_value, traceback) test_utils.clean_mongo()
url(r'^{}/all_sequential_open_distrib$'.format(settings.COURSE_ID_PATTERN), 'class_dashboard.views.all_sequential_open_distrib', name="all_sequential_open_distrib"),
if settings.FEATURES.get('ENABLE_THIRD_PARTY_AUTH', False): enable_third_party_auth()
cmd = list2cmdline(['wmic', 'cpu']) info = __salt__['cmd.run'](cmd).split('\r\n')
self._validate(is_numeric, batch) return 0
return JsonResponse({"error": "Cohort name must be specified."}, 400)
import salt.config
if not decode: ret = _get_secrets(namespace, name, apiserver_url) else: ret = _decode_secrets(_get_secrets(namespace, name, apiserver_url)) return ret
self.assertIn('timestamp', parameters) parsed_date = from_timestamp(parameters['timestamp']) self.assertLess(parsed_date, datetime.datetime.now(pytz.UTC))
minion_timeouts = {}
self.assertEqual(self.user1.course_groups.count(), 1) self.assertEqual(CohortMembership.objects.filter(user=self.user1).count(), 1)
return redirect_with_get('signin_user', request.GET)
event_name = '.'.join(['edx', 'certificate', 'configuration', event_name]) tracker.emit(event_name, event_data)
world.visit('/') signin_css = 'a.action-signin' assert world.is_css_present(signin_css)
manage.py ... transfer_students -f edX/Open_DemoX/edx_demo_course -t edX/Open_DemoX/new_demoX -c true
return 'Enrollment data is now available in <a href="http://example.com/courses/{}" ' \ 'target="_blank">Example</a>.'.format(unicode(self.course.id))
self._create_search_index() super(StudioLibraryContainerCapaFilterTest, self).setUp()
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, )
return self._ip == 1
if Y is not None: state_above = dbm.hidden_layers[-1].downward_state(Y) layer_above = dbm.hidden_layers[-1] assert len(dbm.hidden_layers) > 1
self.assertTrue( inspect.isfunction( self.loader[self.module_name + '.loaded'] ) ) self.assertTrue(self.module_name + '.not_loaded' not in self.loader)
super(ViewsExceptionTestCase, self).setUp()
with self.assertRaises(PermissionDenied): self.get_form(expected_valid=False)
if sp.issparse(X): centers = _k_means._centers_sparse(X, labels, n_clusters, distances) else: centers = _k_means._centers_dense(X, labels, n_clusters, distances)
if key not in fields: return False, None field = fields[key] if xblock is not None: return field.is_set_on(block), getattr(xblock, key) else: return True, field
self.navigate_to_video()
'tcp_master_workers': int,
paths = ['grading_policy.json'] if policy_dir: paths = [policy_dir + '/grading_policy.json'] + paths
import salt.utils
VIRTUAL_UNIVERSITIES = []
return np.apply_along_axis(self, 1, X)[:, 0]
reset_time = datetime.now(UTC) + timedelta(seconds=300) with freeze_time(reset_time): response = self.client.get(url) self.assertEquals(response.status_code, 404)
return u"verification.{}.{}".format(user_id, unicode(course_key))
default = self.defaults.get(option.dest) value = getattr(self.options, option.dest, default) if value != default: continue
if which_norb == 'big': self.label_index_to_name = (self.label_index_to_name +
gp = GaussianProcess(corr='absolute_exponential', theta0=1e-4, thetaL=1e-12, thetaU=1e-2, nugget=1e-2, optimizer='Welch', regr="linear", random_state=0)
syslog.closelog()
print colorize('green', "Generating optimized static assets...") sh("paver update_assets --settings=test_static_optimized")
payload = self.default_payload(user=user, ttl=ttl) payload.update(overrides) return self.generate_token(payload)
return super(NullBackend, self).get_dict(dict_name, default, **kwargs)
set_limit = numpy.ceil(numpy.divide(set_sizes, set_batch)) self.limit = map(int, set_limit)
pc_clf.fit(this_X_train, y_train + 1, sample_weight=sw_train) prob_pos_pc_clf_relabeled = pc_clf.predict_proba(this_X_test)[:, 1] assert_array_almost_equal(prob_pos_pc_clf, prob_pos_pc_clf_relabeled)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return - 2 * self.score(X).sum() + 2 * self._n_parameters()
group_vpc = conn.create_security_group(name=group_name, description=group_description, vpc_id=vpc_id) retrieved_group_id = boto_secgroup.get_group_id(group_name, **conn_parameters) self.assertEqual(group_classic.id, retrieved_group_id)
import logging from sys import stdout from os import makedirs from os.path import dirname, isdir from errno import EEXIST
print "{:>26}".format("course ID"), print ' '.join(["{:>16}".format(heading) for heading in status_headings])
import logging import re
return modulestore().get_item(self.xblock_keys[block_index])
if ip in servers: rm_dns(ip, interface)
with patch.object(mail.message.EmailMessage, 'send') as mock_send: mock_send.side_effect = Exception("Kaboom!") cart.purchase()
import integration import salt.utils
resolved_envs = [ aenv for aenv in matches if fnmatch.filter(self.avail[aenv], inc_sls) ]
for checkpoint in checkpoints: cls.objects.create(checkpoint=checkpoint, user=user, status=status)
from __future__ import absolute_import
AccessTestData(partition_groups={1: 1, 2: 2}, merged_parents_list=[{1: {1}}], expected_access=True),
if not isinstance(max_samples, (numbers.Integral, np.integer)): max_samples = int(max_samples * X.shape[0])
required_boto3_version = '1.2.1'
self.assertEqual(response.status_code, 204)
import integration import salt.utils
log.warn('Error in conditional module: \ required module {module} has no {module_attr}'.format(module=module, module_attr=attr_name)) return False
assert pdp.shape == (1, 4) assert axes[0].shape[0] == 4
if not pkginfo: log.error('Unable to locate package {0}'.format(pkg_name)) ret[pkg_name] = 'Unable to locate package {0}'.format(pkg_name) continue
CoursewareSearchIndexer.do_course_reindex(store, course.id) deleted_count = 1 + load_factor + (load_factor ** 2) + (load_factor ** 3) self.assert_search_count(course_size - deleted_count)
Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape)
return True
if not hasattr(self, '_datasets'): self._datasets = [self._dataset] del self._dataset
if len(all_assets) > 0: self.store.save_asset_metadata_list(all_assets, all_assets[0].edited_by, import_only=True)
self.should_fetch_course = False
for name in names: ret[name] = ''
sys.stdout.write('Generating master config...') self.mkconf() print('done')
for key in log_format_types: if str(format_id) == log_format_types[key]: return key _LOG.warning('Unable to determine log format.') return None
from __future__ import unicode_literals
import os
result = _get_xblock_parent(self.vert1, 'unit') self.assertIsNone(result)
out = StringIO() assert_raises(IndexError, export_graphviz, clf, out, feature_names=[])
self._set_opt_in_pref(self.user, "MyOrg", True) self._set_opt_in_pref(self.user, "myorg", False)
self.win_downloader = self.update_session.CreateUpdateDownloader() self.win_downloader.Updates = self.download_collection
TASK_INSTANCES_PARALLEL = 0 TASK_INSTANCES_QUEUE = 1 TASK_INSTANCES_IGNORE_NEW = 2 TASK_INSTANCES_STOP_EXISTING = 3
LogoutPage(self.browser).visit() self._auto_auth(self.USERNAME, self.EMAIL, False)
if 'id' not in __opts__ or not __opts__['id']: __opts__['id'] = 'saltsh_mid'
raise GitLockError( exc.errno, 'Checkout lock exists for {0} remote \'{1}\'' .format(self.role, self.id) )
return BACKEND.get_all_config()
from __future__ import absolute_import from __future__ import print_function import json import time
A = neighbors.kneighbors_graph(X, 1, mode='connectivity', include_self=True) assert_array_equal(A.toarray(), np.eye(A.shape[0]))
X = np.array([[0, 1], [1.01, 1.], [2, 0]])
log = logging.getLogger(__name__)
'CERTIFICATES_INSTRUCTOR_GENERATION': False,
self._update_release_dates(self.date_one, self.date_one, self.date_one) self._verify_release_date_source(self.vertical, self.chapter)
PUBLIC_RSA_KEY = None PRIVATE_RSA_KEY = None
return staticfiles_storage.url(microsite.get_value('favicon_path', default))
if sample_weight_sum <= 0: break
self.assertEqual(params['override_custom_receipt_page'], self.CALLBACK_URL)
w = rng.uniform(size=n_samples) w[5:8] = 0 regression.fit(x, y, sample_weight=w)
seed_permissions_roles(self.course.id)
resp = self.client.ajax_post( self.url, data={'tabs': [{'tab_id': tab_id} for tab_id in tab_ids]}, ) self.assertEqual(resp.status_code, 204)
self.find_css('a.detail-toggle').first.click()
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.check_problem(get_request_dict)
MESSAGE = _( 'Non usable git url provided. Expecting something like:' ' git@github.com:mitocw/edx4edx_lite.git' )
from __future__ import absolute_import
return logistic_sigmoid(X, out=X)
- volumes: /usr/local/etc/ssl/certs/example.crt: bind: /etc/ssl/certs/com.example.internal.crt ro: True /var/run: bind: /var/run/host/ ro: False
return np.log(x / (1. - x))
time.sleep(0.1)
self.X_topo_space = self.view_converter.topo_space
active_tab = self._active_sequence_tab return active_tab and previous_tab_id != active_tab.attrs('data-id')[0]
item = self.cart.orderitem_set.all().select_subclasses()[0] self.assertEquals(item.unit_cost, self.get_discount(self.cost))
if keep_descendants: for child in children: for parent in parents: self._add_relation(parent, child)
FeatureAgglomeration().fit(X)
def setUp(self): super(TestDisabledXBlockTypes, self).setUp()
return full_version[:3]
self.weighted_setup() self.submit_question_answer('FinalQuestion', {'2_1': 'Correct', '2_2': 'Correct'}) self.check_grade_percent(0.75)
U = rng.randn(self.dim, self.dim) U, _ = scipy.linalg.qr(U)
response = self._send_bad_redirection_login() self.assertEquals(response.status_code, 302)
import salt.ext.six as six
CLIENT_TIMEOUT = 60
import re import os import json import time import logging import subprocess
test_success = win_mod_reg.delete_value( 'HKEY_LOCAL_MACHINE', subkey, vname ) self.assertTrue(test_success)
if not whitelist_countries: whitelist_countries = cls.ALL_COUNTRIES
EmptyPromise( lambda: self.is_focused_on_element(selector), "Focus is on other element" ).fulfill()
process.start()
return self.q(css='{} input[name=rescore-entrance-exam]'.format(self.EE_CONTAINER))
problem = self.build_problem(rectangle="(10,10)-(20,20)")
ANALYTICS_SERVER_URL = ENV_TOKENS.get("ANALYTICS_SERVER_URL") ANALYTICS_API_KEY = AUTH_TOKENS.get("ANALYTICS_API_KEY", "")
self.assertEqual(html, "<div>Test Template HTML</div>")
varname = tokens[0][0] self.variables_used.add(varname)
if original_author_id is not None and user.id != original_author_id: return if getattr(post, "context", "course") == TEAM_DISCUSSION_CONTEXT: CourseTeamMembership.update_last_activity(user, post.commentable_id)
instructor = InstructorFactory(course_key=self.course.id) self.client.logout() self.client.login(username=instructor.username, password='test')
return self.find_css('#staff_lock')[0].is_selected()
from salt.modules import oracle import os
from __future__ import unicode_literals
import copy import json import logging
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
super(HtmlStringVisitor, self).__init__(file_contents, results) self.skip_wrapped_html = skip_wrapped_html self.unsafe_html_string_nodes = [] self.over_escaped_entity_string_nodes = [] self.has_text_or_html_call = False
AutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=staff).visit()
del locale if not encoding: encoding = sys.getdefaultencoding() or 'ascii'
child = self.store.get_item(child.location) child.display_name = 'Changed Display Name' self.store.update_item(child, user_id=editing_user)
from __future__ import unicode_literals
url(r'^lang_pref/session_language', 'lang_pref.views.update_session_language', name='session_language'),
self.base_extauth_bypass_sending_activation_email(False)
return self.user
self.xmodule.verify_oauth_body_sign(self.get_signed_grade_mock_request())
user = User.objects.get(email=email) user.is_active = True user.save()
return {"library": unicode(self.library.location.library_key.replace(version_guid=None, branch=None))}
client = APIClient() client.login(username=user.username, password=self.TEST_PASSWORD) return client
assert_true(check_random_state(None) is np.random.mtrand._rand) assert_true(check_random_state(np.random) is np.random.mtrand._rand)
if correct: self.problem_page.click_choice("choice_choice_2") else: self.problem_page.click_choice("choice_choice_1")
log.warning( 'Authentication failure of type "eauth" occurred.' ) return ''
self.fields = block_data.get('fields', {})
assert all(np.all(this_point.cv_validation_scores == 0.0) for this_point in gs.grid_scores_ if this_point.parameters['parameter'] == FailingClassifier.FAILING_PARAMETER)
X_train += 1.
clf = neighbors.KNeighborsClassifier(n_neighbors, weights=weights) clf.fit(X, y)
CONFIG_PREFIX = SERVICE_VARIANT + "." if SERVICE_VARIANT else ""
if m > n: m, n = n, m
super(ForumTestCase, self).setUp() self.course = CourseFactory.create(org='testX', number='727', display_name='Forum Course')
block_structure = BlockStructureModulestoreData(root_block_usage_key=0)
def __init__(self, user=None, course_id=None): super(TestCcxObject, self).__init__(user, course_id) self.coach = user
from .index import * from .certificate import * from .enrollments import * from .refund import * from .programs import IssueProgramCertificatesView
result = self.client.login(username=self.USERNAME, password=self.NEW_PASSWORD) self.assertTrue(result)
from salt.exceptions import CommandExecutionError, SaltRenderError import salt.utils import salt.utils.gitfs import logging import salt.minion import salt.loader import salt.template
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
course_locations = self.draft_store.get_courses_for_wiki('toy') assert_equals(len(course_locations), 0)
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0)
cache_timeout = 600
return self.q(css='.pub-status').first.text[0]
print("Estimated B") print(np.round(pls2.coef_, 1)) pls2.predict(X)
if ssh_interface == 'private_ips' and private_ip_assignment is False: create_private_ip(node_id) private_ip_assignment = True
self.children_for_user = { user: [ ItemFactory(category=child_type, parent=self.parent).scope_ids.usage_id for child_type in BLOCK_TYPES ] for user in self.users.itervalues() }
self._bind_module(lc_block) self.assertEqual(len(lc_block.children), num_to_create) self.assertEqual(len(lc_block.get_child_descriptors()), num_expected)
return { "id": update["id"], "date": update["date"], "content": update["content"], }
list_updates = salt.utils.alias_function(list_upgrades, 'list_updates')
TASK_ACTION_EXEC = 0 TASK_ACTION_COM_HANDLER = 5 TASK_ACTION_SEND_EMAIL = 6 TASK_ACTION_SHOW_MESSAGE = 7
from salt.modules import sensors
from course_modes.models import CourseMode
return False
urlconf = settings.ROOT_URLCONF if urlconf and urlconf in sys.modules: reload(sys.modules[urlconf]) reloaded = import_module(urlconf) reloaded_urls = reloaded.urlpatterns set_urlconf(tuple(reloaded_urls))
from salt.modules import genesis
from salt.utils import immutabletypes
self.assertFalse(result['success']) self.assertIn(u"did not accept your payment", result['error_html']) self.assert_dump_recorded(result['order'])
max_primes = [500, 1000, 2500, 5000]
PAYMENT_REPORT_GENERATOR_GROUP = ENV_TOKENS.get('PAYMENT_REPORT_GENERATOR_GROUP', PAYMENT_REPORT_GENERATOR_GROUP)
from django.core.wsgi import get_wsgi_application application = get_wsgi_application()
#templates_path.append('source/_templates')
response = self._search("foo")
request.POST = request.POST.copy()
response = requests.get(self._get_url("api/v1/annotations"), params={ "user": "dummy-user-id", "page": 2, "page_size": 3 })
def obj_func(theta, eval_gradient=True): if eval_gradient: lml, grad = self.log_marginal_likelihood( theta, eval_gradient=True) return -lml, -grad else: return -self.log_marginal_likelihood(theta)
assert_equal(v_measure_score(true_labels, labels), 1.0) assert_greater(km.inertia_, 0.0)
from __future__ import absolute_import
cache = None storconn = None compconn = None netconn = None webconn = None resconn = None
import logging
from __future__ import absolute_import
return (None, None)
self._assert_redirects_to_instructor_dash(response)
mock_audit_log.reset_mock()
if self.base_dir is None: return False return resource_exists(self.module, os.path.join(self.base_dir, path))
_pshell(cmd)
return Response(data=token)
if versions_dict is None or master_branch not in versions_dict: definition_id = self.create_definition_from_data(locator, definition_fields, root_category, user_id).definition_id
gp_fix = GaussianProcessClassifier(kernel=1.0 * RBF(length_scale=1.0), optimizer=None) gp_fix.fit(X[:train_size], y[:train_size])
perms_map = DjangoModelPermissions.perms_map.copy() perms_map['GET'] = perms_map['OPTIONS'] = perms_map['HEAD'] = perms_map['POST']
pass
for zp in res['stdout'].splitlines(): zp = zp.split("\t") zp_data = {}
if not self.hyperparameter_length_scale.fixed: length_scale_gradient = \ 4 / self.length_scale**2 * sin_of_arg**2 * K length_scale_gradient = length_scale_gradient[:, :, np.newaxis]
import os
self.course_info_page.visit() self.tab_nav.go_to_tab('Course') self.courseware_page.verify_tooltips_displayed()
role = CourseCcxCoachRole(self._course.id) role.add_users(coach) ccx = CcxFactory(course_id=self._course.id, coach=self.coach)
for name, settings in six.iteritems(config.copy()): if '.' in name: log.warning( 'Please switch to the new providers configuration syntax' )
return (NullSpace(), '')
ret[key] = {'old': '', 'new': new[key]}
self._advanced_settings.update(settings)
return username in [user.username for user in cohort.users.all()]
(plaintext, err_from_stderr) = process.communicate( input=html_message.encode('utf-8') )
if hang_closing: yield start, "E133 closing bracket is missing indentation"
valid_repr = numpy.floor((valid_repr / valid_repr.max())*999) test_repr = numpy.floor((test_repr / test_repr.max())*999)
if hasattr(filt, '__match__'): match = filt.__match__ else: match = item
modulestore().mappings = {}
from __future__ import absolute_import import msgpack import salt.ext.six as six
def dispatcher(self, obj): reduced = reduce_func(obj) self.save_reduce(obj=obj, *reduced) self.dispatch[type] = dispatcher
return self.lcp.done
selector = RFE(estimator, step=0.20) sel = selector.fit(X, y) assert_equal(sel.support_.sum(), n_features // 2)
self.database.connection._ensure_connected() return self.database.connection.max_wire_version
from salt.pillar import sqlcipher
if __opts__['test'] is True:
n_samples, n_features = X.shape
self.assertEqual(course_mode, enrollment['mode']) self.assertEqual(is_active, enrollment['is_active'])
__func_alias__ = { 'list_': 'list' }
import salt.client import salt.payload import salt.utils import salt.utils.jid import salt.minion import salt.returners
wt_loc = toplevel
self.assertGroupContent( groups[3], title=u"[no tags] (2)", notes=["Fifth note", "First note"] )
_get_file_from_s3(metadata, saltenv, bucket, file_path, cached_file_path)
labels = birch_model.labels_ centroids = birch_model.subcluster_centers_ n_clusters = np.unique(labels).size print("n_clusters : %d" % n_clusters)
raise
member.name = member.name.replace('{0}/'.format(package), '')
@task(default_retry_delay=settings.CREDIT_TASK_DEFAULT_RETRY_DELAY, max_retries=settings.CREDIT_TASK_MAX_RETRIES)
cmd = ['softwareupdate', '--clear-catalog']
return uuid.uuid4().hex
return cart.has_items()
self.assertEqual(module.attempts, 1)
return self.teams_configuration.get('max_team_size', None)
if refresh: refresh_db()
s3_key = self._generate_s3_key("photo_id") s3_key.set_contents_from_string(encrypt_and_encode(img_data, aes_key))
global DenseMulticlassSVM skip_if_no_sklearn() skip_if_no_data() import pylearn2.models.svm DenseMulticlassSVM = pylearn2.models.svm.DenseMulticlassSVM
nested_ipt = mapping.nest(ipt)
if not os.path.isfile(full): return 'Authorized keys file {0} not present'.format(full)
self.assertFalse(CourseInstructorRole(self.course.id).has_user(nonstaff_user)) self.assertTrue(CourseStaffRole(self.course.id).has_user(nonstaff_user))
if state == {}: continue
if self.centering: self.Xt[row] -= self.x_sum / normalizer
template_name = microsite.get_template_path(template_name)
value = int(value)
key = UsageKey.from_string(ref_string) return key.replace(run=self.modulestore.fill_in_run(key.course_key).run)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
if os.path.exists(venv_path): shutil.rmtree(venv_path) if os.path.exists(requirements_file_path): os.unlink(requirements_file_path) raise
self.assertTrue(self_paced_course.self_paced) self.assertEqual(self_paced_course.start, one_month_from_now) self.assertIsNone(self_paced_section.start)
break
for idx in ['lxc.cgroup.memory.limit_in_bytes']: if not default_data.get(idx): self._filter_data(idx)
self.course = self.store.get_course(self.course.id)
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
CohortFactory(course_id=course.id, name="ManualCohort") CohortFactory(course_id=course.id, name="ManualCohort2")
self._sample_switch = True
import salt.utils import salt.output from salt.utils.locales import sdecode
self.assertEqual(expected_item.fields, actual_item.fields)
if definition is None: definition = self.db_connection.get_definition(definition_guid, course_key) bulk_write_record.definitions[definition_guid] = definition if definition is not None: bulk_write_record.definitions_in_db.add(definition_guid)
self.config.pop('log_fmt_logfile', None)
if isinstance(from_space, CompositeSpace): if isinstance(to_space, Conv2DSpace): return (NotImplementedError, "CompositeSpace does not know how to format as " "Conv2DSpace")
get_affinity_group = show_affinity_group
self.assertFalse(linode._validate_name('foo bar'))
url( r'^courses/{}/lti_rest_endpoints/'.format( settings.COURSE_ID_PATTERN, ), 'courseware.views.views.get_course_lti_endpoints', name='lti_rest_endpoints', ),
incron.__grains__ = {} incron.__salt__ = {} incron.__context__ = {} incron.__opts__ = {}
self.assertEquals( preview.latex_preview('2/3*4/5*6'), r'\frac{2}{3}\cdot \frac{4}{5}\cdot 6' )
site_configuration_history = SiteConfigurationHistory.objects.filter( site=site_configuration.site, ).all()
self.assertFalse( self.run_function('pkgutil.is_installed', [TEST_PKG_NAME]))
disabled = ()
self.assertEqual(len(mail.outbox), 1)
if not user.is_active: response_payload = { 'unique_student_identifier': user.username, 'inactiveUser': True, } return JsonResponse(response_payload)
import logging import re
self.video.verify_speed_changed('1.0x')
self.assertContains(resp, 'visible_course')
self.mock_programs_api() self.mock_credentials_api(self.user, reset_url=False) actual = get_programs_credentials(self.user, category='dummy_category') expected = self.expected_credentials_display_data()
import salt.utils
config_course_cohorts_legacy( course, discussions=[], cohorted=True, auto_cohort_groups=["AutoGroup"] )
import salt.utils from salt.exceptions import CommandExecutionError from salt.utils import locales
time.sleep(10)
w, h, d = original_shape = tuple(china.shape) assert d == 3 image_array = np.reshape(china, (w * h, d))
self.original_usage = edit_info.get('original_usage', None) self.original_usage_version = edit_info.get('original_usage_version', None)
#latex_domain_indices = True
resp = self.client.get(course_wiki_page, follow=False, HTTP_REFERER=referer) self.assertEqual(resp.status_code, 302)
from __future__ import unicode_literals
if viewname == "django_comment_client.forum.views.forum_form_discussion" and args == [unicode(course.id)]: return "default_discussion_link"
import salt.utils
import salt.ext.six as six
CourseRerunState.objects.get(id=rerun_state.id)
'dsn': dsn
with self.assertRaises(UnsupportedRevisionError): self.store.delete_item( private_leaf.location, self.user_id, revision=ModuleStoreEnum.RevisionOption.draft_preferred )
try: import win32security import win32service import win32serviceutil import pywintypes HAS_WIN32_MODS = True except ImportError: HAS_WIN32_MODS = False
exc_info_on_loglevel=logging.DEBUG
with super(ViewPermissionsTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
new_cmap = self.get_score(student_answers) self.get_hints(convert_files_to_filenames( student_answers), new_cmap, old_cmap) return new_cmap
for probe_name in remove_probes_keys_set: remove_probes[probe_name] = configured_probes.pop(probe_name)
OLD_STYLE_RENDERERS = {}
return CourseLocator(org, course, run)
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0)
return self.children()
classifier.set_params(class_weight='balanced') coef_balanced = classifier.fit(X, y).coef_.copy()
_list = self.run_function('beacons.list', return_yaml=False) self.assertTrue(_list['ps']['enabled'])
query = self._course_key_to_son(location.course_key) query['definition.children'] = location.to_deprecated_string()
course_org_filter = microsite.get_value('course_org_filter') if course_org_filter: field_dictionary['org'] = course_org_filter
for msg in all_messages: self.assertNotContains(response, msg)
pygments_style = 'sphinx'
self.addCleanup(shutil.rmtree, self.temp_dir_1) self.addCleanup(shutil.rmtree, self.temp_dir_2)
raise NotImplementedError()
import json import logging import time import pprint from salt.ext.six.moves import range import salt.ext.six as six import salt.utils try: import requests
raise NotImplementedError('get_response is not implemented.')
MASQUERADE_DATA_KEY = 'masquerade_data'
for child in self.get_display_items(): rendered_child = child.render(STUDENT_VIEW, child_context) fragment.add_frag_resources(rendered_child)
from __future__ import absolute_import import logging import msgpack import socket import os import weakref import time import traceback
yield check_parameters_default_constructible, name, Estimator
__context__[contextkey] = result
import yaml from jinja2 import Environment, FileSystemLoader try:
if course.discussion_link: return CourseTab.load( 'external_discussion', name=_('External Discussion'), link=course.discussion_link )
self.submit_student_answer(self.student_a.username, problem_a_url, [OPTION_1, OPTION_1]) self.submit_student_answer(self.student_b.username, problem_b_url, [OPTION_1, OPTION_2])
store = self._get_modulestore_for_courselike(usage_key.course_key) return store.has_item(usage_key, **kwargs)
import urllib.request urlopen = urllib.request.urlopen
self._prefixlen = self._prefix_from_ip_string(addr[1])
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
self.validate_preview_html(self.vertical, self.container_view) self.validate_preview_html(self.child_container, self.container_view) self.validate_preview_html(self.child_vertical, self.reorderable_child_view)
visible_serialized_account = {} for field_name in field_whitelist: visible_serialized_account[field_name] = serialized_account.get(field_name, None) return visible_serialized_account
raise SaltSystemExit('Cannot complete login due to an incorrect user name or password.')
self.send_get(self.anonymous_client, expected_status=401) self.send_patch(self.anonymous_client, {}, expected_status=401)
return settings.FEATURES['ENABLE_MAX_FAILED_LOGIN_ATTEMPTS']
self.mock_programs_api() self.mock_credentials_api(self.user, reset_url=False) actual = get_programs_credentials(self.user) expected = self.expected_credentials_display_data()
default = self.defaults.get(option.dest) value = getattr(self.options, option.dest, default)
import salt.utils from salt.exceptions import CommandExecutionError, MinionError import salt.ext.six as six
axes = self.output_axes assert len(axes) == 4
problem = self.build_problem(sample_dict=sample_dict, num_samples=10, tolerance=0.01, answer="x+2*y")
if profiles_config is None: profiles_config = vm_profiles_config(profiles_config_path, providers_config) opts['profiles'] = profiles_config
yield
event_iter = self.get_event_iter_returns(jid, minions, timeout=timeout)
ModuleStoreNoSettings.modulestore = class_(
return thread_local_default_store
service = _get_service(name) path = service['file_path']
join = salt.utils.alias_function(joined, 'join')
from scipy import misc face = misc.face(gray=True)
try: from twilio.rest import TwilioRestClient HAS_TWILIO = True except ImportError: HAS_TWILIO = False
sampling_updates = model.get_sampling_updates(layer_to_state, theano_rng) assert layer_to_state[model.visible_layer] in sampling_updates
self.assertIn( settings.MICROSITE_CONFIGURATION['test_microsite']["urls"]['ABOUT'], data['company_about_url'] )
self.store.publish(self.course.location, self.user_id)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
return self.thread.context
return u'{microsite_key}: {organization}'.format( microsite_key=self.microsite.key, organization=self.organization )
confirm_prompt(self, cancel=True)
train = CIFAR10(which_set='train') topo = train.get_batch_topo(1) assert topo.ndim == 4
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
raise NotImplementedError()
if not isinstance(r, numbers.Number) or \ r < 0 or \ math.isnan(r) or \ math.isinf(r): return False
unique_names = uniq_stable(names)
if '_dtype' not in state_dict: self._dtype = theano.config.floatX
return self.course.id.make_usage_key('problem', problem_url_name)
api.remove_credit_requirement_status("bob", self.course_key, "grade", "grade")
from __future__ import absolute_import import os import copy import tempfile import json import datetime import pprint
response = self.client.get(reverse("support:certificates")) self.assertContains(response, "userFilter: ''")
min_price = models.IntegerField(default=0)
'render_dirs': list,
return cls.current().base_url
key_values = {}
elif strategy == "most_frequent": most_frequent = np.empty(len(columns))
non_editable_fields = super(SequenceDescriptor, self).non_editable_metadata_fields non_editable_fields.append(self.fields['is_entrance_exam']) return non_editable_fields
self.assertEqual( certs_api.get_certificates_for_user(self.student_no_cert.username), [] )
self.assertIn('tag', ret) ret.pop('tag')
else: msg = _(u"Error: {msg}").format(msg=inst.message)
if not path or not os.path.isfile(path): return ret
if isinstance(opts, list): opts = ','.join(opts) lines = [] change = False present = False automaster_file = "/etc/auto_master"
self.q(css=".subsection-header-actions .configure-button").nth(index).click() self.wait_for_element_presence('.course-outline-modal', 'Subsection settings modal is present.')
from __future__ import absolute_import import logging import time
if not include_meta_estimators: estimators = [c for c in estimators if not c[0] in META_ESTIMATORS] if type_filter is not None: if not isinstance(type_filter, list): type_filter = [type_filter] else:
'conf_file': str,
self._get_penalty_type(self.penalty) self._get_learning_rate_type(self.learning_rate)
from __future__ import absolute_import
X -= X.min() - .1 this_X = NotAnArray(X) this_y = NotAnArray(np.asarray(y)) _check_transformer(name, Transformer, this_X, this_y)
self.assertEqual(views.get_cosmetic_display_price(self.course, registration_price), "Free")
('cart', 'cart'),
Y = Y.astype(np.float64) if sample_weight is not None: sample_weight = np.atleast_2d(sample_weight) Y *= check_array(sample_weight).T
params = self._signed_callback_params("98272", self.COST, self.COST) result = process_postpay_callback(params)
job_finished = True
from salt.exceptions import CommandExecutionError
if dispatch == 'preview_formcalc': return self.preview_formcalc(get) return {}
from salttesting import skipIf from tests.unit import ModuleTestCase, hasDependency from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath from salt.modules import servicenow
names = sorted(str_repl, key=len, reverse=True)
config_data = __salt__['config.option']('virt.nic', {}).get( profile_name, None )
if tasks.environment.dry_run: for cmd in cmd_list: tasks.environment.info(cmd) return
salt '*' win_wua.list_update 'Microsoft Camera Codec Pack'
clf3 = self.factory(alpha=0.01, eta0=0.01, n_iter=5, shuffle=False, warm_start=True, learning_rate=lr) clf3.fit(X, Y)
info_log.assert_called_with('email sent to new created user at %s', 'test_student@example.com')
course_outline.visit() subsection = course_outline.section_at(0).subsection_at(0) subsection.expand_subsection() subsection.add_unit()
if len(running) >= self.opts.get('ssh_max_procs', 25) or len(self.targets) >= len(running): time.sleep(0.1)
module = inspect.getmodule(method) if module is not None: if not module.__name__.startswith('pylearn2'): return method_errors
if quiet is True: cmd.append('--quiet')
return self.find_courses_by_search_target('wiki_slug', wiki_slug)
self.elapsed = time.time() - self._start_time
self.assertTrue(modal.has_release_date()) self.assertFalse(modal.has_due_date()) self.assertFalse(modal.has_policy())
if not (has_forum_admin or has_instructor_access): return HttpResponseBadRequest( "Operation requires staff & forum admin or instructor access" )
raise NotImplementedError
matching_events = self.get_matching_events_from_time(start_time=start_time, event_filter=event_filter) return len(matching_events) >= number_of_matches, matching_events
X, y = make_classification(n_classes=2, random_state=0)
self.assertEquals( response_data["content"], strip_none(make_mock_thread_data(course=self.course, text=text, thread_id=thread_id, num_children=1)) ) mock_request.assert_called_with( "get",
if 'asides' in kwargs: kwargs['asides'] = prepare_asides_to_store(kwargs['asides']) return func(*args, **kwargs)
has_children = True reference_link = Reference(default=None, scope=Scope.content) reference_list = ReferenceList(scope=Scope.content) reference_dict = ReferenceValueDict(scope=Scope.settings)
assert_equal(train.union(test), set(range(n_samples)))
config_course_cohorts_legacy(self.course, [], cohorted=True, auto_cohort_groups=["AutoGroup"])
response = client.put(self.url, data=json.dumps(json_data), content_type=content_type) self.assertEqual(expected_status, response.status_code) return response
return get_id_token(user, CLIENT_NAME)
self.login_staff() response = self.get_course_info_page() self.assertEqual(response.status_code, 200) content = response.content self.assertIn("OOGIE BLOOGIE", content)
import salt.utils
for _ in range(300): prev_log_likelihood = current_log_likelihood try: current_log_likelihood = gmm.fit(X).score(X) except ConvergenceWarning: pass assert_greater_equal(current_log_likelihood, prev_log_likelihood)
self.assertEqual( len(CourseEnrollment.objects.filter(mode='honor', user_id__in=real_user_ids)), expected_success )
salt-run state.event | while read -r tag data; do echo $tag echo $data | jq -colour-output . done
assert_raises(ValueError, plot_partial_dependence, clf, iris.data, [0, 1], label='foobar', grid_resolution=grid_resolution)
from __future__ import unicode_literals
'course', 'org', 'url_name', 'filename', 'xml_attributes')
course_details.license = getattr(course_descriptor, "license", "all-rights-reserved")
archive.__salt__ = {} archive.__opts__ = {"cachedir": "/tmp", "test": False} archive.__env__ = 'test'
return
mean = X.mean(axis=1) if subtract_mean:
if expr_form == 'range' and HAS_RANGE: tgt = self._convert_range_to_list(tgt) expr_form = 'list'
self.io_loop.spawn_callback(self.io_loop.stop)
return pkg_info['versions']['stable'] or pkg_info['versions']['devel']
pass
FEATURES['ENABLE_SPECIAL_EXAMS'] = True
log.error('Failed to read metadata. Giving up on IAM credentials.')
import salt.client.ssh import logging import os from salt.exceptions import CommandExecutionError
mylocalrepo: git.config_unset: - name: 'foo\..+' - all: True
chapter_to_delete = course.get_children()[0] self.delete_item(store, chapter_to_delete.location)
ret['comment'] = 'Event module not available. Schedule enable job failed.'
self.library = modulestore().get_library(self.lib_key)
'submissions', 'openassessment', 'openassessment.assessment', 'openassessment.fileupload', 'openassessment.workflow', 'openassessment.xblock',
from salttesting.helpers import ( ensure_in_syspath, skip_if_not_root, skip_if_binaries_missing ) from salttesting import skipIf ensure_in_syspath('../../')
self._tags[course_id][key] = value
self._click_programs_tab() return self.q(css='div.programs-tab.active a.new-program-button').present
comment, passed, retries = _search(win_updater, retries) ret['comment'] += comment if not passed: ret['result'] = False return ret
update_creator_state = Signal(providing_args=["caller", "user", "state"])
data_specs[0].np_validate(data) assert not [contains_nan(X) for X in data] raise NotImplementedError()
while listening_to_events: print ws.recv()
self.search_results = None
else: retcode = 0
'log_level': str,
colors = cycle(['navy', 'turquoise', 'darkorange', 'cornflowerblue', 'teal']) lw = 2
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
libraries = [LibraryFactory.create() for _ in range(3)] lib_dict = dict([(lib.location.library_key, lib) for lib in libraries])
#html_favicon = None
vertical = get_and_verify_publish_state('vertical', self.TEST_VERTICAL, True) for child in vertical.get_children(): verify_item_publish_state(child, True)
if __opts__['test']: ret['result'] = None return ret
custom_form = get_registration_extension_form()
USER_SETTINGS_CHANGED_EVENT_NAME = u'edx.user.settings.changed'
self.assertTrue(self.enrollment.refundable())
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
'5afe5d9bb03796557ee2614f5c9611fb', self._get_anonymous_id(CourseKey.from_string(course_id), descriptor_class)
plt.plot(xx, yy, 'k-') plt.plot(xx, yy_down, 'k--') plt.plot(xx, yy_up, 'k--')
from __future__ import absolute_import import logging
GRAINS_CACHE = {} DETAILS = {}
'cms.lib.xblock.tagging',
self.dashboard_page.visit()
EmptyPromise( lambda: self.q(css=self.certficate_css + " .action-add").present, 'Add certificate button is displayed' ).fulfill()
raise NotImplementedError()
choice = 0 if correct else 1 input_value = "8" if correct else "5" self._select_choice(choice) self._fill_input_text(input_value, choice)
if closest_subcluster.child_ is not None: split_child = closest_subcluster.child_.insert_cf_subcluster( subcluster)
saltenv = env
self.assertEqual(certificate_exception['user_email'], self.user.email) self.assertEqual(certificate_exception['user_name'], self.user.username)
QUERYFORMAT = '%{NAME}_|-%{EPOCH}_|-%{VERSION}_|-%{RELEASE}_|-%{ARCH}_|-%{REPOID}'
def __init__(self, func): self.func = func
local_name = os.path.join(self.dataset_local_dir, os.path.relpath(remote_name, self.dataset_remote_dir))
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=staff).visit()
clf = SVC() filter1 = SelectKBest(f_classif) pipe = Pipeline([('anova', filter1), ('svc', clf)])
X = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1]]
os._exit(999)
self.assertTrue(glusterfs.create_volume('newvolume', 'host1:/brick')) self.assertFalse(mock_start_volume.called)
with mock_create_refund(status=200, response=[1, 2, 3]): self.send_signal() self.assertTrue(mock_send_notification.called)
return None, mods, errors
self.key = key if not isinstance(delta, integer_types): raise SaltInvocationError('Delta value must be an integer') return key
exc_info_on_loglevel=logging.DEBUG
self.assertNotContains(response, checkbox_html, html=True)
lines.append(line) continue
@ensure_csrf_cookie
return ""
from __future__ import absolute_import, division import fnmatch
try: lti_consumer = LtiConsumer.get_or_supplement( params.get('tool_consumer_instance_guid', None), params['oauth_consumer_key'] ) except LtiConsumer.DoesNotExist: return HttpResponseForbidden()
ItemFactory.create(parent=self.verticals[3], category='edx-reverification-block') with check_mongo_calls_range(max_finds=6, max_sends=3): self._update_partitions(reload_items=False)
exact_dists, exact_idx = nnbrs.radius_neighbors(query, radius=1) approx_dists, approx_idx = lsfh.radius_neighbors(query, radius=1)
visibility_editor = self.edit_component_visibility(component) for label in labels: visibility_editor.select_option(label, save=False) visibility_editor.save()
import atexit import logging
import salt.crypt import salt.payload import salt.utils import salt.utils.network import salt.utils.event from salt.exceptions import SaltClientError
reset_time = datetime.now(UTC) + timedelta(seconds=300) with freeze_time(reset_time): response = self.client.post(url) self.assertEquals(response.status_code, 404)
self.assertTrue(self.store.has_item(course.id.make_usage_key('html', 'multi_parent_html')))
y = 0.5 * X.ravel() \ + np.random.randn(n_samples, 1).ravel()
log = logging.getLogger(__name__)
adds[k] = Tags[k]
time.sleep(1) return info(name).get('gid') == gid
import integration import salt.utils
from __future__ import unicode_literals
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
sys.stdout.write("{0}\ndeploy\n".format(OPTIONS.delimiter)) sys.exit(EX_THIN_DEPLOY)
if force: log.warn('force option is unsupported on MacOS, ignoring')
ret[host_name] = {}
clf = cls() clf.partial_fit(X2, y2, classes=np.unique(y2)) assert_raises(ValueError, clf.partial_fit, X2, y2, classes=np.arange(42))
from salt.modules import nginx
if xblock_access is not None: block.group_access = xblock_access update_block(self.course)
if os.path.exists(_DEB_NETWORK_DIR): interface_files += ['{0}/{1}'.format(_DEB_NETWORK_DIR, dir) for dir in os.listdir(_DEB_NETWORK_DIR)]
_get_si()
if __name__ == '__main__': swarm = Swarm(parse()) try: swarm.start() finally: swarm.shutdown()
from salt.ext import six
results_by_url = {} root = None
return [Attribute('params', None), Attribute('problem_state', None), Attribute('display_class', None), Attribute('display_file', None), ]
log = logging.getLogger(__name__)
ref_key = 'new tags' \ if new_ref_type == 'tag' \ else 'new branches' ret.setdefault(ref_key, []).append(ref_name)
return string.replace('\r\n', '\n').replace('\r', '\n')
from sklearn.utils.linear_assignment_ import _hungarian
for idx, asset in enumerate(orig): self.assertEquals(assets[idx].asset_id.asset_type, asset[0]) self.assertEquals(assets[idx].asset_id.path, asset[1])
@ignore_warnings def decorator_no_warning(): _warning_function() _multiple_warning_function()
X = [X] if isinstance(X, Mapping) else X
if len(out) == 1 and 'restore status' in out[0].lower(): return {'restore_status': out[0]}
from __future__ import absolute_import import logging import os import re
mlp.fit(X, y)
return self.store.get_modulestore_type(self.course.id) == ModuleStoreEnum.Type.mongo
y[::5] += 3 * (0.5 - np.random.rand(8))
return HttpResponseBadRequest(u'Could not parse request course key.')
if os_grain['kernel'] not in 'Darwin': self.skipTest( 'Test not applicable to \'{kernel}\' kernel'.format( **os_grain ) )
test_data = state_run['cmd_|-test_changing_state_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
y = [3, 3, -1, -1, 3]
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if values and "" in values: raise ValidationError("This field cannot be empty.")
assert_less_equal(call_count, maximum_calls)
click_css(self, self._bounded_selector('.delete-button'), require_notification=False) confirm_prompt(self, cancel)
ttype = 'zeromq'
if self.status in ['correct', 'incorrect', 'partially-correct']: return False else: return True
return self.q(css="div.proctored-exam.completed").visible
for course_mode in CourseMode.objects.filter(course_id=self.course.id): course_mode.sku = '' course_mode.save()
import os from os.path import join
if self.depth == self.num_fields - 1:
modal.policy = 'Lab' modal.save()
world.retry_on_exception( _click_advanced, ignored_exceptions=AssertionError, )
db_config = { 'host': MONGO_HOST, 'port': MONGO_PORT_NUM, 'db': 'test_xmodule', }
cmd_kwargs = copy.deepcopy(cmd_kwargs) cmd_kwargs['use_vt'] = False
'pillar_cache_ttl': int,
if opts.use_hashing: feature_names = None else: feature_names = vectorizer.get_feature_names()
'dark_lang.middleware.DarkLangMiddleware',
with mock.patch.object(requests, 'post') as mock_post: mock_post.return_value.text = snuggletex_resp
filter_func = filter_func or (lambda __: True)
if len(stats) < h_len: h_len = len(stats) dev_stats[disk].append(stats)
('purchased', 'purchased'),
VISIBLE_CONTENT = [ ['class=&#34;problems-wrapper'], ['Some HTML for group 1'] ]
self.assert_student_in_group(new_groups[0], new_user_partition)
import os import re
config = sconfig.minion_config('/etc/salt/minion') self.assertEqual(config['log_file'], env_fpath) os.environ.clear() os.environ.update(original_environ)
with remove_ccx(course_key) as (course_key, restore): return restore(self._modulestore.import_xblock( user_id, course_key, block_type, block_id, fields=fields, runtime=runtime, **kwargs ))
actual_enabled = certs_api.cert_generation_enabled(course_key) self.assertEqual(expect_enabled, actual_enabled)
self.assertTrue(config.id)
ScopeIds(None, category, loc, loc), DictFieldData(data_content),
return reverse( 'xblock_handler', args=(unicode(self.course.id), quote_slashes(self.item_url), 'xmodule_handler', dispatch) )
n_class = dual_coef.shape[0] + 1
digits = datasets.load_digits()
with mock_create_refund(status=403): refund_seat(self.course_enrollment, UserFactory()) self.assertTrue(mock_log_warning.called)
sample_dict = {'x': (-10, 10), 'y': (-10, 10)}
self.scope_ids = self.scope_ids._replace(user_id=user_id)
alias, driver = driver.split(':')
if 'truncated' not in kwargs: kwargs['truncated'] = [] self.assert_event_emitted( USER_SETTINGS_CHANGED_EVENT_NAME, table=self.table, user_id=self.user.id, **kwargs )
log.warning( 'Minion id {0} is not who it says it is!'.format( load['id'] ) ) return False
import logging log = logging.getLogger(__name__)
pass
'pub_hwm': int,
course_orphans = self.store.get_orphans(course_locator) self.assertEqual(len(course_orphans), 0) self.store.delete_item(vertical.location, self.user_id)
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
course_module = modulestore().get_course(course_key) if course_module is None: return Response(status=status.HTTP_404_NOT_FOUND) result_filter.update({'course_id': course_key})
log.trace('refresh_modules waiting for module refresh to complete') eventer.get_event(tag='/salt/minion/minion_mod_complete', wait=30)
section_descriptor = modulestore().get_item(section_key, depth=3)
dataname = mldata_filename(dataname)
self.assertIsNotNone(account_settings['date_joined']) del account_settings['date_joined']
self.assertFalse(result['success']) self.assertIn(u"you have cancelled this transaction", result['error_html'])
self._set_opt_in_pref(self.user, "other_org", False)
self._block_relations = defaultdict(_BlockRelations)
session = requests.Session() response = session.get(LMS_BASE_URL + "/auto_auth?superuser=true")
if adapter_type: log.error("Cannot change type of '{0}' to '{1}'. Not changing type".format(network_adapter.deviceInfo.label, adapter_type)) edited_network_adapter = network_adapter
user_partititons = self.course.user_partitions self.assertEqual(len(user_partititons), 1) self.assertEqual(user_partititons[0].name, 'Name 1')
correct_ans = CapaFactory.create(showanswer='finished', max_attempts="1", attempts="0", due=self.tomorrow_str, correct=True) self.assertTrue(correct_ans.answer_available())
pass
certs_api.set_cert_generation_enabled(self.course.id, True)
return ''.join(difflib.unified_diff(orig_file, new_file))
first = last = addresses[0] for ip in addresses[1:]: if ip._ip == last._ip + 1: last = ip else: break return (first, last)
try: microsite = Microsite.objects.get(key='default') except Microsite.DoesNotExist: pass
sh('xmodule_assets common/static/xmodule') print("\t\tFinished processing xmodule assets.")
from __future__ import absolute_import
self.assert_enrollment_status(as_server=True, mode='professional')
self.assertFalse(self._search_for_content(self.EDITED_SEARCH_STRING))
else: final_codes ,= set(codebook.keys())
import salt.utils import salt.exceptions import salt.ext.six as six from salt.utils.odict import OrderedDict
if queue: _wait(kwargs.get('__pub_jid')) else: conflict = running(concurrent) if conflict: __context__['retcode'] = 1 return conflict
if len(self.args) <= 1: self.print_help() self.exit(salt.defaults.exitcodes.EX_USAGE)
raise TerminalException('Password authentication failed')
from salt.ext.six.moves.urllib.parse import urljoin as _urljoin import salt.ext.six.moves.http_client
lim = 8
fstypes.add(arg)
form = PasswordResetFormNoActive({'email': email})
num_new_fields_set = num_fields_after - num_fields_before self._ddog_histogram(evt_time, 'set_many.fields_set', num_new_fields_set)
from setuptools import setup setup( name="safe_lxml", version="1.0", packages=["safe_lxml"], install_requires=[ "lxml", "defusedxml" ], )
from __future__ import absolute_import import os import re
FEATURES['ENABLE_COURSEWARE_INDEX'] = True FEATURES['ENABLE_LIBRARY_INDEX'] = True SEARCH_ENGINE = "search.tests.mock_search_engine.MockSearchEngine"
self.assertDictContainsSubset({'attempted': 2, 'succeeded': 2, 'failed': 0}, task_result)
return self.best_estimator_.decision_function(X)
rnd = np.random.RandomState(0) X = rnd.uniform(size=(10, 4))
import salt.config import salt.transport.ipc
ret = _get_labels(node, apiserver_url)
from __future__ import unicode_literals
import logging
extend(state('.goal').stateconf.require_in(stateconf='yyy::start'))
for i in xrange(1, len(self.aes)): assert (self.aes[i].weights.get_value().shape[0] == self.aes[i - 1].nhid)
cc_button_selector = self.get_element_selector(VIDEO_BUTTONS["transcript"]) element_to_hover_over = self.q(css=cc_button_selector).results[0] ActionChains(self.browser).move_to_element(element_to_hover_over).perform()
required_boto3_version = '1.2.1'
problem1_content_before_switch = self.problem_page.problem_content
return get_branch_setting()
self.assertNotIn('<span class="important-dates-item-text">$10</span>', resp.content)
self._initialize_mixed(contentstore=contentstore, mappings={})
pruned_block_relations = defaultdict(_BlockRelations) old_block_relations = self._block_relations
js_url = urljoin(self.public_service_url, self.authoring_app_js_path) css_url = urljoin(self.public_service_url, self.authoring_app_css_path) return AuthoringAppConfig(js_url=js_url, css_url=css_url)
pass
from __future__ import absolute_import
ROOT_EXTRA_FIELDS = 'root_extra_fields'
return "/wiki/" + self.article_name + "/_edit"
defaults = DEFAULT_MASTER_OPTS defaults.update(DEFAULT_API_OPTS)
"decision": decision, "req_reference_number": str(order_id), "req_amount": order_amount, "auth_amount": paid_amount, "req_card_number": card_number,
if name == 'SITE_NAME': return 'openedx.localhost' else: return default
self.client.logout() self._verify_response(403)
site_configuration = SiteConfigurationFactory.create( site=self.site, )
user_partititons = self.course.user_partitions self.assertEqual(len(user_partititons), 1) self.assertEqual(len(user_partititons[0].groups), 3)
cmd = ['rpmbuild', '-ba'] cmd.extend(define_opts) cmd.append(spec_path) stdout, stderr, rcode = _run_command(cmd)
course_image_asset_key = StaticContent.compute_location(course.id, course.course_image) course_image_content = StaticContent(course_image_asset_key, image_name, 'image/jpeg', image_buff) contentstore().save(course_image_content)
self.client.login(username=self.white_label_course_instructor.username, password='test')
break
return len(self._max_scores_cache)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salt.utils import decorators from salt.version import SaltStackVersion from salt.exceptions import CommandExecutionError
for svd_10, svd_20 in svds_10_v_20: assert_array_almost_equal( svd_10.explained_variance_ratio_, svd_20.explained_variance_ratio_[:10], decimal=5, )
return not self.user_partition_id == SplitTestFields.no_partition_selected['value']
if isinstance(source, (tuple, list)): source, = source
assert_raises(ValueError, k_means, X, n_clusters=X.shape[0] + 1)
from __future__ import absolute_import import os import logging
return 1.0 / (max_squared_sum + int(fit_intercept) + alpha_scaled)
src = os.path.normpath(src) link = os.path.normpath(link)
DarkLangConfig( released_languages=('es-419, en'), changed_by=self.user, enabled=True ).save()
clf = NearestCentroid() clf.fit(X_csr, y) assert_array_equal(clf.predict(T), true_result)
from salt.modules import rdp
backward_reduce_ndarray = ArrayMemmapReducer( None, pool_folder, mmap_mode, verbose) backward_reducers[np.ndarray] = backward_reduce_ndarray backward_reducers[np.memmap] = reduce_memmap
#pylint: disable=E0602
from __future__ import absolute_import
return template.strip().format(hotfix_hash=hotfix_hash)
email_msg = EmailMultiAlternatives( course_email.subject, plaintext_msg, from_addr, [email], connection=connection ) email_msg.attach_alternative(html_msg, 'text/html')
if new_weight == 1.: self.new_weight.set_value(.01)
return key.field_name in self._fields
content = String(default="content", scope=Scope.content)
task_folder = task_service.GetFolder(location) task = task_folder.GetTask(name)
for asset in assets: self.assertEquals(asset['displayname'], expected_displayname)
__func_alias__ = {'list_': 'list'}
from __future__ import unicode_literals
saltenv = env
distance_to_candidates = euclidean_distances( X[candidate_ids], X, Y_norm_squared=x_squared_norms, squared=True)
serialization_options = { 'favorite_editor': { 'default': 'vim', }, }
actual_status = certs_api.example_certificates_status(self.COURSE_KEY) self.assertEqual(list(expected_statuses), actual_status)
from datetime import timedelta, datetime import json
if Y is not None: H_hat[-1] = Y
for block_key in block_structure.topological_traversal(): block_structure.set_transformer_block_field( block_key, cls, data_key, cls._create_block_value(block_key, data_key) )
self.cohort_a_student_username = "cohort_a_student" self.cohort_a_student_email = "cohort_a_student@example.com" StudioAutoAuthPage( self.browser, username=self.cohort_a_student_username, email=self.cohort_a_student_email, no_login=True ).visit()
course_one_team = CourseTeamFactory.create(name="Course one team", course_id=self.course.id, topic_id=1)
self.assertEqual(seed, module.seed)
ret['changes'] = {name: __salt__['chocolatey.install'](name, version, source, force, install_args, override_args, force_x86, package_args)}
mongouri = 'mongodb://{user}:{password}@{host}:{port}/{db}'.format(**mongo_db)
try: tags = literal_eval(t)
with super(UpdateThreadUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
for field in ['id', 'name', 'course_id', 'topic_id', 'date_created', 'description']: self.assertIn(field, team)
n_leaves = n_samples
event.__grains__ = {} event.__salt__ = {} event.__context__ = {} event.__opts__ = {}
script = 'raise Exception("Test")' problem = self.build_problem(answer=script)
response = requests.put(self.url, data={'test_unicode': u'\u2603 the snowman'}) self.assertEqual(response.status_code, 400)
salt '*' vsphere.get_vsan_enabled my.esxi.host root bad-password
if opts.all_categories: categories = None else: categories = [ 'alt.atheism', 'talk.religion.misc', 'comp.graphics', 'sci.space', ]
bower.__salt__ = {}
exc_info_on_loglevel=logging.DEBUG
Lars.fit(self, X, y) return self
if url is not None:
saltenv = env
return
print "checking effects..." after = EmailEnrollmentState(self.course_key, eobjs.email) self.assertEqual(after, after_ideal)
if sorted(map1) != sorted(map2): #log.debug('diff_mtime_map: the maps are different') return True
grains = dict() if osdata['kernel'] != 'Windows': return grains
self.q(css=".login-button").click()
if __name__ == '__main__': from integration import run_tests run_tests(PillarModuleTestCase, needs_daemon=False)
self.teams_page.click_all_topics() self.verify_my_team_count(1)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
try: return _render_to_html(_get_final_tree(ex)) except ParseException: return err(ex)
self.assertEqual( reverification_service.get_status(self.user.id, unicode(self.course_id), self.final_checkpoint_location), 'skipped' )
still_in_grace = CapaFactory.create(showanswer='finished', max_attempts="1", attempts="1", due=self.yesterday_str, graceperiod=self.two_day_delta_str) self.assertTrue(still_in_grace.answer_available())
salt myminion git.submodule /path/to/repo/sub/repo update opts='--rebase'
ip_address = get_ip(request) if ip_address is not None: return ip_address else: return ''
else:
with check_exact_number_of_calls(store, '_get_cached_metadata_inheritance_tree', 1):
mock_model_log_exception.assert_called_once_with( 'Error sending API user notification email for request [%s].', self.api_access_request.id ) self.assertIsNotNone(self.api_access_request.id)
data = data.encode('utf-8')
youtube_str = '1.00:p2Q6BrNhdh8' youtube_str_hack = '1.0:p2Q6BrNhdh8' self.assertEqual( VideoDescriptor._parse_youtube(youtube_str), VideoDescriptor._parse_youtube(youtube_str_hack) )
rb = {0: 'Never Requires Reboot', 1: 'Always Requires Reboot', 2: 'Can Require Reboot'} results[guid]['RebootBehavior'] = rb[update.InstallationBehavior.RebootBehavior]
response = self.api_response() self.assertIn("/courses/{}/jump_to_id/".format(self.course.id), response.data['handouts_html'])
contentstore('trashcan').save(content)
import salt.utils
rfe = RFE(estimator=self.estimator, n_features_to_select=n_features_to_select, step=self.step)
clf = DecisionTreeRegressor(max_depth=3, min_samples_split=2, criterion="mse", random_state=2) clf.fit(X, y)
self.assertTrue(self.video.downloaded_transcript_contains_text('srt', 'Welcome to edX.'))
self.setup_groups_partitions() self.user_partition = self.user_partitions[0]
self.parse_xml()
if os.path.isfile(cache_file): os.remove(cache_file)
test_element = rendered_html.find("test") self.assertEqual(test_element.tag, "test") self.assertEqual(test_element.text, "Test include")
pass
REGISTRATION_EMAIL_PATTERNS_ALLOWED = None
if fexpect == fsym: return {'ok': True, 'msg': msg}
Axes3D
new_conf.append(_format_master(**line))
try: if os.path.exists(folder_path): shutil.rmtree(folder_path) except WindowsError: warnings.warn("Failed to clean temporary folder: %s" % folder_path)
smf.__salt__ = {}
compatibility_keys = ('device', 'name', 'fstype', 'opts', 'dump', 'pass')
'zmq_filtering': bool,
request = Request.blank('') response = self.item_descriptor.studio_transcript(request=request, dispatch='translation') self.assertEqual(response.status, '400 Bad Request')
def naive_log_logistic(x): return np.log(1 / (1 + np.exp(-x)))
self._user_info = None
return (NullSpace(), '')
self.components_ = np.empty((0, X.shape[1]))
self._assert_courses_not_in_overview(self.course_key_1, self.course_key_2) self.command.handle(all=True)
if self.system.anonymous_student_id: return self.data.replace("%%USER_ID%%", self.system.anonymous_student_id) return self.data
download_unittest_reports(opts) if opts.test_without_coverage is False: download_coverage_report(opts)
return True
import salt.utils
self.assertEqual(course_date, expected_course_date)
c = GSNCost( [ (0, 1.0, reconstruction_cost),
descriptor = modulestore().get_course(course_key) model = cls(descriptor) return model
STOP_TIMEOUT = 10
return (network, cidr, name, ip_version)
if hasattr(self, 'dbm'): return self.dbm return None
url = reverse('instructor_dashboard', kwargs={'course_id': unicode(course_key)}) if section is not None: url += u'#view-{section}'.format(section=section) return url
word_cloud = ItemFactory.create(parent_location=parent.location, category="word_cloud", display_name="untitled") del word_cloud.data self.assertEquals(word_cloud.data, '')
mod = include('a-pydsl-sls')
self.assertRaises(ItemNotFoundError, lambda: self.draft_store.get_all_asset_metadata(course_key, 'asset')[:1])
lines.append(line) continue
return usage_key.block_type in self.block_types_affecting_grading
from salt.states import boto_lc
@ignore_warnings def test_explained_variance(): rng = np.random.RandomState(0) n_samples = 100 n_features = 80
continue_learning = (self.model.continue_learning() and extension_continue) assert continue_learning in [True, False, 0, 1] while continue_learning: if self.exceeded_time_budget(t0, time_budget): break
item = modulestore().get_item(usage_key)
ForestClassifier = FOREST_CLASSIFIERS[name]
pass
assert_equal(len(cv), wrapped_old_skf.get_n_splits())
coef = coef.ravel()
return sys.modules[fullname]
if not fnmatch.fnmatch(repo['url'], six.text_type(remote)): continue
if item_name is not None: if item_name not in ordering: ordering.append(item_name) else: if name not in ordering: ordering.append(name)
oauth2_adapter = adapters.DOPAdapter()
self.enable_saml(enabled=False) response = self.client.get(self.METADATA_URL) self.assertEqual(response.status_code, 404)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON
assert_greater(np.min(decision_func[-2:]), np.max(decision_func[:-2])) assert_array_equal(pred, 6 * [1] + 2 * [-1])
cohort_list[0].users.add(*user_list) assert_events("added", user_list, cohort_list[:1]) mock_tracker.reset_mock()
self.verify_staff_debug_present(False)
if not (stat.S_IWGRP & fmode.st_mode or stat.S_IWOTH & fmode.st_mode): return True
assert self.xmodule_instance is not None return self.handler_url(self.xmodule_instance, 'xmodule_handler', '', '').rstrip('/?')
self.assertFalse( CourseEnrollment.objects.filter(course_id=self.course.id, user=student).exists() )
if np.abs(np_var(A) - two_pass_var(A)).max() < 1e-6: stable_var = np_var else: stable_var = two_pass_var
from __future__ import absolute_import from contextlib import contextmanager import json import sys
assert_almost_equal((3.0 * RBF(2.0))(X), (RBF(2.0) * 3.0)(X))
logger.warning("Download was incomplete, downloading again.") os.remove(archive_path)
for enrollment in _ENROLLMENTS: if student_id == enrollment['student'] and course_id == enrollment['course']['course_id']: return enrollment
if tasks.environment.dry_run: tasks.environment.info("install npm_assets") return
face_image, photo_id_image, response = self._decode_image_data( params["face_image"], params.get("photo_id_image") )
act_func = None if i == 0: act_func = self.aes[0].act_dec else: act_func = self.aes[i - 1].act_enc
add_instructor(new_course.id, user, user)
pass
list_check = lambda x: isinstance(x, list) clf = CheckingClassifier(check_X=list_check) predictions = cval.cross_val_predict(clf, X.tolist(), y.tolist())
try: self.assertIn(ret_str, instance) except AssertionError: self.run_cloud('-d {0} --assume-yes'.format(self.INSTANCE_NAME)) raise
return self.make_call( reverse('topics_detail', kwargs={'topic_id': topic_id, 'course_id': str(course_id)}), expected_status, 'get', data, **kwargs )
self.set_state_from_lcp() return response
available_version = salt.utils.alias_function(latest_version, 'available_version')
def test_real_user(useless): useless_user = Mock(email='fake@fake.com', id=useless) return useless_user
CourseSalesAdminRole(self.course.id).add_users(instructor)
if not self.is_user_authorized(request, content, loc): return HttpResponseForbidden('Unauthorized')
self.assertFalse(linode._validate_name('foo_'))
import salt.utils
import salt.utils
return course_metadata_utils.has_course_ended(self.end)
#epub_tocdup = True
sreg_response = sreg.SRegResponse.extractResponse(sreg_request, sreg_data) sreg_response.toMessage(response.fields)
L = np.zeros((max_features, max_features), dtype=Gram.dtype)
self._socket.setsockopt(zmq.IPV4ONLY, 0)
assert images.type.broadcastable == acts.type.broadcastable assert images.type.broadcastable == denoms.type.broadcastable assert images.type.broadcastable == dout.type.broadcastable
return self.q(css='.page-content-secondary .team-country :last-child').text[0]
from __future__ import absolute_import
return self.q(css='{} input[name=reset-entrance-exam-attempts]'.format(self.EE_CONTAINER))
IDP = 'https://idp.stanford.edu/' REMOTE_USER = 'test_user@stanford.edu'
if 'COMMAND' in chunks[1]:
clf.fit(X, y) assert_array_equal(np.diff(clf.scores_) > 0, True)
return self.q(css=selector)[0].text
trainer = yaml_parse.load(load_all_yaml % {'filename': filename}) trainer.main_loop()
del dgamma1, dgamma2, sd
webresponse = server.encodeResponse(response) http_response = HttpResponse(webresponse.body) http_response.status_code = webresponse.code
mock = MagicMock(return_value=False) with patch.object(composer, '_valid_composer', mock): self.assertRaises(CommandNotFoundError, composer.update, 'd')
global cuda if cuda is None: from theano.sandbox import cuda return cuda.mem_info()[0]/1024./1024
self.assertIsInstance( self.run_function('softwareupdate.update_all'), dict)
if is_staff: user = User.objects.get(email=email) user.is_staff = True user.save()
item.transcripts.pop(lang) reraised_message += ' ' + ex.message
self.assertNotIn(REG_STR, resp.content)
return True
from __future__ import absolute_import import os
self.assertEqual(second_request["parameters"]["user_full_name"], "Bobby")
for minion in get_minions():
has_children = False
from salt.utils import warn_until, kwargs_warn_until from salt.version import SaltStackVersion
from __future__ import absolute_import
REQUIRE_BASE_URL = "./"
queue = [(usage_key, ())] while len(queue) > 0:
if self.priors is None: self.class_prior_ = self.class_count_ / self.class_count_.sum()
self.base_estimator = base_estimator self.n_estimators = n_estimators self.estimator_params = estimator_params
adjusted_rand_scorer = make_scorer(adjusted_rand_score)
if 'default' in settings.MICROSITE_CONFIGURATION: self._set_microsite_config('default', subdomain, domain) return
alert_ids = get_alert_config(deployment_id, api_key=api_key, profile=profile)
retcode = 1 if outstr: raise
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
microsite.enable_microsites(log)
response_element = etree.Element("coderesponse")
return vm_result
self.navigate_to_video()
return json.loads(self._pre_requisite_courses_json)
super(StudioValidation, self).__init__(xblock_id) self.summary = None
mine.__salt__ = {} mine.__opts__ = {}
from __future__ import absolute_import
self.assertIn("What is the sum of 17 and 3?", problem_page.problem_text)
request = RequestFactory().get('/url') request.user = self.user account_settings = get_account_settings(request) self.assertEqual(account_settings['name'], full_name)
trainer = yaml_parse.load(design_matrix_yaml % {'filename': filename}) trainer.main_loop()
try: import requests
with self.assertRaises(SearchIndexingError): CoursewareSearchIndexer.do_course_reindex(modulestore(), self.course.id)
return event['event_type'] in ('load_video', 'play_video', 'pause_video')
mlp._coef_grads = [0] * (mlp.n_layers_ - 1) mlp._intercept_grads = [0] * (mlp.n_layers_ - 1)
return self.profile_image_uploaded_at is not None
theta0 = self.theta0
split = 'split' mongo = 'mongo'
for index, cert in enumerate(certificates_list): if certificate_id is not None: if int(cert['id']) == int(certificate_id): match_cert = cert
$ ./manage.py lms resubmit_error_certificates
nbrs = NearestNeighbors(n_neighbors=1).fit(X) dist, ind = nbrs.kneighbors(X, return_distance=True)
if self.request.COOKIES.get(settings.SESSION_COOKIE_NAME): self.client.response.cookies[settings.SESSION_COOKIE_NAME] = self.request.COOKIES[ settings.SESSION_COOKIE_NAME ]
initial_handlers_count = len(logging.root.handlers)
orphans = self.store.get_orphans(course_key) self.assertIn(orphan, orphans) self.assertEqual(len(orphans), 1)
with np.errstate(all="ignore"): return np.ravel(sums) / np.ravel(n_non_missing)
salt '*' vsphere.set_service_policy my.esxi.host root bad-password 'ntpd' 'automatic'
return bool(self._dict or not self.loaded)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
return user[0].state
clf = ForestClassifier(class_weight=1, random_state=0) assert_raises(ValueError, clf.fit, X, _y)
from __future__ import absolute_import import os import tempfile import textwrap
filter_out_source_path_option(reclass_opts)
def test_course_authorized_feature_off(self): BulkEmailFlag.objects.create(enabled=False, require_course_email_auth=True) cauth = CourseAuthorization(course_id=self.course.id, email_enabled=True) cauth.save()
ae = Autoencoder(5, 7, act_enc='tanh', act_dec='cos', tied_weights=True) model = UntiedAutoencoder(ae) model._ensure_extensions()
return [item + '\n' for item in ifcfg]
self.find_css('.certificate-course-title-input').first.fill(value)
return '{}_{}'.format(block_type, block_ref)
mock_results = MagicMock(return_value=[result_factory(n) for n in range(5)]) with patch.object(StudentModule, 'objects') as patched_manager: patched_manager.filter.return_value = mock_results
raise ValueError( 'ignore_lst must be a list of parameters to ignore ' '%s (type %s) was given' % (ignore_lst, type(ignore_lst)))
([[400, 150, 400, 1], [400, 450, 600, 2], [300, 225, 300, 3]],
viewer_is_visible = self.q(css=self._bounded_selector(self.VIEWER_SELECTOR)).visible editor_is_visible = self.q(css=self._bounded_selector(self.EDITOR_SELECTOR)).visible return viewer_is_visible or editor_is_visible
from __future__ import absolute_import import os import logging import json import salt.utils.http from salt.exceptions import CommandExecutionError
FEATURES['ORGANIZATIONS_APP'] = True
full_url = ( reverse(next_url, kwargs={'course_id': unicode(self.course.id)}) if next_url else next_url )
return np.vstack([kernel.bounds for kernel in self.kernels])
return ( self.enabled and self.enable_studio_tab and bool(self.authoring_app_js_path) and bool(self.authoring_app_css_path) )
problem = self.build_problem(answer='(1, ]') input_dict = {'1_2_1': '3'} with self.assertRaises(StudentInputError): problem.grade_answers(input_dict)
parent = self.get_a_block(usage_id="parent") parent.inherited = "Changed!" self.assertEqual(parent.inherited, "Changed!")
import salt.ext.six as six from salt.ext.six.moves import range
self.redefine_option_problem(problem_url_name) self.render_problem('u1', problem_url_name) self.check_state('u1', descriptor, 2, 2, 1)
xml_obj = self.split_test_module.definition_to_xml(MemoryFS())
import salt.transport.client import salt.transport.frame import salt.ext.six as six
from salttesting.helpers import ensure_in_syspath
try: verify_signatures(resp_params)
def test_user_role(): return 'staff'
if refresh: refresh_db(**kwargs)
if bulk_ops_record.active: return
from __future__ import absolute_import
'publish_session': int,
self.coach = coach = AdminFactory.create(password="test") self.client.login(username=coach.username, password="test")
FEATURES['ENABLE_MKTG_SITE'] = True FEATURES['USE_MICROSITES'] = True
ret = {'name': 'off', 'changes': {}, 'result': False, 'comment': 'off'}
new_block = self.store.get_item(new_block.location)
dataname = dataname.lower().replace(' ', '-') return re.sub(r'[().]', '', dataname)
_sample_even_odd(W_list, b_list, new_nsamples, beta, odd=marginalize_odd) _activation_even_odd(W_list, b_list, new_nsamples, beta, odd=not marginalize_odd)
if self.token is not None and 'token' not in low: low['token'] = self.token
full_name = UserProfile.objects.get(user=user).name
BULK_EMAIL_ROUTING_KEY_SMALL_JOBS = LOW_PRIORITY_QUEUE
k3 = 0.66**2 \ * RationalQuadratic(length_scale=1.2, alpha=0.78) k4 = 0.18**2 * RBF(length_scale=0.134) \
role = CourseCcxCoachRole(self.course.id) role.add_users(self.coach)
optioninput_element.set('correct', str(correct_option))
X_train, X_train_lr, y_train, y_train_lr = train_test_split(X_train, y_train, test_size=0.5)
GRAINS_CACHE = {} DETAILS = {}
config.add_subpackage('tests')
import os import random
grid_search = GridSearchCV(pipeline, parameters, n_jobs=1)
CELERYD_PREFETCH_MULTIPLIER = 1
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON
w = clf.coef_[0] a = -w[0] / w[1] xx = np.linspace(-5, 5) yy = a * xx - (clf.intercept_[0]) / w[1]
n_samples, h, w = lfw_people.images.shape
resp = self.client.ajax_post( first_update_url, payload, HTTP_X_HTTP_METHOD_OVERRIDE="PUT", REQUEST_METHOD="POST" )
anon_user = Client() resp = anon_user.get(self.view_url) self.assertEquals(resp.status_code, 302)
exc_info_on_loglevel=logging.DEBUG
log.warning( 'Minion id {0} is not who it says it is!'.format( load['id'] ) ) return {}
XML_IMPORT_ARGS = inspect.getargspec(XmlImportData.__init__).args
X, y = X[y < 2], y[y < 2]
import salt.config as config
import copy import os import re import logging from salt.ext import six try:
with warnings.catch_warnings(record=True): estimator = Estimator()
elif trigger_types[trigger_type] == TASK_TRIGGER_IDLE: trigger.Id = 'OnIdle_ID1'
if missing_vms: return ret
_("There was a problem with the staff answer to this problem: empty boundary.")
for idx in range(new_parent_cursor, len(new_parent.children)): if new_parent.children[idx].block_id == old_child_loc.block_id: new_parent_cursor = idx + 1
with check_mongo_calls(max_find, max_send): self.store.unpublish(self.vertical_x1a, self.user_id)
XMODULE_FIELDS_WITH_USAGE_KEYS = ['location', 'parent']
return self.redirect_uri
def __getstate__(self): return {"valid": self.valid, "value": self.value}
with super(SingleThreadUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create(discussion_topics={'dummy_discussion_id': {'id': 'dummy_discussion_id'}})
VS_batch = VS.make_theano_batch() new_CS_batch = VS.format_as(VS_batch, CS) new_VS_batch = VS.undo_format_as(new_CS_batch, CS) assert new_VS_batch is VS_batch
username_placeholder = _(u"JaneDoe")
import salt import salt.utils import salt.exceptions
for section in course.get_children(): curr_section = {} curr_section['display_name'] = own_metadata(section).get('display_name', '') data = [] c_subsection = 0
graph = image.img_to_graph(img, mask=mask)
kwargs_keys = list(kwargs)
self.assertContains(resp, 'payment-button')
with salt.utils.fopen(full, 'w') as _fh: _fh.writelines(lines)
from __future__ import absolute_import
self.assertEqual( self.client.session.get_expire_at_browser_close(), expire_at_browser_close )
return json.loads(self.xmodule.handle_ajax(dispatch, data))
def __init__(self): self.items = []
timestr = datetime.strftime(time, dateformat) return {'key': key, 'time': timestr}
from __future__ import absolute_import
if self.status in ORDER_STATUS_MAP.values(): return
from __future__ import absolute_import
return self.q(css="#report-downloads-table .file-download-link>a")
assert V is orig_V assert drop_mask is orig_drop_mask
return True
__virtualname__ = 'mount'
SEARCH_ENGINE = "search.tests.mock_search_engine.MockSearchEngine"
return {'id': self.id, 'expires': self.expires, 'user_id': self.user_id, 'tenant_id': self.tenant_id}
user_list[0].course_groups.add(*cohort_list) user_list[0].course_groups.clear() assert_events("removed", user_list[:1], cohort_list) mock_tracker.reset_mock()
APP_UPGRADE_CACHE_TIMEOUT = 3600
self.certificates_section.wait_for_certificate_exceptions_section() self.certificates_section.click_add_exception_button()
out, err = DETAILS['server'].sendline(cmd)
if self.y is None: return self.X else: return (self.X, self.y)
return "{course}_{run}_{name}".format( course=course.location.course, run=course.url_name, name=name )
chapter = self._find_url_name(toc, chapter_url_name) if chapter: return self._find_url_name(chapter['sections'], sequential_url_name) return None
mako_middleware_process_request(request) response = views.course_about(request, unicode(course.id)) self.assertEqual(response.status_code, 200) self.assertNotIn(in_cart_span, response.content)
except KeyError: self.send_error(400) return
self.q(css=self._bounded_selector(".toggle-cohort-management-discussions")).first.click() self.wait_for_element_visibility("#cohort-management-discussion-topics", "Waiting for discussions to appear")
Ensure myservice dashboard is managed: grafana.dashboard_present: - name: myservice - dashboard_from_pillar: default - rows_from_pillar: - systemhealth - requests
self.course_info_page.visit() self.tab_nav.go_to_tab('Course') acid_block = AcidView(self.browser, '.xblock-student_view[data-block-type=acid]') self.validate_acid_block_view(acid_block)
self.wait_for_element_visibility(ccx_name_selector, 'CCX name field is visible') self.q(css=ccx_name_selector).fill(ccx_name)
with self.assertNumQueries(6): override_field_for_ccx(self.ccx, chapter, 'start', ccx_start)
return 1 / numpy.sinh(arg)
#pylint: disable=E0602
if return_distance: dist, neigh_ind = result else: neigh_ind = result
from sklearn.externals.six.moves import cStringIO as StringIO import sys
return self._expiration_datetime
current_cost = 0.5 * residuals + alpha * np.sum(np.abs(code)) errors.append(current_cost)
if not _latest_version == _version: _refresh_db = True
run_command = (test_command + 'run').format(mode) result = __salt__['cmd.run'](run_command) ret_val[key] = _parser(result)
repo_dir = os.path.abspath(git_export_utils.GIT_REPO_EXPORT_DIR) os.mkdir(repo_dir) self.addCleanup(shutil.rmtree, repo_dir)
if not request.user.is_authenticated(): raise PermissionDenied delete_user_preference(request.user, NOTIFICATION_PREF_KEY) return HttpResponse(status=204)
with self.assertNumQueries(1): self.field_data_cache = FieldDataCache( [mock_descriptor([mock_field(Scope.user_state, 'a_field')])], course_id, self.user )
pass
for ref in self.get_env_refs(refs_post): self.repo[ref] = refs_post[ref] for ref in refs_pre: if ref not in refs_post: del self.repo[ref] return True
from __future__ import absolute_import
if 'port' not in mod_opts: logger.error("Not loading '%s'. 'port' not specified in config", __name__)
if rolename == FORUM_ROLE_ADMINISTRATOR and not has_instructor_access: return HttpResponseBadRequest("Operation requires instructor access.")
query = self.run_cloud('--query') ret_str = ' {0}:'.format(self.INSTANCE_NAME)
from __future__ import absolute_import
updates_by_type = {} for asset_type, assets in assets_by_type.iteritems(): updates_by_type[self._make_mongo_asset_key(asset_type)] = assets.as_list()
return None
from pylearn2.gui.patch_viewer import PatchViewer
return int(self.q(css=self.TOTAL_PAGES_CSS).text[0])
regex = re.compile(r'\s*repository\s*=\s*'+repo+r'/?\s*(#.*)?$')
self.assertEqual(actual_padding, expected_padding)
return next( video for video in self.previous_uploads if video["edx_video_id"] == edx_video_id )
response = view_func(request)
label = world.css_html(".level-element>header>div>div>span.xblock-display-name") assert_equal(display_name, label)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, Mock, NO_MOCK, NO_MOCK_REASON )
return
from __future__ import absolute_import
self.assertFalse(self._has_changes(locations['grandparent'])) self.assertFalse(self._has_changes(locations['parent']))
with self.assertRaises(TypeError): microsite.get_backend('microsite_configuration.microsite.get_backend', BaseMicrositeBackend)
ml_cost = (model.free_energy(pos_v).mean() - model.free_energy(neg_v).mean())
try: import confidant.client import confidant.formatter HAS_LIBS = True except ImportError: HAS_LIBS = False
obj = NearestCentroid() obj.fit(iris.data, iris.target) score = obj.score(iris.data, iris.target) s = pickle.dumps(obj)
return mock_url_prefix + handler_name
filenames = np.array(filenames) target = np.array(target)
self.returnString = matchString self.name = "'%s'" % self.returnString self.errmsg = "Expected " + self.name #self.myException.msg = self.errmsg
"error": "invalid_client", "error_description": "{} is not a public client".format(client_id),
import salt.ext.six as six import salt.utils from salt.exceptions import SaltInvocationError
'ENABLE_COURSE_SORTING_BY_START_DATE': True,
logger.debug( "Comment Service received POST request {0} to path {1}" .format(json.dumps(post_dict), self.path) )
return type(self).censor_updates != Model.censor_updates
if name in list_tasks(location): return True else: return False
changed_modules = StudentModule.objects.filter(module_state_key__in=self.ee_modules) for changed_module in changed_modules: self.assertEqual( json.loads(changed_module.state)['attempts'], 0 )
plt.figure() plt.legend(legend_rects, legend_labels, loc='upper left')
from __future__ import absolute_import
unique_student_identifier = strip_if_string(unique_student_identifier) if "@" in unique_student_identifier: student = User.objects.get(email=unique_student_identifier) else: student = User.objects.get(username=unique_student_identifier) return student
self.name = self.user.profile.name self.status = "ready" self.save()
if isinstance(value, float): return datetime.timedelta(seconds=value)
CommerceConfiguration.objects.create( checkout_on_ecommerce_service=enabled, single_course_checkout_page=checkout_page )
self._forward_pass(activations, with_output_activation=False) y_pred = activations[-1]
self.set_select_value(self.PROBLEM_TYPE_LABEL, value) EmptyPromise(lambda: self.capa_type == value, "problem type is updated in modal.").fulfill()
if callback is not None: callback(locals())
false_discovery_rate = np.mean([single_fdr(alpha, n_informative, random_state) for random_state in range(30)]) assert_greater_equal(alpha, false_discovery_rate)
try: import msgpack except ImportError: import msgpack_pure as msgpack
log = logging.getLogger(__name__)
self.colors = [np.asarray([1, 1, 0]), np.asarray([1, 0, 1]), np.asarray([0, 1, 0])]
return usage_key in self.modules[usage_key.course_key]
if retcodes.count(0) < len(retcodes): sys.stderr.write('ERROR: Minions returned with non-zero exit code\n') sys.exit(11)
self.assertAlmostEqual( -0.28, calc.evaluator({}, {}, 'SiN(6)', case_sensitive=False), delta=1e-3 )
resp = self.client.get_html('/home/') self.assertEqual(resp.status_code, 302)
super(CustomSVC, self).fit(X, y, sample_weight=sample_weight) self.data_type_ = type(X) return self
return [parse_path_data(path) for path in self._paths] if self._paths else self._paths
try: import boto.ec2 import boto.utils import boto.exception HAS_BOTO = True except ImportError: HAS_BOTO = False
def_ms = modulestore() course = def_ms.get_course(SlashSeparatedCourseKey('MITx', 'edx4edx', 'edx4edx')) CourseStaffRole(course.id).add_users(self.user)
self.win_installer = self.update_session.CreateUpdateInstaller() self.win_installer.Updates = self.install_collection
try: from salt.netapi.rest_tornado import saltnado from salt.netapi.rest_tornado import saltnado_websockets HAS_TORNADO = True except ImportError: HAS_TORNADO = False import salt.auth
super(MakoTemplateLinter, self).__init__() self.javascript_linter = JavaScriptLinter() self.python_linter = PythonLinter()
import logging import json
StudentViewTransformer('video').transform(usage_info=None, block_structure=self.block_structure)
return dict( sorted( dict_obj.items(), key=lambda x: x[1], reverse=True )[:amount] )
elif result is True: already_installed_comments.append(out['comment'])
fs.set_params(select__k=2) assert_equal(fs.fit_transform(X, y).shape, (X.shape[0], 4))
mock_from_django_user.return_value = Mock()
ret = self.run_run_plus(fun='fileserver.symlink_list', args=['backend="[roots]"']) self.assertIsInstance(ret['fun'], dict)
import salt.utils import salt.utils.itertools from salt.exceptions import SaltInvocationError
sls_file = '{0}.sls'.format(os.sep.join(repo)) if not os.path.exists(sls_file):
ignore_warnings(lshf.partial_fit)(X) assert_array_equal(X, lshf._fit_X)
self.user.is_staff = True
get_storage_container_acl = show_storage_container_acl
__virtualname__ = 'pkg'
urlpatterns += ( url(r'^404$', handler404), url(r'^500$', handler500), )
ret['changes'] = { 'testing': { 'old': 'Unchanged', 'new': 'Something pretended to change' } }
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
return False
pass
self.log_in_as_instructor() self.student_admin_section = self.visit_instructor_dashboard().select_student_admin()
self.track_selection_page.enroll('verified')
def assert_no_warnings(func, *args, **kw):
_enroll_user_in_pending_courses(regs[0].user)
class Bunch(dict): def __getattr__(self, name): return self[name]
self.assertEqual(response.status_code, 500) actual = json.loads(response.content)['detail'] self.assertIn('Call to E-Commerce API failed', actual)
'CERTIFICATES_HTML_VIEW': False,
out += 1. continue
graph.data = np.exp(-graph.data / graph.data.std())
return self.q(css='.nav-actions a.new-program-button').present
auth.add_users(request.user, role, user) role_added = True
import win32serviceutil import win32service import winerror
return str(s).replace('<', '&lt;').replace('>', '&gt;')
if value_to_mask == "NaN" or np.isnan(value_to_mask): return np.isnan(X) else: return X == value_to_mask
site_configuration_history = SiteConfigurationHistory.objects.filter( site=site_configuration.site, ).all()
__virtualname__ = 'sentry'
self.assertEqual(tab.tab_id, expected_tab_id)
return []
unicode_text = "好 各位同学".decode('utf-8') self.assertTrue(self.video.downloaded_transcript_contains_text('srt', unicode_text))
if self.force_save_button: return not self.closed() else: is_survey_question = (self.max_attempts == 0) needs_reset = self.is_submitted() and self.rerandomize == RANDOMIZATION.ALWAYS
from __future__ import absolute_import
self.assertIsInstance(BadgeClass().backend, DummyBackend)
self.pdf.drawString(horizontal_padding_from_border, y_pos,
CHECKPOINT_PATTERN = r'(?P<checkpoint_name>[^/]+)'
for probe_name in new_probes_keys_set: new_probes[probe_name] = expected_probes.pop(probe_name)
url_path = embargo_api.message_url_path(self.course.id, 'courseware') self.assertEqual(url_path, '/embargo/blocked-message/courseware/default/')
response = self.client.get(reverse('signin_user')) self.assertEqual(200, response.status_code) self.assertTrue('login-and-registration-container' in response.content)
if 'enabled' in kwargs: return _enabled_used_error(ret)
MESSAGE = _('Unable to switch to specified branch. Please check your branch name.')
response = client.delete(self.url) self.assertEqual(expected_status, response.status_code) return response
if estimator_error <= 0: return sample_weight, 1., 0.
self.restricted_course.enroll_msg_key = 'embargo' self.restricted_course.access_msg_key = 'embargo' self.restricted_course.save()
output = tensor.dot(patch_stack, kerns.flatten(2).T).reshape((B, OR, OC, K))
return (load, (filename, self._mmap_mode))
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
course_id = serializers.CharField(source='id', read_only=True)
exc_info_on_loglevel=logging.DEBUG
pass
centos7-2-iad-rackspace: provider: rackspace-iad size: general1-2 ephemeral: - size: 100 format: <swap/ext4>
raise Exception('Unable to find available messageid')
'minion_id_caching': bool,
wait_for( func=lambda _: EC.element_to_be_clickable((By.CSS_SELECTOR, css_selector,)), timeout=timeout, timeout_msg="Timed out waiting for {} to be clickable.".format(css_selector) )
with salt.utils.fopen('/usr/share/libvirt/cpu_map.xml', 'r') as cpu_map: cpu_map = minidom.parse(cpu_map)
filepath = filename
from salttesting import TestCase, skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath from salttesting.mock import ( MagicMock, NO_MOCK, NO_MOCK_REASON, patch )
self.wait_for_ajax() super(LibraryEditPage, self).wait_until_ready()
from __future__ import absolute_import import re import os import logging
if s3_meta: files = __get_pillar_files_from_s3_meta(s3_meta) environments = __get_pillar_environments(files)
element = self.q(css=BANNER_SELECTOR) return element.visible and element.text[0].startswith("Welcome to the Open edX")
msg = "No module {loc} for student {student}--access denied?".format( loc=usage_key, student=student ) TASK_LOG.debug(msg) raise UpdateProblemModuleStateError(msg)
response = self._change_password(email=self.NEW_EMAIL)
import salt.utils from salt.ext.six.moves import range
connectivity = np.eye(5)
self.asides = block_data.get('asides', {})
retc = ret.copy()
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if all((ky,kx) >= topleft) and all((ky,kx) < botright):
nftables.__salt__ = {} nftables.__opts__ = {}
now = datetime.datetime.now(pytz.UTC) tomorrow = now + datetime.timedelta(days=1) nextday = tomorrow + datetime.timedelta(days=1)
verify_file_presence(True)
ax.plot_surface(X, Y, Z, rstride=8, cstride=8, alpha=0.3, color=c) ax.plot([1], [1], [1], color=c, label=label)
from __future__ import absolute_import
import crypt HAS_CRYPT = True
from __future__ import absolute_import, print_function import copy import fnmatch import json import logging import os import shutil import sys import tarfile import tempfile import time
__opts__ = {}
self.block.group_access = group_access self.block = self.store.update_item(self.block, ModuleStoreEnum.UserID.test)
self.assertEqual(len(mail.outbox), 0)
self.assertEqual(module.attempts, 0)
msg_format = _("Status: {action} {succeeded} of {attempted}")
import salt.utils from salt.exceptions import CommandExecutionError, CommandNotFoundError
super(ThirdPartyAuthApiPermissionTest, self).setUp() client = self.configure_oauth_client() self.configure_api_permission(client, PROVIDER_ID_TESTSHIB)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'proxmox', vm_['profile'], vm_=vm_) is False: return False
self.last_submission_time = datetime.datetime.now(UTC())
try: salt_SIGKILL = signal.SIGKILL except AttributeError: salt_SIGKILL = signal.SIGTERM
strpfmt = '{0}_%a_%b_%d_%H-%M-%S_%f_%Y'.format(basename)
mopts['file_roots'] = self.actual_file_roots mopts['saltversion'] = __version__ pillar['master'] = mopts
LOGGER.exception('Failed to award certificate for program %s to user %s', program_id, username) retry = True
kw['force'] = True build_status = built(name, **kw) result = build_status['result'] status = _ret_status(build_status, name, result=result, changes={name: result}) return status
self.key = key self.value = value self.time = time self.min_compress_len = min_compress_len return True
length = int(self.headers.getheader('content-length')) data_string = self.rfile.read(length) post_dict = json.loads(data_string)
self.client.login(username=self.student.username, password=self.PASSWORD) response = self.client.get(reverse("dashboard"))
pass
from __future__ import absolute_import import os
(ok_, err, sl_) = _unify_sources_and_hashes(source=source, source_hash=source_hash, sources=sources, source_hashes=source_hashes) if not ok_: return _error(ret, err)
del params["email"] assert_email_error("A properly formatted e-mail is required")
assertBadSplit("10:9:8:7:6:5:4:3:42.42.42.42")
self.assertFalse(self.course.teams_enabled)
pca = PCA(n_components=2, whiten=True, svd_solver=solver) pca.fit(X) ll2 = pca.score(X) assert_true(ll1 > ll2)
self.verify_lists_expected_cohorts([])
log = logging.getLogger(__name__)
if cls.is_white_label(course_id, modes_dict=modes_dict): return False
self.iterator(mode='shuffled_sequential', batch_size=batch_size, num_batches=None) return self.next()
for block_hierarchy in course_hierarchy: self.build_xblock(block_hierarchy, block_map, parent=None)
axes = ('b', 's', 0, 1, 'c') view_converter = StereoViewConverter(datum_shape, axes)
raise NotImplementedError
import tornado import tornado.gen import tornado.netutil import tornado.concurrent from tornado.ioloop import IOLoop from tornado.iostream import IOStream
module = CapaFactory.create(rerandomize=RANDOMIZATION.NEVER, done=True) self.assertTrue(module.should_show_check_button())
return (self.q(css=self._bounded_selector('.cohort-management-nav')).visible and self.q(css=self._bounded_selector('.wrapper-cohort-supplemental')).visible)
attach_volume = volume_attach
result = embargo_api.check_course_access(self.course.id, user=self.user, ip_address='FE80::0202:B3FF:FE1E:8329') self.assertTrue(result)
for arrow in ARROWS: left, a, right = eq.partition(arrow) if a != '': return left, a, right
if 'schema' not in resobj: raise ValueError('missing schema field in path {0}, ' 'op {1}, response {2}'.format(path, opname, rescode))
self.assertTrue( self.run_function('shadow.set_maxdays', [TEST_USER, 20])) self.assertEqual( self.run_function('shadow.get_maxdays', [TEST_USER]), 20)
current_time = json.loads(video_event['event'])['currentTime'] self.assertAlmostEqual(current_time, time_in_seconds, delta=1)
if source != '': source_path = __salt__['cp.get_url']( source, None, saltenv=__env__)
'ENABLE_DISCUSSION_HOME_PANEL': False,
django.test.signals.template_rendered.send(sender=None, template=None, context=kwargs) return orig_render(*args, **kwargs)
EXCLUDE_ALL = '*'
if Y is not None: H_hat[-1] = Y
self.ccx = CcxFactory(course_id=self.split_course.id, coach=self.coach) last_week = datetime.datetime.now(UTC()) - datetime.timedelta(days=7)
course_id = CourseKeyField(max_length=255, db_index=True, verbose_name=_("Course"))
import salt.output import salt.utils import salt.loader import salt.template from salt.exceptions import CommandExecutionError, SaltRenderError
try: from pyVmomi import vim HAS_PYVMOMI = True except Exception: HAS_PYVMOMI = False
return redirect_with_get('register_user', request.GET)
return image.resize((side_length, side_length), Image.ANTIALIAS)
super(TestLibraryContentModuleWithSearchIndex, self).setUp() search_index_mock.search = Mock(side_effect=self._get_search_response)
if (os.path.exists(lockdirName) and os.path.isdir(lockdirName)): os.rmdir(lockdirName)
return html.cssselect('.course-item[data-course-key="{}"]'.format(unicode(course_key)))
return all([ self.q(css='body.view-group-configurations').present, self.q(css='div.ui-loading.is-hidden').present ])
url += '?payment-order-num={order_num}'.format(order_num=order.id) return HttpResponseRedirect(url)
set_inventory_base_uri_default(__opts__, kwargs)
mod_dict[mod] = lambda: None
return u'{microsite_key}: {template_uri}'.format( microsite_key=self.microsite.key, template_uri=self.template_uri )
W = rng.uniform(-self.irange, self.irange, (input_dim, self.dim * 4))
request = get_request_for_user(user) request.method = method request.META = {'CONTENT_TYPE': ['application/json']} request.body = body request.session = session or {} return request
self.run_function('assistive.install', [OSA_SCRIPT, True])
return super(ChooseModeView, self).dispatch(*args, **kwargs)
microsite.clear() with patch('django.conf.settings.MICROSITE_CONFIGURATION', False): self.assertEqual( microsite.get_all_orgs(), set() )
self.fake_payment_page.submit_payment()
import salt.client.ssh.client
__opts__.get( 'log_level', 'error' )
verify_files([logfile], salt_master_user)
if required_courses: pre_requisite_courses[course_key] = {'courses': required_courses}
jid_dir_name = jid_dir.rpartition('/')[2]
pred_decision = column_or_1d(pred_decision) pred_decision = np.ravel(pred_decision)
DATABASES = AUTH_TOKENS['DATABASES']
return self.q(css="div.problem div.capa_inputtype.textline div.correct span.status").is_present()
for svd_sparse, svd_dense in svds_sparse_v_dense: assert_array_almost_equal(svd_sparse.explained_variance_ratio_, svd_dense.explained_variance_ratio_)
pillar_mock = MagicMock(return_value=pillar_value) filestate.__salt__['pillar.get'] = pillar_mock
try: import boto import boto.sqs logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
for service in col_services: if service.name == 'Microsoft Update': return True
ii = -1
n_samples = 1500 noise = 0.05 X, _ = make_swiss_roll(n_samples, noise) X[:, 1] *= .5
bd = BinomialDeviance(2)
from salt.states import nftables
_write_file_network(network, _RH_NETWORK_FILE)
for option in self.option_list: if option.dest is None: continue
with self.assertRaises(SearchIndexingError): reindex_course_and_check_access(self.course.id, self.user)
from __future__ import absolute_import, print_function import logging
xx = np.atleast_2d(np.linspace(0, 10, 1000)).T xx = xx.astype(np.float32)
'mobile_api', 'social.apps.django_app.default',
BadgrBackend.badges.append(EXAMPLE_SLUG) self.handler._create_badge = Mock() self.handler._ensure_badge_created(self.badge_class) self.assertFalse(self.handler._create_badge.called)
import salt.utils import salt.utils.decorators as decorators from salt.ext import six from salt.exceptions import CommandExecutionError from salt.utils import locales
cls.objects.create(checkpoint=checkpoint, user_id=user_id, course_id=course_id)
self._assert_courses_in_overview(self.course_key_1, self.course_key_2)
return RequestFactory().post('/', {'client_id': client_id})
if not already_paid: url = reverse('verify_student_upgrade_and_verify', kwargs=course_kwargs)
assert is_css_present(css_selector) return retry_on_exception(lambda: css_find(css_selector)[index].html)
LOGGER.info(u"Output file: {file_path}".format(file_path=file_path))
del self.send_queue[0] continue
diabetes_X = diabetes.data[:, np.newaxis, 2]
post_params = sign(self.CLIENT_POST_PARAMS)
STATIC_ROOT = TEST_ROOT / "staticfiles"
si = _get_si()
from salt.modules import mac_power from salt.exceptions import SaltInvocationError
self.assertNotContains(resp, self.ext_user.email)
from salt.modules import bluez from salt.exceptions import CommandExecutionError import salt.utils.validate.net
full_url = "http://{site_name}".format(site_name=settings.SITE_NAME) parsed_url = urlparse(full_url)
query = [[1., 0.]]
CourseUserGroupPartitionGroup( course_user_group=cohort, partition_id=partition_id, group_id=group_id, ).save()
chapter_aside.data_field = 'new value' self.store.update_item(new_chapter, self.user_id, asides=[chapter_aside])
from salttesting import TestCase from salttesting.mock import Mock, patch
profiles_config_path = overrides['profiles_config']
([], []),
checkpoint = VerificationCheckpoint(course_id=self.course_id, checkpoint_location=reverification.location) checkpoint.save()
course_names = self.dashboard_page.wait_for_page().available_courses self.assertIn(self.course_info["display_name"], course_names)
from salttesting.helpers import ensure_in_syspath, expensiveTest
import salt.utils import salt.utils.compat import salt.ext.six as six from salt.exceptions import SaltInvocationError, CommandExecutionError
with transaction.atomic(): (user, profile, registration) = _do_create_account(form, custom_form)
import salt.utils from salt.ext import six
for user in users: get_cohort(user, self.course.id)
pass
xblock = _update_with_callback(xblock, user, old_metadata, old_content)
centerer = KernelCenterer() K_fit_centered = np.dot(X_fit_centered, X_fit_centered.T) K_fit_centered2 = centerer.fit_transform(K_fit) assert_array_almost_equal(K_fit_centered, K_fit_centered2)
update_course_structure(unicode(self.course.id))
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
TestScenario((self.demo_course,), "Empty"), TestScenario((self.html_course,), "Intro to <html>"),
return self._block_relations[usage_key].parents if usage_key in self else []
start_match = quote_regex.search(template, start_index, end_index) if start_match is None: return None else: return start_match.start()
n_features = X.shape[1] if self.n_features_to_select is None: n_features_to_select = n_features // 2 else: n_features_to_select = self.n_features_to_select
group.full_clean()
from __future__ import absolute_import import os
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course_key): self.assertTrue(self.store.has_item(problem_location)) assertProblemNameEquals(problem_original_name)
with mock.patch('requests.post') as mock_post: self.call_create_zendesk_ticket() self.assertFalse(mock_post.called)
if path.startswith('/static/'): path = path[len('/static/'):]
assert_raises(ValueError, enc.fit, [[0], [-1]])
clf = svm.NuSVC() clf.fit(X, Y)
self.client.logout() response = self.client.post(reverse('donation')) self.assertEqual(response.status_code, 404)
values = self.get_param_values() values = [value.reshape(value.size) for value in values] return np.concatenate(values, axis=0)
self.assertGreater(len(items[0].question), 0)
from __future__ import absolute_import import logging import os import os.path import json
while stack:
sorted_dists_exact = np.sort(distances_exact[0]) sorted_dists_approx = np.sort(distances_approx[0])
self.child_fd = self.stdin
self.cache = salt.utils.cache.CacheFactory.factory( self.opts['pillar_cache_backend'], self.opts['pillar_cache_ttl'], minion_cache_path=self._minion_cache_path(minion_id))
features = np.arange(n_features)[support_] self.estimator_ = clone(self.estimator) self.estimator_.fit(X[:, features], y)
return MembershipPageAutoEnrollSection(self.browser)
super(SupportViewIndexTests, self).setUp() SupportStaffRole().add_users(self.user)
images = []
return False
new_conf.append(new_line)
winrepo_cachefile = os.path.join(winrepo_dir, winrepo_cachefile)
assert_equal(5, StratifiedKFold(5).get_n_splits(X, y))
if dataset.y is not None: dataset.y = numpy.repeat(dataset.y, num_patches / X.shape[0])
wclf = svm.SVC(kernel='linear', class_weight={1: 10}) wclf.fit(X, y)
category_msgs = msg_dict[category] for category_msg in category_msgs: msg.append(message_dict[(category, category_msg)])
if s is None: ret = salt.utils.shlex_split('') else: ret = salt.utils.shlex_split(s)
return datetime.fromtimestamp(os.path.getatime(self.path(name)))
from salt.pillar.sql_base import SqlBaseExtPillar
title = _("Powered by Open edX") return { "url": settings.FOOTER_OPENEDX_URL, "title": title, "image": settings.FOOTER_OPENEDX_LOGO_IMAGE, }
old_roles.add(role)
self.assertEquals( SafeSessionMiddleware.get_user_id_from_session(self.request), self.user.id )
object_image_index = [0, ] blank_image_index = [0, ] blank_label = _get_blank_label(dataset)
y_true, _, probas_pred = make_prediction(binary=True)
'limits': { 'CPU': 1, },
template_dir_name = "about" module_class = AboutModule
self.Ut = numpy.zeros([self.n_eigen, self.n_dim])
return Bunch(data=pairs.reshape(len(pairs), -1), pairs=pairs, target=target, target_names=target_names, DESCR="'%s' segment of the LFW pairs dataset" % subset)
return v4_int_to_packed(self._ip)
self.assertTrue( bool(access.has_staff_access_to_preview_mode(self.global_staff, obj=self.course, course_key=course_key)) )
import salt.ext.six as six
hosts = list(set(hosts)) return hosts
_upload_sjson_file(good_sjson, self.item_descriptor.location)
n_samples = 100 n_features = 500 rank = 4 k = 10
self.assertEquals( value, request.session.get(LANGUAGE_SESSION_KEY, UNSET) )
MAX_STUDENTS_PER_PAGE_GRADE_BOOK = 20
CourseMode.objects.create( course_id=self.verified_course_key, mode_slug="verified", mode_display_name="verified cert", min_price=self.cost )
if kwargs.get('params', {}).get('course_id'): data.update({ "threads_count": 1, "comments_count": 2 })
from __future__ import absolute_import
if is_completed: msg = Messages.ORDER_COMPLETED.format(order_number=TEST_ORDER_NUMBER) self.assertResponseMessage(response, msg) else: self.assertResponsePaymentData(response)
self.prepare_new_page() totals_table.drawOn(self.pdf, self.margin + left_padding, self.second_page_start_y_pos - rendered_height) return self.second_page_start_y_pos - rendered_height - self.min_clearance
from __future__ import absolute_import import json import logging
self.assertTrue(self.video.is_aligned(True))
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
import salt.client.ssh import salt.runner
check_cv_coverage(cv, expected_n_iter=3, n_samples=len(y))
from __future__ import unicode_literals
for element in self.q(css=self._bounded_selector(selector)): note = EdxNoteHighlight(self.browser, element, self.item_id) note.show().remove()
__func_alias__ = { 'list_': 'list' }
self.q(css='nav.%s * .next-page-link' % position)[0].click() self.wait_until_ready()
if lines and not lines[-1].endswith(os.linesep): lines[-1] += os.linesep line = line_to_add lines.append(line)
if get_vm_status(vmid=vmobj['vmid'])['status'] != 'stopped': stop(name, vmobj['vmid'], 'action')
response = self.client.get(choose_track_url) self.assertRedirects(response, reverse('dashboard'))
results.append(benchmark(SGDClassifier(alpha=.0001, n_iter=50, penalty=penalty)))
gnomedesktop.__grains__ = {} gnomedesktop.__salt__ = {} gnomedesktop.__context__ = {} gnomedesktop.__opts__ = {}
student = UserFactory.create() CourseEnrollmentFactory.create(user=student, course_id=self.course.id) self.client.login(username=student.username, password="test")
for v in (v1, v2): counts_test = v.transform(test_data) if hasattr(counts_test, 'tocsr'): counts_test = counts_test.tocsr()
cookie = self.client.cookies[settings.EDXMKTG_USER_INFO_COOKIE_NAME] user_info = json.loads(cookie.value)
if false_discovery_rate != 0: assert_greater(false_discovery_rate, alpha / 10)
if instructor_task.task_state not in READY_STATES: result = AsyncResult(task_id) _update_instructor_task(instructor_task, result)
centers = km.cluster_centers_ assert_equal(centers.shape, (n_clusters, n_features))
self.jobs = {}
ir = IsotonicRegression(increasing='auto', out_of_bounds="raise") ir.fit(x, y)
icon_class = None icon_image = None secondary = False
self.assertTrue(filecmp.cmp(path_test + '.bak', path_in))
credit_request, created = CreditRequest.objects.get_or_create( course=credit_course, provider=credit_provider, username=username, )
self._assert_num_requests(2)
self.interpolates_text_or_html = True
def __init__(self): self.val_record = []
VerificationCheckpoint.get_or_create_verification_checkpoint(course_key, related_assessment_location)
for word in self.student_words: temp_all_words[word] = temp_all_words.get(word, 0) + 1
response = problem.responders.values()[0] self.assertFalse(response.has_mask()) self.assertFalse(response.has_answerpool())
module = CapaFactory.create(max_attempts=None, rerandomize=RANDOMIZATION.NEVER, done=False) self.assertFalse(module.should_show_save_button())
self.assertFalse(CourseEnrollment.is_enrolled(self.user, self.course.id))
module_class = RandomizeModule resources_dir = None
clf_constrained = LassoCV(n_alphas=3, eps=1e-1, max_iter=max_iter, positive=True, cv=2, n_jobs=1) clf_constrained.fit(X, y) assert_true(min(clf_constrained.coef_) >= 0)
make_asset_xml(num_assets, ASSET_XML_PATH) validate_xml(ASSET_XSD_PATH, ASSET_XML_PATH)
REGISTERED_ACCESS_ROLES = {}
del self.bias_from_marginals
if sp_version >= (0, 12): solvers.append('lbfgs')
NOTIFICATION_EMAIL_CSS = "templates/credit_notifications/credit_notification.css" NOTIFICATION_EMAIL_EDX_LOGO = "templates/credit_notifications/edx-logo-header.png"
self.cohort_b_student_username = "cohort_b_student" self.cohort_b_student_email = "cohort_b_student@example.com" StudioAutoAuthPage( self.browser, username=self.cohort_b_student_username, email=self.cohort_b_student_email, no_login=True ).visit()
options.ignore = tuple(DEFAULT_IGNORE.split(','))
return xblock.has_children
self.assertIn('pre requisite course', resp.content) self.assertIn('course that has pre requisite', resp.content)
return Bunch(data=faces.reshape(len(faces), -1), images=faces, target=target, target_names=target_names, DESCR="LFW faces dataset")
self.asset_collection.update( {'_id': course_assets.doc_id}, {'$set': updates_by_type} ) return True
strip_filenames(initial_course) strip_filenames(exported_course)
self.q(css='.prompt.error .action-primary').click()
rule = rule.strip()
module = CapaFactory.create(max_attempts="1", attempts="1") self.assertTrue(module.closed())
rng = np.random.RandomState(seed) X = rng.randn(10, 10) Xcsr = csr_matrix(X)
pass
if 'master_list' not in opts: opts['master_list'] = local_masters
return self.transform(T)
final_yaml_str = yaml_template % hyper_parameters
normalizer = (1.0 - pow(self.gamma, self.n_observations)) / \ (1.0 - self.gamma)
if latest: for pkg_name in latest: if old.get(pkg_name, 'old') == new.get(pkg_name, 'new'): ret[pkg_name] = {'current': new[pkg_name]}
if 'current_time' in self.event: self.event['currentTime'] = self.event.pop('current_time')
for logger in loggers: logger.setLevel(logging.NOTSET) logger.removeHandler(import_log_handler)
return [ desc.module_class for desc in _list_descriptors() ]
yield check_oob_score, name, iris.data, iris.target * 2 + 1
METRICS_WITH_NORMALIZE_OPTION = [ "accuracy_score", "jaccard_similarity_score", "zero_one_loss", ]
return self.log_p_x_given_z(X, theta)
ret[zpool] = {}
self.mapbias = sharedX( numpy.zeros(self.nmap), name='mb', borrow=True )
sys.stdout.write("{0}\next_mods\n".format(OPTIONS.delimiter)) sys.exit(EX_MOD_DEPLOY)
asset_deprecated = None ssck_deprecated = None
exc_info_on_loglevel=logging.DEBUG
resource['event'] = test_case['event_second'] self.check_event_response_by_key('handle_vote', resource, 'newVotes', test_case['new_votes'])
with store.bulk_operations(xblock.location.course_key):
recomposed_video_tag = CourseDetails.recompose_video_tag(video_id) cls.update_about_item(course, 'video', recomposed_video_tag, user_id)
self.assertEqual(store, modulestore()._get_modulestore_for_courselike(new_key).get_modulestore_type())
hid_acts, filters, output_shape = inputs out, = outputs assert hid_acts[0] == filters[3] flops = (hid_acts[3] * filters[0] * hid_acts[0] * filters[1] * filters[2] * hid_acts[1] * hid_acts[2] * 2) return flops
pass
self.pid = None self.stdin = None self.stdout = None self.stderr = None
self._verify_editable(self._get_course_details_response(True))
item = self.cart.orderitem_set.all().select_subclasses()[0] self.assertEquals(item.unit_cost, self.get_discount(self.cost))
return self.children(CourseOutlineChild)
scores = cross_val_score(EstimatorWithFit(), [[1], [2], [3]], [1, 0, 1], scoring=DummyScorer()) assert_array_equal(scores, 1)
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True, False], credit_type='halves' )
assert_raises(ValueError, clf.fit, X6, y4)
cmd.insert(-1, '--force-yes')
if a.ndim == 0: return idx
ScopeIds(None, node.tag, def_id, usage_id), field_data,
comps = line.split() path = comps[0] mask = comps[1]
msg = "LinearSVC does not support sample_weight." assert_warns_message( UserWarning, msg, calibrated_clf.fit, X_train, y_train, sample_weight=sw_train) probs_with_sw = calibrated_clf.predict_proba(X_test)
save_child_position(self.course, self.chapter_url_name) save_child_position(self.chapter, self.section_url_name)
n_cv = 2 cv = StratifiedKFold(n_cv) precomputed_folds = list(cv.split(train, target))
return False
update = True
scsi.__salt__ = {} scsi.__context__ = {}
self.assertFalse(res_json['success'])
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from salt.states import mdadm
import json import logging
from backports import ssl_match_hostname HAS_SSL_MATCH_HOSTNAME = True
url = reverse('verify_student_upgrade_and_verify', kwargs={'course_id': unicode(course_id)}) self.assertRedirects(response, url)
self.assertEqual([], course_detail_json['pre_requisite_courses'])
SECRET_KEY = 'dev key'
logging.getLogger(__name__).info( 'Loading Saltfile from \'{0}\''.format(self.options.saltfile) )
raise NotImplementedError()
self.assertEqual(xblock_info['is_proctored_exam'], True) self.assertEqual(xblock_info['is_time_limited'], True) self.assertEqual(xblock_info['default_time_limit_minutes'], 100)
est = LogOddsEstimator() assert_raises(ValueError, est.fit, None, np.array([1]))
raise NotImplementedError('override-me')
self._login_as_non_staff_user() self.assertFalse(self._can_access_library(self.library))
time.sleep(1) continue
self.assertFalse(user_can_skip_entrance_exam(self.anonymous_user, self.course))
from salt.ext.six.moves import shlex_quote as _cmd_quote
return unicode(data)
self.observers.append(observer)
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.save_problem(get_request_dict)
try: shutil.rmtree(repo['lockfile']) except OSError as exc: _add_error(failed, repo, exc)
self.check_group('checkboxtextgroup', 'choice', 'checkbox')
return self.q(css='.page-header .page-title')[0].text
for alg in ['SAMME', 'SAMME.R']: clf = AdaBoostClassifier(algorithm=alg, n_estimators=10) clf.fit(iris.data, iris.target, sample_weight=iris_weights)
delete_item(category='sequential', name='test_sequence')
extend(state('.start').stateconf.require(stateconf='xxx::goal'))
module = CapaFactory.create(max_attempts="0", attempts="2") self.assertTrue(module.closed())
url_path = "course_info" def is_browser_on_page(self): return self.q(css='body.view-updates').present
return self.q(css='a[data-section=student_admin].active-section').present
if not self._is_master_running(): raise salt.exceptions.SaltDaemonNotRunning( 'Salt Master is not available.')
self.assertTrue(self.video.is_video_rendered('youtube'))
check_ortho(Wx, "x weights are not orthogonal") check_ortho(Wy, "y weights are not orthogonal")
oid = tree[self.root].oid tree = self.repo[oid]
topo = self.train.get_batch_topo(1) assert topo.ndim == 4
from salt.exceptions import CommandExecutionError, SaltInvocationError
module = get_module( user, request, problem.scope_ids.usage_id, field_data_cache, )._xmodule module.system.publish(problem, 'grade', grade_dict)
i_nbrs = nbrs.radius_neighbors([my_mean], bandwidth, return_distance=False)[0] points_within = X[i_nbrs] if len(points_within) == 0:
changes[namespace] = { 'new': config, 'old': update_config, } return config
width = self.ext.config['gametrailers_width'][0] height = self.ext.config['gametrailers_height'][0] return flash_object(url, width, height)
time.sleep(0.5) return event_ret
if not organizations_enabled(): return None from organizations import api as organizations_api return organizations_api.add_organization(organization_data=organization_data)
if usage_info.has_staff_access: return
#html_short_title = None
self.assertEqual(self.export_page.header_text, 'Library Export')
centers[center_idx] *= counts[center_idx]
self.auth_page.visit() self.user_info = self.auth_page.user_info self.course_info_page.visit() self.tab_nav.go_to_tab('Course')
currency = models.CharField(default="usd", max_length=8)
with self.assertRaisesRegexp(CommandError, "Error: too few arguments"): call_command('fix_not_found')
OAUTH_OIDC_ISSUER = ENV_TOKENS['OAUTH_OIDC_ISSUER']
buf = [to_str(i) if isinstance(i, six.text_type) else i for i in buf]
if paramvalues['binddn']: connargs['binddn'] = paramvalues['binddn'] if paramvalues['bindpw']: params['mandatory'].append('bindpw')
try: progress_outputter = salt.loader.outputters(opts)[out]
self.coach = coach = AdminFactory.create() self.client.login(username=coach.username, password="test")
face_compressed = np.choose(labels, values) face_compressed.shape = face.shape
STUDIO_VIEW = 'studio_view'
self.assertEqual(len(utils.get_accessible_discussion_modules(course, self.user)), 1)
from __future__ import unicode_literals
response = self.client.post(self.send_mail_url, test_email) self.assertEquals(json.loads(response.content), self.success_content)
os.umask(current_umask)
from __future__ import absolute_import import logging
@patch('xmodule.html_module.HtmlDescriptor.definition_to_xml') def test_export_import_round_trip(self, def_to_xml): def_to_xml.return_value = lxml.etree.Element('html')
warnings.simplefilter("ignore", RuntimeWarning)
args = [self.system, '--settings=acceptance'] if self.fasttest: args.append('--skip-collect') call_task('pavelib.assets.update_assets', args=args)
self.assertFalse( self.run_function('softwareupdate.update_available', ['spongebob']))
context_dict = self.response_post_params(request.user) return render_to_response("verify_student/test/fake_softwaresecure_response.html", context_dict)
if '@' not in snapshot: ret['result'] = False ret['comment'] = 'invalid snapshot name: {0}'.format(snapshot)
upload_start_time = datetime.utcnow().replace(microsecond=0, second=0) self.import_page.upload_tarball(self.tarball_name) self.import_page.wait_for_upload()
import salt.utils from salt.exceptions import CommandExecutionError
def __init__( self ): super(Empty,self).__init__() self.name = "Empty" self.mayReturnEmpty = True self.mayIndexError = False
self.assertEqual(csv.replace('\r\n', '\n').strip(), self.CORRECT_REFUND_REPORT_CSV.strip())
self.assertTrue(self._has_changes(chapter.location)) self.assertTrue(self._has_changes(sequential.location)) self.assertTrue(self._has_changes(vertical.location))
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
from __future__ import absolute_import
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, Mock, patch ensure_in_syspath('../../')
estimator = MockImprovingEstimator(1) assert_raises(ValueError, learning_curve, estimator, X, y, exploit_incremental_learning=True)
__virtualname__ = 'pgjsonb'
return Response({"developer_message": developer_message}, status=status_code)
import os import sys import time import traceback import random
pear_group = self.notes_page.tag_groups[group_index] self.assertEqual(tag_name + " (3)", pear_group.title) self.assertTrue(pear_group.scrolled_to_top(group_index))
_schema = self._update_schema_to_aws_notation(schema) _schema.update({'$schema': _Swagger.JSON_SCHEMA_DRAFT_4, 'title': '{0} Schema'.format(model)})
TEST_DATA = None
for field_name in self.EXTRA_FIELDS: if self._is_field_visible(field_name): self.field_handlers[field_name]( form_desc, required=self._is_field_required(field_name) )
from salt.modules import memcached from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.ext.six import integer_types
return self.create_public_client(self.user, self.client_id)
import salt.state from salt.config import minion_config from salt.template import compile_template_str from salt.serializers import yamlex
unit_update_url = reverse_usage_url('xblock_handler', unit_usage_key) self.assertFalse(self._is_location_published(unit_usage_key)) self.assertFalse(self._is_location_published(html_usage_key))
self.youtube_configuration['time_to_response'] = 2.0 self.metadata = self.metadata_for_mode('youtube_html5')
_list = self.run_function('beacons.list', return_yaml=False) self.assertFalse(_list['enabled'])
log.debug( 'Gateway {0} on port {1} is reachable.'.format( test_ssh_host, test_ssh_port ) )
GITHUB_REPO_ROOT = (TEST_ROOT / "data").abspath() LOG_DIR = (TEST_ROOT / "log").abspath()
_ = lambda text: text
ret['result'] = __salt__['file.search'](name, unanchor_regex, multiline=True)
PLATFORM_TWITTER_ACCOUNT = ENV_TOKENS.get('PLATFORM_TWITTER_ACCOUNT', PLATFORM_TWITTER_ACCOUNT) PLATFORM_FACEBOOK_ACCOUNT = ENV_TOKENS.get('PLATFORM_FACEBOOK_ACCOUNT', PLATFORM_FACEBOOK_ACCOUNT)
import salt.ext.six as six
pythoncom.CoInitialize()
world.scenario_dict['COURSE'] = world.CourseFactory.create( org='edx', number=course, display_name='Test Course' )
raise TypeError('Expected sequence or array-like, got ' 'estimator %s' % x)
assert_not_equal(id(attr_value), id(attr_value_cloned))
with check_mongo_calls_range(max_finds=5, max_sends=3): self._update_partitions(reload_items=False)
assert_raises(ValueError, plot_partial_dependence, {}, X, [0])
X = np.dot(h, W) + noise
return True
'failhard': bool,
log_format = '[%(name)-15s] %(message)s' handler = TestsLoggingHandler(format=log_format) log.addHandler(handler)
from __future__ import absolute_import
def _get_coef(self): return (self.feature_log_prob_[1:] if len(self.classes_) == 2 else self.feature_log_prob_)
n_samples_curr_lab = np.sum(mask) - 1 if n_samples_curr_lab != 0: intra_clust_dists[mask] = np.sum( current_distances[:, mask], axis=1) / n_samples_curr_lab
self._set_level_of_education(level_enum) self.assertEqual(self.profile.level_of_education_display, display_level)
header_parser = struct.Struct('L') ReparseTag, = header_parser.unpack(reparse_data[:header_parser.size]) if not ReparseTag & 0xA000FFFF == 0xA000000C: return False else: return True
original_problem = module.lcp
if len(unicode(final_grade)) > 7: final_grade = u'{:.5f}'.format(final_grade) else: final_grade = unicode(final_grade)
self.assertEqual(len(response['results']), 0)
cls.objects.create(checkpoint=checkpoint, user=user, status=status)
if kw_function_args: args = [ "{0}='{1}'".format(key, value) for key, value in kw_function_args.iteritems() ]
self.video.speed = '1.0'
from salt.states import gnomedesktop
log = logging.getLogger(__name__)
return self.output_space
_create_namespace(name, apiserver_url) ret['changes'] = name ret['comment'] = "Namespace {0} created".format(name)
step = min(step, max_time - time.time()) * BLUR_FACTOR
return cls(xblock_wrapper.browser, xblock_wrapper.locator)
del self.pub_channel
aside1 = AsideFoo(scope_ids=ScopeIds('user', block_type1, def_id, usage_id), runtime=self.runtime) aside1.field11 = 'new_value11' aside1.field12 = 'new_value12'
self.chapter1 = ItemFactory.create( parent_location=self.course.location, category='chapter', display_name='untitled chapter 1' )
test_command = 'sysbench --num-threads=250 --test=mutex ' test_command += '--mutex-num={0} --mutex-locks={1} --mutex-loops={2} run ' result = None ret_val = {}
{},
with self._mock_geoip(ip_country): result = embargo_api.check_course_access(self.course.id, user=self.user, ip_address='0.0.0.0')
fallback_dtype = theano.config.floatX
try: course = get_course_with_access(request.user, 'load', course_key, check_if_enrolled=check_if_enrolled) except UserNotEnrolled: raise Http404("Course not found.")
self.courseware_page.go_to_sequential_position(position) self.problem_page.wait_for_element_presence( self.problem_page.CSS_PROBLEM_HEADER, 'wait for problem header' ) self.assertEqual(self.problem_page.problem_name, problem_name)
children = self.q(css='.note-group') return [EdxNotesChapterGroup(self.browser, child.get_attribute("id")) for child in children]
test_deviance[i] = clf.loss_(y_test, y_pred)
'reactor_worker_threads': int,
lc_block = self._refresh_children(lc_block) check()
self.matrices_save_path = None
with self.assertRaisesRegexp(ValueError, r"(?i)course not found"): perform_delegate_email_batches(entry.id, course_id, task_input, "action_name")
self.assertIn('You must wait', result['success'])
response = self.session.post( STUDIO_BASE_URL + '/xblock/', data=json.dumps(create_payload), headers=self.headers, )
super(StatsEventerTestCase, self).tearDown()
from __future__ import absolute_import
exc_info_on_loglevel=logging.DEBUG
if not isinstance(config, dict): return False, ('Configuration for memusage ' 'beacon must be a dictionary.') return True, 'Valid beacon configuration'
for terms_of_service in ["", "false", "not_boolean"]: params["terms_of_service"] = terms_of_service assert_terms_of_service_error("You must accept the terms of service.")
if isinstance(instance, Invoice): InvoiceHistory.save_invoice_snapshot(instance) elif hasattr(instance, 'invoice'): InvoiceHistory.save_invoice_snapshot(instance.invoice)
birch_models = [Birch(threshold=1.7, n_clusters=None), Birch(threshold=1.7, n_clusters=100)] final_step = ['without global clustering', 'with global clustering']
self._verify_unit_warning( self.UnitState(is_released=True, publish_state=self.PublishState.PUBLISHED, is_locked=False), None )
return None
from __future__ import absolute_import
d = d[:nreturned] z = z[:, :nreturned]
return
import salt.log import salt.crypt import salt.transport.frame from salt.exceptions import SaltReqTimeoutError
for alias in repos_cfg.sections(): repo_meta = _get_repo_info(alias, repos_cfg=repos_cfg)
ENV_TOKENS = convert_tokens(ENV_TOKENS)
#
return self.error_msg
response = self.client.get(self.courseware_url) self.assertEqual(response.status_code, 200)
self.assertNotIn(self.notes_tab, self.course.tabs)
self.assertTrue('success' in result and not result['success'])
microsite_orgs = microsite.get_all_orgs() return [course for course in courses if course.location.org not in microsite_orgs]
if isinstance(cur, six.string_types): cur = {desired_pkgs[0]: cur} if isinstance(avail, six.string_types): avail = {desired_pkgs[0]: avail}
if hasattr(self, 'scale_'): del self.scale_ del self.min_ del self.n_samples_seen_ del self.data_min_ del self.data_max_ del self.data_range_
if __opts__['test']: ret['result'] = None ret['changes'] = {'reg': {'Will add': add_change}} return ret
self.pub_channel.on_recv(self._process_cmd_socket)
activation_key = create_account(self.USERNAME, self.PASSWORD, self.EMAIL) user = User.objects.get(username=self.USERNAME)
sequential = self.store.create_child( self.user_id, chapter.location, 'sequential', block_id='subsection_one' ) self.store.publish(sequential.location, self.user_id)
grains['virtual_subtype'] = 'Xen Dom0'
return - T.nnet.sigmoid(self.G(X, model))
time.sleep(0.5)
MKTG_URL_LINK_MAP.update(ENV_TOKENS.get('MKTG_URL_LINK_MAP', {}))
user = self.create_user_and_enroll('verified')
if six.PY2: import urlparse else: import urllib.parse as urlparse
if host_name: host_ref = search_index.FindByDnsName(dnsName=host_name, vmSearch=False) else: host_ref = search_index.FindByDnsName(dnsName=host, vmSearch=False)
for cls, fields_list in class_dict.items(): for fields in fields_list: yield (cls, fields)
import logging
self.data = data
if len(image.shape) == 3 and image.shape[2] == 1: image = image[:, :, 0]
try: return self._prefix_from_ip_int(ip_int) except ValueError: pass
del self.bias_from_marginals
multi_db = True
try: milestone_paths = get_course_milestones_fulfillment_paths( unicode(course.id), serialize_user(user) ) except InvalidMilestoneRelationshipTypeException: return required_content
Uhat, s, V = linalg.svd(B, full_matrices=False) del B U = np.dot(Q, Uhat)
log.warning('Local mode detected. Event with tag {0} will NOT be sent.'.format(tag)) return False
from __future__ import absolute_import import os import re import logging from subprocess import Popen, PIPE
log.error("etcd: failed to perform 'watch' operation on key {0} due to connection error".format(key)) return {}
'track', 'eventtracking.django.apps.EventTrackingConfig',
G_diag = G_diag[:, np.newaxis]
kwargs = salt.utils.clean_kwargs(**kwargs) format_ = kwargs.pop('format', None) if kwargs: salt.utils.invalid_kwargs(kwargs)
migrate_cohort_settings(course)
self.assertEquals( block_key in block_structure, block_key not in missing_blocks, 'Expected presence in block_structure for block_key {} to match absence in missing_blocks.'.format( unicode(block_key) ), )
'event_return_blacklist': list,
return self.q(css='#upload_error').text[0]
cloned = clone(self) cloned.theta = theta return cloned
title = getattr(node, 'display_name', None) if not title: title = node.location.to_deprecated_string() return title
language = request.GET.get('language', translation.get_language())
self.assertEqual(self.browse_teams_page.header_name, self.topic['name']) self.assertEqual(self.browse_teams_page.header_description, self.topic['description'])
item['location'] = item['_id'] del item['_id']
results = (course for course in results if course.scope_ids.block_type == 'course')
self.submission = "a=1" + self.unique_id[0:5]
RateLimitConfiguration.objects.create(enabled=False)
self.all_verticals = [] self.all_units = []
path = preprocess(path) data_x, data_y = self.make_data(which_set, path)
from __future__ import absolute_import import logging import copy import re
'gather_job_timeout': int,
if block_id is None: if block_type == 'course': block_id = course_key.run else: block_id = u'{}_{}'.format(block_type, uuid4().hex[:5])
self.assertEqual(response.status_code, 200)
if 0 != len(new_file): if not new_file[-1].endswith('\n'): new_file[-1] += '\n' new_file.append(not_found_content + '\n')
LogoutPage(self.browser).visit() StudioAutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=staff).visit()
else: ZMQIOLoop.current().add_timeout(time.time() + 0.5, self._stop)
if parens is not None: left_parens = parens if left_parens == '{': left_parens = r'\{'
gmm2 = GaussianMixture(n_components=n_components, n_init=1, reg_covar=0, random_state=rng, covariance_type=covar_type).fit(X) assert_greater(gmm2.score(X), gmm1.score(X))
self.reset_password_page.visit()
from unit.modules.boto_cognitoidentity_test import BotoCognitoIdentityTestCaseMixin
MINION_CONNECT_TIMEOUT = 5
import salt.utils.url from salt.serializers.yamlex import deserialize
def render(self, name, value, attrs=None): return super(ViewersWidget, self).render(name, ', '.join(value), attrs)
self._run_command(course_key_list=[ unicode(self.courses[0].id), unicode(self.courses[1].id) ])
signal.signal(signal.SIGINT, prev_sigint_handler) signal.signal(signal.SIGTERM, prev_sigterm_handler)
return self.cache_ttl > 0
for i, species in enumerate([BV_bunch, MM_bunch]): print("_" * 80) print("Modeling distribution of species '%s'" % species.name)
Attribute('mode', 'python'), Attribute('linenumbers', 'true'), Attribute('tabsize', 4, transform=int),
super(IndexSpace, self)._validate_impl(is_numeric, batch)
log = logging.getLogger(__name__)
choose_track_url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.post(choose_track_url, self.POST_PARAMS_FOR_COURSE_MODE[course_mode])
self._set_deadlines(course.id, upgrade_deadline=deadline, verification_deadline=deadline)
msg = "AttributeError or ValueError not raised by predict" assert_raises_regex(AssertionError, msg, check_estimators_unfitted, "estimator", NoSparseClassifier)
if os.path.isfile(join(dirname(abspath(__file__)), 'private.py')):
lars = Lars(fit_intercept=False, verbose=verbose, normalize=False, precompute=gram, n_nonzero_coefs=int(regularization), fit_path=False) lars.fit(dictionary.T, X.T, Xy=cov) new_code = lars.coef_
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
exception_type = _mk_exception(exception.etype)[0] exception = exception_type(report)
if exc.errno != errno.EEXIST: raise else: ret['comment'] = 'File {0} exists and cannot be overwritten'.format(name)
chapter = self.store.create_item( self.user_id, test_course.id, 'chapter', block_id='vertical_container' )
GUID_REGEX = re.compile(r'{?([0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12})}?', re.I)
__func_alias__ = { 'list_': 'list' }
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
self._donate(self.DONATION_AMOUNT, course_id=self.course.id)
self.assertEqual(k_args, tuple()) self.assertEqual( k_kwargs.get('url'), urlparse.urljoin(self.course.ccx_connector, ccxconapi.CCXCON_COURSEXS_URL) )
missing_vms = names.difference(invalid_func_vms) if missing_vms: ret['Not Found'] = list(missing_vms) ret['Not Actioned/Not Running'] = list(names)
partial( wrap_xblock, 'PreviewRuntime', display_name_only=display_name_only, usage_id_serializer=unicode, request_token=request_token(request) ),
with self.assertRaises(PermissionDenied): add_user_with_status_granted(self.user, self.user) with self.assertRaises(PermissionDenied): update_course_creator_group(self.user, self.user, True)
self.profile.gender = gender self.profile.save()
length = int(self.headers.getheader('content-length')) data_string = self.rfile.read(length) post_dict = json.loads(data_string)
self.check_caches("mstc_cache_test_key")
self.class_weight_ = np.empty(0) return column_or_1d(y, warn=True).astype(np.float64)
for X_minibatch in np.array_split(X, 10): km.partial_fit(X_minibatch)
VS = VectorSpace(dim=27) VS_sparse = VectorSpace(dim=27, sparse=True)
kf = cval.KFold(17, 3) check_cv_coverage(kf, expected_n_iter=3, n_samples=17)
signal.signal(signal.SIGINT, self._handle_signals)
date > /tmp/salt-run: cmd.run
for (user, token) in self.tokens.items(): UserPreference.objects.create(user=user, key=NOTIFICATION_PREF_KEY, value=token)
rng = np.random.RandomState(0) n_samples, n_features, n_components = 500, 2, 2
if field.source is None: field.bind(self.field_name, self)
reg_code = CourseRegistrationCode.objects.get(code=reg_code.code) self.assertEqual(reg_code.is_valid, False)
from __future__ import absolute_import import os import copy import shutil import tempfile
transform = AdditiveChi2Sampler(sample_steps=sample_steps) assert_equal(transform.sample_interval, None)
import salt.ext.six as six
self.assertIsNone(self.service.get_credit_state(0, self.course.id))
self._auto_auth(self.STAFF_USERNAME, self.STAFF_EMAIL, True) self.course_outline.visit() self.course_outline.start_reindex() self.course_outline.wait_for_ajax()
proba[(1.0 < proba) & (proba <= 1.0 + 1e-5)] = 1.0
import msgpack
from salt.modules import schedule from salt.utils.event import SaltEvent
try:
sqrt_n = np.sqrt(len(x)) return (sqrt_n - np.linalg.norm(x, 1) / norm(x)) / (sqrt_n - 1)
kwargs['volumes_from'] = str(kwargs['volumes_from'])
self.outline.a11y_audit.config.set_scope( include=["div.video"] ) self.outline.a11y_audit.check_for_accessibility_errors()
from __future__ import absolute_import
self.client.login(username=self.user.username, password="password")
h_rows, h_cols = self.h_space.shape num_h = float(h_rows * h_cols) rval[self.transformer._filters] = 1. /num_h rval[self.b] = 1. / num_h
svc = LinearSVC(random_state=0) multi_class_svc = OneVsRestClassifier(svc) multi_target_svc = MultiOutputClassifier(multi_class_svc)
return obj["id"] in self.context["cc_requester"]["subscribed_thread_ids"]
return json.loads(self.look_at_question(self.problem_display_name).content)['progress_detail']
draft_preferred = 'rev-opt-draft-preferred'
alpha_grid, scores_path = lasso_stability_path(X, y, random_state=42, eps=0.05)
AutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=False).visit()
self.xml_data = "course info 463139"
import os CMS_SEGMENT_KEY = os.environ.get('SEGMENT_KEY')
if not os.path.isdir(path): os.makedirs(path)
available_version = salt.utils.alias_function(latest_version, 'available_version')
nsqrt = sqrt(n_samples) llconst = n_features * log(2. * np.pi) + n_components var = np.var(X, axis=0)
func_or_class.authentication_classes = ( OAuth2AuthenticationAllowInactiveUser, SessionAuthenticationAllowInactiveUser ) func_or_class.permission_classes = () if is_authenticated: func_or_class.permission_classes += (IsAuthenticated,) if is_user: func_or_class.permission_classes += (IsUserInUrl,) return func_or_class
clf = Pipeline([ ('vec', vectorizer), ('clf', Perceptron()), ])
self.assertIn('broadcast_address', self.ipv4_network._cache) self.assertIn('hostmask', self.ipv4_network._cache)
self.assertIn( settings.MICROSITE_CONFIGURATION['test_microsite']["urls"]['TOS_AND_HONOR'], data['company_tos_url'] )
module.done = True
params = self.correct_inputs.get(answer_name, {'answer': 0})
return self.q(css="#register-email").attrs('value')[0]
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return self.make_call(reverse('teams_list'), expected_status, 'post', data, **kwargs)
win_system.__salt__ = {} win_system.__opts__ = {}
self.lc_block.refresh_children() self.assertTrue(self.lc_block.validate())
is_enrolled = CourseEnrollment.is_enrolled(self.user, self.course.id) self.assertFalse(is_enrolled)
return self.get_static_transcript(request, transcripts)
self._assert_certs_in_queue(mock_queue, 2)
this_tar_file=tarfile.open(tar_filename,"r:bz2")
image_index[0] = add_mod(image_index[0], step, len(row_indices))
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.deny("error") self._assert_can_reverify()
can_assemble = {} for dev in devices: cmd = 'mdadm -E {0}'.format(dev) can_assemble[dev] = __salt__['cmd.retcode'](cmd) == 0
row = next(reader)
import salt.utils
pass
from xmodule.modulestore.inheritance import InheritanceMixin from xmodule.modulestore import prefer_xmodules from xmodule.x_module import XModuleMixin
import logging import time from datetime import datetime
request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO["username"]) self.assertEqual(request["parameters"]["user_mailing_address"], "")
self.assert_enrollment_status(as_server=True)
doc_store_config = { 'host': HOST, 'port': PORT, 'db': DB, 'collection': COLLECTION, } cls.add_asset_collection(doc_store_config)
multi_db = True
buckets = 10 bucket_width = 1. / float(buckets) for i in xrange(buckets): lower_lim = i * bucket_width upper_lim = (i+1) * bucket_width
response = self._add_edx4edx() self.assertIn(GitImportErrorNoDir(settings.GIT_REPO_DIR).message, response.content.decode('UTF-8'))
idx = np.arange(X.shape[0]) np.random.seed(RANDOM_SEED) np.random.shuffle(idx) X = X[idx] y = y[idx]
re.compile(r'^/admin/'),
ssh = salt.client.ssh.SSH(opts)
self.lc_block = self._add_library_content_block(self.course, self.lib_key)
for database_name in DATABASES: DATABASES[database_name]['ATOMIC_REQUESTS'] = False
'mode': 'r+' if memmap.mode in ('r+', 'w+') else 'r'}
for pn_key, pn_val in run_out['virgo-dummy'].items(): if pn_key == 'source_rpm': continue self.assertEqual(installed['virgo-dummy'][pn_key], pn_val)
import integration from salt.states import pip_state
if seconds < 0: continue
self.q(css=self.EXPAND_COLLAPSE_CSS).click()
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
dir_suffix = ""
uniform_batch_size = False
continue
'courseware', 'student',
assert len(str(e))
break
xblock, fields = (None, block.__dict__)
user = create_user_and_user_profile(email, username, name, country, password)
import integration
if not content_type: self.send_error(406)
self.cohort_management_page.select_always_inline_discussion()
return ' '.join(cmd)
EmptyPromise( lambda: unit.is_browser_on_page(), "loaded page {!r}".format(unit), timeout=30 ).fulfill()
self.assertEqual( course_overview.image_urls, { 'raw': expected_url, 'small': expected_url, 'large': expected_url, } ) return course_overview
'MILESTONES_APP': False,
import os
clf = PCA(n_components=2) X_true = clf.fit_transform(X_true)
exams = get_all_exams_for_course(unicode(self.course.id)) self.assertEqual(len(exams), expected_count)
assert_true(ocur == X.shape[1])
self.opts = opts
self.validate_xblock_info_consistency(xblock_info, has_child_info=has_child_info, course_outline=course_outline)
from __future__ import absolute_import
delete = salt.utils.alias_function(remove, 'delete') purge = salt.utils.alias_function(remove, 'purge')
cmp_mode = 'equal'
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
resp = self.create_xblock(parent_usage_key=self.usage_key, category='chapter') self.chapter_usage_key = self.response_usage_key(resp)
CertificateGenerationCourseSetting.objects.create( course_key=course_key, enabled=is_enabled )
from salt.states import sysrc
super(BaseTeamsPage, self).__init__(browser, course_id) self.topic = topic
pass
trainer = yaml_parse.load(test_yaml_layer3 % {'layer0_filename': layer0_filename, 'layer1_filename': layer1_filename, 'layer2_filename': layer2_filename}) trainer.main_loop()
self._assert_can_reverify()
course = modulestore().get_course(course_key, depth=2)
course_module = self.store.get_course(target_id)
X, y = make_blobs(n_samples=100, centers=10) brc = Birch(n_clusters=10) brc.fit(X)
import logging import re
if not self.q(css="input.timed_exam").present: return False
self._submit_photos( face_image=self.IMAGE_DATA, photo_id_image=self.IMAGE_DATA, full_name=self.FULL_NAME )
self.mountpoint = ''
else: response.status_code = 403 response.content = msg
from salt.states import ipmi
res = __salt__['cmd.run_all'](cmd)
return bool( settings.DEBUG or has_access(user, CourseStaffRole.ROLE, course) or has_access(user, CourseInstructorRole.ROLE, course) )
profile_image_names = get_profile_image_names(username) remove_profile_images(profile_image_names)
pass
from salt.states import ports import os
_get_file_from_s3(metadata, saltenv, fnd['bucket'], path, cached_file_path)
user_requested_access(request.user) return JsonResponse({"Status": "OK"})
model_exists_response = __salt__['boto_apigateway.api_model_exists'](restApiId=self.restApiId, modelName=model, **self._common_aws_args)
#response = conn.verifyOrder(kwargs)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
item = self.store.get_item(item_location) html = item.visibility_view().body_html() for string in substrings: self.assertIn(string, html)
n_samples_per_label = np.bincount(labels)
jid_dir, jid_file = self._make_tmp_jid_dirs()
if not pkgs: up_to_date = [] else: up_to_date = [x for x in pkgs if x not in targets]
return check_question_author(user, Thread(id=content["thread_id"]).to_dict())
if depth == 0: self.get_module.side_effect = lambda x: LeafModuleFactory(descriptor_cls=HtmlDescriptor) else: self.get_module.side_effect = lambda x: ContainerModuleFactory( descriptor_cls=VerticalBlock, depth=depth - 1 )
self.assertNotEqual(display_name_before_import, display_name_after_import)
if not settings.FEATURES.get('MILESTONES_APP', False): return None from milestones import api as milestones_api return milestones_api.add_course_content_milestone(course_id, content_id, relationship, milestone)
return os.path.basename(_bcsys(dev, 'cache'))
if not wait_for_created(data['upid'], timeout=300): return {'Error': 'Unable to create {0}, command timed out'.format(name)}
user = cc.User.from_django_user(request.user) commentable = cc.Commentable.find(commentable_id) user.follow(commentable) return JsonResponse({})
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salt.utils.cache import context_cache
mi = mutual_info_classif(X, y, discrete_features=True) assert_array_equal(np.argsort(-mi), np.array([0, 2, 1]))
if self.level_of_education: return self.__enumerable_to_display(self.LEVEL_OF_EDUCATION_CHOICES, self.level_of_education)
'default_include': str,
subnets = conn.get_all_subnets(subnet_ids=subnets)
user = UserFactory.create() self.obj.user = user self.assert_user_has_object_permission(user, True)
valid_states = [ 'Download complete', 'Already exists', ]
'pki_dir': str,
self.profile.profile_image_uploaded_at = datetime.datetime.now() self.profile.save() self.assertFalse(self.profile.has_profile_image)
HANDLER_CLASS = StubHttpRequestHandler
try: from pyroute2.ipdb import IPDB HAS_PYROUTE2 = True except ImportError: HAS_PYROUTE2 = False
china = load_sample_image("china.jpg")
ret['result'] = random.choice([True, False])
CONTENT_GROUP_CONFIGURATION_DESCRIPTION = 'The groups in this configuration can be mapped to cohort groups in the LMS.'
test = isinstance(test_list, tuple) and (not test_list[0]) self.assertTrue(test)
log = logging.getLogger(__name__)
if skip_perm_errors: return raise SaltClientError(msg)
self._assert_num_attempts(students, initial_attempts) self._test_run_with_task(reset_problem_attempts, 'reset', 0, expected_num_skipped=num_students) self._assert_num_attempts(students, 0)
CONFIG_FILE = open(settings.REPO_ROOT / "docs" / "cms_config.ini") CONFIG = ConfigParser.ConfigParser() CONFIG.readfp(CONFIG_FILE)
CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] ).install()
import salt.ext.six as six
handler.release() return instance
errors += self.state.verify_high(high) high, req_in_errors = self.state.requisite_in(high) errors += req_in_errors high = self.state.apply_exclude(high)
self.q(css='div.problem button.hint-button').click() self.wait_for_ajax()
group_id_to_child = ReferenceValueDict( help=_("Which child module students in a particular group_id should see"), scope=Scope.content )
seq_css = "ol#sequence-list>li:nth-of-type({0})>.nav-item".format(seq_index + 1) self.q(css=seq_css).first.click() self.wait_for_ajax()
'openedx.core.djangoapps.content.course_overviews', 'openedx.core.djangoapps.content.course_structures', 'lms.djangoapps.course_blocks',
self.course_nav.go_to_vertical('Test Vertical-0') self.video.wait_for_video_player_render() self.video.speed = '2.0'
obj, filename = self._write_array(obj, filename) self._filenames.append(filename) self._npy_counter += 1
return self.topo_space.np_format_as(topo_batch, self.storage_space)
index = 1 for child in subsection.get_children(): if child.location == unit.location: break index += 1
import matplotlib.pyplot as plt import numpy as np from time import time
admin.site.register(User, UserAdmin)
import salt.utils.dictupdate as dictupdate from salt.exceptions import SaltInvocationError from salt.ext.six import string_types
return u"{course}, {provider}, {status}".format( course=self.course.course_key, provider=self.provider.provider_id, status=self.status, )
os.environ.clear() os.environ.update(_orig_environ)
import salt.utils import os.path from salt.modules import key
assert_array_almost_equal(np.sum(tf, axis=1), [1.0] * n_train)
return self.lcp.done
if data and data not in self.COUNTRY_CODES: raise serializers.ValidationError( u"{code} is not a valid country code".format(code=data) ) return data
store = self._verify_modulestore_support(None, 'create_library') library = store.create_library(org, library, user_id, fields, **kwargs)
update_email_opt_in(user, org, is_opted_in)
out = opts['output']
epoch_num = 6 termination_criterion = EpochCounter(epoch_num)
url += '?auto' try: response = _urlopen(url, timeout=timeout).read().splitlines() except URLError: return 'error'
raise NotImplementedError("Deleting files from a package is not supported")
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
self.set_header('Access-Control-Allow-Methods', 'OPTIONS, GET, POST')
X, y = _boston_subset()
cmap.set(self.answer_id, queuestate=queuestate, correctness='incomplete', msg=msg)
from salt.cloud.clouds import gce from salt.exceptions import SaltCloudSystemExit
scaled = face - face.min() scaled /= scaled.max() return scaled
mako_middleware_process_request(request)
if delete_vertical: self.store.delete_item(vertical1.location, self.user.id) else: self.store.delete_item(problem1.location, self.user.id)
self.init_.fit(X, y, sample_weight)
return True
self.support = UserFactory( username=self.SUPPORT_USERNAME, email=self.SUPPORT_EMAIL, password=self.SUPPORT_PASSWORD, ) SupportStaffRole().add_users(self.support)
self.set_time("#due_time", time)
Ioinits = { 'road_stack': '.salt.road.manor.stack', }
community_ta_role.inherit_permissions(moderator_role)
'SQUELCH_PII_IN_LOGS': False,
self.assertEqual(get_site_status_msg(None), None) self.assertEqual(get_site_status_msg(self.course_key), None)
del input_payload['current_time']
serialized_course_team['pk'] = self.course_team.pk serialized_course_team.pop('membership', None)
train = SVHN('splitted_train', path=local_path) check_dtype(train)
self.course_nav.go_to_section('Test Section', 'Test Subsection')
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor' )
NON_VERIFIED_MODES = [HONOR, AUDIT, NO_ID_PROFESSIONAL_MODE]
buttons = world.css_find('div.mce-widget>button')
import salt.ext.six as six
import ioflo.app.run from ioflo.base.consoling import getConsole
if not DarkLangConfig.current().enabled: return self._clean_accept_headers(request) self._activate_preview_language(request)
if LoginFailures.is_feature_enabled(): LoginFailures.clear_lockout_counter(user)
return self.find_css("#start_time").present
value = value.rstrip('-')
existing_group_id, _ = cohorts.get_group_info_for_cohort(cohort) if existing_group_id is not None: unlink_cohort_partition_group(cohort)
self._read_until_future.exc_info()
self.client.logout()
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.set_header('Access-Control-Allow-Headers', ','.join(allowed_headers))
dict(safe_zip(range(0, 36, 2), numpy.arange(0, 360, 20))),
salt 'global_zone' pkg.install sources='[{"SMClgcc346": "/var/spool/pkg/gcc-3.4.6-sol10-sparc-local.pkg"}]' current_zone_only=True
xapi_uri = 'httpu:///var/run/xend/xen-api.sock'
return get_members(mailchimp, list_id, 'unsubscribed')
if 'FEATURES' in ENV_TOKENS: del ENV_TOKENS['FEATURES']
FEATURES['ENABLE_PAYMENT_FAKE'] = True
#)
emails = instructor_task.api.get_instructor_task_history(course_id, task_type=task_type)
self.functions['saltutil.sync_all'](saltenv='base')
print("Estimated coefficients (true, normal, RANSAC):") print(coef, model.coef_, model_ransac.estimator_.coef_)
from __future__ import absolute_import
cm = metrics.confusion_matrix(y_test, y_predicted) print(cm)
self.client.logout() response = self.client.get(self.url) self.assertEqual(response.status_code, 302)
METRIC_UNDEFINED_BINARY = [ "samples_f0.5_score", "samples_f1_score", "samples_f2_score", "samples_precision_score", "samples_recall_score", "coverage_error",
import salt.utils.cloud import salt.config as config
ans = commentable_id in course_cohort_settings.cohorted_discussions
import salt.modules.blockdev as blockdev import salt.utils
return dict( [ ("IS_REQUEST_IN_MICROSITE", microsite.is_request_in_microsite()) ] )
if len(xml_object.xpath(cls._child_tag_name)) == 0: raise ValueError("Poll_question definition must include \ at least one 'answer' tag")
grad[-1] = n_samples grad[-1] -= n_sw_outliers * epsilon ** 2 grad[-1] -= squared_loss / sigma
def __init__(self, opts, **kwargs): pass
ret = self.run_function('user.delete', [DEL_USER]) self.assertTrue(ret)
assert_array_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)
_config_filename_ = 'master'
self.correct_responses[name] = expect self.incorrect_responses[name] = self.CUSTOM_RESPONSE_INCORRECT
GlobalStaff().add_users(self.user) self.assertTrue(GlobalStaff().has_user(self.user))
import salt.ext.six as six
from __future__ import absolute_import import uuid
try: return self.get_all_decls()[id] except KeyError: self.get_all_decls()[id] = s = StateDeclaration(id) self.decls.append(s) return s
if self.dataset_local_dir == "": return filename
staff_user = User.objects.create_user('test_staff_user', 'test_staff_user@openedx.org', 'test') CourseStaffRole(self.master_course_key).add_users(staff_user)
test_svm.test_dense_liblinear_intercept_handling(svm.LinearSVC)
data = String(scope=Scope.content, default='')
self.assertFalse(self._has_changes(parent.location)) self.assertFalse(self._has_changes(child.location))
self.assertTrue(tab.validate(dict_tab)) if invalid_dict_tab: with self.assertRaises(xmodule_tabs.InvalidTabsException): tab.validate(invalid_dict_tab)
from __future__ import unicode_literals
response = data['submission']
c2pread, c2pwrite = CreatePipe(inherit_read=False, inherit_write=True) errread, errwrite = CreatePipe(inherit_read=False, inherit_write=True)
return launchctl('enable', 'system/{0}'.format(label), runas=runas)
raise NotImplementedError()
need_uniq_names = ('problem', 'sequential', 'video', 'course', 'chapter', 'videosequence', 'poll_question', 'vertical')
if start_date: date_format = _get_date_time_format(start_date) if date_format: dt_obj = datetime.strptime(start_date, date_format) else: return 'Invalid start_date' else: dt_obj = datetime.now()
if message_type == 'status': self.wait_for_element_visibility(CLASS_SELECTORS[message_type], '{} message is Visible'.format(message_type.title())) return self.q(css=CLASS_SELECTORS[message_type]).text[0]
from salt.states import group
_step.given('I have uploaded subtitles "{}"'.format(sub_id))
continue
Y_neg = Y.copy() Y_neg[0, 0] = -1 assert_raises(ValueError, transform.transform, Y_neg)
self.assertTrue('Coupon Code List' in response.content)
time.sleep(1) if groups: chgroups(name, groups) return True
all_assets, count = contentstore('trashcan').get_all_content_for_course(self.course.id) self.assertEqual(len(all_assets), 0) self.assertEqual(count, 0)
self._update_head(course_key, index_entry, asset_key.branch, new_structure['_id'])
print not iseia(2200, (E48, E96, E192)) print iseia(5490e2, (E48, E96, E192)) print iseia(2200) print not iseia(5490e2)
course = modulestore().get_course(course_id, depth=2)
if 'Code' in items or len(items['Images']['Image']) == 0: raise SaltCloudNotFound('The specified image could not be found.')
bootstrap=bootstrap, bootstrap_features=False, n_estimators=n_estimators, max_samples=max_samples, max_features=max_features, n_jobs=n_jobs, random_state=random_state, verbose=verbose)
u = np.zeros((n_targets, n_eval))
mean = X.mean(axis=0) mean_matrix = csr_matrix(mean.repeat(n).reshape((d, n))).T X = X - mean_matrix
FOOTER_ORGANIZATION_IMAGE = "images/logo.png"
self.expect_error_on_file_content( 'cohort\n', "The file must contain a 'username' column, an 'email' column, or both." )
RateLimitConfiguration.objects.create(enabled=True)
self.enable_saml() response = self.client.get(self.LOGIN_URL) self.assertEqual(response.status_code, 302)
context['document_title'] = _("Invalid Certificate")
return cls.objects.filter(registration_code__code=course_reg_code).exists()
'tools.salt_token.on': True, 'tools.salt_auth.on': True,
VerificationStatus.add_verification_status( checkpoint=self.first_checkpoint, user=self.user, status=status )
assert_warns_message(DeprecationWarning, "class_weight='auto' heuristic is deprecated", model.fit, X, y)
assert_array_equal(mb_k_means.predict(X_csr), mb_k_means.labels_)
from __future__ import absolute_import import json import copy
super(BadImplementationAbstractEnrollmentReportProvider, self).get_payment_info(user, course_id)
filename_extension = 'xml'
vm_['host'] = config.get_cloud_config_value( 'default_host', get_configured_provider(), __opts__, search_global=False )
np.maximum(R, 0, tmp) tmp.flat[::n_samples + 1] = R.flat[::n_samples + 1]
self.options.log_file = self.config.get( self._logfile_config_setting_name_ )
course_outline_page = CourseOutlinePage( self.browser, new_org, self.course_number, self.course_run ) course_outline_page.visit() course_outline_page.wait_for_page()
import salt.utils.decorators
from __future__ import absolute_import
try: if os.path.exists('/proc/sys/kernel/pty/nr'): with fopen('/proc/sys/kernel/pty/nr') as fh_: return int(fh_.read().strip())
try: record = cls.objects.get(course_id=course_id) return record.embargoed except cls.DoesNotExist: return False
resp = self._get_footer(params={'language': language}) self.assertEqual(resp.status_code, 200) json_data = json.loads(resp.content)
sigmas = sigma * rng.rand(n_features) + sigma / 2. X_hetero = X + rng.randn(n_samples, n_features) * sigmas
w = rng.randn(num_features)
raise NotImplementedError()
return cloud.list_nodes_select( list_nodes_full('function'), __opts__['query.selection'], call, )
self.navigate_to_video()
import json
if not self.check_enough_space(remote_name, local_name): log.warning(common_msg + "File %s not cached: Not enough free space" % remote_name) self.release_writelock() return filename
if self._read_sync_future is not None: self._read_sync_future.exc_info() if self._read_stream_future is not None: self._read_stream_future.exc_info()
published_xblock2 = self.store.create_item( self.user_id, self.course.id, 'vertical', block_id='test_vertical' )
from __future__ import absolute_import import os import random import string
ir = IsotonicRegression(increasing='auto', out_of_bounds="clip") ir.fit(x, y)
_list = self.run_function('beacons.list', return_yaml=False) self.assertIn('ps', _list)
try: module = getattr(self, '_xmodule', None) if not module: module = self except UndefinedContext: module = self
tuple_args = tuple(list_args) _validate_ret(parallels._normalize_args(tuple_args))
assert_raises(ValueError, clf.fit(X_, y_).predict, rng.random_sample((3, 12)))
lvs.__salt__ = {}
#show_authors = False
log.debug('Multiple environment per bucket mode') s3_meta = __get_s3_meta()
queryset = (
tid = random.choice(string.digits) + tid
try: import apt.cache import apt.debfile from aptsources import sourceslist HAS_APT = True except ImportError: HAS_APT = False
request = CreditRequest.objects.get(uuid=uuid) self.assertEqual(request.status, expected_status)
import salt.ext.six as six
import salt.utils.systemd
seed = module.seed self.assertTrue(seed is not None)
if load['tgt_type'] == 'list': int_payload['topic_lst'] = load['tgt']
if self.current_user != username: self.logout() user_email = User.objects.get(username=username).email self.login(user_email, "test") self.current_user = username
self.check_emails_sent(1, task_history_request, True)
name: shortname
if valid_size < 1.0: valid_size /= 1.0 - np.true_divide(self.n_test, self.n) self.valid_size = valid_size
'salt_event_pub_hwm': 2000, 'event_publisher_pub_hwm': 1000, 'event_match_type': 'startswith', 'minion_restart_command': [], 'pub_ret': True,
UserProfile.objects.exists() return HttpResponse(mock_render_to_string(template_name, context))
refresh_db() return ret
assert_raises_regex(ValueError, "n_init", KMeans(n_init=0).fit, X) assert_raises_regex(ValueError, "n_init", KMeans(n_init=-1).fit, X)
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
expected = { "action": "add", "results": [ { "identifier": identifier, "error": False, "userDoesNotExist": False } ] }
self.token = None
import salt.utils
#add_module_names = True
self.test_cloud_create() ret = self.run_cloud_destroy(INSTANCE_NAME)
self.io_loop.spawn_callback( self._handle_connection, client_socket, address)
(['professional'], 'professional'), (['no-id-professional'], 'no-id-professional')
datacenter_ref = salt.utils.vmware.get_mor_by_property(_get_si(), vim.Datacenter, datacenter_name) if datacenter_ref: return {datacenter_name: 'datacenter already exists'}
return self.get_transformer_data(transformer, TRANSFORMER_VERSION_KEY, 0)
return self.q(css=self._bounded_selector(".check-all-inline-discussions:checked"))
self.course_nav.q(css='button.check.Check').click() self.course_nav.wait_for_ajax()
ForestClassifier = FOREST_CLASSIFIERS[name] _y = np.vstack((y, np.array(y) * 2)).T
normalizers[normalizers < min_divisor] = 1.
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, mock_open, patch, call, NO_MOCK, NO_MOCK_REASON )
__opts__['environment'] = saltenv __opts__['pillarenv'] = pillarenv
dest_id = self.store.make_course_key(courselike_key.org, courselike_key.course, courselike_key.run)
import salt.utils.cloud
buf = buf[offset:offset+size+1][:-1] data = np.ndarray(shape, dtype, buf, order=order) data.fill(0) return data
self.assertTrue(CourseEnrollment.is_enrolled(self.user, destination_course_key))
assert len(corruptors) >= 1 self._corruptors = corruptors
self.store.publish(sequential.location, self.user_id) self.assertFalse(self._has_changes(sequential.location))
#pylint: disable=E0602
(thumbnail_content, thumbnail_location) = contentstore().generate_thumbnail( content, tempfile_path=tempfile_path, )
return self.get_text('.certificate-description')
if 'ip_address' in vm_: ip_address = str(vm_['ip_address']) elif 'public_ips' in data:
schema_attr = __salt__['postgres.schema_get'](dbname, name, **db_args)
import salt.utils import salt.utils.itertools import salt.utils.decorators as decorators import salt.utils.pkg.rpm from salt.ext.six.moves import zip from salt.ext import six
'pillar_opts': bool,
mock_problem_key = Mock(return_value=u'') mock_problem_key.course_key = self.course_key with patch.object(UsageKey, 'from_string') as patched_from_string: patched_from_string.return_value = mock_problem_key
from salt.modules import postgres import salt.ext.six as six
ret = {name: {'old': old.get(name, ''), 'new': new.get(name, '')}}
return ''
self.seq_1_vert_1_handle = 2 self.seq_1_vert_2_handle = 3 self.chap_1_seq_2_handle = 4
blend_arr = copy(patch_arr) blend_arr[mask_arr] = frgd_arr[mask_arr]
raise NotImplementedError("__eq__ not implemented in class %s." % type(self))
clf = self.factory(alpha=0.01, n_iter=5, shuffle=False) clf.fit(X, Y) assert_true(hasattr(clf, "coef_"))
if sub_sampling: doc_ratio = float(self.total_samples) / n_samples score *= doc_ratio
y_subsample = y[indices, k] classes_subsample = np.unique(y_subsample)
from salt.states import makeconf
add_openid_simple_registration(request, response, data) add_openid_attribute_exchange(request, response, data)
time.sleep(0.2)
courses_list = list(get_course_enrollments(self.student, None, [])) self.assertEqual(len(courses_list), 1) self.assertEqual(courses_list[0].course_id, course_location)
for chan_i in xrange(out_shp[-1]): channel = output[..., chan_i] start_idx = defoveate_channel(channel, rings, dense_X, start_idx)
for descriptor in items:
serialized_value = unicode(safe_cookie_data_1)
'headers': dict(self.request.headers),
select_option_by_text(language_selector, 'English') self.account_settings.wait_for_ajax() self.assertEqual(self.account_settings.value_for_dropdown_field('pref-lang'), u'English')
self.store.mappings.clear() library = self.store.get_library(library_key) self.assertEqual(library.location.library_key, library_key)
params_wrong_type_amt = params.copy() params_wrong_type_amt['ccAuthReply_amount'] = 'ab' with self.assertRaises(CCProcessorDataException): payment_accepted(params_wrong_type_amt)
clf = GradientBoostingClassifier(n_estimators=10, random_state=1)
actions.do_complete(backend, social_views._do_login, user=unlinked_user)
has_force_batch_size = getattr(model, "force_batch_size", False) train_dataset_is_uneven = \ dataset.get_num_examples() % self.batch_size != 0
cmd_mock = MagicMock(return_value=lsscsi) with patch.dict(scsi.__salt__, {'cmd.run_all': cmd_mock}): self.assertDictEqual(scsi.ls_(get_size=False), result)
self.store.unpublish(item_location, self.user_id) item = self.store.get_item(item_location) self.assertFalse(self.store.has_published_version(item))
self.process.kill()
check_ortho(pls_ca.x_weights_, "x weights are not orthogonal") check_ortho(pls_ca.y_weights_, "y weights are not orthogonal")
from __future__ import absolute_import import logging
self.saltRaetKey.status(remote.role, remote.pubber.keyhex, remote.verfer.keyhex)
self.navigate_to_video() self.assertFalse(self.video.is_button_shown('transcript_button'))
continue
all_checks_points = cls.objects.filter( user_id=user_id, checkpoint__course_id=course_key ) check_points = {} for check in all_checks_points: check_points[check.checkpoint.checkpoint_location] = check.status return check_points
if self.client.exists(self.create_path): self.is_acquired = True else: self.is_acquired = False
X, y = hastie_X, hastie_y ForestEstimator = FOREST_ESTIMATORS[name] clf = ForestEstimator(n_estimators=5, max_depth=1, warm_start=False, random_state=1) clf.fit(X, y)
ret[minion] = data yield {minion: data}
return False
CourseModeFactory.create( course_id=self.course.id, mode_slug=CourseMode.VERIFIED, mode_display_name=CourseMode.VERIFIED, expiration_datetime='1970-01-01 05:00:00' )
} track_created_event(request, event_name, course, thread, event_data)
__virtualname__ = 'pprint'
stack = traceback.extract_stack(limit=2)
log_proba = clf.predict_log_proba(X)
for offset, name in enumerate(positional[non_default_count:]): annotation = annotations.get(name, _empty) parameters.append(Parameter(name, annotation=annotation, kind=_POSITIONAL_OR_KEYWORD, default=defaults[offset]))
settings.ALLOWED_HOSTS = ["the_valid_website.com"] with self.assertRaises(SuspiciousOperation): safe_get_host(request)
return False
exc_info_on_loglevel=logging.DEBUG
self.import_asset_metadata(data_path, dest_id)
for line in output.splitlines(): if not line: continue fact, value = _format_fact(line) if not fact: continue ret[fact] = value return ret
response = self.client.get('/?preview-lang=fa-ir') self.assert_tag_has_attr(response.content, "html", "lang", "fa-ir")
draft_branch = ModuleStoreEnum.BranchName.library published_branch = ModuleStoreEnum.BranchName.library
return globals()[function](minion_id, pillar, **kwargs)
email, password = self._create_unique_user()
_, model_0_path, model_1_path = sys.argv
get_request_dict = {} result = module.reset_problem(get_request_dict)
if not self.has_partial_credit: return self.grade_without_partial_credit(student_answer=student_answer)
if next_usage.block_type == "course": path = (next_usage, path) return flatten(path) elif parent is None: return None
return cls.api_access_status(user) == cls.APPROVED
user = User.objects.get(email=email)
self.client.login(username=self.user.username, password="password")
import os import subprocess
self[asset_idx] = metadata_to_insert
'ENABLE_VIDEO_BUMPER': False,
metrics_report = (Env.METRICS_DIR / "safecommit") _write_metric(violations_count_str, metrics_report) sh("cat {metrics_report}".format(metrics_report=metrics_report), ignore_error=True)
return (200, headers, self.read_data_file('testshib_metadata.xml'))
cohort = get_cohort(user, course_key, use_cached=use_cached) return None if cohort is None else cohort.id
from __future__ import absolute_import import functools import logging import os.path import os import re import time
request = self.request_factory.get(path) return self.get_context_for_request(request)
t_start = datetime.now() clf.transform(X) delta = (datetime.now() - t_start) time_to_transform = compute_time(t_start, delta)
block_structure.remove_block_if( lambda block_key: block_key.block_type == 'split_test', keep_descendants=True, )
self.assert_enrollment_status(as_server=True)
render_args, _ = module.system.render_template.call_args self.assertEqual(len(render_args), 2)
prefix = self.lti_consumer_key + ":" return self.backend_name == social_auth.provider and social_auth.uid.startswith(prefix)
return len(self._max_scores_updates)
self.assertAcceptEquals( 'rel-ter;q=1.0, rel-ter;q=0.5', self.process_request(accept='rel-ter;q=1.0, rel;q=0.5') )
__func_alias__ = { 'reload_': 'reload' }
try: return content and content['user_id'] == str(user.id) except KeyError: return False
__virtualname__ = 'win_snmp'
if re.search('^{0}$'.format(re.escape(content)), r_data, flags=flags_num): found = True
import logging import subprocess import os
raise
self.assertEqual(context['currency_symbol'], 'Rs') self.assertEqual(context['currency'], 'PKR')
pass
FEATURES['ENABLE_S3_GRADE_DOWNLOADS'] = True FEATURES['ALLOW_COURSE_STAFF_GRADE_DOWNLOADS'] = True
negative_chains.show_negative_chains('dbm.pkl')
re.MULTILINE)
from salt.states import openstack_config
return BrandingApiConfig.current().enabled
if not self.theme_location: return False
text_content_first = email_payload_first[0]._payload[0]._payload self.assertIn( 'credit from Hogwarts School of Witchcraft and Wizardry for', text_content_first )
new_mixed_setting = convert_module_store_setting_if_needed(copy.deepcopy(old_setting))
if issue.get('pull_request'): continue issue_id = issue.get('id') if output == 'full': ret[issue_id] = issue else: ret[issue_id] = _format_issue(issue)
db_name = 'foo 1' self._db_creation_loop(db_name=db_name, returning_name=db_name, test_conn=True, connection_user=self.user, connection_pass=self.password )
if xmodule_runtime is None: xmodule_runtime = ModuleSystemFactory() self.xmodule_runtime = xmodule_runtime
course_listing = self.q(css=".course").filter(lambda el: course_name in el.text).results
resp = self.client.get_html('/home/') self.assertContains( resp, '<h1 class="page-header">Studio Home</h1>', status_code=200, html=True )
for vertical in verticals: self.assertEqual(course.xqa_key, vertical.xqa_key) self.assertEqual(course.start, vertical.start)
EmptyPromise(options_selected, "Option is selected").fulfill()
'default_top': str,
'ratelimitbackend.middleware.RateLimitMiddleware', 'edxmako.middleware.MakoMiddleware',
return super(ConfigurationModelStrategy, self).setting(name, default, backend)
nonstaff, password = self.create_non_staff_user() client = AjaxEnabledTestClient() if authenticate: client.login(username=nonstaff.username, password=password) nonstaff.is_authenticated = lambda: authenticate return client, nonstaff
from salt.utils.winservice import Service, instart import salt import salt.defaults.exitcodes
if isinstance(msg, str): if msg == 'minions': reply = serial.dumps(self.minions) creq_in.send(reply)
return {'pythonexecutable': sys.executable}
col_names = [str(descr[0]) for descr in matlab_dict['mldata_descr_ordering'][0]]
self.verify_end_date("edX/test_end/2012_Fall", "Sep 17, 2015")
Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape)
if isinstance(key, LibraryLocator): key = unicode(key) return LIBRARY_REST_URL + key
version_num = kwargs['version']
simplefilter('ignore')
from __future__ import absolute_import, print_function
import integration
ApiAccessConfig(enabled=False).save() response = self.client.post(self.url) self.assertEqual(response.status_code, 404)
choice_id = "1_2_1_choiceinput_{index}bc".format(index=index) choice_value = "choiceinput_{index}".format(index=index) answer_dict[choice_id] = choice_value
return [(t, t) for t in tokens]
self.assertEqual(_mock_pep8_violations.call_count, 1) self.assertEqual(self._mock_paver_sh.call_count, 2)
X.setflags(write=False) X_df_readonly = pd.DataFrame(X) with warnings.catch_warnings(record=True): X_df_ro_indexed = safe_indexing(X_df_readonly, inds)
return (super(ExternalDiscussionCourseTab, cls).validate(tab_dict, raise_error) and key_checker(['link'])(tab_dict, raise_error))
patcher = patch( 'social.backends.twitter.TwitterOAuth.unauthorized_token', create=True, return_value="unauth_token" ) patcher.start() self.addCleanup(patcher.stop)
'ALLOW_COURSE_STAFF_GRADE_DOWNLOADS': False,
for stream in (self.stdout, self.stderr): stream.flush()
email_instructions = _("The email address you used to register with {platform_name}").format( platform_name=settings.PLATFORM_NAME )
qry = 'CHECK TABLE {0}.{1}'.format(s_name, s_table) _execute(cur, qry) results = cur.fetchall() log.debug(results) return results
for saltenv, targets in six.iteritems(top): sorted_targets = sorted(targets, key=lambda target: orders[saltenv][target]) for target in sorted_targets: sorted_top[saltenv][target] = targets[target] return sorted_top
class1_1 = [pr[0, 0] for pr in probas] class2_1 = [pr[0, 1] for pr in probas]
assert_array_almost_equal(dist1, dist2)
self.logout() self.login(self.student_user.email, 'test')
ret = self.run_run_plus(fun='fileserver.empty_dir_list', args=['backend="[roots]"']) self.assertIsInstance(ret['fun'], list)
self.register_get_threads_response([], page=3, num_pages=3) with self.assertRaises(PageNotFoundError): get_thread_list(self.request, self.course.id, page=4, page_size=10)
with course_run_policy_dir.open('grading_policy.json', 'w') as grading_policy: grading_policy.write(dumps(courselike.grading_policy, cls=EdxJSONEncoder, sort_keys=True, indent=4))
self.assertTrue(result_dict['success'])
xml = ''.join(line.strip() for line in xml.split('\n')) factory = self.capa_factory_for_problem_xml(xml) module = factory.create()
import logging log = logging.getLogger(__file__)
context['company_privacy_urltext'] = _("Privacy Policy")
options.update({ 'site': get_config_value('site'),
p_shared = sharedX(zv[:, 0:rows:pool_rows, 0:cols:pool_cols, :]) h_shared = sharedX(zv) z_shared = sharedX(zv)
with patch('student.views.cert_info', return_value=None): response = self.client.get(reverse('dashboard')) self.assertEqual(response.status_code, 200)
authentication_classes = (OAuth2Authentication, SessionAuthentication) permission_classes = (permissions.IsAuthenticated,) serializer_class = CourseTeamSerializer
group_id, user_partition_id = get_masquerading_group_info(self.test_user, self.course.id) self.assertIsNone(group_id) self.assertIsNone(user_partition_id)
import salt.utils.openstack.nova as suon
self._assert_redirects_to_instructor_dash(response)
self.assertIn( 'Service not found', self.run_function('service.show', ['spongebob']))
if os.path.isfile('dbm.pkl'): os.remove('dbm.pkl') control.pop_load_data()
import logging
testing.assert_array_equal(F.transform(X), np.around(X, decimals=1))
self.assertTrue(SAMLConfiguration.is_enabled(), "SAML Provider Configuration only works if SAML is enabled.") obj = SAMLProviderConfig(**kwargs) obj.save() return obj
#latex_show_pagerefs = False
self.youtube_configuration.update({ 'time_to_response': 2.0, 'youtube_api_blocked': True, })
__virtualname__ = 'psget'
if self._test_dir and os.path.sep == self._test_dir[0]: shutil.rmtree(self._test_dir) self._test_dir = None
env_fail_fast_set = ( 'TESTS_FAIL_FAST' in os.environ and os.environ['TEST_FAIL_FAST'] )
if chunk.get('fun') != low.get('fun'): continue
import integration
X = check_array(X, accept_sparse=['csc'], ensure_2d=False) if issparse(X): X.sort_indices()
import gzip
#_connarg('connection_useSSL', 'useSSL')
self.factory(learning_rate="<unknown>")
import os import re import logging
return launchctl('unload', path, runas=runas)
from salt.pillar.sql_base import SqlBaseExtPillar
if 'Ebs.VolumeType' not in ex_blockdevicemappings[dev_index]: type_key = '{0}BlockDeviceMapping.{1}.Ebs.VolumeType'.format(spot_prefix, dev_index) params[type_key] = rd_type
course_overviews = course_overviews.filter(org__iexact=org)
import salt.utils.compat import salt.utils.odict as odict from salt.exceptions import SaltInvocationError
return self.n_iter
assert_false(hasattr(SequenceDescriptor, 'attempts'))
import logging
from __future__ import absolute_import
return tasks.environment.messages
self.generated_certificate.invalidate()
if not isinstance(xblock.location, LibraryUsageLocator): modulestore().has_changes(modulestore().get_course(xblock.location.course_key, depth=None))
self._fire_master_syndic_start()
from salt.modules import defaults
user = self.create_user_and_enroll('verified') self.add_verification_status(user, VerificationStatus.APPROVED_STATUS) with self.assertNumQueries(4): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
from commerce import signals
if not isinstance(opExpr, Optional): opExpr = Optional(opExpr) matchExpr = FollowedBy(opExpr.expr + thisExpr) + Group( opExpr + thisExpr )
from lxml import etree import unittest import xml.sax.saxutils as saxutils
for cookie in ['csrftoken', 'sessionid']:
def __init__(self, location): super(InvalidVersionError, self).__init__() self.location = location
return self.scope_ids.usage_id
self.assertContains(response, "Explore courses")
self._verify_components_visible(['discussion']) self._verify_student_view_visible(['discussion'])
'lang_pref.middleware.LanguagePreferenceMiddleware',
CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52 CSRF_COOKIE_SECURE = False
disable_left_right = (is_blank(grid_indices) and not (grid_dimension[0] in (0, 5)))
_rcost = MeanBinaryCrossEntropy() reconstruction_cost = lambda a, b: _rcost.cost(a, b) / ds.X.shape[1]
assert_raises(Exception, metric, y1, y2, sample_weight=np.hstack([sample_weight, sample_weight]))
inline_script = "messages[0] = {code}".format(code=self._get_random_number_code()) problem = self.build_problem(answer=inline_script)
from __future__ import absolute_import
if ret.get('Exists'): log.info('DSC Compile Config: {0}'.format(ret)) return ret
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch )
if not ignore_missing: for field in mandatory_fields: if field not in request_data: field_errors[field] = {'error_code': 'missing_field_{0}'.format(field)} if field_errors: return valid_input, field_errors
pass
return deepcopy(problemtree)
if not is_credit_course(course_key): return
scores = cval.cross_val_score(clf, X_sparse, X) assert_array_equal(scores, clf.score(X_sparse, X))
with patch('xmodule.capa_module.CapaModule.closed') as mock_closed: mock_closed.return_value = True
error_msg = _(u"You must agree to the {platform_name} {terms_of_service}.").format( platform_name=get_themed_value("PLATFORM_NAME", settings.PLATFORM_NAME), terms_of_service=terms_link )
return cls.objects.filter( username=username, course__enabled=True, deadline__gt=datetime.datetime.now(pytz.UTC) ).select_related('course')
log.debug(message) response['status'] = message return JsonResponse(response, status_code)
super(BaseLmsDashboardTest, self).setUp()
return self.q(css=".xblock-message.information").first.text[0]
self.system.modulestore.update_item(self, None)
list_escalation_policies = salt.utils.alias_function(list_policies, 'list_escalation_policies')
rng = np.random.RandomState(0) X = generate_clustered_data(n_clusters=3, n_features=3, n_samples_per_cluster=10)
import os import glob import logging import time
return ensure_csrf_cookie(func)(*args, **kwargs)
script = namespaced_function(script, globals()) reboot = namespaced_function(reboot, globals())
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
P3P_HEADER = 'CP="Open EdX does not have a P3P policy."'
from __future__ import absolute_import
self.q( css='#paging-header-select option[value={sort_order}]'.format(sort_order=sort_order) ).click() self.wait_for_ajax()
second_group = self.user_partition.groups[1] self.user_partition.scheme.current_group = second_group
if has_access(user, 'load', course_descriptor): world.enroll_user(user, course_descriptor.id)
area = area.dtype.type(area)
if not isinstance(version, string_types) and version is not None: version = str(version)
return prlctl('snapshot-delete', args, runas=runas)
self.assertEquals(imported_word_cloud.data, '')
/etc/redis/redis.conf: file.managed: - source: salt://redis.conf - template: jinja - context: bind: 127.0.0.1
gating_api.add_prerequisite(self.course.id, self.seq1.location)
if not settings.FEATURES.get('MILESTONES_APP', False): return None from milestones import api as milestones_api return milestones_api.get_course_milestones_fulfillment_paths( course_id, user_id )
self.assertContains(resp, "Home") self.assertContains(resp, "Course")
for other_label in unique_labels: if other_label != curr_label: other_mask = labels == other_label other_distances = np.mean( current_distances[:, other_mask], axis=1) inter_clust_dists[mask] = np.minimum( inter_clust_dists[mask], other_distances)
replication_item = ('Replication', 'put_replication', _describe.get('Replication', {}).get('ReplicationConfiguration'), _compare_replication, Replication, 'delete_replication')
from __future__ import absolute_import import time import json import pprint import logging import hmac import base64 from hashlib import sha256
for enrollment in manual_enrollments: self.assertEqual(enrollment.enrollment.mode, CourseMode.HONOR)
check(u"('hasnt','hasn't')", [u'hasnt', u'hasn\'t'])
raise CommandExecutionError( 'Error {0}: {1}'.format(exc.response.status_code, exc.explanation) )
ir = IsotonicRegression(increasing='auto', out_of_bounds="nan") ir.fit(x, y)
from course_wiki.plugins.markdownedx.wiki_plugin import ExtendMarkdownPlugin
expected_url = reverse( "about_course", args=[self.course.id.to_deprecated_string()] )
if context is None: context = self.serializer_context return BlockSerializer( context['block_structure'], many=True, context=context, )
_version_ary = __version__.split('.') CUR_VER = SaltStackVersion(_version_ary[0], _version_ary[1]) BORON = SaltStackVersion.from_name('Boron')
import contextlib import logging import hashlib import os import shutil import ftplib from tornado.httputil import parse_response_start_line, HTTPInputError
assert isinstance(library_id, LibraryLocator) for library in self.get_courses(**kwargs): if library.location.library_key == library_id: return library return None
config.floatX = self.prev_floatX
metadata_to_inherit = {}
os.write(fh_, str(os.getpid()))
if 'debconf.show' not in __salt__: return False
css_classes.append('xmodule_display')
return self._decision_function(X)
from salt.beacons import adb
js = {'coffee': [resource_string(__name__, 'js/src/raw/edit/metadata-only.coffee')]} js_module_name = "MetadataOnlyEditingDescriptor" mako_template = "widgets/metadata-only-edit.html"
PAGES_PACKAGE_DIR = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'pages')
if [ -z '$debian_chroot' ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
elif existing['code'] == 404: ret['comment'] = 'A pool with this name was not found.' else: ret = _load_result(existing, ret)
if delete_published: item['_id']['revision'] = MongoRevisionKey.published to_be_deleted.append(item['_id'])
raise RuntimeError( 'The syslog facility \'{0}\' is not known'.format( facility_name ) )
depth = len(b_list)
courses_list, __ = _accessible_courses_list(self.request)
import salt.utils
self.configuration = GroupConfiguration.parse(json_string) self.course = course self.assign_id(configuration_id) self.assign_group_ids() self.validate()
def add_node_as_child(self, block, node, id_generator): child_block = self.process_xml(etree.tostring(node)) block.children.append(child_block.scope_ids.usage_id)
from __future__ import unicode_literals
assert_greater(roc_auc_score(y_test, y_pred), 0.98)
X_train, y_train, sw_train = \ X[:n_samples], y[:n_samples], sample_weight[:n_samples] X_test, y_test = X[n_samples:], y[n_samples:]
for example in NON_ARRAY_LIKE_EXAMPLES: assert_raises(ValueError, unique_labels, example)
rng = self.mlp.rng if self.irange is None: raise ValueError("Recurrent layer requires an irange value in " "order to initialize its weight matrices")
#latex_logo = 'images/snake_theta2-trans.png' latex_logo = None
angle = np.arctan(u[1] / u[0])
raise NotImplementedError
CourseEnrollment.enroll(student, ccx_locator)
restart = False
example_input[0, 0] = -2.5
if service[1]: if include_enabled: enabled_services.update({service[0]: sorted(service[1].split())}) continue if include_disabled: disabled_services.update({service[0]: []})
return self.q(css=TEAMS_HEADER_CSS + ' .page-description')[0].text
DEFAULT_SHOPPINGCART_MODE_SLUG = HONOR DEFAULT_SHOPPINGCART_MODE = Mode(HONOR, _('Honor'), 0, '', 'usd', None, None, None, None)
try: from mpl_toolkits.basemap import Basemap basemap = True except ImportError: basemap = False
return StudentModule.objects.get( student=self.user, course_id=self.course_key, module_state_key=location ).state
if status.st_ino != 0: node = (status.st_dev, status.st_ino) if node in _seen: return _seen.add(node)
fstats_post = os.stat(path_test)
if isinstance(block, XModuleDescriptor):
if not CourseEnrollment.is_enrolled(user, self.course_id): raise NotEnrolledInCourseForTeam if CourseTeamMembership.user_in_team_for_course(user, self.course_id): raise AlreadyOnTeamInCourse return CourseTeamMembership.objects.create( user=user, team=self )
component.display_name = 'Changed Display Name'
import salt.utils.dictupdate as dictupdate import salt.utils from salt.exceptions import SaltInvocationError from salt.ext.six import string_types
self.loop_interval = int(self.opts['loop_interval']) self.rotate = int(time.time())
self.course_id = course_id self._doc_id = doc_id self.asset_md = asset_md
try: connection.rollback() except Error: connection.close()
staff = UserFactory() allow_access(self.course, staff, 'staff') self.assertTrue(CourseStaffRole(self.course.id).has_user(staff))
return year - year_of_birth - 1
act_enc = activation_funcs[i + 1] act_dec = act_enc if i != 0 else activation_funcs[0] aes.append( Autoencoder(layer_sizes[i], layer_sizes[i + 1], act_enc, act_dec, tied_weights=tied) )
assert self.n_unique_specs == 1
parent_url = None if parent_loc is not None: parent_url = parent_loc.to_deprecated_string()
self.courseware_page.visit() staff_page = StaffPage(self.browser, self.course_id) self.assertEqual(staff_page.staff_view_mode, 'Staff') return staff_page
from __future__ import absolute_import
donation_type = models.CharField(max_length=32, default="general", choices=DONATION_TYPES)
vb_get_manager() vbox = _virtualboxManager.vbox return vbox
salt '*' vsphere.vmotion_enable my.esxi.host root bad-password
if not status: ret['result'] = False return ret
syslog_opts.pop('socktype', None)
module = CapaFactory.create(attempts=1)
return self.q(css=self.ADD_MISSING_GROUPS_SELECTOR).present
component.edit_visibility() return ComponentVisibilityEditorView(self.browser, component.locator)
return self.enabled and self.enable_student_dashboard
self.assertEqual(iptables.build_rule(**{'if': 'not eth0'}), '! -i eth0')
'CUSTOM_COURSE_URLS': False
cv = ShuffleSplit(n_iter=100, test_size=0.2, random_state=0)
try: task_folder.RegisterTask(name, xml_text, TASK_CREATE, user_name, password, logon_type)
return ( request.path.startswith('/' + XASSET_LOCATION_TAG + '/') or request.path.startswith('/' + AssetLocator.CANONICAL_NAMESPACE) )
from salt.modules import nova
rng = np.random.RandomState([2012, 10, 9]) batch_size = 5 rows = 10 cols = 9 channels = 3 filter_rows = 4 filter_cols = filter_rows num_filters = 6
import salt.utils.cloud import salt.config as config from salt.exceptions import ( SaltCloudNotFound, SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
self.q(css='div.csh_rate_hint').click() self.wait_for_ajax()
if (self.is_data_valid is not None and not self.is_data_valid(X_subset, y_subset)): continue
try: import salt.utils.etcd_util HAS_LIBS = True except ImportError: HAS_LIBS = False
for key, value in six.iteritems(data): if key in expected_extra_kws: continue ret['kwargs'][key] = value
self.split_test_module.user_partition_id = 0
return is_active and enrollment_mode in CourseMode.UPSELL_TO_VERIFIED_MODES
phi_aj = phi(a_j) derphi_aj = derphi(a_j)
with outer_atomic(): entry = InstructorTask.objects.get(pk=entry_id) entry.task_state = PROGRESS entry.save_now()
wmi = types.ModuleType('wmi') sys.modules['wmi'] = wmi
self.assertEqual(response_obj['return'][0]['minion']['id'], 'minion')
ip_num = ET.SubElement(content, 'no-of-public-ip') ip_num.text = config.get_cloud_config_value( 'ip_num', vm_, __opts__, default='1', search_global=False )
INSTALLED_APPS += ('django_extensions',)
from __future__ import absolute_import import logging import json import os
{% from 'lib.sls' import pythonpkg with context %}
if not __opts__['test']: if archive: __salt__['vmadm.update'](vm=name, key='hostname', archive_on_delete=True)
types = [i.data_type_ for i in sparse_classifier.estimators_]
return install_updates([guid])
with check_mongo_calls(0): cached_structure = self._get_structure(self.new_course)
X = X_digits_binary[:50] y = y_digits_binary[:50]
result = __salt__['github.add_user']( name, profile=profile, **kwargs )
TASK_RUNLEVEL_LUA = 0 TASK_RUNLEVEL_HIGHEST = 1
AutoAuthPage(self.browser, course_id=self.course_id).visit()
super(TestHeaderMenu, self).setUp()
clf = clone(model) clf = model.fit(X, y)
elif self.algorithm == 'l-bfgs': self._fit_lbfgs(X, y, activations, deltas, coef_grads, intercept_grads, layer_units) return self
from __future__ import absolute_import
D = fa C = fpa db = b - a * one
#self.debug(msg)
U *= S[:self.n_components_]
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock ensure_in_syspath('../../')
all_courses = modulestore().get_courses() orgs_lowercase = [org.lower() for org in org_aliases] return [ course.id for course in all_courses if course.id.org.lower() in orgs_lowercase ]
info_log.assert_called_with( u"user already exists with username '%s' and email '%s'", 'test_student_1', 'test_student@example.com' )
if not ('test' in settings and settings['test']): _write_file_network(new_resolv, _DEB_RESOLV_FILE)
import errno import logging
n_features = 2 n_classes = 2 n_samples = 1000 X, y = make_blobs(n_samples=n_samples, n_features=n_features, centers=n_classes, random_state=11)
FEATURES['LICENSING'] = True
assert_true(set(votes[:, class_idx]).issubset(set([0., 1., 2.])))
results = { 'nickname': user.username, 'email': user.email, 'fullname': user.profile.name, }
dt_obj = salt.utils.date_cast(newdate)
binding_status = {'created': False}
if xblock_name is None: xblock_name = TestCrowdsourceHinter.XBLOCK_NAMES[0] url = self.get_handler_url(handler, xblock_name) return self.client.post(url, json.dumps(resource), '')
import salt.utils import salt.syspaths as syspaths
modes = cls.modes_for_course(course_id) return min(mode.min_price for mode in modes if mode.currency.lower() == currency.lower())
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
classifier = svm.SVC(gamma=0.001)
self.field_exclusions.add((usage_id, field_name))
(grains['kernel'], grains['nodename'], grains['kernelrelease'], version, grains['cpuarch'], _) = platform.uname()
return
rgr_ridge = Ridge(alpha=0.2) rgr_ridge.fit(proj_operator, proj.ravel()) rec_l2 = rgr_ridge.coef_.reshape(l, l)
return [('127.0.0.1:11211 (1)', {})]
logging.root.addHandler(LOGGING_NULL_HANDLER)
super(StudioCourseTest, self).setUp() self.test_xss = test_xss self.install_course_fixture(is_staff)
store = self._get_modulestore_for_courselike(asset_key.course_key) return store.delete_asset_metadata(asset_key, user_id)
if (isinstance(role, (CourseStaffRole, CourseBetaTesterRole)) and CourseInstructorRole(role.course_key).has_user(user)): return True return False
lambda_desc = __salt__['boto_lambda.describe_function'](lambda_name, **self._common_aws_args)
signed_fields = post_params.get('signed_field_names').split(',')
res = grainsmod.filter_by(dict1, grain='xxx') self.assertIs(res, None)
OPTS = {'cachedir': '/tmp/gitfs-test-cache'}
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if instance.module_type in StudentModuleHistoryExtended.HISTORY_SAVING_TYPES: history_entry = StudentModuleHistoryExtended(student_module=instance, version=None, created=instance.modified, state=instance.state, grade=instance.grade, max_grade=instance.max_grade) history_entry.save()
result = self.service.delete_student_attempt( self.student.username, unicode(self.course.id), 'foo/bar/baz', requesting_user=self.student, ) self.assertIsNone(result)
return _PSA_BACKENDS[self.backend_name]
super(SplitMongoModuleStore, self)._drop_database(database, collections, connections)
except(KeyError, ValueError): raise ValueError( u"Invalid submission: {val} for {key}".format(val=data[key], key=key) )
Application.objects.filter(user=self.request.user).delete() return super(ApiRequestStatusView, self).form_valid(form)
from __future__ import absolute_import import os import copy import errno import signal import hashlib import logging import weakref from random import randint
self.unit_page = self.outline.section('Test Section').subsection('Test Subsection').expand_subsection().unit( 'Test Unit').go_to()
self.certificates_section.fill_certificate_invalidation_user_name_field(invalid_user) self.certificates_section.click_invalidate_certificate_button() self.certificates_section.wait_for_ajax()
world.browser.execute_script('window.confirm = function(){return true;} ; window.alert = function(){return;}')
from __future__ import absolute_import import os import re import uuid import logging
ACCOUNT_VISIBILITY_CONFIGURATION = { "default_visibility": "all_users",
self.assertNotIn('error_code', json.loads(response.content))
ddata = DummyDataset(axes=('c', 0, 1, 'b')) topo = ddata.get_topological_view()
pred = sum(_samme_proba(estimator, n_classes, X) for estimator in self.estimators_)
task_entry = self._create_input_entry() with self.assertRaises(ValueError): task_class(task_entry.id, self._get_xmodule_instance_args())
try:
from __future__ import absolute_import
serializer_ctx["request"] = request
eligibilities = api.get_eligibilities_for_user("staff") self.assertEqual(eligibilities, [])
sparse_results = sparse_classifier.predict(X_test_sparse) dense_results = dense_classifier.predict(X_test) assert_array_equal(sparse_results, dense_results)
self.wait_for_element_visibility( '#pre-requisite-course', 'Prerequisite course element is available' ) return self.get_elements('#pre-requisite-course')
private_vertical = self.store.create_item(self.user.id, course_id, 'vertical', self.PRIVATE_VERTICAL) self.assertFalse(self.store.has_published_version(private_vertical))
return []
import jinja2
import salt.utils from salt.roster import get_roster_file
response = self.client.post(self.send_mail_url, test_email) self.assertEquals(json.loads(response.content), self.success_content)
#if not getattr(func, "_is_xblock_handler", False):
STATICFILES_STORAGE = 'openedx.core.lib.django_require.staticstorage.OptimizedCachedRequireJsStorage'
import os import shutil import logging import tempfile
rectangle_str = "(10,10)-(20,20);(100,100)-(200,200)"
log = logging.getLogger(__name__) request_log = logging.getLogger('requests')
def utcoffset(self, _dt): return timedelta(hours=-3) def dst(self, _dt): return timedelta(0)
unenroll_email( course_id=ccx_key, student_email=staff.email, email_students=send_email, email_params=email_params, )
salt.utils.minion.cache_jobs(self.opts, load['jid'], ret)
self.assertEqual(len(self.lc_block.get_child_descriptors()), 1) self.assertEqual(len(self.lc_block.get_content_titles()), 1)
resolve('/')
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
from salt.log import is_console_configured from salt.exceptions import SaltClientError, SaltSystemExit, \ CommandExecutionError import salt.defaults.exitcodes import salt.utils
grade_response = None
from salt.netapi.rest_tornado import saltnado from unit.netapi.rest_tornado.test_handlers import SaltnadoTestCase
history = HistoricalRecords()
return any( access_role.role == role and access_role.course_id == course_id and access_role.org == org for access_role in self._roles )
P = noise + X_dense P = theano.tensor.switch(P > 0, 1, 0) P = tensor.cast(P, theano.config.floatX)
self.upgrade_page.proceed_to_payment()
import cgi import logging
return self.get_text('.group-configuration-id .group-configuration-value')
import salt import salt.netapi
keep_lambda = lambda_ < self.threshold_lambda coef_[~keep_lambda] = 0
self.assertEqual(1, 1)
X_sparse_pruned = sparse.csr_matrix(X_dense)
- file: {good_file}
import integration import salt.utils
self.io_loop.remove_timeout(timeout)
import re import logging
task_folder = task_service.GetFolder(location) task_definition = task_folder.GetTask(name).Definition actions = task_definition.Actions
exc_info_on_loglevel=logging.DEBUG
print("Computing random projection") rp = random_projection.SparseRandomProjection(n_components=2, random_state=42) X_projected = rp.fit_transform(X) plot_embedding(X_projected, "Random Projection of the digits")
log.error('Failed to read region from instance metadata. Giving up.')
raise ItemNotFoundError(course_locator)
LOGGER.info(u"Retrieved {num_rows} records.".format(num_rows=row_count))
if cpy_error:
CoursewareSearchIndexer.do_course_reindex(store, course.id)
cc_rendered_selector = self.get_element_selector(CSS_CLASS_NAMES['closed_captions']) self.wait_for_element_invisibility(cc_rendered_selector, 'Closed captions hidden')
assert_equal(len(folds), len(labels)) for i in np.unique(folds): assert_greater_equal(tolerance, abs(sum(folds == i) - ideal_n_labels_per_fold))
contentstore().save(content) del_cached_content(content.location)
from __future__ import absolute_import
team_list = self.get_teams_list(user=user, expected_status=200, data=course_one_data) self.assertEqual(team_list['count'], 1)
from __future__ import absolute_import import os
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
survey.save_user_answers(self.student, self.student_answers_update2, self.course_id)
return proxy_output
xx = np.linspace(-1, 5, 10) yy = np.linspace(-1, 5, 10)
from __future__ import absolute_import
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
return self.inherited_settings[key.field_name]
introspect.__salt__ = {}
self.X_topo_space = self.view_converter.topo_space
sqrt_alpha = np.sqrt(alpha)
return
current_umask = os.umask(0o027) verify_files([logfile], self.config['user']) os.umask(current_umask)
if salt.utils.is_sunos(): traceroute_version = [0, 0, 0] else: cmd2 = 'traceroute --version' out2 = __salt__['cmd.run'](cmd2) try:
__proxyenabled__ = ['rest_sample']
if not filter_tabs: filtered_list.remove("tabs")
xblock = modulestore().get_item(location) xblock.visible_to_staff_only = True self.store.update_item(xblock, self.user.id)
providers = OAuth2ProviderConfig.objects.all() self.assertEquals(len(providers), 1) self.assertEquals(providers[pcount].id, provider1.id)
__virtualname__ = 'pkg'
if 'parent_url' in value: del value['parent_url'] if 'parent_sequential_url' in value: del value['parent_sequential_url']
certificate_template_asset.asset = SimpleUploadedFile('picture1.jpg', 'file contents') certificate_template_asset.save() self.assertEqual(certificate_template_asset.asset, 'certificate_template_assets/1/picture1.jpg')
import collections
estimators = dict((cov_type, GaussianMixture(n_components=n_classes, covariance_type=cov_type, max_iter=20, random_state=0)) for cov_type in ['spherical', 'diag', 'tied', 'full'])
xT_AT = self.lmul_T(self.transpose_right(x, False)) rval = self.transpose_left(xT_AT, False) return rval
est = DummyRegressor(strategy="quantile", quantile=0.8) est.fit(X_learn, y_learn) y_pred_learn = est.predict(X_learn) y_pred_test = est.predict(X_test)
self.auth_page.visit() self.dashboard_page.visit()
module.system.user_is_staff = False
self.assertTrue( self.run_function('system.set_disable_keyboard_on_lock', [True])) self.assertTrue( self.run_function('system.get_disable_keyboard_on_lock'))
COUCHBASE_CONN = None DESIGN_NAME = 'couchbase_returner' VERIFIED_VIEWS = False
context_dictionary = {}
from random import choice from string import letters, digits, punctuation RANDOM_SHARED_SECRET = ''.join( choice(letters + digits + punctuation) for x in range(250) )
self.assertEqual(csv.replace('\r\n', '\n').strip(), self.CORRECT_CSV.strip())
if not isinstance(config, dict): return False, ('Configuration for twilio_txt_msg beacon ' 'must be a dictionary.') return True, 'Valid beacon configuration'
self.settings_page.visit() self._set_pre_requisite_course()
v3.set_params(strip_accents='_gabbledegook_', preprocessor=None) assert_raises(ValueError, v3.build_preprocessor)
self.course = CourseFactory.create(emit_signals=True)
rval = -(self.beta * T.dot(state, self.bias))
self.login_page.login(email=email, password=password)
params, response = self._validate_parameters(request, bool(initial_verification)) if response is not None: return response
self.wait_for_field('image') default_links = self.q(css='.image-frame').attrs('src') return 'profiles/default' in default_links[0] if default_links else False
continue
details = api.get_course_enrollment_details(self.COURSE_ID)
import os try: import spwd HAS_SPWD = True except ImportError: HAS_SPWD = False try: import pwd except ImportError:
gaussian_matrix_params = { "n_components": opts.n_components, "random_state": opts.random_seed } transformers["GaussianRandomProjection"] = \ GaussianRandomProjection(**gaussian_matrix_params)
from __future__ import absolute_import import re
loading_css = "#loading-indicator" courses_css = '.courses-listing' return self.q(css=courses_css).visible \ and self.q(css=loading_css).present \ and not self.q(css=loading_css).visible
if hasattr(self.current_request_configuration, 'cache'): self.current_request_configuration.cache[key] = value
import integration
b = clf.support_vectors_[0] yy_down = a * xx + (b[1] - a * b[0]) b = clf.support_vectors_[-1] yy_up = a * xx + (b[1] - a * b[0])
self.assertFalse(self.has_notes_tab(self.course, self.user))
_upload_file(en_translation, self.item_descriptor.location, en_translation_filename)
delete_item(category='chapter', name='chapter_2')
provider_url = reverse('openid-provider-xrds') factory = RequestFactory() request = factory.request() abs_provider_url = request.build_absolute_uri(location=provider_url)
rnn_mo = neighbors.RadiusNeighborsClassifier(weights=weights, algorithm=algorithm) rnn_mo.fit(X_train, y_train) y_pred_mo = rnn_mo.predict(X_test)
url_path = "tabs" def is_browser_on_page(self): return self.q(css='body.view-static-pages').present
if name: choice_element.text = str(name) choice_element.set("name", str(name))
if mode == "login": return external_auth_login(request) elif mode == "register": return external_auth_register(request)
text_items = self.q(css='section#my-courses').text if len(text_items) > 0: return text_items[0] else: return ""
from_addr = course_email.from_addr if course_email.from_addr else \ _get_source_address(course_email.course_id, course_title)
user = request.user
return False
self.cursor = position
return aside_id.aside_type
desc = "currently at section '{0}' and subsection '{1}'".format(section_title, subsection_title) return EmptyPromise( lambda: self.is_on_section(section_title, subsection_title), desc )
listener_state = 'cmd_|-listener_test_listen_in_resolution_|-echo "Successful listen_in resolution"_|-mod_watch' self.assertIn(listener_state, state_run)
if user_attr_name == 'user_anonymous': user = AnonymousUserFactory() else: user = getattr(self, user_attr_name) user = User.objects.get(id=user.id)
is_increasing = assert_no_warnings(check_increasing, x, y) assert_false(is_increasing)
self.validate(batch)
zmq_version()
if entrance_exam_minimum_score_pct is None: entrance_exam_minimum_score_pct = _get_default_entrance_exam_minimum_pct()
if not configured_probes: return { 'add': expected_probes }
return self.q(css='.advance-modules-remove-text').visible
SOCIAL_MEDIA_FOOTER_NAMES = [ "facebook", "twitter", "youtube", "linkedin", "google_plus", "reddit", ]
state['new'] = __salt__['lxc.state'](name, path=path)
return ret
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) for Cls in [GradientBoostingRegressor, GradientBoostingClassifier]: est = Cls(n_estimators=100, max_depth=1) est.fit(X, y)
X, y = _rescale_data(X, y, sample_weight)
salt --async '*' splay.splay pkg.install cowsay version=3.03-8.el6
exc_info_on_loglevel=logging.DEBUG
client = self.login_client(api_client, user) self.send_patch(client, {}, expected_status=403 if user == "staff_user" else 404)
#latex_paper_size = 'letter'
client = get_file_client.return_value client.cache_file.return_value = self.top_file.name
ret = {} ret['result'] = False ret['comment'] = 'Event module not available. Beacon add failed.' return ret
ADD_GROUP = __random_string() DEL_GROUP = __random_string() CHANGE_GROUP = __random_string() ADD_USER = __random_string() REP_USER_GROUP = __random_string()
centers[center_idx] /= counts[center_idx]
for max_leaf_nodes, name in product((None, 1000), ALL_TREES.keys()): TreeEstimator = ALL_TREES[name]
assert_equal(len(folds), len(labels)) for i in np.unique(folds): assert_greater_equal(tolerance, abs(sum(folds == i) - ideal_n_labels_per_fold))
return sorted(course_module.teams_topics, key=lambda t: t['name'].lower())
loss[i] = np.dot(true_at_reversed_rank.cumsum(), false_at_reversed_rank)
u"The name that will identify you in your courses - " u"{bold_start}(cannot be changed later){bold_end}"
self.assertTrue(bool(version))
cfn = xml.get('cfn') if cfn: log.debug("cfn = %s", cfn)
from __future__ import absolute_import
from salt.exceptions import CommandExecutionError
selector = self.get_element_selector(CSS_CLASS_NAMES['video_container']) auto_play = json.loads(self.q(css=selector).attrs('data-metadata')[0])['autoplay'] return auto_play
return super(StudioValidation, self).empty and not self.summary
course_object, course_key, error_code, http_status = get_valid_course(course_id, is_ccx) self.check_object_permissions(self.request, course_object) return course_object, course_key, error_code, http_status
from salt.modules import mdadm
request = self.context['request'] return request.build_absolute_uri(reverse('course_structure_api:v0:detail', kwargs={'course_id': course.id}))
from salt.modules import s6
html_parent = self.store.get_parent_location(html.location) self.assertEquals(unicode(html_parent), unicode(vertical1.location))
response = self.client.post(reverse('commerce:checkout_receipt'), params={'basket_id': 1}, data=post_data) self.assertEqual(response.status_code, 200) return response
return self._match_registry.keys() + self._prefix_registry.keys()
self.client.logout() ModuleStoreTestCase.tearDown(self)
saltenv = env
return self.q(css=self._bounded_selector('.user-username')).text[0]
__virtualname__ = 'pkg'
self.assertEqual(cached_structure, not_cached_structure)
from __future__ import absolute_import
self._assert_course_verification_status(None)
if not self.env_is_exposed(tgt_env): return None try: int(tgt_ref, 16) except ValueError: return None
raise salt.exceptions.SaltSystemExit( 'The minimum required python version to run salt-ssh is "2.6".' )
log = logging.getLogger(__name__)
cls.clear_caches()
return
segments = mailchimp.listStaticSegments(id=list_id) for seg in segments: if seg['name'].startswith('random'): mailchimp.listStaticSegmentDel(id=list_id, seg_id=seg['id'])
import salt.ext.six as six from salt.ext.six.moves import zip_longest
LOGGER.info( u"Retrieving data for courses: {courses}".format( courses=", ".join([unicode(course) for course in courses]) ) )
raise NotImplementedError
if kw_overrides_match is None: return profile_match return kw_overrides_match
CourseRerunState.objects.succeeded(course_key=destination_course_key)
if isinstance(instance, RestrictedCourse): CourseAccessRuleHistory.save_snapshot(instance) elif isinstance(instance, CountryAccessRule): CourseAccessRuleHistory.save_snapshot(instance.restricted_course)
self.assertEqual(req_status[1]["status"], None) self.assertEqual(req_status[1]["order"], 1)
filter_out_source_path_option(kwargs)
drbd.__grains__ = {} drbd.__salt__ = {} drbd.__context__ = {}
return self.q(css='.advance-modules-remove-text').text[0]
return self.best_params
accepts_logins = False
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'gogrid', vm_['profile'], vm_=vm_) is False: return False
request = RequestCache.get_current_request() return getattr(request, 'user', None)
for norb in (SmallNORB('train', stop=1000), NORB(which_norb='small', which_set='train')): test_impl(norb)
visit_scenario_item('SECTION')
return [self.parameter_name]
return False
cm = confusion_matrix(y_true, y_pred, labels=[0, 1]) assert_array_equal(cm, [[19, 4], [4, 3]])
cr_ec2 = MockEC2() cr_ec2.profile = profile cr_ec2.access = access cr_ec2.user_id = user_id cr_ec2.connection_args = connection_args return cr_ec2
course_key = CourseLocator(org="mockx", course="100", run="2015") return BlockUsageLocator(course_key, block_type='mock_type', block_id="mock_id")
from salt.states import boto_route53
from salt.modules import netscaler
self._click_button('basic_tab')
np.random.seed(0) n_samples = 2000 time = np.linspace(0, 8, n_samples)
self.functions['saltutil.sync_grains'](saltenv='base') self.grains_cache = self.opts['grains']
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
indices = np.argsort(n_samples_per_label)[::-1] n_samples_per_label = n_samples_per_label[indices]
self.assertFalse(hasattr(user, 'profile'))
raise RuntimeError("Infinite loop detected")
self.register_page = CombinedLoginAndRegisterPage(self.browser, start_page="register") self.dashboard_page = DashboardPage(self.browser)
plt.figure(fignum, figsize=(9, 10))
if connection.commit_on_success_block_level == 0: if connection.features.autocommits_when_autocommit_is_off: connection.autocommit = True else: connection.set_autocommit(True)
self.opts = None
import salt.client
CertificateGenerationConfiguration.objects.create(enabled=False) cache.clear()
html_with_inline_css = pynliner.fromString('<style>' + css_content + '</style>' + html_without_css) return html_with_inline_css
course = modulestore().get_item(block_map['course'].location) course.children.remove(block_key) block_map['course'] = update_block(course)
result['uuid'] = uuid() base_attr = ['block_size', 'bucket_size', 'cache_available_percent', 'cache_replacement_policy', 'congested']
if self.system.resources_fs is None: self.syllabus_present = False else: self.syllabus_present = self.system.resources_fs.exists(path('syllabus'))
self.assertChildren(block, self.children_for_user[user])
if not download_video_link and self.download_video: if self.source: download_video_link = self.source elif self.html5_sources: download_video_link = self.html5_sources[0]
from .overrides import get_override_for_ccx return get_override_for_ccx(self, self.course, 'due')
A = np.abs(random_state.randn(10, 10)) A[:, 2 * np.arange(5)] = 0
self.course_info_page.visit() self.tab_nav.go_to_tab('Wiki') self.assertTrue(self.tab_nav.is_on_tab('Wiki'))
'debug_toolbar_mongo',
return settings.FEATURES.get('USE_MICROSITES', False)
AutoAuthPage(self.browser, course_id=self.course_id).visit()
assert_equals('never', seq.rerandomize)
num_pad_bytes = ord(input_str[-1]) if num_pad_bytes < 1 or num_pad_bytes > AES.block_size or num_pad_bytes >= len(input_str): raise UsernameDecryptionException("padding") return input_str[:-num_pad_bytes]
attempts_left_open = CapaFactory.create(showanswer='closed', max_attempts="1", attempts="0", due=self.tomorrow_str) self.assertFalse(attempts_left_open.answer_available())
state_below=dbm.hidden_layers[-2].upward_state(H_hat[-1])))
with self.settings(MODULESTORE_BRANCH='published-only'): for cache in settings.CACHES: caches[cache].clear()
self.is_proctored_enabled = value
return
html.add_header(2, title_map[table_type]) html.add_to_body(phase_table.table)
from salttesting.case import ModuleCase from salttesting.mixins import RUNTIME_VARS
self.q(css="{} .action-close".format(self.TAB_SELECTOR)).first.click()
n_clusters_1 = len(set(labels)) - int(-1 in labels) assert_equal(n_clusters_1, n_clusters)
yield val
css = self.certficate_css + ' .wrapper-collection' return [CertificateSectionPage(self, self.certficate_css, index) for index in xrange(len(self.q(css=css)))]
if not len(w) > 0: raise AssertionError("No warning raised when calling %s" % func.__name__)
self._epochs_seen += 1
return self.q(css=self._bounded_selector('.member-count')).map(lambda e: e.text).results
port = get_unused_localhost_port() usock.close() return port
distances.flat[::distances.shape[0] + 1] = 0.0
self.assertTrue(self.advanced_settings.is_validation_modal_present())
stripped, ccx = strip_ccx(to_strip) yield stripped, partial(restore_ccx_collection, ccx_id=ccx)
if DEBUG_ACCESS: log.debug(*args, **kwargs)
cache = uuid()
return lxml.html.tostring(self.html, pretty_print=pretty_print)
import lettuce.django
pass
return self._get_groups(self.experiment_groups_css)
pos = logical_line.find('`') if pos > -1: yield pos, "W604 backticks are deprecated, use 'repr()'"
super(CourseTeamMembership, self).delete(*args, **kwargs) self.team.reset_team_size()
root_dir = path(mkdtemp_clean()) export_course_to_xml(self.store, content_store, course_id, root_dir, 'test_roundtrip')
merged_access[partition_id] = group_ids
crypt_salt = secure_password(8, use_random=False)
return self.target_type
from __future__ import absolute_import from contextlib import closing import errno import logging import os import re import shutil import subprocess import tarfile import tempfile
if tab_types: return [{'tab_type': tab_type} for tab_type in tab_types.split(',')] else: return []
import salt.utils import salt.utils.odict as odict import salt.utils.dictupdate as dictupdate import salt.ext.six as six from salt.ext.six import string_types
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
'student_id': self.student_id, 'module_state_key': self.module_state_key, 'state': str(self.state)[:20],
if isinstance(to_space, CompositeSpace):
from __future__ import absolute_import
upper_name = name.upper()
assert_raises(ValueError, cv.fit, K_train.tolist(), y_train)
assets, count = contentstore().get_all_content_for_course(self.course.id) self.assertEqual(len(assets), 0) self.assertEqual(count, 0)
import salt.utils
cmd = ['/usr/sbin/pkgrm', '-n', '-a', adminfile] + targets out = __salt__['cmd.run_all'](cmd, python_shell=False, output_loglevel='trace')
X = csc_matrix(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
CourseRerunState.objects.succeeded(course_key=self.course_key) self.expected_rerun_state.update({ 'state': CourseRerunUIStateManager.State.SUCCEEDED, }) rerun = self.verify_rerun_state()
dataset = datasets.load_digits() X = dataset['data'] y = dataset['target']
handler.release() return instance
context['ask_for_fullname'] = eamap.external_name.strip() == ''
raise SyntaxError("unknown encoding: " + encoding)
with patch.object(XQueueInterface, 'send_to_queue') as mock_send: mock_send.return_value = (0, None) if success else (1, self.ERROR_MSG) yield mock_send
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
self.send_signal() self.assertTrue(mock_refund_seat.called) self.assertEqual(mock_refund_seat.call_args[0], (self.course_enrollment, self.student))
salt '*' win_update.install_updates
user.profile.name = u'Jan ĄĘ'
url(r'add_users_to_cohorts$', 'instructor.views.api.add_users_to_cohorts', name="add_users_to_cohorts"),
label = _(u"I agree to the {platform_name} {terms_of_service}.").format( platform_name=get_themed_value("PLATFORM_NAME", settings.PLATFORM_NAME), terms_of_service=terms_link )
HAS_PWD = False
import integration
return service
return self
for from_space in composite_spaces: for to_dtype in composite_dtypes: test_get_origin_batch(from_space, to_dtype) test_make_shared_batch(from_space, to_dtype) test_make_theano_batch(from_space, to_dtype) test_dtype_setter(from_space, to_dtype)
return ''
return prlctl('list', args, runas=runas)
deploy_scripts_search_path = overrides.get( 'deploy_scripts_search_path', defaults.get('deploy_scripts_search_path', 'cloud.deploy.d') ) if isinstance(deploy_scripts_search_path, string_types): deploy_scripts_search_path = [deploy_scripts_search_path]
_before, _blankline, after = text.partition('\n\n') return after
if fit_intercept: ret[:n_features] += s[-1] * dd_intercept ret[-1] = dd_intercept.dot(s[:n_features]) ret[-1] += d.sum() * s[-1] return ret
if (self._ip >> 32) != 0xFFFF: return None return IPv4Address(self._ip & 0xFFFFFFFF)
linter = JavaScriptLinter() results = FileResults('') linter.check_javascript_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
self.user.is_active = False self.user.save()
import salt.config as config import salt.utils.cloud from salt.exceptions import ( SaltCloudConfigError, SaltCloudSystemExit )
return 'UTC'
intAttributes = win32file.GetFileAttributes(path)
return SurveyForm.get_field_names_from_html(self.form)
import salt.utils from salt.exceptions import CommandExecutionError
LANGUAGES = ( ('en', u'English'), ('rtl', u'Right-to-Left Test Language'),
self.record_visit_outline()
@patch.object(OrderItem, 'purchased_callback')
with self.assertRaises(VersionConflictError): _fail = modulestore().create_child( user, new_course.location, 'chapter', fields={'display_name': 'chapter 3'}, )
response = self.fetch('/', method='POST', body=json.dumps(request_lowstate), headers={'Content-Type': self.content_type_map['json']})
rng = np.random.RandomState(42) X = rng.randn(4, 5)
continue
regr_1 = DecisionTreeRegressor(max_depth=4)
profile_image_names = get_profile_image_names(username) create_profile_images(uploaded_file, profile_image_names)
from __future__ import absolute_import, print_function import socket from struct import unpack import pcapy import sys
model = linear_model.LinearRegression() model.fit(X, y)
return cache_and_return(Location._from_deprecated_son(found_id, location.course_key.run))
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
X = rng.randn(100, 2)
assert_true(np.min(X.data) > 0) assert_true(np.max(X.data) < 1)
master_doc = 'index'
get_disk = show_disk
results.append({ 'identifier': identifier, 'invalidIdentifier': True, })
res = prlctl('snapshot-list', args, runas=runas)
lc_block = self._add_library_content_block(course, self.lib_key) lc_block = self._refresh_children(lc_block) course_block = modulestore().get_item(lc_block.children[0])
if average is not None: return np.average(score, weights=average_weight) else: return score
from __future__ import absolute_import
return [Attribute('options', transform=cls.parse_options), Attribute('label', ''), Attribute('inline', False)]
response = self.client.get_json(LIBRARY_REST_URL) self.assertEqual(response.status_code, 200) return parse_json(response)
new_mean_square_dx = ( self.decay * mean_square_dx + (1 - self.decay) * T.sqr(delta_x_t) )
student = UserFactory.create() CourseEnrollmentFactory.create( user=student, course_id=SlashSeparatedCourseKey.from_deprecated_string(self.course_name) ) self.client.login(username=student.username, password="test")
HAS_SVN = False try: import pysvn HAS_SVN = True CLIENT = pysvn.Client() except ImportError: pass
values = []
cli_config = saltfile_config[self.get_prog_name()]
raise SaltCloudSystemExit( 'The query_instance action must be called with -a or --action.' )
continue
EmptyPromise(lambda: self.is_closed_captions_visible() == closed_captions_new_state, "Closed captions are {state}".format(state=state)).fulfill()
return False
self.config['id'] = self.values.proxyid
log.warning( u"More than 1 ranges in Range header: %s for content: %s", header_value, unicode(loc) )
return self.runtime
self.assertIn( ccx_course_key, [access.course_id for access in all_courses] )
url(r'^programs/id_token/$', ProgramsIdTokenView.as_view(), name='programs_id_token'), url(r'^program/', ProgramAuthoringView.as_view(), name='programs'),
self.assertNotIn(self.module_key, self.loader)
try: year_str = self.cleaned_data["year_of_birth"] return int(year_str) if year_str is not None else None except ValueError: return None
import scipy.sparse as sp import numpy as np
return self.q(css='{}[data-id="{}"]'.format(self.BODY_SELECTOR, self.locator)).present
return True
assert_equal(len(matched_buttons), 1) return matched_buttons[0]
for label in np.unique(labels): assert_equal(len(np.unique(folds[labels == label])), 1)
import_course_from_xml(self.store, self.user.id, root_dir, create_if_not_present=True)
self.wait_for_ajax() if self.team: if not self.url.endswith(self.url_path): return False return self.q(css='.team-profile').present
import salt.config import salt.wheel import salt.auth
try: user_certificate = GeneratedCertificate.eligible_certificates.get( user=user, course_id=course_key, status=CertificateStatuses.downloadable ) except GeneratedCertificate.DoesNotExist: pass
store = modulestore() with store.default_store('split'): destination_course_key = store.make_course_key(org, number, run)
import salt.transport.ipc return salt.transport.ipc.IPCMessageClient(opts, **kwargs)
if not len(info): raise SaltInvocationError( u'No snapshots for VM "{0}" have ID "{1}"'.format(name, snap_id) )
from __future__ import absolute_import import json import logging import os import yaml
pl2_path, = pylearn2.__path__ file_list = _list_files(pl2_path, suffix) return file_list
all_assets[asset_idx] = md.to_storable()
with warnings.catch_warnings(record=True): estimator = Estimator() set_testing_parameters(estimator) set_random_state(estimator) estimator.fit(X, y) y_pred = estimator.predict(X)
S = cosine_similarity(X, Y) S *= -1 S += 1 return S
instructor_dashboard_page = self.visit_instructor_dashboard() exam_attempts_section = instructor_dashboard_page.select_special_exams().select_exam_attempts_section()
library_fixture.add_children( XBlockFixtureDesc("problem", "Bad Problem", data='<'), )
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
params["honor_code"] = "tRUe" self.assert_success(params)
DEPRECATED_BLOCK_TYPES = ['poll', 'survey']
students = self._create_students(10)
from salttesting import skipIf, TestCase from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
self.other_sequential_1.children = []
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
THIRD_PARTY_AUTH_OLD_CONFIG = AUTH_TOKENS.get('THIRD_PARTY_AUTH', None)
return 'all_users' if self.q(css=PROFILE_VISIBILITY_SELECTOR.format('all_users')).selected else 'private'
while top_level_logger.handlers: top_level_logger.handlers.pop()
scaler_batch = MaxAbsScaler().fit(X)
with open(Env.METRICS_DIR / "pylint", "w") as f: f.write(violations_count_str)
local_master = True
import salt.utils from salt.exceptions import CommandNotFoundError
import salt.utils
return self.q(css='{} .section-name input'.format(parent_css)).present
self.set_filehandle_limits('unit')
log.warning('Authentication failure of type "eauth" occurred.') return ''
return all([not xblock.is_placeholder() for xblock in self.xblocks])
import integration from salt.fileserver import gitfs
return [child.tag for child in elem]
redismod.__grains__ = {} redismod.__salt__ = {} redismod.__context__ = {} redismod.__opts__ = {}
setup_temp_logger() setup_extended_logging(opts)
tgt = ipaddress.ip_address(tgt)
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
response = self.client.get(complete_url) self.assertEqual(response.status_code, 302) self.assertEqual(response['Location'], 'http://example.none/misc/final-destination')
#add_function_parentheses = True
module.location = Mock(module.location) module.location.to_deprecated_string.return_value = 'i4x://edX/capa_test/problem/meh'
self.cart.start_purchase() self.cart.purchase()
if course is None: log.warn(u"Could not find course with ID %s.", course_id) raise Http404
path = []
dis_flat_w = dis_flat[sim_flat != 0]
cm = confusion_matrix(y_test, y_pred) np.set_printoptions(precision=2) print('Confusion matrix, without normalization') print(cm) plt.figure() plot_confusion_matrix(cm)
self.assertEqual(self.course.user_partitions, [])
import integration from salt.modules import mysql as mysqlmod
self.problem_page.click_choice('choice_choice_1') self.problem_page.click_save() self.problem_page.wait_for_expected_status('div.capa_alert', 'saved')
self.assertTrue(api.is_user_eligible_for_credit("bob", self.course_key))
self.middleware.process_request(self.request) self.assertNotIn(LANGUAGE_SESSION_KEY, self.request.session)
self.repo.checkout(checkout_ref) if branch: self.repo.reset(oid, pygit2.GIT_RESET_HARD)
visitor = AllNodeVisitor(python_code, results) visitor.visit(root_node)
pass
Finalize(self, self.close, exitpriority=15)
pass
from __future__ import absolute_import import logging import inspect
import logging
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( mock_open, patch, NO_MOCK, NO_MOCK_REASON )
resp = self.client.get(reverse('dashboard'), HTTP_HOST=settings.MICROSITE_TEST_HOSTNAME) self.assertContains(resp, 'Robot_Super_Course') self.assertNotContains(resp, 'Robot_Course_Outside_Microsite')
current_cert_bindings = list_cert_bindings(site)
pass
from __future__ import absolute_import import logging import json
X = FeatureHasher().transform([{'foo': 0}]) assert_equal(X.data.shape, (0,))
return CertificateStatuses.is_passing_status(cert_status)
node.attrib.pop('xblock-family', None)
from salt.exceptions import CommandExecutionError
while length != self.batch_size: batch = self._base_iterator.next()
raise ValueError( 'Wrong number of arguments for %s:\n' ' %s was called.' % (_signature_str(name, arg_spec), _function_called_str(name, args, kwargs)) )
from __future__ import absolute_import import collections import logging import socket import struct import time from contextlib import contextmanager
problem_item.display_name = 'Problem_Item1' problem_item = self.store.update_item(problem_item, self.user_id) self.assertFalse(self.store.has_published_version(problem_item))
return len(self.xblock_components)
return render_to_response('financial-assistance/financial-assistance.html', { 'header_text': FINANCIAL_ASSISTANCE_HEADER })
PAID_COURSE_REGISTRATION_CURRENCY = ENV_TOKENS.get('PAID_COURSE_REGISTRATION_CURRENCY', PAID_COURSE_REGISTRATION_CURRENCY)
match = uncommented_line_start_index_regex.search(template, line_start_index) if match is None: return None elif match.start() < start_index: return start_index else: return match.start()
assert_array_equal(lfw_pairs_train.target, [1, 1, 1, 1, 1, 0, 0, 0, 0, 0])
self.browser.refresh() return self.components
return render_to_string('courseware/date_summary.html', self.get_context())
response = self.client.post(self.url, {})
('BACKGROUND', (1, 2), (1, 2), '#EEEEEE'),
course_registration_codes = CourseRegistrationCode.objects.filter(order=self.cart)
import re self.assertTrue(re.search(r'^\d{2}:\d{2} \w{2}$', win_tm))
self.f_ = lambda x: y.repeat(x.shape)
v_sample = tensor.matrix('ais_v_sample') beta = tensor.scalar('ais_beta')
value = deepcopy(opts[name])
self.module_system.process_xml = Mock()
os.remove(tmp.name)
self.assertAlmostEqual( calc.evaluator(variables, {}, '3*x-y'),
self.user = User.objects.get(pk=self.user.pk)
yob_label = _(u"Year of birth")
course = store.get_course(course.id, depth=1)
import os import logging
if isinstance(grade_response, dict) and 'msg' in grade_response: grade_response['msg'] = "<div>{0}</div>".format(grade_response['msg'])
if None in distribution:
if master is not None: tmp_ip = _host_to_ip(master) if tmp_ip is not None: master_ip = tmp_ip
from .vt import Terminal, TerminalException
from salt.states import powerpath
assert isinstance(model.hidden_layers[-1], Softmax)
django_settings.MIDDLEWARE_CLASSES += _MIDDLEWARE_CLASSES
log.debug('No updates to install') ret['Success'] = False ret['Message'] = 'No Updates to install' return ret
import salt.utils
scheme = u"https" if settings.HTTPS == "on" else u"http" return u'{}://{}'.format(scheme, settings.SITE_NAME)
tmp_dir = mkdtemp() try: course_dir = export_course_to_directory(course_key, tmp_dir) compress_directory(course_dir, filename) finally: shutil.rmtree(tmp_dir, ignore_errors=True)
from __future__ import absolute_import import os import shutil import socket import subprocess import tempfile
problem = self.build_problem(answer=script)
channels[prefix + name] = (raw_channels[name], cost_ipt, (spaces[i], sources[i]))
try: import pwd except ImportError: if not sys.platform.lower().startswith('win'): raise
return aside_id.aside_type
singular_ind = np.arange(n, dtype=np.float64)
with self.assertRaises(SearchIndexingError): self.reindex_library(store)
bower.__salt__ = {} bower.__opts__ = {'test': False}
self.certificates_section.add_certificate_exception(self.user_name, '')
skip_if_no_data() self.train = OCR(which_set='train') self.valid = OCR(which_set='valid') self.test = OCR(which_set='test')
if (i + 1) != (self.n_layers_ - 1): activations[i + 1] = hidden_activation(activations[i + 1])
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch, mock_open)
return self._folds[0].get_input_space()
AutoAuthPage(self.browser, course_id=self.course_id).visit()
metadata['xml_attributes'][attr] = value
raise NotImplementedError()
if not wildcards: return dn.lower() == hostname.lower()
if (extmath.norm(my_mean - my_old_mean) < stop_thresh or completed_iterations == max_iter): return tuple(my_mean), len(points_within) completed_iterations += 1
import re import logging import shlex import yaml
for _ in range(3): uninstalled = False frozen = sh("pip freeze", capture=True)
REMOVE_SPAN_TAG_RE = re.compile(r'</span>(.+)<span')
assert_almost_equal(mcc, 0.)
staff = UserFactory.create(username="staff", email="staff@e.com", password="test") role = CourseStaffRole(self.course_limited.id) role.add_users(staff)
try: os.remove(trans_tar) except (OSError, IOError): pass
tagger_get_structure.sample_rate = 1
ret.append(local_branch if branch is None else branch) ret.append(desired_upstream)
self.Ut = numpy.dot(self.V[:,-self.n_eigen:].transpose(), self.Xt)
if not is_prerequisite_courses_enabled(): return None from milestones import api as milestones_api milestones_api.remove_course_milestone( course_key, milestone, )
res_r = int(numpy.floor(last_pool_r/rs)) + 1 res_c = int(numpy.floor(last_pool_c/cs)) + 1
if not self.env_is_exposed(tgt_env): return None
self._make_eligible() self._purchase_credit() CourseEnrollmentAttribute.objects.all().delete()
return self.child(title)
msg = etree.tostring(fromstring_bs(msg, convertEntities=None), pretty_print=True)
if recursive: cmd = '{0} -r'.format(cmd) if depth: cmd = '{0} -d {1}'.format(cmd, depth)
with patch('django.http.HttpResponse.set_cookie') as mock_delete_cookie: self.assert_response(set_request_user=set_request_user, set_session_cookie=set_session_cookie) self.assertEquals(mock_delete_cookie.called, expect_delete_called)
import salt.ext.six as six
first_name_label = _(u"First Name")
from __future__ import absolute_import import re
attempt = SoftwareSecurePhotoVerification(user=user, photo_id_key="dummy_photo_id_key") attempt.status = 'approved' attempt.save()
for containers in six.itervalues(docker_hosts): host = containers.pop('host') host_ips = []
errorlog = make_error_tracker()
from __future__ import absolute_import from distutils.version import LooseVersion import logging
with remove_ccx(course_id) as (course_id, restore): return restore(self._modulestore.get_modulestore_type(course_id))
def render_to_template_mock(*args): pass
course_key = CourseKey.from_string(course_id) with modulestore().bulk_operations(course_key): return _progress(request, course_key, student_id)
from __future__ import unicode_literals
int2byte = operator.methodcaller("to_bytes", 1, "big")
time.sleep(1)
self.assertTrue(views.is_course_passed(self.course, None, self.student, self.request))
return K, np.empty((X.shape[0], X.shape[0], 0))
print_monitor_cv.main(filename, all=True)
import salt.utils from salt.ext import six
import numpy as np
request2 = self.request_factory.post('/create_account', data=postvars) request2.session = client.session request2.user = AnonymousUser()
from __future__ import absolute_import import os
module.system.user_is_staff = False
try: salt.utils.gitfs.GitPillar(__opts__) return __virtualname__ except FileserverConfigError: pass
self._cohorted_discussions = json.dumps(value)
n_samples = len(digits.data) data = digits.data / 16. data -= data.mean(axis=0)
import json import logging
for kernel in kernels: gpr = GaussianProcessRegressor(kernel=kernel, normalize_y=True) gpr.fit(X, y)
return "{}/assertions".format(self._badge_url(slug))
def __init__(self, n_components=8, random_state=None): super(GaussianRandomProjectionHash, self).__init__( n_components=n_components, random_state=random_state)
cur.executemany(cmd, newitems)
urls = microsite.get_value("urls", default={}) return urls.get(name) or EMPTY_URL
import salt.ext.six as six
FEATURES['LICENSING'] = True
for course in _COURSES: if course_id == course['course_id']: return course
self.assert_enrollment_activation(False, CourseMode.VERIFIED)
self.lc_block.max_count = 1 self.lc_block.capa_type = 'customresponse' self.lc_block.refresh_children() result = self.lc_block.validate()
keydata = { 'minion_id': minion_id, 'pub': pub, 'verify': verify}
salt '*' vsphere.reset_syslog_config my.esxi.host root bad-password \ syslog_config='logdir,loghost'
import salt.utils.validate.net from salt.exceptions import CommandExecutionError
path = urlparse.urlparse(self.path).path if path.endswith('/'): return path[:-1] else: return path
return ''
user = UserFactory.create(is_staff=True) self.assert_user_has_object_permission(user, True)
return _click_edit(self, '.edit-button', '.xblock-studio_view', self._bounded_selector)
from __future__ import absolute_import, print_function import yaml import logging
X = check_array(X, accept_sparse="csc", dtype=DTYPE) y = check_array(y, accept_sparse='csc', ensure_2d=False, dtype=None) if issparse(X): X.sort_indices()
from __future__ import absolute_import
self._test_visible_to_students(False, 'private_released', self.past)
self.assertIsNotNone(get_template_request_context())
attempts = random.randint(1, 10) module = CapaFactory.create(attempts=attempts - 1, max_attempts=attempts) self.assertEqual(module.check_button_name(), "Final Check")
destroy(vm_['name'])
for image_uuid in __salt__['vmadm.list'](order='image_uuid'): if image_uuid in images: continue images.append(image_uuid)
if self._channel_name is None: v = monitor.channels['objective'].val_record else: v = monitor.channels[self._channel_name].val_record
ret['changes'] = {'new': '', 'old': name}
import os import datetime try: import spwd except ImportError: pass
try: import confidant.client import confidant.formatter HAS_LIBS = True except ImportError: HAS_LIBS = False
import salt.ext.six as six
if mod_name in self.file_mapping: yield mod_name
__func_alias__ = { 'list_': 'list' }
clf = self.factory() assert_raises(ValueError, clf.fit, X2, Y2, intercept_init=np.zeros((1,)))
_ = lambda text: text
get_response = self.send_get(self.client) self.assertEqual(new_name, get_response.data["name"])
import salt.ext.six as six try: import pkg_resources HAS_PKG_RESOURCES = True except ImportError: HAS_PKG_RESOURCES = False
if not isinstance(config, dict): return False, ('Configuration for service beacon must be a dictionary.') return True, 'Valid beacon configuration'
__virtualname__ = 'service'
apply_ranged_setting = False
cohort_a = CohortFactory.create(course_id=course.id, name=u'Cohørt A', users=[user_a]) CourseUserGroupPartitionGroup( course_user_group=cohort_a, partition_id=cohort_scheme_partition.id, group_id=cohort_scheme_partition.groups[0].id ).save()
if point and point.isdigit(): point = int(point)
import salt.ext.six as six
_FUNCTION_HASHES = weakref.WeakKeyDictionary()
import salt.ext.six as six
scaler_batch = StandardScaler().fit(X)
self.assert_json_success_response_looks_correct(student_views.login_user(strategy.request))
y = rng.randn(n_samples) r.fit(x, y) assert_equal(r.cv_values_.shape, (n_samples, n_alphas))
if dt: return JSONEncoder().default(dt) return None
self.assertEqual(response.status_code, 200)
return sorted(run_.functions)
ret['result'] = None return ret
actual_field = None for field in form_desc["fields"]: if field["name"] == expected_field["name"]: actual_field = field break
return microsite.get_value('platform_name', settings.PLATFORM_NAME)
with self.assertRaises(SearchIndexingError): reindex_course_and_check_access(self.course.id, self.user)
LogoutPage(self.browser).visit()
if not settings.FEATURES.get('MILESTONES_APP', False): return [] from milestones import api as milestones_api return milestones_api.get_course_content_milestones(course_id, content_id, relationship)
line_number = self.index_to_line_number(index) return self.line_number_to_start_index(line_number)
self.workd = _aligned_zeros(3 * n, self.tp) self.workl = _aligned_zeros(3 * self.ncv * (self.ncv + 2), self.tp)
cache_key = self._cache_key_for_kvs_key(kvs_key) if cache_key not in self._cache: raise KeyError(kvs_key.field_name) return self._cache[cache_key][kvs_key.field_name]
if 'warnings' in cdata: ret.setdefault('warnings', []).extend(cdata['warnings'])
super(CacheBackedAuthenticationMiddleware, self).process_request(request)
with remove_ccx(usage_key) as (usage_key, restore): return restore( self._modulestore.get_item(usage_key, depth, **kwargs) )
clf.fit(X, y) assert_raises(ValueError, clf.partial_fit, np.hstack((X, X)), y)
if 'SETUP_DIRNAME' in globals():
if isinstance(y_pred, list): y_pred = np.vstack(p for p in y_pred).T
from salt.ext.six.moves.urllib.parse import urljoin as _urljoin import salt.ext.six.moves.http_client from salt.version import __version__ import salt.utils.http
retc["_id"] = ret["jid"]
params = { param_name: request.POST[param_name] for param_name in [ "face_image", "photo_id_image", "course_key", "checkpoint", "full_name" ] if param_name in request.POST }
course = self.runtime.modulestore.get_course(self.course_id) return course
for arr_format, arr in test_arrays.items(): assert_warns(UserWarning, check_symmetric, arr) assert_raises(ValueError, check_symmetric, arr, raise_exception=True)
from __future__ import absolute_import
username = data['username'] if request.user.username != username: return HttpResponseForbidden()
return name
for mode_slug in course_modes: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode_slug, mode_display_name=mode_slug, )
return bool(self.get_configuration())
from salt.ext.six.moves import zip
self.login_staff() content = self.get_course_info_page().content self.assertIn("OOGIE BLOOGIE", content)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
from __future__ import absolute_import import os import shutil
__virtualname__ = 'lowpkg'
__Location__ = 'do-not-get-from-metadata' return None
([[400, 150, 400], [400, 450, 600], [300, 225, 300]],
result = embargo_api.check_course_access(self.course.id, user=self.user, ip_address='0.0.0.0') self.assertTrue(result)
output.append('\'{0}\': {1!s}'.format(key, value))
if i == 0: layer_below = self.dbm.visible_layer else: layer_below = self.dbm.hidden_layers[i-1] state_below = layer_to_state[layer_below] state_below = layer_below.upward_state(state_below)
all_assets, count = content_store.get_all_content_for_course(course.id) self.assertEqual(len(all_assets), 0) self.assertEqual(count, 0)
if len(names) == 1: return ret[names[0]] return ret
if cache: if not stop(): return False elif not _wipe(cache): return False
if request.user.is_authenticated(): return redirect(redirect_to)
import yaml
from __future__ import absolute_import import os import sys import shutil import tempfile import textwrap import copy
return self.teams_configuration.get('topics', None)
response_data = self.reactivation_email(self.unregisteredUser) self.assertFalse(response_data['success'])