self.assertContains(resp, "super-ugly") self.assertContains(resp, "This file is only for demonstration, and is horrendous!")
from __future__ import absolute_import import logging
cls.stack = []
with self._mock_geoip('US'): result = embargo_api.check_course_access(self.course.id, user=self.user, ip_address='0.0.0.0')
v.fit(["to be or not to be", "and me too", "and so do you"]) assert False, "we shouldn't get here"
date = get_date(ccx, node=parent_node, date_type=date_type)
assert_almost_equal(np.dot(U[:, :k], V[:k, :]), np.dot(Ua, Va))
if not name: return 'Required parameter "name" not passed'
return { 'input_type': self.html_input_type, 'choices': self.choices }
is_increasing = y_[0] < y_[-1] assert_false(is_increasing)
cert = OpenSSL.crypto.X509() cert.set_version(2)
log = logging.getLogger(__name__)
leaf_weights = node_weights[node_weights != 0] assert_greater_equal( np.min(leaf_weights), total_weight * est.min_weight_fraction_leaf, "Failed with {0} " "min_weight_fraction_leaf={1}".format( name, est.min_weight_fraction_leaf))
CourseEnrollmentFactory(user=self.student, course_id=self.course.id)
params = self._signed_callback_params(self.order.id, self.COST, self.COST) del params[missing_param]
plt.title(model_title)
from salt.modules import mac_sysctl from salt.exceptions import CommandExecutionError
assert_array_almost_equal(np.diag(K), np.ones(5))
__virtualname__ = 'acl'
'CMS_SEGMENT_KEY': None,
check_is_fitted(self, 'n_components_') return np.dot(W, self.components_)
log.error("etcd: Could not connect") raise etcd.EtcdConnectionFailed("Could not connect to etcd server")
cmdret = _psql_prepare_and_run(['-f', sqlfile.name], user=user, runas=runas, host=host, port=port, password=password, maintenance_db=dbname) return cmdret
from __future__ import absolute_import import cherrypy
from salt.exceptions import CommandExecutionError from salt.modules import dockerng as dockerng_mod from salt.states import dockerng as dockerng_state
world.wait_for_ajax_complete()
click_css(self, 'a.delete-button', source_index, require_notification=False) confirm_prompt(self)
self.counter = 0
assert max(pd.max(), hd.max()) < .17
return self.get_text('.group-configuration-description')
if scheduled_actions: tmp = dictupdate.update(tmp, scheduled_actions) return tmp
ret['comment'] = _format_comments(actions) return ret
self.set_many({kvs_key: value})
_track_certificate_events(request, context, course, user, user_certificate)
print "Starting export" file_system = OSFS(root_dir) initial_course.runtime.export_fs = file_system.makeopendir(course_dir) root = lxml.etree.Element('root')
MOCK_STAFF_GRADING = True MOCK_PEER_GRADING = True
self.assertEqual(resp.status_code, 200)
orphan = course_key.make_usage_key('chapter', 'OrphanChapter') self.store.create_item(self.user_id, orphan.course_key, orphan.block_type, block_id=orphan.block_id)
cls.audit_course = CourseFactory.create() CourseModeFactory.create(course_id=cls.audit_course.id, mode_slug=CourseMode.AUDIT)
import codecs import os import imp import logging import tempfile import traceback import sys
from __future__ import division
i18n_service = ModuleI18nService(None) self.assertEqual(i18n_service.ugettext(self.test_language), 'XYZ-TEST-LANGUAGE')
'openedx.core.djangoapps.self_paced',
'context_processors.doc_url',
assert_equal(l[train].size + l[test].size, l.size)
assert_greater(n_iter_reference, 2)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
self.verbose_mod *= 10
PARTNER_SUPPORT_EMAIL = 'partner-support@example.com'
course_programs = _get_course_programs(user, [enrollment.course_id for enrollment in course_enrollments])
query_params = deepcopy(query_params) query_params.update({ "page": page_num, "page_size": page_size }) return url_path + "?" + urlencode(query_params)
usage_key = self._map_revision_to_branch(usage_key, revision=revision) return super(DraftVersioningModuleStore, self).get_item(usage_key, depth=depth, **kwargs)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch )
__virtualname__ = 'pkg'
self.options.log_file_level = self.config.get(cli_setting_name)
self.assertNotIn('brain.left_hemisphere', funcs)
result = SoftwareSecurePhotoVerification.get_initial_verification(user=user) self.assertIs(result, None)
#pylint: disable=E0602
err = ItemNotFoundError mock_get_course.return_value = err
import salt.utils import salt.utils.yast import salt.utils.preseed import salt.utils.kickstart import salt.syspaths from salt.exceptions import SaltInvocationError
if self.date is not None: return datetime.now(pytz.UTC) <= self.date return False
if self.edx_video_id and edxval_api: val_youtube_id = edxval_api.get_url_for_profile(self.edx_video_id, "youtube") if val_youtube_id: video_id = val_youtube_id
if exists(zpool): ret[zpool] = 'storage pool already exists' return ret
child = descriptor.get_children()[0] self.assertEqual(child.due, None)
response = self._submit_photos(expected_status_code=400, face_image=self.IMAGE_DATA) self.assertEqual( response.content, "Photo ID image is required if the user does not have an initial verification attempt." )
pass
padding_len = AES.block_size - len(input_str) % AES.block_size return input_str + padding_len * chr(padding_len)
resource = {"id": self.non_existing_resource_id, 'event': test_case['event']} self.check_event_response_by_http_status('handle_vote', resource, 400)
else: ret = _load_result(existing, ret)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
config_key = microsite.get_value('cybersource_config_key') if config_key: config = config['microsites'][config_key]
return ACCESS_GRANTED if course.catalog_visibility == visibility_type else ACCESS_DENIED
return ( self.q(css="#new-url-input-field-message.has-error").visible and self.q(css="#new-url-desc-input-field-message.has-error").visible )
dist_unstructured = out_unstructured[-1] dist_structured = out_structured[-1]
sparse_results = sparse_classifier.staged_score(X_test_sparse, y_test) dense_results = dense_classifier.staged_score(X_test, y_test) for sprase_res, dense_res in zip(sparse_results, dense_results): assert_array_equal(sprase_res, dense_res)
D, E = pairwise_distances_argmin_min(X, Y, metric=minkowski, metric_kwargs={"p": 2}) assert_array_almost_equal(D, [0, 1]) assert_array_almost_equal(E, [1., 1.])
return self.q(css='.page-content-secondary .team-language :last-child').text[0]
self.assertEquals( self.middleware.process_response(self.request, self.response), self.response ) exit_context.assert_called_with(UserTagsEventContextMiddleware.CONTEXT_NAME) exit_context.reset_mock()
centers = [[1, 1], [-1, -1], [1, -1]] X, labels_true = make_blobs(n_samples=750, centers=centers, cluster_std=0.4, random_state=0)
if ret['changes']: ret = {'changes': {}, 'comment': '', 'name': name, 'result': True}
return self.theta.shape[0]
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains, requires_salt_modules ) ensure_in_syspath('../../')
from __future__ import absolute_import
n_samples = int(X.shape[0]) rs = check_random_state(self.random_state)
__opts__.get( 'log_level', 'error' )
return self._div_for_xblock_id(xblock_id)[0].find_element_by_css_selector( '.header-actions .{action}-button.action-button'.format(action=action) )
return JsonError(status=404)
npm.__salt__ = {}
ret['hash_type'] = __opts__['hash_type']
V = np.zeros((N, n_neighbors, n_neighbors)) nev = min(d_in, n_neighbors) evals = np.zeros([N, nev])
log = logging.getLogger(__name__)
self.assertInCourseListing(existent_course_key)
time.sleep(time_between_creation)
parts = [os.path.normpath(p) for p in parts]
self.assertEqual(CourseMode.auto_enroll_mode(self.course_key, modes), result)
LOGGING_NULL_HANDLER = TemporaryLoggingHandler(logging.WARNING)
ret = self.run_function('state.sls', mods='issue-1879', timeout=120) self.assertSaltTrueReturn(ret)
def __setstate__(self, state): self._is_child = True self.__init__( state['opts'], state['socket_queue'], log_queue=state['log_queue'] )
from __future__ import absolute_import import os import logging import hashlib import glob import random import ctypes import tempfile import yaml import re import datetime import ast
msg = "Wait for status to be {}".format(status) selector = ', '.join(self.status_indicators[status]) self.problem_page.wait_for_element_visibility(selector, msg)
xpath = "//section[@class='math-string']/span[2]/p/b" self.assert_has_text(xml, xpath, 'tail')
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.assertEqual(correct_map.get_correctness('1_2_1'), 'correct')
self.user_partition = UserPartition( self.TEST_ID, self.TEST_NAME, self.TEST_DESCRIPTION, self.TEST_GROUPS, extensions[0].plugin, self.TEST_PARAMETERS, )
ret['comment'] = 'Target was successfully mounted' ret['changes']['mount'] = True
at.__grains__ = {} at.__salt__ = {}
from salt.states import timezone
X = self.estimators_[0]._validate_X_predict(X, check_input=True) n_samples = X.shape[0]
if iface_type not in ['slave', 'source']: return __salt__['cmd.run'](['ifdown', iface]) return None
_globals = {}
return u'{cat}/{name}'.format(cat=location.category, name=location.name)
self.assertEqual(jid_file, None)
expected_y = y.mf_update( state_below = v.upward_state(v_state))
y_error = np.zeros(n_test)
user_answer = json.loads(user_answer)
self.assertIn(multi_parent_html.location, orphan_vertical.children) self.assertIn(multi_parent_html.location, vertical1.children)
if existing['code'] == 200:
pass
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
CREDIT_TASK_DEFAULT_RETRY_DELAY = 30
return self.q(css=INTRO_VIDEO_SELECTOR)
return self.q(css='{} input[name=delete-entrance-exam-state]'.format(self.EE_CONTAINER))
user = UserFactory() allow_access(self.course, user, 'beta') self.assertTrue(CourseBetaTesterRole(self.course.id).has_user(user))
'ENABLE_DASHBOARD_SEARCH': False,
diff = y - activations[-1] deltas[last] = -diff
program_config = self.create_programs_config(enabled=False) actual = get_edx_api_data(program_config, self.user, 'programs') self.assertTrue(mock_warning.called) self.assertEqual(actual, [])
return 0
self.make_course() url = self.make_url('html_book', book_index=0, chapter=1) response = self.client.get(url) self.assertEqual(response.status_code, 404)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
from __future__ import absolute_import import re import sys
self.assertNotIn(self.module_key, self.loader)
xpath = "//p[@class='status']" self.assert_has_text(xml, xpath, expected_text, exact=False)
return { 'course_key': unicode(credit_course.course_key), 'enabled': credit_course.enabled }
if name_field not in model: raise salt.exceptions.SaltException( "Name '{0}' not found in returned fields.".format( name_field))
after_jump = []
mock_object = Mock() object_config = { 'pk': obj_id, 'name': "object {}".format(obj_id) } mock_object.configure_mock(**object_config) return mock_object
self._configure_testshib_provider() super(TestShibIntegrationTest, self).test_register()
assert_almost_equal(errors, errors2) assert_almost_equal(values, values2)
from __future__ import absolute_import
courses, failed_export_courses = export_courses_to_output_path(self.temp_dir) self.assertEqual(len(courses), 2) self.assertEqual(len(failed_export_courses), 0)
merged_access = descriptor.merged_group_access if False in merged_access.values(): log.warning("Group access check excludes all students, access will be denied.", exc_info=True) return ACCESS_DENIED
kern_data_minor = kern_data.transpose([0,2,3,1]).copy() img_data_minor = img_data.transpose([0,2,3,1]).copy()
jid_dir, jid_file = self._make_tmp_jid_dirs(create_files=False)
child_pids = p1_group.get_children(recursive=True)
return self.data_specs
microsite = Microsite.get_microsite_for_domain(domain)
cwd = os.getcwd()
cache.clear() self.course_key = CourseLocator(org='TestOrg', course='TestCourse', run='TestRun')
emp_cov = np.dot(X.T, X) / n_samples
import logging
config = sconfig.cloud_config('/etc/salt/cloud') self.assertEqual(config['log_file'], env_fpath) os.environ.clear() os.environ.update(original_environ)
import logging
check_arguments_for_rescoring(usage_key)
self.asset_collection.insert(dest_assets)
self.item.youtube_id_1_0 = None with self.assertRaises(ValueError): self.item.get_transcript(transcripts)
self.video.wait_for_video_player_render() self.assertIn(self.video.state, ['playing', 'buffering', 'finished'])
data = compressor.flush() if data: out.write(data)
problem = self.build_problem(answer="1/3", tolerance=1e-3) correct_responses = ["1/3", "0.333333"] incorrect_responses = [] self.assert_multiple_grade(problem, correct_responses, incorrect_responses)
last_objective_value = ncut_value rotation = np.dot(Vh.T, U.T)
return self.q(css='article.content-primary').visible
ws = create_connection('wss://localhost:8000/all_events/d0ce6c1a37e99dcc0374392f272fe19c0090cca7')
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
X_FRAME_OPTIONS = 'ALLOW'
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
iptables.__salt__ = {} iptables.__opts__ = {}
#pylint: disable=E0602
log.warning( "Error while previewing chemical formula", exc_info=True) result['error'] = _("Error while rendering preview")
return course_metadata_utils.display_name_with_default(self)
modulestore().get_item(usage_key)
ret['master'] = ip_port[0] ret['master_port'] = ip_port[1]
self.payment_and_verification_flow.next_verification_step(self.immediate_verification_page)
with mock.patch('openedx.core.lib.courses.create_course_image_thumbnail') as patched_create_thumbnail: course_overview = CourseOverview.get_from_id(course_overview.id) patched_create_thumbnail.assert_not_called()
self.assertEqual([], os.listdir(TMP_JID_DIR))
if not is_memcache_running(): msg = colorize('red', "Memcache is not running locally.") print msg sys.exit(1)
contentstore().generate_thumbnail(unlock_content, dimensions=(16, 16)) contentstore().generate_thumbnail(lock_content, dimensions=(16, 16))
__grains__ = {}
import os import sys import time import errno import signal import select import logging
for label_index, weight in enumerate(n_samples_per_label): lightest_fold = np.argmin(n_samples_per_fold) n_samples_per_fold[lightest_fold] += weight label_to_fold[indices[label_index]] = lightest_fold
self.signal_handler.send("course_published", course_key=course_key.for_branch(None))
means = rand_data.means g.means_init = means g.fit(X) assert_array_equal(means, g.means_init)
from __future__ import absolute_import
self.assertEqual(0, CourseMode.min_course_price_for_currency(self.course_key, 'usd'))
self.seed = state.get('seed', seed) assert self.seed is not None, "Seed must be provided for LoncapaProblem."
from __future__ import absolute_import import warnings
assert len(self.dbm.hidden_layers) > 0
self.kvs = kvs self.session = session self.session_data = session.setdefault(MASQUERADE_DATA_KEY, {})
from __future__ import absolute_import import atexit import logging import time
return redirect(AUTH_DISPATCH_URLS[AUTH_ENTRY_REGISTER])
from __future__ import absolute_import, print_function import logging
component = self.store.publish(component.location, self.user_id) self.assertFalse(self.store.has_changes(component))
try: problem.grade_answers({'1_2_1': '42'})
from shoppingcart.processors.CyberSource2 import processor_hash
self.assertEqual(html.count("</script>"), 1)
ret = generate_user_certificates( student, course_key, course=course, insecure=options['insecure'] )
clf = AdaBoostRegressor(random_state=0) clf.fit(boston.data, boston.target) score = clf.score(boston.data, boston.target) assert score > 0.85
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
self._credit_provider_callback(request_uuid, 'approved') self._assert_request_status(request_uuid, "approved")
_policy = _policy.get_role_policy_response.policy_document _policy = _unquote(_policy) _policy = json.loads(_policy, object_pairs_hook=odict.OrderedDict) return _policy
import salt.utils.http import salt.ext.six as six from salt._compat import ElementTree as ET
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
elif len(self.subclusters_) < self.branching_factor: self.append_subcluster(subcluster) return False
return compare_with_tolerance( evaluator({}, {}, ans1), evaluator({}, {}, ans2), self.tolerance )
_change_access(course, user, level, 'allow', send_email)
self.assertEquals(response.status_code, 302) cache.clear()
frgd_img = to_img(blend_arr, os)
self._assert_no_redirect(self.course_without_survey)
reg_codes = cls.objects.filter(course_enrollment=course_enrollment).order_by('-redeemed_at') if reg_codes: return reg_codes[0]
import salt.utils
spaces = map(lambda c: get_space(c[0]), self.costs)
BADGR_API_TOKEN = None BADGR_BASE_URL = "http://localhost:8005" BADGR_ISSUER_SLUG = "example-issuer" BADGR_TIMEOUT = 10
salt '*' win_update.list_updates
user_partititons = self.course.user_partitions self.assertEqual(len(user_partititons), 2) self.assertEqual(user_partititons[0].name, 'Name 0')
if mail: self.assertEqual(user.email, mail) self.assertEqual(list(User.objects.filter(email=postvars['email'])), [])
from __future__ import absolute_import
python_suite = suites.PythonTestSuite('Python Tests', **opts) js_suite = suites.JsTestSuite('JS Tests', mode='run', with_coverage=True)
extend(state('.goal').stateconf.require_in(stateconf='yyy::start'))
import salt.ext.six as six import salt.utils
pillar_roots = [pillar_dir] pillar_roots.extend([x for x in all_dirs if x != pillar_dir]) opts['pillar_roots'] = {env: pillar_roots}
cmd = 'cmd /c {0}'.format(cmd)
evt = salt.utils.event.get_event('minion', opts=self.opts, listen=False) evt.fire_event({'complete': True}, tag='/salt/minion/minion_schedule_saved')
BROKER_POOL_LIMIT = 0 BROKER_CONNECTION_TIMEOUT = 1
survey = self._create_test_survey() self.assertIsNotNone(survey) self.assertEquals(unicode(survey), self.test_survey_name)
try: import boto import boto.ec2.elb HAS_BOTO = True except ImportError: HAS_BOTO = False
warm_low_reg_model = deepcopy(high_reg_model) warm_low_reg_model.set_params(warm_start=True, alpha=final_alpha) warm_low_reg_model.fit(X, y) assert_greater(low_reg_model.n_iter_, warm_low_reg_model.n_iter_)
salt myminion git.submodule /path/to/repo/sub/repo init=True salt myminion git.submodule /path/to/repo/sub/repo update opts='--init'
if hasattr(self.beta_tester, '_roles'): del self.beta_tester._roles self.assertFalse(CourseBetaTesterRole(self.course.id).has_user(self.beta_tester))
if not hasattr(self.current_request_configuration, 'data'): return {} return self.current_request_configuration.data
from __future__ import absolute_import import logging import os
core_samples = np.asarray(n_neighbors >= min_samples, dtype=np.uint8) dbscan_inner(core_samples, neighborhoods, labels) return np.where(core_samples)[0], labels
'CUSTOM_COURSES_EDX': False,
with self.assertRaises(ValueError): mock_strftime_localized(test_datetime, 'BAD_FORMAT_SPECIFIER')
'expect': self.expect,
'outputter_dirs': list,
X = np.array(list(product(range(N_per_side), repeat=2)))
assert_equal(set(SYMMETRIC_METRICS).union( NOT_SYMMETRIC_METRICS, THRESHOLDED_METRICS, METRIC_UNDEFINED_BINARY_MULTICLASS), set(ALL_METRICS))
last = int(time.time()) salt.daemons.masterapi.clean_fsbackend(self.opts) salt.daemons.masterapi.clean_pub_auth(self.opts)
data = salt.utils.alias_function(items, 'data')
self.parents = []
X = np.vstack(data_chunks) X_lil = sp.lil_matrix(X) X_csr = sp.csr_matrix(X_lil) X_csc = sp.csc_matrix(X_lil)
width, height = image_obj.size self.assertEqual(width, height) actual_sizes[width] = name
cls._set_block_values(block_structure, cls.collect_data_key) cls.collect_call_count += 1
import salt.loader import salt.runner import salt.state import salt.utils import salt.utils.schema as S from salt.utils.doc import strip_rst as _strip_rst from salt.ext.six.moves import zip
for vname in values: if vname not in current_communities: __salt__['reg.set_value'](_HKEY, _COMMUNITIES_KEY, vname, values[vname], 'REG_DWORD')
if correct: self.problem_page.click_choice("choice_2") else: self.problem_page.click_choice("choice_1")
with remove_ccx(xblock) as (xblock, restore): return restore(self._modulestore.update_item( xblock, user_id, allow_not_found=allow_not_found, **kwargs ))
__virtualname__ = 'dsc'
y4 = np.array([1, 1, 1, 1, 1, 1, 1, 1, 2])
raise NotImplementedError
for y_pred in clf.staged_predict(X_test): assert_equal(y_test.shape, y_pred.shape)
AutoAuthPage(self.browser, username="second", email="second@example.com", no_login=True).visit()
incorrect = y_predict != y
exists_ce = is_active is not None and is_active full_name = user.profile.name
items_in_tree = self.store.get_items(course_key, include_orphans=False)
__virtualname__ = 'debconf'
DarkLangConfig( released_languages=('es-419, es, es-es'), changed_by=self.user, enabled=True ).save() self.assertAcceptEquals( expected, self.process_request(accept=accept_header) )
if "full_name" in params: response = self._update_full_name(request.user, params["full_name"]) if response is not None: return response
response_element.set("answer", unicode(answer))
AutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=staff).visit()
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
sparse_classifier = IsolationForest( n_estimators=10, random_state=1, **params).fit(X_train_sparse) sparse_results = sparse_classifier.predict(X_test_sparse)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
plot_calibration_curve(GaussianNB(), "Naive Bayes", 1)
from __future__ import absolute_import
stat['4505/est'], stat['4506/est'] = next(SaltNetstat().run())
return u"{namespace}:{name}, {value}".format( namespace=self.namespace, name=self.name, value=self.value, )
additional_requested_fields = [ 'student_view_data', 'block_counts', 'nav_depth', 'block_types_filter', ] for additional_field in additional_requested_fields: field_value = cleaned_data.get(additional_field)
from salt.states import serverdensity_device
pass
data = compressor.flush() if data: out.write(data)
url(r'^search/', include('search.urls')),
del self.lc_block._xmodule._selected_set
vocabulary = dict(vocabulary) if not vocabulary: raise ValueError("empty vocabulary; perhaps the documents only" " contain stop words")
return redirect(AUTH_DISPATCH_URLS[AUTH_ENTRY_LOGIN])
#)
from __future__ import absolute_import
problem_page.click_hint() self.assertIn("Hint (1 of 2): mathjax should work1", problem_page.extract_hint_text_from_html) problem_page.verify_mathjax_rendered_in_hint()
self.submit_question_answer('H1P1', {'2_1': 'Correct', '2_2': 'Incorrect'})
self.courseware_page.visit() csh_problem_page = CrowdsourcehinterProblemPage(self.browser) self.assertGreater(len(self.browser.find_elements_by_class_name('crowdsourcehinter_block')), 0) return csh_problem_page
self.q(css=".payment-button").click() FakePaymentPage(self.browser, self._course_id).wait_for_page()
position = getattr(self.system, 'position', None) if position is not None: assert isinstance(position, int) self.position = self.system.position
param_grid = ParameterGrid(self.param_distributions) grid_size = len(param_grid)
scaler_batch = StandardScaler(with_std=False).fit(X)
STATICFILES_STORAGE = 'pipeline.storage.NonPackagingPipelineStorage' STATIC_URL = "/static/"
credit_course = CreditCourse.objects.get(course_key=credit_course.course_key) self.assertTrue(credit_course.enabled)
'string_max_length': get_config_value('string_max_length'),
result = symmath_check(expected_str, input_str, dynamath=[dynamath]) self.assertTrue('ok' in result and result['ok'])
import salt.utils import salt.utils.decorators as decorators
continue
results.append(['', label, problem_name, count_grade, student_count_percent, percent])
if 'axes' not in d: d['axes'] = ['b', 0, 1, 'c'] self.__dict__.update(d)
expiration = attempt.created_at + timedelta(days=settings.VERIFY_STUDENT["DAYS_GOOD_FOR"]) before_expiration = expiration - timedelta(seconds=1) self.assertTrue(attempt.active_at_datetime(before_expiration))
pass
details.update(self._course_details)
__module__ = 'A'
update_wrapper(self, fn)
sigma_1 = 1 sigma_2 = 10 corr = 0.5 cov = np.array([ [sigma_1**2, corr * sigma_1 * sigma_2], [corr * sigma_1 * sigma_2, sigma_2**2] ])
lfw_pairs_train = fetch_lfw_pairs(data_home=SCIKIT_LEARN_DATA, resize=None, slice_=None, color=True, download_if_missing=False) assert_equal(lfw_pairs_train.pairs.shape, (10, 2, 250, 250, 3))
functions = [] def __init__(self, opts): pass
kpca = KernelPCA() Xt = kpca.fit_transform(X) assert_equal(Xt.shape, (3, 0))
if not hasattr(self, 'center'): self.center = False if not hasattr(self, 'gcn'): self.gcn = False
try: return StudentModule.objects.get( student=user, course_id=course_key, module_state_key=block_key, state__contains='"selected": [[' ) except StudentModule.DoesNotExist: return None
return self._tfidf.transform(X, copy=False)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, call, patch)
for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue
from __future__ import absolute_import import os import tempfile
try: from pysqlcipher import dbapi2 as sqlcipher HAS_SQLCIPHER = True except ImportError: HAS_SQLCIPHER = False
np.testing.assert_equal(mlp.get_total_input_dimension(['h0', 'h1']), 4) inp = theano.tensor.matrix()
if check_pickle: pickle.dumps(function)
if self.name in self.name_to_event_type_map: super(VideoEventTransformer, self).transform()
button_classes = self.q(css=MY_TEAMS_BUTTON_CSS).attrs('class') if len(button_classes) == 0: return False return 'is-active' in button_classes[0]
'ENABLE_SOFTWARE_SECURE_FAKE': False,
data = slave if core is None else {core: {'data': slave}}
headers_str = "{}\n\n{}".format(method, header_string(headers_dict)) body_str = body_string(body_dict) message = headers_str + body_str return message
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
sample_steps_available = [1, 2, 3] for sample_steps in sample_steps_available:
if not (isinstance(from_space, VectorSpace) and from_space.sparse): kwargs['batch_size'] = batch_size
patched_create_thumbnail.assert_called()
clf = DecisionTreeClassifier(max_depth=3, min_samples_split=2, criterion="gini", random_state=2) clf.fit(X, y)
user = User.objects.get(email=EMAIL) self.assertEqual(user.username, EDX_USER_ID)
input_formula = "2*x - x + y + y" self.assert_grade(problem, input_formula, "correct")
return False
([
config.toggle() config.edit() config.add_group() config.save()
return graders[self.credit_type[0]]( all_choices=all_choices, student_answer=student_answer, student_non_answers=student_non_answers )
import salt.utils.sdb
CourseEnrollmentFactory( course_id=self.course.id, user=self.user, mode="verified" )
pass
if update.IsInstalled: results['Installed'] += 1
from __future__ import absolute_import import salt.ext.six.moves.http_client as http_client
cmd = 'grep "^LANG=" /etc/default/locale'
AutoAuthPage( self.browser, username="johndoe_saee", email=self.student_identifier, course_id=self.course_id, staff=False ).visit()
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self._upload_file('auto_reg_enrollment_errors_warnings.csv')
self.base_extauth_bypass_sending_activation_email(True)
from salt.states import locale
self._count(X, Y)
pkgutil.__salt__ = {} pkgutil.__context__ = {}
index = 0
if name in names: ret[name] = version_num
pythoncom.CoInitialize()
url_user_invoice_preference = reverse('get_user_invoice_preference', kwargs={'course_id': self.course.id.to_deprecated_string()})
import time
self.assertTrue(element_has_text( page=course_outline_page, css_selector='.add-item a.button-new', text='New Unit' ))
from salt.exceptions import SaltRenderError import salt.utils.templates
message = "np.nan is an invalid document, expected byte or unicode string." exception = ValueError
from __future__ import absolute_import
output = _cmd('at', '-d', ' '.join(opts)) if output is None: return '\'at.atrm\' is not available.'
log.warning("Could not send email notification for refund.", exc_info=True)
for k, v in webresponse.headers.iteritems(): http_response[k] = v
if hasattr(self, 'process_manager'): self.process_manager.stop_restarting() self.process_manager.send_signal_to_processes(signum) self.process_manager.kill_children()
return [True]
self['event_type'] = self.legacy_event_type
repo = kwargs.get('repo', '') if not fromrepo and repo: fromrepo = repo
'HTTP_REFERER': 'referer', 'HTTP_ACCEPT_LANGUAGE': 'accept_language',
run_command = (test_command + 'cleanup').format(mode) __salt__['cmd.run'](run_command)
oh = OneHotEncoder(handle_unknown='42') oh.fit(X) assert_raises(ValueError, oh.transform, y)
__virtualname__ = 'git'
from __future__ import absolute_import
from salt.utils import http
ret['comment'] = 'User {0} is already present'.format(name) return ret
if not has_html_certificates_enabled(course_id): log.info( "Invalid cert: HTML certificates disabled for %s. User id: %d", course_id, user_id, ) return render_to_response(invalid_template_path, context)
instructor_task = self._create_success_entry() instructor_task.task_output = None succeeded, message = get_task_completion_info(instructor_task) self.assertFalse(succeeded) self.assertEquals(message, "No status information available")
self.do_targeted_feedback(self.tree) html = contextualize_text(etree.tostring(self._extract_html(self.tree)), self.context) return html
actual = GroupConfiguration.get_content_groups_usage_info(self.store, self.course) self.assertEqual(actual.keys(), [0])
from salt.modules import portage_config
username, user_id = self.log_in_as_unique_user() profile_page = self.visit_profile_page(username) self.verify_profile_page_is_public(profile_page)
tooltip = { 'type': 'subsection', 'num_students': num_students, 'subsection_num': c_subsection, 'subsection_name': subsection_name }
self.assert_grade( two_choice_two_input, self._make_answer_dict([(True, ["1"]), (True, ["Platypus"])]), "correct" )
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
return self.items.serialize()
rs = np.random.RandomState(1999) n_samples = 20 n_features = 10 X = rs.randn(n_samples, n_features)
break
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath, skip_if_binaries_missing
def __init__( self, expr ): super(Group,self).__init__( expr ) self.saveAsList = True def postParse( self, instring, loc, tokenlist ): return [ tokenlist ]
msg = _(u"An error occurred with SymbolicResponse. The error was: {error_msg}").format( error_msg=err, ) raise Exception(msg)
if with_output_activation: output_activation = ACTIVATIONS[self.out_activation_] activations[i + 1] = output_activation(activations[i + 1])
save_course_update_items(location, course_updates, course_update_items, user) if "status" in course_update_dict: del course_update_dict["status"] return course_update_dict
self.assertEqual(response.status_code, 406) msg = Messages.NO_DEFAULT_ENROLLMENT_MODE.format(course_id=self.course.id) self.assertResponseMessage(response, msg)
course_overview = self._assert_image_urls_all_default(modulestore_type, fake_course_image)
import logging from time import strftime, strptime, gmtime
nb_channel = int(get_scalar_constant_value(images.shape[0])) assert nb_channel % 16 == 0
response = self.client.get(self.dashboard_url) self.assertContains(response, attempt.expiration_datetime.strftime("%m/%d/%Y"))
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
element = self.find_css('#grading_type')[0] return self.get_selected_option_text(element)
import salt.ext.six as six
del context_mock.context self.assertIn("We're having trouble rendering your component", render_to_string("html_error.html", None))
self._params = []
from salt.log import setup as saltlog from salt.log.handlers import StreamHandler
if fit_intercept: grad[-2] = -2. * np.sum(weighted_non_outliers) / sigma grad[-2] -= 2. * epsilon * np.sum(sw_outliers)
from salt.states import incron
X = 15 * rng.rand(100, 1) y = np.sin(X).ravel()
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
cmap = CorrectMap() for answer_id in answer_ids: cmap.update(CorrectMap(answer_id=answer_id, queuestate=None)) self.problem.correct_map.update(cmap)
import logging
ls = salt.utils.alias_function(list_tab, 'ls')
if self.current_language() != code: self.select_language(code)
result[discussion_id] = UsageKey.from_string(result[discussion_id]).map_into_course(self.course_id)
self.assert_grade(problem, "Other String", "incorrect") self.assert_grade(problem, "second", "incorrect")
refresh_cache = True break
rm_known_host(user, hostname, config=config)
self.q(css=self.experiment_groups_css + " .new-button").first.click()
try: sdist = _make_sdist(opts, python_bin=python_bin) except NameError: sdist = _make_sdist(opts)
ipc_client.connect()
if which == 'LM':
super(SplitMongoKVS, self).__init__(copy.deepcopy(initial_values))
'django.contrib.admin',
assert_equal(100, n_lines)
world.visit(video_url)
for view in get_valid_salt_views(): if view not in _response['views']: return set_salt_view()
if existing['code'] == 200:
if os.path.isfile(destdir): os.remove(destdir) os.makedirs(destdir)
if not self.transcript_language == 'en': return response
if request.status_code == 204: return True
hipchat.__salt__ = {}
with self.assertRaises(UserOrgTag.DoesNotExist): UserOrgTag.objects.get(user=self.user, org=self.course.id.org, key="email-optin")
import integration from salt.modules import djangomod as django
from __future__ import absolute_import import logging import os import pprint import time
{date:%A, %d %B %Y @ %H:%m:%S UTC}.
unit = self.store.create_child(self.user_id, subsection.location, 'vertical') signal_handler.send.assert_not_called()
split_test = self.get_item_from_modulestore(self.split_test_usage_key, verify_is_draft=True) self.assertEqual(partition_id, split_test.user_partition_id) return split_test
if out['retcode']: ret = out['stderr'].strip() else: ret = out['stdout'].strip()
import salt.utils
self.client.ajax_post(course_update_url)
allowed_params = ('page', 'page_size', 'text')
self.assertEqual(new_version.test_content_field, 'default value') self.assertEqual(new_version.test_settings_field, 'default value')
self.assertTrue(self.video.select_language('zh'))
if self.__manager: yield else: try: self.__manager = _BulkAssertionManager(self) yield except Exception: raise else: manager = self.__manager self.__manager = None manager.raise_assertion_errors()
for signum in old_signals: signal.signal(signum, old_signals[signum])
from contextlib import contextmanager import sys import time import logging
return ItemFactory.create( parent_location=parent.location, category="problem", display_name="Group {} Sees This Problem".format(group), data="<h1>No Problem Defined Yet!</h1>", )
super(LoggerBackend, self).__init__(**kwargs) self.event_logger = logging.getLogger(name)
#html_last_updated_fmt = '%b %d, %Y'
if include_self: query = X._fit_X else: query = None return query
param_grid = [param_grid]
if comment_id in self.server.config.get('comments', {}): comment = self.server.config['comments'][comment_id] self.send_json_response(comment)
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, source_course_key): component = self.store.get_item(unit.location) self.assertEqual(component.display_name, updated_display_name)
n, p = 10, 5 rng = np.random.RandomState(0)
check_node(child.location, after_create, after_edit, editing_user, after_create, after_edit, editing_user)
import msgpack if msgpack.loads(msgpack.dumps([1, 2, 3]), use_list=True) is None: raise ImportError HAS_MSGPACK = True
self.assertIn('display_course_number: ""', response.content)
return self.name_to_event_type_map[self.name]
if node.attr == 'format': self.contains_format_call = True else: self.generic_visit(node)
self._access = {}
xnorml = xnorm dl2s = [x for x in xs] xs = [x + tau * d for x, d in zip(xs, ds)]
__func_alias__ = { 'list_': 'list' }
context['disable_student_access'] = True
y = 0.5 * X.ravel()
self.skipTest( 'Unable to find out how many PTY\'s are open on Darwin - ' 'Skipping for now' )
for x in range(1, 3): self.update_module() self.loader.clear() self.assertEqual(self.loader[self.module_key](), self.count)
assert_raises(ValueError, partial_dependence, {}, [0], X=X)
request = build_launch_request() views.lti_launch(request, unicode(COURSE_KEY), unicode(USAGE_KEY)) render.assert_called_with(request, USAGE_KEY)
import os import sys import time import errno import select import logging import tempfile import subprocess
if sig0[0] != '\x00': raise Exception('Number of unused bits is strange') sig = sig0[1:]
MODULESTORE_FIELD_OVERRIDE_PROVIDERS = ()
if is_editable: self.assertTrue(profile_page.privacy_field_visible) self.assertEqual(profile_page.visible_fields, self.PRIVATE_PROFILE_FIELDS)
from nose.plugins.skip import SkipTest from theano import config from theano import function from theano.sandbox import cuda from theano import tensor as T
data_home = get_data_home(data_home=DATA_HOME) assert_equal(data_home, DATA_HOME) assert_true(os.path.exists(data_home))
for key, val in six.iteritems(data): _kwargs['__pub_{0}'.format(key)] = val
return id
clf_weights = svm.SVC() clf_weights.fit(X, y, sample_weight=sample_weight_last_ten)
'top_file_merging_strategy': str,
import salt.utils import salt.config as config from salt.utils import namespaced_function from salt.exceptions import ( SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
if self.data: field_data = self._parse_video_xml(etree.fromstring(self.data)) self._field_data.set_many(self, field_data) del self.data
return u'grades'
n_samples = 100 n_features = 500 rank = 5 k = 10
params = estimator.get_params() original_params = deepcopy(params)
world.css_click(subsection_css)
form_data = {'course_id': self.course.id.run, 'email_enabled': True} form = CourseAuthorizationAdminForm(data=form_data) self.assertFalse(form.is_valid())
return self.q(css=self._bounded_selector('.team-card'))
X_trans = pipeline.fit_transform(X, y) X_trans2 = transft.fit(X, y).transform(X) assert_array_almost_equal(X_trans, X_trans2)
c = 0.03 X_c = (X + c)[:, np.newaxis, :] Y_c = (Y + c)[np.newaxis, :, :]
processor_reply_dump = models.TextField(blank=True)
PARENTAL_CONSENT_AGE_LIMIT = 13
pkg_params = {name: version_num}
__salt__['raid.save_config']()
return self.http_get( reverse(self.view, kwargs={'course_id': course_id or self.course_id}), **headers )
run = problem_key.run if not run: problem_key = course_key.make_usage_key_from_deprecated_string(problem_location) if problem_key.course_key != course_key: return []
self.assertIsNone(response.data[field_name])
n = len(X4) rng = np.random.RandomState(13) idx = np.arange(n) rng.shuffle(idx)
from xmodule.modulestore.mongo.draft import DraftModuleStore
css = '#tab{tab_index} button[data-category={category_type}] span'.format( tab_index=tab_index, category_type=category_type ) return self.q(css=css).html
X = X.tocsr()
__virtualname__ = 'cmd'
course_cohort = user_group.cohort return course_cohort.assignment_type
self.assertEqual(module.attempts, 2)
self.assertTrue(payload.get('success'))
self.assertIn( err_msg, resp.content )
import salt.utils from salt.ext.six.moves import map
import salt.utils
self._iter_mode = resolve_iterator_class('sequential') self._iter_topo = False self._iter_targets = False self._iter_data_specs = (self.X_space, 'features')
try: CourseUserGroup.objects.get(id=group_id) kwargs['group_id'] = group_id except CourseUserGroup.DoesNotExist: pass
import sys import time import binascii from datetime import datetime import hashlib import hmac import logging import salt.config import re
for minion in minions: minion.shutdown()
self.defaults = block_data.get('defaults', {})
sixth = -(len(e))
self.assertEqual(auth_settings._SOCIAL_AUTH_LOGIN_REDIRECT_URL, response.get('Location'))
pem_body = ''.join(pem_body.split())
open(libcuda_convnet_so).close()
this_file = __file__ if this_file.endswith(".pyc"):
if output: grains['virtual'] = output.lower() break
import salt.ext.six as six
y = zca_dataset.adjust_for_viewer(x.T).T z = x/np.abs(x).max(axis=0) assert_allclose(z, y)
import json import pprint import logging
from salttesting import skipIf from salttesting.helpers import ( ensure_in_syspath, requires_network ) ensure_in_syspath('../../')
return func(X, Y, **kwds)
step_size = x if self.verbose: logger.info('best objective: {0}'.format(mn)) assert not np.isnan(mn)
set_user_preference(user, key, value) pref = UserPreference.get_value(user, key) self.assertEqual(pref, value)
rng = np.random.RandomState(0) n_samples = 100 n_features = 80 n_components = 30 rank = 50
E = np.random.uniform(0, 0.1, size=(len(iris.data), 20))
manage.py ... transfer_students -f edX/Open_DemoX/edx_demo_course -t edX/Open_DemoX/new_demoX,edX/Open_DemoX/edX_Insider
return self.entrance_exam_message_selector.is_present()
recipients_info[email] += 1 to_list.pop()
self.train_set.adjust_to_be_viewed_with( self.train_set.X, np.ones(self.train_set.X.shape))
PROVIDER_NAME = "override" PROVIDER_BACKEND = "override" PROVIDER_ID = "override" USER_EMAIL = "override" USER_NAME = "override" USER_USERNAME = "override"
assert X.shape == (96 * 96 * 3, 100000) assert X.dtype == 'uint8'
import salt.utils import salt.utils.decorators as decorators import salt.ext.six as six
try: import jsonschema import jsonschema.exceptions HAS_JSONSCHEMA = True except ImportError: HAS_JSONSCHEMA = False
return estimator.score(*args, **kwargs)
attempt = SoftwareSecurePhotoVerification(user=user) attempt.status = 'approved' attempt.save()
expected_mongo_calls = 1 serializer_class = CourseDetailSerializer
raise NotImplementedError()
est = DummyRegressor(strategy="median") est.fit(X_learn, y_learn) y_pred_learn = est.predict(X_learn) y_pred_test = est.predict(X_test)
FINANCIAL_REPORTS = ENV_TOKENS.get("FINANCIAL_REPORTS", FINANCIAL_REPORTS)
verification_good_until = self._verification_valid_until(request.user)
assert len(self.hidden_layers) > 0
from __future__ import absolute_import import multiprocessing import logging
with with_edx_domain_context(is_edx_domain): response = self.client.get(reverse(url_name), params)
return {}
updated_overview.version = 11 updated_overview.save()
if self.n_components_ == 0: return np.eye(n_features) / self.noise_variance_ if self.n_components_ == n_features: return linalg.inv(self.get_covariance())
FEATURES['ENABLE_EDXNOTES'] = True
generate_cython()
if languages: language = languages[0] if language in locales_map: return FakeTranslations(locales_map[language]) return gettext.NullTranslations()
return os.access(parent_dir, os.W_OK)
self.store.mappings = {} course_key = self.course_locations[self.MONGO_COURSEID].course_key with check_exact_number_of_calls(self.store.default_modulestore, 'has_course', 1):
for cookie_name in [settings.EDXMKTG_LOGGED_IN_COOKIE_NAME, settings.EDXMKTG_USER_INFO_COOKIE_NAME]: response.delete_cookie( cookie_name.encode('utf-8'), path='/', domain=settings.SESSION_COOKIE_DOMAIN ) return response
assert_equal(v_measure_score(true_labels, labels), 1.0) assert_greater(inertia, 0.0)
width = self.ext.config['bliptv_width'][0] height = self.ext.config['bliptv_height'][0] return flash_object(url, width, height)
sources = xml_element.get('sources') if sources: return [location.strip() for location in sources.split(';')]
'cachedir': str,
announcement, start, now = sorting_dates(start, advertised_start, announcement)
if not wait_for_state(vmobj['vmid'], 'stopped'): return {'Error': 'Unable to stop {0}, command timed out'.format(name)}
defaults = _load(namespace)
clf = QuadraticDiscriminantAnalysis() with ignore_warnings(): y_pred = clf.fit(X2, y6).predict(X2) assert_true(np.any(y_pred != y6))
import integration import salt.utils from salt.modules import file as filemod
self.__dict__['_modulestore'] = modulestore
pass
weight = np.ones(classes.shape[0], dtype=np.float64, order='C')
grid_search_no_score.fit(X, y)
anova_filter = SelectKBest(f_regression, k=3) clf = svm.SVC(kernel='linear')
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
if (y_type not in ["binary", "multiclass", "multilabel-indicator"]): raise ValueError("{0} is not supported".format(y_type))
skip_if_no_sklearn() trainer = yaml_parse.load(test_yaml_ovr) trainer.main_loop()
return {'content': 'test1', 'data_field': 'test2'}
import os import logging
warnings.filterwarnings( 'ignore', 'With-statements now directly support multiple context managers', DeprecationWarning )
X, y = make_blobs(n_samples=500, n_features=2, centers=4, cluster_std=1, center_box=(-10.0, 10.0), shuffle=True,
self.click_button('handout_clear')
providers = OAuth2ProviderConfig.objects.all() pcount = len(providers)
from __future__ import absolute_import, print_function import os import sys from subprocess import Popen, PIPE, STDOUT
try: import redis HAS_REDIS = True except ImportError: HAS_REDIS = False
new_minions = set(minions_detected) - set(curr_minions)
with open(self.TEST_INDEX_FILENAME, "w+") as index_file: json.dump({}, index_file)
self.set_group_access(self.vertical, {1: []}) self.set_group_access(self.html, {2: None})
plt.subplot(1, 2, i + 1)
if course_mode_has_price and (access['finance_admin'] or access['sales_admin']): sections.append(_section_e_commerce(course, access, paid_modes[0], is_white_label, is_white_label))
hashed_pwd = gen_hash('salt', password, 'sha512')
group1_id = self.partition_service.get_user_group_id_for_partition(user_partition_id) self.assertEqual(group1_id, groups[0].id)
__context__['retcode'] = 0
self.distribution.running_salt_sdist = True self.distribution.salt_version_hardcoded_path = os.path.join( base_dir, 'salt', '_version.py' ) self.run_command('write_salt_version')
ridge_gcv.fit(filter_(X_diabetes), y_diabetes) alpha_ = ridge_gcv.alpha_ ret.append(alpha_)
return [x for x in cmd['stdout'].split('\n') if check_ip(x)]
from __future__ import absolute_import
seed = module.seed self.assertTrue(seed is not None)
try: json.loads(self.configuration) except ValueError: raise ValidationError('Must be valid JSON string.')
instructor_dashboard_page = self.visit_instructor_dashboard() allowance_section = instructor_dashboard_page.select_special_exams().select_allowance_section()
CREDIT_TASK_MAX_RETRIES = 5
from __future__ import absolute_import import os
VERSION = 0
self.certificates_section.wait_for_certificate_exceptions_section()
if n_active: linalg.solve_triangular(L[:n_active, :n_active], L[n_active, :n_active], trans=0, lower=1, overwrite_b=True, **solve_triangular_args)
self._closed_captions_visibility(False)
self.user.profile.country = restricted_country.country self.user.profile.save()
remote_rev = all_remote_refs['refs/tags/' + rev] remote_rev_type = 'tag'
top_level_export_dir = 'exported_source_course_with_asides' export_course_to_xml( self.store, contentstore, dest_course_key, self.export_dir, top_level_export_dir, )
self.assertIn(orphan_vertical.location, self.store.get_orphans(course.id))
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import re import logging
return UserPartition.from_json(self.configuration)
'providers': dict,
symbol = 'courseware.grades.grade' with patch(symbol) as mock_grade: mock_grade.return_value = {'grade': 'Pass', 'percent': 0.75} yield
self.course_hierarchy = self.get_course_hierarchy() self.blocks = self.build_course(self.course_hierarchy) self.course = self.blocks['course']
y1 = np.array([[0, 1, 1], [1, 0, 1]]) y2 = np.array([[0, 0, 1], [1, 0, 1]])
pillar_value = 'i am the pillar value\n'
from salt.modules.inspectlib.dbhandle import DBHandle from salt.modules.inspectlib.exceptions import (InspectorSnapshotException) import salt.utils from salt.utils import fsutils from salt.utils import reinit_crypto
self.assertEqual(module.attempts, 1)
self.assertFalse(self.video.is_error_message_shown)
return self.list_display
error_code = models.CharField(blank=True, max_length=50)
self.get_dummy_course(START)
return mini_batch
bkdir = os.path.join(bkroot, parent_dir[1:])
assert V is orig_V assert drop_mask is orig_drop_mask
import salt.utils.boto3 import salt.utils.compat import salt.utils
matched_buttons = [btn for btn in buttons if btn.text == component_type]
from salt.modules import debian_ip
indices, indptr, spmat_shape, sptype, outshp, kmap = \ convolution_indices.sparse_eval(imgshp, kshp, nkern, step, mode)
studio_link = None if course.course_edit_method == "Studio": studio_link = get_cms_course_link(course, page) return studio_link
return dict( itertools.chain.from_iterable( store.heartbeat().iteritems() for store in self.modulestores ) )
xpath = "//option[@value='option_2_dummy_default']" self.assert_has_xpath(xml, xpath, self.context)
return {'ok': False, 'msg': msg}
if not has_studio_read_access(user, course_key): raise PermissionDenied() course_module = modulestore().get_course(course_key, depth=depth) return course_module
if dtype is None: dtype = theano.config.floatX return theano.shared(theano._asarray(value, dtype=dtype), name=name, borrow=borrow)
if len(key) > 250: return False
X, y = make_classification(n_samples=500, n_features=25, n_clusters_per_class=1, n_informative=15, random_state=RANDOM_STATE)
opts['utils_dirs'] = ( opts.get('utils_dirs') or [os.path.join(opts['extension_modules'], 'utils')] )
self._test_email_address_failures(SMTPDataError(554, "Email address is blacklisted"))
from optparse import make_option from django.core.management.base import BaseCommand, CommandError from .prompt import query_yes_no
pass
tabs = [] expected_tabs = [u'LTI | Test Section | {0} Courseware | edX'.format(TEST_COURSE_NAME), u'TEST TITLE']
X_ = np.asarray(X) grid = np.unique(X_[:, 0]) pdp_2, axes = partial_dependence(clf, [0], grid=grid)
win_ip.__salt__ = {}
self.settings_page.wait_for_ajax() self.settings_page.wait_for_jquery_value('input#course-name:text', 'test_run')
import logging import time
else: self.alphas_ = np.asarray(alphas[0])
csv_rows = [row for row in unicodecsv.DictReader(csv_file)]
try: cmd_all = __salt__['cmd.run_all']( name, timeout=timeout, python_shell=True, **cmd_kwargs ) except CommandExecutionError as err: ret['comment'] = str(err) return ret
def is_browser_on_page(self): return self.q(css='body.view-subsection').present
'monitoring',
return False
from abc import ABCMeta, abstractmethod
GENERAL_ASSET_TYPE = 'asset'
cache.clear()
try: import ldap import ldap.modlist HAS_LDAP = True except ImportError: HAS_LDAP = False
config_course_cohorts( course, is_cohorted=True, auto_cohorts=["AutoGroup"] )
int2byte = operator.methodcaller("to_bytes", 1, "big")
self.mods = set(sys.modules)
return int(self.q(css=self.CURRENT_PAGE_NUMBER_CSS).text[0])
from salttesting import skipIf, TestCase from salttesting.helpers import ( ensure_in_syspath, TestsLoggingHandler, ForceImportErrorOn ) from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
if len(tree) == 1: return tree[0][0] if len(tree) == 3: return " <sup>{num}</sup>&frasl;<sub>{den}</sub> ".format(num=tree[0][0], den=tree[2][0]) return "Error"
import logging import os.path import os
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
offset += m.offset
from salt.exceptions import CommandExecutionError import salt.utils
import os import logging
from safe_lxml import defuse_xml_libs defuse_xml_libs()
if not settings.FEATURES.get('MILESTONES_APP', False): return None from milestones import api as milestones_api return milestones_api.get_user_milestones({'id': user.id}, namespace)
msg = _format_terse(tcolor, comps, ret, colors, tabular) hstrs.append(msg) continue
target = [-1] * len(JUNK_FOOD_DOCS) + [1] * len(NOTJUNK_FOOD_DOCS)
return token.client
self.jobs = {}
cdn_response_video_url = settings.CDN_VIDEO_URLS["CN"] + self.original_video_file self.assertEqual( rewrite_video_url(settings.CDN_VIDEO_URLS["CN"], self.original_video_url), cdn_response_video_url )
self.assertCourseSummaryFields(course_summaries)
train_with_monitoring_datasets( train_dataset=dataset1, monitoring_datasets=even_monitoring_datasets, model_force_batch_size=False, train_iteration_mode='sequential', monitor_iteration_mode='sequential')
import salt.utils import salt.ext.six as six
cmap = CorrectMap() for answer_id in answer_ids: cmap.update(CorrectMap(answer_id=answer_id, queuestate=None)) self.problem.correct_map.update(cmap)
return ['name', 'locale']
train, test = set(train), set(test)
from __future__ import absolute_import
self.config[option.dest] = value
counter = [0, 0, 0] for chosen in self.permut: index = counter[chosen] counter[chosen] = (counter[chosen] + 1) % self.limit[chosen] yield chosen, index
log = logging.getLogger(__name__)
if not hasattr(self, 'mask_weights'): self.mask_weights = None
'cherrypy', 'cherrypy.lib', 'cherrypy.process', 'cherrypy.wsgiserver', 'cherrypy.wsgiserver.ssl_builtin',
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
del params["honor_code"] params["username"] = "another_test_username" params["email"] = "another_test_email@example.com" self.assert_success(params)
FEATURES['ENABLE_SERVICE_STATUS'] = True
pass
ret['result'] = True ret['comment'] = 'image {0} is present'.format(name)
try: list_(name=name, runas=runas) return True except CommandExecutionError: return False
return "user_partitions"
from __future__ import absolute_import import json import logging
djangomod.__grains__ = {} djangomod.__salt__ = {} djangomod.__context__ = {}
__virtualname__ = 'etcd'
self.q(css="input.practice_exam").first.click()
self.distribution.salt_download_windows_dlls = True self.run_command('download-windows-dlls') self.distribution.salt_download_windows_dlls = None
return settings.FEATURES.get(cls.ENABLE_INDEXING_KEY, False)
size = tuple([X.shape[i] for i in xrange(X.ndim)]) if self.sync_channels: del size[X_space.axes.index('c')]
self.assert_redirect_to_dashboard_looks_correct(actions.do_disconnect( request.backend, request.user, None, redirect_field_name=auth.REDIRECT_FIELD_NAME))
response = self.client.get( self._url(), HTTP_ACCEPT="text/plain", ) self.assertEqual(response.status_code, 406)
self.assert_matching_events_were_emitted( event_filter={'name': u'edx.instructor.report.downloaded', 'report_url': report_url} )
import collections import json import logging from pkg_resources import resource_string
import salt.utils import salt.utils.odict as odict
step = min(step or 1, timeout) * BLUR_FACTOR
MAX_BOOKMARKS_PER_COURSE = ENV_TOKENS.get('MAX_BOOKMARKS_PER_COURSE', MAX_BOOKMARKS_PER_COURSE)
return self.get_item(location)
my_pca_preprocessor.apply(training_set, can_fit = True) my_pca_preprocessor.apply(test_set, can_fit = False)
self.video.wait_for_position('0:05') self.video.click_player_button('skip_bumper')
import matplotlib matplotlib.use('Agg')
first_result = SoftwareSecurePhotoVerification.get_initial_verification(user=user) self.assertIsNotNone(first_result)
'master_sign_key_name': str,
assert_raises(ValueError, cv.get_feature_names)
try: import hglib except ImportError: hglib = None
self.assert_grade(problem, answer, "correct")
ifp = self.capa_system.filestore.open(filename)
CUSTOM_THEME_OVERRIDES = { 'embargo': BlockedMessage( description='Embargo', template='static_templates/theme-embargo.html' ) }
module = module + '.' if not module.endswith('.') else module
repo['repo'].close() continue
predictions = cross_val_predict(clf, X, y) assert_equal(predictions.shape, (150,))
if strategy == "median": median = np.empty(len(columns)) for i, column in enumerate(columns): median[i] = _get_median(column, n_zeros_axis[i])
path = dirs[0] while os.path.basename(path) not in ['salt', 'salt-tests-tmpdir']: path, base = os.path.split(path)
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] y_state = layer_to_state[y]
import bz2 import copy
X_centered = X - X.mean(axis=0) lw = LedoitWolf(assume_centered=True) lw.fit(X_centered) shrinkage_ = lw.shrinkage_
self.local = salt.client.get_local_client( self.opts['_minion_conf_file'], io_loop=self.io_loop) self.local.event.subscribe('')
certificate_count = 3 for __ in xrange(certificate_count): self.generate_certificate(course_id=self.course.id, mode='honor', status=CertificateStatuses.generating)
json_output = json.dumps(returned_result) if len(json_output) > 1023: raise ValueError("Length of task output is too long: {0}".format(json_output)) return json_output
if isinstance(output, tuple) and len(output) == 2: output = output[0]
return self._folds[k]
response = self.client.get(self.programs_path) self.assertEquals(response.status_code, status_code) return response
if '.' in val: val = float(val) else: val = int(val) data[plugin][key] = val
if req["namespace"] == old_req.namespace and req["name"] == old_req.name: found_flag = True break
retcode = 1
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'gogrid'
self.check_get_and_set_methods(tab)
import salt.ext.six as six
page_kwarg = self.kwargs.get(self.paginator.page_query_param) page_query_param = self.request.query_params.get(self.paginator.page_query_param) return page_kwarg or page_query_param or 1
self.assert_grade(problem, 'choice_foil_4', 'incorrect') self.assert_grade(problem, 'not_a_choice', 'incorrect')
from pylearn2.datasets import vector_spaces_dataset
self.assertTrue(bool(version))
return u",".join([u'"{}"'.format(val) for val in values])
train = cifar10.CIFAR10(which_set="train")
ApiAccessConfig(enabled=False).save() response = self.client.get(self.url) self.assertEqual(response.status_code, 404)
self.assertFalse('test.missing_func' in self.loader._dict)
return None
self._auto_auth({'username': 'test', 'course_id': course_id})
ret['result'] = False
from __future__ import absolute_import import re import logging
__func_alias__ = { 'list_installed': 'list', 'update_installed': 'update', 'import_image': 'import' }
task_type = 'detailed_enrollment_report' task_class = enrollment_report_features_csv task_input = {} task_key = "" return submit_task(request, task_type, task_class, course_key, task_input, task_key)
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
import logging
if len(y.shape) != 1: G_diag = G_diag[:, np.newaxis] return G_diag, c
for course_key, deadline in deadlines.iteritems(): VerificationDeadline.objects.create( course_key=course_key, deadline=deadline, )
import salt.ext.six as six
if index_entry is not None: self._update_head(course_key, index_entry, xblock.location.branch, new_id)
if not isinstance(validation, Validation): raise TypeError("Copy must be called with a Validation instance") studio_validation = cls(validation.xblock_id) studio_validation.messages = validation.messages return studio_validation
log = logging.getLogger(__name__)
return xblock._edited_by
self._assert_requirements_displayed(response, [ PayAndVerifyView.PHOTO_ID_REQ, PayAndVerifyView.WEBCAM_REQ, ])
return self.file_errors
'openedx.core.djangoapps.bookmarks',
self.rwork = _aligned_zeros(self.ncv, self.tp.lower())
try: subprocess.check_call( script, stdout=sys.stdout, stderr=sys.stderr ) except Exception: os.chdir(cwd) raise
world.wait_for_ajax_complete()
n_samples_per_fold = np.zeros(n_folds)
data.update({'queuekey': header['lms_key']})
import ioflo.base.deeding
if version_num == old.get(pkg_name) \ or (pkg_name in old and old[pkg_name] == 'Not Found'): ret[pkg_name] = {'current': version_num} continue
try: master, self.pub_channel = yield self.eval_master( opts=self.opts, failed=True) except SaltClientError: pass
lr = LogisticRegression(C=1., solver='lbfgs')
self.extra = extra
mode = 2 if Minv is None: Minv_matvec = get_inv_matvec(M, symmetric=True, tol=tol) else: Minv = _aslinearoperator_with_dtype(Minv) Minv_matvec = Minv.matvec M_matvec = _aslinearoperator_with_dtype(M).matvec
unique_together = ('user', 'usage_key')
w = [e for e in w if e.category is not np.VisibleDeprecationWarning]
for option in self.option_list: if option.dest is None: continue
import salt.utils import salt.syspaths from salt.exceptions import SaltRenderError
ret = __salt__['cmd.run_all'](cmd, runas=user, python_shell=False) if ret['retcode'] != 0: return ret
if convnet_available.compile_error: _logger.debug('error last time') return False
assert_almost_equal(mcc, 0.)
scsi_spec.device.sharedBus = vim.vm.device.VirtualSCSIController.Sharing.physicalSharing
exif_dict = piexif.load(exif) return exif_dict['0th'].get(piexif.ImageIFD.Orientation)
node = _guess_node_id(node) apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
first_group = self.user_partition.groups[0] self.user_partition.scheme.current_group = first_group
$ ./manage.py lms resubmit_error_certificates -c edX/DemoX/Fall_2015 -c edX/DemoX/Spring_2016
if which_set in ['train', 'test']: data_x, data_y = load_data("{0}{1}_32x32.mat".format(path, which_set))
if __salt__['mysql.user_exists'](name, host, unix_socket=unix_socket, **connection_args):
single.shell.send( trans_tar, '{0}/salt_state.tgz'.format(__opts__['thin_dir']))
vertical1_parent = self.store.get_parent_location(vertical1.location) self.assertEqual(unicode(vertical1_parent), unicode(chapter1.location))
'ENABLE_PREREQUISITE_COURSES': False,
for pool_size in [1, 2, 5]: do_test(pool_size)
self._initialize_mixed(mappings={})
from salt.exceptions import SaltSystemExit
#np.sum(np.abs(y_hat - y), axis=1) != 0
next_offset = None
log = logging.getLogger(__name__)
for octet in (second_octet, third_octet, fourth_octet): if (octet < 0) or (octet > 255): return False return True
n_neighbors = 10 n_samples = 1000
raet_publish.__opts__ = {}
redirect_uri = super(ExceptionMiddleware, self).get_redirect_uri(request, exception)
print("Feature ranking:")
import numpy as np self.np = np if hasattr(np, 'getbuffer'): self._getbuffer = np.getbuffer else: self._getbuffer = memoryview
try: return _int_to_bytes(address, 16, 'big') except: raise ValueError("Address negative or too large for IPv6")
resp = self.client.get(self.url, HTTP_ACCEPT='application/json') self.assertEquals(resp.status_code, 406)
rng = np.random.RandomState(seed) X = rng.randn(10, 10) Xcsr = csr_matrix(X)
np_ver = [int(x) for x in unpickler.np.__version__.split('.', 2)[:2]]
mock.side_effect = ValueError self.assertEqual(client.get('not-found'), None)
limiter.tick_bad_request_counter(request)
urllib3_logger = logging.getLogger('urllib3') urllib3_logger.setLevel(logging.WARNING)
cherrypy.session.release_lock()
return filename
import os import time import fnmatch import hashlib import logging import datetime from collections import MutableMapping from multiprocessing.util import Finalize
__func_alias__ = { 'list_': 'list', 'get_': 'get', 'put_': 'put', 'delete_': 'delete', }
@skip("Not supported by DjangoXBlockUserStateClient") def test_iter_blocks_deleted_block(self): pass
FEATURES['ENABLE_TEAMS'] = True
dev_index = dev_list.index(rd_name)
self._mock_ecommerce_courses_api(self.course_key, self.COURSE_API_RESPONSE) CreditProvider.objects.all().update(active=False) self.assertEqual(get_credit_provider_display_names(self.course_key), [])
if os_family == 'FreeBSD': return
from __future__ import unicode_literals
script = "correct = ['correct' if 'test' in submission[0] else 'incorrect']" problem = self.build_problem(answer=script)
initial_handlers = logging.root.handlers[:]
k_dims = self.k1.n_dims for i, kernel in enumerate(self.kernels): kernel.theta = theta[i * k_dims:(i + 1) * k_dims]
import salt.version
return self.pacing_css + ':checked'
return {'pythonpath': sys.path}
is_default = True
ADD_PKG = 'algol68g' DEL_PKG = 'acme'
if existing['code'] == 200:
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True], credit_type='halves' )
AutoAuthPage( self.browser, username=self.student_name, email=self.student_email, course_id=self.course_id, ).visit()
self.mean_square_grads[param.name] = mean_square_grad
if revision == ModuleStoreEnum.RevisionOption.published_only: return get_published()
cls.objects.filter(user=user, name=name).delete() cls.objects.create(user=user, name=name, value=value)
self.assertTrue(has_access(self.beta_tester, 'load', self.content, self.course.id))
return self._modulestore._get_modulestore_for_courselike(locator)
print("--- Sparse matrices")
thread = cc.Thread.find(thread_id) result = _vote_or_unvote(request, course_id, thread, value) thread_voted.send(sender=None, user=request.user, post=thread) return result
expiration_datetime_is_explicit = models.BooleanField(default=False)
outliers_sw = sample_weight[outliers_mask] n_sw_outliers = np.sum(outliers_sw) outlier_loss = (2. * epsilon * np.sum(outliers_sw * outliers) - sigma * n_sw_outliers * epsilon ** 2)
NPM_VENDOR_DIRECTORY.mkdir_p()
from salttesting.helpers import ensure_in_syspath, requires_salt_modules ensure_in_syspath('../../')
elif line[0].isspace(): sline = line.split()
PROFILE_IMAGE_MAX_BYTES = 1000 PROFILE_IMAGE_MIN_BYTES = 1000
'ENABLE_EDXNOTES': False,
queryset = self.model.objects.current_set()
with check_mongo_calls(num_finds.pop(0), num_sends): path = path_to_location(self.store, location) self.assertEqual(path, expected)
other_parent_loc = course_key.make_usage_key('vertical', 'zeta') other_parent = store.get_item(other_parent_loc) self.assertIn(shared_item_loc, other_parent.children)
try: evaluator(dict(), dict(), answer) return True except (StudentInputError, UndefinedVariable): return False
self._create_test_survey() with self.assertRaises(SurveyFormNameAlreadyExists): self._create_test_survey()
spmatrix = spmatrix.astype(dtype)
log.warning( 'Assuming tag \'{0}\' for repo \'{1}\'' .format(default_tag, image) ) r_tag = default_tag
completion_date = get_last_exam_completion_date(course_key, username)
assert_true(X_scaled is not X)
msg = 'Failed to verify package(s)' if out['stderr']: msg += ': {0}'.format(out['stderr']) raise CommandExecutionError(msg)
manager = LibraryImportManager(*args, **kwargs) return list(manager.run_imports())
prb1 = StudentModule.objects.get( course_id=self.course.id, student=self.student_user )
self.assertEqual(len(mail.outbox), 1)
from __future__ import absolute_import import copy import errno import glob import logging import os import re import shlex
pass
codeparam = self.xml.find('codeparam') assert codeparam is not None, "Unsupported old format! <coderesponse> without <codeparam>" self._parse_coderesponse_xml(codeparam)
packages_sources={} installed_packages_list={}
course_image = u'在淡水測試.jpg' self.course = CourseFactory.create(course_image=course_image)
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
course_overview = CourseOverview.get_from_id(course.id)
if 'matrices_save_path' not in state: state['matrices_save_path'] = None
if not _run_all(cmd, 'error', 'Error creating bcache partitions on {0}: {{0}}'.format(dev)): return False dev = '{0}2'.format(dev)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'gce', vm_['profile'], vm_=vm_) is False: return False
log.info('deleting redemption entry (%s) from the database.', code_redemption.id) code_redemption.delete()
scaler.fit_transform(X_2d)
snapshot = super(CourseRegistrationCodeInvoiceItem, self).snapshot() snapshot['course_id'] = unicode(self.course_id) return snapshot
from __future__ import absolute_import import pprint import logging
with remove_ccx(course_key) as (course_key, restore): return restore(self._modulestore.get_course( course_key, depth=depth, **kwargs ))
from .utils.validation import check_array data = check_array(data, accept_sparse='csr') row_ind, col_ind = self.get_indices(i) return data[row_ind[:, np.newaxis], col_ind]
self.assert_no_xpath(xml, "//label[@class='choicegroup_incorrect']", self.context)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
'syndic_max_event_process_time': float,
records = LoginFailures.objects.filter(user=user).order_by('-lockout_until') for extra_record in records[1:]: extra_record.delete() return records.get()
y = np.dot(X, w) X = sp.csc_matrix(X) if n_targets == 1: y = np.ravel(y) return X, y
K_test = np.dot(X_[180:], X_[:180].T) y_test = y_[180:]
import integration
linter = JavaScriptLinter() results = FileResults('') linter.check_javascript_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
pass
#'django.contrib.auth.middleware.AuthenticationMiddleware', 'cache_toolbox.middleware.CacheBackedAuthenticationMiddleware', 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
if not is_configured("python"): raise SkipTest
dist_X, ind_X = getattr(nbrs_X, method)(None) dist_D, ind_D = getattr(nbrs_D, method)(None) assert_array_almost_equal(dist_X, dist_D) assert_array_almost_equal(ind_X, ind_D)
return self._explode_shorthand_ip_string()
self._each_parens(r'\left(x^y\right)', 'x^y', '(', tall=True)
response = self.send_patch(self.client, {field_name: ""}) self.assertIsNone(response.data[field_name])
assert_array_equal(labels, labels_csr) assert_array_almost_equal(new_centers, new_centers_csr) assert_almost_equal(incremental_diff, incremental_diff_csr) assert_almost_equal(old_inertia, old_inertia_csr) assert_almost_equal(new_inertia, new_inertia_csr)
from __future__ import absolute_import
action_name = ugettext_noop('generated') task_fn = partial(upload_students_csv, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
if found_using_guid: for update in wua_search_result.Updates: wua_found.Add(update) else: for update in wua_search_result.Updates: if name in update.Title: wua_found.Add(update)
LINEAR_CHILDREN_MAP = [[1], [2], [3], []]
self.attempt_login(403, return_to="http://apps.cs50.edx.or")
self.browser.set_window_size( initial['width'], initial['height'] )
if 'unknown' in out: return '3' else: return out.split()[1]
states = [] def __init__(self, opts): pass
grad_shared = sharedX(zv) z_shared = sharedX(zv)
random_state = check_random_state(self.random_state) return gaussian_random_matrix(n_components, n_features, random_state=random_state)
if score is None: self.clear_user_module_score(real_user) return Response(status=200)
result = self.client.login(username=self.USERNAME, password=self.NEW_PASSWORD) self.assertTrue(result)
self.navigate_to_video()
return numpy.arcsinh(1. / val)
loss_l = self.loss.lower()
if host: self.host = host else: self.host = socket.gethostname()
subtask_status_info[current_task_id] = new_subtask_status.to_dict()
if user is not None and user.is_active: if 'openid_error' in request.session: del request.session['openid_error']
self._test_page("/logout", 302)
import salt.utils import salt.payload
non_editable_fields.extend([LibraryContentFields.mode, LibraryContentFields.source_library_version]) return non_editable_fields
from __future__ import absolute_import
from salt.runners import winrepo from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON
self.wait_for_element_visibility( self._bounded_selector(self.EDITOR_SELECTOR), "Note Editor is visible." )
patcher = patch('config_models.models.cache', Mock(get=Mock(return_value=None))) patcher.start() self.addCleanup(patcher.stop)
del context_mock.context self.assertIn("this module is temporarily unavailable", render_to_string("courseware/error-message.html", None))
from salt.states import sysctl
self.cohort_management_page.select_discussion_topic(self.inline_key)
source_blocks.extend(self._problem_type_filter(library, dest_block.capa_type))
return a * b / fr.gcd(a, b)
linear_loss = y - safe_sparse_dot(X, w) if fit_intercept: linear_loss -= intercept abs_linear_loss = np.abs(linear_loss) outliers_mask = abs_linear_loss > epsilon * sigma
mlp_model = MLP( layers=[mlp_nonlinearity(dim=output_channels, layer_name='mlp', irange=1.0)], batch_size=batch_size, nvis=nvis )
UserCourseTagFactory( user=self.student_user, course_id=self.course.id, key='xblock.partition_service.partition_{0}'.format(self.partition.id), value=str(user_partition_group) )
def __init__(self, *args, **kwargs): super(OrgStaffRole, self).__init__('staff', *args, **kwargs)
log.error( 'Unable to get SHA of HEAD for %s remote \'%s\'', self.role, self.id ) return None
from __future__ import absolute_import
self.assertEquals( preview.latex_preview('f(3)', functions=['f']), r'\text{f}(3)' )
homework_1_score = 1.0 / 2 homework_2_score = (1.0 + 2.0) / 4 self.check_grade_percent(round((homework_1_score + homework_2_score) / 2, 2))
list_check = lambda x: isinstance(x, list) clf = CheckingClassifier(check_X=list_check) predictions = cross_val_predict(clf, X.tolist(), y.tolist())
if obj: return self.readonly_fields + ('status', 'checkpoint', 'user', 'response', 'error') return self.readonly_fields
Created Private Key: "/etc/pki/my_little/certs/www.example.com.key Created CSR for "www.example.com": "/etc/pki/my_little/certs/www.example.com.csr"
self.submit_question_answer('p1', {'2_1': u'Correct'}) self.submit_question_answer('p2', {'2_1': u'Correct'})
grade_summary = self.get_grade_summary() self.assertEqual(grade_summary['percent'], percent)
QUERY_INTERVAL = 1000
masterStack.keep.auto = raeting.AutoMode.always.value minionStack.keep.auto = raeting.AutoMode.always.value
user = models.ForeignKey(User, db_index=True) site = models.CharField(max_length=255, db_index=True)
time.sleep(30) raise UserWarning("Unable to connect to room {0}".format(room))
self.update_structure(course_key, new_structure)
'reactor_worker_hwm': int,
item = self.store.get_item(item_location) item.group_access[self.content_partition.id] = group_ids self.store.update_item(item, self.user.id)
from __future__ import absolute_import
convnet_available.compiled = False convnet_available.compile_error = False
old = list_pkgs()
scaler_batch = MaxAbsScaler().fit(X)
queryset = User.objects.filter( preferences__key=NOTIFICATION_PREF_KEY ).select_related( "profile" ).prefetch_related( "preferences", "courseenrollment_set", "course_groups", "roles__permissions" )
logging.getLogger('boto3').setLevel(logging.CRITICAL) HAS_BOTO = True
'openedx.core.djangoapps.bookmarks',
self.assertFalse(library_container.has_validation_error) self.assertFalse(library_container.has_validation_warning)
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) for Cls in [GradientBoostingRegressor, GradientBoostingClassifier]: est = Cls(n_estimators=300, max_depth=1) est.fit(X, y)
problem_item = self.store.create_item(self.user_id, test_course_key, 'problem', 'Problem_Item') self.assertFalse(self.store.has_published_version(problem_item))
if 'master_uri' not in __opts__: __opts__['master_uri'] = 'tcp://{ip}:{port}'.format( ip=salt.utils.ip_bracket(__opts__['interface']),
num_vis = rng.randint(1,11) n_classes = rng.randint(1, 11)
laplacian, dd = graph_laplacian(sims, normed=False, return_diag=True) _, diffusion_map = eigh(laplacian) embedding_2 = diffusion_map.T[:n_components] * dd embedding_2 = _deterministic_vector_sign_flip(embedding_2).T
n_candidates = 0 candidate_set = set() min_candidates = self.n_candidates * self.n_estimators while (max_depth > self.min_hash_match and (n_candidates < min_candidates or len(candidate_set) < n_neighbors)):
return '{path}?username={username}&course_key={course_key}'.format( path=reverse(self.view_name), username=eligibility.username, course_key=eligibility.course.course_key )
import_course_from_xml(self.store, self.user.id, root_dir) imported_word_cloud = self.store.get_item(course_id.make_usage_key('word_cloud', 'untitled'))
help_text=_( u"Badge images must be square PNG files. The file size should be under 250KB." ), upload_to='course_complete_badges', validators=[validate_badge_image]
n_words = 0 while n_words == 0: n_words = generator.poisson(length)
if paginated_results.page != page: raise PageNotFoundError("Page not found (No results on this page).")
rendered_html = etree.XML(problem.get_html())
condition = label.any(axis=1) return tuple(var.compress(condition, axis=0) for var in (train, label))
from __future__ import unicode_literals
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
if token != '': new_headers['X-Amz-Security-Token'] = token
import salt.utils
weight = X[rows][:, cols].sum() cut = (X[row_complement][:, cols].sum() + X[rows][:, col_complement].sum()) return cut / weight
self.assertEqual(len([r for r in httpretty.httpretty.latest_requests if r.method == 'POST']), 0)
from __future__ import absolute_import
self.assertEqual(user_info["version"], settings.EDXMKTG_USER_INFO_COOKIE_VERSION)
import salt.ext.six as six import salt.utils from salt.ext.six import string_types from salt.exceptions import CommandExecutionError import salt.utils.systemd import string
self.assertEqual(resp.status_code, 200)
for key, val in new_block.edit_info.to_storable().iteritems(): if getattr(destination_block.edit_info, key) is None: setattr(destination_block.edit_info, key, val)
#epub_post_files = []
from sys import executable module_path = executable
enabled = get_enabled(runas=runas)
from salt.states import influxdb_database
for boolkey in ('running', 'writeback_running', 'congested'): if boolkey in result: result[boolkey] = bool(result[boolkey])
os.utime(path_test, (fstats_orig.st_mtime-age, fstats_orig.st_atime-age))
query = "UPDATE auth_userprofile SET country = NULL WHERE id = %s" connection.cursor().execute(query, [str(self.user.profile.id)])
postfix.__salt__ = {}
import json try: import syslog HAS_SYSLOG = True except ImportError: HAS_SYSLOG = False
category_start_date = None for entry in entries: if category_start_date is None or entry["start_date"] < category_start_date: category_start_date = entry["start_date"]
import salt.utils
from __future__ import absolute_import import logging
'submissions', 'openassessment', 'openassessment.assessment', 'openassessment.fileupload', 'openassessment.workflow', 'openassessment.xblock',
mlb = MultiLabelBinarizer() assert_array_equal(mlb.fit_transform(inp), indicator_mat) assert_array_equal(mlb.classes_, classes) assert_array_equal(mlb.inverse_transform(indicator_mat), inp)
return False
CDN_VIDEO_URLS = {}
mean_dist = np.mean(pairwise_distances(query, X, metric='cosine')) neighbors = lshf.radius_neighbors(query, radius=mean_dist, return_distance=False)
for username in ["", "a"]: params["username"] = username assert_username_error("Username must be minimum of two characters long")
return _get_block_structure_manager(course_key).get_collected()
self.assertListEqual( self.get_item_from_modulestore(self.seq2_usage_key).children, [] )
self._folds = stacked_blocks
self.full_path = full_path self._mark_disabled(string_lines.get_string())
__virtualname__ = 'sysctl'
from pylearn2.blocks import Block from pylearn2.utils import sharedX
student_dict['cohort'] = next( (cohort.name for cohort in student.course_groups.all() if cohort.course_id == course_key), "[unassigned]" )
from scipy import misc face = misc.face(gray=True)
role = __salt__['keystone.service_get'](name=name, profile=profile, **connection_args)
course_enrollment = CourseEnrollment.get_enrollment(user, course_key) enrollment_date = course_enrollment.created if course_enrollment else ""
SITE_ID = 1 SITE_NAME = "example.com" HTTPS = 'on' ROOT_URLCONF = 'lms.urls'
('RIGHTPADDING', (5, 0), (5, -1), 7 * mm),
import logging
cherrypy.response.headers['Content-Type'] = best out = cherrypy.response.processors[best] return out(ret)
for status in ["created", "ready", "denied"]: attempt.status = status attempt.save() assert_false(SoftwareSecurePhotoVerification.user_has_valid_or_pending(user), status)
assert_almost_equal(s2, s3)
n, p, k = 10, 5, 3 rng = np.random.RandomState(0)
from salttesting.helpers import ensure_in_syspath, destructiveTest from salt.ext.six.moves import range ensure_in_syspath('../../')
modal.release_date = '5/14/1969'
from __future__ import absolute_import import logging
value = None
import integration from integration.utils import testprogram import salt.utils import salt.defaults.exitcodes
cls = args[0] if cls.search_is_enabled(): return f(*args, **kwargs)
self.vert1 = ItemFactory.create( parent_location=self.seq1.location, category='vertical', display_name='untitled vertical 1' )
filerepos = _parse_repo_file(repofile)[1] return filerepos[name]
for key in cli_config: setattr(self.options, key, cli_config[key])
del params["username"] assert_username_error("Username must be minimum of two characters long")
CountryAccessRule.objects.create( restricted_course=self.restricted_course, country=self.countries['US'], rule_type=CountryAccessRule.WHITELIST_RULE )
from __future__ import absolute_import
response = self.client.post(set_course_price_url, data) self.assertTrue("Please Enter the numeric value for the course price" in response.content)
oa = OAS(store_precision=False, assume_centered=True) oa.fit(X_centered) assert_almost_equal(oa.score(X_centered), score_, 4) assert(oa.precision_ is None)
import salt.utils import salt.utils.mac_utils from salt.exceptions import SaltInvocationError from salt.ext.six.moves import range
with open(CONFIG_ROOT / CONFIG_PREFIX + "env.json") as env_file: ENV_TOKENS = json.load(env_file)
self.assertEqual( len(CourseEnrollment.objects.filter(mode='honor', user_id__in=real_user_ids)), 0 )
import functools import glob import json import logging import os import shutil import subprocess import sys import time import traceback import base64 from salt.utils import vt
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
inference_fn(x)
self.assertEqual(course.edited_by, "testassist@edx.org") self.assertDictEqual(course.grade_cutoffs, {"Pass": 0.55})
from __future__ import absolute_import import logging import uuid import re
self.q(css=self.search_bar_selector + ' [type="submit"]').click() self.wait_for_element_visibility('.search-info', 'Search results are shown')
self.set_user_partitions(self.vertical_location, [split_test_partition, self.animal_partition]) self.check_access(self.red_cat, self.vertical_location, False)
return self.lcp.get_score()
module.system.user_is_staff = True
from __future__ import absolute_import, print_function import errno import logging import os import tempfile import shutil
self.assertTrue(glusterfs.create_volume('newvolume', 'host1:/brick', start=True)) self.assertTrue(mock_start_volume.called)
from salt.utils import path_join
attempt2 = SoftwareSecurePhotoVerification(user=user) attempt2.status = 'denied' attempt2.error_msg = '[{"photoIdReasons": ["Not provided"]}]' attempt2.save()
return AUTHOR_VIEW if has_author_view(block) else STUDENT_VIEW
GeneratedCertificateFactory.create( user=self.user, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor' )
if self.multi_class == 'multinomial': scores = multi_scores coefs_paths = multi_coefs_paths
self.q(css=self.BOOKMARKS_BUTTON_SELECTOR).first.click() if wait_for_results: EmptyPromise(self.results_present, "Bookmarks results present").fulfill()
from salttesting.unit import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../..')
return "{}/library/{}/team/".format(BASE_URL, unicode(self.locator))
if exc.errno != errno.EEXIST: raise else: ret['comment'] = 'File {0} exists and cannot be overwritten'.format(name)
CourseOverview.get_from_id(params["course_key"])
store = self._get_modulestore_for_courselike(location.course_key) return store.get_parent_location(location, **kwargs)
if answer_id in self.cmap: return self.cmap[answer_id]['correctness'] == 'partially-correct' return None
elements = self.q(css="ol.course-tabs .new-post-btn") return elements.first if elements.visible and len(elements) == 1 else None
self._validate_estimator()
self.fs.delete(location_or_id)
_, region, _, _ = _get_profile(service, region, None, None, profile) return region
self.library = store.get_library(self.lib_key)
message = msg_format.format( action=action_name, succeeded=num_succeeded, attempted=num_attempted, total=num_total, skipped=num_skipped, student=student ) return (succeeded, message)
from salt.ext.six import string_types import salt.utils
classes = ('credit-eligibility', 'eligibility-heading') method = self.assertContains if is_requirement_displayed else self.assertNotContains
self._action_btn_for_xblock_id(xblock_id, "duplicate").click() wait_for_notification(self) self.wait_for_ajax()
brc_partial.set_params(n_clusters=3) brc_partial.partial_fit(None) assert_array_equal(brc_partial.subcluster_labels_, brc.subcluster_labels_)
selector = self.prefix + ' .signatory-{}-view-{}'.format(self.mode, self.index) return ' '.join([selector, css])
self.get_data_specs(model)[0].validate(data)
if kwargs.get('clean_file', False): salt.utils.fopen(kwargs['file'], 'w').close()
pos = logical_line.find('.has_key(') if pos > -1 and not noqa: yield pos, "W601 .has_key() is deprecated, use 'in'"
try: response_msg_div = etree.XML('<div>%s</div>' % str(response_msg))
try:
paginator = pagination_cls() page = paginator.paginate_queryset(queryset, request)
self.assertEqual( self.store.has_published_version(course1_item), self.store.has_published_version(course2_item) )
parent = self.get_a_block(usage_id="parent") parent.not_inherited = "Changed!" self.assertEqual(parent.not_inherited, "Changed!")
import salt.utils import salt.utils.decorators as decorators from salt.utils.odict import OrderedDict
X_sparse_pruned = sparse.csr_matrix(X_dense)
for k in xrange(n_folds): this_blocks = [] for i, layer in enumerate(layers): this_blocks.append(layer[k]) this_stacked_blocks = StackedBlocks(this_blocks) stacked_blocks.append(this_stacked_blocks)
if self.closed() or submitted_without_reset: return False else: return True
self.assertEqual(len(httpretty.httpretty.latest_requests), 1)
from __future__ import absolute_import import os import logging import time from collections import MutableMapping
ret = self.run_function('beacons.enable_beacon', ['ps']) self.assertTrue(ret['result'])
return self.q(css='{} .entrance-exam-task-history-table'.format(self.EE_CONTAINER)).is_present()
students_require_certificates = enrolled_students.filter( generatedcertificate__course_id=course_id, generatedcertificate__status__in=statuses_to_regenerate ) return list(students_require_certificates)
if user: os.chown(ssh_dir, uinfo['uid'], uinfo['gid']) os.chmod(ssh_dir, 0o700)
with assert_raises(TypeError): StudioValidation("id").set_summary("foo")
authentication_classes = []
DELAY = 0.5
url = reverse('shoppingcart.views.postpay_callback') response = self.client.post(url, processor_response_params) self.assertRedirects(response, self._receipt_url)
raise
if __grains__['os_family'] not in ('Debian',): return False
elif existing['code'] == 404: ret['comment'] = 'A Profile with this name was not found.' else: ret = _load_result(existing, ret)
self.client.get( pipeline.get_login_url(self.provider.provider_id, pipeline.AUTH_ENTRY_LOGIN))
test = [[1], [3], [4]] assert_array_almost_equal(clf.predict(test), [1, 3, 4], 2)
EDXNOTES_PUBLIC_API = 'http://localhost:8120/api/v1' EDXNOTES_INTERNAL_API = 'http://localhost:8120/api/v1'
return { 'success': True, 'contents': prefix + hint_text, 'hint_index': hint_index }
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
self.assert_grade(problem, '2*x', 'correct') self.assert_grade(problem, '3*x', 'incorrect')
return [CourseEnrollmentFactory(user=self.user, course_id=c) for c in course_ids]
from __future__ import absolute_import import time import logging import re import traceback
self.assertEqual(user_info["username"], self.user.username) self.assertEqual(user_info["email"], self.user.email)
if settings == DEFAULT_SETTINGS: args.append('--skip-collect') call_task('pavelib.assets.update_assets', args=args)
app_label = "rss_proxy"
try: if not _available(name, ret): return ret except CommandExecutionError as exc: ret['result'] = False ret['comment'] = exc.strerror return ret
data_home = get_data_home(data_home=data_home) data_home = join(data_home, 'mldata') if not exists(data_home): os.makedirs(data_home)
from salt.modules import win_certutil as certutil
conditional_probs = T.nnet.sigmoid(conditional_params[0]) return self.theano_rng.uniform( size=(num_samples, self.ndim), dtype=theano.config.floatX ) < conditional_probs
return True
from __future__ import absolute_import
for missing in SUBMISSION_SET_KWARGS: kwargs = SUBMISSION_SET_KWARGS.copy() del kwargs[missing] submissions_score_set_handler(None, **kwargs) self.signal_mock.assert_not_called()
return chapter_titles.index(title.lower()) + 1
return render_message_to_string( subject_template, message_template, self.get_email_params_ccx() )
vmconfig['changed']['remove_{0}'.format(instance)].append( current_cfg[vmconfig_type['instance'][instance]] )
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
user1_new_email = "valid_user1_email@example.com" user2_new_email = "valid_user2_email@example.com"
continue
template_obj = MicrositeTemplate.get_template_for_microsite( microsite_get_value('site_domain'), uri )
context['show_partners'] = microsite.get_value('show_partners', True)
import logging
precision recall f1-score support a 0.83 0.79 0.81 24 b 0.33 0.10 0.15 31 c 0.42 0.90 0.57 20
return [ credentials_factories.UserCredential( id=1, username='test', credential=credentials_factories.ProgramCredential( program_id=1 ) ), credentials_factories.UserCredential( id=2, username='test', credential=credentials_factories.ProgramCredential( program_id=2 ) ) ]
break
try: os.remove(trans_tar) except (OSError, IOError): pass
with self.assertRaises(ResponseError): submission_dict = {'test': 'test'} input_dict = {'1_2_1': json.dumps(submission_dict)} problem.grade_answers(input_dict)
from salt.modules import zypper
import salt.netapi import salt.utils import salt.utils.event from salt.utils.event import tagify import salt.client import salt.runner import salt.auth from salt.exceptions import EauthAuthenticationError
X -= X.mean(axis=0) y -= y.mean()
diabetes_X_train = diabetes_X[:-20] diabetes_X_test = diabetes_X[-20:]
raise ItemNotFoundError(course_id)
course_overview_before.image_set.small_url = broken_small_url course_overview_before.image_set.large_url = broken_large_url course_overview_before.image_set.save()
config.add_subpackage('__check_build') config.add_subpackage('_build_utils')
return modulestore().update_item(xblock, user.id)
self.assertIn('a_custom', __grain__) self.assertEqual({'k1': 'v1', 'k2': 'v2'}, __grain__['a_custom'])
return self._num_batches_seen
return conv2d( x, self._filters, image_shape=self._img_shape, filter_shape=self._filters_shape, subsample=self._subsample, border_mode=self._border_mode, )
with self.assert_logged('SafeCookieData BWC parse error'): yield
land_reference = data.coverages[6]
fs_root = mkdtemp()
saltenv = env
self._assert_receipt_contains("tax purposes") self._assert_receipt_contains(self.course.display_name)
self.client.logout() response = self.client.get(url)
raise NotImplementedError
import salt.utils
spmatrix = spmatrix.asformat(accept_sparse[0]) changed_format = True
return users
for user_partition in self.user_partitions: if user_partition.id == self.user_partition_id: return user_partition return None
'ID': val
return OrderItemSubclassPK(type(self), self.pk)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
return _get_fake_enrollment(student_id, course_id)
profile_page.value_for_dropdown_field('language_proficiencies', 'English') profile_page.value_for_dropdown_field('country', 'United Arab Emirates') profile_page.set_value_for_textarea_field('bio', 'Nothing Special')
return self.__tokdict.keys()
return True
assert_almost_equal(np.abs(np.dot(d2[:2], [0, 1])), 1.0)
self.assertTrue(bool(pkg_targets))
self.lib_page.click_delete_button(first_block_id, confirm=True) self.assertEqual(len(self.lib_page.xblocks), 1) self.assertEqual(self.lib_page.xblocks[0].locator, second_block_id)
if __grains__['os'] == 'FreeBSD': return __virtualname__ return (False, 'The freebsdservice execution module cannot be loaded: only available on FreeBSD systems.')
self.key = key return key
linter = JavaScriptLinter() results = FileResults('') linter.check_javascript_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
return tab
return False
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_key_string) get_course_with_access(request.user, 'staff', course_key)
from salt.executors import ModuleExecutorBase import salt.utils import salt.syspaths
self.xblock.test_content_field = "Explicitly set" self.xblock.test_settings_field = "Explicitly set" self.xblock.save()
self.assert_no_setting_changed_event()
cv = _covar_mstep_diag(*args) return np.tile(cv.mean(axis=1)[:, np.newaxis], (1, cv.shape[1]))
assert_raises(ValueError, cval.KFold, 3, 4)
err = Exception mock_index_dictionary.return_value = err
membership = CohortMembership.objects.create( user=user, course_user_group=get_random_cohort(course_key) ) return request_cache.data.setdefault(cache_key, membership.course_user_group)
if draft_as_non_draft_loc in to_process_dict: to_process_dict[draft_as_non_draft_loc] = draft
metadata = _refresh_buckets_cache_file(cache_file)
PAM_PROMPT_ECHO_OFF = 1 PAM_PROMPT_ECHO_ON = 2 PAM_ERROR_MSG = 3 PAM_TEXT_INFO = 4
source_store.copy_all_asset_metadata(source_course_key, dest_course_key, user_id)
return False
REQUIRE_DEBUG = False
if __opts__['test']: ret['result'] = None ret['comment'] = 'Group {0} set to be added'.format(name) return ret
from __future__ import absolute_import
self.assertEqual(headers, {'Authorization': 'Token 12345'})
import salt.utils import salt.utils.files import salt.utils.atomicfile from salt.utils.odict import OrderedDict
st_mode = st.st_mode read_all = stat.S_IRUSR read_all |= stat.S_IRGRP read_all |= stat.S_IROTH
import ioflo.base.deeding
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if open_jids: for jid in open_jids: self.event.unsubscribe(jid)
def test_real_user(useless): useless_user = Mock(email='fake@fake.com', id=useless) return useless_user
return StudentModule.objects.get(pk=self.student_module_id)
for parent, children in enumerate(children_map): self.assertSetEqual(set(block_structure.get_children(parent)), set(children))
BlockDepthTransformer().transform(usage_info=None, block_structure=block_structure) BlockNavigationTransformer(0).transform(usage_info=None, block_structure=block_structure) block_structure._prune_unreachable()
for bucket_name in _get_buckets(): s3_meta = __get_s3_meta(bucket_name)
alt_text = self.BANNER_ALT_MESSAGES.get(status) if alt_text: self.assertContains(response, alt_text)
check_firefox_version()
test = __opts__.get('test', False) instance = __salt__['cloud.action'](fun='show_instance', names=names) __opts__['test'] = test return instance
return True
eigvals = np.maximum(eigvals.real, 0)
self._post_fork_init()
log = logging.getLogger(__file__)
delete_item(category='html', name='test_html')
if len(names) == 1: return ret[names[0]] return ret
XQUEUE_INTERFACE['url'] = 'http://localhost:8040'
transport = None if needs_daemon: transport = self.options.transport TestDaemon.transplant_configs(transport=transport)
from __future__ import absolute_import import re
self.assertIsNot(bad_out, ret_output)
self.assertEqual(provider_redirect_url, self.url_prefix + self.complete_url) return self.client.get(provider_redirect_url)
train_data = iter(ALL_FOOD_DOCS[:-1]) test_data = [ALL_FOOD_DOCS[-1]] n_train = len(ALL_FOOD_DOCS) - 1
ModeCreationPage(self.browser, self.course_id).visit()
from salt.modules import riak
mock = MagicMock(return_value=return_value) new_patch = patch(function_name, new=mock) new_patch.start() self.addCleanup(new_patch.stop) return mock
vm_['password'] = get_password(vm_)
is_done = page.browser.execute_script("return $({!r}).data('initialized')".format(xblock_css)) return (is_done, is_done)
partitions_service = self.runtime.service(self, 'partitions') if not partitions_service: return None return partitions_service.get_user_group_id_for_partition(self.user_partition_id)
key = safe_key('a' * 300, 'prefix', 'version') self.assertTrue(self._is_valid_key(key))
#texinfo_appendices = []
results = [] for option in self.all_options: button = option.find_element_by_css_selector('input.input') if button.is_selected(): results.append(option) return results
args = [ 'lms', 'studio', '--settings={}'.format(asset_settings), '--skip-collect' ] call_task('pavelib.assets.update_assets', args=args)
user_profile = UserFactory(username=user.username, email=user.email).profile user_profile.allow_certificate = not is_embargoed user_profile.save()
log.error( 'Top function {0} failed with error {1} for minion ' '{2}'.format( fun, exc, load['id'] ) )
template_packages = [__name__] @classmethod def get_template_dir(cls): return 'templates/test'
if user_enrollment_mode not in CourseMode.VERIFIED_MODES: return 'N/A' user_is_verified = cls.user_is_verified(user) if not user_is_verified: return 'Not ID Verified' else: return 'ID Verified'
relname = path(pathname).basename()
from __future__ import absolute_import import logging import re
plt.figure(fignum, figsize=(4, 3)) plt.clf()
for attempt in xrange(self.INVALID_ATTEMPTS): self._change_password(email=self.NEW_EMAIL)
n_samples = X.shape[0] sample_idxs = np.arange(n_samples)
if expected_n_iter is not None: assert_equal(cv.get_n_splits(X, y, labels), expected_n_iter) else: expected_n_iter = cv.get_n_splits(X, y, labels)
ret = regenerate_user_certificates( student, course_id, course=course, forced_grade=options['grade_value'], template_file=options['template_file'], insecure=options['insecure'] )
response = self._auto_auth({ 'username': 'test', 'redirect': True, 'staff': 'true', }, status_code=302)
return response
self._original = None
if listen and not self.event.connect_pub(timeout=timeout): raise SaltReqTimeoutError() payload = yield channel.send(payload_kwargs, timeout=timeout)
content_range = {'start': 0, 'stop': 1, 'end': 2}
clf.intercept_scaling = 1000 clf.fit(X, y) intercept2 = clf.intercept_ assert_array_almost_equal(intercept1, intercept2, decimal=2)
pipe.set_params(svc__a=0.1) assert_equal(clf.a, 0.1) assert_equal(clf.b, None) repr(pipe)
context = { 'reorderable_items': set(), 'read_only': True } problem_html = get_preview_fragment(request, self.problem, context).content
if name in self.intervals: del self.intervals[name]
from salt.modules import ps import salt.ext.six as six
opts['providers'] = providers_config
signal.signal(signal.SIGINT, self._handle_signals)
import re
self.assertIn('sleep_service: started', ret) self.assertIn('sleep_service2: started', ret)
missing_courses = set(course_id_list) - set(modes_by_course.keys()) for course_id in missing_courses: modes_by_course[course_id] = [cls.DEFAULT_MODE]
for student in students[:4]: self.assertIn( GeneratedCertificate.certificate_for_student(student, self.course.id).status, CertificateStatuses.PASSED_STATUSES )
try: response_data = api.baskets.post({ 'products': [{'sku': default_enrollment_mode.sku}], 'checkout': True, })
futures[0].set_result('foo') self.wait()
CourseInstructorRole(course_key).add_users(new_instructor) auth.add_users(requesting_user, CourseStaffRole(course_key), new_instructor)
try: course_key = CourseKey.from_string(course_id) user = User.objects.get(id=user_id) course = modulestore().get_course(course_key)
self.set_team_configuration({u"max_team_size": 10, u"topics": []}) self.verify_teams_present(False)
for path in glob.glob(path): shutil.rmtree(path)
FILE_UPLOAD_STORAGE_BUCKET_NAME = ENV_TOKENS.get('FILE_UPLOAD_STORAGE_BUCKET_NAME', FILE_UPLOAD_STORAGE_BUCKET_NAME) FILE_UPLOAD_STORAGE_PREFIX = ENV_TOKENS.get('FILE_UPLOAD_STORAGE_PREFIX', FILE_UPLOAD_STORAGE_PREFIX)
_unique_labels = _FN_UNIQUE_LABELS.get(label_type, None) if not _unique_labels: raise ValueError("Unknown label type: %s" % repr(ys))
test_user = UserFactory() GeneratedCertificateFactory.create( user=test_user, course_id=course_id, mode=mode, status=status )
if not self.env_is_exposed(tgt_env): return None try: commit = self.repo.revparse_single(tgt_ref) except (KeyError, TypeError): pass else: return commit.tree return None
from salttesting.case import TestCase
self.assertTrue(res_json['success']) self.assertEqual( res_json['message'], u"Certificate generation started for white listed students." )
subject = ''.join(subject.splitlines()) from_address = theming_helpers.get_value( 'email_from_address', settings.DEFAULT_FROM_EMAIL )
rt = RandomTreesEmbedding(max_depth=3, n_estimators=n_estimator, random_state=0)
self.check_populated_course(course_id)
output.append('\'{0}\': \'{1}\''.format(key, value))
proba = sum(_samme_proba(estimator, n_classes, X) for estimator in self.estimators_)
response = self.fetch('/login', method='POST', body=json.dumps(self.auth_creds_dict), headers={'Content-Type': self.content_type_map['json']})
self._assert_cannot_reverify()
self.find_css('.signatory-organization-input').first.fill(value)
scoring = self.default_scoring correct_points = scoring.get('correct') return dict([(inputfield.get('id'), correct_points) for inputfield in self.inputfields])
multi_db = True
wrapper_width = 75 if is_transcript_visible else 100 initial = self.browser.get_window_size()
if 'total_rows' not in _response: log.error('Didn\'t get valid response from requesting all docs: {0}' .format(_response)) return {}
try: validate_new_email(self.request.user, email) except ValueError as err: return err.message
def long_range(start, end): while start < end: yield start start += 1
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return np.hstack([l.ravel() for l in coefs_ + intercepts_])
import salt.ext.six as six
protocol_str = '0'
import os
from salt.states import chef
for password in ["", "a"]: params["password"] = password assert_password_error("A valid password is required")
(['honor', 'verified', 'audit'], ['1', '2', '3']),
from salt.states import rabbitmq_policy
from __future__ import absolute_import
span_element = rendered_html.find('span') self.assertEqual(span_element.text, 'Welcome student')
err = SearchIndexingError mock_index_dictionary.return_value = err
from salt.ext.six import string_types import salt.utils
self.assertIn("Email or password is incorrect.", self.login_page.wait_for_errors())
vm_['pub_key'] = None vm_['priv_key'] = None
self.assertEqual(module.attempts, 1)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, mock_open, patch)
mock_response.status_code = 200 mock_post.return_value = mock_response
my_application.clients:
self.wait_for_ajax() return self.q(css='.join-team .join-team-message').text[0]
ml_cost = (self.free_energy_given_v(pos_v).mean() - self.free_energy_given_v(neg_v).mean())
from salt.exceptions import SaltException
assert X.ndim == 2 return T.nnet.softmax(X*self.P)
__virtualname__ = 'django'
task_args = [entry_id, {}] return task_class.apply(task_args, task_id=task_id).get()
LINKED_USERS = (ALICE_USERNAME, STAFF_USERNAME, ADMIN_USERNAME) PASSWORD = "edx"
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'digital_ocean'
pass
self.dismiss_ui_and_verify(rerun)
X = 3 * diabetes.data
ranges = world.css_find(range_css) assert_equal(len(ranges), 2) assert_not_equal(ranges.last.value, 'Failure')
for directory in dirs: filepath = path(directory) / filename if filesystem.exists(filepath): return filepath raise ResourceNotFoundError(u"Could not find {0}".format(filename))
self._assert_can_reverify()
module_path, _, name = engine_path.rpartition('.') return getattr(import_module(module_path), name)
clf = GradientBoostingClassifier(n_estimators=100, random_state=1, subsample=1.0) clf.fit(X, y) assert_raises(AttributeError, lambda: clf.oob_improvement_)
provider_url = reverse('openid-provider-xrds') factory = RequestFactory() request = factory.request() abs_provider_url = request.build_absolute_uri(location=provider_url)
self._verify_unit_warning( self.UnitState(is_released=True, publish_state=self.PublishState.UNPUBLISHED_CHANGES, is_locked=True), self.STAFF_ONLY_WARNING )
@ignore_warnings(category=DeprecationWarning) def test_verbose_first_level(): X = rng.randn(30, 5) X[:10] += 2 g = mixture.GMM(n_components=2, n_init=2, verbose=1)
from __future__ import absolute_import
check_cuda(str(type(self)))
self.pendings = None
mock = MagicMock(return_value=return_value) new_patch = patch(function_name, new=mock) new_patch.start() self.addCleanup(new_patch.stop) return mock
super(ExportTestCase, self).setUp() self.url = reverse_course_url('export_handler', self.course.id)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return key.field_name
centos7-2-iad-rackspace: provider: rackspace-iad size: general1-2 swap: <size>
'autoload_dynamic_modules': bool,
dest2check = dest if not dest2check: rel_path = self._check_proto(path)
check_estimators_unfitted("estimator", CorrectNotFittedErrorClassifier)
all_assets = SortedAssetList(iterable=course_assets.get(asset_type, []), key=key_func)
from __future__ import absolute_import import copy
response['X-XRDS-Location'] = get_xrds_url('identity', request) return response
assign_default_role(instance.course_id, instance.user)
self.assertIn(error_msg, result['success'])
self.client.login(username=self.coach.username, password="test")
return True
self.assertTrue(self.video.select_language('zh'))
import salt.utils import salt.utils.jid import salt.ext.six as six
call_task('pavelib.quality.run_safelint', options={"thresholds": '{"total": 5}'})
return [mock.call(self.store, self._get_lib_key(lib)) for lib in libraries]
merged_start_value = max(min_all_parents_start_date, block_start)
if self.user is not None and self.user.username == username: user = self.user else: user = User.objects.get(username=username)
if service.key == service_name: service_key = service.key elif service_name == 'ssh' or service_name == 'SSH': if service.key == 'TSM-SSH': service_key = 'TSM-SSH'
man = salt.utils.which('man') if not man: return False
html_response.debug = {'url': url, 'section': section, 'block_urlname': block_urlname} return html_response
from __future__ import absolute_import
try: os.remove(trans_tar) except (OSError, IOError): pass
return False
super(SendMsgBot, self).__init__(jid, password)
self.login(self.email, self.pw)
self.assertGreater(len(block.children), 0, "meaningless test") moved_child = block.children.pop()
args.extend([ 'test' ])
import copy import logging import hashlib import os
self.store.delete_item( self.icrv.location, ModuleStoreEnum.UserID.test, revision=ModuleStoreEnum.RevisionOption.published_only )
(instance_id, region) = _get_instance_info()
tolW = max(0.001, tol) * np.sqrt(init_grad) tolH = tolW
useradd.__grains__ = {} useradd.__salt__ = {} useradd.__context__ = {}
try: import paramiko HAS_PARAMIKO = True except ImportError: HAS_PARAMIKO = False
if not all(user_groups.get(partition.id) in groups for partition, groups in partition_groups): return ACCESS_DENIED
for library in store.get_libraries(**kwargs): library_id = self._clean_locator_for_mapping(library.location) if library_id not in libraries: libraries[library_id] = library
non_cohort.users.add(*user_list) non_cohort.users.clear() self.assertFalse(mock_tracker.emit.called)
return { child_descriptor.location: child_descriptor, source_location: source_descriptor }.get(usage_id)
__virtualname__ = 'win_smtp_server'
pipe_results = False if filename == '-': filename = mktemp() pipe_results = True
dirs_to_remove = set()
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
contentstore().delete(content.get_id()) del_cached_content(content.location)
self.estimators_[i, k] = tree
return all([ self.q(css='body.view-profile .account-settings-container').present, not self.q(css='ui-loading-indicator').visible ])
from codecs import lookup, BOM_UTF8 import re from io import TextIOWrapper, open cookie_re = re.compile("coding[:=]\s*([-\w.]+)")
if group == 'multilabel-indicator' and issparse(example): sparse_assert_, sparse_exp = assert_true, 'True' else: sparse_assert_, sparse_exp = assert_false, 'False'
from __future__ import absolute_import import io
with self.assertRaises(ResponseError): problem.grade_answers({'1_2_1': '42'})
show_openedx_logo = bool(request.GET.get('show-openedx-logo', False))
iris = load_iris() score = cross_val_score(rfe, iris.data, iris.target) assert_greater(score.min(), .7)
subtask_status.increment(retried_nomax=1, state=RETRY) return _submit_for_retry( entry_id, email_id, to_list, global_email_context, exc, subtask_status, skip_retry_max=True )
try: return cls.objects.get( course__course_key=course_key, active=True, namespace=namespace, name=name ) except cls.DoesNotExist: return None
self._test_dropdown_field( u'pref-lang', u'Language', u'English', [u'Dummy Language (Esperanto)', u'English'], reloads_on_save=True, )
'milestones',
super(TeamManagementPage, self).__init__(browser, course_id) self.topic = topic self.url_path = "teams/#topics/{topic_id}/create-team".format(topic_id=self.topic['id'])
return cls.objects.get_or_create( course_id=course_id, group_type=group_type, name=name )
X_scaled_back = scaler.inverse_transform(X_scaled) assert_true(X_scaled_back is not X) assert_true(X_scaled_back is not X_scaled) assert_array_almost_equal(X_scaled_back, X)
SurveyAnswer.objects.filter(form=self, user=user).delete()
pygments_style = 'sphinx'
from __future__ import absolute_import import logging import datetime import os
success = _retry_and_check(5, lambda: _reset_and_get_seed(module) != seed)
self.mock_programs_api() self.mock_credentials_api(self.user, reset_url=False)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
from __future__ import absolute_import
for database_name in DATABASES: DATABASES[database_name]['ATOMIC_REQUESTS'] = False
tgt = ipaddress.ip_network(tgt)
pass
log.removeHandler(handler)
X = diabetes.data Y = np.vstack([diabetes.target, diabetes.target ** 2]).T n_targets = Y.shape[1]
return (self.network_address.is_unspecified and self.broadcast_address.is_unspecified)
clf = ARDRegression(compute_score=True) clf.fit(X, y)
return has_team_api_access(request.user, obj.course_id)
start_time = time.time() timeout_in_seconds = timeout / 1000 max_time = start_time + timeout_in_seconds
with check_mongo_calls(1): cached_structure = self._get_structure(self.new_course)
self.__messages.pop(0)
self.assertEqual( self.run_function('shadow.get_account_created', [NO_USER]), 'ERROR: User not found: {0}'.format(NO_USER))
SplitModuleTest.modulestore = None
ensemble = BaggingRegressor(base_estimator=DecisionTreeRegressor(), max_samples=1.0, bootstrap=True, random_state=rng).fit(X_train, y_train)
is_movable = True
assert not isinstance(x, theano.gof.Variable) return 1. / (1. + np.exp(-x))
with self.assertNumQueries(4): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
res = grainsmod.filter_by(dict1, grain='xxx', default='Z') self.assertIs(res, None)
import salt.ext.six as six
import logging
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
X = np.sqrt(fac) * (Xc / std) U, S, V = linalg.svd(X, full_matrices=False)
self.q(css="li.next").click() self.wait_for_ajax()
name = _sdecode(name) if snap_name: snap_name = _validate_snap_name(name, snap_name, runas=runas)
Ua, sa, Va = \ randomized_svd(X, k, power_iteration_normalizer=normalizer, random_state=0) assert_almost_equal(s[:rank], sa[:rank])
if not isinstance(identity, list): identity = [identity]
log.exception(ex)
weight_cdf = self.estimator_weights_[sorted_idx].cumsum(axis=1) median_or_above = weight_cdf >= 0.5 * weight_cdf[:, -1][:, np.newaxis] median_idx = median_or_above.argmax(axis=1)
self.q(css=selector)[0].send_keys(value)
self.assertNotIn( 'start', new_version.get_explicitly_set_fields_by_scope(scope=Scope.settings) ) self.assertNotIn( 'graded', new_version.get_explicitly_set_fields_by_scope(scope=Scope.settings) )
'ADDITIONAL_OPTIONS': { 'trashcan': { 'bucket': 'trash_fs' } }
bulk_ops_record.nest()
if not enable_contracts and not edx_args.contracts: contracts.disable_all()
path = salt.utils.url.unescape(path)
iris = datasets.load_iris() X = iris.data y = iris.target
for observer in self.observers: observer.update(event, self)
return comdat['stderr']
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.page.create_experiment_group_configuration()
disable_animations(self) self.find_css('.action-primary').first.click() self.wait_for_ajax()
xml_file = export_fs.open(LIBRARY_ROOT, 'w') xml_file.write(lxml.etree.tostring(root, pretty_print=True, encoding='utf-8')) xml_file.close()
return next((tab for tab in tab_list if tab.get('url_slug') == url_slug), None)
log.warning('Authentication failure of type "eauth" occurred.') return ''
if self.total_curr_counts == 0: self.reset() raise StopIteration()
new_settings = get_server_setting(settings=settings.keys(), server=server) failed_settings = dict()
kwargs.setdefault('label_suffix', '') super(ApiAccessRequestForm, self).__init__(*args, **kwargs)
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
return self.check_root()
from salttesting.helpers import ensure_in_syspath
try: return datetime.utcfromtimestamp(int(timestamp)).replace(tzinfo=UTC) except (ValueError, TypeError): return None
loss[np.logical_or(n_positives == 0, n_positives == n_labels)] = 0.
x = sp.arange(6).reshape(2, 3) datasets.mldata.urlopen = mock_mldata_urlopen({dataname: {'x': x}})
text = _match.group(0) break
'status',
from __future__ import absolute_import import logging
self.track_selection_page.visit()
assert_equal(X_checked.format, accept_sparse[0])
pass
id: wFGEwgregeqw3435gDger key: GDE43t43REGTrkilg43934t34qT43t4dgegerGEgg location: cn-qingdao driver: aliyun
core_samples, labels = dbscan(X, algorithm=algorithm, eps=1, min_samples=3) assert_array_equal(core_samples, [2]) assert_array_equal(labels, [-1, 0, 0, 0, -1, -1, -1])
self.skipTest('This test fails when using tests/runtests.py. salt-runtests will be available soon.')
obj_view.Destroy()
rng = np.random.RandomState([2014, 11, 4]) start = 0 stop = 990 num_examples = 1000 num_feat = 5 num_classes = 2
from __future__ import absolute_import
cases = [ dict(case_data, edx_video_id=""), dict(case_data, edx_video_id="vid-v1:12345"), ]
self.save()
json_resp = json.loads(resp.content) self.assertEqual(json_resp.get('total_cost'), self.cart.total_cost)
with salt.utils.fopen(args.config) as fh_: __opts__.update(yaml.load(fh_.read()))
return get_endpoint(settings.EDXNOTES_INTERNAL_API, path)
err = ItemNotFoundError mock_get_course.return_value = err
self.courseware.go_to_sequential_position(1) execute_video_steps(tab1_video_names)
X, y = _rescale_data(X, y, sample_weight)
return StackedBlocks(layers)
data2 = fetch_rcv1(shuffle=True, subset='train', random_state=77, download_if_missing=False) X2, Y2 = data2.data, data2.target s2 = data2.sample_id
),
import logging import os import re
self.closed = False self.terminated = False
self.video.click_player_button('fullscreen')
_fulfill_content_milestones( user, course_id, descriptor.location, )
def __init__(self, error_message): super(SafeCookieError, self).__init__(error_message) log.error(error_message)
with self.assertRaises(ValueError): self.runtime.service(self.mock_block, 'user_tags').set_tag('fake_scope', self.key, set_value)
return "{store}[{collection}] already has {element_id} ({exception})".format( store=self.store, collection=self.collection, element_id=self.element_id, exception=Exception.__str__(self, *args, **kwargs), )
n_samples_sizes = [5, 10, 20] n_features = 3 rng = np.random.RandomState(42)
released_languages = [ Language(tuple[0], tuple[1]) for tuple in settings.LANGUAGES if tuple[0] in released_language_codes ]
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath ensure_in_syspath('../../')
import salt.utils
try: intercepted_function(raise_error=FakeInputException) except FakeOutputException as ex: self.assertEqual(ex.message, expected_log_msg)
return modulestore.get_course(structure_key, depth=None)
preprocessor = GlobalContrastNormalization(subtract_mean=True, sqrt_bias=0.0, use_std=True)
MEDIA_ROOT = '/edx/var/edxapp/media/' MEDIA_URL = '/media/'
__func_alias__ = { 'set_': 'set' }
__func_alias__ = { 'reload_': 'reload' }
self.assertEqual(self.cmap.get_overall_message(), "")
self.proxy = salt.loader.proxy(self.opts)
pieces = modulename.split('.') str_e = str(e) found = True in [piece.find(str(e)) != -1 for piece in pieces]
proba[np.isnan(proba)] = 1. / n_classes
from __future__ import absolute_import
if tasks.environment.dry_run: return
if not (name == 'HuberRegressor' and estimator.n_iter_ is None): assert_greater_equal(estimator.n_iter_, 1)
resp = self.client.get(reverse('courseenrollments')) self.assertEqual(resp.status_code, status.HTTP_200_OK)
async_pub = self._gen_async_pub() ret = self._proc_function(self.opts['fun'], low, user, async_pub['tag'], async_pub['jid'],
FEATURES['ENABLE_COURSEWARE_SEARCH'] = True
return theano.tensor.constant(np.asarray(value, dtype=theano.config.floatX))
cache[cache.keys()[0]] = (None, {'a': 17})
try: from gentoolkit.eclean import search, clean, cli, exclude as excludemod HAS_GENTOOLKIT = True except ImportError: pass
if text == "There was a problem with the staff answer to this problem.": text = "TRANSLATED!" return text
import logging
server.ping()
rows_broadcastable = False cols_broadcastable = False
match = re.match(r'^(\d+)\.(\d+)(?:\.(\d+))?', ver)
with self.assertRaisesRegexp(CommandError, regex): call_command('git_add_course', *args, stderr=StringIO.StringIO())
self.q(css='a.nav-item').filter(text='All Topics')[0].click()
self.assertEqual(sysex.exception.args, (1,))
self.course_outline_page.visit() self.course_outline_page.wait_for_page()
'datadog',
process_info = CreateProcessWithLogonW(username=username, domain=domain, password=password, logonflags=LOGON_WITH_PROFILE, commandline=cmd, startupinfo=startup_info, currentdirectory=cwd)
return self.q(css=".proctored_exam_status .exam-timer").is_present()
def _logcosh(x, fun_args=None):
course = self.create_course_with_orphans(module_store)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
conversions = { }
CourseEnrollment.unenroll(self.student, self.EXISTED_COURSE_KEY_2)
classifier = svm.SVC(kernel='linear', C=0.01) y_pred = classifier.fit(X_train, y_train).predict(X_test)
mean_proba = np.zeros((X.shape[0], len(self.classes_))) for calibrated_classifier in self.calibrated_classifiers_: proba = calibrated_classifier.predict_proba(X) mean_proba += proba
_default_logging_level_ = 'info' _logfile_config_setting_name_ = 'log_file' _loglevel_config_setting_name_ = 'log_level_logfile' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'cloud')
self.crypt = kwargs.get('crypt', 'aes')
self.assertNotEqual(initial_data["PhotoIDKey"], two_photo_reverification_data["PhotoIDKey"])
if not hasattr(coeffs, '__iter__'): coeffs = [coeffs] * len(self.layers)
self.pdf.insert_page_break() self.draw_border() y_pos = self.draw_logos() return y_pos
for cookie_name in [settings.EDXMKTG_LOGGED_IN_COOKIE_NAME, settings.EDXMKTG_USER_INFO_COOKIE_NAME]: cookie = self.client.cookies[cookie_name] self.assertIn("01-Jan-1970", cookie.get('expires'))
break
raise NotImplementedError()
create_result = __salt__['dockerng.create']( image, name=name, validate_ip_addrs=False, validate_input=False, client_timeout=client_timeout, **create_kwargs )
if is_jail(name): return 'Created jail {0}'.format(name)
#self.assertIn("3 matching components", library_block.author_content)
buckets = 10 bucket_width = 1. / float(buckets) for i in xrange(buckets): lower_lim = i * bucket_width upper_lim = (i+1) * bucket_width
userKeys += ['id_rsa.pub', 'id_dsa.pub', 'id_ecdsa.pub', 'id_ed25519.pub']
output_buffer = StringIO() csvwriter = csv.writer(output_buffer) csvwriter.writerows(self._get_utf8_encoded_rows(rows)) self.store(course_id, filename, output_buffer)
from salt.states import win_path
self.reload_page() self.assertEqual(self.cohort_management_page.get_cohorted_topics_count(key), cohorted_topics)
if course_mode == 'verified': self.assertIn('xseries-base-btn', response.content) else: self.assertIn('xseries-border-btn', response.content)
self.stub_api() self.auth(enroll=False) self.listing_page.visit() self.assertTrue(self.listing_page.is_sidebar_present) self.assertFalse(self.listing_page.are_cards_present)
wait_for_problem('Problem 2')
AT_xT = self.rmul_T(self.transpose_left(x, False)) rval = self.transpose_right(AT_xT, True) return rval
response = self._generate( course_key=self.EXISTED_COURSE_KEY_2, username=self.STUDENT_USERNAME ) self.assertEqual(response.status_code, 200)
META_UNIVERSITIES = {'UTx': ['UTAustinX']}
cs = self.ax.scatter(support_vectors[:, 0], support_vectors[:, 1], s=80, edgecolors="k", facecolors="none") self.contours.append(cs)
return self.q(css="#clear-all-filters")
return _transform_selected(X, self._fit_transform, self.categorical_features, copy=True)
latest_timestamp = datetime.strptime( datetime.strftime(latest_timestamp, dateformat), dateformat ).replace(tzinfo=UTC)
return render_to_response('api_admin/catalogs/search.html')
list_escalation_policies = salt.utils.alias_function(list_policies, 'list_escalation_policies')
if vertical: return '{vertical} {video_element}'.format( vertical=self.get_video_vertical_selector(self.current_video_display_name), video_element=class_name) else: return class_name
xblock = modulestore().get_item(location) xblock.start = start self.store.update_item(xblock, self.user.id)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
args = [name, '--id', snap_name]
return { 'id': user.id, }
course = xml.CourseFactory.build() sequence = xml.SequenceFactory.build(parent=course) vertical = xml.VerticalFactory.build(parent=sequence)
raise
self.register_page.register(country="US", favorite_movie="Battlestar Galactica", terms_of_service=True)
from salt.states import linux_acl
return self.db_connection.mongo_wire_version
self.assertEqual(len(course.children), 2) self.assertIn(dangling_pointer, course.children)
self.assertNotEqual(order.processor_reply_dump, '')
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, course_id=self.course_id, staff=True).visit()
field_data = LicenseMixin.parse_license_from_xml(field_data, xml)
if self.child_fd in rlist: try: stdout = self._translate_newlines( salt.utils.to_str( os.read(self.child_fd, maxsize) ) )
if is_caller_html_or_text is False: self.results.violations.append(ExpressionRuleViolation( Rules.python_requires_html_or_text, self.node_to_expression(node.func) ))
weights[rng.rand(n_samples) < 0.1] = 0
self.emit_event(EVENT_NAME_ENROLLMENT_MODE_CHANGED)
if course_message: msg = u"{} <br /> {}".format(msg, course_message.message)
os.remove(self.conf)
data = { 'username': username, 'course_key': unicode(course_id) } return self.client.post(self.path, json.dumps(data), content_type=JSON)
import integration
export_course_to_xml(self.store, content_store, course_id, root_dir, 'test_export')
gp = GaussianProcessRegressor(kernel=kernel)
from __future__ import absolute_import
with store.branch_setting(ModuleStoreEnum.Branch.published_only, course.id): store.get_item(course.location)
if self.corruption_level < 1e-5: return x
if has_wildcard: match_list = set(atom) else: match_list = set(_porttree().dbapi.xmatch("match-all", atom))
return sorted(cls._enabled_providers(), key=lambda provider: provider.name)
stdout, stderr, _ = single.cmd_block()
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
EmptyPromise( lambda: self.q(css="#pre-requisite-course").present, 'Prerequisite course dropdown selector is displayed' ).fulfill()
self.covariance_ = covariance if self.store_precision: self.precision_ = pinvh(covariance) else: self.precision_ = None
EDX_PLATFORM_REVISION = 'unknown'
plt.figure(2, figsize=(3, 2.2)) plt.imshow(face_compressed, cmap=plt.cm.gray, vmin=vmin, vmax=vmax)
bogus_task_id = "this-is-bogus" update_subtask_status(entry_id, bogus_task_id, new_subtask_status)
boston = datasets.load_boston() perm = rng.permutation(boston.target.size) boston.data = boston.data[perm] boston.target = boston.target[perm]
cache_timeout = 300 string_field = models.TextField() int_field = models.IntegerField(default=10)
self.assertRaises(ValueError, Progress, 0, 0) self.assertRaises(ValueError, Progress, 2, 0) self.assertRaises(ValueError, Progress, 1, -2)
try: import numpy as np except ImportError: np = None self.np = np
return self.q(css=self.search_results_selector)
is_proxy = False try: if 'salt-proxy' in main.__file__: is_proxy = True except AttributeError: pass return is_proxy
if not hasattr(self, 'names_to_del'): self.names_to_del = set() self.names_to_del = self.names_to_del.union(names)
cache.clear() CertificateGenerationConfiguration.objects.create(enabled=True)
return numpy.array(img.getdata()) / 255.
root_dir = path(mkdtemp_clean()) print 'Exporting to tempdir = {0}'.format(root_dir) export_course_to_xml(self.store, content_store, course.id, root_dir, 'test_export')
self.valid_clear_load['fun'] = 'sys.doc' self.assertNotEqual(fire_event_mock.call_args[0][0]['fun'], 'sys.doc')
get_request_dict = {CapaFactory.input_key(): '0'} result = module.check_problem(get_request_dict)
cls.supplemental_index_information(modulestore, structure)
self.assertNotIn(self.vert_loc, course.system.module_data)
with store.branch_setting(ModuleStoreEnum.Branch.draft_preferred): store.update_item(item, ModuleStoreEnum.UserID.test)
out_file.write(', fillcolor="#C0C0C0"')
self.assertContains(response, 'course-container', 1) self.assertIn('Pursue a Certificate of Achievement to highlight', response.content)
return library.location.library_key
if hasattr(pip, '__version__'): pip.__version__ = original_pip_version
self.set_user_partitions(self.vertical_location, []) self.check_access(self.red_cat, self.vertical_location, True)
from .celery import APP as CELERY_APP
return self.system.render_template('module-error.html', { 'staff_access': True, 'data': self.contents, 'error': self.error_msg, })
try: manual_enrollment = cls.objects.filter(enrolled_email=email).latest('time_stamp') except cls.DoesNotExist: manual_enrollment = None return manual_enrollment
cls._assert_block_values(block_structure, cls.transform_data_key)
from salt.utils import mac_utils from salt.exceptions import SaltInvocationError, CommandExecutionError
self.def_ms = modulestore() self.msg = u'' self.datatable = [] super(SysadminDashboardView, self).__init__(**kwargs)
return -np.sum((pi / pi_sum) * (np.log(pi) - log(pi_sum)))
self.Xt = numpy.zeros([self.n_eigen + self.minibatch_size, self.n_dim])
self.assertTrue(allowance_section.is_add_allowance_button_visible)
self.assertTrue(BulkEmailFlag.feature_enabled(self.course.id))
return gid
response = urllib2.urlopen(req)
self.dashboard_page.visit() self.assertTrue(self.dashboard_page.has_course( org=self.course_org, number=self.course_number, run=self.course_run ))
if not hasattr(value, 'iteritems'): self._uncomment_if_commented(key)
params = self._signed_callback_params(self.order.id, self.COST, self.COST, decision='REJECT') result = process_postpay_callback(params)
root_usage_key = self._create_vertical()
net4_url = 'http://download.microsoft.com/download/1/B/E/1BE39E79-7E39-46A3-96FF-047F95396215/dotNetFx40_Full_setup.exe'
forest = ExtraTreesClassifier(n_estimators=250, random_state=0)
CELERY_ALWAYS_EAGER = True
with self.assertRaises(NotImplementedError): self.client.get(self.url)
self.assertEqual( actual_url, 'http://example-storage.com/profile-images/{name}_{size}.jpg?v={version}'.format( name=expected_name, size=expected_pixels, version=expected_version ) )
import salt.config import salt.syspaths as syspaths
client.set( '/'.join((path, 'minions', ret['id'])), ret['jid'], ttl=ttl, )
return self.q(css='#course-pace-toggle-tip').results[0].text
('defunct-paying', 'defunct-paying'),
self.dataset_remote_dir = "" self.dataset_local_dir = ""
self.xblock_fields = {}
from salt.modules import powerpath
SSL_AUTH_EMAIL_DOMAIN = "MIT.EDU" SSL_AUTH_DN_FORMAT_STRING = "/C=US/ST=Massachusetts/O=Massachusetts Institute of Technology/OU=Client CA v1/CN={0}/emailAddress={1}"
with self.assertRaises(ResponseError): problem.grade_answers({'1_2_1': '42'})
X = faces.data[:5000] n_samples, h, w = faces.images.shape n_features = X.shape[1]
try: return request.user.pk except AttributeError: return ''
import salt.utils import salt.crypt
assert_equals(value, getattr(seq, attribute))
self.bulk._end_bulk_operation(self.course_key)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
list_staff_master_course = list_with_level(self.course, 'staff') list_instructor_master_course = list_with_level(self.course, 'instructor')
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
n_fits = len(out) n_folds = len(cv)
import salt.utils
for definition in bulk_write_record.definitions.values(): definition_id = definition.get('_id') if definition_id in ids: ids.remove(definition_id) definitions.append(definition)
return '{}.xml'.format(block_id)
self._auto_auth(self.STAFF_USERNAME, self.STAFF_EMAIL, True) self.course_outline.visit() section = self.course_outline.section_at(section_index) section.change_name(self.EDITED_CHAPTER_NAME)
prior = DiagonalGaussianPrior() vae = DummyVAE() prior.set_vae(vae) prior.initialize_parameters(nhid=5)
tfidf_test = t1.transform(counts_test).toarray() assert_equal(tfidf_test.shape, (len(test_data), len(v1.vocabulary_)))
n_samples_min = int(1e3) n_samples_max = int(1e5) n_features = 100 n_centers = 100 n_queries = 100 n_steps = 6 n_iter = 5
#
mode, is_active = CourseEnrollment.enrollment_mode_for_user(self.user, self.course.id) self.assertEqual(mode, CourseMode.DEFAULT_MODE_SLUG) self.assertEqual(is_active, True)
self.assertEquals(self.get_about_page_link(), None)
'django_countries',
self.coach = AdminFactory.create() role = CourseCcxCoachRole(self.split_course.id) role.add_users(self.coach)
terms_text = _(u"Terms of Service") terms_link = u"<a href=\"{url}\">{terms_text}</a>".format( url=marketing_link("TOS"), terms_text=terms_text )
html = descriptor.get_html() rendered_content = descriptor.render(STUDIO_VIEW).content self.assertEqual(html, rendered_content)
return 'server backend'
return (field_object.module_type, field_object.field_name)
from __future__ import absolute_import import logging import os import re
if not hasattr(xblock, '_published_by'): self.modulestore.compute_published_info_internal(xblock) return getattr(xblock, '_published_by', None)
yield check_estimators_nan_inf
'reverification',
ASSET_XSD_FILE = 'assets.xsd'
if 'permutation' not in event_info: event_info['permutation'] = {} event_info['permutation'][response.answer_id] = (permutation_option, response.unmask_order())
captions_rendered_selector = self.get_element_selector(CSS_CLASS_NAMES['captions_rendered']) self.wait_for_element_presence(captions_rendered_selector, 'Captions Rendered')
def parse_command_line(self): args = distutils.dist.Distribution.parse_command_line(self)
import salt.ext.six as six from salt.ext.six import string_types, text_type from salt.ext.six.moves.urllib.parse import urlparse
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
return inst.user.username
selector = self.get_element_selector(VIDEO_MENUS['transcript-skip']) return self.q(css=selector).visible
import pymysql pymysql.install_as_MySQLdb() import MySQLdb import MySQLdb.cursors import MySQLdb.converters from MySQLdb.constants import FIELD_TYPE, FLAG HAS_MYSQLDB = True
self.assert_no_xpath(xml, "//div[@class='capa_alert']", self.context)
self.service.set_credit_requirement_status( self.user.id, unicode(self.course.id), 'grade', 'grade' )
self.client.ajax_post( self.seq1_url, data={'isPrereq': False} ) mock_remove_prereq.assert_called_with(self.seq1.location)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
for lang, transcript_url in bumper_settings.get('transcripts', {}).items(): bumper_settings['transcripts'][lang] = transcript_url.replace("/static/", "")
func_code_h = hash(getattr(self.func, '__code__', None)) return id(self.func), hash(self.func), func_code_h
block_data.edit_info.source_version = None
cart = Order.get_cart_for_user(request.user) cart.clear()
self.make_course(pdf_textbooks=[PDF_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('pdf_book', book_index=0, page='xyzzy')
title = ugettext_noop('Discussion') priority = None is_default = False
for class_path in settings.AUTHENTICATION_BACKENDS: auth_class = module_member(class_path) if issubclass(auth_class, base_class): yield auth_class
from __future__ import absolute_import
graph = image.img_to_graph(face)
from __future__ import absolute_import import salt.utils
if user.is_anonymous(): return None
rh_ip.__grains__ = {} rh_ip.__salt__ = {}
'grains_refresh_every': int,
import datetime
params = dict(params.items())
return BlockUsageLocator( course_key=self.course_key, block_type=block_type, block_id=block_id )
log.debug('Single environment per bucket mode')
if self.category == 'course': node.set('org', self.location.org) node.set('course', self.location.course)
pass
config = _load_config()
STUDIO_BASE_URL = os.environ.get('studio_url', 'http://localhost:8031')
for mode in available_modes: CourseModeFactory.create( course_id=self.course_key, mode_display_name=mode, mode_slug=mode, )
exit(salt.defaults.exitcodes.EX_GENERIC)
params["username"] = "this_username_has_31_characters" assert_username_error("Username cannot be more than 30 characters long")
self._reset() return self.partial_fit(X, y)
if stdout is None and stderr is None: self.assertFalse(term.isalive())
__virtualname__ = 'pkg'
get_request_dict = {} result = module.reset_problem(get_request_dict)
'ratelimitbackend.middleware.RateLimitMiddleware',
raise
readline.set_history_length(300)
if encrypted is not False: encrypted = postgres._DEFAULT_PASSWORDS_ENCRYPTION password = postgres._maybe_encrypt_password(name, password, encrypted=encrypted)
from __future__ import absolute_import
has_access.return_value = True response = views.all_problem_grade_distribution(self.request, 'test/test/test') self.assertEqual(json.dumps(self.simple_data), response.content)
X_dense[3, :] = 0.0
import yaml import logging
from __future__ import print_function
for length in [248, 249, 250, 251, 252]:
self.wait_for_element_visibility('#password-reset-email', 'Email field is shown') self.q(css="#password-reset-email").fill(email)
self.run_function('beacons.add', ['ps', {'apache2': 'stopped'}]) self.run_function('beacons.save')
upload_csv_to_report_store(rows, 'grade_report', course_id, start_date)
return (hasattr(x, '__len__') or hasattr(x, 'shape') or hasattr(x, '__array__'))
return modulestore().get_item(child.location)
course = CourseFactory.create() course.display_coursenumber = escaping_content
d_int32 = astype(a_int32, dtype=np.int32, copy=True) assert_false(np.may_share_memory(d_int32, a_int32))
all_assets, __ = content_store.get_all_content_for_course(course.id) self.assertGreater(len(all_assets), 0)
__virtualname__ = 'group'
iy,ix = N.array((ky,kx)) - topleft col = iy*inshp[2]+ix +\
return self.background_task_history_button.is_present()
self.assert_redirect_to_dashboard_looks_correct(actions.do_complete(
numtolerance_choices = {} binary_choices = {}
self.find_css(selector).nth(index).click()
import salt.fileserver import salt.utils import salt.syspaths
response = self._credit_provider_callback(request_uuid, "approved", sig="invalid") self.assertEqual(response.status_code, 403)
import salt.ext.six as six
__virtualname__ = 'raid'
assert_raises(ValueError, clf.predict, X2[:, :-1])
return (super(StaticTab, cls).validate(tab_dict, raise_error) and key_checker(['name', 'url_slug'])(tab_dict, raise_error))
with mock.patch.dict('django.conf.settings.FEATURES', {'ENABLE_CREATOR_GROUP': True}): self.assert_created_course()
assert_equal(X_r2inv.getnnz(), X_r.getnnz())
cached_files = __salt__['cp.cache_dir']( winrepo_source_dir, saltenv, include_pat='*.sls' ) genrepo(saltenv=saltenv) return cached_files
from __future__ import absolute_import
return self.pk_with_subclass, set([])
__func_alias__ = { 'zip_': 'zip' }
file_to_upload = 'image.jpg' self.settings_page.upload_image('#upload-course-image', file_to_upload) self.assertIn(file_to_upload, self.settings_page.get_uploaded_image_path('#course-image'))
super(IndexPage, self).__init__(browser)
self.video.show_captions()
self.assertIn("Welcome to edX.", self.video.captions_text)
EmptyPromise(self.is_filename_error_showing, 'Upload Error Displayed', timeout=30).fulfill()
return hash(id(self))
response = salt.utils.vmware.esxcli(host, username, password, cmd, protocol=protocol, port=port) ret.update({host: _format_syslog_config(response)})
else: if is_existing['retcode'] in [0]: item_create_required = False
self.create_credentials_config() self.mock_credentials_api(self.user) actual = get_user_credentials(self.user) self.assertEqual(actual, self.CREDENTIALS_API_RESPONSE['results'])
import salt.state import salt.payload from salt.exceptions import SaltRenderError
log = logging.getLogger(__name__)
real_answers = problem.get_question_answers()
line = line[10:] commented_cron_job = True
from __future__ import absolute_import, print_function import json import logging
account_settings = get_account_settings(self.default_request, self.different_user.username) self.assertNotIn("email", account_settings)
if len(_response['rows']) < 1: continue
CreditCourse.objects.create( course_key=self.course.id, enabled=True, )
from __future__ import absolute_import import json import logging import os
assert len(key) <= 250 return self.cache.get(key)
response = self.client.post(self.url, data) self.assertHttpBadRequest(response)
self.assertTrue('Activate Course Enrollment' in response.content)
raise ValueError("Cannot use a custom kernel function. " "Precompute the kernel matrix instead.")
import salt.utils import salt.ext.six as six
self.courseware_page.go_to_sequential_position(4) self.assert_navigation_state('Test Section 1', 'Test Subsection 1,1', 3, next_enabled=True, prev_enabled=True)
hasher = HashingVectorizer(n_features=opts.n_features, stop_words='english', non_negative=True, norm=None, binary=False) vectorizer = make_pipeline(hasher, TfidfTransformer())
duplicated_item.location = original_item.location duplicated_item.display_name = original_item.display_name duplicated_item.parent = original_item.parent
'post_params_success': post_params_success,
dspace.np_validate(batch) return batch
pip install https://pysphere.googlecode.com/files/pysphere-0.1.8.zip
for mode in ('honor', 'verified'): CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
if max_leaf_nodes < 0: builder = DepthFirstTreeBuilder(splitter, min_samples_split, min_samples_leaf, min_weight_leaf, max_depth) else: builder = BestFirstTreeBuilder(splitter, min_samples_split, min_samples_leaf, min_weight_leaf, max_depth, max_leaf_nodes)
pull_result = __salt__['dockerng.pull']( image, client_timeout=client_timeout, )
pass
return get_instructions(xmltree)
import salt.ext.six as six
def add_implicit_requires(data):
y_true, pred, probas_pred = make_prediction(binary=True)
import jinja2 import jinja2.ext
return 'Page not found (404)' in browser.find_element_by_tag_name('h1').text
visibility_editor = self.edit_component_visibility(component) self.verify_selected_labels(visibility_editor, expected_labels) visibility_editor.save()
salt.utils.fopen(minion_config, 'w').write( 'blah: false\n' 'root_dir: {0}\n' 'log_file: {1}\n'.format(tempdir, minion_config) )
{date:%A, %d %B %Y @ %H:%m:%S UTC}.
return ', '.join([', '.join(IMAGE_TYPES[ft].extensions) for ft in IMAGE_TYPES.keys()])
username = self.cleaned_data.get('username') return username or ''
orch = salt.utils.alias_function(orchestrate, 'orch') sls = salt.utils.alias_function(orchestrate, 'sls')
if len(vals) > 1: brname = vals[0]
from salt.modules import pw_user from salt.exceptions import CommandExecutionError try: import pwd HAS_PWD = True except ImportError: HAS_PWD = False
client_kwargs['base_url'] = os.environ.get('DOCKER_HOST')
self.assertEqual(response.status_code, 403)
gs = GridSearchCV(clf, [{'parameter': [0, 1, 2]}], scoring='accuracy', refit=False, error_score='raise')
from __future__ import print_function from __future__ import absolute_import import re import json from salt.utils.odict import OrderedDict from salt.utils import fopen as _fopen
answer = 'Option 2' if correct else 'Option 3' selector_element = self.problem_page.q( css='.problem .option-input select') select_option_by_text(selector_element, answer)
return {'access_token', 'token_type', 'expires_in', 'scope'}
return self.q(css='.components-list-heading-text').text[0]
if weight is None or raw_total == 0: return (raw_correct, raw_total) return (float(raw_correct) * weight / raw_total, float(weight))
return self.translations.get(msgid, msgid)
log = logging.getLogger(__name__)
from salt.modules import gnomedesktop
if enabled(name): stop(name, runas=runas) start(name, runas=runas)
- attributes: cross_zone_load_balancing: enabled: false - profile: myelbprofile
return getattr(super(BulkAssertionTest, self), 'assert' + assertion_name)(*args, **kwargs)
assert_array_almost_equal((tfidf ** 2).sum(axis=1), [1., 1., 1.])
self.assertGroupContent( groups[1], title=u"review (2)", notes=[u"Fourth note", None] )
if not self.loaded: self._load_all() return len(self._dict)
X_test = np.arange(0.0, 5.0, 0.01)[:, np.newaxis] y_1 = regr_1.predict(X_test) y_2 = regr_2.predict(X_test)
from __future__ import unicode_literals
inv = salt.utils.vmware.get_inventory(_get_si())
S = np.dot(X, X.T) af = AffinityPropagation(affinity="precomputed") af.fit(S) assert_raises(ValueError, af.predict, X)
with super(UpdateCommentUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
REQUIRE_DEBUG = DEBUG
content_store.set_attr(self.LOCKED_ASSET_KEY, 'locked', True)
if onlyrepo: os.remove(repofile) return 'File {0} containing repo {1} has been removed'.format( repofile, repo)
self.client.logout() response = getattr(self.client, method)(self.path, content_type=JSON_CONTENT_TYPE) self.assertEqual(response.status_code, 401)
addr = _split_optional_netmask(address) self.network_address = IPv4Address(self._ip_int_from_string(addr[0]))
exc_info_on_loglevel=logging.DEBUG
if value: wait_for(lambda _: css_value(css_selector, index=index))
METRIC_UNDEFINED_MULTICLASS = [ "brier_score_loss", "matthews_corrcoef_score", ]
with self.assertRaises(ObjectDoesNotExist): CertificateInvalidation.objects.get( generated_certificate=self.generated_certificate, invalidated_by=self.global_staff, active=True, )
return self.__nonzero__()
log = logging.getLogger(__name__)
expected_redirect = reverse( 'instructor_dashboard', kwargs={'course_id': unicode(self.course.id)} ) expected_redirect += '#view-certificates' self.assertRedirects(response, expected_redirect)
import yaml
'pub_ret': bool,
azimuth_degrees = numpy.arange(0, 341, 20)
self.assertEqual([], os.listdir(TMP_JID_DIR))
from salt.modules import hipchat
press_the_notification_button(self, "save") if wait_for_confirmation: self.wait_for_element_visibility( '#alert-confirmation-title', 'Save confirmation message is visible' )
self.client.login(username=username, password="password")
from __future__ import absolute_import
if last_touch: time_since_last_activity = utc_now - last_touch
self.assertNotEqual(draft_version, published_version)
ret = self.shell.exec_cmd('/bin/sh \'$HOME/{0}\''.format(target_shim_file))
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, mock_open, NO_MOCK, NO_MOCK_REASON )
selector = RFE(estimator, step=5) sel = selector.fit(X, y) assert_equal(sel.support_.sum(), n_features // 2)
monitoring_dataset = DenseDesignMatrix(X=X)
NPM_VENDOR_DIRECTORY = path("common/static/common/js/vendor")
self.assertEqual(views.get_cosmetic_display_price(self.course, registration_price), "$10")
import os import errno import logging
time.sleep(0.5)
return self.q(css=self._bounded_selector('.notoggleforyou')).present
X[0, 0] = 0 X[2, 1] = 0 X[4, 3] = 0 X_lil = sp.lil_matrix(X) X_lil[1, 0] = 0 X[1, 0] = 0
cls._assert_block_values(block_structure, cls.collect_data_key)
STUDENT_VIEW = 'student_view'
_mixin_prio_ = 0
self.login_page.login(email="nobody@nowhere.com", password="password")
from __future__ import absolute_import
self.course_fixture = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
from __future__ import absolute_import
return ipsec_site_connection
from lms.envs.common import ( COURSE_KEY_PATTERN, COURSE_ID_PATTERN, USAGE_KEY_PATTERN, ASSET_KEY_PATTERN )
import os
self.assert_account_settings_context_looks_correct(account_settings_context(request), user, linked=False) self.assert_social_auth_does_not_exist_for_user(user, strategy)
msg = u"Error in xml '{x}': {err} ".format( x=etree.tostring(xml), err=err.message) raise Exception, msg, sys.exc_info()[2]
response_element = rendered_html.find("span") self.assertEqual(response_element.tag, "span")
Xs.append(np.array([[0.0003817754041, 1.0], [0.0003817753750, 2.0]], dtype=np.float32))
setattr(self.options, option.dest, cli_config[option.dest]) option.explicit = True
html_theme_path = ['themes']
wua_searcher = wua_session.CreateUpdateSearcher()
raise NotImplementedError
import salt.utils import logging import salt.utils.mac_utils from salt.exceptions import CommandExecutionError
import salt.ext.six as six try: import pip HAS_PIP = True except ImportError: HAS_PIP = False
self.assertEqual(module.attempts, 1)
import integration
kwargs['python_shell'] = False ret = __salt__['cmd.run_all'](cmd, **kwargs)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
repos = {} basedirs = _normalize_basedir(basedir) repos = list_repos(basedirs)
def _failing_new(*args, **kwargs): raise TypeError('Can\'t create another NullSentinel instance')
self.assertTrue(self._has_changes(locations['grandparent'])) self.assertTrue(self._has_changes(locations['parent']))
rng = check_random_state(0) n_features = 5 n_samples = 40 n_output = 4
log = logging.getLogger(__name__)
B = safe_sparse_dot(Q.T, M)
return self.best_estimator_.predict_log_proba(X)
targets = [] problems = [] for pkgname, pkgver in six.iteritems(to_remove): origin = bool(re.search('/', pkgname))
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
X, y = make_classification(n_samples=200, n_features=20, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, flip_y=0.0, class_sep=10, shuffle=False, random_state=0)
if iface_type not in ['slave']: return __salt__['cmd.run']('ifdown {0}'.format(iface)) return None
ret.update(set( [x for x in _get_sysv_services() if _sysv_enabled(x)] )) return sorted(ret)
if not isinstance(message, ValidationMessage): raise TypeError("Argument must of type ValidationMessage") self.summary = message
saltenv = env
from salt.utils.odict import OrderedDict from salt.modules import jboss7
msg = 'Error inserting to MongoDB event tracker backend' log.exception(msg)
kwargs.pop('name', None) kwargs.pop('state', None)
return tensor.dot(inputs[1], self.wyf)
self.assertIn('<header class="xblock-header xblock-header-vertical">', html) self.assertIn('<article class="xblock-render">', html)
__salt__['file.comment_line'](name, regex, char, False, backup)
self.assertEquals(block_counts_for_course['chapter'], 2)
from __future__ import absolute_import
request_uuid = self._create_credit_request_and_get_uuid() response = self._credit_provider_callback(request_uuid, 'approved', timestamp=timestamp) self.assertEqual(response.status_code, 400)
from __future__ import absolute_import
urlpath.delete()
self.conn.put_method.return_value = method_ret self.conn.put_integration.side_effect = ClientError(error_content, 'put_integration')
create_collection_index(self.collection, 'definition.children', sparse=True, background=True)
account_settings.switch_account_settings_tabs('accounts-tab') account_settings.wait_for_link_title_for_link_field(field_id, "Unlink This Account")
test_dir = path(__file__).abspath().dirname().dirname().dirname() file_path = test_dir + '/data/uploads/' + file_name
self.go_to_sequential_position(2) execute_video_steps(tab2_video_names)
pass
self._fit_transform(X) return self
ignore_cidr: 192.168.50.0/24
AutoAuthPage( self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=False ).visit()
check_is_fitted(self, "classes_") X = check_array(X, accept_sparse='csr') return (safe_sparse_dot(X, self.feature_log_prob_.T) + self.class_log_prior_)
if msg:
try: select = Select(query.first.results[0]) select.select_by_visible_text(value) return True except StaleElementReferenceException: return False
self.page.q(css=input_selector).fill(time) self.page.q(css=input_selector).results[0].send_keys(Keys.ENTER)
sut = PCA(self.num_components) sut.apply(self.dataset, True)
task_folder = task_service.GetFolder(location) task = task_folder.GetTask(name)
white_label_org = microsite.get_value('course_org_filter') if white_label_org: zendesk_tags = zendesk_tags + ["whitelabel_{org}".format(org=white_label_org)]
if existing['code'] == 200:
return ret
display_name = 'Nicely created' resp = self.create_xblock(display_name=display_name, category='chapter')
if len(types) == 1: return ret[types[0]] else: for key in ret.keys(): if key not in types: del ret[key]
from openedx.core.djangoapps.ccxcon import tasks tasks.update_ccxcon.delay(unicode(course_key))
return 0
raise NotImplementedError()
return self.page_num > 1
if self.include_arguments: return sum(self._stacks[stack].values()) else: return self._stacks[stack]
log.debug('blugger has {0} updates in it'.format(self.install_collection.Count)) if self.install_collection.Count == 0: return {}
sw = np.sqrt(np.atleast_1d(sample_weight)) y = y * sw[:, np.newaxis] K *= np.outer(sw, sw)
self.go_to_tab_and_assert_problem(1, self.problem1_name) problem1_content_after_coming_back = self.problem_page.problem_content self.assertEqual(problem1_content_before_switch, problem1_content_after_coming_back)
self.store.delete_item(self.problem_x1a_1, self.user_id) self.assertTrue(self._has_changes(self.vertical_x1a))
if not os.path.exists(path): return 'File/Folder not found: {0}'.format(path)
if not user_partitions: return
os.close(stdout_parent_fd) os.close(stderr_parent_fd) salt.utils.reinit_crypto()
from __future__ import absolute_import import os.path import glob
url = BASE_URL + "/howitworks" def is_browser_on_page(self): return self.q(css='body.view-howitworks').present
assert_true(resample() is None)
model = CountryAccessRule extra = 1 def has_delete_permission(self, request, obj=None): return True
if prev_log_likelihood is not None: change = abs(current_log_likelihood - prev_log_likelihood) if change < self.tol: self.converged_ = True break
import salt.utils
re.compile(r'^/embargo/blocked-message/'),
response = self.client.get(self.url, params)
from __future__ import absolute_import
global tables if tables is None: import tables
LETTUCE_SERVER_PORT = 8003 XQUEUE_PORT = 8040 YOUTUBE_PORT = 8031 LTI_PORT = 8765 VIDEO_SOURCE_PORT = 8777
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import salt.utils from salt.transport.client import ReqChannel
#latex_paper_size = 'letter'
self.q(css='a[data-section=student_admin]').first.click() student_admin_section = StudentAdminPage(self.browser) student_admin_section.wait_for_page() return student_admin_section
rerun_state = CourseRerunState.objects.update_state( course_key=rerun_course_key, new_state=state, allow_not_found=True ) CourseRerunState.objects.update_should_display( entry_id=rerun_state.id, user=user2, should_display=should_display )
predictions = cross_val_predict(clf, X_sparse, multioutput_y) assert_equal(predictions.shape, (150, 2))
assert np.all((ps == 0) + (ps == 1)) assert np.all((hs == 0) + (hs == 1))
from __future__ import absolute_import, print_function
orig[minion_tgt] = self._check_state_return( orig[minion_tgt] )
return [ tt.upper() for tt in map(_ustr,t) ]
return self.q(css=self._bounded_selector('p.card-description')).map(lambda e: e.text).results
assert_not_in('rerandomize', seq.xml_attributes)
self.course_db.update( { (block_type, block_id): _make_course_db_entry( parent_type, parent_id, block_id, idx, child_type, child_base ) } )
import salt.utils from salt.exceptions import CommandExecutionError, MinionError
import re
s = X.shape if len(s) > 1: return tuple(tuplify(row) for row in X) else: return tuple(r for r in X)
'SHIB_DISABLE_TOS': False,
assert_almost_equal(loss_interp + 0.5 * (w[-1] ** 2), loss)
if task_progress.attempted % status_interval == 0: task_progress.update_task_state(extra_meta=current_step) task_progress.attempted += 1
orig_score = self.lcp.get_score() event_info['orig_score'] = orig_score['score'] event_info['orig_total'] = orig_score['total']
try: import keyring import keyring.backend
if len(changed) > 0: for prop in changed: update_cfg[prop] = state_cfg[prop]
weight_k[in1d(y_full, list(classes_missing))] = 0.
context['accomplishment_copy_about'] = _('About {platform_name} Accomplishments').format( platform_name=platform_name )
msg = _('Error in evaluating SchematicResponse. The error was: {error_msg}').format(error_msg=err) raise ResponseError(msg)
input_dict = {'1_2_1': '1', '1_2_2': '2', '1_2_3': '3'} correct_map = problem.grade_answers(input_dict)
return False
enrollment_exists = CourseEnrollment.objects.filter( user=self.user, course_id=self.course.id ).exists() self.assertFalse(enrollment_exists)
ApiAccessRequestFactory(user=self.user) response = self.client.get(self.url) self.assertRedirects(response, reverse('api_admin:api-status'))
for config_key in ('log_file', 'key_logfile'): if urlparse(opts.get(config_key, '')).scheme == '': prepend_root_dirs.append(config_key)
import integration
tolerance_xml = xml.xpath( '//*[@id=$id]//responseparam[@type="tolerance"]/@default', id=xml.get('id') )
if huber_warm.n_iter_ is not None: assert_equal(1, huber_warm.n_iter_)
from salt.modules import random_org
def __init__(self, developer_message, user_message=None): self.developer_message = developer_message self.user_message = user_message
return self.mode_slug
return JsonResponse({'return_code': 0})
_update_organization_context(context, course)
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
overall_msg = correctmap.get_overall_message() self.assertEqual(overall_msg, "Overall message")
#%%OPTS
user_partition_values = [] no_partition_selected = {'display_name': _("Not Selected"), 'value': -1}
courses_list, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(len(courses_list), 1) self.assertNotIn( ccx_course_key, [course.id for course in courses_list] )
url(r'^user_api/', include('openedx.core.djangoapps.user_api.legacy_urls')),
from salt.states import xmpp
ret['comment'] = 'Event module not available. Schedule save failed.'
continue
request = CreditRequest.objects.get(username=username, course__course_key=course_key) self.assertEqual(request.status, 'pending')
create_account(self.ALTERNATE_USERNAME, self.OLD_PASSWORD, self.NEW_EMAIL)
add_arg('-m', '--match', dest='match', action='append')
handle_course_cert_awarded(**self.signal_kwargs) self.assertEqual(mock_is_certification_enabled.call_count, 1) self.assertEqual(mock_task.call_count, 0)
response_dict = self._get_page_data(response) self.assertEqual(response_dict['current_step'], expected_current_step) self.assertEqual(expected_steps, [ step['name'] for step in response_dict['display_steps'] ])
if existing['code'] == 200:
python_shell = False if '*.' in cmd: python_shell = True
if 'enabled' in kwargs: return _enabled_used_error(ret)
Y = np.array([e.predict_proba(X)[:, 1] for e in self.estimators_]).T
usage_key = UsageKey.from_string(usage_key_string) usage_key = usage_key.replace(course_key=modulestore().fill_in_run(usage_key.course_key)) return usage_key
import integration import salt.utils from salt.exceptions import CommandExecutionError
if ((X.data if sparse else X) < 0).any(): raise ValueError("Entries of X must be non-negative.")
import integration
fulfill_course_milestone(pre_requisite_course.id, user) self.assertTrue(access._has_access_course(user, 'view_courseware_with_prerequisites', course))
return { field: course.fields[field] for field in CourseSummary.course_info_fields if field in course.fields }
return salt.runner.RunnerClient(_master_opts())
xmin, xmax = plt.xlim() ymin, ymax = plt.ylim() coef = clf.coef_ intercept = clf.intercept_
content = json.dumps(data, cls=i4xEncoder) super(JsonResponse, self).__init__(content, content_type='application/json; charset=utf-8')
step = n_samples // n_classes
self.assertTrue(self.video.is_aligned(True))
Promise(_check_func, "The 'Next Step' button is enabled.").fulfill()
def __init__(self, developer_message, user_message=None): self.developer_message = developer_message self.user_message = user_message
ssh_gateway_username: root
return u"{url}?auth_entry={auth_entry}&{param_str}".format( url=reverse("social:begin", kwargs={"backend": backend_name}), auth_entry=auth_entry, param_str=self._finish_auth_url_param(login_params), )
self.asset_name = 'delete_test' self.asset = self.get_sample_asset(self.asset_name)
glusterfs.__salt__ = {}
__version_info__ = __saltstack_version__.info __version__ = __saltstack_version__.string
if scipy.sparse.issparse(train): idx = label.sum(axis=1).nonzero()[0] return (train[idx], label[idx])
bkdir = os.path.join(bkroot, src_dir)
response = self.http_get_for_course(course_id=unicode(self.empty_course.id), HTTP_AUTHORIZATION=auth_header) self.assertEqual(response.status_code, 404)
return TAG_PATTERN.sub(_sanitize_tag, source)
from __future__ import absolute_import import os import tempfile
return self.best_estimator_.transform(X)
CourseInstructorRole(self.course_with_invalid_ee.id).add_users(self.instructor) self.client.login(username=self.instructor.username, password='test')
exc_info_on_loglevel=logging.DEBUG
from __future__ import absolute_import
return
try: deadline = cls.objects.get(course_key=course_key) return deadline.deadline except cls.DoesNotExist: return None
toy_course = store.get_course(SlashSeparatedCourseKey('edX', 'toy', '2012_Fall')) toy_course.wiki_slug = 'simple'
return ipsec_site_connection
vertical.start = self.future modulestore().update_item(vertical, self.dummy_user)
enrollment = CourseEnrollment.get_enrollment(student, self.course.id) self.assertEqual(enrollment.is_active, False)
return False
self.assertTrue(self._is_location_published(location)) self.assertFalse(modulestore().has_changes(modulestore().get_item(location)))
self.create_programs_config(enable_certification=False) self._verify_response(400)
def __init__(self, value): self.value = value
('cancelled', 'cancelled')
assert_equal(np.sum(s_clf.coef_ != 0.0), n_informative)
self.input_space = input_space
__virtualname__ = 'service'
if not run_diff_quality( violations_type="pylint", prefix=pythonpath_prefix, reports=pylint_reports, percentage_string=percentage_string, branch_string=compare_branch_string, dquality_dir=dquality_dir ): diff_quality_percentage_pass = False
import functools import operator
expected_calls = expected_calls[:1]
if n_components < min(n_features, n_samples): self.noise_variance_ = explained_variance_[n_components:].mean() else: self.noise_variance_ = 0.
sim = np.array([[0, 5, 3, 4], [5, 0, 2, 2], [3, 2, 0, 1], [4, 2, 1, 0]])
elif virtual is True and virtualname != module_name: if virtualname is not True: module_name = virtualname
error_code = 'course_id_not_provided' if not is_ccx: log.info('Master course ID not provided') error_code = 'master_course_id_not_provided'
func_code, source_file, first_line = get_func_code(self.func) func_dir = self._get_func_dir() func_code_file = os.path.join(func_dir, 'func_code.py')
if self.display_organization: return self.display_organization return self.location.org
self.login(self.email, self.pw)
return stdout, stderr
return reverse("get_token", kwargs={ "course_id": unicode(course_id), })
self.mock_programs_api() self.mock_credentials_api(self.student, data=self.CREDENTIALS_API_RESPONSE, reset_url=False)
current_umask = os.umask(0o027) verify_files([logfile], self.config['user']) os.umask(current_umask)
raise SkipTest
os.makedirs(self.mydir)
try: return CourseKey.from_string(arg) except InvalidKeyError: return SlashSeparatedCourseKey.from_deprecated_string(arg)
import fnmatch import logging import os import re import time import stat import tempfile
response = copy(obj_b)
def __setstate__(self, state): self._is_child = True self.__init__(state['hopts'], log_queue=state['log_queue'])
download_packages(opts)
staff_user = UserFactory(username='test_staff_user', email='test_staff_user@openedx.org', password='test') CourseStaffRole(self.master_course_key).add_users(staff_user)
clf = IsolationForest(max_samples=100, random_state=rng).fit(X_train)
import salt.ext.six as six
self.wait_for_field(field_id) query = self.q(css='.u-field-{} .u-field-message'.format(field_id)) return query.text[0] if query.present else None
from __future__ import print_function from __future__ import absolute_import
access_role(library2_key).add_users(self.non_staff_user)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
timezone.__salt__ = {} timezone.__opts__ = {}
try: course_assets = self._find_course_assets(course_key) self.asset_collection.remove(course_assets.doc_id) except ItemNotFoundError: pass
best = sorted(grid_scores, key=lambda x: x.mean_validation_score, reverse=True)[0] self.best_params_ = best.parameters self.best_score_ = best.mean_validation_score
cert_type=client
with current_ioloop(self.io_loop): ret = attr(*args, **kwargs) if isinstance(ret, tornado.concurrent.Future): ret = self._block_future(ret) return ret
slug = hashlib.sha256(slug + unicode(badge_class.course_id)).hexdigest()
CourseModeFactory.create( course_id=self.course.id, mode_slug=CourseMode.HONOR, mode_display_name=CourseMode.HONOR, )
self.assertEqual(settings.XBLOCK_SETTINGS, {self.xblock_setting_key1: 42}) self.assertEqual(self.settings_service.get_settings_bucket(self.xblock_mock), 42)
raise
return False
alternate_course = self.create_course(course='mobile', mobile_available=True)
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
if requested_child == 'first': return children[0] elif requested_child == 'last': return children[-1] else: return children[0]
course_group.users.remove(user) user.course_groups.remove(course_group)
self.row_uncovered[:] = True self.col_uncovered[:] = True
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import logging import copy
self.assertEqual( actual_url, '/static/default_{size}.png'.format(size=expected_pixels) )
if definition_id is None: definition_id = LocalId()
templates_path = add_base(['_templates'])
from __future__ import absolute_import import re
from __future__ import absolute_import import os
try: import win32com.client import pythoncom
from __future__ import absolute_import import time import pprint import logging
return False
self.queue_len = 0 if self.status == 'incomplete': self.status = 'queued' self.queue_len = self.msg self.msg = self.submitted_msg
self.assertFalse(api.is_user_eligible_for_credit("bob", self.course_key))
log.exception( u'Unable to emit {event} event for user {user} and order {order}'.format( event=event_name, user=self.user.id, order=self.id) )
if not np.any(Y_ == i): continue plt.scatter(X[Y_ == i, 0], X[Y_ == i, 1], .8, color=color)
'html5_sources': ['http://www.example.com/source.mp4'], 'data': '',
responsetype_cls = responsetypes.registry.get_class_for_tag(response.tag) responder = responsetype_cls(response, inputfields, self.context, self.capa_system, self.capa_module) self.responders[response] = responder
import os import re import glob import hashlib import tempfile import logging
import salt.utils
assert_false(world.css_has_class('.CodeMirror', 'is-inactive')) assert_true(world.is_css_not_present('.tiny-mce')) type_in_codemirror(0, text)
log.warning('You can only set either memdump or quiesce to True. Setting quiesce=False') quiesce = False
batch_inertia /= model.batch_size centers_squared_diff /= model.batch_size
return '__file__' in globals()
authentication_classes = []
SITE_ID = 1 SITE_NAME = "localhost:8001" HTTPS = 'on' ROOT_URLCONF = 'cms.urls'
'job_cache_store_endtime': bool,
from __future__ import absolute_import
from __future__ import absolute_import
import logging
y_ = np.dot(f, self.beta) + np.dot(r, self.gamma)
css = self._bounded_selector(self.assignment_type_buttons_css) self.q(css=css).filter(lambda el: el.get_attribute('value') == assignment_type).first.click()
from __future__ import absolute_import import salt.utils import time import logging from salt.exceptions import CommandExecutionError
self.loop_interval = six.MAXSIZE clean_proc_dir(opts)
self.assertEqual(context['currency'], 'PKR') self.assertEqual(context['currency_symbol'], 'Rs')
with self.assertNumQueries(0): RestrictedCourse.is_restricted_course(new_course_id) RestrictedCourse.is_disabled_access_check(new_course_id)
from salt.states import composer
self.client.login(username=self.global_staff.username, password="test") self._assert_certificates_visible(True)
from __future__ import absolute_import import getpass import os import sys import stat import shutil import resource import tempfile import socket
self.lcp = self.new_lcp(None) self.set_state_from_lcp()
n_classes_ = [n_classes_] classes_ = [classes_] class_prior_ = [class_prior_] constant = [constant]
delete_course_and_groups(self.course_key, self.user.id) resp = self._create_course_with_given_location(self.course_key) self.assertEqual(resp.status_code, 200)
if request.user.is_authenticated() and survey.utils.must_answer_survey(course, user): return redirect(reverse('course_survey', args=[unicode(course.id)]))
from __future__ import absolute_import
loss, grad = _logistic_loss_and_grad(w, X, y, alpha=1.) grad_2, hess = _logistic_grad_hess(w, X, y, alpha=1.) assert_array_almost_equal(grad, grad_2)
child_name = os.ttyname(stdout_child_fd) try: tty_fd = os.open('/dev/tty', os.O_RDWR | os.O_NOCTTY) if tty_fd >= 0: os.close(tty_fd)
for a in args: if isinstance(a, theano.Variable): return True return False
from salt.utils.decorators import depends import salt.utils
logger.debug('Websocket already connected, returning') return
copy_or_rename_transcript(video_name, sub_attr, item, user=request.user)
country_label = _(u"Country") error_msg = _(u"Please select your Country.")
for course in courses: self.enroll(course.id)
action()
'course_modes',
if hasattr(locator, 'version_agnostic'): locator = locator.version_agnostic() if hasattr(locator, 'branch'): locator = locator.replace(branch=None) return locator
return self.q(css=self._discussion_selector + " " + selector)
X, _, _, _, _ = _preprocess_data(X, y, True, True)
usage_key = usage_key.replace(course_key=store.fill_in_run(usage_key.course_key))
output = inp output['pepa_templates'] = [] immutable = {}
assert_equal(len(folds), len(labels)) for i in np.unique(folds): assert_greater_equal(tolerance, abs(sum(folds == i) - ideal_n_labels_per_fold))
monitoring_dataset = DenseDesignMatrix(X=X)
#pylint: disable=E0602
modulestore().update_item(course, ModuleStoreEnum.UserID.test)
errors = [] minions = [] for minion in response: minions.append(minion) if not response[minion]: errors.append(minion)
with check_exact_number_of_calls(store, 'refresh_cached_metadata_inheritance_tree', 28):
result['_id'] = str(result['_id'])
connargs['bindpw'] = password
from salt.exceptions import SaltInvocationError from salt.utils import dictdiffer
self._check_sizes(space)
event_unmasked = copy.deepcopy(event_info) self.unmask_event(event_unmasked) self.runtime.publish(self, title, event_unmasked)
self.visbiasX = sharedX( numpy.zeros(nvisx), name='vbX', borrow=True )
default_grade = '-1'
the_system = test_capa_system() the_system.render_template = mock.Mock() the_system.render_template.return_value = "<div>Input Template Render</div>"
pkg = next(iter(configuration)) conf_ptr = configuration[pkg]
resp = self.client.post( self.postback_url, self.student_answers ) self.assertEquals(resp.status_code, 200) self._assert_no_redirect(self.course)
self._add_to_relations(self._block_relations, parent_key, child_key)
return reverse_course_url(self.VIEW_NAME, course_key)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.set_group_access(self.vertical, {1: []}) self.set_group_access(self.problem, {2: [3, 4]})
return self.is_enabled(self.NEXT_PAGE_BUTTON_CSS)
return has_studio_write_access(self._user, course_key)
url = reverse("verify_student_reverify") return self.client.get(url)
iris = datasets.load_iris()
self.assertFalse(any(settings.PDF_RECEIPT_TERMS_AND_CONDITIONS in s for s in pdf_content))
self.user.is_active = False self.user.save()
self.assertChildren(block, self.all_children)
THEME_NAME = ENV_TOKENS.get('THEME_NAME', None) COMPREHENSIVE_THEME_DIR = path(ENV_TOKENS.get('COMPREHENSIVE_THEME_DIR', COMPREHENSIVE_THEME_DIR))
return text
return event['event_type'] == self.USER_SETTINGS_CHANGED_EVENT_NAME
from __future__ import absolute_import import os
self._mock_paver_needs = patch.object(pavelib.js_test.test_js, 'needs').start() self._mock_paver_needs.return_value = 0
if context is None: context = self.serializer_context return BlockDictSerializer( context['block_structure'], many=False, context=context, )
self.check('[50,40]', 35, 25)
self.validate_xblock_info_consistency(xblock_info, has_child_info=has_child_info)
if available(service): services.append(service)
grains['osrelease'] = grains['kernelrelease'].split('-')[0]
ret_stdout = [] ret_stderr = [] while self.conn.has_unread_data: stdout, stderr = self.conn.recv()
return {'err_code': response.status_code, 'err_msg': json.loads(response.text).get('err', '')}
mongo_store.collection.update( self.vertical_x1b.to_deprecated_son('_id.'), {'$push': {'definition.children': unicode(self.problem_x1a_1)}} )
comment, passed, retries = _download(quidditch, retries) if not passed: return (comment, str(passed))
check_ortho(T, "x scores are not orthogonal") check_ortho(U, "y scores are not orthogonal")
self.assertEquals(2, len(response_results)) self.assertEquals(True, response_max_exceeded)
from __future__ import absolute_import
add_user_with_status_granted(self.admin, self.admin) self.assertIsNone(get_course_creator_status(self.admin))
context['logo_subtitle'] = _("Certificate Validation")
world.disable_jquery_animations()
if not hasattr(self, 'needs_reformat'): self.needs_reformat = self.needs_reshape del self.needs_reshape
time.sleep(1) return info(new_name).get('RecordName') == new_name
from salt.modules import xapi
while block.parent: block = block.get_parent() return block
CourseEnrollment.unenroll_by_email("jack@fake.edx.org", course_id) self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assert_no_events_were_emitted()
import sys
from __future__ import absolute_import
gid_list = _list_gids() if str(gid) in gid_list: raise CommandExecutionError( 'gid \'{0}\' already exists'.format(gid) )
response_dict = {(answer_key_prefix + k): v for k, v in responses.items()} resp = self.client.post(modx_url, response_dict)
extract_dir_relative = path.relpath(extract_dir, settings.DATA_DIR)
n_neighbors += 1
course_org_filter = microsite.get_value('course_org_filter')
response = self._submit_photos(self.course_key, self.reverification_location, self.IMAGE_DATA) self.assertEqual(response.status_code, 400)
response = self.http_get_for_course(HTTP_AUTHORIZATION=auth_header) self.assertEqual(response.status_code, 200)
self.cluster_centers_ = _init_centroids( X, self.n_clusters, self.init, random_state=self.random_state_, x_squared_norms=x_squared_norms, init_size=self.init_size)
self.assertEqual(iptables.build_rule(**{'match-set': '!src flag'}), '-m set ! --match-set src flag')
break
import salt.utils.cloud import salt.config as config
mode = CourseModeFactory.create() mode.course_id = self.course.id mode.min_price = 1 mode.save()
yield self.auth.authenticate() ret = yield self.message_client.send( self._package_load(self.auth.crypticle.dumps(load)), timeout=timeout, tries=tries, )
from __future__ import absolute_import
past_due_date = CapaFactory.create(showanswer='past_due', max_attempts="1", attempts="0", due=self.yesterday_str) self.assertTrue(past_due_date.answer_available())
return Image.fromarray(arr.reshape(os, os) * 255.)
if not url: return url
self._unenroll() self.assertEqual(DEFAULT_VERIFIED_COHORT_NAME, get_cohort(self.user, self.course.id, assign=False).name)
if not settings.FEATURES.get('ALLOW_WIKI_ROOT_ACCESS', False): raise PermissionDenied()
if fast_dot is np.dot: return
self.request.user = self.anonymous_user self.assertFalse(user_has_passed_entrance_exam(self.request, self.course))
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_id) if has_instructor_access_for_class(request.user, course_key): try: data = dashboard_data.get_d3_sequential_open_distrib(course_key)
return self._block_relations.iterkeys()
instructor = UserFactory() allow_access(self.course, instructor, 'instructor')
clf1 = LogisticRegressionCV(cv=precomputed_folds) target_copy = target.copy() target_copy[target_copy == 0] = 1 clf1.fit(train, target_copy)
POST_AUTH_PARAMS = ('course_id', 'enrollment_action', 'course_mode', 'email_opt_in')
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch
import salt.ext.six as six
nfs3.__grains__ = {} nfs3.__salt__ = {} nfs3.__context__ = {} nfs3.__opts__ = {}
raise NotImplementedError
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
version_status[2] = master_version.string
for f in files: i = _get_pkg_id_from_pkginfo(os.path.join(temp_dir, f)) if len(i): package_ids.extend(i)
if len(names) == 1: return ret[names[0]] return ret
EmptyPromise( lambda: self.outline_page.is_browser_on_page(), "loaded page {!r}".format(self.outline_page), timeout=30 ).fulfill()
world.edit_component() type_in_codemirror(0, text) world.save_component()
if not _latest_version == _version: _refresh_db = True
if return_bin: return response
for name, penalty in (('unreg', 1), ('reg', 0.05)):
has_access.return_value = True response = views.all_sequential_open_distrib(self.request, 'test/test/test') self.assertEqual(json.dumps(self.simple_data), response.content)
self.assertEqual(orphan_sequential.location.block_type, root.location.block_type) self.assertEqual(orphan_sequential.location.block_id, root.location.block_id)
try: log.info("Course import %s: Upload complete", courselike_key) _save_request_status(request, courselike_string, 1)
ttype = 'zeromq'
return course_metadata_utils.course_start_datetime_text( self.start, self.advertised_start, format_string, ugettext, strftime_localized )
cache_key = u"{}".format(course.id)
CreditProvider.objects.create(provider_id=other_provider_id, enable_integration=True)
_config_filename_ = 'cloud'
if module.has_children: new_children = [] for child_loc in module.children: child_loc = child_loc.map_into_course(dest_course_id) new_children.append(child_loc)
for block_type in ['course', 'html', 'video']: self.assertNotIn(block_type, block_counts_for_course) self.assertNotIn(block_type, block_counts_for_chapter_x)
fermat_weber = fmin_bfgs(cost_func, median, disp=False) assert_array_almost_equal(median, fermat_weber) assert_warns(ConvergenceWarning, _spatial_median, X, max_iter=30, tol=0.)
if self.kl_integrator is None: self.kl_integrator = find_integrator_for(self.prior, self.posterior)
try: self.assertIn( 'True', [i.strip() for i in self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))] ) except AssertionError: raise
continue
if self._is_training_data(X): return 2. - float(self.train_sizes) / self.n_max_train_sizes else: return float(self.train_sizes) / self.n_max_train_sizes
split_test = self._update_partition_id(0) self.assertEqual(2, len(split_test.children)) initial_group_id_to_child = split_test.group_id_to_child
return key.block_scope_id
if self._connecting_future.done(): self._connecting_future = self.connect() yield self._connecting_future
import integration import salt.utils
s3.query( key=key, keyid=keyid, kms_keyid=keyid, bucket=bucket_name, service_url=service_url, verify_ssl=verify_ssl, location=location, path=_quote(path), local_file=cached_file_path )
if not scopes: scopes = ['default'] return ' '.join(scopes)
def __init__(self, msg, eigenvalues, eigenvectors): ArpackError.__init__(self, -1, {-1: msg}) self.eigenvalues = eigenvalues self.eigenvectors = eigenvectors
url = reverse('verify_student_start_flow', kwargs={'course_id': unicode(course_id)}) self.assertRedirects(response, url)
__grains__ = {} if 'pepa_grains' in __opts__: __grains__ = __opts__['pepa_grains'] if args.grains: __grains__.update(yaml.load(args.grains))
resp_params = PaymentFakeView.response_post_params(post_params)
import salt.utils HAS_CLOUD = False try:
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
COURSE_SCOPE = 'course'
children = self.q(css='.note') return [EdxNotesPageItem(self.browser, child.get_attribute("id")) for child in children]
from salt.states import rabbitmq_vhost
assert_raises(ValueError, precision_recall_fscore_support, y_true, y_pred, beta=0.0)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
assert grad_counter.get_value() == train_batches * updates_per_batch
self.assertEqual(config['key_logfile'], os.path.join('/', 'key')) self.assertNotEqual(config['key_logfile'], '//key')
self.odd_course = CourseFactory.create( org='test.org_1-2', number='test-2.3_course', display_name='dotted.course.name-2', )
self.store.publish(locations['child'], self.user_id)
if self.warm_start and len(self.estimators_) > 0: random_state.randint(MAX_INT, size=len(self.estimators_))
return course_mode_tuple.slug in cls.VERIFIED_MODES
BULK_EMAIL_FAILURE_ERRORS = (
self.navigate_to_video()
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch, Mock
multiprocessing.active_children()
block_structure.set_transformer_block_field( block_key, cls, cls.MERGED_VISIBLE_TO_STAFF_ONLY, ( all_parents_visible_to_staff_only or block_structure.get_xblock(block_key).visible_to_staff_only ) )
target = target / 100000.0
return len(self.q(css='.page-content-secondary .team-member'))
return self.conditional.sample_from_conditional( conditional_params=theta, num_samples=num_samples )
pillar_value = yaml.load(value)
assert self.conv2d.get_params() == [self.filters]
CourseEnrollment.enroll(self.user, self.course.id)
ASSIGN_CMD = 'net.inet.icmp.icmplim' CONFIG = '/etc/sysctl.conf'
try: import pyodbc #import psycopg2.extras HAS_ODBC = True except ImportError: HAS_ODBC = False
__virtualname__ = 'dockerng'
IPFilter.objects.create( whitelist="192.168.10.20", enabled=True )
import salt.utils from salt.exceptions import CommandExecutionError, CommandNotFoundError
ar1 = np.asarray(ar1).ravel() ar2 = np.asarray(ar2).ravel()
cmd = 'find {0} -name *.pkg'.format(base_path) out = __salt__['cmd.run'](cmd, python_shell=True)
num_braces = 0
return unicode(obj.course.course_key)
installer = pkginfo[version_num].get('installer', False) cache_dir = pkginfo[version_num].get('cache_dir', False) cache_file = pkginfo[version_num].get('cache_file', False)
remotes = __salt__['git.remotes'](target, user=user, redact_auth=False)
y = label_binarize(y, classes=[0, 1, 2]) n_classes = y.shape[1]
self.assertFalse(self.get_dashboard_enrollment_message() in response.content)
self.masterapi._minion_event(load) self._handle_minion_event(load)
assert all(np.all(this_point.cv_validation_scores == 0.0) for this_point in gs.grid_scores_ if this_point.parameters['parameter'] == FailingClassifier.FAILING_PARAMETER)
return handle_node(self.tree)
xqueue_interface = XQueueInterface("http://example.com/xqueue", Mock())
return arrow
return True
user = self._authenticate(username=username, password=password) if user is not None: request.user = user return True return False
'states_dirs': list,
import salt.ext.six as six
assert_false("copyright" in vocabulary)
self.profile.year_of_birth = year_of_birth self.profile.save()
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, Mock, patch ensure_in_syspath('../../')
random_state.randint(MAX_INT, size=len(self.estimators_))
if hasattr(func, 'im_func'): func = func.__func__
pass
return None
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) for Cls in [GradientBoostingRegressor, GradientBoostingClassifier]: est = Cls(n_estimators=200, max_depth=1) est.fit(X, y)
request.META["HTTP_HOST"] = "edge.edx.org" response = index(request)
def argpartition(a, kth, axis=-1, kind='introselect', order=None): return np.argsort(a, axis=axis, order=order)
if self._xml_string is not None: return self._xml_string return etree.tostring(self._xml_node)
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(message)s')
data = parse_qs(body) response = self.client.post(url, data)
UserPartition.scheme_extensions = None
self.settings_detail.refresh_page() self.settings_detail.wait_for_prerequisite_course_options() self.assertTrue(is_option_value_selected( browser_query=self.settings_detail.pre_requisite_course_options, value=pre_requisite_course_id ))
if clear is True: cmd.append('--clear') if system_site_packages is True: cmd.append('--system-site-packages')
if not _valid_composer(composer): raise CommandNotFoundError( '\'composer.{0}\' is not available. Couldn\'t find \'{1}\'.' .format(action, composer) )
try: import psutil HAS_PSUTIL = True except ImportError: HAS_PSUTIL = False
clf = GradientBoostingClassifier(loss='exponential', n_estimators=100, random_state=1)
response.collapse_body() return request, response
with self.assertNumQueries(0): self.assertFalse( self.bookmark_service.set_bookmarked(usage_key=UsageKey.from_string("i4x://ed/ed/ed/interactive")) )
assert (niter > 1) == (len(dbm.hidden_layers) > 1)
cmd = [composer, action, '--no-interaction', '--no-ansi']
self._add_user_partitions(scheme_id='cohort') actual = GroupConfiguration.get_or_create_content_group(self.store, self.course) expected = self._get_expected_content_group(usage_for_group=[]) self.assertEqual(actual, expected)
textid = 14 while textid == 14: textid = rng.randint(1, 113)
from salttesting.helpers import ensure_in_syspath, expensiveTest
elif isinstance(value, six.string_types): if value.lower() == 'none': return None return value else: return None
__virtualname__ = 'system'
__virtualname__ = 'zfs'
while True: emptydirs = _list_emptydirs(mod_dir) if not emptydirs: break for emptydir in emptydirs: touched = True shutil.rmtree(emptydir, ignore_errors=True)
self.random_start = int(self.random_start)
return StaticContent.ASSET_URL_RE.match(path_string) is not None
handle_scm = win32service.OpenSCManager( None, None, win32service.SC_MANAGER_ALL_ACCESS)
raise NotImplementedError(str(type(self))+" does not implement " +\ "get_total_state_space()")
func.__doc__ = doc
with salt.utils.fopen(requirements_file_path, 'w') as fhw: fhw.write('zope.interface==4.0.1\n')
self.dashboard_page.visit()
self.setup_mongo_course(course_edit_method='XML') result_fragment = self.module.render(STUDENT_VIEW, context=self.default_context) self.assertNotIn('View Unit in Studio', result_fragment.content)
world.mongo_client.fsync()
xpath = "//div[@class='indicator-container']/span" self.assert_no_xpath(xml, xpath, self.context)
X_varied, y_varied = make_blobs(n_samples=n_samples, cluster_std=[1.0, 2.5, 0.5], random_state=random_state) y_pred = KMeans(n_clusters=3, random_state=random_state).fit_predict(X_varied)
parent_task_id = InstructorTask.objects.get(pk=entry_id).task_id task_id = subtask_status.task_id total_recipients = len(to_list) recipient_num = 0 total_recipients_successful = 0 total_recipients_failed = 0 recipients_info = Counter()
self.assertGreater(len(params['signed_date_time']), 0) self.assertGreater(len(params['transaction_uuid']), 0)
with self.settings(DATA_DIR='/not/the/data/dir'): try_tar(self._edx_platform_tar())
pass
data_rows = _strip_listing_to_done(cmdoutput.splitlines())
all_assets[asset_idx] = mdata.to_storable() return all_assets
return self._get_element_text(".response-display-count")
ret['retcode'] = int(not __salt__['ps.kill_pid'](pid))
self.assert_no_xss(response, xss_content)
self.post_create_membership( 200, self.build_membership_data(user, self.solar_team), user=user )
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
return BACKEND.has_override_value(val_name)
'sources': [u'example.mp4', u'example.webm'] + [video['url'] for video in encoded_videos],
ret['comment'] = 'Event module not available. Schedule enable job failed.'
self.assertEqual(userreport['city'], "None") self.assertEqual(userreport['country'], "")
if user_partition.active: for group_id in group_ids: try: user_partition.get_group(group_id) except NoSuchUserPartitionGroupError: has_invalid_groups = True
if asset_collection.name in asset_collection.database.collection_names():
_default_logging_level_ = 'warning' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'master') _loglevel_config_setting_name_ = 'cli_salt_cp_log_file'
yield dec
return self.q(css=self._bounded_selector('a.delete-button'))
self.assertTrue(self.store.has_changes(xblock))
af = AffinityPropagation(preference=-50).fit(X) cluster_centers_indices = af.cluster_centers_indices_ labels = af.labels_
ret['changes'] = image_update
config.add_subpackage('linear_model') config.add_subpackage('utils')
if patches.shape[-1] == 1: return patches.reshape((n_patches, p_h, p_w)) else: return patches
try: config = salt.template.compile_template( sls_file, renderers, __opts__['renderer'], __opts__['renderer_blacklist'], __opts__['renderer_whitelist'])
'survey',
managed = False
saltcloudmod.__salt__ = {}
assert_almost_equal(y_std_1d, y_std_2d) assert_almost_equal(y_cov_1d, y_cov_2d)
from __future__ import division
from __future__ import absolute_import
reserved = _("All rights reserved") context['copyright_text'] = u'&copy; {year} {platform_name}. {reserved}.'.format( year=settings.COPYRIGHT_YEAR, platform_name=platform_name, reserved=reserved )
wrapped_func = wrapped_func.__func__
CMS_SEGMENT_KEY = AUTH_TOKENS.get('SEGMENT_KEY')
from salt.modules import rbenv import os
__virtualname__ = 'lvm'
return self.delete_student_state_button.click()
__virtualname__ = 'mdata'
self.assertFalse(self.cohort_management_page.is_save_button_disabled(self.inline_key))
with MongoContentstoreBuilder().build() as self.contentstore: with modulestore_builder.build(contentstore=self.contentstore) as self.store: self._create_course(self.store) yield
if not kwargs: cmd += ' '
self.url = reverse_course_url('tabs_handler', self.course.id)
self.q(css='a.instructor-info-action').first.click() staff_debug_page = StaffDebugPage(self.browser) staff_debug_page.wait_for_page() return staff_debug_page
if self.read_committed is True: if connection.vendor == 'mysql': cursor = connection.cursor() cursor.execute("SET TRANSACTION ISOLATION LEVEL READ COMMITTED")
order_item_dict = dict((feature, getattr(purchased_course, feature, None)) for feature in order_item_features)
iris = datasets.load_iris()
prunable = [] snapshots = {} for key in schedule.keys(): snapshots[key] = []
url = url + '?' + query_parameters if query_parameters else url response = client.get(url) self.assertEqual(expected_status, response.status_code) return response
self.client.login(username=self.global_staff.username, password='test') response = self.client.post(url) self.assertEqual(response.status_code, 302)
self.assertFalse(response_data['success']) self.assertEquals(expected_error, response_data['error']) self.assertFalse(self.user.email_user.called)
try: import pwd except ImportError: pass
new_display_name = "The Trouble with Tribbles" new_weight = 20 problem_block_course.display_name = new_display_name problem_block_course.weight = new_weight self.store.update_item(problem_block_course, self.user_id)
return None, None
clf = IsolationForest(random_state=rng, contamination=0.25) clf.fit(X) decision_func = - clf.decision_function(X) pred = clf.predict(X)
self.run_state('ssh_known_hosts.present', **kwargs)
minions = set(minions)
X = iris.data[:, pair] y = iris.target
return RequestFactory( SERVER_NAME=parsed_url.hostname, SERVER_PORT=parsed_url.port or 80, ).get("/")
return {}
response = self.client.get('/?clear-lang') self.assert_tag_has_attr(response.content, "html", "lang", site_lang)
from __future__ import absolute_import
sample_weight = np.ones(y.shape) sample_weight[y == 1] *= 100
if correct: self.problem_page.click_choice("choice_0") self.problem_page.click_choice("choice_2") else: self.problem_page.click_choice("choice_1")
raise NotImplementedError()
return course_metadata_utils.may_certify_for_course( self.certificates_display_behavior, self.certificates_show_before_end, self.has_ended() )
self.logout() self.login(self.test_user.email, 'test')
_save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=task_definition.Principal.UserID, password=password, logon_type=task_definition.Principal.LogonType)
return '{0.org}_{0.course}'.format(course_key)
project = u('scikit-learn') copyright = u('2010 - 2016, scikit-learn developers (BSD License)')
Ensure mykey key exists: boto_kms.key_present: - name: mykey - region: us-east-1 - profile: myprofile
#import yaml import salt.ext.six as six
with make_uploaded_file(extension=extension, content_type=content_type) as uploaded_file: self.check_validation_result(uploaded_file, expected_failure_message)
service = ReverificationService() status = service.get_status(self.user.id, unicode(self.course_id), self.final_checkpoint_location) self.assertEqual(status, service.NON_VERIFIED_TRACK)
ret = {} for node in items['servers']: ret[node['name']] = {} for item in node: value = node[item] ret[node['name']][item] = value return ret
if layer_to_clamp is None: layer_to_clamp = OrderedDict()
return False
if self._module_store is None: self._module_store = modulestore() return self._module_store
email_id = kwargs.get('id', 0) return self.emails[email_id]
start=datetime.datetime(2012, 2, 3, tzinfo=UTC)
if not os.path.exists(cyg_cache_dir): os.mkdir(cyg_cache_dir) elif os.path.exists(cyg_setup_path): os.remove(cyg_setup_path)
self.q(css=self._bounded_selector('a.action-view')).first.click()
return "BIGSERIAL"
return self._convert_django_user_to_xblock_user(self._django_user)
resp_params = PaymentFakeView.response_post_params(post_params) self.assertEqual(resp_params.get('decision'), 'REJECT')
ret['comment'] = ('File {0} is not present and is not set for ' 'creation').format(name) return ret
stream.write('Server-side exception handling payload') stream.close()
import salt.utils import salt.utils.cloud as suc from salt.exceptions import SaltCloudException
return os.sep.join(__file__.split(os.sep)[:-4]) + '/data/uploads/' + filename
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
import integration
self._make_eligible() self._purchase_credit() self._initiate_request()
xpath = "//div[@class='indicator-container']/span" self.assert_no_xpath(xml, xpath, self.context)
block = self.course
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import SaltException
self.coefs_ = [] self.intercepts_ = []
else: ret = _load_result(new, ret)
addr = str(address).split('/') if len(addr) > 2: raise AddressValueError("Only one '/' permitted in %r" % address) return addr
element = self.q(css="#content .container-footer .course-license") if element.is_present(): return element.text[0] return None
self.find_css('.action-secondary').first.click()
if not added and not cmd_opt: raise CommandExecutionError( 'Specified arguments did not result in modification of repo' )
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return hasattr(self, '_has_answerpool')
resp = self.client.get(get_url('xblock_handler', handouts.location))
pass
win_dns_client.__salt__ = {} win_dns_client.__context__ = {}
if len(self.credit_type) > 1: raise LoncapaProblemError('Only one type of partial credit is allowed for Multiple Choice problems.')
self.assertAlmostEqual( calc.evaluator(variables, {}, "T", case_sensitive=True), 298, delta=0.2 )
__virtualname__ = 'pkg'
try: import esky from esky import EskyVersionError HAS_ESKY = True except ImportError: HAS_ESKY = False from salt.ext import six from salt.ext.six.moves.urllib.error import URLError
y = (self.y_mean + self.y_std * y_).reshape(n_eval, n_targets)
version_guids = [] id_version_map = defaultdict(list) for course_index in matching_indexes: version_guid = course_index['versions'][branch] version_guids.append(version_guid) id_version_map[version_guid].append(course_index) return version_guids, id_version_map
options.mode = 'run' test_js(options)
profile_page.privacy = privacy
other_course_key = CourseKey.from_string("edX/other/2015") self._configure_credit(course_key=other_course_key) second_request = api.create_credit_request(other_course_key, self.PROVIDER_ID, self.USER_INFO["username"])
return [username.strip() for username in value.split(',')]
raise AssertionError('Error performing exclusion: ' 's1: %s s2: %s other: %s' % (s1, s2, other))
n_samples, n_features = X.shape n_targets = y.shape[1]
'msg': '', 'width': width, 'height': height,
from salt.exceptions import SaltInvocationError
provider = None
from distutils.version import LooseVersion from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, skip_if_binaries_missing ) ensure_in_syspath('../..')
email_enabled = models.BooleanField(default=False)
self.save() self.runtime.modulestore.update_item(self, user.id)
import cherrypy import salt.ext.six as six from salt.ext.six.moves import StringIO
return [provider for provider in cls.enabled() if provider.accepts_logins]
return
return self._create_user(username, email, is_staff=False, mode=mode)
options = repo_string.strip().split() branch = options[0] repo_location = options[1] root = ''
import salt.utils import salt.utils.itertools from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.modules.mac_user import _dscl, _flush_dscl_cache
info = next(six.itervalues(next(six.itervalues(next(six.itervalues(info))))))
response = self.client.get('/home') self.assertEqual(response.status_code, 200) self.assert_no_xss(response, escaping_content)
all_asset_md = [] for __ in xrange(amount): all_asset_md.append(generate_random_asset_md()) return all_asset_md
return self.q(css=BANNER_SELECTOR)
return EmptyPromise( lambda: self.q(css='#replace-courselike-button')[0], "Upload button appears", timeout=30 ).fulfill()
jid_dir, jid_file = self._make_tmp_jid_dirs()
'courseware.middleware.RedirectUnenrolledMiddleware',
pass
saltenv = env
return finders.FileSystemFinder().find(path)
results.extend([')' for item in unmatched])
import errno import glob import logging import os import shutil import time import hashlib import bisect
try: mask = int(mask) except ValueError: return False else: if not 1 <= mask <= int(mask_max): return False
for mode in ('audit', 'honor', 'verified'): CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
raise _NotFittedError(msg % {'name': type(estimator).__name__})
return self.skip_entrance_exam_button.click()
return uuid4().hex.decode('ascii')
__func_alias__ = { 'list_': 'list', 'ls_': 'ls' }
self.assertIsNotNone(problem_block.markdown) self.assertIsNone(problem_block_course.markdown)
self.add_license_to_xml(xml)
microsite.set_by_domain('unknown') self.assertIsNone(microsite.get_value('platform_name'))
log_stdin=None, log_stdin_level='debug', log_stdout=None, log_stdout_level='debug', log_stderr=None, log_stderr_level='debug',
try: import sqlite3 HAS_SQLITE3 = True except ImportError: HAS_SQLITE3 = False
ignore_cidr: 192.168.50.0/24
course = CourseFactory.create( org=course_location.org, number=course_location.course, run=course_location.run ) enrollment = CourseEnrollment.enroll(self.student, course.id) return course, enrollment
if not eventtime: eventtime = str(int(time.time()))
self._mp_context = backend backend = "multiprocessing"
course_key = CourseKey.from_string(self._course_key) return unicode(course_key.make_usage_key('course_info', 'handouts'))
if self._count >= self.start: return self.final_momentum return self._init_momentum
minion_id = kwargs['opts']['id'] if re_pattern: minion_id = re.sub(re_pattern, re_replace, minion_id)
integer = _if_str_then_list(integer) checks[int] = integer string = _if_str_then_list(string) checks[str] = string listing = _if_str_then_list(listing) checks[list] = listing dictionary = _if_str_then_list(dictionary) checks[dict] = dictionary
assert_raises(ValueError, sel.inverse_transform, np.array([[1], [2]]))
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains )
pass
pass
from functools import wraps import random
return view(request, course, ccx)
test_command = 'sysbench --test=cpu --cpu-max-prime={0} run' result = None ret_val = {}
PRIVATE_VISIBILITY = 'private'
pass
pythoncom.CoInitialize()
import salt.utils.jid import salt.returners
self.assertFalse(self.done.inprogress()) self.assertFalse(self.not_started.inprogress())
mock_get.return_value.content = json.dumps(NOTES_API_EMPTY_RESPONSE) self.assertItemsEqual( NOTES_VIEW_EMPTY_RESPONSE, helpers.get_notes(self.request, self.course) )
import salt.config as config
video = ItemFactory.create(parent_location=child_vertical.location, category="video", display_name="My Video") self.assertIsNone(xblock_studio_url(video))
self.video.show_captions()
if options['course']: try: course = CourseKey.from_string(options['course']) except InvalidKeyError: course = SlashSeparatedCourseKey.from_deprecated_string(options['course'])
img[i, j] /= float(min(i + 1, p_h, i_h - i) * min(j + 1, p_w, i_w - j))
MAX_IDEAL_BATCH_DURATION = 2
deploy_scripts_search_path.pop(idx)
self.assertEqual(new_mixed_setting["default"]["ENGINE"], "xmodule.modulestore.mixed.MixedModuleStore")
mb_k_means = MiniBatchKMeans(init="random", n_clusters=n_clusters, random_state=42, n_init=10).fit(X_csr) _check_fitted_model(mb_k_means)
self.assertEqual(pq(response.content)(".sts-enrollment").length, 0)
return numpy.arcsin(1. / val)
TMP = os.path.join(SYS_TMP_DIR, 'salt-tests-tmpdir')
self.t_ = None
import salt.utils from salt.ext.six.moves import range
world.staff = StaffFactory(course_key=world.course_key) world.enroll_user(world.staff, world.course_key)
MOCK_SEARCH_BACKING_FILE = ( TEST_ROOT / "index_file.dat" ).abspath()
child_pids = p1_group.get_children(recursive=True)
children = self.get_item_from_modulestore(self.seq_usage_key).children self.assertEqual(unit1_usage_key, children[1]) self.assertEqual(unit2_usage_key, children[2])
import salt.version import salt.utils
settings = _normalize_server_settings(**settings)
self.assertEqual( terminal.getwinsize(), (24, cols) ) terminal.wait() terminal.close()
if course_key is not None: CourseEnrollment.enroll(user, course_key, mode=enrollment_mode)
master_config_path = _absolute_path(master_config_path, config_dir)
self.assert_can_access(self.beta_user, self.alpha_module.discussion_id, thread_id, True)
'session_inactivity_timeout.middleware.SessionInactivityTimeout',
import logging import salt.utils
return s if len(s) <= 80 else s[:77] + "..."self._submit_photos( face_image=self.IMAGE_DATA, photo_id_image=self.IMAGE_DATA, ) attempt = SoftwareSecurePhotoVerification.objects.get(user=self.user) attempt.photo_id_key = "dummy_photo_id_key" attempt.save()
self.navigate_to_video()
self.login(self.email, self.pw)
return CourseMode.objects.get_or_create( course_id=self.course.id, mode_display_name=mode_name, mode_slug=mode_slug, min_price=min_price, suggested_prices=suggested_prices, currency=currency, _expiration_datetime=expiration_datetime, )
rem_vers = kwargs.pop('remove_version', True) rem_branch = kwargs.pop('remove_branch', True)
self.child_module = self._get_module(course.id, child_descriptor, child_descriptor.location)
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
'ENABLE_SPECIAL_EXAMS': False,
self.get_data_specs(model)[0].validate(data) return None
reraise_as(ImportError("Could not import %s; ImportError was %s" % (modulename, str_e)))
e._element.send_keys(Keys.ENTER)
return self._create_progress_entry(student, task_state=SUCCESS)
self.fake_payment_page.submit_payment()
return self.backend_name == social_auth.provider
return running( name, restart=restart, update=update, user=user, conf_file=conf_file, bin_env=bin_env )
course_policy_dir_name = courselike.url_name
delete_thread(request, thread_id) return Response(status=204)
'course_action_state',
return True
self.q(css='div.problem button.save').click() self.wait_for_ajax()
self.assertEqual(item.name, old_name) item.change_name(new_name) self.assertFalse(item.in_editable_form()) self.assertEqual(item.name, expected_name)
resp = self.client.get(self.url, HTTP_ACCEPT='application/x-tgz') self._verify_export_succeeded(resp)
try: category = json_data['location']['category'] class_ = self.load_block_type(category)
standard_scaler = StandardScaler() Xtr_s = standard_scaler.fit_transform(X_train) Xte_s = standard_scaler.transform(X_test)
if local_loglevel not in LOG_LEVELS: local_loglevel = 'INFO'
try: import memcache HAS_MEMCACHE = True except ImportError: HAS_MEMCACHE = False
config.toggle() self.assertFalse(config.details_warning_icon_is_present) self.assertFalse(config.details_message_is_present)
with self.assertRaises(AssertionError): self.kvs.get(self.other_key_factory(self.existing_field_name))
django_settings.FIELDS_STORED_IN_SESSION = _FIELDS_STORED_IN_SESSION
iface_data['inet']['ethtool_keys'] = sorted(ethtool)
else: if self.exprs: raise maxException else: raise ParseException(instring, loc, "no defined alternatives to match", self)
path = os.path.normpath(path)
Xt = np.array(X).T
self.go_to_tab_and_assert_problem(1, self.problem1_name)
self._auto_auth(self.USERNAME, self.EMAIL, False) self.dashboard.visit()
test1 = value 1
if not show_disabled and not schedule[job]['enabled']: del schedule[job] continue
import Tkinter as Tk
rerun_course_data = {'source_course_key': unicode(source_course_key)} if not destination_course_data: destination_course_data = self.destination_course_data rerun_course_data.update(destination_course_data) destination_course_key = _get_course_id(self.store, destination_course_data)
self_paced_course, self_paced_section = self.setup_course(**course_options) beta_tester = BetaTesterFactory(course_key=self_paced_course.id)
print(grid_search.grid_scores_)
m_log_alphas = -np.log10(model.alphas_)
import yaml import salt.ext.six as six
dropout_input_mask_value = 0.
iterator = SequentialSubsetIterator(10, 3, 3) for i in range(3): iterator.next()
from __future__ import absolute_import
self.configure_google_provider(enabled=True) self.configure_facebook_provider(enabled=True)
return def_id.block_type
label_to_fold = np.zeros(len(unique_labels))
microsite.set_by_domain(self.microsite_subdomain) self.assertTrue(microsite.has_override_value('platform_name'))
EXPORTED_ASSET_FILENAME = 'assets.xml'
ssh_args.extend([ '-oPasswordAuthentication=no', '-oChallengeResponseAuthentication=no', '-oPubkeyAuthentication=yes', '-oIdentitiesOnly=yes', '-oKbdInteractiveAuthentication=no', '-oIdentityFile={0}'.format(kwargs['key_filename']) ])
callback = self.get_params['callback']
return { 'Content-type': 'application/json', 'Accept': 'application/json', 'X-CSRFToken': self.session_cookies.get('csrftoken', '') }
return self.get_text('.message-status.error')
self.key = key if not isinstance(delta, integer_types): raise SaltInvocationError('Delta value must be an integer') return key
ssh_gateway_config['ssh_gateway_port'] = config.get_cloud_config_value( 'ssh_gateway_port', vm_, __opts__, default=None, search_global=False )
salt '*' vsphere.vsan_disable my.esxi.host root bad-password
graders = { 'points': self.grade_via_points, 'false': self.grade_without_partial_credit }
reg = RidgeClassifierCV(class_weight={1: 0.001}, alphas=[.01, .1, 1, 10]) reg.fit(X, y)
some_sample_ids = (2286, 3274, 14042) for sample_id in some_sample_ids: idx1 = s1.tolist().index(sample_id) idx2 = s2.tolist().index(sample_id)
data = JUNK_FOOD_DOCS + NOTJUNK_FOOD_DOCS
module, klass = settings.BADGING_BACKEND.rsplit('.', 1) module = import_module(module) return getattr(module, klass)()
([], 'honor'),
changed = [] for target in pkg_params:
elif self._is_correct_lti_request(): params = {k: v for k, v in self.post_dict.items() if k != 'oauth_signature'}
if old == '*': return True
return self.q(css=self._bounded_selector('.remove-admin-role')).text[0]
for mode in ('audit', 'honor', 'verified'): CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
solver = 'svd'
import yaml
return self.q(css='.leave-team-link').present
apt_pkg.init_system()
pillar.client.get_state = MagicMock( return_value={ 'dest': '/path/to/pillar/files/foo.sls', 'source': 'salt://foo.sls' } )
can_skip = False if is_entrance_exams_enabled(): try: record = EntranceExamConfiguration.objects.get(user=user, course_id=course_key) can_skip = record.skip_entrance_exam except EntranceExamConfiguration.DoesNotExist: can_skip = False return can_skip
X = dataset.get_design_matrix() m = X.shape[0] assert X.shape[1] == self.nvis
import os import re import logging from salt.ext.six.moves import zip import salt.ext.six as six
CELERYD_PREFETCH_MULTIPLIER = 1
_config_filename_ = 'minion'
super(TestGetCourseChapters, self).setUp() self.course_key = self.course.location.course_key
from salt.modules import influx
html_theme_options = {'oldversion': False, 'collapsiblesidebar': True, 'google_analytics': True, 'surveybanner': False, 'sprintbanner': True}
transactions = self._latest_history()['transactions'] self.assertItemsEqual(transactions, expected_transactions)
model_ransac = linear_model.RANSACRegressor(linear_model.LinearRegression()) model_ransac.fit(X, y) inlier_mask = model_ransac.inlier_mask_ outlier_mask = np.logical_not(inlier_mask)
tgt = ipaddress.ip_address(tgt)
LOGGING_LOGGER_CLASS = logging.getLoggerClass()
with remove_ccx(location) as (location, restore): return restore( self._modulestore.delete_item(location, user_id, **kwargs) )
all_y_hat = Parallel(n_jobs=n_jobs, verbose=self.verbose, backend="threading")( delayed(parallel_helper)(e, 'predict', X, check_input=False) for e in self.estimators_)
y_type = y_type.pop()
'dark_lang.middleware.DarkLangMiddleware',
ret = show_instance(name=vm_['name'], call='action')
if 0 not in classes_k and y_nnz[k] < y.shape[0]: classes_k = np.insert(classes_k, 0, 0) class_prior_k = np.insert(class_prior_k, 0, zeros_samp_weight_sum)
__virtualname__ = 'jail'
clf = GradientBoostingClassifier(n_estimators=10, random_state=1) clf.fit(X, y)
super(DjangoBackend, self).__init__(**options) self.name = name
with salt.utils.fopen(self.path, 'w') as fic: fic.write(content) fic.flush()
if __Location__ != '': return __Location__
course2 = CourseFactory.create() CourseModeFactory.create( course_id=course2.id, mode_slug="verified", expiration_datetime=self.PAST ) CourseEnrollmentFactory( course_id=course2.id, user=self.user, mode="verified" )
X_mb = X[:10] X_mb_csr = X_csr[:10] x_mb_squared_norms = x_squared_norms[:10] x_mb_squared_norms_csr = x_squared_norms_csr[:10]
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
from salt.modules import bower from salt.exceptions import CommandExecutionError
__virtualname__ = 'pam'
listen_for_course_publish(self, self.course.id)
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
x_squared_norms_from_csr = row_norms(X_csr, squared=True) labels_csr, inertia_csr = _labels_inertia( X_csr, x_squared_norms_from_csr, noisy_centers) assert_array_almost_equal(inertia_csr, inertia_gold) assert_array_equal(labels_csr, labels_gold)
self.groups = [] for group_num in range(1, num_groups + 1): self.groups.append(Group(group_num, 'Group ' + unicode(group_num)))
from __future__ import absolute_import
a = "this is \xe0 test" expected = 'this is a test' assert_equal(strip_accents_unicode(a), expected)
if not has_files: input_element = etree.SubElement(response_element, "textbox") input_element.set("mode", "python")
UserFactory.create(email=self.new_email) self.assertEqual(self.do_email_validation(self.new_email), 'An account with this e-mail already exists.')
return self.browser.execute_script("return $('{}').is(':focus')".format(selector))
shim.remove_shim_context(event)
out_size = get_encoded_size(img_h, img_w, rings) output = numpy.zeros((batch_size, out_size * chans))
assert max(pd.max(), hd.max()) < .17
STATICFILES_STORAGE = 'pipeline.storage.PipelineCachedStorage'
x = np.arange(3) assert_array_equal(x[:, np.newaxis], cartesian((x,)))
addr_str = str(address) self._ip = self._ip_int_from_string(addr_str)
type_in_codemirror(self, 0, content)
XBlockDisableConfig.objects.create( disabled_create_blocks='annotatable', enabled=True ) self.assertEqual(XBlockDisableConfig.disabled_create_block_types(), ['annotatable', 'poll', 'survey'])
if 'children' in draft_block.fields: return any( [has_changes_subtree(child_block_id) for child_block_id in draft_block.fields['children']] )
import integration
import jinja2 import yaml import msgpack import salt.ext.six as six import tornado
if value is None: return Response(status=status.HTTP_404_NOT_FOUND)
receipt_id = self.receipt_id if override_receipt_id is None else override_receipt_id
valid_get_dict = MultiDict({'input_1[]': 'test'}) result = CapaModule.make_dict_of_responses(valid_get_dict) self.assertEqual(result['1'], ['test'])
top_level_export_dir = 'exported_source_course' export_course_to_xml( modulestore, contentstore, source_course_key, export_dir, top_level_export_dir, ) import_course_from_xml( modulestore, 'test_user', export_dir, source_dirs=[top_level_export_dir], static_content_store=contentstore, target_id=source_course_key, create_if_not_present=True, raise_on_failure=True, )
return len(self.aes) + 1
log = logging.getLogger(__name__)
return self.lti_consumer.consumer_key == client_key
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch ensure_in_syspath('../../')
from __future__ import absolute_import
from salt.utils.vt_helper import SSHConnection from salt.utils.vt import TerminalException
do_init = not(self.warm_start and hasattr(self, 'converged_')) n_init = self.n_init if do_init else 1
self._mixin_after_parsed_funcs.append(self.__merge_config_with_cli)
for char in pipeline.make_random_password(length=100000): self.assertIn(char, pipeline._PASSWORD_CHARSET)
return SPF(sections[1][9:], 'SPF', nameserver)
if isinstance(authored_data, LmsFieldData):
if not found_domain: new_contents.insert(0, 'domain {0}\n' . format(domainname))
self.cohort_default_student_username = "cohort_default_student" self.cohort_default_student_email = "cohort_default_student@example.com" StudioAutoAuthPage( self.browser, username=self.cohort_default_student_username, email=self.cohort_default_student_email, no_login=True ).visit()
if not start(name, vmid, call='action'): log.error('Node {0} ({1}) failed to start!'.format(name, vmid)) raise SaltCloudExecutionFailure
result = jboss7.bindings_exist(name='bindings', jboss_config={}, bindings={'env': 'DEV2'})
allow_multiple = False
search_engine = cls.engine() serialized_course_team = CourseTeamIndexer(course_team).data() search_engine.index(cls.DOCUMENT_TYPE_NAME, [serialized_course_team])
raise ValueError("strftime format ends with raw %")
self.send_response(500, 'Bad Request: does not contain API key') self.send_header('Content-type', 'text/plain') self.end_headers() return False
cv_iter = list(cv_iter) scorer = check_scoring(estimator, scoring=scoring)
plot_gallery = True
return (network, name)
import salt.utils import salt.modules.cmdmod import salt.utils.decorators as decorators from salt.utils.odict import OrderedDict
wtf_numpy = np.zeros((n_classes,)) for i in xrange(n_classes): wtf_numpy[i] = probs[i] probs = wtf_numpy
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
LOGGING_STORE_HANDLER = None break
gen_hyper_keys(minion_id)
X = self._validate_X_predict(X)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
avz = config.get_cloud_config_value( 'availability_zone', vm_, __opts__, default=None, search_global=False ) if avz is not None: kwargs['ex_availability_zone'] = avz
os.chdir(self.repo) subprocess.check_call(['git', 'init', '--quiet', self.repo])
regr_1 = DecisionTreeRegressor(max_depth=2) regr_2 = DecisionTreeRegressor(max_depth=5) regr_1.fit(X, y) regr_2.fit(X, y)
mean = X.mean(axis=0) std = X.std(axis=0) X = (X - mean) / std
if isinstance(authored_data, CmsFieldData):
with open(file_full_path, 'r') as input_file: file_contents = input_file.read() return file_contents.decode(encoding='utf-8')
log = logging.getLogger(__name__)
top_level_export_dir = 'exported_source_course_with_asides' export_course_to_xml( self.store, contentstore, dest_course_key, self.export_dir, top_level_export_dir, )
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
if not isinstance(config, dict): return False, ('Configuration for ps beacon must be a dictionary.') return True, 'Valid beacon configuration'
from __future__ import absolute_import
def squared_dloss(p, y): return p - y
import logging import json
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
self.assertEqual( other_cmap.get_overall_message(), self.cmap.get_overall_message() )
train = yaml_parse.load(yaml_file) train.main_loop()
for node in range(len(children_map)): self.assertIn(node, block_structure) self.assertNotIn(len(children_map) + 1, block_structure)
import integration from salt.config import cloud_providers_config
assert_raises(ValueError, GaussianNB().partial_fit, X, y, classes=[0, 1])
inheritable = InheritanceMixin.fields.keys() if name in inheritable: for ancestor in _lineage(block): if self.get_override(ancestor, name) is not NOTSET: return False
import salt.utils import salt.utils.timed_subprocess import salt.grains.extra from salt.exceptions import CommandExecutionError, SaltInvocationError,\ TimedProcTimeoutError
self.loaded = False
iris = datasets.load_iris() y_true, y_pred, _ = make_prediction(dataset=iris, binary=False)
'openedx.core.djangoapps.safe_sessions.middleware.SafeSessionMiddleware',
return self.assertCleanError(ipaddress.AddressValueError, details, *args)
course_keys = CourseOverview.get_all_course_keys() for expected_course_key in courses: self.assertIn(expected_course_key, course_keys)
if rbm.nvis < rbm.nhid: width = rbm.nvis type = 'vis' else: width = rbm.nhid type = 'hid'
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.assert_field_type(load_video_event, 'time', datetime.datetime) del load_video_event['time']
self.q(css='.dropdown').first.click()
return MatchFirst( [ parseElementClass(sym) for sym in symbols ] )
pipe.set_params(svc__C=0.1) assert_equal(clf.C, 0.1) repr(pipe)
clf = QuadraticDiscriminantAnalysis(store_covariances=True).fit(X6, y6) assert_true(hasattr(clf, 'covariances_'))
import os import re import sys import uuid import string
response = self.client.get(reverse('verify_student_create_order'), create_order_post_data) self.assertEqual(response.status_code, 405)
sampling_algorithm = dict((key, value) for key, value in sampling_algorithm.items() if key in selected_algorithm)
self.refresh_course()
import salt.utils
with self.assertNumQueries(0): embargo_api.check_course_access(unrestricted_course.id, user=self.user, ip_address='0.0.0.0')
self.assertEqual(self._mock_paver_sh.call_count, 1)
raise tornado.gen.Return(event['data']['return'])
n_nonzeros = int(opts.ratio_nonzeros * opts.n_features)
course = ItemFactory.create( parent_location=self.course.location, category="course", display_name="Test course", )
if on_saltstack: html_search_template = 'googlesearch.html' else: html_search_template = 'searchbox.html'
if isinstance(input_space, CompositeSpace): return any(find_sequence_space(component) for component in input_space.components) if isinstance(input_space, SequenceDataSpace): return True return False
ESTIMATE_PRECISION_ERROR_MESSAGE = ("The algorithm has diverged because of " "too few samples per components. Try to " "decrease the number of components, " "or increase reg_covar.")
for role_name in role_names: role = Role.objects.get(name=role_name, course_id=course_key) user.roles.add(role)
source_videos = list(get_videos_for_course(source_course.id)) target_videos = list(get_videos_for_course(destination_course_key)) self.assertEqual(1, len(source_videos)) self.assertEqual(source_videos, target_videos)
yield self.auth.authenticate() ret = yield _do_transfer()
self.client.login(username=self.staff_usr, password='test') resp = self.client.get(self.url_locked) self.assertEqual(resp.status_code, 200)
try: os.unlink(cache_path) except OSError: pass return file_hash(load, fnd)
Y /= Y.sum(axis=1)[:, np.newaxis] loss = -(T * np.log(Y)).sum(axis=1)
snapshot = json.loads(record.snapshot) self.assertEqual(snapshot['enroll_msg'], enroll_msg) self.assertEqual(snapshot['access_msg'], access_msg)
__virtualname__ = 'status'
return os.sep.join(__file__.split(os.sep)[:-5]) + '/data/uploads/' + filename
css = '.group-configuration-usage-unit' return self.find_css(css).text
wait_for( func=lambda _: css_visible(css_selector, index), timeout=timeout, timeout_msg="Timed out waiting for {} to be visible.".format(css_selector) )
std = Xc.std(axis=0) std[std == 0] = 1. fac = 1. / (n_samples - n_classes)
from __future__ import absolute_import import os import logging
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
with Timer() as iteration_over_groups_time_2: courses_list, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(len(courses_list), USER_COURSES_COUNT)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
'course_id': u'edX/toy/2012_Fall',
from defusedxml import defuse_stdlib defuse_stdlib() import lxml import lxml.etree from . import etree as safe_etree lxml.etree = safe_etree
'ENABLE_SPECIAL_EXAMS': False,
overlimit_block_keys = set() while len(selected) > max_count: overlimit_block_keys.add(selected.pop())
attributes['source'] = attributes.pop(type_)
attempt = SoftwareSecurePhotoVerification.objects.get(user=self.user) self.assertEqual(attempt.status, "submitted")
self._create_certificate(CourseMode.NO_ID_PROFESSIONAL_MODE) self._check_can_download_certificate_no_id()
self.q(css=self.search_bar_selector + ' input[type="text"]').fill(text)
def __init__(self, location, msg): super(SerializationError, self).__init__(msg) self.location = location
is_active = models.BooleanField(default=True)
'max_event_size': int,
if not s3_meta: continue
return self.get_block_keys()
return cls._categories[int(scalar_label)]
import salt.ext.six as six try: import zmq HAS_ZMQ = True except ImportError: HAS_ZMQ = False
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
super(CertificatePage, self).__init__(browser) self.user_id = user_id self.course_id = course_id
X, = data assert X.shape[0] == self.counter_idx + 1 assert X[0,0] == self.counter_idx prereq_counter = self.counter prereq_counter.set_value(prereq_counter.get_value() + 1)
current_network_settings = _parse_current_network_settings()
masters = [] for hostage in hostages: external = hostage['external'] internal = hostage['internal'] if external: external = parse_hostname(external, master_port) if not external:
while k < maxiter: fgrad, fhess_p = grad_hess(xk, *args)
state_client.set( username=admin.username, block_key=usage_key, state={'field_a': 'x', 'field_b': 'y'} )
from __future__ import absolute_import
p_shared = sharedX(zv[:, 0:rows:pool_rows, 0:cols:pool_cols, :]) h_shared = sharedX(zv) z_shared = sharedX(zv)
reviewing_service = models.CharField(blank=True, max_length=255)
#html_static_path.append('source/_static')
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
all_ = kwargs.pop('all', False)
try: return cls.objects.filter(course_id=course_id, user=user, course_enrollment=course_enrollment, status='purchased').latest('id') except PaidCourseRegistration.DoesNotExist: return None
self._setup_mode_and_enrollment(self.PAST, "verified")
SESSION_COOKIE_NAME = str(SESSION_COOKIE_NAME)
import salt.utils
always_cohort_inline_discussions = models.BooleanField(default=True)
selection = SelectKBest(k=1)
poudriere.__salt__ = {}
for i, A in enumerate(Z.transpose(0, 2, 1)):
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
self.q(css='.button-preview').first.click() self._switch_to_lms()
if len(set(ret).intersection(minions)) >= len(minions): return ret
from urllib2 import Request, build_opener
sparse_classifier = AdaBoostClassifier( base_estimator=CustomSVC(probability=True), random_state=1, algorithm="SAMME" ).fit(X_train_sparse, y_train)
self._studio_add_content(1)
fake_no_match_file_list = generate_fake_files(format='no_match_%Y%m%dT%H%M%S.tar.bz2', every=relativedelta(days=1))
pass
rm_tok = True
languages_data_folder = sys.argv[1] dataset = load_files(languages_data_folder)
time.sleep(0.025)
change_info = self.run_function('user.info', [CHANGE_USER]) if change_info: self.run_function('user.delete', [CHANGE_USER])
self.q(css='.wrapper-create-course .new-course-save').first.click() self.wait_for_ajax()
request.user = self.user
import integration import salt.utils
elif existing['code'] == 404:
if params is None: params = {} data = copy(self.defaults) data.update(params) return self.request_body_xml_template.format(**data)
import salt.utils from salt.exceptions import SaltRenderError
from salt.ext.six import string_types
course_file = StringIO(xml_data.encode('ascii', 'ignore')) xml_obj = etree.parse(course_file, parser=edx_xml_parser).getroot()
return bool(STUDIO_VIEW_CONTENT & get_user_permissions(user, course_key))
gecos_field = data.pw_gecos.split(',', 3) while len(gecos_field) < 4: gecos_field.append('')
username_label = _(u"Public username")
world.wait_for(lambda _driver: len(world.browser.find_by_css('div.ui-loading.is-hidden')) > 0)
module.new_lcp.assert_called_once_with(None)
if __opts__['test']: ret['comment'] = 'SELinux mode is set to be changed to {0}'.format( tmode) ret['result'] = None return ret
all_answer_ids = problem.get_answer_ids() all_answers = dict((answer_id, real_answers.get(answer_id, "")) for answer_id in all_answer_ids)
resource = None for field in identifier_fields: if field in data: resource = get_resource(resource_name, data[field], identifier_fields, profile, subdomain, api_key) if resource is not None: break
usage_key = self._map_revision_to_branch(usage_key) return super(DraftVersioningModuleStore, self).get_block_original_usage(usage_key)
store = contentstore() assets, __ = store.get_all_content_for_course(location.course_key) for asset in assets: asset_location = asset['asset_key'] del_cached_content(asset_location) store.delete(asset_location)
self.assertDeserializeEqual('10:20:30', '"10:20:30"')
SECRET_KEY = "very_secret_bok_choy_key"
from __future__ import absolute_import
assert isinstance(course_key, CourseKey) store = self._get_modulestore_for_courselike(course_key) return store.make_course_usage_key(course_key)
from __future__ import absolute_import
self.xmin = xlim[0] self.xmax = xlim[1] self.delta_x = (self.xmax-self.xmin)/float(self.cols-1)
self._create_cert(self.courses[0].id, self.user, CertificateStatuses.error, mode)
self.assertTrue(CourseEnrollment.is_enrolled(self.global_staff, self.course.id))
from __future__ import unicode_literals
v = TfidfVectorizer(binary=True, use_idf=False, norm=None) assert_true(v.binary)
return next((template for template in templates if template.get('display_name') == display_name), None)
__context__['cmd.run_chroot.func'] = __salt__['cmd.run'] ret = __salt__['cmd.run_chroot'](rootfs, cmd, stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, ignore_retcode=ignore_retcode)
instance._original_run = instance.run instance.run = instance._run return instance
MESSAGE = None def __init__(self, message=None): if message is None: message = self.message super(GitImportError, self).__init__(message)
raise NotImplementedError
self.staff = StaffFactory.create(course_key=self.course.id)
from __future__ import absolute_import import re import string import random
w = clf.coef_[0] a = -w[0] / w[1]
return '<p class="error_msg">EXCEPTION!</p>'
if pkg_type == 'repository': pkgstr = '{0}={1}'.format(pkgname, version_num) else: pkgstr = pkgpath
decision_only = OneVsRestClassifier(svm.SVR()).fit(X_train, Y_train) assert_raises(AttributeError, decision_only.predict_proba, X_test)
parents = block_structure.get_parents(block_key) min_all_parents_start_date = min( cls.get_merged_start_date(block_structure, parent_key) for parent_key in parents ) if parents else None
config.set_options(ignore_setup_xxx_py=True, assume_default_configuration=True, delegate_options_to_subpackages=True, quiet=True)
with self.assertNumQueries(0): self.assertRaises(KeyError, self.kvs.get, user_state_key('not_a_field'))
fast_model.fit(X_train, y_train, sample_weight=weights)
return None
if i == 9: return True else: return False
from __future__ import absolute_import
_view_name = "profile_image_remove" _replacement_method = 'openedx.core.djangoapps.profile_images.views.ProfileImageView.delete'
from __future__ import unicode_literals
import yaml import salt.ext.six as six
ancestors = urlpath.cached_ancestors
from __future__ import absolute_import import logging import time import json from boto.ec2.blockdevicemapping import BlockDeviceMapping, BlockDeviceType
if not cls.is_restricted_course(course_key): return default_path
req_factory_method = getattr(self.request_factory, method.lower()) request = req_factory_method('/dummy-url') request.user = self.user
return cache_and_return(None)
import difflib import salt.utils import salt.utils.network import salt.loader
google_provider = self.configure_google_provider(enabled=True) linkedin_provider = self.configure_linkedin_provider(enabled=True) self.assertEqual(len(provider.Registry.enabled()), 2)
xgrid, ygrid = construct_grids(data)
VerificationCheckpoint.objects.create( course_id=self.course.id, checkpoint_location=self.checkpoint_midterm, )
non_staff_client, _ = self.create_non_staff_authed_user_client() response = non_staff_client.get(index_url, {}, HTTP_ACCEPT='application/json') self.assertEqual(response.status_code, 403)
selector = self.get_element_selector(CSS_CLASS_NAMES['poster']) return self.q(css=selector).visible
raise NotImplementedError(str(self.__class__) + " does not implement " "initialize_parameters")
assert_raises(ValueError, plot_partial_dependence, clf, X, [-1])
return ret
return unicode(CCXLocator.from_course_locator(obj.course.id, obj.id))
assert len(self.hidden_layers) > 0
from __future__ import absolute_import from __future__ import print_function
return has_access(requesting_user, CourseStaffRole.ROLE, course_key)
self.assertFalse(_can_download_report(self.user))
self.assertIn('html', result) self.assertEqual(result['html'], "<div>Test HTML</div>")
from nose.tools import assert_equal from nose.tools import assert_not_equal from nose.tools import assert_true from nose.tools import assert_false from nose.tools import assert_raises from nose.tools import raises from nose import SkipTest from nose import with_setup
rng = np.random.RandomState(0) X = rng.uniform(size=(10, 3))
#html_use_smartypants = True
if enrollment.is_active and enrollment.created > time_delta
try: user = User.objects.get(id=user_id) except ObjectDoesNotExist: return None
from __future__ import unicode_literals
self.assertEquals(22, self.response.content.count('grade_F'))
return (name, ext_network, admin_state_up)
CourseRerunState.objects.failed(course_key=destination_course_key) logging.exception(u'Course Rerun Error') return "duplicate course"
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath ensure_in_syspath('../../')
if os.path.exists(venv_path): shutil.rmtree(venv_path) if os.path.exists(requirements_file_path): os.unlink(requirements_file_path) raise
for browser_lang in lang_headers: if browser_lang in system_released_languages: if request.session.get(LANGUAGE_SESSION_KEY, None) is None: request.session[LANGUAGE_SESSION_KEY] = unicode(browser_lang) break
child_to_move_location = self.problem_x1a_1 new_parent_location = self.vertical_y1a old_parent_location = self.vertical_x1a
mock_response = mock.Mock() mock_response.status_code = 500 mock_post.return_value = mock_response with self.assertRaises(ccxconapi.CCXConnServerError): ccxconapi.course_info_to_ccxcon(self.course_key)
certificate_id = content.pop("id") return certificate_id
for choice in choices_list: choicegroup.remove(choice)
FEATURES['ENABLE_DISCUSSION_SERVICE'] = False
credit_state = self.service.get_credit_state(self.user.id, self.course.id) self.assertNotIn('course_name', credit_state)
est = DBSCAN().fit(X, sample_weight=sample_weight) core4 = est.core_sample_indices_ label4 = est.labels_ assert_array_equal(core1, core4) assert_array_equal(label1, label4)
imports = None
__virtualname__ = 'user'
if not choice.get('id'): choice.set("id", chr(ord("A") + index))
import salt.defaults.exitcodes from salt.exceptions import SaltException
from __future__ import absolute_import
username_or_email = row.get('email') or row.get('username') cohort_name = row.get('cohort') or '' task_progress.attempted += 1
channels=3
f = function([X, y], [gradients[W].sum(), clipped_gradients[W].sum()], allow_input_downcast=True)
clf = self.factory().fit(X2, Y2, intercept_init=np.zeros((3,)))
lines.append(line) continue
sampling_algorithm["custom-tracking-selection"] = \ lambda n_population, n_samples, random_state=None: \ sample_without_replacement(n_population, n_samples, method="tracking_selection", random_state=random_state)
message = self.textbook_page.get_element_text('.wrapper-content .no-textbook-content') self.assertIn("You haven't added any textbooks", message)
from __future__ import absolute_import import re
key = signature.get_shared_secret_key("asu") self.assertIs(key, None)
import salt.minion import salt.utils import salt.utils.network import integration from salt import config as sconfig from salt.exceptions import SaltCloudConfigError
exclude = ('dashboard_tracking_code',)
current_locks = list_holds(full=_yum() == 'yum')
y_true = np.ones((1, n_labels)) assert_equal(lrap_score(y_true, y_score), 1.) assert_equal(lrap_score(y_true, y_score_ties), 1.)
indexed_count = self.reindex_course(store) self.assertFalse(indexed_count)
raise NotImplementedError
try:
self.assertEqual(len(mail.outbox), 0)
SOCIAL_MEDIA_FOOTER_URLS = ENV_TOKENS.get('SOCIAL_MEDIA_FOOTER_URLS', SOCIAL_MEDIA_FOOTER_URLS)
centers[center_idx] += np.sum(X[center_mask], axis=0)
if library: return component_templates
return self.client.patch(url, data=kwargs.get('data', None))
import salt.utils from salt.exceptions import CommandExecutionError, MinionError import salt.ext.six as six from salt.ext.six.moves import zip
"weighted_f0.5_score", "weighted_f1_score", "weighted_f2_score", "weighted_precision_score", "weighted_recall_score",
objects = models.Manager()
return V[:n_components, :].T, s[:n_components], U[:, :n_components].T
msg_format = _("Message {action} for {succeeded} of {attempted} recipients")
self._smoothed_batch_duration = 0
return False
self.assertFalse(linode._validate_name('foo;bar'))
import salt.utils import salt.utils.validate.net from salt.ext.six.moves import range from salt.exceptions import CommandExecutionError
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
K = self._centerer.fit_transform(K)
log = logging.getLogger(__name__)
return get_course_topics(self.request, self.course.id)
indexed_count = self.reindex_course(store) self.assertEqual(indexed_count, 7)
email.to_option = next( ( t_type for t_type in ( target.target_type for target in email.targets.all() ) if t_type in EMAIL_TARGETS ), SEND_TO_MYSELF ) email.save()
'ENABLE_COURSE_DISCOVERY': False,
return abs(dt1 - dt2) < allowed_delta
JINJA = jinja2.Environment( loader=jinja2.FileSystemLoader( os.path.join(salt.utils.templates.TEMPLATE_DIRNAME, 'rh_ip') ) )
if self.is_legacy_event: self._set_legacy_event_type() self.process_legacy_fields() self.process_event() self.dump_payload()
import salt.ext.six as six
tfp.add(base, arcname=os.path.join('py{0}'.format(py_ver), base)) continue
raise NotImplementedError()
from __future__ import absolute_import
current_bindings = list_bindings(site)
lib_key_pacific = self._create_library(org="PacificX", library="libP") lib_key_atlantic = self._create_library(org="AtlanticX", library="libA")
_listen_for_course_publish('store', self.course.id) self.assertEqual(VerificationDeadline.deadline_for_course(self.course.id), self.course.end)
return xblock._edit_info.get('published_by')
self.blocks = [XBlockFixtureDesc('html', str(i)) for i in xrange(1, 41)] library_fixture.add_children(*self.blocks)
from __future__ import absolute_import
from __future__ import absolute_import
errstring = "Invalid course_key: 'foo/TestX/TS01/2015_Q7'." with self.assertRaisesRegexp(CommandError, errstring): call_command('delete_course', 'foo/TestX/TS01/2015_Q7')
response = client.post(self.path, data=json.dumps(data), content_type=JSON, HTTP_X_CSRFTOKEN=csrf_token) self.assertEqual(response.status_code, 201)
return self.get_selector('#disabled-btn-start-generating-certificates')
X = T.matrix() Y = T.nnet.sigmoid(X) Z = arg_of_sigmoid(Y) assert X is Z
self.courseware_page.click_previous_button_on_top() self.assert_navigation_state('Test Section 1', 'Test Subsection 1,2', 0, next_enabled=True, prev_enabled=True)
trace = traceback.format_exc() self.assertEqual(trace, '')
from __future__ import absolute_import, generators, with_statement import time import logging import salt import os import os.path
rows_broadcastable = False cols_broadcastable = False
continue
if self._is_field_visible("terms_of_service"): terms_text = _(u"Honor Code")
CourseModeFactory.create( course_id=self.course.id, mode_slug='professional', mode_display_name='Professional Education', )
if not hasattr(self, 'n_samples_seen_'): self.n_samples_seen_ = 0 self.mean_ = .0 self.var_ = .0
self.assertNotContains(resp, 'Explore free courses from')
with self.assertRaises(PageNotFoundError): self.get_comment_list(thread, endorsed=True, page=2, page_size=10)
if not set_permissions(username, permissions, uid): log.warning('unable to set user permissions') delete_user(username, uid) return False
self._find_within(".response_{} .discussion-response .wmd-input".format(response_id)).fill(new_body)
_moved_attributes = []
response = self._generate(course_key=self.EXISTED_COURSE_KEY_2) self.assertEqual(response.status_code, 400)
from __future__ import absolute_import
result.update(_sysfs_parse(_bcpath(dev), base_attr, stats, config, internals)) result.update(_sysfs_parse(_fspath(), base_attr, stats, config, internals))
return _get_array_element('category', label, ('animal', 'human', 'airplane', 'truck', 'car', 'blank'))
if step_score: self.scores_.append(step_score(estimator, features)) support_[features[ranks][:threshold]] = False ranking_[np.logical_not(support_)] += 1
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
cls.create_image(prefix, (1, 1), 'red', 'special/{}_unlock.png')
monitor = lm.LiveMonitor() monitor.update_channels(['train_objective'], start=0, end=2) assert(len(monitor.channels['train_objective'].val_record) == 2)
previous_offset = None
generator = np.random.RandomState(0) mat = generator.rand(100, 100) scaled = _log_normalize(mat) + 1 _do_bistochastic_test(scaled)
status = certs_api.example_certificates_status(self.course.id) self.assertIsNot(status, None)
user = UserSerializer() class Meta(object): model = UserPreference depth = 1
if settings.FEATURES.get('USE_CUSTOM_THEME') and message_key in messages.CUSTOM_THEME_OVERRIDES: message_dict = messages.CUSTOM_THEME_OVERRIDES
def __init__(self, message, error_list): super(SearchIndexingError, self).__init__(message) self.error_list = error_list
top_level_logger.setLevel(logging.DEBUG if debug else logging.INFO)
about = branding_api.get_about_url() if about != branding_api.EMPTY_URL: data.update({'company_about_url': about})
from __future__ import unicode_literals
response = client2.post(self.url, creds) self._assert_response(response, success=True)
HAS_LIBS = True try:
#
return X.take(indices, axis=0)
result = __salt__['splunk.update_user']( email, profile, **kwargs )
if not cached_pkg: log.error('Unable to cache {0}'.format(installer)) ret[pkg_name] = {'unable to cache': installer} continue
self._auto_auth("STAFF_TESTER", "staff101@example.com", True)
world.disable_jquery_animations() world.css_click(component_button_css)
response = confirm_email_change(self.request, self.key) self.assertEquals( mock_render_to_response(expected_template, expected_context).content, response.content )
if not self or not other: return False
new_mtime_map = salt.fileserver.generate_mtime_map(__opts__['file_roots'])
if not self.dispatch_one_batch(self._original_iterator): self._iterating = False self._original_iterator = None
if name in answers: raise ValueError(u"Key {name} already exists in answers dict".format(name=name)) else: answers[name] = val
from salt.states import smtp
salt.utils.cloud.bootstrap(vm_, __opts__)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if issparse(example): example = example.toarray()
post_params['signature'] = "invalid"
import salt.utils import salt.utils.args from salt.exceptions import CommandNotFoundError, CommandExecutionError from salt.version import SaltStackVersion, __saltstack_version__ from salt.log import LOG_LEVELS
if is_feature_enabled(): BACKEND.enable_microsites_pre_startup(log)
return modulestore().make_course_key(org, course, run).make_usage_key(block_type, block_id)
import jinja2.exceptions
array = np.array(array, dtype=dtype, order=order, copy=copy)
check_is_fitted(self, ["classes_", "n_classes_"]) X = check_array(X) return self.base_estimator_.predict(X)
timeout_in_seconds = 60 * 60 * 24 self._cache.set( self._encode_root_cache_key(block_structure.root_block_usage_key), zp_data_to_cache, timeout=timeout_in_seconds, )
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor', grade=default_grade )
return self.q(css='h1.page-header')[0].text.split('\n')[-1]
user2 = UserFactory.create() module.descriptor.bind_for_student(module.system, user2.id)
for X in (X_dense, X_sparse_pruned, X_sparse_unpruned):
import salt.ext.six as six
import warnings import operator import sys import time
self._update_cutoff()
self.q(css=self._bounded_selector(".annotator-edit")).first.click() self.wait_for_editor_visibility() return self
X = check_array(X, accept_sparse='csr', dtype=np.float64) self._check_parameters() self._fit(X)
entry_needs_saving = True log.warning("background task (%s) revoked.", task_id) task_output = InstructorTask.create_output_for_revoked()
from salt.modules import win_firewall
grid_search = GridSearchCV(km, param_grid=dict(n_clusters=[2, 3, 4])) grid_search.fit(X) assert_equal(grid_search.best_params_["n_clusters"], 4)
shutil.rmtree(path) os.makedirs(path)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if not statefiles: statefiles = [sls_match]
pass
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
student_id = AutoAuthPage(self.browser, course_id=self.course_id).visit().get_user_id()
raise NotImplementedError
import os import re import sys import stat import errno import socket import logging
from salt.ext.six import string_types
output = StringIO.StringIO() import_log_handler = logging.StreamHandler(output) import_log_handler.setLevel(logging.DEBUG)
from numbers import Number
KT = np.zeros_like(KT) for i in range(len(T)): for j in clf.support_: KT[i, j] = np.dot(T[i], X[j])
clamped_val = clamp * initial
xWlist = [W.lmul(x,T).flatten(2) for W in self._Wlist] rval = tensor.join(1, *xWlist)
C = 1. fit_intercept = True tol = 1.0e-14
) DIRECT_MS_SETUPS_SHORT = ( 'mongo', #'split', ) MODULESTORE_SETUPS = DIRECT_MODULESTORE_SETUPS + MIXED_MODULESTORE_SETUPS MODULESTORE_SHORTNAMES = DIRECT_MS_SETUPS_SHORT + MIXED_MS_SETUPS_SHORT SHORT_NAME_MAP = dict(zip(MODULESTORE_SETUPS, MODULESTORE_SHORTNAMES))
self.user = user
request = Mock() request.user = self.instructor return request
self.inputs = {}
return self.q(css='div.instructor-dashboard-wrapper-2').present
if clear_load['fun'] != 'saltutil.find_job': log.warning( 'Authentication failure of type "eauth" occurred.' ) return ''
updates.update(dict(safe_zip(params, [param - learning_rate * lr_scalers.get(param, 1.) * grads[param] for param in params])))
def __get_pillar_files_from_s3_meta(s3_meta): return [k for k in s3_meta if 'Key' in k]
alpha1 = dual_coef[class2 - 1, sv_locs[class1]:sv_locs[class1 + 1]] alpha2 = dual_coef[class1, sv_locs[class2]:sv_locs[class2 + 1]]
return _("{profile_name} URL").format(profile_name=profile)
settings.DEFAULT_TEMPLATE_ENGINE['DIRS'] = [ path for path in settings.DEFAULT_TEMPLATE_ENGINE['DIRS'] if path != settings.MICROSITE_ROOT_DIR ]
title = None description = None _items = _sections = _order = None __flatten__ = False __allow_additional_items__ = False
return '{tabpanel_id} {css}'.format(tabpanel_id=getattr(self, 'tabpanel_id', ''), css=css)
return None
from __future__ import absolute_import
video_outline = self.api_response().data self.assertEqual(len(video_outline), 0)
os.remove(filename)
course.cohort_config = {'cohorted': True} self.assertTrue(course.is_cohorted)
access_key: 0e604a2c-aea6-4081-acb2-e1d1258ef95c token: be8fd96b-04eb-4d39-b6ba-a9edbcf17f12 driver: scaleway
'mine_interval': int,
import salt.config import salt.defaults.exitcodes import salt.output import salt.utils from salt.utils import parsers from salt.utils.verify import check_user, verify_env, verify_files, verify_log
self.tracker = DjangoTracker() tracker.register_tracker(self.tracker)
self.store.revert_to_published(vertical.location, self.user_id) self.assertFalse(self._has_changes(vertical.location))
if not callable(getattr(estimator, method)): raise AttributeError('{} not implemented in estimator' .format(method))
log_setup.setup_multiprocessing_logging()
__func_alias__ = { 'list_': 'list', }
resp = self.create_xblock(category='vertical', parent_usage_key=parent_usage_key) self.assertEqual(resp.status_code, 200) return self.response_usage_key(resp)
return self.masquerade and self.masquerade.role == 'student'
from salt.exceptions import CommandExecutionError
import copy import logging import json import os
selector = self.get_element_selector(VIDEO_BUTTONS['quality']) classes = self.q(css=selector).attrs('class')[0].split() return 'active' in classes
element = self.q(css='.setting-replace')[0] ActionChains(self.browser).move_to_element(element).click(element).perform()
with patch('xmodule.capa_module.CapaModule.closed') as mock_closed: mock_closed.return_value = True
match = re.search(__opts__['stateconf_end_marker'], sls_templ) if match: process_sls_data(sls_templ[:match.start()], extract=True)
return None
pass
MOBILE_STORE_URLS = { 'apple': '#', 'google': '#' }
assert key.user_id == self.user.id
try: import hjson as hjson HAS_LIBS = True except ImportError: HAS_LIBS = False
s = f.read(4) s_array = numpy.fromstring(s, dtype='int32') return s_array.item()
import salt.exceptions import salt.utils
option1=main1
opts['ext_pillar'] = [x for x in opts['ext_pillar'] if 's3' not in x]
tenant = __salt__['keystone.tenant_get'](name=name, profile=profile, **connection_args)
shifted_gaussian = np.random.randn(n_samples, 2) + np.array([20, 20])
return datetime.now(UTC()) > end_date if end_date is not None else False
return settings.STATIC_URL + relative_url
self.assertEqual(seed, module.seed)
return [FakeEmail.FakeTarget()]
cert_type=server
ms = MeanShift() assert_false(hasattr(ms, "cluster_centers_")) assert_false(hasattr(ms, "labels_"))
from __future__ import unicode_literals
from __future__ import absolute_import
self.assert_logged_in_cookie_redirect(actions.do_complete(
return self.filter_by(data, "course_id", course_id)
mode_display_name = models.CharField(max_length=255)
if existing['code'] == 200:
from salt.exceptions import ( #CommandExecutionError, SaltInvocationError ) from salt.utils import warn_until
self.assertEqual( self.run_function('shadow.get_login_failed_count', [NO_USER]), 'ERROR: User not found: {0}'.format(NO_USER))
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
dn_set = OrderedDict() dn_set.update(old) dn_set.update(new)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
org_filter_out_set = microsite.get_all_orgs()
log = logging.getLogger(__name__)
time_last_reset = user.date_joined
if not __execute_cmd('config -g cfgUserAdmin -o \ cfgUserAdminEnable -i {0} 1'.format(uid)): delete_user(username, uid) return False
first_checkpoint.add_verification_attempt(SoftwareSecurePhotoVerification.objects.create(user=self.user)) self.assertEqual(first_checkpoint.photo_verification.count(), 1)
pass
return CaselessPreservingLiteral(char)
return tensor.dot(self._hidden_activation(inputs), self.whf)
resp = json.loads(self.call_event('export_resources', {}).content)
cmap_light = ListedColormap(['#FFAAAA', '#AAFFAA', '#AAAAFF']) cmap_bold = ListedColormap(['#FF0000', '#00FF00', '#0000FF'])
for service, bitmask in sorted_types: if current_bitmask > 0: remaining_bitmask = current_bitmask - bitmask
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
new_conf.append(line)
assert_raise_message(ValueError, error_msg % ("fake", pipe), pipe.set_params, fake__estimator='nope')
query_time = query.get('duration', 0) / 1000
if lookup == 'in': stripped_value = [_strip_object(el) for el in value] else: stripped_value = _strip_object(value) return stripped_value
from __future__ import absolute_import import logging
os.killpg(os.getpgid(process.pid), signal.SIGINT) term_sent = True continue
n_queries = 5 queries = X[rng.randint(0, n_samples, n_queries)] distances, neighbors = lshf.radius_neighbors(queries, return_distance=True)
request_lowstate = { "client": "local", "tgt": "*", "fun": "test.fib", "arg": "10" }
return True
redirect_url = reverse( 'embargo_blocked_message', kwargs={ 'access_point': access_point, 'message_key': 'default' } ) yield redirect_url
enrollment.deactivate() self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assert_unenrollment_event_was_emitted(user, course_id)
self._assert_certs_in_queue(mock_queue, 1)
self.assert_correct_json_response(json_response)
doc = func.__doc__
__, __, course = self.load_test_import_course(target_id=course_id, module_store=module_store)
self.lc_block.source_library_id = unicode(self.library.location.library_key) result = self.lc_block.validate()
try: import M2Crypto HAS_M2 = True except ImportError: HAS_M2 = False
'e3b0b940318df9c14be59acb08e78af5', self._get_anonymous_id(SlashSeparatedCourseKey('MITx', '6.00x', '2012_Fall'), descriptor_class)
self.Xt[:self.n_eigen,:] = self.Ut
install_package(package,temp_filename,dataset_data_path) update_installed_list("i",package)
if pkginfo[version_num].get('use_scheduler', False):
exc_info_on_loglevel=logging.DEBUG
REQUIRE_DEBUG = DEBUG
self.assertFalse(self._has_changes(locations['grandparent'])) self.assertFalse(self._has_changes(locations['parent']))
self.assertEqual(params['signature'], self._signature(params))
time_step = 5 rval = np.zeros((time_step, batch_size), dtype=dtype) rval[:3, :1] = 1 rval[:4, 1:] = 1 return rval
if published_parents > 1: non_orphan_parents = self._get_non_orphan_parents(location, all_parents, revision) return cache_and_return(non_orphan_parents[0].replace(run=location.course_key.run))
self.assertEqual(response.status_code, 200)
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
for einput in self.BAD_DISPATCH_INPUTS: with self.assertRaisesRegexp(LTIError, "No valid user id found in endpoint URL"): self.xmodule.parse_lti_2_0_handler_suffix(einput)
ext_user = User.objects.get(email=self.ext_user.email) self.assertTrue(auth.user_has_role(ext_user, CourseInstructorRole(self.course.id)))
msg_format = _("Problem {action} for {succeeded} of {attempted} students")
return int(self.position.split(':')[1])
return self.q(css=ERROR_ITEM_NAME_SELECTOR).text
with warnings.catch_warnings(record=True): regressor_1 = Regressor() regressor_2 = Regressor() set_testing_parameters(regressor_1) set_testing_parameters(regressor_2) set_random_state(regressor_1) set_random_state(regressor_2)
self.assertRaises(SaltInvocationError, parallels.snapshot_id_to_name, name, '{8-4-4-4-12}')
for system in ['lms', 'cms']: sh(django_cmd(system, DEFAULT_SETTINGS, 'compilejsi18n'))
self.assertNotIn(REG_STR, resp.content)
url(r'^api/course_structure/', include('course_structure_api.urls', namespace='course_structure_api')),
rexp = re.compile('(?m)^ [*] ' r'([^ ].*)[\r\n].*\(([^\)]+)')
key = unichr(unicode_char)
self.make_course() url = self.make_url('pdf_book', book_index=0, chapter=1) response = self.client.get(url) self.assertEqual(response.status_code, 404)
if len(locs) != n: return False hit = np.zeros(n, bool) hit[locs] = True if not np.all(hit): return False return True
except KeyError: self.send_error(401) return
return add_enrollment(student_id, course_id, mode=mode, is_active=is_active)
from salt.modules import ilo
import yaml import salt.ext.six as six
return urljoin(self.internal_service_url, '/api/v{}/'.format(self.api_version_number))
state = dict(self.__dict__) state.pop('f_', None) return state
#pylint: disable=E0602
from __future__ import absolute_import from __future__ import print_function
import elementtree.cElementTree as ElementTree
import salt.utils
return CoursewareSearchIndexer.do_course_reindex(store, self.course.id)
return u"skipped_reverification.{}.{}".format(user_id, unicode(course_key))
ensemble = BaggingRegressor(base_estimator=DecisionTreeRegressor(), max_samples=1.0, bootstrap=False, random_state=rng).fit(X_train, y_train)
(['honor', 'verified', 'audit'], 'honor'),
return unicode(course_id) in cls._get_restricted_courses_from_cache()
from salttesting import TestCase, skipIf from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON )
ensemble.set_params(n_jobs=1) y1 = ensemble.predict_proba(X_test) ensemble.set_params(n_jobs=2) y2 = ensemble.predict_proba(X_test) assert_array_almost_equal(y1, y2)
for _ in xrange(0, max_iters): last_d = doc_topic_d
if result['retcode'] == 1: return None ret = result['stdout'].splitlines() if all_: return ret else: try: return ret[-1] except IndexError: return ''
self.current_view.close() self.current_view = self.MAPPING["recent"](self.browser)
self.reset_tracker() different_client = APIClient() different_client.login(username=different_user.username, password=TEST_PASSWORD) response = different_client.delete(self.url) self.check_response(response, 404)
labels = -np.ones(X.shape[0], dtype=np.intp)
self.assertEqual(self.loader._dict, {}) self.assertTrue(inspect.isfunction(self.loader['test.ping']))
log = logging.getLogger(__name__)
os.remove(filename)
return _can_enroll_courselike(user, courselike)
self.run_function('virtualenv.create', [self.venv_dir])
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
plt.scatter(embedding[0], embedding[1], s=100 * d ** 2, c=labels, cmap=plt.cm.spectral)
factory = RequestFactory() request = factory.get('ccx_coach_dashboard') request.user = MagicMock() return request
