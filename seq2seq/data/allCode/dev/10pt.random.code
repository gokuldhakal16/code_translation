result = self.panel4d.reindex(labels=['l1', 'l2']) assert_panel_equal(result['l2'], ref)
df.iloc[[0, 1], [0, 1]] = df.iloc[[0, 1], [0, 1]] assert_frame_equal(df, expected)
y = zca_dataset.mapback_for_viewer(zca_dataset.X) z = x/np.abs(x).max(axis=0) assert_allclose(z[start:stop], y, rtol=1e-2)
self._consolidate_inplace() return self.combine([b for b in self.blocks if b.is_numeric], copy)
return '1234'
class MockModelAdmin(object): def my_property(self): return "this if from property" my_property.short_description = 'property short description' test_from_property = property(my_property)
self.q(css='.dropdown-menu li a').nth(2).click()
ccx_ids_to_delete.append(get_override_for_ccx(ccx, block, 'due_id')) clear_ccx_field_info_from_ccx_map(ccx, block, 'due')
return {}
X, y = make_classification(n_classes=2, random_state=0)
from salt.modules import powerpath
modified_cohort_name = "renamed random cohort" default_cohort.name = modified_cohort_name default_cohort.save()
ogr_fields = self.layer.fields ogr_field_types = self.layer.field_types
local_addr = ''.join(x for x in local_addr if x not in '[]')
log.debug("configuration error in split test module: no such child") return []
return sys.modules[fullname]
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
input_dict = {'1_2_1': 'Michigan'} correct_map = problem.grade_answers(input_dict) self.assertEquals(correct_map.get_hint('1_2_1'), "")
if name in answers: raise ValueError(u"Key {name} already exists in answers dict".format(name=name)) else: answers[name] = val
environ.__grains__ = {} environ.__salt__ = {} environ.__context__ = {}
fig, axs = plot_partial_dependence(clf, boston.data, ['CRIM', 'ZN', ('CRIM', 'ZN')], grid_resolution=grid_resolution, feature_names=boston.feature_names)
vertical1.children.append(html.location) self.store.update_item(vertical1, self.user.id)
clone_spec = vim.vm.CloneSpec( template=template, location=reloc_spec, config=config_spec )
self.enroll(self.course, True) self.enroll(self.test_course, True)
self.assertIn("2013-SEPTEMBER-16", text)
import salt.utils
params[field] = "" assert_extra_field_error()
return dict( self.items() )
pass
if self.value == "": self.value = 'null'
lookup_params = [geom or 'POINT (0 0)', 0]
from __future__ import unicode_literals
continue
return False
self.verify_staff_debug_present(True)
log = logging.getLogger(__name__)
self.q(css='.label-username').first.click()
from salt.states import winrepo
return self.parent_instance
course_modules_json = json.dumps(valid_input.get('course_modules'))
self._assert_courses_not_in_overview(self.course_key_1, self.course_key_2) self.command.handle(all=True)
# dbar = dbarn epln = eplnn dlta = cs * dbar + sn * alpha gbar = sn * dbar - cs * alpha
from __future__ import unicode_literals
return mark_safe(_urlize(value, trim_url_limit=int(limit), nofollow=True, autoescape=autoescape))
self.vw.default_parts.add(self.sunroof)
if len(ndims) > 1: current_column = 0 max_ndim = sample.ndim self.objs, objs = [], self.objs for obj in objs:
resp = self.client.get(self._receipt_url) self.assertContains(resp, expected_text)
self.assertTrue(self.advanced_settings.is_validation_modal_present())
return self.form_kwargs.copy()
self.q(css="input.practice_exam").first.click()
import integration
return cfunc(com._ensure_float64(arg), window, minp, **kwargs)
_describe = __salt__['boto_iot.describe_topic_rule'](ruleName=ruleName, region=region, key=key, keyid=keyid, profile=profile)['rule']
binding_status = {'updated': False}
import salt.utils.event
self.run_function('assistive.install', [OSA_SCRIPT, True])
wclf = svm.SVC(kernel='linear', class_weight={1: 10}) wclf.fit(X, y)
if store.has_course(destination_course_key, ignore_case=True): raise DuplicateCourseError(source_course_key, destination_course_key)
self.assertIsNone(get_template_request_context())
self.assertEqual(errors[0].id, 'postgres.E001') self.assertIn('max_length', errors[0].msg)
self.store.publish(item_location, self.user_id) item = self.store.get_item(item_location) self.assertTrue(self.store.has_published_version(item)) _check_asides(item)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
tm.assert_dict_equal(offsets, read_pickle(pickle_path))
m = re.search(br'<a href="([^"]*)"[^>]* id="lookup_id_defendant0"', response.content)
num_purchases = 0 for item in purchases: num_purchases += 1 self.assertEqual(num_purchases, 2)
self.assertEqual(str(results[0].time), '2013-01-01 17:01:00+00:00')
course = CourseFactory.create(default_store=default_store) not_enrolled_user = UserFactory.create() self.request.user = AdminFactory.create()
self.column = column self.categorical = True
n_samples_per_fold = np.zeros(n_folds)
hasher.rounds = old_rounds
roles = get_role_ids(course_id) for role in roles: if user.id in roles[role]: return True return False
return key.block_scope_id
def test_rolling_cov(self): A = self.series B = A + randn(len(A))
html_theme_path = ['themes']
with TIMER.timer("insert_course_index", course_context): course_index['last_update'] = datetime.datetime.now(pytz.utc) self.course_index.insert(course_index)
while columns.count(name) > 0: name = '_' + str(duplicate_var_id) + name name = name[:min(len(name), 32)] duplicate_var_id += 1
if is_active and (enrollment_mode in CourseMode.VERIFIED_MODES + [CourseMode.NO_ID_PROFESSIONAL_MODE]): return redirect(reverse('dashboard'))
import logging import os import re
return u"Course '{}': Instructor Email {}Enabled".format(self.course_id.to_deprecated_string(), not_en)
GlobalStaff().add_users(self.user) self.assertTrue(GlobalStaff().has_user(self.user))
resolved_url = resolve_url(logout) self.assertEqual('/accounts/logout/', resolved_url)
__delitem__ = complain __delslice__ = complain __iadd__ = complain __imul__ = complain __setitem__ = complain __setslice__ = complain append = complain extend = complain insert = complain pop = complain remove = complain sort = complain reverse = complain
if old == '*': return True
self.page_num = page_num self.num_pages = num_pages
CourseEnrollmentFactory( is_active=False, mode=CourseMode.NO_ID_PROFESSIONAL_MODE, course_id=self.course.id, user=self.user )
self.assert_grade(problem, '2*x', 'correct') self.assert_grade(problem, '3*x', 'incorrect')
safe_exec("a = 1/2", g) self.assertEqual(g['a'], 0.5)
class Meta(ConfigurationModel.Meta): app_label = "shoppingcart"
'survey',
af, bf = self.intframe.align(other, join='inner', axis=1, method='pad') self.assert_index_equal(bf.columns, other.columns)
pass
except RateLimitException: return JsonResponse({ "success": False, "value": _('Too many failed login attempts. Try again later.'),
actual = self.get_exceldf(basename, 'Sheet1') tm.assert_frame_equal(actual, expected)
QUERY_INTERVAL = 1000
arr = Index([1, 2, 3, 4]) tm.assertIsInstance(arr, Int64Index)
parent = models.OneToOneField(Place, models.CASCADE, primary_key=True, parent_link=True) capacity = models.IntegerField()
text = f.widget.format_value(result) self.assertEqual(text, "01:30:00 PM 21/12/2010")
descriptor.runtime.export_fs = MemoryFS() node = etree.Element('unknown') descriptor.add_xml_to_node(node)
rng = np.random.RandomState(seed) X = rng.randn(10, 10) Xcsr = csr_matrix(X)
if hasattr(self, '_file'): self.close() del self.file
return '0{0}'.format(ret)
self.assertIn("What is the sum of 17 and 3?", problem_page.problem_text)
from __future__ import unicode_literals
xi_, yi, swi, idx = dataset._next_py() xi = sp.csr_matrix((xi_), shape=(1, X.shape[1]))
from __future__ import absolute_import
mock_threads.return_value = [], 1, 1
from salttesting.unit import skipIf from salttesting.case import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../..')
login = self.client.login(username='testclient', password='password') self.assertTrue(login, 'Could not log in')
freq = to_offset(freq)
for kernel in kernels: gpr = GaussianProcessRegressor(kernel=kernel).fit(X, y) assert_equal(gpr.log_marginal_likelihood(gpr.kernel_.theta), gpr.log_marginal_likelihood())
with connection.cursor() as cursor: return connection.introspection.get_indexes(cursor, table)
log.exception('Unable to gather submission metadata, it will not be included in the event.')
logger.info('computing mean') self.mean_ = numpy.asarray(X.mean(axis=0))[0, :]
self._configure_testshib_provider() super(TestShibIntegrationTest, self).test_login()
for exception_class in [StudentInputError, LoncapaProblemError, ResponseError]:
if lib.isscalar(mask): mask = np.zeros(arr.shape, dtype=bool)
return msg.strip()
if task.State == TASK_STATE_RUNNING: return 'Task already running'
from __future__ import absolute_import
from __future__ import unicode_literals
z = np.zeros((X.shape[0], self.n_components))
recorder.record_applied("migrations", "1_auto") loader.build_graph() self.assertEqual(num_nodes(), 4)
for b, sb in zip(blocks, self.blocks): b.mgr_locs = sb.mgr_locs
_ = lambda text: text
if dtype is not None and issubclass(dtype.type, np.integer): continue
total_cost += l1_act_cost
def long_range(start, end): while start < end: yield start start += 1
class CommonFeature(Article):
panel = self._add_entity_effects(panel) panel = self._add_categorical_dummies(panel, mapping) return panel
data = [[['foo', 'bar', 'baz']]] self.assertRaises(ValueError, Panel, data, dtype=float)
reverse_octets = str(self).split('.')[::-1] return '.'.join(reverse_octets) + '.in-addr.arpa'
if len(names) == 1: return ret[names[0]] return ret
from __future__ import absolute_import
viewer_is_visible = self.q(css=self._bounded_selector(self.VIEWER_SELECTOR)).visible editor_is_visible = self.q(css=self._bounded_selector(self.EDITOR_SELECTOR)).visible return viewer_is_visible or editor_is_visible
delete_comment(request, comment_id) return Response(status=204)
sample_weight = np.ones(n_samples, dtype=np.float64, order='C')
version_status[2] = master_version.string
rval = X.copy() for i in xrange(rval.shape[0]): rval[i, :] /= np.abs(rval[i, :]).max() + 1e-12 return rval
def _logcosh(x, fun_args=None):
#html_additional_pages = {}
coords = tuple
tm._skip_if_32bit() from decimal import Decimal
self.find_css('.action-primary').first.click() self.wait_for_ajax()
defaults = DEFAULT_MASTER_OPTS defaults.update(DEFAULT_SPM_OPTS)
self.assertEqual(response.status_code, 403)
self.assertFalse(mock_send.called)
X, y = mnist.data / 255., mnist.target X_train, X_test = X[:60000], X[60000:] y_train, y_test = y[:60000], y[60000:]
xs1 = ix[0] xs2 = f.xs(f.index[0]) assert_series_equal(xs1, xs2)
if key in obj._data.items: return None
cohorts_status = {}
self.event_collection.drop() self.start_time = datetime.now()
self.assertEqual(len(self.ts1), 30) self.assertEqual(len(self.ts2), 25)
frame.to_csv(path) df = DataFrame.from_csv(path, index_col=[0, 1], parse_dates=False)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if indexers is None: indexers = {} self.block = block self.indexers = indexers self.shape = shape
diff = set(kwargs) - set(compat_args)
self.assertEqual(reindexed_int.dtype, np.float_)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call
if requirements or pip_pkgs: before = set(__salt__['pip.freeze'](bin_env=name, user=user, use_vt=use_vt))
axes = self.input_space.axes assert len(axes) == 4
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, call, NO_MOCK, NO_MOCK_REASON, MagicMock
msg = "LinearSVC does not support sample_weight." assert_warns_message( UserWarning, msg, calibrated_clf.fit, X_train, y_train, sample_weight=sw_train) probs_with_sw = calibrated_clf.predict_proba(X_test)
return force_text(iri_to_uri(value))
def allow_migrate(self, db, app_label, **hints): return None
normalizer = (1.0 - pow(self.gamma, self.n_observations)) / \ (1.0 - self.gamma)
movie_reviews_data_folder = sys.argv[1] dataset = load_files(movie_reviews_data_folder, shuffle=False) print("n_samples: %d" % len(dataset.data))
language = request.session.get(LANGUAGE_SESSION_KEY)
previous_count = len(selected) block_keys = LibraryContentModule.make_selection(selected, library_children, max_count, mode) selected = block_keys['selected']
self.options.saltfile = os.path.abspath(self.options.saltfile)
'CERTIFICATES_HTML_VIEW': False,
self.assertEqual(self.func(None), [sessions.W011])
store.get_node('df2')._v_attrs.pandas_version = None self.assertRaises(Exception, store.select, 'df2')
ForestEstimator = FOREST_ESTIMATORS[name] est = ForestEstimator(max_depth=1, max_leaf_nodes=4, n_estimators=1, random_state=0).fit(X, y) assert_greater(est.estimators_[0].tree_.max_depth, 1)
pro = Book.objects.using( 'default').create(title="Pro Django", published=datetime.date(2008, 12, 16))
return utils.CursorDebugWrapper(cursor, self)
X_df = MockDataFrame(X) X_train, X_test = cval.train_test_split(X_df) assert_true(isinstance(X_train, MockDataFrame)) assert_true(isinstance(X_test, MockDataFrame))
from salt.modules import ps import salt.ext.six as six
return len(self._find_within(".discussion-response"))
return len(self.index)
response = self.client.get(reverse('admin:admin_views_referencedbyinline_changelist'), {TO_FIELD_VAR: 'name'}) self.assertEqual(response.status_code, 200)
config.toggle() config.edit() config.add_group() config.save()
parent_block.edit_info.source_version = None self.decache_block(usage_locator.course_key, new_id, parent_block_key)
log = logging.getLogger(__name__)
left = self.rng[:5] right = self.rng[5:10]
mask = new_labels[0] == -1 result = new_levels[0].take(new_labels[0]) if mask.any(): result = result.putmask(mask, np.nan)
new_structure = self.version_structure(course_key, structure, user_id)
if not os.path.exists(cyg_cache_dir): os.mkdir(cyg_cache_dir) elif os.path.exists(cyg_setup_path): os.remove(cyg_setup_path)
from __future__ import absolute_import, print_function import base64 import copy import getpass import json import logging import multiprocessing import subprocess import hashlib import tarfile import os import re import sys import time import yaml import uuid import tempfile import binascii import sys
if predicate: self.assertTrue(expression) else: self.assertFalse(expression)
jdict['__master_id__'] = master
set_urlconf(settings.ROOT_URLCONF)
vim-enhanced: pkg.purged: - version: 7.4.160-1.el7 - ignore_epoch: True
__virtualname__ = 'group'
from __future__ import absolute_import import logging
response = self._generate( course_key=self.EXISTED_COURSE_KEY_2, username=self.STUDENT_USERNAME ) self.assertEqual(response.status_code, 400)
import re import os
with patch.dict(local_cache.__opts__, {'keep_jobs': 0.00000001}): local_cache.clean_old_jobs()
centered_obs = observations - self.location_ mahalanobis_dist = np.sum( np.dot(centered_obs, precision) * centered_obs, 1)
from __future__ import absolute_import import os import pwd import shutil import re import tempfile
with tm.assert_produces_warning(FutureWarning): df.icol(1)
try: res_fast = fast_path(group)
value = self.to_python(value) self.validate(value, model_instance) self.run_validators(value) return value
go_to_section("data_download")
with self.assertRaises(TemplateSyntaxError): self.engine.render_to_string('autoescape-filtertag01', {'first': '<a>'})
for child in children_map[block_to_remove]: if pruned_parents_map[child]: continue for block in traverse_post_order(child, get_children=lambda block: pruned_children_map[block]): missing_blocks.append(block) pruned_children_map[block] = []
self.client.logout() response = self.client.get(reverse('admin:login')) self.assertContains(response, 'bodyclass_consistency_check ')
self.assertRaises(TypeError, RangeIndex, 'foo', 'bar', 'baz')
msg = _('Error in evaluating SchematicResponse. The error was: {error_msg}').format(error_msg=err) raise ResponseError(msg)
self._update_head(course_key, index_entry, asset_key.branch, new_structure['_id'])
alias, driver = profile_data.get('provider').split(':') provider_details = self.opts['providers'][alias][driver].copy() del provider_details['profiles']
arr = self.view(np.ndarray).copy() return arr
password: USE_KEYRING
return False
ttype = 'zeromq'
with tm.assertRaises(ValueError): o.sample(random_state='astring!')
assert_greater(np.abs(stable_var(A) - one_pass_var(A)).max(), tol)
response = self._change_password(email=self.NEW_EMAIL)
from __future__ import absolute_import import re import logging
return ipsecpolicy
X -= X.min()
is_summary = False _output_field = None
self.assertEqual(hasher.encode.call_count, 3)
uuid = request["parameters"]["request_uuid"] with self.assertNumQueries(3): api.update_credit_request_status(uuid, self.PROVIDER_ID, "approved")
string_lines = StringLines(file_string) for violation in self.violations: violation.prepare_results(self.full_path, string_lines) if line_comment_delim is not None: self._filter_commented_code(line_comment_delim)
def no_available_apps(self): raise Exception("Please define available_apps in TransactionTestCase " "and its subclasses.") TransactionTestCase.available_apps = property(no_available_apps) TestCase.available_apps = None
numtolerance_choices = {} binary_choices = {}
FOOTER_CACHE_TIMEOUT = 30 * 60
raise NotImplementedError( 'subclasses of Loader must provide a get_template_sources() method' )
partitions = self._get_partition_info() self.assertEqual(len(partitions), 1) self.assertEqual(partitions[0]["scheme"], "verification")
config = Config() config.InteractiveShell.autocall = False config.InteractiveShell.autoindent = False config.InteractiveShell.colors = 'NoColor'
many_days = datetime.timedelta(days=60)
with check_mongo_calls(import_reads, first_import_writes): import_course_from_xml( source_store, 'test_user', TEST_DATA_DIR, source_dirs=['manual-testing-complete'], static_content_store=source_content, target_id=source_course_key, create_if_not_present=True, raise_on_failure=True, )
self.assertQuerysetEqual(ObjectC.objects.exclude(childobjecta=self.oa), out_c)
self._create_certificate(CourseMode.NO_ID_PROFESSIONAL_MODE) self._check_can_download_certificate_no_id()
return self.q(css='p.card-description').map(lambda e: e.text).results
language_codes = self.translations() index = language_codes.index(old_lang_code) self.select_translation_language(new_lang_code, index) self.upload_asset(transcript_name, asset_type='transcript', index=index)
try: self._find_one(usage_key) return True except ItemNotFoundError: return False
pass
minions = set(minions)
test_score = heldout_score(clf, X_test, y_test)
if overwrite or not hasattr(cls, name): setattr(cls, name, f)
CELERYD_HIJACK_ROOT_LOGGER = False
return { 'user': user or self.user, 'usage_key': block.location, 'course_key': block.location.course_key, 'display_name': block.display_name, }
cols = self.frame.columns.copy() newFrame = self.frame.reindex_axis(cols, axis=1) assert_frame_equal(newFrame, self.frame)
raise TypeError('Improper geometry input type: %s' % str(type(geo_input)))
with self.assertRaises(ResponseError): submission_dict = {'test': 'test'} input_dict = {'1_2_1': json.dumps(submission_dict)} problem.grade_answers(input_dict)
import salt.utils from salt.grains import core
index = RangeIndex(1, 5, 2) result = RangeIndex(index, copy=False) self.assertTrue(result.identical(index))
resultb = resulta + d assert_series_equal(df['A'], resultb)
query_parts = [(unquote(force_str(q[0])), unquote(force_str(q[1]))) for q in parse_qsl(query, keep_blank_values=True)] query = urlencode(query_parts)
return {'master': __opts__.get('master', '')}
sql_and_param_pair_rows = (zip(*row) for row in rows_of_fields_as_sql)
result = self.ts.reindex() self.assertFalse((result is self.ts))
self.registration = Registration() self.registration.register(self.user) self.registration.save()
if not overwrite and other_mask.all(): result[col] = this[col].copy() continue
url(r'^post_metrics_data_csv_url', 'class_dashboard.dashboard_data.post_metrics_data_csv', name="post_metrics_data_csv"),
super(ValidationError, self).__init__(message, code, params)
log = logging.getLogger(__name__)
ts = Timestamp('2001-01-05 11:56', tz=maybe_get_tz('dateutil/UTC')) self.assertEqual(ts, ts.tz_convert(dateutil.tz.tzutc()))
self.group_configurations_page.visit() self.assertFalse(self.group_configurations_page.experiment_group_sections_present)
values = Series([u('om'), NA, u('nom'), u('nom')])
np.random.seed(42)
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.approve()
self.assertEqual(self.rng[4], self.rng[np.int_(4)])
return self.source_from(self, **kwargs)
return False
'ENFORCE_PASSWORD_POLICY': True,
__virtualname__ = 'dsc'
qs_custom = Person.custom_init_queryset_manager.all() qs_default = Person.objects.all() self.assertQuerysetEqual(qs_custom, qs_default)
if course_key.for_branch(None) in self._active_bulk_ops.records: del self._active_bulk_ops.records[course_key.for_branch(None)]
return 'xqueue/submit' in self.path
self.assertEquals( preview.latex_preview('-x+2-3+4', variables=['x']), '-x+2-3+4' )
self.addCleanup(shutil.rmtree, self.temp_dir_1) self.addCleanup(shutil.rmtree, self.temp_dir_2)
from __future__ import absolute_import import logging import socket import msgpack import weakref import time
import logging
self.find_css('.action-secondary').first.click()
module = self.descriptor._xmodule self.assertIsInstance(module, ErrorModule)
context['duplicate_provider'] = pipeline.get_duplicate_provider(messages.get_messages(request))
self.assertTrue(views.is_course_passed(self.course, None, self.student, self.request))
xml = ''.join(line.strip() for line in xml.split('\n')) factory = self.capa_factory_for_problem_xml(xml) module = factory.create()
return [f for f in self.get_admin_form_fields(response) if f.is_readonly]
ax = df.plot.bar(width=width) for r in ax.patches: self.assertEqual(r.get_width(), width / len(df.columns))
self.assertParentReferences( element, course_key, **kwargs )
elif needs_i8_conversion(left) and needs_i8_conversion(right): if not is_dtype_equal(left.dtype, right.dtype): return False
self.assertFalse(getattr(request, 'process_template_response_reached', False)) self.assertTrue(getattr(request, 'process_response_reached', False))
return Ref(name, self.annotation_select[name])
world.visit(video_url)
self.runtime.publish( self, 'grade', { 'value': json_data['grade'], 'max_value': 1 } )
request = self.context['request'] return request.build_absolute_uri(reverse('course_structure_api:v0:detail', kwargs={'course_id': course.id}))
def __init__(self, role, org): super(OrgRole, self).__init__(role, org)
self.assertEqual(test, expected)
cls.raises_exception('localhost', ImproperlyConfigured)
if self.op in ['==', '!=']:
scsi_controller_properties = devices['scsi'][scsi_controller_label] scsi_spec = _add_new_scsi_controller_helper(scsi_controller_label, scsi_controller_properties, bus_number) device_specs.append(scsi_spec) bus_number += 1
import integration import salt.utils from salt.exceptions import CommandExecutionError
assert all([layer in layer_to_updated for layer in layer_to_state]) assert all([layer in layer_to_state for layer in layer_to_updated]) assert all([(layer_to_state[layer] is layer_to_updated[layer]) == layer_to_clamp[layer] for layer in layer_to_state])
label_css = 'button.show span.show-label' world.wait_for(lambda _: world.css_has_text(label_css, label_name))
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.django_book, self.djangonaut_book])
from salt.states import rbenv
return self._line_start_indexes[line_number - 1]
codes = c.codes
import salt.log import salt.utils import salt.utils.network
df = DataFrame({1: [1, 2], 2: [3, 4], 'a': ['a', 'b']})
logistic = linear_model.LogisticRegression() rbm = BernoulliRBM(random_state=0, verbose=True)
casted = pd.Series(other, index=self.columns)
cert = GeneratedCertificate.eligible_certificates.get(user=self.student) self.assertEqual(cert.status, CertificateStatuses.notpassing)
tstart = time() clf = factory(alpha=alpha).fit(X, Y) delta = (time() - tstart)
result = df.assign(A=lambda x: x.A + x.B) assert_frame_equal(result, expected)
offset = datetools.get_offset(new_freq) old_name = datetools.get_legacy_offset_name(offset) self.assertEqual(old_name, old_freq)
c = store.select_as_coordinates('df') assert((c.values == np.arange(len(df.index))).all())
class SongForm(Form): artist = CharField() name = CharField()
return '{name}_{size}.{file_extension}'.format(name=name, size=size, file_extension=file_extension)
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
self.bookmarks_page.click_bookmarks_button() self.assertTrue(self.bookmarks_page.results_present()) self.assertEqual(self.bookmarks_page.results_header_text(), 'My Bookmarks')
from __future__ import unicode_literals
from __future__ import absolute_import import os import shutil
EmptyPromise( lambda: len(self.report_download_links) >= 1, 'Waiting for downloadable report' ).fulfill()
greek.append('hbar')
import salt.ext.six as six try:
__virtualname__ = 'gpg'
log = logging.getLogger(__name__)
if fails is True: if result == 'fail': result = 'ok (fail)'
items = list(items) return (items[i:i + chunk_size] for i in xrange(0, len(items), chunk_size))
'packages': ('openassessment',),
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from __future__ import absolute_import import os import time import json import pprint import logging import decimal
'microsite_configuration.middleware.MicrositeSessionCookieDomainMiddleware',
def __getstate__(self): return {}
xmin, ymin, xmax, ymax = map(c_double, filter) capi.set_spatial_filter_rect(self.ptr, xmin, ymin, xmax, ymax)
certificate_type = context.get('certificate_type')
'openedx.core.djangoapps.user_api.middleware.UserTagsEventContextMiddleware',
db_table = 'django_comment_client_permission'
self.assertNotContains(response, "How it Works") self.assertNotContains(response, "Schools & Partners")
free = GEOSFuncFactory('GEOSFree') free.argtypes = [c_void_p]
self.assertEqual(first_request["parameters"]["course_num"], self.course_key.course) self.assertEqual(second_request["parameters"]["course_num"], other_course_key.course)
def geo_quote_name(self, name): return "'%s'" % name
rnd = np.random.RandomState(42) n_samples = 10 X = rnd.uniform(size=(n_samples, 4))
DEFAULT_TABLESPACE = '' DEFAULT_INDEX_TABLESPACE = ''
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(boston.data[:50], boston.target[:50], random_state=rng)
if 'axes' not in d: d['axes'] = ['b', 0, 1, 'c'] self.__dict__.update(d)
def __sub__(self, other): "Return the difference this Geometry and the other." return self.difference(other)
from __future__ import absolute_import import os
assert_greater(roc_auc_score(y_test, y_pred), 0.98)
pil_from_ndarray(ndarray).save(filepath)
raise TypeError( "SparseArray does not support item assignment via setitem")
warnings.filterwarnings('always', '', DeprecationWarning, __name__)
random_state = check_random_state(0)
self.freq = Period._maybe_convert_freq(own_state[1])
CourseInstructorRole(self.course_with_invalid_ee.id).add_users(self.instructor) self.client.login(username=self.instructor.username, password='test')
self.assertIn(orphan_chapter.location, self.store.get_orphans(course.id))
try: face = sp.face(gray=True) except AttributeError: from scipy import misc face = misc.face(gray=True)
TIME_INPUT_FORMATS = [
test3 = value 3B
email_msg = EmailMultiAlternatives( course_email.subject, plaintext_msg, from_addr, [email], connection=connection ) email_msg.attach_alternative(html_msg, 'text/html')
#pylint: disable=E0602
s = Site.objects.get_current() self.assertIsInstance(s, Site) s.delete() with self.assertRaises(ObjectDoesNotExist): Site.objects.get_current()
attach_volume = volume_attach
from __future__ import absolute_import
raise ItemNotFoundError(locator)
class Thingy(models.Model): name = models.CharField(max_length=255)
namespace_dirs = {namespace: list(look.directories) for namespace, look in LOOKUP.items()}
for attr in unique: if attr not in self.mapping: raise ValueError
for x in ['mode', 'path', 'handle', 'complib']: getattr(store, "_%s" % x)
if salt.utils.is_sunos(): traceroute_version = [0, 0, 0] else: cmd2 = 'traceroute --version' out2 = __salt__['cmd.run'](cmd2) try:
import matplotlib.pyplot as plt plt.close('all') gs, axes = _generate_4_axes_via_gridspec()
_list = self.run_function('beacons.list', return_yaml=False) self.assertFalse(_list['ps']['enabled'])
lti_endpoint = self.server.config.get('lti_endpoint', self.DEFAULT_LTI_ENDPOINT) return lti_endpoint in self.path
result = self.panel4d.swapaxes(0, 1) self.assertIs(result.labels, self.panel4d.items)
class MultiPoint(GeometryCollection): _allowed = Point _typeid = 4
LOGGING_TEMP_HANDLER = None break
idx1 = TimedeltaIndex(['1 days', '2 days', '3 days']) self.assertTrue(idx1.is_monotonic)
ret['result'] = True return ret
with tm.assertRaises(ValueError): o.sample(n=3, weights=[0, 1])
return self
d1 = datetime.datetime(2003, 1, 1) d2 = datetime.datetime(2008, 1, 1)
STATUS_VISIBLE = 'visible' STATUS_DELETED = 'deleted' TEMPLATE_DIR = 'courseware'
error_item_names = self.advanced_settings.get_error_item_names() self.assertEqual(set(wrong_settings_list), set(error_item_names))
wiki_courses = self.store.get_courses_for_wiki('999') self.assertIn(
task_folder = task_service.GetFolder(location) task_folder.CreateFolder(name)
s = 20
url(r'^accounts/login/$', auth_views.login)
if err is not None: raise FixtureError("Could not create course {0}. Error message: '{1}'".format(self, err))
raise NotImplementedError(str(self.__class__) + " does not implement " "log_conditional.")
ret.update({esxi_host: _format_firewall_stdout(response)})
left = _permute(index[:-5]) right = _permute(index[10:]) result = left.intersection(right).sort_values() tm.assert_index_equal(result, index[10:-5])
return ''.join(force_text(s) for s in strings)
return Series(self._resid_raw[self._valid_obs_labels], index=self._result_index)
request.user = request.client.user
rs = self.frame.copy() rs.sortlevel(0, inplace=True) assert_frame_equal(rs, self.frame.sortlevel(0))
self.assertTrue(getattr(vertical, "is_draft", False))
try: os.makedirs(minion_sock_dir, 0o755) except OSError as exc: log.error('Could not create SOCK_DIR: {0}'.format(exc)) if minion_sock_dir == default_minion_sock_dir: raise
import numpy import theano from theano import tensor from theano.compat.six.moves import zip as izip, reduce
text = _match.group(0) break
db = options['database'] connection = connections[db]
response = self.client.get(reverse('signin_user')) self.assertEqual(200, response.status_code) self.assertTrue('login-and-registration-container' in response.content)
self.client.force_login(self.u1)
BROKER_HEARTBEAT = 10.0 BROKER_HEARTBEAT_CHECKRATE = 2
def check_record(result, func, cargs): if result: rec = result.contents record = {fld: getattr(rec, fld) for fld, ctype in rec._fields_}
from __future__ import absolute_import, print_function import logging
content = ET.Element('ve')
transaction.rollback() transaction.set_autocommit(True)
assert_raises(ValueError, sel.inverse_transform, np.array([[1], [2]]))
return type( str('RelatedObjectDoesNotExist'), (self.related.related_model.DoesNotExist, AttributeError), {} )
url(r'^submit_feedback$', 'util.views.submit_feedback'),
data = query('get', 'nodes/{0}/{1}/{2}/config'.format(node, node_type, vmid))
train, valid, test, transfer = utlc.load_sparse_dataset("ule", normalize=True, transfer=True) assert train.shape[0] == transfer.shape[0]
from __future__ import absolute_import import logging import gc import datetime
self.check_event_response_by_http_status( 'edit_resource', self.generate_edit_resource(self.resource_id), 200 )
exc_info_on_loglevel=logging.DEBUG
user = MockUsers() if self.flag == 1: user.id = None return user user.id = user_id return user
ps = tm.makePeriodPanel() shifted = ps.tshift(1) unshifted = shifted.tshift(-1)
exc_info_on_loglevel=logging.DEBUG
self.hashed_files.update(hashed_files)
water = Book(title="Dive into Water", published=datetime.date(2001, 1, 1), editor=mark) self.assertEqual(water._state.db, 'default')
from __future__ import unicode_literals
for category in update.Categories: if category.Name in results['Categories']: results['Categories'][category.Name] += 1 else: results['Categories'][category.Name] = 1
values = []
from salt.modules import postfix
try: self.close() except self.db.Database.Error: pass
import sys import nose import itertools import warnings from datetime import datetime
if not parent_location: return xblock
assert_raises(ValueError, cval.StratifiedShuffleSplit, y, train_size=2) assert_raises(ValueError, cval.StratifiedShuffleSplit, y, test_size=2)
self.cohort_management_page.select_cohort(cohort_name) self.assertEquals(self.cohort_management_page.get_selected_cohort(), cohort_name) self.assertIn(expected_description, self.cohort_management_page.get_cohort_group_setup())
import salt.utils
v = np.empty(len(index), dtype=object)
return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)
if publish: unit.publish_action.click() unit.view_published_version() self.assertEqual(len(self.browser.window_handles), 2) courseware_page.wait_for_page()
self.assertTrue(self.run_function('timezone.set_time', ['3:14']))
if timeout is not None and __context__['docker.client'].timeout != timeout: __context__['docker.client'].timeout = timeout
log = logging.getLogger(__name__)
before = self.make_project_state([]) after = self.make_project_state([person]) autodetector = MigrationAutodetector(before, after) changes = autodetector._detect_changes()
from __future__ import absolute_import
if kwargs.get(push, False): ret['Push'] = __salt__['cp.push'](path)
if course_id in course_summaries: log.warning( u"Modulestore %s have duplicate courses %s; skipping from result.", store, course_id ) else: course_summaries[course_id] = course_summary
unlink_cohort_partition_group(test_cohort) link_cohort_to_partition_group( test_cohort, self.user_partition.id, self.groups[1].id, ) self.assert_student_in_group(self.groups[1])
if isinstance(response, HttpResponseBase): return response else: return HttpResponseRedirect(request.get_full_path())
denise = User.objects.db_manager('other').create_user('denise', 'denise@example.com') denise_profile = UserProfile(flavor="tofu", user=denise)
return False
self.courseware_page.start_proctored_exam()
url(r'^snark/', views.snark, name='snark'),
'submissions', 'openassessment', 'openassessment.assessment', 'openassessment.fileupload', 'openassessment.workflow', 'openassessment.xblock',
for k, v in result_json.items(): if isinstance(v, list): result_json[k] += next_page_results[k]
self.check_discussion( tab_list=self.tabs_without_discussion, expected_discussion_link=not None, expected_can_display_value=False, )
clf = PassiveAggressiveClassifier(class_weight="balanced") assert_raises(ValueError, clf.partial_fit, X, y, classes=np.unique(y))
dot_str = self.adj.justify([dot_str], width, mode='center')[0] fmt_values.insert(row_num + n_header_rows, dot_str) fmt_index.insert(row_num + 1, '')
return (self.network_address.is_reserved and self.broadcast_address.is_reserved)
return [DataFrame(value, index=self._columns, columns=self._columns) for value in self._forecast_cov_raw(h)]
if dt.weekday() == 6: return dt + timedelta(1) return dt
self.assertEqual( list(articles.values_list('id', flat=True)), [1, 2, 3, 4, 5, 6, 7, 8] )
generate_subs_from_source( result_subs_dict, os.path.splitext(user_filename)[1][1:], srt_transcripts.data.decode('utf-8-sig'), item, lang )
from unit.transport.req_test import ReqChannelMixin from unit.transport.pub_test import PubChannelMixin
destroy(vm_['name'])
CMS_SEGMENT_KEY = AUTH_TOKENS.get('SEGMENT_KEY')
self.provider = Registry.get(provider_id) if not self.provider: raise Http404
'dsn': dsn
assert_series_equal(result + td2, td1)
assert_true(id1, id2)
self.assertEqual( feedgenerator.rfc2822_date(datetime.date(2008, 11, 14)), "Fri, 14 Nov 2008 00:00:00 -0000" )
for course_key in courses: self.assertFalse(is_course_in_block_structure_cache(course_key, self.store))
response = self.client.get_json(make_url_for_lib(key_str)) self.assertEqual(response.status_code, 404)
return str(self.q(css='.main-article h1').text[0])
'http_max_body': int,
self.run_function('beacons.add', ['ps', {'apache2': 'stopped'}]) self.run_function('beacons.save')
if paramvalues['binddn']: connargs['binddn'] = paramvalues['binddn'] if paramvalues['bindpw']: params['mandatory'].append('bindpw')
import logging import json import yaml
source = utils.find_release_date_source(item) self.assertEqual(source.location, expected_source.location) self.assertEqual(source.start, expected_source.start)
y = np.reshape(y, (-1, 1))
import salt.utils
frag = Fragment(u"Hello there!") return frag
item_locs.add( unicode(as_published(Location._from_deprecated_son(item['_id'], course_key.run))) )
from pickle import Pickler
data_csv = pd.read_csv(self.file01.replace(".xpt", ".csv")) data_csv = data_csv.set_index("SEQN") numeric_as_float(data_csv)
self.assertEqual(3, count_sessions()) management.call_command('clearsessions') self.assertEqual(1, count_sessions())
retval = self if not self._is_rendered: self.content = self.rendered_content for post_callback in self._post_render_callbacks: newretval = post_callback(retval) if newretval is not None: retval = newretval return retval
self.assertEqual( re.findall(r'order by (\w+)', qstr), [', '.join(f[1][0] for f in forced_ordering).lower()] )
if uid is None: return None try: return User.objects.get(anonymoususerid__anonymous_user_id=uid) except ObjectDoesNotExist: return None
self.assertTrue(module_has_submodule(egg_module, 'bad_module')) with self.assertRaises(ImportError): import_module('egg_module.bad_module')
buf = (c_ubyte * sz)() capi.to_wkb(self.ptr, byteorder, byref(buf)) return six.memoryview(string_at(buf, sz))
self.assertFalse(CourseEnrollment.is_enrolled(self.user, self.course.id))
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch from salttesting.helpers import ensure_in_syspath
with course_run_policy_dir.open('grading_policy.json', 'w') as grading_policy: grading_policy.write(dumps(courselike.grading_policy, cls=EdxJSONEncoder, sort_keys=True, indent=4))
import salt.utils
return dict(kernels=self.kernels)
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
return self._info_axis
urls = Sitemap.get_urls(self, page=page, site=site, protocol=protocol) for url in urls: url['geo_format'] = self.geo_format return urls
'sls_list': list,
unlink_cohort_partition_group( test_cohort, ) self.assert_student_in_group(None)
from salt.exceptions import SaltSystemExit import salt.utils import salt.modules.vsphere
for child in old_block_relations[block_key].children: if child in pruned_block_relations: self._add_to_relations(pruned_block_relations, block_key, child)
self.import_path = import_path self.locked = locked
segments = mailchimp.listStaticSegments(id=list_id) for seg in segments: if seg['name'].startswith('random'): mailchimp.listStaticSegmentDel(id=list_id, seg_id=seg['id'])
google_provider = self.configure_google_provider(enabled=True) linkedin_provider = self.configure_linkedin_provider(enabled=True) self.assertEqual(len(provider.Registry.enabled()), 2)
self.assertTrue(filecmp.cmp(path_test + '.bak', path_in))
pass
return getattr(self.steps[0][1], '_pairwise', False)
c = mail.get_connection(fail_silently=True, foo='bar') self.assertTrue(c.fail_silently)
for l in [slice(3.0, 4), slice(3, 4.0), slice(3.0, 4.0)]:
pass
self.available_apps = None
graders = { 'edc': self.grade_via_every_decision_counts, 'halves': self.grade_via_halves, 'false': self.grade_without_partial_credit }
from __future__ import absolute_import
set_limit = numpy.ceil(numpy.divide(set_sizes, set_batch)) self.limit = map(int, set_limit)
import salt.modules.k8s as k8s
print('Failed to save %s to .npy file:\n%s' % ( type(obj), traceback.format_exc()))
mn.join(cn, rsuffix='_right')
self.assertEqual( len(CourseEnrollment.objects.filter(mode='honor', user_id__in=real_user_ids)), 0 )
result = read_hdf(hh, 'df', where=Term( 'l1', '=', selection.index.tolist())) assert_frame_equal(result, expected)
from __future__ import unicode_literals
void_output = partial(void_output, cpl=True) const_string_output = partial(const_string_output, cpl=True) double_output = partial(double_output, cpl=True)
return connection.ops.gis_operators[self.lookup_name]
MINION_CONNECT_TIMEOUT = 5
idx = np.argsort(np.sum((X - mean[np.newaxis, :]) ** 2, axis=1)) X = X[idx, :]
self.marker = marker self.colour = colour self.alpha = alpha Layer.__init__(self)
try: delattr(_MovedItems, name) except AttributeError: try: del moves.__dict__[name] except KeyError: raise AttributeError("no such move, %r" % (name,))
with self.assertRaises(forms.ValidationError): f.clean('2010-12-21 13:30:05')
wkb_w.outdim = 3
self.assertNotEqual(display_name_before_import, display_name_after_import)
log.error("etcd: Could not connect") raise etcd.EtcdConnectionFailed("Could not connect to etcd server")
self.notes_page.wait_for_ajax() note = self.notes_page.notes[0] assert_page(note, self.raw_note_list[2]['usage_id'], "Tags")
if "TRACKING_IGNORE_URL_PATTERNS" in ENV_TOKENS: TRACKING_IGNORE_URL_PATTERNS = ENV_TOKENS.get("TRACKING_IGNORE_URL_PATTERNS")
pass
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandExecutionError, MinionError
task_definition = task_folder.GetTask(name).Definition
dr = date_range('2012-01-01', '2012-01-10', freq='D', tz='Hongkong')
self._source = source self._name = name
batch_axis = self.output_space.get_batch_axis() return self.nonlin.cost(Y=Y, Y_hat=Y_hat, batch_axis=batch_axis)
if course_overview and not hasattr(course_overview, 'image_set'): CourseOverviewImageSet.create_for_course(course_overview)
return self.q(css='a.problem-button').text
return None
if self.current_language() != code: self.select_language(code)
self.assertNumQueries(2, self._collect, 0)
log.error( 'Unable to get SHA of HEAD for %s remote \'%s\'', self.role, self.id ) return None
s = Series([np.nan, np.nan, 5, 7, 9, np.nan])
LMS_SEGMENT_KEY = os.environ.get('SEGMENT_KEY')
self.workd[yslice] = self.OP(self.workd[xslice])
if serialized_block['id'] == unicode(self.html_block.location): self.assertTrue(serialized_block['visible_to_staff_only']) else: self.assertFalse(serialized_block['visible_to_staff_only'])
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
data, vm_ = request_instance(vm_)
self._zendesk_instance.update_ticket(ticket_id=ticket_id, data=update)
STATIC_ROOT = None
__salt__['cmd.run']('automount -cv') return True
width = self.ext.config['gametrailers_width'][0] height = self.ext.config['gametrailers_height'][0] return flash_object(url, width, height)
for fld in feat: self.assertIn(fld.name, source.fields.keys())
valid = SVHN('valid', path=local_path) check_dtype(valid) valid.apply_preprocessor(pipeline, can_fit=False)
self.seed = randomization_bin(self.runtime.seed, unicode(self.location).encode('utf-8'))
rng = np.random.RandomState(0) X = np.c_[X, rng.randn(n_samples, 200 * n_features)]
with tm.assertRaisesRegexp(boto.exception.S3ResponseError, 'S3ResponseError: 403 Forbidden'): read_csv('s3://cant_get_it/')
return super(DecodingStringIO, self).write(data.decode('utf8', 'replace'))
if this.columns.is_unique:
pids = {} procfs = os.listdir('/proc/') for pfile in procfs: try: pids[int(pfile)] = [] except ValueError: pass
survey = self._create_test_survey() self.assertFalse(survey.has_user_answered_survey(self.student)) self.assertEquals(len(survey.get_answers()), 0)
xblock_desc.publish = "not-applicable"
FILE_UPLOAD_TEMP_DIR = None
self.assertNotIn(self.vert_loc, course.system.module_data)
def default(self, noDefaultEncodingObj): return noDefaultEncodingObj.value.replace("<script>", "sample-encoder-was-here")
mat = empty((2, 3), dtype=float) frame = DataFrame(mat, columns=['A', 'B', 'C'], index=[1, 2])
output = FilterActs()(images, filters)
return self.q(css='ul.listing-courses .course-item .info-date-block').first.text[0]
pass
__virtualname__ = 'docker'
return EmptyPromise( lambda: self.link_title_for_link_field(field_id) == expected_title, "Link field with link title \"{0}\" is visible.".format(expected_title) ).fulfill()
import salt.utils from salt.roster import get_roster_file
is_enrolled = CourseEnrollment.is_enrolled(self.user, self.course.id) self.assertTrue(is_enrolled)
s = self.series.copy() s['foobar'] = 1
for _ in xrange(len(self.aes) + walkback): steps.append(self._update(self.activations, clamped=clamped))
from salt import utils
return date.today()
content = '<ol/>' payload = get_response(content, 'January 11, 2013') self.assertHTMLEqual(content, payload['content'], "self closing ol")
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010 13:30:00")
clf = MultinomialNB().fit(X_train, y_train, sample_weight=sw_train) prob_pos_clf = clf.predict_proba(X_test)[:, 1]
__context__[contextkey] = True
STATICFILES_STORAGE = 'openedx.core.lib.django_require.staticstorage.OptimizedCachedRequireJsStorage'
ccx = self.make_ccx(max_students_allowed=2) ccx_course_key = CCXLocator.from_course_locator(self.course.id, ccx.id) staff = self.make_staff() instructor = self.make_instructor()
for arg in ('name', ('name', 'mpoly')): lm = LayerMapping(County, co_shp, co_mapping, transform=False, unique=arg)
t = datetime.datetime.utcnow()
return
text = f.widget.format_value(result) self.assertEqual(text, "01:30:00 PM")
continue
x = np.atleast_2d(np.linspace(0, 10, 1000)).T
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if return_type is None: return_type = 'dict'
from __future__ import unicode_literals
if tornado.util.errno_from_exception(e) == errno.ECONNABORTED: continue raise
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
video_data = local_cache['course_videos'].get(video_descriptor.edx_video_id, {})
tup3 = next(df3.itertuples()) self.assertFalse(hasattr(tup3, '_fields')) self.assertIsInstance(tup3, tuple)
import salt.ext.six as six
return str(obj)
if netloc: return url
DATADOG = AUTH_TOKENS.get("DATADOG", {}) DATADOG.update(ENV_TOKENS.get("DATADOG", {}))
content = template.render({}, request) self.assertEqual(content, 'yes')
resp = self.client.put( '/shoppingcart/payment_fake', data="success", content_type='text/plain' ) self.assertEqual(resp.status_code, 200)
return StateRequisite(requisite, self.module, id_)
return iter(getattr(d, _itervalues)(**kw))
value_annotation = True
from __future__ import absolute_import
return deserialize_count_specs(self.courses_completed)
config.toggle() config.edit() config.groups[2].remove() config.save()
arn = ret['get_user_response']['get_user_result']['user']['arn']
from __future__ import absolute_import
profile_str = 'virtualbox-config' providers = self.run_cloud('--list-providers') log.debug("providers: %s", providers)
ret['changes'] = exc.info.get('changes', {}) ret['comment'] = exc.strerror_without_changes
other = Int64Index(np.arange(25, 14, -1))
from __future__ import print_function from __future__ import absolute_import import os import logging
from __future__ import absolute_import
if value is not None: self.config[option.dest] = value
response = default_with_prefix_view(request, '12') self.assertEqual(response.content, b'Hello World 4')
DATE_INPUT_FORMATS = [
python_shell = False if '*.' in cmd: python_shell = True
import salt.utils import salt.utils.mac_utils from salt.exceptions import CommandExecutionError, SaltInvocationError
(makeFY5253LastOfMonthQuarter(1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1), datetime(2011, 4, 2), True),
queryset = User.objects.filter( preferences__key=NOTIFICATION_PREF_KEY ).select_related( "profile" ).prefetch_related( "preferences", "courseenrollment_set", "course_groups", "roles__permissions" )
self.assertTrue(isinstance(el, compat.string_types) or isnull(el))
no = models.IntegerField(verbose_name='number', blank=True, null=True)
result = sparse[sparse % 2 == 1] exp = orig[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
cop[:5] = 97 self.assertEqual(cop.sp_values[0], 97) self.assertNotEqual(self.bseries.sp_values[0], 97)
n_classes = 1 labels = labels[1:]
selector = self.get_element_selector(CSS_CLASS_NAMES['poster']) self.q(css=selector).click()
@ignore_warnings def test_random_hasher(): hasher = RandomTreesEmbedding(n_estimators=30, random_state=1) X, y = datasets.make_circles(factor=0.5) X_transformed = hasher.fit_transform(X)
break
time.sleep(0.5)
return self._topology(capi.geos_centroid(self.ptr))
raise NotImplementedError('subclasses of Deserializer must provide a __next__() method')
context['document_title'] = _("Invalid Certificate")
assert_true(X_scaled is not X) assert_true(X_csr_scaled is not X_csr)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
template_name = microsite.get_template_path(template_name)
kwargs = salt.utils.clean_kwargs(**kwargs) format_ = kwargs.pop('format', None) if kwargs: salt.utils.invalid_kwargs(kwargs)
def _get_argtypes(self): return self.cfunc.argtypes
self.assertEqual(get_site_status_msg(None), None) self.assertEqual(get_site_status_msg(self.course_key), None)
self.assertRaises(TypeError, lambda: td + 2) self.assertRaises(TypeError, lambda: td - 2)
int1 = models.IntegerField() int2 = models.IntegerField() related_field = models.ForeignKey(AggregateTestModel, models.SET_NULL, null=True)
pass
for name in names: latest_installed = '0' latest_available = '0'
for line in installed_list_file: l=line.rstrip().split(' ') if l: self.installed_packages_list[l[0]]=\ this_package=self.package_info(
'ENABLE_MAX_FAILED_LOGIN_ATTEMPTS': True,
import salt.utils import salt.utils.decorators as decorators from salt.utils.locales import sdecode as _sdecode from salt.exceptions import CommandExecutionError, SaltInvocationError
return cls._categories[int(scalar_label)]
setattr(self.options, option.dest, cli_config[option.dest]) option.explicit = True
if self.act_enc is None: act_enc = lambda x: x else: act_enc = self.act_enc return act_enc(self._hidden_input(x))
return (not os.path.exists(derived) or os.stat(derived).st_mtime < os.stat(original).st_mtime)
reindexed_bool = bool_ts.reindex(self.ts.index)
if d_yard in self.lane_stack.value.nameRemotes: self.lane_stack.value.transmit(msg, self.lane_stack.value.nameRemotes[d_yard].uid) return return
def is_in_axis(key): if not _is_label_like(key): try: obj._data.items.get_loc(key) except Exception: return False
return capi.get_band_xsize(self._ptr)
from .metrics import r2_score return r2_score(y, self.predict(X), sample_weight=sample_weight, multioutput='uniform_average')
result = self.frame.xs('two', level='second')
result = df.reindex_axis(lrange(15), fill_value=0., axis=0) expected = df.reindex(lrange(15)).fillna(0) assert_frame_equal(result, expected)
self.assertIsNone(self.do_email_change(self.user, user1_new_email)) self.assertIsNone(self.do_email_change(user2, user2_new_email))
@property def _constructor(self): return DatetimeIndexResampler
output_emails = [row["email"] for row in output] for email in output_emails: self.assertIn(email, output_emails)
leaf_indices = clf.apply(X) assert_equal(leaf_indices.shape, (len(X), clf.n_estimators))
return self.runtime.get_published_by(self)
import logging
response = self.fetch('/login', method='POST', body=json.dumps(self.auth_creds_dict), headers={'Content-Type': self.content_type_map['json']})
filepath = filename
accum = np.empty(out_shape, dtype=out_dtype) result = self._transform( result, accum, values, labels, func, is_numeric)
_options['checktype'] = str(_options['checktype'])
self._is_frame = isinstance(sample, DataFrame) if self._is_frame: axis = 1 if axis == 0 else 0
return CoursewareSearchIndexer.do_course_reindex(store, self.course.id)
for current_value in current_values: permissions = str() for permission_name in _PERMISSION_TYPES: if current_value['vdata'] == _PERMISSION_TYPES[permission_name]: permissions = permission_name break ret[current_value['vname']] = permissions
get_user_credentials(self.user)
for address in addresses: formatted_addresses.append('{0}, {1}'.format(address.strip(), addresses[address].strip()))
explained_variance_ = (S ** 2) / n_samples total_var = explained_variance_.sum() explained_variance_ratio_ = explained_variance_ / total_var
return self.ordering
AWS_QUERYSTRING_AUTH = AUTH_TOKENS.get('AWS_QUERYSTRING_AUTH', True)
import salt.utils.compat import salt.utils.odict as odict
updates = self._get_updates(grads) for param, update in zip(self.params, updates): param += update
new_settings = get_server_setting(settings=settings.keys(), server=server) failed_settings = dict()
if d_yard in self.lane_stack.value.nameRemotes: self.lane_stack.value.transmit(msg, self.lane_stack.value.nameRemotes[d_yard].uid) return
return datetime.fromtimestamp(os.path.getatime(self.path(name)))
non_cohort.users.add(*user_list) non_cohort.users.clear() self.assertFalse(mock_tracker.emit.called)
result = SoftwareSecurePhotoVerification.get_initial_verification(user=user) self.assertIs(result, None)
from __future__ import absolute_import
from __future__ import unicode_literals
if len(expressions) == 2: return ConcatPair(*expressions) return ConcatPair(expressions[0], self._paired(expressions[1:]))
exc_info_on_loglevel=logging.DEBUG
validated_data["modes"] = self._new_course_mode_models(validated_data["modes"]) instance.update(validated_data) instance.save() return instance
warnings.warn("irow(i) is deprecated. Please use .iloc[i] or .iat[i]", FutureWarning, stacklevel=2) return self._ixs(i)
resp = self.client.get(course_wiki_page, follow=False) self.assertEqual(resp.status_code, 302)
if name: choice_element.text = str(name) choice_element.set("name", str(name))
return ' '.join(sentence() for i in range(random.randint(1, 4)))
arr = randn(10) dm = DataFrame(arr, columns=['A'], index=np.arange(10)) self.assertEqual(dm.values.ndim, 2)
fresult = first.value - foffset
exams = get_all_exams_for_course(unicode(self.course.id)) self.assertEqual(len(exams), expected_count)
element = self.q(css='.setting-replace')[0] ActionChains(self.browser).move_to_element(element).click(element).perform()
self._col_indices = None self.columns, self.num_original_columns = self._infer_columns()
from pandas.formats.style import Styler return Styler(self)
upload_file = request.FILES['file'] filename = upload_file.name mime_type = upload_file.content_type size = get_file_size(upload_file)
self.assertEqual(response.status_code, 404)
urls = _get_default_profile_image_urls()
file_handle.seek(0) return magic
"form-2-id": str(fd3.id), "form-2-reference": "789", "form-2-driver": "bill", "form-2-restaurant": "thai",
return name
if clean_current_key[0] != clean_ssh_key[0] or clean_current_key[1] != clean_ssh_key[1]: ssh_key_changed = True
output = StringIO.StringIO() test_log_handler = logging.StreamHandler(output) test_log_handler.setLevel(logging.DEBUG) glog = git_import.log glog.addHandler(test_log_handler)
train.apply_preprocessor(pipeline, can_fit=True) del train
X, y = iris.data, iris.target y[y == 2] = 1
import salt.utils
original = Event.DoesNotExist("Doesn't exist") unpickled = pickle.loads(pickle.dumps(original))
best_candidate = None best_pot = None best_dist_sq = None for trial in range(n_local_trials): new_dist_sq = np.minimum(closest_dist_sq, distance_to_candidates[trial]) new_pot = new_dist_sq.sum()
response = method("/request_data/?foo=whiz", data={'foo': 'bang'}) self.assertEqual(response.context['get-foo'], 'bang')
self.learning_rates = {} self.base_lr = theano._asarray(base_lr, dtype=theano.config.floatX)
if filters_use_distinct | search_use_distinct: return qs.distinct() else: return qs
import numpy as np import itertools import collections import scipy.ndimage as ndi from pandas.compat import zip, range
from salttesting import TestCase
'METADATA_URL': 'https://www.googleapis.com/youtube/v3/videos/',
self.selenium.find_element_by_id('id_birthdate_0').send_keys('2013-06-01')
with transaction.atomic(): sid = connection.savepoint_ids[-1] raise Exception("Oops")
user_partititons = self.course.user_partitions
REPO_ROOT = path(__file__).abspath().parent.parent.parent
yyy = np.column_stack([y, y, y])
import salt.utils
index = pd.date_range('2015-01-01', periods=2, tz='utc')
coef_grads, intercept_grads = self._compute_loss_grad( last, n_samples, activations, deltas, coef_grads, intercept_grads)
IS_WIN = win_autoruns.__virtual__()
self.assertListEqual( self.get_item_from_modulestore(self.seq2_usage_key).children, [unit_1_key, unit_2_key], ) self.assertListEqual( self.get_item_from_modulestore(self.seq_usage_key).children,
from __future__ import absolute_import
element = self.q(css=BANNER_SELECTOR) return element.visible and element.text[0].startswith("Welcome to the Open edX")
df.to_sql("test_read_write", self.conn, index=False) df2 = sql.read_sql_table("test_read_write", self.conn)
incremental_count = batch.shape[0] sample_count = batch.shape[0]
__opts__['environment'] = saltenv __opts__['pillarenv'] = pillarenv
self.assertGreater(exam_score * 100, 50)
__virtualname__ = 'dockerng'
response = requests.post(self.launch_uri, data=self.payload) self.assertIn('This is LTI tool. Success.', response.content)
if backend_name == 'django.db.backends.postgresql_psycopg2': backend_name = 'django.db.backends.postgresql'
ug_bar = UndergroundBar.objects.create(place=p, serves_cocktails=False) ug_bar.place = None self.assertIsNone(ug_bar.place)
return
cached_pkg = installer
save_hashes(hashes, HASH_FILE)
log = logging.getLogger(__name__)
print(metrics.classification_report(y_test, y_predicted, target_names=dataset.target_names))
costMatrix *= T.neq(Y, -1) return model.cost_from_cost_matrix(costMatrix)
self.assertIn( connection.ops.quote_name( editor._create_index_name(Article, ['headline', 'pub_date'], suffix='_idx') ), index_sql[0] )
pid = 0
self.assertEquals(course.tabs[2], {'type': 'discussion', 'name': 'Discussion'})
if hextets[index] == '0': doublecolon_len += 1 if doublecolon_start == -1: doublecolon_start = index if doublecolon_len > best_doublecolon_len: best_doublecolon_len = doublecolon_len best_doublecolon_start = doublecolon_start else: doublecolon_len = 0 doublecolon_start = -1
manager = getattr(self.model, kwargs.pop('manager')) manager_class = create_forward_many_to_many_manager(manager.__class__, rel, reverse) return manager_class(instance=self.instance)
degrees_of_freedom = max(self.n_components - 1.0, 1) n_samples = X.shape[0] k = min(n_samples - 1, int(3. * self.perplexity + 1))
if openid_request.mode == 'checkid_immediate': return provider_respond(server, openid_request, openid_request.answer(False), {})
import salt.config import salt.auth import salt.client import salt.runner import salt.wheel import salt.utils import salt.syspaths as syspaths from salt.utils.event import tagify from salt.exceptions import EauthAuthenticationError
return HttpResponse("Mode '{mode_slug}' created for '{course}'.".format( mode_slug=PARAMETERS['mode_slug'], course=course_id ))
scalings = (V[:rank] / std).T / S[:rank]
return (super(ExternalLinkCourseTab, cls).validate(tab_dict, raise_error) and key_checker(['link', 'name'])(tab_dict, raise_error))
delta = time.time() - os.stat(path).st_mtime self.assertGreater(delta, 10, "%s wasn't recently modified" % path)
file_handler = logging.FileHandler("C:\Builds\logs\check_and_build.log") file_handler.setFormatter(logging.Formatter(fmt)) logger.addHandler(file_handler)
expiry = session_data.get('_session_expiry') if not expiry: expiry = self._last_modification() + datetime.timedelta(seconds=settings.SESSION_COOKIE_AGE) return expiry
assert isinstance(sls_data, OrderedDict) assert not isinstance(yml_data, OrderedDict)
result = df.get_dtype_counts() expected = Series({'float64': 3, 'datetime64[ns]': 1}) assert_series_equal(result, expected)
self.client.logout()
html_theme = 'nature_with_gtoc'
if not objs: return
import salt.cloud.libcloudfuncs as libcloud
return self.values
class Meta(object): list_serializer_class = BulkTeamCountTopicListSerializer
man_pages = [ ('index', 'getting_started', u'getting_started Documentation', [u'EdX Doc Team'], 1) ]
BASE_URL = os.environ.get('test_url', 'http://localhost:8031')
with transaction.atomic():
from __future__ import absolute_import, print_function import logging
instance_map = weakref.WeakKeyDictionary()
output = self.engine.render_to_string('inheritance18') self.assertEqual(output, 'this that theother5678')
lon, lat = self.get_lon_lat(lonlat) npix = self._npix[zoom]
if 'disk' in vm_: log.warning('The "disk" option is not supported for LXC hosts and was ignored')
import codecs import os import imp import logging import tempfile import traceback import sys
key = labels._maybe_cast_indexer(key)
selector = self.get_element_selector(CSS_CLASS_NAMES['poster']) return self.q(css=selector).visible
source_raw = splitter.raw_reset()
return False
'submission': submission,
curl -sSik https://localhost:8000 \\ -d client=local \\ -d tgt='*' \\ -d fun='cmd.run' \\ -d arg='du -sh .' \\ -d arg='/path/to/dir'
self.submit_question_answer('p1', {'2_1': u'Correct'})
self._prefixlen = self._prefix_from_prefix_string(addr[1])
time.sleep(10)
sorted_languages = sorted(languages.items(), key=itemgetter(1))
for asset in assets: asset_node = etree.SubElement(node, "asset") asset.to_xml(asset_node)
self._send_immediate_response(True)
self.geography = geography
context_processors = _builtin_context_processors context_processors += tuple(settings.DEFAULT_TEMPLATE_ENGINE['OPTIONS']['context_processors']) return tuple(import_string(path) for path in context_processors)
connection.ops.check_expression_support(self) self.function = connection.ops.spatial_aggregate_name(self.name) return super(GeoAggregate, self).as_sql(compiler, connection)
delete_course_and_groups(self.course_key, self.user.id) resp = self._create_course_with_given_location(self.course_key) self.assertEqual(resp.status_code, 200)
GeneratedCertificate.eligible_certificates.all().delete()
ret = _default_runlevel()
self.user = user
([[400, 150, 400, 1], [400, 450, 600, 2], [300, 225, 300, 3]],
if hasattr(self.beta_tester, '_roles'): del self.beta_tester._roles self.assertFalse(CourseBetaTesterRole(self.course.id).has_user(self.beta_tester))
from __future__ import absolute_import import datetime
password = generate_unique_password([], 12) self.assertEquals(len(password), 12) for letter in password: self.assertNotIn(letter, 'aAeEiIoOuU1l')
stub = get_request_or_stub() expected_url = "http://{site_name}/foobar".format(site_name=settings.SITE_NAME) self.assertEqual(stub.build_absolute_uri("foobar"), expected_url)
raise CommandExecutionError( 'You must specify an egg for this editable' )
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
course_overview_after = CourseOverview.get_from_id(course.id)
df = DataFrame([{"a": 1}, {"a": 3, "b": 2}]) df['c'] = np.nan
'MAX_ENROLLMENT_INSTR_BUTTONS': 200,
with self.assertRaises(ValueError): Author.objects.annotate(friends=Count('friends'))
with self.assertRaises(ImproperlyConfigured): self.client.get('/template/no_template/')
new_structure = self._lookup_course(xblock.location.course_key).structure
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call )
train = cifar10.CIFAR10(which_set="train")
'syndic_event_forward_timeout': float,
gender_label = _(u"Gender")
source_image = VirtualHardDisk(uri=vm_['image']) img_ref = None if win_installer: os_type = 'Windows' else: os_type = 'Linux'
_skip_if_has_locale()
else: assert from_model is not None, ( "ManyToManyField with intermediate " "tables cannot be checked if you don't pass the model " "where the field is attached to." )
response = self.client.get('/permission_protected_view_exception/') self.assertEqual(response.status_code, 403)
try: ccx = CustomCourseForEdX.objects.get( id=ccx_id, course_id=course.id, coach=coach ) except CustomCourseForEdX.DoesNotExist: return None return ccx
if os.getuid() == 0: os.chown(dir_, uid, gid) os.umask(cumask)
ntp_config = vim.HostNtpConfig(server=ntp_servers)
target = ibase._ensure_has_len(target) if len(target) == 0 and not isinstance(target, Index): idx = self.levels[level] attrs = idx._get_attributes_dict()
log = logging.getLogger(__name__)
if ext == '': subfiles = os.listdir(fpath) for suffix in suffix_order: if '' == suffix:
patch_response_headers(response, cache_timeout=-1) patch_cache_control(response, no_cache=True, no_store=True, must_revalidate=True)
self.assertEqual(1, 1)
self.assertEqual(requirements[2]["name"], first_block.get_credit_requirement_name()) self.assertEqual(requirements[3]["name"], second_block.get_credit_requirement_name())
self._params = {}
filename = subs_filename(subs_id, lang) Transcript.delete_asset(item.location, filename)
has_skipped = cache_values.get(has_skipped_cache_key) if has_skipped is None: has_skipped = SkippedReverification.check_user_skipped_reverification_exists(user, course_key) cache.set(has_skipped_cache_key, has_skipped)
for element in t.nodes[:-1]: self._dispatch(element) self._write(", ")
return cls(app_name, app_module)
s = Series([1, 2, 3], ['a', 'b', 'c'])
raise AssertionError('Error performing exclusion: ' 's1: %s s2: %s other: %s' % (s1, s2, other))
return str(out)
self.assertEqual(formset.is_valid(), False) self.assertEqual(Poem.objects.count(), 0)
frgd_arr = to_array(frgd_img) mask_arr = frgd_arr > 0.1
pairwise = True if pairwise is None else pairwise
token_query = dop_models.AccessToken.objects.select_related('user') return token_query.filter(token=access_token).first()
pass
idx = TimedeltaIndex(np.repeat(idx.values, range(1, len(idx) + 1)))
request = self.request_factory.get('/somewhere/') response = get_view(request) self.assertContains(response, 'This is a test')
#html_logo = None
inline_script = "messages[0] = {code}".format(code=self._get_random_number_code()) problem = self.build_problem(answer=inline_script)
self._assertion_errors.append(formatted_exc)
str(ring1) str(ring2)
clf = self.factory(loss='squared_loss', learning_rate='constant', eta0=eta, alpha=alpha, fit_intercept=True, n_iter=1, average=True, shuffle=False)
self.session.set_expiry(0) self.assertEqual(self.session.get_expiry_age(), settings.SESSION_COOKIE_AGE)
XBlockDisableConfig.objects.create( disabled_create_blocks=xblocks, enabled=True ) self.assertEqual( XBlockDisableConfig.disabled_create_block_types(), expected_result )
if settings.get('select_field'): select_field = settings['select_field'] if connection.ops.oracle: select_field.empty_strings_allowed = False else: select_field = Field()
VerificationStatus.add_verification_status(checkpoint, self.user, "submitted")
s = self.ts.iloc[[0]] result = s.var(ddof=1) self.assertTrue(isnull(result))
for pattern in self.ALLOW_URL_PATTERNS: if pattern.match(request.path) is not None: return None
return self.q(css='.wrapper-alert.is-shown').is_present()
self.assertEqual(list(r), [])
if not com.is_integer(rstep) or not rstep: raise ValueError
return self._int64index.join(other, how, level, return_indexers)
ret['master'] = ip_port[0] ret['master_port'] = ip_port[1]
response = client.patch(self.url, data=json.dumps(json_data), content_type=content_type) self.assertEqual(expected_status, response.status_code) return response
if self.token is not None and 'token' not in low: low['token'] = self.token
self.assertTrue(3.0 in s)
decision_only = OneVsRestClassifier(svm.SVR()).fit(X_train, Y_train) assert_raises(AttributeError, decision_only.predict_proba, X_test)
result = type(self)() memo[id(self)] = result return result
grains['osrelease'] = grains['kernelrelease'].split('-')[0]
REQUIRE_JS = "js/vendor/requirejs/require.js"
grid_search_no_score.fit(X, y)
if not has_html_certificates_enabled(course_id): log.info( "Invalid cert: HTML certificates disabled for %s. User id: %d", course_id, user_id, ) return render_to_response(invalid_template_path, context)
for stream in (StringIO(), HttpResponse()): serializers.serialize(self.serializer_name, [obj], indent=2, stream=stream)
self.assertRaises(TypeError, self.read_csv, path, dtype={'A': 'foo', 'B': 'float64'}, index_col=0)
multi_db = True
self.assertIsNone(self.service.get_credit_state(0, self.course.id))
if next_usage.block_type == "course": path = (next_usage, path) return flatten(path) elif parent is None: return None
from __future__ import absolute_import import os import random import string
self.t_ = None
self.assertEqual(resp.status_code, 200)
destroy(vm_['name'])
orig_tab_ids = [tab.tab_id for tab in self.course.tabs] tab_ids = list(orig_tab_ids) num_orig_tabs = len(orig_tab_ids)
unstacked = self.ymd.unstack(1).unstack(1)
response = self.client.get(index_url, {}, HTTP_ACCEPT='application/json') self.assertEqual(response.status_code, 500)
self.active = False self.save()
mock = MagicMock(return_value=return_value) new_patch = patch(function_name, new=mock) new_patch.start() self.addCleanup(new_patch.stop) return mock
setter(item, value[:, i].tolist())
self.assertEqual(res.shape, (nrows - 1, ncols + i))
import integration import salt.loader import inspect import yaml
err = ItemNotFoundError mock_get_course.return_value = err
if not hasattr(request, '_xblock_token'): request._xblock_token = uuid.uuid1().get_hex()
validate = URLValidator() try: validate(url) return True except ValidationError: return False
scaler_incr = scaler_incr.partial_fit(chunk)
self.assertFalse(formset.forms[0].empty_permitted) self.assertTrue(formset.forms[1].empty_permitted)
s = s.cat.as_ordered() result = s.value_counts() expected.index = expected.index.as_ordered() tm.assert_series_equal(result, expected, check_index_type=True)
if settings.DEBUG or settings.FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover()
errmsg = "No columns to parse from file"
response = self.assert_enrollment_status( as_server=True, mode=new_mode, is_active=new_is_active, expected_status=expected_status, )
Book.objects.using('other').create(title="Pro Django", published=datetime.date(2008, 12, 16))
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'softlayer_hw', vm_['profile'], vm_=vm_) is False: return False
text_list = self._find_within(selector).text return text_list[0] if text_list else None
other = Timedelta(other) other_mask = isnull(other) other = other.value
if palette == PALETTES[NOCOLOR_PALETTE]: return None return palette
credit_api.set_credit_requirement_status( self.user.username, self.course.id, "reverification", "midterm", status="failed", reason={} )
import salt.utils import salt.config as config from salt.utils import namespaced_function from salt.exceptions import ( SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
self.assertTrue(filecmp.cmp(path_test + '.bak', path_in))
if osdata['kernel'] in skip_cmds: _cmds = ()
from salt.modules import dpkg
pro.editor = george pro.save()
from django.core.management.base import BaseCommand from django.contrib.auth.models import User
for locale in self.LOCALES: os.utime(self.PO_FILE % locale, (0, 0))
instructor_dashboard_page = InstructorDashboardPage(self.browser, self.course_id) instructor_dashboard_page.visit() return instructor_dashboard_page
@decorators.memoize def __detect_os(): return salt.utils.which('nginx')
self.backend = backend return 'salt'
from .xqueue import * from .support import * from .webview import *
if HAS_GEOMETRY_COLUMNS: self.assertGeometryColumnsCount(2)
locate.__salt__ = {}
name = models.CharField(max_length=100, verbose_name='¿Name?') def __str__(self): return self.name
if self.increasing == 'auto': self.increasing_ = check_increasing(X, y) else: self.increasing_ = self.increasing
result = sql.read_sql_table('test_nan', self.conn) tm.assert_frame_equal(result, df)
return {'STATIC_URL': settings.STATIC_URL}
if v.is_indexed: index = v.index cur_optlevel = index.optlevel cur_kind = index.kind
__virtualname__ = 'dockerng'
train_data, test_data, target_train, target_test = train_test_split( data, target, test_size=.2, random_state=0)
'tools.salt_token.on': True, 'tools.salt_auth.on': False,
patcher = patch('pavelib.quality.sh') self._mock_paver_sh = patcher.start()
draft = self.get_item_from_modulestore(self.problem_usage_key, verify_is_draft=True) self.assertNotEqual(draft.data, published.data)
from salt.exceptions import CommandExecutionError
is_justify = not (self.inferred_type in ('string', 'unicode') or (self.inferred_type == 'categorical' and is_object_dtype(self.categories)))
if vm.summary.runtime.powerState != "poweredOn": status = 'VM must be powered on to upgrade tools' return status
for X in [data, csr_matrix(data)]: X = VarianceThreshold(threshold=.4).fit_transform(X) assert_equal((len(data), 1), X.shape)
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
return {'MEDIA_URL': settings.MEDIA_URL}
return StudioLibraryContainerXBlockWrapper.from_xblock_wrapper(xblock)
has_partial_fit = hasattr(self, 'partial_fit_')
run_once = True
return datetime.now(UTC()) > end_date if end_date is not None else False
user = None email = None language = None try: user = get_student_from_identifier(identifier) except User.DoesNotExist: email = identifier else: email = user.email language = get_user_email_language(user)
if not isinstance(course_id, basestring): raise ValueError('course_id must be a string. {} is not acceptable.'.format(type(course_id)))
if adjacent: self.leaveWhitespace() self.adjacent = adjacent self.skipWhitespace = True self.joinString = joinString
'ENABLE_S3_GRADE_DOWNLOADS': False,
super(RegenerateCertificatesTest, self).setUp() self.course = self.courses[0]
master = copy.deepcopy(salt.config.DEFAULT_MASTER_OPTS) master.update( log_level='info', log_level_logfile='info' )
import os.path import shutil
self._optimizer.iteration_ends(self.t_)
import salt.utils import salt.syspaths as syspaths
u"{user}@example.com".format( user=(u'e' * (EMAIL_MAX_LENGTH - 11)) )
member.name = member.name.replace('{0}/'.format(package), '') out_path = salt.syspaths.CONFIG_DIR
request = Request(self.request_factory.get('/')) request.user = requesting_user with check_mongo_calls(0): return list_courses(request, specified_user.username, org=org, filter_=filter_)
valid_input, field_errors = get_valid_input(request.data) if field_errors: return Response( status=status.HTTP_400_BAD_REQUEST, data={ 'field_errors': field_errors } )
from salttesting.helpers import ensure_in_syspath from salttesting import skipIf ensure_in_syspath('../../')
d = Document() d.myfile.delete()
input_formula = "x + y" self.assert_grade(problem, input_formula, "incorrect")
rtable = self.data.pivot_table(columns=['AA', 'BB'], margins=True, aggfunc=np.mean) tm.assertIsInstance(rtable, Series)
self.assertFalse(self.page.intro_video_element.visible)
functions = [] def __init__(self, opts): pass
self.course = modulestore().get_course(self.course.id)
from __future__ import print_function
self.assertEqual(self.ipv6_interface.with_hostmask, '2001:658:22a:cafe:200::1/::ffff:ffff:ffff:ffff')
super(IndexPage, self).__init__(browser)
perms = eauth.get(token['name'], []) perms.extend(eauth.get('*', []))
try: from xblock_django.user_service import DjangoXBlockUserService from crum import get_current_user
self.max_depth = 5
response = self.the_input.handle_ajax("obviously_not_real", {}) self.assertEqual(response, {})
mask = ids != -1 ids, val = ids[mask], val[mask]
self.enrollment = CourseEnrollmentFactory( user=self.user, course_id=self.course.id, mode="verified" )
STUDIO_VIEW = 'studio_view'
return self.q(css='.page-header .page-description')[0].text
if len(subarr) != len(index) and len(subarr) == 1: subarr = create_from_value(subarr[0], index, subarr.dtype)
'a minute ago', '%(count)s minutes ago', count
from salt.ext.six import string_types
ldap3 = inspect.getmodule(connect)
self.assertNotIn(test_discussion.location, self.store.get_orphans(course.id))
new_name = '{0}.sls.orig'.format(package) out_file = os.path.join(conn['pillar_path'], new_name)
try: return dict1[key] except KeyError: if default is None: return dict2[key] else: return dict2.get(key, default)
for i, parents_index in enumerate(self.parents_map): if i == 0:
if isinstance(space, VectorSpace) and space.sparse: del kwargs["batch_size"]
@python_2_unicode_compatible class Child1(AbstractBase1): data = models.CharField(max_length=25)
X = np.sort(5 * np.random.rand(40, 1), axis=0) y = np.sin(X).ravel()
admin_email_handler.include_html = True try: self.client.get('/', HTTP_HOST='evil.com') finally: admin_email_handler.include_html = old_include_html
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
self.assertNotEqual(session.session_key, 'someunknownkey')
self.mock.reset_mock() request = self._create_ssl_request(self.MOCK_URL) request.user = UserFactory() dec_mock(request) self.assertTrue(self.mock.called)
expected_mongo_calls = 1 serializer_class = CourseDetailSerializer
return self.as_matrix()
if not isinstance(answers, (list, tuple)): answers = [answers]
tenant = MockTenants() tenant.name = name tenant.description = description tenant.enabled = enabled return tenant
import itertools ax = _check_plot_works(df.plot, yerr=itertools.repeat(0.1, len(df))) self._check_has_errorbars(ax, xerr=0, yerr=2)
bulk_sku = models.CharField( max_length=255, null=True, blank=True,
if "field_type" in kwargs: kwargs["type"] = kwargs["field_type"]
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=staff).visit()
return None
self._reset() return self.partial_fit(X, y)
APP_UPGRADE_CACHE_TIMEOUT = 3600
self.axis = axis self.join_axes = join_axes self.keys = keys self.names = names self.levels = levels
class BandAdmin(ModelAdmin): fields = ['name'] ma = BandAdmin(Band, self.site) self.assertTrue(ma.lookup_allowed('name__nonexistent', 'test_value'))
values = DatetimeIndex(values) if values.tz is not None: return False
continue
graders = _filter_entrance_exam_grader(graders)
self.find_css('a.group-toggle').first.click()
import integration from integration.utils import testprogram import salt.utils import salt.defaults.exitcodes
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
class Meta: swappable = 'TEST_SWAPPABLE_MODEL'
courselike_label = self.parent_xml.split('.')[0]
unordered = frame.ix[[3, 2, 4, 1]] sorted_df = unordered.sort_index(axis=0) expected = frame assert_frame_equal(sorted_df, expected)
continue
self.browser.refresh() self.wait_for_page()
stamp = dparser.parse(stamp)
super(ExponentialLoss, self).__init__(1)
__virtualname__ = 'pgjsonb'
self.check_tab_json_methods(tab)
textinput = self.q(css=self._bounded_selector("#cohort-name")).results[0] textinput.clear() textinput.send_keys(cohort_name)
request.text
if ret and 'ret_kwargs' in ret: _options.update(ret['ret_kwargs'])
value.decode(charset)
index_float64_get = Benchmark('idx[1]', setup, name='index_float64_get', start_date=datetime(2014, 4, 13))
if imports:
if not path or not os.path.isfile(path): return ret
return (blank_choice if include_blank else []) + [ (x._get_pk_val(), smart_text(x)) for x in self.related_model._default_manager.all() ]
score_css = "div.chapters>section:nth-of-type({0}) div.sections>div:nth-of-type({1}) div.scores>ol>li".format( chapter_index, section_index )
from __future__ import absolute_import
NPM_VENDOR_DIRECTORY = path("common/static/common/js/vendor")
df_badcolumn = DataFrame( {'col1': [1, 2], 'custom_column_name': [2, 2]})
self.Ut = numpy.dot(self.V[:,-self.n_eigen:].transpose(), self.Xt)
dive.authors.set([mark])
DATE_INPUT_FORMATS = [
from __future__ import absolute_import import os
modulestore = XMLModuleStore( DATA_DIR, course_ids=course_ids, default_class='xmodule.hidden_module.HiddenDescriptor', xblock_mixins=XBLOCK_MIXINS, ) yield modulestore
func_globals.update(overridden_func_globals)
win_dns_client.__salt__ = {} win_dns_client.__context__ = {}
sw = np.sqrt(np.atleast_1d(sample_weight)) y = y * sw[:, np.newaxis] K *= np.outer(sw, sw)
raise PermissionDenied()
output = self.engine.render_to_string('if-tag-badarg01') self.assertEqual(output, '')
from __future__ import unicode_literals
return pd.DataFrame(dict([(c, s) for c, s in compat.iteritems(_intframe)]), dtype=np.int64)
if result['retcode'] == 1: return None ret = result['stdout'].splitlines() if all_: return ret else: try: return ret[-1] except IndexError: return ''
if actions: action_form = self.action_form(auto_id=None) action_form.fields['action'].choices = self.get_action_choices(request) else: action_form = None
return {'name': name, 'changes': {}, 'result': False, 'comment': 'Invalidly formatted pkgs parameter. See ' 'minion log.'}
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
win32security.SetNamedSecurityInfo( path, win32security.SE_FILE_OBJECT, win32security.OWNER_SECURITY_INFORMATION + win32security.GROUP_SECURITY_INFORMATION, userSID, groupSID, None, None )
self.assertIn(self.provider.name, response.content)
if not has_studio_read_access(user, course_key): raise PermissionDenied() course_module = modulestore().get_course(course_key, depth=depth) return course_module
import numpy as np self.np = np if hasattr(np, 'getbuffer'): self._getbuffer = np.getbuffer else: self._getbuffer = memoryview
verified.delete() self.assertFalse(CourseMode.has_payment_options(self.course_key))
response = file_upload_echo(request) request.upload_handlers.insert(0, QuotaUploadHandler()) return response
if isinstance(values, np.ndarray) and is_list_like(other): raise ValueError('Invalid broadcasting comparison [%s] ' 'with block values' % repr(other))
return False
if key.scope not in self._allowed_scopes: raise InvalidScopeError(key, self._allowed_scopes)
user = self.create_user_and_enroll('verified') self.add_verification_status(user, VerificationStatus.DENIED_STATUS)
#latex_use_modindex = True
if not settings.FEATURES.get('MILESTONES_APP', False): return None from milestones import api as milestones_api return milestones_api.get_user_milestones({'id': user.id}, namespace)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if len(vals) > 1: brname = vals[0]
from __future__ import unicode_literals
ip_num = ET.SubElement(content, 'no-of-public-ip') ip_num.text = config.get_cloud_config_value( 'ip_num', vm_, __opts__, default='1', search_global=False )
self.generated_operations[app_label] = stable_topological_sort(ops, dependency_graph)
world.scenario_dict['CHAPTER'] = world.ItemFactory.create( parent_location=world.scenario_dict['COURSE'].location, category='chapter', display_name='Test Chapter',
if answer_name in self.correct_inputs and not partial_correct: inputs_correct = False
return DataFrame(self._var_beta_raw, index=self.beta.index, columns=self.beta.index)
django_user_service = DjangoXBlockUserService(self.user) xb_user = django_user_service.get_current_user() self.assertTrue(xb_user.is_current_user) self.assert_xblock_user_matches_django(xb_user, self.user)
if col_name in parse_dates: try: fmt = parse_dates[col_name] except TypeError: fmt = None self.frame[col_name] = _handle_date_column( df_col, format=fmt)
return np.dot(A, B)
return i + (self._offset * self.n)
if '::' not in ip_str and ip_str.count(':') != 7: if ip_str.count('.') != 3: return False
self.assertNotContains(response, 'release_date__day=') self.assertNotContains(response, 'release_date__month=') for date in DATES: self.assert_contains_year_link(response, date)
expected = Series([Timestamp("19801222"), Timestamp("19801222")] + [Timestamp("19810105")] * 5) expected[2] = np.nan s[2] = np.nan
win_firewall.__salt__ = {} win_firewall.__opts__ = {}
def get(key, default=None): return connection_args.get('connection_' + key, __salt__['config.get'](prefix + key, default))
post = None
envs = __opts__.get('azurefs_envs', []) for env in envs: storage_conn = azure.get_storage_conn(opts=envs[env]) result = azure.list_blobs( storage_conn=storage_conn, container=env, )
from salt.cloud.clouds import dimensiondata from salt.exceptions import SaltCloudSystemExit
return pkg_info['versions']['stable'] or pkg_info['versions']['devel']
s = Series([], dtype=np.int64, name='foo') self.assertEqual(repr(s), 'Series([], Name: foo, dtype: int64)')
search_string = 'UpdateID=\'{0}\''.format(name)
import json import logging import uuid import time
test_svm.test_dense_liblinear_intercept_handling(svm.LinearSVC)
F, _ = f_regression(X, y)
o_values = values.astype(object) self.assertTrue(np.allclose(nanops._ensure_numeric(o_values), values), 'Failed for object ndarray')
self.user.is_staff = True self.assertTrue(user_has_role(self.user, CourseCreatorRole()))
self.assertRaises(ValueError, store.append, 'df_i8', df1)
if self._usage_key is None: self._usage_key = self.get_course_key().make_usage_key_from_deprecated_string(self._results_fields["id"]) return self._usage_key
import salt.loader import salt.utils import salt.client.ssh
return force_text(unquote_plus(force_str(quoted_url)))
name = self.cleaned_data.get("name").strip() or None
import time
return self.q(css=self.ADD_MISSING_GROUPS_SELECTOR).present
setattr(self, self._get_axis_name(axis), labels)
redirect_url = embargo_api.redirect_if_blocked( course_key, user=request.user, ip_address=get_ip(request), url=request.path ) if redirect_url: return redirect(redirect_url)
self.client.logout() self._test_return_login()
df = DataFrame([[1, 2], [3, 4]], dtype='int64') mask = DataFrame([[False, False], [False, False]]) s = Series([0, np.nan])
best_labels, best_inertia = \ _labels_inertia(X, x_squared_norms, best_centers, precompute_distances=precompute_distances, distances=distances)
return True
AccessTestData(partition_groups={1: 1, 2: 2}, merged_parents_list=[{1: {3}}, {1: {1}}], expected_access=True),
return sum([len(a.values) for a in self.values_axes])
from __future__ import absolute_import
return self.q(css=self.get_selector(css=css_selector))
import integration
return 1, object()
if len(combined) > 250: combined = fasthash(combined)
if value == 'True': new_line = key elif value == 'False': new_line = '' else: new_line = '{0} {1}'.format(key, value)
clear_url_caches()
image_pair = tuple(image_pair[0, :, :, :, 0])
actual = grouped_ser.filter(lambda x: len(x) > 1) expected = ser.take(expected_indexes) assert_series_equal(actual, expected)
tag = 'split_test'
self.assertAlmostEqual(self.ts[:15].cov(self.ts[5:]), self.ts[5:15].std() ** 2)
httpretty.register_uri(httpretty.POST, "https://verify.example.com/submit/")
from __future__ import absolute_import
import logging import pythoncom import threading
_check_all_orients(self.tsframe)
__virtualname__ = 'service'
assert_false(hasattr(BaggingClassifier(base).fit(X, y), 'decision_function'))
APPL_KINDS = OrderedDict([('master', 0), ('minion', 1), ('syndic', 2), ('caller', 3)])
df.ix[7, 'c'] = 1
__remove_temp_logging_handler()
from salttesting import TestCase from salt.ext.six.moves import range from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
from salt.exceptions import ( SaltClientError, CommandNotFoundError, CommandExecutionError, SaltInvocationError, )
self.assert_index_equal(Index(['a', 'b', 'c', 'd']), result.insert(0, 'a'))
solution_tags = ['solution']
masked = hash[:show] masked += char * len(hash[show:]) return masked
if not hasattr(self, 'components_'): self._init_latent_vars(n_features)
self.assertRedirects(response, '/redirect_to_self/', status_code=302, target_status_code=302) self.assertEqual(len(response.redirect_chain), 2)
MESSAGE = _( 'Non usable git url provided. Expecting something like:' ' git@github.com:mitocw/edx4edx_lite.git' )
import salt.utils.url
pillar_value = yaml.load(value)
self._add_user_partitions(scheme_id='cohort') actual = GroupConfiguration.get_or_create_content_group(self.store, self.course) expected = self._get_expected_content_group(usage_for_group=[]) self.assertEqual(actual, expected)
self._future._future_with_timeout = self if self._future.done(): future_with_timeout_callback(self._future)
root_courselike_dir = self.root_dir + '/' + self.target_dir self.process_extra(root, courselike, root_courselike_dir, xml_centric_courselike_key, export_fs)
self.assertFalse(linode._validate_name('foo_'))
source = ds_list[0] ds = DataSource(source.ds)
procedure_fmt += ",'%(spheroid)s'" procedure_args.update({'function': backend.length_spheroid, 'spheroid': params[1]})
return self.store.check_supports(block.location.course_key, 'copy_from_template')
objects = CourseRerunUIStateManager()
data = "1,2\n3,4,5"
bandwidth = cluster.estimate_bandwidth(X, quantile=0.3)
([], 'honor'),
return self._folds[k]
linkedin_config = LinkedInAddToProfileConfiguration.current()
assert_raises(ValueError, km.fit, [[0., 1.]])
return response
self.allow_thread_sharing = allow_thread_sharing self._thread_ident = thread.get_ident()
rendered = pieces["short"]
return self._apply_to_column_groupbys( lambda x: x._cython_agg_general('ohlc'))
self.column_sql(model, field) for sql in self.geometry_sql: self.execute(sql) self.geometry_sql = []
'correct': 'is_correct',
self.assertTrue(check_password('letmein', encoded, setter)) self.assertFalse(state['upgraded'])
try:
if create_sql_indexes: conn.execute('create index left_ix on left(key, key2)') conn.execute('create index right_ix on right(key, key2)')
self.position = position
self.assertEqual(result, list(range(256)))
from __future__ import absolute_import
import logging import json
children = self.q(css='.note') return [EdxNotesPageItem(self.browser, child.get_attribute("id")) for child in children]
self.assertTrue(all_gradesets[student1]) self.assertTrue(all_gradesets[student2]) self.assertTrue(all_gradesets[student5])
response = self.client.post('/post_view/', {}) self.assertEqual(response.status_code, 200)
grouped.apply(f) grouped.aggregate(freduce) grouped.aggregate({'C': freduce, 'D': freduce}) grouped.transform(f)
@xframe_options_sameorigin def a_view(request): return HttpResponse() r = a_view(HttpRequest()) self.assertEqual(r['X-Frame-Options'], 'SAMEORIGIN')
self.submit_question_answer('p1', {'2_1': u'ⓤⓝⓘⓒⓞⓓⓔ'}) self.submit_question_answer('p2', {'2_1': 'Correct'})
svc_realpath = _get_svc_path(name)[0] down_file = os.path.join(svc_realpath, 'down')
np.random.seed(0)
CACHE_TIMEOUT = 0
temp_dir = __salt__['temp.dir'](prefix='pkg-')
self.assertEqual(list(Parcel.objects.transform(srid, field_name='city__location__point')), [])
import salt.utils.cloud import salt.config as config from salt.exceptions import ( SaltCloudException, SaltCloudSystemExit, SaltCloudConfigError, SaltCloudExecutionTimeout, SaltCloudExecutionFailure )
import ioflo.base.deeding
role = CourseCcxCoachRole(self.course.id) role.add_users(self.coach) self.request_factory = RequestFactory()
'outputter_dirs': list,
raise NotImplementedError
CDN_VIDEO_URLS = {}
selector = RFE(estimator, step=0.20) sel = selector.fit(X, y) assert_equal(sel.support_.sum(), n_features // 2)
random_state = check_random_state(0) tsne = TSNE(metric="chebyshev") X = random_state.randn(5, 2) tsne.fit_transform(X)
if not get_override_for_user(student, unit, 'due'): raise DashboardError(_("No due date extension is set for that student and unit."))
copy_course_videos(source_course_key, destination_course_key)
for prefix in sorted(self._prefix_registry, reverse=True): if key.startswith(prefix): return self._prefix_registry[prefix]
add_user_with_status_unrequested(self.user) self.assertEqual('granted', get_course_creator_status(self.user))
self.user = UserFactory(is_staff=True) self.client = AjaxEnabledTestClient() self.client.login(username=self.user.username, password='test')
import salt.minion import salt.loader import salt.utils
self.assertContentBefore(response, link2, link1)
return self.table_name_converter(name)
if not settings.FEATURES.get('ENABLE_VIDEO_UPLOAD_PIPELINE'): filtered_list.append('video_upload_pipeline')
# Copyright (C) 2014 Floris Bruynooghe <flub@devork.be>
from __future__ import unicode_literals
parents = [b for b in bases if isinstance(b, ModelBase)] if not parents: return super_new(cls, name, bases, attrs)
coach_user = UserFactory( username='test_coach_user', email='test_coach_user@openedx.org', password='test' ) CourseCcxCoachRole(self.master_course_key).add_users(coach_user)
continue
return isinstance(array, (gt.ABCSparseArray, gt.ABCSparseSeries))
ensemble = BaggingRegressor(base_estimator=DecisionTreeRegressor(), max_samples=1.0, bootstrap=True, random_state=rng).fit(X_train, y_train)
try: if not _available(name, ret): return ret except CommandExecutionError as exc: ret['result'] = False ret['comment'] = exc.strerror return ret
export_extra_content( export_fs, self.modulestore, self.courselike_key, xml_centric_courselike_key, 'static_tab', 'tabs', '.html' )
line = line[10:] commented_cron_job = True
requirement = CreditRequirement.objects.create( course=course, namespace='grade', name='grade', )
X_csc_scaled = scale(X_csr.tocsc(), with_mean=False) assert_array_almost_equal(X_scaled, X_csc_scaled.toarray())
return [Attribute('height'), Attribute('width'), Attribute('molecules'), Attribute('geometries'), ]
T = [1.0 * x for x in lrange(1, 10) * 10][:1095] result = Series(T, lrange(0, len(T)))
config_course_cohorts(course, is_cohorted=False, discussion_topics=["General", "Feedback"])
with self.settings(DEBUG=True, FOOBAR={42: None}): response = self.client.get('/raises500/') self.assertContains(response, 'FOOBAR', status_code=500)
self.assertEqual(hasher.encode.call_count, 1)
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
if connection.features.supports_nullable_unique_constraints: UndergroundBar.objects.create()
from salttesting.case import ModuleCase from salttesting.mixins import RUNTIME_VARS
distinct_value_indices = np.where(np.logical_not(isclose( np.diff(y_score), 0)))[0] threshold_idxs = np.r_[distinct_value_indices, y_true.size - 1]
for course_key in courses: self.assertTrue(is_course_in_block_structure_cache(course_key, self.store))
raise NotImplementedError()
assert_equal(X_pred.shape[0], n_samples)
clf = GradientBoostingClassifier(n_estimators=100, random_state=1) clf.fit(X, y)
zero_mean = rng.normal(size=shape) * self.sigma return zero_mean + v_mean
gp = GaussianProcessRegressor(kernel=kernel)
return
labels = birch_model.labels_ centroids = birch_model.subcluster_centers_ n_clusters = np.unique(labels).size print("n_clusters : %d" % n_clusters)
cert_set = ExampleCertificateSet.objects.create(course_key=self.COURSE_KEY) return ExampleCertificate.objects.create( example_cert_set=cert_set, description=self.DESCRIPTION, template=self.TEMPLATE )
seed = module.seed self.assertTrue(seed is not None)
self.assertIn(npath(filename), autoreload.gen_filenames(only_new=True)) self.assertNotIn(npath(filename), autoreload.gen_filenames(only_new=True))
data.take(indexer, out=out, axis=i)
source, source_hash = __salt__['file.source_list'](source, source_hash, __env__)
if isinstance(slicer, compat.string_types): import pandas try: slicer = getattr(pandas, slicer) except: raise Exception("cannot create this slicer [%s]" % slicer)
if created: enrollment.mode = CourseMode.DEFAULT_MODE_SLUG enrollment.is_active = False enrollment.save()
output = self.engine.render_to_string('cache18') self.assertEqual(output, 'cache18')
self._enroll(course.id, "verified")
component = OrderedDict() for field in header: component[field] = entry[header.index(field)]
elif all_indexed_same: from pandas.tools.merge import concat return concat(values)
stack = traceback.extract_stack(limit=2)
y = 0.5 * X.ravel()
if did_validate: updated_data = cls.update_from_dict(key_values, descriptor, user, save=False)
n_samples = int(X.shape[0]) rs = check_random_state(self.random_state)
assert_almost_equal(reference._stats, result._stats[:, i], check_dtype=False)
from django.db.backends.oracle.base import Database
CourseUserGroup.objects.create( name="TestOtherGroupType", course_id=self.course_key, group_type="dummy" ) self.assertFalse(mock_tracker.called)
properties = obj_schema.get('properties') if properties: for _, prop_obj_schema in properties.iteritems(): dep_models_list.extend(self._build_dependent_model_list(prop_obj_schema))
if only_lhs: self.band_rhs = 1 self.band_lhs = self.lhs.band_index + 1 return
with open(self.f.name, 'w') as f: f.write("foo/hello/test.py:304:15: E203 whitespace before ':'")
return self.qty * self.unit_cost
output_buffer = StringIO(render_to_string("instructor/instructor_dashboard_2/executive_summary.html", data_dict))
with self.assertRaises(TypeError): command.run_from_argv(['', ''])
if found_using_guid: for update in wua_search_result.Updates: wua_found.Add(update) else: for update in wua_search_result.Updates: if name in update.Title: wua_found.Add(update)
slice_ = [[slice_]]
return self.iloc[:n]
train_data = iter(ALL_FOOD_DOCS[:-1]) tv = TfidfVectorizer(norm='l1')
from salttesting.unit import skipIf from salttesting.helpers import ( ensure_in_syspath, destructiveTest) ensure_in_syspath('../../../')
return u"{namespace}:{name}, {value}".format( namespace=self.namespace, name=self.name, value=self.value, )
assert_array_almost_equal((tfidf ** 2).sum(axis=1), [1., 1., 1.])
return []
self.top_words = self.top_dict( temp_all_words, self.num_top_words )
with super(CreateSubCommentUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
X_, y_ = make_classification(n_samples=200, n_features=100, weights=[0.833, 0.167], random_state=0)
import salt.config from salt.utils.schedule import Schedule
from __future__ import absolute_import
return ['sub']
if item in ['constraint']: cmd += [item_type]
world.visit('/') assert_in(uname, world.css_text('span.account-username', timeout=10))
from salttesting.helpers import destructiveTest, ensure_in_syspath
script = namespaced_function(script, globals()) reboot = namespaced_function(reboot, globals())
missing_vms = names.difference(invalid_func_vms) if missing_vms: ret['Not Found'] = list(missing_vms) ret['Not Actioned/Not Running'] = list(names)
raise VersionConflictError(course_key, version_guid)
self.assertEqual(event.dt, dt.replace(tzinfo=EAT))
task_type = 'problem_responses_csv' task_class = calculate_problem_responses_csv task_input = {'problem_location': problem_location} task_key = "" return submit_task(request, task_type, task_class, course_key, task_input, task_key)
if not salt.utils.which('zypper'): return (False, "Module zypper: zypper package manager not found") return __virtualname__
client = get_file_client.return_value client.cache_file.return_value = self.top_file.name
return dict(_typ=self._typ, _subtyp=self._subtyp, _data=self._data, fill_value=self.fill_value, name=self.name)
cov = ShrunkCovariance(shrinkage=0.) cov.fit(X) assert_array_almost_equal(empirical_covariance(X), cov.covariance_, 4)
return None
self.config.pop(cli_log_path)
response_element = etree.Element("formularesponse")
self._update_release_dates(self.date_one, self.date_one, self.date_one) self._verify_release_date_source(self.vertical, self.chapter)
intersphinx_mapping = {'http://docs.python.org/': None}
interface = interface.split('\\') interface = ''.join(interface)
self.bulk._end_bulk_operation(self.course_key)
from salt.ext.six.moves import range from salt.ext.six.moves import zip from salt.ext.six.moves import map from stat import S_IMODE
if expected != actual: raise AssertionError("values not equal, expected: %r, actual: %r" % (expected, actual))
return
self._verify_unit_warning( self.UnitState(is_released=True, publish_state=self.PublishState.PUBLISHED, is_locked=False), None )
self.assertEqual(request.FILES.getlist('foo'), [])
if user_attr_name == 'user_anonymous': user = AnonymousUserFactory() else: user = getattr(self, user_attr_name) user = User.objects.get(id=user.id)
__virtualname__ = 'service'
from salt.ext import six from salt.ext.six.moves import zip
while length != self.batch_size: batch = self._base_iterator.next()
sorted_values = c.take_data().take(sorter, axis=0) if sorted_values.ndim == 1: sorted_values = sorted_values.reshape( (sorted_values.shape[0], 1))
return cls.objects.filter(requirement__in=requirements, username=username)
try: import ethtool HAS_ETHTOOL = True except ImportError: HAS_ETHTOOL = False
return
else: response.content = msg
if isinstance(output, tuple) and len(output) == 2: output = output[0]
from __future__ import absolute_import import time
container = self.go_to_nested_container_page() self.modify_display_name_and_verify(container)
tag_links = self.q(css=self._bounded_selector(self.TAG_SELECTOR)) if len(tag_links) == 0: return None return[tag_link.text for tag_link in tag_links]
i10 = SouthTexasInterstate.objects.length().get(name='I-10') self.assertAlmostEqual(len_m2, i10.length.m, 2)
api.set_credit_requirement_status("bob", self.course_key, "grade", "grade")
usage_key = UsageKey.from_string(usage_key_string) usage_key = usage_key.replace(course_key=modulestore().fill_in_run(usage_key.course_key)) return usage_key
ItemFactory.create( category="html", parent_location=library.location, user_id=self.user_id, publish_item=False, modulestore=self.store, data=message ) library = self.store.get_library(library.location.library_key)
if profile in current_state: ret['result'] = True ret['comment'] = 'System already in the correct state' return ret
params = self._signed_callback_params( self.order.id, self.COST, self.COST, card_number='nodigits' ) result = process_postpay_callback(params)
courses2 = import_course_from_xml( self.store, self.user_id, self.export_dir, source_dirs=[top_level_export_dir], static_content_store=contentstore, target_id=dest_course_key2, create_if_not_present=True, raise_on_failure=True, )
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salt.utils.cache import context_cache
self.traverse_qs( Person.objects.prefetch_related('houses__rooms', 'houses'), [['houses', 'rooms']] )
ax = self.obj._get_axis(min(axis, self.ndim - 1)) return ax._convert_scalar_indexer(key, kind=self.name)
lines = __salt__['cmd.run_stdout']("/bin/pkg list -Huv").splitlines() for line in lines: upgrades[_ips_get_pkgname(line)] = _ips_get_pkgversion(line) return upgrades
lookup_name = 'strictly_below'
one_to_many = False one_to_one = False many_to_many = False many_to_one = False
need_uniq_names = ('problem', 'sequential', 'video', 'course', 'chapter', 'videosequence', 'poll_question', 'vertical')
assert_array_equal(lfw_pairs_train.target, [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]) assert_array_equal(lfw_pairs_train.target_names, expected_classes)
comps = line.split() path = comps[0] mask = comps[1]
self.check_result_type(np.complex128, np.complex128)
if len(other) == 1: other = np.array(other[0])
self.wait_for_ajax() closed_caption_state_selector = self.get_element_selector(CSS_CLASS_NAMES['closed_captions']) return self.q(css=closed_caption_state_selector).visible
nullqs = State.objects.filter(poly__isnull=True) validqs = State.objects.filter(poly__isnull=False)
X_dense = theano.sparse.dense_from_sparse(X) noise = self.random_stream.binomial(size=X_dense.shape, n=1, prob=self.ratio, ndim=None)
return DataFrame(self._beta_raw, index=self._result_index, columns=self._x.columns)
try: import pymongo HAS_PYMONGO = True except ImportError: HAS_PYMONGO = False
CONFIG_ROOT = path(os.environ.get('CONFIG_ROOT', ENV_ROOT))
if not request.COOKIES and response.cookies and has_vary_header(response, 'Cookie'): return response
name, val = forbid_multi_line_headers(name, val, 'ascii') MIMEMessage.__setitem__(self, name, val)
grains['virtual_subtype'] = 'Xen Dom0'
return True
from salt.exceptions import SaltRenderError import salt.utils.templates
import fnmatch import re
target_mod = module + '.' if not module.endswith('.') else module
grandfathered_student = UserFactory() grandfathered_student.date_joined = timezone.now()
d = Series([1] * 5) x = d.rolling(window=5).kurt() tm.assert_series_equal(all_nan, x)
U, s, V = linalg.svd(X, full_matrices=False)
selector = self.get_element_selector(VIDEO_BUTTONS['quality']) classes = self.q(css=selector).attrs('class')[0].split() return 'active' in classes
return abs(student_complex - instructor_complex) <= tolerance
if '?#' in name and not unparsed_name[3]: unparsed_name[2] += '?' return urlunsplit(unparsed_name)
from __future__ import unicode_literals
result = [_quantile(values, q * 100, axis=axis, **kw) for q in qs]
text_present = False text_list = page.q(css=css_selector).text if len(text_list) > 0 and (text in text_list): text_present = True return text_present
try: if os.path.exists(folder_path): shutil.rmtree(folder_path) except WindowsError: warnings.warn("Failed to clean temporary folder: %s" % folder_path)
values = self.get_param_values() values = [value.reshape(value.size) for value in values] return np.concatenate(values, axis=0)
self.assertNotEqual(Place(id=1), Restaurant(id=1)) self.assertNotEqual(Restaurant(id=1), Place(id=1))
low['__jid__'] = jid low['__user__'] = user low['__tag__'] = tag
rs = com._random_state(random_state)
if not prepared: value = connection.ops.deconstruct_raster(value) return super(RasterField, self).get_db_prep_value(value, connection, prepared)
for n, color in enumerate(colors): data = X_test[y_test == n] plt.scatter(data[:, 0], data[:, 1], marker='x', color=color)
cat = pd.Categorical([np.nan, 1, 2, 3]) self.assertTrue(com.is_integer_dtype(cat.categories))
last_element = t.nodes[-1] self._dispatch(last_element)
if isinstance(left, ABCSeries) and isinstance(right, ABCSeries): left, right = left.align(right, copy=False)
@property def srid(self): return bool(ord(wkb_writer_get_include_srid(self.ptr)))
msg = "No valid user id found in endpoint URL" log.info("[LTI]: {}".format(msg)) raise LTIError(msg)
problems = { "checkbox_two_choices": checkbox_two_choices, "checkbox_2_choices_2_inputs": checkbox_two_choices_two_inputs }
#needs_sphinx = '1.0'
s = self.frame['C'].copy() s.name = None
grid_search.scoring = 'sklearn' assert_raises(ValueError, grid_search.fit, X, y)
self.key = key return 1
self.assertNotIn(extra_user.username, response.content)
from __future__ import unicode_literals
if 'account_privacy' in update: update_user_preferences( requesting_user, {'account_privacy': update["account_privacy"]}, existing_user )
nv.validate_cumsum(args, kwargs) if axis is None: axis = self._stat_axis_number return self.apply(lambda x: x.cumsum(), axis=axis)
assert_true(ocur == X.shape[1])
test_data = {'x': 'y', 'v': 'z', 'd': {'o': object, 'a': 'b'}}
self.course_nav.q(css='fieldset label:nth-child(3) input').nth(0).click()
self.assertIn(orphan_vertical.location, self.store.get_orphans(course.id))
result = f.clean('1:30:05 PM') self.assertEqual(result, time(13, 30, 5))
return name
return super(AdaBoostRegressor, self).fit(X, y, sample_weight)
return {}
grains['locale_info']['defaultlanguage'] = 'unknown' grains['locale_info']['defaultencoding'] = 'unknown'
tracker.emit( SETTING_CHANGE_INITIATED, { "setting": "password", "old": None, "new": None, "user_id": request.user.id, } )
rng = np.random.RandomState(0) rand_data = RandomData(rng) n_samples = 500 n_features = rand_data.n_features n_components = rand_data.n_components
arr = np.array( [[[1, 2, 3], [0, 0, 0]], [[0, 0, 0], [0, 0, 0]]], dtype=np.float64)
return ExcelFile(os.path.join(self.dirpath, basename + self.ext))
try: self.assertIn(self.INSTANCE_NAME, delete_str) self.assertIn('True', delete_str) except AssertionError: raise
block = self._add_simple_content_block()
list_of_ids = [unicode(top_parent_object.location)] for child in top_parent_object.get_children(): list_of_ids.extend(id_list(child)) return list_of_ids
self.initiate_rerun()
from salt.states import ports import os
course_key = self.kwargs.get(self.lookup_field) if course_key is not None: self.kwargs[self.lookup_field] = CourseKey.from_string(course_key)
graph = graph.tocsr()
return np.dot(X.ravel(), Y.ravel())
from salt.modules import qemu_img import os
for part_svc in [ps_shared_cache_1, ps_diff_cache, ps_uncached]: self.assertEqual( first_group.id, part_svc.get_user_group_id_for_partition(user_partition_id) )
clf = RandomForestClassifier(n_estimators=20)
X_train, X_test, y_train, y_test = train_test_split(cal_housing.data, cal_housing.target, test_size=0.2, random_state=1) names = cal_housing.feature_names
path = event.path while path != '/': if path in config: break path = os.path.dirname(path)
cache.set('unpicklable', UnpicklableType())
'master_job_cache': str,
files = [] state = dict(files=files) os.path.walk('.',file_filter,state)
raise NotImplementedError
sample_dict = {'x': (-10, 10), 'y': (-10, 10)}
cls.html_unit = ItemFactory.create( parent_location=cls.vertical.location, category="html", display_name="Html Content", publish_item=False, )
self.correct_responses[name] = self.SCHEMATIC_CORRECT self.incorrect_responses[name] = self.SCHEMATIC_INCORRECT
ret['result'] = random.choice([True, False])
if self.lcp.is_queued(): prev_submit_time = self.lcp.get_recentmost_queuetime()
if self.closed() and not is_survey_question: return False
return self.q(css='.nav-actions a.new-program-button').present
for block in blocks: if blocks[block]['block_type'] == 'sequential': block_format = blocks[block]['format'] if block_format not in assignments: assignments[block_format] = OrderedDict() assignments[block_format][block] = list()
return self.q(css='.item-progresspoint-success-date').visible
from sklearn import datasets, svm, pipeline from sklearn.kernel_approximation import (RBFSampler, Nystroem) from sklearn.decomposition import PCA
if rate_limiter.is_rate_limit_exceeded(request): log.info(u"Bad request rate limit exceeded for update example certificate end-point.") return HttpResponseForbidden("Rate limit exceeded")
return np.abs(y_truth - y_prediction).sum() > tol
([]),
assert_array_equal(votes[0, :], 1) assert_array_equal(np.argmax(votes[1:], axis=1), ovo_prediction[1:]) assert_equal(ovo_prediction[0], normalized_confidences[0].argmax())
import salt.cloud from salt.exceptions import ( SaltCloudConfigError, SaltCloudException, SaltCloudSystemExit, SaltCloudExecutionTimeout, SaltCloudExecutionFailure, SaltCloudPasswordError )
def f(): s[slice(-10.0, 10.0)]
registration = Registration() registration.register(user)
apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
self.assertIsNone(self.service.get_credit_state(self.user.id, self.course.id))
else: assert self.line_search_mode == 'exhaustive'
user_exists = __salt__['mongodb.user_exists'](name, user, password, host, port, database, authdb) if user_exists is True: return ret
n_jobs, _, _ = _partition_estimators(self.n_estimators, self.n_jobs)
if not (entry == '.' or entry.startswith(('file://', '/'))): match = egg_match.search(entry)
self.dashboard_page.visit()
self.assertEqual(len(self.lc_block.get_child_descriptors()), 1) self.assertEqual(len(self.lc_block.get_content_titles()), 1)
'track', 'eventtracking.django.apps.EventTrackingConfig',
if timed_exam.is_proctored_exam and not timed_exam.is_practice_exam: try: update_review_policy( exam_id=exam_id, set_by_user_id=timed_exam.edited_by, review_policy=timed_exam.exam_review_rules ) except ProctoredExamReviewPolicyNotFoundException:
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
if val == val: nobs[lab, 0] += 1 prodx[lab, 0] *= val
continue
for op in ['__add__', '__sub__', '__mul__', '__truediv__']: self.assertRaises(TypeError, lambda: getattr(s, op)(2))
with mock.patch('commerce.signals.refund_seat') as mock_refund_seat: self.send_signal() self.assertFalse(mock_refund_seat.called)
self.assertTrue(res_json['success']) self.assertEqual( res_json['message'], u"Certificate generation started for white listed students." )
self.get_data_specs(model)[0].validate(data) return None
children = self.client.get_children(self.path, self._watch_lease_change)
def _get_ptr(self): if self._ptr: return self._ptr else: raise GEOSException('NULL GEOS %s pointer encountered.' % self.__class__.__name__)
self.function = 'ST_Length_Spheroid' self.source_expressions.append(Value(geo_field._spheroid))
if fill_value.dtype == np.object_: dtype = np.dtype(np.object_) fill_value = np.nan
'cython_enable': bool,
self.assertRaises(TypeError, lambda: RangeIndex(1, 5, dtype='float64'))
expected = DataFrame([[False, False], [False, True], [True, True]]) result = df > b assert_frame_equal(result, expected)
return self.index
reindexed_bool = bool_ts.reindex(bool_ts.index[::2]) self.assertEqual(reindexed_bool.dtype, np.bool_)
(offset_lom_aug_thu, datetime(2012, 8, 30), True), (offset_lom_aug_thu, datetime(2011, 9, 1), True),
if com.is_list_like(key): return self.reindex(**{self._get_axis_name(axis): key})
#html_use_modindex = True
result = df.iloc[[-1, 1, 3], [-1, 1]] expected = df.ix[[18, 2, 6], [6, 2]] assert_frame_equal(result, expected)
_, created = ed.books.get_or_create(name='The Great Book of Ed', publisher_id=p.id) self.assertTrue(created)
destroy(vm_['name'])
from __future__ import unicode_literals
delta = time.time() - os.stat(path).st_mtime self.assertLess(delta, 10, "%s was recently modified" % path)
response.wsgi_request = request
from salt.exceptions import CommandExecutionError import salt.utils.http
wkt_writer_create = GEOSFuncFactory('GEOSWKTWriter_create', restype=WKT_WRITE_PTR) wkt_writer_destroy = GEOSFuncFactory('GEOSWKTWriter_destroy', argtypes=[WKT_WRITE_PTR])
self.m2m_column_name = curry(self._get_m2m_attr, related, 'column') self.m2m_reverse_name = curry(self._get_m2m_reverse_attr, related, 'column')
self._verify_branch_setting(ModuleStoreEnum.Branch.draft_preferred) _verify_revision_is_published(location)
replication_item = ('Replication', 'put_replication', _describe.get('Replication', {}).get('ReplicationConfiguration'), _compare_replication, Replication, 'delete_replication')
def _translate_newlines(self, data): if data is None or not data: return return data.replace('\r\n', os.linesep)
primitive_command = -2
item_id_show = item_id if item in ['constraint'] or '=' in item_id: item_id_show = None
lkey, rkey, count = fkeys(lkey, rkey)
ptown = fromstr('POINT(992363.390841912 481455.395105533)', srid=2774)
user, client_name = mock_get_id_token.call_args[0] self.assertEqual(user, self.user) self.assertEqual(client_name, "programs")
cluster_centers = _init_centroids( X, self.n_clusters, self.init, random_state=random_state, x_squared_norms=x_squared_norms, init_size=init_size)
if value_is_extension_type:
pd_result = Parallel(n_jobs=n_jobs, verbose=verbose)( delayed(partial_dependence)(gbrt, fxs, X=X, grid_resolution=grid_resolution, percentiles=percentiles) for fxs in features)
self.user = User.objects.get(pk=self.user.pk)
try: import systemd.journal HAS_SYSTEMD = True except ImportError: HAS_SYSTEMD = False
COURSE_ACTION_STATES = (CourseRerunState, )
self.assertRaises(TypeError, RangeIndex, '0', '1', '2')
MEMCACHE_MAX_KEY_LENGTH = 250
tm.assert_frame_equal(df, exp_fancy)
ret['changes'] = {}
cache.clear() CertificateGenerationConfiguration.objects.create(enabled=True) self.client.login(username=self.global_staff.username, password='test')
from __future__ import absolute_import import getpass import grp import pwd import os import shutil import sys
from django.contrib.contenttypes import views as contenttype_views
assert_warns(DataConversionWarning, clf.fit, X, y_) assert_array_equal(clf.predict(T), true_result) assert_equal(100, len(clf.estimators_))
import salt.utils from salt.version import SaltStackVersion as _SaltStackVersion from salt.exceptions import CommandExecutionError, CommandNotFoundError
self.assertRaises(TypeError, lambda: ci.append(['a', 'd']))
unfit_val_items = unfit_val_locs[0].append(unfit_val_locs[1:])
df = r['faithful']
elif is_numeric_v_string_like(values, other): result = False
for y_pred in clf.staged_predict(X_test): assert_equal(y_test.shape, y_pred.shape)
return modulestore().update_item(xblock, user.id)
with patch('openedx.core.djangoapps.safe_sessions.middleware.log.error') as mock_log: yield self.assertFalse(mock_log.called)
pass
filters_regex = re.compile(r'\|([.,\w\s]*)\}') filters_match = filters_regex.search(expression.expression)
result = Series(dtype=float).sum() self.assertEqual(result, 0)
kwargs = {'srid': srs.srid, 'auth_name': auth_name, 'auth_srid': auth_srid or srs.srid, 'proj4text': srs.proj4, }
staff = self.make_staff() self.assertTrue(CourseStaffRole(self.course.id).has_user(staff))
self.register_page = CombinedLoginAndRegisterPage(self.browser, start_page="register") self.dashboard_page = DashboardPage(self.browser)
if not hasattr(self, 'n_samples_seen_'): self.n_samples_seen_ = 0 self.mean_ = .0 self.var_ = .0
obj = self.construct_scalar(node) if six.PY2: obj = obj.encode('utf-8') return SLSString(obj)
mathjax_container = self.q(css="div.problem p .MathJax_SVG") return mathjax_container.visible and mathjax_container.present
super(CoachAccessTestCaseCCX, cls).setUpClass() cls.course = CourseFactory.create()
resp = self.client.ajax_post('/course/', self.course_data) self.assertEqual(resp.status_code, 403)
from salttesting import skipIf, TestCase from salttesting.mock import ( MagicMock, NO_MOCK, NO_MOCK_REASON, patch )
import json
time_last_reset = history[0].time_set
dd_intercept = np.squeeze(np.array(dX.sum(axis=0)))
else: clean = sp_maker(value, self.index)
recipient_selector_css = "input[name='send_to'][value='{}']".format(recipient) self.q(css=self._bounded_selector(recipient_selector_css))[0].click()
return get_endpoint(settings.EDXNOTES_PUBLIC_API, path)
from salt.modules import cp from salt.utils import templates from salt.exceptions import CommandExecutionError
course_mode = CourseMode.objects.get(pk=1) self.assertEqual(course_mode.expiration_datetime.replace(tzinfo=None), expiration.replace(tzinfo=None))
self.test_cleanup()
source_subs_filedata = request.FILES['transcript-file'].read().decode('utf-8-sig') source_subs_filename = request.FILES['transcript-file'].name
homework_1_score = 1.0 / 2 homework_2_score = 0.0 self.check_grade_percent(round((homework_1_score + homework_2_score) / 2, 2))
fs_root = mkdtemp()
self._check_roundtrip(df[:0], tm.assert_frame_equal)
return (self.expiration_date - timedelta(days=1)).strftime("%B %d, %Y") if self.expiration_date else None
request_password_change(self.EMAIL, self.ORIG_HOST, self.IS_SECURE)
result = Series(dtype='m8[ns]').sum() self.assertEqual(result, Timedelta(0))
remove_steps |= set([self.INTRO_STEP])
settings.STATICFILES_DIRS.append( (u'themes/{}'.format(settings.THEME_NAME), theme_root / 'static') )
#pylint: disable=E0602
break
allowance_section.click_add_allowance_button()
reviewing_user = models.ForeignKey( User, db_index=True, default=None, null=True, related_name="photo_verifications_reviewed" )
if name not in nodes: return {} salt.utils.cloud.cache_node(nodes[name], __active_provider_name__, __opts__) return nodes[name]
user_name = 'SYSTEM'
'startup_states': str,
input_type = kwargs.get('type', 'radiotextgroup') input_element = etree.Element(input_type)
from __future__ import unicode_literals
IPFilter.objects.create( whitelist="192.168.10.20", enabled=True )
import os import fnmatch
return process_request_response
request = HttpRequest() request.META = { 'HTTP_HOST': "invalid_hostname.com", } self.assertEqual(request.get_host(), "invalid_hostname.com")
iy,ix = N.array((ky,kx)) - topleft col = iy*inshp[2]+ix +\
mask = inds != -1 ok_labels, uniques = algos.factorize(inds[mask], sort=True)
df['B'] = i result = df['B'] assert_series_equal(result, expected, check_names=False) self.assertEqual(result.name, 'B')
out_file.write(', fillcolor="#C0C0C0"')
libv = LibVersion() libv.print_versions() libv.print_exp_env_info(args.print_theano)
estimators = [c for c in estimators if not is_abstract(c[1])]
result = Timedelta(nanoseconds=100) expected = Timedelta('100ns') self.assertEqual(result, expected)
return sig.replace(parameters=tuple(sig.parameters.values())[1:])
class AbstractBase3(models.Model): comment = models.CharField(max_length=50)
try: return cls.objects.get( course__course_key=course_key, active=True, namespace=namespace, name=name ) except cls.DoesNotExist: return None
template_rendered.send(sender=self, template=self, context=context) return self.nodelist.render(context)
cmd = __salt__['cmd.run_all']('racadm {0} {1}'.format(command, modswitch))
self.session['foo'] = 'bar' self.session.set_expiry(3600) self.session.save()
return self.oauth2_adapter.create_public_client( name='Test Public Client', user=user, client_id=client_id, redirect_uri=DUMMY_REDIRECT_URL, )
tab_ids[num_orig_tabs - 1], tab_ids[num_orig_tabs - 2] = tab_ids[num_orig_tabs - 2], tab_ids[num_orig_tabs - 1]
import integration import salt.utils
if pkg_name[0].endswith('.egg'): pkg_name.pop(0)
task_folder = task_service.GetFolder(location) task_definition = task_folder.GetTask(name).Definition actions = task_definition.Actions
salt '*' vsphere.service_start my.esxi.host root bad-password 'ntpd'
self.assertTrue(self._has_changes(draft_xblock.location))
css = self.certficate_css + ' .wrapper-collection' return [CertificateSectionPage(self, self.certficate_css, index) for index in xrange(len(self.q(css=css)))]
while re.search(RSTR_RE, stdout): stdout = re.split(RSTR_RE, stdout, 1)[1].strip()
module = self.get_module_for_user(self.student_user) module.system.publish(module, 'grade', grade_dict) return module
context.update(app_context)
if len(_response['rows']) < 1: continue
return "{}/v1/issuer/issuers/{}".format(settings.BADGR_BASE_URL, settings.BADGR_ISSUER_SLUG)
from __future__ import absolute_import, print_function
titles = ['Label Spreading 30% data', 'Label Spreading 50% data', 'Label Spreading 100% data', 'SVC with rbf kernel']
module.lcp.get_html = Mock(side_effect=Exception("Test"))
o1 = ManualPrimaryKey(primary_key="abc123", name="primary") o1.save() o2 = RelatedModel(link=o1, name="secondary") o2.save()
terms = list(com.flatten(terms))
context['accomplishment_copy_about'] = _('About {platform_name} Accomplishments').format( platform_name=platform_name )
'MILESTONES_APP': False,
assert_array_equal(X_r, iris.data)
log.debug( 'The \'{0}\' cloud driver defined under \'{1}\' provider ' 'alias is unable to get the images information'.format( driver, alias ) ) continue
modulestore().delete_course(destination_course_key, user_id)
if mask.all(): continue
labels = list(map(lambda lab: np.repeat(lab[diff], nbin), labels[:-1])) labels.append(left[-1])
assert_raises(ValueError, plot_partial_dependence, clf, iris.data, [0, 1], label='foobar', grid_resolution=grid_resolution)
self.assertNotIn('<span class="important-dates-item-text">$10</span>', resp.content)
from __future__ import absolute_import import logging
log_url = sanitize_url(url_full, hide_fields)
result1 = df.groupby('a').apply(f1) result2 = df2.groupby('a').apply(f1) assert_frame_equal(result1, result2)
@setup(inheritance_templates) def test_inheritance31(self): output = self.engine.render_to_string('inheritance31', {'optional': True}) self.assertEqual(output, '1two3')
with self.connection.schema_editor(atomic=migration.atomic) as schema_editor: state = migration.apply(state, schema_editor)
if location.category in DIRECT_ONLY_CATEGORIES: raise InvalidVersionError(location)
self.delete_model(model, handle_autom2m=False)
return ret
self.courseware_page.visit() self.assertEqual(self.problem_page.problem_name, 'Test Problem 2')
n_ranked_above = sum(rank[r] <= rank[label] for r in relevant)
from __future__ import absolute_import, print_function import itertools
module.lcp.get_score = lambda: {'score': 0, 'total': 0}
return self._get_dot_token(access_token) or self._get_dop_token(access_token)
return "SELECT MAX(id) FROM {table_name} GROUP BY {key_fields}".format( key_fields=', '.join(key_fields_escaped),
from __future__ import absolute_import
clf = GaussianNB()
outline_response = self.client.get(link.get("href"), {}, HTTP_ACCEPT='text/html') self.assertEqual(outline_response.status_code, 200)
tz = get_fixed_timezone(-210) aware_dt = datetime(2009, 5, 16, 5, 30, 30, tzinfo=tz)
max_age=settings.SESSION_COOKIE_AGE, salt='django.contrib.sessions.backends.signed_cookies',
objects = list((self if self.ordered else self.order_by('pk'))[:1]) if objects: return objects[0] return None
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.approve()
xblock_family = child.attrib.pop('xblock-family', None) if xblock_family: xblock_family = self._family_id_to_superclass(xblock_family) if issubclass(xblock_family, XBlockAside): aside_children.append(child)
if isinstance(authored_data, CmsFieldData):
X = X / 255
from django.contrib.gis.sitemaps.kml import KMLSitemap, KMZSitemap
AutoAuthPage(self.browser, course_id=self.course_id).visit()
(cmd, cwd) = _render_cmd(cmd, cwd, template, saltenv, pillarenv, pillar_override)
class Individual(models.Model): alive = models.BooleanField()
return ' '.join([self.selector, css])
data = np.random.randn(N)
"_save": "Save",
region_str = "[[[10,10], [20,10], [20, 30]], [[100,100], [120,100], [120,150]]]"
return self.q(css=self._bounded_selector('.remove-admin-role')).present
connection.drop_database(DB)
return self.values
pass
from salttesting import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
clf = ExtraTreesClassifier(n_estimators=500, max_features=1, criterion="entropy", random_state=0).fit(X, y)
p = self.PersonModel() self.assertIsInstance(p.mugshot, TestImageFieldFile) self.assertEqual(bool(p.mugshot), False)
return self.items.serialize()
return os.path.realpath(module.__path__[0])
from salt.modules import locate
start_response(H[code], get_headers(ret, { 'Content-Type': 'application/json', })) return (ret,)
import os import re
world.retry_on_exception( _click_advanced, ignored_exceptions=AssertionError, )
continue
class MyForm(forms.Form): text = forms.CharField(label='&text') cb = forms.BooleanField(label='&cb')
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
get_extring = GeomOutput('GEOSGetExteriorRing', [GEOM_PTR]) get_intring = GeomOutput('GEOSGetInteriorRingN', [GEOM_PTR, c_int]) get_nrings = IntFromGeom('GEOSGetNumInteriorRings')
from __future__ import absolute_import
left = concat([left, left], ignore_index=True)
expected_text = "This component is out of date. The library has new content." library_block = self._get_library_xblock_wrapper(self.unit_page.xblocks[1])
return self.source_expressions[self.geom_param_pos + 1].value
return 'period'
from urllib2 import urlopen
aggregated = grouped.aggregate(np.mean) self.assertEqual(len(aggregated), len(self.tsframe)) self.assertEqual(len(aggregated.columns), 2)
def _set_cookie_wrapper(key, value='', max_age=None, expires=None, path='/', domain=None, secure=None, httponly=False):
if resp.context: self.assertEqual(resp.context['course'], self.course)
access_key: 0e604a2c-aea6-4081-acb2-e1d1258ef95c token: be8fd96b-04eb-4d39-b6ba-a9edbcf17f12 driver: scaleway
with tm.assertRaises(ValueError): o.sample(n=-3) with tm.assertRaises(ValueError): o.sample(frac=-0.3)
xpath = "//div[@class='drag_and_drop_problem_json']/p/b" self.assert_has_text(xml, xpath, 'HTML')
with tm.assert_produces_warning(FutureWarning): ts.sort()
#show_authors = False
self.create_credentials_config(enable_learner_issuance=False) actual = get_user_program_credentials(self.user) self.assertEqual(actual, [])
perms_map = DjangoModelPermissions.perms_map.copy() perms_map['GET'] = perms_map['OPTIONS'] = perms_map['HEAD'] = perms_map['POST']
from __future__ import absolute_import import pprint import textwrap
import yaml
def set( self, answer_id=None, correctness=None, npoints=None, msg='', hint='', hintmode=None, queuestate=None,
modules, funcname = get_func_name(func) modules.append(funcname) return os.path.join(*modules)
full_name = '%s %s' % (self.first_name, self.last_name) return full_name.strip()
poet.name = 'Lamartine' poet.save() poem = formset.save()[0] self.assertEqual(poem.name, 'Le Lac by Lamartine')
return value.rjust(int(arg))
rendered = pieces["short"]
assert isinstance(error, MemoryError) if str(error): raise error else: raise TypicalMemoryError(msg)
if pkg_ver: if installed_pkgs[pkg_name].get('version') != pkg_ver: pkgs_to_install.append(pkg) else: pkgs_satisfied.append(installed_name_ver)
self.assertRaises(Exception, di.tz_localize, tz, ambiguous=is_dst)
from __future__ import absolute_import import logging import os import time import pickle from copy import deepcopy
import salt.utils
X_var *= X.shape[0] X_std = np.sqrt(X_var, X_var) del X_var X_std[X_std == 0] = 1 inplace_column_scale(X, 1. / X_std)
return self.q(css=self.VIEW_MODE_OPTIONS_CSS).filter(lambda el: el.is_selected()).first.text[0]
composer.__grains__ = {} composer.__salt__ = {} composer.__context__ = {} composer.__opts__ = {}
#pepa_pillars:
return None
from __future__ import absolute_import import logging import time
for checkpoint in checkpoints: cls.objects.create(checkpoint=checkpoint, user=user, status=status)
with self.assertRaises(ValueError): df.round(nan_round_Series)
v3.set_params = '_invalid_analyzer_type_' assert_raises(ValueError, v3.build_analyzer)
default_z += T.alloc(*([0.]+[shape[elem] for elem in self.h_space.axes])).astype(default_z.dtype) assert default_z.ndim == 4
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self._verify_unit_warning( self.UnitState(is_released=False, publish_state=self.PublishState.PUBLISHED, is_locked=False), None )
self._process_map[pid]['Process'].join(1)
return self._folds[0].get_output_space()
from __future__ import absolute_import import json import hashlib import base64 import time from subprocess import Popen, PIPE
self.assertTrue(CourseEnrollment.is_enrolled(self.global_staff, self.course.id))
self._install_course_fixture() self._navigate_to_courseware_video_no_render()
salt '*' win_wua.list_updates categories=['Feature Packs','Windows 8.1'] summary=True
self._assert_chapter_loaded(self.course, self.chapter)
return (hasattr(x, '__len__') or hasattr(x, 'shape') or hasattr(x, '__array__'))
response = self.client.get('/reset/zzzzzzzzzzzzz/1-1/') self.assertContains(response, "The password reset link was invalid")
data = copy.deepcopy(high) try: rewrite_single_shorthand_state_decl(data) rewrite_sls_includes_excludes(data, sls, saltenv)
average_weight = score_weight score_weight = None not_average_axis = 0
self._cache.clear()
packages_really_to_upgrade=[] for this_package in packages_to_upgrade: if this_package in installed_packages_list:
if not (has_forum_admin or has_instructor_access): return HttpResponseBadRequest( "Operation requires staff & forum admin or instructor access" )
position = getattr(self.system, 'position', None) if position is not None: assert isinstance(position, int) self.position = self.system.position
ROUTING_KEY = getattr(settings, 'CREDENTIALS_GENERATION_ROUTING_KEY', None)
profiles_config_path = _absolute_path(profiles_config_path, config_dir)
return { child_descriptor.location: child_descriptor, source_location: source_descriptor }.get(usage_id)
CourseEnrollment.unenroll(self.student, self.EXISTED_COURSE_KEY_2)
from pandas import compat import nose
__virtualname__ = 'sqlite3'
diff = l.diff() groups = list(diff[diff > 1].index)
for einput in self.BAD_DISPATCH_INPUTS: with self.assertRaisesRegexp(LTIError, "No valid user id found in endpoint URL"): self.xmodule.parse_lti_2_0_handler_suffix(einput)
result = o._get_bool_data() expected = self._construct(n, value='empty', **kwargs) self._compare(result, expected)
from __future__ import unicode_literals
'ENABLE_PAID_COURSE_REGISTRATION': False,
self.assertEqual(self.captured_request.POST.get("course_id"), "edX/DemoX/Fall")
salt '*' win_update.download_updates
resp = self.client.get_html(self.url) self.assertEqual(resp.status_code, 200) self.assertIn('course-nav-list', resp.content)
values = Series([u('fooBAD__barBAD'), NA, u('foo')])
params = [('course_id', self.course_id)] response = self.client.get(self.url, params)
user=user, course_id=course.location.course_key, status=CertificateStatuses.downloadable
verbose_name = "\xc3\x85ngstr\xc3\xb6m's Articles"
assets_deleted = content_store.remove_redundant_content_for_courses() success = True
from __future__ import absolute_import
output = self.engine.render_to_string('inheritance26') self.assertEqual(output, 'no tags')
__virtualname__ = 'locale'
elem = self.get_setting_element(label) select = Select(elem) select.select_by_value(value) self.save()
library = LibraryFactory.create() expected_url = u'/library/{}'.format(unicode(library.location.library_key)) self.assertEqual(xblock_studio_url(library), expected_url)
'pidfile': '/var/run/salt-api.pid', 'logfile': '/var/log/salt/api', 'rest_timeout': 300,
self.assertRaises(ValueError, self.read_csv, StringIO(data), header=[0, 1, 2, 3], index_col=['foo', 'bar'], tupleize_cols=False)
pts = tuple([p[i] for p in points]) indexer.put(indlist, slice_indexer)
pass
self.assertEqual(courses_list, courses_list_by_groups)
args = ['help', 'test'] out, err = self.run_manage(args) self.assertNoOutput(err)
for key in wrong: params = baseline.copy() params[key] = wrong[key] with self.assertRaises(CCProcessorDataException): payment_accepted(params)
y_true = [1, 2, 3, 3] y_pred = [1, 2, 3, 1] y_true_bin = [0, 1, 1] y_pred_bin = [0, 1, 0]
import errno import logging
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
ipca = IncrementalPCA(n_components=2, batch_size=10).fit(X) Y = ipca.transform(X) Y_inverse = ipca.inverse_transform(Y) assert_almost_equal(X, Y_inverse, decimal=3)
result._set_levels(levels, copy=copy, validate=False) result._set_labels(labels, copy=copy, validate=False)
for k, v in d.items(): dc = data_columns if k == selector else None
from django.contrib.auth import authenticate user = authenticate(**credentials) if user: self._login(user) return True else: return False
return self._stacks[stack]
self.q(css=self.experiment_groups_css + " .new-button").first.click()
leaves = est.apply(X) leave_indicator = [node_indicator[i, j] for i, j in enumerate(leaves)] assert_array_almost_equal(leave_indicator, np.ones(shape=n_samples))
block.fields.update(definition.get('fields')) block.definition_loaded = True
if (is_datetimelike_v_numeric(left, right) or is_datetimelike_v_object(left, right) or needs_i8_conversion(left) or needs_i8_conversion(right)):
return False
ttl = force_text(ttl)
pass
self.col_sizes = lmap(lambda x: self._calcsize(x), self.typlist)
out = -np.sum(sample_weight * log_logistic(yz)) + .5 * alpha * np.dot(w, w)
seed.__salt__ = {} seed.__opts__ = {}
return '{}[data-locator="{}"] {}'.format( self.BODY_SELECTOR, self.locator, selector )
p2 = Parent.objects.create(name="Parent 2") c.parent = p2 self.assertIs(c.parent, p2)
self.mock_programs_api() self.mock_credentials_api(self.user, reset_url=False) actual = get_programs_credentials(self.user, category='xseries') expected = self.expected_credentials_display_data()
def test():
self._mock_ecommerce_courses_api(self.course_key, self.COURSE_API_RESPONSE) CreditProvider.objects.all().update(active=False) self.assertEqual(get_credit_provider_display_names(self.course_key), [])
self.assertEqual(self.account_settings_page.value_for_dropdown_field('year_of_birth', ''), '')
for char in pipeline.make_random_password(length=100000): self.assertIn(char, pipeline._PASSWORD_CHARSET)
ROLE = 'finance_admin' def __init__(self, *args, **kwargs): super(CourseFinanceAdminRole, self).__init__(self.ROLE, *args, **kwargs)
'COURSES_ARE_BROWSABLE': True,
return self.name + " for " + (self.course_id.to_deprecated_string() if self.course_id else "all courses")
original_context = context context = RequestContext(request, **kwargs) if original_context: context.push(original_context)
if len(col_names) == 1: data_name = col_names[0] dataset['data'] = matlab_dict[data_name] else: for name in col_names: dataset[name] = matlab_dict[name]
url( r'^courses/{}/instructor$'.format( settings.COURSE_ID_PATTERN, ), 'instructor.views.instructor_dashboard.instructor_dashboard_2', name='instructor_dashboard', ),
import difflib import salt.utils import salt.utils.network import salt.loader
user_profile._changed_fields = get_changed_fields_dict(user_profile, sender)
K = check_array(K, dtype=FLOAT_DTYPES) n_samples = K.shape[0] self.K_fit_rows_ = np.sum(K, axis=0) / n_samples self.K_fit_all_ = self.K_fit_rows_.sum() / n_samples return self
return len(self.q(css='.wrapper-translations-settings .list-settings-item').results)
type_string = self.db_type(connection) check_string = self.db_check(connection) return { "type": type_string, "check": check_string, }
if self.mangle_dupe_cols:
'dummy_publisher': bool,
from .index import * from .certificate import * from .enrollments import * from .refund import * from .programs import IssueProgramCertificatesView
import salt.ext.six as six
if not prepared: value = self.get_prep_value(value) return connection.ops.adapt_datefield_value(value)
try: import sqlite3 HAS_SQLITE3 = True except ImportError: HAS_SQLITE3 = False
panel4d = Panel4D(vals, copy=True) self.assertIsNot(panel4d.values, vals)
url = marketing_link(name)
pass
while np.sum(support_) > n_features_to_select: features = np.arange(n_features)[support_]
with self.assertRaises(NotFoundError): self.item.get_transcript(transcripts)
permutation = random_state.permutation(dim) aux = aux[permutation].T[permutation] chol += aux prec = np.dot(chol.T, chol)
with self.assertRaises(Place.DoesNotExist): ItalianRestaurant.objects.get(name="The Noodle Void")
resp = self.client.get(self.url, HTTP_ACCEPT='application/json') self.assertEquals(resp.status_code, 406)
old_content += line result = None
X = iris.data
if hasattr(cls, 'selenium'): cls.selenium.quit() super(SeleniumTestCase, cls)._tearDownClassInternal()
if unit_no_ax0_reindexing: join_unit_indexers.pop(0, None) else: join_unit_indexers[0] = ax0_blk_indexer
if n == 0: return self.iloc[0:0] return self.iloc[-n:]
cc = salt.utils.cache.ContextCache(__opts__, __name__) retrieved_cache = cc.get_cache_context() self.assertDictEqual(retrieved_cache, __context__)
monit.__salt__ = {}
from __future__ import absolute_import import os
X = np.ascontiguousarray(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
result = f.clean('12/21/2010 13:30:05') self.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))
grad_shared = sharedX(zv) z_shared = sharedX(zv)
dn_set = OrderedDict() dn_set.update(old) dn_set.update(new)
self.bad_user_client = Client() self.good_user_client = Client() self.non_staff_client = Client() self.admin_client = Client()
request_params.pop('IdentityPoolName', None) r = __salt__['boto_cognitoidentity.update_identity_pool'](**request_params)
return self.__class__(self.maps[0].copy(), *self.maps[1:])
df = DataFrame(randn(4, 3), index=list('ABCD')) expected = df.ix[['E']]
X1[:, -1] = 1.0
self.assertIsInstance(A.value, cached_property)
return check_mongo_calls_range(max_finds=calls)
kwargs[param_name] = arg
indexer = Index(self.values).get_indexer_non_unique( other._values)[0].unique() indexer = indexer[indexer != -1]
re.compile(regex) opts['file_ignore_regex'].append(regex)
_current_statement = None _current_option = None _current_parameter = None _current_parameter_value = None
self.browser.execute_script("window.scrollTo" + str(self.coordinates_for_scrolling(MANUAL_BUTTON_SELECTOR))) self.q(css=MANUAL_BUTTON_SELECTOR).click()
_check_align(self.ts[:0], self.ts[:0], how=kind, method=meth) _check_align(self.ts[:0], self.ts[:0], how=kind, method=meth, limit=1)
kpca = KernelPCA(kernel="rbf", n_components=2, fit_inverse_transform=True, gamma=2.) X_kpca = kpca.fit_transform(X)
new_module_store_setting['default']['OPTIONS']['stores'] = convert_old_stores_into_list( module_store_setting ) module_store_setting = new_module_store_setting
if len(xml_object.xpath(cls._child_tag_name)) == 0: raise ValueError("Poll_question definition must include \ at least one 'answer' tag")
result = dt2 - dt assert_series_equal(result, expected)
from __future__ import absolute_import
result = ci.insert(-1, 'a') expected = CategoricalIndex(list('aabbcaa'), categories=categories) tm.assert_index_equal(result, expected, exact=True)
if url is not None: return redirect(url)
cache = {"course_cache": "blah blah blah"} modulestore().request_cache.data.update(cache)
msg_format = _("Message {action} for {succeeded} of {attempted} recipients")
import salt.ext.six as six import salt.utils import salt.utils.vmware import salt.utils.http from salt.utils import dictupdate from salt.exceptions import CommandExecutionError
ecommerce_url_root = helpers.get_value('ECOMMERCE_PUBLIC_URL_ROOT', settings.ECOMMERCE_PUBLIC_URL_ROOT) return urljoin(ecommerce_url_root, self.config.single_course_checkout_page)
args = list(args) for a in self._AXIS_ORDERS:
queryset.update(**{self.field.name: None})
import salt.utils
cookiedict[key] = http_cookies._unquote(val)
course_url = get_url('course_handler', destination_course_key, 'course_key_string') response = self.client.ajax_post(course_url, rerun_course_data)
class _IndexSlice(object): def __getitem__(self, arg): return arg
dm = DataFrame(columns=['A', 'B'], index=np.arange(10)) self.assertEqual(dm.values.shape, (10, 2))
instructor = self.make_instructor() self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
for index in [tm.makeIntIndex, tm.makeRangeIndex]:
try: os.unlink(filename_numpy) except: pass try: os.unlink(filename_larry) except: pass
for vert in [vertical, private_vertical, public_vertical]: self.assertIn(vert.location, sequential.children)
import os import logging
v, W = v[::-1], W[:, ::-1] return v, W
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
self.io_loop.spawn_callback(self.io_loop.stop)
site_configuration_history = SiteConfigurationHistory.objects.filter( site=site_configuration.site, ).all()
n_samples_per_label = np.bincount(labels)
self.login(self.enrolled_user)
if self.has_spatial_indexes: self.assertSpatialIndexExists('gis_neighborhood', 'path')
top_level_export_dir = 'exported_source_course_with_asides' export_course_to_xml( self.store, contentstore, dest_course_key, self.export_dir, top_level_export_dir, )
raise NotImplementedError('subclasses of BaseCache must provide a delete() method')
if sys.version_info[:2] < (2, 6): raise nose.SkipTest("file:// not supported with Python < 2.6")
f = lambda x: x.rename({1: 'foo'}, inplace=True) _check_f(data.copy(), f)
all = 'rev-opt-all'
}, "formats": { },
folders_list_in_path = folders_list_in_path[:-4]
self.obj._consolidate_inplace() self.obj._data = self.obj._data.setitem(indexer=indexer, value=value) self.obj._maybe_update_cacher(clear=True)
return self.make_call(reverse('teams_detail', args=[team_id]), expected_status, 'delete', **kwargs)
return redirect_to
rows, cols, channels = self.shape self.topo_space = Conv2DSpace(shape=(rows, cols), num_channels=channels, axes=self.axes)
from __future__ import unicode_literals
url = reverse('verify_student_verify_now', kwargs=course_kwargs)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
from salt.states import drac
sh("coverage xml --rcfile={}".format(rcfile)) sh("coverage html --rcfile={}".format(rcfile)) call_task('diff_coverage', options=dict(options))
logger.warning("Download was incomplete, downloading again.") os.remove(archive_path)
'msg': '', 'drag_and_drop_json': json.dumps(user_input)
import re import logging
p_idx = rng.randint(num_p)
import salt.utils import salt.ext.six as six import salt.utils.event from salt._compat import subprocess from salt.utils.network import host_to_ip as _host_to_ip
from salt.exceptions import CommandExecutionError import salt.utils
ret = salt.utils.cloud.bootstrap(vm_, __opts__)
self.blocks = self.obj._data.blocks ncols = sum(b.shape[0] for b in self.blocks) self.data = [None] * ncols
resolved = self.visit(value)
course = item.get_parent() item_dict['index'] = get_index(item_dict['location'], course.children)
continue
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
elif isinstance(value, six.string_types): if value.lower() == 'none': return None return value else: return None
import integration
try: open(libcuda_convnet_so).close() return True except IOError: return False
return not self.is_private
split_store = modulestore()
ps_diff_cache = self._create_service(username, {})
W_list = [None] + W_list
comb = dict([(k, v.filled()) if hasattr( v, 'filled') else (k, v) for k, v in comb])
try: if servers[index - 1] == ip: return True except IndexError: pass
self.store.delete_item(vertical.location, self.user_id) self.assertFalse(self._has_changes(sequential.location))
def __init__(self, n_components=8, random_state=None): super(GaussianRandomProjectionHash, self).__init__( n_components=n_components, random_state=random_state)
if self.request_cache is not None: return self.request_cache.data.setdefault('parent-location-{}'.format(branch), ParentLocationCache()) else: return ParentLocationCache()
names = extra_names + field_names + annotation_names
self.assertEqual(len(mail.outbox), 0)
ts = _simple_ts('1/1/2000', '1/20/2000') ts[::2] = np.nan
from __future__ import absolute_import
fill_value = self.block.fill_value values = self.block.get_values()
from __future__ import unicode_literals
data = sorted(data.items())
sys.excepthook = __global_logging_exception_handler
pc_clf.fit(this_X_train, 2 * y_train - 1, sample_weight=sw_train) prob_pos_pc_clf_relabeled = pc_clf.predict_proba(this_X_test)[:, 1] assert_array_almost_equal(prob_pos_pc_clf, prob_pos_pc_clf_relabeled)
course_tab_list += _get_dynamic_tabs(course, user) return course_tab_list
level_names = [level.name for level in self.index.levels] self.check_level_names(self.index, self.index.names)
with option_context('chained_assignment', None):
if not isabs(path): path = join(os.getcwdu(), path) return normpath(path)
for low in self.lowstate: if not self._verify_client(low): return
fresult = first.value
dict(safe_zip(range(-5, 6), range(-5, 6))),
cohort_list[0].users.add(*user_list) cohort_list[0].users.clear() assert_events("removed", user_list, cohort_list[:1]) mock_tracker.reset_mock()
if result._get_axis(0).is_unique: result = result[key]
forward_fields_map = { field.name: field for field in cls._meta._get_fields(reverse=False) }
self.update_masquerade(role='staff') self.assertEqual(self.get_progress_detail(), u'0/2')
if rows is not None: if len(self.buf) >= rows: new_rows, self.buf = self.buf[:rows], self.buf[rows:]
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) import os
import logging import os import subprocess import re import collections import decimal
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
monitor = lm.LiveMonitor() monitor.update_channels(['train_objective'], start=1, end=2) assert(len(monitor.channels['train_objective'].val_record) == 1)
out, err = DETAILS['server'].sendline(cmd)
from __future__ import (absolute_import, division, print_function, unicode_literals) import pandas.util.testing as tm
MobileApiConfig(video_profiles="youtube,mobile_high").save()
assert_greater(np.abs(s[:k] - sa).max(), 0.01)
chunksize = int(1e4)
target_mod = module + '.' if not module.endswith('.') else module
serialized['x-ordering'] = ordering
self.assertTrue(isnull(self.ts[:15].cov(self.ts[5:], min_periods=12)))
verify_order(self.html_usage_key, self.usage_key)
value = _fetch_option(cfg, ret_config, virtualname, options[option])
self.table = self.pd_sql.get_table(self.name, self.schema)
rendered = "0.post%%d" %% pieces["distance"] if pieces["dirty"]: rendered += ".dev0" rendered += "+g%%s" %% pieces["short"]
repo = _get_local_repo_dir(saltenv)
while top_level_logger.handlers: top_level_logger.handlers.pop()
import salt.pillar
pass
ret = {} for name in names: ret[name] = ''
pass
for field_name, ogr_name in self.mapping.items(): model_field = self.fields[field_name]
dirs_to_remove = set()
return _get_backing_memmap(a) is not None
if write: self._write = 1 else: self._write = 0 self.encoding = encoding
course = CourseFactory.create( org=course_location.org, number=course_location.course, run=course_location.run, default_store=store ) self._add_role_access_to_user(user, course.id) return course
return self.q(css='.wrapper-alert-error.is-shown').is_present()
for pkg_name in ['track.contexts', 'track.middleware', 'dd.dogapi']: logging.getLogger(pkg_name).setLevel(logging.CRITICAL)
from .vt import Terminal, TerminalException
if sql_list and not inhibit_post_migrate: emit_post_migrate_signal(verbosity, interactive, database)
value = value.astimezone(timezone) if hasattr(timezone, 'normalize'): value = timezone.normalize(value) return value.replace(tzinfo=None)
distances, neighbors = lshf.radius_neighbors(query, radius=mean_dist, return_distance=True) assert_array_less(distances[0], mean_dist)
xml_file = export_fs.open(LIBRARY_ROOT, 'w') xml_file.write(lxml.etree.tostring(root, pretty_print=True, encoding='utf-8')) xml_file.close()
coach_user = User.objects.create_user('test_coach_user', 'test_coach_user@openedx.org', 'test') CourseCcxCoachRole(self.master_course_key).add_users(coach_user)
with self.assertRaises(GDALException): OGRGeomType(23) with self.assertRaises(GDALException): OGRGeomType('fooD') with self.assertRaises(GDALException): OGRGeomType(9)
self.class_names = [array[0].encode('utf-8') for array in train['class_names'][0]]
expiration = attempt.created_at + timedelta(days=settings.VERIFY_STUDENT["DAYS_GOOD_FOR"]) before_expiration = expiration - timedelta(seconds=1) self.assertTrue(attempt.active_at_datetime(before_expiration))
tg = TimeGrouper(freq=rule, **kwargs) resampler = tg._get_resampler(groupby.obj, kind=kind) r = resampler._get_resampler_for_grouping(groupby=groupby) return _maybe_process_deprecations(r, how=how, fill_method=fill_method, limit=limit)
if 'gw' in vm_: newnode['net0'] = newnode['net0'] + ',gw=' + vm_['gw']
url = path
if com.is_object_dtype(dtype): return lib.map_infer(self.values.ravel(), self._box_func).reshape(self.values.shape) return self.values
return self.q(css=TOPIC_CARD_CSS).results
enrollment = CourseEnrollment.get_enrollment(student, self.course.id) self.assertEqual(enrollment.is_active, False)
from __future__ import absolute_import
from matplotlib.finance import quotes_historical_yahoo as quotes_historical_yahoo_ochl
config = BrandingApiConfig(enabled=enabled) config.save()
app.add_javascript('js/copybutton.js') app.connect('autodoc-process-docstring', generate_example_rst)
wua_found = win32com.client.Dispatch('Microsoft.Update.UpdateColl')
for n in range(10): for s, i in self.d.items(): i_rec = self.encode_decode(i) assert_categorical_equal(i, i_rec)
valid_formset = self.make_choiceformset([('Calexico', '100')]) self.assertTrue(valid_formset.is_valid()) self.assertTrue(valid_formset.has_changed())
apps = Apps()
self.assertNotIn(self.module_key, self.loader)
text = f.widget.format_value(result) self.assertEqual(text, "13:30:05")
df = self.read_csv(StringIO(data), header=[0, 1, 2, 3], index_col=[ 0, 1], tupleize_cols=False) tm.assert_frame_equal(df, expected)
course_about = get_course_about_section(self.request, self.course, 'short_description') self.assertEqual(course_about, "A course about toys.")
if n < 0: raise ValueError("A negative number of rows requested. Please " "provide positive value.")
DETAILS['grains_cache'] = parse(out)
theano.compile.debugmode.default_make_thunk.append( get_unbound_function(BaseActs.make_thunk))
resolved_envs = [ aenv for aenv in matches if fnmatch.filter(self.avail[aenv], inc_sls) ]
self.course_info_page.visit() self.tab_nav.go_to_tab('Test Static Tab') self.assertTrue(self.tab_nav.is_on_tab('Test Static Tab'))
if name == 'cybersource_config_key': return 'test_microsite' else: return None
member.name = '{0}.sls.orig'.format(package) out_path = conn['pillar_path']
del configure_custom
from __future__ import absolute_import
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
mi2.names = ["A", "B"] self.assertTrue(mi2.is_(mi)) self.assertTrue(mi.is_(mi2))
transcripts_utils.generate_subs_from_source(youtube_subs, 'SRT', srt_filedata, self.course)
plt.contourf(X, Y, Z, levels=levels, cmap=plt.cm.Reds) plt.colorbar(format='%.2f')
from __future__ import absolute_import
import salt.ext.six as six
elif course_overview.location.org in orgs_to_exclude: continue
from __future__ import absolute_import import logging import string import json import datetime
_default_logging_level_ = 'warning' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'ssh') _loglevel_config_setting_name_ = 'cli_salt_run_log_file'
subject = u'Confirmation and Invoice for {course_name}'.format(course_name=course.display_name) message = render_to_string('emails/registration_codes_sale_email.txt', context)
if __grains__['os_family'] not in ('Debian',): return False
from __future__ import absolute_import import os
cohort_list[0].users.remove(*user_list) assert_events("removed", user_list, cohort_list[:1]) mock_tracker.reset_mock()
__func_alias__ = { 'set_': 'set' }
setuptools_args['use_2to3'] = True if BUILD_CACHE_DIR is None else False
if ((dtype is not None) and not is_categorical_dtype(dtype)): raise ValueError("cannot specify a dtype with a " "Categorical unless " "dtype='category'")
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
lkey, rkey = _get_join_keys(llab, rlab, shape, sort)
for mode_slug in course_modes: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode_slug, mode_display_name=mode_slug, )
r = HttpResponse() r.content = 12345 self.assertEqual(r.content, b'12345')
return self.get_static_transcript(request, transcripts)
csmh = BaseStudentModuleHistory.get_history(student_module) self.assertEqual(len(csmh), 3)
self.assertFalse(self.get_dashboard_enrollment_message() in response.content)
self.ensure_schema() return set(tuple(x) for x in self.migration_qs.values_list("app", "name"))
wrapped = obj.__wrapped__
from __future__ import absolute_import, print_function import time import os import copy import logging
def append(self, val): "Standard list append method" self[len(self):] = [val]
from xmodule.modulestore.inheritance import InheritanceMixin from xmodule.modulestore import prefer_xmodules from xmodule.x_module import XModuleMixin
recons = consolidated.consolidate() self.assertIsNot(recons, consolidated) assert_frame_equal(recons, consolidated)
self.input_space = VectorSpace(dim=self.nvis) self.input_source = 'features' self.latent_space = VectorSpace(dim=self.nhid)
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains, with_system_user ) ensure_in_syspath('../../')
return _absolute_url(is_secure=is_secure, url_path="")
if timeout_in_seconds: utc_now = datetime.utcnow()
from __future__ import absolute_import import os import struct
self.login_staff() response = self.get_course_info_page() self.assertEqual(response.status_code, 200) content = response.content self.assertIn("OOGIE BLOOGIE", content)
invalidate_generated_certificates(course_id, students_to_generate_certs_for, statuses_to_regenerate)
article = Article.objects.annotate( headline=Coalesce(Lower('summary'), Lower('text'), output_field=TextField()), )
ModeCreationPage(self.browser, self.course_id, mode_slug=u'verified', mode_display_name=u'Verified Certificate', min_price=10, suggested_prices='10,20').visit()
self.assertContains(resp, 'This is a Test Microsite footer')
tsframe.to_csv(path, index=False) recons = DataFrame.from_csv(path, index_col=None) assert_almost_equal(recons.values, self.tsframe.values)
current = getattr(dates, period) previous = getattr(dates - 1, period) return (current - previous).nonzero()[0]
bt1_pyfunc = BallTree(X, metric=dist_func, leaf_size=1, p=2)
temp_file = _mkstemp_copy(path=path, preserve_inode=preserve_inode)
self.matrices_save_path = None
result = f.clean('21-12-2010') self.assertEqual(result, date(2010, 12, 21))
self._lock = threading.Lock()
widget = ReadOnlyPasswordHashWidget() html = widget.render(name='password', value=None, attrs={}) self.assertIn(_("No password set."), html)
for user_partition in self.user_partitions: if user_partition.id == user_partition_id: return user_partition raise NoSuchUserPartitionError("could not find a UserPartition with ID [{}]".format(user_partition_id))
if hasattr(self, 'proxy'): proxy = self.proxy else: proxy = None
self.assertIn("basic", project_state.real_apps)
crit1 = Term('index>foo') self.assertRaises(KeyError, store.remove, 'a', [crit1])
top_idx = set(component.argsort()[-3:][::-1]) assert_true(tuple(sorted(top_idx)) in correct_idx_grps)
assert sp.issparse(rp.transform(sparse_data))
from __future__ import unicode_literals
migration_name = 'custom_name' changes = autodetector.arrange_for_graph(changes, graph, migration_name)
results.append({ 'identifier': identifier, 'invalidIdentifier': True, })
self.answer_problem(correct=True) self.problem_page.click_check() self.wait_for_status('correct')
if test: return 'Test succeeded.'
zip_lib = self.capa_system.get_python_lib_zip() if zip_lib is not None: extra_files.append(("python_lib.zip", zip_lib)) python_path.append("python_lib.zip")
return output_scores
timestamps = _convert_timezones(timestamps)
current_enrollment, __ = CourseEnrollment.enrollment_mode_for_user(self.user, self.course_key) self.assertEquals('verified', current_enrollment)
'transport': str,
self.store.publish(problem.location, self.user.id)
publishers = Publisher.objects.filter(id__in=[1, 2]) self.assertEqual( sorted(p.name for p in publishers), [ "Apress", "Sams" ] )
return grade_request['xqueue_header']
orphans = self.store.get_orphans(course_key) self.assertIn(orphan, orphans) self.assertEqual(len(orphans), 1)
df = pivot(np.array([]), np.array([]), np.array([]))
from salt.modules import sensors
reg_code = CourseRegistrationCode.objects.create( code="abcd1234", course_id=self.course.id, created_by=self.user )
traversal_spec = vmodl.query.PropertyCollector.TraversalSpec( name='traverseEntities', path='view', skip=False, type=vim.view.ContainerView )
self.assert_index_equal(lexsorted_mi, not_lexsorted_mi) with self.assert_produces_warning(PerformanceWarning): self.assert_index_equal(lexsorted_mi.drop('a'), not_lexsorted_mi.drop('a'))
VALID_SERVICE_DIRS = [ '/service', '/var/service', '/etc/service', ] SERVICE_DIR = None for service_dir in VALID_SERVICE_DIRS: if os.path.exists(service_dir): SERVICE_DIR = service_dir break
from __future__ import absolute_import
with self.settings(FEATURES={'CUSTOM_COURSES_EDX': ccx_feature_flag}): course = self.ccx_enabled_course if enable_ccx else self.ccx_disabled_course self.assertEquals( expected_result, self.check_ccx_tab(course) )
if status.st_ino != 0: node = (status.st_dev, status.st_ino) if node in _seen: return _seen.add(node)
return { 'email': self._attach_email_claim, 'profile': self._attach_profile_claim }
self.assertFalse(AllFieldsModel._meta.get_field('m2m').null) self.assertTrue(AllFieldsModel._meta.get_field('reverse2').null)
try: from .tools import websockets from . import event_processor
for subsection in section.get_children(): c_subsection += 1 subsection_name = own_metadata(subsection).get('display_name', '')
self.login() response = self.api_response(expected_response_code=302) self.assertTrue(self.username in response['location'])
#pylint: skip-file from __future__ import unicode_literals
if point and point.isdigit(): point = int(point)
selector = self.get_element_selector(CSS_CLASS_NAMES['video_container']) auto_play = json.loads(self.q(css=selector).attrs('data-metadata')[0])['autoplay'] return auto_play
self.client.force_login(self.joepublicuser) self.client.force_login(self.superuser) self.assertEqual(self.client.session.test_cookie_worked(), False)
if lookup_type == 'week_day': return "DAYOFWEEK(%s)" % field_name else: return "EXTRACT(%s FROM %s)" % (lookup_type.upper(), field_name)
if key not in self: self[key] = value
if isinstance(axis_index, MultiIndex): dindex = axis_index else: dindex = axis_index.to_series()
self.assertEqual(self.cmap.get_overall_message(), "")
compare_to = nodelist_true_output = self.nodelist_true.render(context)
refresh_db() return ret
def __init__(self, start, end): self.start = start self.end = end
post_params = sign(self.CLIENT_POST_PARAMS)
self.click(".action-cancel")
import salt.ext.six as six if six.PY3: import ipaddress else: import salt.ext.ipaddress as ipaddress from salt.ext.six.moves import range
def __init__(self, error_message): super(SafeCookieError, self).__init__(error_message) log.error(error_message)
if columns is not None: columns = list(columns)
for tab in tabs: if tab.tab_id == "discussion" and django_comment_client.utils.is_discussion_enabled(self.id): return True return False
cum_xx = self._cum_xx(x) cum_xy = self._cum_xy(x, y)
export_name = escape_invalid_characters(name=filename, invalid_char_list=['/', '\\'])
return [self.index]
try: delattr(_MovedItems, name) except AttributeError: try: del moves.__dict__[name] except KeyError: raise AttributeError("no such move, %r" % (name,))
'pki_dir': str,
f.required = False
expected_1 = TimedeltaIndex( ['1 day', '3 day', '4 day', '5 day'], freq=None, name='idx')
clf = DecisionTreeClassifier(max_depth=2, min_samples_split=2, criterion="gini", random_state=2) clf = clf.fit(X, y2, sample_weight=w)
for k, v in source.fields.items(): self.assertIsInstance(feat[k], v)
cls = args[0] if cls.search_is_enabled(): return f(*args, **kwargs)
if existing['code'] == 200:
self.assertEqual( self.run_function('xattr.delete', [TEST_FILE, 'patrick']), 'ERROR: Attribute not found: patrick')
'file_buffer_size': int,
self.cache = salt.utils.cache.CacheFactory.factory( self.opts['pillar_cache_backend'], self.opts['pillar_cache_ttl'], minion_cache_path=self._minion_cache_path(minion_id))
COURSE_CATALOG_VISIBILITY_PERMISSION = ENV_TOKENS.get( 'COURSE_CATALOG_VISIBILITY_PERMISSION', COURSE_CATALOG_VISIBILITY_PERMISSION ) COURSE_ABOUT_VISIBILITY_PERMISSION = ENV_TOKENS.get( 'COURSE_ABOUT_VISIBILITY_PERMISSION', COURSE_ABOUT_VISIBILITY_PERMISSION )
if isinstance(batch, np.ndarray): return batch.shape else: return tuple(get_shape(b) for b in batch)
from __future__ import absolute_import import pprint
n_words = 0 while n_words == 0: n_words = generator.poisson(length)
for service in col_services: if service.name == 'Microsoft Update': return True
if m is None: m = {} return self.__class__(m, *self.maps)
if self.should_show_check_button(): check_button = self.check_button_name() check_button_checking = self.check_button_checking_name() else: check_button = False check_button_checking = False
from __future__ import absolute_import
for el in l: if _iterable_not_string(el): for s in flatten(el): yield s else: yield el
self.find_css('.action-secondary').first.click()
GITPYTHON_MINVER = '0.3' PYGIT2_MINVER = '0.20.3' LIBGIT2_MINVER = '0.20.0' DULWICH_MINVER = (0, 9, 4)
with self.assertRaises(TypeError): City.objects.annotate(geojson=functions.AsGeoJSON('point', precision='foo'))
centers[center_idx] /= counts[center_idx]
if keysize < 2048: keysize = 2048 tdir = tempfile.mkdtemp()
return True
return self.q(css="#is_prereq:checked").present
TEST_DIR = path(__file__).dirname() PLATFORM_ROOT = TEST_DIR.parent.parent.parent.parent.parent.parent TEST_DATA_ROOT = PLATFORM_ROOT / TEST_DATA_DIR COURSE_DATA_DIR = TEST_DATA_ROOT / COURSE_NAME
uniques = algos.take_nd(uniques, sorter, allow_fill=False)
self.course = CourseFactory.create(default_store=default_store)
for locale in locales: if self.verbosity > 0: self.stdout.write("processing locale %s\n" % locale) for potfile in potfiles: self.write_po_file(potfile, locale)
self.tr_size_col = -1
if isinstance(ind, MultiIndex): continue
try: from requests.packages.urllib3 import disable_warnings disable_warnings() except Exception: pass
output = self.engine.render_to_string('inheritance07') self.assertEqual(output, '1&35')
new_obj = object.__new__(cls) new_obj.__singleton_init__(opts, **kwargs) loop_instance_map[key] = new_obj
return reverse("get_token", kwargs={ "course_id": unicode(course_id), })
actual = grouped_ser.filter(lambda x: len(x) > 1) expected = ser.take(expected_indexes) assert_series_equal(actual, expected)
def run_collectstatic(self, **kwargs): pass
if np.any(np.less_equal(precision, 0.0)): raise ValueError("'%s precision' should be " "positive" % covariance_type)
s = Series(pd.to_timedelta(lrange(5), unit='d')) result = s.isin(s[0:2]) assert_series_equal(result, expected)
laplacian = _set_diag(laplacian, 1, norm_laplacian)
cache = caches[DEFAULT_CACHE_ALIAS] self.assertEqual(self.DEFAULT_TIMEOUT, cache.default_timeout)
if i > 0 and i < nindexes: repeater = np.prod( [indexes[bi].shape[0] for bi in range(0, i)]) idx = np.tile(idx, repeater)
self.assertEqual(response.status_code, 500) actual = json.loads(response.content)['detail'] self.assertIn('Call to E-Commerce API failed', actual)
resp = ProxyImprovement.objects.select_related().get( associated_bug__summary__icontains='fix' ) self.assertEqual( repr(resp), '<ProxyImprovement: ProxyImprovement:improve that>' )
slice_indexer[-1] += 1 n = -1 while (slice_indexer[n] >= shape[n]) and (n > (1 - ndim)): slice_indexer[n - 1] += 1 slice_indexer[n] = 0 n -= 1
raise NotImplementedError()
from unit.modules.boto_vpc_test import BotoVpcTestCaseMixin
self.assertTrue(isinstance(df.set_index( [df.index, df.index]).index, MultiIndex))
class UUIDPKParent(models.Model): uuid = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False) name = models.CharField(max_length=255)
def setUp(self): super(TestCase, self).setUp() self.enabled_provider = self.configure_google_provider(enabled=True)
_registered_options[key] = RegisteredOption(key=key, defval=defval, doc=doc, validator=validator, cb=cb)
TASK_LOG.info(u'%s, Task type: %s, Finalizing detailed enrollment task', task_info_string, action_name) return task_progress.update_task_state(extra_meta=current_step)
ptr += _counts[0] for j in range(ngroups): size = _counts[j + 1] out[j, i] = _median_linear(ptr, size) ptr += size
return render_message_to_string( self.subject_template, self.message_template, self.get_email_params(), language=language )
@property def shell(self): "Returns the shell of this Polygon."
assert_false(hasattr(SequenceDescriptor, 'attempts'))
_ptr = None
from __future__ import unicode_literals
from __future__ import absolute_import
for partition_id, group_id in user_partition_groups.iteritems(): user_partition_groups[partition_id] = self.groups[group_id - 1]
res = self.client.get('/dates/books/2000/jan/') self.assertEqual(res.status_code, 404)
assert_raises(ValueError, MLPClassifier( algorithm='sgd').partial_fit, X, y, classes=[2])
click_css(page, component_css, 0)
extract_dir_relative = path.relpath(extract_dir, settings.DATA_DIR)
response = view_func(request)
if pkey == key: continue
pass
self.stdin = sys.stdin.fileno() self.stdout = sys.stdout.fileno() self.stderr = sys.stderr.fileno()
self._create_course_unit(subtitles=True) self.video.show_captions() self.video.focus_caption_line(2) self.assertTrue(self.video.is_caption_line_focused(2))
self.assertOLXIsDraftOnly(block_list_publish) self.assertOLXIsDraftOnly(block_list_untouched)
response = self.client.post('/') self.assertContains(response, "Forbidden", status_code=403)
languages = dict(settings.ALL_LANGUAGES) try: return languages[self.course_team.language] except KeyError: return self.course_team.language
return name
exc_info_on_loglevel=logging.DEBUG
ret['hash_type'] = __opts__['hash_type']
if years: self.years = years else: this_year = datetime.date.today().year self.years = range(this_year, this_year + 10)
return self.q(css='.problem-header').text[0]
tm._skip_if_no_pathlib()
axes = ['b', 0, 1, 'c'] random.shuffle(axes) axes = tuple(axes) print('axes:', axes)
string_data = serializers.serialize(self.serializer_name, [obj], indent=2)
if emit_signals and bulk_ops_record.is_root: self.send_pre_publish_signal(bulk_ops_record, structure_key)
return Series(values, index=key_index, name=self.name)
raise parser.error_class( "Not expecting '%s' as infix operator in if tag." % self.id )
#epub_tocdepth = 3
if ignore_width or not com.in_interactive_session(): return True
context[context_key] = request.META.get(header_name, '').decode('latin1')
url(r'^api-admin/', include('openedx.core.djangoapps.api_admin.urls', namespace='api_admin')),
with assertRaisesRegexp(TypeError, 'Must pass'): self.frame.filter(items=None)
return _error(ret, u_check)
df = DataFrame(columns=['A', 'B'])
usage_key = self._map_revision_to_branch(usage_key) return super(DraftVersioningModuleStore, self).get_block_original_usage(usage_key)
panel.loc['a2'] = df1.values tm.assert_frame_equal(panel.loc['a1'], df1) tm.assert_frame_equal(panel.loc['a2'], df1)
postgis_types_reverse = {}
continue
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_id) if has_instructor_access_for_class(request.user, course_key): try: data = dashboard_data.get_d3_problem_grade_distrib(course_key)
from salttesting.helpers import ensure_in_syspath, requires_salt_modules from salttesting import skipIf ensure_in_syspath('../../')
def f(): Categorical.from_codes([0, 1, 2], ["a", "a", "b"])
expected = ns[ns > 60] result = store.select('ns', Term('foo>60')) tm.assert_series_equal(result, expected)
MultiPartParser({ 'CONTENT_TYPE': 'multipart/form-data; boundary=_foo', 'CONTENT_LENGTH': '1' }, StringIO('x'), [], 'utf-8')
df = df * 0 result = df.to_string() expected = (' 0\n' '0 0\n' '1 0\n' '2 -0')
self.course = CourseFactory.create( org=org, number=course_number, run=course_run )
return related_klass_infos
return tz
test_course = self.store.create_course('testx', 'GreekHero', 'test_run', self.user_id) self.assertTrue(self.store.has_published_version(test_course))
test_success = win_mod_reg.delete_key_recursive('HKEY_CURRENT_USER', subkey) self.assertTrue(test_success)
if not multilabel: labels = frombuffer_empty(labels, np.float64) data = frombuffer_empty(data, actual_dtype) indices = frombuffer_empty(ind, np.intc)
import integration import salt.utils
self.assertEqual(result['contents'], 'Test HTML')
monitor.add_channel( name='momentum', ipt=None, val=self.momentum, data_specs=(NullSpace(), ''), dataset=monitoring_dataset)
'multiprocessing': bool,
d = ts.index[0].to_timestamp() - datetools.bday self.assertTrue(np.isnan(ts.asof(d)))
can_introspect_null = True
REQUEST_CONTEXT.request = request
if isinstance(result, np.ndarray): if is_integer_dtype(result): result = result.astype('int64') elif not is_list_like(result): return result
try:
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if isinstance(other, Field): return self.creation_counter < other.creation_counter return NotImplemented
EmptyPromise( lambda: self.outline_page.is_browser_on_page(), "loaded page {!r}".format(self.outline_page), timeout=30 ).fulfill()
_SQL_WILDCARD = { 'mysql': '%s', 'sqlite': '?' }
self.q(css=self._bounded_selector(".check-cohort-inline-discussions")).first.click()
try: dmin, dmax = self.viewlim_to_dt() except ValueError: return []
tm.assert_almost_equal(variance_2, (n - 1.0) / (n - 2.0) * var, check_less_precise=2)
self.modified = True
return self.errors.get(NON_FIELD_ERRORS, self.error_class(error_class='nonfield'))
connection.close()
X = X.copy('F')
if dt.weekday() == 5: return dt - timedelta(1) elif dt.weekday() == 6: return dt - timedelta(2) return dt
if self._test_dir and os.path.sep == self._test_dir[0]: shutil.rmtree(self._test_dir) self._test_dir = None
CourseEnrollment.unenroll_by_email("not_jack@fake.edx.org", course_id) self.assert_no_events_were_emitted()
raise
def render_to_template_mock(*args): pass
], ROOT_URLCONF='flatpages_tests.urls', TEMPLATES=FLATPAGES_TEMPLATES, SITE_ID=1,
with tm.assert_produces_warning(RuntimeWarning): expected = right_idx.astype(object).union(left_idx.astype(object)) tm.assert_index_equal(joined, expected)
if self.tz is not None: key = Timestamp(key, tz=self.tz)
haproxyconn.__opts__ = {}
MAX_BOOKMARKS_PER_COURSE = ENV_TOKENS.get('MAX_BOOKMARKS_PER_COURSE', MAX_BOOKMARKS_PER_COURSE)
try: data = data.astype('int64') result = True except: pass
self.assertFalse(self._has_changes(published_xblock.location))
ax = self.obj._get_axis(axis) if isinstance(ax, MultiIndex): return False elif ax.is_floating(): return False return True
_track_certificate_events(request, context, course, user, user_certificate)
rb = {0: 'Never Requires Reboot', 1: 'Always Requires Reboot', 2: 'Can Require Reboot'} results[guid]['RebootBehavior'] = rb[update.InstallationBehavior.RebootBehavior]
for i in xrange(len(p)): assert p[i] == precision[i], (i, p[i], precision[i]) assert recall[i] == recall[i]
self.assertEqual(len(w), 1)
fld = forms.GeometryField() with self.assertRaisesMessage(forms.ValidationError, "No geometry value provided."): fld.clean(None)
from __future__ import absolute_import import os import shutil import socket
self.assert_grade(problem, answer, "correct") self.assert_grade(problem, answer.lower(), "correct")
CELERYD_PREFETCH_MULTIPLIER = 1
@patch('salt.utils.which', lambda exe: None) def test_missing_binary_in_linux(self): self.assertTrue( salt.utils.which('this-binary-does-not-exist') is None )
with salt.utils.fopen(requirements_file_path, 'w') as fhw: fhw.write('zope.interface==4.0.1\n')
text = views.course_about(self.request, unicode(course_key)).content return text
salt '*' vsphere.coredump_network_enable my.esxi.host root bad-password True
from salt.exceptions import SaltInvocationError
if perimeter: procedure_args.update({'function': backend.perimeter3d}) elif length: procedure_args.update({'function': backend.length3d})
instructor = UserFactory() allow_access(self.course, instructor, 'instructor')
temp_all_words = self.all_words
self.assertTrue(self.video.is_aligned(True))
skip_compression = PY3 and is_platform_windows()
self.course.edxnotes = True self.assertTrue(has_notes_tab(self.user, self.course))
_kwargs.update(string_kwarg)
result = conv.to_rgba(result)
if tzinfo is not None: value = value.astimezone(tzinfo)
test = isinstance(test_list, tuple) and (not test_list[0]) self.assertTrue(test)
if partition_id not in user_groups: return False
raise NotImplementedError()
super(LabelSpreading, self).__init__(kernel=kernel, gamma=gamma, n_neighbors=n_neighbors, alpha=alpha, max_iter=max_iter, tol=tol, n_jobs=n_jobs)
msg = "Wait for status to be {}".format(status) selector = ', '.join(self.status_indicators[status]) self.problem_page.wait_for_element_visibility(selector, msg)
relname = path(pathname).basename()
if not isinstance(course_key, basestring): raise ValueError('course_key must be a string. {} is not acceptable.'.format(type(course_key)))
__opts__['test'] = orig_test return ret
CourseRerunState.objects.get(id=rerun_state.id)
from __future__ import unicode_literals
pred = np.array([l.argmax() for l in Y_proba]) assert_false((pred - Y_pred).any())
X_transformed_parallel2 = fs_parallel2.transform(X) assert_array_equal( X_transformed.toarray(), X_transformed_parallel2.toarray() )
kwargs['widget'] = self.get_map_widget(db_field) return db_field.formfield(**kwargs)
self.field_data = inheriting_field_data(kvs=DictKeyValueStore())
p.undergroundbar = b
if isinstance(other, SparseSeries): other = other.to_dense() dense_combined = self.to_dense().combine_first(other) return dense_combined.to_sparse(fill_value=self.fill_value)
from __future__ import absolute_import
actual_payment_data = checkout_with_ecommerce_service( user, 'dummy-course-key', course_mode, 'test-processor' )
if not ( self._is_anonymous(self.context["thread"]) and not self._is_user_privileged(endorser_id) ): return DjangoUser.objects.get(id=endorser_id).username
X_0 = X[y == 0, :] y_0 = y[y == 0]
response = self.client.get( '/verify_student/software-secure-fake-response' ) self.assertEqual(response.status_code, 404)
from __future__ import unicode_literals
if key not in self: root = self.__root last = root[0] last[1] = root[0] = self.__map[key] = [last, root, key] dict_setitem(self, key, value)
names = self._maybe_make_multi_index_columns(names, self.col_names)
grains = {'mem_total': 0} if osdata['kernel'] == 'Linux': meminfo = '/proc/meminfo'
self.service.remove_credit_requirement_status( self.user.id, self.course.id, 'grade', 'grade' )
shape = values.shape
core_samples, labels = dbscan(X, algorithm=algorithm, eps=1, min_samples=4) assert_array_equal(core_samples, []) assert_array_equal(labels, -np.ones(n_samples))
return self._block_relations.iterkeys()
if not isinstance(key, slice): return key
return X[:n_samples], X[n_samples:]
return ContainerPage(self.browser, self.locator).visit()
return u'{microsite_key}: {template_uri}'.format( microsite_key=self.microsite.key, template_uri=self.template_uri )
if key_func is not None: if callable(key_func): return key_func else: return import_string(key_func) return default_key_func
if LoginFailures.is_feature_enabled(): LoginFailures.clear_lockout_counter(user)
grid_search = GridSearchCV(pipeline, parameters, n_jobs=1)
context_dictionary = {}
if connection.features.allows_auto_pk_0: test_data.extend([ (data_obj, 0, Anchor, "Anchor 0"), (fk_obj, 465, FKData, 0), ])
'tcp_master_pull_port': int,
for item in REPORT_TYPES: if report_type in item: return item[1](start_date, end_date, start_letter, end_letter) raise ReportTypeDoesNotExistException
X = 0.3 * rnd.randn(100, 2) X_train = np.r_[X + 2, X - 2]
_base_supported_nodes = (_all_node_names - _unsupported_nodes) | _hacked_nodes _msg = 'cannot both support and not support {0}'.format(_unsupported_nodes & _base_supported_nodes) assert not _unsupported_nodes & _base_supported_nodes, _msg
course_details.license = getattr(course_descriptor, "license", "all-rights-reserved")
raise AbstractMethodError(self)
result.is_copy = ("modifications to a method of a datetimelike object " "are not supported and are discarded. Change " "values on the original.")
continue
__proxyenabled__ = ['*']
__, count = self.contentstore.get_all_content_for_course(self.course2_key) self.assertEqual(count, len(self.course2_files))
try: return ( self.backend_name == pipeline['backend'] and self.lti_consumer_key == pipeline['kwargs']['response'][LTI_PARAMS_KEY]['oauth_consumer_key'] ) except KeyError: return False
import salt.utils.locales
required_content = milestones_helpers.get_required_content(course, user)
if self.scope_ids.user_id is not None and user_id == self.scope_ids.user_id: if getattr(xmodule_runtime, 'position', None):
edit_task(task_definition=task_definition, user_name=user_name, password=password)
label = "P{0}.{1}.{2}".format(c_subsection, c_unit, c_problem)
def lock(f, flags): return False
self.workd[yslice] = self.OP(self.workd[xslice])
d = get_dummy_course('2012-12-02T12:00') self.assertEqual('', d.end_datetime_text())
import salt.utils from salt import utils, exceptions
self.assertTrue(transaction.get_rollback()) transaction.set_rollback(False) self.assertEqual(Reporter.objects.count(), 3) transaction.set_rollback(True)
import unittest from nose.plugins.attrib import attr
if key.scope not in self.VALID_SCOPES: raise InvalidScopeError(key, self.VALID_SCOPES) if key.scope == Scope.content: self._load_definition()
supports_paramstyle_pyformat = True
TMPDIR = tempfile.mkdtemp(prefix='django_') tempfile.tempdir = os.environ['TMPDIR'] = TMPDIR
super(MixedModuleStore, self).clone_course(source_course_id, dest_course_id, user_id, fields, **kwargs)
connection, address = self._socket.accept() self.socket_queue.put((connection, address), True, None)
kwargs_keys = list(kwargs)
folds_iter = self.iterator(mode="random_slice", num_batches=nfolds, rng=rng) folds = list(folds_iter) return folds
if isinstance(min_itemsize, dict):
if enum_value == cls.released: return cls.LAST_MONTH elif enum_value == cls.future: return cls.NEXT_MONTH else: return DEFAULT_START_DATE
from __future__ import absolute_import
'reactor_worker_threads': int,
self.query.add_annotation( RawSQL(fmt % settings['procedure_args'], settings['select_params'], select_field), model_att) return self
from pandas.tseries.timedeltas import to_timedelta try: return to_timedelta(v)._values.reshape(shape) except: return v
many_days = datetime.timedelta(days=60)
self._set_binner()
self.timeout_futures()
salt.utils.atomicfile.atomic_open( os.path.join(hn_dir, RETURN_P), 'w+b' )
non_existent = datetime.datetime(2015, 3, 29, 2, 30)
regex = re.compile(r'^{0}\s+=\s+{1}$'.format(re.escape(name), re.escape(value)))
from salt.cloud.clouds import opennebula from salt.exceptions import SaltCloudSystemExit, SaltCloudNotFound
reset_sequences = options.get('reset_sequences', True) allow_cascade = options.get('allow_cascade', False) inhibit_post_migrate = options.get('inhibit_post_migrate', False)
mock_model_log_exception.assert_called_once_with( 'Error sending API user notification email for request [%s].', self.api_access_request.id ) self.assertIsNotNone(self.api_access_request.id)
mnt_image = salt.utils.alias_function(mount_image, 'mnt_image')
import logging
self.courseware_page.click_next_button_on_bottom() self.assert_navigation_state('Test Section 1', 'Test Subsection 1,2', 0, next_enabled=True, prev_enabled=True)
plt.subplots_adjust(wspace=0.25) plt.show()
expression_wrapper = '(%s)' sql = connection.ops.combine_expression(self.connector, expressions) return expression_wrapper % sql, expression_params
import logging
all_files = __salt__['file.readdir'](name)
emit_field_changed_events( user, user, sender._meta.db_table, excluded_fields=['last_login', 'first_name', 'last_name'], hidden_fields=['password'] )
return self.location.course_key
self.assertEqual( res_json['message'], u"{user} does not exist in the LMS. Please check your spelling and retry.".format(user=invalid_user), )
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] h1_state = layer_to_state[h1] h2_state = layer_to_state[h2]
redirect_url = "{login_url}?next={original_url}".format( login_url=reverse("signin_user"), original_url=url, ) self.assertRedirects(response, redirect_url)
if which_set in ['train', 'test']: data_x, data_y = load_data("{0}{1}_32x32.mat".format(path, which_set))
if right_str: name = self.env.add_tmp([right.value]) right = self.term_type(name, self.env)
from salt.modules import nginx
self._install_course_fixture() self._navigate_to_courseware_video_and_render()
raise AbstractMethodError(self)
from __future__ import absolute_import import logging
warnings.warn("iget(i) is deprecated. Please use .iloc[i] or .iat[i]", FutureWarning, stacklevel=2) return self._ixs(i)
self.opts = opts self.lst = lst if self.flag: return {} return []
fresh = modulestore().get_course(self.course.id) test_model = CourseMetadata.fetch(fresh)
time.sleep(0.5)
custom_form = get_registration_extension_form()
clf = svm.SVC(kernel='rbf', gamma=1, decision_function_shape='ovo') clf.fit(X, Y)
fancy = None
self.unit_page.xblocks[1].open_advanced_tab()
s = Series(range(5), index=index)
if dtype.kind == 'V': raise NotImplementedError("compound dtypes are not implemented" "in the {0} constructor" .format(self.__class__.__name__))
if http_event_collector_debug: log.debug(r.text) log.debug(data)
return self.q(css='{} input[name=skip-entrance-exam]'.format(self.EE_CONTAINER))
s = Series(index=lrange(1, 5)) result = df.iloc[s.index] expected = df.ix[[2, 4, 6, 8]] assert_frame_equal(result, expected)
pass
offset_n = self._get_offset(offset, normalize=True) self.assertFalse(offset_n.onOffset(dt))
self.user.is_staff = True
if dr_input.lower() in self._alias: name = self._alias[dr_input.lower()] else: name = dr_input
if isinstance(key, (list, tuple)): return self.ix[key]
from __future__ import absolute_import import os import shutil
output_multip = enter_mainloop( _destroy_multiprocessing, parallel_data, pool_size=pool_size)
assert_almost_equal(np.cov(clf.transform(scatter).T), np.eye(2))
self.course_data['org'] = 'University of California, Berkeley' self.assert_course_creation_failed(r"(?s)Unable to create course 'Robot Super Course'.*")
greet = Word( alphas ) + "," + Word( alphas ) + "!"
self._should_compress = True
r2 = Restaurant.objects.get(pk=r.pk) p.restaurant = r2 self.assertIs(p.restaurant, r2)
TEST_DATA = os.path.join(os.path.dirname(upath(__file__)), 'data')
with self.settings(DEBUG=True): self.verify_unsafe_response(paranoid_view, check_for_vars=False) with self.settings(DEBUG=False): self.verify_paranoid_response(paranoid_view, check_for_vars=False)
ordering = ('author__extra__note', 'author__name', 'rank')
url_path = ""
lookup_name = 'overlaps_left'
import salt.utils.itertools import salt.utils.systemd from salt.exceptions import CommandExecutionError from salt.ext import six
mock_get_scores.assert_called_with( self.course.id.to_deprecated_string(), anonymous_id_for_user(self.student_user, self.course.id) )
EX_THIN_DEPLOY = 11 EX_THIN_CHECKSUM = 12 EX_MOD_DEPLOY = 13 EX_SCP_NOT_FOUND = 14 EX_CANTCREAT = 73
import salt.loader
import os import glob import logging import time
before_finders = list(settings.STATICFILES_FINDERS) before_dirs = list(settings.STATICFILES_DIRS)
zip_file_path = '{0}/{1}_TXT.zip'.format(_FAMAFRENCH_URL, name)
FEATURES['ENFORCE_PASSWORD_POLICY'] = False FEATURES['ENABLE_MAX_FAILED_LOGIN_ATTEMPTS'] = False FEATURES['SQUELCH_PII_IN_LOGS'] = False FEATURES['PREVENT_CONCURRENT_LOGINS'] = False FEATURES['ADVANCED_SECURITY'] = False
StudentModule.objects.create( student=user, course_id=self.course_key, module_state_key=problem_location, state=json.dumps({}) )
import salt.utils from salt.ext.six import string_types from salt.exceptions import CommandExecutionError import logging
word_cloud = ItemFactory.create(parent_location=parent.location, category="word_cloud", display_name="untitled") del word_cloud.data self.assertEquals(word_cloud.data, '')
if isinstance(field_value, six.string_types): ret_list.append(field_value) else: ret_list.append(str(field_value))
df.values[0, 0] = np.nan df.values[5, 3] = np.nan
c = q.child_set.create(name='Charles') q.child_set.create(name='Edward')
ADVANCED_PROBLEM_TYPES = [ { 'component': 'openassessment', 'boilerplate_name': None, }, ]
cat = [True, True, True] _check_one_hot(X, X2, cat, 5)
del sys.modules["versioneer"]
if not isinstance(key, compat.string_types): return key
for _ in range(num_threads): thread = threading.Thread(target=self._thread_target) thread.daemon = True thread.start() self._workers.append(thread)
message = self.serial.dumps(message)
nv.validate_transpose(args, kwargs) return self
for param, value in zip(self.get_params(), values): param.set_value(value, borrow=borrow)
if Y is not None: H_hat[-1] = Y
ans = set()
from __future__ import absolute_import import collections import logging
result = df.copy().sort_index(axis=1) expected = df.iloc[:, [0, 2, 1, 3]] assert_frame_equal(result, expected)
scope_map = defaultdict(set) for descriptor in descriptors: for field in descriptor.fields.values(): scope_map[field.scope].add(field) return scope_map
response = problem.responders.values()[0] self.assertFalse(response.has_mask()) self.assertFalse(response.has_answerpool())
from __future__ import absolute_import import copy import fnmatch import itertools import logging import os import re import string
if is_list_like_indexer(value): if len(value) != len(self.obj.columns): raise ValueError("cannot set a row with " "mismatched columns")
EscapeUnicode = EscapeText
normalized = text.normalize_newlines(b"abc\ndef\rghi\r\n") self.assertEqual(normalized, "abc\ndef\nghi\n") self.assertIsInstance(normalized, six.text_type)
self._lookup_joins = join_list
self.set_user_module_score(real_user, score, self.max_score(), comment) return Response(status=200)
inherited_settings = {}
if os.getenv('DISPLAY') is None: try: import matplotlib matplotlib.use('Agg') except: pass
tab_css = self._tab_css(tab_name)
allow_user = user.is_active or user.is_anonymous() return allow_user and self.config.checkout_on_ecommerce_service
for row in db_query: row_loc = course_id.make_usage_key_from_deprecated_string(row['module_state_key']) if row_loc not in prob_grade_distrib: prob_grade_distrib[row_loc] = { 'max_grade': 0, 'grade_distrib': [], }
import integration from salt.config import cloud_providers_config from salt.ext.six.moves import range
os.setegid(uinfo['gid']) os.seteuid(uinfo['uid'])
self.library_fixture.create_xblock(self.library_fixture.library_location, XBlockFixtureDesc("html", "Html4"))
assert_equal(3, LeavePLabelOut(n_labels=2).get_n_splits(X, y, labels)) assert_equal(3, LeaveOneLabelOut().get_n_splits(X, y, labels))
from __future__ import absolute_import import datetime import logging
EmptyPromise( lambda: self.field(field_id) is not None, "Field with id \"{0}\" is in DOM.".format(field_id) ).fulfill()
SERVICE_VARIANT = os.environ.get('SERVICE_VARIANT', None)
return _timelex.split(compat.StringIO(str(dt_str)))
return True
import salt.ext.six as six
Pkg.installed("nginx", require=Pkg("some-other-package"))
unpack_tarball(src,dst) run_scripts(dst+package.name, scripts=["getscript","postinst"] )
DEFAULT_EXCEPTION_REPORTER_FILTER = 'django.views.debug.SafeExceptionReporterFilter'
target_last_modified = self.storage.get_modified_time(prefixed_path)
if PY3: str(mi) else: compat.text_type(mi)
return self._visitor.visit(self.expr)
_config_filename_ = 'master' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'master') _setup_mp_logging_listener_ = True
clf = IsolationForest(max_samples=100, random_state=rng) clf.fit(X_train) y_pred_train = clf.predict(X_train) y_pred_test = clf.predict(X_test) y_pred_outliers = clf.predict(X_outliers)
dtup = d.as_tuple() digits = dtup[1]
buf = self._read_bytes(const.endianness_offset, const.endianness_length) if buf == b'\x01': self.byte_order = "<" else: self.byte_order = ">"
return self.values.base
dev1 = Developer(name='Joe') note = Note(note='Deserves promotion', content_object=dev1) with self.assertRaises(IntegrityError): note.save()
self.assertEqual(node.tag, 'sequential')
value = value.replace('\\', '') if setval is None: return False return value in setval.split()
class UserRegistration(Form): username = CharField(max_length=10, label='') password = CharField(widget=PasswordInput)
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
cache_key += '.%s' % getattr(request, 'LANGUAGE_CODE', get_language())
if self.ndim > 1 and i == self.obj._info_axis_number:
largefile = request.FILES['file_field2'] obj = FileModel() obj.testfile.save(largefile.name, largefile)
precisions_not_pos = np.ones((n_components, n_features, n_features)) precisions_not_pos[0] = np.eye(n_features) precisions_not_pos[0, 0, 0] = -1.
from __future__ import print_function from __future__ import absolute_import import socket
self._make_eligible() self._purchase_credit()
with restrict_course(self.course.id) as redirect_path: self.assert_access_denied(redirect_path)
new_course = modulestore().create_course( org, number, run, user.id, fields=fields, )
if self._mode in ['a', 'w'] and mode in ['r', 'r+']: pass elif mode in ['w']:
else: ret = _load_result(existing, ret)
__virtualname__ = 'ethtool'
with self.assertRaises(Exception): self.check_group('invalid', 'choice', 'checkbox')
pass
return False
score[pred_or_true == 0.0] = 1.0
if not isinstance(result, np.ndarray): if not isinstance(result, np.ndarray):
for field_name in ["display_name", "weight"]: self.problem_in_course.fields[field_name].delete_from(self.problem_in_course)
import salt.utils import salt.utils.itertools import salt.utils.mac_utils from salt.exceptions import SaltInvocationError
win_ip.__salt__ = {}
def get_base_dir(self): return settings.STATIC_ROOT def get_base_url(self): return settings.STATIC_URL
_, _, relative_path, params, query_string, fragment = urlparse(path)
admin = AdminFactory.create()
if hasattr(self, "classes_") and self.n_outputs_ == 1: self.n_classes_ = self.n_classes_[0] self.classes_ = self.classes_[0]
import re
rendered = pieces["short"]
self.assertFalse(self.done.inprogress()) self.assertFalse(self.not_started.inprogress())
__virtualname__ = 'winrepo'
class CallableView(object): def __call__(self, *args, **kwargs): pass login_required(CallableView())
X1 = np.array([[-2, ], [-1, ], [-1, ], [1, ], [1, ], [2, ]], dtype='f')
d = dr + 1.0j * di
mixed = Series([' aa ', NA, ' bb \t\n', True, datetime.today(), None, 1, 2.])
return _get_next_prev(self, date, is_previous=True, period='day')
LogoutPage(self.browser).visit() StudioAutoAuthPage( self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=True ).visit()
FEATURES['ENABLE_PAYMENT_FAKE'] = True
from Crypto.Cipher import PKCS1_OAEP
return not resolved(joinpath(base, path)).startswith(base)
(repo.shas, repo.messages, repo.timestamps, repo.authors) = _parse_commit_log(None,REPO_PATH, args.base_commit)
if "TRACKING_IGNORE_URL_PATTERNS" in ENV_TOKENS: TRACKING_IGNORE_URL_PATTERNS = ENV_TOKENS.get("TRACKING_IGNORE_URL_PATTERNS")
response = self.client.get(self.notes_page_url) self.assertEqual(response.status_code, 404)
repr(df)
self.assertIn( 'test_content_field', new_version.get_explicitly_set_fields_by_scope(scope=Scope.content) ) self.assertIn( 'test_settings_field', new_version.get_explicitly_set_fields_by_scope(scope=Scope.settings) )
#pylint: disable=E0602
self.assertEqual(tab.link_func(self.course, self.reverse), expected_link)
deadline_is_explicit = models.BooleanField(default=False)
with tm.assertRaises(UndefinedVariableError): df.query('@a > b > @c', engine=engine, parser=parser)
reinit_crypto() sys.exit(salt.defaults.exitcodes.EX_OK)
self.assertFalse(thread.isAlive())
import re import time import datetime
for row in data: writer.writerow(row) csv_data = read_and_flush() yield csv_data
world.clear_courses()
LANGUAGES = ENV_TOKENS.get('LANGUAGES', LANGUAGES) LANGUAGE_CODE = ENV_TOKENS.get('LANGUAGE_CODE', LANGUAGE_CODE) USE_I18N = ENV_TOKENS.get('USE_I18N', USE_I18N)
assert is_flat_specs(data_specs)
strpfmt = '{0}_%a_%b_%d_%H-%M-%S_%f_%Y'.format(basename)
bookmark = Bookmark.objects.get(user=user, usage_key=usage_key) bookmark.delete() _track_event('edx.bookmark.removed', bookmark)
from __future__ import absolute_import import logging
self.assertRaises(TypeError, lambda: rng / pd.NaT)
if 'download_video' not in field_data and sources: field_data['source'] = field_data['html5_sources'][0]
import os
return
from __future__ import unicode_literals
response = self._response() self.assertFalse(response.is_rendered)
if (algorithm == 'kd_tree' and metric not in neighbors.KDTree.valid_metrics): assert_raises(ValueError, neighbors.NearestNeighbors, algorithm=algorithm, metric=metric, metric_params=metric_params) continue
url_path = StaticContent.serialize_asset_key_with_slash( course_key.make_asset_key('asset', placeholder_id).for_branch(None) ) return url_path.replace(placeholder_id, '')
if method is not None:
def squared_dloss(p, y): return p - y
self.update_enrollment(is_active=False)
import jinja2 import jinja2.ext
return StudentModule.objects.get( student=self.user, course_id=self.course_key, module_state_key=location ).state
pass
self.course = modulestore().get_course(self.course.id)
X = np.ones(17) y = [0] * 3 + [1] * 14
if not kwargs: cmd += ' '
if whiten: assert_almost_equal(s_, np.dot(np.dot(mixing_, k_), m))
params = {'Action': 'CancelSpotInstanceRequests', 'SpotInstanceRequestId.1': sir_id} data = aws.query(params, location=location, provider=provider, opts=__opts__, sigver='4')
if isinstance(f, models.ManyToManyField): initial[k] = initial[k].split(",")
import salt.state from salt.config import minion_config from salt.template import compile_template_str from salt.serializers import yamlex
assert url_path.startswith(settings.STATIC_URL) target_name = url_path[len(settings.STATIC_URL):]
grader_element = etree.SubElement(codeparam_element, "grader_payload") grader_element.text = str(grader_payload)
course_overview = self._assert_image_urls_all_default(modulestore_type, fake_course_image)
df1 = DataFrame({'a': [1, 2, 3], 'b': [3, 4, 5]}) df2 = DataFrame([df1, df1 + 10])
self.assertIsNone(subq._result_cache)
with super(UsersEndpointTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
suggested_prices = models.CommaSeparatedIntegerField(max_length=255, blank=True, default='')
with ensure_clean_store(self.path) as store:
Axes3D
for layer in ds: self.assertEqual(len(layer), source.nfeat)
return self.find_css("#grading_type").present
assert_true(X_scaled is not X)
with self.assertRaises(exceptions.TemplateRuntimeError): env.from_string('{{ document|load_json }}').render(document={"foo": "it works"})
linter = PythonLinter() results = FileResults('') linter.check_python_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
self.tag_map[tag].append(future) self.request_map[request].append((tag, future))
qs = Publisher.objects.extra(select={ 'name_of_shortest_book': shortest_book_sql, }).annotate(total_books=Count('book')) list(qs)
FeatureAgglomeration().fit(X)
log.warning("Send-email task %s for email %s: being retried", current_task_id, email_id)
ret = _get_namespaces(apiserver_url, namespace) return ret
dtype = None
self.assertTrue( self.run_function('xattr.write', [TEST_FILE, 'spongebob', 'squarepants']))
import logging from time import strftime, strptime, gmtime
has_access.return_value = True response = views.all_sequential_open_distrib(self.request, 'test/test/test') self.assertEqual(json.dumps(self.simple_data), response.content)
self.assertAlmostEqual(feat.get('Length'), float(istate.length), 2)
return
overrides.update( deploy_scripts_search_path=tuple(deploy_scripts_search_path) )
import salt import salt.utils import salt.utils.url import salt.fileclient from salt.utils.odict import OrderedDict
X = np.hstack((iris.data, E)) y = iris.target
if old_value is not None: __salt__['file.sed'](makeconf, '^{0}=.*'.format(var), '')
super(SplitMongoModuleStore, self).clone_course(source_course_id, dest_course_id, user_id, fields, **kwargs) return new_course
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
s.asfreq('T')
y_pred_proba = clf.predict_proba(X) y_pred_log_proba = clf.predict_log_proba(X) assert_array_almost_equal(np.log(y_pred_proba), y_pred_log_proba, 8)
if not is_verbatim: self.process_input_line(line, store_history=store_history)
CUSTOM_THEME_OVERRIDES = { 'embargo': BlockedMessage( description='Embargo', template='static_templates/theme-embargo.html' ) }
related_models = get_related_models_recursive(old_model)
train_with_monitoring_datasets( train_dataset=dataset1, monitoring_datasets=uneven_monitoring_datasets, model_force_batch_size=False, train_iteration_mode='sequential', monitor_iteration_mode='sequential')
result = idxr(s)[indexer] self.check(result, s, 3, getitem)
af = AffinityPropagation(preference=-50).fit(X) cluster_centers_indices = af.cluster_centers_indices_ labels = af.labels_
response = self.client.get( "/", HTTP_X_FORWARDED_FOR=request_ip, REMOTE_ADDR=request_ip )
from django.contrib.auth.models import User from django.db import models from django.utils.encoding import python_2_unicode_compatible
win32api.CloseHandle(hProcess)
return normalize_key_for_search(structure_key)
rendered = "0+untagged.%d.g%s" % (pieces["distance"], pieces["short"]) if pieces["dirty"]: rendered += ".dirty"
X_true -= X_true.mean()
user = self.create_user_and_enroll('honor') with self.assertNumQueries(3): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
return self.year_format
from urllib.request import urlopen PY2 = False
from __future__ import absolute_import
component = self.store.publish(component.location, self.user_id) self.assertFalse(self.store.has_changes(component))
self.assertEquals(resp.status_code, 200) self.assertTrue(resp.get('Content-Disposition').startswith('attachment'))
return self.q(css="a#add-allowance").present
if not os.path.isabs(url_data.path): raise CommandExecutionError( 'Path \'{0}\' is not absolute'.format(url_data.path) ) return url_data.path
result = pd.infer_freq(df['date']) self.assertEqual(result, 'MS')
from __future__ import absolute_import
opts['hash_type'] = opts['hash_type'].lower()
pass
self.assertReturnNonEmptySaltType(ret) for state_id, state_result in six.iteritems(ret): self.assertSaltTrueReturn(dict([(state_id, state_result)]))
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(message)s')
allow_database_queries = False
lhs = Series(rand(5) > 0.5) expect = ~lhs result = pd.eval(expr, engine=self.engine, parser=self.parser) assert_series_equal(expect, result)
course_keys = map(self._parse_course_key, args)
return settings.FEATURES.get('ENABLE_OPENBADGES', False)
expected_grades = [self._format_user_grade(header_row, **grade) for grade in user_grades] self.verify_rows_in_csv(expected_grades)
result = c.codes[np.array([100000]).astype(np.int64)] self.assertEqual(result, np.array([5], dtype='int8'))
data = "\n" self.assertRaises(EmptyDataError, self.read_csv, StringIO(data))
indptr_3 = X_sparse_unpruned.indptr[3] indptr_4 = X_sparse_unpruned.indptr[4] X_sparse_unpruned.data[indptr_3:indptr_4] = 0.0
verify_group_id_not_present(profiled_user=self.student, pass_group_id=False) verify_group_id_not_present(profiled_user=self.moderator, pass_group_id=False)
tolerance_xml = xml.xpath( '//*[@id=$id]//responseparam[@type="tolerance"]/@default', id=xml.get('id') )
ofh.write('')
flags = libvirt.VIR_DOMAIN_VCPU_MAXIMUM if config: flags = flags | libvirt.VIR_DOMAIN_AFFECT_CONFIG
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'vmware', vm_['profile'], vm_=vm_) is False: return False
_bulk_ops_record_type = BulkOpsRecord
choices = [('a', 'a')] field = models.CharField(choices=choices) klass = forms.TypedMultipleChoiceField self.assertIsInstance(field.formfield(choices_form_class=klass), klass)
freq = getattr(series.index, 'freq', None) if freq is None: freq = getattr(series.index, 'inferred_freq', None)
self.login(self.email, self.pw)
raise
idx = self.frame.index s = Series(range(len(idx)), index=idx)
return self.enabled and self.program_listing_enabled
self.assertFalse(os.path.exists(path_test + '.bak'))
os.chmod(fn, st_mode | read_all)
import integration from salt.exceptions import CommandExecutionError
for target in targets: for migration in graph.forwards_plan(target): if migration not in seen: node = graph.node_map[migration] plan.append(node) seen.add(migration)
ax_response.toMessage(response.fields)
rendered = "0+untagged.%d.g%s" % (pieces["distance"], pieces["short"]) if pieces["dirty"]: rendered += ".dirty"
response = self.client.get('/login_protected_view/') self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')
from salt.modules import useradd from salt.exceptions import CommandExecutionError import pwd
if 'encrypted' in kwargs and 'snapshot' not in kwargs: params['Encrypted'] = kwargs['encrypted']
raised = False fmt = OneHotFormatter(max_labels=50) try: fmt.theano_expr(theano.tensor.vector(dtype=theano.config.floatX)) except TypeError: raised = True assert raised
y = label_binarize(y, classes=[0, 1, 2]) n_classes = y.shape[1]
idx = np.arange(n_train) np.random.seed(13) np.random.shuffle(idx) X_train = X_train[idx] y_train = y_train[idx]
from salt.states import smtp
label_to_fold = np.zeros(len(unique_labels))
expected_answers = {CapaFactory.answer_key(): '3.14'} self.assertEqual(module.lcp.student_answers, expected_answers)
message_template = 'emails/course_creator_revoked.txt'
from lms.envs.test import ( WIKI_ENABLED, PLATFORM_NAME, SITE_NAME, DEFAULT_FILE_STORAGE, MEDIA_ROOT, MEDIA_URL, )
import salt.utils import salt.syspaths from salt.exceptions import SaltInvocationError
idx2 = pd.DatetimeIndex(['2011-01-01', pd.NaT, '2011-01-03', '2011-01-02', pd.NaT], tz=tz) self.assertFalse(idx2.is_monotonic)
df = DataFrame( np.arange(12).reshape(-1, 1), index=pd.MultiIndex.from_product([[1, 2, 3, 4], [1, 2, 3]]))
from salt.states import boto_ec2
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
self.now = datetime.datetime.now()
self.maxDiff = 1024
@override_settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.AllowAllUsersModelBackend']) class AuthenticationFormTest(TestDataMixin, TestCase):
res.is_copy = self.is_copy
vmconfig['changed']['add_{0}'.format(instance)].append(state_cfg)
self.add_to_cart() self.request.user = self.user context = user_has_cart_context_processor(self.request) self.assertFalse(context['should_display_shopping_cart_func']())
raise ImportError("No IPython")
return ret
ecommerce_service = EcommerceService() if ecommerce_service.is_enabled(user): url = ecommerce_service.checkout_page_url(sku)
url(r'^edge/(?P<org>[^/]+)/(?P<course>[^/]+)/course/(?P<coursename>[^/]+)$', 'contentstore.views.landing', name='landing'),
self.ts.to_csv(path, header=True) ts_h = Series.from_csv(path, header=0) self.assertTrue(ts_h.name == 'ts')
import_logs = CourseImportLog.objects.all() import_logs.delete()
df['foo'] = np.ones((4, 2)).tolist()
if not has_course_author_access(request.user, item.location.course_key): raise PermissionDenied()
destroy(vm_['name'])
mock_object = Mock() object_config = { 'pk': obj_id, 'name': "object {}".format(obj_id) } mock_object.configure_mock(**object_config) return mock_object
if self.tokenizer is not None: return self.tokenizer token_pattern = re.compile(self.token_pattern) return lambda doc: token_pattern.findall(doc)
o = o.repeat(range(1, len(o) + 1)) o.name = 'a'
nv.validate_reshape(tuple(), kwargs) return self
class AllowsNullGFK(models.Model): content_type = models.ForeignKey(ContentType, models.SET_NULL, null=True) object_id = models.PositiveIntegerField(null=True) content_object = GenericForeignKey()
ret = self.run_function('user.delete', [DEL_USER]) self.assertTrue(ret)
self._result_cache = None return deleted, _rows_count
_attributes = ['freq', 'axis', 'closed', 'label', 'convention', 'loffset', 'base', 'kind']
self.common_test_that_should_always_pass()
return self.topo_space.np_format_as(topo_batch, self.storage_space)
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
limit = 50000
import salt.utils from salt.exceptions import CommandExecutionError
self.io_loop.start()
for ignored in IGNORED_PARAMS: if ignored in lookup_params: del lookup_params[ignored] return lookup_params
return True
from napalm import get_network_driver HAS_NAPALM = True
value.srid = self.srid
return self.get_item(location)
from __future__ import absolute_import
from __future__ import absolute_import
from __future__ import absolute_import
self.assertFalse(module_has_submodule(test_module, 'django')) with self.assertRaises(ImportError): import_module('utils_tests.test_module.django')
response = middleware.process_response(request, response) self.assertFalse(response.cookies[settings.SESSION_COOKIE_NAME]['httponly'])
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True], credit_type='halves' )
time.sleep(60)
from __future__ import absolute_import
if test3 <= ctol: istop = 3 if test2 <= atol: istop = 2 if test1 <= rtol: istop = 1
COMPREHENSIVE_THEME_DIR = ""
self.assertSetEqual( set(response.data['blocks'].iterkeys()), self.non_orphaned_block_usage_keys, )
X, y = make_circles(factor=0.5, random_state=0, noise=0.05)
instructor = UserFactory.create(password="test") role = CourseInstructorRole(self.course.id) role.add_users(instructor) return instructor
block = self._add_simple_content_block() with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
def value_from_datadict(self, data, files, name): value = data.get(name, '') return value.lower() == 'true'
ModelState.from_model(Book).render(apps) ModelState.from_model(Novel).render(apps)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if draft_node.parent_location is None: continue
from __future__ import absolute_import import os import logging import signal import tempfile from threading import Thread, Event
for course_key, deadline in deadlines.iteritems(): VerificationDeadline.objects.create( course_key=course_key, deadline=deadline, )
self.assertEqual(u.get_username(), 'testuser')
if nd_state[2] == 'M8[us]': new_state = np.ndarray.__reduce__(data.astype('M8[ns]')) np.ndarray.__setstate__(data, new_state[2])
self.assertTrue(type(df.a[0]) is np.float64) self.assertEqual(df.a.dtype, np.float)
self.assertEqual(ed.books.count(), 2) self.assertEqual(fred.books.count(), 1)
import logging import re
pass
metadata_to_inherit = {}
self.assertRedirects(response, '/get_view/?var=value')
options['secret_key'] = get_random_secret_key()
'state_output_diff': bool,
self.assertIn(self.split_test_module.child_descriptor.url_name, ['split_test_cond0', 'split_test_cond1'])
ret = {name: {'old': old.get(name, ''), 'new': new.get(name, '')}}
self.assertTrue(glusterfs.create_volume('newvolume', 'host1:/brick', start=True)) self.assertTrue(mock_start_volume.called)
X = self._validate_X_predict(X)
USE_TZ = False
class CsInt(GEOSFuncFactory): "For coordinate sequence routines that return an integer." argtypes = [CS_PTR, POINTER(c_uint)] restype = c_int errcheck = staticmethod(check_cs_get)
raise NotImplementedError( 'subclasses of BaseDatabaseSchemaEditor for backends which have ' 'requires_literal_defaults must provide a prepare_default() method' )
return self.asset_md.get(item, default)
view = PostOnlyView() response = view.dispatch(self.rf.head('/')) self.assertEqual(response.status_code, 405)
if should_grade_section: scores = []
violations_count_str = "Number of pep8 violations: {count}".format(count=count) print violations_count_str print violations_list
url_fields[1] = url_fields[2] url_fields[2] = '' url_fields = split_url(urlunsplit(url_fields))
return "TO_CHAR(%s, 'D')" % field_name
self.assertLocationCommentPresent(self.PO_FILE, 'Translatable literal #6b', 'templates', 'test.html')
gated_content = gating_api.get_gated_content(course, student)
self.wait_for_ajax()
pass
labels, new_inertia = _labels_inertia( X_mb, x_mb_squared_norms, new_centers) assert_greater(new_inertia, 0.0) assert_less(new_inertia, old_inertia)
assert source == '' return None
return name
_options.update( _fetch_profile_opts( cfg, virtualname, __salt__, _options, profile_attr, profile_attrs ) )
@patch('salt.utils.which', lambda exe: exe) def test_existing_binary_in_linux(self): self.assertTrue(salt.utils.which('this-binary-exists-under-linux'))
temp_poll_answers = self.poll_answers
file_to_upload = 'image.jpg' self.settings_page.upload_image('#upload-banner-image', file_to_upload) self.assertIn(file_to_upload, self.settings_page.get_uploaded_image_path('#banner-image'))
response = self._get_progress_page()
'openedx.core.djangoapps.common_views',
from __future__ import unicode_literals
self._login_as_non_staff_user() self.assertFalse(self._can_access_library(self.library))
import re import os
def simple_dec(func): def wrapper(arg): return func("test:" + arg) return wraps(func)(wrapper)
if not isinstance(config, dict): return False, ('Configuration for wtmp beacon must be a dictionary.') return True, 'Valid beacon configuration'
result = frame.pivot(columns='columns')
relative_path = parts.repo or "gentoo"
ns_resolver = RegexURLResolver(ns_pattern, resolver.url_patterns) return RegexURLResolver(r'^/', [ns_resolver])
response = self.fetch('/login', method='POST', body=yaml.dump(self.auth_creds_dict), headers={'Content-Type': self.content_type_map['yaml']})
return self.get_comment_list_url(obj, endorsed=False)
import salt.payload import salt.utils from salt.defaults import DEFAULT_TARGET_DELIM from salt.exceptions import CommandExecutionError import salt.auth.ldap import salt.ext.six as six
import ctypes import string
pred = mb_k_means.predict(mb_k_means.cluster_centers_) assert_array_equal(pred, np.arange(n_clusters))
X = np.atleast_2d([1., 3., 5., 6., 7., 8.]).T
return list(map(_normalize_dir, ret))
class Photo(models.Model): title = models.CharField(max_length=30) image = models.FileField(storage=temp_storage, upload_to='tests')
for c in categories: self.assertIn(c.pk, d['categories']) self.assertIsInstance(d['categories'], list)
with patch('capa.responsetypes.LoncapaResponse.evaluate_answers') as mock_evaluate_answers: mock_evaluate_answers.return_value = CorrectMap(CapaFactory.answer_key(), 'correct') result = module.rescore_problem()
CourseEnrollment.enroll(self.user, self.course.id) self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course.id))
test_string = "this string has no subtags" result = Ks.substitute_keywords_with_data( test_string, self.context, ) self.assertEquals(test_string, result)
from itertools import imap as map range = xrange
>>> aapl.puts
return check_sum_of_calls(object_with_method, [method_name], maximum_calls, minimum_calls)
import salt.utils import salt.output import salt.exceptions
from __future__ import absolute_import
if n_components == X.shape[1]: assert_array_almost_equal(X, X2)
if isinstance(values, np.ndarray): return obj[indexer.get_loc(key)]
return 1
__virtualname__ = 'fmadm'
self.field_handlers = {} for field_name in self.DEFAULT_FIELDS + self.EXTRA_FIELDS: handler = getattr(self, "_add_{field_name}_field".format(field_name=field_name)) self.field_handlers[field_name] = handler
parent = kwargs.pop('parent', None) or store.get_item(parent_location)
other = RangeIndex(25, 14, -1)
_write_file_network(network, _DEB_NETWORKING_FILE, True)
with mock.patch('requests.post') as mock_post: self.call_create_zendesk_ticket() self.assertFalse(mock_post.called)
courses_list = list(get_course_enrollments(self.student, None, [])) self.assertEqual(len(courses_list), 2)
self.pk = target._meta.pk self.proxy_for_model = target self.db_table = target._meta.db_table
response = self.client.get( reverse('course_modes_choose', args=[unicode(self.course.id)]), follow=False, )
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.guitar_book])
bulk_ops_record = self._get_bulk_ops_record(structure_key) if not bulk_ops_record.active: return
exp = pd.Series([1, 2, 3]) tm.assert_series_equal(res, exp)
if self.names == other.names: pass else: return self._join_multi(other, how=how, return_indexers=return_indexers)
try: mask = importances >= threshold except TypeError: raise ValueError("Invalid threshold: all features are discarded.")
selector = RFE(estimator, step=0.01) sel = selector.fit(X, y) assert_equal(sel.support_.sum(), n_features // 2)
return get_processor_config().get('PURCHASE_ENDPOINT', '')
try: new_configuration = GroupConfiguration(request.body, course, group_configuration_id).get_user_partition() except GroupConfigurationsValidationError as err: return JsonResponse({"error": err.message}, status=400)
with tm.assert_produces_warnings(None): df.eval('a + b')
param_rows = [[p for ps in row for p in ps] for row in param_rows]
boston = datasets.load_boston()
'enrollment',
self.assertIsNone(get_cache_key(request)) learn_cache_key(request, response)
if hasattr(key, 'version_agnostic') and hasattr(key, 'for_branch'): return key.for_branch(None).version_agnostic() else: return key
if isinstance(loc, slice): lev_num = labels._get_level_number(level) if labels.levels[lev_num].inferred_type == 'integer': loc = labels[loc]
termination_criterion = EpochCounter(5)
resp_data = json.loads(response.content) user_message_url = get_absolute_url(user_message_path) self.assertEqual(resp_data['user_message_url'], user_message_url)
from __future__ import absolute_import import os.path
from __future__ import absolute_import import os
def naive_log_logistic(x): return np.log(1 / (1 + np.exp(-x)))
for letter in range(ord('A'), ord('Z')): self.frame[chr(letter)] = chr(letter)
self.launch_uri = self.uri + 'wrong_lti_endpoint' response = requests.post(self.launch_uri, data=self.payload) self.assertIn('Invalid request URL', response.content)
buttons = world.css_find('div.mce-widget>button')
self.assertEqual(len(self.lib_page.xblocks), 1) problem_block = self.lib_page.xblocks[0] self.assertIn("Laura Roslin", problem_block.author_content)
'ratelimitbackend.middleware.RateLimitMiddleware', 'edxmako.middleware.MakoMiddleware',
from __future__ import unicode_literals
__virtualname__ = 'json'
attempt = SoftwareSecurePhotoVerification(user=user) attempt.mark_ready() assert_equals(attempt, SoftwareSecurePhotoVerification.active_for_user(user))
self._each_parens(r'\left[x^y\right]', 'x^y', '[', tall=True)
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath ensure_in_syspath('../../')
call_command("loaddata", "course_email_template.json")
'post_params_decline': post_params_decline
import salt.utils import salt.utils.url import salt.fileserver from salt.utils.event import tagify
try: return self._config.get_setting(name) except KeyError: return self.strategy.setting(name, default)
result = idx.delete(5)
language_options = DarkLangConfig.current().released_languages_list if settings.LANGUAGE_CODE not in language_options: language_options.append(settings.LANGUAGE_CODE) return language_options
self.minions = {}
TEMPLATE_NAME = None
if not start(name, vmid, call='action'): log.error('Node {0} ({1}) failed to start!'.format(name, vmid)) raise SaltCloudExecutionFailure
if DEBUG_ACCESS: log.debug(*args, **kwargs)
for config_key in ('log_file', 'key_logfile'): log_setting = opts.get(config_key, '') if log_setting is None: continue
non_int_round_dict = {'col1': 1, 'col2': 0.5} with self.assertRaises(TypeError): df.round(non_int_round_dict)
return True
assert_raises(ValueError, cval.StratifiedShuffleSplit, y, 3, 0.2)
return False
if is_feature_enabled(): BACKEND.enable_microsites_pre_startup(log)
result0 = func(arr, min_periods=0) result1 = func(arr, min_periods=1) tm.assert_almost_equal(result0, result1)
K_test = np.dot(X_[180:], X_[:180].T) y_test = y_[180:]
left = self.rng[:5] right = self.rng[10:]
current_cert_bindings = list_cert_bindings(site)
cls.create_image(prefix, (1, 1), 'yellow', 'special/{}_lock.png', locked=True)
import msgpack import zmq import salt.ext.six as six
sls[ps_opts['d-i']['languagechooser']['language-name-fb']['argument']] = { 'locale': ['system'] }
del p._restaurant_cache self.assertIsNot(p.restaurant, r)
loader = jinja2.FileSystemLoader( context, os.path.dirname(tmplpath))
value = dist_val[0]
from __future__ import absolute_import
return _get_array_element('scale change', label, (0.78, 1.0))
__func_alias__ = { 'list_': 'list' }
check_node(test_course.location, None, after_create, self.user_id, after_create, after_edit, editing_user)
sig0 = der_sig_in.payload
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return hasattr(self, '_has_mask')
fixtures = None
ret['result'] = None
if self.name in self.name_to_event_type_map: super(VideoEventTransformer, self).transform()
if not has_rejectfile_option: cmd.append('--reject-file=-')
x_weights = np.dot(X.T, y_score) / np.dot(y_score.T, y_score)
with self._mock_geoip('US'): result = embargo_api.check_course_access(self.course.id, user=self.user, ip_address='0.0.0.0')
y = np.array([10, 9, 10, 7, 6, 6.1, 5]) x = np.arange(len(y))
self.serialized_rollback and hasattr(connections[db_name], '_test_serialized_contents')
status = [] thread = threading.Thread( target=self.run_select_for_update, args=(status,) )
return _base_and_stride(freqstr)[0]
import functools import operator
is_timedelta_lhs = is_timedelta64_dtype(left) is_datetime_lhs = (is_datetime64_dtype(left) or is_datetime64tz_dtype(left))
mode = __salt__['config.manage_mode'](mode)
return self._validation_paragraph('warning').text[0]
from __future__ import absolute_import import os import glob import tempfile import time import logging
if expected_n_iter is not None: assert_equal(cv.get_n_splits(X, y, labels), expected_n_iter) else: expected_n_iter = cv.get_n_splits(X, y, labels)
css = '.group-name' return self.find_css(css).first.text[0]
except (AttributeError, ValueError): violations['total'] = None return violations
new_state = __salt__['tuned.profile'](profile)
rendered_html = etree.XML(problem.get_html())
params["username"] = "invalid username" assert_username_error("Usernames must contain only letters, numbers, underscores (_), and hyphens (-).")
course_keys = CourseOverview.get_all_course_keys() for expected_course_key in courses: self.assertIn(expected_course_key, course_keys)
if not path or not os.path.isfile(path): return ret
with self.assertRaisesMessage(Exception, "Oops"):
self._test_visible_to_students(False, 'public_unreleased', self.future, publish=True)
elif single_aligner:
person = models.ForeignKey(Person, models.CASCADE, related_name='relating_person') person_hidden = models.ForeignKey(Person, models.CASCADE, related_name='+')
if is_timedelta64_dtype(values): return lib.Timedelta(0) return 0
return get_random_string(length, allowed_chars)
import logging import salt.utils.http
self.assertTrue(self.store.has_changes(xblock))
cp = df.copy() cp.ix[4:10] = 0 self.assertTrue((cp.ix[4:10] == 0).values.all())
elif self._selection is not None:
def func1(): raise ValueError("[.*x+]y?") with self.assertRaisesMessage(ValueError, "[.*x+]y?"): func1()
response = self.client.get(self.path) self.assertEqual(response.status_code, 403)
return service
raise NotImplementedError('Subclasses must implement course_partition')
estimator.means_init = np.array([X_train[y_train == i].mean(axis=0) for i in range(n_classes)])
version_num = '' if options: version_num = options.get('version', False)
self.assertRaises(ValueError, lambda: series.groupby(bins).mean())
inputs = SparseType('csr', dtype=theano.config.floatX)() return theano.function([inputs], self(inputs), name=name)
if self.n_components_ == 0: return np.eye(n_features) / self.noise_variance_ if self.n_components_ == n_features: return linalg.inv(self.get_covariance())
this_extensions = deepcopy(extensions)
response.templates = data.get("templates", []) response.context = data.get("context")
log.error('Running \'git --version\' returned no stdout') __context__[contextkey] = 'unknown'
try: from pandas.core.index import MultiIndex except ImportError: pass
mixed = Series(['a_b_c', NA, 'c_d_e', True, datetime.today(), None, 1, 2.])
import logging
world.browser.driver.get(url) assert_equal(world.css_text('body'), expected_text)
subject = "Re-verification Status" mock_send_email.assert_called_once_with(self.user.id, subject, ANY)
REPORT_DIR = REPO_ROOT / 'reports' METRICS_DIR = REPORT_DIR / 'metrics'
self.centroids_ = np.empty((n_classes, n_features), dtype=np.float64) nk = np.zeros(n_classes)
self.assertIn('note_id', ExtraInfo.objects.values()[0])
httpretty.enable()
self.assertEqual(sql_for_table(Scientist), sql_for_table(ScientistRef))
STATIC_ROOT_BASE = ENV_TOKENS.get('STATIC_ROOT_BASE', None) if STATIC_ROOT_BASE: STATIC_ROOT = path(STATIC_ROOT_BASE)
record_purchase(params, result['order']) return {'success': True, 'order': result['order'], 'error_html': ''}
isinstance(field, GeometryField)
for column in six.iteritems(self.get_indexes(cursor, table_name)): if column[1]['primary_key']: return column[0] return None
output = self.engine.render_to_string('i18n08', {'number': 2}) self.assertEqual(output, '2 plural')
return self.entrance_exam_message_selector.is_present()
microsite_courses = get_courses(user, org=alternate) self.assertTrue( all(course.org == alternate_course.org for course in microsite_courses) )
try: os.remove(path) except IOError: pass return None
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): result = mom.rolling_apply(arr, 10, np.sum) self.assertTrue(isnull(result).all())
from pylearn2.datasets import preprocessing
del self.pub_channel
for bad_map in (bad1, bad2, bad3): with self.assertRaises(LayerMapError): LayerMapping(City, city_shp, bad_map)
assert_page_correct( page=2, page_size=4, expected_start=4, expected_stop=8, expected_next=3, expected_prev=1 )
cohort = CohortFactory(course_id=self.course.id, users=[]) self._verify_non_staff_cannot_access( remove_user_from_cohort, "POST", [unicode(self.course.id), cohort.id] )
from __future__ import absolute_import import fnmatch import logging import os import pprint
self.assertLessEqual( datetime.datetime.now(UTC()), child.start )
return []
for test_index in self._iter_test_indices(X, y, labels): test_mask = np.zeros(_num_samples(X), dtype=np.bool) test_mask[test_index] = True yield test_mask
self.o.maxtimeout = config['api_login_timeout'] self.o.wait_for_rsp(timeout=1)
apps.check_models_ready() return self.remote_field.model
PAYLOAD_EXTRA_FIELDS = 'payload_extra_fields'
from salt.states import ddns
from openedx.core.djangoapps.credit.api.eligibility import ( is_credit_course, set_credit_requirement_status as api_set_credit_requirement_status )
bool = models.BooleanField(default=True)
raise NotImplementedError
self.assertRaises(ValueError, df.reindex, index=list(range(len(df))))
output = self.engine.render_to_string('inheritance06', {'foo': 'inheritance02'}) self.assertEqual(output, '1234')
self.assertEqual(response.status_code, 200) res_json = json.loads(response.content)
return True
@ignore_warnings(category=DeprecationWarning) def test_verbose_second_level(): X = rng.randn(30, 5) X[:10] += 2 g = mixture.GMM(n_components=2, n_init=2, verbose=2)
if self.is_transposed: obj = obj.T return obj
options = opts.split(',')
if not settings.FEATURES.get('ENABLE_TEAMS'): filtered_list.append('teams_configuration')
u, d, _ = linalg.svd(X, full_matrices=False)
validator_data["storage"] = storage validator_data["filename"] = filename verify_file_presence(True)
page_num = ((offset / MAX_STUDENTS_PER_PAGE_GRADE_BOOK) + 1)
return y - np.nan_to_num(np.exp(pred[:, k] - logsumexp(pred, axis=1)))
self.register_flag_response("thread", thread_id)
CourseFixture(**self.course_info).install()
self.test_init_database()
return self._get_label(tup, axis=0)
import binascii import hashlib import logging import os import re import subprocess
df = df_orig.T.to_sparse()
from __future__ import absolute_import import logging import re
Number.objects.filter(pk=self.n.pk).update(integer=F('integer') * 15, float=F('float') * 42.7)
self.update_state( course_key=course_key, new_state=self.State.SUCCEEDED, )
from __future__ import absolute_import
pass
return self.values.fill_value
self._click_programs_tab() return self.q(css='div.programs-tab.active a.new-program-button').present
self._orig = data self._freeze()
priority = None
self.check_event_response_by_key('handle_vote', resource, 'newVotes', test_case['new_votes'])
result = self.frame[lambda x: 'A'] tm.assert_series_equal(result, self.frame.loc[:, 'A'])
overrides = overrides.copy() if overrides else {} overrides.setdefault("course_id", unicode(self.course.id)) return make_minimal_cs_thread(overrides)
from __future__ import unicode_literals
for course in courses_in_progress: CourseRerunState.objects.initiated( sourse_course_key, destination_course_key=course.id, user=self.user, display_name="test course" )
desc = "currently at section '{0}' and subsection '{1}'".format(section_title, subsection_title) return EmptyPromise( lambda: self.is_on_section(section_title, subsection_title), desc )
if config[service] is None: defaults = { 'oncleanshutdown': False, 'emitatstartup': True, 'onchangeonly': False } config[service] = defaults
assert_almost_equal(s, 2.0/3.0)
plt.figure(figsize=(10, 6)) ax = plt.gca() bmk.plot(DB_PATH, ax=ax)
n_leaves = n_samples children = [c[::-1] for c in children]
mock = MagicMock(return_value=False) with patch.object(composer, '_valid_composer', mock): self.assertRaises(CommandNotFoundError, composer.update, 'd')
self.orderitem_set.all().delete()
self.obj[key] = _infer_fill_value(value)
res = _values_from_object(res)
log.debug('Single environment per bucket mode')
result = df.drop_duplicates('C') expected = df[:2] tm.assert_frame_equal(result, expected)
df = orig.copy() df.iloc[2, :] = ["b", 2] tm.assert_frame_equal(df, exp_single_row)
xseries = Series(x, xdindex.indices) xseries = xseries.reindex(np.arange(TEST_LENGTH)).fillna(xfill)
si = _get_si()
yaml_parse = None control = None cuda = None
for create_data, additional_data_to_expect in data: xblock_cache = XBlockCache.create(create_data) create_data.update(additional_data_to_expect) self.assert_xblock_cache_data(xblock_cache, create_data)
return self._is_element_visible(".response_{} .action-show-comments".format(response_id))
last_modified_at_str = content.last_modified_at.strftime(HTTP_DATE_FORMAT) if 'HTTP_IF_MODIFIED_SINCE' in request.META: if_modified_since = request.META['HTTP_IF_MODIFIED_SINCE'] if if_modified_since == last_modified_at_str: return HttpResponseNotModified()
dict(safe_zip(range(10), range(10))),
for field_desc in results.split(','): field_desc = field_desc.strip() if field_desc.startswith("UNIQUE"): continue
assert_almost_equal(np.dot(U[:, :k], V[:k, :]), np.dot(Ua, Va))
log.trace('Trying pysss.getgrouplist for \'{0}\''.format(user)) try:
if sp.issparse(X) and X.getformat() not in ["csr", "csc"]: X = X.tocsr()
centers = [[1, 1], [-1, -1], [1, -1]] X, labels_true = make_blobs(n_samples=300, centers=centers, cluster_std=0.5, random_state=0)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
ssh_gateway_private_key: /path/to/key.pem
stdin_read, stdin_write = win32pipe.CreatePipe(security_attributes, 0) stdin_read = make_inheritable(stdin_read)
w = [x for x in w if x.category is UserWarning]
from __future__ import unicode_literals
for i in range(len(p.ext_ring_cs)):
@method_decorator(csrf_exempt) def dispatch(self, request, *args, **kwargs): return super(CreditCourseViewSet, self).dispatch(request, *args, **kwargs)
enetcv_unconstrained = ElasticNetCV(n_alphas=3, eps=1e-1, max_iter=max_iter, cv=2, n_jobs=1) enetcv_unconstrained.fit(X, y) assert_true(min(enetcv_unconstrained.coef_) < 0)
sanitized_html_id = re.sub(r'[:-]', '_', html_id) return sanitized_html_id
from __future__ import unicode_literals
io.stdout = self.cout io.stderr = self.cout
from __future__ import absolute_import
times += times di = DatetimeIndex(times)
res, lidx, ridx = self.index.join(other_mono, how='inner', return_indexers=True)
self.team_size = CourseTeamMembership.objects.filter(team=self).count() self.save()
import salt.ext.six as six
import salt.utils import integration
if sys.version_info[0] < 3: import __builtin__ as builtins else:
deploy_scripts_search_paths.append((entry, True))
self._unenroll() self.assertEqual(DEFAULT_VERIFIED_COHORT_NAME, get_cohort(self.user, self.course.id, assign=False).name)
try: import numpy as np except ImportError: np = None self.np = np
for pkgname in ret[reponame]: sorted_versions = sorted( [_LooseVersion(x) for x in ret[reponame][pkgname]], reverse=True ) ret[reponame][pkgname] = [x.vstring for x in sorted_versions]
self.assertRaises(ValueError, DataFrame.from_records, df, index=[2]) self.assertRaises(KeyError, DataFrame.from_records, df, index=2)
filenames = np.array(filenames) target = np.array(target)
self.course_outline.visit() self.course_outline.open_subsection_settings_dialog(1) self.course_outline.select_access_tab() self.course_outline.add_prerequisite_to_subsection("80")
return not WORKTREE_INFO[key].get('stale', False)
object_domain = None
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
allna = self.series * nan self.assertTrue(isnull(allna.idxmax()))
result = f.clean('1:30 PM 21-12-2010') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
courses = self.get_courses() return [course.location.course_key for course in courses if course.wiki_slug == wiki_slug]
HAS_PSUTIL = False try: import psutil HAS_PSUTIL = True except ImportError: pass
from __future__ import absolute_import import os
return filename and filename[filename.rfind("\\") + 1:].strip()
return self._get_modulestore_for_courselike(course_id).get_modulestore_type()
if len(names) == 1 and len(ret): return ret[names[0]]
__virtualname__ = 'git'
try: return frequencies.infer_freq(self) except ValueError: return None
queryset.delete()
epub_cover = ('', 'epub-cover.html')
if not settings.FEATURES.get('ENABLE_CORS_HEADERS'): raise MiddlewareNotUsed()
__salt__['saltutil.refresh_modules']()
context['company_about_description'] = _("{platform_name} offers interactive online classes and MOOCs.").format( platform_name=platform_name)
pass
available_version = salt.utils.alias_function(latest_version, 'available_version')
username_or_email = row.get('email') or row.get('username') cohort_name = row.get('cohort') or '' task_progress.attempted += 1
channels=3
return self.q(css='section.about-accomplishments').present
X = lfw_people.data n_features = X.shape[1]
axes = df.plot(x='x', y='y', kind='scatter', subplots=True) self._check_axes_shape(axes, axes_num=1, layout=(1, 1))
resp = self.client.put( '/shoppingcart/payment_fake', data="decline", content_type='text/plain' ) self.assertEqual(resp.status_code, 200)
if 'remove_{0}'.format(collection) not in vmconfig['changed']: vmconfig['changed']['remove_{0}'.format(collection)] = []
cum_xx = self._cum_xx(x)
for n in [4, 4000]:
v2 = CountVectorizer(vocabulary=v1.vocabulary_)
num_new_fields_set = num_fields_after - num_fields_before self._ddog_histogram(evt_time, 'set_many.fields_set', num_new_fields_set)
if max_cols is None: max_cols = get_option('display.max_info_columns', len(self.columns) + 1)
if name in list_tasks(location): return '{0} already exists'.format(name)
from salttesting import TestCase from salttesting.mock import Mock, patch
sorted_df = frame.sort_values(by=['A'], ascending=[False]) assert_frame_equal(sorted_df, expected)
orig = self.orig sparse = self.sparse
return
STATUS_MESSAGE_PATH = ENV_ROOT / "status_message.json"
return TEST_COURSE_KEY.make_usage_key('problem', problem_url_name)
err = st_.verify_data(kwargs) if err: __context__['retcode'] = 1 return err
get_version = { 'Linux': linux_netdev, 'FreeBSD': freebsd_netdev, }
TIME_ZONE = 'America/Chicago'
self.counter = 0
config.add_subpackage('tests')
self.assertEqual(course.display_name, u"Φυσικά το όνομα Unicode")
if host_name: host_ref = search_index.FindByDnsName(dnsName=host_name, vmSearch=False) else: host_ref = search_index.FindByDnsName(dnsName=host, vmSearch=False)
if not path or not os.path.isfile(path): return ret
new_axes = [selfsorted.columns, major_axis, minor_axis]
return unpack('i', data[106:114])[0]
mock_init.side_effect = Exception response = get_credit_provider_display_names(self.course_key) self.assertTrue(mock_init.called) self.assertEqual(response, None)
django_next_version = '1.11'
managed = False
self.send_response(200, 'This is LTI Provider.', {'Content-type': 'text/plain'})
assert_frame_equal(df.div(row), df / row) assert_frame_equal(df.div(col, axis=0), (df.T / col).T)
target = MultiIndex.from_tuples(target)
drafts.sort(key=lambda x: x.index)
global DenseMulticlassSVM skip_if_no_sklearn() skip_if_no_data() import pylearn2.models.svm DenseMulticlassSVM = pylearn2.models.svm.DenseMulticlassSVM
s = Series([1], dtype='float32') with tm.assert_produces_warning(FutureWarning): result = s.convert_objects(convert_dates='coerce', convert_numeric=False) assert_series_equal(result, s)
data_stream = stream_reuters_documents()
from selenium.webdriver.common.by import By from selenium.webdriver.support import expected_conditions as ec self.wait_until( ec.text_to_be_present_in_element( (By.CSS_SELECTOR, css_selector), text), timeout )
import os import stat
from __future__ import print_function from __future__ import absolute_import import glob import logging import os import re import sqlite3 as lite from salt.exceptions import SaltInvocationError
self.assertTrue(EmbargoedCourse.is_embargoed(course_id)) self.assertEquals( unicode(cauth), u"Course '{course_id}' is Embargoed".format(course_id=course_id) )
mock_model_log_exception.assert_called_once_with( 'Error sending API user notification email for request [%s].', self.api_access_request.id ) self.assertEqual(self.api_access_request.status, ApiAccessRequest.APPROVED)
default_level = None from_logout = _is_from_logout(request) if from_logout: default_level = logger.getEffectiveLevel() logger.setLevel(ERROR) try: yield finally: if from_logout: logger.setLevel(default_level)
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
module_path, _, name = engine_path.rpartition('.') return getattr(import_module(module_path), name)
if not settings.FEATURES.get('CUSTOM_COURSES_EDX'): filtered_list.append('enable_ccx') filtered_list.append('ccx_connector')
return parse(out)
Ensure mylc exists: boto_lc.present: - name: mylc - image_id: ami-0b9c9f62 - profile: myprofile
self._assert_course_verification_status(None)
self.assertEqual(repr(idx), expected)
assert_equal(sys.modules['warnings'].filters, [])
return PrefixNode.handle_token(parser, token, "STATIC_URL")
v3 = CountVectorizer(vocabulary=None) assert_raises(ValueError, v3.transform, train_data)
self.assertEqual(context['currency'], 'PKR') self.assertEqual(context['currency_symbol'], 'Rs')
from __future__ import absolute_import
from __future__ import unicode_literals
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON
new_tab = self.get_item_from_modulestore(usage_key) self.assertEquals(new_tab.display_name, 'Empty')
self._verify_xblock_info_state(xblock_info, 'has_explicit_staff_lock', expected_state, path, should_equal)
logging.captureWarnings(True)
panel = Panel(items=lrange(3), major_axis=lrange(3), minor_axis=lrange(3), dtype='O') self.assertEqual(panel.values.dtype, np.object_)
raise TypeError("Unknown object type in has_access(): '{0}'" .format(type(obj)))
self.certificates_section.remove_first_certificate_exception() self.assertNotIn(self.user_name, self.certificates_section.last_certificate_exception.text) self.assertNotIn(notes, self.certificates_section.last_certificate_exception.text)
from __future__ import unicode_literals
CUSTOM_DAY_FORMAT = 'd/m/Y CUSTOM'
calls = []
import os import datetime try: import spwd except ImportError: pass
has_native_uuid_field = False
return LibraryLocator(org=org, library=library)
__float__ = _coerce_method(float) __long__ = _coerce_method(int) __int__ = _coerce_method(int)
super(DuplicateCourseError, self).__init__( u'Cannot create course {}, which duplicates {}'.format(course_id, existing_entry) ) self.course_id = course_id self.existing_entry = existing_entry
self.full_path = full_path self._mark_disabled(string_lines.get_string())
self.assertEqual(_install_from_path.called, 0)
pass
TASK_LOG.info(u'%s, Task type: %s, Finishing task: %s', task_info_string, action_name, task_progress) return task_progress
return start
from salt.states import mongodb_database
from __future__ import absolute_import import logging
code_redemption = RegistrationCodeRedemption(registration_code=course_reg_code, redeemed_by=user) code_redemption.save() return code_redemption
if not data.startswith(self.PICKLE_PAD): return {} load = self.serial.loads(data[len(self.PICKLE_PAD):], raw=raw) return load
import salt.exceptions import salt.utils.event
return meta("NewBase", bases, {})
embargo_redirect = embargo_api.redirect_if_blocked( course_key, user=request.user, ip_address=get_ip(request), url=request.path ) if embargo_redirect: return redirect(embargo_redirect)
self.asset_name = 'delete_test' self.asset = self.get_sample_asset(self.asset_name)
try: carg = arg.astype(np.float64) return calc_with_mask(carg, com.notnull(carg)) except: pass
cm = metrics.confusion_matrix(y_test, y_predicted) print(cm)
return self.encode(inputs)
return BACKEND.get_all_config()
return _save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=task_definition.Principal.UserID, password=None, logon_type=task_definition.Principal.LogonType)
PROGRAMS_STUB_URL = os.environ.get('programs_url', 'http://localhost:8090')
mlp_second_part = MLP( layers=[ second_indep_layer ], input_space=VectorSpace(features_in_second_mlp), input_source=('features1') )
self.navigate_to_video()
make_asset_xml(num_assets, ASSET_XML_PATH) validate_xml(ASSET_XSD_PATH, ASSET_XML_PATH)
import salt.utils from salt.exceptions import CommandExecutionError, MinionError import salt.ext.six as six
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
try: existing_user = User.objects.get(username=username) existing_user_profile = UserProfile.objects.get(user=existing_user) except ObjectDoesNotExist: raise UserNotFound() return existing_user, existing_user_profile
import fnmatch import logging
for chapter_module in course_module.get_display_items(): if chapter_module.hide_from_toc: continue
res = dfobj.replace(r'\s*\.\s*', nan, regex=True) assert_frame_equal(dfobj, res.fillna('.'))
raise NotImplementedError('subclasses of Serializer must provide an handle_field() method')
if not _np_version_under1p11: s = tz_replacer(s) return np.datetime64(s, *args, **kwargs)
import salt.utils
status_by_req = defaultdict(lambda: False) for status in CreditRequirementStatus.get_statuses(requirements, username): status_by_req[status.requirement.id] = status.status
result = df.loc(axis=1)[:, 'foo'] expected = df.loc[:, (slice(None), 'foo')] assert_frame_equal(result, expected)
example_messages = [str(i) for i in range(5)] set_cookie_data(cookie_storage, [CookieStorage.not_finished], encode_empty=True) set_session_data(session_storage, example_messages)
microsite.set_by_domain(self.microsite_subdomain) configs = microsite.get_all_config() self.assertEqual(len(configs.keys()), 3)
'ENABLE_MOBILE_REST_API': False,
return value
self.register_page.visit()
self.assertNotIn('LEFT OUTER', str(qs.query))
with salt.utils.fopen(requirements_file_path, 'a') as fhw: fhw.write('pep8==1.3.3\n')
lookup_name = 'left'
assert_series_equal(nat_series_dtype_timestamp + NaT, nat_series_dtype_timestamp) assert_series_equal(NaT + nat_series_dtype_timestamp, nat_series_dtype_timestamp)
smaller = self.frame[:2]
model = self.model app = model._meta.app_label return '%s.%s.%s' % (app, model._meta.object_name, self.name)
store = self._get_modulestore_for_courselike(asset_key.course_key) return store.delete_asset_metadata(asset_key, user_id)
VIDEO_CDN_URL = ENV_TOKENS.get('VIDEO_CDN_URL', {})
django_user_service = DjangoXBlockUserService(self.user, user_is_staff=False) anonymous_user_id = django_user_service.get_anonymous_user_id(username=self.user.username, course_id='edx/toy/2012_Fall') self.assertIsNone(anonymous_user_id)
assert_frame_equal(df, original)
np.random.seed(0)
self.setup_mongo_course(course_edit_method='XML') result_fragment = self.module.render(STUDENT_VIEW, context=self.default_context) self.assertNotIn('View Unit in Studio', result_fragment.content)
from django.forms import CharField, Form, Media, MultiWidget, TextInput from django.template import Context, Template from django.test import SimpleTestCase, override_settings from django.utils.encoding import force_text
return np.apply_along_axis(self, 1, X)[:, 0]
break
added = self.tsframe.add(ts, axis='index')
try: import psutil HAS_PSUTIL = True except ImportError: HAS_PSUTIL = False
a = '\xe0\xe1\xe2\xe3\xe4\xe5\xe7\xe8\xe9\xea\xeb' expected = 'aaaaaaceeee' assert_equal(strip_accents_unicode(a), expected)
log = logging.getLogger(__name__)
if update.MsrcSeverity: if update.MsrcSeverity in results['Severity']: results['Severity'][update.MsrcSeverity] += 1 else: results['Severity'][update.MsrcSeverity] = 1
shape = values.shape
l = [1, 2, 3]
i = RangeIndex(0, 1000) self.assertTrue(i.nbytes < i.astype(int).nbytes / 10)
return self.copy() if copy else self
site.delete() with self.assertRaises(ObjectDoesNotExist): get_current_site(request)
ssh_gateway_config = {'ssh_gateway': ssh_gateway}
count = Number.objects.count() qs = Number.objects.all()
storage = self.storage_class(self.get_request()) storage._loaded_data = data or [] return storage
yield SubWidget(self, name, value, attrs, choices)
return course_metadata_utils.display_name_with_default(self)
git_mod.__salt__ = {} git_mod.__context__ = {} log = logging.getLogger(__name__)
raise CommandError( _( 'Skipping user "{}" because the specified and existing email ' 'addresses do not match.' ).format(user.username) )
import salt.utils from salt.utils.locales import sdecode, sdecode_if_string
self.assertEqual(new_version.test_content_field, 'default value') self.assertEqual(new_version.test_settings_field, 'default value')
redirect_url = reverse('dashboard') + '?course_closed=1%2F1%2F15%2C+12%3A00+AM' self.assertRedirects(response, redirect_url)
if not run_diff_quality( violations_type="pylint", prefix=pythonpath_prefix, reports=pylint_reports, percentage_string=percentage_string, branch_string=compare_branch_string, dquality_dir=dquality_dir ): diff_quality_percentage_pass = False
from __future__ import absolute_import
if nplots == 1: axes = axarr[0] else: axes = axarr.reshape(nrows, ncols).squeeze()
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
enable_jquery_animations(page) enable_css_animations(page)
fignum = 1
instructor_task.api.submit_bulk_course_email(request, course_id, email.id)
print('=' * 80) print("Elastic-Net penalty") results.append(benchmark(SGDClassifier(alpha=.0001, n_iter=50, penalty="elasticnet")))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
values = ','.join(values)
rs = read_csv(filename, compression="xz", index_col=0) assert_frame_equal(df, rs)
changed_old[dn] = o changed_new[dn] = n success_dn_set[dn] = True
pass
chapter_css = '.course-navigation .chapter .group-heading' return self.q(css=chapter_css).map(lambda el: el.text.strip()).results
self.assertQuerysetEqual( Order.objects.exclude(Q(items__status=1)), ['<Order: 3>'])
return Series(self._df_model_raw, index=self._result_index)
dt = out_array.dtype if output_pixel_vals: dt = 'uint8' out_array[:, :, i] = np.zeros(out_shape, dtype=dt) + \ channel_defaults[i]
from __future__ import absolute_import
__virtualname__ = 'status'
return [mark_safe(force_text(obj)) for obj in value]
MEDIA_ROOT = ''
return _click_edit(self, '.visibility-button', '.xblock-visibility_view', self._bounded_selector)
self._verify_unit_warning( self.UnitState(is_released=False, publish_state=self.PublishState.UNPUBLISHED_CHANGES, is_locked=False), self.FUTURE_UNPUBLISHED_WARNING )
if absurl.startswith(('http://', 'https://', '//')): return http.HttpResponseRedirect(absurl)
df.ix[timestamp] self.assertTrue(len(df.ix[[timestamp]]) > 0)
if not basedir: basedir = _get_yum_config_value('reposdir')
db = options['database'] connection = connections[db]
AUDIT_LOG.info("Bad password_reset user passed in.") limiter.tick_bad_request_counter(request)
diff = np.zeros(len(out), dtype='bool') for lab in labels[:-1]: diff |= np.r_[True, lab[1:] != lab[:-1]]
vic = City.objects.get(point__left=co_border) self.assertEqual('Victoria', vic.name)
return not isinstance(course_access.course_id, CCXLocator)
X = np.array([[0, 1], [1.01, 1.], [2, 0]])
ret['result'] = None return ret
self.validate_xblock_info_consistency(xblock_info, has_child_info=True, has_ancestor_info=True)
self._assert_cert_status(self.courses[0].id, self.user, CertificateStatuses.notpassing) self._assert_cert_status(self.courses[1].id, self.user, other_status)
result = sql.read_sql_table('test_nan', self.conn) tm.assert_frame_equal(result, df)
Membership.objects.create( membership_country_id=self.usa.id, person_id=self.bob.id, group_id=self.cia.id)
self.assertQuerysetEqual( Annotation.objects.exclude(tag__children__name="t2"), ['<Annotation: a2>'] )
from salt.modules import swift
kwargs.update({'state': comps[0], 'fun': comps[1], '__id__': name, 'name': name})
shutil.rmtree(folder_path)
yield assert_take_ok, mgr, ax, [] yield assert_take_ok, mgr, ax, [0, 0, 0] yield assert_take_ok, mgr, ax, lrange(mgr.shape[ax])
module = CapaFactory.create(rerandomize=rerandomize, done=True)
uptime = datetime.datetime.now() - startup_time
is_hidden = False
s = Series([1, 3, np.nan, np.nan, np.nan, 7, 9, np.nan, np.nan, 12, np.nan])
self.assertRaises(TypeError, lambda: df.iloc[1.0:5])
'mine_interval': int,
del self.bias_from_marginals
return launchctl('load', path, runas=runas)
self.assertIn('donation_for_course', self.client.session) self.assertIn(unicode(self.course.id), self.client.session['donation_for_course'])
non_empties = [obj for obj in objs if sum(obj.shape) > 0 or isinstance(obj, Series)]
self.assertEqual(parallels._validate_snap_name(name, snap_id), snap_id)
return ''.join(difflib.unified_diff(orig_file, new_file))
from salt.exceptions import SaltInvocationError
params["honor_code"] = "tRUe" self.assert_success(params)
class HashableClass(object): pass
first = pd.DataFrame([[datetime(2016, 1, 1)]]) first[0] = first[0].dt.tz_localize('Europe/London')
lambda_desc = __salt__['boto_lambda.describe_function'](lambda_name, **self._common_aws_args)
def __setstate__(self, state): self._is_child = True self.__init__( state['opts'], state['socket_queue'], log_queue=state['log_queue'] )
state_run = self.run_function('state.sls', mods='requisites.listen_simple')
config_course_cohorts(self.course, is_cohorted=True)
module = CapaFactory.create(attempts=attempts - 3) self.assertEqual(module.check_button_name(), "Check")
self.kwargs['version'] = str(kwargs.get('version', 2))
if env is not None and not isinstance(env, dict): ret['comment'] = ('Invalidly-formatted \'env\' parameter. See ' 'documentation.') return ret
import salt.utils
from __future__ import absolute_import import os
f = client.stream.write(payload) self.io_loop.add_future(f, lambda f: True)
__func_alias__ = { 'reload_': 'reload' }
from __future__ import absolute_import
ccx = CcxFactory(course_id=self.course.id, coach=self.coach) ccx_locator = CCXLocator.from_course_locator(self.course.id, unicode(ccx.id))
df = df.T
from salt.utils import is_linux from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
assert len(state) == 2 if isinstance(coeffs, str): coeffs = float(coeffs) assert isinstance(coeffs, float) _, state = state state = [state] coeffs = [coeffs]
for key, val in six.iteritems(self.loader._dict): self.assertEqual(key.split('.', 1)[0], 'test')
#html_last_updated_fmt = '%b %d, %Y'
self.assertEqual([], os.listdir(TMP_JID_DIR))
for format in ["binary", "multiclass", "multilabel-indicator"]: for y in EXAMPLES[format]: unique_labels(y)
X_small = X[:, :4] lw = LedoitWolf() lw.fit(X_small) shrinkage_ = lw.shrinkage_
kf = cval.KFold(17, 3) check_cv_coverage(kf, expected_n_iter=3, n_samples=17)
self._each_parens(r'\left\{x^y\right\}', 'x^y', '{', tall=True)
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.check_problem(get_request_dict)
resp = self.client.get('/course/bad/course/key/entrance_exam') self.assertEqual(resp.status_code, 400)
X = check_array(X, copy=False, ensure_2d=False, warn_on_dtype=True, dtype=FLOAT_DTYPES) original_ndim = X.ndim
path = self._last_visited_module_path(request, course) path_ids = [unicode(module.location) for module in path] return Response({ "last_visited_module_id": path_ids[0], "last_visited_module_path": path_ids, })
notes = self.q(css=self._bounded_selector(".annotator-hl")) return [EdxNoteHighlight(self.browser, note, self.item_id) for note in notes]
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
filesystem = OSFS(root_dir / 'test_export/static') exported_static_files = filesystem.listdir() self.assertTrue(filesystem.exists(asset_displayname)) self.assertEqual(len(exported_static_files), 1)
self.assertIn('pre requisite course', resp.content) self.assertIn('course that has pre requisite', resp.content)
if self.has_spatial_indexes: self.assertSpatialIndexExists('gis_neighborhood', 'path')
self.service.set_credit_requirement_status( self.user.id, unicode(self.course.id), 'grade', 'grade' )
enrollment = self.enroll() enrollment.is_active = False enrollment.save() self.assertIsNone(self.service.get_credit_state(self.user.id, self.course.id))
filtered = data.to_frame()
return []
for entry in toc: if entry['url_name'] == url_name: return entry return None
from __future__ import absolute_import, print_function import subprocess import hashlib import pprint import optparse
is_datetimetz = com.is_datetimetz(values) if is_datetimetz: values = DatetimeIndex(values) vals = values.tz_localize(None)
self.assert_response(safe_cookie_data) self.assert_user_in_session()
assert isinstance(key_or_alias, string_types) try: return super(alias_dict, self).__getitem__(key_or_alias) except KeyError: return super(alias_dict, self).__getitem__( self.__a2k__[key_or_alias])
if not hasattr(self, 'freeze_set'): self.freeze_set = set([])
ccx_course_key = CCXLocator.from_course_locator(course.id, '1') self._add_role_access_to_user(self.user, ccx_course_key)
with six.assertRaisesRegex(self, TypeError, "Variable must be a string or number, got <(class|type) 'dict'>"): Variable({})
return [ credentials_factories.UserCredential( id=1, username='test', credential=credentials_factories.ProgramCredential() ), credentials_factories.UserCredential( id=2, username='test', credential=credentials_factories.ProgramCredential() ) ]
return Panel(self.values, self.items, self.major_axis, self.minor_axis)
update_wrapper(_wrapper, func)
try: wkt = capi.get_ds_projection_ref(self._ptr) if not wkt: return None return SpatialReference(wkt, srs_type='wkt') except SRSException: return None
error = unicode(self) return HttpResponseBadRequest(json.dumps({'error': error}))
_config_filename_ = 'master'
ts = tm.makeTimeSeries()[:20] ts_irregular = ts[[1, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 17, 18]]
s = Series(randn(5), name='A') s2 = Series(randn(5), name='B')
with self.temporary_migration_module(module="migrations.test_migrations_conflict"): with self.assertRaises(CommandError): call_command("makemigrations")
mask = lab == -1 if mask.any(): formatted = np.array(formatted, dtype=object) formatted[mask] = na formatted = formatted.tolist()
int_ts = Series(np.ones(10, dtype=int), index=lrange(10)) self.assertAlmostEqual(np.median(int_ts), int_ts.median())
from __future__ import unicode_literals
import logging
self.assertEqual(1, len(ds))
cmap_light = ListedColormap(['#FFAAAA', '#AAFFAA', '#AAAAFF']) cmap_bold = ListedColormap(['#FF0000', '#00FF00', '#0000FF'])
self.url = reverse('instructor_dashboard', kwargs={'course_id': self.course.id.to_deprecated_string()})
return redirect_with_get('register_user', request.GET)
with self.assertRaises(ValueError): with transaction.atomic(using='default'): marty.edited.add(dive)
helper(html_encoded, ensure_ascii=True, encode_html_chars=True) helper(html_encoded, ensure_ascii=False, encode_html_chars=True)
stdout = json.loads(result['stdout']) return stdout != {}
from __future__ import unicode_literals
self.assertIsNone(cohorts.get_cohort(user, course.id, assign=False))
from __future__ import unicode_literals
return etree.Element('truefalseresponse')
FEATURES['ENABLE_OAUTH2_PROVIDER'] = True
self.assertEqual(record.course_key, self.course_key)
if self.poll_answers is None: self.poll_answers = {}
'simple_history',
return not any(self._value_matches(target, test_val) for test_val in criteria['$nin'])
view = self.bseries.copy(deep=False) view.sp_values[:5] = 5 self.assertTrue((self.bseries.sp_values[:5] == 5).all())
encoded_labels.extend([''] * len(columns))
text = f.widget.format_value(result) self.assertEqual(text, "13:30:00")
for code in sorted_codes: print(code + '. ' + codebook[code])
self.course_hierarchy = self.get_course_hierarchy() self.blocks = self.build_course(self.course_hierarchy) self.course = self.blocks['course']
ring_tuples = tuple(r.tuple for r in poly) self.assertEqual(poly, Polygon(*ring_tuples))
from distutils.core import setup, Command _have_setuptools = False
try: data = data.astype('float64') result = True except: pass
self.assertEquals( preview.latex_preview('2/3*4/5*6'), r'\frac{2}{3}\cdot \frac{4}{5}\cdot 6' )
defaults.write( 'TIMEOUT=60\n' 'TICK=1\n' )
self.student_answers = convert_files_to_filenames(answers) return self._grade_answers(answers)
logentry = LogEntry.objects.get(content_type__model__iexact="article") edited_obj = logentry.get_edited_object() self.assertEqual(logentry.object_id, str(edited_obj.pk))
from __future__ import absolute_import import os
vals['type'] = 'acl' if comps[0] == 'default': vals['type'] = 'default' comps.pop(0)
import salt.utils from salt.exceptions import CommandExecutionError, MinionError
Y = iris.target
with tm.assertRaises(AttributeError): ser.hist(foo='bar')
if not hasattr(self, 'rng'): self.setup_rng()
from __future__ import unicode_literals
continue
context['accomplishment_copy_more_about'] = _("More about {fullname}'s accomplishment").format( fullname=user_fullname )
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self._params = {}
with open(state_file_path, "w") as state_file: state_file.write(expected_version)
return self.best_estimator_.predict_log_proba(X)
self.coach = UserFactory.create() self.mstore = modulestore()
if len(args[0]) != 4: raise GDALException('Incorrect number of tuple elements (%d).' % len(args[0])) else: self._from_sequence(args[0])
return (
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True], credit_type='edc' )
mixed = Series(['a_b', NA, 'asdf_cas_asdf', True, datetime.today(), 'foo', None, 1, 2.])
result = grouped.dtype expected = grouped.agg(lambda x: x.dtype)
self.aes = self._layers
pass
return len(set().union(*self.maps))
self.child_fd = self.stdin
from __future__ import absolute_import, print_function import os import operator import re import subprocess import tempfile import time import logging import uuid
nv.validate_window_func('std', args, kwargs) return _zsqrt(self.var(bias=bias, **kwargs))
try: return ~x.isin(y) except AttributeError: if com.is_list_like(x): try: return ~y.isin(x) except AttributeError: pass return x not in y
if path.startswith(('http://', 'https://', '/')): return path return static(path)
read_only_fields = () explicit_read_only_fields = ("profile_image", "requires_parental_consent")
self.payment_and_verification_flow.next_verification_step(self.immediate_verification_page)
config.groups[0].remove() config.save()
p = mp.Process(target=train_mlp) p.start()
keyfile = os.path.join( opts['cachedir'], '.{0}_key'.format(user.replace('\\', '_')) )
if 'asides' in kwargs: kwargs['asides'] = prepare_asides_to_store(kwargs['asides']) return func(*args, **kwargs)
ret = self.run_state('ssh_known_hosts.absent', **kwargs) self.assertSaltStateChangesEqual( ret, GITHUB_FINGERPRINT, keys=('old', 'fingerprint') )
assert_raises(ValueError, sel.inverse_transform, np.array([[1], [2]]))
try: from pyVmomi import vim HAS_PYVMOMI = True except Exception: HAS_PYVMOMI = False
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
return name.replace(':', '/')
op_instance = node.op op_type = type(op_instance)
options.update({ 'site': get_config_value('site'),
(True, "en", "lms-footer-edx.css"), (True, "ar", "lms-footer-edx-rtl.css"),
__virtualname__ = 'mongo'
AutoAuthPage(self.browser, course_id=self.course_id).visit()
pass
try: import pyrax from salt.utils.openstack.pyrax.authenticate import Authenticate from salt.utils.openstack.pyrax.queues import RackspaceQueues
else: mpub = self.opts['pki_dir'] + '/' + 'master.pub' if os.path.isfile(mpub): self.pubkey = mpub
name = str(name)
return dict( [ ("IS_REQUEST_IN_MICROSITE", microsite.is_request_in_microsite()) ] )
self.verbose = bool(self.verbose)
from salt.modules import mac_pkgutil
log.debug("Cached file: path={0}, md5={1}, etag={2}".format(cached_file_path, cached_md5, file_md5)) if cached_md5 == file_md5: return
from salt.utils.openstack.pyrax import authenticate
return self._open(name, mode)
clf_3 = ForestEstimator(n_estimators=15, max_depth=3, warm_start=True, random_state=1, bootstrap=True, oob_score=False) clf_3.fit(X, y) assert_true(not(hasattr(clf_3, 'oob_score_')))
if not blk._can_consolidate: for mgr_loc in mgr_locs: newblk = blk.copy(deep=True) newblk.mgr_locs = slice(mgr_loc, mgr_loc + 1) blocks.append(newblk)
for attr in self.q(css='a.action-staff-lock>i').attrs('class'): if 'fa-check-square-o' in attr: return True return False
self.assertRaises(ValueError, df.dropna, axis=3)
ir = IsotonicRegression(increasing='auto', out_of_bounds="clip") ir.fit(x, y)
assert not world.is_css_present('.link_lti_new_window', wait_time=0)
if self.progress_callback: self.progress_callback("apply_success", migration, fake) return state
from __future__ import absolute_import import logging from time import time, sleep
response = self.client.get('/auth_processor_attr_access/') self.assertContains(response, "Session accessed")
K = self.kernel_(self.X_train_)
kwargs.pop('name', None) kwargs.pop('state', None)
try: self.assertNotIn(CERT_ALIAS, str(certs_list)) except CommandExecutionError: self.run_function('keychain.uninstall', [CERT_ALIAS])
from __future__ import absolute_import, print_function import errno import logging import os import tempfile import shutil
if settings.FEATURES.get('ENABLE_OAUTH2_PROVIDER'): urlpatterns += ( url( r'^oauth2/login/$', auth_exchange.views.LoginWithAccessTokenView.as_view(), name="login_with_access_token" ), )
import salt.utils import salt.ext.six as six
ret = self.run_run_plus(fun='fileserver.envs', args=['backend="[roots]"']) self.assertIsInstance(ret['fun'], list)
if k in ['catIndex']: continue
new_mgr_locs = np.concatenate([b.mgr_locs.as_array for b in blocks]) new_values = _vstack([b.values for b in blocks], dtype)
import pylearn2.config.yaml_parse
self.mean_ = np.mean(X, axis=0) X -= self.mean_
from __future__ import absolute_import import warnings
laplacian, dd = graph_laplacian(sims, normed=False, return_diag=True) _, diffusion_map = eigh(laplacian) embedding_2 = diffusion_map.T[:n_components] * dd embedding_2 = _deterministic_vector_sign_flip(embedding_2).T
image_id = inspect_image(name)['Id']
atomic_replace(os.path.join(dataset_conf_path,"installed.lst.2"), os.path.join(dataset_conf_path,"installed.lst"))
n_samples = [int(1e3), int(1e4), int(1e5), int(1e6)] n_features = int(1e2) n_queries = 100 n_neighbors = 10
f('int64') f('float64') f('M8[ns]')
print public_key_str print private_key_str
url = 'something' def __str__(self): return self.url
video = self.store.get_item(child_to_move_location) self.assertEqual( old_parent_location, video.get_parent().location.for_branch(None) )
real_cov = np.dot(coloring_matrix.T, coloring_matrix) emp_cov = empirical_covariance(X_train) loglik_real = -log_likelihood(emp_cov, linalg.inv(real_cov))
if attempt.status == 'denied': status = 'must_reverify'
above_cutoff = (abs(s) > cond * np.max(abs(s))) psigma_diag = np.zeros_like(s) psigma_diag[above_cutoff] = 1.0 / s[above_cutoff]
from salt.ext.six import string_types from salt.exceptions import get_error_message as _get_error_message
clf.intercept_scaling = 1 clf.fit(X, y) assert_almost_equal(clf.intercept_, 0, decimal=5)
user = User.objects.get(email=self.enrolled_student.email) self.assertFalse(CourseEnrollment.is_enrolled(user, self.course.id))
with mock.patch.dict('django.conf.settings.FEATURES', {'DISABLE_COURSE_CREATION': True}): self.assert_created_course()
return getattr(model_instance, self.attname)
loc_str = unicode(location) if self._max_scores_cache.get(loc_str) != max_score: self._max_scores_updates[loc_str] = max_score
try: obj = self._convert_scalar_indexer(obj, axis) except TypeError:
CourseModeFactory.create(mode_slug=CourseMode.NO_ID_PROFESSIONAL_MODE, course_id=self.course.id, min_price=100)
lookup_name = 'contained'
if start is not None and start.tz is not None: start = start.replace(tzinfo=None)
param_grid = [param_grid]
has_permission=False, **(extra_context or {})
base_attr = super(BulkAssertionTest, self).__getattribute__(name) if name.startswith('assert'): return self._wrap_assertion(base_attr) else: return base_attr
return _get_backing_memmap(b)
from __future__ import absolute_import import integration
del Trans
json_dict = kwargs.copy() json_dict['type'] = type_name return cls.from_json(json_dict)
if mask is not None: m = ~mask.ravel().astype(bool, copy=False) if not m.all(): rows = rows[m]
self.client.logout() resp = self.client.get(self.url_locked) self.assertEqual(resp.status_code, 403)
return True
return self.rel.through
from salttesting import TestCase, skipIf from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON )
self.add_credit_course()
if valid_size < 1.0: valid_size /= 1.0 - np.true_divide(self.n_test, self.n) self.valid_size = valid_size
requires_unique_target = False
if self.is_(other): return True if not isinstance(other, Index): return False return array_equivalent(_values_from_object(self), _values_from_object(other))
self._redirect_if_needed_to_pay_for_course() self._redirect_if_needed_to_register() self._redirect_if_needed_for_prereqs() self._redirect_if_needed_for_course_survey()
from __future__ import absolute_import import logging import inspect
self.timeout_map = {}
for item in items: if item not in clean_frames: raise ValueError('column %r not found in data' % item)
'shoppingcart.context_processor.user_has_cart_context_processor',
self.mock_programs_api() self.mock_credentials_api(self.user, reset_url=False)
__func_alias__ = { 'zip_': 'zip' }
import salt.ext.six.moves.http_client
('security', '/%2Fexample.com/security/', ['/example.com'], {}),
pass
block_structure = BlockStructureModulestoreData(root_block_usage_key=0)
if hasattr(content, 'temporary_file_path'): file_move_safe(content.temporary_file_path(), full_path)
def setUp(self): super(TestCourseActionStateManagerBase, self).setUp() self.course_key = CourseLocator("test_org", "test_course_num", "test_run")
self.assertEqual(lower('\xcb'), '\xeb')
from salt.modules import zypper
lrange = builtins.range lzip = builtins.zip lmap = builtins.map lfilter = builtins.filter
return self.readonly_fields
response = self._response().render() self.assertEqual(response.content, b'foo')
import salt.utils.memcached
_maybe_remove(store, 'wp') store.put('wp', wp, format='table') date = wp.major_axis[len(wp.major_axis) // 2]
with tm.assertRaisesRegexp(ValueError, 'fill value must be in categories'): idx.fillna(2.0)
nchanges = 1 hstrs.append((u'{0} {1}{2[ENDC]}' .format(hcolor, data, colors)))
if seconds < 0: continue
df = DataFrame(index=lrange(10)) result = df.count(1) expected = Series(0, index=df.index) tm.assert_series_equal(result, expected)
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) for Cls in [GradientBoostingRegressor, GradientBoostingClassifier]: est = Cls(n_estimators=200, max_depth=1) est.fit(X, y)
table_type = u('legacy_panel') obj_type = Panel
if pkg_type == 'repository': pkgstr = '{0}={1}'.format(pkgname, version_num) else: pkgstr = pkgpath
self.lc_block.max_count = 1 self._create_capa_problems() self.lc_block.refresh_children() self.assertTrue(self.lc_block.validate())
def __iter__(self): return iter(dict.items(self))
'ENABLE_PREREQUISITE_COURSES': False,
if m.any(): if isinstance(new, np.ndarray): n = np.squeeze(new[i % new.shape[0]]) else: n = np.array(new)
assert_equal(distances.shape, (n_queries,)) assert_equal(distances.dtype, object) assert_equal(neighbors.shape, (n_queries,)) assert_equal(neighbors.dtype, object)
msg = name + ' is non deterministic on 32bit Python' raise SkipTest(msg)
comps = [i.strip() for i in line.split('=', 1)]
cond = Series([True, False, False, True, False], index=s.index) s2 = -(s.abs())
cleansed = value
no_ids = [] self.reload_course() for textbook in self.course.pdf_textbooks: del textbook["id"] no_ids.append(textbook) self.assertEqual(no_ids, textbooks)
MIGRATION_MODULES = {}
if (isinstance(role, (CourseStaffRole, CourseBetaTesterRole)) and CourseInstructorRole(role.course_key).has_user(user)): return True return False
self.process.kill()
self.skipTest('We\'ve hit the max open files setting')
comp_ids, obs_ids = _compress_group_index(out, sort=sort)
ax.view_init(40, -10)
@python_2_unicode_compatible class Repository(models.Model): name = models.CharField(max_length=25)
get_storage_keys = show_storage_keys
return _save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=task_definition.Principal.UserID, password=None, logon_type=task_definition.Principal.LogonType)
new_vals = mi1.set_levels(levels2).values assert_almost_equal(vals2, new_vals) assert_almost_equal(mi1._tuples, vals) assert_almost_equal(mi1.values, vals)
target = target / 100000.0
n_components, labels = connected_components(connectivity)
reg = RidgeClassifier(class_weight={1: 0.001}) reg.fit(X, y)
self.q(css="input.timed_exam").first.click()
with self.settings(DEBUG=True): self.verify_unsafe_response(non_sensitive_view, check_for_vars=False) with self.settings(DEBUG=False): self.verify_unsafe_response(non_sensitive_view, check_for_vars=False)
orig_settings_dict = self.connection.settings_dict new_settings_dict = orig_settings_dict.copy() new_settings_dict['NAME'] = '{}_{}'.format(orig_settings_dict['NAME'], number) return new_settings_dict
return isnull(self).__finalize__(self)
pieces["closest-tag"] = None count_out = run_command(GITS, ["rev-list", "HEAD", "--count"], cwd=root)
self.assertEqual(0, CourseMode.min_course_price_for_currency(self.course_key, 'usd'))
predictions = [pred_block_i for pred_block_i, _ in prediction_blocks] test_indices = np.concatenate([indices_i for _, indices_i in prediction_blocks])
idx = RangeIndex(0, 1000, 2) result = idx ** 2 expected = idx._int64index ** 2 tm.assert_index_equal(Index(result.values), expected, exact=True)
else:
with self.assertRaises(ImproperlyConfigured): with self.settings(INSTALLED_APPS=['apps.apps.BadConfig']): pass
'statici18n',
check_password('letmein', encoded) self.assertEqual(hasher.harden_runtime.call_count, 0)
migration_name_0001 = "my_initial_migration" content = cmd("0001", migration_name_0001) self.assertIn("dependencies=[\n]", content)
del params["honor_code"] params["username"] = "another_test_username" params["email"] = "another_test_email@example.com" self.assert_success(params)
if is_platform_windows(): if '16' in encoding or '32' in encoding: continue raise
user.backend = backend_path return user
sh("i18n_tool transifex push")
return self.render_to_response(self.get_context_data())
assert_allclose(np.sort(g.weights_), np.sort(rand_data.weights), rtol=0.1, atol=1e-2)
return self.func_to_count(param)
self.wait_for_field(field_id) query = self.q(css='.u-field-link-title-{}'.format(field_id)) return query.text[0] if query.present else None
from __future__ import print_function from __future__ import absolute_import import copy import logging
with remove_ccx(course_id) as (course_id, restore): return restore(self._modulestore.has_course( course_id, ignore_case=ignore_case, **kwargs ))
import json import logging
if empty_needed == 0: if self.negated: return '', [] else: raise EmptyResultSet if full_needed == 0: if self.negated: raise EmptyResultSet else: return '', []
return Series(self._beta_raw, index=self._x.columns)
client = APIClient() client.login(username=user.username, password=self.TEST_PASSWORD) return client
if name in self._selected_obj: obj = copy.copy(obj) obj._reset_cache() obj._selection = name results[name] = obj.aggregate(func)
from __future__ import unicode_literals
return unicode(course_id) in cls._get_restricted_courses_from_cache()
log.warning( "Could not retrieve information from VAL for Bumper edx Video ID: %s.", video.bumper['edx_video_id'] ) return []
addr = str(address).split('/') if len(addr) > 2: raise AddressValueError("Only one '/' permitted in %r" % address) return addr
topmost_call = False if seen_models is None: seen_models = set() topmost_call = True seen_models.add(self.model)
self.courseware_page.click_previous_button_on_top() self.assert_navigation_state('Test Section 1', 'Test Subsection 1,2', 0, next_enabled=True, prev_enabled=True)
nan_weights = [np.nan] * 10 with tm.assertRaises(ValueError): o.sample(n=3, weights=nan_weights)
warnings.simplefilter("ignore") _skip_if_no_openpyxl() import openpyxl
dtype = self.df[col].dtype if dtype != object: value = None if value == '' else dtype.type(value)
update_email_opt_in(user, org, is_opted_in)
sdf = SparseDataFrame(index=[0, 1, 2], columns=['a', 'b', 'c'])
linklocal_network = IPv6Network('fe80::/10') return self in linklocal_network
return self.statistics()[0]
from __future__ import absolute_import
config, _ = self.create_group_configuration_experiment([Group("0", "Group A"), Group("1", "Group B")], True)
instance = kwargs['instance'] instance.orig_state = instance.state
plt.fill_between(alphas, scores + std_error, scores - std_error, alpha=0.2)
raise
user1_new_email = "valid_user1_email@example.com" user2_new_email = "valid_user2_email@example.com"
from __future__ import absolute_import from distutils.version import LooseVersion import logging
if isinstance(arr_or_obj, pd.DateOffset): return True elif is_list_like(arr_or_obj): return all(isinstance(x, pd.DateOffset) for x in arr_or_obj) else: return False
Field.__init__(self, required, widget, label, initial, help_text, *args, **kwargs) self.queryset = queryset
open(libcuda_convnet_so).close()
p = Parent.objects.get(name="Parent") c = Child(parent=p) self.assertIs(c.parent, p)
backend = connection.ops
self.certificate_page = CertificatePage(self.browser, self.user_id, self.course_id)
import ddt from mock import call, patch from nose.plugins.attrib import attr import before_after
n_targets = 2 X, y = X_diabetes, y_diabetes y_n = np.tile(y, (n_targets, 1)).T
pass
return list(os.walk('/sys/fs/bcache/'))[0][1][0]
if sp.isspmatrix_csr(X): return bincount(X.indices, minlength=X.shape[1]) else: return np.diff(sp.csc_matrix(X, copy=False).indptr)
digits = datasets.load_digits()
idx = mapping if isinstance(flat, CompositeSpace): assert 0 <= idx < len(flat.components) return flat.components[idx] else: assert idx == 0 return flat
self.assertEqual(len(list(Article.objects.all())), 3)
import logging import os
if published.visible_to_staff_only: return False
data, vm_ = request_instance(vm_)
y_test = check_array(y_test, dtype=np.float64, ensure_2d=False)
self.assertNotIn(malicious_code, resp.content)
assert_equal(sample_without_replacement(0, 0).shape, (0, ))
from __future__ import absolute_import import os import string import random
if must_answer_survey(self.course, self.effective_user): raise Redirect(reverse('course_survey', args=[unicode(self.course.id)]))
signal.signal(signal.SIGINT, self._handle_signals)
self.order_by = [] self.extra_order_by = () if force_empty: self.default_ordering = False
result = f.clean('21.12.2010 13:30') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
res = self.client.get('/dates/books/%s/' % urlbit) self.assertEqual(res.status_code, 404)
return import_string(settings.MESSAGE_STORAGE)(request)
if profile_country is not None: self.user.profile.country = profile_country self.user.profile.save()
try: content = contentstore().find(asset_key) except NotFoundError: raise AssetNotFoundException
self.locs = locs
self.assertRaises(KeyError, lambda: ser.loc[[3, 3, 3]])
if "enrollment_action" in request.POST: del request.POST["enrollment_action"] if "course_id" in request.POST: del request.POST["course_id"]
with self.assertNumQueries(0): self.assertEquals('a_value', self.kvs.get(user_state_key('a_field')))
import salt.ext.six as six
self.download_results = None
def __iter__(self): queryset = self.queryset compiler = queryset.query.get_compiler(queryset.db) for row in compiler.results_iter(): yield row[0]
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
if existing['code'] == 200:
return [Attribute('width'), Attribute('height'), Attribute('target_shape') ]
#self.assertIn("3 matching components", library_block.author_content)
break
user_perms = get_user_permissions(request.user, course_key) if not user_perms & STUDIO_VIEW_USERS: raise PermissionDenied()
self.assert_enrollment_status(as_server=True)
def __or__(self, other): "Returns the union of this Geometry and the other." return self.union(other)
(savefig_dir, source_dir, rgxin, rgxout, promptin, promptout, mplbackend, exec_lines, hold_count) = self.get_config_options()
if answers:
if not (self_is_mi and other_is_mi):
pass
print colorize('green', "Generating optimized static assets...") sh("paver update_assets --settings=test_static_optimized")
y = np.array([5, 6.1, 6, 7, 10, 9, 10]) x = np.arange(len(y))
self.assertEqual( self.process_response()["x-xss-protection"], "1; mode=block")
self.assertQuerysetEqual( Order.objects.filter(items__in=OrderItem.objects.values_list('status')), [o1.pk], lambda x: x.pk)
sparse_classifier = AdaBoostClassifier( base_estimator=CustomSVC(probability=True), random_state=1, algorithm="SAMME" ).fit(X_train_sparse, y_train)
subject = ''.join(subject.splitlines()) from_address = theming_helpers.get_value( 'email_from_address', settings.DEFAULT_FROM_EMAIL )
session_store_class = self.model.get_session_store_class() return session_store_class().encode(session_dict)
result = self.client.login(username=self.USERNAME, password=self.OLD_PASSWORD) self.assertTrue(result)
conf[opt] = [x.strip() for x in cp.get('main', opt).split(',')]
known_user = 'knownuser' known_user2 = 'knownuser2'
#pylint: disable=E0602
'ENABLE_DISABLING_XBLOCK_TYPES': True,
field_data_cache = FieldDataCache([], course.id, user)
diff_quality_percentage_pass = True
from salt.modules import smf
store.save_asset_metadata_list(md_list, ModuleStoreEnum.UserID.test)
self.assertEqual(len(response.redirect_chain), 1) self.assertIn(302, response.redirect_chain[0]) self.assertEqual(len(outbox), outbox_count)
SYNDIC_CONNECT_TIMEOUT = 5 SYNDIC_EVENT_TIMEOUT = 5
return "BEGIN;"
return service_id
oldcmap = self.correct_map
modulestore = XMLModuleStore( DATA_DIR, source_dirs=['toy'], xblock_mixins=(XModuleMixin,), load_error_modules=False)
else: other = self._constructor(other, **self._construct_axes_dict())
return any(op in s for op in ops)
if redirect: self.assertRedirects(response, reverse('dashboard')) else: self.assertEquals(response.status_code, 200)
problem = new_loncapa_problem(xml_str, capa_system=the_system) rendered_html = etree.XML(problem.get_html())
cmdline = salt.utils.shlex_split(_text[len(trigger):]) cmd = cmdline[0] args = [] kwargs = {}
except ValueError as detail: raise except Exception as detail: result = handle_error()
if start_date is None: start_date = datetime.datetime(1970, 1, 1)
U *= S[:self.n_components_]
FEATURES['EMBARGO'] = True
output = self.engine.render_to_string('inheritance15') self.assertEqual(output, '12inner3_')
('completed', 'completed'),
if what == "class" and name.endswith(".Categorical"): cfg['class_members_list'] = False
try: import psycopg2 HAS_POSTGRES = True except ImportError: HAS_POSTGRES = False
self.assertFalse(res_json['success'])
self._paths = [prepare_path_for_serialization(path) for path in value] if value else value
return self.cmap
if not show_explanation or not self.done: continue
values = np.ones(self.bseries.npoints) sp = SparseSeries(values, sparse_index=self.bseries.sp_index) sp.sp_values[:5] = 97 self.assertEqual(values[0], 97)
proba = sum(_samme_proba(estimator, n_classes, X) for estimator in self.estimators_)
if self.base > 0: labels += type(self.freq)(self.base)
self.grid_scores_ = scores[::-1] / cv.get_n_splits(X, y) return self
self.run_function('virtualenv.create', [self.venv_dir])
cls.apply_policy(metadata, runtime.get_policy(usage_id))
n = store.remove('wp', []) self.assertTrue(n == 120)
user_passes_test(lambda u: True), login_required, permission_required('change_world'),
store = modulestore() course_usage_key = store.make_course_usage_key(course_key) return BlockStructureManager(course_usage_key, store, _get_cache())
key = list(key)
reclass_opts = __opts__['master_tops']['reclass']
if last_expression is not None: results.violations.append(ExpressionRuleViolation( rule, last_expression ))
if available(service): services.append(service)
latex_interpreter = ParseAugmenter(math_expr, case_sensitive) latex_interpreter.parse_algebra()
return self._grade_answers(None)
config = {} for key, value in settings.MICROSITE_CONFIGURATION.iteritems(): config[key] = value return config
self.get_selector('#generate-exception-certificates').click()
result = df.copy() result[('red', extra)] = 'world' result = result.sort_index(axis=1) assert_frame_equal(result, expected)
_make_archive_copy(instance)
if N == 0: return
df_reordered = df_original.sort_values(by='Quantity')
self.samples = np.sin(np.linspace(0, 1, 200)) self.actual_kurt = -1.2058303433799713
self.assertEqual(sorted_deps[:3], [A, B, C]) self.assertEqual(sorted_deps[3:], [AtoB, BtoC, CtoA])
new_bob_profile.user = bob charlie.userprofile = bob_profile self.assertEqual(new_bob_profile._state.db, 'other') self.assertEqual(charlie._state.db, 'other')
'django_comment_common',
from __future__ import unicode_literals
redirect_url = answers['_redirect_url'] if '_redirect_url' in answers else reverse('dashboard')
from __future__ import absolute_import, print_function import logging
import logging
self.base_url = base_url self.anchor = anchor self.section = section
tapi, ntaps = 0, 0
blocks_stack.extend(children)
assert abs(exact_logz - logz) < 0.01*exact_logz
act_enc = activation_funcs[i + 1] act_dec = act_enc if i != 0 else activation_funcs[0] aes.append( Autoencoder(layer_sizes[i], layer_sizes[i + 1], act_enc, act_dec, tied_weights=tied) )
path = ''
self.assertIn( {'type': 'html_textbooks'}, list(xmodule_tabs.CourseTabList.iterate_displayable(self.course, inline_collections=False)), )
if isinstance(path_or_buf, compat.string_types):
return cursor
return None
def get_queryset(self, request): return super(PaperAdmin, self).get_queryset(request).only('title')
try: original_published = super(DraftModuleStore, self).get_item(item_location) except ItemNotFoundError: original_published = None
CreditProvider.objects.create( provider_id=self.PROVIDER_ID, display_name=self.PROVIDER_NAME, provider_status_url=self.PROVIDER_STATUS_URL, enable_integration=True, )
return reverse_course_url('certificates.certificates_list_handler', self.course.id)
response = explicit_default_view(request, '3') self.assertEqual(response.content, b'Hello World 1')
msg = "does not match the number of clusters" assert_raises_regex(ValueError, msg, MiniBatchKMeans(init=test_init, random_state=42).fit, X_csr)
role = CourseCcxCoachRole(course_key) self.assertTrue(role.has_user(self.coach))
upload_csv_to_report_store(csv_rows, 'course_survey_results', course_id, start_date)
return module.seed
for ax in axes[-1].ravel(): self._check_visible(ax.get_xticklabels(), visible=True)
deletable_objects, model_count, perms_needed, protected = get_deleted_objects( queryset, opts, request.user, modeladmin.admin_site, using)
datacenter_ref = salt.utils.vmware.get_mor_by_property(_get_si(), vim.Datacenter, datacenter_name) if datacenter_ref: return {datacenter_name: 'datacenter already exists'}
SYSTEM_SHARED_MEM_FS = '/dev/shm'
queryset = Person.custom_queryset_custom_manager.filter() self.assertQuerysetEqual(queryset, ["Bugs Bunny"], six.text_type) self.assertEqual(queryset._filter_CustomManager, True)
class Person(Form): name = CharField() is_cool = NullBooleanField()
for i, j in [(0, 1), (0, 2), (1, 2)]: nulls = [null_values[i], null_values[j]]
if not items.is_unique: result = self._interleave() if self.ndim == 2: result = result.T return result[loc]
s = string_at(result) free(result) return s
if action_form.is_valid(): action = action_form.cleaned_data['action'] select_across = action_form.cleaned_data['select_across'] func = self.get_actions(request)[action][0]
self.template = None super(Context, self).__init__(dict_)
to_rep_re = regex and com.is_re_compilable(to_replace)
check_cohorted(False)
self.assertTrue(self.video.is_error_message_shown)
return [line[fromm:to].strip(self.delimiter) for (fromm, to) in self.colspecs]
with self.assertRaisesRegexp(CommandError, unicode(GitExportError.URL_BAD)): call_command('git_export', 'foo/bar/baz', 'silly', stderr=StringIO.StringIO())
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
if state is not None: state = json.loads(state)
m2 = _zero_out_fperr(m2) m3 = _zero_out_fperr(m3)
xWlist = [W.lmul(x,T).flatten(2) for W in self._Wlist] rval = tensor.join(1, *xWlist)
if self.field.show_hidden_initial: return self.as_widget() + self.as_hidden(only_initial=True) return self.as_widget()
a = Article.objects.get(pk=self.a.id) b = Article.objects.get(pk=self.a.id) self.assertEqual(a, b)
return self.q( css='#paging-header-select option' ).filter( lambda e: e.is_selected() ).results[0].text.strip()
exc_info_on_loglevel=logging.DEBUG
if self._assertion_errors: raise BulkAssertionError(self._assertion_errors)
import salt.utils import salt.utils.dictupdate from salt.defaults import DEFAULT_TARGET_DELIM from salt.exceptions import SaltException
component = self.draft_store.get_item(location) self.assertEqual(component.published_on, published_date) self.assertEqual(component.published_by, published_by)
if name is None: return REQUEST_CACHE else: return REQUEST_CACHE.data.setdefault(name, {})
return self.enabled and self.enable_student_dashboard
class EmptyPersonForm(forms.ModelForm): class Meta: model = Person fields = () form = EmptyPersonForm() self.assertEqual(len(form.fields), 0)
ttype = 'zeromq'
updated_overview = CourseOverview.get_from_id(course.id) self.assertEqual(updated_overview.version, 10)
pass
mock_refund_seat.reset_mock() self.send_signal(skip_refund=True) self.assertFalse(mock_refund_seat.called)
(['honor', 'verified', 'audit'], 'honor'),
def __init__(self, variable): self.variable = variable def render(self, context): context[self.variable] = timezone.get_current_timezone_name() return ''
idx.shift(1, freq='H')
tm._skip_if_no_localpath()
module.data = rewrite_nonportable_content_links( source_course_id, dest_course_id, module.data )
if is_request_from_mobile_app(request): return HttpResponse(status=401)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
dataset = datasets.load_iris()
for idx in range(num): (user, _, _) = _do_create_account(make_random_form()) if course_key is not None: CourseEnrollment.enroll(user, course_key)
npm_output = result['stdout'] or result['stderr'] try: return json.loads(npm_output) except ValueError: pass
return self.default_answer_map
est.sparsify() assert_true(sparse.issparse(est.coef_)) pred = est.predict(X) assert_array_equal(pred, pred_orig)
assert_almost_equal(clf.alpha_, min(clf.alphas_)) assert_equal(clf.l1_ratio_, min(clf.l1_ratio))
wait = None
future = async.async_method()
bnorm = beta1 n_params = len(bs)
s2 = Series([1, 2, 3], index=['a', 'b', 'c'])
self.setup_logfile_logger() verify_log(self.config)
LOGGER.info( u"Retrieving data for courses: {courses}".format( courses=", ".join([unicode(course) for course in courses]) ) )
from __future__ import absolute_import
mean = layer.mf_update( state_below=T.alloc(0., 1, 1), state_above=None, layer_above=None)
CourseEnrollmentFactory.create(user=self.user, course_id=self.course.id, is_active=True)
del frame
bower.__salt__ = {} bower.__opts__ = {'test': False}
tables.parameters.MAX_NUMEXPR_THREADS = 1 tables.parameters.MAX_BLOSC_THREADS = 1 tables.parameters.MAX_THREADS = 1
smaller = self.intframe.reindex(columns=['A', 'B', 'E']) self.assertEqual(smaller['E'].dtype, np.float64)
from __future__ import absolute_import import os import textwrap
if expected_n_iter is not None: assert_equal(len(cv), expected_n_iter) else: expected_n_iter = len(cv)
def allow_migrate(self, db, app_label, model_name=None, **hints): return db == ('other' if model_name.startswith('other') else 'default')
import salt.utils import salt.output from salt.utils.locales import sdecode
p = self.PersonModel.objects.create(name='Joe', mugshot=self.file1) self.check_dimensions(p, 4, 8)
from salt.modules import guestfs
user.is_staff = True
partitioned_fields = self.partition_fields_by_scope(block_type, fields)
parent = models.OneToOneField(Place, models.CASCADE, primary_key=True, parent_link=True) main_site = models.ForeignKey(Place, models.CASCADE, related_name='lot')
y_hat = sum(all_y_hat) / len(self.estimators_)
ci = self.create_index(categories=list('abc'))
dive = Book() dive.title = "Dive into Python" dive.published = datetime.date(2009, 5, 4) dive.save()
self.format_caller_node = node.func.value
n = n.astype(dtype)
@wraps(LiveMonitorMsg.get_response) def get_response(self): return ChannelListResponse()
self.conn.get_rest_apis.return_value = no_apis_ret self.conn.create_rest_api.side_effect = ClientError(error_content, 'create_rest_api')
def run_collectstatic(self): super(TestCollectionDryRun, self).run_collectstatic(dry_run=True)
s2 = s.copy() cop = s.copy() cop[omask] = 5 s2[mask] = 5 assert_series_equal(cop, s2)
config.save()
scaler = StandardScaler(with_mean=True).fit(X) assert_raises(ValueError, scaler.transform, X_csr) assert_raises(ValueError, scaler.transform, X_csc)
self.get_selector('#certificate-exception').fill(student)
DEPRECATION_VSCOMPAT_EVENT = 'deprecation.vscompat'
V = rng.rand(n_features, n_features) VI = np.dot(V, V.T)
self.cert = GeneratedCertificate.eligible_certificates.create( user=self.student, course_id=self.CERT_COURSE_KEY, grade=self.CERT_GRADE, status=self.CERT_STATUS, mode=self.CERT_MODE, download_url=self.CERT_DOWNLOAD_URL, )
module.reset_problem({})
response = self.client.get('/syndication/latest/') feed = minidom.parseString(response.content).firstChild updated = feed.getElementsByTagName('updated')[0].firstChild.wholeText
result = sparse[sparse % 2 == 1] exp = orig[orig % 2 == 1].to_sparse(fill_value=0) tm.assert_sp_series_equal(result, exp)
XQUEUE_STUB_URL = os.environ.get('xqueue_url', 'http://localhost:8040')
set_runtime_service('instructor', InstructorService())
if self.store_precision: precision = self.precision_ else: precision = pinvh(self.covariance_) return precision
ret = self.run_run_plus(fun='fileserver.dir_list', args=['backend="[roots]"']) self.assertIsInstance(ret['fun'], list)
self.q(css='.page-content-secondary .members-info .team-member').first.click()
from __future__ import absolute_import, print_function import re import sys import platform
tstart = datetime.now() clf = DecisionTreeRegressor() clf.fit(X, Y).predict(X) delta = (datetime.now() - tstart)
self._login_as_non_staff_user()
self.assertEqual(len(w), 3)
tenant = MockTenants() if self.flag == 1: tenant.id = None return tenant tenant.id = tenant_id return tenant
cause_copy = sharedX(np.zeros((num_samples,))).dimshuffle(0,'x') v_state = v_state[0,:] + cause_copy y_state = y_state[0,:] + cause_copy
class UserRegistration(Form): username = CharField(max_length=10, widget=TextInput(attrs={'maxlength': 20})) password = CharField(max_length=10, widget=PasswordInput)
resp = self.client.patch(self.detail_url, data, format='json', HTTP_AUTHORIZATION=self.auth) self.expect_error_fields(expected_errors, resp)
self.client.login(username=self.audit_course_instructor.username, password='test')
try: os.unlink(cache_path) except OSError: pass return file_hash(load, fnd)
left_mask = np.tril(np.ones((tri_size, tri_size), dtype=int))[:, 1:] right_mask = left_mask[::-1, ::-1]
return "explicit_no_context - Expected result: %s" % arg
import calendar self.assertEqual(calendar.timegm(base_dt.timetuple()) * 1000000000, base_expected)
admin_email_handler.include_html = False try: self.client.get('/', HTTP_HOST='evil.com') finally: admin_email_handler.include_html = old_include_html
def custom_score(y_true, y_pred): return (((y_true == y_pred).sum() - (y_true != y_pred).sum()) / y_true.shape[0])
import integration import salt.utils
X = X_2d n = X.shape[0]
PARTNER_SUPPORT_EMAIL = ENV_TOKENS.get('PARTNER_SUPPORT_EMAIL', PARTNER_SUPPORT_EMAIL)
to_concat = [convert_sparse(x, axis) for x in to_concat] result = np.concatenate(to_concat, axis=axis)
import salt.utils import salt.utils.vt
from __future__ import absolute_import
from salt.states import archive as archive
kwargs['by_item'] = False return self.apply('convert', **kwargs)
add_form_template = None change_form_template = None change_list_template = None delete_confirmation_template = None delete_selected_confirmation_template = None object_history_template = None
from __future__ import absolute_import
MULTILABELS_METRICS = [ "accuracy_score", "unnormalized_accuracy_score", "hamming_loss", "jaccard_similarity_score", "unnormalized_jaccard_similarity_score", "zero_one_loss", "unnormalized_zero_one_loss",
from salt.ext.six import string_types import salt.utils.odict as odict
for db_name in reversed(cls._databases_names()): transaction.set_rollback(True, using=db_name) atomics[db_name].__exit__(None, None, None)
HTTPServer.shutdown(self)
class1_1 = [pr[0, 0] for pr in probas] class2_1 = [pr[0, 1] for pr in probas]
_OSFS_INSTANCE = {}
course = course or self.course self.register_get_threads_response(threads, page, num_pages) ret = get_thread_list(self.request, course.id, page, page_size, topic_id_list) return ret
print "{:>26}".format("course ID"), print ' '.join(["{:>16}".format(heading) for heading in status_headings])
another = models.IntegerField(primary_key=True)
for item in self.orderitem_set.all(): if item.is_discounted: item.unit_cost = item.list_price item.save()
ax_arrays, bvalues, bitems = state[:3]
opts['open_mode'] = opts['open_mode'] is True
if (data_columns and len(b_items) == 1 and b_items[0] in data_columns): klass = DataIndexableCol name = b_items[0] self.data_columns.append(name)
component = self.store.publish(xblock.location, self.user_id) self.assertFalse(self.store.has_changes(component))
auto_created = False
self.assertContains(response, "\n1 person\n") self.assertContains(response, "Guido")
raise AbstractMethodError(self)
def test_user_role(): return 'staff'
msg = "Input has different freq=A-DEC from Period" with tm.assertRaisesRegexp(period.IncompatibleFrequency, msg): base <= s2
salt '*' vsphere.get_firewall_status my.esxi.host root bad-password
SpatialRefSys = connection.ops.spatial_ref_sys()
kwargs['program'] = self.script
self.assertIn('request_uuid', parameters) self.assertEqual(len(parameters['request_uuid']), 32)
students = self._create_students(10)
self.results = batch()
self._create_and_purchase_verified(student, course.id)
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, show_reset_button=False, done=False) self.assertFalse(module.should_show_reset_button())
for _ in range(2): get_user_credentials(staff_user)
return base64.urlsafe_b64encode(s).rstrip(b'\n=')
return fn(*args, **kwargs)
import salt.config import salt.wheel import salt.auth
continue
POLL_ALL_LOCATIONS = True
cmd = 'Install-Module -name "{0}" -Force'.format(name) no_ret = _pshell(cmd) return name in list_modules()
world.wait_for_visible('.mce-window')
with remove_ccx(location) as (location, restore): return restore( self._modulestore.revert_to_published(location, user_id) )
n_samples, n_features = 5, 4 y = rng.randn(n_samples) X = rng.randn(n_samples, n_features)
request = build_launch_request() del request.POST[missing_param] return views.lti_launch(request, None, None)
n_components = 10
chapter_to_delete = course.get_children()[0] self.delete_item(store, chapter_to_delete.location)
import logging
assert_series_equal(actual, expected)
self.user = random.getrandbits(32) self.new_course = modulestore().create_course( 'org', 'course', 'test_run', self.user, BRANCH_NAME_DRAFT, )
message_type = param_dict['message']
NOVACLIENT_MINVER = '2.6.1'
from __future__ import absolute_import import os import random import string
face_image_url = models.URLField(blank=True, max_length=255) photo_id_image_url = models.URLField(blank=True, max_length=255)
if serialize: self.connection._test_serialized_contents = self.serialize_db_to_string()
if not name: return '' return name.replace('_', ' ').capitalize()
return {'name': name, 'changes': {}, 'result': True, 'comment': ''}
from __future__ import absolute_import
'correct': correct,
X = (X - self.X_mean) / self.X_std
if __opts__['test']: ret['result'] = None ret['comment'] = 'Service {0} set to be enabled'.format(name) return ret
grains.update(_virtual(grains)) grains.update(_ps(grains))
X_pred_transformed = kpca.transform(X_pred) assert_equal(X_pred_transformed.shape[1], X_fit_transformed.shape[1])
email = student[EMAIL_INDEX] username = student[USERNAME_INDEX] name = student[NAME_INDEX] country = student[COUNTRY_INDEX][:2]
from __future__ import absolute_import from datetime import datetime
return "Maxout"
return self.q(css=self.xblock_component_selector).attrs('data-block-type')[index]
kernel = C(1.0, (1e-3, 1e3)) * RBF(10, (1e-2, 1e2)) gp = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)
instance = self.run_cloud('-p gce-test-extra {0}'.format(self.INSTANCE_NAME)) ret_str = '{0}:'.format(self.INSTANCE_NAME)
get_option = CallableDynamicDoc(_get_option, _get_option_tmpl) set_option = CallableDynamicDoc(_set_option, _set_option_tmpl) reset_option = CallableDynamicDoc(_reset_option, _reset_option_tmpl) describe_option = CallableDynamicDoc(_describe_option, _describe_option_tmpl) options = DictWrapper(_global_config)
self.assertTrue(module_has_submodule(test_module, 'bad_module')) with self.assertRaises(ImportError): import_module('utils_tests.test_module.bad_module')
where = _ensure_term(where, scope_level=1) s = self._create_storer(group) s.infer_axes()
backend_name = forms.ChoiceField(choices=((name, name) for name in _PSA_OAUTH2_BACKENDS))
)
from __future__ import absolute_import import logging import socket
auth = self._create_authorization_header(token) return self.csrf_client.post(target_url, HTTP_AUTHORIZATION=auth)
super(LibraryNavigationTest, self).setUp() self.lib_page = LibraryEditPage(self.browser, self.library_key) self.lib_page.visit() self.lib_page.wait_until_ready()
r2_scorer = make_scorer(r2_score) mean_squared_error_scorer = make_scorer(mean_squared_error, greater_is_better=False) mean_absolute_error_scorer = make_scorer(mean_absolute_error, greater_is_better=False) median_absolute_error_scorer = make_scorer(median_absolute_error, greater_is_better=False)
self.q(css=self._bounded_selector(".annotator-item textarea")).first.fill(value)
yield (check_non_transformer_estimators_n_iter, name, estimator, 'Multi' in name)
import integration
self.assertEqual(get_callable(empty_view), empty_view)
if this_package in installed_packages_list:
core_samples = np.asarray(n_neighbors >= min_samples, dtype=np.uint8) dbscan_inner(core_samples, neighborhoods, labels) return np.where(core_samples)[0], labels
return self.selenium.execute_script( 'return django.jQuery("%s").css("%s")' % (selector, attribute))
if use_svd: v = svd(Xi, full_matrices=True)[0] else: Ci = np.dot(Xi, Xi.T) v = eigh(Ci)[1][:, ::-1]
diff = res_deep - sys.getsizeof(o) self.assertTrue(abs(diff) < 100)
X = np.array([[0, 1], [1.01, 1.], [2, 0]])
response = self.client.get(self.url) self.assertFalse(self.email_modal_link in response.content)
name = com._maybe_match_name(self, delta)
if method in self.URL_HANDLERS: handlers_list = self.URL_HANDLERS[method] else: self.log_error("Unrecognized method '{method}'".format(method=method)) return
request_info = xmodule_instance_args.get('request_info', {}) if xmodule_instance_args is not None else {} task_info = {'student': student.username, 'task_id': _get_task_id_from_xmodule_args(xmodule_instance_args)}
p = Panel(randn(4, 4, 4))
update_entrance_exam(request, self.course.id, {})
pass
if self.skipDownloaded and update.IsDownloaded: log.debug(u'Skipped update {0} - already downloaded'.format(update.title)) continue
'corsheaders', 'cors_csrf',
self.add_license_to_xml(xml)
contexts = to_list(response.context) if not contexts: self.fail(msg_prefix + 'Response did not use any contexts to ' 'render the response')
date1 = datetime.date.today() date2 = datetime.datetime.today() date3 = Timestamp.today()
from __future__ import unicode_literals
self.advanced_settings_page.visit() self.advanced_settings_page.set_values(self.course_advanced_settings) self.advanced_settings_page.wait_for_ajax()
params = self._signed_callback_params(self.order.id, self.COST, self.COST) result = process_postpay_callback(params)
with tm.ensure_clean('test.tex') as path: self.assertRaises(UnicodeEncodeError, df.to_latex, path)
ttype = 'zeromq'
if latest: for pkg_name in latest: if old.get(pkg_name, 'old') == new.get(pkg_name, 'new'): ret[pkg_name] = {'current': new[pkg_name]}
concat_values = to_concat[0] if copy and concat_values.base is not None: concat_values = concat_values.copy()
bp = df.plot.box(colormap=cm.jet, return_type='dict') _check_colors(bp, jet_colors[0], jet_colors[0], jet_colors[2]) tm.close()
#after = _sed_esc(after, escape_all) limit = _sed_esc(limit, escape_all)
role = CourseCcxCoachRole(self._course.id) role.add_users(coach) ccx = CcxFactory(course_id=self._course.id, coach=self.coach)
return field_object.field_name
if return_distance: dist, neigh_ind = results else: neigh_ind = results
create_account(self.USERNAME, self.PASSWORD, self.EMAIL)
clf.fit(docs_train, y_train)
import salt.ext.six as six
output = self.engine.render_to_string('inheritance21') self.assertEqual(output, '12a34')
self.assertNumContains(sql, 'tbl_tbsp', 2)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'vsphere', vm_['profile'], vm_=vm_) is False: return False
return self.make_object_list
self._auto_auth("STAFF_TESTER", "staff101@example.com", True)
obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')
version = float('.'.join(numpy.version.version.split('.')[:2]))
with self.assertRaises(forms.ValidationError): f.clean('1:30:05 PM 21/12/2010')
assert_frame_equal(ix[:, :2], f.reindex(columns=['A', 'B']))
sum_square_grad = sharedX(param.get_value() * 0.)
self.assertRaises( ValueError, store.put, 'b', df[10:], append=True)
from __future__ import unicode_literals
qs = Node.objects.values('parent__parent__id') self.assertIn(' LEFT OUTER JOIN ', str(qs.query))
return line
DEFAULT_THIN_DIR = '/var/tmp/.%%USER%%_%%FQDNUUID%%_salt'
with self.assertRaises(InvalidVersionError): self.store.convert_to_draft(self.chapter_loc, self.user.id)
alternate_course = self.create_course( org=md5(self.course.org).hexdigest() )
Env.METRICS_DIR.makedirs_p() _prepare_report_dir(complexity_report_dir)
self.assertIsInstance(min_td - Timedelta(1, 'ns'), pd.tslib.NaTType)
return self.find_css('.signatory-panel-body .signatory-name-value').first.text[0]
response.render() pickled_response = pickle.dumps(response) unpickled_response = pickle.loads(pickled_response)
y = y.T
from __future__ import absolute_import, print_function import os import re import time import logging try: import msgpack HAS_MSGPACK = True except ImportError: HAS_MSGPACK = False
for arr_format, arr in test_arrays.items(): assert_warns(UserWarning, check_symmetric, arr) assert_raises(ValueError, check_symmetric, arr, raise_exception=True)
import salt.utils from salt.modules import file as filemod from salt.modules import config as configmod from salt.modules import cmdmod from salt.exceptions import CommandExecutionError
return (NullSpace(), '')
self.config.pop(cli_log_datefmt)
rendered = "0.post.dev%d" % pieces["distance"]
return struct.unpack('<' + structure, binascii.unhexlify(data))
from salt.states import proxy as proxy
with self.assertRaisesRegexp(UserPartitionError, "Cannot assign user to an empty user partition"): RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, empty_partition)
assert_false(np.may_share_memory(b_float32, a_int32))
return OrderedDict()
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, requires_salt_modules
('ALIGN', (2, 1), (2, -1), 'CENTER'),
INSTALLED_APPS += ('django_extensions',)
response = self.session.post( STUDIO_BASE_URL + '/xblock/' + loc, data=xblock_desc.serialize(), headers=self.headers, )
del __define_global_system_encoding_variable__
return [ factories.UserCredential( id=1, username='test', credential=factories.ProgramCredential() ), factories.UserCredential( id=2, username='test', credential=factories.ProgramCredential() ) ]
import json import salt.ext.six import salt.ext.six.moves.http_client from salt.ext.six.moves.urllib.parse import urljoin as _urljoin
continue
if self.is_(other): return True try: other = self._is_dtype_compat(other) return com.array_equivalent(self._data, other) except (TypeError, ValueError): pass return False
self._check_double_roundtrip(df, tm.assert_frame_equal, compression=False, check_frame_type=True)
from django.http import QueryDict
for field in m2m_type_fields: reverse_field = field.remote_field self.assertTrue(reverse_field.is_relation) self.assertTrue(reverse_field.many_to_many) self.assertTrue(reverse_field.related_model)
extra_attrs = {'class': 'special'}
raise
old_center_buffer = np.zeros(0, np.double)
import salt.ext.six as six
connection.prepare_database() executor = MigrationExecutor(connection, self.migration_progress_callback)
if __salt__['mysql.user_exists'](name, host, unix_socket=unix_socket, **connection_args):
import re
vmconfig['changed']['set_{0}'.format(collection)][prop] = vmconfig['state'][collection][prop]
return self._extra_fields_setting.get(field_name) in ["required", "optional"]
if val_video_urls["youtube"]: youtube_streams = "1.00:{}".format(val_video_urls["youtube"])
return response.content
self.assertEquals(set(child_usage_ids), set(child.scope_ids.usage_id for child in block.get_children()))
mako_middleware_process_request(request)
return [ desc for desc in [ desc for (_, desc) in XModuleDescriptor.load_classes() ] ]
import salt.fileclient import salt.utils.url
from salt.modules import gnomedesktop
xmin, xmax = plt.xlim() ymin, ymax = plt.ylim() coef = clf.coef_ intercept = clf.intercept_
with patch('mongodb_proxy.MongoProxy') as mock_proxy: mock_proxy.return_value.alive.return_value = False useless_conn = MongoConnection('useless', 'useless', 'useless')
pull_result = __salt__['dockerng.pull']( image, client_timeout=client_timeout, )
clf.fit(X, y, sample_weight=[0.001] * 3 + [1] * 2)
for i, hyperparameter in enumerate(kernel.hyperparameters): assert_equal(theta[i], np.log(getattr(kernel, hyperparameter.name)))
class_ = load_function(engine) if issubclass(class_, ModuleStoreDraftAndPublished): options['branch_setting_func'] = lambda: ModuleStoreEnum.Branch.draft_preferred return class_( doc_store_config=doc_store_config, contentstore=contentstore, signal_handler=signal_handler, **options )
self.assertFalse(glusterfs.create_volume('newvolume', 'host1:/brick', start=True))
from __future__ import print_function from distutils.version import LooseVersion
request.grant_type = grant_type request.user = user
value = get_bytes_from_wsgi(environ, key, default) return value.decode(UTF_8, errors='replace') if six.PY3 else value
handler.release() return instance
large_width = models.IntegerField(default=750) large_height = models.IntegerField(default=400)
self.login() self.enroll(course_id)
layer_to_updated = OrderedDict()
import msgpack
CREDIT_TASK_DEFAULT_RETRY_DELAY = 30
ret.append(rest)
return str(self)
error_summary = _("An error occurred while creating your receipt.")
return {}
pass
output = self.engine.render_to_string('basic-syntax37', {"callable": lambda: "foo bar"}) self.assertEqual(output, 'foo bar')
df.groupby(level='three')
return self._apply_1d(f, axis=axis)
import salt.utils from salt.exceptions import CommandExecutionError
_AXES_MAP = { DataFrame: [0], Panel: [1, 2], Panel4D: [1, 2, 3], }
self.assertEqual(response.status_code, 404) if error_type: self.assertEqual(response.data, error_type.to_json())
modules_to_update = StudentModule.objects.filter(course_id=course_id, module_state_key__in=usage_keys)
values = conv(values)
self._create_block_hierarchy()
axes = df.ix[:, [0]].plot(color='DodgerBlue', subplots=True) self._check_colors(axes[0].lines, linecolors=['DodgerBlue'])
httpretty.register_uri( httpretty.PUT, "http://localhost:4567/api/v1/threads/{}".format(thread_data["id"]), body=_get_thread_callback(thread_data) )
self.assertEqual(self.store.has_published_version(item), publish_state)
'log_fmt_logfile': (tuple, str),
spca_lasso = MiniBatchSparsePCA(n_components=3, method='cd', alpha=alpha, random_state=0).fit(Y) assert_array_almost_equal(spca_lasso.components_, spca_lars.components_)
LOAD_P = '.load.p' MINIONS_P = '.minions.p' RETURN_P = 'return.p' OUT_P = 'out.p'
self.course_key = self.store.make_course_key('Org_1', 'Course_1', 'Run_1') self._create_course_with_given_location(self.course_key)
sys.exit(3)
with self.assertNumQueries(0): all_deadlines = VerificationDeadline.deadlines_for_courses(course_keys) self.assertEqual(all_deadlines, deadlines)
X = 1. / (np.arange(1, 11) + np.arange(0, 10)[:, np.newaxis]) y = np.ones(10)
access_flag = 0 data_array = ctypes_array()
disks = _get_host_ssds(host_ref) + _get_host_non_ssds(host_ref)
inlier_mask_subset = residuals_subset < residual_threshold n_inliers_subset = np.sum(inlier_mask_subset)
self.assertEqual(pueblo_json, City.objects.geojson().get(name='Pueblo').geojson)
config = old_to_new(config)
url( r'^courses/{course_key}/xblock/{usage_key}/view/(?P<view_name>[^/]*)$'.format( course_key=settings.COURSE_ID_PATTERN, usage_key=settings.USAGE_ID_PATTERN, ), 'courseware.module_render.xblock_view', name='xblock_view', ),
log = logging.getLogger(__name__)
self.wait_for_element_visibility(email_selector, 'Email field is visible') self.q(css=email_selector).fill(email)
with self.assertRaises(AssertionError): Cudnn2D(filters=self.filters, batch_size=-1, input_space=self.input_space)
return self.filter_by(data, "course_id", course_id)
if unique not in self.mapping: raise ValueError
else: ret = _load_result(existing, ret)
sorted_df = frame.sort_values(by='A') assert_frame_equal(sorted_df, expected[::-1]) expected = frame.sort_values(by='A') assert_frame_equal(sorted_df, expected)
from salt.exceptions import CommandExecutionError import salt.utils
for train, test in cval.LabelKFold(labels, n_folds=n_folds): assert_equal(len(np.intersect1d(labels[train], labels[test])), 0)
start_index = self._line_start_indexes[line_number - 1] if len(self._line_start_indexes) == line_number: line = self._string[start_index:] else: end_index = self._line_start_indexes[line_number] line = self._string[start_index:end_index - 1] return line
for val in value: if not self.valid_value(val): raise ValidationError( self.error_messages['invalid_choice'], code='invalid_choice', params={'value': val}, )
if hasattr(filt, '__match__'): match = filt.__match__ else: match = item
if ip.startswith('fe80:'): return False return True
self.explicit = True return optparse.Option.take_action(self, action, dest, *args, **kwargs)
results.append(str(self.glob_match(word)))
dim = row[0] srid = row[1] field_params = {} if srid != 4326: field_params['srid'] = srid if dim != 2: field_params['dim'] = dim
from pandas import tslib td = Series([timedelta(days=1), tslib.NaT], dtype='m8[ns]') self.assertEqual(td.dtype, 'timedelta64[ns]')
sites = [] i = 0 while 1: j = text.find(substr, i) if j == -1: break sites.append(j) i = j + 1 return sites
d = b.values.astype('M8[us]').astype(object)
self.assertRaises(SyntaxError, df.eval, 'd c = a + b')
def f(): cat.rename_categories([1, 2])
assets, __ = store.get_all_content_for_course(course_loc) for asset in assets: print "Deleting {0}...".format(asset) store.delete(asset['_id'])
gtype = self._field.geom_type
if privacy is not None: profile_page.visit()
if self.is_geometry: self.ewkb = bytes(obj.ewkb) self._adapter = Binary(self.ewkb) else: self.ewkb = to_pgraster(obj)
res_col = df.iloc[:, 0] tm.assert_series_equal(res_col, exp_col) self.assertTrue(com.is_categorical_dtype(res_col))
sim = np.array([[0, 5, 9, 4], [5, 0, 2, 2], [4, 2, 1, 0]])
adrian = NaturalKeyAnchor.objects.create(**book1) james = NaturalKeyAnchor.objects.create(**book2)
if tt is None:
import time import os import codecs import logging
import salt.ext.six as six
return [Badge(element, self.browser) for element in self.q(css=".badge-display:not(.badge-placeholder)")]
bulk_ops_record.nest()
module = CapaFactory.create(attempts=attempts, max_attempts=attempts) self.assertFalse(module.should_show_check_button())
msg = 'Unable to load file contents at path %s for item %s: %s ' % ( filepath, def_id, err) raise Exception, msg, sys.exc_info()[2]
field_count = len(header[0])
obj_list = done_queries[prefetch_to] continue
xblock._published_by = published_block.edit_info.edited_by xblock._published_on = published_block.edit_info.edited_on
r = HttpResponseRedirect(lazystr('/redirected/')) self.assertEqual(r.url, '/redirected/')
setattr(p, 'restaurant', None)
tfp.add(base, arcname=os.path.join('py{0}'.format(py_ver), base)) continue
_builtin_context_processors = ('django.template.context_processors.csrf',)
self.assertEqual(response.status_code, 200) self.assertContains(response, "<li>Unchangeable object: UnchangeableObject object</li>", 1, html=True)
call_command('manage_group', TEST_GROUP) self.check_groups([TEST_GROUP]) self.check_permissions(TEST_GROUP, [])
Order.get_cart_for_user(self.user).start_purchase() Order.get_cart_for_user(self.user).start_purchase() Order.get_cart_for_user(self.user).start_purchase()
slot = str(slot) return slots[slot]['slotname']
import os import sys import time
selector = self.get_element_selector(VIDEO_MENUS["language"] + ' li.is-active') return self.q(css=selector).first.attrs('data-lang-code')[0]
resp_head['Access-Control-Allow-Origin'] = req_head.get('Origin', '*') resp_head['Access-Control-Expose-Headers'] = 'GET, POST' resp_head['Access-Control-Allow-Credentials'] = 'true'
result.summary
self.assert_enrollment_status(as_server=True, mode=CourseMode.VERIFIED)
return sparse.csr_matrix(self.coef_)
import salt.client from salt.utils import parsers, print_cli from salt.utils.verify import verify_log import salt.output
if existing['code'] == 200:
tm._skip_if_no_scipy()
has_children = False
self.assertTrue(profile_page.profile_has_default_image) self.assertTrue(profile_page.profile_has_image_with_public_access())
with patch('lms.djangoapps.verify_student.models.requests.post', new=mock_software_secure_post_error): attempt = self.create_and_submit() assert_equals(attempt.status, "must_retry")
try: return cls.objects.get(user=user).status except cls.DoesNotExist: return None
self.assertFileContains('test/file1.txt', 'file1 in the app dir')
course_key = CourseKey.from_string(course_id) certs_api.generate_example_certificates(course_key) return redirect(_instructor_dash_url(course_key, section='certificates'))
return self._ip == 1
return 'list-display-sketch'
tm._skip_if_no_pytz() from pytz import timezone
result[:] = 0 self.assertTrue((s[1:3] == 0).all())
saltenv = env
try: return _render_to_html(_get_final_tree(ex)) except ParseException: return err(ex)
self.password = 'test' self.user = UserFactory.create(password=self.password) self.staff = UserFactory.create(password=self.password, is_staff=True)
assert_array_equal(np.sort(X_counted.data), np.sort(X_hashed.data))
available_version = salt.utils.alias_function(latest_version, 'available_version')
kwargs['freq'] = self.freq
field_data_cache = FieldDataCache.cache_for_descriptor_descendents( course_id, self.staff_user, descriptor ) return render.get_module( self.staff_user, self.request, location, field_data_cache, )
text_items = self.q(css='section#my-courses').text if len(text_items) > 0: return text_items[0] else: return ""
self.data = { "access_token": self.access_token, "client_id": self.client_id, }
X, y, X_test, y_test = build_dataset(n_samples=200, n_features=100, n_informative_features=100) max_iter = 150
size_tr_col = len(headers[self.tr_size_col])
collect = [e for e in collect if e.undoc_names and len(e.undoc_names) != e.nsig_names] collect.sort(key=lambda x:x.path)
if 'HOME' in os.environ: os.environ['HOME'] = pwuser.pw_dir
initial_1 = FormMixin().get_initial() initial_1['foo'] = 'bar' initial_2 = FormMixin().get_initial() self.assertNotEqual(initial_1, initial_2)
request = Mock() request.META = {'HTTP_REFERER': http_referer} request.is_secure = lambda: is_secure return request
for key, val in six.iteritems(data): _kwargs['__pub_{0}'.format(key)] = val
keyboard.__salt__ = {} keyboard.__grains__ = {'os_family': ''}
self.assert_numpy_array_equal( tslib.array_to_datetime(arr, errors='ignore'), arr)
response.streaming_content = compress_sequence(response.streaming_content) del response['Content-Length']
del self.bias_from_marginals
s = Series(ser) result = s.value_counts() str(result)
self.course_nav.go_to_vertical('Test Vertical-0') self.video.wait_for_video_player_render() self.video.speed = '2.0'
call_command('manage_group', TEST_GROUP, '--remove') self.check_groups([])
esx_cmd += ' -s {0} -u {1} -p \'{2}\' ' \ '--protocol={3} --portnumber={4} {5}'.format(host, user, pwd, protocol, port, cmd)
allna = self.series * nan self.assertTrue(isnull(allna.idxmin()))
target_mod = module + '.' if not module.endswith('.') else module
row_one = OrderedDict() row_one['b'] = 2 row_one['a'] = 1
raise NotImplementedError()
self._params = []
if os.path.isfile(destdir): os.remove(destdir) os.makedirs(destdir)
return (self.get_input_space(), self.get_input_source())
self.assertEqual(safe_key('test', 5, 'version'), '5:version:test')
obj = models.Post.objects.create(name='New post', text='goodbye world') self.assertGreater(obj.pk, 10)
if hasattr(mod, 'run'): mod.run()
out_file = os.path.join(conn['reactor_path'], member.name)
test_data = state_run['cmd_|-test_failing_state_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
link_name = '/' + link_name
from salt.states import boto_cloudwatch_alarm
self.asset_collection.update( {'_id': course_assets.doc_id}, {'$set': updates_by_type} ) return True
tables = connection.introspection.table_names(cursor) created_models = set()
return six.text_type(value)
self.components_ = self._make_random_matrix(self.n_components_, n_features)
from __future__ import absolute_import import logging
elif hasattr(self.__class__, action): func = getattr(self.__class__, action)
ret = line_search_wolfe2(f, fprime, xk, pk, gfk, old_fval, old_old_fval, **kwargs)
import salt.utils from salt.utils.odict import OrderedDict from salt._compat import string_io from salt.ext.six import string_types
from salt.daemons.flo import core from salt.daemons.test.plan import actors
df = DataFrame(np.random.randn(2, 2)) mask = DataFrame([[False, False], [False, False]]) s = Series([0, 1])
a = Article( id=None, headline='Swallow bites Python', pub_date=datetime(2005, 7, 28), ) a.save()
return True, '', list(zip_longest(sources, source_hashes[:len(sources)]))
cmd = 'dockerng.ps' docker_hosts = get('*', cmd)
if not self._savepoint_allowed(): return self.validate_thread_sharing() self._savepoint_commit(sid)
METRICS_WITH_AVERAGING = [ "precision_score", "recall_score", "f1_score", "f2_score", "f0.5_score" ]
self.all_words = temp_all_words
values = Series([u('a'), u('b'), NA, u('c'), NA, u('eeeeee')])
return self.q(css='.bit-publishing .wrapper-visibility .copy .inherited-from').visible
cmd = 'rpm --import {0}'.format(pkg_pub_key_file) __salt__['cmd.run'](cmd, runas=runas, use_vt=True)
self.strategy.clean_partial_pipeline()
n_classes = 1 if solver in ('liblinear', 'sag'): break
import sklearn
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
CourseUpdateDesc = namedtuple("CourseUpdateDesc", ['date', 'content'])
result = td.sum() expected = to_timedelta('00:01:21') self.assertEqual(result, expected)
VerificationDeadline.set_deadline(self.course.id, self.VERIFICATION_DEADLINE)
self.assertTrue(self._is_location_published(location)) self.assertFalse(modulestore().has_changes(modulestore().get_item(location)))
self.assertRedirects(resp, settings.LOGIN_REDIRECT_URL + '?next=' + reverse('dashboard'))
tree = etree.Element('span')
if self.symmetrical: self._add_items(self.target_field_name, self.source_field_name, *objs)
test_score = np.zeros((params['n_estimators'],), dtype=np.float64)
store.delete_course(refetch_course.id, user)
res_row = df.loc["j", :] tm.assert_series_equal(res_row, exp_row) tm.assertIsInstance(res_row["cats"], compat.string_types)
"callback_url": callback_url,
from __future__ import absolute_import import logging from copy import deepcopy
X = check_array(X, copy=whiten, dtype=FLOAT_DTYPES).T
from salt.states import zk_concurrency
self.assertEqual(MANY_TO_ONE_CLASSES, {f.__class__ for f in m2o_type_fields})
rho = evals[:, n_components:].sum(1) / evals[:, :n_components].sum(1) eta = np.median(rho)
def __hash__(self): return hash(self._params())
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=rng)
i = Index([Timestamp('20130101'), Timestamp('20130103')]) i_rec = self.encode_decode(i) self.assert_index_equal(i, i_rec)
add_button_html = '<div class="add-xblock-component new-component-item adding"></div>' if can_add: self.assertIn(add_button_html, html) else: self.assertNotIn(add_button_html, html)
ret[name]['config'] = get_vmconfig( ret[name]['vmid'], ret[name]['node'], ret[name]['type'] )
result = f.clean('01:30 PM') self.assertEqual(result, time(13, 30, 0))
#templates_path.append('source/_templates')
if n_local_trials is None: n_local_trials = 2 + int(np.log(n_clusters))
log.info('Runner completed: {0}'.format(data['jid'])) del event del namespaced_event return data['return']
self.client.logout()
__virtualname__ = 'salt'
BULK_EMAIL_EMAILS_PER_TASK = 100
result = to_timedelta('', box=False) self.assertEqual(result.astype('int64'), tslib.iNaT)
resp = self.client.get('/') self.assertEqual(resp.status_code, 200) self.assertContains(resp, 'footer-edx-v3')
call_command("loaddata", "course_email_template.json")
self.seed = seed rng = make_np_rng(seed, which_method="permutation") self.permut = rng.permutation(index_tab)
ignore_cidr: 192.168.50.0/24
return CourseLocator(org, course, run, deprecated=True)
for df in [self.tsframe, self.mixed_frame, self.mixed_float, self.mixed_int]:
else: final_codes ,= set(codebook.keys())
def __init__(self, message, last_response): super(RedirectCycleError, self).__init__(message) self.last_response = last_response self.redirect_chain = last_response.redirect_chain
high, ext_errors = self.state.reconcile_extend(high) errors += ext_errors
__salt__['file.remove'](tmpfilename)
self.assertEqual(self.engine.template_loaders[0].cache_key(lazystr('template.html'), []), 'template.html')
return True
timeout = __FUN_TIMEOUT.get( fun,
import salt.utils.boto3 import salt.utils.compat
from salt.modules import sysbench
with self.assertRaises(ItemNotFoundError): self.store.get_item(self.writable_chapter_location)
if singular_series: values[0].name = keys[0]
ErrClass = socket.error if six.PY2 else OSError try: socket.gethostbyname(domain) return True except ErrClass: return False
link = self._get_link(cobj) self._link_cache[full_name] = link
import salt.utils
est = DummyRegressor(strategy="median") est.fit(X_learn, y_learn) y_pred_learn = est.predict(X_learn) y_pred_test = est.predict(X_test)
resp = self._change_enrollment('enroll') self.assertEqual(resp.status_code, 403)
raise ValueError('Timeout cannot be a float')
self.wait_for_captions() captions_selector = self.get_element_selector(CSS_CLASS_NAMES['captions_text']) subs = self.q(css=captions_selector).html return ' '.join(subs)
import salt.utils from salt.exceptions import CommandExecutionError
try: import boto import boto3 import boto.exception import boto3.session
return HttpResponse( compress_kml(loader.render_to_string(*args, **kwargs)), content_type='application/vnd.google-earth.kmz', )
if metadata is not None: metadata = np.array(metadata, copy=False).ravel() self.metadata = metadata
return self.q(css="div.proctored-exam.completed").visible
return HttpResponse('<html><body>Dummy page</body></html>')
PREVIEW_VIEWS = [STUDENT_VIEW, AUTHOR_VIEW]
ret['comment'] = 'Event module not available. Beacons enable job failed.'
try: del self._item_cache[key] except KeyError: pass
failed_commands.discard('lspci') failed_commands.discard('dmidecode')
ground_truth = np.zeros((n_features, n_targets)) ground_truth[:n_informative, :] = 100 * generator.rand(n_informative, n_targets)
config.groups[2].name = "Second Group"
self._todo.extend(styles) return self
self.assertEqual(self.selenium.current_url, original_url)
with super(ForumEventTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
import msgpack
self.assertEqual(k_args, tuple()) self.assertEqual( k_kwargs.get('url'), urlparse.urljoin(self.course.ccx_connector, ccxconapi.CCXCON_COURSEXS_URL) )
content_type, __ = mimetypes.guess_type(template)
with self.assertRaises(IndexError): mocked_request = self.get_signed_grade_mock_request(namespace_lti_v1p1=False) self.xmodule.parse_grade_xml_body(mocked_request.body)
for cat in item['categories']: handler.addQuickElement("category", cat)
return store.create_item(user.id, usage_key.course_key, usage_key.block_type, block_id=usage_key.block_id)
data = out.getvalue()
from salt.ext.six.moves.urllib.parse import urljoin as _urljoin import salt.ext.six.moves.http_client from salt.version import __version__ import salt.utils.http
return Response(data=token)
if delta < 0: return self._cache.incr(key, -delta) try: val = self._cache.decr(key, delta)
lhs = Series(randn(5)) expect = -lhs result = pd.eval(expr, engine=self.engine, parser=self.parser) assert_series_equal(expect, result)
sample_weight = compute_sample_weight(None, y) assert_array_almost_equal(sample_weight, [1., 1., 1., 1., 1., 1., 1.])
self.assertEqual(default_storage.base_location, '') with self.settings(MEDIA_ROOT='test_value'): self.assertEqual(default_storage.base_location, 'test_value')
'APP_DIRS': True, 'OPTIONS': {'loaders': []},
self._create_video_component() self.edit_component() self.assertTrue(self.video.verify_settings())
if block_type == 'course': block_id = course_key.run xblock = self.create_xblock(runtime, course_key, block_type, block_id, fields) return self.update_item(xblock, user_id, allow_not_found=True)
Z = -9999 + np.zeros(land_mask.shape[0]) Z[land_mask] = np.exp(kde.score_samples(xy)) Z = Z.reshape(X.shape)
can_assemble = {} for dev in devices: cmd = 'mdadm -E {0}'.format(dev) can_assemble[dev] = __salt__['cmd.retcode'](cmd) == 0
normalizer = proba_k.sum(axis=1)[:, np.newaxis] normalizer[normalizer == 0.0] = 1.0 proba_k /= normalizer
import os
pass
with self.assertRaises(forms.ValidationError): f.clean('21/12/2010')
result = idf.drop(drop_idx.index, level=0).reset_index() expected = df[-df.var1.isin(drop_idx.index)]
return self.q(css="{} .action-close".format(self.TAB_SELECTOR)).present
#import yaml import salt.ext.six as six
course_tag_api.set_course_tag(user, course_key, partition_key, group.id)
PY3 = sys.version_info[0] == 3
self._implicit_index = True if self.index_col is None: self.index_col = lrange(implicit_first_cols)
post_params = sign(self.CLIENT_POST_PARAMS)
import salt.utils from salt.states.git import _fail, _neutral_test
time.sleep(2)
if getitem and isinstance(s, DataFrame): error = KeyError else: error = TypeError self.assertRaises(error, f)
P *= self.early_exaggeration
if apply_change is True: assign(name, value) return 'Updated and applied' return 'Updated'
assert max(pd.max(), hd.max()) < .17
brc4 = Birch(threshold=10000.) assert_warns(UserWarning, brc4.fit, X)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'azure', vm_['profile'], vm_=vm_) is False: return False
return (0, 0, self.rule.rule_id)
non_ts = self.series.copy() non_ts[0] = np.NaN self.assertRaises(ValueError, non_ts.interpolate, method='time')
SECURE_BROWSER_XSS_FILTER = False SECURE_CONTENT_TYPE_NOSNIFF = False SECURE_HSTS_INCLUDE_SUBDOMAINS = False SECURE_HSTS_SECONDS = 0 SECURE_REDIRECT_EXEMPT = [] SECURE_SSL_HOST = None SECURE_SSL_REDIRECT = False
self._mock_paver_needs = patch.object(pavelib.quality.run_quality, 'needs').start() self._mock_paver_needs.return_value = 0
from salt.utils.decorators import depends import salt.utils
raise NotImplementedError()
l[0] = ["faz", "boo"] df.index = l repr(df)
match_func, match_args, match_kwargs = resolve(path) self.assertEqual(match_func, func) self.assertEqual(match_args, args) self.assertEqual(match_kwargs, kwargs)
self.elapsed = time.time() - self._start_time
result = embargo_api.check_course_access(self.course.id, user=self.user, ip_address='FE80::0202:B3FF:FE1E:8329') self.assertTrue(result)
func.__doc__ = doc
port = 4505 master_ip = None
Timestamp(Timestamp.max)
self._send_pub(payload)
B = safe_sparse_dot(Q.T, M)
self.assertEqual(my_doodad.num_calls, 0)
def f(x): x[:] = 10
return launchctl('unload', path, runas=runas)
wollongong = AustraliaCity.objects.get(name='Wollongong')
self.assertFalse(form.is_valid())
self.assertFalse(result['success']) self.assertIn(u"you have cancelled this transaction", result['error_html'])
for key, val in original_values_map.iteritems(): self.assertEquals( self.advanced_settings.get(key), val, 'Undoing Should revert back to original value' )
self._check_double_roundtrip(df, tm.assert_frame_equal, compression='zlib', check_frame_type=True)
policy = self.grading_policy policy['GRADE_CUTOFFS'] = value self.grading_policy = policy
levels = pd.date_range('2014-01-01', periods=4) codes = np.random.randint(0, 4, size=100)
'courseware', 'student',
request.process_response_content = response.content request.process_response_reached = True return response
pass
i = begin_at_stage for i in range(begin_at_stage, self.n_estimators):
this_tar_file=tarfile.open(tar_filename,"r:bz2")
text = f.widget.format_value(result) self.assertEqual(text, '13:30:05')
enrollment_number = super(CourseEnrollmentManager, self).get_queryset().filter( course_id=course_id, is_active=1 ).count() return enrollment_number
self.functions['saltutil.sync_grains'](saltenv='base') self.grains_cache = self.opts['grains']
return {'access_token', 'refresh_token', 'token_type', 'expires_in', 'scope'}
test_item = test_func test_item.__unittest_skip__ = CheckCondition(condition)
from django.conf import settings if not settings.configured: settings.configure()
self.get_select_option(from_box, str(self.peter.id)).click() self.get_select_option(from_box, str(self.lisa.id)).click()
import salt.utils from salt.exceptions import CommandExecutionError, CommandNotFoundError
self.options.log_file = self.config.get(cli_setting_name)
self.assert_enrollment_status(as_server=True, mode='professional')
linter = JavaScriptLinter() results = FileResults('') linter.check_javascript_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
from urllib.request import urlopen from urllib.error import HTTPError
as_view_decorator_with_custom = CacheMiddleware(cache_timeout=60, cache_alias='other', key_prefix='foo')
query_time = query.get('duration', 0) / 1000
self.check_event_response_by_key( 'handle_vote', resource, 'newVotes', test_case['new_votes'], self.XBLOCK_NAMES[1] )
self.assertTableNotExists("i_love_ponies") new_state = project_state.clone() with connection.schema_editor() as editor: operation.database_forwards("test_runsql", editor, project_state, new_state)
non_nan_elements = com.notnull(arr).nonzero()[0] if len(non_nan_elements): return _guess_datetime_format(arr[non_nan_elements[0]], **kwargs)
self.label_name_to_index = {} for index, name in enumerate(self.label_index_to_name): self.label_name_to_index[name] = index
def test_linearsvx_loss_penalty_deprecations(): X, y = [[0.0], [1.0]], [0, 1]
from __future__ import unicode_literals
for prop in state_cfg: if isinstance(state_cfg[prop], (list)) and len(state_cfg[prop]) == 0: continue
self.assertRaises(ValueError, DatetimeIndex, ['1400-01-01']) self.assertRaises(ValueError, DatetimeIndex, [datetime(1400, 1, 1)])
result = SparseArray(result.ravel(), fill_value=fill_values[0], kind=sp_indexes[0])
self.lc_block.max_count = 1 self.lc_block.capa_type = 'customresponse' self.lc_block.refresh_children() result = self.lc_block.validate()
self.require_index = None
if 'current_time' in self.event: self.event['currentTime'] = self.event.pop('current_time')
with tm.assert_produces_warning(RuntimeWarning): c_old = Categorical([0, 1, 2, 0, 1, 2],
max_scores_cache.fetch_from_remote([location_to_cache]) self.assertIsNotNone(max_scores_cache.get(location_to_cache)) self.check_grade_percent(0.33)
from __future__ import absolute_import
qs = RasterModel.objects.filter(geom__dwithin=(rast, 500)) self.assertEqual(qs.count(), 1)
from django.conf import urls callback = getattr(urls, 'handler%s' % view_type)
return self._folds[0][-1].get_output_space()
if self._read_sync_future is not None: self._read_sync_future.exc_info() if self._read_stream_future is not None: self._read_stream_future.exc_info()
SEARCH_ENGINE = "search.tests.mock_search_engine.MockSearchEngine"
_pshell(cmd)
self.assertIn( 'Service not found', self.run_function('service.list', ['spongebob']))
__virtualname__ = 'lowpkg'
self.assertRaises(ValueError, lambda: tdi + dti[0:1]) self.assertRaises(ValueError, lambda: tdi[0:1] + dti)
obj = obj.copy() obj.index.freq = self.freq return obj
mark.delete(using='other')
ii = -1
else: retcode = 0
if not isinstance(tup, tuple): return False
ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_ ).astype(np.bool_) ref_inlier_mask[outliers] = False
self.client.logout()
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.save_problem(get_request_dict)
if value.ndim == 0: value = tslib.iNaT
return self.enabled and self.cache_ttl > 0
else: terms_text = _(u"Terms of Service and Honor Code")
modulestore().mappings = {}
actual = grouped_df.filter(lambda x: len(x) > 1) expected = df.iloc[expected_indexes] assert_frame_equal(actual, expected)
global _translations if language not in _translations: _translations[language] = DjangoTranslation(language) return _translations[language]
varname = ur"{a}_{{{b}}}".format( a=enrich_varname(first), b=enrich_varname(second) )
path_cache = None parents_cache = None
import salt.utils
return BlockUsageLocator(course_key, 'course', course_key.run)
raise NotImplementedError('subclasses of Storage must provide a delete() method')
AUTH_ENTRY_LOGIN_API = 'login_api' AUTH_ENTRY_REGISTER_API = 'register_api'
(solution_id, subset_choices) = self.sample_from_answer_pool(choices_list, rng, num_choices)
pass
from salttesting.helpers import ensure_in_syspath, requires_salt_modules
def setUp(self): super(TestFilteredChildren, self).setUp() self.users = {number: UserFactory() for number in USER_NUMBERS}
self._assert_course_verification_status(None)
can_rollback_ddl = False
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.django_book, self.bio_book, self.djangonaut_book])
if self._check_relation(obj, parent_model): return []
if grade_response is None: grade_response = self.server.config.get( 'default', copy.deepcopy(self.DEFAULT_GRADE_RESPONSE) )
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.guitar_book, self.djangonaut_book])
lti_params = response[LTI_PARAMS_KEY] return lti_params['oauth_consumer_key'] + ":" + lti_params['user_id']
while top_level_logger.handlers: top_level_logger.handlers.pop()
self.assertRaises(SaltInvocationError, utils.format_call, dummy_func, {'1': 2})
import tornado.httputil import tornado.simple_httpclient from tornado.httpclient import HTTPClient
video_id = cls.fetch_youtube_video_id(course_key) if video_id: return "http://www.youtube.com/watch?v={0}".format(video_id)
task_type = 'may_enroll_info_csv' task_class = calculate_may_enroll_csv task_input = {'features': features} task_key = "" return submit_task(request, task_type, task_class, course_key, task_input, task_key)
% ( primary_key_column_name, column_name, table_name, referenced_table_name, column_name, referenced_column_name, column_name, referenced_column_name, )
super(DraftModuleStore, self).delete_course(course_key, user_id)
if signal.getsignal(signal.SIGINT) is signal.SIG_DFL: signal.signal(signal.SIGINT, self._handle_signals)
profile_page.visit()
pass
self._test_visible_to_students(False, 'private_released', self.past)
return key.field_name
self.user.is_staff = True
with self.assertNumQueries(3): lst1 = self.traverse_qs( Person.objects.prefetch_related('houses', 'houses__rooms'), [['houses', 'rooms']] )
click_css( self, self._bounded_selector(self.ADD_BUTTON_SELECTOR), require_notification=require_notification, )
t = Engine(debug=True).from_string('{% url will_not_match %}') c = Context() with self.assertRaises(NoReverseMatch): t.render(c)
old = list_pkgs(saltenv=saltenv)
self.assertTrue((axis.get_ticklocs() == np.arange(len(df))).all())
if not self._state.adding and self.pk is not None: qs = qs.exclude(pk=self.pk)
from reclass.adapters.salt import ext_pillar as reclass_ext_pillar from reclass.errors import ReclassException
if space.axes != self.axes: batch = _undo_op(batch, 'DimShuffle', strict=True)
from __future__ import absolute_import
from salt.exceptions import CommandExecutionError
log.exception( 'Failed to handle marketing opt-in flag: user="%s", course="%s"', user.username, course_key )
sparse_results = sparse_classifier.predict_log_proba(X_test_sparse) dense_results = dense_classifier.predict_log_proba(X_test) assert_array_equal(sparse_results, dense_results)
buggy = Buggy() buggy.a = 2 assert_raises(RuntimeError, clone, buggy)
keyname = key fn_ = '{0}/.ssh/{1}'.format(userinfo['home'], key)
s = self.model.objects.get(session_key=self.session.session_key) self.assertEqual(s.account_id, None)
if is_bool_dtype(result): return result try: return Index(result) except TypeError: return result
indent[depth] = start[1]
for line in exec_lines: self.process_input_line(line, store_history=False)
item = self.store.get_item(item_location) item.group_access[self.content_partition.id] = group_ids self.store.update_item(item, self.user.id)
y = NORBSmall.load(which_set, 'cat') y_extra = NORBSmall.load(which_set, 'info')
assert_array_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)
from django.template.base import ( TemplateSyntaxError, Library, token_kwargs, TemplateDoesNotExist ) from django.template.loader_tags import IncludeNode
LOGGER.error(self._format_msg(format_str, *args))
return {}
ints = Series([1, 2, 3])
new_stores = [store for store in get_mixed_stores(new_mixed_setting) if store['NAME'] != 'split'] old_stores = get_mixed_stores(self.OLD_MIXED_CONFIG_WITH_DICT)
POSTGIS_TO_GDAL = [1, 1, 1, 3, 1, 3, 2, 5, 4, None, 6, 7, None, None]
res = cat.reorder_categories(["c", "b", "a"]) self.assert_categorical_equal(cat, old) self.assert_categorical_equal(res, new)
log = logging.getLogger(__name__)
def format_values_with(float_format): formatter = self._value_formatter(float_format, threshold)
self.check_event_response_by_http_status('remove_resource', resource, test_case['status'])
import logging
strides = a.strides total_buffer_len = (a_end - a_start) // a.itemsize
return course.id.run
from __future__ import absolute_import from salt.ext.six.moves import zip
return self.best_estimator_.transform(Xt)
x_weights_sign_flip = pls_ca.x_weights_ / x_weights
if 'data' not in adapters[iface_name]: adapters[iface_name]['data'] = salt.utils.odict.OrderedDict()
if token.contents != 'endif': raise TemplateSyntaxError('Malformed template tag at line {0}: "{1}"'.format(token.lineno, token.contents))
from edxval.api import copy_course_videos
self._load_definition() if key.block_scope_id.block_type not in self.aside_fields: raise KeyError()
for dirpath, _dirnames, filenames in os.walk(directory): for filename in filenames: yield (filename, dirpath)
pass
if key_name is None: key_name = _format_dict_key(args, plugin)
from __future__ import division
p = T.switch(p > 0., p, self.left_slope * p) return p
elif mask.any(): if transpose: mask = mask.T if isinstance(new, np.ndarray): new = new.T axis = new_values.ndim - axis - 1
CourseEnrollment.enroll(user, course_id) self.assertTrue(CourseEnrollment.is_enrolled(user, course_id)) self.assertTrue(CourseEnrollment.is_enrolled_by_partial(user, course_id_partial)) self.assert_no_events_were_emitted()
url = '{base}/course_modes/create_mode/{course_id}/'.format( base=BASE_URL, course_id=self._course_id ) query_string = urllib.urlencode(self._parameters) if query_string: url += '?' + query_string return url
avg_score = [] for train, test in cv: estimator.fit(X[train], y[train]) avg_score.append(scorer(estimator, X[test], y[test])) return np.mean(avg_score)
if callable(using): return Atomic(DEFAULT_DB_ALIAS, savepoint)(using) else: return Atomic(using, savepoint)
return lib.map_infer(values, self._box_func)
self.returnString = matchString self.name = "'%s'" % self.returnString self.errmsg = "Expected " + self.name #self.myException.msg = self.errmsg
epoch_num = 1
df = DataFrame({'A': np.arange(20)}, index=np.arange(20))
self.go_to_tab_and_assert_problem(1, self.problem1_name)
try: user = User.objects.get(id=user_id) except ObjectDoesNotExist: return None
import salt.utils
return {"result": "inclusion_two_params_from_template - Expected result: %s, %s" % (one, two)}
return self.lexsort_depth == self.nlevels
start, stop, step = key.start, key.stop, key.step
log.exception("Could not send notification email for initial verification for user %s", user.id)
self.assertTrue('Activate Course Enrollment' in response.content)
raise NotImplementedError( "%s does not implement definition_to_xml" % self.__class__.__name__)
raise NotImplementedError('subclasses of Storage must provide a url() method')
__virtualname__ = 'win_iis'
PAIRWISE_DISTANCE_FUNCTIONS = { 'cityblock': manhattan_distances, 'cosine': cosine_distances, 'euclidean': euclidean_distances, 'l2': euclidean_distances, 'l1': manhattan_distances, 'manhattan': manhattan_distances,
raise NotImplementedError('subclasses of Serializer must provide an handle_fk_field() method')
from salt.ext import six
self.courseware_page.visit() annotation_component_page = AnnotationComponentPage(self.browser) self.assertEqual( annotation_component_page.component_name, 'Test Annotation Module'.format() ) return annotation_component_page
self._set_item(key, value)
return DatetimeIndex(snapped, freq=freq, verify_integrity=False)
self.assertEqual(self.func(None), [])
HAS_KEYSTONE = False try: from keystoneclient.v2_0 import client import keystoneclient.exceptions HAS_KEYSTONE = True except ImportError: pass
return self._y
self.assertEqual(exam['hide_after_due'], sequence.hide_after_due)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, mock_open, patch, NO_MOCK, NO_MOCK_REASON )
return _user_has_perm(self, perm, obj)
for l in [slice(3.0, 4), slice(3, 4.0), slice(3.0, 4.0)]:
if convnet_available.compile_error: _logger.debug('error last time') return False
df.sort_values(by=['a', 'b'])
module = CapaFactory.create(due=self.yesterday_str, force_save_button="true", done=True) self.assertFalse(module.should_show_save_button())
group_id = get_cohort_id(request.user, course_key)
warnings.filterwarnings('always', '', DeprecationWarning, __name__)
new_stores = get_mixed_stores(new_mixed_setting) self.assertIsInstance(new_stores, list)
self.basic_setup() self.check_grade_percent(0) self.assertEqual(self.get_grade_summary()['grade'], None)
response = self.client.get('/syndication/naive-dates/') self.assertEqual(response['Last-Modified'], 'Tue, 26 Mar 2013 01:00:00 GMT')
self._test_readonly_field('username', 'Username', self.username)
result = idf['C'].sort_index(ascending=[1, 0]) assert_series_equal(result, expected['C'])
u"The name that will identify you in your courses - " u"{bold_start}(cannot be changed later){bold_end}"
self.assertFalse(check_password({}, 'test', 'incorrect'))
mask = [1] * 10 + [0] * 10 assert_raises(AssertionError, assert_almost_equal, matthews_corrcoef(y_1, y_2, sample_weight=mask), 0.)
if is_integer(r) and r not in [0, 1]: return int(r) r = bool(r)
if self.verbose_name_plural is None: self.verbose_name_plural = string_concat(self.verbose_name, 's')
__grains__ = {}
request.COOKIES[settings.SESSION_COOKIE_NAME] = 'abc'
try: self.connection.ops.check_expression_support(StdDev(1)) return True except NotImplementedError: return False
return reverse_url(handler_name, 'library_key_string', library_key, kwargs)
return launchctl('enable', 'system/{0}'.format(label), runas=runas)
self.assertEqual( [logmsg_dbg.format(newmax)], handler.messages )
wua_session = win32com.client.Dispatch('Microsoft.Update.Session') wua_session.ClientApplicationID = 'Salt: Install Update'
def item_enclosure_url(self, item): return 'http://example.com' def item_enclosure_size(self, item): return 0 def item_mime_type(self, item): return 'image/png'
init_space, source = self.data_specs X_space, init_y_space = init_space.components new_y_space = VectorSpace(dim=num_classes) new_space = CompositeSpace((X_space, new_y_space)) self.data_specs = (new_space, source)
return self._filter_or_exclude(True, *args, **kwargs)
instructor_task = cls( course_id=course_id, task_type=task_type, task_id=task_id, task_key=task_key, task_input=json_task_input, task_state=QUEUING, requester=requester ) instructor_task.save_now()
pca = PCA(n_components=3)
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
self.assertIn('test_name', context) self.assertEqual(context['kwarg_test'], 'kwarg_value') self.assertEqual(context['custom_key'], 'custom_value')
highlighting.lexers['ipython'] = IPythonConsoleLexer()
if math_expr.strip() == "": return float('nan')
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
has_children = True reference_link = Reference(default=None, scope=Scope.content) reference_list = ReferenceList(scope=Scope.content) reference_dict = ReferenceValueDict(scope=Scope.settings)
cmap = self.colormap or 'BuGn' cmap = self.plt.cm.get_cmap(cmap) cb = self.kwds.pop('colorbar', True)
return self.backend_name == pipeline['backend']
pixeltypes.append(pixeltype)
tag = 'salt/netapi/hook' if tag_suffix: tag += tag_suffix
PERSONAL = 'personal' BUSINESS = 'business' ORDER_TYPES = ( (PERSONAL, 'personal'), (BUSINESS, 'business'), )
result = df.ix[1.0:5] expected = df assert_frame_equal(result, expected) self.assertEqual(len(result), 5)
from __future__ import absolute_import
self.assertEqual(self.run_function('xattr.clear', [NO_FILE]), 'ERROR: File not found: {0}'.format(NO_FILE))
bad_ranges = (5.0, 'foo', co_shp) for bad in bad_ranges: with self.assertRaises(TypeError): lm.save(fid_range=bad)
clear_counties()
self._post = QueryDict(mutable=True) self._files = MultiValueDict()
text = f.widget.format_value(result) self.assertEqual(text, "13:30:05")
stats_line = '' stats_line = outs.split('\r\n')[1]
machines = self.run_cloud('-p {0} {1} --log-level=debug'.format(PROFILE_NAME, INSTANCE_NAME)) self.assertIn(INSTANCE_NAME, machines.keys())
elif existing['code'] == 404:
import salt.version
group.full_clean()
self.assertIn(self.user_name, self.certificates_section.last_certificate_exception.text) self.assertIn(notes, self.certificates_section.last_certificate_exception.text)
import salt.ext.six as six
result = read_json(json, date_unit=None) assert_frame_equal(result, df)
return {'name': name, 'changes': {}, 'result': True, 'comment': ''}
ModeCreationPage(self.browser, self.course_id).visit()
return sorted(run_.functions)
about_base = re.sub(r"^https?://", "", about_base)
self._set_cs()
return etree.Element("imageresponse")
pass
return [('127.0.0.1:11211 (1)', {})]
result = ols(y=y, x=x)
message = ( "Calling modelformset_factory without defining 'fields' or 'exclude' " "explicitly is prohibited." ) with self.assertRaisesMessage(ImproperlyConfigured, message): modelformset_factory(Author)
values = [[_try_decode(x) for x in y] for y in values]
if depth is not None: depth -= 1
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
continue
"generic_inline_admin-media-content_type-object_id-TOTAL_FORMS": "1", "generic_inline_admin-media-content_type-object_id-INITIAL_FORMS": "0", "generic_inline_admin-media-content_type-object_id-MAX_NUM_FORMS": "0",
pass
from __future__ import absolute_import import os import subprocess
if decision in self.FAILED_DECISIONS: signed_field_names.remove("auth_amount")
return urlparse.urljoin(BASE_URL, relative_path)
attrs['freq'] = 'infer'
return self._decision_function(X)
self.run_collectstatic()
with check_mongo_calls(num_finds.pop(0), num_sends): path = path_to_location(self.store, location) self.assertEqual(path, expected)
return self.q(css='.course-number-override .certificate-value').first.text[0]
self._xblock_map = {}
from salt.modules import dnsutil
self.assertRaises(TypeError, self.frame.reindex, columns=['A'], level=1)
labels = np.array([0, 0, 0, 0, 0], dtype=np.int64)
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
return self if kwargs['inplace'] else self.copy()
self.q(css=self._bounded_selector(".check-all-inline-discussions")).first.click()
if not settings.FEATURES.get('MILESTONES_APP', False): return [] from milestones import api as milestones_api return milestones_api.get_course_milestones(course_id)
from salt.output import nested nested.__opts__ = {} ret = nested.output(obj).rstrip() return ret
attempt.created_at = attempt.created_at - timedelta(days=364) attempt.save()
problem_specified = self.build_problem(answer="Second", case_sensitive=True)
available_version = salt.utils.alias_function(latest_version, 'available_version')
DONATION_TYPES = ( ("general", "A general donation"), ("course", "A donation to a particular course") )
self.exc_info = sys.exc_info()
p = Person.objects.get(pk=self.person.pk) self.assertEqual('Reinhardt', p.name)
self.descriptor = descriptor self._runtime = None super(XModule, self).__init__(*args, **kwargs) self.runtime.xmodule_instance = self
import salt.utils import salt.utils.itertools from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.modules.mac_user import _dscl, _flush_dscl_cache
cmd_opt = []
offset += m.offset
_ptr = None
return self._nobs - self._df_raw
self.assertFalse('<h2>Enrollment Information</h2>' in response.content)
if item['description'] is not None: handler.addQuickElement("summary", item['description'], {"type": "html"})
from unit.modules.boto_apigateway_test import BotoApiGatewayTestCaseMixin
if self.verbosity >= level: self.stdout.write(msg)
data = lmap(tuple, data) return _list_to_arrays(data, columns, coerce_float=coerce_float, dtype=dtype)
pass
return self.pk_with_subclass, set([])
self.max_size_in_mem = kwargs.pop('max_size_in_mem', 512000)
self.assertAlmostEqual(self.ts[:15].corr(self.ts[5:]), 1)
last_sum = last_mean * last_sample_count new_sum = X.sum(axis=0)
_check_types(left, right, obj=obj)
opts['hash_type'] = opts['hash_type'].lower()
td = Series(date_range('2012-1-1', periods=3, freq='D')) - \ Timestamp('20120101')
django_user_service = DjangoXBlockUserService(self.user, user_is_staff=True) anonymous_user_id = django_user_service.get_anonymous_user_id(username="No User", course_id='edx/toy/2012_Fall') self.assertIsNone(anonymous_user_id)
return BlockUsageLocator(course_key, 'course', course_key.run)
for __ in range(10): group2_id = RandomUserPartitionScheme.get_group_for_user( self.MOCK_COURSE_ID, self.user, self.user_partition ) self.assertEqual(group1_id, group2_id)
PIPELINE_ENABLED = False STATICFILES_STORAGE = 'openedx.core.storage.DevelopmentStorage'
importances = est.feature_importances_ est.set_params(n_jobs=2) importances_parrallel = est.feature_importances_ assert_array_almost_equal(importances, importances_parrallel)
return reclass_ext_pillar(minion_id, pillar, **kwargs)
self.assertNotContains(response, "How it Works") self.assertNotContains(response, "Find courses") self.assertNotContains(response, "Schools & Partners")
if use_numexpr: op = lambda x: x else: op = lambda x: None if special:
def print_to_console(payload): print(payload)
atom = _tables().Atom.from_dtype(value.dtype)
self.assertEqual(sanitize_separators('10.10'), '10.10')
cache = uuid()
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, call, patch)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if total_recipients <= settings.BULK_EMAIL_JOB_SIZE_THRESHOLD: routing_key = settings.BULK_EMAIL_ROUTING_KEY_SMALL_JOBS
self.assertIn(self.SUCCESSFUL_RESPONSE, response.content) self.assertEqual(response.status_code, 200)
X, y = make_hastie_10_2(n_samples=20, random_state=1) X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=43)
@ignore_warnings(category=DeprecationWarning) def test_eval(self): if not self.do_test_eval:
alias = _weekday_rule_aliases[self.rep_stamp.weekday()] return _maybe_add_count('W-%s' % alias, days / 7)
if name is None: df = self._constructor_expanddim(self) else: df = self._constructor_expanddim({name: self}) return df
properties[name] = serialized_section
self.in_class_define = False self.generic_visit(node) if node.body: return node
pass
import integration import salt.utils
from __future__ import absolute_import
spmatshp = (outsize*N.prod(kshp)*inshp[0],insize) if ws else\ (nkern*outsize,insize) spmat = scipy_sparse.lil_matrix(spmatshp)
supports_tablespaces = False
from __future__ import absolute_import import hashlib import logging import copy
try: import MySQLdb HAS_MYSQL = True except ImportError: HAS_MYSQL = False
with self.assertRaises(SearchIndexingError): reindex_course_and_check_access(self.course.id, self.user)
self.assertQuerysetEqual( self.cia.members.all(), [] )
cmap = CorrectMap() for answer_id in answer_ids: cmap.update(CorrectMap(answer_id=answer_id, queuestate=None)) self.problem.correct_map.update(cmap)
loaded_mods = list(set(loaded_mods) | set(persist_mods))
return self.q(css=self.auto_enroll_browse_button_selector).is_present()
sa = City.objects.create(name='San Antonio', point=nad_pnt)
__context__[contextkey] = result
return self.q(css=BUTTON_SELECTORS['handout_download']).visible
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
stack = inspect.stack()
from salttesting.parser import PNUM, print_header from salttesting.parser.cover import SaltCoverageTestingParser
self._original = None
seed_permissions_roles(self.course.id)
if not salt.utils.cloud.wait_for_port(ip_address, port=winrm_port, timeout=ssh_connect_timeout): raise SaltCloudSystemExit( 'Failed to connect to remote windows host (winrm)' )
if node.attr == 'display_name_with_default_escaped': self.results.violations.append(ExpressionRuleViolation( Rules.python_deprecated_display_name, self.node_to_expression(node) )) self.generic_visit(node)
discussion_topics = { "Topic B": {"id": "Topic B"}, }
with patch('xmodule.capa_module.CapaModule.closed') as mock_closed: mock_closed.return_value = True
y = iris.target
return 'some html content'
from __future__ import absolute_import
rule = rule.strip()
return self.update(id=entry_id, updated_user=user, should_display=should_display)
return context["cc_requester"]["id"] == cc_content["user_id"]
import hashlib import random
from __future__ import absolute_import import re
set_has_profile_image(username, False)
"decision": decision,
self.assertEquals(4, len(response.content.splitlines()))
self.assertIn(expected_copyright, json_data['copyright'])
if self.check_running(): self.action_log_info('An instance is already running. Exiting') self.shutdown(1)
mod = include('a-pydsl-sls')
if not salt.utils.is_proxy(): self.opts['grains'] = salt.loader.grains(opts)
epsilon = lr_scalers.get(param, 1.) * learning_rate scale = T.maximum(self.eps, T.sqrt(new_sum_squared_grad)) delta_x_t = (-epsilon / scale * grads[param])
return { 'Content-type': 'application/json', 'Accept': 'application/json', 'X-CSRFToken': self.session_cookies.get('csrftoken', '') }
if not model._default_manager.auto_created: if model._default_manager.use_in_migrations: default_manager = copy.copy(model._default_manager) default_manager._set_creation_counter()
if email_students: send_beta_role_email(action, user, email_params) if auto_enroll: if not CourseEnrollment.is_enrolled(user, course_id): CourseEnrollment.enroll(user, course_id)
y += 0.01 * np.random.normal((n_samples,))
self.conn2 = connection.copy() self.conn2.set_autocommit(False)
dest_usage_key = source_item.location.replace(name=uuid4().hex) category = dest_usage_key.block_type
return '%s.%s:%d' % ( model._meta.app_label, model._meta.model_name, getattr(instance_or_pk, 'pk', instance_or_pk), )
return self.statistics()[2]
email_instructions = _(u"The email address you used to register with {platform_name}").format( platform_name=settings.PLATFORM_NAME )
length = arr.size if hasattr(arr, 'size') else len(arr) return np.nan if length == 0 else np.median(arr, *args, **kwargs)
stream.unget(chunk) return (RAW, {}, stream)
self.assertFalse(utils.is_bin_str(''))
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
data = 'A,B\n0,0\n0,'
TIME_ZONE = ENV_TOKENS.get('TIME_ZONE', TIME_ZONE)
raise NotImplementedError("%s does not implement definition_from_xml" % cls.__name__)
mock_prlctl = MagicMock(return_value=guid_str) with patch.object(parallels, 'prlctl', mock_prlctl): parallels.list_snapshots(name) mock_prlctl.assert_called_once_with('snapshot-list', [name], runas=None)
datetime_frame_columns = datetime_frame.T
return TransformPoint(self, 'skew')
ForestEstimator = FOREST_ESTIMATORS[name] rng = np.random.RandomState(0) weights = rng.rand(X.shape[0]) total_weight = np.sum(weights)
dbm = make_random_basic_binary_dbm( rng = rng, pool_size_1 = pool_size_1, )
#'papersize': 'letterpaper',
from salt.states import win_firewall import salt.utils
self.assertEqual( res_json['message'], u"Certificate Invalidation does not exist, Please refresh the page and try again.", )
class Developer(models.Model): name = models.CharField(max_length=15)
base = DatetimeIndex(['2011-01-05', '2011-01-04', '2011-01-02', '2011-01-03'], tz=tz, name='idx')
if self._handle is not None: self._handle.close() self._handle = None
restart = False
import salt.ext.six as six
self.options.report = (reporter or self.options.reporter)(self.options) return self.options.report
pass
if not comps: continue
#latex_paper_size = 'letter'
ver_string = get_version(ver_tuple) six.assertRegex(self, ver_string, r'1\.4(\.dev[0-9]+)?')
XBLOCK_FIELD_DATA_WRAPPERS = ()
for t in ['s', 'D', 'us', 'ms']: self.assertRaises(TypeError, s.astype, 'M8[%s]' % t)
sfm = SelectFromModel(clf, threshold=0.25) sfm.fit(X, y) n_features = sfm.transform(X).shape[1]
with self.assertRaises(GeoIP2Exception): cntry_g.city('tmc.edu') with self.assertRaises(GeoIP2Exception): cntry_g.coords('tmc.edu')
django_cache.clear() config_cache.clear()
node.attrib.pop('xblock-family', None)
assert_array_equal(X_truth[:, :2], out_X_unstructured[0]) assert_array_equal(X_truth[:, :2], out_X_structured[0])
assert_series_equal(ser[sel], ser)
reports_dir = Env.REPORT_DIR.makedirs_p() clean_dir(reports_dir)
if is_platform_windows(): extra_compile_args=[] else: extra_compile_args=['-Wno-unused-function']
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
STATICFILES_DIRS = []
def f(): return iter([]) n_obj = Note.objects.all()[0]
if not self.q(css="input.practice_exam").present: return False
self.a.friends.clear()
return v[::-1], W[:, ::-1]
os.makedirs(self.mydir)
'providers_config', os.path.join(salt.syspaths.CONFIG_DIR, 'cloud.providers')
idx = Index(['a|b', 'a|c', 'b|c']) result = idx.str.get_dummies('|')
with transaction.atomic(): list(Person.objects.all().select_for_update()) self.assertTrue(self.has_for_update_sql(connection))
os.kill(parent_pid, 0)
if isinstance(value, Country): if value.code: return value.code else: return None return value
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21")
stdin = kernel32.GetStdHandle(STD_INPUT_HANDLE) dupin = DuplicateHandle(srchandle=stdin, inherit=True)
if issue.get('pull_request'): continue issue_id = issue.get('id') if output == 'full': ret[issue_id] = issue else: ret[issue_id] = _format_issue(issue)
cea = CourseEnrollmentAllowed(email='robot-allowed@robot.org', course_id=self.course.id) cea.save() self.allowed_email = 'robot-allowed@robot.org'
prob /= prob.sum(axis=1).reshape((prob.shape[0], -1)) return prob
item = self.store.get_item(item_location) item.visible_to_staff_only = True self.store.update_item(item, self.user.id)
dataset = datasets.load_iris() X = dataset.data
value = anonymous_id_for_user(data['user'], None) return value
return (self.large_width, self.large_height)
linkcode_resolve = make_linkcode_resolve('sklearn', u'https://github.com/scikit-learn/' 'scikit-learn/blob/{revision}/' '{package}/{path}#L{lineno}')
import logging
dm = DataFrame(index=lrange(3), columns=lrange(3))
_options['checktype'] = '1'
name = models.CharField(max_length=128) group_country = models.ForeignKey(Country, models.CASCADE) members = models.ManyToManyField(Person, related_name='groups', through='Membership')
self.q(css='.new-library-button').first.click() self.wait_for_ajax()
if course_key is not None and mode_slug in CourseMode.VERIFIED_MODES: verification_models.VerificationDeadline.set_deadline(course_key, verification_deadline)
LogoutPage(self.browser).visit() StudioAutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=staff).visit()
for l, name in zip(level, names): self.levels[l].rename(name, inplace=True)
private_ips = [] public_ips = []
for role_name in role_names: role = Role.objects.get(name=role_name, course_id=course_key) user.roles.add(role)
for idxr, getitem in [(lambda x: x.ix, False), (lambda x: x.loc, False), (lambda x: x, True)]:
return HttpResponseBadRequest()
def f(): cat > cat_rev