if hasattr(func, 'im_func'): func = func.__func__
assert_almost_equal(result._y.values.flat, [1, 4, 5], check_dtype=False)
import sys import contextlib import os from salt.ext.six.moves import range from salt.ext.six.moves import map
if callable(action): func = action action = action.__name__
sh("coverage xml --rcfile={}".format(rcfile)) sh("coverage html --rcfile={}".format(rcfile)) call_task('diff_coverage', options=dict(options))
self.assertEqual( res_json['message'], u"Student (username/email={user_name}) already in certificate exception list.".format(user_name=user) )
from salttesting.unit import TestCase from salttesting.helpers import ensure_in_syspath
self.user = UserFactory.build(username='test', email='test@edx.org') self.user.set_password('test_password') self.user.save()
self.assertFalse(Index(['a', 'b', 'c']).equals(Index(['a', 'b'])))
patched_from_string.assert_called_once_with(mock_problem_location) patched_manager.filter.assert_called_once_with( course_id=self.course_key, module_state_key=mock_problem_key )
msg = "Error in problem xml include: %s" % ( etree.tostring(next_include, pretty_print=True)) system.error_tracker(msg)
ws = create_connection('wss://localhost:8000/all_events/d0ce6c1a37e99dcc0374392f272fe19c0090cca7')
clf = AdaBoostRegressor(random_state=0) clf.fit(boston.data, boston.target) score = clf.score(boston.data, boston.target) assert score > 0.85
y_pred, sigma = gp.predict(x, return_std=True)
self.assertRaises(KeyError, lambda: df.loc['d'])
self.obj._consolidate_inplace() self.obj._data = self.obj._data.setitem(indexer=indexer, value=value) self.obj._maybe_update_cacher(clear=True)
import integration from salt.modules import mysql as mysqlmod
for lnum in range(len(level_lengths)): name = columns.names[lnum] yield ExcelCell(lnum, coloffset, name, header_style)
expected_classes = ['Different persons', 'Same person'] assert_array_equal(lfw_pairs_train.target_names, expected_classes)
result = p.select(lambda x: x in ('foo', ), axis='items') self.assert_panel_equal(result, p.reindex(items=[]))
from __future__ import absolute_import
def __setstate__(self, state): self._is_child = True self.__init__(state['opts'], log_queue=state['log_queue'])
video = self.store.get_item(child_to_move_location) self.assertEqual( old_parent_location, video.get_parent().location.for_branch(None) )
self.assertIn( deploy_dir_path, default_config['deploy_scripts_search_path'] )
headers = {"Content-Type": request.META['CONTENT_TYPE']} result, __ = self.endpoint.validate_request(url, method, body, headers) return result
action_name = ugettext_noop('deleted') update_fcn = partial(delete_problem_module_state, xmodule_instance_args) visit_fcn = partial(perform_module_state_update, update_fcn, None) return run_main_task(entry_id, visit_fcn, action_name)
if load.get('fun', '') != 'saltutil.find_job': return good
np.random.seed(42)
model = self.model
return ret
result = jboss7.bindings_exist(name='bindings', jboss_config={}, bindings={'env': 'DEV'}, profile=None)
result = user.Rename(new_name)[0]
self.assertQuerysetEqual( School.objects.all(), ["<School: School object>"] )
if not cached_pkg: log.error('Unable to cache {0}'.format(uninstaller)) ret[target] = {'unable to cache': uninstaller} continue
walk_l = list(_depth_limited_walk(name, max_depth)) walk_d = {} for i in walk_l: walk_d[i[0]] = (i[1], i[2])
break
from copy import deepcopy import logging import os import hashlib
'ALLOW_COURSE_STAFF_GRADE_DOWNLOADS': False,
import numpy as np import matplotlib.pyplot as plt from sklearn import neighbors
y = np.zeros(n_eval) if eval_MSE: MSE = np.zeros(n_eval)
PersonModel = PersonWithHeightAndWidth File = ImageFile
self.assertEqual(result['success'], 'correct')
credit_requirements = get_credit_requirements(course_key) paired_requirements = {} for requirement in credit_requirements: namespace = requirement.pop("namespace") paired_requirements.setdefault(namespace, []).append(requirement)
reload(vboxapi) _virtualboxManager = vboxapi.VirtualBoxManager(None, None)
self.extra_context = extra_context or {} if name: self.extra_context[name] = var
checkpoint = verification_statuses.get(checkpoint) has_completed_check = bool(checkpoint)
create_manual_course_enrollment( user=user, course_id=course_id, mode=course_mode, enrolled_by=enrolled_by, reason='Enrolling via csv upload', state_transition=UNENROLLED_TO_ENROLLED, )
actual = grouped_df.filter(lambda x: len(x) > 1) expected = df.iloc[expected_indexes] assert_frame_equal(actual, expected)
_tzname_re = re.compile(r'^[\w/:+-]+$')
lead, middle, trail = '', word, '' lead, middle, trail = trim_punctuation(lead, middle, trail)
migrate_cohort_settings(course)
from __future__ import absolute_import, print_function import datetime import json import logging import time
from salttesting.unit import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../../')
current_umask = os.umask(0o027) verify_files([logfile], self.config['user']) os.umask(current_umask)
from __future__ import unicode_literals
del self.bias_from_marginals
form_data = {'course_id': self.course.id.run, 'email_enabled': True} form = CourseAuthorizationAdminForm(data=form_data) self.assertFalse(form.is_valid())
response_element = etree.Element("schematicresponse")
url( r'^reverify/{course_id}/{usage_id}/$'.format( course_id=settings.COURSE_ID_PATTERN, usage_id=settings.USAGE_ID_PATTERN ), views.InCourseReverifyView.as_view(), name="verify_student_incourse_reverify" ),
course_outline_url = reverse_course_url('course_handler', updated_course.id) response = self.client.get_html(course_outline_url)
tz = self.tzstr("Europe/London")
X_train, X_test = X[:n_samples_train], X[n_samples_train:] y_train, y_test = y[:n_samples_train], y[n_samples_train:]
classifier.fit(data[:n_samples / 2], digits.target[:n_samples / 2])
upload_csv_to_report_store(rows, 'student_profile_info', course_id, start_date)
step_size = x if self.verbose: logger.info('best objective: {0}'.format(mn)) assert not np.isnan(mn)
course = CourseFactory.create() create_account(self.USERNAME, self.PASSWORD, self.EMAIL)
pass
if not len(set([idx.nlevels for idx in indexes])) == 1: raise AssertionError("Cannot concat indices that do" " not have the same number of levels")
self.client.handler.load_middleware() response = self.client.get('/middleware_exceptions/exception_in_render/') self.assertEqual(response.content, b'Exception caught')
from __future__ import absolute_import
result = DataFrame([DataFrame([])]) self.assertEqual(result.shape, (1, 0))
'ioflo_verbose': int,
import logging import time
return db_field.formfield(**kwargs)
return ret
leaf_weights = node_weights[node_weights != 0] assert_greater_equal( np.min(leaf_weights), total_weight * est.min_weight_fraction_leaf, "Failed with {0} " "min_weight_fraction_leaf={1}".format( name, est.min_weight_fraction_leaf))
self.initiate_rerun()
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
X = np.dot(h, W) + noise
self.assertNumContains(sql, 'tbl_tbsp', 1) self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 1)
return conv2d( x, self._filters, image_shape=self._img_shape, filter_shape=self._filters_shape, subsample=self._subsample, border_mode=self._border_mode, )
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
_resolver_configured = False
LOOKUP_SEP = '__'
if isinstance(self.grouper, Grouping): self.grouper = self.grouper.grouper
_maybe_remove(store, 'wp2') store.put('wp2', wp, format='table')
if dropna: result = result.dropna(axis=0, how='all')
upload_csv_to_report_store(rows, 'enrollment_report', course_id, start_date, config_name='FINANCIAL_REPORTS')
result = self.frame.ix[2] expected = self.frame.xs(self.frame.index[2]) assert_series_equal(result, expected)
w = rng.randn(num_features)
RSTR = '_edbc7885e4f9aac9b83b35999b68d015148caf467b78fa39c05f669c0ff89878' RSTR_RE = re.compile(r'(?:^|\r?\n)' + RSTR + r'(?:\r?\n|$)')
from salt.utils import is_linux from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
with self.assertRaises(ItalianRestaurant.DoesNotExist): Place.objects.get(name="Demon Dogs").restaurant.italianrestaurant
X_embedded = 1e-4 * random_state.randn(n_samples, self.n_components)
'LICENSING': False,
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
is_summary = False _output_field = None
self.assertRaises(TypeError, Progress, 2j, 3)
a = A aaaa = AAAA ns = NS spf = SPF mx = MX
'APP_DIRS': True, 'OPTIONS': {'loaders': []},
from unit.modules.boto_s3_bucket_test import BotoS3BucketTestCaseMixin
from __future__ import absolute_import import grp
self.assertIsNone( GeneratedCertificate.certificate_for_student(students[4], self.course.id) )
import matplotlib.pyplot as plt
if gateway is not None: if not salt.utils.validate.net.ipv4_addr(gateway): errors.append('Gateway IP {0} is invalid.'.format(gateway))
idf = df.set_index(['A', 'B'])
if start_date: date_format = _get_date_time_format(start_date) if date_format: dt_obj = datetime.strptime(start_date, date_format) else: return 'Invalid start_date' else: dt_obj = datetime.now()
email_placeholder = _(u"username@domain.com")
X = np.eye(4) y = np.array(['a', 'b', 'c', 'd'])
cs_bounds = models.PolygonField(null=True) objects = models.GeoManager()
self.assertEqual( len(Note.objects.order_by('extrainfo__info').distinct()), 3 )
if node.attr == 'format': self.contains_format_call = True else: self.generic_visit(node)
if sys.version_info[0] < 3: import __builtin__ as builtins else:
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
'event_match_type': str,
db = options['database'] connection = connections[db]
module.system.user_is_staff = False
group1_id = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, self.user_partition)
frame["F"] = ["text" if item % 2 == 0 else np.nan for item in range(30)]
from salt.modules import zfs from salt.utils.odict import OrderedDict
slice_ = [[slice_]]
from __future__ import absolute_import import socket import logging
return _coerce_scalar_to_timedelta_type(arg, unit=unit, box=box, errors=errors)
result = df1.loc[(slice('A2')), :] expected = df1 assert_frame_equal(result, expected)
if self.transcript_language == 'en': return Transcript.asset(self.location, youtube_id).data
class UnaryPredicate(GEOSFuncFactory): "For GEOS unary predicate functions." argtypes = [GEOM_PTR] restype = c_char errcheck = staticmethod(check_predicate)
self.create_axes(axes=axes, obj=obj, validate=append, min_itemsize=min_itemsize, **kwargs)
from salt.states import win_powercfg as powercfg
arr = np.arange(4)
with self.assertRaises(ValueError): review1.content_object = dive
__all__ = [ CodeResponse, NumericalResponse, FormulaResponse, CustomResponse, SchematicResponse, ExternalResponse, ImageResponse, OptionResponse, SymbolicResponse, StringResponse, ChoiceResponse, MultipleChoiceResponse, TrueFalseResponse, JavascriptResponse, AnnotationResponse, ChoiceTextResponse, ]
if ret.get('Exists'): log.info('DSC Compile Config: {0}'.format(ret)) return ret
self.course = CourseFactory()
cv = (rng.rand() + 1.0) ** 2 samples = mixture.sample_gaussian( mu, cv, covariance_type='spherical', n_samples=n_samples)
freezer_includes.extend([ 'cherrypy', 'dateutils', 'pyghmi', 'croniter', 'mako', 'gnupg', ])
self.prev_floatX = config.floatX config.floatX = 'float64'
from __future__ import absolute_import try: import grp except ImportError: pass
if objects_in_fixture == 0: warnings.warn( "No fixture data found for '%s'. (File format may be " "invalid.)" % fixture_name, RuntimeWarning )
s == s2 s2 == s
class zzUrlconfSubstitutionTests(SimpleTestCase):
forms = ' '.join(form.as_table() for form in self) return mark_safe('\n'.join([six.text_type(self.management_form), forms]))
exc_type, exc_value, tb = sys.exc_info()
if step_score: self.scores_.append(step_score(self.estimator_, features)) self.n_features_ = support_.sum() self.support_ = support_ self.ranking_ = ranking_
urlpath.delete()
with check_mongo_calls(import_reads, first_import_writes): import_course_from_xml( source_store, 'test_user', TEST_DATA_DIR, source_dirs=['manual-testing-complete'], static_content_store=source_content, target_id=source_course_key, create_if_not_present=True, raise_on_failure=True, )
from __future__ import absolute_import import os import shutil
self.assert_can_access(self.beta_user, self.alpha_module.discussion_id, thread_id, True)
xblock_class = XBlock.load_class(block_type, select=settings.XBLOCK_SELECT_FUNCTION) content = xblock_class.open_local_resource(uri)
'ssh_connect_timeout', vm_, __opts__, 900
title = ugettext_noop("Textbooks") is_collection = True is_default = False
from __future__ import unicode_literals
assets, __ = store.get_all_content_for_course(course_loc) for asset in assets: print "Deleting {0}...".format(asset) store.delete(asset['_id'])
r = self.a.reporter self.assertEqual(r.id, self.r.id)
values = Series(['fooBAD__barBAD', NA, 'foo'])
course.cohort_config = {'cohorted': True} self.assertTrue(course.is_cohorted)
boston = datasets.load_boston()
obj_sys = win32com.client.Dispatch('Microsoft.Update.SystemInfo')
results[i][j] = results[j][i]
parser = CommandParser(None, usage="%(prog)s subcommand [options] [args]", add_help=False) parser.add_argument('--settings') parser.add_argument('--pythonpath')
return options, args
if os.path.isfile(join(dirname(abspath(__file__)), 'private.py')):
if total_recipients <= settings.BULK_EMAIL_JOB_SIZE_THRESHOLD: routing_key = settings.BULK_EMAIL_ROUTING_KEY_SMALL_JOBS
ret['ping_status'] = bool(len(done))
result = p.iloc[1:3] expected = p.loc[['B', 'C']] assert_panel_equal(result, expected)
self.assertNotIn('Search for a course', response.content)
sparses = [c for c in to_concat if com.is_sparse(c)] fill_values = [c.fill_value for c in sparses] sp_indexes = [c.sp_index for c in sparses]
self.selenium.find_element_by_xpath('//input[@value="Save"]').click() self.wait_page_loaded()
if '.' not in hextets[index]: hextets[index] = hextets[index].lstrip('0') if not hextets[index]: hextets[index] = '0'
with self.assertRaises(SearchIndexingError): CoursewareSearchIndexer.do_course_reindex(modulestore(), self.course.id)
scores = cross_val_score(GaussianNB(), X, y, cv=10) assert_greater(scores.mean(), 0.77)
from __future__ import absolute_import
self.assertEqual(node.tag, 'sequential')
import integration import salt.utils
response = self.fetch('/login', method='POST', body=urlencode(self.auth_creds), headers={'Content-Type': self.content_type_map['form']})
with storebuilder.build() as (__, store): course1 = CourseFactory.create(modulestore=store) course2 = CourseFactory.create(modulestore=store)
from salt.states import ini_manage
data_y = data_y[MNISTPlus.idx[which_set]]
self.course_outline_page.visit() self.course_outline_page.wait_for_page()
coef = coef.ravel()
values = self.values if reversed: values, other = other, values
'minion_restart_command': list,
cumsum = self.tsframe.cumsum() expected = self.tsframe.apply(Series.cumsum) tm.assert_frame_equal(cumsum, expected)
self.assertEqual(err.__class__, uploadhandler.CustomUploadError)
self.store.delete_item(vertical.location, self.user_id) self.assertFalse(self._has_changes(sequential.location))
import salt.ext.six.moves.http_client
IS_RDP = rdp.__virtual__()
if s3_meta: files = __get_pillar_files_from_s3_meta(s3_meta) environments = __get_pillar_environments(files)
if key_name is None: key_name = _format_dict_key(args, plugin)
np.testing.assert_equal(mlp.get_total_input_dimension(['h0', 'h1']), 4) inp = theano.tensor.matrix()
self.series[5:7] = np.NaN str(self.series)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
actual_url = staticfiles_storage.url(path_overrides[module])
from salt.log import setup_console_logger from salt.serializers import DeserializationError, SerializationError
if iface_type not in ['slave']: return __salt__['cmd.run']('ifup {0}'.format(iface)) return None
#latex_appendices = []
ret['comment'] = ( 'User {0}@{1} is not present, so it cannot be removed' ).format(name, host) return ret
def is_file(thing): return hasattr(thing, "read") and callable(thing.read)
assert_raises(ValueError, auc, [1.0, 0.0, 0.5], [0.0, 0.0, 0.0])
] DATETIME_INPUT_FORMATS = [
with self.conn2.cursor() as cursor2: cursor2.execute("DELETE from delete_regress_book WHERE id = 1") self.conn2.commit()
if categories is None: categories = self.categories if ordered is None: ordered = self.ordered return super(CategoricalIndex, self)._shallow_copy(values=values, categories=categories, ordered=ordered, **kwargs)
can_introspect_foreign_keys = True
self.assertEqual(updated_course.display_coursenumber, None)
world.retry_on_exception( _click_advanced, ignored_exceptions=AssertionError, )
updates.append('{0}: {1}'.format( self.install_results.GetUpdateResult(i).ResultCode, self.install_collection.Item(i).Title))
self._load_definition() if key.block_scope_id.block_type not in self.aside_fields: raise KeyError()
if not content_type: self.send_error(406)
if self[0] <= other[0]: left, right = self, other else: left, right = other, self
restrict_formatting = any([l.is_floating for l in columns.levels]) need_leadsp = dict(zip(fmt_columns, map(is_numeric_dtype, dtypes)))
FEATURES = { 'DISPLAY_DEBUG_INFO_TO_STAFF': True,
arr2 = np.zeros((2, 3)) tm.assert_frame_equal(DataFrame.from_records(arr2), DataFrame(arr2))
self.update_masquerade(role='student') self.verify_show_answer_present(False)
name = name.split('.')[0]
class DataSource(GDALBase): "Wraps an OGR Data Source object."
idx = self.index.copy() target = idx.copy() idx.names = target.names = [None, None]
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.deny("Not valid!")
idx = tm.makeDateIndex(100)
centos7-2-iad-rackspace: provider: rackspace-iad size: general1-2 swap: <size>
unit = self.store.create_child(self.user_id, subsection.location, 'vertical') signal_handler.send.assert_not_called()
response = self._enroll_through_view(self.course) self.assertEqual(response.status_code, 400)
self.modulestore.cache_items(self, [block_key], course_key, lazy=self.lazy) json_data = self.module_data.get(block_key) if json_data is None: raise ItemNotFoundError(block_key)
from __future__ import absolute_import
datasetCache = cache.datasetCache filename = datasetCache.cache_file(filename)
if (not directed) and isspmatrix_csc(csgraph): csgraph = csgraph.T
import salt.modules.win_status as status
assets, count = content_store.get_all_content_for_course(self.course.id) self.assertEqual(count, 1) display_name = assets[0]['displayname'] self.assertEqual(display_name, invalid_displayname)
self.needs_rollback, needs_rollback = False, self.needs_rollback try: self.cursor().execute('SET foreign_key_checks=1') finally: self.needs_rollback = needs_rollback
window = len(self._index)
val = self.verify_ogr_field(feat[ogr_name], model_field)
num_braces = 0
return self.load_template(template_name, template_dirs)
format_dateaxis(ax, ax.freq) return lines
if vm.guest.toolsStatus == "toolsOk": status = 'VMware tools is already up to date' return status
check_results_order()
res = cat.remove_categories("c", inplace=True) self.assert_categorical_equal(cat, new) self.assertIsNone(res)
corr2 = self.ts.autocorr(lag=1)
from __future__ import unicode_literals
mock_refund_seat.reset_mock() self.course_enrollment.refundable = mock.Mock(return_value=False) self.send_signal() self.assertFalse(mock_refund_seat.called)
import salt.loader import salt.config import integration from salt.exceptions import SaltRenderError from salt.ext.six.moves import StringIO
return self
with self.assertRaises(BadHeaderError): send_mail('Subject\nMultiline', 'Content', 'from@example.com', ['to@example.com'])
if not self or not other: return False
log.info(u"deleting course from split-mongo: %s", course_key) self.delete_course_index(course_key)
if hint_list: hintgroup_element = etree.SubElement(response_element, "hintgroup")
In [151]: plt.clf()
import salt.ext.six as six from salt.ext.six.moves import range try:
DEFAULT_MAX_NUM = 1000
from __future__ import unicode_literals
import salt.utils
params = dict([param.strip().replace('"', '').split('=') for param in params.split(',')])
from __future__ import unicode_literals
return check_question_author(user, Thread(id=content["thread_id"]).to_dict())
transform = AdditiveChi2Sampler(sample_steps=sample_steps) assert_equal(transform.sample_interval, None)
grads = coef_grads + intercept_grads self._optimizer.update_params(grads)
smallfile.write(b'a' * (2 ** 21)) smallfile.seek(0)
self.assertTrue((a == a).all()) self.assertFalse((a != a).all())
locals().update(_mk_common_exceptions())
from .tasks import update_search_index
#pylint: disable=E0602
'event_return': str,
from __future__ import absolute_import, print_function, with_statement import os import re import sys import copy import time import types import signal import fnmatch import logging import threading import traceback import contextlib import multiprocessing from random import randint, shuffle from stat import S_IMODE
course_data_path = path(self.data_dir) / source_courselike.data_dir
expected = Series([2, 0], index=Float64Index([5.0, 0.0]))
import salt.ext.six as six
tag = 'salt/netapi/hook' if tag_suffix: tag += tag_suffix
exception = Exception("failure in rerunning") try: raise exception except: CourseRerunState.objects.failed(course_key=self.course_key)
if hasattr(int, 'bit_length'): _int_bit_length = lambda i: i.bit_length() else: _int_bit_length = lambda i: len(bin(abs(i))) - 2
get_user_credentials(self.user)
from __future__ import absolute_import
clf = IsolationForest(max_samples=100, random_state=rng).fit(X_train)
log.error('Unable to create symlink {0}'.format(down_file)) if not start: os.unlink(down_file) return False
response = middleware.process_response(request, response)
subarr = tools._to_datetime(data, box=False, utc=True)
A = np.abs(random_state.randn(10, 10)) A[:, 2 * np.arange(5)] = 0
return True
url = self._reverse_urls(['courseware'], course)[0] self.assert_request_status_code(302, url)
result = sparse.loc[[1, 3, 4, 5]] exp = orig.loc[[1, 3, 4, 5]].to_sparse() tm.assert_sp_frame_equal(result, exp)
i = labels.searchsorted(loc, side='left') j = labels.searchsorted(loc, side='right') return slice(i, j)
snapshot = json.loads(record.snapshot) self.assertEqual(snapshot['enroll_msg'], enroll_msg) self.assertEqual(snapshot['access_msg'], access_msg)
interprets_empty_strings_as_nulls = False
if math_expr.strip() == "": return ""
topo_tensors = norb.get_topological_view(single_tensor=False) expected_topo_tensors = tuple(expected_topo_tensor[:, i, ...] for i in range(2))
(12, True, u"False")
from __future__ import absolute_import
self._known_consolidated = False
self._check_double_roundtrip(df, tm.assert_frame_equal, compression='zlib', check_frame_type=True)
block_structure.request_xblock_fields('category')
for X in (X_dense, X_sparse_pruned, X_sparse_unpruned):
self.assert_index_equal(uniques, exp_uniques, check_names=False)
with self.assertRaises(forms.ValidationError): f.clean('1:30:05 PM 21/12/2010')
log = logging.getLogger(__name__)
pstate['sg2'] += param_val ** 2 dx_t = - (scale * learning_rate / np.sqrt(pstate['sg2']) * param_val) rval += [param_val + dx_t]
if self._connecting_future.done(): self._connecting_future = self.connect() yield self._connecting_future
self.assertTrue(self.video.is_aligned(False))
params[ '{0}BlockDeviceMapping.{1}.DeviceName'.format( spot_prefix, dev_index ) ] = rd_name
CONTEXT_SEPARATOR = "\x04"
self.assertEqual(self.session.serializer, JSONSerializer) self.session.save()
objects = models.Manager()
'ENABLE_FEEDBACK_SUBMISSION': False,
frame = self.tsframe[:1].reindex(columns=[]) result = frame.mul(ts, axis='index') self.assertEqual(len(result), len(ts))
data = data.copy()
self.assertIsInstance(val1, bool) self.assertIsInstance(val2, bool) self.assertEqual(val1, True) self.assertEqual(val2, False)
ret = {} for row in _response['rows']: jid = row['id'] if not salt.utils.jid.is_jid(jid): continue
import logging
from salt import utils
if not self._verify_auth(): self.redirect('/login') return
terms_text = _(u"Terms of Service") terms_link = u"<a href=\"{url}\">{terms_text}</a>".format( url=marketing_link("TOS"), terms_text=terms_text )
from __future__ import absolute_import import os
problem_page.click_hint()
certificates[0]['is_active'] = False self.store.update_item(self.course, self.user.id)
from __future__ import absolute_import
if exc.errno != errno.EEXIST: raise else: ret['comment'] = 'File {0} exists and cannot be overwritten'.format(name)
with check_mongo_calls(0): cached_structure = self._get_structure(self.new_course)
self.assertEqual(params['override_custom_receipt_page'], self.CALLBACK_URL)
if lib.isscalar(value) and isnull(value): value = [value]
raise SaltClientError(msg)
try: get_course_overview_with_access(request.user, 'load', course_id) return redirect("/courses/{course_id}/wiki/{path}".format(course_id=course_id.to_deprecated_string(), path=wiki_path)) except Http404: pass
from contextlib import contextmanager import logging
for conn in connections_dict.values(): if conn is not connection: conn.close()
import integration from salt.config import cloud_providers_config from salt.ext.six.moves import range
_rcost = MeanBinaryCrossEntropy() reconstruction_cost = lambda a, b: _rcost.cost(a, b) / ds.X.shape[1]
self.assertRaises(KeyError, lambda: df.loc[slice(None), [1]])
if name: choice_element.text = str(name) choice_element.set("name", str(name))
response = self.client.post(self.url, { "email": self.EMAIL, "password": self.PASSWORD, }) self.assertHttpOK(response)
check('fixed', tm.makePeriodIndex)
if data_type == 'subsection': for tooltip_dict in tooltips[index]: num_students = tooltip_dict['num_students'] subsection = tooltip_dict['subsection_name'] results.append(['', subsection, num_students])
result = df.iloc[[0, 1, 3]] expected = df.ix[[0, 2, 6]] assert_frame_equal(result, expected)
scaler_batch = MinMaxScaler().fit(X)
self.assertTrue(filecmp.cmp(path_test + '.bak', path_in))
assert_series_equal(result.to_series(), s, check_index_type=check_index_type, check_categorical=check_categorical)
bnorm = beta1 n_params = len(bs)
if properties: optlist = [] for prop in properties.keys():
y = [3, 3, -1, -1, 2]
self.certificates_section.wait_for_certificate_exceptions_section()
svm = SVC(kernel="precomputed") assert_raises(ValueError, cross_val_score, svm, X, y)
Y_proba = clf_sprs.predict_proba(X_test)
text += trail trail = ''
self.assertFalse(self.store.has_changes(new_blocks["about"])) self.assertTrue(published_version_exists(new_blocks["chapter"]))
assert_almost_equal(np.std(y - np.dot(X, c)), 1.0, decimal=1)
if os.path.exists(venv_path): shutil.rmtree(venv_path) if os.path.exists(requirements_file_path): os.unlink(requirements_file_path)
except ValueError as detail: raise except Exception as detail: result = handle_error()
get_user_credentials(self.user)
from __future__ import absolute_import
course_enrollments = list(get_course_enrollments(user, course_org_filter, org_filter_out_set))
'ENABLE_LIBRARY_INDEX': False,
self.type = None self.data = None self.choices_display_names = None
membership = Membership.objects.create( membership_country_id=self.usa.id, person_id=self.jane.id, group_id=self.cia.id)
df = DataFrame(dict(A=date_range('20130102', periods=5), B=date_range('20130104', periods=5), C=np.random.randn(5)))
data = '\n hello\nworld\n' result = self.read_csv(StringIO(data), header=None) self.assertEqual(len(result), 2)
TASK_VALIDATE_ONLY = 0x1 TASK_CREATE = 0x2 TASK_UPDATE = 0x4 TASK_CREATE_OR_UPDATE = 0x6 TASK_DISABLE = 0x8 TASK_DONT_ADD_PRINCIPAL_ACE = 0x10 TASK_IGNORE_REGISTRATION_TRIGGERS = 0x20
url = reverse('verify_student_verify_now', kwargs=course_kwargs)
eps = 0.8 min_samples = 10 metric = distance.euclidean core_samples, labels = dbscan(X, metric=metric, eps=eps, min_samples=min_samples, algorithm='ball_tree')
recorder.record_applied("migrations", "5_auto") loader.build_graph() self.assertEqual(num_nodes(), 2)
return StackedBlocks(layers)
try: import redis HAS_REDIS = True except ImportError: HAS_REDIS = False
pro.editor = george pro.save()
for url_name in self.EXPECTED_URL_NAMES: self.assertContains(response, reverse(url_name))
return fnd
from __future__ import unicode_literals
return False
if not update.IsDownloaded and not update.IsInstalled: results['Available'] += 1
log.debug( 'The \'{0}\' cloud driver defined under \'{1}\' provider ' 'alias is unable to get the sizes information'.format( driver, alias ) ) continue
from __future__ import absolute_import from __future__ import print_function import logging
from datetime import date, datetime
USE_THOUSAND_SEPARATOR = False
self.store.convert_to_draft(self.problem.location, self.user.id)
self.assertLess(abs(dt - now), timedelta(seconds=2))
if conn.vendor == 'sqlite' and conn.is_in_memory_db(conn.settings_dict['NAME']): conn.allow_thread_sharing = True connections_override[conn.alias] = conn
take_1d_%(name)s_%(dest)s_memview(values, indexer, out, fill_value=fill_value) return
from salt.states import serverdensity_device
import salt.utils from salt.state import STATE_INTERNAL_KEYWORDS as _STATE_INTERNAL_KEYWORDS from salt.exceptions import ( CommandExecutionError )
W[0, 1] = .5 W[0, 2] = 1. W[0, 3] = 2.
executor.loader.check_consistent_history(connection)
if per_example is None: return None
from __future__ import unicode_literals
self.a.idols.add(self.a)
tm.assert_index_equal(right.union(left), the_union)
self.assertEqual(my_doodad.num_calls, 0)
win32security.SetNamedSecurityInfo( path, win32security.SE_FILE_OBJECT, win32security.OWNER_SECURITY_INFORMATION, userSID, None, None, None )
self.assertFalse(self.video.is_autoplay_enabled)
log = logging.getLogger(__name__)
if not HAS_REQUESTS: return False return __virtualname__
if sp.issparse(X): return inertia, _k_means._mini_batch_update_csr( X, x_squared_norms, centers, counts, nearest_center, old_center_buffer, compute_squared_diff)
(13, True, u"False"),
CONFIG_ROOT = path(os.environ.get('CONFIG_ROOT', ENV_ROOT))
[adapt_references(child, destination_course_key, export_fs) for child in subtree.get_children()]
from urllib.error import HTTPError from urllib.parse import quote from urllib.request import urlopen
input_formula = "2*x - x + y + y" self.assert_grade(problem, input_formula, "correct")
new_items.append(mapping[int(item)])
if nrepl > 0: found = True has_changes = True if pattern != repl else has_changes
destroy(vm_['name'])
if self.verbose: self._print(error_message) else: raise StreamingInsertError(error_message + '\nEnable verbose logging to ' 'see all errors')
orphans = self.store.get_orphans(course_key) self.assertIn(orphan, orphans) self.assertEqual(len(orphans), 1)
from __future__ import unicode_literals
highlighting.lexers['ipython'] = IPythonConsoleLexer()
assert_almost_equal(ref_i.coef_, clf_i.coef_, decimal=3) assert_almost_equal(ref_w.coef_, clf_w.coef_, decimal=3) assert_almost_equal(ref_i.intercept_, clf_i.intercept_, decimal=3)
upload_file = request.FILES['file'] filename = upload_file.name mime_type = upload_file.content_type size = get_file_size(upload_file)
from __future__ import absolute_import
results_by_url = {} root = None
if 'COMMAND' in chunks[1]:
return {date_field: date}
if not hasattr(request, '_xblock_token'): request._xblock_token = uuid.uuid1().get_hex()
master.update( salt.config.get_cloud_config_value( 'master', vm_, opts, default={}, search_global=True ) ) return master
'/etc/ssl/certs/ca-certificates.crt', '/etc/pki/tls/certs/ca-bundle.crt', '/etc/pki/tls/certs/ca-bundle.trust.crt', '/etc/ssl/certs/ca-bundle.crt', '/var/lib/ca-certificates/ca-bundle.pem', '/etc/ssl/cert.pem',
if cpy_error:
for ax in axes[0:-1].ravel(): self._check_visible(ax.get_xticklabels(), visible=False)
import MySQLdb import MySQLdb.cursors import MySQLdb.converters from MySQLdb.constants import FIELD_TYPE, FLAG HAS_MYSQLDB = True
response = self._response().render() res = [x for x in response] self.assertEqual(res, [b'foo'])
from __future__ import absolute_import import os import re import socket import logging from string import ascii_letters, digits
from __future__ import absolute_import
for block in blocks: for field in fields: self.assertIsNone(block_structure.get_xblock_field(block.location, field))
role = CourseCcxCoachRole(self._course.id) role.add_users(coach) ccx = CcxFactory(course_id=self._course.id, coach=self.coach)
try: carg = arg.astype(np.float64) return calc_with_mask(carg, com.notnull(carg)) except: pass
__virtualname__ = 'cassandra'
field.db_index = False
class UserRegistration(Form): username = CharField(max_length=10, widget=TextInput(attrs={'maxlength': 20})) password = CharField(max_length=10, widget=PasswordInput)
from salt.states import redismod
ind.view('i8')
a = Series([True, False, True], list('bca')) b = Series([False, True, False, True], list('abcd'))
clf = svm.SVC(kernel='linear', C=1.0) clf.fit(X, y)
course = modulestore().get_course(course_key, depth=2)
try: o.head() except (NotImplementedError): raise nose.SkipTest('not implemented on {0}'.format( o.__class__.__name__))
cp = self.frame.copy() cp.ix[:4] = 0
self.assertTableNotExists("i_love_ponies") new_state = project_state.clone() with connection.schema_editor() as editor: operation.database_forwards("test_runsql", editor, project_state, new_state)
estimator.set_params(k=1)
import salt.utils.boto3 import salt.utils.compat import salt.utils from salt.exceptions import SaltInvocationError from salt.ext.six import string_types
cache_key = u"{}".format(course.id)
return
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
for dtype in ['int32', 'int64']: v = np.arange(5000000, dtype=dtype) s = Series(v)
binding_status = {'updated': False}
dt1 = Timestamp('20130101 09:00:00') dt2 = Timestamp('20130101 10:00:00')
new_data = self[res]
apps.register_model('migrations', UnserializableModel)
if not os.path.isfile(config): try: with salt.utils.fopen(config, 'w+') as _fh:
self.assertTrue('Activate Course Enrollment' in response.content)
return self._nzoom - 1
raise SaltCloudSystemExit( 'The query_instance action must be called with -a or --action.' )
if 'cannot do' in str(e): raise raise IndexingError(key)
U *= sqrt(X.shape[0])
import salt.utils
dive = Book.objects.using('other').create(title="Dive into Python", published=datetime.date(2009, 5, 4))
if dependencies[0] != "jquery": dependencies.insert(0, "jquery")
for trainer in self.trainers: for extension in trainer.extensions: extension.on_save(trainer.model, trainer.dataset, trainer.algorithm)
SUPPORTED_BSD_LIKE = ['FreeBSD', 'NetBSD', 'OpenBSD']
_check_all_orients(self.categorical, sort='sort', raise_ok=ValueError)
self.assertEqual(parallels._validate_snap_name(name, snap_id), snap_id)
X = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1]]
self.q(css=".register-button").click()
from __future__ import absolute_import import logging from copy import copy
self.get_extended_hints(student_answers, new_cmap)
if str(tz) != str(data.tz): raise TypeError("Already tz-aware, use tz_convert " "to convert.")
Z = Z.reshape(xx.shape) ax.contourf(xx, yy, Z, cmap=cm, alpha=.8)
module = CapaFactory.create(done=False)
trainer = yaml_parse.load(load_all_yaml % {'filename': filename}) trainer.main_loop()
result = Series(i) assert_series_equal(result, expected)
self.assertEqual(cl.queryset.count(), 1)
df = _make_mixed_dtypes_df('int') _check_mixed_dtypes(df)
amount_value = decimal.Decimal(amount).quantize(decimal.Decimal('.01'), rounding=decimal.ROUND_DOWN)
context['accomplishment_copy_course_description'] = _('a course of study offered by ' '{partner_short_name}.').format( partner_short_name=context['organization_short_name'], platform_name=platform_name)
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
if branch == ModuleStoreEnum.BranchName.published: revision = ModuleStoreEnum.RevisionOption.published_only store.delete_item(itemloc, user_id, revision=revision)
for device in devices: if not pvdisplay(device): raise CommandExecutionError('Device "{0}" was not affected.'.format(device))
cols = [] for source in self.get_source_expressions(): cols.extend(source.get_group_by_cols()) return cols
continue
likelihood = (i * likelihood + x_likelihood) / (i + batch_size0)
est = TreeEstimator() y2 = y[:-1] assert_raises(ValueError, est.fit, X, y2)
check_password('letmein', encoded) self.assertEqual(hasher.harden_runtime.call_count, 0)
from salttesting.helpers import ensure_in_syspath, expensiveTest
self.selenium.find_element_by_xpath('//input[@value="Save"]').click() self.wait_page_loaded()
class DataForm(Form): data = CharField(max_length=10)
self.request.user = staff_user unlocked_toc = self._return_table_of_contents() for toc_section in self.expected_unlocked_toc: self.assertIn(toc_section, unlocked_toc)
problem = self.store.get_item(problem.location)
import salt.ext.six as six import salt.utils from salt.ext.six import string_types from salt.exceptions import CommandExecutionError import salt.utils.systemd import string
rval = X.copy()
if paramvalues['binddn']: connargs['binddn'] = paramvalues['binddn'] if paramvalues['bindpw']: params['mandatory'].append('bindpw')
from reclass.adapters.salt import ext_pillar as reclass_ext_pillar from reclass.errors import ReclassException
if 'pub_key' not in vm_ and 'priv_key' not in vm_: log.debug('Generating keys for \'{0[name]}\''.format(vm_))
super(TestSplitTestVert, self).setUp()
if self.increasing == 'auto': self.increasing_ = check_increasing(X, y) else: self.increasing_ = self.increasing
from salt.log.setup import LOG_LEVELS from salt.log.mixins import NewStyleClassMixIn import salt.utils.network
td = df.dt - df.dt + timedelta(1) td = klass(td, name='dt')
slot = str(slot) return slots[slot]['slotname']
try: import boto import boto.ec2 logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
if __salt__['mysql.grant_exists']( grant, database, user, host, grant_option, escape, **connection_args):
from salt.states import ntp
from __future__ import unicode_literals
__func_alias__ = { 'list_': 'list' }
req_kwargs['prefetch'] = False
df.set_index(index)
result = self.cat.describe() self.assertEqual(len(result.columns), 1)
for exception_class in [StudentInputError, LoncapaProblemError, ResponseError]:
COURSE_CATALOG_VISIBILITY_PERMISSION = 'see_exists'
world.browser.execute_script("window.scrollTo(0,1024)") assert world.is_css_present("button.check.is-disabled")
block, _ = get_module_by_usage_id( request, unicode(course_key), unicode(usage_key), disable_staff_debug_info=True, course=course )
httpretty.register_uri( httpretty.POST, '{}/baskets/1/'.format(TEST_API_URL), status=200, body='{}', adding_headers={'Content-Type': JSON} )
import salt.utils.http
expected_answers = {CapaFactory.answer_key(): '3.14'} self.assertEqual(module.lcp.student_answers, expected_answers)
FEATURES['EMBARGO'] = True
problem_descriptor = modulestore().get_item(usage_key) problems[unicode(usage_key)] = problem_descriptor
if hasattr(self, 'base_field'): self.base_field = self.base_field() super(RangeField, self).__init__(*args, **kwargs)
self._enable_cohorting() self._create_verified_cohort() self._enable_verified_track_cohorting() self.assertTrue(VerifiedTrackCohortedCourse.is_verified_track_cohort_enabled(self.course.id)) self._enroll_in_course()
date1 = datetime.date.today() date2 = datetime.datetime.today() date3 = Timestamp.today()
self.assertRaises(ValueError, DatetimeIndex, ['2000-01-01', '2000-01-02', '2000-01-04'], freq='D')
self.go_to_sequential_position(2) execute_video_steps(tab2_video_names)
import salt.log import salt.utils import salt.utils.network
chunksize = 1e4
reg = RidgeClassifier(class_weight={1: 0.001}) reg.fit(X, y)
if enrollment.is_active and enrollment.created > time_delta
assert_greater((X_sparse.data == 0.).sum(), 0) assert_greater((X_sparse_test.data == 0.).sum(), 0)
self._load_page(access_point, 'default')
import yaml
cls.settings_override.disable() super(LiveServerBase, cls).tearDownClass()
self.dashboard_page.visit()
import salt.utils
b = np.zeros((self.dim * 3,))
response = self.fetch('/login', method='POST', body=yaml.dump(self.auth_creds_dict), headers={'Content-Type': self.content_type_map['yaml']})
import salt.utils from salt.exceptions import CommandExecutionError
before = attempt.created_at - timedelta(seconds=1) query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(before, query) self.assertIs(result, None)
with self.assertRaises(InvalidVersionError): self.store.convert_to_draft(self.chapter_loc, self.user.id)
log = logging.getLogger(__name__)
self.assertTrue(self.video.downloaded_transcript_contains_text('srt', 'Welcome to edX.'))
clf = MockClassifier() grid_search = GridSearchCV(clf, {'foo_param': [1, 2, 3]}, refit=True) grid_search.fit(X, y)
class Point(OGRGeometry):
semi_major = srs_double(lgdal.OSRGetSemiMajor) semi_minor = srs_double(lgdal.OSRGetSemiMinor) invflattening = srs_double(lgdal.OSRGetInvFlattening)
try: remove_all_instructors(course_key) except Exception as err: log.error("Error in deleting course groups for {0}: {1}".format(course_key, err))
with warnings.catch_warnings(record=True) as w: warnings.simplefilter("always")
cp = s.copy() cp.ix[3:11] = 0 self.assertTrue((cp.ix[3:11] == 0).values.all())
if tt is None:
for line in installed_list_file:
self.lcp = self.new_lcp(None)
students_to_generate_certs_for = students_to_generate_certs_for.filter( certificatewhitelist__course_id=course_id, certificatewhitelist__whitelist=True )
MONGO_PORT_NUM = int(os.environ.get('EDXAPP_TEST_MONGO_PORT', '27017')) MONGO_HOST = os.environ.get('EDXAPP_TEST_MONGO_HOST', 'localhost')
try: import zmq
wkb_w.srid = True self.assertEqual(hex3d_srid, wkb_w.write_hex(g)) self.assertEqual(wkb3d_srid, wkb_w.write(g))
for i in params: if _is_simple_type(i): _current_parameter = SimpleParameter(i) else: _current_parameter = TypedParameter() _parse_typed_parameter(i) _current_option.add_parameter(_current_parameter)
import salt.utils import salt.utils.locales import salt.utils.cloud import salt.ext.six
from salt.modules import bridge
config_course_cohorts( course, is_cohorted=True, auto_cohorts=["AutoGroup"] )
class AvatarProxy(Avatar): class Meta: proxy = True
try: microsite = Microsite.objects.get(key='default') except Microsite.DoesNotExist: pass
if not self.is_user_authorized(request, content, loc): return HttpResponseForbidden('Unauthorized')
else: return HttpResponse(status=405)
if m > n: m, n = n, m
svc = svm.SVC(kernel='linear', C=0.1, decision_function_shape='ovo') clf = svc.fit(iris.data, iris.target)
pass
return np.mean( [estimator.log_marginal_likelihood( theta[n_dims * i:n_dims * (i + 1)]) for i, estimator in enumerate(estimators)])
self._create_course_unit(subtitles=True) self.edit_component() self.video.upload_transcript('english_single_transcript.srt')
self.assertEqual(MANY_TO_ONE_CLASSES, {f.__class__ for f in m2o_type_fields})
raise
from datetime import datetime
return ret
section_css = '.course-navigation .chapter:nth-of-type({0})'.format(sec_index + 1) self.q(css=section_css).first.click()
lookup_tag = inputtypes.registry.get_class_for_tag
if rolename == FORUM_ROLE_ADMINISTRATOR and not has_instructor_access: return HttpResponseBadRequest("Operation requires instructor access.")
for boolkey in ('running', 'writeback_running', 'congested'): if boolkey in result: result[boolkey] = bool(result[boolkey])
if object_domain is not None: protocol = request.scheme return http.HttpResponseRedirect('%s://%s%s' % (protocol, object_domain, absurl)) else: return http.HttpResponseRedirect(absurl)
display_height = get_option('display.height', silent=True)
if 'host' not in payload: payload.update({"host": self.host})
if not token or token['eauth'] not in self.opts['external_auth']: log.warning('Authentication failure of type "token" occurred.') return ''
msg = "Manager isn't available; AbstractBase1 is abstract" with self.assertRaisesMessage(AttributeError, msg): AbstractBase1.objects.all()
clf = ExtraTreesClassifier(n_estimators=500, max_features=1, criterion="entropy", random_state=0).fit(X, y)
#today = '' #today_fmt = '%B %d, %Y'
compress = 3
base_estimator = LinearSVC(random_state=0)
module.system.DEBUG = True
__remove_null_logging_handler()
assert X.ndim == 2 return T.nnet.softmax(X*self.P)
return abs(student_complex - instructor_complex) <= tolerance
result = grouped['A'].agg('std') expected = grouped['A'].std() assert_series_equal(result, expected)
mac_desktop.__salt__ = {}
tab_content = get_static_tab_contents(request, course, tab) self.assertIn(self.course.id.to_deprecated_string(), tab_content) self.assertIn('static_tab', tab_content)
draft_xblock = self.store.get_item( self.vertical_x1a, revision=ModuleStoreEnum.RevisionOption.draft_only ) self.assertIsNotNone(draft_xblock)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
'courseware.middleware.RedirectUnenrolledMiddleware',
n_samples, self.n_features_ = X.shape
from __future__ import absolute_import
self.client.login(username="jack", password="test") LinkedInAddToProfileConfiguration( company_identifier='0_mC_o2MizqdtZEmkVXjH4eYwMj4DnkCWrZP_D9', enabled=True ).save()
cls.url = reverse('instructor_dashboard', kwargs={'course_id': cls.course_key.to_deprecated_string()}) cls.email_link = '<a href="" data-section="send_email">Email</a>'
if len(types) == 1: return ret[types[0]] else: for key in ret.keys(): if key not in types: del ret[key]
tgt = ipaddress.ip_address(tgt)
nested_args = mapping.nest(theano_args) fixed_var_descr = self.cost.get_fixed_var_descr(model, nested_args) self.on_load_batch = fixed_var_descr.on_load_batch
with patch('capa.capa_problem.LoncapaProblem.grade_answers') as mock_grade: mock_grade.side_effect = exception_class(u"ȧƈƈḗƞŧḗḓ ŧḗẋŧ ƒǿř ŧḗşŧīƞɠ")
import logging
'example_certificate': True,
data_lst = np.array(data.data, dtype=object) data_lst = data_lst[indices] data.data = data_lst.tolist()
try: eauth = self.opts.get('external_auth', {}).get(token['eauth'], {})
from salt.states import layman
clf_random = ElasticNet(selection='invalid') assert_raises(ValueError, clf_random.fit, X, y)
nlev = _int64_cut_off(shape)
import salt.utils from salt.exceptions import CommandExecutionError, MinionError import salt.ext.six as six
return instr.encode('mbcs')
messy = MessyBachelorParty.objects.create( name='Bachelor party for Dave') messy.attendees.set([p4]) messy_parent = messy.bachelorparty_ptr
self.xblock_fields = {}
est.fit(X, y) t = np.asarray(T) assert_raises(ValueError, est.predict, t[:, 1:])
DEBUG = True
X_train += 1.
connection.close()
root = _gluster_xml('volume status {0}'.format(name)) if not _gluster_ok(root): return None
__func_alias__ = { 'list_': 'list', }
plt.title(model_title)
self.clear_autoreload_caches() filenames = set(autoreload.gen_filenames(only_new=True)) filenames_reference = set(autoreload.gen_filenames()) self.assertEqual(filenames, filenames_reference)
print public_key_str print private_key_str
add_instructor(new_lib.location.library_key, request.user, request.user)
USER_SETTINGS_CHANGED_EVENT_NAME = u'edx.user.settings.changed'
from __future__ import unicode_literals
PARTNER_SUPPORT_EMAIL = 'partner-support@example.com'
tab2_css = 'div.ui-tabs-panel#tab2' world.wait_for_visible(tab2_css)
from salt.modules import win_ip from salt.exceptions import CommandExecutionError, SaltInvocationError
from __future__ import unicode_literals
self.NOTE_ID_DOES_NOT_EXIST = 99999
self.frame.to_excel(path, 'Sheet1') recons = read_excel(path, index_col=0) tm.assert_frame_equal(self.frame, recons)
ipaddr.IPNetwork(address)
self.assertTrue(certificate_generation_history.exists())
buf = buf[offset:offset+size+1][:-1] data = np.ndarray(shape, dtype, buf, order=order) data.fill(0) return data
for vertical in verticals: self.assertEqual(course.xqa_key, vertical.xqa_key) self.assertEqual(course.start, vertical.start)
with tm.assert_produces_warning(): sql.to_sql(df, "test_frame3_legacy", self.conn, flavor="sqlite", index=False)
SplitTestFields.build_partition_values(self.user_partitions, self.get_selected_partition())
return column_or_1d(y, warn=True)
from __future__ import absolute_import import os import os.path import time import logging import pprint import base64 import salt.cache import salt.config as config import salt.utils.cloud from salt.exceptions import SaltCloudSystemExit
self.distribution.salt_installing_m2crypto_windows = True self.run_command('install-m2crypto-windows') self.distribution.salt_installing_m2crypto_windows = None
DEFAULT_REASON = ugettext_noop("UNKNOWN REASON")
return False
if db_exists(name, **connection_args): log.info('DB \'{0}\' already exists'.format(name)) return False
return None
df = orig.copy() df.set_value("j", "cats", "b") tm.assert_frame_equal(df, exp_single_cats_value)
task_folder = task_service.GetFolder(location)
expected = DataFrame(columns=['foo'], index=pd.Index( [], dtype='int64'))
import logging
apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
'range_server': str,
from shoppingcart.processors.CyberSource2 import processor_hash
with super(ForumFormDiscussionUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
response.resolver_match = SimpleLazyObject(lambda: resolve(request['PATH_INFO']))
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
module.system.render_template = Mock(return_value="<div>Test Template HTML</div>")
previous_offset = None
if position is not None: try: position = int(position) except (ValueError, TypeError): log.exception('Non-integer %r passed as position.', position) position = None
IDP = 'https://idp.stanford.edu/' REMOTE_USER = 'test_user@stanford.edu'
html_with_inline_css = pynliner.fromString('<style>' + css_content + '</style>' + html_without_css) return html_with_inline_css
self.assertFalse(glusterfs.delete_volume('Newvolume1', False)) self.assertFalse(mock_run.called) self.assertFalse(mock_stop_volume.called)
import json import logging
DATE_FORMAT = 'j F Y' TIME_FORMAT = 'G:i' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'd.m.Y'
'notification_prefs',
rval = X.copy()
context['ask_for_fullname'] = eamap.external_name.strip() == ''
while k < maxiter: fgrad, fhess_p = grad_hess(xk, *args)
rs.mean() getattr(rs, attr)
CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] ).install()
self.assertFalse(CourseEnrollment.is_enrolled(self.user, self.course.id))
gen_hyper_keys(minion_id)
expected = left_f(s_nat, Timestamp('nat')) result = right_f(Timestamp('nat'), s_nat) tm.assert_series_equal(result, expected)
X -= X.mean(axis=0) y -= y.mean()
def frombuffer_empty(buf, dtype): if len(buf) == 0: return np.empty(0, dtype=dtype) else: return np.frombuffer(buf, dtype=dtype)
self.test_loader._top_level_dir = None
res_df = df.loc["j":"k", :] tm.assert_frame_equal(res_df, exp_df) self.assertTrue(com.is_categorical_dtype(res_df["cats"]))
self.assertIn('sleep_service: started', ret) self.assertIn('sleep_service2: started', ret)
for logger in loggers: logger.setLevel(logging.NOTSET) logger.removeHandler(import_log_handler)
with ensure_clean_store(self.path) as store:
request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO["username"]) self.assertEqual(request["parameters"]["user_mailing_address"], "")
dbkey['run'] = location.run content_id = unicode(location.for_branch(None))
self.publish(block_list_parents_to_publish)
self.white_label_course = CourseFactory.create() self.white_label_course_mode = CourseModeFactory.create( course_id=self.white_label_course.id, mode_slug=CourseMode.HONOR, min_price=10, suggested_prices='10', )
self.presence_events = True
values = Series([u('a_b_c'), u('c_d_e'), np.nan, u('f_g_h')])
if proto == ISQLQuote: return self else: raise Exception('Error implementing psycopg2 protocol. Is psycopg2 installed?')
fd_ = []
if not api_enabled(request, course_key): log.debug('Notes are disabled for course: {0}'.format(course_id)) raise Http404
self.assertIsNone(annotated_books.query.alias_map["aggregation_book"].join_type) self.assertIsNone(excluded_books.query.alias_map["aggregation_book"].join_type)
result3 = func(self.panel, 0) self.assert_numpy_array_equal(result3.values, func(self.panel.values, 0))
if nentries == 1: index = Index(tuples[0], name=names[0]) else: index = MultiIndex.from_tuples(tuples, names=names) return index
c2pread, c2pwrite = CreatePipe(inherit_read=False, inherit_write=True) errread, errwrite = CreatePipe(inherit_read=False, inherit_write=True)
if ext not in self.suffix_map:
coef_grads, intercept_grads = self._compute_loss_grad( last, n_samples, activations, deltas, coef_grads, intercept_grads)
self.update({})
result = normalize_date(result)
conn_args = {} for arg in ['host', 'port', 'db', 'password']: if arg in connection_args: conn_args[arg] = connection_args[arg]
s = Series(date_range('20130101', periods=5, tz='US/Eastern'), name='xxx') for prop in ok_for_dt:
import logging import os
fpr, tpr, thresholds = roc_curve(y_true, y_score, drop_intermediate=False) assert_equal(thresholds.size, np.unique(np.round(thresholds, 2)).size)
if lookup_type in ('iexact', 'icontains', 'istartswith', 'iendswith'): lookup = 'UPPER(%s)' % lookup
list_staff_master_course = list_with_level(self.course, 'staff') list_instructor_master_course = list_with_level(self.course, 'instructor')
target = (iris.target > 0).astype(np.intp) target = np.array(["setosa", "not-setosa"])[target]
global __AccessKeyId__, __SecretAccessKey__, __Token__, __Expiration__
assert_greater(np.abs(stable_var(A) - one_pass_var(A)).max(), tol)
basedirs = _normalize_basedir(basedir) repos = list_repos(basedirs)
import salt.utils
fields['advertised_start'] = None
result = frame.pivot(columns='columns')
proba[(1.0 < proba) & (proba <= 1.0 + 1e-5)] = 1.0
student_answers = self.lcp.student_answers answer_ids = student_answers.keys()
csv_file = open(path, 'r')
self._build_data_specs()
use_distinct = use_distinct or lookup_needs_distinct(self.lookup_opts, field_path)
assert_array_equal(est.oob_improvement_[-10:] == 0.0, np.zeros(10, dtype=np.bool))
commit = False current_rules = __salt__['firewall.get_rule'](name) if not current_rules: commit = True ret['changes'] = {'new rule': name}
process_option_funcs = [] for option_key in options.__dict__: process_option_func = getattr( self, 'process_{0}'.format(option_key), None ) if process_option_func is not None: process_option_funcs.append(process_option_func)
return -1
from salt.states import cmd
rerun_state = CourseRerunState.objects.update_state( course_key=self.course.id, new_state=state, allow_not_found=True ) CourseRerunState.objects.update_should_display( entry_id=rerun_state.id, user=UserFactory(), should_display=should_display )
config = sconfig.master_config('/etc/salt/master') self.assertEqual(config['log_file'], env_fpath) os.environ.clear() os.environ.update(original_environ)
try: import certifi HAS_CERTIFI = True except ImportError: HAS_CERTIFI = False
if not len(values) and columns is not None and len(columns): values = np.empty((0, 1), dtype=object)
new_self = self.__class__(self.obj, self.name)
class EscapingForm(Form): special_name = CharField(label="<em>Special</em> Field") special_safe_name = CharField(label=mark_safe("<em>Special</em> Field"))
'USE_CUSTOM_THEME': False,
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
self._verify_exam_data(sequence, expected_active)
from pandas.compat import range
visible_reqs = api.get_credit_requirements(self.course_key) self.assertEqual(len(visible_reqs), 1) self.assertEqual(visible_reqs[0]["namespace"], "grade")
if task_progress.attempted % status_interval == 0: task_progress.update_task_state(extra_meta=current_step) task_progress.attempted += 1
HAS_PWD = False
('/%E2%99%A5%E2%99%A5/', '/♥♥/'), ('/%E2%99%A5%E2%99%A5/?utf8=%E2%9C%93', '/♥♥/?utf8=✓'),
try: result = np.empty(len(values), dtype=object) result[:] = values except ValueError: result[:] = [tuple(x) for x in values]
dive.save() self.assertEqual(dive._state.db, 'default')
self.create_reverification_xblock()
minor_labels = np.repeat(np.arange(len(frame.columns)), lengths)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
if not os.path.exists(device): msg = "Device {0} doesn't exist!" raise CommandExecutionError(msg.format(device))
return False
self._first_chunk = False
list_escalation_policies = salt.utils.alias_function(list_policies, 'list_escalation_policies')
self.update_structure(asset_key.course_key, new_structure)
__virtualname__ = 'sqlite'
print "Failed with load_factor of {}".format(load_factor)
with self.assertRaises(Article.DoesNotExist): Article.objects.latest()
TASK_LOG.info(u'%s, Task type: %s, Finalizing grade task', task_info_string, action_name) return task_progress.update_task_state(extra_meta=current_step)
Z, (pi, W_sr, L, b, a) = \ self._posterior_mode(K, return_temporaries=True)
fl = mlp_composite.layers[0]
self.assertIn('display_course_number: ""', response.content)
exp[2] = 5 assert_frame_equal(tmp, exp)
ts = Timestamp('2000-01-01')
self.lc_block = store.get_item(self.lc_block.location) self.problem_in_course = store.get_item(self.problem_in_course.location)
self.assertIn( 'Failed to setup the Syslog logging handler', '\n'.join(ret[1]) ) self.assertEqual(ret[2], 2)
_check_plot_works(df.hist, figsize=(8, 10))
theme_root = settings.ENV_ROOT / "themes" / settings.THEME_NAME
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
'track', 'eventtracking.django.apps.EventTrackingConfig',
queuestate = {'key': queuekey, 'time': qtime, }
rows=None, cols=None,
'lms.djangoapps.verify_student',
process.start()
import salt.ext.six as six try: import zmq HAS_ZMQ = True except ImportError: HAS_ZMQ = False
language_url = request.get_full_path(force_append_slash=path_needs_slash).replace( script_prefix, '%s%s/' % (script_prefix, language), 1 ) return self.response_redirect_class(language_url)
from __future__ import absolute_import
return CourseDetails.fetch(course_key)
DATE_FORMAT = 'j. F Y' TIME_FORMAT = 'H:i' YEAR_MONTH_FORMAT = 'F Y' MONTH_DAY_FORMAT = 'j. F' SHORT_DATE_FORMAT = 'j.n.Y'
raise RuntimeError( 'Please set {0}._default_logging_logfile_'.format( self.__class__.__name__ ) )
from __future__ import unicode_literals
batch_names = ['monitoring_%s' % s for s in self._flat_data_specs[1]] theano_args = self._flat_data_specs[0].make_theano_batch(batch_names)
non_editable_fields.extend([LibraryContentFields.mode, LibraryContentFields.source_library_version]) return non_editable_fields
from __future__ import unicode_literals
with urlopen(url) as response: data = response.read()
self.assertFalse(BulkEmailFlag.feature_enabled(course_id))
rng.join(idx, how='outer')
initial_file = os.path.join(migration_dir, "0001_initial.py") self.assertTrue(os.path.exists(initial_file))
for x in ['mode', 'path', 'handle', 'complib']: getattr(store, "_%s" % x)
original = pd.concat([original[col].astype('category') for col in original], axis=1)
node = _guess_node_id(node) apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
block_wrappers.append(partial( replace_static_urls, getattr(descriptor, 'data_dir', None), course_id=course_id, static_asset_path=static_asset_path or descriptor.static_asset_path ))
self._create_courses_and_enrollments( ("MyOrg", True), ("myorg", True) )
pass
'session_inactivity_timeout.middleware.SessionInactivityTimeout',
from __future__ import unicode_literals
for stream in (StringIO(), HttpResponse()): serializers.serialize(self.serializer_name, [obj], indent=2, stream=stream)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, call, mock_open, NO_MOCK, NO_MOCK_REASON, MagicMock
add_action(task_definition=task_definition, **kwargs)
def run_autoencoder( self,
def geometry_columns(self): raise NotImplementedError('Subclasses of BaseSpatialOperations must provide a geometry_columns() method.')
print "running action..." action(eobjs.email)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]] inc = np.r_[1, val[1:] != val[:-1]]
resource_value = resource_object['service_key'] if '@' in resource_value: resource_value = resource_value[0:resource_value.find('@')]
if not is_dictlike(to_replace) and not is_dictlike(regex): to_replace = [to_replace]
class First(models.Model): second = models.IntegerField()
estimator_error = (sample_weight * error_vect).sum()
kwargs['name'] = repo
result = f.clean('13.30') self.assertEqual(result, time(13, 30, 0))
self.aes = self._layers
X = iris.data
import salt.output import salt.utils.http
return os.path.basename(_bcsys(dev, 'cache'))
if not self.is_internal_request(domain, referer) and '?' in referer: return True
col_services = obj_sm.Services
return_stdout = kwargs.pop('return_stdout', False)
third_party_provider = None running_pipeline = None if third_party_auth.is_enabled() and pipeline.running(request): running_pipeline = pipeline.get(request) third_party_provider = provider.Registry.get_from_pipeline(running_pipeline)
from __future__ import absolute_import import datetime
__virtualname__ = 'service'
SessionMiddleware().process_request(req) CsrfViewMiddleware().process_view(req, login_view, (), {})
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
n_samples, n_features = 6, 5 y = rng.randn(n_samples) X = rng.randn(n_samples, n_features)
d = dr + 1.0j * di
from __future__ import absolute_import import logging import json
from __future__ import unicode_literals
v = v.tostring() return ExtType(0, zlib.compress(v))
self.navigate_to_video() self.video.show_captions()
from __future__ import division, print_function
X -= X.min() - .1 this_X = NotAnArray(X) this_y = NotAnArray(np.asarray(y)) _check_transformer(name, Transformer, this_X, this_y)
handles_files = True
clf = GradientBoostingClassifier(n_estimators=10, random_state=1) clf.fit(X, y)
seed = module.seed self.assertTrue(seed is not None)
is_increasing = assert_no_warnings(check_increasing, x, y) assert_false(is_increasing)
MAX_SCREEN_LIST_LENGTH = 250
from urllib2 import Request, build_opener
ret['result'] = True ret['comment'] = 'property {0} is absent'.format(name)
url( r'^courses/{}/instructor$'.format( settings.COURSE_ID_PATTERN, ), 'instructor.views.instructor_dashboard.instructor_dashboard_2', name='instructor_dashboard', ),
from __future__ import absolute_import import os import random import string
if driver == 'linode' and profile_key.get('clonefrom', False): non_image_drivers.append('linode') non_size_drivers.append('linode')
if self._is_single_block:
from __future__ import absolute_import
from __future__ import unicode_literals
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
from __future__ import unicode_literals
PASSWORD_HASHERS = [ 'django.contrib.auth.hashers.MD5PasswordHasher', ]
try: gc.collect(2) if not gc.get_referents(self.is_copy()): self.is_copy = None return except: pass
try:
rs = self.dtc.convert(np_datetime64_compat('2012-01-01'), None, None) self.assertEqual(rs, xp)
from __future__ import absolute_import
self.assertContains(response, "\n0 persons\n") self.assertNotContains(response, "Guido")
etcd.host: 127.0.0.1 etcd.port: 4001
from salt.states import augeas
TEST_ROOT = path("test_root") STATIC_ROOT = TEST_ROOT / "staticfiles"
from salttesting import skipIf from salttesting.helpers import ( ensure_in_syspath, requires_network, )
import os
course_modules_json = json.dumps(valid_input.get('course_modules'))
TEST_DATABASE_PREFIX = 'test_'
username_or_email = row.get('email') or row.get('username') cohort_name = row.get('cohort') or '' task_progress.attempted += 1
section_description = { 'section_descriptor': section, 'xmoduledescriptors': [child for child in xmoduledescriptors if child.has_score] }
if usage_info.has_staff_access: return
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
7: np.dtype('int64'), 'category': 'category' }
import salt.utils import salt.utils.itertools from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.modules.mac_user import _dscl, _flush_dscl_cache
vm_['instance_id'] = data.id
is_default = True
self._donate(self.DONATION_AMOUNT, course_id=self.course.id)
response.templates = data.get("templates", []) response.context = data.get("context")
sum_square_grad = sharedX(param.get_value() * 0.)
LogoutPage(self.browser).visit() self._auto_auth("STAFF_TESTER", "staff101@example.com", True)
depths = [_find_longest_prefix_match(tree, tree_queries, MAX_HASH_SIZE, self._left_mask, self._right_mask) for tree, tree_queries in zip(self.trees_, np.rollaxis(bin_queries, 1))]
from __future__ import unicode_literals
self.assertEqual(Article.objects.all()[0], self.a4)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.assertEqual(auth_settings._SOCIAL_AUTH_LOGIN_REDIRECT_URL, response.get('Location'))
args.date = parse_datestring(args.date).date()
with self.assertRaises(Exception) as cm: admin.autodiscover() self.assertEqual(str(cm.exception), "Bad admin module")
if isinstance(fill_value, np.ndarray): if issubclass(fill_value.dtype.type, (np.datetime64, np.timedelta64)): fill_value = tslib.iNaT else:
ret['result'] = True ret['comment'] = 'image {0} is present'.format(name)
mid = int(numpy.floor(kernel_shape / 2.)) centered_X = X - convout[:, mid:-mid, mid:-mid, :]
from __future__ import absolute_import
import salt.utils
from __future__ import absolute_import import logging import json import yaml
replication_item = ('Replication', 'put_replication', _describe.get('Replication', {}).get('ReplicationConfiguration'), _compare_replication, Replication, 'delete_replication')
from __future__ import absolute_import
__virtualname__ = 'pprint'
import salt.utils.compat import salt.utils.odict as odict import salt.utils.boto
'contentserver',
function_names = {}
continue
'address': __ipv4_quad, 'netmask': __ipv4_netmask, 'broadcast': __ipv4_quad, 'metric': __int,
h.update(r['Salt']) r['Hash'] = h.hexdigest()
from __future__ import absolute_import import logging import time
for df in [default_frame, self.mixed_frame, self.mixed_float, self.mixed_int]: cond = df > 0 _check_get(df, cond)
from __future__ import absolute_import
if dataset in ["digits", "boston"]: n_samples = X.shape[0] // 5 X = X[:n_samples] X_sparse = X_sparse[:n_samples] y = y[:n_samples]
try: data = data.astype('float64') result = True except: pass
if self.isalive(): self.wait()
s = Series([0, 1])
result = df.ix[1:2] expected = df.iloc[0:2] assert_frame_equal(result, expected)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
git_describe = describe_out
if address_predefined: os.environ['DJANGO_LIVE_TEST_SERVER_ADDRESS'] = old_address else: del os.environ['DJANGO_LIVE_TEST_SERVER_ADDRESS']
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
'ADVANCED_SECURITY': True,
self.assert_grade(problem, "Other String", "incorrect") self.assert_grade(problem, "second", "incorrect")
if not getattr(cls, self.attname, None): setattr(cls, self.attname, DeferredAttribute(self.attname, cls))
from __future__ import absolute_import
_append_list(serv, 'minions', minion) _append_list(serv, 'jids', jid)
for descriptor in items:
self.assertEqual(len(f.choices), 2)
self.assertEqual(formset.is_valid(), False) self.assertEqual(Poem.objects.count(), 1)
CertificateGenerationConfiguration(enabled=True).save()
pd_result = Parallel(n_jobs=n_jobs, verbose=verbose)( delayed(partial_dependence)(gbrt, fxs, X=X, grid_resolution=grid_resolution, percentiles=percentiles) for fxs in features)
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21")
response = other_view(request, '7') self.assertEqual(response.content, b'Hello World 7')
args_dict = dict(zip(compat_args, args))
t = field.type
set_user_preference(user, key, value) pref = UserPreference.get_value(user, key) self.assertEqual(pref, value)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
python_2_unicode_compatible = six.python_2_unicode_compatible
from __future__ import absolute_import import integration
scalar = Series(0.5) self.assertNotIsInstance(scalar, float)
grid = np.random.rand(10, 2, 1) assert_raises(ValueError, partial_dependence, clf, [0], grid=grid)
def f(): s[Series([], dtype=bool)]
from __future__ import unicode_literals
with patch('xmodule.capa_module.CapaModule.closed') as mock_closed: mock_closed.return_value = True
action_failed = False selected = request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)
if 'minimum_grade_credit' in request.json: update_credit_course_requirements.delay(unicode(course_key))
result = grouped.apply(how, *args, **kwargs)
else: return func(self, *args, **kwargs)
result = s.resample('2200L').mean() self.assertEqual(result.index[-1], pd.Timestamp('2014-10-15 23:00:02.000'))
self.video.wait_for_state('pause')
result = df.loc['2016-01-02 12'] expected = df.iloc[9:12] tm.assert_frame_equal(result, expected)
fig, axs = plot_partial_dependence(clf, boston.data, ['CRIM', 'ZN', ('CRIM', 'ZN')], grid_resolution=grid_resolution, feature_names=boston.feature_names)
module = CapaFactory.create(attempts=attempts - 2, max_attempts=attempts) self.assertEqual(module.check_button_name(), "Check")
if requesting_user.username == target_username: return True elif not target_username: raise TypeError("target_username must be specified") else: staff = GlobalStaff() return staff.has_user(requesting_user)
X = random_state.rand(n_samples * n_components) X = X.reshape((n_samples, n_components))
new_axis = self.items.insert(loc, item)
__virtualname__ = 'pkg'
pred = lambda i: not _int64_overflow_possible(shape[:i]) nlev = next(filter(pred, range(len(shape), 0, -1)))
self.clear_user_answers(user) SurveyAnswer.save_answers(self, user, answers, course_key)
user_list[0].course_groups.remove(*cohort_list) assert_events("removed", user_list[:1], cohort_list) mock_tracker.reset_mock()
selector = _factor_indexer(shape[1:], labels) mask = np.zeros(np.prod(shape), dtype=bool) mask.put(selector, True)
#default_role = None
salt '*' vsphere.get_firewall_status my.esxi.host root bad-password
return (matplotlib.__version__ >= LooseVersion('1.3.1') or matplotlib.__version__[0] == '0')
score[pred_or_true == 0.0] = 1.0
int_ts = Series(np.ones(10, dtype=int), index=lrange(10)) self.assertAlmostEqual(np.median(int_ts), int_ts.median())
LimitedFavoriteDrinkFormSet = formset_factory(FavoriteDrinkForm, extra=3, max_num=0) formset = LimitedFavoriteDrinkFormSet() form_output = []
pkg_params = {name: version_num}
N_per_side = 5 Npts = N_per_side ** 2 n_neighbors = Npts - 1
self.navigate_to_video() self.video.show_closed_captions()
COMPLEX_OVERRIDE_SETTINGS = {'DATABASES'}
mock_user = MagicMock() mock_user.is_authenticated.return_value = False self.assertEqual(views.user_groups(mock_user), [])
fulfill_course_milestone(pre_requisite_course.id, user) self.assertTrue(access._has_access_course(user, 'view_courseware_with_prerequisites', course))
if isinstance(key, (list, tuple)): return self.ix[key]
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from salt.modules import deb_apache deb_apache.__grains__ = {} deb_apache.__salt__ = {} deb_apache.__context__ = {}
cohort_management_section.wait_for_ajax() cohort_management_section.wait_for_page() return cohort_management_section
if iface_type not in ('slave', 'source'): return __salt__['cmd.run'](['ifup', iface]) return None
ret = _set_tz(ret, getattr(attrs, 'tz', None), coerce=True)
from salt.modules import dpkg
if self.target_id: assert len(self.xml_module_store.modules) == 1
hidden_layer_sizes = self.hidden_layer_sizes if not hasattr(hidden_layer_sizes, "__iter__"): hidden_layer_sizes = [hidden_layer_sizes] hidden_layer_sizes = list(hidden_layer_sizes)
'ENABLE_PREREQUISITE_COURSES': False,
CMS_SEGMENT_KEY = None
former_encoding = sys.getdefaultencoding()
__virtualname__ = 'sentry'
files = [k for k in s3_meta if 'Key' in k]
'openedx.core.djangoapps.common_views',
with self.assertRaisesMessage(AttributeError, 'ImmutableList object is immutable.'): d.sort()
comp_ids, obs_ids = _compress_group_index(out, sort=sort)
if isinstance(res, Series): if res.index.is_(obj.index): group.T.values[:] = res else: group.values[:] = res
factors = list(r['factor'](obj)) level = list(r['levels'](obj)) result = [level[index-1] for index in factors] return result
def get_chunk(self, size=None): if size is None: size = self.chunksize return self.read(nrows=size)
xml = renderer.get_html() context = extract_context(xml) self.assertEqual(context, {'id': 'solution_12'})
self.assertRaises(Exception, self.panel.minor_xs, 'E')
state['new'] = __salt__['lxc.state'](name, path=path)
return False
return []
'DISPLAY_ANALYTICS_ENROLLMENTS': True,
ForestClassifier = FOREST_CLASSIFIERS[name]
response = self.client.get('/login_protected_view_custom_redirect/') self.assertRedirects(response, '/accounts/login/?redirect_to=/login_protected_view_custom_redirect/')
ts_from_string = Timestamp('now') ts_from_method = Timestamp.now() ts_datetime = datetime.datetime.now()
instructor_task = _reserve_task(course_key, task_type, task_key, task_input, request.user)
subnet = yaml_data['minion'][0]
VerificationDeadline.set_deadline(self.id, self.verification_deadline, is_explicit=True)
from xmodule.modulestore.mongo.draft import DraftModuleStore
paginator = pagination_cls() page = paginator.paginate_queryset(queryset, request)
import salt.utils
y = y[:m]
__virtualname__ = 'esxi'
if ptr is None or isinstance(ptr, self.ptr_type): self._ptr = ptr else: raise TypeError('Incompatible pointer type')
x = sp.arange(6).reshape(2, 3) datasets.mldata.urlopen = mock_mldata_urlopen({dataname: {'x': x}})
continue
D = generator.randn(n_features, n_components) D /= np.sqrt(np.sum((D ** 2), axis=0))
empty = DataFrame() self.assertIsNone(empty.last_valid_index()) self.assertIsNone(empty.first_valid_index())
from __future__ import absolute_import
_test_vector_resize(tbl(), vect(), dtype, 0) _test_vector_resize(tbl(), vect(), dtype, 10)
import salt.loader
task_folder = task_service.GetFolder(location) task = task_folder.GetTask(name)
p.mugshot.save("mug", self.file2) self.check_dimensions(p, 8, 4)
if instance in vmconfig['state'] and vmconfig['state'][instance] is not None: for state_cfg in vmconfig['state'][instance]: if vmconfig_type['instance'][instance] not in state_cfg: continue
self.publish_unit_and_verify_groups_in_lms( courseware_page, [u'Group A', u'Group B', u'Group ID 2 (inactive)'], publish=False )
from __future__ import absolute_import import logging
assert_series_equal(actual, expected)
grid_dimension = [0, ]
self.test_datefieldlistfilter()
try: default_group = grp.getgrgid(pwd.getpwnam(user).pw_gid).gr_name ugroups.remove(default_group) except KeyError: pass
resp = self.client.get(self.list_url_master_course, {}, HTTP_AUTHORIZATION=self.auth)
q = Tag.objects.filter(parent__parent__isnull=False)
score_css = 'div.problem-progress' expected_text = '({})'.format(score) world.wait_for(lambda _: world.css_has_text(score_css, expected_text))
wp = Panel(self.panel._data) self.assertIs(wp._data, self.panel._data)
return type(self._value)
from salt.modules import postfix
desc = ET.SubElement(content, 'description') desc.text = config.get_cloud_config_value( 'desc', vm_, __opts__, default=vm_['name'], search_global=False )
probas_pred = probas_pred[:, 1]
from __future__ import absolute_import
assert_false(hasattr(BaggingClassifier(base).fit(X, y), 'decision_function'))
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
log.debug( 'The \'{0}\' cloud driver defined under \'{1}\' provider ' 'alias is unable to get the locations information'.format( driver, alias ) ) continue
for b in old_blocks: found = False for nb in new_blocks: if (b.values == nb.values).all(): found = True break self.assertTrue(found)
if exc.errno != errno.EINTR: raise break
predictions = np.array([ est.predict(X) for est in self.estimators_[:limit]]).T
try: pattern = to_replace.pattern except AttributeError: pattern = to_replace
if is_panel:
import logging from time import strftime, strptime, gmtime
return True
text = _match.group(0) break
import salt.utils import salt.utils.decorators as decorators
if os.path.isfile(destdir): os.remove(destdir) os.makedirs(destdir)
lm = LayerMapping(MultiPoint3D, vrt_file, mpoint_mapping, transform=False) lm.save() self.assertEqual(3, MultiPoint3D.objects.count())
self.assertEqual(resp.status_code, 200)
from __future__ import absolute_import import os import sys import posixpath import ntpath import platform import tempfile
VERIFY_STATUS_NEED_TO_VERIFY = "verify_need_to_verify" VERIFY_STATUS_SUBMITTED = "verify_submitted" VERIFY_STATUS_APPROVED = "verify_approved" VERIFY_STATUS_MISSED_DEADLINE = "verify_missed_deadline" VERIFY_STATUS_NEED_TO_REVERIFY = "verify_need_to_reverify"
index = int(grader.get('id', len(descriptor.raw_grader))) grader = CourseGradingModel.parse_grader(grader)
return comdat['stderr']
self.assertListEqual( self.get_item_from_modulestore(self.seq2_usage_key).children, [] )
bin_queries = np.asarray([hasher.transform(X)[:, 0] for hasher in self.hash_functions_]) bin_queries = np.rollaxis(bin_queries, 1)
post_data = {"name": "First Gadget"} response = self.client.post(reverse('admin:admin_views_gadget_add'), post_data)
if app_list_value is not None: if model not in app_list_value: app_list_value.append(model)
return True
repr(df)
example_messages = [str(i) for i in range(5)] set_cookie_data(cookie_storage, [CookieStorage.not_finished], encode_empty=True) set_session_data(session_storage, example_messages)
if val == val: nobs[lab, 0] += 1 sumx[lab, 0] += val
if not any(r for r in trusted_roots if fnmatch.fnmatch(trust_root, r)): log.error('non-trusted root') return False
self.assertEqual(str(ret['LIGHT_YELLOW']), str(ret['LIGHT_GRAY']))
else: with closing(_gen_open(f)) as f: actual_dtype, data, ind, indptr, labels, query = \ _load_svmlight_file(f, dtype, multilabel, zero_based, query_id)
self.localize = localize if self.localize: widget.is_localized = True
self.set_config(True) CourseOverviewImageSet.create_for_course(overview) self.assertTrue(hasattr(overview, 'image_set'))
self._auto_publish_no_children(item.location, item.location.category, user_id, **kwargs)
dists_m = [3553.30384972258, 1243.18391525602, 2186.15439472242]
if len(i8) and self.is_monotonic: if i8[-1] != tslib.iNaT: return self._box_func(i8[-1])
numtolerance_choices = {} binary_choices = {}
X = [[0], [0]] Y = [[1], [2]] D = paired_manhattan_distances(X, Y) assert_array_almost_equal(D, [1., 2.])
X = rng.random_sample((10, 3))
'environment': str,
continue
'max_open_files': int,
import salt.returners
test_locs([]) test_locs([0]) test_locs([1])
from __future__ import absolute_import
select = None
fancy = None
restore_asset_from_trashcan(unicode(asset_key))
return ret
from __future__ import absolute_import
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath ) ensure_in_syspath('../../')
expected = ns[ns > 60] result = store.select('ns', Term('foo>60')) tm.assert_series_equal(result, expected)
__func_alias__ = { 'list_': 'list' }
salt.utils.verify.check_path_traversal(self.opts['cachedir'], key_user, self.skip_perm_errors)
Z = Z.reshape(xx.shape) ax.contourf(xx, yy, Z, cmap=cm, alpha=.8)
self.assertIn(draft_html.location, public_vertical.children)
post_login_handler = _finish_auth_url(params) js_success_var = 'var nextUrl = "{}";'.format(post_login_handler) self.assertContains(response, js_success_var)
result = df.copy().sort_index(axis=1) expected = df.iloc[:, [0, 2, 1, 3]] assert_frame_equal(result, expected)
return False
log = logging.getLogger(__name__)
if item['item_copyright'] is not None: handler.addQuickElement("rights", item['item_copyright'])
self.dashboard_page.visit()
for username in ["", "a"]: params["username"] = username assert_username_error("Username must be minimum of two characters long")
self.assertIn( "No user with the provided email address exists.", self.login_page.wait_for_errors() )
import yaml import pprint import logging import urllib
ret = _default_runlevel()
orig2 = orig.ix[:, ['A', 'B', 'C']].copy()
n_iter_ = max(n_iter_) if n_iter_ >= max_iter and verbose > 0: warnings.warn("Liblinear failed to converge, increase " "the number of iterations.", ConvergenceWarning)
a = Series([], name='x') df = DataFrame(a) self.assertEqual(df.columns[0], 'x')
if self.negative_class_index is None: y = T.eq(y, self.positive_class_index)
for student in students[:3]: self.assertIn( GeneratedCertificate.certificate_for_student(student, self.course.id).status, CertificateStatuses.PASSED_STATUSES )
y_pred3 = clf.fit(X, y3).predict(X) assert_true(np.any(y_pred3 != y3), 'solver %s' % solver)
ret['changes'] = exc.info.get('changes', {}) ret['comment'] = exc.strerror_without_changes
first_request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO["username"])
SECRET_KEY = "very_secret_bok_choy_key"
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch )
df.resample('W-MON', closed='left', label='left').first()
import errno import logging
indices = np.empty(X.shape[0], dtype=np.intp) values = np.empty(X.shape[0]) values.fill(np.infty)
result = self.get_result(allow_cache_miss) self.verify_result_with_fallback_and_youtube(result)
cherrypy.request.lowstate = [data]
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True], credit_type='halves' )
config.delete() self.assertEqual(len(self.page.experiment_group_configurations), 1)
self.assertTrue(self.video.is_video_rendered('youtube'))
if isinstance(ds_input, six.string_types) and json_regex.match(ds_input): ds_input = json.loads(ds_input)
val_course_data = self.get_cached_val_data_for_course(video_profile_names, self.location.course_key) val_video_data = val_course_data.get(self.edx_video_id, {})
x_likelihood = numpy.sum((-energy_fn(1.0) + hq - log_z)[:batch_size0])
if not enable_contracts and not edx_args.contracts: contracts.disable_all()
return (v_prime * Q ** 2).sum(axis=-1)
from __future__ import absolute_import
STATICFILES_STORAGE = 'openedx.core.lib.django_require.staticstorage.OptimizedCachedRequireJsStorage'
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
t = hash_klass(len(uniques)) t.map_locations(com._ensure_object(uniques))
default=_("Blank Advanced Problem")
indexer = np.zeros_like(labels) _algos.group_shift_indexer(indexer, labels, ngroups, periods)
response.content = 'bar' self.assertEqual(response.content, b'bar')
FEATURES['LICENSING'] = True
method = '.' + method if how is not None else ''
mount_ignore_fs_keys = { 'ramfs': ['size'] }
pro = Book.objects.using('default').create(title="Pro Django", published=datetime.date(2008, 12, 16))
BULK_EMAIL_INFINITE_RETRY_CAP = 1000
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath ensure_in_syspath('../../')
CreditProvider.objects.create(provider_id=other_provider_id, enable_integration=True)
from __future__ import absolute_import from contextlib import closing import errno import logging import os import re import shutil import subprocess import tarfile import tempfile
self.conn2.rollback() self.conn2.close()
result = sql.read_sql_table('test_datetime', self.conn) tm.assert_frame_equal(result, df)
self.assertEqual(request.COOKIES['want'], force_str("café"))
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, mock_open, NO_MOCK, NO_MOCK_REASON )
processors = (template.engine.template_context_processors + self._processors) updates = {} for processor in processors: updates.update(processor(self.request)) self.dicts[self._processors_index] = updates
bin_path = bin_path.strip('"') if exe_args is not None: bin_path = '{0} {1}'.format(bin_path, exe_args)
ret = __salt__['k8s.folder_absent'](name, node, apiserver)
self.wait_for('body')
ans = True
MODULESTORE = convert_module_store_setting_if_needed(MODULESTORE)
module = CapaFactory.create(due=self.yesterday_str, done=True) self.assertFalse(module.should_show_save_button())
multioutput = None
def get_memmap_info(memmap): assert isinstance(memmap, numpy.memmap)
result = [_quantile(values, q * 100, axis=axis, **kw) for q in qs]
self.assertQuerysetEqual( Tag.objects.filter(id__in=Tag.objects.filter(id__in=[])), [] )
from __future__ import absolute_import from contextlib import contextmanager
resource_map = API_SETTINGS.get('RESOURCE_MAP', {}) resource_name = kwargs.pop('resource') resource_method = request.method resource = resource_map.get(resource_name)
qs = Person.objects.prefetch_related('houses__rooms', 'primary_house__occupants') [list(p.primary_house.occupants.all()) for p in qs]
data_types_reverse = DatabaseIntrospection.data_types_reverse.copy() data_types_reverse[FIELD_TYPE.GEOMETRY] = 'GeometryField'
def simple_dec(func): def wrapper(arg): return func("test:" + arg) return wraps(func)(wrapper)
cls.create_and_enroll_student( courses=[cls.test_course_1, cls.test_course_2], username='student_enrolled_both_courses_other_team' )
df = DataFrame({'foo': [0, 1], 'bar': [3, 4], 'val': np.random.randn(2)})
sql, _ = compiler.compile(value) placeholder = placeholder % sql
flags = libvirt.VIR_DOMAIN_VCPU_MAXIMUM if config: flags = flags | libvirt.VIR_DOMAIN_AFFECT_CONFIG
config.add_subpackage('tests')
cs = CourseStructure.objects.get(course_id=self.course.id) self.assertEqual(cs.structure_json, structure_json)
#epub_fix_images = False
if 'FEATURES' in ENV_TOKENS: del ENV_TOKENS['FEATURES']
with warnings.catch_warnings(record=True) as recorded_warnings: raise_warning() self.assertEqual( 'Deprecation Message!', str(recorded_warnings[0].message) )
my-minion: - esxi-1.example.com - esxi-2.example.com
ret['result'] = None ret['comment'] = "No changes"
if HAS_GEOMETRY_COLUMNS: self.assertGeometryColumnsCount(0)
image = Image.open(file) image.verify()
check_lti_popup(parent_window)
import salt.ext.six as six
exists_ce = is_active is not None and is_active full_name = user.profile.name
import salt.utils
from salt.modules import pw_group
self.f = tempfile.NamedTemporaryFile(delete=False) self.f.close()
__virtualname__ = 'sysctl'
self.create_random_units(False, conditional_loc)
if self.kind == 'timestamp': return super(PeriodIndexResampler, self)._upsample(method, limit=limit)
#log_level: debug
repr(df)
state_below=dbm.hidden_layers[-2].upward_state(H_hat[-1])))
class MockEstimator(object): def predict_proba(self, X): assert_array_equal(X.shape, probs.shape) return probs mock = MockEstimator()
ret['changes'] = exc.info.get('changes', {}) ret['comment'] = exc.strerror_without_changes
if self.is_captions_visible() != captions_new_state: self.click_player_button('transcript_button')
htmlhelp_basename = 'scikit-learndoc'
module = CapaFactory.create(due=self.yesterday_str, force_save_button="true", done=True) self.assertFalse(module.should_show_save_button())
cursor = self.connection.connection.cursor() try: return cursor.execute(sql, params).fetchone() finally: cursor.close()
self.assertEqual( len(CourseEnrollment.objects.filter(mode='honor', user_id__in=user_ids)), 0 )
from __future__ import absolute_import import os import json import logging import logging.handlers import datetime
geodetic = f.geodetic(self.connection) geography = f.geography
rval = transform(raw_batch)
try: face = sp.face(gray=True) except AttributeError: from scipy import misc face = misc.face(gray=True)
tm.assert_dict_equal(offsets, read_pickle(pickle_path))
clustering = AgglomerativeClustering( n_clusters=10, connectivity=connectivity.toarray(), affinity="manhattan", linkage="ward") assert_raises(ValueError, clustering.fit, X)
DATE_INPUT_FORMATS = [
html_logo = 'logos/scikit-learn-logo-small.png'
y = 0.5 * X.ravel() + rng.randn(n_samples, 1).ravel()
return [ url(r'^extra/$', self.extra, name='cable_extra'), ]
__salt__
self.created_by = created_by self.created_by_email = created_by_email self.created_on = created_on or now self.fields = fields or {}
weights = rand_data.weights g = GaussianMixture(weights_init=weights, n_components=n_components) g.fit(X) assert_array_equal(weights, g.weights_init)
GRADES_UPDATED = Signal(providing_args=["username", "grade_summary", "course_key", "deadline"])
self.assertFalse(AllFieldsModel._meta.get_field('m2m').null) self.assertTrue(AllFieldsModel._meta.get_field('reverse2').null)
mongo_course = self.store.get_course(self.course_locations[self.MONGO_COURSEID].course_key) self.assertEqual(len(mongo_course.children), 1)
registration.activate()
httpretty.register_uri( httpretty.POST, "{}/baskets/".format(TEST_API_URL), body=json.dumps({'payment_data': expected_payment_data}), content_type="application/json", )
courses_list[course_key] = course
warnings.warn(premature, RuntimeWarning, stacklevel=3) break
from __future__ import absolute_import
from salt.runners import winrepo from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON
FEATURES['AUTOMATIC_AUTH_FOR_TESTING'] = True
GitBase.__init__(self, opts, valid_providers=('gitpython', 'pygit2'), cache_root=winrepo_dir)
self._country = reader self._country_file = path
import salt.fileserver import salt.utils import salt.utils.url
self.name = app_name
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, Mock, NO_MOCK, NO_MOCK_REASON )
Number.objects.filter(pk=self.n.pk).update(integer=640 / F('integer'), float=42.7 / F('float'))
with open(self.f.name, 'w') as f: f.write("foo/hello/test.py:304:15: E203 whitespace before ':'")
self.data = OrderedDict()
X = 3 * diabetes.data
monitoring_dataset = DenseDesignMatrix(X=X)
for key, value in kwargs.items(): if key in old: if value == 'max': value = old['{0}_max'.format(key)]
__virtualname__ = 'zfs'
for covariance_type in ["full", "tied", "diag", "spherical"]: yield check_positive_definite_covars, covariance_type
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
cea = CourseEnrollmentAllowed(email='robot-allowed@robot.org', course_id=self.course.id) cea.save() self.allowed_email = 'robot-allowed@robot.org'
container_ref = None if datacenter: datacenter_ref = salt.utils.vmware.get_mor_by_property(_get_si(), vim.Datacenter, datacenter) container_ref = datacenter_ref if datacenter_ref else None
from salt.modules import sensors
import salt.utils
df2 = self.read_csv(StringIO(data), index_col=[1, 0], parse_dates=True) self.assertIsInstance(df2.index.levels[1][0], (datetime, np.datetime64, Timestamp))
project = u('scikit-learn') copyright = u('2010 - 2016, scikit-learn developers (BSD License)')
pass
if host: self.host = host else: self.host = socket.gethostname()
credit_state = self.service.get_credit_state(self.user.id, self.course.id) self.assertEqual(credit_state['credit_requirement_status'][0]['status'], None)
self.assertEqual(modal.release_date, u'1/1/1970')
_ = lambda text: text
c = 0.03 X_c = (X + c)[:, np.newaxis, :] Y_c = (Y + c)[np.newaxis, :, :]
result = df.sort_values(by=['grade']) expected = df.iloc[[1, 2, 5, 0, 3, 4]] tm.assert_frame_equal(result, expected)
df.ix['c', 'timestamp'] = nan self.assertTrue(com.isnull(df.ix['c', 'timestamp']))
code = input(prompt)
topics_data = self._serialize_and_paginate( TopicsPagination, topics, request, BulkTeamCountTopicSerializer, {'course_id': course.id}, ) topics_data["sort_order"] = sort_order
p = DataFrame({'first': [3, 4, 5, 8], 'second': [0, 0, 0, 3]}) result = p / p
return False
iris = datasets.load_iris() X = iris.data y = iris.target
currency = models.CharField(default="usd", max_length=8)
past_due_date = CapaFactory.create(showanswer='past_due', max_attempts="1", attempts="0", due=self.yesterday_str) self.assertTrue(past_due_date.answer_available())
n_estimators, n_classes = self.estimators_.shape leaves = np.zeros((X.shape[0], n_estimators, n_classes))
break
return getattr(super(BulkAssertionTest, self), 'assert' + assertion_name)(*args, **kwargs)
from __future__ import absolute_import, print_function import os import operator import re import subprocess import tempfile import time import logging import uuid
stack_data.append({ 'color': percent, 'value': count_grade, 'tooltip': tooltip, 'module_url': child.location.to_deprecated_string(), })
'syndic_jid_forward_cache_hwm': int,
if resolver.urlconf_module is None: six.reraise(*exc_info) callback, param_dict = resolver.resolve_error_handler(500) return callback(request, **param_dict)
project = 'Pylearn2' copyright = '2011-2015, LISA lab'
img = imread(file_path) if img.ndim is 0: raise RuntimeError("Failed to read the image file %s, " "Please make sure that libjpeg is installed" % file_path)
connectivity = np.eye(5)
_UA_PRODUCT = 'salt-cloud' _UA_VERSION = '0.2.0'
new_info = info(new_name) if new_info: raise CommandExecutionError( 'User \'{0}\' already exists'.format(new_name) )
CELERY_IMPORTS = ( 'openedx.core.djangoapps.programs.tasks.v1.tasks', )
import os from os.path import join
from salt.exceptions import CommandExecutionError import salt.utils
try: import raven from raven.handlers.logging import SentryHandler HAS_RAVEN = True except ImportError: HAS_RAVEN = False
assert_array_almost_equal(linkage_X_ward[:, 2], out_X_unstructured[4]) assert_array_almost_equal(linkage_X_ward[:, 2], out_X_structured[4])
pass
task = host_ref.Destroy_Task()
est = TreeEstimator(min_samples_split=10, max_leaf_nodes=max_leaf_nodes, random_state=0) est.fit(X, y) node_samples = est.tree_.n_node_samples[est.tree_.children_left != -1]
unstacked = self.ymd.unstack() unstacked = unstacked.sort_index(axis=1, ascending=False) restacked = unstacked.stack() assert_frame_equal(restacked, self.ymd)
self.assertEqual(buffer_o, expected_data) self.assertFalse(term.isalive())
from __future__ import absolute_import import logging from salt.ext.six import string_types
self.assertEqual(Permission.objects.filter( content_type=permission_content_type, ).count(), 4)
action_name = ugettext_noop('rescored') update_fcn = partial(rescore_problem_module_state, xmodule_instance_args)
thumbnail_location=asset['thumbnail_location'], import_path=asset['import_path'], locked=asset.get('locked', False)
cat = Series(Categorical(list("abc"), ordered=True))
if bulk_ops_record.is_root: self._start_outermost_bulk_operation(bulk_ops_record, course_key)
ranks = {'leaves': []} colors = {'bounds': None}
if v[-1] < (1. - self.prop_decrease) * self.best_value: self.countdown = self.N else: self.countdown = self.countdown - 1
if 'expires' in cookie: cookie['expires'] = salt.ext.six.moves.http_cookiejar.http2time(cookie['expires'])
manager = self.__manager self.__manager = None yield
root_courselike_dir = self.root_dir + '/' + self.target_dir self.process_extra(root, courselike, root_courselike_dir, xml_centric_courselike_key, export_fs)
iris = load_iris() X = iris.data[:, [0, 2]] y = iris.target X = X[y != 2] y = y[y != 2]
response = self.client.get(self.url, content_type="application/json") self.assertHttpOK(response)
html_use_modindex = True
axes = df.ix[:, [0]].plot(color='DodgerBlue', subplots=True) self._check_colors(axes[0].lines, linecolors=['DodgerBlue'])
reg_units = theano.tensor.abs_(model.encode(X)).sum(axis=1).mean()
super(MixedModuleStore, self).clone_course(source_course_id, dest_course_id, user_id, fields, **kwargs)
self.check_tab_equality(tab, dict_tab)
self._add_draft_modules_to_course(new_course.location, source_course_key, user_id, **kwargs)
return HttpResponseBadRequest()
data_dict = get_executive_report(course_id) data_dict.update( { 'total_enrollments': true_enrollment_count, 'report_generation_date': report_generation_date.strftime("%Y-%m-%d"), } )
target = source.transform(3086)
import salt.crypt import salt.payload import salt.transport import salt.utils.args from salt.exceptions import SaltReqTimeoutError
sample_weight = np.empty(X.shape[0], dtype=np.float64) sample_weight[:] = 1. / X.shape[0]
return read_stata(file, convert_dates=True)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'proxmox', vm_['profile'], vm_=vm_) is False: return False
from __future__ import unicode_literals
from __future__ import absolute_import
ret['Not Actioned/Not Running'] = list(names) ret['Not Found'] = list(names) return ret
obj_au_settings = obj_au.Settings
for field_desc in results.split(','): field_desc = field_desc.strip() if field_desc.startswith("UNIQUE"): continue
delvols_on_destroy = kwargs.get('del_all_vols_on_destroy', None)
module = CapaFactory.create(max_attempts=0, done=False) self.assertTrue(module.should_show_save_button())
THRESHOLDED_MULTILABEL_METRICS = [ "log_loss", "unnormalized_log_loss",
while np.sum(support_) > n_features_to_select: features = np.arange(n_features)[support_]
ScopeIds(None, block_type, definition_id, usage_id), field_data,
tm.assert_almost_equal(variance_2, (n - 1.0) / (n - 2.0) * var, check_less_precise=2)
callback = self.get_params['callback']
import pytz data = StringIO("Date,x\n2012-06-13T01:39:00Z,0.5")
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
self.related_fkey_lookups = []
dbm = make_random_basic_binary_dbm( rng = rng, pool_size_1 = pool_size_1,
res_row = df.iloc[2] tm.assert_series_equal(res_row, exp_row) tm.assertIsInstance(res_row["cats"], compat.string_types)
self.assertEqual(self.ts.ix[d1], self.ts[d1]) self.assertEqual(self.ts.ix[d2], self.ts[d2])
if not hasattr(os, 'fork'): return 1 try: return int(os.environ['DJANGO_TEST_PROCESSES']) except KeyError: return multiprocessing.cpu_count()
DATE_INPUT_FORMATS = [
else:
exc_info_on_loglevel=logging.DEBUG
X1 *= np.sqrt(p)
section_titles = [t.split('\n')[0] for t in section_titles]
qs = Parcel.objects.filter(center2__within=F('border1')) self.assertEqual(1, len(qs)) self.assertEqual('P2', qs[0].name)
service = _get_service(name) label = service['plist']['Label']
N_per_side = 5 Npts = N_per_side ** 2 n_neighbors = Npts - 1
parent = models.ForeignKey("mutually_referential.Parent", models.CASCADE)
'' if '.' in field_type else 'models.', field_type,
head, tail = reordered_frame[:10].copy(), reordered_frame head['A'] = 1
from __future__ import unicode_literals
dtype = dict((columns[k] if com.is_integer(k) else k, v) for k, v in compat.iteritems(dtype))
import errno import logging import os import shutil
if is_categorical_dtype(dtype): pass elif is_datetimetz(dtype): pass elif issubclass(np.dtype(dtype).type, compat.string_types): dtype = np.object_
if len(names) == 1 and len(ret): return ret[names[0]]
'ENABLE_THIRD_PARTY_AUTH': False,
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch )
sparse = self.dense1.to_sparse() sparse2 = self.dense2.to_sparse()
residual_threshold = np.median(np.abs(y - np.median(y)))
LMS_SEGMENT_KEY = os.environ.get('SEGMENT_KEY')
yield check_clustering yield check_estimators_partial_fit_n_features
user = User.objects.get(email=self.notenrolled_student.email) self.assertTrue(CourseEnrollment.is_enrolled(user, self.course.id))
other = other.__class__('%s/%s' % (other.network_address, other.prefixlen))
_win(kernel32.DuplicateHandle, wintypes.BOOL,
should_yield_node = filter_func(current_node) if should_yield_node: yield current_node
self._auto_auth(self.USERNAME, self.EMAIL, False)
exc_info_on_loglevel=logging.DEBUG
else: merged = closest_subcluster.merge_subcluster( subcluster, self.threshold) if merged: self.init_centroids_[closest_index] = \ closest_subcluster.centroid_ self.init_sq_norm_[closest_index] = \ closest_subcluster.sq_norm_ return False
grouped = values.groupby(labels) agged = grouped.agg(len) expected = Series([4, 2], index=['bar', 'foo'])
response = client2.post(self.url, creds) self._assert_response(response, success=True)
try: frequencies.to_offset('2h20m') except ValueError: pass else: assert (False)
self.assertHTMLEqual(empty_forms[0].as_p(), empty_forms[1].as_p())
ax = Series(np.arange(12) + 1).plot(color='green') self._check_colors(ax.get_lines(), linecolors=['green'])
self.assertRedirects(resp, settings.LOGIN_REDIRECT_URL + '?next=' + reverse('dashboard'))
ransac_estimator.fit(X, yyy)
def test_basic_drop_first(self): s_list = list('abc') s_series = Series(s_list) s_series_index = Series(s_list, list('ABC'))
for n, f in l: df = tm.makeDataFrame() df[n] = f self.assertRaises( TypeError, store.append, 'df1_%s' % n, df)
if response.status_code != 404: return response
learn_more = model.train_batch(dataset, batch_size) model.monitor.report_batch(batch_size) if not learn_more: break
if isinstance(key[0], slice): return self._get_values(key) raise
from __future__ import unicode_literals
data = {} if node.hasAttribute('pk'): data[Model._meta.pk.attname] = Model._meta.pk.to_python( node.getAttribute('pk'))
self.assertQuerysetEqual( self.bob.groups.all(), [] )
import matplotlib.pyplot as plt
with ensure_clean_store(self.path) as store:
ip_header = packet[eth_length:20+eth_length]
ipc_client.connect()
context.update(app_context)
digits = load_digits() X, y = digits.data[:50], digits.target[:50] X_test = sparse.csr_matrix(digits.data[50:100])
format_is_iso8601 = _format_is_iso(format) if format_is_iso8601: require_iso8601 = not infer_datetime_format format = None
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.ext.six import integer_types
if versions_dict is None or master_branch not in versions_dict: definition_id = self.create_definition_from_data(locator, definition_fields, root_category, user_id).definition_id
signal_handler.send.assert_called_with('course_deleted', course_key=course_key)
if val == val: nobs[lab, 0] += 1 sumx[lab, 0] += val
mgr = create_mgr('a: f8; b: i8; c: f8; d: i8; e: f8;' 'f: bool; g: f8-2')
ip_address = "192.168.10.20" IPFilter.objects.create( blacklist=ip_address, enabled=True )
if not os.path.isfile(path): raise SaltInvocationError('File not found: {0}'.format(path))
date = tz('US/Central').localize(datetime(1990, 1, 1, 3)) result[date] = 0 result[date] = ts[4] assert_series_equal(result, ts)
if not self.loadauth.time_auth(extra): log.warning( 'Authentication failure of type "eauth" occurred.' ) return ''
assert_equal(3, LeavePLabelOut(n_labels=2).get_n_splits(X, y, labels)) assert_equal(3, LeaveOneLabelOut().get_n_splits(X, y, labels))
unshifted = self.ts.shift(0) assert_series_equal(unshifted, self.ts)
__doc__ = DatetimeProperties.__doc__
receiver = receiver() if receiver is not None: non_weak_receivers.append(receiver)
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, max_attempts=0, done=True, correct=True) self.assertTrue(module.should_show_reset_button())
from django.http import QueryDict
robust_cov = MinCovDet().fit(X)
assert_true(modulestore.has_course(locator, ignore_case))
values = pd.Categorical([1, 2, 3, 1, 1, 3], ordered=True)
grouped = PanelGroupBy(obj, grouper=grouper, axis=self.axis)
EMAIL_OPTIN_MINIMUM_AGE = PARENTAL_CONSENT_AGE_LIMIT
return launchctl('disable', 'system/{0}'.format(label), runas=runas)
self.assertEqual(views.get_cosmetic_display_price(self.course, registration_price), "Free")
K.flat[::n_samples + 1] += alpha[0]
from edxmako.shortcuts import render_to_response from mako.exceptions import TopLevelLookupException from django.http import HttpResponseNotFound
graph = graph.tocsr()
if not try_quick:
self.navigate_to_video()
import salt.wheel
beta = linalg.solve_triangular(G, np.dot(Q.T, Yt))
for char in pipeline.make_random_password(length=100000): self.assertIn(char, pipeline._PASSWORD_CHARSET)
if is_library: role_hierarchy = (CourseInstructorRole, CourseStaffRole, LibraryUserRole) else: role_hierarchy = (CourseInstructorRole, CourseStaffRole)
disallowed_aggregates = ()
return provider_details
self.assert_cookie_data_equal(safe_cookie_data_1, safe_cookie_data_2)
self.mock_programs_api() self.mock_credentials_api(self.user, reset_url=False)
self.descriptor = self.modulestore.return_value.get_item.return_value
tapi, ntaps = 0, 0
self._necessary_X_, self._necessary_y_ = X, y
GRAINS_CACHE = {} DETAILS = {}
'user_message': _(u"The ordering {ordering} is not supported").format(ordering=order_by_input),
from salt.modules import incron
from __future__ import absolute_import
self.assertEqual(self.cmap.get_overall_message(), "Test message")
return EmptyPromise( lambda: self._is_on_tab(tab_name), "{0} is the current tab".format(tab_name) )
return {'name': self.name, 'closed': False, '_committed': True, '_file': None}
display_output(data, opts=self.minion_opts) self.assertTrue(True)
df = DataFrame({'key': [1, 1, 1, 2, 2, 2, 3, 3, 3], 'value': lrange(9)})
from __future__ import unicode_literals
return "CAST(%s AS TIMESTAMP)" % field_name
raise
lc_block = self._add_library_content_block(course, self.lib_key) lc_block = self._refresh_children(lc_block) self.assertEqual(len(lc_block.children), 1)
self.selenium.find_element_by_link_text('Add another Profile').click()
self.assertEqual(len(DataFrame({})), 0)
import salt.utils import salt.output from salt.utils.locales import sdecode
for url in urls: self.assert_request_status_code(404, url)
__proxyenabled__ = ['ssh_sample']
self.cpush = True
covars_tied = np.array([x for x in covars_diag]).mean(axis=0) precs_tied = np.diag(np.sqrt(1. / covars_tied))
response = csrf_client.post('/post_view/', {}) self.assertEqual(response.status_code, 403)
if encoding: from codecs import lookup lookup(encoding) self.encoding = encoding else: self.encoding = None
yaml_key_val_pair = '- key1: val1' ret = utils.repack_dictlist(yaml_key_val_pair) self.assertDictEqual(ret, {'key1': 'val1'})
return list(reversed(course_updates.items))
serialized['required'] = required
import integration
expected = np.array([1.0e-03, 1.0e-02, 1.0e-01, 1.0e+00])
if server_tmp is None: continue
enrollment = CourseEnrollment.get_enrollment(student, course_key) if enrollment and enrollment.mode not in REQUIREMENTS_DISPLAY_MODES: return None
cookie = self.client.cookies[settings.EDXMKTG_USER_INFO_COOKIE_NAME] user_info = json.loads(cookie.value)
from salt.modules import s6
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch, Mock
n_jobs, n_estimators, starts = _partition_estimators(self.n_estimators, self.n_jobs)
y = (self.y_mean + self.y_std * y_).reshape(n_eval, n_targets)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
new_data = kde.sample(44, random_state=0) new_data = pca.inverse_transform(new_data)
import salt.utils import salt.utils.decorators as decorators
assert_raises(ValueError, gs.fit, X, y)
'ENABLE_DISCUSSION_SERVICE': True, 'ENABLE_TEXTBOOK': True, 'ENABLE_STUDENT_NOTES': True,
self._func_path = '.'.join([func.__class__.__module__, func.__class__.__name__])
reset_time = datetime.now(UTC) + timedelta(seconds=300) with freeze_time(reset_time): response = self.client.get(url) self.assertEquals(response.status_code, 404)
clf = AdaBoostClassifier(RandomForestClassifier()) clf.fit(X, y_regr)
stats_line = '' stats_line = outs.split('\r\n')[1]
from salt.states import supervisord
self.end_blocking_transaction() thread.join(5.0)
PY2 = sys.version_info[0] == 2 PY3 = sys.version_info[0] == 3
if self.op in ['==', '!=']:
return
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
from_friend = models.ForeignObject( Person, on_delete=models.CASCADE, from_fields=['from_friend_country', 'from_friend_id'], to_fields=['person_country_id', 'id'], related_name='from_friend')
labels = [0, 1, 2, 3] * 3 + [4, 5] * 5
_SQL_GET_IDENTIFIER = { 'mysql': _get_valid_mysql_name, 'sqlite': _get_valid_sqlite_name, }
master_doc = 'contents'
raise ValueError("Invalid value for train_size: %r" % train_size)
self.assertFalse(self._search_for_content(self.SEARCH_STRING))
import salt.config import salt.payload import salt.state import salt.utils import salt.utils.jid import salt.utils.url from salt.exceptions import SaltInvocationError
from __future__ import absolute_import
response = self.send_get(client, query_parameters='view=shared') self._verify_private_account_response( response, requires_parental_consent=True, account_privacy=PRIVATE_VISIBILITY )
if not cached_file: log.error('Unable to cache {0}'.format(cache_file)) ret[pkg_name] = { 'failed to cache cache_file': cache_file } continue
destroy(vm_['name'])
if (v1 is not None and v2 is None) or \ (v1 is None and v2 is not None): match = False else: match = (v1 == v2)
def no_oracle(func): return no_backend(func, 'oracle')
self.assertEqual(res.context['next_month'], None) self.assertEqual(res.context['previous_month'], datetime.date(2008, 10, 1))
return []
dr = bdate_range('1/1/2005', '1/1/2009', tz=pytz.utc) dr = bdate_range('1/1/2005', '1/1/2009', tz=tz)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch )
import salt.client from salt.ext import six from salt.ext.six.moves import zip
import salt.utils from salt.exceptions import ( CommandExecutionError, MinionError)
text = f.widget.format_value(result) self.assertEqual(text, '13:30:05')
self.assertFalse(hasattr(request, '_files'))
weights[rng.rand(n_samples) < 0.1] = 0
err = st_.verify_data(kwargs) if err: __context__['retcode'] = 1 return err
idx = pd.CategoricalIndex(values, name='xxx') tm.assert_series_equal(idx.value_counts(), exp)
CountryAccessRule.objects.all().delete()
self.join(other2, main)
'debug': False
response = data['submission']
from __future__ import unicode_literals
capi.geom_close_rings(self.ptr)
elif single_aligner and is_frame:
orig_mail_admins = mail.mail_admins orig_email_backend = admin_email_handler.email_backend mail.mail_admins = my_mail_admins admin_email_handler.email_backend = ( 'logging_tests.logconfig.MyEmailBackend')
self.check_modal_shows_correct_contents(self.type_fields) self.advanced_settings.refresh_and_wait_for_load()
if not settings.FEATURES.get(feature_name, False): return HttpResponseBadRequest() return view_func(request, *args, **kwargs)
alternate_course = self.create_course(course='mobile', mobile_available=True)
module = CapaFactory.create(max_attempts=0) self.assertFalse(module.should_show_check_button())
params["email"] = "not_an_email_address" assert_email_error("A properly formatted e-mail is required")
obj_list = model_instances
return [] if all else None
import hashlib import logging import os.path import random import signal
call_task('pavelib.quality.run_safelint', options={"thresholds": '{"total": 5}'})
tstart = datetime.now() clf = DecisionTreeClassifier() clf.fit(X, Y).predict(X) delta = (datetime.now() - tstart)
offset = CBMonthEnd() offset2 = CBMonthEnd() offset2.normalize = True self.assertEqual(offset, offset2)
return response.set_cookie_wrapped_func( key, value, max_age=max_age, expires=expires, path=path, domain=domain, secure=secure, httponly=httponly )
admin_obj = admin_class(model, self) if admin_class is not ModelAdmin and settings.DEBUG: system_check_errors.extend(admin_obj.check())
('security', '/%2Fexample.com/security/', ['/example.com'], {}),
import integration
result = result.astype('int64') expected = p.sum(0) assert_frame_equal(result, expected)
roles = (CourseStaffRole, CourseInstructorRole)
VERIFIED_MODES = [VERIFIED, PROFESSIONAL]
qs = County.objects.all() self.assertEqual(1, qs.count()) self.assertEqual('Galveston', qs[0].name)
self.assertEqual(RestrictedModel.plain_manager.count(), 1)
providers_config_path = overrides['providers_config']
pathname = name_to_pathname(self.url_name) filepath = u'{category}/{pathname}.html'.format( category=self.category, pathname=pathname )
blend_arr = copy(patch_arr) blend_arr[mask_arr] = frgd_arr[mask_arr]
COMMENTS_STUB_URL = os.environ.get('comments_url', 'http://localhost:4567')
from __future__ import absolute_import import os import shutil
__salt__['cmd.run']('attrib -R "{0}"'.format(notify_path))
self.assertRaises( FileserverConfigError, role_class, *args )
rng = np.random.RandomState(0) X = rng.uniform(size=(10, 3))
import copy import fnmatch import logging import os import signal import sys
certificate_template_asset.asset = SimpleUploadedFile('picture2.jpg', 'file contents') certificate_template_asset.save()
already_pushed = data.setdefault('Layers', {}).setdefault( 'Already_Pushed', []) already_pushed.append(item['id'])
if link_map[name] is not None: return reverse(link_map[name])
answer_correct = CapaFactory.create(showanswer='correct_or_past_due', max_attempts="1", attempts="0", due=self.tomorrow_str, correct=True) self.assertTrue(answer_correct.answer_available())
args = [func.__self__, ] + args
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
from salt.modules import influx
rng = np.random.RandomState(0) noise = noise_scale * rng.randn(*X.shape) X_iso2 = iso.transform(X + noise)
knn_mo = neighbors.KNeighborsClassifier(weights=weights, algorithm=algorithm) knn_mo.fit(X_train, y_train) y_pred_mo = knn_mo.predict(X_test)
token = self.auth.mk_token(creds) if 'token' not in token: raise cherrypy.HTTPError(401, 'Could not authenticate using provided credentials')
df.loc['a', :] = df.ix[0]
data = io.read() self.book = xlrd.open_workbook(file_contents=data)
AutoAuthPage(self.browser, username="second", email="second@example.com", no_login=True).visit()
raise TypeError('Must provide offset.')
res, lidx, ridx = self.index.join(other, how='inner', return_indexers=True)
self.unit_page.xblocks[1].save_settings()
X, y = datasets.make_classification(n_samples=100000, n_features=20, n_informative=2, n_redundant=10, random_state=42)
from __future__ import absolute_import import logging
from uuid import uuid4
pipeline.items.append(preprocessing.GlobalContrastNormalization( sqrt_bias=10., use_std=True))
virtualenv_mod.__salt__ = {} virtualenv_mod.__opts__ = {} virtualenv_mod.__env__ = {}
emp_cov = np.dot(X.T, X) / n_samples
else: status = VERIFY_STATUS_MISSED_DEADLINE
class Person(Form): first_name = CharField() last_name = CharField()
MPLPlot.__init__(self, data, **kwargs)
conflicts = loader.detect_conflicts()
columns = ['int_', 'long_', 'byte_'] expected = expected[columns] reordered = read_stata(self.dta15_117, convert_dates=True, columns=columns) tm.assert_frame_equal(expected, reordered)
resp = self.client.get_json( get_url('xblock_view_handler', self.vert_loc, kwargs={'view_name': 'container_preview'}) ) self.assertEqual(resp.status_code, 200)
GITPYTHON_MINVER = '0.3' PYGIT2_MINVER = '0.20.3' LIBGIT2_MINVER = '0.20.0' DULWICH_MINVER = (0, 9, 4)
raise WorkerInterrupt()
import glob autosummary_generate = glob.glob("*.rst")
import salt.utils import salt.utils.itertools from salt.exceptions import CommandExecutionError, MinionError
saltenv = env
if self.model_admin.show_full_result_count: full_result_count = self.root_queryset.count() else: full_result_count = None can_show_all = result_count <= self.list_max_show_all multi_page = result_count > self.list_per_page
attrs.append(node.id) self.accessed_names.add('.'.join(reversed(attrs)))
course = get_course(course_id)
panel.loc['a2'] = df1.values tm.assert_frame_equal(panel.loc['a1'], df1) tm.assert_frame_equal(panel.loc['a2'], df1)
return replace(path, pattern, '', flags=flags, bufsize=bufsize, dry_run=True, search_only=True, show_changes=False, ignore_if_missing=ignore_if_missing)
columns = [col[astype(mask, bool, copy=False)] for col, mask in zip(columns_all, mask_valids)]
cfg = __salt__.get('config.option', __opts__)
msg = None for i, m in enumerate(smtp_messages): if m[:4] == 'data': msg = smtp_messages[i + 1] break
'packages': ('openassessment',),
u_flipped, _, v_flipped = randomized_svd(mat, 3, flip_sign=True) u_based, v_based = max_loading_is_positive(u_flipped, v_flipped) assert_true(u_based) assert_false(v_based)
if child.visible_to_staff_only: continue
'whitelist_modules': list,
return None
} track_created_event(request, event_name, course, thread, event_data)
if not allow_dups: self.axes[axis]._can_reindex(indexer)
assert_almost_equal(a.dot(b['1']), expected['1']) assert_almost_equal(a.dot(b2['1']), expected['1'])
CourseEnrollmentFactory(user=self.moderator, course_id=self.course.id) self.moderator.roles.add(Role.objects.get(name="Moderator", course_id=self.course.id))
data[match.group(1)] = re.sub(r'\\([$"\'\\`])', r'\1', match.group(2))
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, patch )
assert_true((ovr_clf.coef_ != cs_clf.coef_).all())
X = check_array(X) n_samples, n_features = X.shape
with tm.assertRaises(ValueError): df.sample(n=1, axis=1, weights=[0.5] * 10)
return False
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.alfred])
self.coefs_ = self._best_coefs self.intercepts_ = self._best_intercepts
continue
test_invalid_token("AAAAAAAAAAAAAAAAAAAAANRGw8HDEmlcLVFawgY9wI8=", "padding")
self.course_info_page.visit() self.tab_nav.go_to_tab('Wiki')
video = self.store.get_item(child_to_move_location)
self.client.logout()
NETWORK_DEVICE['UP'] = True
import time import logging
config = VerifiedTrackCohortedCourse.objects.create(course_key=course_key, enabled=True) config.save() self.assertTrue(VerifiedTrackCohortedCourse.is_verified_track_cohort_enabled(course_key))
import salt.loader import salt.utils.event from salt.utils.event import tagify from salt.exceptions import SaltInvocationError
import salt.utils from salt.exceptions import CommandExecutionError, MinionError import salt.ext.six as six from salt.ext.six.moves import zip
self.assertTrue(module_has_submodule(egg_module, 'bad_module')) with self.assertRaises(ImportError): import_module('egg_module.bad_module')
if len(self._fields or self.model._meta.concrete_fields) > 1: raise TypeError('Cannot use multi-field values as a filter value.')
fancy = False
pip_version = version(pip_bin)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON)
dtup = d.as_tuple() digits = dtup[1]
from salttesting import TestCase, skipIf from salttesting.mock import ( create_autospec, MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
energy = dbm.energy(V = v_state, hidden = [y_state]) unnormalized_prob = T.exp(-energy) assert unnormalized_prob.ndim == 1 unnormalized_prob = unnormalized_prob[0] unnormalized_prob = function([], unnormalized_prob)
in_cart = False reg_then_add_to_cart_link = ""
assert_raises(ValueError, mlb.inverse_transform, np.array([[1]])) assert_raises(ValueError, mlb.inverse_transform, np.array([[1, 1, 1]]))
result = df.sortlevel(0) self.assertTrue(result.index.lexsort_depth == 3)
if library_role: library_role(self.lib_key).add_users(self.non_staff_user) if course_role: course_role(course.location.course_key).add_users(self.non_staff_user)
on_saltstack = 'SALT_ON_SALTSTACK' in os.environ
sequential = self.store.create_child( self.user_id, chapter.location, 'sequential', block_id='subsection_one' ) self.store.publish(sequential.location, self.user_id)
res = df.fillna(value={"cats": 3, "vals": "b"}) tm.assert_frame_equal(res, df_exp_fill)
from sklearn import datasets, svm, metrics
self.assertNotIn(REG_STR, resp.content)
arnorm = alfa * beta if arnorm == 0: print(msg[0]) return x, istop, itn, r1norm, r2norm, anorm, acond, arnorm, xnorm, var
return _merge_statuses([boot_ret, buildout_ret])
bulk_record = self._get_bulk_ops_record(location.course_key)
precision = [1.] recall = [0.] tp = 0 fp = 0 fn = len(pos_scores) count = fn
import salt.utils
counts[center_idx] += count
rng = date_range('1/1/1990', periods=N, freq='H', tz='America/New_York') ts = Series(np.random.randn(N), index=rng)
QUEUING = 'QUEUING' PROGRESS = 'PROGRESS'
assert_raises(ValueError, clf.fit, X6, y4)
for part_svc in [ps_shared_cache_1, ps_shared_cache_2, ps_diff_cache]: self.assertEqual( first_group.id, part_svc.get_user_group_id_for_partition(user_partition_id) )
c_int32 = astype(a_int32, dtype=np.int32, copy=False) assert_true(c_int32 is a_int32)
test_course = CourseFactory.create(default_store=modulestore_type, emit_signals=True) self.client.login(username="jack", password="test")
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
response = self.session.put( "{}/xblock/{}".format(STUDIO_BASE_URL, locator), data=json.dumps(data), headers=self.headers, )
def add_implicit_requires(data):
cloud_downtime = random.randint(0, opts.splay) print('Sleeping random period before calling salt-cloud: {0}'.format(cloud_downtime)) time.sleep(cloud_downtime)
parent_location = parent_location.map_into_course(target_id)
if weight is None or raw_total == 0: return (raw_correct, raw_total) return (float(raw_correct) * weight / raw_total, float(weight))
if delta_remaining < delta_min: ret['comment'] = 'Certificate will expire in {0}, which is less than {1}'.format(delta_remaining, delta_min) return ret
merged_access[partition_id] = group_ids
from salt.states import composer
import salt.utils.event import salt.client
time.sleep(0.1)
le = LabelEncoder() assert_raises(ValueError, le.transform, []) assert_raises(ValueError, le.inverse_transform, [])
try:
class ReplaceField(forms.ModelForm): url = forms.BooleanField()
PIPELINE_COMPILE_INPLACE = True
scikit_classifier_results = [] scikit_regressor_results = []
cmap_light = ListedColormap(['#FFAAAA', '#AAFFAA', '#AAAAFF']) cmap_bold = ListedColormap(['#FF0000', '#00FF00', '#0000FF'])
assert start >= 0 assert stop > start assert stop <= X.shape[0] X = X[start:stop, :] y = y[start:stop] assert X.shape[0] == y.shape[0]
import salt.utils import salt.output from salt.utils.locales import sdecode
from __future__ import absolute_import
if oob: indexer = slice(0, 0) else: indexer = slice(3, 5) self.check(result, s, indexer, False)
payload = json.dumps({ 'children': None, 'data': handouts_html, 'id': self._handouts_loc, 'metadata': dict(), })
clf = PassiveAggressiveClassifier().fit(X, y) assert_array_equal(clf.classes_, np.unique(y))
course_page = self._goto_staff_page() course_page.set_staff_view_mode_specific_student(student_a_username) verify_expected_problem_visibility(self, course_page, [self.alpha_text, self.everyone_text])
if not func_accepts_kwargs(receiver): raise ValueError("Signal receivers must accept keyword arguments (**kwargs).")
from __future__ import absolute_import import hashlib import logging import sys
only_courses = [self.courses[0].id, self.courses[1].id] self._run_command(self.TEST_ORG, only_courses=only_courses)
iris = load_iris() score = cross_val_score(rfe, iris.data, iris.target) assert_greater(score.min(), .7)
self.enrollment.can_refund = True self.assertTrue(self.enrollment.refundable())
hashed_files[self.hash_key(name)] = hashed_name yield name, hashed_name, processed
munin.__salt__ = {}
os.unlink(output_file)
if _NUMEXPR_INSTALLED and _USE_NUMEXPR: if n is None: n = ne.detect_number_of_cores() ne.set_num_threads(n)
res_r = int(numpy.floor(last_pool_r/rs)) + 1 res_c = int(numpy.floor(last_pool_c/cs)) + 1
raise ImportError("No IPython")
return ret
break
import salt.utils.cloud import salt.config as config from salt.exceptions import ( SaltCloudException, SaltCloudSystemExit, SaltCloudConfigError, SaltCloudExecutionTimeout, SaltCloudExecutionFailure )
attach_file(filename, sub_path) modal_css = 'div.wrapper-modal-window-assetupload' button_css = '{} .action-upload'.format(modal_css) world.css_click(button_css)
self.factory(alpha=0.01, n_iter=20).fit(X2, np.ones(9))
break
return _dismiss_notification(request, action_state_id)
submission_dict = {'test': 'the_answer'} input_dict = {'1_2_1': json.dumps(submission_dict)} correct_map = problem.grade_answers(input_dict)
block_structure = BlockStructureModulestoreData(root_block_usage_key=0)
salt '*' win_update.list_updates fields="['Title', 'Description']"
idx = pd.PeriodIndex(values, name='xxx') tm.assert_series_equal(idx.value_counts(), exp)
test_data = state_run['cmd_|-test_non_failing_state_|-echo "Should not run"_|-run']['comment'] expected_result = 'State was not run because onfail req did not change' self.assertIn(expected_result, test_data)
for block in [component, child, sibling]: check_node(block.location, None, after_create, self.user_id, None, after_create, self.user_id)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
modulestore().get_item(usage_key)
assert rbmA_params[0].shape[0] == rbmB_params[0].shape[0] assert len(rbmA_params[1]) == len(rbmB_params[1])
if axis + 1 > self.obj.ndim: raise AssertionError("invalid indexing error with " "non-unique index")
pythoncom.CoInitialize()
AUDIT_LOG.info(u"User %s w/o external auth attempting login", user)
import integration
self.assertRegexpMatches( without_new_lines, r'<targetedfeedbackset.*?>.*?explanation-id="feedback1".*?</targetedfeedbackset>.*' + r'<targetedfeedbackset.*?>\s*</targetedfeedbackset>' )
unique_fields = set()
continue
first_iterations = 0 for index, raw_author in enumerate(raw_authors): self.assertEqual(normal_authors[index], raw_author) first_iterations += 1
with self.assertRaisesMessage(CommandError, "No fixture named 'unknown' found."): management.call_command("loaddata", "unknown.json", verbosity=0)
from salttesting.helpers import ensure_in_syspath
inc = np.r_[True, lab[1:] != lab[:-1]]
return set_logged_in_cookies(request, response, user)
levels = np.linspace(0, Z.max(), 25) plt.contourf(X, Y, Z, levels=levels, cmap=plt.cm.Reds)
modulestore().mappings = {}
df = self.read_csv(StringIO(data), header=None, parse_dates=date_spec, date_parser=conv.parse_date_time) self.assertIn('nominal', df)
self.assertIn('wrapper-xblock-message', html) self.assertNotRegexpMatches(html, r'wrapper-xblock[^-]+')
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.5, random_state=0)
time_step = 5 rval = np.zeros((time_step, batch_size), dtype=dtype) rval[:3, :1] = 1 rval[:4, 1:] = 1 return rval
assert_raise_message(NotFittedError, "This GaussianMixture instance is not fitted " "yet. Call 'fit' with appropriate arguments " "before using this method.", g.predict, X)
tile_w, tile_h = self.get_width_height(self.tile(center, z).extent)
if self.columns.is_unique:
if not self.ALLOW_NESTED and connection.in_atomic_block: raise transaction.TransactionManagementError('Cannot be inside an atomic block.')
import logging
self.verbose = bool(self.verbose)
master_profile.setdefault('preseed_minion_keys', {}) master_profile['preseed_minion_keys'].update({name: pub})
change_map = {} conjunction = (connector == AND)
curl -sSik https://localhost:8000 \\ -d client=runner \\ -d fun='jobs.lookup_jid' \\ -d jid='20150129182456704682' \\ -d outputter=highstate
result = df.replace({1: 'a', 4: 'b'}) assert_frame_equal(expected, result)
self.login_page.click_third_party_dummy_provider()
self.client.login(username=self.global_staff.username, password="test")
__opts__['test'] = orig_test return ret
if 'course_id' in data and data['course_id'] is None:
from __future__ import absolute_import import re import os
if onlyrepo: os.remove(repofile) return 'File {0} containing repo {1} has been removed'.format( repofile, repo)
if hasattr(mod, 'run'): mod.run()
pkg_404_comms = []
import salt.utils
self.assert_enrollment_status(as_server=True)
for value in settings.MICROSITE_CONFIGURATION.itervalues(): org_filter = value.get('course_org_filter', None) if org_filter == org: return value.get(val_name, default) return default
from __future__ import unicode_literals
with self.assertNumQueries(24): self.client.get(self.teams_url)
parent_ids = [ valid_parent for valid_parent in all_parent_ids if self.has_path_to_root(valid_parent, course) ]
factory_dict = PROBLEM_DICT['multiple choice'] problem_xml = factory_dict['factory'].build_xml(**factory_dict['kwargs'])
from __future__ import absolute_import
def geo_quote_name(self, name): return "'%s'" % name
vb_start_vm(BOOTABLE_BASE_BOX_NAME) ip_addresses = vb_wait_for_network_address(20, machine_name=BOOTABLE_BASE_BOX_NAME) network_count = len(ip_addresses) self.assertGreater(network_count, 0)
try:
from salt.utils.async import SyncWrapper
resp = ProxyProxyBug.objects.select_related().get( version__icontains='beta' ) self.assertEqual(repr(resp), '<ProxyProxyBug: ProxyProxyBug:fix this>')
reindexed_int = int_ts.reindex(int_ts.index[::2]) self.assertEqual(reindexed_int.dtype, np.int_)
summary += line.rstrip() + space2 + '...' line = space2
if name in names: ret[name] = version_num
fig, axes = self.plt.subplots(1, 1) df = DataFrame(np.random.rand(10, 1), index=list(string.ascii_letters[:10]))
result = ts.shift(1, freq='4H') exp_index = ts.index + datetools.Hour(4) tm.assert_index_equal(result.index, exp_index)
self.assertTrue(self._is_valid_key(key), msg="Failed for key length {0}".format(length))
ret['comment'] = 'Database {0} is not present, so it cannot ' \ 'be removed'.format(name) return ret
click_css(page, component_css, 0)
self.assertCoursesEqual(source_library1_key, source_library2_key)
self.assertContentBefore(response, link2, link1)
for idx1, idx2 in cases:
result = ols(y=y, x=x, window_type='rolling', window=10) print(result.beta)
if salt_token and self.resolver.get_token(salt_token): return True
self.assertFalse(check_password({}, 'test@example.com', 'incorrect'))
import logging import re
parent = modulestore.get_parent_location(next_usage)
EXPORTED_ASSET_DIR = 'assets'
return section_titles.index(title.lower()) + 1
libraries = ['m'] if not is_platform_windows() else []
def __grant_normalize(grant): if grant == 'ALL': grant = 'ALL PRIVILEGES'
user_answer = flat_user_answer(user_answer)
remote_files = set(srv.listdir(path='.'))
expected = Series([1., 3., 5., 7., np.nan, 11.])
std_error = scores_std / np.sqrt(n_folds)
if staff not in list_staff_ccx: try: enroll_email( course_id=ccx_key, student_email=staff.email, auto_enroll=True, email_students=send_email, email_params=email_params, )
course_overview_before.image_set.small_url = broken_small_url course_overview_before.image_set.large_url = broken_large_url course_overview_before.image_set.save()
import salt.utils.boto3 import salt.utils.compat import salt.utils
self.section = modulestore().get_item(self.section.location, depth=None) self.field_data_cache.add_descriptor_descendents(self.section, depth=None)
import salt.utils from salt.utils.odict import OrderedDict from salt._compat import string_io from salt.ext.six import string_types
if self.lcp.is_queued(): prev_submit_time = self.lcp.get_recentmost_queuetime()
pmap[alias][driver] = []
TEST_RUNNER = 'openedx.core.djangolib.nose.NoseTestSuiteRunner'
self.assert_account_settings_context_looks_correct(account_settings_context(request), user, linked=False) self.assert_social_auth_does_not_exist_for_user(user, strategy)
return self.getlist(key)
if do_ref: df.ix[0, "c"]
exists = conn.describe_stacks(name) log.debug('Stack {0} exists.'.format(name)) return True
s_values = np.array(['foo', 'bar', 'baz'], dtype=object) self.assertRaises(ValueError, lambda: nanops._ensure_numeric(s_values))
'master_failback': bool,
world.css_click('input[name="calculate-grades-csv"]')
K_test = np.dot(X_[180:], X_[:180].T) y_test = y_[180:]
exc_info_on_loglevel=logging.DEBUG
middleware.process_request(request) request.session.flush()
response_str = json.dumps( {'return_code': 0 if success else 1, 'content': message} )
if ( tag == 'msup' and len(k) == 2 and gettag(k[1]) == 'mrow' and
X1[:, -1] = 1.0
class FieldOverridePost(Post): class Meta: proxy = True
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
with self.assertNumQueries(0): RestrictedCourse.is_restricted_course(new_course_id)
import integration
if has_access(user, 'load', course_descriptor): world.enroll_user(user, course_descriptor.id)
admin_email_handler = [ h for h in logger.handlers if h.__class__.__name__ == "AdminEmailHandler" ][0] return admin_email_handler
class ContactForm(Form): subject = CharField() message = CharField(widget=Textarea)
latex = fname + inner return LatexRendered(latex, tall=children[1].tall)
UserModel().set_password(password)
import salt.config import salt.transport.ipc
log_likelihoods, responsibilities = self.score_samples(X) current_log_likelihood = log_likelihoods.mean()
xblock._published_by = published_block.edit_info.edited_by xblock._published_on = published_block.edit_info.edited_on
log = logging.getLogger(__name__)
clf = neighbors.KNeighborsClassifier(n_neighbors, weights=weights) clf.fit(X, y)
self.attempt_login(200) user.is_active = False
settings = _normalize_server_settings(**settings)
dataset = datasets.load_digits() X = dataset['data'] y = dataset['target']
return self._getitem_axis(tup, axis=0)
self.user.profile.year_of_birth = 1980 self.user.profile.profile_image_uploaded_at = TEST_PROFILE_IMAGE_UPLOAD_DT self.user.profile.save()
def __init__(self, opts, **kwargs): pass
ensemble = BaggingClassifier(base_estimator=DecisionTreeClassifier(), random_state=rng).fit(X_train, y_train)
enrollment_record = CourseEnrollment.objects.get( user=user, course_id=course_id ) self.assertFalse(enrollment_record.is_active)
result = mixed[['A', 'B']].min(1) expected = Series([timedelta(days=-1)] * 3) tm.assert_series_equal(result, expected)
result = s.str.extract('(_)', expand=False) exp = Series([NA, NA, NA], dtype=object) tm.assert_series_equal(result, exp)
rstfile = tempfile.NamedTemporaryFile(suffix='.tif') ndv = 99
idx1 = idx1.tz_localize('Asia/Tokyo') exp_idx = exp_idx.tz_localize('Asia/Tokyo')
from __future__ import unicode_literals
from salt.modules import ldapmod
return False
if state.transposed: results = results[:, ::-1]
HOURS_PER_DAY = 24. MIN_PER_HOUR = 60. SEC_PER_MIN = 60.
self._fetch_all() obj_dict = self.__dict__.copy() obj_dict[DJANGO_VERSION_PICKLE_KEY] = get_version() return obj_dict
a = DataFrame(randn(20, 2), index=[chr(x + 65) for x in range(20)]) a.ix[-1] = a.ix[-2]
ASSET_XSD_PATH = PLATFORM_ROOT / "common" / "lib" / "xmodule" / "xmodule" / "assetstore" / "tests" / ASSET_XSD_FILE
render_pipe = check_render_pipe_str(line.strip()[2:], renderers, blacklist, whitelist)
self.assertEqual(bytearray(as_stolen_buf), b'test')
i = pd.date_range('20130101', periods=3, tz='US/Eastern')
assert_raises(ValueError, clf.fit, X, np.ones(len(X)))
if course_mode == 'verified': self.assertIn('xseries-base-btn', response.content) else: self.assertIn('xseries-border-btn', response.content)
item = order.orderitem_set.all().select_subclasses()[0]
log = logging.getLogger(__name__)
from __future__ import absolute_import, print_function import errno import logging import os
homework_grader = graders.AssignmentFormatGrader("Homework", 12, 2) homework_grader2 = graders.grader_from_conf(homework_grader)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
'log_granular_levels': dict,
self.assertEqual(len(FooImage.objects.all()), 0) self.assertEqual(len(FooFile.objects.all()), 0)
fn = None paths = ('/etc/yum/yum.conf', '/etc/yum.conf') for path in paths: if os.path.exists(path): fn = path break
import pwd runas = pwd.getpwuid(os.getuid())[0]
continue
def _tile_columns(self): raise NotImplementedError('TODO')
from __future__ import absolute_import import logging from copy import copy
x = np.arange(len(channel.batch_record))
clf_weights = svm.SVC() clf_weights.fit(X, y, sample_weight=sample_weight_last_ten)
return tab
latex_documents = [ ( 'index', 'getting_started.tex', u'edX Studio Documentation', u'EdX Doc Team', 'manual', ), ]
self.assertEqual(response.status_code, 400)
self._consolidate_inplace() return all([block.is_numeric for block in self.blocks])
'msg': '', 'width': width, 'height': height,
img = circle1 + circle2 mask = img.astype(bool) img = img.astype(float)
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21")
pan = web.get_data_yahoo('XOM', '2013-01-01', '2013-12-31', interval='w') self.assertEqual(len(pan), 53)
X, y = make_classification(n_samples=200, n_features=20, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, flip_y=0.0, class_sep=10, shuffle=False, random_state=0)
CELERYD_PREFETCH_MULTIPLIER = 1
dense_classifier = dense_results = AdaBoostRegressor( base_estimator=CustomSVR(), random_state=1 ).fit(X_train, y_train)
try: import pymongo version = pymongo.version version = '.'.join(version.split('.')[:2]) HAS_PYMONGO = True except ImportError: HAS_PYMONGO = False
check_results_order(ascending=True)
self._params.update(l._params)
state = models.CharField(max_length=50)
ContentType.objects.clear_cache()
pass
import salt.utils import salt.exceptions import salt.ext.six as six from salt.utils.odict import OrderedDict
module_system = get_test_system()
#html_last_updated_fmt = '%b %d, %Y'
self.assertContains(response, 'Third query list: 2') self.assertContains(response, 'Fourth query list: 3')
index = rng.randint(0, len(correct_choices) - 1) correct_choice = correct_choices[index] solution_id = correct_choice.get('explanation-id')
if not _np_version_under1p8: result = td1[0] + dt1 expected = ( dt1.dt.tz_localize(None) + td1[0]).dt.tz_localize('US/Eastern') assert_series_equal(result, expected)
raise RedirectCycleError("Redirect loop detected.", last_response=response)
z = SouthTexasZipcode.objects.get(name='77005')
import logging import salt.utils
inlier_mask_subset = residuals_subset < residual_threshold n_inliers_subset = np.sum(inlier_mask_subset)
'milestones',
__virtualname__ = 'psget'
return Series([], name=self.name, index=keys)
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
cache = uuid()
import os import re import subprocess import sys
buttons = world.css_find('div.mce-widget>button')
msg = msg.replace('&#60;', '&lt;')
import salt.utils.args from salt.utils.odict import OrderedDict
rng = timedelta_range(start='0s', periods=25, freq='s') ts = Series(np.random.randn(len(rng)), index=rng)
self.assertRaises(TypeError, lambda: df4[df4.index < 2]) self.assertRaises(TypeError, lambda: df4[df4.index > 1])
params = self._signed_callback_params(self.order.id, "145.00", "145.00") result = process_postpay_callback(params)
self.course_fixture.create_xblock( parent_vertical.locator, XBlockFixtureDesc(category='poll', display_name="", data=load_data_str('poll_markdown.xml')) ) self.course_outline_page.visit()
if file_name == os.path.basename(__file__): return results
if len(err) == 1: err = np.tile(err, (self.nseries, 1))
'con_cache': bool, 'rotate_aes_key': bool,
if not isinstance(data, SingleBlockManager): data = SingleBlockManager(data, index, fastpath=True) if copy: data = data.copy() if index is None: index = data.index
input_dict = {'1_2_1': '0', '1_2_2': '0'} correct_map = problem.grade_answers(input_dict)
if isinstance(block, XModuleDescriptor):
task_definition = task_folder.GetTask(name).Definition
trainer = yaml_parse.load(topo_view_yaml % {'filename': filename}) trainer.main_loop()
for name in SYMMETRIC_METRICS: metric = ALL_METRICS[name] assert_almost_equal(metric(y_true, y_pred), metric(y_pred, y_true), err_msg="%s is not symmetric" % name)
self.create_squares(args, 'pyformat', multiple=True)
def f(): df.loc['bar'] *= 2
return None
kwargs_str = get_kwargs_str(field_name)
self.assertEqual(form.cleaned_data['p'].srid, 4326)
elif self.algorithm == 'l-bfgs': self._fit_lbfgs(X, y, activations, deltas, coef_grads, intercept_grads, layer_units) return self
time.sleep(1) return info(name).get('gid') == gid
e = Employee.objects.get(pk=123) self.assertEqual(e.pk, 123) self.assertEqual(e.employee_code, 123)
self.assertEqual( res_json['message'], u'Please select one or more certificate statuses that require certificate regeneration.' )
verification_statuses = cache_values.get(verification_status_cache_key) if verification_statuses is None: verification_statuses = VerificationStatus.get_all_checkpoints(user.id, course_key) cache.set(verification_status_cache_key, verification_statuses)
temp_poll_answers = self.poll_answers temp_poll_answers[self.poll_answer] -= 1 self.poll_answers = temp_poll_answers
self.assertEqual(len(details['course_modes']), 3) self.assertEqual(details, cached_details)
if text.endswith(truncate): return text return '%s%s' % (text, truncate)
df = orig.copy() df.iloc[2, 0] = "b" tm.assert_frame_equal(df, exp_single_cats_value)
from __future__ import unicode_literals
raise nose.SkipTest('unreliable test, receive partial components back for nasdaq_100')
index = DatetimeIndex([datetime(2012, 1, 1)], tz=self.tzstr('EST')) index.hour index[0]
inv = not callable(kernel)
self.assertEqual(alice_profile.user.username, 'alice') self.assertEqual(bob_profile.user.username, 'bob')
for gen in xrange(3): gc.collect(gen) scanner.dump_all_objects( format_str.format("gc-gen-{}".format(gen)) )
inputs = inputs[1:] neg_inputs = neg_inputs[1:]
dtype=None, engine=None, converters=None, true_values=None, false_values=None, skipinitialspace=False, skiprows=None, skipfooter=None, nrows=None,
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self.assertIn( finger_print, [i.strip() for i in _key] )
df = DataFrame(index=lrange(10)) result = df.count(1) expected = Series(0, index=df.index) tm.assert_series_equal(result, expected)
assert_series_equal(actual, expected)
return 'UTC'
view_html = None
remotes = __salt__['git.remotes'](target, user=user, redact_auth=False)
from __future__ import absolute_import
for ignore in list(_STATE_INTERNAL_KEYWORDS) + ['listen_in', 'preqrequired']: kwargs.pop(ignore, None)
clean_warning_registry() with warnings.catch_warnings(): warnings.simplefilter("ignore", self.category) return fn(*args, **kwargs)
from .xqueue import * from .support import * from .webview import *
pass
good_hosts = list(settings.CSRF_TRUSTED_ORIGINS) good_hosts.append(good_referer)
from __future__ import absolute_import import os import shutil
review3 = Review(source="Python Daily") self.assertEqual(review3._state.db, None)
for l, name in zip(level, names): self.levels[l].rename(name, inplace=True)
if self.opts['add_proxymodule_to_opts']: self.opts['proxymodule'] = self.proxy
return ax.right_ax
from __future__ import absolute_import
now_no_ms = now.replace(microsecond=0) if now == now_no_ms: now = now.replace(microsecond=1)
class FakeWriter(object): def __init__(self): self.output = ""
variation = close - open
label = self._maybe_cast_slice_bound(label, side, kind)
return str_columns
return super_getitem(key)
return redirect_with_get('signin_user', request.GET)
x, y, z = repr.get_value(borrow=True).T do_3d_scatter(x, y, z)
visbias_a = visbias
return JsonResponse({"error": "Assignment type must be specified."}, 400)
keystone.auth_key: 203802934809284k2j34lkj2l3kj43k
series = self.frame.xs('A', axis=1) series[:] = 5 self.assertTrue((expected == 5).all())
from __future__ import absolute_import import os
pk = self.kwargs.get(self.pk_url_kwarg) slug = self.kwargs.get(self.slug_url_kwarg) if pk is not None: queryset = queryset.filter(pk=pk)
import os import re import sys import uuid import string
modulestore().request_cache = None modulestore().metadata_inheritance_cache_subsystem = None
X_var *= X.shape[0] X_std = np.sqrt(X_var, X_var) del X_var X_std[X_std == 0] = 1 inplace_column_scale(X, 1. / X_std)
if isinstance(value, Series):
tz = d.pop('tz', None)
self.the_cmathml = self.GetContentMathML(self.asciimath, pmathml) return self.the_cmathml
url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.get(url)
if dj_exc_type not in (DataError, IntegrityError): self.wrapper.errors_occurred = True six.reraise(dj_exc_type, dj_exc_value, traceback)
url_path = embargo_api.message_url_path(self.course.id, access_point)
if self._read_sync_future is not None: self._read_sync_future.exc_info() if self._read_stream_future is not None: self._read_stream_future.exc_info()
self.selenium.switch_to.window(main_window) self.wait_for_value('#id_supporting_bands', '42')
if definition_id is None: definition_id = LocalId()
get_extring = GeomOutput('GEOSGetExteriorRing', [GEOM_PTR]) get_intring = GeomOutput('GEOSGetInteriorRingN', [GEOM_PTR, c_int]) get_nrings = IntFromGeom('GEOSGetNumInteriorRings')
attrs = ['mean_beta', 'std_beta', 't_stat'] for attr in attrs: getattr(result, attr)
if labels.is_unique: indexer = check = labels.get_indexer(objarr)
self.update_masquerade(role='staff') self.assertEqual(self.get_progress_detail(), u'0/2')
self.assertFalse(payload.get('success')) self.assertIn('There was an error receiving your login information', payload.get('value'))
LOGGER.debug('Starting service on port {0}'.format(self.port))
XDOMAIN_PROXY_CACHE_TIMEOUT = 60 * 15
assert_array_almost_equal(coef_unsorted.toarray(), coef_sorted.toarray()) assert_array_almost_equal(sparse_svc.predict_proba(X_test_unsorted), sparse_svc.predict_proba(X_test))
result = list(df.grade.values) expected = np.array(df.grade.values).tolist() tm.assert_almost_equal(result, expected)
course_enrollment = CourseEnrollment.get_enrollment(user, course_key) enrollment_date = course_enrollment.created if course_enrollment else ""
body.update(custom_parameters)
self.assertRaises(ValueError, cut, [], 2)
__virtualname__ = 'json5'
ret = self.run_state('ssh_known_hosts.present', **dict(kwargs, name=GITHUB_IP)) self.assertSaltStateChangesEqual( ret, GITHUB_FINGERPRINT, keys=('new', 'fingerprint') )
import salt.fileclient import salt.utils.url
for addr in hosts: if host in hosts[addr]: return addr return ''
#add_function_parentheses = True
df = df_orig.T.to_sparse()
self._studio_add_content(1)
df.groupby(1, as_index=False)[2].agg({'Q': np.mean})
self.create_mode('professional', 'Professional Education Verified Certificate', 10)
import yaml from yaml.nodes import MappingNode from yaml.constructor import ConstructorError from yaml.scanner import ScannerError import salt.ext.six as six
api.set_credit_requirement_status("bob", self.course_key, "grade", "grade")
assert_equal(y[train].size + y[test].size, y.size)
pkg_info = _get_package_info(key, saltenv=saltenv) if not pkg_info: continue for pkg_ver in pkg_info.keys(): if pkg_info[pkg_ver]['full_name'] == pkg_name: val = pkg_ver
new_key = tup[:i] + (_NS,) + tup[i + 1:]
if isinstance(data, (np.ndarray, Index, Series)):
X = [[1., 2.], [3., 4.]]
from __future__ import absolute_import import logging
raise KeyError
class PostDeleteHandler(object): def __init__(self, data): self.data = data
localized = DatetimeIndex(times, tz=tz, ambiguous=is_dst) self.assert_index_equal(dr, localized)
non_capturing_groups.append(len(result))
from __future__ import print_function, with_statement
response_content = {'test_response': 'test_content'} self.server.config['default'] = response_content
import re import logging
self._pool = None warnings.warn( 'Multiprocessing-backed parallel loops cannot be nested,' ' setting n_jobs=1', stacklevel=3) return 1
AUTH_BASE_URL = os.environ.get('test_url', 'http://localhost:8031')
import salt.transport.client import salt.transport.frame import salt.ext.six as six
result = func(Series([]), Series([]), 50, min_periods=min_periods) tm.assert_series_equal(result, Series([]))
todelete = [] for key in repo_opts: if repo_opts[key] != 0 and not repo_opts[key]: del repo_opts[key] todelete.append(key)
y_grid_pred = trees.predict_proba(np.c_[xx.ravel(), yy.ravel()])[:, 1]
auth.logout(request)
from openedx.core.djangoapps.programs.models import ProgramsApiConfig
try:
clf = svm.LinearSVC(penalty='l2', loss='hinge', dual=True, random_state=0) clf.fit(X, Y) assert_array_equal(clf.predict(T), true_result)
values = self.as_matrix()
nodes = modulestore().get_items(reusable_location, qualifiers={'category': 'chapter'}) new_course_loc = modulestore().delete_item(nodes[0].location, self.user_id)
salt '*' schedule.list show_all=True
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON
{{ salt['cmd.run']('whoami') }} {{ salt.cmd.run('whoami') }}
version_guid = course_key.as_object_id(version_guid) return self.db_connection.get_structure(version_guid, course_key)
if not hasattr(cls, "_plugins"): plugins = {}
delete_course_and_groups(self.course_key, self.user.id) resp = self._create_course_with_given_location(self.course_key) self.assertEqual(resp.status_code, 200)
@skipUnlessDBFeature("__class__") def test_func(): raise ValueError
if isinstance(cmd, six.string_types): cmd = cmd.split(' ')
else:
values = values[slicer]
self.assertTrue(views.is_course_passed(self.course, None, self.student, self.request))
self._city = reader self._city_file = path
with self.assertRaisesMessage(ValueError, self.error % (self.ob, ObjectA._meta.object_name)): ObjectB.objects.filter(objecta__in=[self.poa, self.ob])
is_from_cdn = StaticContentServer.is_cdn_request(request) newrelic.agent.add_custom_parameter('contentserver.from_cdn', is_from_cdn)
CourseEnrollment.enroll(user, course_id) self.assertTrue(CourseEnrollment.is_enrolled(user, course_id)) self.assert_enrollment_event_was_emitted(user, course_id)
for how in ['sort_values', 'isnull']: with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): getattr(r, how)()
URLCONF_MODULES = None
url_pattern = '/u/test#about_me' response = self._auto_auth({ 'username': 'test', 'redirect_to': url_pattern, 'staff': 'true', }, status_code=302)
os.makedirs(name)
warnings.warn("non-uniform sample weights unsupported for svd, " "forcing usage of eigen") gcv_mode = 'eigen'
saltify.__opts__ = {} saltify.__opts__['providers'] = {}
with patch_edxnotes_api_settings("http://example.com/"): self.assertEqual("http://example.com/", get_endpoint_function())
attempt.created_at = attempt.created_at - timedelta(days=364) attempt.save()
mod.__deepcopy__ = lambda x: mod
gbq.to_gbq(df_different_schema, destination_table, PROJECT_ID, if_exists='replace')
l1 = np.random.normal(size=n) l2 = np.random.normal(size=n)
try: common_type = np.common_type(np.array(res), result) if common_type != result.dtype: result = result.astype(common_type) except: pass
response = method("/request_data/?foo=whiz", data={'foo': 'bang'}) self.assertEqual(response.context['get-foo'], 'bang')
uninstaller = pkginfo[version_num].get('uninstaller')
limiter.tick_bad_request_counter(request)
return module.seed
community_ta_role.inherit_permissions(moderator_role)
if keep_blank_values: nv.append('') else: continue
assert_array_equal(rfe.get_support(), rfe_svc.get_support())
try: return self.obj._xs(label, axis=axis) except: return self.obj[label]
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import SaltException
response.collapse_body() return request, response
evecs /= np.apply_along_axis(np.linalg.norm, 0, evecs)
course5 = CourseFactory.create(org='otherorg', number='999') course5_key = course5.id
module = CapaFactory.create() self.assertTrue(module.should_show_check_button())
if 'pinned' not in thread: thread['pinned'] = False
if 'width' not in ds_input: ds_input['width'] = self.width
huge = 2 ** (n_bits + 1) clf = DecisionTreeClassifier(splitter='best', max_leaf_nodes=huge) assert_raises(Exception, clf.fit, X, y)
import logging import os import shutil
relname = path(pathname).basename()
related_models = get_related_models_recursive(old_model)
from __future__ import absolute_import import logging
__virtualname__ = 'nictagadm'
course = CourseFactory.create(mobile_available=True, default_store=modulestore_type) course_overview_1 = CourseOverview.get_from_id(course.id) self.assertTrue(course_overview_1.mobile_available)
required_content = milestones_helpers.get_required_content(course, user)
module = CapaFactory.create(rerandomize=rerandomize, done=True)
import datetime import pytz
text = f.widget.format_value(result) self.assertEqual(text, "01:30:05 PM 21/12/2010")
import msgpack
save_submission(conf, valid_repr, test_repr)
provider = generics.get_object_or_404(CreditProvider, provider_id=provider_id)
attempt.mark_ready() self._assert_course_verification_status(VERIFY_STATUS_NEED_TO_VERIFY)
from __future__ import absolute_import import copy import contextlib
model.dataset = dataset
DEBUG = False SESSION_COOKIE_SECURE = False SESSION_SAVE_EVERY_REQUEST = False SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
self.ccx = CcxFactory(course_id=self.split_course.id, coach=self.coach) last_week = datetime.datetime.now(UTC()) - datetime.timedelta(days=7)
text = f.widget.format_value(result) self.assertEqual(text, "13:30:00")
return
for key in baseline: params = baseline.copy() del params[key] with self.assertRaises(CCProcessorDataException): payment_accepted(params)
ci = self.create_index()
dists = pairwise_distances(query, X, metric='cosine').ravel()
return None
#epub_uid = ''
tasks = instructor_task.api.get_entrance_exam_instructor_task_history(course_id, entrance_exam_key)
self.client.defaults['SERVER_NAME'] = 'example.none' self.url_prefix = 'http://example.none'
if not __execute_cmd('config -g cfgUserAdmin -o \ cfgUserAdminUserName -i {0} {1}'.format(uid, username)): delete_user(username, uid) return False
if pointval: choice_element.set("point_value", str(pointval))
order = [2, 1, -1] for df in [self.frame]:
y1 += [0]*n_classes y2 += [0]*n_classes
if is_frame: single_aligner = single_aligner and aligners[0]
procedure_args['geo_col'] = self._geocol_select(geo_field, field_name)
vocabulary = defaultdict() vocabulary.default_factory = vocabulary.__len__
self.assert_numpy_array_equal( pd.to_datetime(dts, box=False), np.array([Timestamp(x).asm8 for x in dts]) )
if self.serversonly: return ""
assert (niter > 1) == (len(dbm.hidden_layers) > 1)
from __future__ import absolute_import import logging
tps = np.r_[0, tps] fps = np.r_[0, fps] thresholds = np.r_[thresholds[0] + 1, thresholds]
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) all_estimators = [GradientBoostingRegressor, GradientBoostingClassifier]
continue
if lines and not lines[-1].endswith(os.linesep): lines[-1] += os.linesep line = line_to_add lines.append(line)
self.assertEqual(response.status_code, 302) self.assertEqual(response['Location'], path)
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath ensure_in_syspath('../../')
TEST_PROFILE_IMAGE_BACKEND = deepcopy(settings.PROFILE_IMAGE_BACKEND) TEST_PROFILE_IMAGE_BACKEND['options']['base_url'] = '/profile-images/'
self.chapter = self.store.get_item(self.chapter.location)
import yaml
self.assertNotEqual(old_tab.is_hidden, new_is_hidden_setting)
self.delete_item(store, self.html_unit.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
idx = np.arange(X.shape[0]) np.random.seed(RANDOM_SEED) np.random.shuffle(idx) X = X[idx] y = y[idx]
lock_content = cls.create_image(prefix, (32, 32), 'green', '{}_lock.png', locked=True)
values = ss._data.internal_values()._valid_sp_values
if ((ascending and labels.is_monotonic_increasing) or (not ascending and labels.is_monotonic_decreasing)): if inplace: return else: return self.copy()
cmd = [composer, action, '--no-interaction', '--no-ansi']
top_level_export_dir = 'exported_source_course_with_asides' export_course_to_xml( self.store, contentstore, dest_course_key, self.export_dir, top_level_export_dir, )
site_configuration_history = SiteConfigurationHistory.objects.filter( site=site_configuration.site, ).all()
exception_classes = [StudentInputError, LoncapaProblemError, ResponseError] for exception_class in exception_classes:
try: iter(update_callbacks) self.update_callbacks = update_callbacks except TypeError: self.update_callbacks = [update_callbacks]
self.assertNumContains(sql, 'tbl_tbsp', 0) self.assertNumContains(sql, 'idx_tbsp', 2)
component_2 = _graph_connected_component(affinity, p[stop - 1]) assert_equal(component_2.sum(), component_size) assert_array_equal(component_1, component_2)
with tm.assert_produces_warnings(None): df.eval('a + b')
log = None if __name__ == '__main__':
'AUTOMATIC_VERIFY_STUDENT_IDENTITY_FOR_TESTING': False,
pass
original_context = context context = RequestContext(request, **kwargs) if original_context: context.push(original_context)
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
locked=getattr(content, 'locked', False)) as fp:
cond = (df >= 0)[1:] _check_set(df, cond)
break
if 'axes' not in d: d['axes'] = ['b', 0, 1, 'c'] self.__dict__.update(d)
X = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1], [6, 3], [-4, 7]]
for inputfile in inputfiles:
af, bf = self.intframe.align(other, join='inner', axis=1, method='pad') self.assert_index_equal(bf.columns, other.columns)
CourseFixture('foobar_org', '1117', 'seed_forum', 'seed_foo').install() print 'Forums permissions/roles data has been seeded'
refresh_db() return ret
from django.db.backends import utils return utils.format_number(value, self.max_digits, self.decimal_places)
os.remove(CONFIG)
self.assert_login_response_in_pipeline_looks_correct(student_views.signin_user(strategy.request))
temp_dir_path = tempfile.mkdtemp() self.addCleanup(shutil.rmtree, temp_dir_path)
_ = lambda text: text
self.__manager = None
TASK_LOG = logging.getLogger('edx.celery.task')
new_items = [] for item in dummies.columns: if not mapping: var = str(item) if isinstance(item, float): var = '%g' % item
shared_dataset = np.random.rand(20, 19).astype(theano.config.floatX)
students_to_generate_certs_for = students_to_generate_certs_for.filter( certificatewhitelist__course_id=course_id, certificatewhitelist__whitelist=True ).exclude( generatedcertificate__course_id=course_id, generatedcertificate__status__in=CertificateStatuses.PASSED_STATUSES )
assert_index_equal(idx1, idx2, check_exact=False)
self._require_pytz() return "django_datetime_extract('%s', %s, %%s)" % ( lookup_type.lower(), field_name), [tzname]
self.selenium.find_element_by_id('calendarlink0').click()
response['X-XRDS-Location'] = get_xrds_url('identity', request) return response
_ret[minion] = _response['rows'][0]['value']
self.course_outline.visit() self.course_outline.open_subsection_settings_dialog(0) self.course_outline.select_access_tab() self.course_outline.make_gating_prerequisite()
m1 = RegressionModelSplit(name='1') m1.save()
resp = self._get_footer(params={'language': language}) self.assertEqual(resp.status_code, 200) json_data = json.loads(resp.content)
if convnet_available.compiled: _logger.debug('already compiled') return True
response = self.session.post( STUDIO_BASE_URL + '/xblock/', data=json.dumps(create_payload), headers=self.headers, )
for name in FOREST_CLASSIFIERS: yield check_gridsearch, name
field = item
return deepcopy(problemtree)
request = HttpRequest() request.method = "GET" request.session = session
valid_assocs = [a for a in associations if a.getExpiresIn() > 0] if valid_assocs: valid_assocs.sort(lambda a: a.getExpiresIn(), reverse=True) assoc = valid_assocs.sort[0]
import salt.utils
l = [1, 2, 3]
import salt.utils
Membership.objects.create(membership_country=self.usa, person=self.jane, group=self.cia)
result = missing.fill_zeros(result, x, y, name, fill_zeros) return result
from salt.utils.odict import OrderedDict from salt.modules import boto_secgroup
value = timezone.make_aware(value.replace(tzinfo=None), tzinfo)
break
if isinstance(student_answer, list): student_answer = student_answer[0]
raise TypeError( "SparseArray does not support item assignment via setitem")
if compute_squared_diff: diff = centers[center_idx].ravel() - old_center_buffer.ravel() squared_diff += np.dot(diff, diff)
try: os.makedirs(minion_sock_dir, 0o755) except OSError as exc: log.error('Could not create SOCK_DIR: {0}'.format(exc)) if minion_sock_dir == default_minion_sock_dir: raise
gd = grid_dimension[0] grid_indices[gd] = add_mod(grid_indices[gd], step, len(grid_to_short_label[gd]))
non_int_round_dict = {'col1': 1, 'col2': 'foo'} with self.assertRaises(TypeError): df.round(non_int_round_dict)
}
self.assertFalse(CourseEnrollment.is_enrolled(self.user, self.course.id))
self.blocks = defaultdict(list)
try: value = value.reindex(self.index)._values except Exception as e:
signature = hmac.new( signing_key, string_to_sign.encode('utf-8'), hashlib.sha256).hexdigest()
if not self.env_is_exposed(tgt_env): return None
for l in [slice(3.0, 4), slice(3, 4.0), slice(3.0, 4.0)]:
return True
self.course = self.store.publish(self.course.location, self.user_id)
to_hex = BinOutput('GEOSGeomToHEX_buf') to_wkb = BinOutput('GEOSGeomToWKB_buf') to_wkt = StringFromGeom('GEOSGeomToWKT')
cached_metadata = self._get_cached_metadata_inheritance_tree(course_id, force_refresh=True) if runtime: runtime.cached_metadata = cached_metadata
poudriere.__salt__ = {}
with self.assertNumQueries(2): objs = list(qs.all()) self.assertTrue(objs[1].italianrestaurant.serves_gnocchi)
df = DataFrame(self.frame, copy=True) column = df.columns[0]
enrollment = CourseEnrollment.get_enrollment(student, self.course.id) self.assertEqual(enrollment.is_active, False)
BaseRunserverCommand = Command
self.send_response(500, 'Bad Request: does not contain API key') self.send_header('Content-type', 'text/plain') self.end_headers() return False
else: from . import __check_build from .base import clone
from salt.ext.six.moves import range
continue
_enroll_user_in_pending_courses(regs[0].user)
res = grainsmod.filter_by(dict1, grain='xxx') self.assertIs(res, None)
if self._dtype is None:
self._assert_cert_status(self.courses[0].id, self.user, CertificateStatuses.notpassing)
with self.assertRaises(AttributeError): response.content = "Hello dear" self.assertNotIn('content-type', response)
mock_prlctl = MagicMock(return_value=guid_str) with patch.object(parallels, 'prlctl', mock_prlctl): parallels.list_snapshots(name) mock_prlctl.assert_called_once_with('snapshot-list', [name], runas=None)
import salt.ext.six as six
if 'Code' in items or len(items['Images']['Image']) == 0: raise SaltCloudNotFound('The specified image could not be found.')
cls.raises_exception('localhost', ImproperlyConfigured)
import salt.utils.cloud
ports = list(map(int, str(ports).split(',')))
op = optparse.OptionParser() op.add_option("--n-times", dest="n_times", default=5, type=int, help="Benchmark results are average over n_times experiments")
scaler_batch = StandardScaler().fit(X)
return
self.assertTrue( self.run_function('shadow.set_maxdays', [TEST_USER, 20])) self.assertEqual( self.run_function('shadow.get_maxdays', [TEST_USER]), 20)
self.client.logout()
self.assertNotEqual(naturalday_one, naturalday_two)
self.login_page.visit()
monthsSince = monthsSince - 3
'reverification',
settings.DEFAULT_TEMPLATE_ENGINE['DIRS'] = [ path for path in settings.DEFAULT_TEMPLATE_ENGINE['DIRS'] if path != settings.MICROSITE_ROOT_DIR ]
pass
log.removeHandler(handler)
real_cov = np.dot(coloring_matrix.T, coloring_matrix) emp_cov = empirical_covariance(X_train) loglik_real = -log_likelihood(emp_cov, linalg.inv(real_cov))
if dr_input.lower() in self._alias: name = self._alias[dr_input.lower()] else: name = dr_input
if isinstance(self, ClassifierMixin): if self.n_outputs_ == 1: return self.classes_.take(np.argmax(proba, axis=1), axis=0)
dn_set = OrderedDict() dn_set.update(old) dn_set.update(new)
self.assertReturnNonEmptySaltType(ret) for state_id, state_result in six.iteritems(ret): self.assertSaltTrueReturn(dict([(state_id, state_result)]))
man = salt.utils.which('man') if not man: return False
if isinstance(min_itemsize, dict):
assert_equal(clf.fit(x, y).score(x, y), 1.0, 'using covariance: %s' % solver)
raise KeyError(key)
response = client2.post(self.url, creds) self._assert_response(response, success=True)
import salt.utils from salt.exceptions import CommandExecutionError
from salt.utils.openstack.pyrax import authenticate
expected = digits.target[n_samples / 2:] predicted = classifier.predict(data[n_samples / 2:])
deadline = models.DateTimeField( default=default_deadline_for_credit_eligibility, help_text=ugettext_lazy("Deadline for purchasing and requesting credit.") )
listener_state = 'cmd_|-listener_test_listen_in_resolution_|-echo "Successful listen_in resolution"_|-mod_watch' self.assertIn(listener_state, state_run)
assert_raises(VerificationException, attempt.submit) assert_raises(VerificationException, attempt.approve) assert_raises(VerificationException, attempt.deny)
if is_jail(name): return 'Looks like there was an issue deleteing jail \ {0}'.format(name)
self.assertEqual(len(cache), 1) cache_exc_msg, cache_globals = cache.values()[0] self.assertIn("ZeroDivisionError", cache_exc_msg)
import hashlib import re import salt.utils.dictupdate as dictupdate from salt.exceptions import SaltInvocationError import salt.ext.six as six
deadline = course_deadlines.get(enrollment.course_id)
pred = km.predict(X) assert_array_equal(pred, km.labels_)
if not os.path.exists(path): return 'File/Folder not found: {0}'.format(path)
target = target / 100000.0
mdata = AssetMetadata(asset_key, asset_key.path) mdata.from_storable(all_assets[asset_idx]) mdata.update(attr_dict)
mount.__grains__ = {} mount.__salt__ = {} mount.__context__ = {}
from docutils.statemachine import ViewList self.content = ViewList(lines, self.content.parent)
MAXSIZE = int((1 << 31) - 1)
profile_str = 'gce-config:' provider = 'gce' providers = self.run_cloud('--list-providers') self.INSTANCE_NAME = _random_name()
grains.update(_hw_data(grains))
attempts_left_open = CapaFactory.create(showanswer='closed', max_attempts="1", attempts="0", due=self.tomorrow_str) self.assertFalse(attempts_left_open.answer_available())
iris = load_iris() X = iris.data[:, [0, 2]] y = iris.target X = X[y != 2] y = y[y != 2]
with check_mongo_calls(0): CourseOverview.get_from_id(course.id)
self.class_names = [array[0].encode('utf-8') for array in train['class_names'][0]]
problem = self.build_problem(sample_dict=sample_dict, num_samples=10, tolerance=0.01, answer="$calculated_ans", script=script)
result[discussion_id] = UsageKey.from_string(result[discussion_id]).map_into_course(self.course_id)
STATES_WITH_STATUS = [state for state in READY_STATES] + [PROGRESS]
base = np.memmap(filename, dtype=dtype, shape=total_buffer_len, mode=mode, offset=offset, order=order) return as_strided(base, shape=shape, strides=strides)
db_alias = ( 'read_replica' if 'read_replica' in settings.DATABASES else 'default' ) return connections[db_alias].cursor()
if self.edx_video_id and edxval_api: val_youtube_id = edxval_api.get_url_for_profile(self.edx_video_id, "youtube") if val_youtube_id: video_id = val_youtube_id
self.assertNumQueries(2, f.delete)
course = get_course_and_check_access(course_key, user)
with tm.assertRaises(KeyError): df.sample(n=3, weights='not_a_real_column_name')
lr = LogisticRegression(C=1., solver='lbfgs')
if ' ' in e: first = 1 else: first = -1
from __future__ import print_function
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
@skip("Not supported by DjangoXBlockUserStateClient") def test_iter_blocks_deleted_block(self): pass
y = np.ravel(y)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
import salt.utils from salt.ext.six.moves import range
import salt.utils json = salt.utils.import_json()
if tmpdir is not None: shutil.rmtree(tmpdir)
except self.LibraryValueNotFoundException: val = None if val is None: raise ValueError("Key '%s' not found" % key) return val
'courseware', 'student',
expected.index = index expected.index.names = result.index.names tm.assert_frame_equal(expected, result)
if 'enabled' not in kwargs: schedule[name]['enabled'] = True
course_overview_after = CourseOverview.get_from_id(course.id)
retained_files |= get_first_n_at_depth(files_by_y_week_dow, first_of_week_depth, keep_count + 1)
from __future__ import absolute_import import os import logging import hashlib import glob import random import ctypes import tempfile import yaml import re import datetime import ast
response = explicit_default_view(request, '3') self.assertEqual(response.content, b'Hello World 1')
EXPECTED_ITEMS = ['Test Problem 1', 'Test Problem 2', 'Test HTML']
original = Microsite.objects.get(id=instance.id) _make_archive_copy(original)
s = Series([1, 2, 3, None, 5]) f(s)
return None
parent = models.OneToOneField(Place, models.CASCADE, primary_key=True, parent_link=True) main_site = models.ForeignKey(Place, models.CASCADE, related_name='lot')
return self.get_item(location)
f = lambda: s_or_idx.str.extract('(?:[AB]).*', expand=True) self.assertRaises(ValueError, f)
s = Series(np.random.randn(21), index=date_range(start='1/1/2012 9:30', freq='1min', periods=21)) s[0] = np.nan
top_level_export_dir = 'exported_source_course_with_asides' export_course_to_xml( self.store, contentstore, dest_course_key, self.export_dir, top_level_export_dir, )
module_location = module.location.map_into_course(target_id) _update_module_location(module, module_location.replace(revision=MongoRevisionKey.draft))
ret['result'] = False
except ValueError: return None
text = f.widget.format_value(result) self.assertEqual(text, "13:30:00")
_check_types(left.levels[level], right.levels[level], obj=obj)
kernel = (large_kernel.sum(axis=2))
self.module_store = modulestore()._get_modulestore_by_type(ModuleStoreEnum.Type.mongo)
val1 = ts.asof(str(ts.index[7])) self.assertEqual(val1, ts[4])
current_grant_by_default = _get_wmi_setting('IIsIPSecuritySetting', 'GrantByDefault', server)
result = self.client.login(username=self.USERNAME, password=self.OLD_PASSWORD) self.assertTrue(result)
update_course_structure.apply_async([unicode(course_key)], countdown=0)
if not self.theme_location: return False
docs_train, docs_test, y_train, y_test = train_test_split( dataset.data, dataset.target, test_size=0.25, random_state=None)
session = self.client.session session['attempting_upgrade'] = True session.save()
exp_in.index = exp_in.index.astype(object)
tol = 0
ix_vals = lmap(np.array, zip(*self.index.values))
return _static(path)
mi = MultiIndex.from_tuples([[1, 1, 3], [1, 1, 1]], names=list('ABC')) df = DataFrame([[1, 2], [3, 4]], mi)
if save_definition: return _save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=task_definition.Principal.UserID, password=None, logon_type=task_definition.Principal.LogonType)
axes = self.input_space.axes assert len(axes) == 4
groups = grouped.groups tm.assertIsInstance(list(groups.keys())[0], datetime)
multi_db = True
self.client.login(username="jack", password="test")
U, S, V = randomized_svd(X, n_components=n_components, n_iter=self.iterated_power, flip_sign=True, random_state=random_state)
from __future__ import absolute_import
LETTUCE_SELENIUM_CLIENT = os.environ.get('LETTUCE_SELENIUM_CLIENT', 'local')
class Model1(models.Model): pkey = models.IntegerField(unique=True, db_index=True)
self.track_selection_page.visit()
p.mugshot = self.file2 self.check_dimensions(p, 8, 4) self.assertEqual(p.mugshot.was_opened, True)
test_score -= test_score[0] test_best_iter = x[np.argmin(test_score)]
yes, no, maybe = bits[0], bits[1], bits[1]
touch(name, makedirs=makedirs) retry_res, retry_msg = _check_file(name) if not retry_res: return _error(ret, check_msg)
accept_header = self.request.headers.get('Accept', '*/*') parsed_accept_header = [cgi.parse_header(h)[0] for h in accept_header.split(',')]
CourseEnrollmentFactory( is_active=False, mode=CourseMode.NO_ID_PROFESSIONAL_MODE, course_id=self.course.id, user=self.user )
rval = -T.mean(log_hx)-T.mean(log_one_minus_hy) rval.name = 'NCE('+X_name+')'
dependencies_map = {}
required_boto3_version = '1.2.1'
assert_array_almost_equal(x_loadings_sign_flip, x_weights_sign_flip, 4) assert_array_almost_equal(np.abs(x_loadings_sign_flip), 1, 4) assert_array_almost_equal(np.abs(x_weights_sign_flip), 1, 4)
field_list = lookup.split(LOOKUP_SEP)
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(None, query) self.assertIs(result, None)
self.assertEquals(provider2.icon_image, provider1.icon_image) self.assertEquals(provider2.name, post_data['name'])
mode = 'create' mtdata = __salt__['postgres.create_metadata']( name, schema=schema, ext_version=ext_version, **db_args)
certificate.course_title = course_title_override
hosts = list(set(hosts)) return hosts
ts = Timestamp('20130501T071545.123456789') self.assertEqual(ts.value, expected_value) self.assertIn(expected_repr, repr(ts))
X = np.sort(5 * np.random.rand(40, 1), axis=0) y = np.sin(X).ravel()
assert_greater(np.mean(labels == true_labels), .3)
indptr_3 = X_sparse_unpruned.indptr[3] indptr_4 = X_sparse_unpruned.indptr[4] X_sparse_unpruned.data[indptr_3:indptr_4] = 0.0
cohort = get_course_cohorts(self.course)[0]
class BandAdmin(ModelAdmin): fields = ['name']
pass
for zp in res['stdout'].splitlines(): zp = zp.split("\t") zp_data = {}
verify_group_id_always_present(profiled_user=self.student, pass_group_id=True) verify_group_id_always_present(profiled_user=self.student, pass_group_id=False) verify_group_id_always_present(profiled_user=self.moderator, pass_group_id=True) verify_group_id_always_present(profiled_user=self.moderator, pass_group_id=False)
result = self.take(i, axis=axis) copy = True
y_pred = - clf.decision_function(X_test)
handouts_location = self.course.id.make_usage_key('course_info', 'handouts') course_handouts_url = reverse_usage_url('xblock_handler', handouts_location)
from __future__ import unicode_literals
for n_neighbors in [3, 5, 7]: I_computed = _compute_mi(x, y, False, False, n_neighbors) assert_almost_equal(I_computed, I_theory, 1)
from __future__ import absolute_import
try: mask = importances >= threshold except TypeError: raise ValueError("Invalid threshold: all features are discarded.")
import salt.ext.six as six from salt.ext.six.moves.urllib.parse import urlparse as _urlparse try: import msgpack except ImportError: import msgpack_pure as msgpack
n_samples = 10000 n_features = 100 n_queries = 30 rng = np.random.RandomState(42)
from __future__ import unicode_literals
authentication_classes = () permission_classes = ()
norb_train = FoveatedNORB(which_set="train", scale=1, restrict_instances=[4, 6, 7, 8])
#self.assertEqual(iptables.build_rule(jump='CONNSECMARK',
if issubclass(Estimator, ProjectedGradientNMF): with ignore_warnings(): yield check_get_params_invariance, name, Estimator else: yield check_get_params_invariance, name, Estimator
from __future__ import absolute_import import copy import logging
from __future__ import absolute_import
self.assertRaises(ValueError, ct, '1foo') self.assertRaises(ValueError, ct, 'foo')
self._check_sizes(space)
if len(tup) > self.ndim: result = self._handle_lowerdim_multi_index_axis0(tup) if result is not None: return result
if len(names) == 1: return ret[names[0]] return ret
safe_cookie_data_2 = SafeCookieData.parse(serialized_value) self.assertTrue(safe_cookie_data_2.verify(user_id))
n = n.astype(dtype)
from __future__ import absolute_import import os import imp import sys import salt import time import logging import inspect import tempfile import functools from collections import MutableMapping from zipimport import zipimporter
all_alphas = np.unique(all_alphas) stride = int(max(1, int(len(all_alphas) / float(self.max_n_alphas)))) all_alphas = all_alphas[::stride]
raise NotImplementedError()
self.get_session_storage(storage)._get = None
self.run_commit_hooks_on_set_autocommit_on = False
y1 = ir.predict([min(x) - 10, max(x) + 10]) assert_equal(sum(np.isnan(y1)), 2)
take_split_path = self.obj._is_mixed_type
return sorted(__salt__)
self.workd = _aligned_zeros(3 * n, self.tp) self.workl = _aligned_zeros(self.ncv * (self.ncv + 8), self.tp)
raise ValueError("'%s' does not resolve to an item that supports " "prefetching - this is an invalid parameter to " "prefetch_related()." % lookup.prefetch_through)
unmodified_overview = CourseOverview.get_from_id(course.id) self.assertEqual(unmodified_overview.version, 11)
from __future__ import unicode_literals
course_orphans = self.store.get_orphans(course_locator) self.assertEqual(len(course_orphans), 0)
- attributes: cross_zone_load_balancing: enabled: false - profile: myelbprofile
this_labels = np.unique(this_labels, return_index=True)[1][this_labels] np.testing.assert_array_equal(this_labels, labels)
return _wrap_results(get_median(values) if notempty else np.nan, dtype)
frame = self.frame.copy() expected = self.frame.copy()
dtype = self.df[col].dtype if dtype != object: value = None if value == '' else dtype.type(value)
self.assert_index_equal(right.union(left), the_union)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
if salt.utils.compare_versions(ver1=pip_version, oper='>=', ver2='1.4'): cmd.append('--pre')
for i, this_layer in list(enumerate(self.dbm.hidden_layers))[1::2]:
self.assertContentBefore(response, 'Name', 'Colored name')
sfn = tmp_filename
THEME_NAME = ENV_TOKENS.get('THEME_NAME', None) COMPREHENSIVE_THEME_DIR = path(ENV_TOKENS.get('COMPREHENSIVE_THEME_DIR', COMPREHENSIVE_THEME_DIR))
memory = Memory(os.path.join(get_data_home(), 'covertype_benchmark_data'), mmap_mode='r')
return {}
sys.path.append(project_path)
upload_start_time = datetime.utcnow().replace(microsecond=0, second=0) self.import_page.upload_tarball(self.tarball_name) self.import_page.wait_for_upload()
self.setup_user()
primary_course = CourseFactory.create(org=primary, emit_signals=True) alternate_course = CourseFactory.create(org=alternate, emit_signals=True)
ax1, ax2 = df.hist(column='height', by=df.gender, sharex=True)
pinv2_args = {'check_finite': False}
self.assertEqual(response.status_code, 302)
self.fs.delete(location_or_id)
ret_list.append('%s: %s,' % (key, val))
self.assertInCourseListing(source_course_key) self.assertInCourseListing(destination_course_key)
return self._get_label(tup, axis=0)
import salt.utils.network from salt.modules.inspectlib.dbhandle import DBHandle from salt.modules.inspectlib.exceptions import (InspectorQueryException, SIException)
if self._mode == 'r' and 'Unable to open/create file' in str(e): raise IOError(str(e)) raise
n_runs = 5
except ValidationError as err: return Response(err.messages, status=status.HTTP_400_BAD_REQUEST)
if 'matrices_save_path' not in state: state['matrices_save_path'] = None
self.assertTrue(np.array_equal(rng.asi8, rng_eastern.asi8))
resp = self.client.get(course_wiki_page, follow=False) self.assertEqual(resp.status_code, 302)
axis = np.linspace(emp_percentiles[0, col], emp_percentiles[1, col], num=grid_resolution, endpoint=True)
potential_clashes = (r for r in rel_opts.related_objects if r.field is not self) for clash_field in potential_clashes:
name = _sdecode(name) if snap_name: snap_name = _validate_snap_name(name, snap_name, runas=runas)
y_pred[:, k] += (learning_rate * tree.value[:, 0, 0].take(terminal_regions, axis=0))
for key in cli_config: setattr(self.options, key, cli_config[key])
geos_get_srid = GEOSFuncFactory('GEOSGetSRID', argtypes=[GEOM_PTR], restype=c_int) geos_set_srid = GEOSFuncFactory('GEOSSetSRID', argtypes=[GEOM_PTR, c_int])
self.series.ix[d1] = 4 self.series.ix[d2] = 6 self.assertEqual(self.series[d1], 4) self.assertEqual(self.series[d2], 6)
import logging
seed_permissions_roles(course_key)
>>> forward_data = aapl.get_forward_data(8, call=True, put=True)
from __future__ import absolute_import
setattr(self, hyperparameter.name, np.exp(theta[i:i + hyperparameter.n_elements])) i += hyperparameter.n_elements
if self.is_active and self.is_superuser: return True
if expected_labels != [self.VISIBILITY_LABEL_ALL]: expected_labels.append(self.VISIBILITY_LABEL_SPECIFIC) self.assertItemsEqual(expected_labels, [option.text for option in visibility_editor.selected_options])
pnt_wo_srid = Point(1, 1) pnt_wo_srid.srid = pnt_wo_srid.srid
needs_i8_conversion = com.needs_i8_conversion(new_dtype) if needs_i8_conversion: this_dtype = new_dtype arr = func(series, otherSeries, True) else: arr = func(series, otherSeries)
self.user.is_active = False self.user.save()
try: dt = xldate.xldate_as_tuple(cell_contents, epoch1904)
insert_system_path(opts, opts['utils_dirs'])
combined = self._data.combine(blocks, copy=copy) result[dtype] = self._constructor(combined).__finalize__(self)
result = first.difference(first._tuple_index) self.assertTrue(result.equals(first[:0]))
if not _check_cygwin_installed(cyg_arch): LOG.debug('Cygwin ({0}) not installed,\ could not update'.format(cyg_arch)) return False
dis = cosine_distances(X)
TASK_ACTION_EXEC = 0 TASK_ACTION_COM_HANDLER = 5 TASK_ACTION_SEND_EMAIL = 6 TASK_ACTION_SHOW_MESSAGE = 7
from salt.states import ports import os
return __virtualname__
info.insert(2, '')
errors = [] minions = [] for minion in response: minions.append(minion) if not response[minion]: errors.append(minion)
book, created = Book.objects.get_or_create(title="Pro Django") self.assertFalse(created)
self.assertEqual(bookmark, bookmark2) self.assertEqual(bookmark.xblock_cache, bookmark2.xblock_cache) self.assert_bookmark_model_is_valid(bookmark2, bookmark_data)
if api_response.data is not None and api_response.data != '': content = json.dumps(api_response.data)
if isinstance(account_ou, str): account_ou = account_ou.split('\\') account_ou = ''.join(account_ou)
with tm.assertRaisesRegexp(ValueError, msg): lib.maybe_convert_numeric( np.array(['foo_' + infinity], dtype=object), na_values, maybe_int)
error_msg = u"Superterrible error happened: ☠" module.lcp.get_html = Mock(side_effect=Exception(error_msg))
self.assertIn(k, body_plain) self.assertIn(v, body_plain) self.assertIn(k, body_html) self.assertIn(v, body_html)
import salt.ext.six as six
tasks = instructor_task.api.get_entrance_exam_instructor_task_history(course_id, entrance_exam_key, student)
self._assert_course_verification_status(VERIFY_STATUS_MISSED_DEADLINE)
from __future__ import unicode_literals
mb_k_means = MiniBatchKMeans(n_clusters=3, init=test_init, random_state=42).fit(X_csr) _check_fitted_model(mb_k_means)
self.courseware_page.click_previous_button_on_bottom() self.assert_navigation_state('Test Section 1', 'Test Subsection 1,1', 3, next_enabled=True, prev_enabled=True)
courses = ['toy', 'simple', 'simple_with_draft', 'test_unicode']
return format_html('{}: <a href="{}">{}</a>', capfirst(opts.verbose_name), admin_url, obj)
from __future__ import unicode_literals
mix = {'a': lrange(4), 'b': list('ab..')} dfmix = DataFrame(mix)
import os import logging
tgt = ipaddress.ip_network(tgt)
'ENABLE_COURSE_SORTING_BY_START_DATE': True,
site = AdminSite()
res = self.client.get('/dates/books/%s/' % urlbit) self.assertEqual(res.status_code, 404)
old_mixed_setting = self.ALREADY_UPDATED_MIXED_CONFIG new_mixed_setting, new_default_store_setting = self.assertMigrated(old_mixed_setting) self.assertTrue(self.is_split_configured(new_mixed_setting)) self.assertEquals(old_mixed_setting, new_mixed_setting)
saved_fields.extend(key.field_name for key in set_many_data)
return u"Course '{}' is {}Embargoed".format(self.course_id.to_deprecated_string(), not_em)
import salt.output.highstate
subobj.main_loop(time_budget=time_budget)
hadoop.__salt__ = {}
tag = course_tag_api.get_course_tag(self.user, self.course_id, self.test_key) self.assertIsNone(tag)
size += (stat.st_size // 512 + 1) * 512
import salt.ext.six as six
resp_data = json.loads(response.content) user_message_url = get_absolute_url(user_message_path) self.assertEqual(resp_data['user_message_url'], user_message_url)
t = Engine().from_string(CSRF_FAILURE_TEMPLATE)
with tm.assert_produces_warnings(FutureWarning): df.eval('c = a + b')
raise ValueError("Invalid value for test_size: %r" % test_size)
return (
if getattr(data, 'dtype', None) != _TD_DTYPE: data = to_timedelta(data, unit=unit, box=False) elif copy: data = np.array(data, copy=True)
grid_search.scoring = 'sklearn' assert_raises(ValueError, grid_search.fit, X, y)
self._bias_switch = True
self.wait_for_element_visibility(email_selector, 'Email field is visible') self.q(css=email_selector).fill(email)
self.assertUgettext('Date/time', 'Datum/Zeit')
rng = np.random.RandomState(0) X = rng.rand(10, 2)
self.assertEqual(from_lisa_select_option.get_attribute('title'), from_lisa_select_option.get_attribute('text'))
self.selenium.switch_to.window(main_window) self.wait_for_value('#id_supporting_bands', '42,98')
data = [(type(d) is dict) and d or dict(d) for d in data]
return login_required(inner)
tm.assert_frame_equal(grouped.grouper.groupings[0].obj, df) self.assertEqual(grouped.ngroups, 2)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
self.problem_page.a11y_audit.config.set_scope( include=['div#seq_content'])
self.assertIs(c.parent, p)
label = world.css_html(".level-element>header>div>div>span.xblock-display-name") assert_equal(display_name, label)
([TestTransformer1()], []),
from __future__ import absolute_import, generators, with_statement import time import logging import salt import os import os.path
X[0, 0] = 0 X[2, 1] = 0 X[4, 3] = 0 X_lil = sp.lil_matrix(X) X_lil[1, 0] = 0 X[1, 0] = 0
salt_path = os.path.abspath(os.path.join(__file__, os.path.pardir)) return {'saltpath': os.path.dirname(salt_path)}
State.objects.bulk_create([ State(name='Colorado'), State(name='Hawaii'), State(name='Texas') ])
return sorted(self.houses.all(), key=lambda house: -house.rooms.count())[0]
instance.file.delete()
if not ignore_missing: for field in mandatory_fields: if field not in request_data: field_errors[field] = {'error_code': 'missing_field_{0}'.format(field)} if field_errors: return valid_input, field_errors
flo = numpy.floor sub = numpy.subtract mul = numpy.multiply div = numpy.divide mod = numpy.mod
u = linalg.solve_triangular(self.G.T, np.dot(self.Ft.T, rt) - f.T, lower=True)
from salt.exceptions import CommandExecutionError import salt.utils
if salt.utils.is_windows(): return (False, 'The mount module cannot be loaded: not a POSIX-like system.') return True
from __future__ import unicode_literals
SEARCH_ENGINE = "search.tests.mock_search_engine.MockSearchEngine" MOCK_SEARCH_BACKING_FILE = ( TEST_ROOT / "index_file.dat" ).abspath()
X_dense[3, :] = 0.0
c = Categorical(["a", "b", "c", "a"]) with tm.assert_produces_warning(FutureWarning):
library = self.store.get_library(library_key) self.assertEqual(library.location.library_key, library_key)
non_nan_elements = com.notnull(arr).nonzero()[0] if len(non_nan_elements): return _guess_datetime_format(arr[non_nan_elements[0]], **kwargs)
disable_animations(page) page.q(css=css).filter(_is_visible).nth(source_index).click()
value = Value(value, output_field=self.lhs.output_field)
cummin = self.tsframe.cummin() expected = self.tsframe.apply(Series.cummin) tm.assert_frame_equal(cummin, expected)
#add_module_names = True
pos_switch = pos_label == 0 if pos_switch: pos_label = -neg_label
dictionary = np.array(dictionary, order='F')
bulk_write_record.index = copy.deepcopy(bulk_write_record.initial_index) bulk_write_record.course_key = course_key
from __future__ import absolute_import
line = line[10:] commented_cron_job = True
if ip in servers: rm_dns(ip, interface)
from __future__ import absolute_import import os
url = force_text(self.success_url)
from tornado import gen from tornado import ioloop from tornado import netutil
result = f.clean('2010-12-21') self.assertEqual(result, date(2010, 12, 21))
@ignore_warnings def decorator_no_warning(): _warning_function() _multiple_warning_function()
if item in ['constraint']: cmd += [item_type]
HAS_KEYSTONE = False try: from keystoneclient.v2_0 import client import keystoneclient.exceptions HAS_KEYSTONE = True except ImportError: pass
bob = User.objects.db_manager('other').create_user('bob', 'bob@example.com')
from salt.ext.six.moves import map, range, zip from salt.ext.six.moves.urllib.parse import urlencode, urlparse
STUDENT_VIEW = 'student_view'
default = 'DEFAULT'
from __future__ import absolute_import import logging from time import time, sleep
form.data[form.add_prefix(self._pk_field.name)] = None
super(ViewsTestCase, self).setUp()
self.login(self.email, self.pw)
if ssh_interface == 'private_ips': vm_['ssh_host'] = data['private_ips'][0] else: vm_['ssh_host'] = data['public_ips'][0]
result = f.clean('12-21-2010') self.assertEqual(result, date(2010, 12, 21))
from __future__ import absolute_import import logging import socket import pprint
'tcp_master_pub_port': int,
l = [] for mask in xrange(16): l.append(mlp.masked_fprop(inp, mask)) outsum = reduce(lambda x, y: x + y, l)
@python_2_unicode_compatible class Category(models.Model): name = models.CharField(max_length=20)
indexer = indexer['key']
if sparse_index is None: data, sparse_index = make_sparse(data, kind=kind, fill_value=fill_value) else: assert (len(data) == sparse_index.npoints)
self.maxDiff = 1024
self._auto_auth(self.USERNAME, self.EMAIL, False) self.dashboard.visit()
assert_almost_equal(dists[1], 1 - np.cos(np.pi / 4))
f = os.path.join(self.dirpath, 'test_squeeze' + self.ext)
with current_ioloop(self.io_loop): ret = attr(*args, **kwargs) if isinstance(ret, tornado.concurrent.Future): ret = self._block_future(ret) return ret
pass
self.course_key = SlashSeparatedCourseKey('edX', 'toy', '2012_Fall')
Site.objects.all().delete()
pickle.dumps(Item.objects.all())
if line.startswith('bridge name'): continue vals = line.split() if not vals: continue
with self.assertNumQueries(0): RestrictedCourse.is_restricted_course(course_id) RestrictedCourse.is_disabled_access_check(course_id)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
microsite = Microsite.get_microsite_for_domain(domain)
LANGUAGES = ( ('en', u'English'), ('rtl', u'Right-to-Left Test Language'),
rep = partial(np.repeat, repeats=np.add.reduceat(inc, idx))
from __future__ import unicode_literals
get_tracker.side_effect = Exception self.assertEquals( self.middleware.process_response(self.request, self.response), self.response )
field = field.ljust(140)
redirect("urlpatterns_reverse.nonimported_module.view") self.assertNotIn("urlpatterns_reverse.nonimported_module", sys.modules)
replaces = [] for migration in migrations_to_squash: if migration.replaces: replaces.extend(migration.replaces) else: replaces.append((migration.app_label, migration.name))
self.assertEqual(ser[index[1]], 1)
managed = False
response = self.client.get(reverse('branding.views.courses')) self.assertEqual(response.status_code, 200)
exc_info_on_loglevel=logging.DEBUG
import numpy import theano from theano import tensor from theano.compat.six.moves import zip as izip, reduce
if i is not None: k = res_index[i] e.args = e.args + ('occurred at index %s' % pprint_thing(k), )
self.json_kwargs['separators'] = (',', ': ')
Env.METRICS_DIR.makedirs_p() _prepare_report_dir(complexity_report_dir)
self.assertIn( ("migrations", "0001_squashed_0002"), recorder.applied_migrations(), )
return datetime.utcnow().replace(tzinfo=utc)
if 'python' in self.arguments: content = self.content self.content = self.shell.process_pure_python(content)
rerun_state = CourseRerunState.objects.update_state( course_key=rerun_course_key, new_state=state, allow_not_found=True ) CourseRerunState.objects.update_should_display( entry_id=rerun_state.id, user=user2, should_display=should_display )
return _reduce_memmap_backed(a, m)
if convert: indices = maybe_convert_indices(indices, len(self._get_axis(axis)))
atomic_transactions = True
self.provider.enable_integration = True self.provider.save()
input_dict = {'1_2_1': '0'} correct_map = problem.grade_answers(input_dict)
self.field_name = None
review3 = Review(source="Python Daily") self.assertEqual(review3._state.db, None)
rendered = "0.post%%d" %% pieces["distance"] if pieces["dirty"]: rendered += ".dev0" rendered += "+g%%s" %% pieces["short"]
self.make_course(pdf_textbooks=[PDF_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('pdf_book', book_index=0, chapter='fooey', page='xyzzy')
self.course_nav.go_to_vertical('Test Vertical-1')
import salt.utils
return
return year - year_of_birth - 1
import logging import hmac import base64 import subprocess
df2 = DataFrame({0: [np.nan, 2], 1: [np.nan, 3], 2: [np.nan, 4]}, dtype=object)
last_touch = request.session.get(LAST_TOUCH_KEYNAME)
exc_info_on_loglevel=logging.DEBUG
GIT_REPO_DIR = ENV_TOKENS.get('GIT_REPO_DIR', '/edx/var/edxapp/course_repos') GIT_IMPORT_STATIC = ENV_TOKENS.get('GIT_IMPORT_STATIC', True)
self._submit_photos( face_image=self.IMAGE_DATA, photo_id_image=self.IMAGE_DATA, full_name=self.FULL_NAME )
applied = self.frame.apply(np.mean) self.assertEqual(applied['A'], np.mean(self.frame['A']))
item2 = PaidCourseRegistration.objects.get(id=item2.id) self.assertIsNotNone(item2.course_enrollment) self.assertEqual(item2.course_enrollment.course_id, self.testing_course.id)
with cls.store.bulk_operations(course.id, emit_signals=False):
bg = nodes.container() bg['classes'] = ['lit-background'] node.append(bg)
AFFILIATE_COOKIE_NAME = 'affiliate_id'
key = com._apply_if_callable(key, self.obj)
break
apache2.service.running() \\ .require(apache2.pkg, pkg='libapache2-mod-wsgi') \\ .watch(file='/etc/apache2/httpd.conf')
self.assertTrue(self.store.has_changes(xblock))
self.stdin = sys.stdin.fileno() self.stdout = sys.stdout.fileno() self.stderr = sys.stderr.fileno()
for section in self.chapter.get_children(): section.visible_to_staff_only = True self.store.update_item(section, ModuleStoreEnum.UserID.test)
class ExplicitlyProvidedPK(models.Model): name = models.IntegerField(primary_key=True)
HAS_PSUTIL = False try: import salt.utils.psutil_compat as psutil HAS_PSUTIL = True except ImportError: pass
course_mode_info = { enrollment.course_id: complete_course_mode_info( enrollment.course_id, enrollment, modes=course_modes_by_course[enrollment.course_id] ) for enrollment in course_enrollments }
field = models.ManyToManyField("auth.Permission") name, path, args, kwargs = field.deconstruct()
self.assertTrue(linode._validate_name('foo-bar'))
self._pydsl_all_decls = {}
self.assertFalse( CourseEnrollment.objects.filter(course_id=self.course.id, user=student).exists() )
import logging logging.basicConfig(filename=TEST_ROOT / "log" / "cms_acceptance.log", level=logging.ERROR)
plus_empty = self.frame + self.empty self.assertTrue(np.isnan(plus_empty.values).all())
right = df.copy() right.iloc[1:4, 1:3] *= -2
sls_file = '{0}\\init.sls'.format(os.sep.join(repo)) if not os.path.exists(sls_file):
import os import yaml
pkg_name.reverse()
self.tsframe.to_csv(path, index=False) recons = DataFrame.from_csv(path, index_col=None) assert_almost_equal(self.tsframe.values, recons.values)
build.run(self) if getattr(self.distribution, 'running_salt_install', False):
tds = dts.diff() q = tds.quantile(.25) self.assertEqual(q, pd.to_timedelta('24:00:00'))
if CourseMode.is_white_label(course_id): course_mode = CourseMode.DEFAULT_SHOPPINGCART_MODE_SLUG else: course_mode = None
self.assertTrue(CourseEnrollment.is_enrolled(self.user, course_key)) return test_course_data
data.take(indexer, out=out, axis=i)
geom_type = 'GEOMETRY'
y_wrong = y_[:-1] assert_raises(ValueError, clf.fit, X, y_wrong)
Number.objects.filter(pk=self.n.pk).update(integer=69 % F('integer'))
self._check_colors(handles[:len(jet_colors)], linecolors=jet_colors) for h in handles: self.assertEqual(h.get_alpha(), 0.5)
from __future__ import absolute_import
certificate["version"] = CERTIFICATE_SCHEMA_VERSION if certificate.get("signatories") is None: certificate["signatories"] = [] certificate["editing"] = False return certificate
X_features = combined_features.fit(X, y).transform(X)
homework_1_score = 1.0 / 2 homework_2_score = 1.0 / 1 self.check_grade_percent(round((homework_1_score + homework_2_score) / 2, 2))
return {'ok': False, 'msg': msg}
return ((storage_used + storage_need) < (storage_total * max_disk_usage))
cwd = os.getcwd()
colors_ = cycle(colors.cnames.keys())
df.iloc[0] = np.nan expected = df[df['values'] > 2.0]
__func_alias__ = { 'list_': 'list' }
for obj_name, obj in attrs.items(): new_class.add_to_class(obj_name, obj)
salt '*' vsphere.vsan_add_disks my.esxi.host root bad-password
return self._fetch()
if LooseVersion(version) < '0.16.0': tm.assert_series_equal(result, expected, check_categorical=False) else: tm.assert_series_equal(result, expected)
return [etag_str]
overflow_grader = graders.AssignmentFormatGrader("Lab", 3, 2) lab_grader = graders.AssignmentFormatGrader("Lab", 7, 3)
for microsite in settings.MICROSITE_CONFIGURATION.itervalues(): org_filter = microsite.get('course_org_filter') if org_filter: org_filter_set.add(org_filter)
elif is_categorical_dtype(self.grouper):
try: os.remove(path) except IOError: pass return None
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.'
ret['comment'] = 'Event module not available. Schedule save failed.'
with ensure_clean_store(self.path) as store:
fake_course_key = CourseKey.from_string('course-v1:FakeOrg+CN1+CR-FALLNEVER1') self.assertEqual(utils.get_course_chapters(fake_course_key), None)
from salt.states import boto_dynamodb
connection.in_atomic_block = False
self.check_permissions(clone_request(self.request, 'POST'))
self.prepare_new_page() totals_table.drawOn(self.pdf, self.margin + left_padding, self.second_page_start_y_pos - rendered_height) return self.second_page_start_y_pos - rendered_height - self.min_clearance
helper(html_encoded, ensure_ascii=True, encode_html_chars=True) helper(html_encoded, ensure_ascii=False, encode_html_chars=True)
mongo_db = { 'host': 'localhost', 'user': '', 'password': '', 'db': 'xlog', }
clf = AdaBoostRegressor(random_state=0) clf.fit(X, y_regr) assert_array_equal(clf.predict(T), y_t_regr)
continue
return number_format_dict['format_code']
self.generate_deleted_models() self.generate_created_models() self.generate_deleted_proxies() self.generate_created_proxies() self.generate_altered_options() self.generate_altered_managers()
from salt.states import module
css_classes.append('xmodule_edit')
self.client.login(username=self.global_staff.username, password='test') response = self.client.post(url) self.assertEqual(response.status_code, 302)
value = "(%s)" if len(strings) != 1 else "(%s,)" return value % (", ".join(strings)), imports
supports_combined_alters = False
mlp_first_part = MLP( layers=[ first_indep_layer ], input_space=VectorSpace(features_in_first_mlp), input_source=('features0') )
cmd = ['prlctl', sub_cmd] if args: cmd.extend(_normalize_args(args))
import salt.utils.pycrypto from salt.exceptions import SaltInvocationError
p_shared = sharedX(zv[:,0:rows:pool_rows,0:cols:pool_cols,:]) h_shared = sharedX(zv) z_shared = sharedX(zv)
time.sleep(1) continue
FEATURES['MILESTONES_APP'] = True
self.definition = block_data.get('definition', None)
courses_list = list(get_course_enrollments(self.student, None, [])) self.assertEqual(len(courses_list), 2)
__virtualname__ = 'sysctl'
dt_str = ''.join(tokens) if parsed_datetime.strftime(guessed_format) == dt_str: return guessed_format
import os import re
import salt.ext.six as six
from __future__ import unicode_literals
import logging
template_context['js_init_parameters'] = json.dumps(frag.json_init_args).replace("/", r"\/")
data = {'artist': None, 'song': ''} form = SongForm(data, empty_permitted=True) self.assertTrue(form.is_valid())
return redirect_with_get('login', request.GET, False)
from __future__ import absolute_import
'sources': [u'example.mp4', u'example.webm'] + [video['url'] for video in encoded_videos],
answered_survey = SurveyAnswer.do_survey_answers_exist(survey, user) return not answered_survey and not has_staff_access
elif existing['code'] == 404: ret['comment'] = 'A pool with this name was not found.' else: ret = _load_result(existing, ret)
class ContactForm(Form): subject = CharField() message = CharField(widget=Textarea(attrs={'rows': 80, 'cols': 20}))
self.client = Client()
'loop_interval': float,
self.errors_occurred = False self.run_commit_hooks_on_set_autocommit_on = True
res = to_numeric(s, errors='coerce') expected = pd.Series([1., 0., np.nan]) tm.assert_series_equal(res, expected)
project_state = ProjectState() project_state.add_model(ModelState.from_model(TestModel)) with self.assertRaises(ValueError): project_state.apps
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, course_id=self.course_id, staff=True).visit()
values = _prep_ndarray(values, copy=copy)
class SightingInline(admin.TabularInline): model = Sighting
TestDaemon.transplant_configs(transport=self.options.transport)
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=rng)
__virtualname__ = 'docker'
added = self.mixed_float + self.mixed_float2 _check_mixed_float(added, dtype=dict(C=None)) added = self.mixed_float2 + self.mixed_float _check_mixed_float(added, dtype=dict(C=None))
euclidean_pkl = pickle.loads(pickle.dumps(euclidean)) pyfunc_pkl = pickle.loads(pickle.dumps(pyfunc))
from __future__ import absolute_import, print_function import glob import os import re import sys import json import time import shutil import optparse import subprocess import random
y_true, _, probas_pred = make_prediction(binary=True)
authenticate_lti_user(request, params['user_id'], lti_consumer)
shutil.rmtree(TMP_DIR)
response = _query('linode', 'boot', args={'LinodeID': linode_id, 'ConfigID': config_id})['DATA'] boot_job_id = response['JobID']
for url in user_info["header_urls"].values(): self.assertIn("http://testserver/", url)
bp = df.plot.box(colormap=cm.jet, return_type='dict') _check_colors(bp, jet_colors[0], jet_colors[0], jet_colors[2]) tm.close()
dalnet = Network.objects.create(name="DALnet") formset = HostFormSet(data, instance=dalnet, save_as_new=True)
X, y = _rescale_data(X, y, sample_weight)
request.csrf_cookie_needs_reset = True
users_state_before_fail = self._get_users_state()
if max_depth is None or depth <= max_depth:
DATE_INPUT_FORMATS = [
_check_all_orients(self.frame) self.assertEqual(self.frame.to_json(), self.frame.to_json(orient="columns"))
from __future__ import unicode_literals
dataset = fetch_olivetti_faces(shuffle=True, random_state=rng) faces = dataset.data
return False
series_rep = Series.__unicode__(self) rep = '%s\n%s' % (series_rep, repr(self.sp_index)) return rep
tuple_args = tuple(list_args) _validate_ret(parallels._normalize_args(tuple_args))
self.local_models = []
self.assertEqual(problem.context['expect'], '42')
command.handle(output_path, *org_list, courses=only_courses)
result = read_json(json, date_unit=unit) assert_frame_equal(result, df)
self.assertFalse(has_expanded_repr(df6)) self.assertFalse(has_truncated_repr(df6))
with ensure_clean_store(self.path) as store: store.append('df2', df) store.append('df2', df)
import salt.utils import salt.utils.locales from salt.modules.reg import read_value
y_ = np.dot(f, self.beta) + np.dot(r, self.gamma)
from __future__ import absolute_import import copy import errno import fnmatch import hashlib import logging import os import shutil from datetime import datetime from salt.exceptions import FileserverConfigError
import salt.utils
result = sparse.loc[sparse.x % 2 == 1] exp = orig.loc[orig.x % 2 == 1].to_sparse() tm.assert_sp_frame_equal(result, exp)
def func(cond, values, other): if cond.ravel().all(): return values
raise SkipTest("Test too slow.")
if self.opts.get('permissive_pki_access', False) and stat.S_IWGRP & fmode.st_mode: return True elif stat.S_IWGRP & fmode.st_mode: return False
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'joyent', vm_['profile'], vm_=vm_) is False: return False
self.assertEqual(resp.status_code, 400)
response = self.client.post(self.url, { "email": "invalid@example.com", "password": self.PASSWORD, }) self.assertHttpForbidden(response)
from __future__ import absolute_import import os import copy import shutil import tempfile
if not encoded_videos: video_url = self.html5_sources[0] if self.html5_sources else self.source if video_url: encoded_videos["fallback"] = { "url": video_url,
for ref in self.get_env_refs(refs_post): self.repo[ref] = refs_post[ref] for ref in refs_pre: if ref not in refs_post: del self.repo[ref] return True
if kwargs.get(push, False): ret['Push'] = __salt__['cp.push'](path)
if apply_routes: try: __salt__['ip.apply_network_settings'](**kwargs) except AttributeError as error: ret['result'] = False ret['comment'] = str(error) return ret
course = self.store.get_course(course.id) self.assertEqual(len(course.children), 1) self.assertNotIn(dangling_pointer, course.children)
if 'spelling' in sys.argv: extensions.append("sphinxcontrib.spelling")
dt = out_array.dtype if output_pixel_vals: dt = 'uint8' out_array[:, :, i] = np.zeros(out_shape, dtype=dt) + \ channel_defaults[i]
n_jobs, n_estimators, starts = _partition_estimators(n_more_estimators, self.n_jobs) total_n_estimators = sum(n_estimators)
face = face / 255
import salt.utils
import integration from salt.exceptions import CommandExecutionError
self.assertQuerysetEqual( Tag.objects.exclude(parent__annotation__name="a1"), ['<Tag: t1>', '<Tag: t4>', '<Tag: t5>'] )
y_pred_proba_mo = knn_mo.predict_proba(X_test) assert_equal(len(y_pred_proba_mo), n_output)
self.X_memmap_info = None self.y_memmap_info = None
pass
from salt.exceptions import CommandExecutionError import salt.utils
result = self.index[2:5] expected = self.index[[2, 3, 4]] self.assertTrue(result.equals(expected))
certificate_invalidation = CertificateInvalidation.objects.get(generated_certificate=generated_certificate)
out = StringIO() assert_raises(IndexError, export_graphviz, clf, out, class_names=[])
if existing['code'] == 200:
values, values_mask, other, other_mask = self._try_coerce_args( transf(values), other)
self.xblock.location = Location("org", "import", "run", "category", "stubxblock")
__virtualname__ = 'influxdb'
__virtualname__ = 'ip'
response = self.client.get('/set_session/') self.assertEqual(response.status_code, 200) self.assertEqual(response.content, b'set_session')
self.connection.ensure_connection()
with self.assertNumQueries(1): ContentType.objects.get_for_model(ContentType)
bt1_pyfunc = BallTree(X, metric=dist_func, leaf_size=1, p=2)
ogr_fields = self.layer.fields ogr_field_types = self.layer.field_types
_plotting_methods = frozenset(['plot', 'boxplot', 'hist'])
temp_storage_dir = tempfile.mkdtemp() temp_storage = FileSystemStorage(temp_storage_dir) temp_upload_to_dir = os.path.join(temp_storage.location, 'tests')
self._run_command(course_key_list=[ unicode(self.courses[0].id), unicode(self.courses[1].id) ])
n_jobs, n_estimators, starts = _partition_estimators( self.n_estimators, self.n_jobs)
s = Series(['bd asdf jfg', 'kjasdflqw asdfnfk'])
Z = -9999 + np.zeros(land_mask.shape[0]) Z[land_mask] = np.exp(kde.score_samples(xy)) Z = Z.reshape(X.shape)
if not self.conn.queue_exists(qname): return {} for queue in self.conn.list(): if queue.name == qname: return queue
elif existing['code'] == 404: ret['comment'] = 'A Profile with this name was not found.' else: ret = _load_result(existing, ret)
self.assertRaises(KeyError, self.cf.get_option, 'no_such_option')
expected = orig2.drop_duplicates(['A', 'B']) result = df2 tm.assert_frame_equal(result, expected)
salt myminion git.submodule /path/to/repo/sub/repo init=True salt myminion git.submodule /path/to/repo/sub/repo update opts='--init'
exception = getattr(klass, exception_name) return exception.__new__(exception)
m = Memory(cachedir=lfw_home, compress=6, verbose=0) load_func = m.cache(_fetch_lfw_pairs)
keystone.region_name: 'RegionOne'
xblock_family = child.attrib.pop('xblock-family', None) if xblock_family: xblock_family = self._family_id_to_superclass(xblock_family) if issubclass(xblock_family, XBlockAside): aside_children.append(child)
self.assertEqual(pueblo_json, City.objects.geojson().get(name='Pueblo').geojson)
_ = lambda text: text
for category in update.Categories: if category.Name in results['Categories']: results['Categories'][category.Name] += 1 else: results['Categories'][category.Name] = 1
tasks = instructor_task.api.get_instructor_task_history(course_id, task_type=task_type)
segment_properties = full_segment_event.get('properties', {})
kind = arr.dtype.kind if kind == 'M' or kind == 'm': return arr.dtype in _DATELIKE_DTYPES
response = self._auto_auth({ 'username': 'test', 'course_id': course_id, 'redirect': True, 'staff': 'true', }, status_code=302)
import integration import salt.utils from salttesting.helpers import ( destructiveTest )
dt = datetime(2009, 5, 16, microsecond=123) self.assertEqual(dateformat.format(dt, 'u'), '000123')
self.assertRaises(TypeError, ujson.encode, input, double_precision='9') self.assertRaises(TypeError, ujson.encode, input, double_precision=None)
if os.path.isfile(cache_file): os.remove(cache_file)
lines = list(csv.reader(StringIO(self.data1))) parser = TextParser(lines, index_col=0, chunksize=2)
from django.core.cache import cache from django.test.utils import override_settings from lang_pref import LANGUAGE_KEY
df = DataFrame({'A': [2, 3, 5], 'B': [7, 11, 13]}) s = df['A']
return self.as_string()
current_umask = os.umask(0o027) verify_files([logfile], self.config['user']) os.umask(current_umask)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
stochastic = None
self.assertFalse(self.done.inprogress()) self.assertFalse(self.not_started.inprogress())
XBlockDisableConfig.objects.create( disabled_blocks='', enabled=True )
import zipfile self.assertRaises(zipfile.BadZipfile, df.to_csv, filename, compression="zip")
P = interpolate.Akima1DInterpolator(xi, yi)
filtered_answers = {} for answer_key in answers.keys(): if answer_key in allowed_field_names: filtered_answers[answer_key] = escape(answers[answer_key])
prep_for_iexact_query = prep_for_like_query
af = AffinityPropagation(affinity="euclidean") assert_raises(ValueError, af.predict, X)
get_disk = show_disk
enc_query = self._check_query(query, city_or_country=True) return Country(self._country_or_city(enc_query))
self._assert_num_attempts(students, initial_attempts) self._test_run_with_task(reset_problem_attempts, 'reset', num_students) self._assert_num_attempts(students, 0)
assert_raises(ValueError, _inverse_binarize_thresholding, y=np.array([[1, 2, 3], [2, 1, 3]]), output_type="binary", classes=[1, 2, 3], threshold=0)
self.client = Client() cache.clear()
patcher = patch( 'social.backends.twitter.TwitterOAuth.unauthorized_token', create=True, return_value="unauth_token" ) patcher.start() self.addCleanup(patcher.stop)
parent_element.remove(solution_element)
msg = '<html>' + msg + '</html>'
_legacy_reverse_map = dict((v, k) for k, v in reversed(sorted(compat.iteritems(_rule_aliases))))
raise TypeError("'values' is not ordered, please " "explicitly specify the categories order " "by passing in a categories argument.")
__virtualname__ = 'shadow'
max_scores_cache = MaxScoresCache("test_max_scores_cache") max_scores_cache.fetch_from_remote(self.locations)
to_unset = [key for key in os.environ if key not in environ] for key in to_unset: ret[key] = setval(key, False, false_unsets, permanent=permanent)
Push.alert( data=push_payload, channels={"$in": push_channels}, where={"deviceType": "android"}, )
cv = check_cv(self.cv, classifier=False)
lon, lat = self.get_lon_lat(lonlat) npix = self._npix[zoom]
modules = get_accessible_discussion_modules(course, self.non_staff_user) self.assertTrue( all(module.display_name == 'released' for module in modules) )
if existing['code'] == 200:
if (not course_enrollment.refundable()) or skip_refund: return
import salt.daemons.flo self.master = salt.daemons.flo.IofloMaster(self.config)
from salt.states import rabbitmq_plugin
import salt.utils as utils import salt.ext.six as six
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
) self.assertIsInstance(response, HttpResponseNotModified)
return _git_run(command, cwd=cwd, runas=user, ignore_retcode=ignore_retcode, redirect_stderr=True)['stdout']
from salt.states import kmod
locs = locs.astype(int)
return True
self.class_log_prior_ = (np.log(self.class_count_) - np.log(self.class_count_.sum()))
return Bunch(data=faces.reshape(len(faces), -1), images=faces, target=target, target_names=target_names, DESCR="LFW faces dataset")
d1, d2 = self.ts.index[[5, 15]] result = self.ts.ix[d1:d2] expected = self.ts.truncate(d1, d2) assert_series_equal(result, expected)
if metric == 'precomputed' and sparse.issparse(X): neighborhoods = np.empty(X.shape[0], dtype=object)
NPM_VENDOR_DIRECTORY.mkdir_p()
@patch('salt.utils.which', lambda exe: None) def test_missing_binary_in_linux(self): self.assertTrue( salt.utils.which('this-binary-does-not-exist') is None )
if isinstance(o, Index) and o.is_boolean(): continue
LogoutPage(self.browser).visit() LmsAutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id).visit()
six.reraise(DeserializationError, DeserializationError(e), sys.exc_info()[2])
vec = vec.astype(int)
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
from __future__ import unicode_literals
d_signal.disconnect(receiver_1_arg)
centered_obs = observations - self.location_ mahalanobis_dist = np.sum( np.dot(centered_obs, precision) * centered_obs, 1)
from __future__ import unicode_literals
qs = Happening.objects.annotate(latest_time=models.Max('when')) self.assert_pickles(qs)
fmt = formats.pop(formats.index(time_format)) formats.insert(0, fmt) format_found = True
full_name = UserProfile.objects.get(user=user).name
try: result = get_result(other)
class UserRegistration(Form):
escaped_encoded_from_addr = escape(encoded_from_addr) if len(escaped_encoded_from_addr) >= 320 and truncate: from_addr = format_address(course_name)
pass
self.assertEqual(len(self._get_enrollments()), 1)
self.batch_axis=list(axes).index('b') self.axes_to_sum = list(range(len(axes))) self.axes_to_sum.remove(self.batch_axis)
from salt.modules import hg
if len(i8) and self.is_monotonic: if i8[0] != tslib.iNaT: return self._box_func(i8[0])
ret['changes']['added'] = create_result
with salt.utils.fopen(jid_file, 'w+b') as fn_: fn_.write(serial.dumps(jid_dict))
ret['comment'] = 'User {0} is already present'.format(name) return ret
self.assertEqual(len(mail.outbox), 0)
assert_raises(ValueError, enc.fit, [[0], [-1]])
rendered = pieces["short"]
self.user = UserFactory.create()
return (right_start == left_end + freq) or right_start in left
if len(found.intersection(minions)) >= len(minions): raise StopIteration()
login = self.client.login(username='testclient', password='password') self.assertTrue(login, 'Could not log in')
if os.name == 'nt': from ctypes import WinDLL lwingdal = WinDLL(lib_path)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
df2['y'] = ['g', 'h', 'i']
if settings.ROOT_URLCONF == 'lms.urls': url_pattern = '/dashboard' else: url_pattern = '/home'
container.delete(0) self.verify_groups(container, ['alpha'], [], verify_missing_groups_not_present=False)
s = ['x%d' % x for x in range(12)]
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
pass
if self.terms is not None: self.condition, self.filter = self.terms.evaluate()
d_clf = ElasticNet(alpha=alpha, l1_ratio=0.8, fit_intercept=fit_intercept, max_iter=max_iter, tol=1e-7, positive=positive, warm_start=True) d_clf.fit(X_train.toarray(), y_train)
self.assertContains(response, 'Base view for admindocs views.')
import integration import salt.utils
CONFIG_ROOT = path(os.environ.get('CONFIG_ROOT', ENV_ROOT))
date = models.DateField(db_column="event_date")
return (px_x, px_y)
kwargs = {'sort': sort} if how == 'left' else {} join_func = _join_functions[how] return join_func(lkey, rkey, count, **kwargs)
pass
expr = stripXML(self.mathml_start + expr + self.mathml_end) expected = stripXML(self.mathml_start + expected + self.mathml_end)
valid_formset = self.make_choiceformset([('Calexico', '100')]) self.assertTrue(valid_formset.is_valid()) self.assertTrue(valid_formset.has_changed())
self.assertEqual( self.run_function('shadow.get_last_change', [NO_USER]), 'ERROR: User not found: {0}'.format(NO_USER))
DEFAULT_EXCEPTION_REPORTER_FILTER = 'django.views.debug.SafeExceptionReporterFilter'
DonationConfiguration(enabled=True).save()
from __future__ import unicode_literals
total_amount = models.FloatField()
if python_shell: cmd = 'chcp 437 > nul & ' + cmd
n_components, labels = connected_components(connectivity)
text = f.widget.format_value(result) self.assertEqual(text, '21.12.2010 13:30:05')
self.assertRaises(parser.CParserError, TextReader, StringIO(data), delimiter=',', header=5, as_recarray=True)
options_str = ",".join(options)
if alias not in self.query.alias_map or self.query.alias_refcount[alias] == 1: result.append(', %s' % self.quote_name_unless_alias(alias))
new_mixed_setting = convert_module_store_setting_if_needed(copy.deepcopy(old_setting))
range = xrange zip = itertools.izip filter = itertools.ifilter map = itertools.imap reduce = reduce long = long unichr = unichr
resp = self.client.get('/') self.assertEquals(resp['X-Frame-Options'], 'ALLOW')
test_data = state_run['cmd_|-test_two_changing_states_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
error_msg = _(u"You must agree to the {platform_name} {terms_of_service}.").format( platform_name=get_themed_value("PLATFORM_NAME", settings.PLATFORM_NAME), terms_of_service=terms_link )
site_configuration = SiteConfigurationFactory.create( site=self.site, )
self.assertTrue(ax1._shared_x_axes.joined(ax1, ax2)) self.assertTrue(ax2._shared_x_axes.joined(ax1, ax2))
pkg_params = __salt__['pkg_resource.parse_targets'](name, pkgs, **kwargs)[0]
ret.update(difference)
path = event.path while path != '/': if path in config: break path = os.path.dirname(path)
sparse_classifier = BaggingRegressor( base_estimator=CustomSVR(), random_state=1, **params ).fit(X_train_sparse, y_train) sparse_results = sparse_classifier.predict(X_test_sparse)
'config_models',
self.unit_page = None
BULK_EMAIL_RETRY_DELAY_BETWEEN_SENDS = 0.02
needed_holds.append(hold)
from collections import namedtuple import datetime BlockInfo = namedtuple('BlockInfo', 'block_id, category, fields, sub_tree')
if len(name.split()) > 1: cmd_kwargs.update({'args': name.split(' ', 1)[1]})
assert_false(hasattr(SequenceDescriptor, attribute))
if not err_msg: err_msg = u"Unknown error" error_rows.append(student_fields + [err_msg]) task_progress.failed += 1 continue
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
import salt.ext.six as six
def f(): s[l] = 0
from salt.exceptions import ( #CommandExecutionError, SaltInvocationError ) from salt.utils import warn_until
for i in range(min(len(start_list), len(path_list))): if start_list[i].lower() != path_list[i].lower(): break else: i += 1
df = DataFrame(np.random.randn(4, 4), columns=list('AABC')) df.columns.name = 'foo'
#html_logo = 'images/theano_logo-200x67.png' #html_logo = 'images/theano_logo_allblue_200x46.png'
self.assertIn('DocTestCase', [t.__class__.__name__ for t in suite._tests[2:]])
if isinstance(cur, six.string_types): cur = {desired_pkgs[0]: cur} if isinstance(avail, six.string_types): avail = {desired_pkgs[0]: avail}
child_pids = p1_group.get_children(recursive=True)
self.assertRaises(ValueError, self.df.groupby, [])
vary_on_headers('Accept-language'), vary_on_cookie,
account_manager = salt.utils.vmware.get_inventory(service_instance).accountManager
from __future__ import absolute_import
new_ct = srs_output(std_call('OCTNewCoordinateTransformation'), [c_void_p, c_void_p]) destroy_ct = void_output(std_call('OCTDestroyCoordinateTransformation'), [c_void_p], errcheck=False)
import integration
b1 = Board.objects.create(name='') tag = Tag(label='VP', content_object=b1) tag.save()
cls.server_thread.is_ready.wait() if cls.server_thread.error: cls._tearDownClassInternal() raise cls.server_thread.error
from __future__ import unicode_literals
self.request.social_strategy.clean_partial_pipeline() raise OAuthValidationError( { "error": "invalid_grant", "error_description": "access_token is not valid", } )
output[asheetname] = DataFrame()
'reactor': list,
q1 = Tag.objects.filter(parent__isnull=True) q2 = Tag.objects.filter(parent__isnull=False)
__context__[contextkey] = result
self.assertIs(VerificationDeadline.deadline_for_course(self.course.id), None)
self.assertFalse(res_json['success'])
syslog.syslog(facility | level, '{0}'.format(json.dumps(ret)))
rexp = re.compile('(?m)^Conf '
mlb = MultiLabelBinarizer() assert_array_equal(mlb.fit(inp).transform(inp), indicator_mat) assert_array_equal(mlb.inverse_transform(indicator_mat), inp)
store.delete_course(refetch_course.id, user)
self.assertIsNone(VerificationDeadline.deadline_for_course(self.course.id))
self.assertFalse(form.is_valid())
self._conv_op = GpuDnnConv() self._desc = GpuDnnConvDesc(border_mode=border_mode, subsample=self._subsample, conv_mode='conv')
display_headers.append(enrollment_report_headers.get(header_element, header_element))
buf.getvalue()
self.class_names = [array[0].encode('utf-8') for array in test['class_names'][0]]
with mock.patch.object(requests, 'post') as mock_post: mock_post.return_value.text = snuggletex_resp
if self.match_check(ind, fun): return True
default_name = tpl['BACKEND'].rsplit('.', 2)[-2]
print("Computing random projection") rp = random_projection.SparseRandomProjection(n_components=2, random_state=42) X_projected = rp.fit_transform(X) plot_embedding(X_projected, "Random Projection of the digits")
qs = Employee.objects.filter( company_ceo_set__num_chairs=F('company_ceo_set__num_employees')) self.assertEqual(str(qs.query).count('JOIN'), 1)
f.image = image f.content_type = Image.MIME.get(image.format)
many_to_many = True many_to_one = False one_to_many = False one_to_one = False
self.check_components_on_page( ADVANCED_COMPONENT_TYPES, ['Word cloud', 'Annotation', 'Text Annotation', 'Video Annotation', 'Image Annotation', 'split_test'], )
std = Xc.std(axis=0) std[std == 0] = 1. fac = 1. / (n_samples - n_classes)
distances[k - n_samples] = edge.weight
context['certificate_date_issued_title'] = _("Issued On:")
try: imp.find_module(app_name) except ImportError: try: __import__(app_name) except ImportError: continue INSTALLED_APPS += (app_name,)
missing_vms = names.difference(invalid_func_vms) if missing_vms: ret['Not Found'] = list(missing_vms) ret['Not Actioned/Not Running'] = list(names)
#today = '' #today_fmt = '%B %d, %Y'
kwargs = salt.utils.clean_kwargs(**kwargs) format_ = kwargs.pop('format', None) if kwargs: salt.utils.invalid_kwargs(kwargs)
if salt.utils.is_windows(): runners = None utils = None funcs = None
self.assertTrue(all_gradesets[student1]) self.assertTrue(all_gradesets[student2]) self.assertTrue(all_gradesets[student5])
classes = [pd.Series, pd.DataFrame, pd.Panel, pd.Panel4D]
self._job_queue = queue.Queue(queue_size)
class WKBWriteFunc(GEOSFuncFactory): argtypes = [WKB_WRITE_PTR, GEOM_PTR, POINTER(c_size_t)] restype = c_uchar_p errcheck = staticmethod(check_sized_string)
return (os.access(exe, os.X_OK) and (os.path.isfile(exe) or os.path.islink(exe)))
masks = numpy.asarray([subset.sum(axis=0) for subset in data]).squeeze() nz_feats = combine(masks).nonzero()[0]
self.assertTrue(filesystem.exists(exported_asset_name)) self.assertEqual(len(exported_static_files), 1)
C = np.dot(sample_weight, y * y) * 10 if y_min is not None: y[0] = y_min sample_weight[0] = C if y_max is not None: y[-1] = y_max sample_weight[-1] = C
for lang, transcript_url in bumper_settings.get('transcripts', {}).items(): bumper_settings['transcripts'][lang] = transcript_url.replace("/static/", "")
rng = np.random.RandomState(0) n_samples = 100 n_features = 80 n_components = 30 rank = 50
assert_equal(np.size(sample_without_replacement(0, 0)), 0)
indexer = minor * N + major
if last_touch: time_since_last_activity = utc_now - last_touch
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
module.system.DEBUG = False
return False
decoded_messages = json.loads(encoded_messages, cls=MessageDecoder) self.assertEqual(messages, decoded_messages)
try: fh_ = salt.utils.atomicfile.atomic_open(path, 'w') for line in new_file: fh_.write(line) finally: fh_.close()
sample_weight = np.ones(n_samples, dtype=np.float64, order='C')
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
self.certificate_page = CertificatePage(self.browser, self.user_id, self.course_id)
from salttesting import TestCase from salttesting.mock import MagicMock, patch
ttype = 'zeromq'
for n_labels in range(2, 10): y_score = n_labels - (np.arange(n_labels).reshape((1, n_labels)) + 1)
s = self.convert()
from __future__ import absolute_import
try: starts, ends = lib.generate_slices(self.slabels, self.ngroups) except: return [], True
dive.save() self.assertEqual(dive._state.db, 'default')
set_use_numexpr(True)
assert_frame_equal(df.sample(n=1, axis='columns', weights=second_column_weight), df[['col2']])
__virtualname__ = 'service'
r1 = idx1.get_indexer(idx2._tuple_index) rexp1 = idx1.get_indexer(idx2) assert_almost_equal(r1, rexp1)
from __future__ import unicode_literals
dtype = bool f = lambda x: bool(regex.match(x))
self.outline.visit()
from __future__ import absolute_import import logging import string import json import datetime
with super(ForumEventTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
#texinfo_show_urls = 'footnote'
url_path = embargo_api.message_url_path(self.course.id, access_point) self.assertEqual(url_path, expected_url_path)
self.register_page.visit()
best = cherrypy.lib.cptools.accept([i for (i, _) in ct_out_map])
if existing['code'] == 200:
self.assertEqual(data['course_mode_slug'], "verified")
if self.ignore and field_name not in field_names: continue field = Model._meta.get_field(field_name)
value = value.replace('\\', '') if setval is None: return False return value in setval.split()
i = np.random.permutation(len(left)) left = left.iloc[i].copy() left.index = np.arange(len(left))
CreditRequirementStatus.objects.create( username=username, requirement=requirement, status='satisfied', reason={'final_grade': final_grade} )
self.assertIn(orphan_vertical.location, self.store.get_orphans(course.id))
certificate_type = context.get('certificate_type')
dti = DatetimeIndex(start=datetime(2005, 1, 1), end=datetime(2005, 1, 10), freq='D', name='index')
self._data = SingleBlockManager(data, index, fastpath=True) self._index = index self.name = name
self.assertHTMLEqual( a['mydate'].as_hidden(), '<input type="hidden" name="mydate" value="2008-4-1" id="id_mydate" />', )
'simple_history',
self.create_credentials_config() self.create_programs_config()
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.n_classes = np.unique(y).shape[0] if self.n_classes == 2: self.n_classes = 1
round_list = [1, 2] with self.assertRaises(TypeError): df.round(round_list)
smaller_major = self.panel.major_axis[::5] smaller = self.panel.reindex(major=smaller_major)
if is_mp_logging_listener_configured(): shutdown_multiprocessing_logging_listener()
def f(): s.categories = [1, 2]
from __future__ import absolute_import from __future__ import generators import os import re import sys import glob import time import codecs import logging from copy import deepcopy import types
from salt.beacons import inotify
return parse(out)
FEATURES['ENABLE_DASHBOARD_SEARCH'] = True
sparse_classifier = AdaBoostRegressor( base_estimator=CustomSVR(), random_state=1 ).fit(X_train_sparse, y_train)
ofile.write(line.strip() + os.linesep)
data[:, 2] /= data[:, 5]
geom_clone = GEOSFuncFactory('GEOSGeom_clone', argtypes=[GEOM_PTR], restype=GEOM_PTR)
result = (DataFrame.from_records(tuples, columns=columns) .reindex(columns=df.columns))
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
comment, passed, retries = _search(quidditch, retries) if not passed: return (comment, str(passed))
keyarr = _asarray_tuplesafe(key)
if node.value == '': node.value = '0'
import salt.ext.six as six from salt.ext.six.moves.urllib.error import URLError from salt.ext.six.moves.urllib.request import urlopen
p._set_single(0, 100) self.assertEqual(p.coords, (100.0, 2.0, 3.0), 'Point _set_single')
df = DataFrame({'a': [1, 2, 3]})
self._assert_num_requests(1)
component = self.store.get_item(xblock.location) component.display_name = 'Changed Display Name'
from __future__ import (absolute_import, division, print_function, unicode_literals) import pandas.util.testing as tm
option1 = main1
self.temp_dir_1 = mkdtemp() self.temp_dir_2 = mkdtemp(dir="")
df = DataFrame({'A': self.ts})
Y = np.concatenate(((1 - Y), Y), axis=1)
pass
status = [] thread = threading.Thread( target=self.run_select_for_update, args=(status,) )
discussion_topics = { "Topic B": {"id": "Topic B"}, }
self.assertRaises(ValueError, lambda: to_datetime(malformed, errors='raise'))
else: response.status_code = 403 response.content = msg
HAS_RANGE = False try: import seco.range HAS_RANGE = True except ImportError: pass
self._iterator = iter(value) if hasattr(value, 'close'): self._closable_objects.append(value)
num_concurrent_tasks = 5
from __future__ import division import warnings import numpy as np
try: dive.authors.set([mark, marty]) except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
if getattr(libvirt, 'VIR_CONNECT_BASELINE_CPU_MIGRATABLE', False): flags += libvirt.VIR_CONNECT_BASELINE_CPU_MIGRATABLE else: raise ValueError
df1 = DataFrame(columns=['a', 'b'], data=[[1, 11], [0, 22]])
return stdout
OverrideFieldData.provider_classes = None super(SharedModuleStoreTestCase, self).setUp()
data = { "form-TOTAL_FORMS": "3", "form-INITIAL_FORMS": "3", "form-MAX_NUM_FORMS": "0",
user = User.objects.get(pk=user.pk)
fignum = 1
pass
self.cart.start_purchase() self.cart.purchase()
if self._is_training_data(X): return 2. - float(self.train_sizes) / self.n_max_train_sizes else: return float(self.train_sizes) / self.n_max_train_sizes
__virtualname__ = 'virt'
with store.branch_setting(ModuleStoreEnum.Branch.published_only, course.id): store.get_item(course.location)
with tm.assertRaises(ValueError): o.sample(random_state='astring!')
#unused_docs = []
self.assertRaises(ValueError, self.read_csv, StringIO(self.ts_data), index_col=True)
(savefig_dir, source_dir, rgxin, rgxout, promptin, promptout, mplbackend, exec_lines, hold_count) = self.get_config_options()
with patch('lms.djangoapps.verify_student.models.requests.post', new=mock_software_secure_post_unavailable): attempt = self.create_and_submit() assert_equals(attempt.status, "must_retry")
_ = lambda text: text
if self.credit_type[0] not in graders: raise LoncapaProblemError('partial_credit attribute should be one of: ' + ','.join(graders))
if config[service] is None: defaults = { 'oncleanshutdown': False, 'emitatstartup': True, 'onchangeonly': False } config[service] = defaults
reverse = self.frame.reindex(columns=self.frame.columns[::-1])
m_log_alphas = -np.log10(model.cv_alphas_)
from __future__ import unicode_literals
module = descriptor
X = [X] if isinstance(X, Mapping) else X
warnings.filterwarnings(
#pylint: disable=E0602
SEARCH_ENGINE = "search.tests.mock_search_engine.MockSearchEngine"
HAS_LIBS = False HAS_SIX = False try: import requests
if root_name == COURSE_ROOT: if courselike_module.entrance_exam_enabled: remove_entrance_exam_milestone_reference(request, courselike_key) log.info( "entrance exam milestone content reference for course %s has been removed", courselike_module.id )
first_result = SoftwareSecurePhotoVerification.get_initial_verification(user=user) self.assertIsNotNone(first_result)
named_ids = [] for snap_id in snap_ids: if snapshot_id_to_name(name, snap_id, runas=runas) == snap_name: named_ids.append(snap_id)
exec(compile(open(SALT_VERSION).read(), SALT_VERSION, 'exec'))
self.assertEqual(self.video.speed, '2.0x')
if op in ['__eq__', '__ne__']: return getattr(np.array(self), op)(np.array(other))
def f(): s[l]
gcd, s, t = self._extended_gcd(self._step, other._step)
self.assertRaises(ValueError, df.to_sql, 'test_complex', self.conn)
fallback_dtype = theano.config.floatX
import logging import os
try: import pycontrol.pycontrol as f5 HAS_PYCONTROL = True except ImportError: HAS_PYCONTROL = False
if ndim == 0: return Series(result)
mock_from_django_user.return_value = Mock()
response_providers = get_credit_provider_display_names(self.course_key) self.assertListEqual(self.PROVIDERS_LIST, response_providers)
from pandas.core.series import Series
if len(col_names) == 1: data_name = col_names[0] dataset['data'] = matlab_dict[data_name] else: for name in col_names: dataset[name] = matlab_dict[name]
return 1
class Person(): pass PersonWithHeight = PersonWithHeightAndWidth = PersonDimensionsFirst = Person PersonTwoImages = Person
digits = datasets.load_digits()
pass
def test_version(self): pass
response = self.api_response() self.assertIn("/courses/{}/jump_to_id/".format(self.course.id), response.data['handouts_html'])
old_group = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, self.user_partition) self.assertIn(old_group.id, [0, 1])
return prlctl('exec', args, runas=runas)
if drop and method == 'lasso':
csrf_token = context.get('csrf_token') if csrf_token is not None: new_context['csrf_token'] = csrf_token return t.render(new_context)
request_lowstate = { "client": "local", "tgt": "*", "fun": "test.fib", "arg": ["10"] }
i = np.random.choice(len(left), n) right = concat([right, right, left.iloc[i]], ignore_index=True)
expected = ts[1:3]
"download_url": ( cert.download_url or get_certificate_url(cert.user.id, cert.course_id) if cert.status == CertificateStatuses.downloadable else None ),
if self._multi_take_opportunity(tup): return self._multi_take(tup)
for xblock in all_blocks: for __, field in xblock.fields.iteritems(): if field.is_set_on(xblock): __ = field.read_from(xblock)
self.store.publish(item_location, self.user_id) item = self.store.get_item(item_location) self.assertTrue(self.store.has_published_version(item))
chgroups(name, ()) return _dscl(['/Users/{0}'.format(name)], ctype='delete')['retcode'] == 0
return ACCESS_GRANTED
from __future__ import print_function
return ''.join(difflib.unified_diff(orig_file, new_file))
actions = [] action_form = helpers.ActionForm actions_on_top = True actions_on_bottom = False actions_selection_counter = True checks_class = ModelAdminChecks
CONTENT_RE = re.compile(r"(?P<start>\d{1,11})-(?P<stop>\d{1,11})/(?P<end>\d{1,11})")
permutation = rng.permutation(self.n) ind_test = permutation[:self.n_test] ind_train = permutation[self.n_test:self.n_test + self.n_train] yield ind_train, ind_test
mean_x2 = mean(x * x) assert_equal(var_x, mean_x2 - (mean_x * mean_x))
user2 = UserFactory.create() module.descriptor.bind_for_student(module.system, user2.id)
os.setegid(uinfo['gid']) os.seteuid(uinfo['uid'])
ps = tm.makePeriodSeries() shifted = ps.tshift(1) unshifted = shifted.tshift(-1)
svc_realpath = _get_svc_path(name)[0] down_file = os.path.join(svc_realpath, 'down')
layer_to_updated = OrderedDict()
for key, val in six.iteritems(func_globals['__opts__']): self.assertEqual(self.opts[key], val)
start = datetime.now(UTC) self.add_icrv_xblock(related_assessment_name="Midterm A", start_date=start)
from salt.utils.aggregation import aggregate, Map, Scalar
if coupon_redemption.exists(): coupon_codes = [redemption.coupon.code for redemption in coupon_redemption] order_item_dict.update({'coupon_code': ", ".join(coupon_codes)})
self._submit_photos( face_image=self.IMAGE_DATA, photo_id_image=self.IMAGE_DATA, ) attempt = SoftwareSecurePhotoVerification.objects.get(user=self.user) attempt.photo_id_key = "dummy_photo_id_key" attempt.save()
__func_alias__ = { 'set_': 'set' }
msg = "Cannot resolve keyword 'attached_comment_set' into field." with self.assertRaisesMessage(FieldError, msg): Post.objects.filter(attached_comment_set__is_spam=True)
post_params = sign(self.CLIENT_POST_PARAMS)
if base_rev is None: fast_forward = True else: fast_forward = __salt__['git.merge_base']( target, refs=[base_rev, remote_rev], is_ancestor=True, user=user)
return result.decode()
with transaction.atomic(): with transaction.atomic(): Reporter.objects.create(id=1, first_name="Tintin")
'django.contrib.auth.hashers.SHA1PasswordHasher', 'django.contrib.auth.hashers.MD5PasswordHasher',
arr = np.random.randn(N, N) lar = la.larry(arr) dma = pandas.DataFrame(arr, lrange(N), lrange(N))
if set(attrs) & found_attrs: continue
W = rng.uniform(-self.irange, self.irange, (input_dim, self.dim))
import salt.loader import salt.utils import salt.client.ssh
import salt.utils
module.system.render_template = Mock(return_value="<div>Test Template HTML</div>")
from __future__ import unicode_literals
ret['comment'] = 'Event module not available. Beacons enable job failed.'
import salt.utils.url
with self.assertRaises(SearchIndexingError): CoursewareSearchIndexer.do_course_reindex(modulestore(), self.course.id)
except (AttributeError, ValueError): violations['total'] = None return violations
sub_cmd = 'DROP ROLE "{0}"'.format(name) _psql_prepare_and_run( ['-c', sub_cmd], runas=runas, host=host, user=user, port=port, maintenance_db=maintenance_db, password=password)
assets_by_type = defaultdict(lambda: SortedAssetList(iterable=course_assets.get(asset_type, [])))
vm_['gateway'] = get_ssh_gateway_config(vm_)
from __future__ import absolute_import import os
pass
self.assertIn("2013-SEPTEMBER-16", text)
action = str(action)
F, _ = f_regression(X, y)
p.mugshot.delete(save=False) self.assertEqual(p.mugshot, None) self.check_dimensions(p, None, None)
rng = date_range('1/1/2000', '3/1/2000') idx = Index(rng, dtype=object)
if self.failed_only: opts += "--failed"
expected = DataFrame([[1, 3], [4, 6]], columns=[ 'A', 'C'], index=['X', 'Y']) assert_frame_equal(a, expected)
self.navigate_to_video()
module_count_before = len(world.browser.find_by_css(module_css))
import logging from salt.exceptions import SaltInvocationError from time import time, sleep
('completed', 'completed'),
with tm.assert_produces_warning(FutureWarning): df = make_mixed_dataframe_v2(10) gbq.generate_bq_schema(df)
city_dict = {name: coords for name, coords in city_data}
storage_class = FileSystemStorage
if 'file_client' not in __opts__ or not __opts__['file_client']: __opts__['file_client'] = 'local'
'submissions', 'openassessment', 'openassessment.assessment', 'openassessment.fileupload', 'openassessment.workflow', 'openassessment.xblock',
if 'database' not in kwargs: return False
bd = BinomialDeviance(2)
raise RedirectCycleError("Too many redirects.", last_response=response)
if whiten: assert_almost_equal(s_, np.dot(np.dot(mixing_, k_), m))
try: from libcloud.compute.drivers.cloudstack import CloudStackNetwork import libcloud.security libcloud.security.CA_CERTS_PATH.append('/etc/ssl/certs/YaST-CA.pem') HAS_LIBS = True except ImportError: HAS_LIBS = False
log = logging.getLogger(__name__)
with tm.assertRaises(ValueError): df.hist(layout=(1, 1))
assert_raises(ValueError, classifier.decision_function, X.T) assert_raises(ValueError, classifier.decision_function, X.T)
request.user = request.client.user
ls = salt.utils.alias_function(list_tab, 'ls')
self.assertEqual(a.value[0], 1)
self.lc_block = self._add_library_content_block(self.course, self.lib_key)
import os import shutil import logging import tempfile
for attr in self._attributes: setattr(self, attr, kwargs.get(attr, getattr(parent, attr)))
try: course = get_course_with_access(request.user, 'load', course_key, check_if_enrolled=check_if_enrolled) except UserNotEnrolled: raise Http404("Course not found.")
user1_new_email = "valid_user1_email@example.com" user2_new_email = "valid_user2_email@example.com"
if isinstance(bricks, str): bricks = [bricks]
result = func(arr, min_periods=15) self.assertTrue(np.isnan(result[13])) self.assertFalse(np.isnan(result[14]))
import salt.client import salt.runner import salt.wheel
import salt.utils import salt.utils.cloud import salt.utils.xmlutil import salt.utils.vmware from salt.exceptions import SaltCloudSystemExit
result = s.reindex(new_index).ffill() assert_series_equal(result, expected.astype('float64'))
mlp_second_part = MLP( layers=[ second_indep_layer ], input_space=VectorSpace(features_in_second_mlp), input_source=('features1') )
if hasattr(self, 'proxy'): proxy = self.proxy else: proxy = None
self.SETTINGS_MODULE = settings_module
assert_equal(10 + 9, n_lines)
self.assertFalse(glusterfs.create_volume('newvolume', 'host1:/brick', start=True))
X = np.arange(12).reshape(3, 4)
from __future__ import absolute_import
multi_db = True
self.assertEqual( get_list_or_404(Article.by_a_sir, title__icontains="Run"), [article] )
#self.assertIn("4 matching components", library_block.author_content)
result = Series(result, index=self.index, name=self.name)
from __future__ import unicode_literals
X[:, :n_informative] = generator.randn(n_samples, n_informative)
from __future__ import print_function from __future__ import absolute_import import copy import logging
df = DataFrame( {'col1': [1.123, 2.123, 3.123], 'col2': [1.234, 2.234, 3.234]})
import salt.config import salt.utils try: import salt.utils.cloud HAS_CLOUD = True except ImportError: HAS_CLOUD = False
self.user = User.objects.get(pk=self.user.pk)
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.save_problem(get_request_dict)
clf = BernoulliNB(alpha=1.0) clf.fit(X, Y)
with self.assertNumQueries(1): all_deadlines = VerificationDeadline.deadlines_for_courses(course_keys) self.assertEqual(all_deadlines, {})
epoch_num = 6 termination_criterion = EpochCounter(epoch_num)
task_folder = task_service.GetFolder(location)
if isinstance(mine_args, dict): self.args = [] self.kwargs = mine_args elif isinstance(mine_args, list): self.args = mine_args self.kwargs = {}
exc_info_on_loglevel=logging.DEBUG
return running( name, restart=restart, update=update, user=user, conf_file=conf_file, bin_env=bin_env )
msg_p_elements = msg_div_element.findall('p') self.assertEqual(msg_p_elements[0].tag, "p") self.assertEqual(msg_p_elements[0].text, "Test message 1")
if block_type == 'course': block_id = self.DEFAULT_ROOT_COURSE_BLOCK_ID elif block_type == 'library': block_id = self.DEFAULT_ROOT_LIBRARY_BLOCK_ID new_usage_key = course_key.make_usage_key(block_type, block_id)
super(SplitMongoModuleStore, self).clone_course(source_course_id, dest_course_id, user_id, fields, **kwargs) return new_course
import os import logging
en_message = "Hello world!" es_message = "Hola mundo!"
ml_cost = (self.free_energy_given_v(pos_v).mean() - self.free_energy_given_v(neg_v).mean())
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'ec2', vm_['profile'], vm_=vm_) is False: return False
'status',
np.unique(self.ts)
SuperWeightDoubling = WeightDoubling
base_url = AssetBaseUrlConfig.get_base_url() excluded_exts = AssetExcludedExtensionsConfig.get_excluded_extensions() url = StaticContent.get_canonicalized_asset_path(course_id, rest, base_url, excluded_exts)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if convnet_available.compile_error: _logger.debug('error last time') return False
log = logging.getLogger(__name__)
if '.' not in var and 'e' not in var.lower(): self.literal = int(self.literal)
pass
if hasattr(cls, method_name): continue meth = cls.__promise__(method_name) setattr(cls, method_name, meth)
'options': self.xml.get('options'), 'testdat': 'hello world',
self.space._validate_impl(is_numeric, batch[0])
response = self._generate()
costMatrix *= T.neq(Y, -1) return model.cost_from_cost_matrix(costMatrix)
self.traverse_qs( Person.objects.prefetch_related('houses__rooms', 'houses'), [['houses', 'rooms']] )
many_to_many = False many_to_one = True one_to_many = False one_to_one = False
try: from salt._compat import ElementTree as ET HAS_ELEMENT_TREE = True except ImportError: HAS_ELEMENT_TREE = False
self.assertEqual(res_json['message'], u'Please select certificate statuses from the list only.')
x = X.mean(axis=0) d = clf.decision_function([x])
('cart', 'cart'),
elif revision == ModuleStoreEnum.RevisionOption.draft_only: return get_draft()
response = default_view(request, '1') self.assertEqual(response.content, b'Hello World 1')
new_key = self.index._convert_scalar_indexer(key, kind='getitem') if type(new_key) != type(key): return self.__getitem__(new_key) raise
fig.subplots_adjust(wspace=0, hspace=0)
if missing_values == 0: n_zeros_axis = np.zeros(X.shape[not axis], dtype=int) else: n_zeros_axis = X.shape[axis] - np.diff(X.indptr)
import salt.utils import salt.utils.dictupdate import salt.utils.minions
msg_format = _("Progress: {action} {succeeded} of {attempted} so far")
self.assertTrue(obj.custom_valid_name.name.endswith("/random_file_valid")) obj.custom_valid_name.close()
from __future__ import unicode_literals
active_reg_button = not(registered or is_course_full or not can_enroll)
with salt.utils.fopen(path, 'r') as fp_: return fp_.read()
try: del self['_session_expiry'] except KeyError: pass return
Map.__salt__ = __salt__ _globals['Map'] = Map
if __opts__['test']: ret['result'] = None ret['changes'] = {'reg': {'Will remove': remove_change}} return ret
with self.assertRaises(forms.ValidationError): f.clean('2010-12-21 13:30:05')
] DATETIME_INPUT_FORMATS = [
with self.settings(PIPELINE_ENABLED=True): js_include = compressed_js('base_application') self.assertIn(u'lms-base-application.js', js_include)
axarr = np.empty(nplots, dtype=object)
blocked_states.append('IM') cauth.embargoed_countries = 'US, AQ, IM' cauth.save() currently_blocked = EmbargoedState.current().embargoed_countries_list
self.assert_enrollment_status(as_server=True, mode='professional')
if modules_max_memory is True: resource.setrlimit(resource.RLIMIT_AS, old_mem_limit) self.module_refresh.value = False
mode_result = 6
self.assertEqual( dict(self.cd), {'foo': 'global'}, )
ret = self.run_function( 'state.sls', mods='pip-installed-weird-install' ) self.assertSaltTrueReturn(ret)
def no_available_apps(self): raise Exception("Please define available_apps in TransactionTestCase " "and its subclasses.") TransactionTestCase.available_apps = property(no_available_apps) TestCase.available_apps = None
if level is not None and (self_is_mi or other_is_mi): return self._join_level(other, level, how=how, return_indexers=return_indexers)
self.assertTrue(self.cart.has_items(item_type=Donation)) self.assertEqual(self.cart.total_cost, unit_cost)
df = DataFrame({"a": [True, False], "b": [1, 0]})
_network_errno_vals = (
different = (mbk_means_labels == 4) ax = fig.add_subplot(1, 3, 3)
else: rng = (nanops.nanmin(x), nanops.nanmax(x)) mn, mx = [mi + 0.0 for mi in rng]
self.assertDeserializeEqual(False, 'false') self.assertDeserializeEqual(True, 'true') self.assertDeserializeEqual(-2.78, '-2.78')
domain = DNS_NAME
intersphinx_mapping = { 'python2': ('http://docs.python.org/2', None), 'python3': ('http://docs.python.org/3', None) }
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
import salt.ext.six.moves.http_client from salt.exceptions import CommandExecutionError
from __future__ import absolute_import import copy
'AUTH_USE_OPENID': False, 'AUTH_USE_CERTIFICATES': False, 'AUTH_USE_OPENID_PROVIDER': False, 'AUTH_USE_SHIB': False, 'AUTH_USE_CAS': False,
class BoundaryForm(ModelForm): class Meta: model = BoundaryModel fields = '__all__'
self.upgrade_page.indicate_contribution()
raw = [ ('s1', ('s1_db', ['bravo', 'alpha'])) ]
meta_dict = json.loads(profile.meta) if profile.meta else {} for meta_feature, meta_key in meta_features: student_dict[meta_feature] = meta_dict.get(meta_key)
try: return render(request, path) except TemplateDoesNotExist: return technical_500_response(request, *sys.exc_info())
ext_ring = args[0] init_holes = args[1:] n_holes = len(init_holes)
if exc.winerror == 1332: return '' else: raise
module = CapaFactory.create(rerandomize=rerandomize, attempts=0)
clf = GridSearchCV(clf, {'anova__percentile': [5, 10, 20]}, cv=cv)
for student in students[2:5]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.error, mode='honor', grade=default_grade )
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
while not lines[0].startswith('{') and not lines[0].startswith('['): lines = lines[1:]
cop[:5] = 97 self.assertEqual(cop.sp_values[0], 97) self.assertNotEqual(self.bseries.sp_values[0], 97)
course = self._create_course("verified") self._set_contribution("12.34", course.id)
self._queryset = qs
self.assertTrue(isinstance(value, (int, compat.long))) self.assertEqual(value, equal)
from __future__ import absolute_import import os from time import sleep import textwrap
logging.getLogger().setLevel(logging.ERROR)
if not connection.ops.geojson: with self.assertRaises(NotImplementedError): list(Country.objects.annotate(json=functions.AsGeoJSON('mpoly'))) return
self.selenium.find_element_by_link_text('Add another Profile').click() self.selenium.find_element_by_link_text('Add another Profile').click()
if self.index is None: return []
'max_event_size': int,
if fill_value.dtype == np.object_: dtype = np.dtype(np.object_) fill_value = np.nan
self.subcluster_labels_ = clusterer.fit_predict( self.subcluster_centers_)
joined = df.join(df2, on=['key']) expected = df.join(df2, on='key')
myiterator = d.iterator(mode=i, batch_size=b, num_batches=n, data_specs=self._flat_data_specs, return_tuple=True, rng=sd)
import salt.utils.locales
task_folder = task_service.GetFolder(location) folders = task_folder.GetFolders(0)
rng = np.random.RandomState(0) n_samples, n_features, n_components = 500, 2, 2
from pylearn2.blocks import Block, StackedBlocks from pylearn2.models import Model from pylearn2.utils import sharedX from pylearn2.utils.theano_graph import is_pure_elemwise from pylearn2.utils.rng import make_np_rng, make_theano_rng from pylearn2.space import VectorSpace
from __future__ import unicode_literals
import os import random
assert_array_equal(votes, np.round(decisions))
if role is not None: role().add_users(user)
self.assertEqual(pivoted.index.name, 'index') self.assertEqual(pivoted.columns.name, 'columns')
grouped = self.ts.groupby(self.ts * np.nan) self.assertEqual(self.ts.dtype, np.float64)
split_test = self._update_partition_id(0) self.assertEqual(2, len(split_test.children)) initial_group_id_to_child = split_test.group_id_to_child
res_val = df.ix["j", 0] self.assertEqual(res_val, exp_val)
@python_2_unicode_compatible class Person(models.Model): name = models.CharField(max_length=128)
if 'Key not removed' in rval: return 'Key not removed' elif 'Key removed' in rval: return 'Key removed' else: return 'Key not present'
info = salt.utils.alias_function(version, 'info')
io_loop = io_loop or tornado.ioloop.IOLoop.current() if io_loop not in AsyncAuth.instance_map: AsyncAuth.instance_map[io_loop] = weakref.WeakValueDictionary() loop_instance_map = AsyncAuth.instance_map[io_loop]
self.assertTrue( self.run_function('softwareupdate.schedule_enable', [True])) self.assertTrue(self.run_function('softwareupdate.schedule_enabled'))
X, y = make_classification(n_samples=20, n_features=10, shuffle=False, random_state=0)
return None
course_outline.visit() subsection = course_outline.section_at(0).subsection_at(0) subsection.expand_subsection() subsection.add_unit()
exclude_trees = []
import matplotlib.pyplot as plt import numpy as np from time import time
if e.args[0] in self.codes_for_integrityerror: six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2]) raise
import re import os
self.assertEqual(new, City.objects.get(name='NullCity').point)
with self._mock_xqueue() as mock_queue: certs_api.generate_example_certificates(self.COURSE_KEY)
self.assertEqual(idx.reindex(dt_idx.values)[0].name, None) self.assertEqual(idx.reindex(dt_idx.tolist())[0].name, None)
'verify_master_pubkey_sign': bool,
VerificationDeadline.objects.all().delete()
return list(map(_normalize_dir, ret))
num_choices = len(self.descriptor.get_children())
self.assertEqual(1, len(nullqs)) self.assertEqual('Puerto Rico', nullqs[0].name)
S = np.dot(X, X.T) af = AffinityPropagation(affinity="precomputed") af.fit(S) assert_raises(ValueError, af.predict, X)
self.panel4d['strings'] = 'foo' result = self.panel4d.xs('D', axis=3) self.assertIsNotNone(result.is_copy)
with self.assertRaises(ValueError): self.runtime.service(self.mock_block, 'user_tags').get_tag('fake_scope', self.key)
bower.__salt__ = {} bower.__opts__ = {'test': False}
for label_index, weight in enumerate(n_samples_per_label): lightest_fold = np.argmin(n_samples_per_fold) n_samples_per_fold[lightest_fold] += weight label_to_fold[indices[label_index]] = lightest_fold
__virtualname__ = 'dockerng'
levels = [[0, 1], [0, 1, 2, 3]] labels = [[0, 0, 1, 1], [0, 2, 0, 2]]
logging_config_func = import_string(logging_config)
assert isinstance(sls_data, OrderedDict) assert not isinstance(yml_data, OrderedDict)
if ret is None: lines.append(str(entry)) ret = 'new'
result = get_email_params(self.course, False)
xpath = "//option[@selected='true']/b" self.assert_has_text(xml, xpath, 'Option 2')
for idx in range(3): self._create_cert(self.courses[idx].id, self.user, CertificateStatuses.error)
os.remove(path)
if not connection.ops.geojson: with self.assertRaises(NotImplementedError): Country.objects.all().geojson(field_name='mpoly') return
partial( wrap_xblock, 'PreviewRuntime', display_name_only=display_name_only, usage_id_serializer=unicode, request_token=request_token(request) ),
self.assertFalse(result['success']) self.assertIn(u"inconsistent data", result['error_html'])
for student in students[:4]: CertificateWhitelistFactory.create( user=student, course_id=self.course.id, whitelist=True )
log = logging.getLogger(__name__)
calendar0 = self.selenium.find_element_by_id('calendarin0') tds = calendar0.find_elements_by_tag_name('td')
assert_less(0, 1) _assert_less(0, 1) assert_raises(AssertionError, assert_less, 1, 0) assert_raises(AssertionError, _assert_less, 1, 0)
module = None
idx = DatetimeIndex(['2013-01-01', '2013-01-02'], dtype='datetime64[ns, US/Eastern]')
for student in students[5:6]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.deleted, mode='honor', grade=default_grade )
try: connection.commit() except DatabaseError: try: connection.rollback() except Error: connection.close() raise
data = cls._coerce_to_ndarray(data)
import integration
pkg_info = self._pkgdb_fun('info', package, self.db_conn) if pkg_info is None: raise SPMInvocationError('Package {0} not installed'.format(package))
index = self.index[::-1] expected = Index(self.index.values[::-1], name='foo') self.assert_index_equal(index, expected)
if kw_overrides_match is _marker: return profile_match return kw_overrides_match
node = _guess_node_id(node) apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
node = etree.Element('unknown') descriptor.add_xml_to_node(node)
raet_publish.__opts__ = {}
pidx = idx.to_period(freq='M') mask = isnull(pidx) assert (mask[0]) assert (not mask[1:].any())
import salt.ext.six as six
self.assertEqual(hasher.encode.call_count, 3)
_check_case([0], [5], [], [], [], []) _check_case([], [], [], [], [], [])
for supported_code in supported_lang_codes: if supported_code.startswith(generic_lang_code + '-'): return supported_code
self.video.show_captions()
extlinks = {'issue': ('https://github.com/pydata/pandas/issues/%s', 'GH'), 'wiki': ('https://github.com/pydata/pandas/wiki/%s', 'wiki ')}
self.selenium.execute_script("location.reload()") self.wait_page_loaded()
timed_exams = [ timed_exam for timed_exam in _timed_exams if is_item_in_course_tree(timed_exam) ]
with option_context('display.unicode.east_asian_width', True):
sort_order = 'name' topics = get_alphabetical_topics(course)
class ThreadLocalIO(threading.local): wkt_r = None wkt_w = None wkb_r = None wkb_w = None ewkb_w = None
self.assertContains(response, threepwood.username, count=2) self.assertNotContains(response, marley.username)
rng = np.random.RandomState(0) X_ = rng.random_sample((5, 10)) y_ = np.ones(X_.shape[0]) y_[0] = 0
validate_xml(input_xsd, output_xml)
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
result = _rollf(result)
if not hasattr(self.user, '_roles'): self.user._roles = RoleCache(self.user)
system = -4
if sl_: tmpret = _get_template_texts(source_list=sl_, template=template, defaults=defaults, context=context) if not tmpret['result']: return tmpret text = tmpret['data']
resp_params = PaymentFakeView.response_post_params(post_params) self.assertEqual(resp_params.get('decision'), 'REJECT')
self.assertEqual(len(res['a'].collections), 1)
CreditCourse.objects.create( course_key=self.course.id, enabled=True, )
testit('T', lambda x: 'm')
self.comp_func = lambda obj: ( obj.tag, obj.content_type.model_class(), obj.object_id )
response.render() pickled_response = pickle.dumps(response) unpickled_response = pickle.loads(pickled_response)
xp = DataFrame(index=['a']) rs = xp.apply(lambda x: x['a'], axis=1) assert_frame_equal(xp, rs)
"payment_params": get_signed_purchase_params( cart, callback_url=callback_url, extra_data=extra_data ),
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.'
set_course_cohort_settings(course_key=self.course.id, is_cohorted=True) check_cohorted(True)
from __future__ import absolute_import import socket
grains['os'] = grains['osfullname'] = 'Solaris' grains['osrelease'] = ''
files_to_fingerprint = list(PYTHON_REQ_FILES)
Site.objects.clear_cache()
if self.squeeze:
__array_priority__ = 1000
X = check_array(X, accept_sparse=['csc'], ensure_2d=False) if issparse(X): X.sort_indices()
mixed = Series(['aBAD_BAD', NA, 'BAD_b_BAD', True, datetime.today(), 'foo', None, 1, 2.])
object_domain = RequestSite(request).domain
idx = pd.Index(list('abc'))
self.assertTrue(fstats_post.st_mtime, fstats_orig.st_mtime-age)
target = MultiIndex.from_tuples(target)
ret['result'] = False ret['comment'] = \ 'Failed to configure repo \'{0}\': {1}'.format(name, exc) return ret
qry = 'CHECK TABLE {0}.{1}'.format(s_name, s_table) _execute(cur, qry) results = cur.fetchall() log.debug(results) return results
from __future__ import unicode_literals
if not cpy_error and 'port' in mod_opts: return __virtualname__
with tm.assertRaisesRegexp(ValueError, length_error): self.index.copy().set_levels([['a'], ['b']])
page_number = link_info.split('>')[0].split('&page=')[1]
from __future__ import absolute_import import os import re import sys import time import types import socket import logging import logging.handlers import traceback import multiprocessing
import subprocess
ind2 = self.index.set_labels(new_labels) assert_matching(ind2.labels, new_labels) assert_matching(self.index.labels, labels)
config = sconfig.cloud_config('/etc/salt/cloud') self.assertEqual(config['log_file'], env_fpath) os.environ.clear() os.environ.update(original_environ)
DATETIME_INPUT_FORMATS = [
state_run = self.run_function('state.sls', mods='requisites.listen_simple')
for block in blocks: for field in fields: self.assertEquals( block_structure.get_xblock_field(block.location, field), block.field_map.get(field), )
'service_status',
if '_ordered' not in state:
non_staff_client, _ = self.create_non_staff_authed_user_client() response = non_staff_client.get(index_url, {}, HTTP_ACCEPT='application/json') self.assertEqual(response.status_code, 403)
epoch_num = 6 termination_criterion = EpochCounter(epoch_num)
lm = LayerMapping(County, co_shp, co_mapping, source_srs=4269) lm = LayerMapping(County, co_shp, co_mapping, source_srs='NAD83')
if not channel.startswith('#'): channel = '#{0}'.format(channel)
ptr_type = c_void_p
if not comps: continue
result = f.clean('21.12.2010') self.assertEqual(result, date(2010, 12, 21))
if lang_code == 'zh_HANT': self.video.select_language(lang_code) unicode_text = lang_text.decode('utf-8') self.assertIn(unicode_text, self.video.captions_text)
setattr(cls, self.attname, SpatialProxy(Geometry, self))
X = np.array([
query = self._course_key_to_son(location.course_key) query['definition.children'] = location.to_deprecated_string()
result = sparse.loc[sparse % 2 == 1] exp = orig.loc[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
assert_raises_regexp = assert_raises_regex
result = f.clean('01:30 PM') self.assertEqual(result, time(13, 30, 0))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21")
'cache_jobs': bool,
self.setup()
self.assertEqual('10000', nformat(self.l, decimal_sep='.', decimal_pos=0, grouping=0, force_grouping=True))
if not key: query_params['recurse'] = 'True' function = 'kv/' else: function = 'kv/{0}'.format(key)
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
from __future__ import absolute_import import re import sys
if name is not None:
readline.set_history_length(300)
try: config = salt.template.compile_template( sls_file, renderers, __opts__['renderer'], __opts__['renderer_blacklist'], __opts__['renderer_whitelist'])
for axis, labels in self.non_index_axes: obj = _reindex_axis(obj, axis, labels, columns)
hidden = False
DATE_INPUT_FORMATS = [
result = df.iloc[np.array([True] * len(mask), dtype=bool)] assert_frame_equal(result, df)
self.assertIsInstance(p.mugshot, TestImageFieldFile) self.assertEqual(bool(p.mugshot), False)
est = DummyRegressor(strategy="quantile", quantile=0.8) est.fit(X_learn, y_learn) y_pred_learn = est.predict(X_learn) y_pred_test = est.predict(X_test)
data_types = {} data_types_suffix = {} data_type_check_constraints = {} ops = None vendor = 'unknown' SchemaEditorClass = None
np.testing.assert_array_equal(grad_x.data[grad_x.data > 0], grad_y.data[grad_y.data > 0])
'ajax_url': '{}/xmodule_handler'.format(location.to_deprecated_string()), 'element_id': u'i4x-HarvardX-ER22x-conditional-condone', 'depends': u'i4x-HarvardX-ER22x-problem-choiceprob'
from __future__ import absolute_import
self.lc_block = self.store.get_item(self.lc_block.location) self._bind_course_module(self.lc_block) self.lc_block.xmodule_runtime.publish = self.publisher
self.get_select_option(from_box, str(self.peter.id)).click() self.get_select_option(from_box, str(self.lisa.id)).click()
from __future__ import unicode_literals
self.mountpoint = ''
values = ['2014', '2013/02', '2013/01/02', '2013/02/01 9H', '2013/02/01 09:00'] for v in values:
add_user_with_status_unrequested(user) course_creator_status = get_course_creator_status(user)
data.take(indexer, out=out, axis=i)
cls.clear_caches()
from __future__ import unicode_literals
foreign_fields = getattr(field, 'foreign_related_fields', ()) if len(foreign_fields) == 1 and not foreign_fields[0].primary_key: return self.values(foreign_fields[0].name)
self.options.log_file_level = self.config.get(cli_setting_name)
if not referer: return True
if os.path.isfile(cache_file): cache_file_mtime = os.path.getmtime(cache_file) else: cache_file_mtime = 0
context['show_homepage_promo_video'] = microsite.get_value('show_homepage_promo_video', False)
result = df['A'] - df['A'].shift() self.assertEqual(result.dtype, 'timedelta64[ns]')
log_url = sanitize_url(url_full, hide_fields)
try:
result = data.unstack(fill_value='d') assert_frame_equal(result, expected)
Number.objects.filter(pk=self.n.pk).update(integer=15 + F('integer'), float=42.7 + F('float'))
import salt.utils import logging import re
df.to_csv(path) result = self.read_csv(path, index_col=0, parse_dates=['B']) tm.assert_frame_equal(result, df)
self.current_block = NonComment(0, 0)
def wrap_f_init(*args): data = f_init(*args) length = len(data) / 2 return data[:length], data[length:] return wrap_f_init
children = self.client.get_children(self.path, self._watch_lease_change)
account_settings = AccountSettingsPage(self.browser).visit() account_settings.switch_account_settings_tabs('accounts-tab')
self.cohort_management_page.select_discussion_topic(self.inline_key)
ssh_dir = os.path.dirname(full) if user: uinfo = __salt__['user.info'](user)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
df = concat([df1, df2], axis=1) assert_frame_equal(df.iloc[:, :4], df1) assert_frame_equal(df.iloc[:, 4:], df2)
CohortFactory(course_id=course.id, name="ManualCohort") CohortFactory(course_id=course.id, name="ManualCohort2")
assert np.all((ps == 0) + (ps == 1)) assert np.all((hs == 0) + (hs == 1))
self.course = CourseFactory.create()
latex_documents = [ ('index', 'performance.tex', u'pandas vbench Performance Benchmarks', u'Wes McKinney', 'manual'), ]
state_ret['result'] = None
call_command('loaddata', *self.fixtures, **{'verbosity': 0, 'database': db_name})
import salt.utils import salt.key
self.assert_enrollment_status(as_server=True, mode=CourseMode.VERIFIED)
from salt.ext.six import binary_type, string_types, text_type from salt.ext.six.moves import cStringIO, StringIO
#after = _sed_esc(after, escape_all) limit = _sed_esc(limit, escape_all)
return [ destination_course.make_usage_key(*k) for k in dest_structure['blocks'][block_key].fields['children'] ]
idx2 = TimedeltaIndex(['1 days', np.nan, '3 days', 'NaT']) self.assertFalse(idx2.is_monotonic)
handout_links = self.course_info_page.handout_links self.assertEqual(len(handout_links), 1) self.assertIn('demoPDF.pdf', handout_links[0])
response = copy(obj_b)
is_mi_columns = isinstance(self.columns, MultiIndex) try: if key in self.columns and not is_mi_columns: return self._getitem_column(key) except: pass
except ItemNotFoundError: return False
from salt.states import hipchat
adj = _get_adjustment()
def check(result, expected): tm.assert_numpy_array_equal(result, expected) tm.assertIsInstance(result, np.ndarray)
__virtualname__ = 'svn'
mixed = Series(['aafootwo', NA, 'aabartwo', True, datetime.today(), None, 1, 2.])
if ret and 'ret_kwargs' in ret: _options.update(ret['ret_kwargs'])
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.bio_book])
command = app_name
result = merge(df1, df2, how='outer') self.assertTrue(len(result) == 2000)
return
if thirdparty: scheme = "https" if settings.HTTPS == "on" else "http" url = '{scheme}://{host}{path}'.format( scheme=scheme, host=settings.SITE_NAME, path=url )
row = self.n_eigen + self.minibatch_index self.Xt[row] = x
cb = self.kwds.pop('colorbar', self.colormap or c_is_column)
view_name = None
if wt_detached: tags_found = _git_tag_points_at(cwd, wt_head, user) if tags_found: wt_ptr['tags'] = tags_found
dates = DatetimeIndex(start=reference_start_date, end=reference_end_date, freq=year_offset, tz=start_date.tz)
custom_colors = ['#F00', '#00F', '#FF0', '#000', '#FFF'] _check_plot_works(df.plot, color=custom_colors, subplots=True, filterwarnings='ignore')
data = 'A,B\n0,0\n0,'
import tornado import tornado.gen import tornado.netutil import tornado.concurrent from tornado.ioloop import IOLoop from tornado.iostream import IOStream
from __future__ import absolute_import import logging import yaml import urllib
error_code = models.CharField(blank=True, max_length=50)
elif isinstance(key, slice): pass
if hasattr(value, 'deconstruct'): return DeconstructableSerializer(value)
valid_file = TemporaryFile() test_file = TemporaryFile()
self.assertIn('Traceback', result['success'])
out, err = DETAILS['server'].sendline(cmd)
if force: file_attributes = win32api.GetFileAttributes(path) win32api.SetFileAttributes(path, win32con.FILE_ATTRIBUTE_NORMAL)
start = TODAY().replace(tzinfo=pytz.UTC) override_field_for_ccx(ccx_course_object, master_course_object, 'start', start) override_field_for_ccx(ccx_course_object, master_course_object, 'due', None)
for name in SCORERS.keys(): yield check_scorer_memmap, name
FEATURES['ENABLE_LTI_PROVIDER'] = True INSTALLED_APPS += ('lti_provider',) AUTHENTICATION_BACKENDS += ('lti_provider.users.LtiBackend',)
from salt.ext.six.moves.urllib.parse import urljoin as _urljoin import salt.ext.six.moves.http_client
termination_criterion = EpochCounter(5)
return True
self.assertNotIn('error_code', json.loads(response.content))
listen_for_course_publish(self, self.course.id)
series = self.series.copy() self.assertRaises(Exception, setattr, series, 'index', np.arange(len(series) - 1))
self.assertEqual(response.status_code, 200) res_json = json.loads(response.content)
url(r'^non_existing_url/', partial(defaults.page_not_found, exception=None)), url(r'^server_error/', defaults.server_error),
self.assertTrue(user(email).is_active)
try: ret = self.run_function( 'state.template_str', ['\n'.join(template)] )
v = v.tostring() return ExtType(0, blosc.compress(v, typesize=dtype.itemsize))
self.assertNotEqual(prg1, prg2) self.assertEqual(prg1, prg3)
non_displayed_tabs = set(old_tab_list) - set(new_tab_list) new_tab_list.extend(non_displayed_tabs)
os.environ[str("DJANGO_COLORS")] = str("nocolor")
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
clf = svm.OneClassSVM() rnd = check_random_state(2)
self.assertFalse(self.user.is_active)
if BC_DEBUG: print("2to3 cache miss (will process) %s,%s" % (f,h)) to_process[h] = f
self.assertRedirects(response, '/some_view/')
return "/".join([BASE_URL, self.url_path, unicode(self.locator)])
raise NotImplementedError("> 1 ndim Categorical are not " "supported at this time")
from salt.modules import localemod from salt.exceptions import CommandExecutionError
trigger = task_definition.Triggers.Create(trigger_types[trigger_type])
self.assertEqual(xblock_info['is_proctored_exam'], True) self.assertEqual(xblock_info['is_time_limited'], True) self.assertEqual(xblock_info['default_time_limit_minutes'], 100)
dataset = obj
self.assertEqual(self.ipv6_interface.with_hostmask, '2001:658:22a:cafe:200::1/::ffff:ffff:ffff:ffff')
organizations = microsite_object.get_organizations()
import salt.utils
self._assert_course_verification_status(VERIFY_STATUS_APPROVED)
return (None, None)
hwaddr = salt.utils.alias_function(hw_addr, 'hwaddr')
probas = [c.fit(X, y).predict_proba(X) for c in (clf1, clf2, clf3, eclf)]
Cov -= gamma_ * corr_eq_dir
for num in np.linspace(1., 2., num=500): text = 'a\n{0:.25}'.format(num)
offset = BDay() offset2 = BDay() offset2.normalize = True self.assertEqual(offset, offset2)
email, password = self._create_unique_user()
used_all_attempts = CapaFactory.create(showanswer='finished', max_attempts="1", attempts="1", due=self.tomorrow_str) self.assertTrue(used_all_attempts.answer_available())
frame = DataFrame(index=np.arange(1000))
import logging import re
df = self.df.copy() df['bad'] = np.nan agged = df.groupby(['A', 'B']).mean()
from salt.states import disk
assert_almost_equal((RBF(2.0) + 1.0)(X), (1.0 + RBF(2.0))(X))
UserSocialAuth._meta.app_label = "default" Nonce._meta.app_label = "default" Association._meta.app_label = "default" Code._meta.app_label = "default"
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES from salt.exceptions import CommandExecutionError
assert_array_almost_equal(np.sum(tf, axis=1), [1.0] * n_train)
super(VectorSpace, self)._validate_impl(is_numeric, batch)
df.plot.box(color=dict(boxes='red', xxxx='blue'))
pillar_value = yaml.load(value)
dt = Timestamp('20130101 09:10:11') result = dt.floor('D') expected = Timestamp('20130101') self.assertEqual(result, expected)
with tm.assert_produces_warning(FutureWarning): df.sort_index(by=[('a', 1)]) expected = df.sort_values(by=[('a', 1)])
expected = Float64Index(arr) a = np.zeros(5, dtype='float64') result = fidx - a tm.assert_index_equal(result, expected)
with RemoveGroupsAndPermissions(): class ExtensionUser(AbstractUser): date_of_birth = models.DateField()
continue
self._change_enrollment('enroll', email_opt_in=email_opt_in)
empty_strings_allowed = True empty_values = list(validators.EMPTY_VALUES)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, call )
iris = datasets.load_iris()
self.assertEqual(res.context['next_week'], None) self.assertEqual(res.context['previous_week'], datetime.date(2008, 9, 28))
os.remove(tmp.name)
with salt.utils.fopen(full, 'r') as _fh: for line in _fh: if line.startswith('#'): lines.append(line) continue
from salt.exceptions import SaltInvocationError
__, count = self.contentstore.get_all_content_for_course(self.course2_key) self.assertEqual(count, len(self.course2_files))
self.assertEqual(self.captured_request.POST.get("course_id"), "edX/DemoX/Fall")
result = idf['C'].sort_index(ascending=[1, 0]) assert_series_equal(result, expected['C'])
update_entrance_exam(request, self.course.id, {})
from __future__ import absolute_import
where = "index <= '%s'" % end_dt result = store.select('df', where=where) tm.assert_frame_equal(expected, result)
from __future__ import absolute_import
self.assertTrue(stat1.st_size < stat2.st_size)
if self.keys is None and self.level is None:
self.assertEqual(course.course_image, 'images_course_image.jpg')
SUBSCRIBE_BATCH_SIZE = 1000
self.assertRaises(NotImplementedError, lambda: pd.Categorical(np.array([list('abcd')])))
kwargs['timeout'] = timeout
if not parent_location: return None
tag = self.resolve(yaml.nodes.ScalarNode, node.value, [True, True]) deep = False
__virtualname__ = 'sentry'
from salt.modules import chef
assert_array_equal(mb_k_means.predict(X), mb_k_means.labels_)
if is_active and (enrollment_mode in CourseMode.VERIFIED_MODES + [CourseMode.NO_ID_PROFESSIONAL_MODE]): return redirect(reverse('dashboard'))
if axis is None: axis = 0 axis = self._get_axis_number(axis) method = missing.clean_fill_method(method)
resp = self.client.post('/courses/def/generate_user_cert') self.assertEqual(resp.status_code, 404)
self.cohort_management_page.select_discussion_topic(self.inline_key)
futures = [] for x in range(0, 3): future = tornado.concurrent.Future() future.add_done_callback(self.stop) futures.append(future)
self.coach = UserFactory.create() self.mstore = modulestore()
index = DatetimeIndex(['1/3/2000']) try: index.get_loc('1/1/2000') except KeyError as e: self.assertIn('2000', str(e))
self.assertAlmostEqual(ax_min, min_edge - 0.25) self.assertAlmostEqual(ax_max, max_edge + 0.25)
entry.save_now() return task_progress
@patch('xmodule.html_module.HtmlDescriptor.definition_to_xml') def test_export_import_round_trip(self, def_to_xml): def_to_xml.return_value = lxml.etree.Element('html')
_args.append(arg)
rng = np.random.RandomState(0) noise = 0.1 * rng.randn(Npts, 1) X = np.concatenate((X, noise), 1)
self._check_grade_response(callback_url, expected_header, json.dumps(response_content))
assert_almost_equal(s_, np.dot(np.dot(mixing_, k_), m))
('ALIGN', (2, 0), (4, 0), 'CENTER'),
import salt.utils import salt.utils.templates import salt.utils.validate.net import salt.ext.six as six
'outputter_dirs': list,
from __future__ import absolute_import import logging from copy import deepcopy
changed_modules = StudentModule.objects.filter(module_state_key__in=self.ee_modules) for changed_module in changed_modules: self.assertEqual( json.loads(changed_module.state)['attempts'], 0 )
self.now = datetime.datetime.now()
clf = LinearDiscriminantAnalysis(solver="svd").fit(X, y) means_transformed = clf.transform(means)
component = self.store.publish(component.location, self.user_id) self.assertFalse(self.store.has_changes(component))
IP = InteractiveShell.instance(config=config, profile_dir=profile)
raise ItemNotFoundError(course_key)
ret['result'] = __salt__['file.search'](name, unanchor_regex, multiline=True)
source_subs_filedata = request.FILES['transcript-file'].read().decode('utf-8-sig') source_subs_filename = request.FILES['transcript-file'].name
import salt.ext.six as six
from __future__ import absolute_import import os
profile_page.privacy = privacy
self.options.log_file_level = self.config.get( self._logfile_loglevel_config_setting_name_ )
for line in header.split(b'\r\n'): try: name, (value, params) = _parse_header(line) except ValueError: continue
import logging import time from datetime import datetime
collapsed = ipaddress.collapse_addresses([ip1, ip2]) self.assertEqual(list(collapsed), [ipaddress.IPv4Network('1.1.0.0/23')])
from __future__ import unicode_literals
import scipy.sparse
from salt.utils import namespaced_function import salt.ext.six as six import salt.utils.cloud import salt.config as config from salt.utils import http from salt import syspaths
precompute = self.precompute if hasattr(precompute, '__array__'): Gram = precompute elif precompute == 'auto': Gram = 'auto' else: Gram = None return Gram
pca = PCA(n_components=3)
import integration import salt.utils
se = SpectralEmbedding(n_components=1, affinity="precomputed", random_state=np.random.RandomState(seed), eigen_solver="<unknown>") assert_raises(ValueError, se.fit, S)
config = sconfig.minion_config('/etc/salt/minion') self.assertEqual(config['log_file'], env_fpath) os.environ.clear() os.environ.update(original_environ)
pass
self.assertTrue(timezone.is_aware(dt)) self.assertEqual(now.tzname(), dt.tzname())
text_document = self._white_spaces.sub(" ", text_document)
from __future__ import absolute_import
return social_auth.uid[len(self.idp_slug) + 1:]
from __future__ import absolute_import
X_transformed = Nystroem(n_components=X.shape[0]).fit_transform(X) K = rbf_kernel(X) assert_array_almost_equal(np.dot(X_transformed, X_transformed.T), K)
self.assertTrue(self.user.roles.filter(name="Student", course_id=self.course_key))
mathml_start = '<math xmlns="http://www.w3.org/1998/Math/MathML"><mstyle displaystyle="true">' mathml_end = '</mstyle></math>'
import salt.utils.openstack.nova as suon
DECIMAL_SEPARATOR = '.' THOUSAND_SEPARATOR = ','
values = Series([u('a'), u('b'), NA, u('c'), NA, u('eeeeee')])
self._check_double_roundtrip(df, tm.assert_frame_equal, compression=False, check_frame_type=True)
REQUIRE_DEBUG = DEBUG
__, nonstaff_user = self.create_non_staff_authed_user_client() auth.add_users(self.user, CourseStaffRole(self.course.id), nonstaff_user)
self.assertEqual(len(site_configuration_history), 2)
from __future__ import unicode_literals
import salt.utils import salt.syspaths from salt.exceptions import SaltInvocationError
def __iter__(self): return iter(dict.items(self))
if index.step is None: self._assign_simple_slice(start, stop, valueList) else: self._assign_extended_slice(start, stop, step, valueList)
self.assertEqual(Student._meta.ordering, [])
self.assertRaises(KeyError, lambda: s.loc[4]) self.assertRaises(KeyError, lambda: s.ix[4]) self.assertRaises(KeyError, lambda: s[4])
if not hasattr(self, 'center'): self.center = False if not hasattr(self, 'gcn'): self.gcn = False
return np.isnan(other) and self.hasnans
if is_setter: return list(key)
self.assertEqual(_mock_pep8_violations.call_count, 1) self.assertEqual(self._mock_paver_sh.call_count, 2)
if settings.ROOT_URLCONF != 'lms.urls': raise unittest.SkipTest('Test only valid in lms') super(XBlockTestCase, cls).setUpClass()
PAIRWISE_DISTANCE_FUNCTIONS = { 'cityblock': manhattan_distances, 'cosine': cosine_distances, 'euclidean': euclidean_distances, 'l2': euclidean_distances, 'l1': manhattan_distances, 'manhattan': manhattan_distances,
from __future__ import absolute_import import os
try: ret = self.run_function( 'state.template_str', ['\n'.join(template)] )
#html_short_title = None
CELERY_RESULT_BACKEND = 'djcelery.backends.cache:CacheBackend'
if how == 'left': how = 'outer' join_axes = [self.index] else: join_axes = None
time.sleep(0.5)
raise NotImplementedError()
result = f.clean('21-12-2010') self.assertEqual(result, date(2010, 12, 21))
self.config[option.dest] = value
self._set_form_verification_deadline(form, None) form.save()
data = parse_qs(body) response = self.client.post(url, data)
cmd = '{0} add -exist {1} {2}'.format(_ipset_cmd(), set, cmd) out = __salt__['cmd.run'](cmd, python_shell=False)
self.store_precision = True
y_proba = clf.predict_proba(T) assert_true(np.all(y_proba >= 0.0)) assert_true(np.all(y_proba <= 1.0))
self._validate(is_numeric, batch) return 0
new_group = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, user_partition) self.assertEqual(old_group.id, new_group.id)
from __future__ import absolute_import
_maybe_remove(store, 'df') store.append('df', df, data_columns=True) result = store.select('df') assert_frame_equal(result, df)
TASK_TRIGGER_EVENT = 0 TASK_TRIGGER_TIME = 1 TASK_TRIGGER_DAILY = 2 TASK_TRIGGER_WEEKLY = 3 TASK_TRIGGER_MONTHLY = 4 TASK_TRIGGER_MONTHLYDOW = 5 TASK_TRIGGER_IDLE = 6 TASK_TRIGGER_REGISTRATION = 7 TASK_TRIGGER_BOOT = 8 TASK_TRIGGER_LOGON = 9 TASK_TRIGGER_SESSION_STATE_CHANGE = 11
filter: {'kw': 'args'}
ForestEstimator = FOREST_ESTIMATORS[name] rng = np.random.RandomState(0) weights = rng.rand(X.shape[0]) total_weight = np.sum(weights)
recorder.record_applied("migrations", "1_auto") loader.build_graph() self.assertEqual(num_nodes(), 4)
try: return arr.argsort(kind=kind) except TypeError: return arr.argsort(kind='quicksort')
from salt.modules import environ import os
spca_lasso = MiniBatchSparsePCA(n_components=3, method='cd', alpha=alpha, random_state=0).fit(Y) assert_array_almost_equal(spca_lasso.components_, spca_lars.components_)
field_dict.update(self._field_overrides.get(name, {}))
data = salt.utils.alias_function(items, 'data')
import salt.ext.six as six
if 'DJANGO_AUTO_COMPLETE' not in os.environ: return
ts = tm.makeTimeSeries()[:20] ts_irregular = ts[[1, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 17, 18]]
assert_equal(_dynamic_max_trials(100, 100, 2, 0.99), 1)
if axis == 0: values = self._data.iget(i) return self._box_item_values(key, values)
if self.op in ['==', '!='] and len(values) > self._max_selectors:
col_names = [str(descr[0]) for descr in matlab_dict['mldata_descr_ordering'][0]]
classifier = OneVsRestClassifier(svm.SVC(kernel='linear', probability=True, random_state=random_state)) y_score = classifier.fit(X_train, y_train).decision_function(X_test)
return "BIGSERIAL"
tm.assert_equal(0, len(results))
df = pd.DataFrame({'X': [1, 2, 3, 4], 'Y': list('aabb')}, index=list('ABCD'))
LogoutPage(self.browser).visit() self._login_as_a_verified_user() self.courseware_page.visit()
self.assertIsInstance(min_td - Timedelta(1, 'ns'), pd.tslib.NaTType)
result = sql.read_sql_table('test_nan', self.conn) tm.assert_frame_equal(result, df)
self.assertTrue(self.store.has_changes(xblock))
self.win_installer = self.update_session.CreateUpdateInstaller() self.win_installer.Updates = self.install_collection
self.assertFalse( utils.is_commentable_cohorted(course.id, to_id("General")), "Course doesn't even have a 'General' topic" )
'course_structure_api',
if self.sort: if not self.grouper.ordered:
__salt__['kmod.load']('bonding')
geo_context = {'LANGUAGE_BIDI': translation.get_language_bidi()} logger = logging.getLogger('django.contrib.gis')
wrongly_typed = [Series([0, 1]), 2, 'str', None, np.array([0, 1])] df = DataFrame({'a': [1, 1]})
error_msg = models.TextField(blank=True)
if argname == 'mangle_dupe_cols' and not value: raise ValueError('Setting mangle_dupe_cols=False is ' 'not supported yet') else: options[argname] = value
import salt.utils.dictupdate as dictupdate from salt.utils import exactly_one from salt.exceptions import SaltInvocationError, CommandExecutionError
for value in self.val: bio.write(struct.pack(byteorder + 'i', value))
import salt.utils import hashlib import datetime import socket import salt.utils.network import salt.utils.validate.net
self.exceptions = [TransportableException]
])
with self.connection.schema_editor(atomic=migration.atomic) as schema_editor: state = migration.apply(state, schema_editor)
ret_multip = {} for obj in output_multip: ret_multip.update(obj)
from __future__ import absolute_import
n_jobs, _, _ = _partition_estimators(self.n_estimators, self.n_jobs)
values = (c_double * 6)(*values) capi.set_ds_geotransform(self._ptr, byref(values)) self._flush()
response2 = self.client.get('/template_response_view/') self.assertEqual(response2.status_code, 200)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
log = logging.getLogger(__name__)
from __future__ import absolute_import from datetime import datetime
self.__clear_hosts() f = salt.utils.fopen(HFN, 'w') f.close()
self.cert = GeneratedCertificate.eligible_certificates.create( user=self.student, course_id=self.CERT_COURSE_KEY, grade=self.CERT_GRADE, status=self.CERT_STATUS, mode=self.CERT_MODE, download_url=self.CERT_DOWNLOAD_URL, )
self.xblock_keys = [self.course.location]
df["cc"] = 0.0
rng = date_range(START, END, freq=datetools.bmonthEnd)
self.assertEqual( self.run_function('shadow.get_login_failed_count', [NO_USER]), 'ERROR: User not found: {0}'.format(NO_USER))
for i, c in enumerate(SouthTexasCity.objects.perimeter(model_att='perim')): self.assertEqual(0, c.perim.m)
obj = self.obj._meta.label
if hasattr(self, 'event'): del self.event
course_image_url = TextField() social_sharing_url = TextField(null=True) end_of_course_survey_url = TextField(null=True)
if self.schedule.loop_interval < self.loop_interval: self.loop_interval = self.schedule.loop_interval
ifp = self.capa_system.filestore.open(filename)
num_drafts = self._get_draft_counts(self.course) self.assertEqual(num_drafts, 0)
kwargs = {'hostname': host, 'creds': creds}
value = dateutil.parser.parse(value)
rval_space = out_space
TMP = os.path.join(SYS_TMP_DIR, 'salt-tests-tmpdir')
attempt.status = "must_retry" attempt.system_error("System error") attempt.approve() attempt.status = "must_retry" attempt.deny(DENY_ERROR_MSG)
pass
clf.classes_ = unique_labels(classes) return True
#latex_preamble = ''
if self.isalive() and _ACTIVE is not None: _ACTIVE.append(self)
from __future__ import absolute_import, print_function import os
for lhs, rhs in product(self.lhses, self.rhses): self.check_pow(lhs, '**', rhs)
__virtualname__ = 'bigip'
X = np.arange(100)[:, np.newaxis] y = np.ones(100) y[:50] = 0.0
if len(axes) != len(set(axes)): raise ValueError('Must specify %s unique axes' % self._AXIS_LEN)
fgraph = f.maker.env
kwargs.pop('freq', None) return MultiIndex.from_tuples(values, **kwargs)
return self.system.render_template('module-error.html', { 'staff_access': False, 'data': "", 'error': "", })
raise
super(TestTrackerInstantiation, self).setUp() self.get_backend = tracker._instantiate_backend_from_name
rng = np.random.RandomState(42) all_data, _ = make_blobs(n_samples=n_samples_max + n_queries, n_features=n_features, centers=n_centers, shuffle=True, random_state=0) queries = all_data[:n_queries] index_data = all_data[n_queries:]
'user',
return [b'x' * (MAX_SOCKET_CHUNK_SIZE + MAX_SOCKET_CHUNK_SIZE // 2)]
from_text = False from_wkb = False
response = self.ajax_request('bad_answer', {}) self.assertDictEqual(response, {'error': 'Unknown Command!'})
from salttesting.unit import skipIf, TestCase from salttesting.case import ModuleCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.assertFalse(result['success']) self.assertIn(u"you have cancelled this transaction", result['error_html'])
_MIXED_MODULESTORE = None
has_previous_line = self.start_line > 1 if has_previous_line: line_to_check = string_lines.line_number_to_line(self.start_line - 1) self._mark_disabled(line_to_check, scope_start_string=True) if self.is_disabled: return
sites.models.SITE_CACHE.clear()
result = df.drop_duplicates(['A', 'B']) expected = df.ix[[0, 2, 3, 6]] tm.assert_frame_equal(result, expected)
result = df[df.a > df.a[3]] expected = df.iloc[4:] assert_frame_equal(result, expected)
from __future__ import absolute_import import logging
self._assert_enable_certs_button(False)
from salt.modules import win_ntp
details = api.get_course_enrollment_details(self.COURSE_ID)
updated_overview.version = 11 updated_overview.save()
self.fake_payment_page.submit_payment()
prob_sum = prob.sum(axis=1) all_zero = (prob_sum == 0) if np.any(all_zero): prob[all_zero, :] = 1 prob_sum[all_zero] = len(self.classes_)
login = self.client.login(username='testclient', password='password') self.assertTrue(login, 'Could not log in')
if not _is_url(self.io): r = fromstring(self.io, parser=parser)
Application.objects.filter(user=self.request.user).delete() return super(ApiRequestStatusView, self).form_valid(form)
dive = Book.objects.using('other').get(title='Dive into Python') self.assertEqual(dive._state.db, 'other')
os.unlink(full_path)
self.course_info['number'] = "335535897951379478207964576572017930000"