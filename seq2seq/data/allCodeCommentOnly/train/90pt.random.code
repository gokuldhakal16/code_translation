from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
location = '//%s' % self.get_full_path()
back_uuid = uuid(dev) if back_uuid is not None: result['cache'] = back_uuid
myminion: 2:7.4.160-1.el7
test_command = 'sysbench --num-threads=16 --test=fileio ' test_command += '--file-num=32 --file-total-size=1G --file-test-mode={0} ' result = None ret_val = {}
with self.assertRaisesMessage(AssertionError, "'name' isn't a DateField or DateTimeField."): Item.objects.datetimes('name', 'month')
Site.objects.clear_cache()
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath
self.assertRaises(Exception, BlockIndex, 10, [2, 5], [5, 3])
import integration
if not self.infer_axes(): return False
available_version = salt.utils.alias_function(latest_version, 'available_version')
avz = config.get_cloud_config_value( 'availability_zone', vm_, __opts__, default=None, search_global=False ) if avz is not None: kwargs['ex_availability_zone'] = avz
import salt.loader import salt.utils import salt.utils.locales
mgr_shape = list(mgr.shape) for ax, indexer in indexers.items(): mgr_shape[ax] = len(indexer) mgr_shape = tuple(mgr_shape)
return student.views.index(request, user=request.user)
if BulkEmailFlag.feature_enabled(course_key): sections.append(_section_send_email(course, access))
data[:, 5] = data[:, 4] / data[:, 5]
from __future__ import absolute_import import collections
SEARCH_ENGINE = "search.elastic.ElasticSearchEngine"
result = self.ts[[slice(None, 5)]] expected = self.ts[:5] assert_series_equal(result, expected)
def _logcosh(x, fun_args=None):
clf.intercept_scaling = 1 clf.fit(X, y) assert_almost_equal(clf.intercept_, 0, decimal=5)
left = self.lhs(env) right = self.rhs(env)
return 0
choices_correct = self._check_student_choices(binary_choices) inputs_correct = self._check_student_inputs(numtolerance_inputs) correct = choices_correct and inputs_correct
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
after_jump = []
return False
visible_layer = BinaryVector(nvis=100) hidden_layer = BinaryVectorMaxPool(detector_layer_dim=500, pool_size=1, layer_name='h', irange=0.05, init_bias=-2.0) model = DBM(visible_layer=visible_layer, hidden_layers=[hidden_layer], batch_size=100, niter=1)
has_nodata = pixeltype >= 64 if has_nodata: pixeltype -= 64
for minion_id, minion_key in six.iteritems(preseed_minion_keys): rpath = os.path.join( preseed_minion_keys_tempdir, minion_id ) ssh_file(opts, rpath, minion_key, ssh_kwargs)
left = concat([left, left], ignore_index=True)
row = reader.next()
_ptr = None
obj.delete() obj = Storage() self.assertEqual(obj.default.read(), b"default content") obj.default.close()
level = logging.CRITICAL
assert_equal(v_measure_score(true_labels, labels), 1.0) assert_greater(km.inertia_, 0.0)
preprocessor = GlobalContrastNormalization(subtract_mean=False, sqrt_bias=0.0, use_std=False)
self.assertFalse(f.has_changed('resume.txt', None))
for prov_name, prov_settings in six.iteritems(config.pop('providers')): config[prov_name] = prov_settings break
resp = self.client.get(self.urls['course_modes_choose'], follow=True) self.assertRedirects(resp, self.urls['verify_student_start_flow'])
except (TypeError, ValueError, InvalidTabsException) as err: return HttpResponseBadRequest( django.utils.html.escape(err.message), content_type="text/plain" )
man_pages = [ ('index', 'getting_started', u'getting_started Documentation', [u'EdX Doc Team'], 1) ]
from salt.ext.six.moves import map from salt.exceptions import CommandNotFoundError
makedirs_perms(directory, user, group, mode)
DefaultFeed = Rss201rev2Feed
pass
try: from libcloud.compute.base import NodeState import libcloud.security libcloud.security.CA_CERTS_PATH.append('/etc/ssl/certs/YaST-CA.pem') HAS_LIBCLOUD = True except ImportError: HAS_LIBCLOUD = False
def re_replacer(s): try: return rx.sub(value, s) except TypeError: return s
max_value_length = settings.TRACK_MAX_EVENT / 4
status = InstructorTaskModuleTestCase.get_task_status(instructor_task.task_id) self.assertEqual(status['message'], expected_message)
q1 = Tag.objects.order_by('name') self.assertIsNot(q1, q1.all())
from unit.modules.boto_cloudtrail_test import BotoCloudTrailTestCaseMixin
try:
data_rows = _strip_listing_to_done(cmdoutput.splitlines())
new_names = list(names) new_levels = list(levels)
m1 = MinusOneSRID(geom=Point(17, 23, srid=4326)) m1.save() self.assertEqual(-1, m1.geom.srid)
self.xmin = xlim[0] self.xmax = xlim[1] self.delta_x = (self.xmax-self.xmin)/float(self.cols-1)
Z = Z.reshape(grid.shape[:-1]) plt.contourf(multiples, multiples, Z, cmap=plt.cm.Paired) plt.axis('off')
queryset = queryset.order_by('name')
world.mongo_client.fsync()
import salt.utils.cloud import salt.config as config from salt.exceptions import ( SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
return force_str(super(BaseMemcachedCache, self).make_key(key, version))
cache.clear() CertificateGenerationConfiguration.objects.create(enabled=True) self.client.login(username=self.global_staff.username, password='test')
url(r'^programs/(?P<program_id>\d+)/[\w\-]*/?$', views.program_details, name='program_details_view'),
return True
vectorizer = vec_factory(max_df=0.6, max_features=4) vectorizer.fit(ALL_FOOD_DOCS) assert_equal(set(vectorizer.vocabulary_), expected_vocabulary) assert_equal(vectorizer.stop_words_, expected_stop_words)
Y /= Y.sum(axis=1)[:, np.newaxis] loss = -(T * np.log(Y)).sum(axis=1)
from sklearn import datasets datasets.mldata.urlopen = urlopen
from __future__ import absolute_import import logging
_srid_cache[connection.alias] = {}
prompt = len(channels.values()) > 1
if self.check_running(): self.action_log_info('An instance is already running. Exiting') self.shutdown(1)
if published_parents > 1: non_orphan_parents = self._get_non_orphan_parents(location, all_parents, revision) return cache_and_return(non_orphan_parents[0].replace(run=location.course_key.run))
if isinstance(f, models.FileField): file_field_list.append(f) else: f.save_form_data(instance, cleaned_data[f.name])
from __future__ import absolute_import import os import random import string from distutils.version import LooseVersion
if name is None: name = content.name
f = lambda x: x.replace(1, 0, inplace=True) _check_f(d.copy(), f)
import salt.ext.six as six
self.assertNotContains(response, "How it Works") self.assertNotContains(response, "Schools & Partners")
NUM_ROWS = 1000
response = self.api_response() self.assertIn("/courses/{}/".format(self.course.id), response.data['handouts_html'])
if method == 'linear': index = np.arange(len(_maybe_transposed_self._get_axis(alt_ax))) else: index = _maybe_transposed_self._get_axis(alt_ax)
etcd_mod.__opts__ = {} etcd_mod.__utils__ = {}
@isolate_apps('invalid_models_tests') class UniqueTogetherTests(SimpleTestCase):
data = self.data._data
supports_distances_lookups = True supports_left_right_lookups = False
if '.' + transcript_format not in self.q(css=transcript_selector).text[0]: return False
endpoint: myendpoint.example.com:1138/services/Cloud
for mode_slug, min_price in modes_and_prices: self.create_mode(mode_slug, mode_slug.capitalize(), min_price=min_price)
if connection.commit_on_success_block_level == 0: if connection.features.autocommits_when_autocommit_is_off: connection.autocommit = True else: connection.set_autocommit(True)
DEPRECATED_SETTINGS = ["CSS Class for Course Reruns", "Hide Progress Tab", "XQA Key"]
scores = cross_val_score(MultinomialNB(alpha=10), X, y, cv=10) assert_greater(scores.mean(), 0.86)
df_float.ix[30:500,1:3] = np.nan
diff = res_deep - sys.getsizeof(o) self.assertTrue(abs(diff) < 100)
__grains__ = {} if 'pepa_grains' in __opts__: __grains__ = __opts__['pepa_grains'] if args.grains: __grains__.update(yaml.load(args.grains))
retcode = __salt__['cmd.retcode']('pw groupmod {0} -d {1}'.format( name, username), python_shell=False)
pass
if not settings.FEATURES.get('ENABLE_CSMH_EXTENDED'): post_save.connect(save_history, sender=StudentModule)
result.index.name = 'stat_%d' % len(group)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, Mock, patch ensure_in_syspath('../../')
ret = {'name': name, 'result': True, 'changes': {}, 'comment': ''}
fresh = modulestore().get_course(self.course.id) test_model = CourseMetadata.fetch(fresh)
result_key = f.generate_filename(None, key) self.assertEqual(result_key, expected_key)
with self.assertRaisesMessage(TypeError, 'view must be a callable'): url(r'uncallable-object/$', views.uncallable)
to_js['base_image'] = Attribute('img').parse_from_xml(self.xml)
CourseFinanceAdminRole(self.course.id).remove_users(self.instructor)
for (op, args), targop in ops: for data in [s, s_missing]: expected = data.groupby(labels).transform(targop)
mask = ids != -1 ids, val = ids[mask], val[mask]
FEATURES['ENABLE_PAYMENT_FAKE'] = True
with self.assertRaises(StudentInputError): problem = self.build_problem(answer='(1 5)')
keys = list(_binary_ops_dict.keys()) raise ValueError('Invalid binary operator {0!r}, valid' ' operators are {1}'.format(op, keys))
depth = len(b_list)
distances = np.zeros(shape=(X.shape[0],), dtype=np.float64)
CourseModeFactory.create( course_id=self.course.id, mode_slug=CourseMode.HONOR, mode_display_name=CourseMode.HONOR, )
rel = models.Inventory._meta.get_field('parent').remote_field w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)
course = CourseFactory.create(default_store=modulestore_type, run="TestRun", **course_kwargs) self.check_course_overview_against_course(course)
raise ValueError('Timeout cannot be a float')
assert has_expected
from __future__ import absolute_import import os import logging import fnmatch
))
self.assertEqual(response.status_code, 200) self.assertEqual(len(mail.outbox), 1)
self.assertFalse(self.cohort_management_page.is_category_selected())
self.navigate_to_video()
'edxmako.shortcuts.marketing_link_context_processor',
return response
ret['hash_type'] = __opts__['hash_type']
choice.text = "choice_{0}".format(ind) input_element.append(choice)
from __future__ import absolute_import import os import sys import getpass import platform import yaml import signal import shutil import tempfile import logging
from salt.ext.six import string_types
ret = salt.utils.cloud.bootstrap(vm_, __opts__)
diff = cat.memory_usage(deep=True) - sys.getsizeof(cat) self.assertTrue(abs(diff) < 100)
details['driver'] = provider
if key.field_name in self._fields: del self._fields[key.field_name]
idx = PeriodIndex(['2016-05-16', 'NaT', NaT, np.NaN], freq='D')
num_queries = 2
rng = date_range('1/1/2000', freq='B', periods=20) ts = Series(np.random.randn(len(rng)), index=rng)
if 'permutation' not in event_info: event_info['permutation'] = {} event_info['permutation'][response.answer_id] = (permutation_option, response.unmask_order())
add_module_names = False
__virtualname__ = 'service'
self.a.friends.add(self.b, self.c)
JINJA = jinja2.Environment( loader=jinja2.FileSystemLoader( os.path.join(salt.utils.templates.TEMPLATE_DIRNAME, 'rh_ip') ) )
out, err = self.run_django_admin(args) self.assertNoOutput(out) self.assertOutput(err, "already exists")
s = Series(np.arange(100), name='foo')
assert_almost_equal(mcc, 0.)
if _rule.get('from_port') is None: _rule['from_port'] = -1 if _rule.get('to_port') is None: _rule['to_port'] = -1
# Copyright (C) 2014 Floris Bruynooghe <flub@devork.be>
test_invalid_token("AAAAAAAAAAAAAAAAAAAAAC6iLXGhjkFytJoJSBJZzJ4=", "padding")
'ratelimitbackend.middleware.RateLimitMiddleware',
PY2 = sys.version_info[0] == 2 PY3 = sys.version_info[0] == 3 PY34 = sys.version_info[0:2] >= (3, 4)
import_course_from_xml( draft_store, 999, DATA_DIR, ['test_import_course'], static_content_store=content_store, do_import_static=False, verbose=True )
#html_static_path = add_base(['_static'])
self.estimators_ = [] self.estimators_samples_ = [] self.estimators_features_ = []
COURSE_TAB_NAMESPACE = 'openedx.course_tab'
ret['result'] = False ret['comment'] = "Can't determine AllocationId for address {0}.".format(ip) return ret
if j > 1: with tm.assertRaises(NotImplementedError): res = roundtrip(df, use_headers, index=False) else: res = roundtrip(df, use_headers)
if regex.groups == 0: raise ValueError("pattern contains no capture groups")
response = self._change_password(email=self.NEW_EMAIL) self.assertEqual(response.status_code, 400)
self.assertNotContains(resp, 'This is a Test Microsite footer')
self.assertRaises(ValueError, web.get_data_yahoo, 'XOM', interval='NOT VALID')
delete = salt.utils.alias_function(remove, 'delete') purge = salt.utils.alias_function(remove, 'purge')
mongo_course2_id = mongo_course1_id
cat_data = Categorical(data[col], ordered=order_categoricals) categories = [] for category in cat_data.categories: if category in value_label_dict[label]: categories.append(value_label_dict[label][category]) else:
with warnings.catch_warnings(): warnings.simplefilter('ignore')
pnt1, pnt2 = feat.geom, city.point self.assertAlmostEqual(pnt1.x, pnt2.x, 5) self.assertAlmostEqual(pnt1.y, pnt2.y, 5)
import yaml
else: if self.exprs: raise maxException else: raise ParseException(instring, loc, "no defined alternatives to match", self)
UserCourseTagFactory( user=self.student_user, course_id=self.course.id, key='xblock.partition_service.partition_{0}'.format(self.partition.id), value=str(user_partition_group) )
name = models.CharField(max_length=50)
self.mappings[lib_key] = store
User.objects.create_user(username='J\xfalia', password='qwerty') call_command('changepassword', username='J\xfalia', stdout=self.stdout)
res = dfmix.copy() res.replace(r'\s*\.\s*', nan, regex=True, inplace=True) assert_frame_equal(dfmix, res.fillna('.'))
if asset_collection is None: asset_collection = self.DEFAULT_ASSET_COLLECTION_NAME self.asset_collection = self.database[asset_collection]
self.assertEqual( deploy_dir_path, default_config['deploy_scripts_search_path'][0] )
if state is not None: state = json.loads(state)
choices = [(short, full) for (short, full) in raw_choices] + [('no_data', 'No Data')]
leaf_count = node_counts[node_counts != 0] assert_greater(np.min(leaf_count), len(X) * 0.25 - 1, "Failed with {0}".format(name))
__virtualname__ = 'memcache'
current_name = None
if try_cast: result = self._try_cast_result(result)
log = logging.getLogger(__name__)
layers = [self.visible_layer] + self.hidden_layers
if len(cls.tags) == 0: raise ValueError("No tags specified for class {0}".format(cls.__name__))
add_user_with_status_unrequested(self.user) self.assertEqual('granted', get_course_creator_status(self.user))
self.assertRegexpMatches(html, r'&#34;group_name&#34;: &#34;student_cohort&#34;')
z = self.sample_from_p_z(num_samples=num_samples, **kwargs) theta = self.decode_theta(z) X = self.sample_from_p_x_given_z(num_samples=num_samples, theta=theta)
for student in students[6:7]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.notpassing, mode='honor' )
super(Point, self).__init__(point, srid=srid)
clf = DecisionTreeClassifier(max_depth=3) clf.fit(X, y_degraded)
assert_array_almost_equal(np.asarray([1.0, 2.0, 3.0]), cw)
if getattr(value, 'empty', None) and (format == 'table' or append): return
self.correct_responses[name] = self.SCHEMATIC_CORRECT self.incorrect_responses[name] = self.SCHEMATIC_INCORRECT
from optparse import make_option from django.core.management.base import BaseCommand, CommandError from .prompt import query_yes_no
assert (len(x.base) > 0) return Decimal(str(x.mean()))
clf_base_regressor = CalibratedClassifierCV(Ridge()) clf_base_regressor.fit(X_train, y_train) clf_base_regressor.predict(X_test)
continue
import yaml import salt.ext.six as six
utils.get_programs(self.user)
user_partititons = self.course.user_partitions
tasks = instructor_task.api.get_instructor_task_history(course_id, module_state_key, student)
from salt.modules import mac_user from salt.exceptions import SaltInvocationError, CommandExecutionError
'providers_config', os.path.join(salt.syspaths.CONFIG_DIR, 'cloud.providers')
self.assertEqual(self.ts.asof(self.ts.index[3]), self.ts[3])
user = models.ForeignKey(User, db_index=True, null=True) course_id = CourseKeyField(max_length=255, db_index=True)
has_saltcloud = False
MINIMAL_MACHINE_ATTRIBUTES = [ "id", "image", "size", "state", "private_ips", "public_ips", ]
def future_with_timeout_callback(future): if future._future_with_timeout is not None: future._future_with_timeout._done_callback(future)
return len(tsql_query(query='sp_helprole "{0}"'.format(role), as_dict=True, **kwargs)) == 1
self.validate(batch)
with self.assertRaises(ValueError): (DataFrame(np.ones((10, 10))) .rolling(window=3, center=True, axis=2).mean())
__MP_LOGGING_QUEUE_PROCESS.terminate()
assert_equal(train.intersection(test), set())
if self.assume_centered: self.location_ = np.zeros(X.shape[1]) else: self.location_ = X.mean(0)
self.assertTrue( 'ERROR' not in self.run_function( 'git.add', [self.repo, filename] ) )
from __future__ import absolute_import
if not fnmatch.fnmatch(repo['url'], six.text_type(remote)): continue
milestones_api.add_course_milestone(course_key, 'requires', milestone)
get_space = lambda i: (model.aes[i].get_input_space() if i == 0 else model.aes[i - 1].get_output_space())
'minion_opts': ssh_schemas.DictItem(title='Minion Options', description='Dictionary of minion options', properties=MinionConfiguration()).serialize(),
gbq.to_gbq(df, destination_table, PROJECT_ID, chunksize=10000)
pass
from __future__ import absolute_import
self.login_student() self.submit_answer('Correct', 'Correct') self.assertEqual(self.get_progress_detail(), u'2/2')
if callable_obj is None: return cm with cm: callable_obj(*args, **kwargs)
white_label_org = microsite.get_value('course_org_filter') if white_label_org: zendesk_tags = zendesk_tags + ["whitelabel_{org}".format(org=white_label_org)]
state = dict(self.__dict__) state.pop('f_', None) return state
allow_access(course_ccx, instructor, 'instructor')
with warnings.catch_warnings(record=True) as w: warnings.simplefilter("always") parsed = read_stata( fname, convert_categoricals=convert_categoricals, convert_dates=convert_dates)
stdout, stderr, retcode = single.shell.copy_id()
df = DataFrame()
self.module_system.process_xml = Mock()
default_manager = models.Manager() objects = HiddenInventoryManager()
response = self.client.post(url) self.assertEquals(response.status_code, 403)
old_sys_argv = sys.argv sys.argv = [code_path]
bmark.name = bmark_name return bmark
df = DataFrame(np.random.rand(10, 3), index=list(string.ascii_letters[:10]))
for mode in available_modes: CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
pass
import os import re import shutil import logging
y_predicted = grid_search.predict(docs_test)
return cls.AUDIT in modes_dict or cls.HONOR in modes_dict
from __future__ import absolute_import
ret['changes']['removed'] = removed_ids
self.assertEqual(len(email_info), 0)
result = f.clean('1:30:05 PM 21/12/2010') self.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))
import salt.utils import salt.utils.files import salt.utils.atomicfile from salt.utils.odict import OrderedDict
self.assertEqual(response.status_code, 200)
store = DjangoOpenIDStore() server = Server(store, endpoint)
self.prev_floatX = config.floatX config.floatX = 'float64'
func_globals = func.__globals__ injected_func_globals = [] overridden_func_globals = {} for override in overrides: if override in func_globals: overridden_func_globals[override] = func_globals[override] else: injected_func_globals.append(override)
def test_replace_conversion_series_from_object(self): from_key = 'object' for to_key in self.rep: self._assert_replace_conversion(from_key, to_key, how='series')
self.assertOLXIsDraftOnly(block_list_to_unpublish) with self.assertRaises(ItemNotFoundError): self.unpublish(block_list_to_unpublish)
report_dir = (Env.REPORT_DIR / system).makedirs_p()
if isinstance(value, bool): value = 'on' if value else 'off' elif ' ' in value: value = "'{0}'".format(value)
import logging import copy
label_measure = metric(y_true, y_pred, average=None) assert_array_almost_equal(label_measure, [metric(y_true_binarize[:, i], y_pred_binarize[:, i]) for i in range(n_classes)])
DEFAULT_TARGET_DELIM = ':'
if where is None and start is None and stop is None: s.group._f_remove(recursive=True)
if propindexes: for a in orig_t.axes: if a.is_indexed: self.assertTrue(new_t[a.name].is_indexed)
raise Exception(msg), None, sys.exc_info()[2]
self.assertEqual(response.status_code, 302)
estimator_weight = (-1. * self.learning_rate * (((n_classes - 1.) / n_classes) * inner1d(y_coding, np.log(y_predict_proba))))
try: import pymongo version = pymongo.version version = '.'.join(version.split('.')[:2]) HAS_PYMONGO = True except ImportError: HAS_PYMONGO = False
if not np.any(Y_ == i): continue plt.scatter(X[Y_ == i, 0], X[Y_ == i, 1], .8, color=color)
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21")
if is_nested_renamer: result = list(_agg(arg, _agg_1dim).values())
self.assertEqual(dateformat.format(aware_dt, 'O'), '-0330')
nargs = len(args) if not nargs or nargs % 2 != 0: raise ValueError("Must provide an even number of non-keyword " "arguments")
__virtualname__ = 'pkg'
idx = pd.IndexSlice
if len(names) == 1: return ret[names[0]] return ret
from salt import exceptions
self.assertTrue('/df2 ' in str(store)) self.assertTrue('/df2/meta/values_block_0/meta' in str(store)) self.assertTrue('/df2/meta/values_block_1/meta' in str(store))
if existing['code'] == 200:
team_list = self.get_teams_list(user=user, expected_status=200, data=course_one_data) self.assertEqual(team_list['count'], 0)
if func_supports_parameter(loader.get_template_sources, 'template_dirs'): args.append(template_dirs) for origin in loader.get_template_sources(*args): yield origin
result = values.view('i8') == tslib.iNaT
X, y = make_multilabel_classification(allow_unlabeled=False, random_state=0) X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
if len(xml_object.xpath(cls._child_tag_name)) == 0: raise ValueError("Poll_question definition must include \ at least one 'answer' tag")
drafts.sort(key=lambda x: x.index)
from __future__ import absolute_import
if func_code.co_flags & 0x08: index = pos_count + keyword_only_count if func_code.co_flags & 0x04: index += 1
idx = self.frame.index s = Series(range(len(idx)), index=idx)
continue
return result
for idxr in [lambda x: x.ix, lambda x: x, lambda x: x.iloc]:
s = Series(rng) s[1] = np.nan
salt.utils.cloud.remove_key(self.opts['pki_dir'], os.path.basename(key_file)) continue
self.assertEqual(len(long_name), 48) self.assertTrue(linode._validate_name(long_name))
sdf = SparseDataFrame(index=[0, 1, 2], columns=['a', 'b', 'c'])
with self.assertRaises(Restaurant.DoesNotExist): place.restaurant
fit_transform = transform
points = cartesian_product(planes)
if response.cookies: self.cookies.update(response.cookies)
pass
def loss_grad_fun(t): return mlp._loss_grad_lbfgs(t, X, Y, activations, deltas, coef_grads, intercept_grads)
rval = [None] * self.n_unique_specs
from __future__ import absolute_import
import logging
contains_aggregate = False
assert isinstance(sls_data, dict) assert isinstance(yml_data, dict) assert sls_data == yml_data
self._mock_paver_needs = patch.object(pavelib.quality.run_quality, 'needs').start() self._mock_paver_needs.return_value = 0
meter = utils.ProgramProgressMeter(self.user, []) self._assert_progress(meter)
if virtual is not True and module_name != virtual: log.trace('Loaded {0} as virtual {1}'.format( module_name, virtual ))
if self.number == self.paginator.num_pages: return self.paginator.count return self.number * self.paginator.per_page
class UserRegistration(Form): username = CharField(max_length=10, help_text='e.g., user@example.com') password = CharField(widget=PasswordInput, help_text='Wählen Sie mit Bedacht.')
connection = connections[self.db] geodetic = geo_field.geodetic(connection) geography = geo_field.geography
result4 = (DataFrame.from_records(lists, columns=columns) .reindex(columns=df.columns))
create_attach_volumes = volume_create_attach
user2 = UserFactory.create() SkippedReverification.add_skipped_reverification_attempt( checkpoint=self.checkpoint, user_id=user2.id, course_id=unicode(self.course.id) )
SparsePanel._add_aggregate_operations(use_numexpr=False) ops.add_special_arithmetic_methods(SparsePanel, use_numexpr=False, ** ops.panel_special_funcs) SparseWidePanel = SparsePanel
a = Timestamp('3/12/2012') b = Timestamp('3/12/2012', tz=utc)
merged_group_ids = _MergedGroupAccess._intersection(xblock_partition_access, merged_parent_group_ids)
return None
y_train, y_test = data_train.target, data_test.target
offset[(~isleapyear(year)) & (offset >= 59)] += 1
return start(name)
params, response = self._validate_parameters(request, bool(initial_verification)) if response is not None: return response
#('object', 'OBJECT', 'object_'),
conn = OlderConnectionMock() self.assertEqual(pg_version.get_version(conn), 90300)
has_score = False
transformed_grid = hasher.transform(np.c_[xx.ravel(), yy.ravel()]) y_grid_pred = nb.predict_proba(transformed_grid)[:, 1]
ret = self.run_function('beacons.enable') self.assertTrue(ret['result'])
mask = np.array( [x[1] in exp_level for x in self.index], dtype=bool) exp_values = self.index.values[mask] tm.assert_numpy_array_equal(join_index.values, exp_values)
acts = self._hidden_input(inputs) hiddens = self.act_enc(acts) act_grad = tensor.grad(hiddens.sum(), acts) return act_grad
import logging log = logging.getLogger(__name__)
if not isinstance(idx, RangeIndex): result = idx * idx tm.assert_index_equal(result, idx ** 2)
utf8_comment = b("It is true that\n\xc2\xbd\xc2\xb2 = \xc2\xbc") f = BytesIO() assert_raises(UnicodeDecodeError, dump_svmlight_file, X, y, f, comment=utf8_comment)
df.loc(axis=0)[:, :, ['C1', 'C3']] = -10
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
diabetes_y_train = diabetes.target[:-20] diabetes_y_test = diabetes.target[-20:]
log.error( 'Unrecognized target engine "{0}" for' ' target expression "{1}"'.format( target_info['engine'], word, ) ) return []
angle = np.arctan(u[1] / u[0])
I18N_REPORT_DIR = REPORT_DIR / 'i18n'
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) self._assert_course_verification_status(VERIFY_STATUS_NEED_TO_VERIFY)
self.dashboard_page.visit() self.assertTrue(self.dashboard_page.has_course( org=self.course_org, number=self.course_number, run=self.course_run ))
mask = notnull(frame).values
db = {}
for bad_byteorder in (-1, 2, 523, 'foo', None): with self.assertRaises(ValueError): wkb_w._set_byteorder(bad_byteorder)
if is_datetimelike_v_numeric(a, b): result = False
from django.core.wsgi import get_wsgi_application
init_params = init_params[1:]
class CommonFeature(Article):
MESSAGE = _('The specified remote branch is not available.')
categoricals = [x for x in to_concat if com.is_categorical_dtype(x.dtype)]
log.debug('Multiple environment per bucket mode') s3_meta = __get_s3_meta()
week = week_of_months[0] + 1 wd = _weekday_rule_aliases[weekdays[0]]
if 'freq' in kwargs: kwargs['freq'] = None self.values = Index(values, **kwargs)
group1_id = self.partition_service.get_user_group_id_for_partition(user_partition_id) self.assertEqual(group1_id, groups[0].id)
response = explicit_default_with_prefix_view(request, '4') self.assertEqual(response.content, b'Hello World 4')
row = a.ix[0].values
import salt.key import salt.crypt
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, call )
log.debug( 'The \'{0}\' cloud driver defined under \'{1}\' provider ' 'alias is unable to get the images information'.format( driver, alias ) ) continue
X_train = X_train.astype(np.float64) X_test = X_test.astype(np.float64) normalize(X_train, copy=False) normalize(X_test, copy=False)
self.source_expressions[2] = Value(geo_field._spheroid)
c = Client() login = c.login(username='testclient', password='password') self.assertTrue(login, 'Could not log in')
subtask_status.increment(failed=num_pending, state=FAILURE) return subtask_status, exc
request.session['ExternalAuthMap'] = eamap
unicode_text = "好 各位同学".decode('utf-8')
sample_weight, estimator_weight, estimator_error = self._boost( iboost, X, y, sample_weight)
import salt.utils
cm = confusion_matrix(y_true, y_pred, labels=[2, 1]) assert_array_equal(cm, [[18, 2], [24, 3]])
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
MASQUERADE_DATA_KEY = 'masquerade_data'
from salt.modules import memcached from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.ext.six import integer_types
import salt.ext.six as six
self.assertEqual(len(course.children), 2) self.assertIn(dangling_pointer, course.children)
if createhome: __salt__['file.mkdir'](home, user=uid, group=gid)
ops = ['lt', 'le', 'gt', 'ge', 'eq', 'ne'] for op in ops: val = s[5]
result = df.unstack(2)
git_import.add_repo(self.TEST_REPO, repo_dir / 'edx4edx_lite', self.TEST_BRANCH)
n_fits = len(out) n_folds = len(cv)
name = _sdecode(name) if snap_name: snap_name = _sdecode(snap_name)
field_data['attempts'] = int(attempts)
email_enabled = models.BooleanField(default=False)
self.setup_groups_partitions(num_user_partitions=3)
cov = ShrunkCovariance(shrinkage=0.5) cov.fit(X) assert_array_almost_equal( shrunk_covariance(empirical_covariance(X), shrinkage=0.5), cov.covariance_, 4)
input_element.click() input_element.send_keys(Keys.CONTROL + 'a') input_element.send_keys(value) return input_element
try: data = data.astype('int64') result = True except: pass
parent_block.edit_info.source_version = None self.decache_block(usage_locator.course_key, new_id, parent_block_key)
with tm.assert_produces_warning(FutureWarning): first.sym_diff(second)
main(args=[])
from __future__ import absolute_import, print_function import os import sys
from salttesting.unit import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
r = XFrameOptionsMiddleware().process_response(req, resp) self.assertEqual(r.get('X-Frame-Options', None), None)
upstream = None
assert V is orig_V assert drop_mask is orig_drop_mask
for name in names: ret[name] = '' pkgs = list_pkgs(versions_as_list=True) repo = ['-o', 'APT::Default-Release={0}'.format(fromrepo)] \ if fromrepo else None
from __future__ import absolute_import import logging
distances.flat[::distances.shape[0] + 1] = 0.0
return Ref(name, self.annotation_select[name])
user = User.objects.get(email=self.user.email) self.assertFalse(auth.user_has_role(user, CourseStaffRole(self.course.id)))
self.run_function('beacons.add', ['ps', {'apache2': 'stopped'}]) self.run_function('beacons.save')
if this_package in installed_packages_list:
indexes = [a.cvalues for a in self.index_axes] nindexes = len(indexes) bindexes = [] for i, idx in enumerate(indexes):
if gdal.HAS_GDAL: return 3857 else: return 900913
if not view_func.__module__.startswith('wiki.'): return
df = DataFrame({"B": [1, 2], "A": ["x", "y"]})
try: from pandas.core.index import MultiIndex except ImportError: pass
value = value.rstrip('-')
self._pool = None warnings.warn( 'Multiprocessing backed parallel loops cannot be nested' ' below threads, setting n_jobs=1', stacklevel=3) return 1
result = df.drop_duplicates(['C', 'B']) expected = df.ix[[0, 1, 2, 4]] tm.assert_frame_equal(result, expected)
response = self._change_password() self.assertEqual(response.status_code, 200)
from __future__ import absolute_import
d = get_dummy_course('2012-12-02T12:00') self.assertEqual('', d.end_datetime_text())
] _special_func_names = [f[0] for f in special_func_defs]
from __future__ import absolute_import import logging
xblock_info = self._get_xblock_info(chapter.location) self._verify_visibility_state(xblock_info, VisibilityState.ready) self.assertFalse(course.self_paced)
if np.any(classes != sorted_class): indices = np.searchsorted(sorted_class, classes) Y = Y[:, indices]
self._cache = {}
'ENABLE_READING_FROM_MULTIPLE_HISTORY_TABLES': True,
dr = pd.timedelta_range('1d', '5d', freq='H', name='timebucket') self.assertEqual(dr[1:].name, dr.name)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
problem_name, correctness = scenarios[name] problem = problems[problem_name]
cls.create_image(prefix, (1, 1), 'yellow', 'special/{}_lock.png', locked=True)
for section_format, sections in grading_context['graded_sections'].iteritems(): format_scores = [] for section in sections: section_descriptor = section['section_descriptor'] section_name = section_descriptor.display_name_with_default_escaped
redirect_url = "{login_url}?next={original_url}".format( login_url=reverse("signin_user"), original_url=url, ) self.assertRedirects(response, redirect_url)
m2m_data = {}
request_lowstate = { "client": "local", "tgt": "*", "fun": "test.fib", "arg": "10" }
self.assertQuerysetEqual(Place.objects.filter(supplier__name="foo"), []) with self.assertRaises(FieldError): Restaurant.objects.filter(supplier__name="foo")
'openedx.core.djangoapps.bookmarks',
proc.sendline(phrase)
payment_info = json.loads(response.content) self.assertEqual(payment_info["payment_url"], "/shoppingcart/payment_fake")
clf = self.factory(alpha=0.01, n_iter=5, shuffle=False) clf.fit(X, Y) assert_true(hasattr(clf, "coef_"))
self.navigate_to_video()
self.selenium.find_element_by_id('id_birthdate_0').send_keys('2013-06-01')
columns = lzip(*arg)[0]
self.assertIn('authorwithage', connection.queries[-1]['sql'].lower()) self.assertIn(' IN ', connection.queries[-1]['sql'])
cur.executemany(cmd, newitems)
for idx in range(new_parent_cursor, len(new_parent.children)): if new_parent.children[idx].block_id == old_child_loc.block_id: new_parent_cursor = idx + 1
if xblock.location in blocks_visited: return
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=status, )
try: userSID, domainName, objectType = win32security.LookupAccountName(None, user) except pywinerror: err += 'User does not exist\n'
d = Series(np.random.randn(5)) x = d.rolling(window=2).skew() tm.assert_series_equal(all_nan, x)
'default_include': str,
self._handle_usecols(columns, names)
out, err = DETAILS['server'].sendline(cmd)
self._validate_index_level(level) return self
if source: cmd = '{0} -s {1}'.format(cmd, source)
from smtplib import SMTPException
meta = set(self._internal_names + self._metadata) for k in list(meta): if k in state: v = state[k] object.__setattr__(self, k, v)
task_definition = task_folder.GetTask(name).Definition
load = unpack loads = unpackb
now = time.mktime(datetime.utcnow().timetuple())
if start is not None and start.tz is not None: start = start.replace(tzinfo=None)
from salt.exceptions import CommandExecutionError
self.intIndex.name = 'foobar' casted = self.intIndex.astype('i8') self.assertEqual(casted.name, 'foobar')
self.session.pop('_auth_user_id') self.session.save()
import msgpack if msgpack.loads(msgpack.dumps([1, 2, 3]), use_list=True) is None: raise ImportError available = True
for cookie_name in [settings.EDXMKTG_LOGGED_IN_COOKIE_NAME, settings.EDXMKTG_USER_INFO_COOKIE_NAME]: cookie = self.client.cookies[cookie_name] self.assertIn("01-Jan-1970", cookie.get('expires'))
self.assertEqual([jid_dir_name], os.listdir(TMP_JID_DIR))
return self.connection.mysql_version >= (5, 6, 4) and Database.version_info >= (1, 2, 5)
self.navigate_to_video()
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON
import salt.utils from salt.exceptions import CommandExecutionError, MinionError import salt.ext.six as six
self.register_page.visit() self.assertScreenshot('#register .login-providers', 'register-providers-{}'.format(self.browser.name))
n, p, k = 10, 5, 3 rng = np.random.RandomState(0)
'file_client': str,
if 'snapshot_ids' in kwargs: kwargs['snapshot_id'] = kwargs['snapshot_ids']
for mode in all_modes[course_key]: if mode.min_price > 0 and not CourseMode.is_credit_mode(mode): return mode
from __future__ import absolute_import import os import sys import shutil import tempfile import stat
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
from __future__ import unicode_literals
footer_style.append(('BACKGROUND', (1, 6), (1, 6), '#EEEEEE'))
dim = row[0] srid = row[1] field_params = {} if srid != 4326: field_params['srid'] = srid if dim != 2: field_params['dim'] = dim
from unit.modules.boto_vpc_test import BotoVpcTestCaseMixin
result = df.describe(include=['bool'])
import salt.utils
X_train, X_train_lr, y_train, y_train_lr = train_test_split(X_train, y_train, test_size=0.5)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
values = [values[i] for i in indexer]
results.append({ 'identifier': identifier, 'error': error, 'userDoesNotExist': user_does_not_exist })
use_for_related_fields = True
urlpatterns += (url(r'^%s$' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),)
check(4, False) check(4, True)
if block_type == 'html': self.assertElementAttrsSubset(element, {'filename': filename})
if freq is None: freq = ax_freq
serialized['x-ordering'] = ordering
ret = { 'name': name, 'changes': {}, 'result': False, 'comment': '', }
log.error( 'Failed to render template with error: {0}'.format( data['data'] ) ) return ''
margin_keys = []
self.assertEqual(module.attempts, 3)
self.assertEqual(len(site_configuration_history), 1)
pkgs = [x for x in targets if x not in list_pkgs()] if not pkgs: return {}
all = 'rev-opt-all'
self.assertEqual(self.run_function('xattr.list', [TEST_FILE]), {})
self.forward_events = tornado.ioloop.PeriodicCallback(self._forward_events, self.opts['syndic_event_forward_timeout'] * 1000, io_loop=self.io_loop) self.forward_events.start()
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath, MockWraps from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch ensure_in_syspath('../')
request.POST = request.POST.copy()
from itertools import product
domain, port = split_domain_port(host) if not port: raise if domain not in SITE_CACHE: SITE_CACHE[domain] = self.get(domain__iexact=domain) return SITE_CACHE[domain]
dnsmasq.__salt__ = {}
args.extend(getattr(operation, 'args', []) or []) keywords.update(getattr(operation, 'keywords', {}) or {}) operation = operation.func
labels = _get_labels(node, apiserver_url)
source_suffix = '.txt'
df = DataFrame({'a': tm.rands_array(100, size=10)}, index=tm.rands_array(100, size=10))
self.assertFalse(result['success']) self.assertIn(u"badly-typed value", result['error_html'])
return (issubclass(value.dtype.type, np.floating) and value.dtype == self.dtype)
import salt import salt.utils import salt.exceptions
from __future__ import absolute_import
newaliases = _which('newaliases') if newaliases is not None: __salt__['cmd.run'](newaliases)
elif version_num not in pkginfo: log.error('Version {0} not found for package ' '{1}'.format(version_num, pkg_name)) ret[pkg_name] = {'not found': version_num} continue
y = iris.target
url_path = embargo_api.message_url_path(self.course.id, 'courseware') self.assertEqual(url_path, '/embargo/blocked-message/courseware/default/')
return comdat['stderr']
func.restype = c_void_p func.errcheck = check_geom
if correctness == 'incorrect': second_addend += random.randint(1, 10)
from __future__ import absolute_import import sys
from _dummy_thread import get_ident as _get_ident
vmax = arr.max(axis=0) out = np.log(np.sum(np.exp(arr - vmax), axis=0)) out += vmax return out
if properties: optlist = [] for prop in properties.keys():
msg = _('All ok!')
self.assertEqual(xblock_info['is_header_visible'], False) self.assertEqual(xblock_info['display_name'], 'Subsection - Entrance Exam')
sorted_active_contents = sorted(active_contents, key=itemgetter('group_name')) sorted_inactive_contents = sorted(inactive_contents, key=itemgetter('group_name'))
login = self.client.post(login_url, self.super_login) self.assertRedirects(login, self.index_url) self.assertFalse(login.context)
instructor = self.make_instructor() self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
for freq in ['D', '2D', '3D']: p = Period('2011-04-01', freq=freq)
cc_user = cc.User.from_django_user(request.user) cc_user.default_sort_key = request.GET.get('sort_key') cc_user.save()
if os_family == 'FreeBSD': return
self.obj[key] = _infer_fill_value(value)
for (field_name, field_value) in six.iteritems(d["fields"]):
if not self.remote_field.is_hidden() and not related.related_model._meta.swapped: setattr(cls, related.get_accessor_name(), ManyToManyDescriptor(self.remote_field, reverse=True))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.cf.deprecate_option('foo')
return launchctl('load', path, runas=runas)
import salt.ext.six as six
_, created = ed.books.get_or_create(name='The Great Book of Ed', publisher_id=p.id) self.assertFalse(created)
import collections
monitor_lr2 = MonitorBasedLRAdjuster(channel_name=dummy)
if current_options: current_options = current_options[next(iter(current_options))] if default_options: default_options = default_options[next(iter(default_options))]
self.assertEquals(2, len(response_results)) self.assertEquals(True, response_max_exceeded)
ridge.fit(X, y, sample_weight=np.ones(n_samples)) assert_greater(ridge.score(X, y), 0.9)
self.assertEqual(course_date, expected_course_date)
return _('Free')
from __future__ import unicode_literals
if isinstance(address, bytes): self._check_packed_address(address, 16) self._ip = _int_from_bytes(address, 'big') return
xblock_actions = {'deletable': True, 'draggable': True, 'childAddable': True} explanatory_message = None
chapter = path[1].name if n > 1 else None section = path[2].name if n > 2 else None vertical = path[3].name if n > 3 else None position = None
FEATURES['ENFORCE_PASSWORD_POLICY'] = False FEATURES['ENABLE_MAX_FAILED_LOGIN_ATTEMPTS'] = False FEATURES['SQUELCH_PII_IN_LOGS'] = False FEATURES['PREVENT_CONCURRENT_LOGINS'] = False FEATURES['ADVANCED_SECURITY'] = False
config_course_cohorts(course, is_cohorted=True)
self.assertContains(response, "\n1 recommendation\n")
response = other_with_prefix_view(request, '16') self.assertEqual(response.content, b'Hello World 16')
class TimeFormatter(Formatter):
try: syncing.remove(name) except KeyError: print( ' {LIGHT_RED}*{ENDC} {0} already synced??? ' '{1}'.format(name, output, **self.colors) )
path_cache = None parents_cache = None
import integration import salt.utils
self.assertRaises(ValueError, store.append, 'df_i8', df1)
final_attrs['value'] = force_text(value)
self.assertTrue('datetime64[ns, US/Eastern]' in str(s))
separator = u' <b>{}</b> '.format(_('or')) return {self.answer_id: separator.join(self.correct_answer)}
pca = PCA(n_components=8).fit(data_train)
for wrong_level in level_status_codes.keys(): if wrong_level != level: messages = _log_level_code(wrong_level, status_code) self.assertEqual(len(messages), 0)
return
__virtualname__ = 'random'
self.assertCalcEqual(True, [1, 'or', 1, '==', 2])
cum_xx = self._cum_xx(x) cum_xy = self._cum_xy(x, y)
from __future__ import absolute_import, print_function import os import sys import pprint
serializer = serializer_cls(page, context=serializer_ctx, many=True)
re.compile(r'^/embargo/blocked-message/'),
elif (name in CROSS_DECOMPOSITION or name in ['LinearSVC', 'LogisticRegression']): continue
from __future__ import absolute_import, print_function
self.assertNotIn('LEFT OUTER', str(qs.query))
results = (course for course in results if course.scope_ids.block_type == 'course')
encoded_data = encoded_data[1:]
num_dimensions += 1
suff_stats = np.zeros(self.components_.shape) for sstats in sstats_list: suff_stats += sstats suff_stats *= self.exp_dirichlet_component_
from salt.ext.six import string_types
CELERY_ALWAYS_EAGER = True
result = df.iloc[slice(4, 8)] expected = df.ix[8:14] assert_frame_equal(result, expected)
bluez.__salt__ = {}
middleware.process_request(request) request.session.flush()
cat = Series(Categorical(list("abc")))
__virtualname__ = 'autoruns'
if type(obj) is self.np.memmap: obj = self.np.asarray(obj) return Pickler.save(self, obj)
getattr(delegator, method)(delegator_data.fit_args[0])
salt '*' pkg.install sources='[{"<pkg name>": "salt://pkgs/<pkg filename>"}]' instance="overwrite"
key_list = [] key_list = _traverse_registry_tree(hkey, key_path, key_list, access_mask) key_list.append(r'{0}'.format(key_path))
dog_stats_api.start(**options)
call_command("loaddata", "course_email_template.json")
def summarize(df, name=None): return Series({'count': 1, 'mean': 2, 'omissions': 3, }, name=name)
course_overview = enrollment.course_overview if not course_overview: log.error( "User %s enrolled in broken or non-existent course %s", user.username, enrollment.course_id ) continue
import salt.ext.six as six
return (lhs_mask & rhs_mask).nonzero()[0]
self.payment_and_verification_flow.proceed_to_payment()
#sys.exit(retcode)
api_path = getattr(settings, "ENROLLMENT_DATA_API", DEFAULT_DATA_API)
var_x_plus_y = var(x + y) var_y = var(y) assert_equal(cov_x_y, 0.5 * (var_x_plus_y - var_x - var_y))
from salt.states import locale
if _is_empty_indexer(indexer): pass
for item in global_vars: for name in names: self.assertIn(name, list(item.keys()))
problem1_content_before_switch = self.problem_page.problem_content
try: sfn, source_sum, comment = __salt__['file.get_managed']( cron_path, template, source, source_hash, owner, group, mode, __env__, context, defaults,
from __future__ import absolute_import
nn.set_params(algorithm='kd_tree')
self.assert_grade( problem, submission, correctness, msg="{0} should be {1}".format(name, correctness) )
values = Series(['fooBAD__barBAD', NA, 'foo'])
keyboard.__salt__ = {} keyboard.__grains__ = {'os_family': ''}
clf = ForestClassifier(class_weight=1, random_state=0) assert_raises(ValueError, clf.fit, X, _y)
from __future__ import unicode_literals
if 'SYN' in flags and len(flags) == 1: return 10 elif 'FIN' in flags: return 12
__opts__ = { 'pepa_roots': { 'base': '/srv/salt' }, 'pepa_delimiter': '..', 'pepa_validate': False }
from salt.states import selinux
from salt.modules import pyenv
defaults = _load(namespace)
'use_required_attribute': False,
from __future__ import absolute_import import os
if should_force_account_creation(): return dispatch_to_register() return dispatch_to_login()
proc.wait()
import salt.client import salt.payload import salt.utils import salt.utils.jid import salt.minion import salt.returners
self.assertEqual(response_dict, self.expected_response)
list_check = lambda x: isinstance(x, list) clf = CheckingClassifier(check_X=list_check) predictions = cross_val_predict(clf, X.tolist(), y.tolist())
resp = self._login(self.email, self.pw) data = parse_json(resp) self.assertFalse(data['success'])
__virtualname__ = 'service'
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
char_unpacked[0] = ord(b'b')
return
if wait_to_finish: salt.utils.cloud.run_func_until_ret_arg(fun=describe_snapshots, kwargs={'snapshot_id': snapshot_id}, fun_call=call, argument_being_watched='status', required_argument_response='completed')
__virtualname__ = 'pkg'
from __future__ import absolute_import, print_function
yield self.auth.authenticate() ret = yield _do_transfer()
df[df[::-1] == 2] = 3 values[values == 2] = 3 assert_almost_equal(df.values, values)
module = CapaFactory.create(rerandomize=RANDOMIZATION.NEVER, max_attempts=0, done=True, correct=True) self.assertFalse(module.should_show_reset_button())
def stop(self): pass
new_mgr_locs = np.concatenate([b.mgr_locs.as_array for b in blocks]) new_values = _vstack([b.values for b in blocks], dtype)
MIN_PRICE = 1438
from __future__ import unicode_literals
log.error( 'Failed to read the virtual function for ' '{0}: {1}'.format( self.tag, module_name ), exc_info=True ) return (False, module_name, error_reason)
e = salt.utils.event.get_event('minion', sock_dir=self.minion_opts['sock_dir'], opts=self.minion_opts)
import salt.utils.s3 from salt.modules import s3
COUNTRIES_OVERRIDE = { "TW": "Taiwan", 'XK': _('Kosovo'), }
return os.sep.join(folders_list_in_path)
sample_str = self._sample_str(sample_dict, num_samples, tolerance) response_element.set("samples", sample_str)
company_label = _(u"Company")
self.clear_subs_content()
if ':' in item: key, value = item.split(':', 1) setinfo[key] = value[1:]
attr_meta.abstract = False new_class.Meta = attr_meta return new_class
new_block.graceperiod = timedelta(1) self.store.update_item(new_block, self.user.id)
pass
return _("{profile_name} URL").format(profile_name=profile)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
name, val = forbid_multi_line_headers(name, val, 'ascii') MIMEMessage.__setitem__(self, name, val)
details = pipeline_kwargs.get('details')
with ensure_clean_store(self.path) as store:
service_variant = ''
_deprecated_invalids = ['iloc', 'loc', 'ix', 'iat', 'at']
if len(names) == 1: return ret[names[0]] return ret
actual = grouped_df.filter(lambda x: len(x) > 1) expected = df.iloc[expected_indexes] assert_frame_equal(actual, expected)
rng = np.random.RandomState(1999) n_samples = 100 n_features = 3 X = rng.randn(n_samples, n_features) + 5 * rng.rand(1, n_features)
self.assertEqual(module.attempts, 1)
MAILCHIMP_NEW_USER_LIST_ID = ENV_TOKENS.get("MAILCHIMP_NEW_USER_LIST_ID")
from __future__ import unicode_literals
bwait = self.opts.get('batch_wait', 0) wait = []
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
for db in connections: recorder = MigrationRecorder(connections[db]) recorder.migration_qs.filter(app='migrations').delete()
args = [ str.lower, {x: x.lower() for x in idx}, Series({x: x.lower() for x in idx}), ]
from salt.states import mac_defaults as macdefaults
self.assertEqual(len(courses), 3)
try: import redis HAS_REDIS = True except ImportError: HAS_REDIS = False
return _absolute_url(is_secure, url_path)
keystone.auth_key: 203802934809284k2j34lkj2l3kj43k
ax0 = self.obj._get_axis(0) if isinstance(ax0, MultiIndex): result = self._handle_lowerdim_multi_index_axis0(tup) if result is not None: return result
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
port = get_unused_localhost_port() usock.close() return port
statuses = ["approved", "denied", "pending", "must_reverify"] reverifications = reverification_info(statuses)
instance._state.adding = False
template_loc = self.location.replace(category='custom_tag_template', name=template_name)
if PY3: coerce = lambda x: x else: coerce = unicode
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
assert_less(distances_ratio.max(), 1 + eps) assert_less(1 - eps, distances_ratio.min())
safe_course_key = loc.course_key if safe_course_key.run is None: safe_course_key = safe_course_key.replace(run='only')
else: return CommitOnSuccessManager(using, read_committed)
self.assertIn(self.provider.name, response.content)
if not pkg_name: return "pandas"
name = com._get_callable_name(a) or a keys.append(name)
with patch('capa.capa_problem.LoncapaProblem.grade_answers') as mock_grade: error_msg = u"Superterrible error happened: ☠" mock_grade.side_effect = Exception(error_msg)
("restricted_course", "country")
RegistrationFactory(user=self.user)
if not response.streaming and len(response.content) < 200: return response
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
'ENABLE_SOFTWARE_SECURE_FAKE': False,
try: import rfc3987 HAS_RFC3987 = True except ImportError: HAS_RFC3987 = False
self.assertIn("logo_image", json_data)
templates_path = ['_templates', '_templates/autosummary']
X = iris.data d = X.shape[1]
result = values.view('i8') == tslib.iNaT
choose_track_url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.post(choose_track_url, self.POST_PARAMS_FOR_COURSE_MODE['unsupported'])
mock_refund_seat.reset_mock() self.send_signal(skip_refund=True) self.assertFalse(mock_refund_seat.called)
qs = RasterRelatedModel.objects.filter(rastermodel__rast__dwithin=(rast, 40)) self.assertEqual(qs.count(), 1)
response = self.client.get('/login_protected_view/') self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')
self.client.force_login(self.u2, backend='django.contrib.auth.backends.AllowAllUsersModelBackend')
for p in user_partitions: has_selected = any(g["selected"] for g in p["groups"]) has_selected_groups = has_selected_groups or has_selected
for student in students[:7]: CertificateWhitelistFactory.create(user=student, course_id=self.course.id, whitelist=True)
result = _rollf(result)
('body_stats', Pipeline([ ('selector', ItemSelector(key='body')),
df = orig_df.copy() df.eval('c = a + b', inplace=True) self.assertRaises(SyntaxError, df.eval, 'c = a = b')
with check_mongo_calls(max_find.pop(0), max_send): with self.assertRaises(ItemNotFoundError): self.store.get_item(self.fake_location)
text = text.rstrip('\r\n') self.tokens = [(token_type, text) + token[2:]] self.check_logical()
if not settings.FEATURES.get('ENABLE_EDXNOTES'): filtered_list.append('edxnotes')
rng = np.random.RandomState(0) X = rng.rand(10, 20)
inv = salt.utils.vmware.get_inventory(_get_si())
pass
os.utime(path_test, (fstats_orig.st_mtime-age, fstats_orig.st_atime-age))
log = logging.getLogger(__file__)
names_inv_actual = sel.inverse_transform([feature_names_t]) assert_array_equal(feature_names_inv, names_inv_actual.ravel())
import logging
user = UserFactory.create() status = SoftwareSecurePhotoVerification.user_status(user) self.assertEquals(status, ('none', ''))
for frag in remainder: pats.append(re.escape(frag))
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( patch, DEFAULT, create_autospec, NO_MOCK, NO_MOCK_REASON ) ensure_in_syspath('../../')
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_key_string)
import collections
try: _table_file_open_policy_is_strict = ( tables.file._FILE_OPEN_POLICY == 'strict') except: pass
try: from salt.ext import ssl_match_hostname HAS_SSL_MATCH_HOSTNAME = True except ImportError: HAS_SSL_MATCH_HOSTNAME = False
simplefilter('ignore')
from __future__ import absolute_import import datetime import os import re import fnmatch import collections import copy import time
course_item.tabs = new_tab_list modulestore().update_item(course_item, request.user.id)
import salt.utils from salt.ext.six.moves import range
current_pred = _samme_proba(estimator, n_classes, X)
return any(op in s for op in ops)
values = [arg_val] values.extend(arg_vals) arguments[param.name] = tuple(values) break
from salt.states import blockdev import salt.utils
schema = query_reply['schema']
from salt.states import win_firewall import salt.utils
if keysize < 2048: keysize = 2048 tdir = tempfile.mkdtemp()
msg = "Input has different freq=A-DEC from Period" with tm.assertRaisesRegexp(period.IncompatibleFrequency, msg): base <= Period('2011', freq='A')
'transcript': 'http://video.google.com/timedtext?lang=en&v=OEoXaMPEzfM',
chunksize = self.chunksize chunks = int(nrows / chunksize) + 1
plt.subplot(2, 3, pairidx + 1)
it = TableIterator(self, s, func, where=where, nrows=nrows, start=start, stop=stop, iterator=iterator, chunksize=chunksize, auto_close=auto_close)
if is_int_positional:
self.assertTrue(result.equals(ci)) self.assertIsInstance(result, Index) self.assertNotIsInstance(result, CategoricalIndex)
if isinstance(how, compat.string_types): method = "{0}()".format(how)
from __future__ import absolute_import
if isinstance(values, np.ndarray): return obj[indexer.get_loc(key)]
try: output = radd(left, right) except TypeError: raise
new_art.save() art_id_3 = new_art.id self.assertNotIn(art_id_3, (None, art_id_1, art_id_2))
FIELD_OVERRIDE_PROVIDERS = tuple(ENV_TOKENS.get('FIELD_OVERRIDE_PROVIDERS', []))
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON ensure_in_syspath('../..')
assert x.ndim == 4 axes = self._input_space.axes assert len(axes) == 4
return
if self.output_field.get_internal_type() == 'TextField': class ToNCLOB(Func): function = 'TO_NCLOB'
if __grains__['os'] == 'FreeBSD': return __virtualname__ return (False, 'The freebsdservice execution module cannot be loaded: only available on FreeBSD systems.')
if step_score: self.scores_.append(step_score(estimator, features)) support_[features[ranks][:threshold]] = False ranking_[np.logical_not(support_)] += 1
from __future__ import absolute_import
AutoAuthPage( self.browser, username=self.username, email=self.email, password=self.password, course_id=self.course_id, staff=False ).visit()
spot_prefix = ''
if content.thumbnail_location is not None: try: thumbnail_content = trash.find(content.thumbnail_location) store.save(thumbnail_content) except Exception:
df = DataFrame({'bools': [True, False, True]}) result = df.replace(False, True) self.assertTrue(result.values.all())
items = source_hash.split('=', 1)
self.user = User.objects.get_by_natural_key(self.user.natural_key()[0])
yield prev_end, "E225 missing whitespace around operator"
if (is_datetimelike_v_numeric(left, right) or is_datetimelike_v_object(left, right) or needs_i8_conversion(left) or needs_i8_conversion(right)):
from salt.states import mysql_query import os
user_list[0].course_groups.add(non_cohort) user_list[0].course_groups.clear() self.assertFalse(mock_tracker.emit.called)
return not enabled(name, runas=runas)
redeem_url = reverse('register_code_redemption', args=[context['reg_code_info_list'][0]['code']])
add_info = self.run_function('group.info', [ADD_GROUP]) if add_info: self.run_function('group.delete', [ADD_GROUP])
__opts__['test'] = orig_test
parent = np.arange(n_nodes, dtype=np.intp) used_node = np.ones(n_nodes, dtype=np.intp) children = []
__virtualname__ = 'sysctl'
if not isinstance(query, six.string_types): raise TypeError('GeoIP query must be a string, not type %s' % type(query).__name__)
__virtualname__ = 'group'
if hasattr(self, 'scale_'): del self.scale_ del self.n_samples_seen_ del self.mean_ del self.var_
if axis == 0: X = X.transpose() mask = mask.transpose()
self.set_group_access(self.vertical, {1: []}) self.set_group_access(self.html, {2: None})
self.options.log_file = self._default_logging_logfile_
'e3b0b940318df9c14be59acb08e78af5', self._get_anonymous_id(SlashSeparatedCourseKey('MITx', '6.00x', '2012_Fall'), descriptor_class)
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
W, U, b = self._params if self.weight_noise: W = self.add_noise(W) U = self.add_noise(U)
_address_class = IPv4Address
self.assert_no_xpath(xml, "//label[@class='choicegroup_incorrect']", self.context)
from napalm import get_network_driver HAS_NAPALM = True
traversal_spec = vmodl.query.PropertyCollector.TraversalSpec( name='traverseEntities', path='view', skip=False, type=vim.view.ContainerView )
_x = lambda s: s if return_password else ''
return v
expect = kwargs.get('expect', '') options = kwargs.get('options', [])
_pre_compute = self._pre_compute_svd _errors = self._errors_svd _values = self._values_svd
'recon_max': float,
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, course_id=self.course_id, staff=False).visit()
for name in names: latest_installed = '0' latest_available = '0'
}
dirty = git_describe.endswith("-dirty") pieces["dirty"] = dirty if dirty: git_describe = git_describe[:git_describe.rindex("-dirty")]
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
'dark_lang',
except Exception: log.exception("error executing xblock handler") raise
pass
return value
self.template = None super(Context, self).__init__(dict_)
max_row = np.sqrt(n_plots) max_row = np.round(max_row) max_row = int(max_row)
from __future__ import absolute_import
cached_requirements = __salt__['cp.cache_file']( requirements, saltenv )
import salt.ext.six as six
plt.plot(xx, yy, 'k-') plt.plot(xx, yy_down, 'k--') plt.plot(xx, yy_up, 'k--')
stream.unget(chunk) return (RAW, {}, stream)
from __future__ import unicode_literals
s = s_orig.copy()
manager._originating_model = base
pkg_params = {name: version_num}
__MP_LOGGING_CONFIGURED = True
if course_message: msg = u"{} <br /> {}".format(msg, course_message.message)
del intfs['w']
original_values_map = self.get_settings_fields_of_each_type() self.set_wrong_inputs_to_fields() self.advanced_settings.wait_for_modal_load()
clf_isotonic = CalibratedClassifierCV(clf, cv=2, method='isotonic') clf_isotonic.fit(X_train, y_train, sw_train) prob_pos_isotonic = clf_isotonic.predict_proba(X_test)[:, 1]
self.assertIn('Search for a course', response.content)
stack = deque([start_node])
new_doc = {} new_doc['views'] = get_valid_salt_views() new_doc['language'] = "javascript"
new_connection.set_autocommit(False) self.assertEqual(new_connection.connection.isolation_level, serializable)
fields = Person._meta.get_fields() with self.assertRaisesMessage(AttributeError, msg): fields += ["errors"]
from ratelimitbackend import admin
partitioned_fields = self.partition_fields_by_scope(block_type, fields)
if 'download_track' not in field_data and track is not None: field_data['download_track'] = True
est = LogOddsEstimator() assert_raises(ValueError, est.fit, None, np.array([1]))
g = wkb_r().read(force_bytes(geo_input))
df2.ix[0, 'foo'] = 'a'
self.conn = pymysql.connect(host='localhost', user='root', passwd='', db='pandas_nosetest')
dt = datetime.datetime(2012, 3, 9, 1, 30, tzinfo=utc)
management.call_command( 'loaddata', 'sequence', verbosity=0, )
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call )
if not dayfirst and not yearfirst: result2 = Timestamp(date_str) self.assertEqual(result2, expected)
invalid_list = [None, "string", 5, datetime.datetime.today()]
for arr_format, arr in test_arrays.items(): assert_warns(UserWarning, check_symmetric, arr) assert_raises(ValueError, check_symmetric, arr, raise_exception=True)
cursor.execute("SHOW TIMEZONE") tz = cursor.fetchone()[0] self.assertEqual(new_tz, tz)
if isinstance(self.obj, com.ABCSeries): return self._deprecated()[key]
result = ols(y=y, x=x)
if is_protected_type(value): self._current[field.name] = value else: self._current[field.name] = field.value_to_string(obj)
self._process_includes()
if item in ['constraint']: if not isinstance(extra_args, (list, tuple)) or '--full' not in extra_args: cmd += ['--full']
extensions = [ "djangodocs", "sphinx.ext.intersphinx", "sphinx.ext.viewcode", "ticket_role", ]
self.assertIs(Series.str, strings.StringMethods) self.assertIsInstance(Series(['']).str, strings.StringMethods)
self.page = IndexPage(self.browser)
assert_array_almost_equal(dist1, dist2)
SERVICE_VARIANT = os.environ.get('SERVICE_VARIANT', None)
_encoding = None _upload_handlers = []
qs = Parcel.objects.filter(center1=F('city__location__point')) self.assertEqual(1, len(qs)) self.assertEqual('P1', qs[0].name)
modulestore().delete_course(destination_course_key, user_id)
self.cmap.set_overall_message("Test message")
kwargs_param = param continue
args.extend(arg)
fstats_post = os.stat(path_test)
ALL_ASSETS_XML_TAG = 'assets'
del mpoly self.assertTrue(prep.covers(Point(5, 5)))
exc_info_on_loglevel=logging.DEBUG
source_suffix = '.rst'
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
scalar = np.int64(1337904000000000).view('M8[us]') as_obj = scalar.astype('O')
category_start_date = None for entry in entries: if category_start_date is None or entry["start_date"] < category_start_date: category_start_date = entry["start_date"]
X.setflags(write=False) X_df_readonly = pd.DataFrame(X) with warnings.catch_warnings(record=True): X_df_ro_indexed = safe_indexing(X_df_readonly, inds)
deploy_scripts_search_path[idx] = entry continue
self._raise_unless_scope_is_allowed(key)
from __future__ import absolute_import
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
CsrfViewMiddleware().process_view(req, token_view, (), {}) resp = token_view(req)
ret = [] for data in running(): ret.append(signal_job(data['jid'], salt_SIGKILL)) return ret
gateway_set = True
url(r'^accounts/login/$', auth_views.login)
plt.figure(1, figsize=(3, 2.2)) plt.imshow(face, cmap=plt.cm.gray, vmin=vmin, vmax=256)
clear_url_caches()
salt.log.setup.shutdown_multiprocessing_logging()
centerer = KernelCenterer() K_fit_centered = np.dot(X_fit_centered, X_fit_centered.T) K_fit_centered2 = centerer.fit_transform(K_fit) assert_array_almost_equal(K_fit_centered, K_fit_centered2)
mixed = Series(['aBAD_BAD', NA, 'BAD_b_BAD', True, datetime.today(), 'foo', None, 1, 2.])
assert_true(np.all(K > 0)) assert_true(np.all(K - np.diag(np.diag(K)) < 1))
return html
response = external_auth.views.redirect_with_get('root', request.GET)
STRING_PAYLOAD = 'string_payload'
read_only_fields = set(update.keys()).intersection( AccountUserSerializer.get_read_only_fields() + AccountLegacyProfileSerializer.get_read_only_fields() )
[DISPLAY_NAME, 'Video', False], ['Default Video URL', 'https://www.youtube.com/watch?v=3_yD_cEKoCk, , ', False],
try: sec_index = self._section_titles().index(section_title) except ValueError: self.warning("Could not find section '{0}'".format(section_title)) return
from __future__ import absolute_import try: import pwd except ImportError: pass import logging import time
def custom_score(y_true, y_pred): return (((y_true == y_pred).sum() - (y_true != y_pred).sum()) / y_true.shape[0])
ret[pkg] = {'old': oldstate, 'new': state} return ret
self.teardown()
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010 13:30:00")
def env_func(f, argtypes): "For getting OGREnvelopes." f.argtypes = argtypes f.restype = None f.errcheck = check_envelope return f
df = _make_mixed_dtypes_df('float') _check_mixed_dtypes(df)
if len(children) < self.max_leases: self.client.create(self.create_path, self.data, ephemeral=self.ephemeral_lease)
return fnd
from salt.ext.six.moves import builtins as __builtin__ __builtin__.__salt__ = {}
if isinstance(opts['file_ignore_glob'], str): opts['file_ignore_glob'] = [opts['file_ignore_glob']]
NS = slice(None, None)
err = Exception mock_index_dictionary.return_value = err
if not os.path.isfile(config): try: with salt.utils.fopen(config, 'w+') as _fh:
columns = self.column_classes(Note) self.assertFalse(columns['info'][1][6])
if x['subnet_id'] not in subnet_ids and x['subnet_id'] is not None: to_delete.append(x['id'])
assert not value or all(0 <= v < self.num_layers for v in value) self.inputs_to_layers[key] = sorted(value)
new_user = authenticate(username=user.username, password=params['password']) login(request, new_user) request.session.set_expiry(0)
original.to_stata(path) written_and_read_again = self.read_dta(path) res = written_and_read_again.set_index('index') tm.assert_frame_equal(res, expected, check_categorical=False)
self.verify_discussion_topics_after_reload(self.inline_key, cohorted_topics_after)
capa_system = test_capa_system() capa_system.can_execute_unsafe_code = lambda: False
object_results = map(ordered_objects, search_queryset_pks) paged_results.object_list = object_results
return False
_cursor = complain ensure_connection = complain _commit = complain _rollback = ignore _close = ignore _savepoint = ignore _savepoint_commit = complain _savepoint_rollback = ignore _set_autocommit = complain
X, y = make_classification(n_samples=1000, n_features=25, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, random_state=0)
supports_mixed_date_datetime_comparisons = True
is_eligible = api.is_user_eligible_for_credit("staff", credit_course.course_key) self.assertFalse(is_eligible)
return 'Undefined SHIM state'
for i in range(X.shape[0]): x = X[i] out[i, i] = metric(x, x, **kwds)
rng = np.random.RandomState(0) X, y = make_regression(n_samples=20, n_features=1, random_state=0, noise=4.0, bias=100.0)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
self.assertNotIn(malicious_code, resp.content)
with self.assertRaises(SerializerDoesNotExist) as cm: serializers.get_serializer("nonsense") self.assertEqual(cm.exception.args, ("nonsense",))
world.wait_for_ajax_complete()
_version_info = std_call('GDALVersionInfo') _version_info.argtypes = [c_char_p] _version_info.restype = c_char_p
import salt.utils import salt.fileserver
def _asarray_compat(x): if isinstance(x, ABCSeries): return x._values else: return np.asarray(x)
result = embargo_api.check_course_access(self.course.id, ip_address='0.0.0.0') self.assertFalse(result)
self.setUpTestData() return super(TestCase, self)._fixture_setup()
if isinstance(self.opts['peer_run'][match], list): perms.update(self.opts['peer_run'][match])
tiger = Animal.objects.create(common_name="tiger") cheetah = Animal.objects.create(common_name="cheetah") bear = Animal.objects.create(common_name="bear")
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
from salttesting import skipIf from salttesting.helpers import (ensure_in_syspath, destructiveTest) ensure_in_syspath('../../')
action_name = ugettext_noop('generated') task_fn = partial(upload_may_enroll_csv, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
if self._middleware_chain is None: self.load_middleware()
opt_args['objective_error'] = objective_error opt_args['kwargs']['angle'] = self.angle opt_args['kwargs']['verbose'] = self.verbose
from __future__ import absolute_import import copy
dev1 = Developer(name='Joe') note = Note(note='Deserves promotion', content_object=dev1) with self.assertRaises(IntegrityError): note.save()
if method in self.URL_HANDLERS: handlers_list = self.URL_HANDLERS[method] else: self.log_error("Unrecognized method '{method}'".format(method=method)) return
import salt.utils.reactor import salt.syspaths import salt.utils.event import salt.utils.process from salt.ext.six import string_types
with self.assertRaises(ValueError): microsite.get_backend('microsite_configuration.microsite.invalid_method', BaseMicrositeBackend)
rendered = "0.post%%d" %% pieces["distance"] if pieces["dirty"]: rendered += ".dev0"
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from __future__ import unicode_literals
from pylearn2.datasets import cifar10
if not array_equivalent(l, r, strict_nan=strict_nan): diff += 1
index, columns, col_dict = self._create_index(ret)
request = self.request_factory.get('/', {'books_authored__isnull': 'True'}) changelist = self.get_changelist(request, User, modeladmin)
self.assertContains(response, "<td>Professional</td><td>2</td>")
seed = random_state.randint(0, np.iinfo(np.int32).max)
CourseInstructorRole(dest_course_id).add_users( *CourseInstructorRole(source_course_id).users_with_role() ) CourseStaffRole(dest_course_id).add_users( *CourseStaffRole(source_course_id).users_with_role() )
cmd = '{0}.{1}'.format(self.cmd_prefix, cmd)
_address_class = IPv6Address
cat = pd.Categorical([np.nan, 1, 2., 3]) self.assertTrue(com.is_float_dtype(cat.categories))
self.assertTrue((axis.get_ticklocs() == np.arange(len(df))).all())
score = sub_api.get_score(student_item) self.assertIs(score, None)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
parent = kwargs.pop('parent', None) or store.get_item(parent_location)
'html5_sources': ['http://www.example.com/source.mp4'], 'data': '',
if self.is_geometry: self.ewkb = bytes(obj.ewkb) self._adapter = Binary(self.ewkb) else: self.ewkb = to_pgraster(obj)
self.assertEqual(1, true_cardinality_flags)
svc_realpath = _get_svc_path(name)[0] down_file = os.path.join(svc_realpath, 'down')
exception = TypeError if six.PY3 else UnicodeError with self.assertRaises(exception): force_text(MyString())
return 'NOTPROVIDED'
if line.startswith('-'): if summary and summary_data and fault_data: result.update(_merge_data(summary_data, fault_data))
credit_api.set_credit_requirement_status( self.user.username, self.course.id, "reverification", "midterm", status="failed", reason={} )
termination_criterion = EpochCounter(5)
self.assertEqual(len(self.library.children), 2)
freq = getattr(series.index, 'freq', None) if freq is None: freq = getattr(series.index, 'inferred_freq', None)
assert_raises(ValueError, compute_sample_weight, {1: 2, 2: 1}, y, range(4))
response = None
from salt.cli.batch import Batch
self._requested_xblock_fields = set()
with patch('xmodule.capa_module.CapaModule.closed') as mock_closed: mock_closed.return_value = True
key = com._apply_if_callable(key, self.obj)
cm = metrics.confusion_matrix(y_test, y_predicted) print(cm)
l = Series(values).sort_values() ln = len(l)
if "enrollment_action" in request.POST: del request.POST["enrollment_action"] if "course_id" in request.POST: del request.POST["course_id"]
def is_in_axis(key): if not _is_label_like(key): try: obj._data.items.get_loc(key) except Exception: return False
return self.modulestores[0]
user = User.objects.get(username=username)
class BandAdmin(ModelAdmin): fields = ['name', 'bio'] exclude = ['bio']
SafeUnicode = SafeText
ItemFactory.create( category="html", parent_location=library.location, user_id=self.user_id, publish_item=False, modulestore=self.store, data=message ) library = self.store.get_library(library.location.library_key)
self.server.config['test_reset'] = 'This is a reset config test'
CLIENT_NAME = "edx-notes" DEFAULT_PAGE = 1 DEFAULT_PAGE_SIZE = 25
tfidf_test = t1.transform(counts_test).toarray() assert_equal(tfidf_test.shape, (len(test_data), len(v1.vocabulary_)))
MAX_STUDENTS_PER_PAGE_GRADE_BOOK = 20
eps_range = np.linspace(0.01, 0.99, 100)
items = self.store.get_items(self.course.id) self.assertEqual(len(items), 0)
if self.optimizer == 'Welch' and self.theta0.size == 1: self.optimizer = 'fmin_cobyla'
self.cfunc = getattr(lgeos, func_name + '_r') self.threaded = True self.thread_context = thread_context
reader = ExcelFile(path) frame3 = read_excel(reader, 'test1')
else:
import salt.utils.cloud import salt.config as config
urlconf_module = arg
import salt.utils
try: list_(name=name, runas=runas) return True except CommandExecutionError: return False
if not salt.utils.is_proxy(): self.opts['grains'] = salt.loader.grains(opts)
idx = pd.Index(list('abc'))
names = []
args = [name, '--id', snap_name]
morph_to_esri = void_output(lgdal.OSRMorphToESRI, [c_void_p]) morph_from_esri = void_output(lgdal.OSRMorphFromESRI, [c_void_p])
zk_concurrency.__salt__ = {} zk_concurrency.__opts__ = {}
sub_objs = field.bulk_related_objects(new_objs, self.using) self.collect(sub_objs, source=model, nullable=True)
import integration import salt.utils
pieces["closest-tag"] = None count_out = run_command(GITS, ["rev-list", "HEAD", "--count"], cwd=root)
return convert_indexer(start.start, stop.stop, step)
from __future__ import unicode_literals
assert_raises(ValueError, ir.fit, x, y)
if spot_config: sir_id = data[0]['spotInstanceRequestId']
AUTH_PROVIDERS = ('pygit2',) AUTH_PARAMS = ('user', 'password', 'pubkey', 'privkey', 'passphrase', 'insecure_auth')
termination_key = '{0}BlockDeviceMapping.{1}.Ebs.DeleteOnTermination'.format(spot_prefix, dev_index) params[termination_key] = str(set_del_root_vol_on_destroy).lower()
return original_arg
if delimiter is None: delimiter = sep
table = _normalize(table, normalize=normalize, margins=False)
try: import boto import boto.elasticache import boto.utils logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
course = modulestore().get_course(course_id, depth=4)
result = embargo_api.check_course_access(self.course.id, user=self.user, ip_address='FE80::0202:B3FF:FE1E:8329') self.assertTrue(result)
tgt_func = { 'range': target_range, 'glob': target_range, }
import glob import shutil import logging import os
grid_search = GridSearchCV(clf, param_grid=param_grid) start = time() grid_search.fit(X, y)
self.conn.create_stage.side_effect = ClientError(error_content, 'create_stage') self.conn.create_deployment.side_effect = ClientError(error_content, 'create_deployment')
y_subpopulation = np.zeros((max(n_subsamples, n_features))) lstsq, = get_lapack_funcs(('gelss',), (X_subpopulation, y_subpopulation))
from __future__ import unicode_literals
assert handlers == logger.handlers assert level == logger.getEffectiveLevel()
return progress
Number.objects.filter(pk=self.n.pk).update(integer=F('integer') % 20)
'show_timeout': bool,
new_axes = [selfsorted.columns, major_axis, minor_axis]
def test_user_role(): return 'staff'
url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.get(url)
tm.assert_series_equal(result.to_dense(), expected)
available_version = salt.utils.alias_function(latest_version, 'available_version')
class TestPlain(object): @myattr_dec_m @myattr2_dec_m def method(self): "A method" pass
return self.as_sql(compiler, connection, template='STATEMENT_TIMESTAMP()')
assert_almost_equal(df.values, unser.values, check_dtype=check_numpy_dtype) self.assert_index_equal(df.columns, unser.columns, exact=check_column_type)
face = face.mean(axis=2)
from __future__ import absolute_import import logging
if func_code.co_flags & 0x04: name = arg_names[pos_count + keyword_only_count] annotation = annotations.get(name, _empty) parameters.append(Parameter(name, annotation=annotation, kind=_VAR_POSITIONAL))
import integration
reset_queries()
self.make_course(textbooks=[IMAGE_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('book', book_index=0, page='xyzzy')
list_staff_master_course = list_with_level(self.course, 'staff') list_instructor_master_course = list_with_level(self.course, 'instructor')
if N == 0: return
return related_klass_infos
with self.assertRaises(TemplateDoesNotExist): loader.find_template(template_name)
header = "REMOTE_USER" force_logout_if_no_header = True
clf = svm.SVC(class_weight={1: 0.1}) clf.fit(X, Y) assert_array_almost_equal(clf.predict(X), [2] * 6)
import MySQLdb.converters return MySQLdb.escape(value, MySQLdb.converters.conversions)
__context__['systemd.journald'].seek_tail() __context__['systemd.journald'].get_previous() return __context__['systemd.journald']
register_hstore_handler(schema_editor.connection)
if dayfirst and yearfirst and is_lt_253: continue
CourseMode.objects.create( course_id=self.verified_course_key, mode_slug="verified", mode_display_name="verified cert", min_price=self.cost )
self.user_partition.scheme.current_group = groups[0] group1 = self.partition_service.get_group(self.user_partition) self.assertEqual(group1, groups[0])
X = rng.rand(n_samples, n_features)
incorrect = y_predict != y
_new_dir(CACHE_ROOT)
self._has_staff_access = None
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
import salt.ext.six as six
from salt.states import service
from __future__ import absolute_import import salt.ext.six.moves.http_client as http_client
from __future__ import absolute_import import tornado.stack_context import tornado.gen from tornado.testing import AsyncTestCase, gen_test import threading import time
import salt.utils from salt.ext.six.moves import range
'ENABLE_COMBINED_LOGIN_REGISTRATION': False,
self.lc_block.max_count = 50 self.lc_block.refresh_children() result = self.lc_block.validate()
idx = pd.PeriodIndex( ['2011-01-01 09:00', pd.NaT, '2011-01-01 11:00'], freq='H')
response = self._submit_photos(expected_status_code=400, face_image=self.IMAGE_DATA) self.assertEqual( response.content, "Photo ID image is required if the user does not have an initial verification attempt." )
errors = super(InlineModelAdminChecks, self)._check_exclude(obj) if errors: return []
'permissive_pki_access': bool,
width = self.ext.config['dailymotion_width'][0] height = self.ext.config['dailymotion_height'][0] return flash_object(url, width, height)
state = self._migrate_all_backwards(plan, full_plan, fake=fake)
return _get_backing_memmap(b)
self.assertTrue(self._is_valid_key(key), msg="Failed for unicode character {0}".format(unicode_char))
geos_project = GEOSFuncFactory( 'GEOSProject', argtypes=[GEOM_PTR, GEOM_PTR], restype=c_double, errcheck=check_minus_one ) geos_interpolate = Topology('GEOSInterpolate', argtypes=[GEOM_PTR, c_double])
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
import salt.ext.six as six try: import boto import boto3 from boto.exception import BotoServerError HAS_BOTO = True except ImportError: HAS_BOTO = False
__func_alias__ = { 'apply_': 'apply' }
if max_iter is None: max_iter = 1000
return os.access(parent_dir, os.W_OK)
from salt.pillar.sql_base import SqlBaseExtPillar
assert left is not right assert left.fixed_vars is not right.fixed_vars assert left.on_load_batch is not right.on_load_batch
with self.assertNumQueries(1): bookmarks = api.get_bookmarks(user=self.user, course_key=course.id, serialized=False) self.assertEqual(len(bookmarks), count)
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
self.assertNotEqual(draft_version, published_version)
param_obj = getattr(self._obj, param, None) if not (callable(param_obj) or isinstance(param_obj, property) or inspect.isgetsetdescriptor(param_obj)): param_obj = None
cov = ShrunkCovariance(shrinkage=0.5, store_precision=False) cov.fit(X) assert(cov.precision_ is None)
new_course_id = self.store.make_course_key('anotherX', 'anotherToy', 'Someday') self.check_import(root_dir, content_store, new_course_id) self.assertCoursesEqual(course_id, new_course_id)
#html_theme_options = {}
html_theme = "djangodocs"
check_arguments_for_rescoring(usage_key)
for lib in self.libs: for x in xrange(5): self.update_lib(lib) self.loader.clear() self._verify_libs()
overrides = copy.deepcopy(FORMFIELD_FOR_DBFIELD_DEFAULTS) for k, v in self.formfield_overrides.items(): overrides.setdefault(k, {}).update(v) self.formfield_overrides = overrides
self.iteration = sharedX(theano._asarray(0, dtype='int32'), name='iter')
rectangle_str = "(10,10)-(20,20);(100,100)-(200,200)"
__delitem__ = complain __delslice__ = complain __iadd__ = complain __imul__ = complain __setitem__ = complain __setslice__ = complain append = complain extend = complain insert = complain pop = complain remove = complain sort = complain reverse = complain
if mode: current_umask = os.umask(0o77)
values = np.asarray(values)
tm.assert_frame_equal(shifted.to_dense(), exp, check_dtype=False) shifted = frame.shift(1) exp = orig.shift(1) tm.assert_frame_equal(shifted, exp)
attempts = random.randint(1, 10) module = CapaFactory.create(attempts=attempts - 1, max_attempts=attempts) self.assertEqual(module.check_button_name(), "Final Check")
if pkgs is None: version_num = kwargs.get('version') variant_spec = kwargs.get('variant') spec = None
import warnings import operator import weakref import gc
instructor_user = User.objects.create_user('test_instructor_user', 'test_instructor_user@openedx.org', 'test') CourseInstructorRole(self.master_course_key).add_users(instructor_user)
my_estimator = MyEstimator() str(my_estimator)
import salt.config import salt.loader
else: values = self.values
images = np.zeros((3,) + face.shape) images[0] = face images[1] = face + 1 images[2] = face + 2 return images
pixeltypes.append(pixeltype)
s1 = self.backend() s1['test_data'] = 'value1' s1.save(must_create=True)
settings = _normalize_server_settings(**settings)
if 'tgt' not in load or 'jid' not in load or 'fun' not in load \ or 'arg' not in load: return False
if len(self.classes_) == 2: return dec_func[:, 1] - dec_func[:, 0] return dec_func
CertificateGenerationConfiguration(enabled=True).save()
try: master, self.pub_channel = yield self.eval_master( opts=self.opts, failed=True) except SaltClientError: pass
r = HttpResponse() r.content = ['idan', 'alex', 'jacob'] self.assertEqual(r.content, b'idanalexjacob')
result = df.groupby('A', as_index=False).cumsum() assert_frame_equal(result, expected)
import pickle
while 'rows' in query_reply and current_row < total_rows: page = query_reply['rows'] result_pages.append(page) current_row += len(page)
module = CapaFactory.create(attempts=1)
cmap.set(self.answer_id, queuestate=queuestate, correctness='incomplete', msg=msg)
yield_results[current_node] = should_yield_node
LANGUAGE_KEY = 'pref-lang'
command = resubmit_error_certificates
clean_warning_registry() with warnings.catch_warnings(record=True) as w: warnings.simplefilter('always')
self.assertEquals(self.conn.get_definitions.call_count, 0)
X_pred_transformed = kpca.transform(X_pred) assert_equal(X_pred_transformed.shape[1], X_fit_transformed.shape[1])
self.fitted = False
result = ts["1990-01-02"] expected = ts[24:48] assert_series_equal(result, expected)
if val == val and val != %(nan_val)s: nobs[lab, 0] += 1 if val > maxx[lab, 0]: maxx[lab, 0] = val
warnings.warn("Do you really want to regularize the detector units to be more active than the pooling units?")
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.django_book])
version_guids = [] id_version_map = defaultdict(list) for course_index in matching_indexes: version_guid = course_index['versions'][branch] version_guids.append(version_guid) id_version_map[version_guid].append(course_index) return version_guids, id_version_map
field_overrides = current_provider.get_register_form_data( running_pipeline.get('kwargs') )
self.assertTrue(self._has_changes(draft_xblock.location))
self.assertIsNone(getattr(self.request, 'session', None)) self.assertIsNone(getattr(self.request, 'safe_cookie_verified_user_id', None))
X = JUNK_FOOD_DOCS
course_one_team = CourseTeamFactory.create(name="Course one team", course_id=self.course.id, topic_id=1)
df.insert(0, 'baz', df['c']) self.assertEqual(df.columns.name, 'some_name')
content_type_concrete = models.ForeignKey(ContentType, models.CASCADE, related_name='+') object_id_concrete = models.PositiveIntegerField() content_object_concrete = GenericForeignKey('content_type_concrete', 'object_id_concrete')
available_version = salt.utils.alias_function(latest_version, 'available_version')
self.assertEqual(result['order'].status, 'purchased') self.assert_dump_recorded(result['order'])
new_nsamples[not marginalize_odd] += pa_bias * (1. - beta)
self.assertEqual(sysex.exception.args, (1,))
return CourseAssetsFromStorage(course_key, doc_id, course_assets['assets'])
self._check_align(empty, empty, axis=ax, fill_axis=fax, how=kind, method=meth) self._check_align(empty, empty, axis=ax, fill_axis=fax, how=kind, method=meth, limit=1)
for _ in range(2): utils.get_programs(staff_user)
for child_location in xblock.children: child = block_structure.get_xblock(child_location) group = child_to_group.get(child_location, None) child.group_access[partition_for_this_block.id] = [group] if group else []
self.assertTemplateNotUsed(response, 'GET Template')
if referer.scheme != 'https': return self._reject(request, REASON_INSECURE_REFERER)
exp = Float64Index([1.0, 2.0, 3.0], name='x') self.assert_index_equal(idx.fillna(2), exp)
course_instructors = list_with_level(course, 'instructor') course_instructors_ids = [anonymous_id_for_user(user, course_key) for user in course_instructors] course_details = CourseDetails.fetch(course_key)
from __future__ import absolute_import from json import JSONEncoder, loads
import tornado.ioloop
action_name = ugettext_noop('generated') task_fn = partial(upload_problem_responses_csv, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
assert False, 'type checking should happen without calling model __iter__'
segment_event_name = segment_properties['name'] disallowed_substring_names = [ a.lower() for a in getattr(settings, 'TRACKING_SEGMENTIO_DISALLOWED_SUBSTRING_NAMES', []) ]
self.assertRaises(Exception, self.panel4d.minor_xs, 'E')
os.rmdir(path)
params["username"] = params["password"] = "test_username_and_password" assert_password_error("Username and password fields cannot match")
from __future__ import absolute_import
from __future__ import absolute_import
course = store.get_course(course_key) self.enroll(course, True)
self.assertIn(str(verified_course_audit_track), response.content) for course in ( non_verified_course, verified_course_verified_track, verified_course_deadline_passed, unenrolled_course ): self.assertNotIn(str(course), response.content)
width = self.ext.config['gametrailers_width'][0] height = self.ext.config['gametrailers_height'][0] return flash_object(url, width, height)
old_cwd = None
for i, val in minibatch: if val is not None: activations[i] = val
clf = GradientBoostingRegressor(n_estimators=10, random_state=1) clf.fit(boston.data, boston.target)
from __future__ import absolute_import, print_function import os import copy import json import stat import shutil import fnmatch import hashlib import logging
self.assertFalse(check_for_language('tr-TR.UTF-8')) self.assertFalse(check_for_language('tr-TR.UTF8')) self.assertFalse(check_for_language('de-DE.utf-8'))
scaling = 0.3 selection_threshold = 0.5
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from __future__ import absolute_import import pprint
from __future__ import unicode_literals
import salt.exceptions import salt.loader import salt.minion import salt.utils.args import salt.utils.event from salt.client import mixins from salt.output import display_output from salt.utils.lazy import verify_fun
url = reverse('verify_student_start_flow', kwargs=course_kwargs)
with self.assertNumQueries(0): RestrictedCourse.is_restricted_course(new_course_id) RestrictedCourse.is_disabled_access_check(new_course_id)
self.opts = None
python_shell = False if '*.' in cmd: python_shell = True
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
testit('L', lambda x: 'ms')
result = middleware.process_request(request) self.assertIsNone(result)
raise SaltCloudSystemExit( 'The following VM\'s were not found: {0}'.format( ', '.join(names) ) )
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if self.should_show_check_button(): check_button = self.check_button_name() check_button_checking = self.check_button_checking_name() else: check_button = False check_button_checking = False
from __future__ import absolute_import from __future__ import unicode_literals import sys import time from salttesting import TestCase, skipIf from salttesting.helpers import destructiveTest from salt.modules import reg as win_mod_reg try:
if estimator_error <= 0: return sample_weight, 1., 0.
get_input_space = Model.get_input_space get_output_space = Model.get_output_space
do_utc = False do_zone = False
self.directive = None
elif len(cond[icond]) == len(other):
pattern = non_named_group_matcher.sub("<var>", pattern)
self.subscriber.read_async(event_handler)
import logging
self.original_usage = edit_info.get('original_usage', None) self.original_usage_version = edit_info.get('original_usage_version', None)
guestfs.__salt__ = {}
index = tm.makeStringIndex(20) floats = Series(tm.randn(20), index=index) strings = Series(tm.makeStringIndex(10), index=index[::2])
rng = rng = np.random.RandomState(42)
while True: if mode == "B": if X_pinv is None: X_pinv = linalg.pinv2(X, **pinv2_args) x_weights = np.dot(X_pinv, y_score)
sql, params = '%s', [val]
unfiltered_response = self.verify_response(params={'username': self.staff_user.username}) for org in [self.course.org, alternate_course.org]: self.assertTrue(
with open(CONFIG_ROOT / CONFIG_PREFIX + "auth.json") as auth_file: AUTH_TOKENS = json.load(auth_file)
from salt.utils.odict import OrderedDict import salt.ext.six as six
srs = SpatialRefSys.objects.get(srid=sd['srid']) ellps2 = srs.ellipsoid
__func_alias__ = { 'time_': 'time' }
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
co_border = State.objects.get(name='Colorado').poly ks_border = State.objects.get(name='Kansas').poly
result = ols(y=y, x=x, cluster='entity', window_type='expanding', window=10)
indices = indices[::-1] maybe_slice = lib.maybe_indices_to_slice(indices, len(target)) self.assertTrue(isinstance(maybe_slice, slice)) self.assert_numpy_array_equal(target[indices], target[maybe_slice])
assert np.isfinite(data_x).all() assert np.isfinite(data_y).all() assert data_x.shape[0] == data_y.shape[0]
self.assertEqual(module.attempts, 1)
try: section_content = about_information.get_value(**about_context)
from salt.utils import get_group_list
tmp_profile_dir = tempfile.mkdtemp(prefix='profile_') profname = 'auto_profile_sphinx_build' pdir = os.path.join(tmp_profile_dir,profname) profile = ProfileDir.create_profile_dir(pdir)
import salt.ext.six as six
elif subarr.ndim == 1: if index is not None:
out = opts['output']
self.assertFalse(UserPreference.objects.filter(user=user, key=NOTIFICATION_PREF_KEY)) request = self.request_factory.get("dummy") request.user = AnonymousUser()
if key.field_name not in aside_fields: self._load_definition()
if self._mode in ['a', 'w'] and mode in ['r', 'r+']: pass elif mode in ['w']:
if queue: _wait(kwargs.get('__pub_jid')) else: conflict = running(concurrent) if conflict: __context__['retcode'] = 1 return conflict
XQUEUE_STUB_URL = os.environ.get('xqueue_url', 'http://localhost:8040')
if not isinstance(max_samples, (numbers.Integral, np.integer)): max_samples = int(max_samples * X.shape[0])
from salt.utils.decorators import memoize
self.object = None
sa_4326 = 'POINT (-98.493183 29.424170)'
data = "Some data" ItemFactory.create( parent_location=self.library.location, category="html", display_name="Html Content 3", data=data, modulestore=store, publish_item=False, )
import yaml import salt.ext.six as six from salt.ext.six.moves import range log = logging.getLogger(__name__)
request.grant_type = grant_type request.user = user
naughty_update = { "username": "not_allowed", "gender": "undecided", "email": "not an email address" }
with self.assertRaises(SearchIndexingError): reindex_course_and_check_access(self.course.id, self.user)
if is_float_dtype(dtype): result = result.astype(dtype) return _wrap_results(result, values.dtype)
PARTNER_SUPPORT_EMAIL = ENV_TOKENS.get('PARTNER_SUPPORT_EMAIL', PARTNER_SUPPORT_EMAIL)
from __future__ import division, absolute_import, print_function
assert world.is_css_not_present(modal_css, wait_time=10)
b.update({'a': 1}) self.assertEqual(a, b)
if os.path.isdir(tmp_dir): shutil.rmtree(tmp_dir) elif os.path.isfile(tmp_dir): os.remove(tmp_dir)
dataset_sources="sources.lst" dataset_web="http://www.stevenpigeon.org/secret" dataset_conf_path="" dataset_data_path="" root_conf_path=None root_data_path=None user_conf_path=None user_data_path=None super_powers=False
client = get_file_client(__opts__)
with salt.utils.fopen('/usr/share/libvirt/cpu_map.xml', 'r') as cpu_map: cpu_map = minidom.parse(cpu_map)
raised = False fmt = OneHotFormatter(max_labels=50) try: fmt.theano_expr(theano.tensor.vector(dtype=theano.config.floatX)) except TypeError: raised = True assert raised
CreditProvider.objects.create( provider_id="ASU", enable_integration=True, provider_url="https://credit.example.com/request", )
self.assertTrue('success' in result and result['success'])
for resource_id, resource in self.test_recommendations.iteritems(): for xblock_name in self.XBLOCK_NAMES: result = self.call_event('add_resource', resource, xblock_name)
dump_data = self.serial.dumps(data, use_bin_type=True)
is_oneshot = True
cause_copy = sharedX(np.zeros((num_samples,))).dimshuffle(0,'x') v_state = v_state[0,:] + cause_copy y_state = y_state[0,:] + cause_copy
with self._mock_geoip('US'): result = embargo_api.check_course_access(self.course.id, user=self.user, ip_address='0.0.0.0')
pass
from __future__ import unicode_literals
data = "a,b,c\n4,5,6\n\\" self.assertRaises(Exception, self.read_csv, StringIO(data), escapechar='\\')
all_folds[te2] = 1
user.profile.name = u'Jan ĄĘ'
ForestClassifier = FOREST_CLASSIFIERS[name]
datasetCache = cache.datasetCache im_path = datasetCache.cache_file(im_path) label_path = datasetCache.cache_file(label_path)
chunk = stream.read(max_header_size)
self.allow_thread_sharing = allow_thread_sharing self._thread_ident = thread.get_ident()
self.assert_grade( two_choice_two_input, self._make_answer_dict([(True, ["1"]), (True, ["Platypus"])]), "correct" )
assert_almost_equal(dists[0], 0, decimal=5)
random_state = np.random.RandomState(0) n_samples, n_features = X.shape X = np.c_[X, random_state.randn(n_samples, 200 * n_features)]
transform = AdditiveChi2Sampler(sample_steps=4) assert_raises(ValueError, transform.fit, X)
values = conv(values)
task_input = { 'statuses_to_regenerate': [ CertificateStatuses.downloadable, CertificateStatuses.error, CertificateStatuses.generating ] }
ret['result'] = True ret['comment'] = 'vm {0} already running'.format(name)
else:
a_sorted = self.frame['A'].sortlevel(0)
return os.sep.join(__file__.split(os.sep)[:-4]) + '/data/imports/' + filename
DONATION_TYPES = ( ("general", "A general donation"), ("course", "A donation to a particular course") )
self.user.is_active = False self.user.save() verify_get_own_information(9)
elif course_overview.location.org in orgs_to_exclude: continue
__, course_ids = mock_get_programs.call_args[0] self.assertEqual(list(course_ids), [self.course_1.id]) self._assert_responses(response, 1)
return str(out)
self.frame.to_latex(column_format='ccc')
continue
return None
try: self.assertIn(self.INSTANCE_NAME, delete_str) self.assertIn('True', delete_str) except AssertionError: raise
container = self.go_to_nested_container_page() verify_ordering(self, container, expected_ordering)
Book.objects.create(title="Pro Django", published=datetime.date(2008, 12, 16))
from __future__ import unicode_literals
for k, v in webresponse.headers.iteritems(): http_response[k] = v
def test_to_excel_multiindex_cols(self): _skip_if_no_xlrd()
raise
with self.assertRaises(Place.MultipleObjectsReturned): Restaurant.objects.get()
p = Place.objects.get(name="Demon Dogs") r = Restaurant(place=p) self.assertIs(r.place, p)
raise
request._cache_update_cache = False return response
methods = ['standard', 'ltsa', 'hessian', 'modified'] labels = ['LLE', 'LTSA', 'Hessian LLE', 'Modified LLE']
break
required_boto3_version = '1.2.1'
self.assertFalse(ax1._shared_y_axes.joined(ax1, ax2)) self.assertFalse(ax2._shared_y_axes.joined(ax1, ax2))
reserved = _("All rights reserved") context['copyright_text'] = u'&copy; {year} {platform_name}. {reserved}.'.format( year=settings.COPYRIGHT_YEAR, platform_name=platform_name, reserved=reserved )
__virtualname__ = 'sysctl'
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'
pipe_results = False if filename == '-': filename = mktemp() pipe_results = True
cursor.execute('SET SQL_AUTO_IS_NULL = 0')
if max_cols == 0 and len(self.frame.columns) > w: max_cols = w if max_rows == 0 and len(self.frame) > h: max_rows = h
applied, state = self.detect_soft_applied(state, migration) if applied: fake = True
'rest_timeout': int,
df = DataFrame(dict( A=Series(lrange(3), index=date_range('2000-1-1', periods=3, freq='H'))))
activation_key = create_account(self.USERNAME, self.PASSWORD, self.EMAIL) activate_account(activation_key)
self.verbose_mod = 1 self.start_time = time() self.begin_at_stage = begin_at_stage
managed = True
csv_str = self.frame.to_csv(path=None) self.assertIsInstance(csv_str, str) recons = pd.read_csv(StringIO(csv_str), index_col=0) assert_frame_equal(self.frame, recons)
'multiprocessing': bool,
n_estimators_per_job = (n_estimators // n_jobs) * np.ones(n_jobs, dtype=np.int) n_estimators_per_job[:n_estimators % n_jobs] += 1 starts = np.cumsum(n_estimators_per_job)
with self.assertRaises(ValueError): for obj in qs: pass
rs = ser.replace([np.nan, 'foo', 'bar'], -1)
if ( tag == 'msubsup' and len(k) == 3 and gettag(k[2]) == 'mrow' and
from salttesting import TestCase, skipIf from salt.exceptions import SaltInvocationError from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, mock_open, NO_MOCK, NO_MOCK_REASON )
boston = datasets.load_boston() perm = rng.permutation(boston.target.size) boston.data = boston.data[perm] boston.target = boston.target[perm]
__salt__['file.comment_line'](name, regex, char, True, backup)
ops.add_flex_arithmetic_methods(Series, **ops.series_flex_funcs) ops.add_special_arithmetic_methods(Series, **ops.series_special_funcs)
if span <= periodspermonth: day_start = period_break(dates_, 'day') month_start = period_break(dates_, 'month')
assert_equal(len(matched_buttons), 1) return matched_buttons[0]
user_passes_test(lambda u: True), login_required, permission_required('change_world'),
if not is_platform_little_endian(): raise nose.SkipTest("known failure of test on non-little endian")
from __future__ import absolute_import import os import struct
generate_certificates_for_students( request, params["course_key"], student_set="specific_student", specific_student_id=params["user"].id ) return HttpResponse(200)
all_lists = np.all([not hasattr(v, "rvs") for v in self.param_distributions.values()]) rnd = check_random_state(self.random_state)
if func_kw is None: func_kw = [] kwds = {} for k in func_kw: value = kwargs.pop(k, None) if value is not None: kwds[k] = value
df = DataFrame(np.random.randint(0, 2, (4, 4)), columns=['a', 'b', 'c', 'd'])
log.info('Created node {0}'.format(vm_['name']))
ssh_gateway_password: ExamplePasswordHere
mock_plain = MagicMock() with patch.object(parallels, 'prlctl', mock_plain): parallels.list_vms(runas=runas) mock_plain.assert_called_once_with('list', [], runas=runas)
output = os.popen('mongo --eval "print(\'running\')"').read() return output and "running" in output
self.assertTrue(3.0 in s)
from __future__ import absolute_import from __future__ import print_function import json import time
from __future__ import absolute_import, print_function import logging
ret['hash_type'] = __opts__['hash_type']
predicted = cross_val_predict(lr, boston.data, y, cv=10)
kwargs['force'] = True return image_present(name, **kwargs)
time.sleep(5)
if server_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'scaleway', server_['profile'], vm_=server_) is False: return False
from cPickle import loads from cPickle import dumps
fast_forward = None
self.assertTrue(Article.objects.filter(headline=new_headline)) self.assertFalse(Article.objects.filter(headline=old_headline))
if self.force_save_button: return not self.closed() else: is_survey_question = (self.max_attempts == 0) needs_reset = self.is_submitted() and self.rerandomize == RANDOMIZATION.ALWAYS
new = list_pkgs(saltenv=saltenv)
for _ in xrange(0, max_iters): last_d = doc_topic_d
user2 = UserFactory() add_instructor(rerun_course_key, self.user, user2)
expr = Forward()
n_dtypes = 2 old_nchannels = shape[2] shape[2] = old_nchannels / 2 assert shape[2] * 2 == old_nchannels, \
self.course = CourseFactory.create(default_store=default_store)
d1 = DenseDesignMatrix(topo_view=topo_view) slice_d = from_dataset(d1, 5) assert slice_d.X.shape[1] == d1.X.shape[1] assert slice_d.X.shape[0] == 5
if settings.configured: settings.USE_I18N = True else: settings.configure(USE_I18N=True)
return association_response
if gid is not None: gid_group = None for lgrp in grps: if lgrp['gid'] == gid: gid_group = lgrp['name'] break
err = ItemNotFoundError mock_get_course.return_value = err
actual_field = None for field in form_desc["fields"]: if field["name"] == expected_field["name"]: actual_field = field break
userKeys += ['id_rsa.pub', 'id_dsa.pub', 'id_ecdsa.pub', 'id_ed25519.pub']
desired_volumes = sorted(list(data) + [ k for k in _image_get(config['image_path']) or [] if k not in data])
from openpyxl.workbook import Workbook
return self._deprecated().plot(*args, **kwargs)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
data['ItemB'] = data['ItemB'][:-1] self.assertRaises(Exception, Panel, data)
from __future__ import print_function
import salt.ext.six as six
import salt.ext.six as six
re.compile(regex) opts['file_ignore_regex'].append(regex)
if ext == '': subfiles = os.listdir(fpath) for suffix in suffix_order: if '' == suffix:
if hasattr(importlib, 'invalidate_caches'): importlib.invalidate_caches()
for db in connections: loader.check_consistent_history(connections[db])
td = Series(date_range('20130101', periods=4)) - \ Series(date_range('20121201', periods=4)) td[2] += timedelta(minutes=5, seconds=3) td[3] = np.nan
self.assertEqual(len(w), 3)
result = expr._can_use_numexpr(operator.add, '+', self.frame2, self.frame2, 'evaluate') self.assertFalse(result)
import json
with self.assertRaises(SearchIndexingError): CoursewareSearchIndexer.do_course_reindex(modulestore(), self.course.id)
self.proxy = salt.loader.proxy(self.opts)
from __future__ import absolute_import import socket import logging
callable = callable
for config_key in ('spm_logfile',): log_setting = opts.get(config_key, '') if log_setting is None: continue
report_dir = (Env.REPORT_DIR / system).makedirs_p()
data = { 'username': 'inactive', 'password': 'password', }
continue
source_store = self.store._get_modulestore_by_type(source_modulestore) dest_store = self.store._get_modulestore_by_type(destination_modulestore) self.assertCoursesEqual(source_store, source_course_key, dest_store, dest_course_id)
self.blank_lines += 1 del self.tokens[0]
last_modified_at_str = content.last_modified_at.strftime(HTTP_DATE_FORMAT) if 'HTTP_IF_MODIFIED_SINCE' in request.META: if_modified_since = request.META['HTTP_IF_MODIFIED_SINCE'] if if_modified_since == last_modified_at_str: return HttpResponseNotModified()
microsite_orgs = microsite.get_all_orgs() return [course for course in courses if course.location.org not in microsite_orgs]
request.META["HTTP_HOST"] = "edge.edx.org" response = index(request)
self.assertRaises(IndexError, self.ts.__getitem__, len(self.ts))
if encoding is not None and len(data): data = Series(data.ravel()).str.encode( encoding).values.reshape(data.shape)
#pepa_pillars:
source_store.copy_all_asset_metadata(source_course_key, dest_course_key, user_id)
return [tuple(map(int, score.split('/'))) for score in text_scores]
res = df.loc[lambda x: ['A', 'C']] tm.assert_frame_equal(res, df.loc[['A', 'C']])
npix = self._npix[zoom]
resp = self.client.put( '/shoppingcart/payment_fake', data="decline", content_type='text/plain' ) self.assertEqual(resp.status_code, 200)
centers[center_idx] += np.sum(X[center_mask], axis=0)
self.course_id = course_entry.course_key self.lazy = lazy self.module_data = module_data self.default_class = default_class self.local_modules = {} self._services['library_tools'] = LibraryToolsService(modulestore)
self.assertEqual(response.status_code, 200)
searcher = SearchEngine.get_search_engine(index_name)
from __future__ import unicode_literals
ret_stdout = [] ret_stderr = [] while self.conn.has_unread_data: stdout, stderr = self.conn.recv()
apply_sdb(opts)
with warnings.catch_warnings(record=True) as warns:
dates_as_str = ['1984-02-19', '1988-11-06', '1989-12-03', '1990-03-15']
doc_resolvers = {} doc_resolvers['sklearn'] = SphinxDocLinkResolver(app.builder.outdir, relative=True)
Y = np.dot(U, V)
self.mapping = mapping self.model = model
reg = LinearRegression(fit_intercept=intercept) reg.fit(X, y, sample_weight=sample_weight) coefs1 = reg.coef_ inter1 = reg.intercept_
return getattr(settings, 'SOCIAL_AUTH_SAML_SP_PRIVATE_KEY', '')
self.shell.process_input_line('bookmark -d ipy_savedir', store_history=False) self.shell.clear_cout()
self.assertFalse(self._has_changes(published_xblock.location))
from __future__ import absolute_import import os import shutil
XQUEUE_INTERFACE['url'] = 'http://localhost:8040'
n_samples, n_features = iris.data.shape
CourseEnrollmentFactory(user=self.student, course_id=self.course.id)
FEATURES['ENABLE_COURSEWARE_SEARCH'] = True
new_module = modulestore().get_item(chapter_locator)
points = [round0_25(point) for point in points]
import salt.ext.six as six
from __future__ import unicode_literals
self.notes_page.wait_for_ajax() note = self.notes_page.notes[1] assert_page(note, self.raw_note_list[2]['usage_id'], "Location in Course")
return False
self.map = {} self.set_call_count = 0 self.timeout_from_last_call = 0
if output_pixel_vals: channel_defaults = [0, 0, 0, 255] else: channel_defaults = [0., 0., 0., 1.]
X, y = _rescale_data(X, y, sample_weight)
self.distribution.salt_download_windows_dlls = True self.run_command('download-windows-dlls') self.distribution.salt_download_windows_dlls = None
is_doctest = contains_doctest(code) if 'format' in options: if options['format'] == 'python': is_doctest = False else: is_doctest = True
with tm.assert_produces_warning(FutureWarning): result_add = rng + other result_union = rng.union(other)
if 'rows' not in _response: log.error('Unable to get available minions: {0}'.format(_response)) return []
self.assertEqual(response.request['PATH_INFO'], '/unknown_view/;some-parameter')
if not isinstance(key, slice): return key
vbox_guest.__salt__ = {} vbox_guest.__opts__ = {}
return u''.join(filter(None, parts))
result_count = paginator.count
block_structure.request_xblock_fields('category')
from __future__ import absolute_import, print_function
all_variables, all_functions = add_defaults(variables, functions, case_sensitive)
self._reset() return self.partial_fit(X, y)
if not isnull(self.fill_value): shifted = self.to_dense().shift(periods, freq=freq, axis=axis) return shifted.to_sparse(fill_value=self.fill_value, kind=self.kind)
genesis.__grains__ = {} genesis.__salt__ = {} genesis.__context__ = {} genesis.__opts__ = {}
result = self.enroll(self.course) self.assertFalse(result)
from __future__ import absolute_import import json import logging
lp = self.panel.filter(['ItemA', 'ItemB']).to_frame() with tm.assertRaises(ValueError): self.panel['ItemE'] = lp
return False
self.xmodule_runtime = xmodule_runtime
watch = salt.utils.alias_function(wait, 'watch')
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
include, exclude = map( lambda x: frozenset(map(com._get_dtype_from_object, x)), selection) for dtypes in (include, exclude): com._invalidate_string_dtypes(dtypes)
import socket import random import time import codecs import uuid import logging import json
print('=' * 80) print("NearestCentroid (aka Rocchio classifier)") results.append(benchmark(NearestCentroid()))
chunks = [kwargs]
continue
self.assertEqual(iptables.build_rule(jump='CLUSTERIP', **{'new': ''}), '--jump CLUSTERIP --new ')
collection = self._create_collection(len(init_geoms), iter(init_geoms)) super(GeometryCollection, self).__init__(collection, **kwargs)
res1 = sql.read_sql_query("select * from test_chunksize", self.conn)
self._create_courses_and_enrollments( (self.TEST_ORG, True), (self.TEST_ORG, True), (self.TEST_ORG, True), )
self.assertRaises(ValueError, sql.to_sql, temp_frame, 'test_index_label', self.conn, if_exists='replace', index_label='C')
parameter_name = None
response = default_with_prefix_view(request, '6') self.assertEqual(response.content, b'Hello World 4')
d = load_linnerud() X = d.data Y = d.target
from __future__ import absolute_import import logging
assert_array_almost_equal(K.flat[::6], np.ones(5))
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch
breadcrumbs = self._breadcrumb(num_units=num_units, modified_name=modified_name) breadcrumbs.reverse() self.assertEqual(bookmarked_breadcrumbs, breadcrumbs)
clear_data_home(data_home=data_home) assert_false(os.path.exists(data_home))
html()
set_crontab(
self.assertOrphanCount(course.id, 0) self.assertOrphanCount(published_branch, 1) self.assertIn(orphan, self.store.get_items(published_branch))
A = np.empty(n_nodes, dtype=object) inertia = list()
i = range(A.shape[0]) j = range(A.shape[1]) ind = MultiIndex.from_product([i, j]) s = s.reindex_axis(ind)
del dgamma1, dgamma2, sd
self.assertEqual(list(bookmark.tags.all()), list(bookmark.tags.all().all()))
tm._skip_if_no_pytz() from pytz import timezone as timezone
for cls in [BernoulliNB, MultinomialNB, GaussianNB]: assert_raises(ValueError, cls().fit, X2, y2[:-1])
for l in [slice(3.0, 4), slice(3, 4.0), slice(3.0, 4.0)]:
dependencies=[ (app_label, model_name, field_name, "order_wrt_unset"), (app_label, model_name, field_name, "foo_together_change"), ],
PaymentFakeView.PAYMENT_STATUS_RESPONSE = "success"
if self.is_offset_lhs: lvalues = to_timedelta(lvalues, box=False) if self.is_offset_rhs: rvalues = to_timedelta(rvalues, box=False)
DATE_INPUT_FORMATS = [
datasets = list(datasets[label] for label in data_subsets.keys()) if len(datasets) == 1: datasets, = datasets
self.assertRaises(ValueError, self.read_csv, StringIO(data), header=[0, 1, 2, 3], index_col=[0, 1], as_recarray=True, tupleize_cols=False)
clf = MultinomialNB() clf.fit(X_train, y_train, sw_train) prob_pos_clf = clf.predict_proba(X_test)[:, 1]
for blkno, indexer in lib.get_blkno_indexers(blknos, group): yield blkno, BlockPlacement(indexer)
if not (stat.S_IWGRP & fmode.st_mode or stat.S_IWOTH & fmode.st_mode): return True
raise NotImplementedError('Awaiting Implementation')
'ENABLE_OAUTH2_PROVIDER': False,
self.defaults = block_data.get('defaults', {})
check_ortho(pls_ca.x_scores_, "x scores are not orthogonal") check_ortho(pls_ca.y_scores_, "y scores are not orthogonal")
if self.ndim > 1 and i == self.obj._info_axis_number:
fake_key = SlashSeparatedCourseKey('a', 'b', 'c') self.assertRaises(Http404, lambda: cohorts.is_course_cohorted(fake_key))
from salt.states import boto_iam_role
if not uninstaller: log.error('Error: No installer or uninstaller configured ' 'for package {0}'.format(name)) ret[target] = {'no uninstaller': version_num} continue
dirs_to_remove = set()
if __name__ == '__main__':
X, y = check_X_y(X, y, accept_sparse=("csr", "csc"), multi_output=True, y_numeric=True)
result = strings.str_cat(one) exp = 'aabbc' self.assertEqual(result, exp)
if os.path.isfile(path_item): with open(path_item, "rb") as file_handle: hasher.update(file_handle.read())
self.assertEqual(len(outbox), 1)
CourseModeFactory.create( course_id=self.course.id, mode_slug=CourseMode.VERIFIED, mode_display_name=CourseMode.VERIFIED, expiration_datetime='1970-01-01 05:00:00' )
result = False
if HAS_GEOMETRY_COLUMNS: self.assertGeometryColumnsCount(2)
decorator `django.utils.decorators.decorator_from_middleware(middleware_class)`
from __future__ import absolute_import
if self._is_grade_request():
requires_explicit_null_ordering_when_grouping = False
from __future__ import absolute_import
if not self.q(css="input.no_special_exam").present: return False
ret = {} ifaces = _get_interfaces() for face in ifaces: if 'hwaddr' in ifaces[face]: ret[face] = ifaces[face]['hwaddr'] return {'hwaddr_interfaces': ret}
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
self.assertEqual(self.empty_series.index.dtype, np.object_) _check_all_orients(self.empty_series, check_index_type=False)
if not hasattr(self, 'center'): self.center = False if not hasattr(self, 'gcn'): self.gcn = False
ret['comment'] = 'Cluster {0}/{1} is not present, so it cannot ' \ 'be removed'.format(version, name) return ret
ret['comment'] = ('File {0} is not present and is not set for ' 'creation').format(name) return ret
UNICODETEST_WITH_SIGNS = 'Testing Unicode \N{COPYRIGHT SIGN},\N{TRADE MARK SIGN},\N{REGISTERED SIGN} '+TIMESTR UNICODETEST_WITHOUT_SIGNS = 'Testing Unicode'+TIMESTR UNICODE_TEST_KEY = 'UnicodeKey \N{TRADE MARK SIGN} '+TIME_INT_UNICODE UNICODE_TEST_KEY_DEL = 'Delete Me \N{TRADE MARK SIGN} '+TIME_INT_UNICODE
if ttype == 'zeromq': import salt.transport.zeromq return salt.transport.zeromq.AsyncZeroMQPubChannel(opts, **kwargs)
log.debug(u"Referrer hostname is `None`, so it is not on the whitelist.")
os.chdir(TEST_DIR)
self.assertTrue(version)
cmd = 'Uninstall-Module "{0}"'.format(name) no_ret = _pshell(cmd) return name not in list_modules()
conf[opt] = [x.strip() for x in cp.get('main', opt).split(',')]
from __future__ import unicode_literals
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'profitbricks' DRIVER_NAME = 'profitbricks'
if HAS_ZMQ: zmq.eventloop.ioloop.install() self.io_loop = LOOP_CLASS() for req_channel in self.req_channels:
backend = connection.ops
self.repo = dulwich.repo.Repo.init(self.cachedir) new = True
checks = [check for check in checks if not hasattr(check, 'tags') or Tags.database not in check.tags]
ecode = win32process.GetExitCodeProcess(self._handle) if ecode == win32con.STILL_ACTIVE: raise self.exitstatus = ecode
from salt.utils.yamldumper import OrderedDumper
dti = DatetimeIndex(start=datetime(2005, 1, 1), end=datetime(2005, 1, 10), freq='D', name='index')
result = df.assign(A=df.A + df.B) expected = df.copy() expected['A'] = [5, 7, 9] assert_frame_equal(result, expected)
signed_fields = post_params.get('signed_field_names').split(',')
raw = read_stata(self.dta_encoding) encoded = read_stata(self.dta_encoding, encoding="latin-1") result = encoded.kreis1849[0]
for o in self._objs:
result2 = func(np.arange(50), span=10) self.assertEqual(result2.dtype, np.float_)
else: retcode = 0
self.assertTrue(self.store.has_item(course.id.make_usage_key('html', "multi_parent_html")))
for i, idx in enumerate(indexes): rows[names[i]] = idx
ipset.__salt__ = {}
self.assertEqual( self.run_function('xattr.read', [TEST_FILE, 'patrick']), 'ERROR: Attribute not found: patrick')
css_include = compressed_css('style-main-v1') self.assertIn(u'lms-main-v1.css', css_include)
class_name = getattr(block, 'unmixed_class', block.__class__).__name__
self.verbose_mod *= 10
_install_from_path.assert_called_with(source)
__virtualname__ = 'acl'
self.assertIn( err_msg, resp.content )
call_command('manage_group', TEST_GROUP) self.check_groups([TEST_GROUP]) self.check_permissions(TEST_GROUP, [])
response = self._response() self.assertFalse(response.is_rendered)
values = values.copy() if copy else values return values
return hash(self.__class__) ^ hash(self.varname)
from __future__ import absolute_import import os import pwd import glob import shutil
if subnet_names: for i in subnet_names: r = __salt__['boto_vpc.get_resource_id']('subnet', name=i, region=region, key=key, keyid=keyid, profile=profile)
response = method("/request_data/?foo=whiz") self.assertEqual(response.context['get-foo'], 'whiz')
with check_mongo_calls(max_find, max_send): wiki_courses = self.store.get_courses_for_wiki('999') self.assertEqual(len(wiki_courses), 1) self.assertIn(
str(qs.query)
neighbors.kneighbors_graph = ignore_warnings(neighbors.kneighbors_graph) neighbors.radius_neighbors_graph = ignore_warnings( neighbors.radius_neighbors_graph)
self._make_eligible()
import copy import logging import os
casted = pd.DataFrame(other, index=self.index, columns=self.columns) return self._combine_frame(casted, na_op, fill_value, level)
filter_spec = vmodl.query.PropertyCollector.FilterSpec( objectSet=[obj_spec], propSet=[property_spec], reportMissingObjectsInResults=False )
self.assertEqual(event.dt.replace(tzinfo=EAT), dt)
ans = set()
video_url = world.browser.url
for n_labels in range(2, 10): y_score = np.ones((1, n_labels))
from __future__ import unicode_literals
if oracle: qs = qs.exclude(name='Texas') for country in qs: self.assertTrue(country.mpoly.sym_difference(geom).equals(country.sym_difference))
manage.py ... transfer_students -f edX/Open_DemoX/edx_demo_course -t edX/Open_DemoX/new_demoX,edX/Open_DemoX/edX_Insider
MAX_ATTEMPTS = 30 for i in range(MAX_ATTEMPTS): if not exists(table_name, region, key, keyid, profile): return True else:
url( r'^account/', include('student_account.urls') ),
mi2.names = ["A", "B"] self.assertTrue(mi2.is_(mi)) self.assertTrue(mi.is_(mi2))
import cherrypy from cherrypy.lib import cpstats import yaml import salt.ext.six as six
if not eventtime: eventtime = str(int(time.time()))
seed = module.seed self.assertTrue(seed is not None)
self.assertEqual(result, list(range(256)))
s2 = s.copy() s2[1] = 5 expected = s.append(Series([5], index=[1])) assert_series_equal(s2, expected)
ax.xaxis.set_major_locator(MaxNLocator(nbins=6, prune='lower')) tick_formatter = ScalarFormatter() tick_formatter.set_powerlimits((-3, 4)) ax.xaxis.set_major_formatter(tick_formatter)
from __future__ import absolute_import import os
tmp = X[i, :].copy() X[i, :] = X[j, :] X[j, :] = tmp
block_values = np.empty(shape, dtype=object) block_values.fill(np.nan)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
if not snapshot: ret['error'] = 'one or more snapshots must be specified'
log = logging.getLogger(__name__)
self.workd = _aligned_zeros(3 * n, self.tp) self.workl = _aligned_zeros(3 * self.ncv * (self.ncv + 2), self.tp)
expected = DataFrame(comb, columns=names, index=[1, 2]) result = DataFrame(mrecs, index=[1, 2]) assert_fr_equal(result, expected)
self._pending_operations = defaultdict(list)
self.last_time = time.time()
class DecimalLessThanOne(models.Model): d = models.DecimalField(max_digits=3, decimal_places=3)
result = algos.take_nd(arr, indexer, axis=0) expected = arr.take(indexer, axis=0) expected[-1] = np.nan tm.assert_almost_equal(result, expected)
api_key: <supersecretapi_key> driver: vultr
for student in students[:7]: CertificateWhitelistFactory.create(user=student, course_id=self.course.id, whitelist=True)
if self.orig is not None: result = take_1d(result, self.orig.cat.codes)
from salt.modules import smtp
if ':' not in ip_str: return False
__virtualname__ = 'imgadm'
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
return self.__missing__(key)
self._test_email_address_failures(SESDomainEndsWithDotError(554, "Email address ends with a dot"))
salt '*' vsphere.get_coredump_network_config my.esxi.host root bad-password
X = np.asfortranarray(iris.data.astype(tree._tree.DTYPE)) y = iris.target
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
predictions = cval.cross_val_predict(clf, X, y) assert_equal(predictions.shape, (10,))
local_cache.clean_old_jobs()
how = kwargs.pop('how', None) if how is not None: kwds['how'] = how
self.enrollment.delete()
if update.IsDownloaded and not update.IsInstalled: results['Downloaded'] += 1
from __future__ import unicode_literals
self.enroll(self.course, True) self.enroll(self.test_course, True)
self.assertTrue(formset.is_valid())
export_course_to_xml(self.store, content_store, course_id, root_dir, 'test_export')
rng = np.random.RandomState(0) rand_data = RandomData(rng, scale=7) n_components = rand_data.n_components
options.c = 1 self.assertEqual(len(holder), 1)
if block: time.sleep(0.01) else: yield
dense_classifier = AdaBoostClassifier( base_estimator=CustomSVC(probability=True), random_state=1, algorithm="SAMME" ).fit(X_train, y_train)
if "setuptools" in sys.modules: from setuptools.command.sdist import sdist as _sdist else: from distutils.command.sdist import sdist as _sdist
shiftedFrame = self.tsframe.shift(5, freq=datetools.BDay()) self.assertEqual(len(shiftedFrame), len(self.tsframe))
'ioflo_console_logdir': str,
self.navigate_to_video()
result = Series([np.timedelta64('NaT')]).sum() self.assertTrue(result is pd.NaT)
start_response(H[code], get_headers(ret, { 'Content-Type': 'application/json', })) return (ret,)
s = Series(date_range('1/1/2000', periods=10))
set_user_preference(self.user, ACCOUNT_VISIBILITY_PREF_KEY, preference_visibility) self.create_mock_profile(self.user) response = self.send_get(client)
with warnings.catch_warnings(): warnings.filterwarnings("ignore", message=".*incomparable objects.*", category=RuntimeWarning)
('default', base_mgr), ('food_mgr2', mgr2), (b'food_mgr1', mgr1),
from request_cache.middleware import RequestCache
Ht = check_array(H.T, order='C') X = check_array(X, accept_sparse='csr')
self.assertEqual(len(installed), 2)
if isinstance(frames, OrderedDict): result = OrderedDict()
empty = self.index[:2] & self.index[2:] expected = self.index[:0] self.assertTrue(empty.equals(expected))
if mask.all(): continue
data = np.random.randn(N)
def inner(*args, **kwargs): with self: return func(*args, **kwargs) return inner
if old == '*': return True
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
create_volume = volume_create
response_element = etree.Element("javascriptresponse")
if rast is None or rast == '': return
s = s + record.exc_text.decode(sys.getfilesystemencoding())
sensors.__salt__ = {}
if self.transform: g.transform(self.transform)
return
try: result = wua_installer.Install()
self.assertEqual( get_object_or_404(Article.objects.all(), title__contains="Run"), article )
self.assertEqual(input, ujson.decode(output)) tm.assert_numpy_array_equal( np.array(input), ujson.decode(output, numpy=True))
self.geom_field = field_name self.coord_dim = coord_dim fields_val = model_field
from salt.modules import win_certutil as certutil
is_hideable = False
exec_(final_template, _globals)
'django_comment_common',
return X[:n_samples], X[n_samples:]
if should_grade_section: scores = []
logger.debug('Websocket already connected, returning') return
conditional_page = ConditionalPage(self.browser) conditional_page.fill_in_poll() self.courseware_page.visit() self.assertTrue(conditional_page.is_content_visible())
return
(offset_nem_thu_aug_4, datetime(2012, 8, 30), True), (offset_nem_thu_aug_4, datetime(2011, 9, 1), True),
pass
key = safe_key(key, '', '')
'ENABLE_CONTENT_LIBRARIES': True,
monitoring_dataset = DenseDesignMatrix(X=X)
CONFIG_PREFIX = SERVICE_VARIANT + "." if SERVICE_VARIANT else ""
response = self.client.get('/permission_protected_view/') self.assertRedirects(response, '/accounts/login/?next=/permission_protected_view/')
if isinstance(opts['file_ignore_regex'], str): ignore_regex = [opts['file_ignore_regex']] elif isinstance(opts['file_ignore_regex'], list): ignore_regex = opts['file_ignore_regex']
feature_names = [feature_names[i] for i in ch2.get_support(indices=True)]
if next_usage.block_type == "course": path = (next_usage, path) return flatten(path) elif parent is None: return None
if os_family == 'suse': PATTERNS = 'pkg.list_installed_patterns' elif os_family == 'redhat': PATTERNS = 'pkg.group_list' else: PATTERNS = None
text = f.widget.format_value(result) self.assertEqual(text, '01:30:05 PM 21/12/2010')
if items is None: items = Index(sorted(frames.keys())) items = _ensure_index(items)
'limits': { 'CPU': 1, },
defaults = {'max_length': self.max_length, 'widget': forms.Textarea} defaults.update(kwargs) return super(TextField, self).formfield(**defaults)
for item in mask.split(','): if item not in _MASK_TYPES: return 'Invalid mask type: {0}' . format(item)
response = self.send_get( client=self.client, url=reverse('bookmarks'), query_parameters='course_id=invalid' ) bookmarks_data = response.data['results']
col_mean, col_var, n_total_samples = \ _incremental_mean_and_var(X, last_mean=self.mean_, last_variance=self.var_, last_sample_count=self.n_samples_seen_)
def __init__(self, form, *items): self.form = form super(ResultList, self).__init__(*items)
g1 = wkb_r.read(wkb) g2 = wkb_r.read(hex) for geom in (g1, g2): self.assertEqual(ref, geom)
return X, y
file = instance.__dict__[self.field.name]
if com.is_datetimelike(self.categories): return self.categories.take(self._codes, fill_value=np.nan) return np.array(self)
if hasattr(settings, 'DEPRECATED_ADVANCED_COMPONENT_TYPES'): xblock_types.extend( xblock_type for xblock_type in settings.DEPRECATED_ADVANCED_COMPONENT_TYPES if xblock_type not in xblock_types )
course_overview_2 = CourseOverview.get_from_id(course.id) self.assertFalse(course_overview_2.mobile_available)
ct_out_map = ( ('application/json', json.dumps), ('application/x-yaml', functools.partial( yaml.safe_dump, default_flow_style=False)), )
log.error('Detected nodegroup expansion failure of "{0}"'.format(word)) return False
sorted_dists_exact = np.sort(distances_exact[0]) sorted_dists_approx = np.sort(distances_approx[0])
'USE_YOUTUBE_OBJECT_API': False,
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit()
return indent
microsite.clear() with patch('django.conf.settings.MICROSITE_CONFIGURATION', False): self.assertEqual( microsite.get_all_orgs(), set() )
self.some_url = '/'
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
for key, op in OPERATORS.items(): op.id = key
self.assertEqual(module.attempts, 2)
self.explicit = True return optparse.Option.take_action(self, action, dest, *args, **kwargs)
docs_train, docs_test, y_train, y_test = train_test_split( dataset.data, dataset.target, test_size=0.5)
link_index = None for index in range(len(all_links)): if course_id in all_links[index]: link_index = index break
self.assertEquals(resp.status_code, 400)
self.assertEqual(len(new_stores), len(old_stores)) for new_store in new_stores: self.assertStoreValuesEqual(new_store, old_stores[new_store['NAME']])
html_response.debug = {'url': url, 'section': section, 'block_urlname': block_urlname} return html_response
cmd = '{0} '.format(path) cmd += '| Select-Object -Property FullName, Extension, Exists, ' \ '@{Name="LastWriteTime";Expression={Get-Date ($_.LastWriteTime) -Format g}}'
import salt.utils.http
exc_info_on_loglevel=logging.DEBUG
response = redirect(reverse('cas-login'))
import logging import os import re
status = certs_api.example_certificates_status(self.course.id) self.assertIsNot(status, None)
if isinstance(series.index, DatetimeIndex): series = series.to_period(freq=freq)
self.factory(loss="foobar")
stack = traceback.extract_stack(limit=2)
_write_file_network(network, _RH_NETWORK_FILE)
if url is not None: return redirect(url)
log.error('Spot instance request resulted in state \'{0}\'. ' 'Nothing else we can do here.') return False
cmd = __salt__['cmd.run_all']('racadm {0} {1}'.format(command, modswitch))
self.client.force_login(self.joepublicuser) self.client.force_login(self.superuser) self.assertEqual(self.client.session.test_cookie_worked(), False)
self.assert_enrollment_status(expected_status=status.HTTP_401_UNAUTHORIZED)
func = getattr(block.__class__, handler_name, None) if not func: raise ValueError("{!r} is not a function name".format(handler_name))
try: from traitlets.config import Config except ImportError: from IPython import Config from IPython import InteractiveShell from IPython.core.profiledir import ProfileDir from IPython.utils import io from IPython.utils.py3compat import PY3
VERIFY_STUDENT["SOFTWARE_SECURE"] = { "API_ACCESS_KEY": "BBBBBBBBBBBBBBBBBBBB", "API_SECRET_KEY": "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", }
current_info = info(name) if not current_info: raise CommandExecutionError('User \'{0}\' does not exist'.format(name))
axes = [obj._get_axis_number(a) for a in axes]
from __future__ import absolute_import import collections import math
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath
if generate_translation: old_langs = set(old_metadata.get('transcripts', {})) if old_metadata else set() new_langs = set(item.transcripts)
self._old_models = apps.app_configs['model_options'].models.copy()
@python_2_unicode_compatible class Person(models.Model): name = models.CharField(max_length=100)
@override_settings(DATABASE_ROUTERS=[TestRouter()]) class RouterTestCase(TestCase): multi_db = True
class BandAdmin(ModelAdmin): fields = ['name']
Y_neg = Y.copy() Y_neg[0, 0] = -1 assert_raises(ValueError, transform.transform, Y_neg)
self.assertIn(self.split_test_module.child_descriptor.url_name, ['split_test_cond0', 'split_test_cond1'])
msg = "No module {loc} for student {student}--access denied?".format( loc=usage_key, student=student ) TASK_LOG.debug(msg) raise UpdateProblemModuleStateError(msg)
n_samples, n_features, n_classes = 50, 20, 3 X, y = make_classification(n_samples=n_samples, n_features=n_features, n_informative=10, n_classes=n_classes, random_state=0)
def __setstate__(self, state): self._is_child = True self.__init__( state['opts'], state['socket_queue'], log_queue=state['log_queue'] )
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
ts_pre_fallback = "2013-11-03 01:59:59.999999" ts_pre_springfwd = "2013-03-10 01:59:59.999999"
rval_axes = self.output_axes assert len(rval_axes) == 4
module = module + '.' if not module.endswith('.') else module
assert_frame_equal(df.div(row), df / row) assert_frame_equal(df.div(col, axis=0), (df.T / col).T)
self.na_op = lambda x, y: getattr(x, self.name)(y) return lvalues, rvalues
pipeline = Pipeline([('imputer', Imputer(missing_values=0)), ('tree', tree.DecisionTreeRegressor(random_state=0))])
self.assertFalse(getattr(request, 'process_template_response_reached', False)) self.assertTrue(getattr(request, 'process_response_reached', False))
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
result = df.append(series.to_dict(), ignore_index=True) assert_frame_equal(result, expected)
import salt.utils from salt.exceptions import CommandExecutionError
if not addresses: addresses = dict() _LOG.debug('Empty %s specified.', setting)
log.warning("Send-email task %s for email %s: being retried", current_task_id, email_id)
parameters["signature"] = signature(parameters, shared_secret_key)
post_data['password'] = 'new password' form = UserChangeForm(instance=user, data=post_data)
patcher = patch('pavelib.quality.sh') self._mock_paver_sh = patcher.start()
if self._isClockwise(poly.exterior_ring): poly.exterior_ring = list(reversed(poly.exterior_ring))
watch = salt.utils.alias_function(wait, 'watch')
opts['ext_pillar'] = [x for x in opts['ext_pillar'] if 's3' not in x]
log.warning( u"More than 1 ranges in Range header: %s for content: %s", header_value, unicode(loc) )
from netaddr import IPAddress from netaddr.core import AddrFormatError
self.assertFalse(self.cmap.is_partially_correct('9_2_1'))
return dict(result=True, data=tmplsrc)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
send_password = False
outliers = abs_linear_loss[outliers_mask] num_outliers = np.count_nonzero(outliers_mask) n_non_outliers = X.shape[0] - num_outliers
for idx in ['lxc.cgroup.memory.limit_in_bytes']: if not default_data.get(idx): self._filter_data(idx)
rng = date_range('1/1/2000', periods=10, freq='BMS')
if position == "denominator": latex += render_frac(numerator, denominator) else: num_latex = r"\cdot ".join(k.latex for k in numerator) latex += num_latex
jid_dir_name = jid_file.rpartition('/')[2] self.assertEqual(jid_dir_name, 'jid')
yield
lookup_value = '[^/.]+'
git_mod.__salt__ = {} git_mod.__context__ = {} log = logging.getLogger(__name__)
leaf = len(lookup.prefetch_through.split(LOOKUP_SEP)) - 1 == level
with self.assertRaises(GitImportErrorRemoteBranchMissing): git_import.add_repo(self.TEST_REPO, repo_dir / 'edx4edx_lite', 'asdfasdfasdf')
try: return self._prefix_from_ip_int(ip_int) except ValueError: pass
identify_epsg = void_output(lgdal.OSRAutoIdentifyEPSG, [c_void_p])
mb_k_means = MiniBatchKMeans(n_clusters=20, batch_size=201, random_state=42, init="random") mb_k_means.fit(zeroed_X) assert_greater(mb_k_means.cluster_centers_.any(axis=1).sum(), 10)
result = s.reorder_levels(['L0', 'L1', 'L2']) assert_series_equal(s, result)
self.execute(self.sql_delete_table % { "table": self.quote_name(model._meta.db_table), })
latex_documents = [ ('index', 'pylearn2.tex', 'Pylearn2 Documentation', 'LISA lab, University of Montreal', 'manual'), ]
HAS_SWIFT = False try: from swiftclient import client
zpool.__salt__ = {}
from salt.states import status
resp = self.create_xblock(category='vertical') usage_key = self.response_usage_key(resp)
if former_encoding is not None and former_encoding != "utf-8":
(27, True, u"True"),
store = self._verify_modulestore_support(None, 'create_library') library = store.create_library(org, library, user_id, fields, **kwargs)
'colors': colors
if class_probability is None: class_prob_j = np.empty(shape=classes[j].shape[0]) class_prob_j.fill(1 / classes[j].shape[0]) else: class_prob_j = np.asarray(class_probability[j])
return JsonResponse({'return_code': 0})
return name
import copy import logging import os import re from distutils.version import LooseVersion as _LooseVersion
self.prob2 = ItemFactory.create( parent_location=self.course.location, category='problem', display_name='untitled problem 2' )
categories = categoricals[0] rawcats = categories.categories for x in categoricals[1:]: if not categories.is_dtype_equal(x): raise ValueError("incompatible categories in categorical concat")
try: self.assertIn( 'True', [i.strip() for i in self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))] ) except AssertionError: raise
state_run = self.run_function('state.sls', mods='requisites.listen_in_simple')
metadata_to_inherit = {}
self.selenium.find_elements_by_css_selector('.field-birthdate .timezonewarning')
from __future__ import unicode_literals
staff_access = False errored_courses = {} if has_access(user, 'staff', 'global'): staff_access = True errored_courses = modulestore().get_errored_courses()
from __future__ import absolute_import import logging import os import tempfile
component_types = COMPONENT_TYPES[:]
if columns is not None: columns = _ensure_index(columns)
assert_raises(ValueError, clf.partial_fit, X2[:, :-1], y2)
model = SelectFromModel(clf, prefit=True) assert_raises(ValueError, model.fit, data, y)
if not record.exc_info_on_loglevel_instance and not exc_info_on_loglevel_formatted: return formatted_record
DATE_INPUT_FORMATS = [
class MyModelAdmin(admin.ModelAdmin): pass for k in admin_overrides: setattr(MyModelAdmin, k, admin_overrides[k])
self.assertEqual(res.context['next_year'], None) self.assertEqual(res.context['previous_year'], datetime.date(2006, 1, 1))
event_info = dict() event_info['module_id'] = self.capa_module.location.to_deprecated_string() event_info['problem_part_id'] = self.id
cap = pcapy.open_live(self.iface, 65536, 1, 0)
initial_value = initial if initial is not None else '' data_value = data if data is not None else '' return initial_value != data_value
df = self.tsframe.fillna(0).astype(np.int32) df.cumprod(0) df.cumprod(1)
assert_greater(gpc.log_marginal_likelihood(gpc.kernel_.theta), gpc.log_marginal_likelihood(kernel.theta))
result = f.clean('2010-12-21 13:30:05') self.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))
from salt.exceptions import SaltInvocationError, CommandExecutionError
std_y = std(y) assert_equal(corr_x_y, cov_x_y / (std_x * std_y))
problem_not_specified = self.build_problem(answer="Second") problems = [problem_specified, problem_not_specified]
B, C, IR, IC = ishp4 K, CH, KR, KC = kshp4
response = self.client.get(test_url) self.assertIn(str(self.cert.verify_uuid), response.content)
'ALLOW_HIDING_DISCUSSION_TAB': False,
_infinitedict = lambda: collections.defaultdict(_infinitedict)
self.assertEqual(json.loads(resp.content).get('status'), 'Transcripts are supported only for "video" modules.')
import json
df2 = df.ix[:, ['AAA', 'B', 'C']]
if hasattr(original_file, 'seek'): original_file.seek(0)
req_to_remove = CreditRequirement.get_course_requirements(course_key, namespace=req_namespace, name=req_name)
from __future__ import absolute_import import os import shutil import socket import subprocess import tempfile
import atexit import logging
def f(): s.loc[3.0]
input_formula = "x + y" self.assert_grade(problem, input_formula, "incorrect")
self.ordered = values.ordered self.typ = self.get_atom_data(block, kind=codes.dtype.name) self.set_data(_block_shape(codes))
if 'family' in _CREATE_OPTIONS[set_type]: cmd = '{0} family {1}'.format(cmd, ipset_family)
if category not in ['html', 'problem', 'video']: return HttpResponseBadRequest( "Category '%s' not supported for Libraries" % category, content_type='text/plain' )
return super(PandasObject, self).__sizeof__()
s = Series(timedelta_range('1 day 1 s', periods=5, freq='h'))
self.verify_expected_team_id(new_teams[0], 'the-best-team') self.verify_expected_team_id(new_teams[1], 'the-best-team') self.assertNotEqual(new_teams[0]['id'], new_teams[1]['id'])
df = df_orig.copy()
authentication_classes = []
mlp_model = MLP( layers=[mlp_nonlinearity(dim=output_channels, layer_name='mlp', irange=1.0)], batch_size=batch_size, nvis=nvis )
B, IR, IC, C = ishp4 K, KR, KC, CH = kshp4
newFrame = self.frame.reindex(list(self.ts1.index)) self.assert_index_equal(newFrame.index, self.ts1.index)
self.verify_content_existence(self.store, root_dir, course_id, 'about', 'about', '.html')
X = csr_matrix(Xdigits[:4])
redirect_to = get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to)
chunk[key] = name
transform.fit(X) assert_not_equal(transform.sample_interval_, None)
ret = {'name': name, 'result': False, 'comment': '', 'changes': {},
'EMBARGO': False,
for model, obj in self.instances_with_model(): if not model._meta.auto_created: signals.pre_delete.send( sender=model, instance=obj, using=self.using )
from __future__ import unicode_literals
Book.objects.filter(pages__gt=150).delete()
result = first.difference([]) self.assertTrue(first.equals(result)) self.assertEqual(first.names, result.names)
error_msg = ('Invalid parameter %s for estimator %s. ' 'Check the list of available parameters ' 'with `estimator.get_params().keys()`.')
s = Series()
self.IP = IP self.user_ns = self.IP.user_ns self.user_global_ns = self.IP.user_global_ns
sequence.default_time_limit_minutes += sequence.default_time_limit_minutes self.store.update_item(sequence, self.user.id)
poly = fromstr(p.wkt) cs = poly.exterior_ring.coord_seq
TIME_FORMAT = 'P'
rval = -T.dot(state, self.bias)
if __name__ == '__main__': swarm = Swarm(parse()) try: swarm.start() finally: swarm.shutdown()
msg_format = _("Problem {action} for {succeeded} of {attempted} students")
raise NotImplementedError()
mode = __salt__['config.manage_mode']('0600') owner, group, crontab_dir = _get_cron_info()
if dtype.kind in ['i', 'O', 'f']: dtype = np.float64
for index in [tm.makeIntIndex, tm.makeRangeIndex]:
result = self.ts.map(lambda x: x * 2) self.assert_series_equal(result, self.ts * 2)
import logging
DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
for i in range(0, 4): np.testing.assert_allclose(fl.get_params()[i].eval(), mlp_composite.get_params()[i].eval())
rtable = self.data.pivot_table(columns=['AA', 'BB'], margins=True, aggfunc=np.mean) tm.assertIsInstance(rtable, Series)
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_key_string) get_course_with_access(request.user, 'staff', course_key)
s = self.frame['C'].copy() s.name = None
return False
wes_timer = timeit.Timer(stmt='_tseries.fast_unique(arr)', setup=setup % sz)
obj.clear_ordering(True)
if GeneratedCertificate.certificate_for_student(self.user, self.course_id) is not None: return False
coef = np.zeros(n_features) coef[:n_relevant_features] = coef_min + rng.rand(n_relevant_features)
modulestore().update_item(course_module, request.user.id)
log.exception( 'Failed to handle marketing opt-in flag: user="%s", course="%s"', user.username, course_key )
df['int'] = 1 df.ix[2:7, 'int'] = 2
assert np.all((ps == 0) + (ps == 1)) assert np.all((hs == 0) + (hs == 1))
rec_check = records[tb_offset:] try: rname = rec_check[0][1] if rname == '<ipython console>' or rname.endswith('<string>'): return rec_check except IndexError: pass
status = 'failed' reason = { 'final_grade': grade_summary['percent'], 'minimum_grade': min_grade }
cost = SumOfCosts([SumOfParams(), (0., DummyCost())]) model = DummyModel(shapes, lr_scalers=scales) dataset = ArangeDataset(1) momentum = 0.5
from __future__ import absolute_import
try: C = linalg.cholesky(R, lower=True) except linalg.LinAlgError: return reduced_likelihood_function_value, par
subdict_str = _select_block(dict_str[pos:], '{', '}') value = _parse_dict_recursive(subdict_str) pos_tmp = pos + len(subdict_str)
return [True]
if not hasattr(self, 'names_to_del'): self.names_to_del = set() self.names_to_del = self.names_to_del.union(names)
return func(X, Y, **kwds)
class TestW3CGeo2(TestGeoRSS2): feed_type = feeds.W3CGeoFeed
'bootstrap_delay': int,
if not name.startswith('_'): doc['Traits'].append((name, trait, comment.splitlines()))
winrm_port = config.get_cloud_config_value( 'winrm_port', vm_, __opts__, default=5986 )
import salt.ext.six as six
dset = fetch_mldata(dataname, transpose_data=False, data_home=tmpdir) assert_equal(dset.data.shape, (3, 2))
if isinstance(err, DataFrame):
from salt.states import ipmi
g[['A', 'C']]
test_view = views.CustomSingleObjectView() context = test_view.get_context_data() self.assertEqual(context['object'], test_view.object)
import logging
if self.connect_callback is not None: def handle_future(future): response = future.result() self.io_loop.add_callback(self.connect_callback, response) future.add_done_callback(handle_future)
exc_info_on_loglevel=logging.DEBUG
import json import logging import uuid import time
self._create_courses_and_enrollments((self.TEST_ORG, True)) self._set_opt_in_pref(self.user, self.TEST_ORG, opt_in_pref)
from __future__ import print_function
import logging
output = assets._get_asset_json("my_file", content_type, upload_date, location, thumbnail_location, True)
value.decode(charset)
self.queue_len = 0 if self.status == 'incomplete': self.status = 'queued' self.queue_len = self.msg self.msg = self.submitted_msg
import integration
from salt.modules import dnsmasq
if os.path.isdir(base_dir / url_name): self._load_extra_content(system, course_descriptor, category, base_dir / url_name, course_dir)
self.assertIsNone(subq._result_cache)
for i, species in enumerate([BV_bunch, MM_bunch]): print("_" * 80) print("Modeling distribution of species '%s'" % species.name)
self = self_wr() if self._alive: self._alive = False if callback is not None: callback(self)
r = self.series.resample('H') with tm.assert_produces_warning(None): str(r) with tm.assert_produces_warning(None): repr(r)
self.has_conf = False self.val = self.run_function('sysctl.get', [ASSIGN_CMD])
staticfiles.finders.get_finder.cache_clear()
for i in range(columns.nlevels):
self.assertFalse(has_access(self.normal_student, 'load', self.content, self.course.id))
super(DraftModuleStore, self).clone_course(source_course_id, dest_course_id, user_id, fields)
import integration
from salt.ext.six import string_types
executor = MigrationExecutor(connection)
import salt.utils from salt.exceptions import CommandExecutionError
from __future__ import absolute_import
set_credit_requirements(self.course.id, requirements)
return {'stdout': _cmd_run_values[' '.join(key)], 'stderr': '', 'retcode': 0, 'pid': 12345}
(cmd, cwd) = _render_cmd(cmd, cwd, template, saltenv, pillarenv, pillar_override)
xT_AT = self.lmul_T(self.transpose_right(x, False)) rval = self.transpose_left(xT_AT, False) return rval
details['extends'] = extends keep_looping = True
'ENABLE_S3_GRADE_DOWNLOADS': False,
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): self.assertRaises(AttributeError, lambda: r.F)
predict = pipe.predict(X) assert_equal(predict.shape, (n_samples,))
import pandas as pd
with ensure_clean_store(self.path) as store: store.append('df', df) store.append('df', df)
self.assertRaises(ValueError, sql.to_sql, frame=df_if_exists_1, con=self.conn, name=table_name, flavor='sqlite', if_exists='notvalidvalue') clean_up(table_name)
n_samples_per_fold = np.zeros(self.n_folds)
if len(_response['rows']) < 1: continue
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
def __xor__(self, other): "Return the symmetric difference of this Geometry and the other." return self.sym_difference(other)
EmptyPromise(lambda: self.is_captions_visible() == captions_new_state, "Transcripts are {state}".format(state=state)).fulfill()
self.assertEqual(len(File.objects.all()), 0) self.assertEqual(len(Image.objects.all()), 0)
distance_to_candidates = euclidean_distances( X[candidate_ids], X, Y_norm_squared=x_squared_norms, squared=True)
assert V is orig_V assert drop_mask is orig_drop_mask
BROKER_HEARTBEAT = 10.0 BROKER_HEARTBEAT_CHECKRATE = 2
self.assertTrue(filecmp.cmp(path_test, path_out))
result = self.apply(f, reduce=False) if result.ndim == self.ndim: result = result.iloc[0] return result
if hasattr(filt, '__match__'): match = filt.__match__ else: match = item
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
self.assertNotEqual(response.content, b'request method: HEAD') self.assertEqual(response.content, b'')
elif any(requirement['status'] in non_eligible_statuses for requirement in requirement_statuses): eligibility_status = "not_eligible"
self.assertEqual( self.selenium.find_element_by_css_selector('.field-supporting_bands p.help').text, 'Supporting Bands.' )
'SHIB_DISABLE_TOS': False,
best_doublecolon_len = doublecolon_len best_doublecolon_start = doublecolon_start
WORKS_WITH_STORES = (ModuleStoreEnum.Type.split, )
from __future__ import unicode_literals
with tm.assertRaises(ValueError): weights_with_inf = [0.1] * 10 weights_with_inf[0] = np.inf o.sample(n=3, weights=weights_with_inf)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath
centers = _init_centroids(X, n_clusters, init, random_state=random_state, x_squared_norms=x_squared_norms) if verbose: print("Initialization complete")
_save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=task_definition.Principal.UserID, password=password, logon_type=task_definition.Principal.LogonType)
from salt.modules import postgres
indexer = memb.get_indexer(new_index, method=method, limit=limit) return self._wrap_result(_take_new_index( obj, indexer, new_index, axis=self.axis))
if grains['os_family'] == "RedHat": grains['osmajorrelease'] = grains['osrelease'].split('.', 1)[0]
if 'debconf.show' not in __salt__: return False
with self.assertRaises(ValueError): c(halflife=0)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
else: for prefix, state_pkg_name, version_spec in pkgs_details:
Membership.objects.create( membership_country_id=self.usa.id, person_id=self.bob.id, group_id=self.cia.id)
from salt.utils.odict import OrderedDict
user: MYLOGIN apikey: JVkbSJDGHSDKUKSDJfhsdklfjgsjdkflhjlsdfffhgdgjkenrtuinv driver: softlayer_hw
ext_auth_response = _external_auth_intercept(request, initial_mode) if ext_auth_response is not None: return ext_auth_response
grid_search = GridSearchCV(pipeline, parameters, n_jobs=1)
self.options, self.engine = self._clean_options(options, engine) if 'has_index_names' in kwds: self.options['has_index_names'] = kwds['has_index_names']
if settings.FEATURES["USE_CUSTOM_THEME"]: template = "theme-" + template
num_braces = 0
assert_equal( self.components_.shape, (self.n_components_, n_features), err_msg=('An error has occurred the self.components_ matrix has ' ' not the proper shape.'))
call_command('import', self.content_dir, self.course_dir) self.assertIsNotNone(store.get_course(self.truncated_key))
self.assertRaises(ValueError, s.drop, 'one', axis='columns')
expected = DataFrame( {0: Series(1, index=range(4))}, columns=['A', 'B', 0])
linkedin_config = LinkedInAddToProfileConfiguration.current()
sample_weight = compute_sample_weight(None, y) assert_array_almost_equal(sample_weight, [1., 1., 1., 1., 1., 1., 1.])
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
with self.assertRaises(ImproperlyConfigured): self.backend()
cache.clear()
pass
inline_xml = kwargs.pop('inline_xml')
with option_context('mode.chained_assignment', None): for key, group in grouped: res = f(group) assert_frame_equal(res, result.ix[key])
tagger.sample_rate = 1 return None
self.assertTrue(linode._validate_name('1foo')) self.assertTrue(linode._validate_name('foo0'))
text = f.widget.format_value(result) self.assertEqual(text, '01:30:05 PM')
old_definition = self.get_definition(course_key, definition_locator.definition_id) if old_definition is None: raise ItemNotFoundError(definition_locator)
self.assertContains(self.response, "%s\n - place of work" % company_markup)
DATE_INPUT_FORMATS = [
split_test = self._update_partition_id(0) self.assertEqual(2, len(split_test.children)) self.assertEqual(initial_group_id_to_child, split_test.group_id_to_child)
if not run_diff_quality( violations_type="pylint", prefix=pythonpath_prefix, reports=pylint_reports, percentage_string=percentage_string, branch_string=compare_branch_string, dquality_dir=dquality_dir ): diff_quality_percentage_pass = False
CourseMode( course_id=self.xss_course_key, mode_slug=CourseMode.HONOR, mode_display_name="honor cert", min_price=self.cost ).save()
nftables.__salt__ = {} nftables.__opts__ = {}
for module in module_store.modules[course_id].itervalues(): if module.location.category == parent_category: parents.append(module)
clf = self.factory(alpha=0.1, n_iter=1000, class_weight={0: 0.5}) clf.fit(X, Y)
def makeFloatSeries(name=None): index = makeStringIndex(N) return Series(randn(N), index=index, name=name)
self._submit_photos(expected_status_code=400) self._assert_confirmation_email(False)
times += times di = DatetimeIndex(times)
result = s.ix[[(2000, 3, 10), (2000, 3, 13)]] expected = s.reindex(s.index[49:51]) assert_series_equal(result, expected)
try: from log4mongo.handlers import MongoHandler, MongoFormatter HAS_MONGO = True except ImportError: HAS_MONGO = False
class User(models.Model): name = models.CharField(max_length=30) friends = models.ManyToManyField(auth.User)
self.install_results = None
import salt.utils from salt.exceptions import SaltInvocationError, CommandExecutionError
check_predictions(LogisticRegression(random_state=0), X, Y1) check_predictions(LogisticRegression(random_state=0), X_sp, Y1)
for attr in template_attrs: with self.assertRaises(AttributeError): getattr(unpickled_response, attr)
for i in range(0, lenbin - 1): r_bin = binner[i + 1]
sql.to_sql(self.test_frame1, 'test_frame', self.conn)
import salt.utils import salt.utils.jid import salt.returners
assert_array_almost_equal(comp_a[:9], comp_r[:9]) assert_array_almost_equal(comp_a[9:], comp_r[9:], decimal=2)
try:
self.assertNotIn('user', constructed)
dx = manhattan_distances(X, Y=self.X, sum_over_features=False) f = self.regr(X) r = self.corr(self.theta_, dx).reshape(n_eval, n_samples)
log = logging.getLogger(__name__)
unicode_text = "好 各位同学".decode('utf-8') self.assertIn(unicode_text, self.video.captions_text)
try:
self.assertNotIn(test_discussion.location, self.store.get_orphans(course.id))
from course_modes.models import CourseMode
'tools.salt_token.on': True, 'tools.salt_auth.on': True,
result = p1.join(p2) expected = p1.copy() expected['ItemC'] = p2['ItemC'] tm.assert_panel_equal(result, expected)
reinit_crypto() sys.exit(salt.defaults.exitcodes.EX_OK)
with self.assertRaises(auth_models.User.DoesNotExist): self.get_user_by_email(strategy, email)
win_ip.__salt__ = {}
import salt.utils
archive.__salt__ = {} archive.__opts__ = {"cachedir": "/tmp", "test": False} archive.__env__ = 'test'
if item['description'] is not None: handler.addQuickElement("summary", item['description'], {"type": "html"})
ring_tuples = tuple(r.tuple for r in poly) self.assertEqual(poly, Polygon(*ring_tuples))
elif ((compat.PY3 and dtype not in [_INT64_DTYPE, _TD_DTYPE]) or (not compat.PY3 and dtype != _TD_DTYPE)):
X, y = make_hastie_10_2(n_samples=20, random_state=1) X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=43)
self.n_classes = 1
return super(PythonSerializer, self).getvalue()
current = stack[-1]
response = self.client.get('/syndication/no_pubdate/') self.assertFalse(response.has_header('Last-Modified'))
e = rwindow.EWM(Series([2, 4, 6]), alpha=0.5)
total_student_count[curr_problem] = total_student_count.get(curr_problem, 0) + row['count_grade']
assert world.is_css_present(sel)
from salt.modules import modjk
self._assert_course_verification_status(VERIFY_STATUS_APPROVED)
data = 'a,b,c\n4,5,6\n\r' result = self.read_csv(StringIO(data)) tm.assert_frame_equal(result, expected)
kernel_id = 138
inference_fn(x)
import xml.etree.ElementTree as ElementTree
__context__['retcode'] = 0
if isinstance(stream, StringIO): self.assertEqual(string_data, stream.getvalue()) else: self.assertEqual(string_data, stream.content.decode('utf-8'))
iris = datasets.load_iris() y_true, y_pred, _ = make_prediction(dataset=iris, binary=False)
course_names = self.dashboard_page.wait_for_page().available_courses self.assertIn(self.course_info["display_name"], course_names)
goal_time = 0.2
index_a = self.create_index() if isinstance(index_a, PeriodIndex): return
f = lambda x: x.reset_index(inplace=True, drop=True) _check_f(data.set_index('a')['c'], f)
self._clone_test_db(number, verbosity, keepdb)
elif is_panel: single_aligner = (single_aligner and (aligners[1] or aligners[2]))
from __future__ import absolute_import import os import time import random import logging import itertools from collections import deque from _socket import gaierror
X_dense = check_array([[1, 2], [3, 4]]) assert_true(isinstance(X_dense, np.ndarray)) assert_raises(ValueError, check_array, X_ndim.tolist())
ii = iter_offset - 1
import sys
io_loop.run_sync(ipc_subscriber.connect)
f = lambda: s_or_idx.str.extract('(?:[AB]).*', expand=False) self.assertRaises(ValueError, f)
from __future__ import unicode_literals
from __future__ import unicode_literals
df = DataFrame(index=[0, 1], columns=[0]) df.ix[1, 0] = [1, 2, 3] df.ix[1, 0] = [1, 2]
self.course_info['number'] = self.unique_id[0:6]
structure_json = models.TextField(verbose_name='Structure JSON', blank=True, null=True)
self.courseware_page.start_proctored_exam()
if not os.path.isfile(full): return 'Authorized keys file {0} not present'.format(full)
sys.stdout.write("{0}\ndeploy\n".format(OPTIONS.delimiter)) sys.exit(EX_THIN_DEPLOY)
global _local_random
channels[prefix + name] = (raw_channels[name], cost_ipt, (spaces[i], sources[i]))
class LegacySupport(object):
self.assertFalse(hasattr(course_overview, 'image_set'))
estimator = MockImprovingEstimator(1) assert_raises(ValueError, learning_curve, estimator, X, y, exploit_incremental_learning=True)
if kl > tol or not (kl <= tol): raise AssertionError("KL divergence between two " "equivalent models should be 0 but is "+ str(kl))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
return date.today()
from __future__ import absolute_import import logging import time
completed_funcs = []
movie_id = models.AutoField(primary_key=True) name = models.CharField(max_length=60)
forward_fields_map = { field.name: field for field in cls._meta._get_fields(reverse=False) }
try: length = len(line.decode('utf-8')) except UnicodeError: pass
from __future__ import unicode_literals
supports_microsecond_precision = True
REPORT_REQUESTED_EVENT_NAME = u'edx.instructor.report.requested'
if style is not None: args = (x, y, style) else: args = (x, y) return ax.plot(*args, **kwds)
import salt.utils from salt.modules import state
self.assertIsNotNone(user) self.assertTrue(user.is_anonymous)
import salt.utils import salt.ext.six as six from salt.exceptions import CommandExecutionError
page.wait_for_component_menu() click_css(page, 'button>span.large-html-icon', menu_index, require_notification=False)
return K, np.empty((X.shape[0], X.shape[0], 0))
assert_almost_equal(s2, s3)
MINION_CONNECT_TIMEOUT = 5
result = df.to_csv(path, index=index, sep=sep, na_rep=na_rep, float_format=float_format, header=header, index_label=index_label, mode=mode, nanRep=nanRep, encoding=encoding, date_format=date_format, decimal=decimal) if path is None: return result
val = rng[0] exp = Timestamp('3/11/2012 03:00', tz='US/Eastern')
self.course_outline.visit()
return -np.sum((pi / pi_sum) * (np.log(pi) - log(pi_sum)))
class Person(Form): first_name = CharField() last_name = CharField() birthday = DateField()
self.models = all_models
check_password('wrong_password', encoded) self.assertEqual(hasher.harden_runtime.call_count, 1)
self.sock = None self.io_loop = io_loop or IOLoop.current() self._closing = False
_options['checktype'] = '1'
with mock.patch( 'openedx.core.djangoapps.content.course_overviews.models.CourseOverview.objects.get' ) as mock_getter:
patcher = patch('shoppingcart.models.analytics') self.mock_tracker = patcher.start() self.addCleanup(patcher.stop)
import logging import os
try: res[field.attname] = field except AttributeError: pass
ridge = Ridge(alpha=penalties[:-1]) assert_raises(ValueError, ridge.fit, X, y)
verified, _ = self.create_mode('verified', 'Verified', min_price=5) self.assertTrue(CourseMode.has_payment_options(self.course_key))
management.call_command('loaddata', 'fixture4.json', verbosity=0) self.assertQuerysetEqual(Article.objects.all(), [ '<Article: Django pets kitten>', ])
course.cohort_config = {'cohorted': False} self.assertFalse(course.is_cohorted)
n_classes = 3 n_estimators = 30 plot_colors = "ryb" cmap = plt.cm.RdYlBu
alpha = float(alpha) random_state = check_random_state(random_state)
example_messages = ['test', 'me'] set_cookie_data(storage, example_messages, invalid=True) self.assertEqual(list(storage), [])
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
from __future__ import absolute_import
self._test_email_address_failures(SMTPDataError(554, "Email address is blacklisted"))
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0, noise=10)
self.assertTrue(self.video.is_video_rendered('youtube'))
remove_all_instructors(action_state.course_key)
from __future__ import absolute_import import logging import os import datetime
__virtualname__ = 'pecl'
wtf_numpy = np.zeros((pool_size_1,)) for i in xrange(pool_size_1): wtf_numpy[i] = on_probs[i] on_probs = wtf_numpy
expiration_datetime_is_explicit = models.BooleanField(default=False)
take_2d_axis0_%(name)s_%(dest)s_memview(values, indexer, out, fill_value=fill_value) return
if not salt.utils.cloud.wait_for_port(ip_address, port=winrm_port, timeout=ssh_connect_timeout): raise SaltCloudSystemExit( 'Failed to connect to remote windows host (winrm)' )
assert_equal(train.union(test), set(range(n_samples)))
created_time = models.DateTimeField(auto_now_add=True)
if file_access_rights(local_dst,os.W_OK,check_above=True):
if curr_problem in prob_grade_distrib: prob_grade_distrib[curr_problem]['grade_distrib'].append((row['grade'], row['count_grade']))
try: os.unlink(cache_path) except OSError: pass return file_hash(load, fnd)
pred = sum(_samme_proba(estimator, n_classes, X) for estimator in self.estimators_)
self.service.set_credit_requirement_status( self.user.id, self.course.id, 'grade', 'grade' )
from django.conf import urls callback = getattr(urls, 'handler%s' % view_type)
return
self.client.get( pipeline.get_login_url(self.provider.provider_id, pipeline.AUTH_ENTRY_LOGIN))
pattern=r'^((\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})|([A-Za-z0-9][A-Za-z0-9\.\-]{1,255}))$', min_length=1, required=True)
self.assertIs(e1.topics.__class__, e2.topics.__class__) self.assertIs(t1.entry_set.__class__, t2.entry_set.__class__)
import salt.utils
import logging
hash_val = ",".join([ "{0}={1}".format(key, post_params[key]) for key in signed_fields ]) public_sig = processor_hash(hash_val)
test_score = heldout_score(clf, X_test, y_test)
from __future__ import absolute_import
self.parse_xml()
io_loop.start()
self.field_handlers = {} for field_name in self.DEFAULT_FIELDS + self.EXTRA_FIELDS: handler = getattr(self, "_add_{field_name}_field".format(field_name=field_name)) self.field_handlers[field_name] = handler
sup_cls = super(cls, self) try: base = sup_cls.media except AttributeError: base = Media()
def _get_coef(self): return (self.feature_log_prob_[1:] if len(self.classes_) == 2 else self.feature_log_prob_)
if hasattr(response, 'render') and callable(response.render) and not response.is_rendered: response.render()
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
text = f.widget.format_value(result) self.assertEqual(text, "01:30:05 PM")
ret = {'result': False, 'comment': None}
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
'profiles_config', os.path.join(salt.syspaths.CONFIG_DIR, 'cloud.profiles')
LOGGING_STORE_HANDLER = TemporaryLoggingHandler()
rendered_html = etree.XML(problem.get_html())
if not config.is_certification_enabled: LOGGER.warning( 'Task award_program_certificates cannot be executed when program certification is disabled in API config', ) raise self.retry(countdown=countdown, max_retries=config.max_retries)
return 'telemetry_alert' if 'telemetry.get_alert_config' in __salt__ else False
release = version
offset = CDay() offset2 = CDay() offset2.normalize = True self.assertEqual(offset, offset2)
from __future__ import absolute_import import re
n_clusters_1 = len(set(labels)) - int(-1 in labels) assert_equal(n_clusters_1, n_clusters)
TableInfo = namedtuple('TableInfo', ['name', 'type'])
self.payment_and_verification_flow.proceed_to_payment()
if settings.USE_TZ: tz = timezone.get_default_timezone() return timezone.make_aware(dt, tz).astimezone(timezone.utc) else: return dt
self.assertTrue(are_permissions_roles_seeded(second_course_id))
courses_list = list(get_course_enrollments(self.student, None, [])) self.assertEqual(len(courses_list), 0)
self.assertEqual(len(second_chunk.strip()), 1449)
self.assertInCourseListing(existent_course_key)
digits = load_digits() X, y = digits.data, digits.target
X_trans = minmax_scale(X) assert_array_almost_equal(X_trans, X_expected_0_1) X_trans = minmax_scale(X, feature_range=(1, 2)) assert_array_almost_equal(X_trans, X_expected_1_2)
i = RangeIndex(0, 1000) self.assertTrue(i.nbytes < i.astype(int).nbytes / 10)
enetcv_unconstrained = ElasticNetCV(n_alphas=3, eps=1e-1, max_iter=max_iter, cv=2, n_jobs=1) enetcv_unconstrained.fit(X, y) assert_true(min(enetcv_unconstrained.coef_) < 0)
self.assertEqual(microsite.get_backend(None, BaseMicrositeBackend), None)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
salt.utils.atomicfile.atomic_open( os.path.join(hn_dir, RETURN_P), 'w+b' )
data_csv = pd.read_csv(self.file03.replace(".xpt", ".csv"))
result = df[['B', 'D']].interpolate(downcast=None) assert_frame_equal(result, df[['B', 'D']])
return _map(f, arr, na_mask=True, na_value=na_result, dtype=dtype)
testing_mode = os.environ.get('PANDAS_TESTING_MODE', 'None') if 'deprecate' in testing_mode:
key = world.css_value(KEY_CSS, index=i) if key == expected_key: return i
LOGGER.info( u"Retrieving data for courses: {courses}".format( courses=", ".join([unicode(course) for course in courses]) ) )
from salttesting import skipIf, TestCase from salttesting.mock import ( MagicMock, NO_MOCK, NO_MOCK_REASON, patch)
trainer = yaml_parse.load(test_yaml_layer3 % {'layer0_filename': layer0_filename, 'layer1_filename': layer1_filename, 'layer2_filename': layer2_filename}) trainer.main_loop()
lines = text[:10000].split('\n')[:-1][:10]
if LANGUAGE_SESSION_KEY in request.session: del request.session[LANGUAGE_SESSION_KEY]
distribution['no_data'] = profiles.filter( **{feature: None} ).count()
key = pd.Timestamp('2012-01-01') series = pd.Series() series[key] = 47 expected = pd.Series(47, [key]) assert_series_equal(series, expected)
existing_config = None if __salt__['marathon.has_app'](name): existing_config = __salt__['marathon.app'](name)['app']
safe_cookie_data_1 = SafeCookieData.create(session_id, user_id) self.assertTrue(safe_cookie_data_1.verify(user_id))
expected = self.ne.evaluate('nlhs {0} ghs'.format(op)) tm.assert_numpy_array_equal(result.values, expected)
if serialized.startswith("="): serialized = serialized[1:].strip()
if '..' in template: log.warning( 'Discarded template path \'{0}\', relative paths are ' 'prohibited'.format(template) ) raise TemplateNotFound(template)
Book.objects.get(title='Pro Django')
def get_fill_value(obj): if isinstance(obj, pd.tseries.base.DatetimeIndexOpsMixin): return obj.asobject.values[0] else: return obj.values[0]
values = self.block.astype(np.object_).values
from pandas.compat import range import pandas.util.testing as tm from pandas import read_csv import os
from __future__ import unicode_literals
return registration.activation_key
node.attrib.pop('xblock-family', None)
ret['result'] = random.choice([True, False])
from salt.modules import dig
FEATURES['ENABLE_CSMH_EXTENDED'] = True INSTALLED_APPS += ('coursewarehistoryextended',)
self.assertEqual(len(response.redirect_chain), 1) self.assertIn(302, response.redirect_chain[0]) self.assertEqual(len(outbox), outbox_count) if send_email:
responseparam_element = etree.SubElement(response_element, 'responseparam') responseparam_element.set('partial_answers', partial_answers)
self._run_command()
POSTGIS_TO_GDAL = [1, 1, 1, 3, 1, 3, 2, 5, 4, None, 6, 7, None, None]
self.video.show_captions()
return self._get_fields_cache[cache_key]
try: import netaddr HAS_NETADDR = True except ImportError as e: HAS_NETADDR = False
result = sql.read_sql_table('test_nan', self.conn) tm.assert_frame_equal(result, df)
if getattr(other, 'tz', None) is not None: other = other.tz_localize(None).asi8 else: other = other.asi8
from salt.modules import saltcloudmod
problem = new_loncapa_problem(xml_str) rendered_html = etree.XML(problem.get_html())
assets_deleted = content_store.remove_redundant_content_for_courses() success = True
order_item_dict = dict((feature, getattr(purchased_course, feature, None)) for feature in order_item_features)
filesystem = OSFS(root_dir / 'test_export/static') exported_static_files = filesystem.listdir() self.assertTrue(filesystem.exists(asset_displayname)) self.assertEqual(len(exported_static_files), 1)
key = labels._maybe_cast_indexer(key)
df = DataFrame({'a': [1, 2]}, dtype='int64') df.to_sql('test_bigintwarning', self.conn, index=False)
from salt.modules import launchctl
if not children_only: ret, perms = __salt__['file.check_perms'](name, ret, user, group, dir_mode, follow_symlinks)
response = self.send_get(client, query_parameters='view=shared') verify_fields_visible_to_all_users(response)
if _int64_overflow_possible(shape): raise ValueError('cannot deconstruct factorized group indices!')
if len(self.estimators_) > 1: self.estimators_.pop(-1) return None, None, None
if value is not None and not self.field.remote_field.multiple: setattr(value, self.field.remote_field.get_cache_name(), instance)
continue
f = np.asarray(f).ravel() prob = special.fdtrc(dfbn, dfwn, f) return f, prob
self.assertEqual(self._mock_paver_sh.call_count, 1)
ADVANCED_SECURITY_CONFIG = {}
result = ts2.asfreq('4H', method='ffill') expected = ts[5:].asfreq('4H', method='ffill') assert_series_equal(result, expected)
if isinstance(reference, basestring): reference = BlockUsageLocator.from_string(reference) elif isinstance(reference, BlockKey): return reference return BlockKey.from_usage_key(reference)
self.assertNotEqual(v['Name'], name)
verification_good_until = self._verification_valid_until(request.user)
return 24, 80
visible_fields = _visible_fields
self.skipUI = skipUI self.skipDownloaded = skipDownloaded self.skipInstalled = skipInstalled self.skipReboot = skipReboot self.skipPresent = skipPresent self.skipHidden = skipHidden
os.remove(self.conf)
def __getslice__(self, i, j): return self.__class__(super(FrozenList, self).__getslice__(i, j))
config_course_cohorts( course, is_cohorted=True, auto_cohorts=[] )
result = df1.loc[(slice('A1')), :] expected = df1.iloc[0:10] assert_frame_equal(result, expected)
try: import M2Crypto HAS_M2 = True except ImportError: HAS_M2 = False
self.assertEqual(list(Parcel.objects.transform(srid, field_name='city__location__point')), [])
super(TestCourseVerificationStatus, self).setUp()
knn_graph = kneighbors_graph(X, 30, include_self=False)
with override_settings(REGISTRATION_EXTRA_FIELDS=extra_fields_setting): response = self.client.get(self.url) self.assertHttpOK(response)
_city_file = '' _country_file = ''
data, vm_ = request_instance(vm_)
def f(): df = orig.copy() df.ix["j", 0] = "c"
if isinstance(block_locator.block_id, LocalId): self.local_modules[block_locator] = module
new_name = '{0}.sls.orig'.format(package) out_file = os.path.join(conn['pillar_path'], new_name)
'exclude_paths': get_config_value('exclude_paths', ()),
attributes['source'] = attributes.pop(type_)
X_train, X_test, y_train, y_test = train_test_split(cal_housing.data, cal_housing.target, test_size=0.2, random_state=1) names = cal_housing.feature_names
from __future__ import absolute_import
self.assertEqual(len(self.video.q(css='video')), 1)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
import os
get_version = { 'Linux': linux_netdev, 'FreeBSD': freebsd_netdev, }
if 'parent_url' in value: del value['parent_url'] if 'parent_sequential_url' in value: del value['parent_sequential_url']
if ret in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
if re.search('^{0}$'.format(re.escape(content)), r_data, flags=flags_num): found = True
icrv_status_emails = IcrvStatusEmailsConfiguration.current() if icrv_status_emails.enabled and checkpoints: user_id = attempt.user.id course_key = checkpoints[0].course_id related_assessment_location = checkpoints[0].checkpoint_location
ret[minion] = data['full_ret']
primary_key = models.AutoField(primary_key=True) parent = models.OneToOneField(Place, models.CASCADE, parent_link=True)
import yaml
query_time = query.get('duration', 0) / 1000
ALTER_OPTION_KEYS = [ "get_latest_by", "managed", "ordering", "permissions", "default_permissions", "select_on_save", "verbose_name", "verbose_name_plural", ]
_win(kernel32.SetHandleInformation, wintypes.BOOL,
import salt.config import salt.loader from salt.modules import boto_elb
import salt.config import salt.loader
config = _load_config()
updated_deadline = VerificationDeadline.deadline_for_course(self.course.id) self.assertEqual(updated_deadline, new_deadline)
try: perms = self.application.opts['external_auth'][token['eauth']][token['name']]
self.assertEqual(len(httpretty.httpretty.latest_requests), 1)
field_data_cache = FieldDataCache([], course.id, user)
n_samples, n_features = X.shape n_targets = y.shape[1]
show_openedx_logo = bool(request.GET.get('show-openedx-logo', False))
from __future__ import absolute_import
r = repr(df) for ix, l in enumerate(r.splitlines()): if not r.split()[cand_col] == '...': return False return True
del self.pub_channel
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
COMPONENT_TYPES = ['discussion', 'html', 'problem', 'video']
context = { 'reorderable_items': set(), 'read_only': True } html = get_preview_fragment(request, html, context).content
if delta < 0: return self._cache.incr(key, -delta) try: val = self._cache.decr(key, delta)
certificate_count = 3 for __ in xrange(certificate_count): self.generate_certificate(course_id=self.course.id, mode='honor', status=CertificateStatuses.downloadable)
delete = self.run_cloud('-d {0} --assume-yes'.format(self.INSTANCE_NAME)) delete_str = ''.join(delete)
indices = np.arange(10, 13)
self.assert_numpy_array_equal( tslib.array_to_datetime(arr, errors='ignore'), arr)
self.assertTrue('Coupon Code List' in response.content)
mappings = inspect_container(name).get('NetworkSettings', {}).get( 'Ports', {}) if not mappings: return {}
print("Computing t-SNE embedding") tsne = manifold.TSNE(n_components=2, init='pca', random_state=0) t0 = time() X_tsne = tsne.fit_transform(X)
response = self._get_page(payment_flow, course.id) self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS, PayAndVerifyView.MAKE_PAYMENT_STEP ) self._assert_requirements_displayed(response, [])
import salt.exceptions import salt.utils
for attr in unique: if attr not in self.mapping: raise ValueError
split_test = self._add_split_test_to_vertical(number=0, group_configuration_metadata={'user_partition_id': 0})
y += 0.01 * np.random.normal((n_samples,))
with self.assertNumQueries(3): self._assert_group_assignment(user, VerificationPartitionScheme.DENY)
ir = IsotonicRegression() assert_array_equal(ir.fit_transform(np.ones(len(x)), y), np.mean(y))
response = self.fetch('/', headers={'Accept': self.content_type_map['xml']}) self.assertEqual(response.code, 406)
df = self.read_csv(StringIO(data.replace(',', ' ')), comment='#', delim_whitespace=True) tm.assert_almost_equal(df.values, expected)
left = self.rng[:5] right = self.rng[10:]
extend(state('.goal').stateconf.require_in(stateconf='yyy::start'))
instance.image.delete(save=False) instance.delete()
rval = shared(obj.get_value()) obj.__getstate__ = None
return RequestFactory( SERVER_NAME=parsed_url.hostname, SERVER_PORT=parsed_url.port or 80, ).get("/")
if len(sl) == 1:
queried_children = to_process_dict.values()
core_samples, labels = dbscan(X, algorithm=algorithm, eps=1, min_samples=3) assert_array_equal(core_samples, [2]) assert_array_equal(labels, [-1, 0, 0, 0, -1, -1, -1])
assert expected_mutual_information(np.array([[70000]]), 70000) <= 1
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
digits = datasets.load_digits() perm = rng.permutation(digits.target.size) digits.data = digits.data[perm] digits.target = digits.target[perm]
os.path.join(os.path.dirname(__file__), '..', '../..', 'sphinxext')
self.setup_user() self.assertFalse(access.has_ccx_coach_role(self.user, ccx_locator))
if self.whiten: W = W / tensor.sqrt(self.v[:self.component_cutoff])
with self.assertRaises(ValueError): c(com=-0.5)
self.process = MultiprocessingProcess(target=raet_minion_run, kwargs={'cleanup_protecteds': [self.stack.ha], }) self.process.start() self._wait_caller(opts)
self.assertQuerysetEqual( self.d.friends.all(), [ "Chuck", ], attrgetter("name") )
self.assertEqual(pro.pages, 200)
rgr_ridge = Ridge(alpha=0.2) rgr_ridge.fit(proj_operator, proj.ravel()) rec_l2 = rgr_ridge.coef_.reshape(l, l)
from __future__ import absolute_import, with_statement import logging
return self.make_block(np.empty(values.shape, dtype=dtype), placement, fastpath=True)
self.course_nav.q(css='select option[value="{}"]'.format('blue')).first.click()
>> a=makeCustomDataframe(5,3,r_idx_nlevels=2,r_ndupe_l=[2])
self.insert(len(self.items), item, value) return
result = f.clean('1:30:05 PM 21/12/2010') self.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))
y_true, pred, probas_pred = make_prediction(binary=True)
self.assertTrue(transaction.get_rollback()) transaction.set_rollback(False) self.assertEqual(Reporter.objects.count(), 3) transaction.set_rollback(True)
self.assertTrue(np.allclose(result.value / 1000, expected.value / 1000))
IntegerUnique.objects.create(i=1, j=1) with self.assertRaises(IntegrityError): IntegerUnique.objects.create(i=1, j=2)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
self.seed = randomization_bin(self.runtime.seed, unicode(self.location).encode('utf-8'))
i = labels.searchsorted(start, side='left') j = labels.searchsorted(stop, side='right') return slice(i, j, step)
self.estimators_ = []
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
with transaction.atomic(): return wrapped_func(*args, **kwargs)
test_command = 'sysbench --test=cpu --cpu-max-prime={0} run' result = None ret_val = {}
req_kwargs = {}
objs = tuple(objs)
group_id, user_partition_id = get_masquerading_group_info(self.test_user, self.course.id) self.assertIsNone(group_id) self.assertIsNone(user_partition_id)
from __future__ import absolute_import import logging
from __future__ import absolute_import import hashlib import logging import sys
for index, band in enumerate(self.bands): target.bands[index].nodata_value = band.nodata_value
af = AffinityPropagation(affinity="euclidean") labels = af.fit_predict(X) labels2 = af.predict(X) assert_array_equal(labels, labels2)
os.path.join(os.path.dirname(__file__), '..', '../..', 'sphinxext')
user_not_added = User.objects.create_user('testuser2', 'test+courses2@edx.org', 'foo2') self.assertFalse(user_has_role(user_not_added, CourseCreatorRole()))
estimators = [c for c in estimators if not is_abstract(c[1])]
with self.assertRaises(TypeError): City.objects.geojson(precision='foo')
self.current_view = self.MAPPING["search"](self.browser) if text.strip(): self.current_view.wait_for_page()
self.assertEqual(upper('\xeb'), '\xcb')
return ret
user=user, course_id=course.location.course_key, status=CertificateStatuses.downloadable
out_file = os.path.join(conn['reactor_path'], member.name)
monit.__salt__ = {}
sys.path.insert(0, '.')
class CustomErrorList(ErrorList): pass
if isinstance(ff.widget, widgets.RelatedFieldWidgetWrapper): widget = ff.widget.widget else: widget = ff.widget
_urlconfs = local()
TEST_RUNNER = 'django.test.runner.DiscoverRunner'
for result in resultset: location = as_published(Location._from_deprecated_son(result['_id'], course_id.run))
if values_passed and not values_multi and not table.empty: table = table[values[0]]
raise GitLockError( exc.errno, 'Checkout lock exists for {0} remote \'{1}\'' .format(self.role, self.id) )
if 'admin_source' not in kwargs: os.unlink(adminfile)
CREDIT_PROVIDER_TIMESTAMP_EXPIRATION = 15 * 60
win32api.SetFileAttributes(path, file_attributes)
xblock, fields = (None, block.__dict__)
self.cluster_centers_ = _init_centroids( X, self.n_clusters, self.init, random_state=self.random_state_, x_squared_norms=x_squared_norms, init_size=self.init_size)
from sqlalchemy.schema import MetaData meta = MetaData(self.pd_sql, schema=schema)
from __future__ import unicode_literals
y = np.mod(np.arange(len(y)), 3)
obj = DatetimeIndex([]) self.assertTrue(pd.isnull(getattr(obj, op)()))
lr = LogisticRegression() gnb = GaussianNB() svc = LinearSVC(C=1.0) rfc = RandomForestClassifier(n_estimators=100)
if not self.infer_axes(): return None
self.load_extra_content( system, course_descriptor, 'course_info', self.data_dir / course_dir / 'info', course_dir, url_name )
self.assertIsInstance( microsite.get_backend( 'microsite_configuration.backends.database.DatabaseMicrositeBackend', BaseMicrositeBackend ), DatabaseMicrositeBackend )
assert world.is_css_present('.error_message', wait_time=0)
closest_dist_sq = euclidean_distances( centers[0, np.newaxis], X, Y_norm_squared=x_squared_norms, squared=True) current_pot = closest_dist_sq.sum()
state = self.sample_fn(bp1, state)
view_converter = dense_design_matrix.DefaultViewConverter((image_size, image_size, 1), axes)
if take_fast_path: if _possibly_castable(arr) and not copy and dtype is None: return arr
shifter = 10 ** max(xbins, ybins) _xpiece = xlabels * shifter _ypiece = ylabels
from __future__ import unicode_literals
key_path = None
log.info('Starting the Salt Publisher on {0}'.format(pub_uri)) pub_sock.bind(pub_uri)
__virtualname__ = 'lowpkg'
NOT_CONFIGURED = "not-configured"
try: shutil.rmtree(repo['lockfile']) except OSError as exc: _add_error(failed, repo, exc)
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
StudentModuleHistory( id=initial_id, course_key=None, usage_key=None, username="", version="", created=datetime.datetime.now(), ).save()
n_queries = 5 queries = X[rng.randint(0, n_samples, n_queries)] distances, neighbors = lshf.radius_neighbors(queries, return_distance=True)
for dtype in ['f8', 'f4']: A = A.astype(dtype) B = B.astype(dtype)
#epub_cover = ()
columns_to_test = [columns.index('C'), columns.index('E1')]
self.case_sensitive = False
postgis_types_reverse = {}
graders = { 'points': self.grade_via_points, 'false': self.grade_without_partial_credit }
assert_index_equal(left.columns, right.columns, exact=check_column_type, check_names=check_names, check_less_precise=check_less_precise, check_exact=check_exact, check_categorical=check_categorical, obj='{0}.columns'.format(obj))
self.cohort_b_student_username = "cohort_b_student" self.cohort_b_student_email = "cohort_b_student@example.com" StudioAutoAuthPage( self.browser, username=self.cohort_b_student_username, email=self.cohort_b_student_email, no_login=True ).visit()
relative_path = parts.repo or "gentoo"
ret = {'name': name, 'result': None, 'comment': '', 'changes': {},
ll = self.pixel_to_lonlat((px[0] - delta, px[1] - delta), zoom) ur = self.pixel_to_lonlat((px[0] + delta, px[1] + delta), zoom)
extract_dir_relative = path.relpath(extract_dir, settings.DATA_DIR)
__virtualname__ = 'saltcloud'
file_handle.seek(0) return magic
non_int_round_Series = Series(non_int_round_dict) with self.assertRaises(TypeError): df.round(non_int_round_Series)
if not has_rejectfile_option: cmd.append('--reject-file=-')
if salt.utils.is_windows(): return (False, 'The file execution module cannot be loaded: only available on non-Windows systems - use win_file instead.') return True
self.mixed_frame.std(1) self.mixed_frame.var(1) self.mixed_frame.mean(1) self.mixed_frame.skew(1)
pass
indexer = _update_indexer(_convert_to_indexer( self._get_level_indexer(k, level=i, indexer=indexer)), indexer=indexer)
_fulfill_content_milestones( user, course_id, descriptor.location, )
with tm.assert_produces_warning(RuntimeWarning): expected = right_idx.astype(object).union(left_idx.astype(object)) tm.assert_index_equal(joined, expected)
break
return False
self.course = CourseFactory.create( org=org, number=course_number, run=course_run )
tsne = TSNE(early_exaggeration=0.99) assert_raises_regexp(ValueError, "early_exaggeration .*", tsne.fit_transform, np.array([[0.0]]))
return chapter_titles.index(title.lower()) + 1
return prlctl('snapshot-delete', args, runas=runas)
log.debug('Pinging all connected minions ' 'due to key rotation') salt.utils.master.ping_all_connected_minions(self.opts)
return self._get_object_array()
if settings != DEFAULT_SETTINGS: collect_assets(['lms'], asset_settings_lms) collect_assets(['studio'], asset_settings_cms)
rs = mi_int.iloc[2, 2] xp = mi_int.ix[:, 2].ix[2] self.assertEqual(rs, xp)
response_properties = ["codeparam", "responseparam", "answer", "openendedparam"]
new_group_2 = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, user_partition) self.assertEqual(new_group, new_group_2)
__, __ = self.log_in_as_instructor()
self._count(X, Y)
eval_frame_chained_cmp_all_threads = \ Benchmark("pd.eval('df < df2 < df3 < df4')", common_setup, name='eval_frame_chained_cmp_all_threads', start_date=datetime(2013, 7, 21))
expected = df[df.A >= df.A[3]] result = store.select('df_tz', where=Term('A>=df.A[3]')) self._compare_with_tz(result, expected)
rng = date_range('1/1/2000', '1/31/2000') ts = DataFrame(np.random.randn(len(rng), 3), index=rng)
xgrid = np.arange(xmin, xmax, batch.grid_size) ygrid = np.arange(ymin, ymax, batch.grid_size)
b = b.reindex(columns=b.columns[::-1], index=b.index[::-1][10:]) del b['B']
'ext_job_cache': str,
source_suffix = '.rst'
content = None try: content = self.load_asset_from_location(loc) except (ItemNotFoundError, NotFoundError): return HttpResponseNotFound()
evt = salt.utils.event.get_event('minion', opts=self.opts, listen=False) evt.fire_event({'complete': True}, tag='/salt/minion/minion_schedule_saved')
deletable_objects, model_count, perms_needed, protected = get_deleted_objects( queryset, opts, request.user, modeladmin.admin_site, using)
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
images = []
'state_verbose': bool,
self.t_ = None
assert_array_almost_equal(coef_dense, coef_sorted.toarray())
if 'public_key' not in kwargs and 'csr' not in kwargs: kwargs['public_key'] = kwargs['signing_private_key']
continue
atomic_replace(os.path.join(dataset_conf_path,"installed.lst.2"), os.path.join(dataset_conf_path,"installed.lst"))
return tz1.zone == tz2.zone
for l in [slice(0.0, 1), slice(0, 1.0), slice(0.0, 1.0)]:
self.input_space = VectorSpace(dim=self.nvis) self.input_source = 'features' self.latent_space = VectorSpace(dim=self.nhid)
self.course.advanced_modules = ["notes"] self.assertFalse(self.has_notes_tab(self.course, self.user))
for op_str in ops: op = getattr(get_ser, op_str, None) with tm.assertRaisesRegexp(TypeError, 'operate'): op(test_ser)
self.enrollment = CourseEnrollment.enroll(self.user, self.course_id, mode=CourseMode.VERIFIED)
mgr = create_mgr('f: i8; g: f8') new_mgr = mgr.convert() _compare(mgr, new_mgr)
if row_max[-1] == 0: y_i_all_argmax = np.append(y_i_all_argmax, [len(y.data)])
if '.' in state[name]: comps = state[name].split('.') state[name] = {'__sls__': sls, '__env__': saltenv, comps[0]: [comps[1]]} continue
if published.visible_to_staff_only: return False
self.fixture_count = 0 self.loaded_object_count = 0 self.fixture_object_count = 0 self.models = set()
self.assertEqual(correct_map.get_correctness('1_2_1'), 'correct')
self.a.idols.add(self.d)
url(r'^gradebook$', 'instructor.views.gradebook_api.spoc_gradebook', name='spoc_gradebook'),
class CachedDnsName(object): def __str__(self): return self.get_fqdn()
assert_raises(ValueError, lshf.partial_fit, np.random.randn(n_samples_partial_fit, n_features - 1))
freqstr = 'Q-%s' % (_int_to_month[freq_month],) return self._beg_apply_index(i, freqstr)
H_hat[-1] = Y
U *= S[:self.n_components_]
retc = ret.copy()
mn.join(cn, rsuffix='_right')
result = idxr(s)[indexer] self.check(result, s, 3, getitem)
random_state = check_random_state(0) tsne = TSNE(verbose=2) X = random_state.randn(5, 2)
if not self.blank and value is self.Empty: raise ValidationError(self.error_messages['blank']) else: return super(OpaqueKeyField, self).validate(value, model_instance)
mean_square_grad = sharedX(param.get_value() * 0.) mean_square_dx = sharedX(param.get_value() * 0.)
country_label = _(u"Country") error_msg = _(u"Please select your Country.")
import salt.utils
with tm.assertRaises(gbq.TableCreationError): gbq.to_gbq(df, destination_table, PROJECT_ID, if_exists='fail')
text = f.widget.format_value(result) self.assertEqual(text, '01:30:05 PM')
from __future__ import unicode_literals
actual = grouped_ser.filter(lambda x: len(x) > 1) expected = ser.take(expected_indexes) assert_series_equal(actual, expected)
import yaml import salt.ext.six as six
else: course_path = "/".join((static_asset_path or data_directory, rest))
contentstore('trashcan').save(content)
iris = datasets.load_iris() X = iris.data y = iris.target X, y = X[y != 2], y[y != 2] n_samples, n_features = X.shape
'provider', 'provider.oauth2', 'edx_oauth2_provider',
from salttesting import TestCase from salttesting.mock import patch, MagicMock from salttesting.helpers import ensure_in_syspath
if getattr(sys, 'frozen', False): application_path = os.path.dirname(sys.executable) elif __file__: application_path = os.path.dirname(__file__)
for i in range(current_page, total_pages): _check_page() if current_page < total_pages: page.click_on_page(current_page + 1) current_page += 1
self.assertContains(response, "Explore courses")
if num_threads is None: num_threads = multiprocessing.cpu_count() self.num_threads = num_threads
warnings.warn("irow(i) is deprecated. Please use .nth(i)", FutureWarning, stacklevel=2) return self.nth(i)
self.assertRaises(TypeError, RangeIndex, 'foo', 'bar', 'baz')
decorators = (add_exclamation_mark, add_question_mark)
LogoutPage(self.browser).visit() StudioAutoAuthPage( self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=True ).visit()
self.assertContains(resp, 'Robot_Course_Outside_Microsite')
return self._possibly_eval(res, eval_in_python)
for line in output.splitlines(): if not line: continue fact, value = _format_fact(line) if not fact: continue ret[fact] = value return ret
student_module.save(force_update=True)
with self.assertNumQueries(len(kv_dict)): self.kvs.set_many(kv_dict) for key in kv_dict: self.assertEquals(self.kvs.get(key), kv_dict[key])
store = modulestore() with store.default_store('split'): store.clone_course(source_course_key, destination_course_key, user_id, fields=fields)
field_data_cache = FieldDataCache([], course.id, request.user) about_module = get_module( request.user, request, loc, field_data_cache, log_if_not_found=False, wrap_xmodule_display=False, static_asset_path=course.static_asset_path, course=course )
if mswindows: def _execute(self): raise NotImplementedError
NOTIFICATION_EMAIL_CSS = ENV_TOKENS.get('NOTIFICATION_EMAIL_CSS', NOTIFICATION_EMAIL_CSS) NOTIFICATION_EMAIL_EDX_LOGO = ENV_TOKENS.get('NOTIFICATION_EMAIL_EDX_LOGO', NOTIFICATION_EMAIL_EDX_LOGO)
self.errored_courses[course_dir] = errorlog
source_course_key = CourseKeyField(max_length=255, db_index=True)
avg_weights = None
return self
try: os.remove(name) except OSError as e: if e.errno != errno.ENOENT: raise
self.create()
geom_type = None
offset1 = BMonthBegin() offset2 = BMonthBegin() self.assertFalse(offset1 != offset2)
with Timer() as iteration_over_groups_time_2: courses_list, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(len(courses_list), USER_COURSES_COUNT)
exc_info_on_loglevel=logging.DEBUG
import calendar self.assertEqual(calendar.timegm(base_dt.timetuple()) * 1000000000, base_expected)
self.assertEqual(cl.result_count, 1)
show_min_grade_warning = False if course_module.minimum_grade_credit > 0 else True settings_context.update( { 'is_credit_course': True, 'credit_requirements': paired_requirements, 'show_min_grade_warning': show_min_grade_warning, } )
response = self.client.post(self.url, { "email": self.EMAIL, "password": "invalid" }) self.assertHttpForbidden(response)
AWS_QUERYSTRING_AUTH = AUTH_TOKENS.get('AWS_QUERYSTRING_AUTH', True)
grains['locale_info']['defaultlanguage'] = 'unknown' grains['locale_info']['defaultencoding'] = 'unknown'
from __future__ import absolute_import import os import shutil import tempfile
srtlist = _pad_bytes("", 2 * (nvar + 1)) self._write(srtlist)
recorder.record_applied("migrations", "1_auto") loader.build_graph() self.assertEqual(num_nodes(), 4)
self.lc_block.get_child_descriptors() event_data = self._assert_event_was_published("assigned")
new_target = self._shallow_copy(new_target)
query_features = task_input.get('features') student_data = list_may_enroll(course_id, query_features) header, rows = format_dictlist(student_data, query_features)
from __future__ import absolute_import
self.selenium.find_element_by_id('calendarlink0').click()
log = logging.getLogger(__name__)
io = StringIO()
with patch('capa.responsetypes.LoncapaResponse.evaluate_answers') as mock_evaluate_answers: mock_evaluate_answers.return_value = CorrectMap(CapaFactory.answer_key(), 'correct') result = module.rescore_problem()
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
return relative_name
if isinstance(address, int): self._check_int_address(address) self._ip = address return
CONFIG_ROOT = path(os.environ.get('CONFIG_ROOT', ENV_ROOT))
time.sleep(1) if groups: chgroups(name, groups) return True
LogoutPage(self.browser).visit() self._auto_auth("STAFF_TESTER", "staff101@example.com", True) self.course_outline.visit()
for key, val in six.iteritems(data): _kwargs['__pub_{0}'.format(key)] = val
steps = [self.activations[:]]
row.delete()
first_checkpoint.add_verification_attempt(SoftwareSecurePhotoVerification.objects.create(user=self.user)) self.assertEqual(first_checkpoint.photo_verification.count(), 2)
from __future__ import absolute_import
CREDIT_MODES = [CREDIT_MODE]
from __future__ import unicode_literals
mof_s = mof_h = win32file._getmaxstdio()
grading_policy.update(course_policy)
del results[-1] max_exceeded = True
self.assertIsNone(p2.image)
if d_idx < 0: n_prec = len(digits[:d_idx]) else: n_prec = len(digits) + d_idx
self.assertTrue(bool(version))
if mysql: self.assertIsNone(city.num_geom) else: self.assertEqual(1, city.num_geom)
return ''
email_placeholder = _(u"username@domain.com")
course_names = self.dashboard_page.wait_for_page().available_courses self.assertIn(self.course_info["display_name"], course_names)
destroy(vm_['name'])
for poly in mpoly: self.assertEqual(sr.wkt, poly.srs.wkt) for ring in poly: self.assertEqual(sr.wkt, ring.srs.wkt)
if is_list_like_indexer(value): if len(value) != len(self.obj.columns): raise ValueError("cannot set a row with " "mismatched columns")
doc_topics, sstats_list = zip(*results) doc_topic_distr = np.vstack(doc_topics)
y_pred = KMeans(n_clusters=2, random_state=random_state).fit_predict(X)
match_func, match_args, match_kwargs = resolve(path) self.assertEqual(match_func, func) self.assertEqual(match_args, args) self.assertEqual(match_kwargs, kwargs)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
from __future__ import absolute_import import os import os.path import tempfile
APP_UPGRADE_CACHE_TIMEOUT = 3600
k = np.asarray(k) indexer = _update_indexer(_convert_to_indexer(k), indexer=indexer)
s = Series(np.random.randn(6), index=[2, 2, 0, 0, 1, 1])
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.'
for col, typ in zip(data, self.typlist): if type(typ) is int: data[col] = data[col].apply( self._null_terminate, convert_dtype=True)
from __future__ import absolute_import import os import threading
self.assertEqual( Article.objects.get(Q(headline__startswith='Hello'), Q(headline__contains='bye')).headline, 'Hello and goodbye' )
if not prepared: value = self.get_prep_value(value) return connection.ops.adapt_datetimefield_value(value)
self._assert_courses_not_in_overview(self.course_key_1, self.course_key_2) self.command.handle(all=True)
properties[name] = serialized_section
grouped['B'].first() grouped['B'].last() grouped['B'].nth(0)
user2 = UserFactory.create(email=self.new_email, password="test2")
from lxml import etree import unittest import xml.sax.saxutils as saxutils
min_ts_us = np.datetime64(Timestamp.min).astype('M8[us]') max_ts_us = np.datetime64(Timestamp.max).astype('M8[us]')
for database_name in DATABASES: DATABASES[database_name]['ATOMIC_REQUESTS'] = False
return CoordTransform(self.source_srs, target_srs)
args = [ 'lms', 'studio', '--settings={}'.format(asset_settings), '--skip-collect' ] call_task('pavelib.assets.update_assets', args=args)
if sp_version >= (0, 12): solvers.append('lbfgs')
def __wrapper__(self, *args, **kw): res = func(*self.__args, **self.__kw) return getattr(res, method_name)(*args, **kw) return __wrapper__
__virtualname__ = 'influxdb'
y = iris.target
self.assertTrue(transaction.get_rollback()) transaction.set_rollback(False) self.assertEqual(Reporter.objects.count(), 3) transaction.set_rollback(True)
model.threshold = 1.0 assert_greater(X_transform.shape[1], model.transform(data).shape[1])
return capa_module
forest = ExtraTreesClassifier(n_estimators=250, random_state=0)
faces_centered -= faces_centered.mean(axis=1).reshape(n_samples, -1)
sparse_results = sparse_classifier.decision_function(X_test_sparse) dense_results = dense_classifier.decision_function(X_test) assert_array_equal(sparse_results, dense_results)
#templates_path.append('source/_templates')
s = Series([1, 2]) s[[True, False]] = [0, 1] expected = Series([0, 2]) assert_series_equal(s, expected)
0.416...
requires_system_checks = False leave_locale_alone = True
dataset = datasets.load_iris() X = dataset.data
ret = self.run_function('beacons.enable_beacon', ['ps']) self.assertTrue(ret['result'])
self.check_assertion_structure(assertion, response['results'][0])
self.assertRaises(KeyError, store.remove, 'a_nonexistent_store')
self.assertEqual(resp.status_code, 200)
latex_logo = "logos/scikit-learn-logo.png"
from salt.states import win_license as license
action = models.CharField(max_length=100, db_index=True)
try: import salt.utils.psutil_compat as psutil HAS_PSUTIL = True except ImportError: HAS_PSUTIL = False
time_left = max_time - time.time() vb_wait_for_session_state(session, timeout=time_left) log.info("Started machine %s", name)
bindvolumes = volumes
try: geo_value = instance.__dict__[self._field.attname] except KeyError: geo_value = super(SpatialProxy, self).__get__(instance, cls)
if create_sql_indexes: conn.execute('create index left_ix on left(key, key2)') conn.execute('create index right_ix on right(key, key2)')
age = time.time() - timestamp if age > max_age: raise SignatureExpired( 'Signature age %s > %s seconds' % (age, max_age))
X, y = make_classification(n_samples=1000, n_features=10, n_informative=3, n_redundant=0, n_repeated=0, n_classes=2, random_state=0, shuffle=False)
self.test_cloud_create() ret = self.run_cloud_destroy(INSTANCE_NAME)
from win32file import ReadFile, WriteFile from win32pipe import PeekNamedPipe import msvcrt import win32api import win32con import win32process
self.selenium.find_element_by_tag_name('form').submit() self.wait_page_loaded()
def test_infer_tz(self): eastern = self.tz('US/Eastern') utc = pytz.utc
self.assertTrue(timezone.is_naive(dt))
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager from django.db import models
import collections
flags = libvirt.VIR_DOMAIN_MEM_MAXIMUM if config: flags = flags | libvirt.VIR_DOMAIN_AFFECT_CONFIG
eol_message = message.replace(str('\r\n'), str('\n')).replace(str('\r'), str('\n'))
result = ser.copy() result.loc[index[1]] = 5 expected = pd.Series([0, 5], index=index) assert_series_equal(result, expected)
#texinfo_no_detailmenu = False
n_samples = 200
blocks = [] if by_item and not self._is_single_block:
assert_array_equal(clf.apply(X), clf_2.apply(X))
for student in students[:3]: CertificateWhitelistFactory.create( user=student, course_id=self.course.id, whitelist=True )
assets, count = content_store.get_all_content_for_course(self.course.id) self.assertEqual(count, 2)
self._compare(o.head(0), o.iloc[0:0]) self._compare(o.tail(0), o.iloc[0:0])
#html_show_sourcelink = True
'timeout': get_config_value('timeout', 1),
if cmp_result < -1: cmp_result = -1 elif cmp_result > 1: cmp_result = 1
NAMES = ['Bexar', 'Galveston', 'Harris', 'Honolulu', 'Pueblo']
REQUIRE_JS = "js/vendor/requiresjs/require.js"
result = Timestamp(result) self.assertEqual(result.value, expected) self.assertEqual(tslib.pydt_to_i8(result), expected)
c.value = 2 c.save() c.value = 3 c.save(force_update=True)
df = pd.DataFrame({'X': [1, 2, 3, 4], 'Y': list('aabb')}, index=list('ABCD'))
task_progress['traceback'] = traceback_string
def _str_header(self, name, symbol='`'): return ['.. rubric:: ' + name, '']
df = DataFrame({}, columns=['foo', 'bar']) self.assertEqual(df.values.dtype, np.object_)
s = pd.Series(4, index=list('ABCD')) result = s[lambda x: 'A'] self.assertEqual(result, s.loc['A'])
if isinstance(val, string_types): if val.lower() == 'true': val = True elif val.lower() == 'false': val = False ret[key] = val
raise NotImplementedError("DateOffset with relativedelta " "keyword(s) %s not able to be " "applied vectorized" % (set(self.kwds) - relativedelta_fast),)
if len(self._flat_data_specs[1]) == 0: X = () self.run_prereqs(X, d) a(*X)
__iadd__ = disable __isub__ = disable __imul__ = disable __itruediv__ = disable __ifloordiv__ = disable __ipow__ = disable
clusterer = KMeans(n_clusters=n_clusters, random_state=10) cluster_labels = clusterer.fit_predict(X)
new_author = Author.objects.get(pk=author.pk) self.assertEqual(new_author.publication, None)
self.page.create_experiment_group_configuration() config = self.page.experiment_group_configurations[0] config.description = "Description of the group configuration."
print 'Not logged in' for page in auth_pages: print "Checking '{0}'".format(page) self.check_page_get(page, expected=302)
return self.name + " for " + (self.course_id.to_deprecated_string() if self.course_id else "all courses")
if any(k is None for k in key): return self._get_values(key)
import salt.ext.six as six
print "======== Roundtrip diff: ========="
return None
return dom.reset(0) == 0
check_perms(path, None, perms['user'], perms['group'], perms['mode'])
kernel32.CloseHandle(process_info.hProcess)
self.assertFalse( self.run_function('pkgutil.is_installed', [TEST_PKG_NAME]))
self.assertEqual(event.dt, dt.replace(tzinfo=EAT))
>>> cut_calls = aapl.get_near_stock_price(call=True, above_below=3)
import lettuce.django
from __future__ import absolute_import import logging import re import getopt import copy from os import path as ospath
assert_almost_equal(X_unwhitened.std(axis=0).std(), 74.1, 1)
if encrypted is not False: encrypted = postgres._DEFAULT_PASSWORDS_ENCRYPTION password = postgres._maybe_encrypt_password(name, password, encrypted=encrypted)
GeneratedCertificate.eligible_certificates.create( user=user, course_id=course_key, status=status )
library = LibraryFactory.create() expected_url = u'/library/{}'.format(unicode(library.location.library_key)) self.assertEqual(xblock_studio_url(library), expected_url)
return (loads, (dumps(np.asarray(a), protocol=HIGHEST_PROTOCOL),))
for feat in self: if feat.fid == feat_id: return feat
if args: return item(*args)
directories_to_create.reverse() for directory_to_create in directories_to_create: log.debug('Creating directory: %s', directory_to_create) mkdir(directory_to_create, user=user, group=group, mode=mode)
def func(_start, _stop, _where): return s.read(start=_start, stop=_stop, where=_where, columns=columns, **kwargs)
response.client = self response.request = request
assert_array_equal(X_truth[:, :2], out_X_unstructured[0]) assert_array_equal(X_truth[:, :2], out_X_structured[0])
AccessTestData(partition_groups={1: 1, 2: 2}, merged_parents_list=[{1: {3}}, {1: {1}}], expected_access=True),
if category == "static_tab": dog_stats_api.increment( DEPRECATION_VSCOMPAT_EVENT, tags=( "location:xml_load_extra_content_static_tab", u"course_dir:{}".format(course_dir), ) )
need_uniq_names = ('problem', 'sequential', 'video', 'course', 'chapter', 'videosequence', 'poll_question', 'vertical')
xrange = range
'debug': False
self.register_page = CombinedLoginAndRegisterPage(self.browser, start_page="register") self.dashboard_page = DashboardPage(self.browser)
_config_filename_ = 'master'
panel4d = Panel4D(vals) self.assertIs(panel4d.values, vals)
if isinstance(response, HttpResponseBase): return response else: return HttpResponseRedirect(request.get_full_path())
rng = np.random.RandomState(0) X = rng.rand(10, 20) y = np.arange(10).astype(np.int)
df = DataFrame(np.arange(0, 9), columns=['count']) df['group'] = 'b'
if self.get_compound_hints(new_cmap, student_answers): return
if len(unicode(final_grade)) > 7: final_grade = u'{:.5f}'.format(final_grade) else: final_grade = unicode(final_grade)
if self.current_token is not EndToken: raise self.error_class("Unused '%s' at end of if expression." % self.current_token.display()) return retval
return 'xenstore' in __salt__['cmd.run'](__grains__['ps'])
self.axes[0] = self.items[~is_deleted] self.blocks = tuple(b for blkno, b in enumerate(self.blocks) if not is_blk_deleted[blkno]) self._shape = None self._rebuild_blknos_and_blklocs()
df3 = df1.set_index(['text'], append=True) df2 = df1.set_index(['text'], append=True) self.assertTrue(df3.equals(df2))
worktree_data = dict([(x, '') for x in tracked_data_points])
import pprint import logging import time
result = df_swap.loc[idx[:, '2016-01-02'], :] expected = df_swap.iloc[[2, 3, 7, 8, 12, 13]] tm.assert_frame_equal(result, expected)
os.remove(destdir) os.makedirs(destdir)
status_by_req = defaultdict(lambda: False) for status in CreditRequirementStatus.get_statuses(requirements, username): status_by_req[status.requirement.id] = status.status
result = df.iloc[[1, 2, 4, 6]] expected = df.reindex(df.index[[1, 2, 4, 6]]) assert_frame_equal(result, expected)
is_increasing = assert_no_warnings(check_increasing, x, y) assert_true(is_increasing)
ret = {} for minion, data in six.iteritems(returns): ret[minion] = json.loads(data) return ret
_srid_cache = {}
from __future__ import absolute_import
import logging
pygit2ver = distutils.version.LooseVersion(pygit2.__version__) pygit2_minver = distutils.version.LooseVersion(PYGIT2_MINVER)
date = get_date(ccx, node=parent_node, date_type=date_type)
self.assertNotRegexpMatches(problem_html, r"data-block-type=[\"\']acid_aside[\"\']")
self.store.publish(self.vertical_x1a, self.user_id) self.store.publish(problem_location, self.user_id)
df.loc[2, 'B'] = None
self.assertRaises(KeyError, self.cf.register_option, 'a', 1, 'doc')
problem_child = self.store.create_child(self.user_id, chapter_location, 'problem', 'Problem_Child') self.assertFalse(self.store.has_published_version(problem_child))
json_output = json.dumps(returned_result) if len(json_output) > 1023: raise ValueError("Length of task output is too long: {0}".format(json_output)) return json_output
series = [frame.xs(fidx[0]), frame.xs(fidx[3]), frame.xs(fidx[5]), frame.xs(fidx[7]), frame.xs(fidx[5])[:2]]
return v[::-1], W[:, ::-1]
try: AdaGrad(-1.0) allows_null = True except AssertionError: allows_null = False assert not allows_null
res = df.loc[lambda x: 1, lambda x: 'A'] self.assertEqual(res, df.loc[1, 'A'])
if isinstance(obj, gt.ABCSeries): from pandas import Series result = Series(result, index=obj.index, name=obj.name, copy=False)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
for i, hyperparameter in enumerate(kernel.hyperparameters): assert_equal(theta[i], np.log(getattr(kernel, hyperparameter.name)))
import yaml from jinja2 import Environment, FileSystemLoader try:
self.assertFalse(any(settings.PDF_RECEIPT_TERMS_AND_CONDITIONS in s for s in pdf_content))
hg.__salt__ = {}
add_function_parentheses = False
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
message_template = 'emails/course_creator_revoked.txt'
from pandas.core.series import Series result = Series(result.ravel()).replace(-1, na_sentinel).values.\ reshape(result.shape)
CUSTOM_THEME_OVERRIDES = { 'embargo': BlockedMessage( description='Embargo', template='static_templates/theme-embargo.html' ) }
for course in store.get_courses(**kwargs): course_id = self._clean_locator_for_mapping(course.id) if course_id not in courses: courses[course_id] = course
salt.utils.files.process_read_exception(exc, path)
from salt.states import win_system
values = values.view()
course = self.set_up_course(due_date_display_format=u"") text = self.get_text(course) self.assertNotIn("due ", text)
(['verified', 'audit'], 'course_modes_choose', CourseMode.DEFAULT_MODE_SLUG),
func = 'modjk.{0}'.format(cmd) args = [worker, lbn, profile] response = __salt__['publish.publish'](target, func, args, expr_form)
tm._skip_if_no_scipy()
data.update(invalid_fields)
self.copy_from_server_to_local(remote_name, local_name) log.info(common_msg + "File %s has been locally cached to %s" % (remote_name, local_name))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
orphan = course_key.make_usage_key('chapter', 'OrphanChapter') self.store.create_item( self.user_id, orphan.course_key, orphan.block_type, block_id=orphan.block_id )
ensure my cloudwatch service exists: pagerduty_service.present: - name: my cloudwatch service - service: escalation_policy_id: "my escalation policy" type: aws_cloudwatch description: "my cloudwatch service controlled by salt"
'auth_safemode': bool,
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch )
if categories is None: category_match = True else: for category in update.Categories: if category.Name in categories: category_match = True
precompute = False
self.set_header('Access-Control-Expose-Headers', 'X-Auth-Token')
'origin': 'git@github.com:MITx/content-mit-6002x.git',
if module.has_children: new_children = [] for child_loc in module.children: child_loc = child_loc.map_into_course(dest_course_id) new_children.append(child_loc)
from salt.modules import twilio_notify
train_object.algorithm.termination_criterion.prop_decrease = 0.5 train_object.algorithm.termination_criterion.N = 1
self.sort() deleted_counter = Counter()
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
b = np.zeros((self.dim * 4,))
import logging import glob import re
expected_url = _third_party_login_url( backend_name, "login", redirect_url=_finish_auth_url(params), ) self.assertContains(response, expected_url)
tsframe.to_csv(path, index=False) recons = DataFrame.from_csv(path, index_col=None) assert_almost_equal(recons.values, self.tsframe.values)
self._execute_query() if not connections[self.using].features.can_use_chunked_reads: result = list(self.cursor) else: result = self.cursor return iter(result)
log.info("Send-email task %s for email %s: succeeded", current_task_id, email_id) update_subtask_status(entry_id, current_task_id, new_subtask_status)
source_suffix = '.rst'
def __virtual__(): if not HAS_SQLITE3: return (False, 'The sqlite3 execution module failed to load: the sqlite3 python library is not available.') return True
if self.child_fd: fd_flags = fcntl.fcntl(self.child_fd, fcntl.F_GETFL) if self.child_fde: fde_flags = fcntl.fcntl(self.child_fde, fcntl.F_GETFL)
pass
with translation.override("fr"):
result = store.select('df', where=where) tm.assert_frame_equal(result, expected)
html_use_modindex = True
from __future__ import unicode_literals
return
query_features = _task_input.get('features') student_data = get_proctored_exam_results(course_id, query_features) header, rows = format_dictlist(student_data, query_features)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self._enter_mockbin()
return v[::-1], W.T[:, ::-1]
self.assertRaises(TypeError, self.read_csv, path, dtype={'A': 'foo', 'B': 'float64'}, index_col=0)
#unused_docs = []
mlb = MultiLabelBinarizer(classes=[1, 3, 2]) assert_array_equal(mlb.fit(inp).transform(inp), indicator_mat) assert_array_equal(mlb.classes_, [1, 3, 2])
chisq = f_obs chisq -= f_exp chisq **= 2 chisq /= f_exp chisq = chisq.sum(axis=0) return chisq, special.chdtrc(k - 1, chisq)
__func_alias__ = { 'list_': 'list' }
rnn_mo = neighbors.RadiusNeighborsClassifier(weights=weights, algorithm=algorithm) rnn_mo.fit(X_train, y_train) y_pred_mo = rnn_mo.predict(X_test)
pass
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
log.warning('Authentication failure of type "eauth" occurred.') return ''
try: import memcache HAS_LIBS = True except ImportError: HAS_LIBS = False
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
arr = np.array([1, '2', 3, '4'], dtype=object) with tm.assertRaisesRegexp(TypeError, 'casting'): Int64Index(arr)
req.method = 'HEAD'
clf = NearestCentroid() clf.fit(X, y) assert_array_equal(clf.predict(T_csr), true_result)
msg = self.style.HTTP_SUCCESS(msg)
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.5, random_state=0)
self.assertRaises(ValueError, ser.replace, [1, 2, 3], [np.nan, 0])
exp = Series([], dtype='float64', index=Index([], dtype='object')) assert_series_equal(result, exp)
store.get_items(SlashSeparatedCourseKey('abc', 'def', 'ghi'), qualifiers={'category': 'vertical'})
from __future__ import absolute_import
import salt.utils import salt.ext.six as six
'master_finger': str,
self.course_nav.go_to_vertical('Test Problem 2')
for prefix in sorted(self._prefix_registry, reverse=True): if key.startswith(prefix): return self._prefix_registry[prefix]
pass
sqls, sqls_params = self.batch_process_rhs(compiler, connection, rhs) placeholder = '(' + ', '.join(sqls) + ')' return (placeholder, sqls_params)
assert_array_equal(X.A, v.transform(iter(D) if iterable else D).A)
raise ItemNotFoundError(course_id)
self.context['return_to_annotation'] = False xml = self.render_to_xml(self.context) self.assert_no_xpath(xml, xpath, self.context)
get_request_dict = { CapaFactoryWithFiles.input_key(response_num=2): fileobjs, CapaFactoryWithFiles.input_key(response_num=3): 'None', }
self.assertEqual(len(actual), 2) self.assertEqual(actual, expected)
try: new_configuration = GroupConfiguration(request.body, course, group_configuration_id).get_user_partition() except GroupConfigurationsValidationError as err: return JsonResponse({"error": err.message}, status=400)
APP_UPGRADE_CACHE_TIMEOUT = ENV_TOKENS.get('APP_UPGRADE_CACHE_TIMEOUT', APP_UPGRADE_CACHE_TIMEOUT)
from __future__ import unicode_literals
from __future__ import unicode_literals
result = self.index.difference(self.index.sortlevel(1)[0]) self.assertEqual(len(result), 0)
site.register(Holder, HolderAdmin, inlines=[InnerInline]) site.register(Holder2, HolderAdmin, inlines=[InnerInline2]) site.register(Holder3, inlines=[InnerInline3])
from __future__ import unicode_literals
self.assertEqual(event.dt.replace(tzinfo=EAT), dt)
import salt.daemons.flo import salt.daemons.masterapi from raet import raeting from raet.lane.stacking import LaneStack from raet.lane.yarding import RemoteYard
if not is_reverse_o2o(source): must_include[old_model].add(source) add_to_dict(must_include, cur_model, opts.pk)
self.assertIsNone(df._repr_latex_())
store.append('s3', wp, min_itemsize={'major_axis': 20}) self.assertRaises(ValueError, store.append, 's3', wp2)
T = sp.lil_matrix((3, 1)) T[0, 0] = 2 T[1, 0] = 3 T[2, 0] = 4
from __future__ import absolute_import import logging
if isinstance(cmd, str): funs_to_check = [cmd] else: funs_to_check = cmd for fun in funs_to_check: if re.match(blacklisted_module, fun): return True
self.assertEqual( [len(courses_list), len(courses_list_by_groups), len(courses_summary_list)], [0, 0, 0] )
buckets = 10 bucket_width = 1. / float(buckets) for i in xrange(buckets): lower_lim = i * bucket_width upper_lim = (i+1) * bucket_width
spmatshp = (outsize*N.prod(kshp)*inshp[0],insize) if ws else\ (nkern*outsize,insize) spmat = scipy_sparse.lil_matrix(spmatshp)
return environ.get(key)
y = label_binarize(y, classes=[0, 1, 2]) n_classes = y.shape[1]
self.labels = np.array(labels, copy=True) self.unique_labels = np.unique(labels) self.n_unique_labels = len(self.unique_labels)
if hasattr(clusterer, "random_state"): clusterer.set_params(random_state=0)
self.assertEqual(len(w), 1)
__func_alias__ = { 'reload_': 'reload' }
formulahint_element = etree.SubElement(hintgroup_element, "formulahint")
d = self.ts.index[0] - datetools.bday self.assertTrue(np.isnan(self.ts.asof(d)))
suite = BokChoyTestSuite('', default_store='invalid') name = 'tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') )
path = salt.utils.url.unescape(path)
assert_series_equal(nat_series_dtype_timestamp + NaT, nat_series_dtype_timestamp) assert_series_equal(NaT + nat_series_dtype_timestamp, nat_series_dtype_timestamp)
if item_name is not None: if item_name not in ordering: ordering.append(item_name) else: if name not in ordering: ordering.append(name)
left = self.lhs.evaluate(env, engine=engine, parser=parser, term_type=term_type, eval_in_python=eval_in_python) right = self.rhs.evaluate(env, engine=engine, parser=parser, term_type=term_type, eval_in_python=eval_in_python)
assert_raises(ValueError, cls().partial_fit, X2, y2[:-1], classes=np.unique(y2))
X_homo = X + sigma * rng.randn(n_samples, n_features)
verify_order(self.html_usage_key, self.usage_key)
#default_role = None
self.certificates_section.refresh()
ranks0 = self.frame.rank(na_option='top', ascending=False) ranks1 = self.frame.rank(1, na_option='top', ascending=False)
assert_array_equal(reg.predict([[0.2, -1.0]]), np.array([-1]))
PLATFORM_NAME = "Your Platform Name Here" CC_MERCHANT_NAME = PLATFORM_NAME COPYRIGHT_YEAR = "2015"
ellapsed = datetime.now() - start timeout = ellapsed.seconds + 3
return None
return xblock
problem = self.build_problem(script=script, cfn="check_func")
__proxyenabled__ = ['rest_sample']
from salt.states import drac
l = [1, 2, 3]
self._studio_add_content(0)
for chan_i in xrange(chans): channel = topo_X[..., chan_i] start_idx = foveate_channel(channel, rings, output, start_idx)
NOTES_DISABLED_TABS = ['course_structure', 'tags']
cost = sum(costs) model_terms = sum([param.sum() for param in model.get_params()]) cost = cost * model_terms return cost
X_train, X_test, y_train, y_test = train_test_split(boston.data, boston.target, random_state=rng)
for label in [bisection_label, 'model_inheritance_same_model_name']: try: test_labels.remove(label) except ValueError: pass
split_test = self._update_partition_id(0)
export_course_to_xml(self.store, content_store, course_id, root_dir, 'test_export')
xpath = "//div[@class='drag_and_drop_problem_json']/p/b" self.assert_has_text(xml, xpath, 'HTML')
if not mod_path: raise
internal_use_only = False progress_class = ProgressBar
from salt.exceptions import CommandExecutionError from salt.modules import mac_assistive as assistive
self._check_grade_response(callback_url, expected_header, json.dumps(response_content))
self.assertRedirects(response, '/circular_redirect_2/', status_code=302, target_status_code=302) self.assertEqual(len(response.redirect_chain), 4)
self.store.convert_to_draft(self.vertical_x1a, self.user_id) self.store.convert_to_draft(self.vertical_y1a, self.user_id)
assert_raises(ValueError, next, StratifiedShuffleSplit(train_size=2).split(X, y)) assert_raises(ValueError, next, StratifiedShuffleSplit(test_size=2).split(X, y))
reg.fit(X, y, sample_weights_OK) reg.fit(X, y, sample_weights_OK_1) reg.fit(X, y, sample_weights_OK_2)
from salttesting.helpers import ensure_in_syspath
import yaml try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
idx = TimedeltaIndex([1e14, 'NaT', pd.NaT, np.NaN])
vals['type'] = 'acl' if comps[0] == 'default': vals['type'] = 'default' comps.pop(0)
err_msg = colorize( 'red', "No coverage info found. Run `paver test` before running " "`paver coverage`.\n" ) sys.stderr.write(err_msg) return
assert_page_correct( page=3, page_size=4, expected_start=8, expected_stop=10, expected_next=None, expected_prev=2 )
if redirect: self.assertRedirects(response, reverse('dashboard')) else: self.assertEquals(response.status_code, 200)
load_svmlight_file(.42)
for example in NON_ARRAY_LIKE_EXAMPLES: assert_raises(ValueError, unique_labels, example)
self._credit_provider_callback(request_uuid, 'approved') self._assert_request_status(request_uuid, "approved")
pro = Book.objects.create(title="Pro Django", published=datetime.date(2008, 12, 16))
X = lfw_people.data n_features = X.shape[1]
from __future__ import absolute_import
for k, v in self.panel.iteritems(): pass
aggs = {'D': 'sum', 'E': 'mean'}
matching_coupons = Coupon.objects.filter(code=code, is_active=True) if matching_coupons: return save_registration_code( user, course_id, mode_slug, invoice=invoice, order=order, invoice_item=invoice_item )
if len(names) == 1: return ret[names[0]] return ret
search = re.search(linere, line) if not search: continue
learn_rates = [annealed * self.learning_rates[p] for p in self.params]
section_context.update({ 'proctoring': timed_exam_attempt_context, })
assert images.type.broadcastable == acts.type.broadcastable assert images.type.broadcastable == denoms.type.broadcastable assert images.type.broadcastable == dout.type.broadcastable
os.environ.clear() os.environ.update(_orig_environ)
assert_raises(ValueError, plot_partial_dependence, clf, X, [{'foo': 'bar'}])
from __future__ import absolute_import
if settings.FEATURES.get('ENABLE_MKTG_EMAIL_OPT_IN'): _update_email_opt_in(request, course_id.org)
supports_paramstyle_pyformat = True
self.assertNumContains(sql, 'tbl_tbsp', 2)
self.store.publish(locations['parent'], self.user_id)
self.assertQuerysetEqual( Number.objects.none().values('num').order_by('num'), [] )
self.run_on_commit.append((set(self.savepoint_ids), func))
range = range map = map zip = zip filter = filter reduce = functools.reduce long = int unichr = chr
'course_id': u'edX/toy/2012_Fall',
import salt.utils
scipy_works = False
writer(expected, path)
try: intercepted_function(raise_error=FakeInputException) except FakeOutputException as ex: self.assertEqual(ex.message, expected_log_msg)
_win(kernel32.CreatePipe, wintypes.BOOL,
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
fill_value = get_fill_value(o)
cache.clear() self.course_key = CourseLocator(org='TestOrg', course='TestCourse', run='TestRun')
tables.parameters.MAX_NUMEXPR_THREADS = 1 tables.parameters.MAX_BLOSC_THREADS = 1 tables.parameters.MAX_THREADS = 1
salt '*' vsphere.coredump_network_enable my.esxi.host root bad-password True
self._assert_request_status(request_uuid, 'pending')
metadata['xml_attributes'][attr] = value
salt '*' vsphere.ntp_configure my.esxi.host root bad-password '[192.174.1.100, 192.174.1.200]'
incorrect = y_predict != y
'sources': [u'example.mp4', u'example.webm', u'http://www.meowmix.com'],
self.ymd['E'] = 'foo' self.ymd['F'] = 2
before = self.make_project_state([]) after = self.make_project_state([self.custom_user_no_inherit, self.aardvark]) autodetector = MigrationAutodetector(before, after) changes = autodetector._detect_changes()
ser = Series(np.random.randn(1001), name=0) rep_str = repr(ser) self.assertIn("Name: 0", rep_str)
assert_series_equal(timedelta_series - NaT, nat_series_dtype_timedelta) assert_series_equal(-NaT + timedelta_series, nat_series_dtype_timedelta)
return
del input_payload['current_time']
TASK_LOG.error(u"Task (%s) has no InstructorTask object for id %s", task_id, entry_id)
empty = ParameterGrid({}) assert_equal(len(empty), 1) assert_equal(list(empty), [{}]) assert_grid_iter_equals_getitem(empty) assert_raises(IndexError, lambda: empty[1])
didx = DatetimeIndex(start='2013/10/01', freq='D', periods=10) pidx = PeriodIndex(start='2013/10/01', freq='D', periods=10)
from salttesting.unit import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../..')
self._grading_policy['RAW_GRADER'] = value self.grading_policy['GRADER'] = value
return dict( super(GradingPolicySerializer, self).to_representation( defaultdict(lambda: None, obj) ) )
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
request = self.get_request() self.assertEqual(get_level(request), constants.INFO)
cert_items = CertificateItem.objects.filter(order=order)
response = middleware.process_response(request, response)
m = 15 monitoring_dataset = get_topological_dataset(rng, rows, cols, channels, m)
value = json.loads(value)
from __future__ import absolute_import import json import os
json_return = json.dumps(ret['return']) del ret['return'] json_full_ret = json.dumps(ret)
axes = self.input_axes assert len(axes) == 4
self.assert_index_equal(Index(['a', 'b', 'c', 'd']), result.insert(0, 'a'))
exp_doc_topic_d = exp_doc_topic[idx_d, :].copy() exp_topic_word_d = exp_topic_word_distr[:, ids]
response = self.client.get(reverse('branding.views.courses')) self.assertEqual(response.status_code, 200)
from __future__ import unicode_literals
for signum in old_signals: signal.signal(signum, old_signals[signum])
GRAINS_CACHE = {} DETAILS = {}
self._check_grid_settings(Series([1, 2, 3]), plotting._series_kinds + plotting._common_kinds)
return
if existing_vhost == '' and perms == ['', '', '']: continue perm_need_change = True
chapter = ItemFactory.create(parent_location=self.course.location, display_name=TEST_SECTION_NAME)
saltenv = env
joined = df_list[0].join(df_list[1:], how='outer') _check_diff_index(df_list, joined, df.index)
self.assertEqual(_get_release_date(response), 'Unscheduled') _assert_settings_link_present(response)
pythoncom.CoInitialize()
self.assertEqual([], os.listdir(TMP_JID_DIR))
self.assertEqual(col[1], Timestamp( '2000-06-01 07:00:00', tz='UTC'))
df = orig.copy() df.iat[2, 0] = "b" tm.assert_frame_equal(df, exp_single_cats_value)
if self.escChar: ret = re.sub(self.escCharReplacePattern,"\g<1>",ret)
UNKNOWN_TASK_ID = 'unknown-task_id' FILTERED_OUT_ROLES = ['staff', 'instructor', 'finance_admin', 'sales_admin'] UPDATE_STATUS_SUCCEEDED = 'succeeded' UPDATE_STATUS_FAILED = 'failed' UPDATE_STATUS_SKIPPED = 'skipped'
rng = np.random.RandomState(1999) n, p = 50, 3
violations_count_str = "Number of pylint violations: " + str(num_violations) print violations_count_str
def _complete_linkage(*args, **kwargs): kwargs['linkage'] = 'complete' return linkage_tree(*args, **kwargs)
if __opts__['test']: ret['result'] = None ret['comment'] = 'Service {0} set to be enabled'.format(name) return ret
state_run = self.run_function('state.sls', mods='requisites.onchanges_simple')
from __future__ import unicode_literals
return self.q(css=self._bounded_selector(child_class.BODY_SELECTOR)).map( lambda el: child_class(self.browser, el.get_attribute('data-locator'))).results
del bmark
self.mock_tracker.reset_mock() try: views.server_track(request, str(sentinel.event_type), '{}')
where = "index >= '%s'" % beg_dt result = store.select('df', where=where) tm.assert_frame_equal(expected, result)
'gather_job_timeout': int,
return getattr(self.steps[0][1], '_pairwise', False)
original_course = self.source_modulestore.get_course(source_course_key, **kwargs) if original_course is None: raise ItemNotFoundError(unicode(source_course_key))
return (requested_fields or set()) | {'type', 'display_name'}
assert_raises(ValueError, plot_partial_dependence, clf, X, [100])
resultb = resulta + d assert_series_equal(df['A'], resultb)
bbox = (-180, -90, 180, 90) p = OGRGeometry.from_bbox(bbox) self.assertEqual(bbox, p.extent)
self.assertIn( 'Invalid String Value for Enabled', self.run_function('system.set_remote_events', ['spongebob']))
pipe.set_params(svc__a=0.1) assert_equal(clf.a, 0.1) assert_equal(clf.b, None) repr(pipe)
the_html = problem.get_html() self.assertRegexpMatches(the_html, r"<div>\s+</div>")
response = self.client.get('/?preview-lang=fa-ir') self.assert_tag_has_attr(response.content, "html", "lang", "fa-ir")
CountryAccessRule.objects.get_or_create( restricted_course=restricted_course, country=country, rule_type='blacklist' )
@override_settings(TEMPLATES=None) @functools.wraps(func) def inner(self): libraries = getattr(self, 'libraries', {})
w = self.r1.waiter_set.create(name='Joe') self.assertEqual(repr(w), '<Waiter: Joe the waiter at Demon Dogs the restaurant>')
MESSAGE_STORAGE = 'django.contrib.messages.storage.fallback.FallbackStorage'
import time import os import codecs import logging
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.bio_book, self.djangonaut_book])
with tm.assertRaisesRegexp(TypeError, "fillchar must be a character, not str"): result = values.str.center(5, fillchar='XY')
import salt.search
from __future__ import absolute_import import os import logging
from __future__ import absolute_import
filtered = data.to_frame()
k = centers.shape[0] squared_diff = 0.0 for center_idx in range(k): center_mask = nearest_center == center_idx count = center_mask.sum()
from __future__ import absolute_import
errors = to_list(errors)
import lettuce.django
rng = np.random.RandomState(0) X = rng.rand(5, 5)
dist_array = pairwise_distances(X).flatten() np.sort(dist_array) radius = dist_array[15]
defined_but_not_allowed = ("(?:^Cannot.+{0!r}.+{1!r}.+try using the " "'apply' method$)")
class TestManager(models.Manager): def get_by_natural_key(self, key): return self.get(name=key)
check_cuda(str(type(self)))
def myattr_dec(func): def wrapper(*args, **kwargs): return func(*args, **kwargs) wrapper.myattr = True return wraps(func)(wrapper)
params = self._signed_callback_params(self.order.id, self.COST, self.COST, signature="invalid!") result = process_postpay_callback(params)
kwargs.setdefault('label_suffix', '') super(ApiAccessRequestForm, self).__init__(*args, **kwargs)
self.register_page.click_third_party_dummy_provider()
df3.cov() df3.corr()
for b, sb in zip(blocks, self.blocks): b.mgr_locs = sb.mgr_locs
left = self.rng[:5] right = self.rng[5:10]
else: return res
p2 = Parent.objects.create(name="Parent 2") c.parent = p2 self.assertIs(c.parent, p2)
_called_from_command_line = False can_import_settings = True
rm_ = ind
import salt.utils.validate.net from salt.exceptions import CommandExecutionError
certs_api.set_cert_generation_enabled(self.course.id, True)
captured = input()
ENABLED = True
return False
self.assertFalse(hasattr(Article(), 'reporter'))
response = self._search("foo")
from __future__ import absolute_import
self.assertEqual(list(dive.authors.all().values_list('name', flat=True)), ['Mark Pilgrim'])
ret = salt.modules.vsphere.system_info(host=host, username=user, password=password)
result_dict = json.loads(response.content)
'edx-ui-toolkit/js/utils/global-loader.js', 'edx-ui-toolkit/js/utils/string-utils.js', 'edx-ui-toolkit/js/utils/html-utils.js',
energy = dbm.energy(V = v_state, hidden = [y_state]) unnormalized_prob = T.exp(-energy) assert unnormalized_prob.ndim == 1 unnormalized_prob = unnormalized_prob[0] unnormalized_prob = function([], unnormalized_prob)
loaded_mods = list(set(loaded_mods) | set(persist_mods))
if sorted(append_axis) == sorted(exist_axis): append_axis = exist_axis
assert_array_equal(clf.predict([[0.2, -1.0]]), np.array([-1]))
from __future__ import absolute_import from unittest2 import skipIf from integration.cloud.helpers import random_name from salt.utils import virtualbox import json import logging import os import unittest import integration
return [item + '\n' for item in ifcfg.split('\n')]
class BaseCustomFormSet(BaseFormSet): def clean(self): raise ValidationError("This is a non-form error")
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, expensiveTest
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
else: ZMQIOLoop.current().add_timeout(time.time() + 0.5, self._stop)
APPL_KINDS = OrderedDict([('master', 0), ('minion', 1), ('syndic', 2), ('caller', 3)])
data = _dict_compat(data) data = lib.fast_multiget(data, index.astype('O'), default=np.nan)
ieee2 = xport2
'div': both_before + [ Tok("punct", literals("/= /"), next='reg'), ] + both_after,
extra_fields = microsite.get_value( 'REGISTRATION_EXTRA_FIELDS', getattr(settings, 'REGISTRATION_EXTRA_FIELDS', {}) )
salt myminion git.submodule /path/to/repo/sub/repo update opts='--rebase'
i, j = np.triu_indices(X.shape[0], k=1) X = X[i, j]
else: ret = _load_result(deleted, ret)
import salt.client import salt.output import salt.exceptions from salt.utils import print_cli
self.certificates_section.wait_for_certificate_exceptions_section()
assert_page_correct( page=1, page_size=4, expected_start=0, expected_stop=4, expected_next=2, expected_prev=None )
names = F.readline().decode('ascii').strip().split(',')
self.assertFalse(hasattr(Director(), 'director')) self.assertFalse(hasattr(School(), 'school'))
_mutable = True _encoding = None
return psutil.TOTAL_PHYMEM
for name, index in self.indices.items(): if isinstance(index, MultiIndex): pass else: idx = index.copy()
__virtualname__ = 'system'
if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern
from django.template import RequestContext, TemplateSyntaxError from django.test import RequestFactory, SimpleTestCase, override_settings from django.urls import NoReverseMatch, resolve
request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO['username'])
return X
subsection_css = 'a[href*="Test_Subsection_2/"]' world.css_click(subsection_css)
fetched = self.store.get_item(discussion_item.location)
if settings.DEBUG or settings.FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover()
if not choice.get('id'): choice.set("id", chr(ord("A") + index))
response = requests.post(url, data=data, headers=headers, verify=False)
no_index = DataFrame(columns=[0, 1, 3])
from __future__ import absolute_import
self.assertTrue(self._search_for_content(self.SEARCH_STRING))
if field_type is None: return errors
current_state = __salt__['tuned.active']()
target._flush()
rh_ip.__grains__ = {} rh_ip.__salt__ = {}
self.assertNotEqual(display_name_before_import, display_name_after_import)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
([]),
STATIC_URL = None
if (not hasattr(openid_request, 'return_to') or not openid_request.return_to): log.error('empty return_to') return False
draft_html = self.store.get_item(course_id.make_usage_key('html', self.DRAFT_HTML)) self.assertTrue(getattr(draft_html, 'is_draft', False))
d_Z = np.empty(theta.shape[0])
dt = Timestamp('20130101 09:10:11') result = dt.ceil('D') expected = Timestamp('20130102') self.assertEqual(result, expected)
if sample_weight.sum() <= 0: raise ValueError( "Attempting to fit with a non-positive " "weighted number of samples.")
self.assertTrue((self.index == self.index).all())
if self.value == "": self.value = 'null'
raise parser.error_class( "Not expecting '%s' as infix operator in if tag." % self.id )
return time.strftime('%Y-%m-%dT%H:%M:%SZ', value)
import salt.utils.memcached
if name == 'due': return None if name == 'start' and block.category != 'course': return None
from __future__ import unicode_literals
terms_of_service_and_honor_code = branding_api.get_tos_and_honor_code_url() if terms_of_service_and_honor_code != branding_api.EMPTY_URL: data.update({'company_tos_url': terms_of_service_and_honor_code})
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
ransac_estimator0.fit(X, y) assert_warns(DeprecationWarning, ransac_estimator2.fit, X, y) assert_array_almost_equal(ransac_estimator0.predict(X), ransac_estimator2.predict(X))
if progress and num_feat % progress_interval == 0: stream.write('Processed %d features, saved %d ...\n' % (num_feat, num_saved))
import salt.utils import salt.utils.decorators as decorators
return []
return Response({'handouts_html': None})
c(min_periods=1) c(min_periods=1, center=True) c(min_periods=1, center=False)
if has_center:
ret = line_search_wolfe2(f, fprime, xk, pk, gfk, old_fval, old_old_fval, **kwargs)
if options is None: options = '' do_matrix = 'matrix' in options do_qubit = 'qubit' in options do_numerical = 'numerical' in options
transformer = Conv2D(filters=filters, batch_size=len(input), input_space=input_space, border_mode='full') sum_sqr_XX = transformer.lmul(X ** 2)
mi = MultiIndex(levels=new_levels, labels=new_labels, names=self.names, sortorder=self.sortorder, verify_integrity=False)
df2 = self.read_csv(StringIO(data2)) tm.assert_frame_equal(df2, df)
anova_filter = SelectKBest(f_regression, k=3) clf = svm.SVC(kernel='linear')
if not request.user.is_authenticated(): return redirect(reverse('signin_user'), next=request.path)
raise NotImplementedError("number of dimensions is currently " "limited to 3")
self.assertRedirects(response, '/get_view/', status_code=301)
with self.assertNumQueries(0): self.assertEqual(obj.name, "first") self.assertEqual(obj.other_value, 0)
out = np.packbits((projected > 0).astype(int)).view(dtype=HASH_DTYPE) return out.reshape(projected.shape[0], -1)
import integration from salt.utils.process import clean_proc from salt.utils import event
assert_raises(ValueError, compute_sample_weight, {1: 2, 2: 1}, y_)
if not old_is_active: new_enrollment.update_enrollment(is_active=False, skip_refund=True)
self.assertFalse(element_has_text( page=course_outline_page, css_selector='.add-item a.button-new', text='New Subsection' ))
result1 = s[5.0] result2 = s.loc[5.0] result3 = s.ix[5.0] self.assertEqual(result1, result2) self.assertEqual(result1, result3)
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_id) if has_instructor_access_for_class(request.user, course_key): try: data = dashboard_data.get_d3_sequential_open_distrib(course_key)
result = Index(['b', 'c', 'd'])
site_configuration_history = SiteConfigurationHistory.objects.filter( site=site_configuration.site, ).all()
if isinstance(subarr, ABCSeries): subarr = subarr._values if subarr.dtype == np.object_: subarr = tools._to_datetime(subarr, box=False)
if response_msg: tree.append(self._render_response_msg_html(response_msg))
self.assertEqual(formset[0].instance.profile_id, 1)
check_lti_iframe_content("Wrong LTI signature")
if task_progress.attempted % status_interval == 0: task_progress.update_task_state(extra_meta=current_step) task_progress.attempted += 1
__virtualname__ = 'pkg'
return HttpResponse(status=status.HTTP_500_INTERNAL_SERVER_ERROR)
estimators = dict((cov_type, GaussianMixture(n_components=n_classes, covariance_type=cov_type, max_iter=20, random_state=0)) for cov_type in ['spherical', 'diag', 'tied', 'full'])
@ignore_warnings(category=DeprecationWarning) def test_aic(): n_samples, n_dim, n_components = 50, 3, 2 X = rng.randn(n_samples, n_dim)
expected_1 = DatetimeIndex(['2000-01-31', '2000-03-31', '2000-04-30', '2000-05-31'], freq=None, name='idx')
exp_buf = fromstr(bg.buffer_wkt) quadsegs = bg.quadsegs width = bg.width
cp = self.ts[:10].copy() cp[:] = np.nan self.assertTrue(isnull(cp.cov(cp)))
try: xp = getattr(obj, method).__getitem__(_axify(obj, key, axis)) except: xp = getattr(obj, method).__getitem__(key)
cmd = 'find {0} -name *.pkg'.format(base_path) out = __salt__['cmd.run'](cmd, python_shell=True)
if len(dbm.hidden_layers) > 2: state_below = dbm.hidden_layers[-3].upward_state(H_hat[-3]) else: state_below = dbm.visible_layer.upward_state(V)
alpha = np.mean(emp_cov ** 2) num = alpha + mu ** 2 den = (n_samples + 1.) * (alpha - (mu ** 2) / n_features)
assert_true(id1, id2)
if '@' not in snapshot: ret['result'] = False ret['comment'] = 'invalid snapshot name: {0}'.format(snapshot)
self.processes = 0
np.random.seed(0) X = np.zeros((n_samples, 2)) step = 4. * np.pi / n_samples
import integration from salt.config import cloud_providers_config from salt.ext.six.moves import range
user: myuser password: mypassword url: https://api.cloud.xmission.com:4465/paci/v1.0/ driver: parallels
from __future__ import absolute_import import os import stat import logging
lkey, rkey = _get_join_keys(llab, rlab, shape, sort)
elif value["version"] >= 2: if "scheme" not in value: raise TypeError("UserPartition dict {0} missing value key 'scheme'".format(value))
self.blocks = self.obj._data.blocks ncols = sum(b.shape[0] for b in self.blocks) self.data = [None] * ncols
from __future__ import unicode_literals
result = ts[datetime(1990, 1, 1, 4)] expected = ts[4] self.assertEqual(result, expected)
from __future__ import absolute_import, print_function
for item in stat: stat[item] = 0 r_time = s_time
log.exception("Could not send notification email for initial verification for user %s", user.id)
resp = self.create_xblock(parent_usage_key=chap_usage_key, category='vertical') vert_usage_key = self.response_usage_key(resp)
response.render() pickled_response = pickle.dumps(response) unpickled_response = pickle.loads(pickled_response)
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
CourseEnrollmentFactory.create(user=self.user, course_id=self.course.id, is_active=True)
sparse_matrix_params = { "n_components": opts.n_components, "random_state": opts.random_seed, "density": opts.density, "eps": opts.eps, }
self.auth = salt.crypt.AsyncAuth(self.opts, io_loop=self._io_loop)
pygments_style = 'trac'
corr_rank = np.bincount(rank, minlength=n_ranks + 1).cumsum() rank = corr_rank[rank]
result = Categorical(['foo', 'bar', 'baz']) self.assertTrue(result.codes.dtype == 'int8')
result = {} for key, value in zip(self.binlabels, self.bins): if key is not tslib.NaT: result[key] = value return result
def f(): s.categories = [1, 2, 3, 4]
for device in devices: if pvdisplay(device): raise CommandExecutionError('Device "{0}" was not affected.'.format(device))
try: log.info("Course import %s: Upload complete", courselike_key) _save_request_status(request, courselike_string, 1)
survey.save_user_answers(self.student, self.student_answers_update, self.course_id)
sys.modules['cherrypy'].config = mock_decorator_with_params
student = UserFactory.create() CourseEnrollmentFactory.create(user=student, course_id=self.course.id) self.client.login(username=student.username, password="test")
inp = self.get_inputs() out = self.get_outputs() chmod = []
srs_type = 'epsg'
for probe_name in remove_probes_keys_set: remove_probes[probe_name] = configured_probes.pop(probe_name)
import_logs = CourseImportLog.objects.all() import_logs.delete()
import logging import subprocess import os
this_tar_file=tarfile.open(tar_filename,"r:bz2")
#
self.assertRaises(ValueError, index.truncate, 3, 1)
if not take_split_path and self.obj._data.blocks: blk, = self.obj._data.blocks
result = df.loc[:, (slice(None), ['foo'])] expected = df.iloc[:, [1, 3]] assert_frame_equal(result, expected)
image = __salt__['glance.image_show'](image['id'])
if s.index.inferred_type in ['categorical']: pass elif s.index.inferred_type in ['datetime64', 'timedelta64', 'period']:
if asset_collection.name in asset_collection.database.collection_names():
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON, mock_open
for mode in available_modes: CourseModeFactory.create( course_id=self.course_key, mode_display_name=mode, mode_slug=mode, )
types = [(MockDataFrame, MockDataFrame)] try: from pandas import Series, DataFrame types.append((DataFrame, Series)) except ImportError: pass
from_address = theming_helpers.get_value('default_from_email', settings.DEFAULT_FROM_EMAIL) to_address = user.email
response = self._regenerate( course_key=self.CERT_COURSE_KEY, username=self.STUDENT_USERNAME ) self.assertEqual(response.status_code, 200)
add_level_messages(storage) self.assertEqual(len(storage), 5)
overview_v10.version = 9 overview_v10.save()
import salt.thorium
rendered = "0.post.dev%%d" %% pieces["distance"]
from __future__ import absolute_import
resp = json.loads(self.call_event('export_resources', {}).content)
if settings == DEFAULT_SETTINGS: args.append('--skip-collect') call_task('pavelib.assets.update_assets', args=args)
self.check_children()
problem = self.build_problem(answer=u"\\\\", case_sensitive=False, regexp=True) self.assert_grade(problem, u"\\", "correct")
mark.save(using='other') self.assertEqual(mark._state.db, 'other')
self._validate_hyperparameters() if np.any(np.array(hidden_layer_sizes) <= 0): raise ValueError("hidden_layer_sizes must be > 0, got %s." % hidden_layer_sizes)
if not self.has_partial_credit: return self.grade_without_partial_credit(student_answers=student_answers)
with option_context('display.max_colwidth', 999999): objstr = obj.to_string(**kwargs)
monitoring_dataset = DenseDesignMatrix(X=X, y=Y)
p = Place.objects.get(name="Demon Dogs") self.assertIs(type(p), Place)
descending_grades = sorted(grade_cutoffs, key=lambda x: grade_cutoffs[x], reverse=True) for possible_grade in descending_grades: if percentage >= grade_cutoffs[possible_grade]: letter_grade = possible_grade break
Client:
HAS_PWD = False
_default_logging_level_ = 'info' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'minion')
grade_response = None
check_node(child.location, after_create, after_edit, editing_user, after_create, after_edit, editing_user)
import salt.ext.six as six if six.PY3: import ipaddress else: import salt.ext.ipaddress as ipaddress HAS_RANGE = False try:
hglib.init(rp_) new_remote = True
services = sorted(set(services))
import salt.ext.six as six try: import zmq except ImportError: pass
server_port = 4567 self.server_url = 'http://127.0.0.1:%d' % server_port
_base_supported_nodes = (_all_node_names - _unsupported_nodes) | _hacked_nodes _msg = 'cannot both support and not support {0}'.format(_unsupported_nodes & _base_supported_nodes) assert not _unsupported_nodes & _base_supported_nodes, _msg
s = Series(range(5), index=index)
answer_objs = SurveyAnswer.objects.filter( user=self.student, form=self.survey )
self.assertContains(response, '<h3 id="flatpages-get_flatpages">get_flatpages</h3>', html=True) self.assertContains(response, '<li><a href="#flatpages-get_flatpages">get_flatpages</a></li>', html=True)
raise NotImplementedError()
role = CourseCcxCoachRole(self.course.id) role.add_users(self.coach) self.request_factory = RequestFactory()
if __name__ == '__main__':
self.assertRaises(TypeError, lambda: rng / pd.NaT)
#local_dict={'lhs': lhs, 'rhs': rhs}, #import ipdb; ipdb.set_trace()
out = out + out.T
key = safe_key('key', 'prefix', 'a' * 300) self.assertTrue(self._is_valid_key(key))
self._check_non_staff_light(self.course) self._check_non_staff_dark(self.course) self._check_non_staff_light(self.test_course) self._check_non_staff_dark(self.test_course)
set_inventory_base_uri_default(__opts__, kwargs)
ORA2_FILE_PREFIX = ENV_TOKENS.get("ORA2_FILE_PREFIX", ORA2_FILE_PREFIX)
from salt.modules import locate
url = reverse('create_mode', args=[unicode(self.course.id)]) response = self.client.get(url)
resp = self.client.put( '/shoppingcart/payment_fake', data="failure", content_type='text/plain' ) self.assertEqual(resp.status_code, 200)
def t(*result): return '|'.join(datetimes[key].isoformat() for key in result)
data = { "form-TOTAL_FORMS": "4", "form-INITIAL_FORMS": "4", "form-MAX_NUM_FORMS": "0",
import salt.utils
print("Computing Spectral embedding") embedder = manifold.SpectralEmbedding(n_components=2, random_state=0, eigen_solver="arpack") t0 = time() X_se = embedder.fit_transform(X)
qs._prefetch_done = True obj._prefetched_objects_cache[cache_name] = qs
from __future__ import absolute_import import logging
prob /= prob.sum(axis=1).reshape((prob.shape[0], -1)) return prob
self._session_cache = {} self.accessed = True self.modified = True
return
if index is None: ix = np.arange(self._lines_read - read_lines, self._lines_read) data = data.set_index(ix)
self.courseware_page.visit() self.assertEqual(self.problem_page.problem_name, 'Test Problem 2')
ForestClassifier = FOREST_CLASSIFIERS[name]
html_static_path = ['_static']
import salt.utils import salt.utils.fsutils from salt.exceptions import CommandExecutionError from salt.exceptions import get_error_message as _get_error_message
rng = date_range('3/11/2012', '3/12/2012', freq='30T') self.assertRaises(NonExistentTimeError, rng.tz_localize, self.tz('US/Eastern'))
raise NotImplementedError()
constants = random_state.randn(5)
for k in xrange(n_samples, n_nodes): while True: edge = heappop(inertia) if used_node[edge.a] and used_node[edge.b]: break i = edge.a j = edge.b
import integration import salt.utils
schedule_keys = set(data.keys())
for row in db_query: row_loc = course_id.make_usage_key_from_deprecated_string(row['module_state_key']) if row_loc not in prob_grade_distrib: prob_grade_distrib[row_loc] = { 'max_grade': 0, 'grade_distrib': [], }
db_table = "Fixtures_regress_plant"
pred = km.fit_predict(X) assert_array_equal(pred, km.labels_)
if isinstance(f, models.ManyToManyField): initial[k] = initial[k].split(",")
__, encoded_from_addr = forbid_multi_line_headers('from', from_addr, 'utf-8')
from salttesting import skipIf from salttesting.helpers import ( ensure_in_syspath, destructiveTest) ensure_in_syspath('../../')
rng = np.random.RandomState([2012, 10, 9]) batch_size = 5 rows = 10 cols = 9 channels = 3 filter_rows = 4 filter_cols = filter_rows num_filters = 6
from __future__ import absolute_import
try: import sqlite3 HAS_SQLITE3 = True except ImportError: HAS_SQLITE3 = False
from __future__ import unicode_literals
s = Series(date_range('jan-01-2013', 'jan-05-2013'))
self.navigate_to_video()
(osfullname, _) = osinfo.Name.split('|', 1) osfullname = osfullname.strip()
res = grainsmod.filter_by(dict1, grain='xxx', merge=mdict1, default='Z') self.assertEqual(res, mdict1)
filtered = self.panel.to_frame() expected = self.panel.to_frame().dropna(how='any') assert_frame_equal(filtered, expected)
if parens is not None: left_parens = parens if left_parens == '{': left_parens = r'\{'
fn = getattr(model, '%s_data_specs' % self.method)
enum = None
User.objects.filter(username='test').update(is_active=False) self.assertFalse(check_password({}, 'test', 'test'))
man = salt.utils.which('man') if not man: return False
changing_email = False if "email" in update: changing_email = True new_email = update["email"] del update["email"]
except NotFoundError: log.exception("Module indicating to user that request doesn't exist") raise Http404
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
new_children.append(new_block_key)
cmd = 'grep "^LANG=" /etc/default/locale'
c = store.select_as_coordinates('df') assert((c.values == np.arange(len(df.index))).all())
category_msgs = msg_dict[category] for category_msg in category_msgs: msg.append(message_dict[(category, category_msg)])
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
import uuid SECRET_KEY = uuid.uuid4().hex
try: import ntsecuritycon import psutil import pywintypes import win32api import win32net import win32security HAS_WIN32 = True except ImportError: HAS_WIN32 = False
call_command("migrate", "migrations", "zero", verbosity=0)
from __future__ import absolute_import import os import sys import re import shutil import yaml from datetime import datetime import logging
if snapshot.childSnapshotList: ret = _get_snapshots(snapshot.childSnapshotList, current_snapshot, snapshot_path) if current_snapshot: return ret snapshots.update(ret)
self.assertRaises(ValueError, self.aapl.get_options_data, month=3) self.assertRaises(ValueError, self.aapl.get_options_data, year=1992)
student_module = StudentModule.objects.filter( course_id=self.course.id, student=self.student_user ) baseline = BaseStudentModuleHistory.get_history(student_module) self.assertEqual(len(baseline), 3)
from __future__ import absolute_import
if 0 in classes_k: class_prior_k[classes_k == 0] += zeros_samp_weight_sum
STUDIO_VIEW = 'studio_view'
course_display_name = self.advanced_settings.get('Course Display Name') self.advanced_settings.set('Course Display Name', 1) self.advanced_settings.wait_for_modal_load()
'master_use_pubkey_signature': bool,
if address_predefined: os.environ['DJANGO_LIVE_TEST_SERVER_ADDRESS'] = old_address else: del os.environ['DJANGO_LIVE_TEST_SERVER_ADDRESS']
component = self.store.create_child( self.user_id, test_course.location, 'vertical', )
s = Series(date_range('20010101', periods=10), name='dates') s_nat = s.copy(deep=True)
request.add_header('User-Agent', 'OpenAnything/1.0') html_content = opener.open(request).read() open(html_filename, 'wb').write(html_content)
if 'connection_default_file' in kwargs: get_opts = False else: get_opts = True
with self.assertRaises(Error):
result = str(thing).decode('utf-8', "replace")
if course_key is not None and mode_slug in CourseMode.VERIFIED_MODES: verification_models.VerificationDeadline.set_deadline(course_key, verification_deadline)
from __future__ import absolute_import
if not driver: raise GDALException('Could not initialize GDAL/OGR Driver on input: %s' % str(dr_input)) self.ptr = driver
if isinstance(obj, slice): return self._convert_slice_indexer(obj, axis)
clf = svm.SVC(kernel='rbf', gamma=1, decision_function_shape='ovo') clf.fit(X, Y)
'reactor_refresh_interval': int,
with self.assertRaises(forms.ValidationError): f.clean('13:30:05')
aapl = DataReader("AAPL", "google")
result = self.read_table(path, encoding='utf-16') self.assertEqual(len(result), 50)
if is_categorical_dtype(key): c = key
if user_profile.requires_parental_consent() and user_profile.has_profile_image: user_profile.profile_image_uploaded_at = None
self.assertIn('test.ping', funcs)
'ENABLE_TEAMS': True,
'statici18n',
try: import salt.utils.psutil_compat as psutil HAS_PSUTIL = True except ImportError: HAS_PSUTIL = False
from __future__ import absolute_import import os import random import string
from __future__ import absolute_import import logging import salt.ext.six as six
dt = Series(date_range('2012-1-1', periods=3, freq='D')) dt.iloc[2] = np.nan dt2 = dt[::-1]
grub_legacy.__salt__ = {}
log = logging.getLogger(__name__)
'ALLOW_AUTOMATED_SIGNUPS': False,
#pylint: disable=E0602
return state
import salt.utils.boto3 import salt.utils.compat import salt.utils from salt.exceptions import SaltInvocationError from salt.ext.six import string_types
from __future__ import unicode_literals
def test_complex_clash(self): class Target(models.Model): tgt_safe = models.CharField(max_length=10) clash = models.CharField(max_length=10) model = models.CharField(max_length=10)
unicode_text = "好 各位同学".decode('utf-8') self.assertTrue(self.video.downloaded_transcript_contains_text('srt', unicode_text))
if os.name == 'nt': socket.inet_pton = inet_pton socket.inet_ntop = inet_ntop
def count(self, val): "Standard list count method" count = 0 for i in self: if val == i: count += 1 return count
self.assertEqual(resp.status_code, 200)
iterator = SequentialSubsetIterator(10, 3, 3) for i in range(3): iterator.next()
from __future__ import absolute_import
self.assertEqual(k_args, tuple()) self.assertEqual( k_kwargs.get('url'), urlparse.urljoin(self.course.ccx_connector, ccxconapi.CCXCON_COURSEXS_URL) )
continue
'provider', 'provider.oauth2', 'edx_oauth2_provider',
if url is not None:
values = Series(['fooBAD__barBAD', NA, 'foo'])
M = M.T
it = TableIterator(self, s, func, where=where, nrows=s.nrows, start=start, stop=stop, iterator=iterator, chunksize=chunksize, auto_close=auto_close)
no_ids = [] self.reload_course() for textbook in self.course.pdf_textbooks: del textbook["id"] no_ids.append(textbook) self.assertEqual(no_ids, textbooks)
instance.file.delete() instance.delete()
new_mean_squared_grad = ( self.decay * mean_square_grad + (1 - self.decay) * T.sqr(grads[param]) )
from salt.states import boto_ec2
return Series(values, index=key_index, name=self.name)
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010 13:30:05")
options.ignore = ('',) if options.select else tuple(options.ignore)
try:
del_cached_content(thumbnail_location) if thumbnail_content is not None: content.thumbnail_location = thumbnail_location
return [list_like]
self.assertTrue(np.isnan(self.ts[::2].corr(self.ts[1::2])))
return (load, (filename, self._mmap_mode))
import salt.utils
raise NotImplementedError
uncertainty_index = np.argsort(pred_entropies)[-10:]
self.assertIn(SESSION_KEY, self.client.session)
'description',
startup.enable_microsites() directories = LOOKUP['main'].directories self.assertEqual(len([directory for directory in directories if 'external_module' in directory]), 1)
if getitem and isinstance(s, DataFrame): error = KeyError else: error = TypeError self.assertRaises(error, f)
if guid is None: return 'No GUID Specified'
create_single_mgr('sparse_na', N),
if exc.errno != errno.EEXIST: raise else: ret['comment'] = 'File {0} exists and cannot be overwritten'.format(name)
self._auto_auth(self.USERNAME, self.EMAIL, False)
parents = block_structure.get_parents(block_key) min_all_parents_start_date = min( cls.get_merged_start_date(block_structure, parent_key) for parent_key in parents ) if parents else None
model.fit(X_scaled, y) assert_true(np.isfinite(model.coef_).all())
return dec(func)
import os import re import sys import stat import errno import socket import logging
major_axis = SparsePanelAxis('_major_axis', 'index')
self.assertIn(d['country_name'], ('Curaçao', 'Curacao'))
_ = lambda text: text
assert_frame_equal(ix[:, :2], f.reindex(columns=['A', 'B']))
X_inf = np.arange(4).reshape(2, 2).astype(np.float) X_inf[0, 0] = np.inf assert_raises(ValueError, check_array, X_inf)
'CMS_SEGMENT_KEY': None,
url(r'^get_students_opened_subsection$', 'class_dashboard.dashboard_data.get_students_opened_subsection', name="get_students_opened_subsection"),
self.track_selection_page.visit()
sorter = uniques.argsort()
self.assertNotIn('course', course_xml.attrib) self.assertNotIn('org', course_xml.attrib)
elif isinstance(index, string_types): return [index] elif isinstance(index, list): return index else: return None
from __future__ import absolute_import
X = check_array(X, accept_sparse=('csr', 'csc'), copy=False, ensure_2d=False, dtype=FLOAT_DTYPES) original_ndim = X.ndim
top_idx = set(component.argsort()[-3:][::-1]) assert_true(tuple(sorted(top_idx)) in correct_idx_grps)
import logging
tm._skip_if_no_scipy() result = df.interpolate(axis=1, method='values') assert_frame_equal(result, expected)
ret['Comment'] = "Failed with failure code: {0}".format(exc[5]) ret['Success'] = False
self.testing_course.enrollment_start = self.tomorrow self.testing_course.enrollment_end = self.nextday self.testing_course = self.update_course(self.testing_course, self.user.id)
try:
self.master_opts['file_roots']['base'] = [os.path.join(integration.FILES, 'file', 'base')]
result = np.repeat(np.array([self._na_value] * len(qs)), len(values)).reshape(len(values), len(qs))
X, y = iris.data, iris.target base = DecisionTreeClassifier()
warnings.warn("localedirs is ignored when domain is 'django'.", RuntimeWarning) localedirs = None
question_element = rendered_html.find("p") self.assertEqual(question_element.text, "Test question")
sparse_results = sparse_classifier.staged_predict_proba(X_test_sparse) dense_results = dense_classifier.staged_predict_proba(X_test) for sprase_res, dense_res in zip(sparse_results, dense_results): assert_array_equal(sprase_res, dense_res)
world.wait(1) continue
if issubclass(subarr.dtype.type, compat.string_types): subarr = np.array(data, dtype=object, copy=copy)
ping = Grouping(group_axis, gpr, obj=obj, name=name, level=level, sort=sort, in_axis=in_axis) \ if not isinstance(gpr, Grouping) else gpr
self.tag_map[tag].append(future) self.request_map[request].append((tag, future))
try: v1 = arg_val_dict[key] v2 = compat_args[key]
log.info('Spot instance status: {0}'.format( data[0]['status']['message'] )) return None
if not pending_models: return []
(status, ring, pending, node) = line.split()
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
coach_user = UserFactory( username='test_coach_user', email='test_coach_user@openedx.org', password='test' ) CourseCcxCoachRole(self.master_course_key).add_users(coach_user)
import salt.modules.cmdmod
self._test_email_address_failures(SESIllegalAddressError(554, "Email address is illegal"))
with self.assertRaises(ValueError): InvalidModelForm()
import salt.utils from salt.ext.six import string_types
assert_roundtrip("12345678901234561234567890123456123456789012345601") assert_roundtrip("")
self._result_cache = None return deleted, _rows_count
import re import logging
'module_dirs': list,
SQUEEZE_DEFAULTS = dict(axis=None) validate_squeeze = CompatValidator(SQUEEZE_DEFAULTS, fname='squeeze', method='kwargs')
sys.path.insert(1, dirname(dirname(abspath(__file__))))
from __future__ import absolute_import, print_function import datetime import copy import textwrap import difflib import logging import tempfile import os import pipes import time import shutil import re import random
JINJA = jinja2.Environment( loader=jinja2.FileSystemLoader( os.path.join(salt.utils.templates.TEMPLATE_DIRNAME, 'virt') ) )
return None
if self.s.is_table: if nrows is None: nrows = 0 if start is None: start = 0 if stop is None: stop = nrows stop = min(nrows, stop)
result = df.get_dtype_counts().sort_values() expected = Series({'datetime64[ns]': 3})
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch
if not has_course_author_access(request.user, course_key): return HttpResponse(status=403)
url( r'^courses/{}/survey$'.format( settings.COURSE_ID_PATTERN, ), 'courseware.views.views.course_survey', name='course_survey', ),
self.selenium.find_element_by_css_selector('#id_user option[value=newuser]')
kwargs = {} if cls.grading_policy is not None: kwargs['grading_policy'] = cls.grading_policy cls.course = CourseFactory.create(**kwargs)
_default_logging_level_ = 'warning' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'master') _loglevel_config_setting_name_ = 'cli_salt_cp_log_file'
offset1 = Week() offset2 = Week() self.assertFalse(offset1 != offset2)
actual = grouped_ser.filter(lambda x: len(x) > 1) expected = ser.take(expected_indexes) assert_series_equal(actual, expected)
for k, v in self.headers.items(): if '_' in k: del self.headers[k]
x = DataFrame() x.join(DataFrame([3], index=[0], columns=['A']), how='outer')
all_unittests_suite = suites.TestSuite('All Tests', subsuites=[js_suite, python_suite]) all_unittests_suite.run()
math_interpreter = ParseAugmenter(math_expr, case_sensitive) math_interpreter.parse_algebra()
self.set_logged_in_cookies(request)
value_rows = [[self.connection.ops.pk_default_value()] for _ in self.query.objs] fields = [None]
sock.shutdown(socket.SHUT_RDWR) sock.close() break
ts = Series(np.random.randn(10)) ts[2:-2] = nan sts = ts.to_sparse()
if iface_type not in ['slave', 'source']: return __salt__['cmd.run'](['ifdown', iface]) return None
return priv
from course_wiki.plugins.markdownedx.wiki_plugin import ExtendMarkdownPlugin
if name not in list_folders(location): return '{0} not found in {1}'.format(name, location)
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, NO_MOCK, NO_MOCK_REASON, patch ) from salttesting.helpers import ensure_in_syspath
if not sqltype.timezone: return datetime return DatetimeTZDtype
content_store.set_attr(self.LOCKED_ASSET_KEY, 'locked', True)
from __future__ import absolute_import import logging import os import pprint import time
try: val = self.verify_geom(feat.geom, model_field) except GDALException: raise LayerMapError('Could not retrieve geometry from feature.')
self.cart.purchase() resp = self.client.get(instructor_dashboard) self.assertEqual(resp.status_code, 200)
pass
TEST_RUNNER = 'openedx.core.djangolib.nose.NoseTestSuiteRunner'
def reset_queries(**kwargs): for conn in connections.all(): conn.queries_log.clear() signals.request_started.connect(reset_queries)
for fdpath in fd_: try: name = os.path.realpath(fdpath) os.stat(name) except OSError: continue
Pickler.save(self, _ConsistentSet(set_items))
default=models.IntegerField,
names = self._maybe_dedup_names(self.orig_names) return _get_empty_meta(names, self.index_col, self.index_names)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self.assertEqual(result['contents'], 'Test HTML')
still_in_grace = CapaFactory.create(showanswer='finished', max_attempts="1", attempts="1", due=self.yesterday_str, graceperiod=self.two_day_delta_str) self.assertTrue(still_in_grace.answer_available())
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import salt.utils
pass
self.config.pop('log_datefmt_logfile', None)
ret = self.run_script( 'salt-call', '-c {0} --output-file={1} test.versions'.format( self.get_config_dir(), output_file_append ), catch_stderr=True, with_retcode=True )
from __future__ import absolute_import
if 'selinux' in ks_opts.keys(): for mode in ks_opts['selinux']: sls[mode] = {'selinux': ['mode']}
from __future__ import absolute_import
required_keys = ['provider'] alias, driver = provider.split(':')
self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p()
nbrs_X = neighbors.NearestNeighbors(n_neighbors=3) nbrs_X.fit(X) dist_X, ind_X = getattr(nbrs_X, method)(Y)
import logging
stack_k = stack[k] stack[k] = _cleanup(v) v = stack_k
X2 = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 3)
def load_newobj_ex(self): kwargs = self.stack.pop() args = self.stack.pop() cls = self.stack.pop()
COURSE_ENROLLMENT_CACHE_KEY = u"enrollment.{}.{}.mode"
self.frame['E'] = 7. self.frame.values[6] = 6 self.assertTrue((self.frame.values[6] == 6).all())
queryset = changelist.get_queryset(request) self.assertEqual(queryset.count(), 1) self.assertEqual(queryset[0], self.bio_book)
s1['test_data'] = 'value2' with self.assertRaises(UpdateError): s1.save()
import salt.utils.cloud
return True
return
from __future__ import absolute_import
GDAL_INTEGER_TYPES = [1, 2, 3, 4, 5]
status = None
rs = ser.replace({np.nan: -1, 'foo': -2, 'bar': -3})
self.verify_lists_expected_cohorts([])
mac_sysctl.__salt__ = {}
c_mapping = DataSpecsMapping(channel.data_specs) channel_inputs = c_mapping.flatten(channel.graph_input, return_tuple=True) inputs = c_mapping.flatten(nested_theano_args[i + 1], return_tuple=True)
p = self.round_trip_pickle(NaT) self.assertTrue(p is NaT)
check_sources(b'\xc3\x85ngstr\xc3\xb6m', ['/dir1/Ångström', '/dir2/Ångström']) check_sources('Ångström', ['/dir1/Ångström', '/dir2/Ångström'])
self.assertEqual(sanitize_separators(123), 123)
known_user = 'knownuser' known_user2 = 'knownuser2'
if type(self) == DateOffset or isinstance(self, Tick): return True
GlobalStaff().add_users(self.user) self.assertTrue(GlobalStaff().has_user(self.user))
log.warning('Unable to find group named %s for Zendesk ticket with ID %s.', group_name, ticket_id)
import salt import salt.auth import salt.utils.event
must_be_first = False child_nodelists = ('nodelist',) token = None
self.q(css="button.js-reset").click()
from salt.config.schemas import ssh as ssh_schemas from salt.config.schemas.minion import MinionConfiguration
if fit_intercept: grad[-2] = -2. * np.sum(weighted_non_outliers) / sigma grad[-2] -= 2. * epsilon * np.sum(sw_outliers)
if int(sec_event % 30) == 0: cw = CacheWorker(self.opts) cw.start()
from salttesting.helpers import ensure_in_syspath, destructiveTest from salt.ext.six.moves import range ensure_in_syspath('../../')
add_user_with_status_granted(self.admin, self.user) self.assertEqual('unrequested', get_course_creator_status(self.user))
self.assertEqual( re.findall(r'order by (\w+)', qstr), [', '.join(f[1][0] for f in forced_ordering).lower()] )
response = self.client.get('/permission_protected_method_view/') self.assertRedirects(response, '/accounts/login/?next=/permission_protected_method_view/')
self._check_align(left, empty, axis=ax, fill_axis=fax, how=kind, method=meth) self._check_align(left, empty, axis=ax, fill_axis=fax, how=kind, method=meth, limit=1)
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True], credit_type='edc' )
self.assertTrue(self._has_changes(locations['grandparent'])) self.assertTrue(self._has_changes(locations['parent']))
return
self.foundCategories = _gather_update_categories(self.download_collection) log.debug('found categories: {0}'.format(str(self.foundCategories))) return True
response = self.client.post(reverse('donation')) self.assertEqual(response.status_code, 404)
dr.hour
self.org = org self.course_id = course_id self.run = run self.language = None
second_config.edit() second_config.name = "Updated Second Content Group" self.assertEqual(second_config.get_text('.action-primary'), "Save") second_config.save()
cp.readfp(StringIO.StringIO(stream_or_string))
from salt.exceptions import SaltInvocationError import salt.utils.http
MULTI = 'multi' SINGLE = 'single' CURSOR = 'cursor' NO_RESULTS = 'no results'
response = self.client.get(self.url, params)
affinity[0, n_sample + 1] = 1 affinity[n_sample + 1, 0] = 1 affinity.flat[::2 * n_sample + 1] = 0 affinity = 0.5 * (affinity + affinity.T)
return _client().cache_local_file(path)
'ENABLE_TEAMS': True,
if len(labels & ser.index): ser = ser.reindex(labels) else: broadcast.append((n, len(labels)))
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
return False
from openedx.core.djangoapps.credit import api
from __future__ import unicode_literals
course2.certificates_display_behavior = 'early_no_info' cert_status = {'status': 'unavailable'} self.assertEqual(_cert_info(user, course2, cert_status, course_mode), {})
from salt.modules import win_path
import integration
X = make_low_rank_matrix(n_samples=n_samples, n_features=n_features, effective_rank=effective_rank, tail_strength=tail_strength, random_state=generator)
datasetCache = cache.datasetCache im_path = datasetCache.cache_file(im_path)
retcode = 1
self.assertFalse(form.is_valid())
with self.assertNumQueries(0): self.assertRaises(KeyError, self.kvs.get, user_state_key('not_a_field'))
'openedx.core.djangoapps.coursetalk',
info = prlctl('snapshot-list', name, runas=runas)
self.value = {}
self.person = Person.objects.create(name='Reinhardt')
log.error('Lane Router Received message without share: {0}'.format(msg)) return
cache.set(cache_key, [], cache_timeout) return _generate_cache_key(request, request.method, [], key_prefix)
self.assertEqual(params['signature'], self._signature(params))
self.assertEqual(p.centroid, pnt.centroid.tuple)
import logging import socket import json from distutils.version import LooseVersion
grains['os_family'] = _OS_FAMILY_MAP.get(grains['os'], grains['os'])
auth_minion: myminion config_profile: my_openstack_profile
get_service_certificate = show_service_certificate
from salt.exceptions import CommandExecutionError
GRAINS_CACHE = {} DETAILS = {}
if is_verified: self.assertTrue(CourseMode.is_verified_slug(mode_slug)) else: self.assertFalse(CourseMode.is_verified_slug(mode_slug))
request.session = {} gradeset = grade(student, request, course, keep_raw_scores) yield student, gradeset, ""
self.user = UserFactory(password=self.password, is_staff=True) self.client.login(username=self.user.username, password=self.password)
clf = MockClassifier() grid_search = GridSearchCV(clf, {'foo_param': [1, 2, 3]}, refit=True) grid_search.fit(X, y)
from __future__ import unicode_literals
from __future__ import absolute_import
if 'data' not in adapters[iface_name]: adapters[iface_name]['data'] = salt.utils.odict.OrderedDict()
self.__restore_sysctl()
rs = com._random_state(random_state)
K1 = pairwise_kernels(X, Y=X, metric=metric, **kwds) K2 = rbf_kernel(X, Y=X, **kwds) assert_array_almost_equal(K1, K2)
unique_rank, inv_rank = np.unique(y_score[i], return_inverse=True) n_ranks = unique_rank.size rank = n_ranks - inv_rank
self._tilesize = tilesize
scsi_spec.device.sharedBus = vim.vm.device.VirtualSCSIController.Sharing.virtualSharing
self._handle_usecols([names], names) columns = [names] num_original_columns = ncols
left = self.rng[:5] right = self.rng[10:]
if sample_weight is None: break
y_true, y_pred, _ = make_prediction(binary=True)
assert_raises( AssertionError, monitor.update_channels, ['train_objective'], start=2, end=1 )
HAS_LIBS = True try:
from salt.states import boto_lc
subplot.format_coord = lambda t, y: ( "t = {0} y = {1:8f}".format(Period(ordinal=int(t), freq=freq), y))
__func_alias__ = { 'list_vms': 'list' }
if __grains__['os'] in ['Windows']: changes_needed = False current_settings = __salt__['proxy.get_proxy_win']() current_domains = __salt__['proxy.get_proxy_bypass']()
layers = model.get_all_layers() states = [final_state['V_hat']] + final_state['H_hat']
self.assertEqual(str(lyr[0]['str']), "1")
returned = UserManager.normalize_email(r'Abc\@DEF@EXAMPLE.com') self.assertEqual(returned, r'Abc\@DEF@example.com')
FEATURES['ENABLE_DISCUSSION_SERVICE'] = False
import salt.ext.six as six
values = tslib.cast_to_nanoseconds(values)
log = logging.getLogger(__name__)
from __future__ import absolute_import import re import os import logging import tarfile from contextlib import closing
db_table = 'django_comment_client_role'
def cummin(x): return np.minimum.accumulate(x)
from pandas import date_range s = Series(date_range('20130102', periods=6)) result = s.idxmin() self.assertEqual(result, 0)
if self.name == "edx.video.seeked": self['name'] = "edx.video.position.changed"
if order_field.startswith('-') and pfx == "-": ordering.append(order_field[1:]) else: ordering.append(pfx + order_field)
unicode_text = "好 各位同学".decode('utf-8') self.assertIn(unicode_text, self.video.captions_text)
for line in fieldset: for field in line: count += 1
'ALWAYS_REDIRECT_HOMEPAGE_TO_DASHBOARD_FOR_AUTHENTICATED_USER': True,
courses_list = list(get_course_enrollments(self.student, None, [])) self.assertEqual(len(courses_list), 1) self.assertEqual(courses_list[0].course_id, course_location)
if self.cache_cli: self.cache_cli.put_cache([load['id']])
if prerequisite_course_keys: for prerequisite_course_key_string in prerequisite_course_keys: prerequisite_course_key = CourseKey.from_string(prerequisite_course_key_string) add_prerequisite_course(course_key, prerequisite_course_key)
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
t3 = TfidfTransformer(use_idf=True) assert_raises(ValueError, t3.transform, counts_train)
connected_minions = None return_count = 0
signal.signal(signal.SIGINT, prev_sigint_handler) signal.signal(signal.SIGTERM, prev_sigterm_handler)
all_assets[asset_idx] = mdata.to_storable() return all_assets
result = df.reorder_levels(['L0', 'L1', 'L2']) assert_frame_equal(df, result)
role.add_users(self.student) role.remove_users(self.student) self.assertFalse(role.has_user(self.student))
return 'MATCH (%s) AGAINST (%%s IN BOOLEAN MODE)' % field_name
self.courseware.go_to_sequential_position(2)
if isinstance(config_data, dict): append_dict_profile_to_interface_list(config_data)
task_progress.failed += 1 err_rows.append([student.id, student.username, err_msg])
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
response = self._response() self.assertFalse(response.is_rendered) response.render() self.assertTrue(response.is_rendered)
clamped_val = clamp * initial
from __future__ import absolute_import import logging import os import re
update_creator_state = Signal(providing_args=["caller", "user", "state"])
return {'shell': os.environ.get('SHELL', '/bin/sh')}
values = set(values.split(',')) if values else set()
if "face_image" not in params: msg = _("Missing required parameter face_image") return None, HttpResponseBadRequest(msg)
from __future__ import absolute_import
self.assertFalse(self._is_location_published(self.problem_usage_key))
When(integer=1, then=Value(time(1), output_field=models.TimeField())), When(integer=2, then=Value(time(2), output_field=models.TimeField())),
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
@property def area(self): "Returns the area of the Geometry." return capi.geos_area(self.ptr, byref(c_double()))
FOOTER_OPENEDX_URL = "http://open.edx.org"
resp = self._change_enrollment('unenroll') self.assertEqual(resp.status_code, 400)
_config_filename_ = 'cloud'
self.assertEquals(self.middleware.process_request(self.request), None)
from __future__ import print_function
from __future__ import unicode_literals
dropped_minions = set(curr_minions) - set(minions_detected)
db = options['database'] connection = connections[db]
key = hashlib.sha1(key_salt + secret).digest()
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.john])
index._cleanup()
self.edit_info = EditInfo(**block_data.get('edit_info', {}))
clf = GradientBoostingClassifier(n_estimators=10, random_state=1) clf.fit(X, y)
output_base = output_base.replace('.', '-')
self.assertFalse(u.has_usable_password())
for name, TreeEstimator in CLF_TREES.items(): est = TreeEstimator() assert_raises(NotFittedError, est.predict_proba, X)
n_samples = X_diabetes.shape[0]
result = to_datetime(df[['year', 'month', 'day']].to_dict()) assert_series_equal(result, expected)
import salt.utils from salt.exceptions import SaltInvocationError
y_true = rng.randint(0, 3, size=10) assert_raise_message(ValueError, "multiclass format is not supported", average_precision_score, y_true, y_pred)
sample_ids = [0, 1] common_nodes = (node_indicator.toarray()[sample_ids].sum(axis=0) == len(sample_ids))
n_features = 501 n_relevant_features = 3 noise_level = .2 coef_min = .2 n_samples = 25 block_size = n_relevant_features
self.assertEqual(len(formset.forms), 3) self.assertFalse(formset.is_valid())
DEFAULT_TIMEOUT = object()
for k2, v2 in v: if value == k2 or text_value == force_text(k2): return True
ret['comment'] = 'Database {0} is already present, so cannot be created'\ .format(name) return ret
FavoriteDrinksFormSet = formset_factory(FavoriteDrinkForm, formset=BaseFavoriteDrinksFormSet, extra=3)
prepr = '[%s]' % ','.join(map(pprint_thing, self)) return '%s(%s)' % (self.__class__.__name__, prepr)
for partition_id, group_id in user_partition_groups.iteritems(): user_partition_groups[partition_id] = self.groups[group_id - 1]
f_ordered = new_values.flags.f_contiguous if f_ordered: new_values = new_values.T axis = new_values.ndim - axis - 1
df.pivot_table(index=[u('clé1')], columns=[u('clé2')])._repr_html_()
pass
for i in range(9): i += 13 registration_code_redemption = RegistrationCodeRedemption( registration_code_id=i, redeemed_by=self.instructor ) registration_code_redemption.save()
ix = date_range('1/1/2000', '1/1/2001', freq='M') tdf = DataFrame(d, index=ix) tdf_err = DataFrame(d_err, index=ix)
if not os.path.isdir(sourcepath): _LOG.error('Path is not present: %s', sourcepath) return False
with open(Env.METRICS_DIR / "pylint", "w") as f: f.write(violations_count_str)
self.map_template = kwargs.pop('map_template', 'gis/google/google-single.js')
import salt.utils from salt.exceptions import CommandExecutionError try: import salt.utils.pycrypto HAS_CRYPT = True except ImportError: HAS_CRYPT = False
result = get_result(arr, 20, min_periods=15) self.assertTrue(np.isnan(result[23])) self.assertFalse(np.isnan(result[24]))
values = Series([u('a'), u('b'), NA, u('c'), NA, u('d')])
if isinstance(self.index, RangeIndex): return
team.add_user(self.user)
_, res = SendMessageTimeout(HWND_BROADCAST, WM_SETTINGCHANGE, 0, 0, SMTO_ABORTIFHUNG, 5000) return not bool(res)
dummy = DataFrame(index=self._y.index) dummy['y'] = 1
rs = np.random.RandomState(1999) n_samples = 20 n_features = 10 X = rs.randn(n_samples, n_features)
self.assertIn(settings.EDXMKTG_LOGGED_IN_COOKIE_NAME, self.client.cookies) self.assertIn(settings.EDXMKTG_USER_INFO_COOKIE_NAME, self.client.cookies)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
result = df.iloc[0, 0] self.assertTrue(isnull(result))
ret = _default_runlevel()
xmpp.__salt__ = {} xmpp.__opts__ = {}
'CUSTOM_COURSE_URLS': False
target = [-1] * len(JUNK_FOOD_DOCS) + [1] * len(NOTJUNK_FOOD_DOCS)
multioutput = None
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
refund_cutoff_date = self.refund_cutoff_date() if refund_cutoff_date and datetime.now(UTC) > refund_cutoff_date: return False
pred = mb_k_means.predict(mb_k_means.cluster_centers_) assert_array_equal(pred, np.arange(n_clusters))
CourseModeFactory.create(course_id=self.COURSE_KEY, mode_slug=CourseMode.HONOR) with self._mock_xqueue() as mock_queue: certs_api.generate_example_certificates(self.COURSE_KEY)
xs = self.panel.minor_xs(self.panel.minor_axis[0]) result = func(xs, axis='minor')
self.q(css='button.signatory-panel-save').click() self.mode = 'details' self.wait_for_ajax() self.wait_for_signatory_detail_view()
self.assertAcceptEquals( 'rel;q=1.0, rel;q=0.5', self.process_request(accept='rel-ter;q=1.0, rel;q=0.5') )
try: salt.utils.gitfs.GitPillar(__opts__) return __virtualname__ except FileserverConfigError: pass
def __enter__(self): return self
wide_means = self.panel.to_panel().mean('major') assert_frame_equal(means, wide_means)
owner['user'] = 'SYSTEM' owner['user_domain'] = 'NT AUTHORITY'
from salt.states import grafana_datasource
master_doc = 'index'
figure.subplots_adjust(bottom=0.05)
import salt.ext.six as six from salt.ext.six.moves import range
DATE_INPUT_FORMATS = [
assert_equal(sample_without_replacement(5, 0).shape, (0, )) assert_equal(sample_without_replacement(5, 1).shape, (1, ))
X, y = datasets.make_friedman3(n_samples=1200, random_state=random_state) X_train, y_train = X[:200], y[:200] X_test, y_test = X[200:], y[200:]
termination_criterion = EpochCounter(5)
assert_true(init_param.default is None) continue
orig = pd.Series([1, 2, 3, 4], dtype=np.int64) sparse = orig.to_sparse()
sys.exit(3)
old_roles.add(role)
try: self._spawn()
from __future__ import unicode_literals
ignore_cidr: 192.168.50.0/24
'openedx.core.djangoapps.user_api.middleware.UserTagsEventContextMiddleware',
from __future__ import unicode_literals
from __future__ import unicode_literals
pythoncom.CoInitialize()
"form-2-id": str(fd3.id), "form-2-reference": "789", "form-2-driver": "bill", "form-2-restaurant": "thai",
with ensure_clean_store(self.path) as store:
self.f_ = lambda x: y.repeat(x.shape)
qry = 'REPAIR TABLE {0}.{1}'.format(s_name, s_table) _execute(cur, qry) results = cur.fetchall() log.debug(results) return results
from __future__ import unicode_literals
else: cat = self.grouper.unique() self.grouper = self.grouper.reorder_categories( cat.categories)
num_queries = 1
if self.multi_class == 'multinomial': scores = multi_scores coefs_paths = multi_coefs_paths
def __singleton_init__(self, opts, **kwargs): self.opts = dict(opts)
raise ValueError('Bad rule name requested: %s.' % name)
tag = self.runtime.service(self.mock_block, 'user_tags').get_tag(self.scope, self.key) self.assertIsNone(tag)
Language = namedtuple('Language', 'code name')
res_col = df.ix[:, "cats"] tm.assert_series_equal(res_col, exp_col) self.assertTrue(com.is_categorical_dtype(res_col))
module = CapaFactory.create(done=False)
foo = df['z']
ridge.fit(X, y, sample_weight=np.ones(n_samples)) assert_greater(ridge.score(X, y), 0.47)
if not bool(role): log.info( '{0} \'{1}\' could not be found'.format(typ_.capitalize(), name) ) return False
cert_type=server type_ext=True
self.wait_for_element_visibility(ccx_name_selector, 'CCX name field is visible') self.q(css=ccx_name_selector).fill(ccx_name)
from __future__ import print_function
with self.assertRaises(SearchIndexingError): reindex_course_and_check_access(self.course.id, self.user)
multi_db = True
world.clear_courses()
for l in [slice(3.0, 4), slice(3, 4.0), slice(3.0, 4.0)]:
"migrations_project", "migrations_task", "migrations_project_tasks", "migrations_task_projects",
__func_alias__ = { 'set_': 'set' }
cohort.name = "NewName" cohort.save() self.assertFalse(mock_tracker.called)
from salt.modules import hipchat
self.refresh_course()
if salt.utils.is_true(kwargs.get('refresh', True)): refresh_db(saltenv)
X = np.ones((5, 10))
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
pass
self.notes_page.wait_for_ajax() note = self.notes_page.notes[0] assert_page(note, self.raw_note_list[2]['usage_id'], "Tags")
bandwidth = 1.2
xml = ''.join(line.strip() for line in xml.split('\n')) factory = self.capa_factory_for_problem_xml(xml) module = factory.create()
filter_sequence_ui_event = lambda event: event.get('name', '').startswith('edx.ui.lms.sequence.')
self.assertIsNone(response.data[field_name])
from salt.modules.tomcat import _extract_war_version
assert_equal(sys.modules['warnings'].filters, [])
Attribute('mode', 'python'), Attribute('linenumbers', 'true'), Attribute('tabsize', 4, transform=int),
UID_FIELD = "id"
if self.is_open: self.close()
'keep_jobs': int,
if values.dtype == 'M8[us]': values = values.astype('M8[ns]') return make_block(values, placement=mgr_locs)
def __setstate__(self, state): self._is_child = True self.__init__(state['hopts'], log_queue=state['log_queue'])
self.book = Workbook() if self.book.worksheets: self.book.remove_sheet(self.book.worksheets[0])
self.assertTrue(self.video.select_language('zh'))
from __future__ import absolute_import
monitoring_dataset = DenseDesignMatrix(X=X)
msg_format += _(" (skipping {skipped})")
frame_ctor_list_of_dict = Benchmark("DataFrame(dict_list)", setup, start_date=datetime(2011, 12, 20))
repr(df)
log.debug("No refund opened for user [%s], course [%s]", unenrolled_user.id, course_key_str)
graded = False
for op in ['__eq__', '__le__', '__ge__']: v1 = getattr(o, op)(o) self.check_metadata(o, v1)
try: CourseUserGroup.objects.get(id=group_id) kwargs['group_id'] = group_id except CourseUserGroup.DoesNotExist: pass
p = Parent.objects.get(name="Parent") self.assertIsNone(p.bestchild)
if self.scope_ids.user_id is not None and user_id == self.scope_ids.user_id: if getattr(xmodule_runtime, 'position', None):
for key in self.colors: self.colors[key] = ''
if settings.FEATURES.get('ENABLE_THIRD_PARTY_AUTH', False): enable_third_party_auth()
for n_samples, n_features in ((6, 5), ):
from __future__ import absolute_import
self.assertNotEqual(httpretty.last_request().headers, {})
if getattr(response, 'xframe_options_exempt', False): return response
self.panel4d['lP'] = self.panel4d['l1'] > 0 self.assertEqual(self.panel4d['lP'].values.dtype, np.bool_)
if self.ndim == 1: blocks = np.array([], dtype=self.array_dtype) else: blocks = [] return self.__class__(blocks, axes)
from salt.utils import dictdiffer from salt.exceptions import CommandExecutionError
test_discussion = self.store.create_child(self.user.id, course.location, 'discussion', 'test_discussion')
other = Int64Index(np.arange(25, 14, -1))
if sp.issparse(predictions[0]): predictions = sp.vstack(predictions, format=predictions[0].format) else: predictions = np.concatenate(predictions) return predictions[inv_test_indices]
unlink_cohort_partition_group( test_cohort, ) self.assert_student_in_group(None)
self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS, PayAndVerifyView.PAYMENT_CONFIRMATION_STEP, )
self.assertEqual( len(Author.objects.annotate(Avg('friends__age')).values()), 9 )
ieee1 &= 0xffefffff
self.assertEqual(html, "<div>Test Template HTML</div>")
configured_probes = rpm_probes_config.get('out', {}) if not isinstance(defaults, dict): defaults = {} expected_probes = _expand_probes(probes, defaults)
test_options.pop(0) if len(test_options) <= 1: break
value = sp.sparse.linalg.svds(A, k=1, return_singular_vectors=False)
@property def size(self): "Returns the size of this coordinate sequence." return capi.cs_getsize(self.ptr, byref(c_uint()))
from salt.output import nested nested.__opts__ = {} ret = nested.output(obj).rstrip() return ret
if os.path.isfile(rtag) and refresh: os.remove(rtag)
__func_alias__ = { 'list_': 'list' }
self.assertNotEqual( self.live_server_url, TestCase.live_server_url, "Acquired duplicate server addresses for server threads: %s" % self.live_server_url )
rng = check_random_state(0) n_features = 5 n_samples = 50 n_output = 3
all_answers = survey.get_answers(limit_num_users=1) self.assertEquals(len(all_answers.keys()), 1)
s3.query( key=key, keyid=keyid, kms_keyid=keyid, bucket=bucket_name, service_url=service_url, verify_ssl=verify_ssl, location=location, path=_quote(path), local_file=cached_file_path )
if packages is not None: args.append('--packages {pkgs}'.format(pkgs=packages)) if not _check_cygwin_installed(cyg_arch): _run_silent_cygwin(cyg_arch=cyg_arch)
return False
if mod_key not in functions: continue
import warnings
if hasattr(self, 'has_targeted'): return
arrays = []
opts.log_file = os.path.join(opts.artifact_dir, 'salt-buildpackage.log')
CELERY_ALWAYS_EAGER = True
AutoAuthPage(self.browser, course_id=self.course_id).visit()
'sock_dir': str,
try: WINAPI = True import win32serviceutil except ImportError: WINAPI = False
rng = date_range('3/11/2012', '3/12/2012', freq='30T') self.assertRaises(NonExistentTimeError, rng.tz_localize, self.tzstr('US/Eastern'))
_get_file_from_s3(metadata, saltenv, bucket, file_path, cached_file_path)
course_url = get_url('course_handler', destination_course_key, 'course_key_string') response = self.client.ajax_post(course_url, rerun_course_data)
else: try: func = self.admin_site.get_action(action) except KeyError: return None
return self._end_apply_index(i, self.freqstr)
self.addCleanup(self._mock_paver_needs.stop) self.addCleanup(os.remove, self.f.name)
try: from django.conf import settings lib_path = settings.GEOS_LIBRARY_PATH except (AttributeError, EnvironmentError, ImportError, ImproperlyConfigured): lib_path = None
check(rng.days) check(rng.seconds) check(rng.microseconds) check(rng.nanoseconds)
if isinstance(n, slice): return self.__class__(super(FrozenList, self).__getitem__(n)) return super(FrozenList, self).__getitem__(n)
response_file = response_obj["files"][i] self.assertEqual(response_file["file_name"], file_info["file_name"]) self.assertEqual(response_file["upload_url"], mock_key_instance.generate_url())
OAUTH2_PROVIDER_APPLICATION_MODEL = 'oauth2_provider.Application'
history = PasswordHistory.objects.filter(user=user).order_by('-time_set')[:min_diff_passwords_required]
import logging import warnings from yaml.scanner import ScannerError from yaml.parser import ParserError from yaml.constructor import ConstructorError
run = problem_key.run if not run: problem_key = course_key.make_usage_key_from_deprecated_string(problem_location) if problem_key.course_key != course_key: raise InvalidKeyError(type(problem_key), problem_key)
composer.__grains__ = {} composer.__salt__ = {} composer.__context__ = {} composer.__opts__ = {}
self.user.is_active = False self.user.save()
'random_reauth_delay': int,
result = f.clean('12-21-2010') self.assertEqual(result, date(2010, 12, 21))
student_count_percent = 0 if total_student_count.get(child.location, 0) > 0: student_count_percent = count_grade * 100 / total_student_count[child.location]
if self.is_categorical_astype(dtype): return self.make_block(Categorical(self.values, **kwargs))
break
DEFAULT_DELAY_SEC = 0.5
y = [5, 0, 5] for X in ([[5, 0], [0, 5], [10, 10]],
pro = Book.objects.create(title="Pro Django", published=datetime.date(2008, 12, 16)) marty = Person.objects.create(name="Marty Alchin")
gsu = model.get_sampling_updates updates, layer_to_chains = gsu(layer_to_chains, self.theano_rng, num_steps=self.num_gibbs_steps, return_layer_to_updated=True)
api.add_enrollment(self.USERNAME, self.COURSE_ID, mode='audit')
target = win32file.GetLongPathName(target)
assert_raises(ValueError, rp.transform, data[:, 1:5])
self.set_state_from_lcp()
>>> aapl.calls
import salt.utils import salt.utils.aws import salt.utils.xmlutil as xml from salt._compat import ElementTree as ET
self.assertIn(error_msg, result['success'])
X = (X - self.X_mean) / self.X_std
y = (y > 4).astype(np.int)
return {'name': name, 'changes': {}, 'result': True, 'comment': ''}
import salt.ext.six as six
asset_key = make_asset_id(course_id, asset) asset_md = AssetMetadata(asset_key) asset_md.from_xml(asset) all_assets.append(asset_md)
result = f.clean('1:30 PM') self.assertEqual(result, time(13, 30, 0))
SYNDIC_CONNECT_TIMEOUT = 5 SYNDIC_EVENT_TIMEOUT = 5
from __future__ import absolute_import import os import tempfile
content = "<p><br><br></p>" payload = get_response(content, 'January 11, 2013') self.assertHTMLEqual(content, payload['content'])
transform = SkewedChi2Sampler(skewedness=c, n_components=1000, random_state=42) X_trans = transform.fit_transform(X) Y_trans = transform.transform(Y)
salt_log_setup.setup_multiprocessing_logging_listener( self.master_opts )
return False
i_best_alpha = np.argmin(mse_path.mean(axis=-1)) best_alpha = all_alphas[i_best_alpha]
with ensure_clean('__tmp_to_csv_from_csv5__') as path:
param_grid = ParameterGrid(self.param_distributions) grid_size = len(param_grid)
if messages is None: break if messages: self._used_storages.add(storage) all_messages.extend(messages) if all_retrieved: break
if drop_first and len(levels) == 1: return get_empty_Frame(data, sparse)
self.assertTrue(cp.index.identical(self.frame.index))
if master is not None: tmp_ip = _host_to_ip(master) if tmp_ip is not None: master_ip = tmp_ip
subset_choices = [correct_choice] rng.shuffle(incorrect_choices) subset_choices += incorrect_choices[:num_incorrect] rng.shuffle(subset_choices)
verbose_name = "\xc3\x85ngstr\xc3\xb6m's Articles"
return obj
assert_equal(len(folds), len(labels)) for i in np.unique(folds): assert_greater_equal(tolerance, abs(sum(folds == i) - ideal_n_labels_per_fold))
ip_addresses = vb_get_network_addresses(machine_name=BOOTABLE_BASE_BOX_NAME)
mean = X.mean(axis=0) std = X.std(axis=0) X = (X - mean) / std
import salt.exceptions import salt.ext.six as six import salt.utils
def test_real_user(useless): useless_user = Mock(email='fake@fake.com', id=useless) return useless_user
assert mlp_composite.get_input_space() == fl.get_input_space()
self.addCleanup(shutil.rmtree, self.temp_dir_1) self.addCleanup(shutil.rmtree, self.temp_dir_2)
dates = [] with self.assertNumQueries(0): article_datetimes_iterator = Article.objects.datetimes('pub_date', 'day', order='DESC').iterator()
all_items = self.sequence_items
orig_index = new_index = self[indexer] levels = [self._get_level_number(i) for i in levels] for i in sorted(levels, reverse=True): try: new_index = new_index.droplevel(i) except:
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, Mock, patch
globals().update(dynamic_benchmarks)
extract_dir_relative = path.relpath(extract_dir, settings.DATA_DIR)
connection.ensure_connection() self.assertEqual(connection.connection.encoding, "UTF-8") self.assertEqual(connection.connection.nencoding, "UTF-8")
pass
continue
settings.STATICFILES_DIRS.append( (u'themes/{}'.format(settings.THEME_NAME), theme_root / 'static') )
if hasattr(self._dataset, 'get'): rval = self._next(next_index) else: rval = self._fallback_next(next_index)
self.assertEqual(cities_within_state.count(), 1)
for parent in parents: self._block_relations[parent].children.remove(usage_key)
self.addCleanup(ModuleIsolation().clean_up)
from abc import ABCMeta, abstractmethod
change_info = self.run_function('user.info', [CHANGE_USER]) if change_info: self.run_function('user.delete', [CHANGE_USER])
self.assertEqual(course.edited_by, "testassist@edx.org") self.assertDictEqual(course.grade_cutoffs, {"Pass": 0.45})
src_x, src_y = src_dimensions target_x, target_y = target image_x, image_y = image.size
user_account = vim.host.LocalAccountManager.AccountSpecification() user_account.id = username user_account.password = new_password
XA_checked, XB_checked = check_pairwise_arrays(XA.astype(np.float), XB) assert_equal(XA_checked.dtype, np.float) assert_equal(XB_checked.dtype, np.float)
from __future__ import absolute_import
dive.editor = chris dive.save()
if apps is not global_apps: global_apps.get_model('contenttypes', 'ContentType').objects.clear_cache()
grid_search_no_score = GridSearchCV(clf_no_score, {'C': Cs}) assert_raise_message(TypeError, "no scoring", grid_search_no_score.fit, [[1]])
self.assertTrue(fstats_post.st_mtime, fstats_orig.st_mtime-age)
EMAIL_HOST_USER = '' EMAIL_HOST_PASSWORD = '' EMAIL_USE_TLS = False EMAIL_USE_SSL = False EMAIL_SSL_CERTFILE = None EMAIL_SSL_KEYFILE = None EMAIL_TIMEOUT = None
cs_getordinate = CsOperation('GEOSCoordSeq_getOrdinate', ordinate=True, get=True) cs_setordinate = CsOperation('GEOSCoordSeq_setOrdinate', ordinate=True)
signal_handler.reset_mock() section = self.store.create_item(self.user_id, course.id, 'chapter') signal_handler.send.assert_called_with('course_published', course_key=course.id)
assert_raises(ValueError, getattr(nbrs_D, method), X)
UUIDUser.objects.create_user( email=self.user_email, username='foo', password='foo', ) return super(UUIDUserPasswordResetTest, self)._test_confirm_start()
X, y = make_classification(n_classes=2, random_state=0)
from __future__ import absolute_import
import os import yaml import salt.ext.six as six
result = f.clean('21.12.2010') self.assertEqual(result, date(2010, 12, 21))
if callable(fail_condition): fail_val = fail_condition else: fail_val = lambda: fail_condition
BROKER_HEARTBEAT = 10.0 BROKER_HEARTBEAT_CHECKRATE = 2
self.user = UserFactory(is_staff=True) self.client = AjaxEnabledTestClient() self.client.login(username=self.user.username, password='test')
dict(safe_zip(range(5), range(5))),
from django.db.backends.oracle.base import convert_unicode
response = self.client.get('/login_protected_view/') self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')
from __future__ import absolute_import
response = self.api_response() self.assertNotIn('\'/static/', response.data['handouts_html'])
self._assert_requirements_displayed(response, [ PayAndVerifyView.PHOTO_ID_REQ, PayAndVerifyView.WEBCAM_REQ, ])
order = np.argsort(categories) categories = categories[order] y = sp.csr_matrix(y[:, order])
values = Series([u'a_b_c', u'c_d_e', NA, u'f_g_h'])
if '@' not in snapshot: ret['result'] = False ret['comment'] = 'invalid snapshot name: {0}'.format(snapshot)
from __future__ import absolute_import
y_pred, y_pred_std = gpr.predict(X2, return_std=True) y_pred = y_mean + y_pred y_pred_norm, y_pred_std_norm = gpr_norm.predict(X2, return_std=True)
log = logging.getLogger(__name__)
axis0 = 'sample' axis1 = 'label' if average == 'samples': axis0, axis1 = axis1, axis0
response = self._regenerate(username=self.STUDENT_USERNAME) self.assertEqual(response.status_code, 400)
response = self.client.get(reverse(url_name)) self.assertRedirects(response, reverse("dashboard"))
import logging import subprocess
import salt.utils import salt.utils.jid import salt.ext.six as six
IS_PY3 = sys.version_info > (3,)
storage, path = paths[name] with storage.open(path) as original_file:
try: problem.grade_answers({'1_2_1': '42'})
ret['comment'] = 'Event module not available. Schedule add failed.' ret['result'] = True
try: from pyVmomi import vim HAS_PYVMOMI = True except Exception: HAS_PYVMOMI = False
for option in self.option_list: if option.dest is None: continue
error_msg = _('Invalid grader reply. Please contact the course staff.') oldcmap.set(self.answer_id, msg=error_msg) return oldcmap
remap_dict[fullname_with_subpath] = asset_key
from salt.modules import win_system
try: return set((str(x) for x in thing)) except TypeError: return set((str(thing),))
ret = self.run_function('state.sls', mods='pip-installed-errors') self.assertSaltTrueReturn(ret)
label = "P{0}.{1}.{2}".format(c_subsection, c_unit, c_problem)
__class__ = property(new_method_proxy(operator.attrgetter("__class__"))) __eq__ = new_method_proxy(operator.eq) __ne__ = new_method_proxy(operator.ne) __hash__ = new_method_proxy(hash)
if seconds < 0: continue
local_master = True
GraphLassoCV(alphas=[0.8, 0.5], tol=1e-1, n_jobs=1).fit(X)
self.assertEqual(formset[0].instance.user_id, "guido")
with self.assertNumQueries(12): api.set_credit_requirement_status( user.username, self.course_key, requirements[0]["namespace"], requirements[0]["name"] )
self.suffix_map['.pyx'] = tuple()
return np.apply_along_axis(self, 1, X)[:, 0]
for key in kwargs: args["openid." + key] = kwargs[key]
from salt.modules import munin
current_val = request_params.pop('DeveloperProviderName', None) if current_val is None and DeveloperProviderName is not None: request_params['DeveloperProviderName'] = DeveloperProviderName
import fnmatch import re
import salt.utils
comb = self.frame.combineAdd(self.empty) assert_frame_equal(comb, self.frame)
return fnd
while re.search(RSTR_RE, stderr): stderr = re.split(RSTR_RE, stderr, 1)[1].strip()
import integration import salt.utils from salt.modules import file as filemod
with self.assertNumQueries(0): self.assertEquals('a_value', self.kvs.get(user_state_key('a_field')))
values = self.mixed_int.as_matrix(['A', 'B', 'C']) self.assertEqual(values.dtype, np.int64)
axes = df.plot.bar(width=width, subplots=True) for ax in axes: for r in ax.patches: self.assertEqual(r.get_width(), width)
msg = ("must supply a a same-length tuple to get_group" " with multiple grouping keys") raise ValueError(msg)
value = _fetch_option(cfg, ret_config, virtualname, options[option])
if self._holder is None: return
from __future__ import print_function from __future__ import absolute_import
return self.connection.ops.spatial_version >= (4, 1, 0)
init = cls.__init__
return salt.utils.pem_finger(os.path.join(__opts__['pki_dir'], 'minion.pub'), sum_type=__opts__.get('hash_type', 'md5'))
time.sleep(0.1) if not self.isalive(): return True else: return False
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salt.exceptions import CommandExecutionError
class NotReferenced(models.Model): pass
result = timeout_middleware.process_request(request) self.assertIsNotNone(result) self.assertEqual(result.content, b'Hello World 1')
if not settings.FEATURES.get("ENABLE_CREDIT_ELIGIBILITY"): return {}
executor.migrate([("author_app", "0002_alter_id")])
if col_order is not None: if sorted(col_order) == sorted(final_df.columns): final_df = final_df[col_order] else: raise InvalidColumnOrder( 'Column order does not match this DataFrame.' )
'pillar_opts': bool,
sorted_mappings = sorted(mappings, key=lambda m: (-len(m[0]), m[0]))
clf = self.factory().fit(X2, Y2, coef_init=np.zeros((3, 2)))
from __future__ import unicode_literals
for service in services: service_key = None
msg = _("answer-pool value should be an integer") raise LoncapaProblemError(msg)
for (query_name, model_name) in self.translations.items(): try: index = self._columns.index(query_name) self._columns[index] = model_name except ValueError: pass
CourseEnrollment.unenroll_by_email("jack@fake.edx.org", course_id) self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assert_unenrollment_event_was_emitted(user, course_id)
u = User.objects.get(email='staffmember@example.com') self.assertTrue(u.check_password("anewpassword"))
diff = self._diff_list_dicts(api_keys, items_dt, 'id')
output.append(str_hidden)
log = logging.getLogger(__name__)
'ENABLE_SERVICE_STATUS': False,
from contextlib import contextmanager import sys import json import logging
df = DataFrame(dict(A=Series(lrange(3), index=date_range( '2000-1-1', periods=3, freq='H', tz=gettz('US/Eastern')))))
self.assertEqual(groups_for_user({}, 'unknown'), [])
if self.rc > 0 and other.rc <= 0: noc_info = list(self.noc_info) noc_info[3] = -1 return method(tuple(noc_info), other.noc_info)
html_theme_path = ["_theme"]
self.settings_detail.refresh_page() self.settings_detail.wait_for_prerequisite_course_options() self.assertTrue(is_option_value_selected( browser_query=self.settings_detail.pre_requisite_course_options, value=pre_requisite_course_id ))
if 'topo_space' not in self.__dict__: self._update_topo_space()
role.add_users(self.user)
raise CommandExecutionError( 'none of the specified sources were found' )
if value is not None:
if test3 <= ctol: istop = 3 if test2 <= atol: istop = 2 if test1 <= rtol: istop = 1
centos7-2-iad-rackspace: provider: rackspace-iad size: general1-2 ephemeral: - size: 100 format: <swap/ext4>
modulestore().update_item(course, ModuleStoreEnum.UserID.test)
age = opts.get('fileserver_list_cache_time', 30) + 1
f = models.ForeignKey(Target, models.CASCADE)
log.warn('Error in conditional module: \ required module {module} has no {module_attr}'.format(module=module, module_attr=attr_name)) return False
ALL_VAR = 'all' ORDER_VAR = 'o' ORDER_TYPE_VAR = 'ot' PAGE_VAR = 'p' SEARCH_VAR = 'q' ERROR_FLAG = 'e'
cls.o1 = Order.objects.create(pk=1) cls.o2 = Order.objects.create(pk=2) cls.o3 = Order.objects.create(pk=3)
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
if len(image.shape) == 3 and image.shape[2] == 1: image = image[:, :, 0]
X, y = make_classification(n_samples=200, n_features=20, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, flip_y=0.0, class_sep=10, shuffle=False, random_state=0)
system_info = win32net.NetServerGetInfo(None, 101)
ModelState.from_model(Book).render(apps) ModelState.from_model(Novel).render(apps)
text_content.append(lt_object.get_text().encode('utf-8'))
(new_options, __) = parser.parse_args([])
log.error("etcd: failed to perform 'watch' operation on key {0} due to connection error".format(key)) return {}
certs_api.set_cert_generation_enabled(self.course.id, True) self._assert_enable_certs_button(False)
if not hasattr(self, 'mask_weights'): self.mask_weights = None
@property def name(self): "Returns the name of this Field." name = capi.get_field_name(self.ptr) return force_text(name, encoding=self._feat.encoding, strings_only=True)
aggs = City.objects.aggregate(Union('location__point'))
rendered = pieces["short"]
for student in students[7:]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.generating, mode='honor', grade=default_grade )
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'cloudstack', vm_['profile'], vm_=vm_) is False: return False
yield assert_take_ok, mgr, ax, [] yield assert_take_ok, mgr, ax, [0, 0, 0] yield assert_take_ok, mgr, ax, lrange(mgr.shape[ax])
params = self._signed_callback_params(self.order.id, self.COST, self.COST, decision='DECLINE') result = process_postpay_callback(params)
#epub_max_image_width = 0
clf = DecisionTreeClassifier() clf.feature_importances_
problem = self.build_problem(rectangle="(10,10)-(20,20)")
with self.assertRaises(TypeError): lyr._set_spatial_filter('foo')
values = Series([u('fooBAD__barBAD'), NA, u('foo')])
related_url = reverse( 'admin:%s_%s_changelist' % ( rel_to._meta.app_label, rel_to._meta.model_name, ), current_app=self.admin_site.name, )
from salt.modules import apache
import yaml import salt.ext.six as six
if request._finished: future = Future() future.set_exception(TimeoutException()) return future
DATE_FORMAT = 'j F, Y' TIME_FORMAT = 'g:i A' YEAR_MONTH_FORMAT = 'F Y' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'j M, Y'
__virtualname__ = 'fmadm'
self._samples = samples self._sigma = sigma
#epub_show_urls = 'inline'
index = self.index[2:100:4] expected = Index(np.array([4, 12]), name='foo') self.assert_index_equal(index, expected)
self.label_index_to_name = ('category', 'instance', 'elevation', 'azimuth', 'lighting condition')
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
CourseOverview.get_from_id(params["course_key"])
opts = tuple(s for s in styles if s in opt_dict.keys()) if opts: definition['opts'] = opts
from __future__ import unicode_literals
return professional_mode if professional_mode else verified_mode
for alias in repos_cfg.sections(): repo_meta = _get_repo_info(alias, repos_cfg=repos_cfg)
used_ids = set(p.id for p in course.user_partitions) return generate_int_id(used_ids=used_ids)
event_iter = self.get_event_iter_returns(jid, minions, timeout=timeout)
mixing = rng.randn(6, 2) m = np.dot(mixing, s)
import logging import os
self.n_iter_ = 0 self.t_ = 0 self.n_outputs_ = y.shape[1]
X_3d = X[:, :, np.newaxis] clf = MockClassifier(allow_nd=True) scores = cross_val_score(clf, X_3d, y2)
GRADES_DOWNLOAD_ROUTING_KEY = HIGH_MEM_QUEUE
LIMITED_RETRY_ERRORS = ( SMTPConnectError, SMTPServerDisconnected, AWSConnectionError, )
coef_init = np.zeros((n_features, n_classes), dtype=np.float64, order='C')
lbound = N.array([kshp[0]-1,kshp[1]-1]) if mode=='valid' else N.zeros(2) ubound = lbound + (inshp[1:]-kshp+1) if mode=='valid' else fulloutshp
AccessTestData(partition_groups={1: 1, 2: 2}, merged_parents_list=[{1: {}}]), AccessTestData(partition_groups={1: 1, 2: 2}, merged_parents_list=[{1: {3}}]),
elidable = False
attempt = SoftwareSecurePhotoVerification(user=user) attempt.mark_ready() assert_equals(attempt, SoftwareSecurePhotoVerification.active_for_user(user))
from salttesting.parser import PNUM, print_header from salttesting.parser.cover import SaltCoverageTestingParser
import integration from salt.utils import event
result = Timestamp(result, tz='UTC') expected_utc = expected self.assertEqual(result.value, expected_utc) self.assertEqual(tslib.pydt_to_i8(result), expected_utc)
response = self.client.post(self.url, {})
reg = svm.SVR(kernel='linear', C=0.1).fit(X, y)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.pid = None self.stdin = None self.stdout = None self.stderr = None
create_point = GeomOutput('GEOSGeom_createPoint', [CS_PTR]) create_linestring = GeomOutput('GEOSGeom_createLineString', [CS_PTR]) create_linearring = GeomOutput('GEOSGeom_createLinearRing', [CS_PTR])
for line in lines: name = _ips_get_pkgname(line) version = _ips_get_pkgversion(line) __salt__['pkg_resource.add_pkg'](ret, name, version)
try: import boto import boto3 from boto.exception import BotoServerError
dis = euclidean_distances(X)
self.assert_grade(problem, '42', 'correct') self.assert_grade(problem, '0', 'incorrect')
saltenv = env
from salt.exceptions import SaltRenderError import salt.utils.templates
class UserProfile(models.Model): user = models.OneToOneField(User, models.CASCADE, primary_key=True)
return self.func(*args)
hasher.iterations = old_iterations
continue
generate_subs_from_source( result_subs_dict, os.path.splitext(user_filename)[1][1:], srt_transcripts.data.decode('utf-8-sig'), item, lang )
expected = s1.apply(lambda x: x / np.timedelta64(m, unit)) result = s1 / np.timedelta64(m, unit) assert_series_equal(result, expected)
try: from salt._compat import ElementTree as ET HAS_ELEMENT_TREE = True except ImportError: HAS_ELEMENT_TREE = False
y_pred1 = clf.fit(X7, y6).predict(X7) assert_array_equal(y_pred1, y6)
self.assertEqual(self._get_enrollments(), [])
self.data = _set_tz(self.data, self.tz, coerce=True)
else: script_content = url script_name = '{0}.sh'.format( hashlib.sha1(script_content).hexdigest() )
data = "A;B\n1;2\n3;4"
s = Series([1.2345] * 100) s[::2] = np.nan result = s.unique() self.assertEqual(len(result), 2)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
ModeCreationPage(self.browser, self.course_id, mode_slug=u'verified', mode_display_name=u'Verified Certificate', min_price=10, suggested_prices='10,20').visit()
n_rows = 1 n_cols = np.ceil(n_plots*1./n_rows) n_cols = int(n_cols) half_perimeter = n_cols + 1
y1 = np.array([[0, 1, 1], [1, 0, 1]]) y2 = np.array([[0, 0, 1], [1, 0, 1]])
self.password = 'test' self.user = UserFactory.create(password=self.password) self.staff = UserFactory.create(password=self.password, is_staff=True)
BROKER_POOL_LIMIT = 0 BROKER_CONNECTION_TIMEOUT = 1
config.add_subpackage('tests')
parent = np.arange(n_nodes, dtype=np.intp) used_node = np.ones(n_nodes, dtype=bool) children = [] if return_distance: distances = np.empty(n_nodes - n_samples)
exp_in.index = exp_in.index.astype(object)
self.assertEqual(response.status_code, 200)
options = _get_options(ret=None)
Z = Z.reshape(xx.shape) plt.contourf(xx, yy, Z, cmap=plt.cm.Paired, alpha=0.8)
if (indexer == -1).any(): return True
rng = check_random_state(0)
self.item.youtube_id_1_0 = None with self.assertRaises(ValueError): self.item.get_transcript(transcripts)
self.assertEqual(buffer_o, expected_data) self.assertFalse(term.isalive())
try: from requests.packages.urllib3 import disable_warnings disable_warnings() except Exception: pass
return stdout
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
class AllowsNullGFK(models.Model): content_type = models.ForeignKey(ContentType, models.SET_NULL, null=True) object_id = models.PositiveIntegerField(null=True) content_object = GenericForeignKey()
DATE_INPUT_FORMATS = [
Restaurant.objects.bulk_create([ Restaurant(name='foo') for i in range(0, 2) ]) self.assertEqual(Restaurant.objects.count(), 2)
if self.width_field: setattr(instance, self.width_field, width) if self.height_field: setattr(instance, self.height_field, height)
dive = Book.objects.using('other').create(title="Dive into Python", published=datetime.date(2009, 5, 4))
self._reconnect()
raise ValueError('can only convert an array of size 1 to a ' 'Python scalar')
if __grains__['os'] in ['MacOS', 'Darwin']: ret['changes'] = {'new': []}
self.validate_xblock_info_consistency(xblock_info, has_child_info=has_child_info)
return cart.has_items()
homework_1_score = 1.0 / 2 homework_2_score = 1.0 / 1 self.check_grade_percent(round((homework_1_score + homework_2_score) / 2, 2))
shutil.rmtree(clone_parent_dir)
model._results
sample_interval = 0.3 transform = AdditiveChi2Sampler(sample_steps=4, sample_interval=sample_interval) assert_equal(transform.sample_interval, sample_interval) transform.fit(X) assert_equal(transform.sample_interval_, sample_interval)
func = lambda: date_range('2014-01-01', freq='WOM-5MON') self.assertRaises(ValueError, func)
if Y is not None: H_hat[-1] = Y
ModeCreationPage( self.browser, self.course_id, mode_slug=u'verified', mode_display_name=u'Verified Certificate', min_price=10, suggested_prices='10,20' ).visit()
registry = Registry() hkey = registry.hkeys[local_hive] key_path = local_key access_mask = registry.registry_32[use_32bit_registry]
from __future__ import absolute_import, print_function import os
continue
res_rev = cat_rev > cat_rev_base exp_rev = np.array([True, False, False]) self.assert_numpy_array_equal(res_rev, exp_rev)
for embedded in (x for x in data if isinstance(x, dict)): try: data = embedded[each] embed_match = True break except KeyError: pass if not embed_match: return default
import salt.utils
self.assert_logged_in_cookie_redirect(actions.do_complete(
delete_item(category='sequential', name='test_sequence')
offset_s = self._get_offset(offset, normalize=True) expected = Timestamp(expected.date())
SkippedReverification.add_skipped_reverification_attempt( checkpoint=self.checkpoint, user_id=self.user.id, course_id=unicode(self.course.id) )
if val == val and val != %(nan_val)s: nobs[lab, j] += 1 if val > maxx[lab, j]: maxx[lab, j] = val
ret = self.run_run_plus(fun='fileserver.dir_list', args=['backend="roots"']) self.assertIsInstance(ret['fun'], list)
try: marty.book_set.set([pro, dive]) except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
for alias, driver, name in vms_to_destroy: ret = processed[alias][driver][name] if not ret: continue
clf = NearestCentroid() clf.fit(X_csr.tocoo(), y) assert_array_equal(clf.predict(T_csr.tolil()), true_result)
if force: log.warn('force option is unsupported on MacOS, ignoring')
pass
instances = weakref.WeakValueDictionary()
msg += 'salt-master will crash pretty soon! ' level = logging.CRITICAL
url_full = tornado.httputil.url_concat(url, params)
Permission.objects.filter(content_type__app_label='swappable_models').delete() ContentType.objects.filter(app_label='swappable_models').delete()
self.assert_numpy_array_equal(rng.asi8, rng_eastern.asi8)
from __future__ import unicode_literals
nav_dict = dict()
kwargs['volumes_from'] = str(kwargs['volumes_from'])
try: val = int(ogr_field.value) except ValueError: raise InvalidInteger('Could not construct integer from: %s' % ogr_field.value)
SIMPLE_CHILDREN_MAP = [[1, 2], [3, 4], [], [], []]
if self.cancelled: raise CancelledError("Semaphore cancelled")
from salt.exceptions import SaltSystemExit
task_folder = task_service.GetFolder(location) task = task_folder.GetTask(name)
place2 = Place(name='Main St', address='111 Main St') place2.save_base(raw=True) park = ParkingLot(parent=place2, capacity=100) park.save_base(raw=True)
rng = np.random.RandomState(0) iris_weights = rng.randint(10, size=iris.target.shape) boston_weights = rng.randint(10, size=boston.target.shape)
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
SALT_BUILD_FAIL = 101
for prop in 'cpus', 'disk', 'ip_address', 'nameserver', 'password', 'swap', 'poolid', 'storage':
bools = Series([True, False, True])
class OptionalPersonForm(Form): first_name = CharField() last_name = CharField() birth_date = DateField(required=False)
if isinstance(key, list): key = tuple(key)
result0 = get_result(arr, 20, min_periods=0) result1 = get_result(arr, 20, min_periods=1) tm.assert_almost_equal(result0, result1)
self.assertEqual(csv.replace('\r\n', '\n').strip(), self.CORRECT_CSV.strip())
major_axis = major_axis.copy() major_axis.name = self.index.names[0]
([[10, 10, 8], [9, 8, 1], [9, 7, 4]], 18 ),
if ac_only is not None: task_definition.Settings.DisallowStartIfOnBatteries = ac_only if stop_if_on_batteries is not None: task_definition.Settings.StopIfGoingOnBatteries = stop_if_on_batteries if wake_to_run is not None: task_definition.Settings.WakeToRun = wake_to_run
if param_name not in PARAMETERS: param_name = 'custom_' + param_name
import json
assert_warns(DataConversionWarning, clf.fit, X, y_) assert_array_equal(clf.predict(T), true_result) assert_equal(100, len(clf.estimators_))
response = client.get('/')
_("Expected a {expected_tag} tag; got {given_tag} instead").format( expected_tag=u"<choice>", given_tag=choice.tag, )
X = np.random.randn(10, 2) X[::2] = np.nan
certs = _list_certs()
MAXSIZE = int((1 << 31) - 1)
lw = LedoitWolf() loglik_lw = lw.fit(X_train).score(X_test)
if isinstance(from_space, CompositeSpace): if isinstance(to_space, Conv2DSpace): return (NotImplementedError, "CompositeSpace does not know how to format as " "Conv2DSpace")
result.index = frame.index result.index.name = frame.index.name
masters = [] for hostage in hostages: external = hostage['external'] internal = hostage['internal'] if external: external = parse_hostname(external, master_port) if not external:
from salt.states import slack
from salt.modules import mine
layout = np.zeros((nrows + 1, ncols + 1), dtype=np.bool) for ax in axarr: layout[ax.rowNum, ax.colNum] = ax.get_visible()
_save()
auth = _auth(url) if auth is False: ret['res'] = False ret['msg'] = 'missing username and password settings (grain/pillar)' return ret
self.course_outline.visit() self.course_outline.open_subsection_settings_dialog(1) self.course_outline.select_access_tab() self.course_outline.add_prerequisite_to_subsection("80")
def ordered_dict_presenter(dumper, data): return dumper.represent_dict(six.iteritems(data)) yaml.add_representer( OrderedDict, ordered_dict_presenter, Dumper=yaml.dumper.SafeDumper)
try:
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
#latex_paper_size = 'letter'
response_msg_div.set("class", "response_message")
vertical = get_and_verify_publish_state('vertical', self.TEST_VERTICAL, True) for child in vertical.get_children(): verify_item_publish_state(child, True)
cmd = "dscl . -create /Users/{0} Password '*'".format(name) salt.utils.mac_utils.execute_return_success(cmd)
for entry in output: entry = [item for item in entry.split(" ") if item] entry = entry[0:3] + [" ".join(entry[3:])]
final_template, final_locals = process_template(template, _globals) _globals.update(final_locals)
version = '0.1' release = '0.1'
import logging
GEOM_PTR = POINTER(GEOSGeom_t) PREPGEOM_PTR = POINTER(GEOSPrepGeom_t) CS_PTR = POINTER(GEOSCoordSeq_t) CONTEXT_PTR = POINTER(GEOSContextHandle_t)
self.df = self.df[self.df['key2'] > 1]
self.assertRaises(SaltInvocationError, utils.format_call, dummy_func, {'1': 2})
content = service_instance.content.propertyCollector.RetrieveContents([filter_spec])
self.assertEqual(len(response.redirect_chain), 1) self.assertIn(302, response.redirect_chain[0]) self.assertEqual(len(outbox), outbox_count)
try: from celery import Celery from celery.exceptions import TimeoutError HAS_CELERY = True except ImportError: HAS_CELERY = False
#sys.path.append(os.path.abspath('some/directory'))
self.assertEqual(list(qs.values_list('title', flat=True)), ['Dive into Python'])
import integration import salt.utils
from __future__ import absolute_import
if os.name == 'nt': old_path = self.work_path new_path = self.path else: old_path = self.work_path[2:] new_path = self.path[2:]
assert_greater(roc_auc_score(y_test, y_pred), 0.98)
if format == '%Y%m%d': try: result = _attempt_YYYYMMDD(arg, errors=errors) except: raise ValueError("cannot convert the input to " "'%Y%m%d' date format")
if max_leaf_nodes < 0: builder = DepthFirstTreeBuilder(splitter, min_samples_split, min_samples_leaf, min_weight_leaf, max_depth) else: builder = BestFirstTreeBuilder(splitter, min_samples_split, min_samples_leaf, min_weight_leaf, max_depth, max_leaf_nodes)
smart_unicode = smart_text force_unicode = force_text
easy_weight_list = [0] * 10 easy_weight_list[5] = 1
self.coach = AdminFactory.create() role = CourseCcxCoachRole(self.split_course.id) role.add_users(self.coach)
LOGGER.exception('Failed to award certificate for program %s to user %s', program_id, username) retry = True
from __future__ import absolute_import
self.assertEqual(buf, control_buf)
s = Series([1, 3, np.nan, np.nan, np.nan, 11])
if unique not in self.mapping: raise ValueError
for index in [i for i, x in enumerate(found) if x]:
assert_equal(lfw_people.images.shape, (10, 62, 47)) assert_equal(lfw_people.data.shape, (10, 2914))
return type( str('RelatedObjectDoesNotExist'), (self.related.related_model.DoesNotExist, AttributeError), {} )
s = Series([Timestamp('20130101') + timedelta(seconds=i * i) for i in range(10)]) td = s.diff()
self.assertRaises(KeyError, self.cf.describe_option, 'no.such.key')
sample_dict = {'x': (-10, 10), 'y': (-10, 10)}
import numpy as np
from __future__ import absolute_import, print_function import logging
bkdir = os.path.join(bkroot, src_dir)
tol = 0.00001
known_user = 'knownuser@example.com' known_user2 = 'knownuser2@example.com'
from salt.pillar import Pillar
mask = str(mask).upper()
hasher = RandomTreesEmbedding(n_estimators=10, sparse_output=False) X, y = datasets.make_circles(factor=0.5) X_transformed = hasher.fit_transform(X)
for length in [248, 249, 250, 251, 252]:
indexer = np.sort(np.concatenate([b.mgr_locs.as_array for b in blocks])) inv_indexer = lib.get_reverse_indexer(indexer, self.shape[0])
effective_diff = np.sum((new_centers_csr - old_centers) ** 2) assert_almost_equal(incremental_diff_csr, effective_diff)
fields = (f for f in fields if '__' not in f)
'gating.apps.GatingConfig',
registry2 = CheckRegistry() registry2.register(f) registry2.register(f2, "tag1", "tag2") registry2.register(f3, "tag2", deploy=True)
sls[ks_opts['keyboard']['xlayouts']] = {'keyboard': ['system']}
with StataReader(self.dta1_114) as rdr:
log.exception("Couldn't load textbook ({0}, {1})".format(title, book_url)) continue
continue_learning = (self.model.continue_learning() and extension_continue) assert continue_learning in [True, False, 0, 1] while continue_learning: if self.exceeded_time_budget(t0, time_budget): break
filenames = set(autoreload.gen_filenames(only_new=True)) self.assertEqual(filenames, set())
'max_minions': int,
LOCATION='createcachetable_dry_run_mode'
post = None
return u"Course '{}': Instructor Email {}Enabled".format(self.course_id.to_deprecated_string(), not_en)
import salt.utils
'syndic_max_event_process_time': float,
for item in items: if item not in clean_frames: raise ValueError('column %r not found in data' % item)
with self.assertRaises(IOError): CourseOverview.load_from_module_store(self.store.make_course_key('Non', 'Existent', 'Course'))
elif existing['code'] == 404:
if role in PALETTES[NOCOLOR_PALETTE] and definition: palette[role] = definition
from __future__ import unicode_literals
from __future__ import absolute_import import json import logging import re import sys
segment_context = full_segment_event.get('context')
coords = tuple
first_addend = random.randint(-100, 100) second_addend = 10 - first_addend
response = client.post(self.path, data=json.dumps(data), content_type=JSON, HTTP_X_CSRFTOKEN=csrf_token) self.assertEqual(response.status_code, 201)
o = self._construct(n, **kwargs) result = o._get_numeric_data() self._compare(result, o)
pro = Book.objects.create(title="Pro Django", published=datetime.date(2008, 12, 16))
try: temp_file = _mkstemp_copy(path=path, preserve_inode=False) except (OSError, IOError) as exc: raise CommandExecutionError("Exception: {0}".format(exc))
iris = datasets.load_iris()
warnings.simplefilter('always') sp.csr_matrix([1.0, 2.0, 3.0]).max(axis=0)
self.assertTrue(element_has_text( page=course_outline_page, css_selector='span.section-title', text='Entrance Exam' ))
from __future__ import unicode_literals
from __future__ import print_function from __future__ import absolute_import
__float__ = _coerce_method(float) __long__ = _coerce_method(int) __int__ = _coerce_method(int)
for i in range(10):
if float_format is None: float_format = self.float_format
from __future__ import division
config.toggle()
ret['changes'].pop('diff', None) return _error(ret, 'Parent directory not present')
import salt.utils from salt.exceptions import SaltInvocationError
if settings.DEBUG and not urlpatterns: urlpatterns += staticfiles_urlpatterns()
self.assertEqual(len(response['results']), 0)
return "TO_CHAR(%s, 'D')" % field_name
def custom_score(y_true, y_pred): return (((y_true == y_pred).sum() - (y_true != y_pred).sum()) / y_true.shape[0])
INSTALLED_APPS += ('django_extensions',)
transformer_clone = clone(transformer) X_pred = transformer_clone.fit_transform(X, y=y_)
from __future__ import unicode_literals
if not cuda.cuda_available: convnet_available.compile_error = True _logger.debug('cuda unavailable') return False
self.run_function('beacons.save')
def __and__(self, other): "Returns the intersection of this Geometry and the other." return self.intersection(other)
n_components = 10
try: progress_outputter = salt.loader.outputters(opts)[out]
thumbnail_name = StaticContent.generate_thumbnail_name( content.location.name, dimensions=dimensions ) thumbnail_file_location = StaticContent.compute_location( content.location.course_key, thumbnail_name, is_thumbnail=True )
self.update_info(info)
import logging import os.path import os
class Award(models.Model): name = models.CharField(max_length=30) character = models.ForeignKey(Character, models.SET_NULL, blank=False, null=True)
from __future__ import unicode_literals
initial_value = self.to_python(initial) return super(HStoreField, self).has_changed(initial_value, data)
import logging import subprocess
self.assertEqual(cached_structure, not_cached_structure)
#np.sum(np.abs(y_hat - y), axis=1) != 0
create_exam( course_id=unicode(self.course.id), content_id='foo3', exam_name='A Proctored Exam', time_limit_mins=10, is_proctored=True, is_active=True, is_practice_exam=True )
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
from __future__ import absolute_import
question = etree.SubElement(root, "p") question.text = question_text
for X_minibatch in np.array_split(X, 10): km.partial_fit(X_minibatch)
self.user.is_staff = True self.assertTrue(user_has_role(self.user, CourseCreatorRole()))
assert world.is_css_not_present(ASSET_NAMES_CSS)
pass
HAS_MYSQLDB = False
resp = self.client.get(url, HTTP_HOST=settings.MICROSITE_TEST_HOSTNAME) self.assertContains(resp, settings.MICROSITE_CONFIGURATION['test_microsite']['email_from_address'])
if all_students and student: return HttpResponseBadRequest( "all_students and unique_student_identifier are mutually exclusive." ) if all_students and delete_module: return HttpResponseBadRequest( "all_students and delete_module are mutually exclusive." )
- pattern: | CentOS \(2.6.32[^\n]+\n\s+root[^\n]+\n\)+
def __init__(self, func): self.func = func
from __future__ import absolute_import
user_course_ids = random.sample(range(TOTAL_COURSES_COUNT), USER_COURSES_COUNT)
cmd = 'Get-PSRepository "{0}"'.format(name) no_ret = _pshell(cmd) return name not in list_modules()
xqueue_interface = XQueueInterface("http://example.com/xqueue", Mock())
__virtualname__ = 'network'
self.assertNumContains(sql, 'tbl_tbsp', 1) self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 2)
from __future__ import absolute_import import os import time import subprocess
if not set(session_key).issubset(set(VALID_KEY_CHARS)): raise InvalidSessionKey( "Invalid characters in session key")
ax_arrays, bvalues, bitems = state[:3]
exp_doc_topic = np.exp(_dirichlet_expectation_2d(doc_topic_distr))
if (len(labels) == 1 and isinstance(self.obj[labels[0]].axes[0], MultiIndex)): item = labels[0] obj = self.obj[item] index = obj.index idx = indexer[:info_axis][0]
reg = svm.SVR(kernel='rbf', gamma=1).fit(X, y)
transaction.set_rollback(False) r2.save(force_update=True)
go_to_section("data_download")
raise KeyError('Cannot assign to module key {0} in the ' 'FunctionWrapper'.format(cmd))
else: ret = _load_result(existing, ret)
tree = etree.fromstring(u'<div>{}</div>'.format(html))
else: return _(u"Donation for {platform_name}").format(platform_name=settings.PLATFORM_NAME)
self.assertContains(resp, "super-ugly") self.assertContains(resp, "This file is only for demonstration, and is horrendous!")
ax = self.obj._get_axis(min(axis, self.ndim - 1)) return ax._convert_scalar_indexer(key, kind=self.name)
for attr in template_attrs: with self.assertRaises(AttributeError): getattr(unpickled_response, attr)
migrations_to_squash = [ loader.get_migration(al, mn) for al, mn in loader.graph.forwards_plan((migration.app_label, migration.name)) if al == migration.app_label ]
index = MultiIndex.from_arrays([np.arange(4000)] * 3) df = DataFrame(np.random.randn(4000), index=index, dtype=np.int64)
MobileApiConfig(video_profiles="youtube,mobile_high").save()
default_pprint = lambda x, max_seq_items=None: \ pprint_thing(x, escape_chars=('\t', '\r', '\n'), quote_strings=True, max_seq_items=max_seq_items)
loader = MigrationLoader(connection) graph = loader.graph targets = graph.leaf_nodes() plan = [] seen = set()
self.assertEqual(str(qs.query), str(qs.all().query))
is_active = models.BooleanField(default=True)
store = self._verify_modulestore_support(None, 'create_course') course = store.create_course(org, course, run, user_id, **kwargs)
with self.assertRaises(ValueError): with transaction.atomic(using='default'): marty.edited.add(dive)
self.assertFalse(BulkEmailFlag.feature_enabled(self.course.id)) response = self.client.get(self.url) self.assertNotIn(self.email_modal_link, response.content)
cls.settings_override = override_settings(**TEST_SETTINGS) cls.settings_override.enable() super(LiveServerBase, cls).setUpClass()
if len(ic): col_names = [r[0] if len(r[0]) and 'Unnamed' not in r[0] else None for r in header] else: col_names = [None] * len(header)
self.pdf.drawString( horizontal_padding_from_border, y_pos, _(u'Date: {date}').format(date=self.date) )
from __future__ import absolute_import import os
if is_categorical_dtype(items): return items.argsort(ascending=ascending)
self.assertEqual(formset.is_valid(), False) self.assertEqual(Poet.objects.count(), 1)
from django.forms import CharField, Form, Media, MultiWidget, TextInput from django.template import Context, Template from django.test import SimpleTestCase, override_settings from django.utils.encoding import force_text
from __future__ import absolute_import import logging
self.assertEqual(user_info["username"], self.user.username) self.assertEqual(user_info["email"], self.user.email)
CoursewareSearchIndexer.do_course_reindex(store, course.id) deleted_count = 1 + load_factor + (load_factor ** 2) + (load_factor ** 3) self.assert_search_count(course_size - deleted_count)
if result._get_axis(0).is_unique: result = result[key]
with connection.schema_editor() as editor: editor.create_model(AuthorWithEvenLongerName) editor.create_model(BookWithLongName) column_name = connection.ops.quote_name("author_foreign_key_with_really_long_field_name_id")
assert isinstance(sls_data, dict) assert isinstance(yml_data, dict) assert sls_data == yml_data
if style_dict.get('borders'): xl_format.set_border()
self.wait_for_element_absence(self.upload_image_popup_window_selector, 'upload dialog is hidden')
assert_raises(ValueError, precision_recall_fscore_support, [0, 1, 2], [1, 2, 0], average='mega')
response = client2.post(self.url, creds) self._assert_response(response, success=True)
attempt.delete() status = SoftwareSecurePhotoVerification.user_status(user) self.assertEquals(status, ('must_reverify', "No photo ID was provided."))
if valid_commands: if cmd not in valid_commands: target_room.message('Using {0} is not allowed.'.format(cmd)) return
if not self.obj.columns.is_unique and engine == 'python': raise NotImplementedError("columns.is_unique == False not " "supported with engine='python'")
def __setstate__(self, state): self._is_child = True args = state['args'] kwargs = state['kwargs'] self.__init__(*args, **kwargs)
names = []
errors = [] minions = [] for minion in response: minions.append(minion) if not response[minion]: errors.append(minion)
X2, Y2, p_c, p_w_c = make_multilabel_classification( n_samples=25, n_features=20, n_classes=3, random_state=0, allow_unlabeled=allow_unlabeled, return_distributions=True)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
result = ungettext(singular, plural, number)
settings.ALLOWED_HOSTS = ["the_valid_website.com"] with self.assertRaises(SuspiciousOperation): safe_get_host(request)
from __future__ import absolute_import import json try:
filter_func = filter_func or (lambda __: True)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
from __future__ import absolute_import
if not sparse.issparse(X) or has_sw: solver = 'cholesky' else: solver = 'sparse_cg'
values = self.block.get_values()
patcher = mock.patch('terrain.stubs.xqueue.post') self.post = patcher.start() self.addCleanup(patcher.stop)
url( r'^v1/blocks/{}'.format(settings.USAGE_KEY_PATTERN), BlocksView.as_view(), name="blocks_in_block_tree" ),
__virtualname__ = 'redis'
def dec(func): return self.filter(name, func, **flags) return dec
data = JUNK_FOOD_DOCS + NOTJUNK_FOOD_DOCS
(None, {'private': True}, {'private'}), ('', {'private': True}, {'private'}),
s = Series([(1, 1), (1, 2)])
image_pair = tuple(image_pair[0, :, :, :, 0])
'django.middleware.clickjacking.XFrameOptionsMiddleware',
assert_equal(hamming_loss(y1[0], y2[0]), sp_hamming(y1[0], y2[0]))
pass
sh_ = '/bin/sh' if os.path.isfile(os.path.join(root, 'bin/bash')): sh_ = '/bin/bash'
examples = examples[1:]
out, err = DETAILS['server'].sendline(cmd)
if connections[self.using].features.supports_transform: self.geo_field = self.geometry_field() else: transform = False
@ignore_warnings(category=DeprecationWarning) def test_verbose_first_level(): X = rng.randn(30, 5) X[:10] += 2 g = mixture.GMM(n_components=2, n_init=2, verbose=1)
ADVANCED_SECURITY_CONFIG = {}
estimator.fit(X_train)
self.courseware_page.visit() self.courseware_page.wait_for_page() self.assertTrue(element_has_text( page=self.courseware_page, css_selector=entrance_exam_link_selector, text='Entrance Exam' ))
if exc.winerror == 2: return target raise
try: os.makedirs(self._temp_folder) os.chmod(self._temp_folder, FOLDER_PERMISSIONS) except OSError as e: if e.errno != errno.EEXIST: raise e
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=rng)
from __future__ import unicode_literals
return self._time_has_obs.astype(int)
self.assertTrue(pkg_targets)
from salttesting import skipIf from salttesting.helpers import ( ensure_in_syspath, requires_salt_modules, requires_system_grains, destructiveTest, ) ensure_in_syspath('../../')
help=_("What format this module is in (used for deciding which " "grader to apply, and what to show in the TOC)"), scope=Scope.settings,
cmdline = salt.utils.shlex_split(_text[len(trigger):]) cmd = cmdline[0] args = [] kwargs = {}
student_answer = self.student_answers.get(choicegroup.get('id')) expl_id_for_student_answer = None
self.client.handler = POSTAccessingHandler()
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, )
delta = 2000 - year off = 6 * (delta // 100 + delta // 400) year = year + off
from __future__ import absolute_import
changes[namespace] = { 'new': config, 'old': update_config, }
if timed_exam.is_proctored_exam and not timed_exam.is_practice_exam: try: update_review_policy( exam_id=exam_id, set_by_user_id=timed_exam.edited_by, review_policy=timed_exam.exam_review_rules ) except ProctoredExamReviewPolicyNotFoundException:
nmi = State.objects.create(name='Northern Mariana Islands', poly=None) self.assertEqual(nmi.poly, None)
pass
self.channel = salt.transport.Channel.factory(self.opts['master_uri'])
assert_raises(ValueError, cv.fit, K_train.tolist(), y_train)
s = Series(randn(8), None)
self.assertFalse(self.course.teams_enabled)
from __future__ import absolute_import
for name, df2 in grp: new_vals = np.arange(df2.shape[0]) df.ix[name, 'new_col'] = new_vals
curl -sSk https://localhost:8000/login \\ -c ~/cookies.txt \\ -H 'Accept: application/x-yaml' \\ -d username=saltdev \\ -d password=saltdev \\ -d eauth=auto
states[migration] = state state = migration.mutate_state(state, preserve=True) migrations_to_run.remove(migration)
self.youtube_configuration.update({ 'time_to_response': 2.0, 'youtube_api_blocked': True, })
user = request.user
assert_raises(ValueError, cval.StratifiedShuffleSplit, y, train_size=2) assert_raises(ValueError, cval.StratifiedShuffleSplit, y, test_size=2)
X -= X.min()
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.django_book])
self.series[5:15] = np.NaN
self.assert_payload_contains_ids(load_video_event)
if ver < '0.8.2': from sqlalchemy import BigInteger from sqlalchemy.ext.compiler import compiles
class CustomTzName(timezone.UTC): name = ''
to_rep_re = regex and com.is_re_compilable(to_replace)
import logging import re
raise CommandError(e)
world.visit('/') course_link_css = 'a.course-link' world.css_click(course_link_css) course_title_css = 'span.course-title' assert_true(world.is_css_present(course_title_css))
g[['A', 'C']]
self.submission = "a=1" + self.unique_id[0:5]
return response
VerificationCheckpoint.get_or_create_verification_checkpoint(course_key, related_assessment_location)
ADD_USER = __random_string() DEL_USER = __random_string() PRIMARY_GROUP_USER = __random_string() CHANGE_USER = __random_string()
if self.op == '/' and env.scope['truediv']: self.func = op.truediv
frame['H'] = np.random.randn(N) tm.assertIsInstance(frame['H'], SparseSeries)
if tasks.environment.dry_run: tasks.environment.info("install npm_assets") return
res = grainsmod.filter_by(dict2, grain='xxx', base='default') self.assertEqual(res, dict2['default'])
return self.is_acquired
xdata, y_values = lines[0].get_data(orig=False)
lat = RTOD * (2 * atan(exp((px[1] - npix) / (-1.0 * self._radpp[zoom]))) - 0.5 * pi)
return element.is_displayed() and all(size > 0 for size in element.size.itervalues())
FEATURES['ENABLE_S3_GRADE_DOWNLOADS'] = True FEATURES['ALLOW_COURSE_STAFF_GRADE_DOWNLOADS'] = True
Book.authors.through.objects.using('default').delete()
lp_model = label_propagation.LabelSpreading(gamma=0.25, max_iter=5) lp_model.fit(X, y_train) predicted_labels = lp_model.transduction_[unlabeled_set] true_labels = y[unlabeled_set]
rng = np.random.RandomState(0)
local_branch = local_rev = None
languages_data_folder = sys.argv[1] dataset = load_files(languages_data_folder)
self.url = reverse('instructor_dashboard', kwargs={'course_id': self.course_key.to_deprecated_string()}) self.email_link = '<a href="" data-section="send_email">Email</a>'
cohort_name = 'I AM A RANDOM COHORT' data = {'name': cohort_name, 'assignment_type': CourseCohort.RANDOM} response_dict = self.put_handler(self.course, data=data)
instructor_task = self._create_entry() succeeded, message = get_task_completion_info(instructor_task) self.assertFalse(succeeded) self.assertEquals(message, "No status information available")
__virtualname__ = 'augeas'
self._auto_auth({'username': 'test', 'course_id': course_id})
return HttpResponseBadRequest(u'Could not parse request JSON.')
with self.assertRaises(TemplateSyntaxError): Variable("article._hidden")
(makeFY5253LastOfMonthQuarter(1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1), datetime(2011, 4, 2), True),
@property def shell(self): "Returns the shell of this Polygon."
P = noise + X_dense P = theano.tensor.switch(P > 0, 1, 0) P = tensor.cast(P, theano.config.floatX)
__virtualname__ = 'logstash'
backend = "multiprocessing"
from __future__ import unicode_literals
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath ensure_in_syspath('../../')
response = self.client.get(reverse('admin:admin_views_language_changelist'), {'o': '-1'}) self.assertContentBefore(response, link1, link2)
for label in np.unique(labels): assert_equal(len(np.unique(folds[labels == label])), 1)
sorted_grid_scores = list(sorted(search.grid_scores_, key=lambda x: x.mean_validation_score)) best_score = sorted_grid_scores[-1].mean_validation_score assert_equal(search.best_score_, best_score)
import salt.utils import salt.utils.pagerduty from salt.ext.six import string_types
for k in tstore.keys(): if tstore.get_storer(k).is_table: new_t = tstore.get_storer(k) orig_t = store.get_storer(k)
request = HttpRequest()
from __future__ import print_function from __future__ import absolute_import import os import logging
assert_array_almost_equal(clf.scores_[2], clf1.scores_[2]) assert_array_almost_equal(clf.intercept_[2:], clf1.intercept_) assert_array_almost_equal(clf.coef_[2][np.newaxis, :], clf1.coef_)
X, y = make_classification(n_samples=200, n_features=20, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, flip_y=0.0, class_sep=10, shuffle=False, random_state=0)
page_kwarg = self.kwargs.get(self.paginator.page_query_param) page_query_param = self.request.query_params.get(self.paginator.page_query_param) return page_kwarg or page_query_param or 1
__grains__ = grains
from __future__ import absolute_import
resp_asset = post_asset_update(False, course) self.assertFalse(resp_asset['locked']) verify_asset_locked_state(False)
for i in xrange(len(p)): assert p[i] == precision[i], (i, p[i], precision[i]) assert recall[i] == recall[i]
self.reset_tracker()
import logging import sys import xml.etree.ElementTree as ET
Microsite.objects.all().delete() microsite.clear() microsite.set_by_domain('unknown') self.assertIsNone(microsite.get_value('platform_name'))
with self.assertRaises(FieldError): Book.objects.all().aggregate(num_authors=Count('foo'))
if county_feat: qs = CountyFeat.objects.filter(name=name) self.assertEqual(n, qs.count())
ndims = set() for obj in objs: if not isinstance(obj, NDFrame): raise TypeError("cannot concatenate a non-NDFrame object")
from __future__ import unicode_literals
result = f.clean('2010-12-21 13:30:05') self.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))
scaler = StandardScaler(with_mean=False).fit(X) scaler_incr = StandardScaler(with_mean=False)
d = TreeEstimator(random_state=0, max_depth=max_depth).fit(X, y) s = TreeEstimator(random_state=0, max_depth=max_depth).fit(X_sparse, y)
func_code, source_file, first_line = get_func_code(self.func) func_dir = self._get_func_dir() func_code_file = os.path.join(func_dir, 'func_code.py')
for idx in [['D', 'F'], ['A', 'C', 'B']]: verify_first_level(df, 'jim', idx, check_index_type=False)
deconstructed = deconstructed[1:]
for key, matrix in matrices.items(): del result[key]
pass
course_fixture.add_children(*[ self._build_fixture(self.UnitState(*state)) for state in itertools.product(*features) ])
choicegroup = mult_choice_response.xpath('./choicegroup[@type="MultipleChoice"]')[0] choices_list = list(choicegroup.iter('choice'))
ext_user = User.objects.get(email=self.ext_user.email) self.assertFalse(auth.user_has_role(ext_user, CourseInstructorRole(self.course.id)))
mi1.set_levels(levels2, inplace=True) assert_almost_equal(mi1.values, vals2)
self.assertContains( response, "<article class=\"course {}\">".format(self.MODE_CLASSES[status]) )
comb = self.frame.combineMult(self.frame)
self.assertRegexpMatches(ret, r'^\d{12}$')
from __future__ import absolute_import
if getattr(self, 'video_speed_optimizations', True) and cdn_url: branding_info = BrandingInfoConfig.get_config().get(self.system.user_location)
if is_iterator(key): raise InvalidIndexError(key) else: raise e1
for klass in instance_count: instance_count[klass] = klass.objects.count()
self.student_answers = convert_files_to_filenames(answers) return self._grade_answers(answers)
for layer in ds: self.assertEqual(len(layer), source.nfeat)
self.assertFalse(original.has_duplicates)
response = self._generate( course_key=self.EXISTED_COURSE_KEY_2, username=self.STUDENT_USERNAME ) self.assertEqual(response.status_code, 400)
try: from keystoneclient.apiclient.exceptions import \ Unauthorized as kstone_Unauthorized from glanceclient.exc import \ HTTPUnauthorized as glance_Unauthorized HAS_DEPENDENCIES = True except ImportError: HAS_DEPENDENCIES = False
import salt.config import salt.auth import salt.client import salt.runner import salt.wheel import salt.utils import salt.syspaths as syspaths from salt.utils.event import tagify from salt.exceptions import EauthAuthenticationError
from __future__ import absolute_import import logging
result = df.unstack(fill_value=0.5)
result = df.drop_duplicates(('AA', 'AB')) expected = df[:2] tm.assert_frame_equal(result, expected)
result = self.bseries + self.bseries.to_dense() tm.assert_sp_series_equal(result, self.bseries + self.bseries)
setattr(self.options, option.dest, cli_config[option.dest]) option.explicit = True
pass
import salt.netapi
raise NotImplementedError("Unable to send refund processing emails to microsite teams.")
if return_type not in BoxPlot._valid_return_types: raise ValueError("return_type must be {None, 'axes', 'dict', 'both'}")
state_below=dbm.hidden_layers[-2].upward_state(H_hat[-1])))
self.assertEqual(res.context['next_day'], None) self.assertEqual(res.context['previous_day'], datetime.date(2008, 10, 1))
if process_manager._process_map.keys(): process_manager.send_signal_to_processes(signal.SIGILL) process_manager.stop_restarting() process_manager.kill_children()
builtin_deploy_dir = os.path.join( os.path.dirname(__file__), 'deploy' )
from django.db import migrations, models
XBLOCK_MIXINS = ( LmsBlockMixin, InheritanceMixin, XModuleMixin, EditInfoMixin, AuthoringMixin, )
class ConnectionCreatedSignalTest(TransactionTestCase):
StudentViewTransformer.collect(block_structure) BlockCountsTransformer.collect(block_structure) BlockDepthTransformer.collect(block_structure) BlockNavigationTransformer.collect(block_structure)
from __future__ import unicode_literals
self.cert.mode = 'audit' self.cert.status = status self.cert.save()
return False
result = np.asarray(result, dtype=bool)
from salt.modules import ilo
if not path or not os.path.isfile(path): return ret
course_names = self.dashboard_page.wait_for_page().available_courses self.assertIn(self.course_info["display_name"], course_names)
eps = 0.8 min_samples = 10
super(Syndic, self).destroy() if hasattr(self, 'local'): del self.local
score = estimator.predict_proba(X)[:, 1]
answers = ["Second", "Third", "Fourth"] problem = self.build_problem(answer="sample_answer", case_sensitive=False, additional_answers=answers)
if ax is None: import matplotlib.pyplot as plt ax = plt.gca()
response = requests.post(self.url, data={"test_param": 2}) self.assertEqual(response.status_code, 200)
columns = self._maybe_make_multi_index_columns(columns, self.col_names)
import salt.utils import salt.utils.url from salt.exceptions import CommandExecutionError from salt.ext import six
dbm = make_random_basic_binary_dbm( rng = rng, pool_size_1 = pool_size_1, )
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch
result = obj.groupby( self.grouper, axis=self.axis).aggregate(how, **kwargs)
lars = Lars(fit_intercept=False, verbose=verbose, normalize=False, precompute=gram, n_nonzero_coefs=int(regularization), fit_path=False) lars.fit(dictionary.T, X.T, Xy=cov) new_code = lars.coef_
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salt.modules import cpan cpan.__grains__ = {} cpan.__salt__ = {} cpan.__context__ = {}
with warnings.catch_warnings(record=True) as recorded_warnings: raise_named_version_warning() self.assertEqual( 'Deprecation Message!', str(recorded_warnings[0].message) )
for student in students[:]: CertificateWhitelistFactory.create(user=student, course_id=self.course.id, whitelist=True)
AutoAuthPage(self.browser, course_id=self.course_id).visit()
ridge_gcv.fit(filter_(X_diabetes), y_diabetes) alpha_ = ridge_gcv.alpha_ ret.append(alpha_)
ssh_gateway_username: root
ssh_gateway: gateway.example.com
SEARCH_SKIP_ENROLLMENT_START_DATE_FILTERING = True
HAS_SVN = False try: import pysvn HAS_SVN = True CLIENT = pysvn.Client() except ImportError: pass
if isinstance(data, mrecords.MaskedRecords): mgr = _masked_rec_array_to_mgr(data, index, columns, dtype, copy)
_update_context_with_user_info(context, user, user_certificate)
tx_cities = ['Downtown Houston', 'Southside Place'] au_cities = ['Mittagong', 'Shellharbour', 'Thirroul', 'Wollongong']
copy_Gram = True
def f(): df.ix[4, 'c'] = [0, 1, 2, 3]
try: func(*stats_args) result = smin.value, smax.value, smean.value, sstd.value except GDALException: result = (None, None, None, None)
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
response = self.client.get('/syndication/atom/') feed = minidom.parseString(response.content).firstChild updated = feed.getElementsByTagName('updated')[0].firstChild.wholeText
available_version = salt.utils.alias_function(latest_version, 'available_version')
fstypes.add('*')
order = [1, 2, 0, 3] for df in [self.mixed_float, self.mixed_int]:
logrotate.__salt__ = {}
from __future__ import unicode_literals
series = self.frame.xs('A', axis=1) expected = self.frame['A'] assert_series_equal(series, expected)
from __future__ import absolute_import
self.store.mappings.clear() library = self.store.get_library(library_key) self.assertEqual(library.location.library_key, library_key)
reset_student_attempts( self.course_key, user, problem_location, requesting_user=user, delete_module=True, )
on_course_publish(self.course.id) requirements = get_credit_requirements(self.course.id, namespace="reverification") self.assertEqual(len(requirements), 0)
from __future__ import absolute_import
course_key = CourseKeyField(max_length=255, db_index=True)
for asset in assets: self.assertEquals(asset['displayname'], asset_displayname)
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
to_input = self.to_input(batch) return self.orig_view_converter.get_formatted_batch(to_input, dspace)
if issparse(example): example = example.toarray()
import salt.utils from salt.utils import files as util_files
parent = self.modulestore.get_parent_location( as_published(location), ModuleStoreEnum.RevisionOption.published_only if location.revision is None else ModuleStoreEnum.RevisionOption.draft_preferred )
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
if power: vb_start_vm(vm_name, timeout=boot_timeout) ips = vb_wait_for_network_address(wait_for_ip_timeout, machine_name=vm_name)
timestamps = _convert_timezones(timestamps)
result = df.drop_duplicates('A') expected = df.ix[[0, 2, 3]] tm.assert_frame_equal(result, expected)
small_width = models.IntegerField(default=375) small_height = models.IntegerField(default=200)
i = np.array([1, 2, 3]) a = DataFrame(i, index=i) _check_plot_works(a.plot, xerr=a) _check_plot_works(a.plot, yerr=a)
idx = self.panel.major_axis[0] - bday self.assertRaises(Exception, self.panel.major_xs, idx)
verify_file_presence(False)
self.fake_payment_page.submit_payment()
if ret['result'] and not schanged: msg = _format_terse(tcolor, comps, ret, colors, tabular) hstrs.append(msg) continue
assert_raises(ValueError, _fast_dot, A, A)
preprocessor = ZCA(filter_bias=0.0, n_drop_components=2) preprocessed_X = self.get_preprocessed_data(preprocessor) assert_allclose(zca_truncated_X, preprocessed_X, rtol=1e-3)
si = _get_si()
upload_csv_to_report_store(csv_rows, 'course_survey_results', course_id, start_date)
user_list[0].course_groups.add(*cohort_list) user_list[0].course_groups.clear() assert_events("removed", user_list[:1], cohort_list) mock_tracker.reset_mock()
df = tm.makeDataFrame() store.append('df', df)
with Timer() as iteration_over_courses_time_2: courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(len(courses_list), USER_COURSES_COUNT)
mongo_course1_id = self.import_and_populate_course()
content = contentstore().find(asset_key, throw_on_not_found=False) self.assertIsNone(content)
raise
updates[sum_square_grad] = new_sum_squared_grad updates[param] = param + delta_x_t
#def file_list_emptydirs(load):
self.mean_ = np.mean(X, axis=0) X -= self.mean_
o1 = ManualPrimaryKey(primary_key="abc123", name="primary") o1.save() o2 = RelatedModel(link=o1, name="secondary") o2.save()
assert_greater(np.mean(pred == iris.target), .9)
'debug_toolbar_mongo',
final_df._data = final_df._data.downcast(dtypes='infer')
time.sleep(0.5)
import logging import json
import salt.ext.six as six
is_verified = cache_values.get(enrollment_cache_key) if is_verified is None: is_verified = CourseEnrollment.is_enrolled_as_verified(user, course_key) cache.set(enrollment_cache_key, is_verified)
result = self.get_team_detail(self.solar_team.team_id, 200, {'expand': 'user'}) self.verify_expanded_private_user(result['membership'][0]['user'])
t = Template('{% load i18n %}{% blocktrans context "unexisting" %}May{% endblocktrans %}') rendered = t.render(Context()) self.assertEqual(rendered, 'May')
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
solr.__salt__ = {} solr.__opts__ = {}
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
self.assertNotIn(npath(filename), autoreload.gen_filenames()) self.assertNotIn(npath(filename), autoreload.gen_filenames())
text = f.widget.format_value(result) self.assertEqual(text, "01:30:00 PM")
if not self._verify_auth(): self.redirect('/login') return
yield
PROVIDER_NAME = "override" PROVIDER_BACKEND = "override" PROVIDER_ID = "override" USER_EMAIL = "override" USER_NAME = "override" USER_USERNAME = "override"
from __future__ import absolute_import
user=user, course_id=course.location.course_key, status=CertificateStatuses.downloadable
oob_error = 1 - clf.oob_score_ error_rate[label].append((i, oob_error))
from salt.pillar import Pillar import salt.utils import salt.utils.s3 as s3
module.system.user_is_staff = True
pass #destroy(vm_['name'])
if __pub_jid and python_shell is None: return True elif __opts__.get('cmd_safe', True) is False and python_shell is None: return True
import contextlib import errno import logging import os import shutil import subprocess import time
from salttesting.helpers import ensure_in_syspath, destructiveTest from salt.ext.six.moves import range ensure_in_syspath('../../')
for scaling in [2, 0.3]: assert_almost_equal( weighted_score, metric(y1, y2, sample_weight=sample_weight * scaling), err_msg="%s sample_weight is not invariant " "under scaling" % name)
class HiddenForm(Form): data = IntegerField(widget=HiddenInput)
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(self.INSTANCE_NAME))
if not isnull(new_values).all(): values = new_values
rng = np.random.RandomState(0) X = generate_clustered_data(n_clusters=3, n_features=3, n_samples_per_cluster=10)
job_finished = True
time.sleep(10)
list_updates = salt.utils.alias_function(list_upgrades, 'list_updates')
import os import re import logging from salt.ext.six.moves import zip import salt.ext.six as six
When(integer=1, then=Value(timedelta(1), output_field=models.DurationField())), When(integer=2, then=Value(timedelta(2), output_field=models.DurationField())),
raise CommandError(_( 'Invalid permission option: "{}". Please specify permissions ' 'using the format: app_label:model_name:permission_codename.' ).format(permission))
self._test_file_time_getter_tz_handling_on(getter) self._test_file_time_getter_tz_handling_off(getter)
'API': 'https://www.youtube.com/iframe_api',
from salt.textformat import TextFormat from salt.log.handlers import (TemporaryLoggingHandler, StreamHandler, SysLogHandler, FileHandler, WatchedFileHandler, QueueHandler) from salt.log.mixins import LoggingMixInMeta, NewStyleClassMixIn
for visible in self.VISIBLE_CONTENT[user_tag]: self.assertIn(visible, content)
existing_group_id, _ = cohorts.get_group_info_for_cohort(cohort) if existing_group_id is not None: unlink_cohort_partition_group(cohort)
STATIC_ROOT_BASE = ENV_TOKENS.get('STATIC_ROOT_BASE', None) if STATIC_ROOT_BASE: STATIC_ROOT = path(STATIC_ROOT_BASE)
if self.exc_info: exc_info = self.exc_info self.exc_info = None six.reraise(*exc_info)
cv_iter = list(cv_iter) scorer = check_scoring(estimator, scoring=scoring)
CourseEnrollmentFactory(user=self.student, course_id=self.course.id)
while listening_to_events: print ws.recv()
if not configured_probes: return { 'add': expected_probes }
r, _ = _maybe_upcast(result, fill_value=other, copy=True) np.place(r, mask, other)
ret.update(set( [x for x in _get_sysv_services() if not _sysv_enabled(x)] )) return sorted(ret)
X = np.atleast_2d([1., 3., 5., 6., 7., 8.]).T
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON
from salt.modules import sdb
self.provider.enable_integration = True self.provider.save()
if crypt.crypt('', '') is None: crypt = None
if d_yard in self.lane_stack.value.nameRemotes: self.lane_stack.value.transmit(msg, self.lane_stack.value.nameRemotes[d_yard].uid) return return
y_pred = self.init_.predict(X) begin_at_stage = 0
resp = self.client.post('/courses/def/abc/in_valid/generate_user_cert') self.assertEqual(resp.status_code, HttpResponseBadRequest.status_code) self.assertIn("Course is not valid", resp.content)
if line_stripped.startswith('#'): output.extend([line]) continue
import salt import salt.netapi
import salt.utils
salt '*' vsphere.get_service_policy my.esxi.host root bad-password 'ssh'
'master_job_cache': str,
import integration import salt.utils
if parent_url is not None and index is not None: course_key = descriptor.location.course_key parent_location = course_key.make_usage_key_from_deprecated_string(parent_url)
import integration
pruned_block_relations = defaultdict(_BlockRelations) old_block_relations = self._block_relations
cast = (self.size().fillna(0) > 0).any()
if com.is_categorical_dtype(x.dtype): return x.get_values() return x.ravel()
if self._extra and rhs._extra: raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")
from salt.modules import virt from salt.modules import config from salt._compat import ElementTree as ET import salt.utils
class PedanticField(forms.Field): def to_python(self, value): raise ValidationError('Whatever')
self.assertIsNotNone(re.search(r' geom = models.PolygonField\(([^\)])*\)', model_def))
def __getstate__(self): return {}
for status in ["submitted", "must_retry", "approved"]: attempt.status = status attempt.save() assert_true(SoftwareSecurePhotoVerification.user_has_valid_or_pending(user), status)
return response
frgd_arr = to_array(frgd_img) mask_arr = frgd_arr > 0.1
([]),
with dog_stats_api.timer('instructor_tasks.time.overall', tags=[u'action:{name}'.format(name=action_name)]): task_progress = task_fcn(entry_id, course_id, task_input, action_name)
if __opts__.get('requests_lib', False): from requests.exceptions import HTTPError else: from urllib2 import HTTPError
from salt.modules import aliases from salt.exceptions import SaltInvocationError
with salt.utils.fopen(file_path): plist = plistlib.readPlist(true_path)
self.payment_and_verification_flow.immediate_verification()
if xblock.fields['visible_to_staff_only'].is_set_on(xblock): return xblock
QualityControl.objects.create( headline="Problems in Django", pub_date=datetime.datetime.now(), quality=10, assignee="adrian")
pipeline.items.append( preprocessing.ExtractPatches(patch_shape=(8, 8), num_patches=150000) )
CourseEnrollment.unenroll(self.student, self.CERT_COURSE_KEY)
self.assertEqual(context['currency_symbol'], '$') self.assertEqual(context['currency'], 'usd')
from __future__ import absolute_import import logging
self.user.set_password('test') self.user.save()
if draft_node.parent_location is None: continue
g = wkb_r().read(geo_input)
from urllib.request import urlopen
self.chapter = ItemFactory.create( parent_location=self.course.location, category='chapter', display_name='untitled chapter' )
td = Series(date_range('2012-1-1', periods=3, freq='D')) - \ Timestamp('20120101')
figsize = self.cell_width * hcells, self.cell_height * vcells
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self.assertEqual(np.round(df['f64'].iloc[0], 14), np.round(res['f64'].iloc[0], 14))
import salt.utils
cached_file = __salt__['cp.is_cached'](cache_file, saltenv) if not cached_file: cached_file = __salt__['cp.cache_file'](cache_file, saltenv)
continue
lw = LedoitWolf(store_precision=False) lw.fit(X) assert_almost_equal(lw.score(X), score_, 4) assert(lw.precision_ is None)
result = df.ix[:, :np.int32(3)] expected = df.reindex(columns=df.columns[:3]) assert_frame_equal(result, expected)
retcode = 1
SETTINGS_MODULE = None
xblock = self.store.create_item( self.user_id, test_course.id, 'vertical', block_id='test_vertical' )
if self.is_active and self.is_superuser: return True
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(boston.data, boston.target, random_state=rng)
ret['changes'] = {name: __salt__['chocolatey.uninstall'](name, version, uninstall_args, override_args)}
value = default
os.remove(test_database_name)
if save_definition: return _save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=task_definition.Principal.UserID, password=None, logon_type=task_definition.Principal.LogonType)
log = logging.getLogger(__name__)
b = Book.objects.create(title="Pro Django", published=datetime.date(2008, 12, 16)) p = Person.objects.create(name="Marty Alchin")
for c in City.objects.annotate(num_points=functions.NumPoints('point')): self.assertEqual(1, c.num_points)
#html_use_smartypants = True
self.xblock.location = Location("org", "import", "run", "category", "stubxblock")
power = reduce(lambda a, b: b ** a, parse_result) return power
_ALL_ONES = (2**IPV4LENGTH) - 1 _DECIMAL_DIGITS = frozenset('0123456789')
field.clean([1, None], None)
self.reset_password_page.visit()
enrollments = self._create_enrollments(solo_course_id, shared_course_id) meter = utils.ProgramProgressMeter(self.user, enrollments)
mirrored_aliases[alias] = test_settings['MIRROR']
return False
moments_1[k] = moments_1[i] + moments_1[j] moments_2[k] = moments_2[i] + moments_2[j]
from StringIO import StringIO
q = Tag.objects.filter(parent__isnull=True)
if PY3: str(ci) else: compat.text_type(ci)
delete_index, = np.where(unlabeled_indices == image_index) delete_indices = np.concatenate((delete_indices, delete_index))
freq = result.index.freq tm.assert_equal(freq + Day(1), Day(2))
if regedit: return rehash() else: return False
mean_proba = np.zeros((X.shape[0], len(self.classes_))) for calibrated_classifier in self.calibrated_classifiers_: proba = calibrated_classifier.predict_proba(X) mean_proba += proba
from __future__ import absolute_import
text = f.widget.format_value(result) self.assertEqual(text, "13:30:00")
X, y = hastie_X, hastie_y ForestEstimator = FOREST_ESTIMATORS[name] clf = ForestEstimator(n_estimators=5, max_depth=3, warm_start=True, random_state=1) clf.fit(X, y)
return _graph_connected_component(graph, 0).sum() == graph.shape[0]
result = store.select('p4d', ['labels=l1']) expected = p4d.reindex(labels=['l1']) assert_panel4d_equal(result, expected)
__virtualname__ = 'gnome'
return modulestore().update_item(xblock, user.id)
with ensure_clean_store(self.path) as store: df = tm.makeDataFrame()
raise ValueError("Cannot use a custom kernel function. " "Precompute the kernel matrix instead.")
class SongForm(Form): name = CharField() composers = MultipleChoiceField()
self.assertEqual(apps.get_model('admin', 'loGentrY'), LogEntry) with self.assertRaises(LookupError): apps.get_model('Admin', 'LogEntry')
for opt in ssl_option: key = next(six.iterkeys(opt))
del __context__['pagerduty_util.resource_cache'][resource_name] return _query(method='POST', action=resource_name, data=data, profile=profile, subdomain=subdomain, api_key=api_key)
self.assert_index_equal(idx[0:4], result.insert(0, idx[0]))
content_object = GenericForeignKey()
sp = SparseDataFrame(self.frame.values)
@context_cache def _test_set_cache(): pass _test_set_cache()
c1 = Counter(name="two", value=2) with self.assertRaises(ValueError): with transaction.atomic(): c1.save(force_update=True) c1.save(force_insert=True)
ModeCreationPage( self.browser, self.course_id, mode_slug=u'verified', mode_display_name=u'Verified Certificate', min_price=10, suggested_prices='10,20' ).visit()
registration_code_redemption = RegistrationCodeRedemption.registration_code_used_for_enrollment( course_enrollment) paid_course_reg_item = PaidCourseRegistration.get_course_item_for_user_enrollment( user=user, course_id=course_id, course_enrollment=course_enrollment )
import integration import salt.utils
import salt.utils
from salt import cloud, defaults
AUTH_PROVIDERS = ('pygit2',) AUTH_PARAMS = ('user', 'password', 'pubkey', 'privkey', 'passphrase', 'insecure_auth')
self.assertRaises(Exception, func, p1, tp)
if salt.utils.is_windows(): return (False, 'The network execution module cannot be loaded on Windows: use win_network instead.') return True
for key in list(__context__): try: if key.startswith('validation.docker.'): __context__.pop(key) except AttributeError: pass
verify_date_or_time(COURSE_START_TIME_CSS, DUMMY_TIME)
bandwidth = config.get_cloud_config_value( 'bandwidth', vm_, __opts__, default=1800 ) kwargs['prices'].append({'id': bandwidth})
from __future__ import unicode_literals
flags = [('Name', name)]
activations = [X] activations.extend(np.empty((batch_size, n_fan_out)) for n_fan_out in layer_units[1:]) deltas = [np.empty_like(a_layer) for a_layer in activations]
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath
return False
return self._reject(request, REASON_NO_CSRF_COOKIE)
return False
this_extensions = deepcopy(extensions)
td_as_int = [1, 2, 3, 4]
PYTHON_COVERAGERC = REPO_ROOT / ".coveragerc"
val = value.reindex_axis(v, axis=axis)
self.assertRaises(ValueError, lambda: Timedelta('10 days -1 h 1.5m 1s 3us'))
classes = np.unique(y)
self.assertTrue(self.cohort_management_page.is_category_selected())
classes = np.unique(y) classes = (classes[classes != -1]) self.classes_ = classes
if HAS_GEOMETRY_COLUMNS: self.assertGeometryColumnsCount(2)
self.distribution.running_salt_sdist = True self.distribution.salt_version_hardcoded_path = os.path.join( base_dir, 'salt', '_version.py' ) self.run_command('write_salt_version')
if schema_attr is None: cret = __salt__['postgres.schema_create'](dbname, name, owner=owner, **db_args) else: msg = 'Schema {0} already exists in database {1}' cret = None
result = ci.insert(0, 'a') expected = CategoricalIndex(list('aaabbca'), categories=categories) tm.assert_index_equal(result, expected, exact=True)
#)
if 'X-Edx-Api-Key' in self.headers: response = self.server._response_str logger.debug("Comment Service: sending response %s", json.dumps(response))
if self.backward: self.setup_response_backward() return
attempts_left_open = CapaFactory.create(showanswer='past_due', max_attempts="1", attempts="0", due=self.tomorrow_str) self.assertFalse(attempts_left_open.answer_available())
@doctest In [2]: x.upper() Out[2]: 'HELLO WORLD'
def start(self): pass
self.m2m_data = None
EDXNOTES_PUBLIC_API = 'http://localhost:8120/api/v1' EDXNOTES_INTERNAL_API = 'http://localhost:8120/api/v1'
self.assertEqual(self.series[self.series.idxmin()], self.series.min()) self.assertTrue(isnull(self.series.idxmin(skipna=False)))
pieces["short"] = mo.group(3)
clf = NearestCentroid() clf.fit(X_csr, y) assert_array_equal(clf.predict(T_csr), true_result)
self.assertTrue(self.coach_dashboard_page.is_browser_on_enrollment_page())
from __future__ import absolute_import, print_function, generators import os import copy import glob import time import signal import logging import traceback import multiprocessing import sys from itertools import groupby
qs = Book.objects.annotate(avg_price=Avg('price')).aggregate( publisher_awards=Sum('publisher__num_awards') ) self.assertEqual(qs['publisher_awards'], 30)
'captionDataDir': getattr(self, 'data_dir', None),
perf_test = True
self.progress_page.visit() self.tab_nav.go_to_tab('Home')
if has_access(user, u'staff', descriptor.location, course_id): system.error_descriptor_class = ErrorDescriptor else: system.error_descriptor_class = NonStaffErrorDescriptor
tm.assert_index_equal(s.index, ds.index)
self.assertIn("Error", resp.content)
thumbnail_content, thumbnail_location = static_content_store.generate_thumbnail(content)
managed = False
for i in fxs: l.append(feature_names[i]) names.append(l)
_check_align(self.ts[:-5], self.ts[:0], how=kind) _check_align(self.ts[:-5], self.ts[:0], how=kind, fill=-1)
axes = df.plot.hist(rot=50, fontsize=8, orientation='horizontal') self._check_ticks_props(axes, xrot=0, yrot=50, ylabelsize=8)
import copy import logging import hashlib import os
procedure_fmt = '%(geo_col)s,%(geom)s'
if column_name in indexes: if indexes[column_name]['primary_key']: extra_params['primary_key'] = True elif indexes[column_name]['unique']: extra_params['unique'] = True
level_names = [level.name for level in self.index.levels] self.check_level_names(self.index, self.index.names)
ignore_warnings(lshf.partial_fit)(X) assert_array_equal(X, lshf._fit_X)
raise NotImplementedError()
if self.runtime.user_is_staff: msg = u"Staff debug info: {tb}".format(tb=cgi.escape(traceback.format_exc()))
return False
from salt.states import boto_elb
import os import logging import json
self.login_page.login(email=email, password=password)
@ignore_warnings def test_explained_variance(): rng = np.random.RandomState(0) n_samples = 100 n_features = 80
return list(result)
('arg', [1234]), ('kwarg', {'ext_source': 'redis'}),
else: ret = _load_result(new, ret)
v, W = v[::-1], W[:, ::-1] return v, W
except: pass
}, "formats": { },
self.payment_and_verification_flow.next_verification_step(self.immediate_verification_page)
instance.set_grading_policy(policy)
raise NotImplementedError("number of dimensions is currently " "limited to 3")
is_increasing = y_[0] < y_[-1] assert_false(is_increasing)
self.components_ = self._make_random_matrix(self.n_components_, n_features)
raise InvalidMigrationPlan( "Migration plans with both forwards and backwards migrations " "are not supported. Please split your migration process into " "separate plans of only forwards OR backwards migrations.", plan )
cov = pca.get_covariance() precision = pca.get_precision() assert_array_almost_equal(np.dot(cov, precision), np.eye(X.shape[1]), 12)
with warnings.catch_warnings(): warnings.filterwarnings("ignore", message=".*(empty slice|0 for slice).*", category=RuntimeWarning)
ensure_in_syspath('../../') from salt.modules import ssh from salt.exceptions import CommandExecutionError
answers = ["Second", "Third", "Fourth"]
self.run_function('assistive.install', [OSA_SCRIPT, True])
if keep_descendants: for child in children: for parent in parents: self._add_relation(parent, child)
from __future__ import absolute_import, print_function import re import sys import platform
DTOR = pi / 180. RTOD = 180. / pi
from __future__ import absolute_import
model.tag[self._tag_key]['best_cost'] = self.best_cost
assert_is_none(SoftwareSecurePhotoVerification.active_for_user(user))
self.assertEqual(first_request["parameters"]["course_num"], self.course_key.course) self.assertEqual(second_request["parameters"]["course_num"], other_course_key.course)
settings.DEFAULT_TEMPLATE_ENGINE['DIRS'] = [ path for path in settings.DEFAULT_TEMPLATE_ENGINE['DIRS'] if path != settings.MICROSITE_ROOT_DIR ]
self.assertEqual(self.series[self.series.idxmax()], self.series.max()) self.assertTrue(isnull(self.series.idxmax(skipna=False)))
pass
compare(slice('2011-01-01', '2011-01-6')) compare(slice('2011-01-06', '2011-01-8')) compare(slice('2011-01-06', '2011-01-12'))
parsed = urlparse.urlparse(constructed) params = urlparse.parse_qs(parsed.query)
log.warning( "Error while previewing formula", exc_info=True ) result['error'] = _("Error while rendering preview")
remove_user_from_cohort(cohorts[cohort_index], self.user.username)
graph = image.img_to_graph(face)
from __future__ import absolute_import import logging
for op in ['skew', 'kurt', 'sem', 'prod']: self.assertRaises(TypeError, getattr(td, op))
opattern = re.compile(r'([\-]?\d*)\s*([A-Za-z]+([\-@][\dA-Za-z\-]+)?)')
try: import etcd from urllib3.exceptions import ReadTimeoutError, MaxRetryError HAS_LIBS = True except ImportError: HAS_LIBS = False
import salt.utils from salt.exceptions import CommandExecutionError
beta = np.array(self.beta0)
DEFAULT_ATTACHMENT_MIME_TYPE = 'application/octet-stream'
clf = PassiveAggressiveClassifier(C=0.1, n_iter=100, class_weight={1: 0.001}, random_state=100) clf.fit(X2, y2)
try: Driver(drv_name) except GDALException: return None
scores = cval.cross_val_score(clf, X_sparse, X) assert_array_equal(scores, clf.score(X_sparse, X))
tolW = max(0.001, tol) * np.sqrt(init_grad) tolH = tolW
df = self.frame.copy() resetted = self.frame.reset_index() df.reset_index(inplace=True) assert_frame_equal(df, resetted, check_names=False)
import salt.utils from salt.exceptions import CommandExecutionError
ldict, rdict = defaultdict(list), defaultdict(list)
if used_name != guessed_filename: guessed_path = path.join(tempdir, guessed_filename) shutil.move(the_path, guessed_path) return guessed_path
if len(User.objects.filter(username=uname)) > 0: return
try: response_data = api.baskets.post({ 'products': [{'sku': default_enrollment_mode.sku}], 'checkout': True, })
SORT_REVISION_FAVOR_PUBLISHED = ('_id.revision', pymongo.ASCENDING)
self.assertEqual(resp.status_code, 200)
result = __salt__['splunk.update_user']( email, profile, **kwargs )
def f(): df = orig.copy() df.at["j", "cats"] = "c"
from __future__ import unicode_literals
if not salt_data: return _globals
import salt.ext.six as six if six.PY3: import ipaddress else: import salt.ext.ipaddress as ipaddress from salt.ext.six.moves import range
def _get_ptr(self): if self._ptr: return self._ptr else: raise GDALException('GDAL %s pointer no longer valid.' % self.__class__.__name__)
_(', ').join(force_text(i) for i in list_[:-1]), force_text(last_word), force_text(list_[-1]))
courses = modulestore().get_courses(branch=BRANCH_NAME_DRAFT) self.assertEqual(len(courses), 3)
tm._skip_if_no_scipy()
self.cache = caches['default']
sparse_results = sparse_classifier.predict(X_test_sparse) dense_results = dense_classifier.predict(X_test) assert_array_equal(sparse_results, dense_results)
if isnull(value) or not isinstance(value, compat.string_types):
self.assertIn(npath(filename), autoreload.gen_filenames()) self.assertIn(npath(filename), autoreload.gen_filenames())
samples_norm = self.samples samples_unif = self.prng.uniform(size=samples_norm.shape[0]) samples = np.vstack([samples_norm, samples_unif])
from __future__ import unicode_literals
if driver: data['driver'] = driver
CourseEnrollment.enroll(self.user, self.course_key, 'verified') ret_val = CourseEnrollment.unenroll(self.user, self.course_key) self.assertFalse(ret_val)
pass
g[['A', 'D']]
changes[namespace] = { 'new': config, 'old': update_config, } return config
'use_master_when_local': bool,
with with_edx_domain_context(is_edx_domain): response = self.client.get(reverse(url_name), params)
_win(kernel32.WaitForSingleObject, DWORD_IDV,
templates["inclusion.html"] = "{{ result }}"
df['test'] = df['a'].apply(lambda x: '_' if x == 'aaa' else x)
if env is not None and not isinstance(env, dict): ret['comment'] = ('Invalidly-formatted \'env\' parameter. See ' 'documentation.') return ret
if database: return client.add_database_user(name, passwd) return client.add_cluster_admin(name, passwd)
import integration
from salt.ext import six
try: os.remove(path) except IOError: pass return None
from salt.modules import nfs3
CourseInstructorRole(course_key).add_users(new_instructor) auth.add_users(requesting_user, CourseStaffRole(course_key), new_instructor)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call )
exc_info_on_loglevel=logging.DEBUG
self.assertRaises(TypeError, lambda: ci.insert(0, 'd'))
for student in students_require_certs: task_progress.attempted += 1 status = generate_user_certificates( student, course_id, course=course )
return sorted(set(enabled + available))
ret.update(difference)
result = df.reindex_axis(lrange(15), fill_value=0., axis=0) expected = df.reindex(lrange(15)).fillna(0) assert_frame_equal(result, expected)
if kwargs.get('params', {}).get('course_id'): data.update({ "threads_count": 1, "comments_count": 2 })
block_structure.request_xblock_fields('hide_from_toc')
if subarr.ndim == 0:
if mod_loc.name not in name: return False
@override_settings(ROOT_URLCONF='test_client_regress.urls') class UrlconfSubstitutionTests(SimpleTestCase):
if urlparse.urlparse(url_path).netloc: return url_path
new_lr = self._base_lr / (self.decay_factor ** self._count) if new_lr <= self.min_lr: self._min_reached = True new_lr = self.min_lr
mb_k_means = MiniBatchKMeans(init="random", n_clusters=n_clusters, random_state=42, n_init=10).fit(X_csr) _check_fitted_model(mb_k_means)
user = User.objects.get(username='testclient') form_for_data = UserChangeForm(instance=user) post_data = form_for_data.initial
from salt.modules import keystone
course = self._create_course("verified") response = self._get_page(payment_flow, course.id) self._assert_contribution_amount(response, "")
policy_str = '{}'
self._assert_course_verification_status(None)
with self.assertNumQueries(0): with self.assertRaises(UndergroundBar.DoesNotExist): p.undergroundbar
from salt.ext.six.moves.urllib.parse import urlencode as _urlencode
X = [np.nan, 5, 6, 7, 8] assert_raises_regex(ValueError, "Input contains NaN, infinity or a value too large", scale, X)
import logging
if years: self.years = years else: this_year = datetime.date.today().year self.years = range(this_year, this_year + 10)
self.teams_page.click_all_topics() self.verify_my_team_count(1)
from __future__ import absolute_import import json import logging
text = f.widget.format_value(result) self.assertEqual(text, "13:30:00")
__salt__['cmd.run'](['attrib', '-R', cache_file], python_shell=False)
response = self.send_patch(client, {field: ""}) self.assertEqual("", response.data[field])
if url.startswith(('http:', 'https:', '//', '#', 'data:')): return matched
if 'parent_id' not in data: data["parent_id"] = None
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
'update_restart_services': list,
self.assertAlmostEqual(axis.get_ticklocs()[0], edge)
if len(nontext) / len(data) > 0.30: return True return False
user_environment = win32profile.CreateEnvironmentBlock(token, False)
expiry_age = self.get_expiry_age(expiry=self._expiry_date(session_data)) if expiry_age <= 0: session_data = {} self.delete() self.create()
while top_level_logger.handlers: top_level_logger.handlers.pop()
obj = self.obj axis = 0 for i, key in enumerate(tup):
_config_filename_ = 'master'
from django.db.models.sql.where import WhereNode, SubqueryConstraint, AND, OR
FEATURES['COURSES_ARE_BROWSEABLE'] = True HOMEPAGE_COURSE_MAX = 9
from __future__ import absolute_import
state_run = self.run_function('state.sls', mods='requisites.listen_simple')
self.publish(location.version_agnostic(), user_id, blacklist=EXCLUDE_ALL, **kwargs)
if spatialite: qs = qs.exclude(name='Texas') else: qs = qs.annotate(intersection=functions.Intersection('mpoly', geom))
self._fill_flat(nested, self.spec_mapping, rval)
self.converged_ = False
from __future__ import unicode_literals
assignments = outcomes.get_assignments_for_problem( problem_descriptor, user_id, course_key ) for assignment in assignments: assignment.version_number += 1 assignment.save() return assignments
class Developer(models.Model): name = models.CharField(max_length=15)
diag_mask = (connectivity.row != connectivity.col) connectivity.row = connectivity.row[diag_mask] connectivity.col = connectivity.col[diag_mask] connectivity.data = connectivity.data[diag_mask] del diag_mask
from __future__ import absolute_import import pyrax
obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')
v = Timedelta(1, 'D') td = timedelta(days=1) self.assertEqual(hash(v), hash(td))
try: key = unicode(key, 'utf-8') value = unicode(value, 'utf-8') except UnicodeDecodeError: self.log_message("Could not decode request params as UTF-8")
try: auth_app.User._meta.get_field('username').run_validators(default_username) except exceptions.ValidationError: return ''
to_ignore = name.rsplit('-', 1)[0]
bt = BallTree(X) distances_nn, neighbors_nn = bt.query(X, k=k + 1) neighbors_nn = neighbors_nn[:, 1:]
raw_prefix = 'u' if six.PY3 else ''
atexit.register(self.release_readlock, lockdirName=lockdirName)
for _name, _indexer in indexing.get_indexers_list(): NDFrame._create_indexer(_name, _indexer)
DATADOG = AUTH_TOKENS.get("DATADOG", {}) DATADOG.update(ENV_TOKENS.get("DATADOG", {}))
ind = self.index.set_names(new_names, level=[0, 1]) self.assertEqual(self.index.names, self.index_names) self.assertEqual(ind.names, new_names)
idx.nbytes idx.values.nbytes
graph.data = np.exp(-graph.data / graph.data.std())
ret[key] = {'new': '', 'old': old[key]}
try: xml = self.preprocess_pmathml(self.expr)
settings.STATICFILES_DIRS.append( (u'themes/{}'.format(settings.THEME_NAME), theme_root / 'static') )
_get_si()
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21")
grad[-1] = n_samples grad[-1] -= n_sw_outliers * epsilon ** 2 grad[-1] -= squared_loss / sigma
p, h = max_pool_c01b(z, (pool_rows, pool_cols) ) func = function([z], [p, h], mode = mode_without_gpu)
verified.delete() self.assertFalse(CourseMode.has_payment_options(self.course_key))
df2.columns = ['A', 'C'] result = df1.isin(df2) expected['B'] = False tm.assert_frame_equal(result, expected)
from salt.exceptions import SaltInvocationError from salt.utils.reclass import ( prepend_reclass_source_path, filter_out_source_path_option, set_inventory_base_uri_default )
y_weights = np.dot(Y.T, x_score) / np.dot(x_score.T, x_score)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
axes = self.input_space.axes assert len(axes) == 4
if isinstance(y_pred, list): y_pred = np.vstack(p for p in y_pred).T
alg.fit(X) alg.fit(X.tolist())
SignalHandler.pre_publish.disconnect(receiver=on_pre_publish) self.addCleanup(SignalHandler.pre_publish.connect, receiver=on_pre_publish)
best_candidate = None best_pot = None best_dist_sq = None for trial in range(n_local_trials): new_dist_sq = np.minimum(closest_dist_sq, distance_to_candidates[trial]) new_pot = new_dist_sq.sum()
log = logging.getLogger(__name__)
self.enrollment.can_refund = True self.assertTrue(self.enrollment.refundable())
import integration from salt.fileserver import roots from salt import fileclient
kws.update(context) context = kws assert 'opts' in context assert 'saltenv' in context
raise TemplateSyntaxError( "'blocktrans' is unable to format string returned by gettext: %r using %r" % (result, data) )
for name, settings in six.iteritems(config.copy()): if '.' in name: log.warning( 'Please switch to the new providers configuration syntax' )
for alpha in (-0.5, 1.5): with self.assertRaises(ValueError): c(alpha=alpha)
xnorml = xnorm dl2s = [x for x in xs] xs = [x + tau * d for x, d in zip(xs, ds)]
from salttesting.helpers import ensure_in_syspath from salttesting import skipIf ensure_in_syspath('../../')
address_predefined = 'DJANGO_LIVE_TEST_SERVER_ADDRESS' in os.environ old_address = os.environ.get('DJANGO_LIVE_TEST_SERVER_ADDRESS')
pass
from salt.ext.six.moves import range import salt.utils.cloud import salt.config as config from salt.exceptions import ( SaltCloudNotFound, SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
from __future__ import unicode_literals
sites = [] i = 0 while 1: j = text.find(substr, i) if j == -1: break sites.append(j) i = j + 1 return sites
assert np.allclose(dt.mean(dtype='float64'), 0) assert np.allclose(dt.std(dtype='float64'), 1.)
_porttree().dbapi.settings.reset() _porttree().dbapi.settings.lock() return use, use_expand_hidden, usemask, useforce
centers[center_idx] /= counts[center_idx]
try: from gentoolkit.eclean import search, clean, cli, exclude as excludemod HAS_GENTOOLKIT = True except ImportError: pass
dummy_course = CourseFactory.create() GeneratedCertificateFactory.create( user=self.user, course_id=dummy_course.id, status=CertificateStatuses.generating, mode='honor' )
result = p.iloc[[0, 2]] expected = p.loc[['A', 'C']] assert_panel_equal(result, expected)
url( r'^courses/{}/lti_rest_endpoints/'.format( settings.COURSE_ID_PATTERN, ), 'courseware.views.views.get_course_lti_endpoints', name='lti_rest_endpoints', ),
applied = self.panel.apply(np.sqrt) self.assertTrue(assert_almost_equal(applied.values, np.sqrt( self.panel.values)))
raise
from __future__ import absolute_import
if sorted(map1) != sorted(map2): #log.debug('diff_mtime_map: the maps are different') return True
world.wait(1) continue
yield self.auth.authenticate()
fig = plt.figure() fig.subplots_adjust(left=0.05, right=0.95, wspace=0.05)
pass
bob = User.objects.db_manager('other').create_user('bob', 'bob@example.com')
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, max_attempts=0, done=True) self.assertTrue(module.should_show_reset_button())
x_scaled = assert_no_warnings(scale, x) assert_array_almost_equal(scale(x), np.zeros(8))
n_samples = 12 n_samples_partial_fit = 3 n_features = 2 rng = np.random.RandomState(42) X = rng.rand(n_samples, n_features) X_partial_fit = rng.rand(n_samples_partial_fit, n_features)
if user_must_complete_entrance_exam(request, user, course): return redirect(reverse('courseware', args=[unicode(course.id)]))
self._expanded_class_weight = compute_class_weight(self.class_weight, self.classes_, y) sample_weight = self._validate_sample_weight(sample_weight, n_samples)
COURSE_CATALOG_VISIBILITY_PERMISSION = ENV_TOKENS.get( 'COURSE_CATALOG_VISIBILITY_PERMISSION', COURSE_CATALOG_VISIBILITY_PERMISSION ) COURSE_ABOUT_VISIBILITY_PERMISSION = ENV_TOKENS.get( 'COURSE_ABOUT_VISIBILITY_PERMISSION', COURSE_ABOUT_VISIBILITY_PERMISSION )
DATADOG = AUTH_TOKENS.get("DATADOG", {}) DATADOG.update(ENV_TOKENS.get("DATADOG", {}))
warnings.simplefilter('error') try: df = DataFrame(np.random.randn(100, 4)) df.plot(subplots=True, layout=(3, 2))
self.s_rng = make_theano_rng(seed, which_method="uniform")
from cassandra.cluster import Cluster from cassandra.cluster import NoHostAvailable from cassandra.connection import ConnectionException, ConnectionShutdown from cassandra.auth import PlainTextAuthProvider from cassandra.query import dict_factory HAS_DRIVER = True
content = StaticContent('loc', 'name', 'content_type', 'data', None, None, None) self.assertIsNone(content.thumbnail_location)
self.assertEqual(views.get_cosmetic_display_price(self.course, registration_price), "$10")
return salt.utils.which('gpg')
if not clean: dmi.append(record) continue
pca = PCA(n_components=15, whiten=False) data = pca.fit_transform(digits.data)
class KwargsStruct(object): def __init__(self, **entries): self.__dict__.update(entries)
'ret_port': int,
import salt.config import salt.loader
self._assert_output(output)
if xblock.category == 'chapter': return xblock
return render(request, [], {})
return environ.setdefault(key, value)
default_error_messages = { 'invalid_choice': _('Select a valid choice. That choice is not one of' ' the available choices.'), }
result = ci[:3].append(ci[3:]) tm.assert_index_equal(result, ci, exact=True)
if len(new_retains) < fake_retain[retainable]: new_retains.add(fake_file_list[0]) retained_files |= new_retains
valid = SVHN('valid', path=local_path) check_dtype(valid) valid.apply_preprocessor(pipeline, can_fit=False)
groups = self.index.groupby(self.index) exp = dict((key, [key]) for key in self.index) tm.assert_dict_equal(groups, exp)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
self.assert_function_values( 'sqrt',
AWS_QUERYSTRING_AUTH = AUTH_TOKENS.get('AWS_QUERYSTRING_AUTH', True) AWS_S3_CUSTOM_DOMAIN = AUTH_TOKENS.get('AWS_S3_CUSTOM_DOMAIN', 'edxuploads.s3.amazonaws.com')
module = CapaFactory.create(attempts=1)
from __future__ import absolute_import import os import yaml import shutil
if self.child_fd in rlist: try: stdout = self._translate_newlines( salt.utils.to_str( os.read(self.child_fd, maxsize) ) )
if self.category == 'course': node.set('org', self.location.org) node.set('course', self.location.course)
def f(): Categorical.from_codes([-2, 1, 2], ["a", "b", "c"])
return ''
r = rwindow.Rolling(Series([2, 4, 6]), window=2)
self.session['foo'] = 'bar' self.session.set_expiry(3600) self.session.save()
try: scheme, netloc, path, query, fragment = urlsplit(url) except ValueError: return unquote_quote(url)
course = world.CourseFactory.create( org='edx', number='999', display_name='Test Course' )
for n, color in enumerate(colors): data = X_test[y_test == n] plt.scatter(data[:, 0], data[:, 1], marker='x', color=color)
z = zr.astype(self.tp.upper())
estimator_weight = self.learning_rate * np.log(1. / beta)
p = Parent.objects.get(name="Parent") c = Child(parent=p) self.assertIs(c.parent, p)
if not updates: return 'No updates found. Check software and drivers parameters. One must be true.'
result = requests.get( "http://169.254.169.254/latest/dynamic/instance-identity/document", proxies={'http': ''}, timeout=AWS_METADATA_TIMEOUT, )
mode = 1 M_matvec = None Minv_matvec = None if Minv is not None: raise ValueError("Minv should not be " "specified with M = None.")
from __future__ import unicode_literals
self.assertTrue(list(store) == [])
from __future__ import unicode_literals
__virtualname__ = 'foreman'
with tornado.stack_context.StackContext(self.functions.context_dict.clone): data['return'] = self.functions[fun](*args, **kwargs) data['success'] = True
vectorizer = HashingVectorizer(decode_error='ignore', n_features=2 ** 18, non_negative=True)
if related is not None: setattr(related, self.field.remote_field.get_cache_name(), None)
self.assertIn('/gitlogs/MITx/edx4edx/edx4edx', response.content)
import fnmatch import os import re import logging
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
self.assertEquals(self.request.COOKIES[settings.SESSION_COOKIE_NAME], session_id)
if self.parallel > 1: suite = parallel_suite
if not request.user.is_staff: raise Http404 cilset = CourseImportLog.objects.order_by('-created')
else: log.error(traceback.format_exc()) _ = self.capa_system.i18n.ugettext raise ResponseError( _("CustomResponse: check function returned an invalid dictionary!") )
pass
response = self.client.get(collector_url) self.assertContains(response, 'name="whatsit_set-0-index"')
generate_cython()
get_request_dict = {} result = module.reset_problem(get_request_dict)
ncols = 8 for i in range(2 ** ncols):
fake_data_api.add_course(self.COURSE_ID, course_modes=['professional']) api.add_enrollment(self.USERNAME, self.COURSE_ID, mode='verified')
return ['--file', _git_config(cwd, user)]
arr = np.arange(15, dtype=float) index = np.arange(15) arr[7:12] = nan arr[-1:] = nan return arr, index
def _description(self): return _('Field of type: %(field_type)s') % { 'field_type': self.__class__.__name__ } description = property(_description)
winrepo_cachefile = os.path.join(winrepo_dir, winrepo_cachefile)
old_field_name = None counters = [0] * len(handlers)
if __grains__['os'] in ['MacOS', 'Darwin'] and opts == 'defaults': opts = 'noowners'
comment, passed, retries = _download(win_updater, retries) ret['comment'] += comment if not passed: ret['result'] = False return ret
if not (is_fitted or has_partial_fit): raise NotFittedError("Fit training data before predicting")
log.exception( "Indexing error encountered, courseware index may be out of date %s - %r", structure_key, err ) error_list.append(_('General indexing error occurred'))
self.handle_file_complete(old_field_name, counters) old_field_name = None
household.index.name = 'foo'
from __future__ import absolute_import
self.assertTrue(pkg_targets)
incxml = etree.XML(ifp.read())
from __future__ import unicode_literals
log.warning('Cannot get projects, you may need to update libcloud to 0.15 or later') return False
mcd = MinCovDet().fit(X) err_loc_mcd[i, j] = np.sum(mcd.location_ ** 2) err_cov_mcd[i, j] = mcd.error_norm(np.eye(n_features))
self._files.appendlist( force_text(old_field_name, self._encoding, errors='replace'), file_obj) break
self.dashboard_page.visit()
self.assertEqual(old_email, response.data["email"]) self.assertEqual("change my email", response.data["goals"])
from __future__ import absolute_import
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, mock_open, patch, NO_MOCK, NO_MOCK_REASON )
recorder.record_applied("migrations", "5_auto") loader.build_graph() self.assertEqual(num_nodes(), 2)
go_to_section("data_download")
'a minute ago', '%(count)s minutes ago', count
import pandas.core.config_init
response = self.client.post(reverse('admin:admin_widgets_event_add'), {"main_band": test_str})
if 'numeric_only' in compat.signature(f).args: self.assertRaisesRegexp(NotImplementedError, name, f, self.series, numeric_only=True)
rng = check_random_state(2) X = 0.3 * rng.randn(120, 2) X_train = np.r_[X + 2, X - 2] X_train = X[:100]
with tm.assert_produces_warning(FutureWarning): result = df.drop_duplicates('C', take_last=True) expected = df.ix[[3, 7]] tm.assert_frame_equal(result, expected)
from openedx.core.djangoapps.credit.api.eligibility import ( is_credit_course, set_credit_requirement_status as api_set_credit_requirement_status )
log = logging.getLogger(__name__)
from salt.pillar import nodegroups
COURSE_BLOCK_ACCESS_TRANSFORMERS = [ library_content.ContentLibraryTransformer(), start_date.StartDateTransformer(), user_partitions.UserPartitionTransformer(), visibility.VisibilityTransformer(), ]
return axes_array, block_values, block_items, extra_state
mako_middleware_process_request(request)
self._submit_photos(face_image=self.IMAGE_DATA)
self.assertEquals(response.status_code, 403)
mode = 1 M_matvec = None Minv_matvec = None if Minv is not None: raise ValueError("Minv should not be " "specified with M = None.")
if self._course_id is not None: url += "?{params}".format( params=urlencode({ "course_id": self._course_id, "enrollment_action": "enroll" }) )
wmi = types.ModuleType('wmi') sys.modules['wmi'] = wmi
self.assertEqual(reindexed_int.dtype, np.float_)
pd.plot = None pd.save()
self.factory(eta0=0, learning_rate="constant")
array = np.array(array, dtype=dtype, order=order, copy=copy)
import logging
return parse(out)
offset = timedelta(**kwds_no_nanos)
if exploded_grant[position_tracker + 1] == '@': phrase = 'pre-host'
FEATURES['ENABLE_FINANCIAL_ASSISTANCE_FORM'] = True
self.common_test_that_should_always_pass()
self._setup_mode_and_enrollment(self.PAST, "verified")
for service, bitmask in sorted_types: if current_bitmask > 0: remaining_bitmask = current_bitmask - bitmask
self.assertRaises(TypeError, lambda: s.iloc[3.0])
X = make_low_rank_matrix(n_samples=n_samples, n_features=n_features, effective_rank=rank, tail_strength=0.0, random_state=0) assert_equal(X.shape, (n_samples, n_features))
import integration import salt.utils
XP = np.empty((n_samples, self.n_output_features_), dtype=X.dtype)
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
self.assertEqual(module.attempts, 1)
assert all(np.all(this_point.cv_validation_scores == 0.0) for this_point in gs.grid_scores_ if this_point.parameters['parameter'] == FailingClassifier.FAILING_PARAMETER)
if isinstance(o, PeriodIndex):
if len(combined) > 250: combined = fasthash(combined)
import salt.netapi
url(r'^{}/problem_grade_distribution/(?P<section>\d+)$'.format(settings.COURSE_ID_PATTERN), 'class_dashboard.views.section_problem_grade_distrib', name="section_problem_grade_distrib"),
self.assert_grade_requirement_status(None, 0)
ind2 = self.index.set_labels(new_labels[0], level=0) assert_matching(ind2.labels, [new_labels[0], labels[1]]) assert_matching(self.index.labels, labels)
section_descriptor = modulestore().get_item(section_key, depth=3)
name = self.env.add_tmp(np.float32(left.value)) left = self.term_type(name, self.env)
self.check_event_response_by_key('handle_vote', resource, 'newVotes', test_case['new_votes'])
url(r'^api/certificates/', include('lms.djangoapps.certificates.apis.urls', namespace='certificates_api')),
if not status: ret['result'] = False return ret
from salt.ext.six import string_types import salt.utils
def identity_estimator(): pass identity_estimator.decision_function = lambda y_predict: y_predict identity_estimator.predict = lambda y_predict: y_predict
response = self.client.get(collector_url) self.assertContains(response, 'name="fancydoodad_set-0-doodad_ptr"')
orig_tab_ids = [tab.tab_id for tab in self.course.tabs] tab_ids = list(orig_tab_ids) num_orig_tabs = len(orig_tab_ids)
grains['virtual'] = 'kvm'
([[400, 150, 400], [400, 450, 600], [300, 225, 300]],
old_tab_list = course_item.tabs
_PKG_TARGETS_EPOCH = { 'RedHat': {'7': 'comps-extras'}, }
include_dependencies = bool(request.GET.get('include-dependencies', False))
result = self.panel.swapaxes(0, 1) self.assertIs(result.items, self.panel.major_axis)
connection.close()
if _ensure_decoded(self.kind) == u('string'): self.data = _unconvert_string_array( self.data, nan_rep=nan_rep, encoding=encoding)
import salt.runner import salt.utils import salt.config import salt.syspaths
input_type = kwargs.get('type', 'radiotextgroup') input_element = etree.Element(input_type)
df = DataFrame({'b': [1.1, 2.2]}) df = df.rename(columns={}) df.insert(0, 'a', [1, 2])
if index is None: extract_index(list(data.values()))
if (self.is_bool or self.is_integer) and not self.is_timedelta: if inplace: return self else: return self.copy()
root_dir = path(mkdtemp_clean()) print 'Exporting to tempdir = {0}'.format(root_dir) export_course_to_xml(self.store, content_store, course.id, root_dir, 'test_export')
import os import uuid import pprint import logging try:
return 'some html safe content'
with warnings.catch_warnings(): warnings.simplefilter("ignore") check_cv_coverage(skf_3, X2, y, labels=None, expected_n_iter=3)
bad_ranges = (5.0, 'foo', co_shp) for bad in bad_ranges: with self.assertRaises(TypeError): lm.save(fid_range=bad)
for average in ['macro', 'weighted', 'micro']: assert_not_equal(recall_13(average=average), recall_all(average=average))
rp = SparseRandomProjection(n_components=10, dense_output=False, random_state=0) rp = rp.fit(data) assert isinstance(rp.transform(data), np.ndarray)
self.setup_logfile_logger() verify_log(self.config)
'%d/%m/%Y', '%d/%m/%y'
if not set_permissions(username, permissions, uid): log.warning('unable to set user permissions') delete_user(username, uid) return False
_period_code_map = {
fstats_orig = os.stat(path_test)
X_transformed_parallel2 = fs_parallel2.fit_transform(X) assert_array_equal( X_transformed.toarray(), X_transformed_parallel2.toarray() )
troy = SpecialClient.objects.select_related('state').only('name', 'state').get(name='Troy Buswell')
MICROSITE_BACKEND = ENV_TOKENS.get("MICROSITE_BACKEND", MICROSITE_BACKEND) MICROSITE_TEMPLATE_BACKEND = ENV_TOKENS.get("MICROSITE_TEMPLATE_BACKEND", MICROSITE_TEMPLATE_BACKEND) MICROSITE_DATABASE_TEMPLATE_CACHE_TTL = ENV_TOKENS.get( "MICROSITE_DATABASE_TEMPLATE_CACHE_TTL", MICROSITE_DATABASE_TEMPLATE_CACHE_TTL )
fields = ["field1", "field2", "field3"] block_structure.request_xblock_fields(*fields)
segment = quote(segment, safe=RFC3986_SUBDELIMS + RFC3986_GENDELIMS + str('~')) return force_text(segment)
return self.client.patch(url, data=kwargs.get('data', None))
self.assert_no_xpath(xml, "//label[@class='choicegroup_incorrect']", self.context)
self.assertQuerysetEqual( self.c.friends.all(), [ "David", ], attrgetter("name") )
_DFLT_IPC_MODE = 'tcp' _MASTER_TRIES = -1
try: query_string = query_string.decode(encoding) except UnicodeDecodeError: query_string = query_string.decode('iso-8859-1')
if "Generated by Cython" not in first_line.decode('utf-8'): hash.update(first_line) hash.update(f.read()) return hash.hexdigest()
ret = {} for name in names: ret[name] = ''
self.assertEqual(two_toys.grade_cutoffs['C'], 0.5999)
for video in self.previous_uploads: self.assertIn(video["edx_video_id"], response.content)
log.info(str(ret))
response = self.assert_request_status_code(400, url, method="POST", data=data) self.assertIn("The sale associated with this invoice has already been invalidated.", response.content)
context.update(configuration.get(user_certificate.mode, {}))
from __future__ import absolute_import import os.path import glob
self.assertDeserializeEqual('10:20:30', '"10:20:30"')
salt-run state.event | while read -r tag data; do echo $tag echo $data | jq -colour-output . done
'ENABLE_PAID_COURSE_REGISTRATION': False,
from __future__ import absolute_import import os import random import string
self._verify_branch_setting(ModuleStoreEnum.Branch.draft_preferred) _verify_revision_is_published(location)
sparse = self.dense1.to_sparse(fill_value=0) sparse2 = self.dense2.to_sparse(fill_value=0)
self._post_fork_init()
if fit_intercept: grad[-1] = z0.sum()
from __future__ import absolute_import import logging
self.assertItemsEqual( data.keys(), ['company_about_url', 'company_privacy_url', 'company_tos_url'] )
def __setstate__(self, state): self._is_child = True self.__init__(state['opts'], log_queue=state['log_queue'])
del_query._for_write = True
chef.__grains__ = {} chef.__salt__ = {} chef.__context__ = {}
for c in Country.objects.num_geom(): self.assertEqual(2, c.num_geom)
self.assertRaises( FileserverConfigError, role_class, *args )
td = Series([np.timedelta64(300000000), pd.NaT]) self.assertEqual(td.dtype, 'timedelta64[ns]')
self.prob1 = ItemFactory.create( parent_location=self.vert1.location, category='problem', display_name='untitled problem 1' )
text = f.widget.format_value(result) self.assertEqual(text, "01:30:00 PM 21/12/2010")
mask = this_mask ^ other_mask this_vals[this_mask & mask] = fill_value other_vals[other_mask & mask] = fill_value
yield found + 1, "E201 whitespace after '%s'" % char
_export_field_content(item, item_dir)
log.debug(' Response content: {0}'.format(response))
import salt.utils from salt.pillar.sql_base import SqlBaseExtPillar
num_certs = GeneratedCertificate.eligible_certificates.filter(user=self.student).count() self.assertEqual(num_certs, 1)
self.run_function('cmd.run', ['truncate -s 0 {0}'.format(f)])
for output_dir in [self.temp_dir_1, self.temp_dir_2]: call_command('export', course_id, output_dir)
__opts__['environment'] = saltenv __opts__['pillarenv'] = pillarenv
rm_tok = True
warnings.simplefilter('ignore', _NonBLASDotWarning)
self._assert_course_verification_status(VERIFY_STATUS_NEED_TO_VERIFY)
import salt.ext.six as six try: import boto import boto.rds2 logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
if len(returned_minions) < 1: return {} end_loop = True
return sum(self[i].point_count for i in range(self.geom_count))
with ensure_clean_store(self.path) as store:
from __future__ import unicode_literals
world.wait_for( lambda _: len(world.browser.windows) == 2, timeout=5, timeout_msg="Timed out waiting for the LTI window to appear." )
self.verify_my_team_count(1)
self.assertEqual(gc1, gc2)
author_book_auto_m2m_intermediate = Author.books.through.objects.get(author=author, book=book) self.author_book_auto_m2m_intermediate_id = author_book_auto_m2m_intermediate.pk
set_course_cohort_settings(course_key=self.course.id, is_cohorted=False) check_cohorted(False)
bandwidth = ET.SubElement(content, 'bandwidth') bandwidth.text = config.get_cloud_config_value( 'bandwidth', vm_, __opts__, default='100', search_global=False )
return MatchFirst( [ parseElementClass(sym) for sym in symbols ] )
self.course_nav.go_to_vertical('Test Vertical-2')
os.environ.update(DPKG_ENV_VARS)
left = self.rng[:5] right = self.rng[5:10]
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch )
return list(list_display)[:1]
if not name == '/': name = name.rstrip('/')
Finalize(self, self.close, exitpriority=15)
raise ValueError( 'ignore_lst must be a list of parameters to ignore ' '%s (type %s) was given' % (ignore_lst, type(ignore_lst)))
if load['tgt_type'] == 'list': int_payload['topic_lst'] = load['tgt']
self.assertDictEqual(json.loads(response.content), self._serialize_credit_course(cc1))
_, _, relative_path, params, query_string, fragment = urlparse(path)
# dbar = dbarn epln = eplnn dlta = cs * dbar + sn * alpha gbar = sn * dbar - cs * alpha
res2 = DataFrame() i = 0 sizes = [5, 5, 5, 5, 2]
max_age=settings.SESSION_COOKIE_AGE, salt='django.contrib.sessions.backends.signed_cookies',
with open(self.TEST_INDEX_FILENAME, "w+") as index_file: json.dump({}, index_file) self.addCleanup(remove_file, self.TEST_INDEX_FILENAME)
module.lcp.get_score = lambda: {'score': 0, 'total': 0}
else: mpub = self.opts['pki_dir'] + '/' + 'master.pub' if os.path.isfile(mpub): self.pubkey = mpub
for k in np.linspace(80, n_samples, 10): k = int(k)
import salt.utils import salt.utils.itertools import salt.utils.decorators as decorators import salt.utils.pkg.rpm from salt.ext.six.moves import zip from salt.ext import six
lm = LayerMapping(Interstate, inter_shp, inter_mapping) lm.save(silent=True)
if msg_prefix: msg_prefix += ": "
self._reset() return self.partial_fit(X, y)
Registry.enabled = True
from __future__ import absolute_import import os import random
skip_footer=0,
spmat = spmat.ensure_sorted_indices()
assert_raises(ValueError, cval.KFold, 3, 4)
if self.edx_video_id: video_profile_names = context.get("profiles", ["mobile_low"])
if not sparse.issparse(X): iter_func = iter else: iter_func = _iterate_sparse_X
p_up = dict(self.sgd_updates(self.params, gradients, learn_rates))
from __future__ import absolute_import
raise SaltInvocationError(kwarg + ' cannot be None')
chapter = self.store.create_child(self.user_id, self.course.location, 'chapter', block_id='Overview', asides=asides) self.writable_chapter_location = chapter.location
ws.send('websocket client ready')
from salt.modules import rsync from salt.exceptions import CommandExecutionError, SaltInvocationError
[a1, a2, a3, a4], lambda x: x)
begin = Timestamp('2011/1/1', tz='UTC') end = Timestamp('2014/1/1', tz='UTC')
res = df.iloc[lambda x: [1, 3]] tm.assert_frame_equal(res, df.iloc[[1, 3]])
def test():
A_xT = self.rmul(self.transpose_right(x, True)) rval = self.transpose_left(A_xT, True) return rval
class LinearRing(LineString): pass
res = cat.remove_categories("c") self.assert_categorical_equal(cat, old) self.assert_categorical_equal(res, new)
from __future__ import absolute_import import os import time
LOOKUP.clear()
from salt.states import group
return np.int64(key.value).view(_TD_DTYPE)
assert_greater(len(estimators), 0)
precompute = np.empty(shape=(n_features, n_features), dtype=X.dtype, order='C') np.dot(X.T, X, out=precompute)
sleekxmpp_version = distutils.version.LooseVersion(sleekxmpp.__version__) valid_version = distutils.version.LooseVersion('1.3.1') if sleekxmpp_version >= valid_version: return __virtualname__
open.alters_data = True
self._data.delete(key)
arr, index = _test_data1() arr[np.isnan(arr)] = 0 return arr, index
assert_raises(ValueError, precision_recall_curve, [0, 1, 2], [[0.0], [1.0], [1.0]])
opts['providers'][lprovider] = {} opts['providers'][lprovider][lprovider] = provider_config
labels = spectral_clustering(graph, n_clusters=4, eigen_solver='arpack') label_im = -np.ones(mask.shape) label_im[mask] = labels
key_user = key_user.replace('\\', '_')
im_path = serial.preprocess(im_path) label_path = serial.preprocess(label_path)
"_saveasnew" in request.POST and self.save_as_continue and self.has_change_permission(request, obj)
from __future__ import unicode_literals
from unit.modules.boto_cognitoidentity_test import BotoCognitoIdentityTestCaseMixin
self.assertRaises(TypeError, lambda: td * td)
values = []
result = df.iloc[:, slice(4, 8)] expected = df.ix[:, 8:14] assert_frame_equal(result, expected)
operation.state_forwards("something", project_state)
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
CourseRerunState.objects.failed(course_key=destination_course_key) logging.exception(u'Course Rerun Error')
_win(kernel32.GetStdHandle, HANDLE_IHV,
assert_true(np.min(X.data) > 0) assert_true(np.max(X.data) < 1)
key.__opts__ = {}
if isinstance(decision_tree, _tree.Tree): recurse(decision_tree, 0, criterion="impurity") else: recurse(decision_tree.tree_, 0, criterion=decision_tree.criterion)
course_id = None
from __future__ import absolute_import from __future__ import print_function
import elementtree.ElementTree as ElementTree
r.COOKIES = {settings.LANGUAGE_COOKIE_NAME: 'es-us'} r.META = {} self.assertEqual(g(r), 'es')
try: content_length = int(META.get('CONTENT_LENGTH', 0)) except (ValueError, TypeError): content_length = 0
GITHUB_REPO_ROOT = ENV_ROOT / "data"
X = generator.multivariate_normal(mean, cov * np.identity(n_features), (n_samples,))
honor.suggested_prices = '5, 10, 15' honor.save() self.assertTrue(CourseMode.has_payment_options(self.course_key))
FEATURES['ENABLE_EDXNOTES'] = True
if isinstance(arr, ABCSparseArray): from pandas.sparse.series import SparseSeries cls = SparseSeries
course = def_ms.get_course(SlashSeparatedCourseKey('MITx', 'edx4edx', 'edx4edx'))
import salt.utils
import integration from salt.modules import djangomod as django
accum = np.empty(out_shape, dtype=out_dtype) result = self._transform( result, accum, values, labels, func, is_numeric)
from __future__ import absolute_import
self.check_event_response_by_key( 'handle_vote', resource, 'newVotes', test_case['new_votes'], self.XBLOCK_NAMES[1] )
cumsum = -np.cumsum(clf.oob_improvement_)
students = 'all_whitelisted'
raise GEOSException('Geometry resulting from slice deletion was invalid.')
import yaml import salt.ext.six as six
import os import sys import time import signal import tempfile import traceback import inspect
all_assets.extend(course_assets.setdefault(asset_key.block_type, [])) idx = all_assets.find(asset_key)
X_pca = pca.transform(X) assert_array_almost_equal(pca.explained_variance_, np.var(X_pca, axis=0))
if fails is True: if result == 'fail': result = 'ok (fail)'
return restore( self._modulestore._clean_locator_for_mapping(locator) )
self.assertEqual(self.selenium.current_url, original_url)
store.get_node('df2')._v_attrs.pandas_version = None self.assertRaises(Exception, store.select, 'df2')
df = DataFrame(np.arange(9).reshape(3, 3).T) df.columns = list('AAA') expected = df.iloc[:, 2]
super(MongoModuleStore, self)._drop_database(database, collections, connections)
if is_term(left) and is_term(right) and op_type in self.rewrite_map:
from __future__ import absolute_import import os
from salt.modules import linux_lvm from salt.exceptions import CommandExecutionError
'default': { 'BACKEND': 'django.core.cache.backends.dummy.DummyCache', },
if not data.startswith(self.PICKLE_PAD): return {} load = self.serial.loads(data[len(self.PICKLE_PAD):], raw=raw) return load
Y = np.vstack((y_diabetes, y_diabetes)).T
log = logging.getLogger(__name__)
shallow_copy.names = [name + "c" for name in shallow_copy.names] self.check_level_names(self.index, new_names)
_skip_if_has_locale()
import itertools from abc import ABCMeta, abstractmethod import warnings
values = Series([u("FOO"), NA, u("bar"), u("Blurg")])
changed = [] for target in pkg_params:
X = [[3, 2], [1, 6]] y = [1, 0] clf = MLPClassifier
warnings.warn("figsize='default' is deprecated. Specify figure" "size by tuple instead", FutureWarning, stacklevel=4) figsize = None
self.assertEqual(len(w), 1)
cert_asn1 = c.dump_certificate(c.FILETYPE_ASN1, cert)
return False
import logging import salt.ext.six as six
from __future__ import absolute_import import logging
datetime_frame_columns.columns = ( datetime_frame_columns.columns .map(lambda x: x.strftime('%Y%m%d')))
res_val = df.iloc[2, 0] self.assertEqual(res_val, exp_val)
sysctl = salt.utils.which('sysctl') arch = salt.utils.which('arch') cmds = {}
if needs_i8_conversion(self) and needs_i8_conversion(other): return self._evaluate_compare(other, op)
from salt.states import win_network
return value.time()
retval = self.service.remove_credit_requirement_status( 0, self.course.id, 'grade', 'grade' ) self.assertIsNone(retval)
response = requests.get(self._get_url("api/v1/annotations"), params={"user": "dummy-user-id"})
assert_equal(len(data2cats.filenames), len(data2cats.target)) assert_equal(len(data2cats.filenames), len(data2cats.data))
from __future__ import absolute_import
cfg_branch, _, environment = branch_env.partition(':')
pass
from itertools import product
continue
ssh_gateway_config['ssh_gateway_port'] = config.get_cloud_config_value( 'ssh_gateway_port', vm_, __opts__, default=None, search_global=False )
check_names = True if not r_idx_names and r_idx_levels > 1: check_names = False
EmptyPromise( lambda: self.outline_page.is_browser_on_page(), "loaded page {!r}".format(self.outline_page), timeout=30 ).fulfill()
assertIsInstance(left.sp_index, pd._sparse.SparseIndex, '[SparseIndex]') assertIsInstance(right.sp_index, pd._sparse.SparseIndex, '[SparseIndex]')
nb = BernoulliNB() nb.fit(X_transformed, y)
from salt.utils import args from salt.utils.odict import OrderedDict from salt.exceptions import (SaltInvocationError, SaltSystemExit, CommandNotFoundError) from salt import utils
import logging import salt.utils
snapshot = models.TextField(blank=True)
def test_write_lists_dict(self): _skip_if_no_xlrd()
if freq != 'infer': freq = to_offset(freq) else: freq_infer = True freq = None
can_introspect_null = True
import salt.ext.six as six
from __future__ import absolute_import import socket import logging import threading from multiprocessing import Queue
kwargs_with_axis = kwargs.copy() if 'axis' not in kwargs_with_axis or \ kwargs_with_axis['axis'] is None: kwargs_with_axis['axis'] = self.axis
ret = self.run_state('ssh_known_hosts.absent', **kwargs) self.assertSaltStateChangesEqual( ret, GITHUB_FINGERPRINT, keys=('old', 'fingerprint') )
times = pd.date_range("2013-10-26 23:00", "2013-10-27 01:00", tz="Europe/London", freq="H", ambiguous='infer')
orch = salt.utils.alias_function(orchestrate, 'orch') sls = salt.utils.alias_function(orchestrate, 'sls')
input_dict = {'1_2_1': '21'} correct_map = problem.grade_answers(input_dict)
RestrictedCourse.invalidate_cache_for_course(instance.course_key) CountryAccessRule.invalidate_cache_for_course(instance.course_key)
if options: ret['comment'] += ' ' + _build_option_string(options) return ret
if self.axis == 0: X = check_array(X, accept_sparse='csc', dtype=np.float64, force_all_finite=False)
kernel = self.kernel return kernel == "precomputed" or callable(kernel)
shutil.copyfile(path_in, path_test)
service = _get_service(name) label = service['plist']['Label']
state_run = self.run_function('state.sls', mods='requisites.onfail_simple')
import integration from salt import fileclient
self.assertIn("Email or password is incorrect.", self.login_page.wait_for_errors())
desc1 = df.describe(include="all") desc2 = df.describe(include=[np.generic, "category"]) assert_frame_equal(desc1, desc2)
self.course_outline.select_advanced_tab()
from salt.exceptions import SaltRenderError import salt.utils.templates
pass
if service_name == 'SSH' or service_name == 'ssh': temp_service_name = 'TSM-SSH' else: temp_service_name = service_name
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, show_reset_button=False, done=False) self.assertFalse(module.should_show_reset_button())
orig = self.orig sparse = self.sparse
url(r'^submit_feedback$', 'util.views.submit_feedback'),
if valid_users: if partner not in valid_users: target_room.message('{0} not authorized to run Salt commands'.format(partner)) return
from salt://map.sls import Samba
values = com._astype_nansafe(values.ravel(), dtype, copy=True) values = values.reshape(self.shape)
df = DataFrame(np.random.randn(10, 4)) s = df.iloc[:, 0]
return self._maybe_cast_indexer(label)
htmlhelp_basename = 'performance'
problem = self.build_problem(answer='[1j, 5]') input_dict = {'1_2_1': '3'} with self.assertRaises(StudentInputError): problem.grade_answers(input_dict)
self._iter_mode = resolve_iterator_class('sequential') self._iter_topo = False self._iter_targets = False self._iter_data_specs = (self.X_space, 'features')
self.mock_programs_api() self.mock_credentials_api(self.student, data=self.CREDENTIALS_API_RESPONSE, reset_url=False)
return "set([%s])"
try: tags = literal_eval(t)
block_id = BlockKey.from_usage_key(parent_usage_key) if block_id not in new_structure['blocks']: raise ItemNotFoundError(parent_usage_key)
self._restrict_course(self.course.id) embargo_api.message_url_path(self.course.id, 'courseware')
remove = salt.utils.alias_function(destroy, 'remove')
if installed_apps is not None: self.populate(installed_apps)
forms = [self._construct_form(i, **self.get_form_kwargs(i)) for i in range(self.total_form_count())] return forms
expected = self.read_csv(self.csv1, index_col=0, parse_dates=True)
_keys = {} for key in keys: if keys[key]: _keys[key] = keys[key] return _keys
if isinstance(member, dict):
if config_file_path.endswith(suffix_to_strip): config_file_full_stem = config_file_path[0:-len(suffix_to_strip)] else: config_file_full_stem = config_file_path
raise
cohort = cohorts.get_cohort_by_id(course_key, int(cohort_id))
oa = OAS() loglik_oa = oa.fit(X_train).score(X_test)
self._setup_mode_and_enrollment(self.PAST, "verified")
return datetime.utcfromtimestamp(ts).replace(tzinfo=timezone.utc)
filename_numpy = '/Users/wesm/tmp/numpy.npz' filename_larry = '/Users/wesm/tmp/archive.hdf5' filename_pandas = '/Users/wesm/tmp/pandas_tmp'
self.assertIn( connection.ops.quote_name( editor._create_index_name(Article, ['headline', 'pub_date'], suffix='_idx') ), index_sql[0] )
if self.priors is None: self.class_prior_ = self.class_count_ / self.class_count_.sum()
if field in self._dirty_fields: del self._dirty_fields[field]
config.cancel()
import salt.utils from salt.exceptions import CommandExecutionError, CommandNotFoundError
import salt.utils
class_priority = ['video', 'problem']
self.assert_field_type(load_video_event, 'time', datetime.datetime) del load_video_event['time']
base_dashboards_from_pillar = ([_DEFAULT_DASHBOARD_PILLAR] + base_dashboards_from_pillar) base_panels_from_pillar = ([_DEFAULT_PANEL_PILLAR] + base_panels_from_pillar) base_rows_from_pillar = [_DEFAULT_ROW_PILLAR] + base_rows_from_pillar
from salttesting.case import ModuleCase from salttesting.mixins import RUNTIME_VARS
if ((dtype is not None) and not is_categorical_dtype(dtype)): raise ValueError("cannot specify a dtype with a " "Categorical unless " "dtype='category'")
super(ValidationError, self).__init__(message, code, params)
self.send_signal() self.assertTrue(mock_refund_seat.called) self.assertEqual(mock_refund_seat.call_args[0], (self.course_enrollment, self.student))
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if refresh: refresh_db()
executor.loader.build_graph()
params = [db_str % {'db_name': db['NAME']}]
elif self.ndim == ndim + 1: if axes is None: return self._constructor_sliced(result) return self._constructor_sliced( result, **self._extract_axes_for_slice(self, axes))
from salt.modules import haproxyconn
self.deferred_sql = [x for x in self.deferred_sql if temp_model._meta.db_table not in x] self.create_model(temp_model)
import salt.syspaths as syspaths
tflat = _flatten(t.asList()) rep << And( [ Literal(tt) for tt in tflat ] )
from __future__ import absolute_import import logging import os import stat
else:
if re_pattern: minion_id = re.sub(re_pattern, re_replace, minion_id)
Xs = {'train': x[0:ntrain], 'test': data['data'][0:ntest]}
_ = lambda text: text
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
def test_inheritance_null_FK(self): Event.objects.create() ScreeningNullFK.objects.create(movie=None) ScreeningNullFK.objects.create(movie=self.movie)
RestrictedCourse.objects.get(course_key=self.course.id).delete()
HAS_LIBS = False try: import vboxapi
self.assertRaises(KeyError, lambda: ser.loc[[3, 3, 3]])
try: review1.content_object = dive except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
import salt.ext.six as six from salt.ext.six.moves import input try: import msgpack except ImportError: pass
import json
lab, lev, dropna = cat.codes, bins[:-1], False
content_type_base = models.ForeignKey(ContentType, models.CASCADE, related_name='+') object_id_base = models.PositiveIntegerField() content_object_base = GenericForeignKey('content_type_base', 'object_id_base')
y = [0, 1, 2, 3] * 3 + [4, 5] * 5 X = np.ones_like(y)
TEMPLATE_NAME = None
df_reordered = df_original.sort_values(by='Quantity')
return name
sorted_series = random_order.sort_index(axis=0) assert_series_equal(sorted_series, self.ts)
clf.intercept_scaling = 1000 clf.fit(X, y) intercept2 = clf.intercept_ assert_array_almost_equal(intercept1, intercept2, decimal=2)
prefetch_related_objects(self._result_cache, *self._prefetch_related_lookups) self._prefetch_done = True
from __future__ import unicode_literals
email_label = _(u"Email")
assert_page_correct( page=1, page_size=10, expected_start=0, expected_stop=10, expected_next=None, expected_prev=None )
queryset = queryset.filter(pk__in=selected)
if reversed: a, b = b, a
if isinstance(comps[1], string_types) and ' ' in comps[1]: comps[1] = re.sub(r'\s+', '\t', comps[1])
__virtualname__ = 'ldap'
index = DatetimeIndex(["2013-08-27", "2013-10-01", "2013-10-29", "2013-11-26"]) assert frequencies.infer_freq(index) != 'WOM-4TUE'
from salt.states import apache_conf
new_course_key = self.course_key.replace(course=self.course_key.course.upper()) resp = self._create_course_with_given_location(new_course_key) self.assertEqual(resp.status_code, 200)
from __future__ import absolute_import
new_obj = object.__new__(cls) new_obj.__singleton_init__(opts, **kwargs) loop_instance_map[key] = new_obj
import salt.master self.master = salt.master.Master(self.config)
return pd.DataFrame(dict([(c, s) for c, s in compat.iteritems(_intframe)]), dtype=np.int64)
from salt.daemons.flo import core from salt.daemons.test.plan import actors
cv_score -= cv_score[0] cv_best_iter = x[np.argmin(cv_score)]
default_attrs = {'cols': '40', 'rows': '10'} if attrs: default_attrs.update(attrs) super(Textarea, self).__init__(default_attrs)
module = CapaFactory.create(rerandomize=RANDOMIZATION.NEVER, done=True) self.assertTrue(module.should_show_check_button())
FORCE_SCRIPT_NAME = None
network.__salt__ = {} network.__grains__ = {} network.__opts__ = {}
self.assertEquals(course.entrance_exam_minimum_score_pct, .5)
rng = np.random.RandomState(0) n, p = 50, 3
from __future__ import absolute_import
scsi.__salt__ = {} scsi.__context__ = {}
import integration from salt.states import pip_state
self.factory(n_iter=-10000)
try: if self.is_copy().shape == self.shape: self.is_copy = None return except: pass
request.META = {'HTTP_HOST': 'example.com'} site = get_current_site(request) self.assertEqual(site, s1)
has_changes = False
self.assertFalse(formset.forms[0].empty_permitted) self.assertTrue(formset.forms[1].empty_permitted)
data_base = models.CharField(max_length=10) fk_base = models.ForeignKey(Relation, models.CASCADE, related_name='fk_base_rel')
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
huge = 2 ** (n_bits - 1) - 1 clf = DecisionTreeClassifier(splitter='best', max_leaf_nodes=huge) assert_raises(MemoryError, clf.fit, X, y)
certs = __salt__['keychain.list_certs'](keychain)
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_id) if has_instructor_access_for_class(request.user, course_key): try: data = dashboard_data.get_d3_section_grade_distrib(course_key, section)
added = self.tsframe.add(ts, axis='index')
management.call_command("check", stdout=six.StringIO())
self.assertTrue(self.run_function('pkgutil.forget', [TEST_PKG_NAME]))
klist = list(kwargs.keys()) klist.sort() qbuffer.extend([[k, kwargs[k]] for k in klist])
cost = SumOfCosts([SumOfParams(), (0., DummyCost())])
from __future__ import absolute_import, print_function import logging
cls.coach = AdminFactory.create()
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(message)s')
offset = BQuarterEnd(n=-1, startingMonth=1) self.assertEqual(datetime(2010, 1, 31) + offset, datetime(2010, 1, 29))
from __future__ import absolute_import import os import re import fnmatch import json import subprocess
is_enrolled = CourseEnrollment.is_enrolled(self.user, self.course.id) self.assertFalse(is_enrolled)
result = arg(self)
if not _check_equality(treedic['1 cleaned_mm_list'], treedic['2 cleaned_mm_list']): return False
<vcenter-password> esxi_hosts='[esxi-1.example.com, esxi-2.example.com]'
kf = cval.KFold(300, 3, shuffle=True, random_state=0) ind = np.arange(300)
from __future__ import absolute_import
params = { param_name: request.POST[param_name] for param_name in [ "face_image", "photo_id_image", "course_key", "checkpoint", "full_name" ] if param_name in request.POST }
return course.cert_html_view_enabled if course else False
self.setup_logfile_logger() verify_log(self.config)
_default_logging_level_ = 'warning' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'master') _loglevel_config_setting_name_ = 'cli_salt_run_log_file'
class Author(models.Model): name = models.CharField(max_length=150)
if vm_['profile'] and config.is_profile_configured( __opts__, __active_provider_name__ or 'dimensiondata', vm_['profile']) is False: return False
natural_key.dependencies = ["fixtures_regress.M2MComplexCircular2A"]
handler404 = 'static_template_view.views.render_404' handler500 = 'static_template_view.views.render_500'
data_train = Avicenna(which_set='train', standardize=True) assert data_train.X.shape == (150205, 120)
get_request_dict = {CapaFactory.input_key(): '3.14'} module.check_problem(get_request_dict)
try: kwargs['command'] = salt.utils.shlex_split(kwargs['command']) except AttributeError: pass
if len(self): self._check_setitem_copy()
self.process.kill()
self.assertAlmostEqual(self.ts.corr(self.ts), 1)
if endswith_lf(line): yield line else: buffer_ = line
if opts['root_dir']: tmpdir = os.path.join(opts['root_dir'], 'tmp') else: tmpdir = opts['root_dir']
seq_css = "ol#sequence-list>li:nth-of-type({0})>.nav-item".format(seq_index + 1) self.q(css=seq_css).first.click() self.wait_for_ajax()
reindexed = self.frame.reindex(self.frame.index, copy=False) reindexed['F'] = reindexed['A'] self.assertIn('F', self.frame)
from __future__ import absolute_import
if firewall and syslog_config == 'loghost': if esxi_hosts: if not isinstance(esxi_hosts, list): raise CommandExecutionError('\'esxi_hosts\' must be a list.')
mongo_store.collection.update( self.vertical_x1b.to_deprecated_son('_id.'), {'$push': {'definition.children': unicode(self.problem_x1a_1)}} )
self.video.click_player_button('fullscreen')
mongo_course = self.store.get_course(self.course_locations[self.MONGO_COURSEID].course_key) mongo_course.wiki_slug = 'simple' self.store.update_item(mongo_course, self.user_id)
ancestors = urlpath.cached_ancestors
self.client.get('/') self.common_test_that_should_always_pass()
math_interpreter.check_variables(all_variables, all_functions)
self.assertEqual(4326, GEOSGeometry(hexewkb_2d).srid)
kwargs['queryset'] = qs.select_related('content_type')
spelling_lang = 'en_US'
if 'display_name' in param_dict: param_dict['course_name'] = param_dict['display_name']
LANGUAGE_COOKIE_NAME = 'django_language' LANGUAGE_COOKIE_AGE = None LANGUAGE_COOKIE_DOMAIN = None LANGUAGE_COOKIE_PATH = '/'
if draft_as_non_draft_loc in to_process_dict: to_process_dict[draft_as_non_draft_loc] = draft
if course.discussion_link: discussion_tab = CourseTab.load( 'external_discussion', name=_('External Discussion'), link=course.discussion_link ) else: discussion_tab = CourseTab.load('discussion')
rng = np.random.RandomState(0) n, p = 50, 3
log_prob_x = logsumexp(jll, axis=1) return jll - np.atleast_2d(log_prob_x).T
import salt.utils import salt.payload
return ff
from safe_lxml import defuse_xml_libs defuse_xml_libs()
wrong_round_dict = {'col3': 2, 'col2': 1} tm.assert_frame_equal(df.round(wrong_round_dict), expected_partially_rounded)
if expr_form == 'list' and len(tgt) == seen: break
table_pieces = [] margin_keys = []
LogoutPage(self.browser).visit()
old_content += line result = None
print(('%10s ' + '%16s ' * (len(header_fields) - 1)) % tuple(header_fields))
course_listing = self.q(css=".course").filter(lambda el: course_name in el.text).results
if errors: return errors return high_data
estimators = [DecisionTreeClassifier(max_depth=2), DecisionTreeRegressor(max_depth=2)] sets = [datasets.load_iris(), datasets.load_boston()]
self.assertRaises(ValueError, store.put, 'c', df[10:], append=True)
user = User(username="rusty", email="rusty@fake.edx.org") course_id = SlashSeparatedCourseKey("edX", "Test101", "2013")
from __future__ import unicode_literals
if item in ['constraint']: extra_args = extra_args + ['id={0}'.format(item_id)] cmd += extra_args
raise RuntimeError('Invalid password provided.')
if settings.COMPREHENSIVE_THEME_DIR: enable_comprehensive_theme(settings.COMPREHENSIVE_THEME_DIR)
for layer in layer_to_state: old = layer_to_state[layer] new = updated[layer] if layer_to_clamp[layer]: assert new is old else: add_updates(old, new)
total_cost += l1_act_cost
with ensure_clean_store(self.path) as store:
result = store.select('df') tm.assert_frame_equal(expected, result)
self.test_init_database()
display_name = 'Nicely created' resp = self.create_xblock(display_name=display_name, category='chapter')
expected_url = course_image_url(course) self.assertEqual( course_overview_after.image_urls, { 'raw': expected_url, 'small': expected_url, 'large': expected_url } )
if first_octet < 1: return False elif first_octet > 223: return False elif first_octet == 127: return False
y = multioutput_estimator_convert_y_2d(name, y)
if self.xqueue_grade_response is not None: XQueueResponseFixture(self.submission, self.xqueue_grade_response).install()
garbage_prepend_json = '{0}{1}'.format(LORUM_IPSUM, test_sample_json) ret = utils.find_json(garbage_prepend_json) self.assertDictEqual(ret, expected_ret)
import_library_from_xml( self.store, 'test_user', self.export_dir, ['exported_source_library'], static_content_store=contentstore(), target_id=source_library2_key, load_error_modules=False, raise_on_failure=True, create_if_not_present=True, )
from sklearn.ensemble import RandomForestClassifier from sklearn.svm import SVC
if output: grains['virtual'] = output.lower() break
#html_use_index = True
self._choose_algorithm(self.algorithm, self.metric)
self.assertTrue(hasattr(course_overview, 'image_set')) self.assertEqual(course_overview.image_set.small_url, '') self.assertEqual(course_overview.image_set.large_url, '')
features = np.arange(n_features)[support_] self.estimator_ = clone(self.estimator) self.estimator_.fit(X[:, features], y)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
X, y = make_classification(n_samples=20, n_features=10, shuffle=False, random_state=0)
block = modulestore().get_course(course.id, depth=None) for __ in range(depth - 1): children = block.get_children() block = children[-1]
import contextlib import textwrap import json try: import dns.query import dns.tsigkeyring HAS_DNS = True except ImportError: HAS_DNS = False
b_float32 = astype(a_int32, dtype=np.float32, copy=False) assert_equal(b_float32.dtype, np.float32)
if not order: raise ValueError("order needs to be specified and greater than 0") terp = interpolate.UnivariateSpline(x, y, k=order, **kwargs) new_y = terp(new_x)
result2 = DataFrame(p.values.astype('float64') % 0, index=p.index, columns=p.columns) assert_frame_equal(result2, expected)
if srs: self.srs = srs
alpha_grid, scores_path = lasso_stability_path(X, y, random_state=42, eps=0.05)
reg_code = CourseRegistrationCode.objects.create( code="abcd1234", course_id=self.course.id, created_by=self.user )
index = tm.makeUnicodeIndex if compat.PY3: check('table', index) check('fixed', index) else:
create_collection_index(self.collection, 'definition.children', sparse=True, background=True)
lvs.__salt__ = {}
return method(self.noc_info, other.noc_info)
'milestones',
html.add_header(2, title_map[table_type]) html.add_to_body(phase_table.table)
htable.get_labels(vals[:nvals], uniques, 0, -1) uniques.to_array() htable.get_labels(vals, uniques, 0, -1)
localemod.__context__ = {} localemod.__grains__ = {} localemod.__salt__ = {}
return hash(str(self))
y_type = y_type.pop()
sysbench.__salt__ = {}
trainer = yaml_parse.load(design_matrix_yaml % {'filename': filename}) trainer.main_loop()
return values.reshape(1, len(values))
wkt_reader_create = GEOSFuncFactory('GEOSWKTReader_create', restype=WKT_READ_PTR) wkt_reader_destroy = GEOSFuncFactory('GEOSWKTReader_destroy', argtypes=[WKT_READ_PTR])
self.assertEqual(self.cohort1.name, response_dict.get("name"))
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.save_problem(get_request_dict)
try: metadata = literal_eval(md)
split_table = split_tables[0] __, rendered_height = split_table.wrap(0, 0) split_table.drawOn(self.pdf, table_left_padding, y_pos - rendered_height)
result = s.resample('w-sun').last()
batch_size = self.batch_size
self.assertFalse(self.page.intro_video_element.visible)
blocks = [] for i, rl in enumerate(self.mgr_locs):
if not os.path.isdir(sourcepath): _LOG.error('Path is not present: %s', sourcepath) return False
continue
wua_searcher = wua_session.CreateUpdateSearcher()
if not request.user.is_superuser and not ApiKeyHeaderPermission().has_permission(request, self): return Response(status=status.HTTP_403_FORBIDDEN)
import salt.utils
if Y.ndim == 1: Y = Y[:, np.newaxis] if Y.shape[1] == 1: Y = np.append(1 - Y, Y, axis=1)
from salt.exceptions import CommandExecutionError import salt.utils
idx = mapping if isinstance(flat, (tuple, list)): assert 0 <= idx < len(flat) return flat[idx] else: assert idx == 0 return flat
self.add_license_to_xml(xml_object, default="all-rights-reserved")
for key in wrong: params = baseline.copy() params[key] = wrong[key] with self.assertRaises(CCProcessorDataException): payment_accepted(params)
full_plan = self.migration_plan(self.loader.graph.leaf_nodes(), clean_start=True)
self.assertEqual(initially_enrolled, CourseEnrollment.is_enrolled(self.user, course_id))
resp_params = PaymentFakeView.response_post_params(post_params)
if self.engine == 'c' and self.low_memory: warning_type = DtypeWarning
import salt.utils.cloud import salt.config as config from salt.exceptions import SaltCloudSystemExit
from salttesting.unit import skipIf from salttesting.case import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../..')
log = logging.getLogger(__name__)
raise SaltInvocationError('Command must be specified')
apiserver_url = "http://127.0.0.1:8080"
from pylearn2.gui.patch_viewer import PatchViewer
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.lisa])
self.assertEqual(e.__class__, ValueError)
if user.has_perms(perms): return True if raise_exception: raise PermissionDenied return False
plt.subplot(2, 2, i + 1) Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
self._assert_reg_field( no_extra_fields_setting, { "name": "password", "type": "hidden", "required": False, } )
}, index=range(3))
from itertools import imap as map range = xrange
def f(): df.quantile(.5, axis=1, numeric_only=False) self.assertRaises(TypeError, f)
self.hashed_files[hash_key] = cache_name
from sklearn.neighbors import kneighbors_graph connectivity = kneighbors_graph(X, n_neighbors=10, include_self=False)
self.pendings = None
from __future__ import absolute_import
blah = DataFrame(np.empty([0, 1]), columns=['A'], index=DatetimeIndex([]))
elif (accepted_count * 4) >= mof_s: level = logging.INFO
else: default_manager = models.Manager() default_manager.model = model default_manager.name = model._default_manager.name managers.append((force_text(default_manager.name), default_manager))
if self.check_pidfile(): os.unlink(self.config['pidfile'])
CourseEnrollment.unenroll(user, course_id) self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assertFalse(CourseEnrollment.is_enrolled_by_partial(user, course_id_partial)) self.assert_no_events_were_emitted()
v1 = getattr(o, op)(o)
metric_str = metric if name in METRICS_WITH_POS_LABEL: metric_str = partial(metric_str, pos_label=pos_label_str)
iris = datasets.load_iris() X, y = iris.data[:, 1:3], iris.target
THEME_NAME = ENV_TOKENS.get('THEME_NAME', None) COMPREHENSIVE_THEME_DIR = path(ENV_TOKENS.get('COMPREHENSIVE_THEME_DIR', COMPREHENSIVE_THEME_DIR))
continue
if six.PY3: related_names.extend(['試', '試驗+'])
metadata_translations = { 'slug': 'url_name', 'name': 'display_name', }
for mode in [CourseMode.DEFAULT_MODE_SLUG, CourseMode.VERIFIED]: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode, mode_display_name=mode, )
store.save(content)
self.literal = float(var)
with self.assertRaises(Article.DoesNotExist): Article.objects.earliest()
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
d1 = df.copy().drop(1, axis=0) expected = df.copy() expected.loc[1, :] = np.nan
alternate_course = self.create_course(course='mobile', mobile_available=True)
else: ret = _load_result(existing, ret)
from __future__ import unicode_literals
self._process_map = {}
import integration
tm.close() gc.collect() for key in results: with tm.assertRaises(ReferenceError): results[key].lines
print "static_asset_path = {0}".format(course.static_asset_path) self.assertEqual(course.static_asset_path, 'test_import_course')
for update in self.search_results.Updates: if update.InstallationBehavior.CanRequestUserInput: log.debug(U'Skipped update {0} - requests user input'.format(update.title)) continue
X = self._check_fit_data(X) return self.fit(X)._transform(X)
if not (self.n_jobs == 1 or self.n_jobs is None): path_params['copy_X'] = False
__virtualname__ = 'group'
return tuple(template_dirs)
'ext_pillar': list,
import os import logging import smtplib from email.utils import formatdate
format = ugettext("LONG_DATE_FORMAT") if format == "LONG_DATE_FORMAT": format = DEFAULT_LONG_DATE_FORMAT
pre_matches = __salt__['git.config_get_regexp']( cwd=repo, key=key, value_regex=value_regex, user=user, ignore_retcode=True, **{'global': global_} )
self.assertRaises(Exception, frame.__setitem__, 'foo', np.random.randn(N - 1))
return parse(out)
from __future__ import absolute_import import collections import itertools import functools import logging import json import StringIO import tarfile import time from multiprocessing import Process, Pipe
'template',
return [item + '\n' for item in ifcfg.split('\n')]
many_to_many = False many_to_one = True one_to_many = False one_to_one = False
response = self.client.get(shortcut_url, follow=True) self.assertTemplateUsed(response, 'admin/login.html')
required_boto3_version = '1.2.1'
id_list = [o.pk for o in self.q1.answer_set.all()] x = id_list.pop() id_list.insert(-1, x)
os.environ['SALT_CLOUD_CONFIG'] = env_fpath config = sconfig.cloud_config(fpath) self.assertEqual(config['log_file'], fpath)
startup_info = win32process.STARTUPINFO() startup_info.dwFlags = win32con.STARTF_USESTDHANDLES startup_info.hStdInput = stdin_read startup_info.hStdOutput = stdout_write startup_info.hStdError = stderr_write
unlink = os.unlink
else: values, changed = _maybe_upcast_putmask(values, mask, fill_value)
y1 = np.array([[0, 1, 1], [1, 0, 1]]) y2 = np.array([[0, 0, 1], [1, 0, 1]])
membership = Membership.objects.create( membership_country_id=self.usa.id, person_id=self.bob.id, group_id=self.cia.id)
assert_raises(ValueError, ForestEstimator(oob_score=True, bootstrap=False).fit, X, y)
store1 = HDFStore(path)
import salt.ext.six as six
password: USE_KEYRING
if val == val and val != %(nan_val)s:
from __future__ import absolute_import
import salt.utils from salt.modules import puppet from salt.exceptions import CommandExecutionError
upload_csv_to_report_store(rows, 'proctored_exam_results_report', course_id, start_date)
obj = self._construct(shape=0) self.assertRaises(ValueError, lambda: bool(obj))
from salt.states import sysctl
win_path.__salt__ = {} win_path.__opts__ = {}
with tm.assert_produces_warning(FutureWarning): df.sort_index(by=['a'])
kwargs['program'] = self.script
remove_user_from_cohort(second_cohort, self.student.username) self.assert_student_in_group(None)
rval = (transform(raw_batch[0]),) + raw_batch[1:]
raise SaltCloudSystemExit( 'The query_instance action must be called with -a or --action.' )
tm._skip_if_no_pytz()
level = getattr(syslog, _options['level']) facility = getattr(syslog, _options['facility'])
from salttesting.helpers import ensure_in_syspath
random = np.random.RandomState(seed=0) E = random.normal(size=(len(X), 2200))
_mixin_prio_ = 100
if stdout is None and stderr is None: self.assertFalse(term.isalive())
result = df.take(order, axis=1) expected = df.ix[:, ['C', 'B', 'D']] assert_frame_equal(result, expected, check_names=False)
mixed = Series(['a', NA, 'b', True, datetime.today(), 'foo', None, 1, 2.])
if not basedir: basedir = _get_yum_config_value('reposdir')
if cc_thread['closed']: raise PermissionDenied
import logging
return user[0].state
if not ((requester_perms & STUDIO_EDIT_ROLES) or (user.id == request.user.id)): return permissions_error_response
params = self._signed_callback_params(self.order.id, self.COST, "abcd") result = process_postpay_callback(params)
dist_param = value
url(r'^lang_pref/session_language', 'lang_pref.views.update_session_language', name='session_language'),
output = six.StringIO() output.write('content') output.seek(0)
stage_vars = _get_stage_variables(stage_variables)
self.client.logout()
try: ds[len(ds)] except OGRIndexError: pass else: self.fail('Expected an IndexError!')
else: c = Categorical(key, ordered=True)
num_braces = 0
from __future__ import absolute_import import copy import logging import re import os import time import datetime
with self.assertNumQueries(2): avatar.delete()
sparse_grouped = self.sparse.groupby('A') dense_grouped = self.dense.groupby('A')
cov = pca.get_covariance() precision = pca.get_precision() assert_array_almost_equal(np.dot(cov, precision), np.eye(X.shape[1]), 12)
self.assertDeserializeEqual('"false"', '"false"') self.assertDeserializeNonString()
res = self.client.get('/dates/books/2008/week/12/') self.assertEqual(res.status_code, 404)
all_assets, count = content_store.get_all_content_for_course(course.id) self.assertEqual(len(all_assets), 0) self.assertEqual(count, 0)
result = eval("m{op}df".format(op=op_str)) assert_frame_equal(result, expected)
return vm_result
- 'olcDatabase={1}hdb,cn=config': - replace: olcRootDN: - cn=admin,dc=example,dc=com olcRootPW: []
grandfathered_student = UserFactory() grandfathered_student.date_joined = timezone.now()
tsframe = self.tsframe.copy() new_index = [tsframe.index, np.arange(len(tsframe.index))] tsframe.index = MultiIndex.from_arrays(new_index)
del params["email"] assert_email_error("A properly formatted e-mail is required")
if self.kind == 'period' and not isinstance(result.index, PeriodIndex): result.index = result.index.to_period(self.freq) return result
GUID_REGEX = re.compile(r'{?([0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12})}?', re.I)
import salt.transport.ipc import salt.config
toy_course = store.get_course(SlashSeparatedCourseKey('edX', 'toy', '2012_Fall')) toy_course.wiki_slug = 'simple'
self.assertIn("ufeff", filedata) self.ufeff_srt_file.write(filedata) self.ufeff_srt_file.seek(0)
settings.apply_settings(self.settings) self.assertFalse(self.settings.SOCIAL_AUTH_RAISE_EXCEPTIONS)
__salt__['raid.save_config']()
clf = MockClassifier() grid_search = GridSearchCV(clf, {'foo_param': [1]}) grid_search.fit(X, y) assert_true(hasattr(grid_search, "grid_scores_"))
'ENABLE_EDXNOTES': False,
pred_decision = column_or_1d(pred_decision) pred_decision = np.ravel(pred_decision)
ret['changes'] = {'new': '', 'old': name}
page.wait_for_element_visibility('.new-component-advanced', 'Advanced component menu is visible')
if auth_app.User._meta.swapped: return ''
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.approve()
get_storage = show_storage
if uid is None: user = list_users() uid = user[username]['index']
can_enroll = bool(has_access(request.user, 'enroll', course)) invitation_only = course.invitation_only is_course_full = CourseEnrollment.objects.is_course_full(course)
iris = load_iris() X = iris.data y = iris.target transft = TransfT() pipeline = Pipeline([('mock', transft)])
if not self.is_unique and len(indexer): raise ValueError("cannot reindex from a duplicate axis")
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
return False
self.deferred_loading = field_names.difference(existing), False
self.assertEquals(3, len(response.content.splitlines()))
data_test, targets_test = data[n_samples / 2:], digits.target[n_samples / 2:] #data_test = scaler.transform(data_test)
url(r'^admin/', admin.site.urls),
blocks = get_course_blocks(user, usage_key, transformers)
if 0 not in classes_k and y_nnz[k] < y.shape[0]: classes_k = np.insert(classes_k, 0, 0) class_prior_k = np.insert(class_prior_k, 0, zeros_samp_weight_sum)
for item in list(required_keys): if item in provider_key: required_keys.remove(item)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
packages_sources={} installed_packages_list={}
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
LIBRARY_LABEL = "Library" COUNT_LABEL = "Count" SCORED_LABEL = "Scored" PROBLEM_TYPE_LABEL = "Problem Type"
self.assertEqual(len(exceptions), 1)
ed, created = book.authors.get_or_create(name="Ed") self.assertTrue(created) self.assertEqual(book.authors.count(), 1)
for letter in range(ord('A'), ord('Z')): self.frame[chr(letter)] = chr(letter)
exceptions = set()
self.client.logout() self._test_return_login()
__virtualname__ = 'pgjsonb'
with tm.ensure_clean('test.tex') as path: self.assertRaises(UnicodeEncodeError, df.to_latex, path)
self.assertEqual(response.status_code, 400)
if __opts__['test']: ret['result'] = None ret['comment'] = 'Service {0} is set to start'.format(name) return ret
response.data["current_page"] = self.page.number
df.ix['d', :] = nan
return self._intercept or self._entity_effects or self._time_effects
if when > data['_when']: data['_when'] = when data['_when_run'] = True
self.wait_for_ajax()
for group in self.option_groups: for option in group.option_list: if option.dest is None: continue
other = RangeIndex(25, 14, -1)
if timezone.is_aware(value): raise ValueError("SQLite backend does not support timezone-aware times.")
if redirect_url or path != request.get_full_path(): redirect_url += path return self.response_redirect_class(redirect_url)
pass
expErrMsg = "Interpolation methods other than " with tm.assertRaisesRegexp(ValueError, expErrMsg): self.ts.quantile(0.9, interpolation='nearest')
from __future__ import unicode_literals
User.objects.filter(username='testclient').update(is_staff=True, is_superuser=True) self.login() self.admin = User.objects.get(pk=self.u1.pk)
selectable_modes = CourseMode.modes_for_course_dict(self.course_key) self.assertItemsEqual(selectable_modes.keys(), expected_selectable_modes)
buckets = 10 bucket_width = 1. / float(buckets) for i in xrange(buckets): lower_lim = i * bucket_width upper_lim = (i+1) * bucket_width
if rate_limiter.is_rate_limit_exceeded(request): log.info(u"Bad request rate limit exceeded for update example certificate end-point.") return HttpResponseForbidden("Rate limit exceeded")
clf3 = MultinomialNB() clf3.partial_fit(X, y2, classes=np.unique(y2))
import salt.loader
CreditCourse.objects.create(course_key=course.id, enabled=True)
if level is not None:
lm = LayerMapping(County, co_shp, co_mapping, transform=False, unique='name') with self.assertRaises(MissingForeignKey): lm.save(silent=True, strict=True)
def argpartition(a, kth, axis=-1, kind='introselect', order=None): return np.argsort(a, axis=axis, order=order)
url = "%s?leader__name=Palin&leader__age=27" % reverse('admin:admin_views_inquisition_changelist') response = self.client.get(url) self.assertEqual(response.status_code, 200)
intfs = __salt__['sysfs.interfaces'](path)
lon = (px[0] - npix) / self._degpp[zoom]
hwaddr = salt.utils.alias_function(hw_addr, 'hwaddr')
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) signal_handler.send.assert_called_with('course_published', course_key=course.id)
if '_when' in data and data['_when'] != when: data['_when_run'] = True data['_when'] = when seconds = when - now
return HttpResponseRedirect(reverse('shoppingcart.views.show_receipt', args=[result['order'].id]))
from __future__ import absolute_import from collections import Callable
logger.debug( "Comment Service received PUT request {0} to path {1}" .format(json.dumps(post_dict), self.path) )
algorithm = GDAL_RESAMPLE_ALGORITHMS[resampling]
X = coo_matrix(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
if isinstance(value, float): return datetime.timedelta(seconds=value)
s = pd.Series(pd.Categorical([1, 2, 3, 4])) self.assertRaises(TypeError, lambda: np.sum(s))
return values
cet = CourseEmailTemplate.objects.get(name='foo') self.assertIsNotNone(cet)
args = (machine, session) progress = wait_for(_start_machine, timeout=timeout_in_seconds, func_args=args) if not progress: progress = machine.launchVMProcess(session, "", "")
self.assertRaises(ValueError, lambda: result.to_pandas())
kwargs['freq'] = self.freq
self.assertEqual( self.run_function('shadow.del_password', [NO_USER]), 'ERROR: User not found: {0}'.format(NO_USER))
if bulk_ops_record.active: return
from __future__ import absolute_import
with warnings.catch_warnings(record=True) as recorded_warnings: kwargs_warn_until(
assert_almost_equal(np.dot(U[:, :k], V[:k, :]), np.dot(Ua, Va))
response = requests.get(self.url + "?test_param=") self.assertEqual(response.status_code, 400)
for p in self.geometries.polygons: poly = fromstr(p.wkt)
compression='infer', thousands=None, decimal=b'.', lineterminator=None, quotechar='"', quoting=csv.QUOTE_MINIMAL, escapechar=None, comment=None, encoding=None, dialect=None, tupleize_cols=False,
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0)
if not __execute_cmd('config -g cfgUserAdmin -o ' 'cfgUserAdminEnable -i {0} 1'.format(uid)): delete_user(username, uid) return False
if not self.warm_start: self._clear_state()
#latex_logo = None
port: 8000 ssl_crt: /etc/pki/api/certs/server.crt ssl_key: /etc/pki/api/certs/server.key debug: False disable_ssl: False websockets: True
raise ValueError('time-weighted interpolation only works ' 'on Series or DataFrames with a ' 'DatetimeIndex')
data = fetch_20newsgroups_vectorized().data[:500]
self._subtree_edited_on = kwargs.get('_subtree_edited_on', None) self._subtree_edited_by = kwargs.get('_subtree_edited_by', None)
self.assertEqual(certificate_exception['user_email'], self.user.email) self.assertEqual(certificate_exception['user_name'], self.user.username)
SupportStaffRole().remove_users(self.admin) response = self.client.get('/support/') self.assertTrue(response.status_code, 302)
def add_node_as_child(self, block, node, id_generator): child_block = self.process_xml(etree.tostring(node)) block.children.append(child_block.scope_ids.usage_id)
CHINESE_LANGUAGE_CODE_MAP = {
'idset': idset,
import logging
if gated_content and unicode(section.location) in gated_content: continue if section.hide_from_toc: continue
os.system('cd build; rm -f html/pandas.zip; zip html/pandas.zip -r -q html/* ') print("\n")
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self.assertContains(response, 'This is a test')
assert np.all((ps == 0) + (ps == 1)) assert np.all((hs == 0) + (hs == 1))
html_last_updated_fmt = '%b %d, %Y'
if desc: system_info['comment'] = desc.decode('utf-8') else: return False
scov = np.cov(X, rowvar=0., bias=1.)
indexer = np.arange(len(df.columns))[isnull(df.columns)]
handler = cherrypy.request.ws_handler
if created: self.add(obj) return obj, created
import salt.utils.cloud import salt.config as config from salt.exceptions import SaltCloudSystemExit
clf = ElasticNet() brc3 = Birch(n_clusters=clf) assert_raises(ValueError, brc3.fit, X)
from matplotlib.finance import quotes_historical_yahoo as quotes_historical_yahoo_ochl
return self.copy(deep=True)
int_idx = idx1.intersection(idx2)
self.assertEqual(len(httpretty.httpretty.latest_requests), 1)
self.module_refresh() return
if rbm.nvis < rbm.nhid: width = rbm.nvis type = 'vis' else: width = rbm.nhid type = 'hid'
UserFactory.create(username=self.USERNAME, email=self.EMAIL, password=self.PASSWORD)
self.session['_auth_user_id'] = 42 self.session.save()
self._check_text_labels(xlabels, [''] * len(xlabels)) ylabels = ax.get_yticklabels() self._check_text_labels(ylabels, [''] * len(ylabels))
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
def _get_restype(self): return self.cfunc.restype
import salt.utils.cloud import salt.config as config from salt.exceptions import ( SaltCloudNotFound, SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
try:
return None
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
msg = "Input has different freq=A-DEC from PeriodIndex" with tm.assertRaisesRegexp(period.IncompatibleFrequency, msg): base <= Period('2011', freq='A')
result = self.index.append([]) self.assertTrue(result.equals(self.index))
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] h1_state = layer_to_state[h1] h2_state = layer_to_state[h2]
X2 = np.ones(17) kf = KFold(3) check_cv_coverage(kf, X2, y=None, labels=None, expected_n_iter=3)
dummy1 = _("This is a translatable string.")
import re import logging from salt.ext.six import string_types
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.save_problem(get_request_dict)
del pillar
certs_api.set_cert_generation_enabled(self.COURSE_KEY, True) self._assert_enabled_for_course(self.COURSE_KEY, True)
df = DataFrame(data={'i64': [2**62]}) df.to_sql('test_bigint', self.conn, index=False) result = sql.read_sql_table('test_bigint', self.conn)
self.source_expressions.append(Value(0))
message = "np.nan is an invalid document, expected byte or unicode string." exception = ValueError
obj = Empty() obj.__class__ = self.__class__ obj.__dict__ = self.__dict__.copy() return obj
u = np.zeros((n_targets, n_eval))
self._assert_output(output, (self.user, self.courses[0].id, True))
create_collection_index(self.collection, '_id.revision', background=True)
__proxyenabled__ = ['fx2']
s = Series([0, 1, np.nan, 3, 4, 5])
{'type': unique_tab_type}, {'type': unique_tab_type},
registration = Registration() registration.register(user)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return self.to_python(initial) != self.to_python(data)
if pkg_type == 'repository': pkgstr = '{0}={1}'.format(pkgname, version_num) else: pkgstr = pkgpath
name_instructions = _(u"Your legal name, used for any certificates you earn.")
if is_staff: user = User.objects.get(email=email) user.is_staff = True user.save()
n_i = used_node[i] n_j = used_node[j] used_node[k] = n_i + n_j used_node[i] = used_node[j] = False
import logging import json import yaml
if hasattr(self, '_choices'): return self._choices
if state == {}: continue
self.q(css="a.forgot-password").click()
response = RedirectView.as_view(url='/bar/')(self.rf.request(PATH_INFO='/foo/')) self.assertEqual(response.status_code, 302)
continue
return _error(ret, u_check)
if self.has_spatial_indexes: self.assertSpatialIndexExists('gis_neighborhood', 'heatmap')
if b._can_hold_na: mask = isnull(d) d[mask] = None
set_idxs = safe_zip(*minibatch)[0]
class Entity(models.Model): pass
for ignored in IGNORED_PARAMS: if ignored in lookup_params: del lookup_params[ignored] return lookup_params
df = DataFrame(np.random.randint(0, 5, size=40).reshape((10, 4)))
for enrollment in manual_enrollments: self.assertEqual(enrollment.enrollment.mode, CourseMode.AUDIT)
if credit_service: credit_state = credit_service.get_credit_state(user_id, course_id) if credit_state: context.update({ 'credit_state': credit_state })
for pool_size in [1, 2, 5]: do_test(pool_size)
if mp is not None: try: _sem = mp.Semaphore()
VerificationStatus.add_verification_status( checkpoint=self.first_checkpoint, user=self.user, status=status )
else: data = dict(zip(range(len(self.objs)), self.objs)) cons = _concat._get_series_result_type(data)
DATE_INPUT_FORMATS = [
import salt.utils.http
'openedx.core.djangoapps.credentials',
require_course_email_auth = models.BooleanField(default=True)
MMINION = None
raise SkipTest
resource = None for field in identifier_fields: if field in data: resource = get_resource(resource_name, data[field], identifier_fields, profile, subdomain, api_key) if resource is not None: break
if len(state) == 2: nd_state, own_state = state data = np.empty(nd_state[1], dtype=nd_state[2]) np.ndarray.__setstate__(data, nd_state)
is_collection = False
from __future__ import unicode_literals
proj_grad_W = squared_norm(gradW * np.logical_or(gradW < 0, W > 0)) proj_grad_H = squared_norm(gradH * np.logical_or(gradH < 0, H > 0))
class HashableClass(object): pass
urlpatterns += patterns( 'contentstore.views',
qs = Publisher.objects.extra(select={ 'name_of_shortest_book': shortest_book_sql, }).annotate(total_books=Count('book')) list(qs)
url(r'get_coupon_codes', 'instructor.views.api.get_coupon_codes', name="get_coupon_codes"),
'open_mode': bool,
mask = img.astype(bool)
Y = np.dot(X, B) + np.random.normal(size=n * q).reshape((n, q)) + 5
if (not isinstance(indexer, slice) or indexer.stop - indexer.start != 1): return partial_selection(key, indexer)
break
from __future__ import absolute_import import functools import logging import os.path import os import re import time
if __opts__['test']: ret['result'] = None ret['comment'] = 'Service {0} set to be disabled'.format(name) return ret
update_watch() notifier.check_events(timeout=None) notifier.read_events() notifier.process_events() notifier.stop()
chunksize = 1e4
if self.token is not None and 'token' not in low: low['token'] = self.token
info = prlctl('snapshot-list', [name, '--id', snap_id], runas=runas)
for o in self.is_valid_objs: if isinstance(o, Series):
pipeline = Pipeline([ ('vect', CountVectorizer()), ('tfidf', TfidfTransformer()), ('clf', SGDClassifier()), ])
data_x = np.cast[config.floatX](data['data']) data_x = data_x[MNISTPlus.idx[which_set]]
'log_level': str,
s = Series([1, 2, 3, 4, 5], index=date_range( '20130101', periods=5, freq='s')) r = s.resample('2s')
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
i = np.argsort(dist2, axis=1) row_ind = np.arange(n_rows)[:, None] dist2 = dist2[row_ind, i] ind2 = ind2[row_ind, i]
staff_user = User.objects.create_user('test_staff_user', 'test_staff_user@openedx.org', 'test') CourseStaffRole(self.master_course_key).add_users(staff_user)
self.assertIsNone(file_move_safe(self.file_a, self.file_b, allow_overwrite=True))
with tm.assertRaises(NotImplementedError): pd.read_excel(os.path.join(self.dirpath, 'test1' + self.ext), chunksize=100)
available_apps = None
self.courses.append([CourseFactory().location.course_key for _i in range(3)])
self.assertQuerysetEqual(Choice.objects.filter(choice__exact=None), [])
penalty = penalty + abs(var ** self.p).sum()
if ccxs.exists(): return ccxs[0] return None
import nose
call_command(self.cmd, addrport="beef:7654") self.assertServerSettings('beef', '7654')
self.assertQuerysetEqual( qs.order_by('-second_extra').values_list('first', flat=True), ['a', 'a'], lambda x: x)
fkeys = partial(_factorize_keys, sort=sort)
if signal.getsignal(signal.SIGINT) is signal.SIG_DFL: signal.signal(signal.SIGINT, self._handle_signals)
log = logging.getLogger(__name__)
ADD_PKG = 'algol68g' DEL_PKG = 'acme'
least_squares, info = solve_cholesky(L[:n_active, :n_active], sign_active[:n_active], lower=True)
request = self.request_factory.get('/', {}) changelist = self.get_changelist(request, Book, modeladmin)
expected_url = reverse( "about_course", args=[self.course.id.to_deprecated_string()] )
self.course_id = course_id self.load_error_modules = load_error_modules self.modulestore = xmlstore
self.assert_middleware_usage(middleware, True, True, True, True, False)
exclude_trees = []
class metaclass(meta):
perms = eauth.get(token['name'], []) perms.extend(eauth.get('*', []))
self.setup_groups_partitions() self.user_partition = self.user_partitions[0]
self.assertEqual(-1, split_test.user_partition_id) self.assertEqual(0, len(split_test.children))
resp_status = self.client.get( reverse_course_url( 'import_status_handler', self.course.id, kwargs={'filename': os.path.split(self.bad_tar)[1]} ) )
FROM_ABOUT_INFO = from_about_dictionary FROM_COURSE_PROPERTY = from_course_property FROM_COURSE_MODE = from_course_mode
def default(obj): return msgpack.ExtType(78, obj)
while (svd_restarts < max_svd_restarts) and not has_converged:
response = salt.utils.vmware.esxcli(host, username, password, cmd, protocol=protocol, port=port) ret.update({host: response})
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
n_components = 150
depth = len(samples)
block_start = get_field_on_block(block_structure.get_xblock(block_key), 'start') if min_all_parents_start_date is None: merged_start_value = block_start or DEFAULT_START_DATE
if self.cleaned_data.get("_expiration_datetime"): return self.cleaned_data.get("_expiration_datetime").replace(tzinfo=UTC)
ret['result'] = None
minion_id = kwargs['opts']['id']
kwargs.pop('name', None) kwargs.pop('state', None)
cached_pkg = cached_pkg.replace('/', '\\') cache_path, _ = os.path.split(cached_pkg)
subtask_status.increment(state=SUCCESS) return subtask_status, None
def close_old_connections(**kwargs): for conn in connections.all(): conn.close_if_unusable_or_obsolete() signals.request_started.connect(close_old_connections) signals.request_finished.connect(close_old_connections)
boxes = self.color or self._boxes_c whiskers = self.color or self._whiskers_c medians = self.color or self._medians_c caps = self.color or self._caps_c
__func_alias__ = { 'list_': 'list' }
SupportedFieldType( 'merged_visible_to_staff_only', VisibilityTransformer, requested_field_name='visible_to_staff_only', )
return self.as_matrix()
from __future__ import absolute_import
import salt.utils from salt.utils.locales import sdecode as _sdecode from salt.exceptions import SaltInvocationError
test.__salt__ = {} test.__opts__ = {} test.__low__ = {'__reqs__': {'watch': ''}}
value = np.zeros_like(X.data)
self.assertEqual(res.context['next_week'], None) self.assertEqual(res.context['previous_week'], datetime.date(2006, 4, 30))
self.aliases[cmd] = value
cert = request._req.subprocess_env.get(certkey, '')
if f_ordered: new_values = new_values.T
assert_array_almost_equal(lr1.coef_, lr2.coef_) msg = "Arrays are not almost equal to 6 decimals" assert_raise_message(AssertionError, msg, assert_array_almost_equal, lr1.coef_, lr3.coef_)
for k, v in compat.iteritems(meta_vals): if meta_prefix is not None: k = meta_prefix + k
retcode = 1 if outstr: raise
course = self.store.delete_course(course_key, self.user_id)
self.assertRaises( ValueError, store.put, 'b', df[10:], append=True)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
pass
if path.startswith('/static/'): path = path[len('/static/'):]
user = StaffFactory.create(course_key=course.id) self.assertTrue(access._has_access_course(user, 'enroll', course))
res = _values_from_object(res)
announcement, start, now = sorting_dates(start, advertised_start, announcement)
import tornado.httputil import tornado.simple_httpclient from tornado.httpclient import HTTPClient
if (isinstance(section, ABCDataFrame) and i > 0 and len(new_key) == 2): a, b = new_key new_key = b, a
cache.clear()
if connector == '^': return 'django_power(%s)' % ','.join(sub_expressions) return super(DatabaseOperations, self).combine_expression(connector, sub_expressions)
if len(data) and (data.dtype == 'float' or data.dtype == 'object'):
err = SearchIndexingError mock_index_dictionary.return_value = err
for mode in unexpired_modes[course_key]: if mode.min_price > 0 and not CourseMode.is_credit_mode(mode): return mode
release = version
re.compile(r'^Course Outline \|'): [ "js/base", "js/models/course", "js/models/location", "js/models/section"],
response = self._get_progress_page()
dr = bdate_range(datetime(2005, 1, 1, tzinfo=pytz.utc), '1/1/2009', tz=pytz.utc)
ts_irregular[5:].plot(secondary_y=True, ax=ax) ts_irregular[:5].plot(ax=ax)
if start_date is None: start_date = datetime.datetime(1970, 1, 1)
import fnmatch import logging import os import re import time import stat import tempfile
import salt.config import salt.loader
cauth = CourseAuthorization(course_id=course_id, email_enabled=False) cauth.save()
el.find_element_by_css_selector('#upgrade-to-verified').click()
field, field_list_filter_class = list_filter, FieldListFilter.create
input_dict = {'1_2_1': 'Michigan'} correct_map = problem.grade_answers(input_dict) self.assertEquals(correct_map.get_hint('1_2_1'), "")
return None, mods, errors
cmd_mock = MagicMock(return_value=lsscsi) with patch.dict(scsi.__salt__, {'cmd.run_all': cmd_mock}): self.assertDictEqual(scsi.ls_(get_size=False), result)
from salt.ext.six import string_types
cmd.extend(packages)
destroy(vm_['name'])
tm._skip_if_32bit() from decimal import Decimal
from salt.modules import pecl
fields = fields.split(',')
grouped = self.tsframe.groupby([lambda x: x.weekday(), lambda x: x.year ])
jid_dir, jid_file = self._make_tmp_jid_dirs(create_files=False)
with self.assertRaises(ValueError): with transaction.atomic(using='other'): dive.reviews.add(review1)
{% from 'lib.sls' import port with context %} port {{ port }} bind {{ bind }}
self.assertNotEqual(global_vars, [], msg='No modules were loaded.')
centos7-2-iad-rackspace: provider: rackspace-iad size: general1-2 block_device: - source: image id: <image_id> dest: volume size: 100 shutdown: <preserve/remove> bootindex: 0
user = BetaTesterFactory(course_key=course_descriptor.id) normal_student = UserFactory() instructor = InstructorFactory(course_key=course_descriptor.id)
clf = DecisionTreeClassifier().fit(X, y)
ForestEstimator = FOREST_ESTIMATORS[name] est = ForestEstimator(max_depth=1, max_leaf_nodes=4, n_estimators=1, random_state=0).fit(X, y) assert_greater(est.estimators_[0].tree_.max_depth, 1)
#
return self.check_root()
from __future__ import absolute_import, print_function import json import logging
digits = load_digits() X = digits.images.reshape((len(digits.images), -1)) y = digits.target
try: certificate_exception, student = parse_request_data_and_get_user(request, course_key) except ValueError as error: return JsonResponse({'success': False, 'message': error.message}, status=400)
XBlockDisableConfig.objects.create( disabled_create_blocks='', enabled=True )
try: original_pip_version = pip.__version__ pip.__version__ = MagicMock( side_effect=AttributeError( 'Faked missing __version__ attribute' ) ) except AttributeError: pass
col_line.append(columns.names[i])
from __future__ import absolute_import, print_function, with_statement import signal import logging import weakref import traceback import collections
import salt.ext.six as six
source_videos = list(get_videos_for_course(source_course.id)) target_videos = list(get_videos_for_course(destination_course_key)) self.assertEqual(1, len(source_videos)) self.assertEqual(source_videos, target_videos)
for batch in chunk(formated_data, SUBSCRIBE_BATCH_SIZE): result = mailchimp.listBatchSubscribe(id=list_id, batch=batch, double_optin=False, update_existing=True)
self.assertEqual(3, count_sessions()) management.call_command('clearsessions') self.assertEqual(1, count_sessions())
n_jobs, n_estimators, starts = _partition_estimators(self.n_estimators, self.n_jobs)
result = f.clean('1:30 PM 21-12-2010') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
self.assertEqual(self.rng[4], self.rng[np.int_(4)])
error_msg = "XQueue could not decode grade request" self._send_immediate_response(False, message=error_msg)
with self.assertRaises(ValueError): with transaction.atomic(using='default'): marty.edited.set([pro, dive])
try: if np.isnan(value): return True except: pass
to_rep_dict = {} value_dict = {}
with patch('capa.capa_problem.LoncapaProblem.rescore_existing_answers') as mock_rescore: mock_rescore.side_effect = exception_class(u'test error \u03a9') result = module.rescore_problem()
attempt.mark_ready() assert_equals(attempt.status, "ready")
from salt.modules import pkgutil from salt.exceptions import CommandExecutionError, MinionError
self.service.remove_credit_requirement_status( self.user.id, no_credit_course.id, 'grade', 'grade' )
_city = None _country = None
import salt.log.setup
request.COOKIES[settings.SESSION_COOKIE_NAME] = 'abc'
cmd = '/bin/pkg uninstall -v {0}'.format(pkg2rm) out = __salt__['cmd.run_all'](cmd, output_loglevel='trace')
DEPRECATED_ADVANCED_COMPONENT_TYPES = []
ind = res.argsort() res = res.take(ind) lidx = lidx.take(ind) ridx = ridx.take(ind)
raise
provider_str = CONFIG_NAME providers = self.run_cloud('--list-providers') log.debug("providers: %s", providers)
world.wait_for_visible('#data-student-profiles-table')
tab_ids[0], tab_ids[1] = tab_ids[1], tab_ids[0]
from salt.utils import etcd_util try: from urllib3.exceptions import ReadTimeoutError, MaxRetryError HAS_URLLIB3 = True except ImportError: HAS_URLLIB3 = False
mode = 'partitions'
pgettext = real_pgettext
index = date_range('1/1/2012', periods=4, freq='12H') index_as_arrays = [index.to_period(freq='D'), index.hour]
return [ block for block in modulestore().get_items( course_key, qualifiers={"category": category}, revision=ModuleStoreEnum.RevisionOption.published_only, ) if _is_in_course_tree(block) ]
james.delete()
assert_raises(ValueError, scale, X_csr, with_mean=True) assert_raises(ValueError, StandardScaler(with_mean=True).fit, X_csr)
enrollment = CourseEnrollment.get_enrollment(student, self.course.id) self.assertEqual(enrollment.is_active, False)
for choice in choices_list: choicegroup.remove(choice)
message_cache_key = ( 'embargo.message_url_path.courseware.{course_key}' ).format(course_key=self.course.id) cache.delete(message_cache_key)
self.add_team_configuration(max_team_size=4, topics=[]) self.assertFalse(self.course.teams_enabled)
__remove_null_logging_handler()
self.io_loop.spawn_callback(salt.engines.start_engines, self.opts, self.process_manager, proxy=self.proxy)
from salt.serializers import DeserializationError, SerializationError from salt.utils.aggregation import aggregate, Map, Sequence from salt.utils.odict import OrderedDict
obj = TimedeltaIndex([]) self.assertTrue(pd.isnull(getattr(obj, op)()))
try: import Crypto.Random HAS_CRYPTO = True except ImportError: HAS_CRYPTO = False
self.assertRaises(ValueError, df.to_sql, "", self.conn, flavor=self.flavor)
with self.assertRaises(TypeError): poly.__setitem__(0, LineString((1, 1), (2, 2)))
self.spatial_index = spatial_index
faces, target, target_names = load_func( data_folder_path, resize=resize, min_faces_per_person=min_faces_per_person, color=color, slice_=slice_)
if master is not None: tmp_ip = _host_to_ip(master) if tmp_ip is not None: master_ip = tmp_ip
log = logging.getLogger(__name__)
_globals['include'] = Registry.include _globals['extend'] = Registry.make_extend
num_drafts = self._get_draft_counts(course) self.assertEqual(num_drafts, 1)
self.assertRaises(Exception, self.btseries.__getitem__, self.btseries.index[-1] + BDay())
with self.assertRaises(forms.ValidationError): f.clean('2010-12-21')
self._coef_indptr = [] self._intercept_indptr = [] start = 0
pass
import xlsxwriter
cookiedict[key] = http_cookies._unquote(val)
return units_name.lower() in self.geodetic_units if units_name else self.srid == 4326
height.groupby(gender).plot(alpha=0.5) tm.close()
Xtrans = Xtrans.toarray() Xtrans2 = mkchi2(k=2).fit_transform(Xsp, y).toarray() assert_equal(Xtrans, Xtrans2)
df = tm.makeTimeDataFrame() store.append('df_time', df) self.assertRaises( ValueError, store.select, 'df_time', [Term("index>0")])
db_name = 'foo 1' self._db_creation_loop(db_name=db_name, returning_name=db_name, test_conn=True, connection_user=self.user, connection_pass=self.password )
auto_created = False
for field_name, ogr_name in self.mapping.items(): model_field = self.fields[field_name]
msg = "AttributeError or ValueError not raised by predict" assert_raises_regex(AssertionError, msg, check_estimators_unfitted, "estimator", NoSparseClassifier)
from __future__ import absolute_import import logging import os import time import re
regression.fit(x, y, sample_weight=w)
self.lift = 1 if -1 in self.index.labels[self.level] else 0
if values: engine = values['ENGINE'] options = values.get('OPTIONS', {}) backends[name] = _instantiate_backend_from_name(engine, options)
'master_uri_format': str,
if partition_id not in user_groups: return False
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
for prop in vmconfig['state']: if prop in vmconfig_type['instance'] or \ prop in vmconfig_type['collection'] or \ prop in vmconfig_type['create_only']: continue
exc_info_on_loglevel=logging.DEBUG
if spatialite: qs = qs.exclude(name='Texas') else: qs = qs.intersection(geom)
with ignore_warnings(): estimator = Estimator()
if values.dtype.fields is not None: values = values[self.cname]
return []
run_command = (test_command + 'run').format(mode) result = __salt__['cmd.run'](run_command) ret_val[key] = _parser(result)
if not hasattr(self, 'needs_reformat'): self.needs_reformat = self.needs_reshape del self.needs_reshape
assert_raises(ValueError, cls().partial_fit, X2, y2)
for (label_to_value_map, label_to_value_func) in zip(label_to_value_maps, norb.label_to_value_funcs): for label, expected_value in six.iteritems(label_to_value_map): actual_value = label_to_value_func(label) assert expected_value == actual_value
available_version = salt.utils.alias_function(latest_version, 'available_version')
self.process_root(root, export_fs)
DATE_INPUT_FORMATS = [
self.assertEquals(cohorts.get_cohort(user, course.id).name, "AutoGroup")
return _reduce_memmap_backed(a, m)
STATICFILES_STORAGE = 'pipeline.storage.NonPackagingPipelineStorage' STATIC_URL = "/static/"
raise
node = Element(self.category) super(XmlDescriptor, self).add_xml_to_node(node) return etree.tostring(node)
if backend_name == 'django.db.backends.postgresql_psycopg2': backend_name = 'django.db.backends.postgresql'
from __future__ import absolute_import, print_function import os import sys from subprocess import Popen, PIPE, STDOUT
if params.get('decision') == u'CANCEL': raise CCProcessorUserCancelled()
self.cache = salt.utils.cache.CacheFactory.factory( self.opts['pillar_cache_backend'], self.opts['pillar_cache_ttl'], minion_cache_path=self._minion_cache_path(minion_id))
django_next_version = '1.11'
boston = load_boston() perm = rng.permutation(boston.target.size) boston.data = boston.data[perm] boston.target = boston.target[perm]
with connection.schema_editor() as editor: editor.alter_field(LocalAuthorWithM2M, new_field, new_field)
return bool(self[perm_name])
if check_db and default_username: try: auth_app.User._default_manager.get(username=default_username) except auth_app.User.DoesNotExist: pass else: return '' return default_username
self.courseware_page.click_next_button_on_top() self.assert_navigation_state('Test Section 1', 'Test Subsection 1,1', 1, next_enabled=True, prev_enabled=True)
clf = pickle.loads(pickle.dumps(clf)) assert_true(sp.issparse(clf.coef_)) pred = clf.predict(X) assert_array_equal(pred, Y)
self.assertNotIn(extra_user.username, response.content)
if not __salt__['user.info'](user): user = __salt__['user.current']() if not user: user = 'SYSTEM'
from __future__ import absolute_import
import logging import salt.utils
result = embargo_api.check_course_access(self.course.id, ip_address='0.0.0.0') self.assertTrue(result)
import contextlib import functools import glob import logging import os import re import tempfile
'master_tops': dict,
from __future__ import absolute_import
U, V = svd_flip(U, V, u_based_decision=False)
{date:%A, %d %B %Y @ %H:%m:%S UTC}.
@property def _prefix(self): raise NotImplementedError('Prefix not defined')
self.assertTrue('Activate Course Enrollment' in response.content)
return False
__virtualname__ = 'debconf'
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
resp_params = PaymentFakeView.response_post_params(post_params) self.assertEqual(resp_params.get('decision'), 'DECLINE')
self.assertContains(self.response, company_markup)
match = uncommented_line_start_index_regex.search(template, line_start_index) if match is None: return None elif match.start() < start_index: return start_index else: return match.start()
from __future__ import absolute_import import os import string import random
if isinstance(opts, list): opts = ','.join(opts)
assert_almost_equal((3.0 * RBF(2.0))(X), (RBF(2.0) * 3.0)(X))
definition, children = cls.load_definition(definition_xml, runtime, def_id, id_generator)
import salt.modules.k8s as k8s
if 'packages' not in excludes: data['packages'] = __salt__['pkg.list_pkgs']()
error_code = 'course_id_not_provided' if not is_ccx: log.info('Master course ID not provided') error_code = 'master_course_id_not_provided'
exc = IndexError if _np_version_under1p12 else TypeError
AutoAuthPage( self.browser, username=username, email=email, password=password ).visit()
team = Team.objects.create(name="Red Vipers") Player(name="Timmy").save() Player(name="Bobby", team=team).save()
if (isinstance(e, AttributeError) and not isinstance(current, BaseContext) and bit in dir(current)): raise
@myattr_dec @myattr2_dec def func(): pass
n_clusters_1 = len(set(labels)) - int(-1 in labels) assert_equal(n_clusters_1, n_clusters)
import salt.utils from salt.exceptions import CommandExecutionError from salt.utils import locales
self.setUp()
new_structure = self._lookup_course(xblock.location.course_key).structure
self._submit_photos( face_image=self.IMAGE_DATA + "4567", photo_id_image=self.IMAGE_DATA + "8910", ) initial_data = self._get_post_data()
indices = indices[::-1] maybe_slice = lib.maybe_indices_to_slice(indices, len(target)) self.assertTrue(isinstance(maybe_slice, slice)) self.assert_numpy_array_equal(target[indices], target[maybe_slice])
expected = { "action": "add", "results": [ { "identifier": identifier, "error": False, "userDoesNotExist": False } ] }
self.assertTrue(hasattr(course_overview, 'image_set'))
data = {'a': (1, 2, 3), 'b': (4, 5, 6)}
assert_true(check_random_state(None) is np.random.mtrand._rand) assert_true(check_random_state(np.random) is np.random.mtrand._rand)
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
self._submit_photos( face_image=self.IMAGE_DATA, photo_id_image=self.IMAGE_DATA )
X, y = _boston_subset()
X, y = X[y < 2], y[y < 2]
epoch_num = 6 termination_criterion = EpochCounter(epoch_num)
for c in Country.objects.annotate(num_geom=functions.NumGeometries('mpoly')): self.assertEqual(2, c.num_geom)
np.random.RandomState(j).shuffle(X[:, j]) np.random.RandomState(j).shuffle(X_true[:, j])
if summary and not summary_data: summary.append(line) summary_data = _parse_fmdump("\n".join(summary))[0] continue
update_locale = salt.utils.which('update-locale') if update_locale is None: raise CommandExecutionError( 'Cannot set locale: "update-locale" was not found.')
MAX_BOOKMARKS_PER_COURSE = 100
__Location__ = 'do-not-get-from-metadata' return None
numpy = self.numpy if numpy: self._parse_numpy()
import tornado.stack_context
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
providers = OAuth2ProviderConfig.objects.all() self.assertEquals(len(providers), pcount + 2) self.assertEquals(providers[pcount].id, provider1.id) provider2 = providers[pcount + 1]
kern_data_minor = kern_data.transpose([0,2,3,1]).copy() img_data_minor = img_data.transpose([0,2,3,1]).copy()
key = str(socket_path)
pos_v = data neg_v = self.sampler.particles
wua_found = win32com.client.Dispatch('Microsoft.Update.UpdateColl')
FilterActs = None WeightActs = None
if output == '': return {'jobs': jobs}
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.save_problem(get_request_dict)
ctypes_array = GDAL_TO_CTYPES[self.datatype()] * (shape[0] * shape[1])
self.client.logout()
days_early_for_beta = FloatField(null=True) mobile_available = BooleanField(default=False) visible_to_staff_only = BooleanField(default=False)
import salt.utils from salt.exceptions import CommandExecutionError
'providers': dict,
self.assertTrue('success' in result and not result['success'])
if total is None: return (None, None) else: max_scores_cache.set(problem_descriptor.location, total)
def f(grp): if grp.name == 'Pony': return None return grp.iloc[0].loc['C']
result = np.empty(values.shape, dtype='float64') result.fill(np.nan) return result
from __future__ import absolute_import
if privacy is not None: profile_page.visit()
__virtualname__ = 'pkg'
self.assertEqual(len(apps), 2)
owner = batch.owner assert 'Subtensor' in str(owner.op) batch = owner.inputs[0]
self.login(email, password)
from __future__ import absolute_import import logging import time import decimal
beginning_of_unix_time = datetime(1970, 1, 1)
decision_only = OneVsRestClassifier(svm.SVR()).fit(X_train, Y_train) assert_raises(AttributeError, decision_only.predict_proba, X_test)
httpd = make_server('localhost', mod_opts['port'], application)
def f(): Categorical([1, 2], [1, 2, 2])
from __future__ import unicode_literals
self._setup_mode_and_enrollment(self.FUTURE, "verified")
([], []),
from __future__ import unicode_literals
if isinstance(cherrypy.serving.request.lowstate, list): creds = cherrypy.serving.request.lowstate[0] else: creds = cherrypy.serving.request.lowstate
from __future__ import absolute_import import logging
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'qingcloud', vm_['profile'], vm_=vm_) is False: return False
container.visit() container.delete(0)
try:
re.compile(r'^/admin/'),
setattr(p, 'restaurant', None)
DEBUG_TOOLBAR_MONGO_STACKTRACES = True
HOST = '1.2.3.4' USER = 'root' PASSWORD = 'SuperSecret!' ERROR = 'Some Testing Error Message'
return True
oh = OneHotEncoder(handle_unknown='42') oh.fit(X) assert_raises(ValueError, oh.transform, y)
input_dict = {'1_2_1': '-1', '1_2_2': '2', '1_2_3': '3'} correct_map = problem.grade_answers(input_dict)
lm2 = LayerMapping(ICity2, city_shp, icity_mapping) lm2.save()
if min_length > 1: params[field] = "a" assert_extra_field_error()
salt '*' win_wua.list_updates categories=['Security Updates'] severities=['Critical']
walk_to_end(ch, pattern_iter)
'master_sign_pubkey': bool,
opts['utils_dirs'] = ( opts.get('utils_dirs') or [os.path.join(opts['extension_modules'], 'utils')] )
algorithm = GDAL_RESAMPLE_ALGORITHMS[resampling]
self.assertEqual(len(v_data['course_modes']), 2)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
tab_ids[num_orig_tabs - 1], tab_ids[num_orig_tabs - 2] = tab_ids[num_orig_tabs - 2], tab_ids[num_orig_tabs - 1]
jid_dir_name = jid_file.rpartition('/')[2] self.assertEqual(jid_dir_name, 'jid')
default="images_course_image.jpg"
context[self.var_name] = obj return self.expression.resolve(context, True)
if when > data['_when']: data['_when'] = when data['_when_run'] = True
from __future__ import absolute_import
inner_module = inner_get_module(location.replace(category="problem", name='choiceprob')) inner_module.attempts = 1 inner_module.save()
url(r'^api/course_structure/', include('course_structure_api.urls', namespace='course_structure_api')),
DATE_FORMAT = 'd F Y' TIME_FORMAT = 'g:i A' SHORT_DATE_FORMAT = 'j M Y'
CONFIG_PREFIX = SERVICE_VARIANT + "." if SERVICE_VARIANT else ""
self._bind_module(lc_block) chosen_child = get_child_of_lc_block(lc_block) chosen_child_defn_id = chosen_child.definition_locator.definition_id lc_block.save()
all_models_but_abstractperson = (m for m in self.all_models if m is not AbstractPerson) for m in all_models_but_abstractperson: self.assertIn('_relation_tree', m._meta.__dict__)
redirect_url = embargo_api.redirect_if_blocked( course_id, user=user, ip_address=get_ip(request), url=request.path ) if redirect_url: return HttpResponse(redirect_url)
FEATURES['ENABLE_COURSEWARE_SEARCH'] = True
DATE_FORMAT = 'N j, Y'
selected.add(arg)
self.assertContains(response, 'test<br /><br />test<br /><br />test<br /><br />test') self.assertContains(response, 'test<br />link')
course = self._create_course("verified") self._enroll(course.id, "verified") response = self._get_page('verify_student_verify_now', course.id)
if contains_nan(mu): logger.info('nan found') return X
for name, value in tb_frame.f_locals.items(): if name in sensitive_variables: value = CLEANSED_SUBSTITUTE else: value = self.cleanse_special_types(request, value) cleansed[name] = value
from salt.utils import path_join
instructor_task.api.submit_cohort_students(request, course_key, filename)
c = c.set_categories([4, 3, 2, 1])
coloring_matrix = np.random.normal(size=(n_features, n_features)) X_train = np.dot(base_X_train, coloring_matrix) X_test = np.dot(base_X_test, coloring_matrix)
if signal.getsignal(signal.SIGINT) is signal.SIG_DFL: signal.signal(signal.SIGINT, self._handle_signals)
access_flag = 1
assert_equal(sum(all_folds), 300)
translation = CurrentTranslation(ArticleTranslation, models.CASCADE, ['id'], ['article'])
test_ssh_host = host test_ssh_port = port
Q, _ = linalg.qr(safe_sparse_dot(A, Q), mode='economic') return Q
if self.op in ['==', '!=']:
from salt.modules import debconfmod import os
self.assertEqual(copy.names, original.names) self.assertIsNot(copy.names, original.names)
noise = rng.randn(*X.shape) / 100 X_reembedded = clf.transform(X + noise) assert_less(linalg.norm(X_reembedded - clf.embedding_), tol)
tests = [ (EmptyCharLabelNoneChoiceForm, 'choice_string_w_none', None), (EmptyIntegerLabelChoiceForm, 'choice_integer', None), (EmptyCharLabelChoiceForm, 'choice', ''), ]
state('A').cmd.run('echo this is state A', cwd='/')
cmd = list2cmdline(['wmic', 'os', 'get', 'lastbootuptime']) outs = __salt__['cmd.run'](cmd)
response.data["current_page"] = self.page.number
self.assertQuerysetEqual( Article.objects.filter(reporter_id__exact=self.r.id), ["<Article: John's second test>", "<Article: This is a test>"] )
log = logging.getLogger(__name__)
raise SkipTest
compile(text, '<string>', 'exec') return False
if 'encrypted' in kwargs and 'snapshot' not in kwargs: params['Encrypted'] = kwargs['encrypted']
self.assertEqual(second_request["parameters"]["user_full_name"], "Bobby")
self.client.login(username=self.global_staff.username, password="test")
has_children = False
with self.assertRaises(forms.ValidationError): f.clean('13:30:05 21.12.2010')
names = [prefix + str(i) for i in range(nlevels)]
self.assertTrue(CourseEnrollment.is_enrolled(self.global_staff, self.course.id))
lookup_name = 'testyear' call_order = []
io_loop = ioloop.IOLoop() io_loop.make_current()
if email_opt_in is not None: opt_in = email_opt_in == 'true' mock_update_email_opt_in.assert_called_once_with(self.user, self.course.org, opt_in) else: self.assertFalse(mock_update_email_opt_in.called)
out, err = DETAILS['server'].sendline(cmd)
self.wait_for_ajax()
assert_raises(ValueError, check_is_fitted, ARDRegression, "coef_") assert_raises(TypeError, check_is_fitted, "SVR", "support_")
from __future__ import unicode_literals
from __future__ import unicode_literals
def test_invalid_sample_without_replacement_algorithm(): assert_raises(ValueError, sample_without_replacement, 5, 4, "unknown")
continue
from __future__ import unicode_literals
link = link[3:]
_optname = _optname.replace('-', '_') iface_data[addrfam][_optname] = value
scalers = [StandardScaler(with_mean=False, with_std=False), MinMaxScaler(), MaxAbsScaler()]
params = self._signed_callback_params(self.order.id, self.COST, self.COST, decision='REJECT') result = process_postpay_callback(params)
exc_info_on_loglevel=logging.DEBUG
class Layer(GDALBase): "A class that wraps an OGR Layer, needs to be instantiated from a DataSource object."
s = Series([1]) result = s.item() self.assertEqual(result, 1) self.assertEqual(s.item(), s.iloc[0])
self.child_fd = self.stdin
inject_globals['__env__'] = str(low['__env__'])
_ = lambda text: text
y_true[np.where(y_true == 0)] = -1 y_true_copy = y_true.copy() _test_precision_recall_curve(y_true, probas_pred) assert_array_equal(y_true_copy, y_true)
import re
config = settings.CC_PROCESSOR.get( settings.CC_PROCESSOR_NAME, {} )
result = CategoricalIndex(categories=categories).insert(0, 'a') expected = CategoricalIndex(['a'], categories=categories) tm.assert_index_equal(result, expected, exact=True)
chunks = self.state.compile_high_data(high)
new_conf.append(line)
ret['result'] = True return ret
from __future__ import absolute_import
tmplstr = tmplstr.decode(SLS_ENCODING)
if not isinstance(value, six.text_type): if not isinstance(value, (set, list, dict)): value = str(value) values[key] = value
import logging
if not self.is_in_table: return None
break
for child in old_block_relations[block_key].children: if child in pruned_block_relations: self._add_to_relations(pruned_block_relations, block_key, child)
PAYLOAD_EXTRA_FIELDS = 'payload_extra_fields'
from __future__ import unicode_literals
out = self._str_indent(out,indent) return '\n'.join(out)
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
if user is not None and user.is_authenticated(): if CourseEnrollmentAllowed.objects.filter(email=user.email, course_id=course_key): return ACCESS_GRANTED
{0: 'animal', 1: 'human', 2: 'airplane', 3: 'truck', 4: 'car', 5: 'blank'},
from salt.states import aws_sqs
self.assertEqual( StudentModule.objects.filter( student=self.module_to_reset.student, course_id=self.course.id, module_state_key=self.module_to_reset.module_state_key, ).count(), 1 )
admin.site.register(User, UserAdmin)
from __future__ import absolute_import
(['honor', 'verified', 'audit'], 'honor'),
p = Place.objects.get(name="Joe's Chickens") with self.assertRaises(Restaurant.DoesNotExist): p.restaurant
'openedx.core.djangoapps.self_paced',
def apply_next_model(model): next_function = partial(apply_next_model.func, model) self.lazy_model_operation(next_function, *more_models) apply_next_model.func = function
for param in ('path', 'image', 'vgname', 'template'): kwargs.pop(param, None)
pass
ret['comment'] = _format_comments(actions) return ret
this_yaml = test_yaml_which_set % {'which_set': ['train', 'test']} trainer = yaml_parse.load(this_yaml) trainer.main_loop()
cat = pd.Categorical([np.nan, 1, 2, 3]) self.assertTrue(com.is_integer_dtype(cat.categories))
self.assertTrue(np.isnan(s2[0])) self.assertFalse(np.isnan(s[0]))
import salt.config import salt.loader
from random import choice characters = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)' SECRET_KEY = ''.join([choice(characters) for i in range(50)])
try: face = sp.face(gray=True) except AttributeError: from scipy import misc face = misc.face(gray=True)
from salt.states import mount import os
c = self.factor.copy() c[0] = 'b' self.assertEqual(c[0], 'b') c[-1] = 'a' self.assertEqual(c[-1], 'a')
if obj.ndim == 1: for a in arg: try: colg = self._gotitem(obj.name, ndim=1, subset=obj) results.append(colg.aggregate(a))
from __future__ import unicode_literals
data_dir = string_utils.preprocess('${PYLEARN2_DATA_PATH}') info['filename'] = os.path.join(data_dir, info['filename'])
'pillar_cache_ttl': int,
mine.__salt__ = {} mine.__opts__ = {}
average_times_exact = [] average_times_approx = [] std_times_approx = [] accuracies = [] std_accuracies = [] average_speedups = [] std_speedups = []
self.secure()
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, mock_open, NO_MOCK, NO_MOCK_REASON )
import inspect import os
ANALYTICS_DASHBOARD_URL = None
modal.policy = 'Lab' modal.save()
with self.assertRaises(LayerMapError): LayerMapping(Point3D, city_file, point_mapping, transform=False)
r = self.frame.resample('H')['A', 'B'] tm.assert_index_equal(r._selected_obj.columns, self.frame.columns[[0, 1]])
with ensure_clean_store(self.path) as store:
qs = self.get_queryset() if queryset is None else queryset
if emsg: raise e
from pandas.tseries.timedeltas import ( _coerce_scalar_to_timedelta_type as _coerce)
if transport in ('zeromq', 'tcp'): key_dirs = _check_minions_directories(pki_dir) else: key_dirs = _check_minions_directories_raetkey(pki_dir)
'winrepo_source_dir': str,
from __future__ import absolute_import, print_function import os import pwd import time import signal import optparse import subprocess import random import tempfile import shutil import sys
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self.lc_block.max_count = 1 self.lc_block.capa_type = 'multiplechoiceresponse' self.lc_block.refresh_children() self.assertTrue(self.lc_block.validate())
return func(self, other)
self.assertEqual(cached_structure, not_cached_structure)
additional_requested_fields = [ 'student_view_data', 'block_counts', 'nav_depth', 'block_types_filter', ] for additional_field in additional_requested_fields: field_value = cleaned_data.get(additional_field)
req_factory_method = getattr(self.request_factory, method.lower()) request = req_factory_method('/dummy-url') request.user = self.user
'state_events': bool,
cm = confusion_matrix(y_test, y_pred) np.set_printoptions(precision=2) print('Confusion matrix, without normalization') print(cm) plt.figure() plot_confusion_matrix(cm)
first = pd.DataFrame([[datetime(2016, 1, 1)]]) first[0] = first[0].dt.tz_localize('Europe/London')
with self.assertRaises(UnsupportedRevisionError): self.store.has_item(self.fake_location, revision=ModuleStoreEnum.RevisionOption.draft_preferred)
import salt.loader
with check_mongo_calls(4, 2):
self.assertFalse(self.cohort_management_page.is_category_selected())
reader = geoip2.database.Reader(path, mode=cache) db_type = reader.metadata().database_type
from __future__ import absolute_import import json import salt.utils.http import logging
CountryAccessRule.objects.create( rule_type=CountryAccessRule.BLACKLIST_RULE, restricted_course=self.restricted_course, country=Country.objects.get(country='US') )
for label in np.unique(labels): assert_equal(len(np.unique(folds[labels == label])), 1)
super(BaseLmsIndexTest, self).setUp()
self.assertFalse(ax1._shared_x_axes.joined(ax1, ax2)) self.assertFalse(ax2._shared_x_axes.joined(ax1, ax2))
{key_field: 'fake'}, {key_field: getattr(locator, key_field) + 'X'}, {key_field: 'X' + getattr(locator, key_field)},
derived = Series(self.ts) with tm.assert_produces_warning(FutureWarning): self.assertTrue(derived.is_time_series) self.assertTrue(derived.index.is_all_dates)
for f in files: i = _get_pkg_id_from_pkginfo(os.path.join(temp_dir, f)) if len(i): package_ids.extend(i)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, requires_salt_modules
new_index = self.index.insert(0, ('abc', 'three'))
PIPELINE_JS_COMPRESSOR = None
from salt.exceptions import SaltInvocationError from salt.utils import dictdiffer
multi_device_support = False
new_index._start = new_index._min_fitting_element(int_low) return new_index
return True
self.assertEqual(victoria_json, City.objects.geojson(bbox=True).get(name='Victoria').geojson)
CertificateGenerationConfiguration(enabled=True).save() resp = views.progress(self.request, course_id=unicode(self.course.id)) self.assertNotContains(resp, 'Request Certificate')
from salt.modules import sqlite3 import salt
from __future__ import unicode_literals
for g in grouped.grouper.groupings[0]: pass
os.chmod(path, stat.S_IWUSR) func(path)
if 'disk' in vm_: log.warning('The "disk" option is not supported for LXC hosts and was ignored')
if isinstance(x, SparseArray): x = x.get_values() x = x.ravel() if axis > 0: x = np.atleast_2d(x) return x
try: user.email_user( subject, message, theming_helpers.get_value('default_from_email', settings.DEFAULT_FROM_EMAIL) )
assert_raises(TypeError, KFold, n_folds=4, shuffle=None)
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
if not isinstance(identity, list): identity = [identity]
def f(): s[l]
import salt.config import salt.loader import salt.transport.client import salt.utils import salt.utils.minions import salt.payload
for dummy in range(6): BadgeAssertionFactory.create()
n_samples_values = np.logspace(np.log10(n_samples_min), np.log10(n_samples_max), n_steps).astype(np.int)
token = win32security.LogonUser(username, domain, password, win32con.LOGON32_LOGON_INTERACTIVE, win32con.LOGON32_PROVIDER_DEFAULT)
if new_weight == 1.: self.new_weight.set_value(.01)
(it is done to allow user to enter both /static/filename.srt and filename.srt)
print "{:>26}".format("course ID"), print ' '.join(["{:>16}".format(heading) for heading in status_headings])
self.affinity_matrix_ = 0.5 * (self.affinity_matrix_ + self.affinity_matrix_.T) return self.affinity_matrix_
sys = 'cms' if sys == 'studio' else sys return cmd("python manage.py", sys, "--settings={}".format(settings), *args)
test_deviance = np.zeros((params['n_estimators'],), dtype=np.float64)
return _render_report_form(start_date, end_date, start_letter, end_letter, report_type, date_fmt_error=True)
for X in (X_dense, X_sparse_pruned, X_sparse_unpruned):
self.assertIn('a', index)
serialized_course_team['content'] = { 'text': self.content_text() }
self.submit_question_answer('p1', {'2_1': u'Correct'}) self.submit_question_answer('p2', {'2_1': u'Correct'})
iris = load_iris()
REQUIRE_JS = "js/vendor/requirejs/require.js"
assert_greater(n_iter_reference, 2)
elif existing['code'] == 404: response = __salt__['bigip.create_node'](hostname, username, password, name, address)
stdin = kernel32.GetStdHandle(STD_INPUT_HANDLE) dupin = DuplicateHandle(srchandle=stdin, inherit=True)
sparse = self.dense1.to_sparse() sparse2 = self.dense2.to_sparse(fill_value=0)
CSRF_COOKIE_SECURE = ENV_TOKENS.get('CSRF_COOKIE_SECURE', False)
'event_return_queue': int,
raised = False try: fmt = OneHotFormatter(max_labels=-10) except ValueError: raised = True assert raised
return True
'SHOW_BUMPER_PERIODICITY': 7 * 24 * 3600,
if not snapshot: ret['error'] = 'one or more snapshots must be specified'
idx = self.create_index() expected = np.array([4, 0, 1, 5, 2, 3])
orig_name = orig_name[len(tag) + 1:-12]
return [x for x in _services if _service_is_sysv(x)]
vars().update(ENV_TOKENS)
return self.default
self.assert_field_type(load_video_event, 'time', datetime.datetime) del load_video_event['time']
if hasattr(content, 'temporary_file_path'): file_move_safe(content.temporary_file_path(), full_path)
ASSET_XML_TAG = 'asset'
result = f.clean('13:30') self.assertEqual(result, time(13, 30, 0))
self.asset_name = 'delete_test' self.asset = self.get_sample_asset(self.asset_name)
age = 5*24*60*60
except(KeyError, ValueError): raise ValueError( u"Invalid submission: {val} for {key}".format(val=data[key], key=key) )
from pylearn2.costs.mlp import L1WeightDecay as _L1WD from pylearn2.costs.mlp import WeightDecay as _WD
import msgpack
self.initiate_rerun()
uninstall_python(python, runas=runas) return False
children_unstructured = out_unstructured[0] children_structured = out_structured[0]
self.mean_square_grads[param.name] = mean_square_grad
self.assertIn( settings.MICROSITE_CONFIGURATION['test_microsite']["urls"]['PRIVACY'], data['company_privacy_url'] )
if value_is_extension_type:
IS_WIN = win_autoruns.__virtual__()
with self.assertRaises(InvalidDecimal): lm = LayerMapping(Interstate, inter_shp, inter_mapping) lm.save(silent=True, strict=True) Interstate.objects.all().delete()
BlockDepthTransformer.collect(block_structure) BlockNavigationTransformer.collect(block_structure) block_structure._collect_requested_xblock_fields()
req_basepath = (self.venv_dir)
if refresh: refresh_db()
u'{user}@example.com'.format( user=(u'e' * (EMAIL_MAX_LENGTH - 11)) )
component_css = 'button[data-category=html]' if boilerplate: component_css += '[data-boilerplate={}]'.format(boilerplate) else: component_css += ':not([data-boilerplate])'
try: ch, escaped = next(input_iter) except StopIteration: ch = None if ch == '?': ch = None return int(values[0]), ch
values = _ensure_index(getattr(obj, field).values) filt = _ensure_index(filt)
from __future__ import absolute_import
result = __salt__['cmd.retcode']('tuned-adm off') if int(result) != 0: return False return True
multi_db = True
from __future__ import absolute_import import re import os import logging
sql, params = field.get_placeholder(val, self, self.connection), [val]
if axis is not None: self._get_axis_number(axis)
cache[cache.keys()[0]] = (None, {'a': 17})
try: from twilio.rest import TwilioRestClient HAS_TWILIO = True except ImportError: HAS_TWILIO = False
from salt.exceptions import CommandExecutionError
item_id_show = item_id if item in ['constraint'] or '=' in item_id: item_id_show = None
plot_batch_errors(all_errors, n_components, batch_sizes, data)
root = etree.Element("problem")
X = check_array(X, accept_sparse=['csc'], ensure_2d=False) if issparse(X): X.sort_indices()
wiki_courses = self.store.get_courses_for_wiki('999') self.assertEqual(len(wiki_courses), 0)
return wrap_message(result)
#html_additional_pages = {}
return getattr(settings, format_type)
import logging
if any(new_locator.block_id == child.block_id for child in new_parent.children): continue new_parent_cursor = 0 for old_child_loc in old_parent.children: if old_child_loc.block_id == draft_location.block_id:
rename_dict = dict(zip(self.ts.index, renamed.index)) renamed2 = self.ts.rename(rename_dict) assert_series_equal(renamed, renamed2)
serialized = configparser.serialize(data).strip() assert serialized == "[foo]\nbar = baz", serialized
if isinstance(key, tuple) and isinstance(ax, MultiIndex): return True
self._enroll(course.id, "verified")
self.assertTrue(payment_accepted(params)['accepted'])
from __future__ import absolute_import import time import logging import re import sys import shlex
with tm.assert_produces_warning(FutureWarning): pd.TimeSeries(1, index=date_range('20130101', periods=3))
import salt.ext.six as six
self.assertRaises(NotImplementedError, store.select, 'df', "columns=['A'] | columns=['B']")
model = linear_model.LinearRegression() model.fit(X, y)
arg_spec_for_format = arg_spec[:7 if PY3_OR_LATER else 4]
import salt.ext.six as six from salt.exceptions import SaltClientError
location = self.old_course_key.make_usage_key('discussion', block_id='Discussion1') self.draft_mongo.delete_item(location, self.user_id)
from __future__ import unicode_literals
repo_name: my_repo
with self.assertNumQueries(0): all_deadlines = VerificationDeadline.deadlines_for_courses(course_keys) self.assertEqual(all_deadlines, deadlines)
'enrollment',
results = self.func(self.start, self.stop, where) self.close() return results
self.assertTrue(module_has_submodule(egg_module, 'good_module')) mod = import_module('egg_module.good_module') self.assertEqual(mod.content, 'Good Module')
self.assertContains(self.client.delete(course_update_url + '19'), "delete", status_code=400)
if first_octet == 169 and second_octet == 254: return False
can_distinct_on_fields = False
if IdentityPoolName is not None and IdentityPoolName != request_params.get('IdentityPoolName'): request_params['IdentityPoolName'] = IdentityPoolName
def _str_header(self, name, symbol='`'): return ['.. rubric:: ' + name, '']
log.trace('{0} already removed, skipping'.format(mod_key)) continue
log.error('Wrong VM type. Valid options are: qemu, openvz (proxmox3) or lxc (proxmox4)') raise SaltCloudExecutionFailure
kwargs['w'] = 1
from __future__ import absolute_import
indexer = labels._convert_list_indexer(keyarr, kind=self.name) if indexer is not None: return self.obj.take(indexer, axis=axis)
pythoncom.CoInitialize()
begin = Timestamp('2011/1/1', tz='US/Eastern') end = Timestamp('2014/1/1', tz='US/Eastern')
combined = ":".join([key_prefix, version, key])
invalid_formset = self.make_choiceformset([('Calexico', '')]) self.assertFalse(invalid_formset.is_valid()) self.assertTrue(invalid_formset.has_changed())
import salt.ext.six as six
self.new_connection.rollback() self.new_connection.set_autocommit(True)
yield check_parameters_default_constructible, name, Estimator
else: def _spawn(self): self.pid, self.child_fd, self.child_fde = self.__fork_ptys()
for key, val in six.iteritems(string_kwarg): invalid_kwargs.append('{0}={1}'.format(key, val))
called = False
rng = check_random_state(0) n_features = 5 n_samples = 40 n_output = 4
group_auth_match = False for group_config in group_perm_keys: group_config = group_config.rstrip('%') for group in groups: if group == group_config: group_auth_match = True
def boolean_check(v): return not (v is False or v is None or v == '')
results = { 'nickname': user.username, 'email': user.email, 'fullname': user.profile.name, }
if any(app == migration.app_label for app, name in migration.dependencies): return False, project_state
p_empty = Panel(items=list('ABC')) store.append('p', p_empty) self.assertRaises(KeyError, store.select, 'p')
time.sleep(0.01) continue
other_parent_loc = course_key.make_usage_key('vertical', 'zeta') other_parent = store.get_item(other_parent_loc) self.assertIn(shared_item_loc, other_parent.children)
from __future__ import unicode_literals
self.assertEqual(course.edited_by, "testassist@edx.org") self.assertDictEqual(course.grade_cutoffs, {"Pass": 0.55})
from salt.states import htpasswd
script_name = get_script_name({'SCRIPT_URL': '/foobar/'}) self.assertEqual(script_name, '/foobar/')
idx = Index([]) result = idx.isin(values) self.assertEqual(len(result), 0) self.assertEqual(result.dtype, np.bool_)
self.assertFalse(self.course.visible_to_staff_only) orig_block_structure = get_course_blocks(self.user, self.course_usage_key) self.assertFalse( VisibilityTransformer.get_visible_to_staff_only(orig_block_structure, self.course_usage_key) )
return self._possibly_eval(res, eval_in_python + maybe_eval_in_python)
django_settings.SOCIAL_AUTH_PROTECTED_USER_FIELDS = ['email']
for _ in range(2): self.assertIsInstance(CourseOverview.get_from_id(course.id), CourseOverview)
self.num = num
estimator_error = np.mean( np.average(incorrect, weights=sample_weight, axis=0))
ax = df.plot.barh(width=width) for r in ax.patches: self.assertEqual(r.get_height(), width / len(df.columns))
self.validate_xblock_info_consistency(xblock_info, has_child_info=has_child_info, course_outline=course_outline)
train = SVHN('splitted_train', path=local_path) check_dtype(train)
for browser_lang in lang_headers: if browser_lang in system_released_languages: if request.session.get(LANGUAGE_SESSION_KEY, None) is None: request.session[LANGUAGE_SESSION_KEY] = unicode(browser_lang) break
return self.default_answer_map
import salt.client
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor', grade=default_grade )
if not isinstance(key, compat.string_types): return key
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
unit_update_url = reverse_usage_url('xblock_handler', unit_usage_key) self.assertFalse(self._is_location_published(unit_usage_key)) self.assertFalse(self._is_location_published(html_usage_key))
result = process_postpay_callback(params) self.assertTrue(result['success']) self.assert_dump_recorded(result['order'])
import integration import salt.utils from salt.exceptions import CommandExecutionError
if val == val and val != %(nan_val)s: nobs[lab, j] += 1 resx[lab, j] = val
clf_sparse = SVC(kernel="linear") rfe_sparse = RFE(estimator=clf_sparse, n_features_to_select=4, step=0.1) rfe_sparse.fit(X_sparse, y) X_r_sparse = rfe_sparse.transform(X_sparse)
sample = v[:min(3, len(v))] inferred_type = lib.infer_dtype(sample)
self.assertEqual(1, len(ds))
X_test = np.arange(0.0, 5.0, 0.01)[:, np.newaxis] y_1 = regr_1.predict(X_test) y_2 = regr_2.predict(X_test)
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
ddm = get_rnd_design_matrix() folds = ddm.split_dataset_nfolds(10) assert folds[0].shape[0] == np.ceil(ddm.get_num_examples() / 10)
)
django_settings.SOCIAL_AUTH_LOGIN_ERROR_URL = '/'
spot_prefix = 'LaunchSpecification.'
@Appender('DEPRECATED: ' + _data_method_doc) def data(self, **kwargs):
DATE_INPUT_FORMATS = [
except Exception: return __salt__['cmd.run']( '{0} vcpu-pin {1} {2} {3}'.format(_get_xtool(), vm_, vcpu, cpus), python_shell=False)
return ( self.q(css='{} .acid-block'.format(self.context_selector)).present and wait_for_xblock_initialization(self, self.context_selector) and self._ajax_finished() )
return -2
self.assert_grade(problem, '2*x', 'correct') self.assert_grade(problem, '3*x', 'incorrect')
if 'enabled' in kwargs: return _enabled_used_error(ret)
dns_reply = list() try: dns_reply = dns.resolver.query(peer) except dns.resolver.NoAnswer: continue for dns_ip in dns_reply: ip_only_peers.append(str(dns_ip))
logging.getLogger(__name__).info( 'Loading Saltfile from \'{0}\''.format(self.options.saltfile) )
self._check_align(empty, right, axis=ax, fill_axis=fax, how=kind, method=meth) self._check_align(empty, right, axis=ax, fill_axis=fax, how=kind, method=meth, limit=1)
can_introspect_max_length = True
urlpatterns = ( '',
formset = media_inline.get_formset(request) self.assertEqual(formset.max_num, DEFAULT_MAX_NUM) self.assertEqual(formset.can_order, False)
if error: ret['changes'] = {} ret['result'] = False ret['comment'] = str(error)
import salt.utils.systemd
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'azure', vm_['profile'], vm_=vm_) is False: return False
self.selenium.find_element_by_id('id_birthdate_0').send_keys('2013-06-01')
list_maintenance_windows = salt.utils.alias_function(list_windows, 'list_maintenance_windows')
with self.modify_settings(INSTALLED_APPS={'append': 'i18n.resolution'}): activate('de')
course = self.store.get_course(self.store.make_course_key( 'test_org', 'import_draft_order', 'import_draft_order' )) self.assertIsNotNone(course)
os.environ['NO_PREREQ_INSTALL'] = 'true'
del self.lc_block._xmodule._selected_set
if 'numeric_only' in signature(f).args: self.assertRaisesRegexp(NotImplementedError, name, f, numeric_only=True)
if 'remove_{0}'.format(collection) not in vmconfig['changed']: vmconfig['changed']['remove_{0}'.format(collection)] = []
model.set_params(warm_start=True) model.fit(X, y) n_iter_warm_start = model.n_iter_ assert_equal(n_iter_warm_start, 1)
grouped = df.groupby(grouper, group_keys=False) f = lambda df: df['close'] / df['open']
jid_dir_name = jid_dir.rpartition('/')[2]
salt '*' vsphere.get_host_datetime my.esxi.host root bad-password
self.assertEqual(len(self.lc_block.get_child_descriptors()), 1) self.assertEqual(len(self.lc_block.get_content_titles()), 1)
A = rng.random_sample([2, 2]) for dtype in ['f8', 'f4']: A = A.astype(dtype) B = B.astype(dtype)
self.signal_handler.send("course_published", course_key=course_id.for_branch(None)) bulk_ops_record.has_publish_item = False
klass = DataCol name = None
p = subprocess.Popen([c] + args, cwd=cwd, stdout=subprocess.PIPE, stderr=(subprocess.PIPE if hide_stderr else None)) break
rng4 = date_range('7/1/2000', '7/31/2000', freq='D', tz=tz, name='idx') expected4 = DatetimeIndex([], tz=tz, name='idx')
if start[1] != indent[depth]: yield (start, "E124 closing bracket does not match " "visual indentation")
ExampleCertificateSet.objects.all().delete()
if settings.FEATURES.get('USE_CUSTOM_THEME') and message_key in messages.CUSTOM_THEME_OVERRIDES: message_dict = messages.CUSTOM_THEME_OVERRIDES
return adj.justify([x], *args, **kwargs)[0]
mock_email_change.side_effect = [ValueError, "mock value error thrown"] self.client.login(username=self.user.username, password=self.test_password) old_email = self.user.email
from salt.modules import match
salt '*' win_wua.list_update KB3030298
lmask = llab == -1 lany = lmask.any() rmask = rlab == -1 rany = rmask.any()
_check_align(self.ts[:0], self.ts[:0], how=kind) _check_align(self.ts[:0], self.ts[:0], how=kind, fill=-1)
orig_tz = os.environ.get('TZ')
import salt.client.netapi import salt.utils.parsers as parsers from salt.utils.verify import check_user, verify_files, verify_log
#modindex_common_prefix = []
result = self.frame.reindex() assert_frame_equal(result, self.frame) self.assertFalse(result is self.frame)
self._fixture_teardown() call_command.assert_called_with( 'flush', interactive=False, allow_cascade=False, reset_sequences=False, inhibit_post_migrate=True, database='default', verbosity=0, )
view, args, kwargs = resolve(url) response = view(request, *args, **kwargs)
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
self.normalize = bool(self.normalize)
FEATURES['ENABLE_DASHBOARD_SEARCH'] = True
response.set('id', response_id_str) response_id += 1
import salt.utils from salt.roster import get_roster_file
__remove_temp_logging_handler()
assert_false(hasattr(SequenceDescriptor, 'attempts'))
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
self._check_linkedin_visibility(False)
geohash = False geojson = False gml = False kml = False svg = False
import salt.ext.six as six from jinja2 import BaseLoader, Markup, TemplateNotFound, nodes from jinja2.environment import TemplateModule from jinja2.ext import Extension from jinja2.exceptions import TemplateRuntimeError import jinja2 import yaml
self.assertTrue(check_password('letmein', encoded, setter)) self.assertTrue(state['upgraded'])
publishers = Publisher.objects.filter(id__in=[1, 2]) self.assertEqual( sorted(p.name for p in publishers), [ "Apress", "Sams" ] )
res = self.client.get('/dates/books/2000/jan/') self.assertEqual(res.status_code, 404)
time.sleep(10)
time.sleep((2 ** (RoleRetries - retry)) + (random.randint(0, 1000) / 1000)) continue
__virtualname__ = 'service'
sql.to_sql(self.test_frame1, 'test_frame', self.conn)
if LooseVersion(tables.__version__) < '3.0.0': raise ImportError("PyTables version >= 3.0.0 is required")
names = [] ldesc_indexes = sorted([x.index for x in ldesc], key=len) for idxnames in ldesc_indexes: for name in idxnames: if name not in names: names.append(name)
else: response = self.client.get(reverse(url_name), params)
X_dense[3, :] = 0.0
import salt.config import salt.loader
f = client.stream.write(payload) self.io_loop.add_future(f, lambda f: True)
import sys import logging
self.data_location = self.path_or_buf.tell()
assert_array_equal(mb_k_means.predict(X_csr), mb_k_means.labels_)
for model_state in self.apps.real_models: if (model_state.app_label, model_state.name_lower) in related_models: states_to_be_rendered.append(model_state)
for label in np.unique(labels): assert_equal(len(np.unique(folds[labels == label])), 1)
def ordered_dict_presenter(dumper, data): return dumper.represent_dict(data.items())
from .celery import APP as CELERY_APP
cmp_mode = 'equal'
purchased_callback.assert_called_with()
def f(): cat.reorder_categories(["a", "b", "d"])
self.assertFalse([ requirement for requirement in requirements if requirement['namespace'] == 'proctored_exam' ])
params = {'amount': donation_amount} if course_id is not None: params['course_id'] = course_id
ax.plot_surface(X, Y, Z.T, cstride=1, rstride=1, color=c, alpha=0.8)
return swapped_for
gated_content = gating_api.get_gated_content(course, student)
self.user = User.objects.get(pk=self.user.pk)
if get_parents and current_node != start_node: parents = get_parents(current_node)
index = RangeIndex(1, 5, 2) result = RangeIndex(index, copy=False) self.assertTrue(result.identical(index))
call_command( 'migrate', verbosity=max(verbosity - 1, 0), interactive=False, database=self.connection.alias, run_syncdb=True, )
return self._generate_cert(cert, course, student, grade_contents, template_pdf, generate_pdf)
import os
return self._engine_type(lambda: self.codes.astype('i8'), len(self))
ica = FastICA(n_components=1, whiten=False, random_state=0) assert_warns(UserWarning, ica.fit, m) assert_true(hasattr(ica, 'mixing_'))
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
self.assertTrue(CourseEnrollment.is_enrolled(self.user, destination_course_key))
self.assertEquals(len(audit_log_calls), 0)
(32768, 'Q'),
with check_mongo_calls(1): cached_structure = self._get_structure(self.new_course)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
DATE_INPUT_FORMATS = [
config = Config() config.InteractiveShell.autocall = False config.InteractiveShell.autoindent = False config.InteractiveShell.colors = 'NoColor'
log = logging.getLogger(__name__)
obj, filename = self._write_array(obj, filename) self._filenames.append(filename) self._npy_counter += 1
tsframe = self.tsframe.copy().astype(np.float32) tsframe['A'][:5] = nan tsframe['A'][-5:] = nan
return HttpResponse(content="")
rng = np.random.RandomState(42) S = rng.standard_t(1.5, size=(20000, 2)) S[:, 0] *= 2.
self.verify_content_existence(self.store, root_dir, course_id, 'tabs', 'static_tab', '.html')
if self.spheroid:
task_folder = task_service.GetFolder(location) task_folder.CreateFolder(name)
from salttesting.helpers import ensure_in_syspath
if wua_download_list.Count == 0: log.debug('No updates to download') else: log.debug('Downloading...') wua_downloader.Updates = wua_download_list
course = CourseFactory.create( org=org, number=course_number, run=course_run, display_name=display_name, default_store=ModuleStoreEnum.Type.split )
from __future__ import absolute_import import copy import fnmatch import itertools import logging import os import re import string
minibatch_iterators = iter_minibatches(data_stream, minibatch_size) total_vect_time = 0.0
n, p = 10, 5 rng = np.random.RandomState(0)
user.backend = backend_path return user
([[400, 150, 400, 1], [400, 450, 600, 2], [300, 225, 300, 3]],
if is_platform_windows(): if '16' in encoding or '32' in encoding: continue raise
if not isinstance(geom, GEOSGeometry) or geom.srid != 4326: raise TypeError('get_zoom() expects a GEOS Geometry with an SRID of 4326.')
self.course_fixture = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
mcc = assert_warns_message(RuntimeWarning, 'invalid value encountered', matthews_corrcoef, y_true, rng.randint(-100, 100) * np.ones(20, dtype=int))
macro_measure = metric(y_true, y_pred, average="macro") assert_almost_equal(macro_measure, np.mean(label_measure))
cp = df.copy() cp.ix[4:10] = 0 self.assertTrue((cp.ix[4:10] == 0).values.all())
self._prefixlen = self._prefix_from_prefix_string(addr[1])
if pt is None: if value is None:
raise KeyError
delta = self._tilesize / 2
self.geography = geography
import salt.ext.six as six
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
task_folder = task_service.GetFolder(location)
raxes = [self._extract_axis(self, data, axis=i) if a is None else a for i, a in enumerate(axes)] raxes_sm = self._extract_axes_for_slice(self, raxes)
return X.take(indices, axis=0)
from salt.states import event
log = logging.getLogger(__name__)
root_dir = path(mkdtemp_clean()) export_course_to_xml(self.store, content_store, course_id, root_dir, 'test_roundtrip')
return self._intercept
DEPRECATION_VSCOMPAT_EVENT = 'deprecation.vscompat'
from urllib.request import Request, build_opener
self.assertRaises(ValueError, self.frame.align, af.ix[0, :3], join='inner', axis=2)
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
log_stdin=None, log_stdin_level='debug', log_stdout=None, log_stdout_level='debug', log_stderr=None, log_stderr_level='debug',
assert_raises(NotImplementedError, f, roll)
expected = Timestamp('3/11/2012 05:00', tz=self.tz('US/Eastern'))
import salt.utils from salt.modules import pkg_resource import salt.ext.six as six
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
r = StreamingHttpResponse(iter(['hello', 'world'])) self.assertEqual( six.binary_type(r), b'Content-Type: text/html; charset=utf-8')
if settings.get('select_field'): select_field = settings['select_field'] if connection.ops.oracle: select_field.empty_strings_allowed = False else: select_field = Field()
rs2 = ser.replace([np.nan, 'foo', 'bar'], [-1, -2, -3]) tm.assert_series_equal(rs, rs2)
if len(set(ret).intersection(minions)) >= len(minions): return ret
self.outline.a11y_audit.config.set_scope( include=["div.video"] ) self.outline.a11y_audit.check_for_accessibility_errors()
if test: return 'Test succeeded.'
X_filtered = np.vstack((X[y == 0][:500], X[y == 1][:100], X[y == 2][:10])) y_pred = KMeans(n_clusters=3, random_state=random_state).fit_predict(X_filtered)
n_samples_per_center = 100 grid_size = 3 scale = 0.1 n_clusters = grid_size ** 2
if not cls.is_restricted_course(course_key): return default_path
test_data = state_run['cmd_|-test_failing_state_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
curl -sSik https://localhost:8000 \\ -d client=local \\ -d tgt='*' \\ -d fun='cmd.run' \\ -d arg='du -sh .' \\ -d arg='/path/to/dir'
if not self._check_enabled_suites(include_cloud_provider=True) and not self.options.name: return status
render_pipe = template_shebang(template, renderers, default, blacklist, whitelist, input_data)
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) course_key = course.id
inp = {} inp['default'] = 'default' inp['hostname'] = minion_id
data = np.empty(nd_state[1], dtype=nd_state[2]) np.ndarray.__setstate__(data, nd_state)
from __future__ import absolute_import
ttype = 'zeromq'
q = Author.objects.none() self.assertQuerysetEqual(q.values(), []) self.assertQuerysetEqual(q.values_list(), [])
del expected_event['event']['currentTime']
if new['code'] == 200:
from pandas import *
if isinstance(precompute, six.string_types) and precompute == 'auto': precompute = (n_samples > n_features)
hashed_url = self.url(unquote(target_name), force=True)
self.assertEqual( self.run_function('shadow.get_login_failed_last', [NO_USER]), 'ERROR: User not found: {0}'.format(NO_USER))
_logger.info('loading file %s' % datasets['test_batch']) data = serial.load(datasets['test_batch'])
homework_1_score = 1.0 / 2 homework_2_score = (1.0 + 2.0) / 4 self.check_grade_percent(round((homework_1_score + homework_2_score) / 2, 2))
artifact_metadata_url = '{artifactory_url}/{repository}/{group_url}/{artifact_id}/maven-metadata.xml'.format( artifactory_url=artifactory_url, repository=repository, group_url=group_url, artifact_id=artifact_id) log.debug('artifact_metadata_url=%s', artifact_metadata_url) return artifact_metadata_url
features = map(lambda l: l[:-1], content) targets = map(lambda l: l[-1], content) del content
self.io_loop.spawn_callback(self.io_loop.stop)
self.assertRedirects(response, '/permanent_redirect_view/', target_status_code=301)
db=None, collection=None, host=None, port=None, tz_aware=True, user=None, password=None, ** kwargs
raise ValueError
CourseRerunState.objects.succeeded(course_key=self.course_key) self.expected_rerun_state.update({ 'state': CourseRerunUIStateManager.State.SUCCEEDED, }) rerun = self.verify_rerun_state()
CourseEnrollmentFactory(user=self.student, course_id=self.course.id)
THIRD_PARTY_AUTH_BACKENDS = ["google-oauth2", "facebook"] THIRD_PARTY_AUTH_PROVIDERS = ["Google", "Facebook"]
self.assertNotEqual(initial_data["PhotoIDKey"], two_photo_reverification_data["PhotoIDKey"])
if self.has_spatial_indexes: self.assertSpatialIndexExists('gis_neighborhood', 'path')
vectors = vectors / np.sqrt((vectors ** 2).sum(axis=1))[:, np.newaxis]
if last_expression is not None: results.violations.append(ExpressionRuleViolation( rule, last_expression ))
_ = lambda text: text
assert_panel4d_equal(panel4d.ix[labels, items, dates, cols], panel4d.reindex(labels=labels, items=items, major=dates, minor=cols))
master_config_path = _absolute_path(master_config_path, config_dir)
return 'some html content'
if settings.FEATURES['CLASS_DASHBOARD'] and access['staff']: sections.append(_section_metrics(course, access))
url( r'^courses/{}/edxnotes'.format( settings.COURSE_ID_PATTERN, ), include('edxnotes.urls'), name='edxnotes_endpoints', ),
unfit_val_items = unfit_val_locs[0].append(unfit_val_locs[1:])
data = 'a,b,c\n4,5,6\n"' self.assertRaises(Exception, self.read_csv, StringIO(data), escapechar='\\')
if settings.ROOT_URLCONF == 'lms.urls': url_pattern = '/info' else: url_pattern = '/course/{}'.format(unicode(course_key))
est = TreeEstimator() assert_raises(NotFittedError, est.apply, T)
#show_authors = False
self.assertEqual(private_school.director, private_director)
with self.assertRaises(Http404): get_object_or_404(a1.article_set, title__contains="Camelot")
for attempt in xrange(self.INVALID_ATTEMPTS): self._change_password(email=self.NEW_EMAIL)
VS_batch = VS.make_theano_batch() new_CS_batch = VS.format_as(VS_batch, CS) new_VS_batch = VS.undo_format_as(new_CS_batch, CS) assert new_VS_batch is VS_batch
ip_int ^= self._ALL_ONES try: return self._prefix_from_ip_int(ip_int) except ValueError: self._report_invalid_netmask(ip_str)
if not is_list_like_indexer(key): key = tuple([key]) else: raise ValueError('Invalid call for scalar access (getting)!')
assert_frame_equal(df.add(row, axis=None), df + row)
if s is None: ret = salt.utils.shlex_split('') else: ret = salt.utils.shlex_split(s)
all_proba = Parallel(n_jobs=n_jobs, verbose=self.verbose, backend="threading")( delayed(parallel_helper)(e, 'predict_proba', X, check_input=False) for e in self.estimators_)
for draft in to_process_drafts: draft_loc = Location._from_deprecated_son(draft["_id"], course_key.run) draft_as_non_draft_loc = as_published(draft_loc)
image_id = inspect_image(name)['Id']
credit_state = self.service.get_credit_state(self.user.id, self.course.id) self.assertEqual(credit_state['credit_requirement_status'][0]['status'], "satisfied")
lsfh = LSHForest(min_hash_match=0, n_candidates=n_points).fit(X)
api.set_credit_requirements(self.course_key, requirements[1:])
if already_exists: return _valid(comment='Container {0!r} already exists'.format(name)) dports, denvironment = {}, {}
pass
from __future__ import unicode_literals
if len(missing): cats = self.categories.get_indexer(target)
return ensure_csrf_cookie(func)(*args, **kwargs)
from __future__ import absolute_import import os import logging
log_likelihood_gradient_dims = \ 0.5 * np.einsum("ijl,ijk->kl", tmp, K_gradient) log_likelihood_gradient = log_likelihood_gradient_dims.sum(-1)
import salt.ext.six as six
estimator_error = np.mean( np.average(incorrect, weights=sample_weight, axis=0))
for _ in range(2): get_user_credentials(staff_user)
dive = Book.objects.using('other').get(title="Dive into Python")
__pillar__.update(kwargs.get('pillar', {}))
fields = (f for f in fields if f != '?')
if var.endswith('.'): raise ValueError
dict_delitem(self, key) link_prev, link_next, key = self.__map.pop(key) link_prev[1] = link_next link_next[0] = link_prev
frame = self.frame.copy() expected = self.frame.copy()
_pshell(cmd)
'limits': { 'CPU': 1, },
self.submit_question_answer('p2', {'2_1': u'Incorrect'})
web.get_data_yahoo('GOOG')
if hasattr(arr, '__iter__') and not \ isinstance(arr, string_and_binary_types): arr = [tz_replacer(s) for s in arr] else: arr = tz_replacer(arr)
resp = self.client.get_html('/home/') self.assertEqual(resp.status_code, 302)
children = np.array(children)[:, ::-1]
if isinstance(data, collections.Mapping): data_dict.update(data)
handler.release() return instance
for field in model._meta.local_many_to_many: if field.remote_field.through._meta.auto_created: self.delete_model(field.remote_field.through)
#epub_guide = ()
if not record.exc_text: record.exc_text = self.formatException(record.exc_info)
GeneratedCertificateFactory.create( user=self.user, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor' )
comb = self.frame.combine_first(self.empty) assert_frame_equal(comb, self.frame)
import salt.config as config from salt.exceptions import SaltCloudSystemExit import salt.utils.cloud
dive.delete(using='other')
clf = self.factory(loss="log", alpha=0.01, n_iter=10).fit(X2, Y2)
self.instructor_dashboard_page = InstructorDashboardPage(self.browser, self.course_id) self.instructor_dashboard_page.visit() self.cohort_management_page = self.instructor_dashboard_page.select_cohort_management()
ret = pem_header+'\n' for i in range(0, len(pem_body), 64): ret += pem_body[i:i+64]+'\n' ret += pem_footer+'\n'
self.assertInHTML('<option value="0">empty_label</option>', w.render('mydate', ''), count=3)
result = s.interpolate() assert_series_equal(result, s)
graph_matrix = self._build_graph()
service = super(DescriptorSystem, self).service(block=block, service_name=service_name) if callable(service): return service(block) return service
self.clear._send_pub = lambda payload: True
languages_data_folder = sys.argv[1] dataset = load_files(languages_data_folder)
import gzip
raise ItemNotFoundError(usage_key)
HAS_LIBS = False try: import dns.query import dns.update import dns.tsigkeyring HAS_LIBS = True except ImportError: HAS_LIBS = False
excluded_books = annotated_books.exclude(publisher__name="__UNLIKELY_VALUE__")
dupe_counters[title] += 1 title = u"{title} ({counter})".format(title=title, counter=dupe_counters[title])
_verify_page_names('First', 'Empty')
cache_page(60 * 15), cache_control(private=True), never_cache,
for tab_type in CourseTabPluginManager.get_tab_types(): if not tab_type.is_dynamic and tab_type.is_default: tab_enabled = tab_type.is_enabled(course_module, user=request.user) update_tab(course_tabs, tab_type, tab_enabled)
from salt.modules import mac_pkgutil
start=datetime.datetime(2012, 2, 3, tzinfo=UTC)
self.assertAlmostEqual(self.ts.cov(self.ts), self.ts.std() ** 2)
sliced = self.frame.ix[-2:, :] expected = self.frame.reindex(index=self.frame.index[-2:]) tm.assert_sp_frame_equal(sliced, expected)
import salt.utils.cloud import salt.config as config
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
CreditRequirementStatus.remove_requirement_status( username, req_to_remove )
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
new_block = self.store.get_item(new_block.location)
render_args, _ = module.system.render_template.call_args self.assertEqual(len(render_args), 2)
response = copy(obj_a)
axes = df.hist(column='height', ax=axes)
def default(self, obj): if isinstance(obj, datetime): return get_default_time_display(obj) return json.JSONEncoder.default(self, obj)
gp = GaussianProcessRegressor(kernel=kernel, alpha=(dy / y) ** 2, n_restarts_optimizer=10)
srid = kwargs.get('srid')
from mako.lookup import TemplateLookup lookup = TemplateLookup(directories=[os.path.dirname(tmplpath)])
wmi = types.ModuleType('wmi') sys.modules['wmi'] = wmi
if issubclass(cls, Index): obj = object.__new__(cls) else: obj = cls.__new__(cls, *args)
values = (self.data._convert(datetime=True)._get_numeric_data()) values = np.ravel(values) values = values[~com.isnull(values)]
self.config['loglevel'] = 'info'
root_dir = path(mkdtemp_clean()) export_course_to_xml(self.store, content_store, course_id, root_dir, 'test_roundtrip')
if salt.utils.is_windows():
if deep is None: s2 = s.copy() else: s2 = s.copy(deep=deep)
import salt.config import salt.loader from salt.modules import boto_lambda from salt.exceptions import SaltInvocationError
salt.utils.atomicfile.atomic_open( os.path.join(hn_dir, OUT_P), 'w+b' )
timezone.get_default_timezone.cache_clear()
credit_course = CreditCourse.objects.get(course_key=credit_course.course_key) self.assertTrue(credit_course.enabled)
return urllib.unquote(urllib.unquote(response_str))
businesshours = self._get_business_hours_by_sec() return self._onOffset(dt, businesshours)
if isinstance(self, RangeIndex): self = self.values if isinstance(other, RangeIndex): other = other.values
assert pdp.shape == (1, 4) assert axes[0].shape[0] == 4
return signal_job(jid, salt_SIGKILL)
state = self.v_sample0 ki = 0
ofile.writelines(lines)
def _check_set(df, cond, check_dtypes=True): dfi = df.copy() econd = cond.reindex_like(df).fillna(True) expected = dfi.mask(~econd)
desired_upstream = None remote_rev_type = 'sha1'
__func_alias__ = { 'set_': 'set' }
import logging import os import plistlib import re
class AsyncTestCase(object): pass
self.assertEqual(iptables.build_rule(jump='LOG', **{'log-prefix': 'spam: '}), '--jump LOG --log-prefix "spam: "')
from notification_prefs.views import enable_notifications
if not trust_root.validateURL(openid_request.return_to): log.error('invalid return_to') return False
res_row = df.ix["j", :] tm.assert_series_equal(res_row, exp_row) tm.assertIsInstance(res_row["cats"], compat.string_types)
if not gdal.HAS_GDAL: raise ValueError('Initializing geometry from JSON input requires GDAL.') g = wkb_r().read(gdal.OGRGeometry(geo_input).wkb)
p4d = tm.makePanel4D() self.assertRaises(TypeError, store.put, 'p4d', p4d)
frame.ix[:, 'B':'C'] = 4. assert_frame_equal(frame, expected)
from __future__ import unicode_literals
return settings.LANGUAGE_CODE
self.assertEqual(tab.name, expected_name)
x_squared_norms = (X ** 2).sum(axis=1) labels_array, inertia_array = _labels_inertia( X, x_squared_norms, noisy_centers) assert_array_almost_equal(inertia_array, inertia_gold) assert_array_equal(labels_array, labels_gold)
return int(round(value.total_seconds() * 1000000))
salt '*' vsphere.reset_syslog_config my.esxi.host root bad-password \ syslog_config='logdir,loghost'
assert_equal(X_checked.format, accept_sparse[0])
dr = date_range(datetime(2011, 3, 13, 1, 30), periods=3, freq=datetools.Hour()) self.assertRaises(pytz.NonExistentTimeError, dr.tz_localize, tz)
try: self.io_loop.start() except (KeyboardInterrupt, SystemExit): salt.log.setup.shutdown_multiprocessing_logging()
s = (y != 4) X = X[s, :] y = y[s] y = (y != 1).astype(int)
names = None
ret = show_instance(name=vm_['name'], call='action')
d = datetime(2013, 12, 31) result = Timestamp(d).week
for c in colors.ColorConverter.colors: result = plotting._get_standard_colors(num_colors=1, color=c) self.assertEqual(result, [c])
try: groupSID, domainName, objectType = win32security.LookupAccountName(None, group) except pywinerror: err += 'Group does not exist\n'
if (self.is_model_valid is not None and not self.is_model_valid(base_estimator, X_subset, y_subset)): continue
S.flat[::(n_samples + 1)] = preference
cmap_light = ListedColormap(['#FFAAAA', '#AAFFAA', '#AAAAFF']) cmap_bold = ListedColormap(['#FF0000', '#00FF00', '#0000FF'])
dtype_map = {'INTEGER': np.dtype(float), 'FLOAT': np.dtype(float), 'TIMESTAMP': 'M8[ns]'}
if not bool(Versioning) and bool(_describe.get('Versioning')): Versioning = {'Status': 'Suspended'}
while listening_to_events:
self.run_state('ssh_known_hosts.present', **kwargs)
self.close()
from salttesting.helpers import ensure_in_syspath, requires_salt_modules ensure_in_syspath('../../')
pivot_table(self.data, values='D', index=index)
s.asfreq('T')
'packages': ('openassessment',),
if __opts__.get('requests_lib', False): from requests.exceptions import HTTPError else: from urllib2 import HTTPError
try: connection.rollback() except Error: connection.close()
student = User.objects.prefetch_related("groups").get(id=student.id)
return hasattr(obj, 'next') or hasattr(obj, '__next__')
ret['comment'] = ('User {0} is not present, so it cannot be removed' ).format(name) return ret
empty = ParameterGrid({}) assert_equal(len(empty), 1) assert_equal(list(empty), [{}]) assert_grid_iter_equals_getitem(empty) assert_raises(IndexError, lambda: empty[1])
try:
return True
self.process_input_line(line, store_history=store_history)
for current_vname in current_communities: if current_vname not in communities: ret_communities['changes'][current_vname] = {'old': current_communities[current_vname], 'new': None}
return os.path.join(__opts__['cachedir'], 's3cache')
self.o.maxtimeout = config['api_login_timeout'] self.o.wait_for_rsp(timeout=1)
self.assertEqual(reverse('with_parameter', kwargs={'parameter': 'x'}), '/test-setlang/x/') lang_code = self._get_inactive_language_code()
with self.assertRaises(ValueError): d.save()
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
series = self.series.copy() series.index = np.arange(len(series)) tm.assertIsInstance(series.index, Index)
userdata_file: /etc/salt/my-userdata-file
out = __salt__['cmd.run_all'](cmd, output_loglevel='trace', python_shell=False)
log.info("background task (%s), state %s: result: %s", task_id, result_state, returned_result) task_output = InstructorTask.create_output_for_success(returned_result)
if name not in ['sum', 'min', 'max']: self.assertRaises(TypeError, f, Series(list('abc')))
df = DataFrame([np.arange(5) for x in range(5)]) result = df.get_dtype_counts() expected = Series({'int64': 5})
if hasattr(clz, 'check_throttles'): clz.check_throttles = _check_throttles_decorator(clz.check_throttles)
client_cache = None event_user = 'Reactor'
closest_subcluster.update(subcluster) self.init_centroids_[closest_index] = \ self.subclusters_[closest_index].centroid_ self.init_sq_norm_[closest_index] = \ self.subclusters_[closest_index].sq_norm_ return False
CourseEnrollment.unenroll_by_email("not_jack@fake.edx.org", course_id) self.assert_no_events_were_emitted()
s3 = Series([0.01, 0], index=[3, 5]) assert_frame_equal(df.loc[[3]], df.sample(1, weights=s3))
empty_distribution = grades.answer_distributions(self.course.id)
response = self.client.get(reverse("dashboard")) self.assertHttpOK(response)
'openedx.core.djangoapps.user_api', 'django_openid_auth',
available_version = salt.utils.alias_function(latest_version, 'available_version')
from __future__ import absolute_import
milestones_helpers.remove_course_content_user_milestones( course_key=usage_key.course_key, content_key=usage_key, user=student, relationship='fulfills' )
header = [field for field in output[0].lower().split(" ") if field] del output[0]
'ENABLE_CREATOR_GROUP': False,
with self.assertRaises(ItemNotFoundError): self.store.get_item(self.writable_chapter_location)
bulk_sku = models.CharField( max_length=255, null=True, blank=True,
('ALIGN', (2, 1), (2, -1), 'CENTER'),
world.ItemFactory.create( parent_location=parent_location, category='problem', display_name=display_name, data=problem_xml )
has_spatialrefsys_table = True
raise ValidationError(self.error_messages['invalid'], code='invalid')
rng = np.random.RandomState(42)
writer = MigrationWriter(new_migration) with open(writer.path, "wb") as fh: fh.write(writer.as_string())
try: ds = gdal.DataSource(data_source) except gdal.GDALException as msg: raise CommandError(msg)
response = self._load_dashboard() self.assertNotContains(response, "credit-eligibility-msg") self.assertNotContains(response, "purchase-credit-btn")
assert not any([key in rval for key in contrib]) assert all([key in params for key in contrib])
return name + '_valid'
p = Person.objects.get(pk=self.person.pk) self.assertEqual('Reinhardt', p.name)
bad_exceptions[math] = None
if convert_timedeltas and values.dtype == np.object_:
user_partititons = self.course.user_partitions
_maybe_remove(store, 'f2') store.put('f2', df) self.assertRaises(TypeError, store.create_table_index, 'f2')
return copy.copy(self._wrapped)
class UserRegistration(Form): username = CharField(max_length=10, label=None) password = CharField(widget=PasswordInput)
join_index = left_ax.take(left_indexer) return join_index, left_indexer, right_indexer
for name, line, exp_z in interstate_data: line_3d = GEOSGeometry(line, srid=4269) line_2d = LineString([l[:2] for l in line_3d.coords], srid=4269)
self.course = modulestore().get_course(self.course.id)
merge_cells = False
CourseSalesAdminRole(self.course.id).add_users(instructor)
expected = s.iloc[3] s2 = s.copy()
bare_select_suffix = ''
if response.status_code == 404: if self.should_redirect_with_slash(request): return self.response_redirect_class(self.get_full_path_with_slash(request))
if not meta.auto_created: signals.post_save.send(sender=origin, instance=self, created=(not updated), update_fields=update_fields, raw=raw, using=using)
class MyWidget8(MyWidget1): class Media: css = { 'all': ('/path/to/css3', 'path/to/css1') } js = ('/path/to/js1', '/path/to/js4')
HAS_PSUTIL = False try: import psutil HAS_PSUTIL = True except ImportError: pass
import copy import logging import re
with self.assertRaises(FieldError): Book.objects.annotate(mean_age=Avg('authors__age')).annotate(Avg('mean_age'))
y = train['y'][:, 0] - 1 assert y.shape == (5000,)
self.custom_fields = kwargs.pop('custom_fields', [])
import numpy from theano import tensor
Axes3D
invalid = Series([1]) with tm.assertRaisesRegexp(AttributeError, "only use .str accessor"): invalid.str self.assertFalse(hasattr(invalid, 'str'))
if 'retcode' not in event['data']: self.raw_events.append(event)
raise ItemNotFoundError(destination_course)
request.META = {'HTTP_HOST': 'example.com:80'} site = get_current_site(request) self.assertEqual(site, s2)
non_default_count = pos_count - pos_default_count for name in positional[:non_default_count]: annotation = annotations.get(name, _empty) parameters.append(Parameter(name, annotation=annotation, kind=_POSITIONAL_OR_KEYWORD))
self.assertRaises(ValueError, lambda: to_timedelta(time(second=1))) self.assertTrue(to_timedelta( time(second=1), errors='coerce') is pd.NaT)
if serialized_block['type'] == 'video': self.assertIn('student_view_data', serialized_block)
u"{user}@example.com".format( user=(u'e' * (EMAIL_MAX_LENGTH - 11)) )
value_annotation = True
response = self.client.get(reverse("dashboard")) self.assertHttpOK(response)
if 'error' in _response: return set_salt_view()
corr1 = self.ts.autocorr()
def index(self, request, extra_context=None): return super(Admin2, self).index(request, {'foo': '*bar*'})
ret['comment'] = 'Event module not available. Schedule enable job failed.'
self.assertRedirects(response, 'http://testserver/permanent_redirect_view/')
binary_metric = (lambda y_true, y_score, average="macro": _average_binary_score( precision_score, y_true, y_score, average)) _check_averaging(binary_metric, y_true, y_pred, y_true_binarize, y_pred_binarize, is_multilabel=True)
cli_config = saltfile_config[self.get_prog_name()]
return self.parent_instance
out_file.write('%d -> %d ;\n' % (parent, node_id))
self.X_min_, self.X_max_ = np.min(X), np.max(X)
result = grouped.apply(f) self.assert_index_equal(result.index, df.index)
keep_looping = False for alias, entries in six.iteritems(providers.copy()): for driver, details in six.iteritems(entries):
class GEOSContext(threading.local): handle = None
with patch('student.models.cc.User.save'): uname = 'student' email = 'student@edx.org'
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
from salt.states import rabbitmq_vhost
X.indptr[m + 2:n] += nz_n - nz_m X.indptr[m + 1] = m_start + nz_n X.indptr[n] = n_stop - nz_m
for parent_desc_list in parents_descendants_list: if parent_desc_list is not None: parent_desc_list.items.append(unicode(block_key))
self.label_name_to_index = {} for index, name in enumerate(self.label_index_to_name): self.label_name_to_index[name] = index
except: with open(path, 'rb') as fh: return pc.load(fh, encoding=encoding, compat=True)
ax[0, 0].hist(X[:, 0], bins=bins, fc='#AAAAFF', normed=True) ax[0, 0].text(-3.5, 0.31, "Histogram")
data_csv = pd.read_csv(self.file01.replace(".xpt", ".csv")) numeric_as_float(data_csv)
return
log.warning( 'Assuming tag \'{0}\' for repo \'{1}\'' .format(default_tag, image) ) r_tag = default_tag
keydata = { 'minion_id': minion_id, 'pub': pub, 'verify': verify}
dbkey['run'] = _id_field['run']
text = f.widget.format_value(result) self.assertEqual(text, "01:30:00 PM 21/12/2010")
self.install_results = None
html_static_path = ['images']
return [lib for lib in modulestore().get_libraries() if has_studio_read_access(user, lib.location.library_key)]
if com.is_datetime64_dtype(col.dtype):
from __future__ import absolute_import import random import string from salt.ext.six.moves import range
self.assertIsNone(course_outline_initial_state('no-such-locator', course_structure))
del frame
currently_fixing = []
length = int(self.headers.getheader('content-length')) data_string = self.rfile.read(length) post_dict = json.loads(data_string)
self.show_question_answer('p1')
self.fast_deletes = []
FEATURES['ENABLE_EXPORT_GIT'] = True GIT_REPO_EXPORT_DIR = TEST_ROOT / "export_course_repos"
X = X_digits_multi[:10] y = y_digits_multi[:10]
has_active_or_pending = SoftwareSecurePhotoVerification.user_has_valid_or_pending( user, queryset=verifications )
import integration from salt.config import cloud_providers_config
self.check_event_response_by_key('handle_vote', resource, 'newVotes', test_case['new_votes'])
'pillar_cache_backend': str,
value = str(Header(value, 'utf-8', maxlinelen=sys.maxsize).encode())
start = DateTimeField(null=True) end = DateTimeField(null=True) advertised_start = TextField(null=True) announcement = DateTimeField(null=True)
self.assertTrue( self.run_function( 'runtests_decorators.booldependsTrue' ) )
assert_array_almost_equal( X_dense.astype(dtype), X2_dense, 15) assert_array_almost_equal( y_dense.astype(dtype), y2, 15)
RestrictedCourse.objects.create(course_key=self.course.id)
self.assertEqual( res_json['message'], "{user} is not enrolled in this course. Please check your spelling and retry.".format( user=self.certificate_exception['user_name'] ) )
self.assert_index_equal(result.insert(1, 'z'), result.insert(-2, 'z'))
self.assertTrue('Activate Course Enrollment' in response.content)
elif existing['code'] == 404: ret['comment'] = 'A node with this name was not found.' else: ret = _load_result(existing, ret)
try: kwargs['format'] = _FORMAT_MAP[format.lower()] except: raise TypeError("invalid HDFStore format specified [{0}]" .format(format))
response = self._load_dashboard() self.assertContains(response, "credit-error-msg")
if self[0] <= other[0]: left, right = self, other else: left, right = other, self
return {'country_code': self.country_code(query), 'country_name': self.country_name(query), }
self.post_create_membership( 200, self.build_membership_data(user, self.solar_team), user=user )
__pillar__ = {} if 'pepa_pillar' in __opts__: __pillar__ = __opts__['pepa_pillar'] if args.pillar: __pillar__.update(yaml.load(args.pillar))
raise DeprecationWarning( '`salt.utils.cloud.deploy_script now only accepts ' 'dictionaries for it\'s `minion_conf` parameter. ' 'Loading YAML...' )
origin = bool(re.search('/', pkgname))
ret = salt.utils.cloud.bootstrap(vm_, __opts__)
MyUserForm({})
from __future__ import absolute_import import os
data.extend([np.ones((1, 784))] * 2)
if fill_value is None: fill_value = self.fill_value return self.make_block_same_class(self.values.take(indexer), fill_value=fill_value, placement=self.mgr_locs)
self.validation_scores_.append(self.score(X_val, y_val))
self.assertSessionLangEquals( 'rel', self.process_request(preview_lang='rel') )
if not GlobalStaff().has_user(request.user): raise PermissionDenied()
from __future__ import absolute_import import re
self.groups = [] for group_num in range(1, num_groups + 1): self.groups.append(Group(group_num, 'Group ' + unicode(group_num)))
idx = self.create_index() self.assertRaises(NotImplementedError, idx.shift, 1) self.assertRaises(NotImplementedError, idx.shift, 1, 2)
self.case_sensitive = False
X_dense = theano.sparse.dense_from_sparse(X) noise = self.random_stream.binomial(size=X_dense.shape, n=1, prob=self.ratio, ndim=None)
mode_slug = models.CharField(max_length=100, verbose_name=_("Mode"))
self.assertQuerysetEqual(Valid.objects.all(), [])
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
df = pd.DataFrame({'key': ['b'] * 10, 'value': 2})
return False, False
return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)
rng = check_random_state(0)
self.assertTrue( self.run_function('pkgutil.is_installed', ['com.apple.pkg.BaseSystemResources']))
idx = TimedeltaIndex(np.repeat(idx.values, range(1, len(idx) + 1)))
source, source_hash = __salt__['file.source_list']( source, source_hash, __env__ )
china = np.array(china, dtype=np.float64) / 255
resp = self.client.post('/password_reset_confirm/{0}-{1}/'.format(uidb36, token), { 'new_password1': 'bar', 'new_password2': 'bar' }, follow=True)
scores = cross_val_score(BernoulliNB(alpha=10), X > 4, y, cv=10) assert_greater(scores.mean(), 0.83)
log.exception("Unable to generate html from LoncapaProblem") raise
masked_terminal_regions = terminal_regions.copy() masked_terminal_regions[~sample_mask] = -1
fake_course_image = 'sample_image.png' course_overview = self._assert_image_urls_all_default(modulestore_type, fake_course_image)
resp = self.client.get_json(course_update_url) payload = json.loads(resp.content) self.assertTrue(len(payload) == 1)
if settings.ROOT_URLCONF != 'lms.urls': raise unittest.SkipTest('Test only valid in lms')
entries = {} for name, overrides in six.iteritems(mapped): overrides.setdefault('name', name) entries[name] = overrides map_[profile] = entries continue
results[guid]['Severity'] = str(update.MsrcSeverity)
NUM_RANDOMIZATION_BINS = 20 MAX_RANDOMIZATION_BINS = 1000
certificate.click_edit_certificate_button() certificate.course_title = "Updated Course Title Override 2" self.assertEqual(certificate.get_text('.action-primary'), "Save") certificate.click_save_certificate_button()
err.truncate(0) with self.assertRaises(CommandError): command.run_from_argv(['', '', '--traceback'])
encoding = {'encoding': 'latin-1'} if six.PY3 else {}
from pandas.tseries.common import Properties from pandas.tseries.index import date_range, DatetimeIndex from pandas.tseries.period import period_range, PeriodIndex from pandas.tseries.tdi import timedelta_range, TimedeltaIndex
user = User.objects.get(email=email)
if ret['changes']: ret = {'changes': {}, 'comment': '', 'name': name, 'result': True}
n_features = 2000 t = np.pi * np.linspace(0, 1, n_features)
sixth = -(len(e))
NO_BOTO_MODULE = True BOTO_NOT_CONFIGURED = True try: import boto NO_BOTO_MODULE = False try: boto.connect_iam() BOTO_NOT_CONFIGURED = False except boto.exception.NoAuthHandlerFound: pass except ImportError: pass
monitoring_dataset = DenseDesignMatrix(X=X)
result = func(Series([]), 50, min_periods=min_periods) tm.assert_series_equal(result, Series([]))
import ctypes import string
integer_field_ranges = dict( BaseDatabaseOperations.integer_field_ranges, PositiveSmallIntegerField=(0, 65535), PositiveIntegerField=(0, 4294967295), )
train_with_monitoring_datasets( train_dataset=dataset1, monitoring_datasets=even_monitoring_datasets, model_force_batch_size=False, train_iteration_mode='sequential', monitor_iteration_mode='sequential')
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
if subarr.dtype != np.float64: subarr = subarr.astype(np.float64)
kernel32 = ctypes.WinDLL('kernel32') advapi32 = ctypes.WinDLL('advapi32')
eval_frame_add_all_threads = \ Benchmark("pd.eval('df + df2 + df3 + df4')", common_setup, name='eval_frame_add_all_threads', start_date=datetime(2013, 7, 21))
c.execute('PRAGMA foreign_keys = %s' % int(self._initial_pragma_fk))
filesystem = OSFS(root_dir / 'test_export/policies/2012_Fall') self.assertTrue(filesystem.exists('grading_policy.json'))
monitoring_dataset = DenseDesignMatrix(X=X)
mock = MagicMock(return_value=False) with patch.object(composer, '_valid_composer', mock): self.assertRaises(CommandNotFoundError, composer.update, 'd')
response = self.client.get('/permission_protected_view_exception/') self.assertEqual(response.status_code, 403)
if hasattr(self.beta_tester, '_roles'): del self.beta_tester._roles self.assertFalse(CourseBetaTesterRole(self.course.id).has_user(self.beta_tester))
log.exception( u'Unable to emit {event} event for user {user} and order {order}'.format( event=event_name, user=self.user.id, order=self.id) )
store.append('s4', wp) self.assertRaises(ValueError, store.append, 's4', wp2)
result = pd.read_pickle(path) self.compare_element(result, expected, typ)
import salt.payload import salt.utils from salt.defaults import DEFAULT_TARGET_DELIM from salt.exceptions import CommandExecutionError import salt.auth.ldap import salt.ext.six as six
user_enroll = get_enrollment(self.username, self.course_id) self.assertTrue(user_enroll['is_active'])
prb1 = StudentModule.objects.get( course_id=self.course.id, student=self.student_user )
attempt = SoftwareSecurePhotoVerification(user=user) attempt.status = 'approved' attempt.save()
tagger_get_structure.sample_rate = 1
([], []),
if zk_hosts is not None and path not in SEMAPHORE_MAP: zk = _get_zk_conn(zk_hosts) SEMAPHORE_MAP[path] = _Semaphore(zk, path, identifier, max_leases=max_concurrency, ephemeral_lease=ephemeral_lease)
'update_url': (bool, string_types),
if content_length > settings.FILE_UPLOAD_MAX_MEMORY_SIZE: self.activated = False else: self.activated = True
_move_ext = Extension('pandas.util._move', depends=[], sources=['pandas/util/move.c']) extensions.append(_move_ext)
assert_equal(n_splits[i], cv.get_n_splits(X, y, labels))
y_true, _, probas_pred = make_prediction(binary=True) fpr, tpr, thresholds = roc_curve(y_true, probas_pred)
self.validate_min_itemsize(min_itemsize)
self.config['id'] = self.values.proxyid
X = check_array(X, order='C', dtype='float64') assert_raises(ValueError, clf.fit, X, y, check_input=False)
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
count = Number.objects.count() qs = Number.objects.all()
with self.assertNumQueries(2): lst1 = self.traverse_qs( Person.objects.prefetch_related('houses'), [['houses']] )
continue
df1 = pd.DataFrame( np.arange(18, dtype='int64').reshape(6, 3), columns=["a", "b", "c"])
optima = [self._constrained_optimization(obj_func, self.kernel_.theta, self.kernel_.bounds)]
_skip_if_has_locale()
import salt.ext.six as six
result = Timestamp('20080101') + offset self.assertIsInstance(result, Timestamp)
if axis != 0: raise AssertionError('axis must be 0') return self.obj.reindex(keyarr, level=level)
pass
contexts = to_list(response.context) if not contexts: self.fail(msg_prefix + 'Response did not use any contexts to ' 'render the response')
didx = DatetimeIndex(start='2013/01/01', freq='D', periods=400) pidx = PeriodIndex(start='2013/01/01', freq='D', periods=400)
emails = list(emails)
COURSE_SLUG = "100" COURSE_NAME = "test_course"
except: match = (arg_val_dict[key] is compat_args[key])
retval = self.obj for i, key in enumerate(tup): if i >= self.obj.ndim: raise IndexingError('Too many indexers')
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
idx = pd.Index(pd.Categorical(['a', 'b']))
return list(set(enrolled_students) - set(students_already_have_certs))
self.video.click_player_button('transcript_button')
df += int(self.smooth_idf) n_samples += int(self.smooth_idf)
gs = GridSearchCV(clf, [{'parameter': [0, 1, 2]}], scoring='accuracy', refit=False, error_score='raise')
data = ['0', '1', '2'] self.assertRaises(TypeError, Int64Index, data)
caches['prefix']._cache = cache._cache caches['prefix']._expire_info = cache._expire_info
blank_formset = self.make_choiceformset([('', '')]) self.assertFalse(blank_formset.has_changed())
n_classes = 1 if solver in ('liblinear', 'sag'): break
entry = module.default_app_config
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch ensure_in_syspath('../../')
actual = self.get_exceldf(basename, 'Sheet1', converters=converters) tm.assert_frame_equal(actual, expected)
sl = self.series[10:20] sl[:] = 0 self.assertTrue((self.series[10:20] == 0).all())
(True, "en", "lms-footer-edx.css"), (True, "ar", "lms-footer-edx-rtl.css"),
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
try: import elasticsearch logging.getLogger('elasticsearch').setLevel(logging.CRITICAL) HAS_ELASTICSEARCH = True except ImportError: HAS_ELASTICSEARCH = False
for block_key_string, serialized_block in serializer.data['blocks'].iteritems(): self.assertEquals(serialized_block['id'], block_key_string) self.assert_basic_block(block_key_string, serialized_block)
config.floatX = self.prev_floatX
s = Series(np.arange(len(i)), index=i) s[3] self.assertRaises(TypeError, lambda: s[3.0])
self.validate_version()
del configure_custom
X = StandardScaler().fit_transform(X)
continue
import salt.utils.url from salt.serializers.yamlex import deserialize
import salt.utils
return
if not self._is_masquerading_as_student(): raise Http404('No {block_type} found with name {url_name}'.format( block_type=block_type, url_name=url_name, ))
#pylint: disable=E0602
accuracy_scorer = make_scorer(accuracy_score) f1_scorer = make_scorer(f1_score)
import logging
keystone.auth_key: 303802934809284k2j34lkj2l3kj43k
masks = [] if dropna:
with self.assertRaises(forms.ValidationError): f.clean('21/12/2010')
face_image, photo_id_image, response = self._decode_image_data( params["face_image"], params.get("photo_id_image") )
y_true, y_pred, _ = make_prediction(binary=True)
minibatch_size = 1000
os.utime(path_test, (fstats_orig.st_mtime-age, fstats_orig.st_atime-age))
mean_tpr = np.zeros_like(all_fpr) for i in range(n_classes): mean_tpr += interp(all_fpr, fpr[i], tpr[i])
mixed = Series(['a', NA, 'b', True, datetime.today(), 'c', 'eee', None, 1, 2.])
from __future__ import absolute_import
verify_name(self.seq_usage_key, self.chapter_usage_key, "customized name", display_name="customized name")
enrollment.activate() self.assertTrue(CourseEnrollment.is_enrolled(user, course_id)) self.assert_enrollment_event_was_emitted(user, course_id)
from __future__ import unicode_literals
from salt.modules import beacons from salt.exceptions import CommandExecutionError import integration
grain = getattr(filt, '__grain__', 'os_family') if grain not in match_groups: match_groups[grain] = OrderedDict([])
__context__.pop('pkg.list_pkgs', None) new = list_pkgs() ret = salt.utils.compare_dicts(old, new)
if field.primary_key: return True
X = sp.csr_matrix(X, copy=copy)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
__virtualname__ = 'user'
if self.metadata_inheritance_cache_subsystem is not None: self.metadata_inheritance_cache_subsystem.set(unicode(course_id), tree)
SERVER_EMAIL = 'root@localhost'
geom2 = OGRGeometry(g.hex) self.assertEqual(geom1, geom2)
self.store.publish(locations['child_sibling'], self.user_id)
staff_user = UserFactory(username='test_staff_user', email='test_staff_user@openedx.org', password='test') CourseStaffRole(self.master_course_key).add_users(staff_user)
ls = LineString(((150.902, -34.4245), (150.87, -34.5789)))
groups = [name]
with super(SingleThreadUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create(discussion_topics={'dummy_discussion_id': {'id': 'dummy_discussion_id'}})
#html_use_smartypants = True
self.assertTrue(allowance_section.is_allowance_record_visible)
salt.utils.fopen(master_config, 'w').write( 'blah: false\n' 'root_dir: {0}\n' 'log_file: {1}\n'.format(tempdir, master_config) )
gpr = GaussianProcessRegressor(kernel=kernel) gpr.fit(X, y_norm) gpr_norm = GaussianProcessRegressor(kernel=kernel, normalize_y=True) gpr_norm.fit(X, y)
#html_use_opensearch = ''
from __future__ import absolute_import import copy as pycopy import difflib import os import yaml
df = DataFrame([[True, 1], [False, 2]], columns=["female", "fitness"])
try: value = int(value) except (ValueError, TypeError): pass try: value = float(value) except (ValueError, TypeError): pass
log.exception( u"%s in Range header: %s for content: %s", exception.message, header_value, unicode(loc) )
log = logging.getLogger(__name__)
return bool(re.match("^https?://%s/" % re.escape(domain), referer))
field_type, field_params, field_notes = self.get_field_type(connection, table_name, row) extra_params.update(field_params) comment_notes.extend(field_notes)
('defunct-cart', 'defunct-cart'),
scaler_batch = MaxAbsScaler().fit(X)
self.selenium.get(self.live_server_url + reverse('admin:admin_widgets_member_add'))
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.assertEqual(len(mail.outbox), 1)
s = Series([1, 2, 3], ['a', 'b', 'c'])
self.assertInUnsucceededCourseActions(destination_course_key)
X = check_array(X, copy=whiten, dtype=FLOAT_DTYPES).T
fake_course_image = 'sample_image.png' patched_create_thumbnail.side_effect = Exception("Kaboom!")
seed.__salt__ = {} seed.__opts__ = {}
ser.replace([np.nan], -1, inplace=True)
import integration import salt.utils
if 'FEATURES' in ENV_TOKENS: del ENV_TOKENS['FEATURES']
from __future__ import absolute_import import logging
ret.__opts__ = {} ret.__salt__ = {}
sync = SyncWrapper(AsyncReqChannel.factory, (opts,), kwargs) return sync
self.user_partition = UserPartition( self.TEST_ID, self.TEST_NAME, self.TEST_DESCRIPTION, self.TEST_GROUPS, extensions[0].plugin, self.TEST_PARAMETERS, )
with self.assertRaises(ValueError): Series(np.ones(10)).rolling(window=3, center=True, axis=1).mean()
self.assertIn('tag', ret) ret.pop('tag')
url(r'^{}/all_sequential_open_distrib$'.format(settings.COURSE_ID_PATTERN), 'class_dashboard.views.all_sequential_open_distrib', name="all_sequential_open_distrib"),
application: 6789012345 directory: 3456789012
return dispatch_to_register()
if dep in inspected: continue inspected.append(dep)
self.file_mapping = salt.utils.odict.OrderedDict()
if out is None: out_shape = len(row_idx), len(col_idx) out = np.empty(out_shape, dtype=dtype)
check_firefox_version()
opts['providers'] = providers_config
print(client_error)
AND = 'AND' OR = 'OR'
self.assert_social_auth_exists_for_user(request.user, strategy) self.assert_account_settings_context_looks_correct(account_settings_context(request), request.user, linked=True)
CourseEnrollment.enroll(self.user, self.course.id, mode="honor")
from django.conf import settings, global_settings
CreditProvider.objects.create( provider_id="ASU", enable_integration=True, provider_url="https://credit.example.com/request", )
with tm.assertRaises(ValueError): s.plot(yerr=np.arange(11))
world.css_click(subsection_css)
tm.assertRaisesRegexp(ValueError, 'axis', df.to_timestamp, axis=2)
suggested_prices = models.CommaSeparatedIntegerField(max_length=255, blank=True, default='')
if profile in current_state: ret['result'] = True ret['comment'] = 'System already in the correct state' return ret
for t in ['s', 'D', 'us', 'ms']: self.assertRaises(TypeError, s.astype, 'M8[%s]' % t)
from StringIO import StringIO
KT = np.zeros_like(KT) for i in range(len(T)): for j in clf.support_: KT[i, j] = np.dot(T[i], X[j])
import salt.ext.six as six
for child, parents in enumerate(self.get_parents_map(children_map)): self.assertSetEqual(set(block_structure.get_parents(child)), set(parents))
filename = '_' + fragment_name contents[filename] = fragment
for child in children_map[block_to_remove]: for parent in parents_map[block_to_remove]: removed_children_map[parent].append(child)
with tm.assertRaises(SyntaxError): df.query('(@df>0) & (@df2>0)', engine=engine, parser=parser)
reqs = CreditRequirement.get_course_requirements(course_key)
config.toggle() self.assertFalse(config.details_error_icon_is_present) self.assertFalse(config.details_message_is_present)
self.order_by = rhs.order_by[:] if rhs.order_by else self.order_by self.extra_order_by = rhs.extra_order_by or self.extra_order_by
EmptyResultSet = sql.EmptyResultSet
self.conn.put_method.side_effect = ClientError(error_content, 'put_method')
docs_train, docs_test, y_train, y_test = train_test_split( dataset.data, dataset.target, test_size=0.25, random_state=None)
return [ m['content_id'] for m in find_gating_milestones( course.id, None, 'requires', {'id': user.id} ) ]
deploy_res = __salt__['tomcat.deploy_war'](war, name, 'yes', url, __env__, timeout, temp_war_location=temp_war_location)
test = SVHN('test', path=local_path) check_dtype(test) test.apply_preprocessor(pipeline, can_fit=False)
self.assertRaises(TypeError, lambda: ind.view('i8'))
self.assertIn('some_required_info', response.context['adminform'].form.errors)
self.assertNotContains(response, '<h2>Author-book relationships</h2>') self.assertNotContains(response, 'Add another Author-Book Relationship') self.assertNotContains(response, 'id="id_Author_books-TOTAL_FORMS"')
from __future__ import unicode_literals
self.course.edxnotes = True self.assertTrue(has_notes_tab(self.user, self.course))
if not PY3: setattr(cls, name, types.MethodType(func, None, cls)) else: setattr(cls, name, func)
if not names: raise
response = self.client.get(index_url, {}, HTTP_ACCEPT='application/json') self.assertEqual(response.status_code, 500)
self.certificates_section.refresh()
IPFilter.objects.create( whitelist="192.168.10.20", enabled=True )
if out['result'] is None: ret['result'] = False ret['comment'] = out['comment'] return ret
return _possibly_downcast_to_dtype(result, dtype)
if not mime_type or mime_type not in mimetypes_list:
return True
if diagonal == 'hist': ax.hist(values, **hist_kwds)
style.ERROR_OUTPUT = style.ERROR
from __future__ import absolute_import import integration
add_instructor(new_course.id, user, user)
df = _make_mixed_dtypes_df('float', dict(A=1, B='foo', C='bar')) _check_mixed_dtypes(df)
_skip_if_no_xlsxwriter()
for fld in feat: self.assertIn(fld.name, source.fields.keys())
action_state.delete()
from __future__ import absolute_import import difflib import os import yaml
vmin_orig = vmin
current_network_settings = _parse_rh_config(_RH_NETWORK_FILE)
r = Restaurant.objects.get(pk=self.r1.pk) p = r.place with self.assertNumQueries(0): self.assertEqual(p.restaurant, r)
connection, address = self._socket.accept() self.socket_queue.put((connection, address), True, None)
import logging
T = [1.0 * x for x in lrange(1, 10) * 10][:1095] result = Series(T, lrange(0, len(T)))
for field in InheritanceMixin.fields.values(): if field.is_set_on(descriptor): parent_metadata[field.name] = field.read_json(descriptor)
EX_THIN_DEPLOY = 11 EX_THIN_CHECKSUM = 12 EX_MOD_DEPLOY = 13 EX_SCP_NOT_FOUND = 14 EX_CANTCREAT = 73
self.assertIn('no-field', e.args[0])
'cmd_safe': bool,
request = HttpRequest() request.session = self.client.session
old_center_buffer = np.zeros(n_features, np.double)
required_boto3_version = '1.2.1'
import salt.utils.odict from salt.modules import seed from salttesting.helpers import ensure_in_syspath
s = Series(list('abbcd'), dtype="category") self.assertTrue('cat' in dir(s))
from __future__ import absolute_import
if image_file is not None: self.save_image(image_file)
if not __execute_cmd('config -g cfgUserAdmin -o \ cfgUserAdminEnable -i {0} 1'.format(uid)): delete_user(username, uid) return False
JINJA = jinja2.Environment( loader=jinja2.FileSystemLoader( os.path.join(salt.utils.templates.TEMPLATE_DIRNAME, 'debian_ip') ) )
password = generate_unique_password(generated_passwords) errors = create_and_enroll_user( email, username, name, country, password, course_id, course_mode, request.user, email_params ) row_errors.extend(errors)
self._assert_cert_status(phantom_course, self.user, CertificateStatuses.error)
test_configuration = [ { "urlname": "two_done_block_test_case_0", #"olx": self.olx_scenarios[0],
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] h1_state = layer_to_state[h1] h2_state = layer_to_state[h2]
if ((not com.is_categorical_dtype(result)) and isinstance(result, np.ndarray)): result = _block_shape(result, ndim=self.ndim)
data = slave if core is None else {core: {'data': slave}}
Ensure mylc exists: boto_lc.present: - name: mylc - image_id: ami-0b9c9f62 - profile: myprofile
log.debug("Cached file: path={0}, md5={1}, etag={2}".format(cached_file_path, cached_md5, file_md5)) if cached_md5 == file_md5: return
if isinstance(to_space, CompositeSpace):
if all_students or delete_module: if not has_access(request.user, 'instructor', course): return HttpResponseForbidden(_("Requires instructor access."))
pro.authors.set([marty]) dive.authors.set([mark])
return getattr(settings, 'SOCIAL_AUTH_SAML_SP_PUBLIC_CERT', '')
embargo_redirect = embargo_api.redirect_if_blocked( course_key, user=request.user, ip_address=get_ip(request), url=request.path ) if embargo_redirect: return redirect(embargo_redirect)
def test_sparse_random_projection_transformer_invalid_density(): for RandomProjection in all_SparseRandomProjection: assert_raises(ValueError, RandomProjection(density=1.1).fit, data)
try: import requests
if iface_type not in ['slave']: return __salt__['cmd.run']('ifdown {0}'.format(iface)) return None
DATE_INPUT_FORMATS = [
s = Series(lrange(5)) del s[0]
'Content-Type': content_type,
g() elapsed = (time.time() - start) / niter gc.enable()
def get_context(self): context = super(TodaysDate, self).get_context() context['date'] = '' return context
pillar_dir = os.path.normpath(os.path.join(gitpil.working_dir, root))
for from_space in composite_spaces: for to_dtype in composite_dtypes: test_get_origin_batch(from_space, to_dtype) test_make_shared_batch(from_space, to_dtype) test_make_theano_batch(from_space, to_dtype) test_dtype_setter(from_space, to_dtype)
raise CommandError( _( 'Skipping user "{}" because the specified and existing email ' 'addresses do not match.' ).format(user.username) )
from salt.utils.schema import (Schema, StringItem, ArrayItem, OneOfItem)
if repo['uri'] not in repos: repos[repo['uri']] = [repo]
#if not getattr(func, "_is_xblock_handler", False):
fstats_post = os.stat(path_test)
data = sorted(data.items()) data = dict((k, v) for k, (i, v) in zip(names, data))
self.users = [ UserFactory.create() for dummy0 in range(self.USER_COUNT) ]
return _error(ret, u_check)
random_state = check_random_state(random_state) r = random_state.randint(0, n_samples_abnormal, 3377) abnormal_samples = abnormal_samples[r] abnormal_targets = abnormal_targets[r]
for x in range(1, 10): a = Article(headline='Article %s' % x, pub_date=datetime(2005, 7, 29)) a.save()
from __future__ import absolute_import
'organizations',
from __future__ import absolute_import import os
cohort_name = 'I AM A RANDOM COHORT' data = {'name': cohort_name, 'assignment_type': CourseCohort.RANDOM} response_dict = self.put_handler(self.course, data=data)
import salt.ext.six as six
return saved_ifcfg.split('\n')
blocks_stack.extend(children)
ii = -1
axis = list(set([t.non_index_axes[0][0] for t in tbls]))[0]
can_defer_constraint_checks = False
emp_cov = EmpiricalCovariance().fit(X)
urlpatterns += ( url(r'^api/', include('edx_proctoring.urls')), )
from __future__ import absolute_import import os import time import logging import traceback
task_folder.DeleteFolder(name, 0)
if len(result) and mask.any(): result.loc[mask] = np.nan
self.assertFalse(self.user.is_active)
if self[0] <= other[0]: left, right = self, other else: left, right = other, self
test3 = value 3B
omask[5:10] = np.nan self.assertRaises(Exception, s.__getitem__, omask) self.assertRaises(Exception, s.__setitem__, omask, 5)
end_idx = num_assets
unpickled_scorer = pickle.loads(pickle.dumps(scorer)) score3 = unpickled_scorer(clf, X_test, y_test) assert_almost_equal(score1, score3)
options.update({ 'site': get_config_value('site'),
from datetime import timedelta, datetime import json
self._npy_counter = 1 if protocol is None: protocol = (pickle.DEFAULT_PROTOCOL if PY3_OR_LATER else pickle.HIGHEST_PROTOCOL)
if options['course']: try: course_key = CourseKey.from_string(options['course']) except InvalidKeyError: course_key = SlashSeparatedCourseKey.from_deprecated_string(options['course'])
y = np.array([3, 3, -1, -1, 2])
xml_object.tag = self.category node.tag = self.category
n_population = 100
import salt.config as config
getattr(rs, attr)
from __future__ import division, absolute_import, print_function
fullname_with_subpath = content_path.replace(static_dir, '') if fullname_with_subpath.startswith('/'): fullname_with_subpath = fullname_with_subpath[1:] asset_key = StaticContent.compute_location(target_id, fullname_with_subpath)
if lib_names: for lib_name in lib_names: lib_path = find_library(lib_name) if lib_path is not None: break
estimators = [] estimators_samples = [] estimators_features = []
content = 'outside <strong>inside</strong> after' payload = get_response(content, 'June 22, 2000') self.assertHTMLEqual(content, payload['content'], "text outside tag")
import logging import time import json from salt.exceptions import (CommandExecutionError, MinionError)
is_verified, has_skipped, has_completed = _get_user_statuses(user, course_key, checkpoint)
df = tm.makeTimeDataFrame() g = df.groupby(pd.TimeGrouper('M')) g.transform(lambda x: x - 1)
try: store.close() except: pass
opts['hash_type'] = opts['hash_type'].lower()
from salt.utils import mac_utils from salt.exceptions import SaltInvocationError, CommandExecutionError
disk_names = [] for disk in eligible: disk_names.append(disk.canonicalName) ret.update({host_name: {'Disks Added': disk_names}})
provider_url = reverse('openid-provider-xrds') factory = RequestFactory() request = factory.request() abs_provider_url = request.build_absolute_uri(location=provider_url)
self.assertGreater(len(items[0].question), 0)
from salt.modules import guestfs
from __future__ import absolute_import import os import shutil import socket
index_path = reverse('admin:index', current_app=self.name) return HttpResponseRedirect(index_path)
X, y = datasets.samples_generator.make_s_curve(n_samples, random_state=0)
try: self.assertNotIn(CERT_ALIAS, str(certs_list)) except CommandExecutionError: self.run_function('keychain.uninstall', [CERT_ALIAS])
wkt_w = WKTWriter() with self.assertRaises(TypeError): wkt_w._set_ptr(WKTReader.ptr_type())
answers = List(help="Poll answers from xml", scope=Scope.content, default=[])
y_true = rng.randint(0, 3, size=10) assert_raise_message(ValueError, "multiclass format is not supported", roc_auc_score, y_true, y_pred)
class UserRegistration(Form): username = CharField(max_length=10, label='Your username') password1 = CharField(widget=PasswordInput) password2 = CharField(widget=PasswordInput, label='Contraseña (de nuevo)')
from __future__ import absolute_import
response['X-XRDS-Location'] = get_xrds_url('xrds', request) return response
os.remove(saved_path)
self.assertEqual(module.attempts, 1)
estimator.fit(X, y)
from __future__ import absolute_import import re
s = Series(pd.to_timedelta(lrange(5), unit='d')) result = s.isin(s[0:2]) assert_series_equal(result, expected)
self.store.publish(self.course.location, self.user_id)
for field in o2m_type_fields: if field.concrete: reverse_field = field.remote_field self.assertTrue(reverse_field.is_relation and reverse_field.many_to_one)
@property def _is_v1(self): return False
return u'<div class="{0}">{1}{2}</div>'.format(style, label_wrap, hints_wrap)
return HttpResponse(content="")
if self._session_expired: raise ForceRetryError("Retry on session loss at top")
FEATURES['ENABLE_TEAMS'] = True
from salt.states import chef
win_autoruns.__salt__ = {} win_autoruns.__grains__ = {}
setattr(cls, self.name, ManyToManyDescriptor(self.remote_field, reverse=False))
template = engines['django'].from_string('bar{{ baz }}') response.template_name = template response.render() self.assertEqual(response.content, b'foo')
if is_datetimelike_v_numeric(x, y): raise TypeError("invalid type comparison")
with salt.utils.fopen('/etc/rc', 'r') as handle: lines = handle.readlines()
from __future__ import absolute_import import salt.utils
keys_config['key_logfile'] = os.devnull keys_config['pki_dir'] = self.options.gen_keys_dir
self.assertListEqual(problem.responders.values()[0].context['idset'], correct_order)
return False
CourseModeFactory.create( course_id=self.course.id, mode_slug='professional', mode_display_name='Professional Education', )
from salt.states import kapacitor
CourseEnrollmentFactory.create( user=user, course_id=course_key, mode=mode )
def assertEquals(self, *args, **kwargs): return deprecate('assertEquals', self.assertEqual)(*args, **kwargs)
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor' )
if microsite_org: return courses
solver = 'svd'
data = np.array([False, False, True, True, False, False]) arr = SparseArray(data, fill_value=False, dtype=bool)
def check_record(result, func, cargs): if result: rec = result.contents record = {fld: getattr(rec, fld) for fld, ctype in rec._fields_}
self.coach = AdminFactory.create(password="test") self.client.login(username=self.coach.username, password="test")
text = f.widget.format_value(result) self.assertEqual(text, "13:30:05")
if settings.APPEND_SLASH and uri.endswith('/') and referer == uri[:-1]: return True
certs_api.set_cert_generation_enabled(self.course.id, True)
from salt.exceptions import SaltInvocationError from salt.utils import exactly_one
assert_true(hasattr(InheritanceMixin, attribute))
used_all_attempts = CapaFactory.create(showanswer='closed', max_attempts="1", attempts="1", due=self.tomorrow_str) self.assertTrue(used_all_attempts.answer_available())
tupl = d.as_tuple() units = len(tupl[1]) - tupl[2] prec = abs(p) + units + 1
import jinja2
fname.replace('_', r'\_'),
base = Timestamp('20140101 00:00:00')
video_html = get_preview_fragment(request, self.video, context).content self.assertNotRegexpMatches(video_html, "<select")
print('explained variance ratio (first two components): %s' % str(pca.explained_variance_ratio_))
in_block = False
import salt.ext.six as six
if not item_index_dictionary and not item.has_children: return
ret['comment'] = "Label {0} already set".format(name)
__salt__['cmd.run']('automount -cv') return True
CourseEnrollmentFactory( is_active=True, course_id=self.course.id, user=self.user )
stream1 = StringIO() stream2 = StringIO() handler1 = StreamHandler(stream1) handler2 = StreamHandler(stream2)
self._create_cert(self.courses[0].id, self.user, CertificateStatuses.error, mode)
for svd_10, svd_20 in svds_10_v_20: assert_greater( svd_20.explained_variance_ratio_.sum(), svd_10.explained_variance_ratio_.sum(), )
resp = ProxyBug.objects.select_related().get(version__icontains='beta') self.assertEqual(repr(resp), '<ProxyBug: ProxyBug:fix this>')
self.assertTrue(filecmp.cmp(path_test, path_out))
if self.default and CourseCompleteImageConfiguration.objects.filter(default=True).exclude(id=self.id): raise ValidationError(_(u"There can be only one default image."))
__func_alias__ = { 'set_': 'set' }
module_store = modulestore() course_items = import_course_from_xml( module_store, self.user.id, TEST_DATA_DIR, ['toy'], static_content_store=contentstore(), verbose=True ) course = course_items[0] verify_asset_locked_state(False)
if not decode: ret = _get_secrets(namespace, name, apiserver_url) else: ret = _decode_secrets(_get_secrets(namespace, name, apiserver_url)) return ret
assign_coach_role_to_ccx(ccx_locator, request.user, course.id)
from salt.states import postgres_cluster
import logging
if hang_closing: yield start, "E133 closing bracket is missing indentation"
if values.ndim > 1: if notempty: return _wrap_results( np.apply_along_axis(get_median, axis, values), dtype)
'django.contrib.admin',
self.assertEqual(len(Package.objects.values('screening__movie__pk', 'screening__movie__title')), 2)
if field.many_to_many: if field.remote_field.through._meta.db_table not in existing_table_names: return False, project_state else: found_add_field_migration = True continue
df.sort_values(by=["unsort"], ascending=False)
return '{0} not found'.format(name)
self.assertFalse(os.path.exists('./templates/template_with_error.tpl.py'))
from salt.exceptions import SaltInvocationError import salt.utils.boto import salt.utils.boto3
return None
X, y = make_classification(n_samples=200, n_features=20, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, flip_y=0.0, class_sep=10, shuffle=False, random_state=0)
axis = self.grouper.axis grouper = axis[axis.isin(dropped.index)]
ax = ts_irregular[:5].plot() ts_irregular[5:].plot(ax=ax)
__virtualname__ = 'dsc'
raise ValueError("Cannot use a custom kernel function. " "Precompute the kernel matrix instead.")
with self.assertRaises(ValueError): setattr(c, "parent", First(id=1, second=1))
import logging import os
from salt.states import rbenv
signals.m2m_changed.send( sender=self.through, action='pre_add', instance=self.instance, reverse=self.reverse, model=self.model, pk_set=new_ids, using=db, )
assert_array_equal(children_unstructured, children_structured)
inline_script = "messages[0] = {code}".format(code=self._get_random_number_code()) problem = self.build_problem(answer=inline_script)
if paginated_results.page != page: raise PageNotFoundError("Page not found (No results on this page).")
srcpath = srcpath + '/'
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'softlayer_hw', vm_['profile'], vm_=vm_) is False: return False
data_y = None if label_type is not None: data_y = data[label_type].reshape(-1, 1)
_AXES_MAP = { DataFrame: [0], Panel: [1, 2], Panel4D: [1, 2, 3], }
try: if not _available(name, ret): return ret except CommandExecutionError as exc: ret['result'] = False ret['comment'] = exc.strerror return ret
to_lisa_select_option = self.get_select_option(to_box, str(self.lisa.id)) self.assertEqual(to_lisa_select_option.get_attribute('title'), to_lisa_select_option.get_attribute('text'))
head_sha = None
instructor_task.api.submit_bulk_course_email(request, course_id, email.id)
return constant_time_compare( _unsalt_cipher_token(request_csrf_token), _unsalt_cipher_token(csrf_token), )
from __future__ import absolute_import import os
def f(): df = orig.copy() df.loc["j", :] = ["c", 2]
test_course = self.store.get_course(test_course.id.version_agnostic()) self.assertIn(test_chapter.location, test_course.children)
exc_info_on_loglevel=logging.DEBUG
__virtualname__ = 'smartos'
dummy_v = T.tensor4() sqfilt = T.square(self._filters)
if HAS_ZMQ: try: zmq_version_info = zmq.zmq_version_info() except AttributeError: zmq_version_info = tuple(
el = course_listing[0]
if math_expr.strip() == "": return float('nan')
df = DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])
exams = get_all_exams_for_course(unicode(self.course.id)) self.assertEqual(len(exams), 1)
expected = [fill_value.ordinal] * 2 + list(values[2:]) expected = klass(ordinal=expected, freq=o.freq) o = klass(ordinal=values, freq=o.freq)
self.run_collectstatic()
scores = cross_val_score(clf, X, y2) assert_array_equal(scores, clf.score(X, y2))
class SearchableLocation(models.Model): keywords = models.CharField(max_length=256)
ret = __salt__['event.fire']({}, 'module_refresh')
if course_key is not None: CourseEnrollment.enroll(user, course_key, mode=enrollment_mode)
for sel in PROBLEM_DICT[problem_type][correctness]: if bool(isnt_marked):
unnorm_predict_proba = np.array([[0.005183999999999999, 0.02194787379972565]]) predict_proba = unnorm_predict_proba / np.sum(unnorm_predict_proba) assert_array_almost_equal(clf.predict_proba(X_test), predict_proba)
class CityBase(NamedModel): population = models.IntegerField() density = models.DecimalField(max_digits=7, decimal_places=1) point = models.PointField()
X, y = datasets.make_hastie_10_2(n_samples=12000, random_state=1)
ls = LineString((0, 0), (1, 1)) self.assertAlmostEqual(1.41421356237, ls.length, 11)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self.assertEqual(1.0, pnt.distance(Point(0, 1)))
yield check_estimators_empty_data_messages
required_boto3_version = '1.2.1'
class OFTString(Field): pass
response = self._response() self.assertFalse(response.is_rendered) with self.assertRaises(ContentNotRenderedError): response.content self.assertFalse(response.is_rendered)
if sys.version_info[1] <= 6: @contextmanager def ZipFile(*args, **kwargs): with closing(zipfile.ZipFile(*args, **kwargs)) as zf: yield zf else: ZipFile = zipfile.ZipFile
__salt__ = salt.loader.minion_mods(__opts__) __grains__ = __opts__['grains']
overlimit_block_keys = set() while len(selected) > max_count: overlimit_block_keys.add(selected.pop())
if not isinstance(data, (ABCSeries, list, tuple)): data = list(data) data = np.asarray(data)
self.assertRaises(KeyError, store.select_column, 'df', 'foo')
_config_filename_ = 'minion'
need_dash_t = ('CentOS-5',)
self.skipTest('This test fails when using tests/runtests.py. salt-runtests will be available soon.')
assert_page_correct( page=2, page_size=4, expected_start=4, expected_stop=8, expected_next=3, expected_prev=1 )
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
self.assertTrue(np.issubdtype(pan.values.dtype, np.floating))
return None, None, None
if auth.user_has_role(user, CourseInstructorRole(course_id)): return 'instructor' else: return 'staff'
dict(safe_zip(range(2), (0.8, 1.3))))
data_converted = _convert_string_array(data, encoding) itemsize = data_converted.itemsize
self.assertTrue(self.video.is_error_message_shown)
from __future__ import absolute_import
order = 'C'
new_conf.append(_format_master(**line))
self.assertFalse(f.has_changed('', None))
self.store.delete_item(self.problem_x1a_1, self.user_id) self.assertTrue(self._has_changes(self.vertical_x1a))
c = County.objects.get(name=name) self.assertEqual(n, len(c.mpoly))
try: from StringIO import StringIO except: from io import StringIO
log = saltlog.SaltLoggingClass(__name__)
for _id in bulk_write_record.structures.viewkeys() - bulk_write_record.structures_in_db: dirty = True
default_store=ModuleStoreEnum.Type.mongo
#%%OPTS
plt.figure(fignum, figsize=(4, 3)) plt.clf()
multi_db = True
for msg in all_messages: self.assertNotContains(response, msg)
from __future__ import absolute_import import re
module = CapaFactory.create(attempts=attempts - 3) self.assertEqual(module.check_button_name(), "Check")
if name in list_tasks(location):
import salt.ext.six as six
raise TypeError("Index can't be updated inplace")
response = requests.post(self.url) self.assertEqual(response.status_code, 400)
is_copy = axis != 0 or result._is_view result._set_is_copy(self, copy=is_copy) return result
for item in items: self.assertChildNodes(item, ['title', 'link', 'description', 'guid', 'georss:point'])
__salt__
from __future__ import absolute_import import logging from salt.ext.six.moves import StringIO
self.assertNotEqual(discussion_item.discussion_id, '$$GUID$$')
n = len(self) indexer = None
pass
self._test_email_address_failures(SESLocalAddressCharacterError(554, "Email address contains a bad character"))
CourseEnrollmentFactory(user=self.student, course_id=self.course_id)
course_id = CourseKeyField(max_length=255, db_index=True, verbose_name=_("Course"))
from __future__ import unicode_literals
import salt.defaults.exitcodes import salt.ext.six as six
return None
return truncate_name('%s_%s_id' % (model._meta.db_table, field.column), 30)
allowance_section.submit_allowance_form('10', self.USERNAME)
self.assertNotIn(self.module_key, self.loader)
self.frame.columns.name = 'columns' resetted = self.frame.reset_index() self.assertEqual(resetted.columns.name, 'columns')
kinds = tuple(list(compat.string_types) + [ABCSeries, np.ndarray, Index, list]) if isinstance(slice_, kinds): slice_ = IndexSlice[:, slice_]
grad_shared = sharedX(zv) z_shared = sharedX(zv)
self.assertTrue(mock_connections.close_all.called)
self.request.session[LANGUAGE_SESSION_KEY] = 'en' set_user_preference(self.user, LANGUAGE_KEY, 'eo') self.middleware.process_request(self.request)
pca = PCA(n_components=2, whiten=True, svd_solver=solver) pca.fit(X) ll2 = pca.score(X) assert_true(ll1 > ll2)
self.certificates_section.remove_first_certificate_invalidation()
clf = LassoCV()
import gtk gtkInstalled = True
self.assertEqual(Celebrity.objects.count(), num_celebs)
self.browser.execute_script("jQuery.fx.off = true;")
_check_is_partition([row_levels, column_levels], range(ss.index.nlevels))
dropped = self.index.drop(index, errors='ignore') expected = self.index[[0, 1, 2, 3, 4, 5]] self.assert_index_equal(dropped, expected)
res = cat.reorder_categories(["c", "b", "a"], inplace=True) self.assertIsNone(res) self.assert_categorical_equal(cat, new)
self.assertEqual(initial_data["PhotoIDKey"], reverification_data["PhotoIDKey"])
self.teams_page.verify_my_team_count(expected_number_of_teams)
self.assertFalse(user.badgeassertion_set.all())
df = self.tsframe.copy() df['date'] = Timestamp('20130101')
clf = GradientBoostingRegressor(n_estimators=10, random_state=1) clf.fit(boston.data, boston.target)
disks = _get_host_ssds(host_ref) + _get_host_non_ssds(host_ref)
self.assertEqual( self.run_function( 'git.rev_parse', [self.repo, 'HEAD'], opts='--abbrev-ref' ), 'master' )
import salt.client import salt.loader import salt.runner import salt.utils import salt.utils.event import salt.utils.http import salt.utils.slack
return 'list-display-sketch'
'ratelimitbackend.middleware.RateLimitMiddleware', 'edxmako.middleware.MakoMiddleware',
#'preamble': '',
self.assertQuerysetEqual( self.get_ordered_articles()[5:], ["<Article: Article 6>", "<Article: Article 7>"] )
from __future__ import absolute_import import os import tempfile
self.video.wait_for_state('pause')
self.assertFalse(hasattr(s3_copy.selfref, 'touched')) self.assertEqual(s3_copy.selfref, s2)
if do_assemble: __salt__['raid.assemble'](name, devices, **kwargs) else: __salt__['raid.create'](name, level, devices, **kwargs)
cs_clone = CsOutput('GEOSCoordSeq_clone', [CS_PTR]) create_cs = CsOutput('GEOSCoordSeq_create', [c_uint, c_uint]) get_cs = CsOutput('GEOSGeom_getCoordSeq', [GEOM_PTR])
non_eligible_statuses = ['failed', 'declined']
uname = _get_unicode_name(name) if not len(uname): raise ValueError("Empty table or column name specified")
for num, item in enumerate(extra_data, start=1): key = u"merchant_defined_data{num}".format(num=num) params[key] = item
CELERY_RESULT_BACKEND = 'djcelery.backends.cache:CacheBackend'
import salt.utils
if connection.features.supports_transform: with self.assertRaises(LayerMapError): LayerMapping(County, co_shp, co_mapping)
i = len(os.path.commonprefix([start_list, path_list]))
return self._get_ax_layer(self.axes[0], primary=False)
from __future__ import absolute_import
self._pydsl_render_stack = []
self.assertEqual(user_info["version"], settings.EDXMKTG_USER_INFO_COOKIE_VERSION)
return 0.5 - scores
from salt.log.setup import LOG_LEVELS from salt.log.mixins import NewStyleClassMixIn import salt.utils.network
self.problem_section = ItemFactory.create(parent_location=chapter.location, category='sequential', metadata={'graded': True, 'format': 'Homework'}, display_name=self.TEST_SECTION_NAME)
log = logging.getLogger(__name__)
for c in categories: self.assertIn(c.pk, d['categories']) self.assertIsInstance(d['categories'], list)
ret = ava.difference(ena)
self.assertEqual(test, expected)
from __future__ import absolute_import
gs = DataReader("GS", "yahoo")
for index, field in enumerate(self.related.field.local_related_fields): setattr(value, field.attname, related_pk[index])
queryset = User.objects.filter( preferences__key=NOTIFICATION_PREF_KEY ).select_related( "profile" ).prefetch_related( "preferences", "courseenrollment_set", "course_groups", "roles__permissions" )
res = self._combine_const(other, func, raise_on_error=False) return res.fillna(True).astype(bool)
connection.timezone del connection.timezone connection.timezone_name del connection.timezone_name
xblock_desc.publish = "not-applicable"
request_params.pop('IdentityPoolName', None) r = __salt__['boto_cognitoidentity.update_identity_pool'](**request_params)
from salt.states import npm
from __future__ import unicode_literals
for key, val in six.iteritems(params): params[key] = str(val)
from __future__ import division import numpy as np import scipy.sparse as sp import operator import array
if token_privileges[privilege] == privilege_attrs: log.debug( 'The requested privilege {0} is already in the ' 'requested state.'.format(privilege_name) ) return True
v.fit(["to be or not to be", "and me too", "and so do you"]) assert False, "we shouldn't get here"
from __future__ import absolute_import
from __future__ import absolute_import
p_idx = rng.randint(num_p)
self._assert_cert_status(self.courses[0].id, self.user, CertificateStatuses.notpassing) self._assert_cert_status(self.courses[1].id, self.user, other_status)
from __future__ import unicode_literals
major_axis = lrange(70000) minor_axis = lrange(10)
import stat import os import logging
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
self.assertIn('test error', result['success'])
result = o.unique() self.assert_numpy_array_equal(result[1:], values[2:])
X = [[0], [0]] Y = [[1], [2]] D = paired_euclidean_distances(X, Y) assert_array_almost_equal(D, [1., 2.])
enetcv_constrained = ElasticNetCV(n_alphas=3, eps=1e-1, max_iter=max_iter, cv=2, positive=True, n_jobs=1) enetcv_constrained.fit(X, y) assert_true(min(enetcv_constrained.coef_) >= 0)
PRIVATE_VISIBILITY = 'private'
TOKEN_RESPONSE_DATA = None
for layer, state in safe_izip(dbm.hidden_layers, H_hat): upward_state = layer.upward_state(state) layer.get_output_space().validate(upward_state)
if not SQLALCHEMY_INSTALLED: raise nose.SkipTest('SQLAlchemy not installed')
if isinstance(other, np.datetime64): other = Timestamp(other) vzone = tslib.get_timezone(getattr(other, 'tzinfo', '__no_tz__')) return zzone == vzone
if cls.test_course_key not in [c.id for c in courses]: import_course_from_xml( store, ModuleStoreEnum.UserID.mgmt_command, DATA_DIR, XML_COURSE_DIRS, create_if_not_present=True )
n_trials = 10000
for app in ENV_TOKENS.get('ADDL_INSTALLED_APPS', []): INSTALLED_APPS += (app,)
return self.country_access_rules(request.user, ip_address, request.path)
if 'sysctl.default_config' in __salt__: config = __salt__['sysctl.default_config']() else: config = '/etc/sysctl.conf'
cdf_series = cdf.col1 self.assertTrue(isinstance(cdf_series, CustomSeries)) self.assertEqual(cdf_series.custom_series_function(), 'OK')
salt '*' win_update.list_updates
dt = X.dtype if output_pixel_vals: dt = 'uint8' out_array = np.zeros(out_shape, dtype=dt)
if statii[dev]['cache'] == cuuid: count += 1
import_course_from_xml(self.store, self.user.id, root_dir, create_if_not_present=True)
nested_ipt = mapping.nest(ipt)
self.seq_1_vert_1_handle = 2 self.seq_1_vert_2_handle = 3 self.chap_1_seq_2_handle = 4
partitions = self._get_partition_info() self.assertEqual(len(partitions), 1) self.assertEqual(partitions[0]["scheme"], "cohort")
pass
if not exceptions: return frames
from __future__ import absolute_import
S, rows, cols = make_checkerboard((30, 30), 3, noise=0.5, random_state=0)
df = DataFrame(np.random.random_sample((20, 5)), columns=list('ABCDE')) expected = df
with warnings.catch_warnings(record=True) as warns: warnings.simplefilter('always', RemovedInDjango20Warning)
if sql_list and not inhibit_post_migrate: emit_post_migrate_signal(verbosity, interactive, database)
self.assertListEqual(model_classes, [LazyA, LazyB, LazyB, LazyC, LazyA])
from django.contrib.gis.utils import ogrinspect shp_file = 'data/mapping_hacks/world_borders.shp' model_name = 'WorldBorders'
include_expired = not is_active if is_active is not None else False
if '::' not in ip_str and ip_str.count(':') != 7: if ip_str.count('.') != 3: return False
warnings.filterwarnings(
parsed_referer = urlparse(referer) if parsed_referer.netloc in ['', domain] and parsed_referer.path == uri: return True
try: import Crypto
response = self.client.get('/raises400/') self.assertContains(response, '<div class="context" id="', status_code=400)
link_cohort_to_partition_group( test_cohort, self.user_partition.id, self.groups[0].id, ) self.assert_student_in_group(self.groups[0])
regular_values = np.linspace(0, 256, n_clusters + 1) regular_labels = np.searchsorted(regular_values, face) - 1
with restrict_course(self.course.id): response = self.client.get( url, HTTP_X_FORWARDED_FOR=ip_address, REMOTE_ADDR=ip_address ) self.assertEqual(response.status_code, 200)
import salt.utils.cloud
ccx = CcxFactory(course_id=self.course.id, coach=self.coach) ccx_locator = CCXLocator.from_course_locator(self.course.id, unicode(ccx.id))
return csv.reader(f, dialect=dialect, **kwds)
wua_session = win32com.client.Dispatch('Microsoft.Update.Session')
else:
return dict(_typ=self._typ, _subtyp=self._subtyp, _data=self._data, fill_value=self.fill_value, name=self.name)
site.delete() with self.assertRaises(ObjectDoesNotExist): get_current_site(request)
self.assertQuerysetEqual( baseqs.filter(birthdate__testyear__lt=2012), [self.a1], lambda x: x)
self._orig = data self._freeze()
self = object.__new__(cls) self._constructor_args = (args, kwargs) return self
salt '*' vsphere.get_coredump_network_config my.vcenter.location root bad-password \ esxi_hosts='[esxi-1.host.com, esxi-2.host.com]'
if lcd.kind == 'u': return np.dtype('int%s' % (lcd.itemsize * 8 * 2)) return lcd
lgdal = CDLL(lib_path)
import scipy.sparse as sp import numpy as np
default="images_course_image.jpg"
wua_session = win32com.client.Dispatch('Microsoft.Update.Session')
attach_volume = volume_attach
C = np.dot(A.T, A) C_ = fast_dot(A.T, A) assert_almost_equal(C, C_, decimal=5)
X_sparse_pruned = sparse.csr_matrix(X_dense)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
@python_2_unicode_compatible class SelfRefer(models.Model): name = models.CharField(max_length=10) references = models.ManyToManyField('self') related = models.ManyToManyField('self')
world.visit('/') assert_in(uname, world.css_text('span.account-username', timeout=10))
if not using_ip_for_id and 'append_domain' in opts: opts['id'] = _append_domain(opts) if append_master: opts['id'] += '_master'
class BinaryTree(models.Model): name = models.CharField(max_length=100) parent = models.ForeignKey('self', models.SET_NULL, null=True, blank=True)
blocks = df.as_blocks() for dtype, _df in blocks.items(): if column in _df: _df.ix[:, column] = _df[column] + 1
from __future__ import absolute_import import sys import copy import types
dict(safe_zip(range(9), numpy.arange(9) * 5 + 30)),
from __future__ import unicode_literals
tm.assert_almost_equal(sparse_result.default_fill_value, frame.default_fill_value) tm.assert_almost_equal(sparse_result['A'].fill_value, frame['A'].fill_value)
old_inertia_csr, incremental_diff_csr = _mini_batch_step( X_mb_csr, x_mb_squared_norms_csr, new_centers_csr, counts_csr, buffer_csr, 1, None, random_reassign=False) assert_greater(old_inertia_csr, 0.0)
match_type = match_type.group()[6:-1].lower() if match_type in html_types: context_type = 'html' elif match_type not in javascript_types: context_type = 'unknown'
from __future__ import absolute_import import os import threading
if value.ndim == 0: value = tslib.iNaT
import salt.utils
latest_timestamp = datetime.strptime( datetime.strftime(latest_timestamp, dateformat), dateformat ).replace(tzinfo=UTC)
create_kwargs = salt.utils.clean_kwargs(**copy.deepcopy(kwargs)) send_signal = create_kwargs.pop('send_signal', False)
result.update(_merge_data(summary_data, fault_data))
SCORE_CHANGED.send( sender=None, points_possible=event['max_value'], points_earned=event['value'], user_id=user_id, course_id=unicode(course_id), usage_id=unicode(descriptor.location) )
values = self._data.iget(i)
access_key_id, secret_access_key, token = creds(provider)
import datetime import json import ddt import mock from nose.plugins.attrib import attr from pytz import UTC from django.utils.timezone import UTC as django_utc
try: SpatialRefSys.objects.using(database).get(srid=srs.srid) except SpatialRefSys.DoesNotExist: SpatialRefSys.objects.using(database).create(**kwargs)
config = DonationConfiguration.current() config.enabled = True config.save()
click_css(self, 'a.delete-button', source_index, require_notification=False) confirm_prompt(self)
import salt.ext.six as six
different = df2.copy() different.columns = df2.columns[::-1] self.assertFalse(df1.equals(different))
FEATURES['ENABLE_SPECIAL_EXAMS'] = True
if backward: break else: available = True continue
if ret['changes']: sys.modules[ __salt__['test.ping'].__module__ ].__context__.pop('pkg._avail', None)
incremental_count = batch.shape[0] sample_count = batch.shape[0]
script_url = _slashes_re.sub(b'/', script_url)
import salt.utils from tests import integration
mod = include('a-pydsl-sls')
expected_y = y.mf_update( state_below = v.upward_state(v_state))
if 'name' in todelete: raise SaltInvocationError('The repo name cannot be deleted')
clf = svm.NuSVC(nu=0.0) assert_raises(ValueError, clf.fit, X, Y)
log.error('Received local command remotely! Ignoring: {0}'.format(msg)) return
for a in self.non_index_axes: obj = _reindex_axis(obj, a[0], a[1])
transaction.commit()
self.assertEqual( ImportTestCase.date.to_json(ImportTestCase.date.from_json(course_due)), child.xblock_kvs.inherited_settings['due'] )
fgroups = hgroups filters_per_group = hcolors_per_group
reviewing_user = models.ForeignKey( User, db_index=True, default=None, null=True, related_name="photo_verifications_reviewed" )
cat = [False, False, False] _check_one_hot(X, X2, cat, 3)
__virtualname__ = 'json'
from __future__ import absolute_import import time import json import pprint import logging import hmac import uuid import sys import base64 from hashlib import sha1
env['PATH_INFO'] = path.decode(ISO_8859_1) if six.PY3 else path
self.assert_account_settings_context_looks_correct(account_settings_context(request), user, linked=True) self.assert_social_auth_exists_for_user(request.user, strategy)
with salt.utils.fopen(path_test, 'r') as fp_test_: self.assertTrue(fp_test_.read().startswith('en_US.UTF-8'))
self.video.a11y_audit.config.set_scope( include=["div.video"] ) self.video.a11y_audit.check_for_accessibility_errors()
CourseEnrollment.enroll(user, course_id) self.assertTrue(CourseEnrollment.is_enrolled(user, course_id)) self.assert_enrollment_event_was_emitted(user, course_id)
self.assertIn('Welcome to edX.', self.video.captions_text)
if hasattr(self, 'scale_'): del self.scale_ del self.n_samples_seen_ del self.max_abs_
context = get_ccx_creation_dict(course) messages.error(request, context['use_ccx_con_error_message']) return render_to_response('ccx/coach_dashboard.html', context)
HIDDEN_SIZE = 1000 SALT_PEPPER_NOISE = 0.4 GAUSSIAN_NOISE = 0.5
assert_bad({})
delayed_grade_func = lambda: self._send_grade_response( callback_url, xqueue_header, self.post_dict['xqueue_body'] )
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
if _np_version_under1p9: raise nose.SkipTest("Numpy version is under 1.9")
app.add_config_value('ipython_mplbackend', 'agg', 'env')
d = b.values.astype('M8[us]').astype(object)
response = self.client.get(self.path) self.assertEqual(response.status_code, 403)
kwargs[field_name] = val
opts['grains'] = salt.loader.grains(opts) super(SMinion, self).__init__(opts)
override_field_for_ccx(ccx, course, 'max_student_enrollments_allowed', settings.CCX_MAX_STUDENTS_ALLOWED)
delete_course_and_groups(course_key, self.user.id)
try: msg = e.message except AttributeError: msg = compat.text_type(e) raise UndefinedVariableError(msg)
try: os.unlink(filename_numpy) except: pass try: os.unlink(filename_larry) except: pass
from __future__ import absolute_import import logging import os import subprocess
from __future__ import unicode_literals
request = RequestFactory().get('/')
n_estimators_values = [1, 5, 10, 20, 30, 40, 50] accuracies_trees = np.zeros(len(n_estimators_values), dtype=float)
from dateutil.parser import _timelex
func_name = inspect.stack()[1][3] names = next(six.itervalues(yaml.load(getattr(self, func_name).__doc__)))
import salt.ext.six as six
obj = (klass, ('HASHED', obj.dtype, obj.shape, obj.strides))
fd_, adminfile = salt.utils.mkstemp(prefix="salt-", close_fd=False)
self.assertFalse(self.video.is_menu_present('download_transcript'))
self.assertTrue(hasattr(r, 'streaming_content'))
import salt.utils
results.extend([')' for item in unmatched])
exc_info_on_loglevel=logging.DEBUG
from django.contrib.gis.utils import LayerMapping
self._update_feature_log_prob() self._update_class_log_prior(class_prior=class_prior) return self
out.insert(0, head) (head, tail) = os.path.split(head)
self.assertEqual(self.user_login_failed, [{'password': '********************', 'username': 'test'}])
after_created = attempt.created_at + timedelta(seconds=1) query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(after_created, query) self.assertEqual(result, attempt)
monitoring_dataset = DenseDesignMatrix(X=X)
self.install_collection = win32com.client.Dispatch('Microsoft.Update.UpdateColl')
batch_inertia /= model.batch_size centers_squared_diff /= model.batch_size
self.assertEqual( self.run_function('shadow.get_login_failed_count', [TEST_USER]), '0')
self._close()
else:
return comb(n, 2, exact=1)
from __future__ import unicode_literals
if 'width' not in ds_input or 'height' not in ds_input: raise GDALException('Specify width and height attributes for JSON or dict input.')
iris = load_iris() scaler = StandardScaler() km = KMeans(random_state=0)
ManualEnrollmentAudit.create_manual_enrollment_audit( manual_enrollment_audit.enrolled_by, student.email, ALLOWEDTOENROLL_TO_ENROLLED, manual_enrollment_audit.reason, enrollment )
self._send_pub(payload)
([[], []], 0 ),
NON_VERIFIED_MODES = [HONOR, AUDIT, NO_ID_PROFESSIONAL_MODE]
for tt in set([str, compat.text_type]): result = df.astype(tt)
world.visit('/') signin_css = 'a.action-signin' assert world.is_css_present(signin_css)
app.add_domain(NumpyPythonDomain) app.add_domain(NumpyCDomain)
'lang_pref.middleware.LanguagePreferenceMiddleware',
for logger in loggers: logger.setLevel(logging.NOTSET) logger.removeHandler(import_log_handler)
mapped = dict(zip(unique, colors)) return [mapped[v] for v in series.values]
return None
assert_raises(ValueError, ir.predict, [min(x) - 10, max(x) + 10])
ret = self.run_run_plus(fun='fileserver.envs', args=['backend="roots"']) self.assertIsInstance(ret['fun'], list)
XBLOCK_FIELD_DATA_WRAPPERS = ()
self.cols = cols
trimmed_something = True while trimmed_something: trimmed_something = False
test_cov = empirical_covariance( X_test - self.location_, assume_centered=True) res = log_likelihood(test_cov, self.get_precision())
salt '*' vsphere.set_service_policy my.esxi.host root bad-password 'ntpd' 'automatic'
try: user = User.objects.get(id=user_id) except ObjectDoesNotExist: return None
k3 = 0.5**2 * RationalQuadratic(length_scale=1.0, alpha=1.0) k4 = 0.1**2 * RBF(length_scale=0.1) \ + WhiteKernel(noise_level=0.1**2,
with self.assertRaises(AttributeError): setattr(self.a, 'full_name', 'Paul McCartney')
self.assert_register_response_in_pipeline_looks_correct( student_views.register_user(strategy.request), pipeline.get(request)['kwargs'])
n = 23149 X_test = X[:n, :] y_test = y[:n] X = X[n:, :] y = y[n:]
self.assertFalse(res_json['success'])
def __or__(self, other): "Returns the union of the two geometries." return self.union(other)
dict(safe_zip(range(0, 36, 2), numpy.arange(0, 360, 20))),
if user: os.chown(ssh_dir, uinfo['uid'], uinfo['gid']) os.chmod(ssh_dir, 0o700)
from salt.modules import npm from salt.exceptions import CommandExecutionError import json
self.assertAlmostEqual(feat.get('Length'), float(istate.length), 2)
self.set_state_from_lcp() return response
pass
self.user_partition.scheme.current_group = groups[1] group2_id = self.partition_service.get_user_group_id_for_partition(user_partition_id) self.assertEqual(group2_id, groups[1].id)
xmodule.save() return xmodule
rendered = "0.post%d" % pieces["distance"] if pieces["dirty"]: rendered += ".dev0"
return None
for sql in self.geometry_sql: self.execute(sql) self.geometry_sql = []
receiver = DatabaseReceiver() signals.m2m_changed.connect(receiver=receiver)
import json
X = check_array(X, dtype=np.float64, order='F', copy=self.copy_X and self.fit_intercept) y = check_array(y, dtype=np.float64, ensure_2d=False)
__virtualname__ = 'system'
try: data_root = path(settings.GITHUB_REPO_ROOT) subdir = base64.urlsafe_b64encode(repr(courselike_key)) course_dir = data_root / subdir filename = request.FILES['course-data'].name
act_func = None if i == 0: act_func = self.aes[0].act_dec else: act_func = self.aes[i - 1].act_enc
if self[0] <= other[0]: left, right = self, other else: left, right = other, self
config.enabled = False config.save() self.assertFalse(VerifiedTrackCohortedCourse.is_verified_track_cohort_enabled(course_key))
problem = new_loncapa_problem(xml_str)
dense[4:, :]
if os.path.exists(venv_path): shutil.rmtree(venv_path) if os.path.exists(requirements_file_path): os.unlink(requirements_file_path) raise
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
parent_msg.attach(content=child_s, mimetype='message/rfc822') parent_s = parent_msg.message().as_string()
from __future__ import absolute_import
return service
url(r'^search/', include('search.urls')),
self.cd['foo'] = 'global'
kwargs['public_key'] = get_public_key(kwargs['public_key']).replace('\n', '')
super(ExponentialLoss, self).__init__(1)
return 'present'
else: final_codes ,= set(codebook.keys())
assert_false("copyright" in vocabulary)
import salt.search import salt.ext.six as six
AutoAuthPage(self.browser, course_id=self.course_id).visit()
self._create_test_file( 'test_include.xml', '<test>Test include</test>' )
m = re.search(br'<a href="([^"]*)"[^>]* id="lookup_id_defendant0"', response.content)
saltenv = env
parts = [os.path.normpath(p) for p in parts]
delattr(tp, self.name) return result
from __future__ import absolute_import
if not inspect.isclass(value) and hasattr(value, 'contribute_to_class'): value.contribute_to_class(cls, name) else: setattr(cls, name, value)
atomic = True
return
data = {'changed': False, 'backend': 'gitfs'}
type_in_codemirror(self, 0, content)
X = X[:, np.newaxis]
chapter = self.store.get_item(self.chapter_loc) self.assertIn(self.seq_loc, chapter.children)
else: response.content = msg
from __future__ import absolute_import
scaler.fit_transform(X_2d)
)
self.assertEqual( self.run_function('xattr.delete', [TEST_FILE, 'patrick']), 'ERROR: Attribute not found: patrick')
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandNotFoundError
if isinstance(self.is_copy, string_types): t = self.is_copy
def geometry_columns(self): from django.contrib.gis.db.backends.spatialite.models import SpatialiteGeometryColumns return SpatialiteGeometryColumns
w = clf.coef_[0] a = -w[0] / w[1]
self.assertRaises(TypeError, RangeIndex, '0', '1', '2')
from __future__ import unicode_literals
if not self.as_index: key_index = None
assert_true(X_scaled is not X)
import salt.minion import salt.fileclient import salt.utils import salt.utils.url import salt.crypt import salt.transport from salt.exceptions import CommandExecutionError
new_flags.sort(cmp=lambda x, y: cmp(x.lstrip('-'), y.lstrip('-')))
Number.objects.filter(pk=self.n.pk).update(integer=15 * F('integer'), float=42.7 * F('float'))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
sequential_open_distrib = {} for row in db_query: row_loc = course_id.make_usage_key_from_deprecated_string(row['module_state_key']) sequential_open_distrib[row_loc] = row['count_sequential']
self.assertContains(response, '<td class="field-url">') self.assertContains(response, '<td class="field-posted">')
class PortItem(IntegerItem):
self.modules = defaultdict(dict) self.definitions = {} self.definitions_in_db = set() self.course_key = None
self.mock_programs_api() self.mock_credentials_api(self.user, reset_url=False) actual = get_programs_credentials(self.user) expected = self.expected_credentials_display_data()
where = "index <= '%s'" % end_dt results = [s for s in store.select( 'df', where=where, chunksize=chunksize)]
out_file = os.path.join(conn['formula_path'], new_name)
import salt.utils
if settings.FEATURES.get("ENABLE_LTI_PROVIDER"): urlpatterns += ( url(r'^lti_provider/', include('lti_provider.urls')), )
import os import stat
if not filter_tabs: filtered_list.remove("tabs")
_response = _request("GET", options['url'] + "_all_dbs") if options['db'] not in _response:
import hashlib import random
'log_level_logfile': str,
self.assertContains(response, 'MAGIC', status_code=404)
ws.close()
y = np.linspace(0, resolution - 1, resolution) first_quarter = y < resolution / 4 y[first_quarter] = 3. y[np.logical_not(first_quarter)] = -1.
self.define_randomized_custom_response_problem(problem_url_name, redefine=True) self.render_problem('u1', problem_url_name) self.check_state('u1', descriptor, 1, 1, 2)
urlpatterns += patterns( '',
CourseFinanceAdminRole(self.course.id).add_users(self.instructor)
self.set_up_books(1)
x_weights = np.dot(X.T, y_score) / np.dot(y_score.T, y_score)
from __future__ import unicode_literals
for original in self.objs: if isinstance(original, Index):
delta = delta + datetime.timedelta(seconds=1) expires = None max_age = max(0, delta.days * 86400 + delta.seconds)
for this_X in (X, X_csr): mb_k_means = MiniBatchKMeans(n_clusters=n_clusters, batch_size=100, random_state=42) mb_k_means.fit(this_X)
pieces = modulename.split('.') str_e = str(e) found = True in [piece.find(str(e)) != -1 for piece in pieces]
self.url = reverse_course_url('tabs_handler', self.course.id)
task_folder = task_service.GetFolder(location)
comps[1] = comps[1].lstrip('"').rstrip('"')
member.name = '{0}.sls.orig'.format(package) out_path = conn['pillar_path']
mylocalrepo: git.config_unset: - name: foo.bar - all: True
info_log.assert_called_with( u"user already exists with username '%s' and email '%s'", 'test_student_1', 'test_student@example.com' )
from .overrides import get_override_for_ccx return get_override_for_ccx(self, self.course, 'due')
from __future__ import absolute_import import copy import re import os import logging
if not (self_is_mi and other_is_mi):
new_mgr = selfsorted._data.reshape_nd(axes=new_axes, labels=[major_labels, minor_labels], shape=shape, ref_items=selfsorted.columns)
self.assertEqual(cl.result_count, 1)
if key is not None:
ref = GEOSGeometry(wkt) g1 = wkt_r.read(wkt.encode()) g2 = wkt_r.read(wkt)
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
class BadForm(ArticleForm, BaseCategoryForm): pass
return
doublecolon_start = index
file = SimpleUploadedFile("mode_test.txt", b"content") self.assertFalse(hasattr(file, 'mode')) gzip.GzipFile(fileobj=file)
assert_equal(neighbors.shape[1], n_neighbors)
check_entrance_exam_problems_for_rescoring(usage_key)
def get_xml_editable_fields(self, field_data): runtime = get_test_descriptor_system() return runtime.construct_xblock_from_class( XmlDescriptor, scope_ids=Mock(), field_data=field_data, ).editable_metadata_fields
def f(): return 42
if self.read_committed is True: if connection.vendor == 'mysql': cursor = connection.cursor() cursor.execute("SET TRANSACTION ISOLATION LEVEL READ COMMITTED")
return Bunch(data=pairs.reshape(len(pairs), -1), pairs=pairs, target=target, target_names=target_names, DESCR="'%s' segment of the LFW pairs dataset" % subset)
old = list_pkgs(saltenv=saltenv)
path = os.path.expanduser(path)
return launchctl('enable', 'system/{0}'.format(label), runas=runas)
with tm.assertRaisesRegexp(ValueError, expErrMsg): q = Series(self.ts, dtype=object).quantile(0.7, interpolation='higher')
from salt.utils import format_call from salt.exceptions import SaltInvocationError
self.assertNotContains(response, '<h2>Inner2s</h2>') self.assertNotContains(response, 'Add another Inner2') self.assertNotContains(response, 'id="id_inner2_set-TOTAL_FORMS"')
import argparse import gc import logging import os
assert_true(score_auc < 1.0) assert_true(score_accuracy < 1.0) assert_not_equal(score_auc, score_accuracy)
GRADES_DOWNLOAD_ROUTING_KEY = HIGH_MEM_QUEUE
ModeCreationPage( self.browser, self.course_id, mode_slug=u'verified', mode_display_name=u'Verified Certificate', min_price=10, suggested_prices='10,20' ).visit()
with self.assertRaises(TypeError): command.run_from_argv(['', ''])
assert not kwargs self.operations = args[0]
EmptyPromise( lambda: cohort_name == cohort_management_page.get_selected_cohort(), "Waiting for new cohort" ).fulfill() cohort_management_page.add_students_to_selected_cohort([student])
import salt.utils
if isinstance(val, np.ndarray): if val.ndim != 0: raise ValueError( "invalid ndarray passed to _infer_dtype_from_scalar")
z = mask[:, None] * z + (1 - mask[:, None]) * state_before
bandwidth = estimate_bandwidth(X, n_samples=200) assert_true(0.9 <= bandwidth <= 1.5)
self.assertOLXIsDraftOnly(block_list_publish) self.assertOLXIsDraftOnly(block_list_untouched)
self.all_verticals = [] self.all_units = []
rng = np.random.RandomState([2012, 10, 9]) batch_size = 5 rows = 10 cols = 9 channels = 3 filter_rows = 4 filter_cols = filter_rows + 1 num_filters = 6
if guid is None: return "No GUID Specified"
ip_str = _explode_shorthand_ip_string(ip_str)
import salt.ext.six as six
num_vis = rng.randint(1,11) n_classes = rng.randint(1, 11)
import salt.utils import salt.output import salt.exceptions
ret['retcode'] = 1 return ret
with self.assertRaises(PageNotFoundError): self.get_comment_list(thread, endorsed=True, page=2, page_size=10)
ls = LineString(((150.902, -34.4245), (150.87, -34.5789)), srid=4326)
if hasattr(instance, '_changed_fields'): del instance._changed_fields
problem_item.display_name = 'Problem_Item1' problem_item = self.store.update_item(problem_item, self.user_id) self.assertFalse(self.store.has_published_version(problem_item))
language = request.GET.get('language', translation.get_language())
np.testing.assert_equal(list(KFold(3).split(X)), list(cv.split(X)))
self._add_block(self._block_relations, root_block_usage_key)
session_status = request.session.setdefault("import_status", {}) courselike_string = unicode(courselike_key) + filename _save_request_status(request, courselike_string, 0)
_, created = ed.books.get_or_create(name="Ed's Recipes", publisher=p) self.assertTrue(created)
import logging try: import json5 as json HAS_JSON5 = True except ImportError: HAS_JSON5 = False
try: v = tslib.array_to_datetime(v, errors='raise') except ValueError:
cls._ix = None
for field_name in ["display_name", "weight"]: self.problem_in_course.fields[field_name].delete_from(self.problem_in_course)
__virtualname__ = 'syslog'
source_lines = list(islice(source_file_obj, first_line - 1, None))
cls.e2 = ExtraInfo.objects.create(info='e2', note=n2, value=41) e1 = ExtraInfo.objects.create(info='e1', note=cls.n1, value=42)
return ExtType(0, v.tostring())
assert_series_equal(s10_2, r10) assert_series_equal(s10_2, r10_2) assert_series_equal(s10_2, rl)
result = obj.rename(**{axis: arg}) expected = obj.copy() setattr(expected, axis, list('abcd')) self._compare(result, expected)
html = module.get_problem_html(encapsulate=False)
salt.utils.files.process_read_exception(exc, key)
apps = Apps(["migrations"])
CHAPTER = 'Test Section' SECTION = 'Test Subsection' EXPECTED_SCORES = [(0, 3), (0, 1)]
return render(request, 'context_processors/auth_attrs_test_access.html', {'session_accessed': request.session.accessed})
self.assertEqual(AwardNote.objects.count(), 0)
a = "this is \xe0 test" expected = 'this is a test' assert_equal(strip_accents_unicode(a), expected)
grid_search = GridSearchCV(pipeline, parameters, n_jobs=-1, verbose=1)
df = self.frame.copy() df = df.set_index(['A', 'B'])
msg += _('Email address must end in {domain}').format(domain="@{0}".format(email_domain)) return msg
self.assertRaises(ValueError, s.dropna, axis=1)
from __future__ import unicode_literals
list_check = lambda x: isinstance(x, list) clf = CheckingClassifier(check_X=list_check) scores = cross_val_score(clf, X.tolist(), y2.tolist())
if 'driver' not in ds_input: ds_input['driver'] = self.driver.name
actual = grouped_df.filter(lambda x: len(x) > 1) expected = df.iloc[expected_indexes] assert_frame_equal(actual, expected)
account_settings = get_account_settings(self.default_request, self.different_user.username) self.assertNotIn("email", account_settings)
result = df.set_index(['a', 'x']) repr(result)
from theano.tensor.nnet.conv import conv2d, ConvOp
return {'result': ignore_already_stopped, 'comment': 'Container \'{0}\' absent'.format(name)}
component = self.draft_store.get_item(location) self.assertEqual(component.published_on, published_date) self.assertEqual(component.published_by, published_by)
return ax
pass
assert len(state) == 2 assert isinstance(coeffs, float) _, state = state state = [state] coeffs = [coeffs]
if '.' in high[name]: comps = high[name].split('.') high[name] = { comps[0]: [comps[1]] } continue
X = np.cast['float32'](train['X'])
self.assertInHTML( '<input type="text" name="products_delivered" ' 'value="12.000" id="id_products_delivered" required />', form6.as_ul() )
self.assertEqual(result1.columns.freqstr, 'AS-JAN') self.assertEqual(result2.columns.freqstr, 'AS-JAN')
response = self.client.get('/reset/123456/1-1/') self.assertContains(response, "The password reset link was invalid")
baseqs.filter(age__mult3__gte=models.F('average_rating')), [a2, a3], lambda x: x)
import cgi import yaml import tornado.httpserver import tornado.ioloop import tornado.web import tornado.gen from tornado.concurrent import Future from zmq.eventloop import ioloop import salt.ext.six as six
from __future__ import absolute_import import copy import os import collections import logging import tornado.gen
s = Series([-1, 0, 1])
clf = ForestClassifier(class_weight=[{-1: 0.5, 1: 1.}], random_state=0) assert_raises(ValueError, clf.fit, X, _y)
log = logging.getLogger(__name__)
n_splits = int(n_features / block_size) X2 = X ** 2 emp_cov_trace = np.sum(X2, axis=0) / n_samples mu = np.sum(emp_cov_trace) / n_features
self.assertFalse(has_expanded_repr(df10)) self.assertTrue(has_vertically_truncated_repr(df10))
out_size = get_encoded_size(img_h, img_w, rings) output = numpy.zeros((batch_size, out_size * chans))
self.xml_data = "course info 463139"
msg = 'Failed to verify package(s)' if out['stderr']: msg += ': {0}'.format(out['stderr']) raise CommandExecutionError(msg)
potential_clashes = rel_opts.fields + rel_opts.many_to_many for clash_field in potential_clashes:
DECIMAL_SEPARATOR = '.' THOUSAND_SEPARATOR = ','
states_dir = os.path.abspath(self.options.states_dir) self.config['states_dirs'] = [states_dir]
self.assertFalse(CourseInstructorRole(self.course.id).has_user(nonstaff_user)) self.assertTrue(CourseStaffRole(self.course.id).has_user(nonstaff_user))
import salt.utils from salt.exceptions import CommandExecutionError
about = branding_api.get_about_url() if about != branding_api.EMPTY_URL: data.update({'company_about_url': about})
import salt.utils from salt.exceptions import CommandExecutionError
module.system.render_template = Mock(return_value="<div>Test Template HTML</div>")
if not isinstance(data, (list, tuple)): data = list(data)
return super(SplitBulkWriteMixin, self)._get_bulk_ops_record( course_key.replace(branch=None, version_guid=None), ignore_case )
redirect_url = embargo_api.redirect_if_blocked( course_key, user=request.user, ip_address=get_ip(request), url=request.path ) if redirect_url: return redirect(redirect_url)
if params.get('decision') == u'DECLINE': raise CCProcessorUserDeclined()
set_has_profile_image(username, True, _make_upload_dt())
self.bracketname = '[%-17s]' % self.name self.bracketlevel = '[%-8s]' % self.levelname self.bracketprocess = '[%5s]' % self.process
self.assertEqual(exam['hide_after_due'], sequence.hide_after_due)
import logging
a.save() self.assertIsNotNone(a.id) self.assertEqual(Article.objects.all().count(), 1)
dive = Book.objects.using('other').get(title='Dive into Python')
cmd += '{0}'.format(pkg2inst)
wrapper.__module__ = getattr(user_function, '__module__') wrapper.__doc__ = getattr(user_function, '__doc__') wrapper.__name__ = getattr(user_function, '__name__') return wrapper
response = self.client.get(changelist_url, {'notarealfield__whatever': '5'}) self.assertRedirects(response, '%s?e=1' % changelist_url)
store1 = HDFStore(path) store2 = HDFStore(path)
from __future__ import absolute_import import json
BASE_URL = os.environ.get('test_url', 'http://localhost:8003')
REPO_ROOT = path(__file__).abspath().parent.parent.parent
__virtualname__ = 'yaml'
assert_true(world.css_has_value(css, date_or_time))
except Exception: log.critical('Unexpected error while polling master events', exc_info=True) return None
config = self.state.document.settings.env.config
from __future__ import absolute_import import re import logging
DOTS = ['&middot;', '*', '\u2022', '&#149;', '&bull;', '&#8226;']
from __future__ import print_function import os import collections import hashlib import time import logging import random import getpass from salt.ext.six.moves import input
return timezone.zone
for student in students[5:6]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.deleted, mode='honor' )
def test_constructor_empty(self): sp = SparseDataFrame() self.assertEqual(len(sp.index), 0) self.assertEqual(len(sp.columns), 0)
get_edx_api_data(program_config, self.user, 'programs', cache_key=cache_key) get_edx_api_data(program_config, self.user, 'programs', resource_id=resource_id, cache_key=cache_key)
BULK_EMAIL_ROUTING_KEY_SMALL_JOBS = LOW_PRIORITY_QUEUE
published_branch = course.id.for_branch( ModuleStoreEnum.BranchName.published )
return db == 'default'
result = idx.delete(5)
return True
return cls._simple_new(subarr, sparse_index, fill_value)
warnings.filterwarnings( 'ignore', category=tables.NaturalNameWarning) store['node())'] = tm.makeDataFrame() self.assertIn('node())', store)
if 'user_id' in context and 'course_id' in context: message_body = substitute_keywords_with_data(message_body, context)
REQUIRE_STANDALONE_MODULES = {}
dlogz = log_mean(log_ais_w)
'METADATA_URL': 'www.googleapis.com/youtube/v3/videos/',
class LinearRing(LineString): _minlength = 4 _init_func = capi.create_linearring
self.assertEqual( Book.objects.aggregate(Sum("pages")), {"pages__sum": 3703}, )
key = list(key)
pkg_params = { name: { 'version': kwargs.get('version'), 'extra_install_flags': kwargs.get('extra_install_flags') } }
signal.signal(signal.SIGINT, self._handle_signals)
self.assertEqual(response.status_code, 400)
provider = None
standard_scaler = StandardScaler() Xtr_s = standard_scaler.fit_transform(X_train) Xte_s = standard_scaler.transform(X_test)
'statici18n',
import salt.states.gem as gem gem.__salt__ = {} gem.__opts__ = {'test': False}
values = ','.join(values)
if is_order_type_business: email.content_subtype = "html"
import logging import re
@python_2_unicode_compatible class Car(models.Model): make = models.CharField(max_length=20, unique=True, null=True) drivers = models.ManyToManyField('Driver', through='CarDriver')
self.assertRaises(IndexError, p.iloc.__getitem__, tuple([10, 5]))
if dataset.y is not None: dataset.y = dataset.y[::patches.shape[0] / reassembled_shape[0]]
DATE_INPUT_FORMATS = [
component = self.store.publish(component.location, self.user_id) self.assertFalse(self.store.has_changes(component))
if mask.any():
X, y = self._build_y(X, y, sample_weight)
result = user_function(*args, **kwds) stats[MISSES] += 1 return result
self.connection.cursor().execute("SELECT 1")
default = self.defaults.get(option.dest) value = getattr(self.options, option.dest, default) if value != default: continue
rs = DataFrame(vals).rolling(5, win_type='boxcar', center=True).mean() tm.assert_frame_equal(DataFrame(xp), rs)
new = values.take(indexer) if need_mask: new = new.values np.putmask(new, mask, fill_value)
linear_loss = y - safe_sparse_dot(X, w) if fit_intercept: linear_loss -= intercept abs_linear_loss = np.abs(linear_loss) outliers_mask = abs_linear_loss > epsilon * sigma
remaining_labels = self.sorted_labels[:-1] level_sizes = [len(x) for x in new_levels]
script_element = rendered_html.find('script') self.assertEqual(None, script_element)
source = ds_list[0] ds = DataSource(source.ds)
self.dummy_leaf_ = _CFNode(threshold, branching_factor, is_leaf=True, n_features=n_features) self.dummy_leaf_.next_leaf_ = self.root_ self.root_.prev_leaf_ = self.dummy_leaf_
'tcp_master_publish_pull': int,
res = df.copy() res.iloc[lambda x: [1, 3]] = 0 exp = df.copy() exp.iloc[[1, 3]] = 0 tm.assert_frame_equal(res, exp)
new_art = Article.objects.get(id=art_id_3) self.assertQuerysetEqual(new_art.categories.all(), [])
if 'index' in kwargs: pull_opts.append('--dkr-index-url={0}'.format(kwargs['index']))
import salt.config from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) import os
df.columns = list('aaaa') result = df.iloc[3:5, 0:2] str(result) result.dtypes
self.password = make_password(None)
CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] ).install()
altered_grader = CourseGradingModel.fetch(self.course.id) self.assertEqual(test_grader.grace_period, altered_grader.grace_period, "Noop update")
self.lib_page.click_delete_button(first_block_id, confirm=True) self.assertEqual(len(self.lib_page.xblocks), 1) self.assertEqual(self.lib_page.xblocks[0].locator, second_block_id)
if fails is not None: if isinstance(detail, fails): result = 'ok (%s)' % type(detail).__name__ _print(result) return
self.base_estimator = base_estimator self.n_estimators = n_estimators self.estimator_params = estimator_params
current_bindings = list_bindings(site)
if not self.env_is_exposed(tgt_env): return None try: int(tgt_ref, 16) except ValueError: return None
y_hat = sum(all_y_hat) / self.n_estimators
try: self.close() except self.db.Database.Error: pass
import threading self._w_monitor = ZeroMQSocketMonitor(self._socket) t = threading.Thread(target=self._w_monitor.start_poll) t.start()
unbalanced_X = iris.data[:125] unbalanced_y = iris.target[:125] sample_weight = compute_sample_weight("balanced", unbalanced_y)
if mp is not None: try: from multiprocessing.context import assert_spawning except ImportError: from multiprocessing.forking import assert_spawning else: assert_spawning = None
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) import os
if hasattr(params, 'items'): return {k: v.force_bytes for k, v in params.items()} else: return [p.force_bytes for p in params]
instructor = AdminFactory.create() self.client.login(username=instructor.username, password="test")
child = self.store.get_item(locations['child']) child.display_name = 'Changed Display Name' self.store.update_item(child, self.user_id)
if self.system.resources_fs is None: self.syllabus_present = False else: self.syllabus_present = self.system.resources_fs.exists(path('syllabus'))
import os import logging
num_lookups = len(lookups) if num_lookups > 1: raise FieldError('Related Field got invalid lookup: {}'.format(lookups[0]))
if course_key is None: return self._bulk_ops_record_type()
if wait_to_finish: salt.utils.cloud.run_func_until_ret_arg(fun=describe_volumes, kwargs={'volume_id': volume_id}, fun_call=call, argument_being_watched='status', required_argument_response='available')
with ensure_clean_store(self.path) as store:
with self.assertNumQueries(0): self._assert_group_assignment(user, VerificationPartitionScheme.DENY)
labels = -np.ones(X.shape[0], dtype=np.intp)
salt '*' vsphere.enable_firewall_ruleset my.esxi.host root bad-password True 'syslog'
plt.figure() plt.legend(legend_rects, legend_labels, loc='upper left')
drop_mask_Y = T.zeros_like(Y)
nrs = rs - rs.shift(1) nxp = xp.diff() assert_series_equal(nrs, nxp)
procedure_fmt += ",'%(spheroid)s'" procedure_args.update({'function': backend.length_spheroid, 'spheroid': params[1]})
task = host_ref.parent.Destroy_Task()
course.self_paced = True self.store.update_item(course, self.user.id) self.assertTrue(course.self_paced)
if len(successes) < len(res_index): res_index = res_index.take(successes)
if hasattr(np, 'float128'): c2f_dict['complex256'] = np.float128
self.assertEqual(sysex.exception.args, (1,))
distances = np.sqrt(2. * distances) return children, n_components, n_leaves, parent, distances
opts = LocalAuthorWithM2M._meta opts.local_many_to_many.remove(new_field) del new_apps.all_models['schema'][new_field.remote_field.through._meta.model_name] opts._expire_cache()
from __future__ import absolute_import import copy
iris = datasets.load_iris() perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
if parse_dates is True or parse_dates is None or parse_dates is False: parse_dates = []
names = extra_names + field_names + annotation_names
from __future__ import absolute_import
ret = {'name': 'off', 'changes': {}, 'result': False, 'comment': 'off'}
CELERYD_PREFETCH_MULTIPLIER = 1
res = df.groupby('gender').hist() tm.close()
for course in courses: self.enroll(course.id)
with open(Env.METRICS_DIR / "pep8", "w") as f: f.write(violations_count_str + '\n\n') f.write(violations_list)
inherited_settings = {}
self.assertEqual(orphan_sequential.location.block_type, root.location.block_type) self.assertEqual(orphan_sequential.location.block_id, root.location.block_id)
from __future__ import absolute_import
defaults = { 'form_class': forms.EmailField, } defaults.update(kwargs) return super(EmailField, self).formfield(**defaults)
response = self.client.get(url) self.assertEquals(response.status_code, 403)
transport = 'ssh' address = self.url
self.config.pop('log_datefmt_console', None)
self.assertEqual(unfiltered.index.names, ('major', 'minor'))
kwargs['user'] = str(kwargs['user']) return
cmd = '--{0}-{1}={2} --permanent'.format(action, _type, name)
log.warning( 'Authentication failure of type "eauth" occurred.' ) return ''
with tm.assert_produces_warning(FutureWarning): s.iget_value(1)
import salt.utils from salt.exceptions import SaltInvocationError
import salt.utils.jid import salt.returners
_refresh_db = True
versions = get_course_versions(unicode(self.course.id)) new_draft_version = versions['draft-branch'] new_published_version = versions['published-branch']
if not is_list_like(clear): clear = [clear] for m in clear: try: m.__warningregistry__.clear() except: pass
self.skipTest( 'Unable to find out how many PTY\'s are open on Darwin - ' 'Skipping for now' )
adder = { 'type': 'text', 'contents': choice_text, 'tail_text': '', 'value': '' } components.append(adder)
self.frame[col_name] = df_col.astype(col_type, copy=False)
store.get_items(SlashSeparatedCourseKey('a', 'b', 'c'), qualifiers={'category': 'vertical'})
assert_frame_equal(p.ix[:, date], p.major_xs(date)) assert_frame_equal(p.ix[:, date, :], p.major_xs(date))
import logging
self.bulk._end_bulk_operation(self.course_key)
from scipy import misc face = misc.face(gray=True)
kwargs.pop(self._typ._info_axis_name, None)
if not fnmatch.fnmatch(repo['url'], six.text_type(remote)): continue
return
self.client.post(url, post_args)
response = self.client.get('/login_protected_view/') self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')
self._create_courses_and_enrollments( (self.TEST_ORG, True), ("other_org", True) )
eq_dir = np.dot(X.T[:n_active].T, least_squares) corr_eq_dir = np.dot(X.T[n_active:], eq_dir)
elif not isinstance(r[0], (np.integer, np.floating, np.bool, int, float, bool)): return result
from mock import call
result = self.ts.reindex() self.assertFalse((result is self.ts))
block_sizes = ('hw_sector_size', 'minimum_io_size', 'physical_block_size', 'logical_block_size') discard_sizes = ('discard_max_bytes', 'discard_max_hw_bytes', )
self.accum.append(function(theano_args, givens=g, updates=u, mode=self.theano_function_mode, name=function_name))
if form.is_valid(): form.save( from_email=theming_helpers.get_value('default_from_email', settings.DEFAULT_FROM_EMAIL), domain_override=orig_host, use_https=is_secure ) else: raise UserNotFound
svc = SVC(kernel="linear") rfecv = RFECV(estimator=svc, step=1, cv=StratifiedKFold(2), scoring='accuracy') rfecv.fit(X, y)
if not isinstance(Y, np.ndarray): raise ValueError("y_pred should be an array of floats.")
X = np.array([[1.], [0.], [0.], [5.]]) X_csr = sparse.csr_matrix(X) X_csc = sparse.csc_matrix(X)
iris = load_iris() perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
ret['size'] = size.splitlines()[-1].split()[1]
form = self._admin_form(course_mode) self._set_form_verification_deadline(form, self.VERIFICATION_DEADLINE) self._assert_form_has_error(form, "Verification deadline can be set only for verified modes.")
unstacked = self.ymd.unstack() unstacked.unstack()
cmd = '{0} {1}'.format(cmd, name)
for block_key in self.post_order_traversal(): if block_key in old_block_relations: self._add_block(pruned_block_relations, block_key)
X = 0.3 * rnd.randn(100, 2) X_train = np.r_[X + 2, X - 2]
RETAIN_TO_DEPTH = { 'first_of_year': 1, 'first_of_month': 2, 'first_of_day': 3, 'first_of_hour': 4, 'most_recent': 5, }
return None
self.login_page.login(email="nobody@nowhere.com", password="password")
axes = df.plot(style='r', subplots=True) for ax in axes: self._check_colors(ax.get_lines(), linecolors=['r']) tm.close()
num_rows = max_num_channels // num_columns if num_rows * num_columns < max_num_channels: num_rows += 1
from __future__ import absolute_import
self.assertEqual(store, modulestore()._get_modulestore_for_courselike(new_key).get_modulestore_type())
log = logging.getLogger(__name__)
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
non_staff_client, _ = self.create_non_staff_authed_user_client() response = non_staff_client.delete(outline_url, {}, HTTP_ACCEPT='application/json') self.assertEqual(response.status_code, 403)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
msg_format = _("Status: {action} {succeeded} of {attempted}")
self.assertNumberMigrations(changes, "testapp", 0)
return GEOSGeometry(capi.geom_clone(self._get_single_internal(index)), srid=self.srid)
with tm.assertRaisesRegexp(ValueError, 'tuple-index'): self.ts[:, 2] with tm.assertRaisesRegexp(ValueError, 'tuple-index'): self.ts[:, 2] = 2
enrollment_mode = request.GET.get('enrollment_mode', 'honor')
d1 = date_range('12/31/1990', '12/31/1999', freq='A-DEC') d2 = date_range('12/31/2000', '12/31/2009', freq='A-DEC')
if check_names: assert_attr_equal('name', left, right, obj=obj)
td = Timedelta('1 days, 10:11:12.012345678') self.assertTrue(td != td.to_pytimedelta())
clf = DecisionTreeClassifier(max_depth=2, min_samples_split=2, criterion="gini", random_state=2) clf = clf.fit(X, y2, sample_weight=w)
from_, f_params = self.get_from_clause()
count, ch = get_quantifier(ch, pattern_iter) if ch: consume_next = False
cert = GeneratedCertificate.eligible_certificates.get(user=self.student, course_id=self.course.id) self.assertEqual(cert.status, CertificateStatuses.downloadable)
if sample_weight_sum <= 0: break
if isinstance(other, Field): return self.creation_counter == other.creation_counter return NotImplemented
config_id = create_config(kwargs={'name': name, 'linode_id': node_id, 'root_disk_id': root_disk_id, 'swap_disk_id': swap_disk_id})['ConfigID']
import yaml import salt.ext.six as six
non_existent = datetime.datetime(2015, 3, 29, 2, 30)
elif op in ['-', '/']: result = getattr(df, rop)(m) assert_frame_equal(result, expected)
'tcp_master_workers': int,
exclude_dirs = ['images', 'scripts', 'sandbox']
from salttesting import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
warnings.simplefilter("ignore", UserWarning) assert_equal(assert_warns(UserWarning, f), 3)
import numpy import theano from pylearn2.datasets.utlc import load_ndarray_dataset, load_sparse_dataset from pylearn2.utils import subdict, sharedX
if not name: return 'Required parameter "name" not passed'
field_data_cache = FieldDataCache.cache_for_descriptor_descendents(course_id, student, module_descriptor) student_data = KvsFieldData(DjangoKeyValueStore(field_data_cache))
'sudo_user': str,
df.ix[2:5, 'bar'] = np.array([2.33j, 1.23 + 0.1j, 2.2, 1.0])
dropped = df.dropna(axis=1, how='all') assert_frame_equal(dropped, df)
y = 0.5 * X.ravel() \ + np.random.randn(n_samples, 1).ravel()
self.assertListEqual(response.redirect_chain, [('/en/account/register/', 302)]) self.assertRedirects(response, '/en/account/register/', 302)
from __future__ import absolute_import
self.instance.save() self._save_m2m()
import json import logging import time import pprint from salt.ext.six.moves import range import salt.ext.six as six import salt.utils try: import requests
def f(): cat.reorder_categories(["a", "b", "c", "d"])
if not is_list_like(new_values) or self.ndim == 1: return _maybe_box_datetimelike(new_values)
self.assertTrue(context['reg_code_info_list'][0]['is_redeemed']) self.assertFalse(context['reg_code_info_list'][1]['is_redeemed'])
threshold = min(step, np.sum(support_) - n_features_to_select)
from email.utils import formataddr if localpart and domain: addr = '@'.join([localpart, domain]) return formataddr((nm, addr))
self.assertRaises(KeyError, lambda: idxr(s)[3.5])
_kwargs.update(string_kwarg)
import salt.ext.six as six
return Response(status=status.HTTP_204_NO_CONTENT)
X = -np.ones((5, 10)) lda = LatentDirichletAllocation() regex = r"^Negative values in data passed" assert_raises_regexp(ValueError, regex, lda.fit, X)
sample_weight /= sample_weight_sum
self.assertEqual(w.render('mydate', '2010-02-30').count('selected="selected"'), 3)
raise
self.store.unpublish(item_location, self.user_id) item = self.store.get_item(item_location) self.assertFalse(self.store.has_published_version(item))
from ctypes import cdll, c_char_p, c_int, c_void_p, pointer, create_string_buffer from ctypes.util import find_library
all_assets.extend(course_assets.setdefault(asset_type, [])) asset_idx = all_assets.find(asset_key)
from salttesting import TestCase
tm.assertIsInstance(res, np.ndarray)
import salt.ext.six as six
clf_samme.algorithm = "SAMME.R" assert_array_less(0, np.abs(clf_samme.predict_proba(iris.data) - prob_samme))
self.send_response(200) self.send_header('Content-type', 'application/json') self.end_headers() self.wfile.write(response)
X_list = [1., 3., 5., 0.] X_arr = np.array(X_list)
selected = [td for td in tds if td.get_attribute('class') == 'selected']
self.assertRaises(TypeError, lambda: td + 2) self.assertRaises(TypeError, lambda: td - 2)
from __future__ import unicode_literals
self.assertEqual(self.team_membership11.last_activity_at, current_last_activity)
from __future__ import absolute_import, print_function import errno import logging import os import shutil import tempfile import time import re import traceback import functools
session_data = self._get_session(no_load=must_create)
y_hat = sum(all_y_hat) / len(self.estimators_)
MAXSIZE = int((1 << 63) - 1)
errorlog = make_error_tracker() course_descriptor = None try: course_descriptor = self.load_course(course_dir, course_ids, errorlog.tracker, target_course_id)
store_outcome_parameters(params, request.user, lti_consumer)
MONGO_PORT_NUM = int(os.environ.get('EDXAPP_TEST_MONGO_PORT', '27017')) MONGO_HOST = os.environ.get('EDXAPP_TEST_MONGO_HOST', 'localhost')
ts1 = Timestamp('2015-01-01', tz=None) ts2 = Timestamp('2015-01-01', tz='UTC') ts3 = Timestamp('2015-01-01', tz='EST')
assert_equal(var_x, std_x * std_x)
series = pd.Series(range(3), index=pd.period_range( start='2000', periods=3, freq='M')) expected = series
self.cleaned_data[name] = self.initial.get(name, field.initial) continue
response = self._response().render() self.assertEqual(response.content, b'foo')
from salt.modules import win_powercfg as powercfg
cdn_url = getattr(settings, 'VIDEO_CDN_URL', {}).get(self.system.user_location)
self.mappings[course_key] = store
def clone(self): "Clones this OGR Geometry." return OGRGeometry(capi.clone_geom(self.ptr), self.srs)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
SYMMETRIC_METRICS = [ "accuracy_score", "unnormalized_accuracy_score", "hamming_loss", "jaccard_similarity_score", "unnormalized_jaccard_similarity_score", "zero_one_loss", "unnormalized_zero_one_loss",
return import_string(settings.DEFAULT_EXCEPTION_REPORTER_FILTER)()
import nose
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(boston.data, boston.target, random_state=rng)
log.info( "Refund successfully opened for user [%s], course [%s]: %r", unenrolled_user.id, course_key_str, refund_ids, )
self._random_read = self.test_capability(b'RandomRead')
generic_relation_base = GenericRelation(Relation)
if course_key.org is None or course_key.course is None or course_key.run is None: return self._active_bulk_ops.records[ course_key.replace(org=None, course=None, run=None, branch=None) ]
del p._restaurant_cache self.assertIsNot(p.restaurant, r)
'ipc_mode': str,
ogc_hex = b'01010000000000000000000000000000000000F03F' ogc_hex_3d = b'01010000800000000000000000000000000000F03F0000000000000040' hexewkb_2d = b'0101000020E61000000000000000000000000000000000F03F' hexewkb_3d = b'01010000A0E61000000000000000000000000000000000F03F0000000000000040'
y = self._y_orig if isinstance(y, Series): y = y.unstack()
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
return os.path.join(__salt__['config.get']('cachedir'), 'file_backup')
sale_dict = dict((feature, getattr(invoice, feature)) for feature in sale_features)
if not added and not cmd_opt: raise CommandExecutionError( 'Specified arguments did not result in modification of repo' )
if user is not None and password is not None: mongo_conn.authenticate(user, password)
self.assertTrue(check_password('letmein', encoded, setter)) self.assertFalse(state['upgraded'])
unfreeze(name, path=path)
run_command = (test_command + 'cleanup').format(mode) __salt__['cmd.run'](run_command)
self.local = salt.client.get_local_client( self.opts['_minion_conf_file'], io_loop=self.io_loop) self.local.event.subscribe('')
exc_info_on_loglevel=logging.DEBUG
return self[indices]
res_val = df.iat[2, 0] self.assertEqual(res_val, exp_val)
log.error('Failed to read region from instance metadata. Giving up.')
self.client.logout() staff_user = StaffFactory(course_key=self.course.id) staff_user.is_staff = True self.client.login(username=staff_user.username, password='test')
pass
self.assertEqual(self.loader[self.module_key](), self.count) self.loader.clear() self.assertNotIn(self.module_key, self.loader)
def _class_to_alias(self, cls): return self._index_type_map.get(cls, '')
nova.__grains__ = {} nova.__salt__ = {} nova.__context__ = {} nova.__opts__ = {}
try: user.email_user( subject, message, theming_helpers.get_value('default_from_email', settings.DEFAULT_FROM_EMAIL) )
self.assertEqual(certificate_exception['user_email'], self.user.email) self.assertEqual(certificate_exception['user_name'], self.user.username)
versions = get_course_versions(unicode(self.course.id)) draft_version = versions['draft-branch'] published_version = versions['published-branch']
import yaml import jinja2 import jinja2.exceptions from xml.dom import minidom import salt.ext.six as six
continue
orig[minion_tgt] = self._check_state_return( orig[minion_tgt] )
example_input[1, 3] = 0.0 example_input[1, 4] = 1.0
assert_bad({"files": [{"content_type": "video/mp4"}]})
self._capture_basic_metrics()
test = isinstance(test_list, tuple) and (not test_list[0]) self.assertTrue(test)
test_invalid_token("AAAAAAAAAAA=", "initialization_vector")
self.assertIn(self.seq_loc, course.system.module_data)
return _algos.arrmap_object(rvalues, lambda x: op(lvalues, x))
self.assertEqual(self.author1.books.count(), 2)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if url.startswith('/') and not url.startswith(settings.STATIC_URL): return matched
if not path.startswith('/'): url = urljoin(response.request['PATH_INFO'], url) path = urljoin(response.request['PATH_INFO'], path)
from salt import syspaths import salt.config import salt.loader from salt.client import mixins from salt.utils.error import raise_error
self.assertEqual(response.status_code, 404)
self.submit_rescore_all_student_answers('instructor', problem_url_name)
_table_mod = None _table_file_open_policy_is_strict = False
with self.store.branch_setting(ModuleStoreEnum.Branch.published_only, source_course_key): component = self.store.get_item(unit.location) self.assertEqual(component.display_name, updated_display_name)
if refresh: refresh_db()
user_exists = __salt__['mongodb.user_exists'](name, user, password, host, port, database, authdb) if user_exists is True: return ret
theme_root = settings.ENV_ROOT / "themes" / settings.THEME_NAME
import logging import salt.utils.http
problem = self.store.get_item(problem.location)
source_course_key = CourseKey.from_string(source_course_key_string) destination_course_key = CourseKey.from_string(destination_course_key_string) fields = deserialize_fields(fields) if fields else None
dom1 = parse_html('<p>foo') dom2 = parse_html('<p>foo</p>') self.assertIn(dom1, dom2) self.assertIn(dom2, dom1)
#show_authors = False
if not encoding or 'ascii' in encoding.lower(): try: encoding = locale.getpreferredencoding() except Exception: pass
if not self.infer_axes(): return False
if issubclass(cls, Index): obj = object.__new__(cls) else: obj = cls.__new__(cls, *args, **kwargs) self.append(obj)
salt '*' vsphere.service_restart my.esxi.host root bad-password 'ntpd'
self.submit_question_answer('H1P1', {'2_1': 'Correct', '2_2': 'Correct'}) self.check_grade_percent(0.25)
result = sparse.loc[orig % 2 == 1] exp = orig.loc[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
autoreload.raise_last_exception()
link = link.replace('\\', '/')
ttype = 'zeromq'
X = np.random.RandomState(21).randn(10, 3) y = np.random.RandomState(12).randn(10)
import logging import os
ct_fetched = ContentType.objects.get_for_id(ct.pk) self.assertIsNone(ct_fetched.model_class())
df = pd.DataFrame([[1, 2], [3, 4]], columns=pd.date_range('1/1/2013', '1/2/2013'), index=['A', 'B'])
from __future__ import absolute_import import logging
call_command('post_cohort_membership_fix')
#epub_use_index = True
html5_id_to_remove = [x for x in videos['html5'] if x != html5_id] if html5_id_to_remove: remove_subs_from_store(html5_id_to_remove, item)
msg = "Input has different freq from PeriodIndex(freq={0})" raise IncompatibleFrequency(msg.format(self.freqstr))
'rejected_retry': bool,
import salt.config import salt.loader from salt.modules import boto_cloudtrail
if 'HOME' in os.environ: os.environ['HOME'] = pwuser.pw_dir
course.position = 2 course.save()
'AUTOPLAY_VIDEOS': False,
]
DATE_FORMAT = 'j F, Y' TIME_FORMAT = 'g:i A' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'j M, Y'
clf = DecisionTreeClassifier(max_depth=3, min_samples_split=2) clf.fit(X, y)
raise
s = Series(np.random.randn(5)) cond = s > 0
from salt.modules import config
raise parser.error_class( "Not expecting '%s' in this position in if tag." % self.id )
from __future__ import print_function from __future__ import absolute_import import os import sys
if not _latest_version == _version: _refresh_db = True
cmap = CorrectMap() for answer_id in answer_ids: cmap.update(CorrectMap(answer_id=answer_id, queuestate=None)) self.problem.correct_map.update(cmap)
self._middleware_chain = handler
if self.pendings: self.pendings += bytes_ bytes_ = self.pendings
self._update_head(dest_course_key, index_entry, dest_course_key.branch, new_structure['_id'])
ret = {'name': name, 'result': True, 'changes': {}, 'comment': ''}
minion_timeouts = {}
exp_val = "b"
for kernel in ('linear', 'poly', 'rbf'): clf = svm.SVC(kernel=kernel, gamma=2) clf.fit(X, Y)
import time import logging
self.assertTrue(access.has_ccx_coach_role(self.coach, ccx_locator))
name = com._maybe_match_name(self, delta)
from sklearn.linear_model import Lasso
if ndim == 1: values = values[0]
self.locs = locs
user.is_active = False user.save() user_fetched = UserModel._default_manager.get(pk=user.pk) self.assertEqual(user_fetched.is_active, True)
self._build_data_specs()
value_repr = 'b' + value_repr
X_scaled = MinMaxScaler().fit_transform(X) assert_true(np.isfinite(X_scaled).all())
class MyForm(forms.Form): text = forms.CharField(label='&text') cb = forms.BooleanField(label='&cb')
@setup(inheritance_templates) def test_inheritance39(self): output = self.engine.render_to_string('inheritance39', {'optional': True}) self.assertEqual(output, '1new23')
mean_dist = np.mean(pairwise_distances(query, X, metric='cosine')) neighbors = lshf.radius_neighbors(query, radius=mean_dist, return_distance=False)
assert choice_type in group_element_names group_element = etree.Element(group_element_names[choice_type])
super(CategoricalBlock, self).__init__(maybe_to_categorical(values), fastpath=True, placement=placement, **kwargs)
from pandas import * from pandas.util.testing import rands
if socks.get(timer_in) == zmq.POLLIN: sec_event = serial.loads(timer_in.recv())
result = _chkconfig_is_enabled(name, runlevel) if result: return True
video_outline = self.api_response().data self.assertEqual(len(video_outline), 0)
tm._skip_if_no_scipy()
return algos.take_nd(self.labels, self.sort_idx, allow_fill=False)
for database_name in DATABASES: DATABASES[database_name]['ATOMIC_REQUESTS'] = False
Env.METRICS_DIR.makedirs_p()
AUTHENTICATION_BACKENDS = ( 'ratelimitbackend.backends.RateLimitModelBackend', )
y = test['y'][:, 0] - 1 assert y.shape == (8000,)
class FieldClassAttributeModel(models.Model): field_class = models.CharField
response = requests.get(self.url, params={"test_param": 2}) self.assertEqual(response.status_code, 200)
if values.dtype == np.object_: if convert_numeric: try: new_values = lib.maybe_convert_numeric(values, set(), coerce_numeric=True)
self.assertContains(response, "super-ugly")
from __future__ import absolute_import import json import logging as logger
changed_old[dn] = o changed_new[dn] = n success_dn_set[dn] = True
orig = pd.Series([np.nan, 2, np.nan, 4, 0, np.nan, 0]) sparse = orig.to_sparse()
self.assertFalse(api.is_user_eligible_for_credit("bob", self.course_key))
all_corr = ['absolute_exponential', 'squared_exponential', 'cubic', 'linear']
content_type = models.ForeignKey(ContentType, models.CASCADE) object_pk = models.TextField() content_object = GenericForeignKey(ct_field="content_type", fk_field="object_pk")
_RE_WHITESPACE = re.compile(r'[\r\n]+|\s{2,}')
self.assertIn( 'is not available', self.run_function('runtests_decorators.booldependsFalse' ) )
self.previous_version = self.update_version = self.definition_locator = None self.xmodule_runtime = None
n_inliers_best = n_inliers_subset score_best = score_subset inlier_mask_best = inlier_mask_subset X_inlier_best = X_inlier_subset y_inlier_best = y_inlier_subset
source = "/foo/bar/fubar.pkg" package_id = "com.foo.fubar.pkg"
output.append('\'{0}\': {1!r}'.format(key, value))
idx = 0 start_idx = end_idx for rd in rings: start_idx = restore_ring(img, idx, rd, dense_input, start_idx) idx += rd
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
string_data = serializers.serialize( format, NaturalKeyAnchor.objects.all(), indent=2, use_natural_foreign_keys=True, use_natural_primary_keys=True, )
nonzero = dists != 0 dists = dists[nonzero]
self.assertEqual(toy.graded, True)
rng = date_range('1/1/2000', periods=20)
self.assert_enrollment_status( as_server=True, mode=None, is_active='foo', expected_status=status.HTTP_400_BAD_REQUEST )
import integration import salt.utils
elif result is _empty and isinstance(state_result, dict) and ret: ret = check_state_result(state_result, recurse=True)
lc_block = self._add_library_content_block(course, self.lib_key) lc_block = self._refresh_children(lc_block) self.assertEqual(len(lc_block.children), 1)
return redirect('about_course', course_id.to_deprecated_string())
smaller = self.frame[:2]
minion_id = kwargs['opts']['id'] if re_pattern: minion_id = re.sub(re_pattern, re_replace, minion_id)
for field in feature: nm = field.name
component = self.store.publish(xblock.location, self.user_id) self.assertFalse(self.store.has_changes(component))
return {'name': name, 'changes': {}, 'result': True, 'comment': ''}
if role == 'instructor': world.instructor = InstructorFactory(course_key=world.course_key) world.enroll_user(world.instructor, world.course_key)
self.settings_detail.refresh_page() self.settings_detail.wait_for_prerequisite_course_options() dropdown_status = is_option_value_selected( browser_query=self.settings_detail.pre_requisite_course_options, value=pre_requisite_course_id ) self.assertTrue(dropdown_status)
if hasattr(self, "doc"): doc = self.doc else: doc = None
with self.assertRaises(InvalidSessionKey): self.backend()._key_to_file("a\\b\\c")
try: content = contentstore().find(asset_key) except NotFoundError: raise AssetNotFoundException
xpath = "//section[@class='math-string']/span[2]/p/b" self.assert_has_text(xml, xpath, 'tail')
CREDIT_TASK_MAX_RETRIES = 5
'tcp_keepalive_intvl': float,
response = self.client.get(self.url) self.assertFalse(self.email_modal_link in response.content)
if len(rtnv) == 0: rtnv.append([])
encoder=CourseSettingsEncoder
continue
self.course_nav.go_to_vertical('Test Vertical-1')
@skipIf(not salt.utils.is_linux(), 'These tests can only be run on linux') class UseraddModuleTest(integration.ModuleCase):
import salt.utils from salt.exceptions import SaltException
assign_default_role(course_key, user_who_created_course)
options = re.sub(r"([a-zA-Z])('|\\')([a-zA-Z])", r"\1&#39;\3", options)
if source is None: source = name
clf = GradientBoostingClassifier(n_estimators=10, random_state=1) clf.fit(iris.data, iris.target)
if len(block) > 1: dtype = _interleaved_dtype(block) block = [b.astype(dtype) for b in block] block = _consolidate(block)
from salt.states import pkgng
self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS + PayAndVerifyView.VERIFICATION_STEPS, PayAndVerifyView.FACE_PHOTO_STEP )
self.assertNotContains(response, 'sausage-value', status_code=500) self.assertNotContains(response, 'bacon-value', status_code=500)
assert max(pd.max(), hd.max()) < .17
self.content_store.find(location)
if columns is not None: columns = list(columns)
input_dict = {'1_2_1': '42'} correct_map = problem.grade_answers(input_dict)
X = 15 * rng.rand(100, 1) y = np.sin(X).ravel()
n += 1
mask = self.series > self.series.median() assert_series_equal(self.series.ix[mask], self.series[mask])
max_fd = resource.getrlimit(resource.RLIMIT_NOFILE) try: os.closerange(pty.STDERR_FILENO + 1, max_fd[0]) except OSError: pass
self.assertEqual( self.safe_cookie_data._compute_digest(self.user_id), self.safe_cookie_data._compute_digest(self.user_id), )
pass
subsection_css = ( ".course-navigation .chapter-content-container:nth-of-type({0}) " ".menu-item:nth-of-type({1})" ).format(sec_index + 1, subsec_index + 1)
self.assertEqual(self.book1.authors.count(), 3)
plen = len(provided) + 1 func = getattr(func, '_decorated_function', func)
import ioflo.base.deeding
block_type = 'html' for idx in xrange(0, 16): block_id = _make_block_id(block_type, idx) self.all_units.append((block_type, block_id))
([
cmd = 'rpm --import {0}'.format(pkg_pub_key_file) __salt__['cmd.run'](cmd, runas=runas, use_vt=True)
return
self.assertEqual(tab.tab_id, expected_tab_id)
else: ret = _load_result(existing, ret)
def test_reader_converters(self):
if sp.issparse(X): centers = _k_means._centers_sparse(X, labels, n_clusters, distances) else: centers = _k_means._centers_dense(X, labels, n_clusters, distances)
assert_raises(ValueError, clf.fit(X_, y_).predict, rng.random_sample((3, 12)))
if isinstance(address, int): self.network_address = IPv6Address(address) self._prefixlen = self._max_prefixlen self.netmask = IPv6Address(self._ALL_ONES) return
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, mock_open, call, NO_MOCK, NO_MOCK_REASON )
self.assertEqual(hash(Article(id=1)), hash(1)) with self.assertRaises(TypeError): hash(Article())
INSTALLED_APPS += ('django_extensions',)
self.assertEqual(len(self.certificates_page.certificates), 1)
from __future__ import unicode_literals
source_copy = source.copy() source_copy['A'] = 0 self.assertRaises(ValueError, target.join, source_copy, on='A')
team.add_user(self.student)
outfile = os.path.relpath(os.path.join(savefig_dir,filename), source_dir)
if hasattr(settings, 'LMS_SEGMENT_KEY') and settings.LMS_SEGMENT_KEY: tracking_context = tracker.get_tracker().resolve_context() identity_args = [
from salt.pillar import sqlcipher
for mode in ('audit', 'honor', 'verified'): CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
class UserPreferenceFactory(DjangoModelFactory): class Meta(object): model = UserPreference
self.asides = block_data.get('asides', {})
return
'ENABLE_DISCUSSION_HOME_PANEL': False,
rng = np.random.RandomState(0)
_refresh_course_tabs(request, course_module)
return process_request_response
if result['retcode'] in (0, 2): __context__[k] = ret = not result['retcode']
self.assertContains(response, "<h2>Built-in filters</h2>", count=2, html=True)
autodetector = MigrationAutodetector( loader.project_state(), ProjectState.from_apps(apps), questioner, )
targeted_pkgs = list(targets.keys()) if pkgs else None
if _is_url(io): io = _urlopen(io) io, _, _ = get_filepath_or_buffer(io)
least_squares[...] = 1 AA = 1.
if len(minions - allowed_minions_from_auth_list) > 0: return False
if isinstance(axis_index, MultiIndex): dindex = axis_index else: dindex = axis_index.to_series()
from salttesting import TestCase, skipIf from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON )
students = self._create_students(10)
break
s = Series([]) self.assertRaises(IndexError, s.__getitem__, -1)
self._initialize_mixed(mappings={})
module = CapaFactory.create(xml=self.demand_xml)
if dtype == np.object_: return v.tolist()
ax1.axvline(x=silhouette_avg, color="red", linestyle="--")
imputer = Imputer(missing_values, strategy=strategy, axis=0) imputer.fit(sparse.csc_matrix(X)) X_trans = imputer.transform(sparse.csc_matrix(X.copy()))
self._write("()")
opts.fields = None
import salt.utils.dictupdate as dictupdate from salt.exceptions import SaltInvocationError from salt.ext.six import string_types
if requested_sort == 'date_added': requested_sort = 'uploadDate' elif requested_sort == 'display_name': requested_sort = 'displayname' sort = [(requested_sort, sort_direction)]
if depth is not None: depth -= 1
AutoAuthPage( self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=False ).visit()
composite_space = CompositeSpace(spaces) sources = tuple(sources) return (composite_space, sources)
call_command("migrate", "migrations", verbosity=0)
df = DataFrame({'foo': np.inf * np.empty(10)}) repr(df)
self.assertChildNodes(feed2, ['title', 'link', 'id', 'updated', 'entry', 'georss:box'])
many_days = datetime.timedelta(days=60)
get_option = CallableDynamicDoc(_get_option, _get_option_tmpl) set_option = CallableDynamicDoc(_set_option, _set_option_tmpl) reset_option = CallableDynamicDoc(_reset_option, _reset_option_tmpl) describe_option = CallableDynamicDoc(_describe_option, _describe_option_tmpl) options = DictWrapper(_global_config)
try: return Feature(capi.get_feature(self.ptr, feat_id), self) except GDALException: pass
self.selenium.switch_to.window(main_window) self.wait_for_value('#id_main_band', '98')
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
from salttesting.unit import skipIf from salttesting.helpers import ( ensure_in_syspath, destructiveTest) ensure_in_syspath('../../../')
rendered = "0.post%d" % pieces["distance"] if pieces["dirty"]: rendered += ".dev0"
try: code = _period_str_to_code(freqstr[0]) stride = freqstr[1] except: if com.is_integer(freqstr[1]): raise code = _period_str_to_code(freqstr[1]) stride = freqstr[0] return code, stride
if existing['code'] == 200:
noconvert_columns = set()
assert_series_equal(ser[sel], ser)
lw = LedoitWolf(block_size=25).fit(X) assert_almost_equal(lw.covariance_, cov)
discussion_id_map_json = CompressedTextField(verbose_name='Discussion ID Map JSON', blank=True, null=True)
f = lambda x: ((x.T - x.mean(1)) / x.std(1)).T
CACHE_TIMEOUT = 0
self.kwargs['version'] = str(kwargs.get('version', 2))
def __init__(self, opts, io_loop=None): super(SAuth, self).__init__(opts, io_loop=io_loop)
preds2 = np.zeros_like(y) for train, test in cv.split(X, y): est.fit(X[train], y[train]) preds2[test] = est.predict(X[test])
self.assertQuerysetEqual( Cover.objects.all(), ['<Cover: first>', '<Cover: second>'] )
class PointField(GeometryField): geom_type = 'POINT' form_class = forms.PointField description = _("Point")
from __future__ import unicode_literals
import os
if self.index.lexsort_depth < 2: selfsorted = self.sortlevel(0) else: selfsorted = self
from salttesting import skipIf, TestCase from salttesting.helpers import destructiveTest, ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, call, mock_open, patch)
assert False
mpoly = OGRGeometry(mp.wkt, srs=None) mpoly.srs = mpoly.srs mpoly.srid = mpoly.srid
self.assertTrue('Activate Course Enrollment' in response.content)
self.assertEqual('override', settings.TEST) with self.assertRaises(AttributeError): getattr(settings, 'TEST2')
self.check_index_and_outline(course_staff_client)
FEATURES['ENABLE_PREREQUISITE_COURSES'] = True
exc = drf_exceptions.AuthenticationFailed({u'error_code': -1}) self.assertEqual(exc.detail, u"{u'error_code': -1}")
if not is_platform_windows(): for i in [tm.makeStringIndex(10), tm.makeUnicodeIndex(10)]: self.assertRaises(ValueError, lambda: frequencies.infer_freq(i))
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): model = ols(y=Y, x=X) model.summary
if not salt.utils.cloud.wait_for_port(ip_address, port=445, timeout=ssh_connect_timeout): raise SaltCloudSystemExit( 'Failed to connect to remote windows host' )
first = pd.DataFrame([[datetime(2016, 1, 1)]]) first[0] = first[0].dt.tz_localize('Europe/London')
if 'pub_sig' in payload and self.opts['verify_master_pubkey_sign']: return True elif 'pub_sig' not in payload and not self.opts['verify_master_pubkey_sign']: return True
first_octet, second_octet, third_octet, fourth_octet = octets
protocol = (pickle.DEFAULT_PROTOCOL if PY3_OR_LATER else pickle.HIGHEST_PROTOCOL) Pickler.__init__(self, self.stream, protocol=protocol) self._hash = hashlib.new(hash_name)
if not isinstance(model_att, six.string_types): model_att = att
self.assertTrue(all(isinstance(course, CourseSummary) for course in course_summaries))
if isinstance(obj, DataFrame): axis_number = 1 - axis_number takers = op(values, filt) return obj.ix._getitem_axis(takers, axis=axis_number)
self.assertEqual(context['currency'], 'usd') self.assertEqual(context['currency_symbol'], '$')
module_state_key = LocationKeyField(max_length=255, db_index=True, db_column='module_id') student = models.ForeignKey(User, db_index=True)
PROCESSOR_MODULE = __import__( 'shoppingcart.processors.' + settings.CC_PROCESSOR_NAME, fromlist=[ 'render_purchase_form_html', 'process_postpay_callback', 'get_purchase_endpoint', 'get_signed_purchase_params', ] )
base_estimator.fit(X_inlier_best, y_inlier_best)
channels=3
self.wait_for_page()
space, source = model.get_monitoring_data_specs()
if usage_id_filter is None and usage_key_filter is not None: usage_id_filter = usage_key_filter
import salt.utils
queryset = self.model.objects.current_set()
response = self.client.get(self.dashboard_url) self.assertContains(response, attempt.expiration_datetime.strftime("%m/%d/%Y"))
if self.reset_sequences: self._reset_sequences(db_name)
df3 = df.copy() df3['s'].cat.remove_unused_categories(inplace=True)
stamp = dparser.parse(stamp)
setattr(node._v_attrs, '%s_name%d' % (key, i), name)
if vm_: for item in list(required_keys): if item in vm_: required_keys.remove(item)
@property def encoding(self): return self._layer._ds.encoding
if isinstance(self, OFTReal) and self.precision == 0: self.__class__ = OFTInteger self._double = True
self.assertEqual(resp.status_code, 200)
from salt.modules import hadoop
self.cart, __ = self._create_cart()
EmptyPromise(lambda: self.is_button_shown('transcript_button'), "transcript button is shown").fulfill()
if role: role(self.course.id).add_users(self.user)
store = HDFStore(path, mode='w') store.append('df', df)
with warnings.catch_warnings(): warnings.filterwarnings("ignore", message=".*(empty slice|0 for slice).*", category=RuntimeWarning)
path = path[:-5] + ("0" * 4) + path[-1]
BRANCH_PREFIX = "PR_TOOL"
import salt.ext.six as six try: import zmq HAS_ZMQ = True except ImportError: HAS_ZMQ = False
if self.capa_system.xqueue is None: return {'success': False, 'message': _('Cannot connect to the queue')}
X_sparse_pruned = sparse.csr_matrix(X_dense)
num_braces = 0
mail.mail_admins = orig_mail_admins admin_email_handler.email_backend = orig_email_backend
l[0] = ["faz", "boo"] df.index = l repr(df)
return 0
return None
self.loc[index, col] = value self._item_cache.pop(col, None)
while True: emptydirs = _list_emptydirs(mod_dir) if not emptydirs: break for emptydir in emptydirs: touched = True shutil.rmtree(emptydir, ignore_errors=True)
with self.assertRaises(forms.ValidationError): f.clean('1:30:05 PM')
hist = s.value_counts(ascending=True) expected = Series([1, 2, 3, 4], index=list('cdab')) tm.assert_series_equal(hist, expected)
test_func._modified_settings = list( test_func._modified_settings) + self.operations
self.assertRaises(KeyError, df.__getitem__, df.index[2], )
for field in _Swagger.SWAGGER_OBJ_V2_FIELDS_REQUIRED: if field not in self._cfg: raise ValueError('Missing Swagger Object Field: {0}'.format(field))
xml_centric_courselike_key = self.get_key() adapt_references(courselike, xml_centric_courselike_key, export_fs) courselike.add_xml_to_node(root)
activate('de')
obj = self.lazy_wrap(42) six.assertRegex(self, repr(obj), '^<SimpleLazyObject:')
with super(ForumDiscussionSearchUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
del_query.query.select_for_update = False del_query.query.select_related = False del_query.query.clear_ordering(force_empty=True)
result = p1.join(p2, how='inner') expected = panel.ix[:, 5:10, 2:3] tm.assert_panel_equal(result, expected)
module.save_problem(get_request_dict)
response = requests.get(self._get_url("api/v1/annotations")) self.assertEqual(response.status_code, 400)
klass._setup_axes(axes=orders, info_axis=info_axis, stat_axis=stat_axis, aliases=aliases, slicers=slices)
@setup({'widthratio08': '{% widthratio %}'}) def test_widthratio08(self): with self.assertRaises(TemplateSyntaxError): self.engine.get_template('widthratio08')
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'profitbricks', vm_['profile']) is False: return False
if self.escQuote: ret = ret.replace(self.escQuote, self.endQuoteChar)
frame.columns = frame.columns.get_level_values(col_level)
with ensure_clean_store(self.path) as store:
with tm.assert_produces_warning(FutureWarning): df.irow(1)
for key in log_format_types: if str(format_id) == log_format_types[key]: return key _LOG.warning('Unable to determine log format.') return None
import integration
space, source = data_specs if not isinstance(source, tuple): source = (source,)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.assertIn( 'Invalid value passed for arch', self.run_function('system.set_boot_arch', ['spongebob']))
for database_operation in self.database_operations: to_state = from_state.clone() database_operation.state_forwards(app_label, to_state) database_operation.database_forwards(app_label, schema_editor, from_state, to_state) from_state = to_state
response = self.client.get(manage_users_url) self.assertEqual(response.status_code, 200) self.assertIn(extra_user.username, response.content)
diff = y - activations[-1] deltas[last] = -diff
self.assertEqual(safe_key(1, 'prefix', 'version'), 'prefix:version:1')
import_static_content( data_path, self.static_content_store, dest_id, subpath='static', verbose=self.verbose )
hasher = FeatureHasher() hasher.set_params(n_features=np.inf) assert_raises(TypeError, hasher.fit)
with self.assertNumQueries(18): self.client.get(self.teams_url)
ssh_gateway_config['ssh_gateway_password'] = config.get_cloud_config_value( 'ssh_gateway_password', vm_, __opts__, default=None, search_global=False )
from __future__ import unicode_literals
return False
rng = date_range('2000-01-01', periods=10000, freq='min') ts = Series(1, index=rng)
if self.warm_start and len(self.estimators_) > 0: random_state.randint(MAX_INT, size=len(self.estimators_))
leaf_count = node_counts[node_counts != 0] assert_greater(np.min(leaf_count), 4, "Failed with {0}".format(name))
sign_active[idx] = -sign_active[idx]
result0 = func(arr, min_periods=0) result1 = func(arr, min_periods=1) tm.assert_almost_equal(result0, result1)
self.assertEqual(form.instance.price, Decimal('6.00')) self.assertIsNone(form.instance.quantity) self.assertIsNone(form.instance.pk)
with tm.assertRaisesRegexp(TypeError, 'list of lists-like'): self.index.set_labels(labels[0])
djangomod.__grains__ = {} djangomod.__salt__ = {} djangomod.__context__ = {}
from __future__ import absolute_import
response['Last-Modified'] = http_date(timegm(lastmod))
data = read_sas(self.file01, format="xport") tm.assert_frame_equal(data, data_csv)
X_trans = pipeline.fit_transform(X, y) X_trans2 = transft.fit(X, y).transform(X) assert_array_almost_equal(X_trans, X_trans2)
if unsafely: exec_fn = codejail_not_safe_exec else: exec_fn = codejail_safe_exec
from __future__ import absolute_import
create_sql = sql.get_schema(self.test_frame1, 'test', 'sqlite') self.assertTrue('CREATE' in create_sql)
response = self.client.post('/post_view/', {}) self.assertEqual(response.status_code, 200)
import integration import salt.ext.six as six from salt.modules import mysql as mysqlmod
AutoAuthPage(self.browser, course_id=self.course_id).visit()
warnings.simplefilter('ignore', category=RemovedInDjango20Warning) return mark_for_escaping(value)
proc = Process(target=event_stream, args=(handler, child_pipe)) proc.start()
from __future__ import absolute_import
return ''
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
))
uniques = algos.take_nd(uniques, sorter, allow_fill=False)
self.answer_ids = [x.get('id') for x in self.inputfields] if self.max_inputfields == 1: self.answer_id = self.answer_ids[0]
Y = np.array([0, 0, 0, 1])
blocks = df.as_blocks(copy=False) for dtype, _df in blocks.items(): if column in _df: _df.ix[:, column] = _df[column] + 1
import logging import re import socket
self.assertQuerysetEqual( self.cia.members.all(), [] )
instructor = self.make_instructor() self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
ax = df.plot.scatter(x='x', y='y', c='z', colorbar=False) self.assertIs(ax.collections[0].colorbar, None)
for model, instances in self.data.items(): self.data[model] = sorted(instances, key=attrgetter("pk"))
exhaust(field_stream)
with tm.assert_produces_warning(None):
storage = self.get_storage() request._messages = storage self.assertEqual(get_level(request), constants.INFO)
df = DataFrame({ 'Date': [pd.NaT, Timestamp("2014-1-1")], 'Date2': [Timestamp("2013-1-1"), pd.NaT] })
if data.get('essential'): return super(IDTokenHandler, self).claim_instructor_courses(data) else: return None
salt '*' vsphere.syslog_service_reload my.esxi.host root bad-password
try: return key in self._engine except TypeError: return False
htown = City.objects.get(name='Houston') Zipcode.objects.distance(htown.point)
credit_course = self.add_credit_course() credit_course.enabled = False credit_course.save()
from salttesting import TestCase from salttesting.mock import Mock, patch
image_index[0] = add_mod(image_index[0], step, len(row_indices))
try: new_other = np.array(other, dtype=self.dtype) except ValueError: new_other = np.array(other)
alpha = 1.5 beta = 0.75
dec_mock(request) self.assertTrue(self.mock.called) self.assertEqual(0, len(ExternalAuthMap.objects.all()))
import salt.utils import salt.config as config from salt.exceptions import ( SaltCloudConfigError, SaltCloudNotFound, SaltCloudExecutionFailure, SaltCloudExecutionTimeout, SaltCloudSystemExit )
elif zones[avz] != 'available': raise SaltCloudException( 'The specified availability zone isn\'t currently available: ' '{0}\n'.format( avz ) )
if use_org_level_role: OrgLibraryUserRole(self.lib_key.org).add_users(self.non_staff_user) else: LibraryUserRole(self.lib_key).add_users(self.non_staff_user)
import salt.utils import salt.utils.jid
self.context['debug'] = self.capa_system.DEBUG
with tm.assertRaises(UndefinedVariableError): df.query('sin > 5', engine=engine, parser=parser)
from __future__ import absolute_import import socket import logging
if val == val: nobs[lab, j] += 1 sumx[lab, j] += val
if LoginFailures.is_feature_enabled(): LoginFailures.clear_lockout_counter(user)
self.args = args
ZENDESK_USER = AUTH_TOKENS.get("ZENDESK_USER") ZENDESK_API_KEY = AUTH_TOKENS.get("ZENDESK_API_KEY")
trimmed = False if (len(binner) > 2 and binner[-2] == last and self.closed == 'right'):
pygments_style = 'sphinx'
other_session = self.backend() other_session['foo'] = 'bar' other_session.set_expiry(-3600) other_session.save()
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
self.assertIn('msgctxt "Context wrapped in double quotes"', po_contents) self.assertIn('msgctxt "Context wrapped in single quotes"', po_contents)
if hasattr(self.query, 'cursor') and self.query.cursor: self.query.cursor.close()
octets = ip_address.split('.') if len(octets) != 4: return False
stamp = time.strftime('%a_%b_%d_%H-%M-%S_%Y')
self.check_response('done_0', 'done-unmarked') self.check_response('done_1', 'done-marked')
self.input_space = input_space
data['changed'] = salt.fileserver.diff_mtime_map(old_mtime_map, new_mtime_map)
X = [[0], [1]] Y = [[-1], [2]]
import nose
model_dependencies = [] models = set() for app_config, model_list in app_list: if model_list is None: model_list = app_config.get_models()
root, k = _get_root(key) root[k] = v
elif isinstance(self.grouper, Grouper):
redirect_url = reverse('dashboard') + '?course_closed=1%2F1%2F15%2C+12%3A00+AM' self.assertRedirects(response, redirect_url)
new_structure = self.version_structure(course_key, structure, user_id)
continue
fallback_url = settings.STATIC_URL + settings.DEFAULT_COURSE_ABOUT_IMAGE_URL course_overview = self._assert_image_urls_all_default(modulestore_type, course_image, fallback_url)
newFrame = self.frame.reindex(self.frame.index, copy=False) self.assertIs(newFrame.index, self.frame.index)
self.assertEqual( res_json['message'], u"{user} does not exist in the LMS. Please check your spelling and retry.".format(user=invalid_user), )
HAS_LIBS = False try: from pysphere import VIServer, MORTypes, VIException HAS_LIBS = True
split_test = self._update_partition_id(0)
val = '\n'.join([v for v in val.split('\n') if not v.startswith('#')])
def two_pass_var(X): mean = X.mean(axis=0) Y = X.copy() return np.mean((Y - mean)**2, axis=0)
pkg, ver = re.split('[; ]', line, 1)[0].rsplit('-', 1)
ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_ ).astype(np.bool_) ref_inlier_mask[outliers] = False
value = value.encode(charset)
DEBUG = True
with self.assertRaises(forms.ValidationError): f.clean('2010-12-21')
self.add_course_to_user_cart(self.xss_course_key) self.assertEquals(self.cart.orderitem_set.count(), 1)
res = store.select('wpneg', Term('items == -1')) expected = Panel({-1: wpneg[-1]}) tm.assert_panel_equal(res, expected)
if PY35 and is_platform_windows(): raise nose.SkipTest("native2 read fails oddly on windows / 3.5")
call_task('pavelib.quality.run_safelint', options={"thresholds": '{"rules": {"javascript-escape": 5}}'})
return get_branch_setting()
init = getattr(estimator.__init__, 'deprecated_original', estimator.__init__)
use = zipped[1:]
if isinstance(left, ABCSeries) and isinstance(right, ABCSeries): left, right = left.align(right, copy=False)
t = Series(date_range('20130101', periods=1000, tz='US/Eastern')) self.assertTrue('datetime64[ns, US/Eastern]' in str(t))
sum_sqr_XX = conv2d(T.sqr(X), filters=filters, border_mode='full')
Timestamp(Timestamp.min)
with assertRaises(ValueError): f() raise ValueError
cv_score = cv_estimate(3)
super(MultinomialSampler, self).__init__(0, *args, **kwargs)
ret['deploy_kwargs'] = deploy_kwargs
self.go_to_tab_and_assert_problem(1, self.problem1_name) problem1_content_after_coming_back = self.problem_page.problem_content self.assertEqual(problem1_content_before_switch, problem1_content_after_coming_back)
_response = _request("PUT", options['url'] + options['db'])
DELAY = 0.5
self.assertIn("Some Rights Reserved", self.lms_courseware.course_license)
html_theme_path = ['themes']
idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]
from __future__ import unicode_literals
stream = LazyStream(ChunkIter(self._input_data, self._chunk_size))
self.assertEqual( {c.id for c in CourseOverview.get_all_courses(org='TEST_ORG_1')}, {c.id for c in org_courses[1]}, )
next_page = False
new_stores = [store for store in get_mixed_stores(new_mixed_setting) if store['NAME'] != 'split'] old_stores = get_mixed_stores(self.OLD_MIXED_CONFIG_WITH_DICT)
try: import influxdb import influxdb.influxdb08 HAS_INFLUXDB = True except ImportError: HAS_INFLUXDB = False
new_mods = [m for m in sys.modules if m not in self.mods] for m in new_mods: del sys.modules[m]
expected = left_f(s, Timestamp('nat')) result = right_f(Timestamp('nat'), s) tm.assert_series_equal(result, expected)
new_tab = self.get_item_from_modulestore(usage_key) self.assertEquals(new_tab.display_name, 'Empty')
CACHE_TIMEOUT = 0
#pylint: disable=E0602
enrollment_mode, is_active = CourseEnrollment.enrollment_mode_for_user(student, course_key) show_generate_cert_btn = ( is_active and CourseMode.is_eligible_for_certificate(enrollment_mode) and certs_api.cert_generation_enabled(course_key) )
X = np.arange(10000)[:, np.newaxis] y = np.arange(10000)
for honor_code in ["", "false", "not_boolean"]: params["honor_code"] = honor_code assert_honor_code_error("To enroll, you must follow the honor code.")
arr = np.arange(15, dtype=np.float64) arr[7:12] = nan arr[-1:] = nan
return zip(*arrays)
self.assertEqual(context['currency'], 'PKR') self.assertEqual(context['currency_symbol'], 'Rs')
r.META = {'HTTP_ACCEPT_LANGUAGE': 'es-us'} self.assertEqual(g(r), 'es')
#if not sig_valid:
from __future__ import absolute_import
from __future__ import unicode_literals
dict(safe_zip(range(10), range(10))),
self.assertEqual(rf2.name, 'new foo') self.assertEqual(rf2.value, 'new bar')
for item in ret: self.assertSaltTrueReturn(item)
self.assertEqual(df['key'].dtype, 'object')
if len(bits) >= 5: if bits[-4] != 'for': raise template.TemplateSyntaxError(syntax_message) user = bits[-3] else: user = None
'acceptance_wait_time_max': float,
import yaml import salt.ext.six as six
cats = list('cabe')
from __future__ import absolute_import
self.execute_check_function(idset, submission)
if not course_key_string or not action_state_id: return HttpResponseBadRequest()
log = logging.getLogger(__name__)
from __future__ import absolute_import
self.assertTrue(self.store.has_changes(component))
result = pd.to_datetime(i, errors='coerce') tm.assert_index_equal(result, i)
self.settings_page.visit() self._set_pre_requisite_course()
if style_kwargs: first_row = startrow + cell.row + 1 last_row = startrow + cell.mergestart + 1 first_col = startcol + cell.col + 1 last_col = startcol + cell.mergeend + 1
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
__virtualname__ = 'lowpkg'
from __future__ import unicode_literals
self.n_iter_final = it
request = self.factory.get('////absolute-uri') self.assertEqual( request.build_absolute_uri(), 'http://testserver//absolute-uri' )
assert_array_equal(clf.predict(T), true_result)
from salt.states import user
import salt.utils import salt.utils.cloud as suc from salt.exceptions import SaltCloudException
return self.block.values
datacenter_id = 2
params.update(body) return params
self.assert_redirect_to_register_looks_correct(actions.do_complete(backend, social_views._do_login))
class ArticleForm(Form): title = CharField() pub_date = DateField()
if not download_video_link and self.download_video: if self.source: download_video_link = self.source elif self.html5_sources: download_video_link = self.html5_sources[0]
self.assertEqual(len(mail.outbox), 0) user_status = VerificationStatus.objects.filter(user=self.user).count() self.assertEqual(user_status, 0)
cert = GeneratedCertificate.eligible_certificates.get(user=self.student) self.assertEqual(cert.status, CertificateStatuses.notpassing)
_skip_if_no_xlrd()
course_url = '/home/' resp = self.client.get_html(course_url) self.assertEquals(resp.status_code, 200)
attrs[k] = v
new_indexed_count = self.index_recent_changes(store, before_time) self.assertEqual(new_indexed_count, 5)
HAS_RANGE = False try: import seco.range HAS_RANGE = True except ImportError: pass
if not compat.is_platform_windows(): f('M8[ns]')
'tcp_pull_port': int,
if self.beta0 is not None: self.beta0 = np.atleast_2d(self.beta0) if self.beta0.shape[1] != 1: self.beta0 = self.beta0.T
download_template_deps = ('dist', 'release', 'arch')
CONFIG_FILE = open(settings.REPO_ROOT / "docs" / "lms_config.ini") CONFIG = ConfigParser.ConfigParser() CONFIG.readfp(CONFIG_FILE)
LOGGER.info('Retrying task to award failed certificates to user %s', username) raise self.retry(countdown=countdown, max_retries=config.max_retries)
return (unpickle_inner_exception, (attached_to, name), self.args)
self._is_frame = isinstance(sample, DataFrame) if self._is_frame: axis = 1 if axis == 0 else 0
license_text = self.q(css='section.license span.license-text') if license_text.is_present(): return license_text.text[0] return None
np.random.seed(0)
if subcommand in no_settings_commands: settings.configure()
tm.assert_frame_equal(frame1, frame3)
est = pickle.loads(pickle.dumps(est)) assert_true(sparse.issparse(est.coef_)) pred = est.predict(X) assert_array_equal(pred, pred_orig)
import matplotlib.pyplot as plt
course_email_template = course_email.get_template() try: connection = get_connection() connection.open()
CONTRIB_TESTS_TO_APPS = { 'flatpages_tests': 'django.contrib.flatpages', 'redirects_tests': 'django.contrib.redirects', }
mako_middleware_process_request(request)
import salt.ext.six as six from salt.ext.six import string_types, text_type from salt.ext.six.moves.urllib.parse import urlparse
tempdir = tempfile.mkdtemp() egg = zipfile.ZipFile(top_dirname) egg.extractall(tempdir) top = os.path.join(tempdir, base) os.chdir(tempdir)
self.assertEqual(hexewkb_2d, pnt_2d.hexewkb) self.assertEqual(hexewkb_3d, pnt_3d.hexewkb) self.assertEqual(True, GEOSGeometry(hexewkb_3d).hasz)
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor' )
return cls(app_name, app_module)
rng = np.random.RandomState(0) X = rng.normal(size=(10, 4)) y = multioutput_estimator_convert_y_2d(name, X[:, 0]) regressor = Regressor()
self.assertNumQueries(2, f.delete)
import salt.utils.http
self.assertEqual(ed.books.count(), 2) self.assertEqual(fred.books.count(), 1)
assert_raises(ValueError, _fast_dot, A.T, np.array([A, A]))
if 'X-Edx-Api-Key' in self.headers: response = self.server._response_str logger.debug("Comment Service: sending response %s", json.dumps(response))
return False
if self.initial_index is None: return self.index.get('versions', {}).keys()
classifier.set_params(class_weight='balanced') coef_balanced = classifier.fit(X, y).coef_.copy()
return force_text(name.replace('\\', '/'))
systemd.__salt__ = {} systemd.__context__ = {}
('INNERGRID', (1, 1), (-2, -1), 0.50, '#cccccc'),
empty = DataFrame({})
data = 'a,b,c\n4,5,6\n#comment' result = self.read_csv(StringIO(data), comment='#') tm.assert_frame_equal(result, expected)
theano_rng = MRG_RandomStreams(2013*5*4) cost_weights = theano_rng.normal(size=output_conv2d.shape, dtype=output_conv2d.dtype) cost = (cost_weights * output).sum()
'search_index_interval': int,
self.assertNotIn("enrollment_action", self.captured_request.POST) self.assertNotIn("course_id", self.captured_request.POST)
for idxr in [lambda x: x.ix, lambda x: x]:
if suffix: raise ValueError("Bad freq suffix %s" % suffix) return cls()
_maybe_remove(store, 'wp7')
model_ransac = linear_model.RANSACRegressor(linear_model.LinearRegression()) model_ransac.fit(X, y) inlier_mask = model_ransac.inlier_mask_ outlier_mask = np.logical_not(inlier_mask)
cidx3 = CategoricalIndex(list('aabbb'), categories=list('abc')) idx3 = Index(list('aabbb'))
if not layout[ax.rowNum + 1, ax.colNum]: continue if sharex or len(ax.get_shared_x_axes() .get_siblings(ax)) > 1: _remove_labels_from_axis(ax.xaxis)
source = name
import salt.utils.error
OGRException = GDALException
__SKLEARN_SETUP__
ex_sls.add(exc)
if tm.is_platform_32bit(): raise nose.SkipTest("32-bit platform buggy: {0} -> {1}".format (from_key, to_key))
wtf_numpy = np.zeros((n_classes,)) for i in xrange(n_classes): wtf_numpy[i] = probs[i] probs = wtf_numpy
vmhost = vm_['host'] newnode['vmid'] = newid
expected = mock_mean(x) assert_equal(mean_x, expected.astype('float64'))
from salt.config import minion_config
estimators = [ ('Eigenfaces - RandomizedPCA', decomposition.RandomizedPCA(n_components=n_components, whiten=True), True),
if self.is_active != is_active and is_active is not None: self.is_active = is_active activation_changed = True
if is_object_dtype(args[0]): raise TypeError(e) raise
kwargs = {'srid': srs.srid, 'auth_name': auth_name, 'auth_srid': auth_srid or srs.srid, 'proj4text': srs.proj4, }
a.update({'c': 3}) b.update({'c': 3}) self.assertNotEqual(a, b)
try: block = self.make_block(transf(values.astype(value.dtype))) return block.setitem(indexer=indexer, value=value, mgr=mgr)
start = request.json.get('start', CourseFields.start.default) run = request.json.get('run')
clf = RandomForestClassifier(n_estimators=25) clf.fit(X_train_valid, y_train_valid) clf_probs = clf.predict_proba(X_test) score = log_loss(y_test, clf_probs)
result = set() for v in na_values: try: v = float(v) if not np.isnan(v): result.add(v) except: pass return result
if not data: data = json.dumps({})
sample_weight = sample_weight * sample_mask.astype(np.float64)
self.shell.exec_cmd('rm \'$HOME/{0}\''.format(target_shim_file))
if not name: return 'Required parameter "name" not passed'
tfidf_test2 = tv.transform(test_data).toarray() assert_array_almost_equal(tfidf_test, tfidf_test2)
world.xqueue.config['default'] = response_dict
res = dfmix.copy() res.replace(regex=r'\s*\.\s*', value=nan, inplace=True) assert_frame_equal(dfmix, res.fillna('.'))
url(r'^api/val/v0/', include('edxval.urls')),
import salt.utils import salt.utils.decorators as decorators from salt.utils.odict import OrderedDict
from __future__ import absolute_import
DECIMAL_SEPARATOR = '.' THOUSAND_SEPARATOR = ','
if isinstance(data, dict): data = [data]
def put(self, *args, **kwargs): return self.post(*args, **kwargs)
self._for_write = True try: return self.get(**lookup), False except self.model.DoesNotExist: return self._create_object_from_params(lookup, params)
import salt.returners import salt.utils.pushover from salt.exceptions import SaltInvocationError
response = self.http_get_for_course(HTTP_AUTHORIZATION=None) self.assertEqual(response.status_code, 401)
response.set_cookie_wrapped_func = response.set_cookie response.set_cookie = _set_cookie_wrapper
try: import certifi HAS_CERTIFI = True except ImportError: HAS_CERTIFI = False
try: username, password = find_credentials(host) except SaltSystemExit as err: log.critical('Error: {0}'.format(err)) return False
dive = Book.objects.using('other').get(title='Dive into Python') self.assertEqual(dive._state.db, 'other')
resp = self.client.post(reverse('shoppingcart.views.use_code'), {'code': 'coupon1'}) self.assertEqual(resp.status_code, 200)
from __future__ import absolute_import import sys
return bits
task = object_ref.Clone(folder_ref, vm_name, clone_spec) salt.utils.vmware.wait_for_task(task, vm_name, 'clone', 5, 'info')
return u"{verification_reminder} {refund_reminder}".format( verification_reminder=verification_reminder, refund_reminder=refund_reminder )
if ':::' in ip_str: return False
name = self.cleaned_data.get("name").strip() or None
return False
return Polygon(LinearRing(ll, (ll[0], ur[1]), ur, (ur[0], ll[1]), ll), srid=4326)
if com.is_categorical(arr): return arr.take_nd(indexer, fill_value=fill_value, allow_fill=allow_fill) elif com.is_datetimetz(arr): return arr.take(indexer, fill_value=fill_value, allow_fill=allow_fill)
self.assertQuerysetEqual(Article.objects.all(), [ '<Article: Time to reform copyright>', '<Article: Poker has no place on ESPN>', ])
header = [field for field in output[0].lower().split(" ") if field] del output[0]
_maybe_remove(store, 'wp') store.put('wp', wp, format='table')
poem = super(PoemForm, self).save(commit=False) poem.name = "Brooklyn Bridge" if commit: poem.save() return poem
from __future__ import absolute_import, print_function import os
for i in range(max_iter): centers_old = centers.copy() labels, inertia = \ _labels_inertia(X, x_squared_norms, centers, precompute_distances=precompute_distances, distances=distances)
sw = np.sqrt(np.atleast_1d(sample_weight)) y = y * sw[:, np.newaxis] K *= np.outer(sw, sw)
error_summary = _("An error occurred while creating your receipt.")
left = self.rng[:5] right = self.rng[10:]
raise TypeError("Unknown object type in has_access(): '{0}'" .format(type(obj)))
self.assertRaises(AssertionError, BlockManager, blocks, axes)
os.environ['REQUIRE_BUILD_PROFILE_OPTIMIZE'] = 'none'
summary = '[' + summary[len(space2):]
next_offset = None
raise ItemNotFoundError(locator)
if not srs: raise SRSException('Could not create spatial reference from: %s' % srs_input) else: self.ptr = srs
for minion in get_minions():
self.label_distributions_ = np.zeros((n_samples, n_classes)) for label in classes: self.label_distributions_[y == label, classes == label] = 1
xT_A = self.lmul(self.transpose_left(x, True)) rval = self.transpose_right(xT_A, True) return rval
except ValueError: pass
opts = self.model._meta return opts.get_field(self.geom_field)
ct = self.get(pk=id) self._add_to_cache(self.db, ct)
parsed_115 = read_stata(self.dta19_115) parsed_117 = read_stata(self.dta19_117) tm.assert_frame_equal(expected, parsed_115, check_categorical=False) tm.assert_frame_equal(expected, parsed_117, check_categorical=False)
FOOTER_ORGANIZATION_IMAGE = "images/logo.png"
self.conn.connect()
try: import memcache HAS_MEMCACHE = True except ImportError: HAS_MEMCACHE = False
__grains__ = {}
if spatialite or oracle: qs = qs.exclude(name='Texas')
if estimator_error == 0: break
for role_name in role_names: role = Role.objects.get(name=role_name, course_id=course_key) user.roles.add(role)
win_shadow.__salt__ = {}
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
assert_raises(Exception, getattr(delegator, method), delegator_data.fit_args[0])
__virtualname__ = 'bluetooth'
for v in (v1, v2): counts_test = v.transform(test_data) if hasattr(counts_test, 'tocsr'): counts_test = counts_test.tocsr()
D, E = pairwise_distances_argmin_min(X, Y, metric=minkowski, metric_kwargs={"p": 2}) assert_array_almost_equal(D, [0, 1]) assert_array_almost_equal(E, [1., 1.])
return [c for c in data_columns if c in axis_labels]
from __future__ import absolute_import import logging import socket
htmlhelp_basename = 'edxdoc'
try:
import salt.ext.six as six
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
self.assertEqual( self.store.has_published_version(course1_item), self.store.has_published_version(course2_item) )
self.conn.put_method.return_value = method_ret self.conn.put_integration.side_effect = ClientError(error_content, 'put_integration')
('defunct-paying', 'defunct-paying'),
import salt.utils import salt.payload
__virtualname__ = 'fluent'
script = "calculated_ans = 'x+x'"
values = converted if not isnull(converted).all() else values values = values.copy() if copy else values
from __future__ import absolute_import
chaos_user = UserFactory() locked_toc = self._return_table_of_contents() for toc_section in self.expected_locked_toc: self.assertIn(toc_section, locked_toc)
xpath = "//div[@class='{0}']".format(expected_css_class) self.assert_has_xpath(xml, xpath, self.context)
import yaml
if address_predefined: os.environ['DJANGO_LIVE_TEST_SERVER_ADDRESS'] = old_address else: del os.environ['DJANGO_LIVE_TEST_SERVER_ADDRESS']
self.assertRaises(Exception, self.panel4d.reindex, major_axis=new_major, major=new_major)
self.expect = contextualize_text(xml.get('expect') or xml.get('answer'), self.context)
self.run_command('write_salt_version')
raise Exception( "invalid combinate of [%s] on appending data [%s] vs " "current table [%s]" % (c, sv, ov))
api.remove_credit_requirement_status("bob", self.course_key, "grade", "grade")
from __future__ import absolute_import
if isinstance(value, datetime): return value.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0) return value.replace(month=1, day=1)
UserFactory.create(username=self.USERNAME, email=self.EMAIL, password=self.PASSWORD)
return None
assert_raises(ValueError, cval.StratifiedShuffleSplit, y, 3, 0.2)
self.save()
except (TypeError, AttributeError, KeyError, ValueError, IndexError):
import salt.config import salt.transport.ipc
return {'ok': False, 'msg': msg}
xi_, yi, swi, idx = dataset._random_py() xi = sp.csr_matrix((xi_), shape=(1, X.shape[1]))
idx = MultiIndex.from_arrays(([1, 2, 3, 1, 2, 3], [1, 1, 1, 1, 2, 2]))
with self.assertRaises(Error): Reporter.objects.create(first_name="Cuthbert", last_name="Calculus")
self.assertContains(response, "\n1 pluggable search person\n") self.assertContains(response, "Amy")
def dec(func): return self.tag(name, func) return dec
self.a.headline = 'Parrot programs in Python' self.a.save()
urlpatterns += url(r'^template/(?P<template>.+)$', 'openedx.core.djangoapps.debug.views.show_reference_template'),
assert_warns(UserWarning, BaggingRegressor(base_estimator=DecisionTreeRegressor(), n_estimators=1, bootstrap=True, oob_score=True, random_state=rng).fit, X_train, y_train)
is_dst = np.hstack((is_dst, is_dst)) localized = di.tz_localize(tz, ambiguous=is_dst) dr = dr.append(dr) self.assert_index_equal(dr, localized)
def set( self, answer_id=None, correctness=None, npoints=None, msg='', hint='', hintmode=None, queuestate=None,
credit_state = self.service.get_credit_state(self.user.id, self.course.id) self.assertNotIn('course_name', credit_state)
raise UnserializableContentError("Control characters are not supported in XML 1.0")
@method_decorator(csrf_exempt) def dispatch(self, request, *args, **kwargs): return super(CreditCourseViewSet, self).dispatch(request, *args, **kwargs)
module = CapaFactory.create(max_attempts="1", attempts="0", due=self.yesterday_str) self.assertTrue(module.closed())
__virtualname__ = 'shadow'
if hasattr(zmq, 'RECONNECT_IVL_MAX'): self.socket.setsockopt( zmq.RECONNECT_IVL_MAX, 5000 )
if self.is_open: raise PossibleDataLossError( "Re-opening the file [{0}] with mode [{1}] " "will delete the current file!" .format(self._path, self._mode) )
#raise Exception("No backend was set, but @figure was used!") import matplotlib matplotlib.use('agg')
idx = mapping if isinstance(flat, CompositeSpace): assert 0 <= idx < len(flat.components) return flat.components[idx] else: assert idx == 0 return flat
with self.assertRaises(AttributeError): CommonInfo.objects.all()
containers = [__salt__['dockerng.inspect_container'](c)['Id'] for c in containers] networks = __salt__['dockerng.networks'](names=[name]) if networks:
sess_cookies = None
npy_filename_root = os.path.join(preprocess('${PYLEARN2_DATA_PATH}'), 'icml07data', 'npy', npy_filename)
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
self.assertFalse(all_gradesets[student3]) self.assertFalse(all_gradesets[student4])
self._enable_cohorting() self._create_verified_cohort() self._create_named_random_cohort("Random 1") self._create_named_random_cohort("Random 2") self._enable_verified_track_cohorting()
except ValueError as e: raise nose.SkipTest("No indicators returned data: {0}".format(e))
from salt.pillar import hg_pillar HGLIB = hg_pillar.hglib
subset = s[:'2012-01-04 06:55']
self.code_book_ = random_state.random_sample((n_classes, code_size_)) self.code_book_[self.code_book_ > 0.5] = 1
from salt.exceptions import CommandExecutionError
VERIFY_STUDENT["SOFTWARE_SECURE"] = { "API_ACCESS_KEY": "BBBBBBBBBBBBBBBBBBBB", "API_SECRET_KEY": "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", }
from __future__ import absolute_import import sys import warnings
s_list = list('aaa') s_series = Series(s_list) s_series_index = Series(s_list, list('ABC'))
tm.assert_index_equal(df.set_index([df.index, df.index]).index, mi2)
for student in students[2:5]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.error, mode='honor' )
X[:, j] = np.hstack((v, z, p))
'states_dirs': list,
self.returners['{0}.save_load'.format(self.opts['master_job_cache'])](jid, job_load)
log.exception("Error in get_module") return None
with self.assertRaisesRegexp(CommandError, "^No courses found for orgs:"): self._run_command("other_org")
import salt.utils as utils
from __future__ import absolute_import
__virtualname__ = 'file'
arr = np.random.randn(10) df = DataFrame(arr, index=[1, 2, 3, 4, 5, 1, 2, 3, 4, 5])
df = orig.copy() df.loc["j", :] = ["b", 2] tm.assert_frame_equal(df, exp_single_row)
self._init_state()
return option_together
from __future__ import absolute_import
try: import pythoncom import win32com.client HAS_DEPENDENCIES = True except ImportError: HAS_DEPENDENCIES = False from salt.ext.six.moves import range
MODEL_METHODS_EXCLUDE = ('_', 'add_', 'delete', 'save', 'set_')
for ds in dataset: for prop in properties.keys():
try:
PathInfo = namedtuple('PathInfo', 'from_opts to_opts target_fields join_field m2m direct')
__virtualname__ = 'etcd'
from salt.modules import rh_service
return "django_date_extract('%s', %s)" % (lookup_type.lower(), field_name)
self.assertEqual( self.client.session.get_expire_at_browser_close(), expire_at_browser_close )
item_list_generator = _generate_items_for_subtask( item_querysets, item_fields, total_num_items, items_per_task, total_num_subtasks, entry.course_id, )
if not available(name): return False
with tempfile.NamedTemporaryFile(mode='w', prefix='shim_', delete=False) as shim_tmp_file: shim_tmp_file.write(cmd_str)
assert_series_equal(nat_series_dtype_timedelta * 1.0, nat_series_dtype_timedelta) assert_series_equal(1.0 * nat_series_dtype_timedelta, nat_series_dtype_timedelta)
return _('TBD')
return False
next_offset = offset + MAX_STUDENTS_PER_PAGE_GRADE_BOOK previous_offset = offset - MAX_STUDENTS_PER_PAGE_GRADE_BOOK
wp = Panel(vals, copy=True) self.assertIsNot(wp.values, vals)
result = query(params) return result['InstanceId']
import salt.ext.six as six
with translation.override('pl'): result = management.call_command('leave_locale_alone_true', stdout=StringIO()) self.assertEqual(result, "pl")
if not (ipv4_re.match(query) or is_valid_ipv6_address(query)): query = socket.gethostbyname(query)
current_time = datetime.datetime.now(UTC()) if override_time is not False: current_time = override_time
return [os.path.join(app.path, 'locale') for app in app_configs]
if deadline is None: return candidates[0]
check_estimators_unfitted("estimator", CorrectNotFittedErrorClassifier)
self.cleaned_data['requested_fields'] |= {'field1', 'field2', 'student_view_data', 'block_counts'} self.assert_equals_cleaned_data()
import sys from salt.ext.six.moves import map if sys.version_info < (2, 7): import unittest2 as unittest else: import unittest
iterator=False, chunksize=None,
cost_value.name = 'objective'
if new_datetime is not None: self.expiration_datetime_is_explicit = True self._expiration_datetime = new_datetime
input_dict = {'1_2_1': '42'} correct_map = problem.grade_answers(input_dict)
def f(): cat.add_categories(["d"])
CREDIT_PROVIDER_TIMESTAMP_EXPIRATION = 15 * 60
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
enet.set_params(alpha=alpha_optim) coef_ = enet.fit(X, y).coef_
self.assertTrue(check_password({}, 'test', 'test'))
ret[key] = {'old': old[key], 'new': new[key]}
import os import inspect import pkgutil import warnings import sys import re import platform import struct
return HttpResponseRedirect(next_page)
ps_uncached = self._create_service(username)
if mask is not None: m = ~mask.ravel().astype(bool, copy=False) if not m.all(): rows = rows[m]
from __future__ import absolute_import
result = self.get_result(allow_cache_miss) self.verify_result_with_val_profile(result)
self.assertFalse(res_json['success']) self.assertEqual( res_json['message'], u'Invalid data, generate_for must be "new" or "all".' )
log.warning( '{0} remote \'{1}\' is an empty repository and will ' 'be skipped.'.format(self.role, self.id) ) return False
with tm.assertRaises(AttributeError): plotting.grouped_hist(df.A, by=df.C, foo='bar')
td = Timedelta(min_td.value - 1, 'ns') self.assertIsInstance(td, pd.tslib.NaTType)
if not _run_all(cmd, 'error', 'Error creating bcache partitions on {0}: {{0}}'.format(dev)): return False dev = '{0}2'.format(dev)
executor.loader.build_graph()
s2 = s.copy() cop = s.copy() cop[omask] = 5 s2[mask] = 5 assert_series_equal(cop, s2)
import time import math import fnmatch import logging from copy import copy from collections import defaultdict
result = df.reindex(columns=lrange(5), fill_value=0.) expected = df.copy() expected[4] = 0. assert_frame_equal(result, expected)
frame = self.frame.copy() frame2 = self.frame.copy()
self.instructor = AdminFactory.create() self.client.login(username=self.instructor.username, password="test")
INSTALLED_APPS += ('openedx.core.djangoapps.api_admin',)
msg = "No valid user id found in endpoint URL" log.info("[LTI]: {}".format(msg)) raise LTIError(msg)
linux_sysctl.__salt__ = {} linux_sysctl.__context__ = {} systemd.__context__ = {}
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
if problem_type in ("radio_text", "checkbox_text"): selector_template = "input#{}_2_{input}" else: selector_template = "input#input_{}_2_{input}"
self.assertEqual(original.__class__, unpickled.__class__) self.assertEqual(original.args, unpickled.args)
random_state = check_random_state(0) y_true = random_state.randint(0, 2, size=(20, )) y_pred = random_state.randint(0, 2, size=(20, ))
try_quick = False
django_args.append('--help')
request = self.request_factory.get('/', {'date_registered__isnull': 'True'}) changelist = self.get_changelist(request, Book, modeladmin)
set_user_preference(self.user, "dict_pref", {"int_key": 10}) set_user_preference(self.user, "string_pref", "value")
return self.values.fill_value
with mock.patch.dict('django.conf.settings.FEATURES', {'ENABLE_MKTG_SITE': True}): result = get_email_params(self.course, True)
CourseEnrollmentFactory.create(user=self.user, course_id=self.course.id, is_active=True)
(solution_id, subset_choices) = self.sample_from_answer_pool(choices_list, rng, num_choices)
tempdir = tempfile.mkdtemp() egg = zipfile.ZipFile(top_dirname) egg.extractall(tempdir) top = os.path.join(tempdir, base) os.chdir(tempdir)
if not isinstance(config, dict): return False, ('Configuration for twilio_txt_msg beacon ' 'must be a dictionary.') return True, 'Valid beacon configuration'
if is_pointer_tag(node): definition['filename'] = [filepath, filepath]
with self.assertRaises(exceptions.TemplateRuntimeError): env.from_string('{{ document|load_json }}').render(document={"foo": "it works"})
self.store.delete_item( orphan.location, self.user.id, skip_auto_publish=True )
value = deepcopy(opts[name])
handlers = [handlers]
import integration import salt.utils
if 'salt' in kws: kws['salt'] = AliasedLoader(kws['salt'])
indexer = _update_indexer(_convert_to_indexer( self.get_loc_level(k, level=i, drop_level=False)[0]), indexer=indexer)
import collections
url('^中文/target/$', views.index_page),
try: SETUP_DIRNAME = os.path.dirname(__file__) except NameError: SETUP_DIRNAME = os.path.dirname(sys.argv[0])
locale_dirs = ['locale/']
set_course_cohort_settings( course_key=self.course.id, is_cohorted=False, cohorted_discussions=["Topic_A"], always_cohort_inline_discussions=False, ) check_cohorted_topics([])
from salt.modules import djangomod
ret['comment'] = 'Event module not available. Beacon disable job failed.'
if not locations: locations = [get_location()]
condition = label.any(axis=1) return tuple(var.compress(condition, axis=0) for var in (train, label))
template_attrs = ('template_name', 'context_data', '_post_render_callbacks') for attr in template_attrs: self.assertFalse(hasattr(unpickled_response, attr))
self.assertFalse(linode._validate_name('-foo'))
self.assertContains(response, unicode(self.course.id))
clf = GradientBoostingClassifier(n_estimators=10, random_state=1)
(self.left_join_keys, self.right_join_keys, self.join_names) = self._get_merge_keys()
if self.restricted.filter(user=student).exists(): cert.status = status.restricted cert.save()
if 0 not in classes[j]: classes[j] = np.insert(classes[j], 0, 0) class_prob_j = np.insert(class_prob_j, 0, 0.0)
log = logging.getLogger(__name__)
self.download_results = None
with self.assertRaises(ValueError): Author.objects.annotate(book_contact_set=Avg('friends__age'))
db.reset_queries()
pred_entropies = stats.distributions.entropy(lp_model.label_distributions_.T)
state_client.set( username=admin.username, block_key=usage_key, state={'field_a': 'x', 'field_b': 'y'} )
iface['up'] = (val != 'Media disconnected')
value = models.TextField(default='null')
if not conf.get('sparse', False): valid_set = valid_set.get_value(borrow=True) test_set = test_set.get_value(borrow=True)
sdb.__opts__ = {}
self.estimators_ = []
import salt.config as config import salt.utils.cloud from salt.exceptions import SaltCloudSystemExit, SaltCloudException
lkey, rkey, count = _factorize_keys(lkey, rkey, sort=sort)
if not course_org_filter: org_filter_out_set = microsite.get_all_orgs() if org_filter_out_set: exclude_dictionary['org'] = list(org_filter_out_set)
data2 = fetch_rcv1(shuffle=True, subset='train', random_state=77, download_if_missing=False) X2, Y2 = data2.data, data2.target s2 = data2.sample_id
offset = datetools.DateOffset(months=3) result = date_range("2011-1-1", "2012-1-31", freq=offset)
xpath = "//div[@class='%s inline']" % div_class self.assert_has_xpath(xml, xpath, self.context)
mode = 'create' user_attr = __salt__['postgres.role_get']( name, return_password=not refresh_password, **db_args) if user_attr is not None: mode = 'update'
greek.append('infty')
can_introspect_default = True
script = "raise Exception('test')" problem = self.build_problem(answer=script)
X, y = datasets.make_hastie_10_2(n_samples=12000, random_state=1) _, n_features = X.shape
self.wait_for_ajax()
resp = self.client.get_html(get_url('container_handler', self.vert_loc)) self.assertEqual(resp.status_code, 200)
self.assertRaises(KeyError, df.ix.__setitem__, ([0, 1, 2], [2, 3, 4]), 5)
np.testing.assert_almost_equal(np.diag(cm), np.ones(cm.shape[0]))
rng = date_range('1/1/2000', '1/30/2000') frame = DataFrame(np.random.randn(len(rng), 4), index=rng)
return Index(values, name=arg.name)
return ( super(FieldOperation, self).reduce(operation, in_between, app_label=app_label) or not operation.references_field(self.model_name, self.new_name, app_label) )
for field, error_list in self._errors.items(): if not isinstance(error_list, self.error_class): self._errors[field] = self.error_class(error_list)
if not settings.FEATURES.get('ENABLE_EXPORT_GIT'): filtered_list.append('giturl')
assert_true(resample() is None)
assert_raises(ValueError, unique_labels)
import salt.utils
from __future__ import absolute_import import re import logging
import urllib2 urlopen = urllib2.urlopen
target_found = True
from __future__ import unicode_literals
dense_classifier = IsolationForest( n_estimators=10, random_state=1, **params).fit(X_train) dense_results = dense_classifier.predict(X_test)
with self.assertRaisesMessage(ValueError, self.error % (self.wrong_type, ObjectA._meta.object_name)): ObjectB.objects.get(objecta=self.wrong_type)
import logging import os
if _TRAFFICLINE: cmd = _traffic_line('-S') else: cmd = _traffic_ctl('server', 'stop')
ng + obj
non_cohort.users.add(*user_list) non_cohort.users.clear() self.assertFalse(mock_tracker.emit.called)
log = logging.getLogger(__name__)
if not multilabel: labels = frombuffer_empty(labels, np.float64) data = frombuffer_empty(data, actual_dtype) indices = frombuffer_empty(ind, np.intc)
self.assertNotIn(self.notes_tab, self.course.tabs)
def f(): Categorical.from_codes([1, 2], [1, 2])
world.wait_for(lambda _: world.css_text('#data-student-profiles-table') not in [u'', u'Loading'])
poly.exterior_ring = new_shell
text = f.widget.format_value(result) self.assertEqual(text, "01:30:00 PM")
from salt.utils import dictupdate
result = f.clean('13:30') self.assertEqual(result, time(13, 30, 0))
if self.protocol is not None: protocol = self.protocol if protocol is None: protocol = 'http'
from __future__ import unicode_literals
if salt.utils.is_proxy() and 'proxy' in __opts__: return True return (False, 'The marathon execution module cannot be loaded: this only works in proxy minions.')
logging.getLogger('boto3').setLevel(logging.CRITICAL) HAS_BOTO = True
raise TypeError
from salt.modules import deb_postgres
salt.log.setup.shutdown_multiprocessing_logging()
if use in colors: for color in colors: if color == 'ENDC': continue colors[color] = colors[use]
next_cart = Order.get_cart_for_user(user=self.user) self.assertNotEqual(cart, next_cart) self.assertEqual(next_cart.status, 'cart')
AVAIL_SVR_DIRS = []
self.run_function('pkg.remove', [DEL_PKG]) del_list = self.run_function('pkg.list_pkgs') try: self.assertNotIn(DEL_PKG, del_list) except AssertionError: raise
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandExecutionError
target_org = org or microsite_org courses = CourseOverview.get_all_courses(org=target_org, filter_=filter_)
return
def f(): s.set_categories([4, 3, 2, 1])
module = module + '.' if not module.endswith('.') else module
import salt.pillar
if found_using_guid: for update in wua_search_result.Updates: wua_found.Add(update) else: for update in wua_search_result.Updates: if name in update.Title: wua_found.Add(update)
return 'some html safe content'
received_objects = fetch_results.received_objects
assert_equal(len(folds), len(labels)) for i in np.unique(folds): assert_greater_equal(tolerance, abs(sum(folds == i) - ideal_n_labels_per_fold))
else:
from __future__ import absolute_import import time import logging
all_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))
assert_equals(out.count("But it is "), 1)
if 'tgt_type' not in data: data['tgt_type'] = 'glob' kwargs = {}
return "datetime64[{unit}, {tz}]".format(unit=self.unit, tz=self.tz)
dt = Timestamp('20130101 09:10:11') result = dt.round('D') expected = Timestamp('20130101') self.assertEqual(result, expected)
tup = '(' + ', '.join("'%s'" % column_to_field_name[c] for c in columns) + ')' unique_together.append(tup)
raise CommandExecutionError('Service not found: {0}'.format(name))
pref = UserPreference.get_value(user, 'testkey_none') self.assertIsNone(pref)
#'papersize': 'letterpaper',
import salt.utils from salt.exceptions import CommandExecutionError
valid_input, field_errors = get_valid_input(request.data) if field_errors: return Response( status=status.HTTP_400_BAD_REQUEST, data={ 'field_errors': field_errors } )
from __future__ import absolute_import from ctypes import CDLL, POINTER, Structure, CFUNCTYPE, cast, pointer, sizeof from ctypes import c_void_p, c_uint, c_char_p, c_char, c_int from ctypes.util import find_library
X, y = make_classification(n_samples=500, n_features=25, n_clusters_per_class=1, n_informative=15, random_state=RANDOM_STATE)
greek += [x.capitalize() for x in greek]
pkg, ver = line.split(None)[1].rsplit('-', 1)
if (axis is None and not all([other._get_axis(i).equals(ax) for i, ax in enumerate(self.axes)])): raise InvalidIndexError
from __future__ import absolute_import import logging
if (self.index_label and isinstance(self.index_label, (list, tuple, np.ndarray, Index))): index_labels = self.index_label
def new_child(self, m=None): if m is None: m = {} return self.__class__(m, *self.maps)
idx = idx.item(0)
class SongForm(Form): artist = CharField() name = CharField()
harmonics = np.arange(0, coeffs.shape[0]) + 1 trig_args = np.outer(harmonics, t)
verify_date_or_time(COURSE_END_TIME_CSS, DEFAULT_TIME) verify_date_or_time(ENROLLMENT_START_TIME_CSS, DEFAULT_TIME) verify_date_or_time(ENROLLMENT_END_TIME_CSS, DUMMY_TIME)
def test_barycenter_kneighbors_graph(): X = np.array([[0, 1], [1.01, 1.], [2, 0]])
microsite_url = get_microsite_url(name) if microsite_url != EMPTY_URL: return microsite_url
SALT_KEEPALIVE = 99
required_fields = set(fields) all_fields = set(self.fields.keys()) for field_name in all_fields - required_fields: self.fields.pop(field_name)
B = safe_sparse_dot(Q.T, M)
myrole: boto_iam_role.present: - profile: key: GKTADJGHEIQSXMKKRBJ08H keyid: askdjghsdfjkghWupUjasdflkdfklgjsdfjajkghs region: us-east-1
raise ValueError( "kd_tree algorithm does not support callable metric '%s'" % metric)
continue
rng = check_random_state(404) y_pred = rng.rand(10)
return conn.validate_template(template_body, template_url)
class MyModel5(ConcreteParentWithManager): class Meta: manager_inheritance_from_future = True self.assertIs(MyModel5.default, MyModel5._default_manager) self.assertIsNone(getattr(MyModel5, 'objects', None))
self.shell = EmbeddedSphinxShell(exec_lines, self.state)
import salt.ext.six as six
try:
update = salt.utils.alias_function(refresh_db, 'update')
courses_list_by_staff, __ = get_courses_accessible_to_user(self.request) self.assertEqual(len(courses_list_by_staff), TOTAL_COURSES_COUNT)
idx = self.panel4d.major_axis[0] - bday self.assertRaises(Exception, self.panel4d.major_xs, idx)
content = content.replace(' ', '') self.assertIn('dependencies=[\n]', content) self.assertIn('operations=[\n]', content)
y = rng.randn(n_samples) r.fit(x, y) assert_equal(r.cv_values_.shape, (n_samples, n_alphas))
self.assertEqual(len(Tag.objects.order_by('parent')), 5)
cc = salt.utils.cache.ContextCache(__opts__, __name__) retrieved_cache = cc.get_cache_context() self.assertDictEqual(retrieved_cache, __context__)
col_line = [] if self.index:
pro = Book.objects.using('other').create(pk=1, title="Pro Django", published=datetime.date(2008, 12, 16))
'ALLOW_UNICODE_COURSE_ID': False,
kwargs['program'] = self.script
if fastpath:
from __future__ import absolute_import import os import os.path import tempfile
for key, val in six.iteritems(repo_conf): setattr(self, key, val)
textid = 14 while textid == 14: textid = rng.randint(1, 113)
if len(rtnv) == 0: rtnv.append([])
from salt.states import postgres_group
for block in blocks: if blocks[block]['block_type'] == 'sequential': block_format = blocks[block]['format'] if block_format not in assignments: assignments[block_format] = OrderedDict() assignments[block_format][block] = list()
python_suite = suites.PythonTestSuite('Python Tests', **opts) js_suite = suites.JsTestSuite('JS Tests', mode='run', with_coverage=True)
from __future__ import absolute_import import logging
self._future._future_with_timeout = self if self._future.done(): future_with_timeout_callback(self._future)
if value is None and key != '_id.revision': del query[key]
for name, value in tb_frame.f_locals.items(): cleansed[name] = CLEANSED_SUBSTITUTE
self.series[5:15] = np.NaN
self.assertEqual(f.clean('2010-12-21 13:30:05'), datetime(2010, 12, 21, 13, 30, 5))
length, width = self.full_shape stride = values.shape[1] result_width = width * stride result_shape = (length, result_width)
idx = RangeIndex(0, 1000, 2) result = idx ** 2 expected = idx._int64index ** 2 tm.assert_index_equal(Index(result.values), expected, exact=True)
res_row = df.iloc[2, :] tm.assert_series_equal(res_row, exp_row) tm.assertIsInstance(res_row["cats"], compat.string_types)
self.assertNotIn(self.module_key, self.loader)
option2=main2
dangling_pointer = course.id.make_usage_key('chapter', 'DanglingPointer')
subject = ''.join(subject.splitlines()) body = loader.render_to_string(email_template_name, context)
result = Timestamp(result) self.assertEqual(result.value, expected_tz) self.assertEqual(tslib.pydt_to_i8(result), expected_tz)
df['x'] = 'none' df.ix[2:7, 'x'] = ''
memberships = list(CourseTeamMembership.get_memberships(team_id=team_id))
if rows is not None: if len(self.buf) >= rows: new_rows, self.buf = self.buf[:rows], self.buf[rows:]
from __future__ import absolute_import import os import re import uuid import logging
raise ValueError("No point was within bandwidth=%f of any seed." " Try a different seeding strategy \ or increase the bandwidth." % bandwidth)
clf = svm.SVC(kernel='linear', probability=True, random_state=0) probas_pred = clf.fit(X[:half], y[:half]).predict_proba(X[half:])
if self._count >= self.start: return self.final_momentum return self._init_momentum
host_c = salt.utils.fopen('/etc/hosts', 'r').readlines()
return HttpResponseBadRequest(u'Could not parse request course key.')
with patch.dict(local_cache.__opts__, {'keep_jobs': 0.00000001}): local_cache.clean_old_jobs()
step = str(Decimal('1') / 10 ** self.decimal_places).lower()
df = pd.DataFrame({'A': [1, 2, 1], 'B': [1, 2, 3]}) g = df.groupby('A')
recons.columns = df.columns
log_proba = clf.predict_log_proba(X)
if order_items.count() == 1: receipt_template = order_items[0].single_item_receipt_template context.update(order_items[0].single_item_receipt_context)
provider = CreditProvider.objects.get() provider.active = False provider.save()
return CourseDetails.fetch_about_attribute(course_overview.id, 'overview')
import os import logging
self.batch_size = batch_size if (isinstance(dataset[0], theano.Variable)): self.dataset = [set.get_value(borrow=True) for set in dataset] else: self.dataset = dataset
if not wildcards: return dn.lower() == hostname.lower()
elif isinstance(proxy, six.string_types): return preprocess(proxy) else: return proxy
if params: parameters.update(params)
setattr(self.__class__, 'has_%s_method' % method, property(partial(BaseSpatialFeatures.has_ops_method, method=method)))
service = super(ModuleSystem, self).service(block=block, service_name=service_name) if callable(service): return service(block) return service
self.assertEqual(len(email_info), 1)
ret['Comment'] = "Failed with failure code: {0}".format(exc[5]) ret['Success'] = False
courses2 = import_course_from_xml( self.store, self.user_id, self.export_dir, source_dirs=[top_level_export_dir], static_content_store=contentstore, target_id=dest_course_key2, create_if_not_present=True, raise_on_failure=True, )
ma = MyModelAdmin(model, admin.site) ff = ma.formfield_for_dbfield(model._meta.get_field(fieldname), request=None)
u'\xa0': u' ', u'\u2013': u'-',
self.client.logout()
self.assertIsNone(df.is_copy) df['letters'] = df['letters'].apply(str.lower) self.assertIsNone(df.is_copy)
ret = {} for minion, data in six.iteritems(returns): ret[minion] = json.loads(data) return ret
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.wait_for( lambda: "added to this cohort" in self.get_cohort_confirmation_messages(wait_for_messages=True)[0], "Student(s) added confirmation message." )
self.dataset_remote_dir = "" self.dataset_local_dir = ""
if num_steps != 1: for i in xrange(num_steps): layer_to_state = self.sample(layer_to_state, theano_rng, layer_to_clamp, num_steps=1) return layer_to_state
ret['changes'] = exc.info.get('changes', {}) ret['comment'] = exc.strerror_without_changes
for msg in messages.get_messages(request): if msg.extra_tags.split()[0] == "social-auth":
from django.core import management
latex_domain_indices = False
self.white_label_course_mode.min_price = 0 self.white_label_course_mode.suggested_prices = ''
assert_raises(ValueError, plot_partial_dependence, {}, X, [0])
text = f.widget.format_value(result) self.assertEqual(text, '21.12.2010')
__virtualname__ = 'nova'
msg = _(u"An error occurred with SymbolicResponse. The error was: {error_msg}").format( error_msg=err, ) raise Exception(msg)
self.start = time.time() self.connected = True
input_dict = {'1_2_1': '-999', '1_2_2': '2', '1_2_3': '3'} correct_map = problem.grade_answers(input_dict)
if 'enabled' in kwargs: return _enabled_used_error(ret)
if not self._is_master_running(): raise salt.exceptions.SaltDaemonNotRunning( 'Salt Master is not available.')
get_request_dict = {CapaFactory.input_key(): '0'} result = module.check_problem(get_request_dict)
del poly
text = f.widget.format_value(result) self.assertEqual(text, '21.12.2010')
fk_kwargs = {} for field_name, ogr_name in rel_mapping.items(): fk_kwargs[field_name] = self.verify_ogr_field(feat[ogr_name], rel_model._meta.get_field(field_name))
n_expected = combinations(n_population, n_samples, exact=True)
__virtualname__ = 'pkg' log = logging.getLogger(__name__)
verbose_name=_("Changed by"),
check(8, False) check(8, True)
#pylint: disable=E0602
course.mobile_available = False with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred): self.store.update_item(course, ModuleStoreEnum.UserID.test)
STATUS_MESSAGE_PATH = ENV_ROOT / "status_message.json"
timed_exam_attempt_context = None try: timed_exam_attempt_context = get_attempt_status_summary( user.id, unicode(course.id), unicode(section.location) )
import numpy as np import itertools import collections import scipy.ndimage as ndi from pandas.compat import zip, range
_ = self.runtime.service(self, "i18n").ugettext check = _('Check') final_check = _('Final Check')
if (isinstance(labels, MultiIndex) and not isinstance(objarr[0], tuple)): level = 0 _, indexer = labels.reindex(objarr, level=level)
f.DEFAULT_CHUNK_SIZE = 4 self.assertEqual(list(f), [b'one\r\n', b'two\r\n', b'three'])
import tornado.gen from Crypto.Cipher import PKCS1_OAEP from Crypto.PublicKey import RSA
if not os.path.isfile(config): raise CommandExecutionError('Bad config file "{0}"'.format(config))
tup3 = next(df3.itertuples()) self.assertFalse(hasattr(tup3, '_fields')) self.assertIsInstance(tup3, tuple)
X = np.zeros((n_samples, n_features)) y = np.zeros(n_samples, dtype=np.int)
p.mugshot.size self.assertEqual(p.mugshot.closed, True)
qs = Book.objects.annotate(num_authors=Count('authors')) pickle.dumps(qs)
new_sum_squared_grad = ( sum_square_grad + T.sqr(grads[param]) )
best = sorted(grid_scores, key=lambda x: x.mean_validation_score, reverse=True)[0] self.best_params_ = best.parameters self.best_score_ = best.mean_validation_score
if self.op in (_cmp_ops_syms + _bool_ops_syms): return np.bool_ return _result_type_many(*(term.type for term in com.flatten(self)))
django_cache.clear() config_cache.clear()
for candidate in candidates: if system.resources_fs.exists(candidate): filepath = candidate break
'tcp_keepalive_idle': float,
from __future__ import absolute_import, print_function import os import sys import types import signal import getpass import logging import optparse import traceback import yaml from functools import partial
DateTimeModel.objects.create(d=d, dt=dt2, t=t) self.assertEqual(m, DateTimeModel.objects.get(dt__date=d))
self.cohort_management_page.select_cohort_some_inline_discussion()
strides = None total_buffer_len = None
pass
idx = TimedeltaIndex(['2H', '4H', '6H', '8H', '10H'], freq='2H', name='x')
import warnings import operator import sys import time
'shoppingcart.context_processor.user_has_cart_context_processor',
est = DummyRegressor(strategy="quantile", quantile=0.5) est.fit(X_learn, y_learn) y_pred_learn = est.predict(X_learn) y_pred_test = est.predict(X_test)
attempt.mark_ready() attempt.submit(copy_id_photo_from=initial_verification)
'http_request_timeout': float,
region[np.logical_and(firstring, righthalf)] = 2 region[np.logical_and(secondring, np.logical_not(righthalf))] = 2
no = models.IntegerField(verbose_name="Number", blank=True, null=True)
with patch.dict(local_cache.__opts__, {'keep_jobs': 0.00000001}): local_cache.clean_old_jobs()
stringToSign = 'GET&%2F&' + percent_encode(canonicalizedQueryString[1:])
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
try: mod = import_module(app + '.startup') except ImportError: continue
algorithm = "full"
lim = 8
from __future__ import absolute_import import os
with MongoContentstoreBuilder().build() as self.contentstore: with modulestore_builder.build(contentstore=self.contentstore) as self.store: self._create_course(self.store) yield
if cert_mode == CourseMode.CREDIT_MODE: cert_mode = CourseMode.VERIFIED
ret = { 'name': name, 'changes': {}, 'result': False, 'comment': '', }
arr = [1] + [5] * 2592 idx = dti[0:-1:5] idx = idx.append(dti[-1:]) expect = Series(arr, index=idx)
p2 = Poll(question="How?") self.assertEqual(repr(p2.choice_set.all()), '<QuerySet []>')
self.assertFalse(library_container.has_validation_error) self.assertFalse(library_container.has_validation_warning)
self.assertEquals(destination_course.wiki_slug, destination_wiki_slug)
applied = self.frame.apply(np.sqrt) assert_series_equal(np.sqrt(self.frame['A']), applied['A'])
obj = NearestCentroid() obj.fit(iris.data, iris.target) score = obj.score(iris.data, iris.target) s = pickle.dumps(obj)
from django.contrib.gis.sitemaps.kml import KMLSitemap, KMZSitemap
"remote_id": 'remote_' + username,
except StopIteration: log.info("Extension requested training halt.") continue_learning = False
if 'pinned' not in thread.attributes: thread['pinned'] = False
from __future__ import absolute_import import os import sys import stat import codecs import shutil import hashlib import socket import tempfile import time import subprocess import multiprocessing import logging import pipes import msgpack import traceback import copy import re import uuid
cache.set('future_foo', 'bar') self.assertEqual(cache.get('future_foo'), 'bar')
request_headers = self.request.headers.get('Access-Control-Request-Headers') allowed_headers = request_headers.split(',')
return False
#pylint: disable=E0602
import_array() import_ufunc()
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
dist_matrix = np.dot(self.centroids_, subcluster.centroid_) dist_matrix *= -2. dist_matrix += self.squared_norm_ closest_index = np.argmin(dist_matrix) closest_subcluster = self.subclusters_[closest_index]
sample_weight = np.ones(y.shape) sample_weight[y == 1] *= 100
metrics_report = (Env.METRICS_DIR / "safecommit") _write_metric(violations_count_str, metrics_report) sh("cat {metrics_report}".format(metrics_report=metrics_report), ignore_error=True)
from __future__ import absolute_import
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.course_info_page.visit() self.tab_nav.go_to_tab('Test Static Tab') self.assertTrue(self.tab_nav.is_on_tab('Test Static Tab'))
powerpath.__salt__ = {}
course_cohort_settings = get_course_cohort_settings(course_key) if not course_cohort_settings.is_cohorted: return request_cache.data.setdefault(cache_key, None)
patch_stack = patches.reshape((B*OR*OC, KR*KC*CH))
METRIC_UNDEFINED_MULTICLASS = [ "brier_score_loss", "matthews_corrcoef_score", ]
list_args = ' '.join(str_args) _validate_ret(parallels._normalize_args(list_args))
self.envelope = poly.envelope
for address in addresses: formatted_addresses.append('{0}, {1}'.format(address.strip(), addresses[address].strip()))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.assertEqual(block.edited_by, "testassist@edx.org") self.assertDictEqual( block.grade_cutoffs, {"Pass": 0.45}, )
return _get_enabled_disabled("true")
num_purchases = 0 for item in purchases: num_purchases += 1 self.assertEqual(num_purchases, 2)
GeoIPRecord_delete = lgeoip.GeoIPRecord_delete GeoIPRecord_delete.argtypes = [RECTYPE] GeoIPRecord_delete.restype = None
f = lambda x: x.sort_values('b', inplace=True) _check_f(data.copy(), f)
resp = self.client.get(course_wiki_page, follow=False, HTTP_REFERER=referer) self.assertEqual(resp.status_code, 302)
import salt.utils import salt.utils.decorators as decorators from salt.utils.locales import sdecode as _sdecode from salt.exceptions import CommandExecutionError, SaltInvocationError
l = [1, 2, 3]
target = GDALRaster(ds_input, write=True)
return auth_data
while j < lenidx and (values[j] < r_bin or (closed == 'right' and values[j] == r_bin)): j += 1
year = datetime.date.today().year age_limit = settings.PARENTAL_CONSENT_AGE_LIMIT profile.year_of_birth = (year - age_limit) - 1 profile.save()
monitoring_dataset = DenseDesignMatrix(X=X)
__func_alias__ = { 'set_': 'set', 'rm_': 'rm' }
message=string_concat( SimpleLazyObject(lambda: prefix % params), SimpleLazyObject(lambda: error.message % error_params), ), code=code, params=dict(error_params, **params),
win_timezone.__salt__ = {}
GENERAL_ASSET_TYPE = 'asset'
from __future__ import absolute_import import logging import re
try: field = model._meta.get_field(item) except FieldDoesNotExist: try: field = getattr(model, item) except AttributeError: field = None
preds2 = np.zeros_like(y) for train, test in cv: est.fit(X[train], y[train]) preds2[test] = est.predict(X[test])
return type(self)()
if ltype: cmd = '{0} -t {1}'.format(cmd, ltype)
from __future__ import absolute_import import errno import functools import logging import os import re import shutil import time import tempfile
instructor_task = InstructorTask.objects.get(id=instructor_task.id) instructor_task.task_state = PROGRESS instructor_task.save()
render_args, _ = module.system.render_template.call_args context = render_args[1] self.assertIn("error", context['problem']['html'])
test_environ = os.environ.copy() if sys.platform.startswith('java'): python_path_var_name = 'JYTHONPATH' else: python_path_var_name = 'PYTHONPATH'
from salt.modules import sysmod
self.course_enrollment = CourseEnrollment.enroll(user=self.user, course_key=self.course_id, mode=self.mode) self.save()
self.page.visit() config = self.page.experiment_group_configurations[0] config.toggle() config.click_outline_anchor()
from salt.exceptions import SaltInvocationError import salt.utils
else: rows -= len(self.buf)
options = repo_string.strip().split() branch = options[0] repo_location = options[1] root = ''
return (os.path.normcase(os.path.abspath(src)) == os.path.normcase(os.path.abspath(dst)))
else: ret = _load_result(existing, ret)
supports_nullable_unique_constraints = True
global __FQDN__ grains = {}
import salt.utils
X = check_array(X, accept_sparse=['csr', 'csc'])
tm._skip_if_no_scipy()
self.assertEqual(form.instance.left, 1)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
cursor = connection.cursor() commands = connections[DEFAULT_DB_ALIAS].ops.sequence_reset_sql(no_style(), [models.Post]) for sql in commands: cursor.execute(sql)
converted = self.mixed_frame.copy() with assertRaisesRegexp(ValueError, 'invalid literal'): converted['H'].astype('int32')
self.assert_redirect_to_provider_looks_correct(self.client.get( pipeline.get_login_url(self.provider.provider_id, pipeline.AUTH_ENTRY_LOGIN)))
DECIMAL_SEPARATOR = ','
if name in CROSS_DECOMPOSITION: for iter_ in estimator.n_iter_: assert_greater_equal(iter_, 1) else: assert_greater_equal(estimator.n_iter_, 1)
STRUCT_SIZE = {
def f(): Categorical.from_codes([0, 1, 2], ["a", "a", "b"])
[(CourseMode.DEFAULT_SHOPPINGCART_MODE_SLUG, CourseMode.DEFAULT_SHOPPINGCART_MODE_SLUG)]
yield check_estimators_nan_inf
'error': _("Problem is closed."),
_check_plot_works(df.hist, bins=5)
templates_path = add_base(['_templates'])
return "DATE_TRUNC('%s', %s)" % (lookup_type, field_name)
if not activation_key: activation_key = uuid.uuid4().hex
return arg
other = Int64Index(np.arange(25, 14, -1))
self._bind_module(lc_block) self.assertEqual(len(lc_block.children), num_to_create) self.assertEqual(len(lc_block.get_child_descriptors()), num_expected)
self.assertTrue(BulkEmailFlag.feature_enabled(self.course.id))
instance_map = weakref.WeakKeyDictionary()
if not (entry == '.' or entry.startswith(('file://', '/'))): match = egg_match.search(entry)
from __future__ import absolute_import
raise
series = self.series.copy() self.assertRaises(TypeError, setattr, series, 'index', None)
self.config.pop(self._logfile_loglevel_config_setting_name_)
yield val
additional_noise[np.abs(additional_noise) < .997] = 0
log = logging.getLogger(__name__)
use_cache = credential_configuration.is_cache_enabled and not user.is_staff cache_key = credential_configuration.CACHE_KEY + '.' + user.username if use_cache else None
data = BytesIO(self._body)
if compat.PY3: try: text = compat.bytes_to_str( text, encoding=(kwargs.get('encoding') or get_option('display.encoding')) ) except: pass
xpath = "//div[@class='indicator-container']/span" self.assert_no_xpath(xml, xpath, self.context)
input_data = ifile.read() if not input_data.strip(): log.error('Template is nothing but whitespace: {0}'.format(template)) return ret
import salt.ext.six as six import tornado.ioloop import tornado.iostream
from __future__ import absolute_import
self.assertEqual(ONE_TO_ONE_CLASSES, {f.__class__ for f in o2o_type_fields})
old_duration = self.parallel._smoothed_batch_duration if old_duration == 0: new_duration = this_batch_duration else: new_duration = 0.8 * old_duration + 0.2 * this_batch_duration self.parallel._smoothed_batch_duration = new_duration
import integration from salt.config import cloud_providers_config from salt.ext.six.moves import range
cost = SumOfCosts([SumOfParams(), (0., DummyCost())]) model = DummyModel(shapes, lr_scalers=scales) dataset = ArangeDataset(1) momentum = 0.5
df = DataFrame(index=lrange(10), columns=['a', 'b'], dtype=int) self.assertEqual(df.values.dtype, np.object_)
self.upgrade_page.proceed_to_payment()
context['courses_list'] = microsite.get_template_path('courses_list.html')
expanded_cached_pkg = str(os.path.expandvars(cached_pkg))
super(BinomialDeviance, self).__init__(1)
if open_jids: for jid in open_jids: self.event.unsubscribe(jid)
if np.fabs(result) > _int64_max: raise ValueError("overflow in timedelta operation")
lshf = LSHForest(min_hash_match=31) ignore_warnings(lshf.fit)(X_train)
self._get_penalty_type(self.penalty) self._get_learning_rate_type(self.learning_rate)
import copy import os import re import logging import json
self._goto_problem_page()
self.assertTrue(config['blah'])
shutil.rmtree(self.dirname)
@ddt.data(*flatten(CONTAINER_XMODULES))
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
updates = dict([(key, val) for key, val in kwargs.items() if not key.startswith('__')])
pkg_params = {name: version_num}
self.assertTrue(self.video.select_language('zh'))
request.POST['queuekey'] = fake_key self.mock_module.handle_ajax.assert_called_once_with(self.dispatch, request.POST)
- cn=admin,dc=example,dc=com: - delete_others: True - replace: cn: - admin description: - LDAP administrator objectClass: - simpleSecurityObject - organizationalRole userPassword: - {{pillar.ldap_admin_password}}
ret['result'] = None return ret
rb = {0: 'Never Requires Reboot', 1: 'Always Requires Reboot', 2: 'Can Require Reboot'} results[guid]['RebootBehavior'] = rb[update.InstallationBehavior.RebootBehavior]
self.calc_zoom = False if self.polygons or self.polylines or self.markers: if center is None or zoom is None: self.calc_zoom = True
str_args = 'electrolytes --aqueous --anion hydroxide --cation=ammonium free radicals -- hydrogen' _validate_ret(parallels._normalize_args(str_args))
problem_location = task_input.get('problem_location') student_data = list_problem_responses(course_id, problem_location) features = ['username', 'state'] header, rows = format_dictlist(student_data, features)
if unit_no_ax0_reindexing: join_unit_indexers.pop(0, None) else: join_unit_indexers[0] = ax0_blk_indexer
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
response = self._load_dashboard() self.assertContains(response, "credit-request-approved-msg")
module_store_setting['default']['OPTIONS']['stores'] = convert_old_stores_into_list( get_mixed_stores(module_store_setting) ) assert isinstance(get_mixed_stores(module_store_setting), list)
self.prev_floatX = config.floatX config.floatX = 'float64'
self.assertEqual(content.content_type, 'application/pdf')
result = Timedelta(nanoseconds=100) expected = Timedelta('100ns') self.assertEqual(result, expected)
if __opts__.get('state_output_diff', False) and \ ret['result'] and not schanged: continue
from salt.modules import pam
try: import hglib except ImportError: hglib = None
self.student = UserFactory(username=uname, password=password, email=email)
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'rackspace' DRIVER_NAME = 'openstack'
if not snapshot: ret['error'] = 'one or more snapshots must be specified'
HANDLER_CLASS = StubHttpRequestHandler
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
__virtualname__ = 'reg'
if org_to_include and course_overview.location.org != org_to_include: continue
fld_name = model_field.__class__.__name__
response = self.client.get(url) self.assertContains(response, 'Have debug')
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return grade_request['xqueue_header']
venv_dir = os.path.join( integration.TMP, 'pip-installed-specific-env' )
import salt.utils.dictupdate as dictupdate
xs = self.mixed_frame.ix[5] exp = self.mixed_frame.xs(self.mixed_frame.index[5]) assert_series_equal(xs, exp)
for resource, xblock_name in itertools.product(self.test_recommendations.values(), self.XBLOCK_NAMES): self.call_event('add_resource', resource, xblock_name)
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True], credit_type='edc' )
qs = RasterModel.objects.filter(**combo)
self.assertEqual(response.status_code, 302)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
df = DataFrame([[1, 2]]) res = df.mask(DataFrame([[True, False]])) expec = DataFrame([[nan, 2]]) assert_frame_equal(res, expec)
resp_params = PaymentFakeView.response_post_params(post_params) self.assertEqual(resp_params.get('decision'), 'ACCEPT')
__virtualname__ = 'raid'
course_key = CourseKey.from_string(course_id) self.assertTrue(CreditCourse.objects.filter(course_key=course_key, enabled=enabled).exists())
Site.objects.clear_cache()
FEATURES['ENABLE_MKTG_SITE'] = True FEATURES['USE_MICROSITES'] = True
from __future__ import absolute_import import atexit import os import readline import sys from code import InteractiveConsole
from salt.version import __version_info__ return {'saltversioninfo': list(__version_info__)}
try: course_code_number = int(request.POST['total_registration_codes']) except ValueError: course_code_number = int(float(request.POST['total_registration_codes']))
self.system.error_tracker(msg) return 'Oops, couldn't load grommet'
return _error(ret, u_check)
if hasattr(searchindex, 'decode'): searchindex = searchindex.decode('UTF-8')
from __future__ import absolute_import
if http_event_collector_debug: log.debug('auto flushing')
def default(self, noDefaultEncodingObj): return noDefaultEncodingObj.value.replace("<script>", "sample-encoder-was-here")
if not changes.get('purge_desired'): changes = changes['installed']
if mod_opts.get('websockets', False): from . import saltnado_websockets
cond = Series([True, False, False, True, False], index=s.index) s2 = -(s.abs())
import logging
stack = []
cur.executemany(cmd, newitems)
stride = np.prod(shape[1:nlev], dtype='i8') out = stride * labels[0].astype('i8', subok=False, copy=False)
self.assertFalse(com.is_number(np.bool_(False))) self.assertTrue(com.is_number(np.timedelta64(1, 'D')))
for item in ret: self.assertSaltTrueReturn(item)
cp = df.copy() cp['a'] = cp['b'].values assert_frame_equal(cp['a'], cp['b'])
call_command('manage_group', TEST_GROUP) self.check_groups([TEST_GROUP])
self.logout() self.login(self.global_staff_user) self.assertTrue(self.enroll(self.course))
smaller = self.intframe.reindex(columns=['A', 'B', 'E']) self.assertEqual(smaller['E'].dtype, np.float64)
'retry_dns': float,
total_n_estimators = self.n_estimators if total_n_estimators < self.estimators_.shape[0]: raise ValueError('resize with smaller n_estimators %d < %d' % (total_n_estimators, self.estimators_[0]))
from_hex = BinConstructor('GEOSGeomFromHEX_buf') from_wkb = BinConstructor('GEOSGeomFromWKB_buf') from_wkt = GeomOutput('GEOSGeomFromWKT', [c_char_p])
self.process_manager.stop_restarting() self.process_manager.send_signal_to_processes(signum) self.process_manager.kill_children()
if options['course']: try: course = CourseKey.from_string(options['course']) except InvalidKeyError: course = SlashSeparatedCourseKey.from_deprecated_string(options['course'])
if name in _plotting_methods: return self.apply(curried)
frame = self.frame.copy() frame2 = self.frame.copy()
self._check_double_roundtrip(df, tm.assert_frame_equal, compression='zlib', check_frame_type=True)
request_token=None, course=course
sr = self.layer.srs
if not isnull(y): y = bool(y) result = lib.scalar_binop(x, y, op)
mat = empty((2, 3), dtype=float) frame = DataFrame(mat, columns=['A', 'B', 'C'], index=[1, 2])
models_dict.pop(next_model) for model, dep_list in models_dict.iteritems(): if next_model in dep_list: dep_list.remove(next_model)
'top_file': str,
callback_url_path = reverse('certificates.views.update_example_certificate')
dest_info.edit_info.previous_version = dest_info.edit_info.update_version dest_info.edit_info.update_version = old_dest_structure_version dest_info.edit_info.edited_by = user_id dest_info.edit_info.edited_on = datetime.datetime.now(UTC)
text = f.widget.format_value(result) self.assertEqual(text, "13:30:00")
elif self.ndim == 3:
if isinstance(command, dict): plugin = next(six.iterkeys(command)) args = command[plugin] else: plugin = command args = ''
try: import Crypto.Random except ImportError:
from __future__ import absolute_import import logging import pprint import re import time import datetime
AccessTestData(expected_access=True), AccessTestData(xblock_access={1: None}, expected_access=True), AccessTestData(xblock_access={1: []}, expected_access=True),
axis += 1
idx = DatetimeIndex(['2016-05-16', 'NaT', NaT, np.NaN])
all_y_hat = Parallel(n_jobs=n_jobs, verbose=self.verbose, backend="threading")( delayed(parallel_helper)(e, 'predict', X, check_input=False) for e in self.estimators_)
import integration from integration.utils import testprogram import salt.utils import salt.defaults.exitcodes
return np.dot(A, B)
self._send_immediate_response(True)
self.set_logged_in_cookies(request)
import salt.utils import os.path from salt.modules import key
data = data.astype(float)
from __future__ import absolute_import import sys
user = User.objects.get(email=EMAIL) self.assertEqual(user.username, EDX_USER_ID)
self._initialize_mixed(contentstore=contentstore, mappings={})
try: import dateutil.parser as dateutil_parser _WHEN_SUPPORTED = True _RANGE_SUPPORTED = True except ImportError: _WHEN_SUPPORTED = False _RANGE_SUPPORTED = False
return 'ERROR: Failure deploying thin, undefined state: {0}'.format(stdout), stderr, retcode
self.fake_payment_page.submit_payment()
video_data = local_cache['course_videos'].get(video_descriptor.edx_video_id, {})
for k in xrange(n_folds): this_blocks = [] for i, layer in enumerate(layers): this_blocks.append(layer[k]) this_stacked_blocks = StackedBlocks(this_blocks) stacked_blocks.append(this_stacked_blocks)
delattr(obj.__class__, self.name)
all_assets, count = contentstore('trashcan').get_all_content_for_course(self.course.id) self.assertEqual(len(all_assets), 0) self.assertEqual(count, 0)
available_version = latest_version
event_info['correct_map'] = correct_map.get_dict() event_info['success'] = success event_info['attempts'] = self.attempts self.track_function_unmask('problem_rescore', event_info)
res = dfobj.replace(r'\s*\.\s*', nan, regex=True) assert_frame_equal(dfobj, res.fillna('.'))
repo_dir = os.path.abspath(git_export_utils.GIT_REPO_EXPORT_DIR) os.mkdir(repo_dir) self.addCleanup(shutil.rmtree, repo_dir)
try:
tm.assert_index_equal(df.set_index(df.index).index, mi)
self.assertEqual(response.status_code, 403)
import salt.utils from salt.ext.six import string_types
try: structure = CourseStructure.objects.get(course_id=course_key) structure.discussion_id_map_json = None structure.save() except CourseStructure.DoesNotExist: pass
cachedir = self.cachedir[:-7] if self.cachedir is not None else None return (self.__class__, (cachedir, self.mmap_mode, self.compress, self._verbose))
try:
cls.clear_caches()
res = dfmix.replace(re.compile(r'\s*\.\s*'), nan, regex=True) assert_frame_equal(dfmix, res.fillna('.'))
self.assertEqual(f.clean('2010-12-21'), date(2010, 12, 21))
ptr = property(_get_ptr, _set_ptr)
self.assertRedirects(resp, settings.LOGIN_REDIRECT_URL + '?next=/home/')
import salt.ext.six as six
providers = OAuth2ProviderConfig.objects.all() pcount = len(providers)
for item in labels: setter(item, value)
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
self.kwds['color'] = [self.kwds['color']]
import salt.cloud import salt.utils.cloud from salt.exceptions import SaltCloudException, SaltCloudSystemExit import salt.ext.six as six import salt.syspaths as syspaths log = logging.getLogger(__name__)
BROKER_POOL_LIMIT = 0 BROKER_CONNECTION_TIMEOUT = 1
labels = km.predict(X) assert_equal(v_measure_score(true_labels, labels), 1.0)
set_runtime_service('instructor', InstructorService())
cmd = ['/usr/sbin/pkgrm', '-n', '-a', adminfile] + targets out = __salt__['cmd.run_all'](cmd, python_shell=False, output_loglevel='trace')
estimators = all_estimators(include_meta_estimators=True)
self.assertRaises(Exception, lp2.truncate, wp.major_axis[-2], wp.major_axis[2])
for l in [slice(3.0, 4), slice(3, 4.0), slice(3.0, 4.0)]:
scaled = scaler.fit_transform(iris.data) separate_pred = km.fit_predict(scaled)
if existing['code'] == 200:
from salt.modules import alternatives
if not isinstance(servers, list): ret['result'] = False ret['comment'] = 'servers entry is not a list !' return ret
if (pip or distribute) and not os.path.exists(venv_setuptools): _install_script( 'https://bitbucket.org/pypa/setuptools/raw/default/ez_setup.py', path, venv_python, user, saltenv=saltenv, use_vt=use_vt )
form = CourseEmailTemplateForm(form_data) self.assertFalse(form.is_valid())
'sls_list': list,
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.guitar_book, self.django_book, self.djangonaut_book])
result = DataFrame.from_records(documents, index=['order_id', 'quantity']) self.assertEqual(result.index.names, ('order_id', 'quantity'))
self.assertTrue('Activate Course Enrollment' in response.content)
if not isinstance(config, dict): return False, ('Configuration for wtmp beacon must be a dictionary.') return True, 'Valid beacon configuration'
for field_name in self.DEFAULT_FIELDS: self.field_handlers[field_name](form_desc, required=True)
D = fa C = fpa db = b - a * one
orig_score = self.lcp.get_score() event_info['orig_score'] = orig_score['score'] event_info['orig_total'] = orig_score['total']
self.reload_course() new_tab_ids = [tab.tab_id for tab in self.course.tabs] self.assertEqual(new_tab_ids, tab_ids + [removed_tab]) self.assertNotEqual(new_tab_ids, orig_tab_ids)
if X.shape[1] == 1: ddof = 0
text = f.widget.format_value(result) self.assertEqual(text, "13:30:05")
comb = self.frame.combineMult(self.empty) assert_frame_equal(comb, self.frame)
sparse_results = sparse_classifier.predict_proba(X_test_sparse) dense_results = dense_classifier.predict_proba(X_test) assert_array_equal(sparse_results, dense_results)
from __future__ import unicode_literals
super(DBCacheTests, self).tearDown() self.drop_table()
train, test = set(train), set(test)
LOGGER.info(u"Output file: {file_path}".format(file_path=file_path))
if self._connecting_future.done(): self._connecting_future = self.connect() yield self._connecting_future
return
if instance.state == CourseCreator.DENIED or granted_state_change: send_user_notification.send( sender=sender, user=instance.user, state=instance.state )
from salt.states import pyenv
retcode = __salt__['cmd.retcode']('pw groupmod {0} -m {1}'.format( name, username), python_shell=False)
from __future__ import absolute_import
self.pub_channel.on_recv(self._process_cmd_socket)
for ax in axarr: if ax.is_last_row(): continue if sharex or len(ax.get_shared_x_axes() .get_siblings(ax)) > 1: _remove_labels_from_axis(ax.xaxis)
self.init_queries.append("CREATE TABLE inspector_ignored (path CHAR(4096))") self.init_queries.append("CREATE TABLE inspector_allowed (path CHAR(4096))")
the_union = self.index.union(self.index) self.assertIs(the_union, self.index)
self.assertFalse(VerifiedTrackCohortedCourse.is_verified_track_cohort_enabled(course_key))
get_geomn = GeomOutput('GEOSGetGeometryN', [GEOM_PTR, c_int])
self.instructor_dashboard_page = InstructorDashboardPage(self.browser, self.course_id) self.instructor_dashboard_page.visit() self.cohort_management_page = self.instructor_dashboard_page.select_cohort_management() self.cohort_management_page.wait_for_page()
module_dependencies=dependencies)
response = middleware.process_response(request, response)
import salt.utils.boto3 import salt.utils.compat import salt.utils
for v in values: if v is not None: ax = v._get_axis(self.axis) ax._reset_identity() return values
for pkgname in ret[reponame]: sorted_versions = sorted( [_LooseVersion(x) for x in ret[reponame][pkgname]], reverse=True ) ret[reponame][pkgname] = [x.vstring for x in sorted_versions]
agc = AgglomerativeClustering(n_clusters=2, connectivity=connectivity) agc.fit(X) n_samples = X.shape[0] n_nodes = agc.children_.shape[0] assert_equal(n_nodes, n_samples - 1)
os.write(fh_, str(os.getpid()))
points = ax.get_position().get_points() x_set.add(points[0][0]) y_set.add(points[0][1])
from __future__ import absolute_import import os import random import string
with tm.assert_produces_warning(FutureWarning): df.sort_index(by='a')
import salt.states.environ as envstate import salt.modules.environ as envmodule
return int(info[1][column:end])
if bucket_size: cmd += ' --bucket {0}'.format(bucket_size)
score_css = "div.chapters>section:nth-of-type({0}) div.sections>div:nth-of-type({1}) div.scores>ol>li".format( chapter_index, section_index )
preserve_names = not hasattr(target, 'name')
salt.log.setup.setup_multiprocessing_logging()
DATE_INPUT_FORMATS = [
expiration = attempt.created_at + timedelta(days=settings.VERIFY_STUDENT["DAYS_GOOD_FOR"]) before_expiration = expiration - timedelta(seconds=1) self.assertTrue(attempt.active_at_datetime(before_expiration))
urlpatterns += ( url(r'^certificates/', include('certificates.urls', app_name="certificates", namespace="certificates")),
GDAL_PIXEL_TYPES = {
CoursewareSearchIndexer.do_course_reindex(store, course.id)
self.assertEqual( Author.objects.none().aggregate(Avg('age')), {'age__avg': None} )
sql_string = 'NOT (%s)' % sql_string
name = name[2:-2]
X2 = rng.randint(5, size=(6, 100)) y2 = np.array([1, 1, 2, 2, 3, 3])
public_vertical = get_and_verify_publish_state('vertical', self.PUBLISHED_VERTICAL, True)
self.base_fields[MIN_NUM_FORM_COUNT] = IntegerField(required=False, widget=HiddenInput) self.base_fields[MAX_NUM_FORM_COUNT] = IntegerField(required=False, widget=HiddenInput) super(ManagementForm, self).__init__(*args, **kwargs)
non_int_round_dict = {'col1': 1, 'col2': [1, 2]} with self.assertRaises(TypeError): df.round(non_int_round_dict)
ret = self.run_run_plus(fun='fileserver.empty_dir_list', args=['backend="roots"']) self.assertIsInstance(ret['fun'], list)
import integration
if not username: username = request.user.username if username != request.user.username and not has_api_key_permissions: return Response(status=status.HTTP_404_NOT_FOUND)
with self.assertRaises(Http404): get_object_or_404(Article.objects.none(), title__contains="Run")
rcon = salt.utils.which('restorecon') if rcon: cmd = [rcon, fconfig] subprocess.call(cmd)
scheme_id = UserPartition.VERSION_1_SCHEME
return sig.replace(parameters=tuple(sig.parameters.values())[1:])
'LOG_POSTPAY_CALLBACKS': True,
from __future__ import absolute_import, print_function import os import sys import copy import time import hmac import base64 import hashlib import logging import stat import traceback import binascii import weakref import getpass
final_obj = OrderedDict(yaml.deserialize(yml_src)) assert obj != final_obj
nb_channel = int(get_scalar_constant_value(images.shape[0])) assert nb_channel % 16 == 0
if not _any_pandas_objects(terms): return _result_type_many(*term_values), None
asset_key = StaticContent.get_asset_key_from_path(course_key, relative_path)
ms = MeanShift() assert_false(hasattr(ms, "cluster_centers_")) assert_false(hasattr(ms, "labels_"))
from __future__ import absolute_import import json import logging import os
for saltenv in environments: env_files = [k for k in files if k['Key'].startswith(saltenv)]
'user_message': _(u"The ordering {ordering} is not supported").format(ordering=ordering),
self.update_enrollement("enroll", "newuser@hotmail.com") self.check_outbox("You have been")
if self.instance and self.instance.get("pinned") is None: self.instance["pinned"] = False
indexer = convert_to_index_sliceable(self, key) if indexer is not None: return self._getitem_slice(indexer)
raise RuntimeError("Infinite loop detected")
return StaticContent.compute_location(course_key, path)
self.assertIn('; %s' % http_cookies.Morsel._reserved['httponly'], str(example_cookie)) self.assertTrue(example_cookie['httponly'])
mi = mutual_info_classif(X, y, discrete_features=True) assert_array_equal(np.argsort(-mi), np.array([0, 2, 1]))
from __future__ import absolute_import import os import yaml import pipes import shutil
if self.hintmode == 'always': self.msg = self.hint + ('<br/>' if self.msg else '') + self.msg
import salt.utils
if salt.utils.is_windows(): fp_.close() try: os.unlink(fn_) continue except OSError: continue
if dtypes is None: dtypes = 'infer'
return launchctl('list', return_stdout=True, output_loglevel='trace', runas=runas)
if service_name == 'SSH' or service_name == 'ssh': temp_service_name = 'TSM-SSH' else: temp_service_name = service_name
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
patch_stack = patches.reshape((B*OR*OC, KR*KC*CH))
clone.real_models = self.real_models return clone
if value == 0: raise ValueError('The database backend does not accept 0 as a ' 'value for AutoField.') return value
addr_str = str(address) self._ip = self._ip_int_from_string(addr_str)
self._read_until_future.exc_info()
import integration
sh('find {dir} -type f -delete'.format(dir=directory))
response = self.client.get('/permission_protected_view/') self.assertRedirects(response, '/accounts/login/?next=/permission_protected_view/')
go_to_section("data_download")
import time import logging
labels = [x.reshape(n_shuffle, -1).ravel(order='F') for x in labels] names = self.names return MultiIndex(levels=levels, labels=labels, names=names)
pass
y = zca_dataset.adjust_for_viewer(x.T).T z = x/np.abs(x).max(axis=0) assert_allclose(z, y)
__virtualname__ = 'pkg'
'pillar_version': int,
with extend_sys_path(dirname): import_module('test_only_new_module') filenames = set(autoreload.gen_filenames(only_new=True)) self.assertEqual(filenames, {npath(filename)})
with self.assertRaises(ProtectedError): related.delete()
from __future__ import absolute_import
from __future__ import unicode_literals
dt = datetime(2011, 4, 16, 0, 0) ts = Timestamp.fromordinal(dt.toordinal()) self.assertEqual(ts.to_pydatetime(), dt)
#html_static_path.append('source/_static')
if best_doublecolon_end == len(hextets): hextets += [''] hextets[best_doublecolon_start:best_doublecolon_end] = [''] if best_doublecolon_start == 0: hextets = [''] + hextets
from student.roles import CourseCcxCoachRole, CourseInstructorRole, CourseStaffRole course_locator = course_id
X = generator.randn(n_samples, n_features)
resp = self.client.get(get_url('xblock_handler', handouts.location))
raise
migration_name_0001 = "my_initial_migration" content = cmd("0001", migration_name_0001) self.assertIn("dependencies=[\n]", content)
for key, val in six.iteritems(kwargs): ret['kwargs'][key] = str(type(val))
import logging import json
cherrypy.response.headers['Cache-Control'] = 'private'
h_mean = self.mean_h_given_v(v) h_mean_shape = (batch_size, self.nhid) h_sample = rng.binomial(size=h_mean_shape, n = 1, p = h_mean, dtype = h_mean.dtype)
Form(instance=None) FormSet(instance=None)
root = CourseFactory.build(days_early_for_beta="null") sequence = SequenceFactory.build(parent=root) ProblemFactory.build(parent=sequence)
v3.set_params(strip_accents='_gabbledegook_', preprocessor=None) assert_raises(ValueError, v3.build_preprocessor)
module = get_module( user, request, problem.scope_ids.usage_id, field_data_cache, )._xmodule module.system.publish(problem, 'grade', grade_dict)
s = Series([1., 2, 3], index=[0, 1, 2]) result = s.combine_first(Series([], index=[])) assert_series_equal(s, result)
course_about_accessor = lambda object, field_name: CourseDetails.fetch_about_attribute(object.id, field_name)
def arg_byref(args, offset=-1): "Returns the pointer argument's by-reference value." return args[offset]._obj.value
self.assertEqual(response.cookies, {}) self.assertEqual(response['Vary'], 'Cookie')
import salt.utils import salt.utils.itertools import salt.utils.decorators as decorators import salt.utils.pkg.rpm from salt.exceptions import ( CommandExecutionError, MinionError, SaltInvocationError )
self.assertEqual(certificate.get_text('.action-primary'), "Create") certificate.click_create_certificate_button() self.assertIn(course_title_override, certificate.course_title) return certificate
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
import salt.ext.six as six from salt.exceptions import SaltSystemExit
language = models.CharField(blank=True, max_length=255, db_index=True) location = models.CharField(blank=True, max_length=255, db_index=True)
p, h = prob_max_pool_c01b(z, (pool_rows, pool_cols), top_down = t) func = function([z, t], [p, h], mode = mode_with_gpu)
pd.reset_option('^display.', silent=True)
from __future__ import unicode_literals
self._mp_context = backend backend = "multiprocessing"
pool = ThreadPool(8) results = pool.map(self.read_csv, files) first_result = results[0]
try: indent = min(len(s) - len(s.lstrip()) for s in docstring if s.strip()) except ValueError: indent = 0
instance = model(pk=pk, **data)
self.assertTrue(EmbargoedCourse.is_embargoed(course_id)) self.assertEquals( unicode(cauth), u"Course '{course_id}' is Embargoed".format(course_id=course_id) )
from __future__ import absolute_import
self.polycollection_factor = 2
sfm = SelectFromModel(clf, threshold=0.25) sfm.fit(X, y) n_features = sfm.transform(X).shape[1]
self.distribution.salt_installing_m2crypto_windows = True self.run_command('install-m2crypto-windows') self.distribution.salt_installing_m2crypto_windows = None
xx = np.linspace(-1, 5, 10) yy = np.linspace(-1, 5, 10)
render_args, _ = module.system.render_template.call_args context = render_args[1] self.assertIn(error_msg, context['problem']['html'])
gc.collect() gc.collect()
messages.pop()
from salt.utils import configcomparer
return [item + '\n' for item in ifcfg]
import salt.utils import salt.utils.decorators as decorators
self.update_masquerade(role='student') self.verify_staff_debug_present(False)
expected = Series({'col': 'float64:sparse'}) result = df.ftypes tm.assert_series_equal(expected, result)
batch_size = old_batch_size
self.assertEquals(11, self.response.content.count('grade_F'))
data[s].ndim = len(data[s].shape)
time.sleep(time_between_creation)
return cls.objects.get(default=True).icon
import salt.ext.six as six
_NS = slice(None, None)
non_draft_loc = as_published(location)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
if args or kwargs: if is_callable(func):
text_document = self._white_spaces.sub(" ", text_document)
if isinstance(config[mod], dict): del config[mod]['enabled'] else: self._remove_list_item(config[mod], 'enabled')
root, k = _get_root(key) return root[k]
from salt.utils import network
msg = _format_terse(tcolor, comps, ret, colors, tabular) hstrs.append(msg) continue
return self.model.current()
clf = svm.LinearSVC(penalty='l2', dual=True, random_state=0).fit(X, Y) assert_array_equal(clf.predict(T), true_result)
cs_getx = CsOperation('GEOSCoordSeq_getX', get=True) cs_gety = CsOperation('GEOSCoordSeq_getY', get=True) cs_getz = CsOperation('GEOSCoordSeq_getZ', get=True)
z,zz = 0,0
a.gender = '' self.assertEqual(a.get_gender_display(), '')
return os.sep.join(__file__.split(os.sep)[:-4]) + '/data/uploads/' + filename
from __future__ import absolute_import from __future__ import print_function import logging
import integration from salttesting import skipIf
t2v = Index(t2.values) self.assertTrue(t1.equals(t2v)) self.assertFalse(t1.identical(t2v))
val1 = self.ts.asof(str(self.ts.index[7])) self.assertEqual(val1, self.ts[4])
post_params = sign(self.CLIENT_POST_PARAMS)
try: ranges.last.value = 'Failure' except InvalidElementStateException:
result = store.select('df', 'index>datetime.datetime(2013,1,5)') assert_frame_equal(result, expected)
new_minor = list(self.panel.minor_axis[:2]) result = self.panel.reindex(minor=new_minor) assert_frame_equal(result['ItemB'], ref.reindex(columns=new_minor))
version_line_index = 0 version_column_index = 1 line = lines[version_line_index].split()[version_column_index] return _format_return_data(0, stdout=line)
clf = cls().fit(X2, y2) assert_raises(ValueError, clf.predict, X2[:, :-1])
if not v.index.equals(index): v = v.reindex(index)
new_major = list(self.panel.major_axis[:10]) result = self.panel.reindex(major=new_major) assert_frame_equal(result['ItemB'], ref.reindex(index=new_major))
if com.is_bool_dtype(result): return result return Index(result)
return False
self.assertNotIn( 'test_content_field', new_version.get_explicitly_set_fields_by_scope(scope=Scope.content) ) self.assertNotIn( 'test_settings_field', new_version.get_explicitly_set_fields_by_scope(scope=Scope.settings) )
rbm1.random_state = 42 d_score = rbm1.score_samples(X) rbm1.random_state = 42 s_score = rbm1.score_samples(lil_matrix(X)) assert_almost_equal(d_score, s_score)
import os CMS_SEGMENT_KEY = os.environ.get('SEGMENT_KEY')
fixture_files_in_dir.append((candidate, fixture_dir, fixture_name))
world.staff = StaffFactory(course_key=world.course_key) world.enroll_user(world.staff, world.course_key)
dummy_v = T.tensor4() dummy_v.name = 'dummy_v'
empty_array = self._is_empty_array(value.shape) transposed = False
import os import fnmatch
disabled_ret = ('first second third | wc -l ; export SALTY_VARIABLE=saltines ' '&& echo $SALTY_VARIABLE ; echo duh &> /dev/null') ret_key = 'test_|-shell_enabled_|-{0}_|-configurable_test_state'.format(disabled_ret)
df = orig.copy() df.iloc[2:4, :] = [["b", 2], ["b", 2]] tm.assert_frame_equal(df, exp_multi_row)
df = sql.read_sql_table("types_test_data", self.conn) check(df.DateColWithTz)
def f(): df.loc['A1', (slice(None), 'foo')]
target = iris.target_names[iris.target] clf = GradientBoostingClassifier(n_estimators=10, random_state=1) clf.fit(iris.data, target)
if self.index.equals(new_axis): if copy: return self.copy(deep=True) else: return self
joined = left.join(right, on='key', sort=False) self.assert_index_equal(joined.index, pd.Index(lrange(4)))
cherrypy.server.unsubscribe()
colors_hsv = colors_hsv.reshape((1, )+colors_hsv.shape) colors_rgb = matplotlib.colors.hsv_to_rgb(colors_hsv) colors_rgb = colors_rgb[0]
f = lambda x: x.rename({1: 'foo'}, inplace=True) _check_f(data.copy(), f)
with tm.assert_produces_warning(FutureWarning): ind.order()
opts['open_mode'] = opts['open_mode'] is True opts['auto_accept'] = opts['auto_accept'] is True opts['file_roots'] = _validate_file_roots(opts)
if clear_load['fun'] != 'saltutil.find_job': log.warning( 'Authentication failure of type "eauth" occurred.' ) return ''
self.assertEqual(df.set_index('a').to_csv(decimal='^'), expected)
self.start_lineno = start_lineno self.end_lineno = end_lineno self.text = text
f.save_m2m() self.assertQuerysetEqual(new_art.categories.order_by('name'), ["Entertainment", "It's a test"])
from __future__ import absolute_import
for ky in oy+N.arange(kshp[0]): for kx in ox+N.arange(kshp[1]):
{% from "doc1.sls" import var1, var2 as local2 %} {{ var1.foo }} {{ local2.bar }}
'an hour ago', '%(count)s hours ago', count
if isinstance(sheetname, list): sheets = sheetname ret_dict = True elif sheetname is None: sheets = self.sheet_names ret_dict = True else: sheets = [sheetname]
self.store.convert_to_draft(self.vertical_y1a, self.user_id)
return
if name is not None: name = os.path.basename(name)
import logging log = logging.getLogger(__name__)
from salt.modules import serverdensity_device from salt.exceptions import CommandExecutionError
elif len(self.subclusters_) < self.branching_factor: self.append_subcluster(subcluster) return False
self.assertTrue(CourseEnrollment.is_enrolled(self.user, course_id)) self.assertTrue(self.user.roles.filter(name="Student", course_id=course_id))
use_svd = (n_neighbors > d_in)
mod.myfunc(1, 2, "three")
if max_cols is None: max_cols = get_option('display.max_info_columns', len(self.columns) + 1)
return sys.modules[name] is not None
self.assertEqual(len(courses_list), 2) self.assertTrue(all(isinstance(course, CourseSummary) for course in courses_list))
return Series({ 'count': 1, 'mean': 2, 'omissions': 3, }, name=df.iloc[0]['A'])
from __future__ import unicode_literals
with warnings.catch_warnings(): warnings.filterwarnings("ignore", message=".*(empty slice|0 for slice).*", category=RuntimeWarning)
insertions.append((len(curcode), [(0, Generic.Error, output_prompt.group())])) curcode += line[output_prompt.end():]
return response
pass
if symtab: varset = symtab else: varset = { 'p': sympy.Symbol('p'), 'g': sympy.Symbol('g'),
if not os.path.exists(os.path.dirname(file_path)): os.makedirs(os.path.dirname(file_path))
from salt.states import vbox_guest
allow_quiet_fail = acceptable_ora_err is not None and len(acceptable_ora_err) > 0 self._execute_statements(cursor, statements, parameters, verbosity, allow_quiet_fail=allow_quiet_fail) return True
self.kind = 'timestamp'
try: result = getattr(qs[0], date_field) except IndexError: return None
actions = filter(None, actions)
tops.append(os.path.dirname(xml.__file__))
silence_use_for_related_fields_deprecation = True
valid_file.seek(0) test_file.seek(0)
try:
aggs = City.objects.aggregate(Extent('location__point'))
index = self.get_course_index(course_key)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
@python_2_unicode_compatible class Repository(models.Model): name = models.CharField(max_length=25)
'edxmako.shortcuts.microsite_footer_context_processor',
"DELETE FROM i_love_ponies WHERE special_thing LIKE '%Django%';" "DELETE FROM i_love_ponies WHERE special_thing LIKE '%%Ponies%%';" "DROP TABLE i_love_ponies",
time.sleep(1)
exc_info_on_loglevel=logging.DEBUG
if xclipExists:
credit_api.set_credit_requirement_status( self.user.username, self.course.id, "grade", "grade", status="satisfied", reason={"final_grade": 0.95} )
self._done = True return chunk
response = self._get_page(payment_flow, course.id, expected_status_code=302) self.assertRedirects(response, redirect_url)
mock = MagicMock(return_value=False) with patch.object(composer, '_valid_composer', mock): self.assertRaises(CommandNotFoundError, composer.install, 'd')
self.jobs = {}
__virtualname__ = 'varstack'
self.crypt = kwargs.get('crypt', 'aes')
except Exception as err: print("Error running process {}".format(err), file=sys.stderr)
names = []
pairs = [('1988-Q2', '1988Q2'), ('2Q-1988', '2Q1988'), ]
for l in [slice(3.0, 4), slice(3, 4.0), slice(3.0, 4.0)]:
from salt.states import quota
STATIC_ROOT = (TEST_ROOT / "staticfiles" / "lms").abspath()
present = _if_str_then_list(present) checks[None] = present boolean = _if_str_then_list(boolean) checks[bool] = boolean
import salt.config import salt.loader from salt.modules import boto_elasticsearch_domain
_install_opener(auth)
return original_arg
from salttesting.helpers import ensure_in_syspath
for axis in lrange(self._AXIS_LEN): v = axes.get(self._AXIS_NAMES[axis]) if v is None: continue f = _get_rename_function(v)
if not username: return redirect(reverse('api_admin:catalog-search')) return redirect(reverse('api_admin:catalog-list', kwargs={'username': username}))
transformer_weights={ 'subject': 0.8, 'body_bow': 0.5, 'body_stats': 1.0, },
self.save_m2m = self._save_m2m
if not settings.FEATURES.get('ENABLE_VIDEO_UPLOAD_PIPELINE'): filtered_list.append('video_upload_pipeline')
self.assert_series_equal(with_format, no_infer) self.assert_series_equal(no_infer, yes_infer)
self.assertQuerysetEqual( qs & qs2, [('Second Revision', 'First Revision')], transform=lambda r: (r.title, r.base.title), ordered=False )
self.assertQuerysetEqual(School.objects.all(), ["<School: School object>"])
X, y = iris.data, iris.target y_bin = y.copy() y_bin[y_bin == 2] = 0
SignalHandler.course_published.connect(listen_for_course_publish)
weights_with_None = [None] * 10 weights_with_None[5] = 0.5 self._compare( o.sample(n=1, axis=0, weights=weights_with_None), o.iloc[5:6])
df.loc[0]['z'].iloc[0] = 1. result = df.loc[(0, 0), 'z'] self.assertEqual(result, 1)
inheriting_settings = inherited_settings_map[block_key].copy() block_fields = block_data.fields for field_name in inheritance.InheritanceMixin.fields: if field_name in block_fields: inheriting_settings[field_name] = block_fields[field_name]
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.utils import vt
ItemFactory.create(parent=self.verticals[3], category='edx-reverification-block') with check_mongo_calls_range(max_finds=6, max_sends=3): self._update_partitions(reload_items=False)
if logging.getLoggerClass() is not SaltLoggingClass:
self.assert_request_status_code(302, reverse('logout'))
if vmconfig['hostname'] in __salt__['vmadm.list'](order='hostname'): ret['result'] = True
self.assertFalse(linode._validate_name('foo;bar'))
kwargs_keys = list(kwargs)
return _AssertTemplateUsedContext(self, context_mgr_template)
if self._selection is None: slice_axis = self.obj.columns else: slice_axis = self._selection_list slicer = lambda x: self.obj[x]
if self.byteorder != self._native_byteorder: data = data.byteswap().newbyteorder()
return ' ' + x
if response.streaming: response.streaming_content = closing_iterator_wrapper( response.streaming_content, response.close) else: request_finished.disconnect(close_old_connections)
sig0 = der_sig_in.payload
self.r.cached_query = Article.objects.filter(reporter=self.r) self.assertEqual(repr(deepcopy(self.r)), "<Reporter: John Smith>")
required_boto3_version = '1.2.1'
index_tab = [] for i in xrange(3): index_tab.extend(repeat(i, set_range[i]))
from __future__ import absolute_import import sys import re
n = n + 1
self.assertOLXIsDraftOnly(block_list_to_revert) self.publish(block_list_to_revert) self.assertOLXIsPublishedOnly(block_list_to_revert)
import salt.ext.six.moves.http_client
pk_value = None if form.instance._state.adding else form.instance.pk
group = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, self.user_partition)
if LooseVersion(xlrd.__VERSION__) >= LooseVersion("0.9.3"): xlrd_0_9_3 = True else: xlrd_0_9_3 = False
course_key = self.course_key.to_deprecated_string() self._add_course_mode(mode_slug='verified') self.add_reg_code(course_key, mode_slug='verified')
csgraph_from_dense = None
get_token(request) return retval
from __future__ import absolute_import import os import re import sys import shutil import subprocess
self.assertTrue(certificate_generation_history.exists())
admin_email_handler.include_html = True try: self.client.get('/', HTTP_HOST='evil.com') finally: admin_email_handler.include_html = old_include_html
try: import salt.utils.etcd_util HAS_LIBS = True except ImportError: HAS_LIBS = False
output = tensor.dot(patch_stack, kerns.flatten(2).T).reshape((B, OR, OC, K))
CSRF_COOKIE_SECURE = ENV_TOKENS.get('CSRF_COOKIE_SECURE', False)
(['honor', 'verified', 'audit', 'credit'], 'credit'),
user.is_staff = True
self.settings_detail.visit() self.settings_detail.require_entrance_exam(required=False) self.settings_detail.save_changes()
continue
import logging import json import os try:
result = sparse[sparse % 2 == 1] exp = orig[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
self.assertEqual( list(articles.values_list('id', flat=True)), [1, 2, 3, 4, 5, 6, 7, 8] )
comment, passed, retries = _search(win_updater, retries) ret['comment'] += comment if not passed: ret['result'] = False return ret
now = datetime.datetime.now(pytz.UTC) tomorrow = now + datetime.timedelta(days=1) nextday = tomorrow + datetime.timedelta(days=1)
if key.values.size and not com.is_bool_dtype(key.values): raise TypeError('Must pass DataFrame with boolean values only')
above_cutoff = (abs(s) > cond * np.max(abs(s))) psigma_diag = np.zeros_like(s) psigma_diag[above_cutoff] = 1.0 / s[above_cutoff]
from __future__ import absolute_import, print_function
template = kwargs.pop('template', 'gis/google/google-multi.js')
import salt.utils import salt.utils.validate.net from salt.ext.six.moves import range from salt.exceptions import CommandExecutionError
available_version = latest_version
ts_b36 = int_to_base36(timestamp)
PAYMENT_REPORT_GENERATOR_GROUP = ENV_TOKENS.get('PAYMENT_REPORT_GENERATOR_GROUP', PAYMENT_REPORT_GENERATOR_GROUP)
while f1 != f2: f1=f2 (f2,ext)=os.path.splitext(f1)
self.assertEqual(len(course_summaries), 1)
query = [[1., 0.]]
result2 = DataFrame(p.values.astype('float64') / 0, index=p.index, columns=p.columns) assert_frame_equal(result2, expected)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch
long_index = MultiIndex.from_arrays( [i.values for i in self.index_axes])
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
request = self.request_factory.get('/', {'publication-decade': 'the 00s'}) changelist = self.get_changelist(request, Book, modeladmin)
X = np.sqrt(fac) * (Xc / std) U, S, V = linalg.svd(X, full_matrices=False)
return self.array
reconstruction_error = np.linalg.norm(K - K_iso) / Npts assert_almost_equal(reconstruction_error, clf.reconstruction_error())
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.'
with check_mongo_calls(mongo_calls): _accessible_courses_summary_list(self.request)
import salt.utils.cloud import salt.utils.pycrypto as sup import salt.config as config from salt.utils import namespaced_function from salt.exceptions import ( SaltCloudConfigError, SaltCloudNotFound, SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
continue
history = HistoricalRecords()
CELERYD_PREFETCH_MULTIPLIER = 1
import salt.utils from salt.transport.client import ReqChannel
X = [[0, 1], [1, 0]] for n_components in [-1, 0, .99, 3]: assert_raises(ValueError, IncrementalPCA(n_components, batch_size=10).fit, X)
on_course_publish(course_key)
ret = __salt__['k8s.label_present'](name, value, node, apiserver)
stdin_read, stdin_write = win32pipe.CreatePipe(security_attributes, 0) stdin_read = make_inheritable(stdin_read)
course_publish_orphans = self.store.get_orphans(course_locator_publish)
ret[bucket_name] += [k for k in filePaths if not k.endswith('/')]
assert last_row % stride[0] == 0 num_row_steps = last_row / stride[0] + 1
retval = self.service.set_credit_requirement_status( self.user.id, self.course.id, 'grade', 'grade' ) self.assertIsNone(retval)
raise TypeError('Expected sequence or array-like, got ' 'estimator %s' % x)
if __grains__['os_family'] == 'RedHat': network_c = salt.utils.fopen('/etc/sysconfig/network', 'r').readlines()
self.assertIn('<header class="xblock-header xblock-header-vertical">', html) self.assertIn('<article class="xblock-render">', html)
try: import pyodbc #import psycopg2.extras HAS_ODBC = True except ImportError: HAS_ODBC = False
if not user: user = AnonymousUser()
area = area.dtype.type(area)
if res['retcode'] != 0: ret[zpool] = res['stderr'] if 'stderr' in res else res['stdout'] else: ret[zpool] = 'created'
return None
sparse = self.dense1.to_sparse(fill_value=0) sparse2 = self.dense2.to_sparse(fill_value=0)
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
o2o_setnull = models.ForeignKey(R, models.SET_NULL, null=True, related_name="o2o_nullable_set")
mylocalrepo: git.config_unset: - name: 'foo\..+' - all: True
mean = X.mean(axis=1) if subtract_mean:
if (isinstance(original_arg, six.string_types) and not original_arg.startswith('{')): return original_arg else: return arg
import logging import json
action = request.POST.get("enrollment_action") if 'course_id' not in request.POST: return HttpResponseBadRequest(_("Course id not specified"))
self.assertFalse(user.is_staff)
wtf_numpy = np.zeros((pool_size_1,)) for i in xrange(pool_size_1): wtf_numpy[i] = on_probs[i] on_probs = wtf_numpy
from django.http import HttpResponse from django.template.response import TemplateResponse
rows_of_fields_as_sql = ( (self.field_as_sql(field, v) for field, v in zip(fields, row)) for row in value_rows )
frame = self.frame.copy() expected = self.frame.copy()
AutoAuthPage(self.browser, course_id=self.course_id).visit()
'zmq_filtering': bool,
if set(dns_servers or ['None']) != set(cur_dns_servers): changes['dns_servers'] = dns_servers
for row in unicodecsv.DictReader(csv_file): if row.get('Username') == username: self.assertEqual(row[column_header], expected_cell_content)
self.assertIsInstance(Article.objects.iterator(), collections.Iterator)
_upload_file(en_translation, self.item_descriptor.location, en_translation_filename)
import salt.ext.six as six
def __hash__(self): return hash(self._params())
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
if sp.issparse(preds[0]): preds = sp.vstack(preds, format=preds[0].format) else: preds = np.concatenate(preds) return preds[inv_locs]
return super(ConcatPair, self).as_sql( compiler, connection, function='CONCAT_WS', template="%(function)s('', %(expressions)s)" )
return True
df = orig.copy() df.iloc[2, :] = ["b", 2] tm.assert_frame_equal(df, exp_single_row)
write_body = [False]
def f(x): if not isinstance(x, pd.Timestamp): raise ValueError return str(x.tz)
df = DataFrame(np.arange(12).reshape(3, 4), columns=dups, dtype='float64') self.assertRaises(ValueError, lambda: df[df.A > 6])
from salttesting import TestCase from salttesting.mock import MagicMock, patch from salttesting.helpers import ensure_in_syspath, TestsLoggingHandler from salt.exceptions import CommandExecutionError
from __future__ import absolute_import import logging
src_dir = os.path.join(sys.prefix, "src") if os.path.isdir(src_dir): files_to_fingerprint.append(src_dir)
choose_track_url = reverse('course_modes_choose', args=[unicode(self.course.id)]) self.client.post(choose_track_url, self.POST_PARAMS_FOR_COURSE_MODE['verified'])
s = Series(range(5), [-2, -1, 1, 2, 3])
old_time = datetime.datetime.now(UTC) self.store.publish(component.location, publish_user) updated_component = self.store.get_item(component.location)
ret['result'] = True ret['comment'] = enabled_msg return ret
if not hasattr(self, 'num_channels'): self.num_channels = self.nchannels
ddns.__grains__ = {} ddns.__salt__ = {}
self.assertRaises(KeyError, lambda: df.resample('H')[0])
related_fields_match_type = False allow_sliced_subqueries = True has_select_for_update = False has_select_for_update_nowait = False
'dsn': dsn
result = s.isin(s[0:2].values.astype('datetime64[D]')) assert_series_equal(result, expected)
for static_dir in STATICFILES_DIRS: try: _, data_dir = static_dir except ValueError: data_dir = static_dir
'id': unicode(location)
from __future__ import absolute_import import datetime import math import sys import logging import copy
from __future__ import absolute_import import time
values = Series([u('a_b_c'), u('c_d_e'), NA, u('f_g_h')])
return connection.ops.gis_operators[self.lookup_name]
UserProfileFactory(user=self.user)
self.assertTrue(np.issubdtype(result.dtype, np.floating))
url(r'^api/user/', include('openedx.core.djangoapps.user_api.urls')),
import salt.utils import socket
content = contentstore('trashcan').find(asset_key, throw_on_not_found=False) self.assertIsNotNone(content)
task_id = str(uuid4())
log = logging.getLogger(__name__)
return table.append(Series({key: grand_margin[margins_name]}))
df = orig.copy() df.loc["j", "cats"] = "b" tm.assert_frame_equal(df, exp_single_cats_value)
if self.multi_class == 'multinomial': classes_ = [None] warm_start_coef = [warm_start_coef]
invalid_fields = []
from salt.utils.schema import (Schema, StringItem, IntegerItem, SecretItem, PortItem, BooleanItem, RequirementsItem, DictItem, AnyOfItem ) from salt.config.schemas.minion import MinionConfiguration
self.assertTrue(self._has_changes(chapter.location)) self.assertTrue(self._has_changes(sequential.location)) self.assertTrue(self._has_changes(vertical.location))
mean = species.cov_train.mean(axis=0) std = species.cov_train.std(axis=0) train_cover_std = (species.cov_train - mean) / std
self.assertEqual( self.run_function('shadow.get_account_created', [NO_USER]), 'ERROR: User not found: {0}'.format(NO_USER))
self.assertTrue(self.store.has_changes(xblock))
self.load_data()
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
'SHOW_BUMPER_PERIODICITY': 7 * 24 * 3600,
arrays, arr_columns = _reorder_arrays(new_arrays, arr_columns, columns) if columns is None: columns = arr_columns
import salt.utils
unshifted = self.tsframe.shift(0) assert_frame_equal(unshifted, self.tsframe)
query = queries[[rng.randint(0, n_queries)]]
raise TypeError('Cannot convert tz-naive timestamps, use ' 'tz_localize to localize')
credit_course = CreditCourse.objects.create( course_key=self.course.id, enabled=True, )
use = zipped[:1]
component_css = 'button[data-category={}]'.format(name) page.wait_for_element_visibility(component_css, 'Advanced component {} is visible'.format(name))
X_FRAME_OPTIONS = 'SAMEORIGIN'
default_timezone = timezone.get_default_timezone() value = timezone.make_naive(value, default_timezone)
assert len(state) == 2 if isinstance(coeffs, str): coeffs = float(coeffs) assert isinstance(coeffs, float) _, state = state state = [state] coeffs = [coeffs]
result = f.clean('13.30') self.assertEqual(result, time(13, 30, 0))
STATICFILES_DIRS = []
call_command("loaddata", "course_email_template.json")
self.submit_answer('Correct', 'Incorrect') self.assertEqual(self.get_progress_detail(), u'1/2')
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if not course: course = modulestore().get_course(course_overview.id)
title = _("Powered by Open edX") return { "url": settings.FOOTER_OPENEDX_URL, "title": title, "image": settings.FOOTER_OPENEDX_LOGO_IMAGE, }
expected = Series([np.nan, 2, 3])
xi_, yi, swi, idx = dataset._next_py() xi = sp.csr_matrix((xi_), shape=(1, X.shape[1]))
if allow_obj == 'convert': targfunc = partial(self._badobj_wrap, func=targfunc, allow_complex=allow_complex) self.check_fun(testfunc, targfunc, 'arr_obj', **kwargs)
if discussion_id is not None: default_query_params['commentable_id'] = discussion_id if get_team(discussion_id) is not None: default_query_params['context'] = ThreadContext.STANDALONE
if isinstance(header, (list, tuple, np.ndarray)): have_mi_columns = True header = list(header) + [header[-1] + 1] else: have_mi_columns = False header = [header]
fs_root = mkdtemp()
DEFAULT_THIN_DIR = '/var/tmp/.%%USER%%_%%FQDNUUID%%_salt'
rendered = "0+untagged.%d.g%s" % (pieces["distance"], pieces["short"]) if pieces["dirty"]: rendered += ".dirty"
f.DEFAULT_CHUNK_SIZE = 4 self.assertEqual(list(f), [b'one\r', b'two\r', b'three'])
self.check_assertion_structure(assertion, response['results'][0])
if self._get_version(draft_block) != self._get_version(published_block): return True
module = import_module(entry)
ttype = 'zeromq'
self.assertIn(str('Child Subject'), parent_s)
_ = lambda text: text
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proj.settings')
if salt.utils.is_sunos(): traceroute_version = [0, 0, 0] else: cmd2 = 'traceroute --version' out2 = __salt__['cmd.run'](cmd2) try:
vector = np.zeros_like(grad) vector[1] = 1 hess_col = hess(vector)
API_DATADOG_SAMPLE_RATE = 0.1
zbcop = self.zbseries.copy() zicop = self.ziseries.copy()
if self.transcript_language == 'en':
if validator: validator(defval)
import logging import struct
finished_future = yield Any(inflight_futures) try: b_ret = finished_future.result() except TimeoutException: break chunk_ret.update(b_ret) inflight_futures.remove(finished_future)
return
self.assertEqual(len(courses), 2)
with pd.option_context('chained_assignment', 'raise'):
col_0 d e f row_0 a 1 0 0 b 0 1 0 c 0 0 0
unicode_user = UserFactory(first_name=u'Ⓡⓞⓑⓞⓣ', last_name=u'ՇﻉรՇ') CourseEnrollmentFactory.create(user=unicode_user, course_id=self.course.id) self.students.append(unicode_user)
apps.check_models_ready() return self.remote_field.model
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
return [line[fromm:to].strip(self.delimiter) for (fromm, to) in self.colspecs]
verification_checkpoint = VerificationCheckpoint.objects.create( course_id=self.course.id, checkpoint_location=checkpoint_location ) self.assertEqual( VerificationCheckpoint.get_or_create_verification_checkpoint(self.course.id, checkpoint_location), verification_checkpoint )
from salt import exceptions from salt.states.git import _fail, _neutral_test
if tree.n_outputs == 1: value = tree.value[node_id][0, :] else: value = tree.value[node_id]
import os import errno import logging import re import string
details.update(self._course_details)
section = get_current_child(chapter, min_depth=1) if section is None: log.debug("No section found when loading current position in course") return None
module = CapaFactory.create(max_attempts=None, rerandomize=RANDOMIZATION.NEVER, done=False) self.assertFalse(module.should_show_save_button())
num_to_add = max_count - len(selected)
from salt.modules import composer from salt.exceptions import CommandExecutionError, CommandNotFoundError, SaltInvocationError
if name in self.RESERVED_WORDS: name = '_' + name
self.dashboard_page.visit()
salt '*' win_wua.list_update 12345678-abcd-1234-abcd-1234567890ab
CoursewareSearchIndexer.do_course_reindex(modulestore(), self.course.id)
self.check_result_type(np.complex128, np.complex128)
uid = self.provider.get_social_auth_uid('uid') if uid is not 'uid': query_set = query_set.filter(uid__startswith=uid[:-3])
is_enrolled = CourseEnrollment.is_enrolled(self.user, self.course.id) self.assertFalse(is_enrolled)
if kwargs: xpath_expr += _build_xpath_expr(kwargs)
password_label = _(u"Password")
from salt.states import grafana
'WHAT_IS_VERIFIED_CERT': 'verified-certificate',
ir = IsotonicRegression(increasing='auto', out_of_bounds="xyz")
_typ = 'multiindex' _names = FrozenList() _levels = FrozenList() _labels = FrozenList() _comparables = ['names'] rename = Index.set_names
from __future__ import absolute_import
try: import salt.utils.openstack.neutron as suoneu HAS_NEUTRON = True except NameError as exc: HAS_NEUTRON = False
retc["_id"] = ret["jid"]
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, expensiveTest
with tm.assert_produces_warning(FutureWarning): self.assertTrue(self.ts.is_time_series) self.assertTrue(self.ts.index.is_all_dates)
tm._skip_if_no_pytz() import pytz
resp = self.client.get(reverse('activate', kwargs={'key': activation_key})) return resp
dummy2 = _("This is another translatable string.")
result = sql.read_sql_query('SELECT * FROM test_nan', self.conn) tm.assert_frame_equal(result, df)
os.killpg(os.getpgid(process.pid), signal.SIGINT) term_sent = True continue
tab.is_hidden = request.json['is_hidden'] modulestore().update_item(course_item, request.user.id)
axis = list(set(range(value.ndim)) - set(_AXES_MAP[type(value)]))[0]
if getattr(self.options, 'daemon', False) is True: return
y = np.dot(X, w) X = sp.csc_matrix(X) if n_targets == 1: y = np.ravel(y) return X, y
Pkg.installed("nginx", require=Pkg("some-other-package"))
VIDEO_SOURCE_DIR = REPO_ROOT / "test_root" / "data" / "video"
FeatureAgglomeration().fit(X)
try: post_dict = urlparse.parse_qs(contents, keep_blank_values=True) return { key: list_val[0] for key, list_val in post_dict.items() }
df = DataFrame({1: [1, 2], 2: [3, 4], 'a': ['a', 'b']})
config.add_subpackage('__check_build') config.add_subpackage('_build_utils')
grad[:n_features] += alpha * 2. * w
self.assertRaises( Http404, views.container_handler, request, usage_key_string='i4x://InvalidOrg/InvalidCourse/vertical/static/InvalidContent', )
self.dismiss_ui_and_verify(rerun)
self.video.verify_speed_changed('1.0x')
self.assertIsNone(get_cache_key(request)) learn_cache_key(request, response)
if nan_rep is None: nan_rep = 'nan'
values = Series([u('aafootwo'), u('aabartwo'), NA, u('aabazqux')])
raise EntitiesForbidden(name, None, base, sysid, pubid, notation_name)
child_name = os.ttyname(stdout_child_fd) try: tty_fd = os.open('/dev/tty', os.O_RDWR | os.O_NOCTTY) if tty_fd >= 0: os.close(tty_fd)
result = func(idx) exp = func(idx.values) self.assertIsInstance(result, np.ndarray) tm.assertNotIsInstance(result, Index)
self._params = {}
self.minions = {}
_builtin_isinstance = isinstance
self._indexables = [GenericIndexCol(name='index', axis=0)]
sparse = self.dense1.to_sparse() sparse2 = self.dense2.to_sparse()
from salt.states import boto_sns
pos = self[::-1].searchsorted(label, side='right' if side == 'left' else 'right') return len(self) - pos
@ignore_warnings(category=DeprecationWarning) def test_eval(self): if not self.do_test_eval:
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self._params = {}
from sphinx.ext.autodoc import FunctionDocumenter as FunctionDocumenter
cmd.extend(packages)
stack = deque([_Node(start_node, get_children)])
selection_indicator = self.selenium.find_element_by_css_selector( '%s .action-counter' % form_id) self.assertEqual(selection_indicator.text, "0 of 1 selected")
if not self.value and self.xml.text: self.value = self.xml.text.strip()
"form-1-id": str(fd2.id), "form-1-reference": "456", "form-1-driver": "bill", "form-1-restaurant": "thai",
obj = self.construct_scalar(node) if six.PY2: obj = obj.encode('utf-8') return SLSString(obj)
wait_lock(w_lock, list_cache, 15 * 60)
face = sp.face(gray=True)
msg = 'Unable to load file contents at path %s for item %s: %s ' % ( filepath, def_id, err) raise Exception, msg, sys.exc_info()[2]
context['company_privacy_urltext'] = _("Privacy Policy")
try:
return None
arr = np.array([None], dtype='O') result = lib.infer_dtype(arr) self.assertEqual(result, 'mixed')
msg = u"Skipping {}, already enrolled in destination course {}" print msg.format(user.username, unicode(dest_key))
assert_array_equal(X_r, iris.data)
world.css_click(button_class) perform_action_in_plugin(action)
class LayerMapError(Exception): pass
func()
as_view_decorator_with_custom = CacheMiddleware(cache_timeout=60, cache_alias='other', key_prefix='foo')
y_pred = base_estimator.predict(X)
DECIMAL_SEPARATOR = ','
if not salt_token or not self.auth.get_tok(salt_token): raise cherrypy.HTTPError(401)
rng = np.random.RandomState() mean = rng.uniform(1e-6, 1. - 1e-6, (rows, cols, channels))
master_config.update(overrides) overrides = master_config
#html_title = None
from __future__ import absolute_import import logging import uuid import re
response = self.http_get(reverse(self.view), HTTP_AUTHORIZATION=auth_header) self.assertEqual(response.status_code, 200)
regr = linear_model.LinearRegression()
msg = "does not match the number of clusters" assert_raises_regex(ValueError, msg, MiniBatchKMeans(init=test_init, random_state=42).fit, X_csr)
with modulestore().default_store(ModuleStoreEnum.Type.split): self.course = CourseFactory.create()
loss[i] = np.dot(true_at_reversed_rank.cumsum(), false_at_reversed_rank)
if storage.exists(path): matched_path = storage.path(path) if matched_path: return matched_path
if 0 < passed_index <= len(course_update_items): course_update_item = course_update_items[passed_index - 1] course_update_item["status"] = CourseInfoModule.STATUS_DELETED course_update_items[passed_index - 1] = course_update_item
assert new_axes[0].equals(items) new_axes[0] = items
import salt.utils import salt.utils.files import salt.utils.itertools import salt.utils.url from salt.exceptions import SaltInvocationError, CommandExecutionError from salt.ext import six
return b'Name\xff: %s'.decode() % self.name
self.assertEqual(module.attempts, 1)
self.content = content
loss_l = self.loss.lower()
INSTALLED_APPS = []
new_state = __salt__['tuned.profile'](profile)
self.assertEqual(len(Tag.objects.order_by('parent__name')), 5)
__virtualname__ = 'disk'
roll = np.where(base_period.to_timestamp() == i - off, self.n, self.n + 1)
exit=False)
'EDITABLE_SHORT_DESCRIPTION': True,
except CyclicDefinitionError: return default_location
for terms_of_service in ["", "false", "not_boolean"]: params["terms_of_service"] = terms_of_service assert_terms_of_service_error("You must accept the terms of service.")
kwargs['explanation_text'] = None return super(CodeResponseXMLFactory, self).build_xml(**kwargs)
my_etcd_config: etcd.host: 127.0.0.1 etcd.port: 4001
url_path = StaticContent.serialize_asset_key_with_slash( course_key.make_asset_key('asset', placeholder_id).for_branch(None) ) return url_path.replace(placeholder_id, '')
assert_raises(ValueError, ForestEstimator(min_samples_leaf=-1).fit, X, y) assert_raises(ValueError, ForestEstimator(min_samples_leaf=0).fit, X, y)
import warnings import numpy as np from scipy import linalg
self.assertFalse(self.get_dashboard_enrollment_message() in response.content)
from __future__ import unicode_literals
_ = lambda text: text
if isinstance(address, bytes): self._check_packed_address(address, 4) self._ip = _int_from_bytes(address, 'big') return
self.logout() self.login(self.instructor_user) self.assertTrue(self.enroll(self.course))
if k == 'values': continue if k not in q: raise ValueError( "min_itemsize has the key [%s] which is not an axis or " "data_column" % k)
ret = instance.copy()
replication_map = { 'class': replication_strategy }
args = [_sdecode(name)] if kill: args.append('--kill')
new_f.func_name = f.func_name return new_f
from __future__ import absolute_import import os
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.assertFalse(self._search_for_content(self.EDITED_SEARCH_STRING))
assert_raises(ValueError, binarizer.transform, sparse.csc_matrix(X))
if freqstr in _rule_aliases: new = _rule_aliases[freqstr] warnings.warn(_LEGACY_FREQ_WARNING.format(freqstr, new), FutureWarning, stacklevel=3) freqstr = new freqstr = _lite_rule_alias.get(freqstr, freqstr)
from __future__ import absolute_import import os import shutil
from io import TextIOWrapper s = TextIOWrapper(s, encoding='utf-8')
fetch = get
ret.update({esxi_host: {'Coredump Config': _format_coredump_stdout(response)}})
self.minions = []
violations_count_str = "Number of pep8 violations: {count}".format(count=count) print violations_count_str print violations_list
data_home = get_data_home(data_home=DATA_HOME) assert_equal(data_home, DATA_HOME) assert_true(os.path.exists(data_home))
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
try: final_grade = CreditRequirementStatus.objects.get( username=username, requirement__namespace="grade", requirement__name="grade", requirement__course__course_key=course_key, status="satisfied" ).reason["final_grade"]
print not iseia(2200, (E48, E96, E192)) print iseia(5490e2, (E48, E96, E192)) print iseia(2200) print not iseia(5490e2)
published_xblock2 = self.store.create_item( self.user_id, self.course.id, 'vertical', block_id='test_vertical' )
w = rng.uniform(size=n_samples) w[5:8] = 0 regression.fit(x, y, sample_weight=w)
didx = DatetimeIndex(start='2013/01/01', freq='D', periods=400) pidx = PeriodIndex(start='2013/01/01', freq='D', periods=400)
if not rd_data: err_msg = 'There was an error querying EC2 for the root device ' \ 'of image id {0}. Empty response.'.format(image_id) raise SaltCloudSystemExit(err_msg)
obj = WithCustomPK(name=1, value=1) with self.assertRaises(DatabaseError): with transaction.atomic(): obj.save(force_update=True)
alpha_ = 1. / np.var(y) lambda_ = 1.
Y /= np.sum(Y, axis=1)[:, np.newaxis]
est = TreeEstimator(random_state=0) est.fit(X, y, sample_weight=sample_weight) assert_equal(est.tree_.max_depth, 1)
methods = downsample_methods + ['count'] for method in methods: result = getattr(f.resample(freq), method)()
handle_svc = win32service.CreateService(handle_scm, name, display_name, win32service.SERVICE_ALL_ACCESS, service_type, start_type, error_control, bin_path, load_order_group, 0, dependencies, account_name, account_password)
value = self.get_cleansed_multivaluedict(request, value)
task_progress.skipped += 1
expected_p, expected_h = h1.mf_update( state_below = v.upward_state(v_state), state_above = h2.downward_state(h2_state), layer_above = h2)
vm_['private_key'] = key_filename
'master': (string_types, list),
self.update_version = edit_info.get('update_version', None)
from .index import * from .certificate import * from .enrollments import * from .refund import * from .programs import IssueProgramCertificatesView
import salt.ext.six as six from salt.ext.six.moves import map, range, reload_module
if value == 'True': new_line = key elif value == 'False': new_line = '' else: new_line = '{0} {1}'.format(key, value)
from salttesting import skipIf from tests.unit import ModuleTestCase, hasDependency from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath from salt.modules import servicenow
qs = qs.all() self.assertQuerysetEqual( qs, [c], lambda x: x) self.assertEqual(qs[0].alfa, a)
from __future__ import unicode_literals
retained = None for flav in flavor: parser = _parser_dispatch(flav) p = parser(io, compiled_match, attrs, encoding)
md.inlinePatterns.add('mathjax', MathJaxPattern(), '<escape')
import integration import salt.utils
(index < 2 or tokens[index - 2][1] != 'class') and not keyword.iskeyword(prev_text)): yield prev_end, "E211 whitespace before '%s'" % text
if role is not None: role().add_users(user)
for fh in (wkt_f, wkb_f): fh.seek(0) pnt = fromfile(fh) self.assertEqual(ref_pnt, pnt)
from salt.exceptions import CommandExecutionError from salt.exceptions import SaltInvocationError import logging
result = s.iloc[[0, 2, 3, 4, 5]] expected = s.reindex(s.index[[0, 2, 3, 4, 5]]) assert_series_equal(result, expected)
clf = Pipeline([ ('vec', vectorizer), ('clf', Perceptron()), ])
module.xml_attributes = xml_attrs
value_repr = value_repr[1:]
member.name = member.name.replace('{0}/'.format(package), '') out_path = salt.syspaths.CONFIG_DIR
self.run_function('virtualenv.create', [self.venv_dir])
files = files_string.split(",") upload_css = 'a.upload-button' world.css_click(upload_css)
imported_objects = {}
self._course_overview = None
self.library_fixture.create_xblock(self.library_fixture.library_location, XBlockFixtureDesc("html", "Html4"))
from __future__ import absolute_import
exc_info_on_loglevel=logging.DEBUG
from __future__ import absolute_import import functools import copy import logging import os import pipes import time import traceback
rel_indent[row] = expand_indent(line) - indent_level
self.__init__()
if col_type is np.dtype('int64') or col_type is bool: self.frame[col_name] = df_col.astype( col_type, copy=False)
index = frame.index columns = frame.columns
msg = "Expected \d+ fields in line \d+, saw \d+" with tm.assertRaisesRegexp(ValueError, msg): df = self.read_csv(StringIO(csv))
continue
template_obj = MicrositeTemplate.get_template_for_microsite( microsite_get_value('site_domain'), uri )
from salt.cloud.clouds import gce from salt.exceptions import SaltCloudSystemExit
suff_stats = np.zeros(exp_topic_word_distr.shape) if cal_sstats else None
for item_type in item_types: if cart.has_items(item_type): return True
cls.deltas = [] cls.delays = [] cls.days_long = []
y_pred[:, k] += learning_rate * tree.predict(X).ravel()
if not overwrite and other_mask.all(): result[col] = this[col].copy() continue
if freq != 'infer': freq = to_offset(freq) else: freq_infer = True freq = None
relevant_frames = 0 for frame_record in inspect.stack(): frame = frame_record[0] if '__unittest' in frame.f_globals: break relevant_frames += 1
('LEFTPADDING', (0, 1), (0, 1), 5 * mm),
Q = random_state.normal(size=(A.shape[1], size))
for phase in self.run_data.keys(): if phase in ('fake_assets',): continue per_phase = self.run_data[phase] html.add_header(1, phase)
url = reverse('instructor_dashboard', kwargs={'course_id': self.course.id.to_deprecated_string()}) self.assert_request_status_code(200, url)
auto_created = False concrete = False editable = False hidden = False
import salt.ext.six as six
FOLDER_PERMISSIONS = stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR FILE_PERMISSIONS = stat.S_IRUSR | stat.S_IWUSR
#html_split_index = False
new_mtime_map = salt.fileserver.generate_mtime_map(__opts__['file_roots'])
self.repo.git.tag('-d', ref.name[10:])
self.course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
input_dict = {'1_2_1': 'California'} correct_map = problem.grade_answers(input_dict) self.assertEquals(correct_map.get_hint('1_2_1'), "")
mixed = Series(['a_b', NA, 'asdf_cas_asdf', True, datetime.today(), 'foo', None, 1, 2.])
df = DataFrame(np.random.randn(10, 4), index=date_range('1/1/2000', periods=10))
self._assert_can_reverify()
data = self._prepare_categoricals(data)
assert_array_equal(clf.predict([[0.2, -1.0]]), np.array([-1]))
add_user_to_cohort(first_cohort, self.student.username) self.assert_student_in_group(None)
if sparsify not in [True, 1]: sentinel = sparsify result_levels = _sparsify(result_levels, start=int(names), sentinel=sentinel)
with tm.assert_produces_warning(InvalidColumnName): original.to_stata(path)
self.assertIn("Password Reset Email Sent", self.login_page.wait_for_success())
if validate: self.validate(existing_table)
self.login() self.api_response(expected_response_code=404, username=other.username)
last_ind = tps.searchsorted(tps[-1]) sl = slice(last_ind, None, -1) return np.r_[precision[sl], 1], np.r_[recall[sl], 0], thresholds[sl]
draft_video = self.store.get_item(course_id.make_usage_key('video', self.DRAFT_VIDEO)) self.assertTrue(getattr(draft_video, 'is_draft', False))
id_cache = os.path.join(root_dir, config_dir.lstrip(os.path.sep), 'minion_id')
subject = ''.join(subject.splitlines()) from_address = theming_helpers.get_value( 'email_from_address', settings.DEFAULT_FROM_EMAIL )
params = [] params.append(name) for root_dev in layout:
(options, __) = parser.parse_args(arglist, values=new_options)
self.assertTrue(check_password('letmein', encoded, setter, 'argon2')) self.assertFalse(state['upgraded'])
continue
_skip_console_logging_config_ = True _logfile_config_setting_name_ = 'key_logfile' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'key')
chapter_to_delete = course.get_children()[0] self.delete_item(store, chapter_to_delete.location)
middleware = CacheMiddleware()
from __future__ import absolute_import import logging
response = self.http_get_for_course(HTTP_AUTHORIZATION=auth_header) self.assertEqual(response.status_code, 200)
from __future__ import absolute_import
from __future__ import unicode_literals
params, response = _validate_post_params(request.POST) if response is not None: return response
def f(): df = orig_df.copy()
response = self.client.get("%s?age__gt=30" % reverse('admin:admin_views_person_changelist')) self.assertEqual(response.status_code, 200)
check_node(sibling.location, None, after_create, self.user_id, None, after_create, self.user_id)
assert_equal(train.intersection(test), set())
self.assertEqual(len(RestrictedModel.plain_manager.all()), 0)
from __future__ import absolute_import import warnings
pass
return not self.x_compat and self.use_index and self._use_dynamic_x()
ssh = salt.client.ssh.SSH(opts)
df = pd.DataFrame({'X': [1, 2, 3, 4], 'Y': list('aabb')}, index=list('ABCD'))
#========================================================================== #smtp inet n - n - - smtpd if private == 'y': private = '-'
X = [[2, 1, 2], [9, 1, 1], [6, 1, 2], [0, 1, 2]] y = [0, 1, 2, 2]
USFedCal = get_calendar('USFederalHolidayCalendar') holidays0 = USFedCal.holidays(datetime(2015, 7, 3), datetime(
used_column_names = [] errors = []
self.go_to_tab_and_assert_problem(2, self.problem2_name)
class AbstractArticle(models.Model): class Meta: abstract = True ordering = ('title',)
return compiled_parent._render(context)
result = self.series.copy() result[mask] = self.series * 2 expected = self.series * 2 assert_series_equal(result[mask], expected[mask])
h5file, node = self.init_hdf5(h_file_n, ([sizes[which_set], image_size], [sizes[which_set], 1]), title="SVHN Dataset", y_dtype='int')
response.streaming_content = compress_sequence(response.streaming_content) del response['Content-Length']
raise Exception
X = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1]] y = [1, 1, 1, 1, 1, 1]
sorted_values = c.take_data().take(sorter, axis=0) if sorted_values.ndim == 1: sorted_values = sorted_values.reshape( (sorted_values.shape[0], 1))
s = pd.DataFrame(randn(1000, 1000), index=pd.date_range( '2000-1-1', periods=1000)).stack()
def visit_table(self, node): self.context.append(self.compact_p) self.compact_p = True
cache.delete(key)
log = logging.getLogger(__name__)
'http_max_body': int,
htown = fromstr('POINT(1947516.83115183 6322297.06040572)', srid=3084) ptown = fromstr('POINT(992363.390841912 481455.395105533)', srid=2774)
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
exc_info_on_loglevel=logging.DEBUG
self.two_day_delta_str = "2 days"
from __future__ import absolute_import
with tm.assertRaisesRegexp(TypeError, 'list of lists-like'): self.index.set_labels(labels[0], level=[0, 1])
if close_bracket and not hang_closing: yield (start, "E123 closing bracket does not match " "indentation of opening bracket's line") hangs[depth] = hang
self.delete_item(store, self.html_unit1.location) self.reindex_library(store) response = self.search() self.assertEqual(response["total"], 1)
if len(blocks) > 1: new_axes[1] = axes[0]
if not self.infer_axes(): return False
def check(result, expected): str(result) result.dtypes assert_frame_equal(result, expected)
import os import logging
self.x_sum *= self.gamma self.x_sum += x
from __future__ import unicode_literals
if not courses: raise CommandError( u"No courses found for orgs: {orgs}".format( orgs=", ".join(org_list) ) )
self.assertEquals(7, self.response.content.count('grade_Pass'))
P = noise + X_dense P = theano.tensor.switch(P > 0, 1, 0) P = tensor.cast(P, theano.config.floatX)
self.check_event_response_by_key('handle_vote', resource, 'newVotes', test_case['new_votes'])
DATE_FORMAT = 'd/m/Y' TIME_FORMAT = 'P' DATETIME_FORMAT = 'd/m/Y P' YEAR_MONTH_FORMAT = 'F Y' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'd/m/Y' SHORT_DATETIME_FORMAT = 'd/m/Y P'
with patch_edxnotes_api_settings(None): self.assertRaises(ImproperlyConfigured, get_endpoint_function)
self.import_path = import_path self.locked = locked
grid_search = GridSearchCV(km, param_grid=dict(n_clusters=[2, 3, 4])) grid_search.fit(X) assert_equal(grid_search.best_params_["n_clusters"], 4)
pass
result = patch.get_facecolor()[0]
rng = np.random.RandomState(seed) X = rng.randn(10, 10) Xcsr = csr_matrix(X)
template = Template(template, origin, template_name, engine=self)
boston = load_boston() perm = rng.permutation(boston.target.size) boston.data = boston.data[perm] boston.target = boston.target[perm]
wait_for_xblock_initialization(self, '.xblock[data-block-type="split_test"]')
import salt.utils.boto3 import salt.utils.compat
with self.assertRaises(CourseOverview.DoesNotExist): self.store.delete_course(course.id, ModuleStoreEnum.UserID.test) CourseOverview.get_from_id(course.id)
GENDERS = (('\xc5', 'En tied\xe4'), ('\xf8', 'Mies'), ('\xdf', 'Nainen'))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, Mock, MagicMock, patch )
simultaneous_sort(dist, ind)
SINGLE_EMAIL_FAILURE_ERRORS = (
X = X.copy('F')
open(libcuda_convnet_so).close()
vertical = self.store.create_child( self.user_id, sequential.location, 'vertical', block_id='moon_unit' )
def course_id(course_num): return world.scenario_dict['COURSE'].id.replace(course=course_num)
if current_os == 'Linux' or \ current_os == 'Darwin' or \ current_os.startswith('CYGWIN'): tuple_xy = _get_terminal_size_linux() if tuple_xy is None:
for kwargs_key in kwargs_keys: if kwargs_key.startswith('__pub_'): pub_data[kwargs_key] = kwargs.pop(kwargs_key)
clf = MyEstimator(empty=np.array([])) clf2 = clone(clf) assert_array_equal(clf.empty, clf2.empty)
result = sparse.loc[orig % 2 == 1] exp = orig.loc[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
from __future__ import absolute_import
composite_dtypes = ((None, 'int8'), ('complex128', theano.config.floatX))
BLANK_CHOICE_DASH = [("", "")]
@functools.wraps(fn) def wrapped(*args, **kwargs): orig_mode = config.mode if orig_mode in ["DebugMode", "DEBUG_MODE"]: config.mode = "FAST_RUN"
mode = __salt__['config.manage_mode'](mode)
req_status = api.get_credit_requirement_status(self.course_key, "bob", namespace="grade", name="grade") self.assertEqual(len(req_status), 0)
self.assertIn(self.SUCCESSFUL_RESPONSE, response.content) self.assertEqual(response.status_code, 200)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
courses_list_by_groups, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(len(courses_list_by_groups), 1)
image_length = 96 if which_norb == 'small' else 108
win_dns_client.__salt__ = {} win_dns_client.__context__ = {}
new_columns = this.columns.union(other.columns) do_fill = fill_value is not None
salt.utils.enable_ctrl_logoff_handler()
if course is None: course = modulestore().get_course(course_id, depth=0)
'log_datefmt': str,
from __future__ import absolute_import import logging
pass
self.assertEqual(module.attempts, 1)
self.the_input.capa_system.render_template = lambda *args: "<aaa" with self.assertRaises(etree.XMLSyntaxError): self.the_input.get_html()
from __future__ import absolute_import import os import random import string import time
self.assertIn('Welcome to edX.', self.video.captions_text)
return
if 'arg' in chunk and not isinstance(chunk['arg'], list): chunk['arg'] = [chunk['arg']]
request = self.factory.get(self.path, {'foo': 'bar', 'other': 'true'}) request._cache_update_cache = True
self.assertContains(resp, 'visible_course')
textline_element = response_element.find("div") self.assertEqual(textline_element.text, 'Input Template Render')
scheme_extensions = None
assert_equal(iterations, expected_n_iter) if n_samples is not None: assert_equal(collected_test_samples, set(range(n_samples)))
EMPTY_VALUES = (None, '', [], (), {})
self.assertIn( 'oauth_body_hash="00hq6RNueFa8QiEjhep5cJRHWAI%3D"', prepped_req.headers['Authorization'] )
xml = etree.fromstring(expr) xml = self.formulaInstance.preprocess_pmathml(xml) test = etree.tostring(xml)
from __future__ import unicode_literals
html_last_updated_fmt = '%b %d, %Y'
assert_array_equal(lfw_pairs_train.target, [1, 1, 1, 1, 1, 0, 0, 0, 0, 0])
result = func(self.data.loc[subset], **kwargs)
self.assertIsNotNone(ver_block)
from __future__ import absolute_import import logging import salt.utils.vault
for child_hierarchy in block_hierarchy.get('#children', []): self.add_parents(child_hierarchy, block_map)
os.remove(tmp.name)
raise RuntimeError('The passed keys need to be a list')
self.assertFalse(self._search_for_content(self.EDITED_SEARCH_STRING))
self.steps = tosequence(steps) transforms = estimators[:-1] estimator = estimators[-1]
self.user.is_staff = True self.user.save() video_outline = self.api_response().data self.assertEqual(len(video_outline), 2)
self.assertTrue(isinstance(value, (int, compat.long)))
from django.contrib import admin from django.db import models
index = MultiIndex.from_arrays([np.arange(4000)] * 3) df = DataFrame(np.random.randn(4000), index=index, dtype=np.int32)
legacy_profile = UserProfile.objects.get(id=self.user.id) legacy_profile.year_of_birth = 2000 legacy_profile.save()
level = int(level) if level < self.level: return self.added_new = True message = Message(level, message, extra_tags=extra_tags) self._queued_messages.append(message)
TRANSFORMER_VERSION_KEY = '_version'
phi_aj = phi(a_j) derphi_aj = derphi(a_j)
problem_url_name = 'H1P1' self.define_option_problem(problem_url_name) location = InstructorTaskModuleTestCase.problem_location(problem_url_name) descriptor = self.module_store.get_item(location)
labels = np.array([1, 1, 1, 2, 2]) assert_raises(ValueError, cval.LabelKFold, labels, n_folds=3)
if existing['code'] == 200:
slug = hashlib.sha256(slug).hexdigest()
ieee1 = xport1 & 0x00ffffff
self.assertEqual(last_sat + offset_sat, next_sat)
if isinstance(data, six.string_types): self.ds = DataSource(data, encoding=encoding) else: self.ds = data self.layer = self.ds[layer]
all_modes = CourseMode.modes_for_course_dict(self.course_key, only_selectable=False) self.assertItemsEqual(all_modes.keys(), available_modes)
matplotlib.use(mplbackend)
server_thread = threading.Thread(target=self.server.serve_forever) server_thread.daemon = True server_thread.start()
y = np.array([3, 7, 5, 9, 8, 7, 10]) x = np.arange(len(y))
self.youtube_configuration.update({ 'youtube_api_blocked': True, })
self.assertEqual(params['access_key'], '0123456789012345678901') self.assertEqual(params['profile_id'], 'edx')
__virtualname__ = 'service'
from __future__ import absolute_import import os import time import subprocess
def test__get_cron_cmdstr(self): self.assertEqual('crontab /tmp', cron._get_cron_cmdstr(STUB_PATH))
item_meta['ETag'] = item_meta['ETag'].strip('"')
self.sigma_[:, :] -= epsilon
self.assertQuerysetEqual( Item.objects.datetimes('modified', 'day'), ['datetime.datetime(2007, 12, 19, 0, 0)'] )
str(qs.query)
self._write("]")
Created Certificate for "www.example.com": /etc/pki/my_little/certs/www.example.com.crt"
from __future__ import absolute_import import copy import logging import os import subprocess from distutils.version import LooseVersion
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.video.click_player_button('play') self.video.wait_for_position('0:03') self.video.click_player_button('pause')
if current.node in visited or not filter_func(current.node): stack.pop() continue
"xmodule_js",
item = self.cart.orderitem_set.all().select_subclasses()[0] self.assertEquals(item.unit_cost, self.get_discount(self.cost))
X = np.array([[1], [2], [3]]) Y = np.array([1, 2, 3]) clf = ARDRegression(compute_score=True) clf.fit(X, Y)
to_concat = [x.astype('object') for x in to_concat]
row = (y*outshp[1]+x)*inshp[0]*ksize + l + fmapi*ksize if ws else\ y*outshp[1] + x
import salt.utils
mkn = max_kernel_norm dn = detector_normalization on = output_normalization
td = Series([timedelta(days=i) for i in range(3)] + ['foo']) self.assertEqual(td.dtype, 'object')
GEOIP_PATH = REPO_ROOT / "common/static/data/geoip/GeoIP.dat" GEOIPV6_PATH = REPO_ROOT / "common/static/data/geoip/GeoIPv6.dat"
@ignore_warnings(category=ImportWarning) def test_migration_path(self): test_apps = [ 'migrations.migrations_test_apps.normal', 'migrations.migrations_test_apps.with_package_model', 'migrations.migrations_test_apps.without_init_file', ]
@patch.object(OrderItem, 'purchased_callback') @patch.object(OrderItem, 'pdf_receipt_display_name')
if has_nodata: band_result['nodata_value'] = nodata
with storebuilder.build() as (__, store): course = CourseFactory.create(modulestore=store)
plt.matshow(ranking, cmap=plt.cm.Blues) plt.colorbar() plt.title("Ranking of pixels with RFE") plt.show()
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
import salt.ext.six as six
class BaseReverseFormSet(BaseFormSet): def __iter__(self): return reversed(self.forms)
if type == 'source': return ret
grandkids = [] for descendant in descendants: grandkids.extend(descendant.children)
try: state['kwds'].pop('calendar') except: pass
import salt.utils import salt.utils.decorators as decorators from salt.utils.decorators import depends from salt.exceptions import CommandExecutionError
ManagedModel.objects.create(data='mm1', tag=self.t1, public=True) self.assertEqual(ManagedModel.objects.update(data='mm'), 1)
exclude.extend(self.form._meta.exclude)
from __future__ import absolute_import
return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)
__func_alias__ = { 'get_': 'get', 'set_': 'set', 'rm_': 'rm', 'ls_': 'ls' }
assert_greater(ridge_outlier_score, huber_outlier_score)
actions = self.get_actions(request) if actions: list_display = ['action_checkbox'] + list(list_display)
CourseEnrollment.enroll(self.user, self.course.id)
categories = np.empty(N_CATEGORIES, dtype=object) for k in category_names.keys(): categories[category_names[k]] = k
import salt.ext.six as six
log_entry.action_flag = 4 self.assertEqual(six.text_type(log_entry), 'LogEntry Object')
assert isinstance(sls_data, OrderedDict) assert not isinstance(yml_data, OrderedDict)
if not os.path.exists(config): error = '{0} not found.'.format(config) log.error(error) raise CommandExecutionError(error)
self.assert_grade( two_choice_two_input, self._make_answer_dict([(True, ["Platypus"])]), "correct" )
self.cache.clear() self.addCleanup(self.cache.clear)
data = lmap(tuple, data) return _list_to_arrays(data, columns, coerce_float=coerce_float, dtype=dtype)
estimators = [("Tree", DecisionTreeRegressor()), ("Bagging(Tree)", BaggingRegressor(DecisionTreeRegressor()))]
s = Series(date_range('1/1/2000', periods=10))
sentinel = com.sentinel_factory()
self.get_session_storage(storage)._store = None
non_outliers = linear_loss[~outliers_mask] weighted_non_outliers = sample_weight[~outliers_mask] * non_outliers weighted_loss = np.dot(weighted_non_outliers.T, non_outliers) squared_loss = weighted_loss / sigma
else: msg = _(u"Error: {msg}").format(msg=inst.message)
__virtualname__ = 'pip'
from __future__ import absolute_import
getattr(self, 'error_dict')
#html_file_suffix = ''
self.assertEqual(connection.connection.isolation_level, read_committed)
pass
exit=False)
no = models.IntegerField(verbose_name='number', blank=True, null=True)
htmlhelp_basename = 'theanodoc'
gid_from_name = False if grains['os_family'] == 'MacOS' else True
import salt.utils
est.fit(data, y) threshold = 0.5 * np.mean(est.feature_importances_) mask = est.feature_importances_ > threshold assert_array_equal(X_transform, data[:, mask])
try: if k in merged: merged[k] = key except: pass
elif "+" not in argument: if argument.endswith('.el') or argument.endswith('.$el'): return True return False
cmd, arg = command.split(' ', 1)
for image_uuid in __salt__['vmadm.list'](order='image_uuid'): if image_uuid in images: continue images.append(image_uuid)
if out['retcode']: ret = out['stderr'].strip() else: ret = out['stdout'].strip()
staff_user = UserFactory.create() CourseStaffRole(self.course.location.course_key).add_users(staff_user)
__virtualname__ = 'pkg'
return "EXTRACT(%s FROM %s)" % (lookup_type.upper(), field_name)
values = result if is_numeric_dtype(values.dtype): values = com.ensure_float(values)
supports_unspecified_pk = False
return True
if filters_use_distinct | search_use_distinct: return qs.distinct() else: return qs
raw_student_words = data.getall('student_words[]') student_words = filter(None, map(self.good_word, raw_student_words))
import os
child.display_name = 'Changed Display Name' self.store.update_item(child, user_id=self.user_id)
predictions = cross_val_predict(clf, X, y) assert_equal(predictions.shape, (150,))
connection_persists_old_columns = False
self.assertEqual(df.index.freq, None) self.assertEqual(df.index.inferred_freq, 'D')
from __future__ import unicode_literals
from __future__ import unicode_literals
resp = self.create_xblock(parent_usage_key=self.seq_usage_key, category='problem', boilerplate='multiplechoice.yaml') self.problem_usage_key = self.response_usage_key(resp)
weights = np.sum(y_true_binarize, axis=0, dtype=int)
ground_truth = np.zeros((n_features, n_targets)) ground_truth[:n_informative, :] = 100 * generator.rand(n_informative, n_targets)
self.assertEqual(my_doodad.num_calls, 1)
from __future__ import absolute_import
os.remove(filename)
X -= X.min() - .1 y_names = np.array(["one", "two", "three"])[y]
result = _permute(index[:-5]).union(_permute(index[10:])) tm.assert_index_equal(result, index)
APP.config_from_object('django.conf:settings') APP.autodiscover_tasks(lambda: settings.INSTALLED_APPS)
config = old_to_new(config)
self.assertEqual(expected_item.fields, actual_item.fields)
pass
extract_state_confs(data)
self.setup_logfile_logger() verify_log(self.config) profiling_enabled = self.options.profiling_enabled
self._ordering_clash = bool(self.ordering and self.order_with_respect_to)
for _ in range(300): prev_log_likelihood = current_log_likelihood try: current_log_likelihood = gmm.fit(X).score(X) except ConvergenceWarning: pass assert_greater_equal(current_log_likelihood, prev_log_likelihood)
choice_id = "1_2_1_choiceinput_{index}bc".format(index=index) choice_value = "choiceinput_{index}".format(index=index) answer_dict[choice_id] = choice_value
from __future__ import absolute_import import logging import re
return 0
epub_title = u'getting_started' epub_author = u'EdX Doc Team' epub_publisher = u'EdX Doc Team' epub_copyright = u'2013, EdX Doc Team'
for t in cls.tags: self._mapping[t] = cls
import integration import salt.utils
_options.update( _fetch_profile_opts( cfg, virtualname, __salt__, _options, profile_attr, profile_attrs ) )
ANALYTICS_DATA_URL = ENV_TOKENS.get("ANALYTICS_DATA_URL", ANALYTICS_DATA_URL) ANALYTICS_DATA_TOKEN = AUTH_TOKENS.get("ANALYTICS_DATA_TOKEN", ANALYTICS_DATA_TOKEN)
vmconfig['changed']['remove_{0}'.format(collection)].append(prop)
plot_calibration_curve(LinearSVC(), "SVC", 2)
exc = IndexError if _np_version_under1p12 else TypeError
packages_really_to_upgrade=[] for this_package in packages_to_upgrade: if this_package in installed_packages_list:
for line in installed_list_file: l=line.rstrip().split(' ') if l: self.installed_packages_list[l[0]]=\ this_package=self.package_info(
self._auto_publish_no_children(item.location, item.location.category, user_id, **kwargs) self._auto_publish_no_children(parent_usage_key, item.location.category, user_id, **kwargs) return item
assert k in _offset_map self.assertEqual(k, (get_offset(k) * 3).rule_code)
self._init_socket()
for k, v in source.fields.items(): self.assertIsInstance(feat[k], v)
import integration from salt.cli import daemons
s = self.ts.iloc[[0]] result = s.var(ddof=1) self.assertTrue(isnull(result))
self.assertRaises(Exception, store.select_as_multiple, None, where=['A>0', 'B>0'], selector='df1')
Publisher = apps.get_model('migrations', 'Publisher') Publisher.objects.create(name='Test Publisher') raise RuntimeError('Abort migration')
try: if os.fork() > 0: reinit_crypto() sys.exit(0) else: reinit_crypto() except OSError as ex: sys.exit(1)
for whitelist_country in whitelist: CountryAccessRule.objects.create( rule_type=CountryAccessRule.WHITELIST_RULE, restricted_course=self.restricted_course, country=Country.objects.get(country=whitelist_country) )
assert_bad({"files": [{"file_name": "test.mp4"}]})
import jinja2 import yaml import msgpack import salt.ext.six as six import tornado
chapter = modulestore().get_item(chapter.location.version_agnostic()) del chapter.visible_to_staff_only modulestore().update_item(chapter, self.user_id)
max_depth = node_indicator.sum(axis=1).max() assert_less_equal(est.tree_.max_depth, max_depth)
from __future__ import absolute_import
MIGRATION_MODULES = NoOpMigrationModules()
assert_greater(brier_score_loss(y_test, prob_pos_clf), brier_score_loss(y_test, prob_pos_pc_clf))
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
return service
if existing['code'] == 200:
logging.root.setLevel(GARBAGE)
ts.resample('d').mean()
updates.update(dict(safe_zip(params, [param - learning_rate * lr_scalers.get(param, 1.) * grads[param] for param in params])))
pnt1 = fromstr('POINT (649287.0363174 4177429.4494686)', srid=2847) pnt2 = fromstr('POINT(-98.4919715741052 29.4333344025053)', srid=4326)
pass_kwargs = {} faults = ['mode', 'makedirs'] for key in kwargs: if key not in faults: pass_kwargs[key] = kwargs[key]
if not validate_trust_root(openid_request): return default_render_failure(request, "Invalid OpenID trust root")
init_bound = np.sqrt(2. / (fan_in + fan_out))
log.shutdown_multiprocessing_logging_listener(daemonizing=True)
data = models.OneToOneField(Anchor, models.CASCADE, primary_key=True)
tasks.environment = MockEnvironment()
_write_metric(num_violations, (Env.METRICS_DIR / "jshint"))
import logging log = logging.getLogger(__file__)
import salt.ext.six as six
if isinstance(value, ast.Name) and value.id == attr: return resolved
clear_counties()
validate_kwargs('group', kwargs, {})
full_url = ( reverse(next_url, kwargs={'course_id': unicode(self.course.id)}) if next_url else next_url )
fields = getattr(self, 'unmixed_class', self.__class__).fields
conditional_probs = T.nnet.sigmoid(conditional_params[0]) return self.theano_rng.uniform( size=(num_samples, self.ndim), dtype=theano.config.floatX ) < conditional_probs
key1 = tm.rands_array(10, 10000) key1 = np.tile(key1, 2) key2 = key1[::-1]
__virtualname__ = 'ethtool'
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
index = Index(['a', 'b', 'c']) index2 = index + 'foo'
unknown = [k for k, w in known.items() if not w] known = dict((k, w) for k, w in known.items() if w)
spca_lasso = SparsePCA(n_components=3, method='cd', random_state=0, alpha=alpha) spca_lasso.fit(Y) assert_array_almost_equal(spca_lasso.components_, spca_lars.components_)
s = Series([1, 2, 3]) csv_str = s.to_csv(path=None) self.assertIsInstance(csv_str, str)
enrollment_mode = self.dashboard_page.get_enrollment_mode(self.course_info["display_name"]) self.assertEqual(enrollment_mode, 'verified')
import re
from __future__ import absolute_import
self.update_module() self.update_lib() self.loader.clear() self.assertEqual(self.loader[self.module_key](), (self.count, self.lib_count))
response = self._get_page( 'verify_student_upgrade_and_verify', course.id, expected_status_code=302 ) self._assert_redirects_to_verify_start(response, course.id)
b.authors.add(p) b.authors.remove(p) b.authors.clear() b.authors.set([p]) b.delete()
#latex_show_pagerefs = False
self.create_mode('no-id-professional', 'no-id-professional', min_price=5) self.assertTrue(CourseMode.has_payment_options(self.course_key))
shutil.copyfile(path_in, path_test)
pass
import salt.defaults.exitcodes from salt.exceptions import SaltException
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
splits = iter(cval.KFold(4, 2)) train, test = next(splits) assert_array_equal(test, [0, 1]) assert_array_equal(train, [2, 3])
from util.testing import patch_testcase, patch_sessions patch_testcase() patch_sessions()
greek.append('hbar')
source_courselike.static_asset_path = source_courselike.data_dir source_courselike.save() log.debug('course static_asset_path=%s', source_courselike.static_asset_path)
attempt = SoftwareSecurePhotoVerification(user=user) attempt.status = 'submitted' attempt.save()
thread_author = getattr(self, thread_author) self._setup_mock(
raise NotImplementedError()
if cursor.query is not None: return cursor.query.decode('utf-8') return None
self.check_populated_course(course_id)
n_faces = 5 rng = check_random_state(4) face_ids = rng.randint(test.shape[0], size=(n_faces, )) test = test[face_ids, :]
for __ in range(int(num_inputs)): input_element = self.create_input_element(**kwargs) if not None == input_element: response_element.append(input_element)
GeneratedCertificate.eligible_certificates.all().delete()
user_partititons = self.course.user_partitions self.assertEqual(len(user_partititons), 2) self.assertEqual(user_partititons[0].name, 'Name 0')
UserFactory.create(username=self.USERNAME, email=self.EMAIL, password=self.PASSWORD)
expected_mongo_calls = 1 serializer_class = CourseDetailSerializer
from salt.states import hg
digits = datasets.load_digits() X = np.asarray(digits.data, 'float32') X, Y = nudge_dataset(X, digits.target)
result = s1.astype("timedelta64[{0}]".format(unit)) assert_series_equal(result, expected)
grinfo = next(iter(x for x in grp.getgrall() if x.gr_name == name))
access_key_id, secret_access_key, token = aws.creds(provider)
self._set_opt_in_pref(self.user, "other_org", False)
try: os.remove(shim_tmp_file.name) except IOError: pass
STATUS_STARTED = 'started' STATUS_SUCCESS = 'success' STATUS_ERROR = 'error'
v0 = random_state.uniform(-1,1, A.shape[0]) w, _ = eigsh(A, k=k, sigma=0.0, v0=v0)
raise NotImplementedError("non-square filter shape", (frows, fcols))
disk_name = next(six.iterkeys(diskp[0])) disk_type = diskp[0][disk_name]['format'] disk_file_name = '{0}.{1}'.format(disk_name, disk_type)
for user in [self.alpha_user, self.beta_user, self.non_cohorted_user]: self.assertTrue(CourseEnrollment.is_enrolled(user, self.course.id))
context.update(configuration.get('default', {}))
b = np.zeros((self.dim,))
self.sharex = False
if status is not None: if status in self.NOTIFICATION_MESSAGES: found_msg = False for message in self.NOTIFICATION_MESSAGES[status]: if message in response.content: found_msg = True break
import integration from salt.config import cloud_providers_config
ind = np.logical_and(y_pred < n_labels, y_true < n_labels) y_pred = y_pred[ind] y_true = y_true[ind] sample_weight = sample_weight[ind]
today_fmt = '%B %d, %Y'
return text
X = np.asarray(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
if __grains__['os_family'] == 'RedHat': if not salt.utils.is_true(sanitizedkwargs[kwarg]): needs_update = True else: needs_update = True
self.courseware_page.start_timed_exam()
for name, Tree in CLF_TREES.items(): clf = Tree(random_state=0)
check_node(test_course.location, None, after_create, self.user_id, after_create, after_edit, editing_user)
from salt.states import boto_elasticache
import salt.exceptions
self.wait_for_ajax() self.wait_for_element_absence(btn_selector, 'Wait for the XBlock to finish reloading')
from __future__ import absolute_import
updated_overview = CourseOverview.get_from_id(course.id) self.assertEqual(updated_overview.version, 10)
value = value.decode(charset)
from __future__ import unicode_literals
loaderCls = MockLoader
asides2 = published_xblock2.runtime.get_asides(published_xblock2) self.assertEquals(asides2[0].field11, 'aside1_default_value1') self.assertEquals(asides2[0].field12, 'aside1_default_value2')
import salt.output import salt.minion
for student in students[0:MAX_SCREEN_LIST_LENGTH + 1]: results.append({ 'name': student['student__profile__name'], 'username': student['student__username'], })
epoch_num = 2
m_log_alphas = -np.log10(model.alphas_)
foo = Series([1, 2], name='foo') bar = Series([1, 2]) baz = Series([4, 5])
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): sparse_result = ols(y=y.to_sparse(), x=x.to_sparse()) _compare_ols_results(result, sparse_result)
as_view_decorator = CacheMiddleware(cache_alias=None, key_prefix=None)
self.mean_ = np.mean(X, axis=0) X -= self.mean_ if self.n_components is None: n_components = X.shape[1] else: n_components = self.n_components
logging.debug("Current state of '{}' element is '{}'".format(state_selector, current_state))
strpfmt = '{0}_%a_%b_%d_%H-%M-%S_%f_%Y'.format(basename)
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
certs_list = self.run_function('keychain.list_certs') if CERT_ALIAS in certs_list: self.run_function('keychain.uninstall', [CERT_ALIAS])
from salt.states import win_dns_client
response = problem.responders.values()[0] self.assertFalse(response.has_mask()) self.assertFalse(response.has_answerpool())
self._pkgdb_fun('register_pkg', pkg_name, formula_def, self.db_conn)
_run_command(['yum', '-y', 'install'] + build_reqs)
scsi_spec.device.sharedBus = vim.vm.device.VirtualSCSIController.Sharing.physicalSharing
enc.fit([[0], [1]]) assert_raises(ValueError, enc.transform, [[0], [-1]])
train.algorithm.termination_criterion = EpochCounter(max_epochs=1) train.extensions.pop(0) train.save_freq = 0 train.main_loop()
return (to_datetime(col, errors='coerce') .astype('datetime64[ns, UTC]'))
try: os.remove(trans_tar) except (OSError, IOError): pass
self.assertQuerysetEqual( Article.objects.filter(headline__endswith='4').iterator(), ['Article 4'], transform=attrgetter('headline'))
step = min(step or 1, timeout) * BLUR_FACTOR
y = np.zeros((10, 2))
tm.assert_series_equal(s.transpose(), s)
import salt.loader import salt.utils import salt.utils.cloud import salt.utils.validate.net import salt.config from salt import syspaths from salt.ext.six import string_types
position = getattr(self.system, 'position', None) if position is not None: assert isinstance(position, int) self.position = self.system.position
can_bulk = (not self.return_id and self.connection.features.has_bulk_insert)
if sub_sampling: doc_ratio = float(self.total_samples) / n_samples score *= doc_ratio
_ = args _ = kwargs
plt.figure(fignum, figsize=(9, 10))
i1 = Index(['a', 'b', 'c']) i2 = Index(['a', 'b', 'c'])
df = DataFrame(index=[0, 1], columns=[0]) df.ix[1, 0] = TO(1) df.ix[1, 0] = np.nan result = DataFrame(index=[0, 1], columns=[0])
X = iris.data batch_size = X.shape[0] // 3 ipca = IncrementalPCA(n_components=2, batch_size=batch_size) pca = PCA(n_components=2) pca.fit_transform(X)
result = f.clean('12/21/2010 13:30:05') self.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))
if isinstance(value, Country): if value.code: return value.code else: return None return value
try: import win32com import pythoncom import pywintypes HAS_WIN_LIBS = True except ImportError: HAS_WIN_LIBS = False
elif field in axis_values:
with cf.option_context('display.unicode.east_asian_width', True):
score += _loglikelihood(topic_word_prior, self.components_, dirichlet_component_, n_features)
if not salt_api_acl_tool(username, cherrypy.request): raise cherrypy.HTTPError(401)
y = np.reshape(y, (-1, 1))
curr_indices = self.len_indices[curr_len][curr_pos:curr_pos + curr_batch_size]
v2 = CountVectorizer(vocabulary=v1.vocabulary_)
response = self.get_response() list(storage) storage.update(response) session_storing = self.stored_session_messages_count(storage, response) self.assertEqual(session_storing, 0)
from __future__ import absolute_import
tm._skip_if_no_pytz() from pytz import timezone
from scipy import misc face = misc.face(gray=True)
lcd = _lcd_dtype(counts[IntBlock]) kinds = set([i.dtype.kind for i in counts[IntBlock]]) if len(kinds) == 1: return lcd
tokens = [x[1:-1].decode('utf8').replace("&#39;", "'") for x in lexer]
try: validate_email(eamap.external_email) context['ask_for_email'] = False except ValidationError: context['ask_for_email'] = True
email.to_option = next( ( t_type for t_type in ( target.target_type for target in email.targets.all() ) if t_type in EMAIL_TARGETS ), SEND_TO_MYSELF ) email.save()
waitpid_options = 0
obj = models.Post.objects.create(name='New post', text='goodbye world') self.assertGreater(obj.pk, 10)
if __opts__['pillar_roots'].get(branch, []) == [pillar_dir]: return {}
self.store.publish(problem.location, self.user.id)
self.assertEquals(5, self.response.content.count('grade_A'))
Author.objects.create(name="Ted")
from __future__ import absolute_import import uuid
'ellipsoid': (6378137.0, 6356752.31414, 298.257222101), 'eprec': (1, 5, 10),
self.assertRaises(ValueError, store.put, 'b', df, format='fixed', complib='zlib')
errstring = "Invalid course_key: 'InvalidCourseID'." with self.assertRaisesRegexp(CommandError, errstring): call_command('export', "InvalidCourseID", self.temp_dir_1)
hasher.rounds = old_rounds
from salt.states import apache_module
from salt import minion from salt.utils import event from salt.exceptions import SaltSystemExit import salt.syspaths
ret_override_cfg = ret_cfg.get( attr_name, override_cfg_default ) if ret_override_cfg: return ret_override_cfg
na_values=None, keep_default_na=True, na_filter=True, verbose=False, skip_blank_lines=True,
ref_key = 'new tags' \ if new_ref_type == 'tag' \ else 'new branches' ret.setdefault(ref_key, []).append(ref_name)
n_features = X.shape[1] if self.n_features_to_select is None: n_features_to_select = n_features // 2 else: n_features_to_select = self.n_features_to_select
from functools import wraps import random
for course_dir in source_dirs: _err_cnt, _warn_cnt = validate_data_source_paths(path(data_dir), course_dir) err_cnt += _err_cnt warn_cnt += _warn_cnt
import salt.utils
res2 = sql.read_sql("CALL get_testdb();", self.conn) tm.assert_frame_equal(df, res2)
ignore_cidr: 192.168.50.0/24
with warnings.catch_warnings(record=True) as w: warnings.simplefilter("always")
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath, TestsLoggingHandler from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
arn = ret['get_user_response']['get_user_result']['user']['arn']
lfw_pairs_train = fetch_lfw_pairs(data_home=SCIKIT_LEARN_DATA, resize=None, slice_=None, color=True, download_if_missing=False) assert_equal(lfw_pairs_train.pairs.shape, (10, 2, 250, 250, 3))
K = squareform(K) np.fill_diagonal(K, 1)
self.assertEqual(len(formset.forms), 4)
_eps = np.finfo('f4').eps
del_info = self.run_function('user.info', [DEL_USER]) if del_info: self.run_function('user.delete', [DEL_USER])
record = 0 clean = intersect while len(clean) > 0: bad_channel = [] for channel in clean: channel_0 = channels_0[channel] channel_1 = channels_1[channel]
return predictions[np.arange(X.shape[0]), median_estimators]
exc_info_on_loglevel=logging.DEBUG
time.sleep(5)
from __future__ import absolute_import
self.assertTrue(retry.called) (__, kwargs) = retry.call_args exc = kwargs['exc'] self.assertIsInstance(exc, SMTPDataError)
try_quick = True if hasattr(other, 'align'):
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] y_state = layer_to_state[y]
if len(matches) == 1: self.package_name = matches[0] return self.releases
return ret
DATE_INPUT_FORMATS = [
with modulestore().default_store(ModuleStoreEnum.Type.mongo): self.course = CourseFactory.create()
from __future__ import unicode_literals
trees = ExtraTreesClassifier(max_depth=3, n_estimators=10, random_state=0) trees.fit(X, y)
clf.set_params(scale=True) X_score, Y_score = clf.fit_transform(X_s, Y_s) assert_array_almost_equal(X_s_score, X_score) assert_array_almost_equal(Y_s_score, Y_score)
df = DataFrame({'A': [1, 2, 3], 'B': ['5,6', '7,8', '9,0']})
self.assertEquals( self.middleware.process_response(self.request, self.response), self.response ) exit_context.assert_called_with(UserTagsEventContextMiddleware.CONTEXT_NAME) exit_context.reset_mock()
proc_args.insert(0, sys.executable)
extra_data = [ unicode(course_id) if course_id else "", "donation_course" if course_id else "donation_general" ]
defaults.write( 'TIMEOUT=60\n' 'TICK=1\n' )
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.bio_book])
import integration import salt.utils
srid = None
salt '*' win_update.download_updates
qs = Author.objects.none()
conn.get_instance_profile(name) return True
placeholder_rows, param_rows = zip(*sql_and_param_pair_rows)
add_discussion(container, group_a_menu) container.duplicate(self.group_a_item_1_action_index)
self.require_index = None
query = '//table//*[re:test(text(), %r)]/ancestor::table' xpath_expr = u(query) % pattern
vertical.start = self.future modulestore().update_item(vertical, self.dummy_user)
matched_buttons = [btn for btn in buttons if btn.text == component_type]
EscapeUnicode = EscapeText
raise TypeError("PermWrapper is not iterable.")
qs = qs.filter(a__f1='foo') self.assertEqual(str(qs.query).count('INNER JOIN'), 1)
with self.assertRaises(TypeError): wkt_r.read(1) with self.assertRaises(TypeError): wkt_r.read(memoryview(b'foo'))
if is_advanced_problem: advanced_tab = page.q(css='.problem-type-tabs a').filter(text='Advanced').first advanced_tab.click()
sfn = '' source_sum = {}
pass
'disable_returners': list,
if not correct: second_addend += random.randint(1, 10)
fit_params = fit_params if fit_params is not None else {} fit_params = dict([(k, _index_param_value(X, v, train)) for k, v in fit_params.items()])
}
XBLOCK_SELECT_FUNCTION = prefer_xmodules
if 'srid' not in ds_input: raise GDALException('Specify srid for JSON or dict input.')
self.assertRaises(TypeError, self.frame.rename)
TEST_COURSE = (COURSE_NAME, )
from __future__ import absolute_import
if service_name == 'SSH' or service_name == 'ssh': temp_service_name = 'TSM-SSH' else: temp_service_name = service_name
for job in data.keys(): if 'enabled' not in data[job]: data[job]['enabled'] = True
if n == 0 and other != cur_cmend: n += 1
def first_non_None_value(values): try: v = next(v for v in values if v is not None) except StopIteration: return None return v
if not isinstance(query, six.string_types): raise TypeError('GeoIP query must be a string, not type %s' % type(query).__name__)
dr = date_range('03/06/2012 00:00', periods=200, freq='W-FRI', tz='US/Eastern')
self.client.logout()
from salt.modules import nagios import os
url(r'^api/bookmarks/', include('openedx.core.djangoapps.bookmarks.urls')),
FACEBOOK_API_VERSION = AUTH_TOKENS.get("FACEBOOK_API_VERSION") FACEBOOK_APP_SECRET = AUTH_TOKENS.get("FACEBOOK_APP_SECRET") FACEBOOK_APP_ID = AUTH_TOKENS.get("FACEBOOK_APP_ID")
def make_panel(): index = 5 cols = 3
import salt.utils.jid import salt.returners import salt.ext.six as six
assert_equal(len(folds), len(labels)) for i in np.unique(folds): assert_greater_equal(tolerance, abs(sum(folds == i) - ideal_n_labels_per_fold))
log = logging.getLogger(__name__)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch
__remove_queue_logging_handler()
import salt.utils from salt.exceptions import CommandExecutionError
self._state = ModelState()
log.debug('Downloading...') wua_downloader.Updates = wua_download_list
sorted_df = frame.sort_values(by='A') indexer = frame['A'].argsort().values expected = frame.ix[frame.index[indexer]] assert_frame_equal(sorted_df, expected)
expected_grades = [self._format_user_grade(header_row, **grade) for grade in user_grades] self.verify_rows_in_csv(expected_grades)
key = safe_key('test', '', version)
log = logging.getLogger(__name__)
PaymentFakeView.PAYMENT_STATUS_RESPONSE = new_status return HttpResponse()
task_key = hashlib.md5(task_key_stub).hexdigest() return submit_task(request, task_type, task_class, course_key, task_input, task_key)
CourseEnrollment.enroll(user, course_id, "honor") self.assert_no_events_were_emitted()
for typ in self.typlist: self._write(typ)
(self.filter_specs, self.has_filters, remaining_lookup_params, filters_use_distinct) = self.get_filters(request)
self._assert_request_status(request_uuid, "pending")
LP_SRC_FORMAT = 'deb http://ppa.launchpad.net/{0}/{1}/ubuntu {2} main' LP_PVT_SRC_FORMAT = 'deb https://{0}private-ppa.launchpad.net/{1}/{2}/ubuntu' \ ' {3} main'
cp = self.ts.copy() cp.name = 'changed' result = getattr(s, op)(cp) self.assertIsNone(result.name)
module = CapaFactory.create(rerandomize=rerandomize, done=True)
if which_set in ['train', 'test']: data_x, data_y = load_data("{0}{1}_32x32.mat".format(path, which_set))
new_conf.append(new_line)
attachment = MIMEBase(basetype, subtype) attachment.set_payload(content) Encoders.encode_base64(attachment)
connection = connections[options['database']]
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath ensure_in_syspath('../../')
axes = df.plot(subplots=True, color='k') for ax in axes: self._check_colors(ax.get_lines(), linecolors=['k']) tm.close()
response = self.client.get('/check_session/') self.assertEqual(response.status_code, 200) self.assertEqual(response.content, b'NO')
certificates.update( status=CertificateStatuses.unavailable, verify_uuid='', download_uuid='', download_url='', grade='', )
super(MultiprocessingProcess, self).__init__(*args, **kwargs)
salt.utils.minion.cache_jobs(self.opts, load['jid'], ret)
results.append(str(self.glob_match(word)))
call_command('seed_permissions_roles', unicode(self.course_id))
if os.path.isdir(dest): salt.utils.rm_rf(dest) fn_ = salt.utils.fopen(dest, 'wb+')
self.assertTrue(np.isnan(result.values[:11]).all()) self.assertFalse(np.isnan(result.values[11:]).any())
self.assertRaises(TypeError, lambda: dti - ts_tz) self.assertRaises(TypeError, lambda: dti_tz - ts) self.assertRaises(TypeError, lambda: dti_tz - ts_tz2)
if display_name is not None: metadata['display_name'] = display_name
from django.core.wsgi import get_wsgi_application
while top_level_logger.handlers: top_level_logger.handlers.pop()
class DefaultsForm(ModelForm): class Meta: model = Defaults fields = '__all__'
_registered_options[key] = RegisteredOption(key=key, defval=defval, doc=doc, validator=validator, cb=cb)
wa = CountVectorizer(ngram_range=(1, 2), encoding='ascii').build_analyzer() assert_raises(UnicodeDecodeError, wa, text_bytes)
assert_almost_equal(dists[3], 2, decimal=5)
specified_address = os.environ.get( 'DJANGO_LIVE_TEST_SERVER_ADDRESS', 'localhost:8081-8179')
import salt.version
self.generated_operations[app_label] = stable_topological_sort(ops, dependency_graph)
with self.assertNumQueries(2): embargo_api.message_url_path(self.course.id, "enrollment")
for name, scorer in SCORERS.items(): repr(scorer)
AT_xT = self.rmul_T(self.transpose_left(x, False)) rval = self.transpose_right(AT_xT, True) return rval
self.assert_pickles( Event.objects.select_related('group').order_by('title').values_list('title', 'group__name') )
grader_payload = xqueue_body.get('grader_payload')
default_range = self.check_fid_range(fid_range)
cet = CourseEmailTemplate.objects.get(name='foo') self.assertIsNotNone(cet)
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch from salttesting.helpers import ensure_in_syspath
super(BaseLmsDashboardTest, self).setUp()
if weights is not None:
ext_user = User.objects.get(email=self.ext_user.email) self.assertFalse(auth.user_has_role(ext_user, CourseStaffRole(self.course.id)))
y_in_classes = in1d(y, classes) y_seen = y[y_in_classes] indices = np.searchsorted(sorted_class, y_seen) indptr = np.hstack((0, np.cumsum(y_in_classes)))
n_jobs = min(_get_n_jobs(n_jobs), n_estimators)
import salt.pillar import salt.utils.minions
pass
from salt.states import glusterfs import salt.utils.cloud import salt.modules.glusterfs as mod_glusterfs
self.repo = git.Repo.init(self.cachedir) new = True
my_stdout = my_stdout.replace( my_globals['__doc__'], '')
ret['msg'] = _urlopen(url, timeout=timeout).read().splitlines()
with self.assertNumQueries(2): self.client.get('/dates/books/reverse/')
(n, d) = a.frac() (n2, d2) = b.frac() return Progress(n + n2, d + d2)
self.download_results = None
return "django_time_extract('%s', %s)" % (lookup_type.lower(), field_name)
K = self._centerer.fit_transform(K)
pw_user.__grains__ = {} pw_user.__salt__ = {} pw_user.__context__ = {}
if bulk_write_record.active: bulk_write_record.set_structure_for_branch(course_key.branch, new_structure)
self.user.is_active = user_is_active
msg = "Manager isn't available; AbstractBase2 is abstract" with self.assertRaisesMessage(AttributeError, msg): AbstractBase2.restricted.all()
ret.setdefault('updated branches', {})[ref_name] = \ {'old': old_sha, 'new': new_sha}
__virtualname__ = 'service'
import salt.utils
try: dmin, dmax = self.viewlim_to_dt() except ValueError: return []
rendered = "0+untagged.%d.g%s" % (pieces["distance"], pieces["short"]) if pieces["dirty"]: rendered += ".dirty"
from __future__ import absolute_import
self.connect_pub()
gc2 = GeometryCollection(*tuple(g for g in gc1))
n_samples_per_fold = np.zeros(n_folds)
user = User.objects.get(email=self.notenrolled_student.email) self.assertTrue(CourseEnrollment.is_enrolled(user, self.course.id))
from salt.states import artifactory
if len(set(ml)) != 1: raise ValueError("Composite space is empty or containing " "incompatible index spaces") return ml[0]
res = self.client.get('/dates/books/2000/jan/1/') self.assertEqual(res.status_code, 404)
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.check_problem(get_request_dict)
iris = datasets.load_iris() y_true, y_pred, _ = make_prediction(dataset=iris, binary=False)
original_pk = request.user.pk request.user.pk = 1 super(CustomUserAdmin, self).log_change(request, object, message) request.user.pk = original_pk
if name == 'nansum': if dt.itemsize < 8: return False
from salttesting import TestCase, skipIf from salttesting.helpers import ( ensure_in_syspath, requires_network, skip_if_binaries_missing ) ensure_in_syspath('../..')
with tm.assertRaises(NotImplementedError): pd.read_excel(os.path.join(self.dirpath, 'test1' + self.ext), parse_dates=True)
self.repo.checkout(checkout_ref) if branch: self.repo.reset(oid, pygit2.GIT_RESET_HARD)
if nplots == 1: axes = axarr[0] else: axes = axarr.reshape(nrows, ncols).squeeze()
if 'schedule' not in opts: opts['schedule'] = {}
CityAdmin.view_on_site = True
try:
self.config.pop(cli_log_datefmt)
response = self._load_dashboard() self.assertContains(response, "credit-request-pending-msg")
try: res = FuncNode(node.func.id) except ValueError: raise
StudentViewTransformer.collect(self.block_structure) self.block_structure._collect_requested_xblock_fields()
expected = Series(np.ones(n), index=index) s = Series(np.zeros(n), index=index) s[s == 0] = 1 assert_series_equal(s, expected)
self.assertRaises(TypeError, Int64Index, 5)
master_doc = 'index'
y = np.arange(10) % 3
continue
exp = Index([1.0, 'obj', 3.0], name='x') self.assert_index_equal(idx.fillna('obj'), exp)
import sys import atexit import logging import threading import logging.handlers
if os_family == 'FreeBSD': return
datasource_properties = {'connection-url': 'jdbc:/old-connection-url'} ds_status = {'created': False}
with tm.assert_produces_warning(FutureWarning): frame.sort(columns='A') with tm.assert_produces_warning(FutureWarning): frame.sort()
self.assertURLEqual( '{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format(change_user_url), '{}?_changelist_filters=is_superuser__exact%3D0%26is_staff__exact%3D0'.format(change_user_url) )
__virtualname__ = 'system'
get_response = self.send_get(self.client) self.assertEqual(new_name, get_response.data["name"])
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'linode'
cluster_centers_indices = np.unique(labels) labels = np.searchsorted(cluster_centers_indices, labels)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
tsframe.to_csv(path) recons = DataFrame.from_csv(path, index_col=None) self.assertEqual(len(recons.columns), len(tsframe.columns) + 2)
self.crypt = kwargs.get('crypt', 'aes')
ret = __salt__['k8s.label_absent'](name, node, apiserver)
self.assertTrue(all(isinstance(course, CourseSummary) for course in courses_list_by_staff))
with self.assertRaises(TypeError): cntry_g.country_code(17) with self.assertRaises(TypeError): cntry_g.country_name(GeoIP)
log.warning( "Could not retrieve information from VAL for Bumper edx Video ID: %s.", video.bumper['edx_video_id'] ) return []
modeladmin = BookAdminWithCustomQueryset(self.alfred, Book, site) request = self.request_factory.get('/') changelist = self.get_changelist(request, Book, modeladmin)
from __future__ import absolute_import import errno import os import locale import logging from distutils.version import LooseVersion
timeseries_custom_bmonthend_incr = \ Benchmark("date + cme",setup)
response['Last-Modified'] = http_date( timegm(feedgen.latest_post_date().utctimetuple()))
sequential = self.store.create_child( self.user_id, chapter.location, 'sequential', block_id='subsection_one' ) self.store.publish(sequential.location, self.user_id)
self.syndic_mode = self.opts.get('syndic_mode', 'sync') self.syndic_failover = self.opts.get('syndic_failover', 'random')
field = models.ForeignKey("auth.Permission", models.CASCADE) name, path, args, kwargs = field.deconstruct()
pw = ParzenWindows(MNIST(which_set='test').X, .20) print(pw.get_ll(history))
_DELETED_SENTINEL = object()
_infer_as_myclass = False
assign_default_role(instance.course_id, instance.user)
for fg in (fg1, fg2): with self.assertRaises(GEOSException): fg._get_ptr()
rho, _ = spearmanr(x, y) increasing_bool = rho >= 0
return _do_static(parser, token)
user, client_name = mock_get_id_token.call_args[0] self.assertEqual(user, self.user) self.assertEqual(client_name, "programs")
for field_index, field_desc in enumerate(results.split(',')): field_desc = field_desc.strip() if field_desc.startswith("UNIQUE"): continue
[{0: 'a', 1: 'b'}, {0: 'a'}],
module = CapaFactory.create(force_save_button="true", rerandomize=RANDOMIZATION.ALWAYS, done=True) self.assertTrue(module.should_show_save_button())
for user in [UserFactory(), UserFactory(), UserFactory()]: render.get_module_for_descriptor( user, request, descriptor, field_data_cache, course.id, course=course )
origin = bool(re.search('/', name))
self.assertTrue(section.release_date) self.assertFalse(section.due_date) self.assertFalse(section.policy)
ct_in_map = { 'application/x-www-form-urlencoded': urlencoded_processor, 'application/json': json_processor, 'application/x-yaml': yaml_processor, 'text/yaml': yaml_processor, 'text/plain': text_processor, }
extra_context = {"platform_name": microsite.get_value('platform_name', settings.PLATFORM_NAME)}
from salt.states import influxdb_database
msg = name + ' is non deterministic on 32bit Python' raise SkipTest(msg)
u = User.objects.get(email='staffmember@example.com') self.assertTrue(not u.check_password("anewpassword"))
from distutils.version import LooseVersion try:
list(DirectoryEntry.objects.all().select_related())
from salt.modules import linux_acl from salt.exceptions import CommandExecutionError
return isinstance(part, slice) or com.is_list_like(part)
expected = self.create_index() if not isinstance(expected, MultiIndex): expected.name = 'foo' result = pd.Index(expected) tm.assert_index_equal(result, expected)
cache.clear()
all_ = kwargs.pop('all', False)
f = getattr(_algos, fname, None) if f is not None and is_numeric: return f
TaggedItem.objects.create(content_object=self.quartz, tag="shiny") TaggedItem.objects.create(content_object=self.quartz, tag="clearish")
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
qs = RasterModel.objects.filter(geom__dwithin=(rast, 500)) self.assertEqual(qs.count(), 1)
import integration
class TablespacesTests(TestCase):
return ((-123.30, -41.32), (174.78, 48.46))
return errors
from __future__ import absolute_import
filePaths = [k['Key'] for k in data] ret[bucket] += [k for k in filePaths if not k.endswith('/')]
setattr(cls, '_typ', cls.__name__.lower())
if _samefile(old_file_name, new_file_name): return
maxDiff = None
grains['virtual_subtype'] = 'Xen HVM DomU'
self.assertEqual(a_sorted.index.names, self.frame.index.names)
assert_equals(attempt_2, SoftwareSecurePhotoVerification.active_for_user(user))
self.p1.article_set.set([self.a1, self.a2])
if self._is_series:
__virtualname__ = 'cyg'
xmin = TT.switch(cond, constant(numpy.nan), a + (-B + TT.sqrt(radical)) / (3 * A)) return xmin
import inspect import logging import sys
trainer = yaml_parse.load(convert_to_one_hot_yaml % {'filename': filename}) trainer.main_loop()
index_axes_map = dict() for i, a in enumerate(obj.axes):
width = self.ext.config['bliptv_width'][0] height = self.ext.config['bliptv_height'][0] return flash_object(url, width, height)
df = _make_frame() df.to_csv(path, tupleize_cols=False, index=False) result = read_csv(path, header=[0, 1], tupleize_cols=False) assert_frame_equal(df, result)
return start(name)
from __future__ import unicode_literals
return g.wkt
from __future__ import absolute_import, print_function import errno import logging import os import tempfile import shutil
grad_shared = sharedX(zv) z_shared = sharedX(zv)
removed_tab = tab_ids.pop(num_orig_tabs / 2) self.assertTrue(len(tab_ids) == num_orig_tabs - 1)
requested_format = request.GET.get('_accept', request.META.get('HTTP_ACCEPT', 'text/html'))
X = np.cast['float32'](X) X = X.reshape(-1, 2 * 96 * 96)
est = Ridge(alpha=alpha, fit_intercept=intercept, solver=solver) est.fit(X, y, sample_weight=sample_weight) coefs = est.coef_ inter = est.intercept_
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
self.assertEqual(self.offset1.rollback(d), datetime(2014, 6, 27, 17))
category_strs = [x.strip() for x in category_strs] return category_strs
warnings.simplefilter('ignore', ConvergenceWarning)
courselike_label = self.parent_xml.split('.')[0]
import yaml import json
content = contentstore('trashcan').find(asset_key, throw_on_not_found=False) self.assertIsNotNone(content)
from datetime import timedelta
response = explicit_default_with_prefix_view(request, '14') self.assertEqual(response.content, b'Hello World 4')
params_bad_ordernum = params.copy() params_bad_ordernum['orderNumber'] = str(order1.id + 10) with self.assertRaises(CCProcessorDataException): payment_accepted(params_bad_ordernum)
disturb_mem.disturb_mem() rng = np.random.RandomState([2012, 11, 27])
with self.assertRaises(ValueError): Author.objects.annotate(age=Avg('friends__age'))
ISO_8859_1, UTF_8 = str('iso-8859-1'), str('utf-8')
self.go_to_tab_and_assert_problem(1, self.problem1_name)
updates[mean_square_grad] = new_mean_squared_grad updates[mean_square_dx] = new_mean_square_dx updates[param] = param + delta_x_t
self.assertTrue(self.all_models[0]._meta._relation_tree)
from __future__ import unicode_literals
def __init__(self): super(NullSpace, self).__init__()
self.verify_end_date("edX/test_end/2012_Fall", "Sep 17, 2015")
if not hasattr(self, 'W_lr_scale'): self.W_lr_scale = None
batch0 = slice(0, chunk_size) scaler_batch = MinMaxScaler().fit(X[batch0]) scaler_incr = MinMaxScaler().partial_fit(X[batch0])
self.options.update({'use_decimal': False})
def __init__(self, alias, col, value): self.alias, self.col, self.value = alias, col, value
plsca = PLSCanonical(n_components=2) plsca.fit(X_train, Y_train) X_train_r, Y_train_r = plsca.transform(X_train, Y_train) X_test_r, Y_test_r = plsca.transform(X_test, Y_test)
self.mixed_frame['H'] = '1.' self.mixed_frame['I'] = '1'
access_key: 0e604a2c-aea6-4081-acb2-e1d1258ef95c token: be8fd96b-04eb-4d39-b6ba-a9edbcf17f12 driver: scaleway
apache2.service.require(state('libapache2-mod-wsgi').pkg, pkg='apache2') \\ .watch(file='/etc/apache2/httpd.conf')
import salt.utils
if is_timedelta: res = arr[res_indexer] lag = arr[lag_indexer]
inlier_idxs_subset = sample_idxs[inlier_mask_subset] X_inlier_subset = X[inlier_idxs_subset] y_inlier_subset = y[inlier_idxs_subset]
return []
__allow_additional_items__ = True
plt.matshow(cm) plt.title('Confusion matrix of the %s classifier' % name) plt.colorbar()
apps = Apps()
log = logging.getLogger(__name__)
instance = self.run_cloud('-p gce-test {0}'.format(self.INSTANCE_NAME)) ret_str = '{0}:'.format(self.INSTANCE_NAME)
problem.grade_answers({'1_2_1': 'test'})
pass
class _OFFSET(Structure): _fields_ = [ ('Offset', DWORD), ('OffsetHigh', DWORD)]
__virtualname__ = 'user'
from salt.utils.odict import OrderedDict from salt.utils import warn_until from salt.state import HighState
REQUIREMENTS_DISPLAY_MODES = CourseMode.CREDIT_MODES + [CourseMode.VERIFIED]
'edx_proctoring',
index, name = own_state[0], None if len(own_state) > 1: name = own_state[1]
beta = 5 eps = 1e-6 graph.data = np.exp(-beta * graph.data / graph.data.std()) + eps
iterator = SequentialSubsetIterator(10, 3, 5)
assert_raise_message(ValueError, msg, check_X_y, X, y, ensure_min_features=3, allow_nd=True)
K1 = kernel(X, Y) K2 = pairwise_kernels(X, Y, metric=kernel) assert_array_almost_equal(K1, K2)
from salt.states import bower from salt.exceptions import CommandExecutionError
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
print "checking initialization..." eobjs = before_ideal.create_user(self.course_key) before = EmailEnrollmentState(self.course_key, eobjs.email) self.assertEqual(before, before_ideal)
DATE_INPUT_FORMATS = [
s = Series(index=lrange(1, 5)) result = df.iloc[s.index] expected = df.ix[[2, 4, 6, 8]] assert_frame_equal(result, expected)
if scipy.sparse.issparse(train): idx = label.sum(axis=1).nonzero()[0] return (train[idx], label[idx])
return self.apply(Series.value_counts, normalize=normalize, sort=sort, ascending=ascending, bins=bins)
f = ignore_warnings X = sp.lil_matrix((3, 1)) X[0, 0] = -1 X[2, 0] = 1
Ensure myelb ELB exists: boto_elb.present: - name: myelb - region: us-east-1 - profile: keyid: GKTADJGHEIQSXMKKRBJ08H key: askdjghsdfjkghWupUjasdflkdfklgjsdfjajkghs
pythoncom.CoInitialize()
if GlobalStaff().has_user(caller): return
serializer_ctx["request"] = request
data = read_sas(self.file01, index="SEQN", format="xport") tm.assert_frame_equal(data, data_csv, check_index_type=False)
vertical1.children.append(html.location) self.store.update_item(vertical1, self.user.id)
from salt.exceptions import SaltException
self.factory(alpha=-.1)
if is_request_from_mobile_app(request): return HttpResponse(status=401)
if indexer is None: indexer = np.arange(len(labels))
fields = {f for f in fields if f != 'pk'}
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'softlayer', vm_['profile'], vm_=vm_) is False: return False
from __future__ import absolute_import from salt.ext.six.moves import range
frame.to_string()
exc_info=log.isEnabledFor(logging.DEBUG)
if name in self.opts['schedule']: del self.opts['schedule'][name] schedule = self.opts['schedule']
bseries2 = SparseSeries(self.bseries.to_dense()) tm.assert_numpy_array_equal(self.bseries.sp_values, bseries2.sp_values)
step_incr = -1 start_idx = (num_assets - 1) - start_idx end_idx = (num_assets - 1) - end_idx
return False
return self.__nonzero__()
from __future__ import print_function from __future__ import absolute_import import os
data = { "form-TOTAL_FORMS": "1", "form-INITIAL_FORMS": "1", "form-MAX_NUM_FORMS": "0",
Form = modelform_factory(Person, fields="__all__") self.assertNotEqual(Form.base_fields['name'].widget.__class__, forms.Textarea)
number_aware_alphabetical_key = cmp_to_key(number_aware_alphabetical_cmp)
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
from salt.ext.six.moves import zip
old_stdout, old_stderr = sys.stdout, sys.stderr try: sys.stdout = StringIO() sys.stderr = StringIO()
(offset_lom_aug_thu, datetime(2012, 8, 30), True), (offset_lom_aug_thu, datetime(2011, 9, 1), True),
if response.get('X-Frame-Options') is not None: return response
if isinstance(obj, datetime.datetime): if is_naive(obj): self.timezone = get_default_timezone() else: self.timezone = obj.tzinfo
import salt.client import salt.utils.virt import salt.utils.cloud import salt.key from salt.exceptions import SaltClientError
panel = Panel(items=lrange(3), major_axis=lrange(3), minor_axis=lrange(3), dtype='O') self.assertEqual(panel.values.dtype, np.object_)
saltenv = env
if 'port' in _options: _options['port'] = int(_options['port']) return _options
n, bins, patches = ax.hist(y, bins=bins, bottom=bottom, **kwds) cls._update_stacker(ax, stacking_id, n) return patches
raw_image_url = self.course_image_url
runtime_reqs_sec = self.total_complete / elapsed_time.total_seconds() print('Recalibrating. Current reqs/sec: {0}'.format(runtime_reqs_sec)) return
self.request.user = self.effective_user
ret['changes'] = {'old': '', 'new': name}
from __future__ import absolute_import import logging import time import json
X = iris.data
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self._access = {}
return dict( itertools.chain.from_iterable( store.heartbeat().iteritems() for store in self.modulestores ) )
if block_id is None: if block_type == 'course': block_id = course_key.run else: block_id = u'{}_{}'.format(block_type, uuid4().hex[:5])
mako_middleware_process_request(self.request)
packages_really_to_remove.append(this_package)
from __future__ import unicode_literals
from dateutil.relativedelta import relativedelta, weekday from dateutil.easter import easter import pandas.tslib as tslib from pandas.tslib import Timestamp, OutOfBoundsDatetime, Timedelta
tooltip = { 'type': 'subsection', 'num_students': num_students, 'subsection_num': c_subsection, 'subsection_name': subsection_name }
col_type = self._get_dtype(sql_col.type)
self.save_and_verify_discussion_topics(key=self.inline_key)
timeout = -1
import copy import logging import time
rng = np.random.RandomState(42) old_centers = centers + rng.normal(size=centers.shape)
dm['C'] = 1 self.assertEqual(dm['C'].dtype, np.int64)
SECRET_KEY = 'dev key'
a = 10000000000000000 b = a + 1 s = Series([a, b])
p = np.zeros((y.shape[0], k), dtype=np.float64) for i in range(k): p[:, i] = y == i
scores = cross_val_score(EstimatorWithFit(), [[1], [2], [3]], [1, 0, 1], scoring=DummyScorer()) assert_array_equal(scores, 1)
X_scaled_back = scaler.inverse_transform(X_scaled) assert_array_almost_equal(X_scaled_back, X)
from salt.modules import bluez from salt.exceptions import CommandExecutionError import salt.utils.validate.net
data = fetch_species_distributions() species_names = ['Bradypus Variegatus', 'Microryzomys Minutus']
n_nonzeros = int(opts.ratio_nonzeros * opts.n_features)
GEOIP_PATH = REPO_ROOT / "common/static/data/geoip/GeoIP.dat" GEOIPV6_PATH = REPO_ROOT / "common/static/data/geoip/GeoIPv6.dat"
self.store_precision = True
location = Location("HarvardX", "ER22x", "2013_Spring", "conditional", "condone")
X, redirects, index_map = get_adjacency_matrix( redirects_filename, page_links_filename, limit=5000000) names = dict((i, name) for name, i in iteritems(index_map))
name = _sdecode(name) snap_name = _validate_snap_name(name, snap_name, runas=runas)
fake_data_api.add_course(self.COURSE_ID, course_modes=['honor', 'verified', 'audit'])
__virtualname__ = 'quiet'
os.remove(destdir) os.makedirs(destdir)
if numeric_only is None: try: return ranker(self) except TypeError: numeric_only = True
objs = [t.read(where=_where, columns=columns, **kwargs) for t in tbls]
df['B'] = i result = df['B'] assert_series_equal(result, expected, check_names=False) self.assertEqual(result.name, 'B')
import integration import salt.utils from salt import fileclient from salt.ext import six from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('..')
import salt.utils import salt.modules.cmdmod import salt.utils.systemd
@contextlib.contextmanager def altered_table_name(model, temporary_table_name): original_table_name = model._meta.db_table model._meta.db_table = temporary_table_name yield model._meta.db_table = original_table_name
clf = svm.OneClassSVM() clf.fit(X) pred = clf.predict(T)
'ENTRANCE_EXAMS': False,
for bucket_name in _get_buckets(): s3_meta = __get_s3_meta(bucket_name)
clf = SGDClassifier(loss="hinge", alpha=0.01, n_iter=200, fit_intercept=True) clf.fit(X, Y)
super(XBlockAcidBase, self).setUp()
from xmodule.modulestore.inheritance import InheritanceMixin from xmodule.modulestore import prefer_xmodules from xmodule.x_module import XModuleMixin
from __future__ import absolute_import
FEATURES['AUTOMATIC_AUTH_FOR_TESTING'] = True
total_pages = int(math.ceil(float(total_students) / MAX_STUDENTS_PER_PAGE_GRADE_BOOK)) or 1
self._process_map[pid]['Process'].join(1)
ensemble = BaggingRegressor(base_estimator=DecisionTreeRegressor(), max_samples=1.0, bootstrap=True, random_state=rng).fit(X_train, y_train)
from __future__ import unicode_literals
if r == 0: return True
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
self.assertFalse(thread_page.check_if_selector_is_focused(selector='.thread-wrapper'))
block_structure.remove_block_if( check_child_removal )
for item in good_out: self.assertIn(item, ret_output)
self.assertFalse(linode._validate_name(''))
self.assertEqual(len(mail.outbox), 0)
'dark_lang',
updates = _filter_list_by_category(updates=updates, categories=categories)
DATABASES = AUTH_TOKENS['DATABASES']
if privacy == self.PRIVACY_PUBLIC: self.assertEqual(profile_page.privacy, 'all_users') else: self.assertEqual(profile_page.privacy, 'private')
stop = 0 for k, centroid in enumerate(centroids): start, stop = stop, stop + n_samples_per_cluster[k]
self.user.is_staff = True self.user.save()
n_valid = valid_repr.shape[0] n_test = test_repr.shape[0]
enum = None
from __future__ import absolute_import
header_row = OrderedDict([('id', 'Student ID'), ('email', 'Email'), ('username', 'Username')])
kwargs['sort'] = True
result = func(cond, values, other) if self._can_hold_na or self.ndim == 1:
error_msg = exc_info_to_str(sys.exc_info())
env = geom.envelope env_w, env_h = self.get_width_height(env.extent) center = env.centroid
request_lowstate = [{ "client": "local", "tgt": "*", "fun": "test.fib", "arg": "10" }]
try: import exceptions except ImportError: pass
self.assertEqual(len(mail.outbox), 0)
self.assertEqual(new_version.test_content_field, 'default value') self.assertEqual(new_version.test_settings_field, 'default value')
self.assert_logged_in_cookie_redirect(actions.do_complete(
self.assertIn("EXCEPTION!", get_processor_exception_html(CCProcessorException()))
nullqs = State.objects.filter(poly__isnull=True) validqs = State.objects.filter(poly__isnull=False)
if isinstance(obj, CourseDescriptor): return _has_access_course(user, action, obj)
CMS_SEGMENT_KEY = AUTH_TOKENS.get('SEGMENT_KEY')
all_images.extend(conn.list_images())
s = pd.Series(np.arange(10), pd.date_range('2014-01-01', periods=10))
result = ci.append([]) tm.assert_index_equal(result, ci, exact=True)
_config_filename_ = 'master'
if include_pat and not exclude_pat: ret = retchk_include elif exclude_pat and not include_pat: ret = retchk_exclude elif include_pat and exclude_pat: ret = retchk_include and retchk_exclude else: ret = True
os._exit(999)
self.assertIn( 'spongebob', self.run_function('softwareupdate.list_ignored')) self.assertIn( 'squidward', self.run_function('softwareupdate.list_ignored'))
xml_reports = []
self.assertEqual(i18n_service.ugettext(self.test_language), 'dummy language')
socket.setdefaulttimeout(10)
self.set_user_module_score(real_user, score, self.max_score(), comment) return Response(status=200)
self.set_info()
return len(set().union(*self.maps))
if params: endpoint = 'resources'
res2 = clear_password(name, runas)
store_iterator = iter(modulestores) next_modulestore = lambda *args, **kwargs: store_iterator.next()
if not hasattr(self, 'needs_reformat'): self.needs_reformat = self.needs_reshape del self.needs_reshape
from __future__ import absolute_import
group.__salt__ = {} group.__opts__ = {}
X, y_bin = iris.data, iris.target.copy() y_bin[y_bin == 2] = 0
tsf = self.tsframe.copy() with ensure_clean(self.ext) as path:
ip_same1 = ip_same2 = ipaddress.IPv4Network('1.1.1.1/32') self.assertEqual(list(ipaddress.collapse_addresses( [ip_same1, ip_same2])), [ip_same1])
salt '*' win_update.download_updates categories="['Critical Updates']"
for i in range(self.n_layers_ - 1): end = start + layer_units[i + 1] self._intercept_indptr.append((start, end)) start = end
self.connection.close()
(['honor', 'verified', 'audit'], 'honor'),
import salt.utils
self.assertEqual(CourseMode.can_auto_enroll(self.course_key), can_auto_enroll)
self.assertEqual(response.status_code, 404)
solver = 'svd'
_illegal_formatting = re.compile(r"((^|[^%])(%%)*%[sy])")
CertificateGenerationConfiguration.objects.create(enabled=True)
if role_arn is None: access_key_id, secret_access_key, token = creds(prov_dict) else: access_key_id, secret_access_key, token = assumed_creds(prov_dict, role_arn, location=location)
cell = read_worksheet.cell('B2')
if severities is None: severity_match = True else: if update.MsrcSeverity in severities: severity_match = True
self.generated_certificate.invalidate()
index = DatetimeIndex(["2014-03-31", "2014-06-30", "2015-03-30"]) assert frequencies.infer_freq(index) is None
import logging import os
with patch('capa.responsetypes.LoncapaResponse.evaluate_answers') as mock_evaluate_answers: mock_evaluate_answers.return_value = CorrectMap(CapaFactory.answer_key(), 'incorrect') result = module.rescore_problem()
import integration
class datetimeobject(datetime, object): pass
return False
self._update_head(course_key, index_entry, asset_key.branch, new_structure['_id'])
def f(): cat.rename_categories([1, 2, 3, 4])
self.staff = StaffFactory.create(course_key=self.course.id)
from_addr = course_email.from_addr if course_email.from_addr else \ _get_source_address(course_email.course_id, course_title)
html_static_path = ['_static']
m.opts['grains'] = grains
ASSET_XSD_FILE = 'assets.xsd'
cherrypy.session.release_lock()
_('%(class_name)s %(instance)s') % { 'class_name': p._meta.verbose_name, 'instance': p}
merge_message_flags += [ "-m", "Closes #%s from %s and squashes the following commits:" % (pr_num, pr_repo_desc)] for c in commits: merge_message_flags += ["-m", c]
available_apps = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'view_tests', ]
from salttesting import TestCase from salttesting.mock import ( MagicMock, mock_open, patch, ) from salt.modules import hosts from salt.ext.six.moves import StringIO
dive = Book() dive.title = "Dive into Python" dive.published = datetime.date(2009, 5, 4) dive.save(using='other')
url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.get(url)
PARENTAL_CONSENT_AGE_LIMIT = 13
np.array([[[0, 1], [2, 3]], [[4, 5], [6, 7]]]),
__func_alias__ = { 'reload_': 'reload' }
actual_enabled = certs_api.cert_generation_enabled(self.course.id) self.assertEqual(is_enabled, actual_enabled)
(child_to_delete_location, old_parent_location, ModuleStoreEnum.RevisionOption.draft_preferred), (child_to_delete_location, old_parent_location, ModuleStoreEnum.RevisionOption.published_only),
res.is_copy = self.is_copy
state = com._random_state(5) tm.assert_equal(state.uniform(), npr.RandomState(5).uniform())
self.assertListEqual( self.get_item_from_modulestore(self.seq2_usage_key).children, [unit_1_key, unit_2_key], ) self.assertListEqual( self.get_item_from_modulestore(self.seq_usage_key).children,
ntaps += 1
plt.matshow(importances, cmap=plt.cm.hot) plt.title("Pixel importances with forests of trees") plt.show()
if world.is_css_present('{}.is-shown'.format(saving_mini_css)): world.css_find('{}.is-hiding'.format(saving_mini_css))
namespace_dirs = {namespace: list(look.directories) for namespace, look in LOOKUP.items()}
if sniff_sep: line = f.readline() while self.pos in self.skiprows: self.pos += 1 line = f.readline()
self._install_masquerade(self.course_staff) self.assertEqual( 'student', access.get_user_role(self.course_staff, self.course_key) )
cache.clear()
tm.assert_frame_equal(df, exp_fancy)
selector = RFE(estimator, step=0.20) sel = selector.fit(X, y) assert_equal(sel.support_.sum(), n_features // 2)
salt '*' vsphere.vmotion_disable my.esxi.host root bad-password
df = DataFrame({'a': [1]}).dropna() self.assertIsNone(df.is_copy) df['a'] += 1
data_not_concrete_abstract = models.ForeignObject( Relation, on_delete=models.CASCADE, from_fields=['abstract_non_concrete_id'], to_fields=['id'], related_name='fo_abstract_rel', )
unique_names = uniq_stable(names)
self.assertEquals(USER_COUNT + 1, len(response.content.splitlines()))
with self.assertRaises(Http404): get_object_or_404(Article, title="Foo")
alpha1 = dual_coef[class2 - 1, sv_locs[class1]:sv_locs[class1 + 1]] alpha2 = dual_coef[class1, sv_locs[class2]:sv_locs[class2 + 1]]
is_proxy = False try: if 'salt-proxy' in main.__file__: is_proxy = True except AttributeError: pass return is_proxy
creation_counter = 0
import logging import os
mcc = assert_warns_message(RuntimeWarning, 'invalid value encountered', matthews_corrcoef, [0, 0, 0, 0], [0, 0, 0, 0])
td.astype('int64')
__virtualname__ = 'raid'
if name in answers: raise ValueError(u"Key {name} already exists in answers dict".format(name=name)) else: answers[name] = val
'django_countries',
'a second from now', '%(count)s seconds from now', delta.seconds
warnings.warn(premature, RuntimeWarning, stacklevel=2) break
self.video.wait_for_video_player_render() self.assertIn(self.video.state, ['playing', 'buffering', 'finished'])
required_boto3_version = '1.2.1'
return []
In [151]: ylabel('number')
for format in ["binary", "multiclass", "multilabel-indicator"]: for y in EXAMPLES[format]: unique_labels(y)
if not s3_meta: continue
self.certificates_section.refresh()
ret += '{0}\n'.format(pprint.pformat(data))
from salt.states import lxc import salt.utils
self.certificates_page.visit() self.assertEqual(len(self.certificates_page.certificates), 0)
assert_array_equal(labels, labels_csr) assert_array_almost_equal(new_centers, new_centers_csr) assert_almost_equal(incremental_diff, incremental_diff_csr) assert_almost_equal(old_inertia, old_inertia_csr) assert_almost_equal(new_inertia, new_inertia_csr)
rng = check_random_state(0) n_features = 2 n_samples = 40 n_output = 3
description = models.TextField(null=True, blank=True)
self.assertTrue(BulkEmailFlag.feature_enabled(course_id))
self.assert_redirect_to_provider_looks_correct(self.client.get( pipeline.get_login_url(self.provider.provider_id, pipeline.AUTH_ENTRY_LOGIN)))
pod_spec = vim.storageDrs.PodSelectionSpec(storagePod=datastore_cluster_ref)
@ignore_warnings def test_factor_analysis(): rng = np.random.RandomState(0) n_samples, n_features, n_components = 20, 5, 3
client_class = Client _overridden_settings = None _modified_settings = None
data = data.encode('utf-8')
salt.utils.cloud.bootstrap(vm_, __opts__)
BlockCountsTransformer.collect(self.block_structure) self.block_structure._collect_requested_xblock_fields()
GitRepo._parse_commit_log = _parse_wrapper(args.base_commit)
get_blob_properties = show_blob_properties
if self.closed() and not is_survey_question: return False
if op in ['+', '*']: result = getattr(df, op)(m) assert_frame_equal(result, expected)
self.assertEqual(len(mail.outbox), 1)
self._make_eligible() self._purchase_credit() request_uuid = self._initiate_request() self._set_request_status(request_uuid, "approved")
lev_loc = len(level) level = level.insert(lev_loc, k)
from __future__ import unicode_literals
orig = pd.Series([1, 0, 0, 4], dtype=np.int64) sparse = orig.to_sparse(fill_value=0)
test_deviance[i] = clf.loss_(y_test, y_pred)
sum_comb_c = sum(comb2(n_c) for n_c in contingency.sum(axis=1)) sum_comb_k = sum(comb2(n_k) for n_k in contingency.sum(axis=0))
OAUTH_OIDC_ISSUER = 'https://www.example.com/oauth2'
span_element = rendered_html.find('span') self.assertEqual(span_element.text, 'Test text')
desc = feature['description']
ret.append(local_branch if branch is None else branch) ret.append(desired_upstream)
response = self._auto_auth({ 'username': 'test', 'redirect': True, 'staff': 'true', }, status_code=302)
cur_out = self._func(*augmented) rval = [x + y for x, y in safe_zip(rval, cur_out)]
return StackedBlocks(layers)
dist_X, ind_X = getattr(nbrs_X, method)(None) dist_D, ind_D = getattr(nbrs_D, method)(None) assert_array_almost_equal(dist_X, dist_D) assert_array_almost_equal(ind_X, ind_D)
__virtualname__ = 'pkgutil'
course_image = u'在淡水測試.jpg' self.course = CourseFactory.create(course_image=course_image)
self.centroids_ = self.init_centroids_[:n_samples + 1, :] self.squared_norm_ = self.init_sq_norm_[:n_samples + 1]
return service
self.verify_expected_team_id(new_teams[2], 'a-really-long-team-n')
return self._modulestore._get_modulestore_for_courselike(locator)
if not should_grade_section: should_grade_section = any( descriptor.location.to_deprecated_string() in submissions_scores for descriptor in section['xmoduledescriptors'] )
assert_true(id1, id2)
ret = {name: {'old': old.get(name, ''), 'new': new.get(name, '')}}
log = logging.getLogger(__file__)
'mine_return_job': bool,
self._set_group_access({0: [3]})
self.assertRaises(ValueError, lambda: self.df2.reindex(['a', 'a']))
if re.match(GUID_REGEX, snap_name): return snap_name.strip('{}') else: return snapshot_name_to_id(name, snap_name, strict=True, runas=runas)
html_theme = 'agogo'
self.assertTrue(repr(qs[0].note), '<Note: n2>') self.assertEqual(repr(qs[0].creator.extra.note), '<Note: n1>')
self.values_axes = [] for i, (b, b_items) in enumerate(zip(blocks, blk_items)):
middleware.process_request(request) request.session['hello'] = 'world'
from salt.modules import extfs
if not is_configured("python"): raise SkipTest
self.assertRaises(PossibleDataLossError, store.open, 'w') store.close() self.assertFalse(store.is_open)
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
_check_arg_length(fname, args + tuple(kwargs.values()), max_fname_arg_count, compat_args)
lib1 = LibraryFactory.create()
tic = labels[0][:-1] != labels[0][1:] for lab in labels[1:-1]: tic |= lab[:-1] != lab[1:]
x_s = x2[:,offset:offset+size] xWlist.append( W.lmul( x_s.reshape( (n_rows,)+W.col_shape()), T)) offset += size
__virtualname__ = 'pkg'
for c in join_col: assert(result[c].notnull().all())
staff_lock = self._create_xblock_with_start_date( name + "_locked", start_date, publish, visible_to_staff_only=True ) self.assertFalse(utils.is_currently_visible_to_students(staff_lock))
Xy = np.empty(shape=n_features, dtype=common_dtype, order='C') np.dot(X.T, y, out=Xy)
PAYMENT_REPORT_GENERATOR_GROUP = 'shoppingcart_report_access'
clf = GradientBoostingClassifier(n_estimators=100, random_state=1) clf.fit(X, y)
self.support = UserFactory( username=self.SUPPORT_USERNAME, email=self.SUPPORT_EMAIL, password=self.SUPPORT_PASSWORD, ) SupportStaffRole().add_users(self.support)
if not isinstance(self.course_id, CourseLocator): return response
__func_alias__ = { 'list_': 'list' }
with open(CONFIG_ROOT / CONFIG_PREFIX + "env.json") as env_file: ENV_TOKENS = json.load(env_file)
for n_comp in np.arange(1, X.shape[1]): pca = PCA(n_components=n_comp, svd_solver='randomized', random_state=0)
result = f.clean('13:30:05.000155') self.assertEqual(result, time(13, 30, 5, 155))
for item in matching: if name not in ret['create']: break
return dec
if value is None: return Response(status=status.HTTP_404_NOT_FOUND)
MEDIA_ROOT = ENV_TOKENS.get('MEDIA_ROOT', MEDIA_ROOT) MEDIA_URL = ENV_TOKENS.get('MEDIA_URL', MEDIA_URL)
nfs3.__grains__ = {} nfs3.__salt__ = {} nfs3.__context__ = {} nfs3.__opts__ = {}
MOBILE_APP_USER_AGENT_REGEXES = [ r'edX/org.edx.mobile', ]
expected = Float64Index(arr) a = np.zeros(5, dtype='float64') result = fidx - a tm.assert_index_equal(result, expected)
import salt.runner
self.login(self.enrolled_user)
response = self.client.get(reverse('branding.views.courses')) self.assertEqual(response.status_code, 200)
return last_arg_byref(cargs)
response, __ = self._get_update_response_and_expected_data(None, None) self.assertEqual(response.status_code, 200)
df['A'] = df['A'].astype(np.int16) df['B'] = df['B'].astype(np.float64)
df = DataFrame([{"a": 1}, {"a": 3, "b": 2}]) df['c'] = np.nan
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
grains.update(_virtual(grains)) grains.update(_ps(grains))
instructor = UserFactory() allow_access(self.course, instructor, 'instructor')
if timeout_in_seconds: utc_now = datetime.utcnow()
content_type = 'application/atom+xml; charset=utf-8' ns = "http://www.w3.org/2005/Atom"
self.assertFalse(linode._validate_name('_foo'))
return to_numeric(values, errors=errors)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
scaler_batch = MinMaxScaler().fit(X)
raise RuntimeError( 'The syslog facility \'{0}\' is not known'.format( facility_name ) )
COURSE_ABOUT_VISIBILITY_PERMISSION = 'see_exists'
pkginfo = salt.utils.pkg.rpm.pkginfo(**cur) cur = {} if pkginfo is not None: yield pkginfo
self.a = Article( id=None, headline='Swallow programs in Python', pub_date=datetime(2005, 7, 28), ) self.a.save()
for k in upd: dest[k] = upd[k]
if self.normalize_y: self.y_train_mean = np.mean(y, axis=0) y = y - self.y_train_mean else: self.y_train_mean = np.zeros(1)
distances, neighbors = lshf.radius_neighbors(query, radius=mean_dist, return_distance=True) assert_array_less(distances[0], mean_dist)
super(CacheBackedAuthenticationMiddleware, self).process_request(request)
old_field_name = field_name
im = im.convert('RGB')
'openedx.core.djangoapps.theming',
values = lib.maybe_convert_objects(values)
overall_msg = correctmap.get_overall_message() self.assertEqual(overall_msg, "Overall message")
#html_static_path.append('source/_static')
exclude_patterns = []
compute_inherited_metadata(course_descriptor)
sampling_algorithm["python-core-sample"] = \ lambda n_population, n_sample: \ random.sample(xrange(n_population), n_sample)
class OGRGeometry(GDALBase): "Generally encapsulates an OGR geometry."
if hasattr(lgeoip, 'GeoIP_lib_version'): GeoIP_lib_version = lgeoip.GeoIP_lib_version GeoIP_lib_version.argtypes = None GeoIP_lib_version.restype = c_char_p else: GeoIP_lib_version = None
if name in self.intervals: del self.intervals[name]
self.assert_enrollment_activation(False, selected_mode)
import tornado import tornado.tcpserver import tornado.gen import tornado.concurrent import tornado.tcpclient import tornado.netutil
from __future__ import absolute_import
plt.figure()
if "pinned" not in thread: thread["pinned"] = False
tls.__grains__ = {} tls.__salt__ = {} tls.__context__ = {} tls.__opts__ = {}
self.assertRaises(KeyError, frame.ix.__getitem__, 3)
self.assertEqual(response.context['user'], user) self.assertEqual(user, response.context['user'])
exterior_ring = property(_get_ext_ring, _set_ext_ring) shell = exterior_ring
n_jobs, n_estimators, starts = _partition_estimators(self.n_estimators, self.n_jobs)
for i in range(1, 3): self.tab_nav.go_to_tab("PDF Book {}".format(i))
filename = sanitize_filename(' '.join(tooltip.split(' ')[3:]))
#epub_identifier = ''
self.cart = Order.get_cart_for_user(self.user) CertificateItem.add_to_order(self.cart, self.verified_course_key, self.cost, 'verified') self.cart.start_purchase()
result._set_is_copy(self, copy=not result._is_view) return result
self.assert_correct_json_response(json_response)
import pickle
import salt.utils from salt.ext.six import string_types from salt.exceptions import CommandExecutionError
kwargs.pop('_view_name')
before_activation = model.reconstruct_without_dec_acti(X, P)
__virtualname__ = 'virtualenv'
duplicate_positions = np.random.randint(0, len(dates) - 1, 20) for p in duplicate_positions: dates[p + 1] = dates[p]
geom2 = OGRGeometry(wkb) self.assertEqual(geom1, geom2)
from salt.runners import cache import salt.utils
username_placeholder = _(u"JaneDoe")
if re.match(pattern, path): return False
iterator = SequentialSubsetIterator(10, 3, 4) for i in range(4): iterator.next()
pip install https://pysphere.googlecode.com/files/pysphere-0.1.8.zip
partitions.append({ "id": p.id, "name": p.name, "scheme": p.scheme.name, "groups": groups, })
for r in poly: self.assertEqual(r.geom_type, 'LinearRing') self.assertEqual(r.geom_typeid, 2)
with tm.assert_produces_warning(FutureWarning): ts.sort()
'ADDITIONAL_OPTIONS': { 'trashcan': { 'bucket': 'trash_fs' } }
salt --async '*' splay.splay pkg.install cowsay version=3.03-8.el6
return name
from __future__ import unicode_literals
endpoint = get_xrds_url('login', request) if not endpoint: return default_render_failure(request, "Invalid OpenID request")
_config_filename_ = 'master' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'master') _setup_mp_logging_listener_ = True
if return_type is None: for r in self._flatten_visible(returned): self.assertIsInstance(r, Axes) return
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'linode', vm_['profile'], vm_=vm_) is False: return False
def gettext_noop(s): return s
cost = SumOfCosts([SumOfParams(), (0., DummyCost())])
if prev_log_likelihood is not None: change = abs(current_log_likelihood - prev_log_likelihood) if change < self.tol: self.converged_ = True break
_EAW_MAP = {'Na': 1, 'N': 1, 'W': 2, 'F': 2, 'H': 1}
import salt.ext.six as six
win_path.__salt__ = {}
self.odd_course = CourseFactory.create( org='test.org_1-2', number='test-2.3_course', display_name='dotted.course.name-2', )
try: import boto import boto3 import boto.exception import boto3.session
response = self.client.get( "/", HTTP_X_FORWARDED_FOR=request_ip, REMOTE_ADDR=request_ip )
'ENABLE_LTI_PROVIDER': False,
Series(Series(["a", "c", "b"]).unique()).sort_values()
DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'ATOMIC_REQUESTS': True, },
from __future__ import absolute_import import os
wtf_numpy = np.zeros((n_classes,)) for i in xrange(n_classes): wtf_numpy[i] = probs[i] probs = wtf_numpy
from salt.pillar import mysql
if count < 4: return np.nan if denom == 0: return 0
expected = DataFrame(columns=['a', 'b', 'c'])
try: from salt.ext.six.moves._thread import get_ident as _get_ident except ImportError: from salt.ext.six.moves._dummy_thread import get_ident as _get_ident
if (self._use_relativedelta and set(self.kwds).issubset(relativedelta_fast)):
ACCOUNT_VISIBILITY_CONFIGURATION = { "default_visibility": "all_users",
_subscriptions = [ {'protocol': s['Protocol'], 'endpoint': s['Endpoint']} for s in _subscriptions ]
cmd_kwargs = copy.deepcopy(cmd_kwargs) cmd_kwargs['use_vt'] = False
mlp.n_layers_ = 3
_current_statement = None _current_option = None _current_parameter = None _current_parameter_value = None
self.login_staff() content = self.get_course_info_page().content self.assertIn("OOGIE BLOOGIE", content)
self.run_script( 'salt-call', '-c {0} --output-file={1} -g'.format( self.get_config_dir(), output_file ), catch_stderr=True, with_retcode=True ) stat1 = os.stat(output_file)
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
from __future__ import absolute_import
regex = re.compile(r'\s*repository\s*=\s*'+repo+r'/?\s*(#.*)?$')
try: search = client.saved_searches[name] except KeyError: pass return search
return mini_batch
expected = left_f(s, Timestamp('20010109')) result = right_f(Timestamp('20010109'), s) tm.assert_series_equal(result, expected)
team = self.post_create_team(data=self.build_team_data( name="New team", course=self.test_course_1, description="Another fantastic team", ), user=user)
gpg_info_file = '{0}/gpg-agent-info-salt'.format(gnupghome) with salt.utils.fopen(gpg_info_file, 'r') as fow: gpg_raw_info = fow.readlines()
if (idx < len(lines) and _starts_till(lines[idx + 1], cnd) < 0) or idx + 1 == len(lines): out.append(cnd)
cls.course_with_visibility = CourseFactory.create( display_name='visible_course', org='TestMicrositeX', course="foo", catalog_visibility=CATALOG_VISIBILITY_CATALOG_AND_ABOUT, emit_signals=True, )
import matplotlib.pyplot as plt
m = "'init' must be 'pca', 'random' or a NumPy array" assert_raises_regexp(ValueError, m, TSNE, init="not available")
return self.fields_map[field_name]
if len(os.path.dirname(filename)): raise ValueError("Can't pass a qualified name to ensure_clean()")
ridge_gcv.fit(filter_(X_diabetes), y_diabetes, sample_weight=np.ones(n_samples)) assert_equal(ridge_gcv.alpha_, alpha_)
if '.' not in val: if x < 0: return '%d' % (-whole - 1) else: return '%d' % (whole + 1)
self.timer_stop = Event() self.timer = CacheTimer(self.opts, self.timer_stop) self.timer.start() self.running = True
c1 = TT.as_tensor_variable(c1) c2 = TT.as_tensor_variable(c2) maxiter = n_iters
argv = self.opts['argv']
subarr = _sanitize_index(data, index, copy=True)
return []
self.store.mappings = {} course_key = self.course_locations[self.MONGO_COURSEID].course_key with check_exact_number_of_calls(self.store.default_modulestore, 'has_course', 1):
context['accomplishment_banner_opening'] = _("{fullname}, you earned a certificate!").format( fullname=user_fullname )
from __future__ import absolute_import
if self.level > exc_info_on_loglevel: return formatted_record
_list = self.run_function('beacons.list', return_yaml=False) self.assertTrue(_list['ps']['enabled'])
call_command('delete_orphans', unicode(published_branch), '--commit')
resp = self.client.get(billing_url) self.assertEqual(resp.status_code, 404)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
elif request.method == 'DELETE': try: re_validate_certificate(request, course_key, certificate) except ValueError as error: return JsonResponse({'message': error.message}, status=400)
supports_date_lookup_using_string = True
from __future__ import absolute_import, unicode_literals
self.start_lineno = min(self.start_lineno, start[0]) self.end_lineno = max(self.end_lineno, end[0])
ret.setdefault('updated tags', []).append(ref_name)
list_price = 'N/A' payment_amount = 'N/A' coupon_codes_used = 'N/A' registration_code_used = 'N/A' payment_status = _('Data Integrity Error') transaction_reference_number = 'N/A'
courses = [course for course in courses if course.id != course_key] if courses: courses = _remove_in_process_courses(courses, in_process_course_actions) settings_context.update({'possible_pre_requisite_courses': courses})
if True not in perms.values(): continue
course_mode = CourseMode.DEFAULT_SHOPPINGCART_MODE
if self.object and self.template_name_field: name = getattr(self.object, self.template_name_field, None) if name: names.insert(0, name)
if depth == 0: self.load_item.side_effect = lambda x: LeafModuleFactory(descriptor_cls=HtmlDescriptor) else: self.load_item.side_effect = lambda x: ContainerModuleFactory( descriptor_cls=VerticalBlock, depth=depth - 1 )
course_url = u'/course/{}'.format(unicode(self.course.id)) self.assertEqual(xblock_studio_url(self.course), course_url)
CORRECTMAP_PY = inspect.getsource(correctmap)
self.create_credentials_config() self.create_programs_config()
existing_nodes = [name_node.value for name_node, value_node in node.value] mergeable_items = [x for x in merge if x[0].value not in existing_nodes]
self.lengths = [len(s) for s in self._sequence_data] self.len_unique = np.unique(self.lengths)
labels = np.array(labels, copy=True) unique_labels = np.unique(labels) for i in unique_labels: yield labels == i
'-oStrictHostKeyChecking=no', '-oUserKnownHostsFile=/dev/null', '-oControlPath=none'
if len(self.rhs) > 2 and not self.rhs[2] == 'spheroid': self.process_band_indices()
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, mock_open, patch, NO_MOCK, NO_MOCK_REASON )
import pprint import logging import time import hashlib
text = f.widget.format_value(result) self.assertEqual(text, "01:30:00 PM")
registration = world.RegistrationFactory(user=user) registration.register(user) registration.activate() CourseEnrollment.enroll(user, course_key)
if existing['code'] == 200:
left = self.rng[:10] right = self.rng[5:10]
qn = self.connection.ops.quote_name opts = self.query.get_meta() result = ['INSERT INTO %s' % qn(opts.db_table)]
df = DataFrame({'A': np.arange(20)}, index=np.arange(20))
centers = clusterer.cluster_centers_ ax2.scatter(centers[:, 0], centers[:, 1], marker='o', c="white", alpha=1, s=200)
y_i_all_argmax = np.flatnonzero(y_data_repeated_max == y.data)
from __future__ import unicode_literals
replaces = []
__, __, re_course = self.load_test_import_course(target_id=course.id, module_store=module_store)
provider_url = reverse('openid-provider-login') factory = RequestFactory() request = factory.request() abs_provider_url = request.build_absolute_uri(location=provider_url)
__func_alias__ = { 'set_': 'set', 'list_': 'list', }
self.assertFalse(res_json['success'])
self.assertIn( "Certificate has been successfully invalidated for {user}.".format(user=self.student_name), self.certificates_section.certificate_invalidation_message.text )
wrappers.insert(0, wrap_with_license)
current_subs = data.get('current_subs') if current_subs is not None: for sub in current_subs: remove_subs_from_store(sub, item)
result = pd.concat([s.iloc[0:1], s.iloc[1:]]) assert_series_equal(result, s)
edit_link = "//" + settings.CMS_BASE + '/container/' + unicode(block.location)
cache_stat = os.stat(list_cache) age = time.time() - cache_stat.st_mtime
boston = load_boston() X, y = boston['data'], boston['target']
from __future__ import absolute_import import yaml
from __future__ import absolute_import
copy_course_videos(source_course_key, destination_course_key)
for word in self.student_words: temp_all_words[word] = temp_all_words.get(word, 0) + 1
import os
self.assertIn( settings.MICROSITE_CONFIGURATION['test_microsite']["urls"]['TOS_AND_HONOR'], data['company_tos_url'] )
from __future__ import absolute_import
assert max(pd.max(), hd.max()) < .17
DECIMAL_SEPARATOR = '.' THOUSAND_SEPARATOR = ','
if not self.hyperparameter_periodicity.fixed: periodicity_gradient = \ 4 * arg / self.length_scale**2 * cos_of_arg \ * sin_of_arg * K periodicity_gradient = periodicity_gradient[:, :, np.newaxis]
sync_cohort_with_mode.apply_async(kwargs=args, countdown=300)
china = load_sample_image("china.jpg")
from __future__ import absolute_import
self.register_page.register(country="US", favorite_movie="Battlestar Galactica", terms_of_service=True)
assert_greater(clf.score(X_test, y_test), 0.99)
log = logging.getLogger(__name__)
user = User.objects.get(username=self.USERNAME) request = RequestFactory().get('/url') request.user = user account_settings = get_account_settings(request)
if com.is_datetime64_dtype(arr): arr = arr.view(com._NS_DTYPE)
return self._concat_objects( keys, values, not_indexed_same=True, )
self._initialize_mixed(contentstore=contentstore, mappings={})
value = str(value).lower()
self._lock = threading.Lock()
INVOICE_CORP_ADDRESS = ENV_TOKENS.get('INVOICE_CORP_ADDRESS', INVOICE_CORP_ADDRESS) INVOICE_PAYMENT_INSTRUCTIONS = ENV_TOKENS.get('INVOICE_PAYMENT_INSTRUCTIONS', INVOICE_PAYMENT_INSTRUCTIONS)
files[name].append(pid) files[name] = sorted(set(files[name]))
import salt.utils
_write_metric(metrics_str, metrics_report) sh("cat {metrics_report}".format(metrics_report=metrics_report), ignore_error=True)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
from salt.states import apache import salt.utils
random_state = check_random_state(0) tsne = TSNE(metric="chebyshev") X = random_state.randn(5, 2) tsne.fit_transform(X)
assert_raises(ValueError, _hc_cut, n_leaves + 1, children, n_leaves)
course_enrollment.mode = u'verified' course_enrollment.save() self.assertEqual(course_enrollment.mode, u'verified')
for index, (name, label, (x, y)) in enumerate( zip(names, labels, embedding.T)):
if PY3: str(mi) else: compat.text_type(mi)
has_native_duration_field = False
vm_['instance_id'] = data.id
time.sleep(2)
X = dataset.get_design_matrix() m = X.shape[0] assert X.shape[1] == self.nvis
result = df.get_dtype_counts() expected = Series({'float64': 3, 'datetime64[ns]': 1}) assert_series_equal(result, expected)
return left_ax, None, right_indexer
from salt.modules import defaults
top_idx = set(component.argsort()[-3:][::-1]) assert_true(tuple(sorted(top_idx)) in correct_idx_grps)
self.assert_grade(problem, "Other String", "incorrect")
df = pivot(np.array([]), np.array([]), np.array([]))
return False
return JsonResponse(result, encoder=EdxJSONEncoder)
from salt.modules import etcd_mod from salt.utils import etcd_util
for vname in values: if vname not in current_communities: __salt__['reg.set_value'](_HKEY, _COMMUNITIES_KEY, vname, values[vname], 'REG_DWORD')
assert_equal(len(np.unique(km.labels_)), 3)
import salt.log import salt.crypt import salt.transport.frame from salt.exceptions import SaltReqTimeoutError
BP = namedtuple("Boxplot", ['ax', 'lines'])
assert_array_equal(np.intersect1d(train, test), [])
from salt.utils import cache
from __future__ import unicode_literals
self.assertRaises(ValueError, lambda: tdi + dti[0:1]) self.assertRaises(ValueError, lambda: tdi[0:1] + dti)
label_to_row_indices = _make_label_to_row_indices(dataset.y)
UserPreference.objects.get_or_create( user=user, key=NOTIFICATION_PREF_KEY, defaults={ "value": UsernameCipher.encrypt(user.username) } )
self.refresh_cached_metadata_inheritance_tree(location.course_key)
if not course.course_survey_name: return redirect(redirect_url)
frame = DataFrame(mat, columns=['A', 'B', 'C'], index=[1, 2], dtype=object) self.assertEqual(frame.values.dtype, object)
show_in_read_only_mode = False
ensure_in_syspath(CODE_DIR)
return blocks
index = list('bca')
virtualenv_mod.__salt__ = {'cmd.which_bin': lambda _: 'pyvenv'}
activation_key = create_account(self.USERNAME, self.OLD_PASSWORD, self.OLD_EMAIL) activate_account(activation_key)
super(Conv2DSpace, self)._validate_impl(is_numeric, batch)
self.course_outline.open_subsection_settings_dialog()
self.assertFalse(module_has_submodule(test_module, 'django')) with self.assertRaises(ImportError): import_module('utils_tests.test_module.django')
__opts__['test'] = orig_test return ret
epub_cover = ('', 'epub-cover.html')
expected = Series([2, 5], index=['X', 'Y'], name='B') + 1 assert_series_equal(b, expected)
import salt.utils.compat from salt.utils.odict import OrderedDict import yaml import salt.ext.six as six
troy = SpecialClient.objects.select_related('state').defer('value', 'state__name').get(name='Troy Buswell')
from __future__ import unicode_literals
email_obj = CourseEmail.objects.get(id=email_id) targets = [target.target_type for target in email_obj.targets.all()]
self.assertRaises(KeyError, cd.__getitem__, 'foo')
paginator = Paginator([], 2) self.assertEqual(paginator.validate_number(1), 1)
for key, value in settings.items(): _format_cache[(key, lang)] = value try: yield finally: reset_format_cache()
modulestore = XMLModuleStore( data_dir, default_class=None, source_dirs=source_dirs )
context = { 'reorderable_items': set(), 'read_only': True } html = get_preview_fragment(request, html, context).content
random_state = check_random_state(0)
from __future__ import absolute_import
pass
ret |= {"voted"} if _is_author_or_privileged(cc_content, context): ret |= {"raw_body"}
self.data = { "access_token": self.access_token, "client_id": self.client_id, }
expiration_datetime_custom.short_description = "Upgrade Deadline"
NAME_MIN_LENGTH = 2 NAME_MAX_LENGTH = 255
dive = Book.objects.using('other').create(title="Dive into Python", published=datetime.date(2009, 5, 4))
net4_url = 'http://download.microsoft.com/download/1/B/E/1BE39E79-7E39-46A3-96FF-047F95396215/dotNetFx40_Full_setup.exe'
group_element_names = { 'checkbox': 'checkboxgroup', 'radio': 'radiogroup', 'multiple': 'choicegroup' }
metadata = _init() return list(metadata.keys())
yield check_estimators_overwrite_params
self.assertEqual(request.get_port(), '80')
self.srid = srid
return True
client = get_file_client.return_value client.cache_file.return_value = self.top_file.name
self.dashboard_page = DashboardPage(self.browser)
self.assertIn('note_id', ExtraInfo.objects.values()[0])
indent[depth] = start[1]
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
if not name and not pkgs: return 'Must pass a single package or a list of packages'
if not len(result_columns) and errors is not None: raise errors
if idx.is_all_dates: try: return idx._get_string_slice(key) except (KeyError, ValueError, NotImplementedError): return None
expected = np_array_datetime64_compat( ['2015-01-03T00:00:00.000000000+0000', '2015-01-01T00:00:00.000000000+0000'], dtype='M8[ns]')
msg = 'Error inserting to MongoDB event tracker backend' log.exception(msg)
this_sample = this_layer.sample(state_below=state_below, state_above=state_above, layer_above=layer_above, theano_rng=theano_rng)
if serialize: self.connection._test_serialized_contents = self.serialize_db_to_string()
index = self.index[-1:-5:-2] expected = Index(np.array([18, 14]), name='foo') self.assert_index_equal(index, expected)
if existing['code'] == 200:
self.assertEqual(len(self.login_failed), 1)
if dtype is not None and issubclass(dtype.type, np.integer): continue
i = len(commonprefix([start_list, path_list]))
((), {'attrs': {'class': 'pretty'}}, '<label for="id_field" class="pretty">Field:</label>')
partial(replace_static_urls, None, course_id=course_id), _studio_wrap_xblock,
if hasher == 'sha256': h = hashlib.sha256(password) elif hasher == 'md5': h = hashlib.md5(password) else: return NotImplemented
ls = salt.utils.alias_function(list_tab, 'ls')
self.assertRaises(TypeError, store.append, 'df', np.arange(10))
clf = ForestClassifier(class_weight='auto', warm_start=True, random_state=0) assert_warns(UserWarning, clf.fit, X, y) assert_warns(UserWarning, clf.fit, X, _y)
import salt.loader import salt.utils from salt.utils import print_cli import salt.ext.six as six
response = salt.utils.vmware.esxcli(host, username, password, cmd, protocol=protocol, port=port) ret.update({host: _format_syslog_config(response)})
self.assertEquals( response_data["content"], strip_none(make_mock_thread_data(course=self.course, text=text, thread_id=thread_id, num_children=1)) ) mock_request.assert_called_with( "get",
self.assertEqual( get_list_or_404(Article.objects.all(), title__icontains="Run"), [article] )
if text_message is None: text_message = html_to_text(html_message)
correct = ['unknown'] * len(idset) messages = [''] * len(idset) overall_message = ""
if record.failure_count >= max_failures_allowed: lockout_period_secs = settings.MAX_FAILED_LOGIN_ATTEMPTS_LOCKOUT_PERIOD_SECS record.lockout_until = datetime.now(UTC) + timedelta(seconds=lockout_period_secs)
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
try: verify_signatures(resp_params)
if updated_user.password != old_password_hash: entry = PasswordHistory() entry.create(updated_user)
from __future__ import absolute_import import logging import json
url = reverse('instructor_dashboard', kwargs={'course_id': self.course.id.to_deprecated_string()}) self.assert_request_status_code(200, url)
"Test for Annotation Xmodule functional logic."
err = Exception mock_index_dictionary.return_value = err
self.assertEqual(len(httpretty.httpretty.latest_requests), 1)
request = self.request_factory.get('/', {'publication-decade': 'the 90s'}) changelist = self.get_changelist(request, Book, modeladmin)
from __future__ import unicode_literals
self.assertEqual(res.context['next_month'], None) self.assertEqual(res.context['previous_month'], datetime.date(2006, 5, 1))
safe_exec("a = 1/2", g) self.assertEqual(g['a'], 0.5)
os.system('rm source/html-styling.html') os.system('cd build; rm -f html/pandas.zip;')
if left_list or right_list or left_str or right_str: op_instance = self.rewrite_map[op_type]()
X_1, y_1 = datasets.make_classification(n_samples=n_samples, n_features=n_features, n_informative=5, random_state=1)
files_to_fingerprint.append(sysconfig.get_python_lib())
from __future__ import unicode_literals
import salt.utils
est = DummyRegressor(strategy="median") est.fit(X_learn, y_learn) y_pred_learn = est.predict(X_learn) y_pred_test = est.predict(X_test)
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=status, )
success = False num_attempts = 0 while (not success) and num_attempts < MAX_VALID_BROWSER_ATTEMPTS:
mean = np.zeros(2)
shortcuts = self.selenium.find_elements_by_css_selector('.field-birthdate .datetimeshortcuts')
format_dateaxis(ax, ax.freq) return lines
if not (isinstance(key, tuple) and isinstance(labels, MultiIndex)):
with self.assertRaises(AttributeError): self.client.post('/quota/broken/', {'f': file})
from salt.modules import nginx
if not has_studio_write_access(request.user, usage_key.course_key): raise PermissionDenied()
if hasattr(course, 'syllabus_present') and course.syllabus_present: course.tabs.append(CourseTab.load('syllabus'))
default_z += T.alloc(*([0.]+[shape[elem] for elem in self.h_space.axes])).astype(default_z.dtype) assert default_z.ndim == 4
Env.METRICS_DIR.makedirs_p()
content = '<garbage tag No closing brace to force <span>error</span>' payload = {'content': content, 'date': 'January 11, 2013'}
for weekday, group in grouped: self.assertEqual(group.index[0].weekday(), weekday)
import salt.client.ssh import salt.runner
from salt.ext.six import string_types, iteritems
data['check-1-DELETE'] = '' formset = CheckFormSet(data, prefix='check') self.assertFalse(formset.is_valid())
class geoip_char_p(c_char_p): pass
if child.parent is None or child.parent > descriptor.scope_ids.usage_id: child.parent = descriptor.location child.save()
from __future__ import absolute_import import logging import time import json from boto.ec2.blockdevicemapping import BlockDeviceMapping, BlockDeviceType
import salt.ext.six as six
self.assertEqual( response['content-disposition'], 'attachment' ) rows = response.content.strip().split('\r') headers = rows[0]
SOCIAL_SHARING_SETTINGS = ENV_TOKENS.get('SOCIAL_SHARING_SETTINGS', SOCIAL_SHARING_SETTINGS)
self.animal_partition.groups.pop() self.color_partition.groups.pop()
if np.abs(np_var(A) - two_pass_var(A)).max() < 1e-6: stable_var = np_var else: stable_var = two_pass_var
from __future__ import absolute_import import logging import re
self.store.convert_to_draft(item_location, self.user_id) item = self.store.get_item(item_location) self.assertTrue(self.store.has_published_version(item))
open(self.distribution.salt_version_hardcoded_path, 'w').write( INSTALL_VERSION_TEMPLATE.format( date=DATE, full_version_info=__saltstack_version__.full_info ) )
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'vmware', vm_['profile'], vm_=vm_) is False: return False
cmap = CorrectMap() for answer_id in answer_ids: cmap.update(CorrectMap(answer_id=answer_id, queuestate=None)) self.problem.correct_map.update(cmap)
return convert_indexer(start, stop + 1, step)
s = Series(['a', 'b', 'c'], index=[0, 0.5, 1]) tmp = s.copy()
def upload_to(instance, filename): return folder + filename
self.assertNotContains(response, '<h2>Inner2s</h2>') self.assertNotContains(response, 'Add another Inner2') self.assertNotContains(response, 'id="id_inner2_set-TOTAL_FORMS"')
from salt.ext.six.moves import builtins as __builtin__ __builtin__.__salt__ = {}
__virtualname__ = 'junos'
ret.update({host_name: {'Disks Added': 'No new VSAN-eligible disks were found to add.'}})
logger.info(this_package) packages_really_to_upgrade.append(this_package)
pieces["short"] = mo.group(3)
r = self.series.resample('20min') g = self.series.groupby(pd.Grouper(freq='20min'))
with self.assertRaises(forms.ValidationError): f.clean('13:30:05')
form = RestrictedCourseForm(data={'course_key': 'not/valid'}) self._assert_course_field_error(form)
self.assertRaises(AttributeError, getattr, grouped, 'foo')
array_val = request.POST.getlist(key) answers[key] = request.POST[key] if len(array_val) == 0 else ','.join(array_val)
self.assertTrue(res_json['success']) self.assertEqual( res_json['message'], u"Certificate generation started for white listed students." )
xblock = _update_with_callback(xblock, user, old_metadata, old_content)
ret['comment'] = 'Event module not available. Schedule enable job failed.'
d_int32 = astype(a_int32, dtype=np.int32, copy=True) assert_false(np.may_share_memory(d_int32, a_int32))
return serializer.data
def test_email_flag_false_mongo_true(self): BulkEmailFlag.objects.create(enabled=False) response = self.client.get(self.url) self.assertFalse(self.email_link in response.content)
remote_ref_type = 'ref' if len(ref) <= 40 \ and all(x in string.hexdigits for x in ref): ref = ref.lower() remote_ref_type = 'hash'
form_desc = json.loads(response.content)
config, _ = self.create_group_configuration_experiment([Group("0", "Group A"), Group("1", "Group B")], True)
ret['master'] = ip_port[0] ret['master_port'] = ip_port[1]
expected_url = _third_party_login_url( backend_name, "login", redirect_url=self.courseware_url ) self.assertContains(response, expected_url)
from salttesting.helpers import destructiveTest, ensure_in_syspath
result = ts_local.resample('D').mean()
field_value = [getInnerText(k).strip() for k in keys] obj_pk = default_manager.db_manager(self.db).get_by_natural_key(*field_value).pk
self.assertNotIn(self.vert_loc, course.system.module_data)
y_multirf = regr_multirf.predict(X_test) y_rf = regr_rf.predict(X_test)
from __future__ import unicode_literals
upload_finish_time = datetime.utcnow().replace(microsecond=0, second=0)
old_data = data.copy() for _ in range(4): data = data.unstack() assert_frame_equal(old_data, data)
some_sample_ids = (2286, 3274, 14042) for sample_id in some_sample_ids: idx1 = s1.tolist().index(sample_id) idx2 = s2.tolist().index(sample_id)
course_listing = self.q(css=".course").filter(lambda el: course_name in el.text).results
dest_info = dest_structure['blocks'][block_key]
from __future__ import unicode_literals
return reclass_top(minion_id, **reclass_opts)
self.assertFalse(has_access(self.non_staff_user, 'load', self_paced_course))
import os import stat import itertools
rendered_html = etree.XML(problem.get_html())
super(DBCacheTests, self).setUp() self.create_table()
from salt.states import mongodb_user
if "full_name" in params: response = self._update_full_name(request.user, params["full_name"]) if response is not None: return response
self._helper_csv(self.writer, na_rep=self.na_rep, float_format=self.float_format, cols=self.cols, header=self.header, index=self.index, index_label=self.index_label, date_format=self.date_format)
clf = ElasticNet() clf.coef_ = [1, 2, 3]
return self._concat_objects( keys, values, not_indexed_same=not_indexed_same )
from __future__ import absolute_import
self._fields[key.field_name] = value
output.append('\'{0}\': \'{1}\''.format(key, value))
'ENABLE_MAX_SCORE_CACHE': True,
assert all([layer in layer_to_updated for layer in layer_to_state]) assert all([layer in layer_to_state for layer in layer_to_updated]) assert all([(layer_to_state[layer] is layer_to_updated[layer]) == layer_to_clamp[layer] for layer in layer_to_state])
if inspect: for container in containers: container_id = container.get('Id') if container_id: inspect = _get_container_infos(container_id) container['detail'] = inspect.copy()
line = line[len(match.group(1)):] for daemon in start_daemon_parameter_regex.findall(line): daemons_flags[daemon] = True
out = salt.utils.fopen(path, 'wb')
master_course_object, master_course_key, _, _ = get_valid_course(unicode(ccx_course_object.course_id))
]
vm_['password'] = get_password(vm_)
HTTPServer.shutdown(self)
return self.countdown > 0
X, y = make_blobs(random_state=1) for Model in [DPGMM, VBGMM]: dpgmm = Model(n_components=10, random_state=1, alpha=20, n_iter=50, verbose=2)
__virtualname__ = 'service'
foo = Foo()
package.where=dataset_data_path;
import logging
PLATFORM_CLASSES = {IOS.NAME: IOS, Android.NAME: Android}
(vmin, vmax) = self.axis.get_data_interval()
file_to_upload = 'image.jpg' self.settings_page.upload_image('#upload-course-image', file_to_upload) self.assertIn(file_to_upload, self.settings_page.get_uploaded_image_path('#course-image'))
keep_lazy(HttpResponse), keep_lazy_text, lazy,
ndim_5 = np.ones(self.frame.shape + (3, 4, 5)) with assertRaisesRegexp(ValueError, 'shape'): f(self.frame, ndim_5)
assert_almost_equal(clf.alpha_, min(clf.alphas_)) assert_equal(clf.l1_ratio_, min(clf.l1_ratio))
solution_element.tag = 'targetedfeedback' targetedfeedbackset.append(solution_element)
from __future__ import print_function
esx_cmd += ' -s {0} -u {1} -p \'{2}\' ' \ '--protocol={3} --portnumber={4} {5}'.format(host, user, pwd, protocol, port, cmd)
assert_series_equal(actual, expected)
for key, value in six.iteritems(kwargs): setattr(self, key, value)
self.assertTrue(sr.name.startswith(sd['name']))
template_name = microsite.get_template_path(template_name)
if n < 0: raise ValueError("A negative number of rows requested. Please " "provide positive value.")
may_translation = month_name expected_caption = '{0:s} {1:d}'.format(may_translation.upper(), 1984)
xpath = "//div[@class='indicator-container']/span" self.assert_no_xpath(xml, xpath, self.context)
self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 1)
'5afe5d9bb03796557ee2614f5c9611fb', self._get_anonymous_id(CourseKey.from_string(course_id), descriptor_class)
self.socket.sendall(bytes_)
binary = salt.utils.which('at') if not binary: return '\'at.at\' is not available.'
(True, False), (True, True),
self._has_valid_tuple(tup)
self._func_path = '.'.join([func.__module__, func.__name__])
coerce = True if any([isinstance(x, Timestamp) for x in values]) else False return (Series(values, index=key_index, name=self.name) ._convert(datetime=True, coerce=coerce))
if y.ndim == 1: y = y.reshape((-1, 1))
lhs = Series(rand(5) > 0.5) expect = ~lhs result = pd.eval(expr, engine=self.engine, parser=self.parser) assert_series_equal(expect, result)
class GeometryCollection(OGRGeometry): "The Geometry Collection class."
message = models.CharField(max_length=MAX_MESSAGE_LENGTH)
face = sp.misc.imresize(face, 0.10) / 255.
self.assertTrue(cp_blk.equals(blk)) self.assertTrue(cp_blk.values.base is blk.values.base)
registration_codes = CourseRegistrationCode.order_generated_registration_codes(self.course_key) self.assertEqual(registration_codes.count(), item.qty)
wclf = svm.SVC(kernel='linear', class_weight={1: 10}) wclf.fit(X, y)
from salt.beacons import adb
if __opts__['test']: ret['result'] = None return ret
y += 0.01 * np.random.normal((n_samples,))
self.oauth_page.confirm() self.oauth_page.wait_for_element_absence( 'input[name=authorize]', 'Authorization button is not present' )
from salt.modules import solr import os
if self.status in ORDER_STATUS_MAP.values(): return
from salt.utils import http
dictionary = _update_dict(dictionary, B, A, verbose=verbose, random_state=random_state)
weights = weights.fillna(0)
'WHAT_IS_VERIFIED_CERT': 'verified-certificate',
self.assertRaises(NotImplementedError, store.select, 'df', "columns=['A','B'] & columns=['C']")
html_theme = 'default'
import dateutil yearfirst = dateutil.__version__ >= LooseVersion('2.5.0')
if tasks.environment.dry_run: return
self.assertTrue(Article.objects.filter(headline=old_headline)) self.assertFalse(Article.objects.filter(headline=new_headline))
per_remote_only = {} for param in PER_REMOTE_ONLY: if param in per_remote_conf: per_remote_only[param] = per_remote_conf.pop(param)
result = dt2 - dt assert_series_equal(result, expected)
assert not world.is_css_present('.link_lti_new_window', wait_time=0)
if isinstance(current, BaseContext) and getattr(type(current), bit): raise AttributeError current = getattr(current, bit)
if not os.path.isdir(orig_path): raise IOError("You need to download the SVHN format2 dataset MAT files " "before running this conversion script.")
self.assertEqual(template.render(context), '')
form = Form() form_set = FormSet(instance=User())
from __future__ import absolute_import import time import datetime
if self._channel_name is None: v = monitor.channels['objective'].val_record else: v = monitor.channels[self._channel_name].val_record
with self.assertRaisesMessage(ValidationError, "'Enter a valid URL.'"): f.clean('http://%s' % ("X" * 60,))
return self.values.view('i8')
warnings.warn("TODO: add unit test that iterators uneven property is set correctly.")
attempt.upload_face_image(face_image)
import logging from uuid import uuid4 try: import couchdb HAS_COUCH = True except ImportError: HAS_COUCH = False
if ENV_TOKENS.get('AUDIT_CERT_CUTOFF_DATE', None): AUDIT_CERT_CUTOFF_DATE = dateutil.parser.parse(ENV_TOKENS.get('AUDIT_CERT_CUTOFF_DATE'))
from __future__ import unicode_literals
mlb = MultiLabelBinarizer() assert_array_equal(mlb.fit_transform(inp), indicator_mat) assert_array_equal(mlb.classes_, classes) assert_array_equal(mlb.inverse_transform(indicator_mat), inp)
if callable(value): value = CallableChoiceIterator(value) else: value = list(value)
for iteration_idx in range(n_iter): minibatch_indices = random_state.randint( 0, n_samples, self.batch_size)
instructor = UserFactory() allow_access(self.course, instructor, 'instructor') self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
AUTH_ENTRY_LOGIN = 'login' AUTH_ENTRY_REGISTER = 'register' AUTH_ENTRY_ACCOUNT_SETTINGS = 'account_settings'
import salt.config import salt.loader from salt.modules import boto_vpc from salt.exceptions import SaltInvocationError, CommandExecutionError from salt.modules.boto_vpc import _maybe_set_name_tag, _maybe_set_tags from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
_ = lambda text: text
block_structure.request_xblock_fields('graded', 'format', 'display_name', 'category')
b = kubectl_out.get("data", {}) self.assertTrue(isinstance(kubectl_out, dict)) self.assertEqual(expected_data, b)
log.exception(u"Error occurred while caching course enrollment details for course %s", course_id) raise errors.CourseEnrollmentError(u"An unexpected error occurred while retrieving course enrollment details.")
def __setstate__(self, state): self._is_child = True self.__init__(state['opts'], log_queue=state['log_queue'])
assert sp.issparse(rp.transform(sparse_data))
result = result.astype('object')
kwds.setdefault('c', plt.rcParams['patch.facecolor'])
from xmodule.modulestore.inheritance import InheritanceMixin from xmodule.modulestore import prefer_xmodules from xmodule.x_module import XModuleMixin
assert_raises(ValueError, plot_partial_dependence, clf, iris.data, [0, 1], grid_resolution=grid_resolution)
config_course_cohorts_legacy( course, discussions=[], cohorted=True, auto_cohort_groups=["OtherGroup"] )
result = df.loc(axis=1)[:, 'foo'] expected = df.loc[:, (slice(None), 'foo')] assert_frame_equal(result, expected)
state_label = _(u"State/Province/Region")
cached_pkg = cached_pkg.replace('/', '\\') cache_path, _ = os.path.split(cached_pkg)
ipca = IncrementalPCA(n_components=2, batch_size=10).fit(X) Y = ipca.transform(X) Y_inverse = ipca.inverse_transform(Y) assert_almost_equal(X, Y_inverse, decimal=3)
self.assertTrue(res_json['success']) self.assertEqual( res_json['message'], u"Certificate generation started for white listed students." )
import pytz tz = pytz.timezone('US/Eastern') dt = tz.localize(datetime(2012, 1, 1))
expected_index = pd.Index(o[::-1]) expected_index.name = None
from __future__ import absolute_import
import salt.utils import salt.utils.dictupdate from salt.exceptions import SaltException
other_icrv = ItemFactory.create(parent=self.verticals[3], category='edx-reverification-block') self._update_partitions()
LogoutPage(self.browser).visit()
import versioneer cmdclass = versioneer.get_cmdclass()
current_cohort = get_cohort(user, course_key) verified_cohort = get_cohort_by_name(course_key, verified_cohort_name)
(False, False), (False, True),
score_subset = base_estimator.score(X_inlier_subset, y_inlier_subset)
clf = NearestCentroid() clf.fit(X_csr, y) assert_array_equal(clf.predict(T), true_result)
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.guitar_book, self.djangonaut_book])
request_info = xmodule_instance_args.get('request_info', {}) if xmodule_instance_args is not None else {} task_info = {"student": student.username, "task_id": _get_task_id_from_xmodule_args(xmodule_instance_args)}
key = signature.get_shared_secret_key("asu") self.assertIs(key, None)
stat['4505/est'], stat['4506/est'] = next(SaltNetstat().run())
accepts_logins = False
from salttesting import TestCase, skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath from salttesting.mock import ( MagicMock, NO_MOCK, NO_MOCK_REASON, patch )
user2 = UserFactory.create() user2.save() assert_is_none(SoftwareSecurePhotoVerification.active_for_user(user2))
if cols is not None:
self.course = CourseFactory.create(org='MITx', course='999', display_name='Robot Super Course')
assert_raises(ValueError, k_means, X, n_clusters=X.shape[0] + 1)
setattr(value, self.related.field.get_cache_name(), instance)
y = np.array(g(X) > 0, dtype=int)
X, y = datasets.make_hastie_10_2(n_samples=12000, random_state=1)
return _get_group_index_sorter(self.labels, self.ngroups)
self.start_time = datetime.now(UTC) - timedelta(seconds=1)
self.application = application self.events_to_fire = 0 return application
X = [[1, 1, 0], [1, 1, 0], [1, 0, 0]] tr = TfidfTransformer(smooth_idf=False, norm='l2')
msg = "Specified problem does not support rescoring." raise UpdateProblemModuleStateError(msg)
cumsum_xs = self.tsframe.cumsum(axis=1) self.assertEqual(np.shape(cumsum_xs), np.shape(self.tsframe))
_maybe_remove(store, 'df2') store.append('df2', df)
p._set_list(2, (50, 3141)) self.assertEqual(p.coords, (50.0, 3141.0), 'Point _set_list')
comp = self.localize(tz, dr[0].to_pydatetime().replace(tzinfo=None)).tzinfo self.assertIs(central[0].tz, comp)
import copy import logging import json import os
instance.image.delete(save=False) instance.delete()
mod_dict[mod] = lambda: None
VALID_SERVICE_DIRS = [ '/service', '/var/service', '/etc/service', ] SERVICE_DIR = None for service_dir in VALID_SERVICE_DIRS: if os.path.exists(service_dir): SERVICE_DIR = service_dir break
if N.size(imshp)==2: inshp = (1,)+imshp
__opts__ = {}
__salt__['pkg.install']('ifenslave-2.6')
data = "\n\n\n" self.assertRaises(EmptyDataError, self.read_csv, StringIO(data))
s = Series(rng) s[1] = np.nan
return StateRequisite(requisite, self.module, id_)
result = df.iloc[[-1, 1, 3], [-1, 1]] expected = df.ix[[18, 2, 6], [6, 2]] assert_frame_equal(result, expected)
for handler in handlers: retval = handler.upload_complete() if retval: break
with with_edx_domain_context(is_edx_domain): response = self.client.get(reverse(url_name), params)
module = __name__.replace('.video_module', '', 2)
import salt.ext.six as six try: import pkg_resources HAS_PKG_RESOURCES = True except ImportError: HAS_PKG_RESOURCES = False
self.assertNotContains(response, checkbox_html, html=True)
if timeout is not None and __context__['docker.client'].timeout != timeout: __context__['docker.client'].timeout = timeout
import salt.utils
with self.assertRaises(TypeError): EmptyQuerySet() self.assertIsInstance(Article.objects.none(), EmptyQuerySet) self.assertFalse(isinstance('', EmptyQuerySet))
mock_no_data = MagicMock(return_value='') with patch.object(parallels, 'prlctl', mock_no_data): self.assertRaises(SaltInvocationError, parallels.snapshot_id_to_name, name, snap_id)
tags_found = _git_tag_points_at(cwd, wt_ptr['HEAD'], user) if tags_found: wt_ptr['tags'] = tags_found
def check_envelope(result, func, cargs, offset=-1): "Checks a function that returns an OGR Envelope by reference." env = ptr_byref(cargs, offset) return env
'dynamath': dynamath,
for instance in vmconfig_type['instance']: if instance in vmconfig_type['create_only']: continue
if dtype == u('datetime64'):
return start_index
for k, v in six.iteritems(self.parent.global_data): if k not in self._data: self._data[k] = copy.deepcopy(v)
o_list_primary.insert(0, param) o_list_toggle.append(param)
self._studio_reindex()
try: from xblock_django.user_service import DjangoXBlockUserService from crum import get_current_user
r2 = Restaurant.objects.get(pk=r.pk) p.restaurant = r2 self.assertIs(p.restaurant, r2)
self.assertNotContains(resp, '<section class="university-partners university-partners2x6">')
'expect': self.expect,
folders_list_in_path.extend(['data', 'uploads', file_name])
max_row_range = 10000 num_files = 100
raise SaltCloudSystemExit( 'The wait_for_instance action must be called with -a or --action.' )
django_settings.MIDDLEWARE_CLASSES += _MIDDLEWARE_CLASSES
try: expected = df.ix[key] except KeyError: self.assertRaises(KeyError, lambda: df.loc[key]) continue
try: obj = self._convert_scalar_indexer(obj, axis) except TypeError:
try: with open(path, 'a'): os.utime(path, None) except (IOError, OSError): return False return True
from __future__ import unicode_literals
data = compressor.flush() if data: out.write(data)
update = True
if solution_element is None: continue
values = Index(self.values, dtype='object').to_native_types()
orig_names = list(columns) self.num_original_columns = len(columns) return line, orig_names, columns
raise exc
if len(all_assets) > 0: self.store.save_asset_metadata_list(all_assets, all_assets[0].edited_by, import_only=True)
result = idx.delete(len(idx))
'headers': dict(self.request.headers),
self.assert_student_in_group(None)
clf = GradientBoostingRegressor(n_estimators=100, random_state=1, max_features=0) assert_raises(ValueError, clf.fit, X, y)
src_estate, src_yard, src_share = msg['route']['src'] salt.transport.jobber_estate_name = src_estate salt.transport.jobber_yard_name = src_yard
data[:, 3] /= data[:, 5]
trans_tar_sum = salt.utils.get_hash(trans_tar, __opts__['hash_type'])
self.assertEqual(0, CourseMode.min_course_price_for_currency(self.course_key, 'usd'))
salt.utils.cloud.accept_key( self.opts['pki_dir'], vm_['pub_key'], key_id )
supports_raster = False
def _get_argtypes(self): return self.cfunc.argtypes
about_dictionary = { item.location.name: item.data for item in modulestore.get_items(course.id, qualifiers={"category": "about"}) }
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.approve()
assert_equals(value, getattr(seq, attribute))
if self.indexer is not None: indexer = self.indexer.argsort(kind='quicksort') grouper = grouper.take(indexer) return grouper
if pkg_name[0].endswith('.egg'): pkg_name.pop(0)
y1 = np.append(y1, [2] * 4) y2 = np.append(y2, [2] * 4) assert_equal(cohen_kappa_score(y1, y2, labels=[0, 1]), kappa)
start, end = get_current(date), get_next(date)
for offset in offsets: self.assertRaises(TypeError, lambda: rng * offset)
from __future__ import unicode_literals
if verification_deadline is not None: if upgrade_deadline is not None and verification_deadline < upgrade_deadline: raise forms.ValidationError("Verification deadline must be after the upgrade deadline.")
if req["namespace"] == old_req.namespace and req["name"] == old_req.name: found_flag = True break
VISIBLE_CONTENT = [ ['class=&#34;problems-wrapper'], ['Some HTML for group 1'] ]
__virtualname__ = 'mongo'
self.assertTrue(has_access(beta_tester, 'load', self_paced_course)) self.assertTrue(has_access(beta_tester, 'load', self_paced_section, self_paced_course.id))
values = Series([u('fooBAD__barBAD'), NA, u('foo'), u('BAD')])
comment += 'Search was done without error.\n'
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
p.undergroundbar = None
if not path or not os.path.isfile(path): return ret
srid = self.query.get_context('transformed_srid') if srid: u, unit_name, s = get_srid_info(srid, connection) geodetic = unit_name.lower() in geo_field.geodetic_units
with self.assertNumQueries(3): qs = TaggedItem.objects.prefetch_related('content_object') list(qs)
return Message(*obj[1:])
if repo and not fromrepo: fromrepo = repo
@test_parallel(num_threads=2) def pg2(): f()
'support',
from __future__ import absolute_import
self.update_structure(usage_locator.course_key, new_structure)
script = 'raise Exception("Test")' problem = self.build_problem(answer=script)
result = p.ix[:, -1, :] expected = p.ix[:, p.major_axis[-1], :] assert_frame_equal(result, expected)
self._check_legend_labels(ax, labels=['a']) self.assertEqual(len(ax.lines), 1)
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [])
if err == 'usage:': break ret[csnap][ctag] = res['stderr']
with self.assertRaisesMessage(Exception, "Oops"):
def f(): result[2] = 0. self.assertRaises(com.SettingWithCopyError, f) exp_col = df[2].copy() exp_col[4:8] = 0. assert_series_equal(df[2], exp_col)
target = ibase._ensure_has_len(target) if len(target) == 0 and not isinstance(target, Index): idx = self.levels[level] attrs = idx._get_attributes_dict()
self.release_languages('ar, es-419')
cls.req_server_channel = salt.transport.server.ReqServerChannel.factory(cls.master_opts) cls.req_server_channel.pre_fork(cls.process_manager)
_skip_if_has_locale()
if field_type == 'CharField' and row[3]: field_params['max_length'] = int(row[3])
MAX_MEMORY = np.int(2e9)
pass
import os import re import logging
if len(vals) > 1: brname = vals[0]
self.assertIn('Activate Course Enrollment', response.content)
self.client.login(username=self.audit_course_instructor.username, password='test')
val = _dmi_cast(key, line.strip(), clean) if val is not None: key_data[1].append(val)
assertBadSplit("10:9:8:7:6:5:4:3:42.42.42.42")
next_date = offset.apply(cur) if next_date >= cur: raise ValueError('Offset %s did not decrement date' % offset) cur = next_date
newrelic.agent.add_custom_parameter('course_id', unicode(course_key)) newrelic.agent.add_custom_parameter('org', unicode(course_key.org))
for option in self.option_list: if option.dest is None: continue
currency = models.CharField(default="usd", max_length=8)
spec_mapping = tuple( self._fill_mapping(sub_space, sub_source) for sub_space, sub_source in safe_zip( space.components, source))
s = Series([np.nan, np.nan, 5, 7, np.nan, np.nan])
@skipUnlessDBFeature('test_db_allows_multiple_connections') def test_signal(self): data = {}
@method_decorator(myattr_dec_m, "method") class TestMethodAndClass(object): @method_decorator(myattr2_dec_m) def method(self): "A method" pass
'dummy_publisher': bool,
rabbitmq.__salt__ = {}
for kernel in kernels: gpr = GaussianProcessRegressor(kernel=kernel, normalize_y=True) gpr.fit(X, y)
from salt.log import setup as saltlog from salt.log.handlers import StreamHandler
pipe.set_params(svc__C=0.1) assert_equal(clf.C, 0.1) repr(pipe)
course = self.get_item_from_modulestore(self.usage_key) self.assertIn(chap_usage_key, course.children)
self.alpha = alpha
assert max(pd.max(), hd.max()) < .17
if __Expiration__ != '': timenow = datetime.utcnow() timestamp = timenow.strftime('%Y-%m-%dT%H:%M:%SZ') if timestamp < __Expiration__: return __AccessKeyId__, __SecretAccessKey__, __Token__
response_element = etree.Element("coderesponse")
from salt.exceptions import CommandExecutionError import salt.utils
if self.list_path: self.path = reverse(self.list_path)
if not properties: properties = {}
make_asset_xml(num_assets, ASSET_XML_PATH) validate_xml(ASSET_XSD_PATH, ASSET_XML_PATH)
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
pkg_params = {name: kwargs.get('version')}
block = self.make_block(values=nv[np.newaxis], placement=[ref_loc], fastpath=True)
g = feature.geom
NUMBER_GROUPING = 0
class GEOSGeom_t(Structure): pass
#show_authors = False
wkt_r = WKTReader() wkt = 'POINT (5 23)'
add_button_html = '<div class="add-xblock-component new-component-item adding"></div>' if can_add: self.assertIn(add_button_html, html) else: self.assertNotIn(add_button_html, html)
user_partitions = UserPartitionList( help=_("The list of group configurations for partitioning students in content experiments."), default=[], scope=Scope.settings )
end = info[1].index(' ', column+1)
expected = idx1 ^ idx2 self.assertTrue(tm.equalContents(result, expected)) self.assertIsNone(result.name)
branch = (branch == 'trunk' and 'base' or branch)
return {'path': os.environ.get('PATH', '').strip()}
df = tm.makeTimeDataFrame().reindex(columns=['A']) tm.assert_series_equal(df.squeeze(), df['A'])
path = key.split('.')
cached_calls = [ [num_uncached_mongo_calls, num_uncached_sql_queries], [num_cached_mongo_calls, num_cached_sql_queries], ] for expected_mongo_calls, expected_sql_queries in cached_calls: with self.assertNumQueries(expected_sql_queries): with check_mongo_calls(expected_mongo_calls): call_single_thread()
clf = svm.SVC(kernel='linear') clf.fit(X, y)
cmd = 'dockerng.ps' docker_hosts = get('*', cmd)
mode = CourseModeFactory.create() mode.course_id = self.course.id mode.min_price = 1 mode.save()
data = { "email": self.EMAIL, "name": self.NAME, "username": self.USERNAME, "password": self.PASSWORD, }
multi_db = True
if len(typs) == 1:
try:
retval = self.service.set_credit_requirement_status( 0, self.course.id, 'grade', 'grade' ) self.assertIsNone(retval)
rval = X.copy()
df.resample('AS').sum()
actual = GroupConfiguration.get_or_create_content_group(self.store, self.course)
self.assertBlockHasContent(child_usage_key, 'data', child_data)
def get(key, default=None): return connection_args.get('connection_' + key, __salt__['config.get'](prefix + key, default))
return "(%s)" if len(self.value) != 1 else "(%s,)"
num_tasks = 4 file_name = '__threadpool_reader__.csv' num_rows = 100000
self.panel['ItemP'] = self.panel['ItemA'] > 0 self.assertEqual(self.panel['ItemP'].values.dtype, np.bool_)
qs = City.objects.all() with self.assertRaises(TypeError): qs.kml('name')
self.assertTrue(NaT + offset is NaT) self.assertTrue(offset + NaT is NaT)
if old == '*': return True
classifier = svm.SVC(kernel='linear', C=0.01) y_pred = classifier.fit(X_train, y_train).predict(X_test)
self._check_visible(ax.get_yticklabels(), visible=True) self._check_visible(ax.get_xticklabels(), visible=True) self._check_visible(ax.get_xticklabels(minor=True), visible=True)
def empty_gen(): return yield
from __future__ import unicode_literals
latex_font_size = '11pt'
obj_view.Destroy()
with patch('sys.argv', ['salt-call']): ret = utils.daemonize_if({}) self.assertEqual(None, ret)
self.assertEqual(mail.outbox[0].subject, expected_subject)
assert_array_equal(np.sort(X_counted.data), np.sort(X_hashed.data))
estimator = RandomForestRegressor(random_state=0, n_estimators=100) score = cross_val_score(estimator, X_full, y_full).mean() print("Score with the complete dataset = %.2f" % score)
from openedx.core.djangoapps.credit.api import set_credit_requirement_status
self.assertEqual(record.course_key, self.course_key)
if isinstance(ns, dict): for k, v in ns.items(): setattr(cls, k, v)
self.assertContains(response, '<th class="field-__str__">UnchangeableObject object</th>', html=True)
connargs['bindpw'] = password
MODULE_DOCS = __doc__
instance.__allow_additional_items__ = True
return
ModeCreationPage(self.browser, self.course_id).visit()
self.assertEqual( chan.getElementsByTagName('atom:link')[0].getAttribute('href'), 'http://example.com/syndication/rss091/' )
try: import hjson as hjson HAS_LIBS = True except ImportError: HAS_LIBS = False
missing_node_cache(prov_dir, nodes, provider, opts)
Number.objects.filter(pk=self.n.pk).update(integer=F('integer') - 15, float=F('float') - 42.7)
self.assertEqual(actual_padding, expected_padding)
from __future__ import unicode_literals
_version_ary = __version__.split('.') CUR_VER = SaltStackVersion(_version_ary[0], _version_ary[1]) BORON = SaltStackVersion.from_name('Boron')
self.add_course_to_user_cart(self.course_key) self.assertEquals(self.cart.orderitem_set.count(), 1)
tm._skip_if_no_scipy() import scipy.sparse
if host_name: host_ref = search_index.FindByDnsName(dnsName=host_name, vmSearch=False) else: host_ref = search_index.FindByDnsName(dnsName=host, vmSearch=False)
rows = [] rows.append([datetime(2010, 1, 1), 1]) rows.append([datetime(2010, 1, 2), 'hi'])
original_modified = tag.modified tag.value = "barfoo" tag.save() self.assertEquals(tag.value, "barfoo") self.assertNotEqual(original_modified, tag.modified)
cached_module = self.modulestore.get_cached_block(course_key, version_guid, block_key) if cached_module: return cached_module
if not (name == 'HuberRegressor' and estimator.n_iter_ is None): assert_greater_equal(estimator.n_iter_, 1)
if not hasattr(settings, 'TEST_RUNNER'): settings.TEST_RUNNER = 'django.test.runner.DiscoverRunner' TestRunner = get_runner(settings)
else: if is_existing['retcode'] in [0]: item_create_required = False
tm._skip_if_windows()
raise NotImplementedError
state_run = self.run_function('state.sls', mods='requisites.onfail_in_simple')
global custom_data_home custom_data_home = tempfile.mkdtemp() makedirs(join(custom_data_home, 'mldata')) globs['custom_data_home'] = custom_data_home return globs
getkeys = self.ts.keys self.assertIs(getkeys(), self.ts.index)
for name in SPARSE_TREES: yield check_min_weight_fraction_leaf, name, "multilabel", True
data_types_reverse = DatabaseIntrospection.data_types_reverse.copy() data_types_reverse[cx_Oracle.OBJECT] = 'GeometryField'
pnt.tuple = set_tup1 self.assertEqual(set_tup1, pnt.tuple) pnt.coords = set_tup2 self.assertEqual(set_tup2, pnt.coords)
if not isinstance(v, dict):
self.assertRaises(ValueError, self.read_csv, StringIO(data), header=[0, 1, 2, 3], index_col=[0, 1], usecols=['foo', 'bar'], tupleize_cols=False)
from salt.modules import mdadm
self.dot_access_token.expires = datetime.utcnow() - timedelta(weeks=1) self.dot_access_token.save() self.assert_oauth_status(self.dot_access_token, status.HTTP_401_UNAUTHORIZED)
indices = self.lambdas_.argsort()[::-1] self.lambdas_ = self.lambdas_[indices] self.alphas_ = self.alphas_[:, indices]
for i, update in enumerate(updates): results['update {0}'.format(i)] = update
result = Index(np.array(ci)) self.assertIsInstance(result, Index) self.assertNotIsInstance(result, CategoricalIndex)
default_pc = 0.5
if refresh: refresh_db(**kwargs)
from __future__ import absolute_import import pprint import logging
import hashlib import json import logging import requests import dogstats_wrapper as dog_stats_api
time.sleep(5)
self.get_select_option(to_box, str(self.jason.id)).click() self.get_select_option(to_box, str(self.john.id)).click()
self.assertFalse(self.page.experiment_group_configurations[0].is_expanded) self.assertTrue(self.page.experiment_group_configurations[1].is_expanded)
result = next(k for k in parse_result if isinstance(k, numbers.Number)) return result
slice_indexer[-1] += 1 n = -1 while (slice_indexer[n] >= shape[n]) and (n > (1 - ndim)): slice_indexer[n - 1] += 1 slice_indexer[n] = 0 n -= 1
clear_url_caches()
return JsonResponse( {"error": "If group_id is specified, user_partition_id must also be specified."}, 400 )
self.definition_loaded = False self.from_storable(kwargs)
if (any(x is not None for x in index_labels) and self.header is not False):
new_default_fill = func(self.default_fill_value, other.default_fill_value)
import integration import salt.utils from salt.exceptions import CommandExecutionError
from __future__ import absolute_import import re
sh("pip uninstall --disable-pip-version-check -y {}".format(package_name)) uninstalled = True
from __future__ import absolute_import import re import logging try: import pwd HAS_PWD = True except ImportError: HAS_PWD = False
left = stamps.searchsorted( t1.value, side='left') if use_lhs else None right = stamps.searchsorted( t2.value, side='right') if use_rhs else None
DATE_FORMAT = 'j F Y' TIME_FORMAT = 'h:i A' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'j M Y'
Number.objects.filter(pk=self.n.pk).update( integer=F('integer') + 15, float=F('float') + 42.7 )
X = sparse.csr_matrix(X)
try: import apt.cache import apt.debfile from aptsources import sourceslist HAS_APT = True except ImportError: HAS_APT = False
y_noisy = y + 0.05 * np.random.randn(len(y))
role = __salt__['keystone.service_get'](name=name, profile=profile, **connection_args)
from course_modes.models import CourseMode cert_set = cls.objects.create(course_key=course_key)
assert_raises( AssertionError, monitor.update_channels, [] )
self.categories = categories
all_messages = [] for msg_group in self.NOTIFICATION_MESSAGES.values(): all_messages.extend(msg_group)
from __future__ import absolute_import import json import yaml import os
orphans = self.store.get_orphans(course_key) self.assertEqual(len(orphans), 0)
try: return (right_start == left_end + offset) or right_start in left except (ValueError):
return False
class ReplaceField(forms.ModelForm): url = forms.BooleanField()
full = _get_config_file(user, config)
AccessTestData(partition_groups={1: 1, 2: 2}, merged_parents_list=[{1: {1}}], expected_access=True),
if matched == ';': return ';;' elif matched == '/': return ';_' else: return matched
raise AttributeError('I am here to confuse django.urls.get_callable')
supports_regex_backreferencing = True
minions = set(minions)
class_mapping = defaultdict(int) class_mapping.default_factory = class_mapping.__len__ yt = self._transform(y, class_mapping)
msg = _('Error in evaluating SchematicResponse. The error was: {error_msg}').format(error_msg=err) raise ResponseError(msg)
self.cfunc = getattr(lgeos, func_name) self.threaded = False
folders_list_in_path = folders_list_in_path[:-4]
ChoiceFormSet = formset_factory(Choice, extra=0, min_num=3)
self.col_sizes = lmap(lambda x: self._calcsize(x), self.typlist)
ts = tm.makeTimeSeries()[:20] ts_irregular = ts[[1, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 17, 18]]
if not isinstance(k, compat.string_types): k = str(k) if level == 0: newkey = k else: newkey = prefix + '.' + k
combined = series.combine_first(series_copy)
@property def geos(self): "Returns a GEOSGeometry object from this OGRGeometry." from django.contrib.gis.geos import GEOSGeometry return GEOSGeometry(self.wkb, self.srid)
dict(safe_zip(range(-19, 20), range(-19, 20))),
CertificateGenerationConfiguration.objects.create(enabled=True)
rendered_html = etree.XML(problem.get_html())
if cache in self.cache_options: self._cache = cache else: raise GeoIPException('Invalid GeoIP caching option: %s' % cache)
module.lcp.get_html = Mock(side_effect=Exception("Test"))
if sys.getwindowsversion().major < 6: raise SaltInvocationError('Symlinks are only supported on Windows Vista or later.')
repofile = '' for arepo in repos: if arepo == repo: repofile = repos[arepo]['file']
publish_event( "removed", result=format_block_keys(block_keys['selected']), removed=format_block_keys(block_keys['invalid']), reason="invalid" )
_, suff_stats = self._e_step(X, cal_sstats=True, random_init=True, parallel=parallel)
self.assertEqual(Foo.objects.get(friend__contains=b'\xc3\xa7'), fx)
with patch('lms.djangoapps.verify_student.models.requests.post', new=mock_software_secure_post_error): attempt = self.create_and_submit() assert_equals(attempt.status, "must_retry")
from salt.modules import cron from salt.ext.six.moves import builtins, StringIO
xseries = Series(x, xdindex.indices) xseries = xseries.reindex(np.arange(TEST_LENGTH)).fillna(xfill)
if com.is_datetime64tz_dtype(dtype): dtype = DatetimeTZDtype(dtype)
self.assertEqual(result.value, expected) self.assertEqual(tslib.pydt_to_i8(result), expected)
maxa = df['A'].max() tm.assertIsInstance(maxa, Timestamp)
driver_supports_timedelta_args = False
W = rng.uniform(-self.irange, self.irange, (input_dim, self.dim * 4))
sreg_response = sreg.SRegResponse.extractResponse(sreg_request, sreg_data) sreg_response.toMessage(response.fields)
class BinConstructor(GEOSFuncFactory): "Generates a prototype for binary construction (HEX, WKB) GEOS routines." argtypes = [c_char_p, c_size_t] restype = GEOM_PTR errcheck = staticmethod(check_geom)
response = self.fetch('/', method='POST', body=json.dumps(request_lowstate), headers={'Content-Type': self.content_type_map['json']})
try: if timezone.is_naive(value): default_timezone = timezone.get_default_timezone() value = timezone.make_aware(value, default_timezone) except Exception: return ''
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
bigfile.write(b'a' * (10 * 2 ** 20)) bigfile.seek(0)
from salt.modules import drbd
from salttesting.case import ModuleCase
if lib.isscalar(mask): mask = np.zeros(arr.shape, dtype=bool)
compressed_pickled_data = zlib.compress(pickled_data, 1) tagger.measure('compressed_size', len(compressed_pickled_data))
return None
saltenv = env
new_data = self._data for axis in sorted(reindexers.keys()): index, indexer = reindexers[axis] baxis = self._get_block_manager_axis(axis)
valid_repr = transform_valid(valid_set) test_repr = transform_test(test_set)
self.assert_no_setting_changed_event()
email_instructions = _("The email address you used to register with {platform_name}").format( platform_name=settings.PLATFORM_NAME )
if formatted_record[-1:] != '\n': formatted_record += '\n'
xml = self.render_to_xml(self.context) xpath = "//div[@class='indicator-container']/span[@class='status correct']" self.assert_has_xpath(xml, xpath, self.context)
#pylint: disable=E0602
rng = np.random.RandomState(0)
remove_instance = False
from __future__ import absolute_import import os import time import json import pprint import logging import decimal
n_samples_range = np.logspace(1, 9, 9)
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
CELERYD_PREFETCH_MULTIPLIER = 1
import logging import salt.utils
index = period_range('1/1/2001', periods=10) s = Series(randn(10), index=index) expected = s[index[0]] result = s.iat[0] self.assertEqual(expected, result)
class StrictAssignmentFieldSpecific(models.Model): title = models.CharField(max_length=30) _should_error = False
assert_raises(ValueError, cv.fit, K_train.tolist(), y_train)
return { key: value[0] if len(value) == 1 else value for key, value in urlparse.parse_qs(query).items() }
pushed = data.setdefault('Layers', {}).setdefault( 'Pushed', []) pushed.append(item['id'])
mask = lab == -1 if mask.any(): formatted = np.array(formatted, dtype=object) formatted[mask] = na formatted = formatted.tolist()
import salt.utils
self._transformer_data = defaultdict(dict)
try: minions_remaining.remove(event['data']['id']) except ValueError: pass if len(minions_remaining) == 0: raise tornado.gen.Return(chunk_ret)
if photo_id_image is not None: initial_verification = None
clf = LogisticRegressionCV(cv=precomputed_folds) clf.fit(train, target)
if isinstance(data, str): log.error('Error requesting instance: {0}'.format(data)) return {}
pca = PCA(n_components=2)
from unit.modules.boto_iot_test import BotoIoTTestCaseMixin
classifier = svm.SVC(gamma=0.001)
from __future__ import absolute_import import logging import re
self.run_prereqs(X, d) a(*X) actual_ne += self._flat_data_specs[0].np_batch_size(X)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch
published_xblock = self.store.create_item( self.user_id, self.course.id, 'vertical', block_id='test_vertical', asides=[aside1, aside2] )
self._prepare_pandas(data)
expected_calls = expected_calls[:1]
assert_raises(ValueError, lshf.kneighbors, X[0])
self.assertRaises(ValueError, store.put, 'b', df, format='fixed', complib='blosc')
Sigma = Sigma[::-1] U, VT = svd_flip(U[:, ::-1], VT[::-1])
self.assertEqual(self.video.speed, '2.0x')
score = self._init_decision_function(X) predict_stages(self.estimators_, X, self.learning_rate, score) return score
def cmp(a, b): tm.assert_almost_equal( np.sort(np.unique(a)), np.sort(np.unique(b)))
class NoTemplateResponseMiddleware(TestMiddleware): def process_template_response(self, request, response): super(NoTemplateResponseMiddleware, self).process_template_response(request, response)
entry_needs_saving = True log.warning("background task (%s) revoked.", task_id) task_output = InstructorTask.create_output_for_revoked()
self._assert_user_name(self.user.profile.name)
from unit.modules.boto_apigateway_test import BotoApiGatewayTestCaseMixin
self.course_hierarchy = self.get_course_hierarchy() self.blocks = self.build_course(self.course_hierarchy) self.course = self.blocks['course']
return self.lcp.done
from __future__ import unicode_literals
if not change_password(username, password, uid): log.warning('unable to set user password') delete_user(username, uid) return False
return JsonResponse( _("Successfully removed invalid due date extension (unit has no due date).") )
check(self.zbseries, self.zbseries * 2) check(self.zbseries, self.zbseries2) check(self.ziseries, self.ziseries2)
df = DataFrame(dict(A=Series(lrange(3), index=date_range( '2000-1-1', periods=3, freq='H', tz='US/Eastern'))))
self.assertRaises(ValueError, read_csv, 's3://pandas-test/tips.csv' + ext, compression=comp)
temp_poll_answers = self.poll_answers temp_poll_answers[dispatch] += 1 self.poll_answers = temp_poll_answers
FILE_UPLOAD_STORAGE_BUCKET_NAME = ENV_TOKENS.get('FILE_UPLOAD_STORAGE_BUCKET_NAME', FILE_UPLOAD_STORAGE_BUCKET_NAME) FILE_UPLOAD_STORAGE_PREFIX = ENV_TOKENS.get('FILE_UPLOAD_STORAGE_PREFIX', FILE_UPLOAD_STORAGE_PREFIX)
response = self._response().render() self.assertEqual(response.content, b'foo')
content_type.model = old_model
self.assertEqual('', self.run_function('service.status', ['spongebob']))
msg = '(regex_error/$" is not a valid regular expression' with self.assertRaisesMessage(ImproperlyConfigured, msg): reverse(views.empty_view)
supports_timezones = True
qs = PennsylvaniaCity.objects.transform(32128)
self.alter_db_table(model, temp_model._meta.db_table, model._meta.db_table)
@python_2_unicode_compatible class Poet(models.Model): name = models.CharField(max_length=100)
df = DataFrame(np.random.randn(50, 100)) self._check_roundtrip(df, tm.assert_frame_equal)
course_mode = CourseMode.objects.get(pk=1) self.assertEqual(course_mode.expiration_datetime.replace(tzinfo=None), expiration.replace(tzinfo=None))
assert np.all((ps == 0) + (ps == 1)) assert np.all((hs == 0) + (hs == 1))
salt '*' vsphere.esxcli_cmd my.esxi.host root bad-password \ 'system coredump network get'
y_true += [0]*n_classes y_pred += [0]*n_classes
if self.closed() or submitted_without_reset: return False else: return True
import salt.utils.jid
expected = to_datetime(['2012'])[0] result = to_datetime('2012') self.assertEqual(result, expected)
BULK_EMAIL_DEFAULT_RETRY_DELAY = 30
comment, passed, retries = _install(win_updater, retries) ret['comment'] += comment if not passed: ret['result'] = False return ret
test_func._overridden_settings = dict( test_func._overridden_settings, **self.options)
params = self._signed_callback_params(self.order.id, self.COST, self.COST) result = process_postpay_callback(params)
pass
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, mock_open, NO_MOCK, NO_MOCK_REASON )
(ok_, err, sl_) = _unify_sources_and_hashes(source=source, source_hash=source_hash, sources=sources, source_hashes=source_hashes) if not ok_: return _error(ret, err)
expand = kwargs.get('expand', False)
self.assertFalse(library_container.has_validation_error) self.assertFalse(library_container.has_validation_warning)
'edx_proctoring',
with self.assertRaises(TypeError): GEOSGeometry(NotAGeometry()) with self.assertRaises(TypeError): GEOSGeometry(None)
Y = np.vstack((y_diabetes, y_diabetes)).T n_features = X_diabetes.shape[1]
if i + 1 == n_i: step_slice = slice(beg, None) else: step_slice = slice(beg, end)
max_scores_cache.set(self.locations[0], 1) self.assertEqual(max_scores_cache.num_cached_updates(), 1)
class _IndexSlice(object): def __getitem__(self, arg): return arg
this_yaml = test_yaml_which_set % {'which_set': 'valid'} try: trainer = yaml_parse.load(this_yaml) trainer.main_loop() raise AssertionError except ValueError: pass
if not hasattr(a, 'dtype'): a = np.asarray(a) if not hasattr(b, 'dtype'): b = np.asarray(b)
self.assertTrue(check_password('letmein', encoded, setter, 'bcrypt')) self.assertTrue(state['upgraded'])
#latex_use_parts = False
'processors': get_config_value('processors'),
self.field_data_cache = FieldDataCache.cache_for_descriptor_descendents( self.course_key, self.request.user, self.toy_course, depth=2 )
from __future__ import absolute_import import logging import re
default_enrollment_mode = audit_mode or honor_mode
class ObjectiveSmallGradient: def __init__(self): self.it = -1
X = X * self._idf_diag
self.check_event_response_by_key('flag_resource', resource, 'reason', '')
try: os.remove(trans_tar) except (OSError, IOError): pass
try: ip_int = self._ip_int_from_string(ip_str) except AddressValueError: self._report_invalid_netmask(ip_str)
train = cifar10.CIFAR10(which_set="train")
for idx, text in enumerate(text_options): if text == POLL_ANSWER: self.q(css=text_selector).nth(idx).click()
self._check_params()
s = Site.objects.get_current() self.assertIsInstance(s, Site) s.delete() with self.assertRaises(ObjectDoesNotExist): Site.objects.get_current()
destroy(vm_['name'])
log_format = '[%(name)s] %(message)s' handler = TestsLoggingHandler(format=log_format) log.addHandler(handler)
self.course_nav.go_to_vertical('Test Vertical-1') self.video.wait_for_video_player_render() self.video.speed = '0.50'
learn_cache_key(request, response, key_prefix=key_prefix) self.assertEqual( get_cache_key(request, key_prefix=key_prefix), 'views.decorators.cache.cache_page.localprefix.GET.' '58a0a05c8a5620f813686ff969c26853.d41d8cd98f00b204e9800998ecf8427e' )
break
user = self.create_user_and_enroll('verified') self.add_verification_status(user, VerificationStatus.APPROVED_STATUS) with self.assertNumQueries(4): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
if exif is None: image.save(string_io, format='JPEG') else: image.save(string_io, format='JPEG', exif=exif)
self.xblock.test_content_field = "Explicitly set" self.xblock.test_settings_field = "Explicitly set" self.xblock.save()
self.course_info['number'] = "3355358979513794782079645765720179311111"
Membership.objects.create( membership_country_id=self.soviet_union.id, person_id=self.bob.id, group_id=self.republican.id)
from __future__ import absolute_import import os
self.assertQuerysetEqual( Annotation.objects.filter(notes__in=Note.objects.filter(note="n1")), ['<Annotation: a1>'] )
raise CoursewareAccessException(access_response)
file_to_upload = 'image.jpg' self.settings_page.upload_image('#upload-video-thumbnail-image', file_to_upload) self.assertIn(file_to_upload, self.settings_page.get_uploaded_image_path('#video-thumbnail-image'))
try: import pymongo HAS_MONGODB = True except ImportError: HAS_MONGODB = False
cmd = ['launchctl', sub_cmd] cmd.extend(args)
clf = QuadraticDiscriminantAnalysis() y_pred = clf.fit(X6, y6).predict(X6) assert_array_equal(y_pred, y6)
logistic = linear_model.LogisticRegression() rbm = BernoulliRBM(random_state=0, verbose=True)
from __future__ import absolute_import
f = lambda x: x.drop_duplicates(inplace=True) _check_f(data.copy(), f)
return super(PythonSerializer, self).getvalue()
if is_proxy and base_meta and base_meta.swapped: raise TypeError("%s cannot proxy the swapped model '%s'." % (name, base_meta.swapped))
self._state = threading.local() self._state.data = None self.global_data = {}
else: django.setup()
log.debug( 'ext_tops.mongo: no document found in collection {0}'.format( collection ) ) return {}
executor.loader.build_graph()
import salt.utils import salt.utils.itertools import salt.ext.six as six from salt.exceptions import SaltInvocationError from salt.ext.six.moves import range from salt.exceptions import CommandExecutionError
self.inputs[input_id] = input_type_cls(self.capa_system, problemtree, state) return self.inputs[input_id].get_html()
self._update_inplace(result.reindex_like(self, copy=False)._data, verify_is_copy=False)
time.sleep(20) ret = self.run_function('grains.item', ['setgrain'])
self.settings_page.wait_for_ajax() self.settings_page.wait_for_jquery_value('input#course-name:text', 'test_run')
if only_lhs: self.band_rhs = 1 self.band_lhs = self.lhs.band_index + 1 return
([CourseMode.VERIFIED, CourseMode.AUDIT], CourseMode.DEFAULT_MODE_SLUG),
log = logging.getLogger(__name__)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
from __future__ import absolute_import import copy
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, expensiveTest
s = [True, False, True, True] res = to_numeric(s) tm.assert_numpy_array_equal(res, np.array(s))
from __future__ import print_function from distutils.version import LooseVersion
self.assertIs(p.restaurant, r)
make_asset_xml(num_assets, ASSET_XML_PATH) validate_xml(ASSET_XSD_PATH, ASSET_XML_PATH)
grouping_tag = grouping_tags[test_conditions['input_type']] self.assert_no_xpath(xml, "//{0}[@class='choicetextgroup_incorrect']".format(grouping_tag), self.context)
s6.__salt__ = {} s6.SERVICE_DIR = '/etc/service'
from __future__ import absolute_import import os
success = self.client.login(username=self.SUPPORT_USERNAME, password=self.SUPPORT_PASSWORD) self.assertTrue(success, msg="Couldn't log in as support staff")
os.remove(hashdir) os.makedirs(hashdir)
call_command(self.cmd, addrport="deadbeef:7654") self.assertServerSettings('deadbeef', '7654')
past_due_date = CapaFactory.create(showanswer='correct_or_past_due', max_attempts="1", attempts="0", due=self.yesterday_str) self.assertTrue(past_due_date.answer_available())
lxc_init_interface['clone_from'] = _cloud_get(clone_from, None) if lxc_init_interface['clone_from'] is not None: break
world.wait_for_ajax_complete()
self.course_outline.visit() subsection = self.course_outline.section_at(section_index).subsection_at(0) subsection.expand_subsection() subsection.add_unit()
for df in [df, df2]: for gb_target in [dict(by=labels), dict(level=0), dict(by='string')
return None, None
import salt.utils.event
from __future__ import absolute_import
import warnings warn_filters = warnings.filters warnings.filterwarnings('ignore', category=FutureWarning, module=".*format")
from __future__ import unicode_literals
testing.assert_array_equal(F.transform(X), np.around(X, decimals=3))
if N == 0: return
try: action_index = int(request.POST.get('index', 0)) except ValueError: action_index = 0
with patch('capa.capa_problem.LoncapaProblem.supports_rescoring') as mock_supports_rescoring: mock_supports_rescoring.return_value = False with self.assertRaises(NotImplementedError): module.rescore_problem()
testing.assert_array_equal(F.transform(X), np.around(X, decimals=1))
from salt.states import gnomedesktop
if grade_response is None: grade_response = self.server.config.get( 'default', copy.deepcopy(self.DEFAULT_GRADE_RESPONSE) )
if 'ordered' in state: state['_ordered'] = state.pop('ordered') else: state['_ordered'] = False
ir = IsotonicRegression(increasing='auto', out_of_bounds="clip") ir.fit(x, y)
privacy_policy = branding_api.get_privacy_url() if privacy_policy != branding_api.EMPTY_URL: data.update({'company_privacy_url': privacy_policy})
cache.clear()
oid = tree[self.root].oid tree = self.repo[oid]
is_hidden = False
def test_spline_error(self): tm._skip_if_no_scipy()
return False
if len(key) > 250: return False
ambiguous = datetime.datetime(2015, 10, 25, 2, 30)
course_organization = get_course_organizations(course_key) if course_organization: org_id = course_organization[0]['id']
form = Form() form_set = FormSet(instance=Restaurant())
ret = self.run_state( 'file.directory', name=tmp_dir, follow_symlinks=False, user=user, group=group, recurse=['user', 'group'] ) self.assertSaltTrueReturn(ret)
pos_class = classes[1]
shifted = self.ts.tshift(1) unshifted = shifted.tshift(-1)
user = User.objects.get(username=username) world.scenario_dict['USER'] = user
return [x + "0" if x.endswith('.') and x != na_rep else x for x in trimmed]
split_test = self._update_partition_id(0) self.assertEqual(2, len(split_test.children)) initial_vertical_0_location = split_test.children[0] initial_vertical_1_location = split_test.children[1]
class UserRegistration(Form): username = CharField(max_length=10, initial='django') password = CharField(widget=PasswordInput)
result = self.frame.applymap(lambda x: x * 2) tm.assertIsInstance(result, SparseDataFrame)
if self.data: field_data = self._parse_video_xml(etree.fromstring(self.data)) self._field_data.set_many(self, field_data) del self.data
docs_train, docs_test, y_train, y_test = train_test_split( dataset.data, dataset.target, test_size=0.5)
return salt.utils.is_proxy() and 'proxy' in __opts__
from salttesting import TestCase, expectedFailure from salttesting.helpers import ensure_in_syspath
return self.to_object_block(mgr=mgr).fillna(original_value, limit=limit, inplace=inplace, downcast=False)
if id_ not in minion_timeouts: minion_timeouts[id_] = time.time() + timeout
if empty_needed == 0: if self.negated: return '', [] else: raise EmptyResultSet if full_needed == 0: if self.negated: raise EmptyResultSet else: return '', []
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_key_string) get_course_with_access(request.user, 'staff', course_key)
if ip_str.count(':') > 7: return False
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self._assert_receipt_contains("tax purposes") self._assert_receipt_contains(self.course.display_name)
raise Exception('dateutil 2.0 incompatible with Python 2.x, you must ' 'install version 1.5 or 2.1+!')
with self.connection.cursor() as cursor: cursor.execute("SELECT 1 FROM mysql.time_zone LIMIT 1") return cursor.fetchone() is not None
block_structure._collect_requested_xblock_fields()
X, y = make_blobs(n_samples=500, n_features=2, centers=4, cluster_std=1, center_box=(-10.0, 10.0), shuffle=True,
add_user_to_cohort(test_cohort, self.student.username) self.assert_student_in_group(None)
from django.core.wsgi import get_wsgi_application application = get_wsgi_application()
import salt.ext.six as six
with self.assertRaises(ValueError): len(AustraliaCity.objects.filter(point__distance_lte=('POINT(5 23)',)))
frame = DataFrame(empty((0, 3))) self.assertEqual(len(frame.index), 0)
n_targets = y.shape[1] Xy = np.empty(shape=(n_features, n_targets), dtype=common_dtype, order='F') np.dot(y.T, X, out=Xy.T)
for df in [self.tsframe, self.mixed_frame, self.mixed_float, self.mixed_int]:
ind -= total
obj = super(klass, cls).__new__(cls) obj._constructor_args = (args, kwargs) return obj
if not salt.utils.which('zypper'): return (False, "Module zypper: zypper package manager not found") return __virtualname__
listener_state = 'cmd_|-listener_test_listening_change_state_|-echo "Listening State"_|-mod_watch' self.assertIn(listener_state, state_run)
return tolerance
try: import confidant.client import confidant.formatter HAS_LIBS = True except ImportError: HAS_LIBS = False
self._validate_estimator()
if merged_group_ids is not None: self._access[partition.id] = merged_group_ids
with self.assertNumQueries(1): mtv = ModelToValidate(number=10, name='Some Name', id=123) setattr(mtv, '_adding', True) mtv.full_clean()
elif isinstance(value, six.string_types): if value.lower() == 'none': return None return value else: return None
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_key_string) get_course_with_access(request.user, 'staff', course_key)
if signal.getsignal(signal.SIGINT) is signal.SIG_DFL: signal.signal(signal.SIGINT, self._handle_signals)
#html_theme_path = []
self.assertEqual(self.rng[4], self.rng[np.int_(4)])
apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
chapter_aside.data_field = 'new value' self.store.update_item(new_chapter, self.user_id, asides=[chapter_aside])
os.umask(current_umask)
rng.join(idx, how='outer')
rng = check_random_state(0)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
X, y = make_classification(n_samples=200, n_features=20, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, flip_y=0.0, class_sep=10, shuffle=False, random_state=0)
if hasattr(modulestore, '_drop_database'):
response_element = etree.Element("stringresponse")
'__salt__': __salt__, '__pillar__': __pillar__, '__grains__': __grains__
__virtualname__ = 'salt'
msg = self.style.HTTP_SERVER_ERROR(msg)
response = self.client.get(test_url) self.assertIn(str(self.cert.verify_uuid), response.content)
if (algorithm == 'kd_tree' and metric not in neighbors.KDTree.valid_metrics): assert_raises(ValueError, neighbors.NearestNeighbors, algorithm=algorithm, metric=metric, metric_params=metric_params) continue
import salt.utils
courses_list_by_groups, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(courses_list_by_groups, []) self.assertEqual(courses_list, courses_list_by_groups)
ret['message'] = 'Secret key for {0} deleted\n'.format(fingerprint)
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
@override_settings(DEBUG=True) class SelectForUpdateTests(TransactionTestCase):
course = item.get_parent() item_dict['index'] = get_index(item_dict['location'], course.children)
data = "\n" self.assertRaises(EmptyDataError, self.read_csv, StringIO(data))
self.assert_grade(problem, "Second", "correct")
zendesk_tags = list(tags.values()) + ["LMS"]
raise CommandError( _( 'Invalid group name: "{group_name}". {messages}' ).format( group_name=group_name, messages=exc.messages[0] ) )
return _offset_map[name].copy()
from __future__ import absolute_import
return prlctl('list', args, runas=runas)
'ENABLE_SERVICE_STATUS': False,
sampling_algorithm["numpy-permutation"] = \ lambda n_population, n_sample: \ np.random.permutation(n_population)[:n_sample]
other = Timedelta(other) other_mask = isnull(other) other = other.value
ret = self.run_run_plus(fun='fileserver.file_list', args=['backend="[roots]"']) self.assertIsInstance(ret['fun'], list)
class FileSessionTests(SessionTestsMixin, unittest.TestCase):
self.settings_patcher = patch.dict('django.conf.settings.FEATURES', {'MILESTONES_APP': True}) self.settings_patcher.start()
self.assertEqual(CourseMode.auto_enroll_mode(self.course_key, modes), result)
grains = dict() if osdata['kernel'] != 'Windows': return grains
log_ais_w = numpy.zeros(batch_size, dtype=floatX)
keyed_result = OrderedDict() for component in result: keyed_result[component['module']] = component del keyed_result[component['module']]['module']
if axis == 1 and self._is_mixed_type and self._is_datelike_mixed_type: numeric_only = True
parse_dates=False, infer_datetime_format=False, keep_date_col=False, date_parser=None, dayfirst=False,
if not GlobalStaff().has_user(user): course_keys = [course_key for course_key in course_keys if has_access(user, access_type, course_key)]
import salt.utils.itertools from salt.exceptions import CommandExecutionError
values = Series([u('foo'), u('fooo'), u('fooooo'), np.nan, u( 'fooooooo')])
parser = TextFileReader(filepath_or_buffer, **kwds)
def test_no_mlk_before_1984(self): class MLKCalendar(AbstractHolidayCalendar): rules = [USMartinLutherKingJr]
self.assertEqual(len(response.redirect_chain), 1) self.assertIn(302, response.redirect_chain[0]) self.assertEqual(len(outbox), outbox_count) if send_email:
import re import inspect
shutil.move(src_filename, dst_filename)
p.bestchild = None self.assertIsNone(p.bestchild)
import salt.utils
super(LmsSearchResultProcessorTestCase, self).setUp() self.build_course()
self.client.login(username=self.student.username, password=self.PASSWORD) response = self.client.get(reverse("dashboard"))
resp = self.create_xblock(parent_usage_key=self.chapter_usage_key, category='sequential') self.seq_usage_key = self.response_usage_key(resp)
import logging
r = self._get_resampler(obj) r._set_binner() return r.binner, r.grouper, r.obj
__virtualname__ = 'mdata'
assert_series_equal(actual, expected)
incron.__grains__ = {} incron.__salt__ = {} incron.__context__ = {} incron.__opts__ = {}
if not opts['job_cache'] or opts.get('ext_job_cache'): return
url(r'^choose/{}/$'.format(settings.COURSE_ID_PATTERN), views.ChooseModeView.as_view(), name='course_modes_choose'),
if check_objects: s = Series(bdate_range('1/1/2000', periods=10)) res = f(s) exp = alternate(s) self.assertEqual(res, exp)
from __future__ import absolute_import import logging import os import time import pickle from copy import deepcopy
from __future__ import unicode_literals
self.assertNotContains(response, 'release_date__day=') self.assertNotContains(response, 'release_date__month=') for date in DATES: self.assert_contains_year_link(response, date)
for i, n_outliers in enumerate(range_n_outliers): for j in range(repeat):
logging.root.removeHandler(__MP_LOGGING_QUEUE_HANDLER) __MP_LOGGING_QUEUE_HANDLER = None __MP_LOGGING_CONFIGURED = False
class Person(Form): first_name = CharField() last_name = CharField() birthday = DateField()
if exc.errno != errno.EEXIST: raise else: ret['comment'] = 'File {0} exists and cannot be overwritten'.format(name)
MIGRATION_MODULES = {}
#pylint: disable=E0602
idx = 0 start_idx = end_idx for rd in rings: start_idx = downsample_ring(img, idx, rd, output, start_idx) idx += rd
block = Comment(start[0], end[0], string) self.blocks.append(block) self.current_block = block
return no_edit_link
indexer_axis = list(range(ndim)) for a in axis: indexer_axis.remove(a) indexer_axis = indexer_axis[0]
instructor_task = cls( course_id=course_id, task_type=task_type, task_id=task_id, task_key=task_key, task_input=json_task_input, task_state=QUEUING, requester=requester ) instructor_task.save_now()
assert_equal('Paragraph', dropdowns[0].text) assert_equal('Font Family', dropdowns[1].text)
'ENABLE_COURSEWARE_SEARCH': False,
destroy = salt.utils.alias_function(remove, 'destroy')
CELERY_ALWAYS_EAGER = True HTTPS = 'off'
if structure is None: structure = self.db_connection.get_structure(version_guid, course_key) bulk_write_record.structures[version_guid] = structure if structure is not None: bulk_write_record.structures_in_db.add(version_guid)
strides = a.strides total_buffer_len = (a_end - a_start) // a.itemsize
selector = RFE(estimator, step=5) sel = selector.fit(X, y) assert_equal(sel.support_.sum(), n_features // 2)
self._do_mstep(X, z, self.params)
'monitoring',
footer_el = footer_nav.find_element_by_xpath('..') return 'hidden' not in footer_el.get_attribute('class').split()
ir.fit(x, y) ir.out_of_bounds = "xyz" assert_raises(ValueError, ir.transform, x)
import salt.utils import salt.exceptions
panel = tm.makePanel() self.assertRaises(ValueError, lambda: concat([panel, s1], axis=1))
return 0 < self.major < 2014
if filter_type is None and axis == 0: try:
import os
with self.disable_implicit_wait(): self.wait_until( lambda driver: len(driver.find_elements_by_css_selector(options_selector)) == 0 )
supports_1000_query_parameters = True
self.assertContains(response, "Please enter your new password")
frame = self.frame.copy() expected = self.frame.copy()
self._configure_message_timeout(10000) DonationConfiguration(enabled=True).save()
with self.assertNumQueries(0): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
from salt.states import debconfmod
self.assertQuerysetEqual(Article.objects.filter(pk__in=[self.a.id]), ["<Article: Swallow programs in Python>"])
header_end = chunk.find(b'\r\n\r\n')
asset_md = store.find_asset_metadata(new_asset_loc) self.assertIsNone(asset_md)
from salt.exceptions import CommandExecutionError import salt.utils
import sys from salt.ext.six.moves import map if sys.version_info < (2, 7): import unittest2 as unittest else: import unittest
ret = self._run_initscript(init_script, minions, False, 'bogusaction', 2)
self.assertTrue(BulkEmailFlag.feature_enabled(course_id))
output = StringIO.StringIO() test_log_handler = logging.StreamHandler(output) test_log_handler.setLevel(logging.DEBUG) glog = git_import.log glog.addHandler(test_log_handler)
opts['open_mode'] = opts['open_mode'] is True
salt '*' win_wua.list_update 'Microsoft Camera Codec Pack'
ENROLLMENT_COURSE_DETAILS_CACHE_TIMEOUT = 60
names = self._maybe_make_multi_index_columns(names, self.col_names)
import salt.ext.six as six if six.PY3: import ipaddress else: import salt.ext.ipaddress as ipaddress
response = self.client.get(course_one_teams_url) self.assertIn('"teams": {"count": 1', response.content)
from __future__ import absolute_import import time import logging import re import traceback
return base.DeserializedObject(obj, m2m_data)
self._unpickle_matrix_compat(state)
self.assertFalse('test.missing_func' in self.loader._dict)
filename = traceback.extract_tb(tb)[-1][0]
block = self.make_block(new_values) if convert: block = block.convert(by_item=True, numeric=False)
setattr(instance, self.cache_name, value)
raise BuildFailure(file_not_found_message)
CreditProvider.objects.create( provider_id=self.PROVIDER_ID, display_name=self.PROVIDER_NAME, provider_status_url=self.PROVIDER_STATUS_URL, enable_integration=True, )
vim-enhanced: pkg.purged: - version: 7.4.160-1.el7 - ignore_epoch: True
block_types_list = {'block_type1', 'block_type2'} for field_name in ['block_counts', 'student_view_data']: self.form_data.setlist(field_name, block_types_list) self.cleaned_data[field_name] = block_types_list
max_date = block_data.edit_info.edited_on max_date_by = block_data.edit_info.edited_by
form = PasswordResetFormNoActive({'email': email})
try: return getattr(self, descriptor.cache_name) except AttributeError: pass
self.assertIn(" - Create model SillyModel", out.getvalue())
CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52 CSRF_COOKIE_SECURE = False
if not diff_quality_percentage_pass: raise BuildFailure("Diff-quality failure(s).")
raise NotImplementedError("merging with both multi-indexes is not " "implemented")
if np_version < (1, 7, 1): _ravel = np.ravel else: _ravel = partial(np.ravel, order='K')
weight_k[in1d(y_full, list(classes_missing))] = 0.
import salt.ext.six as six try: import hglib HAS_HG = True except ImportError: HAS_HG = False
keyname = key fn_ = '{0}/.ssh/{1}'.format(userinfo['home'], key)
v = TfidfVectorizer(binary=True, use_idf=False, norm=None) assert_true(v.binary)
gc = AgglomerativeClustering(n_clusters=10) brc2 = Birch(n_clusters=gc) brc2.fit(X) assert_array_equal(brc1.subcluster_labels_, brc2.subcluster_labels_) assert_array_equal(brc1.labels_, brc2.labels_)
set_limits = False if prev_soft < min_soft: soft = min_soft set_limits = True else: soft = prev_soft
module = CapaFactory.create(due=self.yesterday_str, done=True) self.assertFalse(module.should_show_reset_button())
mock_uses_shib.return_value = True
index_sql = connection.schema_editor()._model_indexes_sql(IndexTogetherSingleList) self.assertEqual(len(index_sql), 1)
permutation = np.asarray(permutation, dtype=np.intp) return _update_cdnmf_fast(W, HHt, XHt, permutation)
microsite.set_by_domain('unknown') self.assertIsNone(microsite.get_value('platform_name'))
return not isinstance(key, slice) and not is_list_like_indexer(key)
qs = Item.objects.datetimes('created', 'month') pickle.loads(pickle.dumps(qs))
nsamples[0].set_value(x) for ii, psample in enumerate(psamples): if ii > 0: nsamples[ii].set_value(psample.get_value())
if not value.index.is_unique: raise e
rng1 = bdate_range('12/5/2011', '12/5/2011') rng2 = bdate_range('12/2/2011', '12/5/2011') rng2.offset = datetools.BDay()
VerificationStatus.add_status_from_checkpoints( checkpoints=[self.first_checkpoint, self.second_checkpoint], user=self.user, status=status )
if isinstance(data, ABCSparseArray): data = data.to_dense()
from __future__ import unicode_literals
if not len(results): return self._constructor(**self._construct_axes_dict())
return template_name, None, msg_prefix
import salt.utils.jid
assert_array_almost_equal(np.diag(K), np.ones(5))
self.process_input_line('import matplotlib.pyplot as plt', store_history=False) self._pyplot_imported = True
if HAS_LDAP: return __virtualname__ return (False, 'The ldapmod execution module cannot be loaded: ' 'ldap config not present.')
from salt.modules import data
return self.get_item(xblock.location.for_version(new_id))
xblock_partition_access = set(xblock_group_access.get(partition.id) or []) or None
CourseModeFactory.create(course_id=self.COURSE_KEY, mode_slug=CourseMode.HONOR) data = certs_api.get_certificate_footer_context()
with override_settings(CREDIT_PROVIDER_SECRET_KEYS={}): response = self._credit_provider_callback(request_uuid, 'approved', keys={}) self.assertEqual(response.status_code, 403)
self.check_tab_json_methods(tab)
return getattr(section, self.name)[new_key]
@python_2_unicode_compatible class RelatedModel(models.Model): test_gfk = GenericRelation('RelationModel', content_type_field='gfk_ctype', object_id_field='gfk_id') exact = models.NullBooleanField()
df1 = df.copy() df2 = df.copy()
from salt.states import modjk import salt.ext.six as six
cursor.close()
if request.method == 'POST' and not form_validated and "_saveasnew" in request.POST: context['show_save'] = False context['show_save_and_continue'] = False add = False
if status.st_ino != 0: node = (status.st_dev, status.st_ino) if node in _seen: return _seen.add(node)
return False, project_state
super(Person, self).delete() self.data.append("After deletion")
fld = forms.GeometryField() with self.assertRaisesMessage(forms.ValidationError, "No geometry value provided."): fld.clean(None)
import salt.utils.event from salt.ext import six
offset = CBMonthBegin() offset2 = CBMonthBegin() offset2.normalize = True self.assertEqual(offset, offset2)
about_base = re.sub(r"^https?://", "", about_base)
import salt.modules.blockdev as blockdev import salt.utils
self.dashboard_page.visit()
expected = x * np.nan expected[count_x >= max(min_periods, 1)] = exp assert_equal(mean_x, expected)
df = DataFrame({"a": [5, 15, 25]}) c = pd.cut(df.a, bins=[0, 10, 20, 30, 40])
exclude_patterns = ['_build']
with tm.assertRaisesRegexp(ValueError, "^Index length"): SparseDataFrame(self.frame.values, index=self.frame.index[:-1])
return 'Looks like jail {0} has not been created'.format(name)
exc_info_on_loglevel=logging.DEBUG
self.assertFalse(issubclass(df.DateCol.dtype.type, np.datetime64), "DateCol loaded with incorrect type")
if not _exists: _exists = name in ls_(cache=False, path=path) return _exists
for c_data in conversion_data: if dtype == c_data[0]: if data[col].max() <= np.iinfo(c_data[1]).max: dtype = c_data[1] else: dtype = c_data[2]
credit_request, created = CreditRequest.objects.get_or_create( course=credit_course, provider=credit_provider, username=username, )
#'django.contrib.auth.middleware.AuthenticationMiddleware', 'cache_toolbox.middleware.CacheBackedAuthenticationMiddleware', 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
log.warning("Asset's course {} does not match other assets for course {} - not saved.".format( asset_md.asset_id.course_key, course_key )) continue
errmsg = "No columns to parse from file"
PeriodIndex(date_range('1985', periods=1000).to_pydatetime(), freq='D')
self.assertEqual(0, get_format('FIRST_DAY_OF_WEEK'))
for CourseState in self.course_actions_displayable_states + self.courses_with_state3_non_displayable: action_class.objects.update_state( CourseState.course_key, CourseState.state, should_display=CourseState.should_display, allow_not_found=True )
return '0{0}'.format(ret)
df = DataFrame(columns=list('ABC')) store.put('df2', df) assert_frame_equal(store.select('df2'), df)
if s3_meta: bucket_files[bucket] = __get_pillar_files_from_s3_meta(s3_meta)
tm.assert_frame_equal(parsed_114, expected, check_datetimelike_compat=True) tm.assert_frame_equal(parsed_115, expected, check_datetimelike_compat=True) tm.assert_frame_equal(parsed_117, expected, check_datetimelike_compat=True)
mock_get_scores.assert_called_with( self.course.id.to_deprecated_string(), anonymous_id_for_user(self.student_user, self.course.id) )
available_version = salt.utils.alias_function(latest_version, 'available_version')
signature = _compute_signature(parameters, access_key_secret) parameters['Signature'] = signature
return line
if not connection.features.gis_enabled or not connection.features.supports_raster: raise ImproperlyConfigured('Raster fields require backends with raster support.')
win_system.__salt__ = {} win_system.__opts__ = {}
if self._nw_lags is None: F = self._r2_raw / (self._r2_raw - self._r2_adj_raw)
inheritable = InheritanceMixin.fields.keys() if name in inheritable: for ancestor in _lineage(block): if self.get_override(ancestor, name) is not NOTSET: return False
raise salt.exceptions.SaltSystemExit( 'The minimum required python version to run salt-ssh is "2.6".' )
import matplotlib matplotlib.use('Agg')
L = np.empty((max_features, max_features), dtype=Gram.dtype)
ix = np.flatnonzero(last_card == 2314885530818453536)
from __future__ import unicode_literals
if not isinstance(opExpr, Optional): opExpr = Optional(opExpr) matchExpr = FollowedBy(opExpr.expr + thisExpr) + Group( opExpr + thisExpr )
self.hashed_files.update(hashed_files)
raise NotImplementedError
break
mdadm.__salt__ = {} mdadm.__opts__ = {}
self.validate_xblock_info_consistency(xblock_info)
Z = Z.reshape(xx.shape) plt.figure() plt.pcolormesh(xx, yy, Z, cmap=cmap_light)
if item.has_children: for child_loc in item.children: _internal_depth_first(child_loc, False)
import theano from theano import tensor try: from theano.sparse import SparseType except ImportError: warnings.warn("Could not import theano.sparse.SparseType") from theano.compile.mode import get_default_mode
expiration_date = models.DateField(default=None, null=True, blank=True)
del subobj gc.collect()
self.assertEqual(len(mail.outbox), 1) self.assertEqual(mail.outbox[0].subject, 'Greetings from a function action')
_check_align(self.ts[:0], self.ts[:-5], how=kind) _check_align(self.ts[:0], self.ts[:-5], how=kind, fill=-1)
self.assertEqual(fire_event_mock.call_args[0][0]['fun'], 'test.echo')
self.assertEqual(middleware.cache_timeout, 30) self.assertEqual(middleware.key_prefix, 'middlewareprefix') self.assertEqual(middleware.cache_alias, 'other')
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
html_theme_path = ['themes']
ldap3 = inspect.getmodule(connect)
'Content-Type': 'application/x-www-form-urlencoded',
_ = lambda text: text
try: import zlib
self.add_dropdown_to_section(vertical_1.location, 'H2P1_GROUP1', 1).location.html_id()
BITAND = '&' BITOR = '|'
else: ret = _load_result(new, ret)
redirect_url = get_redirect_url(params["course_key"], params["checkpoint"]) return JsonResponse({"url": redirect_url})
if device_vg and len(bricks) > 1: raise SaltInvocationError('Block device backend volume does not ' + 'support multiple bricks')
TEST_DATA = os.path.join(os.path.dirname(upath(__file__)), 'data')
(12, True, False, u"False")
from __future__ import absolute_import import os import sys import random import subprocess import time
self.assertAlmostEqual(1.41421356237, pnt.distance(Point(1, 1)), 11)
context_dict.setdefault("STATIC_URL", "/dummy-static/") try: xml_str = self.template.render_unicode(**context_dict) except: raise TemplateError(exceptions.text_error_template().render())
def _get_freq(self): return self.offset
if (isinstance(self, SparseSGDClassifierTestCase) or isinstance(self, SparseSGDRegressorTestCase)): decay = .01
self._setup_mode_and_enrollment(self.FUTURE, "verified")
if self.post_dict.get('roles'): role = '<h5>Role: {}</h5>'.format(self.post_dict['roles']) else: role = ''
if request.user.is_staff: return True user = get_object_or_404(User, username__iexact=url_username) if field_name in visible_fields(user.profile, user): return True raise Http404()
META_UNIVERSITIES = {'UTx': ['UTAustinX']}
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
tz = self.tz('US/Eastern')
import logging
context = test_view.get_context_data(object_list=queryset) self.assertEqual(context['object_list'], queryset)
self.assertRaises(ValueError, read_csv, 's3://pandas-test/tips.csv' + ext, compression=comp)
log.debug( 'KeyError when loading {0}'.format(module_name), exc_info=True )
cm = metrics.confusion_matrix(y_test, y_predicted) print(cm)
'state_auto_order': bool,
import logging import os import inspect import zipfile from tempfile import TemporaryFile
self.cohort_a_student_username = "cohort_a_student" self.cohort_a_student_email = "cohort_a_student@example.com" StudioAutoAuthPage( self.browser, username=self.cohort_a_student_username, email=self.cohort_a_student_email, no_login=True ).visit()
#
if not cleaned_data.get('all_blocks', None): raise ValidationError({'username': ['This field is required unless all_blocks is requested.']})
do_vcs_install(manifest_in, cfg.versionfile_source, ipy) return 0
datacenter_ref = salt.utils.vmware.get_mor_by_property(_get_si(), vim.Datacenter, datacenter_name) if datacenter_ref: return {datacenter_name: 'datacenter already exists'}
continue
new_stores = get_mixed_stores(new_mixed_setting) self.assertIsInstance(new_stores, list)
with super(InlineDiscussionUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
return False
from salt.modules import grub_legacy from salt.exceptions import CommandExecutionError
if latest: for pkg_name in latest: if old.get(pkg_name, 'old') == new.get(pkg_name, 'new'): ret[pkg_name] = {'current': new[pkg_name]}
self.assertFalse(0 in ci) self.assertFalse(1 in ci)
rindex = list(self.ts.index) random.shuffle(rindex)
data = { "form-TOTAL_FORMS": "3", "form-INITIAL_FORMS": "3", "form-MAX_NUM_FORMS": "0",
with self.assertRaises(Exception) as cm: admin.autodiscover() self.assertEqual(str(cm.exception), "Bad admin module")
log.error('Unrecognized target engine "{0}" for' ' target expression "{1}"'.format( target_info['engine'], word, ) ) return False
from __future__ import absolute_import import re import logging
course = CourseFactory.create() course.display_coursenumber = escaping_content
train_sizes_abs = _translate_train_sizes(train_sizes, n_max_training_samples) n_unique_ticks = train_sizes_abs.shape[0] if verbose > 0: print("[learning_curve] Training set sizes: " + str(train_sizes_abs))
self.get_readlock(local_name) self.release_writelock()
comment = str(ret['comment']) comment = comment.strip().replace( u'\n', u'\n' + u' ' * 14)
response = self.client.get('/jsi18n_admin/?language=de') self.assertContains(response, '\\x04')
if (X.dtype == X_checked.dtype and X.format == X_checked.format): assert_true(X is X_checked)
grad = numpy.gradient(a) grad_x, grad_y = grad
if len(P.shape) == 2: P = squareform(P) kl_divergence = 2.0 * np.dot(P, np.log(P / Q))
self.refresh_course()
for n in range(10): for s, i in self.d.items(): i_rec = self.encode_decode(i) assert_categorical_equal(i, i_rec)
with transaction.atomic(): (user, profile, registration) = _do_create_account(form, custom_form)
PyDateTime_IMPORT
rsp_msg = rsqt_msg.get_response()
url(r'^programs/id_token/$', ProgramsIdTokenView.as_view(), name='programs_id_token'), url(r'^program/', ProgramAuthoringView.as_view(), name='programs'),
diabetes = datasets.load_diabetes()
if return_bin: return response
instance.file.delete() instance.delete()
from __future__ import absolute_import
ret['destroy'] = exist.difference(defined)
item_locs.add( unicode(as_published(Location._from_deprecated_son(item['_id'], course_key.run))) )
from __future__ import unicode_literals
('ALIGN', (5, 0), (5, 0), 'RIGHT'),
if isinstance(ax, MultiIndex): level = ax._get_level_number(level) ax = Index(ax.get_level_values( level), name=ax.names[level])
self.assertEqual(userreport['city'], "None") self.assertEqual(userreport['country'], "")
self.assertNumQueries(5, s.delete) self.assertFalse(S.objects.exists())
clf = svm.SVR(kernel=lambda x, y: np.array([[1.0]])) clf.fit(X, y) assert_raises(ValueError, clf.predict, X)
self.assertTrue(is_categorical_dtype(s.dtype)) self.assertTrue(is_categorical_dtype(s)) self.assertFalse(is_categorical_dtype(np.dtype('float64')))
self.assertEqual(timesince(self.t, self.t), '0\xa0minutes')
admin = AdminFactory()
wua_session = win32com.client.Dispatch('Microsoft.Update.Session') wua_session.ClientApplicationID = 'Salt: Install Update'
self._initialize_mixed(mappings={})
if callback is not None: callback(locals())
if six.PY3: invalid_related_names.append('，')
from __future__ import absolute_import
self.max_depth = 5
y = NORBSmall.load(which_set, 'cat') y_extra = NORBSmall.load(which_set, 'info')
X = check_array(X) if X.ndim == 1: X = X[:, np.newaxis]
wt_loc = toplevel
self.course_info_page.visit() self.tab_nav.go_to_tab('Progress')
super(SymbolicResponse, self).setup_response()
make_asset_xml(num_assets, ASSET_XML_PATH) validate_xml(ASSET_XSD_PATH, ASSET_XML_PATH)
get_request_dict = {CapaFactory.input_key(): '3.14'} module.check_problem(get_request_dict)
from salt.modules import cassandra
self.assertTrue(subsection.release_date) self.assertFalse(subsection.due_date) self.assertFalse(subsection.policy)
assert sls_obj['foo'].__str__() == '"bar"' assert sls_obj['foo'].__repr__() == '"bar"'
cache.set("hello2", "goodbye2") self.assertIn("hello2", cache) self.assertNotIn("goodbye2", cache)
PROFILE_IMAGE_MAX_BYTES = 1000 PROFILE_IMAGE_MIN_BYTES = 1000
task_key = hashlib.md5(task_key_stub).hexdigest()
to_del = [] if not full:
for cache in settings.CACHES: caches[cache].clear()
for svd_sparse, svd_dense in svds_sparse_v_dense: assert_array_almost_equal(svd_sparse.explained_variance_ratio_, svd_dense.explained_variance_ratio_)
_describe = __salt__['boto_iot.describe_topic_rule'](ruleName=ruleName, region=region, key=key, keyid=keyid, profile=profile)['rule']
text = f.widget.format_value(result) self.assertEqual(text, "13:30:05")
with tm.assertRaises(Exception): func(idx)
if library: component_types = [component for component in component_types if component != 'discussion']
pc_clf.fit(this_X_train, 2 * y_train - 1, sample_weight=sw_train) prob_pos_pc_clf_relabeled = pc_clf.predict_proba(this_X_test)[:, 1] assert_array_almost_equal(prob_pos_pc_clf, prob_pos_pc_clf_relabeled)
apps.lazy_model_operation(test_func, ('apps', 'lazyb'))
data = { "email": self.EMAIL, "password": self.PASSWORD, }
from salttesting import TestCase, skipIf from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON )
args = [_sdecode(name)] args.extend(_normalize_args(command))
n_labels = 15 n_samples = 1000 n_folds = 5
for parent in inspect.getmro(self.__class__): if 'class_lookups' not in parent.__dict__: continue if lookup_name in parent.class_lookups: return parent.class_lookups[lookup_name]
dual_coefs = np.empty([n_targets, n_samples])
m2 = _zero_out_fperr(m2) m3 = _zero_out_fperr(m3)
indexed_count = self.reindex_course(store) self.assertEqual(indexed_count, 7)
import salt.ext.six as six try: import msgpack except ImportError:
path = os.path.realpath(os.path.expanduser(path))
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
num_vis = rng.randint(1,11) n_classes = rng.randint(1, 11)
LOGGING_TEMP_HANDLER = None break
with self._capture_assertion_errors(): context = assertion(*args, **kwargs)
import salt import salt.utils import salt.utils.url import salt.fileclient from salt.utils.odict import OrderedDict
s = string_at(result, last_arg_byref(cargs)) free(result) return s
with self.assertNumQueries(6): self._get_list()
with super(UsersEndpointTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
encoding = _ensure_encoding(encoding) if encoding is not None and len(data):
for addr in salt.utils.network.ip_addrs(): addr = ipaddress.ip_address(addr) if addr.is_loopback: continue possible_ids.append(str(addr))
}, "formats": { },
return _LDAPConnection(**connargs).ldap
course = self._create_course("verified", sku='nonempty-sku') self._enroll(course.id)
self.drop_table('test_frame1')
handler = self.static_handler(_MediaFilesHandler(WSGIHandler()))
temp_file = _mkstemp_copy(path=path, preserve_inode=preserve_inode)
from __future__ import absolute_import import os import logging import time from collections import MutableMapping
BILATERAL = 'bilateral'
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
resolver = get_resolver('urlpatterns_reverse.namespace_urls') sub_resolver = resolver.namespace_dict['test-ns1'][1] self.assertIn('<RegexURLPattern list>', repr(sub_resolver))
self.assertContains(response, '<h3 id="admin_list-admin_actions">admin_actions</h3>', html=True) self.assertContains(response, '<li><a href="#admin_list-admin_actions">admin_actions</a></li>', html=True)
continue
add_component(self.lib_page, "html", "Text") self.assertEqual(len(self.lib_page.xblocks), 1) first_block_id = self.lib_page.xblocks[0].locator
([], 'honor'),
attempts = random.randint(1, 10) module = CapaFactory.create(attempts=attempts, max_attempts=attempts, force_save_button="true", done=True) self.assertFalse(module.should_show_save_button())
self.assertNotContains(resp, 'Hidden_course')
assert not world.is_css_present('iframe', wait_time=0)
self.output_transaction = migration.atomic
ts = self.tsframe['A']
idx = check_ogr_fld(ogr_name) ogr_field = ogr_field_types[idx]
name_placeholder = _(u"Jane Doe")
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.django_book, self.djangonaut_book])
ret['result'] = True ret['comment'] = 'vm {0} is absent'.format(name)
if self.indices: return max(len(v) for v in self.indices.values()) else: return 0
kf = KFold(3) kf2 = KFold(3, shuffle=True, random_state=0) kf3 = KFold(3, shuffle=True, random_state=1)
assert_raises(ValueError, gs.fit, X, y)
assert_almost_equal(np.abs(Yt[0][0]), 1., 1)
pass
self._set_item(key, value)
del params["honor_code"] assert_honor_code_error("To enroll, you must follow the honor code.")
import salt.ext.six as six
from yaml.constructor import ConstructorError from salt.utils.yamlloader import SaltYamlSafeLoader import salt.utils
for line in response: splt = line.split(':', 1) splt[0] = splt[0].strip() splt[1] = splt[1].strip()
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
while True: self.len_idx = np.mod(self.len_idx+1, len(self.len_unique)) curr_len = self.len_unique[self.len_idx] if self.len_curr_counts[curr_len] > 0: break
d = np.diag(prec).reshape(1, prec.shape[0]) d = 1. / np.sqrt(d)
parallel_units = len(parallel_suite.subsuites) if self.parallel > parallel_units: self.parallel = parallel_units
if name not in nodes: return {} salt.utils.cloud.cache_node(nodes[name], __active_provider_name__, __opts__) return nodes[name]
self._assert_course_verification_status(None)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
target = GDALRaster(target.name)
pass
repl = str(repl)
from __future__ import unicode_literals
if compat.PY2:
for leaf in np.where(tree.children_left == TREE_LEAF)[0]: self._update_terminal_region(tree, masked_terminal_regions, leaf, X, y, residual, y_pred[:, k], sample_weight)
df = DataFrame(randn(5, 5))
return False
try: currIndex = sysPath.index(path) if currIndex != index: sysPath.pop(currIndex) else: return True except ValueError: pass
if sig: return __salt__['status.pid'](sig)
rng2 = rng[[1, 0, 2]]
with self.assertRaises(forms.ValidationError): f.clean('21.12.2010')
fetch = get
from __future__ import absolute_import import json import os import logging import copy import time from pprint import pformat
{% load_yaml as var1 %} foo: it works {% endload %} {% load_yaml as var2 %} bar: for real {% endload %}
attrs['maxlength'] = str(self.max_length)
delete_user(name, runas) msg = 'Error' return _format_response(res2, msg)
def boot_time(): return psutil.BOOT_TIME
return HttpResponse("Mode '{mode_slug}' created for '{course}'.".format( mode_slug=PARAMETERS['mode_slug'], course=course_id ))
if auth_entry and auth_entry in pipeline.AUTH_DISPATCH_URLS: redirect_uri = pipeline.AUTH_DISPATCH_URLS[auth_entry]
current_locks = list_holds(full=_yum() == 'yum')
module = CapaFactory.create(attempts=attempts, max_attempts=attempts) self.assertFalse(module.should_show_check_button())
import salt.ext.six as six
if self.is_datetime64tz_lhs: lvalues = lvalues.tz_localize(None) if self.is_datetime64tz_rhs: rvalues = rvalues.tz_localize(None)
try: self.assertIn(ret_str, instance) except AssertionError: self.run_cloud('-d {0} --assume-yes'.format(self.INSTANCE_NAME)) raise
from __future__ import absolute_import import json
if existing['code'] == 200:
if time_since_last_activity > timedelta(seconds=timeout_in_seconds): del request.session[LAST_TOUCH_KEYNAME] auth.logout(request) return
size_tr_col = len(headers[self.tr_size_col])
iris = load_iris() perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
context[self.var_name] = [] return ''
return redirect(reverse('cas-login'))
rng = date_range('1/1/2000', '1/30/2000', tz='UTC') frame = DataFrame(np.random.randn(len(rng), 4), index=rng)
sut = PCA(self.num_components) sut.apply(self.dataset, True)
self.assertFalse(self._has_changes(locations['grandparent'])) self.assertFalse(self._has_changes(locations['parent']))
try: return X.iloc[indices] except ValueError: warnings.warn("Copying input dataframe for slicing.", DataConversionWarning) return X.copy().iloc[indices]
course_location = self.store.make_course_key('Org1', 'Course1', 'Run1') course = self._create_course_with_access_groups(course_location, self.user)
msg_format = _("Message {action} for {succeeded} of {attempted} recipients")
self._envelope = args[0]
queryset = (
'microsite_configuration.middleware.MicrositeSessionCookieDomainMiddleware',
site_title = ugettext_lazy('Django site admin')
else:
config['course_org_filter'] = organizations[0] self.current_request_configuration.data = config
if os.path.isfile('/etc/mtab'): shutil.move('/etc/mtab', '/tmp/mtab')
try: ts_b36, hash = token.split("-") except ValueError: return False
n_samples = [int(1e3), int(1e4), int(1e5), int(1e6)] n_features = int(1e2) n_queries = 100 n_neighbors = 10
import salt.defaults.exitcodes import salt.utils import salt.utils.systemd from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.ext import six
clf = PassiveAggressiveClassifier(class_weight="balanced") assert_raises(ValueError, clf.partial_fit, X, y, classes=np.unique(y))
self.assertEqual(roundtrip_val, float(text[2:]))
problem = new_loncapa_problem(xml_str)
if getattr(self.distribution, 'salt_syspaths_hardcoded_path', None) is None: print('This command is not meant to be called on it\'s own') exit(1)
rs = mi_int.iloc[:, 2] xp = mi_int.ix[:, 2] assert_series_equal(rs, xp)
self.required_html_ids = [descriptor.location.html_id() for descriptor in self.descriptor.get_required_module_descriptors()]
result = self.ts[:0].to_string() self.assertEqual(result, 'Series([], Freq: B)')
self.assert_logged_in_cookie_redirect(actions.do_complete(
for name in datasets: datasets[name] = datasets[name].T
import integration
self.assertContains(resp, 'Robot_Super_Course')
from __future__ import absolute_import
self.assertRaises(TypeError, lambda bins: s.value_counts(bins=bins), 1)
if key in ['freq', 'index_name']: ws = attribute_conflict_doc % (key, existing_value, value) warnings.warn(ws, AttributeConflictWarning, stacklevel=6)
out_file.write(', fillcolor="#C0C0C0"')
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.class_weight_ = np.empty(0) return column_or_1d(y, warn=True).astype(np.float64)
'publish_session': int,
order = [4, 1, -2] for df in [self.mixed_frame]:
assert sreq.send_auto({}) == {'enc': 'clear', 'load': {}}
var_f_star = self.kernel_.diag(X) - np.einsum("ij,ij->j", v, v)
try: from pandas import to_datetime return to_datetime(v) except: pass
METRICS_WITH_AVERAGING = [ "precision_score", "recall_score", "f1_score", "f2_score", "f0.5_score" ]
from salt.states import postgres_database
optioninput_element = etree.Element("optioninput")
to_concat = [convert_to_pydatetime(x, axis) for x in to_concat] return np.concatenate(to_concat, axis=axis)
tm.assert_frame_equal(lexsorted_df, not_lexsorted_df)
expected = Timestamp('3/11/2012 05:00', tz=self.tzstr('US/Eastern'))
self.assertEqual(self.client.session['tobacconist'], 'hovercraft')
if not isinstance(config, dict): return False, ('Configuration for ps beacon must be a dictionary.') return True, 'Valid beacon configuration'
grouped = df.groupby(['name', 'name2']) grouped.apply(lambda x: x.sort_values('value', inplace=True))
print(metrics.classification_report(y_test, y_predicted, target_names=dataset.target_names))
if 'remove_{0}'.format(instance) not in vmconfig['changed']: vmconfig['changed']['remove_{0}'.format(instance)] = []
out, err = DETAILS['server'].sendline(cmd)
idx = pd.TimedeltaIndex(['1 day', pd.NaT, '3 day'])
expected_num_queries = (ceil(TEST_SIZE // batch_size) + ceil(TEST_SIZE // GET_ITERATOR_CHUNK_SIZE) + 2)
choose_track_url = reverse('course_modes_choose', args=[unicode(self.course.id)]) self.client.post(choose_track_url, self.POST_PARAMS_FOR_COURSE_MODE[CourseMode.DEFAULT_MODE_SLUG])
self.assertRaises(NotImplementedError, s.any, bool_only=True, level=0) self.assertRaises(NotImplementedError, s.all, bool_only=True, level=0)
tgt = ipaddress.ip_network(tgt)
def test_lle_init_parameters(): X = np.random.rand(5, 3)
df = DataFrame({'text': ['some words'] + [None]*9})
pre_requisite_courses = get_prerequisite_courses_display(course)
HAS_RESOURCE = False
url_fields[0] = 'http'
if delete_published: item['_id']['revision'] = MongoRevisionKey.published to_be_deleted.append(item['_id'])
data = {} for c, s in compat.iteritems(self.frame): data[c] = s.to_dict()
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
var_unbiased_x = var_unbiased(x) var_biased_x = var_biased(x) var_debiasing_factors_x = var_debiasing_factors(x) assert_equal(var_unbiased_x, var_biased_x * var_debiasing_factors_x)
ser = Series([0.1, 0.2], index=[1, 2])
[arrayfuncs.cholesky_delete(L[:n_active, :n_active], ii) for ii in idx]
import matplotlib if str(matplotlib.__version__) >= LooseVersion('1.4'): raise nose.SkipTest("Matplotlib Regression in 1.4 and current dev.")
self.assertEqual(errors[0].id, 'postgres.E001') self.assertIn('max_length', errors[0].msg)
self.course_nav.q(css='input[id^=input_][id$=_2_1]').fill('A*x^2 + sqrt(y)')
self.assertEqual(len(all_gradesets), 5)
from salttesting.helpers import ensure_in_syspath from salttesting.unit import skipIf ensure_in_syspath('../')
log = logging.getLogger(__name__)
ax0 = fig.add_subplot(nrows, ncols, 1, **subplot_kw)
for code in [129, 500, 2 ** 8 - 1, 2 ** 16 - 1]:
freq, ax_freq = _get_freq(ax, series)
from __future__ import absolute_import import os.path
enable_sigusr1_handler()
charged_amt = Decimal(params['ccAuthReply_amount'])
import jinja2 import jinja2.exceptions import salt.ext.six as six
response_dict = json.loads(response.read())
METRIC_UNDEFINED_BINARY_MULTICLASS = set(METRIC_UNDEFINED_BINARY).union( set(METRIC_UNDEFINED_MULTICLASS))
if hasattr(self, 'usesTime') and self.usesTime(): record.asctime = self.formatTime(record, self.datefmt)
self.hash_functions_ = [] self.trees_ = [] self.original_indices_ = []
precompute = 'auto' Xy = None
self.assertIsNot(field1, ModelChoiceForm.base_fields['category']) self.assertIs(field1.widget.choices.field, field1)
handler = SysLogHandler(**syslog_opts)
typs = get_dtype_kinds(to_concat) if len(typs) != 1:
self.refit()
manager = getattr(self.model, kwargs.pop('manager')) manager_class = create_reverse_many_to_one_manager(manager.__class__, rel) return manager_class(self.instance)
class TestObject:
asset_key = course.id.make_asset_key('asset', course.course_image) content_store.find(asset_key)
if len(ret) == 1 and not pkg_glob: try: return next(six.itervalues(ret)) except StopIteration: return '' return ret
cleaned_files = [] with contextlib.closing(zipfile.ZipFile(zip_file, "r")) as zfile: files = zfile.namelist()
self.assert_enrollment_status()
return u"{} : {}".format(self.course_id.to_deprecated_string(), self.annotation)
self._ptr = ds_input
import integration import salt.utils
from __future__ import unicode_literals
self.assertEqual(len(mail.outbox), 1)
import yaml import logging
view_html = proctoring_service.get_student_view( user_id=user_id, course_id=course_id, content_id=content_id, context=context, user_role=user_role_in_course )
course_key = self.make_course_key(org, course, run) if course_key in self.mappings and self.mappings[course_key].has_course(course_key): raise DuplicateCourseError(course_key, course_key)
raise TypeError('Cannot cast datetime64 to %s' % dtype)
self.course_outline.change_problem_release_date()
s = Series(list('abcdef'))
pass
self.assertRaises(KeyError, lambda: self.df2.loc[['a', 'd']])
with self.assertNumQueries(6): override_field_for_ccx(self.ccx, chapter, 'start', ccx_start)
logger.warning("Download was incomplete, downloading again.") os.remove(archive_path)
import salt.utils
resp = self.client.put( '/shoppingcart/payment_fake', data="success", content_type='text/plain' ) self.assertEqual(resp.status_code, 200)
super(CookieSessionTests, self).test_actual_expiry()
if hash(np.int64(-1)) != -2: raise nose.SkipTest("skipping because of windows hash on Python" " 3.2.2")
resp = self.create_xblock(parent_usage_key=chap_usage_key, category='sequential') self.seq_usage_key = self.response_usage_key(resp) self.seq_update_url = reverse_usage_url("xblock_handler", self.seq_usage_key)
from __future__ import absolute_import, print_function import os import re import time import logging try: import msgpack HAS_MSGPACK = True except ImportError: HAS_MSGPACK = False
except ProcessingError as err: log.warning("Module encountered an error while processing AJAX call", exc_info=True) return JsonResponse({'success': err.args[0]}, status=200)
inner_img = inner_img.reshape(len(output), -1) end_idx = start_idx + inner_img.shape[1] output[:, start_idx: end_idx] = inner_img
return self._cds.local_modules[usage_id].scope_ids.def_id
loss_l = self.loss.lower()
self.column_sql(model, field) for sql in self.geometry_sql: self.execute(sql) self.geometry_sql = []
data_source = DataSource(data_source)
EDXNOTES_STUB_URL = os.environ.get('edxnotes_url', 'http://localhost:8042')
raise ValueError( 'Second argument should be a filename, %s (type %s) was given' % (filename, type(filename)) )
ranks0 = self.frame.rank(na_option='bottom') ranks1 = self.frame.rank(1, na_option='bottom')
result = f.clean('21.12.2010 13:30') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
else:
course = modulestore().get_course(self.course.id) self.assertNotIn("notes", course.advanced_modules)
memb = ax.asfreq(self.freq, how=self.convention)
res = df.iloc[[1, 3], lambda x: 0] tm.assert_series_equal(res, df.iloc[[1, 3], 0])
out_array[:, :, i] = tile_raster_images( X[i], img_shape, tile_shape, tile_spacing, scale_rows_to_unit_interval, output_pixel_vals)
b = clf.support_vectors_[0] yy_down = a * xx + (b[1] - a * b[0]) b = clf.support_vectors_[-1] yy_up = a * xx + (b[1] - a * b[0])
logging.captureWarnings(True)
with tm.assertRaisesRegexp(TypeError, 'not enough/duplicate arguments'): self.panel.transpose('minor', maj='major', minor='items')
from __future__ import unicode_literals
with six.assertRaisesRegex(self, TypeError, "Variable must be a string or number, got <(class|type) 'dict'>"): Variable({})
return [XBlock.tags, XBlock.name]
from __future__ import absolute_import import logging import os import shutil import tempfile from contextlib import contextmanager
self.wait_for_ajax()
super(ViewsExceptionTestCase, self).setUp()
ofile.writelines(lines)
from pandas import __version__ from distutils.version import StrictVersion try: StrictVersion(__version__) raise_warnings = 'release' except ValueError: raise_warnings = 'develop'
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
result = idx / 1 expected = idx if PY3: expected = expected.astype('float64') tm.assert_index_equal(result, expected)
result = s.xs(0, level=0) expected = Series([1], index=[0]) assert_series_equal(result, expected)
from __future__ import absolute_import
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self._check_box_return_type(result, 'dict')
self.resid = np.array(v0, copy=True) info = 1
if request.status_code == 204: return True
self.assertEqual('DJANGO_LIVE_TEST_SERVER_ADDRESS' in os.environ, address_predefined) self.assertEqual(os.environ.get('DJANGO_LIVE_TEST_SERVER_ADDRESS'), old_address)
users_state_after_post = self._post_words( ['word1', 'word2', 'word3'])
('BACKGROUND', (1, 4), (1, 4), '#EEEEEE'),
elif isinstance(data, (np.ndarray, Index, ABCSeries)):
block = modulestore().get_item(locator) pre_def_id = block.definition_locator.definition_id pre_version_guid = block.location.version_guid
from salt.ext.six.moves import range from salt.ext.six.moves import zip from salt.ext.six.moves import map from stat import S_IMODE
if isinstance(slicer, compat.string_types): import pandas try: slicer = getattr(pandas, slicer) except: raise Exception("cannot create this slicer [%s]" % slicer)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
fit_params = fit_params if fit_params is not None else {} fit_params = dict([(k, _index_param_value(X, v, train)) for k, v in fit_params.items()])
dummy_mat = dummy_mat[:, 1:] dummy_cols = dummy_cols[1:]
ide_spec = _add_new_ide_controller_helper(ide_controller_label, None, bus_number) device_specs.append(ide_spec) bus_number += 1
if not already_paid: url = reverse('verify_student_upgrade_and_verify', kwargs=course_kwargs)
result = f.clean('12.21.2010') self.assertEqual(result, date(2010, 12, 21))
self.provider = Registry.get(provider_id) if not self.provider: raise Http404
import logging
save_course_update_items(location, course_updates, course_update_items, user) if "status" in course_update_dict: del course_update_dict["status"] return course_update_dict
time.sleep(0.2)
orig = RangeIndex(10) orig.name = 'original'
NOVACLIENT_MINVER = '2.6.1'
from salt.states import mac_assistive as assistive
self.table = self.table.tometadata(self.pd_sql.meta) self.table.create()
elif line[0].isspace(): sline = line.split()
obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')
if 0 != len(new_file): if not new_file[-1].endswith('\n'): new_file[-1] += '\n' new_file.append(not_found_content + '\n')
import salt.utils try: import wmi except ImportError: pass
ts = self.ts[::2] self.assertRaises(Exception, ts.reindex, self.ts.index, method='foo')
age_sum = distinct_authors.aggregate(Sum('age')) self.assertEqual(age_sum['age__sum'], 103)
for child in xblock.get_children():
nonContigFrame = self.frame.reindex(self.ts1.index[::2])
from __future__ import absolute_import, with_statement import copy import os import sys import time import errno import types import signal import logging import threading import contextlib import subprocess import multiprocessing import multiprocessing.util
output_filename = course_key.to_deprecated_string().replace('/', '-') + ".csv"
self.assertTrue(self.store.has_item(course.id.make_usage_key('html', 'multi_parent_html')))
concat(DataFrame(np.random.rand(5, 5)) for _ in range(3))
for k, v in result_json.items(): if isinstance(v, list): result_json[k] += next_page_results[k]
CourseEnrollment.enroll(self.user, self.course_key, mode="verified")
from __future__ import absolute_import import os import sys from random import randint import grp
preferences_api.set_user_preference(user, LANGUAGE_KEY, get_language())
import salt.utils
logreg.fit(X, Y)
assert_raises(ValueError, calibration_curve, [1.1], [-0.1], normalize=False)
assert_raises(ValueError, svm.SVC(C=-1).fit, X, Y)
x = np.arange(3) assert_array_equal(x[:, np.newaxis], cartesian((x,)))
for name, penalty in (('unreg', 1), ('reg', 0.05)):
import os import re import glob import hashlib import tempfile import logging
quotechar = None
if isinstance(key, (int, np.integer)): pass
return (len(active_groups) + len(inactive_groups) == len(container.xblocks) - 1, len(active_groups))
test = read_csv(path, index_col=0)
data = self.frame.unstack()
for i, file_path in enumerate(file_paths): if i % 1000 == 0: logger.info("Loading face #%05d / %05d", i + 1, n_faces)
FEATURES['EMBARGO'] = True
solution_element = rendered_html.find("div") self.assertEqual(solution_element.text, 'Input Template Render')
if __grains__['kernelrelease'] == "5.9": return (False, 'The smf execution module failed to load: SMF not available on Solaris 9.') return __virtualname__
CertificateGenerationConfiguration.objects.create(enabled=True)
if version_num == old.get(pkg_name) \ or (pkg_name in old and old[pkg_name] == 'Not Found'): ret[pkg_name] = {'current': version_num} continue
self.courseware_page.visit() self.courseware_page.wait_for_page()
c1 = Categorical(["a", "b", "c", "a"]) self.assertFalse(c1.ordered)
import salt.ext.six as six
DarkLangConfig( released_languages=('es-419, es, es-es'), changed_by=self.user, enabled=True ).save() self.assertAcceptEquals( expected, self.process_request(accept=accept_header) )
store = HDFStore(path_or_buf, **kwargs) auto_close = True
config = os.path.splitext(os.path.basename(path))[0]
__proxyenabled__ = ['*']
if not hasattr(self, 'chapter'): self.chapter = ItemFactory.create( parent_location=self.course.location, category='chapter' )
MAX_IDEAL_BATCH_DURATION = 2
return {'cond_module': cond_descriptor, 'source_module': source_descriptor, 'child_module': child_descriptor}
set_pw_cmd = "shadow.set_password {0} '{1}'".format( self.userA, password if salt.utils.is_darwin() else hashed_pwd ) self.run_call(set_pw_cmd)
self.login() response = self.client.get('/logout/') self.assertIn('site', response.context)
import salt.ext.six as six
with option_context('display.max_rows', 3, 'display.max_columns', 3):
from __future__ import unicode_literals
pass
uniques = Index(uniques).values
votes = np.zeros((n_samples, n_classes))
result = sparse.loc[sparse % 2 == 1] exp = orig.loc[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
self.choice = None
DATE_INPUT_FORMATS = [
return self.tag_function
if self.current_language() != code: self.select_language(code)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
result = ExampleCertificateSet.latest_status(self.COURSE_KEY) self.assertIs(result, None)
v_1 = DictVectorizer().fit([d_sorted]) v_2 = DictVectorizer().fit([d_shuffled])
try: import boto.ec2 import boto.utils import boto.exception HAS_BOTO = True except ImportError: HAS_BOTO = False
s = Series([1, 2, 3])
else: mpriv = self.opts['pki_dir'] + '/' + 'master_sign.pem' if os.path.isfile(mpriv): self.privkey = mpriv
from __future__ import absolute_import
print("Compute structured hierarchical clustering...") st = time.time()
return super(AdaBoostRegressor, self).fit(X, y, sample_weight)
for item in _CREATE_OPTIONS_REQUIRED[set_type]: if item not in kwargs: return 'Error: {0} is a required argument'.format(item)
async_pub = self._gen_async_pub() ret = self._proc_function(self.opts['fun'], low, user, async_pub['tag'], async_pub['jid'],
self.course_fixture = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
store = HDFStore('bugzilla.h5', mode='w')
assets, count = content_store.get_all_content_for_course(course.id) self.assertEqual(count, 2)
return Response(status=503, headers={'Retry-After': '120'})
from __future__ import absolute_import import logging import os import re
fit_params = fit_params if fit_params is not None else {} fit_params = dict([(k, _index_param_value(X, v, train)) for k, v in fit_params.items()])
s = 20
mask = ((y == 0) & ~np.isnan(result)).ravel()
from __future__ import absolute_import
new_values = self.values.take_nd(indexer, fill_value=fill_value)
from django.contrib.contenttypes.fields import ( GenericForeignKey, GenericRelation, ) from django.contrib.contenttypes.models import ContentType from django.db import models from django.utils.encoding import python_2_unicode_compatible
from salt.modules import oracle import os
from __future__ import absolute_import import os import hashlib
import salt.utils
self.assertQuerysetEqual(Reporter.objects.all(), [])
self.validate_xblock_info_consistency(xblock_info, has_child_info=True, has_ancestor_info=True)
self.assertEqual(seed, module.seed)
initial_handlers_count = len(logging.root.handlers)
self.user.is_staff = True
_create_namespace(name, apiserver_url) ret['changes'] = name ret['comment'] = "Namespace {0} created".format(name)
from __future__ import absolute_import
import matplotlib.pyplot as plt
'CERTIFICATES_INSTRUCTOR_GENERATION': False,
path = preprocess(path) data_x, data_y = self.make_data(which_set, path)
values = Series([u(' aa '), u(' bb \n'), NA, u('cc ')])
if name in get_all(): raise CommandExecutionError('Service Already Exists: {0}'.format(name))
remove_review_policy(exam_id=exam_id)
self.fmtlist = ["%td" if x.startswith("%td") else x for x in self.fmtlist]
from __future__ import absolute_import
text = f.widget.format_value(result) self.assertEqual(text, '21.12.2010 13:30:05')
import collections
sparse_results = sparse_classifier.staged_predict(X_test_sparse) dense_results = dense_classifier.staged_predict(X_test) for sprase_res, dense_res in zip(sparse_results, dense_results): assert_array_equal(sprase_res, dense_res)
try: WindowsError except NameError: WindowsError = None
bdt = AdaBoostClassifier(DecisionTreeClassifier(max_depth=1), algorithm="SAMME", n_estimators=200)
trainer = yaml_parse.load(test_yaml_layer2 % {'layer0_filename': layer0_filename, 'layer1_filename': layer1_filename, 'layer2_filename': layer2_filename}) trainer.main_loop()
self.store.publish(problem_location, self.user_id)
else:
redirect_url = reverse( 'embargo_blocked_message', kwargs={ 'access_point': access_point, 'message_key': 'default' } ) yield redirect_url
result = symmath_check(expected_str, expected_str, dynamath=[dynamath]) self.assertTrue('ok' in result and result['ok'])
for t in df.itertuples(index=False): str(t)
request = self.request_factory.get('/', {'books_contributed__isnull': 'True'}) changelist = self.get_changelist(request, User, modeladmin)
mgr = BlockManager([block], [items] + levels) obj = self.obj_type(mgr)
pca.fit(X_digits)
if self.orientation == 'vertical': self.sharex = False else: self.sharey = False
name = name[:-1] if p.count(b"'") == 2: has_encoding = True
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
import salt.transport.ipc return salt.transport.ipc.IPCMessageClient(opts, **kwargs)
self.check_test = boolean_check if check_test is None else check_test
uid = kwargs.pop('uid', -1) gid = kwargs.pop('gid', -1)
self.mock_programs_api() self.mock_credentials_api(self.student, data={"results": []}, reset_url=False)
if point and point.isdigit(): point = int(point)
record = { 'handle': handle, 'description': dmi_raw.pop(0).strip(), 'type': int(htype) }
import salt.fileserver import salt.loader import salt.utils.minions import salt.daemons.masterapi
EmptyPromise( lambda: unit.is_browser_on_page(), "loaded page {!r}".format(unit), timeout=30 ).fulfill()
self.assertIn( ' Failed to error service', self.run_function('service.launchctl', ['error']))
tot_bytes = win32api.GlobalMemoryStatusEx()['TotalPhys'] grains['mem_total'] = int(tot_bytes / (1024 ** 2))
outliers_sw = sample_weight[outliers_mask] n_sw_outliers = np.sum(outliers_sw) outlier_loss = (2. * epsilon * np.sum(outliers_sw * outliers) - sigma * n_sw_outliers * epsilon ** 2)
X = rng.randn(100, 2)
copy = self.mixed_frame.copy() self.assertIsNot(copy._data, self.mixed_frame._data)
problem_location = re.sub(r'[:/]', '_', problem_location) csv_name = 'student_state_from_{}'.format(problem_location) upload_csv_to_report_store(rows, csv_name, course_id, start_date)
with self._mock_geoip(ip_country): result = embargo_api.check_course_access(self.course.id, user=self.user, ip_address='0.0.0.0')
if not add_noise: assert_almost_equal(np.dot(s1_, s1) / n_samples, 1, decimal=3) assert_almost_equal(np.dot(s2_, s2) / n_samples, 1, decimal=3)
self.assertEqual(actual, expected)
current_umask = os.umask(0o027) verify_files([logfile], self.config['user']) os.umask(current_umask)
assert_frame_equal(df, original)
if len(comps) == 1: op = self.translate_In(ops[0]) binop = ast.BinOp(op=op, left=node.left, right=comps[0]) return self.visit(binop)
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
import salt.ext.six as six
log = logging.getLogger(__file__)
for idx in [self.strIndex, self.intIndex, self.floatIndex]: empty_idx = idx.__class__([])
comps = name.split('}') name = comps[1]
import salt.ext.six as six
sortorder = None
ret = self.run_function('shadow.info', [NO_USER]) self.assertEqual(ret['name'], '')
for mode_slug in course_modes: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode_slug, mode_display_name=mode_slug, )
searched_perms = list() ctypes = set() for klass in app_config.get_models(): ctype = ContentType.objects.db_manager(using).get_for_model(klass)
return False
assert_frame_equal(df1, df1_copy) assert_frame_equal(df2, df2_copy)
request.META = {'HTTP_HOST': 'example.net'} with self.assertRaises(ObjectDoesNotExist): get_current_site(request)
if is_caller_html_or_text is False: self.results.violations.append(ExpressionRuleViolation( Rules.python_requires_html_or_text, self.node_to_expression(node.func) ))
city_label = _(u"City")
from __future__ import absolute_import import time
comps = fun.split('.') if len(comps) < 2: __context__['retcode'] = 1 return 'Invalid function passed'
other = Int64Index(np.arange(25, 14, -1))
idx1 = TimedeltaIndex(['1 days', '2 days', '3 days']) self.assertTrue(idx1.is_monotonic)
import salt.ext.six as six HAS_SVN = False try: import pysvn HAS_SVN = True CLIENT = pysvn.Client() except ImportError: pass
qs = qs.filter(**remaining_lookup_params)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON)
ind2 = self.index.set_levels(new_levels[0], level=0) assert_matching(ind2.levels, [new_levels[0], levels[1]]) assert_matching(self.index.levels, levels)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.assertListEqual(json.loads(response.content), expected)
for app in ADDL_INSTALLED_APPS: INSTALLED_APPS += (app,)
(deleted_objects, model_count, perms_needed, protected) = get_deleted_objects( [obj], opts, request.user, self.admin_site, using)
self._setup_mode_and_enrollment(self.PAST, "verified")
assert_array_equal(votes[0, :], 1) assert_array_equal(np.argmax(votes[1:], axis=1), ovo_prediction[1:]) assert_equal(ovo_prediction[0], normalized_confidences[0].argmax())
from __future__ import absolute_import import os import shutil
response = middleware.process_response(request, response)
pass
time.sleep(0.5)
from __future__ import absolute_import
result = first.difference([]) self.assertTrue(tm.equalContents(result, first)) self.assertEqual(result.name, first.name)
if i >= 1 and current_ndim == 3 and obj.ndim == 2: obj = obj.T
self.navigate_to_video()
if response.has_header('Content-Encoding'): return response
@setup({'basic-syntax13': "{{ va>r }}"}) def test_basic_syntax13(self): with self.assertRaises(TemplateSyntaxError): self.engine.get_template('basic-syntax13')
silhouette_avg = silhouette_score(X, cluster_labels) print("For n_clusters =", n_clusters, "The average silhouette_score is :", silhouette_avg)
params = get_required_parameters(request.POST) if not params: return HttpResponseBadRequest() params.update(get_optional_parameters(request.POST))
if _np_version_under1p9: raise nose.SkipTest("Numpy version is under 1.9")
result = transf(result)
self.assertFalse(self.video.is_spinner_shown)
if hasattr(error, 'order'): _record_payment_info(params, error.order) else: log.info(json.dumps(params)) return { 'success': False,
clf = svm.SVC(kernel=my_kernel) clf.fit(X, Y)
pillar_root = os.path.abspath(self.options.pillar_root) self.config['pillar_roots'] = {'base': _expand_glob_path([pillar_root])}
MEDIA_URL = ''
with tm.assertRaisesRegexp(TypeError, 'list of lists-like'): self.index.set_levels(levels[0])
comps[1] = '.'.join(comps[1:len(comps)])
MODULE_DOCS = __doc__
problem_item = self.store.create_item(self.user_id, test_course_key, 'problem', 'Problem_Item') self.assertFalse(self.store.has_published_version(problem_item))
SERVICE_VARIANT = os.environ.get('SERVICE_VARIANT', None)
create_account(self.USERNAME, self.USERNAME, self.EMAIL)
cherrypy._cpreqbody.process_urlencoded(entity) cherrypy.serving.request.unserialized_data = entity.params cherrypy.serving.request.raw_body = ''
X = sp.csr_matrix(X, dtype=np.float64, copy=copy)
from salt.ext.six import string_types, text_type from salt.ext.six.moves import range from salt.ext.six.moves.urllib.request import urlopen as _urlopen
self.skipTest('This test fails when using tests/runtests.py. salt-runtests will be available soon.')
alias, driver = driver.split(':')
row = next(reader)
for n in [4, 4000]:
return "'%s'::raster" % self.ewkb
content = list(lib.to_object_array(data).T)
self.assertDeserializeEqual(False, 'false') self.assertDeserializeEqual(True, 'true')
if task.State == TASK_STATE_RUNNING: return 'Task already running'
assert_greater(clf.score(X_test, y_test), 0.99)
rng = np.random.RandomState(seed) X = rng.randn(10, 10) Xcsr = csr_matrix(X)
self.county_helper()
next_url = request.GET.get('next') if next_url: return redirect(next_url) else: return redirect('/course/')
assertIsInstance(left, Index, '[index] ') assertIsInstance(right, Index, '[index] ')
if not url: return url
return module.seed
return self.data.tzinfo.tzname(self.data) or ""
value.srid = self.srid
with self.assertRaises(NotImplementedError): self.client.get(self.url)
from __future__ import unicode_literals
expected = np.array([1., 10.])
layer_to_state = model.make_layer_to_state(m) vis_sample = layer_to_state[model.visible_layer]
cs, sn, rho = _sym_ortho(rhobar1, beta)
url('(.+)/security/$', empty_view, name='security'),
sitemap_url = reverse('django.contrib.sitemaps.views.sitemap')
class MediaForm(ModelForm): class Meta: model = Media fields = '__all__'
return JsonError(status=404)
import logging logging.basicConfig(filename=TEST_ROOT / "log" / "lms_acceptance.log", level=logging.ERROR)
manager._optin_private_method() with self.assertRaises(AttributeError): manager.optout_public_method()
from __future__ import absolute_import, print_function import socket from struct import unpack import pcapy import sys
if from_config is not None: __context__[contextkey] = from_config return from_config
self.answer_problem(correct=True) self.problem_page.click_check() self.wait_for_status('correct')
if kwargs: for key, value in kwargs.iteritems(): setattr(state_object, key, value)
from __future__ import absolute_import import socket import os.path
ex_sls.add(exc)
assert_equals( '"' + mock_static_content.get_canonicalized_asset_path.return_value + '"', replace_static_urls(STATIC_SOURCE, DATA_DIRECTORY, course_id=COURSE_KEY) )
base_json_obj['resultScore'] = round(self.module_score, 2) base_json_obj['comment'] = self.score_comment return Response(json.dumps(base_json_obj), content_type=LTI_2_0_JSON_CONTENT_TYPE)
for course_key, store_name in self.mappings.iteritems(): if store_name == key: self.mappings[course_key] = store self.modulestores.append(store)
class ShortCategory(forms.ModelForm): name = forms.CharField(max_length=5) slug = forms.CharField(max_length=5) url = forms.CharField(max_length=3)
from __future__ import absolute_import import os import random import string
REQUIRED_PARAMETERS = [ 'roles', 'context_id', 'oauth_version', 'oauth_consumer_key', 'oauth_signature', 'oauth_signature_method', 'oauth_timestamp', 'oauth_nonce', 'user_id' ]
self.assertContains(response, 'Select a valid choice.', 0)
'ping_interval': int,
from __future__ import print_function from __future__ import absolute_import import os import sys import errno import logging import traceback from salt.ext.six import string_types
for pn_key, pn_val in run_out['virgo-dummy'].items(): if pn_key == 'source_rpm': continue self.assertEqual(installed['virgo-dummy'][pn_key], pn_val)
value = answers[name] defaults = {"field_value": value} if course_key: defaults['course_key'] = course_key
EMAIL_MIN_LENGTH = 3 EMAIL_MAX_LENGTH = 254
url(r'^api/enrollment/v1/', include('enrollment.urls')),
if directory is not None: cmd.extend(['--working-dir', directory])
response = self.fetch('/', method='POST', body=json.dumps(valid_lowstate), headers={'Content-Type': self.content_type_map['json']})
_maybe_remove(store, 'wp') store.put('wp2', wp) store.select('wp2')
from __future__ import absolute_import import logging import inspect
org = models.CharField(max_length=64, db_index=True, blank=True) course_id = CourseKeyField(max_length=255, db_index=True, blank=True) role = models.CharField(max_length=64, db_index=True)
name = _sdecode(name) snap_name = _sdecode(snap_name)
'recon_default': float,
self.chapter1 = ItemFactory.create( parent_location=self.course.location, category='chapter', display_name='untitled chapter 1' )
choice_element.append(inp)
action_name = ugettext_noop('reset') update_fcn = partial(reset_attempts_module_state, xmodule_instance_args) visit_fcn = partial(perform_module_state_update, update_fcn, None) return run_main_task(entry_id, visit_fcn, action_name)
enrollment_message = _create_recent_enrollment_message( course_enrollments, course_modes_by_course )
logging.getLogger().setLevel(getattr(logging, FLAGS.logging_level))
if coefs.ndim > 1: ranks = np.argsort(safe_sqr(coefs).sum(axis=0)) else: ranks = np.argsort(safe_sqr(coefs))
self.assertTrue('Activate Course Enrollment' in resp.content)
self.verify_show_answer_present(True)
import logging import codecs try: import sqlite3 HAS_SQLITE3 = True except ImportError: HAS_SQLITE3 = False
coffee_file_path = os.path.dirname(__file__) + "/test_files/js/*.coffee" os.system("node_modules/.bin/coffee -c %s" % (coffee_file_path))
logoption = 0 for opt in _options['options']: logoption = logoption | getattr(syslog, opt)
s = Series(list('abc'), dtype='category') s2 = Series(list('abd'), dtype='category')
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self._print('Got {} rows.\n'.format(total_rows))
context['accomplishment_copy_more_about'] = _("More about {fullname}'s accomplishment").format( fullname=user_fullname )
zmq_version()
result = df.assign(C=[4, 2.5, 2]) assert_frame_equal(result, expected) assert_frame_equal(df, original)
path = []
_prefixes = local()
path = url.path if not path.startswith('/'): path = urljoin(response.request['PATH_INFO'], path)
for i in cfg.versionfile_source.split('/'): root = os.path.dirname(root)
from django.contrib.auth.models import User from django.db import models from django.utils.encoding import python_2_unicode_compatible
if strategy == "median": cols_to_keep = ~np.isnan(X_true).any(axis=0) else: cols_to_keep = ~np.isnan(X_true).all(axis=0)
clf = GradientBoostingClassifier(loss='exponential', n_estimators=100, random_state=1)
FEATURES['ENABLE_EDXNOTES'] = True
email_msg = EmailMultiAlternatives( course_email.subject, plaintext_msg, from_addr, [email], connection=connection ) email_msg.attach_alternative(html_msg, 'text/html')
if process_manager._process_map.keys(): process_manager.send_signal_to_processes(signal.SIGILL) process_manager.stop_restarting() process_manager.kill_children()
result = Series([np.nan]).astype('M8[ns]') expected = Series([NaT]) assert_series_equal(result, expected)
assert_greater_equal(call_count, minimum_calls)
@classmethod def open(cls, full_path, cache): return GeoIP(full_path, cache)
test_dir = path(__file__).abspath().dirname().dirname().dirname() file_path = test_dir + '/data/uploads/' + file_name
dive.save() self.assertEqual(review1._state.db, 'default') self.assertEqual(dive._state.db, 'default')
self.assertLess(ordered_sigs.index('s3'), ordered_sigs.index('s1'))
course_programs = _get_course_programs(user, [enrollment.course_id for enrollment in course_enrollments])
self.prefix = os.path.join(self.RESOURCE_PREFIX, module)
import logging
n_classes = 4 n_samples = 100
DECIMAL_SEPARATOR = '.' THOUSAND_SEPARATOR = ','
response = self.client.get(collector_url) self.assertContains(response, 'name="doohickey_set-0-code"')
for state in READY_STATES: running_tasks = running_tasks.exclude(task_state=state) return len(running_tasks) > 0
metric_str = metric if name in METRICS_WITH_POS_LABEL: metric_str = partial(metric_str, pos_label=pos_label_str)
minion.setdefault('grains', {}).update( salt.config.get_cloud_config_value( 'grains', vm_, opts, default={}, search_global=True ) ) return minion
login = self.client.login(username='testclient', password='password') self.assertTrue(login, 'Could not log in')
with self.assertRaises(InvalidSessionKey): self.backend()._key_to_file("a/b/c")
pred = mb_k_means.predict(mb_k_means.cluster_centers_) assert_array_equal(pred, np.arange(n_clusters))
__virtualname__ = 'task'
course_details.license = getattr(course_descriptor, "license", "all-rights-reserved")
str(excluded_books.query)
syslog_opts['address'] = os.sep.join( parsed_log_path.path.split(os.sep)[:-1] )
self.log_ais_w = numpy.zeros(n_runs, dtype=config.floatX)
raise NotImplementedError('partial sum')
self.assertNotEqual(t(3), t(2)) self.assertNotEqual(t(3), t(-3))
self.assertRaises(ValueError, ct, '- 1days, 00')
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
from __future__ import absolute_import
assert_frame_equal(p.ix[item], p[item]) assert_frame_equal(p.ix[item, :], p[item]) assert_frame_equal(p.ix[item, :, :], p[item])
g = GaussianMixture(n_components=n_components, n_init=1, max_iter=2, reg_covar=0, random_state=random_state, warm_start=False) h = GaussianMixture(n_components=n_components, n_init=1, max_iter=1, reg_covar=0, random_state=random_state, warm_start=True)
node = _get_node(instance_id=vm_['instance_id']) ret.update(node)
binner = labels = DatetimeIndex(freq=self.freq, start=first, end=last, tz=tz, name=ax.name)
LETTUCE_SERVER_PORT = 8003 XQUEUE_PORT = 8040 YOUTUBE_PORT = 8031 LTI_PORT = 8765 VIDEO_SOURCE_PORT = 8777
self.assertEqual(d1, d2) self.assertNotEqual(d1.keys(), d2.keys())
monitoring_train = DenseDesignMatrix(X=X) monitoring_test = DenseDesignMatrix(X=Y)
self.suffix_map = {}
_PKG_TARGETS_DOT = { 'RedHat': {'5': 'python-migrate0.5', '6': 'tomcat6-el-2.1-api', '7': 'tomcat-el-2.2-api'} }
self.assertEqual(google_provider.id, google_state.provider.id) self.assertEqual(self.user, google_state.user) self.assertEqual(user_social_auth_google.id, google_state.association_id)
generic_relation_abstract = GenericRelation(Relation)
return object.__repr__(self)
import salt.ext.six as six
rbmA_params = [numpy.asarray(q, dtype=config.floatX) for q in rbmA_params] rbmB_params = [numpy.asarray(q, dtype=config.floatX) for q in rbmB_params]
properties = properties.split(',')
return self.replace('<', '<<').replace('>', '>>')
if 'order' in signature(np.copy).parameters: def safe_copy(X): return np.copy(X, order='K') else: safe_copy = np.copy
try: lti_consumer = LtiConsumer.get_or_supplement( params.get('tool_consumer_instance_guid', None), params['oauth_consumer_key'] ) except LtiConsumer.DoesNotExist: return HttpResponseForbidden()
self.assertNotEqual(list(a.question.get_answer_order()), id_list)
self.assertEqual(sql_for_table(Article), sql_for_table(ArticleRef))
if self.algorithm in _STOCHASTIC_ALGOS: self._fit_stochastic(X, y, activations, deltas, coef_grads, intercept_grads, layer_units, incremental)
exam_review_policy = get_review_policy_by_exam_id(exam['id']) self.assertEqual(exam_review_policy['review_policy'], sequence.exam_review_rules)
Membership.objects.create( membership_country_id=self.soviet_union.id, person_id=self.george.id, group_id=self.cia.id, date_joined=timemark + timedelta)
with salt.utils.fopen(path_test, 'r') as fp_test_: self.assertTrue((sum(1 for _ in fp_test_) == 1))
with check_mongo_calls(num_finds.pop(0), num_sends): path = path_to_location(self.store, location) self.assertEqual(path, expected)
self.certificates_section.click_generate_certificate_exceptions_button() self.certificates_section.wait_for_ajax()
result = f.clean('13:30:05') self.assertEqual(result, time(13, 30, 5))
from salt.exceptions import SaltInvocationError import salt.utils
X = X_2d[:100, :] n = X.shape[0]
course_location = locator.CourseLocator('Org1', 'Course1', 'Run1') self.course, self.enrollment = self._create_course_and_enrollment(course_location)
if photo_verifications: return photo_verifications[0].expiration_datetime.strftime(date_format)
time.sleep(10)
from salt.modules import ipset
self.assertRaises(RuntimeError, utils.kwargs_warn_until, {}, [])
exc_info_on_loglevel=logging.DEBUG
data_train = fetch_20newsgroups(data_home=data_home, subset='train', categories=None, shuffle=True, random_state=12, remove=remove)
if h_len < len(dev_header): sys_header = dev_header[h_len:] dev_header = dev_header[0:h_len]
self.get_courseware_page() self.assertEqual(self.get_progress_detail(), u'2/2')
(self.gx, self.gy) = [int(x) - 15 for x in m.groups()]
op_instance = node.op op_type = type(op_instance)
if not GlobalStatusMessage.current().enabled: return None
from __future__ import absolute_import import logging
f = lambda x: x[:2]
is_movable = True
if 'enabled' not in schedule[job]: schedule[job]['enabled'] = True
apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
pass
if issue.get('pull_request'): continue issue_id = issue.get('id') if output == 'full': ret[issue_id] = issue else: ret[issue_id] = _format_issue(issue)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
return self._apply_1d(f, axis=axis)
'transport': str,
if bits[-2] != 'as': raise template.TemplateSyntaxError(syntax_message) context_name = bits[-1]
from __future__ import unicode_literals
terminal_width, terminal_height = get_terminal_size()
__func_alias__ = { 'true_': 'true', 'false_': 'false' }
self.assertRaises(AttributeError, getattr, store, 'd')
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.assertTrue(self._has_changes(published_xblock.location))
y = 0.5 * X.ravel()
import logging
from salt.exceptions import ( SaltCloudNotFound, SaltCloudException, SaltCloudSystemExit, SaltCloudConfigError )
new_values = algos.take_1d(self.get_values(), indexer) return self._constructor(new_values, index=new_index)
self.course = modulestore().get_course(self.course.id)
__virtualname__ = 'reclass'
self._regex = regex self._regex_dict = {}
text = "J'ai mang\xe9 du kangourou ce midi, c'\xe9tait pas tr\xeas bon." text_bytes = text.encode('utf-8')
urlpatterns += ( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name="404"), )
def f(): s.iloc[3.0] = 0 self.assertRaises(TypeError, f)
'file_buffer_size': int,
result = df.drop_duplicates('C') expected = df.iloc[[0, 1, 5, 6]] tm.assert_frame_equal(result, expected)
users = [UserFactory() for _ in range(3)] self._enroll_users(users, self.course.id)
apache: pkg: - installed - name: httpd service: - running - enable: True - name: httpd
binding_status = {'created': False}
from __future__ import absolute_import import os.path
from __future__ import absolute_import import logging
'ENABLE_CSMH_EXTENDED': False,
class Bunch(dict): def __getattr__(self, name): return self[name]
df = DataFrame(np.ones((4, 2)))
sorted_languages = sorted(languages.items(), key=itemgetter(1))
clf.sparsify() assert_array_equal(pred, clf.predict(iris.data)) sp_clf.sparsify() assert_array_equal(pred, sp_clf.predict(iris.data))
yob_label = _(u"Year of birth")
hashed_files = OrderedDict()
results[guid]['Categories'] = [] for category in update.Categories: results[guid]['Categories'].append(category.Name)
n_samples = 500
n_folds = 5 n_iter = 1000
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
self.assertIn( ccx_course_key, [access.course_id for access in all_courses] )
from __future__ import absolute_import import logging
time.sleep(1) if not os.path.isfile(dest): _unlock_cache(lk_fn) return False
salt '*' vsphere.vmotion_enable my.esxi.host root bad-password
#except:
diff = df.memory_usage(deep=True).sum() - sys.getsizeof(df) self.assertTrue(abs(diff) < 100)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) import os
names = extra_names + field_names + annotation_names
return self.sm_ols.fittedvalues
from __future__ import unicode_literals
results.append(benchmark(LinearSVC(loss='l2', penalty=penalty, dual=False, tol=1e-3)))
for __ in range(int(num_responses)): response_element = self.create_response_element(**kwargs)
all_assets, __ = content_store.get_all_content_for_course(course.id) self.assertGreater(len(all_assets), 0)
filtered = expected.filter(regex='^[0-9]+$') assert_frame_equal(filtered, expected)
self.assertTrue(element_has_text( page=course_outline_page, css_selector='.add-item a.button-new', text='New Unit' ))
from __future__ import unicode_literals
if path_cached: path_hash = hash_file(path) path_cached_hash = hash_file(path_cached)
ind2 = self.index.copy() inplace_return = ind2.set_levels(new_levels, inplace=True) self.assertIsNone(inplace_return) assert_matching(ind2.levels, new_levels)
EXCLUDE_ALL = '*'
clf = self.factory() assert_raises(ValueError, clf.fit, X2, Y2, coef_init=np.zeros((2, 2)))
from salttesting import skipIf, TestCase from salttesting.mock import ( MagicMock, NO_MOCK, NO_MOCK_REASON, patch )
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
proxied_model = opts.concrete_model
exp = pd.Series([9, 8], name='xxx', dtype=object) tm.assert_series_equal(p - s, exp) tm.assert_series_equal(s - p, -exp)
cm = confusion_matrix(y_true, y_pred, labels=[0, 1]) assert_array_equal(cm, [[19, 4], [4, 3]])
for fld_name in fld_names: self.assertEqual(source.field_values[fld_name], layer.get_fields(fld_name))
from salt.cloud import libcloudfuncs libcloudfuncs.check_libcloud_version()
if env_key in matches or fnmatch.filter(self.avail[env_key], inc_sls): resolved_envs = [env_key] else: resolved_envs = []
ret['comment'] = ('File {0} is not present and is not set for ' 'creation').format(name) return ret
if any(isnull(removals)): not_included = [x for x in not_included if notnull(x)] new_categories = [x for x in new_categories if notnull(x)]
ret['comment'] = out ret['result'] = False return ret
d = d.iloc[:min(max_rows, len(d))]
services = sorted(set(services))
from __future__ import unicode_literals
providers_config_path = _absolute_path(providers_config_path, config_dir)
self.top_words = self.top_dict( temp_all_words, self.num_top_words )
if res['stderr'].startswith('Successfully created VM'): return res['stderr'][24:]
if getattr(storage, 'prefix', None): prefixed_path = os.path.join(storage.prefix, path) else: prefixed_path = path
'SQUELCH_PII_IN_LOGS': False,
if array.size > 0: mode = stats.mode(array) most_frequent_value = mode[0][0] most_frequent_count = mode[1][0] else: most_frequent_value = 0 most_frequent_count = 0
place1.name = "Guido's All New House of Pasta" place1.save_base(raw=True)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'gogrid', vm_['profile'], vm_=vm_) is False: return False
'python_bin': None, 'user': 'sandbox',
signals.got_request_exception.send(sender=self.handler.__class__, request=request) response = self.handler.handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())
pieces["distance"] = int(mo.group(2))
if retcodes.count(0) < len(retcodes): sys.stderr.write('ERROR: Minions returned with non-zero exit code\n') sys.exit(11)
v = timedelta(seconds=1) result = to_timedelta(v, box=False) expected = np.timedelta64(timedelta(seconds=1)) self.assertEqual(result, expected)
if not _initial_defencoding: _initial_defencoding = sys.getdefaultencoding()
result = ser.copy() result.loc[sel] = 1 expected = pd.Series(1, index=index) assert_series_equal(result, expected)
log = logging.getLogger(__name__)
import salt.syspaths import salt.utils import salt.utils.event import salt.ext.six as six from salt.ext.six import string_types
return func(self.ptr, other.ptr)
import salt.cloud.libcloudfuncs as libcloud
test_invalid_token("AAAAAAAAAAAAAAAAAAAAACpyUxTGIrUjnpuUsNi7mAY=", "username")
if isinstance(devices, str): devices = devices.split(',')
state_run = self.run_function('state.sls', mods='requisites.onchanges_in_simple')
eps = 0.8 min_samples = 10 metric = 'euclidean' core_samples, labels = dbscan(X, metric=metric, eps=eps, min_samples=min_samples)
serialized_value = unicode(safe_cookie_data_1)
types = [(MockDataFrame, MockDataFrame)] try: from pandas import Series, DataFrame types.append((DataFrame, Series)) except ImportError: pass
for X, y in classification_datasets: X_train = X[:150] y_train = y[:150] X_test = X[150:]
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
self.assertFalse(form.is_valid())
creq_in = context.socket(zmq.REP) creq_in.setsockopt(zmq.LINGER, 100) creq_in.bind('ipc://' + self.cache_sock)
from __future__ import absolute_import
created_enrollments.append(data.create_course_enrollment( self.user.username, unicode(course.id), 'honor', True ))
assert key.user_id == self.user.id
import salt.ext.six as six
return False
exc_info_on_loglevel=logging.DEBUG
locked = self.is_content_locked(content) newrelic.agent.add_custom_parameter('contentserver.locked', locked)
self.assertEqual( get_object_or_404(Article.by_a_sir, title="Run away!"), article )
if X.flags.c_contiguous: return check_array(X.T, copy=False, order='F'), True else: return check_array(X, copy=False, order='F'), False
weight = np.ones(classes.shape[0], dtype=np.float64, order='C')
if X is not None: X = check_array(X, accept_sparse='csr') n_samples1 = X.shape[0] else: n_samples1 = self._fit_X.shape[0]
if d_yard in self.lane_stack.value.nameRemotes: self.lane_stack.value.transmit(msg, self.lane_stack.value.nameRemotes[d_yard].uid) return return
sparse = self.dense1.to_sparse(fill_value=0) sparse3 = self.dense3.to_sparse(fill_value=0)
if db['NAME'] == ":memory:": return None
from __future__ import unicode_literals
try:
assert_equal(iterations, expected_n_iter) if n_samples is not None: assert_equal(collected_test_samples, set(range(n_samples)))
from salt.pillar import consul_pillar
'error': _("Refresh the page and make an attempt before resetting."),
U, S, V = randomized_svd(X, n_components, random_state=random_state) W, H = np.zeros(U.shape), np.zeros(V.shape)
tsvd = TruncatedSVD(n_components=52, random_state=42) Xt = tsvd.fit_transform(X) Xinv = tsvd.inverse_transform(Xt) assert_array_almost_equal(Xinv, Xdense, decimal=1)
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.bio_book])
import salt.ext.six as six
class A(DataFrame):
valid_feats = ds[0][:2] for feat in valid_feats: istate = Interstate.objects.get(name=feat['Name'].value)
if n_iter > 0: ss = ((prev_alpha[0] - alpha_min) / (prev_alpha[0] - alpha[0])) coef[:] = prev_coef + ss * (coef - prev_coef) alpha[0] = alpha_min
assert isinstance(model.hidden_layers[-1], dbm.Softmax)
'clone']
key, val = str(''), chunk
funparts = cmd.get('fun', '').split('.')
import salt.ext.six as six
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.assertQuerysetEqual( self.jane.groups.all(), [] )
master, self.pub_channel = yield self.eval_master(opts=self.opts)
self._validate(is_numeric, batch)
self._assert_course_verification_status(VERIFY_STATUS_MISSED_DEADLINE)
'file_roots': dict,
unique_together = (('user', 'name',), )
cert_type=server
cummax_xs = self.tsframe.cummax(axis=1) self.assertEqual(np.shape(cummax_xs), np.shape(self.tsframe))
date = date.strftime('%Y-%m-%d %H:%M')
from __future__ import unicode_literals
high_reg_model = ElasticNet(alpha=final_alpha * 10).fit(X, y) assert_greater(low_reg_model.n_iter_, high_reg_model.n_iter_)
if token.contents != 'endif': raise TemplateSyntaxError('Malformed template tag at line {0}: "{1}"'.format(token.lineno, token.contents))
SplitTestTransformer.collect(block_structure)
if not relpath.startswith('../'): ret.add(os.path.join(repo['mountpoint'], relpath))
try: email = CourseEmail.create( course_id, request.user, targets, subject, message, template_name=template_name, from_addr=from_addr ) except ValueError as err: return HttpResponseBadRequest(repr(err))
documents.append({'order_id': 10, 'quantity': 5})
assert_frame_equal(p.ix[:, :, 'C'], p.minor_xs('C'))
log_msg = ( 'remove_credit_requirement_status was called with ' 'user_id={user_id}, course_key_or_id={course_key_or_id} ' 'req_namespace={req_namespace}, req_name={req_name}, '.format( user_id=user_id, course_key_or_id=course_key_or_id, req_namespace=req_namespace, req_name=req_name ) ) log.info(log_msg)
monitoring_dataset = DenseDesignMatrix(X=X)
module = ''
result = self.panel.reindex(major=self.panel.major_axis, copy=False) assert_panel_equal(result, self.panel) self.assertTrue(result is self.panel)
with super(ViewPermissionsTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
'API': 'https://www.youtube.com/iframe_api',
from __future__ import unicode_literals
if not api_url: self.api_url = getattr(settings, 'GOOGLE_MAPS_URL', GOOGLE_MAPS_URL) % self.version else: self.api_url = api_url
status = 'failed' reason = { 'current_date': now, 'deadline': deadline }
import salt.utils
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
ref_u1 = MultiPoint(p1, p2, p4, p5, p3, srid=4326) ref_u2 = MultiPoint(p2, p3, srid=4326)
key = signature.get_shared_secret_key("asu") sig = signature.signature({}, key) self.assertEqual(sig, "7d70a26b834d9881cc14466eceac8d39188fc5ef5ffad9ab281a8327c2c0d093")
COURSE_EMAIL_MESSAGE_BODY_TAG = '{{message_body}}'
self._load_data(which_set, context_len, data_mode)
response = self.client.put(self.path, json.dumps(expected), content_type=JSON_CONTENT_TYPE)
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
if block_key is None: block_key = BlockKey(block_data.block_type, LocalId())
for vdev in vdevs: if not os.path.isfile(vdev): ret[vdev] = 'failed' else: if vdev not in ret: ret[vdev] = 'created' return ret
assert_equal(set(SYMMETRIC_METRICS).union( NOT_SYMMETRIC_METRICS, THRESHOLDED_METRICS, METRIC_UNDEFINED_BINARY_MULTICLASS), set(ALL_METRICS))
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains )
unique_together = ('one', 'two')
'python_bin': None, 'user': 'sandbox',
df = mkdf(N, 3) df.columns = ['a', 'a', 'b'] _check_df(df, None)
log = salt.log.setup.logging.getLogger(__name__)
self.assertEqual(result['success'], 'correct')
from __future__ import absolute_import import logging import re import pprint import time
dbc = quote_identifier(dbc, for_grants=(table is '*'))
from __future__ import unicode_literals
adder['tail_text'] = elt.tail if elt.tail else '' components.append(adder)
assert len(tm.get_locales()) > 0
desc_score_indices = np.argsort(y_score, kind="mergesort")[::-1] y_score = y_score[desc_score_indices] y_true = y_true[desc_score_indices] if sample_weight is not None: weight = sample_weight[desc_score_indices] else: weight = 1.
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
idx = np.arange(X.shape[0]) np.random.seed(13) np.random.shuffle(idx) X = X[idx] y = y[idx]
MEDIA_ROOT = '/edx/var/edxapp/media/' MEDIA_URL = '/media/'
__virtualname__ = 'pkg'
resource['id'] = self.resource_id_second self.check_event_response_by_key('handle_vote', resource, 'newVotes', test_case['new_votes'])
'MODE_CREATION_FOR_TESTING': False,
df.astype(str)
import os import time import logging
resp = self.create_xblock(category='problem', boilerplate='nosuchboilerplate.yaml') self.assertEqual(resp.status_code, 200)
X, y = hastie_X, hastie_y ForestEstimator = FOREST_ESTIMATORS[name] clf = ForestEstimator(n_estimators=15, max_depth=3, warm_start=False, random_state=1, bootstrap=True, oob_score=True) clf.fit(X, y)
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
self.assertIn('a_custom', __grain__) self.assertEqual({'k1': 'v1', 'k2': 'v2'}, __grain__['a_custom'])
self.assertEqual(False, data["accomplishments_shared"])
if isinstance(relation, six.string_types): if "." not in relation: relation = "%s.%s" % (scope_model._meta.app_label, relation)
if 'target' not in kwargs: target = '*' else: target = kwargs['target'] del kwargs['target']
processor_reply_dump = models.TextField(blank=True)
x_p_nrm, y_p_nrm = norm(x_p), norm(y_p) x_n_nrm, y_n_nrm = norm(x_n), norm(y_n)
import sqlite3 create_sql_indexes = True
self.factory().fit(X, Y, coef_init=np.zeros((3,)))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
continue
class SomeModel(models.Model): somefield = models.IntegerField()
mixed = Series(['a_b', NA, 'asdf_cas_asdf', True, datetime.today(), 'foo', None, 1, 2.])
from __future__ import absolute_import import os import shutil import tempfile import uuid
for i in permissions.split(','): perm = i.strip()
time.sleep(60)
df_as = df
FEATURES['AUTOMATIC_AUTH_FOR_TESTING'] = True
changes[namespace] = { 'new': config, 'old': update_config, } return config
classes = np.unique(y) class_weight = compute_class_weight("balanced", classes, y) class_weight_dict = dict(zip(classes, class_weight)) return class_weight_dict
self.assertFalse(CourseMode.is_professional_mode(None))
yield prev_end, "E225 missing whitespace around operator" need_space = False
exp_fancy = df.iloc[[2]]
out, err = DETAILS['server'].sendline(cmd)
input_space = VectorSpace(1) class DummyDBM(object): def __init__(self): self.rng = rng layer.set_dbm(DummyDBM()) layer.set_input_space(input_space)
assert unsup_counter.get_value() == train_batches assert sup_counter.get_value() == train_batches
def f(): Series([timedelta(days=1), 'foo'], dtype='m8[ns]')
from __future__ import absolute_import
import salt.utils from salt.utils.locales import sdecode, sdecode_if_string
elif trigger_types[trigger_type] == TASK_TRIGGER_DAILY: trigger.Id = 'Daily_ID1' trigger.DaysInterval = kwargs.get('days_interval', 1)
if isinstance(module, DiscussionDescriptor) and 'discussion_id' not in items: items['discussion_id'] = module.discussion_id
if not key_data: return {}
self.assertEqual(correct_map.get_overall_message(), "Overall message")
perms = models.Permission.objects.filter(codename__in=('add_customuser', 'change_customuser')) self.user.user_permissions.add(*perms)
if self.verbose_name_plural is None: self.verbose_name_plural = string_concat(self.verbose_name, 's')
qs = RasterRelatedModel.objects.filter(rastermodel__rast__1__dwithin=(rast, 40)) self.assertEqual(qs.count(), 1)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
file = getattr(instance, self.attname)
if field == axis_name:
self.assertIn(map_key(actual_item_location), actual_item_map.keys())
if normalize == 'columns': column_margin = column_margin / column_margin.sum() table = concat([table, column_margin], axis=1) table = table.fillna(0)
f, p = f_oneway(X.astype(np.float), y) assert_array_almost_equal(f, fint, decimal=4) assert_array_almost_equal(p, pint, decimal=4)
return False
self.selenium.get(self.live_server_url + reverse('admin:admin_widgets_member_add'))
current_users_state = self._get_users_state() self._check_response(users_state_before_fail, current_users_state)
mask = labels == curr_label current_distances = distances[mask]
break
values = Series([u('fooBAD__barBAD'), NA])
client_kwargs['version'] = 'auto'
git_describe = describe_out
self.factory(coef_init=np.zeros((3,))).fit(X, Y)
return start
return False
self.assertTrue(did_load_item)
xsupi = _cg(fhess_p, fgrad, maxiter=maxinner, tol=termcond)
self.bulk.update_definition(self.course_key, self.definition) self.assertConnCalls(call.insert_definition(self.definition, self.course_key))
filerepos = _parse_repo_file(repofile)[1] return filerepos[name]
self.run_on_commit = []
with ensure_clean_store(self.path) as store:
log.error( 'Unable to resolve %s from %s remote \'%s\' ' 'to either an annotated or non-annotated tag', tag_ref, self.role, self.id ) return None
if not SignatureValidator(lti_consumer).verify(request): return HttpResponseForbidden()
for mode in ('audit', 'honor'): CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
for field in self.CONTENT_FIELDS + self.SETTINGS_FIELDS + self.CHILDREN_FIELDS: self.assertTrue(new_version.fields[field].is_set_on(new_version))
epoch_num = 15 termination_criterion = EpochCounter(epoch_num)
from __future__ import absolute_import, division, print_function import contextlib import copy import collections import datetime
self.assertFalse(chemical_equations_equal('H2 + O2 -> H2O2', 'O2 + H2 -> 2H2O2'))
if content is None: with open(path, 'rb') as f: content = f.read() mimetype = DEFAULT_ATTACHMENT_MIME_TYPE
break
le = LabelEncoder() le.fit([1, 2, 3, 1, -1]) assert_raises(ValueError, le.inverse_transform, [-1])
ret['result'] = True ret['prefix'] = '' ret['version_spec'] = []
with check_mongo_calls(1): self._run_command()
class MultiPoint(GeometryCollection): pass
repr(series.index[0])
is_int_index = labels.is_integer() is_int_positional = is_integer(obj) and not is_int_index
from __future__ import absolute_import import os import string import logging
self.assertIn("- Add field silly_char to sillymodel", out.getvalue())
file1 = open(filename) r = StreamingHttpResponse(file1) self.assertFalse(file1.closed) r.close() self.assertTrue(file1.closed)
if bootstrap_features: features = random_state.randint(0, n_features, max_features) else: features = sample_without_replacement(n_features, max_features, random_state=random_state)
idx1 = Index(lrange(10) + lrange(10)) idx2 = Index(lrange(20))
raise ValueError("Non-reversible reg-exp portion: '(?%s'" % ch)
for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue
diabetes_X_train = diabetes_X[:-20] diabetes_X_test = diabetes_X[-20:]
if not db_field.remote_field.through._meta.auto_created: return None db = kwargs.get('using')
self.course_nav.go_to_section('Test Section', 'Test Subsection')
df = df.T
exc_info_on_loglevel=logging.DEBUG
w = rng.randn(num_features)
if out != 'grains': log.error('Invalid outputter {0} specified, fall back to nested'.format(out)) return outputters['nested']
_ignore_names = ['tz_localize']
assert_raise_message(ValueError, msg, check_X_y, X, y, ensure_min_samples=2, ensure_2d=False)
request_csrf_token = request.META.get(settings.CSRF_HEADER_NAME, '')
from __future__ import division, absolute_import, print_function
cov = ShrunkCovariance() cov.fit(X) assert_array_almost_equal( shrunk_covariance(empirical_covariance(X)), cov.covariance_, 4)
self.assertEqual(deserial_objs[0].object.__class__, Author)
gisfield_may_be_null = not mysql
import salt.utils
from __future__ import absolute_import import copy import logging import pprint import time import yaml
from __future__ import print_function from __future__ import absolute_import
try: self.client.session['tobacconist'] self.fail("Shouldn't have a session value") except KeyError: pass
self.assertEqual(response.status_code, 302) self.assertEqual( response.url, reverse('courseware', args=[course_id]) )
self.setup_cohorts(self.course)
world.clear_courses()
'-oStrictHostKeyChecking=no', '-oUserKnownHostsFile=/dev/null', '-oControlPath=none'
p, h = max_pool_c01b(z, (pool_rows, pool_cols), top_down = t) func = function([z, t], [p, h], mode = mode_without_gpu)
run_map = False
expected_msg = u'Error: ȧƈƈḗƞŧḗḓ ŧḗẋŧ ƒǿř ŧḗşŧīƞɠ' self.assertEqual(expected_msg, result['success'])
if not is_credit_course(course_key): return
if job.startswith('__') and not show_all: del schedule[job] continue
if (valid_repr.shape[1] > valid_repr.shape[0]): valid_repr = numpy.dot(valid_repr, valid_repr.T) test_repr = numpy.dot(test_repr, test_repr.T)
creds_map = {}
'reactor_worker_threads': int,
Created Private Key: "/etc/pki/my_little/certs//DBReplica_No.1.key." Created CSR for "DBReplica_No.1": "/etc/pki/my_little/certs/DBReplica_No.1.csr."
requires_literal_defaults = False
def __sub__(self, other): "Return the difference this Geometry and the other." return self.difference(other)
python_block_regex = re.compile(r'<%\s(?P<code>.*?)%>', re.DOTALL)
self.assertEqual(lower('\xcb'), '\xeb')
'modules_max_memory': int,
return [tuple(value) for value in values]
self.assertTrue('success' in result and not result['success'])
self.config = dict()
response = self.client.get(reverse('django-admindocs-filters')) self.assertContains(response, '<title>Template filters</title>', html=True)
arr = np.random.binomial(n=1, p=.01, size=(1000, 10)) df = DataFrame(arr).to_sparse(fill_value=0)
self.registration.activate() self.assertTrue(self.user.is_active) mock_segment_identify.assert_called_with( self.user.id, expected_segment_payload, expected_segment_mailchimp_list )
from __future__ import unicode_literals
if matches is not None: subscription['endpoint'] = _endpoint.replace( matches.groupdict()['pass'], '****')
return store.db_connection.structures
REQUIRE_BASE_URL = "./"
introspect.__salt__ = {}
BULK_EMAIL_FAILURE_ERRORS = (
self.assertEqual(cl.result_count, 1)
if key: return salt.utils.traverse_dict_and_list(defaults, key, default) else: return defaults
from salt.states import virtualenv_mod
from reclass.adapters.salt import top as reclass_top from reclass.errors import ReclassException
try: import pymongo HAS_PYMONGO = True except ImportError: HAS_PYMONGO = False
__virtualname__ = 'group'
rpm.__salt__ = {}
wmi = types.ModuleType('wmi') sys.modules['wmi'] = wmi
import salt.loader import salt.utils.process
theta0 = self.theta0
var = 1.0 / 12 tm.assert_almost_equal(variance_1, var, check_less_precise=2)
with self.assertNumQueries(1): bacon.tags.add(t1, t2) self.assertEqual(t1.content_object, bacon) self.assertEqual(t2.content_object, bacon)
if osdata['kernel'] in skip_cmds: _cmds = ()
X = iris.data[:, pair] y = iris.target
expected_X_norm = (np.sqrt(X.shape[0]) * np.mean((X - expected_X_mean) ** 2, axis=0) ** .5)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
labels = ax.get_xticklabels()
try: import sqlite3 HAS_SQLITE3 = True except ImportError: HAS_SQLITE3 = False
greet = Word( alphas ) + "," + Word( alphas ) + "!"
draft_branch = ModuleStoreEnum.BranchName.library published_branch = ModuleStoreEnum.BranchName.library
with super(UpdateThreadUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.modules.dockerng import ( CLIENT_TIMEOUT, STOP_TIMEOUT, VALID_CREATE_OPTS, _validate_input, _get_repo_tag ) import salt.utils import salt.ext.six as six
resp_asset = post_asset_update(True, course) self.assertTrue(resp_asset['locked']) verify_asset_locked_state(True)
return {'pythonpath': sys.path}
response = self.client.post(self.url, data) self.assertHttpBadRequest(response)
out.get('deploy_kwargs', {}) or out.pop('deploy_kwargs', {})
iris = datasets.load_iris()
val = force_text(ogr_field.value, self.encoding)
import jinja2.exceptions
_opts = __opts__.get('sqlite3', {})
full_name = UserProfile.objects.get(user=user).name
return True
def get_group_permissions(self, obj=None): return set()
from __future__ import absolute_import import os
available_version = salt.utils.alias_function(latest_version, 'available_version')
with self.assertRaisesRegexp(ValueError, r"(?i)course not found"): perform_delegate_email_batches(entry.id, course_id, task_input, "action_name")
CreditCourse.objects.create(course_key=self.course.id, enabled=True)
import salt.ext.six as six
return False
return ip_str
"generic_inline_admin-media-content_type-object_id-TOTAL_FORMS": "1", "generic_inline_admin-media-content_type-object_id-INITIAL_FORMS": "0", "generic_inline_admin-media-content_type-object_id-MAX_NUM_FORMS": "0",
n_samples, n_features = 5, 4 y = rng.randn(n_samples) X = rng.randn(n_samples, n_features)
if self.corruption_level < 1e-5: return x
import salt.utils
W = rng.randn(n_components, n_features) h = rng.randn(n_samples, n_components) noise = rng.gamma(1, size=n_features) * rng.randn(n_samples, n_features)
for dist in au_dists: if isinstance(dist, D) and not oracle: type_error = True else: type_error = False
('purchased', 'purchased'),
self.client.logout()
if parents.issubset(to_delete): next_tier.add(child_block_key)
default = self.defaults.get(option.dest) value = getattr(self.options, option.dest, default)
r = HttpResponse() r.content = 12345 self.assertEqual(r.content, b'12345')
if u('table') not in pt: try: return globals()[_STORER_MAP[pt]](self, group, **kwargs) except: error('_STORER_MAP')
text = f.widget.format_value(result) self.assertEqual(text, '13:30:05')
IcrvStatusEmailsConfiguration.objects.create(enabled=True) self.create_reverification_xblock()
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath ensure_in_syspath('../../')
for block_hierarchy in course_hierarchy: self.build_xblock(block_hierarchy, block_map, parent=None)
result = salt.utils.slack.query(function='message', api_key=api_key, method='POST', header_dict={'Content-Type': 'application/x-www-form-urlencoded'}, data=urllib.urlencode(parameters))
set_credit_requirements(self.course.id, requirements)
self.assertQuerysetEqual( Director.objects.all(), ["<Director: Director object>"] )
course_module = modulestore().get_course(course_id)
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
if self.is_multi_index: filt = filt.union(Index(self.levels))
import salt.crypt import salt.utils import salt.client import salt.exceptions import salt.utils.event import salt.daemons.masterapi from salt.utils import kinds from salt.utils.event import tagify
order_history_list = order_history(user, course_org_filter=course_org_filter, org_filter_out_set=org_filter_out_set)
import nose import numpy as np
from __future__ import absolute_import import sys import os.path
self.format_caller_node = node.func.value
self.used = True return None
'microsite_configuration',
expr_s = re.sub( r'script([a-zA-Z0-9]+)', '\\mathcal{\\1}', expr_s )
if not version: version_num = _get_latest_pkg_version(pkginfo) else: version_num = version
a = self.Answer.objects.create(text="Number five", question=self.q1)
if isinstance(weights, pd.Series): weights = weights.reindex(self.axes[axis])
if not self.done(): self.set_result(future)
url = reverse('shoppingcart.views.postpay_callback') response = self.client.post(url, processor_response_params) self.assertRedirects(response, self._receipt_url)
salt.log.setup.set_multiprocessing_logging_queue(self.log_queue)
self.assertEqual(list(iter_format_modules('de')), [default_mod])
from __future__ import absolute_import
available_version = salt.utils.alias_function(latest_version, 'available_version')
repo_dir = self.git_repo_dir if not os.path.isdir(repo_dir): os.mkdir(repo_dir) self.addCleanup(shutil.rmtree, repo_dir)
X_orig = sparse_random_matrix(5, 5, density=0.75, random_state=0)
asset_deprecated = None ssck_deprecated = None
world.wait_for_visible('.mce-window')
from __future__ import absolute_import
DEBUG = 10 INFO = 20 WARNING = 30 ERROR = 40 CRITICAL = 50
self.assertTrue(idx[0:4].equals(result.insert(0, idx[0])))
TEST_DIR = path(__file__).dirname() TEST_DATA_DIR = 'common/test/data/' PLATFORM_ROOT = TEST_DIR.parent.parent.parent.parent TEST_DATA_ROOT = PLATFORM_ROOT / TEST_DATA_DIR
iph = unpack('!BBHHHBBH4s4s', ip_header)
self.code = None answer = None try: answer = xml.xpath('//*[@id=$id]//answer', id=xml.get('id'))[0] except IndexError:
'pidfile': str,
_config_filename_ = 'master'
pre = __salt__['git.config_get_regexp']( cwd=repo, key=key, value_regex=None, user=user, ignore_retcode=True, **{'global': global_} )
if valid_function is False: if invalid_functions.get(fun) is None: invalid_functions.update({fun: []}) invalid_functions[fun].append(vm_name) continue
class Unmanaged2(models.Model): mm = models.ManyToManyField(Unmanaged1)
ports = [4505, 4506]
def run_reqserver(self, **kwargs): secrets = kwargs.pop('secrets', None) if secrets is not None: SMaster.secrets = secrets
allow_database_queries = False
tests = self.test_loader.discover(start_dir=label, **kwargs)
inter = first.intersection(first) self.assertIs(inter, first)
self.store.create_child( self.user_id, self.course.location, 'static_tab' )
import os import logging
password: letmein apikey: 901d3f579h23c8v73q9
path = os.path.join(integration.FILES, 'conf', 'cloud.providers.d', provider + '.conf') config = cloud_providers_config(path)
counts[to_reassign] = np.min(counts[~to_reassign])
cmd = 'cmd /c {0}'.format(cmd)
with self.assertRaises(KeyError): data.get('block', 'foo')
data = [[['foo', 'bar', 'baz']]] self.assertRaises(ValueError, Panel, data, dtype=float)
if self.n_components == 0: return np.diag(1. / self.noise_variance_) if self.n_components == n_features: return linalg.inv(self.get_covariance())
bands.append(band_result)
myqueue: boto_sqs.present: - region: us-east-1 - profile: mysqsprofile
raise
@override_settings(DEBUG=True, ROOT_URLCONF='generic_inline_admin.urls') class GenericAdminViewTest(TestDataMixin, TestCase):
NULLBOOL_CHOICES = (('1', 'Yes'), ('0', 'No'), ('', 'Unknown'))
lfw_people = fetch_lfw_people(data_home=SCIKIT_LEARN_DATA, resize=None, slice_=None, color=True, download_if_missing=False) assert_equal(lfw_people.images.shape, (17, 250, 250, 3))
self.assertIn('test.recho', funcs)
elif compat.PY3 and isinstance(f, compat.BytesIO): from io import TextIOWrapper
assert_raises(ValueError, precision_recall_fscore_support, y_true, y_pred, pos_label=2, average='macro')
if not header: if __salt__['file.search']( name, salt.utils.build_whitespace_split_regex(chunk), multiline=True): continue
value = value.lstrip('@')
self.assertTrue(module_has_submodule(test_module, 'bad_module')) with self.assertRaises(ImportError): import_module('utils_tests.test_module.bad_module')
#latex_show_urls = False
X = np.atleast_2d(np.random.uniform(0, 10.0, size=100)).T X = X.astype(np.float32)
os.chdir(cwd)
for config_key in ('log_file', 'key_logfile'): log_setting = opts.get(config_key, '') if log_setting is None: continue
'auth_tries': int,
urlconf_repr = '<%s list>' % self.urlconf_name[0].__class__.__name__
import integration import salt.utils
self.assertTrue(isinstance(el, compat.string_types) or isnull(el))
Ensure myservice dashboard is managed: grafana.dashboard_present: - name: myservice - dashboard_from_pillar: default - rows_from_pillar: - systemhealth - requests
result = df.drop_duplicates('AAA') expected = df[:2] tm.assert_frame_equal(result, expected)
if style_dict.get('font'): font = style_dict['font'] if font.get('bold'): xl_format.set_bold()
return ret
pub_data = self.saltclients['local_async'](*f_call.get('args', ()), **f_call.get('kwargs', {}))
self.assertEqual(response_obj['return'][0]['minion']['id'], 'minion')
try: course_key = CourseKey.from_string(args[0]) except InvalidKeyError: try: course_key = SlashSeparatedCourseKey.from_deprecated_string(args[0]) except InvalidKeyError: raise CommandError(unicode(GitExportError.BAD_COURSE))
for key, val in original_values_map.iteritems(): self.assertEquals( self.advanced_settings.get(key), val, 'Undoing Should revert back to original value' )
expected = Series([Timestamp("19801222"), Timestamp("19801222")] + [Timestamp("19810105")] * 5) expected[2] = np.nan s[2] = np.nan
self.track_selection_page.enroll('verified')
from salt.ext.six import string_types
self._block_relations = pruned_block_relations
assert_equal(X.indptr.shape[0], 7) assert_equal(X.shape[0], 6) assert_equal(X.shape[1], 21) assert_equal(y.shape[0], 6)
from scipy import misc face = misc.face(gray=True)
mount_invisible_keys = [ 'actimeo', 'comment', 'direct-io-mode', 'password', 'retry', 'port', ]
from __future__ import absolute_import import time
if run_if_idle is not None: task_definition.Settings.RunOnlyIfIdle = run_if_idle
incorrect_jid_length = 2012 self.assertEqual(utils.jid.jid_to_time(incorrect_jid_length), '')
from __future__ import unicode_literals
timeout = None
batch_size = v.shape[0]
check_cv_coverage(cv, expected_n_iter=3, n_samples=len(y))
'microsite_configuration',
if field.source is None: field.bind(self.field_name, self)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
MIN_IDEAL_BATCH_DURATION = .2
result = sparse.loc[orig % 2 == 1] exp = orig.loc[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
time.sleep(0.5)
import salt.modules.gem as gem
if self._impl in ['c_svc', 'nu_svc'] and len(self.classes_) == 2: return -dec_func.ravel()
if cache: cleaned_results = json_safe(globals_dict) cache.set(key, (emsg, cleaned_results))
with mock.patch('openedx.core.lib.courses.create_course_image_thumbnail') as patched_create_thumbnail: course_overview = CourseOverview.get_from_id(course_overview.id) patched_create_thumbnail.assert_not_called()
total_mu = (n_new * new_mu + n_past * mu) / n_total
super(MongoModuleStore, self).create_course( org, course, run, user_id, runtime=xblock.runtime, **kwargs )
if a.ndim == 0: return idx
if os.system('sphinx-build -b latex -d build/doctrees ' 'source build/latex'): raise SystemExit("Building LaTeX failed.")
index = Int64Index([-5, 0, 1, 2]) expected = Index([-5, 0, 1, 2], dtype=np.int64) tm.assert_index_equal(index, expected)
if getattr(xblock, "in_entrance_exam", False): xblock_info["is_header_visible"] = False
from __future__ import absolute_import
for key in ['xqueue_header', 'xqueue_body']: if key not in data: raise Http404
pass
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(boston.data, boston.target, random_state=rng)
file_handle.write(asbytes(length.ljust(_MAX_LEN))) file_handle.write(zlib.compress(asbytes(data), compress))
super(LabelSpreading, self).__init__(kernel=kernel, gamma=gamma, n_neighbors=n_neighbors, alpha=alpha, max_iter=max_iter, tol=tol, n_jobs=n_jobs)
FILE_UPLOAD_DIRECTORY_PERMISSIONS = None
del self.bias_from_marginals
y_pred1 = clf.fit(X1, y).predict(X1) assert_array_equal(y_pred1, y, 'solver %s' % solver)
self.dashboard_page.visit() self.assertTrue(self.dashboard_page.has_course( org=new_org, number=self.course_number, run=self.course_run ))
_strip_value(value, lookup)
self.alpha_ = best_alpha self.cv_alphas_ = all_alphas self.cv_mse_path_ = mse_path
from __future__ import unicode_literals
self.assertFalse(self._has_changes(locations['grandparent'])) self.assertFalse(self._has_changes(locations['parent']))
self._create_block_hierarchy()
self.assertTrue(os.path.exists(migration_file)) with codecs.open(migration_file, "r", encoding="utf-8") as fp: content = fp.read()
log = logging.getLogger(__name__)
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): result = mom.rolling_apply(arr, 10, np.sum) self.assertTrue(isnull(result).all())
result = sql.read_sql_table('test_nan', self.conn) tm.assert_frame_equal(result, df)
raise SaltSystemExit('Cannot complete login due to an incorrect user name or password.')
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
seq_it = iter(seq) seq_it_next = iter(seq) next(seq_it_next)
from salt.serializers.yamlex import deserialize
patcher = mock.patch('terrain.stubs.xqueue.Timer') timer = patcher.start() timer.side_effect = FakeTimer self.addCleanup(patcher.stop)
gmm.fit(X)
self._wrapped = empty
multi_db = True
cache = uuid() if cache: if not force: log.error('BCache cache {0} is already on the system'.format(cache)) return False cache = _bdev()
mp = int(os.environ.get('JOBLIB_MULTIPROCESSING', 1)) or None if mp: try: import multiprocessing as mp import multiprocessing.pool except ImportError: mp = None
'master_sign_key_name': str,
empty_series = pd.Series([], name='five') empty_frame = pd.DataFrame([empty_series]) empty_panel = pd.Panel({'six': empty_frame})
FEATURES['ORGANIZATIONS_APP'] = True
sim = np.array([[0, 5, 3, 4], [5, 0, 2, 2], [3, 2, 0, 1], [4, 2, 1, 0]])
class Person(Form): first_name = CharField() last_name = CharField() birthday = DateField()
self.client.get('/logout/next_page/') self.assertEqual(len(self.logged_out), 1) self.assertEqual(self.logged_out[0], None)
course_about = get_course_about_section(self.request, self.course, 'short_description') self.assertEqual(course_about, "A course about toys.")
qs = qs.none()
from edx_oauth2_provider.tests import IDTokenTestCase, UserInfoTestCase
person = models.ForeignKey(Person, models.CASCADE, related_name='relating_person') person_hidden = models.ForeignKey(Person, models.CASCADE, related_name='+')
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
try: import SoftLayer HAS_SLLIBS = True except ImportError: HAS_SLLIBS = False
assert_array_equal(out, sw_out)
return False
result = idx.isin(set(values)) tm.assert_numpy_array_equal(result, expected)
_skip_if_no_xlrd()
block_wrappers = []
if not isinstance(idx, six.integer_types + (slice,)): raise TypeError return list(self.__iter__())[idx]
sigmoid = CalibratedClassifierCV(est, cv=2, method='sigmoid')
value = anonymous_id_for_user(data['user'], None) return value
assert_almost_equal(s[:k], sa)
self.track_selection_page.enroll('verified')
'openedx.core.djangoapps.content.course_overviews', 'openedx.core.djangoapps.content.course_structures', 'lms.djangoapps.course_blocks',
cPickle.dumps(x)
return start(name, path=path)
response.render() self.assertEqual(response.content, b'First template\n') self.assertEqual(post, ['post1', 'post2'])
response = self.client.get('/permission_protected_view_exception/') self.assertEqual(response.status_code, 403)
sub_match_args = sub_match.args if not sub_match_dict: sub_match_args = match.groups() + sub_match.args
return loads(_MssqlEncoder().encode({'resultset': cur.fetchall()}))['resultset']
clf = svm.SVC(kernel='linear') clf.fit(X, Y)
self.assertTrue(config['blah'])
for prop in properties_update: value = properties[prop] res = __salt__['zpool.set'](name, prop, value)
'tcp_keepalive': bool,
underlying_updates = modulestore().get_item(updates_usage_key) underlying_content = underlying_updates.items[0]['content'] if new_format else underlying_updates.data self.assertIn("\"/static/", underlying_content)
if not test_labels: module_found_in_labels = True else: module_found_in_labels = any( module_label == label or module_label.startswith(label + '.') for label in test_labels_set)
fs.set_params(select__k=2) assert_equal(fs.fit_transform(X, y).shape, (X.shape[0], 4))
self.assertRaises(ValueError, self.read_csv, StringIO(data), header=[0, 1, 2, 3], index_col=['foo', 'bar'], tupleize_cols=False)
inter_clust_dists = np.inf * intra_clust_dists
if len(names) == 1: return ret[names[0]] return ret
self.login_page.visit().password_reset(email=email)
self.assertIn(REG_STR, resp.content)
return (user, None)
from salt.utils.validate import net
assert_false(world.css_has_class('.CodeMirror', 'is-inactive')) assert_true(world.is_css_not_present('.tiny-mce')) type_in_codemirror(0, text)
self.cohort_management_page.save_discussion_topics(key)
if e.errno != errno.ENOENT: raise
del new_connection.timezone_name
try: correctness = self.check_formula( correct_answer, given, samples ) except Exception: correctness = 'incorrect' if correctness == 'correct': hints_to_show.append(name)
os.dup2(stdout_child_fd, pty.STDIN_FILENO) os.dup2(stdout_child_fd, pty.STDOUT_FILENO) os.dup2(stderr_child_fd, pty.STDERR_FILENO)
input_dict = {'1_2_1': '0'} correct_map = problem.grade_answers(input_dict)
res = __salt__['cmd.run_all'](cmd, python_shell=False)
if fexpect == fsym: return {'ok': True, 'msg': msg}
for key in kv_dict: self.kvs.set(key, 'test_value')
for extension in self.cv_extensions: extension.on_save(self.trainers)
result = f.clean('1:30 PM 21-12-2010') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
from __future__ import absolute_import
self.advanced_settings.visit() self.assertTrue(self.advanced_settings.is_browser_on_page())
with self.assertRaises(ValueError): df2 = df.copy() df2['foo'] = 1 to_datetime(df2)
params_not_accepted = params.copy() params_not_accepted['decision'] = "REJECT" self.assertFalse(payment_accepted(params_not_accepted)['accepted'])
reindex_course_and_check_access(self.course.id, self.user)
__virtualname__ = 'service'
try: fh_ = salt.utils.atomicfile.atomic_open(path, 'w') for line in new_file: fh_.write(line) finally: fh_.close()
salt '*' win_wua.list_updates
import salt.ext.six as six
shutil.rmtree(path) os.makedirs(path)
import os.path
config.save()
problem_text = re.sub(r"startouttext\s*/", "text", problem_text) problem_text = re.sub(r"endouttext\s*/", "/text", problem_text) self.problem_text = problem_text
self.event_publisher = salt.utils.event.AsyncEventPublisher( self.opts, self.handle_event, io_loop=self.io_loop, )
for c in City.objects.num_points(): self.assertEqual(1, c.num_points)
return 0
cls.audit_course = CourseFactory.create() CourseModeFactory.create(course_id=cls.audit_course.id, mode_slug=CourseMode.AUDIT)
block_context.add_blocks(self.blocks)
if transform: self.source_srs = self.check_srs(source_srs) self.transform = self.coord_transform() else: self.transform = transform
timedelta_NaT = np.timedelta64('NaT')
import sys import nose import itertools import warnings from datetime import datetime
context['document_title'] = _("{partner_short_name} {course_number} Certificate | {platform_name}").format( partner_short_name=context['organization_short_name'], course_number=context['course_number'], platform_name=platform_name )
qbuffer = []
ret = self.run_run_plus(fun='fileserver.dir_list', args=['backend="[roots]"']) self.assertIsInstance(ret['fun'], list)
_EASY_CHOICE_FEATURES = ('gender', 'level_of_education') _OPEN_CHOICE_FEATURES = ('year_of_birth',)
if DEBUG_ACCESS: log.debug(*args, **kwargs)
s = Series(range(10)) with tm.assertRaises(ValueError): s.sample(n=3, weights='weight_column')
PAID_COURSE_REGISTRATION_CURRENCY = ['usd', '$']
class Person(Form): first_name = CharField(required=False) last_name = CharField(required=False)
with self.assertRaises(forms.ValidationError): f.clean('13:30:05 21.12.2010')
bulk_ops_record.nest()
if user.is_anonymous(): return None
default_z += T.alloc(*([0.]+[shape[elem] for elem in self.h_space.axes])).astype(default_z.dtype) assert default_z.ndim == 4
repos = {} basedirs = _normalize_basedir(basedir) repos = list_repos(basedirs)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
tol = 0.000000001
DATE_INPUT_FORMATS = [
for x in range(1, 3): self.update_module() self.loader.clear() self.assertEqual(self.loader[self.module_key](), self.count)
return ''
self.assertEqual(course_date, expected_course_date)
slug = models.SlugField(max_length=1000, db_index=False)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
if is_completed: msg = Messages.ORDER_COMPLETED.format(order_number=TEST_ORDER_NUMBER) self.assertResponseMessage(response, msg) else: self.assertResponsePaymentData(response)
if attrs: self.params.update(attrs) self.params['editable'] = self.params['modifiable'] else: self.params['editable'] = True
field_list.reverse() fld_name = field_list.pop()
assert all(np.all(this_point.cv_validation_scores == 0.0) for this_point in gs.grid_scores_ if this_point.parameters['parameter'] == FailingClassifier.FAILING_PARAMETER)
import salt.loader import salt.payload import salt.utils import salt.utils.templates import salt.utils.url from salt.utils.locales import sdecode from salt.exceptions import CommandExecutionError
cond = df > 0 check_dtypes = all([not issubclass(s.type, np.integer) for s in df.dtypes]) _check_align(df, cond, np.nan, check_dtypes=check_dtypes)
epub_title = project epub_author = 'Django Software Foundation' epub_publisher = 'Django Software Foundation' epub_copyright = copyright
result = result.remove_categories(['foo%05d' % i for i in range(300)]) self.assertTrue(result.codes.dtype == 'int8')
from salt.utils.decorators import depends import salt.utils
import salt.utils from salt.state import STATE_INTERNAL_KEYWORDS as _STATE_INTERNAL_KEYWORDS
cmd = 'xar -x -f {0} {1}'.format(pkg, ' '.join(files)) __salt__['cmd.run'](cmd, cwd=temp_dir, output_loglevel='quiet')
elif isinstance(get_mixed_stores(module_store_setting), dict): warnings.warn( "Using a dict for the Stores option in the MixedModuleStore is deprecated. Please use a list instead.", DeprecationWarning )
response = searcher.search(field_dictionary={"library": library_search_key}) self.assertEqual(response["total"], 2)
layer_1_detector = FilterActs()(images, filters)
rs = self.ts.diff(0) xp = self.ts - self.ts assert_series_equal(rs, xp)
EmptyPromise( lambda: self.current_form != login_form, "Finish toggling to the password reset form" ).fulfill()
self.assertIn(self.user_name, self.certificates_section.last_certificate_exception.text) self.assertIn(notes, self.certificates_section.last_certificate_exception.text)
'nodegroups': dict,
elif inferred_type == 'floating': dtype = 'int64' if issubclass(result.dtype.type, np.number):
if self.has_answerpool(): return
ASSET_IGNORE_REGEX = r"(^\._.*$)|(^\.DS_Store$)|(^.*~$)"
AutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=False).visit()
import salt.utils.sdb
s = Series(self.ts.index) rs = s.tolist() self.assertEqual(self.ts.index[0], rs[0])
tm.assert_almost_equal(tuple(x), x_rec)
if make_new: self.filters = tables.Filters(complib='blosc', complevel=5) self.make_data(which_set, path)
Series([3., 2, 1, 2, 5], dtype='complex128'),
salt -L 'kevin,stewart,dave' system.reboot && \\ salt-run state.event 'salt/minion/*/start' count=3 quiet=True && \\ salt -L 'kevin,stewart,dave' state.highstate
label = _(u"I agree to the {platform_name} {terms_of_service}.").format( platform_name=get_themed_value("PLATFORM_NAME", settings.PLATFORM_NAME), terms_of_service=terms_link )
assert_no_warnings(metric, y_true_bin, y_pred_bin)
result = to_datetime(df.astype(str)) assert_series_equal(result, expected)
def assert_series_equal(left, right, check_dtype=True, check_index_type='equiv', check_series_type=True, check_less_precise=False, check_names=True, check_exact=False, check_datetimelike_compat=False, check_categorical=True, obj='Series'):
new_candidates = [] for candidate in candidates: if candidate.endswith('.xml'): new_candidates.append(candidate[:-4] + '.html') return candidates + new_candidates
"public_fields": [ 'username', 'profile_image', 'account_privacy', ],
setattr(hasher, attr, new_value) encoded = make_password('letmein', hasher='argon2') attr_value = hasher.safe_summary(encoded)[summary_key] self.assertEqual(attr_value, new_value)
self.assertEqual( res_json['message'], u"Certificate Invalidation does not exist, Please refresh the page and try again.", )
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'vsphere', vm_['profile'], vm_=vm_) is False: return False
train_data, test_data, target_train, target_test = train_test_split( data, target, test_size=.1, random_state=0)
return lib.astype_unicode(arr.ravel()).reshape(arr.shape)
response = self.client.get('/reset/zzzzzzzzzzzzz/1-1/') self.assertContains(response, "Hello, .")
from __future__ import unicode_literals
merge(df, df2, how='outer')
self._assert_user_name(self.FULL_NAME)
from __future__ import unicode_literals
return _timelex.split(compat.StringIO(str(dt_str)))
res, lidx, ridx = self.index.join(other_mono, how='inner', return_indexers=True)
estimator.fit(X[bootstrap_idx], y[bootstrap_idx]) y_predict = estimator.predict(X)
return ret
if kind != 'iloc': key = self._maybe_cast_indexer(key) return (super(Int64Index, self) ._convert_scalar_indexer(key, kind=kind))
return
u'{"@type": "Result", "resultScore": 0.1}',
append_axis = list(a) if existing_table is not None: indexer = len(self.non_index_axes) exist_axis = existing_table.non_index_axes[indexer][1] if append_axis != exist_axis:
y = y[:m]
from salt.exceptions import CommandExecutionError from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
comment += ('\n' + config_comment)
self.config.pop(cli_log_file_datefmt)
modulestore().update_item(course_updates, user.id)
raise ValueError("Unknown activation function %s" % self.activation)
result = sparse.loc[sparse % 2 == 1] exp = orig.loc[orig % 2 == 1].to_sparse(fill_value=0) tm.assert_sp_series_equal(result, exp)
continue
response = self.client.get('/account/register/', HTTP_ACCEPT_LANGUAGE='pl-pl') self.assertRedirects(response, '/en/account/register/')
if sys.platform.startswith('win'): import win32file else: import resource
acceptable_ora_err = 'ORA-01543' if keepdb else None self._execute_allow_fail_statements(cursor, statements, parameters, verbosity, acceptable_ora_err)
log.error('The master key has changed, the salt master could ' 'have been subverted, verify salt master\'s public ' 'key') return ''
if self._is_training_data(X): return 2. - float(self.train_sizes) / self.n_max_train_sizes else: return float(self.train_sizes) / self.n_max_train_sizes
for i, col in enumerate(arg1.columns): results[i] = f(arg1.iloc[:, i], arg2.iloc[:, i]) return dataframe_from_int_dict(results, arg1)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'digital_ocean', vm_['profile'], vm_=vm_) is False: return False
query = "SELECT * FROM raw_query_author ORDER BY id ASC" third_author = Author.objects.raw(query)[2] self.assertEqual(third_author.first_name, 'Bob')
mylocalrepo: git.config_set: - name: user.email - value: foo@bar.net - repo: /path/to/repo
result = diffs.min() self.assertEqual(result[0], diffs.ix[0, 'A']) self.assertEqual(result[1], diffs.ix[0, 'B'])
self.other_sequential_2.children.append(self.other_vertical_1.location)
from __future__ import print_function from __future__ import absolute_import import re import json from salt.utils.odict import OrderedDict from salt.utils import fopen as _fopen
api.set_credit_requirement_status(username, self.course_key, "grade", "grade") self.assert_grade_requirement_status('satisfied', 0)
max_depth = ((2 ** 31) - 1 if self.max_depth is None else self.max_depth) max_leaf_nodes = (-1 if self.max_leaf_nodes is None else self.max_leaf_nodes)
if not hasattr(self, 'mask_weights'): self.mask_weights = None if not hasattr(self, 'max_col_norm'): self.max_col_norm = None
transport = None if needs_daemon: transport = self.options.transport TestDaemon.transplant_configs(transport=transport)
from __future__ import unicode_literals
self.assertAlmostEqual(c1[0] + xfac, c2[0], 5) self.assertAlmostEqual(c1[1] + yfac, c2[1], 5)
self.assertAlmostEqual(axis.get_ticklocs()[0], center)
draft_problem = self.store.get_item(self.problem.location) self.assertTrue(getattr(draft_problem, 'is_draft', False))
p_idx = rng.randint(num_p)
self.assertIn('<div class="courses no-course-discovery"', response.content)
if len(ndims) > 1: current_column = 0 max_ndim = sample.ndim self.objs, objs = [], self.objs for obj in objs:
clf.intercept_scaling = 100 clf.fit(X, y) intercept1 = clf.intercept_ assert_less(intercept1, -1)
xpath = "//p[@class='status']" self.assert_has_text(xml, xpath, expected_text, exact=False)
prob /= prob.sum(axis=1).reshape((prob.shape[0], -1)) return prob
msg = 'Related Field got invalid lookup: editor' with self.assertRaisesMessage(FieldError, msg): Article.objects.filter(author__editor__name='James')
with self.assertRaises(AttributeError): r.content = 'xyz'
self.assertEqual(module.attempts, 1)
with tm.assertRaisesRegexp(TypeError, 'Cannot compare types .+'): ser.replace([1, 2], [np.nan, 0])
import salt.utils from salt.modules import ini_manage as ini
if not isinstance(key, (list, np.ndarray, Series, Index)): key = list(key)
app.add_javascript('js/copybutton.js') app.connect('autodoc-process-docstring', generate_example_rst)
answer_element = etree.SubElement(codeparam_element, "answer_display") answer_element.text = str(answer_display)
DATE_INPUT_FORMATS = [
self.assertTrue(hasattr(mgr2, "_is_consolidated")) self.assertTrue(hasattr(mgr2, "_known_consolidated"))
folders_list_in_path = folders_list_in_path[:-4]
w = rhs.where.clone() w.relabel_aliases(change_map) self.where.add(w, connector)
pid = 0
raw_path = script.get('system_path', '').split(":") + DEFAULT_PATH
authors = [ 'Thomas S. Hatch <thatch45@gmail.com> and many others, please see the Authors file', ]
user_groups = _get_user_partition_groups( self.course.id, [self.split_test_user_partition], self.user ) self.assertEquals(len(user_groups), 1)
self.photo_id_key = rsa_encrypted_aes_key.encode('base64') self.save()
self.shell.process_input_line('bookmark ipy_savedir %s'%savefig_dir, store_history=False) self.shell.clear_cout()
salt '*' vsphere.service_start my.esxi.host root bad-password 'ntpd'
from salt.modules import win_autoruns
Y = None
cov_x_y = cov(x, y) cov_y_x = cov(y, x) assert_equal(cov_x_y, cov_y_x)
properties = obj_schema.get('properties') if properties: for _, prop_obj_schema in properties.iteritems(): dep_models_list.extend(self._build_dependent_model_list(prop_obj_schema))
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
try: from pysqlcipher import dbapi2 as sqlcipher HAS_SQLCIPHER = True except ImportError: HAS_SQLCIPHER = False
i10 = pd.date_range(i30[0], i30[-1], freq='10T')
proxyperson = models.ForeignKey(ProxyPerson, models.CASCADE, related_name='relating_proxyperson') proxyperson_hidden = models.ForeignKey(ProxyPerson, models.CASCADE, related_name='relating_proxyperson_hidden+')
if "default" in kwargs: kwargs["defaultValue"] = kwargs["default"]
link_cohort_to_partition_group( test_cohort, self.user_partition.id, self.groups[0].id, ) add_user_to_cohort(test_cohort, self.student.username) self.assert_student_in_group(self.groups[0])
with self.assertRaises(ValueError): Book.objects.all().annotate(Avg('authors__age'), authors__age__avg=Avg('authors__age'))
obj_sm.ClientApplicationID = "My App"
matches = [] for match in results: name = match['name'] if name not in matches: matches.append(name)
from decimal import Decimal
distances = paired_distances(X[connectivity.row], X[connectivity.col], metric=affinity)
if ax.is_all_dates: from pandas.tseries.tools import to_datetime before = to_datetime(before) after = to_datetime(after)
reduced_likelihood_function_value = - np.inf par = {}
if not __opts__.get('state_verbose', False) and \ ret['result'] and not schanged: continue
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
MIN_DOCKER = (1, 4, 0) MIN_DOCKER_PY = (1, 4, 0)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
authentication_classes = (OAuth2Authentication, SessionAuthentication) permission_classes = (permissions.IsAuthenticated,) serializer_class = CourseTeamSerializer
from nose.tools import assert_equal from nose.tools import assert_not_equal from nose.tools import assert_true from nose.tools import assert_false from nose.tools import assert_raises from nose.tools import raises from nose import SkipTest from nose import with_setup
if create_after_overview: self.set_config(enabled=False)
continue
if create_after_overview: self.assertFalse(hasattr(course_overview, 'image_set')) self.set_config(enabled=True) course_overview = CourseOverview.get_from_id(course.id)
cmap = self.colormap or 'BuGn' cmap = self.plt.cm.get_cmap(cmap) cb = self.kwds.pop('colorbar', True)
import re import logging
config.delete() self.assertEqual(len(self.page.experiment_group_configurations), 0)
self.assertIsNone(get_cache_key(request)) learn_cache_key(request, response)
ret['create'][nodename] = nodedata alias, driver = nodedata['provider'].split(':') defined.add((alias, driver, nodename))
cur_mend = self.m_offset.rollforward(other) cur_cmend = self.cbday.rollback(cur_mend)
n_ranked_above = sum(rank[r] <= rank[label] for r in relevant)
_upload_file(self.srt_file, self.item_descriptor.location, os.path.split(self.srt_file.name)[1])
self.set_state_from_lcp()
import uuid SECRET_KEY = uuid.uuid4().hex
pd.concat([df1, df2_obj])
if is_bool_dtype(result): return result try: return Index(result) except TypeError: return result
df['bb'].iloc[0] = 0.17 df._clear_item_cache() self.assertAlmostEqual(df['bb'][0], 0.17)
return self.course_overview
if hasattr(self, 'scale_'): del self.scale_ del self.min_ del self.n_samples_seen_ del self.data_min_ del self.data_max_ del self.data_range_
_associate_eip_with_interface(eni_id, associate_public_ip, vm_=vm_)
import salt.utils import salt.utils.files import salt.utils.templates import salt.utils.validate.net from salt.exceptions import CommandExecutionError, SaltInvocationError
self.assertIsNone(cache.get("does_not_exist")) self.assertEqual(cache.get("does_not_exist", "bang!"), "bang!")
>> a=makeCustomDataframe(5,3,c_idx_names=False,r_idx_names=False, r_idx_type="dt",c_idx_type="u")
week_of_months = week_of_months[week_of_months < 4] if len(week_of_months) == 0 or len(week_of_months) > 1: return None
RSTR_RE = r'(?:^|\r?\n)' + RSTR + '(?:\r?\n|$)'
wua_searcher = wua_session.CreateUpdateSearcher() wua_download_list = win32com.client.Dispatch('Microsoft.Update.UpdateColl') wua_downloader = wua_session.CreateUpdateDownloader()
from salt.modules import svn
import os import os.path import time import logging
lhs = np.datetime64(datetime(2013, 12, 6)) rhs = Timestamp('now') nat = Timestamp('nat')
match = TRAILING_PUNCTUATION_RE.match(middle) if match: middle = match.group(1) trail = match.group(2) + trail trimmed_something = True
import matplotlib.pyplot as plt plt.close('all') gs, axes = _generate_4_axes_via_gridspec()
log = logging.getLogger(__name__)
salt 'global_zone' pkg.install sources='[{"SMClgcc346": "/var/spool/pkg/gcc-3.4.6-sol10-sparc-local.pkg"}]' current_zone_only=True
zip_file_path = '{0}/{1}_TXT.zip'.format(_FAMAFRENCH_URL, name)
f.title = mark_safe(f.title) f.content = mark_safe(f.content)
self.store.unpublish(item_location, self.user_id) item = self.store.get_item(item_location) self.assertFalse(self.store.has_published_version(item)) _check_asides(item)
cluster_ref = salt.utils.vmware.get_mor_by_property(_get_si(), vim.ClusterComputeResource, cluster_name) if cluster_ref: return {cluster_name: 'cluster already exists'}
if feature_names is None: feature_names = [str(i) for i in range(gbrt.n_features)] elif isinstance(feature_names, np.ndarray): feature_names = feature_names.tolist()
self.assertFalse(self.advanced_settings.is_validation_modal_present())
df = sql.read_sql_table("types_test_data", self.conn)
os.kill(pid, signum)
if d_yard in self.lane_stack.value.nameRemotes: self.lane_stack.value.transmit(msg, self.lane_stack.value.nameRemotes[d_yard].uid) return
default_login = datetime(2000, 1, 1) if settings.USE_TZ: default_login = default_login.replace(tzinfo=timezone.utc) user.last_login = default_login user.save()
import salt.utils.itertools import salt.utils.systemd from salt.exceptions import CommandExecutionError from salt.ext import six
allow_access(course_ccx, staff, 'staff')
action_name = 'generating_exec_summary_report' task_fn = partial(upload_exec_summary_report, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
start = TODAY().replace(tzinfo=pytz.UTC) override_field_for_ccx(ccx, course, 'start', start) override_field_for_ccx(ccx, course, 'due', None)
from salt.states import postgres_user
import salt.utils import salt.utils.mac_utils from salt.exceptions import SaltInvocationError
class Managed1(models.Model): mm = models.ManyToManyField(Unmanaged1)
try: cmd_all = __salt__['cmd.run_all']( name, timeout=timeout, python_shell=True, **cmd_kwargs ) except CommandExecutionError as err: ret['comment'] = str(err) return ret
def _get_ptr(self): if self._ptr: return self._ptr else: raise GEOSException('NULL GEOS %s pointer encountered.' % self.__class__.__name__)
transformers = {}
with tm.assert_produces_warning(FutureWarning): rng += other tm.assert_index_equal(rng, expected)
self.assertGreater(exam_score * 100, 50)
self[asset_idx] = metadata_to_insert
do_test(1)
import salt.ext.six as six
grouped.apply(f) grouped.aggregate(freduce) grouped.aggregate({'C': freduce, 'D': freduce}) grouped.transform(f)
import sys del pip if 'pip' in sys.modules: del sys.modules['pip']
angle = np.arctan2(w[0][1], w[0][0])
mock_file.name = name return mock_file
break
draft = self.get_item_from_modulestore(self.problem_usage_key, verify_is_draft=True) self.assertNotEqual(draft.data, published.data)
'cachedir': str,
if use_svd: v = svd(Xi, full_matrices=True)[0] else: Ci = np.dot(Xi, Xi.T) v = eigh(Ci)[1][:, ::-1]
course = store.get_course(course.id, depth=1)
continue
for app_config in self.app_configs.values(): all_models = self.all_models[app_config.label] app_config.import_models(all_models)
host = name
if not is_cross_domain_request_allowed(request): log.debug("Could not set cross-domain CSRF cookie.") return response
strs = 'google', 'wikimedia', 'wikipedia', 'wikitravel' ds = Series(strs)
skip_perm_errors = self.options.eauth != ''
X = csr_matrix(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
elif is_numeric_v_string_like(a, b): result = False
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
output = _cmd('at', '-d', ' '.join(opts)) if output is None: return '\'at.atrm\' is not available.'
group_a_item_1_delete_index = 1 self.delete_and_verify(group_a_item_1_delete_index, expected_ordering)
return reverse('admin:view_on_site', kwargs={ 'content_type_id': get_content_type_for_model(obj).pk, 'object_id': obj.pk })
return self._get_course_info(request, course)
return redirect_with_get('signin_user', request.GET)
self.assertTrue(module_has_submodule(test_module, 'good_module')) mod = import_module('utils_tests.test_module.good_module') self.assertEqual(mod.content, 'Good Module')
del params["honor_code"] params["username"] = "another_test_username" params["email"] = "another_test_email@example.com" self.assert_success(params)
test_data = state_run['cmd_|-test_non_failing_state_|-echo "Should not run"_|-run']['comment'] expected_result = 'State was not run because onfail req did not change' self.assertIn(expected_result, test_data)
from __future__ import absolute_import
proba = sum(all_proba) / self.n_estimators
static_tab_loc = course_key.make_usage_key('static_tab', tab.url_slug) tab.locator = static_tab_loc
is_valid, errors, updated_data = CourseMetadata.validate_and_update_from_json( course_module, request.json, user=request.user, )
import salt.ext.six as six
allna = self.series * nan self.assertTrue(isnull(allna.idxmax()))
self._set_group_access({0: [1]}) expected[0]["groups"][1]["selected"] = True self.assertEqual(self._get_partition_info(), expected)
return False
self.client.get('/fr/simple/') self.assertNotIn(LANGUAGE_SESSION_KEY, self.client.session)
self.assertRaises(TypeError, self._holder)
tomcat.__salt__ = {} tomcat.__opts__ = {} tomcat.__env__ = {}
df2.ix[mask, cols] = dft.ix[mask, cols] assert_frame_equal(df2, expected)
pass
assets, count = contentstore().get_all_content_for_course(self.course.id) self.assertEqual(len(assets), 0) self.assertEqual(count, 0)
permutation = _find_permutation(sample_id_bis, sample_id) y = y[permutation, :]
class Meta(object): model = Dummy
invalidate_generated_certificates(course_id, students_to_generate_certs_for, statuses_to_regenerate)
self.assertEqual(Article.objects.order_by('id').latest(), a4)
('ALIGN', (1, 0), (1, -1), 'LEFT'),
other_cmap = CorrectMap() other_cmap.update(self.cmap)
sparse_results = sparse_classifier.score(X_test_sparse, y_test) dense_results = dense_classifier.score(X_test, y_test) assert_array_equal(sparse_results, dense_results)
data = {'title': 'Testing'} files = {"image": SimpleUploadedFile('test.png', img, 'image/png')}
self._set_opt_in_pref(self.user, "org_alias", False)
resource = url.split('salt://', 1)[-1]
kde = grid.best_estimator_
parent = verticals[0] new_block = self.store.create_child( self.user.id, parent.location, 'html', 'new_component' )
self.assertRedirects(response, '/password_change/done/')
self._check_results(self.staff, set(range(len(self.parents_map))), {}, transformers)
filepath_or_buffer = _stringify_path(filepath_or_buffer) return _expand_user(filepath_or_buffer), None, compression
return
(False, True), (False, False),
X, y = make_hastie_10_2(n_samples=20, random_state=1) clf = BaggingClassifier(n_estimators=5, warm_start=True, oob_score=True) assert_raises(ValueError, clf.fit, X, y)
n_class = dual_coef.shape[0] + 1
response = self.client.get(url) email_section = '<div class="vert-left send-email" id="section-send-email">' self.assertIn(email_section, response.content)
packed = struct.pack('@P', id(obj)) return ''.join(map(_replacer, packed))
left = self.rng[:5] right = self.rng[10:]
train_with_monitoring_datasets( train_dataset=dataset1, monitoring_datasets=no_monitoring_datasets, model_force_batch_size=False, train_iteration_mode='sequential', monitor_iteration_mode='sequential')
try: from Cheetah.Template import Template HAS_LIBS = True except ImportError: HAS_LIBS = False
if usage_info.has_staff_access: return
return
with self.assertRaises(RequestAlreadyCompleted): api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO['username'])
tm.assert_almost_equal(tuple(x), x_rec)
if not name: return 'Required parameter "name" not passed'
y = 0.5 * X.ravel() + rng.randn(n_samples, 1).ravel()
from __future__ import absolute_import, print_function import itertools
signatory = certificate.signatories[0] signatory.edit()
labels = (label == 'root' and node_id == 0) or label == 'all'
self.assertFalse(is_valid) self.assertEqual(len(errors), 3) self.assertFalse(test_model)
return prlctl('snapshot', args, runas=runas)
return x
elif hasattr(self.__class__, action): func = getattr(self.__class__, action)
donation = Donation.add_to_order(self.cart, self.COST) self._assert_donation( donation, donation_type="general", unit_cost=self.COST, line_desc="Donation for edX" )
with self.assertRaises(OGRIndexError): layer.__getitem__(-1) with self.assertRaises(OGRIndexError): layer.__getitem__(50000)
return os.path.join('/sys/block/', dev)
return self._get_structures_for_branch_and_locator(branch, self._create_course_locator, **kwargs)
return False
if not use_winrm:
'HTTP_REFERER': 'referer', 'HTTP_ACCEPT_LANGUAGE': 'accept_language',
proxyfile = '/etc/salt/proxy' status_file, msg_new, msg_old = _proxy_conf_file(proxyfile, test) changes_new.extend(msg_new) changes_old.extend(msg_old) status_proc = False
selection = SelectKBest(k=1)
courseware_page = CoursewarePage(self.browser, self.course_id) self.publish_unit_and_verify_groups_in_lms(courseware_page, [u'Group A', u'Group B', u'Group C'])
yield assert_slice_ok, mgr, ax, [] yield assert_slice_ok, mgr, ax, lrange(mgr.shape[ax])
from openedx.core.lib.block_structure.factory import BlockStructureFactory from xmodule.modulestore.tests.django_utils import ModuleStoreTestCase from xmodule.modulestore.tests.factories import SampleCourseFactory
from salt.ext import six from salt.ext.six.moves import zip
from __future__ import absolute_import import logging import os import os.path from copy import deepcopy import json
from __future__ import unicode_literals
merged_access = descriptor.merged_group_access if False in merged_access.values(): log.warning("Group access check excludes all students, access will be denied.", exc_info=True) return ACCESS_DENIED
head, tail = self.frame[:5], self.frame[5:]
data = fetch_olivetti_faces() targets = data.target
from __future__ import unicode_literals
SECRET_KEY = "very_secret_bok_choy_key"
from salt.modules import postgres import salt.ext.six as six
with self.assertRaises(ValueError): Interstate.objects.length()
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
left = self.rng[:10] right = self.rng[5:10]
return (None, None)
total_num_subtasks = _get_number_of_subtasks(total_num_items, items_per_task) subtask_id_list = [str(uuid4()) for _ in range(total_num_subtasks)]
raise CommandExecutionError( 'Error {0}: {1}'.format(exc.response.status_code, exc.explanation) )
__valid_configs = { 'user': [ 'tomcat-manager.user', 'tomcat-manager:user' ], 'passwd': [ 'tomcat-manager.passwd', 'tomcat-manager:passwd' ] }
from salt.modules import groupadd
self._check_double_roundtrip(df, tm.assert_frame_equal, compression=False, check_frame_type=True)
self.track_selection_page.enroll('verified')
MUTABLE = False
cls.course_commentable_id = "course_level_commentable"
X_whitened = pca.fit_transform(X_.copy()) assert_equal(X_whitened.shape, (n_samples, n_components)) X_whitened2 = pca.transform(X_) assert_array_almost_equal(X_whitened, X_whitened2)
assert_raises(ValueError, compute_sample_weight, [{1: 2, 2: 1}], y_)
if col_name in parse_dates: try: fmt = parse_dates[col_name] except TypeError: fmt = None self.frame[col_name] = _handle_date_column( df_col, format=fmt)
re.compile(r'^Schedule & Details Settings \|'): [ "jquery", "js/base", "js/models/course", "js/models/settings/course_details", "js/views/settings/main"],
self.setup_logfile_logger() verify_log(self.config)
from __future__ import absolute_import import logging
idx = np.argsort(np.sum((X - mean[np.newaxis, :]) ** 2, axis=1)) X = X[idx, :]
encoded_messages = json.loads(encoded_messages) for obj in encoded_messages: obj.pop(1) encoded_messages = json.dumps(encoded_messages, separators=(',', ':'))
try: records = _fixed_getframes(etb, context, tb_offset) except: raise print('\nUnfortunately, your original traceback can not be ' 'constructed.\n') return ''
if is_array and value.dtype.kind in ['M', 'm']: dtype = value.dtype
log = logging.getLogger(__name__)
G = neighbors.kneighbors_graph(X, n_neighbors, mode='distance').toarray()
rng = np.random.RandomState(0)
assert_raises(ValueError, pipe.set_params, anova__C=0.1)
lm = LayerMapping(County, co_shp, co_mapping, transform=False, unique='name')
start, end = end, start
axes = _check_plot_works(df.hist, by='classroom') self._check_axes_shape(axes, axes_num=3, layout=(2, 2))
result = f.clean('2010-12-21') self.assertEqual(result, date(2010, 12, 21))
reload_the_page(step)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON
source = "/foo/bar/fubar.pkg" package_id = "com.foo.fubar.pkg"
import os
if not(len(users) == 1 and caller == users[0]): _check_caller_authority(caller, role) role.remove_users(*users)
xblock = self.store.create_item( self.user_id, test_course.id, 'vertical', block_id='test_vertical' )
self.assertEquals(render.get_score_bucket(11, 10), 'incorrect') self.assertEquals(render.get_score_bucket(-1, 10), 'incorrect')
self.assertEqual(len(partition.groups), 2) self.assertItemsEqual( [g.id for g in partition.groups], [ VerificationPartitionScheme.ALLOW, VerificationPartitionScheme.DENY, ] )
if 'add_{0}'.format(instance) not in vmconfig['changed']: vmconfig['changed']['add_{0}'.format(instance)] = []
self._assert_requirements_displayed(response, [ PayAndVerifyView.PHOTO_ID_REQ, PayAndVerifyView.WEBCAM_REQ, ])
self.assertRaises(ValueError, lambda: ci.set_categories( list('cab'), inplace=True))
from __future__ import unicode_literals
self.reset_tracker()
self.dom_id = dom_id self.extra_context = extra_context self.js_module = js_module self.template = template self.kml_urls = kml_urls
import salt.utils.event
source_list = _validate_str_list(source)
from __future__ import absolute_import import getpass import os import sys import stat import shutil import resource import tempfile import socket
from __future__ import absolute_import import logging
add_user_to_cohort(second_cohort, self.student.username) self.assert_student_in_group(self.groups[1])
run_command = (test_command + 'prepare').format(mode) __salt__['cmd.run'](run_command)
minions_remaining = pub_data['minions']
if sig0[0] != '\x00': raise Exception('Number of unused bits is strange') sig = sig0[1:]
already_fixed = {}
overrides = salt.utils.clean_kwargs(**copy.deepcopy(kwargs)) profile_match = salt.utils.dictupdate.update( copy.deepcopy(profile_match), overrides ) return profile_match
for mode in [CourseMode.DEFAULT_MODE_SLUG, CourseMode.VERIFIED]: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode, mode_display_name=mode, )
return super(XmlDescriptor, cls).parse_xml( etree.fromstring(xml_data), system,
import salt.ext.six as six from salt.ext.six.moves import zip_longest
for (country, rule_type) in country_rules: self.assertIn( { 'country': country, 'rule_type': rule_type }, snapshot['country_rules'] )
for row in db_query: curr_problem = course_id.make_usage_key_from_deprecated_string(row['module_state_key'])
EDX_PLATFORM_REVISION = 'unknown'
'correct': correct,
try: course_assets = self._find_course_assets(course_key) self.asset_collection.remove(course_assets.doc_id) except ItemNotFoundError: pass
config = sconfig.master_config(master_config)
arr = arr.astype(object) self.assertEqual(pd.lib.infer_dtype(arr), compare)
vim-enhanced: pkg.installed: - version: 7.4.160-1.el7 - ignore_epoch: True
if is_empty: raise TypeError('Empty {0!r}: no numeric data to ' 'plot'.format(numeric_data.__class__.__name__))
if sl_: tmpret = _get_template_texts(source_list=sl_, template=template, defaults=defaults, context=context) if not tmpret['result']: return tmpret text = tmpret['data']
import integration
parser = TextParser(lines, index_col=0, chunksize=2, skiprows=[1]) chunks = list(parser) tm.assert_frame_equal(chunks[0], df[1:3])
from __future__ import absolute_import
ssh_gateway_private_key: /path/to/key.pem
valid_get_dict = MultiDict({'input_1[]': 'test'}) result = CapaModule.make_dict_of_responses(valid_get_dict) self.assertEqual(result['1'], ['test'])
if not payload_hash: payload_hash = hashlib.sha256(data).hexdigest()
q.bestchild = c q.save() q.delete()
est = TreeEstimator(min_samples_split=0.2, max_leaf_nodes=max_leaf_nodes, random_state=0) est.fit(X, y) node_samples = est.tree_.n_node_samples[est.tree_.children_left != -1]
updates[mean_square_grad] = new_mean_squared_grad updates[param] = param + delta_x_t
self._subcluster_norms = row_norms( self.subcluster_centers_, squared=True)
from __future__ import unicode_literals
request.special_path = request.path return render(request, 'request_context.html')
self.user = random.getrandbits(32) self.new_course = modulestore().create_course( 'org', 'course', 'test_run', self.user, BRANCH_NAME_DRAFT, )
le = LabelEncoder() Y_multi = le.fit_transform(y)
for app_label, migrations in self.migrations.items(): for migration in migrations: migration.dependencies = list(set(migration.dependencies))
self.store.publish(item_location, self.user_id) item = self.store.get_item(item_location) self.assertTrue(self.store.has_published_version(item)) _check_asides(item)
from salttesting.helpers import ensure_in_syspath, requires_salt_modules
elif level >= self.nlevels: raise IndexError('Too many levels: Index has only %d levels, ' 'not %d' % (self.nlevels, level + 1))
if not ensure_views(): return []
print "Couldn't uninstall unwanted Python packages!" return
import integration import salt.utils
for norb in (SmallNORB('train', stop=1000), NORB(which_norb='small', which_set='train')): test_impl(norb)
index = self.create_index() expected = Index(index.values % 2) self.assert_index_equal(index % 2, expected)
deploy_d_from_syspaths = os.path.join( syspaths.CONFIG_DIR, 'cloud.deploy.d' )
request.session['attempting_upgrade'] = (message == self.UPGRADE_MSG)
nn = NearestNeighbors(metric='chebyshev', n_neighbors=n_neighbors)
subject = render_to_string('emails/activation_email_subject.txt', context) subject = ''.join(subject.splitlines()) message = render_to_string('emails/activation_email.txt', context)
task_folder = task_service.GetFolder(location) tasks = task_folder.GetTasks(0)
root_usage_key = self._create_vertical()
URLCONF_MODULES = ['myapp.url']
self.read_csv(self.csv1, memory_map=True)
test_gmbh = Company.objects.get(name="Test GmbH")
def make_thunk(self, node, storage_map, compute_map, no_recycling): if not convnet_available(): raise RuntimeError('Could not compile cuda_convnet')
print_monitor_cv.main(filename)
allna = self.series * nan self.assertTrue(isnull(allna.idxmin()))
if v == int(v): v = int(v) result.append("%s.0" % v) result.append(str(v))
cherrypy.config['saltopts'] = opts cherrypy.config['apiopts'] = apiopts
result = len0pts.resample('A-DEC').mean() self.assertEqual(len(result), 0)
self.assertAlmostEqual( calc.evaluator(variables, {}, '3*x-y'),
world.scenario_dict['COURSE'] = world.CourseFactory.create( org='edx', number=course, display_name='Test Course' )
self.assertEqual([], os.listdir(TMP_JID_DIR))
from salt.ext.six import string_types
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
clf_invalid_method = CalibratedClassifierCV(clf, method="foo") assert_raises(ValueError, clf_invalid_method.fit, X_train, y_train)
self.store.publish(vertical.location, self.user_id) self.assertFalse(self._has_changes(vertical.location))
start = datetime.now(UTC) self.add_icrv_xblock(related_assessment_name="Midterm A", start_date=start)
rval, xdummy = z_hs.owner.op.grad((dummy_v, sqfilt), (x,))
project_state = ProjectState() project_state.add_model(ModelState.from_model(A)) project_state.add_model(ModelState.from_model(B)) old_state = project_state.clone()
if not hasattr(coeffs, '__iter__'): coeffs = [coeffs] * len(self.layers)
doc = func.__doc__
df = DataFrame([[True]]) self.assertTrue(df.bool())
credentials = storage.get() if credentials is None or credentials.invalid: credentials = tools.run(flow, storage)
def obj_func(theta, eval_gradient=True): if eval_gradient: lml, grad = self.log_marginal_likelihood( theta, eval_gradient=True) return -lml, -grad else: return -self.log_marginal_likelihood(theta)
result = sparse.loc[orig % 2 == 1] exp = orig.loc[orig % 2 == 1].to_sparse(fill_value=0) tm.assert_sp_series_equal(result, exp)
self.estimators_ = [] self.estimator_weights_ = np.zeros(self.n_estimators, dtype=np.float64) self.estimator_errors_ = np.ones(self.n_estimators, dtype=np.float64)
if isinstance(address, bytes): self.network_address = IPv6Address(address) self._prefixlen = self._max_prefixlen self.netmask = IPv6Address(self._ALL_ONES) return
ax = _check_plot_works(self.ts.plot, subplots=True) self._check_axes_shape(ax, axes_num=1, layout=(1, 1))
from __future__ import absolute_import
pred = mb_k_means.predict(mb_k_means.cluster_centers_) assert_array_equal(pred, np.arange(n_clusters))
from salttesting.unit import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
if status == "satisfied" and not eligible_before_update: is_eligible, eligibility_record_created = CreditEligibility.update_eligibility(reqs, username, course_key) if eligibility_record_created and is_eligible: try: send_credit_notifications(username, course_key)
from __future__ import absolute_import
import salt.utils import salt.exceptions
folders_list_in_path.extend(['data', 'uploads', file_name])
self.draft_store.delete_course(course.id, self.dummy_user)
tag = gettag(xml)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
current_umask = os.umask(0o027) verify_files([logfile], self.config['user']) os.umask(current_umask)
verify_order(self.html_usage_key, self.seq_usage_key, 2) verify_order(self.seq_usage_key, self.chapter_usage_key, 0)
text = f.widget.format_value(result) self.assertEqual(text, "13:30:05")
num_incorrect = num_pool - 1 num_incorrect = min(num_incorrect, len(incorrect_choices))
for student in students[:7]: CertificateWhitelistFactory.create(user=student, course_id=self.course.id, whitelist=True)
'test': bool,
if (v > 2**63 - 1).any(): object_items.append((i, k, v)) continue
if os.environ.get('TRAVIS_PYTHON_VERSION', None) is not None: time.sleep(10) else: time.sleep(2)
assert len(course_assets['assets']) == 0 self.asset_collection.update( {'_id': doc_id}, {'$set': {'assets': {}}} )
if not self.has_partial_credit: return self.grade_without_partial_credit(student_answer=student_answer)
self.assertEquals(imported_word_cloud.data, '')
s = string_at(result) free(result) return s
if db_field.choices: return self.formfield_for_choice_field(db_field, request, **kwargs)
rng = np.random.RandomState(0) n_samples, n_features = 500, 2
is_datetimetz = com.is_datetimetz(values) if is_datetimetz: values = DatetimeIndex(values) vals = values.tz_localize(None)
assert preprocessor.P_.shape == (self.X.shape[1], self.X.shape[1]) assert_allclose(np.dot(preprocessor.P_, preprocessor.inv_P_), identity, rtol=1e-4)
from pandas import Categorical, Series arr = Categorical(list('abc')) result = lib.infer_dtype(arr) self.assertEqual(result, 'categorical')
shape = left.apply(Series.nunique).values self.assertTrue(_int64_overflow_possible(shape))
query = "UPDATE auth_userprofile SET country = NULL WHERE id = %s" connection.cursor().execute(query, [str(self.user.profile.id)])
from __future__ import absolute_import import logging
reindexed_bool = bool_ts.reindex(self.ts.index)
inspect_image(image)
line_X = np.arange(-5, 5) line_y = model.predict(line_X[:, np.newaxis]) line_y_ransac = model_ransac.predict(line_X[:, np.newaxis])
features_in_first_mlp = 5 features_in_second_mlp = 10 targets_in_first_mlp = 2 targets_in_second_mlp = 2
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
wp = self.panel.to_panel() new_index = wp.major_axis[::5]
'keysize': int,
Yt = IncrementalPCA(n_components=2).fit(X).transform(Xt)
continue
from __future__ import absolute_import, print_function
from __future__ import unicode_literals
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
adds[k] = Tags[k]
with assertRaisesRegexp(ValueError, "level should contain"): unstacked.stack([0, 'month'])
self.drop_table('test_frame1')
stack.addRemote(RemoteYard(stack=stack, name='manor', lanename=lanename, dirpath=sockdirpath)) console.concise("Created Jobber Stack {0}\n".format(stack.name)) return stack
super(Minion, self).__init__(opts) self.timeout = timeout self.safe = safe
df = self.hist_df
tables = None
self.available_apps = None
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
na_values, na_fvalues = _clean_na_values(na_values, keep_default_na)
panel.loc['a2'] = df2 tm.assert_frame_equal(panel.loc['a1'], df1) tm.assert_frame_equal(panel.loc['a2'], df2)
for _ in xrange(30): self._send_bad_redirection_login()
class HTMLParseError(Exception): pass
problem_page.fill_answer("4") problem_page.click_check() self.assertFalse(problem_page.is_correct())
try: value = result.get(timeout=4.0) success = True except TimeoutError: value = None success = False
y_test = check_array(y_test, dtype=np.float64, ensure_2d=False)
print("Estimated B") print(np.round(pls2.coef_, 1)) pls2.predict(X)
from __future__ import absolute_import
from __future__ import absolute_import
from __future__ import unicode_literals
group_vpc = conn.create_security_group(name=group_name, description=group_description, vpc_id=vpc_id) retrieved_group_id = boto_secgroup.get_group_id(group_name, group_vpc, **conn_parameters) self.assertEqual(group_vpc.id, retrieved_group_id)
response = self.client.get(choose_track_url) self.assertRedirects(response, reverse('dashboard'))
with self.assertRaises(NotFoundError): self.item.get_transcript(transcripts)
df_size = df.memory_usage().sum() exp_size = len(dtypes) * n * 8 + df.index.nbytes self.assertEqual(df_size, exp_size)
p = Place.objects.get(pk=self.p1.pk) r = p.restaurant with self.assertNumQueries(0): self.assertEqual(r.place, p)
self._optimizer.iteration_ends(self.t_)
elif needs_i8_conversion(left) and needs_i8_conversion(right): if not is_dtype_equal(left.dtype, right.dtype): return False
ns = {} if not ns else ns klass = type(klass_name, (slicer, ), ns)
try: from django.conf import settings lib_path = settings.GDAL_LIBRARY_PATH except (AttributeError, EnvironmentError, ImportError, ImproperlyConfigured): lib_path = None
haproxyconn.__opts__ = {}
Lars.fit(self, X, y) return self
self.page.create_experiment_group_configuration()
try: self._srs = gdal.SpatialReference(self.wkt) return self.srs except Exception as msg: pass
def _warning_function(): warnings.warn("deprecation warning", DeprecationWarning)
if content.get('group_id') is not None: content['group_name'] = get_cohort_by_id(course_key, content.get('group_id')).name
__virtualname__ = 'docker_events'
from __future__ import absolute_import import os import textwrap
print("Estimated betas") print(np.round(pls1.coef_, 1))
self.assertEqual(len(mail.outbox), 1)
X, y = make_hastie_10_2(n_samples=20, random_state=1) X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=43)
iris = load_iris() X = iris.data pca = PCA(n_components=2, svd_solver='full') pipeline = Pipeline([('pca', pca)])
s1 = make_dtnat_arr(chunksize + 5) s2 = make_dtnat_arr(chunksize + 5, 0)
for f in ['to_frame', 'to_excel', 'to_sparse', 'groupby', 'join', 'filter', 'dropna', 'shift']:
option2 = main2
cidx2 = CategoricalIndex(list('aacded'), categories=list('edabc')) idx2 = Index(list('aacded'))
leaf_weights = node_weights[node_weights != 0] assert_greater_equal( np.min(leaf_weights), total_weight * est.min_weight_fraction_leaf, "Failed with {0} " "min_weight_fraction_leaf={1}".format( name, est.min_weight_fraction_leaf))
- volumes: /usr/local/etc/ssl/certs/example.crt: bind: /etc/ssl/certs/com.example.internal.crt ro: True /var/run: bind: /var/run/host/ ro: False
self.assert_index_equal(c.categories, Index([4, 3, 2, 1]))
result = f.clean('13.30.05') self.assertEqual(result, time(13, 30, 5))
assert_true(np.all(np.less_equal(sorted_dists_exact, sorted_dists_approx)))
colors_hsv = np.ones((n_colors, 3)) colors_hsv[:, 2] *= .75 colors_hsv[:, 0] = colors_hue
'ENABLE_MAX_FAILED_LOGIN_ATTEMPTS': True,
import salt.ext.six as six
self.assertEqual([x.get_text() for x in ax.get_legend().get_texts()], base_expected[:i] + base_expected[i + 1:])
label_spread = label_propagation.LabelSpreading(kernel='knn', alpha=1.0) label_spread.fit(X, labels)
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21")
for field in ('client_type', 'client_secret', 'client_id', 'authorization_grant_type'): form.fields.pop(field)
fields = ((f[1:] if f.startswith('-') else f) for f in fields)
from crum import get_current_request
results = (course for course in results if self.user_can_access_course(self.request.user, course))
with salt.utils.fopen(proc_fn, 'w+b') as fp_: fp_.write(salt.payload.Serial(self.opts).dumps(ret))
self.index = {}
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
if source and not (not follow_symlinks and os.path.islink(real_name)): name_sum = get_hash(real_name, source_sum['hash_type']) else: name_sum = None
from __future__ import absolute_import
from salt.modules import win_dism as dism
result = c.codes[np.array([100000]).astype(np.int64)] self.assertEqual(result, np.array([5], dtype='int8'))
reindexed = self.empty.reindex(self.ts.index, method='pad')
instance = self.run_cloud('-p ec2-test {0}'.format(INSTANCE_NAME)) ret_str = '{0}:'.format(INSTANCE_NAME)
if name in all_virt and name not in pkgs: candidate = '1' else: candidate = ''
self.service.set_credit_requirement_status( self.user.id, self.course.id, 'grade', 'grade' )
from __future__ import absolute_import import collections import logging
from __future__ import unicode_literals
self.valid_clear_load['fun'] = 'sys.doc' self.assertNotEqual(fire_event_mock.call_args[0][0]['fun'], 'sys.doc')
redirect_uri = super(ExceptionMiddleware, self).get_redirect_uri(request, exception)
self.file_mapping[f_noext] = (fpath, ext)
if which_set in ['train', 'test']: data_x, data_y = load_data("{0}{1}_32x32.mat".format(path, which_set))
format = 's' if format is None else format return to_datetime(col, errors='coerce', unit=format, utc=True)
error = ValidationError(error)
if value.lower() in _unit_map: return _unit_map[value.lower()]
salt '*' vsphere.vsan_disable my.esxi.host root bad-password
from salt.exceptions import SaltInvocationError import salt.utils.pushover
for student in students[2:5]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.error, mode='honor', grade=default_grade )
result = f.clean('13.30.05') self.assertEqual(result, time(13, 30, 5))
old_password_hash = user.password
indexed_count = { "count": 0 }
conf = { 'reposdir': ['/etc/yum/repos.d', '/etc/yum.repos.d'], }
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
cleansed = CallableSettingWrapper(cleansed)
text = f.widget.format_value(result) self.assertEqual(text, "01:30:00 PM 21/12/2010")
from __future__ import absolute_import
BULK_EMAIL_ROUTING_KEY_SMALL_JOBS = LOW_PRIORITY_QUEUE
DATE_INPUT_FORMATS = [
self.assertEqual( include(self.url_patterns, 'namespace', 'app_name'), (self.url_patterns, 'app_name', 'namespace') )
(grains['kernel'], grains['nodename'], grains['kernelrelease'], version, grains['cpuarch'], _) = platform.uname()
_network_error_classes = (IOError, httplib.HTTPException)
class Mocked(PasswordResetTokenGenerator): def __init__(self, today): self._today_val = today
self.assertEqual(event.dt, dt.replace(microsecond=0))
from __future__ import unicode_literals
logging.root.addHandler(LOGGING_STORE_HANDLER)
n_samples = int(X.shape[0]) rs = check_random_state(self.random_state)
import xlrd
def render_to_template_mock(*args): pass
expected_y = y.mf_update( state_below = v.upward_state(v_state))
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
result = df.copy() result[('red', extra)] = 'world' result = result.sort_index(axis=1) assert_frame_equal(result, expected)
raise
CourseEnrollmentFactory( user=self.user_2, course_id=self.course.id, is_active=True, mode='audit' ) CertificateWhitelistFactory(course_id=self.course.id, user=self.user_2)
i = index_col if not com.is_list_like(index_col) else max(index_col) return none_fill(row[i]), row[:i] + [''] + row[i + 1:]
result = symmath_check(expected_str, input_str, dynamath=[dynamath]) self.assertTrue('ok' in result and result['ok'])
import salt.config import salt.client.raet
from __future__ import absolute_import
expected = self.frame.cov() result = self.frame.cov(min_periods=len(self.frame))
if full_funcname not in self._dict: self._dict[full_funcname] = func if funcname not in mod_dict: setattr(mod_dict, funcname, func) mod_dict[funcname] = func self._apply_outputter(func, mod)
act_grad = self._activation_grad(inputs) jacobian = self.weights * act_grad.dimshuffle(0, 'x', 1) return jacobian
src = os.path.normpath(src) link = os.path.normpath(link)
raise nose.SkipTest("doesn't work as in PY3")
ASSET_XML_PATH = COURSE_DATA_DIR / AssetMetadata.EXPORTED_ASSET_DIR / AssetMetadata.EXPORTED_ASSET_FILENAME
if isinstance(path_or_buf, compat.string_types):
self.client.login(username=self.coach.username, password="test")
import os try: import spwd HAS_SPWD = True except ImportError: HAS_SPWD = False try: import pwd except ImportError:
if os.path.isfile(join(dirname(abspath(__file__)), 'private.py')):
swagger = _Swagger(api_name, stage_name, lambda_funcname_format, swagger_file, common_args)
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True, False], credit_type='halves' )
result = ts2['2011'].sort_index() expected = ts['2011'] assert_series_equal(result, expected)
import ioflo.app.run import salt.ext.six as six
from student.views import login_user return shim_student_view(login_user, check_logged_in=True)(request)
import logging
self.assertFalse([ requirement for requirement in requirements if requirement['namespace'] == 'proctored_exam' ])
connection.savepoint_rollback(sid)
errorlog = make_error_tracker()
from __future__ import absolute_import import os import yaml import signal import shutil
max_scores_cache.fetch_from_remote([location_to_cache]) self.assertIsNotNone(max_scores_cache.get(location_to_cache)) self.check_grade_percent(0.33)
from django.conf.urls import url
a = Article( id=None, headline='Swallow bites Python', pub_date=datetime(2005, 7, 28), ) a.save()
seed_permissions_roles(self.course.id)
clf = svm.SVC(kernel='linear', probability=True, random_state=0) probas_pred = clf.fit(X[:half], y[:half]).predict_proba(X[half:])
sorted_series = random_order.sort_index(ascending=False) assert_series_equal(sorted_series, self.ts.reindex(self.ts.index[::-1]))
self.assertIsNone(Comment.objects.select_related('post').filter(post__isnull=True)[0].post)
child = self.store.get_item(child.location) child.display_name = 'Changed Display Name' self.store.update_item(child, user_id=editing_user)
self.assert_enrollment_status(as_server=True)
random_state = check_random_state(est.random_state) seed = random_state.randint(0, np.iinfo(np.int32).max)
df[df[:-1] < 0] = 2 np.putmask(values[:-1], values[:-1] < 0, 2) assert_almost_equal(df.values, values)
try: slc = self.get_loc(label) except KeyError as err: try: return self._searchsorted_monotonic(label, side) except ValueError: raise err
intra_clust_dists = np.ones(distances.shape[0], dtype=distances.dtype)
bio.write(struct.pack(byteorder + 'i', self.n))
with warnings.catch_warnings(record=True): dates += offset
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
log = logging.getLogger(__name__)
df['foo'].values[:] = 0 self.assertTrue((df['foo'].values == 0).all())
return 'unknown'
from __future__ import absolute_import import os
from __future__ import unicode_literals
return response
output_multip = enter_mainloop( _destroy_multiprocessing, parallel_data, pool_size=pool_size)
tab_id_locator = request.json['tab_id_locator']
resolved_envs = [ aenv for aenv in matches if fnmatch.filter(self.avail[aenv], inc_sls) ]
attempt = SoftwareSecurePhotoVerification.objects.create(user=user)
EmptyPromise( lambda: self.outline_page.is_browser_on_page(), "loaded page {!r}".format(self.outline_page), timeout=30 ).fulfill()
'hash_type': str,
if not is_credit_course(course_key): return
SOCIAL_MEDIA_FOOTER_URLS = ENV_TOKENS.get('SOCIAL_MEDIA_FOOTER_URLS', SOCIAL_MEDIA_FOOTER_URLS)
response = external_auth.views.redirect_with_get('root', request.GET)
return self
df = orig.copy() df.ix["j", 0] = "b" tm.assert_frame_equal(df, exp_single_cats_value)
DARK_LANGUAGE_KEY = 'dark-lang'
chapter = self.store.create_item( self.user_id, test_course.id, 'chapter', block_id='vertical_container' )
self.assertEqual(u.get_username(), 'testuser')
import os import re
from __future__ import absolute_import
has_native_uuid_field = False
plt.subplot(2, 2, i + 1) plt.subplots_adjust(wspace=0.4, hspace=0.4)
([], 'honor'),
self.assertFalse(result, msg="User should not have access because the user isn't staff.")
current_fetch_url = None if remote in remotes: current_fetch_url = remotes[remote]['fetch']
if 'port' in _options: _options['port'] = int(_options['port']) return _options
CourseRerunState.objects.failed(course_key=destination_course_key) logging.exception(u'Course Rerun Error') return "duplicate course"
from __future__ import unicode_literals
sheets = list(set(sheets))
if vm.summary.runtime.powerState != "poweredOn": status = 'VM must be powered on to upgrade tools' return status
ridge.fit(X, y, sample_weights_OK) ridge.fit(X, y, sample_weights_OK_1) ridge.fit(X, y, sample_weights_OK_2)
self.assertEqual(list(r), [])
self.cpub = True
self.interpolates_text_or_html = True
if i > 0 and i < nindexes: repeater = np.prod( [indexes[bi].shape[0] for bi in range(0, i)]) idx = np.tile(idx, repeater)
if uninstaller.startswith(('salt:', 'http:', 'https:', 'ftp:')):
if not db_exists(name, **connection_args): log.info('DB \'{0}\' does not exist'.format(name)) return False
callback_url = request.build_absolute_uri( reverse("shoppingcart.views.postpay_callback") )
self.student_id = "99" self.student_name = "testcert" self.student_email = "cert@example.com"
self.show_admin_actions = not self.show_full_result_count or bool(full_result_count) self.full_result_count = full_result_count self.result_list = result_list self.can_show_all = can_show_all self.multi_page = multi_page self.paginator = paginator
if result != 1: return None return last_arg_byref(cargs)
if opts['master_sign_pubkey']:
self.assertTrue(isinstance(df.set_index( [df.index, df.index]).index, MultiIndex))
cat = models.ForeignKey(Category, models.CASCADE) self.assertEqual('id', cat.remote_field.get_related_field().name)
if not self._verify_auth(): self.redirect('/login') return
alias, driver = profile_data.get('provider').split(':') provider_details = self.opts['providers'][alias][driver].copy() del provider_details['profiles']
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
server = Server( name=vm_['name'], ram=vm_size['ram'], cores=vm_size['cores'], create_volumes=[volume] )
n_samples = self.X.shape[0] D = self.D ij = self.ij F = self.F
from track.backends.django import TrackingLog
EDX_XML_PARSER = XMLParser(dtd_validation=False, load_dtd=False, remove_comments=True, remove_blank_text=True, encoding='utf-8')
new_blocks = [] if self.ndim > 1: for i, ref_loc in enumerate(self.mgr_locs): m = mask[i] v = new_values[i]
assert_true(np.any(y_pred3 != y7))
DATE_INPUT_FORMATS = [
cli_log_path, self.config.get( self._logfile_config_setting_name_, self._default_logging_logfile_ )
self.xmodule_runtime.xmodule_instance = None
if app_labels: conflicts = { app_label: conflict for app_label, conflict in iteritems(conflicts) if app_label in app_labels }
#latex_domain_indices = True
ret['comment'] = 'User {0} is not present, so it cannot be removed'\ .format(name) return ret
self.assertIn("basic", project_state.real_apps)
for field_name in InheritanceMixin.fields: record_filter['metadata.{0}'.format(field_name)] = 1
safe_exec("rnums = [random.randint(0, 999) for _ in xrange(100)]", g) self.assertNotEqual(g['rnums'], rnums)
a2 = Person(full_name_2='Paul McCartney') a2.save() self.assertEqual(a2.first_name, 'Paul')
if not all_packages: logger.warning("[up] '{0}' is not installed, " "cannot upgrade.".format(this_package)) pass
self._update_password(staff_email, "updated") self._login(staff_email, "updated")
can_introspect_small_integer_field = False
try: import gen_rst except: pass
import pprint
from __future__ import absolute_import
return True
response = self.send_get(client) self.assertEqual("m", response.data["gender"])
__func_alias__ = { 'list_': 'list' }
axes = df.ix[:, [0]].plot(kind='kde', color='DodgerBlue', subplots=True) self._check_colors(axes[0].lines, linecolors=['DodgerBlue'])
with self.assertRaises(GDALException): OGRGeomType(23) with self.assertRaises(GDALException): OGRGeomType('fooD') with self.assertRaises(GDALException): OGRGeomType(9)
self.assert_grade(problem, answer, "correct")
self.assertOLXIsDraftOnly(block_list_to_unpublish) with self.assertRaises(ItemNotFoundError): self.unpublish(block_list_to_unpublish)
from salt.ext.six import string_types
if groups[0] != 0: groups.insert(0, 0)
wait = None
self.skipTest( 'You don\'t have the required permissions to run this test' )
fraction_mode_ever = True position = "denominator"
log.debug("configuration error in split test module: no such child") return []
return JsonError(["username parameter is required"])
from salt.modules import powerpath
def __getstate__(self): return bytes(self.wkb), self.srid
example_messages = ['test', 'me'] set_session_data(storage, example_messages) self.assertEqual(list(storage), example_messages)
if missing_vms: return ret
for handler in self._upload_handlers: if hasattr(handler, 'file'): handler.file.close()
if relation == RECURSIVE_RELATIONSHIP_CONSTANT: relation = scope_model
flds = layer.fields for f in flds: self.assertIn(f, source.fields)
if not s: return
certs_api.set_cert_generation_enabled(self.course.id, False) self._assert_enable_certs_button_is_disabled()
children_headers = self._set_library_content_settings(count=2, capa_type="Custom Evaluated Script") self.assertEqual(children_headers, set())
return pkg_info['versions']['stable'] or pkg_info['versions']['devel']
ret.update({esxi_host: response})
self.selenium.find_element_by_id('calendarlink0').click()
generic_relation_concrete = GenericRelation(Relation)
from __future__ import absolute_import import os
problem.display_name = "updated before calling revert" self.store.update_item(problem, self.user_id) self.store.revert_to_published(self.vertical_x1a, self.user_id)
from __future__ import absolute_import import os import struct
tolerance = self._convert_tolerance(tolerance)
result = df.loc[10, :] expected = df.ix[10, :] assert_frame_equal(result, expected)
connections_dict = {} connection.cursor() connections_dict[id(connection)] = connection
sh("i18n_tool generate")
import tornado.testing import tornado.gen from tornado.testing import AsyncTestCase
assert_equal((i + 1), scaler_incr.n_samples_seen_)
import salt.utils
'grains_dirs': list,
VerificationCheckpoint.objects.create(course_id=self.course.id, checkpoint_location=self.checkpoint_midterm)
return is_active and enrollment_mode in CourseMode.UPSELL_TO_VERIFIED_MODES
(validate_integer, '42', None), (validate_integer, '-42', None), (validate_integer, -42, None),
if not has_access_on_students_profiles: raise Http404 try: student = User.objects.get(id=student_id) except (ValueError, User.DoesNotExist): raise Http404
ldapmod.__salt__ = {}
win_firewall.__salt__ = {} win_firewall.__opts__ = {}
mock_get_cache.return_value = self.cache
index = pd.date_range('2015-01-01', periods=2, tz='utc')
self.assertTrue(check_password('letmein', encoded, setter, 'argon2')) self.assertTrue(state['upgraded'])
self.socket.close()
from salttesting.helpers import ( ensure_in_syspath, skip_if_not_root, skip_if_binaries_missing ) from salttesting import skipIf ensure_in_syspath('../../')
return os.sep.join(folders_list_in_path)
VS_batch = VS.make_theano_batch() new_SVS_batch = VS.format_as(VS_batch, VS_sparse) new_VS_batch = VS.undo_format_as(new_SVS_batch, VS_sparse) assert new_VS_batch is VS_batch assert new_SVS_batch is not VS_batch
expected = f.sum(axis=0) result = f.sum(axis='index') assert_series_equal(result, expected)
X = check_array(X, accept_sparse=['csr', 'csc']) n_samples = X.shape[0]
cur_mbegin = self.m_offset.rollback(dt_in) cur_cmbegin = self.cbday.rollforward(cur_mbegin)
pieces["closest-tag"] = None count_out = run_command(GITS, ["rev-list", "HEAD", "--count"], cwd=root)
space, source = data_specs if isinstance(space, CompositeSpace): sub_spaces = space.components sub_sources = source else: sub_spaces = (space,) sub_sources = (source,)
out = merge(left, right, how='left', sort=False) assert_frame_equal(left, out[left.columns.tolist()])
p = Place.objects.get(name="Demon Dogs") r = p.restaurant
d1, d2 = self.series.index[[5, 15]] result.ix[d1:d2] = 6
df = DataFrame('hello', lrange(1000), lrange(5))
ret['comment'] = 'stage {0} does not exist'.format(self._stage_name)
alice_profile = UserProfile.objects.using('default').create(user=alice, flavor='chocolate') with self.assertRaises(ValueError): bob.userprofile = alice_profile
self.user = UserFactory.create(username=self.USERNAME, password=self.PASSWORD) self.user.profile.name = self.USER_FULL_NAME self.user.profile.save()
UserCourseTagFactory( user=self.student, course_id=self.course.id, key='xblock.partition_service.partition_{0}'.format(self.partition.id), value=str(user_tag) )
arr = np.arange(20, dtype=float) index = np.arange(20) arr[:2] = nan arr[5:10] = nan arr[-3:] = nan
from os import environ
book = Book.objects.using('other').select_related('editor').get(title="Dive into Python")
res = grainsmod.filter_by(dict2, grain='xxx', default='xxx', base='default') self.assertEqual(res, dict2['default'])
key = Timestamp(key, tz=tz)
del self._args_for_getstate del self._kwargs_for_getstate return {'args': args, 'kwargs': kwargs}
response = self.client.post(self.url, { "email": self.EMAIL, }) self.assertHttpBadRequest(response)
number2 = models.IntegerField(blank=True, default=Numbers.get_static_number)
from __future__ import absolute_import
PennsylvaniaCity.objects.create(name='Mansfield', county='Tioga', point='POINT(-77.071445 41.823881)')
data = _cast_to_stata_types(data)
result = s[(x > 0 for x in s)] expected = s[s > 0] assert_series_equal(result, expected)
course = self.create_course_with_orphans(module_store)
if not self.loaded: self._load_all() return len(self._dict)
result.name = None
order_by.append(( OrderBy(self.query.annotations[col], descending=descending), False)) continue
CIFAR_FOLDER = "./cifar-10-batches-py/" SVHN_FOLDER = "./SVHN/"
log.error('Minion process encountered exception: {0}'.format(exc)) os._exit(salt.defaults.exitcodes.EX_GENERIC)
self.assert_enrollment_status(as_server=True, mode=selected_mode)
from django.contrib.auth import models as auth_app
state = __salt__['{0}.state'.format(container_type)]
if build_axes:
self.assertFalse(self.cohort_management_page.is_category_selected())
if not get_override_for_user(student, unit, 'due'): raise DashboardError(_("No due date extension is set for that student and unit."))
result['_id'] = str(result['_id'])
self.assertTrue( self.run_function('xattr.write', [TEST_FILE, 'spongebob', 'squarepants']))
if request.user.is_authenticated() and survey.utils.must_answer_survey(course, user): return redirect(reverse('course_survey', args=[unicode(course.id)]))
for app_config in apps.get_app_configs(): if module_has_submodule(app_config.module, "management"): import_module('.management', app_config.name)
state = dict(state.items() + matrices.items()) del matrices
header_parser = struct.Struct('L') ReparseTag, = header_parser.unpack(reparse_data[:header_parser.size]) if not ReparseTag & 0xA000FFFF == 0xA000000C: return False else: return True
from __future__ import absolute_import import os import re import logging import glob
import salt.ext.six as six
result = self.frame.add(self.frame[:0]) assert_frame_equal(result, self.frame * np.nan)
from __future__ import unicode_literals
wp = Panel.from_dict(d, intersect=True) self.assert_index_equal(wp.major_axis, itemb.index[5:])
for parent in path.split(os.path.sep): try: tree = self.repo.get_object(tree[parent][1]) except (KeyError, TypeError): return None return tree
data.__grains__ = {} data.__salt__ = {} data.__opts__ = {}
continue
self.check_layer()
try: new_data = data.astype('int64') if (new_data == data).all(): data = new_data result = True except: pass
fig, axes = self.plt.subplots(2, 3) df = DataFrame(np.random.rand(10, 3), index=list(string.ascii_letters[:10]))
if packages_to_upgrade==[]:
executor.loader.build_graph()
for field in m2m_type_fields: reverse_field = field.remote_field self.assertTrue(reverse_field.is_relation) self.assertTrue(reverse_field.many_to_many) self.assertTrue(reverse_field.related_model)
self._auto_auth("STAFF_TESTER", "staff101@example.com", True)
return result_index, result
out = np.empty((len(indexer), arr.shape[1]), dtype='float32')
best = sorted(grid_scores, key=lambda x: x.mean_validation_score, reverse=True)[0] self.best_params_ = best.parameters self.best_score_ = best.mean_validation_score
self.video.hide_closed_captions() self.video.wait_for_closed_captions_to_be_hidden() self.video.reload_page() self.video.wait_for_closed_captions_to_be_hidden()
max_width = 0
self.assertEqual(sorted_deps[-1], M2MThroughAB)
num_braces = 0
if not __opts__['test'] and len(ret['changes']) > 0: ret['result'] = _write_config(config)
"payment_url": get_purchase_endpoint(),
if getattr(field, 'remote_field', None) is None: field_type = field.db_type(connection)
def __setstate__(self, state): self.__init__(state['opts'])
class BandAdmin(ModelAdmin): exclude = ['bio']
buf = g.buffer(width, quadsegs) self.assertEqual(exp_buf.num_coords, buf.num_coords) self.assertEqual(len(exp_buf), len(buf))
SESSION_COOKIE_NAME = str(SESSION_COOKIE_NAME)
self.lc_block.max_count = 10 self.lc_block.capa_type = 'multiplechoiceresponse' self.lc_block.refresh_children() result = self.lc_block.validate()
for definition in bulk_write_record.definitions.values(): definition_id = definition.get('_id') if definition_id in ids: ids.remove(definition_id) definitions.append(definition)
keep_lambda = lambda_ < self.threshold_lambda coef_[~keep_lambda] = 0
self.assertRaises(ValueError, lambda: frequencies.infer_freq( Series(['foo', 'bar'])))
with override_settings(DEBUG=False): response = self.client.get(url) self.assertNotContains(response, 'Have debug')
c_float_p = ctypes.POINTER(ctypes.c_float)
contents = filepath_or_buffer.read() try: contents = contents.encode(self._encoding) except: pass self.filepath_or_buffer = compat.BytesIO(contents)
dive.authors.set([mark])
rng = np.random.RandomState(0) X = rng.randn(10, 2) connectivity = kneighbors_graph(X, 5, include_self=False)
rng = np.random.RandomState(0) n_samples = 100 n_features = 10
import salt.utils
rs = ser.replace([np.nan, 'foo', 'bar'], -1)
self._write(_pad_bytes("", 5)) self._prepare_data() self._write_data() self._write_value_labels() self._file.close()
yield check_oob_score, name, iris.data, iris.target * 2 + 1
from __future__ import absolute_import
self._assert_enable_certs_button(True)
task_folder = task_service.GetFolder(location) task_definition = task_folder.GetTask(name).Definition triggers = task_definition.Triggers
import glob import logging import os import stat
add_user_to_cohort(cohorts[cohort_index], self.user.username)
contentstore().generate_thumbnail(unlock_content, dimensions=(16, 16)) contentstore().generate_thumbnail(lock_content, dimensions=(16, 16))
if name not in list_folders(location): return True else: return False
elif trigger_types[trigger_type] == TASK_TRIGGER_LOGON: trigger.Id = 'OnLogon_ID1'
assert_allclose(np.cov(preprocessed_X.transpose(), bias=1), identity, rtol=1e-4, atol=1e-4)
from docutils.parsers.rst import directives from docutils import nodes
__virtualname__ = 'win_iis'
TEST_DIR = REPO_ROOT / ".testids"
location = urljoin(current_uri, location)
student_module__in=[module.id for module in student_modules]
else: eligibility_status = "partial_eligible"
assert_array_almost_equal(dist1, dist2)
user: myuser@pam or myuser@pve password: mypassword url: hypervisor.domain.tld driver: proxmox verify_ssl: True
self.assertEqual(response.status_code, 200) self.assertContains(response, "<li>Unchangeable object: UnchangeableObject object</li>", 1, html=True)
if not isinstance(lowstate, list): raise cherrypy.HTTPError(400, 'Lowstates must be a list')
import salt.auth import salt.wheel
if isinstance(cfg, dict): c_cfg = cfg else: c_cfg = cfg('{0}'.format(virtualname), {})
self.assertEqual(info['blocks'], [])
data = 'a,b,c\n4,5,6\n"\\' self.assertRaises(Exception, self.read_csv, StringIO(data), escapechar='\\')
log.error('Running \'git --version\' returned no stdout') __context__[contextkey] = 'unknown'
for qs in self.fast_deletes: count = qs._raw_delete(using=self.using) deleted_counter[qs.model._meta.label] += count
if dtype is None: dtype, value = _infer_dtype_from_scalar(value) else: value = _possibly_cast_to_datetime(value, dtype)
biggie = DataFrame({'A': randn(200), 'B': tm.makeStringIndex(200)}, index=lrange(200))
dts = self.ts.index.to_series() q = dts.quantile(.2) self.assertEqual(q, Timestamp('2000-01-10 19:12:00'))
new_values = self.values.tz_localize(None).asi8.take(indexer)
class m2msimple(models.Model): id2 = models.ForeignKey(ModelWithLongField, models.CASCADE)
t = datetime.datetime.utcnow()
import salt.ext.six as six
init_worker = _init_worker run_subsuite = _run_subsuite
elif (self.is_datetime_lhs and (self.is_timedelta_rhs or self.is_offset_rhs)):
url(r'add_users_to_cohorts$', 'instructor.views.api.add_users_to_cohorts', name="add_users_to_cohorts"),
if (not partial and param.kind != _VAR_POSITIONAL and param.default is _empty): raise TypeError('{arg!r} parameter lacking default value'. \ format(arg=param_name))
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
salt '*' vsphere.list_non_ssds my.esxi.host root bad-password
operations = []
import re import os
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
salt '*' vsphere.list_ssds my.esxi.host root bad-password
ret = self.run_function('user.delete', [DEL_USER]) self.assertTrue(ret)
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
elif is_numeric_v_string_like(values, other): result = False
group_id_to_child = ReferenceValueDict( help=_("Which child module students in a particular group_id should see"), scope=Scope.content )
try: self.assertIsNotNone(o.data) except ValueError: pass
return self.astype(object).putmask(mask, value)
self.run_function('beacons.delete', ['ps']) self.run_function('beacons.save')
indices = np.argsort(n_samples_per_label)[::-1] n_samples_per_label = n_samples_per_label[indices]
(vals, idx, cols), object_state = state
for element in t.nodes[:-1]: self._dispatch(element) self._write(", ")
self.update_structure(course_key, new_structure)
self.assertContains(resp, 'This is a Test Microsite footer')
STOP_TIMEOUT = 10
pred = grid_search.fit(train_data, target_train).predict(test_data) assert_array_equal(pred, target_test)
if maxdepth is not None: relpieces = relname.split('/') if not relpieces[-1]: relpieces = relpieces[:-1] if len(relpieces) > maxdepth + 1: continue
NO_BOTO_MODULE = True BOTO_NOT_CONFIGURED = True try: import boto NO_BOTO_MODULE = False try: boto.connect_iam() BOTO_NOT_CONFIGURED = False except boto.exception.NoAuthHandlerFound: pass except ImportError: pass
np.random.seed(0) index = range(3) columns = list('abc')
self.minions = self._spawn_minions()
return [thing.get(x,default) for x in fields]
self.assert_grade(problem, 'choice_3', 'incorrect')
assert_raises(ValueError, cval.KFold, 2.5, 2)
import salt.ext.six as six
if isinstance(instances, str) or isinstance(instances, six.text_type): instances = [instances] conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)
link_cohort_to_partition_group( cohort, self.user_partition.id, self.groups[0].id, )
import salt.utils import salt.modules.cmdmod from salt.exceptions import CommandExecutionError
for low in self.lowstate: if not self._verify_client(low): return
super(Person, self).save(*args, **kwargs) self.data.append("After save")
from __future__ import absolute_import, print_function import logging
if progress: if progress is True or not isinstance(progress, int): progress_interval = 1000 else: progress_interval = progress
course_items_table.drawOn(self.pdf, table_left_padding, y_pos - rendered_height)
self.dispatch = Pickler.dispatch.copy()
def wkt_r(): if not thread_context.wkt_r: thread_context.wkt_r = _WKTReader() return thread_context.wkt_r
start_delim_index = template.find(start_delim, start_index, close_char_index) if 0 <= start_delim_index < open_char_index: return None
Xcoo = coo_matrix(X) mkchi2(k=2).fit_transform(Xcoo, y)
if isinstance(names, compat.string_types) and nlevels == 1: names = [names]
placemarks = klass._default_manager.using(using).annotate(kml=AsKML(field_name))
kwargs['verbose_name'] = verbose_name
searched_locations = []
_win(kernel32.GetCurrentProcess, wintypes.HANDLE)
same_index = self.bseries.reindex(self.bseries.index) tm.assert_sp_series_equal(self.bseries, same_index) self.assertIsNot(same_index, self.bseries)
hipchat.__salt__ = {}
sdist_class = cmdclass['sdist']
import salt.payload import salt.utils
from __future__ import absolute_import
full_segment_event = request.json
self.lc_block.source_library_id = unicode(self.library.location.library_key) result = self.lc_block.validate()
from __future__ import absolute_import import copy import logging try: import pwd HAS_PWD = True except ImportError: HAS_PWD = False
rp = SparseRandomProjection(n_components=10, dense_output=True, random_state=0) rp.fit(data) assert isinstance(rp.transform(data), np.ndarray)
return len(tsql_query("SELECT database_id FROM sys.databases WHERE NAME='{0}'".format(database_name), **kwargs)) == 1
def test_split(): skip_if_no_data() n_train = 100 n_valid = 200 n_test = 300
return
fig, (ax1, ax2) = plt.subplots(1, 2) fig.set_size_inches(18, 7)
from pandas.compat import range, lrange, StringIO, OrderedDict import os
ticks = ax.get_xticks() labels = ax.get_xticklabels() for t, l in zip(ticks, labels): m, s = divmod(int(t), 60)
self.selenium.find_element_by_id('change_id_user').click() self.wait_for_popup() self.selenium.switch_to.window('id_user')
if reduce: values = self.values
raise NotImplementedError()
if created: return
return False
if need_space is not True and not need_space[1]: yield (need_space[0], "E225 missing whitespace around operator") need_space = False
self.assertRaises(AssertionError, df.groupby('a').apply, f2) self.assertRaises(AssertionError, df2.groupby('a').apply, f2)
return _int64_max
data = { "form-TOTAL_FORMS": "3", "form-INITIAL_FORMS": "3", "form-MAX_NUM_FORMS": "0",
self.refresh_course() return problem
self.service.remove_credit_requirement_status( self.user.id, self.course.id, 'grade', 'grade' )
return service
class FileForm(Form): file1 = FileField()
assert_array_equal(np.sort(s1[:23149]), np.sort(s2))
import os import urlparse
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010 13:30:05")
wide_sums = self.panel.to_panel().sum('major') assert_frame_equal(sums, wide_sums)
queryset = CourseMode.objects.all()
raise ItemNotFoundError(course_locator)
pass
self.notes_page.go_to_page(3) self._verify_pagination_info( notes_count_on_current_page=1, header_text='Showing 26-26 out of 26 total', previous_button_enabled=True, next_button_enabled=False, current_page_number=2, total_pages=2 )
if user_attr_name == 'user_anonymous': user = AnonymousUserFactory() else: user = getattr(self, user_attr_name) user = User.objects.get(id=user.id)
values = DatetimeIndex(values) if values.tz is not None: return False
from __future__ import absolute_import import os import shutil
from __future__ import absolute_import
return '/etc/sysconfig/scripts/SuSEfirewall2-custom'
if not hasattr(coeffs, '__iter__'): coeffs = [coeffs] * len(self.layers)
curl -sSk https://localhost:8000 \\ -b ~/cookies.txt \\ -H 'Accept: application/x-yaml' \\ -d client=local \\ -d tgt='*' \\ -d fun=test.ping
data={'metadata': {'user_partition_id': str(partition_id)}}
self.plural = other.plural self._info = other._info.copy() self._catalog = other._catalog.copy()
'msg': '', 'value': '3', 'params': params, 'display_file': display_file, 'display_class': display_class, 'problem_state': problem_state,
if not ((user.id and CourseEnrollment.is_enrolled(user, course.id)) or has_access(user, 'staff', course)): raise UserNotEnrolled(course.id)
sampling_algorithm = dict((key, value) for key, value in sampling_algorithm.items() if key in selected_algorithm)
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
self.assert_function_values('abs', [-1, 0, 1, 'j'], [1, 0, 1, 1])
loc = Location.objects.annotate(num_cities=Count('city')).get(id=dallas.location.id) self.assertEqual(2, loc.num_cities)
class WKTReader_st(Structure): pass
import salt.ext.six as six
visibility_editor = self.edit_component_visibility(component) self.verify_selected_labels(visibility_editor, expected_labels) visibility_editor.save()
ps_diff_cache = self._create_service(username, {})
self.a1.publications.set([self.p1, self.p2])
a = dt b = ((dt + self) - self) return a == b
step = n_samples // n_classes
for n in range(10): for s, i in self.d.items(): i_rec = self.encode_decode(i) assert_series_equal(i, i_rec)
return __virtualname__
self.assertRaises(Exception, self.panel.reindex, major_axis=new_major, major=new_major)
if self.n_components_ == 0: return np.eye(n_features) / self.noise_variance_ if self.n_components_ == n_features: return linalg.inv(self.get_covariance())
from __future__ import absolute_import import os.path
match = re.search(r'(.*?/common)(?:$|/)', path(__file__)) COMMON_ROOT = match.group(1)
if self.source in self.html5_sources:
from salt.modules import win_network
try: #pylint: disable=unused-import import boto import boto.sns #pylint: enable=unused-import logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
_moved_attributes = []
#from IPython.utils.io import Tee
self.assertGroupContent( groups[0], title=u"cool (2)", notes=[u"Third note", None] )
xmin, xmax = plt.xlim() ymin, ymax = plt.ylim() coef = clf.coef_ intercept = clf.intercept_
self.certificates_section.wait_for_certificate_exceptions_section()
self.course_nav.go_to_vertical('Test Vertical-0')
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 5)
w, h, d = original_shape = tuple(china.shape) assert d == 3 image_array = np.reshape(china, (w * h, d))
if o.values.dtype == 'datetime64[ns]' or isinstance( o, PeriodIndex): values[0:2] = pd.tslib.iNaT else: values[0:2] = null_obj
catalog_visibility = TextField(null=True) short_description = TextField(null=True) course_video_url = TextField(null=True) effort = TextField(null=True) self_paced = BooleanField(default=False)
require_http_methods(["GET"]), require_GET, require_POST, require_safe, condition(lambda r: None, lambda r: None),
import salt.utils from salt.exceptions import SaltInvocationError, CommandExecutionError from salt.modules.freebsdports import _normalize, _options_file_exists
import os.path import msgpack
return data['alias'], data['driver'], ()
saltenv = env
if which == 'LM':
UserProfile(user=user).save()
expected = np.array([False] * len(idx), dtype=bool) self.assert_numpy_array_equal(idx._isnan, expected) self.assertFalse(idx.hasnans)
else:
self.version_block(parent, user_id, new_structure['_id'])
self.frame['E'] = np.inf self.frame['F'] = -np.inf
raise ItemNotFoundError(definition_locator)
if minimum_grade_credit is not None: minimum_grade_credit = minimum_grade_credit
task_id = entry.task_id course_id = entry.course_id task_input = json.loads(entry.task_input)
self.test_init_database()
cs_getsize = CsInt('GEOSCoordSeq_getSize') cs_getdims = CsInt('GEOSCoordSeq_getDimensions')
user.is_staff = False user.save()
res = cat.reorder_categories(["c", "b", "a"]) self.assert_categorical_equal(cat, old) self.assert_categorical_equal(res, new)
def convert_extent(self, box, srid): raise NotImplementedError('Aggregate extent not implemented for this spatial backend.')
username = email.split("@")[0] try: email = people[username]['email'] except KeyError: pass
P /= self.early_exaggeration opt_args['n_iter'] = self.n_iter opt_args['it'] = it + 1 params, error, it = _gradient_descent(obj_func, params, **opt_args)
if not len(info): raise SaltInvocationError( u'No snapshots for VM "{0}" have ID "{1}"'.format(name, snap_id) )
one_to_many = False one_to_one = False many_to_many = False many_to_one = False
if __opts__['test']: ret['result'] = None return ret
X = np.arange(100)[:, np.newaxis] y = np.ones(100) y[:50] = 0.0
return value
email_label = _(u"Email")
return _static(path)
A = neighbors.kneighbors_graph(X, 1, mode='connectivity', include_self=True) assert_array_equal(A.toarray(), np.eye(A.shape[0]))
User.objects.db_manager('default').create_user('bob', 'bob@example.com')
has_changes = None if (is_xblock_unit or course_outline) and not is_library_block: has_changes = modulestore().has_changes(xblock)
if not isinstance(course_key, basestring): raise ValueError('course_key must be a string. {} is not acceptable.'.format(type(course_key)))
self.assertIn( 'Service not found', self.run_function('service.show', ['spongebob']))
if err is not None: raise FixtureError("Could not create course {0}. Error message: '{1}'".format(self, err))
from __future__ import absolute_import
result = sql.read_sql_table('test_datetime', self.conn) result = result.drop('index', axis=1) tm.assert_frame_equal(result, df)
for i in range(3):
regr_1 = DecisionTreeRegressor(max_depth=4)
call_command('manage_group', TEST_GROUP, '--permissions', 'auth:Group:add_group') self.check_groups([TEST_GROUP]) self.check_permissions(TEST_GROUP, ['add_group'])
self.assertGreater(len(modules), 10)
return get_current(result)
from salt.modules import cmdmod from salt.exceptions import CommandExecutionError from salt.log import LOG_LEVELS
X_df = MockDataFrame(X) X_train, X_test = cval.train_test_split(X_df) assert_true(isinstance(X_train, MockDataFrame)) assert_true(isinstance(X_test, MockDataFrame))
sample_steps_available = [1, 2, 3] for sample_steps in sample_steps_available:
cluster_ids, mu = milk.kmeans(X, k)
px_y = round(npix + (0.5 * log((1 + fac) / (1 - fac)) * (-1.0 * self._radpp[zoom])))
from __future__ import absolute_import
assert_raises(ValueError, scale, X_csr, with_mean=False, axis=1)
self._login(staff_email, staff_password, should_succeed=False, err_msg_check="Your password has expired due to password policy on this account")
response = self.client.get(reverse('branding.views.courses')) self.assertEqual(response.status_code, 200)
from pickle import Pickler
projected_distances = projected_distances[non_identical]
if did_validate: updated_data = cls.update_from_dict(key_values, descriptor, user, save=False)
np.testing.assert_equal(list(cv), list(wrapped_old_skf.split()))
results.columns = ['dont_sort', 'sort']
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
try: import win32com.client import pythoncom
else: ret = _load_result(existing, ret)
for n_neighbors in [3, 5, 7]: I_computed = _compute_mi(x, y, True, False, n_neighbors) assert_almost_equal(I_computed, I_theory, 1)
>> a=makeCustomDataframe(5,3,r_idx_nlevels=4, r_idx_names=["FEE","FI","FO","FAM"], c_idx_nlevels=2)
initial_photo_response = requests.get(initial_data["UserPhoto"]) self.assertEqual(initial_photo_response.status_code, 200)
self.old_level_tags = base.LEVEL_TAGS base.LEVEL_TAGS = utils.get_level_tags()
continue
index_float64_get = Benchmark('idx[1]', setup, name='index_float64_get', start_date=datetime(2014, 4, 13))
s3_key = self._generate_s3_key("photo_id") s3_key.set_contents_from_string(encrypt_and_encode(img_data, aes_key))
comp_ids, obs_group_ids = table.get_labels_groupby(group_index)
import integration
start_index = expression.end_index
metric_tag_fields = [ 'course_id', 'group_id', 'pinned', 'closed', 'anonymous', 'anonymous_to_peers', 'endorsed', 'read' ]
try: dot = callback.rindex('.') except ValueError: return callback, '' return callback[:dot], callback[dot + 1:]
if val == val and val != %(nan_val)s: nobs[lab, 0] += 1 if val < minx[lab, 0]: minx[lab, 0] = val
DarkLangConfig( released_languages=('es-419, en'), changed_by=self.user, enabled=True ).save()
usage_key = usage_key.replace(course_key=modulestore().fill_in_run(usage_key.course_key))
BROKER_POOL_LIMIT = 0 BROKER_CONNECTION_TIMEOUT = 1
return exe
for mode in [CourseMode.DEFAULT_MODE_SLUG, CourseMode.VERIFIED]: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode, mode_display_name=mode, )
ransac_estimator.fit(X, y)
from ._version import get_versions v = get_versions() __version__ = v.get('closest-tag',v['version']) del get_versions, v
reload(sklearn.lda) return sklearn.lda
migration.mutate_state(state, preserve=False) applied_migrations.remove(migration)
if settings.FEATURES.get('ENABLE_OAUTH2_PROVIDER'): urlpatterns += ( url( r'^oauth2/login/$', auth_exchange.views.LoginWithAccessTokenView.as_view(), name="login_with_access_token" ), )
self.LibraryValueNotFoundException = value_not_found_exception
else: self.set_atom_data(block)
receipt_id = self.receipt_id if override_receipt_id is None else override_receipt_id
if kw_function_args: args = [ "{0}='{1}'".format(key, value) for key, value in kw_function_args.iteritems() ]
data = create_series() + create_dataframes()
from __future__ import absolute_import
log.debug('generated search string: {0}'.format(search_string)) return self.Search(search_string)
result = td.max() expected = Timedelta('2 days') self.assertEqual(result, expected)
return self.tag_function(name)
from django.test import TestCase from nose.plugins.attrib import attr
res1, res2 = s.align(df) tm.assert_series_equal(res1, exp2) tm.assert_frame_equal(res2, exp1)
from string import ascii_letters as letters
('NLS_LANG', '.UTF8'), ('ORA_NCHAR_LITERAL_REPLACE', 'TRUE'),
sequential = self.store.create_child( self.user_id, chapter.location, 'sequential', block_id='subsection_one' ) self.store.publish(sequential.location, self.user_id)
for i, A in enumerate(Z.transpose(0, 2, 1)):
train_obj.main_loop() state.results = jobman.tools.resolve(state.extract_results)(train_obj) return channel.COMPLETE
if not objs: return
lc_block = self._add_library_content_block(course, self.lib_key) lc_block = self._refresh_children(lc_block) self.assertEqual(len(lc_block.children), 2)
Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape)
salt '*' vsphere.service_stop my.esxi.host root bad-password 'ssh'
from __future__ import unicode_literals
new_locator = course_key.make_usage_key(block_key.type, block_key.id) return self.get_item(new_locator, **kwargs)
if not is_list_like_indexer(obj) and is_setter: return {'key': obj} raise
from __future__ import unicode_literals
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
from salt.states import postgres_schema
from __future__ import absolute_import import logging import json
import jinja2 import jinja2.ext
alt_class = BadgeClassFactory.create( slug=badge_class.slug, issuing_component=badge_class.issuing_component, course_id=CourseFactory.create().location.course_key ) BadgeAssertionFactory.create(user=self.user, badge_class=alt_class)
return None
for index, cert in enumerate(certificates_list): if certificate_id is not None: if int(cert['id']) == int(certificate_id): match_cert = cert
self.assertTrue(config.id)
execute_from_command_line(['django-admin', 'help', 'makemessages'])
MOCK_SEARCH_BACKING_FILE = ( TEST_ROOT / "index_file.dat" ).abspath()
'html5_sources': ['http://www.example.com/source.mp4'], 'data': ''
import salt.utils import salt.utils.decorators as decorators from salt.utils.odict import OrderedDict
from textwrap import dedent
skiprows = 1 if headers else 0 x = np.loadtxt(test_path, delimiter=delimiter, skiprows=skiprows)
y_pred_rf = rf.predict_proba(X_test)[:, 1] fpr_rf, tpr_rf, _ = roc_curve(y_test, y_pred_rf)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from salt.utils.odict import OrderedDict from salt.ext.six.moves import range from salt.ext import six
columns = self.column_classes(Note) self.assertFalse(columns['info'][1][6])
dtype, value = _infer_dtype_from_scalar(value) value = np.repeat(value, len(self.index)).astype(dtype) value = com._possibly_cast_to_datetime(value, dtype)
if prefix: pipsearch = __salt__['pip.list'](prefix, bin_env, user=user, cwd=cwd)
from django.db import models from django.utils.encoding import python_2_unicode_compatible
from __future__ import absolute_import
estimator = MockImprovingEstimator(1) assert_raises(ValueError, learning_curve, estimator, X, y, exploit_incremental_learning=True)
dive = Book() dive.title = "Dive into Python" dive.published = datetime.date(2009, 5, 4) dive.save()
#html_show_copyright = True
embargoed_countries = models.TextField( blank=True, help_text="A comma-separated list of country codes that fall under U.S. embargo restrictions" )
#source_encoding = 'utf-8'
assert_almost_equal(loss_interp + 0.5 * (w[-1] ** 2), loss)
for i in range(i+1,20):
sparse = self.dense1.to_sparse() sparse3 = self.dense3.to_sparse()
connectivity = connectivity + connectivity.T
for setting in settings: settings[setting] = str(settings[setting])
alice = User.objects.using('other').get(username='alice')
'include_paths': get_config_value('include_paths', ()),
other = RangeIndex(25, 14, -1)
ret = self.run_run_plus(fun='fileserver.file_list', args=['backend="roots"']) self.assertIsInstance(ret['fun'], list)
try: expiry = kwargs['expiry'] except KeyError: expiry = self.get('_session_expiry')
dataset = datasets.load_iris()
result = self.panel.truncate(before=None, after=None, axis='items')
non_empties = [obj for obj in objs if sum(obj.shape) > 0 or isinstance(obj, Series)]
if not isinstance(content, str): raise AssertionError("Expected content to be of type str, got " + str(type(content)))
from __future__ import absolute_import
band, data = chunk(data, pack_size * header[10] * header[11]) band_result = {'data': binascii.unhexlify(band)}
from __future__ import absolute_import import os import pwd import grp import random
mode = str(mode)
'name': get_config_value('name'),
self.assertSaltTrueReturn(ret)
tailless = Gecko.objects.create(has_tail=False) tag = TaggedItem.objects.create(content_object=tailless, tag="lizard") self.assertEqual(tag.content_object, tailless)
example_input[0, 0] = -2.5
print('Cloud configuration files provisioned via pillar.')
response = self.send_patch(self.client, {field_name: ""}) self.assertIsNone(response.data[field_name])
__virtualname__ = 'git'
self.assert_account_settings_context_looks_correct(account_settings_context(request), request.user, linked=False) self.assert_social_auth_does_not_exist_for_user(request.user, strategy)
remove(item, force)
keys, values_lists = zip(*sorted(sub_grid.items())[::-1]) sizes = [len(v_list) for v_list in values_lists] total = np.product(sizes)
if os.path.exists(venv_path): shutil.rmtree(venv_path) if os.path.exists(requirements_file_path): os.unlink(requirements_file_path) raise
"corruptor" : *corr
max_rows = 1
click_css(page, component_css, 0)
if enrollment_mode is not None: CourseEnrollmentFactory( is_active=is_active, mode=enrollment_mode, course_id=self.course.id, user=self.user )
from __future__ import absolute_import
for o in objs: if o not in self._objs: continue
unvisited_children = list( child for child in get_children(current_node) if child not in yield_results )
path = "" self.assertRaises(IOError, read_hdf, path, 'df')
import jinja2 import jinja2.exceptions
m_space, m_source = model.get_monitoring_data_specs() spaces.append(m_space) sources.append(m_source)
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
STATIC_ROOT = (TEST_ROOT / "staticfiles" / "cms").abspath()
if not reparse_data: return False
saltstack_version.sha = out.strip() saltstack_version.noc = -1
REQUIRE_DEBUG = False
CONFIG_PREFIX = SERVICE_VARIANT + "." if SERVICE_VARIANT else ""
self.assertHTMLEqual( str(ErrorList(ValidationError(VeryBadError()).messages)), '<ul class="errorlist"><li>A very bad error.</li></ul>' )
return False
raise NotImplementedError('Full-text search is not implemented for this database backend')
shim.remove_shim_context(event)
import json import logging
log.warning("User [%s] was not authorized to initiate a refund for user [%s] " "upon unenrollment from course [%s]", request_user.id, unenrolled_user.id, course_key_str) return []
result = self.frame.xs('two', level='second')
generated_certificate = GeneratedCertificate.eligible_certificates.get( user=self.enrolled_user_1, course_id=self.course.id, ) self.assertFalse(generated_certificate.is_valid())
AuthorBooksFormSet = inlineformset_factory(Author, Book, can_delete=False, extra=2, fields="__all__") Author.objects.create(name='Charles Baudelaire')
est = DBSCAN().fit(X, sample_weight=sample_weight) core4 = est.core_sample_indices_ label4 = est.labels_ assert_array_equal(core1, core4) assert_array_equal(label1, label4)
objects.extend(Tag.objects.all())
class MyForm(Form): def __init__(self, data=None, auto_id=False, field_list=[]): Form.__init__(self, data, auto_id=auto_id)
assert_greater(gpr.log_marginal_likelihood(gpr.kernel_.theta), gpr.log_marginal_likelihood(gpr.kernel.theta))
prob /= prob_sum.reshape((prob.shape[0], -1))
target = [-1] * len(JUNK_FOOD_DOCS) + [1] * len(NOTJUNK_FOOD_DOCS)
from __future__ import absolute_import
raise ItemNotFoundError(course_key)
res = self.client.get('/dates/books/%s/' % urlbit) self.assertEqual(res.status_code, 404)
self.page.visit() config = self.page.experiment_group_configurations[0] config.toggle() usage = config.usages[0] config.click_unit_anchor()
self.assertEqual(df.iloc[0:1, :].testattr, 'XXX')
__proxyenabled__ = ['cisconso']
for i in reversed(sorted(to_remove)): data.pop(i) if not self._implicit_index: columns.pop(i)
import salt.cloud
data = { 'form-TOTAL_FORMS': '2', 'form-INITIAL_FORMS': '2', 'form-0-id': str(poem.pk), 'form-0-name': 'foo',
self.reset_password_page.visit()
if use_svd: U = svd(Gi, full_matrices=0)[0] else: Ci = np.dot(Gi, Gi.T) U = eigh(Ci)[1][:, ::-1]
fld_ptr = capi.get_feat_field_defn(feat.ptr, index) if not fld_ptr: raise GDALException('Cannot create OGR Field, invalid pointer given.') self.ptr = fld_ptr
tid = random.choice(string.digits) + tid
class Proxy1(models.Model): class Meta: db_table = "unmanaged_models_proxy1"
GENERATE_PROFILE_SCORES = False
df = orig.copy() df.ix["j":"k", 0] = ["b", "b"] tm.assert_frame_equal(df, exp_parts_cats_col)
self.assertEqual( df.set_index(['a', 'b']).to_csv(float_format='%.2f'), expected)
self.assertEqual( type(timestamp_instance - datetime_instance), Timedelta) self.assertEqual( type(timestamp_instance + timedelta_instance), Timestamp) self.assertEqual( type(timestamp_instance - timedelta_instance), Timestamp)
t1 = Timestamp((1352934390 * 1000000000) + 1000000 + 1000 + 1) idx = DatetimeIndex([t1])
f = ArticleForm() with self.assertRaises(ValidationError): f.fields['status'].clean('42')
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
warnings.filterwarnings( 'ignore', '^Module backports was already imported from (.*), but (.*) is being added to sys.path$', UserWarning )
if not include_first: results = results[1:]
_update_organization_context(context, course)
POST_AUTH_PARAMS = ('course_id', 'enrollment_action', 'course_mode', 'email_opt_in')
self.assertFalse(self._has_changes(locations['grandparent'])) self.assertFalse(self._has_changes(locations['parent']))
- file: {good_file}
_exprArgCache = {} def resetCache(): ParserElement._exprArgCache.clear() resetCache = staticmethod(resetCache)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self.coach = coach = AdminFactory.create() self.client.login(username=coach.username, password="test")
return
envs = __opts__.get('azurefs_envs', []) for env in envs: storage_conn = azure.get_storage_conn(opts=envs[env]) result = azure.list_blobs( storage_conn=storage_conn, container=env, )
self.course.edxnotes = False self.assertFalse(has_notes_tab(self.user, self.course))
self.login(self.email, self.pw)
import salt.utils from salt.exceptions import SaltCloudSystemExit
DEBUG = True
exc_info_on_loglevel=logging.DEBUG
Xs.append(np.array([[0.0003817754041, 1.0], [0.0003817753750, 2.0]], dtype=np.float32))
func_globals.update(overridden_func_globals)
import logging import os import subprocess import re import collections import decimal
role_class(*args) role_class(*args)
runner = salt.runner.RunnerClient(__opts__['__master_opts__']) return runner.cmd(fun, arg)
modified_cohort_name = "renamed random cohort" default_cohort.name = modified_cohort_name default_cohort.save()
from __future__ import absolute_import import logging import datetime import os
pass
for page in self.pages: page.visit()
self.assertEqual(result['success'], 'incorrect')
response = self.client.get(self.get_add_url()) self.assertEqual(response.status_code, 200)
from pandas.core.indexing import maybe_droplevels
from __future__ import absolute_import
list_escalation_policies = salt.utils.alias_function(list_policies, 'list_escalation_policies')
for db_alias in self.dbs.keys(): sh("cp {db} {db_cache}".format(db_cache=self.db_caches[db_alias], db=self.dbs[db_alias]))
self.W = sharedX(W, name='W') self.v = sharedX(v, name='v') self.mean = sharedX(mean, name='mean')
import salt.utils import salt.utils.decorators as decorators from salt.utils.odict import OrderedDict
result = self.client.login(username=self.USERNAME, password=self.NEW_PASSWORD) self.assertTrue(result)
from distutils.version import LooseVersion from sklearn.utils.extmath import svd_flip
from __future__ import absolute_import
s = pd.SparseSeries([1, np.nan, 2, 0, np.nan]) tm.assert_sp_series_equal(s[...], s)
self.client.force_login(self.u1)
import salt.utils from salt.exceptions import CommandExecutionError from salt.ext.six import string_types
return timezone.tzname(None)
'key_logfile': str,
providers = OAuth2ProviderConfig.objects.all() self.assertEquals(len(providers), 1) self.assertEquals(providers[pcount].id, provider1.id)
return response
pass
self.assertEqual(response.status_code, 200) msg = Messages.NO_ECOM_API.format(username=self.user.username, course_id=self.course.id) self.assertResponseMessage(response, msg)
for field in self.model._meta.fields: if isinstance(field, GeometryField): return field return False
Author.objects.filter(alias__isnull=True).update( alias=Lower(Substr('name', 1, 5)), )
self.certificates_section.refresh()
self._enroll(course.id, "verified")
xx = np.atleast_2d(np.linspace(0, 10, 1000)).T xx = xx.astype(np.float32)
cont = ['one', 'two', 'three', 'four', 'five', 'six', 'seven']
dt_obj = salt.utils.date_cast(newdate)
self.X_topo_space = self.view_converter.topo_space
def test_real_user(useless): useless_user = Mock(email='fake@fake.com', id=useless) return useless_user
html_short_title = 'scikit-learn'
DEBUG = True
context['company_about_description'] = _("{platform_name} offers interactive online classes and MOOCs.").format( platform_name=platform_name)
if value: params.append(template % value)
scaler = MinMaxScaler(feature_range=(2, 1)) assert_raises(ValueError, scaler.fit, X)
for mode in (CourseMode.DEFAULT_MODE_SLUG, 'verified'): CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
login = self.client.post(login_url, self.super_login) self.assertRedirects(login, self.index_url) self.assertFalse(login.context)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call )
key = make_key(args, kwds, typed)
request = Request.blank('') response = self.item_descriptor.studio_transcript(request=request, dispatch='translation/uk') self.assertEqual(response.status, '400 Bad Request')
if self.name == 'loc': return {'key': obj}
emit_field_changed_events( user_profile, user_profile.user, sender._meta.db_table, excluded_fields=['meta'] )
with self.assertNumQueries(0): ObjectB.objects.filter(objecta__in=ObjectA.objects.all())
rendered = pieces["short"]
if remove: __salt__['file.remove'](info(name)['home'])
from __future__ import unicode_literals
axes = df.plot() self._check_ticks_props(axes, xrot=0)
self.assertEqual(len(list(Comment.objects.all())), 4)
self.xblock.save()
axes = ['b', 0, 1, 'c'] random.shuffle(axes) axes = tuple(axes) print('axes:', axes)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
from instructor.views.api import save_registration_code
if (value is not None and value == value and method is None and limit is None): self._default_fill_value = value
if existing_col is not None: eci = existing_col.validate_col(itemsize) if eci > itemsize: itemsize = eci
X_varied, y_varied = make_blobs(n_samples=n_samples, cluster_std=[1.0, 2.5, 0.5], random_state=random_state) y_pred = KMeans(n_clusters=3, random_state=random_state).fit_predict(X_varied)
mixed = Series(['aBAD_BAD', NA, 'BAD_b_BAD', True, datetime.today(), 'foo', None, 1, 2.])
if not self.fields['download_video'].is_set_on(self): self.download_video = self.download_video self.force_save_fields(['download_video'])
self.assertNotEqual(token1, token2)
expr = stripXML(self.mathml_start + expr + self.mathml_end) expected = stripXML(self.mathml_start + expected + self.mathml_end)
log = logging.getLogger(__name__)
profile_str = 'virtualbox-config' providers = self.run_cloud('--list-providers') log.debug("providers: %s", providers)
config_spec = vim.vm.ConfigSpec()
course_id = CourseKeyField(max_length=255, db_index=True)
for tab in tabs: if tab.tab_id == "discussion" and django_comment_client.utils.is_discussion_enabled(self.id): return True return False
index_title = ugettext_lazy('Site administration')
import matplotlib.pyplot as plt
photo_id_key = data_dict["PhotoIDKey"].decode("base64") user_photo_key = data_dict["UserPhotoKey"].decode("base64")
from __future__ import unicode_literals
with self.assertRaises(CreditRequestNotFound): api.update_credit_request_status("invalid_uuid", self.PROVIDER_ID, "approved")
random_state = check_random_state(0) y1 = random_state.randint(0, 2, size=(20, )) y2 = random_state.randint(0, 2, size=(20, ))
exc_info_on_loglevel=logging.DEBUG
module.reset_problem({})
assert_almost_equal(clf.coef_, clf_weighted.coef_, decimal=2)
self.assertFalse(module_has_submodule(egg_module, 'no_such_module')) with self.assertRaises(ImportError): import_module('egg_module.no_such_module')
return fname
with self.assertNumQueries(3): lst1 = self.traverse_qs( Room.objects.prefetch_related('house__occupants'), [['house', 'occupants']] )
f1 = FormForTestingIsValid(data) self.assertTrue(f1.is_valid())
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0, noise=10)
result = SparseArray(result.ravel(), fill_value=fill_values[0], kind=sp_indexes[0])
__virtualname__ = 'mount'
course.certificates['certificates'].pop(index) store.update_item(course, request.user.id) break
cert = OpenSSL.crypto.X509() cert.set_version(2)
self.assertEqual( len(CourseEnrollment.objects.filter(mode='honor', user_id__in=real_user_ids)), expected_success )
self._aborting = True
nan_colname = DataFrame(Series(1.0, index=[0]), columns=[nan]) nan_colname_sparse = nan_colname.to_sparse() self.assertTrue(np.isnan(nan_colname_sparse.columns[0]))
X = np.ones(17) y = [0] * 3 + [1] * 14
for subsection in section.get_children(): c_subsection += 1 subsection_name = own_metadata(subsection).get('display_name', '')
from __future__ import absolute_import import os import tempfile
PACKAGED_FOR_SALT_SSH_FILE = os.path.join(os.path.abspath(SETUP_DIRNAME), '.salt-ssh-package') PACKAGED_FOR_SALT_SSH = os.path.isfile(PACKAGED_FOR_SALT_SSH_FILE)
self.assertEqual(len(httpretty.httpretty.latest_requests), 3)
locale_dirs = ['locale/'] gettext_compact = False
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
p.join()
x = Series(['A', 'A', np.nan, 'B', 3.14, np.inf]) labels, uniques = algos.factorize(x)
from salt.states import svn
for item in ret: self.assertSaltTrueReturn(item)
yml_obj = obj.copy()
X = diabetes.data Y = np.vstack([diabetes.target, diabetes.target ** 2]).T n_targets = Y.shape[1]
self.assertEqual(expected, dtime.strftime(fmt.encode('utf8')).decode('utf8'))
import salt.utils
srcinfo.append(__salt__['cp.cache_file'](pkg_src, saltenv))
return ' '.join(cmd)
frame = self.frame.copy() frame2 = self.frame.copy() expected = self.frame.copy()
call_command("loaddata", "course_email_template.json")
rbm.learning_rate = 0.06 rbm.n_iter = 20 rbm.n_components = 100 logistic.C = 6000.0
if directory is None and action != 'selfupdate': raise SaltInvocationError( 'The \'directory\' argument is required for composer.{0}'.format(action) )
result = ci.append(['c', 'a']) expected = CategoricalIndex(list('aabbcaca'), categories=categories) tm.assert_index_equal(result, expected, exact=True)
xpath = "//div[@class='block']/p/b" self.assert_has_text(xml, xpath, 'prompt HTML')
self.course_dir = self.create_course_xml(self.content_dir, self.truncated_key)
tm.assert_frame_equal(lexsorted_df, not_lexsorted_df)
all_models_with_cache = (m for m in self.all_models if not m._meta.abstract) for m in all_models_with_cache: self.assertNotIn('_relation_tree', m._meta.__dict__)
self.components_ = X[self.core_sample_indices_].copy()
response = self.client.get(reverse('sysadmin_courses')) self.assertNotRegexpMatches(response.content, table_re)
ORA_STUB_URL = os.environ.get('ora_url', 'http://localhost:8041')
import salt.ext.six as six
kpca = KernelPCA(kernel="rbf", n_components=2, fit_inverse_transform=True, gamma=2.) X_kpca = kpca.fit_transform(X)
credit_api.set_credit_requirements(
return tslib.ints_to_pydatetime(self.asi8, self.tz)
syncing.remove(name) continue
ret = self.run_run_plus(fun='fileserver.update', args=['backend="roots"']) self.assertTrue(ret['fun'])
ORDER_STATUS_MAP = { 'cart': 'defunct-cart', 'paying': 'defunct-paying', }
from __future__ import absolute_import
from salt.modules import htpasswd
y = np.reshape(y, (-1, 1))
log = logging.getLogger(__name__)
for svd_10, svd_20 in svds_10_v_20: assert_array_almost_equal( svd_10.explained_variance_ratio_, svd_20.explained_variance_ratio_[:10], decimal=5, )
new_cols = [_series_round(v, decimals) for _, v in self.iteritems()]
ret['Success'] = False ret['Result'] = format(error)
pass
cmd = '{0} {1}'.format(cmd, properties)
else: method = ".apply(<func>)"
DEBUG = True
ret = ava.union(ena)
arr = Series(np.random.randn(10), index=np.arange(10), dtype=object)
self.client.login(username=self.white_label_course_instructor.username, password='test')
assert_raises(ValueError, chi2_kernel, [[0, 1]], [[.2, .2, .6]])
self.configure_google_provider(enabled=True) self.configure_facebook_provider(enabled=True)
self.len_indices_pos[curr_len] += curr_batch_size self.len_curr_counts[curr_len] -= curr_batch_size self.total_curr_counts -= curr_batch_size return curr_indices
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, course_id=self.course_id, staff=False).visit()
from __future__ import absolute_import import os import yaml import shutil import time
return descriptor_global_local_resource_url(block, uri)
try: from pyroute2.ipdb import IPDB HAS_PYROUTE2 = True except ImportError: HAS_PYROUTE2 = False
testing_mode = os.environ.get('PANDAS_TESTING_MODE', 'None') if 'deprecate' in testing_mode: warnings.simplefilter('ignore', _testing_mode_warnings)
import pandas import random
smf.__salt__ = {}
self._validate_vocabulary() max_df = self.max_df min_df = self.min_df max_features = self.max_features
if runas: os.seteuid(euid) os.setegid(egid) if exc is not None: raise CommandExecutionError( 'Exception encountered creating zipfile: {0}'.format(exc) )
return ''
assert_raises(ValueError, sel.transform, np.array([[1], [2]]))
if left.nlevels > 1: for level in range(left.nlevels): llevel = _get_ilevel_values(left, level) rlevel = _get_ilevel_values(right, level)
return True
self.assertRedirects(response, '/redirect_to_self/', status_code=302, target_status_code=302) self.assertEqual(len(response.redirect_chain), 2)
existing_answers = survey.get_answers(user=user).get(user.id, {})
NOT_SYMMETRIC_METRICS = [ "explained_variance_score", "r2_score", "confusion_matrix",
url = reverse('dashboard')
import salt.modules.cmdmod
from __future__ import absolute_import
inner_img = img[:, ring_w:img.shape[1] - ring_w, ring_w:img.shape[2] - ring_w]
input_dict = {'1_2_1': 'Michigan'} correct_map = problem.grade_answers(input_dict) self.assertEquals(correct_map.get_hint('1_2_1'), "")
_attributes = ['freq', 'axis', 'closed', 'label', 'convention', 'loffset', 'base', 'kind']
self.assertEqual(len(site_configuration_history), 1)
import math assert_series_equal(self.ts.apply(math.exp), np.exp(self.ts))
rgxin, rgxout, promptin, promptout = self.setup()
inpaint_cost = 0.5 * inpaint_cost + 0.5 * new_inpaint_cost
from __future__ import absolute_import import re
return TermValue(v, stringify(v), u('string'))
defaults = { 'form_class': forms.URLField, } defaults.update(kwargs) return super(URLField, self).formfield(**defaults)
params["terms_of_service"] = "tRUe" self.assert_success(params)
self.check_event_response_by_key('endorse_resource', resource, test_case['key'], test_case['val'])
xml_obj = self.split_test_module.definition_to_xml(MemoryFS())
from pandas.util.testing import makeCustomDataframe as mkdf
field_data[attr] = deserialize_field(cls.fields[attr], value)
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
df2 = df.copy()
joined += ','
self.login(self.unenrolled_user) self.assertFalse(self.enroll(self.course)) self.assertTrue(self.enroll(self.test_course))
plt.figure()
if data is None: data = ''
assert_almost_equal(result._y.values.flat, [1, 4, 5], check_dtype=False)
with patch('os.path.exists', return_value=False): self.assertRaises(SaltClientError, lambda: self.client.pub('*', 'test.ping'))
activations = [X]
author = self.get_object() context = {'custom_' + self.get_context_object_name(author): author} return self.render_to_response(context)
if value is None: if self.is_numeric: value = np.nan
#ax.plot([1], [1], [1], color=c, label=label)
pipe = Pipeline([('cls', LinearRegression())])
pieces["closest-tag"] = None count_out = run_command(GITS, ["rev-list", "HEAD", "--count"], cwd=root)
supports_num_points_poly = False
for n_comp in np.arange(1, d): pca = PCA(n_components=n_comp, svd_solver='arpack', random_state=0)
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
from django.utils.translation import get_language
idx = self.panel.items[0] idx_lag = self.panel.items[1] shifted = self.panel.shift(1, axis='items') assert_frame_equal(self.panel[idx], shifted[idx_lag])
scalings = (V[:rank] / std).T / S[:rank]
pkginfo = _get_package_info(target, saltenv=saltenv)
if is_updated or asides_updated: new_structure = self.version_structure(course_key, original_structure, user_id) block_data = self._get_block_from_structure(new_structure, block_key)
from esky import bdist_esky import bbfreeze HAS_ESKY = True
try: course_key = CourseKey.from_string(course_id) user = User.objects.get(id=user_id) course = modulestore().get_course(course_key)
if xblock_access is not None: block.group_access = xblock_access update_block(self.course)
result = sql.read_sql_query('SELECT * FROM test_nan', self.conn) tm.assert_frame_equal(result, df)
self.restricted_course.delete() self._assert_history_deleted()
for i, octet in enumerate(octets):
self.advanced_settings.wait_for_modal_load()
course = CourseFactory.create(default_store=default_store) not_enrolled_user = UserFactory.create() self.request.user = AdminFactory.create()
for op in ['__pos__', '__neg__', '__abs__', '__inv__']:
if os.name == 'nt': libc = CDLL('msvcrt') else: libc = CDLL(None) free = libc.free
set_limit = numpy.ceil(numpy.divide(set_sizes, set_batch)) self.limit = map(int, set_limit)
with filesystem.open('updates.html', 'r') as course_policy: on_disk = course_policy.read() self.assertEqual(course_updates.data, on_disk)
if is_object_dtype(value.dtype): value = _possibly_infer_to_datetimelike(value)
self.assertTrue(issubclass(df.BoolCol.dtype.type, np.integer), "BoolCol loaded with incorrect type")
with np.errstate(all="ignore"): return np.ravel(sums) / np.ravel(n_non_missing)
IPFilter.objects.create( blacklist=", ".join(blacklist), whitelist=", ".join(whitelist), enabled=is_enabled )
response = self._get_page( 'verify_student_upgrade_and_verify', course.id, expected_status_code=302 ) self._assert_redirects_to_dashboard(response)
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS)
data = process_sls_data(sls_templ, tmplctx)
ax.plot_surface(X, Y, Z, rstride=8, cstride=8, alpha=0.3, color=c) ax.plot([1], [1], [1], color=c, label=label)
raise AssertionError('%d columns passed, passed data had %s ' 'columns' % (len(columns), len(content)))
self._codes = _coerce_indexer_dtype(values, categories) self._categories = self._validate_categories( categories, fastpath=isinstance(categories, ABCIndexClass)) self._ordered = ordered return
import salt.utils
EMAIL_SUBJECT_PREFIX = '[Django] '
_moved_attributes = []
success = 'correct' for answer_id in correct_map: if not correct_map.is_correct(answer_id): success = 'incorrect'
return super(SplitMongoKVS, self).default(key)
glusterfs.__salt__ = {}
os.chmod(fn, st_mode | read_all)
import salt.ext.six as six
message = 'foo: bar="baz", qux="quux"' self.assertTrue(mock_log.info.called_with(message))
friends = models.ManyToManyField('self', through="Relationship", symmetrical=True)
content = template.render({}, request) self.assertEqual(content, 'yes')
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), list(Book.objects.all().order_by('-id')))
import json import logging
cummax = self.tsframe.cummax(axis=1) expected = self.tsframe.apply(Series.cummax, axis=1) tm.assert_frame_equal(cummax, expected)
assert_series_equal(ts.reindex(i), ts.iloc[j], check_index_type=False)
certs_enabled = CertificateGenerationConfiguration.current().enabled if certs_enabled and access['admin']: sections.append(_section_certificates(course))
return str(obj)
implied_column_null = False
if schedule[job]['_seconds'] > 0: schedule[job]['seconds'] = schedule[job]['_seconds'] elif 'seconds' in schedule[job]: del schedule[job]['seconds']
for i in range(len(df.columns)): df.iloc[:, i]
LOGGING_STORE_HANDLER = None break
import salt.minion import salt.utils import salt.utils.network import integration from salt import config as sconfig from salt.exceptions import SaltCloudConfigError
from . import signals
p.mugshot = None self.check_dimensions(p, None, None)
keys = list(compat.iterkeys(arg)) result = compat.OrderedDict()
import unittest from nose.plugins.attrib import attr
if not base.startswith(resolved(settings.DATA_DIR)): raise SuspiciousOperation("Attempted to import course outside of data dir")
saltenviron(environ)
if not self.get_autocommit(): self.connection.commit()
Y = np.clip(y_pred, eps, 1 - eps)
default_error_messages = { 'required': _('This field is required.'), } empty_values = list(validators.EMPTY_VALUES)
if 'schema' not in resobj: raise ValueError('missing schema field in path {0}, ' 'op {1}, response {2}'.format(path, opname, rescode))
X = np.ascontiguousarray(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
sql, _ = compiler.compile(value) return placeholder % sql
logger.warning("no '{0}' found".format(this_check))
binner, grouper, obj = self._get_grouper(obj)
self.samples = np.sin(np.linspace(0, 1, 200)) self.actual_kurt = -1.2058303433799713
if key not in self: root = self.__root last = root[0] last[1] = root[0] = self.__map[key] = [last, root, key] dict_setitem(self, key, value)
idx = pd.DatetimeIndex(values, name='xxx') tm.assert_series_equal(idx.value_counts(), exp)
from __future__ import absolute_import, print_function import os import tempfile import time
for course in [shib_course, open_enroll_course]: for student in [shib_student, other_ext_student, int_student]: request = self.request_factory.post('/change_enrollment')
tm._skip_if_no_localpath()
modes = CourseMode.modes_for_course(self.course_key) self.assertEqual([CourseMode.DEFAULT_MODE], modes)
if validate: for a in self.axes: a.maybe_set_size(min_itemsize=min_itemsize)
finish_time = time() self._ddog_histogram(evt_time, 'get_many.blks_out', block_count) self._ddog_histogram(evt_time, 'get_many.response_time', (finish_time - evt_time) * 1000)
if prev_state[0] is not None: try: next(nvlist(args, ['require']))[2].insert(0, dict([prev_state]))
index_col = list(index_col)
ds = DataSource(inter_shp)
__func_alias__ = { 'list_': 'list' }
unique_tab_types = [ CoursewareTab.type, CourseInfoTab.type, 'textbooks', 'pdf_textbooks', 'html_textbooks', ]
re.compile(r'^Pages \|'): [ 'js/models/explicit_url', 'coffee/src/views/tabs', 'xmodule', 'coffee/src/main', 'xblock/cms.runtime.v1' ],
self.lc_block.refresh_children() self.assertTrue(self.lc_block.validate())
verify_file_presence(True)
filt = g.filter(lambda x: x['A'].sum() == 2) assert_frame_equal(filt, df.iloc[[0, 1]])
from_friend_country = models.ForeignKey(Country, models.CASCADE, related_name="from_friend_country") from_friend_id = models.IntegerField() to_friend_country_id = models.IntegerField() to_friend_id = models.IntegerField()
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, call, patch from salttesting.helpers import ensure_in_syspath
if user_partition.active: for group_id in group_ids: try: user_partition.get_group(group_id) except NoSuchUserPartitionGroupError: has_invalid_groups = True
level_num = frame.columns._get_level_number(level)
from __future__ import absolute_import import hashlib import logging import copy
color_args = ['r', 'g', 'b'] ax = _check_plot_works(series.plot.pie, colors=color_args)
return (NullSpace(), '')
target_last_modified = self.storage.get_modified_time(prefixed_path)
thread = self.make_minimal_cs_thread({ "thread_type": thread_type, response_field: [make_minimal_cs_comment()], response_total_field: 5, })
d['description'] = dict([(a.cname, a.typ) for a in self.axes])
self.assertFalse(linode._validate_name('foo_'))
assert_raises(NotImplementedError, conv_model.cost, Y, Y_hat) assert_raises(NotImplementedError, mlp_model.cost, Y1, Y1_hat)
return 4.0 / (max_squared_sum + int(fit_intercept) + 4.0 * alpha_scaled)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath
span_element = rendered_html.find('span') self.assertEqual(span_element.text, 'Welcome student')
self._blklocs = np.append(self._blklocs, 0) self._blknos = np.append(self._blknos, len(self.blocks))
with option_context('display.unicode.east_asian_width', True):
ccx = CustomCourseForEdX.objects.get() course_enrollments = get_override_for_ccx(ccx, self.course, 'max_student_enrollments_allowed') self.assertEqual(course_enrollments, settings.CCX_MAX_STUDENTS_ALLOWED)
OAUTH2_PROVIDER_APPLICATION_MODEL = 'oauth2_provider.Application'
filename = self.state.document.current_source lineno = self.state.document.current_line
from __future__ import absolute_import import logging
del params["terms_of_service"] assert_terms_of_service_error("You must accept the terms of service.")
headers = super(WeightActs, self).c_headers() headers.append('weight_acts.cuh') return headers
self.assertEqual(self.course.user_partitions, [])
gt = OGRGeomType('Geometry') self.assertEqual(0, gt.num) self.assertEqual('Unknown', gt.name)
estimator = clone(self.estimator) if self.verbose > 0: print("Fitting estimator with %d features." % np.sum(support_))
data_train, targets_train = data[:n_samples / 2], digits.target[:n_samples / 2]
if method in [None, 'asfreq']: return None
uniform_batch_size = False
try: code = six.get_function_code(attr) except AttributeError: code = six.get_function_code(attr.__call__)
import integration
courses_having_prerequisites = frozenset( enrollment.course_id for enrollment in course_enrollments if enrollment.course_overview.pre_requisite_courses ) courses_requirements_not_met = get_pre_requisite_courses_not_completed(user, courses_having_prerequisites)
c = Child.objects.get(name="Child") p = c.parent
text = self.adj.adjoin(1, *strcols)
transduction = self.classes_[np.argmax(self.label_distributions_, axis=1)] self.transduction_ = transduction.ravel() self.n_iter_ = self.max_iter - remaining_iter return self
self.configuration = kwargs.pop('configuration', None) if not self.configuration: self.configuration = settings.ACCOUNT_VISIBILITY_CONFIGURATION
brc4 = Birch(threshold=10000.) assert_warns(UserWarning, brc4.fit, X)
left = self.rng[:10] right = self.rng[5:10]
updates = _wua_search(software_updates=software, driver_updates=drivers, skip_installed=not installed)
xf.XMODULE_FACTORY_LOCK.enable()
X_csc_scaled = scale(X_csr.tocsc(), with_mean=False) assert_array_almost_equal(X_scaled, X_csc_scaled.toarray())
import salt.utils from salt.ext.six import string_types
THOUSAND_SEPARATOR = ','
payload = json.dumps(data)
from __future__ import absolute_import import salt.wheel
if len(args[0]) != 4: raise GDALException('Incorrect number of tuple elements (%d).' % len(args[0])) else: self._from_sequence(args[0])
import jinja2
keyring.set_keyring(TestKeyring()) HAS_KEYRING = True
if not ignore_failures: for o in self.not_valid_objs:
gaussian_matrix_params = { "n_components": opts.n_components, "random_state": opts.random_seed } transformers["GaussianRandomProjection"] = \ GaussianRandomProjection(**gaussian_matrix_params)
return {'name': name, 'changes': {}, 'result': True, 'comment': ''}
result = ols(y=y, x=x)
self._folds = stacked_blocks
self.assertTrue(self.run_function('softwareupdate.reset_catalog')) self.assertEqual(self.run_function('softwareupdate.get_catalog'), 'Default')
tm.assert_series_equal(result, dense_result, check_dtype=False)
serialized_course_team['pk'] = self.course_team.pk serialized_course_team.pop('membership', None)
(True, True), (True, False),
#log.debug('diff_mtime_map: the maps are the same') return False
gbq.to_gbq(df, destination_table, PROJECT_ID, if_exists='append')
problem.save() self.assertIn('graceperiod', own_metadata(problem)) self.assertEqual(problem.graceperiod, new_graceperiod)
EDXNOTES_PUBLIC_API = 'http://localhost:8042/api/v1' EDXNOTES_INTERNAL_API = 'http://localhost:8042/api/v1'
return True
kwargs['python_shell'] = False ret = __salt__['cmd.run_all'](cmd, **kwargs)
td[2] = np.nan result = td.ffill() expected = td.fillna(0) expected[0] = np.nan assert_series_equal(result, expected)
result = sparse.loc[orig.x % 2 == 1] exp = orig.loc[orig.x % 2 == 1].to_sparse() tm.assert_sp_frame_equal(result, exp)
for i, hyperparameter in enumerate(kernel.hyperparameters): theta[i] = np.log(42) kernel.theta = theta assert_almost_equal(getattr(kernel, hyperparameter.name), 42)
BULK_EMAIL_ROUTING_KEY_SMALL_JOBS = LOW_PRIORITY_QUEUE
if not alpha == 0: assert_array_less(np.diff(costs), 0)
user = None email = None language = None try: user = get_student_from_identifier(identifier) except User.DoesNotExist: email = identifier else: email = user.email language = get_user_email_language(user)
MAX_ATTEMPTS = 30 for i in range(MAX_ATTEMPTS): if exists( table_name, region, key, keyid, profile ): return True else:
data['Image'] = '{0}:{1}'.format(repo_name, repo_tag) data['Id'] = status
self.course_nav.go_to_vertical('Test Vertical-2')
return fragment
sl = ['AAPL', 'AMZN', 'GOOG'] web.get_data_yahoo(sl, '2012')
import msgpack import zmq import salt.ext.six as six
unpack_tarball(src,dst) run_scripts(dst+package.name, scripts=["getscript","postinst"] )
if len(obj_list) == 0: break
import salt.ext.six as six
df_original = df_original.set_index('Date') df_reordered = df_original.sort_values(by='Quantity')
response = organizations_helpers.get_organization_by_short_name('non_existing') self.assertIsNone(response)
iy,ix = N.array((ky,kx)) - topleft col = iy*inshp[2]+ix +\
laplacian = _set_diag(laplacian, 1, norm_laplacian)
cohort_a = CohortFactory.create(course_id=course.id, name=u'Cohørt A', users=[user_a]) CourseUserGroupPartitionGroup( course_user_group=cohort_a, partition_id=cohort_scheme_partition.id, group_id=cohort_scheme_partition.groups[0].id ).save()
attrs['minlength'] = str(self.min_length)
return object.__new__(cls)
self.assertIn('msgctxt "Special blocktrans context wrapped in double quotes"', po_contents) self.assertIn('msgctxt "Special blocktrans context wrapped in single quotes"', po_contents)
supports_temporal_subtraction = False
html_encapsulated = module.get_problem_html(encapsulate=True)
try: try: return super(PutAsCreateMixin, self).update(request, *args, **kwargs) except Http404: return super(PutAsCreateMixin, self).create(request, *args, **kwargs)
EDXMKTG_LOGGED_IN_COOKIE_NAME = ENV_TOKENS.get('EDXMKTG_LOGGED_IN_COOKIE_NAME', EDXMKTG_LOGGED_IN_COOKIE_NAME) EDXMKTG_USER_INFO_COOKIE_NAME = ENV_TOKENS.get('EDXMKTG_USER_INFO_COOKIE_NAME', EDXMKTG_USER_INFO_COOKIE_NAME)
self.assertEqual(len(changes), 0)
MIGRATION_MODULES = NoOpMigrationModules()
from __future__ import absolute_import
try: import pip HAS_PIP = True except ImportError: HAS_PIP = False
@functools.wraps(func) def capture(*args, **kwargs): stacks.capture_stack(args, kwargs) return func(*args, **kwargs)
alice = User.objects.db_manager('default').create_user('alice', 'alice@example.com')
self.store.publish(locations['parent_sibling'], self.user_id) self.store.publish(locations['parent'], self.user_id)
from __future__ import absolute_import
try: return getattr(self._module_system, name) except AttributeError: return getattr(self._descriptor_system, name)
clf = DecisionTreeRegressor(max_depth=3, min_samples_split=2, criterion="mse", random_state=2) clf.fit(X, y)
from __future__ import absolute_import
if noise > 0.0: y += generator.normal(scale=noise, size=y.shape)
max_cols = self.max_cols max_rows = self.max_rows
self.addCleanup(patcher.stop) self.addCleanup(self._mock_paver_needs.stop)
method = None
failed_commands.discard('lspci') failed_commands.discard('dmidecode')
reg.activate() reg.save()
DATE_INPUT_FORMATS = [
retval = func(field_decorator=strip_key_collection, *args, **kwargs)
y_true, _, probas_pred = make_prediction(binary=True)
if kw_overrides_match is None: return profile_match return kw_overrides_match
result = df.take(order, axis=1) expected = df.ix[:, ['foo', 'B', 'D']] assert_frame_equal(result, expected)
nsqrt = sqrt(n_samples) llconst = n_features * log(2. * np.pi) + n_components var = np.var(X, axis=0)
if not (has_forum_admin or has_instructor_access): return HttpResponseBadRequest( "Operation requires staff & forum admin or instructor access" )
#html_logo = None
with self.assertRaises(ObjectDoesNotExist): CertificateInvalidation.objects.get( generated_certificate=self.generated_certificate, invalidated_by=self.global_staff, active=True, )
addr = {'address': val.rstrip('(Preferred)'), 'prefixlen': None} iface['inet6'].append(addr)
for service in col_services: if service.name == 'Microsoft Update': return True
for ax in axes: df.plot(x="a", y="b", title="title", ax=ax)
X_train = np.array([[0, 0, 0], [1, 1, 1]]) y_train = [0, 1]
if self[0] <= other[0]: left, right = self, other else: left, right = other, self
login = self.client.post(login_url, self.joepublic_login) self.assertEqual(login.status_code, 200) self.assertContains(login, ERROR_MESSAGE)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.certificates_section.add_certificate_exception(self.user_name, '')
config_course_cohorts_legacy( course, discussions=[], cohorted=True, auto_cohort_groups=["AutoGroup"] )
xx, yy = np.meshgrid(np.linspace(-4, 5, 500), np.linspace(-4, 5, 500))
@receiver(pre_delete, sender=CohortMembership)
from sys import executable module_path = executable
assert_almost_equal(np.abs(np.dot(d1[:2], [1, 0])), 1.0)
texas = Country.objects.get(name='Texas')
body = copy.deepcopy(body)
from __future__ import absolute_import
td[0] = np.nan
tol = 2 * np.finfo(M.dtype).eps
self.assertRedirects(response, '/get_view/', status_code=302)
import salt.utils from salt.utils.pycrypto import gen_hash import integration
termination_criterion = EpochCounter(5)
unique_pcts = np.unique(percentiles) if len(unique_pcts) < len(percentiles): raise ValueError("percentiles cannot contain duplicates") percentiles = unique_pcts
def f(): return iter([]) n_obj = Note.objects.all()[0]
continue
if rerandomize in [RANDOMIZATION.NEVER, 'false', RANDOMIZATION.PER_STUDENT]: self.assertEqual(seed, _reset_and_get_seed(module))
for app in app_list: app['models'].sort(key=lambda x: x['name'])
s = Series(range(5)) with self.assertRaisesRegexp(AttributeError, 'only use .str accessor'): s.str.repeat(2)
return theano._asarray(arg, dtype=dtype)
convergence_context = {}
self._labels = self.grouper.codes
urlconf_module, app_name, namespace = view return RegexURLResolver(regex, urlconf_module, kwargs, app_name=app_name, namespace=namespace)
t = self.engine.from_string('{{ my_doodad.value }}') self.assertEqual(t.render(c), '')
from __future__ import unicode_literals
if not items.is_unique: result = self._interleave() if self.ndim == 2: result = result.T return result[loc]
import salt.utils from salt.states.git import _fail, _neutral_test
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
addresses.append(line.strip()) continue
self.assertTrue(apps.ready) self.assertTrue(Apps().ready)
ret['result'] = __salt__['reg.set_value'](hive=hive, key=key, vname=vname, vdata=vdata, vtype=vtype, use_32bit_registry=use_32bit_registry)
for username in userlist: self.check_state(username, descriptor, 0, 1, 2)
pass
post_params = sign(self.CLIENT_POST_PARAMS)
RSA_X931_PADDING = 5
self.browser.refresh() profile_page.wait_for_page() self.verify_profile_page_is_private(profile_page)
if block.is_object and not self.is_object: block = block.convert(numeric=False)
import yaml
if settings.FEATURES.get('AUTOMATIC_AUTH_FOR_TESTING'): urlpatterns += ( url(r'^auto_auth$', 'student.views.auto_auth'), )
options = opts.split(',')
dirty = git_describe.endswith("-dirty") pieces["dirty"] = dirty if dirty: git_describe = git_describe[:git_describe.rindex("-dirty")]
d = Decimal(str(ogr_field.value))
self._assert_credit_status("pending")
os.makedirs(name)
#html_show_sphinx = True
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import logging
if backup is not False: shutil.copy2(path, '{0}{1}'.format(path, backup))
allowed_minions = set()
if purge: try: sid = getUserSid(name) win32profile.DeleteProfile(sid) except pywintypes.error as exc: (number, context, message) = exc
self._login_as_non_staff_user()
return redirect(request.GET.get('next', 'dashboard'))
self.assertNotEqual(author.last_name, None)
try: resolved = resolved.value except (AttributeError): pass
if course_tabs != course_module.tabs: course_module.tabs = course_tabs
import pandas as pd import unittest import warnings
if view_html: fragment.add_content(view_html) return fragment
self.desired_space = Conv2DSpace(shape=space.shape, channels=space.num_channels, axes=('c', 0, 1, 'b'))
dtype = np.dtype(dtype) if self.dtype == dtype: if copy: return self.copy() return self
self.assertIsNotNone(problem_block.markdown) self.assertIsNone(problem_block_course.markdown)
kwargs.update(kwargs.pop('metadata', {})) default_store_override = kwargs.pop('default_store', None)
return (isinstance(batch, np.ndarray) or scipy.sparse.issparse(batch) or str(type(batch)) == "<type 'CudaNdarray'>")
raise AssertionError("Concatenating join units along axis0")
if expected_n_iter is not None: assert_equal(cv.get_n_splits(X, y, labels), expected_n_iter) else: expected_n_iter = cv.get_n_splits(X, y, labels)
assert np.allclose(X, np.dot(S_, A_.T) + ica.mean_)
if publish: unit.publish_action.click() unit.view_published_version() self.assertEqual(len(self.browser.window_handles), 2) courseware_page.wait_for_page()
if os.path.isfile(testfile): os.unlink(testfile)
([], 'credit'),
import base64 import hashlib import hmac import StringIO
merge_cells = False
res_col = df.loc[:, "cats"] tm.assert_series_equal(res_col, exp_col) self.assertTrue(com.is_categorical_dtype(res_col))
if not os.path.exists(remote_name): log.error("Error : Specified file %s does not exist" % remote_name) return filename
result = f.clean('13:30:05') self.assertEqual(result, time(13, 30, 5))
self.set_user_partitions(self.vertical_location, []) self.check_access(self.red_cat, self.vertical_location, True)
items_in_tree = self.store.get_items(course_key, include_orphans=False)
if len(out) == 1 and 'restore status' in out[0].lower(): return {'restore_status': out[0]}
self.assertTrue(chemical_equations_equal('H2 + O2 -> H2O2', 'O2 + H2 -> H2O2', exact=True))
rs = read_csv(filename, compression="gzip", index_col=0) assert_frame_equal(df, rs)
self.assertEqual(test, expected)
stack = inspect.stack()
Vi = V[i, :, n_neighbors - s_i:] alpha_i = np.linalg.norm(Vi.sum(0)) / np.sqrt(s_i)
self.scope_ids = self.scope_ids._replace(user_id=user_id)
DEBUG = False USE_TZ = True SESSION_COOKIE_SECURE = False SESSION_SAVE_EVERY_REQUEST = False SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
try: hexin = ord(x) except TypeError: hexin = x
def _process_subheader_counts(self, offset, length): pass
raise ThreadNotFoundError("Thread not found.")
@task(default_retry_delay=settings.CREDIT_TASK_DEFAULT_RETRY_DELAY, max_retries=settings.CREDIT_TASK_MAX_RETRIES)
result = f.clean('13:30') self.assertEqual(result, time(13, 30, 0))
pass
import json import logging import requests
output = tensor.dot(patch_stack, kerns.flatten(2).T).reshape((B, OR, OC, K))
xpath = "//div[@class='block']/p/b" self.assert_has_text(xml, xpath, 'HTML')
return self._seek_value_label_names + (33 * self.nvar) + 20 + 17
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
px_x = round(npix + (lon * self._degpp[zoom]))
required_boto3_version = '1.2.1'
non_image_drivers = ['nova', 'virtualbox']
pass
matching = get_matching_by_name(name) if not matching: continue
for data in generated_certificates: data['report_run_date'] = report_run_date
self.assertEqual(len(mail.outbox), 0)
overview = CourseOverview.get_from_id(course.id)
n_classes = int(y.max()) + 1 if loss == 'multinomial' else 1
import logging
return type( str(self.name), bases, body, )
ops.add_flex_arithmetic_methods( cls, _panel_arith_method, use_numexpr=use_numexpr, flex_comp_method=ops._comp_method_PANEL)
if policy == {}:
from __future__ import unicode_literals
ret.update({host_name: {'Error': error}})
self.assertTrue(issubclass(df.BoolCol.dtype.type, np.integer), "BoolCol loaded with incorrect type")
ret['hash_type'] = __opts__['hash_type']
if symbolic: activations[idx] = T.switch(clamp, initial, activations[idx]) else: activations[idx] = np.switch(clamp, initial, activations[idx])
unvisited_children = list(get_children(current_node))
axes = df.plot(x='x', y='y', kind='scatter', subplots=True) self._check_axes_shape(axes, axes_num=1, layout=(1, 1))
train_composite = Train(shared_dataset, mlp_composite, SGD(0.1, batch_size=5, monitoring_dataset=shared_dataset)) train_composite.algorithm.termination_criterion = EpochCounter(1) train_composite.main_loop()
urlpatterns += ( url(r'^survey/', include('survey.urls')), )
self.assertEqual(Permission.objects.filter( content_type=permission_content_type, ).count(), 1)
if salt.utils.is_true(kwargs.get('removed')): return {}
CELERY_RESULT_BACKEND = 'djcelery.backends.cache:CacheBackend'
from __future__ import absolute_import
dec = clf.decision_function(T) res = (dec > 0).astype(np.int) + 1 assert_array_equal(res, true_result)
self.youtube_configuration['time_to_response'] = 2.0 self.metadata = self.metadata_for_mode('youtube_html5')
import os import logging import re
b_time = int(psutil.boot_time())
self.assertEqual(AbstractPerson._meta._relation_tree, EMPTY_RELATION_TREE)
import os import stat import logging
yield dec
self.shell.directive = self
python_domain.PythonDomain.indices = []
ret = self.get_cache_returns(jid) if ret != {}: found.update(set(ret)) yield ret
self.assertEqual(self.index[2], ('bar', 'one'))
CourseEnrollment.enroll(user, course_key=course.location.course_key) self.assertFalse(user.badgeassertion_set.all())
random_state = self.random_state_ if random_init else None
ChoiceFormset = formset_factory(Choice, extra=3) formset = ChoiceFormset()
min_soft = MAX_OPEN_FILES[limits]['soft_limit'] min_hard = MAX_OPEN_FILES[limits]['hard_limit']
new = list_pkgs(saltenv=saltenv) tries = 0 difference = salt.utils.compare_dicts(old, new)
if os_grain['kernel'] not in 'Darwin': self.skipTest( 'Test not applicable to \'{kernel}\' kernel'.format( **os_grain ) )
self.assertFalse(hasattr(user, 'profile'))
n_samples = 100 n_features = 500 rank = 5 k = 10
template_attrs = ( 'template_name', 'context_data', '_post_render_callbacks', '_request', ) for attr in template_attrs: self.assertFalse(hasattr(unpickled_response, attr))
continue
from __future__ import absolute_import import os import logging import signal import tempfile from threading import Thread, Event
import salt.utils.gitfs from salt.exceptions import FileserverConfigError
y_1 = regr_1.predict(X) y_2 = regr_2.predict(X)
pass
self.login_staff() response = self.get_course_info_page() self.assertEqual(response.status_code, 200) content = response.content self.assertIn("OOGIE BLOOGIE", content)
for submodule in submodules: if submodule.__name__.startswith(mod.__name__ + '.'): reload(submodule) self._reload_submodules(submodule)
self._studio_reindex()
related_models.add((app_label, model_name))
},
df = DataFrame({'x': [1, 2, 3], 'y': [3, 4, 5]})
try: m = missing.clean_interp_method(method, **kwargs) except: m = None
from salt.states import alias
self.assertTrue('success' in result and not result['success'])
self._enroll(course.id, "verified")
self.io_loop.start()
self.assertNotIn('brain.left_hemisphere', funcs)
get_storage_keys = show_storage_keys
'ORGANIZATIONS_APP': False,
title_label = _(u"Title")
self.assertEquals(3, self.response.content.count('grade_B'))
qs = Article.objects.order_by('invalid_column') with self.assertRaises(FieldError): list(qs) with self.assertRaises(FieldError): list(qs)
raise GEOSException('Geometry resulting from slice deletion was invalid.')
sp = SpectralClustering(n_clusters=2, affinity='<unknown>') assert_raises(ValueError, sp.fit, X)
if __opts__['test']: ret['comment'] = 'SELinux mode is set to be changed to {0}'.format( tmode) ret['result'] = None return ret
seed_milestone_relationship_types() course_milestones = milestones_api.get_course_milestones(course_key=course_key, relationship="fulfills")
d = Series([1] * 5) x = d.rolling(window=5).kurt() tm.assert_series_equal(all_nan, x)
return value.isoformat()
angle = np.arctan(u[1] / u[0])
output = _cmd('at', '-c', str(jobid))
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
greatest_least_ignores_nulls = False
'list_max_length': get_config_value('list_max_length'),
result = idx / 2
if 'cygwin' in platform.system().lower():
api.update_credit_request_status(request["parameters"]["request_uuid"], self.PROVIDER_ID, status) self._assert_credit_status(status)
instructor_dashboard_page = self.visit_instructor_dashboard() allowance_section = instructor_dashboard_page.select_special_exams().select_allowance_section()
for child in children: self._block_relations[child].parents.remove(usage_key)
from __future__ import absolute_import from distutils.version import LooseVersion import logging
with extend_sys_path(self.base_location, self.other_location): with self.assertRaises(ImproperlyConfigured): with self.settings(INSTALLED_APPS=['nsapp']): pass
return provider_respond(server, openid_request, response, results)
targets.append(':'.join(_get_repo_tag(str(target))))
clf = MultinomialNB() assert_raises(ValueError, clf.fit, -X, y2) y_pred = clf.fit(X, y2).predict(X)
from __future__ import absolute_import
__func_alias__ = {'set_': 'set'}
crypt_salt = secure_password(8, use_random=False)
data_home = get_data_home(data_home=data_home) data_home = join(data_home, 'mldata') if not exists(data_home): os.makedirs(data_home)
mode, is_active = CourseEnrollment.enrollment_mode_for_user(self.user, self.course_key) self.assertTrue(is_active) self.assertEqual(mode, 'verified')
rng = date_range(START, END, freq=datetools.bmonthEnd)
result = list(self.values)
from __future__ import absolute_import import json import logging
z *= 2
#epub_exclude_files = []
module1.set_state_from_lcp() self.assertEqual(module1.lcp.inputs.keys(), module1.input_state.keys())
warn_until( 'Carbon', 'It\'s time to start raising `SaltInvocationError` instead of ' 'returning warnings', _dont_call_warnings=True )
log = logging.getLogger(__name__)
import salt.ext.six as six
self.assert_no_events_emitted() try: response = segmentio.segmentio_event(request) self.assertEquals(response.status_code, 200)
set_prerequisite_courses(course.id, [unicode(pre_requisite_course.id)]) completed_milestones = milestones_achieved_by_user(student, unicode(pre_requisite_course.id)) self.assertEqual(len(completed_milestones), 0)
clf = self.factory(alpha=0.01, eta0=0.01, n_iter=5, shuffle=False, learning_rate=lr) clf.fit(X, Y)
max_len = n if n >= 0 else - 1 - n dropped = self.obj.dropna(how=dropna, axis=self.axis)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../')
class Person(Form): name = CharField() is_cool = NullBooleanField()
panel4d = Panel4D(vals, copy=True) self.assertIsNot(panel4d.values, vals)
import platform raise nose.SkipTest("failing on %s" % ' '.join(platform.uname()).strip())
xgrid, ygrid = construct_grids(data)
rs = mi_labels.iloc[2, 2] xp = mi_labels.ix['j'].ix[:, 'j'].ix[0, 0] self.assertEqual(rs, xp)
username = data['username'] if request.user.username != username: return HttpResponseForbidden()
all_leaves = est.tree_.children_left == TREE_LEAF assert_array_almost_equal(np.dot(node_indicator, all_leaves), np.ones(shape=n_samples))
for offset, name in enumerate(positional[non_default_count:]): annotation = annotations.get(name, _empty) parameters.append(Parameter(name, annotation=annotation, kind=_POSITIONAL_OR_KEYWORD, default=defaults[offset]))
self.assertEqual(Article.objects.filter(submitted_from__contains='32').count(), 0)
import sphinx from docutils.parsers.rst import directives from docutils import nodes from sphinx.util.compat import Directive
if remaining is None: yield b''.join(self) return
self.assertNotIn(self.student_name, self.certificates_section.last_certificate_invalidation.text) self.assertNotIn(notes, self.certificates_section.last_certificate_invalidation.text)
grouping_tag = grouping_tags[test_conditions['input_type']] self.assert_no_xpath(xml, "//{0}[@class='choicetextgroup_incorrect']".format(grouping_tag), self.context)
CREDIT_HELP_LINK_URL = "#"
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'gce', vm_['profile'], vm_=vm_) is False: return False
new_client.__singleton_init__(io_loop=io_loop, socket_path=socket_path) loop_instance_map[key] = new_client
import salt.utils import salt.utils.url import salt.fileserver from salt.utils.event import tagify
assert world.css_visible('iframe') check_lti_iframe_content("This is LTI tool. Success.")
link = world.retry_on_exception( lambda: _find_matching_button(category, component_type), ignored_exceptions=AssertionError )
if not len(self) == len(other): raise ValueError("cannot add indices of unequal length")
return sys.modules[fullname]
self.root_block_usage_key = root_block_usage_key
if not self.cpub and not self.connect_pub(timeout=wait): break
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
def test_user_role(): return 'staff'
self.assertEqual(six.memoryview(a2b_hex(hexewkb_2d)), pnt_2d.ewkb) self.assertEqual(six.memoryview(a2b_hex(hexewkb_3d)), pnt_3d.ewkb)
#categories = None
try: self.assertTrue(np.may_share_memory(self.series.index, identity.index)) except (AttributeError): pass
if conf.get('normalize_on_the_fly', False): return data
assert len(key) <= 250 return self.cache.get(key)
decorator = line_stripped continue
instructor = UserFactory() allow_access(self.course, instructor, 'instructor') self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
from __future__ import absolute_import import os import re
from __future__ import unicode_literals
self.assertRaises(TypeError, store.append, 'df_unimplemented', df)
filter_selected_events = lambda event: event.get('name', '') == 'edx.ui.lms.outline.selected' selected_events = self.wait_for_events(event_filter=filter_selected_events, timeout=2)
assert_copy(copy.levels, original.levels)
try: self.assertIn(ret_str, delete) except AssertionError: raise
courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(courses_list, [])
HAS_RANGE = False try: import seco.range HAS_RANGE = True except ImportError: log.error('Unable to load range library')
from __future__ import absolute_import
from salt.ext.six import string_types
assert_greater_equal(w[0], 0)
edxval_api.import_from_xml( video_asset_elem, field_data['edx_video_id'], course_id=course_id )
demand_hints = self.lcp.tree.xpath("//problem/demandhint/hint") demand_hint_possible = len(demand_hints) > 0
from salttesting import skipIf from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch ensure_in_syspath('../../')
assert_equal(len(lars.alphas_), 7)
return prlctl('stop', args, runas=runas)
list_keypairs = self.run_cloud('-f list_keypairs {0}'.format(PROVIDER_NAME))
with self.assertRaises(TypeError): class ProxyModel(SwappableModel):
supports_partially_nullable_unique_constraints = True
is_i8 = com.needs_i8_conversion(self.dtype) if is_i8: matches = False else: matches = (new_other == np.array(other))
try: if isinstance(date, six.string_types): try: if HAS_TIMELIB: return timelib.strtodatetime(to_bytes(date)) except ValueError: pass
self.send_delete(self.client) self.send_get(self.client, expected_status=404)
MAX_DATABASE_LOCK_RETRIES = 5
source_raw = splitter.raw_reset()
elif is_integer(label): self._invalid_indexer('slice', label)
executable_name = None
self.assertFalse(library_container.has_validation_error) self.assertFalse(library_container.has_validation_warning)
n_leaves = n_samples children = [c[::-1] for c in children]
membership1 = CohortMembership( course_id=course_1_auto_cohort_1.course_id, user=self.user1, course_user_group=course_1_auto_cohort_1 ) membership1.save() membership2 = CohortMembership( course_id=course_1_auto_cohort_1.course_id, user=self.user2, course_user_group=course_1_auto_cohort_1 ) membership2.save()
ind2 = self.index.copy() inplace_return = ind2.set_labels(new_labels, inplace=True) self.assertIsNone(inplace_return) assert_matching(ind2.labels, new_labels)
self.assertIn('pre requisite course', resp.content) self.assertIn('course that has pre requisite', resp.content)
COURSE_SCOPE = 'course'
ts = Timestamp('2001-01-05 11:56', tz=maybe_get_tz('dateutil/UTC')) self.assertEqual(ts, ts.tz_convert(dateutil.tz.tzutc()))
arr[0] = val self.assertNotEqual(new_index[0], val)
ordering = self.get_ordering(request, qs) qs = qs.order_by(*ordering)
self.assertEqual(config.get_text('.action-primary'), "Create") self.assertFalse(config.delete_button_is_present) config.save()
action_name = ugettext_noop('emailed') visit_fcn = perform_delegate_email_batches return run_main_task(entry_id, visit_fcn, action_name)
all_perms = set(Permission.objects.using(using).filter( content_type__in=ctypes, ).values_list( "content_type", "codename" ))
target_names = np.array(['a', 'b', 'c']) y = target_names[y_idx]
ROUTING_KEY = getattr(settings, 'CREDENTIALS_GENERATION_ROUTING_KEY', None)
for certificate in certificates: certificate['is_active'] = is_active break
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.ext.six import string_types
if axis is not None: axis = self._get_axis_number(axis)
winrepo.__salt__ = {} winrepo.__opts__ = {}
import logging
assert_true(X_scaled is not X) assert_true(X_csr_scaled is not X_csr)
try: os.unlink(filename_numpy) except: pass try: os.unlink(filename_larry) except: pass try: os.unlink(filename_pandas) except: pass
log = logging.getLogger(__name__)
ps = tm.makePeriodFrame() shifted = ps.tshift(1) unshifted = shifted.tshift(-1)
df = self.read_csv(StringIO(self.data1), nrows=3.0) tm.assert_frame_equal(df, expected)
history = HistoricalRecords()
for train, test in cval.LabelKFold(labels, n_folds=n_folds): assert_equal(len(np.intersect1d(labels[train], labels[test])), 0)
raise NotImplementedError()
_ = lambda text: text
return self._forward_fields_map[field_name]
rotation = np.zeros((n_components, n_components)) rotation[:, 0] = vectors[random_state.randint(n_samples), :].T
self.assertIs(r1.article_set.__class__, r1.article_set.__class__)
sls_file = '{0}.sls'.format(os.sep.join(repo)) if not os.path.exists(sls_file):
def _make_str_accessor(self): from pandas.core.index import Index
user = User(username=username, email=email, is_active=False) user.set_password(password)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm from sklearn.neighbors import KernelDensity
self.profile.profile_image_uploaded_at = datetime.datetime.now() self.profile.save() self.assertFalse(self.profile.has_profile_image)
t_start = datetime.now() clf.transform(X) delta = (datetime.now() - t_start) time_to_transform = compute_time(t_start, delta)
self._get_fields_cache[cache_key] = fields return fields
return mark_safe("%d%s" % (value, suffixes[value % 10]))
return T.nnet.sigmoid(conditional_params[0])
raise SkipTest
CountryAccessRule.objects.create( restricted_course=self.restricted_course, country=self.countries['US'], rule_type=CountryAccessRule.WHITELIST_RULE )
import re
log.exception('Error occurred while sending payment confirmation email')
loss, grad = _logistic_loss_and_grad(w, X, y, alpha=1.) grad_2, hess = _logistic_grad_hess(w, X, y, alpha=1.) assert_array_almost_equal(grad, grad_2)
self.mixed_frame['datetime'] = datetime.now() self.mixed_frame['timedelta'] = timedelta(days=1, seconds=1)
request = self.request_factory.get(reverse('about_course', args=[unicode(ccx_locator)])) request.user = student mako_middleware_process_request(request)
for chan_i in xrange(out_shp[-1]): channel = output[..., chan_i] start_idx = defoveate_channel(channel, rings, dense_X, start_idx)
result = Series(dtype='m8[ns]').sum() self.assertEqual(result, Timedelta(0))
from salt.states import mac_keychain as keychain
other_session = self.backend() other_session['foo'] = 'bar' other_session.set_expiry(-3600) other_session.save()
self.course_nav.go_to_vertical('Test Vertical-0') self.video.wait_for_video_player_render() self.video.speed = '2.0'
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.assertEqual(None, ret)
self.request_map = defaultdict(list)
with ensure_clean_store(self.path) as store:
import yaml from yaml.nodes import MappingNode, SequenceNode from yaml.constructor import ConstructorError try: yaml.Loader = yaml.CLoader yaml.Dumper = yaml.CDumper except Exception: pass
self.assertIn('level-element', html)
if not compat.PY3: l.append(('unicode', u('\\u03c3')))
Ua, sa, Va = \ randomized_svd(X, k, power_iteration_normalizer=normalizer, random_state=0) assert_almost_equal(s[:rank], sa[:rank])
class WKBWriterGet(GEOSFuncFactory): argtypes = [WKB_WRITE_PTR] restype = c_int
value = None
STATIC_ROOT = None
dot_str = self.adj.justify([dot_str], width, mode='center')[0] fmt_values.insert(row_num + n_header_rows, dot_str) fmt_index.insert(row_num + 1, '')
connection.settings_dict.update(settings_dict) connection.close()
return ret1 == ret2 == 0
self.assertQuerysetEqual(Reporter.objects.all(), [])
response = self.client.get('/permission_protected_method_view/') self.assertRedirects(response, '/accounts/login/?next=/permission_protected_method_view/')
return JsonResponse( { 'success': False, 'message': _('Invalid data, generate_for must be "new" or "all".'), }, status=400 )
self.d.stalkers.add(self.a)
Y_neg = Y.copy() Y_neg[0, 0] = -1 assert_raises(ValueError, transform.transform, Y_neg)
self.assertFalse(args['plan'][0][1]) self.assertIsInstance(args['apps'], migrations.state.StateApps)
conditions_map = {
for student in students[2:7]: CertificateWhitelistFactory.create(user=student, course_id=self.course.id, whitelist=True)
restricted_course, __ = RestrictedCourse.objects.get_or_create(course_key=course_key) restricted_course.enroll_msg_key = 'default' restricted_course.access_msg_key = 'default' restricted_course.disable_access_check = disable_access_check restricted_course.save()
if LooseVersion(version) < '0.16.0': tm.assert_frame_equal(result, expected, check_categorical=False) else: tm.assert_frame_equal(result, expected)
alphas = alphas[:n_iter + 1] coefs = coefs[:n_iter + 1]
if 'ip_address' in vm_: ip_address = str(vm_['ip_address']) elif 'public_ips' in data:
ret = self.run_function('virtualenv.create', [venv_dir]) self.assertEqual(ret['retcode'], 0)
with open(file_path, "w") as file_handle: with self._log_execution_time(): self._write_email_opt_in_prefs(file_handle, org_list, courses)
self.assertLess(ordered_sigs.index('s3'), ordered_sigs.index('s1'))
self.assertEqual(len(response['results']), expected_length) unused_class = self.create_badge_class(check_course, slug='unused_slug', issuing_component='unused_component')
res_r = int(numpy.floor(last_pool_r/rs)) + 1 res_c = int(numpy.floor(last_pool_c/cs)) + 1
with connection.cursor() as cursor: self.assertIsInstance(cursor, CursorWrapper) self.assertTrue(cursor.closed)
components = rng.binomial(1, 0.5, (n_components, n_features)) * 2 - 1 return 1 / np.sqrt(n_components) * components
tsframe[:0].to_csv(path) recons = DataFrame.from_csv(path) exp = tsframe[:0] exp.index = []
if location.category in DIRECT_ONLY_CATEGORIES: raise InvalidVersionError(location)
cart = Order.get_cart_for_user(request.user) try: cart_items = cart.find_item_by_course_id(course_registration.course_id)
ax = df.plot.bar(stacked=True, linewidth=2) for r in ax.patches: self.assertEqual(r.get_linewidth(), 2)
path = list() n_alphas = self.alphas inner_verbose = max(0, self.verbose - 1)
result = Timestamp(np.nan) self.assertIs(result, NaT)
from __future__ import absolute_import from salt.exceptions import CommandExecutionError, CommandNotFoundError
ret['result'] = True ret['comment'] = 'property {0} already has value "{1}"'.format(name, value)
status = 'satisfied' reason = {'final_grade': grade_summary['percent']}
honor, _ = self.create_mode('honor', 'Honor') self.assertFalse(CourseMode.has_payment_options(self.course_key))
path = ''
log = logging.getLogger(__name__)
if field.primary_key: continue
'METADATA_URL': 'https://www.googleapis.com/youtube/v3/videos',
self.load_data()
FEATURES['ENABLE_SERVICE_STATUS'] = True
self._has_valid_type(key, axis) return self._get_label(key, axis=axis)
for sql in self.geometry_sql: self.execute(sql) self.geometry_sql = []
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
'tools.salt_token.on': True, 'tools.salt_auth.on': False,
if not summary: summary.append(line) continue
elif existing['code'] == 404:
from salt.exceptions import CommandExecutionError from salt.modules import parted
self._credit_provider_callback(request_uuid, 'approved') self._assert_request_status(request_uuid, "approved")
result = df.iloc[-1, -1] exp = df.ix['j', 'D'] self.assertEqual(result, exp)
CouponRedemption.remove_code_redemption_from_item(item, user)
def f(): s[l]
ScopeIds(None, block_type, location, location), dbmodel, for_parent=kwargs.get('for_parent'),
series = Series(tm.makeIntIndex(20).astype(float), index=tm.makeIntIndex(20))
response_providers = get_credit_provider_display_names(self.course_key) self.assertListEqual(self.PROVIDERS_LIST, response_providers)
self.visit(node)
_config_filename_ = 'master' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'master') _setup_mp_logging_listener_ = True
result = idx * idx expected = Index(idx.values * idx.values) tm.assert_index_equal(result, expected, exact=True)
from __future__ import absolute_import import os import re import logging
new_user_partition = UserPartition(
D = Distance A = Area
return ''
return timezone.localize(value, is_dst=is_dst)
self.assertEqual(df.asfreq('D').index.freq, 'D')
name = '{0}-{1}'.format(name, version)
sorted_idx = np.argsort(predictions, axis=1)
finish_time = time() self._ddog_histogram(evt_time, 'delete_many.response_time', (finish_time - evt_time) * 1000)
from numpy.random import randint, choice, randn cols = ['jim', 'joe', 'jolie', 'joline', 'jolia']
def f(): df = orig.copy() df.loc["j", "cats"] = "c"
import ioflo.base.deeding from ioflo.aid.odicting import odict
return 18446744073709551615
if instructor not in list_instructor_ccx: try: enroll_email( course_id=ccx_key, student_email=instructor.email, auto_enroll=True, email_students=send_email, email_params=email_params, )
from __future__ import absolute_import
class AsyncHTTPTestCase(object): pass
exc_info_on_loglevel=logging.DEBUG
self.assertEqual(result.value, expected) self.assertEqual(tslib.pydt_to_i8(result), expected)
with self.assertRaises(NoReverseMatch): reverse(None)
import yaml from jinja2 import Environment, DictLoader, exceptions try:
indices = mask.sp_index.indices
self.setUp()
if 2 in pdp_lim: Z_level = np.linspace(*pdp_lim[2], num=8)
import os
import integration import salt.utils import salt.utils.find
ret['result'] = None return ret
cols = ['b', 'a'] _check_df(df, cols)
with ensure_clean_path(self.path) as path:
CREDIT_TASK_MAX_RETRIES = 5
log.exception(ex)
__virtualname__ = 'pkg'
PAID_COURSE_REGISTRATION_CURRENCY = ENV_TOKENS.get('PAID_COURSE_REGISTRATION_CURRENCY', PAID_COURSE_REGISTRATION_CURRENCY)
from __future__ import absolute_import
if isinstance(z, six.integer_types + (float,)): coords = [x, y, z] else: coords = [x, y]
query = Item.objects.exclude(creator__in=[self.a1, self.a2]).query self.assertNotIn(LOUTER, [x.join_type for x in query.alias_map.values()])
self.assertIn('Cannot Find Certificate', response.content)
self.assertEqual(response.status_code, 200) result = json.loads(response.content)
raise TemplateNotFound(template)
dspace.np_validate(batch) return batch
user = [user]
other_result = s.interpolate(method='values')
db_table = 'django_comment_client_permission'
IPFilter.objects.create( blacklist="192.168.10.20", enabled=True )
global _USE_NUMEXPR if _NUMEXPR_INSTALLED: _USE_NUMEXPR = v
close_bracket = (token_type == tokenize.OP and text in ']})')
return self.batch_process_rhs(compiler, connection)
self.path = preprocess(self.path) X, y = self._load_data()
cls.partial_fit(X_train, y_train, classes=all_classes)
dive.delete(using='other')
from __future__ import absolute_import import re import logging
groups = pickle.loads(pickle.dumps(groups)) self.assertQuerysetEqual(groups, [g], lambda x: x)
return False
clf = self.factory(alpha=0.1, n_iter=1000, class_weight=[0.5]) clf.fit(X, Y)
s = Series(rng) s_expt = Series(expt, index=[0, 1]) tm.assert_series_equal(s.dt.total_seconds(), s_expt)
self.assertEquals(xmodule_tabs.CourseTabList.get_tab_by_id(self.course.tabs, tab.tab_id), tab)
from __future__ import absolute_import import sys import types
from __future__ import division, absolute_import, print_function
for pattern in self.ALLOW_URL_PATTERNS: if pattern.match(request.path) is not None: return None
content_type, __ = mimetypes.guess_type(template)
for parent_ref in parents: parent_block = modulestore().get_item(block_map[parent_ref].location) parent_block.children.append(block_key) block_map[parent_ref] = update_block(parent_block)
self.assertEqual(len(paths[milestone_key]), 0)
label_indexer = np.zeros((ngroups, periods), dtype=np.int64) with nogil: for i in range(N):
pass
return {}
pyenv.__grains__ = {} pyenv.__salt__ = {}
reindexed_int = int_ts.reindex(self.ts.index)
pem_body = ''.join(pem_body.split())
if self.__serialize_attr_aliases__ and argname in self.__serialize_attr_aliases__: argname = self.__serialize_attr_aliases__[argname] serialized[argname] = argvalue
self.store.convert_to_draft(problem.location, self.user.id) problem = self.store.get_item(problem.location)
CsrfViewMiddleware().process_view(req, token_view, (), {}) resp = token_view(req)
items = raw data = items
salt '*' vsphere.vsan_enable my.esxi.host root bad-password
assert_raises(ValueError, _inverse_binarize_thresholding, y=csr_matrix([[1, 2], [2, 1]]), output_type="foo", classes=[1, 2], threshold=0)
int2byte = operator.methodcaller("to_bytes", 1, "big")
warm_low_reg_model = deepcopy(high_reg_model) warm_low_reg_model.set_params(warm_start=True, alpha=final_alpha) warm_low_reg_model.fit(X, y) assert_greater(low_reg_model.n_iter_, warm_low_reg_model.n_iter_)
if bool(actual_data) != bool(data): ret.update({item: {'old': actual_data, 'new': data}})
self.read_csv(log_file, index_col=0, parse_dates=[0], date_parser=f)
curr_batch_size = np.minimum(self._batch_size, self.len_curr_counts[curr_len]) curr_pos = self.len_indices_pos[curr_len]
vm_['pub_key'] = None vm_['priv_key'] = None
from .comment import Comment from .thread import Thread from .user import User from .commentable import Commentable
]
input_problem_answer(step, problem_type, correctness)
'name': block.display_name_with_default_escaped, 'category': block.category, 'id': unicode(block.location)
top_level_logger.propagate = False
other = tslib._localize_pydatetime(other, tzinfo)
self.assertGroupContent( groups[3], title=u"[no tags] (2)", notes=["Fifth note", "First note"] )
response = explicit_default_with_prefix_view(request, '5') self.assertEqual(response.content, b'Hello World 4')
newpath = (next_usage, path) queue.append((parent, newpath))
microsite.enable_microsites(log)
response = self.client.get(self.url) self.assertTrue(self.e_commerce_link in response.content) self.assertFalse('Coupons List' in response.content)
self.assertRaises( ValueError, store.select_column, 'df', 'values_block_0')
data = self._check_column_names(data)
self.functions, self.returners, self.function_errors, self.executors = self._load_modules()
tables = connection.introspection.table_names(cursor) created_models = set()
enrolled_course_keys = [enrollment.course_id for enrollment in course_enrollments] course_deadlines = VerificationDeadline.deadlines_for_courses(enrolled_course_keys)
GRADES_DOWNLOAD_ROUTING_KEY = HIGH_MEM_QUEUE
if service[1]: if include_enabled: enabled_services.update({service[0]: sorted(service[1].split())}) continue if include_disabled: disabled_services.update({service[0]: []})
self.update_masquerade(role='staff') self.verify_staff_debug_present(True)
result = Series(dtype=float).sum() self.assertEqual(result, 0)
continue
try: os.symlink(svc_realpath, _service_path(name))
return len(data)
req = django_to_webob_request(request)
'courseware_access': has_access( request.user, 'load_mobile', course_overview ).to_json(),
start = datetime(2010, 1, 1) end = datetime(2013, 1, 27)
embargoed = models.BooleanField(default=False)
self.seed %= MAX_RANDOMIZATION_BINS
#default_role = None
Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape)
for i, j in [(0, 1), (0, 2), (1, 2)]: nulls = [null_values[i], null_values[j]]
return json.loads(value, cls=MessageDecoder)
import logging
self.assertEqual(response.status_code, 302)
'django.middleware.locale.LocaleMiddleware',
import salt.ext.six as six try: import zmq except ImportError: pass
from __future__ import unicode_literals
if delta < 0: return self._cache.decr(key, -delta) try: val = self._cache.incr(key, delta)
multi_db = True
import functools import glob import json import logging import os import shutil import subprocess import sys import time import traceback import base64 from salt.utils import vt
from salt.ext.six.moves.urllib.parse import urlparse
import sklearn
ret = salt.utils.cloud.bootstrap(vm_, __opts__) ret.update(data.__dict__)
HAS_KEYSTONE = False try: from keystoneclient.v2_0 import client as kstone #import keystoneclient.apiclient.exceptions as kstone_exc HAS_KEYSTONE = True except ImportError: pass
return JsonResponse({"error": unicode(err)}, 400)
y = [v if v.size > 0 else np.array([np.nan]) for v in y]
return ret
if app: if dmg: cmd = 'ls -d *.app' out = __salt__['cmd.run'](cmd, cwd=mount_point, python_shell=True)
from __future__ import absolute_import import os import shutil import tempfile
if script: script_element = etree.SubElement(root, "script") script_element.set("type", "loncapa/python") script_element.text = str(script)
for user in users: get_cohort(user, self.course.id)
self.values = SparseArray(v, sparse_index=self.sp_index, kind=self.kind, dtype=v.dtype, fill_value=self.values.fill_value, copy=False)
self.assertEqual(response.status_code, 403)
boston = datasets.load_boston() perm = rng.permutation(boston.target.size) boston.data = boston.data[perm] boston.target = boston.target[perm]
return False
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
(all_events_pattern, saltnado_websockets.AllEventsHandler), (formatted_events_pattern, saltnado_websockets.FormattedEventsHandler),
uptime = datetime.datetime.now() - startup_time
self.assertLess(translation_count, len(trans_real._translations))
state_run = self.run_function('state.sls', mods='requisites.onchanges_multiple')
check_problem(step)
with assertRaises(KeyError): df['2016-01-01']
import salt.utils
dist1 = SouthTexasCity.objects.distance(lagrange, field_name='point').order_by('id')
from __future__ import unicode_literals
block_structure_result = xblock_key in block_structure has_access_result = bool(has_access(user, 'load', self.get_block(i), course_key=self.course.id))
fill_error = re.compile("Incompatible type for fill_value")
allow_database_queries = True
result = Series([datetime(2, 1, 1)]) self.assertEqual(result[0], datetime(2, 1, 1, 0, 0))
try: import confidant.client import confidant.formatter HAS_LIBS = True except ImportError: HAS_LIBS = False
self.assertTrue(isnull(self.ts[:15].cov(self.ts[5:], min_periods=12)))
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
_save = self.run_function('beacons.save') self.assertTrue(_save['result'])
iris = datasets.load_iris() X = iris.data y = iris.target n_classes = np.unique(y).size
test1=value 1
from tempfile import mkdtemp import shutil from functools import partial
from .celery import APP as CELERY_APP
self._iterations = 0 while True: result = self.optimize_inner(operations, app_label) self._iterations += 1 if result == operations: return result operations = result
all_assets, __ = contentstore('trashcan').get_all_content_for_course(self.course.id) self.assertGreater(len(all_assets), 0)
continue
err = np.atleast_2d(err)
self._validate_estimator()
return npm_output
import salt.utils import salt.utils.decorators as decorators
self.assertEqual(hasher.encode.call_count, 1)
cases = [(fidx1, fidx2), (didx1, didx2)]
from __future__ import absolute_import from datetime import datetime from dateutil.relativedelta import relativedelta import json import pprint import tempfile
return SequenceDatasetIterator(self, data_specs, subset_iterator, return_tuple=return_tuple)
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21")
test = [[1], [3], [4]] assert_array_almost_equal(clf.predict(test), [1, 3, 4], 2)
fig = plt.figure() plt.subplots_adjust(hspace=-.1, wspace=.4, top=.95, bottom=.05)
boston = datasets.load_boston() perm = rng.permutation(boston.target.size) boston.data = boston.data[perm] boston.target = boston.target[perm]
if self.empty_permitted and not self.has_changed(): return
self.assertIs(inner_qs._result_cache, None)
random_state = check_random_state(0) p = random_state.rand(n_samples) * (2 * np.pi - 0.55) t = random_state.rand(n_samples) * np.pi
if callable(using): return Atomic(DEFAULT_DB_ALIAS, savepoint)(using) else: return Atomic(using, savepoint)
if not isinstance(tup, tuple): return False
timeout_in_seconds = 60 * 60 * 24 self._cache.set( self._encode_root_cache_key(block_structure.root_block_usage_key), zp_data_to_cache, timeout=timeout_in_seconds, )
component = self.store.get_item(component.location) component.display_name = 'Changed Display Name' self.store.update_item(component, self.user_id)
self.assertEqual(response.status_code, 200) self.assertIn('Financial Assistance Application', response.content)
'renderer': str,
self.import_children(source_courselike, courselike, courselike_key, dest_id)
alice = User.objects.db_manager('default').create_user('alice', 'alice@example.com')
import integration from salt.config import minion_config
assert_almost_equal(matthews_corrcoef(y_true, y_true), 1.0)
answer = event_info.get('answers', {}).get(response.answer_id) if answer is not None: event_info['answers'][response.answer_id] = response.unmask_name(answer)
class DeconstructibleInstances(object): def deconstruct(self): return ('DeconstructibleInstances', [], {})
self.components_ = np.empty((0, X.shape[1]))
self.assertIn(d['country_name'], ('Curaçao', 'Curacao'))
AccessTestData( partition_groups={1: 1, 2: 2}, xblock_access={1: [1]}, merged_parents_list=[{1: {3}}, {1: {1}}], expected_access=True, ),
yield dec
STATIC_URL = '/static/' STATIC_ROOT = ENV_ROOT / "staticfiles"
for choice in subset_choices: choicegroup.append(choice)
for i, k in enumerate(key): mask &= df.iloc[:, i] == k
from salt.modules import ret import salt.loader
MULTIOUTPUT_METRICS = [ "mean_absolute_error", "mean_squared_error", "r2_score", "explained_variance_score" ]
from __future__ import absolute_import import logging
if 'custom_checking' in self.text_customization: return self.text_customization.get('custom_checking')
DATE_INPUT_FORMATS = [
self._assert_course_verification_status(VERIFY_STATUS_SUBMITTED)
index = MultiIndex(levels=[major_axis, minor_axis], labels=[major_labels, minor_labels])
if limit is not None: raise NotImplementedError("specifying a limit for 'fillna' has " "not been implemented yet")
url_path = ""
self.course_ids = [unicode(e.course_id) for e in enrollments]
datetime_instance = datetime.datetime(2014, 3, 4) timedelta_instance = datetime.timedelta(seconds=1) timestamp_instance = date_range(datetime_instance, periods=1, freq='D')[0]
return self._wrap_union_result(other, result)
from __future__ import absolute_import import fnmatch import logging import os import pprint
if key.scope not in self.VALID_SCOPES: raise InvalidScopeError(key, self.VALID_SCOPES) if key.scope == Scope.content: self._load_definition()
proba = all_proba[0]
super(SplitMongoModuleStore, self)._drop_database(database, collections, connections)
self.emit_event(EVENT_NAME_ENROLLMENT_MODE_CHANGED)
#pylint: disable=E0602
X, y = iris.data, iris.target
del params["username"] assert_username_error("Username must be minimum of two characters long")
assert_policy_entries( [ADVANCED_MODULES_KEY, DISPLAY_NAME_KEY, "Show Calculator"], ["[]", DISPLAY_NAME_VALUE, "false"])
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, done=False) self.assertTrue(module.should_show_save_button())
self.assertEqual(as_view_decorator.cache_alias, 'default')
__virtualname__ = 'user'
cumsum = self.tsframe.cumsum(axis=1) expected = self.tsframe.apply(Series.cumsum, axis=1) tm.assert_frame_equal(cumsum, expected)
from __future__ import absolute_import
import salt.utils import salt.utils.url import salt.fileserver from salt.utils.event import tagify
old_field = IntegerPK._meta.get_field('j') new_field = IntegerField(primary_key=True) new_field.model = IntegerPK new_field.set_attributes_from_name('j')
self.assertEqual(True, ipaddress.ip_address('100::').is_reserved) self.assertEqual(True, ipaddress.ip_network('4000::1/128').is_reserved)
result = s[list(mask)] expected = s[mask] assert_series_equal(result, expected) self.assert_index_equal(result.index, s.index[mask])
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
alice = dive.authors.create(name='Alice') self.assertEqual(alice._state.db, 'default')
result = a.dot(b['one']) tm.assert_series_equal(result, expected['one'], check_names=False) self.assertTrue(result.name is None)
exceptions = [] do_thread() self.assertIsInstance(exceptions[0], DatabaseError)
weight = X[rows][:, cols].sum() cut = (X[row_complement][:, cols].sum() + X[rows][:, col_complement].sum()) return cut / weight
second_iterations = 0 for index, raw_author in enumerate(raw_authors): self.assertEqual(normal_authors[index], raw_author) second_iterations += 1
with self.settings(AUTHENTICATION_BACKENDS=[ 'django.contrib.auth.backends.ModelBackend']): user = get_user(request)
y_true, y_pred, _ = make_prediction(binary=False)
self.dom_ids = ['map%d' % i for i in range(len(self.maps))]
means = rand_data.means g.means_init = means g.fit(X) assert_array_equal(means, g.means_init)
continue
cohort_list[0].users.add(*user_list) cohort_list[0].users.clear() assert_events("removed", user_list, cohort_list[:1]) mock_tracker.reset_mock()
xblock.children = children
rng = np.random.RandomState(0) n_samples, n_features = 10, 5
row_levels = [ss.index._get_level_number(x) for x in row_levels] column_levels = [ss.index._get_level_number(x) for x in column_levels]
APP.config_from_object('django.conf:settings') APP.autodiscover_tasks(lambda: settings.INSTALLED_APPS)
self.notes_page.wait_for_ajax()
r = requests.post(self.server_uri, data=json.dumps(data), headers=headers, verify=http_event_collector_SSL_verify)
self.assertEqual(len([r for r in httpretty.httpretty.latest_requests if r.method == 'PATCH']), 0)
gbq.to_gbq(df, destination_table, PROJECT_ID, chunksize=10000)
from __future__ import absolute_import, print_function
if chapter.hide_from_toc or local_hide_from_toc: continue
course_id = CourseKeyField(max_length=255, db_index=True, unique=True)
y[::5] += 3 * (0.5 - rng.rand(X.shape[0]/5))
_groupby = _algos.groupby_object _arrmap = _algos.arrmap_object _left_indexer_unique = _algos.left_join_indexer_unique_object _left_indexer = _algos.left_join_indexer_object _inner_indexer = _algos.inner_join_indexer_object _outer_indexer = _algos.outer_join_indexer_object _box_scalars = False
self.ts.diff()
backward_reduce_ndarray = ArrayMemmapReducer( None, pool_folder, mmap_mode, verbose) backward_reducers[np.ndarray] = backward_reduce_ndarray backward_reducers[np.memmap] = reduce_memmap
total_amount = PaidCourseRegistration.get_total_amount_of_purchased_item(self.course_key) self.assertEqual(total_amount, 36)
break
import os import errno import logging
info_log.assert_called_with('email sent to new created user at %s', 'test_student@example.com')
response = self.client.get('/login_protected_method_view/') self.assertRedirects(response, '/accounts/login/?next=/login_protected_method_view/')
grains['virtual_subtype'] = 'Xen PV DomU'
response = self.http_get_for_course(course_id=unicode(self.empty_course.id), HTTP_AUTHORIZATION=auth_header) self.assertEqual(response.status_code, 404)
orig_settings_dict = self.connection.settings_dict new_settings_dict = orig_settings_dict.copy() new_settings_dict['NAME'] = '{}_{}'.format(orig_settings_dict['NAME'], number) return new_settings_dict
DEFAULT_COURSE_ABOUT_IMAGE_URL = ENV_TOKENS.get('DEFAULT_COURSE_ABOUT_IMAGE_URL', DEFAULT_COURSE_ABOUT_IMAGE_URL)
def squared_dloss(p, y): return p - y
eligible_certificates = EligibleCertificateManager()
assert_warns(RuntimeWarning, k_means, X, n_clusters=n_clusters, init=centers)
def _check_cast(df, v): self.assertEqual( list(set([s.dtype.name for _, s in compat.iteritems(df)]))[0], v)
return 'problem'
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, call, patch)
response = self.session.post( url, data=self._encode_post_dict(self._advanced_settings), headers=self.headers, )
colors = _get_standard_colors(num_colors=3, colormap=self.colormap, color=None) self._boxes_c = colors[0] self._whiskers_c = colors[0] self._medians_c = colors[2]
ret['changes'] = { 'testing': { 'old': 'Unchanged', 'new': 'Something pretended to change' } }
pass
course_enrollment.mode = u'verified' course_enrollment.save() self.assertEqual(course_enrollment.mode, u'verified')
results = data.get_course_enrollments(self.user.username) self.assertEqual(results, created_enrollments)
log.warning( 'Minion id {0} is not who it says it is!'.format( load['id'] ) ) return {}
a = 10000000000000000 b = a + 1 s = Series([a, b])
face_compressed = np.choose(labels, values) face_compressed.shape = face.shape
self._enable_cohorting() self._create_verified_cohort() self.assertFalse(VerifiedTrackCohortedCourse.is_verified_track_cohort_enabled(self.course.id)) self._verify_no_automatic_cohorting() self.assertFalse(error_logger.called)
from __future__ import absolute_import import os import sys import types import logging import traceback import multiprocessing import subprocess import json
result = Series(s.values).astype('datetime64[ns, US/Eastern]') assert_series_equal(result, s)
Xs.append(np.array([[1, 0.0003817754041], [2, 0.0003817753750]], dtype=np.float32))
with self.assertRaises(GDALException): setattr(band, 'nodata_value', 10)
objarr = obj
for random_matrix in all_random_matrix: yield check_input_size_random_matrix, random_matrix yield check_size_generated, random_matrix yield check_zero_mean_and_unit_norm, random_matrix
rets = {} for ret in ssh.run_iter(mine=True): rets.update(ret)
self.user = user
from .aws import * import os from django.core.exceptions import ImproperlyConfigured
import salt.utils from salt.exceptions import CommandExecutionError, MinionError import salt.ext.six as six
return capi.get_intring(self.ptr, index - 1)
mean = layer.mf_update( state_below=T.alloc(0., 1, 1), state_above=None, layer_above=None)
locked_toc = self._return_table_of_contents() for toc_section in self.expected_locked_toc: self.assertIn(toc_section, locked_toc)
modulestore().get_item(usage_key)
html_use_index = False
from pandas.tslib import maybe_get_tz gettz = lambda x: maybe_get_tz('dateutil/' + x)
ttl = force_text(ttl)
self.assertEqual(sorted_deps[:3], [A, B, C]) self.assertEqual(sorted_deps[3:], [AtoB, BtoC, CtoA])
LOGGER.info(u"Retrieved {num_rows} records.".format(num_rows=row_count))
defaults = DEFAULT_MASTER_OPTS defaults.update(DEFAULT_SPM_OPTS)
return self.q(css='.cohorts-state-section').visible or self.q(css='.new-cohort-form').visible
import salt.ext.six as six
course = CourseFactory.create(default_store=modulestore_type, emit_signals=True)
self.assertEqual( course_overview.image_urls, { 'raw': expected_url, 'small': expected_url, 'large': expected_url, } ) return course_overview
inp = iter(inp) mlb = MultiLabelBinarizer(classes=[1, 3, 2]) assert_array_equal(mlb.fit(inp).transform(inp), indicator_mat)
addr = _split_optional_netmask(address)
dive = Book.objects.using('other').create(title="Dive into Python", published=datetime.date(2009, 5, 4))
self.assertEquals( block_key in block_structure, block_key not in missing_blocks, 'Expected presence in block_structure for block_key {} to match absence in missing_blocks.'.format( unicode(block_key) ), )
foo = Foo()
if self.is_datetime_lhs or self.is_datetime_rhs:
return {'pythonversion': list(sys.version_info)}
fchange = _check_dir_meta(name, user, group, mode) if fchange: changes[name] = fchange if clean: keep = _gen_keep_files(name, require, walk_d)
args = [name] if snap_name: args.extend(['--name', snap_name]) if desc: args.extend(['--description', desc])
import salt.loader from salt.log import LOG_LEVELS
self.orig_names = list(self.columns)
lyr = get_layer() self.assertEqual(source.nfeat, len(lyr)) self.assertEqual(source.gtype, lyr.geom_type.num)
exam_attempts_section.remove_student_attempt() self.assertFalse(exam_attempts_section.is_student_attempt_visible)
if generate_translation: for lang, filename in item.transcripts.items(): item.transcripts[lang] = os.path.split(filename)[-1]
from __future__ import absolute_import import getpass import grp import pwd import os import shutil import sys
_check_all_orients(self.empty_frame, check_index_type=False, check_column_type=False)
post_params = {key: json.dumps(val)} response = requests.put(self.url, data=post_params) self.assertEqual(response.status_code, 200)
with tm.assertRaises(ValueError): df.hist(layout=(1,)) with tm.assertRaises(ValueError): df.hist(layout=(-1, -1))
'lms.djangoapps.verify_student',
boot(kwargs={'linode_id': node_id, 'config_id': config_id, 'check_running': False})
VERSION = 4
from salt.ext.six import string_types
self.dashboard_page.visit()
return pytz.timezone(self.settings_dict['TIME_ZONE'])
return 'datetime64'
'master_alive_interval': int,
ChoiceFormSet = formset_factory(Choice, extra=1, min_num=1)
self.update_structure(dest_course_key, new_structure)
def get_default(self): return self.default
grease = Book.objects.using('other').create(title="Greasemonkey Hacks", published=datetime.date(2005, 11, 1))
test_stats = {'n_test': 0, 'n_test_pos': 0}
instructor = AdminFactory.create() self.client.login(username=instructor.username, password="test")
return sorted(returners_)
in_block = True
'publish_port': int,
rets = {} for ret in ssh.run_iter(): rets.update(ret)
core.__salt__ = {}
s = ser.reset_index(drop=True) s2 = ser s2.reset_index(drop=True, inplace=True) assert_series_equal(s, s2)
n_population = 10
self.thread_page_1.click_and_open_thread(thread_id=self.thread_ids[1]) self.assertTrue(self.thread_page_2.is_browser_on_page())
max_primes = [500, 1000, 2500, 5000]
K_gradient = np.empty((X.shape[0], X.shape[0], 0)) return K, K_gradient
from __future__ import unicode_literals
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
vectorizer = TfidfVectorizer(ngram_range=(1, 3), analyzer='char', use_idf=False)
self._build_f(X, y) return self
p = T.switch(p > 0., p, self.left_slope * p) return p
fmt = CustomFormatter() handler = CustomStreamHandler(stdout=stdout, stderr=stderr, formatter=fmt) top_level_logger.addHandler(handler)
self.download_collection = win32com.client.Dispatch('Microsoft.Update.UpdateColl')
repr = [inputs]
@python_2_unicode_compatible class Line(models.Model): name = models.CharField(max_length=100)
if not hasattr(self, 'n_samples_seen_'): self.n_samples_seen_ = X.shape[0] else: max_abs = np.maximum(self.max_abs_, max_abs) self.n_samples_seen_ += X.shape[0]
ssh_gateway_config['ssh_gateway_key'] = config.get_cloud_config_value( 'ssh_gateway_private_key', vm_, __opts__, default=None, search_global=False )
CourseFixture( org='test_org', number='335535897951379478207964576572017930000', run='test_run', display_name='Test Course 335535897951379478207964576572017930000', ).install()
if case_sensitive: casify = lambda x: x else:
user2 = UserFactory() with self.assertRaises(PermissionDenied): reindex_course_and_check_access(self.course.id, user2)
df_mixed.columns = df_mixed.columns.astype('unicode')
hw_section = next(section for section in sections_list if section.get('url_name') == hw_url_name) return [s.earned for s in hw_section['scores']]
self.all_words = temp_all_words
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
params.update(default_flow_style=False)
lti_user = create_lti_user(lti_user_id, lti_consumer)
return parent.template
root = get_or_create_root()
_, y_true = make_multilabel_classification(n_features=1, n_classes=n_classes, random_state=0, allow_unlabeled=True, n_samples=n_samples) _, y_pred = make_multilabel_classification(n_features=1, n_classes=n_classes, random_state=1, allow_unlabeled=True, n_samples=n_samples)
if self.read_committed is True: if connection.vendor == 'mysql': cursor = connection.cursor() cursor.execute("SET TRANSACTION ISOLATION LEVEL READ COMMITTED")
warnings.filterwarnings( 'ignore', 'With-statements now directly support multiple context managers', DeprecationWarning )
rng = date_range('1/1/1990', periods=N, freq='H', tz='US/Eastern') ts = Series(np.random.randn(N), index=rng)
file = getattr(instance, field.attname) data[field.attname] = file.name
X = np.array([[0, 1], [1.01, 1.], [2, 0]])
groups = [] for g in p.groups:
transform = AdditiveChi2Sampler(sample_steps=3) X_trans = transform.fit_transform(X) Y_trans = transform.transform(Y)
X -= X.min()
if vm_info['profile'] and config.is_profile_configured( __opts__, __active_provider_name__ or 'virtualbox', vm_info['profile'] ) is False: return False
from __future__ import absolute_import
return DatetimeIndex(snapped, freq=freq, verify_integrity=False)
assert len(self.hidden_layers) > 0
self._submit_photos( face_image=self.IMAGE_DATA + "9999", photo_id_image=self.IMAGE_DATA + "1111", ) two_photo_reverification_data = self._get_post_data()
assert_series_equal(result + td2, td1)
block_relations, transformer_data, block_data_map = zunpickle(zp_data_from_cache) block_structure = BlockStructureModulestoreData(root_block_usage_key) block_structure._block_relations = block_relations block_structure._transformer_data = transformer_data block_structure._block_data_map = block_data_map
multi_db = True
result = df.set_index(df.C) self.assertEqual(result.index.name, 'C')
assert_raises_regex(ValueError, "n_init", KMeans(n_init=0).fit, X) assert_raises_regex(ValueError, "n_init", KMeans(n_init=-1).fit, X)
descriptor.raw_grader = descriptor.raw_grader
if 'grains' not in __opts__ or not __opts__['grains']: __opts__['grains'] = salt.loader.grains(__opts__)
try: ret = json.dumps({'return': resp}) except TypeError as exc: code = 500 ret = str(exc)
errors = modulestore.get_course_errors(SlashSeparatedCourseKey("edX", "toy", "2012_Fall")) assert errors == []
import salt.client.ssh import logging import os from salt.exceptions import CommandExecutionError
df['int16_2'] = Series([1] * len(df), dtype='int16') self.assertRaises(ValueError, store.append, 'df', df)
self.assertEqual(result.get(), "succeeded") rerun_state = CourseRerunState.objects.find_first(course_key=split_rerun_id) self.assertEqual(rerun_state.state, CourseRerunUIStateManager.State.SUCCEEDED)
already_exists and cinfos['out']['Image'] == iinfos['out']['Id']
ele = (ele * 2 * numpy.pi) / 360. azi = (azi * 2 * numpy.pi) / 360.
not_loaded = list(set(mods) - set(already_loaded))
return courseware.views.views.courses(request)
try: certificate_invalidation_data = parse_request_data(request) certificate = validate_request_data_and_get_certificate(certificate_invalidation_data, course_key) except ValueError as error: return JsonResponse({'message': error.message}, status=400)
filepath = SettingsPage.get_asset_path(file_to_upload) self.q(css=self.upload_image_browse_button_selector).results[0].send_keys(filepath) self.q(css=self.upload_image_upload_button_selector).results[0].click()
assert_numpy_array_equal(np.array([1]), 1)
config.add_extension( '_isotonic', sources=['_isotonic.c'], include_dirs=[numpy.get_include()], libraries=libraries, )
error_message=_('Expected a <choice> or <compoundhint> tag; got {given_tag} instead').format( given_tag=choice.tag )
cherrypy.config.update({'environment': "test_suite"})
h = .02
assert_frame_equal(joined, expected.ix[:, joined.columns])
import salt.utils
offsets = [pd.offsets.Hour(2), timedelta(hours=2), np.timedelta64(2, 'h'), Timedelta(hours=2)]
if not getattr(response, 'is_rendered', True) and callable(getattr(response, 'render', None)): response = response.render()
wrapped = obj.__wrapped__
"decision": decision, "req_reference_number": str(order_id), "req_amount": order_amount, "auth_amount": paid_amount, "req_card_number": card_number,
DATE_FORMAT = 'j F، Y' TIME_FORMAT = 'g:i A' YEAR_MONTH_FORMAT = 'F Y' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'd‏/m‏/Y'
for idxr, getitem in [(lambda x: x.ix, False), (lambda x: x.loc, False), (lambda x: x, True)]:
if self.coord_dim != geom.coord_dim: geom.coord_dim = self.coord_dim
from functools import partial from os import path
with self.store.branch_setting(ModuleStoreEnum.Branch.published_only, course_key): assertProblemNameEquals(problem_new_name) assertNumProblems(problem_original_name, 0)
admin.site.register(CourseEventBadgesConfiguration, ConfigurationModelAdmin)
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course_key))
from salt.modules import nftables import salt.utils from salt.exceptions import CommandExecutionError
comparator(retrieved, obj)
from django.contrib.sessions.models import Session return Session
response = render_to_response(path, context) response.mako_context = context response.mako_template = path return response
self.assertContains(response, '<h3 id="built_in-add">add</h3>', html=True) self.assertContains(response, '<li><a href="#built_in-add">add</a></li>', html=True)
if hasattr(X, 'T'): assert_raises(ValueError, transformer.transform, X.T)
import salt.utils import salt.utils.args from salt.exceptions import CommandNotFoundError, CommandExecutionError from salt.version import SaltStackVersion, __saltstack_version__ from salt.log import LOG_LEVELS
from __future__ import absolute_import import salt.utils import time import logging from salt.exceptions import CommandExecutionError
if compat.PY35: BaseExprVisitor.visit_Call = BaseExprVisitor.visit_Call_35 else: BaseExprVisitor.visit_Call = BaseExprVisitor.visit_Call_legacy
if not pkginfo: log.error('Unable to locate package {0}'.format(name)) ret[target] = 'Unable to locate package {0}'.format(target) continue
with self.assertRaisesMessage(ValidationError, "'Enter a valid URL.'"): f.clean('http://%s' % ("X" * 200,))
isinstance(field, GeometryField)
has_partial_fit = hasattr(self, 'partial_fit_')
if not self.hyperparameter_length_scale.fixed: length_scale_gradient = \ dists * K / (self.length_scale ** 2 * base) length_scale_gradient = length_scale_gradient[:, :, np.newaxis]
if has_time_rule: win = 25 minp = 10
initial_forms = len(self.initial) if self.initial else 0
'ENABLE_OPENBADGES': False,
for chunk in iter(lambda: ifile.read(chunk_size), b''): hash_obj.update(chunk) return hash_obj.hexdigest()
if name in list_folders(location): return True else: return False
MANAGERS = ADMINS
vmconfig['changed']['add_{0}'.format(instance)].append(state_cfg)
batch0 = slice(0, chunk_size) scaler_batch = MaxAbsScaler().fit(X[batch0]) scaler_incr = MaxAbsScaler().partial_fit(X[batch0])
elif video_descriptor.html5_sources: video_url = video_descriptor.html5_sources[0] else: video_url = video_descriptor.source
from __future__ import absolute_import
def bad_then_good_password(index=[0]): index[0] += 1 if index[0] <= 2: return '1234567890' return 'password'
reduces_to_sql = True
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( patch, MagicMock, NO_MOCK, NO_MOCK_REASON )
repr(slo)
response = middleware.process_response(request, response) self.assertTrue( response.cookies[settings.SESSION_COOKIE_NAME]['secure'])
cohorts_status = {}
self.assertRaises(ValueError, Timestamp, min_ts_us - one_us)
default_tolerance = '0.001%'
self.assertIsNone(lyr.spatial_filter)
test1 = value 1
if not parent_location: return xblock
self.clear_child_cache()
np.subtract(S, Y[:, None], tmp) tmp[ind, I] = S[ind, I] - Y2
prunable = [] snapshots = {} for key in schedule.keys(): snapshots[key] = []
login = self.client.login(username='testclient', password='password') self.assertTrue(login, 'Could not log in')
CreditRequirementStatus.add_or_update_requirement_status( username, req_to_update, status=status, reason=reason )
zero_mean = rng.normal(size=shape) * self.sigma return zero_mean + v_mean
open_assessment = ItemFactory.create( parent_location=vertical.location, category="openassessment", display_name="untitled", ) draft_open_assessment = self.store.convert_to_draft( open_assessment.location, self.user.id )
compare_to = nodelist_true_output = self.nodelist_true.render(context)
try: return self._loaded_field_names_cache except AttributeError: collection = {} self.deferred_to_data(collection, self.get_loaded_field_names_cb) self._loaded_field_names_cache = collection return collection
y_true = (y_true == pos_label)
if 'repositories' not in excludes: repos = __salt__['pkg.list_repos']() if repos: data['repositories'] = repos
results[kind] = weakref.proxy(df.plot(kind=kind, **args))
import salt.config import salt.loader
daymonth_max = 28
if key == settings.SESSION_COOKIE_NAME: domain = microsite.get_value('SESSION_COOKIE_DOMAIN', domain)
break
mmd = min_dists.mean()
for sub_grid in self.param_grid: if not sub_grid: if ind == 0: return {} else: ind -= 1 continue
est = DummyRegressor(strategy="constant", constant=constants) est.fit(X_learn, y_learn) y_pred_learn = est.predict(X_learn) y_pred_test = est.predict(X_test)
for op in ['year', 'day', 'second', 'weekday']: self.assertRaises(TypeError, lambda x: getattr(self.dt_series, op))
obj = OrderedDict([ ('foo', 1), ('bar', 2), ('baz', {'qux': True}) ])
numer = _zero_out_fperr(numer) denom = _zero_out_fperr(denom)
"spec", "spec_helpers",
ts = datetime(starting.year, starting.month, starting.day - starting.weekday())
from __future__ import absolute_import
nnbrs = NearestNeighbors(algorithm='brute', metric='cosine').fit(X)
'datadog',
f.required = False
Plaything.objects.create(name="p1") self.assertQuerysetEqual( Plaything.objects.all(), ['<Plaything: p1>'] )
exc_info_on_loglevel=logging.DEBUG
class SplitDateTimeForm(Form): when = SplitDateTimeField(initial=datetime.datetime.now)
url(r'^list_financial_report_downloads$', 'instructor.views.api.list_financial_report_downloads', name="list_financial_report_downloads"),
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
from salt.runners.winrepo import ( genrepo as _genrepo, update_git_repos as _update_git_repos, PER_REMOTE_OVERRIDES ) from salt.ext import six try: import msgpack except ImportError:
value = cache.get('small_value') self.assertTrue(value is None or value == large_value)
self.assertEqual(request.GET.urlencode(), '') self.assertEqual(request.POST.urlencode(), '')
dummy1 = _("This is a translatable string.")
grandkids = [] for descendant in descendants: grandkids.extend(descendant.children)
import itertools ax = _check_plot_works(df.plot, yerr=itertools.repeat(0.1, len(df))) self._check_has_errorbars(ax, xerr=0, yerr=2)
mode = __salt__['config.manage_mode'](mode)
self.assertRaises( ValueError, lambda: DataFrame([pd.Categorical(list('abc')), pd.Categorical(list('abdefg'))]))
import salt.loader import salt.syspaths
cache_values = cache.get_many([ enrollment_cache_key, has_skipped_cache_key, verification_status_cache_key ])
assert is_flat_specs(data_specs)
with tm.assert_produces_warning(FutureWarning): result = df.drop_duplicates('AAA', take_last=True) expected = df.ix[[6, 7]] tm.assert_frame_equal(result, expected)
changes_dict = {'init': []} changes = changes_dict.get('init')
if not enabled(name): return False
from third_party_auth.tasks import SAML_XML_NS XMLDSIG_XML_NS = 'http://www.w3.org/2000/09/xmldsig#'
self.assertEqual(len(httpretty.httpretty.latest_requests), 3)
super(IndexSequenceSpace, self)._validate_impl(is_numeric, batch)
REQUIRE_DEBUG = False
FEATURES['ENABLE_TEAMS'] = True
example_messages = [str(i) for i in range(5)] set_cookie_data(cookie_storage, example_messages[:4] + [CookieStorage.not_finished]) set_session_data(session_storage, example_messages[4:])
with self.assertRaisesMessage(TypeError, "'Publication' instance expected, got <Article"): with transaction.atomic(): a6.publications.add(a5)
response = self.client.get(self.get_change_url()) self.assertEqual(response.status_code, 200)
app = cherrypy.tree.apps.get(app_path) if not app: raise AssertionError("No application mounted at '{0}'".format(app_path))
expected = df2.drop_duplicates(['AAA', 'B']) tm.assert_frame_equal(result, expected)
EmptyPromise( lambda: cohort_name == cohort_management_page.get_selected_cohort(), "Waiting for new cohort" ).fulfill() cohort_management_page.add_students_to_selected_cohort([student])
ptown = fromstr('POINT(992363.390841912 481455.395105533)', srid=2774)
params_wrong_type_amt = params.copy() params_wrong_type_amt['ccAuthReply_amount'] = 'ab' with self.assertRaises(CCProcessorDataException): payment_accepted(params_wrong_type_amt)
from __future__ import absolute_import
pythonpath = os.environ.get('PYTHONPATH', '') pythonpath = throot + ':' + pythonpath os.environ['PYTHONPATH'] = pythonpath
_win(kernel32.GetExitCodeProcess, wintypes.BOOL,
adjustable_paths = [ path for path in paths if matches_patterns(path, self._patterns.keys()) ]
series = self.frame.xs(self.frame.index[0])
if group is not None and not append: self._handle.remove_node(group, recursive=True) group = None
from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.ext.six import integer_types
def _accept(self, request): request.csrf_processing_done = True return None
with patch.object(mail.message.EmailMessage, 'send') as mock_send: mock_send.side_effect = Exception("Kaboom!") cart.purchase()
values = Series([u('a'), u('b'), NA, u('c'), NA, u('eeeeee')])
assert_almost_equal(metric(y1_sparse_indicator, y2_sparse_indicator), measure, err_msg="%s failed representation invariance " "between dense and sparse indicator " "formats." % name)
self._write(str(t))
self.update_masquerade(role='staff') self.verify_show_answer_present(True)
if not sparse.isspmatrix_lil(connectivity): if not sparse.isspmatrix(connectivity): connectivity = sparse.lil_matrix(connectivity) else: connectivity = connectivity.tolil()
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
X = random_state.randn(100, 2) assert_equal(trustworthiness(X, 5.0 + X / 10.0), 1.0)
aside1 = AsideFoo(scope_ids=ScopeIds('user', block_type1, def_id, usage_id), runtime=self.runtime) aside1.field11 = 'new_value11' aside1.field12 = 'new_value12'
import re self.assertTrue(re.search(r'^\d{2}:\d{2} \w{2}$', win_tm))
ccx = CcxFactory(course_id=self.course.id, coach=self.coach) ccx_locator = CCXLocator.from_course_locator(self.course.id, unicode(ccx.id))
return [ {k: kwargs[k]} for k in sorted(six.iterkeys(kwargs)) ]
data_specs[0].np_validate(data) assert not [contains_nan(X) for X in data] raise NotImplementedError()
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): result = ols(y=y, x=x, pool=False, **kwds)
long_name += '1' self.assertEqual(len(long_name), 49) self.assertFalse(linode._validate_name(long_name))
s = pd.Series([1, 2, 3]) w = s.where(s > 1, 'X')
vals = Book.objects.annotate(num_authors=Count('authors')).aggregate(Max('num_authors')) self.assertEqual( vals, {'num_authors__max': 3} )
clf = TreeClassifier(class_weight=1, random_state=0) assert_raises(ValueError, clf.fit, X, _y)
self.assertEqual(Tag.objects.filter(name__in=()).update(name="foo"), 0)
for obj in objs: name = str(obj.Name).replace(prefix, '', 1) ret[name] = str(obj.LogModuleId)
NPM_VENDOR_DIRECTORY = path("common/static/common/js/vendor")
if n_components < min(n_features, n_samples): self.noise_variance_ = explained_variance_[n_components:].mean() else: self.noise_variance_ = 0.
import json import logging
state = devices[str(dev_id)]['state']['on'] and Const.LAMP_OFF or Const.LAMP_ON
return num_saved, num_feat
has_skipped = cache_values.get(has_skipped_cache_key) if has_skipped is None: has_skipped = SkippedReverification.check_user_skipped_reverification_exists(user, course_key) cache.set(has_skipped_cache_key, has_skipped)
take_2d_axis1_%(name)s_%(dest)s_memview(values, indexer, out, fill_value=fill_value) return
if nd_state[2] == 'M8[us]': new_state = np.ndarray.__reduce__(data.astype('M8[ns]')) np.ndarray.__setstate__(data, new_state[2])
self.assertEqual(get_callable(empty_view), empty_view)
import salt.utils from salt import utils, exceptions
from pandas.indexes.api import * from pandas.indexes.multi import _sparsify
if node_string[-2:] == '\\n': node_string = node_string[:-2] if node_string[-5:] == '<br/>': node_string = node_string[:-5]
if sp.issparse(X) and X.getformat() not in ["csr", "csc"]: X = X.tocsr()
scheme = value.split('://')[0].lower() if scheme not in self.schemes: raise ValidationError(self.message, code=self.code)
if 'Ebs.VolumeType' not in ex_blockdevicemappings[dev_index]: type_key = '{0}BlockDeviceMapping.{1}.Ebs.VolumeType'.format(spot_prefix, dev_index) params[type_key] = rd_type
if openid_request.mode == 'checkid_immediate': return provider_respond(server, openid_request, openid_request.answer(False), {})
clf = GaussianNB()
result = s.iloc[18:30] expected = s.iloc[18:] assert_series_equal(result, expected)
result = self.df.loc[['c', 'a']] expected = self.df.iloc[[4, 0, 1, 5]] assert_frame_equal(result, expected, check_index_type=True)
return redirect(reverse('dashboard'))
certificates_display_behavior = TextField(null=True) certificates_show_before_end = BooleanField(default=False) cert_html_view_enabled = BooleanField(default=False) has_any_active_web_certificate = BooleanField(default=False) cert_name_short = TextField() cert_name_long = TextField()
#pylint: disable=E0602
next_page = False continue
if isinstance(ind, MultiIndex): continue
import logging
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import salt import salt.utils import salt.version import salt.loader import salt.ext.six as six from salt.utils.decorators import depends
class PennsylvaniaCity(City): county = models.CharField(max_length=30) founded = models.DateTimeField(null=True)
'SHOW_LANGUAGE_SELECTOR': False,
to_process_non_drafts = super(DraftModuleStore, self)._query_children_for_cache_children(course_key, items)
expected_y = y.mf_update( state_below = v.upward_state(v_state))
if not isinstance(new_c_data, list): log.error('ConCache Worker returned unusable result') del new_c_data continue
salt '*' vsphere.update_date_time my.esxi.host root bad-password
'AUTOPLAY_VIDEOS': False,
import salt.utils
from salt.states import zk_concurrency
return False
Category.objects.get(url='6th').delete() with self.assertRaises(ValidationError): f.clean([c6.id])
import salt.utils.openstack.swift as suos
msg = "0 sample(s) (shape=(0,)) while a minimum of 1 is required." assert_raise_message(ValueError, msg, check_array, [], ensure_2d=False)
self.assertFalse(form.is_valid())
records = [] lengths = []
with warnings.catch_warnings(record=True) as recorded_warnings:
course, course_data_path = self.import_courselike( runtime, courselike_key, dest_id, source_course, ) return source_course, course, course_data_path
if self.is_time_limited: view_html = self._time_limited_student_view(context)
clf = MultinomialNB().fit(X_train, y_train, sample_weight=sw_train) prob_pos_clf = clf.predict_proba(X_test)[:, 1]
from __future__ import absolute_import import inspect import logging import time from functools import wraps from collections import defaultdict
__virtualname__ = 'varnish'
clone_spec = vim.vm.CloneSpec( template=template, location=reloc_spec, config=config_spec )
return any(self._value_matches(target, test_val) for test_val in criteria['$in'])
inherited_metadata_filter_list = list(filtered_metadata.keys()) inherited_metadata_filter_list.extend(INHERITED_FILTER_LIST)
np.random.seed(0)
group.full_clean()
dive = Book.objects.using('other').get(title='Dive into Python') self.assertEqual(dive._state.db, 'other')
cache.clear() CertificateGenerationConfiguration.objects.create(enabled=True)
import salt.ext.six as six from Crypto.Cipher import PKCS1_OAEP
self.library = store.get_library(self.lib_key)
LINEAR_CHILDREN_MAP = [[1], [2], [3], []]
cat = pd.Categorical([1, 2, 3], ordered=True)
filter_rows_broadcastable = False filter_cols_broadcastable = False output_channels_broadcastable = hid_grads.type.broadcastable[0]
calendar0 = self.selenium.find_element_by_id('calendarin0') tds = calendar0.find_elements_by_tag_name('td')
self.assertFalse(runtime.user_is_beta_tester) self.assertEqual(runtime.days_early_for_beta, 5)
new_block = self.store.get_item(new_block.location)
connection_router = ConnectionRouter([TestRouter(), WriteRouter()]) self.assertListEqual([r.__class__.__name__ for r in connection_router.routers], ['TestRouter', 'WriteRouter'])
self.samples = np.sin(np.linspace(0, 1, 200)) self.actual_skew = -0.1875895205961754
if made_bigger: com._possibly_cast_item(result, args[0], likely_dtype)
raise NotImplementedError
if salt_params: for key, value in six.iteritems(params): params_from_salt[key] = value params_to_use = params_from_salt else: params_to_use = params
if not self.thread_context.handle: self.thread_context.handle = GEOSContextHandle() return self.cfunc(self.thread_context.handle.ptr, *args)
from salt.ext.six.moves.urllib.parse import urlencode as _urlencode
create_account(self.ALTERNATE_USERNAME, self.OLD_PASSWORD, self.NEW_EMAIL)
import salt.config opts = salt.config.client_config(c_path)
self.assertEqual( response.status_code, status_code, msg_prefix + "Response didn't redirect as expected: Response code was %d (expected %d)" % (response.status_code, status_code) )
self.problem = ItemFactory.create( category="problem", parent_location=self.library.location,
try: import salt.modules.shadow as shadow HAS_SHADOW = True except ImportError: HAS_SHADOW = False
if overwrite or not hasattr(cls, name): setattr(cls, name, f)
import salt.config import salt.netapi
raise GDALException('Invalid data source file "%s"' % ds_input)
latex_documents = [('index', 'user_guide.tex', u('scikit-learn user guide'), u('scikit-learn developers'), 'manual'), ]
continue
value.encode(charset)
return _AssertTemplateNotUsedContext(self, context_mgr_template)
zmq_version()
'STORE_BILLING_INFO': False,
from __future__ import absolute_import
self.add_dropdown_to_section(vertical_1.location, 'H2P1_GROUP1', 1).location.html_id()
self.assertFalse(views.is_course_passed(self.course, None, self.student, self.request))
self.assertNotIn(self.module_key, self.loader)
self.t_ = None
args = vars(ArgParser().parse_args())
f, ax = plt.subplots() ax.plot(x, y) ax.set_title('Simple plot')
grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)
for line in output.splitlines(): job_tag = ''
import salt.ext.six as six try: import salt.utils.psutil_compat as psutil
list_ = salt.utils.alias_function(list_running, 'list_')
estimator_weight = self.learning_rate * ( np.log((1. - estimator_error) / estimator_error) + np.log(n_classes - 1.))
self.certificates_section.fill_certificate_invalidation_user_name_field("") self.certificates_section.click_invalidate_certificate_button() self.certificates_section.wait_for_ajax()
is_dynamic = False
import logging
Created Certificate for "DBReplica_No.1": "/etc/pki/my_little/certs/DBReplica_No.1.crt"
import nose raise nose.SkipTest("skipping sparse binary operators test")
try: import msgpack except ImportError: import msgpack_pure as msgpack
assert_panel_equal(p.ix[items, :, :], p.reindex(items=items))
def __unicode__(self): return u'SystemUser'
model_exists_response = __salt__['boto_apigateway.api_model_exists'](restApiId=self.restApiId, modelName=model, **self._common_aws_args)
world.css_click('.mce-primary')
@ignore_warnings(category=DeprecationWarning) def test_verbose_second_level(): X = rng.randn(30, 5) X[:10] += 2 g = mixture.GMM(n_components=2, n_init=2, verbose=2)
S = -euclidean_distances(X, squared=True) preference = np.median(S) * 10 cluster_centers_indices, labels = affinity_propagation( S, preference=preference)
if source_item.has_children and not children_handled: dest_module.children = dest_module.children or [] for child in source_item.children: dupe = _duplicate_item(dest_module.location, child, user=user)
result = f.clean('1:30:05 PM') self.assertEqual(result, time(13, 30, 5))
_maybe_remove(store, 'wp') store.put('wp', wp, format='table') date = wp.major_axis[len(wp.major_axis) // 2]
MultiPartParser({ 'CONTENT_TYPE': 'multipart/form-data; boundary=_foo', 'CONTENT_LENGTH': '1' }, StringIO('x'), [], 'utf-8')
resp = self.create_xblock(category='static_tab', parent_usage_key=course.location) usage_key = self.response_usage_key(resp)
nodes = query('get', 'nodes')
if salt.utils.test_mode(test=test, **kwargs): opts['test'] = True else: opts['test'] = __opts__.get('test', None)
startdate = Series(date_range('2013-01-01', '2013-01-03')) enddate = Series(date_range('2013-03-01', '2013-03-03'))
mock_results = MagicMock(return_value=[result_factory(n) for n in range(5)]) with patch.object(StudentModule, 'objects') as patched_manager: patched_manager.filter.return_value = mock_results
casted = pd.Series(other, index=self.columns)
knn.fit(X, y_str) y_pred = knn.predict(X[:n_test_pts] + epsilon) assert_array_equal(y_pred, y_str[:n_test_pts])
pass
self.assertIs( descriptor._field_data._authored_data._source.fallback, descriptor._unwrapped_field_data )
self.dismiss_ui_and_verify(rerun)
for asset in assets: self.assertEquals(asset['displayname'], expected_displayname)
from django.core.urlresolvers import reverse from django.test import TestCase import mock from edx_oauth2_provider.tests.factories import AccessTokenFactory, ClientFactory
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
return course.display_name_with_default.replace('<', '&lt;').replace('>', '&gt;')
if db != 'read_replica': DATABASES[db].update(get_db_overrides(db))
with patch('capa.capa_problem.LoncapaProblem.grade_answers') as mock_grade: mock_grade.side_effect = exception_class('test error')
if settings.FEATURES.get('EMBARGO'): urlpatterns += ( url(r'^embargo/', include('embargo.urls')), )
from __future__ import unicode_literals
assert len(key) <= 250 self.cache[key] = value
import salt.ext.six as six
cm = metrics.confusion_matrix(y_test, y_predicted) print(cm)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self.assertEqual(response.status_code, 400)
with make_image_file() as image_file: response = self.client.post(self.url, {'file': image_file}, format='multipart') self.check_response(response, 204)
if hasattr(new_context, '_processors_index'): del new_context._processors_index return new_context
another = models.IntegerField(primary_key=True)
xblock_info = self._get_xblock_info(chapter.location) self._verify_visibility_state(xblock_info, VisibilityState.live)
compare_to = [var.resolve(context, True) for var in self._varlist]
rnd = np.random.RandomState(0) X = rnd.normal(size=(3, 1)) mcd = MinCovDet() mcd.fit(X)
self.navigate_to_video()
pass
exhaust(stream)
test_course = self.store.create_course('testx', 'GreekHero', 'test_run', self.user_id) self.assertTrue(self.store.has_published_version(test_course))
#add_module_names = True
input_dict = {'1_2_1': '0', '1_2_2': '42'} correct_map = problem.grade_answers(input_dict)
port_speed = config.get_cloud_config_value( 'port_speed', vm_, __opts__, default=273 ) kwargs['prices'].append({'id': port_speed})
if isnull(arr).any() or not np.allclose(arr, trans(arr).astype(dtype)): return result
from __future__ import absolute_import
with course_run_policy_dir.open('grading_policy.json', 'w') as grading_policy: grading_policy.write(dumps(courselike.grading_policy, cls=EdxJSONEncoder, sort_keys=True, indent=4))
result = sparse[orig % 2 == 1] exp = orig[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
value = rs[2] + np.timedelta64(timedelta(minutes=5, seconds=1)) rs[2] += np.timedelta64(timedelta(minutes=5, seconds=1)) self.assertEqual(rs[2], value)
ind2 = self.index.set_levels(new_levels) assert_matching(ind2.levels, new_levels) assert_matching(self.index.levels, levels)
self._col_indices = None self.columns, self.num_original_columns = self._infer_columns()
log.error("Unable to add Credit requirement status for user with id %d", attempt.user.id)
member.name = member.name.replace('{0}/'.format(package), '')
n_samples = X.shape[0]
if isinstance(slicer, tuple) and len(slicer) == 2: if not is_null_slice(slicer[0]): raise AssertionError("invalid slicing for a 1-ndim " "categorical") slicer = slicer[1]
au_rule.delete() self._assert_history([])
res_df = df.iloc[2:4, :] tm.assert_frame_equal(res_df, exp_df) self.assertTrue(com.is_categorical_dtype(res_df["cats"]))
if 'tag' in _options: syslog.openlog(ident=_options['tag'], logoption=logoption) else: syslog.openlog(logoption=logoption)
if any(relative_path.lower().endswith(excluded_ext.lower()) for excluded_ext in excluded_exts): serve_from_cdn = False
self.course_nav.go_to_vertical('Test Vertical-0')
Options.FORWARD_PROPERTIES = {'fields', 'many_to_many', 'concrete_fields', 'local_concrete_fields', '_forward_fields_map'}
for attr in REQUISITES: if attr in kwargs: try: iter(kwargs[attr]) except TypeError: kwargs[attr] = [kwargs[attr]] self.kwargs = kwargs
if rest.endswith('?raw'): return original
from __future__ import absolute_import
import integration import salt.utils
ordered_key_fields = ['category', 'name', 'course', 'tag', 'org', 'revision']
course_key = CourseKey.from_string(course_id) course = modulestore().get_course(course_key)
try: model.add_polyak_channels(self._worker.param_to_mean, algorithm.monitoring_dataset) except AttributeError: pass
return the_path
expected = pd.Series(['a'], index=['A']) result = expected.iloc[[-1]] assert_series_equal(result, expected)
child._field_data.set(child, 'due', child_due) compute_inherited_metadata(descriptor) self.override_metadata_check(descriptor, child, course_due, child_due)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
dest = self._extrn_path(url, saltenv, cachedir=cachedir) makedirs = True
AutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=True).visit()
dirname, filename = os.path.split(filename) return os.path.normpath(os.path.join(dirname, self.get_valid_name(filename)))
pass
response = self.client.get('/reset/zzzzzzzzzzzzz/1-1/') self.assertContains(response, "The password reset link was invalid")
p = OGRGeometry(OGRGeomType('Point')) capi.get_centroid(self.ptr, p.ptr) return p
params = [(param, request.GET[param]) for param in POST_AUTH_PARAMS if param in request.GET]
wp = Panel(vals) self.assertIs(wp.values, vals)
import datetime start = datetime.datetime.now() idx = DatetimeIndex(start=start, freq="1d", periods=10) df = DataFrame(lrange(10), index=idx)
if child.location in prob_grade_distrib:
for k, v in six.iteritems(self.loader._dict): self.assertTrue(k.startswith(self.module_name))
import salt.utils.cloud as suc
else: ret = _load_result(existing, ret)
__salt__['dockerng.start']( name, )
X, y = datasets.make_classification(n_samples=2000, n_features=10, n_informative=3, n_redundant=0, n_repeated=0, shuffle=False, random_state=1)
self.user = User.objects.create_user(self.uname, self.email, self.password)
return u"{} : {}".format(self.course_id.to_deprecated_string(), self.annotation)
if pkg: pkg = _cmd_quote(pkg)
for i, item in enumerate(block_items):
self.grid_scores_ = scores[::-1] / cv.get_n_splits(X, y) return self
course_query = self._course_key_to_son(course_key) self.collection.remove(course_query, multi=True) self.delete_all_asset_metadata(course_key, user_id)
self.assertDeserializeEqual(-2.78, '-2.78')
for op in ['__eq__', '__le__', '__ge__']:
p_shared = sharedX(zv[:, 0:rows:pool_rows, 0:cols:pool_cols, :]) h_shared = sharedX(zv) z_shared = sharedX(zv)
uid = force_text(urlsafe_base64_decode(uidb64)) user = UserModel._default_manager.get(pk=uid)
s3.query( key=creds.key, keyid=creds.keyid, kms_keyid=creds.kms_keyid, bucket=bucket, service_url=creds.service_url, path=_quote(path), local_file=cached_file_path, verify_ssl=creds.verify_ssl, location=creds.location )
y = np.mod(np.arange(len(y)), 3)
axes = [slice(None)] * obj.ndim axes[axis] = key return tuple(axes)
response = self._generate(course_key=self.EXISTED_COURSE_KEY_2) self.assertEqual(response.status_code, 400)
CATEGORY = "vertical" DATA = '' METADATA = {} MODEL_DATA = {'data': '<some_module></some_module>'}
_("This is the wiki for **{organization}**'s _{course_name}_.").format( organization=course.display_org_with_default, course_name=course.display_name_with_default_escaped, )
dm = DataFrame(index=lrange(3), columns=lrange(3))
return tuple(tuple(ot) for ot in option_together)
with tm.assertRaises(ValueError): DataFrame({'a': 0.7})
STATIC_URL = STATIC_URL_BASE.encode('ascii') if not STATIC_URL.endswith("/"): STATIC_URL += "/" STATIC_URL += EDX_PLATFORM_REVISION + "/"
source = String( help=_("The external URL to download the video."), display_name=_("Download Video"), scope=Scope.settings, default="" ) download_video = Boolean(
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21 13:30:00")
data_csv = pd.read_csv(self.file01.replace(".xpt", ".csv")) data_csv = data_csv.set_index("SEQN") numeric_as_float(data_csv)
self.assertRaises(Exception, _check, self.zframe) self.assertRaises(Exception, _check, self.fill_frame)
grid = GridSearchCV(clf, refit=False, param_grid=param_grid, cv=ShuffleSplit(train_size=train_size, n_iter=250, random_state=1)) grid.fit(X, y) scores = [x[1] for x in grid.grid_scores_]
return student.views.index(request)
import msgpack if msgpack.loads(msgpack.dumps([1, 2, 3]), use_list=True) is None: raise ImportError HAS_MSGPACK = True
__virtualname__ = 'debconf'
FIELD_OVERRIDE_PROVIDERS = ()
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if isinstance(content, EmailMessage): content = content.message() elif not isinstance(content, Message): content = message_from_string(content)
offset1 = BDay() offset2 = BDay() self.assertFalse(offset1 != offset2)
msg = "Could not decode base64 data: %r" % e six.reraise(MultiPartParserError, MultiPartParserError(msg), sys.exc_info()[2])
if level is None and (self_is_mi or other_is_mi):
gp.fit(X, y)
sparse_classifier = IsolationForest( n_estimators=10, random_state=1, **params).fit(X_train_sparse) sparse_results = sparse_classifier.predict(X_test_sparse)
_check_align(self.ts[:0], self.ts[:-5], how=kind, method=meth) _check_align(self.ts[:0], self.ts[:-5], how=kind, method=meth, limit=1)
df.unstack(['b', 'c'])
from django.db.backends.oracle.base import Database
X, y = make_circles(n_samples=400, factor=.3, noise=.05, random_state=0)
stdout = sys.stdout sys.stdout = StringIO()
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
for err in self.geometries.errors: with self.assertRaises((GEOSException, ValueError)): fromstr(err.wkt)
regression = IsotonicRegression() n_samples = 50 x = np.linspace(-3, 3, n_samples) y = x + rng.uniform(size=n_samples)
scenarios = { "2_choices_correct": ("checkbox_two_choices", "correct"), "2_choices_incorrect": ("checkbox_two_choices", "incorrect"),
if getattr(settings, "THEME_NAME", "") == "": settings.THEME_NAME = None return
result = f.clean('1:30:05 PM') self.assertEqual(result, time(13, 30, 5))
clf = ForestClassifier(random_state=0).fit(X, y)
return not ( (converter(opts.db_table) in tables) or (opts.auto_created and converter(opts.auto_created._meta.db_table) in tables) )
from salt.modules import genesis
rng = np.random.RandomState(random_state)
assert_raises(TypeError, csc_median_axis_0, sp.csr_matrix(X))
import salt.utils
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandExecutionError
def test_user_role(): return 'staff'
self.assertTrue(self.video.downloaded_transcript_contains_text('txt', 'Welcome to edX.'))
varname = ur"{a}_{{{b}}}".format( a=enrich_varname(first), b=enrich_varname(second) )
exc_info_on_loglevel=logging.DEBUG
assert_equal(X_r2inv.getnnz(), X_r.getnnz())
if user is not None and user.is_active: if 'openid_error' in request.session: del request.session['openid_error']
import salt.utils.decorators
db_config = { 'host': MONGO_HOST, 'port': MONGO_PORT_NUM, 'db': 'test_xmodule', }
self.assertChildNodeContent(chan, { 'title': 'My blog', 'link': 'http://example.com/blog/', })
required_boto3_version = '1.2.1'
wkb_w.byteorder = 0 self.assertEqual(hex2, wkb_w.write_hex(g)) self.assertEqual(wkb2, wkb_w.write(g))
rval = X.copy()
roc_auc_scorer = make_scorer(roc_auc_score, greater_is_better=True, needs_threshold=True) average_precision_scorer = make_scorer(average_precision_score, needs_threshold=True) precision_scorer = make_scorer(precision_score) recall_scorer = make_scorer(recall_score)
self.xml.set('cfn', 'symmath_check')
existing_program_ids = get_awarded_certificate_programs(student)
r1sq = rnorm**2 - dampsq * xxnorm r1norm = sqrt(abs(r1sq)) if r1sq < 0: r1norm = -r1norm r2norm = rnorm
self.assertFalse(linode._validate_name('fooàààààbar'))
deadline_is_explicit = models.BooleanField(default=False)
cmd = '{0} | ConvertTo-Json -Depth 32'.format(cmd)
import salt.utils import salt.utils.cloud import salt.config as config from salt.exceptions import SaltCloudNotFound, SaltCloudSystemExit
if (data_columns and len(b_items) == 1 and b_items[0] in data_columns): klass = DataIndexableCol name = b_items[0] self.data_columns.append(name)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.client.login(username=self.white_label_course_instructor.username, password='test')
def __init__(self, array): self.array = array self.shape = array.shape self.ndim = array.ndim self.iloc = ArraySlicingWrapper(array)
m = re.search(br'<a href="([^"]*)"[^>]* id="lookup_id_defendant1"', response.content)
def get_result(other):
debconfmod.__grains__ = {} debconfmod.__salt__ = {} debconfmod.__context__ = {} debconfmod.__opts__ = {}
salt.log.setup.setup_multiprocessing_logging()
raise TerminalException('Password authentication failed')
self.make_course(textbooks=[IMAGE_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('book', book_index='fooey')
Xt = np.array(X).T
import salt.ext.six as six import salt.utils import salt.client from salt.utils.openstack import nova try: import novaclient.exceptions except ImportError as exc: pass
if func_supports_parameter(self.get_template_sources, 'template_dirs'): args.append(template_dirs)
Xnan = np.array(X, dtype=np.float64) Xnan[0, 1] = np.nan LogisticRegression(random_state=0).fit(Xnan, Y1)
assert_warns(UserWarning, f) failed = True
raise _NotFittedError(msg % {'name': type(estimator).__name__})
if prop != 'freq': compare(s, prop)
true_path = os.path.realpath(file_path) if not os.path.exists(true_path): continue
offsets = [pd.offsets.Hour(2), timedelta(hours=2), np.timedelta64(2, 'h'), Timedelta(hours=2)]
self.assertTrue(video_xblocks == 2)
from salt.netapi.rest_tornado import saltnado from unit.netapi.rest_tornado.test_handlers import SaltnadoTestCase
verifications = SoftwareSecurePhotoVerification.objects.filter(user=user)
membership = CohortMembership.objects.create( user=user, course_user_group=get_random_cohort(course_key) ) return request_cache.data.setdefault(cache_key, membership.course_user_group)
predictions = cross_val_predict(clf, X_sparse, multioutput_y) assert_equal(predictions.shape, (150, 2))
X_sliced = X_sparse[np.arange(X_sparse.shape[0])] y_sliced = y_sparse[np.arange(y_sparse.shape[0])]
truncated = ts.truncate() assert_series_equal(truncated, ts)
exclude_trees = ['_build', 'templates', 'includes']
import integration from salt.exceptions import CommandExecutionError
photo_id_image = ( decode_image_data(photo_id_data) if photo_id_data is not None else None )
args.append(arg)
self.sender_receivers_cache[sender] = receivers
cost = SumOfCosts([SumOfOneHalfParamsSquared(), (0., DummyCost())])
rs = ser.replace({np.nan: -1, 'foo': -2, 'bar': -3})
self._assert_course_verification_status(VERIFY_STATUS_NEED_TO_REVERIFY)
p.undergroundbar = b
points = ax.get_position().get_points() x_set.add(points[0][0]) y_set.add(points[0][1])
action_name = ugettext_noop('generated') task_fn = partial(upload_course_survey_report, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
if not show_explanation or not self.done: continue
addr = 'viewx3dtextx26qx3d@yahoo.comx26latlngx3d15854521645943074058' self.assertEqual(addr, f.clean(addr))
if i == 0: layer_below = self.dbm.visible_layer else: layer_below = self.dbm.hidden_layers[i-1] state_below = layer_to_state[layer_below] state_below = layer_below.upward_state(state_below)
hex = '0101000020E610000000000000000014400000000000003740' p1 = fromstr(hex) self.assertEqual(4326, p1.srid)
installed_date=installed_packages_list[this_package].timestamp
with ignore_warnings(): yield check_transformer_n_iter, name, estimator
from __future__ import absolute_import
denise = User.objects.db_manager('other').create_user('denise', 'denise@example.com') denise_profile = UserProfile(flavor="tofu", user=denise)
self.loader = LazyLoader([self.module_dir], self.opts, tag='module')
return y
bad_id = SlashSeparatedCourseKey(u'Broken{}'.format(self.course.id.org), 'hello', self.course.id.run + '_typo')
_WINDOW_TYPES.update((v, v) for k, v in list(_WINDOW_TYPES.items())) _ADDITIONAL_CLUSTER_TYPES = set(("entity", "time"))
self.verify_expected_team_id(team, 'fully-specified-team') del team['id']
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.' NUMBER_GROUPING = 3
data_home = get_data_home(data_home=DATA_HOME) assert_true(os.path.exists(data_home))
PIPELINE_ENABLED = False STATICFILES_STORAGE = 'openedx.core.storage.DevelopmentStorage'
#
micro_measure = metric(y_true, y_pred, average="micro") assert_almost_equal(micro_measure, metric(y_true_binarize.ravel(), y_pred_binarize.ravel()))
n.collect(objs)
staff = UserFactory() allow_access(self.course, staff, 'staff') self.assertTrue(CourseStaffRole(self.course.id).has_user(staff))
def __hash__(self): return (hash(self.srcport) ^ hash(self.destport) ^ hash(self.protocol) ^ hash(self.destaddr))
self.assertRaises(ValueError, f, axis=2)
self._set_opt_in_pref(self.user, "MyOrg", True) self._set_opt_in_pref(self.user, "myorg", False)
drbd.__grains__ = {} drbd.__salt__ = {} drbd.__context__ = {}
config.toggle() self.assertFalse(config.details_warning_icon_is_present) self.assertFalse(config.details_message_is_present)
if existing['code'] == 200:
'id': str,
self.cout.set_encodings(self.output_encoding)
self.assertEqual(self.cmap.get_overall_message(), "")
return self
from salt.modules import ddns
preprocessor = CentralWindow(self._window_shape) for data in self._center: preprocessor.apply(data)
try: self.clean() except ValidationError as e: errors = e.update_error_dict(errors)
with self.store.branch_setting(ModuleStoreEnum.Branch.published_only, course_key): self.assertTrue(self.store.has_item(problem_location)) assertProblemNameEquals(problem_original_name)
getx = pnt_func(lgdal.OGR_G_GetX) gety = pnt_func(lgdal.OGR_G_GetY) getz = pnt_func(lgdal.OGR_G_GetZ)
return {}
world.wait_for_ajax_complete()
if not len(data): return data, False
if N.size(imgshp)==2: imgshp = (1,)+imgshp
if answer_script: answer_element = etree.SubElement(response_element, "answer") answer_element.set("type", "loncapa/python") answer_element.text = str(answer_script)
import salt.pillar import salt.utils from salt.defaults import DEFAULT_TARGET_DELIM from salt.exceptions import CommandExecutionError
if keys is None: keys = store.keys() self.assertEqual(set(keys), set(tstore.keys()))
reraise_as(IOError("Cannot open " + path + " but can open " + parent + "."))
params = dict(params.items())
import pprint import logging
elif self.is_datetime_lhs and self.is_datetime_rhs:
return no_edit_link
self.Ut = numpy.zeros([self.n_eigen, self.n_dim])
continue
permutation = random_state.permutation(dim) aux = aux[permutation].T[permutation] chol += aux prec = np.dot(chol.T, chol)
for layer in ds: for feat in layer: self.assertEqual(source.nfld, len(list(feat))) self.assertEqual(source.gtype, feat.geom_type)
if draft_only: revision = MongoRevisionKey.draft else: revision = ModuleStoreEnum.RevisionOption.all
ret['comment'] = 'Event module not available. Schedule enable job failed.'
paver.easy.sh("exit 1")
self.video.speed = '1.0'
break
tsne = TSNE(n_iter=199) assert_raises_regexp(ValueError, "n_iter .*", tsne.fit_transform, np.array([[0.0]]))
pids = {} procfs = os.listdir('/proc/') for pfile in procfs: try: pids[int(pfile)] = [] except ValueError: pass
win_firewall.__salt__ = {}
self.assertIn(self.provider.name, response.content)
if not constant_time_compare(self._make_token_with_timestamp(user, ts), token): return False
create_collection_index(self.collection, '_id.category', background=True)
import yaml import salt.ext.six as six
n_samples = 100 n_features = 300
self.assertIsNone(dti2.freq)
self._login_as_non_staff_user() self.assertFalse(self._can_access_library(self.library))
options = _get_options(ret=None)
course_wide_entries = discussion_category_map.pop('entries')
X1, y1 = load_svmlight_file(datafile)
self.assertRaises(TypeError, store.select, 'df1', ( 'columns=A', Term('index>df.index[4]')))
import os import logging
'openedx.core.djangoapps.credit',
is_author_mode = True
from __future__ import absolute_import import logging
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
request = self.request_factory.get('/', {'publication-decade': 'the 80s'}) changelist = self.get_changelist(request, Book, modeladmin)
try: from salt.netapi.rest_tornado import saltnado from salt.netapi.rest_tornado import saltnado_websockets HAS_TORNADO = True except ImportError: HAS_TORNADO = False import salt.auth
idx1 = pd.timedelta_range('1 day', '31 day', freq='D', name='idx')
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
course_overviews = course_overviews.filter(org__iexact=org)
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
import salt.utils from salt._compat import subprocess
redirect_url = answers['_redirect_url'] if '_redirect_url' in answers else reverse('dashboard')
if dtype == _NS_DTYPE or dtype == _TD_DTYPE: new_values = np.vstack([x.view('i8') for x in to_stack]) return new_values.view(dtype)
version_num = kwargs['version']
self.meta = 'category' self.set_metadata(block.values.categories)
grains['osrelease'] = grains['kernelrelease'].split('-')[0]
XML_IMPORT_ARGS = inspect.getargspec(XmlImportData.__init__).args
pass
del self.bias_from_marginals
unenroll_email( course_id=ccx_key, student_email=instructor.email, email_students=send_email, email_params=email_params, )
si = _get_si()
import integration
assert hasattr(self, 'shape')
if expectedrows is None: expectedrows = max(self.nrows_expected, 10000)
self.freq = Period._maybe_convert_freq(own_state[1])
self.assertTrue(form.is_valid()) self.assertEqual(form.cleaned_data['dt'], datetime.datetime(2011, 10, 30, 2, 30, 0))
app.add_domain(NumpyPythonDomain) app.add_domain(NumpyCDomain)
return users
indptr_3 = X_sparse_unpruned.indptr[3] indptr_4 = X_sparse_unpruned.indptr[4] X_sparse_unpruned.data[indptr_3:indptr_4] = 0.0
mock_call = mock_track_function.mock_calls[-1] event = mock_call[1][2]
clf = svm.LinearSVC(random_state=0).fit(X, Y) sp_clf = svm.LinearSVC(random_state=0).fit(X_sp, Y)
if not found_domain: new_contents.insert(0, 'domain {0}\n' . format(domainname))
resp = self.create_xblock(parent_usage_key=self.chapter_usage_key, category='sequential') self.seq_usage_key = self.response_usage_key(resp)
row = df.ix[4] row.name = 5 result = df.append(row) expected = df.append(df[-1:], ignore_index=True) assert_frame_equal(result, expected)
from salt.exceptions import CommandExecutionError, SaltInvocationError
regex = r'^\d+'
import salt.modules.rvm as rvm
return _("{currency_symbol}{price}").format(currency_symbol=currency_symbol, price=price)
self.verify_tag(custom.assignment_no_params, 'assignment_no_params')
class PreparedPredicate(GEOSFuncFactory): argtypes = [PREPGEOM_PTR, GEOM_PTR] restype = c_char errcheck = staticmethod(check_predicate)
class MockModelAdmin(object): def my_property(self): return "this if from property" my_property.short_description = 'property short description' test_from_property = property(my_property)
if d_yard in self.lane_stack.value.nameRemotes: self.lane_stack.value.transmit(msg, self.lane_stack.value.nameRemotes[d_yard].uid) return
pass
if not self._state.adding and self.pk is not None: qs = qs.exclude(pk=self.pk)
if not show_disabled and not schedule[job]['enabled']: del schedule[job] continue
return filename
CourseUserGroup.objects.create( name="TestOtherGroupType", course_id=self.course_key, group_type="dummy" ) self.assertFalse(mock_tracker.called)
if relevant_verification is not None and relevant_verification.status == "approved": recent_verification_datetime = max( recent_verification_datetime if recent_verification_datetime is not None else relevant_verification.expiration_datetime, relevant_verification.expiration_datetime )
original = Event.DoesNotExist("Doesn't exist") unpickled = pickle.loads(pickle.dumps(original))
dir_mode = __salt__['config.manage_mode'](dir_mode) file_mode = __salt__['config.manage_mode'](file_mode)
LOGGING_LOGGER_CLASS = logging.getLoggerClass()
with self.settings(TIME_ZONE=new_tz): new_connection.set_autocommit(False) cursor = new_connection.cursor() new_connection.rollback()
mock_threads.return_value = [], 1, 1
if not kwargs: cmd += ' '
qs = RasterModel.objects.filter(rast__dwithin=(rast, 40)) self.assertEqual(qs.count(), 1)
call_task('pavelib.assets.watch_assets', options={'background': True})
from salt.states import win_update
monitoring_train = DenseDesignMatrix(X=X) monitoring_test = DenseDesignMatrix(X=Y)
try: data = pandas.read_pickle(vf) except (ValueError) as e: if 'unsupported pickle protocol:' in str(e): return else: raise
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, self.course.id): self.store.delete_item(self.subsection.location, ModuleStoreEnum.UserID.test)
class Third(models.Model): name = models.CharField(max_length=20) third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')
from .aws import * import os from django.core.exceptions import ImproperlyConfigured
geom_ptr = capi.get_feat_geom_ref(self.ptr) return OGRGeometry(geom_api.clone_geom(geom_ptr))
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] y_state = layer_to_state[y]
TEST_NON_SERIALIZED_APPS = []
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
sys.excepthook = __global_logging_exception_handler
NumpyDocString.__init__(self, docstring, config=config)
os.remove(filename)
dir_mode = __salt__['config.manage_mode'](dir_mode) file_mode = __salt__['config.manage_mode'](file_mode)
TASK_LOGON_NONE = 0 TASK_LOGON_PASSWORD = 1 TASK_LOGON_S4U = 2 TASK_LOGON_INTERACTIVE_TOKEN = 3 TASK_LOGON_GROUP = 4 TASK_LOGON_SERVICE_ACCOUNT = 5 TASK_LOGON_INTERACTIVE_TOKEN_OR_PASSWORD = 6
__type__ = None __format__ = None _attributes = None __flatten__ = False
PASSWORD_HASHERS = ( 'django.contrib.auth.hashers.SHA1PasswordHasher', 'django.contrib.auth.hashers.MD5PasswordHasher', )
if grad.shape[0] > n_features: grad[-1] = z0.sum() return out, grad
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
child.relabel_aliases(change_map)
def __getstate__(self): srs = self.srs if srs: srs = srs.wkt else: srs = None return bytes(self.wkb), srs
grains = {} pillars = {}
all_links = self.q(css='a.enter-course').map(lambda el: el.get_attribute('href')).results
from __future__ import absolute_import
df['C'] = idx assert_series_equal(df['C'], Series(idx, name='C'))
from commerce import signals
ival_W = Period(freq='W', year=2007, month=1, day=1)
projected_2 = rp.transform(data) assert_array_equal(projected_1, projected_2)
import logging
if exc.errno != errno.EEXIST: raise
return type(form)(class_name, (form,), form_class_attrs)
continue
set_crontab(
from salt.states import boto_sqs
def __enter__(self): return self
field_type, geo_params = connection.introspection.get_geometry_type(table_name, geo_col) field_params.update(geo_params)
response = self._get_page(payment_flow, course.id) self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS, PayAndVerifyView.MAKE_PAYMENT_STEP ) self._assert_requirements_displayed(response, [])
yield { "text": text, "class_attrib": format_html(' class="column-{}"', field_name), "sortable": False, } continue
atexit.register(self.cleanup)
return ln
CustomizableView.as_view(parameter="value") with self.assertRaises(TypeError): CustomizableView.as_view(foobar="value")
pipeline.items.append(preprocessing.ZCA())
num_braces = 0
ptr = result if not ptr: s = None else: s = string_at(result)
class AbstractBase3(models.Model): comment = models.CharField(max_length=50)
self.user.is_active = user_is_active
ret = self.shell.exec_cmd('/bin/sh \'$HOME/{0}\''.format(target_shim_file))
result = concat([df, df2, df3], axis=1, copy=True) for b in result._data.blocks: self.assertIsNone(b.values.base)
if '_dtype' not in state_dict: self._dtype = theano.config.floatX
problem = new_loncapa_problem(xml_str)
self.client.force_login(self.u1, backend='test_client.auth_backends.TestClientBackend')
X_scaled_back = scaler.inverse_transform(X_scaled) assert_array_almost_equal(X_scaled_back, X)
'tcp_keepalive_cnt': float,
MOBILE_STORE_URLS = { 'apple': '#', 'google': '#' }
wrappers=wrappers, wrappers_asides=wrappers_asides, error_descriptor_class=ErrorDescriptor, get_user_role=lambda: get_user_role(request.user, course_id),
from __future__ import absolute_import
if self._wrapped is empty: return '<LazySettings [Unevaluated]>' return '<LazySettings "%(settings_module)s">' % { 'settings_module': self._wrapped.SETTINGS_MODULE, }
__remove_temp_logging_handler()
with tm.assert_produces_warning(None):
AUTH_ENTRY_LOGIN_API = 'login_api' AUTH_ENTRY_REGISTER_API = 'register_api'
list_check = lambda x: isinstance(x, list) clf = CheckingClassifier(check_X=list_check) predictions = cval.cross_val_predict(clf, X.tolist(), y.tolist())
CourseEnrollmentFactory(user=self.student, course_id=self.course_id)
index_col, expected = False, DataFrame([], columns=list('xyz')), tm.assert_frame_equal(self.read_csv( StringIO(data), index_col=index_col), expected)
update_linode(node_id, update_args={'Label': name}) log.debug('Set name for {0} - was linode{1}.'.format(name, node_id))
cursor.execute(query, [module_id.to_deprecated_string()])
import salt.ext.six as six
ir = IsotonicRegression(increasing='auto', out_of_bounds="raise") ir.fit(x, y)
KEY_EXPIRATION_IN_SECONDS = 86400
try: dive.editor = marty except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
cv = check_cv(self.cv)
uncommented_start_index = self._uncommented_start_index(mako_template, start_index) if uncommented_start_index != start_index: start_index = uncommented_start_index continue
self.send_response(200) self.send_header('Content-type', 'application/json') self.end_headers() self.wfile.write(response)
response = self.client.post(self.send_mail_url, test_email) self.assertEquals(json.loads(response.content), self.success_content)
indices = indices[::-1] maybe_slice = lib.maybe_indices_to_slice(indices, len(target)) self.assertTrue(isinstance(maybe_slice, slice)) self.assert_numpy_array_equal(target[indices], target[maybe_slice])
(index_name, columns_, self.index_col) = _clean_index_names(columns, self.index_col)
return get_default_time_display(xblock.start) if xblock.start != DEFAULT_START_DATE else None
pred = np.array([l.argmax() for l in Y_proba]) assert_false((pred - Y_pred).any())
return ACCESS_GRANTED
return True
return assert_numpy_array_equal(seq, np.sort(np.array(seq)))
from __future__ import absolute_import try: import pwd HAS_PWD = True except ImportError: HAS_PWD = False import copy import logging
if result.ndim > 1: result = result.reshape(len(result)) result = self._holder(result).tz_localize(self.values.tz)
if mismatch: return False
version = float('.'.join(numpy.version.version.split('.')[:2]))
ret['comment'] = ('User {0} is not present, so it cannot be removed' ).format(name) return ret
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21 13:30:05")
html, __ = self._get_container_preview(root_usage_key)
unstacked = self.ymd.unstack(1).unstack(1)
data = [[['foo', 'bar', 'baz']]] self.assertRaises(ValueError, Panel, data, dtype=float)
for entry in entries: self.assertChildNodes(entry, ['title', 'link', 'id', 'summary', 'georss:point'])
if config.__flatten__ is True: serialized_config = config.serialize() cls.after_items_update.append(serialized_config) skip_order = True else: properties[item_name] = config.serialize()
self.page.visit()
pass
context_fields_to_remove = set(CONTEXT_FIELDS_TO_INCLUDE) context_fields_to_remove.add('client_id') for field in context_fields_to_remove: if field in context: del context[field]
cwd_prefix = '%s%s' % (os.curdir, os.sep)
if shift is None: shift = (2 * generator.rand(n_features) - 1) * class_sep X += shift
if len(self.credit_type) > 1: raise LoncapaProblemError('Only one type of partial credit is allowed for Multiple Choice problems.')
used_all_attempts = CapaFactory.create(showanswer='past_due', max_attempts="1", attempts="1", due=self.tomorrow_str) self.assertFalse(used_all_attempts.answer_available())
return DataFrame()
request_info = xmodule_instance_args.get('request_info', {}) if xmodule_instance_args is not None else {} task_info = {'student': student.username, 'task_id': _get_task_id_from_xmodule_args(xmodule_instance_args)}
self.assertEqual(self.cf.get_option(option_name), original_value)
columns_index = [8, 7, 2, 3, 4, 5, 6, 1, 0] cal_housing = cal_housing[:, columns_index] joblib.dump(cal_housing, filepath, compress=6)
sitemap_url = reverse('django.contrib.sitemaps.views.index')
self.connected = False msg = ('No master could be reached or all masters ' 'denied the minions connection attempt.') log.error(msg)
if not os.path.exists(filename): os.makedirs(filename)
QUERY_INTERVAL = 1000
calls = []
self.course_outline.select_advanced_tab()
cls.stack = []
import salt.utils import salt.utils.files import salt.utils.decorators as decorators from salt.exceptions import ( SaltInvocationError, CommandExecutionError, ) from salt.ext.six.moves import range
Certificate "MasterDBReplica_No.2" already exists
args.outdf = os.path.realpath(args.outdf)
__func_alias__ = { 'id_': 'id', 'reload_': 'reload', }
import msgpack if msgpack.loads(msgpack.dumps([1, 2, 3]), use_list=True) is None: raise ImportError
dtypes = map(np.dtype, ['float64', 'int8', 'uint8', 'bool', 'm8[ns]', 'M8[ns]'])
component = self.store.create_child( self.user_id, test_course.location, 'vertical', )
from salt.cloud.clouds import dimensiondata from salt.exceptions import SaltCloudSystemExit
problem_info = prob_grade_distrib[child.location]
from __future__ import unicode_literals
first_request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO["username"])
for state in READY_STATES: instructor_tasks = instructor_tasks.exclude(task_state=state) return instructor_tasks.order_by('-id')
self.assertEqual( len(CourseEnrollment.objects.filter(mode='honor', user_id__in=real_user_ids)), 0 )
from __future__ import absolute_import import logging import datetime from copy import copy
normalizers[normalizers < min_divisor] = 1.
data = np.empty(nd_state[1], dtype=nd_state[2]) np.ndarray.__setstate__(data, nd_state)
with option_context('display.unicode.east_asian_width', True):
optioninput_element.set('correct', str(correct_option))
fixtures = None
self._iterating = False
osarch = sorted(archinfo, key=archinfo.get, reverse=True)
request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO["username"]) self.assertEqual(request["parameters"]["user_country"], "")
expected = DataFrame([[False, False], [True, False], [False, False]]) result = df == b assert_frame_equal(result, expected)
def infer(x): return lib.map_infer(x.asobject, func)
g.precisions_init = precisions_not_positive[covar_type] assert_raise_message(ValueError, "'%s precision' should be %s" % (covar_type, not_positive_errors[covar_type]), g.fit, X)
seen.add(cand.__name__) q.insert(0,cand)
try: response_msg_div = etree.XML('<div>%s</div>' % str(response_msg))
log_loss_scorer = make_scorer(log_loss, greater_is_better=False, needs_proba=True)
D = pairwise_distances(X) core3, label3 = dbscan(D, sample_weight=sample_weight, metric='precomputed') assert_array_equal(core1, core3) assert_array_equal(label1, label3)
DECIMAL_SEPARATOR = '.' THOUSAND_SEPARATOR = ','
return not any(self._value_matches(target, test_val) for test_val in criteria['$nin'])
i = begin_at_stage for i in range(begin_at_stage, self.n_estimators):
from __future__ import unicode_literals
self.run_cloud('-f remove_key {0} id={1}'.format(PROVIDER_NAME, finger_print)) raise
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
self.assertRaises(KeyError, target.join, source, on='E')
self.assertTrue(self._has_changes(locations['grandparent'])) self.assertTrue(self._has_changes(locations['parent']))
before = self.make_project_state([]) after = self.make_project_state([address, tenant]) autodetector = MigrationAutodetector(before, after) changes = autodetector._detect_changes()
self.assertEqual(unicode(course.location.course_key), unicode(course.children[0].course_key))
if hasattr(client, 'create_user'): client.create_user(name, passwd) return True
result = f.clean('1:30 PM') self.assertEqual(result, time(13, 30, 0))
from __future__ import absolute_import import os
self.source = DataFrame({'MergedA': data['A'], 'MergedD': data['D']}, index=data['C'])
self._breadth_first(convert_item, [location])
start = stop = level_index.slice_indexer(key.start, key.stop, key.step, kind='loc') step = start.step
neigh_ind = neigh_ind[ sample_range, np.argsort(dist[sample_range, neigh_ind])]
course = CourseFactory.create() create_account(self.USERNAME, self.PASSWORD, self.EMAIL)
self.factory().fit(X5, Y5, intercept_init=0)
from openpyxl.styles import NumberFormat return NumberFormat(**number_format_dict)
msg = "Singleton array array(42) cannot be considered a valid collection." assert_raise_message(TypeError, msg, check_array, 42, ensure_2d=False)
duplicated_item.location = original_item.location duplicated_item.display_name = original_item.display_name duplicated_item.parent = original_item.parent
arr = np.array(list('abc'), dtype='S1') self.assertEqual(pd.lib.infer_dtype(arr), compare)
comments.append( 'Container \'{0}\' is already configured as specified' .format(name) )
original_distances = original_distances[non_identical]
bad1 = copy(city_mapping) bad1['foobar'] = 'FooField'
self.instructor_dashboard_page = InstructorDashboardPage(self.browser, self.course_id) self.instructor_dashboard_page.visit() self.cohort_management_page = self.instructor_dashboard_page.select_cohort_management()
graph = image.img_to_graph(img, mask=mask)
course_file = StringIO(xml_data.encode('ascii', 'ignore')) xml_obj = etree.parse(course_file, parser=edx_xml_parser).getroot()
import salt.config
if log.level <= logging.DEBUG: log.debug('Event data that caused an exception: {0}'.format( self.event_queue))
self.TA_role_2.inherit_permissions(self.TA_role)
if itemsize is None: itemsize = lib.max_len_string_array(com._ensure_object(data.ravel()))
cmd_opt = []
log = logging.getLogger(__name__)
self.connection = connection
labels_csr, new_inertia_csr = _labels_inertia( X_mb_csr, x_mb_squared_norms_csr, new_centers_csr) assert_greater(new_inertia_csr, 0.0) assert_less(new_inertia_csr, old_inertia_csr)
import cycler colors = mpl_stylesheet.pop('axes.color_cycle') mpl_stylesheet['axes.prop_cycle'] = cycler.cycler('color', colors)
_, n_features = self.means_.shape
unrestricted_course = CourseFactory.create() with self.assertNumQueries(1): embargo_api.check_course_access(unrestricted_course.id, user=self.user, ip_address='0.0.0.0')
'ssh_list_nodegroups': dict,
freq = to_offset(freq)
from salt.states import ssh_auth
assert_not_in(attribute, seq.xml_attributes)
import salt.utils
from __future__ import absolute_import import pprint import textwrap
with self.assertRaises(Exception): self.client.get(test_url)
reorderable_items = set() if view_name == 'reorderable_container_child_preview': reorderable_items.add(xblock.location)
if self.mode == 'sqlalchemy': res3 = DataFrame() i = 0 sizes = [5, 5, 5, 5, 2]
for s in [Series(range(5)), Series(range(5), index=range(1, 6))]:
frame = self.frame.copy() expected = self.frame.copy()
return comdat['stderr']
from salt.modules import ps import salt.ext.six as six
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.25, random_state=42)
trust_root = TrustRoot.parse(openid_request.trust_root) if not trust_root: log.error('invalid trust_root') return False
ForestEstimator = FOREST_ESTIMATORS[name]
result = Reso.get_freq(Reso.get_str_from_freq(freq)) self.assertEqual(freq, result)
if gem_bin is None: if __salt__['rvm.is_installed'](runas=runas): return __salt__['rvm.do'](ruby, cmdline, runas=runas)
cputime_percent = (1.0e-7 * cputime / host_cpus) / vcpus
splitted_data = train_test_split(X, y, random_state=42) with TempMemmap(splitted_data) as (X_train, X_test, y_train, y_test): _lars_path_residues(X_train, y_train, X_test, y_test, copy=False)
MIMEText.__init__(self, _text, _subtype)
self.child_module = self._get_module(course.id, child_descriptor, child_descriptor.location)
n_init_range = np.array([1, 5, 10, 15, 20])
if amount < decimal.Decimal('0.01'): return HttpResponseBadRequest("Amount must be greater than 0")
self.assertIn('timestamp', parameters) parsed_date = from_timestamp(parameters['timestamp']) self.assertLess(parsed_date, datetime.datetime.now(pytz.UTC))
self.sock.bind(('localhost', port)) self.sock.listen(5) netutil.add_accept_handler( self.sock, self.handle_connection, io_loop=self.io_loop, )
assert_true(X_scaled is not X)
self.assertFalse(user.badgeassertion_set.all())
self.attempt_upload_file_and_verify_result(test_case, 'upload_screenshot')
atom = (tables.Int32Atom() if config.floatX == 'float32' else tables.Int64Atom())
self.assertRaises(ValueError, df2.stack, level=['animal', 0])
self.cleanup() if self.running: self.running = False self.timer_stop.set() self.timer.join()
xblock_group_access = get_field_on_block(xblock, 'group_access', default_value={})
self.assertIsInstance(result_dict['task_id'], unicode) self.assertIsInstance(result_dict['time'], float) self.assertTrue(result_dict['time'] > 0.0)
node = _guess_node_id(node) apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
(thumbnail_content, thumbnail_location) = contentstore().generate_thumbnail( content, tempfile_path=tempfile_path, )
set(self.old_model_keys).intersection(self.new_unmanaged_keys)
self.generated_certificate.invalidate()
'ENABLE_STUDENT_HISTORY_VIEW': True,
tm._skip_if_no_pytz() import pytz
location = course_key.make_usage_key('course', 'test') link = utils.get_lms_link_for_item(location) self.assertEquals(link, "//localhost:8000/courses/mitX/101/test/jump_to/i4x://mitX/101/course/test")
shutil.copyfile(path_in, path_test)
if not __opts__['test']: if archive: __salt__['vmadm.update'](vm=name, key='hostname', archive_on_delete=True)
'overall_message': overall_message,
rmtree(fs_root, ignore_errors=True)
lzma = compat.import_lzma() f = lzma.open(filename, 'rb') assert_frame_equal(df, read_csv(f, index_col=0)) f.close()
name = os.path.join(name, os.path.basename(source))
queue_msg = u"<span>{0}</span>".format(_("Error running code."))
time.sleep(1) Reporter.objects.exclude(id=1).update(id=2)
dir_suffix = ""
@decorators.memoize def __detect_os(): return salt.utils.which('nginx')
import salt.utils import salt.utils.locales import salt.utils.systemd import salt.ext.six as six from salt.exceptions import CommandExecutionError
X1 = np.array([[-2, ], [-1, ], [-1, ], [1, ], [1, ], [2, ]], dtype='f')
assertNumProblems(expected_display_name, 1)
if os.path.isdir(tmp_dir): shutil.rmtree(tmp_dir) elif os.path.isfile(tmp_dir): os.remove(tmp_dir)
mock_audit_log.reset_mock()
#pylint: disable=E0602
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
self.assertEqual(len(Event.objects.select_related('screening__movie')), 2)
xpath = "//div[@class='%s ']" % div_class self.assert_has_xpath(xml, xpath, self.context)
self.assertIn( 'Service not found', self.run_function('service.list', ['spongebob']))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, patch)
class Title(models.Model): pass
import logging
EX_AGGREGATE = 20
regr_1 = DecisionTreeRegressor(max_depth=2) regr_2 = DecisionTreeRegressor(max_depth=5) regr_1.fit(X, y) regr_2.fit(X, y)
y = np.dot(X, w)
pstat = os.lstat(path)
with patch('capa.capa_problem.LoncapaProblem.grade_answers') as mock_grade: mock_grade.side_effect = exception_class('test error')
from __future__ import absolute_import import os
import salt.utils
Y = iris.target
queue.put(random_delay)
PARENTAL_CONSENT_AGE_LIMIT = 13
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
from __future__ import unicode_literals
profile = self.user.profile.__class__.objects.get(user=self.user) self.assertEqual(profile.has_profile_image, has_profile_image)
from __future__ import absolute_import
url(r'^generate_example_certificates$', 'instructor.views.api.generate_example_certificates', name='generate_example_certificates'),
try: with open(env_path) as env_file: return json.load(env_file)
flags = [('Name', name)]
return iri_to_uri(get_script_prefix().rstrip('/') + self.url)
f2 = lambda x: np.zeros((2, 2)) self.assertRaises(Exception, _group_agg, values, bounds, f2)
team_list = self.get_teams_list(user=user, expected_status=200, data=course_two_data) self.assertEqual(team_list['count'], 0)
self.models = None
from .tasks import update_course_structure
tm._skip_if_no_pytz()
dtypes = [np.int8, np.int16, np.int32, np.int64, np.uint8, np.uint32, np.uint64, np.float32, np.float64]
self._indexables.extend([ IndexCol(name=name, axis=axis, pos=i) for i, (axis, name) in enumerate(self.attrs.index_cols) ])
if not m_data: return
s = s.partition(b"\0")[0] return s.decode(self._encoding or self._default_encoding)
self.assertEqual('', get_format('THOUSAND_SEPARATOR'))
self.intervals = {}
email_opt_in = request.data['email_opt_in'].lower() == 'true' update_email_opt_in(request.user, org, email_opt_in) return HttpResponse(status=status.HTTP_200_OK)
if _is_convertible_to_td(item): try: item = Timedelta(item) except: pass
self.certificates_section.add_certificate_exception(self.user_name, '')
user_profile._changed_fields = get_changed_fields_dict(user_profile, sender)
from __future__ import absolute_import import copy import errno import glob import logging import os import re import shlex
self.random_start = int(self.random_start)
from __future__ import absolute_import import sqlite3 import os
from __future__ import absolute_import import os
kwarg_re = re.compile(r"(?:(\w+)=)?(.+)")
name = models.CharField(max_length=128) person_country_id = models.IntegerField()
from pylearn2.datasets import preprocessing
from __future__ import unicode_literals
with self.assertNumQueries(2): lst1 = self.traverse_qs( House.objects.prefetch_related('occupants'), [['occupants']] )
pass
good_states = ['AZ', 'FR'] blocked_states = ['US', 'AQ'] currently_blocked = EmbargoedState.current().embargoed_countries_list
import os import re
self.children_for_user = { user: [ ItemFactory(category=child_type, parent=self.parent).scope_ids.usage_id for child_type in BLOCK_TYPES ] for user in self.users.itervalues() }
export_course_to_xml( self.store, self.contentstore, self.course.id, self.root_export_dir, self.export_dir, )
tm._skip_if_no_scipy() s = Series([1, 2, 3]) result = s.interpolate(method='polynomial', order=1) assert_series_equal(result, s)
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
current_node = stack.pop()
{},
saltenv = env
client_args={"disable_ssl_certificate_validation": True}
throughputs = benchmark_throughputs(configuration) plot_benchmark_throughput(throughputs, configuration)
self.assertTrue( self.run_function('system.set_disable_keyboard_on_lock', [True])) self.assertTrue( self.run_function('system.get_disable_keyboard_on_lock'))
response = self.fetch('/login', method='POST', body=json.dumps(self.auth_creds_dict), headers={'Content-Type': self.content_type_map['json']})
self.assertEqual( chicago_json, City.objects.geojson(bbox=True, crs=True, precision=5).get(name='Chicago').geojson )
elapsed += time.clock() - _s gc.enable() result[kind] = (elapsed / iterations) * 1000
if mode in ['r', 'r+']: self.assertRaises(IOError, HDFStore, path, mode=mode)
break
self.assertEqual(len(mail.outbox), 0)
can_rollback_ddl = False
for video in videos: video["status"] = StatusDisplayStrings.get(video["status"])
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
self.exceptions.extend([KeyboardInterrupt, WorkerInterrupt])
expected = ''
from __future__ import absolute_import
assert_false("the" in vocabulary)
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21 13:30:05")
import salt.ext.six as six
def _get_courses_with_access_type(self, user, access_type):
_write_test_file(file_name, "This is an arbitrary file for testing uploads")
super(SendMsgBot, self).__init__(jid, password)
setter(item, value[:, i].tolist())
DATE_INPUT_FORMATS = [
res = self.bseries[:-3] tm.assert_sp_series_equal(res, self.bseries.reindex(idx[:-3]))
if descriptor_orig_usage_key is not None: tracking_context['module']['original_usage_key'] = unicode(descriptor_orig_usage_key) tracking_context['module']['original_usage_version'] = unicode(descriptor_orig_version)
ref_kml_regex = re.compile(r'^<Point><coordinates>-95.363\d+,29.763\d+,18</coordinates></Point>$') self.assertTrue(ref_kml_regex.match(h.kml))
return JsonResponse({"error": "Cohort name must be specified."}, 400)
self.assertIn( ("migrations", "0001_squashed_0002"), recorder.applied_migrations(), )
import integration
from __future__ import absolute_import import os import copy import errno import signal import hashlib import logging import weakref from random import randint
from __future__ import unicode_literals
if not is_verbatim: self.process_input_line(line, store_history=store_history)
self.transformer_data = defaultdict(dict)
class SystemInfo(models.Model): system_name = models.CharField(max_length=32)
df['float_3'] = Series([1.] * len(df), dtype='float64') self.assertRaises(ValueError, store.append, 'df', df)
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course_key): assertProblemNameEquals(problem_new_name)
locales = tm.get_locales() self.assertTrue(len(locales) >= 1)
__virtualname__ = 'sqlite3'
from __future__ import absolute_import import socket
if partial_text: wait_for(lambda _: css_html(css_selector, index=index), timeout=8)
self.assertFalse(CourseEnrollment.is_enrolled(self.user, non_existent_course_key))
values = Series([u('fooBAD__barBAD'), NA, u('foo')])
pass
return now.replace(tzinfo=tz) + tz.utcoffset(now)
self._push_count(start_pos)
enable_sigusr1_handler()
df = DataFrame([1, 2]) result = df.get_dtype_counts() expected = Series({'int64': 1}) tm.assert_series_equal(result, expected)
self.assertNotContains(resp, 'Explore free courses from')
MEMCACHE_MAX_KEY_LENGTH = 250
def get_layer(): ds = DataSource(source.ds) return ds[0]
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salt.utils import decorators from salt.version import SaltStackVersion from salt.exceptions import CommandExecutionError
break
if not path.endswith('/'): path = path + '/'
output['texture_id'][i] = textid output['texture_pos'][i] = (px, py)
self.assertEqual(str(user.username.encode('utf-8')), UsernameCipher().decrypt(str(pref.value)))
clf = self.factory() assert_raises(ValueError, clf.fit, X2, Y2, intercept_init=np.zeros((1,)))
pvals = T.alloc(1.0 / num_classes, num_classes) one_hot = self.s_rng.multinomial(size=(num_examples,), pvals=pvals)
chapter_index = self._chapter_index(chapter) if chapter_index is None: return None
from backports import ssl_match_hostname HAS_SSL_MATCH_HOSTNAME = True
offset += m.offset
diff[key] = changes_needed[key]
index = _get_index() result = DataFrame(values, index=index).stack() result.name = self.name return result
cls.driver = None
self.cohort_management_page.select_cohort_some_inline_discussion() self.assertFalse(self.cohort_management_page.is_save_button_disabled(self.inline_key)) self.assertFalse(self.cohort_management_page.inline_discussion_topics_disabled())
wua_searcher = wua_session.CreateUpdateSearcher()
space, source = data_specs if isinstance(space, CompositeSpace): sub_spaces = space.components sub_sources = source else: sub_spaces = (space,) sub_sources = (source,)
if step: rstep = step(self._step, other)
assert_panel4d_equal(panel4d.ix[:, items, dates, cols], panel4d.reindex(items=items, major=dates, minor=cols))
grid_search = GridSearchCV(pipeline, parameters, n_jobs=1)
name = ET.SubElement(content, 'name') name.text = vm_['name']
if process_all: locales = all_locales else: locales = locale or all_locales locales = set(locales) - set(exclude)
result = s.shift() self.assertTrue('datetime64[ns, US/Eastern]' in str(result)) self.assertTrue('NaT' in str(result))
if deep is None or deep is True: assert_series_equal(s, expected) assert_series_equal(s2, expected2) else: assert_series_equal(s, expected2) assert_series_equal(s2, expected2)
return cls
try: file_name = data.name file_size = data.size except AttributeError: raise ValidationError(self.error_messages['invalid'], code='invalid')
opts = model._meta app_label = opts.app_label action_list = LogEntry.objects.filter( object_id=unquote(object_id), content_type=get_content_type_for_model(model) ).select_related().order_by('action_time')
icrv_blocks = get_course_blocks(course_key, VERIFICATION_BLOCK_CATEGORY)
from __future__ import unicode_literals
org_filter_out_set = microsite.get_all_orgs()
import salt.ext.six as six
request._dont_enforce_csrf_checks = not self.enforce_csrf_checks
from salt.states import xmpp
ret = generate_user_certificates( student, course_key, course=course, insecure=options['insecure'] )
stacked = result.stack() assert_series_equal(s, stacked.reindex(s.index))
from salt.states import ssh_known_hosts
import salt.utils from salt.ext import six
world.browser.driver.get(url) assert_equal(world.css_text('body'), expected_text)
except KeyError: self.send_error(401) return
if callable(default): default = default() default = field.get_db_prep_save(default, self.connection) return default
warnings.filterwarnings('ignore', category=PerformanceWarning) store.put('df', df) warnings.filterwarnings('always', category=PerformanceWarning)
from __future__ import absolute_import import os
movie_reviews_data_folder = sys.argv[1] dataset = load_files(movie_reviews_data_folder, shuffle=False) print("n_samples: %d" % len(dataset.data))
st_mode = st.st_mode read_all = stat.S_IRUSR read_all |= stat.S_IRGRP read_all |= stat.S_IROTH
stress = ((dis.ravel() - disparities.ravel()) ** 2).sum() / 2
iris = datasets.load_iris() X = iris.data y = iris.target
keys = list(range(len(values))) result = concat(values, axis=self.axis, keys=keys)
sample_dict = {'x': (-10, 10), 'y': (-10, 10)}
cmd.append(path)
values = np.ones(self.bseries.npoints) sp = SparseSeries(values, sparse_index=self.bseries.sp_index) sp.sp_values[:5] = 97 self.assertEqual(values[0], 97)
tm._skip_if_no_scipy()
self.check_result(r, self.lst)
COMMENT_WITH_NL = tokenize.generate_tokens(['#\n'].pop).send(None)[1] == '#\n'
assert_array_equal(linkage_X_ward[:, :2], out_X_unstructured[0]) assert_array_equal(linkage_X_ward[:, :2], out_X_structured[0])
json = self.tsframe.to_json() result = read_json(json) assert_frame_equal(result, self.tsframe)
'log_fmt_logfile': (tuple, str),
except (TypeError, ValueError): exists = False
at.__grains__ = {} at.__salt__ = {}
import logging import re import os import bz2
if method == 'indexer': method = 'ix' key = obj._get_axis(axis)[key]
self.assertRaises(ValueError, df.dropna, axis=3)
with self.assertRaises(xmodule.exceptions.NotFoundError): get_request_dict = {CapaFactory.input_key(): '3.14'} module.check_problem(get_request_dict)
DEFAULT_SITE_ID = 1
import numpy as np from sklearn.tree import DecisionTreeRegressor import matplotlib.pyplot as plt
VALID_KEY_CHARS = string.ascii_lowercase + string.digits
concat([df1, df2])
CourseEnrollmentFactory(user=self.moderator, course_id=self.course.id) self.moderator.roles.add(Role.objects.get(name="Moderator", course_id=self.course.id))
REQUIRE_STANDALONE_MODULES = {}
import sys if sys.version_info < (2, 7): import unittest2 as unittest else: import unittest
location = u'i4x://edX/DemoX/edx-reverification-block/invalid_location' checkpoint = VerificationCheckpoint.get_or_create_verification_checkpoint(self.course.id, location)
opts = next(six.itervalues(pillar)) prepend_reclass_source_path(opts) break
'submission': submission,
__virtualname__ = 'couchbase'
assert len(state) == 2 assert isinstance(coeffs, float) _, state = state state = [state] coeffs = [coeffs]
groups = pickle.loads(pickle.dumps(groups)) self.assertQuerysetEqual(groups, [g], lambda x: x)
pass
helper(not_html_encoded, ensure_ascii=True, encode_html_chars=False) helper(not_html_encoded, ensure_ascii=False, encode_html_chars=False)
dtype = 'uint8' ntrain = 50000
shape = values.shape
self.assertTrue(allowance_section.is_add_allowance_popup_visible)
__virtualname__ = 'group'
if len(set(pixeltypes)) != 1: raise ValidationError("Band pixeltypes are not all equal.")
shutdown_message = options.get('shutdown_message', '') quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'
dest2check = dest if not dest2check: rel_path = self._check_proto(path)
return launchctl('unload', path, runas=runas)
self.len = 4 + 4 + 4 * self.n + 4 * self.n + self.text_len
r = FOREST_REGRESSORS[name](random_state=0) assert_false(hasattr(r, "classes_")) assert_false(hasattr(r, "n_classes_"))
data = sorted(data.items())
s = Series(np.random.randn(10)) result = np.ones_like(s) expected = Series(1, index=range(10), dtype='float64')
np.random.seed(12345)
if not path or not os.path.isfile(path): return ret
self.assertFalse(views.is_course_passed(self.course, None, self.student, self.request))
for i in range(self.n_layers_ - 1): activations[i + 1] = safe_sparse_dot(activations[i], self.coefs_[i]) activations[i + 1] += self.intercepts_[i]
s1 = Series(date_range('20120101', periods=3)) s2 = Series(date_range('20120102', periods=3)) expected = Series(s2 - s1)
if apply_change is True: assign(name, value) return 'Updated and applied' return 'Updated'
rng = check_random_state(13) X = rng.rand(100, 2) sample_weight = np.ones(100) reg_y = rng.rand(100)
windows = world.browser.windows assert_equal(len(windows), 2)
ws.send('websocket client ready')
for layer in ds: for feat in layer: g = feat.geom
pd.set_option('display.multi_sparse', False)
out = decons_group_index(obs_ids, shape) return out if xnull or not lift.any() \ else [x - y for x, y in zip(out, lift)]
microsite.set_by_domain('unknown') self.assertEqual(microsite.get_value('university'), 'default_university')
task_folder = task_service.GetFolder(location) task_definition = task_folder.GetTask(name).Definition actions = task_definition.Actions
result = expr._can_use_numexpr(operator.add, None, self.frame, self.frame, 'evaluate') self.assertFalse(result)
if tasks.environment.dry_run: for cmd in cmd_list: tasks.environment.info(cmd) return
if 'SETUP_DIRNAME' in globals():
trans_tar = salt.client.ssh.state.prep_trans_tar( __context__['fileclient'], chunks, file_refs, __pillar__, id_=st_kwargs['id_'])
grains = {'mem_total': 0} if osdata['kernel'] == 'Linux': meminfo = '/proc/meminfo'
from __future__ import absolute_import
self.assertRaises(ValueError, lambda: series.groupby(bins).mean())
course_email = cls( course_id=course_id, sender=sender, subject=subject, html_message=html_message, text_message=text_message, template_name=template_name, from_addr=from_addr, )
import logging
if not len(w) > 0: raise AssertionError("No warning raised when calling %s" % func.__name__)
raise ImportError("Oops")
import logging
rng = timedelta_range('1 day 10:11:12', freq='us', periods=2000) s = Series(np.arange(len(rng)), index=rng)
if d_estate in self.road_stack.value.nameRemotes: self.road_stack.value.message(msg, self.road_stack.value.nameRemotes[d_estate].uid) return
y_pred_proba = clf.predict_proba(X) y_pred_log_proba = clf.predict_log_proba(X) assert_array_almost_equal(np.log(y_pred_proba), y_pred_log_proba, 8)
from __future__ import absolute_import
categories = self._validate_categories(categories) codes = _get_codes_for_values(values, categories)
for dir_name in dir_names: pillar_node[dir_name] = {}
post_save.connect(invalidate_country_rule_cache, sender=CountryAccessRule) post_save.connect(invalidate_country_rule_cache, sender=RestrictedCourse) post_delete.connect(invalidate_country_rule_cache, sender=CountryAccessRule) post_delete.connect(invalidate_country_rule_cache, sender=RestrictedCourse)
from __future__ import unicode_literals
raise TypeError("SparseArray does not support item assignment via " "slices")
continue
params = { 'enrollment_action': 'enroll', 'course_id': unicode(self.course.id) } self.client.post(reverse('change_enrollment'), params)
'AUTOMATIC_AUTH_FOR_TESTING': False,
self.assertFalse(auth.user_has_role(self.user, CourseCreatorRole()))
date = master_date.strftime('%Y-%m-%d %H:%M')
'rest_framework', 'openedx.core.djangoapps.user_api',
return self._int64index.join(other, how, level, return_indexers)
authentication_classes = []
Donation.add_to_order(cart, amount, course_id=course_id)
ret_dense = test_func(DENSE_FILTER) ret_sparse = test_func(SPARSE_FILTER) if ret_dense is not None and ret_sparse is not None: assert_array_almost_equal(ret_dense, ret_sparse, decimal=3)
from __future__ import unicode_literals
ret = 'present' if entry.match(line): lines.append(line) else: ret = 'change' lines.append(str(entry))
update_wrapper(view, cls.dispatch, assigned=()) return view
from salt.modules import debian_ip
receipt_id = models.CharField( db_index=True, default=generateUUID, max_length=255, )
from __future__ import absolute_import import textwrap
__virtualname__ = 'reclass'
if not fnmatch.fnmatch(repo['url'], six.text_type(remote)): continue
grains, pillars = self._get_cached_minion_data(*minion_ids)
for pkg_name in ['track.contexts', 'track.middleware', 'dd.dogapi']: logging.getLogger(pkg_name).setLevel(logging.CRITICAL)
enrollment_mode = self.dashboard_page.get_enrollment_mode(self.course_info["display_name"]) self.assertEqual(enrollment_mode, 'honor')
if not len(dtypes) or _ALLOWED_DTYPES[dtype_check] >= dtypes: return True
self.user = User.objects.create_user(uname, email, self.user_password)
self.base_loader = base_loader
self.assertRaises(TypeError, check, 'table', index) with tm.assert_produces_warning( expected_warning=PerformanceWarning): check('fixed', index)
pass
os.environ[JOBLIB_SPAWNED_PROCESS] = '1'
from salt.modules import mac_desktop from salt.exceptions import CommandExecutionError
self._auto_auth(self.USERNAME, self.EMAIL, False)
np.random.seed(0)
_cookie_allows_colon_in_names = six.PY3
self.set_config(enabled=False)
courses_list_by_groups, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(courses_list_by_groups, [])
n_samples = 12 n_features = 2 n_iter = 10 rng = np.random.RandomState(42) X = rng.rand(n_samples, n_features)
if left.shape != right.shape: return False
signal.signal(signal.SIGINT, self._handle_signals)
self._auto_auth("STAFF_TESTER", "staff101@example.com", True)
marginalize_odd = (depth % 2) == 0
self.courseware_page.click_next_button_on_top() self.assert_navigation_state('Test Section 2', 'Test Subsection 2,1', 0, next_enabled=False, prev_enabled=True)
if quiet is True: cmd.append('--quiet')
resp = self.client.get(url) self.assertEqual(resp.status_code, 200) self.assertIn("Course is full", resp.content)
ret['changes'] = {name: __salt__['chocolatey.install'](name, version, source, force, install_args, override_args, force_x86, package_args)}
self.assertTrue(self._has_changes(parent.location)) self.assertTrue(self._has_changes(child.location))
self.start_blocking_transaction()
clf_balanced = PassiveAggressiveClassifier(C=0.1, n_iter=1000, class_weight="balanced") clf_balanced.fit(X2, y2)
return self.index.is_all_dates
if len(names) == 1: return ret[names[0]] return ret
m.save(using=self.using) num_saved += 1 if verbose: stream.write('%s: %s\n' % ('Updated' if is_update else 'Saved', m))
if len(names) == 1: return ret[names[0]] return ret
dtype = dtype[0]
raise Exception('Unable to find available messageid')
'openedx.core.djangoapps.bookmarks',
USE_I18N = True
return super(MultiIndex, self).slice_locs(start, end, step, kind=kind)
site_configuration = SiteConfigurationFactory.create( site=self.site, )
MOCK_STAFF_GRADING = True MOCK_PEER_GRADING = True
BROKER_HEARTBEAT = 10.0 BROKER_HEARTBEAT_CHECKRATE = 2
result = RangeIndex.from_range(range(5, 1)) expected = RangeIndex(0, 0, 1) self.assert_index_equal(result, expected, exact=True)
ret = self.run_function( 'state.sls', mods='issue-1879.step-1', timeout=120 ) self.assertSaltTrueReturn(ret)
log.error('{0} is not a valid mount point, skipping.'.format(mount)) continue
self.course_nav.q(css='button.check.Check').click() self.course_nav.wait_for_ajax()
n_clusters_1 = len(set(labels)) - int(-1 in labels) assert_equal(n_clusters_1, n_clusters)
from __future__ import absolute_import, print_function import logging import os
header = None rows = [] err_rows = [["id", "username", "error_msg"]] current_step = {'step': 'Calculating Grades'}
y = np.array([3, 7, 5, 9, 8, 7, 10]) x = np.arange(len(y))
if style_kwargs: first_row = startrow + cell.row + 1 last_row = startrow + cell.mergestart + 1 first_col = startcol + cell.col + 1 last_col = startcol + cell.mergeend + 1
encoder=CourseSettingsEncoder
self.user.is_staff = True self.assertTrue(user_has_role(self.user, CourseCreatorRole()))
text = f.widget.format_value(result) self.assertEqual(text, "01:30:00 PM 21/12/2010")
for X, y in classification_datasets: X = X y = y mlp = MLPClassifier(algorithm='sgd', max_iter=100, random_state=1, tol=0, alpha=1e-5, learning_rate_init=0.2)
changed = [] latest = [] for pkg_name, options in six.iteritems(pkg_params):
if len(idset) > 1: self.context['overall_message'] = msg else: self.context['messages'][0] = msg
self.user.is_staff = True
data = np.random.randint(0, 11, size=10) result = np.argmin(Series(data)) self.assertEqual(result, np.argmin(data))
self._block_relations = defaultdict(_BlockRelations)
from __future__ import absolute_import
exc_info_on_loglevel=logging.DEBUG
from salt.states import lvs_server
learning_rate = 1.
import integration
pls_ca = pls_.PLSCanonical(n_components=X.shape[1]) pls_ca.fit(X, Y)
postfix.__salt__ = {}
self.assertEquals(22, self.response.content.count('grade_F'))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch, mock_open)
class MultiPoint(GeometryCollection): _allowed = Point _typeid = 4
from __future__ import unicode_literals
pass
self.video.wait_for_state('pause')
import urllib.request urlopen = urllib.request.urlopen
procedure_args, geo_field = self._spatial_setup(func, field_name=kwargs.get('field_name'))
if verbose: for img_id in ret: ret[img_id]['Info'] = inspect_image(img_id)
from sklearn.tree._tree import TREE_LEAF X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) k = 4
self.assertTrue(linode._validate_name('foo_bar'))
self.pipe = None
__virtualname__ = 'etcd'
with open(self.TEST_INDEX_FILENAME, "w+") as index_file: json.dump({}, index_file) self.addCleanup(remove_file, self.TEST_INDEX_FILENAME)
profile_page.visit()
r = StreamingHttpResponse(iter(['hello', 'world'])) with self.assertRaises(Exception): r.write('!')
read_excel(xlsx, 'Sheet1', index_col=0)
self.assertEqual(max_scores_cache.num_cached_from_remote(), 1)
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
pass
data = {"time": eventtime} data.update(payload)
n_samples_train, n_samples_test, n_features = 75, 150, 500 np.random.seed(0) coef = np.random.randn(n_features)
self.assertEqual(new_version.location.course_key, target_location_namespace)
@ddt.data(*flatten(CONTAINER_XMODULES))
salt '*' vsphere.get_service_running my.esxi.host root bad-password 'ssh'
urls = { 'raw': raw_image_url, 'small': raw_image_url, 'large': raw_image_url, }
long_name = u"Финансовое программирование и политика, часть 1: макроэкономические счета и анализ"
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
result = sparse[sparse % 2 == 1] exp = orig[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
from salt.utils.odict import OrderedDict
y_type = type_of_target(y) if y_type == "multiclass": inversed = _inverse_binarize_multiclass(binarized, classes=classes)
self._loglevel_config_setting_name_, self.config['log_level']
self.settings_detail.refresh_page() self.settings_detail.wait_for_prerequisite_course_options() self.assertTrue(is_option_value_selected( browser_query=self.settings_detail.pre_requisite_course_options, value='' ))
dr = date_range('2012-01-01', '2012-01-10', freq='D', tz='Hongkong')
warnings.simplefilter("ignore", RuntimeWarning)
import re import socket
ellps1 = sd['ellipsoid'] prec = sd['eprec']
__salt__['file.remove'](temp_dir)
import salt.utils import salt.ext.six as six
return _is_safe_url(url, host) and _is_safe_url(url.replace('\\', '/'), host)
with self.assertRaises(TypeError): City.objects.annotate(kml=functions.AsKML('name'))
Child(name='xyzzy', parent=None)
DataFrame.from_records([rec], index='begin_time')
idx = int(rng.rand(1) * n_samples) entry = X[idx] seen.add(idx)
if isinstance(obj, gt.ABCSeries): from pandas import Series result = Series(result, index=obj.index, name=obj.name, copy=False)
with open(self.TEST_INDEX_FILENAME, "w+") as index_file: json.dump({}, index_file) self.addCleanup(remove_file, self.TEST_INDEX_FILENAME)
NOT_STUDIO_EDITABLE = ( PollDescriptor, )
try: ContentType = apps.get_model('contenttypes', 'ContentType') except LookupError: available = False else: if not router.allow_migrate_model(using, ContentType): return available = True
set_cookie_data(cookie_storage, ['cookie', CookieStorage.not_finished]) set_session_data(session_storage, ['session'])
return f.ix[i]
about_location = self.make_course_key(org, course, run).make_usage_key('about', 'overview')
self.client.logout() response = self.client.get(url, **{'HTTP_X_EDX_API_KEY': self.API_KEY}) self.assertEqual(response.status_code, status.HTTP_200_OK)
result = embargo_api.check_course_access(self.course.id, user=self.user, ip_address='0.0.0.0') self.assertTrue(result)
os.killpg(os.getpgid(process.pid), signal.SIGKILL) process.wait()
X_ = X[:, np.newaxis, :] Y_ = Y[np.newaxis, :, :]
if user_found_by_email_lookup and LoginFailures.is_feature_enabled(): LoginFailures.increment_lockout_counter(user_found_by_email_lookup)
_min_parts = 3 if len(parts) < _min_parts: msg = "At least %d parts expected in %r" % (_min_parts, ip_str) raise AddressValueError(msg)
with self.settings(MODULESTORE_BRANCH='published-only'): for cache in settings.CACHES: caches[cache].clear()
if (reduce and axis == 1 and self._is_mixed_type and self._is_datelike_mixed_type): reduce = False
_describe = __salt__['boto_iot.describe_policy'](policyName=policyName, region=region, key=key, keyid=keyid, profile=profile)['policy']
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
if deploy_d_from_conf_file not in deploy_scripts_search_paths: deploy_scripts_search_paths.append( (deploy_d_from_conf_file, True) ) if deploy_d_from_syspaths not in deploy_scripts_search_paths: deploy_scripts_search_paths.append( (deploy_d_from_syspaths, True) )
self.xblock.location = Location("org", "import", "run", "category", "stubxblock")
s = Series(date_range('20130101', periods=5, freq='D')) s.iloc[2] = pd.NaT
self.selenium.get(self.live_server_url + reverse('admin:admin_widgets_member_add'))
rng = np.random.RandomState(0) n_samples, n_features, n_components = 500, 2, 2
return HttpResponse(status=406)
from scipy.sparse import csc_matrix
JOBLIB_SPAWNED_PROCESS = "__JOBLIB_SPAWNED_PARALLEL__"
from __future__ import absolute_import
assert_frame_equal(result_sort, df.groupby(col, sort=False).first())
p = Person({'first_name': 'John', 'last_name': 'Lennon', 'birthday': '1940-10-9'})
self.publish((('html', 'html00'),))
}
from __future__ import absolute_import import re
sys.exit(1)
return set(MicrositeOrganizationMapping.objects.all().values_list('organization', flat=True))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
'pillarenv': str,
meta_features = [] for feature in features: if 'meta.' in feature: meta_key = feature.split('.')[1] meta_features.append((feature, meta_key))
try: import paramiko HAS_PARAMIKO = True except ImportError: HAS_PARAMIKO = False
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
multi_db = True COURSE_SLUG = "100" COURSE_NAME = "test_course"
from __future__ import absolute_import
link_name = '/' + link_name
if url is None: url = cls._get_message_url_path_from_db(course_key, access_point) cache.set(cache_key, url)
result.index = frame.index
from __future__ import absolute_import
charlie = User(pk=51, username='charlie', email='charlie@example.com') charlie.set_unusable_password()
scsi_spec.device.sharedBus = vim.vm.device.VirtualSCSIController.Sharing.noSharing
bitmask = 0xffffffff h = 0
from urllib.request import urlopen PY2 = False
rval = np.transpose(rval, tuple(self.axes.index(axis) for axis in ('b', 0, 1, 'c')))
import_course_from_xml( source_store, 'test_user', TEST_DATA_DIR, source_dirs=['manual-testing-complete'], static_content_store=source_content, target_id=source_course_key, create_if_not_present=True, raise_on_failure=True, )
input_attrs['id'] = '%s_%s' % (id_, i)
self.assertOLXIsPublishedOnly(block_list_to_delete) self.delete_item(block_list_to_delete, revision=revision) self._check_for_item_deletion(block_list_to_delete, result) self.assertOLXIsDeleted(autopublished_children) self.assertOLXIsDeleted(block_list_draft_children)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( patch, MagicMock, NO_MOCK, NO_MOCK_REASON )
result = idf.drop(drop_idx.index, level=0).reset_index() expected = df[-df.var1.isin(drop_idx.index)]
if not self.options.name and not \ self._check_enabled_suites(include_unit=True, include_cloud_provider=True): self._enable_suites(include_unit=True)
labels, y = np.unique(y, return_inverse=True)
if not ( self._is_anonymous(self.context["thread"]) and not self._is_user_privileged(endorser_id) ): return DjangoUser.objects.get(id=endorser_id).username
'mine_interval': int,
def __sub__(self, other): "Return the difference this Geometry and the other." return self.difference(other)
session_data = None
if not isinstance(config, dict): return False, ('Configuration for diskusage beacon ' 'must be a dictionary.') return True, 'Valid beacon configuration'
result = f.clean('12/21/2010') self.assertEqual(result, date(2010, 12, 21))
import datetime
dense_results = BaggingRegressor( base_estimator=CustomSVR(), random_state=1, **params ).fit(X_train, y_train).predict(X_test)
if fastpath: self.axes = [axis] if isinstance(block, list):
self.assertEqual(context['currency_symbol'], 'Rs') self.assertEqual(context['currency'], 'PKR')
self.assertEquals(block_counts_for_course['problem'], 6) self.assertEquals(block_counts_for_chapter_x['problem'], 3)
expected = df[10] assert_frame_equal(result, expected)
if isinstance(metric, partial): metric.__module__ = 'tmp' metric.__name__ = name
self.assertTrue(self.video.downloaded_transcript_contains_text('txt', 'Equal transcripts'))
import logging log = logging.getLogger(__file__)
rast = GDALRaster(json.loads(JSON_RASTER)) stx_pnt = GEOSGeometry('POINT (-95.370401017314293 29.704867409475465)', 4326) stx_pnt.transform(3086)
Z = kmeans.predict(np.c_[xx.ravel(), yy.ravel()])
if e.args[0] in self.codes_for_integrityerror: six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2]) raise
repr(self.rng)
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
with assertRaisesRegexp(TypeError, 'cannot specify cols with a ' 'MultiIndex'): df.to_csv(path, tupleize_cols=False, columns=['foo', 'bar'])
CSRF_COOKIE_NAME = 'csrftoken' CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52 CSRF_COOKIE_DOMAIN = None CSRF_COOKIE_PATH = '/' CSRF_COOKIE_SECURE = False CSRF_COOKIE_HTTPONLY = False CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN' CSRF_TRUSTED_ORIGINS = []
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON
context['show_partners'] = microsite.get_value('show_partners', True)
saltenv = env
__func_alias__ = { 'set_': 'set' }
course_key = self.kwargs.get(self.lookup_field) if course_key is not None: self.kwargs[self.lookup_field] = CourseKey.from_string(course_key)
fermat_weber = fmin_bfgs(cost_func, median, disp=False) assert_array_almost_equal(median, fermat_weber) assert_warns(ConvergenceWarning, _spatial_median, X, max_iter=30, tol=0.)
render_kw_only_separator = False
if dtype is not None:
gs = GridSearchCV(clf, [{'parameter': [0, 1, 2]}], scoring='accuracy', refit=False, error_score='raise')
import salt.utils.xmlutil as xml from salt._compat import ElementTree as ET
TEMPLATES=[{ 'BACKEND': 'django.template.backends.dummy.TemplateStrings', }],
#)
DELAY = 0.5
article = Article.objects.annotate( headline=Coalesce('summary', 'text', output_field=TextField()), )
self.user = UserFactory.create() self.client.login(username=self.user.username, password='test') CourseEnrollmentFactory.create(user=self.user, course_id=self.course_key)
if update.MsrcSeverity: if update.MsrcSeverity in results['Severity']: results['Severity'][update.MsrcSeverity] += 1 else: results['Severity'][update.MsrcSeverity] = 1
from __future__ import unicode_literals
import time import salt.ext.six as six from salt.ext.six.moves import range
import integration from salt.fileserver import gitfs
domain = domain.split(':')[0] microsites = cls.objects.filter(site__domain__iexact=domain)
print(grid_search.grid_scores_)
lab_slice = slice(label[0], label[-1]) return self.ix[:, lab_slice]
assert_raises(ValueError, chi2_kernel, csr_matrix(X), csr_matrix(Y)) assert_raises(ValueError, additive_chi2_kernel, csr_matrix(X), csr_matrix(Y))
from __future__ import absolute_import
nic_opts = {}
old = list_pkgs()
config.set_options(ignore_setup_xxx_py=True, assume_default_configuration=True, delegate_options_to_subpackages=True, quiet=True)
return []
self.assertTrue(linode._validate_name('abc'))
node_position_model = manifold.LocallyLinearEmbedding( n_components=2, eigen_solver='dense', n_neighbors=6)
after = expiration + timedelta(seconds=1) query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(after, query) self.assertIs(result, None)
return self.client.post(url, post_args)
import pandas.core.datetools as datetools
display_name=_("Certificate Web/HTML View Overrides"), help=_("Enter course-specific overrides for the Web/HTML template parameters here (JSON format)"), scope=Scope.settings,
self.assertTrue(modal.has_release_date()) self.assertFalse(modal.has_due_date()) self.assertFalse(modal.has_policy())
mpoly[i] = poly
iface_data['inet6'] = {} iface_data['inet6']['addrfam'] = 'inet6'
if data_columns is None: data_columns = d[selector]
self.assertTrue(glusterfs.create_volume('newvolume', 'host1:/brick', start=True)) self.assertTrue(mock_start_volume.called)
'cli_summary': bool,
if filter is not None: filt = o.index if isinstance(o, Series) else o if not filter(filt): continue
from __future__ import unicode_literals
LOCK_EX = LOCK_SH = LOCK_NB = 0
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
alpha = float(alpha) random_state = check_random_state(random_state)
if error == 0: self.input_state['queuekey'] = queuekey self.input_state['queuestate'] = 'queued' self.input_state['queuetime'] = time.time()
self.assertTrue('success' in result and result['success'])
'ALLOW_WIKI_ROOT_ACCESS': True,
EX_THIN_PYTHON_INVALID = 10 EX_THIN_DEPLOY = 11 EX_THIN_CHECKSUM = 12 EX_MOD_DEPLOY = 13 EX_SCP_NOT_FOUND = 14
raise SaltRenderError( 'Jinja variable {0}{1}'.format( exc, out), buf=tmplstr)
PY3 = sys.version_info[0] == 3
import salt.ext.six as six import salt.utils from salt.modules import network from salt.exceptions import CommandExecutionError if six.PY2: import salt.ext.ipaddress
if course_overview and not hasattr(course_overview, 'image_set'): CourseOverviewImageSet.create_for_course(course_overview)
from __future__ import absolute_import, print_function from mock import call import re
from salt.modules import useradd from salt.exceptions import CommandExecutionError import pwd
self.assertTrue(tab.validate(dict_tab)) if invalid_dict_tab: with self.assertRaises(xmodule_tabs.InvalidTabsException): tab.validate(invalid_dict_tab)
minion.setup() _minions.append(minion)
dirty = git_describe.endswith("-dirty") pieces["dirty"] = dirty if dirty: git_describe = git_describe[:git_describe.rindex("-dirty")]
centers = [[1, 1], [-1, -1], [1, -1]] X, _ = make_blobs(n_samples=10000, centers=centers, cluster_std=0.6)
from salt.states import at
expr = stripXML(self.mathml_start + expr + self.mathml_end) expected = stripXML(self.mathml_start + expected + self.mathml_end)
self.make_course() url = self.make_url('pdf_book', book_index=0, chapter=1) response = self.client.get(url) self.assertEqual(response.status_code, 404)
response = self.client.get('/home') self.assertEqual(response.status_code, 200) self.assert_no_xss(response, escaping_content)
from __future__ import absolute_import import datetime import json import logging import pprint import time try: import slackclient HAS_SLACKCLIENT = True except ImportError: HAS_SLACKCLIENT = False
{% set port = 6379 %}
return ':'.join((image, tag))
task_input = {'statuses_to_regenerate': [CertificateStatuses.deleted, CertificateStatuses.generating]}
comment, passed, retries = _download(quidditch, retries) if not passed: return (comment, str(passed))
current_proba = _samme_proba(estimator, n_classes, X)
self.assertIn('some_required_info', response.context['adminform'].form.errors)
results['Total'] += 1
unvisited_children.reverse() stack.extend(unvisited_children)
tmp_file = os.path.join(integration.TMP, 'issue-2379-file-append.txt') salt.utils.fopen(tmp_file, 'w').write(
m = custom_site._registry[Child] request = self._mocked_authenticated_request('/child/', user_noparents) response = m.changelist_view(request) self.assertNotContains(response, 'Parent object')
values = self.mixed_float.as_matrix(['A', 'B', 'C', 'D']) self.assertEqual(values.dtype, np.float64)
lang = node['language'] highlight_args['force'] = True
else:
result = sparse[sparse % 2 == 1] exp = orig[orig % 2 == 1].to_sparse(fill_value=0) tm.assert_sp_series_equal(result, exp)
from __future__ import absolute_import
master_doc = 'index'
with warnings.catch_warnings(record=True): import pandas.io.ga as ga
self.unit_page.xblocks[1].open_basic_tab()
if cache_file and cache_file.startswith('salt:'):
transcripts_utils.download_youtube_subs(good_youtube_sub, self.course, settings)
mylocalrepo: git.config_set: - name: mysection.myattribute - multivar: - foo - bar - baz - repo: /path/to/repo
dive = Book.objects.using('other').create(title="Dive into Python", published=datetime.date(2009, 5, 4))
from salt.modules import dockerng as dockerng_mod from salt.exceptions import CommandExecutionError, SaltInvocationError
content = '<ol/>' payload = get_response(content, 'January 11, 2013') self.assertHTMLEqual(content, payload['content'], "self closing ol")
from .overrides import get_override_for_ccx return get_override_for_ccx(self, self.course, 'start')
get_deployment = show_deployment
wip1 = W_list[i+1] hi_mean += T.dot(samples[i+1], wip1.T) * beta
if HAS_REQUESTS is False: parser.error( 'The python \'requests\' library needs to be installed' )
self.assert_enrollment_status(as_server=True, mode=CourseMode.VERIFIED)
problem_specified = self.build_problem(answer="Second", case_sensitive=True)
i = Index([Timestamp('20130101'), Timestamp('20130103')]) i_rec = self.encode_decode(i) self.assert_index_equal(i, i_rec)
'log_datefmt_logfile': str,
instance.image.delete(save=False)
formulahint_element.set("samples", sample_str)
self.store.revert_to_published(component.location, self.user_id) component = self.store.get_item(component.location) self.assertFalse(self.store.has_changes(component))
return u"//{}/{}/{}".format(settings.CMS_BASE, page, block.location)
self.certificates_section.wait_for_certificate_exceptions_section()
self.assertIsNone(get_cache_key(request)) learn_cache_key(request, response)
from __future__ import absolute_import
elif np.array(value).ndim == 2:
path = urlparse.urlparse(url).path resolver = resolve(path) ccx_key = resolver.kwargs['course_id']
df = DataFrame([[1, 2], [3, 4]], dtype='int64') mask = DataFrame([[False, False], [False, False]]) s = Series([0, np.nan])
self.url = reverse('dashboard') self.site_lang = settings.LANGUAGE_CODE
assert_equal(X_pred.shape[0], n_samples)
return True
mode_display_name = models.CharField(max_length=255, verbose_name=_("Display Name"))
import salt.ext.six as six
with self.assertRaises(FieldError): TaggedItem.objects.filter(vegetable__isnull=True)
qs = Node.objects.values('parent__parent__id') self.assertIn(' LEFT OUTER JOIN ', str(qs.query))
if ( settings.FEATURES.get('AUTH_USE_SHIB') and course.enrollment_domain and course.enrollment_domain.startswith(SHIBBOLETH_DOMAIN_PREFIX) ): return redirect_with_get('shib-login', request.GET)
_setup_mp_logging_listener_ = False
import salt.utils import salt.utils.mac_utils from salt.exceptions import SaltInvocationError
serializer.save(changed_by=self.request.user)
args = args and list(args) or []
if check_pickle: pickle.dumps(function)
detR = (np.diag(C) ** (2. / n_samples)).prod()
from salt.modules import lvs
value_regex = None
from __future__ import absolute_import import os import shutil import textwrap
from salt.states import pagerduty
from config_models.models import cache
request.text
if isinstance(address, bytes): self.network_address = IPv4Address(address) self._prefixlen = self._max_prefixlen self.netmask = IPv4Address(self._ALL_ONES) #fixme: address/network test here return
#~ asList = False
try: import MySQLdb HAS_MYSQL = True except ImportError: HAS_MYSQL = False
return None
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
__salt__['file.remove'](tmpfilename)
if not user_partitions: return
else: ret = _load_result(existing, ret)
for cat in item['categories']: handler.addQuickElement("category", cat)
time.sleep(1) return info(name).get('shell') == shell
y = np.array([5, 6.1, 6, 7, 10, 9, 10]) x = np.arange(len(y))
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course.id): course.enrollment_domain = domain self.store.update_item(course, self.test_user_id)
qs, search_use_distinct = self.model_admin.get_search_results(request, qs, self.query)
plt.fill_between(alphas, scores + std_error, scores - std_error, alpha=0.2)
assert test.X.shape[0] % batch_size == 0
from __future__ import absolute_import import datetime import random import string
for user in get_users_with_role(CourseStaffRole.ROLE): add_user_with_status_unrequested(user)
empty_distribution = grades.answer_distributions(self.course.id)
if self.has_spatial_indexes: self.assertSpatialIndexExists('gis_neighborhood', 'heatmap')
alert_ids = get_alert_config(deployment_id, api_key=api_key, profile=profile)
self.assertTrue(module_has_submodule(egg_module, 'bad_module')) with self.assertRaises(ImportError): import_module('egg_module.sub1.sub2.bad_module')
return redirect_to_custom_form(strategy.request, auth_entry, kwargs)
regex = r'\d+.\d+'
table_name_filter = options.get('table_name_filter')
def contribute_to_class(self, cls, name, **kwargs): super(GeometryField, self).contribute_to_class(cls, name, **kwargs)
VerificationDeadline.set_deadline(course_key, verification_deadline)
result_list_with_tz_support = result_list[:] assert result_list_with_tz_support[-4] == '2\xa0days, 6\xa0hours from now' result_list_with_tz_support[-4] == '2\xa0days, 5\xa0hours from now'
store = HDFStore(path, mode='a', driver='H5FD_CORE', driver_core_backing_store=0) store['df'] = df store.append('df2', df)
shutil.rmtree(root_dir)
plt.figure(figsize=(8, 8)) accuracy = plt.subplot(211) timescale = plt.subplot(212)
pass
'acceptance_wait_time': float,
df2.columns = ['B', 'B'] with tm.assertRaises(ValueError): df1.isin(df2)
from __future__ import absolute_import
for l in [slice(-6, 6), slice(-6.0, 6.0)]:
if 'custom_check' in self.text_customization:
contexts = to_list(response.context) if not contexts: self.fail(msg_prefix + "Response did not use any contexts to render the response")
self.assertRedirects(response, '/get_view/')
s.cmd.run('echo at render time', cwd='/') s.file.managed('target.txt', source='salt://source.txt')
unordered = frame.ix[[3, 2, 4, 1]] sorted_df = unordered.sort_index(axis=0) expected = frame assert_frame_equal(sorted_df, expected)
self.previous_version = edit_info.get('previous_version', None)
try: self.assertIn(ret_str, instance) except AssertionError: self.run_cloud('-d {0} --assume-yes'.format(self.INSTANCE_NAME)) raise
self.test_outbox.extend(email_messages) return len(email_messages)
def g_test(x): return x ** 3, (3 * x ** 2).mean(axis=-1)
s4 = Series([1, 0], index=[1, 2]) with tm.assertRaises(ValueError): df.sample(1, weights=s4)
ipc_server.start(ipc_server_socket_path)
system = self.get_system() descriptor = system.process_xml(xml_str_in)
try: nn = n[m]
#latex_appendices = []
if not __execute_cmd('config -g cfgUserAdmin -o ' 'cfgUserAdminUserName -i {0} {1}' .format(uid, username), host=host, admin_username=admin_username, admin_password=admin_password): delete_user(username, uid) return False
self.deferred_sql.extend(self._model_indexes_sql(model))
_mapping = {}
import salt.ext.six as six
STUDIO_EDIT_ROLES = 8 STUDIO_VIEW_USERS = 4 STUDIO_EDIT_CONTENT = 2 STUDIO_VIEW_CONTENT = 1
if is_setter:
df_orig = DataFrame( [['1', '2', '3', '.4', 5, 6., 'foo']], columns=list('ABCDEFG'))
df = DataFrame(np.random.randn(5, 3), index=['foo', 'foo', 'bar', 'baz', 'bar'])
provider1 = self.configure_dummy_provider( enabled=True, icon_class='', icon_image=SimpleUploadedFile('icon.svg', '<svg><rect width="50" height="100"/></svg>'), )
ptr += _counts[0] for j in range(ngroups): size = _counts[j + 1] out[j, i] = _median_linear(ptr, size) ptr += size
cmd.extend(args)
if getattr(self.distribution, 'salt_ssh_packaging_file', None) is None: print('This command is not meant to be called on it\'s own') exit(1)
response = self.client.post(reverse('admin:student_courseaccessrole_add'), data=data) self.assertRedirects(response, reverse('admin:student_courseaccessrole_changelist'))
request.user = self.user
REQUIRE_DEBUG = False
self.assertNotEqual(encoded, make_password(None), "Random password collision?")
from __future__ import absolute_import import logging
carg = carg.astype(object) parsed = lib.try_parse_year_month_day(carg / 10000, carg / 100 % 100, carg % 100) return tslib.array_to_datetime(parsed, errors=errors)
#latex_use_modindex = True
import integration from salt.config import cloud_providers_config from salt.ext.six.moves import range
return type( str('RelatedObjectDoesNotExist'), (self.field.remote_field.model.DoesNotExist, AttributeError), {} )
num_examples = {'train': 32561, 'test': 16281}[which_set] assert len(content) == num_examples, (len(content), num_examples)
page.wait_for_ajax()
return self.client_address[0]
minor_labels = np.repeat(np.arange(len(frame.columns)), lengths)
HOMEPAGE_COURSE_MAX = None
continue
course = xml.CourseFactory.build() sequence = xml.SequenceFactory.build(parent=course) vertical = xml.VerticalFactory.build(parent=sequence)
return self.warp(data, resampling=resampling, max_error=max_error)
df = DataFrame({'foo': []}) rs = df.shift(-1)
self.release_languages('ar, es-419')
from salt.exceptions import SaltException from salt.modules import grains as grainsmod from salt.utils import dictupdate
with self.assertRaises(pickle.PickleError): cache.add('unpicklable', Unpicklable())
if view_name == 'ccx_manage_student' and not is_email(identifier): self.assertContains(response, 'Could not find a user with name or email ', status_code=200)
if template not in salt.utils.templates.TEMPLATE_REGISTRY: raise CommandExecutionError( 'Attempted to render file paths with unavailable engine ' '{0}'.format(template) )
if ax.freq is not None or ax.inferred_freq is not None:
#pylint: disable=E0602
ofile.writelines(lines)
text = f.widget.format_value(result) self.assertEqual(text, '21.12.2010')
course = self.set_up_course(due_date_display_format=None) text = self.get_text(course) self.assertIn(self.time_with_tz, text)
cp = self.ts[:10].copy() cp[:] = np.nan self.assertTrue(isnull(cp.corr(cp)))
init = getattr(cls.__init__, 'deprecated_original', cls.__init__) if init is object.__init__: return []
n_classes_ = [n_classes_] classes_ = [classes_] class_prior_ = [class_prior_] constant = [constant]
modulestore().update_item(course, ModuleStoreEnum.UserID.test)
group_keys = keys group_levels = self.grouper.levels group_names = self.grouper.names
self.refresh_course() return section
studentmodule.state = json.dumps(problem_state) studentmodule.save()
def get_last_modified(): if last_modified_func: dt = last_modified_func(request, *args, **kwargs) if dt: return timegm(dt.utctimetuple())
try: self.get_loc(key) return True except LookupError: return False
self.event.fire_event(data, tagify('present', 'presence'), timeout=3) old_present.clear() old_present.update(present)
return string.rstrip(','), imports
tolerance = self._convert_tolerance(tolerance)
response = urllib2.urlopen(req)
schema_attr = __salt__['postgres.schema_get'](dbname, name, **db_args)
self.function = 'ST_Length_Spheroid' self.source_expressions.append(Value(geo_field._spheroid))
comment, passed, retries = _search(quidditch, retries) if not passed: return (comment, str(passed))
self.assertRaises(KeyError, self.cf.get_option, 'no_such_option') self.cf.deprecate_option('KanBan')
if not pkginfo: log.error('Unable to locate package {0}'.format(pkg_name)) ret[pkg_name] = 'Unable to locate package {0}'.format(pkg_name) continue
X = X_orig.copy() result1 = (X[block1] - Z).reindex(columns=subs)
if 'last_update' in from_index: query['last_update'] = from_index['last_update']
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
import salt.utils from unit.modules.zcbuildout_test import Base, KNOWN_VIRTUALENV_BINARY_NAMES from salt.modules import zcbuildout as modbuildout from salt.states import zcbuildout as buildout from salt.modules import cmdmod as cmd
clf = GradientBoostingClassifier(n_estimators=100, random_state=1) assert_raises(ValueError, clf.fit, X, y + [0, 1])
return sorted(st_.states)
if not include_meta_estimators: estimators = [c for c in estimators if not c[0] in META_ESTIMATORS] if type_filter is not None: if not isinstance(type_filter, list): type_filter = [type_filter] else:
self.loop_interval = int(self.opts['loop_interval']) self.rotate = int(time.time())
attrs['class'] = 'vManyToManyRawIdAdminField'
self.assertTrue(search_paths[0].endswith(etc_deploy_path))
if strategy == "median": median = np.empty(len(columns)) for i, column in enumerate(columns): median[i] = _get_median(column, n_zeros_axis[i])
if stop_words is not None: tokens = [w for w in tokens if w not in stop_words]
filter_func = filter_func or (lambda __: True)
params['signed_field_names'] = 'reason_code,message' params['signature'] = self._signature(params)
self.restricted_course.enroll_msg_key = 'embargo' self.restricted_course.access_msg_key = 'embargo' self.restricted_course.save()
result = f.clean('21.12.2010') self.assertEqual(result, date(2010, 12, 21))
err = ItemNotFoundError mock_get_course.return_value = err
htmlhelp_basename = 'Djangodoc'
header='infer', names=None, index_col=None, usecols=None, squeeze=False, prefix=None, mangle_dupe_cols=True,
course_outline = self.api_response().data course_outline[0]['summary'].pop("id") self.assertEqual(course_outline[0]['summary'], expected_output)
if not change_password(username, password, uid): log.warning('unable to set user password') delete_user(username, uid) return False
self._track_reverification_events('edx.bi.reverify.started', user.id, course_id, checkpoint.checkpoint_name)
from __future__ import absolute_import import itertools import os import json import socket import sys import re import platform import logging import locale import salt.exceptions
del Trans
start = self._start + self._step * start stop = self._start + self._step * stop step = self._step * step
self._interval = 1000.
from salt.exceptions import CommandExecutionError
template_dirs = tuple(self.dirs) if self.app_dirs: template_dirs += get_app_template_dirs(self.app_dirname) return template_dirs
angle = 0.0 perplexity = 10 n_samples = 100 for n_components in [2, 3]: n_features = 5 degrees_of_freedom = float(n_components - 1.0)
block.edit() block.reset_field_val("Display Name") block.save_settings() self.assertEqual(block.name, name_default)
return self.has_key(key)
widget = ReadOnlyPasswordHashWidget() html = widget.render(name='password', value=None, attrs={}) self.assertIn(_("No password set."), html)
serializer = CreditProviderCallbackSerializer(data=data, provider=provider) serializer.is_valid(raise_exception=True)
#self.debug(msg)
rng = np.random.RandomState(0) X = np.c_[X, rng.randn(n_samples, 200 * n_features)]
bytes = bytearray
if self.parse_dates is not None: data, names = _process_date_conversion( data, self._date_conv, self.parse_dates, self.index_col, self.index_names, names, keep_date_col=self.keep_date_col)
resp = self.client.get(reverse('courseenrollments')) self.assertEqual(resp.status_code, status.HTTP_200_OK)
EmptyPromise( lambda: self.q(css=enrollment_button).present, "Enrollment button" ).fulfill() self.q(css=enrollment_button).click()
"_save": "Save",
def f(x): x[:] = 10
kpca = KernelPCA() Xt = kpca.fit_transform(X) assert_equal(Xt.shape, (3, 0))
import re
return False
if labels.is_unique and Index(keyarr).is_unique:
ret = self.run_state( 'file.directory', name=tmp_dir, follow_symlinks=True, user=user, group=group, recurse=['user', 'group'] ) self.assertSaltTrueReturn(ret)
REGISTERED_ACCESS_ROLES = {}
try: this_tar_file.extractall(dest_path) except Exception as e: raise IOError("[tar] error while extracting '%s'" %tar_filename) else: pass
new = Point(5, 23) nullcity.point = new
self.assertTrue(all(isinstance(resi, t) for resi in res))
assert X.shape == (96 * 96 * 3, 100000) assert X.dtype == 'uint8'
import logging
p.save() self.assertIsNone(p.bestchild)
nan_weights = [np.nan] * 10 with tm.assertRaises(ValueError): o.sample(n=3, weights=nan_weights)
from __future__ import absolute_import from distutils.version import LooseVersion import glob import grp import os import pwd import sys import shutil import stat import tempfile import textwrap import filecmp import textwrap
if not formatted: indent = "" nextLevelIndent = "" nl = ""
def landing(request, org, course, coursename): return render_to_response('temp-course-landing.html', {})
from __future__ import print_function
if 'warnings' in cdata: ret.setdefault('warnings', []).extend(cdata['warnings'])
echo "manual" > /etc/init/salt-master.override
if os.getuid() == 0: os.chown(dir_, uid, gid) os.umask(cumask)
raise NotImplementedError()
self.assertIn("Payment Form", resp.content)
for p, y, expected in cases: assert_almost_equal(loss_function.dloss(p, y), expected)
lr_tracker = LearningRateTracker() algorithm = SGD(learning_rate, cost, batch_size=batch_size, monitoring_batches=3, monitoring_dataset=monitoring_dataset, termination_criterion=termination_criterion, update_callbacks=[linear_decay, lr_tracker], set_batch_size=False)
else: self.generic_visit(node)
if not organizations: raise Exception( 'Configuration error. Microsite {key} does not have any ORGs mapped to it!'.format( key=microsite_object.key ) )
from salt.modules import monit
providers_string = _("{first_providers}, and {last_provider}").format( first_providers=u", ".join(providers[:-1]), last_provider=providers[-1] )
actual = json.loads(response.content) self.assertEqual(actual, expected)
url = reverse('create_mode', args=[unicode(self.course.id)]) self.client.get(url, parameters)
from __future__ import absolute_import
out = [head] (head, tail) = os.path.split(head)
self.assertEqual(resp.status_code, 200)
if not settings.FEATURES.get('ENABLE_TEAMS'): filtered_list.append('teams_configuration')
if not _is_na_compat(v, nn[0]): raise ValueError
if entrance_exam_url: problems = get_problems_in_section(entrance_exam_url) usage_keys = [UsageKey.from_string(location) for location in problems.keys()]
for i in xrange(k): dists[:, i] = numpy.square((X - mu[i, :])).sum(axis=1)
self.client = AjaxEnabledTestClient()
continue
APPEND_SLASH = True
for cline in content.split('\n'): new_file.append(cline + '\n')
self.assertIn("2015-JULY-17", text)
new_settings = get_server_setting(settings=settings.keys(), server=server) failed_settings = dict()
return response
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'parallels', vm_['profile'], vm_=vm_) is False: return False
elif can_do_equal_len(): setter(labels[0], value)
from __future__ import absolute_import import os import sys import textwrap import tempfile
if x_auth: cherrypy.request.cookie['session_id'] = x_auth
Axes3D
(repo.shas, repo.messages, repo.timestamps, repo.authors) = _parse_commit_log(None,REPO_PATH, args.base_commit)
if self.typ is None: self.typ = getattr(self.description, self.cname, None)
class FrameworkForm(Form): name = CharField() language = ChoiceField(choices=[('P', 'Python'), ('J', 'Java')], widget=RadioSelect)
course_id = CourseKeyField( max_length=255, db_index=True, help_text="Which course is this group associated with?", )
temp_all_words = self.all_words
GET_ITERATOR_CHUNK_SIZE = 100
self.assertContains(response, '<th scope="col"', count=5)
os.setsid()
hasher = HashingVectorizer(n_features=opts.n_features, stop_words='english', non_negative=True, norm=None, binary=False) vectorizer = make_pipeline(hasher, TfidfTransformer())
template = lookup_template(namespace, template_name) return template.render_unicode(**context_dictionary)
sls[ps_opts['d-i']['languagechooser']['language-name-fb']['argument']] = { 'locale': ['system'] }
result = func( Series([1.]), Series([1.]), 50, min_periods=min_periods) tm.assert_series_equal(result, Series([np.NaN]))
else: return False
self.assertEquals( preview.latex_preview('-x+2-3+4', variables=['x']), '-x+2-3+4' )
crit1 = Term('index>foo') self.assertRaises(KeyError, store.remove, 'a', [crit1])
self.assertIn('LEFT OUTER', str(qs.query))
try: import ldap import ldap.modlist HAS_LDAP = True except ImportError: HAS_LDAP = False
if not hasattr(view_converter, 'topo_space'): raise NotImplementedError("Not able to get a topo_space " "from this converter: %s" % view_converter)
ret['comment'] = 'Event module not available. Schedule enable job failed.'
s = self.model.objects.get(session_key=self.session.session_key) self.assertEqual(s.account_id, 42)
from __future__ import unicode_literals
auto_reject = self.auto_key.check_autoreject(load['id']) auto_sign = self.auto_key.check_autosign(load['id'])
if self.edx_video_id and edxval_api: try: val_profiles = ["youtube", "desktop_webm", "desktop_mp4"] val_video_urls = edxval_api.get_urls_for_profiles(self.edx_video_id, val_profiles)
self._user_info = None
if not pvdisplay(device): cmd.append(device) elif not override: raise CommandExecutionError('Device "{0}" is already an LVM physical volume.'.format(device))
for func in ('order', 'sort'): with tm.assert_produces_warning(FutureWarning): getattr(c, func)()
self.assertNotIn("\"/static/", response.content)
freq = self.freq if isinstance(self, com.ABCPeriodIndex) else None return self._shallow_copy(taken, freq=freq)
gp_fix = GaussianProcessClassifier(kernel=1.0 * RBF(length_scale=1.0), optimizer=None) gp_fix.fit(X[:train_size], y[:train_size])
from config_models.models import cache from embargo.models import IPFilter from embargo.forms import RestrictedCourseForm, IPFilterForm
cls.create_and_enroll_student( courses=[cls.test_course_2], username='student_enrolled_public_profile' ) profile = cls.users['student_enrolled_public_profile'].profile profile.year_of_birth = 1970 profile.save()
patcher = patch.object(api, 'api_enabled', Mock(return_value=True)) patcher.start() self.addCleanup(patcher.stop)
elif self.ndim == ndim: if axes is None: return self._constructor(result) return self._constructor(result, **self._construct_axes_dict())
assert_series_equal(model.y_predict, model.predict(x=x))
os.remove(os.path.join(data_file))
self.assertNotIn('url_name', course_xml.attrib)
dist_matrix[dist_matrix != 0] = 1
est = DeprecatedAttributeEstimator(a=1)
try: temp_file = _mkstemp_copy(path=path, preserve_inode=preserve_inode) except (OSError, IOError) as exc: raise CommandExecutionError("Exception: {0}".format(exc))
initial = [ {'name': 'Gin Tonic'}, ] LimitedFavoriteDrinkFormSet = formset_factory(FavoriteDrinkForm, extra=3, max_num=2) formset = LimitedFavoriteDrinkFormSet(initial=initial) form_output = []
enabled = [] for line in service_lines: if line.startswith('PID'): continue
_maybe_remove(store, 'wp') store.put('wp', wp, format='table') store.select('wp')
s = Series(index=np.array([None])) expected = Series(index=Index([None])) assert_series_equal(s, expected)
for system in ['lms', 'cms']: sh(django_cmd(system, DEFAULT_SETTINGS, 'compilejsi18n'))
self.assertFalse(CourseMode.objects.filter(id=self.course_mode.id).exists())
import logging
from salttesting import skipIf, TestCase from salttesting.helpers import ( ensure_in_syspath, TestsLoggingHandler, ForceImportErrorOn ) from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
self.assertFalse('<h2>Enrollment Information</h2>' in response.content)
wiki_slug = None wiki_tag = xml_object.find("wiki") if wiki_tag is not None: wiki_slug = wiki_tag.attrib.get("slug", default=None) xml_object.remove(wiki_tag)
X1 = np.ones(18) kf = KFold(3) check_cv_coverage(kf, X1, y=None, labels=None, expected_n_iter=3)
stdout = json.loads(result['stdout']) return stdout != {}
from salttesting.helpers import ( destructiveTest, requires_network, requires_salt_modules, ensure_in_syspath ) ensure_in_syspath('../../')
with check_mongo_calls_range(max_finds=5, max_sends=3): self._update_partitions(reload_items=False)
discussion_item = self.store.create_item(self.user.id, course.id, 'discussion', 'new_component')
clf.fit(X, y) assert_raises(ValueError, clf.partial_fit, np.hstack((X, X)), y)
from salttesting import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock
return self.items.serialize()
import salt.ext.six
import integration
self.assertEqual(views.get_cosmetic_display_price(self.course, registration_price), "$99")
BOK_CHOY_MONGO_DATABASE = "test" BOK_CHOY_CACHE = memcache.Client(['0.0.0.0:11211'], debug=0)
problem_vertical = ItemFactory.create( parent_location=problem_section.location, category='vertical', display_name=problem_vertical_name ) problem_vertical_list.append(problem_vertical)
provider_ids = self.request.GET.get('provider_ids', None)
if netloc: return url
_, model_0_path, model_1_path = sys.argv
self.assertInCourseListing(existent_course_key)
layer_trainers[-1].main_loop()
new_bar = Bar.objects.create() new_foo = Foo.objects.create(bar=new_bar)
match = re.match(r'^(\d+)\.(\d+)(?:\.(\d+))?', ver)
from salt.state import STATE_INTERNAL_KEYWORDS as _STATE_INTERNAL_KEYWORDS
self.assertEqual(self.store.get_modulestore_type( SlashSeparatedCourseKey('foo', 'bar', '2012_Fall')), default_ms )
a2 = A02.objects.all()[0] self.assertIsInstance(a2, A02) self.assertEqual(a2.f_a, "foo")
rw_array = np.eye(10) rw_df = DataFrame(rw_array)
for zp in res['stdout'].splitlines(): zp = zp.split("\t") zp_data = {}
student_views.create_account(strategy.request) self.assert_json_failure_response_is_username_collision(student_views.create_account(strategy.request))
response = searcher.search( doc_type=CoursewareSearchIndexer.DOCUMENT_TYPE, field_dictionary={"course": unicode(self.course.id)} ) self.assertEqual(response["total"], 3)
fd, name = mkstemp(suffix='.png') os.close(fd)
result = Index(np.array(self), name=self.name) new_target, indexer, _ = result._reindex_non_unique( np.array(target))
result = idx.delete(len(idx))
#needs_sphinx = '1.0'
_update_social_context(request, context, course, user, user_certificate, platform_name)
self._rollback = len(boundary) + 6
connection.ops.check_expression_support(self) self.function = connection.ops.spatial_aggregate_name(self.name) return super(GeoAggregate, self).as_sql(compiler, connection)
certs_api.set_cert_generation_enabled(self.course.id, True)
) DIRECT_MS_SETUPS_SHORT = ( 'mongo', #'split', ) MODULESTORE_SETUPS = DIRECT_MODULESTORE_SETUPS + MIXED_MODULESTORE_SETUPS MODULESTORE_SHORTNAMES = DIRECT_MS_SETUPS_SHORT + MIXED_MS_SETUPS_SHORT SHORT_NAME_MAP = dict(zip(MODULESTORE_SETUPS, MODULESTORE_SHORTNAMES))
'CERTIFICATES_HTML_VIEW': False,
ContentType.objects.clear_cache() with self.assertNumQueries(1): ContentType.objects.get_for_model(ContentType)
if not self.q(css="input.proctored_exam").present: return False
TOTAL_FORM_COUNT = 'TOTAL_FORMS' INITIAL_FORM_COUNT = 'INITIAL_FORMS' MIN_NUM_FORM_COUNT = 'MIN_NUM_FORMS' MAX_NUM_FORM_COUNT = 'MAX_NUM_FORMS' ORDERING_FIELD_NAME = 'ORDER' DELETION_FIELD_NAME = 'DELETE'
has_force_batch_size = getattr(model, "force_batch_size", False) train_dataset_is_uneven = \ dataset.get_num_examples() % self.batch_size != 0
if longtable is None: longtable = get_option("display.latex.longtable") if escape is None: escape = get_option("display.latex.escape")
self.df = DataFrame(np.random.randn(10000, 50)) self.df.to_csv('__test__.csv')
status = 'pending'
about_descriptor = XBlock.load_class('about') overview_template = about_descriptor.get_template('overview.yaml') self.expected_data['overview'] = overview_template.get('data')
self.assertTrue(allowance_section.is_add_allowance_button_visible)
master = copy.deepcopy(salt.config.DEFAULT_MASTER_OPTS) master.update( log_level='info', log_level_logfile='info' )
join = salt.utils.alias_function(joined, 'join')
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandExecutionError
self.session = self.backend()
for (suffix, mode, kind) in SUFFIXES: self.suffix_map[suffix] = (suffix, mode, kind) suffix_order.append(suffix)
self.execute(self.sql_delete_table % { "table": self.quote_name(model._meta.db_table), })
return False
start_date = datetime(2015, 7, 1) end_date = datetime(2015, 7, 1)
from __future__ import absolute_import import copy import hashlib import logging import os
test_connection = copy.copy(connections[DEFAULT_DB_ALIAS]) test_connection.settings_dict = copy.copy(connections[DEFAULT_DB_ALIAS].settings_dict) return test_connection
self.test_create_account()
MIGRATION_MODULES = {}
from __future__ import unicode_literals
o = o.repeat(range(1, len(o) + 1)) o.name = 'a'
appended = self.mixed_frame[:5].append(self.mixed_frame[5:]) assert_frame_equal(appended, self.mixed_frame)
if not hasattr(self, 'components_'): self._init_latent_vars(n_features)
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = ' '
params.update(default_flow_style=False, indent=__opts__['output_indent'])
if os.getenv('DISPLAY') is None: try: import matplotlib matplotlib.use('Agg') except: pass
import salt.utils.thin
self.assertContains(response, k, status_code=500)
rgr = MultiOutputRegressor(GradientBoostingRegressor(random_state=0)) rgr.fit(X, y, w)
self.login(self.email, self.pw)
from __future__ import absolute_import
XBLOCK_REMOVED_HTML_ELEMENTS = [ '<div class="wrap-instructor-info"', ]
sample_weight = compute_sample_weight({1: 2, 2: 1}, y) assert_array_almost_equal(sample_weight, [2., 2., 2., 1., 1., 1.])
suggested_prices = models.CommaSeparatedIntegerField(max_length=255, blank=True, default='')
self.assertTrue(mock_audit_log.called)
import napalm
courses = split_store.get_courses(BRANCH_NAME_DRAFT)
X = make_low_rank_matrix(n_samples=n_samples, n_features=n_features, effective_rank=rank, tail_strength=0.1, random_state=0) assert_equal(X.shape, (n_samples, n_features))
codes = c.codes
mopts['file_roots'] = self.actual_file_roots mopts['saltversion'] = __version__ pillar['master'] = mopts
import salt.client.ssh.client
rendered = "0.post.dev%d" % pieces["distance"]
msg += _('Failed in authenticating {username}, error {error}\n').format( username=euser, error=err ) continue
exhaust(self._input_data)
import salt.ext.six as six
self._auto_auth({'username': 'test', 'course_id': course_id})
if parts[0].endswith('sh:'): out = ' '.join(parts[1:]) ret['comment'] = out
elif isinstance(indexer, slice):
from salt.states import mdadm
cls._initialize_stacker(ax, stacking_id, len(values))
try: exec_fn( code_prolog + LAZY_IMPORTS + code, globals_dict, python_path=python_path, extra_files=extra_files, slug=slug, ) except SafeExecException as e: emsg = e.message else: emsg = None
df.values[0, 0] = np.nan df.values[5, 3] = np.nan
self.assertTrue( self.run_function('xattr.delete', [TEST_FILE, 'squidward']))
class Student(models.Model): character = models.ForeignKey(Character, models.CASCADE) study = models.CharField(max_length=30)
result = self.frame[lambda x: 'A'] tm.assert_series_equal(result, self.frame.loc[:, 'A'])
else: return OuterAtomic(using, savepoint, read_committed)
self.assertGreater(len(params['signed_date_time']), 0) self.assertGreater(len(params['transaction_uuid']), 0)
return self._tfidf.transform(X, copy=False)
MASQUERADE_SETTINGS_KEY = 'masquerade_settings'
self.assertTrue(hasattr(course_overview_before, 'image_set'))
ccx = self.make_ccx(max_students_allowed=2) ccx_course_key = CCXLocator.from_course_locator(self.course.id, ccx.id) staff = self.make_staff() instructor = self.make_instructor()
all_parents = [] published_parents = 0 for parent in parents: if parent['_id']['revision'] is None: published_parents += 1 all_parents.append(parent)
raise NotImplementedError()
result = type(message)("")
student = request.user
import salt.utils.jid import salt.returners
Y = np.array([e.predict_proba(X)[:, 1] for e in self.estimators_]).T
else: raise ValueError("unrecognized mode '%s'" % mode)
restart_django_servers()
title = None description = None _items = _sections = _order = None __flatten__ = False __allow_additional_items__ = False
course = self.get_item_from_modulestore(self.usage_key) self.assertNotIn(chapter1_usage_key, course.children) self.assertIn(chapter2_usage_key, course.children)
urlpatterns += [ url(r'^json/response/$', views.json_response_view), ]
der_cert = der[0] #der_algo = der[1] der_sig = der[2]
for c in self.values_axes:
key.set_contents_from_string( data, headers={ "Content-Encoding": content_encoding, "Content-Length": len(data), "Content-Type": content_type, } )
mode_display_name = models.CharField(max_length=255)
self.assertFalse(re.match(r"memory usage: [^+]+\+", res[-1]))
export_extra_content( export_fs, self.modulestore, self.courselike_key, xml_centric_courselike_key, 'about', 'about', '.html' )
self.payment_and_verification_flow.proceed_to_payment()
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
df = DataFrame(tm.getSeriesData()) df['foo'] = 'bar'
for current_cfg in vmconfig['current'][instance]: if vmconfig_type['instance'][instance] not in state_cfg: continue
self.attempt_upload_file_and_verify_result(test_case, 'upload_screenshot')
self._check_linkedin_visibility(False)
filtered = self.mixed_frame.filter(like='foo') self.assertIn('foo', filtered)
if self.backward: return self.check_string_backward(expected, given)
{% for k, v in details['servers'].iteritems() %} {{ k }}: dellchassis.blade_idrac: - idrac_password: {{ v['idrac_password'] }} {% endfor %}
response = self.client.post( self.url, data='Test Invalid data', content_type='application/json', REQUEST_METHOD='DELETE' ) self.assertEqual(response.status_code, 400)
import salt.utils.compat import salt.utils.odict as odict
fields.update({ 'language': getattr(settings, 'DEFAULT_COURSE_LANGUAGE', 'en'), 'cert_html_view_enabled': True, })
with DefaultStorage().open(task_input['file_name']) as f: total_assignments = 0 for _line in unicodecsv.DictReader(UniversalNewlineIterator(f)): total_assignments += 1
log = logging.getLogger(__name__)
test = __opts__.get('test', False) instance = __salt__['cloud.action'](fun='show_instance', names=names) __opts__['test'] = test return instance
reset_to_default = False try: reset_to_default = xblock.start.year < 1900 except ValueError: reset_to_default = True
with open(os.path.join(self.module_dir, '__init__.py'), 'w') as fh: fh.write(deep_init_base) fh.flush()
dt_obj = salt.utils.date_cast(newtime)
if self.credit_type[0] not in graders: raise LoncapaProblemError('partial_credit attribute should be one of: ' + ','.join(graders))
UUIDGrandchild().save()
else: local = salt.client.LocalClient() ret = local.cmd('{0}'.format(target), cmd, args, kwargs)
return '', 'Password authentication failed', 254
td = TimedeltaIndex(td)
self.X_topo_space = self.view_converter.topo_space assert not contains_nan(self.X)
y[::5] += 3 * (0.5 - np.random.rand(8))
help_text=_( u"Badge images must be square PNG files. The file size should be under 250KB." ), upload_to='course_complete_badges', validators=[validate_badge_image]
from salt.modules import mysql
from salt.modules import rdp
if self.presort == 'auto' and issparse(X): presort = False elif self.presort == 'auto': presort = True
result = f.clean('13:30') self.assertEqual(result, time(13, 30, 0))
self.now = datetime.datetime.now()
solve_triangular_args = {'check_finite': False}
coords = x
class CourseModeFactory(DjangoModelFactory): class Meta(object): model = CourseMode
if msg:
self.assertRaises(ValueError, DataFrame.from_records, df, index=[2]) self.assertRaises(KeyError, DataFrame.from_records, df, index=2)
from salt.states import incron
return host, ''
if 'host' not in payload: payload.update({"host": self.host})
for pool_size in [1, 2, 5]: n = num_pools * pool_size
asset_key = asset_metadata_list[0].asset_id course_key = asset_key.course_key
plt.figure(figsize=(10, 6)) plt.subplots_adjust(left=0.02, right=0.98)
Ensure mysecgroup exists: boto_secgroup.present: - name: mysecgroup - description: My security group - profile: myprofile
return y, None
socket = context.socket(zmq.PUB) socket.setsockopt(zmq.LINGER, 100) socket.bind('ipc://' + self.timer_sock)
n_targets = 2 X, y = X_diabetes, y_diabetes y_n = np.tile(y, (n_targets, 1)).T
MSE[MSE < 0.] = 0.
with connection.schema_editor() as editor: editor.remove_field(LocalAuthorWithM2M, new_field) with self.assertRaises(DatabaseError): self.column_classes(new_field.remote_field.through)
response = self.client.post(self.send_mail_url, test_email) self.assertEquals(json.loads(response.content), self.success_content)
import re from datetime import datetime
__context__['cmd.run_chroot.func'] = __salt__['cmd.run'] ret = __salt__['cmd.run_chroot'](rootfs, cmd, stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, ignore_retcode=ignore_retcode)
'engines': list,
try: next_child = current.children.next()
problem = new_loncapa_problem(xml_str, capa_system=self.capa_system)
df = DataFrame([arr, s1]).T expected = DataFrame({1: s1, 0: arr}, columns=[0, 1]) tm.assert_frame_equal(df, expected)
signing_key = _sig_key( secret_access_key, datestamp, location, product )
self.assertTrue(self.video.is_aligned(False))
keep_lambda = np.ones(n_features, dtype=bool)
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, done=True) self.assertFalse(module.should_show_save_button())
for alias, conn in self.connections_override.items(): connections[alias] = conn
width = self.ext.config['youtube_width'][0] height = self.ext.config['youtube_height'][0] return flash_object(url, width, height)
timezone.__salt__ = {} timezone.__opts__ = {}
if self._load_module(name) and key in self._dict: return True
from salt.modules import parallels from salt.exceptions import SaltInvocationError
params = self._signed_callback_params( self.order.id, self.COST, self.COST, card_number='nodigits' ) result = process_postpay_callback(params)
grade_status = CreditRequirementStatus.objects.get( username=self.USER_INFO['username'], requirement__namespace="grade", requirement__name="grade" ) grade_status.reason = {} grade_status.save()
self.thread_page_2.check_focus_is_set(selector=".discussion-article")
self._initialize_mixed(mappings={})
if not has_course_author_access(request.user, item.location.course_key): raise PermissionDenied()
if 'chapters' in textbook: for entry in textbook['chapters']: entry['url'] = remap_static_url(entry['url'], course)
context = test_view.get_context_data() self.assertEqual(context['object_list'], test_view.queryset)
model = BetterWriter fields = '__all__'
print('=' * 80) print("Elastic-Net penalty") results.append(benchmark(SGDClassifier(alpha=.0001, n_iter=50, penalty="elasticnet")))
import salt.ext.six as six try:
FEATURES['AUTOMATIC_AUTH_FOR_TESTING'] = True
class UserRegistration(Form): username = CharField(max_length=10, label='') password = CharField(widget=PasswordInput)
saltenv = env
self.assertEqual(grouped.groups[k], e)
TreeClassifier = CLF_TREES[name] _y = np.vstack((y, np.array(y) * 2)).T
return start(name)
pixeltype = GDAL_TO_POSTGIS[band.datatype()]
from salt import utils
start_time = time.time() timeout_in_seconds = timeout / 1000 max_time = start_time + timeout_in_seconds
assert_equal(sample_without_replacement(0, 0).shape, (0, ))
regex = re.compile('^' + answer + '$', flags=flags | re.UNICODE) return re.search(regex, given)
return self[key]
_skip_if_no_xlrd()
logger.error("'{0}' not found " "but mandatory".format(this_check)) return False
def __init__(self, course_descriptor): self.graders = [ CourseGradingModel.jsonize_grader(i, grader) for i, grader in enumerate(course_descriptor.raw_grader)
__func_alias__ = { 'list_': 'list' }
self.q(css="select#allowance_type").present or self.q(css="label#timed_exam_allowance_type").present
for j in range(n_components): w = w_init[j, :].copy() w /= np.sqrt((w ** 2).sum())
NEVER = lambda x: False ALWAYS = lambda x: True
from salt.modules import nova
self.assertQuerysetEqual( self.cia.members.all(), [] )
if data_gen_f is None: data_gen_f = lambda r, c: "R%dC%d" % (r, c)
if GeoIP_delete is None: return if self._country: GeoIP_delete(self._country) if self._city: GeoIP_delete(self._city)
res1l, res1r = df1.align(df2, join='left') res2l, res2r = df2.align(df1, join='right')
if terminal_converter is None: return node else: return terminal_converter(node)
self.series[5:15] = np.NaN
if self._match_pattern(handlers_list): return else: self.send_response(404, content="404 Not Found")
_upload_file(self.srt_file, self.item_descriptor.location, uk_translation_filename)
rng = np.random.RandomState(42) X = rng.randint(20, size=(4, 5))
old_center_buffer = np.zeros(0, np.double)
([TestTransformer1(), TestTransformer2()], []),
if len(args) == 1: coords = args[0] else: coords = args
assert layer_name is None
with assert_raises(ValueError): course = self.process_xml(CourseFactory.build(policy={'days_early_for_beta': 'null'}))
resp = self.client.post( '/shoppingcart/payment_fake', dict(post_params) )
for mode in test_modes: key = 'Mode: {0}'.format(mode)
self.n_nonzero_coefs_ = max(int(0.1 * n_features), 1)
finger += '{0}:'.format(pre[ind])
continue
pnt.y = 3.14 pnt.x = 2.71 self.assertEqual(3.14, pnt.y) self.assertEqual(2.71, pnt.x)
if [ -z '$debian_chroot' ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
with self._lock: if self.ready: return
optional = [ 'InstanceName', 'InternetChargeType', 'InternetMaxBandwidthIn', 'InternetMaxBandwidthOut', 'HostName', 'Password', 'SystemDisk.Category', ]
result = ser.copy() result[index[1]] = 5 expected = pd.Series([0, 5], index=index) assert_series_equal(result, expected)
sliced = self.frame.ix[:, -2:] expected = self.frame.reindex(columns=self.frame.columns[-2:]) tm.assert_sp_frame_equal(sliced, expected)
for saltenv, targets in six.iteritems(top): sorted_targets = sorted(targets, key=lambda target: orders[saltenv][target]) for target in sorted_targets: sorted_top[saltenv][target] = targets[target] return sorted_top
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
interface = interface.split('\\') interface = ''.join(interface)
html_favicon = 'logos/favicon.ico'
self.assertEqual(own_metadata(course1_item), own_metadata(course2_item))
ret = self.run_function( 'state.template_str', [template], timeout=120 )
return False
countdown = ((2 ** retry_index) * base_delay) * random.uniform(.75, 1.25)
from __future__ import unicode_literals
for dtype in ['M8[ns]', 'm8[ns]']: self.assertRaises(TypeError, lambda: i.astype(dtype))
break
if created: self._ddog_increment(evt_time, 'set_many.state_created') else: self._ddog_increment(evt_time, 'set_many.state_updated')
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
from __future__ import absolute_import import logging import os
import salt.utils from salt.exceptions import CommandExecutionError
cumprod = self.tsframe.cumprod(axis=1) expected = self.tsframe.apply(Series.cumprod, axis=1) tm.assert_frame_equal(cumprod, expected)
self.session.set_expiry(0) self.assertEqual(self.session.get_expiry_age(), settings.SESSION_COOKIE_AGE)
no_courses = get_courses(user, org=primary) self.assertEqual(no_courses, [])
@property def buffered(self): return self.__buffered
message = self.serial.dumps(message)
course = self.store.get_course(course.id)
s = s_orig.copy() s2 = s s += 1.5 assert_series_equal(s, s2) assert_series_equal(s_orig + 1.5, s)
error_response(response, "Can't find transcripts in storage for {}".format(old_name))
assert_raises(ValueError, sel.inverse_transform, np.array([[1], [2]]))
send_user_notification = Signal(providing_args=["user", "state"])
dummy = 'void'
n_samples = 100 n_features = 500 rank = 5 k = 10
try: import salt.utils.etcd_util HAS_LIBS = True except ImportError: HAS_LIBS = False
return name in _get_svc_list(name, 'ENABLED')
ransac_estimator.fit(X, y)
if not isinstance(config, dict): return False, ('Configuration for memusage ' 'beacon must be a dictionary.') return True, 'Valid beacon configuration'
ind2 = self.index.set_labels(new_labels, level=[0, 1]) assert_matching(ind2.labels, new_labels) assert_matching(self.index.labels, labels)
exit=False)
child_descriptor = self.descriptor.get_child(usage_id) child_block = None if child_descriptor is not None: child_block = self.system.get_module(child_descriptor)
num_certs = GeneratedCertificate.eligible_certificates.filter(user=self.student).count() self.assertEqual(num_certs, 1)
expected = expected.astype('M8[ns]').astype('int64') self.assertEqual(result.value, expected)
if 'defaults' in opts and __grains__['os'] in ['MacOS', 'Darwin']: opts = None
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
CourseModeFactory.create( course_id=self.course_key, mode_display_name="Honor No Expiration", mode_slug="honor_no_expiration", expiration_datetime=None )
is_a_tty = hasattr(sys.stdout, 'isatty') and sys.stdout.isatty() if not supported_platform or not is_a_tty: return False return True
labels, new_inertia = _labels_inertia( X_mb, x_mb_squared_norms, new_centers) assert_greater(new_inertia, 0.0) assert_less(new_inertia, old_inertia)
actual_items = source_store.get_items(dest_course_id, revision=ModuleStoreEnum.RevisionOption.published_only) chapter_is_found = False
response = self.client.get(reverse('verify_student_create_order'), create_order_post_data) self.assertEqual(response.status_code, 405)
self.assertSetEqual(set(apps._pending_operations) - initial_pending, {('apps', 'lazyc')})
self._forward_pass(activations, with_output_activation=False) y_pred = activations[-1]
text = f.widget.format_value(result) self.assertEqual(text, "13:30:05")
try: float(tokens[i]) return None except ValueError: pass
OverrideFieldData.provider_classes = None
if 'mirrorlist' in repo_opts: todelete.append('baseurl') elif 'baseurl' in repo_opts: todelete.append('mirrorlist')
cache[cache.keys()[0]] = ("Hey there!", {})
import salt.utils
self.assertNotContains(response, '<h2>Author-book relationships</h2>') self.assertNotContains(response, 'Add another Author-Book Relationship') self.assertNotContains(response, 'id="id_Author_books-TOTAL_FORMS"')
import logging
from salt.utils.filebuffer import BufferedReader, InvalidFileMode
response_content = {'test_response': 'test_content'} self.server.config['This is only a test.'] = response_content
assert all(called)
self.assertEqual(len(mail.outbox), 0)
#add_function_parentheses = True
for freq in ['Y', 'M', 'foobar']: self.assertRaises(ValueError, lambda: t1.round(freq))
from_fields=['company', 'customer_id'], to_fields=['company', 'customer_id'],
response = self._get_page(payment_flow, course.id) self._assert_contribution_amount(response, "")
self.store.publish(item_location, self.user_id) item = self.store.get_item(item_location) self.assertTrue(self.store.has_published_version(item))
return _save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=task_definition.Principal.UserID, password=None, logon_type=task_definition.Principal.LogonType)
html_theme = 'scikit-learn'
with ensure_clean_store(self.path) as store: df = tm.makeDataFrame()
assert sreq.send_auto({'load': 'foo'}) == {'load': 'foo', 'enc': 'clear'}
vsan_config = vim.vsan.host.ConfigInfo() vsan_config.enabled = True
self.make_course() url = self.make_url('html_book', book_index=0, chapter=1) response = self.client.get(url) self.assertEqual(response.status_code, 404)
repofile = repos[repo]['file'] header, filerepos = _parse_repo_file(repofile)
temp_dir = tempfile.mkdtemp(dir=TMP_JID_DIR)
intersphinx_mapping = {'http://docs.python.org/': None}
icon_class = None icon_image = None secondary = False
with salt.utils.fopen(requirements_file_path, 'w') as fhw: fhw.write('zope.interface==4.0.1\n')
from __future__ import absolute_import
self.frame.to_excel(path, 'test1') recons = read_excel(path, 'test1', index_col=0) tm.assert_frame_equal(self.frame, recons)
continue
self.panel4d['lQ'] = 'foo' self.assertEqual(self.panel4d['lQ'].values.dtype, np.object_)
((ax0_indexer is None and blk.mgr_locs.is_slice_like and blk.mgr_locs.as_slice.step == 1) or (np.diff(ax0_blk_indexer) == 1).all()))
'corsheaders', 'cors_csrf',
self.assertEqual(1, 1)
for iter_ in range(self.n_iter):
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
request = self.factory.get('////absolute-uri') self.assertEqual( request.build_absolute_uri(location='/foo/bar/'), 'http://testserver/foo/bar/' )
from __future__ import unicode_literals
from __future__ import unicode_literals
task_definition = task_folder.GetTask(name).Definition
if verification_deadline is not None and mode_slug not in CourseMode.VERIFIED_MODES: raise forms.ValidationError("Verification deadline can be set only for verified modes.")
from __future__ import unicode_literals
return VisibilityState.needs_attention
self.kwargs['os_auth_url'] = auth_url
if entry in finished: continue else: finished.append(entry)
try: user = c.Win32_UserAccount(Name=name)[0] except IndexError: raise CommandExecutionError('User \'{0}\' does not exist'.format(name))
import salt.ext.six as six
if kwargs.get('clean_file', False): salt.utils.fopen(kwargs['file'], 'w').close()
import salt.log.setup
log = logging.getLogger(__name__)
self.certificates_section.add_certificate_exception(self.user_name, '')
response = middleware.process_response(request, response)
source_suffix = '.rst'
class FakeGeom1(GEOSBase): pass
cleansed = value
copy_X = self.copy_X and self.fit_intercept
file_name = '{artifact_id}-{version}{classifier}.{packaging}'.format( artifact_id=artifact_id, version=version, packaging=packaging, classifier=__get_classifier_url(classifier))
if obj.pk is None: continue self.deleted_objects.append(obj) self.delete_existing(obj, commit=commit)
self.problem_section = ItemFactory.create(parent_location=chapter.location, category='sequential', metadata={'graded': True, 'format': 'Homework'}, display_name=TEST_SECTION_NAME)
self.assert_numpy_array_equal(result, expected, check_dtype=False)
serializer = None
#html_split_index = False
possible_params = selector._get_param_names() possible_params.remove('score_func') selector.set_params(**{possible_params[0]: self.param})
assert_almost_equal(metric(y1_1d, y2_list), measure, err_msg="%s is not representation invariant " "with mix np-array-1d and list" % name)
course_overview = CourseOverview.get_from_id(course.id)
nona = self.series.dropna() assert_almost_equal(f(nona), alternate(nona.values)) assert_almost_equal(f(self.series), alternate(nona.values))
#html_split_index = False
dot_update = (old_W * scal_points).sum(axis=0)
test_options.pop(0) if len(test_options) <= 1: break
date > /tmp/salt-run: cmd.run
self.selenium.get(self.live_server_url + reverse('admin:admin_widgets_member_add'))
ret[name]['config'] = get_vmconfig( ret[name]['vmid'], ret[name]['node'], ret[name]['type'] )
from __future__ import absolute_import import tempfile
spec = list_filter(request, lookup_params, self.model, self.model_admin)
self.create_programs_config() self.mock_programs_api(data={'results': []})
import salt.ext.six as six
FormSet = modelformset_factory(Price, fields="__all__", extra=1, max_num=1) formset = FormSet(data) self.assertTrue(formset.is_valid())
from __future__ import unicode_literals
row_one = OrderedDict() row_one['b'] = 2 row_one['a'] = 1
ps = precision_score(y_true, y_pred, pos_label=1, average='micro') assert_array_almost_equal(ps, 0.53, 2)
rerun_course_data = {'source_course_key': unicode(source_course_key)} if not destination_course_data: destination_course_data = self.destination_course_data rerun_course_data.update(destination_course_data) destination_course_key = _get_course_id(self.store, destination_course_data)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, call )
self._verify_cell_data_for_user(user_1, course.id, 'Cohort Name', '') self._verify_cell_data_for_user(user_2, course.id, 'Cohort Name', '')
admin_email_handler.filters = orig_filters
response = self.client.get(self.url) self.assert_tag_has_attr(response.content, "html", "lang", self.site_lang)
TRACKING_IGNORE_URL_PATTERNS = [r'^/event', r'^/login', r'^/heartbeat', r'^/segmentio/event', r'^/performance']
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if scheduled_actions: tmp = dictupdate.update(tmp, scheduled_actions) return tmp
self._verify_masquerade_for_all_groups()
setattr(instance, self.cache_name, value)
values = np.asarray(values) if copy: values = values.copy()
if '?#' in name and not unparsed_name[3]: unparsed_name[2] += '?' return urlunsplit(unparsed_name)
compressed = zlib.compress(data) if len(compressed) < (len(data) - 1): data = compressed is_compressed = True
hasher = RandomTreesEmbedding(n_estimators=30, random_state=1) assert_array_equal(hasher.fit(X).transform(X).toarray(), X_transformed.toarray())
plt.figure(2, figsize=(3, 2.2)) plt.imshow(face_compressed, cmap=plt.cm.gray, vmin=vmin, vmax=vmax)
import time
if not len(self.obj.columns): raise ValueError("cannot set a frame with no defined " "columns")
self.assertTrue( self.thread_page_1.check_threads_rendered_successfully(thread_count=self.thread_count) )
with salt.utils.fopen(target_cache_file, 'rb') as fp_: target_cache_data = salt.payload.Serial(__opts__).load(fp_) self.assertDictEqual(__context__, target_cache_data)
from salt.modules import mac_group from salt.exceptions import SaltInvocationError, CommandExecutionError
self.query.add_annotation( RawSQL(fmt % settings['procedure_args'], settings['select_params'], select_field), model_att) return self
FieldInfo = namedtuple('FieldInfo', 'name type_code display_size internal_size precision scale null_ok')
if name[0] >= '0' and name[0] <= '9': name = '_' + name
if force: SEMAPHORE_MAP[path].assured_path = True
if not all([com.is_integer(x) for x in [rstart, rstop, rstep]]): result = result.astype('float64')
if modules_max_memory is True: resource.setrlimit(resource.RLIMIT_AS, old_mem_limit)
with self.assertRaises(forms.ValidationError): f.clean('1:30:05 PM 21/12/2010')
from salt.modules import glusterfs from salt.exceptions import SaltInvocationError
self.assertTrue(cohorts.is_course_cohorted(self.course.id))
def f(): df.loc[df.new_col == 'new', 'time'] = v
self.user.is_active = False self.user.save()
clf = clone(model) clf = model.fit(X, y)
current_commit_id = get_commit_id(def_ms.courses[reload_dir]) log.debug('commit_id="%s"', commit_id) log.debug('current_commit_id="%s"', current_commit_id)
with self.store.default_store(ModuleStoreEnum.Type.split): resp = self.client.get_html('/c4x/InvalidOrg/InvalidCourse/asset/invalid.png') self.assertEqual(resp.status_code, 404)
try: category = json_data['location']['category'] class_ = self.load_block_type(category)
try: self.minion = salt.minion.SMinion(opts) except SaltClientError as exc: raise SystemExit(str(exc))
lkey, rkey = _get_join_keys(llab, rlab, shape, sort)
return {'default_impl': True}
if self.min_weight_fraction_leaf != 0. and sample_weight is not None: min_weight_leaf = (self.min_weight_fraction_leaf * np.sum(sample_weight)) else: min_weight_leaf = 0.
ref_kml_regex = re.compile(r'^<Point><coordinates>-95.363\d+,29.763\d+,18</coordinates></Point>$') self.assertTrue(ref_kml_regex.match(h.kml))
dis_flat_w = dis_flat[sim_flat != 0]
self.reset_tracker()
self.assertTrue(is_dtype_equal(np.dtype("M8[ns]"), "datetime64[ns]"))
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
extval = kwargs.get(extname) or kwargs.get(extlongname) or \ csrexts.get(extname) or csrexts.get(extlongname)
module = CapaFactory.create(rerandomize=RANDOMIZATION.NEVER, max_attempts=2, done=True) self.assertTrue(module.should_show_save_button())
from __future__ import unicode_literals
assert_raises(ValueError, neighbors.NearestNeighbors, algorithm='blah')
default_response = None
filenames = ['', 'C:\\Windows\\']
from __future__ import absolute_import import collections import logging import socket import struct import time from contextlib import contextmanager
sparse_results = sparse_classifier.predict_log_proba(X_test_sparse) dense_results = dense_classifier.predict_log_proba(X_test) assert_array_equal(sparse_results, dense_results)
self.install_collection = win32com.client.Dispatch('Microsoft.Update.UpdateColl')
task_definition = task_service.NewTask(0)
ax = df.plot.barh(stacked=True, width=width) for r in ax.patches: self.assertEqual(r.get_height(), width)
panel4dc = self.panel4d.copy() p = panel4dc.iloc[0]
if course_org_filter: org_filter_out_set.remove(course_org_filter)
from __future__ import unicode_literals
protocol_str = '0'
if item not in ['constraint']: cmd += [item_id] if isinstance(item_type, six.string_types): cmd += [item_type]
try: from mpl_toolkits.basemap import Basemap basemap = True except ImportError: basemap = False
tfp.add(base, arcname=os.path.join('py{0}'.format(py_ver), base)) continue
continue
offset = QuarterBegin(n=-1, startingMonth=1) self.assertEqual(datetime(2010, 2, 1) + offset, datetime(2010, 1, 1))
from salt.ext import six from salt.ext.six.moves import zip
ForestClassifier = FOREST_CLASSIFIERS[name] _y = np.vstack((y, np.array(y) * 2)).T
jid_dir, jid_file = self._make_tmp_jid_dirs()
self.cache.set(key, compressed_pickled_data, None)
field_notes.append("Field renamed because it contained more than one '_' in a row.")
i = 200 while i > 0: module = CapaFactory.create(rerandomize=rerandomize) assert 0 <= module.seed < 1000 i -= 1
self.assertCourseSummaryFields(course_summaries)
providers = salt.loader.log_handlers(opts)
except Exception as err: logger.debug('Error! Ending server side websocket connection. Reason = {0}'.format(str(err))) break
#html_copy_source = True
from __future__ import absolute_import
rows_broadcastable = False cols_broadcastable = False
if not verify_assets: if other_langs: translations = list(other_langs) if not translations or sub: translations += ['en'] return translations
if line_stripped.startswith('@'): output.extend([line]) if 'savefig' in line:
if pkg[0].find("/") > 0: origin = pkg[0] pkg = [k for k, v in old.iteritems() if v['origin'] == origin][0]
with closing(uploaded_file):
result = df.xs(('a', 4), level=['one', 'four'])
from __future__ import absolute_import
for chunk in iter(lambda: ifile.read(chunk_size), b''): hash_obj.update(chunk) return hash_obj.hexdigest()
actual = grouped_ser.filter(lambda x: len(x) > 1) expected = ser.take(expected_indexes) assert_series_equal(actual, expected)
pillar_roots = [pillar_dir] pillar_roots.extend([x for x in all_dirs if x != pillar_dir]) opts['pillar_roots'] = {env: pillar_roots}
expected_classes = ['Abdelatif Smith', 'Abhati Kepler', 'Onur Lopez'] assert_array_equal(lfw_people.target_names, expected_classes)
resp = self.create_xblock(parent_usage_key=self.usage_key, category='chapter') self.chapter_usage_key = self.response_usage_key(resp)
yyy = np.column_stack([y, y, y])
ssh_args.extend(['-t', '-t'])
assert_array_equal(clf.predict([[0.2, -1.0]]), np.array([-1]))
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.todo', 'numpydoc', 'sphinx.ext.autosummary'] #, 'ext']
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
__virtualname__ = 'sysrc'
except KeyError: self.send_error(400) return
import os.path import re
self.assertEqual(jid_file, None)
if m_p > m_n: u = x_p / x_p_nrm v = y_p / y_p_nrm sigma = m_p else: u = x_n / x_n_nrm v = y_n / y_n_nrm sigma = m_n
urlset = doc.firstChild self.assertEqual(urlset.getAttribute('xmlns'), 'http://www.sitemaps.org/schemas/sitemap/0.9')
SKIP_STEPS = [ INTRO_STEP, ]
self.update_structure(parent_usage_key.course_key, new_structure)
VS = VectorSpace(dim=27) VS_sparse = VectorSpace(dim=27, sparse=True)
pairwise = True if pairwise is None else pairwise
return np.array([self._frames[item].values for item in self.items])
assert_equal(X.format, X_checked.format)
args = [name, '--id', snap_name]
t2 = TfidfTransformer(norm='l1', use_idf=False) tf = t2.fit(counts_train).transform(counts_train).toarray() assert_equal(t2.idf_, None)
from tempfile import NamedTemporaryFile import logging import os
self.assertFalse(_df[column].equals(df[column]))
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, Mock, MagicMock, patch
many_to_many = False many_to_one = False one_to_many = False one_to_one = True
env_path = os.environ.get(env_var, path) if not env_path or not os.path.isfile(env_path): env_path = path if path != default_path: env_path = path
'startup_states': str,
for parent in cls._meta.get_parent_list(): for f in parent._meta.get_fields(): if f not in used_fields: used_fields[f.name] = f
disable_left_right = (is_blank(grid_indices) and not (grid_dimension[0] in (0, 5)))
process_info = CreateProcessWithLogonW(username=username, domain=domain, password=password, logonflags=LOGON_WITH_PROFILE, commandline=cmd, startupinfo=startup_info, currentdirectory=cwd)
json.dumps(assets._get_asset_json( "sample_static.txt", content_type, upload_date, asset_location, None, lock)), "application/json"
from __future__ import absolute_import
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, show_reset_button=False, done=True) self.assertTrue(module.should_show_reset_button())
title = ugettext_noop('Discussion') priority = None is_default = False
'external_auth', 'django_openid_auth',
salt '*' win_wua.list_updates summary=True
continue
active_attempts = cls.objects.filter(user=user, status='ready').order_by('-created_at') if active_attempts: return active_attempts[0] else: return None
train, test = set(train), set(test)
TEST_ROOT = REPO_ROOT / "test_root" LOG_DIR = (TEST_ROOT / "log").abspath()
if val < 61: raise ValueError("Value is outside of acceptable range: %s " % val)
self.assertEqual(len(mail.outbox), 1) self.assertEqual( mail.outbox[0].subject, 'You are eligible for credit from Hogwarts School of Witchcraft and Wizardry' )
with self.assertNumQueries(1): self.field_data_cache = FieldDataCache( [mock_descriptor([mock_field(Scope.user_state, 'a_field')])], course_id, self.user )
from __future__ import absolute_import import json import logging
stdout = json.loads(result['stdout']) return stdout != {}
chapters = courses2[0].get_children() self.assertEquals(2, len(chapters)) self.assertIn(new_chapter_display_name, [item.display_name for item in chapters])
__virtualname__ = 'pkgutil'
if problem_url: usage_key = course_id.make_usage_key_from_deprecated_string(problem_url) usage_keys.append(usage_key)
self.store.publish(self.vertical.location, self.user.id) draft_container = self.store.get_item(draft_container.location) test_container_html(draft_container)
return ret
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.check_problem(get_request_dict)
tuple_index = long_index._tuple_index
providers_config = opts['providers']
import salt.utils import salt.crypt
self.r2.article_set.set([self.a2, self.a3])
return True
exceptions = set()
course_id = CourseKeyField(max_length=255, db_index=True)
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
import logging import sys
response = requests.post(self.url, data={"test_param": None}) self.assertEqual(response.status_code, 400)
self.assertIn('<button class="{} inactive progress-0 nav-item"'.format(self.ICON_CLASSES[user_tag]), content) for tooltip in self.TOOLTIPS[user_tag]: self.assertIn(tooltip, content)
response = self._add_edx4edx() self.assertRegexpMatches(response.content, table_re)
from __future__ import unicode_literals
mlp._coef_grads = [0] * (mlp.n_layers_ - 1) mlp._intercept_grads = [0] * (mlp.n_layers_ - 1)
config = CourseOverviewImageConfig.current() course_overview = CourseOverview.get_from_id(course.id) image_urls = course_overview.image_urls
"article_set-TOTAL_FORMS": "3", "article_set-INITIAL_FORMS": "0", "article_set-MAX_NUM_FORMS": "0",
DEFAULT_CONTENT_TYPE = 'text/html' DEFAULT_CHARSET = 'utf-8'
CUR_MONTH = dt.datetime.now().month CUR_YEAR = dt.datetime.now().year CUR_DAY = dt.datetime.now().day
resp = self.client.get_json(url) course_detail_json = json.loads(resp.content) self.assertEqual(pre_requisite_course_keys, course_detail_json['pre_requisite_courses'])
rs = mi_labels.loc[:, 'j'] xp = mi_labels.ix[:, 'j'] assert_frame_equal(rs, xp)
from __future__ import absolute_import import os import shutil
_response = _request("GET", options['url'] + options['db'] + "/_design/salt/_view/minions?group=true")
Book.authors.through.objects.using('default').delete()
if not any( (salt.utils.compare_versions(ver1=x, oper='>=', ver2=candidate, cmp_func=version_cmp) for x in installed) ): ret[name] = candidate
replacement_r = R.objects.create()
for field_name in remove_fields: self.fields.pop(field_name)
if len(state) == 2: nd_state, own_state = state data = np.empty(nd_state[1], dtype=nd_state[2]) np.ndarray.__setstate__(data, nd_state)
train_data = iter(ALL_FOOD_DOCS[:-1]) test_data = [ALL_FOOD_DOCS[-1]] n_train = len(ALL_FOOD_DOCS) - 1
if not arglist and not parse_argv: arglist = [] (options, args) = parser.parse_args(arglist) options.reporter = None
update_wrapper(_wrapper, func)
response = JsonResponse(payment_data)
launch_mcd_on_dataset(500, 1, 100, 0.001, 0.001, 350)
import os import logging from salt.ext.six import string_types import salt.ext.six as six from salt.ext.six.moves import zip
from .article import Article from .publication import Publication
article = Article.objects.annotate( headline=Coalesce(Lower('summary'), Lower('text'), output_field=TextField()), )
from __future__ import absolute_import import json import logging import pprint import time
self.assert_enrollment_activation(False, CourseMode.VERIFIED)
if op == 'shift': gb._set_selection_from_grouper()
for ax in axes[-1].ravel(): self._check_visible(ax.get_xticklabels(), visible=True)
from __future__ import absolute_import, print_function import base64 import copy import getpass import json import logging import multiprocessing import subprocess import hashlib import tarfile import os import re import sys import time import yaml import uuid import tempfile import binascii import sys
self._add_simple_content_block() with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
for enrollment in manual_enrollments: self.assertEqual(enrollment.enrollment.mode, CourseMode.DEFAULT_SHOPPINGCART_MODE_SLUG)
opts = m._meta if opts.proxy and m in related_fields_models: related_models.append(opts.concrete_model) return related_models
from __future__ import absolute_import import copy import logging import re
selected_choices.remove(option_value)
('saml_key', 'MIICsDCCAhmgAw'), ('saml_key_alt', 'MIICWDCCAcGgAw'),
import salt.utils import salt.ext.six as six
self.assertTrue(mock_audit_log.called)
import salt.fileserver import salt.utils import salt.syspaths
link_tgt = self.repo[tree[path].oid].data path = os.path.normpath( os.path.join(os.path.dirname(path), link_tgt) )
self.writable_chapter_location = self.store = self.fake_location = None self.course_locations = {}
response = requests.put(self.url, data={'test_unicode': u'\u2603 the snowman'}) self.assertEqual(response.status_code, 400)
from __future__ import absolute_import
self._set_deadlines(course.id, upgrade_deadline=deadline, verification_deadline=deadline)
pueblo = City.objects.get(name='Pueblo') state = State.objects.filter(poly__contains=pueblo.point) cities_within_state = City.objects.filter(id__in=state)
df = orig.copy() df.iloc[2:4, 0] = ["b", "b"] tm.assert_frame_equal(df, exp_parts_cats_col)
ip_blacklist_url = reverse( 'embargo_blocked_message', kwargs={ 'access_point': 'courseware', 'message_key': 'embargo' } ) return redirect(ip_blacklist_url)
from __future__ import absolute_import
self.assertGreater(len(block.children), 0, "meaningless test") moved_child = block.children.pop()
self.set_group_access(self.chapter_location, {self.animal_partition.id: [self.dog_group.id]}) self.check_access(self.red_cat, self.vertical_location, False)
try: set_defaults() except Exception as e: logger.exception(e)
e = np.zeros((n_samples, convergence_iter))
self.template_name = template self.context_data = context
self._validate_estimator()
metadata = None try: if os.path.getmtime(cache_file) > exp: metadata = _read_buckets_cache_file(cache_file) except OSError: pass
y_pred = clf.classes_.take(y_proba.argmax(axis=1), axis=0) assert_array_equal(y_pred, true_result)
if ret['result']:
httpretty.enable()
rval = -(self.beta * T.dot(state, self.ising_bias()))
return services[name]
child_pids = p1_group.get_children(recursive=True)
offset1 = self._offset() offset2 = self._offset() self.assertFalse(offset1 != offset2)
self._check_ax_scales(ax, yaxis='log')
epsilon = lr_scalers.get(param, 1.) * learning_rate scale = T.maximum(self.eps, T.sqrt(new_sum_squared_grad)) delta_x_t = (-epsilon / scale * grads[param])
if self.symmetrical: self._add_items(self.target_field_name, self.source_field_name, *objs)
size = int(np.round((1 - density) * nrows * ncols)) min_rows = 5 fac = 1.02 extra_size = min(size + min_rows, fac * size)
warnings.extend(get_warning_for_invalid_pattern(pattern))
CourseEnrollmentFactory.create(user=self.user, course_id=self.course.id, is_active=True)
i = 2 f = 1.5
self.rm_lib() self.loader.clear() self.assertNotIn(self.module_key, self.loader)
if index.is_unique: new_indexer = index.get_indexer([new_index[-1]]) if (new_indexer != -1).any(): return self._setitem_with_indexer(new_indexer, value)
from salt.utils.rsax931 import RSAX931Signer, RSAX931Verifier
self.lcp.ungraded_response(score_msg, queuekey) self.set_state_from_lcp() return dict()
from salt.states import boto_route53
from lms.envs.dev import (WIKI_ENABLED)
frame_iteritems = Benchmark('f()', setup, start_date=datetime(2010, 6, 1))
with self.assertRaises(ValueError): dive.editor = marty
csv_rows = [row for row in unicodecsv.DictReader(csv_file)]
exc_info_on_loglevel=logging.DEBUG
spmatrix = spmatrix.asformat(accept_sparse[0]) changed_format = True
tsframe = self.tsframe old_index = tsframe.index new_index = [old_index, np.arange(len(old_index))] tsframe.index = MultiIndex.from_arrays(new_index)
return
len_m1 = 473504.769553813 len_m2 = 4617.668
clf = svm.NuSVC() clf.fit(X, Y)
PREPEND_WWW = False
chunk = self._read_limited(size - len(self.buffer))
return False
X_non_outliers = -axis0_safe_slice(X, ~outliers_mask, n_non_outliers) grad[:n_features] = ( 2. / sigma * safe_sparse_dot(weighted_non_outliers, X_non_outliers))
'ENABLE_FOOTER_MOBILE_APP_LINKS': False,
Timestamp(min_ts_us) Timestamp(max_ts_us)
return thread_local_default_store
grouped = self.df.groupby('A')
LOGGING_TEMP_HANDLER = StreamHandler(sys.stderr)
task_folder = task_service.GetFolder(location)
with self.assertRaises(forms.ValidationError): f.clean('2010-12-21')
opts = ''.join([opt for opt in opts if opt in 'AfIMq']) targets = pkg_params
remove_master_course_staff_from_ccx( self.course, self.ccx_locator, self.ccx.display_name, send_email=True ) self.assertEqual(len(outbox), len(list_staff_master_course) + len(list_instructor_master_course))
try: x = np.array(x, dtype=self.dtype) except TypeError: x = np.array(x, dtype='datetime64[ns]')
import salt.utils
if response and not (200 <= response.status_code < 300): if_none_match = None if_match = None
from __future__ import unicode_literals
LONG_VERSION_PY = {} HANDLERS = {}
'INDIVIDUAL_DUE_DATES': False,
if self.ndim == 1: index = self.obj.index new_index = index.insert(len(index), indexer)
region_str = "[ [1,1], [5,10], [0,10] ]"
init_bias = \ init_sigmoid_bias_from_array(bias_from_marginals.X / 2. + 0.5)
if service_name == 'SSH' or service_name == 'ssh': temp_service_name = 'TSM-SSH' else: temp_service_name = service_name
self.assertFalse(module_has_submodule(test_module, 'no_such_module')) with self.assertRaises(ImportError): import_module('utils_tests.test_module.no_such_module')
return HttpResponseBadRequest('Requested page must be numeric')
server.ping()
return services[name]
cache.clear()
actual = grouped_ser.filter(lambda x: len(x) > 1) expected = ser.take(expected_indexes) assert_series_equal(actual, expected)
username = User.objects.get(email='staffmember@example.com').username self.assertContains(response, "Hello, %s." % username)
if isinstance(axis, (tuple, list)) and len(axis) == 2: return self._apply_2d(f, axis=axis)
the_html2 = problem.get_html() self.assertEquals(the_html, the_html2)
from __future__ import absolute_import
import integration import salt.utils
pow_term = atom + ZeroOrMore("^" + atom) pow_term = Group(pow_term)("power")
s_1 = .5 * a.T.dot(C).dot(a) - .5 * R.T.ravel().dot(C.ravel())
self.mc_setup_response()
options['no_color'] = True return super(Command, self).execute(*args, **options)
self.service.set_credit_requirement_status( self.user.id, no_credit_course.id, 'grade', 'grade' )
class OFTIntegerList(Field): pass
ir = IsotonicRegression(increasing='auto', out_of_bounds="raise")
layout = device.get_result()
admin = AdminFactory.create()
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
return ret
from openedx.core.djangoapps.credit.api.eligibility import ( is_credit_course, remove_credit_requirement_status as api_remove_credit_requirement_status )
return True
num_labels_by_type = numpy.array(norb.SmallNORB.num_labels_by_type, 'int') num_labels_by_type[instance_index] = len(new_to_old_instance)
course_outline_page.q(css='.outline-item.outline-subsection.is-collapsed .ui-toggle-expansion').first.click()
sequential.display_name = 'sequential1' sequential = self.store.update_item(sequential, self.user_id) self.assertTrue(self.store.has_published_version(sequential))
to_process = [] if children: to_process = self._query_children_for_cache_children(course_key, children)
precisions_not_pos = np.ones((n_components, n_features, n_features)) precisions_not_pos[0] = np.eye(n_features) precisions_not_pos[0, 0, 0] = -1.
salt '*' win_update.install_updates
for X in [X_1row, X_1col, X_list_1row, X_list_1row]:
from salt.modules import swift
decorators = (myattr_dec_m, myattr2_dec_m)
log = logging.getLogger(__name__)
if "the 'axes' parameter is not supported" in msg: msg += " for {klass} instances".format(klass=klass)
from django.conf import settings from django.contrib.auth.models import User from django.db import models, migrations
from __future__ import absolute_import import logging
from __future__ import division, absolute_import, print_function
if hasattr(path_or_buf, 'read') and compat.callable(path_or_buf.read): return read(path_or_buf)
world.browser.execute_script("jQuery.fx.off = true;")
arrays = _homogenize(arrays, index, dtype)
for state in __salt__['state.show_lowstate'](): if 'state' not in state: continue
tm.assertIsInstance(result, PeriodIndex)
if isinstance(grouper, (Series, Index)) and name is None: self.name = grouper.name
integer = _if_str_then_list(integer) checks[int] = integer string = _if_str_then_list(string) checks[str] = string listing = _if_str_then_list(listing) checks[list] = listing dictionary = _if_str_then_list(dictionary) checks[dict] = dictionary
transformers = BlockStructureTransformers() if user is not None: transformers += COURSE_BLOCK_ACCESS_TRANSFORMERS + [ProctoredExamTransformer()] transformers += [ BlocksAPITransformer( block_counts, student_view_data, depth, nav_depth ) ]
monitoring_dataset = DenseDesignMatrix(X=X)
from __future__ import absolute_import
return self.system.render_template('module-error.html', { 'staff_access': True, 'data': self.contents, 'error': self.error_msg, })
func_globals.update(overrides)
return Fragment(content=u"<div>Nothing to randomize between</div>")
self.assertEqual(source.ds, ds.name)
self.fill_color, self.fill_opacity = fill_color, fill_opacity
import os import sys import logging
if not GlobalStaff().has_user(request.user): raise PermissionDenied()
skf = StratifiedKFold(n_folds=4) train_index, test_index = next(iter(skf.split(iris.data, iris.target)))
from __future__ import absolute_import import textwrap
allow_multiple = False
super(FlatpageFallbackMiddleware, self).__init__(get_response)
self.update_masquerade(role='student', user_name=self.student_user.username) content = self.get_course_info_page().content self.assertIn("OOGIE BLOOGIE", content)
os.remove(filename)
for field in opts.fields: if field.remote_field and field.remote_field.model != self.parent_model: opts = field.remote_field.model._meta break
CONFIG_PREFIX = SERVICE_VARIANT + "." if SERVICE_VARIANT else ""
self.socket.close()
if opts.all_categories: categories = None else: categories = [ 'alt.atheism', 'talk.religion.misc', 'comp.graphics', 'sci.space', ]
css_classes.append('xmodule_display')
'string_max_length': get_config_value('string_max_length'),
return super(ConfigurationModelStrategy, self).setting(name, default, backend)
with check_mongo_calls(max_find, max_send): self.store.unpublish(self.vertical_x1a, self.user_id)
for certificate in certificates: is_active = certificate.get('is_active', False) break
assert_raises(ValueError, _fast_dot, A, A[0])
self.assertIn(str('Child Subject'), parent_s)
if not found: return False
required_boto3_version = '1.2.1'
@property def srid(self): return bool(ord(wkb_writer_get_include_srid(self.ptr)))
import salt.utils import salt.ext.six as six from salt.exceptions import CommandExecutionError
if k.start == 0 and k.stop == len(self): k = slice(None, None)
app_config = apps.get_containing_app_config(module)
last = row[0] for i in range(1, len(row)): if row[i] == '' or row[i] is None: row[i] = last else: last = row[i] return row
with self.assertRaises(ResponseError): submission_dict = {'test': 'test'} input_dict = {'1_2_1': json.dumps(submission_dict)} problem.grade_answers(input_dict)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath
parents = block_structure.get_parents(block_key)
self.notes_page.go_to_page(2) self._verify_pagination_info( notes_count_on_current_page=1, header_text='Showing 26-26 out of 26 total', previous_button_enabled=True, next_button_enabled=False, current_page_number=2, total_pages=2 )
GITHUB_REPO_ROOT = ENV_TOKENS.get('GITHUB_REPO_ROOT', GITHUB_REPO_ROOT)
cases = [0.5, 'xxx'] methods = [idx.intersection, idx.union, idx.difference, idx.symmetric_difference]
import matplotlib.pyplot as plt plt.figure()
from distutils.core import setup, Command _have_setuptools = False
Timestamp(Timestamp.max)
from __future__ import absolute_import
from salttesting.case import TestCase
list_maintenance_windows = salt.utils.alias_function(list_windows, 'list_maintenance_windows')
iris = datasets.load_iris() perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
if not isinstance(data, SparseArray): data = SparseArray(data, sparse_index=sparse_index, fill_value=fill_value, dtype=dtype, copy=copy)
wua_session = win32com.client.Dispatch('Microsoft.Update.Session') wua_session.ClientApplicationID = 'Salt: Install Update'
action()
self.session.delete()
params["username"] = "invalid username" assert_username_error("Usernames must contain only letters, numbers, underscores (_), and hyphens (-).")
if isinstance(args[0], (tuple, list)): self.maps = args[0] else: self.maps = args
ret['changes'] = {}
if not isinstance(xblock.location, LibraryUsageLocator): modulestore().has_changes(modulestore().get_course(xblock.location.course_key, depth=None))
sliced = idx.slice_locs(np.nan) self.assertTrue(isinstance(sliced, tuple)) self.assertEqual(sliced, (0, 3))
self._write()
if val == val: nobs[lab, j] += 1 prodx[lab, j] *= val
assert_raises(ValueError, sample_without_replacement, 0, 1) assert_raises(ValueError, sample_without_replacement, 1, 2)
version_num = '' if options: version_num = options.get('version', False)
environ.__grains__ = {} environ.__salt__ = {} environ.__context__ = {}
line1 = self._get_row() if line1 != _correct_line1: raise ValueError("Header record is not an XPORT file.")
clf = QuadraticDiscriminantAnalysis().fit(X6, y6) assert_true(not hasattr(clf, 'covariances_'))
PY2 = sys.version_info[0] == 2 PY3 = sys.version_info[0] == 3
_FUNCTION_HASHES = weakref.WeakKeyDictionary()
from __future__ import absolute_import import os
q = Series(self.ts, dtype=object).quantile(0.9) self.assertEqual(q, percentile(self.ts.valid(), 90))
__virtualname__ = 'gpg'
model = self.get_queryset().model
if is_jail(name): return 'Created jail {0}'.format(name)
assert_warns_message(DeprecationWarning, "class_weight='auto' heuristic is deprecated", model.fit, X, y)
self.assertEqual(4326, nullcity.point.srid) nullcity.save()
_, X = self._count_vocab(raw_documents, fixed_vocab=True) if self.binary: X.data.fill(1) return X
from salt.exceptions import CommandExecutionError import salt.utils import salt.modules.cmdmod
results = results[args.burnin:]
compatibility_keys = ('device', 'name', 'fstype', 'opts', 'dump', 'pass')
data = self.select_dtypes(include=[np.number])
for key in kwargs.keys(): if not key.startswith('_'): params.setdefault(key, kwargs[key])
clf = GradientBoostingClassifier(loss=loss, n_estimators=10, random_state=1, presort=presort)
tags = list(set(tags))
width = self.ext.config['vimeo_width'][0] height = self.ext.config['vimeo_height'][0] return flash_object(url, width, height)
Membership.objects.create(membership_country=self.usa, person=self.jane, group=self.cia)
always_cohort_inline_discussions = models.BooleanField(default=True)
from salt.ext.six import string_types import salt.utils.odict as odict
__virtualname__ = 'junos'
v, W = self._cov_eigen(X)
if args.validate: __opts__['pepa_validate'] = True
self.session['y'] = 1 self.session.save()
error_rate = OrderedDict((label, []) for label, _ in ensemble_clfs)
for manager in opts.managers: originating_model = manager._originating_model if (cls is originating_model or cls._meta.proxy or originating_model._meta.abstract):
log = logging.getLogger(__name__)
if 'extensions' not in d: self.extensions = []
rendered = "0.post%d" % pieces["distance"] if pieces["dirty"]: rendered += ".dev0" rendered += "+g%s" % pieces["short"]
elif trigger_types[trigger_type] == TASK_TRIGGER_REGISTRATION: trigger.Id = 'OnTaskCreation_ID1'
u"The name that will identify you in your courses - " u"{bold_start}(cannot be changed later){bold_end}"
self.assertTrue(qs.count() in [0, 1])
import salt.config import salt.loader
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
from __future__ import unicode_literals
if format not in serializers.get_public_serializer_formats(): try: serializers.get_serializer(format) except serializers.SerializerDoesNotExist: pass
self.assertFalse(hasattr(p2, 'messybachelorparty_set'))
_valid(status, comment='Kill signal \'{0}\' successfully' ' sent to the container \'{1}\''.format(signal, container), id_=container)
time.sleep(1) continue
index_entry = self._get_index_if_valid(course_key, force) structure = self._lookup_course(course_key).structure
self.chap_1_handle = 0 self.chap_1_seq_1_handle = 1
if response.context and len(response.context) == 1: response.context = response.context[0]
start = datetime(2010, 1, 1) end = datetime(2013, 1, 27)
_check_all_orients(self.series) self.assertEqual(self.series.to_json(), self.series.to_json(orient="index"))
return promote(getitem(key))
ret['changes'] = { 'testing': { 'old': 'Unchanged', 'new': 'Something pretended to change' } }
assert_raises(ValueError, chi2_kernel, [[0, -1]]) assert_raises(ValueError, chi2_kernel, [[0, -1]], [[-1, -1]]) assert_raises(ValueError, chi2_kernel, [[0, 1]], [[-1, -1]])
self.assertEqual(Article.objects.order_by('id').earliest(), a1)
((), {}, '<label for="id_field">Field:</label>'),
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): from pandas.io.wb import search, download, get_countries
if 'master_uri' not in __opts__: __opts__['master_uri'] = 'tcp://{ip}:{port}'.format( ip=salt.utils.ip_bracket(__opts__['interface']),
bandwidth = estimate_bandwidth(X, quantile=0.2, n_samples=500)
#keep_warnings = False
log = logging.getLogger(__file__)
return _load_output(output_dir, _get_func_fullname(self.func), timestamp=self.timestamp, mmap_mode=self.mmap_mode, verbose=self._verbose)
return re.split(r'\s+', out['stdout'])[1][:-1] == 'inode/blockdevice'
if not wait_for_created(data['upid'], timeout=300): return {'Error': 'Unable to create {0}, command timed out'.format(name)}
face = sp.misc.imresize(face, 0.10) / 255.
user_partititons = self.course.user_partitions self.assertEqual(len(user_partititons), 2) self.assertEqual(user_partititons[0].name, 'Name 0')
default_grade = '-1'
i_nbrs = nbrs.radius_neighbors([my_mean], bandwidth, return_distance=False)[0] points_within = X[i_nbrs] if len(points_within) == 0:
try: self.destroy()
sample_dict = {'x': (-10, 10)}
if ssh_interface == 'private_ips' and private_ip_assignment is False: create_private_ip(node_id) private_ip_assignment = True
with super(CreateCommentUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
db_name = "foo'3" self._db_creation_loop(db_name=db_name, returning_name=db_name, test_conn=True, character_set='utf8', connection_user=self.user, connection_pass=self.password )
import salt.ext.six as six
self.assertFalse(CourseEnrollment.is_enrolled(self.user, self.course_key))
weights_with_nan = [np.nan] * 10 weights_with_nan[5] = 0.5 self._compare( o.sample(n=1, axis=0, weights=weights_with_nan), o.iloc[5:6])
__virtualname__ = 'service'
salt '*' win_path.add 'c:\\python27' 0
context = {} _update_context_with_basic_info(context, course_id, platform_name, configuration) invalid_template_path = 'certificates/invalid.html'
response = self.client.get(activation_link) self.assertEqual(response.status_code, 200)
self.assertCalcEqual(True, [False, 'and', False, 'or', True])
assert_false(np.may_share_memory(b_float32, a_int32))
filters_regex = re.compile(r'\|([.,\w\s]*)\}') filters_match = filters_regex.search(expression.expression)
#html_file_suffix = ''
data = re.sub('0{6,}[0-9]', '', data)
self._prepare_field_lists() self._generate_through_model_map()
self.browser.set_window_size( initial['width'], initial['height'] )
self.Ut = numpy.dot(self.V[:,-self.n_eigen:].transpose(), self.Xt)
self.assert_redirect_to_dashboard_looks_correct(actions.do_disconnect( request.backend, request.user, None, redirect_field_name=auth.REDIRECT_FIELD_NAME))
child_vertical = ItemFactory.create(parent_location=vertical.location, category='vertical', display_name='Child Vertical') self.assertEqual(xblock_type_display_name(child_vertical), u'Vertical')
from __future__ import absolute_import import json
single.shell.send( trans_tar, '{0}/salt_state.tgz'.format(__opts__['thin_dir']))
est = TreeEstimator(max_features=10) assert_raises(ValueError, est.fit, X, y)
dependencies = []
self.assertContains(self.response, "<p>Get the full name of the person</p>")
from __future__ import absolute_import
result2 = (DataFrame.from_records(recarray, columns=columns) .reindex(columns=df.columns)) result3 = (DataFrame.from_records(recarray2, columns=columns) .reindex(columns=df.columns))
event.__grains__ = {} event.__salt__ = {} event.__context__ = {} event.__opts__ = {}
pass
exc_info_on_loglevel=logging.DEBUG
refetched = self.client.get_json(first_update_url) self.assertHTMLEqual( content, json.loads(refetched.content)['content'], "get w/ provided id" )
from __future__ import absolute_import import datetime import hashlib import logging import re import os import socket
num_braces = 0
self.clear.publish(self.valid_clear_load) self.assertEqual(fire_event_mock.call_args[0][0]['fun'], 'test.ping')
self.assertIn( {'type': 'html_textbooks'}, list(xmodule_tabs.CourseTabList.iterate_displayable(self.course, inline_collections=False)), )
proba[np.isnan(proba)] = 1. / n_classes
der_sig_in = asn1.DerObject() der_sig_in.decode(der_sig)
multi_type = self.MULTI_TYPES[geom.geom_type.num] g = OGRGeometry(multi_type) g.add(geom)
from __future__ import absolute_import import time import pprint import logging
html = module.get_problem_html()
log_resp = weighted_log_prob - log_prob_norm[:, np.newaxis]
user = User.objects.get(email=email) self.assertFalse(user.is_active) return user
self.assertEqual(req_status[1]["status"], None) self.assertEqual(req_status[1]["order"], 1)
key = safe_key('test', prefix, '')
for name, TreeClassifier in CLF_TREES.items(): clf = TreeClassifier(random_state=0) clf.fit(X, y)
import salt.utils.dictupdate as dictupdate import salt.utils from salt.exceptions import SaltInvocationError from salt.ext.six import string_types
if err == 'usage:': break ret[csnap] = res['stderr']
salt '*' vsphere.get_vsan_eligible_disks my.esxi.host root bad-password
from __future__ import absolute_import import pprint import logging import time import urllib
timeout = __FUN_TIMEOUT.get( fun,
from salt.serializers import json, yamlex, yaml, msgpack, python, configparser from salt.serializers import SerializationError from salt.utils.odict import OrderedDict
if model_field.__class__ not in self.FIELD_TYPES: raise LayerMapError('Django field type "%s" has no OGR mapping (yet).' % fld_name)
X = [[1], [2]] Y = [1, 2]
logentry.content_type = None logentry.save()
def lrange(*args, **kwargs): return list(range(*args, **kwargs))
if isinstance(course.id, CCXLocator): return False
from salt.states import iptables
url(r'^post_metrics_data_csv_url', 'class_dashboard.dashboard_data.post_metrics_data_csv', name="post_metrics_data_csv"),
settings_button = world.browser.find_by_css('.settings-button') if len(settings_button) > 0: world.css_click('.settings-button')
cummax = self.tsframe.cummax() expected = self.tsframe.apply(Series.cummax) tm.assert_frame_equal(cummax, expected)
result = store.select_column('df3', 'string', start=2) tm.assert_almost_equal(result.values, df3['string'].values[2:])
return None, phi_a1
lowest_passing_grade = DecimalField(max_digits=5, decimal_places=2, null=True)
BROKER_HEARTBEAT = 10.0 BROKER_HEARTBEAT_CHECKRATE = 2
self.assertIsInstance(A.value, cached_property)
import logging
if is_jail(name): return '{0} already exists'.format(name)
url(r'^snark/', views.snark, name='snark'),
problem = new_loncapa_problem(xml_str)
self.assertFalse(module_has_submodule(test_no_submodule, 'anything')) with self.assertRaises(ImportError): import_module('utils_tests.test_no_submodule.anything')
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'aliyun', vm_['profile'], vm_=vm_) is False: return False
elif existing['code'] == 404:
def natural_key(self): return (self.name,) natural_key.dependencies = ['fixtures_regress.store']
LogoutPage(self.browser).visit() self._auto_auth(self.USERNAME, self.EMAIL, False)
with self.assertNumQueries(1): self.field_data_cache = FieldDataCache([self.mock_descriptor], course_id, self.user) self.kvs = DjangoKeyValueStore(self.field_data_cache)
shiftedFrame = self.tsframe.shift(5) self.assert_index_equal(shiftedFrame.index, self.tsframe.index)
__func_alias__ = { 'list_records': 'list', }
name = name.split('.')[0]
values = np.empty(len(self), dtype=np.bool_) values.fill(False) return values
__virtualname__ = 'couchdb'
continue
expected_msg = u'Error: test error \u03a9' self.assertEqual(result['success'], expected_msg)
if instance in vmconfig['state'] and vmconfig['state'][instance] is not None: for state_cfg in vmconfig['state'][instance]: add_instance = True
targets = [] problems = [] for pkgname, pkgver in six.iteritems(to_remove): origin = bool(re.search('/', pkgname))
self.assertEqual(cert.status, ExampleCertificate.STATUS_STARTED)
msg = "No merge commit for {commit} in {branch}!".format( commit=commit, branch=branch, ) raise DoesNotExist(msg, commit, branch)
import salt.config import salt.loader from salt.modules import boto_s3_bucket
from salt.exceptions import ( SaltClientError, CommandNotFoundError, CommandExecutionError, SaltInvocationError, )
import salt.client import salt.utils import salt.utils.virt import salt.utils.cloud import salt.key from salt.utils.odict import OrderedDict as _OrderedDict
problem = self.build_problem(sample_dict=sample_dict, num_samples=10, tolerance=0.01, answer="x+2*y")
self.assertEqual(config['key_logfile'], os.path.join('/', 'key')) self.assertNotEqual(config['key_logfile'], '//key')
from salt.modules import mac_sysctl from salt.exceptions import CommandExecutionError
policy = self.grading_policy policy['GRADE_CUTOFFS'] = value self.grading_policy = policy
elif result is None: ret['result'] = None ret['comment'] = out['comment'] return ret
for f in self.instance._meta.fields: field = f.name if field not in self.fields: exclude.append(f.name)
self.cmap = dict() self.items = self.cmap.items self.keys = self.cmap.keys self.overall_message = "" self.set(*args, **kwargs)
if getattr(e, 'winerror', 0) != 32 and getattr(e, 'errno', 0) != 13: raise
@property def tuple(self): "Returns a tuple of the point." return self._cs.tuple
embargo_redirect = embargo_api.redirect_if_blocked( course.id, user=request.user, ip_address=get_ip(request), url=request.path ) if embargo_redirect is not None: return redirect(embargo_redirect)
loader = self.engine.template_loaders[0] source, name = loader.load_template('index.html') self.assertEqual(template.origin.template_name, 'index.html')
CONFIG_ROOT = path(os.environ.get('CONFIG_ROOT', ENV_ROOT))
def test_rolling_cov(self): A = self.series B = A + randn(len(A))
clf = mixture.GaussianMixture(n_components=2, covariance_type='full') clf.fit(X_train)
return force_text(getattr(cursor, '_last_executed', None), errors='replace')
DATE_INPUT_FORMATS = [
if response is None: response = HttpResponse(content.stream_data()) response['Content-Length'] = content.length
lib_page = LibraryEditPage(self.browser, LibraryLocator(org, number)) lib_page.wait_for_page()
log.error('Failed to read metadata. Giving up on IAM credentials.')
df = DataFrame([[8, 5]], columns=['a', 'a']) edf = DataFrame([[8, 5]]) edf.columns = ['a', 'a']
providers_config = cloud_providers_config(providers_config_path)
p = Panel(randn(4, 4, 4))
log.error('Received message without share: {0}'.format(msg)) return
user = UserFactory.create(is_staff=True, is_superuser=True) user.save() self.client.login(username=user.username, password='test')
template_context['js_init_parameters'] = json.dumps(frag.json_init_args).replace("/", r"\/")
if CourseMode.is_white_label(course_id): course_mode = CourseMode.DEFAULT_SHOPPINGCART_MODE_SLUG else: course_mode = None
from __future__ import unicode_literals
continue theano.tests.unittest_tools.verify_grad(op, [a.get_value()])
self.d.stalkers.add(self.a)
return None
problem = new_loncapa_problem(xml_str) problem.done = True problem.student_answers = {'1_2_1': 'choice_1'}
for cache_params in settings.CACHES.values(): cache_params.update({'LOCATION': self.dirname}) setting_changed.send(self.__class__, setting='CACHES', enter=False)
if revision == ModuleStoreEnum.RevisionOption.published_only: query['_id.revision'] = MongoRevisionKey.published
from __future__ import absolute_import
return Index(result, name=self.name)
REPORT_DIR = REPO_ROOT / 'reports' METRICS_DIR = REPORT_DIR / 'metrics'
if raw['data']['return'] == {}: continue
if not file and not force: return
"_save": "Save",
for course in courses_in_progress: CourseRerunState.objects.initiated( sourse_course_key, destination_course_key=course.id, user=self.user, display_name="test course" )
entered_passwords = ["", "", "password2", "password2"]
tuned_parameters = [{'shrinkage': shrinkages}] cv = GridSearchCV(ShrunkCovariance(), tuned_parameters) cv.fit(X_train)
self.assert_no_xpath(xml, "//label[@class='choicegroup_incorrect']", self.context)
_role_present(ret, IdentityPoolId, AuthenticatedRole, UnauthenticatedRole, conn_params)
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
odd_ids = [user.pk for user in User.objects.all() if user.pk % 2] self.assertEqual(len(odd_ids), 0)
self.assertEqual(1, 1)
__virtualname__ = 'win_dacl'
return self.features.uses_savepoints and not self.get_autocommit()
expected = ts['2001'] expected.name = 'A'
overview_v10 = CourseOverview.get_from_id(course.id) self.assertEqual(overview_v10.version, 10)
import contextlib import logging import hashlib import os import shutil import ftplib from tornado.httputil import parse_response_start_line, HTTPInputError
using_ip_for_id = False if not opts.get('id'): opts['id'], using_ip_for_id = get_id( opts, cache_minion_id=cache_minion_id)
data = fetch_olivetti_faces() X = data.images.reshape((len(data.images), -1)) y = data.target
import salt.utils import salt.ext.six as six
if 'set_{0}'.format(collection) not in vmconfig['changed']: vmconfig['changed']['set_{0}'.format(collection)] = {}
break
assert_equal(grid_search.best_score_, 1.0) best_vectorizer = grid_search.best_estimator_.named_steps['vect'] assert_equal(best_vectorizer.ngram_range, (1, 1))
pnt = Point(0, 0) self.assertEqual(0.0, pnt.distance(Point(0, 0)))
world.wait_for_js_to_load()
for char in key: if ord(char) < 33 or ord(char) == 127: return False
class BeatleForm(Form): name = CharField()
ogr_db = get_ogr_db_string() if not ogr_db: self.skipTest("Unable to setup an OGR connection to your database")
left = self.rng[:10] right = self.rng[5:10]
if library_role: library_role(self.lib_key).add_users(self.non_staff_user) if course_role: course_role(course.location.course_key).add_users(self.non_staff_user)
self.counter = 0
from napalm import get_network_driver HAS_NAPALM = True
self.unit_page = self.outline.section('Test Section').subsection('Test Subsection').expand_subsection().unit( 'Test Unit').go_to()
task_key = hashlib.md5(task_key_stub).hexdigest()
return
ret['result'] = None
self.certificates_section.wait_for_certificate_exceptions_section() self.certificates_section.click_add_exception_button()
for tree, dataset in product(REG_TREES, ["boston", "reg_small"]): if tree in SPARSE_TREES: yield (check_sparse_input, tree, dataset, 2)
reviewing_service = models.CharField(blank=True, max_length=255)
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, with_system_user, skip_if_binaries_missing ) ensure_in_syspath('../../')
field_data['attempts'] = int(attempts)
for _ in range(num_threads): thread = threading.Thread(target=self._thread_target) thread.daemon = True thread.start() self._workers.append(thread)
super(IndexSpace, self)._validate_impl(is_numeric, batch)
start, stop, stride = index.indices(self.num_feat) return [self._make_feature(fid) for fid in range(start, stop, stride)]
from salt.states import openstack_config
if credit_type is not None: response_element.set('partial_credit', str(credit_type))
sign_active = np.empty(max_features, dtype=np.int8) drop = False
'USE_MICROSITES': False,
yield super(SharedModuleStoreTestCase, cls).setUpClass()
for (func, pk, klass, datum) in test_data: func[1](self, pk, klass, datum)
from salt.states import process
import os
self.assertIn('broadcast_address', self.ipv4_network._cache) self.assertIn('hostmask', self.ipv4_network._cache)
self.factory(shuffle="false")
tm.assertRaisesRegexp(TypeError, self.mutable_regex, *args, **kwargs)
from __future__ import absolute_import import os
if not has_studio_write_access(request.user, source_course_key): raise PermissionDenied()
from sklearn.linear_model import ElasticNet
from cStringIO import StringIO as cStringIO from StringIO import StringIO BytesIO = StringIO import cPickle import httplib
self.publish_unit_and_verify_groups_in_lms(courseware_page, [u'Group A', u'Group B'])
'conf_file': str,
self.names, self.index_names, self.col_names, passed_names = ( self._extract_multi_indexer_columns( self._reader.header, self.index_names, self.col_names, passed_names ) )
merged_start_value = min_all_parents_start_date
del channel
actual = grouped_df.filter(lambda x: len(x) > 1) expected = df.iloc[expected_indexes] assert_frame_equal(actual, expected)
return val - timedelta(microseconds=val.microsecond)
values = np.array(values, dtype=np.object_)
return '%s' % formatter(x)
self.assertEqual(self.server.config, {})
'always_verify_signature': bool,
response = self.ajax_request('No', {})
return _after_ignition_network_profile(cmd, ret, name, network_profile, path, nic_opts)
self = layer
if imports:
for node in range(len(children_map)): self.assertIn(node, block_structure) self.assertNotIn(len(children_map) + 1, block_structure)
W = rng.uniform(-self.irange, self.irange, (input_dim, self.dim * 3))
if values.ndim == 1 and isinstance(values, np.ndarray): values = values.reshape((1, values.shape[0]))
country_id = models.IntegerField() city_id = models.IntegerField()
self.status = None self.__irix_hack = 'irix' in sys.platform.lower()
df = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'b']})
self.assertFalse(result['success']) self.assertIn(u"did not accept your payment", result['error_html']) self.assert_dump_recorded(result['order'])
acceptable_dtypes = [np.float32, np.float_] _cast_inplace(com.flatten(self), acceptable_dtypes, np.float_)
if not isinstance(self.object_list, list): self.object_list = list(self.object_list) return self.object_list[index]
first = pd.DataFrame([[datetime(2016, 1, 1)], [datetime(2016, 1, 2)]]) first[0] = first[0].dt.tz_localize('Europe/London')
try: import requests
if expanded_nodegroup or not first_call: return ret else: log.debug('No nested nodegroups detected. ' 'Using original nodegroup definition: {0}' .format(nodegroups[nodegroup])) return nodegroups[nodegroup]
ax = df.plot.bar(stacked=True, width=width) for r in ax.patches: self.assertEqual(r.get_width(), width)
for field in ('traits', 'integrations', 'userAgent'): if field in context['client']: del context['client'][field]
import salt.utils
from salt.exceptions import CommandExecutionError, SaltInvocationError
input_dict = {'1_2_1': 'California'} correct_map = problem.grade_answers(input_dict) self.assertEquals(correct_map.get_hint('1_2_1'), "")
lib_key_pacific = self._create_library(org="PacificX", library="libP") lib_key_atlantic = self._create_library(org="AtlanticX", library="libA")
import salt.utils.error
exp = f.copy() ix[5:10].values[:] = 5 exp.values[5:10] = 5 assert_frame_equal(f, exp)
kwds.setdefault('c', plt.rcParams['patch.facecolor'])
if info.external_attr == 2716663808: source = zfile.read(target) os.symlink(source, os.path.join(dest, target)) continue
mapped = [mapped]
sorted_df = frame.sort_values(by='A') assert_frame_equal(sorted_df, expected[::-1]) expected = frame.sort_values(by='A') assert_frame_equal(sorted_df, expected)
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course_key): self.assertTrue(self.store.has_item(problem_location)) assertProblemNameEquals(problem_original_name)
for col in f.columns: ts = f[col] for idx in f.index[::5]: self.assertEqual(ix[idx, col], ts[idx])
problem = self.build_problem(answer='(1, ]') input_dict = {'1_2_1': '3'} with self.assertRaises(StudentInputError): problem.grade_answers(input_dict)
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
E = np.empty(0) assert_raises(ValueError, _fast_dot, E, E)
from salt.pillar import Pillar, git_pillar
if 'account_privacy' in update: update_user_preferences( requesting_user, {'account_privacy': update["account_privacy"]}, existing_user )
conditional_content_removal(request, response)
if not hasattr(self, 'path'): self.path = self._path_from_module(app_module)
from __future__ import absolute_import import os import random import string
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
self.client.logout() response = self.client.get(url)
wrapper_width = 75 if is_transcript_visible else 100 initial = self.browser.get_window_size()
state.marked[state.marked == 2] = 0 return _step3
data = request.POST.copy() data.pop(helpers.ACTION_CHECKBOX_NAME, None) data.pop("index", None)
cmdret = _psql_prepare_and_run(['-f', sqlfile.name], user=user, runas=runas, host=host, port=port, password=password, maintenance_db=dbname) return cmdret
sampling_algorithm["custom-auto"] = \ lambda n_population, n_samples, random_state=None: \ sample_without_replacement(n_population, n_samples, method="auto", random_state=random_state)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../')
if six.PY3: py_integer_types = (int, np.integer) py_number_types = (int, float, complex, np.number) else:
dive = Book.objects.using('other').create(title="Dive into Python", published=datetime.date(2009, 5, 4))
course_id = CourseKeyField.Empty
band_data_hex = binascii.hexlify(band.data(as_memoryview=True)).upper()
coach_user = User.objects.create_user('test_coach_user', 'test_coach_user@openedx.org', 'test') CourseCcxCoachRole(self.master_course_key).add_users(coach_user)
self.config.pop(self._logfile_config_setting_name_)
queue = [(usage_key, ())] while len(queue) > 0:
for p_name, p_value in six.iteritems(self.pack): setattr(mod, p_name, p_value)
import copy import logging import salt.ext.six as six from salt.serializers.yamlex import merge_recursive as _yamlex_merge_recursive
ranks = np.ravel(ranks)
X_ = np.asarray(X) grid = np.unique(X_[:, 0]) pdp_2, axes = partial_dependence(clf, [0], grid=grid)
all_nodes = dict([(n.attrib['id'], n) for n in root])
super(TabsPageTests, self).setUp()
rmtree(fs_root, ignore_errors=True)
import salt.loader import salt.utils import salt.utils.event from salt.exceptions import SaltInvocationError
from __future__ import unicode_literals
extra_params = dict(x_left_lower_corner=-94.8, Nx=1212, y_left_lower_corner=-56.05, Ny=1592, grid_size=0.05) dtype = np.int16
last_el = self.table_of_contents[-1] while last_el.getchildren(): last_el = last_el[-1]
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_id) if has_instructor_access_for_class(request.user, course_key): try: data = dashboard_data.get_d3_problem_grade_distrib(course_key)
tenant = __salt__['keystone.tenant_get'](name=name, profile=profile, **connection_args)
'course_modes',
del schedule[job]['_seconds']
plt.scatter(embedding[0], embedding[1], s=100 * d ** 2, c=labels, cmap=plt.cm.spectral)
expected = ts[:3]
try: raise Exception except Exception: return technical_500_response(request, *sys.exc_info())
from salt.utils import build_whitespace_split_regex
f('int64') f('float64')
can_introspect_positive_integer_field = False
self.assertEqual(holidays, [datetime(1986, 1, 20, 0, 0), datetime( 1987, 1, 19, 0, 0)])
connections['default'].allow_thread_sharing = True t2 = threading.Thread(target=runner2, args=[connections['default']]) t2.start() t2.join()
def f(): df = orig.copy() df.iloc[2, :] = ["c", 2]
full_event = dict(event, **task_info)
if self.user is not None and self.user.username == username: user = self.user else: user = User.objects.get(username=username)
if (hasattr(lvalues, 'values') and not isinstance(lvalues, pd.DatetimeIndex)): lvalues = lvalues.values
if optname == 'proto' and valuestr == 'none': valuestr = 'static'
kernel = C(1.0, (1e-3, 1e3)) * RBF(10, (1e-2, 1e2)) gp = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)
filter_out_source_path_option(kwargs)
modal.release_date = '5/14/1969'
with self.assertRaises(NotImplementedError): self.client.ajax_post( self.url, data={'invalid_request': None}, )
params = params.copy() backend = params.pop('BACKEND') engine_cls = import_string(backend) engine = engine_cls(params)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
import integration import salt.utils
new_io = StringIO() management.call_command('migrate', interactive=False, stdout=new_io)
BULK_EMAIL_JOB_SIZE_THRESHOLD = 100
assert_raises(VerificationException, attempt.submit)
norm_expected = expecteds.copy() for k in norm_expected: norm_expected[k] = Timestamp(norm_expected[k].date())
self.assertEqual(self._get_sqlite_column_type( 'dtype_test', 'B'), 'INTEGER')
x_squared_norms_from_csr = row_norms(X_csr, squared=True) labels_csr, inertia_csr = _labels_inertia( X_csr, x_squared_norms_from_csr, noisy_centers) assert_array_almost_equal(inertia_csr, inertia_gold) assert_array_equal(labels_csr, labels_gold)
new_url = _urlparse(url) if not new_url.path:
if not isinstance(user_exists, bool): ret['comment'] = user_exists ret['result'] = False return ret
'openedx.core.djangoapps.site_configuration',
return certificate
distinct_value_indices = np.where(np.logical_not(isclose( np.diff(y_score), 0)))[0] threshold_idxs = np.r_[distinct_value_indices, y_true.size - 1]
if installed_apps is None and hasattr(sys.modules[__name__], 'apps'): raise RuntimeError("You must supply an installed_apps argument.")
if not hasattr(value, 'iteritems'): self._uncomment_if_commented(key)
for _ in range(100): response = self.client.post(self.url, data=payload) if response.status_code == 403: break
VerificationDeadline.set_deadline(self.course.id, self.VERIFICATION_DEADLINE)
try: from pandas.core.index import MultiIndex except ImportError: pass
mock_run.return_value = xml_command_fail self.assertFalse(glusterfs.add_volume_bricks('Newvolume1', ['new:/path']))
LogoutPage(self.browser).visit() self._auto_auth("STAFF_TESTER", "staff101@example.com", True) self.course_outline.visit()
df = DataFrame(Series()) assert_frame_equal(df, DataFrame({0: Series()}))
from __future__ import absolute_import import os import tempfile import textwrap
add_course_url = urlparse.urljoin(course.ccx_connector, CCXCON_COURSEXS_URL) resp = oauth_ccxcon.post( url=add_course_url, json=payload, headers=headers, timeout=CCXCON_REQUEST_TIMEOUT )
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, expensiveTest
with self.assertRaisesMessage(AttributeError, 'Object is immutable!'): d.__setitem__(1, 'test')
'action': ['external_mail', 'delete_selected'], 'index': 0
if name not in ['max', 'min']: ds = Series(date_range('1/1/2001', periods=10)) self.assertRaises(TypeError, f, ds)
self.assert_grade(problem, "Second", "correct") self.assert_grade(problem, "second", "correct")
from __future__ import unicode_literals
results[k] = v
invoice = shoppingcart.models.Invoice.objects.get(id=sale_invoice_1.id) invoice.is_valid = True invoice.save()
from __future__ import unicode_literals
fake_app = object()
__salt__['file.write']('{0}-make.conf'.format(os.path.join(cdir, jname)), 'WITH_PKGNG=yes')
unstacked = self.ymd.unstack() restacked = unstacked.stack() assert_frame_equal(restacked, self.ymd)
degrees_of_freedom = max(self.n_components - 1.0, 1) n_samples = X.shape[0] k = min(n_samples - 1, int(3. * self.perplexity + 1))
index = 0 params = kernel.get_params() for hyperparameter in kernel.hyperparameters: if hyperparameter.bounds is "fixed": continue size = hyperparameter.n_elements
if (self._start - other._start) % gcd: return RangeIndex()
destination_block.edit_info.source_version = ( new_block.edit_info.source_version or new_block.edit_info.update_version )
from __future__ import absolute_import import time import errno import threading
salt '*' win_wua.list_updates categories=['Critical Updates','Drivers']
self.assertDeserializeEqual('False', 'False') self.assertDeserializeEqual('True', 'True')
if __name__ == '__main__': from integration import run_tests run_tests(PillarModuleTestCase, needs_daemon=False)
cls.js.setdefault('xmodule_js', resource_string(__name__, 'js/src/xmodule.js'))
key = lambda course: course.sorting_score courses = sorted(courses, key=key)
self.should_fetch_course = False
instructor_dashboard_page = self.visit_instructor_dashboard() exam_attempts_section = instructor_dashboard_page.select_special_exams().select_exam_attempts_section()
courses2 = import_course_from_xml( self.store, self.user_id, self.export_dir, source_dirs=[top_level_export_dir], static_content_store=contentstore, target_id=dest_course_key2, create_if_not_present=True, raise_on_failure=True, )
indices = np.arange(n_features) generator.shuffle(indices) X[:, :] = X[:, indices]
return proxy_output
has_real_datatype = False supports_subqueries_in_group_by = True supports_bitwise_or = True
admin = User.objects.get(username=username, email=email)
self.theta0 = np.atleast_2d(self.theta0) lth = self.theta0.size
BaseLoader = getattr(yaml, 'CSafeLoader', yaml.SafeLoader) BaseDumper = getattr(yaml, 'CSafeDumper', yaml.SafeDumper)
kernel = self.kernel if callable(kernel): kernel = 'precomputed'
ret = self.run_state('ssh_known_hosts.present', test=True, **kwargs) self.assertSaltNoneReturn(ret)
assert len(self.hidden_layers) > 0
get_envelope = env_func(lgdal.OGR_G_GetEnvelope, [c_void_p, POINTER(OGREnvelope)])
df = DataFrame({'date': [pd.Timestamp('20130101').tz_localize('UTC'), pd.NaT]}) expected = df.dtypes
fire('{0}/{1}'.format(tag, _m['type']), _m)
trainer = yaml_parse.load(test_yaml_layer1 % {'layer0_filename': layer0_filename, 'layer1_filename': layer1_filename}) trainer.main_loop()
assert_true(ocur == X.shape[1])
idx.shift(1, freq='H')
slug = hashlib.sha256(slug + unicode(badge_class.course_id)).hexdigest()
if connection.features.interprets_empty_strings_as_nulls: test_data = [data for data in test_data if not (data[0] == data_obj and data[2]._meta.get_field('data').empty_strings_allowed and data[3] is None)]
output = StringIO.StringIO() import_log_handler = logging.StreamHandler(output) import_log_handler.setLevel(logging.DEBUG)
for key, value in configs: self.setConfig(key, value)
if not properties: properties = {}
parts = dn.split(r'.') leftmost = parts[0] remainder = parts[1:]
url(r'^api-admin/', include('openedx.core.djangoapps.api_admin.urls', namespace='api_admin')),
salt.utils.cloud.fire_event( 'event', 'requesting instance', 'salt/cloud/{0}/requesting'.format(vm_['name']), {'kwargs': newnode}, )
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): result = op(panel, 1) tm.assert_sp_frame_equal(result['ItemA'], op(panel['ItemA'], 1))
import signals import exceptions
import salt.ext.six as six
VIDEO_CDN_URL = ENV_TOKENS.get('VIDEO_CDN_URL', {})
normalizer = (1.0 - pow(self.gamma, self.n_observations - self.minibatch_index)) /\ (1.0 - self.gamma)
pass
c = self.copy() expressions = [ Coalesce(expression, Value('')) for expression in c.get_source_expressions() ] c.set_source_expressions(expressions) return c
X, y = make_classification(n_samples=200, n_features=100, n_informative=3, random_state=0)
pass
m = re.search(br'<a href="([^"]*)"[^>]* id="lookup_id_inquisition"', response.content)
import salt.utils.reactor import salt.utils.event import ioflo.base.deeding
params.pop('svc') params.pop('anova') params2.pop('svc') params2.pop('anova') assert_equal(params, params2)
def f(): df['foo']['one'] = 2 return df
self.tags[name] = compile_function return compile_function
seen_models = {None: start_alias}
REQUIRE_DEBUG = False
with tm.assertRaises(ValueError): com._random_state('test')
n_samples_per_label = np.bincount(labels)
resp = self.create_xblock(parent_usage_key=self.usage_key, category='chapter') self.chapter_usage_key = self.response_usage_key(resp)
self.assertEqual(mock.call_count, 0)
continue
yield (start, "E128 continuation line " "under-indented for visual indent")
self._assert_course_verification_status(None)
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
n_samples = int(X.shape[0]) rs = check_random_state(self.random_state)
import salt.ext.six as six try: import git HAS_GITPYTHON = True except ImportError: HAS_GITPYTHON = False
while columns.count(name) > 0: name = '_' + str(duplicate_var_id) + name name = name[:min(len(name), 32)] duplicate_var_id += 1
SERVICE_VARIANT = os.environ.get('SERVICE_VARIANT', None)
linux_lvm.__salt__ = {}
from salt.modules import random_org
assert_raises(ValueError, clf.predict, X2[:, :-1])
sparse_results = sparse_classifier.predict(X_test_sparse) dense_results = dense_classifier.predict(X_test) assert_array_equal(sparse_results, dense_results)
return False
from __future__ import unicode_literals
reader = read_sas(self.file01, format="xport", iterator=True) data = reader.read(10) tm.assert_frame_equal(data, data_csv.iloc[0:10, :])
log.debug( 'ext_pillar.mongo: no document found in collection {0}'.format( collection ) ) return {}
op = optparse.OptionParser() op.add_option("--n-times", dest="n_times", default=5, type=int, help="Benchmark results are average over n_times experiments")
if isinstance(g, Polygon):
import os import re import stat import tempfile
nested_args = mapping.nest(theano_args) fixed_var_descr = self.cost.get_fixed_var_descr(model, nested_args) self.on_load_batch = fixed_var_descr.on_load_batch
data = query_instance(vm_)
repo = kwargs.get('repo', '') if not fromrepo and repo: fromrepo = repo
REQUIRE_BASE_URL = "./"
import logging
return str(self.__cast())
"weighted_f0.5_score", "weighted_f1_score", "weighted_f2_score", "weighted_precision_score", "weighted_recall_score",
if closest_subcluster.child_ is not None: split_child = closest_subcluster.child_.insert_cf_subcluster( subcluster)
if value is not None: self.config[option.dest] = value
self.assertIsInstance(self.container._shallow_copy(), FrozenNDArray)
if error: ret['changes'] = {} ret['result'] = False ret['comment'] = str(error)
self.assertEqual(_install_from_path.called, 0)
range_ = T.tile(range_.dimshuffle(0, 'x'), (1, self.binary_target_dim)).flatten()
log.warning('You can only set either memdump or quiesce to True. Setting quiesce=False') quiesce = False
with self.assertRaises(ValueError): with transaction.atomic(using='other'): dive.authors.set([mark, marty])
if self.n_components is None: n_components = X.shape[1] else: n_components = self.n_components
courses = import_course_from_xml( self.store, self.user.id, TEST_DATA_DIR, ['conditional_and_poll'], static_content_store=content_store, create_if_not_present=True )
y_subsample = y[indices, k] classes_subsample = np.unique(y_subsample)
with warnings.catch_warnings(record=True) as ws: for i, line in enumerate(input_lines): if line.endswith(';'): is_semicolon = True
self._fire_master_syndic_start()
(['honor', 'verified', 'audit'], ['1', '2', '3']),
return concat(objs, axis=axis, verify_integrity=False).consolidate()
if set(lgrp['members']) ^ set(members): change['members'] = members
import collections import logging import os import sys import traceback
super(LocaleMiddleware, self).__init__(get_response)
coords = [(a, self._get_axis(a)) for a in self._AXIS_ORDERS] return xarray.DataArray(self, coords=coords, )
rows = [[1, 1, 3, 4], [1, 2, 3, 4], [2, 1, 3, 4], [2, 2, 3, 4]]
users_state = {}
unescaped = unescaped[:-len(trail)]
if not _valid_composer(composer): raise CommandNotFoundError( '\'composer.{0}\' is not available. Couldn\'t find \'{1}\'.' .format(action, composer) )
module.system.user_is_staff = False
process_config_dir._mixin_prio_ = ConfigDirMixIn._mixin_prio_
if fast_dot is np.dot: return
qs = Parcel.objects.filter(border2__contains=F('city__location__point')) self.assertEqual(1, len(qs)) self.assertEqual('P1', qs[0].name)
corr_x_y = corr(x, y) corr_y_x = corr(y, x) assert_equal(corr_x_y, corr_y_x)
if _TRAFFICLINE: cmd = _traffic_line('-U') else: cmd = _traffic_ctl('server', 'start')
tm.assert_series_equal(df['col1'].round(1), expected_rounded['col1'])
from __future__ import absolute_import
__func_alias__ = { 'set_': 'set' }
import integration import salt.loader import salt.config import salt.utils from salt.state import HighState from salt.utils.pydsl import PyDslError
msg = "Input has different freq=4M from PeriodIndex" with tm.assertRaisesRegexp(period.IncompatibleFrequency, msg): base <= Period('2011', freq='4M')
course_names = self.dashboard_page.wait_for_page().available_courses self.assertIn(self.course_info["display_name"], course_names)
import win32serviceutil import win32service import winerror
return year_end == dt or \ self.get_year_end(dt - relativedelta(months=1)) == dt
return _user_has_perm(self, perm, obj)
self.store.convert_to_draft(problem.location, self.user.id) problem = self.store.get_item(problem.location)
@context_cache def _test_refill_cache(comparison_context): self.assertEqual(__context__, comparison_context)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
pythoncom.CoInitialize() c = wmi.WMI(find_classes=0)
weights_less_than_1 = [0] * 10 weights_less_than_1[0] = 0.5 tm.assert_frame_equal( df.sample(n=1, weights=weights_less_than_1), df.iloc[:1])
for frac in np.linspace(0, 0.5, 6): est = ForestEstimator(min_weight_fraction_leaf=frac, n_estimators=1, random_state=0) if "RandomForest" in name: est.bootstrap = False
child_to_delete_location = self.problem_y1a_1 old_parent_location = self.vertical_y1a self.store.delete_item(child_to_delete_location, self.user_id)
with super(UpdateCommentUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
self._implicit_index = True if self.index_col is None: self.index_col = lrange(implicit_first_cols)
elif inferred_type == 'string' or dtype == 'object': self.set_atom_string( block, block_items, existing_col, min_itemsize, nan_rep, encoding)
return 'period'
manage.py ... transfer_students -f edX/Open_DemoX/edx_demo_course -t edX/Open_DemoX/new_demoX -c true
self.assertRaises(TypeError, lambda: df.iloc[1.0:5])
self._xblock_map = {}
ret = self.run_state('ssh_known_hosts.absent', test=True, **kwargs) self.assertSaltNoneReturn(ret)
import salt.utils import salt.defaults.exitcodes from salt.utils.filebuffer import BufferedReader
weights_format = ('v', 'h')
for minion in minions: minion.shutdown()
for collection in vmconfig_type['collection']: if collection in vmconfig_type['create_only']: continue
config.toggle() config.edit() config.groups[2].remove() config.save()
elif storage in self._used_storages: storage._store([], response) self._used_storages.remove(storage)
results.append(benchmark(SGDClassifier(alpha=.0001, n_iter=50, penalty=penalty)))
__func_alias__ = { 'zip_': 'zip' }
isgeographic = int_output(lgdal.OSRIsGeographic, [c_void_p]) islocal = int_output(lgdal.OSRIsLocal, [c_void_p]) isprojected = int_output(lgdal.OSRIsProjected, [c_void_p])
del settings.ROOT_URLCONF with self.assertRaises(AttributeError): self.client.get("/middleware_exceptions/view/")
SERVICE_VARIANT = os.environ.get('SERVICE_VARIANT', None)
from __future__ import absolute_import
import salt.config import salt.defaults.exitcodes import salt.output import salt.utils from salt.utils import parsers from salt.utils.verify import check_user, verify_env, verify_files, verify_log
AUDIT_LOG.info("Bad password_reset user passed in.") limiter.tick_bad_request_counter(request)
class SparseTimeSeries(SparseSeries): def __init__(self, *args, **kwargs): warnings.warn("SparseTimeSeries is deprecated. Please use " "SparseSeries", FutureWarning, stacklevel=2)
pass
return result.get('payment_data')
if answers:
right = other._reindex_with_indexers({0: [join_index, iridx], 1: [join_columns, cridx]}, copy=copy, fill_value=fill_value, allow_dups=True)
ci = CategoricalIndex(np.random.randint(0, 5, size=100)) if PY3: str(ci) else: compat.text_type(ci)
self.kernel = kernel self.gamma = gamma self.n_neighbors = n_neighbors
self.generate_renamed_models()
from salt.modules import keyboard
assert isinstance(prompt, six.binary_type)
chan_elem = feed.getElementsByTagName('channel') self.assertEqual(len(chan_elem), 1) chan = chan_elem[0]
a = Article(None, 'Fourth article', pub_date=datetime(2005, 7, 31)) a.save() self.assertEqual(a.headline, 'Fourth article')
ItemFactory.create( parent=parent, category='discussion', display_name='released', start=self.now, )
y = iris.target colors = "bry"
from salt.utils.odict import OrderedDict
module = CapaFactory.create(max_attempts="1", attempts="1") self.assertTrue(module.closed())
tbls = [self.get_storer(k) for k in keys] s = self.get_storer(selector)
skip_entrance_exam = models.BooleanField(default=True)
else: assert self.line_search_mode == 'exhaustive'
MobileApiConfig(video_profiles="mobile_low,youtube").save()
'renderer_blacklist': list,
repr(s)
import salt.utils.http
task_folder = task_service.GetFolder(location) task = task_folder.GetTask(name)
match = CONTENT_TYPE_RE.match(content_type) if match: charset = match.group(1) else: charset = settings.DEFAULT_CHARSET return force_bytes(data, encoding=charset)
import logging
else: return ""
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
_new_value_type = 'simple' if isinstance(val, dict): _new_value_type = 'complex' elif isinstance(val, list): _new_value_type = 'complex'
correct = 0 for key in correct_map: correct += correct_map.get_npoints(key)
result = df.iloc[:, [1, 2, 4, 6]] expected = df.reindex(columns=df.columns[[1, 2, 4, 6]]) assert_frame_equal(result, expected)
from __future__ import absolute_import import sys import types
self._update_head(course_locator, index_entry, course_locator.branch, new_structure['_id'])
if zoom is None: zoom = 4 self.zoom = zoom if center is None: center = (0, 0) self.center = center
mode = 2 if Minv is None: Minv_matvec = get_inv_matvec(M, symmetric=True, tol=tol) else: Minv = _aslinearoperator_with_dtype(Minv) Minv_matvec = Minv.matvec M_matvec = _aslinearoperator_with_dtype(M).matvec
from __future__ import absolute_import
bob.save() self.assertEqual(bob._state.db, 'default')
raise
url(r'^get_students_problem_grades$', 'class_dashboard.dashboard_data.get_students_problem_grades', name="get_students_problem_grades"),
self.client.login(username=self.instructor.username, password='test') response = self.client.post(url) self.assertEqual(response.status_code, 403)
inc = timedelta(hours=4) dates = Index([dt + inc for dt in self.dateIndex], name='something')
import salt.utils.jid import salt.returners
result = Timestamp(result) self.assertEqual(result.value, expected) self.assertEqual(tslib.pydt_to_i8(result), expected)
config.add_subpackage('linear_model') config.add_subpackage('utils')
for _ in xrange(len(self.aes) + walkback): steps.append(self._update(self.activations, clamped=clamped))
_version = '0.15.2'
vals = json.loads(value) value = [self.base_field.to_python(val) for val in vals]
self.get_session_storage(storage)._get = None
self.problem_page.click_choice('choice_choice_1') self.problem_page.click_save() self.problem_page.wait_for_expected_status('div.capa_alert', 'saved')
pred = mb_k_means.predict(X) assert_array_equal(mb_k_means.predict(X), mb_k_means.labels_)
return self.values.searchsorted(key, side=side, sorter=sorter)
current_log_likelihood = None self.converged_ = False
if unit.is_null: null_upcast_classes[upcast_cls].append(dtype) else: upcast_classes[upcast_cls].append(dtype)
def setUp(self): super(TestDisabledXBlockTypes, self).setUp()
import os import tempfile import hashlib import logging
return self.slice_indexer(key.start, key.stop, key.step, kind=kind)
scores = cross_val_score(reg, X, y, cv=5) assert_array_almost_equal(scores, [0.94, 0.97, 0.97, 0.99, 0.92], 2)
if (not is_object_dtype(dt) and not is_datetime_or_timedelta_dtype(dt)):
res_val = df.get_value("j", "cats") self.assertEqual(res_val, exp_val)
if library: return component_templates
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
from __future__ import absolute_import import logging import time import json
self.assertEqual(article.content, "\r\nTst\r\n")
with new_connection.cursor(): pass new_connection.queries_log.clear()
y = 0.5 * X.ravel() + rng.randn(n_samples, 1).ravel()
self.assertTrue(check_password('letmein', encoded, setter, 'bcrypt')) self.assertFalse(state['upgraded'])
@override_settings(TIME_ZONE='US/Eastern') class DateTimePickerAltTimezoneSeleniumTests(DateTimePickerShortcutsSeleniumTests): pass
res_rev = cat_rev > cat_rev_base exp_rev = Series([True, False, False]) tm.assert_series_equal(res_rev, exp_rev)
cat = [True, True, True] _check_one_hot(X, X2, cat, 5)
self.assertFalse(os.path.exists(path))
CourseOverview.objects.filter(id=course_key).delete()
try: import pwd except ImportError: pass
class_priority = ['video', 'problem']
res_col = df.iloc[:, 0] tm.assert_series_equal(res_col, exp_col) self.assertTrue(com.is_categorical_dtype(res_col))
self.initialize_course( course_factory_kwargs={ 'user_partitions': [user_partition] } )
content = html_parsed[0].tail
data = self._replace_nans(data)
pass
self.assertEqual(new_version.location, target_location)
existing_config = None if __salt__['chronos.has_job'](name): existing_config = __salt__['chronos.job'](name)['job']
usage_key = self.course.id.make_usage_key('vertical', None)
CourseEnrollment.enroll(self.user, course.id)
log.info('deleting redemption entry (%s) from the database.', code_redemption.id) code_redemption.delete()
axes = [_ensure_index(columns), _ensure_index(index)]
if not self._verify_auth(): self.redirect('/login') return
basepeople = models.ManyToManyField(BasePerson, related_name='relating_basepeople') basepeople_hidden = models.ManyToManyField(BasePerson, related_name='+')
df['D'] = i.to_pydatetime() result = df['D'] assert_series_equal(result, expected, check_names=False) self.assertEqual(result.name, 'D')
seed = rng.randint(1, np.iinfo(np.int32).max)
draft_course_structure = self._lookup_course(draft_course_key).structure new_structure = self.version_structure(draft_course_key, draft_course_structure, user_id)
log.error('Received message without share: {0}'.format(msg)) return
self.assertFalse(thread.isAlive())
self.assertEqual( houston_json, City.objects.annotate(json=functions.AsGeoJSON('point', crs=True)).get(name='Houston').json )
theta0, thetaL, thetaU = self.theta0, self.thetaL, self.thetaU corr = self.corr verbose = self.verbose
self.x_sum = numpy.zeros([self.n_dim])
assert_true(id1, id2)
data = data[y].copy() data.index.name = y
for child in children_map[block_to_remove]: if pruned_parents_map[child]: continue for block in traverse_post_order(child, get_children=lambda block: pruned_children_map[block]): missing_blocks.append(block) pruned_children_map[block] = []
matching = [] for disk in disks: for suitable_disk in suitable_disks: if disk.canonicalName == suitable_disk.disk.canonicalName: matching.append(disk)
for url_name, url_path in header_urls.iteritems(): header_urls[url_name] = request.build_absolute_uri(url_path)
self.search_results = None
import logging
img[i, j] /= float(min(i + 1, p_h, i_h - i) * min(j + 1, p_w, i_w - j))
latex_interpreter = ParseAugmenter(math_expr, case_sensitive) latex_interpreter.parse_algebra()
self._configure_message_timeout(10000)
if http_event_collector_debug: log.debug(r.text) log.debug(data)
lr_tracker = LearningRateTracker() algorithm = SGD(learning_rate, cost, batch_size=batch_size, monitoring_batches=3, monitoring_dataset=monitoring_dataset, termination_criterion=termination_criterion, update_callbacks=[annealed_rate, lr_tracker], set_batch_size=False)
ret['comment'] = 'Image \'{0}\' could not be {1}'.format(name, action)
module.get_score = lambda: {'score': 1, 'total': 1}
self.assertEqual(os.environ['DJANGO_LIVE_TEST_SERVER_ADDRESS'], 'blah')
for a in self.axes: if column == a.name:
h = alpha_i * np.ones(s_i) - np.dot(Vi.T, np.ones(n_neighbors))
tasks.update_xblocks_cache.apply_async([unicode(course_key)], countdown=0)
ntp_config = vim.HostNtpConfig(server=ntp_servers)
#pylint: skip-file from __future__ import unicode_literals
assert_array_almost_equal(theil_sen.coef_, lstq.coef_, 9)
try: orig_name = orig_name.encode('utf-8') except: pass converted_names.append( '{0} -> {1}'.format(orig_name, name))
idx = pd.CategoricalIndex(values, name='xxx') tm.assert_series_equal(idx.value_counts(), exp)
LANGUAGES_BIDI = ("he", "ar", "fa", "ur", "fa-ir", "rtl")
options.ignore = tuple(DEFAULT_IGNORE.split(','))
new_obj = DataFrame(new_obj, index=self.obj.index) new_obj.columns = self.obj.columns self.obj = new_obj
if id_: id_ += '_0' return id_
if layer_to_clamp is None: layer_to_clamp = OrderedDict()
thumbs = store.get_all_content_thumbnails_for_course(course_loc) for thumb in thumbs: print "Deleting {0}...".format(thumb) store.delete(thumb['_id'])
DAG_CHILDREN_MAP = [[1, 2], [3], [3, 4], [5, 6], [], [], []]
if kwargs.get(push, False): ret['Push'] = __salt__['cp.push'](path)
requires_pytz = unittest.skipIf(pytz is None, "this test requires pytz")
_upload_sjson_file(good_sjson, self.item_descriptor.location)
REST_FRAMEWORK,
assert correctness in ['correct', 'incorrect', 'unanswered'] assert problem_type in PROBLEM_DICT
from salt.pillar.sql_base import SqlBaseExtPillar
pass
self.courseware.go_to_sequential_position(1) execute_video_steps(tab1_video_names)
X, y = make_blobs(n_samples=80, centers=5, random_state=0) X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
df = DataFrame({'date' : [pd.Timestamp('20130101').tz_localize('UTC')] + [pd.NaT]*5})
self.assertEqual(getattr(obj, op)(), datetime(2011, 11, 1))
req_to_update = next(( req for req in reqs if req.namespace == req_namespace and req.name == req_name ), None)
REGISTRATION_EMAIL_PATTERNS_ALLOWED = None
expected_message = self.get_dashboard_analytics_message() self.assertTrue(expected_message in response.content)
from salt.modules import win_firewall
if settings.FEATURES.get('AUTOMATIC_AUTH_FOR_TESTING'): urlpatterns += ( url(r'^auto_auth$', 'student.views.auto_auth'), )
salt myminion git.submodule /path/to/repo/sub/repo add opts='https://mydomain.tld/repo.git'
container = unit.xblocks[1].go_to_container() return container
#)
log = logging.getLogger(__name__)
def tile_columns(self, **kwargs): raise NotImplementedError('override me')
a = Article.objects.create( headline="Look at me!", pub_date=datetime.datetime.now() ) self.assertIs(a.get_status_display(), None)
self.assertTrue(self.video.downloaded_transcript_contains_text('srt', 'Welcome to edX.'))
>>> aapl.puts
if not hasattr(new_class, attr_name): new_class.add_to_class(attr_name, field)
with self.assertRaises(CourseActionStateItemNotFoundError): CourseRerunState.objects.find_first(course_key=destination_course_key)
X, y = datasets.make_friedman2(n_samples=1200, random_state=random_state) X_train, y_train = X[:200], y[:200] X_test, y_test = X[200:], y[200:]
from __future__ import absolute_import import os import tempfile
OUTPUT_FIELD_NAMES = [ "email", "full_name", "course_id", "is_opted_in_for_email", "preference_set_datetime" ]
import salt.crypt import salt.payload import salt.master import salt.transport.frame import salt.utils.event import salt.ext.six as six from salt.utils.cache import CacheCli
mac_brew.__context__ = {} mac_brew.__salt__ = {} mac_brew.__opts__ = {'user': MagicMock(return_value='bar')}
world.retry_on_exception(lambda: link.click())
import logging
df_grouped.apply(lambda x: noddy(x.value, x.weight))
import dateutil index = date_range("2012-01-01", periods=3, freq='H', tz='US/Eastern')
from __future__ import unicode_literals from datetime import timedelta
version = '%s' % (pandas.__version__)
return False
for iface in (vcapi, rcapi): driver = iface.get_driver_by_name(force_bytes(name)) if driver: break
import salt.utils import salt.utils.odict
result = __salt__['github.add_user']( name, profile=profile, **kwargs )
ret = utils.find_json(test_sample_json) self.assertDictEqual(ret, expected_ret)
if numpy is True and df.shape == (0, 0): assert unser.shape[0] == 0 else: assert_almost_equal(df.values, unser.values, check_dtype=check_numpy_dtype)
property_spec = vmodl.query.PropertyCollector.PropertySpec( type=obj_type, all=True if not property_list else False, pathSet=property_list )
if _ret['result'] is not True and _ret['comment']: add_comment(path, _ret['comment'])
preserve_names = not hasattr(target, 'names')
context['logo_subtitle'] = _("Certificate Validation")
nan_round_Series = Series({'col1': nan, 'col2': 1})
MESSAGE = _('Unable to switch to specified branch. Please check your branch name.')
self.mstore = modulestore()
course_org_filter = microsite.get_value('course_org_filter')
with Timer() as iteration_over_courses_time_1: courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(len(courses_list), USER_COURSES_COUNT)
with cls.store.bulk_operations(course.id, emit_signals=False):
if __salt__['mysql.user_exists'](name, host, unix_socket=unix_socket, **connection_args):
concat([panel1, panel3], axis=1, verify_integrity=True)
course_modes = CourseMode.objects.filter(course_id=course.id) actual = [course_mode.mode_display_name for course_mode in course_modes] self.assertListEqual(actual, ['Verified Certificate', 'Honor Certificate'])
self.name = self.user.profile.name self.status = "ready" self.save()
profile_image_names = get_profile_image_names(username) remove_profile_images(profile_image_names)
from salt.exceptions import CommandExecutionError import salt.utils.http
else: clean = sp_maker(value, self.index)
self.assertEqual(p.books.count(), 3)
import os
with self.assertRaises(xmodule.exceptions.NotFoundError): module.rescore_problem()
from __future__ import absolute_import import logging
available_apps = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'view_tests', ]
log.exception(u"Error while #{}ing student") log.exception(exc) results.append({ 'identifier': identifier, 'error': True, })
__virtualname__ = 'django'
drac.__grains__ = {} drac.__salt__ = {} drac.__context__ = {}
if case_sensitive: casify = lambda x: x else:
assert_raises(VerificationException, attempt.approve) assert_raises(VerificationException, attempt.deny)
self.assertEqual( chicago_json, City.objects.annotate( geojson=functions.AsGeoJSON('point', bbox=True, crs=True, precision=5) ).get(name='Chicago').geojson )
date_index = bdate_range('1/1/2000', periods=len(self.bseries)) s5 = SparseSeries(self.bseries, index=date_index) tm.assertIsInstance(s5, SparseSeries)
yield self.auth.authenticate() ret = yield self.message_client.send( self._package_load(self.auth.crypticle.dumps(load)), timeout=timeout, tries=tries, )
'survey',
from salt.modules import system
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandNotFoundError
self.enrollment.update_enrollment(mode=CourseMode.HONOR)
window = tensor.alloc(0.0, batch, channel, res_r, res_c, pr, pc) window.name = 'unravlled_winodows_' + name
pass
self.get_data_specs(model)[0].validate(data)
assert_array_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)
self._create_students(num_emails - 1)
if not model_opts.managed: continue
data = 'a,b,c\n4,apple,bat,5.7\n8,orange,cow,10'
output = StringIO.StringIO() import_log_handler = logging.StreamHandler(output) import_log_handler.setLevel(logging.DEBUG)
if return_distance: dist, neigh_ind = result else: neigh_ind = result
self.send_future_map = {}
for item in ret: self.assertSaltTrueReturn(item)
#texinfo_domain_indices = True
coffee = cls.js.setdefault('coffee', []) js = cls.js.setdefault('js', [])
decisions = sum(all_decisions) / self.n_estimators
from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON, )
if isinstance(empty_label, (list, tuple)): if not len(empty_label) == 3: raise ValueError('empty_label list/tuple must have 3 elements.')
response = problem.responders.values()[0] self.assertFalse(response.has_mask()) self.assertFalse(response.has_answerpool())
self.pub_channel.on_recv(self._process_cmd_socket)
SERVICE_VARIANT = os.environ.get('SERVICE_VARIANT', None)
if file: width = file.width height = file.height else: width = None height = None
requires_unique_target = False
'django_comment_client', 'django_comment_common', 'discussion_api', 'notes',
X = arg1 + 0 * arg2 Y = arg2 + 0 * arg1
self.variance = variance = 3.0 self.samples = self.prng.normal(scale=variance ** 0.5, size=100000)
mock_problem_key = Mock(return_value=u'') mock_problem_key.course_key = self.course_key with patch.object(UsageKey, 'from_string') as patched_from_string: patched_from_string.return_value = mock_problem_key
if existing['code'] == 200:
return '{0} not found'.format(name)
ms = ModelState.from_model(FooBar) with self.assertRaises(InvalidBasesError): ms.render(apps)
self.user = UserFactory.create(password=self.test_password) self.teams_url = reverse('teams_dashboard', args=[self.course.id])
if syndic_min_wait is not None: yield syndic_min_wait chunk_ret = yield self.all_returns(pub_data['jid'], finish_futures=[job_not_running], minions_remaining=minions_remaining, )
copy = self.series.copy() copy[ordered > 0] = 0
assert_almost_equal(entropy(y), sum(importances)) assert_less(np.abs(true_importances - importances).mean(), 0.01)
task_folder = task_service.GetFolder(location) task_definition = task_folder.GetTask(name).Definition triggers = task_definition.Triggers
ANALYTICS_SERVER_URL = ENV_TOKENS.get("ANALYTICS_SERVER_URL") ANALYTICS_API_KEY = AUTH_TOKENS.get("ANALYTICS_API_KEY", "")
if index is None: index = extract_index(arrays) else: index = _ensure_index(index)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
for s in [Series(), Series(index=list('abc'))]: result = s.get(None) self.assertIsNone(result)
request.process_response_content = response.content request.process_response_reached = True return response
ngrams_nnz = X.nnz assert_true(ngrams_nnz > token_nnz) assert_true(ngrams_nnz < 2 * token_nnz)
attr_class = FieldFile
ret = yield _do_transfer()
forms = list(formset) self.assertEqual(forms, formset.forms) self.assertEqual(len(formset), len(forms))
from salt.states import rabbitmq_cluster
if self.has_resolvers: return self.resolvers[key]
verbose_name = '¿Chapter?'
self.assertRaises(TypeError, rng.__lt__, rng[3].value)
self.assert_grade(problem, answer, "correct") self.assert_grade(problem, answer.lower(), "correct")
TEST_DATA_SPLIT_MODULESTORE = functools.partial( mixed_store_config, mkdtemp_clean(), {}, store_order=[StoreConstructors.split, StoreConstructors.draft] )
elif is_datetimelike_v_numeric(left, right): return False
self.assertUgettext('Date/time', 'Datum/Zeit (APP)')
def initial_django(): return 'django'
kwargs = {}
contains_aggregate = False
klone = mpoly.clone() self.assertEqual(sr.wkt, klone.srs.wkt)
data = 'a,b,c\n4,5,6\n ' result = self.read_csv(StringIO(data)) tm.assert_frame_equal(result, expected)
url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.get(url)
try:
n_samples = K.shape[0] n_targets = y.shape[1]
s = Series(range(5)) s2 = Series(date_range('20010101', periods=5))
query = 'objects:' pos = searchindex.find(query) if pos < 0: raise ValueError('"objects:" not found in search index')
discrete_estimator_errors = bdt_discrete.estimator_errors_[:n_trees_discrete] real_estimator_errors = bdt_real.estimator_errors_[:n_trees_real] discrete_estimator_weights = bdt_discrete.estimator_weights_[:n_trees_discrete]
import copy
from __future__ import unicode_literals
X_new = assert_warns( DeprecationWarning, est.transform, X, threshold="mean") assert_less(0 < X_new.shape[1], X.shape[1])
self.series[3] = None self.assertIs(self.series[3], None)
msg = "no doc impacting files detected:\n" + u"\n".join(filenames) exit(msg, skip=True)
ret = self.run_function('system.list_startup_disks') self.assertIsInstance(ret, list) self.assertIn(self.run_function('system.get_startup_disk'), ret)
n_min = plots.shape[1] n_min -= int(np.ceil(plots.shape[1] * self.share)) plots = plots[:, n_min:]
U, mu, V = fbpca.pca(X, n_comps, raw=True, n_iter=n_iter, l=n_oversamples+n_comps) call_time = time() - t0
'auto_log_stacks': get_config_value('auto_log_stacks'),
if library_key_string: return _display_library(library_key_string, request)
self.submit_question_answer('p1', {'2_1': u'ⓤⓝⓘⓒⓞⓓⓔ'}) self.submit_question_answer('p2', {'2_1': 'Correct'})
USERNAME_MIN_LENGTH = 2 USERNAME_MAX_LENGTH = 30
s2 = s.copy()
if len(to_add) and not isnull(to_add).all(): raise ValueError("Cannot setitem on a Categorical with a new " "category, set the categories first")
self.assert_register_response_before_pipeline_looks_correct(self.client.get('/register'))
class Scene(models.Model): scene = models.CharField(max_length=255) setting = models.CharField(max_length=255)
self.check_assertion_structure(assertion, response['results'][0])
self.assertTrue( bool(access.has_staff_access_to_preview_mode(self.global_staff, obj=self.course, course_key=course_key)) )
n_classes = 1 labels = labels[1:]
iface_data['inet']['ethtool_keys'] = sorted(ethtool)
lm = LayerMapping(Point3D, vrt_file, point_mapping, transform=False) lm.save() self.assertEqual(3, Point3D.objects.count())
self.win_downloader = self.update_session.CreateUpdateDownloader() self.win_downloader.Updates = self.download_collection
self._assert_course_verification_status(VERIFY_STATUS_MISSED_DEADLINE)
from salt.exceptions import SaltInvocationError, CommandExecutionError
elif self._is_correct_lti_request(): params = {k: v for k, v in self.post_dict.items() if k != 'oauth_signature'}
value = value.date()
import os import sys
from __future__ import absolute_import
store.save_asset_metadata_list(md_list, ModuleStoreEnum.UserID.test)
url(r'^site_media/(?P<path>.*)$', static.serve, {'document_root': media_dir}),
self.course_outline.a11y_audit.config.set_scope( include=['section.edit-settings-timed-examination'] ) self.course_outline.a11y_audit.check_for_accessibility_errors()
ret = self.run_state( 'file.append', name=name, text='cheese' ) self.assertSaltTrueReturn(ret) self.assertTrue(os.path.isfile(name))
from salt.renderers import gpg from salt.exceptions import SaltRenderError
return self.get(key, default, version=version)
from __future__ import absolute_import
continue
ax = df.plot.bar(width=width) for r in ax.patches: self.assertEqual(r.get_width(), width / len(df.columns))
import salt.ext.six as six
DATABASE_ROUTERS = []
self._socket = self.context.socket(zmq.REQ) if hasattr(zmq, 'RECONNECT_IVL_MAX'): self._socket.setsockopt( zmq.RECONNECT_IVL_MAX, 5000 )
rgr_lasso = Lasso(alpha=0.001) rgr_lasso.fit(proj_operator, proj.ravel()) rec_l1 = rgr_lasso.coef_.reshape(l, l)
recipient_list.append(finance_email)
(["foo", "bar", "baz"], [None, "bar", "baz"]),
continue
if not whitelist_countries: whitelist_countries = cls.ALL_COUNTRIES
if bool(actual_data) != bool(data): ret.update({item: {'old': actual_data, 'new': data}})
assert_almost_equal(errors, errors2) assert_almost_equal(values, values2)
disturb_mem.disturb_mem() rng = np.random.RandomState([2012, 11, 27, 8])
subtask_status_info[current_task_id] = new_subtask_status.to_dict()
self.assertFalse(Index(['a', 'b', 'c']).equals(['a', 'b', 'c']))
instance = self.run_cloud('-p gce-test-extra {0}'.format(self.INSTANCE_NAME)) ret_str = '{0}:'.format(self.INSTANCE_NAME)
L1_units = theano.tensor.abs_(model.encode(X)).sum(axis=1).mean()
top_level_logger.setLevel(logging.DEBUG if debug else logging.INFO)
world.trigger_event(SELECTORS['url_inputs'], event='input', index=index)
if not is_list_like(n): n = np.array([n] * len(m))
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
user.__salt__ = {} user.__opts__ = {} user.__grains__ = {}
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
adjusted_rand_scorer = make_scorer(adjusted_rand_score)
from __future__ import absolute_import import copy import logging import os import re
if not pkgs: up_to_date = [] else: up_to_date = [x for x in pkgs if x not in targets]
with self.assertNumQueries(4): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
self.assertNotIn(self.module_key, self.loader)
cached_pkg = uninstaller
X_3d = X[:, :, np.newaxis] clf = MockClassifier(allow_nd=True) scores = cval.cross_val_score(clf, X_3d, y)
signal.signal(signal.SIGINT, self._handle_signals)
try: sdist = _make_sdist(opts, python_bin=python_bin) except NameError: sdist = _make_sdist(opts)
if self.opts['transport'] in ('zeromq', 'tcp'): key_dirs = self._check_minions_directories() else: key_dirs = self._check_minions_directories()
return self._index[mask.cumsum() >= self._window]
from __future__ import unicode_literals
biggie = DataFrame({'A': randn(200), 'B': tm.makeStringIndex(200)}, index=lrange(200))
continue
self.assertContains(response, "<h2>Built-in tags</h2>", count=2, html=True)
exp = Series(rankdata(filled), index=filled.index, name='ts') exp[mask] = np.nan
arr, index = _test_data2() arr[np.isnan(arr)] = 0 return arr, index
if lib_names: for lib_name in lib_names: lib_path = find_library(lib_name) if lib_path is not None: break
team_list = self.get_teams_list(user=user, expected_status=200, data=course_one_data) self.assertEqual(team_list['count'], 1)
indptr_3 = X_sparse_unpruned.indptr[3] indptr_4 = X_sparse_unpruned.indptr[4] X_sparse_unpruned.data[indptr_3:indptr_4] = 0.0
from __future__ import unicode_literals
export_name = escape_invalid_characters(name=filename, invalid_char_list=['/', '\\'])
X_sparse_pruned = sparse.csr_matrix(X_dense)
sparse_classifier = AdaBoostClassifier( base_estimator=CustomSVC(probability=True), random_state=1, algorithm="SAMME" ).fit(X_train_sparse, y_train)
values = lib.maybe_convert_objects(values, convert_timedelta=timedelta)
part = dtime.strftime(code)
'dark_lang.middleware.DarkLangMiddleware',
assert X.ndim == 2 return T.nnet.softmax(X*self.P)
connections['default'].allow_thread_sharing = True exceptions = [] do_thread() self.assertEqual(exceptions, [])
self.notes_page.go_to_page(3) self._verify_pagination_info( notes_count_on_current_page=1, header_text='Showing 26-26 out of 26 total', previous_button_enabled=True, next_button_enabled=False, current_page_number=2, total_pages=2 )
return '{0} not found'.format(name)
codeparam = self.xml.find('codeparam') assert codeparam is not None, "Unsupported old format! <coderesponse> without <codeparam>" self._parse_coderesponse_xml(codeparam)
exc_info_on_loglevel=logging.DEBUG
result._set_levels(levels, copy=copy, validate=False) result._set_labels(labels, copy=copy, validate=False)
uploaded_file = request.FILES['file']
course_key = usage_key.course_key
from __future__ import absolute_import
partitions = self._get_partition_info() self.assertEqual(len(partitions), 1) self.assertEqual(partitions[0]["scheme"], "verification")
@property def num_interior_rings(self): "Returns the number of interior rings." return capi.get_nrings(self.ptr)
setup_temp_logger() setup_extended_logging(opts)
ret['result'] = None ret['comment'] = ( 'Sysctl option {0} would be changed to {1}'.format(name, value) ) return ret
df = DataFrame({'col1': [1.123, 2.123, 3.123], 'col2': [1.234, 2.234, 3.234]})
from __future__ import unicode_literals
image_index[0] = min(image_index[0], len(row_indices))
result = df3[df3.index < 2] expected = df3.iloc[[4]] assert_frame_equal(result, expected)
students = [instructor, staff, self.coach] + [ UserFactory.create(is_staff=False) for _ in range(3) ]
df = DataFrame(index=[0, 1]) df[0] = nan wasCol = {}
truncated = ts.truncate() assert_frame_equal(truncated, ts)
mako_middleware_process_request(request)
import logging
log = logging.getLogger(__name__)
_step.given('I edit the component') world.wait_for_ajax_complete() _step.given('I save changes')
return [ self._load_item( course_key, item, data_cache, using_descriptor_system=using_descriptor_system, apply_cached_metadata=self._should_apply_cached_metadata(item, depth), for_parent=for_parent, ) for item in items ]
return not WORKTREE_INFO[key].get('stale', False)
self.import_static(data_path, dest_id)
add_instructor(destination_course_key, request.user, request.user)
mode = 2 if Minv is None: Minv_matvec = get_inv_matvec(M, symmetric=True, tol=tol) else: Minv = _aslinearoperator_with_dtype(Minv) Minv_matvec = Minv.matvec M_matvec = _aslinearoperator_with_dtype(M).matvec
deploy_scripts_search_paths = [] for entry in config.get('deploy_scripts_search_path', []): if entry.startswith(builtin_deploy_dir): continue
result = Timestamp(result) self.assertEqual(result.value, expected_tz) self.assertEqual(tslib.pydt_to_i8(result), expected_tz)
CourseModeFactory.create(mode_slug="honor", course_id=self.course.id, min_price=100)
loaded = yaml.load(yamlfile) logger.info(loaded) assert loaded['corruptor'] is loaded['dae'].corruptor
enrollment_mode = self.dashboard_page.get_enrollment_mode(self.course_info["display_name"]) self.assertEqual(enrollment_mode, 'verified')
continue
self.assertIn(self.user_name, self.certificates_section.last_certificate_exception.text) self.assertIn(expected_notes, self.certificates_section.last_certificate_exception.text)
profiles_config_path = overrides['profiles_config']
X = [[0., 1., +0.5], [0., 1., -0.1], [0., 1., +1.1]]
return None
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
from salt.exceptions import CommandExecutionError
_config_filename_ = 'proxy' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'proxy')
plt.figure(figsize=(10, 6)) ax = plt.gca() bmk.plot(DB_PATH, ax=ax)
return True
return
pass
weight_cdf = self.estimator_weights_[sorted_idx].cumsum(axis=1) median_or_above = weight_cdf >= 0.5 * weight_cdf[:, -1][:, np.newaxis] median_idx = median_or_above.argmax(axis=1)
n_classes = 4 n_samples = 50
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
container.add_missing_groups() self.verify_groups(container, ['Group B', 'Second Group', 'Group D'], ['Group ID 0'])
section_titles = [t for t in section_titles if t]
state = (self._corrupt_switch, self._sample_switch, self._bias_switch)
class PriceForm(Form): amount = FloatField() qty = IntegerField()
ws.close()
self.assertIsNotNone(self.request.session)
self.assertEqual( repr(Timestamp(2015, 11, 12)), repr(Timestamp('20151112')))
launch_mcd_on_dataset(1700, 5, 800, 0.1, 0.1, 870)
self.log('Adding intercept') x = x_regressor = add_intercept(x) x_filtered = add_intercept(x_filtered) y_regressor = y
unpickled = self.round_trip_pickle(self.tzframe) assert_frame_equal(self.tzframe, unpickled)
'pub_ret': bool,
self.course_fixture.add_course_details({'start_date': datetime.now() + timedelta(days=1)})
self.assertNotIn(REG_STR, resp.content)
if n_active: linalg.solve_triangular(L[:n_active, :n_active], L[n_active, :n_active], trans=0, lower=1, overwrite_b=True, **solve_triangular_args)
if enrollment_mode is None and is_active is None: return True
elif virtual is True and virtualname != module_name: if virtualname is not True: module_name = virtualname
return np.dot(np.dot(u * (1. / np.sqrt(s)), u.T), W)
course_org_filter = microsite.get_value('course_org_filter') if course_org_filter: field_dictionary['org'] = course_org_filter
del channel
return None
query = Query(self.model) query.add_filter(filter_expr) query.clear_ordering(True) trimmed_prefix, contains_louter = query.trim_start(names_with_path)
if fastpath: self._data.set_axis(axis, labels)
expected_str = ' '.join([operand2, op, operand1]) self.assertTrue(expected_str in getattr(klass, 'r' + op_name).__doc__)
from __future__ import unicode_literals
kwargs['related_name'] = '+' kwargs['unique'] = True super(CurrentTranslation, self).__init__(to, on_delete, from_fields, to_fields, **kwargs)
FIXTURE_DIRS = []
from ..gaussian_process.kernels import Kernel as GPKernel
self.conn.execute("DROP SCHEMA IF EXISTS other CASCADE;") self.conn.execute("CREATE SCHEMA other;")
from salt.modules.cmdmod import _parse_env import salt.utils from salt.exceptions import ( CommandExecutionError, MinionError, SaltInvocationError )
tm._skip_if_no_dateutil() import dateutil
CPLErrorHandler = CFUNCTYPE(None, c_int, c_int, c_char_p)
@patch.object(OrderItem, 'purchased_callback')
if csv_type is not None: try: redemption_set = registration_code.registrationcoderedemption_set redeemed_by = redemption_set.get(registration_code=registration_code).redeemed_by course_registration_dict['redeemed_by'] = redeemed_by.email except ObjectDoesNotExist: pass
import logging import os
return sig.replace(parameters=tuple(sig.parameters.values())[1:])
properties_update = [] for prop in properties: if prop not in properties_current: continue
request = HttpRequest() request.session = self.client.session
df['A'].ix[14] = 5 self.assertEqual(df['A'][14], 5)
get_parents=None, get_children=get_children, filter_func=filter_func,
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
from __future__ import unicode_literals
import salt.ext.six as six
for view in get_valid_salt_views(): if view not in _response['views']: return set_salt_view()
last_valid_score = self.validation_scores_[-1]
x = 0 for digit in str(number): x = x * len(from_digits) + from_digits.index(digit)
from salt.modules import poudriere
else: rs_c.columns = df.columns assert_frame_equal(df, rs_c, check_names=False)
for fpath in glob.glob(os.path.join(path, 'distribute-*.tar.gz*')): os.unlink(fpath)
ret.update({esxi_host: _format_firewall_stdout(response)})
return cache_and_return(Location._from_deprecated_son(found_id, location.course_key.run))
return False
state_run = self.run_function('state.sls', mods='requisites.listen_in_simple')
time = {} n_samples = np.linspace(start=0, stop=opts.n_population, num=opts.n_steps).astype(np.int)
self.assertFalse(user(email).is_active)
'openedx.core.djangoapps.safe_sessions.middleware.SafeSessionMiddleware',
class Rock(Mineral): tags = GenericRelation(TaggedItem)
piece.set_axis(cat_axis, piece._get_axis( cat_axis)._to_safe_for_reshape()) piece[all_key] = margin[key]
if EventMatchTolerates.STRING_PAYLOAD in tolerate: expected = parse_event_payload(expected) actual = parse_event_payload(actual)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../') import integration
xblock_info.update(_get_gating_info(course, xblock))
for y in clf.staged_predict(X_test): assert_equal(y.shape, y_pred.shape)
break
self._check_parameters(X)
self.panel['foo'] = lp2['ItemA'] assert_series_equal(self.panel['foo'].reindex(lp2.index), lp2['ItemA'], check_names=False)
with store.bulk_operations(xblock.location.course_key):
from datetime import datetime import sys import os import nose import numpy as np
remove_steps |= set([self.INTRO_STEP])
msg = u"Error in xml '{x}': {err} ".format( x=etree.tostring(xml), err=err.message) raise Exception, msg, sys.exc_info()[2]
sys.path.insert(0, os.path.join( virtualenv.path_locations(env)[1], 'site-packages'))
from django.contrib.contenttypes.models import ContentType return ContentType.objects.get_for_model(obj, for_concrete_model=False)
def __enter__(self): return self
self.sock = None self.io_loop = io_loop or IOLoop.current() self._closing = False self.streams = set()
transcripts = Dict(
PROFILE_COUNTRY_CACHE_KEY = u"user.{user_id}.profile.country"
for optgroup_key, optgroup_value in option_value: if value == optgroup_key: return
with self.assertRaises(ResponseError): problem.grade_answers({'1_2_1': '42'})
__salt__
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
import logging
self.send_future_map[message_id] = future
I_theory = (np.log(sigma_1) + np.log(sigma_2) - 0.5 * np.log(np.linalg.det(cov)))
raise SyntaxError("unknown encoding: " + encoding)
for saltenv, buckets in six.iteritems(_get_buckets()): bucket_files = {} for bucket_name in buckets: s3_meta = __get_s3_meta(bucket_name)
client.set( '/'.join((path, 'minions', ret['id'])), ret['jid'], ttl=ttl, )
org_list = list(set(org_list) | set(course.org for course in courses))
task_type = 'rescore_problem' task_class = rescore_problem task_input, task_key = encode_entrance_exam_and_student_input(usage_key, student) return submit_task(request, task_type, task_class, usage_key.course_key, task_input, task_key)
from django.core.management.base import BaseCommand from django.contrib.auth.models import User
with open(self.TEST_INDEX_FILENAME, "w+") as index_file: json.dump({}, index_file)
out_shape = [(ishp + tsp) * tshp - tsp for ishp, tshp, tsp in zip(img_shape, tile_shape, tile_spacing)]
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
xblock = self.store.create_item( self.user_id, test_course.id, 'vertical', block_id='test_vertical' )
'RESTRICT_ENROLL_BY_REG_METHOD': False,
import os import re import logging
assert_raises(ValueError, Pipeline, [('svc', SVC()), ('svc', SVC())])
for sort in [False, True]: merged1 = self.data.merge(self.to_join, left_on=['key1', 'key2'], right_index=True, how='left', sort=sort)
self.label_suffix = label_suffix if label_suffix is not None else _(':') self.empty_permitted = empty_permitted
if copy: subarr = subarr.copy()
filemod.replace(self.tfile.name, r'Etiam', 'Salticus', flags=['MULTILINE', 'ignorecase'])
run_check_cmd_kwargs = {'runas': user, 'python_shell': True} if 'shell' in __grains__: run_check_cmd_kwargs['shell'] = __grains__['shell']
renderers = salt.loader.render(__opts__, __salt__) config = {}
from __future__ import absolute_import import os
raise SkipTest
verticals = self.store.get_items(course_id, qualifiers={'category': 'vertical'})
@ignore_warnings def test_random_hasher(): hasher = RandomTreesEmbedding(n_estimators=30, random_state=1) X, y = datasets.make_circles(factor=0.5) X_transformed = hasher.fit_transform(X)
if correct: style = QUESTION_HINT_CORRECT_STYLE else: style = QUESTION_HINT_INCORRECT_STYLE
self.put = send
from salttesting.unit import TestCase from salttesting.helpers import ensure_in_syspath
__virtualname__ = 'virtualenv'
return __render_script('{0}.sh'.format(os_), vm_, opts, minion)
if len(names) == 1: return ret[names[0]] return ret
import salt.ext.six as six import salt.utils from salt.exceptions import SaltInvocationError
response = self._add_edx4edx() self.assertIn(GitImportErrorNoDir(settings.GIT_REPO_DIR).message, response.content.decode('UTF-8'))
url_fields[1] = url_fields[2] url_fields[2] = '' url_fields = split_url(urlunsplit(url_fields))
result = ci.delete(10)
with self.assertRaises(forms.ValidationError): f.clean('2010-12-21')
clf = self.factory(alpha=0.1, n_iter=1000, fit_intercept=False) clf.fit(X, Y, sample_weight=np.arange(7))
proc.start()
database += token try: if exploded_grant[position_tracker + 1] == '.': phrase = 'tables' except IndexError: break
response = self._generate(username=self.STUDENT_USERNAME) self.assertEqual(response.status_code, 400)
cat = pd.Categorical(['a', 'b', 'c', 'd', 'a'])
obj1 = Storage() self.assertEqual(obj1.normal.name, "") with self.assertRaises(ValueError): obj1.normal.size
get_version = { 'Linux': linux_diskstats, 'FreeBSD': freebsd_diskstats, }
def f(): s[l]
past_due_date = CapaFactory.create(showanswer='finished', max_attempts="1", attempts="0", due=self.yesterday_str) self.assertTrue(past_due_date.answer_available())
return unpack('i', data[106:114])[0]
[self.shape[i] for i in (2, 0, 1)])
index = 0
obj = obj.astimezone(UTC)
output_format.append(guess)
finally: HIGHSTATE.pop_active()
@savefig test_hist.png width=4in In [151]: hist(np.random.randn(10000), 100);
params = self.correct_inputs.get(answer_name, {'answer': 0})
self.selection = Selection(self, where=where, **kwargs) values = self.selection.select()
from __future__ import unicode_literals
if __grains__['os_family'] == 'RedHat': output = _cmd('at', '-l') else: output = _cmd('atq')
from salt.utils.odict import OrderedDict from salt.modules import jboss7
for child in self.get_display_items(): rendered_child = child.render(STUDENT_VIEW, child_context) fragment.add_frag_resources(rendered_child)
self._consolidate_inplace() new_data = self._data.xs(i, axis=axis, copy=True, takeable=True) return self._construct_return_type(new_data)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
X, y = datasets.make_classification(n_samples=1000, n_features=100, n_informative=20, random_state=1234)
import salt.utils import salt.ext.six as six from salt.exceptions import CommandExecutionError
assert_frame_equal(frame, align(res), check_dtype=how not in ('right', 'outer'))
assert_array_almost_equal((tfidf ** 2).sum(axis=1), [1., 1., 1.])
res = __salt__['cmd.run_all'](cmd)
actions = OrderedDict( (name, (func, name, desc)) for func, name, desc in actions )
return self.q(css="#prereq_min_score").visible
n_samples = X.shape[0] sample_idxs = np.arange(n_samples)
editable_fields[SplitTestFields.user_partition_id.name] = self._create_metadata_editor_info( SplitTestFields.user_partition_id )
res = grainsmod.filter_by(dict1, grain='xxx', default='Z') self.assertIs(res, None)
C = 1. fit_intercept = True tol = 1.0e-14
with tm.assertRaises((ValueError, TypeError)): s.plot(yerr=s_err)
if self.youtube_id_1_0: encoded_videos["youtube"] = { "url": self.create_youtube_url(self.youtube_id_1_0),
result.update(_sysfs_parse(_bcpath(dev), base_attr, stats, config, internals)) result.update(_sysfs_parse(_fspath(), base_attr, stats, config, internals))
raise TypeError("invalid type {0} for astype".format(dtype))
draft_only = 'rev-opt-draft-only'
from lms.envs.test import ( WIKI_ENABLED, PLATFORM_NAME, SITE_NAME, DEFAULT_FILE_STORAGE, MEDIA_ROOT, MEDIA_URL, )
can_introspect_decimal_field = True
progress = {'message': TEST_FAILURE_MESSAGE, 'exception': TEST_FAILURE_EXCEPTION, } return self._create_entry(task_state=FAILURE, task_output=progress)
LANGUAGES_BIDI = ["he", "ar", "fa", "ur"]
log = logging.getLogger(__name__)
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
newFrame = self.frame.reindex([]) self.assertTrue(newFrame.empty) self.assertEqual(len(newFrame.columns), len(self.frame.columns))
cmd = '{0}.{1}'.format(self.cmd_prefix, cmd)
lines = __salt__['cmd.run_stdout']("/bin/pkg list -Huv").splitlines() for line in lines: upgrades[_ips_get_pkgname(line)] = _ips_get_pkgversion(line) return upgrades
data = out.getvalue()
import json
REQUIRE_EXCLUDE = ("build.txt",)
import salt.ext.six as six
import json import logging import random import string
pass
return ret
from salttesting import TestCase
' 1.0M'
if hasattr(other, 'name'): return self.name == other.name return self.name == other
content = template.render({'processors': 'no'}, request) self.assertEqual(content, 'no')
n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)
from __future__ import unicode_literals
import salt.utils
return ['--local']
cumprod = self.tsframe.cumprod() expected = self.tsframe.apply(Series.cumprod) tm.assert_frame_equal(cumprod, expected)
with self.assertNumQueries(3): lst1 = self.traverse_qs( Person.objects.prefetch_related('houses', 'houses__rooms'), [['houses', 'rooms']] )
alias = _weekday_rule_aliases[self.rep_stamp.weekday()] return _maybe_add_count('W-%s' % alias, days / 7)
query = X[rng.randint(0, n_samples)].reshape(1, -1)
context['duplicate_provider'] = pipeline.get_duplicate_provider(messages.get_messages(request))
self.assertFalse(self.cohort_management_page.is_save_button_disabled(self.inline_key))
return None
if paramvalues['binddn']: connargs['binddn'] = paramvalues['binddn'] if paramvalues['bindpw']: params['mandatory'].append('bindpw')
self.assertRaises(ValueError, lambda: Timedelta('-10 days -1 h 1.5m 1s 3us'))
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
from __future__ import absolute_import import os
self.assertEqual(len(utils.get_accessible_discussion_modules(course, self.user)), 1)
class FrameworkForm(Form): name = CharField() language = ChoiceField(choices=[('P', 'Python'), ('J', 'Java')])
def _get_rename_function(mapper): if isinstance(mapper, (dict, ABCSeries)):
return self.metric == 'precomputed'
v3 = CountVectorizer(vocabulary=None) assert_raises(ValueError, v3.transform, train_data)
log.shutdown_multiprocessing_logging_listener()
import functools import operator
self.test_tab = ItemFactory.create( parent_location=self.course.location, category="static_tab", display_name="Static_1" ) self.reload_course()
n_samples_per_label = np.bincount(labels)
if depth == 0: self.get_module.side_effect = lambda x: LeafModuleFactory(descriptor_cls=HtmlDescriptor) else: self.get_module.side_effect = lambda x: ContainerModuleFactory( descriptor_cls=VerticalBlock, depth=depth - 1 )
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
self.assertEqual(len(snapshot['country_rules']), len(country_rules))
from salt.exceptions import SaltInvocationError import salt.utils.http
ItemFactory.create( parent_location=self.course.location, category="discussion", discussion_id="Topic_A", discussion_category="Chapter", discussion_target="Discussion", start=now )
step = None if 0 in cost_matrix.shape else _step1
X = X_2d[:100, :]
assert_array_almost_equal(x_rotations_sign_flip, x_weights_sign_flip) assert_array_almost_equal(np.abs(x_rotations_sign_flip), 1, 4) assert_array_almost_equal(np.abs(x_weights_sign_flip), 1, 4)
minor_axis = SparsePanelAxis('_minor_axis', 'columns')
FEATURES['ENABLE_TEAMS'] = True
xml.tail = self.tail return xml
from pandas import tslib td = Series([timedelta(days=1), tslib.NaT], dtype='m8[ns]') self.assertEqual(td.dtype, 'timedelta64[ns]')
if FEATURES.get('ENABLE_CSMH_EXTENDED'): INSTALLED_APPS += ('coursewarehistoryextended',)
assert_in(InheritanceMixin, root.xblock_mixins)
result = to_timedelta('', box=False) self.assertEqual(result.astype('int64'), tslib.iNaT)
X = np.ones((10, 2)) X[:5, :] = 0
<script type="{}"> ${{x | n, dump_js_escaped_json}} </script>
if not name: raise ValueError(u"{key} must contain at least one underscore".format(key=key))
messages = _log_level_code(level, status_code) self.assertIn('GET A %d' % status_code, messages[0])
self.duration_sec = 'unknown'
tracker.emit( SETTING_CHANGE_INITIATED, { "setting": "password", "old": None, "new": None, "user_id": request.user.id, } )
from salt.utils.winservice import Service, instart import salt import salt.defaults.exitcodes
parent = None
self.assertIsInstance( self.run_function('softwareupdate.update_all'), dict)
offset = self._offset() offset2 = self._offset() offset2.normalize = True self.assertEqual(offset, offset2)
with self.assertNumQueries(20): api.set_credit_requirement_status( "bob", self.course_key, requirements[1]["namespace"], requirements[1]["name"] )
self.assertIs(r1.article_set.__class__, r2.article_set.__class__)
continue
MobileApiConfig(video_profiles="mobile_low,mobile_high,youtube").save()
layer_to_chains = model.sampling_procedure.sample( layer_to_chains, self.theano_rng, num_steps=self.num_gibbs_steps )
cleanup_services = config.get_cloud_config_value( 'cleanup_services', get_configured_provider(), __opts__, search_global=False, default=False ) if cleanup_services: log.debug('Deleting service {0}'.format(service_name))
x = np.arange(plots.shape[1]) x += n_min
lhs = pd.eval(value, local_dict=self.env, engine=self.engine, parser=self.parser) v = lhs[result]
if 'HTTP_USER_AGENT' in request.META: for user_agent_regex in settings.DISALLOWED_USER_AGENTS: if user_agent_regex.search(request.META['HTTP_USER_AGENT']): raise PermissionDenied('Forbidden user agent')
actual = grouped_df.pid.transform(len) assert_series_equal(actual, expected)
a_date = Period(freq='A', year=2007) self.assertEqual(a_date.year, 2007)
if __opts__['test']: ret['result'] = None return ret
FEATURES['ENTRANCE_EXAMS'] = True ENTRANCE_EXAM_MIN_SCORE_PCT = 50
from __future__ import absolute_import import os
return super(PersonAdmin, self).get_queryset(request).order_by('age')
from __future__ import absolute_import import copy import logging import time import traceback
try: import boto import boto.ec2.elb HAS_BOTO = True except ImportError: HAS_BOTO = False
from __future__ import unicode_literals
width = self.ext.config['veoh_width'][0] height = self.ext.config['veoh_height'][0] return flash_object(url, width, height)
X = csc_matrix(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
'SHOW_LANGUAGE_SELECTOR': False,
log = logging.getLogger(__name__)
return dict(_list_hosts())
import salt.utils from salt.exceptions import SaltInvocationError
return sample_weight, 1., 0.
required.append(item_name)
X = [[1]] Y = [0]
self.ymd.astype(int).unstack()
'syndic_master_port', opts.get( 'master_port', minion_defaults.get( 'master_port', DEFAULT_MINION_OPTS['master_port'] ) )
filepath = filename
from __future__ import absolute_import
response = self.client.get(self.path, **headers) self.assertEqual(response.status_code, 403)
pass
self.d = datetime(2014, 7, 1, 10, 00) self.offset1 = CustomBusinessHour(weekmask='Tue Wed Thu Fri')
BULK_EMAIL_MAX_RETRIES = 5
for __ in xrange(certificate_count): self.generate_certificate( course_id=self.course.id, mode='verified', status=CertificateStatuses.downloadable )
self.assertValueQuerysetEqual( ExtraInfo.objects.values('note_id'), [{'note_id': 1}, {'note_id': 2}] )
'f82b5416c9f54b5ce33989511bb5ef2e', self._get_anonymous_id(SlashSeparatedCourseKey('MITx', '6.00x', '2013_Spring'), descriptor_class)
s = Series(index=[1, 2, 3]) rs = s.apply(lambda x: x) tm.assert_series_equal(s, rs)
reg_codes = cls.objects.filter(course_enrollment=course_enrollment).order_by('-redeemed_at') if reg_codes: return reg_codes[0]
arr = randn(10) dm = DataFrame(arr, columns=['A'], index=np.arange(10)) self.assertEqual(dm.values.ndim, 2)
self.process_manager.stop_restarting() self.process_manager.send_signal_to_processes(signum) self.process_manager.kill_children()
return False
@property def tuple(self): "Returns a tuple version of the geometry from the coordinate sequence." return self._cs.tuple coords = tuple
self.assertAlmostEqual(p.x, pnt.tuple[0], 9) self.assertAlmostEqual(p.y, pnt.tuple[1], 9)
locate.__salt__ = {}
def lazy_wrap(self, wrapped_object): return SimpleLazyObject(lambda: wrapped_object)
data = fetch_species_distributions()
self.assertRaises(ValueError, lambda: DatetimeIndex( i.tz_localize(None).asi8, dtype=i.dtype, tz='US/Pacific'))
train, target = iris.data, iris.target n_samples, n_features = train.shape
kwargs.update(arg)
if '/' == asset_key_string[0]: asset_key_string = asset_key_string[1:] asset_key = AssetKey.from_string(asset_key_string) try: delete_asset(course_key, asset_key) except AssetNotFoundException: pass
class SpecialArticle(Article): pass
self.assertTrue(self.video.downloaded_transcript_contains_text('srt', '00:00:00,260'))
config.groups[2].name = "Second Group"
class FakeObj(object): def get_absolute_url(self): return "/hi-there/"
def remove_flags_docstring(app, what, name, obj, options, lines): if what == "attribute" and name.endswith(".flags"): del lines[:]
data_parser = struct.Struct('LHHHHHHL') ReparseTag, ReparseDataLength, Reserved, SubstituteNameOffset, \ SubstituteNameLength, PrintNameOffset, \ PrintNameLength, Flags = data_parser.unpack(reparse_data[:data_parser.size])
def _get_byteorder(self): return wkb_writer_get_byteorder(self.ptr)
deployed = _wget('deploy', opts, url, timeout=timeout) res = '\n'.join(deployed['msg'])
RM_SUBDIRS_RETRY_TIME = 0.1
data = {'changed': False, 'files': {'changed': []}, 'backend': 'roots'}
_ = lambda text: text
if (isinstance(ax, MultiIndex) and not (is_integer(i) or is_null_slice(i))): take_split_path = True break
rvals, _ = scan( armijo, outputs_info=states, n_steps=n_iters, name='armijo', mode=theano.Mode(linker='cvm'), profile=profile)
assert_raises(ValueError, load_svmlight_file, datafile, n_features=20)
with self.assertRaises(connection.features.closed_cursor_error_class): cursor.execute("SELECT 1" + connection.features.bare_select_suffix)
for bad_map in (bad1, bad2, bad3): with self.assertRaises(LayerMapError): LayerMapping(City, city_shp, bad_map)
from __future__ import unicode_literals
pofile = os.path.join(proj_dir, 'locale', 'fr', 'LC_MESSAGES', 'django.po')
self._check_non_staff_light(self.test_course) self._check_non_staff_dark(self.test_course) self._check_staff(self.course)
existing_files = self._pkgfiles_fun('check_existing', pkg_name, pkg_files, formula_def)
assert_index_equal(left.index, right.index, exact=check_index_type, check_names=check_names, check_less_precise=check_less_precise, check_exact=check_exact, check_categorical=check_categorical, obj='{0}.index'.format(obj))
if 'where' in kwargs: kwargs['where'] = _ensure_term(kwargs['where'], scope_level=1)
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
from __future__ import absolute_import
from __future__ import absolute_import import re
_, sap, _ = randomized_svd(X, k, power_iteration_normalizer=normalizer, random_state=0)
response = self.client.get(self._get_url(self.course_key, "invalid_checkpoint")) self.assertEqual(response.status_code, 404)
version = unichr(unicode_char)
from __future__ import absolute_import
level_strs = self.df.index.format(sparsify=True, adjoin=False, names=False) level_lengths = _get_level_lengths(level_strs)
from __future__ import absolute_import
result = df.ix[1.0:5] expected = df assert_frame_equal(result, expected) self.assertEqual(len(result), 5)
display_name = models.CharField(max_length=255, default="", blank=True)
res = df.query('index < 5', engine=engine, parser=parser) expec = df[df.index < 5] assert_frame_equal(res, expec)
return True
rng = date_range("2012-11-15 00:00:00", periods=6, freq="H", tz="US/Central")
time_last_reset = history[0].time_set
emails = instructor_task.api.get_instructor_task_history(course_id, task_type=task_type)
foo = Foo()
def __init__(self, opts, io_loop=None): pass
if other.ndim <= self.ndim:
if status is not None: days_until_deadline = None
np.maximum(R, 0, tmp) tmp.flat[::n_samples + 1] = R.flat[::n_samples + 1]
if current_node not in yield_results:
if 'default' in settings.MICROSITE_CONFIGURATION: self._set_microsite_config('default', subdomain, domain) return
from salt.exceptions import (CommandExecutionError, SaltInvocationError, SaltRenderError) import salt.utils import salt.syspaths from salt.exceptions import MinionError
'ENFORCE_PASSWORD_POLICY': True,
assert (not com.is_timedelta64_ns_dtype(tdi.astype('timedelta64'))) assert (not com.is_timedelta64_ns_dtype(tdi.astype('timedelta64[h]')))
response = other_view(request, '8') self.assertEqual(response.content, b'Hello World 7')
azure.get_blob( storage_conn=storage_conn, container=env, name=blob, local_path=file_name, )
if iface_type not in ['slave']: return __salt__['cmd.run']('ip link set {0} down'.format(iface)) return None
from __future__ import absolute_import import os import textwrap import tempfile
from salttesting.helpers import ensure_in_syspath, skip_if_binaries_missing ensure_in_syspath('../../')
self.course_info['number'] = self.unique_id[0:6]
if pk is None and slug is None: raise AttributeError("Generic detail view %s must be called with " "either an object pk or a slug." % self.__class__.__name__)
np.argsort(np.array([[1, 2], [1, 3], [1, 2]], dtype='i')) np.argsort(items2, kind='mergesort')
if which_set == 'test': content = content[1:] content = content[:-1]
result = data.get_course_enrollment(self.user.username, unicode(self.course.id)) self.assertIsNone(result)
expected = (-96.8016128540039, 29.7633724212646, -95.3631439208984, 32.782058715820)
parent = models.OneToOneField(Place, models.CASCADE, primary_key=True, parent_link=True) capacity = models.IntegerField()
parameters = {'alpha': alphas} fit_params = {'sample_weight': sample_weight} gs = GridSearchCV(Ridge(), parameters, fit_params=fit_params, cv=cv) gs.fit(X, y)
clf = QuadraticDiscriminantAnalysis(reg_param=0.1) with ignore_warnings(): clf.fit(X5, y5) y_pred5 = clf.predict(X5) assert_array_equal(y_pred5, y5)
return LocalTimezone()
result = s.reorder_levels([0, 1, 2]) assert_series_equal(s, result)
if os.path.isfile(cached_file_path): file_meta = _find_file_meta(metadata, bucket_name, saltenv, path) if file_meta: file_etag = file_meta['ETag']
if 'honor' not in course_mode_slugs: cert_status['status'] = CertificateStatuses.auditing return cert_status
path = '%s.csv' % tm.rands(10) self.assertRaises(IOError, self.read_csv, path)
CLIENT_TIMEOUT = 60
pygments_style = 'sphinx'
assert_in(role, ['instructor', 'staff'])
all_assets = SortedAssetList(iterable=[], key=key_func) for asset_type, val in course_assets.iteritems(): all_assets.update(val)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
key = unichr(unicode_char)
self.assertIsInstance(b.baked_timestamp, datetime.datetime) self.assertIsInstance(b.baked_date, datetime.date) self.assertNotIsInstance(b.baked_date, datetime.datetime)
from __future__ import unicode_literals
result = f.clean('21.12.2010') self.assertEqual(result, date(2010, 12, 21))
ret['changes'] = { 'testing': { 'old': 'Unchanged', 'new': 'Something pretended to change' } }
from napalm import get_network_driver HAS_NAPALM = True
from salt.ext import six
no_exc_record = copy(record) no_exc_record.exc_info = None no_exc_record.exc_text = None
if refresh: refresh_db()
with self.assertRaises(VersionConflictError): _fail = modulestore().create_child( user, new_course.location, 'chapter', fields={'display_name': 'chapter 3'}, )
CDN_VIDEO_URLS = {}
default=_("Text")
self.assertIsNotNone(current_last_activity)
self.assertAlmostEqual(c1[0] + xfac, c2[0], 5) self.assertAlmostEqual(c1[1] + yfac, c2[1], 5)
#html_additional_pages = {}
offsets = [pd.offsets.Hour(2), timedelta(hours=2), np.timedelta64(2, 'h'), Timedelta(hours=2)]
return
from __future__ import absolute_import
source_keys = [source_container.children[0]] new_blocks = self.store.copy_from_template(source_keys, dest_key=course.location, user_id=self.user_id) self.assertEqual(len(new_blocks), 1)
self.mean_ = np.mean(X, axis=0) X -= self.mean_
del dirs[:]
course_path = "/courses/{}".format(course_id.to_deprecated_string())
_ = lambda text: text
user_partititons = self.course.user_partitions self.assertEqual(len(user_partititons), 1) self.assertEqual(user_partititons[0].name, 'Name 1')
import integration from salt.output import display_output import salt.config
self.assertContains(response, checkbox_html, html=True) self.assertContains(response, org_name_string)
text = f.widget.format_value(result) self.assertEqual(text, "13:30:00")
self.annealed = sharedX(base_lr, 'annealed')
object_domain = None
return value.encode(ISO_8859_1) if six.PY3 else value
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self.send_future_map[message] = future
keep_looping = True continue
self.assertEqual(response.status_code, 200)
from Crypto.PublicKey import RSA import salt.ext.six as six from salt.ext.six.moves import range
class Person(models.Model): name = models.CharField(max_length=128)
X, y = make_blobs(random_state=1) for Model in [DPGMM, VBGMM]: dpgmm = Model(n_components=10, random_state=1, alpha=20, n_iter=50, verbose=1)
f = lambda x: x.set_index('a', inplace=True) _check_f(data.copy(), f)
else: self.append_subcluster(subcluster) return True
TEST_DATA_MONGO_MODULESTORE = functools.partial(mixed_store_config, mkdtemp_clean(), {})
ECOMMERCE_PUBLIC_URL_ROOT = None ECOMMERCE_API_URL = None ECOMMERCE_API_SIGNING_KEY = None ECOMMERCE_API_TIMEOUT = 5 ECOMMERCE_SERVICE_WORKER_USERNAME = 'ecommerce_worker'
copy_cov = False cov = np.dot(dictionary, X.T)
def __getstate__(self): return {"valid": self.valid, "value": self.value}
from pandas.tseries.plotting import tsplot import matplotlib.pyplot as plt
return allowed_origins
'openedx.core.djangoapps.safe_sessions.middleware.SafeSessionMiddleware',
self.mixed_frame._data.ndim
files = request.FILES or {} error_msg = _check_files_limits(files) if error_msg: return JsonResponse({'success': error_msg}, status=413)
level_values = _maybe_casted_values(lev, lab) if level is None or i in level: new_obj.insert(0, col_name, level_values)
return True
self.shape = tuple(shape) self.num_channels = num_channels if axes is None: axes = self.default_axes assert len(axes) == 4 self.axes = tuple(axes)
where = [True] * 10 where[-2] = False result = store.select('df2', where=where) expected = df.loc[where] tm.assert_frame_equal(result, expected)
y = np.array([3, 3, -1, -1, 3])
print "checking effects..." after = EmailEnrollmentState(self.course_key, eobjs.email) self.assertEqual(after, after_ideal)
enrollment.deactivate() self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assert_unenrollment_event_was_emitted(user, course_id)
from salttesting import TestCase from salttesting.case import ShellTestCase from salttesting.mixins import CheckShellBinaryNameAndVersionMixIn from salttesting.parser import PNUM, print_header, SaltTestcaseParser from salttesting.helpers import requires_sshd_server from salttesting.helpers import ensure_in_syspath, RedirectStdStreams
primitive_command = -2
op(a, b, axis=0)
if isinstance(opts, list): opts = ','.join(opts) lines = [] change = False present = False automaster_file = "/etc/auto_master"
urllib3_logger = logging.getLogger('urllib3') urllib3_logger.setLevel(logging.WARNING)
self.assertFalse(user_has_role(self.user, CourseCreatorRole()))
jll = safe_sparse_dot(X, (self.feature_log_prob_ - neg_prob).T) jll += self.class_log_prior_ + neg_prob.sum(axis=1)
sorted_grid_scores = list(sorted(search.grid_scores_, key=lambda x: x.mean_validation_score)) best_score = sorted_grid_scores[-1].mean_validation_score assert_equal(search.best_score_, best_score)
from __future__ import absolute_import
with self.assertRaises(ValueError): with transaction.atomic(using='default'): marty.book_set.add(dive)
if compzone is True: ret['result'] = True messages.append('Timezone {0} already set'.format(name)) else: do_zone = True
from __future__ import absolute_import, with_statement from distutils.version import LooseVersion import time import inspect import logging
import logging log = logging.getLogger(__name__)
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, source_course_key): component = self.store.get_item(unit.location) self.assertEqual(component.display_name, updated_display_name)
self.assertTrue(self.advanced_settings.is_validation_modal_present())
self.track_selection_page.visit()
oldcmap = self.correct_map
pass
__set_levels = deprecate("setting `levels` directly", partial(set_levels, inplace=True, verify_integrity=True), alt_name="set_levels") levels = property(fget=_get_levels, fset=__set_levels)
context = {
from salt.states import mac_xattr as xattr
old = Index([1, 4]) new = Index(lrange(5, 10)) filler = _algos.backfill_int64(old.values, new.values)
with self.apps.bulk_update(): for rel_app_label, rel_model_name in related_models: self.apps.unregister_model(rel_app_label, rel_model_name)
pass
return uid
if settings.COMPREHENSIVE_THEME_DIR: enable_comprehensive_theme(settings.COMPREHENSIVE_THEME_DIR)
self.assertTrue( self.run_function( 'git.clone', [clone_parent_dir, self.repo], name=clone_name ) ) shutil.rmtree(clone_parent_dir)
('union', FeatureUnion( transformer_list=[
if sample_weight is None: sample_weight = np.ones(n_samples, dtype=np.float64, order='C')
qs = Parcel.objects.filter(center1__within=F('border1')) self.assertEqual(1, len(qs)) self.assertEqual('P2', qs[0].name)
return
'ioflo_realtime': bool,
self._assert_num_requests(2)
CourseFactory.create(emit_signals=True)
self._export_import_course_round_trip( self.store, contentstore, source_course_key, self.export_dir )
return
self.assertEqual(self.offset2.rollback(d), datetime(2014, 6, 26, 17))
elif not len(sl - set(compat.iterkeys(arg))):
DATE_INPUT_FORMATS = [
user_perms = get_user_permissions(request.user, course_key) if not user_perms & STUDIO_VIEW_USERS: raise PermissionDenied()
if not inspect.isclass(filt): continue
old = list_pkgs()
if idx.equals(df.index) and cols.equals(df.columns): return df.copy()._values
modulestore().get_course(self.course.id, depth=None)
buckets = 10 bucket_width = 1. / float(buckets) for i in xrange(buckets): lower_lim = i * bucket_width upper_lim = (i+1) * bucket_width
from __future__ import absolute_import import logging
changed_module = StudentModule.objects.get(pk=self.module_to_reset.pk) self.assertEqual( json.loads(changed_module.state)['attempts'], 0 )
self.assertQuerysetEqual(Article.objects.all(), ['<Article: Parrot programs in Python>'])
if not blk._can_consolidate: for mgr_loc in mgr_locs: newblk = blk.copy(deep=True) newblk.mgr_locs = slice(mgr_loc, mgr_loc + 1) blocks.append(newblk)
checkpoint.add_verification_attempt(self.attempt)
clf = self.factory(alpha=0.01, n_iter=5, shuffle=False) clf.fit(X, Y) Y_ = np.array(Y)[:, np.newaxis]
tol = 2 * np.finfo(A.dtype).eps
name_is_eq = (other.get('name') is None or self.name == other['name'])
RateLimitConfiguration.objects.create(enabled=False)
response_element = etree.Element("customresponse")
'ALLOW_COURSE_RERUNS': True,
#latex_logo = 'images/snake_theta2-trans.png' latex_logo = None
get_input_endpoint = show_input_endpoint
with os.fdopen(fh_, 'w'): pass log.trace('Write lock %s obtained', lock_fn) obtained_lock = True yield break
return int(r_hash.hexdigest()[:7], 16) % NUM_RANDOMIZATION_BINS
self.assertTrue(self.run_function('softwareupdate.reset_ignored')) self.assertEqual(self.run_function('softwareupdate.list_ignored'), [])
courses = CourseOverview.get_all_courses( org=org, filter_=filter_, ) if org == microsite_org else []
e = b + (Timestamp(end).value - b) // stride * stride + stride // 2 tz = start.tz
DATE_FORMAT = 'j F Y' TIME_FORMAT = 'g:i A' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'j M Y'
w = clf.coef_[0] a = -w[0] / w[1] xx = np.linspace(-5, 5) yy = a * xx - (clf.intercept_[0]) / w[1]
U, s, V = linalg.svd(X, full_matrices=False)
if os.getuid() == 0 and not salt.utils.is_windows(): os.kill(parent_pid, 0)
return name, path, args, kwargs
CourseEnrollmentFactory( user=self.user, is_active=True, mode=mode, course_id=unicode(self.course.id), )
else: self.log_error( "Multiple response patterns matched '{0}'".format(xqueue_body_json), ) return
for key, val in new_block.edit_info.to_storable().iteritems(): if getattr(destination_block.edit_info, key) is None: setattr(destination_block.edit_info, key, val)
X = sparse.csr_matrix(X)
buf = c_char_p(b'') srs = capi.new_srs(buf)
response = default_with_prefix_view(request, '12') self.assertEqual(response.content, b'Hello World 4')
try: complex(settings[setting]) value = settings[setting] except ValueError: value = "'{0}'".format(settings[setting])
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
for key, value in state.items(): setattr(settings, key, value)
visit_scenario_item('SECTION')
uri = resolve_target(domain, info) if not uri: continue
from salt.states import pecl
pass
if self.ndim > 3: raise NotImplementedError('Cannot fillna with a method for > ' '3dims')
centos7-2-iad-rackspace: provider: rackspace-iad size: general1-2 boot_volume: <volume id>
p_shared = sharedX(zv[:, :, 0:rows:pool_rows, 0:cols:pool_cols]) h_shared = sharedX(zv) z_shared = sharedX(zv)
self.assertContains(response, "Email is not enabled for this course.", status_code=403)
STATICFILES_STORAGE = 'pipeline.storage.NonPackagingPipelineStorage'
from salt.modules import mod_random import salt.utils.pycrypto from salt.exceptions import SaltInvocationError
if isinstance(value, ABCDataFrame) and value.ndim > 1: sub_indexer = list(indexer) multiindex_indexer = isinstance(labels, MultiIndex)
pan = web.get_data_yahoo('XOM', '2013-01-01', '2013-12-31', interval='v') self.assertEqual(len(pan), 4)
try: from setuptools import setup except ImportError: from distutils.core import setup
for current_value in current_values: permissions = str() for permission_name in _PERMISSION_TYPES: if current_value['vdata'] == _PERMISSION_TYPES[permission_name]: permissions = permission_name break ret[current_value['vname']] = permissions
REMOVE_SPAN_TAG_RE = re.compile(r'</span>(.+)<span')
first_obj = obj_list[0] to_attr = lookup.get_current_to_attr(level)[0] prefetcher, descriptor, attr_found, is_fetched = get_prefetcher(first_obj, through_attr, to_attr)
django_settings.FIELDS_STORED_IN_SESSION = _FIELDS_STORED_IN_SESSION
assert x.ndim == 4 axes = self.input_space.axes assert len(axes) == 4
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.bio_book])
try:
result = defaultdict(dict) for field in xblock.fields.itervalues(): if field.is_set_on(xblock): result[field.scope][field.name] = field.read_from(xblock) return result
return reclass_ext_pillar(minion_id, pillar, **kwargs)
many_days = datetime.timedelta(days=60)
_config_filename_ = 'master' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'api')
return salt.utils.pem_finger(os.path.join(__opts__['pki_dir'], 'minion_master.pub'), sum_type=__opts__.get('hash_type', 'md5'))
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
f = lambda x: len(set(map(id, x.index))) grouped.agg(f)
clf = GradientBoostingClassifier(n_estimators=100, random_state=1, subsample=1.0) clf.fit(X, y) assert_raises(AttributeError, lambda: clf.oob_improvement_)
from __future__ import absolute_import import logging
self.import_asset_metadata(data_path, dest_id)
segments = mailchimp.listStaticSegments(id=list_id) for seg in segments: if seg['name'].startswith('random'): mailchimp.listStaticSegmentDel(id=list_id, seg_id=seg['id'])
PARENTAL_CONSENT_AGE_LIMIT = 13
else: retcode = 0
return i + (self._offset * self.n)
if created: manual_cohorts = CourseUserGroup.objects.filter( course_id=course.id, group_type=CourseUserGroup.COHORT ).exclude(name__in=course.auto_cohort_groups) for cohort in manual_cohorts: CourseCohort.create(course_user_group=cohort)
profiles_config_path = _absolute_path(profiles_config_path, config_dir)
if not self.q(css="input.timed_exam").present: return False
Author.objects.create(name='Charles Baudelaire') qs = Author.objects.all()
result = type(self)() memo[id(self)] = result return result
if _mini_batch_convergence( self, iteration_idx, n_iter, tol, n_samples, centers_squared_diff, batch_inertia, convergence_context, verbose=self.verbose): break
ROOT_EXTRA_FIELDS = 'root_extra_fields'
if unicode(val) == student_answers[aid]: return '$' + key
'ADVANCED_SECURITY': False,
from salt.exceptions import SaltInvocationError import salt.utils
new_chapter = self.store.create_child(self.user_id, courses[0].location, 'chapter', 'new_chapter') asides = new_chapter.runtime.get_asides(new_chapter)
if name in list_tasks(location):
expected_warning = Warning if PY35 else PerformanceWarning with tm.assert_produces_warning(expected_warning=expected_warning, check_stacklevel=False): ser = Series(values, [0, 'y']) self._check_roundtrip(ser, func)
import sys from collections import namedtuple, Iterable, Sequence, Mapping import logging
objects = Series([1, 2, 3], dtype=object)
import salt.utils import salt.utils.dictupdate from salt.defaults import DEFAULT_TARGET_DELIM from salt.exceptions import SaltException
if lib.isscalar(obj) or not hasattr(obj, 'ndim'): break
email, password = self._create_unique_user()
if cfg.versionfile_build: target_versionfile = os.path.join(self.build_lib, cfg.versionfile_build) print("UPDATING %s" % target_versionfile) write_to_version_file(target_versionfile, versions)
s = Series(date_range('2000-01-01 09:00:00', periods=5, tz='US/Eastern'), name='foo') result = s - s.shift()
self.notes_page.search("note") self.assertFalse(self.notes_page.is_error_visible) self.assertIn(u"Search Results", self.notes_page.tabs)
self.assertEqual(cl.result_count, 1)
result = f.clean('1:30 PM') self.assertEqual(result, time(13, 30, 0))
if _has_infs(result): result = alt(values, axis=axis, skipna=skipna, **kwds)
if isnull(value): value = tslib.iNaT
return __render_script(os_, vm_, opts, minion)
n_samples = 100 n_features = 500 rank = 4 k = 10
from __future__ import absolute_import import pprint
clf = self.factory() clf.fit(X2, Y2)
remote_rev = all_remote_refs['refs/tags/' + rev] remote_rev_type = 'tag'
importances = est.feature_importances_ est.set_params(n_jobs=2) importances_parrallel = est.feature_importances_ assert_array_almost_equal(importances, importances_parrallel)
for cookie in ['csrftoken', 'sessionid']:
return UserPreference.get_value(user, LANGUAGE_KEY)
if 'children' in draft_block.fields: return any( [has_changes_subtree(child_block_id) for child_block_id in draft_block.fields['children']] )
rs = mi_labels.loc['i'] xp = mi_labels.ix['i'] assert_frame_equal(rs, xp)
ret['comment'] = 'Event module not available. Beacons enable job failed.'
datepart_offset = getattr(t, offset_name if offset_name != 'weekday' else 'dayofweek') self.assertTrue(datepart_offset == offset.kwds[offset_name])
result = Timestamp('2013-11-01 00:00:00-0500', tz='America/Chicago') self.assertEqual(result.value, Timestamp('2013-11-01 05:00').value)
import integration import salt.utils
clf.fit(X, y) assert_array_equal(np.diff(clf.scores_) > 0, True)
patched_client_login = Client.login
self._require_pytz() return "django_datetime_trunc('%s', %s, %%s)" % ( lookup_type.lower(), field_name), [tzname]
max_scores_cache.push_to_remote()
cache.set("key", "value") self.assertEqual(cache.get("key"), "value")
value = value.__reduce__()[1][0]
indexer[indexer < 0] = len(self) from pandas.core.indexing import maybe_convert_indices return maybe_convert_indices(indexer, len(self))
response = self._regenerate()
with transaction.atomic(using=using, savepoint=False): for i, j in enumerate(id_list): ordered_obj.objects.filter(pk=j, **filter_args).update(_order=i)
trainer = yaml_parse.load(test_yaml_layer0 % {'layer0_filename': layer0_filename}) trainer.main_loop()
'master_failback_interval': int,
'master_pubkey_signature': str,
with self.assertRaises(ItemNotFoundError): are_permissions_roles_seeded(course_id)
continue
module = CapaFactory.create(attempts=1)
statement = cursor.statement
try: static_content_store.save(content) except Exception as err: log.exception(u'Error importing {0}, error={1}'.format( fullname_with_subpath, err ))
module = CapaFactory.create(attempts=1)
cheetah.delete() self.assertQuerysetEqual(Comparison.objects.all(), [ "<Comparison: tiger is stronger than None>" ])
proc.start()
for block in value._data.blocks: self.assertTrue(block.values.flags.writeable) block.values[0] += rhs[block.dtype]
df['foo2'] = np.ones((4, 2)).tolist()
if patches.shape[-1] == 1: return patches.reshape((n_patches, p_h, p_w)) else: return patches
influxDBVersionHeader = "X-Influxdb-Version"
if oob: indexer = slice(0, 0) else: indexer = slice(-6, 6) self.check(result, s, indexer, False)
from salt.states import jboss7 from salt.exceptions import CommandExecutionError
result = df.set_index(['A', df['B'].values], drop=False) expected = df.set_index(['A', 'B'], drop=False)
return '__file__' in globals()
self.assertIs(descriptor._unwrapped_field_data, original_field_data) self.assertIsNot(descriptor._unwrapped_field_data, descriptor._field_data)
default_grade = '-1'
for target in targets: for migration in graph.forwards_plan(target): if migration not in seen: node = graph.node_map[migration] plan.append(node) seen.add(migration)
self.minions = {}
requirements = CreditRequirement.objects.filter(course__course_key=course_key, active=True)
n_jobs = 1
METRIC_UNDEFINED_BINARY = [ "samples_f0.5_score", "samples_f1_score", "samples_f2_score", "samples_precision_score", "samples_recall_score", "coverage_error",
response = self.client.get(self.url) self.assertTrue(self.email_modal_link in response.content)
algo = cert.get_signature_algorithm()
if existing['code'] == 200:
self.assertEqual(len(httpretty.httpretty.latest_requests), 1)
_validate_opts(opts) return opts
from __future__ import absolute_import
self.assertEquals(parent_status.get('total'), total) self.assertEquals(parent_status.get('action_name'), action_name)
f = lambda x: x.sort_index(inplace=True) _check_f(data.copy(), f)
return
model1 = clf.fit(X, Y[:, 0]).coef_ model2 = clf.fit(X, Y[:, :1]).coef_ assert_array_almost_equal(model1, model2)
self.assertTrue(other.features.supports_transactions, msg) self.assertTrue(connections_support_transactions(), msg)
from __future__ import absolute_import import os import tempfile import sys import errno import time import random import shutil import salt.ext.six as six
buf = [to_str(i) if isinstance(i, six.text_type) else i for i in buf]
clf = ARDRegression(compute_score=True) clf.fit(X, y)
return { cls.STRING_PAYLOAD, cls.ROOT_EXTRA_FIELDS, cls.CONTEXT_EXTRA_FIELDS, }
resp = self.client.ajax_post( self.seq2_update_url, data={'children': [unicode(unit_1_key), unicode(unit_2_key)]} ) self.assertEqual(resp.status_code, 200)
settings.ALLOWED_HOSTS = [request.META['HTTP_HOST']] self.assertEqual(safe_get_host(request), request.META['HTTP_HOST'])
client = get_file_client.return_value client.cache_file.return_value = self.top_file.name
'ENABLE_MOBILE_REST_API': False,
if self.algorithm not in ('SAMME', 'SAMME.R'): raise ValueError("algorithm %s is not supported" % self.algorithm)
idx = pd.Index([0, 1, 2])
contribute_to_related_class = ManyToManyField.__dict__['contribute_to_related_class'] _get_m2m_attr = ManyToManyField.__dict__['_get_m2m_attr'] _get_m2m_reverse_attr = ManyToManyField.__dict__['_get_m2m_reverse_attr'] _get_m2m_db_table = ManyToManyField.__dict__['_get_m2m_db_table']
from __future__ import unicode_literals
registration_price = CourseMode.min_course_price_for_currency( course_key, settings.PAID_COURSE_REGISTRATION_CURRENCY[0] ) course_price = get_cosmetic_display_price(course, registration_price) can_add_course_to_cart = _is_shopping_cart_enabled and registration_price
#html_additional_pages = {}
self.dicts[self._processors_index] = {}
break
modulestore = XMLModuleStore(DATA_DIR, source_dirs=['toy']) courses = modulestore.get_courses() self.assertEquals(len(courses), 1) course = courses[0]
path = os.path.normpath(path)
from __future__ import absolute_import
from __future__ import unicode_literals
if obj <= best_obj: best_obj = obj best_alpha = alpha best_alpha_ind = ind
if suffix in ('new',): return
data_not_concrete_base = models.ForeignObject( Relation, on_delete=models.CASCADE, from_fields=['base_non_concrete_id'], to_fields=['id'], related_name='fo_base_rel', )
cum_xx = self._cum_xx(x)
ret['changes'] = exc.info.get('changes', {}) ret['comment'] = exc.strerror_without_changes
self.save() response = perform_request( 'get', url, retrieve_params, metric_action='model.retrieve', metric_tags=self._metric_tags, )
if not CreditEligibility.is_user_eligible_for_credit(course_key, username): raise UserNotEligibleException(course_key, username)
df.sort_values(by=['a', 'b'])
frame1 = DataFrame({'a': [10, 20], 'b': [30, 40], 'c': [50, 60]})
return True
config.save() self.assertEqual(config.mode, 'edit') self.assertEqual(message, config.validation_message)
if engine == 'c': if options['skip_footer'] > 0: fallback_reason = "the 'c' engine does not support"\ " skip_footer" engine = 'python'
ups[self.annealed] = annealed ups[self.iteration] = self.iteration + 1
X /= np.sqrt(np.sum(X ** 2, axis=0))
X_scaled_back = scaler.inverse_transform(X_scaled) assert_array_almost_equal(X_scaled_back, X)
se = SpectralEmbedding(n_components=1, affinity="<unknown>", random_state=np.random.RandomState(seed)) assert_raises(ValueError, se.fit, S)
import yaml try: yaml.Loader = yaml.CLoader yaml.Dumper = yaml.CDumper except Exception: pass
self.assertEqual(q, q1)
delete_course_and_groups(course_id, self.user.id)
import salt.ext.six as six
return self.df.index.tolist()[section]
self.set_logged_in_cookies(request)
import salt.utils from salt.exceptions import SaltInvocationError
prefix = _('Hint ({hint_num} of {hints_count}): ').format(hint_num=hint_index + 1, hints_count=len(demand_hints))
from sklearn import datasets, svm, pipeline from sklearn.kernel_approximation import (RBFSampler, Nystroem) from sklearn.decomposition import PCA
CourseFixture(**self.course_info).install()
futures[0].set_result('foo') self.wait()
return parse(out)
user_country_from_ip = _country_code_from_ip(ip_address)
from datetime import datetime, date, time, MINYEAR
pass
group = group.rename(columns=lambda x: x.replace(suffix, ''))
self.assertNotEqual(session.session_key, 'someunknownkey')
assert_sp_frame_equal(frame, right[item], exact_indices=exact_indices)
__virtualname__ = 'sysctl'
self.assertEqual(context['currency'], 'PKR') self.assertEqual(context['currency_symbol'], 'Rs')
def func(key, *args): return key
_options = dict( _options_browser( cfg, ret_config, defaults, virtualname, attrs, ) )
self.server.config['test_1'] = {'response': True} self.server.config['test_2'] = {'response': False}
ESTIMATE_PRECISION_ERROR_MESSAGE = ("The algorithm has diverged because of " "too few samples per components. Try to " "decrease the number of components, " "or increase reg_covar.")
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.jack, self.john])
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
registration_code = CourseRegistrationCode.objects.all()[0].code redeem_url = reverse('register_code_redemption', args=[registration_code]) self.login_user()
exc_info_on_loglevel=logging.DEBUG
expected = np.array([31200, 45678, 10000], dtype='m8[ns]')
from salt.modules import win_license as license
subsection_css = ( ".course-navigation .chapter-content-container:nth-of-type({0}) " ".menu-item a p:nth-of-type(1)" ).format(section_index)
indexer = indexer._values indexer[~check] = 0
if (isinstance(role, (CourseStaffRole, CourseBetaTesterRole)) and CourseInstructorRole(role.course_key).has_user(user)): return True return False
if name in self._selected_obj: obj = copy.copy(obj) obj._reset_cache() obj._selection = name results[name] = obj.aggregate(func)
self.go_to_tab_and_assert_problem(2, self.problem2_name)
return stdout
self.assertEqual(book.editor._state.db, 'other')
return str('%s(%s)' % ( 'ST_GeogFromWKB' if self.geography else 'ST_GeomFromEWKB', self._adapter.getquoted().decode()) )
return self._engine_type(lambda: self.values, len(self))
res = HttpResponse('abc') conditional_content_removal(req, res) self.assertEqual(res.content, b'abc')
items = store.get_items(course_key)
check_estimator(AdaBoostClassifier) check_estimator(MultiTaskElasticNet)
from salt.modules import dnsutil
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
if field.many_to_many and field.remote_field.through._meta.auto_created: return self.create_model(field.remote_field.through) self._remake_table(model, create_fields=[field])
try:
after_due_date = CapaFactory.create(showanswer='closed', max_attempts="1", attempts="0", due=self.yesterday_str)
y_true = np.zeros((1, n_labels)) assert_equal(lrap_score(y_true, y_score), 1.) assert_equal(lrap_score(y_true, y_score_ties), 1.)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON
if clear_load['fun'] != 'saltutil.find_job': log.warning( 'Authentication failure of type "token" occurred.' ) return ''
convert_dates = self.convert_dates if convert_dates is True: convert_dates = [] convert_dates = set(convert_dates)
list_item = nodes.list_item() list_item['classes'] = ['lit-item']
self.assert_bookmark_data_is_valid(bookmarks[-1], bookmarks_data[0], check_optional_fields=check_all_fields) self.assert_bookmark_data_is_valid(bookmarks[0], bookmarks_data[-1], check_optional_fields=check_all_fields)
from __future__ import absolute_import import logging import copy import re
if token.contents == 'else': nodelist = parser.parse(('endif',)) conditions_nodelists.append((None, nodelist)) token = parser.next_token()
from .views import nested_view self.assertEqual(reverse(nested_view), '/includes/nested_path/')
self.assertEqual(VerificationDeadline.deadline_for_course(self.course.id), verification_deadline)
test_uuid = uuid.UUID(token, version=1) self.assertEqual(token, test_uuid.hex)
if self.weight == 0: return None
data = compressor.flush() if data: out.write(data)
labels = np.zeros_like(mean) labels[np.arange(labels.shape[0]), am] = 1.0
start = datetime(2011, 1, 1, 5, 3, 40) end = datetime(2011, 1, 1, 8, 9, 40)
__virtualname__ = 'cmd'
def f(): df_multi.loc[('2013-06-19', 'ACCT1', 'ABC')]
from __future__ import absolute_import import os import re
self.assertIs(getattr(t, "__frozen"), True)
response2 = self.client.get('/template/cached/bar/') self.assertEqual(response2.status_code, 200)
Xf = np.asfortranarray(X) est = TreeEstimator() est.fit(Xf, y) assert_almost_equal(est.predict(T), true_result)
idx = RangeIndex(5)
self.assertContains(response, "\n1 pluggable search person\n") self.assertContains(response, "Bob")
import salt.utils from salt.exceptions import CommandExecutionError, MinionError
second_result = SoftwareSecurePhotoVerification.get_initial_verification(user=user) self.assertIsNotNone(second_result) self.assertEqual(second_result, first_result)
students = self._create_students(5)
delete_indices = np.array([])
import salt.utils HAS_CLOUD = False try:
self.assertEqual(self.video.speed, '0.50x')
if isinstance(index_names[0], compat.string_types)\ and 'Unnamed' in index_names[0]: index_names[0] = None
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
try: mask = ~lib.ismember(arg, tslib._nat_strings) return calc_with_mask(arg, mask) except: pass
self.assertIsInstance(response, HttpResponseRedirect)
continue
with tm.assertRaises(UndefinedVariableError): df.query('@a > b > c', engine=engine, parser=parser)
ps_path = 'C:\\Windows\\SYSTEM32\\WindowsPowerShell\\v1.0\\powershell.exe'
self.assertEqual(resp.status_code, 200)
raise NotImplementedError
from __future__ import absolute_import
outp = Index(ujson.decode(ujson.encode(i)), name='index') tm.assert_index_equal(i, outp)
running = (volinfo[target]['status'] == '1')
system_config.domain_join = None system_config.win_rm = None
__context__.pop('pkg.list_pkgs', None) new = list_pkgs() ret = salt.utils.compare_dicts(old, new)
try: data = data.astype('float64') result = True except: pass
log = logging.getLogger(__name__)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
shifted4 = ps.shift(1, freq='B') assert_series_equal(shifted2, shifted4)
self.run_on_commit = [ (sids, func) for (sids, func) in self.run_on_commit if sid not in sids ]
from __future__ import unicode_literals
notes = deepcopy(notes[start:end])
self.assertEqual(left_before, left_after) self.assertEqual(right_before, right_after)
result = check_url_config(None) self.assertEqual(len(result), 1) warning = result[0] self.assertEqual(warning.id, 'urls.W001')
from salt.exceptions import CommandExecutionError, CommandNotFoundError
] DATETIME_INPUT_FORMATS = [
print("Estimated coefficients (true, normal, RANSAC):") print(coef, model.coef_, model_ransac.estimator_.coef_)
split_test.add_missing_groups(self.request) split_test = self._assert_children(3) self.assertEqual(group_id_to_child, split_test.group_id_to_child)
self.check_response('done_0', 'done-unmarked') self.check_response('done_1', 'done-unmarked')
M = np.zeros((N, N), dtype=np.float64) for i in range(N): s_i = s_range[i]
dest_dir = os.path.abspath(os.path.join(setup.app.builder.outdir, source_rel_dir))
if request.method == 'GET': return _get_entrance_exam(request, course_key)
self.dashboard_page.visit()
raise ValueError('sp_index must be a SparseIndex')
raise VersionConflictError(course_key, version_guid)
AA = 1. / np.sqrt(np.sum(least_squares * sign_active[:n_active]))
centers = [[1, 1], [-1, -1], [1, -1]] X, labels_true = make_blobs(n_samples=300, centers=centers, cluster_std=0.5, random_state=0)
initial_status = "submitted" VerificationStatus.add_verification_status( checkpoint=self.first_checkpoint, user=self.user, status=initial_status ) VerificationStatus.add_verification_status( checkpoint=self.second_checkpoint, user=self.user, status=initial_status )
index = period_range(start="2012-01-01", end="2012-12-31", freq="M") s = Series(np.random.randn(len(index)), index=index)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if name in list_tasks(location) and not force: return '{0} already exists'.format(name)
tolerance_xml = xml.xpath( '//*[@id=$id]//responseparam[@type="tolerance"]/@default', id=xml.get('id') )
def __iter__(self): return self
logger.debug('Websocket already connected, returning') return
pw_group.__grains__ = {} pw_group.__salt__ = {} pw_group.__context__ = {} pw_group.grinfo = {}
show_authors = False
if instance.pk is None: raise ValueError("%r instance needs to have a primary key value before " "a many-to-many relationship can be used." % instance.__class__.__name__)
raise RemoteDataError("No data fetched using " "{0!r}".format(method.__name__))
import Tkinter as Tk
from __future__ import unicode_literals
log = logging.getLogger(__name__)
def obj_func(theta, eval_gradient=True): if eval_gradient: lml, grad = self.log_marginal_likelihood( theta, eval_gradient=True) return -lml, -grad else: return -self.log_marginal_likelihood(theta)
for max_leaf_nodes, name in product((None, 1000), ALL_TREES.keys()): TreeEstimator = ALL_TREES[name]
sp = SparseSeries(values, sparse_index=self.bseries.sp_index, copy=True) sp.sp_values[:5] = 100 self.assertEqual(values[0], 97)
biggie = DataFrame(np.zeros((200, 4)), columns=lrange(4), index=lrange(200)) repr(biggie)
from __future__ import absolute_import
exact_dists, exact_idx = nnbrs.radius_neighbors(query, radius=1) approx_dists, approx_idx = lsfh.radius_neighbors(query, radius=1)
self.assertQuerysetEqual(Reporter.objects.filter(article__reporter=self.r).distinct(), john_smith)
assertRaisesRegexp(IndexError, '^Too many levels', self.index.reorder_levels, [2, 1, 0])
if PY3_OR_LATER: dispatch[pickle.BUILD[0]] = load_build else: dispatch[pickle.BUILD] = load_build
def convert_to_draft(self, location, user_id): raise NotImplementedError()
iptables.__grains__ = {} iptables.__salt__ = {} iptables.__context__ = {} iptables.__opts__ = {}
matcher = Matcher.return_value matcher.confirm_top.return_value = True
self.assert_grade(problem, answer, "correct") self.assert_grade(problem, answer.lower(), "correct")
H, W = img_shape Hs, Ws = tile_spacing
return
self.assertEqual(1, len(removed)) volumes.remove(removed[0]) return removed[0]
from salttesting import TestCase from salt.ext.six.moves import range from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
g_endpoint_url = re.sub('/v2', '', g_endpoint_url['internalurl'])
problem = CapaFactory.create() self.assertFalse(problem.answer_available())
X = [[1, 0, 0], [1, 1, 1]]
if not hasattr(self, '_datasets'): self._datasets = [self._dataset] del self._dataset
format = ugettext("DATE_TIME_FORMAT") if format == "DATE_TIME_FORMAT": format = DEFAULT_DATE_TIME_FORMAT
signals.m2m_changed.send( sender=self.through, action='post_add', instance=self.instance, reverse=self.reverse, model=self.model, pk_set=new_ids, using=db, )
self.assertEqual( [logmsg_dbg.format(newmax)], handler.messages )
raise TypeError('Cannot infer number of levels from empty list')
if items_for_task: yield items_for_task num_items_queued += len(items_for_task)
self.assertIsInstance(descriptor._field_data, LmsFieldData)
managed = False
subset_idxs = sample_without_replacement(n_samples, min_samples, random_state=random_state) X_subset = X[subset_idxs] y_subset = y[subset_idxs]
img = circle1 + circle2 + circle3 + circle4
response = render_to_response(path, context) response.mako_context = context response.mako_template = path return response
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return wrap_fragment( frag, render_to_string( "edit_unit_link.html", {'frag_content': frag.content, 'edit_link': edit_link} ) )
X = check_array(X, accept_sparse="csc", dtype=DTYPE) y = check_array(y, accept_sparse='csc', ensure_2d=False, dtype=None) if issparse(X): X.sort_indices()
return {'name': name, 'changes': {}, 'result': False, 'comment': 'Invalidly formatted pkgs parameter. See ' 'minion log.'}
tree = self._compute_metadata_inheritance_tree(course_id)
try: socket.inet_pton(address_family, ip) except socket.error: return False
rows = [[1, 2, 3], [4, 5, 6]]
FILE_UPLOAD_TEMP_DIR = None
if tag_key is None: tag_key = self.__class__.__name__ self._tag_key = tag_key
from . import signals
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'nova', vm_['profile'], vm_=vm_) is False: return False
continue
where = self.parse_back_compat(where, op, value)
display_name = 'chapter created' resp = self.create_xblock(display_name=display_name, category='chapter') chap_usage_key = self.response_usage_key(resp)
value = compat.long(value) if value < 2147483648 else float(value) self._str = self.MISSING_VALUES[value]
__salt__['cmd.run']('attrib -R "{0}"'.format(notify_path))
if pkginfo[version_num].get('use_scheduler', False):
coords = kwargs.pop('coords', None) if coords: self.coords = tuplize(coords)
for _, record in self._active_records: if branch and branch not in record.index.get('versions', {}): continue
result = f.clean('12-21-2010') self.assertEqual(result, date(2010, 12, 21))
json_fields = json.dumps(fields, cls=EdxJSONEncoder) rerun_course.delay(unicode(source_course_key), unicode(destination_course_key), request.user.id, json_fields)
dst_path = os.path.dirname(os.path.abspath(dst_filename)) dst_temp_filename=os.tempnam(dst_path);
sampling_algorithm["custom-pool"] = \ lambda n_population, n_samples, random_state=None: \ sample_without_replacement(n_population, n_samples, method="pool", random_state=random_state)
xml = etree.tostring(node) block = cls.from_xml(xml, runtime, id_generator) return block
ret = {'pid': PId}
self.elapsed = 0 self.total_errors = 0 self.counters = dict.fromkeys(self._benchmark_keys, 0) self.messages = {}
Restaurant.objects.all().delete()
- volumes: - /usr/local/etc/ssl/certs/example.crt: bind: /etc/ssl/certs/com.example.internal.crt ro: True
objs = tuple(objs)
ret = self.run_state('ssh_known_hosts.present', test=True, **kwargs) self.assertSaltTrueReturn(ret)
from salt.modules import bower from salt.exceptions import CommandExecutionError
file_handler = logging.FileHandler("C:\Builds\logs\check_and_build.log") file_handler.setFormatter(logging.Formatter(fmt)) logger.addHandler(file_handler)
with tm.assert_produces_warning(RuntimeWarning): c_old = Categorical([0, 1, 2, 0, 1, 2],
self.assertIn("Welcome to edX.", self.video.captions_text)
key_values = {}
self.cohort_management_page.select_cohort_some_inline_discussion()
certificate_invalidation.deactivate()
result = pack(POSTGIS_HEADER_STRUCTURE, rasterheader)
vix = DataReader("VIXCLS", "fred")
ret['changes'] = {'new': '', 'old': name}
def curry(_curried_func, *args, **kwargs): def _curried(*moreargs, **morekwargs): return _curried_func(*(args + moreargs), **dict(kwargs, **morekwargs)) return _curried
if STATE_CONF: tmplctx = STATE_CONF.copy() if tmplctx: prefix = sls + '::'
if root_node is not None: visitor = OuterFormatVisitor(file_contents, results) visitor.visit(root_node) results.prepare_results(file_contents, line_comment_delim=self.LINE_COMMENT_DELIM)
__version_info__ = __saltstack_version__.info __version__ = __saltstack_version__.string
newrelic.agent.add_custom_parameter('seq.num_units', len(display_items))
X_train_fit, y_train_fit = slow_model._build_y(X_train, y_train, sample_weight=weights, trim_duplicates=False) slow_model._build_f(X_train_fit, y_train_fit)
SITE_ID = 1 SITE_NAME = "example.com" HTTPS = 'on' ROOT_URLCONF = 'lms.urls'
mask = np.tile(mask, list(self._selected_obj.shape[1:]) + [1]).T
export_course_to_xml(self.store, content_store, course_id, root_dir, 'test_export')
return prlctl('snapshot-switch', args, runas=runas)
vm_size = override_size(vm_)
clf = GradientBoostingClassifier(n_estimators=10, random_state=1) clf.fit(iris.data, iris.target)
import logging
log = logging.getLogger(__name__)
from __future__ import absolute_import
from __future__ import absolute_import import sys
from codecs import lookup, BOM_UTF8 import re from io import TextIOWrapper, open cookie_re = re.compile("coding[:=]\s*([-\w.]+)")
descriptor = modulestore().get_item(self.course.location) section_grader_type = CourseGradingModel.get_section_grader_type(self.course.location)
self.colors = [np.asarray([1, 1, 0]), np.asarray([1, 0, 1]), np.asarray([0, 1, 0])]
FILE_UPLOAD_HANDLERS = [ 'django.core.files.uploadhandler.MemoryFileUploadHandler', 'django.core.files.uploadhandler.TemporaryFileUploadHandler', ]
answer_given = submission[0]
if event_index is not None: ref = static._resid_raw[-1]
def has_delete_permission(self, request, obj=None): return False
from salt.states import powerpath
world.wait(1) continue
ret['comment'] += '\n\nChanges made: ' + comments
'edxmako', 'pipeline', 'static_replace', 'require',
keyarr = key
self.assertGreater(len(sections), 0, "No sections found")
from __future__ import absolute_import
return (np.where([True, True, False, False, True])[0], np.where([False, False, True, True])[0])
response = self.client.post(self.url, data) self.assertHttpBadRequest(response)
course_enrollments.sort(key=lambda x: x.created, reverse=True)
descriptor_class = FileDescriptor
expected = df.stack(level=level, dropna=True) if isinstance(expected, Series): assert_series_equal(result, expected) else: assert_frame_equal(result, expected)
try:
csv_file, courses_info = self.generate_registration_codes_csv(orderitems, site_name)
response = self.client.post(set_course_price_url, data) self.assertTrue("Please Enter the numeric value for the course price" in response.content)
label_to_fold = np.zeros(len(unique_labels))
MODULESTORE = TEST_DATA_SPLIT_MODULESTORE
cls.create_image(prefix, (1, 1), 'red', 'special/{}_unlock.png')
from django.db import models from django.utils.encoding import python_2_unicode_compatible
import salt.utils import salt.utils.decorators as decorators import salt.ext.six as six
diff = l.diff() groups = list(diff[diff > 1].index)
log.error('Lane Router Received message without share: {0}'.format(msg)) return
this_yaml = test_yaml_which_set % {'which_set': 'bogus'} try: yaml_parse.load(this_yaml) raise AssertionError except ValueError: pass
expected = bdate_range('20150101', periods=10) expected.freq = None
from salt.modules import at
pass
self.store.delete_course(self.course.id, self.user.id)
win_dns_client.__salt__ = {} win_dns_client.__opts__ = {}
return stdout
if field.remote_field: fake_user_data[field_name] = field.remote_field.model(input_value)
ASSIGN_CMD = 'net.inet.icmp.icmplim' CONFIG = '/etc/sysctl.conf'
Model = self._get_model_from_node(node, "model")
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if not isinstance(err, ImportError): log.error('Import pygit2 failed: {0}'.format(err))
LogoutPage(self.browser).visit() self._login_as_a_verified_user() self.courseware_page.visit()
self.set_state_from_lcp()
if all_options_selected and not has_option: all_options_selected = False return all_options_selected
uninstall_ruby(ruby, runas=runas) return False
by_columns = df.reset_index().groupby(idx_names).mean()
expected_callback_dict = { 'xqueue_header': expected_header, 'xqueue_body': expected_body, }
exp = pd.Series(self.rep[to_key], index=index, name='yyy', dtype=from_key)
self._reset_event_aggregation() self.local.event.set_event_handler(self._process_event)
data = copy.deepcopy(high) try: rewrite_single_shorthand_state_decl(data) rewrite_sls_includes_excludes(data, sls, saltenv)
for lhs in self.objects: for rhs in self.objects: if lhs is rhs: continue self.assertNotEqual(lhs, rhs)
assert_panel_equal(p.ix[items, dates, cols], p.reindex(items=items, major=dates, minor=cols))
s = 'Month 1, 1999' assert to_datetime(s, errors='ignore') == s
file.save(file.name, file, save=False)
self.assertTrue( makeFY5253LastOfMonthQuarter( 1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1) .year_has_extra_week(datetime(2010, 12, 26)))
try: return reverse(to, args=args, kwargs=kwargs) except NoReverseMatch: if callable(to): raise if '/' not in to and '.' not in to: raise
obj.srid = self.get_srid(obj)
predictions = cval.cross_val_predict(clf, X_sparse, X) assert_array_equal(predictions.shape, (10, 2))
CourseOverviewImageSet.objects.create(course_overview=overview)
if error: ret['changes'] = {} ret['result'] = False ret['comment'] = str(error)
env = os.environ del env['PYTHONPATH']
X_var *= X.shape[0] X_scale = np.sqrt(X_var, X_var) del X_var X_scale[X_scale == 0] = 1 inplace_column_scale(X, 1. / X_scale)
for label_index, weight in enumerate(n_samples_per_label): lightest_fold = np.argmin(n_samples_per_fold) n_samples_per_fold[lightest_fold] += weight label_to_fold[indices[label_index]] = lightest_fold
from __future__ import absolute_import
from . import signals
import sys import os
from __future__ import absolute_import, print_function import json import logging import time
self.factory(loss="foobar")
self._ddog_histogram(evt_time, 'set_many.fields_in', len(state))
if not request.COOKIES and response.cookies and has_vary_header(response, 'Cookie'): return response
grains['manufacturer'] = sysinfo['Manufacturer'] grains['productname'] = sysinfo['Product'] grains['uuid'] = sysinfo['UUID']
import logging
survey.save_user_answers(self.student, self.student_answers_update2, self.course_id)
testing.assert_array_equal(F.transform(X), np.around(X, decimals=1))
self.parse_args()
classes = ('credit-eligibility', 'eligibility-heading') method = self.assertContains if is_requirement_displayed else self.assertNotContains
try: import requests import requests.exceptions HAS_LIBS = True except ImportError: HAS_LIBS = False
'openedx.core.djangoapps.self_paced',
shutil.rmtree(folder_path)
response_element = rendered_html.find("span") self.assertEqual(response_element.tag, "span")
import logging
SpatialRefSys = connection.ops.spatial_ref_sys()
class Circle1(models.Model): name = models.CharField(max_length=255)
if existing['code'] == 200:
from __future__ import absolute_import
return V[:n_components, :].T, s[:n_components], U[:, :n_components].T
return self.temps[key]
ax0 = self.obj._get_axis(0) if not ax0.is_lexsorted_for_tuple(tup): raise e1
tm._skip_if_no_scipy()
result = middleware.process_request(request) self.assertIsNotNone(result) self.assertEqual(result.content, b'Hello World 1')
raise NotImplementedError("cannot use an invert condition when " "passing to numexpr")
simultaneous_sort(dist, ind)
from __future__ import absolute_import
try: kwargs['initial'] = self.initial_extra[i - self.initial_form_count()] except IndexError: pass
from salt.modules import mac_power from salt.exceptions import SaltInvocationError
save_hashes(hashes, HASH_FILE)
clf = IsolationForest(max_samples=100, random_state=rng) clf.fit(X_train) y_pred_train = clf.predict(X_train) y_pred_test = clf.predict(X_test) y_pred_outliers = clf.predict(X_outliers)
import integration import salt.utils
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
tmp = sorted(class_mapping, key=class_mapping.get)
if salt.utils.is_windows() or 'systemd-detect-virt' in cmd or 'prtdiag' in cmd: continue failed_commands.add(command)
book = qs.get(other_rating=4) self.assertEqual(book['other_rating'], 4)
if vm.guest.toolsStatus in ["toolsNotRunning", "toolsNotInstalled"]: status = 'VMware tools is either not running or not installed' return status
browsers = [] browser = None
files = {} for pid in pids: ppath = '/proc/{0}'.format(pid) try: tids = os.listdir('{0}/task'.format(ppath)) except OSError: continue
self.assertRaises(IndexError, idx.__getitem__, empty_farr)
if len(indexer) > 1 and not multiindex_indexer: l = len(indexer[1]) ser = np.tile(ser, l).reshape(l, -1).T
self.conn.put_method.return_value = method_ret self.conn.put_integration.return_value = method_integration_ret self.conn.put_method_response.side_effect = ClientError(error_content, 'put_method_response')
self.options.config_dir = os.path.abspath(self.options.config_dir)
if driver == 'vmware' and profile_key.get('image', True): non_image_drivers.append('vmware')
file1 = open(filename) file2 = open(filename) r = HttpResponse(file1) r.content = file2 self.assertTrue(file1.closed) self.assertTrue(file2.closed)
exc_info_on_loglevel=logging.DEBUG
return result.dtype.type(result.item())
__outputter__ = { 'items': 'nested', 'item': 'nested', 'setval': 'nested', }
assert_array_equal(X_trans, [[0., 1., 0., 1., 1.], [1., 0., 1., 0., 1.]])
Article.objects.create(headline='foo', pub_date=datetime.now())
pass
result = df.reorder_levels([0, 1, 2]) assert_frame_equal(df, result)
for (key, value) in problemtree.items(): tree.set(key, value)
from __future__ import unicode_literals
if not hasattr(self, 'non_redundant'): self.non_redundant = False if not hasattr(self, 'mask_weights'): self.mask_weights = None
key = (ct.app_label, ct.model) self._cache.setdefault(using, {})[key] = ct self._cache.setdefault(using, {})[ct.id] = ct
with self.assertRaises(ResponseError): problem.grade_answers({'1_2_1': '42'})
if 'openid_error' in request.session: error = True del request.session['openid_error']
self.template_name = 'admin_doc/missing_docutils.html' return self.render_to_response(admin.site.each_context(request))
'failhard': bool,
value, lookups, used_joins = self.prepare_lookup_value(value, lookups, can_reuse, allow_joins)
self._pool = None self._output = None self._jobs = list() self._managed_pool = False
pca = TruncatedSVD(n_components=2) X_reduced = pca.fit_transform(X_transformed)
import hmac import hashlib import binascii import datetime import base64 import msgpack import json import re import decimal
k = np.array([], bool)
self.assertFalse(result['success']) self.assertIn(u"corrupted message regarding your charge", result['error_html'])
from salt.states import postgres_extension
assert_array_equal(mb_k_means.predict(X_csr), mb_k_means.labels_)
from salt.cloud.clouds import saltify
if isinstance(grade_response, dict) and 'msg' in grade_response: grade_response['msg'] = "<div>{0}</div>".format(grade_response['msg'])
self.assertEqual(2, ls_orig.coord_dim) self.assertAlmostEqual(ls_trans.x[0], ls_orig.x[0], prec) self.assertAlmostEqual(ls_trans.y[0], ls_orig.y[0], prec)
y_true = np.ones((1, n_labels)) assert_equal(lrap_score(y_true, y_score), 1.) assert_equal(lrap_score(y_true, y_score_ties), 1.)
from __future__ import absolute_import
from __future__ import absolute_import, print_function import os.path import logging
tz_range = pd.date_range('20130101', periods=3, tz='US/Eastern') tz_naive = tz_range.tz_convert('utc').tz_localize(None)
raise CommandExecutionError( 'Unterminated marked block. End of file reached before marker_end.' )
assert_array_almost_equal(clf_lda_svd.explained_variance_ratio_, clf_lda_eigen.explained_variance_ratio_[:tested_length])
cc_button_selector = self.get_element_selector(VIDEO_BUTTONS["transcript"]) element_to_hover_over = self.q(css=cc_button_selector).results[0] ActionChains(self.browser).move_to_element(element_to_hover_over).perform()
fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
data = bz2.decompress(f.read()) f = StringIO(data)
import datetime import json import logging import os import re import traceback import shutil import types
baseperson = models.ForeignKey(BasePerson, models.CASCADE, related_name='relating_baseperson') baseperson_hidden = models.ForeignKey(BasePerson, models.CASCADE, related_name='+')
rng = self.mlp.rng if self.irange is None: raise ValueError("Recurrent layer requires an irange value in " "order to initialize its weight matrices")
self.assertEqual(module.attempts, 1)
import logging import pythoncom import threading
response = self.client.get('/old_jsi18n_admin/?language=de') self.assertContains(response, '\\x04')
self.assertTrue( ('Got ' in comment and 'Generated script' in comment) or ('setuptools>=0.7' in comment) )
if os.path.dirname(form_data['file_field'].name) != '': return HttpResponseServerError() return HttpResponse('')
self.assertAcceptEquals( 'rel-ter;q=1.0, rel-ter;q=0.5', self.process_request(accept='rel-ter;q=1.0, rel;q=0.5') )
from __future__ import absolute_import import os
context['accomplishment_copy_about'] = _('About {platform_name} Accomplishments').format( platform_name=platform_name )
os.remove(hashdir) os.makedirs(hashdir)
self.a.friends.clear()
exc_info_on_loglevel=logging.DEBUG
import logging import os import re
to_concat = [x.asobject.values for x in to_concat]
if not os.path.exists(os.path.dirname(file_path)): os.makedirs(os.path.dirname(file_path))
to_return = (list(maybe_read_encoded_stream(req, encoding, compression)) + [compression]) return tuple(to_return)
self._block_relations.pop(usage_key, None) self._block_data_map.pop(usage_key, None)
_builtin_context_processors = ('django.template.context_processors.csrf',)
other = Int64Index(np.arange(25, 14, -1))
continue
result = self.panel.add(self.panel.filter(['ItemA']))
log_func = log.debug if request.user.id is None else log.warning log_func(
email_instructions = _(u"The email address you used to register with {platform_name}").format( platform_name=settings.PLATFORM_NAME )
Answer = None Post = None Question = None
X = self._validate_X_predict(X)
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
proba = sum(_samme_proba(estimator, n_classes, X) for estimator in self.estimators_)
self.assertContains( self.client.ajax_post(course_update_url, {'garbage': 1}), 'Failed to save', status_code=400 )
revoke_access(course_ccx, instructor, 'instructor')
STUDENTMODULEHISTORYEXTENDED_OFFSET = ENV_TOKENS.get( 'STUDENTMODULEHISTORYEXTENDED_OFFSET', STUDENTMODULEHISTORYEXTENDED_OFFSET )
_SEUPD_WHICH = ['LM', 'SM', 'LA', 'SA', 'BE']
self.assertRaises(ValueError, self.df.groupby, level=1)
'METADATA_URL': 'https://www.googleapis.com/youtube/v3/videos/',
site_url = '/'
piece = piece.copy() try: piece[all_key] = margin[key] except TypeError:
diff_quality_percentage_pass = True
with outer_atomic(): if section_module.hide_from_toc or unicode(section_module.location) in gated_content: continue
del DEFAULT_FILE_STORAGE MEDIA_ROOT = "/edx/var/edxapp/uploads"
('subjectbody', SubjectBodyExtractor()),
__func_alias__ = { 'set_': 'set' }
if enrollment_mode is None: self.assertFalse(CourseEnrollment.is_enrolled(self.user, self.course.id))
extra = {} for key, value in six.iteritems(data): if key in expected_extra_kws: continue extra[key] = copy.deepcopy(value)
if 'detached' not in published._class_tags and published.start is not None: return datetime.now(UTC) > published.start
self.course_entry = CourseEnvelope(course_entry_override.course_key, self.course_entry.structure)
from_lisa_select_option = self.get_select_option(from_box, str(self.lisa.id))
return self._id is getattr( other, '_id', Ellipsis) and self._id is not None
ddata = DummyDataset(axes=('c', 0, 1, 'b')) topo = ddata.get_topological_view()
self.assertGreaterEqual(iteration_over_courses_time_1.elapsed, iteration_over_groups_time_1.elapsed) self.assertGreaterEqual(iteration_over_courses_time_2.elapsed, iteration_over_groups_time_2.elapsed)
return SelfRef.objects.get(selfref=self).pk
if clean_current_key[0] != clean_ssh_key[0] or clean_current_key[1] != clean_ssh_key[1]: ssh_key_changed = True
from salt.states import linux_acl
user = create_user_and_user_profile(email, username, name, country, password)
X = check_array(X, accept_sparse=['csr', 'csc'])
'recordedYoutubeIsAvailable': self.youtube_is_available,
from salt.modules import mac_package as macpackage
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
json_resp = json.loads(resp.content) self.assertEqual(json_resp.get('total_cost'), self.cart.total_cost)
with open(self.TEST_INDEX_FILENAME, "w+") as index_file: json.dump({}, index_file)
self._check_params(n_samples)
from __future__ import absolute_import
else: ret['comment'] = 'Datasource updated.'
self.httpd.shutdown() self.httpd.server_close()
'MAX_NOTE_LIMIT': 1000,
remove_users(self.admin, CourseCreatorRole(), self.user) self.assertTrue(user_has_role(self.user, CourseCreatorRole()))
from salt.ext.six import string_types
self.sigma = 0
state2 = npr.RandomState(10) tm.assert_equal( com._random_state(state2).uniform(), npr.RandomState(10).uniform())
ground_truth_coef = rng.randn(n_features) y = np.dot(X, ground_truth_coef)
self.assertFalse(empty_forms[0].is_bound) self.assertFalse(empty_forms[1].is_bound)
raise ItemNotFoundError(library_id)
if self._content_length == 0: return QueryDict(encoding=self._encoding), MultiValueDict()
return Response(status=status.HTTP_204_NO_CONTENT)
E = (np.diag(A) + np.diag(R)) > 0 e[:, it % convergence_iter] = E K = np.sum(E, axis=0)
from __future__ import absolute_import import os import sys import stat import time import uuid import pprint import logging import yaml
assertIsInstance(left, Series, '[Series] ') assertIsInstance(right, Series, '[Series] ')
if auth_user: set_user_preference(request.user, DARK_LANGUAGE_KEY, preview_lang)
shutil.rmtree(root_dir)
return item.point.x, item.point.y
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
num_braces = 0
import salt.utils import salt.utils.minions
n_samples = 200 outliers_fraction = 0.25 clusters_separation = [0, 1, 2]
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proj.settings')
if answer_name in self.correct_inputs and not partial_correct: inputs_correct = False
from __future__ import absolute_import import difflib import itertools import logging import os import shutil import sys import traceback from collections import Iterable, Mapping, defaultdict
return
kwargs.update(signing_policy)
np.random.seed(1234) p = tm.makePanel()
self.clients.setsockopt(zmq.IPV4ONLY, 0)
oob_best_iter = x[np.argmin(cumsum)]
if self._is_field_visible("terms_of_service"): terms_text = _(u"Honor Code")
from yaml import Loader, SafeLoader
import salt.ext.six as six try: import pip HAS_PIP = True except ImportError: HAS_PIP = False
result = s.loc[[]] expected = s.iloc[[]] assert_series_equal(result, expected)
def naive_log_logistic(x): return np.log(1 / (1 + np.exp(-x)))
actual_payment_data = checkout_with_ecommerce_service( user, 'dummy-course-key', course_mode, 'test-processor' )
X = np.vstack(data_chunks) X_lil = sp.lil_matrix(X) X_csr = sp.csr_matrix(X_lil) X_csc = sp.csc_matrix(X_lil)
qs = RasterModel.objects.filter(rastprojected__bbcontains=rast) self.assertEqual(qs.count(), 1)
response = self._generate( course_key=self.EXISTED_COURSE_KEY_2, username=self.STUDENT_USERNAME ) self.assertEqual(response.status_code, 200)
hidden_layer_sizes = self.hidden_layer_sizes if not hasattr(hidden_layer_sizes, "__iter__"): hidden_layer_sizes = [hidden_layer_sizes] hidden_layer_sizes = list(hidden_layer_sizes)
self.assertEqual(CourseEnrollment.objects.count(), 1) enrollment = CourseEnrollment.objects.get(course_id=course_key) self.assertEqual(enrollment.user.username, "test")
solution_tags = ['solution']
if isinstance(lookup.rhs, (tuple, list)): rhs_val = lookup.rhs[0] spheroid = lookup.rhs[-1] == 'spheroid' else: rhs_val = lookup.rhs spheroid = False
cmd += ' seek={0}'.format((size/1024**2) - blocks) endres += _run_all(cmd, 'warn', wipe_failmsg)
if set(formatted_addresses) == set(current_addresses): _LOG.debug('%s already contains the provided addresses.', setting) return True
new_fields = chain( new_class._meta.local_fields, new_class._meta.local_many_to_many, new_class._meta.private_fields ) field_names = {f.name for f in new_fields}
import salt.utils
self.xml_data = "about page 463139"
TASK_COMPATIBILITY_AT = 0 TASK_COMPATIBILITY_V1 = 1 TASK_COMPATIBILITY_V2 = 2 TASK_COMPATIBILITY_V3 = 3
continue
CourseModeFactory.create( course_id=self.course.id, mode_slug='professional', mode_display_name='professional', )
ax.view_init(40, -10)
import salt.utils.jid import salt.returners
students = self._create_students(10)
os.chdir('/') os.setsid() os.umask(18)
if val == val: nobs[lab, 0] += 1 prodx[lab, 0] *= val
if 'gw' in vm_: newnode['net0'] = newnode['net0'] + ',gw=' + vm_['gw']
self.assertEqual(len(res.context['object_list']), 7)
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
import datetime import warnings from functools import partial from sys import getsizeof
if support_fraction is None: n_support = int(np.ceil(0.5 * (n_samples + n_features + 1))) else: n_support = int(support_fraction * n_samples)
self.courseware_page.click_previous_button_on_bottom() self.assert_navigation_state('Test Section 1', 'Test Subsection 1,1', 2, next_enabled=True, prev_enabled=True)
courses_list, __ = _accessible_courses_list(self.request)
try: if os.path.exists('/proc/sys/kernel/pty/nr'): with fopen('/proc/sys/kernel/pty/nr') as fh_: return int(fh_.read().strip())
from __future__ import absolute_import import os
if not salt.utils.istextfile(path): raise SaltInvocationError( 'Cannot perform string replacements on a binary file: {0}'.format(path))
axes = self._output_axes assert len(axes) == 4
return [('', [])]
self.assertTrue(self.user.roles.filter(name="Student", course_id=self.course_key))
'disable_modules': list,
return s
BLACKLIST = [ 'CompositeLayer',
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
px = self.lonlat_to_pixel(lonlat, zoom)
res = self._evaluate() return _reconstruct_object(self.result_type, res, self.aligned_axes, self.expr.terms.return_type)
if method is not None:
if name in ret['changes']: ret['changes'][name]['new']['status'] = image['status']
extend(state('.start').stateconf.require(stateconf='xxx::goal'))
fill_value = self.block.fill_value values = self.block.get_values()
if timezone.is_aware(value): raise ValueError("Oracle backend does not support timezone-aware times.")
PIPELINE_UGLIFYJS_BINARY = 'node_modules/.bin/uglifyjs'
import numpy as np import matplotlib.pyplot as plt from sklearn.tree import DecisionTreeRegressor from sklearn.ensemble import AdaBoostRegressor
if is_css_present(css_selector): return retry_on_exception(lambda: css_find(css_selector)[index].value) else: return ""
import salt.utils.locales
with self.assertNumQueries(0): embargo_api.message_url_path(self.course.id, "enrollment")
last_mean = np.zeros(n_features) last_var = np.zeros_like(last_mean) last_n = 0
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
self.assertEqual(poly, OGRGeometry(p.wkt)) self.assertNotEqual(poly, prev)
import logging from sys import stdout from os import makedirs from os.path import dirname, isdir from errno import EEXIST
if not settings.configured: settings.configure()
if unpack_ipv4: ipv4_unpacked = _unpack_ipv4(ip_str)
self.assertEqual( get_list_or_404(a1.article_set, title__icontains="Run"), [article] )
min_indices = d_chunk.argmin(axis=1) min_values = d_chunk[np.arange(chunk_x.stop - chunk_x.start), min_indices]
SUB_EVENT = set([ 'state.highstate', 'state.sls', ])
out = -np.sum(sample_weight * log_logistic(yz)) + .5 * alpha * np.dot(w, w)
cdf_rows = cdf[1:5] self.assertTrue(isinstance(cdf_rows, CustomDataFrame)) self.assertEqual(cdf_rows.custom_frame_function(), 'OK')
@setup({'url-fail01': '{% url %}'}) def test_url_fail01(self): with self.assertRaises(TemplateSyntaxError): self.engine.get_template('url-fail01')
autocommits_when_autocommit_is_off = False
self.assertFalse(self.video.is_error_message_shown)
import integration
if layer_to_clamp is None: layer_to_clamp = OrderedDict()
assert_raises(ValueError, check_symmetric, arr_bad)
res = prlctl('snapshot-list', args, runas=runas)
from __future__ import absolute_import import time
self.course_nav.q(css='fieldset label:nth-child(3) input').nth(0).click()
corr = safe_sparse_dot(y, X) corr /= row_norms(X.T) corr /= norm(y)
usage_key = UsageKey.from_string('i4x://edX/apis/html/interactive') usage_key.replace(course_key=self.course.id) self.assertEqual(Bookmark.get_path(usage_key), [])
self.send_response(500, 'Bad Request: does not contain API key') self.send_header('Content-type', 'text/plain') self.end_headers() return False
if ret['result'] is not False: msg = _format_terse(tcolor, comps, ret, colors, tabular) hstrs.append(msg) continue
import re
email_body = mail.outbox[0].body result = re.search(r'(?P<url>https?://[^\s]+)', email_body) self.assertIsNot(result, None)
import salt.utils import salt.utils.network import salt.utils.validate.net from salt.exceptions import ( CommandExecutionError, SaltInvocationError ) from salt.ext.six.moves import range
X_train, y_train, sw_train = \ X[:n_samples], y[:n_samples], sample_weight[:n_samples] X_test, y_test = X[n_samples:], y[n_samples:]
response = self.client.get(reverse('admin:admin_views_referencedbyinline_changelist'), {TO_FIELD_VAR: 'name'}) self.assertEqual(response.status_code, 200)
easy_weight_list = [0] * 3 easy_weight_list[2] = 1
key = self.q(css=KEY_CSS).nth(i).text[0] if key == expected_key: return i
for offset in self.off: bio.write(struct.pack(byteorder + 'i', offset))
self.assertEqual(provider_redirect_url, self.url_prefix + self.complete_url) return self.client.get(provider_redirect_url)
X_nan = np.arange(4).reshape(2, 2).astype(np.float) X_nan[0, 0] = np.nan assert_raises(ValueError, check_array, X_nan)
with self.assertNumQueries(0): mtv = ModelToValidate(number=10, name='Some Name') setattr(mtv, '_adding', True) mtv.full_clean()
low['__jid__'] = jid low['__user__'] = user low['__tag__'] = tag
'worker_threads': int,
self._reset() return self.partial_fit(X, y)
script = namespaced_function(script, globals()) reboot = namespaced_function(reboot, globals())
raise NotImplementedError()
y4 = np.array([1, 1, 1, 1, 1, 1, 1, 1, 2])
local_dict = DeepChainMap()
body.update(self.construct_managers())
_unsupported_nodes = ((_stmt_nodes | _mod_nodes | _handler_nodes | _arguments_nodes | _keyword_nodes | _alias_nodes | _expr_context_nodes | _unsupported_expr_nodes) - _hacked_nodes)
tol = 2 if oracle else 5
rng = date_range('2/13/2010', '5/6/2010', tz=self.tzstr('US/Eastern'))
results = {} for k, v in kwargs.items(): results[k] = com._apply_if_callable(v, data)
AutoAuthPage( self.browser, username=self.student_name, email=self.student_email, course_id=self.course_id, ).visit()
assert_series_equal(nat_series_dtype_timestamp - NaT, nat_series_dtype_timestamp) assert_series_equal(-NaT + nat_series_dtype_timestamp, nat_series_dtype_timestamp)
#response = conn.verifyOrder(kwargs)
from salt.modules import kapacitor
from __future__ import absolute_import
self.stderr.write(_('Could not find a group named "{}" - skipping.').format(group_name))
response = self.client.get(reverse('admin:admin_views_ingredient_changelist'), {TO_FIELD_VAR: 'iname'}) self.assertEqual(response.status_code, 200)
verify_name(self.html_usage_key, self.seq_usage_key, "Duplicate of 'Text'")
dr = date_range(datetime(2011, 11, 6, 1, 30), periods=3, freq=datetools.Hour()) self.assertRaises(pytz.AmbiguousTimeError, dr.tz_localize, tz)
from __future__ import absolute_import
self.estimators_.extend(trees)
self.assertOLXIsPublishedOnly(block_list_to_delete) self.delete_item(block_list_to_delete, revision=revision) self._check_for_item_deletion(block_list_to_delete, result) self.assertOLXIsDeleted(block_list_children)
_version = "2.0"
ravel = lambda i: i.ravel() if isinstance(i, np.ndarray) else i indexer = tuple(map(ravel, indexer))
import datetime as dt from pandas import NaT
clf = TreeClassifier(class_weight='the larch', random_state=0) assert_raises(ValueError, clf.fit, X, y) assert_raises(ValueError, clf.fit, X, _y)
exp = Series([], dtype='float64', index=Index([], dtype='float64')) assert_series_equal(result, exp)
num_bytes_read += len(field_name) + 2 if (settings.DATA_UPLOAD_MAX_MEMORY_SIZE is not None and num_bytes_read > settings.DATA_UPLOAD_MAX_MEMORY_SIZE): raise RequestDataTooBig('Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.')
offset = BQuarterBegin(n=-1, startingMonth=1) self.assertEqual(datetime(2007, 4, 3) + offset, datetime(2007, 4, 2))
if 'ORA-22858' in description or 'ORA-22859' in description: self._alter_field_type_workaround(model, old_field, new_field) else: raise
for n, (name, estimator) in enumerate(estimators): y_predict = np.zeros((n_test, n_repeat))
cached_hash_file = __salt__['cp.cache_file'](source_hash, saltenv)
if backing in ('aufs', 'dir', 'overlayfs', 'btrfs'): lvname = vgname = None
instance.image.delete() instance.delete()
child_id_regex = None child_type = None if child_types_ids: child_type = child_types_ids[0][0] child_id_regex = '|'.join([child[1] for child in child_types_ids])
second.name = 'name' result = first.difference(second) self.assertEqual(result.name, 'name')
values = [[_try_decode(x) for x in y] for y in values]
result = o._get_bool_data() expected = self._construct(n, value='empty', **kwargs) self._compare(result, expected)
for block_hierarchy in course_hierarchy: self.add_parents(block_hierarchy, block_map)
'1|no_arguments', '1|one_argument:"1"', '1|one_opt_argument', '1|one_opt_argument:"1"', '1|two_one_opt_arg:"1"',
test_db_allows_multiple_connections = True
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call
data_y = data_y - 1
mixed = Series(['a', NA, 'b', True, datetime.today(), 'ee', None, 1, 2. ])
return "django_date_trunc('%s', %s)" % (lookup_type.lower(), field_name)
if content and content[-1] == '\n': content = content[:-1]
exc_info_on_loglevel=logging.DEBUG
if is_categorical_dtype(data) or is_categorical_dtype(dtype): from .category import CategoricalIndex return CategoricalIndex(data, copy=copy, name=name, **kwargs)
self.assertEquals(source_course.wiki_slug, source_wiki_slug)
if val_video_data: encoded_videos = val_video_data.get('profiles', {})
_metadata = DataFrame._metadata _finalize = DataFrame.__finalize__
self._studio_publish_content(0)
__virtualname__ = 'ports'
try: if servers[index - 1] == ip: return True except IndexError: pass
with tm.assertRaisesRegexp(ValueError, msg): DataFrame(np.empty(0), columns=list('abc'))
users_state_after_post = self._post_words(['word1', 'word2'])
FEATURES['ENABLE_SOFTWARE_SECURE_FAKE'] = True
return
make_user_coach(coach, master_course_key)
from __future__ import absolute_import
merged_parent_group_ids = set()
self.orig_names = self.names[:]
self.assertNotIn("wsgiref.util", sys.modules) wsgiref_util = LazyModule("wsgiref.util") self.assertEqual(wsgiref_util.guess_scheme({}), "http")
self.kwds.setdefault('alpha', 0.5)
from config_models.models import cache
if no_nans: functions = self.base_functions + self.no_nan_functions for (f, require_min_periods, name) in functions: expanding_f = getattr( x.expanding(min_periods=min_periods), name)
if on_rtd: os.environ['DJANGO_SETTINGS_MODULE'] = 'lms' else: os.environ['DJANGO_SETTINGS_MODULE'] = 'lms'
FEATURES['MILESTONES_APP'] = True
X, _, _, _, _ = _preprocess_data(X, y, True, True)
import warnings import numbers import numpy as np from scipy import linalg from scipy.stats import chi2
serializer_context = { 'request': request, 'block_structure': blocks, 'requested_fields': requested_fields or [], }
dtype = np.float64
self.certificates_section.remove_first_certificate_exception() self.assertNotIn(self.user_name, self.certificates_section.last_certificate_exception.text) self.assertNotIn(notes, self.certificates_section.last_certificate_exception.text)
continue
try: import tornado.testing import tornado.concurrent from tornado.testing import AsyncTestCase HAS_TORNADO = True except ImportError: HAS_TORNADO = False
else:
from sklearn.externals.six.moves import cStringIO as StringIO import sys
from salt.exceptions import CommandExecutionError
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
'master_port': int,
g = geo_input
self._compare_with_tz(store.select( 'df_tz', where=Term('A>=df.A[3]')), df[df.A >= df.A[3]])
deploy_scripts_search_path.pop(idx)
class SelfReferChild(SelfRefer): pass
files = [] state = dict(files=files) os.path.walk('.',file_filter,state)
self.block_type = block_data.get('block_type', None)
from __future__ import unicode_literals
email = student[EMAIL_INDEX] username = student[USERNAME_INDEX] name = student[NAME_INDEX] country = student[COUNTRY_INDEX][:2]
return mapping[key]
result = to_datetime('') self.assertIs(result, NaT)
exc_info_on_loglevel=logging.DEBUG
previous_count = len(selected) block_keys = LibraryContentModule.make_selection(selected, library_children, max_count, mode) selected = block_keys['selected']
estimator.fit(X, y) coef, intercept, dual_gap = (estimator.coef_, estimator.intercept_, estimator.dual_gap_)
from __future__ import print_function from pandas import DataFrame from pandas.compat import range, zip import timeit
try: os.remove(trans_tar) except (OSError, IOError): pass
if not settings.FEATURES['AUTH_USE_CERTIFICATES']: return HttpResponseForbidden()
from __future__ import unicode_literals
from salt.states import apache_site
else: (indexer, missing) = labels.get_indexer_non_unique(objarr) check = indexer
def dispatcher(self, obj): reduced = reduce_func(obj) self.save_reduce(obj=obj, *reduced) self.dispatch[type] = dispatcher
return
regr.fit(diabetes_X_train, diabetes_y_train)
print(descriptor, descriptor._field_data) self.assertEqual(descriptor.due, ImportTestCase.date.from_json(from_date_string))
unicode_text = "好 各位同学".decode('utf-8') self.assertTrue(self.video.downloaded_transcript_contains_text('srt', unicode_text))
self.assertNotContains(resp, self.ext_user.email)
self.assertTrue( makeFY5253LastOfMonthQuarter(1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1) .year_has_extra_week(datetime(2011, 4, 2)))
if win32api.GetUserName() == 'SYSTEM': return runas_system(cmd, username, password)
super(TestVertSplitTestVert, self).setUp()
with assertRaisesRegexp(NotImplementedError, 'column by column'): df.fillna(df.max(1), axis=1)
w = random_state.randn(n_features, n_targets)
if not include_expired: found_course_modes = found_course_modes.filter( Q(_expiration_datetime__isnull=True) | Q(_expiration_datetime__gte=now) )
if all(term.isscalar for term in terms): return _result_type_many(*(term.value for term in terms)).type, None
if not os.path.exists(dest_dir): os.makedirs(dest_dir)
super(BinomialSampler, self).__init__(0, *args, **kwargs)
if key.scope not in self.VALID_SCOPES: return False
s = Series([np.nan, np.nan, 5, 7, 9, np.nan])
u'resource_link_id': self.get_resource_link_id(), u'lis_result_sourcedid': self.get_lis_result_sourcedid(),
destroy_geom = GEOSFuncFactory('GEOSGeom_destroy', argtypes=[GEOM_PTR])
'ENABLE_MKTG_SITE': False,
idx2 = TimedeltaIndex(idx, name='something else') self.assertEqual(idx2.name, 'something else')
can_introspect_ip_address_field = False
self.assertEqual(len(mail.outbox), 2)
apikey: asdff7896asdh789 sharedsecret: saltybacon driver: gogrid
if not hasattr(self, 'freeze_set'): self.freeze_set = set([])
for block in value._data.blocks: self.assertTrue(block.values.flags.writeable)
context['document_banner'] = _("{platform_name} acknowledges the following student accomplishment").format( platform_name=platform_name )
result = np.empty_like(np.asarray(xvalues), dtype=np.float64) result.fill(np.nan) return result
form = SongForm(data, empty_permitted=True) self.assertTrue(form.is_valid()) self.assertEqual(form.errors, {}) self.assertEqual(form.cleaned_data, {})
return
pass
if hasattr(self, 'oob_improvement_'): self.oob_improvement_.resize(total_n_estimators) else: self.oob_improvement_ = np.zeros((total_n_estimators,), dtype=np.float64)
if isinstance(block, list):
if record == channel_0.length: bad_channel.append(channel) continue
self.assertTrue(np.isnan(self.ts[::2].cov(self.ts[1::2])))
try: import numpy as np except ImportError: np = None self.np = np
saltenv = env
from salt.ext.six.moves import shlex_quote as _cmd_quote
method = missing.clean_fill_method(method) new_data = self._data.interpolate(method=method, axis=axis, limit=limit, inplace=inplace, coerce=True, downcast=downcast)
self.set_attrs()
always_cohort_inline_discussions = True
while n_features > 2: sfm.threshold += 0.1 X_transform = sfm.transform(X) n_features = X_transform.shape[1]
if field_errors: raise AccountValidationError(field_errors)
__virtualname__ = 'ntp'
TEST_ROOT = REPO_ROOT / "test_root" LOG_DIR = (TEST_ROOT / "log").abspath()
cl.page_num = page_num cl.get_results(request) real_page_range = pagination(cl)['page_range']
import salt.utils import salt.modules.selinux from salt.exceptions import CommandExecutionError, FileLockError, MinionError
assert_equals('never', seq.rerandomize)
url( r'^courses/{}/progress/(?P<student_id>[^/]*)/$'.format( settings.COURSE_ID_PATTERN, ), 'courseware.views.views.progress', name='student_progress', ),
content = ['Check for cache with streaming content.'] response = StreamingHttpResponse(content) UpdateCacheMiddleware().process_response(request, response)
assert_raises(ValueError, GaussianNB().partial_fit, X, y, classes=[0, 1])
EMAIL_HOST = 'localhost'
df = default_frame err1 = (df + 1).values[0:2, :] self.assertRaises(ValueError, df.where, cond, err1)
supports_sequence_reset = True
raise DeprecationWarning( '`salt.utils.cloud.deploy_script now only accepts ' 'dictionaries for it\'s `master_conf` parameter. ' 'Loading from YAML ...' )
from __future__ import absolute_import import os import platform
PROFILE = logging.PROFILE = 15 TRACE = logging.TRACE = 5 GARBAGE = logging.GARBAGE = 1 QUIET = logging.QUIET = 1000
if sample_weight is None: base_estimator.fit(X_subset, y_subset) else: base_estimator.fit(X_subset, y_subset, sample_weight=sample_weight[subset_idxs])
for item in cls.__dict__: if item[0] == '_': continue
if old_database_name is not None: settings.DATABASES[self.connection.alias]["NAME"] = old_database_name self.connection.settings_dict["NAME"] = old_database_name
pipe.recv()
data["children"] = obj["children"]
self.assert_redirect_to_dashboard_looks_correct(actions.do_complete(
course_name = re.sub(r"[^\w.-]", '_', course_id.course)
self.assertEqual(self.selenium.find_element_by_id('id_supporting_bands').get_attribute('value'), '')
text = f.widget.format_value(result) self.assertEqual(text, "13:30:05")
return psutil.NUM_CPUS
from __future__ import unicode_literals
BSD = ('OpenBSD', 'FreeBSD')
dashboard = DashboardPage(self.browser) dashboard.wait_for_page() return dashboard
CourseEnrollment.enroll(user, course_key)
HAS_GLANCE = False try: from glanceclient import client from glanceclient import exc HAS_GLANCE = True except ImportError: pass
leftside = grouped.agg(aggf) rightside = getattr(self.series, op)(level=level, skipna=skipna) assert_series_equal(leftside, rightside)
from __future__ import unicode_literals
default="images_course_image.jpg"
data = SingleBlockManager(data, index, fastpath=True) generic.NDFrame.__init__(self, data)
response = self.client.get('/login_protected_view/') self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')
return True
return self.store.get_course(courselike.id.replace(branch=None, version_guid=None))
nodata, data = chunk(data, pack_size) nodata = unpack(pack_type, nodata)[0]
def test_real_user(useless): useless_user = Mock(email='fake@fake.com', id=useless) return useless_user
store.append('df_dc', df_dc, data_columns=[ 'B', 'C', 'string', 'string2'])
from __future__ import generators from __future__ import absolute_import import logging import socket
window = tensor.alloc(0.0, batch, channel, res_r, res_c, pr, pc) window.name = 'unravlled_winodows_' + name
iris = datasets.load_iris() X = iris.data y = iris.target
if bypass_activation_email: self.assertFalse(mock_send_mail.called) else: self.assertTrue(mock_send_mail.called)
self.errors_occurred = False
return self.view(np.ndarray)
return np.empty((0, 2), dtype=arr.dtype)
response = self._get_page( 'verify_student_verify_now', course.id, expected_status_code=302 ) self._assert_redirects_to_dashboard(response)
sim = np.array([[0, 5, 9, 4], [5, 0, 2, 2], [4, 2, 1, 0]])
from __future__ import print_function
def is_nonempty(x): try: return x.shape[axis] > 0 except Exception: return True
if not isnull(new_values).all(): values = new_values
path = os.path.expanduser(path)
tm.assert_numpy_array_equal(mi.values[:4], mi[:4].values)
result = df.fillna({'a': 0, 'b': 5, 'd': 7})
with self.assertNumQueries(0): with self.assertRaises(UndergroundBar.DoesNotExist): p.undergroundbar
ret = _psql_prepare_and_run(['-c', query], user=user, host=host, port=port, maintenance_db=maintenance_db, password=password, runas=runas) return ret['retcode'] == 0
html = module.render(STUDENT_VIEW).content
n_samples_curr_lab = np.sum(mask) - 1 if n_samples_curr_lab != 0: intra_clust_dists[mask] = np.sum( current_distances[:, mask], axis=1) / n_samples_curr_lab
ret['comment'] = 'Event module not available. Schedule add failed.'
def get_queryset(self, request): qs = super(UserLimitedAdmin, self).get_queryset(request) return qs.filter(is_superuser=False)
self.factory(learning_rate="<unknown>")
if self.actions is None or IS_POPUP_VAR in request.GET: return OrderedDict()
self.assertTrue( CourseEnrollment.objects.filter(course_id=self.course.id, user=student).exists() )
from __future__ import unicode_literals
if k in ['catIndex']: continue
'parent_url', module.xml_attributes.get('parent_sequential_url')
data = read_sas(self.file01) tm.assert_frame_equal(data, data_csv)
success = 'correct' for answer_id in correct_map: if not correct_map.is_correct(answer_id): success = 'incorrect'
ndim = set([b.ndim for b in blocks])
class WidePanel(Panel): def __init__(self, *args, **kwargs): warnings.warn("WidePanel is deprecated. Please use Panel", FutureWarning, stacklevel=2)
estimator.means_init = np.array([X_train[y_train == i].mean(axis=0) for i in range(n_classes)])
return True
d = Entry.objects.latest('published').published last_build_date = rfc2822_date(timezone.make_aware(d, TZ))
ssh = salt.client.ssh.SSH(opts)
import copy import logging import re
rng = np.random.RandomState(0)
ANALYTICS_DASHBOARD_URL = ENV_TOKENS.get("ANALYTICS_DASHBOARD_URL", ANALYTICS_DASHBOARD_URL) ANALYTICS_DASHBOARD_NAME = ENV_TOKENS.get("ANALYTICS_DASHBOARD_NAME", PLATFORM_NAME + " Insights")
import salt.ext.six as six
from salt.states import http
log = logging.getLogger(__file__)
self.models_module = None
assert_allclose(f(x_mlp).flatten(), g(x).flatten(), rtol=1e-5, atol=5e-5)
if index < 0: index = len(sysPath) + index + 1 if index > len(sysPath): index = len(sysPath)
return self
self.login() response = self.client.get('/logout/next_page/') self.assertEqual(response.status_code, 302) self.assertURLEqual(response.url, '/somewhere/')
if refresh: refresh_db()
if len(self.blocks) > 1:
before = self.make_project_state([]) after = self.make_project_state([address, tenant]) autodetector = MigrationAutodetector(before, after) changes = autodetector._detect_changes()
continue
import cgi import logging
request, strategy = self.get_request_and_strategy( auth_entry=pipeline.AUTH_ENTRY_REGISTER, redirect_uri='social:complete') strategy.request.backend.auth_complete = mock.MagicMock(return_value=self.fake_auth_complete(strategy))
class_prior = np.array([0.75, 0.25]) assert_array_almost_equal(np.exp(clf.class_log_prior_), class_prior)
resp = self.client.delete(reverse_usage_url("xblock_handler", chapter1_usage_key)) self.assertEqual(resp.status_code, 204)
return
for app in ADDL_INSTALLED_APPS: INSTALLED_APPS += (app,)
average_weight = score_weight score_weight = None not_average_axis = 0
settings.DEFAULT_TEMPLATE_ENGINE['DIRS'].insert(0, theme_root / 'templates') edxmako.paths.add_lookup('main', theme_root / 'templates', prepend=True)
log.removeHandler(handler)
try: import psycopg2 HAS_POSTGRES = True except ImportError: HAS_POSTGRES = False
cherrypy.config.update(conf['global'])
rexp = re.compile('(?m)^ [*|-] ' r'([^ ].*)[\r\n].*\(([^\)]+)')
self.assertTrue( inspect.isfunction( self.loader[self.module_name + '.loaded'] ) ) self.assertTrue(self.module_name + '.not_loaded' not in self.loader)
param_grid = [param_grid]
import logging
memory_oper = ['read', 'write'] memory_scope = ['local', 'global']
with tm.assert_produces_warning(FutureWarning): self.ts.order()
PAM_PROMPT_ECHO_OFF = 1 PAM_PROMPT_ECHO_ON = 2 PAM_ERROR_MSG = 3 PAM_TEXT_INFO = 4
expected = left_f(df, Timestamp('nat')) result = right_f(Timestamp('nat'), df) assert_frame_equal(result, expected)
add_trigger(task_definition=task_definition, **kwargs)
df = DataFrame( np.random.randn(5, 5), columns=['A', 'B', 'B', 'B', 'A'])
os.remove(filename)
if not set_permissions(username, permissions, uid): log.warning('unable to set user permissions') delete_user(username, uid) return False
ans = commentable_id in course_cohort_settings.cohorted_discussions
dateutil_result = parse(date_str, dayfirst=dayfirst, yearfirst=yearfirst) self.assertEqual(dateutil_result, expected)
import logging
has_dimension_fields = self.width_field or self.height_field if not has_dimension_fields: return
from django.core.management import call_command
ic = self.index_col if ic is None: ic = []
if auto_created: self.creation_counter = Field.auto_creation_counter Field.auto_creation_counter -= 1 else: self.creation_counter = Field.creation_counter Field.creation_counter += 1
assert_array_almost_equal(X_transformed[:, :-1], svd.fit_transform(X)) assert_array_equal(X_transformed[:, -1], select.fit_transform(X, y).ravel())
log = logging.getLogger(__name__)
#today = '' today_fmt = '%B %d, %Y'
vmconfig['changed']['remove_{0}'.format(instance)].append( current_cfg[vmconfig_type['instance'][instance]] )
tm.assert_almost_equal(tuple(x), x_rec)
d = self.tsframe.index[10] indexer = self.tsframe.index > d indexer_obj = indexer.astype(object)
if getattr(self.distribution, 'salt_version_hardcoded_path', None) is None: print('This command is not meant to be called on it\'s own') exit(1)
bulk_ops_record.nest()
assert sls_obj.__str__() == '{foo: bar, baz: qux}' assert sls_obj.__repr__() == '{foo: bar, baz: qux}'
query.get_compiler(using=db).as_sql()
import logging
diabetes_X = diabetes.data[:, np.newaxis, 2]
result = expr._can_use_numexpr(operator.add, '+', self.mixed, self.frame, 'evaluate') self.assertFalse(result)
tok = '"REGEX"'
time.sleep(0.5)
self.settings_detail.visit() self.assertTrue(self.settings_detail.is_browser_on_page())
data = data.sort(columns='id') data.index = pandas.Index(lrange(data.shape[0])) return data
resp = self.client.get(reverse('dashboard')) self.assertNotContains(resp, 'Robot_Super_Course') self.assertContains(resp, 'Robot_Course_Outside_Microsite')
assert_almost_equal(np.std(y - np.dot(X, c)), 1.0, decimal=1)
if self.is_shape_reversed: shape = shape[::-1]
log.warning("Multiple gating milestones found for prereq UsageKey %s", prereq_content_key)
ser.replace([np.nan, 'foo', 'bar'], -1, inplace=True)
train_obj = pylearn2.config.yaml_parse.load(final_yaml_str)
if not success: raise IOError("Could not acquire valid {driver} browser session.".format(driver=browser_driver))
return self.alpha_
if key not in self: root = self.__root last = root[0] last[1] = root[0] = self.__map[key] = [last, root, key] dict_setitem(self, key, value)
axes = df.groupby('classroom').boxplot(ax=axes)
url = '{0}&order_by=display_name&sort_order=desc'.format(self.list_url_master_course) resp = self.client.get(url, {}, HTTP_AUTHORIZATION=self.auth)
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'gogrid'
bob_profile = UserProfile.objects.using('other').create(user=bob, flavor='crunchy frog')
self.dashboard_page.visit()
options = self.create_description(complib=complib, complevel=complevel, fletcher32=fletcher32, expectedrows=expectedrows)
class_members = set() for cls in classes: class_members.update([cls.__name__ + '.' + x[0] for x in inspect.getmembers(cls)])
self.assertEqual(cl.result_count, 1)
value = self.options[name]
lrange = builtins.range lzip = builtins.zip lmap = builtins.map lfilter = builtins.filter
self.assertEqual(ax.collections[0].colorbar._label, 'z')
self.frame.to_latex()
pass
donation = Donation.objects.get(pk=donation.id) self.assertEqual(donation.status, "purchased")
import logging
def test_to_datetime_format_integer(self): s = Series([2000, 2001, 2002]) expected = Series([Timestamp(x) for x in s.apply(str)])
if isinstance(context, Context): return t.render(context) else: return t.render(Context(context))
else: local = salt.client.LocalClient() ret = local.cmd('{0}'.format(target), cmd, args, kwargs)
self._catalog = {}
with self.assertRaises(AttributeError): getattr(self.profile, '_changed_fields')
if profile not in valid_profiles: raise salt.exceptions.SaltInvocationError('Invalid Profile Name')
time_lapse = time.time() - self.start_time full_msg = "%s: %.2fs, %.1f min" % (msg, time_lapse, time_lapse / 60)
((field.many_to_one and not field.related_model) or field.one_to_many)):
y_pred = clf.predict(xx)
module_class = RandomizeModule resources_dir = None
elif request.method == 'DELETE': return delete_entrance_exam(request, course_key)
self.assertEqual(r.status_code, 200) self.client.get(reverse('admin:logout'))
rs = self.pc.convert([0, 1], None, self.axis) xp = [0, 1] self.assertEqual(rs, xp)
if is_string_dtype(left) or is_string_dtype(right):
super(SimpleTemplateResponse, self).__init__('', content_type, status, charset)
if not modeladmin.has_delete_permission(request): raise PermissionDenied
warnings.filterwarnings( 'ignore', '^Module backports was already imported from (.*), but (.*) is being added to sys.path$', UserWarning )
unpickled = self.round_trip_pickle(self.empty) repr(unpickled)
return True
world.visit(video_url)
self.assertEqual(response.status_code, 406) msg = Messages.NO_DEFAULT_ENROLLMENT_MODE.format(course_id=self.course.id) self.assertResponseMessage(response, msg)
where = _ensure_term(where, scope_level=1) s = self._create_storer(group) s.infer_axes()
attrs['freq'] = 'infer'
self.check_ordering_of_field_choices([self.b2, self.b1])
upper_name = name.upper()
memcached_params = {} for _cache_params in settings.CACHES.values(): if _cache_params['BACKEND'].startswith('django.core.cache.backends.memcached.'): memcached_params = _cache_params
return HttpResponse(content="")
for name, value in tb_frame.f_locals.items(): cleansed[name] = self.cleanse_special_types(request, value)
HAS_AUGEAS = False try: from augeas import Augeas as _Augeas HAS_AUGEAS = True except ImportError: pass
assert_almost_equal(np.diag(y_cov), np.exp(kernel.theta[0]), 5)
from __future__ import absolute_import import re
self.assertTrue(self.store.has_changes(self.store.get_item(self.course.location)))
self.generated_certificate.invalidate()
index_1 = [1, 2, 3, 4] index_2 = [5, 6, 7, 8] s1 = Series(1, index=index_1) s2 = Series(2, index=index_2)
test_combined_expression = unittest.expectedFailure(test_combined_expression)
self.assertRaises(KeyError, lambda: s.loc[['D']])
self._check_results( test_user, expected_user_accessible_blocks, blocks_with_differing_access, transformers, )
raise
try: import docker import docker.utils HAS_DOCKER_PY = True except ImportError: HAS_DOCKER_PY = False
DATE_FORMAT = r'Yeko M\re\n d\a' TIME_FORMAT = 'H:i' SHORT_DATE_FORMAT = 'Y M j'
if values[0] < binner[0]: raise ValueError("Values falls before first bin")
gated_content = gating_api.get_gated_content(course, user)
field_data = LicenseMixin.parse_license_from_xml(field_data, xml)
stream1 = StringIO() stream2 = StringIO() handler1 = StreamHandler(stream1) handler2 = StreamHandler(stream2)
result = pd.concat([s1, s2]) tm.assertIsInstance(result.index, PeriodIndex) self.assertEqual(result.index[0], s1.index[0])
if receivers is NO_RECEIVERS: return []
import xml.etree.cElementTree as ElementTree
self.assertEqual(translate_url('/en/account/register/', 'nl'), '/nl/profiel/registeren/') self.assertEqual(translation.get_language(), 'en')
path = salt.utils.url.unescape(path)
if isinstance(item, compat.string_types): return self.asobject.insert(loc, item) raise TypeError( "cannot insert TimedeltaIndex with incompatible label")
from __future__ import absolute_import import os
if self.has_spatial_indexes: self.assertSpatialIndexExists('gis_neighborhood', 'path')
pos = 0 end_text_pos = 0 current_len = 0 open_tags = []
CELERY_ALWAYS_EAGER = True
raise nose.SkipTest("failing on %s" % ' '.join(platform.uname()).strip())
result = f.clean('13.30 12-21-2010') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
res_val = df.loc["j", "cats"] self.assertEqual(res_val, exp_val)
from __future__ import unicode_literals
expected = Series([np.nan, 0.2, np.nan], index=[3, 2, 3]) result = ser.loc[[3, 2, 3]] assert_series_equal(result, expected, check_index_type=True)
STATICFILES_STORAGE = 'openedx.core.lib.django_require.staticstorage.OptimizedCachedRequireJsStorage'
block = self._add_simple_content_block() with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
return False
rng = make_np_rng(None, 322, which_method="shuffle")
int_payload['topic_lst'] = match_ids
assert_raises(Exception, metric, y1, y2, sample_weight=np.hstack([sample_weight, sample_weight]))
for mode in configured_modes: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode, mode_display_name=mode, )
if name_field not in model: raise salt.exceptions.SaltException( "Name '{0}' not found in returned fields.".format( name_field))
student_dict['cohort'] = next( (cohort.name for cohort in student.course_groups.all() if cohort.course_id == course_key), "[unassigned]" )
ext = self.splitext(guessed_filename)[1] content_type = info.get('content-type') if not ext and content_type: ext = mimetypes.guess_extension(content_type) if ext: guessed_filename += ext
else: new_subcluster1, new_subcluster2 = _split_node( closest_subcluster.child_, threshold, branching_factor) self.update_split_subclusters( closest_subcluster, new_subcluster1, new_subcluster2)
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=rng)
wkb_r = WKBReader()
IS_WIN = win_firewall.__virtual__()
if actual_data != data: ret.update({item: {'old': actual_data, 'new': data}})
cmd = 'Install-Module -name "{0}" -Force'.format(name) no_ret = _pshell(cmd) return name in list_modules()
from salt.ext.six import string_types
results.append({ 'identifier': identifier, 'invalidIdentifier': True, })
self.event.fire_event(new_job_load, tagify([clear_load['jid'], 'new'], 'job'))
#import salt.ext.six as six
self._check_percentile(percentiles)
self._get_axis_number(axis) if numeric_only: raise NotImplementedError('Series.{0} does not implement ' 'numeric_only.'.format(name)) return op(delegate, skipna=skipna, **kwds)
doc_topic_distr /= doc_topic_distr.sum(axis=1)[:, np.newaxis] return doc_topic_distr
return self._reindex_axes(axes, level, limit, tolerance, method, fill_value, copy).__finalize__(self)
if (self._num_days(self._today()) - ts) > settings.PASSWORD_RESET_TIMEOUT_DAYS: return False
#pepa_grains:
self.assertEqual(mgr.as_matrix().dtype, np.float64)
for layer, state in safe_izip(dbm.hidden_layers, H_hat): upward_state = layer.upward_state(state) layer.get_output_space().validate(upward_state)
cohort_list[0].users.remove(*user_list) assert_events("removed", user_list, cohort_list[:1]) mock_tracker.reset_mock()
resp = self.client.get(course_wiki_page, follow=True) target_url, __ = resp.redirect_chain[-1] self.assertTrue(reverse('signin_user') in target_url)
try: from hashlib import md5 except ImportError: from md5 import md5
ind = date_range("2012-12-01", periods=10, tz="utc") ind = ind.drop(ind[-1])
launch_mcd_on_dataset(1000, 5, 450, 0.1, 0.1, 540)
self.assert_no_xpath(xml, "//label[@class='choicegroup_incorrect']", self.context)
return 1
touch(name, makedirs=makedirs) retry_res, retry_msg = _check_file(name) if not retry_res: return _error(ret, check_msg)
self.assertFalse(hasattr(draft_open_assessment, "xml_attributes"))
response = other_with_prefix_view(request, '9') self.assertEqual(response.content, b'Hello World 9')
from unit.modules.boto_lambda_test import BotoLambdaTestCaseMixin, TempZipFile
kwargs = {'script': script, 'cfn': 'check_func'} xml_str = CustomResponseXMLFactory().build_xml(**kwargs)
try: fields = kwargs['context'].pop('fields', DEFAULT_FIELDS) or DEFAULT_FIELDS except KeyError: fields = DEFAULT_FIELDS super(BookmarkSerializer, self).__init__(*args, **kwargs)
df.iloc[0:5]['group'] = 'a'
from salt.modules import proxy as proxy
assert_equal(distances.shape, (n_queries,)) assert_equal(distances.dtype, object) assert_equal(neighbors.shape, (n_queries,)) assert_equal(neighbors.dtype, object)
if not result.columns.equals(obj.columns): return self._transform_general(func, *args, **kwargs)
self.assert_has_text(xml, "//div[@class='capa_alert']", self.context['submitted_message'])
if action_form.is_valid(): action = action_form.cleaned_data['action'] select_across = action_form.cleaned_data['select_across'] func = self.get_actions(request)[action][0]
dtype = self._selected_obj.dtype result = self._selected_obj.values.copy()
self.assertIn("tamaño = models.IntegerField()", output)
assert_raises(ValueError, auc, [0.0], [0.1])
import salt.utils
unique_together = ('username', 'course', 'provider') get_latest_by = 'created'
clf_constrained = LassoCV(n_alphas=3, eps=1e-1, max_iter=max_iter, positive=True, cv=2, n_jobs=1) clf_constrained.fit(X, y) assert_true(min(clf_constrained.coef_) >= 0)
return is_list_like(key) and not (isinstance(key, tuple) and type(key) is not tuple)
import salt.utils import salt.utils.itertools from salt.exceptions import SaltInvocationError
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains, with_system_user ) ensure_in_syspath('../../')
for k in self.file_mapping: if mod_name in k: yield k
cummin_xs = self.tsframe.cummin(axis=1) self.assertEqual(np.shape(cummin_xs), np.shape(self.tsframe))
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
how = {'right': 'left', 'left': 'right'}.get(how, how)
return result['dict']
import salt.utils.virt
header, data = chunk(data, 122) header = unpack(POSTGIS_HEADER_STRUCTURE, header)
atomic = False
if (children_left[node_id] != children_right[node_id]): stack.append((children_left[node_id], parent_depth + 1)) stack.append((children_right[node_id], parent_depth + 1)) else: is_leaves[node_id] = True
call_command('seed_permissions_roles', unicode(cls.course_id))
query = Item.objects.filter(tags=self.t2).query self.assertNotIn(LOUTER, [x.join_type for x in query.alias_map.values()])
del post_data[post_key] expected_pattern = r"<title>(\s+)Receipt"
cache.clear()
students = self._create_students(10)
with cf.option_context('display.unicode.east_asian_width', True):
self.course.discussion_topics = {} self.course.save() self.discussion_num = 0 self.instructor = InstructorFactory(course_key=self.course.id)
import salt.config import salt.loader from salt.modules import boto_cognitoidentity
laplacian, dd = graph_laplacian(sims, normed=False, return_diag=True) _, diffusion_map = eigh(laplacian) embedding_2 = diffusion_map.T[:n_components] * dd embedding_2 = _deterministic_vector_sign_flip(embedding_2).T
df = df_orig.copy()
publish.__opts__ = {}
instance._state.db = using or DEFAULT_DB_ALIAS
print_monitor_cv.main(filename, all=True)
continue
from salt.modules import qemu_nbd
test_modes = ['seqwr', 'seqrewr', 'seqrd', 'rndrd', 'rndwr', 'rndrw']
allows_auto_pk_0 = True
data = JUNK_FOOD_DOCS + NOTJUNK_FOOD_DOCS
y_error = np.zeros(n_test)
if not lib.isscalar(indexer): if len(indexer) == 1: loc = indexer.item() else: raise ValueError("cannot label index with a null key")
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.approve()
"median_absolute_error",
self.assertEqual(command_output, "Installed 0 object(s) (of 2) from 1 fixture(s)")
if session_status[courselike_string] != 4: _save_request_status(request, courselike_string, -abs(session_status[courselike_string]))
self.assertNumQueries(2, a.delete) self.assertFalse(User.objects.exists()) self.assertFalse(Avatar.objects.exists())
([], 'honor'),
response = self.client.get(path) self.assertContains(response, "The password reset link was invalid")
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.'
course_location_one = locator.CourseLocator('Org1', 'Course1', 'Run1') new_course_one = self._create_course(course_location_one)
super(BadImplementationAbstractEnrollmentReportProvider, self)
from __future__ import absolute_import import signal import logging
_sparse_kernels = ["linear", "poly", "rbf", "sigmoid", "precomputed"]
for library in store.get_libraries(**kwargs): library_id = self._clean_locator_for_mapping(library.location) if library_id not in libraries: libraries[library_id] = library
update_wrapper(view, cls, updated=())
if not date_time: msg = '[{}] is not a valid timestamp'.format(value) log.warning(msg) raise serializers.ValidationError(msg)
Ioinits = { 'road_stack': '.salt.road.manor.stack', }
after_jump = [] after_jump_arguments = (
usernames = [x for x in usernames if x] initial = usernames[:]
from datetime import datetime from mock import patch, Mock
rbenv.__grains__ = {} rbenv.__salt__ = {}
if old_value is not None: __salt__['file.sed'](makeconf, value, '', limit=var)
X, y = check_X_y(X, y, multi_output=True, y_numeric=True) self.y_ndim_ = y.ndim if y.ndim == 1: y = y[:, np.newaxis]
instance.__dict__[self._field.attname] = value return value
self.assertTrue(len(controllers) == 0)
module = module + '.' if not module.endswith('.') else module
self.X_topo_space = self.view_converter.topo_space
osa_script = self.run_function('assistive.installed', [OSA_SCRIPT]) if osa_script: self.run_function('assistive.remove', [OSA_SCRIPT])
available_apps = ['model_fields']
recommended_datastores = si.content.storageResourceManager.RecommendDatastores(storageSpec=storage_spec)
spaces = map(lambda c: get_space(c[0]), self.costs)
X = iris.data y = iris.target
if isinstance(ascending, list): if not len(level) == len(ascending): raise ValueError("level must have same length as ascending")
log = logger.getLogger(__name__)
from __future__ import unicode_literals
min_estimators = 15 max_estimators = 175
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
self.non_index_axes = [] self.data_columns = []
from salt.modules import kmod
try: try: func, args, kwargs = self._job_queue.get(timeout=1)
__virtualname__ = 'status'
self.assertRaises(IndexError, s.__getitem__, len(self.ymd))
from __future__ import absolute_import import logging import os import os.path
import salt.ext.six as six
from __future__ import unicode_literals
for i in ['0.4', '1.4', '2.4']: result[i] = to_datetime(result[i])
self._pool = None
if not user or user.is_anonymous(): return None
if store.has_course(destination_course_key, ignore_case=True): raise DuplicateCourseError(source_course_key, destination_course_key)
K = self.kernel_(self.X_train_)
if len(res) != len(ri): res, out = np.zeros(len(ri), dtype=out.dtype), res res[ids] = out
from __future__ import absolute_import
try: return self.matches[state] except IndexError: return None
self.assertTrue(all(isinstance(course, CourseSummary) for course in courses_summary_list)) self.assertEqual(len(courses_summary_list), 1)
memb = ax.asfreq(self.freq, how=self.convention)
if len(sindexers) == 1 and sindexers[0] != 0: df = df.T
values = self.values mask = isnull(values)
ADVANCED_PROBLEM_TYPES = [ { 'component': 'openassessment', 'boilerplate_name': None, }, ]
with tm.assert_produces_warning(None): for idx1, idx2 in cases:
'contentstore', 'contentserver', 'course_creators', 'external_auth',
if return_distance: dist, neigh_ind = results else: neigh_ind = results
log = logging.getLogger(__name__)
#html_sidebars = {}
for rel_app_label, rel_model_name in related_models: try: model_state = self.models[rel_app_label, rel_model_name] except KeyError: pass else: states_to_be_rendered.append(model_state)
s = Series(randn(5), name='A') s2 = Series(randn(5), name='B')
if self.axis == 1: X = check_array(X, accept_sparse='csr', dtype=FLOAT_DTYPES, force_all_finite=False, copy=self.copy)
self.assertFalse(os.path.exists(path_test + '.bak'))
'lms.djangoapps.teams',
if isinstance(value, string_types) and ' ' in value: value = re.sub(r'\s+', '\t', value)
klass._add_aggregate_operations() klass._add_numeric_operations()
draft_items_locations = {item.location for item in draft_items} return [ item for item in base_get_items(MongoRevisionKey.published) if item.location not in draft_items_locations ]
if not _level and isinstance(ret, dict): from pandas import concat ret = concat(ret, axis=1) return ret
raise ValueError('cannot insert %s, already exists' % item)
Z = np.ones((data.Ny, data.Nx), dtype=np.float64)
self._verify_components_visible(['problem']) self._verify_student_view_locked()
from salt.modules import supervisord
import salt.utils import salt.utils.itertools from salt.utils.decorators import which as _which
method = interpolate.BPoly.from_derivatives m = method(xi, yi.reshape(-1, 1), orders=order, extrapolate=extrapolate)
return cls(entry, module)
from salt.modules import archive from salt.exceptions import CommandNotFoundError from salt.utils import which_bin
return repo.branches()
import warnings warnings.warn("The pandas.io.ga module is deprecated and will be " "removed in a future version.", FutureWarning, stacklevel=2)
self._create_a_timed_exam_and_attempt()
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, max_attempts=0, done=True, correct=False) self.assertTrue(module.should_show_reset_button())
try: import boto import boto.ec2 HAS_BOTO = True except ImportError: HAS_BOTO = False
self.assertEqual(source.driver, str(ds.driver))
ret.append(rest)
request_context = get_template_request_context() if request_context: for item in request_context: context_dictionary.update(item) for item in context_instance: context_dictionary.update(item) if context: context_dictionary.update(context)
from __future__ import absolute_import
from __future__ import absolute_import
from __future__ import unicode_literals
rdp.__salt__ = {}
loc = lev.searchsorted(lab, side=side) if side == 'right' and loc >= 0: loc -= 1 return start + section.searchsorted(loc, side=side)
import salt.utils
arr = np.arange(1000, dtype=np.int64) index = DatetimeIndex(arr)
try: message = force_text(exception.args[0]) except (IndexError, UnicodeDecodeError): message = '(Could not get exception message)'
set_random_state(lda, 3) set_random_state(tree, 3) assert_equal(tree.random_state, 3)
#epub_post_files = []
__virtualname__ = 'winrepo'
self.client.logout() self._test_return_login(user_is_activated=False)
return Float64Index(data, copy=copy, dtype=dtype, name=name)
Book.objects.using('other').create(title="Pro Django", published=datetime.date(2008, 12, 16))
ipv4_re = r'(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)(?:\.(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}'
data = { "form-TOTAL_FORMS": "2", "form-INITIAL_FORMS": "2", "form-MAX_NUM_FORMS": "0",
from salt.modules import win_service
image_path = "{0}/ext2_saved".format(mountpoint) orig_fstype = ret['before']['type']
ensemble = BaggingClassifier(base_estimator=LogisticRegression(), random_state=rng, max_samples=5).fit(X_train, y_train)
parent = self.get_a_block(usage_id="parent") parent.not_inherited = "Changed!" self.assertEqual(parent.not_inherited, "Changed!")
if xml_path: xml_text = xml_path
if ref is None: del self._cacher else: try: ref._maybe_cache_changed(cacher[0], self) except: pass
decision_only = OneVsRestClassifier(svm.SVR()).fit(X_train, Y_train) assert_raises(AttributeError, decision_only.predict_proba, X_test)
config = _load_config()
expected = None
if not self._can_hold_element(value): dtype, _ = com._maybe_promote(arr_value.dtype) values = values.astype(dtype)
ENROLLMENT_COURSE_DETAILS_CACHE_TIMEOUT = ENV_TOKENS.get('ENROLLMENT_COURSE_DETAILS_CACHE_TIMEOUT', 60)
df_result_custom_name = df_result df_result_custom_name = df_result_custom_name.rename( columns={'_merge': 'custom_name'})
if not com.is_list_like(header): offset = 1 + header else: offset = 1 + max(header)
request2 = self.request_factory.post('/create_account', data=postvars) request2.session = client.session request2.user = AnonymousUser()
groups = grouped.groups indices = grouped.indices
accuracy.plot([64, 64], [0.7, 1], label="n_features")
__opts__.get( 'log_level', 'error' )
train_with_monitoring_datasets( train_dataset=dataset3, monitoring_datasets=no_monitoring_datasets, model_force_batch_size=False, train_iteration_mode='sequential', monitor_iteration_mode='sequential')
df = DataFrame({"a": [5, 15, 25, -5]}) c = pd.cut(df.a, bins=[-10, 0, 10, 20, 30, 40])
if len(set(current_domains).intersection(bypass_domains)) != len(bypass_domains): changes_needed = True
self.assertEqual(cert.status, ExampleCertificate.STATUS_ERROR) self.assertIn(self.ERROR_MSG, cert.error_reason)
clf = PCA(n_components=2) X_true = clf.fit_transform(X_true)
oh = OneHotEncoder(handle_unknown='error') oh.fit(X) assert_raises(ValueError, oh.transform, y)
layer = data_source[layer_key] ogr_fields = layer.fields
class Meta: swappable = 'TEST_SWAPPABLE_MODEL'
setattr(hasher, attr, old_value)
ADMINS = []
self.assertQuerysetEqual( Order.objects.filter(items__in=OrderItem.objects.values_list('status')), [o1.pk], lambda x: x.pk)
create_course(step, course)
self.assertTrue(exam_attempts_section.is_student_attempt_visible)
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
resp = self.client.get(reverse_usage_url('xblock_handler', usage_key)) self.assertEqual(resp.status_code, 200)
self.assertEquals( response_data["content"], strip_none(make_mock_thread_data(course=self.course, text=text, thread_id=thread_id, num_children=1)) ) mock_request.assert_called_with( "get",
self.assertEqual(ugettext("Title"), "Title")
left_indexer = left_indexer[counts[0]:] new_labels = [lab[left_indexer] for lab in new_labels]
elif not yield_descendants_of_unyielded and not any(yield_results[parent] for parent in parents): continue
self.assertEqual(url_path, '/embargo/blocked-message/courseware/default/')
UID_FIELD = "email"
self.assertQuerysetEqual( Item.objects.filter(created__in=[self.time1, self.time2]), ['<Item: one>', '<Item: two>'] )
result = f.clean('1:30:05 PM') self.assertEqual(result, time(13, 30, 5))
selector = slice(None, None)
self.assertEqual(Section.objects.latest('id').article_set.count(), 2)
import integration
self.assert_enrollment_status(as_server=True)
'cython_enable': bool,
if not td.nanoseconds: self.assertEqual(Timedelta(str(td)), td) self.assertEqual(Timedelta(td._repr_base(format='all')), td)
self.assertQuerysetEqual( tony.friends.all(), ['Chris'], attrgetter("name") )
import re
problem1_content_before_switch = self.problem_page.problem_content
return True
raise nodes.SkipNode
from __future__ import unicode_literals
if 'retcode' in self.functions.pack['__context__']: ret['retcode'] = self.functions.pack['__context__']['retcode']
self.assertEqual(pq(response.content)(".sts-enrollment").length, 0)
rev = rev.lower() remote_rev = rev remote_rev_type = 'sha1'
return [ Location._from_deprecated_son(course['_id'], course['_id']['name']).course_key for course in courses ]
if (n_inliers_subset == n_inliers_best and score_subset < score_best): continue
from datetime import datetime from pandas.compat import range, lrange import operator import nose
assert len(self.dbm.hidden_layers) > 0
result.summary
from __future__ import absolute_import
self.assertEqual(ser.loc[index[1]], 1)
nvcc_compiler.add_standard_rpath(cuda_convnet_loc)
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) signal_handler.send.assert_called_with('course_published', course_key=course.id)
if current_state == 'off': ret['result'] = True ret['comment'] = 'System already in the correct state' return ret
export_extra_content( export_fs, self.modulestore, self.courselike_key, xml_centric_courselike_key, 'static_tab', 'tabs', '.html' )
self.assertEqual(test, expected)
_translations = {} _active = local()
class Photo(models.Model): title = models.CharField(max_length=30) image = models.FileField(storage=temp_storage, upload_to='tests')
from __future__ import absolute_import
response = self.get_response(request)
d = self
if privacy is None: privacy = self.PRIVACY_PUBLIC self.visit_profile_page(username, privacy=privacy)
def f(): cat.remove_categories(["c"])
_("There was a problem with the staff answer to this problem: complex boundary.")
from __future__ import unicode_literals
query_features = task_input.get('features') student_data = enrolled_students_features(course_id, query_features) header, rows = format_dictlist(student_data, query_features)
from __future__ import unicode_literals
if 'children' in qualifiers: settings['children'] = qualifiers.pop('children')
clf = svm.LinearSVC(verbose=1) clf.fit(X, Y)
import ioflo.base.deeding
thread_local_branch_setting = getattr(self.thread_cache, 'branch_setting', None) if thread_local_branch_setting: return thread_local_branch_setting else: return self.default_branch_setting_func()
if mail: self.assertEqual(user.email, mail) self.assertEqual(list(User.objects.filter(email=postvars['email'])), [])
from salt.exceptions import CommandExecutionError, SaltInvocationError
import salt.ext.six as six
ts[datetime(2000, 1, 6)] = 0 self.assertEqual(ts[datetime(2000, 1, 6)], 0)
from __future__ import absolute_import import logging
train_score = Perceptron().fit(X_kpca, y).score(X_kpca, y) assert_equal(train_score, 1.0)
df = DataFrame({'col': self.bseries})
clf_unconstrained = LassoCV(n_alphas=3, eps=1e-1, max_iter=max_iter, cv=2, n_jobs=1) clf_unconstrained.fit(X, y) assert_true(min(clf_unconstrained.coef_) < 0)
self.courseware_page.visit() self.courseware_page.wait_for_page() self.assertFalse(element_has_text( page=self.courseware_page, css_selector=entrance_exam_link_selector, text='Entrance Exam' ))
if timezone.is_aware(value): raise ValueError("MySQL backend does not support timezone-aware times.")
print _pep8_output(count, violations_list)
content = '\n'.join([TAB + line for line in content])
ret['result'] = True ret['comment'] = 'vm {0} already stopped'.format(name)
val = self.verify_fk(feat, model_field, ogr_name)
ith_cluster_silhouette_values = \ sample_silhouette_values[cluster_labels == i]
vect = CountVectorizer(analyzer='char', max_df=1.0, binary=True, dtype=np.float32) X_sparse = vect.fit_transform(test_data) assert_equal(X_sparse.dtype, np.float32)
if requirements or pip_pkgs: before = set(__salt__['pip.freeze'](bin_env=name, user=user, use_vt=use_vt))
if instance in vmconfig['current'] and vmconfig['current'][instance] is not None: for current_cfg in vmconfig['current'][instance]: remove_instance = True
check_err(result) ptr = ptr_byref(cargs, offset) s = ptr.value
try: course_key = CourseKey.from_string(course_id) except InvalidKeyError: raise Http404
if not cmd_path: return False elif not _which('ldd'): raise CommandNotFoundError('ldd')
self._check_linkedin_visibility(True)
descriptor = descriptor.get_children()[0] self.course_descriptor_no_inheritance_check(descriptor)
print("--- Dense matrices")
with self.assertRaises(ValueError): with transaction.atomic(using='default'): marty.book_set.set([pro, dive])
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) second_checkpoint.add_verification_attempt(attempt) self.assertEqual(second_checkpoint.photo_verification.count(), 1)
new_params = estimator.get_params() for param_name, original_value in original_params.items(): new_value = new_params[param_name]
BaseLoader = getattr(yaml, 'CSafeLoader', yaml.SafeLoader) BaseDumper = yaml.SafeDumper if six.PY3 else getattr(yaml, 'CSafeDumper', yaml.SafeDumper)
return self.eof_index
if flip_y >= 0.0: flip_mask = generator.rand(n_samples) < flip_y y[flip_mask] = generator.randint(n_classes, size=flip_mask.sum())
import argparse import atexit import copy import os import shutil import subprocess import sys import tempfile import warnings
from __future__ import unicode_literals
from __future__ import absolute_import
self.exp_dirichlet_component_ = np.exp( _dirichlet_expectation_2d(self.components_))
return self.q(css="#is_prereq").visible
service.__grains__ = {} service.__salt__ = {}
if name in list_tasks(location): return True else: return False
if isinstance(index_like, list): if type(index_like) != list: index_like = list(index_like) converted, all_arrays = lib.clean_index_list(index_like)
from __future__ import absolute_import
print( ' {LIGHT_RED}*{ENDC} {0} Failed to sync {2}: ' '{1}'.format( name, output['ret'], modules_kind, **self.colors) ) return False
content = map(lambda l: l[:-1].split(', '), content)
import re import os import logging
learn_cache_key(request, response)
return generic.NDFrame._update_inplace(self, result, **kwargs)
MUTABLE = False
import logging import os.path import re import tempfile
zero_weights = [0] * 10 with tm.assertRaises(ValueError): o.sample(n=3, weights=zero_weights)
import integration import salt.utils
stat_f = os.path.join(PLUGINDIR, plugin) execute_bit = stat.S_IXUSR & os.stat(stat_f)[stat.ST_MODE] if execute_bit: ret.append(plugin)
login = self.client.login(username='testclient', password='password') self.assertTrue(login, 'Could not log in')
StudioAutoAuthPage( self.browser, username=self.staff_user["username"], email=self.staff_user["email"] ).visit()
AutoAuthPage(self.browser, course_id=self.course_id).visit()
survey = SurveyForm.get(course_descriptor.course_survey_name)
my_X = X.copy() km = KMeans(copy_x=False, n_clusters=n_clusters, random_state=42) km.fit(my_X) _check_fitted_model(km)
errors = [] minions = [] for minion in response: minions.append(minion) if not response[minion]: errors.append(minion)
supports_select_for_update_with_limit = True
self._is_valid_integer(key, axis)
pillar_mock = MagicMock(return_value=pillar_value) filestate.__salt__['pillar.get'] = pillar_mock
'order_masters': bool,
try: HAS_JUNOS = True import jnpr.junos import jnpr.junos.utils import jnpr.junos.utils.config import jnpr.junos.utils.sw except ImportError: HAS_JUNOS = False
from __future__ import unicode_literals
call_command("loaddata", "course_email_template.json")
lines[ind] = ''
return self.default_modulestore.make_course_key(org, course, run)
with assertRaisesRegexp(TypeError, 'Must pass'): self.frame.filter(items=None)
pan = web.get_data_yahoo('XOM', '2013-01-01', '2013-12-31', interval='m') self.assertEqual(len(pan), 12)
self._setup_mp_logging_listener()
return http.HttpResponseBadRequest(template.render())
self.d.friends.add(self.a, self.c)
p = subprocess.Popen([c] + args, cwd=cwd, stdout=subprocess.PIPE, stderr=(subprocess.PIPE if hide_stderr else None)) break
label_css = 'button.show span.show-label' world.wait_for(lambda _: world.css_has_text(label_css, label_name))
youtube_video_id = microsite.get_value('homepage_promo_video_youtube_id', "your-youtube-id") context['homepage_promo_video_youtube_id'] = youtube_video_id
alice, created = dive.authors.get_or_create(name='Alice') self.assertEqual(alice._state.db, 'default')
return []
return self._get_course_info(request, course)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath, destructiveTest
from salt.log.mixins import NewStyleClassMixIn from salt.log.setup import LOG_LEVELS
self.assertTrue(image_url.endswith('src_course_image-png-{}x{}.jpg'.format(*target)))
templates_path = ['.templates']
self.assertEquals(3, self.response.content.count('grade_None'))
if not history_entries: raise self.DoesNotExist()
to_field = to_field or (to._meta.pk and to._meta.pk.name)
__virtualname__ = 'service'
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
return lib.array_equivalent_object(_ensure_object(left.ravel()), _ensure_object(right.ravel()))
with self.assertRaises(ValueError): str(qs.query)
self.run_validators(value) return qs
if queryset is None: queryset = self.get_queryset()
class GetDateShowHiddenInitial(Form): mydate = DateField(widget=SelectDateWidget, show_hidden_initial=True)
people = models.ManyToManyField(Person, related_name='relating_people') people_hidden = models.ManyToManyField(Person, related_name='+')
self.assertEqual(request.read(13), b'--boundary\r\nC') self.assertEqual(request.POST, {'name': ['value']})
from salt.modules import mac_keychain as keychain
import salt.utils from salt._compat import subprocess, ipaddress
self.covariance_ = covariance if self.store_precision: self.precision_ = pinvh(covariance) else: self.precision_ = None
n_classes = 3 plot_colors = "bry" plot_step = 0.02
return Fragment(content=u"<div>Nothing here. Move along.</div>")
if not isinstance(cmp_result, numbers.Integral): log.error('The version comparison function did not return an ' 'integer/long.') return False
self.assertEquals(4, len(response.content.splitlines()))
options = {'statsd': True}
self.loop_interval = six.MAXSIZE clean_proc_dir(opts)
self.assertNotIn('Add ', response.rendered_content)
def _run_parallel_map_providers_query(*args, **kw): return communicator(run_parallel_map_providers_query)(*args[0], **kw)
df = DataFrame(dict(A=np.random.rand(20), B=np.random.rand(20))) store.append('df', df)
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
self.assertContains(resp, 'payment-button')
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.login_page.visit().login(email=email, password=password)
import salt.utils from salt.exceptions import CommandExecutionError
from __future__ import unicode_literals
from __future__ import absolute_import
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
aggregated = grouped.aggregate(np.mean) self.assertEqual(len(aggregated), len(self.tsframe)) self.assertEqual(len(aggregated.columns), 2)
request = Request.blank('') response = self.item_descriptor.studio_transcript(request=request, dispatch='translation') self.assertEqual(response.status, '400 Bad Request')
class SchoolManager(models.Manager): def get_queryset(self): return super(SchoolManager, self).get_queryset().filter(is_public=True)
response = self.client.post( '/i18n/setlang/', data={'language': 'en'}, follow=True, HTTP_REFERER='/nl/vertaald/' ) self.assertRedirects(response, '/en/translated/')
self.asset_collection.insert(dest_assets)
if ip.startswith('fe80:'): return False return True
if isinstance(value, six.text_type): return six.memoryview(b64decode(force_bytes(value))) return value
ram = ET.SubElement(content, 'ram-size') ram.text = config.get_cloud_config_value( 'ram', vm_, __opts__, default='256', search_global=False )
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
OIDC_COURSE_HANDLER_CACHE_TIMEOUT = 0
RateLimitConfiguration.objects.create(enabled=True)
X, y = make_blobs(n_samples=80, centers=4) brc = Birch(threshold=0.5, n_clusters=None) brc.fit(X) check_threshold(brc, 0.5)
self._change_student_enrollment(self.enrolled_student, self.course, 'enroll')
assert_raises(ValueError, plot_partial_dependence, clf, X, ['foobar'])
task_folder = task_service.GetFolder(location)
self.update({})
with self.assertRaises(ValueError): c(span=0.5)
with tm.assertRaises(ValueError): o.sample(n=-3) with tm.assertRaises(ValueError): o.sample(frac=-0.3)
self._assert_can_reverify()
if entry_needs_updating: instructor_task.task_state = result_state if task_output is not None: instructor_task.task_output = task_output
if iface_type not in ['slave']: return __salt__['cmd.run']('ip link set {0} up'.format(iface)) return None
obj_view = service_instance.content.viewManager.CreateContainerView( container_ref, [obj_type], True)
keys = list(keys)
test_command = 'sysbench --num-threads=64 --test=memory ' test_command += '--memory-oper={0} --memory-scope={1} ' test_command += '--memory-block-size=1K --memory-total-size=32G run ' result = None ret_val = {}
with super(UserProfileUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
redismod.__grains__ = {} redismod.__salt__ = {} redismod.__context__ = {} redismod.__opts__ = {}
from salt.returners import smtp_return as smtp
from pylearn2.datasets import vector_spaces_dataset
can_assemble = {} for dev in devices: cmd = 'mdadm -E {0}'.format(dev) can_assemble[dev] = __salt__['cmd.retcode'](cmd) == 0
return False
'edxmako', 'pipeline', 'static_replace',
if 'SYN' in flags and len(flags) == 1: return 100 elif 'FIN' in flags: return 120
if relevant_verification is not None: if relevant_verification.status == "approved": status = VERIFY_STATUS_APPROVED elif relevant_verification.status == "submitted": status = VERIFY_STATUS_SUBMITTED
X, y, X_test, y_test = build_dataset(n_samples=200, n_features=100, n_informative_features=100) max_iter = 150
text = f.widget.format_value(result) self.assertEqual(text, "13:30:00")
from sklearn.externals.six.moves import cStringIO as StringIO import sys old_stdout = sys.stdout try: sys.stdout = StringIO()
return self._compiled_cache[2:]
from defusedxml.lxml import parse, fromstring, XML
self.assertOrphanCount(course.id, 1) self.assertOrphanCount(published_branch, 1)
raise NotImplementedError()
fred, created = book.authors.get_or_create(name="Fred") self.assertTrue(created)
import collections import json import logging from pkg_resources import resource_string
ds_input['nr_of_bands'] = len(self.bands)
return False
if 'admin_source' not in kwargs: os.unlink(adminfile)
return JsonResponse( CourseDetails.update_from_json(course_key, request.json, request.user), encoder=CourseSettingsEncoder )
basedirs = set(map(os.path.abspath, filter(os.path.isdir, basedirs)))
problem = new_loncapa_problem(xml_str)
sparse_results = sparse_classifier.staged_score(X_test_sparse, y_test) dense_results = dense_classifier.staged_score(X_test, y_test) for sprase_res, dense_res in zip(sparse_results, dense_results): assert_array_equal(sprase_res, dense_res)
after = expiration + timedelta(seconds=1) self.assertFalse(attempt.active_at_datetime(after))
continue
if names: snap_ids = _find_guids(res)
self.client.post('/custom_requestauth_login/', { 'username': 'testclient', 'password': 'password', }, follow=True)
import salt.ext.six as six
new_bob_profile.user = bob charlie.userprofile = bob_profile self.assertEqual(new_bob_profile._state.db, 'other') self.assertEqual(charlie._state.db, 'other')
'pillar_source_merging_strategy': str,
assert_equal(v_measure_score(true_labels, labels), 1.0) assert_greater(inertia, 0.0)
self.presence_events = True
if 'total_rows' not in _response: log.error('Didn\'t get valid response from requesting all docs: {0}' .format(_response)) return {}
lazymod_py_file = lazymod.__file__ if lazymod_py_file.endswith("c"): lazymod_py_file = lazymod_py_file[:-1]
if self._needs_reindex_multi(axes, method, level): try: return self._reindex_multi(axes, copy, fill_value) except: pass
gsn._corrupt_switch = False
if isinstance(space, VectorSpace) and space.sparse: del kwargs["batch_size"]
from salt.ext import six
port = 4505 master_ip = None
with salt.utils.fopen(args.config) as fh_: __opts__.update(yaml.load(fh_.read()))
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.djangonaut_book])
from __future__ import absolute_import import logging
f = TypedMultipleChoiceField(choices=[(1, "+1"), (-1, "-1")], coerce=int, required=False) self.assertEqual([], f.clean([]))
dt = datetime(2015, 10, 25, 2, 30, 0)
for argument in args: ret['args'].append(str(type(argument)))
self.assertIn(self.SUCCESSFUL_RESPONSE, response.content) self.assertEqual(response.status_code, 200)
from __future__ import unicode_literals
from __future__ import absolute_import
Form = modelform_factory(Person, fields="__all__", widgets={'name': widget}) self.assertEqual(Form.base_fields['name'].widget.__class__, forms.Textarea)
if (sum_aligners == self.ndim and all([com.is_sequence(_) for _ in indexer])): ser = ser.reindex(obj.axes[0][indexer[0]], copy=True)._values
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True], credit_type='halves' )
self.answer_problem(correct=False) self.problem_page.click_check() self.wait_for_status('incorrect')
join_index, join_columns = None, None ilidx, iridx = None, None clidx, cridx = None, None
self.assertEqual( Book.objects.annotate(num_authors=Count('authors')).count(), 6 )
cmd_ret = _srvmgr(func=str().join(pscmd_validate), as_json=True)
from salt.modules import rbenv import os
sh("coverage combine --rcfile={}".format(rcfile))
course_registration_codes = CourseRegistrationCode.objects.filter(order=self.cart)
from __future__ import absolute_import
SHORT_DATETIME_FORMAT = 'm/d/Y P'
bower.__salt__ = {}
return comdat['stderr']
def __call__(self, result=None): with self.assertNumQueries(0): super(SkippingExtraTests, self).__call__(result)
if key_betas is not None: betas = numpy.hstack((betas, key_betas)) betas.sort()
response = middleware.process_response(request, response)
self.process_manager.stop_restarting() self.process_manager.send_signal_to_processes(signum) self.process_manager.kill_children() exit(0)
import salt.ext.six as six
num_braces = 0
if target.is_unique:
epoch_num = 15 termination_criterion = EpochCounter(epoch_num)
TRACKING_IGNORE_URL_PATTERNS = [r'^/event', r'^/login', r'^/heartbeat']
if y.ndim > 2 or (y.dtype == object and len(y) and not isinstance(y.flat[0], string_types)):
metadata = _refresh_buckets_cache_file(cache_file)
if module_has_submodule(app_config.module, module_to_search): raise
summary, line = _extend_line(summary, line, tail[-1], display_width - 2, space2) summary += line summary += '],'
func.restype = c_int func.errcheck = partial(check_errcode, cpl=cpl)
from __future__ import absolute_import
response = self.client.get(self.courseware_url) self.assertEqual(response.status_code, 200)
grains['virtual_subtype'] = 'Xen PV DomU'
self.wait_for_element_visibility('#password-reset-email', 'Email field is shown') self.q(css="#password-reset-email").fill(email)
self.assertEqual(self.run_function('xattr.clear', [NO_FILE]), 'ERROR: File not found: {0}'.format(NO_FILE))
self._handle.create_table(self.group, **options)
log.warning('Failed to retrieve CourseOverview for [%s]. Using empty course name.', course_id) return None
ret = {} ret['result'] = False ret['comment'] = 'Event module not available. Beacon add failed.' return ret
'event_return_whitelist': list,
content_type_abstract = models.ForeignKey(ContentType, models.CASCADE, related_name='+') object_id_abstract = models.PositiveIntegerField() content_object_abstract = GenericForeignKey('content_type_abstract', 'object_id_abstract')
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON ensure_in_syspath('../../')
tabs = [] expected_tabs = [u'LTI | Test Section | {0} Courseware | edX'.format(TEST_COURSE_NAME), u'TEST TITLE']
from markdown.util import etree
self.assertEqual(new_mixed_setting["default"]["ENGINE"], "xmodule.modulestore.mixed.MixedModuleStore")
idx = self.create_index()
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21 13:30:05")
self.assertEqual( include((self.url_patterns, 'app_name', 'namespace')), (self.url_patterns, 'app_name', 'namespace') )
if kw_overrides_match is _marker: return profile_match return kw_overrides_match
daytime = self._get_daytime_flag() businesshours = self._get_business_hours_by_sec() bhdelta = timedelta(seconds=businesshours)
from salt.log.mixins import NewStyleClassMixIn, ExcInfoOnLogLevelFormatMixIn
clf = NearestCentroid() clf.fit(X, y) assert_array_equal(clf.predict(T), true_result)
self.cohort_management_page.select_discussion_topic(self.inline_key)
return {'pythonexecutable': sys.executable}
cache = None storconn = None compconn = None netconn = None webconn = None resconn = None
iris = datasets.load_iris()
try: import zmq HAS_ZMQ = True except ImportError: HAS_ZMQ = False
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
Donation.add_to_order(cart, 10.0, None) cart.purchase(first='FirstNameTesting123', street1='StreetTesting123') self.orderid_courseless_donation = cart.id
rng = date_range('6/1/2000', '6/15/2000', freq='T') result = rng[0:0].intersection(rng) self.assertEqual(len(result), 0)
assert_equal(grid_search_no_score.best_params_, grid_search.best_params_) assert_equal(grid_search.score(X, y), grid_search_no_score.score(X, y))
database: image: mongo:3.0 command: mongod --smallfiles --quiet --logpath=/dev/null '
self.assertEqual(source.geom, g.geom_name) self.assertEqual(source.gtype, g.geom_type)
from sklearn.neighbors import KNeighborsClassifier
if amount_value < mode_info.min_price: error_msg = _("No selected price or selected price is too low.") return self.get(request, course_id, error=error_msg)
new_connection.cursor() self.assertFalse(new_connection.get_autocommit())
X = csr_matrix(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
if not key: key = salt.utils.aws.IROLE_CODE
mode = models.CharField(max_length=100, default='', blank=True) image = models.ImageField(upload_to='badge_classes', validators=[validate_badge_image])
writer.writerow(encoded_labels)
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course.id))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
return offset.days * 86400 + offset.seconds
cmd = ['rpmbuild', '-ba'] cmd.extend(define_opts) cmd.append(spec_path) stdout, stderr, rcode = _run_command(cmd)
login = self.client.login(username='testclient', password='password') self.assertTrue(login, 'Could not log in')
if plen < (alen - dlen) or plen > alen: raise TemplateSyntaxError("%s requires %d arguments, %d provided" % (name, alen - dlen, plen))
courses_list, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(len(courses_list), 1) self.assertNotIn( ccx_course_key, [course.id for course in courses_list] )
return
self.assertEqual(event.dt.replace(tzinfo=EAT), dt)
lw = LedoitWolf(store_precision=False, assume_centered=True) lw.fit(X_centered) assert_almost_equal(lw.score(X_centered), score_, 4) assert(lw.precision_ is None)
rp2 = RandomProjection(random_state=0, eps=0.5) projected_3 = rp2.fit_transform(data) assert_array_equal(projected_1, projected_3)
uncertainty_index = uncertainty_index = np.argsort(pred_entropies)[-5:]
if 'download_video' not in field_data and sources: field_data['source'] = field_data['html5_sources'][0]
dashboard = DashboardPage(self.browser) dashboard.wait_for_page() return dashboard
key = np.array([0, np.nan, 1], dtype='O') na_sentinel = -1
metrics = {'ais': estimate_likelihood} datasets = {'mnist': MNIST}
DataFrame._metadata = _metadata DataFrame.__finalize__ = _finalize
new_user_partition = UserPartition(
mock_create.return_value = None
self.go_to_sequential_position(1) execute_video_steps(tab1_video_names)
return meth
data = 'a,b,c\n4,5,6#comment' result = self.read_csv(StringIO(data), comment='#') tm.assert_frame_equal(result, expected)
self.assertRaises(AssertionError, df.groupby('a').apply, f3) self.assertRaises(AssertionError, df2.groupby('a').apply, f3)
obj = UTC.localize(obj)
import salt.ext.six as six
sh( "diff-cover {xml_report_str} --compare-branch={compare_branch} " "--html-report {diff_html_path}".format( xml_report_str=xml_report_str, compare_branch=compare_branch, diff_html_path=diff_html_path, ) )
video = ItemFactory.create(parent_location=child_vertical.location, category="video", display_name="My Video") self.assertIsNone(xblock_studio_url(video))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
new_class._meta.parents.update(base_parents)
if self.merge and not conflicts: self.stdout.write("No conflicts detected to merge.") return
def f(): cat.rename_categories([1, 2])
__salt__['file.replace']( '/etc/default/locale', '^LANG=.*', 'LANG="{0}"'.format(locale), append_if_not_found=True )
from __future__ import absolute_import
ttype = 'zeromq'
n_nonzero_coefs = max(int(0.1 * X.shape[1]), 1)
import salt.ext.six as six
kwargs['w'] = 1
pkg = next(iter(configuration)) conf_ptr = configuration[pkg]
self.client.logout()
if acl_name == '': _search_name = __current_perms[name].get('comment').get(_acl_type) else: _search_name = acl_name
if not all(user_groups.get(partition.id) in groups for partition, groups in partition_groups): return ACCESS_DENIED
self.assertEquals(len(mail.outbox), 3)
'ENABLE_MAX_FAILED_LOGIN_ATTEMPTS': False,
classifier.fit(X_train, Y_train)
import salt.utils
with self.assertRaises(ItemNotFoundError): store.find_asset_metadata(new_asset_loc) with self.assertRaises(ItemNotFoundError): store.get_all_asset_metadata(fake_course_id, 'asset')
if six.PY2: import urlparse else: import urllib.parse as urlparse
response = requests.get(self._get_url("api/v1/annotations"), params={ "user": "dummy-user-id", "page": 2, "page_size": 3 })
REQUIRE_EXCLUDE = ("build.txt",)
from __future__ import print_function
UserFactory.create(username=self.USERNAME, email=self.EMAIL, password=self.PASSWORD)
import salt.utils
if not settings.FEATURES.get('CERTIFICATES_HTML_VIEW', False): return False
other = UserFactory.create() self.client.login(username=other.username, password='test') self.enroll() self.logout()
import salt.ext.six as six
class SomeParentModel(models.Model): name = models.CharField(max_length=1)
return result, True
passed_jid = clear_load['jid'] if clear_load.get('jid') else None nocache = extra.get('nocache', False)
from sqlalchemy import Numeric for column in tbl.columns: if isinstance(column.type, Numeric): column.type.asdecimal = False
value = self._resolve_lookup(context)
plt.figure(figsize=(20, 6))
changes = autodetector.changes( graph=loader.graph, trim_to_apps=app_labels or None, convert_apps=app_labels or None, migration_name=self.migration_name, )
df = self.df_mixed_floats.copy() df['value'] = lrange(len(df))
self.assertEqual( HardbackBook.objects.aggregate(n_pages=Sum('book_ptr__pages')), {'n_pages': 2078} )
self.notes_page.go_to_page(2) self._verify_pagination_info( notes_count_on_current_page=1, header_text='Showing 26-26 out of 26 total', previous_button_enabled=True, next_button_enabled=False, current_page_number=2, total_pages=2 )
num_new_fields_set = num_fields_after - num_fields_before self._ddog_histogram(evt_time, 'set_many.fields_set', num_new_fields_set)
self.bad_user_client = Client() self.good_user_client = Client() self.non_staff_client = Client() self.admin_client = Client()
authorization_header = ( '{0} Credential={1}/{2}, SignedHeaders={3}, Signature={4}' ).format( algorithm, access_key_id, credential_scope, signed_headers, signature, )
queryset.delete()
phase_variable = 'PYLEARN2_TRAIN_PHASE' phase_value = 'phase%d' % (number + 1) os.environ[phase_variable] = phase_value
ts = Timestamp('2012-1-1') _assert_less(ts, ts + Second()) _assert_less(ts, ts + Milli()) _assert_less(ts, ts + Micro(50))
logging.debug("[%s]: %s" % (self, msg))
opts = apply_cloud_config(overrides, defaults)
for a in self._AXIS_ORDERS: if not len(self._get_axis(a)): return self
import salt.ext.six as six
test_data = state_run['cmd_|-test_one_changing_state_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
from __future__ import absolute_import
return files, symlinks
log.warning( "Error while previewing chemical formula", exc_info=True) result['error'] = _("Error while rendering preview")
result = df.drop_duplicates('C') expected = df[:2] tm.assert_frame_equal(result, expected)
if self.closed == 'right': binner = binner[1:] else: binner = binner[:-1]
task_folder = task_service.GetFolder(location) task = task_folder.GetTask(name)
termination_criterion = EpochCounter(5)
self.course_nav.go_to_section('Test Section', 'Test Subsection')
from __future__ import absolute_import import logging import os
descriptor.runtime.export_fs = MemoryFS() node = etree.Element('unknown') descriptor.add_xml_to_node(node)
sel = np.zeros(self.num_examples, dtype=bool) sel[next_index] = True next_index = sel
curr_minion = {} curr_minion.update(minion_info) curr_minion.update({'id': minion}) minions[minion] = curr_minion
import salt.loader import salt.utils import salt.utils.cloud import salt.utils.validate.net from salt import syspaths
old = list_pkgs()
if key[0] == parent[0]: continue parent = self.check_key(parent, key[0]) if parent is not None: self.graph.add_dependency(migration, key, parent, skip_validation=True)
self.assertEqual(certificate_grades.count('0.0'), 5) self.assertEqual(certificate_grades.count(default_grade), 5)
centos7-2-iad-rackspace: provider: rackspace-iad size: general1-2 snapshot: <cinder snapshot id>
from collections import namedtuple record = namedtuple('record', 'x y') r = record(5, 6) values = [r]
self.assertEqual(Article.objects.filter(pub_date__exact='2005-07-27 00:00:00').count(), 3)
listener_state = 'cmd_|-listener_test_listening_resolution_one_|-echo "Successful listen resolution"_|-mod_watch' self.assertIn(listener_state, state_run)
extra_attrs = {'class': 'special'}
course_id = None
student_id = AutoAuthPage(self.browser, course_id=self.course_id).visit().get_user_id()
y_seq_of_seqs = [[], [1, 2], [3], [0, 1, 3], [2]] assert_raises(ValueError, LabelBinarizer().fit_transform, y_seq_of_seqs)
)
return ""
if Y is not None: state_above = dbm.hidden_layers[-1].downward_state(Y) layer_above = dbm.hidden_layers[-1] assert len(dbm.hidden_layers) > 1
from __future__ import absolute_import import collections import fnmatch import os
n_fits = len(out)
s1 = Series([0.1235], dtype='float32') s2 = Series([0.1236], dtype='float32')
warnings.warn("generate_bq_schema is deprecated and will be removed in " "a future version", FutureWarning, stacklevel=2)
values[values == -1] = get_base_missing_value(dtype) data_formatted.append((col, values, index))
return sum(name == n for n in self.names) > 1
from __future__ import absolute_import
encoded_labels.extend([''] * len(columns))
rng = np.random.RandomState(0) X = np.c_[X, rng.randn(n_samples, 200 * n_features)]
ensemble = BaggingRegressor(base_estimator=DecisionTreeRegressor(), max_samples=1.0, bootstrap=False, random_state=rng).fit(X_train, y_train)
changed_modules = StudentModule.objects.filter(module_state_key__in=self.ee_modules) self.assertEqual(changed_modules.count(), 0)
for dirs in six.itervalues(_find_dirs(metadata[saltenv])): dirs = _trim_env_off_path(dirs, saltenv, trim_slash=True) ret += [_f for _f in dirs if _f]
if n_classes == 2: proba[:, 0] = 1. - proba[:, 1] else: proba /= np.sum(proba, axis=1)[:, np.newaxis]
data = BytesIO(data) for chunk in iter(lambda: data.read(MAX_SOCKET_CHUNK_SIZE), b''): self._write(chunk) self._flush()
VIDEO_CDN_URL = ENV_TOKENS.get('VIDEO_CDN_URL', {})
X_train = np.vstack([shifted_gaussian, stretched_gaussian])
clf.fit(docs_train, y_train)
USE_I18N = True
HAS_FCNTL = False
warnings.warn("Overriding setting %s can lead to unexpected behavior." % kwargs['setting'], stacklevel=5)
corr_eq_dir = np.dot(Gram[:n_active, n_active:].T, least_squares)
proc.start()
if ret in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.django_book, self.bio_book, self.djangonaut_book])
if update.IsInstalled: results['Installed'] += 1
result = rast.bands[0].data() if numpy: result = result.flatten().tolist()
if os_name == 'CentOS' \ and grains['osrelease'].startswith('5.'): target = target.replace('.i686', '.i386')
import salt.utils from salt.exceptions import CommandExecutionError, MinionError
operations = [ migrations.AlterField( model_name='logentry', name='action_time', field=models.DateTimeField( verbose_name='action time', default=timezone.now, editable=False, ), ), ]
CourseEnrollment.enroll(self.user, self.course.id, mode="honor")
course.cohort_config = {} self.assertFalse(course.is_cohorted)
self.assertEqual(f(None), "0")
fragment.add_javascript_url(self.runtime.local_resource_url(self, 'public/js/library_content_edit.js')) fragment.initialize_js('LibraryContentAuthorView') return fragment
X_true -= X_true.mean()
if self.chunksize is not None: if not self.s.is_table: raise TypeError( "can only use an iterator or chunksize on a table")
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
if not user_must_complete_entrance_exam(request, user, course): required_content = [content for content in required_content if not content == course.entrance_exam_id]
depth = len(b_list)
assert_equal(100, n_lines)
keys, counts = _value_counts_arraylike(values, dropna=dropna)
self.assertRaises(ValueError, s.interpolate, method='linear', limit_direction='abc')
import salt.utils import salt.ext.six as six import salt.utils.event from salt._compat import subprocess from salt.utils.network import host_to_ip as _host_to_ip
if hasattr(cls, 'selenium'): cls.selenium.quit() super(SeleniumTestCase, cls)._tearDownClassInternal()
return six.text_type(value)
result = df.loc[('2016-01-01', 'a'), :] expected = df.iloc[[0, 3]] tm.assert_frame_equal(result, expected)
ctype='create'
df = DataFrame({'text': ['some words'] + [None] * 9}) expected = df.dtypes
shim_file += "c"
from salt.version import SaltStackVersion
tip = resolved(joinpath(base, dirname(info.name))) return _is_bad_path(info.linkname, base=tip)
class DraftReorderTestCase(ModuleStoreTestCase):
try: app_name = cls.name except AttributeError: raise ImproperlyConfigured( "'%s' must supply a name attribute." % entry)
from __future__ import absolute_import import libcloud.security import platform import os
from __future__ import absolute_import
if created: self.add(obj) return obj, created
X_blobs, _ = make_blobs(n_samples=100, centers=10, random_state=0) X_blobs = sparse.csr_matrix(X_blobs)
manager1 = OnlyFred() manager2 = OnlyBarney() objects = models.Manager()
BlockCountsTransformer(['problem', 'chapter']).transform(usage_info=None, block_structure=self.block_structure)
self.assertRaises(ValueError, Timestamp, max_ts_us + one_us)
with self.assertRaisesRegexp(CommandError, unicode(GitExportError.BAD_COURSE)): call_command('git_export', 'foo/bar:baz', 'silly', stderr=StringIO.StringIO())
from __future__ import unicode_literals
raise nose.SkipTest("unreliable tests on complex128")
'reverification',
from salt.states import keystone
return comdat['stderr']
user_partition_values = [] no_partition_selected = {'display_name': _("Not Selected"), 'value': -1}
tm._skip_if_no_dateutil() from pandas.tslib import maybe_get_tz tz = lambda x: maybe_get_tz('dateutil/' + x)
from salt.states import test
templates_path = ['templates']
import salt.ext.six as six HAS_LIBS = False try: import splunklib.client import requests HAS_LIBS = True except ImportError: pass
rng = np.random.RandomState(1999) n, p = 50, 3
post_params['signature'] = "invalid"
self.assertEqual(PlayedWithNote.objects.count(), 0)
test_element = rendered_html.find("test") self.assertEqual(test_element.tag, "test") self.assertEqual(test_element.text, "Test include")
logging.root.addHandler(LOGGING_NULL_HANDLER)
for name in self.varlist: name = self._null_terminate(name, True) name = _pad_bytes(name[:32], 33) self._write(name)
project = u'edX' copyright = u'2013, EdX Doc Team'
USE_TZ = False
from datetime import datetime, timedelta, tzinfo, date import nose
res = linkage_tree(X, affinity=manhattan_distances) assert_array_equal(res[0], linkage_tree(X, affinity="manhattan")[0])
for cat in item['categories']: handler.addQuickElement("category", "", {"term": cat})
w = rwindow.Window(Series([2, 4, 6]), window=[0, 2])
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON
test_modules = get_test_modules()
input_dict = {'1_2_1': '21'} correct_map = problem.grade_answers(input_dict)
instance._original_run = instance.run instance.run = instance._run return instance
self.assertEqual(event.dt, dt.replace(microsecond=0))
resp = self.client.ajax_post( first_update_url, payload, HTTP_X_HTTP_METHOD_OVERRIDE="PUT", REQUEST_METHOD="POST" )
from salt.utils.odict import OrderedDict
cs = GEOSCoordSeq(capi.create_cs(ncoords, ndim), z=bool(ndim == 3))
missing_courses = set(course_id_list) - set(modes_by_course.keys()) for course_id in missing_courses: modes_by_course[course_id] = [cls.DEFAULT_MODE]
self.assertEqual(k_args, tuple()) self.assertEqual( k_kwargs.get('url'), urlparse.urljoin(self.course.ccx_connector, ccxconapi.CCXCON_COURSEXS_URL) )
for pkg_name, pkg_info in installed.items(): self.assertEqual(installed[pkg_name].get('source'), run_out[pkg_name]['source_rpm'])
override_field_for_ccx( ccx_course_object, master_course_object, 'max_student_enrollments_allowed', valid_input['max_students_allowed'] )
from __future__ import absolute_import
def lock(f, flags): return False
log.warning( 'Minion id {0} is not who it says it is!'.format( load['id'] ) ) return False
hastie_X, hastie_y = datasets.make_hastie_10_2(n_samples=20, random_state=1) hastie_X = hastie_X.astype(np.float32)
if not wait_for_state(vmobj['vmid'], 'stopped'): return {'Error': 'Unable to stop {0}, command timed out'.format(name)}
from __future__ import unicode_literals
buf = StringIO()
block.fields.update(definition.get('fields')) block.definition_loaded = True
idx = PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'], freq='M', name='idx')
original_image_shape = (96, 96)
poet.name = 'Lamartine' poet.save() poem = formset.save()[0] self.assertEqual(poem.name, 'Le Lac by Lamartine')
grouper = itertools.groupby(tuples, lambda x: x[2].dtype)
hash_exists_locally = True
#epub_scheme = ''
SYSTEM_SHARED_MEM_FS = '/dev/shm'
if not self.is_float: if not self.is_integer: return self data = data.astype(np.float64)
DATE_INPUT_FORMATS = [
can_introspect_time_field = True
parser = PDFParser(pdf_buffer) document = PDFDocument(parser, password)
return _after_ignition_network_profile(cmd, ret, name, network_profile, path, nic_opts)
assert_frame_equal(df.loc[[0, 2]], g_not_as.head(1)) assert_frame_equal(df.loc[[1, 2]], g_not_as.tail(1))
if is_categorical_dtype(x): return op(x, y) elif is_categorical_dtype(y) and not isscalar(y): return op(y, x)
np.add(A, S, tmp) I = np.argmax(tmp, axis=1)
p_shared = sharedX(zv[:, 0:rows:pool_rows, 0:cols:pool_cols, :]) h_shared = sharedX(zv) z_shared = sharedX(zv)
del c._parent_cache self.assertIsNot(c.parent, p)
from __future__ import absolute_import
return []
'ENABLE_VIDEO_BEACON': False,
from __future__ import absolute_import import logging import json import os
self.saltRaetKey.status(remote.role, remote.pubber.keyhex, remote.verfer.keyhex)
return False
role, instructions = part.split('=') role = role.upper()
assert self.author.name is not None
warnings.simplefilter("ignore") _skip_if_no_openpyxl() import openpyxl
prev_ptr = self.ptr srid = self.srid self.ptr = self._create_polygon(length, items) if srid: self.srid = srid capi.destroy_geom(prev_ptr)
with assertRaisesRegexp(CParserError, 'Passed header=\[0,1,2\] are too many ' 'rows for this multi_index of columns'): read_csv(path, tupleize_cols=False, header=lrange(3), index_col=0)
copy_or_rename_transcript(video_name, sub_attr, item, user=request.user)
if not consumer: consumer = LtiConsumer.objects.get( consumer_key=consumer_key, )
return False
continue
float_frame = frame.astype(float) recons = read_excel(path, 'test1', convert_float=False) tm.assert_frame_equal(recons, float_frame, check_index_type=False, check_column_type=False)
def left_op(imgs): return self.op(imgs, self.s_filters)
from __future__ import absolute_import, print_function
'syndic_event_forward_timeout': float,
course.delete() with self.assertNumQueries(1): CountryAccessRule.check_country_access(course_id, 'NZ')
_check_align(self.ts[:0], self.ts[:0], how=kind, method=meth) _check_align(self.ts[:0], self.ts[:0], how=kind, method=meth, limit=1)
DATE_INPUT_FORMATS = [
self.assertIn(multi_parent_html.location, orphan_vertical.children) self.assertIn(multi_parent_html.location, vertical1.children)
from __future__ import unicode_literals
bools = np.isnan(self.frame) bools.sum(1) bools.sum(0)
sh("NO_EDXAPP_SUDO=1 EDX_PLATFORM_SETTINGS_OVERRIDE={settings} /edx/bin/edxapp-migrate-{system} --traceback --pythonpath=. {fake}".format( settings=settings, system=system, fake=fake))
self.assertFalse(mock_push_update.called)
return [None]
return self.q(css='h1.page-header')[0].text.split('\n')[-1]
if not alias.strip(): line_to_add = ''
if len(name) > 255: name, ext = os.path.splitext(name) ext = ext[:255] name = name[:255 - len(ext)] + ext
from __future__ import absolute_import
from urllib2 import HTTPError from urllib2 import quote from urllib2 import urlopen
return X
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
pygments_style = 'sphinx'
new_course = modulestore().create_course( org, number, run, user.id, fields=fields, )
from __future__ import unicode_literals
if value.srid is None: value.srid = self._field.srid
if None in distribution:
import salt.utils import salt.utils.timed_subprocess import salt.grains.extra from salt.exceptions import CommandExecutionError, SaltInvocationError,\ TimedProcTimeoutError
order_by.extend(self.find_ordering_name( field, self.query.get_meta(), default_order=asc))
with self.assert_produces_warning(PerformanceWarning): tm.assert_frame_equal(df.ix[key], df.iloc[2:])
config_course_cohorts(self.course, is_cohorted=True)
target_mod = module + '.' if not module.endswith('.') else module
mean = X.mean(axis=0) mean_matrix = csr_matrix(mean.repeat(n).reshape((d, n))).T X = X - mean_matrix
self.wait_for_element_visibility(upload_btn_selector, 'upload button is present')
if is_verbatim: self.process_input_line('')
wf = wf_cls(window_shape=(3, 3), randomize=[ddata], flip=flip)
if not self._write: raise GDALException('Raster needs to be opened in write mode to change values.') capi.flush_ds(self._ptr)
try: self.proc_run(msg) except Exception as exc: log.error( 'Exception caught by jobber: {0}'.format(exc), exc_info=True)
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
def f(value): if value in _unit_map: return _unit_map[value]
if not (allow_not_found and exception.args[0] == xblock.location): raise
from __future__ import absolute_import
rt = RandomTreesEmbedding(max_depth=3, n_estimators=n_estimator, random_state=0)
str(ring1) str(ring2)
minion = { 'master': 'salt', 'log_level': 'info', 'hash_type': 'sha256', }
import salt.daemons.masterapi
scorer = get_scorer('mean_squared_error') ridge_gcv4 = RidgeCV(fit_intercept=False, scoring=scorer) ridge_gcv4.fit(filter_(X_diabetes), y_diabetes) assert_equal(ridge_gcv4.alpha_, alpha_)
assert_raises(ValueError, auc, [0.0, 0.5, 1.0], [0.1, 0.2])
with tm.assert_produces_warning(UserWarning, check_stacklevel=False): indexer_obj = indexer_obj.reindex(self.tsframe.index[::-1]) subframe_obj = self.tsframe[indexer_obj] assert_frame_equal(subframe_obj, subframe)
grid_search = GridSearchCV(km, param_grid=dict(n_clusters=[2, 3, 4])) grid_search.fit(X) assert_equal(grid_search.best_params_["n_clusters"], 4)
import salt.utils
obj_au_settings = obj_au.Settings
sys.stdout.write('Generating master config...') self.mkconf() print('done')
return [{ 'name': field[1], 'type': field[2], 'size': get_field_size(field[2]), 'null_ok': not field[3], 'default': field[4],
f = lambda x: x.sortlevel(0, inplace=True) _check_f(data.set_index(['a', 'b']), f)
with check_mongo_calls_range(max_finds=4, max_sends=2): self._update_partitions(reload_items=False)
xs = self.panel.major_xs(self.panel.major_axis[0]) result = func(xs, axis='major')
from __future__ import absolute_import import glob import sys import os
self._assert_num_attempts(students, initial_attempts) self._test_run_with_task(reset_problem_attempts, 'reset', 0, expected_num_skipped=num_students) self._assert_num_attempts(students, 0)
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
to_expand = '~' + str(user) if user else '~'
pass
bin_sizes = defaultdict(int) for point in X: binned_point = np.round(point / bin_size) bin_sizes[tuple(binned_point)] += 1
if org_target: if record.index['org'] != org_target: continue
file_root = os.path.abspath(self.options.file_root) self.config['file_roots'] = {'base': _expand_glob_path([file_root])}
text = f.widget.format_value(result) self.assertEqual(text, '21.12.2010')
log.debug('Single environment per bucket mode')
old_inertia, incremental_diff = _mini_batch_step( X_mb, x_mb_squared_norms, new_centers, counts, buffer, 1, None, random_reassign=False) assert_greater(old_inertia, 0.0)
PASSWORD_RESET_TIMEOUT_DAYS = 3
for a in self.axes: a.validate_and_set(self, append)
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
labels = np.array([0, 0, 0, 0, 0], dtype=np.int64)
self._create_block_hierarchy() self.store.publish(self.course.location, self.user_id)
simple_auth_pages = ( '/home/', )
html_use_smartypants = True
module = CapaFactory.create(max_attempts="1", attempts="0") self.assertFalse(module.closed())
handler.release() return instance
result['uuid'] = uuid() base_attr = ['block_size', 'bucket_size', 'cache_available_percent', 'cache_replacement_policy', 'congested']
if index < 0: raise OGRIndexError('Negative indices are not allowed on OGR Layers.') return self._make_feature(index)
ts = self.ts[::2] bool_ts = Series(np.zeros(len(ts), dtype=bool), index=ts.index)
cfn = xml.get('cfn') if cfn: log.debug("cfn = %s", cfn)
from __future__ import absolute_import import time import pprint import logging
get_storage_container_acl = show_storage_container_acl
for field_name in self.EXTRA_FIELDS: if self._is_field_visible(field_name): self.field_handlers[field_name]( form_desc, required=self._is_field_required(field_name) )
if force_must_retry: attempt.status = 'must_retry'
class BinaryTreeAdmin(admin.TabularInline): model = BinaryTree
continue
terminal_regions = tree.apply(X)
available_version = salt.utils.alias_function(latest_version, 'available_version')
try: import win32api import win32file import win32security import win32con from pywintypes import error as pywinerror HAS_WINDOWS_MODULES = True except ImportError: HAS_WINDOWS_MODULES = False
self.assertSequenceEqual( CharArrayModel.objects.filter(field__contains=['text']), [] )
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
'interface': str,
auth_entry = request.session.get(pipeline.AUTH_ENTRY_KEY)
f = lambda x: x.replace(1, 0, inplace=True) _check_f(data.copy(), f)
edit_task(task_definition=task_definition, user_name=user_name, password=password)
students = self._create_students(10)
result = jboss7.bindings_exist(name='bindings', jboss_config={}, bindings={'env': 'DEV2'}, profile=None)
import salt.utils
UNICODE_CHAR_CODES = (range(30) + [127] + [129, 500, 2 ** 8 - 1, 2 ** 8 + 1, 2 ** 16 - 1])
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
if is_platform_windows(): extra_compile_args=[] else: extra_compile_args=['-Wno-unused-function']
sa = City.objects.create(name='San Antonio', point=nad_pnt)
url = '%s:%s' % (protocol, url)
resp = ProxyImprovement.objects.select_related().get( associated_bug__summary__icontains='fix' ) self.assertEqual( repr(resp), '<ProxyImprovement: ProxyImprovement:improve that>' )
from django.conf.urls import url
if Database.version_info < (2, 5, 0): raise ImproperlyConfigured('Only versions of pysqlite 2.5+ are ' 'compatible with SpatiaLite and GeoDjango.')
self.timeout_futures()
add_problem_to_course(world.scenario_dict['COURSE'].number, problem_type, problem_settings)
y = np.array([3, 7, 5, 9, 8, 7, 10]) x = np.arange(len(y))
if kwargs.get('refresh', True): refresh_db()
values = self._values if isinstance(values, np.ndarray): return _index.get_value_at(values, i) else: return values[i]
if include_default_option: field_dict["options"].append({ "value": "", "name": "--", "default": True })
'student_id': self.student_id, 'module_state_key': self.module_state_key, 'state': str(self.state)[:20],
patch_extractor = sp_extract_patches(IR, IC, KR, KC, CH, RasterOrders.channel_row_col, RasterOrders.channel_row_col, subsample, border_mode, flip_patches=True).tocsc()
DATE_INPUT_FORMATS = [
import logging import sys
from salt.modules import riak
import time import os import multiprocessing import logging from salt.ext.six.moves import range
delete = self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME)) ret_str = ' shutting-down'
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
w = widgets.RelatedFieldWidgetWrapper(w, rel, widget_admin_site) self.assertFalse(w.can_add_related)
print(file=ex_file) print('Examples using ``%s``' % backref, file=ex_file) print('%s--' % ('-' * len(backref)), file=ex_file) print(file=ex_file)
get_request_dict = {} result = module.reset_problem(get_request_dict)
query_features.append('cohort') query_features_names['cohort'] = _('Cohort')
qs1 = SouthTexasCity.objects.filter(point__distance_gte=(self.stx_pnt, D(km=7))).filter( point__distance_lte=(self.stx_pnt, D(km=20)), )
extend(state('.goal').stateconf.require_in(stateconf='yyy::start'))
import salt.ext.six as six
import grp
c4 = Category.objects.create(name='Fourth', url='4th') self.assertEqual(f.clean(c4.id).name, 'Fourth')
mod_random.__grains__ = {} mod_random.__salt__ = {} mod_random.__context__ = {} mod_random.__opts__ = {}
super(DraftModuleStore, self).delete_course(course_key, user_id)
CELERYD_HIJACK_ROOT_LOGGER = False
continue
return self._value.values.dtype
openstack_config.__salt__ = {}
self.assertEquals(response.status_code, 302) cache.clear()
execute_from_command_line(['django-admin', 'help', 'compilemessages'])
assert False
binarized = label_binarize(y, classes, neg_label=neg_label, pos_label=pos_label, sparse_output=sparse_output) assert_array_equal(toarray(binarized), expected) assert_equal(issparse(binarized), sparse_output)
request.session.flush()
a = Article.objects.create( author=self.jane, headline="Nobody remembers the early years", pub_date=datetime(1, 2, 3, 4, 5, 6))
html_domain_indices = False
frame.to_csv(path) df = DataFrame.from_csv(path, index_col=[0, 1], parse_dates=False)
world.disable_jquery_animations()
entrance_exam_minimum_score_pct = _get_default_entrance_exam_minimum_pct() if ee_min_score != '' and ee_min_score is not None: entrance_exam_minimum_score_pct = float(ee_min_score) return create_entrance_exam(request, course_key, entrance_exam_minimum_score_pct)
d = self.ts.index[0] - datetools.bday self.assertRaises(KeyError, self.ts.__getitem__, d)
return self.apps.app_configs.get(self.app_label)
gc.collect()
if data is None: return {}
with assertRaises(KeyError): df_swap.loc['2016-01-01']
for group_name in groups or set():
student_id = AutoAuthPage(self.browser).visit().get_user_id()
self.code = self.capa_system.filestore.open('src/' + answer_src).read()
from openedx.core.djangoapps.ccxcon import tasks tasks.update_ccxcon.delay(unicode(course_key))
if self.forms: return self.forms[0].media else: return self.empty_form.media
import tornado import tornado.gen import tornado.concurrent
continue
data = np.copy(X.data[start: end]) nz = n_samples - data.size median[f_ind] = _get_median(data, nz)
response = salt.utils.vmware.esxcli(host, username, password, cmd, protocol=protocol, port=port) ret.update({host: response})
response_gone_class = http.HttpResponseForbidden response_redirect_class = http.HttpResponseRedirect
response = client.get(path='/shib-login/', data={}, follow=False, **identity)
try: ch, escaped = next(pattern_iter) except StopIteration: return [('', [])]
man_pages = [( 'ref/django-admin', 'django-admin', 'Utility script for the Django Web framework', ['Django Software Foundation'], 1 ), ]
import copy import logging import sys
new_group = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, user_partition) self.assertIn(new_group.id, [3, 4])
supports_geometry_field_unique_index = True
df = tm.makeDataFrame()
return ( cls.is_restricted_course(unicode(course_id)) and cls._get_restricted_courses_from_cache().get(unicode(course_id))["disable_access_check"] )
from __future__ import unicode_literals
import os
nv.validate_reshape(tuple(), kwargs) return self
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
ax_response.toMessage(response.fields)
simplefilter('ignore')
from salt.modules import introspect
y = [3, 3, -1, -1, 3]
vmcfg = {} kwargs = salt.utils.clean_kwargs(**kwargs) for k, v in kwargs.iteritems(): vmcfg[k] = v
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
from __future__ import unicode_literals
access_flag = 0 data_array = ctypes_array()
for namespace, directories in namespace_dirs.items(): for directory in directories: add_lookup(namespace, directory)
while len(row) > 0 and (row[0] == '' or row[0] is None): row = row[1:] return row
assert_index_equal(left.index, right.index, exact=check_index_type, check_names=check_names, check_less_precise=check_less_precise, check_exact=check_exact, check_categorical=check_categorical, obj='{0}.index'.format(obj))
filterwarnings('ignore', message='No request passed to the backend, unable to rate-limit')
self.certificates_section.wait_for_certificate_invalidations_section()
if not issubclass(cls, AppConfig): raise ImproperlyConfigured( "'%s' isn't a subclass of AppConfig." % entry)
with storebuilder.build() as (__, store): course = CourseFactory.create(modulestore=store)
for k, v in d.items(): dc = data_columns if k == selector else None
for name in res: res[name]['__sls__'] = fn_
self.assertEqual(component.edited_by, self.user_id) old_edited_on = component.edited_on
err = ''
DATE_INPUT_FORMATS = [
problem_page.click_hint() self.assertIn("Hint (1 of 2): mathjax should work1", problem_page.extract_hint_text_from_html) problem_page.verify_mathjax_rendered_in_hint()
_caches = {} _expire_info = {} _locks = {}
frame.ix[5:10] = np.nan frame.ix[15:20, -2:] = np.nan
con_x = self.conn the_sum = sum([my_c0[0] for my_c0 in con_x.execute("select * from mono_df")]) self.assertEqual(the_sum, 3)
for student in students[5:6]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.deleted, mode='honor' )
cart.purchase() cart.purchase() self.assertEquals(len(mail.outbox), 1)
import logging
import_course_from_xml( draft_store, 999, DATA_DIR, ['test_import_course'], static_content_store=content_store, do_import_static=False, verbose=True, target_id=SlashSeparatedCourseKey('guestx', 'foo', 'bar') )
@decorators.memoize def __detect_os(): return salt.utils.which('ipvsadm')
self.assertQuerysetEqual( self.cia.members.all(), [] )
'pillar_merge_lists': bool,
full_name = self.imported_names[local_name] + remainder yield name, full_name
response_dict = {(answer_key_prefix + k): v for k, v in responses.items()} resp = self.client.post(modx_url, response_dict)
from __future__ import absolute_import
for i, parents_index in enumerate(self.parents_map): if i == 0:
mlp.fit(X, y)
manage.py ... enroll_user_in_course -e test@example.com -c edX/Open_DemoX/edx_demo_course
problems = { "checkbox_two_choices": checkbox_two_choices, "checkbox_2_choices_2_inputs": checkbox_two_choices_two_inputs }
set(self.old_unmanaged_keys).intersection(self.new_model_keys)
self.empty.info(buf=buf)
a = tm.makeTimeSeries() b = tm.makeTimeSeries() a[:5] = np.nan b[:10] = np.nan
self.assertTrue(res_json['success'])
mask = new_labels[0] == -1 result = new_levels[0].take(new_labels[0]) if mask.any(): result = result.putmask(mask, np.nan)
ContentType.objects.clear_cache()
from __future__ import absolute_import
autosummary_generate = True
LETTUCE_SELENIUM_CLIENT = os.environ.get('LETTUCE_SELENIUM_CLIENT', 'local')
a = "this is \xe0 test" expected = 'this is a test' assert_equal(strip_accents_ascii(a), expected)
current_state = __salt__['tuned.active']()
log = logging.getLogger(__name__)
'ENABLE_SHOPPING_CART': False,
key = '^' + name.lstrip('^').rstrip('$') + '$'
import os import sys import time import errno import select import logging import tempfile import subprocess
if abs(r - round(r)) > 0.01: return False r = int(round(r))
with tm.assertRaises(AttributeError): ser.hist(foo='bar')
merge_cells = False
for td in tds[:6] + tds[-6:]: self.assertEqual(td.get_attribute('class'), 'nonday')
model.fit(X, y) n_iter_cold_start = model.n_iter_ assert_equal(n_iter_cold_start, n_iter_reference)
for student in students[2:5]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.error, mode='honor' )
log = logging.getLogger(__name__)
self._get_hasher().fit(X, y=y) return self
from salttesting.helpers import ( ensure_in_syspath, ) ensure_in_syspath('../../')
cwd_prefix = ''
else: return None
resultset = self.collection.find(query, record_filter)
if created: enrollment.mode = CourseMode.DEFAULT_MODE_SLUG enrollment.is_active = False enrollment.save()
warnings.filterwarnings( 'ignore', 'With-statements now directly support multiple context managers', DeprecationWarning )
n = len(X4) rng = np.random.RandomState(13) idx = np.arange(n) rng.shuffle(idx)
kwargs = dict(zip(compat_args, args)) _check_for_default_values(fname, kwargs, compat_args)
result = p.select(lambda x: x in ('foo',), axis='items') self.assert_panel4d_equal(result, p.reindex(items=[]))
if not expected_probes: return { 'remove': configured_probes }
self.client.login(username=self.coach.username, password="test")
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
mask[np.argsort(scores, kind="mergesort")[-self.k:]] = 1 return mask
assert_equal(ransac_estimator.inlier_mask_.shape[0], n_samples)
return self
import datetime import json
return 1
if token != '': new_headers['X-Amz-Security-Token'] = token
courses = [ course_with_prereq, CourseFactory.create(start=self.NEXT_WEEK, mobile_available=True), CourseFactory.create(visible_to_staff_only=True, mobile_available=True), CourseFactory.create(start=self.LAST_WEEK, mobile_available=True, visible_to_staff_only=False), ]
lines = contents.read().splitlines() try: lines.remove('') except ValueError: pass return lines
history = HistoricalRecords()
log.info('Creating master maintenance process') self.process_manager.add_process(Maintenance, args=(self.opts,))
try: WindowsError except NameError: WindowsError = None
self.assertEqual(len(w), 1)
return gid
predictions = estimator.predict(X[:, features])
lambda_desc = __salt__['boto_lambda.describe_function'](lambda_name, **self._common_aws_args)
parents = list( self.collection.find(query, {'_id': True}, sort=[SORT_REVISION_FAVOR_DRAFT]) ) if len(parents) == 0: return cache_and_return(None)
from __future__ import absolute_import import os import re import logging
item = test_databases.setdefault( connection.creation.test_db_signature(), (connection.settings_dict['NAME'], set()) ) item[1].add(alias)
X, Y = np.meshgrid(xgrid, ygrid[::-1])
assert key.user_id == self.user.id
X_pred_transformed = kpca.transform(X_pred) assert_equal(X_pred_transformed.shape[1], X_fit_transformed.shape[1])
for mode in ('honor', 'verified'): CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
_config_filename_ = 'master'
err_count = 0 while True: try: shutil.rmtree(fullname, False, None) break except os.error: if err_count > 0: raise err_count += 1 time.sleep(RM_SUBDIRS_RETRY_TIME)
rng = pd.date_range('2014', periods=len(self.df)) self.df.index = rng
self._initialize(y, layer_units)
kwargs['size'] = '10'
self.q(css=self._bounded_selector(self.NAME_INPUT_SELECTOR)).results[0].send_keys(Keys.ENTER) self.wait_for_ajax()
if isinstance(opts['master'], list): conn = False local_masters = copy.copy(opts['master']) last_exc = None
'MAX_ENROLLMENT_INSTR_BUTTONS': 200,
f = lambda x: x.fillna(0, inplace=True) _check_f(data.copy(), f)
f = DateField() with self.assertRaisesMessage(ValidationError, "'Enter a valid date.'"): f.clean('a\x00b')
self.login() self.assertEqual(original_session_key, self.client.session.session_key)
warnings.warn("LongPanel is deprecated. Please use DataFrame", FutureWarning, stacklevel=2)
try:
result = algos.take_nd(arr, indexer, axis=1) expected = arr.take(indexer, axis=1) expected[:, -1] = np.nan tm.assert_almost_equal(result, expected)
self.assertEqual(ip1.compare_networks(ip2), -1) self.assertEqual(ip2.compare_networks(ip1), 1)
#epub_tocdepth = 3
sreq.destroy()
X = make_low_rank_matrix(n_samples=n_samples, n_features=n_features, effective_rank=rank, tail_strength=1.0, random_state=0) assert_equal(X.shape, (n_samples, n_features))
gating_api.add_prerequisite(self.course.id, self.seq1.location)
url = '' try: url = reverse(view_name, args=args, kwargs=kwargs, current_app=current_app) except NoReverseMatch: if self.asvar is None: raise
self.grading_policy['GRADER'] return self._grading_policy['RAW_GRADER']
span_element = rendered_html.find('span') self.assertEqual(span_element.get('attr'), "TEST")
world.wait_for_ajax_complete()
self.assertFalse(zendesk_mock_class.return_value.mock_calls) self.assertFalse(datadog_mock.mock_calls)
itemList = ['x'] * length for i, v in enumerate(items): itemList[i] = v
key = "subtask-{}".format(task_id) cache.delete(key)
git@github.com:user/repo.git: git.latest: - user: deployer - identity: - /home/deployer/.ssh/id_rsa - /home/deployer/.ssh/id_rsa_alternate
self.asset_collection.update( {'_id': course_assets.doc_id}, {'$set': {self._make_mongo_asset_key(asset_key.asset_type): all_asset_info}} ) return 1
reload(sklearn.qda) return sklearn.qda
res = df.query('index < b', engine=engine, parser=parser) expec = df[df.index < df.b] assert_frame_equal(res, expec)
_default_logging_level_ = 'warning' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'ssh') _loglevel_config_setting_name_ = 'cli_salt_run_log_file'
with self.assertNumQueries(0): embargo_api.check_course_access(unrestricted_course.id, user=self.user, ip_address='0.0.0.0')
url( r'^v1/blocks/', BlocksInCourseView.as_view(), name="blocks_in_course" ),
ax.set_xlim('1:30', '5:00')
resp = self.client.ajax_post( self.url, data={'tabs': [{'tab_id': tab_id} for tab_id in invalid_tab_ids]}, ) self.check_invalid_tab_id_response(resp)
def f(): cat > cat_rev
ret['result'] = True ret['comment'] = 'property {0} deleted'.format(name) ret['changes'][name] = None del config[name]
self._assert_queue_task(mock_send, cert)
self.browser.switch_to_window(browser_window_handles[-1])
scenario.steps = [] return
rnd = np.random.RandomState(42) n_samples = 10 X = rnd.uniform(size=(n_samples, 4))
from pandas.sparse.array import SparseArray from pandas.sparse.list import SparseList from pandas.sparse.series import SparseSeries, SparseTimeSeries from pandas.sparse.frame import SparseDataFrame from pandas.sparse.panel import SparsePanel
from __future__ import absolute_import
if not prepared: value = self.get_prep_value(value) return connection.ops.adapt_timefield_value(value)
elif not (is_array and not (issubclass(value.dtype.type, np.integer) or value.dtype == np.object_)): value = _possibly_infer_to_datetimelike(value)
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
try: import systemd.journal HAS_SYSTEMD = True except ImportError: HAS_SYSTEMD = False
input_dict = {'1_2_1': '42', '1_2_2': '42'} correct_map = problem.grade_answers(input_dict)
__virtualname__ = 'win_snmp'
new_settings = get_agent_settings() failed_settings = dict()
tm.assert_frame_equal(written_and_read_again.set_index('index'), original, check_index_type=False)
if isinstance(freq, DateOffset): freq = freq.rule_code else: freq = frequencies.get_base_alias(freq)
assert_equal(len(folds), len(labels)) for i in np.unique(folds): assert_greater_equal(tolerance, abs(sum(folds == i) - ideal_n_labels_per_fold))
try: import numpy except ImportError: numpy = False
self.serialized_rollback and hasattr(connections[db_name], '_test_serialized_contents')
course_id = CourseKeyField(max_length=255, db_index=True, unique=True)
payment_data = payment_data['payment_form_data']
assert_raises_regexp(ValueError, ".*loss='l3' is not supported.*", svm.LinearSVC(loss="l3").fit, X, y)
expr = stripXML(self.mathml_start + expr + self.mathml_end) expected = stripXML(self.mathml_start + expected + self.mathml_end)
frame2.to_excel(path, 'test1', index=False)
self.assertEqual(resp.status_code, 200)
import bz2 import copy
if ADD_PKG in pkg_list: self.run_function('pkg.remove', [ADD_PKG]) if DEL_PKG in pkg_list: self.run_function('pkg.remove', [DEL_PKG])
response = self.client.get('/remote_user/', **{self.header: 'newuser'}) self.assertEqual(User.objects.count(), num_users + 1)
clause, joins = query._add_q(self, reuse, allow_joins=allow_joins, split_subq=False) query.promote_joins(joins) return clause
expected_status = ( status.HTTP_200_OK if CourseMode.DEFAULT_MODE_SLUG in configured_modes else status.HTTP_400_BAD_REQUEST ) self.assert_enrollment_status( as_server=True, is_active=False, expected_status=expected_status, )
self.timeout_map = {}
FEATURES['ENABLE_TEAMS'] = True
cost_weights = rng.normal(size=(num_filters, rows - filter_rows + 1, cols - filter_cols + 1, batch_size)) cost = (constant(cost_weights) * output).sum()
self.store.delete_item( self.icrv.location, ModuleStoreEnum.UserID.test, revision=ModuleStoreEnum.RevisionOption.published_only )
for needle_haystack in test_data[1:]: self.assertIn(self.lazy_wrap(needle), haystack) self.assertIn(self.lazy_wrap(needle), self.lazy_wrap(haystack))
_y = np.vstack((y, np.array(y) * 2)).T clf = ForestClassifier(random_state=0).fit(X, _y)
from __future__ import absolute_import import logging import os import os.path import json
self.assertTrue(res_deep > res)
mask = left_mask ^ right_mask left[left_mask & mask] = fill_value right[right_mask & mask] = fill_value
idx = PeriodIndex(['2016-05-16', 'NaT', NaT, np.NaN], freq='D')
self.solar_team.add_user(self.users[user])
self.rwork = _aligned_zeros(self.ncv, self.tp.lower())
num_labels_by_type = (len(_categories),
check_ortho(Wx, "x weights are not orthogonal") check_ortho(Wy, "y weights are not orthogonal")
resolve('/')
get_request_dict = {} result = module.reset_problem(get_request_dict)
with self.store.bulk_operations(course.id, emit_signals=False):
dates = date_range('01-Jan-2014', '05-Jan-2014', freq='D') series = Series(1, index=dates)
import integration from salt.config import cloud_providers_config
df = DataFrame({'date': [pd.Timestamp('20130101').tz_localize('UTC'), pd.NaT]})
self.assertTrue(isinstance(uniques, DatetimeIndex))
iris = datasets.load_iris() rng = check_random_state(42) perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
settings.apply_settings(self.settings) self.assertEqual([], provider.Registry.enabled())
#'wiki.plugins.notifications', 'course_wiki.plugins.markdownedx',
DateTimeAwareJSONEncoder = DjangoJSONEncoder
del installed_packages_list[package.name]
_wrapped = None
return sorted(set(estimators), key=itemgetter(0))
from __future__ import absolute_import import os
course_id=course_overview.id
assert len(world.browser.windows) == 1 alert = world.browser.get_alert() alert.accept() check_no_alert()
self.assertRaises(TypeError, rwindow._flex_binary_moment, 5, 6, None)
out = salt.utils.fopen(path, 'wb')
name = com._maybe_match_name(self, delta)
raise SaltInvocationError('Command must be specified')
source_encoding = 'utf-8'
for course_key, deadline in deadlines.iteritems(): VerificationDeadline.objects.create( course_key=course_key, deadline=deadline, )
parse_result = reversed( [k for k in parse_result
result = self.panel4d.reindex() assert_panel4d_equal(result, self.panel4d) self.assertFalse(result is self.panel4d)
if existing_id: dest_id = existing_id
assert_almost_equal(lrap_score([[1], [0], [1], [0]], [[0.5], [0.5], [0.5], [0.5]]), 1.)
students_require_certs = students_to_generate_certs_for
for resolver in resolvers: if parsed_expr.assigner in resolver: resolver[parsed_expr.assigner] = ret break else: resolvers += ({parsed_expr.assigner: ret},)
self.assertAlmostEqual( calc.evaluator(variables, {}, "T", case_sensitive=True), 298, delta=0.2 )
from urllib.request import urlopen from urllib.error import HTTPError
ret = self.run_function( 'mysql.db_remove', name=dbname, connection_user=self.user, connection_pass=self.password ) self.assertEqual(True, ret)
return [self.result._output_field_or_none]
cmd = 'Uninstall-Module "{0}"'.format(name) no_ret = _pshell(cmd) return name not in list_modules()
self._install_masquerade(self.course_instructor) self.assertEqual( 'student', access.get_user_role(self.course_instructor, self.course_key) )
attempt_3.mark_ready() assert_equals(attempt_3, SoftwareSecurePhotoVerification.active_for_user(user))
__virtualname__ = 'jail'
return None
result = index.append([]) self.assert_index_equal(result, index)
is_redeemed = RegistrationCodeRedemption.objects.filter( registration_code=reg_code ).exists() self.assertFalse(is_redeemed)
self.assertEqual(self.problem_page.problem_name, self.problem_name)
if not array_equivalent(left, right, strict_nan=strict_nan): _raise(left, right, err_msg)
pass
log = logging.getLogger(__name__)
] DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.' NUMBER_GROUPING = 3
for key in ret: ret[key] = sorted(ret[key]) if save_cache: salt.fileserver.write_file_list_cache( __opts__, ret, list_cache, w_lock ) return ret.get(form, [])
y_pred = self._fit_stage(i, X, y, y_pred, sample_weight, sample_mask, random_state, X_idx_sorted, X_csc, X_csr)
error_msg = 'Error not available'
gc1 = GEOSGeometry(gc_wkt)
if isinstance(geo_fld, BaseSpatialField): return geo_fld else: return False
from salttesting.case import TestCase from salttesting.helpers import ensure_in_syspath, TestsLoggingHandler
ais_nodata('mnistvh.mat', do_exact=do_exact, betas=betas)
return [x for x in cmd['stdout'].split('\n') if check_ip(x)]
'-1.00E-06'
try: task_folder.RegisterTask(name, xml_text, TASK_CREATE, user_name, password, logon_type)
assert_raises(ValueError, AdaBoostClassifier(learning_rate=-1).fit, X, y_class)
#epub_pre_files = []
try: self.assertIn(self.INSTANCE_NAME, delete_str) self.assertIn('True', delete_str) except AssertionError: raise
different = df1.copy() different['floats'] = different['floats'].astype('float32') self.assertFalse(df1.equals(different))
res = cat.add_categories("d") self.assert_categorical_equal(cat, old) self.assert_categorical_equal(res, new)
self.set_header('Access-Control-Allow-Methods', 'OPTIONS, GET, POST')
options = repo_string.strip().split() branch_env = options[0] repo_location = options[1] root = ''
data, vm_ = request_instance(vm_)
xp = DataFrame() self.assertRaises(TypeError, lambda: xp.resample('A').mean())
y_train = np.copy(y) y_train[unlabeled_set] = -1
self.n_observations = 0 self.minibatch_index = 0
for param in self.params: value = param.get_value(borrow=True) if not isfinite(value): raise RuntimeError("NaN in " + param.name)
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) for Cls in [GradientBoostingRegressor, GradientBoostingClassifier]: est = Cls(n_estimators=100, max_depth=1) est.fit(X, y)
continue
bio.write(struct.pack(byteorder + 'i', self.text_len))
os.chmod(dfn, stat.S_IRUSR | stat.S_IWUSR)
import salt.ext.six as six
grid_search.scoring = 'sklearn' assert_raises(ValueError, grid_search.fit, X, y)
remote_rev = None remote_rev_type = None
need_space = (prev_end, start != prev_end)
y_true, _, probas_pred = make_prediction(binary=False)
self.panel4d['foo'] = 'bar'
ovr = OneVsRestClassifier(LinearSVC(random_state=0)) assert_raises(ValueError, lambda x: ovr.coef_, None)
if not self.index.is_unique: result = self._constructor( result, index=[key] * len(result), dtype=self.dtype).__finalize__(self)
result = self.frame.applymap(lambda x: (x, x)) tm.assertIsInstance(result['A'][0], tuple)
else: for lh_field, rh_field in self.field.related_fields: setattr(instance, lh_field.attname, getattr(value, rh_field.attname))
sl = self.frame[:20] tm.assert_sp_frame_equal(sl, self.frame.reindex(self.frame.index[:20]))
class Greatest(Func): function = 'GREATEST'
return saltstack_version
raise CertificateError( "too many wildcards in certificate DNS name: " + repr(dn))
result = store.select('df2', start=5, stop=10) expected = df[5:10] tm.assert_frame_equal(result, expected)
pred_entropies = stats.distributions.entropy( lp_model.label_distributions_.T)
urlpatterns += ( url(r'^404$', handler404), url(r'^500$', handler500), )
s2 = Series([1, 2, 3], index=['a', 'b', 'c'])
OAUTH_OIDC_ISSUER = ENV_TOKENS['OAUTH_OIDC_ISSUER']
alias = get_svc_alias() if name in alias: log.error('This service is aliased, enable its alias instead') return False
if indexer is None: return Int64Index([])._values return indexer._values
def _check_if_open(self): if not self.is_open: raise ClosedFileError("{0} file is not open!".format(self._path))
def f(): df.ix[2:5, 'bar'] = np.array([2.33j, 1.23 + 0.1j, 2.2])
SREQTestCase.thread_running.clear() SREQTestCase.echo_server.join()
'ENABLE_SPECIAL_EXAMS': False,
if relevant_course_mode.sku: processors = ecommerce_api_client(request.user).payment.processors.get() else: processors = [settings.CC_PROCESSOR_NAME]
key = Timedelta(key)
flags += libvirt.VIR_CONNECT_BASELINE_CPU_EXPAND_FEATURES
self.data = data
raise SaltCloudSystemExit( 'The request_instance action must be called with -a or --action.' )
cmd = 'cmd /c {0}'.format(cmd)
target_location = self.xblock.location.replace(revision='draft') _update_module_location(self.xblock, target_location)
if 'gateway' in vm_: deploy_kwargs.update({'gateway': vm_['gateway']})
'state_top': str,
try: self.assertTrue(nanops._USE_BOTTLENECK)
saltenv = env
Y = Y.astype(np.float64) if sample_weight is not None: sample_weight = np.atleast_2d(sample_weight) Y *= check_array(sample_weight).T
MIGRATION_MODULES = { 'social.apps.django_app.default': 'social.apps.django_app.default.south_migrations' }
mask = notnull(frame.values)
for db_name in self._databases_names(include_mirrors=False): inhibit_post_migrate = ( self.available_apps is not None or
self.click_button('create_video', require_notification=True) self.wait_for_video_component_render()
for instances in six.itervalues(self.data): instances.reverse()
#epub_tocdup = True
if INSTANCE_NAME in [i.strip() for i in self.run_cloud('--query')]: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
assert config.mode == "DEBUG_MODE" config.mode = orig_mode
DEBUG_TOOLBAR_MONGO_STACKTRACES = False
ChoiceFormSet = formset_factory(Choice)
subject = "Re-verification Status" mock_send_email.assert_called_once_with(self.user.id, subject, ANY)
try: obj_sm.AddService2('7971f918-a847-4430-9279-4a52d1efe18d', 7, '') ret['msupdate'] = msupdate except Exception as error:
data.take(indexer, out=out)
return force_bytes(value, self.charset)
o = o.repeat(range(1, len(o) + 1)) o.name = 'a'
number_part = Word(nums) inner_number = (number_part + Optional("." + Optional(number_part))) | ("." + number_part) inner_number = Combine(inner_number)
course_image_asset_key = StaticContent.compute_location(course.id, course.course_image) course_image_content = StaticContent(course_image_asset_key, image_name, 'image/png', image_buff) contentstore().save(course_image_content)
X = [[0]] Y = [[1], [2]] D = euclidean_distances(X, Y) assert_array_almost_equal(D, [[1., 2.]])
self.nfac = nfac
syndic.tune_in_no_block() log.info('Syndic successfully connected to {0}'.format(opts['master'])) break
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath
from __future__ import absolute_import
if not is_platform_windows(): formatted = index.format() expected = [str(index[0])] self.assertEqual(formatted, expected)
from __future__ import absolute_import
url(r'^edit/artists/create/$', views.ArtistCreate.as_view()), url(r'^edit/artists/(?P<pk>[0-9]+)/update/$', views.ArtistUpdate.as_view()),
super(SplitMongoKVS, self).__init__(copy.deepcopy(initial_values))
fake_data_api.add_course(self.COURSE_ID, course_modes=['honor']) api.update_enrollment(self.USERNAME, self.COURSE_ID, mode='honor', is_active=False)
self.course_key = self.store.make_course_key('Org_1', 'Course_1', 'Run_1') self._create_course_with_given_location(self.course_key)
import logging import os import shutil
@override_settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.AllowAllUsersModelBackend']) class AuthenticationFormTest(TestDataMixin, TestCase):
message = _('This student (%s) is already allowed to skip the entrance exam.') % self.student.email self.assertContains(response, message)
s_database = dbc
for key in desired_keys: if key not in item: item[key] = None
assert_almost_equal(np.array([1.1, 2.000001]), np.array([1.1, 2.0]))
problem = self.store.get_item(problem.location)
if self.subcmd == 'apply': self.subcmd_args = [args[0]] del args[0]
n_words = 0 while n_words == 0: n_words = generator.poisson(length)
from __future__ import absolute_import
pass
if self._tz is dates.UTC: self._tz._utcoffset = self._tz.utcoffset(None)
from pandas.sparse.api import SparseSeries return SparseSeries
MONTH_DAY_FORMAT = 'F j'
from salttesting import skipIf, TestCase from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
gmm = mixture.GaussianMixture(n_components=n_components, covariance_type=cv_type) gmm.fit(X) bic.append(gmm.bic(X)) if bic[-1] < lowest_bic: lowest_bic = bic[-1] best_gmm = gmm
locales = locale or all_locales locales = set(locales) - set(exclude)
'learner_dashboard',
dummy5 = _('This literal should be included.')
self.store.delete_item( self.icrv.location, ModuleStoreEnum.UserID.test, revision=ModuleStoreEnum.RevisionOption.published_only ) self._update_partitions()
from salt.modules import postgres from salt.exceptions import SaltInvocationError
self.assertFalse(self._has_changes(published_xblock.location))
import salt.ext.six as six HAS_NEUTRON = False try: from neutronclient.v2_0 import client from neutronclient.shell import NeutronShell
if is_list_of_files(answer): new_answers[answer_id] = [f.name for f in answer] else: new_answers[answer_id] = answers[answer_id]
del locale if not encoding: encoding = sys.getdefaultencoding() or 'ascii'
original_problem = module.lcp
X_small = X[:, :4] lw = LedoitWolf() lw.fit(X_small) shrinkage_ = lw.shrinkage_
from salt.states import pyrax_queues
win_servermanager.__salt__ = {} win_servermanager.__opts__ = {}
s = Series([1, 3, np.nan, np.nan, np.nan, 7, 9, np.nan, np.nan, 12, np.nan])
class Team(models.Model): name = models.CharField(max_length=100)
y = np.zeros((10, 3)) y[5:, 0] = 1 y[:, 1] = 1 y[:, 2] = 1
probas_pred = probas_pred[:, 1]
n_neighbors = 5
with tm.assertRaisesRegexp(TypeError, 'list of lists-like'): self.index.set_levels(levels[0], level=[0, 1])
if not properties: properties = {}
from .metrics import r2_score return r2_score(y, self.predict(X), sample_weight=sample_weight, multioutput='uniform_average')
from __future__ import absolute_import
train_composite = Train(dataset_composite, mlp_composite, SGD(0.0001, batch_size=20)) train_composite.algorithm.termination_criterion = EpochCounter(1) train_composite.main_loop()
try: if not fnmatch.fnmatch(repo.url, remote): continue except TypeError: if not fnmatch.fnmatch(repo.url, six.text_type(remote)): continue
group_axes = _get_axes(group) res = f(group) if not _is_indexed_like(res, group_axes): mutated = True result_values.append(res)
pairwise = True if pairwise is None else pairwise
kwargs = {'course_id': self.course_id.to_deprecated_string(), 'note_id': str(self.pk)} return reverse('notes_api_note', kwargs=kwargs)
import salt.utils
cv = list(check_cv(cv, X, y, classifier=is_classifier(estimator))) scorer = check_scoring(estimator, scoring=scoring)
debian_service.__grains__ = {} debian_service.__salt__ = {} debian_service.__context__ = {} debian_service.__opts__ = {}
frame = self.frame.copy()
self._check_roundtrip(df[:0], tm.assert_frame_equal)
CELERY_RESULT_BACKEND = 'djcelery.backends.cache:CacheBackend'
from __future__ import absolute_import import logging import os import re
unit = self.go_to_unit_page() test_block = unit.xblocks[1] title_on_unit_page = test_block.name container = test_block.go_to_container() self.assertEqual(container.name, title_on_unit_page)
data['stdout'] = '' if is_json else data.get('stdout', '')[:idx] state['changes'] = data
from __future__ import absolute_import import json import logging import os import tempfile
result = result.replace("'", "") return result
ret['result'] = True ret['comment'] = 'image {0} is absent'.format(name)
reindexed = self.ts.reindex(list(self.ts.index)) assert_series_equal(self.ts, reindexed)
for k, v in grouped: self.assertEqual(len(v.columns), 2)
epoch_num = 1
gmm2 = GaussianMixture(n_components=n_components, n_init=1, reg_covar=0, random_state=rng, covariance_type=covar_type).fit(X) assert_greater(gmm2.score(X), gmm1.score(X))
if not hasattr(view_converter, 'topo_space'): raise NotImplementedError("Not able to get a topo_space " "from this converter: %s" % view_converter)
from zlib import compress, decompress value = 'value_to_be_compressed' compressed_value = compress(value.encode())
import integration import salt.loader import inspect import yaml
lm = LayerMapping(County, co_shp, co_mapping, transform=False)
import salt.utils from salt.exceptions import CommandExecutionError
s = self.model.objects.get(session_key=self.session.session_key) self.assertEqual(s.account_id, None)
self.set_year_of_birth(current_year - 10) self.profile.save() self.assertFalse(self.profile.has_profile_image)
AutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=False).visit()
if "TRACKING_IGNORE_URL_PATTERNS" in ENV_TOKENS: TRACKING_IGNORE_URL_PATTERNS = ENV_TOKENS.get("TRACKING_IGNORE_URL_PATTERNS")
from __future__ import unicode_literals
dlogz = self.log_mean(log_ais_w)
min_price = models.IntegerField(default=0)
from distutils.core import Command
self.set_config(False)
continue
continue
local_master = True
result.is_copy = ("modifications to a property of a datetimelike " "object are not supported and are discarded. " "Change values on the original.")
if hasattr(klass, '_default_manager'): return klass._default_manager.all() return klass
self.assertOLXIsDraftAndPublished(block_list_to_revert) self.revert_to_published(block_list_to_revert) self.assertOLXIsPublishedOnly(block_list_to_revert)
optima = [(self._constrained_optimization(obj_func, self.kernel_.theta, self.kernel_.bounds))]
from __future__ import absolute_import import re import string import random
get_version = { 'Linux': linux_netstats, 'FreeBSD': freebsd_netstats, }
def check_col(key, name, size): self.assertEqual(getattr(store.get_storer( key).table.description, name).itemsize, size)
fault = OrderedDict() for field in header: fault[field] = entry[header.index(field)]
from __future__ import unicode_literals
import salt.state import salt.payload from salt.exceptions import SaltRenderError
mask_missing_values = _get_mask(X.data, missing_values) mask_valids = np.logical_not(mask_missing_values)
self.assertEqual(list(r), [b'hello', b'world'])
scsi_controller_properties = devices['scsi'][scsi_controller_label] scsi_spec = _add_new_scsi_controller_helper(scsi_controller_label, scsi_controller_properties, bus_number) device_specs.append(scsi_spec) bus_number += 1
cache_root_path = all_cached_pkgs[0] specific_pkg = '{0}/{1}/'.format(cache_root_path, name)
if notifier.check_events(1): notifier.read_events() notifier.process_events() queue = __context__['inotify.queue'] while queue: event = queue.popleft()
from __future__ import absolute_import, generators, print_function, with_statement import re import logging
resp = self.client.post(reverse('shoppingcart.views.use_code'), {'code': coupon.code}) self.assertEqual(resp.status_code, 200)
ms = ModelState.from_model(Novel) with self.assertRaises(InvalidBasesError): ms.render(apps)
call_command('manage_user', TEST_USERNAME, TEST_EMAIL, '--remove') self.assertEqual([], list(User.objects.all()))
self.registration = Registration() self.registration.register(self.user) self.registration.save()
target_mod = module + '.' if not module.endswith('.') else module
try: marty.edited.set([pro, dive], bulk=False) except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
try: arg.default_alias except (AttributeError, TypeError): raise TypeError("Complex aggregates require an alias") kwargs[arg.default_alias] = arg
result = self.arr[-12:] exp = SparseArray(self.arr) tm.assert_sp_array_equal(result, exp)
new_labels = []
self.assertEqual(p._savecount, 1)
result = f.clean('21.12.2010') self.assertEqual(result, date(2010, 12, 21))
s = Series([Timestamp('2015-02-03'), Timestamp('2015-02-07')]) self.assertEqual(s.diff().median(), timedelta(days=4))
result = list(lzip(*result)[0])
for param in self.params: value = param.get_value(borrow=True) if not isfinite(value): raise RuntimeError("NaN in " + param.name)
self.assertEqual(result['success'], 'incorrect')
exc_info_on_loglevel=logging.DEBUG
from __future__ import absolute_import
split_store = modulestore()
if len(update_fields) == 0: return
self._configure_credit()
self.assertEqual(test, expected)
htpasswd.__salt__ = {} htpasswd.__opts__ = {'test': False}
result = sparse.loc[orig.x % 2 == 1] exp = orig.loc[orig.x % 2 == 1].to_sparse() tm.assert_sp_frame_equal(result, exp)
return files, symlinks
log.info("Send-email task %s for email %s: returning status %s", current_task_id, email_id, new_subtask_status) return new_subtask_status.to_dict()
try: modulestore().get_course(course_key) except ItemNotFoundError: logging.error("Could not find course: %s", course_key) return HttpResponseBadRequest()
if win32event.WaitForSingleObject(hProcess, win32event.INFINITE) == win32con.WAIT_OBJECT_0: exitcode = win32process.GetExitCodeProcess(hProcess) ret['retcode'] = exitcode
lhs = Series(randn(5)) expect = -lhs result = pd.eval(expr, engine=self.engine, parser=self.parser) assert_series_equal(expect, result)
self.assertEqual(request.get_port(), '8080')
field_names = list(fields)
grid_search_no_score.fit(X, y)
test_data = state_run['cmd_|-test_failing_state_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
log = logging.getLogger(__name__)
response = self.assert_request_status_code(400, url, method="POST", data=data) self.assertIn("This invoice is already active.", response.content)
X = X_digits_binary[:50] y = y_digits_binary[:50]
img.thumbnail((width_sc, height_sc), Image.ANTIALIAS)
clf = LogisticRegression(random_state=0) clf.fit(X, Y1) clf.coef_[:] = 0 clf.intercept_[:] = 0 assert_array_almost_equal(clf.decision_function(X), 0)
from safe_lxml import defuse_xml_libs defuse_xml_libs()
while self.dispatch_one_batch(iterator): self._iterating = True else: self._iterating = False
assert_almost_equal(np.abs(np.dot(d2[:2], [0, 1])), 1.0)
lkey, rkey, count = fkeys(lkey, rkey)
self.assertEqual(response.status_code, 400)
certificate_count = 3 for __ in xrange(certificate_count): self.generate_certificate(course_id=self.course.id, mode='honor', status=CertificateStatuses.generating)
self.export_fs = None
digits = load_digits() data = digits.data
supports_foreign_keys = True
truncate_h = self.truncate_h truncate_v = self.truncate_v
self.vert1 = ItemFactory.create( parent_location=self.seq1.location, category='vertical', display_name='untitled vertical 1' )
expected = Series( data=['A', 'B', 'C'], index=pd.to_timedelta([0, 10, 20], unit='s') )
from xmodule.modulestore.mongo.draft import DraftModuleStore as DraftMongoModuleStore
setuptools_kwargs['use_2to3'] = True if BUILD_CACHE_DIR is None else False
s = Series([], dtype=np.int64, name='foo') self.assertEqual(repr(s), 'Series([], Name: foo, dtype: int64)')
self.name = name or self.name
self.assertFalse(library_container.has_validation_not_configured_warning)
self.assert_categorical_equal(cat, cat.shift(0))
if self.kind == 'timestamp': return super(PeriodIndexResampler, self)._downsample(how, **kwargs)
'jinja_lstrip_blocks': bool,
webresponse = server.encodeResponse(response) http_response = HttpResponse(webresponse.body) http_response.status_code = webresponse.code
return True
geodetic_units = ('decimal degree', 'degree')
functions = list(reversed(functions))
if len(y) == 0: words = generator.randint(n_features, size=n_words) return words, y
from __future__ import unicode_literals
clf = svm.SVC(kernel='precomputed') assert_raises(ValueError, clf.fit, X, Y)
df = DataFrame( np.random.randn(10, 4), index=list('abcdefghij'), columns=list('ABCD'))
x = Series(np.random.random(201), name='x') self.assertTrue(x.reshape(x.shape, ) is x)
with self.assertRaises(ValueError): with transaction.atomic(using='other'): dive.authors.add(marty)
indices, indptr, spmat_shape, sptype, outshp = \ convolution_indices.conv_eval(imgshp, maxpoolshp, maxpoolshp, mode='valid')
'ENABLE_XBLOCK_VIEW_ENDPOINT': False,
response_dict = _reset_syslog_config_params(host, username, password, cmd, resets, valid_resets, protocol=protocol, port=port) ret.update({host: response_dict})
if result is False: target_pkgs.append((prefix, state_pkg_name.replace(',', ';')))
TASK_LOG.info(u'%s, Task type: %s, Finalizing detailed enrollment task', task_info_string, action_name) return task_progress.update_task_state(extra_meta=current_step)
quoteChar = quoteChar.strip() if len(quoteChar) == 0: warnings.warn("quoteChar cannot be the empty string",SyntaxWarning,stacklevel=2) raise SyntaxError()
expected_message = self.get_dashboard_enrollment_message() self.assertTrue(expected_message in response.content)
import salt.crypt import salt.utils.event import salt.payload import salt.transport import salt.ext.six as six
indexer = labels._convert_list_indexer(objarr, kind=self.name) if indexer is not None: return indexer
imports = None
modulestore = XMLModuleStore( DATA_DIR, source_dirs=['toy'], xblock_mixins=(XModuleMixin,), load_error_modules=False)
return False
raise NotImplementedError()
comb = dict([(k, v.filled()) if hasattr( v, 'filled') else (k, v) for k, v in comb])
train.apply_preprocessor(pipeline, can_fit=True) del train
account_settings = AccountSettingsPage(self.browser).visit() account_settings.switch_account_settings_tabs('accounts-tab')
visitor = AllNodeVisitor(python_code, results) visitor.visit(root_node)
merged_parent_group_ids = None
from __future__ import absolute_import
with self.assertRaises(TypeError): City.objects.annotate(geojson=functions.AsGeoJSON('point', precision='foo'))
n_neighbors = 10 n_samples = 1000
import salt.utils
result = self.panel4d.swapaxes(0, 1) self.assertIs(result.labels, self.panel4d.items)
from salt.modules import netscaler
def _topology(self, gptr): "Helper routine to return Geometry from the given pointer." return GEOSGeometry(gptr, srid=self.srid)
with self.settings(DATA_DIR='/not/the/data/dir'): try_tar(self._edx_platform_tar())
all_thumbnails = content_store.get_all_content_thumbnails_for_course(course.id) self.assertGreater(len(all_thumbnails), 0)
from __future__ import absolute_import import yaml import re import tempfile import os
if which_norb == 'big': self.label_index_to_name = (self.label_index_to_name +
DEBUG = True SITE_NAME = 'localhost:{}'.format(LETTUCE_SERVER_PORT)
if chunk.get('fun') != low.get('fun'): continue
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
for name in ["", "a"]: params["name"] = name assert_name_error("Your legal name must be a minimum of two characters long")
if is_float_dtype(left) or is_complex_dtype(left): return ((left == right) | (np.isnan(left) & np.isnan(right))).all()
self.ts.to_csv(path, header=True) ts_h = Series.from_csv(path, header=0) self.assertTrue(ts_h.name == 'ts')
import logging
if self._check_relation(obj, parent_model): return []
y = iris.target
try: milestone_paths = get_course_milestones_fulfillment_paths( unicode(course.id), serialize_user(user) ) except InvalidMilestoneRelationshipTypeException: return required_content
self.assertEqual(ts.asof(ts.index[3]), ts[3])
p = Photo.objects.get() p.image.delete(save=False)
if existing['code'] == 200:
selector = RFE(estimator, step=0.01) sel = selector.fit(X, y) assert_equal(sel.support_.sum(), n_features // 2)
import salt.client.ssh
self.assertEqual(iptables.build_rule(**{'match-set': '!src flag'}), '-m set ! --match-set src flag')
self.assertTrue(len(ax.get_children()) > 0)
self.instance = opts.model() object_data = {}
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0)
self.assertRaises(KeyError, df.loc.__getitem__, tuple([[1, 2], [1, 2]]))
encoding = geoip_encodings[record['charset']] for char_field in geoip_char_fields: if record[char_field]: record[char_field] = record[char_field].decode(encoding)
with np.errstate(under='ignore'): rbm1.score_samples([np.arange(1000) * 100])
self.assertEqual(ax.patches[0].get_x(), -0.5) self.assertEqual(ax.patches[-1].get_x(), 3.5)
X = X.tocsr()
if bucket_size is None: bucket_size = _size_map(_fssys('bucket_size'))
tm.assert_contains_all(self.strIndex, self.strIndex) tm.assert_contains_all(self.dateIndex, self.dateIndex)
td = Series([timedelta(days=i) for i in range(3)]) self.assertEqual(td.dtype, 'timedelta64[ns]')
_sentinel = object()
K = rbf_kernel(np.atleast_2d(x), np.atleast_2d(y), **kwds) return K
enrollment_mode = self.dashboard_page.get_enrollment_mode(self.course_info["display_name"]) self.assertEqual(enrollment_mode, 'verified')
n_samples, n_features = X.shape
idx = pd.IndexSlice
tm.assertRaises(TypeError, lambda: lib.max_len_string_array(arr.astype('U')))
assert_frame_equal(recons, newdf, check_names=False)
return handle_node(self.tree)
private_ips = [] public_ips = []
STATICFILES_STORAGE = 'pipeline.storage.PipelineCachedStorage'
return False
merged = target.map(source.to_dict())
if sys.version_info < (2, 7): raise nose.SkipTest('on python version < 2.7')
ret = self.run_state( 'file.prepend', name=name, text='cheese' ) self.assertSaltTrueReturn(ret) self.assertTrue(os.path.isfile(name))
class Politician(models.Model): politician_id = models.AutoField(primary_key=True) title = models.CharField(max_length=50)
self.assertNotIn(self.module_key, self.loader)
)
self.track_selection_page.visit()
f = lambda x: x.reset_index(inplace=True) _check_f(data.set_index('a'), f)
with tm.assert_produces_warning(FutureWarning): result_add = rng + other
rings = tuple(r for r in poly) self.assertEqual(poly, Polygon(rings[0], rings[1:]))
if self._is_frame and axis == 1: name = 0 obj = sample._constructor({name: obj})
from __future__ import absolute_import
with tm.assert_produces_warning(FutureWarning): df.icol(1)
create_account(self.USERNAME, self.PASSWORD, self.EMAIL)
rows_broadcastable = False cols_broadcastable = False
actual = GroupConfiguration.get_content_groups_usage_info(self.store, self.course) self.assertEqual(actual.keys(), [0])
from salt.cloud.clouds import opennebula from salt.exceptions import SaltCloudSystemExit, SaltCloudNotFound
if not is_safe_url(url=redirect_to, host=request.get_host()): return resolve_url(settings.LOGIN_REDIRECT_URL) return redirect_to
from ioflo.aid.odicting import odict
course_key = CourseKey.from_string(course_id) CourseMode.objects.get_or_create(course_id=course_key, **PARAMETERS)
iris = load_iris()
data = "65248E10 11\n55555E55 22\n"
self.save_and_verify_discussion_topics(key=self.inline_key)
sampling_algorithm = {}
'jinja_trim_blocks': bool,
cm = confusion_matrix(y_true, y_pred) assert_array_equal(cm, [[19, 4, 1], [4, 3, 24], [0, 2, 18]])
exc_info_on_loglevel=logging.DEBUG
from __future__ import absolute_import
ScopeIds(None, category, loc, loc), DictFieldData(data_content),
cache.clear() CertificateGenerationConfiguration.objects.create(enabled=True) self.client.login(username=self.global_staff.username, password='test')
reg = RidgeClassifier(class_weight='balanced') reg.fit(X, y) assert_array_equal(reg.predict([[0.2, -1.0]]), np.array([1]))
self.check_event_response_by_key('flag_resource', resource, 'reason', 'reason 0')
if __Location__ != '': return __Location__
download_unittest_reports(opts) if opts.test_without_coverage is False: download_coverage_report(opts)
yaml_parse = None control = None cuda = None
import salt.utils
if self._is_nested_tuple_indexer(tup): return self._getitem_nested_tuple(tup)
if self.n_classes_ > 1: max_features = max(1, int(np.sqrt(self.n_features))) else: max_features = self.n_features
try: etype = etype.__name__ except AttributeError: pass
import json import salt.ext.six import salt.ext.six.moves.http_client from salt.ext.six.moves.urllib.parse import urljoin as _urljoin
DarkLangConfig( released_languages=('es, en'), changed_by=self.user, enabled=True ).save()
raise ValueError("strftime format ends with raw %")
expected = DataFrame(False, index=df1.index, columns=df1.columns) result = df1.isin(df2) tm.assert_frame_equal(result, expected)
course_policy_dir_name = courselike.url_name
import os
from salt.states import mongodb_database
context['client'] = dict(segment_context) context['agent'] = segment_context.get('userAgent', '')
from __future__ import absolute_import import time import threading
task_folder = task_service.GetFolder(location) task_definition = task_folder.GetTask(name).Definition actions = task_definition.Actions
gp.fit(X, y)
rng = np.random.RandomState(0) n_samples, n_features = 500, 2
sequential2 = ItemFactory.create( parent_location=self.chapter.location, category='sequential', display_name='Section 2', modulestore=store, publish_item=True, start=datetime(2015, 3, 1, tzinfo=UTC), )
self.assertEquals(len(audit_log_calls), 0)
expression_wrapper = '(%s)' sql = connection.ops.combine_expression(self.connector, expressions) return expression_wrapper % sql, expression_params
from __future__ import absolute_import
for val, field in zip(args, fields_iter): if val is DEFERRED: continue setattr(self, field.attname, val)
from __future__ import unicode_literals
for tag in open_tags: out += '</%s>' % tag return out
import salt.utils from salt.exceptions import CommandExecutionError
params['signature'] = signature if signature is not None else self._signature(params) return params
self.assertEqual(ParkingLot3._meta.get_ancestor_link(Place).name, "parent")
FEATURES['DISABLE_START_DATES'] = True
Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape)
from salttesting.helpers import ensure_in_syspath, skip_if_binaries_missing import salt.utils ensure_in_syspath('../../')
_maybe_remove(store, 'df2') store.put('df2', df) result = store.select('df2') assert_frame_equal(result, df)
import salt.utils.http
seed = module.seed self.assertTrue(seed is not None)
ModuleStoreNoSettings.modulestore = class_(
if len(set(['year', 'month', 'day']) & found_attrs) != 3: return None
models.Post.objects.create(id=10, name='1st post', text='hello world')
if what == "class" and name.endswith(".Categorical"): cfg['class_members_list'] = False
from __future__ import absolute_import try: import iptc IPTC_IMPORTED = True except ImportError: IPTC_IMPORTED = False
for plot in self.plots: if plot.freq is None: plot.freq = self.freq
if 'provider' in provider_config: provider_config['driver'] = provider_config.pop('provider')
for parent, children in enumerate(children_map): self.assertSetEqual(set(block_structure.get_children(parent)), set(children))
cat_unorderd = cat.set_ordered(False) self.assertFalse((cat > cat).any())
server_thread = threading.Thread(target=self.serve_forever) server_thread.daemon = True server_thread.start()
'user': str,
if resp.context: self.assertEqual(resp.context['course'], self.course)
xapi_uri = 'httpu:///var/run/xend/xen-api.sock'
remove_master_course_staff_from_ccx(self.course, self.ccx_locator, self.ccx.display_name) self.assertEqual(len(outbox), len(list_staff_master_course) + len(list_instructor_master_course))
self.notes_page.wait_for_ajax() note = self.notes_page.notes[0] assert_page(note, self.raw_note_list[4]['usage_id'], "Recent Activity")
n_topics, X = _build_sparse_mtx() prior = 1. / n_topics lda_1 = LatentDirichletAllocation(n_topics=n_topics, doc_topic_prior=prior, topic_word_prior=prior, random_state=0) lda_2 = LatentDirichletAllocation(n_topics=n_topics, random_state=0)
self.cursor.numbersAsStrings = True self.cursor.arraysize = 100
default = models.Manager()
from __future__ import absolute_import import datetime
from __future__ import unicode_literals
alert = get_modal_alert(self.student_admin_section.browser) alert.dismiss()
return getattr(settings, 'SOCIAL_AUTH_OAUTH_SECRETS', {}).get(self.backend_name, '')
dc = set(self.data_columns) base_pos = len(self._indexables)
if not len(groups): groups = [0]
self.assertNumQueries(2, self._collect, 0)
else: for str_group_id, usage_key in self.group_id_to_child.items():
PYTHON_LIB_ZIP = "python_lib.zip"
self.assertEqual(len(ctx.dicts), 4)
result = df.loc[(slice(None), [1]), :] expected = df.iloc[[0, 3]] assert_frame_equal(result, expected)
def test_argumented(self): class Test(object): @method_decorator(ClsDec(False)) def method(self): return True
is_stopped = False for proc in all_processes: if proc.startswith(name) \ and _is_stopped_state(all_processes[proc]['state']): is_stopped = True break
course_key = course.location.course_key
return result
"shareable_fields": [ 'username', 'profile_image', 'country', 'time_zone', 'language_proficiencies', 'bio', 'account_privacy', 'accomplishments_shared', ],
import copy import re import logging
from __future__ import unicode_literals
if token != '': params_with_headers['SecurityToken'] = token
self.deferred_loading = field_names, False
comps = file_name.split('/') file_path = '/'.join(comps[:-1]) if not os.path.exists(file_path): os.makedirs(file_path)
self.assertIsNone( CourseEnrollment.enroll_by_email("not_jack@fake.edx.org", course_id) ) self.assert_no_events_were_emitted()
X = variation.copy().T X /= X.std(axis=0) edge_model.fit(X)
from __future__ import absolute_import
from __future__ import unicode_literals
a.join(d) d.join(a)
m.custom_method = custom_method m.list_display = ['id', 'name', 'parent', 'custom_method']
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
pass
train_with_monitoring_datasets( train_dataset=dataset1, monitoring_datasets=uneven_monitoring_datasets, model_force_batch_size=False, train_iteration_mode='sequential', monitor_iteration_mode='sequential')
frgd_img = to_img(blend_arr, os)
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
ax._plot_data = [] ax.clear()
assert_almost_equal(mcc, 0.)
order = [3, 1, 2, 0] for df in [self.frame]:
can_clone_databases = False
from __future__ import absolute_import, print_function import os import copy import math import random import logging import operator import collections import json from functools import reduce
assert_raises(ValueError, lshf.radius_neighbors, X[0])
from __future__ import absolute_import import os import pwd import shutil import re import tempfile
version = __import__('django').get_version()
if len(y.shape) != 1: G_diag = G_diag[:, np.newaxis] return G_diag, c
from __future__ import absolute_import
context.update(course.cert_html_view_overrides)
DATE_INPUT_FORMATS = [
diff = 2**(self.rounds - int(rounds)) - 1 while diff > 0: self.encode(password, force_bytes(salt)) diff -= 1
assert_series_equal(empty, empty2, check_index_type=False)
self.assertLessEqual( datetime.datetime.now(UTC()), child.start )
compare_branch = getattr(options, 'compare_branch', None) compare_branch_string = u'' if compare_branch: compare_branch_string = u'--compare-branch={0}'.format(compare_branch)
rng = np.random.RandomState(42) X = rng.randn(4, 5)
assertIsInstance(left, DataFrame, '[DataFrame] ') assertIsInstance(right, DataFrame, '[DataFrame] ')
likelihood = np.exp(values - values.max(axis=1)[:, np.newaxis]) return likelihood / likelihood.sum(axis=1)[:, np.newaxis]
test_score = np.zeros((params['n_estimators'],), dtype=np.float64)
destroy(vm_['name'])
if right_str: name = self.env.add_tmp([right.value]) right = self.term_type(name, self.env)
_, _, X_offset, _, X_scale = _preprocess_data(X, y, fit_intercept, normalize, return_mean=True) mean_dot = X_offset * np.sum(y)
form = self._admin_form("verified", upgrade_deadline=self.UPGRADE_DEADLINE)
continue
if values.dtype.fields is not None: values = values[self.cname]
assert self.n_unique_specs == 1
log.error("etcd: error. python-etcd does not fully support python 2.6, no error information available") raise
return "SELECT MAX(id) FROM {table_name} GROUP BY {key_fields}".format( key_fields=', '.join(key_fields_escaped),
p = self.PersonModel(name='Joe') p.mugshot = self.file1 self.check_dimensions(p, 4, 8)
lshf = LSHForest(min_hash_match=32) ignore_warnings(lshf.fit)(X_train)
import salt.utils.network from salt._compat import ipaddress
def test_constructor_empty(self): sp = SparseSeries() self.assertEqual(len(sp.index), 0) self.assertEqual(sp.shape, (0, ))
class ReferencedByInline(models.Model): name = models.CharField(max_length=20, unique=True)
non_ts = self.series.copy() non_ts[0] = np.NaN self.assertRaises(ValueError, non_ts.interpolate, method='time')
user_id = abs(hash(username))
installer = pkginfo[version_num].get('installer', False) cache_dir = pkginfo[version_num].get('cache_dir', False) cache_file = pkginfo[version_num].get('cache_file', False)
clf = BayesianRidge(compute_score=True) clf.fit(X, y)
block_bits = width if (not max_bits or width < max_bits) else max_bits block_size = 2 ** block_bits
if err == 'usage:': break ret[csnap][ctag] = res['stderr']
from email.headerregistry import Address from email.errors import InvalidHeaderDefect, NonASCIILocalPartDefect
index_names = header.pop(-1) index_names, names, index_col = _clean_index_names(index_names, self.index_col)
self.assertEqual(num_children, len(reverted_parent.children))
ret['comment'] = 'Database {0} is not present, so it cannot be removed'\ .format(name) return ret
'config_models',
q = Parent(name='Elizabeth') q.save()
if kernel != kernel_white: K1 = kernel(X) K2 = pairwise_kernels(X, metric=kernel) assert_array_almost_equal(K1, K2)
shutil.rmtree(t_path)
creation_counter = 0 auto_creation_counter = -1
_stdin = sys.stdin try: sys.stdin = None repr(df) finally: sys.stdin = _stdin
block_wrappers.append(partial(replace_course_urls, course_id))
with ensure_clean_store(self.path) as store:
assert_not_equal(len(np.intersect1d(tr_a, tr_b)), len(tr1))
if not modulestore().has_course(course_key): return Response(status=status.HTTP_404_NOT_FOUND)
comment, passed, retries = _download(win_updater, retries) ret['comment'] += comment if not passed: ret['result'] = False return ret
password = None user_data = {} fake_user_data = {}
self.run_function('desktop.set_output_volume', [current_vol])
try: import jsonschema import jsonschema.exceptions HAS_JSONSCHEMA = True except ImportError: HAS_JSONSCHEMA = False
rendered = "0+untagged.%%d.g%%s" %% (pieces["distance"], pieces["short"]) if pieces["dirty"]: rendered += ".dirty"
self.workd[yslice] = self.OP(self.workd[xslice])
import salt.netapi import salt.utils import salt.utils.event from salt.utils.event import tagify import salt.client import salt.runner import salt.auth from salt.exceptions import EauthAuthenticationError
panel = _panel shifted = panel.tshift(1) unshifted = shifted.tshift(-1)
from __future__ import unicode_literals
ssh_key_name = config.get_cloud_config_value( 'ssh_key_name', vm_, __opts__, search_global=False )
non_int_round_dict = {'col1': 1, 'col2': 0.5} with self.assertRaises(TypeError): df.round(non_int_round_dict)
SECRET_KEY = 'dev key'
g1 = Guild.objects.create(name='First guild') note = Note(note='Note for guild', content_object=g1) note.save()
import glob import logging import re
from salt.states import lvs_service
return self.field_decorator(field_value)
suffixes=suffixes, fill_method=fill_method)
epilog += " http://edx.readthedocs.org/projects/edx-developer-guide/en/latest/conventions/safe_templates.html#safe-template-linter\n"
import salt.utils from salt.exceptions import CommandExecutionError try: import salt.utils.pycrypto HAS_CRYPT = True except ImportError: HAS_CRYPT = False
final_attrs['value'] = force_text(value)
url_user_invoice_preference = reverse('get_user_invoice_preference', kwargs={'course_id': self.course.id.to_deprecated_string()})
self.mock_programs_api() self.mock_credentials_api(self.user, reset_url=False) actual = get_programs_credentials(self.user, category='xseries') expected = self.expected_credentials_display_data()
return {'err_code': response.status_code, 'err_msg': json.loads(response.text).get('err', '')}
#import yaml import salt.ext.six as six
response = self.client.get('/login_protected_view_custom_redirect/') self.assertRedirects(response, '/accounts/login/?redirect_to=/login_protected_view_custom_redirect/')
courses = self._get_courses_for_org(org_list) only_courses = options.get("courses")
idx = DatetimeIndex(['2016-05-16', 'NaT', NaT, np.NaN])
monitor = lm.LiveMonitor() monitor.update_channels(['train_objective'], start=1, end=2) assert(len(monitor.channels['train_objective'].val_record) == 1)
wp = self.process_axes(wp, columns=columns)
ret.update({host_name: {'Disks Added': eligible}})
rng = date_range('1/1/1990', periods=N, freq='H', tz='US/Eastern') ts = Series(np.random.randn(N), index=rng)
network_spec = _add_new_network_adapter_helper(network_adapter_label, network_name, adapter_type, switch_type, container_ref) adapter_mapping = _set_network_adapter_mapping(devices['network'][network_adapter_label]) device_specs.append(network_spec) nics_map.append(adapter_mapping)
import integration import salt.utils
if isinstance(values, np.ndarray) and is_list_like(other): raise ValueError('Invalid broadcasting comparison [%s] ' 'with block values' % repr(other))
if decision in self.FAILED_DECISIONS: signed_field_names.remove("auth_amount")
__ = CourseOverview.get_from_id(self.course.id)
test_item = test_func test_item.__unittest_skip__ = CheckCondition(condition)
print("--- Sparse matrices")
ext_user = User.objects.get(email=self.ext_user.email) self.assertTrue(auth.user_has_role(ext_user, CourseInstructorRole(self.course.id)))
my_memcached_config: memcached.host: 127.0.0.1 memcached.port: 11211
return None
self.assertEqual(str(results[0].time), '2013-01-01 17:01:00+00:00')
if dtype is None and is_object_dtype(values): values = _possibly_infer_to_datetimelike(values)
elif existing['code'] == 404:
for course_mode in CourseMode.objects.filter(course_id=self.course.id): course_mode.sku = '' course_mode.save()
self.course_hierarchy = self.get_course_hierarchy() self.blocks = self.build_course(self.course_hierarchy) self.course = self.blocks['course']
SupportedFieldType(None, BlockCountsTransformer, BlockCountsTransformer.BLOCK_COUNTS),
self.X_topo_space = view_converter.topo_space
for password in ["", "a"]: params["password"] = password assert_password_error("A valid password is required")
for ind, merged_parent in enumerate(merged_parents_list): converted_object = _MergedGroupAccess([], block, []) converted_object._access = merged_parent merged_parents_list[ind] = converted_object
ret = self.run_function('state.sls', mods='testappend.step-2') self.assertSaltTrueReturn(ret)
ADD = '+' SUB = '-' MUL = '*' DIV = '/' POW = '^' MOD = '%%'
def astype(array, dtype, copy=True): if not copy and array.dtype == dtype: return array return array.astype(dtype)
return False
ret.setdefault('context', {}).update(extra)
aid = self.answer_ids[-1] new_cmap.set_hint_and_mode(aid, hint_text, hintmode)
my-minion: arg: - 30 fun: test.sleep jid: 20160503150049487736 pid: 9601 ret: tgt: my-minion tgt_type: glob user: root
with tm.assertRaises(ValueError): o.sample(n=3, weights=[0, 1])
self.first_checkpoint.add_verification_attempt(SoftwareSecurePhotoVerification.objects.create(user=self.user))
import salt.payload import salt.utils import salt.utils.files import salt.utils.jid import salt.exceptions
S = func(np.array([[1]], dtype='int'), metric='precomputed') assert_equal('f', S.dtype.kind)
self.check_get_and_set_methods(tab)
self.url_map.update({ self.apiopts.get('webhook_url', 'hook').lstrip('/'): Webhook, })
certificates = Dict( display_name=_("Certificate Configuration"), help=_("Enter course-specific configuration information here (JSON format)"), scope=Scope.settings, )
def cpu_affinity(self, *args, **kwargs): if args or kwargs: return self.set_cpu_affinity(*args, **kwargs) else: return self.get_cpu_affinity()
from salt.ext.six import string_types import salt.utils
if access_key != settings.VERIFY_STUDENT["SOFTWARE_SECURE"]["API_ACCESS_KEY"]: return HttpResponseBadRequest("Access key invalid")
elem.clear() elem.send_keys(value) elem.send_keys(Keys.TAB) self.save()
git_refnames = " (HEAD -> master)" git_full = "fcd73ad2e7482414b61d47056c6c9c220b11702c" keywords = {"refnames": git_refnames, "full": git_full} return keywords
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor', grade=default_grade )
credit_course = self.add_credit_course() CreditEligibility.objects.create( course=credit_course, username="staff", deadline=datetime.datetime.now(pytz.UTC) - datetime.timedelta(days=1) )
@property def supports_collect_aggr(self): return aggregates.Collect not in self.connection.ops.disallowed_aggregates
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
clf = RandomForestClassifier(n_estimators=20)
idx = self._holder(np.arange(5, dtype='int64'))
from __future__ import unicode_literals
for topic_id in range(self.NUM_TOPICS): team = CourseTeamFactory.create( name=u"Team for topic {}".format(topic_id), course_id=self.course.id, topic_id=topic_id, )
a_start, a_end = np.byte_bounds(a) m_start = np.byte_bounds(m)[0] offset = a_start - m_start
cols = self.obj.columns if isinstance(cols, Index): cols = cols.to_native_types(na_rep=na_rep, float_format=float_format, date_format=date_format, quoting=self.quoting) else: cols = list(cols)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
Ioinits = { 'lane_stack': '.salt.lane.manor.stack', }
attempt_3 = SoftwareSecurePhotoVerification( user=user, created_at=attempt_2.created_at + timedelta(days=1) ) attempt_3.save()
n_samples = 1500 noise = 0.05 X, _ = make_swiss_roll(n_samples, noise) X[:, 1] *= .5
from __future__ import absolute_import import msgpack import salt.ext.six as six
from __future__ import absolute_import import logging import time
algorithm, variety, raw_params, salt, data = bits version = 0x10
self._make_eligible() self._purchase_credit() CourseEnrollmentAttribute.objects.all().delete()
some_range = range(10) joined_range = list(chain(*[some_range[slice] for slice in gen_even_slices(10, 3)])) assert_array_equal(some_range, joined_range)
df = self._insert_index(df) tb = plotting.table(ax, df, loc=9) tb.set_fontsize(self.font_size)
children = self.get_item_from_modulestore(self.seq_usage_key).children self.assertEqual(unit1_usage_key, children[1]) self.assertEqual(unit2_usage_key, children[2])
if check: try: if (self.values[locs] == values).all(): return except: pass try: self.values[locs] = values except (ValueError):
if is_staff is not None: user.is_staff = (is_staff == "true") user.save()
self.assertFalse(linode._validate_name('foo bar'))
ots = self.ts.astype('O') ots[::2] = None repr(ots)
pass
try: problem.grade_answers({'1_2_1': '42'})
'cms.lib.xblock.tagging',
f = ftype.get('f') if f is not None:
import salt.ext.six as six from salt.ext.six.moves import range from salt.config import minion_config
if is_iterator(key): raise InvalidIndexError(key) else: raise e1
expected = left_f(s_nat, Timestamp('20010109')) result = right_f(Timestamp('20010109'), s_nat) tm.assert_series_equal(result, expected)
dataset = datasets.load_iris()
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.5, random_state=random_state)
ldata, rdata = self.left._data, self.right._data lsuf, rsuf = self.suffixes
from salttesting import skipIf, TestCase from salttesting.mock import ( mock_open, NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self._submit_photos(face_image=self.IMAGE_DATA + "1112") reverification_data = self._get_post_data()
z = mask[:, None] * z + (1 - mask[:, None]) * state_before
buf = self._read_bytes(const.endianness_offset, const.endianness_length) if buf == b'\x01': self.byte_order = "<" else: self.byte_order = ">"
pairwise = True if pairwise is None else pairwise
saltcloudmod.__salt__ = {}
self.load_courses()
with check_mongo_calls(1): ver_block = modulestore().get_item(self.reverification.location)
self.dashboard_page.visit() self.assertTrue(self.dashboard_page.has_library(name=name, org=org, number=number))
Z = Z.reshape(xx.shape) plt.figure(1, figsize=(4, 3)) plt.pcolormesh(xx, yy, Z, cmap=plt.cm.Paired)
if isinstance(value, bytes): return bytes(value) if isinstance(value, six.text_type): return bytes(value.encode(self.charset))
if value is None: return ret
from collections import namedtuple from copy import deepcopy import ddt import itertools from nose.plugins.attrib import attr from unittest import TestCase
with self.assertRaises(SearchIndexingError): reindex_course_and_check_access(self.course.id, self.user)
version_history = modulestore().get_block_generations(updated_problem.location) self.assertEqual(version_history.locator.version_guid, first_problem.location.version_guid)
if other is tslib.NaT: return self._nat_new(box=True) raise TypeError("cannot add a datelike to a DatetimeIndex")
labels = algos.take_nd(reverse_indexer, labels, allow_fill=False) np.putmask(labels, mask, -1)
post_data['name'] = 'Another name'
fast_model.fit(X_train, y_train, sample_weight=weights)
import salt.ext.six as six
import integration import salt.utils
d = self.frame.index[5] indexer = self.frame.index > d
singular_ind = np.arange(n, dtype=np.float64)
result = _agg(arg, _agg_2dim)
for tz in ['US/Eastern', 'Asia/Tokyo']: idx = pd.DatetimeIndex(['2011-01-01 09:00', pd.NaT, '2011-01-01 11:00'])
self.assertTrue(self.cohort_management_page.is_category_selected())
result = a & Series([1], ['z']) expected = Series([False, False, False], list('bca')) assert_series_equal(result, expected)
ring.srid = 4322 self.assertEqual('WGS 72', ring.srs.name) self.assertEqual(4322, ring.srid)
from __future__ import absolute_import import logging
X = np.zeros((5, 5)) assert_array_equal(clf.predict(X), np.zeros(5))
assert_almost_equal(dists[2], 1)
frame = DataFrame(np.random.randn(1500, 4), columns=['a', 'a', 'b', 'b']) frame.info(buf=io)
dependency_dict = defaultdict(lambda: defaultdict(set))
loader = jinja2.FileSystemLoader( context, os.path.dirname(tmplpath))
app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())
delete = salt.utils.alias_function(remove, 'delete') purge = salt.utils.alias_function(remove, 'purge')
current_keys = set(current.keys()) state_keys = set(state.keys())
return
log = logging.getLogger(__name__)
break
self.assertEqual(len(self.ts1), 30) self.assertEqual(len(self.ts2), 25)
s = Series(list('abc'))
LOAD_P = '.load.p' MINIONS_P = '.minions.p' RETURN_P = 'return.p' OUT_P = 'out.p'
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) for Cls in [GradientBoostingRegressor, GradientBoostingClassifier]: est = Cls(n_estimators=300, max_depth=1) est.fit(X, y)
for blk in self.blocks: newb = make_block(values=blk.values[slicer], klass=blk.__class__, fastpath=True, placement=blk.mgr_locs) new_blocks.append(newb)
course_key = request.data.get('course_key') try: course_key = CourseKey.from_string(course_key) except InvalidKeyError: raise InvalidCourseKey(course_key)
text = f.widget.format_value(result) self.assertEqual(text, "01:30:05 PM")
rng = self.mlp.rng if self.irange is None: raise ValueError("Recurrent layer requires an irange value in " "order to initialize its weight matrices")
return 0
return bool(value)
return self.accessor_cls
self.assertFalse(router.allow_migrate_model('default', User)) self.assertTrue(router.allow_migrate_model('default', Book))
with tm.assertRaises(ValueError): bad_weights = [-0.1] * 10 o.sample(n=3, weights=bad_weights)
for idx, code in enumerate(sorted(final_codes)):
ret['comment'] = 'Tablespace {0} is not present, so it cannot ' \ 'be removed'.format(name) return ret
check_node(child.location, None, after_create, self.user_id, None, after_create, self.user_id)
log.trace('refresh_modules waiting for module refresh to complete') eventer.get_event(tag='/salt/minion/minion_mod_complete', wait=30)
sorted_block_requirements = sorted( block_requirements, key=lambda x: (x['start_date'] is None, x['start_date'], x['display_name']) )
if SALT_CRON_IDENTIFIER in comment_line: parts = comment_line.split(SALT_CRON_IDENTIFIER) comment_line = parts[0].rstrip() if len(parts[1]) > 1: identifier = parts[1][1:]
out, err = DETAILS['server'].sendline(cmd)
certificate_count = 3 for __ in xrange(certificate_count): self.generate_certificate(course_id=self.course.id, mode='honor', status=CertificateStatuses.downloadable)
E = np.random.uniform(0, 0.1, size=(len(iris.data), 20))
class RequestMiddleware(TestMiddleware): def process_request(self, request): super(RequestMiddleware, self).process_request(request) return HttpResponse('Request Middleware')
with self.assertNumQueries(2, using='other'): authors = ", ".join(a.author.name for a in A.prefetch_related('author'))
self.assertEqual(signer.unsign(ts, max_age=datetime.timedelta(seconds=11)), value) with self.assertRaises(signing.SignatureExpired): signer.unsign(ts, max_age=10)
if definition is None: definition = self.db_connection.get_definition(definition_guid, course_key) bulk_write_record.definitions[definition_guid] = definition if definition is not None: bulk_write_record.definitions_in_db.add(definition_guid)
if depth: cmd = '{0} -d {1}'.format(cmd, depth) elif recursive: cmd = '{0} -r'.format(cmd)
s.name = 'E' self.assert_series_equal(result2.sort_index(), s.sort_index())
try: from pyVim.connect import GetSi, SmartConnect, Disconnect from pyVmomi import vim, vmodl HAS_PYVMOMI = True except ImportError: HAS_PYVMOMI = False
managed = False
names = F.readline().strip().split(',')
new_order = [len(cols)] + lrange(len(cols)) row_margin.index = row_margin.index.reorder_levels(new_order)
raise SaltInvocationError('Only can use keystone admin token ' + 'with Glance API v1')
item_labels = self.obj._get_axis(info_axis)
if len(language[0]) > 1: return translation.get_language_info(language[0]) else: return translation.get_language_info(str(language))
(['honor', 'verified', 'audit'], 'verified'),
assert_raises(ValueError, cval.StratifiedShuffleSplit, y, 3, 2) assert_raises(ValueError, cval.StratifiedShuffleSplit, y, 3, 3, 2)
def as_double(self): "Retrieves the Field's value as a double (float)." return capi.get_field_as_double(self._feat.ptr, self._index)
AccessTestData(partition_groups={1: 3, 2: 3}, xblock_access={1: [1, 2], 2: [1, 2]}),
self.thread_cache = threading.local()
for field in model._meta.local_many_to_many: if field.remote_field.through._meta.auto_created: self.create_model(field.remote_field.through)
self.save()
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
has_large_values = (abs_vals > 1e6).any() has_small_values = ((abs_vals < 10**(-self.digits)) & (abs_vals > 0)).any()
response = self.session.post( STUDIO_BASE_URL + '/xblock/' + loc, data=xblock_desc.serialize(), headers=self.headers, )
sections.append(_section_analytics(course, access))
colors = ['r-', 'b-', 'y-', 'm-']
if lookup_type == 'dwithin': dist_param = 'distance=%s' % dist_param
url = reverse('activate', kwargs={'key': activation_key}) self.assert_request_status_code(200, url) self.assertTrue(User.objects.get(email=email).is_active)
self.assertEquals(self.request.safe_cookie_verified_user_id, self.user.id)
if not self.q(css="input.practice_exam").present: return False
self.assert_enrollment_status()
DATETIME_FORMAT = 'N j, Y, P'
self.assertNotIn(self.user_name, self.certificates_section.last_certificate_exception.text) self.assertNotIn(notes, self.certificates_section.last_certificate_exception.text)
_update_course_context(request, context, course, platform_name)
import copy import os import logging
from __future__ import unicode_literals
ax = df.ix[:, [0]].plot(color='DodgerBlue') self._check_colors(ax.lines, linecolors=['DodgerBlue'])
from __future__ import absolute_import
self.assertEqual(col[0], Timestamp('2000-01-01 08:00:00'))
import xlwt engine_kwargs['engine'] = engine super(_XlwtWriter, self).__init__(path, **engine_kwargs)
read_only_fields = () explicit_read_only_fields = ("profile_image", "requires_parental_consent")
_ = lambda text: text
return xblock.has_children
VerificationStatus.add_verification_status(checkpoint, self.user, "submitted")
self.api_response(data={"last_visited_module_id": unicode(initial_unit.location)})
spmatrix = spmatrix.astype(dtype)
self.foundCategories = []
c(win_type='boxcar', window=2, min_periods=1) c(win_type='boxcar', window=2, min_periods=1, center=True) c(win_type='boxcar', window=2, min_periods=1, center=False)
for j in range(len(tset)): cs[i] = tset self.assertEqual(tset[j], cs[i][j])
try: validator(value) except expected: pass else: self.fail("%s not raised when validating '%s'" % ( expected.__name__, value))
idx = pd.PeriodIndex([], name='xxx', freq='H')
'splash',
import pyrax import pyrax.exceptions
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
from __future__ import unicode_literals
iptables.__salt__ = {} iptables.__opts__ = {}
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.approve()
self.navigate_to_video()
tasks = json.loads(response.content)['tasks'] self.assertEqual(len(tasks), 0)
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, course_id=self.course_id, staff=True).visit()
coefs = coefs[np.newaxis, :, :] y_offset = np.atleast_1d(y_offset) y_test = y_test[:, np.newaxis]
from __future__ import absolute_import
pillar_value = 'i am the pillar value\n'
actions.do_complete(backend, social_views._do_login, user=unlinked_user)
if l2_reg != 0.: HHt.flat[::n_components + 1] += l2_reg if l1_reg != 0.: XHt -= l1_reg
def test_deprecation(self): with tm.assert_produces_warning(FutureWarning): SparsePanel()
self.assertEqual(list(storage), example_messages)
self.assertTrue(_df[column].equals(df[column]))
for sec_index, sec_title in enumerate(section_titles):
clf_3 = ForestEstimator(n_estimators=15, max_depth=3, warm_start=True, random_state=1, bootstrap=True, oob_score=False) clf_3.fit(X, y) assert_true(not(hasattr(clf_3, 'oob_score_')))
self.assertEqual(a.value, a.value)
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): return f(obj, window=window, min_periods=min_periods, freq=freq, center=center, **kwargs)
import glob import os import re import itertools import fnmatch
names = ['Bexar', 'Galveston', 'Harris', 'Honolulu', 'Pueblo']
import logging
remove_entrance_exam_graders(course_key, request.user)
v = v.reindex(index, copy=False)
return bool(self._dict or not self.loaded)
self._from_sequence([float(a) for a in args])
data_csv = pd.read_csv(self.file02.replace(".xpt", ".csv")) numeric_as_float(data_csv)
ts = _simple_pts('1990', '1992', freq='A-JUN')
still_in_grace = CapaFactory.create(showanswer='past_due', max_attempts="1", attempts="1", due=self.yesterday_str, graceperiod=self.two_day_delta_str) self.assertFalse(still_in_grace.answer_available())
#texinfo_appendices = []
cet = CourseEmailTemplate.objects.get(name=None) self.assertIsNotNone(cet)
bias = T.dvector() kerns = T.dvector() input = T.dmatrix() rng = N.random.RandomState(3423489)
install_package(package,temp_filename,dataset_data_path) update_installed_list("i",package)
if isinstance(cfg, dict): return c_cfg.get(attr_name, cfg.get(default_cfg_key)) else: return c_cfg.get(attr_name, cfg(default_cfg_key))
data = np.array([1., np.nan, 3], dtype=np.float32) arr = SparseArray(data, dtype=np.float32)
SEARCH_ENGINE = None ELASTIC_FIELD_MAPPINGS = { "start_date": { "type": "date" } }
self.advanced_settings.undo_changes_via_modal()
self.assertNotContains(resp, 'Robot_Super_Course')
self.assert_index_equal(Index(['b', 'c', 'e', 'd']), result.insert(-1, 'e'))
if end_slice == -1: end_slice -= len(self) if start_slice == -1: start_slice -= len(self)
import salt.utils
number = 3 dummy3 = ungettext("%(number)s Foo", "%(number)s Foos", number) % {'number': number}
org_access_role(lib_key_pacific.org).add_users(self.non_staff_user)
for tab in course.tabs: if tab.type == 'discussion' or tab.type == 'external_discussion': return tab return None
for i, v in enumerate(values): rows[names[i + nindexes]] = v
qs = self.root_queryset for filter_spec in self.filter_specs: new_qs = filter_spec.queryset(request, qs) if new_qs is not None: qs = new_qs
def test_compare_phases_ignored(self): self.assertTrue(compare_chemical_expression( "H2O(s) + CO2", "H2O+CO2", ignore_state=True))
output.append('\'{0}\': {1!s}'.format(key, value))
self.assertFalse(module_has_submodule(egg_module, 'no_such_module')) with self.assertRaises(ImportError): import_module('egg_module.sub1.sub2.no_such_module')
result.is_copy = ("modifications to a method of a datetimelike object " "are not supported and are discarded. Change " "values on the original.")
create_unknown_user = True
new_conf.append(new_line)
block_locator = course_key.make_usage_key( block_type=block_key.type, block_id=block_key.id, )
return NOT_PROVIDED
assert_array_almost_equal(K.flat[::6], [linalg.norm(x) ** 2 for x in X])
if self.is_transposed: obj = obj.transpose( *tuple(Series(self.data_orientation).argsort()))
t_path_dirs = os.listdir(t_path) if not t_path_dirs and t_path not in dirs_to_remove: dirs_to_remove.add(t_path) continue
base_url = reverse('create_mode', args=[unicode(self.course.id)]) self.client.get(base_url)
from salt.states import splunk_search
import salt.utils.event
max_cookie_size = 2048 not_finished = '__messagesnotfinished__'
HAS_GRP = False
from salt.utils.openstack import pyrax as suop
import dns.resolver
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock ensure_in_syspath('../../')
else: if bootstrap: indices = random_state.randint(0, n_samples, max_samples) else: indices = sample_without_replacement(n_samples, max_samples, random_state=random_state)
self.assertRaises(TypeError, self.frame.reindex, idx, level=0)
return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)
ready = self.ready self.ready = False try: yield finally: self.ready = ready self.clear_cache()
if not has_files: input_element = etree.SubElement(response_element, "textbox") input_element.set("mode", "python")
from salt.states import mac_package as macpackage
class sideeffect_str(str): def split(self, *args, **kwargs): res = str.split(self, *args, **kwargs) trans_real._translations['en-YY'] = None return res
raise
self._iter_mode = resolve_iterator_class('sequential')
module.new_lcp.assert_called_once_with(None)
_ZFILE_PREFIX = asbytes('ZF') _MAX_LEN = len(hex_str(2 ** 64))
try: import boto import boto.sqs logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
categories = self.metadata self.data = Categorical.from_codes(self.data.ravel(), categories=categories, ordered=self.ordered)
warning_msg = _("The problem's state was corrupted by an invalid submission. The submission consisted of:") warning += warning_msg + '<ul>'
assert max(pd.max(), hd.max()) < .17
self.assertOLXIsDraftOnly(block_list_to_revert) self.publish(block_list_to_revert) self.assertOLXIsPublishedOnly(block_list_to_revert) self.revert_to_published(block_list_to_revert) self.assertOLXIsPublishedOnly(block_list_to_revert)
self.url = 'git+' + self.url
df.to_sql("test_read_write", self.conn, index=False) df2 = sql.read_sql_table("test_read_write", self.conn)
split_test_module.user_partition_id = -1 [active_children, inactive_children] = split_test_module.active_and_inactive_children() self.assertEqual(active_children, []) self.assertEqual(inactive_children, children)
pc_clf.fit(this_X_train, y_train + 1, sample_weight=sw_train) prob_pos_pc_clf_relabeled = pc_clf.predict_proba(this_X_test)[:, 1] assert_array_almost_equal(prob_pos_pc_clf, prob_pos_pc_clf_relabeled)
'render_dirs': list,
from __future__ import absolute_import import json import pprint import logging from os import path from functools import wraps
raise TypeError('Improper geometry input type: %s' % str(type(geo_input)))
try: import ethtool HAS_ETHTOOL = True except ImportError: HAS_ETHTOOL = False
return response.content
stringified_sources_list = map(lambda loc: loc.to_deprecated_string(), self.sources_list) self.xml_attributes['sources'] = ';'.join(stringified_sources_list) return xml_object
if pkey == key: continue
ranks0 = self.frame.rank(na_option='top') ranks1 = self.frame.rank(1, na_option='top')
self.assertTrue(_int64_overflow_possible(gr.grouper.shape))
'ENABLE_CREDIT_ELIGIBILITY': ENABLE_CREDIT_ELIGIBILITY,
opts['hash_type'] = opts['hash_type'].lower()
import salt.ext.six as six
warnings.filterwarnings('always', '', DeprecationWarning, __name__)
idx1 = pd.DatetimeIndex(['2011-01-01', '2011-01-02', '2011-01-03'], tz=tz) self.assertTrue(idx1.is_monotonic)
ret = utils.repack_dictlist(LORUM_IPSUM) self.assertDictEqual(ret, {})
from salt.pillar import sqlite3
clf = svm.NuSVC(nu=0.0) assert_raises(ValueError, clf.fit, X_sp, Y)
auto_created = True concrete = False editable = False is_relation = True
has_partial_range = tree.xpath('responseparam[@partial_range]') if has_partial_range: partial_range = float(has_partial_range[0].get('partial_range', default='2')) else: partial_range = 2
if not isinstance(data, SparseArray): data = SparseArray(data, sparse_index=sp_index, fill_value=fill_value, copy=False)
self.assertTrue(bool(version))
import os import datetime try: import spwd except ImportError: pass
'show_jid': bool,
if (name not in (MULTIOUTPUT_METRICS + THRESHOLDED_MULTILABEL_METRICS + MULTILABELS_METRICS)): assert_raises(ValueError, metric, y1_row, y2_row)
from __future__ import absolute_import, print_function import logging
from __future__ import absolute_import try: import pwd except ImportError: pass
keyarr = _asarray_tuplesafe(key)
xs1 = ix[0] xs2 = f.xs(f.index[0]) assert_series_equal(xs1, xs2)
msg = msg.replace('\r\n', '') self.assertNotIn('\r', msg) self.assertNotIn('\n', msg)
step = 1 if key.step is None else key.step if key.start is None: start = l - 1 if step < 0 else 0 else: start = key.start
PREVIEW_VIEWS = [STUDENT_VIEW, AUTHOR_VIEW]
import salt.ext.six as six
for method in SimpleView.http_method_names: kwargs = dict(((method, "value"),)) with self.assertRaises(TypeError): SimpleView.as_view(**kwargs)
if formset: media = self.media + formset.media else: media = self.media
__virtualname__ = 'odbc'
class TestForm(Form): foo = CharField(widget=HiddenInput) bar = CharField(widget=HiddenInput)
self.data[col_loc] = col
def test_inheritance(self): Event.objects.create() Screening.objects.create(movie=self.movie)
ret['comment'] = 'Event module not available. Schedule add failed.'
if 'provider' in provider: driver = provider.pop('provider') else: driver = provider['driver']
plt.scatter(X_test[:, 0], X_test[:, 1], s=80, facecolors='none', zorder=10)
for field in self.fields.values(): if field.scope in (Scope.parent, Scope.children): continue
self._first_chunk = False
mako_middleware_process_request(self.request) return views.progress(self.request, course_id=unicode(course.id), student_id=self.user.id).content
C = np.array([[0., -0.7], [3.5, .7]]) stretched_gaussian = np.dot(np.random.randn(n_samples, 2), C)
assert_raises_regexp(TypeError, 'estimator', check_consistent_length, [1, 2], RandomForestRegressor())
profile = vm_.get( 'lxc_profile', vm_.get('container_profile', None))
testing.assert_array_equal( FunctionTransformer(np.log1p).transform(X), np.log1p(X), )
ret['changes'] = image_update
self.randomize_datasets(randomize_now)
pass
axes = axarr.reshape(nrows, ncols)
self.assertEqual(csv.replace('\r\n', '\n').strip(), self.CORRECT_REFUND_REPORT_CSV.strip())
log = logging.getLogger(__name__)
X = np.asmatrix(X)
raise MultiPartParserError("Invalid content length: %r" % content_length)
AUTH_TOKENS = convert_tokens(AUTH_TOKENS)
with self.assertRaises(ImproperlyConfigured): self.client.post('/edit/author/%d/delete/naive/' % a.pk)
for idxr, getitem in [(lambda x: x.ix, False), (lambda x: x.loc, False), (lambda x: x, True)]:
from __future__ import absolute_import from uuid import uuid4 as _uuid
train.algorithm.termination_criterion = EpochCounter(max_epochs=1) train.extensions.pop(0) train.save_freq = 0 train.main_loop()
module = CapaFactory.create(due=self.yesterday_str) self.assertFalse(module.should_show_check_button())
rows = self.selenium.find_elements_by_css_selector( '%s #result_list tbody tr' % form_id) self.assertEqual(len(rows), 1)
return (display_width or terminal_width, display_height or terminal_height)
msg = colorize('green', "Confirming servers are running...") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc)
self.assertEqual(food_no_managers_state.managers, [])
expected = g.resample('2s').sum()
result = sparse[orig % 2 == 1] exp = orig[orig % 2 == 1].to_sparse(fill_value=0) tm.assert_sp_series_equal(result, exp)
warnings.filterwarnings('always', category=DeprecationWarning, module='^{0}\.'.format(re.escape(__name__)))
self.assert_no_setting_changed_event()
self.assert_no_xpath(xml, "//div[@class='capa_alert']", self.context)
mako_middleware_process_request(request)
STATICFILES_FINDERS = [ 'django.contrib.staticfiles.finders.FileSystemFinder', 'django.contrib.staticfiles.finders.AppDirectoriesFinder', ]
ext_user = User.objects.get(email=self.ext_user.email) self.assertTrue(auth.user_has_role(ext_user, CourseStaffRole(self.course.id)))
assert_raises(ValueError, cross_val_score, svm, linear_kernel.tolist(), y)
return total / len(model_output)
staff_role.add_users(self.user)
from __future__ import absolute_import
get_storage_container = show_storage_container
setattr(c, "parent", None)
mlp = MLPClassifier(hidden_layer_sizes=(50,), max_iter=10, alpha=1e-4, algorithm='sgd', verbose=10, tol=1e-4, random_state=1, learning_rate_init=.1)
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from __future__ import absolute_import
opts_pkg['id'] = self.id
self._create_and_purchase_verified(student, course.id)
block_structure.set_transformer_block_field( block_key, cls, cls.MERGED_VISIBLE_TO_STAFF_ONLY, ( all_parents_visible_to_staff_only or block_structure.get_xblock(block_key).visible_to_staff_only ) )
self.assertTrue(self._search_for_content(self.EDITED_SEARCH_STRING))
'mobile_api', 'social.apps.django_app.default',
elif ((self.is_timedelta_lhs and (self.is_timedelta_rhs or self.is_offset_rhs)) or (self.is_timedelta_rhs and (self.is_timedelta_lhs or self.is_offset_lhs))):
assert_equal(np.sum(s_clf.coef_ != 0.0), n_informative)
if isinstance(obj, XBlock): return _has_access_descriptor(user, action, obj, course_key)
if score is None: self.clear_user_module_score(real_user) return Response(status=200)
self.cohort_name = "OnlyCohort" self.setup_cohort_config(self.course_fixture) self.cohort_id = self.add_manual_cohort(self.course_fixture, self.cohort_name)
for col_name, df_col in data_frame.iteritems(): if com.is_datetime64tz_dtype(df_col): data_frame[col_name] = _handle_date_column(df_col)
for the_input in self.inputs.values(): if hasattr(the_input, 'ungraded_response'): the_input.ungraded_response(xqueue_msg, queuekey)
if nic and isinstance(nic, (six.string_types, dict)): nicp = get_network_profile(nic) else: nicp = {} if DEFAULT_NIC not in nicp: nicp[DEFAULT_NIC] = {}
assert_equals('"/static/data_dir/file.png"', replace_static_urls(STATIC_SOURCE, DATA_DIRECTORY))
from __future__ import unicode_literals
DATE_FORMAT = 'd F Y' TIME_FORMAT = 'H:i' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'd.m.Y'
import salt.utils from salt.exceptions import CommandExecutionError
INVOICE_CORP_ADDRESS = "Please place your corporate address\nin this configuration" INVOICE_PAYMENT_INSTRUCTIONS = "This is where you can\nput directions on how people\nbuying registration codes"
if hasattr(to, 'get_absolute_url'): return to.get_absolute_url()
return ret
if values: return f.values[i]
self.assertIn('Welcome to edX.', self.video.captions_text)
name = models.CharField(max_length=128) group_country = models.ForeignKey(Country, models.CASCADE) members = models.ManyToManyField(Person, related_name='groups', through='Membership')
X = [[3, 2], [1, 6]] y = [1, 0]
funcs = self.run_function('sys.list_functions') self.assertIn('hosts.list_hosts', funcs) self.assertIn('pkg.install', funcs)
self.assertEqual(map(str.strip, result.splitlines()), self.OVERRIDES_JS)
answer_map = dict() for response in self.responders.keys(): results = self.responder_answers[response] answer_map.update(results)
sql, params = val, []
'start': course_overview.start, 'start_display': course_overview.start_display, 'start_type': course_overview.start_type, 'end': course_overview.end,
FEATURES['ENABLE_EDXNOTES'] = True
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.guitar_book, self.djangonaut_book])
u, d, _ = linalg.svd(X, full_matrices=False)
for ax in axes[:2]:
call_command( "migrate_to_split", str(self.course.id), str(self.user.id), )
description = cls._line_item_description(course_id=course_id)
def _reject(self, request, reason): return None
cmd = __salt__['cmd.run_all']('racadm {0} {1}'.format(command, modswitch))
X = np.array([[1, 2], [2, 1], [-2, 1], [-2, -1]]) y_ref = np.array([2, 0, 1, 2])
attempt2 = SoftwareSecurePhotoVerification(user=user) attempt2.status = 'denied' attempt2.error_msg = '[{"photoIdReasons": ["Not provided"]}]' attempt2.save()
git@github.com:user/repo.git: git.latest: - user: deployer - identity: /home/deployer/.ssh/id_rsa
num_students = len(students) self.assertDictContainsSubset({'attempted': num_students, 'succeeded': num_students, 'failed': 0}, result)
hashed_name = self.hashed_name(name, original_file)
for middleware_method in self._view_middleware: response = middleware_method(request, callback, callback_args, callback_kwargs) if response: return response
clf = cls() clf.partial_fit(X2, y2, classes=np.unique(y2)) assert_raises(ValueError, clf.partial_fit, X2, y2, classes=np.arange(42))
channel = sc.server.channels.find(_m['channel'])
BASE_URL = os.environ.get('test_url', 'http://localhost:8031')
self.B = sharedX(numpy.zeros(self.nvis) + B0, name='B', borrow=True)
action_name = ugettext_noop('generating_enrollment_report') task_fn = partial(upload_enrollment_report, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
elif all_indexed_same: from pandas.tools.merge import concat return concat(values)
X_plot = np.linspace(-6, 6, 1000)[:, None] X_src = np.zeros((1, 1))
data = {}
return datetime
import salt.cloud from salt.exceptions import ( SaltCloudConfigError, SaltCloudException, SaltCloudSystemExit, SaltCloudExecutionTimeout, SaltCloudExecutionFailure, SaltCloudPasswordError )
all_lists = np.all([not hasattr(v, "rvs") for v in self.param_distributions.values()]) rnd = check_random_state(self.random_state)
import logging import re import os from salt.ext.six.moves import map
draft_node_list = []
mapper = _KeyMapper(comp_ids, ngroups, self.labels, self.levels) return [mapper.get_key(i) for i in range(ngroups)]
relative_path = 'just_a_test.jpg' absolute_path = base_url + relative_path
result = f.clean('21-12-2010') self.assertEqual(result, date(2010, 12, 21))
CourseEnrollment.unenroll_by_email("jack@fake.edx.org", course_id) self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assert_no_events_were_emitted()
self.generated_operations = {}
vms[profile] = extended
x = np.array([1e-40] * 1000000) logx = np.log(x) assert_almost_equal(np.exp(logsumexp(logx)), x.sum())
date_config = vim.HostDateTimeConfig(ntpConfig=ntp_config)
return {}
other_course = CourseLocator(org='other', course='other', run='other') self._assert_enabled_for_course(other_course, False)
with patch_logger('django.server', 'info'): WSGIRequestHandler(request, '192.168.0.2', server)
self.tree = etree.XML(problem_text)
client = DjangoTestClient() response1 = client.get(path='/shib-login/', data={}, follow=False, **identity) postvars = {'email': u'post_email@stanford.edu',
rng = np.random.RandomState(0)
email_label = _(u"Email")
from __future__ import unicode_literals
from salt.modules.inspectlib.dbhandle import DBHandle from salt.modules.inspectlib.exceptions import (InspectorSnapshotException) import salt.utils from salt.utils import fsutils from salt.utils import reinit_crypto
supports_tablespaces = False
language = request.session.get(LANGUAGE_SESSION_KEY)
MEDIA_ROOT = ''
raise Exception("Impossible arguments to GFK.get_content_type!")
Ensure mykey key exists: boto_kms.key_present: - name: mykey - region: us-east-1 - profile: myprofile
label_bg_color = Attribute('label_bg_color', default=None).parse_from_xml(self.xml) if label_bg_color: to_js['label_bg_color'] = label_bg_color
if data.dtype.kind in ['M', 'm']: data = _sanitize_array(data, index, copy=copy)
if takeable: loc = key else: loc = self.axes[axis].get_loc(key)
e = pd.Series([0, 1, 2, 3.5, 1]) tr, v = [3, 4], [3.5, True] check_replace(tr, v, e)
self.testing_cost = 20 self.testing_course_mode = CourseMode( course_id=self.testing_course.id, mode_slug=CourseMode.HONOR, mode_display_name="testing honor cert", min_price=self.testing_cost ) self.testing_course_mode.save()
TIME_INPUT_FORMATS = [
return bool(os.stat( os.path.join('/etc/init.d', name)).st_mode & stat.S_IXUSR)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from salt.modules import publish import salt.crypt import salt.transport from salt.exceptions import SaltReqTimeoutError
CourseModeFactory.create(mode_slug=mode, course_id=self.course.id, min_price=1)
raise exc
if template not in salt.utils.templates.TEMPLATE_REGISTRY: raise CommandExecutionError( 'Attempted to render file paths with unavailable engine ' '{0}'.format(template) )
from salttesting.unit import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON ensure_in_syspath('../..')
p = Post(title="Django 1.0 is released", posted=datetime.datetime(2008, 9, 4)) p.full_clean()
request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO["username"])
import salt.fileclient import salt.utils.url
X, y, X_offset, y_offset, X_scale = _preprocess_data( X, y, fit_intercept=fit_intercept, normalize=normalize, copy=copy)
needed_holds = [] current_timestamp = gmtime() for hold in snapshots.keys(): if schedule[hold] == 0: continue
provider_details.update(profile_data) profile_data = provider_details
return Fraction(treedic['1 factors'][0] / treedic['2 factors'][0])
geom_transform = void_output(lgdal.OGR_G_Transform, [c_void_p, c_void_p]) geom_transform_to = void_output(lgdal.OGR_G_TransformTo, [c_void_p, c_void_p])
_timed_exams = modulestore().get_items( course_key, qualifiers={ 'category': 'sequential', }, settings={ 'is_time_limited': True, } )
self.section = get_module_for_descriptor( self.effective_user, self.request, self.section, self.field_data_cache, self.course_key, self.position, course=self.course, )
raise
continue
self.assertIn( 'Update not available', self.run_function('softwareupdate.download', ['spongebob']))
out += ['.. autosummary::', ''] out += autosum
self.set_filehandle_limits('unit')
msg = 'Only length-1 decimal markers supported' with tm.assertRaisesRegexp(ValueError, msg): self.read_csv(StringIO(data), decimal='')
AFFILIATE_COOKIE_NAME = 'affiliate_id'
from unit.modules.boto_elasticsearch_domain_test import BotoElasticsearchDomainTestCaseMixin
filename_numpy = '/Users/wesm/tmp/numpy.npz' filename_larry = '/Users/wesm/tmp/archive.hdf5' filename_pandas = '/Users/wesm/tmp/pandas_tmp'
stack.append(_Node(next_child, get_children))
_sample_even_odd(W_list, b_list, new_nsamples, beta, odd=marginalize_odd) _activation_even_odd(W_list, b_list, new_nsamples, beta, odd=not marginalize_odd)
if 'COMMAND' in chunks[1]:
import os import hashlib
_fh.writelines(rules)
password_history_entry = PasswordHistory() password_history_entry.create(user)
__func_alias__ = { 'list_': 'list' }
result += bandheader + band_data_hex
log.warning( 'Minion id {0} is not who it says it is!'.format( load['id'] ) ) return {}
with transaction.atomic(): people = list( Person.objects.all().select_for_update(nowait=nowait) ) people[0].name = 'Fred' people[0].save()
html_theme = 'nature_with_gtoc'
atom = _tables().Int64Col() return IndexCol(np.asarray(values, dtype=np.int64), 'integer', atom, index_name=index_name)
delete_item(category='html', name='test_html')
response = views.container_handler( request=request, usage_key_string=unicode(self.vertical.location) ) self.assertEqual(response.status_code, 200)
if f.remote_field.through is None: sequence_list.append({'table': f.m2m_db_table(), 'column': None})
import fnmatch import logging import time
assert_equal(len(cv), wrapped_old_skf.get_n_splits())
cls.site1 = Site(pk=1, domain='example.com', name='example.com') cls.site1.save()
bands = [] pixeltypes = [] while data: pixeltype, data = chunk(data, 2) pixeltype = unpack('B', pixeltype)[0]
import salt.utils from salt.utils import which as _which from salt.exceptions import CommandNotFoundError, CommandExecutionError
a.update({'a': 1}) self.assertNotEqual(a, b)
s = Series([1], dtype='float32') result = s._convert(datetime=True, coerce=True) assert_series_equal(result, s)
X[0, 0] = 0 X[2, 1] = 0 X[4, 3] = 0 X_lil = sp.lil_matrix(X) X_lil[1, 0] = 0 X[1, 0] = 0
server.ping()
self.unit_page.xblocks[1].open_advanced_tab()
assert_almost_equal(errors, errors3) assert_almost_equal(values, values3)
BULK_EMAIL_DEFAULT_FROM_EMAIL = 'no-reply@example.com'
mat = ma.masked_all((2, 3), dtype=int) frame = DataFrame(mat, columns=['A', 'B', 'C'], index=[1, 2])
EDX_PLATFORM_REVISION = dealer.git.Backend(path=REPO_ROOT).revision
all_answer_ids = problem.get_answer_ids() all_answers = dict((answer_id, real_answers.get(answer_id, "")) for answer_id in all_answer_ids)
self.assertTrue(provider_redirect_url.startswith(TESTSHIB_SSO_URL)) return self.client.post( self.complete_url, content_type='application/x-www-form-urlencoded', data=self.read_data_file('testshib_response.txt'), )
e = rwindow.Expanding(Series([2, 4, 6]), window=2)
from __future__ import absolute_import
self._install_indv_pkg(package, out_file)
self.assertFalse(u.has_usable_password())
"spec", "spec_helpers",
if not self.hyperparameter_length_scale.fixed: length_scale_gradient = \ 4 / self.length_scale**2 * sin_of_arg**2 * K length_scale_gradient = length_scale_gradient[:, :, np.newaxis]
n_samples = 80 n_features = 5 repeat = 10
setattr(builtins, '__salt_system_encoding__', encoding)
from __future__ import unicode_literals
self.generated_certificate.invalidate()
def f(): Categorical.from_codes(["a"], [1, 2])
else: return provider_respond(server, openid_request, server.handleRequest(openid_request), {})
'correct': 'is_correct',
config_course_cohorts(course, is_cohorted=True, discussion_topics=["General", "Feedback"])
if self.total_curr_counts == 0: self.reset() raise StopIteration()
llab, rlab, shape = map(list, zip(* map(fkeys, left_keys, right_keys)))
if event_index is not None: staticSlice = _period_slice(static, -1) movingSlice = _period_slice(moving, event_index)
postgis = False spatialite = False mysql = False oracle = False spatial_version = None
return cache_and_return(Location._from_deprecated_son(parents[0]['_id'], location.course_key.run))
tm.assert_series_equal(pd.to_datetime(s, infer_datetime_format=False), pd.to_datetime(s, infer_datetime_format=True))
if count: failure_string = "Too many pep8 violations. " + violations_count_str failure_string += "\n\nViolations:\n{violations_list}".format(violations_list=violations_list) raise BuildFailure(failure_string)
with self.assertRaises(ValueError): setattr(p, 'restaurant', p)
assert_panel4d_equal(panel4d.ix[:, items, :, :], panel4d.reindex(items=items))
from pandas.compat import range, zip from pandas import compat import itertools
from salttesting import skipIf, TestCase from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
test = isinstance(test_list, tuple) and (not test_list[0]) self.assertTrue(test)
self.children = []
directory = os.path.dirname(os.path.realpath(__file__)) filename = 'generated.pyx' path = os.path.join(directory, filename)
if cal_sstats: norm_phi = np.dot(exp_doc_topic_d, exp_topic_word_d) + EPS suff_stats[:, ids] += np.outer(exp_doc_topic_d, cnts / norm_phi)
from salt.utils.args import KWARG_REGEX
random_state = check_random_state(0)
if numpy.size(imgshp)==2: imgshp = (1,)+imgshp
with self.store.branch_setting(ModuleStoreEnum.Branch.published_only, course_key): assertProblemNameEquals(problem_original_name) assertNumProblems(problem_new_name, 0)
patch_extractor = sp_extract_patches(IR, IC, KR, KC, CH, RasterOrders.row_col_channel, RasterOrders.row_col_channel, subsample, border_mode, flip_patches=True).tocsc()
from __future__ import absolute_import
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course_key))
if name not in nodes: return {} salt.utils.cloud.cache_node(nodes[name], __active_provider_name__, __opts__) return nodes[name]
self.reload_course() new_tab = CourseTabList.get_tab_by_type(self.course.tabs, tab_type) self.assertEqual(new_tab.is_hidden, new_is_hidden_setting)
conn_parameters['key'] = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(50))
def test_ransac_residual_metric(): residual_metric1 = lambda dy: np.sum(np.abs(dy), axis=1) residual_metric2 = lambda dy: np.sum(dy ** 2, axis=1)
from salt.states import keyboard
elif trigger_types[trigger_type] == TASK_TRIGGER_IDLE: trigger.Id = 'OnIdle_ID1'
assert_in('attempts', seq.xml_attributes)
response = self.client.get(reverse("support:certificates")) self.assertContains(response, "userFilter: ''")
if 'emitatstartup' not in config: config['emitatstartup'] = True if 'onchangeonly' not in config: config['onchangeonly'] = False
if isinstance(local_dict, Scope): resolvers += tuple(local_dict.resolvers.maps) self.resolvers = DeepChainMap(*resolvers) self.temps = {}
from salt.utils import schema
assert_equal(lshf._fit_X.shape[0], n_samples + n_samples_partial_fit) assert_equal(len(lshf.original_indices_[0]), n_samples + n_samples_partial_fit) assert_equal(len(lshf.trees_[1]), n_samples + n_samples_partial_fit)
from __future__ import absolute_import
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
err = SearchIndexingError mock_index_dictionary.return_value = err
from __future__ import absolute_import, print_function import json import logging
self.course.html_textbooks = [] self.assertNotIn( {'type': 'html_textbooks'}, list(xmodule_tabs.CourseTabList.iterate_displayable(self.course, inline_collections=False)), )
self.assertTrue(self.user.roles.filter(name="Student", course_id=self.course_key))
from salt.exceptions import CommandExecutionError import salt.utils
actual = grouped_df.pid.transform(len) assert_series_equal(actual, expected)
from __future__ import absolute_import, print_function import time import os import copy import logging
def _install_signal_handlers(self): signal.signal(signal.SIGTERM, self._handle_signals) signal.signal(signal.SIGINT, self._handle_signals)
from __future__ import absolute_import import os import base64 import logging
assert_equal(cv_repr, repr(cv))
with self.assertNumQueries(0): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
if os.path.exists(_DEB_NETWORK_DIR): interface_files += ['{0}/{1}'.format(_DEB_NETWORK_DIR, dir) for dir in os.listdir(_DEB_NETWORK_DIR)]
from __future__ import absolute_import import logging
check(self.bseries, 5)
errors += self.state.verify_high(high) high, req_in_errors = self.state.requisite_in(high) errors += req_in_errors high = self.state.apply_exclude(high)
warnings.extend(check_resolver(pattern))
import os import glob import logging import time
cart = Order.get_cart_for_user(request.user) cart.clear()
print(metrics.classification_report(y_test, y_predicted, target_names=dataset.target_names))
self.assert_student_in_group(new_groups[0], new_user_partition)
old_group = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, self.user_partition) self.assertIn(old_group.id, [0, 1])
if hasattr(self, 'opts'): self.refresh_file_mapping() self.initial_load = False
self._check_params(n_samples)
from salt.modules import daemontools from salt.exceptions import CommandExecutionError
return responses.get(self.status_code, 'Unknown Status Code')
gentoo_service.__grains__ = {} gentoo_service.__salt__ = {} gentoo_service.__context__ = {} gentoo_service.__opts__ = {}
auth_name, oracle_flag = sd['auth_name'] if postgis or (oracle and oracle_flag): self.assertTrue(srs.auth_name.startswith(auth_name))
if other is None: result = not func.__name__ == 'eq'
the_system = test_capa_system() the_system.render_template = mock.Mock() the_system.render_template.return_value = "<div>Input Template Render</div>"
def f(x): return float(len(x))
assert_equal(_top_import_error, None)
return stdout
c1 = b1.centroid c2 = c1.transform(2276, clone=True) Parcel.objects.create(name='P2', city=pcity, center1=c1, center2=c2, border1=b1, border2=b1)
object_list = get_mors_with_properties(service_instance, object_type, property_list=[property_name], container_ref=container_ref)
_subscriptions = __salt__['boto_sns.get_all_subscriptions_by_topic']( name, region=region, key=key, keyid=keyid, profile=profile )
from salttesting.unit import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../')
with self.assertRaises(UnsupportedRevisionError): self.store.get_item(self.fake_location, revision=ModuleStoreEnum.RevisionOption.draft_preferred)
if __opts__['test']: ret['result'] = None ret['comment'] = 'Group {0} set to be added'.format(name) return ret
import salt.ext.six as six import json
copy_or_rename_transcript(new_name, old_name, item, user=request.user)
if not kwargs: cmd += ' '
result = a & Series([]) expected = Series([False, False, False], list('bca')) assert_series_equal(result, expected)
if engine != 'c': if com.is_integer(skiprows): skiprows = lrange(skiprows) skiprows = set() if skiprows is None else set(skiprows)
x = np.atleast_2d(np.linspace(0, 10, 1000)).T
students_already_have_certs = User.objects.filter( ~Q(generatedcertificate__status=CertificateStatuses.unavailable), generatedcertificate__course_id=course_id)
return quote(force_bytes(path).replace(b"\\", b"/"), safe=b"/~!*()'")
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
df = pd.DataFrame([i] * 9 for i in range(16)) df = df.append([[1] + [0] * 8], ignore_index=True)
'django.middleware.locale.LocaleMiddleware',
'an hour from now', '%(count)s hours from now', count
self.assertIn("copyright", json_data)
with self.assertRaises(ctypes.ArgumentError): g.buffer(width, float(quadsegs))
from __future__ import absolute_import import os
problem1_content_before_switch = self.problem_page.problem_content
raised = False try: fmt.theano_expr(theano.tensor.itensor3()) except ValueError: raised = True assert raised
CourseModeFactory.create(mode_slug=CourseMode.NO_ID_PROFESSIONAL_MODE, course_id=self.course.id, min_price=100)
self._create_courses_and_enrollments( (self.TEST_ORG, True), ("org_alias", True) )
node_dict = show_instance(node_data.name, 'action')
if cls.has_professional_mode(modes_dict): return False
if not preview_lang: return
from __future__ import absolute_import
_base_iterator_cls = None
responsetype_cls = responsetypes.registry.get_class_for_tag(response.tag) responder = responsetype_cls(response, inputfields, self.context, self.capa_system, self.capa_module) self.responders[response] = responder
'ENABLE_DEBUG_RUN_PYTHON': False,
__virtualname__ = 'desktop'
if not cls.driver_count(): vcapi.register_all() rcapi.register_all()
lengths.append(len(recs))
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
birch_models = [Birch(threshold=1.7, n_clusters=None), Birch(threshold=1.7, n_clusters=100)] final_step = ['without global clustering', 'with global clustering']
result = self.collection.update( {'_id': location.to_deprecated_son()}, {'$set': update}, multi=False, upsert=allow_not_found,
X, y = make_regression( n_samples=n_samples, n_features=n_features, random_state=0, noise=0.05)
result.fillna(value=0.0)
request = Request.blank('/translation/uk') response = self.item.transcript(request=request, dispatch='translation/uk') self.assertEqual(response.status, '404 Not Found')
del self.async
if drop_first: n_components = n_components + 1
from __future__ import absolute_import
request.session.save()
self.assertTrue(issubclass(df.DateCol.dtype.type, np.datetime64), "DateCol loaded with incorrect type")
start_flow_url = reverse('verify_student_start_flow', args=[unicode(self.course.id)]) self.assertRedirects(response, start_flow_url)
import salt.utils
'openedx.core.djangoapps.site_configuration',
pro.save(using='default') marty.save(using='default') dive.save(using='other') mark.save(using='other')
if not settings.FEATURES.get('ALLOW_WIKI_ROOT_ACCESS', False): raise PermissionDenied()
result = df.iloc[4:8] expected = df.ix[8:14] assert_frame_equal(result, expected)
LOGGING_NULL_HANDLER = None break
coef = 1. / (binomial(k, n_features) * (n_features - k))
CourseEnrollmentFactory(user=other_user, course_id=self.courses[0].id)
pass
html_theme_path = ['themes']
self.course.discussion_blackouts = [[]] self.assertTrue(self.course.forum_posts_allowed)
elif user_groups[partition_id].id in allowed_group_ids: continue
if isinstance(authored_data, LmsFieldData):
import logging import re
def f(x): x = x.ravel()
FEATURES['ENABLE_PAYMENT_FAKE'] = True
if text: wait_for(lambda _: css_text(css_selector, index=index))
if not isinstance(result, np.ndarray): if not isinstance(result, np.ndarray):
new_module_store_setting['default']['OPTIONS']['stores'] = convert_old_stores_into_list( module_store_setting ) module_store_setting = new_module_store_setting
ssh_args.extend([ '-oPasswordAuthentication=no', '-oChallengeResponseAuthentication=no', '-oPubkeyAuthentication=yes', '-oIdentitiesOnly=yes', '-oKbdInteractiveAuthentication=no', '-oIdentityFile={0}'.format(kwargs['key_filename']) ])
attrs['freq'] = 'infer'
meta = _ensure_decoded(self.meta)
self.assertEqual(len(all_modes[other_course_key]), 1) self.assertEqual(all_modes[other_course_key][0], CourseMode.DEFAULT_MODE)
EmptyPromise( lambda: self.q(css=create_ccx_button).present, "Create a new Custom Course for edX" ).fulfill() self.q(css=create_ccx_button).click()
self.assertEqual([], os.listdir(TMP_JID_DIR))
distances[:] = mindist
self.field_data = inheriting_field_data(kvs=DictKeyValueStore())
self.assertIn("Add field silly_date to sillymodel", out.getvalue())
x = np.array([0, 1, 1, 0, 0]) y = np.array([1, 0, 0, 0, 1])
filtered_list = list(cls.FILTERED_LIST)
base_str = '2014-07-01 11:00:00+02:00' base_dt = datetime.datetime(2014, 7, 1, 9) base_expected = 1404205200000000000
self.assertEqual(len(actual), 2) self.assertEqual(actual, expected)
y = zca_dataset.mapback(zca_dataset.X) assert_allclose(x[start:stop], y)
try:
movie_reviews_data_folder = sys.argv[1] dataset = load_files(movie_reviews_data_folder, shuffle=False) print("n_samples: %d" % len(dataset.data))
kwargs = {} roles = [role.name for role in user.role_entities]
self.assertTrue(filecmp.cmp(path_test + '.bak', path_in))
np.random.seed(0) n_samples = 2000 time = np.linspace(0, 8, n_samples)
if type(indicator) == str: indicator = [indicator]
self._dict = {}
continue
for op in ['max', 'min']: for klass in [Index, Series]:
'sign_pub_messages': bool,
child_position = None if is_entrance_exams_enabled(): if category == 'chapter' and is_entrance_exam: fields['is_entrance_exam'] = is_entrance_exam
continue
exc_info_on_loglevel=logging.DEBUG
X = Xboston y = yboston
mixed = Series(['hello', np.NaN], index=[0, 1]) self.assertEqual(mixed.dtype, np.object_) self.assertIs(mixed[1], np.NaN)
self._smoothed_batch_duration = 0
ranks0 = self.frame.rank(na_option='bottom', ascending=False) ranks1 = self.frame.rank(1, na_option='bottom', ascending=False)
self._handle.create_array(self.group, key, value.asi8)
groups_single_key = test.groupby("cat") res = groups_single_key.agg('mean')
cret = mod_run_check( run_check_cmd_kwargs, onlyif, unless ) if isinstance(cret, dict): ret.update(cret) return ret
apache.__grains__ = {} apache.__salt__ = {} apache.__context__ = {}
self.assertEqual(iptables.build_rule(**{'if': 'not eth0'}), '! -i eth0')
import salt.utils
tol = 2 if oracle else 5
rng = np.random.RandomState(0) x = rng.randint(10, size=(10, 5)) weights = np.ones(x.shape)
result = VerificationStatus.objects.filter(checkpoint=self.first_checkpoint)[0] self.assertEqual(result.status, status) self.assertEqual(result.user, self.user)
if not np.iterable(bins): if lib.isscalar(bins) and bins < 1: raise ValueError("`bins` should be a positive integer.")
link = utils.get_lms_link_for_item(location, True) self.assertEquals( link, "//preview.localhost/courses/mitX/101/test/jump_to/i4x://mitX/101/vertical/contacting_us" )
self.assertFalse(transaction.get_rollback()) transaction.set_rollback(True)
member = models.Member.objects.create(name='Bob', birthdate=datetime(1984, 5, 15), gender='M')
PR_REMOTE_NAME = os.environ.get("PR_REMOTE_NAME", "upstream")
__virtualname__ = 'buildout' log = logging.getLogger(__name__)
X = iris.data[45:, :] y = iris.target[45:] solvers = ("lbfgs", "newton-cg") class_weight_dict = _compute_class_weight_dictionary(y)
from __future__ import absolute_import, with_statement import os import time import signal import datetime import itertools import threading import logging import errno import random
Z = Z.reshape(xx.shape) plt.contourf(xx, yy, Z, cmap=plt.cm.Paired) plt.axis('off')
response = None log.exception("Outcome Service: Error when sending result.")
if not is_correct and not hasher_changed and must_update: hasher.harden_runtime(password, encoded)
from salt.states import nftables
import fnmatch import glob import logging
self.assertEqual( list(iter_format_modules('de', ['i18n.other.locale', 'i18n.other2.locale'])), [test_mod, test_mod2, default_mod])
module.system.DEBUG = True
kl_divergence = 2.0 * np.dot(P, np.log(P / Q))
return comdat['stderr']
lookup_tag = customrender.registry.get_class_for_tag
if iface_name not in adapters: adapters[iface_name] = salt.utils.odict.OrderedDict()
import os import time import calendar import logging import math import binascii import salt.utils from salt._compat import string_types from salt.ext.six.moves import range as _range from datetime import datetime
return output_scores
Y = rng.random_sample((3, 4)) assert_raises(ValueError, paired_distances, X, Y)
inner_varname = Word(alphas + "_", alphanums + "_") varname = Group(inner_varname)("variable") varname.setParseAction(self.variable_parse_action)
expected = s1.apply( lambda x: Timedelta(np.timedelta64(m, unit)) / x) result = np.timedelta64(m, unit) / s1
import json import logging
__virtualname__ = 'service'
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
VISIBLE_CONTENT = [ ['class=&#34;problems-wrapper'], ['Some HTML for group 1'] ]
assert_warns(RuntimeWarning, mb_k_means.fit, X)
certificate.click_delete_certificate_button() self.certificates_page.click_confirmation_prompt_primary_button()
recipients_info[email] += 1 to_list.pop()
user_id = entry.requester.id task_id = entry.task_id
root_block = block_structure.get_xblock(block_structure.root_block_usage_key) user_partitions = getattr(root_block, 'user_partitions', []) or [] block_structure.set_transformer_data(cls, 'user_partitions', user_partitions)
self.assertEqual(certificate_grades.count('0.0'), 8) self.assertEqual(certificate_grades.count(default_grade), 2)
if existing['code'] == 200:
for i in range(current_page, 0, -1): _check_page() if current_page > 1: page.click_on_page(current_page - 1) current_page -= 1
for alias, mirror_alias in mirrored_aliases.items(): connections[alias].creation.set_as_test_mirror( connections[mirror_alias].settings_dict)
from __future__ import division
opennebula.__active_provider_name__ = '' opennebula.__opts__ = {} VM_NAME = 'my-vm'
if tornado.util.errno_from_exception(e) == errno.ECONNABORTED: continue raise
lar1 = la.larry(arr1, [idx1, idx2]) lar2 = la.larry(arr2, [idx1[::-1], idx2[::-1]])
dirname = os.path.normpath(os.path.dirname(path))
if generic_view.uses_datetime_field: if settings.USE_TZ: result = timezone.localtime(result) result = result.date()
user = User.objects.select_related('profile').get(username=username)
from __future__ import print_function from __future__ import absolute_import import glob import logging import os import re import sqlite3 as lite from salt.exceptions import SaltInvocationError
lookup_kwargs = self._make_single_date_lookup(date) qs = qs.filter(**lookup_kwargs)
self.assertEqual(formset.is_valid(), False) self.assertEqual(Poem.objects.count(), 0)
if N == 0: return
if is_whitelisted: LOGGER.info( u"Student %s is whitelisted in '%s'", student.id, unicode(course_id) ) passing = True else: passing = False
import logging
X = self._validate_for_predict(X) X = self._compute_kernel(X)
self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS + PayAndVerifyView.VERIFICATION_STEPS, PayAndVerifyView.MAKE_PAYMENT_STEP, )
with tm.assertRaisesRegexp(ValueError, 'not valid'): df = DataFrame(index=l0) df = getattr(df, fn)('US/Pacific', level=1)
if ((filename_match(filename, filepatterns) and not self.excluded(filename, root))): runner(os.path.join(root, filename))
for containers in six.itervalues(docker_hosts): host = containers.pop('host') host_ips = []
self.assertRaises(ValueError, df.reindex, index=list(range(len(df))))
return opts
from __future__ import absolute_import
selected_numtolerance_inputs = [ key for key in a_dict if key.partition("_numtolerance_input_")[0] + "bc" in selected_choices ]
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
result = f.clean('21.12.10') self.assertEqual(result, date(2010, 12, 21))
assert_raises(ValueError, cv.get_feature_names)
continue
df3 = pd.concat([df2.A.to_frame(), df2.B.to_frame()], axis=1) assert_frame_equal(df2, df3)
labels, uniques = algos.factorize(inds, sort=True)
return False
import salt.utils from salt.exceptions import CommandExecutionError
X = self._validate_X_predict(X)
val = int(cell_contents) if val == cell_contents: cell_contents = val
cached_pkg = __salt__['cp.is_cached'](installer, saltenv) if not cached_pkg: cached_pkg = __salt__['cp.cache_file'](installer, saltenv)
assert_equal(est.estimators_[0, 0].max_depth, 1) for i in range(1, 11): assert_equal(est.estimators_[-i, 0].max_depth, 2)
return
return (NullSpace(), '')
doc = _generate_doc(ret)
test_success = win_mod_reg.delete_value( 'HKEY_LOCAL_MACHINE', subkey, vname ) self.assertTrue(test_success)
from salt.states import modjk_worker
middleware.process_request(request) request.session['hello'] = 'world'
def __init__(self, opts, **kwargs): pass
self.coach = coach = AdminFactory.create(password="test") self.client.login(username=coach.username, password="test")
self.assertEqual(context[context_key], 'test latin1 Ó é ñ'.decode('utf8'))
targets = email_obj.targets.all() global_email_context = _get_course_email_context(course)
if (self.nobs == 0) and (nrows is None): self._can_read_value_labels = True self._data_read = True return DataFrame(columns=self.varlist)
vmconfig['changed']['set_{0}'.format(collection)][prop] = vmconfig['state'][collection][prop]
CourseModeFactory.create( course_id=self.course_key, mode_display_name="Honor Not Expired", mode_slug="honor_not_expired", expiration_datetime=future )
syslog.closelog()
from __future__ import absolute_import
layer_to_chains = model.sampling_procedure.sample( layer_to_chains, self.theano_rng, layer_to_clamp=layer_to_clamp, num_steps=1 )
def test_read_excel_blank(self): actual = self.get_exceldf('blank', 'Sheet1') tm.assert_frame_equal(actual, DataFrame())
itemsize = max_len_string_array(com._ensure_object(column.values)) return chr(max(itemsize, 1))
dselect_pkg_avail = _get_pkg_ds_avail()
if len(c1) == 2: tset = (5, 23) else: tset = (5, 23, 8) cs[i] = tset
def is_ok(s): return (issubclass(s.dtype.type, (np.integer, np.floating)) and s.dtype != 'uint8')
session_user_id = SafeSessionMiddleware.get_user_id_from_session(request)
from __future__ import unicode_literals
log = logging.getLogger(__name__)
if not _np_version_under1p9: raise nose.SkipTest("Numpy version is greater than 1.9")
self.assertTrue(has_expanded_repr(df)) self.assertTrue(has_vertically_truncated_repr(df))
import integration import salt.utils
self.skipTest('We\'ve hit the max open files setting')
pass
for mode_slug in course_modes: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode_slug, mode_display_name=mode_slug, )
module.reset_problem({})
store = modulestore() with store.default_store('split'): destination_course_key = store.make_course_key(org, number, run)
class PartialArticleFormWithSlug(forms.ModelForm): class Meta: model = Article fields = ('headline', 'slug', 'pub_date')
import logging
try: if register_to: before_import_registry = copy.copy(register_to._registry)
return status
third = e.count(':')
est = TreeEstimator() assert_raises(NotFittedError, est.predict, T)
return {}
from jinja2 import Environment try: import ldap import ldap.modlist import ldap.filter HAS_LDAP = True except ImportError: HAS_LDAP = False
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
lc_block = self._refresh_children(lc_block) check()
MODULESTORE_FIELD_OVERRIDE_PROVIDERS = ()
self.assertRaises(ValueError, self.read_csv, StringIO(data), names=['a', 'b'], usecols=[1], header=None)
if not (settings.FEATURES.get("ENABLE_CREDIT_ELIGIBILITY", False) and is_credit_course(course_key)): return None
milestones_api.add_course_milestone(prerequisite_course_key, 'fulfills', milestone)
ret['changes']['summary'] = _summary(result['stdout']) ret['result'] = True if not __opts__['test'] else None
user = auth.authenticate(remote_user=username) if user: request.user = user auth.login(request, user)
self.certificates_section.fill_certificate_invalidation_user_name_field(invalid_user) self.certificates_section.click_invalidate_certificate_button() self.certificates_section.wait_for_ajax()
for code in sorted_codes: print(code + '. ' + codebook[code])
def long_range(start, end): while start < end: yield start start += 1
s = Series(np.arange(5), index=np.arange(5) * 2.5, dtype=np.int64)
if name in list_tasks(location):
unicode_text = "好 各位同学".decode('utf-8') self.assertIn(unicode_text, self.video.captions_text)
time_format = _get_date_time_format(time) dt_obj = datetime.strptime(time, time_format)
self.assertFalse(self.post.called) self.assertTrue(logger.error.called)
mask = com.notnull(self.values).all(axis=0) selector = mask.ravel()
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
from __future__ import absolute_import import logging
return np.array_equal(left, right)
if isinstance(value, Iterator): value = list(value) self.check_related_objects(field, value, opts)
sys.stdout.write('Invalid options passed. Please try -h for '
if link_in_col(first, field_name, cl): table_tag = 'th' if first else 'td' first = False
pan = web.get_data_yahoo('XOM', '2013-01-01', '2013-12-31', interval='d') self.assertEqual(len(pan), 252)
btrfs.__grains__ = {} btrfs.__salt__ = {} btrfs.__context__ = {}
course_key_string = request.query_params.get('course_id', None) if not course_key_string: raise ValidationError('course_id is required.')
n_samples_sizes = [5, 10, 20] n_features = 3 rng = np.random.RandomState(42)
self.assertEqual(cart.status, 'purchased')
from salt.states import influxdb_user
idx = TimedeltaIndex([1e14, 'NaT', pd.NaT, np.NaN])
offset = klass._from_name(*split[1:])
self.__class__ = GEO_CLASSES[self.geom_type.num]
self.assertNotContains(response, "How it Works") self.assertNotContains(response, "Find courses") self.assertNotContains(response, "Schools & Partners")
self.certificates_section.wait_for_certificate_exceptions_section()
__virtualname__ = 'lvm'
assert isinstance(model.hidden_layers[-1], Softmax)
world.scenario_dict['COURSE'] = world.CourseFactory.create( org='edx', number=course, display_name='Test Course', metadata=metadata, grading_policy=grading_policy, )
centers = [[1, 1], [-1, -1], [1, -1]] X, labels_true = make_blobs(n_samples=750, centers=centers, cluster_std=0.4, random_state=0)
EX_GENERIC = 1
get_version = { 'Linux': linux_cpuinfo, 'FreeBSD': freebsd_cpuinfo, }
def handle_error():
ret = self.run_function( 'git.merge', [self.repo], rev=self.branches[1] ) self.assertTrue('Fast-forward' in ret.splitlines())
df = DataFrame([1, 2, 3], index=date_range('1/1/2013', '1/3/2013')) result = self.encode_decode(df) assert_frame_equal(result, df)
default_view = cache_page(3)(hello_world_view) default_with_prefix_view = cache_page(3, key_prefix='prefix1')(hello_world_view)
class MyModel2(models.Model): objects = MyManager()
idx = idx[0:40].union(idx[45:99]) df2 = DataFrame(np.random.randn(len(idx), 3), index=idx) _check_plot_works(df2.plot)
index_values = self.df.index if isinstance(self.df.index, PeriodIndex): index_values = self.df.index.to_timestamp()
if not g: raise GDALException('Cannot create OGR Geometry from input: %s' % str(geom_input)) self.ptr = g
with self.assertNumQueries(1): all_deadlines = VerificationDeadline.deadlines_for_courses(course_keys) self.assertEqual(all_deadlines, {})
original_item = self.get_item_from_modulestore(source_usage_key) duplicated_item = self.get_item_from_modulestore(duplicate_usage_key)
os.chmod(keyfile, stat.S_IRUSR | stat.S_IWUSR)
pass
'ADDITIONAL_OPTIONS': { 'trashcan': { 'bucket': 'trash_fs' } }
if not validate_trust_root(openid_request): return default_render_failure(request, "Invalid OpenID trust root")
decrypt = salt.loader.render( self.opts, {}).get(self._pillar_enc)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call ensure_in_syspath('../../')
goals_label = _(u"Tell us why you're interested in {platform_name}").format( platform_name=settings.PLATFORM_NAME )
h_date1 = Period(freq='H', year=2007, month=1, day=1, hour=0) h_date2 = Period(freq='2H', year=2007, month=1, day=1, hour=0)
rel_opts = self.remote_field.model._meta rel_is_hidden = self.remote_field.is_hidden()
comb = self.frame.combineAdd(self.frame) assert_frame_equal(comb, self.frame * 2)
self.go_to_tab_and_assert_problem(1, self.problem1_name) problem1_content_after_coming_back = self.problem_page.problem_content self.assertEqual(problem1_content_before_switch, problem1_content_after_coming_back)
response = self.client.get(show_url) for msg in data['messages']: self.assertNotContains(response, msg)
activation_key = create_account(self.USERNAME, self.PASSWORD, self.EMAIL) user = User.objects.get(username=self.USERNAME)
serializers._serializers = {}
yield current.node visited.add(current.node) stack.pop()
exc_info_on_loglevel=logging.DEBUG
from salt.exceptions import SaltInvocationError import salt.utils
if isinstance(prefix_sep, compat.string_types): prefix_sep = cycle([prefix_sep]) elif isinstance(prefix_sep, dict): prefix_sep = [prefix_sep[col] for col in columns_to_encode]
book = None curr_sheet = None path = None
_skip_if_no_xlrd()
for parent in self.model.mro()[1:]: if hasattr(parent, '_meta'): default_manager_name = parent._meta.default_manager_name break
helper(not_html_encoded, ensure_ascii=True) helper(not_html_encoded, ensure_ascii=False)
assert_almost_equal(s[:k], sap, decimal=3)
expected = Panel({"One": df}) check_drop('Two', 0, ['items'], expected)
if service.key == service_name: service_key = service.key elif service_name == 'ssh' or service_name == 'SSH': if service.key == 'TSM-SSH': service_key = 'TSM-SSH'
for memmap in (self.X, self.y): memmap.flush() memmap.setflags(write=False)
proxy = False mongo_db = connect_to_mongodb( db, host, port=port, tz_aware=tz_aware, user=user, password=password, proxy=proxy, **kwargs )
self.assertIsInstance(form.cleaned_data['multi_choice_optional'], models.query.QuerySet) self.assertIsInstance(form.cleaned_data['multi_choice'], models.query.QuerySet)
with check_exact_number_of_calls(store, '_get_cached_metadata_inheritance_tree', 1):
latex += render_frac(numerator, denominator) + r"\cdot "
import logging
grid_search.score(X, y) grid_search.predict_proba(X) grid_search.decision_function(X) grid_search.transform(X)
riak.__salt__ = {}
header_callback('HTTP/1.0 {0} MESSAGE'.format(result.status_code)) streaming_callback(result.content) return { 'handle': result, }
self.store.delete_item(component.location, self.user_id) vertical = self.store.get_item(vertical.location) self.assertTrue(self._has_changes(vertical.location))
from salt.states import win_servermanager
if register_to: register_to._registry = before_import_registry
indices = []
class MyWidget4(TextInput): class Media: css = {'all': ('/path/to/css1', '/path/to/css1')} js = ('/path/to/js1', '/path/to/js1')
try: return getattr(self, '_%s_cache' % related_name) except AttributeError: pass
response = self.client.get(self.url) self.assertFalse(self.email_modal_link in response.content)
friends = models.ManyToManyField('self', through="Relationship")
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
frame = self.frame.copy() expected = self.frame.copy()
substring = [ "--with-xunitmp --xunitmp-file={}".format(self.xunit_report), "--processes={}".format(self.num_processes), "--no-color --process-timeout=1200" ]
assert_almost_equal(result._y.values.flat, [1, 4, 5], check_dtype=False)
if not self.has_course(source_course_id): raise ItemNotFoundError("Cannot find a course at {0}. Aborting".format(source_course_id))
__func_alias__ = { 'set_': 'set' }
f = function([X], output, mode="DEBUG_MODE") f(np.zeros((1, 1)).astype(X.dtype))
#html_file_suffix = None
result = idx.delete(5)
if os.path.exists(self.work_path): os.unlink(self.work_path)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
visibility_editor = self.edit_component_visibility(component) for label in labels: visibility_editor.select_option(label, save=False) visibility_editor.save()
link = self._get_link(cobj) self._link_cache[full_name] = link
atom = _tables().Atom.from_dtype(value.dtype)
from __future__ import absolute_import import json import hashlib import base64 import time from subprocess import Popen, PIPE
self.assertEqual( self.run_function('xattr.delete', [NO_FILE, 'spongebob']), 'ERROR: File not found: {0}'.format(NO_FILE))
url(r'^lang_pref/session_language', 'lang_pref.views.update_session_language', name='session_language'),
with tm.assertRaisesRegexp( IndexError, 'single positional indexer is out-of-bounds'): s.iloc[30] self.assertRaises(IndexError, lambda: s.iloc[-30])
problem = self.build_problem(options=["hasnot", "hasn't", "has'nt"], correct_option="hasn't")
STUDENT_FILEUPLOAD_MAX_SIZE = ENV_TOKENS.get("STUDENT_FILEUPLOAD_MAX_SIZE", STUDENT_FILEUPLOAD_MAX_SIZE)
frame.ix[:, 1:3] = 4. expected.values[:, 1:3] = 4. assert_frame_equal(frame, expected)
set_has_profile_image(username, False)
effective_diff = np.sum((new_centers - old_centers) ** 2) assert_almost_equal(incremental_diff, effective_diff)
result[:] = 0 self.assertTrue((s[1:3] == 0).all())
b01c_shape = [result.shape[0], space.shape[0], space.shape[1], space.num_channels] result = result.flatten() result = tensor.reshape(result, newshape=b01c_shape, ndim=4)
responsibilities = np.zeros((X.shape[0], self.n_components))
from __future__ import unicode_literals
assert_false(X_sparse_unsorted.has_sorted_indices) assert_false(X_test_unsorted.has_sorted_indices)
with connection.schema_editor() as editor: operation.database_backwards("test_runsql", editor, new_state, project_state) self.assertTableNotExists("i_love_ponies")
a = Article.objects.get(pk=self.a.id) b = Article.objects.get(pk=self.a.id) self.assertEqual(a, b)
X = np.array([[0, 1], [1.01, 1.], [2, 0]])
from salttesting.helpers import ensure_in_syspath, expensiveTest
import salt.loader
parent_ids.sort(key=lambda parent: (parent.type, parent.id)) return BlockUsageLocator.make_relative( locator, block_type=parent_ids[0].type, block_id=parent_ids[0].id, )
response = self.client.get( reverse('course_modes_choose', args=[unicode(self.course.id)]), follow=False, )
add_info = self.run_function('user.info', [ADD_USER]) if add_info: self.run_function('user.delete', [ADD_USER])
import salt.utils import salt.modules.cmdmod import salt.utils.decorators as decorators from salt.utils.odict import OrderedDict
many_days = datetime.timedelta(days=60)
from __future__ import unicode_literals
ds = DataSource(source.ds)
if not os.path.isdir(self.git_repo_dir / 'edx4edx'): os.mkdir(self.git_repo_dir / 'edx4edx')
Friendship.objects.create( from_friend_id=self.jane.id, to_friend_id=self.george.id, to_friend_country_id=self.jane.person_country_id, from_friend_country_id=self.george.person_country_id)
if months: self.months = months else: self.months = MONTHS
if 'root' not in repo_conf: repo_conf['root'] = ''
return parse(out)
from __future__ import unicode_literals
return False
assert self.match_social_auth(social_auth) return social_auth.uid
run_once = True
self.join(other2, main)
self.assertTrue(isinstance(df.set_index(df.index).index, MultiIndex))
recons = consolidated.consolidate() self.assertIsNot(recons, consolidated) assert_frame_equal(recons, consolidated)
if not start(name, vmid, call='action'): log.error('Node {0} ({1}) failed to start!'.format(name, vmid)) raise SaltCloudExecutionFailure
if not isinstance(r, numbers.Number) or \ r < 0 or \ math.isnan(r) or \ math.isinf(r): return False
self.assertTrue(self.video.is_button_shown('transcript_button')) self._verify_caption_text('Welcome to edX.')
self.assertEqual('/%257Eme/places/1/', reverse('places', args=[1]))
url += '?auto' try: response = _urlopen(url, timeout=timeout).read().splitlines() except URLError: return 'error'
self.addCleanup(YouTubeStubConfig.reset)
X, y = make_blobs() branching_factor = 9
df["bb"]
course_id = self.course.id self.assertRaises(ValueError, update_course_structure, course_id)
try: import keyring import keyring.backend
X = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1]]
STATUS = Choices('created', 'ready', 'submitted', 'must_retry', 'approved', 'denied') user = models.ForeignKey(User, db_index=True)
exc_info_on_loglevel=logging.DEBUG
lib_names = ['gdal111', 'gdal110', 'gdal19', 'gdal18', 'gdal17']
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
THIRD_PARTY_AUTH_OLD_CONFIG = AUTH_TOKENS.get('THIRD_PARTY_AUTH', None)
import fnmatch import logging import os
from salt.exceptions import CommandExecutionError from salt.modules import dockerng as dockerng_mod from salt.states import dockerng as dockerng_state
b = BrokenUnicodeMethod.objects.create(name="Jerry") self.assertEqual(repr(b), "<BrokenUnicodeMethod: [Bad Unicode data]>")
PER_STUDENT_ANONYMIZED_DESCRIPTORS = set( class_ for (name, class_) in XModuleDescriptor.load_classes() if not issubclass(class_, PER_COURSE_ANONYMIZED_DESCRIPTORS) )
import integration
'MILESTONES_APP': False,
if object_domain is None: try: object_domain = Site.objects.get_current(request).domain except Site.DoesNotExist: pass
problem = self.build_problem(answer=".*tre+", regexp=True) self.assert_grade(problem, "There is a tree", "correct")
bio.write(struct.pack(byteorder + 'i', self.len))
TestCase._enter_atomics = enter_atomics_wrapper(TestCase._enter_atomics) TestCase._rollback_atomics = rollback_atomics_wrapper(TestCase._rollback_atomics)
if not os.access(cwd, os.R_OK): cwd = '/' if salt.utils.is_windows(): cwd = os.tempnam()[:3]
history = HistoricalRecords()
if entrance_exam_minimum_score_pct is None: entrance_exam_minimum_score_pct = _get_default_entrance_exam_minimum_pct()
pnt = Point(0, 0) self.assertEqual(0.0, pnt.length)
certs_api.set_cert_generation_enabled(self.COURSE_KEY, False) self._assert_enabled_for_course(self.COURSE_KEY, False)
completed = True
log.error('Pillar data could not be refreshed. ' 'One or more masters may be down!')
config_course_cohorts(course, is_cohorted=False, discussion_topics=["General", "Feedback"])
n_samples = 100 n_features = 500 rank = 5 k = 10
qs = RasterModel.objects.filter(rastprojected__dwithin=(rast, D(km=1))) self.assertEqual(qs.count(), 1)
def _mean_shift_single_seed(my_mean, X, nbrs, max_iter): bandwidth = nbrs.get_params()['radius']
import salt.utils.cloud import salt.config as config from salt.exceptions import SaltCloudSystemExit
with self.store.branch_setting(ModuleStoreEnum.Branch.published_only, dest_id): self.recursive_build(source_courselike, courselike, courselike_key, dest_id)
if len(self.args) <= 1: self.print_help() self.exit(salt.defaults.exitcodes.EX_USAGE)
bkdir = os.path.join(bkroot, parent_dir[1:])
ext = kwargs.pop('ext', 'shp') self.ds = get_ds_file(name, ext) super(TestDS, self).__init__(**kwargs)
if len(violation_list_for_line) == 4: num_violations_report += 1
template = key.lower() if '.' not in template: template = "%s.%s" % (template, settings.STATIC_TEMPLATE_VIEW_DEFAULT_FILE_EXTENSION)
caches['default'] response = default_view(request, '11') self.assertEqual(response.content, b'Hello World 1')
user=user, course_id=course.location.course_key, status=CertificateStatuses.downloadable
'organizations',
output = f(np.transpose(self.image, map_to_another_axes)) output_def = np.array(f_def(self.image)) output = np.transpose(output, map_to_default)
exc_info_on_loglevel=logging.DEBUG
CourseEnrollment.unenroll(self.student, self.EXISTED_COURSE_KEY_2)
from __future__ import absolute_import
nbrs = NearestNeighbors(n_neighbors=1).fit(X) dist, ind = nbrs.kneighbors(X, return_distance=True)
try: from .tools import websockets from . import event_processor
from salt.states import tomcat
continue
from __future__ import absolute_import import datetime import os import re import copy
if __opts__['test'] is True:
numpy_f = lambda: numpy_roundtrip(filename_numpy, arr, arr) numpy_time = timeit(numpy_f, iterations) / iterations
if start is not None and start.tz is None: start = start.tz_localize(tz, ambiguous=False)
clf = QuadraticDiscriminantAnalysis(store_covariances=True).fit(X6, y6) assert_true(hasattr(clf, 'covariances_'))
import salt.utils.sdb
self.assertEqual(self.cart.total_cost, self.get_discount(self.cost))
self.add_credit_course() CourseFactory.create(org='edX', number='DemoX', display_name='Demo_Course')
flops = kerns[1] * kerns[2] * 2 #nb flops by output image flops *= out[1] * out[2] flops *= images[0] * kerns[3] * images[3] return flops
assert_raises( AssertionError, monitor.update_channels, 0 )
self.assertRaises(ValueError, DatetimeIndex, ['1400-01-01']) self.assertRaises(ValueError, DatetimeIndex, [datetime(1400, 1, 1)])
default_username = get_default_username() try:
from __future__ import absolute_import
AUDIT_LOG.info("Redemption of a invalid RegistrationCode %s", registration_code) limiter.tick_bad_request_counter(request) raise Http404()
exc_info_on_loglevel=logging.DEBUG
large_width = models.IntegerField(default=750) large_height = models.IntegerField(default=400)
if field_name == 'children': continue
iris = datasets.load_iris()
self.assertTrue(has_expanded_repr(df))
try: import git import gitdb HAS_GITPYTHON = True except ImportError: HAS_GITPYTHON = False
window_height = window_width * ((num_rows * 1.8) / num_columns) figure, all_axes = pyplot.subplots(num_rows, num_columns, squeeze=False, figsize=(window_width, window_height))
destroy(vm_['name'])
BOK_CHOY_STUB_DIR = REPO_ROOT / "common" / "djangoapps" / "terrain"
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
import re
result = df.sort_values(by=['grade', 'id']) expected = df.iloc[[2, 1, 5, 4, 3, 0]] tm.assert_frame_equal(result, expected)
self._check_stat_op('sum', np.sum, frame=self.mixed_float.astype('float32'), has_numeric_only=True, check_dtype=False, check_less_precise=True)
import salt.utils.jid
gs.fit(X, y)
import fnmatch import logging
from salttesting.helpers import ensure_in_syspath, expensiveTest
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000
sigma_1 = 1 sigma_2 = 10 corr = 0.5 cov = np.array([ [sigma_1**2, corr * sigma_1 * sigma_2], [corr * sigma_1 * sigma_2, sigma_2**2] ])
email_placeholder = _(u"username@domain.com")
pillar.client.get_state = MagicMock( return_value={ 'dest': '/path/to/pillar/files/foo.sls', 'source': 'salt://foo.sls' } )
course = CourseFactory.create() create_account(self.USERNAME, self.PASSWORD, self.EMAIL)
return super(DecodingStringIO, self).write(data.decode('utf8', 'replace'))
provider_url = reverse('openid-provider-xrds') factory = RequestFactory() request = factory.request() abs_provider_url = request.build_absolute_uri(location=provider_url)
email_params = get_email_params(course, auto_enroll=True, course_key=ccx_id, display_name=ccx.display_name) enroll_email( course_id=ccx_id, student_email=request.user.email, auto_enroll=True, email_students=True, email_params=email_params, )
from salt._compat import subprocess
error_msg = _("An error occurred while deleting the score.") return HttpResponse(error_msg, status=500)
import msgpack
shutil.copyfile(path_in, path_test)
from salt.modules import virtualenv_mod from salt.exceptions import CommandExecutionError
import integration import salt.utils
if ( settings.FEATURES.get('AUTH_USE_SHIB') and course.enrollment_domain and course.enrollment_domain.startswith(SHIBBOLETH_DOMAIN_PREFIX) ): return redirect_with_get('shib-login', request.GET)
arr = Index([1, 2, 3, 4], dtype=object) tm.assertIsInstance(arr, Index)
dma1 = pandas.DataFrame(arr1, idx1, idx2) dma2 = pandas.DataFrame(arr2, idx1[::-1], idx2[::-1])
from __future__ import absolute_import
p = subprocess.Popen([c] + args, cwd=cwd, stdout=subprocess.PIPE, stderr=(subprocess.PIPE if hide_stderr else None)) break
df.groupby(level='three')
if num_violations > violations_limit > -1: raise BuildFailure( "JSHint Failed. Too many violations ({count}).\nThe limit is {violations_limit}.".format( count=num_violations, violations_limit=violations_limit ) )
if existing['code'] == 200:
path = os.path.join(curpath(), 'cut_data.csv')
def f(): df.loc[100.0, :] = df.ix[0]
self.assertEqual( other_cmap.get_overall_message(), self.cmap.get_overall_message() )
repofile = '' for repo in repos: if repo == name: repofile = repos[repo]['file']
__func_alias__ = { 'reload_': 'reload' }
offset = self._offset() offset2 = self._offset() offset2.normalize = True self.assertEqual(offset, offset2)
check_idx(Float64Index([1.0, 2.0, 3.0, 4.0]))
self.assertTrue(has_access(self.beta_tester, 'load', self.content, self.course.id))
from salt.modules import service import os
def test_course_authorized_feature_off(self): BulkEmailFlag.objects.create(enabled=False, require_course_email_auth=True) cauth = CourseAuthorization(course_id=self.course.id, email_enabled=True) cauth.save()
def is_int(v): return v is None or is_integer(v)
from __future__ import unicode_literals
pro = Book.objects.using('default').get(title='Pro Django')
for student in students[3:]: self.assertIsNone( GeneratedCertificate.certificate_for_student(student, self.course.id) )
lresult = last.value + (offset.nanos - loffset)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../')
if type(field_type) is tuple: field_type, new_params = field_type field_params.update(new_params)
result = self.ymd.unstack(0).stack(-2) expected = self.ymd.unstack(0).stack(0)
if self.required: raise ValidationError(self.error_messages['required'], code='required')
test_view = views.CustomSingleObjectView() test_view.context_object_name = 'pony' context = test_view.get_context_data() self.assertEqual(context['pony'], test_view.object)
self.assertEqual(sanitize_separators('10.10'), '10.10')
for config_key in ('log_file', 'key_logfile'): if urlparse(opts.get(config_key, '')).scheme == '': prepend_root_dirs.append(config_key)
exclude = ('dashboard_tracking_code',)
response = self._load_dashboard() self.assertContains(response, "credit-request-rejected-msg")
with patch_edxnotes_api_settings("http://example.com"): self.assertEqual("http://example.com/some_path/", get_endpoint_function("/some_path"))
import integration
from __future__ import absolute_import
self.assert_response_with_delete_cookie()
shutil.rmtree(cachedir, ignore_errors=True)
response = self.client.get(reverse('admin:admin_views_referencedbyparent_changelist'), {TO_FIELD_VAR: 'name'}) self.assertEqual(response.status_code, 200)
k1 = orig.clone() k2 = k1.transform(trans.srid, clone=True) self.assertEqual(k1, orig) self.assertNotEqual(k1, k2)
if socks.get(cupd_in) == zmq.POLLIN: new_c_data = serial.loads(cupd_in.recv()) #cupd_in.send(serial.dumps('ACK'))
import salt.utils import salt.config as config from salt.utils import namespaced_function from salt.exceptions import ( SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
step = min(step, max_time - time.time()) * BLUR_FACTOR
y_train = self.y_train_ if y_train.ndim == 1: y_train = y_train[:, np.newaxis]
self.assertEqual( reverification_service.get_status(self.user.id, unicode(self.course_id), self.final_checkpoint_location), 'skipped' )
cls.req_server_channel = salt.transport.server.ReqServerChannel.factory(cls.master_opts) cls.req_server_channel.pre_fork(cls.process_manager)
if node.value == '': node.value = '0'
os.makedirs(fn_)
logger.info('computing mean') self.mean_ = numpy.asarray(X.mean(axis=0))[0, :]
self.q(css=".login-button").click()
self.ensure_registered()
self.assertContains(response, k, status_code=500) self.assertNotContains(response, v, status_code=500)
name = ('A', 'B') ind.rename(name, inplace=True) self.assertEqual(ind.name, name) self.assertEqual(ind.names, [name])
return total / coeff_sum
y_score = sparse_random_matrix(n_components=y_true.shape[0], n_features=y_true.shape[1], random_state=random_state)
self._remake_table(model, alter_fields=[(old_field, new_field)])
ret['changes'] = exc.info.get('changes', {}) ret['comment'] = exc.strerror_without_changes
result = s.values self.assertIsInstance(result, np.ndarray) self.assertTrue(result.dtype == 'datetime64[ns]')
cost = None
import integration
from salt.exceptions import SaltInvocationError
self.update_structure(destination_course, destination_structure) self._update_head(destination_course, index_entry, destination_course.branch, destination_structure['_id'])
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
try: res_fast = fast_path(group)
locale_dirs = filter(os.path.isdir, glob.glob('%s/*' % self.default_locale_path)) all_locales = map(os.path.basename, locale_dirs)
from salt.ext.six import string_types import salt.utils import salt.ext.six as six
self.assert_can_access(self.beta_user, self.alpha_module.discussion_id, thread_id, False)
raise TypeError('Must specify either start or end.')
result['names'] = names result['converters'] = converters result['na_values'] = na_values result['na_fvalues'] = na_fvalues result['skiprows'] = skiprows
from __future__ import absolute_import import re import salt.ext.six as six
try: del self._item_cache[key] except KeyError: pass
ret['changes'] = {'old': '', 'new': '{0}@{1}'.format(user, host)}
yield check_oob_score, name, csc_matrix(iris.data), iris.target
declared_fields = OrderedDict() for base in reversed(new_class.__mro__): if hasattr(base, 'declared_fields'): declared_fields.update(base.declared_fields)
sp_indices = sp_indices[1:] dummy_cols = dummy_cols[1:]
store._handle.create_group(store._handle.root, 'bah')
about_base = marketing_urls.get('ROOT', None)
K_train = np.dot(X_[:180], X_[:180].T) y_train = y_[:180]
mock_key.side_effect = mock_key_instances + [Mock()]
FEATURES['MILESTONES_APP'] = True
assert_true(set(votes[:, class_idx]).issubset(set([0., 1., 2.])))
from_chunks = pd.concat(read_stata(fname, chunksize=4)) tm.assert_frame_equal(parsed, from_chunks)
(['professional'], 'professional'), (['no-id-professional'], 'no-id-professional')
if not language: language = settings.LANGUAGE_CODE
url_user_invoice_preference = reverse('get_user_invoice_preference', kwargs={'course_id': self.course.id.to_deprecated_string()})
self.student = UserFactory( username=self.STUDENT_USERNAME, email=self.STUDENT_EMAIL, password=self.STUDENT_PASSWORD, )
self.assertEqual(len(team_membership), 1) member = team_membership[0]['user'] self.assertEqual(member['username'], creator)
leglabels = labels if labels is not None else idx for p, l in zip(patches, leglabels): self._add_legend_handle(p, l)
if not isinstance(result, DataFrame): return self._transform_general(func, *args, **kwargs)
if logo_image: notification_msg.attach(logo_image)
from __future__ import division
self.assertTrue(self.reset_password_page.is_form_visible())
if make_data is csr_matrix: assert_raises(type(exc), func, X, metric=metric, n_jobs=2, **kwds) continue else: raise
self.assertTrue(bool(pkg_targets))
return None
if is_list_like_indexer(value) and np.iterable( value) and lplane_indexer != len(value):
ret = self.run_run_plus(fun='fileserver.update', args=['backend="[roots]"']) self.assertTrue(ret['fun'])
from salt.utils import migrations from salt.utils import kinds
return fnd
colors = [color_map[y] for y in y_train] plt.scatter(X[:, 0], X[:, 1], c=colors, cmap=plt.cm.Paired)
os.remove(filename)
if d_estate in self.road_stack.value.nameRemotes: self.road_stack.value.message(msg, self.road_stack.value.nameRemotes[d_estate].uid) return
url = reverse('instructor_dashboard', kwargs={'course_id': self.course.id.to_deprecated_string()}) response = self.client.get(url)
if sp_version >= (0, 12): solvers.append('lbfgs')
grade_summary['percent'] = round(grade_summary['percent'] * 100 + 0.05) / 100
if label_type == 'azimuth': data_y = np.cast[config.floatX](data_y / 360.)
'renderer_whitelist': list,
return '<p class="error_msg">EXCEPTION!</p>'
obj.delete() os.unlink(full_name)
from __future__ import absolute_import import logging import os import re import datetime
self.assertEqual(len(list(Article.objects.all())), 3)
if (isinstance(labels, MultiIndex) and len(keyarr) and not isinstance(keyarr[0], tuple)): level = 0 else: level = None
cmd = list2cmdline(['wmic', 'cpu']) info = __salt__['cmd.run'](cmd).split('\r\n')
account_settings.switch_account_settings_tabs('accounts-tab') account_settings.wait_for_link_title_for_link_field(field_id, "Unlink This Account")
locs = product(*(row_locs, col_locs)) for i, j in locs: formatter = _maybe_wrap_formatter(formatter) self._display_funcs[(i, j)] = formatter
import salt.utils import integration from salt.utils.verify import ( check_user, verify_env, verify_socket, zmq_version, check_max_open_files, valid_id )
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) for Cls in [GradientBoostingRegressor, GradientBoostingClassifier]: est = Cls(n_estimators=200, max_depth=1) est.fit(X, y)
count_empty_content_vals = count_empty_vals(content[0]) indexnamerow = None if self.has_index_names and count_empty_content_vals == len(columns): indexnamerow = content[0] content = content[1:]
if kwargs['shell'] is True: kwargs['executable'] = shell kwargs['close_fds'] = True
import salt.utils import salt.utils.odict as odict import salt.utils.dictupdate as dictupdate import salt.ext.six as six from salt.ext.six import string_types
from . import core from . import worker from . import maint from . import reactor from . import zero from . import jobber from . import dummy
return wkb_w(dim=3 if self.hasz else 2).write_hex(self)
import salt.utils.jid import salt.returners import salt.ext.six as six
app.connect('build-finished', embed_code_links)
user_country_from_profile = _get_user_country_from_profile(user)
if len(result) > 0: raise nose.SkipTest("Invalid results")
self.assertEqual(fetched.discussion_id, discussion_item.discussion_id) self.assertEqual(fetched.discussion_id, refetched.discussion_id)
application = object()
import salt.utils from salt.exceptions import CommandExecutionError
_ret = [] for row in _response['rows']: _ret.append(row['key']) return _ret
major_axis = Index(lrange(4)) minor_axis = Index(lrange(2))
self.factory(l1_ratio=1.1)
return '%s.%s:%d' % ( model._meta.app_label, model._meta.model_name, getattr(instance_or_pk, 'pk', instance_or_pk), )
_delete = self.run_function('beacons.delete', ['ps']) self.assertTrue(_delete['result'])
self.assertAssetsEqual(self.LOCKED_ASSET_KEY, self.LOCKED_ASSET_KEY.course_key, course_id)
import salt.utils import salt.utils.process
link = reverse('download_transcripts') resp = self.client.get(link, {'locator': 'BAD_LOCATOR'}) self.assertEqual(resp.status_code, 404)
geos_prepare = GEOSFuncFactory('GEOSPrepare', argtypes=[GEOM_PTR], restype=PREPGEOM_PTR) prepared_destroy = GEOSFuncFactory('GEOSPreparedGeom_destroy', argtypes=[PREPGEOM_PTR])
n_neighbors += 1
queryset.update(**{self.field.name: None})
DATE_INPUT_FORMATS = [
if certificate_data.get('course_title'): certificate_response["course_title"] = certificate_data['course_title']
comb_name = comb_name.decode('utf-8', 'replace')
if not eventtime: eventtime = str(int(time.time()))
self.assertEqual(course_mode, enrollment['mode']) self.assertEqual(is_active, enrollment['is_active'])
try: import boto import boto.exception logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
with salt.utils.fopen(file_path): plist = plistlib.readPlist(true_path)
this_scores = cross_val_score(clf, X, y, n_jobs=1) score_means.append(this_scores.mean()) score_stds.append(this_scores.std())
self.assertEqual(cached_structure, not_cached_structure)
class CommonAncestor(models.Model): pass
return newey_west(m, new_max_lags, nobs, df)
from __future__ import unicode_literals
with ctx: self.assertEqual(self.cf.get_option(option_name), context_value)
pass
os.environ.get('TMPDIR', tempfile.gettempdir()) if salt.utils.is_darwin() else '/tmp'
return rows
return len(self.object_list)
('subject', Pipeline([ ('selector', ItemSelector(key='subject')), ('tfidf', TfidfVectorizer(min_df=50)), ])),
url(r'^api/user/', include('openedx.core.djangoapps.user_api.urls')),
df1 = DataFrame.from_records(df, index=['C']) tm.assert_index_equal(df1.index, Index(df.C))
Z = Z.reshape(XX.shape) plt.figure(fignum, figsize=(4, 3)) plt.pcolormesh(XX, YY, Z, cmap=plt.cm.Paired)
merge_cells = True
save_course_update_items(location, course_updates, course_update_items, user) return _get_visible_update(course_update_items)
self.assertEqual(len(res.context['object_list']), 7)
with tm.assert_produces_warning(UserWarning): axes = _check_plot_works(scatter_matrix, filterwarnings='always', frame=df, range_padding=.1) axes0_labels = axes[0][0].yaxis.get_majorticklabels()
if USERA in user_list: self.run_function('user.delete', [USERA], remove=True) #need to exit cherypy engine cherrypy.engine.exit()
task_folder = task_service.GetFolder(location)
import salt.returners import salt.utils.jid
self.edit_component(1) self.open_advanced_tab() self.video.set_field_value('YouTube ID', 'sampleid123') self.save_unit_settings()
result = d['a'] | d['b'] expected = Series([False, True]) assert_series_equal(result, expected)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from __future__ import unicode_literals
X, y = check_X_y(X, y, ['csr', 'csc'])
(14, True, u"True"),
ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_ ).astype(np.bool_) ref_inlier_mask[outliers] = False
dtypes = ['i1', 'i2', 'i4', 'i8', 'u1', 'u2', 'u4', 'u8']
from salt.utils.context import ContextDict, NamespacedDictWrapper
import msgpack
item = self.cart.orderitem_set.all().select_subclasses()[0] self.assertEquals(item.unit_cost, self.get_discount(self.cost))
(ok_, err, sl_) = _unify_sources_and_hashes(source=source, source_hash=source_hash, sources=sources, source_hashes=source_hashes) if not ok_: return _error(ret, err)
self.assert_has_text(xml, "//span[@class='status']/span[@class='sr']", status_mark, exact=False)
exc_info_on_loglevel=logging.DEBUG
for raw in jinfo_iter: if raw is None: break
mono_shape = shape[:s_index] + (1, ) + shape[(s_index + 1):]
if item_kind is None: items.append(value) else: items.append({'kind': item_kind, 'name': value})
v3.set_params = '_invalid_analyzer_type_' assert_raises(ValueError, v3.build_analyzer)
try: from libcloud.compute.base import NodeState HAS_LIBCLOUD = True except ImportError: HAS_LIBCLOUD = False
self.video.show_captions()
mailing_address_label = _(u"Mailing address")
self.assertIn(SplitTestDescriptor.user_partition_id.name, editable_metadata_fields)
ret = self.run_run_plus(fun='fileserver.empty_dir_list', args=['backend="[roots]"']) self.assertIsInstance(ret['fun'], list)
from __future__ import absolute_import
s = Series(np.random.randn(10)) tm.assert_almost_equal(s.ravel(order='F'), s.values.ravel(order='F'))
assert_equal(lfw_pairs_train.pairs.shape, (10, 2, 62, 47))
from __future__ import absolute_import
'id': course_id, 'name': course_overview.display_name, 'number': course_overview.display_number_with_default, 'org': course_overview.display_org_with_default,
ave = kl(Y, Y_hat, 1)
middleware.process_request(request) request.session['hello'] = 'world'
__array_priority__ = 1000 _typ = 'categorical'
result = np.timedelta64(0, 'ns') expected = to_timedelta(0, box=False) self.assertEqual(result, expected)
]
if val == val and val != %(nan_val)s: nobs[lab, j] += 1 if nobs[lab, j] == rank: resx[lab, j] = val
role = __salt__['keystone.role_get'](name=name, profile=profile, **connection_args)
match = re.search(__opts__['stateconf_end_marker'], sls_templ) if match: process_sls_data(sls_templ[:match.start()], extract=True)
rng = np.random.RandomState(2)
sliced = self.frame.ix[:, -3:]
self.assertEqual(sql_for_table(Scientist), sql_for_table(ScientistRef))
self.create_cohorted_discussions()
_default_logging_level_ = 'info' _logfile_config_setting_name_ = 'log_file' _loglevel_config_setting_name_ = 'log_level_logfile' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'cloud')
ret[zpool] = {}
url_path = ""
self.assertRaises(SaltInvocationError, parallels.snapshot_id_to_name, name, '{8-4-4-4-12}')
config.cancel()
for k, v in cleansed.items(): cleansed[k] = CLEANSED_SUBSTITUTE return cleansed
__func_alias__ = { 'list_': 'list' }
X, = data assert X.shape[0] == self.counter_idx + 1 assert X[0,0] == self.counter_idx prereq_counter = self.counter prereq_counter.set_value(prereq_counter.get_value() + 1)
try: while True: observer.join(2) except KeyboardInterrupt: observer.stop() print("\nStopped asset watcher.")
if deploy: vm_info['key_filename'] = key_filename vm_info['ssh_host'] = ip
for name in names: ret[name] = '' cmd = ['pacman', '-Sp', '--needed', '--print-format', '%n %v'] cmd.extend(names)
cols = self.frame.columns.copy() newFrame = self.frame.reindex_axis(cols, axis=1) assert_frame_equal(newFrame, self.frame)
valid_states = [ 'Download complete', 'Already exists', ]
if (student_username != request.user.username) and (not staff_access): raise PermissionDenied
('%&', '%&'), ('red&♥ros%#red', 'red&%E2%99%A5ros%#red'),
self.assertTrue(self.run_function('timezone.set_time', ['3:14']))
def f(grp): if grp.name == 'Pony': return None return grp.iloc[0]
import salt.ext.six as six
xmin, xmax = plt.xlim() ymin, ymax = plt.ylim() coef = clf.coef_ intercept = clf.intercept_
level_to_sort = _convert_level_number(0, this.columns) this = this.sortlevel(level_to_sort, axis=1)
self.check_import(root_dir, content_store, course_id)
assert_index_equal(idx1, idx2, check_exact=False, check_less_precise=True)
add_form_template = None change_form_template = None change_list_template = None delete_confirmation_template = None delete_selected_confirmation_template = None object_history_template = None
r = HttpResponse(12345) self.assertEqual(r.content, b'12345')
self.assertEqual(new_draft_version, new_published_version)
self._timeout_future(tag, future) if future in self.timeout_map: tornado.ioloop.IOLoop.current().remove_timeout(self.timeout_map[future]) del self.timeout_map[future]
firewalld.__grains__ = {} firewalld.__salt__ = {} firewalld.__context__ = {} firewalld.__opts__ = {}
X = X_digits_binary[:100] y = y_digits_binary[:100]
eligibilities = api.get_eligibilities_for_user("staff") self.assertEqual(eligibilities, [])
clf = QuadraticDiscriminantAnalysis() with ignore_warnings(): y_pred = clf.fit(X2, y6).predict(X2) assert_true(np.any(y_pred != y6))
import os import datetime import yaml import zmq from collections import namedtuple
cmd = 'state.pkg {0}/salt_state.tgz test={1} pkg_sum={2} hash_type={3}'.format( __opts__['thin_dir'], test, trans_tar_sum, __opts__['hash_type'])
X_centered = X - X.mean(axis=0) lw = LedoitWolf(assume_centered=True) lw.fit(X_centered) shrinkage_ = lw.shrinkage_
pre = __salt__['git.config_get']( cwd=repo, key=name, user=user, ignore_retcode=True, **{'all': True, 'global': global_} )
collect = [e for e in collect if e.undoc_names and len(e.undoc_names) != e.nsig_names] collect.sort(key=lambda x:x.path)
import salt.master import integration from salt import auth
rgxin = config.ipython_rgxin rgxout = config.ipython_rgxout promptin = config.ipython_promptin promptout = config.ipython_promptout mplbackend = config.ipython_mplbackend exec_lines = config.ipython_execlines hold_count = config.ipython_holdcount
self.assertTrue( self.run_function('shadow.set_password', [TEST_USER, 'Pa$$W0rd']))
if is_css_present(css_selector): return retry_on_exception(lambda: css_find(css_selector, wait_time=timeout)[index].text) else: return ""
pkg_params = __salt__['pkg_resource.parse_targets'](name, pkgs, **kwargs)[0]
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(boston.data[:50], boston.target[:50], random_state=rng)
stamp = Timestamp('1850-01-01', tz='US/Eastern') repr(stamp)
verify_files([logfile], salt_master_user)
last_sum = last_mean * last_sample_count new_sum = X.sum(axis=0)
tracker._initialize_backends_from_django_settings()
if 'master_list' not in opts: opts['master_list'] = local_masters
from salt.modules import znc
if Bookmark.objects.filter(user=user, course_key=course_key).count() >= settings.MAX_BOOKMARKS_PER_COURSE: return False
{ u'description': 'Test description', u'version': CERTIFICATE_SCHEMA_VERSION },
try: output = html5lib.parseFragment(html, treebuilder='lxml', namespaceHTMLElements=False)[0] except IndexError: raise ex
self.assertRaises(KeyError, lambda: ser.loc[[3, 3, 3]])
df = DataFrame(np.random.randn(3, 4)) df2 = DataFrame(np.random.randn(4, 4))
self.assertTrue(exam_attempts_section.is_search_text_field_visible)
responses = self.xml.xpath('//stringresponse[@id=$id]', id=self.id) if responses: response = responses[0]
executor.migrate([("lookuperror_a", None)])
import salt.ext.six as six
if ':' in key: namespace, key = key.split(':', 1) else: namespace, key = key, None
import logging log = logging.getLogger(__file__)
try: from Crypto.Util import asn1 import OpenSSL HAS_DEPS = True except ImportError: HAS_DEPS = False
from __future__ import unicode_literals
_, s, _ = linalg.svd(X, full_matrices=False)
salt.utils.fopen(minion_config, 'w').write( 'blah: false\n' 'root_dir: {0}\n' 'log_file: {1}\n'.format(tempdir, minion_config) )
'ENABLE_DISABLING_XBLOCK_TYPES': True,
class UUIDPKParent(models.Model): uuid = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False) name = models.CharField(max_length=255)
any_ = saltnado.Any(futures) self.assertIs(any_.done(), False)
interface = interface.split('\\') interface = ''.join(interface)
from __future__ import absolute_import
new_dtype = this_dtype if this_dtype != other_dtype: new_dtype = com._lcd_dtypes(this_dtype, other_dtype) series = series.astype(new_dtype) otherSeries = otherSeries.astype(new_dtype)
self.assertEqual(len(exceptions), 0)
indices = lrange(ndim) indices.remove(self.axis)
brc_partial.set_params(n_clusters=3) brc_partial.partial_fit(None) assert_array_equal(brc_partial.subcluster_labels_, brc.subcluster_labels_)
from __future__ import absolute_import
context['certificate_id_number_title'] = _('Certificate ID Number')
raise AssertionError('Error performing exclusion: ' 's1: %s s2: %s other: %s' % (s1, s2, other))
overrides.update( deploy_scripts_search_path=tuple(deploy_scripts_search_path) )
bulk_ops_record = self._get_bulk_ops_record(structure_key) if not bulk_ops_record.active: return
self.xblock.location = Location("org", "import", "run", "category", "stubxblock") self.xblock.save()
coefs2 = ridge_regression( X * np.sqrt(sample_weight)[:, np.newaxis], y * np.sqrt(sample_weight), alpha=alpha, solver=solver) assert_array_almost_equal(coefs, coefs2)
user_id = user_service.get_current_user().opt_attrs.get('edx-platform.user_id', None)
with tm.assertRaises(NotImplementedError): pd.isnull(self.index)
data = { 'parent_locator': unicode(parent_usage_key), 'duplicate_source_locator': unicode(source_usage_key) } if display_name is not None: data['display_name'] = display_name
raise AccessListFallback
targets = [x for x in pkg_params if x in old] if not targets: return {}
from salttesting import skipIf from salttesting.helpers import ( ensure_in_syspath, requires_network ) ensure_in_syspath('../../')
if not com.is_integer(rstep) or not rstep: raise ValueError
resp_params['signed_field_names'] = ",".join(signed_fields)
for prop in state_cfg: if isinstance(state_cfg[prop], (list)) and len(state_cfg[prop]) == 0: continue
try: self.client.get('/broken_view/') self.fail('Should raise an error') except KeyError: pass
if retval.ndim < self.ndim: axis -= 1
@skipUnlessDBFeature('test_db_allows_multiple_connections') class DeleteLockingTest(TransactionTestCase):
if response is None:
X = X / 255
from __future__ import unicode_literals
sorted_axis = data.axes[self.axis].take(self.sort_idx) sorted_data = data.reindex_axis(sorted_axis, axis=self.axis)
attrs['__config__'] = True attrs['__flatten__'] = False attrs['__config_name__'] = None
ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_ ).astype(np.bool_) ref_inlier_mask[outliers] = False
return InstructorTask.create(course_id, task_type, task_key, task_input, requester)
from salt.modules import tls import integration
log = logging.getLogger(__name__)
from __future__ import absolute_import
exit=False)
new_auth = object.__new__(cls) new_auth.__singleton_init__(opts, io_loop=io_loop) loop_instance_map[key] = new_auth
self.assertNotEqual(t1.render(Context({})), t2.render(Context({})))
nearest_center, inertia = _labels_inertia(X, x_squared_norms, centers, distances=distances)
from __future__ import unicode_literals
split_modulestore = modulestore()._get_modulestore_by_type(ModuleStoreEnum.Type.split) active_version_collection = split_modulestore.db_connection.course_index structure_collection = split_modulestore.db_connection.structures
else: self.alphas_ = np.asarray(alphas[0])
from __future__ import absolute_import import logging import os
ret['comment'] = 'Target was successfully mounted' ret['changes']['mount'] = True
if k in ['boolIndex', 'tuples', 'empty']: continue
result = grouped.aggregate('var') expected = grouped.var() assert_frame_equal(result, expected)
'unsubmitted': 'unanswered', 'incomplete': 'incorrect', 'queued': 'processing',
df = DataFrame(np.random.randn(1000, 2))
path = dirs[0] while os.path.basename(path) not in ['salt', 'salt-tests-tmpdir']: path, base = os.path.split(path)
high, ext_errors = self.state.reconcile_extend(high) errors += ext_errors
_list = self.run_function('beacons.list', return_yaml=False) self.assertTrue(_list['enabled'])
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
code = np.empty((n_samples, n_components)) slices = list(gen_even_slices(n_samples, _get_n_jobs(n_jobs)))
is_timedelta_lhs = is_timedelta64_dtype(left) is_datetime_lhs = (is_datetime64_dtype(left) or is_datetime64tz_dtype(left))
if mappings: for key in mappings.iterkeys(): if re.match(key, hostname): return mappings[key]
tm.assert_almost_equal(np.array(s), np.array(s.values))
return super(Expression, self).as_sql(compiler, connection)
return _save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=task_definition.Principal.UserID, password=None, logon_type=task_definition.Principal.LogonType)
self.addCleanup(mock_sh.stop)
with self.assertNumQueries(1): CountryAccessRule.check_country_access(course_id, 'NZ')
self.assertEqual(CourseEnrollment.objects.count(), 1) enrollment = CourseEnrollment.objects.get(course_id=course_key) self.assertEqual(enrollment.user.username, "test")
from __future__ import absolute_import
cached_pkg = __salt__['cp.is_cached'](uninstaller) if not cached_pkg: cached_pkg = __salt__['cp.cache_file'](uninstaller)
end = datetime(year=2013, month=11, day=2, hour=0, minute=0, tzinfo=pytz.utc)
self.assertEqual(event.dt, dt.replace(tzinfo=EAT))
from salt.utils import args
self.assertRaises(ValueError, p.iloc.__getitem__, tuple(['j', 'D']))
from __future__ import absolute_import from copy import deepcopy
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch from salttesting.helpers import ensure_in_syspath
if 'run_on_start' in data: if data['run_on_start']: run = True else: self.intervals[job] = int(time.time()) else: run = True
from __future__ import absolute_import
self.__dict__["_wrapped"] = value
self.assertIn( settings.MICROSITE_CONFIGURATION['test_microsite']["urls"]['ABOUT'], data['company_about_url'] )
('paying', 'paying'),
from __future__ import absolute_import import os import time
from __future__ import absolute_import, print_function
if refresh: refresh_db()
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
self._studio_publish_content(1)
site_configuration = SiteConfigurationFactory.create( site=self.site, )
try: os.remove(trans_tar) except (OSError, IOError): pass
self.names_with_path = path_with_names
subject = u'Confirmation and Invoice for {course_name}'.format(course_name=course.display_name) message = render_to_string('emails/registration_codes_sale_email.txt', context)
if not is_list_like_indexer(section): return section
if state == {}: state = None
if isinstance(pillar_rows, list): for row in pillar_rows: rows.append(row) else: rows.append(pillar_rows)
result = df.assign(C=lambda x: x.B / x.A) assert_frame_equal(result, expected)
result = api.baskets.post({ 'products': [{'sku': course_mode.sku}], 'checkout': True, 'payment_processor_name': processor })
response = self._credit_provider_callback( request_uuid, 'approved', provider_id=other_provider_id, secret_key=other_provider_secret_key, keys={other_provider_id: other_provider_secret_key} )
return ''
mono_shape = shape[:s_index] + (1, ) + shape[(s_index + 1):]
self.assertEqual(list(chris.edited.values_list('title', flat=True)), ['Dive into Python'])
actions = None
self.post_data.update({ "name": "Frederick Clegg",
exp_df = pd.DataFrame({"cats": cats2, "values": values2}, index=idx2)
logger.debug( "Comment Service received POST request {0} to path {1}" .format(json.dumps(post_dict), self.path) )
if return_type is None: return_type = 'dict'
mongouri = 'mongodb://{user}:{password}@{host}:{port}/{db}'.format(**mongo_db)
self.assertTrue(notnull(f(self.series))) self.assertTrue(isnull(f(self.series, skipna=False)))
log = logging.getLogger(__name__)
arr = np.array( [[[1, 2, 3], [0, 0, 0]], [[0, 0, 0], [0, 0, 0]]], dtype=np.float64)
expected = DataFrame([[False, False], [False, True], [True, True]]) result = df > b assert_frame_equal(result, expected)
_ = lambda text: text
resp = self.client.get(self.get_url(self.student.username)) self.assertEqual(resp.status_code, status.HTTP_401_UNAUTHORIZED)
if return_type == 'dict': return bp elif return_type == 'both': return BoxPlot.BP(ax=ax, lines=bp) else: return ax
cert_type=server cert_filename="something_completely_different"
index = self.index[7:10:2] expected = Index(np.array([14, 18]), name='foo') self.assert_index_equal(index, expected)
search_string = '' search_params = []
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
autosummary_generate = False
self.assertRaises(TypeError, td.astype, 'int32')
s = getattr(series, '_values', None) if isinstance(s, Index) and lib.isscalar(key): try: return s[key] except (IndexError, ValueError):
cs_setx = CsOperation('GEOSCoordSeq_setX') cs_sety = CsOperation('GEOSCoordSeq_setY') cs_setz = CsOperation('GEOSCoordSeq_setZ')
with patch('student.models.cc.User.save'): uname = 'student' email = 'student@edx.org' password = 'test'
mp = OGRGeometry('MultiPolygon') pnt = OGRGeometry('POINT(5 23)') with self.assertRaises(GDALException): mp.add(pnt)
from django.conf import settings if not settings.configured: settings.configure()
df = DataFrame() tm.assert_frame_equal(df, df.round())
db = DBSCAN(eps=0.3, min_samples=10).fit(X) core_samples_mask = np.zeros_like(db.labels_, dtype=bool) core_samples_mask[db.core_sample_indices_] = True labels = db.labels_
if hasattr(self.base_field, 'from_db_value'): self.from_db_value = self._from_db_value super(ArrayField, self).__init__(**kwargs)
logging.getLogger().setLevel(logging.ERROR)
init_file = os.path.join(migration_dir, "__init__.py") self.assertTrue(os.path.exists(init_file))
from __future__ import absolute_import, print_function
mlp.n_iter_ = 0 mlp.learning_rate_ = 0.1
if isinstance(msg, str): if msg == 'minions': reply = serial.dumps(self.minions) creq_in.send(reply)
listener_state = 'cmd_|-listener_test_listening_change_state_|-echo "Listening State"_|-mod_watch' self.assertIn(listener_state, state_run)
assert_almost_equal(result._y_trans.values.flat, [0, -0.5, 0.5], check_dtype=False)
list1.sort() list2.sort() return list1 == list2
return Env.BOK_CHOY_CACHE.set('test', 'test')
log = logging.getLogger(__name__)
show_email_settings_for = frozenset( enrollment.course_id for enrollment in course_enrollments if ( BulkEmailFlag.feature_enabled(enrollment.course_id) ) )
actual = grouped_ser.filter(lambda x: len(x) > 1) expected = ser.take(expected_indexes) assert_series_equal(actual, expected)
cov = pca.get_covariance() precision = pca.get_precision() assert_array_almost_equal(np.dot(cov, precision), np.eye(d), 12)
if not cached_pkg: log.error('Unable to cache {0}'.format(installer)) ret[pkg_name] = {'unable to cache': installer} continue
DATA_DIR = MODULE_DIR.parent.parent.parent.parent / "test" / "data"
rexp = re.compile('(?m)^ [*] ' r'([^ ].*)[\r\n].*\(([^\)]+)')
import salt.ext.six as six
import salt.ext.six as six from salt.ext.six.moves import range
self.assertEqual(courses_list, courses_list_by_groups)
prepend_root_dirs = [ 'formula_path', 'pillar_path', 'reactor_path', 'spm_cache_dir', 'spm_build_dir' ]
df3 = df1.set_index(['floats'], append=True) df2 = df1.set_index(['floats'], append=True) self.assertTrue(df3.equals(df2))
for arg in [True, False]: with tm.assertRaises(TypeError): read_html(self.spam_data, header=arg)
result = f.clean('12-21-2010 13:30') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
return None
saltenv = env
coupon = Coupon( code='test_code', description='test_description', course_id=self.course.id, percentage_discount='10', created_by=self.instructor, is_active=True ) coupon.save()
for_update_sql = tested_connection.ops.for_update_sql(nowait) sql = tested_connection.queries[-1]['sql'] return bool(sql.find(for_update_sql) > -1)
X = [[0, 1, 0], [0, -1, -1], [0, .5, .5]] y = [1, 0, 1]
course_overviews = CourseOverview.objects.all()
if inline_collections: for item in tab.items(course): yield item elif len(list(tab.items(course))) > 0: yield tab
class IndexTogetherSingleList(models.Model): headline = models.CharField(max_length=100) pub_date = models.DateTimeField()
dmi_data = _dmi_data(dmi_raw, clean, fields) if len(dmi_data): record['data'] = dmi_data dmi.append(record) elif not clean: dmi.append(record)
child_to_group = { xblock.group_id_to_child.get(unicode(group.id), None): group.id for group in partition_for_this_block.groups }
plot_calibration_curve(GaussianNB(), "Naive Bayes", 1)
'salt_event_pub_hwm': 2000, 'event_publisher_pub_hwm': 1000, 'event_match_type': 'startswith', 'minion_restart_command': [], 'pub_ret': True,
'session_inactivity_timeout.middleware.SessionInactivityTimeout',
if not allow_future: if generic_view.uses_datetime_field: now = timezone.now() else: now = timezone_today() lookup['%s__lte' % date_field] = now
log = logging.getLogger(__name__)
self.assertEqual(self.loader._dict, {}) self.assertTrue(inspect.isfunction(self.loader['test.ping']))
content = get_content(service_instance, object_type, property_list=property_list, container_ref=container_ref)
expected['float_miss'] = expected['float_miss'].astype(np.float32)
import salt.modules.cmdmod
_apply_whitelist = _series_apply_whitelist for _def_str in _whitelist_method_generator(Series, _series_apply_whitelist): exec(_def_str)
length = arr.size if hasattr(arr, 'size') else len(arr) return np.nan if length == 0 else np.mean(arr, *args, **kwargs)
try: marty.book_set.add(dive) except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
mask = label_counts > 1 n_samples = np.sum(mask) label_counts = label_counts[mask] k_all = k_all[mask] c = c[mask] radius = radius[mask]
result = i.to_series(keep_tz=True) assert_series_equal(result.reset_index(drop=True), expected)
request = mock.Mock() self.view.check_throttles(request)
_set_verification_partitions(course_key, icrv_blocks)
rule = rule.strip()
if (new_result == result).all(): return new_result
LogoutPage(self.browser).visit() self._make_har_file(login_page)
if coerce: if not self._can_hold_na: if inplace: return [self] else: return [self.copy()]
from __future__ import absolute_import
X = np.ascontiguousarray(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
__grains__ = {}
for arg in ('name', ('name', 'mpoly')): lm = LayerMapping(County, co_shp, co_mapping, transform=False, unique=arg)
params["email"] = "this_email_address_has_76_characters_in_it_so_it_is_unacceptable@example.com" assert_email_error("Email cannot be more than 75 characters long")
self.assertEqual(dm[2].dtype, np.object_)
self._assert_cert_status({ 'description': 'honor', 'status': 'started' })
rh_service.__salt__ = {}
if settings.DATA_UPLOAD_MAX_MEMORY_SIZE is not None: read_size = settings.DATA_UPLOAD_MAX_MEMORY_SIZE - num_bytes_read
except self.LibraryValueNotFoundException: val = None if val is None: raise ValueError("Key '%s' not found" % key) return val
__func_alias__ = { 'list_': 'list' }
self.q(css=subsection_css).first.click() self._on_section_promise(section_title, subsection_title).fulfill()
yield check_estimators_pickle
methods = [method for method in resample_methods if method != 'ohlc'] for method in methods: result = getattr(s.resample(freq), method)()
self.optimizer = 'fmin_cobyla' self.verbose = False
n_samples_range = np.logspace(2, 6, 5) colors = plt.cm.Blues(np.linspace(0.3, 1.0, len(n_samples_range)))
self.assertFalse(EmbargoedCourse.is_embargoed(course_id))
alphas /= alphas[0] alphas = alphas[::-1] coefs = coefs[:, ::-1] mask = alphas >= eps mask[0] = True alphas = alphas[mask] coefs = coefs[:, mask] return alphas, coefs
qs = RasterModel.objects.filter(Q(**combos[0]) & Q(**combos[1])) self.assertTrue(qs.count() in [0, 1])
@override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True) def test_pointfield(self): class PointForm(forms.Form): p = forms.PointField()
s = Series(date_range('20130102', periods=5)) rs = s - s.shift(1) xp = s.diff() assert_series_equal(rs, xp)
level_index = frame._get_axis(axis).levels[level]
CourseUpdateDesc = namedtuple("CourseUpdateDesc", ['date', 'content'])
extra_block = self.make_block("html", vertical_block_course)
__salt__['saltutil.refresh_modules']()
if oper in ('=', ''): oper = '==' return oper, verstr
response = self.client.get('/login_protected_view/') self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')
for setting in dir(global_settings): if setting.isupper(): setattr(self, setting, getattr(global_settings, setting))
('Sat, 01-Jan-2028 04:05:06 GMT', 'Sat, 01-Jan-2028 04:05:07 GMT')
'js/vendor/requirejs/require.js', 'js/RequireJS-namespace-undefine.js', 'js/vendor/URI.min.js', 'common/js/vendor/backbone.js', 'edx-pattern-library/js/modernizr-custom.js',
self.assertTrue(self._has_changes(locations['grandparent'])) self.assertTrue(self._has_changes(locations['parent']))
with self.assertNumQueries(1): VerificationDeadline.deadlines_for_courses(course_keys)
name_label = _(u"Full name")
return nodelist_true_output or self.nodelist_true.render(context)
if should_recompile(): _logger.debug('recompiling')
import salt.ext.six as six
foo = Foo()
with self.assertRaises(ItemNotFoundError): self.publish((('html', 'html00'),))
'utils_dirs': list,
addr = _split_optional_netmask(address) self.network_address = IPv4Address(self._ip_int_from_string(addr[0]))
self.Xt[:self.n_eigen,:] = self.Ut
all_times = self.q(css=selector).text[0]
def constant_time_compare(val1, val2): return hmac.compare_digest(force_bytes(val1), force_bytes(val2))
self.mock_module = MagicMock() self.mock_module.id = 1 self.dispatch = 'score_update'
locator = course.location.map_into_course(CourseLocator(version_guid=previous_version)) self.assertTrue( modulestore().has_item(locator), "couldn't find in %s" % previous_version )
force = True stats_args.insert(2, c_int(force)) func = capi.get_band_statistics
QUERYFORMAT = '%{NAME}_|-%{EPOCH}_|-%{VERSION}_|-%{RELEASE}_|-%{ARCH}_|-%{REPOID}'
_TYPE_MAP = {
cwd = str(cwd)
max_squared_sum = row_norms(X, squared=True).max()
digits = datasets.load_digits()
else: ret = _load_result(new_member, ret)
__ = source_store.find_asset_metadata(asset_key)
self._consolidate_inplace() return any([block.is_datelike for block in self.blocks])
self.store.publish(sequential.location, self.user_id) self.assertFalse(self._has_changes(sequential.location))
MOBILE_STORE_URLS = ENV_TOKENS.get('MOBILE_STORE_URLS', MOBILE_STORE_URLS)
from salt.exceptions import SaltInvocationError
for encoding in self.utf_encodings: for frame in compat.itervalues(self.frame): result = self.encode_decode(frame, encoding=encoding) assert_frame_equal(result, frame)
from __future__ import absolute_import from textwrap import dedent
number_suffix = MatchFirst(Literal(k) for k in SUFFIXES.keys())
if convert_dates and values.dtype == np.object_:
if __opts__['test']: ret['result'] = None ret['changes'] = {'reg': {'Will add': add_change}} return ret
import_course_from_xml(self.store, self.user.id, root_dir) imported_word_cloud = self.store.get_item(course_id.make_usage_key('word_cloud', 'untitled'))
myrole: boto_iam_role.present: - profile: myiamprofile
self.user_partition.scheme.current_group = groups[1] group2 = self.partition_service.get_group(self.user_partition) self.assertEqual(group2, groups[1])
expected = Series(np.nan, index=pd.Index([], dtype='int64')) assert_series_equal(result, expected)
if len(results.violations) != len(rules): for violation in results.violations: print("Found violation: {}".format(violation.rule))
time.sleep(30) raise UserWarning("Unable to connect to room {0}".format(room))
X_test = np.array([[0, 1, 1, 0, 0, 1]])
return self.get_item(item_loc)
self.course_nav.go_to_section('Test Section 2', 'Test Subsection 2')
return fnd
cached_file_path = _get_cached_file_name( fnd['bucket'], load['saltenv'], fnd['path'])
course_page = CoursewarePage(self.browser, self.course_id) self.browser.get(course_page.url + '?tpa_hint=oa2-dummy')
if name in list_tasks(location): return '{0} already exists'.format(name)
self.assertEqual( StudentModule.objects.filter( student=self.module_to_reset.student, course_id=self.module_to_reset.course_id, ).count(), 0 )
if center: offset = _offset(window, center) additional_nans = np.array([np.NaN] * offset)
state = models.TextField(null=True, blank=True)
_MIN_ELEMENTS = 10000
from pandas import compat import nose
def _str_header(self, name, symbol='`'): return ['**' + name + '**'] + [symbol*(len(name)+4)]
clean_lines = [] in_docstring = False for line in func_lines: line = line.strip() if in_docstring and _is_triplequote(line): in_docstring = False continue
self.tag_map = defaultdict(list)
pass
if sp.issparse(coef): coef.data.flags.writeable = False else: coef.flags.writeable = False return coef
response = self.client.get(reverse('signin_user')) self.assertEqual(200, response.status_code) self.assertTrue('login-and-registration-container' in response.content)
true_importances = np.zeros(n_features)
'CERTIFICATES_HTML_VIEW': False,
lookup_params = [geom or 'POINT (0 0)', 0]
nav_dict[sec_title] = self._subsection_titles(sec_index + 1)
self.set_state_from_lcp()
member = models.Member.objects.get(name='test') self.assertGreater(member.birthdate, now - error_margin) self.assertLess(member.birthdate, now + error_margin)
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'
log.warning('"lsof" returncode = 1, likely no active TCP sessions.') return remotes
import integration
for key, val in params.iteritems(): self.assertEqual(self.server.config.get(key), val)
from __future__ import absolute_import import logging import os import re
df['B', '1'] = [1, 2, 3] df['A'] = df['B', '1']
if self._convert_dates is not None: for i, col in enumerate(data): if i in convert_dates: data[col] = _datetime_to_stata_elapsed_vec(data[col], self.fmtlist[i])
from salt.modules import vsphere from salt.exceptions import CommandExecutionError
df[df[:-1] < 0] = 2 np.putmask(values[:-1], values[:-1] < 0, 2) assert_almost_equal(df.values, values)
assert X.ndim == 4 return T.nnet.softmax(X.reshape((X.shape[0], self.dim)) * self.P)
ret = self.run_function('beacons.disable_beacon', ['ps']) self.assertTrue(ret['result'])
raise self.retry(exc=exc, countdown=countdown, max_retries=config.max_retries)
email = user.email if user.is_authenticated() else request.POST.get('email')
from __future__ import absolute_import
with tm.assert_produces_warning(FutureWarning): result = df.drop_duplicates('A', take_last=True) expected = df.ix[[1, 6, 7]] tm.assert_frame_equal(result, expected)
if m.any(): if isinstance(new, np.ndarray): n = np.squeeze(new[i % new.shape[0]]) else: n = np.array(new)
tol = 0.000000001
can_introspect_autofield = False
self.payment_and_verification_flow.proceed_to_payment()
calibrated_clf.fit(X_train, y_train) probs_without_sw = calibrated_clf.predict_proba(X_test)
if assignment_type: self.set_assignment_type(assignment_type)
cached_pkg = installer
course_usage_main_vertical = self.lc_block.children[0] course_usage_inner_vertical = self.store.get_item(course_usage_main_vertical).children[0] inner_vertical_in_course = self.store.get_item(course_usage_inner_vertical) course_usage_html = inner_vertical_in_course.children[0] course_usage_problem = inner_vertical_in_course.children[1]
icrv_location = self.icrv.location self.store.delete_item( self.icrv.location, ModuleStoreEnum.UserID.test, revision=ModuleStoreEnum.RevisionOption.published_only ) self._update_partitions()
self.split_mongo.create_course( self.split_course_key.org, self.split_course_key.course, self.split_course_key.run, self.user_id, fields=fields, root_block_id='runid' )
self.assertEqual(len(mail.outbox), 1) self.assertEqual(mail.outbox[0].to[0], self.instructor.email)
VERIFICATION_DEADLINE = "verification" UPGRADE_DEADLINE = "upgrade"
if newline: output += '\n'
repr(fbeta_score)
data = JUNK_FOOD_DOCS + NOTJUNK_FOOD_DOCS
age = 5*24*60*60
filter_out_source_path_option(reclass_opts)
class Note(models.Model): content_type = models.ForeignKey(ContentType, models.CASCADE) object_id = models.PositiveIntegerField() content_object = GenericForeignKey() note = models.TextField()
import logging from salt.serializers import json
p1 = panel.ix[:2, :, :2] p2 = panel.ix[:, :, 2:] p1['ItemC'] = 'baz'
'master_roots': dict,
rules_for_course = CountryAccessRule.objects.select_related('country').filter( restricted_course__course_key=course_id )
__virtualname__ = 'pkg'
self.source_expressions.pop(0) return super(AsKML, self).as_sql(compiler, connection)
plt.subplots_adjust(wspace=0.25) plt.show()
from __future__ import absolute_import, print_function import random import string
contains_nontext = False
df = self.hist_df
continue
kwargs.update({'state': comps[0], 'fun': comps[1], '__id__': name, 'name': name})
for f in fields: f.required = False self.fields = fields
with ensure_clean_store(self.path) as store:
self._assert_chapter_loaded(self.course, self.chapter)
__func_alias__ = {'list_': 'list'}
if example_range: ex_range = slice(example_range[0], example_range[1]) else: ex_range = slice(None)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, call, NO_MOCK, NO_MOCK_REASON, MagicMock
self.make_course(pdf_textbooks=[HTML_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('html_book', book_index=0, chapter='xyzzy')
for member in val: if fnmatch.fnmatch(str(member).lower(), comps[1].lower()): return True return False
if not prepared: value = self.get_prep_value(value) return connection.ops.adapt_datefield_value(value)
self._verify_visibility_state(xblock_info, VisibilityState.ready)
self.submit_question_answer('p1', {'2_1': u'Correct'})
PROGRAMS_STUB_URL = os.environ.get('programs_url', 'http://localhost:8090')
EXAMPLE_SLUG = '15bb687e0c59ef2f0a49f6838f511bf4ca6c566dd45da6293cabbd9369390e1a'
dtype_max = dtype if is_integer_dtype(dtype) or is_bool_dtype(dtype): dtype_max = np.int64 elif is_float_dtype(dtype): dtype_max = np.float64
Number.objects.filter(pk=self.n.pk).update(integer=F('integer') * 15, float=F('float') * 42.7)
field = expression.output_field if value is None and field.empty_strings_allowed: value = '' if field.get_internal_type() == 'BinaryField': value = b'' return value
assert_not_equal(X_fit_transformed.size, 0)
geography = False geometry = False
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
expiration_date = models.DateField(default=None, null=True, blank=True)
if (n_inliers_best >= self.stop_n_inliers or score_best >= self.stop_score or self.n_trials_ >= _dynamic_max_trials(n_inliers_best, n_samples, min_samples, self.stop_probability)): break
def parse_command_line(self): args = distutils.dist.Distribution.parse_command_line(self)
class BandAdmin(ModelAdmin): exclude = ('bio',)
if addresses: if addresses[0] == 'None': addresses[0] = None elif addresses is None: addresses = [None]
_from_name_startingMonth = 12 _prefix = 'BQ'
super(XBlockAcidBase, self).setUp()
ret['comment'] = 'Event module not available. Beacon add failed.'
return min(self.management_form.cleaned_data[TOTAL_FORM_COUNT], self.absolute_max)
self.login_and_enroll() self.logout()
if not self.names: raise EmptyDataError( "No columns to parse from file")
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
comment, passed, retries = _install(quidditch, retries) if not passed: return (comment, str(passed))
return comdat['stderr']
if cache: __salt__['file.remove'](tfile)
ks = State.objects.get(name='Kansas') self.assertEqual('Lawrence', City.objects.get(point__relate=(ks.poly, within_mask)).name)
else: ret = _load_result(existing, ret)
ret['comment'] = ret['comment'] + ' and will be started' ret['result'] = None return ret
values = Series([u('fooBAD__barBAD'), NA, u('foo')])
self.assertRedirects(response, '/get_view/?var=value')
transaction.atomic(Callable())
msg = etree.tostring(fromstring_bs(msg, convertEntities=None), pretty_print=True)
self.assertIn( 'Update not available', self.run_function('softwareupdate.update', ['spongebob']))
ret['result'] = False ret['comment'] = 'Failed to create data pipeline {0}: {1}'.format( name, result_pipeline_definition['error']) return ret
b1 = b.reindex(index=reversed(b.index)) result = a.dot(b) tm.assert_frame_equal(result, expected)
self.refresh_course()
import numpy as np self.np = np if hasattr(np, 'getbuffer'): self._getbuffer = np.getbuffer else: self._getbuffer = memoryview
from __future__ import unicode_literals
return
user_exam_summary = get_attempt_status_summary( usage_info.user.id, unicode(block_key.course_key), unicode(block_key), ) return user_exam_summary and user_exam_summary['status'] != ProctoredExamStudentAttemptStatus.declined
if args is None: args = [] else: args = _normalize_args(args)
Membership.objects.create( membership_country_id=self.soviet_union.id, person_id=self.george.id, group_id=self.cia.id)
if enabled is not None: task_definition.Settings.Enabled = enabled if hidden is not None: task_definition.Settings.Hidden = hidden
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
for _ in xrange(30): response = self.client.post('/admin/login/', post_params) self.assertEquals(response.status_code, 200)
new_container = True
unique_name = uuid.uuid4().hex[0:30]
self.assertTrue(result_dict['success'])
self.assertTrue(filecmp.cmp(path_in, path_test))
func.restype = gdal_char_p
self.assertIn(str('Child Subject'), parent_s)
key, value = name.split('=', 1) kwargs[key] = value
itr = read_stata( fname, iterator=True, convert_dates=convert_dates, convert_categoricals=convert_categoricals) pos = 0 for j in range(5):
n_samples = len(digits.images) data = digits.images.reshape((n_samples, -1))
exception_classes = [StudentInputError, LoncapaProblemError, ResponseError] for exception_class in exception_classes:
from __future__ import absolute_import import os
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
enrollment.activate() self.assertTrue(CourseEnrollment.is_enrolled(user, course_id)) self.assert_no_events_were_emitted()
return response
elif existing['code'] == 404:
available_version = salt.utils.alias_function(latest_version, 'available_version')
if slug_is_numerical(slug): slug = slug + "_"
#])
if self.axis is not None: axis = self.obj._get_axis_number(self.axis) return self._getitem_axis(tup, axis=axis)
from __future__ import absolute_import import random import string from copy import deepcopy
#html_favicon = None
ss = tm.makeStringSeries() ts = tm.makeTimeSeries() ns = Series(np.arange(100))
cls.course_hidden_visibility = CourseFactory.create( display_name='Hidden_course', org='TestMicrositeX', catalog_visibility=CATALOG_VISIBILITY_NONE, emit_signals=True, )
puppet.__salt__ = {}
self.dispatch_table = copyreg.dispatch_table.copy()
results = [s for s in store.select('df', chunksize=chunksize)] result = concat(results) tm.assert_frame_equal(expected, result)
if (extmath.norm(my_mean - my_old_mean) < stop_thresh or completed_iterations == max_iter): return tuple(my_mean), len(points_within) completed_iterations += 1
upper_name = name.upper()
expected = DataFrame({'EXPIRY': [datetime(2005, 3, 1, 0, 0), None]})
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
self.assertRaises(NotImplementedError, store.select, 'df', '~(string="bar")')
self.assertNotIn('<span class="important-dates-item-text">$10</span>', resp.content)
for name in names: ret[name] = ''
lasso_lars = LassoLars(alpha=alpha, fit_intercept=False, verbose=verbose, normalize=False, precompute=gram, fit_path=False) lasso_lars.fit(dictionary.T, X.T, Xy=cov) new_code = lasso_lars.coef_
if self.subsample < 1.0: self.oob_improvement_ = np.zeros((self.n_estimators), dtype=np.float64)
from salt.utils.odict import OrderedDict from salt.modules import pillar as pillarmod
ident = re.sub(r' \[.+B\]$', '', ident) ret[ident] = True
import salt.utils
self.create_credentials_config() self.create_programs_config()
self.wait_for_element_presence(self.upload_image_popup_window_selector, 'upload dialog is present')
if user1['member_order'] == user2['member_order'] - 1: found = True break
class_priority = ['video', 'problem']
from salt.states import network
cmd = ['pkg', 'update', '-v', '--accept'] out = __salt__['cmd.run_all'](cmd, output_loglevel='trace', python_shell=False)
func = with_comprehensive_theme(EDX_THEME_DIR)(func)
key = self.index.get_loc(key)
import salt.utils
self._assert_certs_in_queue(mock_queue, 2)
return SlashSeparatedCourseKey(org, course, url_name)
s = pd.Series([1, 2, 3, 4]) self.assertEqual(s.index.dtype, np.int64)
return datetime.strptime(datestr, "%d%b%y:%H:%M:%S")
if datetime: values = lib.maybe_convert_objects(values, convert_datetime=datetime)
kwargs['close_fds'] = True
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
gp = GaussianProcessRegressor(kernel=kernel)
__virtualname__ = 'whoosh'
with override_settings(LANGUAGE_CODE=language_code, USE_L10N=True):
cls._field_list_filters.insert( cls._take_priority_index, (test, list_filter_class)) cls._take_priority_index += 1
return [update['Title'] for update in updates_verbose]
from __future__ import unicode_literals
courses_summary_list, __ = _accessible_courses_summary_list(self.request)
current_cert_bindings = list_cert_bindings(site)
qs = Experiment.objects.filter(end__lt=F('start') + datetime.timedelta(hours=1)) qs2 = qs.all() list(qs) list(qs2)
mnt_image = salt.utils.alias_function(mount_image, 'mnt_image')
stream.send('Server-side exception handling payload')
self.argtypes = [CS_PTR, c_uint, c_uint, dbl_param]
idx = Index(['a|b', 'a|c', 'b|c']) result = idx.str.get_dummies('|')
try: info_module.get_html() except ValueError: self.fail("CourseInfoModule could not parse an invalid date!")
log.warning(u"Unknown unit in Range header: %s for content: %s", header_value, unicode(loc))
'ENABLE_EDXNOTES': False,
initial_handlers = logging.root.handlers[:]
return tz
import salt.minion import salt.loader import salt.utils
n_candidates = 0 candidate_set = set() min_candidates = self.n_candidates * self.n_estimators while (max_depth > self.min_hash_match and (n_candidates < min_candidates or len(candidate_set) < n_neighbors)):
try: if self._offset in (BusinessHour, CustomBusinessHour): offset = self._get_offset(self._offset, value=100000) else: offset = self._get_offset(self._offset, value=10000)
updated_time = models.DateTimeField(auto_now=True)
self.verified_course_mode = CourseMode( course_id=self.verified_course_key, mode_slug=CourseMode.HONOR, mode_display_name="honor cert", min_price=self.cost ) self.verified_course_mode.save()
self._create_video()
youtube_id = videos.get('youtube', None) if youtube_id: transcripts_presence['is_youtube_mode'] = True
from __future__ import unicode_literals
if self.progress_callback: self.progress_callback("apply_success", migration, fake) return state
largefile = request.FILES['file_field2'] obj = FileModel() obj.testfile.save(largefile.name, largefile)
cls.live_server_url_test = [cls.live_server_url]
if override_uniques is None: override_uniques = [ [rename_mapping.get(n, n) for n in unique] for unique in model._meta.unique_together ]
indices = np.searchsorted(sorted_labels, labels[:n_labels]) tp_sum = tp_sum[indices] true_sum = true_sum[indices] pred_sum = pred_sum[indices]
category_name = "problem" return world.ItemFactory.create( parent_location=section_location(course), category=category_name, display_name=str(problem_type), data=problem_xml, metadata=metadata )
while re.search(RSTR_RE, stdout): stdout = re.split(RSTR_RE, stdout, 1)[1].strip()
test_df = DataFrame({'groups': [0, 0, 1, 1], 'random_vars': [8, 7, 4, 5]})
create_account(self.USERNAME, self.PASSWORD, self.EMAIL)
import salt.utils.gitfs from salt.exceptions import FileserverConfigError
>>> aapl = Options('aapl', 'yahoo')
hyper_parameters = expand(flatten(state.hyper_parameters), dict_type=ydict)
url(r'^get_proctored_exam_results$', 'instructor.views.api.get_proctored_exam_results', name="get_proctored_exam_results"),
response.wsgi_request = request
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
try: new_configuration = GroupConfiguration(request.body, course).get_user_partition() except GroupConfigurationsValidationError as err: return JsonResponse({"error": err.message}, status=400)
import salt.utils from salt.exceptions import CommandExecutionError
if sys.version_info[0] == 3: MAX_SIZE = sys.maxsize string_types = (str,) else: MAX_SIZE = sys.maxint string_types = (basestring,) from itertools import imap as map
self.assertEqual( first_request["parameters"]["request_uuid"], second_request["parameters"]["request_uuid"] )
else: self._send_immediate_response(False, message="Invalid request URL")
ints = Series([1, 2, 3])
form_desc.override_field_properties( "password", default="", field_type="hidden", required=False, label="", instructions="", restrictions={} )
mock_model_log_exception.assert_called_once_with( 'Error sending API user notification email for request [%s].', self.api_access_request.id ) self.assertEqual(self.api_access_request.status, ApiAccessRequest.APPROVED)
#html_title = None
Foo.objects.filter(d__gte=100000000000)
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21 13:30:05")
call_command('git_add_course', self.TEST_REPO, directory_path=self.git_repo_dir / 'edx4edx_lite', repository_branch=self.TEST_BRANCH)
lars_broken = linear_model.LassoLarsIC('<unknown>') assert_raises(ValueError, lars_broken.fit, X, y)
expected_body = json.dumps({'correct': True, 'score': 1, 'msg': '<div></div>'}) self._check_grade_response(callback_url, expected_header, expected_body)
log.info( 'Assuming network_mode \'{0}\' is a network.'.format( kwargs['network_mode']) )
type = ''
if indexers is None: indexers = {} self.block = block self.indexers = indexers self.shape = shape
cookies[settings.SESSION_COOKIE_NAME] = unicode(safe_cookie_data)
admin_email_handler.include_html = False try: self.client.get('/', HTTP_HOST='evil.com') finally: admin_email_handler.include_html = old_include_html
termination_criterion = EpochCounter(5)
with tm.assert_produces_warning(FutureWarning): rng += other tm.assert_index_equal(rng, expected)
repr(self.rng)
target_mod = module + '.' if not module.endswith('.') else module
signal_handler.reset_mock() unit = self.store.create_child(self.user_id, subsection.location, 'vertical') signal_handler.send.assert_not_called()
return stdout
key = _factor_indexer(N[1:], labels)
reverse_indexer = np.empty(len(sorter), dtype=np.int64) reverse_indexer.put(sorter, np.arange(len(sorter)))
_mixin_prio_ = 0
false_discovery_rate = np.mean([single_fdr(alpha, n_informative, random_state) for random_state in range(30)]) assert_greater_equal(alpha, false_discovery_rate)
assert False, "Tried to Extract from an invalid type."
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
result = f.clean('21.12.10') self.assertEqual(result, date(2010, 12, 21))
assert_raises(ValueError, _fast_dot, A, A[0, :][None, :])
est = DummyRegressor(strategy='mean') est.fit(X, y)
self.assertEqual(len(qs.exclude(publisher=-1)), 6)
self.assertRaises(ValueError, df.__setitem__, tuple(['test']), np.ones((4, 2)))
args = list(args) for a in self._AXIS_ORDERS:
if self.kind == 'period': return self.groupby._get_time_period_bins(self.ax) return self.groupby._get_time_bins(self.ax)
ret['hash_type'] = __opts__['hash_type']
HTTPServer.shutdown(self)
before_finders = list(settings.STATICFILES_FINDERS) before_dirs = list(settings.STATICFILES_DIRS)
from __future__ import absolute_import import logging
y_lower = clf.predict(xx)
if isinstance(sources, str): sources = sources.split(',') for src in sources: _get_src(tree_base, src, saltenv)
if isinstance(opts, string_types): opts = opts.split(',')
types = [i.data_type_ for i in sparse_classifier.estimators_]
assert_greater(np.abs(s[:k] - sa).max(), 0.01)
self.close_at = None self.closed_in_transaction = False self.errors_occurred = False
response_element.set("answer", str(answer))
response['Accept-Ranges'] = 'bytes' response['Content-Type'] = content.content_type
the_int = self.index.intersection(self.index) self.assertIs(the_int, self.index)
ASSET_AMOUNT_PER_TEST = (0, 1, 10, 100, 1000, 10000)
axes = ('b', 's', 0, 1, 'c') view_converter = StereoViewConverter(datum_shape, axes)
del __define_global_system_encoding_variable__
DATABASES = {}
res = dfmix.replace(r'\s*\.\s*', nan, regex=True) assert_frame_equal(dfmix, res.fillna('.'))
from sklearn.utils.linear_assignment_ import _hungarian
df2 = df.copy() df2.set_index(['A', 'B'], inplace=True) assert_frame_equal(df2, expected)
self.context['options'] = [(id_num, '<b>Option {0}</b>'.format(id_num)) for id_num in range(5)] self.context['value'] = 2
from __future__ import division import warnings import numpy as np from scipy import linalg
ALLOWED_HOSTS = []
if location.category in DIRECT_ONLY_CATEGORIES: raise InvalidVersionError(location)
plt.scatter(X[:, 0], X[:, 1], c=targets_train, cmap=plt.cm.Paired)
df['foo'] = np.ones((4, 2)).tolist()
from __future__ import absolute_import
enable_sig_handler('SIGINFO', _handle_sigusr1)
from sklearn import datasets datasets.mldata.urlopen = mock_mldata_urlopen(mock_datasets)
for item in mask.split(','): if item not in _MASK_TYPES: return 'Invalid mask type: {0}' . format(item)
self.lc_block.source_library_id = "" result = self.lc_block.validate()
connection.prepare_database() executor = MigrationExecutor(connection, self.migration_progress_callback)
response = self.api_response()
django_settings.SOCIAL_AUTH_LOGIN_REDIRECT_URL = _SOCIAL_AUTH_LOGIN_REDIRECT_URL
self.runtime.set('location', self.location.to_deprecated_string())
from salt.states import aptpkg
self.teams_page.click_specific_topic("Example Topic") self.teams_page.verify_topic_team_count(1)
grouped = values.groupby(labels)
container = self.go_to_nested_container_page() self.verify_groups(container, ['alpha', 'gamma'], ['beta'])
/etc/redis/redis.conf: file.managed: - source: salt://redis.conf - template: jinja - context: bind: 127.0.0.1
EMAIL_PORT = 25
return self._shallow_copy(tz=tz)
from __future__ import unicode_literals
CONFIG_FILE = open(settings.REPO_ROOT / "docs" / "cms_config.ini") CONFIG = ConfigParser.ConfigParser() CONFIG.readfp(CONFIG_FILE)
self.assert_numpy_array_equal(c._codes, np.array([3, 2, 1, 0, 3], dtype=np.int8))
courses_list_by_groups, __ = _accessible_courses_list_from_groups(self.request)
try: matches = CONTENT_RE.search(request.META["HTTP_CONTENT_RANGE"]) content_range = matches.groupdict()
if n_features > 1: X = np.hstack([X, np.random.randn(n_samples, n_features - 1)]) return X, y
clear_pw = True password = ''.join(random.SystemRandom().choice( string.ascii_uppercase + string.digits) for x in range(15))
if self.depth == self.num_fields - 1:
partial_credit = xml.xpath('.')[0].get('partial_credit', default=False)
canonical_request = '\n'.join(( method, uri, querystring, canonical_headers, signed_headers, payload_hash ))
from __future__ import absolute_import import os import shutil
model_channels = model.get_monitoring_channels(nested_ipt[-1]) channels = {} for name in model_channels: channels[name] = (model_channels[name], nested_ipt[-1], (spaces[-1], sources[-1])) custom_channels.update(channels)
(instance_id, region) = _get_instance_info()
s1.plot()
ret = self.run_state('ssh_known_hosts.absent', test=True, **kwargs) self.assertSaltTrueReturn(ret)
EmptyPromise( lambda: cohort_name == cohort_management_page.get_selected_cohort(), "Waiting for new cohort" ).fulfill() cohort_management_page.add_students_to_selected_cohort([student])
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
le = LabelEncoder() ret = le.fit_transform([1, 1, 4, 5, -1, 0]) assert_array_equal(ret, [2, 2, 3, 4, 0, 1])
arguments[kwargs_param.name] = kwargs
(('custom',), {}, '<label for="id_field">custom:</label>'),
if key is None: continue
salt '*' schedule.list show_disabled=False
self.assertFalse(self.index.is_numeric())
try: self._destructor(self._ptr) except (AttributeError, TypeError):
result = self.panel.reindex(items=['ItemA', 'ItemB']) assert_frame_equal(result['ItemB'], ref)
self.assertRaises(ValueError, TimedeltaIndex, ['1 days', '2 days', '4 days'], freq='D')
'USE_MICROSITES': False,
microsite.enable_microsites_pre_startup(log)
if isinstance(plotf, compat.string_types): from pandas.tools.plotting import _plot_klass plotf = _plot_klass[plotf]._plot
self.mock_tracker.reset_mock() try: views.server_track(request, str(sentinel.event_type), '{}')
self.assertTrue(self.cohort_management_page.is_save_button_disabled(key))
import salt import salt.utils.odict import salt.utils import salt.utils.dictupdate import salt.utils.network from salt.exceptions import CommandExecutionError, SaltInvocationError import salt.utils.cloud import salt.config
self.testing_course.enrollment_start = self.tomorrow self.testing_course.enrollment_end = self.nextday self.testing_course = self.update_course(self.testing_course, self.user.id)
log = logging.getLogger(__name__)
data = 'a b c\n4 apple bat 5.7\n8 orange cow 10'
CREDIT_TASK_DEFAULT_RETRY_DELAY = 30
dropout_input_mask_value = 0.
self._lookup_joins = join_list
{% from 'lib.sls' import pythonpkg with context %}
current_year = datetime.datetime.now().year self.set_year_of_birth(current_year - 10) self.assertFalse(self.profile.requires_parental_consent())
initialize_permissions(new_course.id, user) return new_course
env_fail_fast_set = ( 'TESTS_FAIL_FAST' in os.environ and os.environ['TEST_FAIL_FAST'] )
self._post = QueryDict(mutable=True) self._files = MultiValueDict()
pull_result = __salt__['dockerng.pull']( image, client_timeout=client_timeout, )
ENV_TOKENS = convert_tokens(ENV_TOKENS)
root_dir = path(mkdtemp_clean()) print 'Exporting to tempdir = {0}'.format(root_dir) export_course_to_xml(self.store, content_store, course.id, root_dir, 'test_export')
from salt.states import schedule
'verify_env': bool,
v_sample = tensor.matrix('ais_v_sample') beta = tensor.scalar('ais_beta')
lines.append(line) continue
result = s.ewm(com=com, adjust=adjust).mean() tm.assert_series_equal(result, expected)
full_url = "http://{site_name}".format(site_name=settings.SITE_NAME) parsed_url = urlparse(full_url)
U = rng.randn(self.dim, self.dim) U, _ = scipy.linalg.qr(U)
(['honor', 'verified', 'audit']),
resp = self.create_xblock(category='static_tab') usage_key = self.response_usage_key(resp)
responder.update_score(score_msg, cmap, queuekey)
time.sleep(0.01) ret = render(input_data, saltenv, sls, **render_kwargs)
return self.q(css="#prereq").visible
for minion in minion_tracker[queue]['minions']: if minion not in parts: parts[minion] = {} parts[minion]['ret'] = {}
return
elif inferred_type in ['mixed']:
self.assertFalse(self.store.has_changes(self.store.get_item(self.course.location)))
break
s = s.apply(str) s[2] = 'nat' result = to_datetime(s, format='%Y%m%d') assert_series_equal(result, expected)
tm._skip_if_no_pytz() import pytz
from salttesting import skipIf, TestCase from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
alt_methods = { 'barycentric': interpolate.barycentric_interpolate, 'krogh': interpolate.krogh_interpolate, 'from_derivatives': _from_derivatives, 'piecewise_polynomial': _from_derivatives, }
err = Exception mock_index_dictionary.return_value = err
y1 = np.array([[0, 1, 1], [1, 0, 1]]) y2 = np.array([[0, 0, 1], [1, 0, 1]])
self.params['wkt'] = ''
if frame: try: func_name = frame.f_globals['__func_alias__'][func.__name__] except (AttributeError, KeyError): func_name = func.__name__
Sdist.run(self)
df = _make_frame() df.to_csv(path, tupleize_cols=False) result = read_csv(path, header=[0, 1], index_col=[ 0], tupleize_cols=False) assert_frame_equal(df, result)
('BACKGROUND', (1, 2), (1, 2), '#EEEEEE'),
if os.system('sphinx-build -b latex -d build/doctrees ' 'source build/latex'): raise SystemExit("Building LaTeX failed.")
'context_processors.doc_url',
if delete_vertical: self.store.delete_item(vertical1.location, self.user.id) else: self.store.delete_item(problem1.location, self.user.id)
try: shutil.rmtree(lock_file) except OSError as exc: _add_error(failed, exc)
pass
if not isinstance(course_id, basestring): raise ValueError('course_id must be a string. {} is not acceptable.'.format(type(course_id)))
new_groups = [Group(10, 'New Group 10'), Group(20, 'New Group 20'), Group(30, 'New Group 30')] new_user_partition = UserPartition(
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
rng = np.random.RandomState([2014, 11, 4]) start = 0 stop = 990 num_examples = 1000 num_feat = 5 num_classes = 2
self.course_info_page.visit() self.tab_nav.go_to_tab('Test Static Tab') self.assertTrue(self.tab_nav.is_on_tab('Test Static Tab'))
exit=False)
local_name = os.path.join(self.dataset_local_dir, os.path.relpath(remote_name, self.dataset_remote_dir))
os.environ['EXPENSIVE_TESTS'] = 'True'
refetched = self.store.get_item(discussion_item.location)
registration_codes_list = CourseRegistrationCode.objects.filter( course_id=course_id ).order_by('invoice_item__invoice__company_name')
return graders[self.credit_type[0]]( student_answers=student_answers )
s = self.ts.iloc[[0]] result = s.sem(ddof=1) self.assertTrue(isnull(result))
with check_mongo_calls(chapter_queries_1): self.client.get(outline_url, HTTP_ACCEPT='application/json')
from salt.modules import systemd
from salt.ext import six
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21")
supports_forward_references = True
key = Timestamp(key, tz=self.tz) return Index.get_loc(self, key, method, tolerance)
loader.build_graph() self.assertEqual(num_nodes(), 5)
assert_raises(ValueError, plot_partial_dependence, clf, iris.data, [0, 1], label='foobar', grid_resolution=grid_resolution)
call_command('manage_group', TEST_GROUP, '--remove') self.check_groups([])
if not dummy_na and len(levels) == 0: return get_empty_Frame(data, sparse)
if not name and not pkgs: return 'Must pass a single package or a list of packages'
idx1 = pd.period_range('2011-01-01', '2011-01-31', freq='D', name='idx')
except (AttributeError, ValueError): return None
split_test = self.get_item_from_modulestore(self.split_test_usage_key, verify_is_draft=True) self.assertEqual(partition_id, split_test.user_partition_id) return split_test
if not mask_all: left_indexer = mask.nonzero()[0][left_indexer]
return self
course_group.users.remove(user) user.course_groups.remove(course_group)
clf1 = LogisticRegressionCV(cv=precomputed_folds) target_copy = target.copy() target_copy[target_copy == 0] = 1 clf1.fit(train, target_copy)
real_answers = problem.get_question_answers()
if regex_re: to_replace = regex
self.assertNotContains(resp, 'Robot_Course_Outside_Microsite')
p = mp.Process(target=train_mlp) p.start()
url( r'^u/(?P<username>[\w.@+-]+)$', 'student_profile.views.learner_profile', name='learner_profile', ),
self.assertIn('<span class="important-dates-item-text">$10</span>', resp.content)
data.pop() for minion, ret in data: ret[minion] = json.loads(ret)
log = logging.getLogger(__name__)
self.q(css=".contribution-option > input").first.click() self.q(css="input[name='verified_mode']").click()
if course.discussion_link: return CourseTab.load( 'external_discussion', name=_('External Discussion'), link=course.discussion_link )
self.assertEqual(new_version.test_content_field, 'Explicitly set') self.assertEqual(new_version.test_settings_field, 'Explicitly set')
response = self.client.get(reverse('admin:admin_views_recipe_changelist'), {TO_FIELD_VAR: 'rname'}) self.assertEqual(response.status_code, 200)
self.assertEqual( pueblo_json, City.objects.annotate(geojson=functions.AsGeoJSON('point')).get(name='Pueblo').geojson )
self.assertRaises(IndexError, df.iloc.__getitem__, tuple([10, 5]))
if regex and pattern: rx = re.compile(to_replace) else: return super(ObjectBlock, self).replace(to_replace, value, inplace=inplace, filter=filter, regex=regex, mgr=mgr)
from pylearn2.utils import utlc
stream1 = StringIO() stream2 = StringIO() handler1 = StreamHandler(stream1) handler2 = StreamHandler(stream2)
if pat in _registered_options: return [pat]
mask = inds != -1 ok_labels, uniques = algos.factorize(inds[mask], sort=True)
self.assertIn("Password Reset Email Sent", self.reset_password_page.get_success_message())
hashes[clean_path(full_cython_path)] = current_hash
feature_names=feature_names[:-1], DESCR=descr_text)
pass
if return_type not in self._valid_return_types: raise ValueError( "return_type must be {None, 'axes', 'dict', 'both'}")
update_course_structure(unicode(self.course.id))
if Y is not None: H_hat[-1] = Y
start, stop, step = key.start, key.stop, key.step
df1 = DataFrame([]) df2 = DataFrame([]) result = df1.append(df2) expected = df1.copy() assert_frame_equal(result, expected)
}
_ptr = None
self.client.login(username=self.global_staff.username, password="test") self._assert_certificates_visible(False)
if compress: render = render_to_kmz else: render = render_to_kml return render('gis/kml/placemarks.kml', {'places': placemarks})
EmptyPromise( lambda: self.current_form != old_form, "Finish toggling to the other form" ).fulfill()
yield check_pipeline_consistency
from salt.states import lvm
from __future__ import absolute_import import logging
idx1 = pd.PeriodIndex([pd.NaT, '2011-01-01', '2011-01-02', '2011-01-03'], freq='D') self.assertTrue(idx1.is_monotonic)
from __future__ import absolute_import
self.assertTrue(search_paths[1].endswith(deploy_path))
self.assert_social_auth_does_not_exist_for_user(created_user, strategy)
self.assertTrue('Activate Course Enrollment' in response.content)
reindexed_bool = bool_ts.reindex(bool_ts.index[::2]) self.assertEqual(reindexed_bool.dtype, np.bool_)
self.assertTrue(f.has_changed('', {'filename': 'resume.txt', 'content': 'My resume'}))
self.__messages.pop(0)
PIPELINE_JS_COMPRESSOR = None
strip_filenames(initial_course) strip_filenames(exported_course)
clf = OneVsRestClassifier(base_clf).fit(X, Y) y_pred = clf.predict([[0, 0, 4]])[0] assert_array_equal(y_pred, [0, 0, 1])
if load['jid'] == 'req': load['jid'] = prep_jid(nocache=load.get('nocache', False))
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'azure' PROFILE_NAME = 'azure-test' REQUIRED_AZURE = '0.11.1'
'submissions', 'openassessment', 'openassessment.assessment', 'openassessment.fileupload', 'openassessment.workflow', 'openassessment.xblock',
url( r'^courses/{course_key}/xblock/{usage_key}/view/(?P<view_name>[^/]*)$'.format( course_key=settings.COURSE_ID_PATTERN, usage_key=settings.USAGE_ID_PATTERN, ), 'courseware.module_render.xblock_view', name='xblock_view', ),
TRAILING_PUNCTUATION_RE = re.compile(
for axes_row in all_axes: for axes in axes_row: axes.get_xaxis().set_visible(False) axes.get_yaxis().set_visible(False)
msg = EmailMessage(subject, None, from_address, [to_address]) msg.attach(notification_msg) msg.send()
rbf_transform = RBFSampler(gamma=gamma, n_components=1000, random_state=42) X_trans = rbf_transform.fit_transform(X) Y_trans = rbf_transform.transform(Y) kernel_approx = np.dot(X_trans, Y_trans.T)
self._set_selection_from_grouper()
xml = etree.fromstring(expr) xml = self.formulaInstance.preprocess_pmathml(xml) test = etree.tostring(xml)
parser.add_argument('repository_url') parser.add_argument('--directory_path', action='store') parser.add_argument('--repository_branch', action='store')
from .tasks import update_library_index
if len(bits) >= 3 and len(bits) <= 6:
kwds_no_nanos = dict( (k, v) for k, v in self.kwds.items() if k not in ('nanosecond', 'nanoseconds') ) use_relativedelta = False
cases = [Series([]), Series([np.nan, np.nan])]
import integration
final_alpha = 1e-5 low_reg_model = ElasticNet(alpha=final_alpha).fit(X, y)
blocks_stack.extend(children)
import salt.config import salt.loader
return []
from salt.modules import redismod from datetime import datetime
if sys.platform.startswith('java'): memoryview = memoryview else: memoryview = buffer buffer_types = (bytearray, memoryview)
startup_info = STARTUPINFO(dwFlags=win32con.STARTF_USESTDHANDLES, hStdInput=dupin, hStdOutput=c2pwrite, hStdError=errwrite)
with self.assertRaises(TypeError): cntry_g.country_code(17) with self.assertRaises(TypeError): cntry_g.country_name(GeoIP2)
return response
if columns is not None and self.is_multi_index: for n in self.levels: if n not in columns: columns.insert(0, n)
ContentType.objects.clear_cache()
import logging import socket import time
is_increasing = assert_no_warnings(check_increasing, x, y) assert_false(is_increasing)
self.assertFalse( self.run_function('softwareupdate.update_available', ['spongebob']))
fifth = -(e.count('.'))
from __future__ import unicode_literals
AUTHOR_VIEW = 'author_view'
from salt.modules import schedule from salt.utils.event import SaltEvent
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
import os import tarfile import tempfile import json import shutil from contextlib import closing
return _get_enabled_disabled("false")
pythoncom.CoInitialize()
self.assertFalse(check_password({}, 'test', 'incorrect'))
AFFILIATE_COOKIE_NAME = ENV_TOKENS.get('AFFILIATE_COOKIE_NAME', AFFILIATE_COOKIE_NAME)
true_sum = pred_sum = tp_sum = np.zeros(len(labels))
check_cohorted(False)
title = None
self.navigate_to_video()
return 'localtime'
response = self._credit_provider_callback(request_uuid, "approved", sig="invalid") self.assertEqual(response.status_code, 403)
signature = _compute_signature(real_parameters, access_key_secret, 'GET', '/iaas/') real_parameters['signature'] = signature
self.assertRaises(TypeError, lambda: tdi + Int64Index([1, 2, 3]))
import pandas
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'vultr'
from salt.modules import debian_service
if kwargs: salt.utils.warn_until( 'Carbon', 'kwargs must be passed inside the low under "kwargs"' )
NAME_CHARS = u'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-' NAME_CHARS_W_UNICODE = NAME_CHARS + u'àĚŘǅΦШΩΣӔ'
self.make_course(pdf_textbooks=[PDF_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('pdf_book', book_index='fooey', chapter=1)
released_languages = [ Language(tuple[0], tuple[1]) for tuple in settings.LANGUAGES if tuple[0] in released_language_codes ]
site_configuration_history = SiteConfigurationHistory.objects.filter( site=site_configuration.site, ).all()
indexer_obj = Series(indexer_obj, self.tsframe.index)
'to-port',
from __future__ import absolute_import import os import os.path import logging import time
MULTILABELS_METRICS = [ "accuracy_score", "unnormalized_accuracy_score", "hamming_loss", "jaccard_similarity_score", "unnormalized_jaccard_similarity_score", "zero_one_loss", "unnormalized_zero_one_loss",
self.payment_and_verification_flow.webcam_capture() self.payment_and_verification_flow.next_verification_step(self.immediate_verification_page)
sparse = self.dense1.to_sparse(fill_value=0) sparse3 = self.dense3.to_sparse(fill_value=0)
getitem = self._data.__getitem__ promote = self._shallow_copy
__virtualname__ = 'cisconso'
block = self._add_simple_content_block()
SOCIAL_MEDIA_FOOTER_URLS = {}
geos_version = GEOSFuncFactory('GEOSversion', restype=c_char_p)
rng = date_range('1/1/2000', '1/30/2000', tz='US/Eastern') frame = DataFrame(np.random.randn(len(rng), 4), index=rng)
pred = km.predict(km.cluster_centers_) assert_array_equal(pred, np.arange(n_clusters))
detached_locations = [ course_id.make_usage_key('static_tab', 'StaticTab'), course_id.make_usage_key('course_info', 'updates'), ]
if context is not None: return nested(self._capture_assertion_errors(), context)
if "field_type" in kwargs: kwargs["type"] = kwargs["field_type"]
self.assertRaises(TypeError, store.append, 'df', Series(np.arange(10)))
with tm.assertRaises(UndefinedVariableError): df.query('@a > b > @c', engine=engine, parser=parser)
new_settings = get_container_setting(name=name, container=container, settings=settings.keys()) failed_settings = dict()
unenroll_email( course_id=ccx_key, student_email=staff.email, email_students=send_email, email_params=email_params, )
self._assert_course_verification_status(VERIFY_STATUS_APPROVED)
try: atomic_replace(temp_filename,local_dst) except Exception as e: raise IOError("[ac] %s %s --> %s" % (str(e),temp_filename,local_dst))
ret = {}
continue
fd = None if body is not None: h['content-length'] = '{0}'.format(len(body)) fd = StringIO(body)
expected = ts[1:3]
if db != 'read_replica': DATABASES[db].update(get_db_overrides(db))
if shuffle: X, y = util_shuffle(X, y, random_state=generator)
with self.assertRaises(AttributeError): (DataFrame(vals).rolling(5, win_type='boxcar', center=True) .std())
self.user.profile.mailing_address = None self.user.profile.save()
definition_xml.attrib.update(xml_object.attrib)
for k in margin_keys: if isinstance(k, compat.string_types): row_margin[k] = grand_margin[k] else: row_margin[k] = grand_margin[k[0]]
urlpatterns = super(UnchangeableObjectAdmin, self).get_urls() return [p for p in urlpatterns if p.name and not p.name.endswith("_change")]
self.browser.refresh() profile_page.wait_for_page() self.verify_profile_page_is_public(profile_page)
class MyForm(forms.Form): text = forms.CharField(label=mark_safe('<i>text</i>')) cb = forms.BooleanField(label=mark_safe('<i>cb</i>'))
with tm.assert_produces_warning(FutureWarning): pd.SparseTimeSeries(1, index=pd.date_range('20130101', periods=3))
sub = salt.utils.cloud.simple_types_filter(cur) sub.update({'tag': name}) ret.append(sub)
totals_data.append( ['', '{tax_label}: {tax_id}'.format(tax_label=self.tax_label, tax_id=self.tax_id)] )
return _concat_compat([np.array(x, copy=False, dtype=object) for x in to_concat], axis=0)
_, mod = include('a-non-pydsl-sls', 'a-pydsl-sls')
values = to_timedelta(values, errors='coerce', box=False)
sampling_algorithm["custom-reservoir-sampling"] = \ lambda n_population, n_samples, random_state=None: \ sample_without_replacement(n_population, n_samples, method="reservoir_sampling", random_state=random_state)
self.assert_navigation_state('Test Section 1', 'Test Subsection 1,1', 0, next_enabled=True, prev_enabled=False)
self.assertEqual(new_bob_profile._state.db, None) self.assertEqual(charlie._state.db, None)
if '_when' not in data: data['_when'] = when
if six.PY2: tb = tb.tb_next elif not tb.tb_next and exceptions: exc_value = exceptions.pop() tb = exc_value.__traceback__ else: tb = tb.tb_next
s = Series(['A|B|C'])
ret[key] = {'old': '', 'new': new[key]}
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
mock_threads.return_value = CommentClientPaginatedResult(collection=[], page=1, num_pages=1)
rng = pd.date_range('2012-06-12', periods=4, freq='h')
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
return self.asfreq()
import salt.utils.mac_utils from salt.exceptions import CommandExecutionError
return ret
add_arg('-m', '--match', dest='match', action='append')
self.assertEqual(safe_key('test', 5, 'version'), '5:version:test')
if n_components == X.shape[1]: assert_array_almost_equal(X, X2)
v_mean, v_var = self.mean_var_v_given_h_s(h_sample, s_sample) v_mean_shape = (batch_size, self.nvis) v_sample = rng.normal(size=v_mean_shape) * tensor.sqrt(v_var) + v_mean
h = {'Host': '127.0.0.1'}
result = df.fillna(df.max()) expected = df.fillna(df.max().to_dict()) assert_frame_equal(result, expected)
self.m2m_db_table = curry(self._get_m2m_db_table, cls._meta)
self.mock.reset_mock() request = self._create_ssl_request(self.MOCK_URL) request.user = UserFactory() dec_mock(request) self.assertTrue(self.mock.called)
from pytz.exceptions import AmbiguousTimeError ts = pd.Timestamp('2015-11-1 01:00') self.assertRaises(AmbiguousTimeError, ts.tz_localize, 'US/Pacific', errors='coerce')
import salt.utils.extmods
self.assertQuerysetEqual( LoopX.objects.all().order_by('y__x__y__x__id'), [] )
numpydoc.setup(app, get_doc_object)
pipeline = Pipeline([ ('vect', TfidfVectorizer(min_df=3, max_df=0.95)), ('clf', LinearSVC(C=1000)), ])
alpha_scaled = float(alpha) / n_samples
alias, driver = driver.split(':')
exc_info_on_loglevel=logging.DEBUG
class Person(Form): first_name = CharField() prefix = 'foo'
self.assertEqual(result, allow_access)
from salt.modules import pip from salt.exceptions import CommandExecutionError
csv_file = open(path, 'r')
ALL_USERS_VISIBILITY = 'all_users'
if a not in kwargs: try: kwargs[a] = args.pop(0) except IndexError: if require_all: raise TypeError("not enough/duplicate arguments " "specified!")
sample_weight = self._validate_sample_weight(sample_weight, n_samples)
class SimpleTestCaseSubclass(SimpleTestCase): pass
with patch('os.path.isfile', MagicMock(return_value=False)) as mock: local_cache.clean_old_jobs()
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
launchctl.__salt__ = {}
centers = km.cluster_centers_ assert_equal(centers.shape, (n_clusters, n_features))
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath ) ensure_in_syspath('../../')
return True
img[:, ring_w:ring_w + inner_h, ring_w:ring_w + inner_w] = inner_img
def test_bytes_io(self): _skip_if_no_xlrd()
if not dataset: ret['error'] = 'one or more snapshots must be specified'
import sys import time import binascii from datetime import datetime import hashlib import hmac import logging import salt.config import re
if not os.path.exists(path): error = '"{0} not found.'.format(path) log.error(error) raise CommandExecutionError(error)
container.add_missing_groups() self.verify_groups(container, ['alpha', 'gamma'], ['beta'])
self.assertRaises(Exception, grouped.aggregate, lambda x: x * 2)
if mode in ['r', 'r+']: def f():
self.assert_index_equal(lexsorted_mi, not_lexsorted_mi) with self.assert_produces_warning(PerformanceWarning): self.assert_index_equal(lexsorted_mi.drop('a'), not_lexsorted_mi.drop('a'))
elif (self.closed() and not is_survey_question) or needs_reset: return False else: return True
return '__file__' in globals()
from django.utils.six.moves import cPickle import pickle
kernel = RBF(length_scale=1.0)
from openedx.core.djangoapps.credit.api.eligibility import ( is_credit_course, )
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
mode = CourseMode.objects.get(course_id=course_key, mode_slug=mode_slug) mode.expiration_datetime = upgrade_deadline mode.save()
partitions += _other_partitions(verified_partitions, partitions, course_key) course.set_user_partitions_for_scheme(partitions, scheme) modulestore().update_item(course, ModuleStoreEnum.UserID.system)
ext_user = User.objects.get(email=self.ext_user.email) self.assertTrue(auth.user_has_role(ext_user, CourseInstructorRole(self.course.id)))
clipboard_get = paste clipboard_set = copy
if instance_id is None: return { 'Error': 'A valid instance_id or resource_id was not specified.' }
'master_shuffle': bool,
with salt.utils.flopen(filename, 'rb') as _fp: _contents = _fp.read() result = gpg.encrypt(_contents, recipients, passphrase=gpg_passphrase, output=output)
self.assertEqual(module.attempts, 0)
if _level: return results return list(compat.itervalues(results))[0]
count += 1
with self.assertRaises(TypeError): Polygon(0, [1, 2, 3]) with self.assertRaises(TypeError): Polygon('foo')
if isinstance(arr, np.ndarray): pass
with restrict_course(self.course.id) as redirect_path: self.assert_access_denied(redirect_path)
formset = cl.formset = None
with self.assertRaises(SearchIndexingError): reindex_course_and_check_access(self.course.id, self.user)
from __future__ import print_function from __future__ import absolute_import from os.path import splitext, abspath from sys import modules
scal_points = new_W / norms.dimshuffle('x',0)
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandExecutionError, MinionError
self.assertEqual(Article.objects.get(pk=self.a.id), self.a)
self.dbs[db].remove()
PACKAGES_TO_UNINSTALL = [
from sklearn.tree._tree import TREE_LEAF k = 4
self.assertIn(k, body_plain)
exp_col = pd.Series(cats, index=idx, name='cats')
def single_fdr(alpha, n_informative, random_state): X, y = make_regression(n_samples=150, n_features=20, n_informative=n_informative, shuffle=False, random_state=random_state, noise=10)
node = _guess_node_id(node) apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
_validate_username(username) _validate_password(password, username) _validate_email(email)
import ioflo.base.deeding
@python_2_unicode_compatible class Entry(models.Model): name = models.CharField(max_length=10) topics = models.ManyToManyField(Tag) related = models.ManyToManyField(Tag, related_name="similar")
export_fs.makeopendir('policies')
f = lambda x: x.encode(encoding, errors)
SHORT_DATE_FORMAT = 'm/d/Y'
os.chdir(os.path.dirname(os.path.abspath(__file__)))
self.assertEqual( victoria_json, City.objects.annotate( geojson=functions.AsGeoJSON('point', bbox=True) ).get(name='Victoria').geojson )
offset_n = self._get_offset(offset, normalize=True) self.assertFalse(offset_n.onOffset(dt))
self.instructor = AdminFactory.create() self.client.login(username=self.instructor.username, password="test")
class VeryLongModelNamezzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(models.Model): title = models.CharField(max_length=11)
test_image = Image() test_image.save() foo_image = FooImage(my_image=test_image) foo_image.save()
#html_sidebars = {}
stores = [{'NAME': name, 'ENGINE': 'This space deliberately left blank'} for name in names]
return JsonResponse({ 'url': reverse_url('course_handler'), 'destination_course_key': unicode(destination_course_key) })
import salt.utils
handler404 = 'contentstore.views.render_404' handler500 = 'contentstore.views.render_500'
if dE < tol * errors[-1]: if verbose == 1: print("") elif verbose: print("--- Convergence reached after %d iterations" % ii) break
world.disable_jquery_animations() world.css_click(component_button_css)
with tm.assertRaisesRegexp(ValueError, 'fill value must be in categories'): idx.fillna(2.0)
new_data = new_data.reshape((4, 11, -1)) real_data = digits.data[:44].reshape((4, 11, -1))
set_inventory_base_uri_default(__opts__, kwargs)
pickle.dumps(x, 0) pickle.dumps(x, 1) pickle.dumps(x, 2)
recorder.record_applied("migrations", "3_auto") loader.build_graph() self.assertEqual(num_nodes(), 4)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if request.user.is_authenticated(): return redirect(redirect_to)
self.assertTrue('success' in result and not result['success'])
import ioflo.app.run from ioflo.base.consoling import getConsole
date = datetime_safe.new_datetime(date) time_str = date.strftime('%Y-%m-%dT%H:%M:%S')
from __future__ import absolute_import
log.warning('Local mode detected. Event with tag {0} will NOT be sent.'.format(tag)) return False
p1 = p4d.ix[:, :2, :, :2] p2 = p4d.ix[:, :, :, 2:] p1['L5'] = 'baz'
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] h1_state = layer_to_state[h1] h2_state = layer_to_state[h2]
from salttesting import TestCase from salttesting.mock import Mock, patch, mock_open
le = LabelEncoder() if isinstance(class_weight, dict) or multi_class == 'multinomial': class_weight_ = compute_class_weight(class_weight, classes, y) sample_weight *= class_weight_[le.fit_transform(y)]
HAS_LIBS = False try: import azure HAS_LIBS = True except ImportError: pass
__opts__ = salt.config.client_config( os.environ.get('SALT_MINION_CONFIG', '/etc/salt/minion'))
apache2.service.running()
VENDOR_EXT_PATTERN = re.compile('^x-')
continue
if instance.state == CourseCreator.PENDING: send_admin_notification.send( sender=sender, user=instance.user )
last_element = t.nodes[-1] self._dispatch(last_element)
if not getattr(view, 'csrf_exempt', False): inner = csrf_protect(inner) return update_wrapper(inner, view)
start_index = end_triple_quote_match.start()
(32, False, True, u"True"),
self.assertEquals(self.get_about_page_link(), "//localhost:8000/courses/mitX/101/test/about")
component.display_name = 'Changed Display Name'
context['company_tos_urltext'] = _("Terms of Service &amp; Honor Code")
tm._skip_if_no_scipy()
'lang_pref.middleware.LanguagePreferenceMiddleware',
kwds['bottom'] = self.bottom kwds['bins'] = self.bins return kwds
exc_type, exc_value, exc_tb = sys.exc_info()
METRICS_WITH_NORMALIZE_OPTION = [ "accuracy_score", "jaccard_similarity_score", "zero_one_loss", ]
ret = {'name': '', 'changes': {}, 'result': False, 'comment': ''}
self.courseware_page.stop_timed_exam()
qs = RasterModel.objects.filter(rast__dwithin=(stx_pnt, 500)) self.assertEqual(qs.count(), 1)
'post_params_decline': post_params_decline
self._assert_redirects_to_instructor_dash(response)
self.contentstore.delete(asset_key)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, Mock, NO_MOCK, NO_MOCK_REASON )
self.init_.fit(X, y, sample_weight)
self.assertEqual(tab.link_func(self.course, self.reverse), expected_link)
super(SendMsgBot, self).__init__(jid, password)
self.post_process(root, export_fs)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
Y = np.zeros((y.shape[0], self.K), dtype=np.float64) for k in range(self.K): Y[:, k] = y == k
reg_code = CourseRegistrationCode.objects.get(code=reg_code.code) self.assertEqual(reg_code.is_valid, False)
Car.cars.create(name="Corvette", mileage=21, top_speed=180) Car.cars.create(name="Neon", mileage=31, top_speed=100)
assert_array_almost_equal(my_X, X)
_ALIASES = {'x_compat': 'xaxis.compat'} _DEFAULT_KEYS = ['xaxis.compat']
msg = 'no signature found for builtin function {0!r}'.format(obj) raise ValueError(msg)
text = f.widget.format_value(result) self.assertEqual(text, "13:30:00")
self.assertRaises(TypeError, rng.__lt__, rng[3].value)
test_data = {'x': 'y', 'v': 'z', 'd': {'o': object, 'a': 'b'}}
def item_title(self): return "Not in a template"
return missing.interpolate_1d(index, x, method=method, limit=limit, limit_direction=limit_direction, fill_value=fill_value, bounds_error=False, **kwargs)
course_image_asset_key = StaticContent.compute_location(course.id, course.course_image) course_image_content = StaticContent(course_image_asset_key, image_name, 'image/jpeg', image_buff) contentstore().save(course_image_content)
cls.apply_policy(metadata, runtime.get_policy(usage_id))
if not assume_centered: X = X - X.mean(0)
Group.objects.all().delete() for i in range(objects_count): Group.objects.create(name='test band')
_max_parts = self._HEXTET_COUNT + 1 if len(parts) > _max_parts: msg = "At most %d colons permitted in %r" % (_max_parts-1, ip_str) raise AddressValueError(msg)
image = Image.objects.create() as_file = File.objects.get(pk=image.pk) FooFileProxy.objects.create(my_file=as_file)
panel = Panel(items=lrange(3), major_axis=lrange(3), minor_axis=lrange(3), dtype='O') self.assertEqual(panel.values.dtype, np.object_)
self.assertCalcEqual(True, [True, 'or', False, 'and', False])
self.xmodule.is_condition_satisfied = lambda: True self.xmodule.descriptor.get_children = lambda: []
message = message.strip()
return ip_str
expected_text = "This component is out of date. The library has new content." library_block = self._get_library_xblock_wrapper(self.unit_page.xblocks[1])
ret['changes'] = { 'old': current_state, 'new': new_state, }
page.wait_for_component_menu() click_css(page, 'button>span.large-advanced-icon', menu_index, require_notification=False)
result = f.clean('12.21.2010') self.assertEqual(result, date(2010, 12, 21))
activate('nl')
self.check_ordering_of_field_choices([self.b2, self.b1])
'reactor_worker_hwm': int,
_city = None _country = None
with self.assertRaises(forms.ValidationError): f.clean('1:30:05 PM')
t1 = phi / rho t2 = -theta / rho dk = (1 / rho) * w
sale_order_dict = dict((feature, getattr(purchased_course.order, feature)) for feature in sale_order_features)
GDAL_TO_POSTGIS = [None, 4, 6, 5, 8, 7, 10, 11, None, None, None, None]
L = np.zeros((max_features, max_features), dtype=X.dtype)
order = [4, 1, 2, 0, 3] for df in [self.mixed_frame]:
apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
with self.settings(PIPELINE_ENABLED=False): js_include = compressed_js('base_application') self.assertIn(u'/static/js/src/logger.js', js_include)
with self.assertRaises(exceptions.TemplateRuntimeError): env.from_string("{{ document|load_json }}").render(document="{'foo': 'it works'}")
if valid_size < 1.0: valid_size /= 1.0 - np.true_divide(self.n_test, self.n) self.valid_size = valid_size
can_introspect_binary_field = True
def is_browser_on_page(self): wait_for_ajax_or_reload(self.browser) return self.q(css='body.view-settings').visible
master_doc = 'index'
return []
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
del_info = self.run_function('group.info', [DEL_GROUP]) if del_info: self.run_function('group.delete', [DEL_GROUP])
ret['changes']['home'] = ''
try: import MySQLdb HAS_MYSQL = True except ImportError: HAS_MYSQL = False
next_items[i] = (plc[min_len:], trim_join_unit(unit, min_len))
from salt.modules import cp from salt.utils import templates from salt.exceptions import CommandExecutionError
Category.objects.get(url='4th').delete() with self.assertRaises(ValidationError): f.clean(c4.id)
import salt.returners import salt.utils.jid import salt.exceptions from salt.exceptions import CommandExecutionError
X, y = hastie_X, hastie_y ForestEstimator = FOREST_ESTIMATORS[name] clf = ForestEstimator(n_estimators=5, max_depth=1, warm_start=False, random_state=1) clf.fit(X, y)
XMODULE_FIELDS_WITH_USAGE_KEYS = ['location', 'parent']
response = self.client.post(update_url, post_data) self.assertEquals(response.status_code, 302)
** blas_info)
ret.add('base')
raise salt.exceptions.CommandExecutionError(lazy_obj.missing_fun_string(fun))
with self.assertNumQueries(0): s.save(update_fields=[]) self.assertEqual(len(pre_save_data), 0) self.assertEqual(len(post_save_data), 0)
get_version = { 'Linux': linux_version, 'FreeBSD': lambda: __salt__['cmd.run']('sysctl -n kern.version'), }
if self_referential: seen_self = sum( from_model == getattr(field.remote_field, 'model', None) for field in self.remote_field.through._meta.fields )
vec = np.zeros(n_features * n_classes) vec[0] = 1 hess_col = hessp(vec)
info = {} for key in domain_keys.get(domain, []): value = signode.get(key) if not value: value = '' info[key] = value if not info: continue
from __future__ import absolute_import import logging
from salt.states import reg
newXBlock = self.store.publish(xblock.location, self.user_id) self.assertFalse(self.store.has_changes(newXBlock))
io.stdout = self.cout io.stderr = self.cout
original_now = timezone.now try: timezone.now = lambda: modification self.session.set_expiry(timedelta(seconds=10)) finally: timezone.now = original_now
index = date_range('20130101', periods=3, tz='US/Eastern', name='foo') unpickled = self.round_trip_pickle(index) self.assert_index_equal(index, unpickled)
'ipv6': bool,
ica = FastICA(n_components=3)
__remove_null_logging_handler()
df = DataFrame({'key': [1, 1, 1, 2, 2, 2, 3, 3, 3], 'value': range(9)})
updated_user = User.objects.get(id=uid_int)
_register_xlsx('openpyxl', 'xlsxwriter')
pnt = Point(0, 0) nullcity = City(name='NullCity', point=pnt) nullcity.save()
import logging log = logging.getLogger(__name__)
from salt.states import saltmod
COURSE_ACTION_STATES = (CourseRerunState, )
mark.delete(using='other')
LOGGING_NULL_HANDLER = TemporaryLoggingHandler(logging.WARNING)
if attr == self.ASSET_TYPE_ATTR: value = self.asset_id.asset_type elif attr == self.ASSET_BASENAME_ATTR: value = self.asset_id.path else: value = getattr(self, attr)
df = SparseDataFrame({'A': [1.1, 3.3], 'B': [2.5, -3.9]})
post_login_handler = _finish_auth_url(params) js_success_var = 'var nextUrl = "{}";'.format(post_login_handler) self.assertContains(response, js_success_var)
random_state.randint(MAX_INT, size=len(self.estimators_))
random_state = check_random_state(0) y_true = random_state.randint(0, 2, size=(n_samples, )) y_pred = random_state.randint(0, 2, size=(n_samples, ))
self.assertNotContains(response, '<h2>Author-book relationships</h2>') self.assertNotContains(response, 'Add another Author-Book Relationship') self.assertNotContains(response, 'id="id_Author_books-TOTAL_FORMS"')
requirements = get_credit_requirements(self.course.id, namespace="reverification") self.assertEqual(len(requirements), 1)
import re import copy
from salt.exceptions import CommandExecutionError
if ip_str.count('::') > 1: return False
response = self.client.get('/check_session/') self.assertEqual(response.status_code, 200) self.assertEqual(response.content, b'YES')
with self.settings(OPENID_SSO_SERVER_URL=abs_provider_url):
LOCATION='test cache table'
S = cosine_similarity(X, Y) S *= -1 S += 1 return S
import os import stat import os.path import logging import struct
#html_use_index = True
for svd in svds: assert_array_less(svd.explained_variance_ratio_.sum(), 1.0)
self.client.logout()
archive.__salt__ = {} archive.__pillar__ = {} archive.__grains__ = {"id": "0"} archive.__opts__ = {}
_default = None
self.system.modulestore.update_item(self, None)
if original.is_boolean(): result = original.drop_duplicates() expected = Index([False, True], name='a') tm.assert_index_equal(result, expected) continue
cost = SumOfCosts([SumOfOneHalfParamsSquared(), (0., DummyCost())]) model = DummyModel(shapes, lr_scalers=scales) dataset = ArangeDataset(1) decay = 0.95
index = list('bca') t = Series([True, False, True])
cat = Categorical([5, 2, np.nan, 2, np.nan], ordered=True) exp_categories = Index([2, 5])
available_version = salt.utils.alias_function(latest_version, 'available_version')
assert images[3] == kerns[3] flops = kerns[1] * kerns[2] * 2 #nb flops by output image flops *= out[1] * out[2] flops *= images[3] * kerns[0] * images[0] return flops
lhs = DataFrame(randn(5, 2)) expect = -lhs result = pd.eval(expr, engine=self.engine, parser=self.parser) assert_frame_equal(expect, result)
from __future__ import absolute_import import time import json import pprint import logging import hmac import base64 from hashlib import sha256
STATIC_URL = '/static/' + EDX_PLATFORM_REVISION + "/" STATIC_ROOT = ENV_ROOT / "staticfiles" / EDX_PLATFORM_REVISION
log = logging.getLogger(__name__)
alt_editor = models.ForeignKey(Editor, models.SET_NULL, blank=True, null=True) title = models.CharField(max_length=100)
import salt.ext.six as six
import salt.ext.six as six from salt.ext.six.moves import StringIO
from __future__ import absolute_import
if course_data.get('name'):
self._update_no_improvement_count(early_stopping, X_val, y_val)
from salt.beacons import glxinfo
'BOOTSTRAP_SCRIPT_VERSION', 'v2014.06.21'
X_, y_ = make_classification(n_samples=200, n_features=100, weights=[0.833, 0.167], random_state=0)
from __future__ import absolute_import from contextlib import contextmanager import json import sys
self.assertFalse(enrollment['is_active'])
_("There was a problem with the staff answer to this problem: empty boundary.")
staff_member_required,
if url_name is None or url_name == "": url_name = fallback_name()
from __future__ import absolute_import import logging
result = diffs.max() self.assertEqual(result[0], diffs.ix[2, 'A']) self.assertEqual(result[1], diffs.ix[2, 'B'])
time.sleep(0.5)
for correctness in ['correct', 'incorrect']: self.problem.correct_map = CorrectMap()
df = DataFrame(randn(4, 3), index=list('ABCD')) expected = df.ix[['E']]
from __future__ import absolute_import import datetime import logging import json import sys import email.mime.multipart
__virtualname__ = 'hg'
self.assertOLXIsPublishedOnly(block_list_publish) self.assertOLXIsDraftOnly(block_list_untouched)
assert_raises(VerificationException, attempt.submit)
plt.contourf(X, Y, Z, levels=levels, cmap=plt.cm.Reds) plt.colorbar(format='%.2f')
def ordered_dict_presenter(dumper, data): return dumper.represent_dict(list(data.items()))
self._mock_paver_needs = patch.object(pavelib.quality.run_jshint, 'needs').start() self._mock_paver_needs.return_value = 0
self.__setup_signals()
LTI_AGGREGATE_SCORE_PASSBACK_DELAY = ENV_TOKENS.get( 'LTI_AGGREGATE_SCORE_PASSBACK_DELAY', LTI_AGGREGATE_SCORE_PASSBACK_DELAY )
attempt = SoftwareSecurePhotoVerification(user=user, photo_id_key="dummy_photo_id_key") attempt.status = 'approved' attempt.save()
if self.is_datelike: values = self.to_native_types()
self.cohort_management_page.select_cohort_some_inline_discussion()
import salt.utils
def path_level(name): return len(name.split(os.sep))
import integration from salt.config import cloud_providers_config, vm_profiles_config from utils.virtualbox import vb_xpcom_to_attribute_dict, vb_clone_vm, vb_destroy_machine, vb_create_machine, \ vb_get_box, vb_machine_exists, XPCOM_ATTRIBUTES, vb_start_vm, vb_stop_vm, \ vb_get_network_addresses, vb_wait_for_network_address, machine_get_machinestate_str
modulestore().update_item(descriptor, request.user.id)
d = Donut(name='Apple Fritter') d.baked_time = datetime.datetime(year=2007, month=4, day=20, hour=16, minute=19, second=59) d.save()
ret = self.run_run_plus(fun='fileserver.symlink_list', args=['backend="roots"']) self.assertIsInstance(ret['fun'], dict)
import salt.utils.event
instructor_courses = UserBasedRole(self.user, CourseInstructorRole.ROLE).courses_with_role() staff_courses = UserBasedRole(self.user, CourseStaffRole.ROLE).courses_with_role() all_courses = (instructor_courses | staff_courses)
self.assertIn(npath(filename), autoreload.gen_filenames(only_new=True)) self.assertNotIn(npath(filename), autoreload.gen_filenames(only_new=True))
from ...search_indexes import CourseTeamIndexer
different_index = -index different = df2.set_index(different_index) self.assertFalse(df1.equals(different))
return instance.__dict__[self.field.name]
names = [o.limited_length.name for o in objs] self.assertEqual(names[0], 'tests/%s' % filename) six.assertRegex(self, names[1], 'tests/fi_%s.ext' % FILE_SUFFIX_REGEX)
self.login_student() self.assertEqual(self.get_progress_detail(), u'2/2')
from __future__ import unicode_literals
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
with patch('capa.correctmap.CorrectMap.is_correct') as mock_is_correct: mock_is_correct.return_value = False
cv = check_cv(self.cv, y, classifier=True) folds = list(cv.split(X, y))
self.lc_block.max_count = 1 self._create_capa_problems() self.lc_block.refresh_children() self.assertTrue(self.lc_block.validate())
'openedx.core.djangoapps.api_admin',
fignum = 1
switch_user(request, lti_user, lti_consumer)
ret = self.run_function( 'state.sls', mods='issue-1879.step-2', timeout=120 ) self.assertSaltTrueReturn(ret)
with open(os.path.abspath(path), 'w') as cur_file: cur_file.write(text)
command = 'Add-WindowsFeature' management_tools = '' if LooseVersion(__grains__['osversion']) >= LooseVersion('6.2'): command = 'Install-WindowsFeature' management_tools = '-IncludeManagementTools'
self.distribution.metadata.version = versions["version"] return _sdist.run(self)
p_idx = rng.randint(num_p)
url(r'^api/profile_images/', include('openedx.core.djangoapps.profile_images.urls')),
with self.assertRaises(forms.ValidationError): f.clean('2010-12-21 13:30:05')
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
sub_cmd = 'DROP SCHEMA "{0}"'.format(name) _psql_prepare_and_run( ['-c', sub_cmd], runas=user, maintenance_db=dbname, host=db_host, user=db_user, port=db_port, password=db_password)
self.assertQuerysetEqual(Article.objects.filter(id__iexact=str(self.a1.id)), ['<Article: Article 1>'])
'messages': messages,
default_encoded_video = {}
from salt.modules import scsi import os import salt.utils import copy
STATIC_ROOT = TEST_ROOT / "staticfiles"
if root: self.result[root] = self.focus = {} else: self.focus = self.result
exclude.extend(self.form._meta.exclude)
idx2 = pd.DatetimeIndex(['2011-01-01', pd.NaT, '2011-01-03', '2011-01-02', pd.NaT], tz=tz) self.assertFalse(idx2.is_monotonic)
import logging
this_img = scale_to_unit_interval( this_x.reshape(img_shape))
self.assertTrue(self.run_cloud('-f remove_key {0} id={1}'.format(PROVIDER_NAME, finger_print)))
from salt.log.setup import ( LOG_LEVELS, SORTED_LEVEL_NAMES, is_console_configured, is_logfile_configured, is_logging_configured, is_temp_logging_configured, setup_temp_logger, setup_console_logger, setup_logfile_logger, set_logger_level, )
__opts__.get( 'log_level', 'error' )
#
self.assertEqual( get_object_or_404(Article, title__contains="Run"), article )
self._global_clustering() return self
self.assertRaises(TypeError, self.read_csv, path, dtype={'A': 'timedelta64', 'B': 'float64'}, index_col=0)
xl_format = self.book.add_format()
from __future__ import absolute_import import logging
if not isinstance(data, (list, tuple)): data = list(data)
from __future__ import unicode_literals
self.assertEquals(3, self.response.content.count('grade_C'))
extra = kwargs.get('extra', {})
DETAILS['url'] = opts['proxy']['url']
with self.assertRaisesRegexp(UserPartitionError, "Cannot assign user to an empty user partition"): RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, empty_partition)
from __future__ import absolute_import import json import logging import threading import salt.ext.six as six
result = f.clean('12-21-2010') self.assertEqual(result, date(2010, 12, 21))
n_components = 100 n_features = 1000 A = gaussian_random_matrix(n_components, n_features, random_state=0)
clf = MultiTaskLasso(alpha=1, tol=1e-8).fit(X, Y) assert_true(0 < clf.dual_gap_ < 1e-5) assert_array_almost_equal(clf.coef_[0], clf.coef_[1])
still_in_grace = CapaFactory.create(showanswer='correct_or_past_due', max_attempts="1", attempts="1", due=self.yesterday_str, graceperiod=self.two_day_delta_str) self.assertFalse(still_in_grace.answer_available())
log = logging.getLogger(__name__) request_log = logging.getLogger('requests')
class FrameworkForm(Form): name = CharField() language = ChoiceField()
def __get_pillar_files_from_s3_meta(s3_meta): return [k for k in s3_meta if 'Key' in k]
df = DataFrame(np.random.randn(5, 3), index=['foo', 'foo', 'bar', 'baz', 'bar'])
return None, None
if y is None: return self.fit(X, **fit_params).transform(X) else: return self.fit(X, y, **fit_params).transform(X)
s = Series([Timestamp('20130101 9:01'), Timestamp('20130101 9:02')])
geo_field = self._geo_field(field_name) if not geo_field: raise TypeError('%s output only available on GeometryFields.' % func)
b1.authors.set([a1]) self.assertEqual(data, []) b1.authors.set([]) self.assertEqual(data, [])
'django.middleware.clickjacking.XFrameOptionsMiddleware',
from __future__ import absolute_import, print_function
assert_equal(pairwise_distances([[1]], metric=lambda x, y: 5)[0, 0], 5)
#epub_language = ''
time.sleep(0.2)
cs = GEOSCoordSeq(capi.create_cs(length, ndim), z=hasz) for i, c in enumerate(items): cs[i] = c
t_start = datetime.now() clf.fit(X) delta = (datetime.now() - t_start) time_to_fit = compute_time(t_start, delta)
__salt__['file.comment_line'](name, regex, char, False, backup)
self.assertRaises(TypeError, operator.add, datetime.now(), self.ts)
urlpatterns += ( url(r'^xdomain_proxy.html$', 'cors_csrf.views.xdomain_proxy', name='xdomain_proxy'), )
output_buffer = StringIO(render_to_string("instructor/instructor_dashboard_2/executive_summary.html", data_dict))
for X, y in datasets: X = StandardScaler().fit_transform(X) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.4)
if len(possible_ids) == 0: return 'noname'
self.assertTrue(re.match(r"memory usage: [^+]+\+", res[-1]))
decision_only = OneVsRestClassifier(svm.SVC(probability=False)) decision_only.fit(X_train, Y_train) assert_raises(AttributeError, decision_only.predict_proba, X_test)
try: import memcache HAS_MEMCACHE = True except ImportError: HAS_MEMCACHE = False
"error": "invalid_client", "error_description": "{} is not a public client".format(client_id),
field_name = models.CharField(max_length=64, db_index=True)
plt.figure() fig = plt.gcf() cls_runtime = [] for cls_name, stats in sorted(cls_stats.items()): cls_runtime.append(stats['total_fit_time'])
serializers._serializers = {}
win32api.CloseHandle(hProcess)
import salt.ext.six as six
import salt.utils
return SingleBlockManager( [block.make_block_same_class(values, placement=slice(0, len(values)), ndim=1, fastpath=True)], self.axes[1])
os.unlink(self._clear_filename) self.run_collectstatic(clear=True)
len_m1 = 473504.769553813 len_m2 = 4617.668
plot_gallery = True
friends = models.ManyToManyField( 'self', symmetrical=True, through="Relationship", through_fields=('first', 'second'), )
possible_sizes = [x.chunk_size for x in upload_handlers if x.chunk_size] self._chunk_size = min([2 ** 31 - 4] + possible_sizes)
self.assertTrue(mock_audit_log.called)
VerificationCheckpoint.objects.create( course_id=self.course.id, checkpoint_location=self.checkpoint_midterm, )
import salt.config as config from salt.exceptions import ( SaltCloudConfigError, SaltCloudExecutionFailure, SaltCloudExecutionTimeout, SaltCloudNotFound, SaltCloudSystemExit ) from salt.utils import is_true
value_set = set(self.values) result.extend([x for x in other._values if x not in value_set])
other_args = {'anion': 'hydroxide', 'cation': 'ammonium'} _validate_ret(parallels._normalize_args(other_args))
expected = ts[:3]
return redirect_to
SupportedFieldType(StudentViewTransformer.STUDENT_VIEW_DATA, StudentViewTransformer), SupportedFieldType(StudentViewTransformer.STUDENT_VIEW_MULTI_DEVICE, StudentViewTransformer),
return ret
walk_l = list(_depth_limited_walk(name, max_depth)) walk_d = {} for i in walk_l: walk_d[i[0]] = (i[1], i[2])
capi.reset_reading(self._ptr) for i in range(self.num_feat): yield Feature(capi.get_next_feature(self._ptr), self)
from salt.utils.vt_helper import SSHConnection from salt.utils.vt import TerminalException
create_xblock( parent_locator=unicode(created_block.location), user=request.user, category='sequential', display_name=_('Entrance Exam - Subsection') ) add_entrance_exam_milestone(course.id, created_block)
raise TypeError('incompatible index of inserted column ' 'with frame index')
from __future__ import absolute_import import os
variables, functions = add_defaults(variables, functions, case_sensitive)
from salt.modules import raet_publish import salt.transport from salt.exceptions import SaltReqTimeoutError
assert start >= 0 assert stop > start assert stop <= X.shape[0] X = X[start:stop, :] y = y[start:stop, :] assert X.shape[0] == y.shape[0]
result = s.iloc[slice(1, 3)] expected = s.ix[2:4] assert_series_equal(result, expected)
cart = Order.get_cart_for_user(user=student) CertificateItem.add_to_order(cart, course_id, 50, 'verified') cart.purchase()
_check_all_orients(self.tsframe)
import integration from salt.config import cloud_providers_config
from __future__ import unicode_literals
from __future__ import absolute_import import os import random import string
cv = ShuffleSplit(n_iter=100, test_size=0.2, random_state=0)
from __future__ import unicode_literals
self._future._future_with_timeout = None self.set_exception(tornado.ioloop.TimeoutError())
MAXSIZE = int((1 << 31) - 1)
parent_dir = os.path.dirname(path)
result = df.loc['2016'] expected = df tm.assert_frame_equal(result, expected)
if convert_dates == 'coerce': new_values = _possibly_cast_to_datetime(values, 'M8[ns]', errors='coerce')
from pandas.core.index import MultiIndex MultiIndex.from_product([range(5), ['a', 'b', 'c']])
DETAILS['grains_cache'] = parse(out)
cache.set('somekey', 'value')
self.add_credit_course()
for fixture_label in fixture_labels: if self.find_fixtures(fixture_label): break else: return
from salttesting.helpers import ensure_in_syspath, requires_salt_modules from salttesting import skipIf ensure_in_syspath('../../')
mode = models.CharField(default=CourseMode.DEFAULT_MODE_SLUG, max_length=100)
cat = Categorical.from_array(Series(data), ordered=True) levels = cat.categories
'-oStrictHostKeyChecking={0}'.format(host_key_checking), '-oUserKnownHostsFile={0}'.format(known_hosts_file), '-oControlPath=none'
if len(cur_state_below) == 1: cur_state_below, = cur_state_below
import salt.ext.six as six
class ServerHandler(simple_server.ServerHandler, object): def handle_error(self): if not is_broken_pipe_error(): super(ServerHandler, self).handle_error()
from __future__ import absolute_import import logging import msgpack import socket import os import weakref import time import traceback
split_test = self._update_partition_id(0) self.assertEqual(2, len(split_test.children)) initial_group_id_to_child = split_test.group_id_to_child
self.assertFalse(signal.has_listeners()) self.assertEqual(signal.receivers, [])
defaults = {'max_length': self.max_length} defaults.update(kwargs) return super(CharField, self).formfield(**defaults)
else: assert from_model is not None, ( "ManyToManyField with intermediate " "tables cannot be checked if you don't pass the model " "where the field is attached to." )
string_data = serializers.serialize(self.serializer_name, [obj], indent=2)
instructor_task = self._create_success_entry() instructor_task.task_output = None succeeded, message = get_task_completion_info(instructor_task) self.assertFalse(succeeded) self.assertEquals(message, "No status information available")
if logging_settings: logging_config_func(logging_settings)
if ret.get(esxi_host) is None: ret.update({esxi_host: {}}) ret[esxi_host].update(response)
return (found_create_model_migration or found_add_field_migration), after_state
__opts__['test'] = orig_test return ret
exc_value = exceptions.pop() tb = self.tb if six.PY2 or not exceptions else exc_value.__traceback__
with pd.option_context('max_rows', None):
self.assertTrue(mock_send.called) __, kwargs = mock_send.call_args_list[0]
from __future__ import unicode_literals
from salt.modules import mac_brew
try: import jsonschema import jsonschema.exceptions HAS_JSONSCHEMA = True except ImportError: HAS_JSONSCHEMA = False
stream.write('Server-side exception handling payload') stream.close()
assert_true(clf.fit_intercept)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
log.debug('generated search string: {0}'.format(search_string)) return self.Search(search_string)
if self.formatter is not None: return [self.formatter(x) for x in self.values]
for library in NPM_INSTALLED_LIBRARIES: sh('/bin/cp -rf node_modules/{library} {vendor_dir}'.format( library=library, vendor_dir=NPM_VENDOR_DIRECTORY, ))
return [x for x in cmd['stdout'].split('\n') if check_ip(x)]
self.assertRaises(ValueError, period_range, '2007-1-1', periods=500, freq='X')
multioutput_y = np.column_stack([y2, y2[::-1]]) scores = cross_val_score(clf, X_sparse, multioutput_y) assert_array_equal(scores, clf.score(X_sparse, multioutput_y))
indices = indices[::-1] maybe_slice = lib.maybe_indices_to_slice(indices, len(target)) self.assertTrue(isinstance(maybe_slice, slice)) self.assert_numpy_array_equal(target[indices], target[maybe_slice])
if inv: X_pred2 = kpca.inverse_transform(X_pred_transformed) assert_equal(X_pred2.shape, X_pred.shape)
from __future__ import absolute_import import errno import fnmatch import logging import os import re import time
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, Mock, patch, NO_MOCK, NO_MOCK_REASON )
del team['date_created'] del team['discussion_topic_id']
res = cat.add_categories("d", inplace=True) self.assert_categorical_equal(cat, new) self.assertIsNone(res)
coef = safe_sparse_dot(self.dual_coef_, self.support_vectors_)
with ensure_clean_store(self.path) as store:
df = DataFrame(np.random.randn(10, 3)) df.iloc[2:7, 0] = np.nan df.iloc[3:5, 2] = np.nan
with self.assertNumQueries(1): RestrictedCourse.is_restricted_course(course_id) RestrictedCourse.is_disabled_access_check(course_id)
get_storage_container_metadata = show_storage_container_metadata
A = A[:30] B = B[:30] C = C[:30]
for name, profile in create_list: make_minion = salt.config.get_cloud_config_value( 'make_minion', profile, self.opts, default=True ) if make_minion is False: continue
stdout = list_(runas=runas) service_lines = [line for line in stdout.splitlines()]
__virtualname__ = 'ip'
sparse = self.dense1.to_sparse() sparse3 = self.dense3.to_sparse()
try: res[field.attname] = field except AttributeError: pass
self._rot_set = True
shutil.copyfile(path_in, path_test)
while listening_to_events:
assert_almost_equal(y_std_1d, y_std_2d) assert_almost_equal(y_cov_1d, y_cov_2d)
__virtualname__ = 'git'
out, err = self.run_django_admin(args) self.assertNoOutput(out) self.assertOutput(err, "already exists")
from __future__ import absolute_import import copy import errno import fnmatch import glob import hashlib import logging import os import shutil from datetime import datetime from salt.exceptions import FileserverConfigError
layers = [self.visible_layer] + self.hidden_layers
obj = super(BaseManager, cls).__new__(cls) obj._constructor_args = (args, kwargs) return obj
for key in locations: self.assertFalse(self._has_changes(locations[key]))
for other_label in unique_labels: if other_label != curr_label: other_mask = labels == other_label other_distances = np.mean( current_distances[:, other_mask], axis=1) inter_clust_dists[mask] = np.minimum( inter_clust_dists[mask], other_distances)
chapter_aside.data_field = 'another one value' self.store.update_item(new_chapter, self.user_id, asides=[chapter_aside])
from datetime cimport *
import os import time import logging
result = f.clean('1:30 PM 21-12-2010') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
if s.name == 'values': s.name = None return s
URLCONF_MODULES = ['myapp.url', 'another_app.urls']
result = ts.resample('10S', loffset='1s').size()
context = {}
'cherrypy', 'cherrypy.lib', 'cherrypy.process', 'cherrypy.wsgiserver', 'cherrypy.wsgiserver.ssl_builtin',
os.setegid(uinfo['gid']) os.seteuid(uinfo['uid'])
import salt.utils.http
for course_id, store in self.mappings.iteritems(): candidate_key = store.make_course_key(org, course, run) if candidate_key == course_id: return candidate_key
results = self.proxy.search({ 'name': self.package_name, 'description': self.package_name }, 'or')[:15]
return True
ts = self.ts.copy() ts[::2] = np.NaN
c = GSNCost( [ (0, 1.0, reconstruction_cost),
output[:, i:i + width, j:j + width] = dense_input[ :, idx][:, None, None] idx += 1
self.course.display_coursenumber = None updated_course = self.update_course(self.course, self.user.id)
add_function_parentheses = True
return pytz.timezone(tz)
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.bio_book])
try: import six except ImportError: HAS_SIX = False
X = X_2d n = X.shape[0]
m = MultiIndex.from_arrays([[1, 2], [3, 4]]) self.assertRaises(NotImplementedError, Series, m)
class SongAdmin(admin.ModelAdmin): pass site.register(Song, SongAdmin)
return response
c = 24650000000000000
if np.prod(a.shape) > _MIN_ELEMENTS:
try: uid_int = base36_to_int(uidb36) user = User.objects.get(id=uid_int) user.is_active = True user.save() except (ValueError, User.DoesNotExist): pass
return dict(result=True, data=outf.name)
self.assertEqual(NaT.isoformat(), 'NaT')
course = modulestore().get_course(course_id, depth=4)
assert_false(hasattr(SequenceDescriptor, 'rerandomize'))
time.sleep(0.025)
_list = self.run_function('beacons.list', return_yaml=False) self.assertIn('ps', _list)
if name not in loader.file_mapping: return {}
AutoAuthPage( self.browser, username="johndoe_saee", email=self.student_identifier, course_id=self.course_id, staff=False ).visit()
import integration
salt '*' vsphere.get_vsan_enabled my.esxi.host root bad-password
saltenv = env
from __future__ import unicode_literals
return None
with self.assertNumQueries(3): embargo_api.check_course_access(self.course.id, user=self.user, ip_address='0.0.0.0')
lib_page.a11y_audit.config.set_rules({ "ignore": [
return None, None
listen_for_course_publish(self, self.course.id)
df[k] = np.sum(mask)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
from __future__ import absolute_import
import integration
if user is not None and has_course_author_access(user, course_key): return True
_skip_if_has_locale()
X_no_array = NotAnArray(X_dense) result = check_array(X_no_array) assert_true(isinstance(result, np.ndarray))
from __future__ import absolute_import
from __future__ import absolute_import import json import logging import os.path import pprint import socket import urllib import yaml
self.request.user = student self.request.session = {}
self.assertTrue(self.video.is_aligned(True))
if item in ['constraint']: if isinstance(item_type, six.string_types): cmd += [item_type]
user = User.objects.create_user('johndoe', 'john@example.com', 'pass') x = SimpleLazyObject(lambda: user)
'EMBARGO': False,
clf = svm.SVC(kernel='linear', C=0.1, decision_function_shape='ovo').fit(iris.data, iris.target)
str(self.empty)
connectivity = grid_to_graph(*face.shape)
dir_suffix = "-py3"
for i in range(len(p.ext_ring_cs)):
raise CommandExecutionError( 'Error {0}: {1}'.format(exc.response.status_code, exc.explanation) )
'ADDITIONAL_OPTIONS': { 'trashcan': { 'bucket': 'trash_fs' } }
klass = DatetimeIndex._simple_new kwargs = {'tz': tz} concat = _concat._concat_compat
self.assertEqual(source.nfld, layer.num_fields) self.assertEqual(source.nfld, len(layer.fields))
class Color2(Color): class Meta: proxy = True
def etag(etag_func): return condition(etag_func=etag_func)
for name in ALL_TREES: yield (check_no_sparse_y_support, name)
from django.db import connections connection = connections[DEFAULT_DB_ALIAS] connection.allow_thread_sharing = True connection.cursor() connections_dict[id(connection)] = connection
received_objects = fetch_results['received_objects']
fn_.write(self.dumps(msg, use_bin_type=True))
if not enabled: ret['result'] = True ret['comment'] = enabled_msg ret['changes'].update(enabled_changes) return ret
return self._possibly_eval(res, self.binary_ops)
resp = self.client.post(reverse('shoppingcart.views.remove_item', args=[]), {'id': cert_item.id})
best_labels, best_inertia = \ _labels_inertia(X, x_squared_norms, best_centers, precompute_distances=precompute_distances, distances=distances)
sorted_df = frame.sort_values(by=['A'], ascending=[False]) assert_frame_equal(sorted_df, expected)
__, __, course = self.load_test_import_course(target_id=course_id, module_store=module_store)
_maybe_remove(store, 'df')
return latest_date or datetime.datetime.utcnow().replace(tzinfo=utc)
resp = self.assert_enrollment_status(expected_status=status.HTTP_400_BAD_REQUEST)
if host_ref is None: host_ref = search_index.FindByIp(ip=host, vmSearch=False)
result1 = s.loc[2:5] result2 = s.ix[2:5] result3 = s[2:5]
data = Series(766897346 * np.ones(10)) for ddof in range(3): result = data.std(ddof=ddof) self.assertEqual(result, 0.0)
__saltstack_version__ = __get_version(__saltstack_version__) del __get_version
__virtualname__ = 'pam'
with self.assertRaisesRegexp(GitExportError, unicode(GitExportError.CANNOT_PULL)): git_export_utils.export_to_git( course_key, 'https://user:blah@example.com/r.git')
git_import.add_repo(self.TEST_REPO, repo_dir / 'edx4edx_lite', self.TEST_BRANCH) def_ms = modulestore() self.assertIsNotNone(def_ms.get_course(self.TEST_BRANCH_COURSE))
bad2 = copy(city_mapping) bad2['name'] = 'Nombre'
base_estimator = Lasso() ransac_estimator = RANSACRegressor(base_estimator) assert_raises(ValueError, ransac_estimator.fit, X, y, weights)
time_left = max_time - time.time() progress.waitForCompletion(time_left * 1000)
self.correct_responses[name] = self.COMPUTED_ANSWER_CORRECT self.incorrect_responses[name] = self.COMPUTED_ANSWER_INCORRECT
SplitMongoKVSid = namedtuple('SplitMongoKVSid', 'id, def_id') new_contract('BlockUsageLocator', BlockUsageLocator)
mat = mgr.as_matrix()
with self.cursor() as cursor: cursor.execute("CREATE EXTENSION IF NOT EXISTS postgis")
for i, j in product([0, 1], repeat=2): metric([i], [j])
self.criteria = criteria[_REQUIRES_PATH] + \ criteria[_REQUIRES_STAT] + \ criteria[_REQUIRES_CONTENTS]
cache_timeout = 600
with warnings.catch_warnings(record=True): regressor_1 = Regressor() regressor_2 = Regressor() set_testing_parameters(regressor_1) set_testing_parameters(regressor_2) set_random_state(regressor_1) set_random_state(regressor_2)
self.mgr_locs = placement
self.band = None if os.path.isfile(pam_file): os.remove(pam_file)
else: if self.n_outputs_ == 1: return proba[:, 0]
if rolename not in [FORUM_ROLE_ADMINISTRATOR, FORUM_ROLE_MODERATOR, FORUM_ROLE_COMMUNITY_TA]: return HttpResponseBadRequest(strip_tags( "Unrecognized rolename '{}'.".format(rolename) ))
xpath = "//div[@class='indicator-container']/span" self.assert_no_xpath(xml, xpath, self.context)
self.assertEqual(ONE_TO_MANY_CLASSES, {f.__class__ for f in o2m_type_fields})
return Series(values, index=_get_index(), name=self.name)
ensemble = BaggingClassifier(SVC(decision_function_shape='ovr'), n_jobs=3, random_state=0).fit(X_train, y_train)
adrian = NaturalKeyAnchor.objects.create(**book1) james = NaturalKeyAnchor.objects.create(**book2)
safe_exec("a = int(math.pi)", g) self.assertEqual(g['a'], 3)
'returner_dirs': list,
idx = Index(list('abcd')) self.assertTrue('str' in dir(idx))
BADGR_API_TOKEN = None BADGR_BASE_URL = "http://localhost:8005" BADGR_ISSUER_SLUG = "example-issuer" BADGR_TIMEOUT = 10
htpasswd.__salt__ = {}
self.store.create_child( self.user_id, locations['parent'], 'vertical', block_id='new_child', )
from __future__ import unicode_literals
raise
result = td.std() expected = to_timedelta(Series(td.dropna().values).std()) self.assertEqual(result, expected)
score = score * self.weight / total total = self.weight
course_outline_page = CourseOutlinePage( self.browser, self.course_info['org'], self.course_info['number'], self.course_info['run'] ) course_outline_page.visit()
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
response = self._regenerate( course_key=self.CERT_COURSE_KEY, username=self.STUDENT_USERNAME ) self.assertEqual(response.status_code, 400)
self.assertIn('$', form.cleaned_data['password'])
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) signal_handler.send.assert_called_with('course_published', course_key=course.id)
self.assertNumQueries(0, lambda: list(Number.objects.all()[1:1]))
data['course_price'] = 100 response = self.client.post(set_course_price_url, data) self.assertTrue("CourseMode price updated successfully" in response.content)
example_messages = ['test', 'me'] set_cookie_data(storage, example_messages) self.assertEqual(list(storage), example_messages)
dr = date_range('2011-10-02 00:00', freq='h', periods=10, tz=self.tzstr('America/Atikokan'))
contentstore().delete(content.get_id()) del_cached_content(content.location)
kf = cval.KFold(17, 3) check_cv_coverage(kf, expected_n_iter=3, n_samples=17)
normalizer = proba_k.sum(axis=1)[:, np.newaxis] normalizer[normalizer == 0.0] = 1.0 proba_k /= normalizer
if cached_md5 == file_md5: return
_policy = _policy.get_role_policy_response.policy_document _policy = _unquote(_policy) _policy = json.loads(_policy, object_pairs_hook=odict.OrderedDict) return _policy
assert((display_src and display_class) or (not display_src and not display_class))
#html_style = 'default.css' html_theme = 'solar' html_theme_path = ["./themes"]
axis = uniques
data_stream = stream_reuters_documents()
unlock_content = cls.create_image(prefix, (32, 32), 'blue', '{}_unlock.png')
result = store.a tm.assert_series_equal(result, s) result = getattr(store, 'a') tm.assert_series_equal(result, s)
from logging import getLogger
import salt.ext.six as six
if cls.is_white_label(course_id, modes_dict=modes_dict): return False
if name is None: name = getattr(result, 'name', None) if name is None: name = self._orig.name
src_dir = parent_dir.replace(':', '_')
from __future__ import unicode_literals
continue
'monitoring',
self.assertTrue(self.client.login( username=self.TEST_USERNAME, password=self.TEST_PASSWORD) )
resp = self._change_enrollment('enroll') self.assertEqual(resp.status_code, 403)
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
import salt.utils.jid import salt.returners
return initial
import salt.utils import salt.utils.mac_utils from salt.exceptions import SaltInvocationError from salt.ext.six.moves import range
try: self.url = reverse('login_post') except NoReverseMatch: self.url = reverse('login')
if self.merge and conflicts: return self.handle_merge(loader, conflicts)
import salt.utils
from salt.modules import artifactory
result = self.panel4d.reindex(items=['ItemA', 'ItemB']) assert_frame_equal(result['l2']['ItemB'], ref['ItemB'])
BULK_EMAIL_ROUTING_KEY = HIGH_PRIORITY_QUEUE
self.resid = np.zeros(n, tp) info = 0
return sum(self[i].point_count for i in range(self.geom_count))
fstats_orig = os.stat(path_test)
sample_silhouette_values = silhouette_samples(X, cluster_labels)
offset1 = CDay() offset2 = CDay() self.assertFalse(offset1 != offset2)
import salt.ext.six as six from salt.ext.six.moves import range, zip from salt.ext.six.moves.urllib.parse import urlparse as _urlparse
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, MagicMock, NO_MOCK, NO_MOCK_REASON
grouped = self.three_group.groupby(['A', 'B']) result = grouped.nth(0) expected = grouped.first() assert_frame_equal(result, expected)
train, test = slice(None, None, 2), slice(1, None, 2) probas_pred = clf.fit(X[train], y[train]).predict_proba(X[test])
single = salt.client.ssh.Single( __opts__, cmd, fsclient=__context__['fileclient'], minion_opts=__salt__.minion_opts, **st_kwargs)
self.assertContains(response, "\n0 recommendations\n")
n = store.remove('wp', []) self.assertTrue(n == 120)
yield check_estimators_unfitted if 'class_weight' in Classifier().get_params().keys(): yield check_class_weight_classifiers
from .vt import Terminal, TerminalException
code_prolog = CODE_PROLOG % random_seed
axes = self.output_axes assert len(axes) == 4
self.set_config(False) course = CourseFactory.create()
from __future__ import unicode_literals
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.reset_tracker() different_client = APIClient() different_client.login(username=different_user.username, password=TEST_PASSWORD) response = different_client.delete(self.url) self.check_response(response, 404)
if setup_option or query_yes_no(self.CONFIRMATION_PROMPT, default="no"): course_keys = [course.id for course in modulestore().get_courses()] else: return
SEARCH_ENGINE = "search.elastic.ElasticSearchEngine"
a = Series(data=np.arange(4) * (1 + 2j), index=[0, 0, 1, 1]) expected = Series((1 + 2j, 5 + 10j))
data = { "form-TOTAL_FORMS": "1", "form-INITIAL_FORMS": "1", "form-MAX_NUM_FORMS": "0",
if len(self.credit_type) > 1: raise LoncapaProblemError('Only one type of partial credit is allowed for Checkbox problems.')
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
from __future__ import absolute_import, print_function import fnmatch import logging import os
for X in [X_1row, X_1col, X_list_1row, X_list_1row]:
templates_path = ['../_templates']
if minion.schedule.loop_interval < loop_interval: loop_interval = minion.schedule.loop_interval log.debug( 'Overriding loop_interval because of scheduled jobs.' )
return
self.youtube_configuration.update({ 'time_to_response': 2.0, 'youtube_api_blocked': True, })
call_command('post_cohort_membership_fix', commit='commit')
if hasattr(os.path, 'samefile'): try: return os.path.samefile(src, dst) except OSError: return False
config_course_cohorts( course, is_cohorted=True, auto_cohorts=["AutoGroup"] )
if self.errors_occurred: if self.is_usable(): self.errors_occurred = False else: self.close() return
node_depth = np.zeros(shape=n_nodes) is_leaves = np.zeros(shape=n_nodes, dtype=bool)
retain_settings = opts.get('retain_settings', False) result = current if retain_settings else {}
cputime_percent = (1.0e-7 * cputime / host_cpus) / vcpus
termination_criterion = EpochCounter(5)
verify_group_id_not_present(profiled_user=self.student, pass_group_id=False) verify_group_id_not_present(profiled_user=self.moderator, pass_group_id=False)
iris = datasets.load_iris()
import salt.utils
subject = '/'
data_abstract = models.CharField(max_length=10) fk_abstract = models.ForeignKey(Relation, models.CASCADE, related_name='fk_abstract_rel')
list_check = lambda x: isinstance(x, list) clf = CheckingClassifier(check_X=list_check) scores = cval.cross_val_score(clf, X.tolist(), y.tolist())
verification_status, verification_msg = SoftwareSecurePhotoVerification.user_status(user)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
if runas: os.seteuid(euid) os.setegid(egid) if exc is not None: raise CommandExecutionError( 'Exception encountered unpacking zipfile: {0}'.format(exc) )
from __future__ import unicode_literals
if self.min_weight_fraction_leaf != 0. and sample_weight is not None: min_weight_leaf = (self.min_weight_fraction_leaf * np.sum(sample_weight)) else: min_weight_leaf = 0.
if refresh: refresh_db()
kwargs['client_flag'] = CLIENT.FOUND_ROWS kwargs.update(settings_dict['OPTIONS']) return kwargs
fresult = first.value
invalid_json = "{u'name': 'Test Name', []}"
if not hasattr(self, 'detector_normalization'): self.detector_normalization = None
__virtualname__ = 'pkg'
casted = pd.Series(other, index=self.index)
rng = np.random.RandomState(0) rand_data = RandomData(rng) n_features = rand_data.n_features n_components = rand_data.n_components
import salt.utils
import os import glob
X_1d = X_1row.ravel() max_abs = np.abs(X_1d).max() assert_array_almost_equal(X_1d / max_abs, maxabs_scale(X_1d, copy=True))
if isinstance(self.columns, MultiIndex) and self.merge_cells: self.rowcounter += 1
self.assertFalse(3.0 in s)
log.trace('Trying pysss.getgrouplist for \'{0}\''.format(user)) try:
try: from pyVmomi import vim, vmodl HAS_PYVMOMI = True except ImportError: HAS_PYVMOMI = False
import logging import random from salt.state import _gen_tag from salt.exceptions import SaltInvocationError
_step.given('I have uploaded subtitles "{}"'.format(sub_id))
POLL_ALL_LOCATIONS = True
connection.drop_database(DB)
log = logging.getLogger(__name__)
o = ts.utcoffset() return (o.days * 24 * 3600 + o.seconds) / 3600.0
import salt.ext.six as six
import salt.utils
assert_equal(grid_search_no_score.best_params_, grid_search.best_params_) assert_equal(grid_search.score(X, y), grid_search_no_score.score(X, y))
value = value.astimezone(timezone) if hasattr(timezone, 'normalize'): value = timezone.normalize(value) return value
if not (has_forum_admin or has_instructor_access): return HttpResponseBadRequest( "Operation requires staff & forum admin or instructor access" )
self.video.click_player_button('fullscreen')
check(u"('hasnt','hasn't')", [u'hasnt', u'hasn\'t'])
upload_csv_to_report_store(rows, 'may_enroll_info', course_id, start_date)
from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON, )
self._set_cs()
df = tm.makeTimeDataFrame() assertRaisesRegexp(TypeError, 'hierarchical', df.count, level=0)
TestScenario((self.demo_course,), "Empty"), TestScenario((self.html_course,), "Intro to <html>"),
allowed_params = ('page', 'page_size', 'text')
class Category(models.Model): name = models.CharField(max_length=50)
expected_index = pd.Index(o[::-1]) expected_index.name = None
mean_tpr /= n_classes
'pidfile': '/var/run/salt-api.pid', 'logfile': '/var/log/salt/api', 'rest_timeout': 300,
if ((X.data if sparse else X) < 0).any(): raise ValueError("Entries of X must be non-negative.")
if isinstance(values, (ABCSeries, ABCCategoricalIndex)): values = values._values
scores = cross_val_score(pipeline, X[:, np.newaxis], y, scoring="mean_squared_error", cv=10)
from __future__ import absolute_import
from salt.exceptions import SaltSystemExit import salt.utils import salt.modules.vsphere
df3 = DataFrame({'col1': [0, 1], 'col2': ['a', 'b']})
result = mixed.min(axis=1) expected = Series([1, 1, 1.], index=[0, 1, 2]) tm.assert_series_equal(result, expected)
yield check_sample_weight_multiclass, cls
'ENABLE_MKTG_EMAIL_OPT_IN': False,
sls[ps_opts['d-i']['kbd-chooser']['method']['argument']] = { 'keyboard': ['system'] }
members = models.ManyToManyField(Person, through=Membership) user_members = models.ManyToManyField(User, through='UserMembership')
ind2 = self.index.set_levels(new_levels, level=[0, 1]) assert_matching(ind2.levels, new_levels) assert_matching(self.index.levels, levels)
return False
fit_params = fit_params if fit_params is not None else {} fit_params = dict([(k, _index_param_value(X, v, train)) for k, v in fit_params.items()])
CUSTOM_DAY_FORMAT = 'd/m/Y CUSTOM'
X = np.arange(-200, 200) y = 0.2 * X + 20 data = np.column_stack([X, y])
simple_option_desc_re = re.compile( r'([-_a-zA-Z0-9]+)(\s*.*?)(?=,\s+(?:/|-|--)|$)')
if not labels.is_floating() and not labels.is_integer(): return self._get_loc(key, axis=axis)
from __future__ import absolute_import
newFrame = self.frame.reindex(columns=[]) self.assertTrue(newFrame.empty)
user = self.create_user_and_enroll('verified') self.add_verification_status(user, VerificationStatus.DENIED_STATUS)
with warnings.catch_warnings(record=True): test_bins = get_bin_seeds(X, 0.01, 1) assert_array_equal(test_bins, X)
from salt.ext.six import string_types
if self.mode != mode and mode is not None: self.mode = mode mode_changed = True
from __future__ import absolute_import
try: import psycopg2 import psycopg2.extras HAS_PG = True except ImportError: HAS_PG = False
set_urlconf(settings.ROOT_URLCONF)
from __future__ import absolute_import
log = logging.getLogger(__name__)
print "Starting export" file_system = OSFS(root_dir) initial_course.runtime.export_fs = file_system.makeopendir(course_dir) root = lxml.etree.Element('root')
import salt.ext.six as six
request.META = {'HTTP_HOST': 'example.com:81'} site = get_current_site(request) self.assertEqual(site, s1)
BROKER_POOL_LIMIT = 0 BROKER_CONNECTION_TIMEOUT = 1
def f(): df = orig.copy() df.iat[2, 0] = "c"
iris = datasets.load_iris()
import salt.utils from salt import crypt
params = {'Action': 'CancelSpotInstanceRequests', 'SpotInstanceRequestId.1': sir_id} data = aws.query(params, location=location, provider=provider, opts=__opts__, sigver='4')
LETTUCE_SERVER_PORT = 8003 XQUEUE_PORT = 8040 YOUTUBE_PORT = 8031 LTI_PORT = 8765 VIDEO_SOURCE_PORT = 8777
reclass_opts = __opts__['master_tops']['reclass']
if self.remove_zero_eig or self.n_components is None: self.alphas_ = self.alphas_[:, self.lambdas_ > 0] self.lambdas_ = self.lambdas_[self.lambdas_ > 0]
import integration import salt.utils
null_index = Index([]) self.assert_index_equal(Index(['a']), null_index.insert(0, 'a'))
v3.set_params(strip_accents='ascii', lowercase=False) assert_equal(v3.build_preprocessor(), strip_accents_ascii)
clf = linear_model.LogisticRegression(C=1e5) clf.fit(X, y)
pagerduty.__opts__ = {} pagerduty.__salt__ = { 'config.option': MagicMock(return_value=None) }
key = cleaned_string(key) key_prefix = cleaned_string(key_prefix) version = cleaned_string(version)
assert_not_in('rerandomize', seq.xml_attributes)
y = np.dot(X, w) y = np.sign(y)
df = DataFrame({"aa": lrange(5), "bb": [2.2] * 5})
from __future__ import absolute_import import logging
if self._convert_dates is not None: for key in self._convert_dates: self.fmtlist[key] = self._convert_dates[key]
response_element.set("answer", unicode(answer))
absent_state = 'cmd_|-listener_test_listening_non_changing_state_|-echo "Only run once"_|-mod_watch' self.assertNotIn(absent_state, state_run)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( mock_open, patch, NO_MOCK, NO_MOCK_REASON )
assert_raises(ValueError, km.fit, [[0., 1.]])
actual = repr(factor) self.assertEqual(actual, expected)
return name
module = inspect.getmodule(method) if module is not None: if not module.__name__.startswith('pylearn2'): return method_errors
import salt.loader from salt.template import compile_template from salt.ext.six import string_types from salt.roster import get_roster_file
ul_longer = ul + [2] ul_longer._IndexError = TypeError ul._IndexError = TypeError self.assertNotEqual(ul_longer, pl) self.assertGreater(ul_longer, ul)
if singular_series: values[0].name = keys[0]
self.assertTrue(filecmp.cmp(path_in, path_test))
cache.set("key1", "spam", 100.2) self.assertEqual(cache.get("key1"), "spam")
import salt.utils
major_labels = inds % N minor_labels = inds // N
self.store.convert_to_draft(self.vertical_x1a, self.user_id) item = self.store.get_item(self.vertical_x1a) self.assertTrue(self.store.has_published_version(item))
X = np.arange(200)[:, np.newaxis] y = np.zeros(200) y[50:100] = 1 y[100:200] = 2 X[100:200, 0] = 200
return 0
data = 'a b c\n1 2 3' msg = 'is not supported'
ips = sorted(set(ips)) nets = sorted(set(nets))
url( r'^user/(?P<user_id>[^/]*)/course/{course_id}'.format(course_id=settings.COURSE_ID_PATTERN), views.render_html_view, name='html_view' ),
if name in exclude: break
return hash(str(self))
draggables = world.css_find(css_class + ' .drag-handle') source = draggables.first target = draggables.last
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
keystone.__salt__ = {}
kwargs['max_length'] = kwargs.get('max_length', 254) super(EmailField, self).__init__(*args, **kwargs)
result = jboss7.datasource_exists(name='appDS', jboss_config={}, datasource_properties=datasource_properties, profile=None)
from __future__ import absolute_import
with patch('student.views.get_credit_provider_display_names') as mock_method: mock_method.return_value = providers_list response = self._load_dashboard()
param_rows = [[p for ps in row for p in ps] for row in param_rows]
from salt.modules import xapi
if not isinstance(xmldict[name], list): xmldict[name] = [xmldict[name]] xmldict[name].append(to_dict(item))
modulestore().update_item(self.problem_in_course, self.user.id) self.problem_in_course = modulestore().get_item(self.problem_in_course.location)
min_samples = X.shape[1] + 1
self.assertIsNone(subq._result_cache)
header = cgi.parse_header(self.request.headers['Content-Type']) value, parameters = header return ct_in_map[value](data)
log = logging.getLogger(__name__)
self.form_data.setlist('requested_fields', ['field1', 'field2'])
if remaining_iterations == 0: if verbose: print('Maximum number of iterations reached') results = location, covariance, det, support, dist
django.setup()
'corsheaders.middleware.CorsMiddleware', 'cors_csrf.middleware.CorsCSRFMiddleware', 'cors_csrf.middleware.CsrfCrossDomainCookieMiddleware', 'django.middleware.csrf.CsrfViewMiddleware',
response = self.session.post( STUDIO_BASE_URL + '/course/', data=self._encode_post_dict(self._course_dict), headers=self.headers )
sqrt_alpha = np.sqrt(alpha)
self.app_configs = OrderedDict()
self.disable_cohorting(self.course_fixture) self.refresh_thread_page(self.thread_id) self.assertEquals(self.thread_page.get_group_visibility_label(), "This post is visible to everyone.")
self.validate_xblock_info_consistency(xblock_info, has_child_info=has_child_info)
self.fake_payment_page.submit_payment()
X, y = make_regression(random_state=random_state)
return None
test_cases = [('unsubmitted', 'unanswered'), ('incomplete', 'incorrect'), ('incorrect', 'incorrect')]
lkey, rkey, count = fkeys(lkey, rkey)
for axes in all_axes: axes.get_xaxis().set_visible(False) axes.get_yaxis().set_visible(False)
test_photo = Photo.objects.get(pk=test_image.pk) foo_photo = FooPhoto(my_photo=test_photo) foo_photo.save()
enrollment_exists = CourseEnrollment.objects.filter( user=self.user, course_id=self.course.id ).exists() self.assertFalse(enrollment_exists)
from __future__ import unicode_literals
import salt.transport.client
CourseRerunState.objects.succeeded(course_key=destination_course_key)
import os import sys import time import errno import signal import select import logging
buggy = Buggy() buggy.a = 2 assert_raises(RuntimeError, clone, buggy)
entered_passwords = ["password", "not password", "password2", "password2"]
bestchild = models.ForeignKey("Child", models.SET_NULL, null=True, related_name="favored_by")
correct_map = CorrectMap() if 'correct_map' in state_dict: correct_map.set_dict(state_dict['correct_map'])
from __future__ import absolute_import
out, err = self.run_manage(['check']) self.assertNoOutput(err) self.assertOutput(out, "System check identified no issues (0 silenced).")
assert abs(exact_logz - logz) < 0.01*exact_logz
self.addCleanup(self.cleanup_scheme_extensions)
if servers is False: return False
import django try: django.setup()
"callback_url": callback_url,
import salt.utils import salt.utils.vt
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.assertEqual( self.run_function('xattr.list', [TEST_FILE]), {'spongebob': 'squarepants', 'crabby': 'patty'})
result = self.client.login(username=self.USERNAME, password=self.OLD_PASSWORD) self.assertFalse(result)
names = sorted(str_repl, key=len, reverse=True)
if not isinstance(self.obj, NDFrame): return False
while i > 1: p = parts.pop(0) i -= 1 popped.append(p)
from urllib2 import urlopen from urllib2 import HTTPError
if isinstance(data.index, DatetimeIndex): freq = getattr(data.index, 'freq', None)
return HttpResponse()
instance_map = weakref.WeakKeyDictionary()
self.validate_version(where)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
from salt.modules import qemu_img import os
COUCHBASE_CONN = None DESIGN_NAME = 'couchbase_returner' VERIFIED_VIEWS = False
return response
kwargs['widget'] = self.get_map_widget(db_field) return db_field.formfield(**kwargs)
return anonymous_id_for_user(user, None, save=save)
invalid_get_dict = MultiDict({'input': 'test'}) with self.assertRaises(ValueError): result = CapaModule.make_dict_of_responses(invalid_get_dict)
_('Git Commit'), _('Last Change'), _('Last Editor')],
df_float.ix[30:50, 1:3] = np.nan
request_finished.connect(update_watch)
assert_array_almost_equal(clf.coef_, clf_balanced.coef_, 6)
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] y_state = layer_to_state[y]
X_train = check_array(X_train, 'csc', dtype=dtype, order=X_order) alphas, coefs, _ = path(X_train, y_train, **path_params) del X_train, y_train
from salt.modules import neutron
reversible = True
if (len(set(isinstance(label, string_types) for label in ys_labels)) > 1): raise ValueError("Mix of label input types (string and number)")
from __future__ import absolute_import, print_function import yaml import logging
self.jobs = {}
self.assertTrue(isinstance(cdf, CustomDataFrame))
CACHE_TOOLBOX_DEFAULT_TIMEOUT = getattr( settings, 'CACHE_TOOLBOX_DEFAULT_TIMEOUT', 60 * 60 * 24 * 3, )
s_orig = Series([1, 2, 3])
X, y = datasets.make_classification(n_samples=2000, n_features=10, n_informative=3, n_redundant=0, n_repeated=0, shuffle=False, random_state=0)
raise tornado.gen.Return(event['data']['return'])
self.client.force_login(self.u1)
if key == "ROOT" or key == "COURSES": continue
if isinstance(other, Field): return self.creation_counter < other.creation_counter return NotImplemented
args = [name] if tree: args.append('--tree') if snap_name: args.extend(['--id', snap_name])
CREDIT_NOTIFICATION_CACHE_TIMEOUT = 5 * 60 * 60
return True
y = np.dot(X, w)
if 'beacons' not in opts: opts['beacons'] = {}
'msg': '', 'drag_and_drop_json': json.dumps(user_input)
log = logging.getLogger(__name__)
try: return loader(name, dirs) except TemplateDoesNotExist: pass
implicit_first_cols = 0 if line is not None: if self.index_col is not False: implicit_first_cols = len(line) - self.num_original_columns
USE_I18N = True LOCALE_PATHS = []
ret['comment'] = "Service {0} doesn't exist".format(name)
expected = pd.concat([expected[col].astype('category') for col in expected], axis=1)
try: from yaml import CSafeLoader as SafeLoader from yaml import CSafeDumper as SafeDumper except ImportError: from yaml import SafeLoader, SafeDumper
return SimpleLazyObject(self._setupfunc)
course_outline_page = CourseOutlinePage( self.browser, self.course_org, self.course_number, self.course_run ) course_outline_page.visit() course_outline_page.wait_for_page()
index, data = tm.getMixedTypeDict() mixed = DataFrame(data, index=index)
IS_WIN = win_ntp.__virtual__()
url(r'^api/courses/', include('course_api.urls')),
Series(np.ones(10)).rolling(window=3, center=True, axis=0).mean()
output = FilterActs()(images, filters)
self._lock = threading.Lock()
for ax in axes: df.plot(x="a", y="b", title="title", ax=ax)
data = tools.to_datetime(dates)
m = self.model(**kwargs)
ret = __salt__['vsphere.system_info'](host=host, username=user, password=password)
open_jids.add(jinfo['jid'])
if which_set != 'unlabeled': data_y = data['labs_ex'][set_indices] data_y = data_y[ex_range] - 1
self.assertEqual(list(storage), example_messages)
except Exception: log.critical('Unexpected error while polling minion events', exc_info=True) return None
cert.set_version(kwargs['version'] - 1)
estimator.set_params(n_components=1)
spelling_word_list_filename = 'spelling_wordlist'
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
self.stdout.write(errors)
try: original_published = super(DraftModuleStore, self).get_item(item_location) except ItemNotFoundError: original_published = None
if isinstance(value, (bool)): value = 'true' if value else 'false' if not value: value = ""
s, v = 0.75, 0.9 c = s * v m = v - c
six.reraise(DeserializationError, DeserializationError(e), sys.exc_info()[2])
new_io = six.StringIO() with self.assertRaises(CommandError): call_command( "createsuperuser", interactive=False, username="joe@somewhere.org", stdout=new_io, stderr=new_io, )
known_vendors = ['nvidia', 'amd', 'ati', 'intel'] gpu_classes = ('vga compatible controller', '3d controller')
assert_array_almost_equal(tpr, tpr_correct, decimal=2) assert_equal(fpr.shape, tpr.shape) assert_equal(fpr.shape, thresholds.shape)
FEATURES['ENFORCE_PASSWORD_POLICY'] = False FEATURES['ENABLE_MAX_FAILED_LOGIN_ATTEMPTS'] = False FEATURES['SQUELCH_PII_IN_LOGS'] = False FEATURES['PREVENT_CONCURRENT_LOGINS'] = False FEATURES['ADVANCED_SECURITY'] = False PASSWORD_MIN_LENGTH = None PASSWORD_COMPLEXITY = {}
from __future__ import absolute_import
'ENFORCE_PASSWORD_POLICY': False,
for tablename in tablenames: self.create_table(db, tablename, dry_run)
ints = subarr.view('i8') subarr = tslib.tz_localize_to_utc(ints, tz, ambiguous=ambiguous)
df = self.tsframe.fillna(0).astype(int) df.cumprod(0) df.cumprod(1)
if hasattr(index, 'tz'): if index.tz is not None: self.values = tslib.tz_convert(self.values, 'UTC', index.tz)
self.panel = Panel(np.random.rand(5, 5, 5))
if not np.any(Y_ == i): continue plt.scatter(X[Y_ == i, 0], X[Y_ == i, 1], .8, color=color)
__virtualname__ = 'carbon'
if kwargs.get('current_zone_only') == 'True': cmd_prefix += '-G '
from pylearn2.utils import serial from pylearn2.datasets import cifar10 from pylearn2.datasets import preprocessing
for app in ENV_TOKENS.get('ADDL_INSTALLED_APPS', []): INSTALLED_APPS += (app,)
subs = ''
MAXSIZE = int((1 << 31) - 1)
_config_filename_ = 'minion' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'minion') _setup_mp_logging_listener_ = True
CourseEnrollment.enroll(self.honor_user, self.course_key, "honor")
FILE_CHARSET = 'utf-8'
self.band = None self.assertTrue(os.path.isfile(pam_file))
six.assertRegex(self, yaml, r"\n fields: {dt: !(!timestamp)? '%s'}" % re.escape(dt))
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON )
key = '{prefix}level_{i}'.format(prefix=prefix, i=i) level = i
assert_raises(ValueError, sample_without_replacement, -1, 5) assert_raises(ValueError, sample_without_replacement, 5, -1)
Author.objects.create(name='Foo') Author.objects.create(name='Bar')
def post(self, request, *args, **kwargs): return self.delete(request, *args, **kwargs)
import salt.utils from salt.exceptions import CommandExecutionError
for email in ["", "a"]: params["email"] = email assert_email_error("A properly formatted e-mail is required")
for i in range(self.n_eigen + self.minibatch_size): self.G[i,i] += self.regularizer
for method in ['count', 'size']:
from salt.utils.schema import (Schema, IPv4Item, ) from salt.config.schemas.common import (MinionDefaultInclude, IncludeConfig )
if isinstance(basedir, six.string_types): basedir = [x.strip() for x in basedir.split(',')]
if position != seq_module.position: seq_module.position = position
added = self.frame + self.mixed_int _check_mixed_float(added, dtype='float64')
tm._skip_if_no_pathlib()
with check_mongo_calls(1): cached_structure = self._get_structure(self.new_course)
salt.utils.compat.pack_dunder(__name__)
dev['hash'] = all_devices['hash'] log.info('Found device %s in Zenoss', device) return dev
if prewarm == "auto": prewarm = not use_shared_mem forward_reduce_ndarray = ArrayMemmapReducer( max_nbytes, pool_folder, mmap_mode, verbose, prewarm=prewarm) forward_reducers[np.ndarray] = forward_reduce_ndarray forward_reducers[np.memmap] = reduce_memmap
if isinstance(output, tuple) and len(output) == 2: output = output[0]
self.chapter1 = ItemFactory.create( parent_location=self.course.location, category='chapter', display_name='untitled chapter 1' )
__virtualname__ = 'firewall'
self.assertEqual(dive._state.db, 'other') chris.save() dive.editor = chris html5.editor = mark
with outer_atomic(): entry = InstructorTask.objects.get(pk=entry_id) entry.task_state = PROGRESS entry.save_now()
self.assertEquals(2, len(response_results)) self.assertEquals(True, response_max_exceeded)
shutil.rmtree(root_dir)
self.user.profile.country = unrestricted_country.country self.user.profile.save() self.assert_enrollment_status()
result = f.clean('13.30 12-21-2010') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
pass
import salt.utils from salt.utils import which as _which from salt.exceptions import SaltInvocationError
X, y = datasets.make_friedman1(n_samples=1200, random_state=random_state, noise=1.0) X_train, y_train = X[:200], y[:200] X_test, y_test = X[200:], y[200:]
import copy import logging import os import re import string from distutils.version import LooseVersion as _LooseVersion
self.loaded = False
output = self.engine.render_to_string('template', {'foo': False}) self.assertEqual(output, 'yes')
destroy(vm_['name'])
self.assertIn("Not checking migrations", self.output.getvalue())
from __future__ import absolute_import
modulestore().get_item(usage_key)
scores = [x[1] for x in grid.grid_scores_] scores = np.array(scores).reshape(len(C_range), len(gamma_range))
try: return grouped[key] except KeyError: return grouped
from salt.utils import fopen, is_darwin, vt
try: import redis HAS_REDIS = True except ImportError: HAS_REDIS = False
this = self.reindex(items=items, major=major, minor=minor) other = other.reindex(items=items, major=major, minor=minor)
u2 = User.objects.create_user('testuser2', 'test2@example.com') self.assertFalse(u2.has_usable_password())
import re import os import json import time import logging import subprocess
for label in [paired_test, 'model_inheritance_same_model_name']: try: test_labels.remove(label) except ValueError: pass
is_eligible = api.is_user_eligible_for_credit("staff", credit_course.course_key) self.assertFalse(is_eligible)
if settings.FEATURES.get('ENABLE_READING_FROM_MULTIPLE_HISTORY_TABLES'): history_entries += StudentModuleHistory.objects.prefetch_related('student_module').filter( student_module__in=student_modules ).order_by('-id')
self.assert_grade(problem, 'choice_3', 'incorrect') self.assert_grade(problem, 'not_a_choice', 'incorrect')
for many_to_many in opts.many_to_many: if many_to_many.m2m_target_field_name() == to_field: return True
neighborhoods = neighbors_model.radius_neighbors(X, eps, return_distance=False)
if isinstance(field_value, six.string_types): ret_list.append(field_value) else: ret_list.append(str(field_value))
SignalHandler.course_published.disconnect(listen_for_course_publish)
n_classes = n_classes.astype(theano.config.floatX) return sm * (1 - n_classes * min_val) + min_val
published_only = 'rev-opt-published-only'
mode, is_active = CourseEnrollment.enrollment_mode_for_user(self.user, self.course.id) self.assertEqual(mode, CourseMode.DEFAULT_MODE_SLUG) self.assertEqual(is_active, True)
pygments_style = 'sphinx'
AssetBaseUrlConfig.objects.create(enabled=True, base_url='fakecdn.edx.org') expected_cdn_url = "//fakecdn.edx.org"
return valid_type.__name__
self._update_head(asset_key.course_key, index_entry, asset_key.branch, new_structure['_id'])
try: import six except ImportError: pass
self.xml_data = "static 463139" self.xml_url = "8e4cce2b4aaf4ba28b1220804619e41f"
date_fmt = '%Y%m%d%H%M%SZ'
if path_cache is not None: path_cache[block_key] = True
return self.headline
expected = DataFrame(comb, columns=names[::-1]) result = DataFrame(mrecs, columns=names[::-1]) assert_fr_equal(result, expected)
with self.assertRaises(TemplateSyntaxError): self.engine.render_to_string('if-tag-single-eq', {'foo': 1})
multiprocessing.active_children()
with tm.assertRaises(ValueError): o.sample(n=3.2)
s.map(f) s.apply(f) DataFrame(s).applymap(f)
import re import logging
if self.grouper.nkeys > 1: return self._python_agg_general(arg, *args, **kwargs) else:
#pylint: disable=E0602
return result.T
self.assertDictEqual(json.loads(response.content), data)
exc_str = exc_str_prefix + _nested_output(self.info)
usage_key = usage_key.replace(course_key=store.fill_in_run(usage_key.course_key))
command = command_name command_name = command.__class__.__module__.split('.')[-1]
result = [] non_capturing_groups = [] consume_next = True pattern_iter = next_char(iter(pattern)) num_args = 0
if adapter_type: log.error("Cannot change type of '{0}' to '{1}'. Not changing type".format(network_adapter.deviceInfo.label, adapter_type)) edited_network_adapter = network_adapter
if (os.path.exists(lockdirName) and os.path.isdir(lockdirName)): os.rmdir(lockdirName)
lines.append(line) continue
self.assertTrue(form.is_valid()) form.save() self.assertEqual(len(mail.outbox), 0)
from salt.utils.odict import OrderedDict
metric = ALL_METRICS[name]
result = expr._can_use_numexpr(operator.add, '+', self.frame, self.frame2, 'evaluate') self.assertTrue(result)
>> mkdf(5,3,data_gen_f=lambda r,c:randint(1,100))
instance = IntegerArrayModel(field=['1']) instance.save() loaded = IntegerArrayModel.objects.get() self.assertEqual(loaded.field, [1])
statobj = inputtypes.Status('queued', func) self.assertEqual(statobj.display_name, u'PROCESSING')
set_pw_cmd = "shadow.set_password {0} '{1}'".format( self.userB, password if salt.utils.is_darwin() else hashed_pwd ) self.run_call(set_pw_cmd)
df = tm.makeDataFrame()
site_configuration = SiteConfigurationFactory.create( site=self.site, )
key_columns.append(tuple(s.strip('"') for s in m.groups()))
for prop in 'acpi', 'cores', 'cpu', 'pool', 'storage', 'sata0', 'ostype', 'ide2', 'net0':
merged_start_value = max(min_all_parents_start_date, block_start)
self.vw.default_parts.add(self.sunroof)
mock_stop = MagicMock() with patch.object(parallels, 'prlctl', mock_stop): parallels.stop(name, runas=runas) mock_stop.assert_called_once_with('stop', [name], runas=runas)
batch_size = 1
rlist, _, _ = select.select(rfds, [], [], 0)
for B in combinations(features, k): for b in product(*[values[B[j]] for j in range(k)]): mask_b = np.ones(n_samples, dtype=np.bool)
from __future__ import absolute_import
self.assertEqual(col[0], Timestamp( '2000-01-01 08:00:00', tz='UTC'))
if override_indexes is None: override_indexes = [ [rename_mapping.get(n, n) for n in index] for index in model._meta.index_together ]
exc_info_on_loglevel=logging.DEBUG
self.navigate_to_video()
while len(acceptable) > 1: if acceptable[0] == wait_for: break else: acceptable.pop(0)
self.assertIn('You must wait', result['success'])
self.verify_staff_debug_present(True)
epsilon = 1e-9 * np.var(X, axis=0).max()
if opts.use_hashing: feature_names = None else: feature_names = vectorizer.get_feature_names()
Order.get_cart_for_user(self.user).start_purchase() Order.get_cart_for_user(self.user).start_purchase() Order.get_cart_for_user(self.user).start_purchase()
import salt.utils import integration
return [(t, t) for t in tokens]
time.sleep((2 ** (RoleRetries - retry)) + (random.randint(0, 1000) / 1000)) continue
tstart = time() clf = factory(alpha=alpha).fit(X, Y) delta = (time() - tstart)
return 1
import salt.utils
CreditProvider.objects.create( provider_id="ASU", enable_integration=True, provider_url="https://credit.example.com/request" )
self.expected_settings_change_initiated_event( 'email', email, 'you@there.com', username=username, user_id=user_id),
log.debug("running salt-cloud with %s", arg_str) output = self.run_script('salt-cloud', arg_str, catch_stderr, timeout=timeout)
assert_array_equal(lfw_pairs_train.target, [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]) assert_array_equal(lfw_pairs_train.target_names, expected_classes)
'default_top': str,
__salt__['jboss7.read_simple_binding'].return_value = {'success': True, 'result': {'value': 'DEV2'}}
self.assert_grade(problem, 'choice_foil_4', 'incorrect') self.assert_grade(problem, 'not_a_choice', 'incorrect')
'oauth2_provider',
with ensure_clean_store(self.path) as store:
YEAR_MONTH_FORMAT = 'F Y'
return {'name': name, 'changes': {}, 'result': True, 'comment': ''}
normalizer = (1.0 - pow(self.gamma, self.n_observations)) / \ (1.0 - self.gamma)
return None
query_features = microsite.get_value('student_profile_download_fields')
X_mm, y_mm, y_ml_mm, ESTIMATORS = None, None, None, None shutil.rmtree(TEMP_FOLDER)
config.floatX = self.prev_floatX
__virtualname__ = 'win_iis'
pass
chunksize = int(1e4)
def __singleton_init__(self, opts, **kwargs): self.opts = dict(opts) self.ttype = 'zeromq'
course_id = student_module.course_id student = student_module.student usage_key = student_module.module_state_key
self.assertIsNot(bad_out, ret_output)
from salt.states import boto_asg
assert_class_equal(left, right, obj=obj) assertIsInstance(left, np.ndarray, '[ndarray] ') assertIsInstance(right, np.ndarray, '[ndarray] ')
old_tab = CourseTabList.get_tab_by_type(self.course.tabs, tab_type)
iris = datasets.load_iris() X = iris.data[:, [0, 2]] y = iris.target
clf = svm.SVC() clf.fit(X_sp, Y) assert_array_equal(clf.predict([X[2]]), [1.])
gnomedesktop.__grains__ = {} gnomedesktop.__salt__ = {} gnomedesktop.__context__ = {} gnomedesktop.__opts__ = {}
'ENABLE_PREREQUISITE_COURSES': False,
from salt.cloud.clouds import linode
assert name not in self.temps self.temps[name] = value assert name in self.temps
honor_mode = CourseMode.mode_for_course(course_key, CourseMode.HONOR) audit_mode = CourseMode.mode_for_course(course_key, CourseMode.AUDIT)
STATICFILES_STORAGE = 'pipeline.storage.PipelineCachedStorage'
#latex_use_parts = False
df.iloc[:1] df['col'] df.dtypes str(df)
link_map = settings.MKTG_URL_LINK_MAP enable_mktg_site = microsite.get_value( 'ENABLE_MKTG_SITE', settings.FEATURES.get('ENABLE_MKTG_SITE', False) )
losses[losses <= 0] = 0 return np.average(losses, weights=sample_weight)
idx = TimedeltaIndex([1e14, 'NaT', pd.NaT, np.NaN])
continue
import os import stat import logging
df = DataFrame({'A': np.arange(20)}, index=np.arange(20))
score_means = list() score_stds = list() percentiles = (1, 3, 6, 10, 15, 20, 30, 40, 60, 80, 100)
to = str(to)
self.assertEquals(course.tabs[2], {'type': 'discussion', 'name': 'Discussion'})
return convolution_indices.evaluate(inshp, kshp, offset, nkern, mode=mode, ws=False)
next_date = offset.apply(cur) if next_date <= cur: raise ValueError('Offset %s did not increment date' % offset) cur = next_date
for __ in range(10): group2_id = RandomUserPartitionScheme.get_group_for_user( self.MOCK_COURSE_ID, self.user, self.user_partition ) self.assertEqual(group1_id, group2_id)
s = Series([], index=[]) self.assertEqual(s.sum(), 0)
pass
group = group.ix[:, found]
from salttesting import skipIf, TestCase from salt.exceptions import SaltInvocationError from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, Mock, NO_MOCK, NO_MOCK_REASON, patch )
with self.assertNumQueries(0): self.assertFalse( self.bookmark_service.set_bookmarked(usage_key=UsageKey.from_string("i4x://ed/ed/ed/interactive")) )
y_predicted = clf.predict(docs_test)
_OSFS_INSTANCE = {}
mat = self.mixed_frame.as_matrix(['foo', 'A']) self.assertEqual(mat[0, 0], 'bar')
CourseEnrollment.enroll(student, ccx_locator)
continue
y_true, _, probas_pred = make_prediction(binary=True) expected_auc = _auc(y_true, probas_pred)
HOSTNAME_MODULESTORE_DEFAULT_MAPPINGS = { 'preview\.': 'draft-preferred' }
return super(GISLookup, self).process_rhs(compiler, connection)
self.original_attrs = {}
ilo.__salt__ = {}
limit_choices_to = self.remote_field.limit_choices_to defaults.update({ 'limit_choices_to': limit_choices_to, })
import salt.ext.six as six
ps = tm.makePeriodPanel() shifted = ps.tshift(1) unshifted = shifted.tshift(-1)
tm._skip_if_no_pytz()
if service not in current_settings: changes_needed = True break
s = self.get_node(key) if s is not None: s._f_remove(recursive=True) return None
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
attributes = ['Attribute' + str(i) for i in range(1)] attribute_values = ['Value' + str(i) for i in range(5)]
uniform_batch_size = True
def f(): df.loc(axis=-1)[:, :, ['C1', 'C3']]
subtask_status.increment(retried_nomax=1, state=RETRY) return _submit_for_retry( entry_id, email_id, to_list, global_email_context, exc, subtask_status, skip_retry_max=True )
def capture(f, mapping=mapping): new_f = lambda *args: f(mapping.flatten(args, return_tuple=True)) return new_f
names = names + _get_consensus_names(indexes)
matcher = Matcher.return_value matcher.confirm_top.return_value = True
for processor in get_template_context_processors(): context.update(processor(request))
for text in self.txt: bio.write(self._encode(text + null_string))
perf_test = True
if not hasattr(a, 'dtype'): a = np.asarray(a) if not hasattr(b, 'dtype'): b = np.asarray(b)
return '%s(%s(%%s,%s), %s)' % (self.transform, self.from_text, value.srid, f.srid)
for i, (X_train_text, y_train) in enumerate(minibatch_iterators):
AUTH_BASE_URL = os.environ.get('test_url', 'http://localhost:8031')
n_classes_ = [n_classes_] classes_ = [classes_] class_prior_ = [class_prior_] constant = [constant]
request = RequestFactory().post('unused_url') request.user = self.user request.META['HTTP_HOST'] = "aGenericValidHostName" self.append_allowed_hosts("aGenericValidHostName")
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
self.update_masquerade(role='student', user_name=self.student_user.username) self.assertEqual(self.get_progress_detail(), u'2/2')
return _("regenerated") if self.is_regeneration else _("generated")
return function([], T.cast(T.argmax(self.estimated_rewards), 'int32'))
from __future__ import absolute_import import os
pkgs_str = ','.join([state_name for _, state_name in target_pkgs])
if not path: raise ValueError('no path specified')
from salt.exceptions import CommandExecutionError from salt.ext import six
self.repo = pygit2.init_repository(self.cachedir) new = True
for v in values: if not np.prod(v.shape): return
idx[key] = None setattr(self, key, None)
self._prefixlen = self._prefix_from_prefix_string(addr[1])
if 'id' not in item: item['id'] = item['name'] ret[item['name']] = item
import integration import salt.utils
self.assertEqual(set(subtree_roots_urls), set(expected_roots_urls))
valid_input['course_modules'] = None
duration = video_data.get('duration', None) size = default_encoded_video.get('file_size', 0)
if cur_retry < 5: update_ccxcon.apply_async( kwargs={'course_id': course_id, 'cur_retry': cur_retry + 1},
request_kwargs = { 'name': vm_info['name'], 'clone_from': vm_info['clonefrom'] }
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
if this.columns.is_unique:
if use_numexpr: op = lambda x: x else: op = lambda x: None if special:
return reduce(np.result_type, arrays_and_dtypes)
setuptools_args['use_2to3'] = True if BUILD_CACHE_DIR is None else False
import yaml
alias = _weekday_rule_aliases[self.rep_stamp.weekday()] return _maybe_add_count('W-%s' % alias, days / 7)
enrollment = CourseEnrollment.get_or_create_enrollment(user, course_id) self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assert_no_events_were_emitted()
self.choose_new_seed()
shutil.copyfile(path_in, path_test)
self.assertTrue(CourseEnrollment.is_enrolled(self.user, course_id)) self.assertTrue(self.user.roles.filter(name="Student", course_id=course_id))
self.assertSetEqual(set(apps._pending_operations) - initial_pending, {('apps', 'lazyb')})
self.assertEqual(private_student.school, private_school)
success = _retry_and_check(5, lambda: _reset_and_get_seed(module) != seed)
to_xml = string_output(lgdal.OSRExportToXML, [c_void_p, POINTER(c_char_p), c_char_p], offset=-2, decoding='ascii')
if self[0] <= other[0]: left, right = self, other else: left, right = other, self
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
zypper.__salt__ = dict() zypper.__context__ = dict() zypper.rpm = None
self.assertEqual(x, [])
from __future__ import absolute_import
if expected is None: self.assertEqual(expected, constructed) else: self.assertTrue(constructed.startswith(notes_url))
s = Series(len(index), index=index) s = s[::-1]
from salt.exceptions import CommandExecutionError from salt.modules import mac_xattr as xattr import salt.utils.mac_utils
self.assertIn(self.student_name, self.certificates_section.last_certificate_invalidation.text) self.assertIn(notes, self.certificates_section.last_certificate_invalidation.text)
self.forward_events = tornado.ioloop.PeriodicCallback(self._forward_events, self.opts['syndic_event_forward_timeout'] * 1000, io_loop=self.io_loop) self.forward_events.start()
with warnings.catch_warnings(record=True) as warns: warnings.simplefilter('always', RemovedInDjango20Warning) MyModel._base_manager self.assertEqual(len(warns), 0)
result = f.clean('21.12.2010') self.assertEqual(result, date(2010, 12, 21))
elif strategy == "most_frequent":
inherited_settings_map.setdefault(block_key, {}).update(inheriting_settings)
X_FRAME_OPTIONS = 'ALLOW'
indexer = _update_indexer(None, indexer=indexer)
reader = self.read_csv(StringIO(self.data1), index_col=0, iterator=True) df = self.read_csv(StringIO(self.data1), index_col=0)
mask = counts == I
cummin = self.tsframe.cummin(axis=1) expected = self.tsframe.apply(Series.cummin, axis=1) tm.assert_frame_equal(cummin, expected)
ret['result'] = __salt__['file.search']( name, '^[ \t]*{0}'.format(regex.lstrip('^')), multiline=True )
'top_file_merging_strategy': str,
CCX_MAX_STUDENTS_ALLOWED = 200
DATE_FORMAT = 'd F Y' TIME_FORMAT = 'g.i.A' YEAR_MONTH_FORMAT = 'F Y' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'Y-m-d'
continue
course = xml.CourseFactory.build() sequence = xml.SequenceFactory.build(parent=course) split_test = SplitTestModuleFactory( parent=sequence, attribs={ 'user_partition_id': '0',
self.assertRaises(NotImplementedError, s.any, bool_only=True) self.assertRaises(NotImplementedError, s.all, bool_only=True)
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
@ensure_csrf_cookie
self.hw1_names = ['h1p1', 'h1p2'] self.hw2_names = ['h2p1', 'h2p2'] self.hw3_names = ['h3p1', 'h3p2']
import os import logging
import logging
if len(list_item.children) == 2: enum.append(list_item) list_item = nodes.list_item() list_item['classes'] = ['lit-item']
return cache_and_return(None)
from salttesting import skipIf, TestCase from salttesting.helpers import destructiveTest, ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON
f_id = models.IntegerField()
df = DataFrame(np.random.randn(5, 3)) cond = df > 0
c(window=2) c(window=2, min_periods=1) c(window=2, min_periods=1, center=True) c(window=2, min_periods=1, center=False)
if self.learning_rate <= 0: raise ValueError("learning_rate must be greater than zero")
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, source_course_key): component = self.store.get_item(published_xblock.location) self.assertEqual(component.display_name, updated_display_name)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, mock_open, patch, call, NO_MOCK, NO_MOCK_REASON )
assert_frame_equal(result_sort, df.groupby(col, sort=True).first()) assert_frame_equal(result_nosort, df.groupby(col, sort=False).first())
course_key = CourseKeyField(max_length=255, db_index=True, null=True)
'ENABLE_INSTRUCTOR_BACKGROUND_TASKS': True,
IndexErrorArticle.objects.create( headline="Article 1", pub_date=datetime(2005, 7, 26), expire_date=datetime(2005, 9, 1) ) check()
#pylint: disable=E0602
try: return self.get_all_decls()[id] except KeyError: self.get_all_decls()[id] = s = StateDeclaration(id) self.decls.append(s) return s
from urllib2 import urlopen
self.assertEqual(tag.tag, 'stinky')
log.exception("Error in django view.") return render_to_response(template_path, context)
import salt.utils from salt.state import STATE_INTERNAL_KEYWORDS as _STATE_INTERNAL_KEYWORDS from salt.exceptions import SaltException from salt.ext import six
parents_map = [[], [0], [0], [1], [1], [2], [2, 4]]
if publish == "discard_changes": store.revert_to_published(xblock.location, user.id) return JsonResponse({'id': unicode(xblock.location)})
self.assertEqual(len(self.video.q(css='video')), 1)
X = iris.data[:, pair] y = iris.target
import elementtree.cElementTree as ElementTree
site.register(User, UserAdmin) site.register(Group, GroupAdmin)
import salt.utils.http
self.assertEqual(list(qs1), list(qs2)) self.assertEqual(list(qs3), list(qs4))
self.assertEqual(len(self.certificates_page.certificates), 1) course_number = self.certificates_page.get_course_number() self.assertEqual(self.course_info['number'], course_number)
response = self.client.get('/?clear-lang') self.assert_tag_has_attr(response.content, "html", "lang", site_lang)
vim-enhanced: pkg.removed: - version: 7.4.160-1.el7 - ignore_epoch: True
EmptyPromise(options_selected, "Option is selected").fulfill()
port: 8000 address: 0.0.0.0 backlog: 128 ssl_crt: /etc/pki/api/certs/server.crt ssl_key: /etc/pki/api/certs/server.key debug: False disable_ssl: False webhook_disable_auth: False cors_origin: null
from __future__ import absolute_import, print_function import math import time import copy from datetime import datetime, timedelta
_dec._decorated_function = getattr(func, '_decorated_function', func)
pass
self.split_test_module.user_partition_id = SplitTestFields.no_partition_selected['value']
'recon_randomize': bool,
assert len(corruptors) >= 1 self._corruptors = corruptors
tz = get_fixed_timezone(-210) aware_dt = datetime(2009, 5, 16, 5, 30, 30, tzinfo=tz)
lookup_name = 'exact'
from __future__ import unicode_literals
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if len(left) > 0: right_drop.append(rk) else: left_drop.append(lk)
rs = mi_labels.loc[('i', 'X')] xp = mi_labels.ix[('i', 'X')] assert_frame_equal(rs, xp)
self.annotation.delete() self.assertEqual(u"", self.reg.csv_report_comments)
tp = y_true == y_pred tp_bins = y_true[tp] if sample_weight is not None: tp_bins_weights = np.asarray(sample_weight)[tp] else: tp_bins_weights = None
if isinstance(data, dict) and not pillar_key: return data elif not pillar_key: return {'redis_pillar': data} else: return {pillar_key: data}
reraise_as(ImportError("Could not import %s; ImportError was %s" % (modulename, str_e)))
if not is_safe_url(url=next_page, host=request.get_host()): next_page = request.path
affinity = 'euclidean'
length = arr.size if hasattr(arr, 'size') else len(arr) return np.nan if length == 0 else np.median(arr, *args, **kwargs)
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21 13:30:05")
self.adding = True
argtypes = [WKB_READ_PTR, c_char_p, c_size_t] restype = GEOM_PTR errcheck = staticmethod(check_geom)
if not prepared: value = connection.ops.deconstruct_raster(value) return super(RasterField, self).get_db_prep_value(value, connection, prepared)
regressor.n_components = 1
from salt.modules import win_timezone
if lookup.startswith('password'): return False return super(UserAdmin, self).lookup_allowed(lookup, value)
names = self.index_names level_names = [level.name for level in self.index.levels] self.assertEqual(names, level_names)
#html_title = None
result = first.difference(second)
data = { "form-TOTAL_FORMS": "1", "form-INITIAL_FORMS": "1", "form-MAX_NUM_FORMS": "0",
s_orig = Series([1, 2, 3]) df_orig = DataFrame(np.random.randint(0, 5, size=10).reshape(-1, 5))
_base.update(copy.deepcopy(_overrides)) return _base
result = sparse.loc[sparse % 2 == 1] exp = orig.loc[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
assert_raises(ValueError, next, StratifiedShuffleSplit(3, 0.2).split(X, y))
msg = '%200s has no associated address class' % (type(self),) raise NotImplementedError(msg)
if required_courses: pre_requisite_courses[course_key] = {'courses': required_courses}
UPSELL_TO_VERIFIED_MODES = [HONOR, AUDIT]
return v
FEATURES['ENABLE_COURSEWARE_INDEX'] = True FEATURES['ENABLE_LIBRARY_INDEX'] = True SEARCH_ENGINE = "search.tests.mock_search_engine.MockSearchEngine"
left = _permute(index[:-5]) right = _permute(index[10:]) result = left.intersection(right).sort_values() tm.assert_index_equal(result, index[10:-5])
from salt.exceptions import CommandExecutionError import salt.utils
if not user.is_active: response_payload = { 'unique_student_identifier': user.username, 'inactiveUser': True, } return JsonResponse(response_payload)
from __future__ import absolute_import
'verified_track_content',
self.assertIsNone(cache_middleware.process_request(request))
return list(os.walk('/sys/fs/bcache/'))[0][1][0]
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
self.functions = functions self.returners = returners
self.assertContains(response, 'course-container', 3) self._assert_responses(response, program_count)
Field.__init__(self, required, widget, label, initial, help_text, *args, **kwargs) self.queryset = queryset
def geometry_columns(self): return PostGISGeometryColumns
user = self.create_user_and_enroll('honor') with self.assertNumQueries(3): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
offset1 = BMonthEnd() offset2 = BMonthEnd() self.assertFalse(offset1 != offset2)
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
_ = lambda text: text
if (obj >= self.obj.shape[axis] and not isinstance(labels, MultiIndex)): raise ValueError("cannot set by positional indexing with " "enlargement")
__func_alias__ = { 'list_': 'list' }
if has_mi_columns: columns = obj.columns
self.course_nav.go_to_vertical('Test Vertical-2') self.video.wait_for_video_player_render()
from __future__ import absolute_import
K_train = np.dot(X_[:180], X_[:180].T) y_train = y_[:180]
p, created = Person.objects.update_or_create(**params) self.assertFalse(created)
result = sparse[orig % 2 == 1] exp = orig[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
from __future__ import division
'event_return_blacklist': list,
AND = 'AND' OR = 'OR' default = AND
problem_name = own_metadata(child).get('display_name', '')
import salt.ext.six as six
test_labels_set = set() for label in test_labels: bits = label.split('.')[:1] test_labels_set.add('.'.join(bits))
data = "1,2\n3,4,5"
qry = 'OPTIMIZE TABLE {0}.{1}'.format(s_name, s_table) _execute(cur, qry) results = cur.fetchall() log.debug(results) return results
self.assertNotContains(response, 'release_date__day=') for date in DATES: self.assert_contains_month_link(response, date) self.assert_non_localized_year(response, 2000)
from salt.utils import immutabletypes
try: return get_draft() except ItemNotFoundError: return get_published()
clf = OneVsRestClassifier(base_clf).fit(X, Y) y_pred = clf.predict([[3, 0, 0]])[0] assert_equal(y_pred, 1)
if has_wildcard: match_list = set(atom) else: match_list = set(_porttree().dbapi.xmatch("match-all", atom))
for param_name, param in self.parameters.items(): if (param._partial_kwarg and param_name not in kwargs): kwargs[param_name] = param.default
self.client.logout()
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON
for sub_grid in self.param_grid: if not sub_grid: if ind == 0: return {} else: ind -= 1 continue
def get_indexers_list():
result = f.clean('13.30.05') self.assertEqual(result, time(13, 30, 5))
self.assertFalse(self.store.has_changes(test_course)) self.assertFalse(self.store.has_changes(chapter))
return self.type == other.get('type') and name_is_eq
if not settings.FEATURES.get('EMBARGO'): return True
pieces["distance"] = int(mo.group(2))
from salt.ext.six.moves.urllib.parse import urljoin as _urljoin import salt.ext.six.moves.http_client from salt.version import __version__ import salt.utils.http
images_grad, filters_grad = grad(cost, [images, filters]) reference_cost = (cost_weights * output_conv2d).sum() images_conv2d_grad, filters_conv2d_grad = grad(reference_cost, [images, filters])
int2byte = operator.methodcaller("to_bytes", 1, "big")
post = __salt__['git.config_set']( cwd=repo, key=name, value=value, multivar=multivar, user=user, **{'global': global_} )
actual = grouped_df.pid.transform(len) assert_series_equal(actual, expected)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.wait_for( lambda: "Add a New Cohort" in self.q(css=self._bounded_selector(".form-title")).text, "Create cohort form is visible" )
return alias
import salt.utils import salt.utils.decorators as decorators
index_col, expected = None, DataFrame([], columns=list('xyz')), tm.assert_frame_equal(self.read_csv( StringIO(data), index_col=index_col), expected)
config_course_cohorts(self.course1, is_cohorted=True, auto_cohorts=["Course1AutoGroup1", "Course1AutoGroup2"])
def_ms = modulestore() course = def_ms.get_course(SlashSeparatedCourseKey('MITx', 'edx4edx', 'edx4edx')) CourseStaffRole(course.id).add_users(self.user)
class_sep = 1e6 make = partial(make_classification, class_sep=class_sep, n_redundant=0, n_repeated=0, flip_y=0, shift=0, scale=1, shuffle=False)
if birth_year: self.set_birth_year(birth_year)
from __future__ import absolute_import import logging
from __future__ import unicode_literals
if com.is_categorical_dtype(self.tr_series.dtype): level_info = self.tr_series._values._repr_categories_info() if footer: footer += "\n" footer += level_info
future = async.async_method()
return False
has_permission=False, **(extra_context or {})
prefix = prefix or '=' targets.append('{0}{1}{2}'.format(param, prefix, verstr))
label = field.related_model._meta.verbose_name
#latex_appendices = []
self.dashboard_page.upgrade_enrollment(self.course_info["display_name"], self.upgrade_page)
with assertRaisesRegexp(ValueError, 'Index has duplicate keys'): df.set_index('A', verify_integrity=True)
import datetime import itertools import nose
self.assertEqual(len([r for r in httpretty.httpretty.latest_requests if r.method == 'POST']), 0)
from __future__ import unicode_literals
from __future__ import absolute_import import json import copy
assert_panel_equal(p.ix[:, dates, cols], p.reindex(major=dates, minor=cols))
from __future__ import absolute_import from salt.ext.six.moves import zip
mask = isnull(values) if mask.any(): result = np.array(result) result[mask] = na_rep result = result.tolist()
user_requested_access(self.user) self.assertEqual('granted', get_course_creator_status(self.user))
self.assertEqual(request.FILES.getlist('foo'), [])
if key in obj._data.items: return None
log = logging.getLogger(__name__)
self.courseware_page.click_next_button_on_bottom() self.assert_navigation_state('Test Section 1', 'Test Subsection 1,2', 0, next_enabled=True, prev_enabled=True)
self.assertEqual(rendered_html.tag, "div")
if self._convert_dates: for c, o in zip(columns, original_columns): if c != o: self._convert_dates[c] = self._convert_dates[o] del self._convert_dates[o]
related = RelatedModel.objects.create(exact=False) relation = related.test_fk.create() self.assertEqual(related.test_fk.get(), relation)
return self.q(css=".badges-modal").visible
_context.update({ 'base_asset_url': StaticContent.get_base_url_path_for_course_assets(self.location.course_key), 'enable_latex_compiler': self.use_latex_compiler, 'editor': self.editor }) return _context
topleft = N.array([kshp[0]-1,kshp[1]-1])
from __future__ import unicode_literals
from __future__ import absolute_import import os
from __future__ import absolute_import import logging import os import os.path import hashlib import json
response = self.client.get('/check_session/') self.assertEqual(response.status_code, 200) self.assertEqual(response.content, b'YES')
return
stacklevel = 3
try: uidb64 = force_text(urlsafe_base64_encode(force_bytes(base36_to_int(uidb36)))) except ValueError:
self._make_eligible() self._purchase_credit() request_uuid = self._initiate_request() self._set_request_status(request_uuid, "rejected")
name = self.get_available_name(name) full_path = self.path(name)
sparse_results = sparse_classifier.staged_predict(X_test_sparse) dense_results = dense_classifier.staged_predict(X_test) for sprase_res, dense_res in zip(sparse_results, dense_results): assert_array_equal(sprase_res, dense_res)
assert_raises(ValueError, precision_recall_fscore_support, y_true, y_pred, beta=0.0)
result = list_files('.py') for path in result: logger.info(path)
__virtualname__ = 'locale'
self.join(other2, main)
log_setup.setup_multiprocessing_logging()
Book.objects.using('other').create(title="Dive into Python", published=datetime.date(2009, 5, 4))
from __future__ import absolute_import
from __future__ import absolute_import import logging
import integration
if 'user_id' in kwargs: kwargs['user_id'] = str(kwargs['user_id']) return kwargs
self.assertEqual(i, 100) self.assertEqual(s, 1)
assert key.user_id == self.user.id
self.votes = Counter()
VERIFY_STUDENT = AUTH_TOKENS.get("VERIFY_STUDENT", VERIFY_STUDENT)
scaler = StandardScaler(with_mean=True).fit(X) assert_raises(ValueError, scaler.transform, X_csr) assert_raises(ValueError, scaler.transform, X_csc)
if normalize is not False: table = _normalize(table, normalize=normalize, margins=margins)
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, done=True) self.assertTrue(module.should_show_reset_button())
result = f.clean('13.30') self.assertEqual(result, time(13, 30, 0))
idx = PeriodIndex([2000, 2007, 2007, 2009, 2009], freq='A-JUN') ts = Series(np.random.randn(len(idx)), index=idx)
param_grid = [param_grid]
incxml = etree.XML(ifp.read())
bob = User.objects.using('default').get(username='bob')
rendered = pieces["short"]
p = Period('2012', freq='15D') xp = _ex(2012, 1, 16) self.assertEqual(xp, p.end_time)
if hasattr(pip, '__version__'): pip.__version__ = original_pip_version
from __future__ import unicode_literals
graders = _filter_entrance_exam_grader(graders)
ndim = values.ndim if values.ndim == 1:
THRESHOLDED_METRICS_WITH_AVERAGING = [ "roc_auc_score", "average_precision_score", ]
self.setDataFrame(dataFrame)
self.store.publish(problem.location, self.user.id)
repos = tuple( x for x, y in six.iteritems(list_repos()) if str(y.get('enabled', '1')) == '1' )
self.assertFalse(form.is_valid())
i = date_range('1/1/2011', periods=5, freq='10s', tz='US/Eastern')
if self.dtype is not None: dtype = _ensure_decoded(self.dtype)
if not version: self.version = getattr(settings, 'GOOGLE_MAPS_API_VERSION', '2.x') else: self.version = version
def _failing_new(*args, **kwargs): raise TypeError('Can\'t create another NullSentinel instance')
from __future__ import unicode_literals
rs = read_csv(filename, compression="xz", index_col=0) assert_frame_equal(df, rs)
self.tr_size_col = -1
if sizeof(c_ulong) != sizeof(c_void_p): ULONG_PTR = c_int64 else: ULONG_PTR = c_ulong PVOID = c_void_p
from __future__ import absolute_import, print_function import os import yaml import tarfile import shutil import msgpack import datetime import hashlib import logging import pwd import grp import sys
if survey.utils.must_answer_survey(course, request.user): return redirect(reverse('course_survey', args=[unicode(course.id)]))
import salt.output from salt.ext.six import string_types from salt.utils import get_colors import salt.utils.locales
develop.run(self)
if publish == 'make_public': modulestore().publish(xblock.location, user.id)
staff = UserFactory() allow_access(self.course, staff, 'staff') self.assertTrue(CourseStaffRole(self.course.id).has_user(staff))
log = logging.getLogger(__name__)
from __future__ import absolute_import from datetime import tzinfo, datetime, timedelta import uuid import logging import json
with override_settings(REGISTRATION_EXTRA_FIELDS={"country": "required"}): response = self.client.get(self.url) self.assertHttpOK(response)
X = np.asarray(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
self.assertFalse(result['success']) self.assertIn(u"did not return a required parameter", result['error_html'])
self.assertNotContains(response, "How it Works") self.assertNotContains(response, "Find courses") self.assertNotContains(response, "Schools & Partners")
X_trans = maxabs_scale(X) assert_array_almost_equal(X_trans, X_expected)
self.object_name = cls.__name__ self.model_name = self.object_name.lower() self.verbose_name = camel_case_to_spaces(self.object_name)
doc_store_config = { 'host': HOST, 'port': PORT, 'db': DB, 'collection': COLLECTION, } cls.add_asset_collection(doc_store_config)
with self.assertNumQueries(2): qs = Comment.objects.prefetch_related('content_object') [c.content_object for c in qs]
exams = get_all_exams_for_course(course_key)
class MyWidget(TextInput): pass
dm = DataFrame(columns=['A', 'B'], index=np.arange(10)) self.assertEqual(dm.values.shape, (10, 2))
modal.release_date = '3/12/1972' modal.release_time = '04:01' modal.due_date = '7/21/2014' modal.due_time = '23:39' modal.policy = 'Lab'
log.error('Detected nodegroup expansion failure of "{0}"'.format(word)) return []
pattern = named_group_matcher.sub(lambda m: m.group(1), pattern)
return stdout, stderr
self.assertFalse(CourseInstructorRole(self.course.id).has_user(nonstaff_user)) self.assertTrue(CourseStaffRole(self.course.id).has_user(nonstaff_user))
log.error('Wrong type, skipping {0}'.format(kwarg))
result.append(ch)
mixed = Series(['aBAD_BAD', NA, 'BAD_b_BAD', True, datetime.today(), 'foo', None, 1, 2.])
assert_false(hasattr(MLPClassifier(algorithm='l-bfgs'), 'partial_fit'))
repo = _get_local_repo_dir(saltenv)
if isinstance(loc, slice): lev_num = labels._get_level_number(level) if labels.levels[lev_num].inferred_type == 'integer': loc = labels[loc]
wkb_w.byteorder = 1
from __future__ import absolute_import
key = self.__read_master_key() if key == self.key: return payload self.key = key payload_kwargs['key'] = self.key payload = channel.send(payload_kwargs)
from __future__ import absolute_import import logging
value = self.literal
import salt.utils
download_packages(opts)
n_leaves = n_samples
self.assertFalse(self.has_notes_tab(self.course, self.user))
self.assertEqual(self.run_function('xattr.list', [NO_FILE]), 'ERROR: File not found: {0}'.format(NO_FILE))
d1 = datetime.datetime(2003, 1, 1) d2 = datetime.datetime(2008, 1, 1)
lc_block = self._add_library_content_block(course, self.lib_key) lc_block = self._refresh_children(lc_block) course_block = modulestore().get_item(lc_block.children[0])
- alarms: UnHealthyHostCount: attributes: threshold: 2.0
success = convnet_compile() if success: convnet_available.compiled = True else: convnet_available.compile_error = False _logger.debug('compilation success: %s', success)
self.assertNotEqual(Place(id=1), Restaurant(id=1)) self.assertNotEqual(Restaurant(id=1), Place(id=1))
cert_type=server type_ext=True
X, y = make_blobs(n_samples=100, centers=10) brc = Birch(n_clusters=10) brc.fit(X)
ele.value = grace_period
ret = self.run_function('state.sls', mods='issue-1879', timeout=120) self.assertSaltTrueReturn(ret)
"form-1-id": str(fd2.id), "form-1-reference": "456", "form-1-driver": "bill", "form-1-restaurant": "thai",
try: FLAGS(flags) except gflags.FlagsError as e: print('%s\nUsage: %s ARGS\n%s' % (e, str(flags), FLAGS)) sys.exit(1)
function = Group(inner_varname + Suppress("(") + expr + Suppress(")"))("function") function.setParseAction(self.function_parse_action)
with tm.assertRaises(gbq.TableCreationError): gbq.to_gbq(df, destination_table, PROJECT_ID)
'edxval',
exc_info_on_loglevel=logging.DEBUG
if dtypes is False: return self
from __future__ import absolute_import, print_function import sys import inspect import textwrap import functools
import numpy as np from numpy.random import randint
Created Certificate for "DBReplica_No.1": "/etc/pki/my_little/certs/DBReplica_No.1.crt"
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if not hasattr(self, 'label'): self.label = app_name.rpartition(".")[2]
req_status = api.get_credit_requirement_status(self.course_key, "bob", namespace="grade", name="grade") self.assertEqual(req_status, [])
import salt.config import salt.loader from salt.modules import boto_apigateway
self.assertTrue(self_paced_course.self_paced) self.assertEqual(self_paced_course.start, one_month_from_now) self.assertIsNone(self_paced_section.start)
if not issubclass(clz, APIView): msg = ( u"{clz} is not a Django Rest Framework APIView subclass." ).format(clz=clz) LOGGER.warning(msg) return clz
mlb = MultiLabelBinarizer(classes=[1, 3, 2]) assert_array_equal(mlb.fit_transform(inp), indicator_mat) assert_array_equal(mlb.classes_, [1, 3, 2])
_update_microsite_context(context, configuration)
self.assertTrue(filecmp.cmp(path_test + '.bak', path_in))
has_zoneinfo_database = True
self.assertEqual(response.status_code, 204)
from __future__ import absolute_import
config.toggle() config.edit() config.add_group() config.save()
self.__class__ = OGRFieldTypes[self.type]
if email_students: send_beta_role_email(action, user, email_params) if auto_enroll: if not CourseEnrollment.is_enrolled(user, course_id): CourseEnrollment.enroll(user, course_id)
ErrClass = socket.error if six.PY2 else OSError try: socket.gethostbyname(domain) return True except ErrClass: return False
columns = {} for idx, col_name in enumerate(response['Titles']): columns[idx] = col_name
from salt import template
if child.location.category == 'problem': c_problem += 1 stack_data = []
import salt.state from salt.config import minion_config from salt.template import compile_template_str from salt.serializers import yamlex
pts = pts[pts['species'] == species_name] bunch['pts_%s' % label] = pts
f = TypedChoiceField(choices=[(1, "+1"), (-1, "-1")], coerce=bool) self.assertTrue(f.clean('-1'))
moosefs.__salt__ = {}
try: shutil.rmtree(repo['lockfile']) except OSError as exc: _add_error(failed, repo, exc)
GeometryCollection._allowed = (Point, LineString, LinearRing, Polygon, MultiPoint, MultiLineString, MultiPolygon)
from salt.exceptions import SaltSystemExit import salt.modules.cmdmod import salt.utils
destroy(vm_['name'])
X = np.linspace(0.1, 9.9, 20) X = np.atleast_2d(X).T
mako_middleware_process_request(request)
clf_quantile = GradientBoostingRegressor(n_estimators=100, loss='quantile', max_depth=4, alpha=0.5, random_state=7)
return Index(self.group_info[0]).is_monotonic
from pylearn2.gui.patch_viewer import PatchViewer
import logging import re import os HAS_DBUS = False try: import dbus HAS_DBUS = True except ImportError: pass
self.assertIn(draft_video.location, public_vertical.children)
return [True]
self.new_connection = connection.copy()
with open(os.path.join(TEST_DATA, 'geometries.json')) as f: geometries = json.load(f) return TestGeomSet(**strconvert(geometries))
return ups
name = '"SOME%NAME"' quoted_name = connection.ops.quote_name(name) self.assertEqual(quoted_name % (), name)
remove_users(self.admin, CourseCreatorRole(), self.user) self.assertFalse(user_has_role(self.user, CourseCreatorRole()))
with open(state_file_path, "w") as state_file: state_file.write(expected_version)
parent = self.get_a_block(usage_id="parent") parent.inherited = "Changed!" self.assertEqual(parent.inherited, "Changed!")
ADD_GROUP = __random_string() DEL_GROUP = __random_string() CHANGE_GROUP = __random_string() ADD_USER = __random_string() REP_USER_GROUP = __random_string()
ret[name] = version_rev
expected = DataFrame([[4, 5, 6]], columns=['a', 'b', 'c'])
mappings = getattr(settings, 'HOSTNAME_MODULESTORE_DEFAULT_MAPPINGS', None)
self.returnString = matchString self.name = "'%s'" % self.returnString self.errmsg = "Expected " + self.name #self.myException.msg = self.errmsg
continue
if course is None: course = modulestore().get_course(xblock.location.course_key)
from __future__ import absolute_import import os
self.assertEqual(list(dive.reviews.all().values_list('source', flat=True)), ['Python Weekly'])
ssh_gateway_port: 22
self.assertEqual(len(self.lib_page.xblocks), 1) problem_block = self.lib_page.xblocks[0] self.assertIn("Laura Roslin", problem_block.author_content)
elif access_point == self.ENROLLMENT_ACCESS_POINT: message_dict = messages.ENROLL_MESSAGES elif access_point == self.COURSEWARE_ACCESS_POINT: message_dict = messages.COURSEWARE_MESSAGES
y = y.T
try:
from __future__ import unicode_literals
loader = MigrationLoader(None, ignore_no_migrations=True)
sys.exit(3)
ndim = _read_int32(f) if debug: logger.debug('header ndim {0}'.format(ndim))
os.remove(filename)
return render_to_response('discussion/index.html', context)
sr = SpatialReference('WGS84') mpoly = OGRGeometry(mp.wkt, sr) self.assertEqual(sr.wkt, mpoly.srs.wkt)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from __future__ import unicode_literals
photo_id_url = ( self.image_url("photo_id") if copy_id_photo_from is None else self.image_url("photo_id", override_receipt_id=copy_id_photo_from.receipt_id) )
if not settings.FEATURES.get('EMBARGO'): raise MiddlewareNotUsed()
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True, False], credit_type='halves' )
if not metric_base.startswith('virt.'): metric_base += '.' + ret['id'].replace('.', '_')
centers[center_idx] *= counts[center_idx]
from __future__ import absolute_import import os import sys import shutil import tempfile import textwrap import copy
from salt.ext import six
from __future__ import absolute_import
return
try: if not _available(name, ret): return ret except CommandExecutionError as exc: ret['result'] = False ret['comment'] = exc.strerror return ret
from __future__ import absolute_import
test_success = win_mod_reg.delete_key_recursive('HKEY_CURRENT_USER', subkey) self.assertTrue(test_success)
func.restype = c_int
df1 = self.read_html(self.spam_data, '.*Water.*') df2 = self.read_html(self.spam_data, 'Unit') assert_framelist_equal(df1, df2)
return []
#pylint: disable=E0602
error = mean_absolute_error(y_true, y_pred) assert_almost_equal(error, (1. / 3 + 2. / 3 + 2. / 3) / 4.)
key, _ = convert_missing_indexer(idx)
VERSION = 1
ret['comment'] = 'Event module not available. Beacon enable job failed.'
self.errcheck = check_cs_get dbl_param = POINTER(c_double)
self.assertRaises(TypeError, Index, 0)
label_type_to_index = {'category': 0, 'instance': 1, 'elevation': 2, 'azimuth': 3, 'lighting': 4}
manager = getattr(self.model, kwargs.pop('manager')) manager_class = create_forward_many_to_many_manager(manager.__class__, rel, reverse) return manager_class(instance=self.instance)
self.read_csv(StringIO(data)) self.read_table(StringIO(data), sep=',')
from __future__ import absolute_import import logging
person.delete()
s1 = Person.objects.only('name').get(pk=s.pk) with self.assertNumQueries(1): s1.save()
mod = import_module(mod_path) try: cls = getattr(mod, cls_name) except AttributeError: if module is None: import_module(entry) else: raise
assert not ind.is_monotonic
embargo_redirect = embargo_api.redirect_if_blocked( course.id, user=request.user, ip_address=get_ip(request), url=request.path ) if embargo_redirect is not None: return redirect(embargo_redirect)
ret['comment'] = ('Database {0} is not present, so it cannot be removed' ).format(name) return ret
from __future__ import absolute_import
if is_staff: user.is_staff = True user.save() CourseEnrollment.enroll(user, course_key)
pred = Y_proba > .5 assert_array_equal(pred, Y_pred_sprs.toarray())
num_enrollments = len(enrollments) self.assertDictContainsSubset({'attempted': num_enrollments, 'succeeded': num_enrollments, 'failed': 0}, result)
for p in listener_policies: if re.match(r'^ELBSecurityPolicy-\d{4}-\d{2}$', p): default_aws_policies.add(p)
DELAY = 0.5
context_dictionary = {}
self.assertEquals(block_counts_for_course['chapter'], 2)
cookies = response.cookies response = HttpResponseNotModified() response.cookies = cookies return response
if self.starts_with: flatpages = flatpages.filter( url__startswith=self.starts_with.resolve(context))
df = r['faithful']
tok = tok.replace("\\", "U")
ticket_url = 'https://code.djangoproject.com/ticket/%s'
ret['comment'] = 'Event module not available. Beacon add failed.'
if show_col_names: col_header = ['%s' % x for x in self._get_column_name_list()] else: col_header = [''] * columns.nlevels
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON ensure_in_syspath('../')
sw = np.ones(6) clf = GaussianNB().fit(X, y) clf_sw = GaussianNB().fit(X, y, sw)
indexer = convert_to_index_sliceable(self, key) if indexer is not None: return self._setitem_slice(indexer, value)
ret[minion] = data['full_ret']
import os
if installer.startswith(('salt:', 'http:', 'https:', 'ftp:')):
assert_true(world.css_contains_text(problem_css, category))
with self.assertNumQueries(0): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
self.assertTrue('success' in result and result['success'])
graders = { 'edc': self.grade_via_every_decision_counts, 'halves': self.grade_via_halves, 'false': self.grade_without_partial_credit }
log.error(err)
with outer_atomic(read_committed=True):
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
result = grouped.dtype expected = grouped.agg(lambda x: x.dtype)
train.save = MethodType(only_run_extensions, train)
rng = np.random.RandomState(0) X = rng.randn(97, 149) Y = rng.randn(111, 149)
self.assertIsInstance(form._errors, forms.ErrorDict)
except Http404: return response except Exception: if settings.DEBUG: raise return response
day1 = datetime(2013, 3, 5) day2 = datetime(2013, 5, 5) day3 = datetime(2014, 3, 5)
cm = metrics.confusion_matrix(y_test, y_predicted) print(cm)
saltenv=saltenv, pillarenv=kwargs.get('pillarenv'), pillar_override=kwargs.get('pillar'), )
funcs = ['add', 'mean', 'prod', 'min', 'max', 'var'] for f in funcs: g._cython_agg_general(f)
if self.get_autocommit() != self.settings_dict['AUTOCOMMIT']: self.close() return
from salt.states import portage_config
('RIGHTPADDING', (5, 0), (5, -1), 7 * mm),
while r < 100: r = r * 10 while r >= 1000: r = r / 10
return
metadata_translations = dict(RawDescriptor.metadata_translations) metadata_translations['id'] = 'discussion_id' metadata_translations['for'] = 'discussion_target'
assert_frame_equal(result_sort, df.groupby(col, sort=False).first())
result = obj.rename_axis(arg, axis=axis) expected = obj.copy() setattr(expected, axis, list('abcd')) self._compare(result, expected)
if stdout is None and stderr is None: self.assertFalse(term.isalive())
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
try: group_id = get_group_id_for_comments_service(request, course_key, commentable_id) except ValueError: return HttpResponseBadRequest("Invalid cohort id") if group_id is not None: thread.group_id = group_id
idf = np.log(float(n_samples) / df) + 1.0 self._idf_diag = sp.spdiags(idf, diags=0, m=n_features, n=n_features)
from __future__ import absolute_import
return table
_bulk_ops_record_type = BulkOpsRecord
del sys del builtins del encoding
batch_inertia, centers_squared_diff = _mini_batch_step( X_valid, x_squared_norms[validation_indices], cluster_centers, counts, old_center_buffer, False, distances=None, verbose=self.verbose)
>>> puts = aapl.get_put_data()
url(r'^template_response_view/$', views.template_response_view),
blocks_visited.add(xblock.location)
if i + 1 == len(course_keys): self.assertTrue(badge_class.get_for_user(user)) else: self.assertFalse(badge_class.get_for_user(user))
'edxval',
cls.create_and_enroll_student( courses=[cls.test_course_2], username='student_enrolled_other_course_not_on_team' )
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
import salt.utils.compat
if valid_size < 1.0: valid_size /= 1.0 - np.true_divide(self.n_test, self.n) self.valid_size = valid_size
assert not any([key in rval for key in contrib]) assert all([key in params for key in contrib])
with patch_edxnotes_api_settings("http://example.com"): self.assertEqual("http://example.com/", get_endpoint_function())
ts = Timestamp('2001-01-05 11:56', tz=maybe_get_tz('dateutil/UTC')) self.assertEqual(ts, ts.tz_convert(dateutil.tz.tzutc()))
ret = _get_labels(node, apiserver_url)
rng = np.random.RandomState(0) n_features = 5 n_samples = 4 X = rng.randn(n_samples, n_features)
code = "a = 0\n" + ("a += 1\n" * 12345)
pkgutil.__salt__ = {} pkgutil.__context__ = {}
if on_rtd: os.environ['DJANGO_SETTINGS_MODULE'] = 'lms' else: os.environ['DJANGO_SETTINGS_MODULE'] = 'lms'
import salt.utils from salt.ext.six import string_types from salt.log.setup import LOG_LEVELS
final_attrs['value'] = force_text(self.format_value(value))
def __and__(self, other): "Returns the intersection of this Geometry and the other." return self.intersection(other)
from __future__ import unicode_literals
fig = plt.figure(fignum, figsize=(4, 3)) plt.clf() ax = Axes3D(fig, rect=[0, 0, .95, 1], elev=48, azim=134)
'ADDITIONAL_OPTIONS': { 'trashcan': { 'bucket': 'trash_fs' } }
cases = [(tdidx1, tdidx2)]
lresult = last.value
return 1
item = SimpleItem.objects.create(name='first', value=47) feature = Feature.objects.create(item=item) SpecialFeature.objects.create(feature=feature)
for i in permissions.split(','): perm = i.strip()
out = -np.sum(sample_weight * log_logistic(yz)) + .5 * alpha * np.dot(w, w) return out
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010 13:30:00")
n_qs = Number.objects.filter(id=f) self.assertEqual(n_qs.get(), n) self.assertEqual(c_qs.get(), c)
source, source_hash = __salt__['file.source_list'](source, source_hash, __env__)
return nltk.tree.Tree(n.node, n[2:])
response.data["start"] = (self.page.number - 1) * self.get_page_size(self.request)
if len(expressions) == 2: return ConcatPair(*expressions) return ConcatPair(expressions[0], self._paired(expressions[1:]))
if footer: footer += '\n' footer += level_info
self._make_eligible()
pro = Book.objects.using( 'default').create(title="Pro Django", published=datetime.date(2008, 12, 16))
with tm.assertRaises(ValueError): o.sample(n=3, frac=0.3)
CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] ).install()
ptr_type = c_void_p
with option_context('chained_assignment', None):
param_grid = ParameterGrid(self.param_distributions) grid_size = len(param_grid)
try: with fopen(fp_, 'rb') as fp2_: block = fp2_.read(blocksize) except IOError: return False
with patch('xmodule.capa_module.CapaModule.get_problem_html') as mock_html: mock_html.return_value = "<div>Test HTML</div>"
from salt.ext.six.moves import shlex_quote as _cmd_quote
daemontools.__grains__ = {} daemontools.__salt__ = {} daemontools.__context__ = {} daemontools.__opts__ = {}
result = ser.copy() result[sel] = 1 expected = pd.Series(1, index=index) assert_series_equal(result, expected)
with self.store.bulk_operations(dest_id): source_courselike, courselike, data_path = self.get_courselike(courselike_key, runtime, dest_id)
(ModuleStoreEnum.RevisionOption.published_only, 'assertOLXIsDraftOnly'), (ModuleStoreEnum.RevisionOption.all, 'assertOLXIsDeleted'), (None, 'assertOLXIsDeleted'),
log.error( 'Unable to get SHA of HEAD for %s remote \'%s\'', self.role, self.id ) return None
private_vertical = self.store.create_item(self.user.id, course_id, 'vertical', self.PRIVATE_VERTICAL) self.assertFalse(self.store.has_published_version(private_vertical))
self.navigate_to_video()
last = int(time.time()) salt.daemons.masterapi.clean_fsbackend(self.opts) salt.daemons.masterapi.clean_pub_auth(self.opts)
thread_yields = [100, 200, 500, 1000] thread_locks = [2, 4, 8, 16]
from __future__ import absolute_import
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0)
'ENABLE_VIDEO_BUMPER': False,
@python_2_unicode_compatible class C02(models.Model): mm_a = models.ManyToManyField(A02, through="Intermediate") f_a = models.CharField(max_length=10, db_index=True) f_b = models.IntegerField()
self.assertContains(response, "<li class=\"wrapper-organization\">", 1)
key = OpenSSL.crypto.load_privatekey( OpenSSL.crypto.FILETYPE_PEM, fic2.read()) bits = key.bits()
from __future__ import absolute_import import os import copy import tempfile import json import datetime import pprint
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
if mod_name in self.file_mapping: yield mod_name
module_class = SplitTestModule
source_rel_name = relpath(source_file_name, setup.confdir) source_rel_dir = os.path.dirname(source_rel_name) while source_rel_dir.startswith(os.path.sep): source_rel_dir = source_rel_dir[1:]
self.b.friends.remove(self.a)
from __future__ import absolute_import
from __future__ import unicode_literals
tm.assertRaisesRegexp(ValueError, 'No axis named 2', f, axis=2) getattr(self.mixed_frame, name)(axis=0) getattr(self.mixed_frame, name)(axis=1)
expected_p, expected_h = h1.mf_update( state_below = v.upward_state(v_state), state_above = h2.downward_state(h2_state), layer_above = h2)
__remove_null_logging_handler() __remove_queue_logging_handler()
left = self.rng[:5] right = self.rng[5:10]
self.assertFalse(self._has_changes(published_xblock.location))
from __future__ import absolute_import import os import warnings from salt.utils.verify import verify_log
num_vis = rng.randint(1,11) n_classes = rng.randint(1, 11)
self.other_sequential_1.children = []
self._remove_subtree(BlockKey.from_usage_key(location), new_structure['blocks'])
missing = [] for key in required_keys: if params.get(key) is None: missing.append(key)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
jdict['__master_id__'] = master
pillar = salt.utils.gitfs.GitPillar(opts) pillar.init_remotes( opts_dict['git'], git_pillar.PER_REMOTE_OVERRIDES ) ret.append(pillar)
frame = self.mframe
if not compat.PY3: __idiv__ = disable
enrollment_start = DateTimeField(null=True) enrollment_end = DateTimeField(null=True) enrollment_domain = TextField(null=True) invitation_only = BooleanField(default=False) max_student_enrollments_allowed = IntegerField(null=True)
tags = list(tags or []) tags.append('LMS')
query = self.run_cloud('--query') ret_str = ' {0}:'.format(self.INSTANCE_NAME)
'unique_for_date': _("%(field_label)s must be unique for " "%(date_field_label)s %(lookup_type)s."),
try: file_result = file_result[next(six.iterkeys(file_result))] except AttributeError: pass
initial_file = os.path.join(migration_dir, "0001_initial.py") self.assertTrue(os.path.exists(initial_file))
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, expensiveTest
from __future__ import absolute_import import logging import salt.utils
assert_array_almost_equal((tfidf ** 2).sum(axis=1), [1., 1., 1.])
self.assertTrue(tpl.render(ctx).startswith("2011"))
pred = np.argmax(sp_clf.decision_function(iris.data), 1) assert_array_almost_equal(pred, clf.predict(iris.data.toarray()))
X = np.arange(10 * 10, dtype='float64').reshape(10, 10) Y = np.ones((10, 1), dtype=int)
from __future__ import unicode_literals
self.assertNotIn('contents', result)
oid = self.repo.lookup_reference(remote_ref).get_object().id if local_ref not in refs: self.repo.create_reference(local_ref, oid)
for op in ['__add__', '__sub__', '__mul__', '__truediv__']: self.assertRaises(TypeError, lambda: getattr(s, op)(2))
one_class = np.array([0, 0, 0, 0]) lb = LabelBinarizer().fit(one_class)
tm._skip_if_no_scipy()
if issubclass(values.dtype.type, compat.string_types): values = np.array(values, dtype=object, copy=True)
import os import sys import time
if value is None: value_srid = None elif f.geom_type == 'RASTER' and isinstance(value, six.string_types): value_srid = get_pgraster_srid(value) else: value_srid = value.srid
df = DataFrame({'A': range(5), 'B': range(0, 10, 2)}) r = df.rolling(window=3)
ret = {} for name in names: ret[name] = ''
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
with ensure_clean_store(self.path) as store:
truncated = ts.truncate(after=self.ts.index[0] - offset) assert (len(truncated) == 0)
verify_group_id_present(profiled_user=self.student, pass_group_id=True) verify_group_id_present(profiled_user=self.moderator, pass_group_id=True) verify_group_id_present( profiled_user=self.student, pass_group_id=True, requested_cohort=self.student_cohort )
super(DraftModuleStore, self).update_item( item, user_id, isPublish=True, is_publish_root=is_root, allow_not_found=True ) to_be_deleted.append(as_draft(item_location).to_deprecated_son())
migration_name = 'custom_name' changes = autodetector.arrange_for_graph(changes, graph, migration_name)
this_yaml = test_yaml_which_set % {'which_set': 'train'} trainer = yaml_parse.load(this_yaml) trainer.main_loop()
if self.poll_answers is None: self.poll_answers = {}
import salt.config import salt.payload import salt.utils.dictupdate
result.queryset = result.queryset return result
salt '*' vsphere.get_syslog_config my.esxi.host root bad-password
import logging import salt.utils import salt.utils.http
mask = [1] * 10 + [0] * 10 assert_raises(AssertionError, assert_almost_equal, matthews_corrcoef(y_1, y_2, sample_weight=mask), 0.)
iris = datasets.load_iris() perm = rng.permutation(iris.target.size) iris.data, iris.target = shuffle(iris.data, iris.target, random_state=rng)
m = map(lambda x: x, range(10))
self.assertTrue(np.isnan(s2[0])) self.assertTrue(np.isnan(s[0]))
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course_id): parent = mongo_store.get_parent_location(self.problem_x1a_1) self.assertEqual(parent, self.vertical_x1a)
self.assertEqual(str(connections.query).count(" JOIN "), 6)
DATE_FORMAT = 'j F Y' TIME_FORMAT = 'H:i' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'j M Y'
with self.assertNumQueries(0): mtv = ModelToValidate(number=10, name='Some Name') mtv.full_clean()
'mailing',
SplitModuleTest.modulestore = class_(
print("training score : %.3f (%s)" % (clf.score(X, y), multi_class))
else: ret = _load_result(existing, ret)
frame["E"] = [np.nan for item in frame["A"]]
with option_context('mode.chained_assignment', None): return self._python_apply_general(f)
with self.assertRaises(IOError): file_move_safe(self.file_a, self.file_b, allow_overwrite=False)
message = "<script>alert('XSS');</script>" x = "<string>{}</strong>".format(message)
elif strategy == "most_frequent": most_frequent = np.empty(len(columns))
msg_format += _(" (out of {total})")
_skip_if_no_xlrd()
if not _is_master() and _get_none_or_value(host) is None: err = [ 'solr.pre_indexing_check can only be called by "master" minions'] return _get_return_dict(False, err)
elif usage_key.category in DIRECT_ONLY_CATEGORIES: return get_published()
return Index(new_data, name=self.name)
plt.figure() for i in xrange(self.n_colors): plt.plot(x, plots[i], color=self.colors_rgb[i], alpha=.5)
from __future__ import absolute_import import os import time import signal import multiprocessing
vocabulary = dict(vocabulary) if not vocabulary: raise ValueError("empty vocabulary; perhaps the documents only" " contain stop words")
true_and_pred = y_true.multiply(y_pred) tp_sum = count_nonzero(true_and_pred, axis=sum_axis, sample_weight=sample_weight) pred_sum = count_nonzero(y_pred, axis=sum_axis, sample_weight=sample_weight) true_sum = count_nonzero(y_true, axis=sum_axis, sample_weight=sample_weight)
casted.get_loc(5)
import logging import json import datetime
import salt.config import salt.loader from salt.modules import boto_iot
with self.assertRaises(IntegrityError): VerificationCheckpoint.objects.create(course_id=self.course.id, checkpoint_location=self.checkpoint_midterm)
from openedx.core.lib.block_structure.transformer_registry import TransformerRegistry TransformerRegistry.USE_PLUGIN_MANAGER = False
self.assertEqual(xblock_info['enable_proctored_exams'], True)
if self.per_second: seconds = channels['training_seconds_this_epoch'].val_record seconds = np.array(seconds) seconds = seconds.cumsum() x = seconds[x]
]
fill_value = _get_fill_value(dtype, fill_value=fill_value, fill_value_typ=fill_value_typ)
__virtualname__ = 'pkg'
self.assertRaises(TypeError, lambda: RangeIndex(1, 5, dtype='float64'))
pkginfo = _get_package_info(pkg_name, saltenv=saltenv)
self.clear.mminion.returners = {'.prep_jid': lambda x: 1}
tm.assert_series_equal(result1, frame.apply(wrapper, axis=1), check_dtype=False, check_less_precise=check_less_precise)
if sparse: decay = .01
exceptions = [] exc_value = self.exc_value while exc_value: exceptions.append(exc_value) exc_value = explicit_or_implicit_cause(exc_value)
return
rfe = RFE(estimator=self.estimator, n_features_to_select=n_features_to_select, step=self.step)
if hasattr(self.beta_tester, '_roles'): del self.beta_tester._roles self.assertFalse(CourseBetaTesterRole(self.course.id).has_user(self.beta_tester))
self.select = [] for col in rhs.select: self.add_select(col.relabeled_clone(change_map))
pass
id: wFGEwgregeqw3435gDger key: GDE43t43REGTrkilg43934t34qT43t4dgegerGEgg location: cn-qingdao driver: aliyun
kwargs['base_url'] = os.environ.get('DOCKER_HOST')
with tm.assertRaisesRegexp(ValueError, 'Length of names'): self.index.set_names(names[0], level=[0, 1])
parents = self.collection.find(query, {'_id': True}, sort=[SORT_REVISION_FAVOR_DRAFT])
features = [
self.assertTrue(check_password({}, 'test@example.com', 'test'))
from lms.envs.common import ( COURSE_KEY_PATTERN, COURSE_ID_PATTERN, USAGE_KEY_PATTERN, ASSET_KEY_PATTERN )
assert_true((ovr_clf.predict(iris.data) == cs_clf.predict(iris.data)).mean() > .9)
index = self.index[:] expected = self.index self.assert_index_equal(index, expected)
if mean is None: mean = X.mean(axis=0) X = X - mean
from salttesting.helpers import ensure_in_syspath
y_pred_grd = grd.predict_proba(X_test)[:, 1] fpr_grd, tpr_grd, _ = roc_curve(y_test, y_pred_grd)
sls[ks_opts['lang']['lang']] = {'locale': ['system']}
xml = self.render_to_xml(self.context) xpath = "//div[@class='indicator-container']/span[@class='status correct']" self.assert_has_xpath(xml, xpath, self.context)
from __future__ import unicode_literals
language = UserPreference.get_value(data['user'], LANGUAGE_KEY)
VerificationStatus.add_verification_status( checkpoint=self.first_checkpoint, user=self.user, status='submitted', ) attempt = SoftwareSecurePhotoVerification.objects.filter(user=self.user)
import salt.utils from salt.grains import core
_win(kernel32.CloseHandle, wintypes.BOOL,
from __future__ import unicode_literals
if ltype: cmd = '{0} -t {1}'.format(cmd, ltype)
num_fields_updated = max(0, len(state) - num_new_fields_set) self._ddog_histogram(evt_time, 'set_many.fields_updated', num_fields_updated)
wrapped_func = wrapped_func.__func__
old_name = None if "name" in update: old_name = existing_user_profile.name
user = self.opts.get('user', 'root') salt.utils.verify.check_path_traversal(self.opts['pki_dir'], user)
input_dict = {'1_2_1': '1', '1_2_2': '2', '1_2_3': '3'} correct_map = problem.grade_answers(input_dict)
if not qs.ordered: qs = qs.order_by(self.model._meta.pk.name)
orig = pd.Series([0., 0., 0., 0., 0.], index=list('ABCDE')) sparse = orig.to_sparse(fill_value=0)
for comb in itertools.combinations(arrays, 3): names, data = zip(*comb) mrecs = mrecords.fromarrays(data, names=names)
for i in xrange(1, len(self.aes)): assert (self.aes[i].weights.get_value().shape[0] == self.aes[i - 1].nhid)
if self._validate_unique: self.validate_unique()
class MyMultiWidget(MultiWidget): def __init__(self, attrs=None): widgets = [MyWidget1, MyWidget2, MyWidget3] super(MyMultiWidget, self).__init__(widgets, attrs)
del ring1 del ring2 ring1 = poly[0] ring2 = poly[1]
raise CommandExecutionError( 'You must specify an egg for this editable' )
resolved = self.visit(value)
if name in list_tasks(location): return True else: return False
if name: cmd = '{0} {1}'.format(cmd, name)
X0 = np.array([[10000, 9999, 9998], [1, 1, 1]]) y = [0, 1]
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
devmap.__grains__ = {} devmap.__salt__ = {} devmap.__context__ = {} devmap.__opts__ = {}
self.mock_module = MagicMock() self.mock_module.id = 1 self.dispatch = 'score_update'
self.assertNotIn(self.module_key, self.loader)
items_index = []
want_root = first_node(parseString(want)) got_root = first_node(parseString(got))
self.r = models.Reporter.objects.create(first_name='John', last_name='Smith')
self.test_init_database()
from __future__ import absolute_import import salt.utils import sys import types
xblock_info = create_xblock_info(xblock, include_ancestor_info=is_unit_page)
event_unmasked = copy.deepcopy(event_info) self.unmask_event(event_unmasked) self.runtime.publish(self, title, event_unmasked)
if insecure: kwargs['insecure'] = True
msg = "Item must have length equal to number of levels" with assertRaisesRegexp(ValueError, msg): self.index.insert(0, ('foo2', ))
keep_default_na = result.pop('keep_default_na')
else: values[indexer] = value
if len(result) > 0: raise nose.SkipTest("Invalid results")
tmp = np.zeros((n_samples, n_samples))
import salt.utils
if (is_ppa and repo_type == 'deb' and source.type == 'deb-src' and source.uri == repo_uri and source.dist == repo_dist):
_globals = {}
self.max_size_in_mem = kwargs.pop('max_size_in_mem', 512000)
if 'provider' in details: details['driver'] = details.pop('provider')
if kwargs.get('sfun') in ['wait_rm_key', 'wait_rm']: return rm_( name, kwargs.get('profile'))
from __future__ import unicode_literals
import salt.utils
values = Series([u('om'), NA, u('nom'), u('nom')])
r = HttpResponse() r.content = ['1', '2', 3, '\u079e'] self.assertEqual(r.content, b'123\xde\x9e')
assert_raises(ValueError, model.fit, mat) continue
#end class
comparator = "compare_{typ}_{dt}".format(typ=typ, dt=dt) comparator = getattr(self, comparator, self.compare_element) comparator(result, expected, typ, version)
self.win_downloader = self.update_session.CreateUpdateDownloader() self.win_downloader.Updates = self.download_collection
template = Template(filename=file_path, module_directory=self.module_directory, input_encoding='utf-8', output_encoding='utf-8', default_filters=['decode.utf8'], encoding_errors='replace', uri=template_name) return template, None
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010 13:30:00")
rnd = np.random.RandomState(37) X = rnd.uniform(size=(10, 4))
self.assertContains(response, 'course-container', 2) self._assert_responses(response, 1)
submission = student_answers[self.answer_id]
staff = UserFactory.create(username="staff", email="staff@e.com", password="test") role = CourseStaffRole(self.course_limited.id) role.add_users(staff)
self.b.friends.add(self.a)
if get_team(commentable_id) is not None: params['context'] = ThreadContext.STANDALONE else: params['context'] = ThreadContext.COURSE
response = middleware.process_response(request, response) self.assertFalse(response.cookies[settings.SESSION_COOKIE_NAME]['httponly'])
if group == 'multilabel-indicator' and issparse(example): sparse_assert_, sparse_exp = assert_true, 'True' else: sparse_assert_, sparse_exp = assert_false, 'False'
self.assert_grade(problem, json.dumps({0: 4}), "correct") self.assert_grade(problem, json.dumps({0: 5}), "incorrect")
expected_list = [df_original.iloc[[0, 1, 5]], df_original.iloc[[2, 3]], df_original.iloc[[4]]] dt_list = ['2013-09-30', '2013-10-31', '2013-12-31']
output = engine.render_to_string('index.html') self.assertEqual(output, 'base')
from __future__ import unicode_literals
assert_raises(ValueError, dbscan, [[0], [1]], sample_weight=[2]) assert_raises(ValueError, dbscan, [[0], [1]], sample_weight=[2, 3, 4])
self.envelope = geom.envelope self.color, self.weight, self.opacity = color, weight, opacity super(GPolyline, self).__init__()
course_key = courselike.id
import binascii import hashlib import logging import os import re import subprocess
from salt.modules import zpool
from __future__ import absolute_import
return self._value.dtype
self.assertEqual(result_dict['value'], "pong")
@property def linear_name(self): "Returns the name of the linear units." units, name = capi.linear_units(self.ptr, byref(c_char_p())) return name
completion_date = get_last_exam_completion_date(course_key, username)
major_axis = Index(['foo', 'bar', 'baz', 'qux']) minor_axis = Index(['one', 'two'])
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch, call, Mock
display_name = String(help="Display name for this module", scope=Scope.settings)
from salt.states import sysrc
if isinstance(block, XModuleDescriptor):
payload = {self._pattern: json.dumps(self._response_dict)} response = requests.put(url, data=payload)
def f(): df = orig.copy() df.ix["j", :] = ["c", 2]
df1 = DataFrame({'a': [1, 2, 3], 'b': [3, 4, 5]}) df2 = DataFrame([df1, df1 + 10])
res = df.loc[['a', 'a', 'b']]
random_state = np.random.RandomState(0) n_samples, n_features = X.shape X = np.c_[X, random_state.randn(n_samples, 200 * n_features)]
def close(self): for closable in self._closable_objects: try: closable.close() except Exception: pass self.closed = True signals.request_finished.send(sender=self._handler_class)
poly = fromstr(self.geometries.polygons[1].wkt) ring1 = poly[0] ring2 = poly[1]
X -= self.x_mean_ X /= self.x_std_ Ypred = np.dot(X, self.coef_) return Ypred + self.y_mean_
import numpy as np import pandas as pd import pandas.util.testing as tm
providers_string = _("{first_provider} and {second_provider}").format( first_provider=providers[0], second_provider=providers[1] )
assert_less_equal(call_count, maximum_calls)
result = func(idx) exp = Index(func(idx.values), name=idx.name) self.assert_index_equal(result, exp) self.assertIsInstance(result, pd.Float64Index)
min_dist_inds = dists.argmin(axis=1)
self.assertFalse(res_json['success'])
user_partitions = UserPartitionList( help=_("The list of group configurations for partitioning students in content experiments."), default=[], scope=Scope.settings )
self.assertEqual(iptables.build_rule(dports=['!80', 443], proto='tcp'), '-p tcp -m multiport ! --dports 80,443')
arr = a.astype('S').astype(object) self.assertTrue(lib.max_len_string_array(arr), 3)
if instance is None: raise AttributeError("operators not available as class attribute") instance.cursor().close() return instance.__dict__['operators']
self.certificates_section.refresh()
clf = self.factory(loss='squared_loss', learning_rate='constant', eta0=eta, alpha=alpha, fit_intercept=True, n_iter=1, average=True, shuffle=False)
ind = rng.randint(0, X.shape[0], 20) sample_weight = np.bincount(ind, minlength=X.shape[0])
rexp = re.compile('(?m)^ ["]?' r'([^,|\s].*[^"|\n|,])[,|"]?')
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
continue
self.assert_grade(problem, "Other String", "incorrect")
biggest = terms[ndims.idxmax()].value typ = biggest._constructor axes = biggest.axes naxes = len(axes) gt_than_one_axis = naxes > 1
expected = self.series.astype('object')
return int(self.as_double())
log = logging.getLogger(__name__)
if isinstance(data, SingleBlockManager):
self.assertEqual(self.user1.course_groups.count(), 1) self.assertEqual(CohortMembership.objects.filter(user=self.user1).count(), 1)
'django_nose',
opts = _parse_network_settings(settings, current_network_settings)
set_tsign = sub(set_limit, flo(div(set_sizes, set_batch))) set_tsize = mul(set_tsign, flo(div(set_range, set_limit)))
repr(df)
from __future__ import unicode_literals
if ((max_columns and nb_columns > max_columns) or ((not ignore_width) and width and nb_columns > (width // 2))): return False
tm._skip_if_no_pathlib()
self._aborting = False if not self._managed_pool: n_jobs = self._initialize_pool() else: n_jobs = self._effective_n_jobs()
if __PLATFORM.startswith('win'): ROOT_DIR = r'c:\salt' else: ROOT_DIR = '/'
debian_ip.__grains__ = {} debian_ip.__salt__ = {}
probas_ = self.predict_proba(X) return np.log(probas_)
from __future__ import absolute_import import grp import pwd
for byte_range_string in byte_ranges_string.split(','): byte_range_string = byte_range_string.strip()
panel['a2'] = df2 tm.assert_frame_equal(panel.loc['a1'], df1) tm.assert_frame_equal(panel.loc['a2'], df2)
self.process_requirements()
>> makeCustomDataframe(5,3)
__virtualname__ = 'pkg'
from __future__ import unicode_literals
y_upper = clf.predict(xx)
if other is not None: other = _ensure_index(other) if (other is None or labels.equals(other)) and labels.equals(ax): return obj
grad_shared = sharedX(zv) z_shared = sharedX(zv)
self.assertFalse(result['success']) self.assertIn(u"payment was declined", result['error_html'])
tsdf = DataFrame(np.random.randn(1000, 3), columns=['A', 'B', 'C'], index=date_range('1/1/2000', periods=1000))
import salt.ext.six as six import salt.utils import salt.utils.vmware import salt.utils.http from salt.utils import dictupdate from salt.exceptions import CommandExecutionError
help = ''
self.assertFalse([ requirement for requirement in requirements if requirement['namespace'] == 'proctored_exam' ])
return mark_safe('onload="%s.load()"' % self.js_module)
with no_stdout_stderr(): TheilSenRegressor(verbose=True, random_state=0).fit(X, y) TheilSenRegressor(verbose=True, max_subpopulation=10, random_state=0).fit(X, y)
return s
TASK_STATE_UNKNOWN = 0 TASK_STATE_DISABLED = 1 TASK_STATE_QUEUED = 2 TASK_STATE_READY = 3 TASK_STATE_RUNNING = 4
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch ) ensure_in_syspath('../../')
plan = [(executor.loader.graph.nodes[targets[0]], options['backwards'])] sql_statements = executor.collect_sql(plan) return '\n'.join(sql_statements)
return (0., 0., 0., 0)
self.assertEqual(self.account_settings_page.value_for_dropdown_field('year_of_birth', ''), '')
url(r'^edge/(?P<org>[^/]+)/(?P<course>[^/]+)/course/(?P<coursename>[^/]+)$', 'contentstore.views.landing', name='landing'),
def __add__(self, other): 'add another list-like object' return self.__class__(list(self) + list(other))
from __future__ import absolute_import import os
for k in kwargs: assert k in [f.attname for f in self._meta.fields], \ "Author.__init__ got an unexpected parameter: %s" % k
z = SouthTexasZipcode.objects.get(name='77005')
self.enrollment = CourseEnrollmentFactory( user=self.user, course_id=self.course.id, mode="verified" )
df = panel.to_frame() df['category'] = df['str'].astype('category')
pass
cursor.close()
qemu_img.__salt__ = {}
x_plot = np.linspace(0, 10, 100)
providers[provider_alias][driver]['profiles'] = {}
prev_coef = coef prev_alpha[0] = alpha[0] coef = np.zeros_like(coef)
import salt.utils.event
with self.assertRaises(Exception): self.build_problem(math_display=True, expect="2*x+3*y", num_inputs=3)
if (not hasattr(openid_request, 'trust_root') or not openid_request.trust_root): log.error('no trust_root') return False
SEARCH_ENGINE = "search.tests.mock_search_engine.MockSearchEngine"
full_name = UserProfile.objects.get(user=user).name
n_samples = n_features samples = np.arange(n_samples)
self.assert_enrollment_activation(False, selected_mode)
axes = df.plot.barh(width=width, subplots=True) for ax in axes: for r in ax.patches: self.assertEqual(r.get_height(), width)
series = pd.Series(1, index=pd.period_range(start='2000', periods=100)) result = series.resample('M').count()
d0 = "a", "b", "c", "d" d1 = np.arange(4, dtype='int64') others = "e", 10
self.assertIs(ix[:, :], f)
try: import pythoncom import wmi import win32net import win32api import win32con import pywintypes from ctypes import windll HAS_WIN32NET_MODS = True except ImportError: HAS_WIN32NET_MODS = False
#source_encoding = 'utf-8-sig'
self.assertRaises(TypeError, lambda: Timedelta(11, unit='d') // 2)
TASK_LOG.info(u'%s, Task type: %s, Finishing task: %s', task_info_string, action_name, task_progress) return task_progress
problem_page.fill_answer("20") problem_page.click_check() self.assertTrue(problem_page.is_correct())
emit_field_changed_events( user, user, sender._meta.db_table, excluded_fields=['last_login', 'first_name', 'last_name'], hidden_fields=['password'] )
index = MultiIndex(levels=[[0, 1]] + [level] * 8, labels=[np.arange(2).repeat(500)] + [labels] * 8)
self.assertNotIn( 'start', new_version.get_explicitly_set_fields_by_scope(scope=Scope.settings) ) self.assertNotIn( 'graded', new_version.get_explicitly_set_fields_by_scope(scope=Scope.settings) )
self.assertEqual( InternalCertificationAudit._meta.verbose_name_plural, 'Audits' )
break
return True, '', list(zip_longest(sources, source_hashes[:len(sources)]))
try: import win32gui import win32con HAS_WIN32 = True except ImportError: HAS_WIN32 = False
import salt.utils import salt.utils.decorators as decorators
if len(terms) == 1: return _align_core_single_unary_op(terms[0])
for X in (X_dense, X_sparse_pruned, X_sparse_unpruned):
X = 3 * diabetes.data
do_init = not(self.warm_start and hasattr(self, 'converged_')) n_init = self.n_init if do_init else 1
if login_when_done: user = authenticate(username=username, password=password) login(request, user)
self.assertEqual(draft_version, new_draft_version) self.assertNotEqual(published_version, new_published_version)
regex_re = com.is_re_compilable(regex)
from __future__ import absolute_import
module = CapaFactory.create(attempts=attempts, max_attempts=attempts, done=True) self.assertFalse(module.should_show_reset_button())
bandmem.nodata_value = 99 self.assertEqual(bandmem.nodata_value, 99)
import matplotlib.pyplot as plt from itertools import cycle
self.unapply_operations("test_rmflmm", with_field_state, operations=operations) self.assertTableExists("test_rmflmm_pony_stables")
inject_globals['__env__'] = 'base'
user = self.create_user_and_enroll('verified')
TestScenario((self.demo_course,), "Empty"), TestScenario((self.html_course,), "Intro to &lt;html&gt;"),
import logging import json from lxml import etree
with override_settings(SESSION_SERIALIZER='django.contrib.sessions.serializers.PickleSerializer'):
try: import wmi import salt.utils.winapi except ImportError: pass
import salt.defaults.exitcodes import salt.utils import salt.log.setup import salt.defaults.exitcodes from salt.log.mixins import NewStyleClassMixIn
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
expected_grades = [self._format_user_grade(header_row, **user_grade) for user_grade in user_grades] self.verify_rows_in_csv(expected_grades)
result = read_hdf(hh, 'df', where=Term( 'l1', '=', selection.index.tolist())) assert_frame_equal(result, expected)
p = Post(title="Work on Django 1.1 begins", posted=datetime.date(2008, 9, 3)) p.full_clean()
all_files = __salt__['file.readdir'](name)
Number.objects.filter(pk=self.n.pk).update(integer=F('integer') / 2, float=F('float') / 42.7)
S = func([[1]], metric='precomputed') assert_true(isinstance(S, np.ndarray))
config = CourseOverviewImageConfig.current() if not config.enabled: return
s = data[:, 11] == 1 data = np.c_[data[s, :11], data[s, 12:]] target = target[s]
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
rval = -(self.beta * T.dot(state, self.bias))
dev_index = dev_list.index(rd_name)
import re
yield (check_non_transformer_estimators_n_iter, name, estimator, 'Multi' in name)
import logging import os import re import datetime
with salt.utils.fopen(full, 'w') as _fh: _fh.writelines(lines)
import yaml
if self._annotation is not _empty: formatted = '{0}:{1}'.format(formatted, formatannotation(self._annotation))
result = ts[ts.index[4]] expected = ts[4] self.assertEqual(result, expected)
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) signal_handler.send.assert_called_with('course_published', course_key=course.id)
from __future__ import unicode_literals
X = iris.data[45:100, :] y = iris.target[45:100] solvers = ("lbfgs", "newton-cg", "liblinear") class_weight_dict = _compute_class_weight_dictionary(y)
course_mode = CourseMode.DEFAULT_SHOPPINGCART_MODE
self.assertEqual(ls.wkt, LineString(*tuple(Point(tup) for tup in ls.tuple)).wkt) if numpy:
visited = set()
attempt = SoftwareSecurePhotoVerification.objects.get(user=self.user) self.assertEqual(attempt.status, "submitted")
if exc.errno != errno.EEXIST: raise
try: import win32con import win32api import win32process import win32security import win32pipe import win32event import win32profile import msvcrt import ctypes from ctypes import wintypes HAS_WIN32 = True except ImportError: HAS_WIN32 = False
self.assertContains(response, '<h2>Author-book relationships</h2>') self.assertContains(response, 'Add another Author-book relationship') self.assertContains(response, 'id="id_Author_books-TOTAL_FORMS"')
continue
from salt.states import memcached
url_to_enroll = reverse(course_about, args=[course_id]) if settings.FEATURES.get('ENABLE_MKTG_SITE'): url_to_enroll = marketing_link('COURSES')
parents = [b for b in bases if isinstance(b, ModelBase)] if not parents: return super_new(cls, name, bases, attrs)
left = self.rng[:5] right = self.rng[5:10]
log = logging.getLogger(__name__)
Ensure myasg is deleted: boto_asg.absent: - name: myasg - force: True
_CreateTransaction = ctypes.windll.ktmw32.CreateTransaction _CommitTransaction = ctypes.windll.ktmw32.CommitTransaction _MoveFileTransacted = ctypes.windll.kernel32.MoveFileTransactedW _CloseHandle = ctypes.windll.kernel32.CloseHandle CAN_RENAME_OPEN_FILE = True
values = _concat._concat_compat([b.values for b in blocks])
return self._shallow_copy(self.values.repeat(n))
config = old_to_new(config)
import salt.utils.jid import salt.returners from salt.utils.decorators import memoize
if skip_perm_errors: return raise SaltClientError(msg)
assert_array_equal(clf.feature_log_prob_, (num - denom))
self.assertEqual(list(storage), example_messages)
scores = as_float_array(scores, copy=True) scores[np.isnan(scores)] = np.finfo(scores.dtype).min return scores
log = logging.getLogger(__name__)
response_element = etree.Element('symbolicresponse')
verification_deadline = datetime(year=2020, month=12, day=31, tzinfo=pytz.utc) expiration_datetime = datetime.now(pytz.utc) response, expected = self._get_update_response_and_expected_data(expiration_datetime, verification_deadline)
test = -3
save_definition = False if kwargs.get('task_definition', False): task_definition = kwargs.get('task_definition') else: save_definition = True
middleware.process_request(request) request.session['hello'] = 'world'
GeoIPRecord_delete(result) return record
saltenv = env
closed_cursor_error_class = ProgrammingError
DIRECT_ONLY_CATEGORIES = ['course', 'chapter', 'sequential', 'about', 'static_tab', 'course_info']
column = info[0].index('LoadPercentage')
component = self.store.publish(xblock.location, self.user_id) self.assertFalse(self.store.has_changes(component))
with self.assertRaises(forms.ValidationError): f.clean('13:30:05')
new_minions = set(minions_detected) - set(curr_minions)
for name in ALL_TREES: yield check_min_weight_fraction_leaf, name, "iris"
self.course_key = course_key
class MyRelModel2(models.Model): objects = MyManager()
'STUDIO_REQUEST_EMAIL': '',
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'openstack', vm_['profile'], vm_=vm_) is False: return False
import integration
self.axis = axis self.join_axes = join_axes self.keys = keys self.names = names self.levels = levels
return self._section_scores(chapter_index, section_index)
required_boto3_version = '1.2.1'
CourseRerunState.objects.get(id=rerun_state.id)
if port is None: port = 443 if protocol is None: protocol = 'https'
from __future__ import absolute_import
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
request.grant_type = None
module.system.user_is_staff = False
from .overrides import get_override_for_ccx return get_override_for_ccx(self, self.course, 'max_student_enrollments_allowed')
register_tests(NaturalKeySerializerTests, 'test_%s_natural_key_serializer', natural_key_serializer_test) register_tests(NaturalKeySerializerTests, 'test_%s_serializer_natural_keys', natural_key_test)
with timezone.override(timezone.get_fixed_timezone(-300)): self.assertFalse(self.storage.exists('test.file.tz.off'))
with self.assertRaisesRegexp(GitExportError, unicode(GitExportError.XML_EXPORT_FAIL)): git_export_utils.export_to_git( course_key, 'file://{0}'.format(self.bare_repo_dir))
from __future__ import absolute_import import os
USE_L10N = False
import os import logging
if 'private' in cc and 'public' in kwargs: del cc['private'] elif 'public' in cc and 'private' in kwargs: del cc['public']
obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')
if pkg: pkg = _cmd_quote(pkg)
DATE_FORMAT = 'j F Y' TIME_FORMAT = 'g:i A' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'd-m-Y'
self.make_course(pdf_textbooks=[PDF_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('pdf_book', book_index=0, chapter='xyzzy')
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandExecutionError, MinionError
self.assertEqual( get_object_or_404(a1.article_set, title__contains="Run"), article )
rng = date_range('1/1/2000', '1/31/2000') ts = Series(np.random.randn(len(rng)), index=rng)
from openpyxl.cell import get_column_letter
from __future__ import unicode_literals
response = self.client.get('/login_protected_view/') self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')
face_image = decode_image_data(face_data)
self.verify_validation_update_usage_info(expected_result, mocked_message)
for _def_str in _whitelist_method_generator(DataFrame, _apply_whitelist): exec(_def_str)
a2 = A() self.assertNotEqual(a.value, a2.value)
'auth_timeout': int,
if not os.path.isdir(GPG_KEYDIR): os.makedirs(GPG_KEYDIR)
response = self.client.post(reverse('admin:student_courseaccessrole_add'), data=data) self.assertRedirects(response, reverse('admin:student_courseaccessrole_changelist'))
self._mock_paver_needs = patch.object(pavelib.js_test.test_js, 'needs').start() self._mock_paver_needs.return_value = 0
__virtualname__ = 'varstack'
self.assertRaises(ValueError, ser.drop, [3, 4])
'answers': student_answers,
(32, False, u"False"),
warnings.filterwarnings('always', '', DeprecationWarning, __name__)
problem = new_loncapa_problem(xml_str) problem.done = True problem.student_answers = {'1_2_1': 'choice_1'}
import os import sys import time import traceback import random
self.assertIsNone(cohorts.get_cohort(user, course.id, assign=False))
from __future__ import unicode_literals
EmptyPromise( lambda: "login" not in self.browser.current_url, "redirected from the login page" ).fulfill()
pass
current_hash = get_hash_tuple(full_header_path, full_cython_path, full_gen_file_path)
if is_list_like_indexer(value) and getattr(value, 'ndim', 1) > 0:
response = self._get_page("verify_student_verify_now", course.id) self.assertNotContains(response, "Verification is no longer available")
def assert_no_warnings(func, *args, **kw):
self.distribution.salt_syspaths_hardcoded_path = os.path.join( self.build_lib, 'salt', '_syspaths.py' ) self.run_command('generate_salt_syspaths')
keys = keys.astype(dtype)
bintflist = [intf for iflist in bintf.values() for intf in iflist] result.update(__salt__['sysfs.read'](bintflist, path))
admin = AdminFactory()
git_describe = describe_out
assert key.user_id == self.user.id
COURSE_NAME = 'manual-testing-complete'
for saltenv in environments: env_files = [k for k in files if k['Key'].startswith(saltenv)]
self.course_id = course_key self.cached_metadata = cached_metadata
epoch_num = 5
theano.compile.debugmode.default_make_thunk.append( get_unbound_function(BaseActs.make_thunk))
if uid is None: user = list_users() uid = user[username]['index']
_win(advapi32.CreateProcessWithLogonW, wintypes.BOOL,
self.assertNotEqual(original_problem, module.lcp)
pass
response = self.client.get(reverse('signup'), follow=True) self.assertEqual(response.status_code, 404)
if self.value == '': self.value = 'null'
with self.assertRaises(GEOSException): GEOSGeometry(six.memoryview(b'0'))
reader = read_sas(self.file01, format="xport", chunksize=10) data = reader.get_chunk() tm.assert_frame_equal(data, data_csv.iloc[0:10, :])
if bin_edges[-2] > ax_values.max(): bin_edges = bin_edges[:-1] binner = binner[:-1]
try: import pwd except ImportError: if not sys.platform.lower().startswith('win'): raise
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
result = 1**df
current_enrollment, __ = CourseEnrollment.enrollment_mode_for_user(self.user, self.course_key) self.assertEquals('verified', current_enrollment)
folds = list(cv.split(X)) best_mse = np.inf
with self.assertRaises(ValueError): with transaction.atomic(using='default'): marty.edited.set([pro, dive])
adapters = _parse_interfaces() adapters[iface] = data
if block_key not in missing_blocks: self.assertEquals( set(block_structure.get_children(block_key)), set(children), )
return nan_idxs
'autoload_dynamic_modules': bool,
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
db = self.db compiler = connections[db].ops.compiler('SQLCompiler')( self.query, connections[db], db )
assert_almost_equal(s[:k], sap, decimal=3)
from __future__ import absolute_import import logging
def _set_cookie_wrapper(key, value='', max_age=None, expires=None, path='/', domain=None, secure=None, httponly=False):
print("Fitting ExtraTreesClassifier on faces data with %d cores..." % n_jobs) t0 = time() forest = ExtraTreesClassifier(n_estimators=1000, max_features=128, n_jobs=n_jobs, random_state=0)
log = logging.getLogger(__name__)
new_names = [name + "a" for name in self.index.names] self.index.names = new_names self.check_level_names(self.index, new_names)
try: import psutil HAS_PSUTIL = True except ImportError: HAS_PSUTIL = False
from salttesting.helpers import ensure_in_syspath from salttesting.mixins import RUNTIME_VARS ensure_in_syspath('../../')
df = DataFrame({'aBBa': [1, 2], 'BBaBB': [1, 2], 'aCCa': [1, 2], 'aCCaBB': [1, 2]})
import logging import os import os.path import re
edge_model = covariance.GraphLassoCV()
'mine_enabled': bool,
EXPECTED_SECTIONS = { 'Test Section': ['Test Subsection'], 'Test Section 2': ['Test Subsection 2', 'Test Subsection 3'] }
from __future__ import absolute_import import os.path
assert_series_equal(ser.loc[sel], ser)
def clone(self): "Clones this coordinate sequence." return GEOSCoordSeq(capi.cs_clone(self.ptr), self.hasz)
if 'hostname' not in vmconfig: vmconfig['hostname'] = name
@contextmanager def urlopen(*args, **kwargs): with closing(_urlopen(*args, **kwargs)) as f: yield f
libv = LibVersion() libv.print_versions() libv.print_exp_env_info(args.print_theano)
update_wrapper(self, fn)
return force_str(signature)
cet = CourseEmailTemplate.objects.get(name=None) self.assertIsNotNone(cet)
self.create_xblock(parent_usage_key=self.chapter_usage_key, category='sequential2')
FILE_UPLOAD_STORAGE_BUCKET_NAME = 'edxuploads' FILE_UPLOAD_STORAGE_PREFIX = 'submissions_attachments'
self.assertIn( column_name, self.get_indexes(BookWithLongName._meta.db_table), )
lib_key = LibraryLocator(org=org, library=library) if lib_key in self.mappings: raise DuplicateCourseError(lib_key, lib_key)
return GeoIP_record_by_addr(self._city, c_char_p(enc_query))
pass
ItemFactory.create( parent=parent, category='discussion', display_name='scheduled', start=self.future, )
if ttl is None: ttl = 60 status = _zone.add_record(_type, name, _value, ttl, identifier) return _wait_for_sync(status.id, conn, wait_for_sync)
clf = self.factory().fit(X2, Y2, intercept_init=np.zeros((3,)))
repr(df)
split_test = self._update_partition_id(-50) self.assertEqual(2, len(split_test.children)) self.assertEqual(initial_group_id_to_child, split_test.group_id_to_child)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
'ENABLE_VERIFIED_CERTIFICATES': False,
project = u'pandas' copyright = u'2008-2011, the pandas development team'
plaintext_msg = course_email_template.render_plaintext(course_email.text_message, email_context) html_msg = course_email_template.render_htmltext(course_email.html_message, email_context)
v = s[g == 1].iloc[0] self.assertEqual(expected.iloc[0], v) self.assertEqual(expected2.iloc[0], v)
__slots__ = 'a',
for engine in self.current_engines: tm.skip_if_no_ne(engine) ev = pd.eval(ex, engine=self.engine, parser=self.parser) tm.assert_almost_equal(ev, result)
auth.add_users(request.user, role, user) role_added = True
warnings.warn("In future versions of pandas, match will change to" " always return a bool indexer.", FutureWarning, stacklevel=3)
y = np.array([0.0, 1.1, 2.0, 3.0]) msg = type_of_target(y) assert_raise_message(ValueError, msg, check_classification_targets, y)
if connection.features.supports_nullable_unique_constraints: UndergroundBar.objects.create()
self._check_ax_scales(axes, yaxis='log')
f = TypedMultipleChoiceField(choices=[(1, "+1"), (-1, "-1")], coerce=int, required=False, empty_value=None) self.assertIsNone(f.clean([]))
if enrollment.mode in CourseMode.VERIFIED_MODES:
import salt.utils from salt.exceptions import CommandExecutionError
salt '*' vsphere.get_vmotion_enabled my.esxi.host root bad-password
layer_to_chains[self.dbm.visible_layer] = inputs
from __future__ import absolute_import import os import re import pprint import logging import msgpack from ast import literal_eval
from __future__ import unicode_literals
import json
self.pdf.drawString(horizontal_padding_from_border, y_pos,
fields = list(queryset._fields) + [f for f in annotation_names if f not in queryset._fields]
self.assertIn('test_name', context) self.assertEqual(context['kwarg_test'], 'kwarg_value') self.assertEqual(context['custom_key'], 'custom_value')
temp_storage.save('tests/example.txt', ContentFile('some content'))
import salt.utils from salt.ext.six import string_types from salt.exceptions import SaltInvocationError, CommandExecutionError import salt.ext.six as six
current = self.start while current < self.stop:
name = str(name)
self._block_data_map = defaultdict(_BlockData)
self.conn2 = connection.copy() self.conn2.set_autocommit(False)
creation_counter = 0
import logging import os import re
return ret
import os import re import sys import tempfile import ast from pandas.compat import zip, range, map, lmap, u, cStringIO as StringIO import warnings
msg = ('\nSetting NaNs in `categories` is deprecated and ' 'will be removed in a future version of pandas.') warn(msg, FutureWarning, stacklevel=3)
assert (np.diag(cm)[:-1] > np.diag(cm)[1:]).all()
dict(safe_zip(range(-5, 6), range(-5, 6))),
dataname = mldata_filename(dataname)
sample_weight = np.asarray(sample_weight, dtype=np.float64, order="C")
n_samples = 12 n_features = 2 n_iter = 10 rng = np.random.RandomState(42) X = rng.rand(n_samples, n_features)
>>> calls = aapl.get_call_data()
after_created = attempt.created_at + timedelta(seconds=1) self.assertTrue(attempt.active_at_datetime(after_created))
self.assertEqual(errors[0].id, 'postgres.E001') self.assertIn('max_length', errors[0].msg)
result.status_code
result = DataFrame.from_records([], index='foo', columns=['foo', 'bar'])
self.assertRaises(Exception, func, p1, df)
return
return self.values._slice(slicer)
is_increasing = assert_no_warnings(check_increasing, x, y) assert_true(is_increasing)
self.assertTrue(filesystem.exists('policy.json'))
if dtype.kind == 'V': raise NotImplementedError("compound dtypes are not implemented" "in the {0} constructor" .format(self.__class__.__name__))
ret['changes'] = {'feature': __salt__['win_servermanager.install'](name, recurse, restart)}
return os.lchown(path, uid, gid)
import dson import logging
text_content_first = email_payload_first[0]._payload[0]._payload self.assertIn( 'credit from Hogwarts School of Witchcraft and Wizardry for', text_content_first )
self.assertEqual(res.context['next_day'], None) self.assertEqual(res.context['previous_day'], datetime.date(2006, 5, 1))
self.assertRaises(ItemNotFoundError, lambda: self.draft_store.get_all_asset_metadata(course_key, 'asset')[:1])
self.check_modal_shows_correct_contents(['Course Display Name']) self.advanced_settings.refresh_and_wait_for_load()
import logging
_SQL_WILDCARD = { 'mysql': '%s', 'sqlite': '?' }
first = first.normalize() last = last.normalize()
course = modulestore().get_item(block_map['course'].location) course.children.remove(block_key) block_map['course'] = update_block(course)
self.assert_response(safe_cookie_data) self.assert_user_in_session()
s = s.cat.as_ordered() result = s.value_counts() expected.index = expected.index.as_ordered() tm.assert_series_equal(result, expected, check_index_type=True)
X = [[2, 1], [3, 1], [1, 3], [2, 3]] y = [0, 0, 1, 1]
if initial_forms > self.max_num >= 0: total_forms = initial_forms elif total_forms > self.max_num >= 0: total_forms = self.max_num
ret = self.run_state('ssh_known_hosts.absent', **kwargs) self.assertSaltStateChangesEqual(ret, {})
(2, 2.0, classification_cost)
df = pd.DataFrame({'X': [1, 2, 3, 4], 'Y': list('aabb')}, index=list('ABCD'))
with self.assertRaises(ValueError): p0._make_token_with_timestamp(user, 175455491841851871349)
rho_0 = math.tanh(F - 1.96 * F_se) rho_1 = math.tanh(F + 1.96 * F_se)
if obj.get("parent") is None: data["parent"] = None
set_crontab(
raise NotImplementedError()
import salt.utils
indices, indptr, spmat_shape, sptype, outshp, kmap = \ convolution_indices.sparse_eval(imgshp, kshp, nkern, step, mode)
return value
extra_attrs = self.widget_attrs(widget) if extra_attrs: widget.attrs.update(extra_attrs)
LmsAutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id).visit()
if request.status_code == 204: return True
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit()
destroy(vm_['name'])
df.index = df.index.set_names([ None if self._re_levels.search(l) else l for l in df.index.names ])
('&gotcha&#;<>', '&gotcha&#;<>'),
for vm_ in list_active_vms(): info[vm_] = _info(vm_)
index = PeriodIndex(['NaT', '2011-01', '2011-02'], freq='M', name='idx')
return self.module.__func_alias__.get(self.objpath[0], self.objpath[0])
id = models.IntegerField(primary_key=True)
assert_array_equal(unique_labels(np.array([[0, 0, 1], [1, 0, 1], [0, 0, 0]])), np.arange(3))
X = 5 * rng.rand(10000, 1) y = np.sin(X).ravel()
unavailable_certificates = \ [cert for cert in generated_certificates if cert.status == CertificateStatuses.unavailable and cert.grade == default_grade]
select_option_by_value( browser_query=self.settings_detail.pre_requisite_course_options, value=pre_requisite_course_id ) self.settings_detail.save_changes() self.assertEqual( 'Your changes have been saved.', self.settings_detail.alert_confirmation_title.text )
for section in course.get_children(): curr_section = {} curr_section['display_name'] = own_metadata(section).get('display_name', '') data = [] c_subsection = 0
from __future__ import unicode_literals
import salt.utils.event
from salt.modules import varnish
for key, func in six.iteritems(self.loader): break self.assertNotEqual(self.loader._dict, {})
self._password = None
rng = np.random.RandomState(0) rand_data = RandomData(rng) n_samples = 500 n_features = rand_data.n_features n_components = rand_data.n_components
#pylint: disable=E0602
self._feat = feat self._index = index
if isinstance(exceptions, tuple): names = " or ".join(e.__name__ for e in exceptions) else: names = exceptions.__name__
if role is not None: role().add_users(user)
dummy2 = _("This is another translatable string.")
def makeTimeDataFrame(nper=None, freq='B'): data = getTimeSeriesData(nper, freq) return DataFrame(data)
if os_grain['kernel'] not in 'Darwin': self.skipTest( 'Test not applicable to \'{kernel}\' kernel'.format( **os_grain ) )
unicode_text = "好 各位同学".decode('utf-8') self.assertTrue(self.video.downloaded_transcript_contains_text('srt', unicode_text))
response = client.patch(self.url, data=json.dumps(json_data), content_type=content_type) self.assertEqual(expected_status, response.status_code) return response
self.course = CourseFactory.create(emit_signals=True)
defaults = DEFAULT_MASTER_OPTS defaults.update(DEFAULT_API_OPTS)
DEFAULT_FROM_EMAIL = 'webmaster@localhost'
s2 = Series([0.001, 0, 10000], index=[3, 5, 10]) assert_frame_equal(df.loc[[3]], df.sample(1, weights=s2))
for k, v in zip(x, data): try: counts[k] += v except KeyError: counts[k] = v
from __future__ import absolute_import, print_function import os import logging
rng = make_np_rng(None, 322, which_method="shuffle")
self.payment_and_verification_flow.webcam_capture() self.payment_and_verification_flow.next_verification_step(self.immediate_verification_page)
with patch('capa.capa_problem.LoncapaProblem.get_html') as mock_html: mock_html.return_value = "<div>Test Problem HTML</div>"
response = self.client.post(self.send_mail_url, test_email) self.assertEquals(json.loads(response.content), self.success_content)
for fmt in self.fmtlist: self._write(_pad_bytes(fmt, 49))
message_type = param_dict['message']
context = { 'reorderable_items': set(), 'read_only': True } problem_html = get_preview_fragment(request, self.problem, context).content
second_attempt = SoftwareSecurePhotoVerification.objects.create(user=user)
self.assertEqual(my_doodad.num_calls, 0)
sel_fmt = connection.ops.select % sel_fmt
if field_name == 'action_checkbox': yield { "text": text, "class_attrib": mark_safe(' class="action-checkbox-column"'), "sortable": False, } continue
return self.rel.through
from contextlib import contextmanager import logging import sqlite3
import logging
if pkginfo[version_num].get('use_scheduler', False):
self.assert_redirect_to_login_looks_correct(actions.do_complete(request.backend, social_views._do_login))
axis_index = getattr(self, axis) d = dict() prefix = axis[0]
self.client.login(username=self.global_staff.username, password="test") self._assert_certificates_visible(True)
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course_key): assertProblemNameEquals(problem_original_name)
log.error("etcd: {0}".format(err)) raise
TIME_ZONE = ENV_TOKENS.get('TIME_ZONE', TIME_ZONE)
super(GitExportError, self).__init__(unicode(message))
unicode_text = "好 各位同学".decode('utf-8') self.assertIn(unicode_text, self.video.captions_text)
if x.count(":"): props.append(x.split(":")) else: props.append(['', ''])
thisMonthEnd = MonthEnd(0) thisBMonthEnd = BMonthEnd(0) thisYearEnd = YearEnd(0) thisYearBegin = YearBegin(0) thisBQuarterEnd = BQuarterEnd(0) thisQuarterEnd = QuarterEnd(0)
service.__salt__ = {} service.__opts__ = {}
win32security.SetNamedSecurityInfo( path, win32security.SE_FILE_OBJECT, win32security.OWNER_SECURITY_INFORMATION + win32security.GROUP_SECURITY_INFORMATION, userSID, groupSID, None, None )
elif isinstance(file, FieldFile) and not hasattr(file, 'field'): file.instance = instance file.field = self.field file.storage = self.field.storage
self.course_info_page.visit() self.tab_nav.go_to_tab('Course') self.course_nav.go_to_section('Test Section', 'Test Subsection')
delete = self.run_cloud('-d {0} --assume-yes'.format(self.INSTANCE_NAME)) delete_str = ''.join(delete)
user = User.objects.get(username=self.USERNAME) request = RequestFactory().get("/api/user/v1/accounts/") request.user = user account_settings = get_account_settings(request)
if not isinstance(usrgrps, list): usrgrps = [usrgrps] for usrgrp in usrgrps: params['usrgrps'].append({"usrgrpid": usrgrp})
self.apps_ready = self.models_ready = self.ready = False
sel = self.series[ordered > 0] exp = self.series[self.series > 0] assert_series_equal(sel, exp)
@property def outdim(self): return wkb_writer_get_outdim(self.ptr)
self.mods = set(sys.modules)
from ._scipy_sparse_lsqr_backport import lsqr as sparse_lsqr
from __future__ import absolute_import import sys import os.path
self._consolidate_inplace() return len(self.blocks) > 1
self.assertFalse(auth.user_has_role(self.user, CourseCreatorRole()))
try: os.remove(trans_tar) except (OSError, IOError): pass
ir = IsotonicRegression(increasing='auto', out_of_bounds="clip") ir.fit(x, y)
res.source_expressions[pos] = Transform(expr, base_srid).resolve_expression(*args, **kwargs)
this_file = __file__ if this_file.endswith(".pyc"):
call_command('flush', verbosity=0, interactive=False, load_initial_data=False)
if name is 'SpectralClustering': return set_random_state(alg) with warnings.catch_warnings(record=True): pred2 = alg.fit_predict(X) assert_array_equal(pred, pred2)
DATE_INPUT_FORMATS = [
newline = ( '{0}\t{1}\t{2}\n'.format( name, type_opts, device_fmt)
svd = TruncatedSVD(opts.n_components) normalizer = Normalizer(copy=False) lsa = make_pipeline(svd, normalizer)
self.client.ajax_post( self.problem_update_url, data={'publish': 'make_public'} )
import salt.utils from salt.modules import pagerduty import json
from __future__ import unicode_literals
return self.client.post(url, post_args)
with self.assertRaises(forms.ValidationError): f.clean('2010-12-21 13:30:05')
vertical1_parent = self.store.get_parent_location(vertical1.location) self.assertEqual(unicode(vertical1_parent), unicode(chapter1.location))
fake_no_match_file_list = generate_fake_files(format='no_match_%Y%m%dT%H%M%S.tar.bz2', every=relativedelta(days=1))
self.assertEqual(private_director.school, private_school)
isotonic = CalibratedClassifierCV(est, cv=2, method='isotonic')
self.assertEqual(len(encoded_unexpected_from_addr), 318) self.assertEqual(len(escaped_encoded_unexpected_from_addr), 324) self.assertEqual(len(unexpected_from_addr), 137)
types += text_type,
'text/plain': json.loads
self.problem_page.click_choice('choice_choice_1') self.problem_page.click_check() self.problem_page.wait_for_expected_status('label.choicegroup_incorrect', 'incorrect')
assert_raises(ValueError, agglo.fit, X[:0])
raise salt.exceptions.SaltSystemExit( 'The minimum required python version to run salt-ssh is "2.6".' )
_format_cache = {} _format_modules_cache = {}
cases = [ dict(case_data, edx_video_id=""), dict(case_data, edx_video_id="vid-v1:12345"), ]
m3 = Model3.objects.get(model2=1000) m3.model2
site = admin.AdminSite(name='auth_test_admin') site.register(User, UserAdmin) site.register(Group, GroupAdmin)
index = np.random.randn(10) s = Series(np.random.randn(10), index=index) self._check_roundtrip(s, tm.assert_series_equal)
from __future__ import absolute_import import logging
initial_element = etree.SubElement(codeparam_element, "initial_display") initial_element.text = str(initial_display)
self.assertEqual(event.dt, dt.replace(microsecond=0, tzinfo=EAT))
stamp = Timestamp('3/10/2012 22:00', tz=self.tzstr('US/Eastern'))
frame2 = frame1.copy() multi_index = MultiIndex.from_tuples([(70, 80), (90, 100)]) frame2.index = multi_index
response = self.session.post( url, data=self._encode_post_dict(details), headers=self.headers, )
self.assertFalse(glusterfs.delete_volume('Newvolume3'))
for gfk in gfks: if gfk.ct_field == obj.ct_field and gfk.fk_field == obj.ct_fk_field: return []
transformer = self.transformer_dataset.transformer out_space = self.data_specs[0] if isinstance(out_space, CompositeSpace): out_space = out_space.components[0]
df = DataFrame({1: [1., 2., 3.], 2: [3, 4, 5]}) self.assertTrue(df._is_mixed_type)
context['ewa_diff'] = ewa_diff context['ewa_inertia'] = ewa_inertia context['ewa_inertia_min'] = ewa_inertia_min context['no_improvement'] = no_improvement return False
def __call__(self, event): context = event.get('context', {}) course_id = context.get('course_id')
consultor1 = models.Advisor.objects.create(name='Rockstar Techie')
__virtualname__ = 'vmadm'
est.sparsify() assert_true(sparse.issparse(est.coef_)) pred = est.predict(X) assert_array_equal(pred, pred_orig)
cStyleComment = Regex(r"/\*(?:[^*]*\*+)+?/").setName("C style comment")
mode_slug = models.CharField(max_length=100)
if estimator_error <= 0: return sample_weight, 1., 0.
with self.assertRaises(AttributeError): getattr(post, "attached_%(class)s_set")
self.assertRaises(Exception, grouped['C'].__getitem__, 'D')
if taps: if not isinstance(taps, list): taps = [taps]
with tm.assert_produces_warning(FutureWarning): df.sort_index(by=['a', 'b'])
data = dict()
while length != self.batch_size: batch = self._base_iterator.next()
DOCMODULES = ['sklearn', 'matplotlib', 'numpy', 'scipy']
_, sa, _ = randomized_svd(X, k, n_iter=0, power_iteration_normalizer=normalizer, random_state=0)
TestModel.objects.create(name='Test Object') self.i18n_model = I18nTestModel.objects.create(name='Test Object')
skip_cmds = ('AIX',)
ORA2_FILE_PREFIX = None
template = engine.get_template('other-recursive.html') output = template.render(Context({})) self.assertEqual(output.strip(), 'fs3/recursive fs2/recursive fs/recursive')
result = jboss7.bindings_exist(name='bindings', jboss_config={}, bindings={'env': 'DEV2'})
from __future__ import absolute_import
K = squareform(K) np.fill_diagonal(K, 1)
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor' )
storage = self.get_storage() response = self.get_response() storage.add(constants.INFO, 'test') for m in storage:
'LICENSING': False,
external_solver = ['Isomap', 'KernelPCA', 'LocallyLinearEmbedding', 'RandomizedLasso', 'LogisticRegressionCV']
self.functions['saltutil.sync_grains'](saltenv='base') self.grains_cache = self.opts['grains']
self._discussion_page = InlineDiscussionPage(self.browser, self.discussion_id)
__virtualname__ = 'mongodb_user'
from nose.plugins.skip import SkipTest import theano.sandbox.cuda as cuda_ndarray if cuda_ndarray.cuda_available == False: raise SkipTest('Optional package cuda disabled')
from __future__ import absolute_import from distutils.version import LooseVersion import re import logging
from __future__ import absolute_import import os import sys import copy import site import fnmatch import logging import datetime import traceback import re
clf = self.factory(alpha=0.1, n_iter=1000, fit_intercept=False, class_weight={1: 0.001}) clf.fit(X, y)
TAGS = {
response = self.client.get(reverse('admin:admin_views_notreferenced_changelist'), {TO_FIELD_VAR: 'id'}) self.assertEqual(response.status_code, 200)
self.table = self._create_table_setup()
vals = Series(np.random.randn(10)) vals[4] = np.nan vals[8] = np.nan
self.correct_responses[name] = expect self.incorrect_responses[name] = self.CUSTOM_RESPONSE_INCORRECT
from __future__ import unicode_literals
id2 = models.AutoField(primary_key=True) name2 = models.CharField(max_length=50)
odds = filter(lambda i: i not in skip_idxs, range(1, len(activations), 2))
self.assertNumContains(sql, 'tbl_tbsp', 3)
from __future__ import absolute_import
from __future__ import unicode_literals
if '__opts__' not in globals(): globals()['__opts__'] = get_opts()
if inplace and self._is_cached: raise ValueError("This Series is a view of some other array, to " "sort in-place you must create a copy")
if kwargs: payload_kwargs['kwargs'] = kwargs
data = 'a b c\n1 2 3' msg = 'does not support'
self.edited_on = edit_info.get('edited_on', None) self.edited_by = edit_info.get('edited_by', None)
__virtualname__ = 'grub'
self.assertIn("example_source.mp4", self.item_descriptor.render(STUDENT_VIEW).content)
pass
FIRST_TIME_VERIFY_MSG = 'first-time-verify' VERIFY_NOW_MSG = 'verify-now' VERIFY_LATER_MSG = 'verify-later' UPGRADE_MSG = 'upgrade' PAYMENT_CONFIRMATION_MSG = 'payment-confirmation'
import salt.utils
enable_spectral_norm = False
task_type = 'rescore_problem' task_class = rescore_problem task_input, task_key = encode_problem_and_student_input(usage_key) return submit_task(request, task_type, task_class, usage_key.course_key, task_input, task_key)
CourseEnrollmentFactory.create(user=self.user, course_id=self.course.id, is_active=True)
self.ymd.astype(np.int32).unstack()
X, y = util_shuffle(X, y, random_state=generator)
DEFAULT_MIN_NUM = 0
attempt.status = "submitted" attempt.deny(DENY_ERROR_MSG) attempt.status = "submitted" attempt.approve()
'salt_event_pub_hwm': int, 'event_publisher_pub_hwm': int,
X, y = make_classification(n_samples=200, n_features=100, n_informative=3, random_state=0)
X, y = 3 * diabetes.data, diabetes.target G = np.dot(X.T, X) Xy = np.dot(X.T, y)
self.assertRaises(ValueError, utils.find_json, LORUM_IPSUM)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
actual = grouped_df.filter(lambda x: len(x) > 1) expected = df.iloc[expected_indexes] assert_frame_equal(actual, expected)
assert_equal(train.union(test), set(range(n_samples)))
context = { "request": get_request_or_stub() }
if not _wipe(dev): return False
if not expires: self.cookies[key]['expires'] = cookie_date(time.time() + max_age)
output = {} inds = [] for i, col in enumerate(obj): try: output[col] = self[col].transform(wrapper) inds.append(i) except Exception: pass
for c in categories: self.assertIn(c.pk, d['categories']) self.assertIsInstance(d['categories'], list)
log.exception('Unable to gather submission metadata, it will not be included in the event.')
X = X[:5, :] y = y[:5] clf.fit(X, y) assert_array_equal(np.diff(clf.scores_) > 0, True)
try: import pyrax from salt.utils.openstack.pyrax.authenticate import Authenticate from salt.utils.openstack.pyrax.queues import RackspaceQueues
self.assertEqual(get_site_status_msg(None), None) self.assertEqual(get_site_status_msg(self.course_key), None)
g = GEOSGeometry('POINT (5 23 17)') g.srid = 4326
def setUp(self): super(TestFilteredChildren, self).setUp() self.users = {number: UserFactory() for number in USER_NUMBERS}
mylocalrepo: git.config_unset: - name: foo.bar - value_regex: 'baz' - repo: /path/to/repo
raise ValueError( 'Wrong number of arguments for %s:\n' ' %s was called.' % (_signature_str(name, arg_spec), _function_called_str(name, args, kwargs)) )
__opts__.get( 'log_level', 'error' )
if support_sample_weight: if sample_weight is None: curr_sample_weight = np.ones((n_samples,)) else: curr_sample_weight = sample_weight.copy()
index = MultiIndex(levels=levels, labels=labels) self.assertFalse(index.has_duplicates)
from __future__ import absolute_import import logging
assert_array_equal(lfw_people.target, [2, 0, 1, 0, 2, 0, 2, 1, 1, 2])
class Channel(models.Model): name = models.CharField(max_length=255)
import integration
import logging log = logging.getLogger(__name__)
dr = date_range(datetime(2011, 3, 13, 3, 30), periods=3, freq=datetools.Hour(), tz=tz)
axes = [_ensure_index(columns), _ensure_index(index)]
argmin = idxmin argmax = idxmax
brc = Birch(n_clusters=None, branching_factor=1, threshold=0.01) assert_raises(ValueError, brc.fit, X)
original_values_map = self.get_settings_fields_of_each_type() self.set_wrong_inputs_to_fields()
self.index_axes = [ index_axes_map[a].set_pos(j).update_info(self.info) for j, a in enumerate(axes) ] j = len(self.index_axes)
self.cohort_default_student_username = "cohort_default_student" self.cohort_default_student_email = "cohort_default_student@example.com" StudioAutoAuthPage( self.browser, username=self.cohort_default_student_username, email=self.cohort_default_student_email, no_login=True ).visit()
depth = len(b_list)
correct_ans = CapaFactory.create(showanswer='finished', max_attempts="1", attempts="0", due=self.tomorrow_str, correct=True) self.assertTrue(correct_ans.answer_available())
product = partial(reduce, operator.mul) return sum(product(len(v) for v in p.values()) if p else 1 for p in self.param_grid)
resp = self.create_xblock(parent_usage_key=self.seq_usage_key, category='problem', boilerplate='multiplechoice.yaml') self.problem_usage_key = self.response_usage_key(resp)
if ndim is None: if len(self.mgr_locs) != 1: ndim = 1 else: ndim = 2 self.ndim = ndim
from __future__ import unicode_literals
for i in range(5): i += 1 registration_code_redemption = RegistrationCodeRedemption( registration_code_id=i, redeemed_by=self.instructor ) registration_code_redemption.save()
'badges',
io_loop = tornado.ioloop.IOLoop()
pickle.dumps(x)
log.exception(u"Error occurred while retrieving course enrollment details from the cache")
fire('{0}/{1}'.format(tag, _m['type']), _m)
expected = inspect.getargspec(load_ndarray_dataset)[0][1:] data = load_ndarray_dataset(conf['dataset'], **subdict(conf, expected))
if Replication is not None: config_items.append(versioning_item) config_items.append(replication_item) else: config_items.append(replication_item) config_items.append(versioning_item)
self.assert_numpy_array_equal(di_test.values, localized.values)
if not self.event.connect_pub(timeout=timeout): raise SaltReqTimeoutError() payload = channel.send(payload_kwargs, timeout=timeout)
if (lib.isscalar(other) or (isinstance(other, np.ndarray) and other.ndim < 1)): if isnull(other): return changeit()
self.assertEquals(xmodule_tabs.CourseTabList.get_tab_by_type(self.course.tabs, tab.type), tab)
_expand_elements(body)
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.'
DEFAULT_COURSE_ABOUT_IMAGE_URL = ENV_TOKENS.get('DEFAULT_COURSE_ABOUT_IMAGE_URL', DEFAULT_COURSE_ABOUT_IMAGE_URL)
s1 = Series([np.nan, True]) s2 = Series([np.nan, False])
queue_instances(vm_['instance_id_list'])
keyarr = key
product = partial(reduce, operator.mul) return sum(product(len(v) for v in p.values()) if p else 1 for p in self.param_grid)
rabbitmq_cluster.__salt__ = {} rabbitmq_cluster.__opts__ = {}
group = RandomUserPartitionScheme.get_group_for_user( self.MOCK_COURSE_ID, self.user, self.user_partition, assign=False )
exit(salt.defaults.exitcodes.EX_GENERIC)
y = A x = {'B' : B, 'C' : C}
data_x = data['images'][set_indices] data_x = np.cast['float32'](data_x) data_x = data_x[ex_range] data_x = data_x.reshape(data_x.shape[0], image_size ** 2)
from __future__ import absolute_import
print(metrics.classification_report(y_test, y_predicted, target_names=dataset.target_names))
return orig_index
try: app_name = get_commands()[command_name] except KeyError: raise CommandError("Unknown command: %r" % command_name)
startup_time = stats_line[:14] startup_time = time.strptime(startup_time, '%Y%m%d%H%M%S') startup_time = datetime.datetime(*startup_time[:6])
self.toggle_button('done_0', {}, False) self.toggle_button('done_1', {}, True)
from __future__ import unicode_literals
import salt.utils from salt.exceptions import SaltRenderError
return self.default_modulestore
from __future__ import absolute_import
time.sleep(2)
resp = self._change_enrollment('enroll') self.assertEqual(resp.status_code, 200) self.assertEqual(resp.content, full_url)
self.get_select_option(from_box, str(self.peter.id)).click() self.get_select_option(from_box, str(self.lisa.id)).click()
with self.settings(STATICFILES_DIRS=[static_dir]): output = self._collectstatic_output(clear=True) self.assertNotIn(self.warning_string, output)
state = np.random.RandomState(0) X = state.rand(10, 10) kpca = KernelPCA(random_state=state).fit(X) transformed1 = kpca.transform(X)
values = self.block.values.ravel(order='K') if len(values) and values[0] is None: fill_value = None
self.assertNotIn(malicious_code, resp.content)
return name not in _get_svc_list(name, 'ENABLED')
if srs_type == 'user': self.import_user_input(srs_input) elif srs_type == 'epsg': self.import_epsg(srs_input)
form.data[form.add_prefix(self.fk.name)] = None
rendered = "0.post.dev%d" % pieces["distance"]
import os import re import plistlib from distutils.version import LooseVersion
input_msg = correctmap.get_msg('1_2_1') self.assertEqual(input_msg, "Test Message")
self.testing_course.enrollment_start = self.tomorrow self.testing_course.enrollment_end = self.nextday self.testing_course = self.update_course(self.testing_course, self.user.id)
if not np.prod(self.shape): return self
if 'enabled' not in repo_opts: repo_opts['enabled'] = int(str(repo_opts.pop('disabled', False)).lower() != 'true')
my_application.clients:
import salt.ext.six as six import salt.utils
with check_mongo_calls(1): self._run_command()
from __future__ import absolute_import import logging import os import os.path import json
ks = State.objects.get(poly__contains=lawrence.point) self.assertEqual('Kansas', ks.name)
with check_exact_number_of_calls(store, 'refresh_cached_metadata_inheritance_tree', 28):
xclipExists = call(['which', 'xclip'], stdout=PIPE, stderr=PIPE) == 0
modulestore()
self.assertRaises(ValueError, lambda: Timedelta('3.1415'))
return None
INTERNAL_IPS = []
pull_result = __salt__['dockerng.pull']( image, client_timeout=client_timeout, )
education_level_label = _(u"Highest level of education completed")
from salt.executors import ModuleExecutorBase import salt.utils import salt.syspaths
instructor_user = UserFactory( username='test_instructor_user', email='test_instructor_user@openedx.org', password='test' ) CourseInstructorRole(self.master_course_key).add_users(instructor_user)
module = module + '.' if not module.endswith('.') else module
retc["timestamp"] = time.time()
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'ec2'
importlib.invalidate_caches()
grid_search_no_score.fit(X, y)
else:
fake_data_api.reset() cached_details = api.get_course_enrollment_details(self.COURSE_ID)
from pandas.compat.numpy import *
assert_raises(ValueError, plot_partial_dependence, clf, X, [0])
response.data["start"] = (self.page.number - 1) * self.get_page_size(self.request)
for name in names: ret[name] = ''
dummy_mat[codes == -1] = 0
sysrc.__salt__ = {} sysrc.__opts__ = {}
N_REGIONS = 25
self.assertEqual(1, c.num_geom)
@setup(inheritance_templates) def test_inheritance31(self): output = self.engine.render_to_string('inheritance31', {'optional': True}) self.assertEqual(output, '1two3')
self.service.set_credit_requirement_status( self.user.id, unicode(self.course.id), 'grade', 'grade' )
self.distribution.salt_download_windows_dlls = True self.run_command('download-windows-dlls') self.distribution.salt_download_windows_dlls = None
self.run_function('keychain.uninstall', [CERT_ALIAS]) certs_list = self.run_function('keychain.list_certs')
handlers = logger.handlers level = logger.getEffectiveLevel()
kml_url = url.getElementsByTagName('loc')[0].childNodes[0].data.split('http://example.com')[1]
i10 = SouthTexasInterstate.objects.length().get(name='I-10') self.assertAlmostEqual(len_m2, i10.length.m, 2)
refresh_cache = True break
if name not in list_tasks(location): return True else: return False
_check_align(self.ts[:-5], self.ts[:0], how=kind, method=meth) _check_align(self.ts[:-5], self.ts[:0], how=kind, method=meth, limit=1)
curr_logprob, z = self.score_samples(X)
'PREVENT_CONCURRENT_LOGINS': False,
if 0.5 not in percentiles: percentiles.append(0.5) percentiles = np.asarray(percentiles)
self.registration.activate() self.assertTrue(self.user.is_active) self.assertFalse(mock_segment_identify.called)
self.assertSaltTrueReturn(ret)
if obj.ndim < current_ndim:
self.options.saltfile = os.environ.get('SALT_SALTFILE', None)
self.assertEqual(s.dropna().values.item(), 'l')
cache_key = (forward, reverse, include_parents, include_hidden, topmost_call)
g = GaussianMixture(n_components=n_components, n_init=1, max_iter=5, reg_covar=0, random_state=random_state, warm_start=False, tol=1e-6) h = GaussianMixture(n_components=n_components, n_init=1, max_iter=5, reg_covar=0, random_state=random_state, warm_start=True, tol=1e-6)
__func_alias__ = { 'list_': 'list', 'get_': 'get', 'put_': 'put', 'delete_': 'delete', }
rhs = -2 * df.iloc[3:0:-1, 2:0:-1]
item.transcripts.pop(lang) reraised_message += ' ' + ex.message
url += '?payment-order-num={order_num}'.format(order_num=order.id) return HttpResponseRedirect(url)
exams = get_all_exams_for_course(unicode(self.course.id)) self.assertEqual(len(exams), expected_count)
for key in todelete: if key in six.iterkeys(filerepos[repo].copy()): del filerepos[repo][key]
elif result is True: already_installed_comments.append(out['comment'])
import logging import copy
'html5_sources': ['http://www.example.com/source.mp4'], 'data': ''
kwargs['srid'] = self.srid if self.spatial_index is not True: kwargs['spatial_index'] = self.spatial_index return name, path, args, kwargs
import salt.crypt import salt.utils import salt.utils.cloud import salt.config import salt.syspaths import uuid
self.assertIn(self.test_form, resp.content)
try: import boto.sqs HAS_BOTO = True except ImportError: HAS_BOTO = False
locale.__salt__ = {} locale.__opts__ = {}
return
import salt.utils
import logging
is_increasing = y_[0] < y_[-1] assert_true(is_increasing)
return default
return 'Error: table_type hook and priority required'
assert_array_almost_equal(huber_warm.coef_, huber_warm_coef, 1)
err_msg = None
import pylearn2.config.yaml_parse
import salt.ext.six as six
CourseEnrollmentFactory.create(user=self.user, course_id=self.course.id) self.client.login(username=self.user.username, password=self.test_password)
if srid and isinstance(srid, int): self.srid = srid
if kwarg: kwarg['__kwarg__'] = True arglist.append(kwarg)
self.assertIn('("slug" varchar_pattern_ops)', index_sql[4])
import salt.modules.cmdmod import salt.modules.smbios
datastore_cluster_ref = salt.utils.vmware.get_mor_by_property(_get_si(), vim.StoragePod, datastore_cluster_name) if datastore_cluster_ref: return {datastore_cluster_name: 'datastore cluster already exists'}
if before is None and after is None and not match: match = content
date_checks = []
with patch_edxnotes_api_settings("http://example.com"): self.assertEqual("http://example.com/some_path/", get_endpoint_function("some_path/"))
user_partititons = self.course.user_partitions self.assertEqual(len(user_partititons), 1) self.assertEqual(len(user_partititons[0].groups), 3)
usage_key = request_params['usage_key'] course_key = request_params['course_key']
self.assertIsInstance(request.COOKIES, dict)
'pub_hwm': int,
s = Series(list('aabbcde')) with tm.assertRaisesRegexp(AttributeError, "You cannot add any new attribute"): s.str.xlabel = "a"
self.skipTest('Unable to get the SHELL environment variable')
EXPORTED_ASSET_FILENAME = 'assets.xml'
new_block_info = copy.deepcopy(source_block_info) existing_block_info = dest_structure['blocks'].get(new_block_key, BlockData()) new_block_info.defaults = new_block_info.fields
TASK_INSTANCES_PARALLEL = 0 TASK_INSTANCES_QUEUE = 1 TASK_INSTANCES_IGNORE_NEW = 2 TASK_INSTANCES_STOP_EXISTING = 3
continue
return False
xblock_info = create_xblock_info( xblock, data=data, metadata=own_metadata(xblock), include_ancestor_info=include_ancestor_info ) if include_publishing_info: add_container_page_publishing_info(xblock, xblock_info) return xblock_info
if not isinstance(choices[0], (list, tuple)): choices = [choices]
form = self._admin_form(course_mode)
classifier.set_params(n_iter=1000)
if apply_net_settings: try: __salt__['ip.apply_network_settings'](**kwargs) except AttributeError as error: ret['result'] = False ret['comment'] = str(error) return ret
from __future__ import unicode_literals
path = path[len(self.storage.prefix):]
redirect_to = get_next_url_for_login_page(request)
oa = OAS(store_precision=False, assume_centered=True) oa.fit(X_centered) assert_almost_equal(oa.score(X_centered), score_, 4) assert(oa.precision_ is None)
interp_values = np.apply_along_axis(func, axis, data)
if kw_overrides_match is _marker: return profile_match return kw_overrides_match
self.engine = engine self._engine = None
for conn in connections.all(): if conn.vendor == 'sqlite' and conn.is_in_memory_db(conn.settings_dict['NAME']): conn.allow_thread_sharing = False
__salt__['macpackage.unmount'](mount_point)
ret = _psql_prepare_and_run(['-c', query], user=user, host=host, port=port, maintenance_db=maintenance_db, password=password, runas=runas) return ret['retcode'] == 0
sorted_index, _ = index.sortlevel(0) sorted_index.slice_locs((1, 0, 1), (2, 1, 0))
('svc', SVC(kernel='linear')),
beta1 = sqrt_inner_product(bs)
if isinstance(regex, six.string_types): return re.compile(regex, flags) else: assert not flags, "flags must be empty if regex is passed pre-compiled" return regex
'ID': val
try: fans = my_sympify(str(ans), matrix=do_matrix, do_qubit=do_qubit) except Exception, err: fans = None
from salt.states import mysql_grants
self.assertTrue(self._is_valid_key(key), msg="Failed for unicode character {0}".format(unicode_char))
connection.close()
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
data = np.asarray(data[skip:skip+trials])[:, 0, :, :]
_get_file_from_s3(metadata, saltenv, fnd['bucket'], path, cached_file_path)
course_overview.delete() course_overview = None
r = parse(self.io, parser=parser)
choice, answers = choice_answers_pair
try: from code_block_timer import CodeBlockTimer except ImportError: CodeBlockTimer = None
if self.inferred_type not in ['floating', 'mixed-integer-float', 'string', 'unicode', 'mixed']: return self._invalid_indexer('label', key)
FINANCIAL_ASSISTANCE_MIN_LENGTH = 800 FINANCIAL_ASSISTANCE_MAX_LENGTH = 2500
i2 = RangeIndex(0, 10) self.assertEqual(i.nbytes, i2.nbytes)
resp = self.client.ajax_post( self.url, data={'tabs': [{'tab_id': tab_id} for tab_id in tab_ids]}, ) self.assertEqual(resp.status_code, 204)
unrestricted_country, __ = self._setup_embargo()
return False
from __future__ import unicode_literals
eng = _engines[engine] eng_inst = eng(parsed_expr) ret = eng_inst.evaluate()
pca = PCA(n_components=50) pca.fit(X) pca_test = PCA(n_components=50, svd_solver='full') pca_test.fit(X) assert_array_almost_equal(pca.components_, pca_test.components_)
out, err = DETAILS['server'].sendline('pkg_list\n')
lines = '\n'.join(l.rstrip(' ') for l in lines.split('\n')) return lines
status.__salt__ = {}
from __future__ import unicode_literals
call_command("migrate", "migrations", "zero", verbosity=0)
result = MultiIndex.from_arrays([range(10 ** 6), range(10 ** 6)]) assert (not (10 ** 6, 0) in result)
self.assertTrue(f.has_changed('resume.txt', {'filename': 'resume.txt', 'content': 'My resume'}))
sys.stderr.write( 'WARNING: CONFIG \'{0}\' directory does not exist.\n'.format( self.options.config_dir ) )
for o in self.objs: index = np.searchsorted(o, max(o)) self.assertTrue(0 <= index <= len(o))
try: groupSID, domainName, objectType = win32security.LookupAccountName(None, pgroup) except pywinerror: err += 'Group does not exist\n'
cursor.execute("SELECT CURRVAL(pg_get_serial_sequence('%s','%s'))" % ( self.quote_name(table_name), pk_name)) return cursor.fetchone()[0]
if isinstance(self, ABCSeries): if axis: raise ValueError('cannot align series to a series other than ' 'axis 0')
if not cwd: cwd = os.path.expanduser('~{0}'.format('' if not runas else runas))
left_mask = np.tril(np.ones((tri_size, tri_size), dtype=int))[:, 1:] right_mask = left_mask[::-1, ::-1]
wp = self.panel.to_panel() wp2 = wp.reindex(major=wp.major_axis[:-1]) lp2 = wp2.to_frame()
_ = lambda text: text
import salt.ext.six as six
procArgs = (None, cmd, security_attributes, security_attributes, 1, 0, user_environment, None, startup_info)
__builtin__.__salt__ = {}
class CopyForm(Form): degree = IntegerField(widget=Select(choices=((1, gettext_lazy('test')),)))
ps_new_cache = self._create_service(username, {}) self.assertEqual( second_group.id, ps_new_cache.get_user_group_id_for_partition(user_partition_id) )
alldata = [x[1] for x in data]
ts['2001'] = 1 expected = ts['2001'] expected.name = 'A'
cls.html_unit = ItemFactory.create( parent_location=cls.vertical.location, category="html", display_name="Html Content", publish_item=False, )
svm = SVC(kernel="precomputed") assert_raises(ValueError, cval.cross_val_score, svm, X, y)
BINS = frozenset(('svc', 'supervise', 'svok')) return all(salt.utils.which(b) for b in BINS)
self.scope = DeepChainMap(_DEFAULT_GLOBALS.copy()) self.target = target
item = self.draft_mongo.get_item(vert_location, 0) self.assertFalse(getattr(item, 'is_draft', False), "Item was published. Draft should not exist")
X_transformed_parallel2 = fs_parallel2.transform(X) assert_array_equal( X_transformed.toarray(), X_transformed_parallel2.toarray() )
rng = date_range('6/1/2000', '6/15/2000', freq='T') result = rng[0:0].intersection(rng) self.assertEqual(len(result), 0)
try: import logstash HAS_LOGSTASH = True except ImportError: HAS_LOGSTASH = False
del DEFAULT_FILE_STORAGE MEDIA_ROOT = "/edx/var/edxapp/uploads"
dashboard_tracking_code = models.TextField(default="", blank=True)
Number.objects.filter(pk=self.n.pk).update(integer=F('integer').bitor(48))
self.fake_payment_page.submit_payment()
if kwargs.get('verbose', False): for c_id in ret: ret[c_id]['Info'] = inspect_container(c_id)
import salt.utils.compat import salt.utils.odict as odict from salt.exceptions import SaltInvocationError
from __future__ import absolute_import
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
f = lambda x: x.fillna(0, inplace=True) _check_f(d.copy(), f)
import re import os.path import logging import difflib
class MyEstimator(BaseEstimator):
def __add__(self, other): if not isinstance(other, int): return NotImplemented return self.__class__(int(self) + other)
null = True
if isinstance(value, Categorical): if not value.categories.equals(self.categories): raise ValueError("Cannot set a Categorical with another, " "without identical categories")
time_fit = collections.defaultdict(list) time_transform = collections.defaultdict(list)
if ignore_width or not com.in_interactive_session(): return True
for utmp in '/var/run/utmp', '/run/utmp': try: result[os.stat(utmp).st_mtime] = utmp except Exception: pass return result[sorted(result).pop()]
n_connected_components, _ = connected_components(graph) return n_connected_components == 1
while len(func_lines) > 0 and func_lines[-1] == '': func_lines = func_lines[:-1]
_check_unary_op(operator.inv)
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(boston.data, boston.target, random_state=rng)
url = self.browser.current_url fragment_index = url.find('#') if fragment_index >= 0: url = url[0:fragment_index]
from __future__ import absolute_import, print_function
lexer = shlex.shlex(options[1:-1].encode('utf8')) lexer.quotes = "'" lexer.whitespace = ", "
display_id = slugify(chapter.display_name_with_default_escaped) local_hide_from_toc = False if required_content: if unicode(chapter.location) not in required_content: local_hide_from_toc = True
log = logging.getLogger(__name__)
self.assertIsNotNone(get_template_request_context())
P3P_HEADER = 'CP="Open EdX does not have a P3P policy."'
self.results = batch()
s = Series(list('abc'))
self.assertEqual( self.run_function('xattr.read', [NO_FILE, 'spongebob']), 'ERROR: File not found: {0}'.format(NO_FILE))
from salt.ext.six import string_types
e = MaybeEvent.objects.create() self.assertEqual(e.dt, None)
if keyname(vm_) is None: raise SaltCloudSystemExit( 'The required \'keyname\' configuration setting is missing from the ' '\'ec2\' driver.' )
ws = create_connection('wss://localhost:8000/formatted_events/d0ce6c1a37e99dcc0374392f272fe19c0090cca7')
models.OriginalRasterField = models.RasterField
is_increasing = assert_warns_message(UserWarning, "interval", check_increasing, x, y)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, mock_open, patch)
del params["name"] assert_name_error("Your legal name must be a minimum of two characters long")
if type(MultiprocessingProcess) is type(tgt) and ( issubclass(tgt, MultiprocessingProcess)): need_log_queue = True else: need_log_queue = False
answer.field_value = value answer.course_key = course_key answer.save()
y_true = [1, 2, 3, 3] y_pred = [1, 2, 3, 1] y_true_bin = [0, 1, 1] y_pred_bin = [0, 1, 0]
self.browser.execute_script("jQuery.fx.off = true;")
if not self._whiten and can_fit: assert proc_var[0] > orig_var.max()
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if response and response.status_code != 200: if_modified_since = None if_unmodified_since = None
'parse_dates': False, 'keep_date_col': False, 'dayfirst': False, 'date_parser': None,
import salt.returners import salt.utils.slack
import calendar import operator import sys import warnings from datetime import datetime, time, timedelta from numpy.random import rand
import os
self.lcp = self.new_lcp(None) self.set_state_from_lcp()
log = logging.getLogger(__name__)
raise ReferentialIntegrityError( u"{} parents claim {}".format(len(parents), location) )
from __future__ import absolute_import import inspect import tempfile import shutil import os import collections
arr = a.astype('U').astype(object) self.assertTrue(lib.max_len_string_array(arr), 3)
if not callable(getattr(estimator, method)): raise AttributeError('{} not implemented in estimator' .format(method))
pass
if postgis: self.assertTrue(srs.wkt.startswith(sd['srtext'])) six.assertRegex(self, srs.proj4text, sd['proj4_re'])
if vm.config.template: status = 'VMware tools cannot be updated on a template' return status
Membership.objects.create(membership_country_id=self.soviet_union.id, person_id=self.george.id, group_id=self.cia.id)
email_image = email_payload_first[1]
if len(masks): mask = masks[0] for m in masks[1:]: mask = mask & m mask = mask.ravel() else: mask = None
field, field_list_filter_class = list_filter
geos_relate = GEOSFuncFactory( 'GEOSRelate', argtypes=[GEOM_PTR, GEOM_PTR], restype=geos_char_p, errcheck=check_string )
self._params = []
MIDDLEWARE_CLASSES = [ 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', ]
(False, "en", "lms-footer.css"), (False, "ar", "lms-footer-rtl.css"),
saltenv = env
import salt.config import salt.syspaths as syspaths
resp = ProxyImprovement.objects.select_related().get( reporter__name__icontains='butor' ) self.assertEqual( repr(resp), '<ProxyImprovement: ProxyImprovement:improve that>' )
mock_get_request_user.return_value = AnonymousUser() mock_refund_seat.reset_mock() self.send_signal() self.assertFalse(mock_refund_seat.called)
info = next(six.itervalues(next(six.itervalues(next(six.itervalues(info))))))
r = s.copy().astype('O') r['a'] = '1' result = r._convert(numeric=True) assert_series_equal(result, s)
_city_file = '' _country_file = ''
module.runtime = inner_system inner_system.xmodule_instance = module
target_srs = SpatialReference(srid)
self.creation_counter = Field.creation_counter Field.creation_counter += 1
return True
if krel[0] > 5 or (krel[0] == 5 and krel[1] > 0): if not os.path.exists('/usr/sbin/rcctl'): return __virtualname__
def test_default_expiry(self): self.assertEqual(self.session.get_expiry_age(), settings.SESSION_COOKIE_AGE)
from salt.utils import SaltInvocationError import logging log = logging.getLogger(__name__)
from __future__ import absolute_import
exception_type = _mk_exception(exception.etype)[0] exception = exception_type(report)
self.assertEqual(resp.data, {"state": desired_state})
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
address_predefined = 'DJANGO_LIVE_TEST_SERVER_ADDRESS' in os.environ old_address = os.environ.get('DJANGO_LIVE_TEST_SERVER_ADDRESS')
rst_file = document.attributes['source'] rst_dir = os.path.dirname(rst_file)
from __future__ import absolute_import
data.update({'queuekey': header['lms_key']})
result = f.clean('21.12.2010 13:30') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
if self.has_mi_columns: if cols is not None: raise TypeError("cannot specify cols with a MultiIndex on the " "columns")
tm.assert_numpy_array_equal(A.todense(), A_result.todense()) self.assertEqual(il, il_result) self.assertEqual(jl, jl_result)
y = check_array(y, accept_sparse='csr', ensure_2d=False, dtype=None)
self._mixin_after_parsed_funcs.append(self.__setup_extended_logging) self._mixin_after_parsed_funcs.append(self._setup_mp_logging_listener) self._mixin_after_parsed_funcs.append(self.__setup_console_logger)
component = OrderedDict() for field in header: component[field] = entry[header.index(field)]
fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
@python_2_unicode_compatible class UnsafeClass: def __str__(self): return 'you & me'
([], 'honor'),
self.url = reverse('course_modes_choose', args=[unicode(self.course.id)])
self.assertEqual(module.attempts, 0)
__set_labels = deprecate("setting labels directly", partial(set_labels, inplace=True, verify_integrity=True), alt_name="set_labels") labels = property(fget=_get_labels, fset=__set_labels)
if num_format_str is None and style_dict is None: return None
from courseware.views.views import render_xblock return render_xblock(request, unicode(usage_key), check_if_enrolled=False)
X_FRAME_OPTIONS = 'ALLOW'
X, Y = make_blobs(n_samples=50, centers=2, random_state=0, cluster_std=0.60)
CREDIT_PROVIDER_SECRET_KEYS = {}
self.assertUgettext('Date/time', 'Datum/Zeit')
nargs = len(args) nreq = self._AXIS_LEN + 1
self.refresh_course()
import salt.utils.cloud import salt.utils.xmlutil from salt.exceptions import SaltCloudSystemExit from salt.utils import warn_until
L = np.empty((max_features, max_features), dtype=X.dtype)
new_file.insert(0, marker_end + '\n') new_file.insert(0, content) new_file.insert(0, marker_start + '\n') done = True
assert_array_almost_equal(grad_1, grad_2) assert_almost_equal(loss_1, loss_2)
self.set_user_partitions(self.vertical_location, [split_test_partition, self.animal_partition]) self.check_access(self.red_cat, self.vertical_location, False)
self.login_page.password_reset(email="nobody@nowhere.com")
from __future__ import absolute_import
activate_account(activation_key) account = get_account_settings(request) self.assertTrue(account['is_active'])
grains = {} grains['cpu_flags'] = []
i = Period(year=1,month=1,day=1,freq='D').asfreq('S', 'S') i.ordinal ===> 1
generator = np.random.RandomState(0) mat = generator.rand(100, 100) scaled = _log_normalize(mat) + 1 _do_bistochastic_test(scaled)
self.create_programs_config()
FEATURES['ENABLE_CONTENT_LIBRARIES'] = True
models.CharField(name='cache_key', max_length=255, unique=True, primary_key=True), models.TextField(name='value'), models.DateTimeField(name='expires', db_index=True),
"Big data" * 68000, encode=base64.encodestring if PY2 else base64.encodebytes)
_track_certificate_events(request, context, course, user, user_certificate)
management.get_system_username = lambda: 'J\xfalia' self.assertEqual(management.get_default_username(), 'julia')
df.describe()
defaults.__grains__ = {} defaults.__salt__ = {} defaults.__opts__ = {}
username = re.sub(r'\s', '', _flatten_to_ascii(eamap.external_name), flags=re.UNICODE)
mytopic: boto_sns.present: - region: us-east-1 - profile: mysnsprofile
cache_key = cls.MESSAGE_URL_CACHE_KEY.format( access_point=access_point, course_key=course_key ) url = cache.get(cache_key)
if load['tgt_type'] == 'list': int_payload['topic_lst'] = load['tgt'] pub_sock.send(int_payload)
self._assert_history([], enroll_msg='embargo', access_msg='embargo')
mat = ma.masked_all((2, 3), dtype=bool) frame = DataFrame(mat, columns=['A', 'B', 'C'], index=[1, 2])
return sorted(run_.functions)
call_command("migrate", "migrations", fake=True, verbosity=0) call_command("migrate", "migrations", "zero", verbosity=0)
from integration import TMP_CONF_DIR from salttesting import TestCase
grains['virtual_subtype'] = 'Xen Dom0'
with translation.override('ja'), self.settings(USE_L10N=True): self.humanize_tester([100], ['100'], 'intcomma')
self.workd[yslice] = self.OP(self.workd[xslice])
from __future__ import print_function import nose
selected = tds[6] self.assertEqual(selected.get_attribute('class'), 'selected')
FEATURES['ENABLE_OAUTH2_PROVIDER'] = True
problem = new_loncapa_problem(xml_str)
return matched.group('charset').replace('"', '')
assert_true(X_scaled is not X) assert_true(X_csr_scaled is not X_csr)
import codecs import os import imp import logging import tempfile import traceback import sys
X, y = samples_generator.make_classification( n_features=20, n_informative=3, n_redundant=0, n_classes=4, n_clusters_per_class=2)
region_str = "[[[10,10], [20,10], [20, 30]], [[100,100], [120,100], [120,150]]]"
OGRGeomType(1) OGRGeomType(7) OGRGeomType('point') OGRGeomType('GeometrycollectioN') OGRGeomType('LINearrING') OGRGeomType('Unknown')
from __future__ import unicode_literals
class_name = class_name.encode('utf-8')
tmp *= 1 - damping R *= damping R += tmp
class CursorMock(object): "Very simple mock of DB-API cursor" def execute(self, arg): pass
post = None
cache.set('infinite_foo', 'bar') self.assertEqual(cache.get('infinite_foo'), 'bar')
import integration
def _get_pad(t): return max_len - self.len(t) + len(t)
return self.defaults.get("ask_initial", False)
self.assertEqual(iptables.build_rule(**{'match-set': 'src flag1,flag2'}), '-m set --match-set src flag1,flag2')
__virtualname__ = 'buildout'
response = self._change_password(email=self.NEW_EMAIL)
def _parse_wrapper(base_commit): def inner(repo_path): return _parse_commit_log(repo_path,base_commit) return inner
if self.kl_integrator is None: self.kl_integrator = find_integrator_for(self.prior, self.posterior)
from __future__ import unicode_literals
from unit.transport.req_test import ReqChannelMixin from unit.transport.pub_test import PubChannelMixin
memcacheoptions = (host, port)
course_fixture = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
with self.assertNumQueries(6): override_field_for_ccx(self.ccx, chapter, 'start', ccx_start)
A = np.abs(random_state.randn(30, 10)) NMF(n_components=15, random_state=0, tol=1e-2).fit(A)
pi = PeriodIndex(freq='A', start='1/1/2001', end='12/1/2005') self._check_all_fields(pi)
active_script = "return " + title_selector + " === document.activeElement;" return self.browser.execute_script(active_script)
apply_ranged_setting = False
n_samples = 60 n_features = 20
us_rule.delete() self._assert_history([('AU', 'blacklist')])
ret['comment'] = 'Event module not available. Beacon add failed.'
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
user_list[0].course_groups.add(*cohort_list) assert_events("added", user_list[:1], cohort_list) mock_tracker.reset_mock()
'grains': dict,
ordering.extend(queryset.query.order_by)
self._password = None self.save(update_fields=["password"])
user_name = 'SYSTEM'
reg_software.update({d_name: d_vers})
salt '*' win_update.install_updates categories="['Critical Updates']"
BlockDepthTransformer().transform(usage_info=None, block_structure=block_structure) BlockNavigationTransformer(0).transform(usage_info=None, block_structure=block_structure) block_structure._prune_unreachable()
self.assertValueQuerysetEqual( ExtraInfo.objects.values('note'), [{'note': 1}, {'note': 2}] )
ret['error'] = 'This package does not seem to exist' return ret
return False
with warnings.catch_warnings(record=True): transformer = Transformer() set_random_state(transformer) set_testing_parameters(transformer)
for i in range(self.n_layers_ - 1): n_fan_in, n_fan_out = layer_units[i], layer_units[i + 1]
import integration
students = self._create_students(10)
self.user_partition.get_scheme(self.non_random_scheme.name) self.user_partition.get_scheme(self.random_scheme.name)
class CustomURLConfMiddleware(MiddlewareMixin): def process_request(self, request): request.urlconf = 'template_tests.alternate_urls'
gamma = 10. kernel = rbf_kernel(X, Y, gamma=gamma)
import logging import re
bounds = np.tile([-np.inf, np.inf], (parameters.shape[0], 1)) bounds[-1][0] = 1e-12
from __future__ import absolute_import import os import textwrap
'cache_sreqs': bool,
true_path = os.path.realpath(file_path) if not os.path.exists(true_path): continue
delegate = self.Delegate(self.Delegator()) sys.getsizeof(delegate)
return self._constructor(result, index=new_index, columns=new_columns)._convert(datetime=True, copy=False)
_ret = {}
import re
current_cost = 0.5 * residuals + alpha * np.sum(np.abs(code)) errors.append(current_cost)
denied_banner = any(item.display for item in reverifications["denied"])
self.assertEqual(result['success'], 'correct') self.assertEqual(module.attempts, num_attempts + 1)
_js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
assert grad_counter.get_value() == train_batches * updates_per_batch
lhs_is_raster = lookup.lhs.field.geom_type == 'RASTER' rhs_is_raster = isinstance(rhs_val, GDALRaster)
def _helper_csv(self, writer, na_rep=None, cols=None, header=True, index=True, index_label=None, float_format=None, date_format=None): if cols is None: cols = self.columns
n_samples, self.n_features_ = X.shape is_classification = isinstance(self, ClassifierMixin)
self.assertEqual(2, Interstate.objects.count())
mask = left_indexer == -1 if mask.all(): key_col = rvals else: key_col = Index(lvals).where(~mask, rvals)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
assert_equal(type(X_transformed), np.ndarray)
altered_grader = CourseGradingModel.fetch(self.course.id) self.assertDictEqual(test_grader.grade_cutoffs, altered_grader.grade_cutoffs, "Noop update")
IS_WIN = win_timezone.__virtual__()
elif single_aligner:
return saltstack_version
context = test_view.get_context_data(test_name='test_value') self.assertEqual(context['test_name'], 'test_value')
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
result = SimpleLazyObject(self._setupfunc) memo[id(self)] = result return result
width, height = image_obj.size self.assertEqual(width, height) actual_sizes[width] = name
apt_pkg.init_system()
self.assertIn(orphan_chapter.location, self.store.get_orphans(course.id))
help = "Create a course in one of {}".format([ModuleStoreEnum.Type.mongo, ModuleStoreEnum.Type.split]) args = "modulestore user org course run"
actual = grouped_df.pid.transform(len) assert_series_equal(actual, expected)
return salt.utils.which('zfs')
self.assertEqual(context['currency'], 'usd') self.assertEqual(context['currency_symbol'], '$')
LTI_USER_EMAIL_DOMAIN = 'lti.example.com'
self.skipTest('\'timelib\' is not installed')
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, skip_if_binaries_missing ) from salttesting.mock import NO_MOCK, NO_MOCK_REASON, Mock, patch ensure_in_syspath('../../')
from salt.states import host
return EventHandler.modified_code
X = csc_matrix(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
private_vertical = get_and_verify_publish_state('vertical', self.PRIVATE_VERTICAL, False)
requires_sqlparse_for_splitting = True
CourseEnrollment.unenroll(self.user, self.courses[3].id, skip_refund=True)
self.assert_enrollment_status()
pass
delete_item(category='vertical', name='test_vertical')
changes = __salt__['pkg.install'](name, refresh=False, fromrepo=fromrepo, skip_verify=skip_verify, pkgs=targeted_pkgs, **kwargs)
params = pipe.get_params(deep=True) params2 = pipe2.get_params(deep=True)
self.assertGroupContent( groups[1], title=u"review (2)", notes=[u"Fourth note", None] )
self.load_extra_content( system, course_descriptor, 'static_tab', self.data_dir / course_dir / 'tabs', course_dir, url_name )
self._assert_enable_certs_button_is_disabled()
if query: url += '?' + query
if expr_form == 'range' and HAS_RANGE: tgt = self._convert_range_to_list(tgt) expr_form = 'list'
self.client.login(username=self.instructor.username, password="test") self._assert_certificates_visible(False)
def render_to_template_mock(*args): pass
self.create_squares_with_executemany(args)
import salt.utils from salt.version import SaltStackVersion as _SaltStackVersion from salt.exceptions import CommandExecutionError, CommandNotFoundError
time.sleep(0.5) return event_ret
module = CapaFactory.create(attempts=1, done=True)
def db_for_write(self, model, **hints): return 'writer'
pending_change = PendingEmailChange.objects.filter(user=self.user) self.assertEqual(0, len(pending_change))
ret = msgpack.loads(msg, use_list=True, encoding=encoding)
assert zca_dataset.has_targets()
api.update_credit_request_status(request["parameters"]["request_uuid"], self.PROVIDER_ID, status)
self.assertFalse(linode._validate_name('foo-'))
block_data.edit_info.source_version = None
newnode['hostname'] = vm_['name'] newnode['ostemplate'] = vm_['image']
sql, params = self.compile(val)
last = self.n_layers_ - 2
call_command("migrate", "migrations", "zero", verbosity=0)
Editor = apps.get_model('migrations', 'Editor') Editor.objects.create(name='Test Editor') raise RuntimeError('Abort migration')
assert_raises(ValueError, svm.SVC(C=-1).fit, X, Y)
allow_database_queries = True
import calendar self.assertEqual(calendar.timegm(base_dt.timetuple()) * 1000000000, base_expected)
outline_response = self.client.get(link.get("href"), {}, HTTP_ACCEPT='text/html') self.assertEqual(outline_response.status_code, 200)
changes_needed = True
@property def is_staff(self): return self.is_admin
self.ptr = lgeos.initGEOS_r(notice_h, error_h)
record_purchase(params, result['order']) return {'success': True, 'order': result['order'], 'error_html': ''}
pts = tuple([p[i] for p in points]) indexer.put(indlist, slice_indexer)
METRICS_WITHOUT_SAMPLE_WEIGHT = [ "cohen_kappa_score",
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
procedure_args = {'function': func}
pass
ONLOAD_BEACON_SAMPLE_RATE = 0.0
top_level_logger.propagate = True
assert result == any(subbatch_results), ("composite batch had a " "mixture of numeric and " "symbolic subbatches. This " "should never happen.") return result
if _callable is not None: with manager: _callable(*args, **kwargs) else: return manager
res = grainsmod.filter_by(dict1) self.assertIs(res, None)
([TestTransformer1(), UnregisteredTestTransformer3()], [UnregisteredTestTransformer3.name()]),
try: mask = int(mask) except ValueError: return False else: if not 1 <= mask <= int(mask_max): return False
msg = 'Error occurred while evaluating CustomResponse' log.warning(msg, exc_info=True)
self.login_page.visit()
import logging
LINKED_USERS = (ALICE_USERNAME, STAFF_USERNAME, ADMIN_USERNAME) PASSWORD = "edx"
self.assertRaises(KeyError, s.__getitem__, (2000, 3, 4))
delattr(obj.__class__, self.name)
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course_key)) delete_course_and_groups(self.course_key, self.user.id)
self.model.enforce_constraints()
aliases.extend( join for join in self.alias_map.keys() if self.alias_map[join].parent_alias == alias and join not in aliases )
if not cls._meta.abstract: signals.post_init.connect(self.update_dimension_fields, sender=cls)
dict(safe_zip(range(-5, 6), range(-5, 6))),
NUM_ROWS = 100 NUM_COLS = 10 col_names = ['A' + num for num in map(str, np.arange(NUM_COLS).tolist())] index_cols = col_names[:5]
return (lon, lat)
if avz not in zones: raise SaltCloudException( 'The specified availability zone isn\'t valid in this region: ' '{0}\n'.format( avz ) )
for op in ['__add__', '__mul__', '__truediv__', '__div__', '__sub__']:
from salt.states import archive as archive
'API': 'www.youtube.com/iframe_api',
if ret.get('Exists'): log.info('DSC Compile Config: {0}'.format(ret)) return ret
try: return calc(arg.astype(np.int64)) except: pass
bucket_files[bucket_name] = [k for k in s3_meta if 'Key' in k]
xpath = "//div[@class='indicator-container']/span[@class='status correct']" self.assert_no_xpath(xml, xpath, self.context)
if self.only_on_web: return {"only_on_web": True}
result = f.clean('13:30:05') self.assertEqual(result, time(13, 30, 5))
result = starmap(get_result_simple, zip(F, df_resid))
mask = mask.T
from salt.daemons.flo import core from salt.daemons.test.plan import actors
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.'
css_include = compressed_css('style-main-v1', raw=True) self.assertIn(u'lms-main-v1.css?raw', css_include)
else: self.send_response(200)
X = x[:, np.newaxis] X_plot = x_plot[:, np.newaxis]
before = self.make_project_state([]) after = self.make_project_state([person]) autodetector = MigrationAutodetector(before, after) changes = autodetector._detect_changes()
Book.objects.filter(title='Pro Django').update(pages=200)
METRICS_WITH_POS_LABEL = [ "roc_curve",
executor.loader.build_graph()
if not os.path.exists(cyg_cache_dir): os.mkdir(cyg_cache_dir) elif os.path.exists(cyg_setup_path): os.remove(cyg_setup_path)
oa = OAS(store_precision=False) oa.fit(X) assert_almost_equal(oa.score(X), score_, 4) assert(oa.precision_ is None)
self.closed = False self.terminated = False
lookup_name = 'testyear'
student_id = AutoAuthPage(self.browser).visit().get_user_id()
vmconfig['changed'][prop] = vmconfig['state'][prop]
batch = _undo_op(batch, 'Cast')
if line > num_template_lines: return template
clf.fit(X, y, sample_weight=[0.001] * 3 + [1] * 2)
self.assertEqual(counter.value, 0) self.assertEqual(pool._job_queue.qsize(), 1)
import salt.utils import salt.utils.cloud as suc from salt.exceptions import SaltInvocationError
from __future__ import absolute_import import re
account_settings = get_account_settings(self.default_request) self.assertEqual("Mickey Mouse", account_settings["name"])
import salt.utils from salt.exceptions import CommandNotFoundError
self.assertTrue(self.store.has_changes(parent))
self.assertContains( response, '<div class="js-inline-admin-formset inline-group" id="question_set-group"' ) self.assertContains(response, '<p>Callable in QuestionInline</p>')
import salt.ext.six as six from salt.ext.six.moves import filter from salt.ext.six.moves.urllib.parse import quote as _quote
import win32serviceutil import win32service import win32event import win32api
ensemble.set_params(n_jobs=1) y1 = ensemble.predict_proba(X_test) ensemble.set_params(n_jobs=2) y2 = ensemble.predict_proba(X_test) assert_array_almost_equal(y1, y2)
if available(service): services.append(service)
if settings.DEBUG: return host
self.coach = UserFactory.create() self.mstore = modulestore()
all_assets = course_assets[asset_key.asset_type] md = AssetMetadata(asset_key, asset_key.path) md.from_storable(all_assets[asset_idx]) md.update(attr_dict)
import json import logging
log.debug('No updates to install') ret['Success'] = False ret['Message'] = 'No Updates to install' return ret
with ensure_clean_path(self.path) as path:
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
return to
import salt.utils from salt import syspaths from salt._compat import ElementTree as ET import salt.utils.http as http import salt.utils.aws as aws import salt.loader from salt.template import compile_template
'pki_dir': str,
data = np.random.randint(0, 11, size=10) result = np.argmax(Series(data)) self.assertEqual(result, np.argmax(data))
network.__grains__ = {} network.__salt__ = {}
if not isinstance(answers, (list, tuple)): answers = [answers]
res = op(self.values, other)
if is_justify:
error_msg = _(u"You must agree to the {platform_name} {terms_of_service}.").format( platform_name=get_themed_value("PLATFORM_NAME", settings.PLATFORM_NAME), terms_of_service=terms_link )
enrollment.deactivate() self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assert_no_events_were_emitted()
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
with mock_create_basket(expect_called=False): response = self._post_to_view()
pass
a = '\xe0\xe1\xe2\xe3\xe4\xe5\xe7\xe8\xe9\xea\xeb' expected = 'aaaaaaceeee' assert_equal(strip_accents_unicode(a), expected)
HAS_IMPORTLIB = False
self.assertRedirects(response, 'http://testserver/permanent_redirect_view/', msg_prefix='abc')
position = "numerator" numerator = [] denominator = []
assign_srs = void_output(lgdal.OGR_G_AssignSpatialReference, [c_void_p, c_void_p], errcheck=False) get_geom_srs = srs_output(lgdal.OGR_G_GetSpatialReference, [c_void_p])
with self.assertRaises(FieldError): Choice.objects.filter(foo__exact=None)
return '%s/%s' % (random.randint(100, 999), filename)
if isinstance(v, six.binary_type):
y = np.zeros((10, 10)) y[:5, :5] = 1 y[5:, 5:] = 1
if len(changed) > 0: for prop in changed: update_cfg[prop] = state_cfg[prop]
response = self.client.get(changelist_url, {'pub_date__gte': 'foo'}) self.assertRedirects(response, '%s?e=1' % changelist_url)
self.assertEqual(s.titles.related_val, (s.id,)) self.assertQuerysetEqual(s.titles.all(), [])
import integration import salt.utils
if actions: action_form = self.action_form(auto_id=None) action_form.fields['action'].choices = self.get_action_choices(request) else: action_form = None
assert_true(np.all(np.diff(distances[0]) >= 0))
expected_energy_p = model.energy( layer_to_chains[model.visible_layer], [layer_to_chains[layer] for layer in model.hidden_layers] ).mean()
latest_version_url = '{artifactory_url}/api/search/latestVersion?g={group_url}&a={artifact_id}&repos={repository}'.format( artifactory_url=artifactory_url, repository=repository, group_url=group_url, artifact_id=artifact_id) log.debug('latest_version_url=%s', latest_version_url) return latest_version_url
import salt.utils import salt.utils.itertools import salt.utils.mac_utils from salt.exceptions import SaltInvocationError
if pkg_ver: if installed_pkgs[pkg_name].get('version') != pkg_ver: pkgs_to_install.append(pkg) else: pkgs_satisfied.append(installed_name_ver)
Book.objects.filter(pagecount__lt=250).delete()
other_session2 = self.backend() other_session2['foo'] = 'bar' other_session2.save()
pass
from salt.modules import win_disk
compressor = None
for key in locations: self.assertFalse(self._has_changes(locations[key]))
this_algorithm = deepcopy(algorithm) this_algorithm._set_monitoring_dataset(datasets)
error_item_names = self.advanced_settings.get_error_item_names() self.assertEqual(set(wrong_settings_list), set(error_item_names))
return None
continue
return False
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
self.setup_logfile_logger() verify_log(self.config)
super(TFD, self).__init__(X=data_x, y=data_y, y_labels=y_labels, view_converter=view_converter)
inds = index.to_int_index().indices + total_length
coord_dim = model_field.dim
with patch('student.models.cc.User.save'): uname = 'student' email = 'student@edx.org'
certificate = res_json['certificates'][1] self.assertEqual(certificate.get('total_issued_certificate'), 3) self.assertEqual(certificate.get('mode'), 'verified')
indices = np.argsort(n_samples_per_label)[::-1] n_samples_per_label = n_samples_per_label[indices]
self.stroke_color, self.stroke_opacity, self.stroke_weight = stroke_color, stroke_opacity, stroke_weight
s['select_field'] = AreaField(Area.unit_attname(geo_field.units_name(connection)))
assert_false(hasattr(seq, 'attempts'))
self.learning_rates = {} self.base_lr = theano._asarray(base_lr, dtype=theano.config.floatX)
] DATETIME_INPUT_FORMATS = [
username: user@example.com password: secretpassword datacenter_id: <UUID> ssh_private_key: /path/to/private.key ssh_public_key: /path/to/public.key
ret['retcode'] = int(not __salt__['ps.kill_pid'](pid))
for type_list in valid_types: if r in type_list: return True if int(r / 10.) in type_list and (r % 10) == 0: return True
from __future__ import absolute_import, print_function import logging
Y = np.dot(D, X)
boston = datasets.load_boston() boston.data, boston.target = shuffle(boston.data, boston.target, random_state=rng)
self.matrices_save_path = None
check_arguments_for_rescoring(usage_key)
attributes = {}
self.accessed = False self.modified = False
from __future__ import absolute_import
def testit(container): container[0] = 16
try: if not fnmatch.fnmatch(repo.url, remote): continue except TypeError: if not fnmatch.fnmatch(repo.url, six.text_type(remote)): continue
'dark_lang.middleware.DarkLangMiddleware',
service = ReverificationService() status = service.get_status(self.user.id, unicode(self.course_id), self.final_checkpoint_location) self.assertEqual(status, service.NON_VERIFIED_TRACK)
if problemtree in self.responders: overall_msg = self.correct_map.get_overall_message() return self.responders[problemtree].render_html( self._extract_html, response_msg=overall_msg )
ed, created = book.authors.get_or_create(name="Ed") self.assertFalse(created) self.assertEqual(book.authors.count(), 1)
FEATURES['AUTOMATIC_VERIFY_STUDENT_IDENTITY_FOR_TESTING'] = True
name = str(name)
predictions = [pred_block_i for pred_block_i, _ in prediction_blocks] test_indices = np.concatenate([indices_i for _, indices_i in prediction_blocks])
self.html_unit = ItemFactory.create( parent_location=self.vertical.location, category="html", display_name="Html Content", modulestore=store, publish_item=False, )
block_structure = block_structure_cls(root_block_usage_key=0)
assert_raises(ValueError, partial_dependence, {}, [0], X=X)
self.assertIn(INSTANCE_NAME, ret.keys())
__virtualname__ = 'sys'
data = { 'A': {'foo': 0, 'bar': 1} }
if line.startswith('pool') and line.endswith('write'): continue if line.endswith('bandwidth'): continue
class A(models.Model): a_text = models.CharField(max_length=20)
import logging
if hasattr(f, 'readline'): self._make_reader(f) else: self.data = f
from __future__ import absolute_import import time
disable_animations(annotation_component_page)
keep_idx = numpy.arange(not marginalize_odd, depth, 2) for i in keep_idx: fe -= T.dot(samples[i], b_list[i]) * beta
__virtualname__ = 'apt'
return copy.copy(self._wrapped)
df2.columns = ['key1', 'foo', 'foo'] self.assertRaises(ValueError, merge, df, df2)
logging.exception(u"Failed to generate thumbnail for {0}. Exception: {1}".format(content.location, str(e)))
d = Series([1] * 5) x = d.rolling(window=5).skew() tm.assert_series_equal(all_nan, x)
search = re.search(linere, line) if not search: continue
from __future__ import unicode_literals
fcopy = self.frame.copy() fcopy['A'] = 1 del fcopy['C']
model = SelectFromModel(clf, prefit=False) model.fit(data, y) assert_array_equal(model.transform(data), X_transform)
foo = repr(self.frame) self.frame.info(verbose=False, buf=buf)
CMS_BASE = 'localhost:8001'
if domain and 'edge.edx.org' in domain: return redirect(reverse("signin_user"))
from __future__ import absolute_import from inspect import ArgSpec
np.array([[], []]),
for enrollment in manual_enrollments: self.assertEqual(enrollment.enrollment.mode, CourseMode.HONOR)
class MessageForm(Form): when = SplitDateTimeField()
d4 = {'A': None, 'B': None}
with self.assertRaises(TypeError): modelform_factory(Person, fields="__all__", formfield_callback='not a function or callable')
try: dive.authors.add(marty) except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
from salt.modules import devmap import os.path
courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(len(courses_list), 1)
self.p1.undergroundbar bar.place.name = 'foo' bar.place = None bar.save() self.p1.delete()
'ENABLE_COSMETIC_DISPLAY_PRICE': False,
import copy import os import re import logging from salt.ext import six try:
self._unenroll() self.assertEqual(DEFAULT_VERIFIED_COHORT_NAME, get_cohort(self.user, self.course.id, assign=False).name)
import collections from datetime import datetime, timedelta import re
html_use_smartypants = True
if psutil.version_info < (1, 0, 1): net_io_counters = psutil.network_io_counters()
dest_modulestore = self._get_modulestore_for_courselike(dest_course_id) if source_modulestore == dest_modulestore: return source_modulestore.clone_course(source_course_id, dest_course_id, user_id, fields, **kwargs)
y_size = n_classes + 1 while (not allow_unlabeled and y_size == 0) or y_size > n_classes: y_size = generator.poisson(n_labels)
shutil.move(output_file_name, session_file_name) renamed = True
result = ci.insert(-1, 'a') expected = CategoricalIndex(list('aabbcaa'), categories=categories) tm.assert_index_equal(result, expected, exact=True)
query = self._course_key_to_son(location.course_key) query['definition.children'] = unicode(location)
test_container_html(draft_container)
_ = lambda text: text
return globals()[function](minion_id, pillar, **kwargs)
if not hasattr(draft_node.module, 'xml_attributes'): draft_node.module.xml_attributes = {}
self.log_in_as_instructor() self.student_admin_section = self.visit_instructor_dashboard().select_student_admin()
if hasattr(self, "classes_") and self.n_outputs_ == 1: self.n_classes_ = self.n_classes_[0] self.classes_ = self.classes_[0]
result = self.panel.reindex() assert_panel_equal(result, self.panel) self.assertFalse(result is self.panel)
ssh_keys = get_public_keys(vm_)
if isinstance(value, Decimal): value = float(value) if value is not None and self.area_att: value = Area(**{self.area_att: value}) return value
import salt.utils
W_list = [None] + W_list
from __future__ import unicode_literals
username_label = _(u"Public username")
import salt
result = f.clean('12.21.2010') self.assertEqual(result, date(2010, 12, 21))
nchanges = 1 hstrs.append((u'{0} {1}{2[ENDC]}' .format(hcolor, data, colors)))
requirement = CreditRequirement.objects.create( course=course, namespace='grade', name='grade', )
for key, value in six.iteritems(data): if key in expected_extra_kws: continue ret['kwargs'][key] = value
class Recipe(models.Model): rname = models.CharField(max_length=20, unique=True)
if ax.is_first_col(): continue if sharey or len(ax.get_shared_y_axes().get_siblings(ax)) > 1: _remove_labels_from_axis(ax.yaxis)
self.assertRaises(ValueError, self.frame.append, self.frame, verify_integrity=True)
rng = date_range(START, END, freq=datetools.bmonthEnd)
rng = np.random.RandomState(0)
response, _ = self._login_response('test@edx.org', 'test_password') self._assert_response(response, success=True)
zero_length = self.tsframe.reindex([]) result = zero_length.asfreq('BM') self.assertIsNot(result, zero_length)
if 'origin' in ds_input: self.origin.x, self.origin.y = ds_input['origin']
pass
roles = get_role_ids(course_id) for role in roles: if user.id in roles[role]: return True return False
requested_tab_id_locators = request.json['tabs']
if len(panels) == 0: return None elif len(panels) == 1: return panels[0] elif len(panels) == 2 and panels[0] == panels[1]: return panels[0]
for c in df.columns: if c not in bifw: bifw[c] = df[c] bifw = bifw.reindex(columns=df.columns)
try: user_certificate = GeneratedCertificate.eligible_certificates.get( user=user, course_id=course_key, status=CertificateStatuses.downloadable ) except GeneratedCertificate.DoesNotExist: pass
return _fail( ret, 'No revision matching \'{0}\' exists in the remote ' 'repository'.format(rev) )
y = f(X).ravel()
@property def dimension(self): "Returns 0 for points, 1 for lines, and 2 for surfaces." return capi.get_dims(self.ptr)
return result
df = orig.copy() df.ix["j", :] = ["b", 2] tm.assert_frame_equal(df, exp_single_row)
USE_ETAGS = False
if not offset.isAnchored() and hasattr(offset, '_inc'): if end_date in self.index: end = self.index.searchsorted(end_date, side='left')
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
options['secret_key'] = get_random_secret_key()
with self.assertRaises(CourseUserGroup.DoesNotExist): get_cohort_by_name(self.course.id, "AutoGroup")
assert_less(np.sum(s_clf.coef_ != 0.0), 2 * n_informative)
notification_url = reverse_course_url('course_notifications_handler', self.course.id, kwargs={ 'action_state_id': 1, })
needs_closing = False fh = self.path
image = image * 255. image = np.cast['uint8'](image)
EDX_API_KEY = AUTH_TOKENS.get("EDX_API_KEY")
colors_hue = np.arange(n_colors) colors_hue = as_floatX(colors_hue) colors_hue *= 1./n_colors
self.assertFalse(utils.is_bin_str(''))
msg = "LinearSVC does not support sample_weight." assert_warns_message( UserWarning, msg, calibrated_clf.fit, X_train, y_train, sample_weight=sw_train) probs_with_sw = calibrated_clf.predict_proba(X_test)
if self.shuffle: rng = check_random_state(self.random_state) else: rng = self.random_state
outline_page = self.course_outline_page.visit() outline_page.q(css='.outline-item.outline-subsection.is-collapsed .ui-toggle-expansion').click() verify_ordering(self, outline_page, expected_ordering)
stacklevel = 2
clf = IsolationForest(random_state=rng, contamination=0.25) clf.fit(X) decision_func = - clf.decision_function(X) pred = clf.predict(X)
logging.warning("Did not find key commentable_id in content.") passes_condition = False
salt.utils.compat.pack_dunder(__name__)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, Mock, patch ensure_in_syspath('../../')
from salt.exceptions import SaltSystemExit
deploy_scripts_search_path = overrides.get( 'deploy_scripts_search_path', defaults.get('deploy_scripts_search_path', 'cloud.deploy.d') ) if isinstance(deploy_scripts_search_path, string_types): deploy_scripts_search_path = [deploy_scripts_search_path]
FEATURES['ENABLE_PREREQUISITE_COURSES'] = True
thread_context = getattr(thread, "context", "course") if thread_context == "course" and not utils.discussion_category_id_access(course, request.user, discussion_id): raise Http404
verify_name(self.seq_usage_key, self.chapter_usage_key, "Duplicate of sequential")
self.seed = seed rng = make_np_rng(seed, which_method="permutation") self.permut = rng.permutation(index_tab)
from __future__ import unicode_literals
exp = pd.Series([1, 2, 3]) tm.assert_series_equal(res, exp)
uid = uinfo['uid']
from __future__ import absolute_import import os import logging import json import salt.utils.http from salt.exceptions import CommandExecutionError
self.course.visible_to_staff_only = True self.store.update_item(self.course, self.user.id)
resource = {"id": self.resource_id, 'reason': ''} self.check_event_response_by_http_status(test_case['handler'], resource, test_case['status'])
if hasattr(targ, 'dtype') and targ.dtype == 'm8[ns]': targ, res = _coerce_tds(targ, res) tm.assert_almost_equal(targ, res, check_dtype=check_dtype) return
OrderItemSubclassPK = namedtuple('OrderItemSubclassPK', ['cls', 'pk'])
data = list(series.values) samplings = [random.sample(data, size) for _ in range(samples)]
try: subprocess.check_call( script, stdout=sys.stdout, stderr=sys.stderr ) except Exception: os.chdir(cwd) raise
for val in value: if not self.valid_value(val): raise ValidationError( self.error_messages['invalid_choice'], code='invalid_choice', params={'value': val}, )
Xs = []
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath, skip_if_binaries_missing
nulls_order_largest = False
DEPRECATED_ADVANCED_COMPONENT_TYPES = []
from __future__ import unicode_literals
tgt = ipaddress.ip_address(tgt)
from salt.states import rdp
datetime_frame_columns = datetime_frame.T
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
self.password = 'abc' self.student = UserFactory.create(username='student', email='student@test.com', password=self.password)
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
onlyrepo = True for arepo in six.iterkeys(repos): if arepo == repo: continue if repos[arepo]['file'] == repofile: onlyrepo = False
url = path
import salt.utils.odict as odict
f('int64') f('float64') f('M8[ns]')
initializable_fields = updatable_fields + ['thread_type', 'context']
continue
s = _values_from_object(series) k = _values_from_object(key)
OLD_STYLE_RENDERERS = {}
import salt.utils.jid import salt.returners import salt.loader from salt.template import compile_template
db_name = connection.creation.create_test_db(verbosity=verbosity, autoclobber=not interactive, serialize=False)
levels = pd.date_range('2014-01-01', periods=4) codes = np.random.randint(0, 4, size=100)
if value == '{}': return {} return super(CustomJSONField, self).to_python(value)
self.patched_settings = self.settings(STATIC_ROOT=temp_dir) self.patched_settings.enable() self.run_collectstatic() self.addCleanup(shutil.rmtree, six.text_type(temp_dir))
self.assertEquals( block_structure_result, i in expected_accessible_blocks, "block_structure return value {0} not equal to expected value for block {1} for user {2}".format( block_structure_result, i, user.username ) )
self.assertFalse(mock_send.called)
from __future__ import unicode_literals
return sel
self.account_settings_page = AccountSettingsPage(self.browser) self.account_settings_page.visit() self.account_settings_page.wait_for_ajax()
course.set_grading_policy(course.grading_policy) grade_summary = course.grader.grade(totaled_scores, generate_random_scores=settings.GENERATE_PROFILE_SCORES)
assert_series_equal(result, expected)
import salt.ext.six as six
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.assertEqual(course.display_name, u"Φυσικά το όνομα Unicode")
repo_opts = dict( (x, kwargs[x]) for x in kwargs if not x.startswith('__') and x not in ('saltenv',) )
expected = left_f(df, Timestamp('20010109')) result = right_f(Timestamp('20010109'), df) assert_frame_equal(result, expected)
self.youtube_configuration['time_to_response'] = 0.4 self.metadata = self.metadata_for_mode('youtube_html5')
os.chdir(self.repo) subprocess.check_call(['git', 'init', '--quiet', self.repo])
self.store.publish(locations['child'], self.user_id)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salt.ext.six.moves import range
'datadog',
redirect_to = get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to)
vect = HashingVectorizer(analyzer='char', non_negative=True, binary=True, norm=None, dtype=np.float64) X = vect.transform(test_data) assert_equal(X.dtype, np.float64)
if getattr(callback, 'csrf_exempt', False): return None
salt 'jerry' system.reboot && \\ salt-run state.event 'salt/minion/jerry/start' count=1 quiet=True && \\ salt 'jerry' state.highstate
return self
with self.assertRaises(GeoIPException): cntry_g.city('google.com') with self.assertRaises(GeoIPException): cntry_g.coords('yahoo.com')
from salttesting import TestCase, skipIf from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON )
import nose from pandas import compat import pandas.formats.printing as printing import pandas.formats.format as fmt import pandas.util.testing as tm import pandas.core.config as cf
ver_string = get_version(ver_tuple) six.assertRegex(self, ver_string, r'1\.4(\.dev[0-9]+)?')
raise ValueError('Timeout cannot be a float')
from salt.states import rabbitmq_policy
__virtualname__ = 'virt'
httpretty.register_uri(httpretty.POST, "https://verify.example.com/submit/")
status_headings = sorted( set([status for course in cert_data for status in cert_data[course]]) )
self.assertTrue(BulkEmailFlag.feature_enabled(self.course.id)) response = self.client.get(self.url) self.assertTrue(self.email_link in response.content)
self.post.assert_called_with(callback_url, data=expected_callback_dict)
theta = self.theta_
self.assertRaises(ValueError, lambda: to_timedelta([1, 2], unit='foo')) self.assertRaises(ValueError, lambda: to_timedelta(1, unit='foo'))
self.functions['saltutil.sync_all'](saltenv='base')
self.async.close()
updates, layer_to_chains = model.get_sampling_updates( layer_to_chains, self.theano_rng, num_steps=self.num_gibbs_steps, return_layer_to_updated=True)
parameters = {'n_estimators': (1, 2), 'base_estimator__C': (1, 2)}
multi_db = True
self.assertEqual(iptables.build_rule(jump='REDIRECT', **{'to-port': 8080}), '--jump REDIRECT --to-port 8080')
source_suffix = '.txt'
result = f.clean('13.30.05') self.assertEqual(result, time(13, 30, 5))
LANGUAGE_CODE = 'en-us'
@python_2_unicode_compatible class Thing(models.Model): when = models.CharField(max_length=1, primary_key=True)
from salt.minion import Matcher
c.value = 5 with self.assertRaises(IntegrityError): with transaction.atomic(): c.save(force_insert=True)
slices = gen_even_slices(10, -1) assert_raises_regex(ValueError, "gen_even_slices got n_packs=-1, must be" " >=1", next, slices)
from __future__ import absolute_import
ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))
export_extra_content( export_fs, self.modulestore, self.courselike_key, xml_centric_courselike_key, 'course_info', 'info', '.html' )
raised = False try: fmt = OneHotFormatter(max_labels=10, dtype='invalid') except TypeError: raised = True assert raised
with self.assertNumQueries(0): with self.assertRaises(UndergroundBar.DoesNotExist): p.undergroundbar
from salt.utils import warn_until, kwargs_warn_until from salt.version import SaltStackVersion
resp = self.client.post( '/shoppingcart/payment_fake', dict(post_params) )
try: grad_not_implemented = theano.gradient.grad_not_implemented except: def grad_not_implemented(op, idx, ipt): return None
score = float(score) if not 0 <= score <= 1: raise LTIError('score value outside the permitted range of 0-1.')
sparse_classifier = BaggingClassifier( base_estimator=CustomSVC(decision_function_shape='ovr'), random_state=1, **params ).fit(X_train_sparse, y_train) sparse_results = getattr(sparse_classifier, f)(X_test_sparse)
re.compile(r'^/api/course_structure/v[\d+]/courses/{}/$'.format(settings.COURSE_ID_PATTERN)),
kw['force'] = True build_status = built(name, **kw) result = build_status['result'] status = _ret_status(build_status, name, result=result, changes={name: result}) return status
core_samples, labels = dbscan(X, algorithm=algorithm, eps=1, min_samples=4) assert_array_equal(core_samples, []) assert_array_equal(labels, -np.ones(n_samples))
from __future__ import unicode_literals
'pd.options.display.encoding="utf8"' ]
L = np.zeros((max_features, max_features), dtype=Gram.dtype)
return
FEATURES['ENABLE_OPENBADGES'] = True
pygments_style = 'sphinx'
from __future__ import unicode_literals
if "memorySize" in machine: del machine["memorySize"] return machine
return
n_samples = X.shape[0] X_train, y_train = X[:n_samples / 2], y[:n_samples / 2] X_test, y_test = X[n_samples / 2:], y[n_samples / 2:]
mask = None if (needs_i8_conversion(x) or (not isscalar(y) and needs_i8_conversion(y))):
if not s3_meta: continue
dest_id = self.store.make_course_key(courselike_key.org, courselike_key.course, courselike_key.run)
for new_name, colspec in compat.iteritems(parse_spec): if new_name in data_dict: raise ValueError('Date column %s already in dict' % new_name)
self.factory().fit(X, Y, intercept_init=np.zeros((3,)))
rng = date_range(START, END, freq=datetools.bmonthEnd)
self.context.update({ 'response_id': self.id,
with transaction.atomic():
group = group.ix[:, columns]
validator = kwarg validation_arg = ()
mem -= 256 for vm_ in list_domains(): dom = _get_domain(vm_) if dom.ID() > 0: mem -= dom.info()[2] / 1024 return mem
return GeoIP_record_by_name(self._city, c_char_p(enc_query))
p = Place() r = Restaurant(place=p) self.assertTrue(r.place is p)
if axis == 0: result = com._coerce_to_dtypes(result, self.dtypes)
response = self.client.post(self.send_mail_url, test_email) self.assertEquals(json.loads(response.content), self.success_content)
if r_fmt: result.append(r_fmt % col) params += [r_params] return [(" ".join(result), tuple(chain.from_iterable(params)))]
if meta_attrs != {}: raise TypeError("'class Meta' got invalid attribute(s): %s" % ','.join(meta_attrs.keys()))
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
drop_idx = [active.pop(ii) for ii in idx]
result = str(s2.index) self.assertTrue('NaT' in result)
self.query.reset_refcounts(refcounts_before)
if self.n >= 0: nb_offset = 1 else: nb_offset = -1 self.next_bday = CustomBusinessDay(n=nb_offset, weekmask=weekmask, holidays=holidays, calendar=calendar)
from __future__ import absolute_import, with_statement import copy import ctypes import os import re import sys import time import errno import signal import stat import logging import multiprocessing import tempfile import traceback
for vdev in vdevs: if os.path.isfile(vdev): ret[vdev] = 'existed' else: dlist.append(vdev)
value = getattr(value, 'values', value).ravel()
self.seed = state.get('seed', seed) assert self.seed is not None, "Seed must be provided for LoncapaProblem."
safe_cookie_data = SafeCookieData.create( cookies[settings.SESSION_COOKIE_NAME].value, user_id, )
self.fields = block_data.get('fields', {})
rxml = etree.fromstring(req.text)
request.url = 'http://testurl/' self.xmodule.verify_oauth_body_sign(request)
mean_y = mean(y) mean_x_times_y = mean(x * y) assert_equal(cov_x_y, mean_x_times_y - (mean_x * mean_y))
scorer = make_scorer(fbeta_score, beta=2) score1 = scorer(clf, X_test, y_test) score2 = fbeta_score(y_test, clf.predict(X_test), beta=2) assert_almost_equal(score1, score2)
if self.contentstore: self.contentstore.copy_all_course_assets(source_course_id, dest_course_id) return dest_course_id
key = safe_key(key, '', '')
with super(TestNavigation, cls).setUpClassAndTestData(): cls.test_course = CourseFactory.create() cls.test_course_proctored = CourseFactory.create() cls.course = CourseFactory.create()
return np.empty(0, dtype=np.int_)
FOOD_CONTAINER = 3 FRUIT = 4 FURNITURE = 6 INSECTS = 7 LARGE_OMNIVORES_HERBIVORES = 11 MEDIUM_MAMMAL = 12
from __future__ import absolute_import
url_path, fragment = urldefrag(url)
df = DataFrame(data=[1, 'a']) result = df.applymap(lambda x: x) self.assertEqual(result.dtypes[0], object)
return redirect(reverse('about_course', args=[unicode(course_key)]))
import integration import salt.utils
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
script = "correct = ['correct' if 'test' in submission[0] else 'incorrect']" problem = self.build_problem(answer=script)
return __MP_LOGGING_QUEUE
self.assertEqual(str(a), b'Girl wins \xe2\x82\xac12.500 in lottery')
if self.should_redirect_with_slash(request): path = self.get_full_path_with_slash(request) else: path = request.get_full_path()
elif _is_scalar_indexer(indexer): values[indexer] = value
if len(objs) == 1: wp = objs[0] else: wp = concat(objs, axis=0, verify_integrity=False).consolidate()
fkeys = partial(_factorize_keys, sort=sort)
print(msg) self.exit(1)
from __future__ import absolute_import import re
import pandas
if settings.ROOT_URLCONF != 'lms.urls': raise unittest.SkipTest('Test only valid in lms')
ForestRegressor = FOREST_REGRESSORS[name]
num_braces = 0
self.assert_no_xpath(xml, "//label[@class='choicetextgroup_incorrect']", self.context)
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
StudentModule.objects.create( student=user, course_id=self.course_key, module_state_key=problem_location, state=json.dumps({}) )
block = list(range(100, 104)) packed_block = struct.pack('<' + 'B B B B', *block)
log_prob_of = (Y * log_prob).sum(axis=1) masked = log_prob_of * drop_mask_Y assert masked.ndim == 1
if fragment: transformed_url += ('?#' if '?#' in url else '#') + fragment
self.params['wkt'] = wkt
df = DataFrame({'A': np.arange(20)}, index=np.arange(20))
base_estimator = LinearRegression() ransac_estimator = RANSACRegressor(base_estimator, min_samples=2, residual_threshold=0.0, random_state=0)
request.user.is_authenticated() and is_shopping_cart_enabled() and Order.does_user_have_cart(request.user) and Order.user_cart_has_items( request.user, [PaidCourseRegistration, CourseRegCodeItem] )
if cache: if not stop(): return False elif not _wipe(cache): return False
ContentType.objects.clear_cache()
cache_add.return_value = False self.assertEqual(cache.get_or_set('key', 'default'), 'default')
if 'id' not in __opts__ or not __opts__['id']: __opts__['id'] = 'saltsh_mid'
self.options.saltfile = os.path.abspath(self.options.saltfile)
from __future__ import absolute_import
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
from __future__ import absolute_import, print_function
response = view_func(request)
ret[minion] = data yield {minion: data}
self.assertEqual(len(Image.objects.all()), 0) self.assertEqual(len(File.objects.all()), 0)
xpath = "//option[@value='option_2_dummy_default']" self.assert_has_xpath(xml, xpath, self.context)
result = read_json(json, date_unit=None) assert_frame_equal(result, df)
PIPELINE_JS_COMPRESSOR = None
wkb_writer_create = GEOSFuncFactory('GEOSWKBWriter_create', restype=WKB_WRITE_PTR) wkb_writer_destroy = GEOSFuncFactory('GEOSWKBWriter_destroy', argtypes=[WKB_WRITE_PTR])
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
raise ItemNotFoundError(usage_locator)
FEATURES['LICENSING'] = True
log.debug('blugger has {0} updates in it'.format(self.install_collection.Count)) if self.install_collection.Count == 0: return {}
try: from pyamg import smoothed_aggregation_solver except ImportError: raise SkipTest("pyamg not available.")
from __future__ import absolute_import import logging import json
#[group for groups in ['external_auth'][extra['eauth']]]):
return self.opts['timeout']
with tm.assert_produces_warning(FutureWarning): s.irow(1)
s = self.ts.copy() result = getattr(s, op)(s) self.assertEqual(result.name, self.ts.name)
axes = ['b', 0, 1, 'c'] random.shuffle(axes) axes = tuple(axes) print('axes:', axes)
errors.extend(m for m in e.error_list if m not in errors)
if len(idx) == 0: continue else: with tm.assertRaises(Exception): func(idx)
import salt.ext.six as six
continue
n_cv = 2 cv = StratifiedKFold(n_cv) precomputed_folds = list(cv.split(train, target))
REQUIRE_DEBUG = DEBUG
sampling_updates = model.get_sampling_updates(layer_to_state, theano_rng) assert layer_to_state[model.visible_layer] in sampling_updates
dual_coef = linalg.solve(K, y, sym_pos=True, overwrite_a=False)
self.assertTrue(num_orig_tabs >= 5)
final_yaml_str = yaml_template % hyper_parameters
class WriteSaltVersion(Command):
self.assert_numpy_array_equal( pd.to_datetime(dts_with_oob, box=False, errors='ignore'), np.array( [dt.item() for dt in dts_with_oob], dtype='O' ) )
if len(ARGS) == 1: argv_prepared = ARGS[0].split() else: argv_prepared = ARGS
if not isinstance(config, dict): return False, ('Configuration for btmp beacon must ' 'be a list of dictionaries.') return True, 'Valid beacon configuration'
if (is_categorical_dtype(getattr(values, 'dtype', None)) or is_categorical_dtype(dtype)):
self.assertRaises(Exception, func, p1, tp)
req = django_to_webob_request(request) try: resp = instance.handle(handler, req, suffix)
class UnclosableBytesIO(BytesIO): def close(self): pass
inferred_type = lib.infer_dtype(data.ravel()) if inferred_type != 'string':
self.run_collectstatic()
prev_soft, prev_hard = resource.getrlimit(resource.RLIMIT_NOFILE)
content = get_cached_content(location) if content is None: try: content = AssetManager.find(location, as_stream=True) except (ItemNotFoundError, NotFoundError): raise
data = {"time": eventtime} data.update(payload)
first_checkpoint.add_verification_attempt(SoftwareSecurePhotoVerification.objects.create(user=self.user)) self.assertEqual(first_checkpoint.photo_verification.count(), 1)
filenames = np.array(filenames) target = np.array(target)
if self._fields is not None: return True return check_rel_lookup_compatibility(self.model, opts, field)
service_url: amazonaws.com
from __future__ import absolute_import
kwargs.setdefault('c', plt.rcParams['patch.facecolor'])
OPTS = {'cachedir': '/tmp/gitfs-test-cache'}
HAS_LIBS = False try: import github import github.PaginatedList import github.NamedUser from github.GithubException import UnknownObjectException
data.append(name) continue
value = int(value)
conn.create_instance_profile(name) log.info('Created {0} instance profile.'.format(name))
self.assertEqual(jid_file, None)
from __future__ import absolute_import
self.video.click_player_button('fullscreen')
import logging import os
if self.system.anonymous_student_id: return self.data.replace("%%USER_ID%%", self.system.anonymous_student_id) return self.data
call_command('loaddata', *fixture_labels, **{'verbosity': verbosity})
return set_system_date_time(years=int(dt_obj.strftime('%Y')), months=int(dt_obj.strftime('%m')), days=int(dt_obj.strftime('%d')))
a = Timestamp('3/12/2012') b = Timestamp('3/12/2012', tz='utc')
check_xblock_names(active_groups + inactive_groups, container.xblocks[1:]) if verify_missing_groups_not_present: self.verify_add_missing_groups_button_not_present(container)
self.client.logout() response = self.client.post(reverse('donation')) self.assertEqual(response.status_code, 404)
import salt.fileserver as fs import salt.modules import salt.utils import salt.utils.s3 as s3
data = rng.binomial(1, 0.5, size=np.size(indices)) * 2 - 1
global tmpdir tmpdir = tempfile.mkdtemp() os.makedirs(os.path.join(tmpdir, 'mldata'))
self.assert_grade(problem, 'choice_3', 'incorrect')
#'pointsize': '10pt',
filtered = fcopy.filter(regex='[A]+') self.assertEqual(len(filtered.columns), 2) self.assertIn('AA', filtered)
if timezone.is_aware(now): now = timezone.localtime(now)
for saltenv in SALTENVS: saltenv_root = os.path.join(FS_ROOT, saltenv) _new_dir(saltenv_root)
self.assert_login_response_before_pipeline_looks_correct(self.client.get('/login'))
country, __ = Country.objects.get_or_create(country='IR')
np_ver = [int(x) for x in unpickler.np.__version__.split('.', 2)[:2]]
def __setstate__(self, state): self._is_child = True self.__init__(state['opts'], log_queue=state['log_queue'])
doublequote=True, delim_whitespace=False, as_recarray=False, compact_ints=False, use_unsigned=False, low_memory=_c_parser_defaults['low_memory'], buffer_lines=None, memory_map=False, float_precision=None):
self._create_course_modes(course_modes) enrollment = data.create_course_enrollment( self.user.username, unicode(self.course.id), enrollment_mode, True )
assert_less(np.sqrt(np.mean((X_iso - X_iso2) ** 2)), 2 * noise_scale)
cauth = EmbargoedState(embargoed_countries='US, AQ') cauth.save() currently_blocked = EmbargoedState.current().embargoed_countries_list
try: return self.env.resolve(self.name, is_local=False) except UndefinedVariableError: return self.name
from __future__ import absolute_import import datetime import logging
np.testing.assert_allclose(f([[1]], [[0]]), [20, 20 / np.sqrt(2)])
self.assertEqual(parent.graceperiod, new_block.graceperiod) self.assertEqual(parent.start, new_block.start) self.assertEqual(course.start, new_block.start)
break
if isinstance(ind, MultiIndex): continue
arr = np.array(self.strIndex) index = Index(arr) tm.assert_contains_all(arr, index) tm.assert_index_equal(self.strIndex, index)
self.conn.execute("DROP SCHEMA IF EXISTS other CASCADE;") self.conn.execute("CREATE SCHEMA other;")
u_flipped_with_transpose, _, v_flipped_with_transpose = randomized_svd( mat, 3, flip_sign=True, transpose=True) u_based, v_based = max_loading_is_positive( u_flipped_with_transpose, v_flipped_with_transpose) assert_true(u_based) assert_false(v_based)
log.debug("children of randomize module (should be only 1): %s", self.child)
return __salt__['cmd.run'](cmd, runas=runas)
self._setup_mode_and_enrollment(self.FUTURE, "verified")
win_network.__salt__ = {} win_network.__opts__ = {}
scaler_incr = scaler_incr.partial_fit(chunk)
deploy_scripts_search_paths.append((entry, True))
if properties: optlist = [] for prop in properties.keys():
data_content = None
self.instructor = AdminFactory.create() self.client.login(username=self.instructor.username, password="test")
if classes is not None: label = label[:, classes]
max_squared_sum = get_max_squared_sum(X) step_size = get_auto_step_size(max_squared_sum, alpha, "log", fit_intercept)
return instr
return []
AssetBaseUrlConfig.objects.create(enabled=True, base_url='fakecdn.edx.org') expected_cdn_url = "//fakecdn.edx.org" + expected_path_start
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
import contracts contracts.disable_all()
expected = ts[1:]
result = Series(values).values.value_counts(dropna=dropna) result.name = name counts = result.values
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) for Cls in [GradientBoostingRegressor, GradientBoostingClassifier]: est = Cls(n_estimators=100, max_depth=1) est.fit(X, y)
LANGUAGES = ENV_TOKENS.get('LANGUAGES', LANGUAGES) LANGUAGE_CODE = ENV_TOKENS.get('LANGUAGE_CODE', LANGUAGE_CODE) USE_I18N = ENV_TOKENS.get('USE_I18N', USE_I18N)
authentication_classes = []
raise NotImplementedError()
index = Int64Index(iter([-5, 0, 1, 2])) tm.assert_index_equal(index, expected)
class CsInt(GEOSFuncFactory): "For coordinate sequence routines that return an integer." argtypes = [CS_PTR, POINTER(c_uint)] restype = c_int errcheck = staticmethod(check_cs_get)
query_parts = [(unquote(force_str(q[0])), unquote(force_str(q[1]))) for q in parse_qsl(query, keep_blank_values=True)] query = urlencode(query_parts)
command.extend(['--', filename])
return sys.modules[fullname]
return False
('refunded', 'refunded'),
self.module = app_module
eligibility = CreditEligibility.objects.get(username=self.USERNAME) eligibility.deadline = datetime.datetime.now(pytz.UTC) + datetime.timedelta(days=29) eligibility.save()
rs2 = ser.replace([np.nan, 'foo', 'bar'], [-1, -2, -3]) tm.assert_series_equal(rs, rs2)
for key in list(to_cleanup.keys()): instance = to_cleanup.pop(key) del instance
import salt.version import salt.utils
expected_msg = 'Error: test error' self.assertEqual(expected_msg, result['success'])
y = np.array([10, 9, 10, 7, 6, 6.1, 5]) x = np.arange(len(y))
self.delete_model(model, handle_autom2m=False)
test_data = state_run['cmd_|-test_changes_expected_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
from salt.modules import logrotate
del good
from __future__ import unicode_literals
return combined
ss = cval.ShuffleSplit(10, random_state=21) assert_array_equal(list(a for a, b in ss), list(a for a, b in ss))
__virtualname__ = 'dockerng'
with super(CreateThreadUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
if values.ndim == 1: return values[full_loc[1]]
log = logging.getLogger(__name__)
try: from salt._compat import ElementTree as ET HAS_ELEMENT_TREE = True except ImportError: HAS_ELEMENT_TREE = False
mock.side_effect = ValueError self.assertEqual(client.get('not-found'), None)
assert np.all(dist < 5 * bandwidth)
from __future__ import absolute_import
bulk_ops_record.dirty = False
raise SaltCloudSystemExit( 'The request_instance action must be called with -a or --action.' )
return (None, None)
return getattr(self.cost, attr)
supports_column_check_constraints = True
_hacked_nodes = frozenset(['Assign', 'Module', 'Expr'])
res_df = df.ix["j":"k", :] tm.assert_frame_equal(res_df, exp_df) self.assertTrue(com.is_categorical_dtype(res_df["cats"]))
relative_prefix = os.path.relpath(current_dir, os.getcwd()).replace('\\', '/') fixtures = [relative_prefix + '/fixtures/absolute.json']
ret_cfg = cfg('{0}.{1}'.format(ret_config, virtualname), {})
return []
self.assertTrue(filecmp.cmp(path_test, path_out))
xml = self.xml cxml = xml.xpath('//*[@id=$id]//choice', id=xml.get('id'))
import salt.config as config
if _ret['result'] is False or ret['result'] is True: ret['result'] = _ret['result']
from raet import raeting, nacling from raet.lane.stacking import LaneStack from raet.lane.yarding import RemoteYard import salt.config import salt.client import salt.utils import salt.syspaths as syspaths from salt.utils import kinds
is_truncated = n > max_seq_items
idx = date_range('2001-09-20 15:59', '2001-09-20 16:00', freq='T', tz='Australia/Sydney') s = Series([1, 2], index=idx)
terms = list(com.flatten(terms))
self.assertTrue(check_password('letmein', encoded, setter)) self.assertFalse(state['upgraded'])
continue
from __future__ import absolute_import
get_version = { 'Linux': linux_vmstats, 'FreeBSD': freebsd_vmstats, }
cache.set('unpicklable', UnpicklableType())
patcher = patch('config_models.models.cache', Mock(get=Mock(return_value=None))) patcher.start() self.addCleanup(patcher.stop)
from __future__ import unicode_literals
created_courses = [] for course_number in course_numbers: created_courses.append(CourseFactory.create(number=course_number))
if query_interval is not None: command.QUERY_INTERVAL = query_interval
if not salt.utils.is_proxy(): self.io_loop.spawn_callback(salt.engines.start_engines, self.opts, self.process_manager)
else: if not s.is_table: raise ValueError( 'can only remove with where on objects written as tables') return s.delete(where=where, start=start, stop=stop)
masterStack.keep.auto = raeting.AutoMode.always.value minionStack.keep.auto = raeting.AutoMode.always.value
assert_greater(mb_k_means.cluster_centers_.any(axis=1).sum(), 10)
if wua_download_list.Count == 0: log.debug('No updates to download') ret['Success'] = False ret['Message'] = 'No updates to download' return ret
self.assertIsNone(check_password({}, 'unknown', ''))
if cache in self.cache_options: self._cache = cache else: raise GeoIP2Exception('Invalid GeoIP caching option: %s' % cache)
from course_modes.models import CourseMode
msg = re.sub('(?ms)<html>(.*)</html>', '\\1', msg)
from __future__ import absolute_import
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.deny("error") self._assert_can_reverify()
ret = {'name': name, 'result': False, 'comment': '', 'changes': {},
conn.allow_thread_sharing = True connections_dict[id(conn)] = conn
AUTHENTICATION_BACKENDS = ( 'ratelimitbackend.backends.RateLimitModelBackend', )
RegistrationFactory(user=self.user)
with self.assertRaises(ItemNotFoundError): modulestore().get_item(course.location.for_branch(BRANCH_NAME_PUBLISHED))
if AUTH_TOKEN_HEADER in self.request.headers: return self.request.headers[AUTH_TOKEN_HEADER] else: return self.get_cookie(AUTH_COOKIE_NAME)
if hasattr(cls, 'server_thread'): cls.server_thread.terminate() cls.server_thread.join()
result = df.iloc[[-1, -1, 1, 3], [-1, 1]] expected = df.ix[[18, 18, 2, 6], [6, 2]] assert_frame_equal(result, expected)
raise TemplateDoesNotExist(', '.join(not_found))
else: terms_text = _(u"Terms of Service and Honor Code")
cached_files = __salt__['cp.cache_dir']( winrepo_source_dir, saltenv, include_pat='*.sls' ) genrepo(saltenv=saltenv) return cached_files
result = store.select( 'df', start=30, stop=40) expected = df.iloc[30:40, :] tm.assert_frame_equal(result, expected)
first_transaction.delete() second_transaction.delete() self._assert_history_transactions([])
continue
microsite_courses = get_courses(user, org=alternate) self.assertTrue( all(course.org == alternate_course.org for course in microsite_courses) )
this_sample = this_layer.sample(state_below=state_below, state_above=state_above, layer_above=layer_above, theano_rng=theano_rng)
sample_weight = (sample_weight * compute_sample_weight(self.class_weight, y))
view = self.bseries.copy(deep=False) view.sp_values[:5] = 5 self.assertTrue((self.bseries.sp_values[:5] == 5).all())
if self.digest is not None: password = binascii.hexlify(self.digest(force_bytes(password)).digest()) else: password = force_bytes(password)
mfield = field_name.lower() if mfield[-1:] == '_': mfield += 'field'
from __future__ import absolute_import
if __name__ == '__main__': main()
response = self.client.get('/login_protected_method_view/') self.assertRedirects(response, '/accounts/login/?next=/login_protected_method_view/')
del result['X'] del result['y']
updates, layer_to_chains = model.get_sampling_updates( layer_to_chains, self.theano_rng, num_steps=self.num_gibbs_steps, return_layer_to_updated=True)
MY_NAME = 'test_ext_pillar_opts'
should_display = models.BooleanField(default=False)
'ENABLE_ONLOAD_BEACON': False,
for part_svc in [ps_shared_cache_1, ps_diff_cache, ps_uncached]: self.assertEqual( first_group.id, part_svc.get_user_group_id_for_partition(user_partition_id) )
if superblock: result['superblock'] = super_(dev)
from __future__ import absolute_import import sys
problem = new_loncapa_problem(xml_str) problem.done = True
fake_data_api.add_course(self.COURSE_ID, course_modes=course_modes) api.add_enrollment(self.USERNAME, self.COURSE_ID)
response = self.client.get(self.url) self.assertNotIn(self.email_modal_link, response.content)
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): df.sort(axis=1)
BSD = ('OpenBSD', 'FreeBSD')
test_command = 'sysbench --num-threads=250 --test=mutex ' test_command += '--mutex-num={0} --mutex-locks={1} --mutex-loops={2} run ' result = None ret_val = {}
if save_definition: return _save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=user_name, password=password, logon_type=task_definition.Principal.LogonType)
DATE_INPUT_FORMATS = [
return []
glusterfs.__salt__ = {'glusterfs.peer': mod_glusterfs.peer} glusterfs.__opts__ = {}
result = g.agg(np.sum) assert_series_equal(result, expect)
import shutil import tempfile import os from distutils.version import LooseVersion try:
s_database = quote_identifier(dbc, for_grants=(table is '*'))
if host not in SITE_CACHE: SITE_CACHE[host] = self.get(domain__iexact=host) return SITE_CACHE[host]
if not location: self.base_location = None self.location = None
ldem = left - left.mean() rdem = right - right.mean()
X = np.array([[1, 2, 0], [0, 0, 0]], dtype=np.uint8)
if not is_list_like(new) and isnull(new) and not self.is_object: new = self.fill_value
return spanify(render_expression(left))
ply = Polygon(shell, inner) nullstate = State(name='NullState', poly=ply)
if not os.path.exists(local_name):
form_class_attrs = { 'Meta': Meta, 'formfield_callback': formfield_callback }
ops.add_flex_arithmetic_methods(SparseDataFrame, use_numexpr=False, **ops.frame_flex_funcs) ops.add_special_arithmetic_methods(SparseDataFrame, use_numexpr=False, **ops.frame_special_funcs)
import json import pprint import logging
with transaction.atomic(): sid = connection.savepoint_ids[-1] raise Exception("Oops")
for octet in (second_octet, third_octet, fourth_octet): if (octet < 0) or (octet > 255): return False return True
from __future__ import unicode_literals
outcomes, __ = OutcomeService.objects.get_or_create( lis_outcome_service_url=result_service, lti_consumer=lti_consumer )
from salt.states import proxy as proxy
self.assertQuerysetEqual( self.bob.groups.all(), [ 'CIA', 'Republican' ], attrgetter("name") )
group_id = get_cohort_id(request.user, course_key)
t_start = datetime.now() sampling(n_population, n_samples) delta = (datetime.now() - t_start) time = compute_time(t_start, delta) return time
invoice = models.ForeignKey(Invoice, null=True) invoice_item = models.ForeignKey(CourseRegistrationCodeInvoiceItem, null=True)
data = None
correctness = correctmap.get_correctness('1_2_1') self.assertEqual(correctness, 'correct')
if not model._default_manager.auto_created: if model._default_manager.use_in_migrations: default_manager = copy.copy(model._default_manager) default_manager._set_creation_counter()
from __future__ import unicode_literals
with warnings.catch_warnings(record=True) as warns: warnings.simplefilter('always', RemovedInDjango20Warning)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
G = neighbors.kneighbors_graph(X, n_neighbors, mode='distance').toarray()
df_with_missing = DataFrame( {'col1': [0, np.nan, 2], 'col2': [1, np.nan, np.nan]})
if self.axis == 0: new_axes[0], new_axes[1] = new_axes[1], self.grouper.result_index else: new_axes[self.axis] = self.grouper.result_index
from salt.states import makeconf
def f(x): x[:] = 10
import os import stat import string import logging
utf8_charset = Charset.Charset('utf-8')
_testing_mode_warnings = (DeprecationWarning, compat.ResourceWarning)
CourseRerunState.objects.initiated(source_course_key, destination_course_key, request.user, fields['display_name'])
try: CertificateInvalidation.objects.get( generated_certificate=self.generated_certificate, invalidated_by=self.global_staff, notes=self.notes, active=True, ) except ObjectDoesNotExist: self.fail("The certificate is not invalidated.")
return self.field.label_tag( contents=mark_safe(contents), attrs=attrs, label_suffix='' if self.is_checkbox else None, )
uid = uinfo['uid']
if '_dataset' in d: d['_datasets'] = [d['_dataset']] del d['_dataset']
if options['command']: exec(options['command']) return
result = df.reindex(lrange(15)) self.assertTrue(np.isnan(result.values[-5:]).all())
assert_true(sp.issparse(X1)) assert_true(sp.issparse(Y1)) assert_equal(60915113, X1.data.size) assert_equal(2606875, Y1.data.size)
google_provider = self.configure_google_provider(enabled=True) linkedin_provider = self.configure_linkedin_provider(enabled=True) self.assertEqual(len(provider.Registry.enabled()), 2)
return [self.indices[name] for name in names]
return super(AdaBoostClassifier, self).fit(X, y, sample_weight)
result = pd.infer_freq(df['date']) self.assertEqual(result, 'MS')
if not locale_info['charmap'] and not on_ubuntu: locale_info['charmap'] = locale_info['codeset'] locale = salt.utils.locales.join_locale(locale_info)
course_id = CourseKeyField(max_length=255, db_index=True)
label_key = '%s_label%d' % (key, i) self.write_array(label_key, lab)
'course_action_state',
if save: self.instance.save()
self._auto_auth({'username': 'test', 'course_id': course_id})
from __future__ import absolute_import import cherrypy
with self.assertRaises(ValueError): Choice.objects.filter(id__gt=None)
modulestore().update_item(course, ModuleStoreEnum.UserID.primitive_command)
if instance_guid and not consumer.instance_guid: consumer.instance_guid = instance_guid consumer.save() return consumer
df = orig.copy() df.at["j", "cats"] = "b" tm.assert_frame_equal(df, exp_single_cats_value)
if self.key_betas is not None and \ ki < len(self.key_betas) and \ bp1 == self.key_betas[ki]:
self.assertEqual(is_active, new_is_active) self.assertEqual(course_mode, new_mode)
with check_mongo_calls_range(max_finds=max_mongo_calls, min_finds=min_mongo_calls): _course_overview_2 = CourseOverview.get_from_id(course.id)
cat = Categorical(["a", "b", "b", "a"], ordered=False) cat.sort_values()
res = dfobj.replace(re.compile(r'\s*\.\s*'), nan, regex=True) assert_frame_equal(dfobj, res.fillna('.'))
time.sleep(2)
staff = set(CourseStaffRole(course_key).users_with_role()).union(instructors)
if self.io_loop is None: self.io_loop = tornado.ioloop.IOLoop.current()
pls_2 = pls_.PLSRegression(n_components=X.shape[1]) pls_2.fit(X, Y)
test_invalid_token("AAAAAAAAAAAAAAAAAAAAAMoazRI7ePLjEWXN1N7keLw=", "padding")
salt '*' win_update.list_updates categories="['Critical Updates']" verbose=True
STUDIO_BASE_URL = os.environ.get('studio_url', 'http://localhost:8031')
self.assertRaises(NotImplementedError, self.encode_decode, obj)
house.main_room = self.rooms[-3] house.save()
from __future__ import absolute_import import unittest import logging
mixed = Series(['fooBAD__barBAD', NA, 'foo', True, datetime.today(), 'BAD', None, 1, 2.])
import salt.client from salt.utils import parsers, print_cli from salt.utils.verify import verify_log import salt.output
self.course_info_page.visit() self.tab_nav.go_to_tab('Wiki') self.assertTrue(self.tab_nav.is_on_tab('Wiki'))
self.dashboard_page.visit() self.assertFalse(self.dashboard_page.pre_requisite_message_displayed())
n_samples, self.n_features_ = X.shape y = self._validate_y(y)
(['professional'], 'professional'), (['no-id-professional'], 'no-id-professional')
if module_name in self.loaded_modules: mod_dict = self.loaded_modules[module_name] else: mod_dict = self.mod_dict_class()
try: searcher.index(cls.DISCOVERY_DOCUMENT_TYPE, [course_info])
terms = [ (("labels=['l1', 'l2']"),), Term("labels=['l1', 'l2']"), ]
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'digital_ocean'
elif existing['code'] == 404:
import pprint
paramvalues['binddn'] = _render_template(paramvalues['binddn'], username) paramvalues['binddn'] = ldap.filter.escape_filter_chars(paramvalues['binddn'])
SECRET_KEY = ''
from openedx.core.djangoapps.credit import api, tasks
example_messages = [str(i) for i in range(5)] set_cookie_data(cookie_storage, example_messages)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
'ENABLE_SPECIAL_EXAMS': False,
confirmation_message = self.cohort_management_page.get_cohort_discussions_message(key=key) self.assertEqual("Your changes have been saved.", confirmation_message)
with disable_overrides(): original_due_date = getattr(unit, 'due', None)
attempt_2 = SoftwareSecurePhotoVerification(user=user) attempt_2.mark_ready() assert_equals(attempt_2, SoftwareSecurePhotoVerification.active_for_user(user))
if len(args) == 1: if isinstance(args[0], (tuple, list)): init_geoms = args[0] else: init_geoms = args else: init_geoms = args
module_dependencies=dependencies)
tmp.sort(cmp=lambda x, y: cmp(x.lstrip('-'), y.lstrip('-'))) return tmp
except (TypeError, ValueError): exists = False
parent.insert(parent.index(next_include), incxml)
LogoutPage(self.browser).visit()
opts = Article._meta
destroy(vm_['name'])
_test_seq(df, idx_ser.values, col_ser.values)
info = _get_info(self.info, i) info['names'] = list(a.names) info['type'] = a.__class__.__name__
Donation.add_to_order(self.cart, self.COST) self.cart.start_purchase() self.cart.purchase()
regex = re.compile(r'^{0}\s+=\s+{1}$'.format(re.escape(name), re.escape(value)))
with tm.assertRaisesRegexp(boto.exception.S3ResponseError, 'S3ResponseError: 403 Forbidden'): read_csv('s3://cant_get_it/')
GIT_REPO_EXPORT_DIR = ENV_TOKENS.get('GIT_REPO_EXPORT_DIR', '/edx/var/edxapp/export_course_repos')
return True
import salt.crypt import salt.payload import salt.utils import salt.utils.network import salt.utils.event from salt.exceptions import SaltClientError
from __future__ import absolute_import
self.assertEqual(len(res_json['certificates']), 2)
try: import docker import docker.utils HAS_DOCKER_PY = True except ImportError: HAS_DOCKER_PY = False
result[mask] = 0.0
for obj in m2o_type_fields: if hasattr(obj, 'field'): reverse_field = obj.field self.assertTrue(reverse_field.is_relation and reverse_field.one_to_many)
rvalues.flat[imask] = np.array([Timedelta(val)._repr_base(format='all') for val in values.ravel()[imask]], dtype=object) return rvalues
object_id = models.PositiveIntegerField() content_object = GenericForeignKey()
return response
block = self.course
X_scaled_back = scaler.inverse_transform(X_scaled) assert_true(X_scaled_back is not X) assert_true(X_scaled_back is not X_scaled) assert_array_almost_equal(X_scaled_back, X)
config_course_cohorts( course, is_cohorted=True, discussion_topics=["General", "Feedback"], cohorted_discussions=["Feedback"] )
init_space, source = self.data_specs X_space, init_y_space = init_space.components new_y_space = VectorSpace(dim=num_classes) new_space = CompositeSpace((X_space, new_y_space)) self.data_specs = (new_space, source)
context.update(extra_context)
rs = GDALRaster(self.rs_path, write=False) band = rs.bands[0]
user_id = context.get('user_id') course_title = context.get('course_title')
if not np.prod(result.shape): return trans(result).astype(dtype)
context.update(get_certificate_header_context(is_secure=request.is_secure())) context.update(get_certificate_footer_context())
pass
response = self.client.post(self.send_mail_url, test_email) self.assertEquals(json.loads(response.content), self.success_content)
bp = df.plot.box(color='DodgerBlue', return_type='dict') _check_colors(bp, 'DodgerBlue', 'DodgerBlue', 'DodgerBlue', 'DodgerBlue')
p = self.PersonModel.objects.get(name="Joan") self.assertEqual(p.mugshot.closed, True)
languages.sort() return languages
s = OrderedSet() self.assertFalse(s) s.add(1) self.assertTrue(s)
XBLOCK_MIXINS = (LmsBlockMixin, InheritanceMixin, XModuleMixin, EditInfoMixin)
if not _contents_of_verticals: _contents_of_verticals = [[{'display_name': 'Video', 'metadata': self.metadata}]]
course = self.store.get_course(self.course.id, depth=None)
set_crontab(
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
destroy_geom = void_output(lgdal.OGR_G_DestroyGeometry, [c_void_p], errcheck=False)
query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(None, query) self.assertEqual(result, attempt)
self.assertTrue(form.is_valid()) self.assertEqual(form.cleaned_data['dt'], datetime.datetime(2011, 3, 27, 2, 30, 0))
response = self.client.get(reverse("dashboard")) self.assertHttpOK(response)
from ..preprocessing import LabelEncoder
if self.xml.get('inline', ''): tree.set('class', 'inline')
source_blocks.extend(self._problem_type_filter(library, dest_block.capa_type))
@python_2_unicode_compatible class Widget(models.Model): name = models.CharField(max_length=255)
self_paced_course, self_paced_section = self.setup_course(**course_options) beta_tester = BetaTesterFactory(course_key=self_paced_course.id)
values, _, value, _ = self._try_coerce_args(self.values, value) arr_value = np.array(value)
for dtype in ['float64', 'int64']:
import integration import salt.utils
rs = read_csv(filename, compression="bz2", index_col=0) assert_frame_equal(df, rs)
self.assertIn( 'test_content_field', new_version.get_explicitly_set_fields_by_scope(scope=Scope.content) ) self.assertIn( 'test_settings_field', new_version.get_explicitly_set_fields_by_scope(scope=Scope.settings) )
unused_char = self._stream.read(1) if not unused_char: raise InputStreamExhausted() self._stream.unget(unused_char)
from __future__ import unicode_literals
self.config.pop('log_datefmt_console', None)
self.assertFalse('Invalid' in response.content)
self.temp_dir2 = tempfile.mkdtemp(suffix='aBc')
scores = cval.cross_val_score(clf, X, y) assert_array_equal(scores, clf.score(X, y))
X_composite = mlp_composite.get_input_space().make_theano_batch() X_first_part = mlp_first_part.get_input_space().make_theano_batch() X_second_part = mlp_second_part.get_input_space().make_theano_batch()
'tools.salt_token.on': True, 'tools.salt_auth.on': False,
result = s[omask] expected = s[mask] assert_series_equal(result, expected)
ccx_course_key = CCXLocator.from_course_locator(course.id, '1') self._add_role_access_to_user(self.user, ccx_course_key)
'post_params_success': post_params_success,
if (y_type not in ["binary", "multiclass", "multilabel-indicator"]): raise ValueError("{0} is not supported".format(y_type))
return str(key)
if 'class_' in attrs: attrs['class'] = attrs.pop('class_')
if 'port' not in mod_opts: logger.error("Not loading '%s'. 'port' not specified in config", __name__)
def get_asides(self, block): return []
Comparison.objects.create( first_obj=cheetah, other_obj=tiger, comparative="faster" ) Comparison.objects.create( first_obj=tiger, other_obj=cheetah, comparative="cooler" )
from numbers import Number
with self.assertRaises(forms.ValidationError): f.clean('1:30:05 PM')
if ret: run(name, 'touch \'{0}\''.format(SEED_MARKER), python_shell=False)
self.assertFalse(self._in_atomic_block)
sentinel = com.sentinel_factory() levels = frame.index.format(sparsify=sentinel, adjoin=False, names=False)
REPR_OUTPUT_SIZE = 20
if not lazy: descendent_definitions = self.get_definitions( course_key, [ block.definition for block in new_module_data.itervalues() ] ) definitions = {definition['_id']: definition for definition in descendent_definitions}
from __future__ import absolute_import
self.context = self._extract_context(self.tree)
for field in obj._meta.fields: if hasattr(field, 'geom_type'): self.geometry_field = field.name break
return __proxy__(args, kw)
config_course_cohorts_legacy(self.course, [], cohorted=True, auto_cohort_groups=["AutoGroup"])
if dataset.y is not None: dataset.y = numpy.repeat(dataset.y, num_patches / X.shape[0])
'float64': 0x1E3D4C53, 'int32': 0x1E3D4C54, 'uint8': 0x1E3D4C55, 'int16': 0x1E3D4C56
#html_domain_indices = True
self.split_test_module.user_partition_id = 0
__virtualname__ = 'mongo'
if LooseVersion(tables.__version__) < '3.1.0': raise nose.SkipTest('tables version does not support fix for nan ' 'selection bug: GH 4858')
cur_block = unordered_structure[block]
self._update_cutoff()
assert_array_almost_equal( X_dense.astype(dtype), X2_dense, 4) assert_array_almost_equal( y_dense.astype(dtype), y2, 4)
from pandas import NaT
actual_collection = get_edx_api_data(program_config, self.user, 'programs', cache_key=cache_key) self.assertEqual(actual_collection, expected_collection)
unlink_cohort_partition_group(test_cohort) link_cohort_to_partition_group( test_cohort, self.user_partition.id, self.groups[1].id, ) self.assert_student_in_group(self.groups[1])
self._compare(o.head(-3), o.head(7)) self._compare(o.tail(-3), o.tail(7))
with check_mongo_calls(courses_list_from_group_calls): _accessible_courses_list_from_groups(self.request)
can_introspect_big_integer_field = True
if n == 0 and dt_in != cur_cmbegin: n += 1
print "video {0} url_name: {1}".format(i, video.url_name)
test_invalid_token(self.tokens[self.user][:-4], "aes")
if not (self.kind is None or self.kind == 'period'): obj = obj.to_timestamp(how=self.convention) return obj
return u"//{}/{}/{}".format(settings.CMS_BASE, page, unicode(course.id))
assert_allclose(np.sort(g.weights_), np.sort(rand_data.weights), rtol=0.1, atol=1e-2)
totals = totals.dropna(
for i, tab in enumerate(xmodule_tabs.CourseTabList.iterate_displayable( self.course, inline_collections=False )): self.assertEquals(tab.type, self.course.tabs[i].type)
with self.assertRaises(ResponseError): problem.grade_answers({'1_2_1': '42'})
if 'username' in ret and not ret['username']: ret['username'] = salt.utils.get_user()
from __future__ import unicode_literals
import salt.returners import salt.utils.jid import salt.exceptions
import re import logging import shlex import yaml
COMMENT, INPUT, OUTPUT = range(3)
mb_data = MNIST(which_set='test').X[105:106, :]
for c in colors.cnames: result = plotting._get_standard_colors(num_colors=1, color=c) self.assertEqual(result, [c])
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
indices = np.array(indices, dtype=int) indices.shape = (-1, 2) return indices
_default_encoding = 'UTF-8'
cat = Categorical(["a", "b", "c", "a"], ordered=True)
e = pd.Series([0, 1, 2, 3.5, 4]) tr, v = [3], [3.5] check_replace(tr, v, e)
X, y = iris.data, iris.target.astype(np.float64) n_samples, n_features = X.shape n_classes = len(np.unique(y))
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21 13:30:00")
gtf = (c_double * 6)() capi.get_ds_geotransform(self._ptr, byref(gtf)) return list(gtf)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
self.assertTrue(self._is_valid_key(key), msg="Failed for unicode character {0}".format(unicode_char))
ret['changes']['diff'] = changes_needed comments.append('Container \'{0}\' was replaced'.format(name))
return True
res1l, res1r = s1.align(s2, join='left') res2l, res2r = s2.align(s1, join='right')
return False
union = first.union(first) self.assertIs(union, first)
def f(): df = orig.copy() df.iloc[2, 0] = "c"
assert_panel_equal(result.to_pandas(), p)
delta -= datetime.timedelta(calendar.leapdays(d.year, now.year))
def edge(request): return redirect('/')
store.append('df3', df)
if settings.configured and settings.DEBUG: assert callable(receiver), "Signal receivers must be callable."
from __future__ import absolute_import import logging import re
if self.skiprows: new_rows = [row for i, row in enumerate(new_rows) if i + self.pos not in self.skiprows]
self.assertNotIn('hello', request.session.load())
lazy_settings.APPEND_SLASH self.assertEqual(repr(lazy_settings), expected)
time_last_reset = user.date_joined
with self.assertRaises(forms.ValidationError): f.clean('2010-12-21 13:30:05')
from salt.modules import win_dns_client
return parse(out)
fg1 = FakeGeom1() fg2 = FakeGeom2()
CREDIT_TASK_DEFAULT_RETRY_DELAY = 30
X_blobs, y_blobs = make_blobs(n_samples=100, centers=10, random_state=0) X_blobs = sparse.csr_matrix(X_blobs)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
with self.assertRaises(GeoIP2Exception): cntry_g.city('tmc.edu') with self.assertRaises(GeoIP2Exception): cntry_g.coords('tmc.edu')
return view_func(request, *args, **kwargs)
salt '*' vsphere.set_syslog_config my.esxi.host root bad-password \ loghost ssl://localhost:5432,tcp://10.1.0.1:1514
self.assertTrue(self.xmodule.verify_oauth_body_sign.called)
self.add(metadata_to_insert)
_cleanup()
def __get_s3_meta(bucket, key=key, keyid=keyid): return s3.query( key=key, keyid=keyid, kms_keyid=keyid, bucket=bucket, service_url=service_url, verify_ssl=verify_ssl, location=location, return_bin=False)
return graders[self.credit_type[0]]( all_choices=all_choices, student_answer=student_answer, student_non_answers=student_non_answers )
idx = date_range('1750-1-1', '2050-1-1', freq='7D') idx_p = self.round_trip_pickle(idx) tm.assert_index_equal(idx, idx_p)
try: imp.find_module(app_name) except ImportError: try: __import__(app_name) except ImportError: continue INSTALLED_APPS += (app_name,)
ps_shared_cache_1 = self._create_service(username, shared_cache) ps_shared_cache_2 = self._create_service(username, shared_cache)
response = self.client.get(complete_url) self.assertEqual(response.status_code, 302) self.assertEqual(response['Location'], 'http://example.none/misc/final-destination')
def format_values_with(float_format): formatter = self._value_formatter(float_format, threshold)
class ReferencedByParent(models.Model): name = models.CharField(max_length=20, unique=True)
widget.is_required = self.required
store['a'] = ts store['b'] = df del store['a'] del store['b'] self.assertEqual(len(store), 0)
from mpl_toolkits.mplot3d import Axes3D Axes3D
self._create_block_hierarchy() self.store.publish(self.course.location, self.user_id)
self._original_iterator = None self._pre_dispatch_amount = 0
while f1 != f2: f1=f2 (f2,ext)=os.path.splitext(f1)
af = AffinityPropagation(preference=-50).fit(X) cluster_centers_indices = af.cluster_centers_indices_ labels = af.labels_
unhandled_params = unhandled_params[:-len(defaults)]
destroy(server_['name'])
return item.published.replace(tzinfo=get_fixed_timezone(42))
return 'default'
self.assertIn('donation_for_course', self.client.session) self.assertIn(unicode(self.course.id), self.client.session['donation_for_course'])
current_len += 1 if current_len == truncate_len: end_text_pos = pos continue
super(GoogleMapSet, self).__init__(**kwargs) self.template = template
base = DatetimeIndex(['2011-01-05', '2011-01-04', '2011-01-02', '2011-01-03'], tz=tz, name='idx')
delete_item(category='chapter', name='chapter_2')
length = int(self.headers.getheader('content-length')) data_string = self.rfile.read(length) post_dict = json.loads(data_string)
gid = group_to_gid(gid)
for xblock_name in self.XBLOCK_NAMES: self.check_event_response_by_key('flag_resource', resource, 'reason', 'reason 0', xblock_name)
train, valid, test, transfer = utlc.load_sparse_dataset("ule", normalize=True, transfer=True) assert train.shape[0] == transfer.shape[0]
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains, requires_salt_modules ) ensure_in_syspath('../../')
if "MultiTask" in name: return np.reshape(y, (-1, 1)) return y
import integration
import os.path import shutil
grid_search_no_score = GridSearchCV(clf_no_score, {'C': Cs}) assert_raise_message(TypeError, "no scoring", grid_search_no_score.fit, [[1]])
self.assertEqual(formset[0], forms[0]) try: formset[3] self.fail('Requesting an invalid formset index should raise an exception') except IndexError: pass
if found: setattr(self, cache_attr, getattr(f, attr)) break else: found = True
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
'clean_dynamic_modules': bool,
PIPELINE_CSS_COMPRESSOR = None PIPELINE_JS_COMPRESSOR = None
giturl = "" data_dir = ""
time_isoformat.split('+')[0], "%Y-%m-%dT%H:%M:%S.%f"
html_module_location = course_key.make_usage_key('html', 'nonportable_link') html_module = self.store.get_item(html_module_location) self.assertIn('/jump_to_id/nonportable_link', html_module.data)
#templates_path.append('source/_templates')
self.assertEqual(ax.patches[0].get_x(), -0.25) self.assertEqual(ax.patches[-1].get_x(), 5.15)
ns_td = Timedelta(1, 'ns') self.assertNotEqual(hash(ns_td), hash(ns_td.to_pytimedelta()))
url(r'^user_api/', include('openedx.core.djangoapps.user_api.legacy_urls')),
from __future__ import absolute_import import copy
self.assert_grade(problem, "invalid_option", "incorrect")
self.working_dir = rp_
def test_stat_unexpected_keyword(self): obj = self._construct(5) starwars = 'Star Wars' errmsg = 'unexpected keyword'
added = self.frame + self.mixed_float _check_mixed_float(added, dtype='float64') added = self.mixed_float + self.frame _check_mixed_float(added, dtype='float64')
all_assets[asset_idx] = md.to_storable()
b.delete()
from __future__ import absolute_import import os import shutil
course_id = serializers.CharField(source='id', read_only=True)
self.cmap.set_overall_message(None) self.assertEqual(self.cmap.get_overall_message(), "")
line_re = re.compile('.*?\n')
for idxr, getitem in [(lambda x: x.ix, False), (lambda x: x.iloc, False), (lambda x: x, True)]:
ntf = tempfile.NamedTemporaryFile() ntf.write(self.as_string()) ntf.flush() return ntf
self._create_courses_and_enrollments( (self.TEST_ORG, True), (self.TEST_ORG, True), (self.TEST_ORG, True), ("org_alias", True) )
clf = TreeClassifier(class_weight=[{-1: 0.5, 1: 1.}], random_state=0) assert_raises(ValueError, clf.fit, X, _y)
if enabled(name): stop(name, runas=runas) start(name, runas=runas)
self.cart1 = Order.get_cart_for_user(self.first_verified_user) CertificateItem.add_to_order(self.cart1, self.course_key, self.cost, 'verified') self.cart1.purchase()
SORTED_LEVEL_NAMES = [ l[0] for l in sorted(six.iteritems(LOG_LEVELS), key=lambda x: x[1]) ]
__virtualname__ = 'win_smtp_server'
return sorted(results, key=lambda course: unicode(course.id))
from pandas.tseries.common import (CombinedDatetimelikeProperties, DatetimeProperties) self.assertIs(Series.dt, CombinedDatetimelikeProperties)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
responseparam_element = etree.SubElement(response_element, "responseparam") responseparam_element.set("type", "tolerance") responseparam_element.set("default", str(tolerance))
from edx_proctoring.api import get_all_exams_for_course
parsed_url = parse_url(filepath_or_buffer) s3_host = os.environ.get('AWS_S3_HOST', 's3.amazonaws.com')
assert (niter > 1) == (len(dbm.hidden_layers) > 1)
import functools import re
with override_settings(CREDIT_PROVIDER_SECRET_KEYS={}): response = self.post_credit_request(self.user.username, self.eligibility.course.course_key) self.assertEqual(response.status_code, 400)
module = CapaFactory.create(max_attempts="1", attempts="2") self.assertTrue(module.closed())
self.strategy.clean_partial_pipeline()
urlpatterns += ( url(r'^404$', handler404), url(r'^500$', handler500), )
return ret
return parent
ret['changes'] = { 'testing': { 'old': 'Unchanged', 'new': 'Something pretended to change' } }
self.cohort_management_page.select_cohort_some_inline_discussion()
'ENABLE_COURSE_DISCOVERY': False,
verify_date_or_time(COURSE_START_DATE_CSS, '12/20/2013') verify_date_or_time(COURSE_START_TIME_CSS, DUMMY_TIME)
module.location = Mock(module.location) module.location.to_deprecated_string.return_value = 'i4x://edX/capa_test/problem/meh'
problem = self.store.get_item(problem_location) self.assertEquals(problem.display_name, expected_display_name)
tm.assert_frame_equal(np.round(df, decimals), expected_rounded)
import integration import salt.utils
if not version: version = __salt__['pkg.version'](name)
self.functions = salt.loader.minion_mods(self.opts) self.returners = salt.loader.returners(self.opts, self.functions)
elif field in self._errors.keys(): exclude.append(f.name)
opts = self._meta
import salt.utils import salt.syspaths as syspaths
pass
response = self.client.get(self.ping_url)
grader_element = etree.SubElement(codeparam_element, "grader_payload") grader_element.text = str(grader_payload)
warnings.filterwarnings( "ignore", "Using a non-integer number instead of an " "integer will result in an error in the future", DeprecationWarning )
self._validate_params(self.n_features, self.input_type) return self
vdata = sum(_SERVICE_TYPES[service] for service in services)
all_item_keys = self._locations_in_subtree(self) newrelic.agent.add_custom_parameter('seq.num_items', len(all_item_keys))
def clear_counties(): County.objects.all().delete()
proxy = Proxy.objects.create(name="proxy", value=42)
continue
response = self.session.get(url, headers=self.headers)
__virtualname__ = 'pkg'
the_mean = self.mixed_frame.mean(axis=1) the_sum = self.mixed_frame.sum(axis=1, numeric_only=True) self.assert_index_equal(the_sum.index, the_mean.index)
'job_cache_store_endtime': bool,
from salt.states import win_certutil as certutil
self.assertFalse( self.run_function('pkgutil.is_installed', ['spongebob']))
from napalm import get_network_driver HAS_NAPALM = True
from __future__ import unicode_literals
'root_dir': str,
students = User.objects.filter(courseenrollment__course_id=course_key) if len(students) == 0: self.stdout.write("No students enrolled in %s" % course_key.to_deprecated_string()) return
result = Timestamp(0) expected = to_datetime(0) self.assertEqual(result, expected)
exit=False)
import os
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 5)
self.assertQuerysetEqual( self.jane.groups.all(), [] )
self.assertNotIn('Search for a course', response.content) self.assertNotIn('<aside aria-label="Refine Your Search" class="search-facets phone-menu">', response.content)
if len(subarr) != len(index) and len(subarr) == 1: subarr = create_from_value(subarr[0], index, subarr.dtype)
self.settings_page.visit()
preview_lang = request.GET.get('preview-lang', None) if not preview_lang and auth_user: preview_lang = get_user_preference(request.user, DARK_LANGUAGE_KEY)
v0 = random_state.uniform(-1, 1, A.shape[0]) _, u = eigsh(A, ncv=self.n_svd_vecs, v0=v0)
course2 = CourseFactory.create() CourseModeFactory.create( course_id=course2.id, mode_slug="verified", expiration_datetime=self.PAST ) CourseEnrollmentFactory( course_id=course2.id, user=self.user, mode="verified" )
from salt.modules import sysbench
self.assertTrue('Activate Course Enrollment' in response.content)
result = prefix_middleware.process_request(request) self.assertIsNone(result)
OverrideFieldData.provider_classes = None
self.assertEqual(courses_list, courses_list_by_groups)
import salt.utils import salt.utils.locales
raise SkipTest("XFailed Test") diabetes = datasets.load_diabetes() X, y = diabetes.data, diabetes.target
- user: admin - password: sekrit
class CookieSessionTests(SessionTestsMixin, unittest.TestCase):
ret['comment'] = 'The state of "{0}" was changed!'.format(profile)
if not value.srid: try: value.srid = self.widget.map_srid except AttributeError: if self.srid: value.srid = self.srid return value
default=None
p = DataFrame({'first': [3, 4, 5, 8], 'second': [0, 0, 0, 3]})
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.'
self.courseware_page.click_previous_button_on_top() self.assert_navigation_state('Test Section 1', 'Test Subsection 1,2', 0, next_enabled=True, prev_enabled=True)
sample_weight = (sample_weight * compute_sample_weight(self.class_weight, y))
reg = 1E-3 * evals.sum(1)
self.assertEqual( self.run_function('xattr.read', [TEST_FILE, 'spongebob']), 'squarepants')
G_diag = G_diag[:, np.newaxis]
n_components = 100 n_features = 500
if n_local_trials is None: n_local_trials = 2 + int(np.log(n_clusters))
assert isinstance(num_steps, py_integer_types) assert num_steps > 0
if kwargs['using'] == MIGRATE_DATABASE: self.call_counter = self.call_counter + 1 self.call_args = kwargs self.signal.disconnect(self, sender=APP_CONFIG)
if (is_day and day_nanos % offset.nanos == 0) or not is_day: return _adjust_dates_anchored(first, last, offset, closed=closed, base=base)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'rackspace', vm_['profile'], vm_=vm_) is False: return False
err = SearchIndexingError mock_index_dictionary.return_value = err
mock_ip.return_value = 'IR'
with self.assertRaises(InvalidCacheBackendError): self.backend()
self.ptr = g
assert_series_equal(actual, expected)
log.debug("No module %s for user %s -- access denied?", usage_key, user) raise Http404
if esxi_hosts: if not isinstance(esxi_hosts, list): raise CommandExecutionError('\'esxi_hosts\' must be a list.')
index = 1 for child in subsection.get_children(): if child.location == unit.location: break index += 1
if (best_candidate is None) or (new_pot < best_pot): best_candidate = candidate_ids[trial] best_pot = new_pot best_dist_sq = new_dist_sq
response = other_view(request, '15') self.assertEqual(response.content, b'Hello World 15')
result = salt.utils.slack.query(function='message', api_key=api_key, method='POST', header_dict={'Content-Type': 'application/x-www-form-urlencoded'}, data=_urlencode(parameters), opts=__opts__)
from salttesting import skipIf, TestCase from salttesting.helpers import ( ensure_in_syspath, requires_network, TestsLoggingHandler ) ensure_in_syspath('../../')
if not want.startswith('<?xml'): wrapper = '<root>%s</root>' want = wrapper % want got = wrapper % got
shifted = self.tsframe.tshift(1) unshifted = shifted.tshift(-1)
cert_type=server type_ext=True
alt_text = self.BANNER_ALT_MESSAGES.get(status) if alt_text: self.assertContains(response, alt_text)
__virtualname__ = 'django'
rewritten_url = cdn_base_url.rstrip("/") + "/" + parsed.path.lstrip("/") validator = URLValidator()
ir = IsotonicRegression(increasing='auto', out_of_bounds="nan") ir.fit(x, y)
checks = (get_pending_update, get_pending_file_rename, get_pending_servermanager, get_pending_component_servicing, get_pending_computer_name, get_pending_domain_join)
return student_complex == instructor_complex
def f(): s[slice(-6.0, 6.0)]
raise ValueError( "%s doesn't support multi-label classification" % ( self.__class__.__name__))
report_comments = models.TextField(default="")
PER_REMOTE_ONLY = ('name',) SYMLINK_RECURSE_DEPTH = 100
CACHES = { 'default': { 'BACKEND': 'django.core.cache.backends.locmem.LocMemCache', } } CACHE_MIDDLEWARE_KEY_PREFIX = '' CACHE_MIDDLEWARE_SECONDS = 600 CACHE_MIDDLEWARE_ALIAS = 'default'
e._element.send_keys(Keys.ENTER)
import salt.pillar import salt.utils from salt.defaults import DEFAULT_TARGET_DELIM
('started', 'started'),
import salt.utils from salt.exceptions import CommandExecutionError, MinionError import salt.ext.six as six
y_pred, sigma = gp.predict(x, return_std=True)
super(AutoAuthEnabledTestCase, self).setUp() self.url = '/auto_auth' self.client = Client()
from pylearn2.utils import serial
expected[:] = np.nan assert_equal(corr_x_x, expected)
self.client.login(username=self.user.username, password='test')
course_tab_list += _get_dynamic_tabs(course, user) return course_tab_list
self.assert_numpy_array_equal(s.unique(), np.array([]), check_dtype=False) self.assertEqual(s.nunique(), 0)
rng1 = cdate_range('12/5/2011', '12/5/2011') rng2 = cdate_range('12/2/2011', '12/5/2011') rng2.offset = datetools.CDay()
'oauth2_provider',
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
from __future__ import absolute_import import os import random import string
import logging
from salt.states import ddns
image_dtype = numpy.dtype(image_dtype)
from django.db.models.manager import Manager manager = Manager.from_queryset(cls)() manager._built_with_as_manager = True return manager
html_title = 'Vbench performance benchmarks for pandas'
for param in sensitive_post_parameters: if param in cleansed: cleansed[param] = CLEANSED_SUBSTITUTE return cleansed
from salt.version import __version__ return {'saltversion': __version__}
import integration
attr = cls._translate(attr)
return
self.assertEqual(certificate_exception['user_email'], self.user.email) self.assertEqual(certificate_exception['user_name'], self.user.username)
alternate_course = self.create_course( org=md5(self.course.org).hexdigest() )
with self.assertRaisesMessage(TypeError, "'full_name' is an invalid keyword argument"): Person(full_name='Paul McCartney')
x_weights_sign_flip = pls_ca.x_weights_ / x_weights
kwargs['version'] = 'auto'
pass
X[0, 2] *= 2 assert_equal(X[0, 2], 5)
suitable_disks = [] query = vsan_system.QueryDisksForVsan() for item in query: if item.state == 'eligible': suitable_disks.append(item)
import cherrypy import salt.ext.six as six from salt.ext.six.moves import StringIO
field_errors = {}
import jinja2 def format_template(template, **kw): return jinja2.Template(template).render(**kw)
self.assertNotIn(self.module_key + '2', self.loader)
lines[grid_dimension[0]] = '==> ' + lines[grid_dimension[0]]
a = svm.SVC(C=1, kernel=lambda x, y: x * y.T, probability=True, random_state=0) b = base.clone(a)
connections_dict = {} for conn in connections.all(): connections_dict[id(conn)] = conn
homework_1_score = 1.0 / 2 homework_2_score = 0.0 self.check_grade_percent(round((homework_1_score + homework_2_score) / 2, 2))
if rolename == FORUM_ROLE_ADMINISTRATOR and not has_instructor_access: return HttpResponseBadRequest("Operation requires instructor access.")
try: import consul HAS_CONSUL = True except ImportError: HAS_CONSUL = False
create_polygon = GeomOutput('GEOSGeom_createPolygon', None) create_empty_polygon = GeomOutput('GEOSGeom_createEmptyPolygon', None) create_collection = GeomOutput('GEOSGeom_createCollection', None)
response = requests.delete(reset_config_url) self.assertEqual(response.status_code, 200)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
import logging
self.assertNotContains(response, 'value="test_value"') self.assertContains(response, 'value="overridden_value"')
if is_aware(value): raise ValueError( "make_aware expects a naive datetime, got %s" % value) return value.replace(tzinfo=timezone)
import salt.ext.six as six
tm._skip_if_no_scipy()
ar1 = np.asarray(ar1).ravel() ar2 = np.asarray(ar2).ravel()
s = self.series.copy() s['foobar'] = 1
if start_type == 2: win32service.ChangeServiceConfig2( handle_svc, win32service.SERVICE_CONFIG_DELAYED_AUTO_START_INFO, start_delayed)
(plaintext, err_from_stderr) = process.communicate( input=html_message.encode('utf-8') )
return arrow
if country not in cls.ALL_COUNTRIES: return True
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
url = endpoint + urlquote(user.username) response = openid_request.answer(True, None, url)
if not _latest_version == _version: _refresh_db = True
path %= { 'minion_id': minion_id, 'role': role }
OrderedObjectAdmin.ordering = ['bool'] check_results_order()
df.ix[timestamp] self.assertTrue(len(df.ix[[timestamp]]) > 0)
from __future__ import absolute_import import sys
from safe_lxml import defuse_xml_libs defuse_xml_libs()
from __future__ import absolute_import
import salt.utils
df = DataFrame([[0, 0]]) df.iloc[0] = np.nan expected = DataFrame([[np.nan, np.nan]]) assert_frame_equal(df, expected)
form = CFFForm(data={'f': None}) form.save()
return clean
if [ -z '$debian_chroot' ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
if has_expected: break
if source != '': source_path = __salt__['cp.get_url']( source, None, saltenv=__env__)
list(n_list) self.assertEqual(ExtraInfo.objects.filter(note__in=n_list)[0].info, 'good')
from __future__ import absolute_import
enrollment = CourseEnrollment.objects.get( user=user, course_id=source_key )
try: api.regenerate_user_certificates(params["user"], params["course_key"], course=course)
course = CourseFactory.create(display_name="Test Course")
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import copy import json import logging
module.done = True
precs_chol_diag = 1. / np.sqrt(covars_diag) log_prob = _estimate_log_gaussian_prob_diag(X, means, precs_chol_diag) assert_array_almost_equal(log_prob, log_prob_naive)
PIPELINE_DISABLE_WRAPPER = True
if coordinates: where = self.s.read_coordinates(where=self.where) else: where = self.where
c.value = 4 with self.assertRaises(ValueError): c.save(force_insert=True, force_update=True)
del sys.modules["versioneer"]
return parse(out)
if not user.is_authenticated(): return HttpResponseForbidden()
from __future__ import absolute_import import logging import socket import msgpack import weakref import time
from salt.modules import rh_ip import jinja2.exceptions import os
result = self.client.login(username=self.USERNAME, password=self.NEW_PASSWORD) self.assertTrue(result)
log = logging.getLogger(__name__)
context.render_context[self] = itertools_cycle(self.cyclevars)
field_type = OGRGeomType(row[2]).django
import integration
content = json.loads(response.content) parameters = content['parameters']
return self.values
old_STATIC_URL = TEST_SETTINGS['STATIC_URL'] TEST_SETTINGS['STATIC_URL'] = None cls.raises_exception('localhost:8081', ImproperlyConfigured) TEST_SETTINGS['STATIC_URL'] = old_STATIC_URL
my_pca_preprocessor.apply(training_set, can_fit = True) my_pca_preprocessor.apply(test_set, can_fit = False)
result = np.empty(values.shape, dtype='O') result.fill(np.nan) return result
for floats in [[1.1], np.array([1.1])]: with self.assertRaises(TypeError): pd.PeriodIndex._simple_new(floats, freq='M')
def test_linearsvx_loss_penalty_deprecations(): X, y = [[0.0], [1.0]], [0, 1]
df = df * 0 result = df.to_string() expected = (' 0\n' '0 0\n' '1 0\n' '2 -0')
self.assertEqual(my_doodad.num_calls, 0)
mdata[col] = np.asanyarray(frame.columns.get_level_values(i)).repeat(N)
yaml.add_multi_constructor('!obj:', multi_constructor_obj) yaml.add_multi_constructor('!pkl:', multi_constructor_pkl) yaml.add_multi_constructor('!import:', multi_constructor_import)
(error, msg) = self._send_to_queue(header, body, files_to_upload)
child_to_move_location = self.problem_x1a_1 new_parent_location = self.vertical_y1a old_parent_location = self.vertical_x1a
gecos_field = data.pw_gecos.split(',', 3) while len(gecos_field) < 4: gecos_field.append('')
if preserve_state \ and orig_state == 'stopped' \ and state(name) != 'stopped': stop(name)
path = os.path.expanduser(path)
version = IntegerField()
context['document_title'] = _("Invalid Certificate")
from django.test import TestCase
user_profile = UserProfile.objects.get(user=user) self.assertEqual(user_profile.name, "Robot Name")
si = _get_si()
n_samples, h, w = lfw_people.images.shape
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
Z = Z.reshape(xx.shape) plt.pcolormesh(xx, yy, Z, cmap=plt.cm.Paired)
restricted = Value42()
df = DataFrame([[1, 2], [3, 4]], columns=[u'\xe9', u'b']) df.to_sql('test_unicode', self.conn, index=False)
return False
self.assertTrue(CourseStructure.objects.filter(course_id=self.course.id).exists()) response = self.http_get_for_course() self.assertEqual(response.status_code, 200)
from __future__ import absolute_import from __future__ import print_function import sys import getopt import re import email.utils import datetime
self.assertIsNone(self.do_email_change(self.user, user1_new_email)) self.assertIsNone(self.do_email_change(user2, user2_new_email))
from __future__ import absolute_import import json import logging import os import yaml
formset = self.make_choiceformset() self.assertFalse(formset.is_valid()) self.assertFalse(formset.has_changed())
if not isinstance(version, string_types) and version is not None: version = str(version)
for y_pred in clf.staged_predict(X_test): assert_equal(y_test.shape, y_pred.shape)
from django.conf import settings
call = _get_user_defined_method(type(obj), '__call__', 'im_func') if call is not None: sig = signature(call)
for middleware_method in self._request_middleware: response = middleware_method(request) if response: break
import logging
import salt.ext.six as six
self.inputs = {}
security_descriptor = win32security.GetFileSecurity( path, win32security.OWNER_SECURITY_INFORMATION) owner_sid = security_descriptor.GetSecurityDescriptorOwner()
filters = {'course_id': course_key, 'user': request.user} if uri != '': filters['uri'] = uri
'ENABLE_DASHBOARD_SEARCH': False,
with self.assertRaises(ValueError): self.runtime.service(self.mock_block, 'user_tags').set_tag('fake_scope', self.key, set_value)
with self.assertNumQueries(4): self.client.get('/dates/books/2008/reverse/')
self.assertRaises(ValueError, Progress, 0, 0) self.assertRaises(ValueError, Progress, 2, 0) self.assertRaises(ValueError, Progress, 1, -2)
mock_model_log_exception.assert_called_once_with( 'Error sending API user notification email for request [%s].', self.api_access_request.id ) self.assertIsNotNone(self.api_access_request.id)
result = df.iloc[0:8, :].append(df.iloc[8:]) assert_frame_equal(result, df)
store.put('c', df[:10], format='table', append=False) tm.assert_frame_equal(df[:10], store['c'])
kde = KernelDensity(bandwidth, kernel=kernel).fit(X) samp = kde.sample(100) assert_equal(X.shape, samp.shape)
if take_split_path:
aside2 = AsideBar(scope_ids=ScopeIds('user', block_type2, def_id, usage_id), runtime=self.runtime) aside2.field21 = 'new_value21'
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
loader.build_graph() self.assertEqual(num_nodes(), 5)
else: ret = _load_result(existing, ret)
X, y = iris.data, iris.target y[y == 2] = 1
try: import salt.cloud HAS_SALTCLOUD = True except ImportError: HAS_SALTCLOUD = False
data['l2'] = data['l2']['ItemB'] self.assertRaises(Exception, Panel4D, data)
act_enc = activation_funcs[i + 1] act_dec = act_enc if i != 0 else activation_funcs[0] aes.append( Autoencoder(layer_sizes[i], layer_sizes[i + 1], act_enc, act_dec, tied_weights=tied) )
import logging
with self._mock_geoip('US'): result = embargo_api.check_course_access(self.course.id, user=self.user, ip_address='0.0.0.0')
RequestCache.clear_request_cache()
with self.assertRaises(forms.ValidationError): f.clean('21.12.2010')
with tm.assertRaisesRegexp( IndexError, 'single positional indexer is out-of-bounds'): df.iloc[30] self.assertRaises(IndexError, lambda: df.iloc[-30])
s = pd.Series(['a', 'b', 'c', 'd'], dtype='category')
return [self.forms[i[0]] for i in self._ordering]
from __future__ import absolute_import import os import logging import pwd import shutil
clf = svm.SVC().fit(X, Y) assert_raises(ValueError, clf.predict, sparse.lil_matrix(X))
keyfile = os.path.join( opts['cachedir'], '.{0}_key'.format(user.replace('\\', '_')) )
return self.flatten() == other.flatten()
ret = __salt__['cmd.run_all'](cmd, runas=user, python_shell=False) if ret['retcode'] != 0: return ret
dd_intercept = np.squeeze(np.array(dX.sum(axis=0)))
def setup(app): setup.app = app
cls.team_commentable_id = "team_discussion_id" cls.team = CourseTeamFactory.create( name=u'The Only Team', course_id=cls.course.id, topic_id='topic_id', discussion_topic_id=cls.team_commentable_id )
role = CourseCcxCoachRole(course_key) self.assertTrue(role.has_user(self.coach))
import integration import salt.utils
django_settings.SOCIAL_AUTH_STRATEGY = 'third_party_auth.strategy.ConfigurationModelStrategy'
import salt.utils import salt.utils.decorators as decorators import salt.utils.network import salt.utils.validate.net from salt.exceptions import CommandExecutionError
with tm.assertRaises(UndefinedVariableError): df.query('df > 0', engine=self.engine, parser=self.parser)
import salt.ext.six as six
estimator = _make_estimators(X_train, y_train, y_ml_train)
for handler in handlers: result = handler.handle_raw_input(self._input_data, self._meta, self._content_length, self._boundary, encoding) if result is not None: return result[0], result[1]
from __future__ import division
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
'CUSTOM_COURSES_EDX': False,
tasks = instructor_task.api.get_running_instructor_tasks(course_id)
course = def_ms.courses.get(course_path, None)
self.assertEqual(self.selenium.find_element_by_id('id_main_band').get_attribute('value'), '')
new_message = ', '.join(str(arg) for arg in new_exc.args)
ns_resolver = RegexURLResolver(ns_pattern, resolver.url_patterns) return RegexURLResolver(r'^/', [ns_resolver])
text = f.widget.format_value(result) self.assertEqual(text, "01:30:05 PM 21/12/2010")
lm = LayerMapping(CountyFeat, co_shp, cofeat_mapping, transform=False) lm.save(silent=True, strict=True)
self.bulk.insert_course_index(self.course_key, self.index_entry) self.assertConnCalls(call.insert_course_index(self.index_entry, self.course_key)) self.assertCacheNotCleared()
tfp.add(base, arcname=os.path.join('py{0}'.format(py_ver), base)) continue
from __future__ import absolute_import
multi_db = True
from __future__ import unicode_literals
h_rows, h_cols = self.h_space.shape num_h = float(h_rows * h_cols) rval[self.transformer._filters] = 1. /num_h rval[self.b] = 1. / num_h
PUSH_REMOTE_NAME = os.environ.get("PUSH_REMOTE_NAME", "upstream")
auto_created = False
return self.get_static_transcript(request, transcripts)
X = X_2d n = X.shape[0]
log = logging.getLogger(__name__)
if not all_exists: all_exists = (j > 0) break images.append(img)
add_user_with_status_granted(self.admin, self.admin) self.assertIsNone(get_course_creator_status(self.admin))
import logging import json
import os import time import fnmatch import hashlib import logging import datetime from collections import MutableMapping from multiprocessing.util import Finalize
import salt.utils import salt.utils.odict as odict
ioloop.install()
import salt.utils
self.assertIsNone(xblock_info.get('is_header_visible', None))
self.teams_page.click_all_topics() self.verify_my_team_count(0)
handle_scm = win32service.OpenSCManager( None, None, win32service.SC_MANAGER_ALL_ACCESS)
with tm.assert_produces_warning( expected_warning=IncompatibilityWarning): self.assertRaises( Exception, store.select, 'wp1', Term('minor_axis=B'))
means = np.array([[0, 0, -1], [0, 2, 0], [0, -2, 0], [0, 0, 5]])
the_int = rng[:10].intersection(rng[10:]) expected = DatetimeIndex([]) self.assert_index_equal(the_int, expected)
self.assertIn(REG_STR, resp.content)
self.client.force_login(self.u1)
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
df = DataFrame(data=np.random.randn(100, 50))
from cms.djangoapps.contentstore.courseware_index import CourseAboutSearchIndexer CourseAboutSearchIndexer.remove_deleted_items(course_key)
iris = datasets.load_iris()
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
created = models.DateTimeField(db_index=True) state = models.TextField(null=True, blank=True) grade = models.FloatField(null=True, blank=True) max_grade = models.FloatField(null=True, blank=True)
class BadRequestMiddleware(TestMiddleware): def process_request(self, request): super(BadRequestMiddleware, self).process_request(request) raise TestException('Test Request Exception')
comps = member.path.split('/') if len(comps) > 1 and comps[0] == comps[1]: member.path = '/'.join(comps[1:])
send_admin_notification = Signal(providing_args=["user"])
timeout = -1
w = rng.randn(num_features)
if not include.isdisjoint(exclude): raise ValueError('include and exclude overlap on %s' % (include & exclude))
name = self.env.add_tmp(np.float32(right.value)) right = self.term_type(name, self.env)
self.assertRaises(ValueError, sql.to_sql, frame=df_if_exists_1, con=self.conn, name=table_name, flavor='mysql', if_exists='notvalidvalue') clean_up(table_name)
ret = self.run_function('shadow.info', [TEST_USER]) self.assertEqual(ret['name'], TEST_USER)
student = UserFactory.create() CourseEnrollmentFactory.create( user=student, course_id=SlashSeparatedCourseKey.from_deprecated_string(self.course_name) ) self.client.login(username=student.username, password="test")
rm_known_host(user, hostname, config=config)
__func_alias__ = { 'list_nictags': 'list' }
current_network_settings = _parse_current_network_settings()
result = self.frame.ix[:4] expected = self.frame[:4] assert_frame_equal(result, expected)
rendered = "0.post%d" % pieces["distance"] if pieces["dirty"]: rendered += ".dev0" rendered += "+g%s" % pieces["short"]
rng = self.mlp.rng if self.irange is None: raise ValueError("Recurrent layer requires an irange value in " "order to initialize its weight matrices")
from __future__ import absolute_import import logging
query = 'CREATE DATABASE "{0}"'.format(name)
import logging import sys import glob import yaml import jinja2 import re from os.path import isfile, join
big_honeycomb = models.Honeycomb.objects.create(location='Old tree') big_honeycomb.bee_set.create() rel = models.Bee._meta.get_field('honeycomb').remote_field
CourseModeFactory.create(course_id=self.COURSE_KEY, mode_slug='honor') CourseModeFactory.create(course_id=self.COURSE_KEY, mode_slug='verified')
self.fit(X) return self.labels_
scaling = 0.3 coef_grid, scores_path = lasso_stability_path(X, y, scaling=scaling, random_state=42, n_resampling=30)
#html_show_sourcelink = True
image = ':'.join(_get_repo_tag(name)) all_tags = __salt__['dockerng.list_tags']()
if not given: return False
from salt.modules import win_shadow import salt.utils
group_vpc = conn.create_security_group(name=group_name, description=group_description, vpc_id=vpc_id) retrieved_group_id = boto_secgroup.get_group_id(group_name, **conn_parameters) self.assertEqual(group_classic.id, retrieved_group_id)
csmh = BaseStudentModuleHistory.get_history(student_module) self.assertEqual(len(csmh), 3)
EDX_PLATFORM_REVISION = dealer.git.Backend(path=REPO_ROOT).revision
self.factory(penalty='foobar', l1_ratio=0.85)
return SPF(sections[1][9:], 'SPF', nameserver)
pro = Book.objects.create(title="Pro Django", published=datetime.date(2008, 12, 16))
'MILESTONES_APP': False,
from __future__ import unicode_literals
for i, clf in enumerate((kernel_svm, nystroem_approx_svm, fourier_approx_svm)): plt.subplot(1, 3, i + 1) Z = clf.predict(flat_grid)
import salt.utils
xx = np.dot(x.values.T, x.values) xt = x.sum(level=0).values
self.assertNotIn('proctoring', section_actual)
break
message = msg_format.format( action=action_name, succeeded=num_succeeded, attempted=num_attempted, total=num_total, skipped=num_skipped, student=student ) return (succeeded, message)
ports = list(map(int, str(ports).split(',')))
self.assertEqual(getattr(obj, op)(), datetime(2011, 11, 1))
rs = self.ts.diff(-1) xp = self.ts - self.ts.shift(-1) assert_series_equal(rs, xp)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'opennebula', vm_['profile']) is False: return False
reset_sequences = False
self._collection.clear() self._uri_cache.clear()
self.assertRaises(parser.CParserError, TextReader, StringIO(data), delimiter=',', header=5, as_recarray=True)
sampling_algorithm["custom-tracking-selection"] = \ lambda n_population, n_samples, random_state=None: \ sample_without_replacement(n_population, n_samples, method="tracking_selection", random_state=random_state)
self.assertRaises(ValueError, self.read_csv, StringIO(data), header=[0, 1, 2, 3], index_col=[0, 1], names=['foo', 'bar'], tupleize_cols=False)
engine = import_module(settings.SESSION_ENGINE) session = engine.SessionStore() session[LANGUAGE_SESSION_KEY] = 'pl' session.save() self.client.cookies[settings.SESSION_COOKIE_NAME] = session.session_key
self.assertTrue(inspect.isfunction(self.loader[self.module_key]))
KEY_CSRF_TOKENS = ('csrf_token', 'csrf') for key in KEY_CSRF_TOKENS: if key in context_dictionary: context_dictionary[key] = unicode(context_dictionary[key])
limit = 50000
def __setstate__(self, state): self._is_child = True self.__init__(state['opts'], log_queue=state['log_queue'])
from __future__ import absolute_import
self.assertAlmostEqual(self.ts[:15].corr(self.ts[5:]), 1)
problem = self.build_problem(answer=script)
import salt.utils
return key.field_name in self._fields
self.page.visit() config = self.page.experiment_group_configurations[0]
create_result = __salt__['dockerng.create']( image, name=name, validate_ip_addrs=False, validate_input=False, client_timeout=client_timeout, **create_kwargs )
ret = {} for node in items['servers']: ret[node['name']] = {} for item in node: value = node[item] ret[node['name']][item] = value return ret
local_addr = ''.join(x for x in local_addr if x not in '[]')
return False
assert_equal(var_x, cov_x_x)
import json from functools import partial import factory from factory.django import DjangoModelFactory
ms = MeanShift(bandwidth=1.2) labels = ms.fit_predict(X) labels2 = ms.predict(X) assert_array_equal(labels, labels2)
if _mpl_le_2_0_0(): self.scaled[1. / SEC_PER_DAY] = '%H:%M:%S' self.scaled[1. / MUSEC_PER_DAY] = '%H:%M:%S.%f'
from __future__ import absolute_import
assert_true(X_scaled is X)
df.loc[(0, 0), 'z'] = 2 result = df.loc[(0, 0), 'z'] self.assertEqual(result, 2)
if not statefiles: statefiles = [sls_match]
with transaction.atomic(): objs = serializers.deserialize(self.serializer_name, self.fwd_ref_str) with connection.constraint_checks_disabled(): for obj in objs: obj.save()
self.points = self.latlng_from_coords(poly.shell.coords)
'minion_id_caching': bool,
return []
DEFAULT_USER_MESSAGE = ugettext_noop(u'An error has occurred. Please try again.')
arr = Index([1, 2, 3, 4]) tm.assertIsInstance(arr, Int64Index)
objs = tuple(objs)
from __future__ import unicode_literals
fields: - field_1 - field_2
'pillar_roots': dict,
return False
func.restype = c_int
updates_by_type = {} for asset_type, assets in assets_by_type.iteritems(): updates_by_type[self._make_mongo_asset_key(asset_type)] = assets.as_list()
clf = QuadraticDiscriminantAnalysis(reg_param=0.01) with ignore_warnings(): clf.fit(X2, y6) y_pred = clf.predict(X2) assert_array_equal(y_pred, y6)
self.process_manager.add_process(self.run_reqserver, kwargs=kwargs, name='ReqServer')
import logging
assert V is orig_V assert drop_mask is orig_drop_mask
grade_distrib = get_problem_set_grade_distrib(course_id, problem_set)
overlay_info = [[GMarker, markers, 'markers'], [GPolygon, polygons, 'polygons'], [GPolyline, polylines, 'polylines']]
class SyslogNGTestCase(TestCase): def test_generate_source_config(self): self._config_generator_template(SOURCE_1_CONFIG, SOURCE_1_EXPECTED)
class ArticleForm(forms.ModelForm): class Meta: model = Article fields = '__all__'
messages = [
import salt.ext.six as six
stack.extendleft(children)
rem_vers = kwargs.pop('remove_version', True) rem_branch = kwargs.pop('remove_branch', True)
'cache_toolbox.middleware.CacheBackedAuthenticationMiddleware', 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
from __future__ import absolute_import import multiprocessing import logging
email_feature_dict['email'] = email_info
validate_args(self.fname, (None,), 2, dict(out=None))
if N == 0: return
self.assertEqual(ax.collections[0].cmap.name, 'Greys')
empty = Series() self.assertIsNone(empty.last_valid_index()) self.assertIsNone(empty.first_valid_index())
from pylearn2.utils import serial from pylearn2.utils.logger import ( CustomStreamHandler, CustomFormatter, restore_defaults )
self.check_level_names(view, level_names) self.check_level_names(copy, level_names) self.check_level_names(shallow_copy, level_names)
start_index = start_index + len(start_delim)
key = 'a' * length
from __future__ import unicode_literals
for status in statuses: if reverifications[status]: reverifications[status].sort(key=lambda x: x.date) return reverifications
'course', 'org', 'url_name', 'filename', 'xml_attributes')
for course_mode in CourseMode.objects.filter(course_id=self.course.id): course_mode.sku = None course_mode.save()
if '.' in val: val = float(val) else: val = int(val) data[plugin][key] = val
import salt.utils from salt.exceptions import CommandExecutionError
import logging
self.assertTrue(has_horizontally_truncated_repr(df))
NOTIFICATION_EMAIL_CSS = "templates/credit_notifications/credit_notification.css" NOTIFICATION_EMAIL_EDX_LOGO = "templates/credit_notifications/edx-logo-header.png"
X = check_array(X, ensure_min_features=2, ensure_min_samples=2, estimator=self)
return _git_run(command, cwd=cwd, runas=user, ignore_retcode=ignore_retcode, redirect_stderr=True)['stdout']
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
import pandas.util.testing from pandas.util.nosetester import NoseTester test = NoseTester().test del NoseTester
class SchoolManager(models.Manager): def get_queryset(self): return super(SchoolManager, self).get_queryset().filter(is_public=True)
result = f.clean('12/21/2010') self.assertEqual(result, date(2010, 12, 21))
dest_usage_key = source_item.location.replace(name=uuid4().hex) category = dest_usage_key.block_type
dtype = _get_dtype(arr_or_dtype) return dtype.kind in ('S', 'U')
from __future__ import unicode_literals
n_samples = 500
self.get_select_option(to_box, str(self.jason.id)).click() self.get_select_option(to_box, str(self.john.id)).click()
offset = QuarterEnd(n=-1, startingMonth=1) self.assertEqual(datetime(2010, 2, 1) + offset, datetime(2010, 1, 31))
transaction.rollback() transaction.set_autocommit(True)
stamp = Timestamp('3/10/2012 22:00', tz=self.tz('US/Eastern'))
try:
try: os.remove(trans_tar) except (OSError, IOError): pass
from __future__ import absolute_import
assert_warns(UserWarning, BaggingClassifier(base_estimator=base_estimator, n_estimators=1, bootstrap=True, oob_score=True, random_state=rng).fit, X_train, y_train)
if emit_signals and bulk_ops_record.is_root: self.send_pre_publish_signal(bulk_ops_record, structure_key)
import nose
raise SyntaxError('encoding problem: utf-8')
snap_ids = _find_guids(info)
resp_head['Access-Control-Allow-Origin'] = req_head.get('Origin', '*') resp_head['Access-Control-Expose-Headers'] = 'GET, POST' resp_head['Access-Control-Allow-Credentials'] = 'true'
asset_md = store.get_all_asset_metadata(course.id, 'asset') self.assertEquals(asset_md, [])
dr = date_range(datetime(2011, 3, 13), periods=48, freq=datetools.Minute(30), tz=pytz.utc)
timedelta64_instance = np.timedelta64(1, 'D') self.assertEqual( type(timestamp_instance + timedelta64_instance), Timestamp) self.assertEqual( type(timestamp_instance - timedelta64_instance), Timestamp)
assert V is orig_V assert drop_mask is orig_drop_mask
DEFAULT_DATETIME_STR = datetime.datetime(year=2014, month=12, day=1).isoformat(' ')
s_2 = -0.5 * (np.diag(K) - np.einsum('ij, ij -> j', C, C)) \
self.courseware_page.a11y_audit.config.set_scope( include=['div.sequence-nav']) self.courseware_page.a11y_audit.check_for_accessibility_errors()
self._create_a_timed_exam_and_attempt()
self.assertFalse( makeFY5253LastOfMonthQuarter( 1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1) .year_has_extra_week(datetime(2010, 12, 25)))
rs = df.iloc[[0, 1]] xp = df.xs(4, drop_level=False) assert_frame_equal(rs, xp)
import salt.utils.boto3 import salt.utils.compat import salt.utils from salt.ext.six import string_types
self.estimators_[i, k] = tree
import re import logging
target_mod = module + '.' if not module.endswith('.') else module
self.assertEqual( len(CourseEnrollment.objects.filter(mode='honor', user_id__in=user_ids)), expected_conversions )
from __future__ import absolute_import
#pylint: disable=E0602
if self.base > 0: labels += type(self.freq)(self.base)
block_type = 'vertical' for idx in xrange(0, 8): block_id = _make_block_id(block_type, idx) self.all_verticals.append((block_type, block_id))
raise GitLockError( exc.errno, 'Checkout lock exists for {0} remote \'{1}\'' .format(self.role, self.id) )
bootstrap=bootstrap, bootstrap_features=False, n_estimators=n_estimators, max_samples=max_samples, max_features=max_features, n_jobs=n_jobs, random_state=random_state, verbose=verbose)
self.DEFAULT_TIMEOUT = caches[DEFAULT_CACHE_ALIAS].default_timeout
handler = WatchedFileHandler(log_path, mode='a', encoding='utf-8', delay=0)
self.assertEqual(mail.outbox[-1].to[0], 'finance@example.com')
patched_create_thumbnail.assert_called()
import logging
self.assertEquals(serializer.data['root'], unicode(self.block_structure.root_block_usage_key))
raise NotImplementedError()
components = sp.csr_matrix((data, indices, indptr), shape=(n_components, n_features))
tm.set_testing_mode()
n, p = 10, 5 rng = np.random.RandomState(0)
self.assertEqual(3, Book.objects.count())
user_partition_id = self.user_partition.id groups = self.user_partition.groups self.user_partition.scheme.current_group = groups[0]
image_shape = (64, 64)
self.assertIs(form['name'], name)
self.hashed_files = _MappingCache(default_cache)
if hasattr(middleware, 'process_response'): def callback(response): return middleware.process_response(request, response) response.add_post_render_callback(callback)
target_versionfile = os.path.join(base_dir, cfg.versionfile_source) print("UPDATING %s" % target_versionfile) write_to_version_file(target_versionfile, self._versioneer_generated_versions)
self.good_dir = self.create_course_xml(self.content_dir, self.base_course_key)
return self.filter_function(name, **flags)
ax = _check_plot_works(series.plot.pie, labels=None) self._check_text_labels(ax.texts, [''] * 5)
manager.public_method() with self.assertRaises(AttributeError): manager._private_method()
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
return {'master': __opts__.get('master', '')}
self._assert_courses_in_overview(self.course_key_1, self.course_key_2)
response = default_view(request, '2') self.assertEqual(response.content, b'Hello World 1')
result = force_text(message)
self.masterapi._minion_event(load) self._handle_minion_event(load)
custom_parameters = {}
with self.assertRaises(DatabaseError): asos.save(force_update=True) with self.assertRaises(DatabaseError): asos.save(update_fields=['pub_date'])
xt = xt[selector] count = count[selector]
def __init__(self, *args, **kwargs): super(Photo, self).__init__(*args, **kwargs) self._savecount = 0
mock_response.status_code = 200 mock_post.return_value = mock_response
self.setup_cohorts(self.course)
new_mean_squared_grad = (self.decay * mean_square_grad + (1 - self.decay) * T.sqr(grads[param]))
self.X -= union.mean(axis=0, dtype='float64') std = union.std(axis=0, dtype='float64') std[std < 1e-3] = 1e-3 self.X /= std
ip_num = ET.SubElement(content, 'no-of-public-ip') ip_num.text = config.get_cloud_config_value( 'ip_num', vm_, __opts__, default='1', search_global=False )
assert key.user_id == self.user.id
salt.utils.reinit_crypto() os.close(stdout_child_fd) os.close(stderr_child_fd)
recons_data = DataFrame(test_data).to_dict("i")
import salt.utils
LOGGING_CONFIG = 'logging.config.dictConfig'
tasks.update_course_structure.delay(unicode(course_key)) raise CourseStructureNotAvailableError
def get_readonly_fields(self, request, obj=None):
return np.memmap(filename, dtype=dtype, shape=shape, mode=mode, offset=offset, order=order)
from salt.states import eselect
vm_['host'] = config.get_cloud_config_value( 'default_host', get_configured_provider(), __opts__, search_global=False )
else:
linkcode_resolve = make_linkcode_resolve('sklearn', u'https://github.com/scikit-learn/' 'scikit-learn/blob/{revision}/' '{package}/{path}#L{lineno}')
G_iso = neighbors.kneighbors_graph(clf.embedding_, n_neighbors, mode='distance').toarray()
if serialized_block['type'] == 'html': self.assertIn('student_view_multi_device', serialized_block) self.assertTrue(serialized_block['student_view_multi_device'])
assert_raises(AssertionError, assert_raise_message, (ValueError, AttributeError), "test", _no_raise)
self.verify_end_date("edX/test_about_blob_end_date/2012_Fall", "Learning never ends")
self.tab_nav.mathjax_has_rendered()
raise PermissionDenied()
"Test for Annotation Xmodule functional logic."
task_folder = task_service.GetFolder(location) task = task_folder.GetTask(name)
CourseEnrollment.unenroll(self.user, self.courses[0].id, skip_refund=True)
email_body_plain = render_to_string('credit_notifications/credit_eligibility_email.txt', context) msg_alternative.attach(SafeMIMEText(email_body_plain, _subtype='plain', _charset='utf-8'))
objects = CourseActionStateManager()
_check_config_exists()
connection.close()
bandheader = pack(structure, (pixeltype, band.nodata_value or 0))
self.theta0, self.thetaL, self.thetaU = theta0, thetaL, thetaU self.corr = corr self.optimizer = 'Welch' self.verbose = verbose
GeneratedCertificateFactory( user=self.bob, course_id=self.alternate_course_id, mode=MODES.verified, status=failing_status, )
self.opts['beacons'][name]['enabled'] = enabled_value
if self._syndics[master].done():
self.assertEqual(df.iloc[1][1], 'Harry Carney')
self.assertRaises(TypeError, lambda: Index(0, 1000))
CountryAccessRule.invalidate_cache_for_course(restricted_course.course_key)
'log_file': str,
extend(state('.start').stateconf.require(stateconf='xxx::goal'))
expected_repr = '2013-05-01 07:15:45.123456789' expected_value = 1367392545123456789 self.assertEqual(ts.value, expected_value) self.assertIn(expected_repr, repr(ts))
priority = 0.5
ret = ret[self.quoteCharLen:-self.endQuoteCharLen]
scores = cross_val_score(clf, X_sparse, multioutput_y) assert_array_equal(scores, clf.score(X_sparse, multioutput_y))
if not encoding or 'ascii' in encoding.lower(): encoding = sys.getdefaultencoding()
axes = self.input_space.axes assert len(axes) == 4
self.assertEqual(len(mail.outbox), 0)
y[::5] += 1 * (0.5 - np.random.rand(8))
test_many_zeroes = expectedFailure(test_many_zeroes)
pylint_pattern = re.compile(r".(\d+):\ \[(\D\d+.+\]).")
course = self.store.get_course(course_id) self.assertGreater(len(course.textbooks), 0)
lang = node['language'] highlight_args['force'] = True
SplitModuleTest.modulestore = None
import sklearn version = sklearn.__version__ release = sklearn.__version__
def f(): r.F = 'bah'
self.apps = self.default_apps
from salt.modules import zypper
rstfile = tempfile.NamedTemporaryFile(suffix='.tif')
('geography', ('GeometryField', {'geography': True})),
num_bytes_read = 0 num_post_keys = 0 read_size = None
for element in t.nodes[:-1]: self._dispatch(element) self._write(", ")
Ensure myelb ELB exists: boto_elb.present: - name: myelb - region: us-east-1 - profile: myelbprofile
definition = LicenseMixin.parse_license_from_xml(definition, xml_object)
from __future__ import absolute_import import os import threading import platform import time
if com.is_numeric_v_string_like(arr, x): mask |= False else: mask |= arr == x
user.is_staff = True
pairwise = True if pairwise is None else pairwise
assert_equals(len(base64.urlsafe_b64encode(encrypted_aes_key)), 344)
response = self.client.post(url, { 'unique_student_identifier': self.student.email, })
result = f.clean('12.21.2010') self.assertEqual(result, date(2010, 12, 21))
df = DataFrame(np.random.randn(4, 3)) df2 = DataFrame(np.random.randn(4, 4))
State.objects.create(name='Puerto Rico')
api.set_credit_requirement_status(username, self.course_key, "grade", "grade", status="failed") self.assert_grade_requirement_status('failed', 0)
for n in range(col.nlevels - 1): arrays.append(col.get_level_values(n))
rnd = np.random.RandomState(0) X = rnd.uniform(size=(10, 4))
Y = Y.astype(np.float64) if sample_weight is not None: sample_weight = np.atleast_2d(sample_weight) Y *= check_array(sample_weight).T
config.delete() self.assertEqual(len(self.group_configurations_page.content_groups), 0)
'openedx.core.djangoapps.programs',
if check_dtypes: self.assertTrue((rs.dtypes == df.dtypes).all())
Business.objects.create(name='jaźń')
df = DataFrame({'col1': [1], 'col2': ['a'], 'col3': [10.1]})
result = store.select('df', where=where) tm.assert_frame_equal(result, expected)
self.assertTrue(pkg_targets) version = self.run_function('pkg.version', pkg_targets)
flags = [('Name', name)]
s1 = Series([1, 2, 3], index=['a', 'b', 'c'], name='x')
i2 = PeriodIndex([end_intv, Period('2005-05-05', 'B')]) self.assertEqual(len(i2), 2) self.assertEqual(i2[0], end_intv)
from salt.modules import gentoo_service
continue
as_stolen_buf = move_into_mutable_buffer(b[:-3])
ranges = world.css_find(range_css) assert_equal(len(ranges), 2) assert_not_equal(ranges.last.value, 'Failure')
r'\[([A-f0-9:\.]+)\]\Z', re.IGNORECASE)
if clear is True: cmd.append('--clear') if system_site_packages is True: cmd.append('--system-site-packages')
import integration import salt.config from salt.state import HighState from salt.utils.odict import OrderedDict, DefaultOrderedDict
user = User.objects.get(email=self.enrolled_student.email) self.assertFalse(CourseEnrollment.is_enrolled(user, self.course.id))
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1)
self.assertTrue(hasattr(user, 'profile'))
for param, value in params.items(): self.assertIn(param, allowed_params) self.assertIn('{}={}'.format(param, value[0]), expected)
'course_modes',
if rerandomize == RANDOMIZATION.NEVER: self.assertEqual(seed, 1, msg="Seed should always be 1 when rerandomize='%s'" % rerandomize)
empty_asset_trashcan([self.course.id])
from __future__ import unicode_literals
time_tuple = (years, months, days, hours, minutes, seconds, 0)
inactive_children = [child for child in children if child not in active_children]
import salt.utils from salt.exceptions import CommandExecutionError, CommandNotFoundError
if ( transcripts_presence['youtube_diff'] and transcripts_presence['youtube_local'] and
self.assertEqual(form.initial['password'], form['password'].value())
self.submit_question_answer('p1', {'2_1': 'Incorrect'})
for problem in problem_set: stack_data = []
self.loc[label] = value return self
if not self._is_numeric_dtype: raise TypeError("cannot evaluate a numeric op {opstr} " "for type: {typ}".format( opstr=opstr, typ=type(self)) )
def test_explicit_ForeignKey(self): Package.objects.create() screening = Screening.objects.create(movie=self.movie) Package.objects.create(screening=screening)
try:
import json try: import syslog HAS_SYSLOG = True except ImportError: HAS_SYSLOG = False
from __future__ import unicode_literals
return " "
level += 1 env = _ensure_scope(level, global_dict=global_dict, local_dict=local_dict, resolvers=resolvers, target=target)
roll = np.where(base_period.to_timestamp(how='end') == i - off, self.n, self.n - 1)
s = X.shape if len(s) > 1: return tuple(tuplify(row) for row in X) else: return tuple(r for r in X)
import salt.utils.reactor
'syndic_wait': int,
if tblib is None: err = err[0], err[1], None self.check_picklable(test, err) self.events.append(('addExpectedFailure', self.test_index, err))
for mode, min_price in course_modes: CourseModeFactory.create(mode_slug=mode, course_id=self.course.id, min_price=min_price)
Article.objects.filter(pk=a.pk).delete()
from salt.modules import rabbitmq from salt.exceptions import CommandExecutionError
salt.utils.gitfs.GitPillar(new_opts)
return _extend_blocks([b.convert(datetime=True, numeric=False) for b in blocks])
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course_key))
ret = self.run_function( 'state.sls', mods='testappend.issue-2227' ) self.assertSaltTrueReturn(ret)
_repack_pkgs = _namespaced_function(_repack_pkgs, globals())
pred2 = svm.libsvm.cross_validation(iris.data, iris.target.astype(np.float64), 5, kernel='linear', random_seed=0) assert_array_equal(pred, pred2)
res = df.loc[lambda x: x.A > 2] tm.assert_frame_equal(res, df.loc[df.A > 2])
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch from salttesting.helpers import ensure_in_syspath
from tokenize import open as open_py_source
ret.update({esxi_host: _format_syslog_config(response)})
if self.opts['order_masters']: payload_kwargs['to'] = timeout
config.toggle()
HAS_LIBS = False try: import salt.ext.six as six HAS_LIBS = True except ImportError: try: import six HAS_LIBS = True except ImportError: pass
for key, val in six.iteritems(self.loader._dict): self.assertEqual(key.split('.', 1)[0], 'test')
for course_overview in [course_overview_cache_miss, course_overview_cache_hit]: course_overview_tabs = course_overview.tabs.all() course_resp_tabs = {tab.tab_id for tab in course_overview_tabs} self.assertEqual(self.COURSE_OVERVIEW_TABS, course_resp_tabs)
attempt = self.create_and_submit() assert_equals(attempt.status, "submitted")
return json.dumps({})
module = CapaFactory.create(attempts=0, done=True)
cleansed['func_args'] = CLEANSED_SUBSTITUTE cleansed['func_kwargs'] = CLEANSED_SUBSTITUTE
self.assertQuerysetEqual(X.objects.all(), []) self.assertQuerysetEqual(X.objects.select_related(), [])
course = get_dummy_course('2012-12-02T12:00') self.assertEqual('', course.end_datetime_text("DATE_TIME"))
stored_file_name = file_storage.save(stored_file_name, uploaded_file)
import salt.utils
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.approve()
if __grains__['os'] in ['MacOS', 'Darwin'] and config == '/etc/fstab': config = "/etc/auto_salt"
return _error(ret, u_check)
values = Series([u('fooBAD__barBAD'), NA, u('foo')])
bokchoy_utils.clear_mongo() self.cache.flush_all()
course = ItemFactory.create( parent_location=self.course.location, category="course", display_name="Test course", )
result = df.loc['2016-01-01'] expected = df.iloc[0:6] tm.assert_frame_equal(result, expected)
pythoncom.CoInitialize()
target = [-1] * len(JUNK_FOOD_DOCS) + [1] * len(NOTJUNK_FOOD_DOCS)
import salt.utils
del results[-1] max_exceeded = True
enable_sigusr1_handler()
ApiResponse = collections.namedtuple('ApiResponse', ['http_response', 'data'])
from salt.states import virt import salt.utils
from edxval.api import copy_course_videos
import salt.utils from salt.modules import file as filemod from salt.modules import config as configmod from salt.modules import cmdmod from salt.exceptions import CommandExecutionError
draft_preferred = 'rev-opt-draft-preferred'
self.assertTrue(not "\t" in pp_t("a\tb", escape_chars=("\t", )))
self.assertIs(model_a_old._meta.get_field('b').related_model, model_b_old) self.assertIs(model_b_old._meta.get_field('a_ptr').related_model, model_a_old)
ret = {'name': name, 'result': False, 'comment': '', 'changes': {},
CertificateGenerationConfiguration.objects.create(enabled=True)
output = self._run_command(self.TEST_ORG, query_interval=4)
PAYMENT_STATUS_RESPONSE = "success"
elif existing['code'] == 404:
assert_raises(ValueError, _inverse_binarize_thresholding, y=csr_matrix([[1, 2], [2, 1]]), output_type="foo", classes=[1, 2, 3], threshold=0)
n_samples = 100 x = np.random.uniform(size=n_samples) > 0.5
mako_middleware_process_request(request) response = views.course_about(request, unicode(course.id)) self.assertEqual(response.status_code, 200) self.assertNotIn(in_cart_span, response.content)
mount_translate_options = { 'tcp': 'proto=tcp', 'udp': 'proto=udp', }
df1 = DataFrame(index=np.arange(10)) df1['bool'] = True df1['string'] = 'foo'
value = True if value == "true" else False
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
if Minv is not None: raise ValueError("Minv should not be specified when sigma is")
self.n_layers_ = len(layer_units)
from django.contrib.gis.gdal import GDALRaster setattr(cls, self.attname, SpatialProxy(GDALRaster, self))
self.assertEqual(course_date, expected_course_date)
cov = EmpiricalCovariance(assume_centered=True) cov.fit(X) assert_array_equal(cov.location_, np.zeros(X.shape[1]))
from unit.transport.req_test import ReqChannelMixin from unit.transport.pub_test import PubChannelMixin
if len(inflight_futures) == 0: continue
result = ungettext_lazy( '%(name)s has %(num)d good result', '%(name)s has %(num)d good results',
'tools.lowdata_fmt.on': True,
mock_val_api.ValVideoNotFoundError = _MockValVideoNotFoundError mock_val_api.export_to_xml = Mock(side_effect=mock_val_api.ValVideoNotFoundError) self.descriptor.edx_video_id = 'test_edx_video_id'
class FormWithMedia(Form): field1 = CharField(max_length=20, widget=MyWidget1()) field2 = CharField(max_length=20, widget=MyWidget2())
assert_equal(_dynamic_max_trials(1, 100, 10, 0), 0) assert_equal(_dynamic_max_trials(1, 100, 10, 1), float('inf'))
#modindex_common_prefix = []
class OFTInteger(Field): _double = False _bit64 = False
from __future__ import absolute_import import re import logging
child = descriptor.get_children()[0] self.assertEqual(child.due, None)
if not hasattr(self, 'n_samples_seen_'): self.n_samples_seen_ = 0 self.mean_ = .0 self.var_ = .0
print(metrics.classification_report(y_test, y_predicted, target_names=dataset.target_names))
log = logging.getLogger(__name__)
import salt.config from salt.utils.schedule import Schedule
raise RaisingObjectException(self.msg)
diff = np.zeros(len(out), dtype='bool') for lab in labels[:-1]: diff |= np.r_[True, lab[1:] != lab[:-1]]
past_due_date_correct = CapaFactory.create(showanswer='correct_or_past_due', max_attempts="1", attempts="0", due=self.yesterday_str, correct=True) self.assertTrue(past_due_date_correct.answer_available())
effort = self.store.get_item(course_key.make_usage_key('about', 'end_date')) self.assertEqual(effort.data, 'TBD')
if tzinfo is not None: value = value.astimezone(tzinfo)
df = self.panel['ItemA']
spmatrix = spmatrix.copy()
third = models.ForeignKey(OuterB, models.SET_NULL, null=True)
instance_map = weakref.WeakKeyDictionary()
raise ValueError("The constant target value must be " "present in training data")
Book.authors.through.objects.using('default').delete()
elif isinstance(err, dict): pass
last_objective_value = ncut_value rotation = np.dot(Vh.T, U.T)
COURSE_REGEX = re.compile(r'^(.*?/courses/)(?!v[0-9]+/[^/]+){}'.format(settings.COURSE_ID_PATTERN))
from __future__ import unicode_literals
FOOTER_CACHE_TIMEOUT = 30 * 60
__virtualname__ = 'ip'
result = df.drop_duplicates('AAA') expected = df.iloc[[0, 1, 2, 6]] tm.assert_frame_equal(result, expected)
return X
from salt.states import winrepo
self._make_eligible() self._purchase_credit() self._initiate_request()
self.assertEqual( terminal.getwinsize(), (24, cols) ) terminal.wait() terminal.close()
htmlhelp_basename = 'pandas'
VERSION_1_SCHEME = "random"
comps = [i.strip() for i in line.split('=', 1)]
out = StringIO() assert_raises(IndexError, export_graphviz, clf, out, feature_names=[])
self.assertRedirects(response, "/get_view/")
serialized_data = serializers.serialize(format, objects, indent=2)
(27, True, False, u"False"),
weight_cdf = sample_weight[sorted_idx].cumsum() percentile_idx = np.searchsorted( weight_cdf, (percentile / 100.) * weight_cdf[-1]) return array[sorted_idx[percentile_idx]]
self.set(key, _DELETED_SENTINEL)
from pylearn2.blocks import Block from pylearn2.utils import sharedX
first_addend = random.randint(-100, 100) second_addend = 10 - first_addend
from salttesting.helpers import ensure_in_syspath, expensiveTest
status = VerificationStatus.get_user_status_at_checkpoint( self.user, self.course_key, self.reverification_location ) self.assertEqual(status, "submitted")
concat_values = to_concat[0] if copy and concat_values.base is not None: concat_values = concat_values.copy()
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit()
dirty_flags = _porttree().dbapi.aux_get(cpv, ["IUSE"])[0].split() return list(set(dirty_flags))
if 'max-age' in cc and 'max_age' in kwargs: kwargs['max_age'] = min(int(cc['max-age']), kwargs['max_age'])
AutoAuthPage(self.browser, course_id=self.course_id).visit()
set_crontab(
thing = models.CharField(max_length=100, blank=True, choices=Things())
s = SparseSeries([0, 1, np.nan, 3, 4, 5], index=np.arange(6))
return np.empty(0, dtype=np.int), np.empty(0, dtype=float)
exc_info_on_loglevel=logging.DEBUG
names = ['Dummy', 'X', 'Dummy_2']
def parse_raster(self, value): return from_pgraster(value)
service = _get_service(name) path = service['file_path']
result = f.clean('13.30') self.assertEqual(result, time(13, 30, 0))
oset.freqstr
import salt.loader import salt.utils import salt.utils.jid from salt.ext.six.moves import range
model = WriterProfile fields = '__all__'
import logging
clf = AdaBoostRegressor(n_estimators=10, random_state=0) clf.fit(boston.data, boston.target, sample_weight=boston_weights)
iris = datasets.load_iris()
for blob in result: file_name = os.path.join(base_dir, blob)
if os.path.isfile(cache_file): os.remove(cache_file)
self._disallow_censor_updates()
self.options.log_file = self.config.get(cli_setting_name)
old = list_pkgs(saltenv=saltenv)
iso = manifold.Isomap(n_components, 2) X_iso = iso.fit_transform(X)
ret = self.run_function('virtualenv.create', [venv_dir]) self.assertEqual(ret['retcode'], 0)
del params["password"] assert_password_error("A valid password is required")
action_name = ugettext_noop('generated') task_fn = partial(upload_students_csv, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
import os
parent_model = geo_field.model._meta.concrete_model return self._field_column(compiler, geo_field, parent_model._meta.db_table)
choose_track_url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.get(choose_track_url)
ret = client.get_datastore(DatastoreType.RUNNING) GRAINS_CACHE.update(ret) return GRAINS_CACHE
import crypt HAS_CRYPT = True
stream.unget(chunk[header_end + 4:])
if not clone_type and power: task = new_vm_ref.PowerOn() salt.utils.vmware.wait_for_task(task, vm_name, 'power', 5, 'info')
from __future__ import absolute_import import sys import types import subprocess
idf.unstack('E')
refresh_db() return ret
def capfirst(x): return x and force_text(x)[0].upper() + force_text(x)[1:] capfirst = keep_lazy_text(capfirst)
df3 = DataFrame({"a": [1, 2, 3, 4], "b": [1, 2, 3, 4]})
idx = np.where(land_reference > -9999) coverages_land = data.coverages[:, idx[0], idx[1]].T
curried.__name__ = curried_with_axis.__name__ = name
raids = __salt__['raid.list']() if raids.get(name): ret['comment'] = 'Raid {0} already present'.format(name) return ret
_valid_mask_octets = frozenset((255, 254, 252, 248, 240, 224, 192, 128, 0))
from salt.states import boto_cloudwatch_alarm
from __future__ import absolute_import
plt.subplot(1, 2, i + 1)
resp = self._change_enrollment('unenroll') self.assertEqual(resp.status_code, 200)
if self.child_fde in rlist: try: stderr = self._translate_newlines( salt.utils.to_str( os.read(self.child_fde, maxsize) ) )
raise ValueError("class_weight provided should be a " "dict or 'balanced'")
self.config.pop('log_fmt_logfile', None)
from __future__ import absolute_import import logging
correct_error_message_text = 'No playable video sources found.' self.assertIn(correct_error_message_text, self.video.error_message_text)
assert_true(X_scaled is not X)
config.groups[1].remove() config.groups[0].name = "First Group" config.save()
try: import pymongo HAS_PYMONGO = True except ImportError: HAS_PYMONGO = False
if self.columns.is_unique: return self._get_item_cache(key)
CourseEnrollment.enroll(user_who_created_course, course_key)
face_image_url = models.URLField(blank=True, max_length=255) photo_id_image_url = models.URLField(blank=True, max_length=255)
six.reraise(ValidationError, ValidationError( self.error_messages['invalid_image'], code='invalid_image', ), sys.exc_info()[2])
root_dir = path(mkdtemp_clean()) export_course_to_xml( self.store, content_store, course_id, root_dir, 'test_no_xml_attributes' )
with open(dquality_dir / "diff_quality_pep8.html", "w") as f: f.write(_pep8_output(count, violations_list, is_html=True))
state.__salt__ = {} state.__context__ = {} state.__opts__ = {} state.__pillar__ = {}
raise ValueError(msg.format(func.__name__))
return len(tsql_query(query="SELECT name FROM sysusers WHERE name='{0}'".format(username), **kwargs)) == 1
try: import cherrypy
s = Series(range(10)).astype(float) s[8] = None result = s[8] self.assertTrue(isnull(result))
log.debug( 'While the userdel exited with code 12, this is a known bug on ' 'debian based distributions. See http://goo.gl/HH3FzT' ) return True
rast = GDALRaster(json.loads(JSON_RASTER)) stx_pnt = GEOSGeometry('POINT (-95.370401017314293 29.704867409475465)', 4326) stx_pnt.transform(3086)
if data_columns is True: data_columns = axis_labels elif data_columns is None: data_columns = []
self.assert_correct_filter_response(self.url, 'asset_type', 'OTHER')
try: result = o + o2 self.check_metadata(result) except (ValueError, AttributeError): pass
if features is not None: valid_set = valid_set[:, features] test_set = test_set[:, features]
return self._on_user_authentication_failed(request)
return pairs, conf_list
request = HttpRequest() request.META = { 'HTTP_HOST': "invalid_hostname.com", } self.assertEqual(request.get_host(), "invalid_hostname.com")
return cls.__name__
'COURSES_ARE_BROWSABLE': True,
world.scenario_dict['CHAPTER'] = world.ItemFactory.create( parent_location=world.scenario_dict['COURSE'].location, category='chapter', display_name='Test Chapter',
arr = self.index.values new_index = Int64Index(arr, copy=True) tm.assert_index_equal(new_index, self.index) val = arr[0] + 3000
if res['retcode'] != 0: ret[name] = res['stderr'] if 'stderr' in res else res['stdout'] else: ret[name] = 'created'
self.assertEqual(1, len(editable_fields), editable_fields) self.assert_field_values( editable_fields, 'display_name', XModuleMixin.display_name, explicitly_set=False, value=None, default_value=None )
raw_query_string = get_bytes_from_wsgi(self.environ, 'QUERY_STRING', '') return http.QueryDict(raw_query_string, encoding=self._encoding)
nftables.__grains__ = {} nftables.__salt__ = {}
self.add_credit_course()
lines.append(line) continue
assert not isinstance(batch, list)
instructor = InstructorFactory(course_key=self.course.id) self.client.logout() self.client.login(username=instructor.username, password='test')
keys = [keys]
clean_conv = {}
django_settings.SOCIAL_AUTH_RAISE_EXCEPTIONS = False
w = np.zeros(n_features + 1) loss_interp, grad_interp = _logistic_loss_and_grad( w, X, y, alpha=1. ) assert_array_almost_equal(loss, loss_interp)
from salt.states import smtp
tm.assert_series_equal(result, s, check_categorical=False)
logging.captureWarnings(self._old_capture_state)
import salt.utils.http
xmin, ymin, xmax, ymax = map(c_double, filter) capi.set_spatial_filter_rect(self.ptr, xmin, ymin, xmax, ymax)
if not using_ip_for_id and 'append_domain' in opts: opts['id'] = _append_domain(opts)
ave = elemwise_kl(Y, Y_hat)
result_key = f.generate_filename(None, key) self.assertEqual(result_key, expected_key)
assert_array_equal(mb_k_means.predict(X), mb_k_means.labels_)
clf = LinearSVC() X, y_idx = make_blobs(n_samples=100, n_features=2, random_state=42, centers=3, cluster_std=3.0)
from __future__ import absolute_import import os import re import time import logging
if lib.isscalar(arr): arr = [arr]
CreateExtension('uuid-ossp'), HStoreExtension(), TrigramExtension(), UnaccentExtension(),
self.label_distributions_ = np.multiply( clamp_weights, self.label_distributions_) + y_static remaining_iter -= 1
from __future__ import absolute_import, print_function import subprocess import hashlib import pprint import optparse
if self.skipDownloaded and update.IsDownloaded: log.debug(u'Skipped update {0} - already downloaded'.format(update.title)) continue
if settings.FEATURES["ENABLE_SYSADMIN_DASHBOARD"]: urlpatterns += ( url(r'^sysadmin/', include('dashboard.sysadmin_urls')), )
self.assertFalse(self.cohort_management_page.is_category_selected())
X = np.hstack((iris.data, E)) y = iris.target
data_inherited = models.CharField(max_length=10) fk_inherited = models.ForeignKey(Relation, models.CASCADE, related_name='fk_concrete_rel')
if slug is not None and (pk is None or self.query_pk_and_slug): slug_field = self.get_slug_field() queryset = queryset.filter(**{slug_field: slug})
from markdown.util import etree, AtomicString
__virtualname__ = 'mysql'
from salt.modules import cmdmod from salt.exceptions import CommandExecutionError, SaltInvocationError import salt.utils import salt.utils.odict
out *= .5 np.tanh(out, out) out += 1 out *= .5
try: import ssl HAS_SSL = True
import logging
'openedx.core.djangoapps.common_views',
self.assertFalse(linode._validate_name('ab'))
elif self.ndim >= 3: return self.obj.__setitem__(indexer, value)
from __future__ import absolute_import
diff = set(kwargs) - set(compat_args)
__opts__['test'] = orig_test if errors: __context__['retcode'] = 1 return errors return high_
df = pd.DataFrame(np.random.randn(10, 4)) df.ix[:8] = np.nan
if len(set(ret).intersection(minions)) >= len(minions): return ret
Number.objects.filter(pk=self.n.pk).update(integer=F('integer').bitand(56))
return self._constructor(data=self._series, index=self.index, columns=self.columns)
def _get_srid_info(self, connection): self._units, self._units_name, self._spheroid = get_srid_info(self.srid, connection)
rendered = pieces["short"]
for obj in o2o_type_fields: if hasattr(obj, 'field'): reverse_field = obj.field self.assertTrue(reverse_field.is_relation and reverse_field.one_to_one)
self.client.login(username='testclient', password='password')
master_doc = 'index'
if service_name == 'SSH' or service_name == 'ssh': temp_service_name = 'TSM-SSH' else: temp_service_name = service_name
result = df.set_index('C') result_nodrop = df.set_index('C', drop=False)
self.navigate_to_video()
obj.admin = request.user obj.save()
fresh_pillar = self.fetch_pillar() self.cache[self.minion_id] = {self.saltenv: fresh_pillar} log.debug('Pillar cache miss for minion {0}'.format(self.minion_id))
parent_xblock.save()
self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS + PayAndVerifyView.VERIFICATION_STEPS, PayAndVerifyView.PAYMENT_CONFIRMATION_STEP, )
if store is not None and i not in (4, 5): store.save_asset_metadata(asset_md, asset[4])
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
course_publish_orphans = self.store.get_orphans(course_locator_publish)
with self.assertRaises(SearchIndexingError): CoursewareSearchIndexer.do_course_reindex(modulestore(), self.course.id)
THIRD_PARTY_AUTH_CUSTOM_AUTH_FORMS = AUTH_TOKENS.get('THIRD_PARTY_AUTH_CUSTOM_AUTH_FORMS', {})
tab = tab_class(tab_dict=dict_tab)
if exists(zpool): ret[zpool] = 'storage pool already exists' return ret
if num_violations > violations_limit > -1: raise BuildFailure("Failed. Too many pylint violations. " "The limit is {violations_limit}.".format(violations_limit=violations_limit))
if get_vm_status(vmid=vmobj['vmid'])['status'] != 'stopped': stop(name, vmobj['vmid'], 'action')
from __future__ import absolute_import
instructor_role = CourseInstructorRole(course_id)
d = d[:nreturned] z = z[:, :nreturned]
from django.contrib.contenttypes import views as contenttype_views
alphas = np.tile(np.sort(alphas)[::-1], (n_l1_ratio, 1))
import logging
self.assertIn('html', result) self.assertEqual(result['html'], "<div>Test HTML</div>")
lyr.spatial_filter = None self.assertEqual(3, len(lyr))
class TimeSeries(Series): def __init__(self, *args, **kwargs): warnings.warn("TimeSeries is deprecated. Please use Series", FutureWarning, stacklevel=2)
class PriceFormWithoutQuantity(forms.ModelForm): class Meta: model = Price exclude = ('quantity',)
self.assertEqual(len(list(pair.flatten())), 3)
return
XA_checked, XB_checked = check_pairwise_arrays(XA, XB) assert_equal(XA_checked.dtype, np.float32) assert_equal(XB_checked.dtype, np.float32)
response_element = etree.Element("formularesponse")
clf.partial_fit(X3, Y3)
from __future__ import absolute_import
import matplotlib.pyplot as plt from itertools import cycle
if keep_symlinks: symlinks = __salt__['cp.list_master_symlinks'](__env__, srcpath) fns_ = process_symlinks(fns_, symlinks) for fn_ in fns_: if not fn_.strip(): continue
raise SaltSystemExit('Cannot complete login due to an incorrect user name or password.')
if not self.test_spec: test_spec = self.test_dir else: test_spec = self.test_dir / self.test_spec
if not hasattr(user, '_roles'): user._roles = RoleCache(user)
response = self.client.get(reverse('django-admindocs-tags')) self.assertContains(response, '<title>Template tags</title>', html=True)
self.client.force_login(self.u1)
import salt.modules.rvm import salt.states.rvm as rvm
repr(slo)
source_last_modified = source_storage.get_modified_time(path)
myminion: base: |_ httpd: 2.2.15-29.el6.centos updates: |_ httpd: 2.2.15-30.el6.centos
initial_file = os.path.join(migration_dir, "0001_initial.py") self.assertTrue(os.path.exists(initial_file))
scaler_batch = StandardScaler(with_std=False).fit(X)
U, V = svd_flip(U, V)
m = DynamicListDisplayChildAdmin(Child, custom_site) request = self._mocked_authenticated_request('/child/', user_parents) response = m.changelist_view(request) self.assertContains(response, 'Parent object')
if parse_dates is True or parse_dates is None or parse_dates is False: parse_dates = []
_, sap, _ = randomized_svd(X, k, n_iter=5, power_iteration_normalizer=normalizer)
private_ip_assignment = get_private_ip(vm_) if private_ip_assignment: create_private_ip(node_id)
plt.close('all')
self.split_test_module.user_partition_id = 999
os.environ.clear() os.environ.update(original_environ)
cls.raises_exception('blahblahblah:8081', socket.error)
context_extras['sql_queries'] = lazy( lambda: list(itertools.chain(*[connections[x].queries for x in connections])), list )
class GDALException(Exception): pass
rsync.__salt__ = {}
if not hasattr(self, 'rng'): self.setup_rng()
self.assertTrue(self.video.select_transcript_format('txt'))
error_msg = "XQueue received invalid grade request" self._send_immediate_response(False, message=error_msg)
expr = self.ex('~')
__func_alias__ = { 'list_': 'list' }
ret = { 'data': None, 'dest': None, }
if try_cast: result = self._try_cast_result(result)
field_count = len(header[0])
'env_order': list,
request = CreditRequest.objects.get(username=username, course__course_key=course_key) self.assertEqual(request.status, 'pending')
if bulk_write_record.active and course_key.branch in bulk_write_record.dirty_branches: return bulk_write_record.structure_for_branch(course_key.branch)
fields_found = set() if requested is None: if isinstance(self.query.select_related, dict): requested = self.query.select_related restricted = True else: restricted = False
self.assertIsNone(check_password({}, 'unknown', ''))
phi_aj = phi(a_j) derphi_aj = derphi(a_j)
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course_key)) self.assertTrue(self.user.roles.filter(name="Student", course_id=self.course_key))
continue
MAX_BOOKMARKS_PER_COURSE = ENV_TOKENS.get('MAX_BOOKMARKS_PER_COURSE', MAX_BOOKMARKS_PER_COURSE)
pass
try: return index.get_level_values(index.names[i]) except KeyError: return index.get_level_values(i)
params = self._signed_callback_params(self.order.id, self.COST, "abcd") params['decision'] = u'CANCEL' result = process_postpay_callback(params)
self.assertTrue(PasswordHistory.is_allowable_password_reuse(user, "test")) self.assertTrue(PasswordHistory.is_allowable_password_reuse(staff, "test"))
UserProfile.objects.exists() return HttpResponse(mock_render_to_string(template_name, context))
tm._skip_if_no_scipy()
if profile_country is not None: self.user.profile.country = profile_country self.user.profile.save()
student_module.save(force_update=True)
from salt.modules import openstack_config from salt.exceptions import CommandExecutionError
self.assertTrue(3.0 in s)
self.assertIn('\\xfa\\xf1\\xed\\xa9\\xf3\\xf0\\xe9 \\xb5\\xf3\\xf0\\xe9\\xf8', content) self.assertIn('\\xfa\\xf1\\xed\\xa9\\xf3\\xf0\\xe9 \\xb5\\xf3\\xf0\\xe9\\xf8\\xdf', content)
self._check_staff(self.course) self._check_staff(self.test_course)
request = args[0] request.META['CROSS_DOMAIN_CSRF_COOKIE_USED'] = True
gc.collect() time.sleep(0.1)
pca = PCA(svd_solver='full') pca.fit(X) assert_almost_equal(pca.explained_variance_ratio_.sum(), 1.0, 3)
self.assertQuerysetEqual( Note.objects.filter(pk__in=(x for x in ())), [] )
import salt.pillar
formset = media_inline.get_formset(request, max_num=100, can_order=True) self.assertEqual(formset.max_num, 100) self.assertEqual(formset.can_order, True)
TESTABLE_BLOCK_TYPES = set(DIRECT_ONLY_CATEGORIES) TESTABLE_BLOCK_TYPES.discard('course')
self.assertEqual(match[0], func) self.assertEqual(match[1], args) self.assertEqual(match[2], kwargs)
selected_choices = [key for key in a_dict if key.endswith("bc")] for key in selected_choices: binary_choices[key] = a_dict[key]
return response
params = {'bandwidth': np.logspace(-1, 1, 20)} grid = GridSearchCV(KernelDensity(), params) grid.fit(data)
if len(names) == 1: return ret[names[0]] return ret
return self._categories
from __future__ import absolute_import import io
return cfunc(com._ensure_float64(arg), window, minp, **kwargs)
HAS_WHOOSH = False try: import whoosh.index import whoosh.fields import whoosh.store import whoosh.qparser HAS_WHOOSH = True except ImportError: pass
def f(x): if not isinstance(x, pd.Timestamp): raise ValueError return str(x.tz)
remote_rev = all_remote_refs['refs/tags/' + rev + '^{}'] remote_rev_type = 'tag'
world.click_course_content() outline_css = 'li.nav-course-courseware-outline a' world.css_click(outline_css)
__virtualname__ = 'service'
mask = self.frame['A'][::-1] > 1
from __future__ import absolute_import import logging import salt.utils.vault
self.opts = opts
assert_series_equal(ts.resample('a-dec').mean(), result) assert_series_equal(ts.resample('a').mean(), result)
import salt.utils from salt.ext.six.moves import range
manage.py ... transfer_students -f edX/Open_DemoX/edx_demo_course -t edX/Open_DemoX/new_demoX
if isinstance(value, six.string_types): value = self.deserialize(value)
dtype_orig = None
cmd = '{0} {1}'.format(cmd, ' '.join(dataset))
course_id = _get_course_id(self.store, test_course_data) delete_course_and_groups(course_id, self.user.id) with self.assertRaises(ItemNotFoundError): are_permissions_roles_seeded(course_id)
sequential = get_and_verify_publish_state('sequential', self.SEQUENTIAL, True) self.assertFalse(getattr(sequential, "is_draft", False))
User.objects.create_user('alice', 'alice@example.com')
ssh_key_changed = True
import os.path
self.assertEqual(self.team_page.team_name, self.team['name']) self.assertTrue(self.team_page.edit_team_button_present)
parent_url = None if parent_loc is not None: parent_url = parent_loc.to_deprecated_string()
n_folds = 5 n_iter = 1000
n_clusters_range = [2, 10, 50, 90] n_samples = 100 n_runs = 10
while stack:
response2 = self.client.get('/template_response_view/') self.assertEqual(response2.status_code, 200)
clf_multi_loss = log_loss(y, clf_multi.predict_proba(X)) clf_wrong_loss = log_loss(y, clf_multi._predict_proba_lr(X)) assert_greater(clf_wrong_loss, clf_multi_loss)
dive = Book.objects.using( 'other').create(title="Dive into Python", published=datetime.date(2009, 5, 4))
sim = np.array([[0, 5, 9, 4], [5, 0, 2, 2], [3, 2, 0, 1], [4, 2, 1, 0]])
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self.assertTrue(filecmp.cmp(path_test, path_out))
rexp1 = re.compile('(?m)^ [*|-] ' r'([^ ].*)[\r\n].*restart*')
final_exit = 1
df = orig.copy() df.drop_duplicates('A', inplace=True) expected = orig[:2] result = df tm.assert_frame_equal(result, expected)
FOOTER_BROWSER_CACHE_MAX_AGE = 5 * 60
if not sp.issparse(X) or hasattr(init, '__array__'): X_mean = X.mean(axis=0) if not sp.issparse(X): X -= X_mean
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
donation_type = models.CharField(max_length=32, default="general", choices=DONATION_TYPES)
return msgpack.dumps(msg, use_bin_type=use_bin_type)
transcripts_utils.generate_subs_from_source(youtube_subs, 'SRT', srt_filedata, self.course)
inject_globals['__env__'] = str(cdata['kwargs']['env'])
self.assert_student_in_group(self.groups[0])
if dtype.kind == 'm': mask = isnull(arr) result = arr.astype(dtype).astype(np.float64) result[mask] = np.nan return result
(['honor', 'verified', 'audit'], 'honor'),
last_sat = datetime(2013, 8, 31) next_sat = datetime(2013, 9, 28) offset_sat = LastWeekOfMonth(n=1, weekday=5)
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
response['X-XRDS-Location'] = get_xrds_url('xrds', request) return response
return dict(_typ=self._typ, _subtyp=self._subtyp, _data=self._data, _default_fill_value=self._default_fill_value, _default_kind=self._default_kind)
def get_pointer_arr(n): "Gets a ctypes pointer array (of length `n`) for GEOSGeom_t opaque pointer." GeomArr = GEOM_PTR * n return GeomArr()
import ddt from mock import call, patch from nose.plugins.attrib import attr import before_after
self.assertEqual(3, City.objects.count())
tm.assert_frame_equal(left, right, check_dtype=False) tm.assert_series_equal(ts, right['3rd'])
self.go_to_tab_and_assert_problem(1, self.problem1_name) problem1_content_after_coming_back = self.problem_page.problem_content self.assertIn(problem1_content_after_coming_back, problem1_content_before_switch)
store.put('p2', p_empty) assert_panel_equal(store.select('p2'), p_empty)
'ENABLE_VIDEO_UPLOAD_PIPELINE': False,
from pygments.lexer import Lexer, do_insertions from pygments.lexers.agile import (PythonConsoleLexer, PythonLexer, PythonTracebackLexer) from pygments.token import Comment, Generic
classes = np.unique(iris.target) clf_samme = prob_samme = None
clf = svm.OneClassSVM(nu=0.1, kernel="rbf", gamma=0.1) clf.fit(X_train)
df = DataFrame(self.frame, copy=True) column = df.columns[0]
self.assertNotIn('created', ArticleForm().fields)
self.assertEqual(poly, fromstr(p.wkt))
self.assertEqual(seed, module.seed)
required_boto3_version = '1.2.1'
chunks = list(r) self.assertEqual(chunks, [b'hello', b'world']) for chunk in chunks: self.assertIsInstance(chunk, six.binary_type)
open(self.distribution.salt_ssh_packaging_file, 'w').write('Packaged for Salt-SSH\n')
from __future__ import absolute_import
def __init__(self, custom_optional_arg=None, model=None, query=None, using=None, hints=None): super(CustomInitQuerySet, self).__init__(model=model, query=query, using=using, hints=hints)
return response
freq, data = _maybe_resample(data, ax, kwds)
with open(filename, 'rb') as matlab_file: matlab_dict = io.loadmat(matlab_file, struct_as_record=True)
sub_match_dict = dict(match.groupdict(), **self.default_kwargs) sub_match_dict.update(sub_match.kwargs)
if isinstance(self.children[-1], six.string_types): if self.children[-1].isspace(): self.children.pop()
with salt.utils.fopen(requirements_file_path, 'a') as fhw: fhw.write('pep8==1.3.3\n')
df = self.read_csv(StringIO(data), header=[0, 1, 2, 3], index_col=[ 0, 1], tupleize_cols=False) tm.assert_frame_equal(df, expected)
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
if not ('test' in settings and settings['test']): _write_file_network(new_resolv, _DEB_RESOLV_FILE)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
log.debug('Destroying carbon socket')
from __future__ import absolute_import import logging
__func_alias__ = { 'list_installed': 'list', 'update_installed': 'update', 'import_image': 'import' }
from __future__ import unicode_literals
user = self.create_user_and_enroll(enrollment_type) if verification_status: self.add_verification_status(user, verification_status)
utils.get_programs(self.user)
train_algo = SGD( learning_rate = 0.1, cost = MeanSquaredReconstructionError(), batch_size = 10, monitoring_batches = 10, monitoring_dataset = trainset, termination_criterion = EpochCounter(max_epochs=MAX_EPOCHS_UNSUPERVISED), update_callbacks = None )
result = s.astype(object) expected = Series(DatetimeIndex(s._values).asobject) assert_series_equal(result, expected)
self.go_to_tab_and_assert_problem(1, self.problem1_name)
if not path or not os.path.isfile(path): return ret
response = self._get_page(payment_flow, course.id) self._assert_contribution_amount(response, "12.34")
self.assertRaises(Exception, date_range, datetime(2011, 11, 11), datetime(2011, 11, 12), freq=offset)
super(ContainerBase, self).setUp(is_staff=is_staff)
#latex_use_parts = False
__virtualname__ = 'gentoolkit'
from salt.modules import http import salt.utils.http
from __future__ import absolute_import
X, y = datasets.make_regression(n_targets=1) X_train, y_train = X[:50], y[:50] X_test, y_test = X[50:], y[50:]
import salt import salt.utils.fsutils from salt.modules import btrfs from salt.exceptions import CommandExecutionError
X = np.array(list(product(range(N_per_side), repeat=2)))
columns = [] for dtype, b in compat.iteritems(df.blocks): columns.extend(b.columns)
log.info( 'Since parallel deployment is in use, ssh console output ' 'is disabled. All ssh output will be logged though' ) opts['display_ssh_output'] = False
import salt.payload import salt.transport import salt.utils.args from salt.exceptions import SaltReqTimeoutError
task_input = {'student_set': "all_whitelisted"}
self.assertNotEqual(id(boto_ec2_conn), id(boto3_ec2_conn))
from .test_auth_backends import ImportedModelBackend
'openedx.core.djangoapps.credit',
from __future__ import unicode_literals
try: user = User.objects.get(id=user_id) except ObjectDoesNotExist: return None
if not self.is_in_memory_db(self.settings_dict['NAME']): BaseDatabaseWrapper.close(self)
elif not entrance_exam_enabled and course_entrance_exam_present: delete_entrance_exam(request, course_key)
if xblock.category == 'chapter': return None
if microsite.has_override_value('SESSION_COOKIE_DOMAIN'):
get_affinity_group = show_affinity_group
with warnings.catch_warnings(record=True): estimator = Estimator() set_testing_parameters(estimator) set_random_state(estimator) estimator.fit(X, y) y_pred = estimator.predict(X)
(["foo", "bar", "baz"], [None, "bar", "baz"]),
try: indent = min(len(s) - len(s.lstrip()) for s in docstring if s.strip()) except ValueError: indent = 0
self.save_course() self.url_nonexist = self.get_details_url("1=20")
continue
for status in ["created", "ready", "denied"]: attempt.status = status attempt.save() assert_false(SoftwareSecurePhotoVerification.user_has_valid_or_pending(user), status)
with tm.assertRaises(AttributeError): ind.freq
if all((ky,kx) >= topleft) and all((ky,kx) < botright):
return full_version[:3]
self.assertIsInstance( self.run_function('softwareupdate.list_available'), dict)
choices = self.xml.xpath('choicegroup/choice') return [choice.get("name") for choice in choices]
self.assertEqual(certificate_statuses.count(CertificateStatuses.generating), 8) self.assertEqual(certificate_statuses.count(CertificateStatuses.unavailable), 2)
i = np.argsort(dist2, axis=1) row_ind = np.arange(n_rows)[:, None] dist2 = dist2[row_ind, i] ind2 = ind2[row_ind, i]
get_blob_service_properties = show_blob_service_properties
self.assertIn(expected_copyright, json_data['copyright'])
from __future__ import absolute_import, print_function import logging import logging.handlers import time import datetime import socket import threading
if '' in (referer.scheme, referer.netloc): return self._reject(request, REASON_MALFORMED_REFERER)
continue
for X in [data, csr_matrix(data)]: X = VarianceThreshold(threshold=.4).fit_transform(X) assert_equal((len(data), 1), X.shape)
from __future__ import unicode_literals
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
fh_ = os.open(lock_fn, open_flags)
if len(running) >= self.opts.get('ssh_max_procs', 25) or len(self.targets) >= len(running): time.sleep(0.1)
cov = ShrunkCovariance(shrinkage=0.) cov.fit(X) assert_array_almost_equal(empirical_covariance(X), cov.covariance_, 4)
import salt.ext.six as six
world.wait_for_ajax_complete()
allowance_section.click_add_allowance_button()
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
from __future__ import absolute_import import re import sys
def check_len(item, name): length_msg = ("Length of '{0}' ({1}) did not match the length of " "the columns being encoded ({2}).")
with tm.assert_produces_warning(UserWarning): Categorical([0, 1], name="a")
indexer = Index(self.values).get_indexer_non_unique( other._values)[0].unique() indexer = indexer[indexer != -1]
srs = srs_input
metadata_to_inherit = self.cached_metadata.get(unicode(non_draft_loc), {}) inherit_metadata(module, metadata_to_inherit)
self.assertRaises(Exception, di.tz_localize, tz, ambiguous=is_dst)
actual = grouped_df.pid.transform(len) assert_series_equal(actual, expected)
return FILE_INPUT_CONTRADICTION
self.assertEqual(list(self.book.model_options_bookstores.all()), [])
result = f.clean('13:30:05') self.assertEqual(result, time(13, 30, 5))
from __future__ import absolute_import
from contextlib import contextmanager import logging
FEATURES['ENABLE_COURSE_DISCOVERY'] = True
raise AssertionError('Error performing exclusion: ' 's1: %s s2: %s other: %s' % (s1, s2, other))
result = self.panel.reindex(items=self.panel.items, major=self.panel.major_axis, minor=self.panel.minor_axis, copy=False)
#pylint: disable=E0602
self.assertEqual(len(mail.outbox), 1) self.assertEqual("Verification photos received", mail.outbox[0].subject)
AccessTestData(partition_groups={1: 1, 2: 2}, xblock_access={1: [3]}, merged_parents_list=[{1: {1}}]), AccessTestData(partition_groups={1: 1, 2: 2}, xblock_access={1: [2]}, merged_parents_list=[{1: {1}}]),
order = np.lexsort((y, x)) x, y = x[order], y[order]
df = self.series.to_frame('foo')
p, r, f, s = precision_recall_fscore_support(y_true, y_pred, pos_label=None, average='weighted')
try: validate_uploaded_image(uploaded_file) except ImageValidationError as error: return Response( {"developer_message": error.message, "user_message": error.user_message}, status=status.HTTP_400_BAD_REQUEST, )
p1.save_base(raw=True) self.assertEqual(data, [ (p1, True), (p1, False, True), ]) data[:] = []
make_pkgng_aware(name)
classifier = OneVsRestClassifier(svm.SVC(kernel='linear', probability=True, random_state=random_state)) y_score = classifier.fit(X_train, y_train).decision_function(X_test)
import sass
if encoding is None: if PY3: encoding = _default_encoding return encoding
if attempt.status == 'denied': status = 'must_reverify'
self.middleware.process_request(self.request) self.assertNotIn(LANGUAGE_SESSION_KEY, self.request.session)
n_jobs, _, _ = _partition_estimators(self.n_estimators, self.n_jobs)
y_true, y_pred, _ = make_prediction(binary=False)
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
event_iter = self.get_event_iter_returns(jid, minions, timeout=timeout)
with self.assertRaises(IntegrityError), transaction.atomic(): Child.objects.create(name='xyzzy', parent=None)
data = data._data
df = _make_frame(True) df.to_csv(path, tupleize_cols=False)
if ret: run(name, 'touch \'{0}\''.format(SEED_MARKER), path=path, python_shell=False)
'auto_accept': bool, 'autosign_timeout': int,
except RateLimitException: return JsonResponse({ "success": False, "value": _('Too many failed login attempts. Try again later.'),
if not iboost == self.n_estimators - 1: sample_weight *= np.exp(estimator_weight * ((sample_weight > 0) | (estimator_weight < 0)))
if not done: ret['result'] = False if not quiet: __jid_event__.fire_event({'message': ret}, 'progress') return ret
self.assertIsNotNone(account_settings['date_joined']) del account_settings['date_joined']
tsne = TSNE(metric="precomputed") assert_raises_regexp(ValueError, ".* square distance matrix", tsne.fit_transform, np.array([[0.0], [1.0]]))
pass
with tm.assertRaisesRegexp(TypeError, 'list-like'): self.index.set_names(names[0])
if not (isinstance(from_space, VectorSpace) and from_space.sparse): kwargs['batch_size'] = batch_size
from __future__ import absolute_import
output = inp output['pepa_templates'] = [] immutable = {}
parent = models.OneToOneField(Place, models.CASCADE)
return False
course_page.set_staff_view_mode_specific_student(student_b_username) verify_expected_problem_visibility(self, course_page, [self.beta_text, self.everyone_text])
if not os.path.isabs(url_data.path): raise CommandExecutionError( 'Path \'{0}\' is not absolute'.format(url_data.path) ) return url_data.path
#html_use_opensearch = ''
if self.__called: self._reset() self.__called = False
df.ix[7, 'c'] = 1
from __future__ import absolute_import import logging import collections import salt.exceptions
assert False
store.save_asset_metadata_list(md_list, ModuleStoreEnum.UserID.test)
xpath = "//span[contains(@class,'selected')]/p/b" self.assert_has_text(xml, xpath, 'HTML 2', exact=False)
meta = {} if user_info.profile.meta: meta = json.loads(user_info.profile.meta)
X_train, X_test, y_train, y_test, sw_train, sw_test = \ train_test_split(X, y, sample_weight, test_size=0.9, random_state=42)
offset = datetools.get_offset(new_freq) old_name = datetools.get_legacy_offset_name(offset) self.assertEqual(old_name, old_freq)
deadline = self.UPGRADE_DEADLINE if mode == "verified" else None form = self._admin_form(mode, upgrade_deadline=deadline)
absolute_path = self.download(template)
self.assertDictEqual(json.loads(response.content), data)
raise NotImplementedError('isnull is not defined for MultiIndex')
fs_root = mkdtemp()
geo_obj = self._klass(geo_value) setattr(instance, self._field.attname, geo_obj)
self.selenium.find_element_by_xpath('//input[@value="Save"]').click() self.wait_page_loaded()
mock = MagicMock(return_value=True) with patch.object(composer, '_valid_composer', mock): self.assertRaises(SaltInvocationError, composer.install, None)
self._cache.delete(key)
data['event_type'] = "re_validate" self.assert_request_status_code(200, url, method="POST", data=data)
etree.fromstring(etree.tostring(root), self.xmlparser)
K.flat[::n_samples + 1] -= alpha[0]
BULK_EMAIL_EMAILS_PER_TASK = 100
rng = np.random.RandomState(0) n_topics, X = _build_sparse_mtx() lda = LatentDirichletAllocation(n_topics=n_topics, evaluate_every=1, learning_method='batch', random_state=rng) lda.fit(X)
first_group = self.user_partition.groups[0] self.user_partition.scheme.current_group = first_group
try: return User.objects.get(username=requested_username) except User.DoesNotExist: raise Http404( "Requested user '{requested_username}' does not exist.".format(requested_username=requested_username) )
clf = LinearDiscriminantAnalysis(priors=[0.5, 0.5]) clf.fit(X, y)
if 'user_partition_id' not in old_content or old_content['user_partition_id'] != self.user_partition_id: selected_partition = self.get_selected_partition() if selected_partition is not None:
__context__[contextkey] = True
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
if class_weight in ("auto", "balanced"): class_weight_ = compute_class_weight(class_weight, mask_classes, y_bin) sample_weight *= class_weight_[le.fit_transform(y_bin)]
youtube_id = deserialize_field(cls.youtube_id_1_0, pieces[1]) ret[speed] = youtube_id
from __future__ import absolute_import import os import logging
from __future__ import absolute_import import os import fnmatch import re import logging
if 'provider' in server_: server_['driver'] = server_.pop('provider')
if ttype == 'zeromq': import salt.transport.zeromq return salt.transport.zeromq.ZeroMQPubServerChannel(opts, **kwargs)
for c in reversed(sorted(to_remove)): data.pop(c) col_names.remove(c)
text = f.widget.format_value(result) self.assertEqual(text, "01:30:00 PM")
#`clean_warning_registry()` is called internally by assert_warns class TestWarns(unittest.TestCase): def test_warn(self): def f(): warnings.warn("yo") return 3
cache.clear()
lm1 = LayerMapping(ICity1, city_shp, icity_mapping) lm1.save()
from __future__ import unicode_literals
VERSION_RE = re.compile(r'\S+ (\d+)\.(\d+)\.?(\d+)?')
cert_type=client
self.assertContains(response, '<h3 id="built_in-autoescape">autoescape</h3>', html=True) self.assertContains(response, '<li><a href="#built_in-autoescape">autoescape</a></li>', html=True)
tm.assert_almost_equal(variance_0, (n - 1.0) / n * var, check_less_precise=2)
self.client.logout() resp = self._activate_user(self.email) self.assertEqual(resp.status_code, 200)
eligibilities = api.get_eligibilities_for_user("staff") self.assertEqual(eligibilities, [])
new_mean_square_dx = ( self.decay * mean_square_dx + (1 - self.decay) * T.sqr(delta_x_t) )
def __virtual__(): return False
assert_almost_equal(s, 2.0/3.0)
self.apps.render_multiple(states_to_be_rendered)
evt1 = me.get_event(wait=0, tag='evt1', no_block=False) self.assertGotEvent(evt1, {'data': 'foo1'})
if dtypes is None: return self
if return_type is None: result = axes
course_one_team.add_user(self.user)
self.set_group_access(self.vertical, {1: []}) self.set_group_access(self.problem, {2: [3, 4]})
ssh_gateway_config = {'ssh_gateway': ssh_gateway}
safe_update(ups, p_up)
TIMEINT = int(time.time())
NO_BOTO_MODULE = True BOTO_NOT_CONFIGURED = True try: import boto NO_BOTO_MODULE = False try: boto.connect_iam() BOTO_NOT_CONFIGURED = False except boto.exception.NoAuthHandlerFound: pass except ImportError: pass
indexers = ['items', 'major_axis', 'minor_axis']
if self.conn.queue_exists(qname): return True return False
fig = plt.figure(figsize=(9, 8))
@python_2_unicode_compatible class Child1(AbstractBase1): data = models.CharField(max_length=25)
current_log_likelihood = None self.converged_ = False
if not cls._meta.abstract:
__virtualname__ = 'user'
from django.contrib.auth.views import redirect_to_login return redirect_to_login( request.get_full_path(), reverse('admin:login', current_app=self.name) )
from __future__ import absolute_import
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
def __xor__(self, other): "Return the symmetric difference of this Geometry and the other." return self.sym_difference(other)
from salt.exceptions import SaltInvocationError, CommandExecutionError from salt.ext.six import string_types, integer_types import salt.utils
if '-N' not in cmd and '--forward' not in cmd: cmd.append('--forward')
else:
import salt.utils
if isinstance(source, (tuple, list)): source, = source
df[0] = np.zeros(1000)
mb_k_means = MiniBatchKMeans(init="random", n_clusters=n_clusters, random_state=42, n_init=10).fit(X) _check_fitted_model(mb_k_means)
ts = _simple_ts('1/1/2000', '1/20/2000') ts[::2] = np.nan
(count, violations_list) = _get_pep8_violations()
k1 = orig.clone() k2 = k1.transform(trans.srid, clone=True) self.assertEqual(k1, orig) self.assertNotEqual(k1, k2)
AutoAuthPage(self.browser, course_id=self.course_id).visit() self._link_dummy_account() LogoutPage(self.browser).visit()
st_ = salt.client.ssh.state.SSHState(__opts__, __pillar__)
import salt.ext.six as six
self.client.logout()
mode = 'create' group_attr = __salt__['postgres.role_get']( name, return_password=not refresh_password, **db_args) if group_attr is not None: mode = 'update'
for staged_proba in clf.staged_predict_proba(X_test): assert_equal(y_test.shape[0], staged_proba.shape[0]) assert_equal(2, staged_proba.shape[1])
for attr, value in base.__dict__.items(): if value is None and attr in declared_fields: declared_fields.pop(attr)
config = sconfig.minion_config(minion_config)
if virtual_ret is not True: self.missing_modules[module_name] = virtual_err self.missing_modules[name] = virtual_err return False
__func_alias__ = { 'list_': 'list', 'ls_': 'ls' }
_, labels_no_copy = affinity_propagation(S, preference=preference, copy=False) assert_array_equal(labels, labels_no_copy)
TRACK_MAX_EVENT = 50000
EDX_PLATFORM_REVISION = 'unknown'
response = self.client.post(self.url, { "password": self.PASSWORD, }) self.assertHttpBadRequest(response)
if isinstance(v, dict): is_nested_renamer = True
self.blocks = []
width = self.ext.config['metacafe_width'][0] height = self.ext.config['metacafe_height'][0] return flash_object(url, width, height)
if huber_warm.n_iter_ is not None: assert_equal(1, huber_warm.n_iter_)
plt.scatter(diabetes_X_test, diabetes_y_test, color='black') plt.plot(diabetes_X_test, regr.predict(diabetes_X_test), color='blue', linewidth=3)
conversions = { }
def refresh_thread_page(self, thread_id): self.browser.refresh() self.thread_page.wait_for_page()
return np.fromstring(values, dtype=dtype)
self.assert_not_enrolled()
DECIMAL_SEPARATOR = '.'
self.assertRaises(Exception, func, p1, p)
values = values.asi8.reshape(block.shape)
def __init__(self): pass
if ret['retcode'] > 1: del ret['stdout'] return ret elif not ret['retcode']: return data
import integration from salt.config import cloud_providers_config
from __future__ import absolute_import import os import random import string
result = s.resample('2D').asfreq() assert_series_equal(result, expected)
label = _(u"I agree to the {platform_name} {terms_of_service}.").format( platform_name=get_themed_value("PLATFORM_NAME", settings.PLATFORM_NAME), terms_of_service=terms_link )
from __future__ import absolute_import import os import json
self.advanced_settings_page.visit() self.advanced_settings_page.set_values(self.course_advanced_settings) self.advanced_settings_page.wait_for_ajax()
read_from_file(os.path.join(dataset_conf_path,"installed.lst"))
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salt.utils.cache import context_cache
rendered_html = etree.XML(problem.get_html())
#html_short_title = None
if dtype == np.object_: return v.tolist()
if self.user: user = self.user.resolve(context) if not user.is_authenticated: flatpages = flatpages.filter(registration_required=False) else: flatpages = flatpages.filter(registration_required=False)
mix_clf_format = product(EXAMPLES["multilabel-indicator"], EXAMPLES["multiclass"] + EXAMPLES["binary"])
bytes = bytearray
repr(s)
for student in students[:4]: self.assertIn( GeneratedCertificate.certificate_for_student(student, self.course.id).status, CertificateStatuses.PASSED_STATUSES )
import salt.utils
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
from __future__ import absolute_import, print_function import copy import fnmatch import json import logging import os import shutil import sys import tarfile import tempfile import time
ccx_ids_to_delete.append(get_override_for_ccx(ccx, block, 'due_id')) clear_ccx_field_info_from_ccx_map(ccx, block, 'due')
self.course_nav.go_to_vertical('Test Problem 1')
cls.supplemental_index_information(modulestore, structure)
SOCIAL_MEDIA_FOOTER_NAMES = [ "facebook", "twitter", "youtube", "linkedin", "google_plus", "reddit", ]
for i in ['_right_indicator', '_left_indicator', '_merge']: df_badcolumn = DataFrame({'col1': [1, 2], i: [2, 2]})
if not run_diff_quality( violations_type="jshint", prefix=pythonpath_prefix, reports=jshint_reports, percentage_string=percentage_string, branch_string=compare_branch_string, dquality_dir=dquality_dir ): diff_quality_percentage_pass = False
import salt.minion import salt.utils from salt.defaults import DEFAULT_TARGET_DELIM from salt.ext.six import string_types
_options['checktype'] = str(_options['checktype'])
data = query('get', 'nodes/{0}/{1}/{2}/config'.format(node, node_type, vmid))
__virtualname__ = 'shadow'
rng = np.random.RandomState(0) rand_data = RandomData(rng, scale=5) n_samples = rand_data.n_samples n_features = rand_data.n_features n_components = rand_data.n_components
import sys import time import datetime
if method is not None or limit is not None: new_values = missing.interpolate_2d(new_values, method=method, limit=limit, fill_value=fill_value)
left = left + right * 0 right = right + left * 0
self.assertTrue(views.is_course_passed(self.course, None, self.student, self.request))
key = 'some key with spaces' * 15 val = 'a value' cache.set(key, val) self.assertEqual(cache.get(key), val)
session.create = lambda: None session.load()
badge_class = BadgeClass.get_badge_class( slug='new_slug', issuing_component='new_component', description=None, criteria=None, display_name=None, image_file_handle=None, create=False ) self.assertIsNone(badge_class)
if isinstance(e, SuspiciousOperation): logger = logging.getLogger('django.security.%s' % e.__class__.__name__) logger.warning(force_text(e)) return {}
rhobar1 = sqrt(rhobar**2 + damp**2) cs1 = rhobar / rhobar1 sn1 = damp / rhobar1 psi = sn1 * phibar phibar = cs1 * phibar
df0 = DataFrame([[10, 20, 30], [10, 20, 30], [10, 20, 30]])
self.assertIn("What is the sum of 17 and 3?", problem_page.problem_text)
return (('Could not run the query', ), (str(e), ))
#html_favicon = None
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
import logging import re
entry = _fstab_entry(**entry_args) try: criteria = entry.pick(match_on)
from __future__ import absolute_import import os import copy
'ENABLE_VIDEO_BUMPER': False,
add_openid_simple_registration(request, response, data) add_openid_attribute_exchange(request, response, data)
expected = ts[1:]
objects = CourseRerunUIStateManager()
assert_array_equal(X_transformed_sparse.toarray(), X_transformed_dense)
from salt.utils import cloud from integration import TMP, CODE_DIR
available_version = salt.utils.alias_function(latest_version, 'available_version')
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON
obj_pk = model._meta.pk.to_python(n.getAttribute('pk'))
([[10, 10, 8, 11], [9, 8, 1, 1], [9, 7, 4, 10]], 15 ),
assert_raises(ValueError, cval.cross_val_score, svm, linear_kernel.tolist(), y)
__opts__['test'] = orig_test return ret
cmd.insert(-1, '--force-yes')
titles = ['Label Spreading 30% data', 'Label Spreading 50% data', 'Label Spreading 100% data', 'SVC with rbf kernel']
from salt.exceptions import CommandExecutionError from salt.modules import uptime
msg = "0 feature(s) (shape=(1, 0)) while a minimum of 1 is required." assert_raise_message(ValueError, msg, check_array, [[]])
from salttesting.helpers import ensure_in_syspath, skip_if_binaries_missing ensure_in_syspath('../../')
request_password_change(self.EMAIL, self.ORIG_HOST, self.IS_SECURE)
class BandAdmin(ModelAdmin): fieldsets = [(None, {'fields': ['name']})]
return modulestore().get_item(child.location)
return c_cfg.get(attr_name, cfg(default_cfg_key))
pass
try: os.kill(int(open(pidfile).read().strip()), 0) sys.exit(1) except Exception as ex: pass
res_val = df.at["j", "cats"] self.assertEqual(res_val, exp_val)
course = modulestore().get_course(course_id, depth=2)
GATING_NAMESPACE_QUALIFIER = '.gating'
html_theme_options = {'oldversion': False, 'collapsiblesidebar': True, 'google_analytics': True, 'surveybanner': False, 'sprintbanner': True}
clf = svm.SVC() assert_raises(ValueError, clf.fit, X, Y, sample_weight=range(len(X) - 1))
last_indent = start if verbose >= 3: print("... " + line.rstrip())
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
self.assertFalse(caches['prefix'].has_key('somekey'))
margin = 1 / np.sqrt(np.sum(clf.coef_ ** 2)) yy_down = yy + a * margin yy_up = yy - a * margin
import re _name_re = re.compile(r"[a-zA-Z_][a-zA-Z0-9_]*$")
if not has_html_certificates_enabled(course_id): log.info( "Invalid cert: HTML certificates disabled for %s. User id: %d", course_id, user_id, ) return render_to_response(invalid_template_path, context)
PASSWORD_MIN_LENGTH = 2 PASSWORD_MAX_LENGTH = 75
return 'some html content'
import integration import salt.utils
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
pieces["short"] = mo.group(3)
response = self._submit_photos(self.course_key, self.reverification_location, self.IMAGE_DATA) self.assertEqual(response.status_code, 400)
for arrow in ARROWS: left, a, right = eq.partition(arrow) if a != '': return left, a, right
mock_from_django_user.return_value = Mock()
for verification in candidates: if verification.active_at_datetime(deadline): return verification
if not suffix: url = url.rstrip('/')
raise
from random import choice from string import letters, digits, punctuation RANDOM_SHARED_SECRET = ''.join( choice(letters + digits + punctuation) for x in range(250) )
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21 13:30:05")
trace = traceback.format_exc() self.assertEqual(trace, '')
self.go_to_tab_and_assert_problem(1, self.problem1_name)
msg = '<div class="capa_alert">%s</div>' % msg return msg
y = [["ham", "spam"][i] for i in LabelEncoder().fit_transform(Y)] clf.fit(X[:, :-1], y)
left = concat([ts1, ts2], join='outer', axis=1) right = concat([ts2, ts1], join='outer', axis=1)
break
_tables() s = self.get_storer(key) if s is None: return
import salt.utils import salt.utils.itertools from salt.exceptions import SaltInvocationError, CommandExecutionError
import salt.utils import logging import salt.utils.mac_utils from salt.exceptions import CommandExecutionError
class WKTWriter(IOBase): _constructor = wkt_writer_create _destructor = wkt_writer_destroy ptr_type = WKT_WRITE_PTR
additional_handlers = []
self.save(must_create=True)
from __future__ import absolute_import
Promise(_check_func, "The 'Next Step' button is enabled.").fulfill()
def _parse_commit_log(this,repo_path,base_commit=None): from vbench.git import _convert_timezones from pandas import Series from dateutil import parser as dparser
USER_PARTITION_SCHEME_NAMESPACE = 'openedx.user_partition_scheme'
manage_directory(dirname) vdir.add(dirname)
from __future__ import absolute_import import logging
def _get_srid(self): srs = self.srs if srs: return srs.srid return None
if is_local: return self.scope[key]
CourseEnrollment.unenroll(user, course_id) self.assert_no_events_were_emitted()
from __future__ import unicode_literals
test_user = UserFactory() self.register_with_redemption_code(test_user, course_registration_code.code)
resp = self.client.delete(reverse_usage_url('xblock_handler', usage_key)) self.assertEqual(resp.status_code, 204)
self.assertIn(escape(point.json), widget.render('p', point.json)) self.assertEqual(widget.deserialize_called, 1)
EmptyPromise(lambda: self.is_closed_captions_visible() == closed_captions_new_state, "Closed captions are {state}".format(state=state)).fulfill()
return self._nobs_raw >= max(self._min_periods, len(self._x.columns) + 1)
from __future__ import absolute_import import os import logging import copy
request.session[LANGUAGE_SESSION_KEY] = preview_lang
if module not in get_modules(): log.error('Module {0} not available'.format(module)) return False
tasks = instructor_task.api.get_instructor_task_history(course_id, module_state_key)
typ, axes = _align_core(terms) return typ, axes
if not self.check_enough_space(remote_name, local_name): log.warning(common_msg + "File %s not cached: Not enough free space" % remote_name) self.release_writelock() return filename
version.append(x)
self.reset_password_page.fill_password_reset_form(self.user_info['email'])
with warnings.catch_warnings(record=True): estimator = Estimator()
_ = lambda text: text
assert_equal(rp.n_components, 'auto') assert_equal(rp.n_components_, 110)
expected = np.argsort(a, kind='mergesort') assert (np.array_equal(result, expected))
from __future__ import absolute_import import copy import logging import re import os.path
return self.cursor.execute(query, args)
if hasattr(table, 'columns'): for level in table.columns.names[1:]: if margins_name in table.columns.get_level_values(level): raise ValueError(exception_msg)
BASE_URL = os.environ.get('test_url', 'http://localhost:8003')
item = modulestore().get_item(usage_key)
return force_bytes(query)
self.io_loop.remove_timeout(timeout)
import salt.utils import salt.utils.fsutils from salt.exceptions import CommandExecutionError
cumprod_xs = self.tsframe.cumprod(axis=1) self.assertEqual(np.shape(cumprod_xs), np.shape(self.tsframe))
from salt.modules import smf
params = [('course_id', self.course_id)] response = self.client.get(self.url, params)
df_empty = DataFrame(columns=list('ABC')) store.append('df', df_empty) self.assertRaises(KeyError, store.select, 'df')
if with_output_activation: output_activation = ACTIVATIONS[self.out_activation_] activations[i + 1] = output_activation(activations[i + 1])
if kwargs.get('server', False): task_action.Server = kwargs.get('server') else: return 'Required parameter "server" not found'
return v[::-1], W[:, ::-1]
coeffs = np.delete(np.copy(amplitudes), 0) coeffs.resize(int((coeffs.size + 1) / 2), 2)
assert isnull(fill_value)
name: shortname
return msg.strip()
if user: state_object.updated_user = user
xml = etree.fromstring(expr) xml = self.formulaInstance.preprocess_pmathml(xml) test = etree.tostring(xml)
block_structure = BlockStructureModulestoreData(root_block_usage_key=0) for block in blocks: block_structure._add_xblock(block.location, block)
from __future__ import unicode_literals
enrolled_students = enrolled_students[offset: offset + MAX_STUDENTS_PER_PAGE_GRADE_BOOK]
response = render_to_response('provider_login.html', { 'error': error, 'return_to': return_to })
self.user.is_active = False self.user.save()
self.assertTrue(ax1._shared_x_axes.joined(ax1, ax2)) self.assertTrue(ax2._shared_x_axes.joined(ax1, ax2))
drag_handle_html = '<span data-tooltip="Drag to reorder" class="drag-handle action"></span>' self.assertIn(drag_handle_html, html)
s = Series([1], dtype='float32') with tm.assert_produces_warning(FutureWarning): result = s.convert_objects(convert_dates='coerce', convert_numeric=False) assert_series_equal(result, s)
CourseEnrollment.enroll(self.user, self.course.id) self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course.id))
resp = self.client.get('/') self.assertEquals(resp['X-Frame-Options'], 'DENY')
self.fail('An exception should be thrown')
data = ['foo', 'bar', 'baz'] self.assertRaises(TypeError, Int64Index, data)
gp = GaussianProcess(corr='absolute_exponential', theta0=1e-4, thetaL=1e-12, thetaU=1e-2, nugget=1e-2, optimizer='Welch', regr="linear", random_state=0)
break
if not request.FILES['file_unicode'].name.endswith(UNICODE_FILENAME): return HttpResponseServerError()
setattr(self.options, option.dest, self.config[option.dest])
import re import time import datetime
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call
if isinstance(item, compat.string_types): return self.asobject.insert(loc, item) raise TypeError( "cannot insert DatetimeIndex with incompatible label")
import pymysql pymysql.install_as_MySQLdb() import MySQLdb import MySQLdb.cursors import MySQLdb.converters from MySQLdb.constants import FIELD_TYPE, FLAG HAS_MYSQLDB = True
self.assertEqual(response.status_code, 204)
if exc.winerror == 1332: return '' else: raise
env: /path/to/virtualenv/
with self.assertRaises(UnsupportedRevisionError): self.store.delete_item( private_leaf.location, self.user_id, revision=ModuleStoreEnum.RevisionOption.draft_preferred )
self.assertEqual(str(df2).splitlines()[0].split(), ['red'])
if len(other) == 1: other = np.array(other[0])
if not len(os.path.dirname(path)): path = create_tempfile(path)
W_irange = 2 / numpy.sqrt(nvis * nhid)
from salttesting.helpers import ensure_in_syspath, expensiveTest from salttesting import skipIf
self.assertTrue( makeFY5253LastOfMonthQuarter( 1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1) .year_has_extra_week(datetime(2005, 4, 2)))
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
notification_msg = MIMEMultipart('related') msg_alternative = MIMEMultipart('alternative') notification_msg.attach(msg_alternative) subject = _(u'Course Credit Eligibility')
from __future__ import absolute_import import logging import os import os.path import hashlib import re import json import yaml
table = self.table self.selection = Selection( self, where, start=start, stop=stop, **kwargs) values = self.selection.select_coords()
pass
result = self.panel4d.reindex(labels=['l1', 'l2']) assert_panel_equal(result['l2'], ref)
renderer = kwargs.pop('renderer', None) if renderer: self.renderer = renderer super(RendererMixin, self).__init__(*args, **kwargs)
data = {'var': '\xf2'} response = self.client.get('/get_view/', data)
def na_op(x, y): try: result = expressions.evaluate(op, str_rep, x, y, raise_on_error=True, **eval_kwargs) except TypeError:
xml_file = export_fs.open(LIBRARY_ROOT, 'w') xml_file.write(lxml.etree.tostring(root, pretty_print=True, encoding='utf-8')) xml_file.close()
if attr == 'parent_sequential_url': attr = 'parent_url' xml_attrs[attr] = val
import difflib import salt.utils import salt.utils.network import salt.loader
@property def _can_hold_na(self): return self._data._can_hold_na
log = logger.getLogger(__name__)
for p_type in pkgtypes: ret[p_type].update(set(expanded[p_type]))
try: dive.reviews.add(review1) except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
course_orphans = self.store.get_orphans(course_locator) self.assertEqual(len(course_orphans), 0) self.store.delete_item(vertical.location, self.user_id)
for db_alias in self.dbs.keys(): sh("cp {db_cache} {db}".format(db_cache=self.db_caches[db_alias], db=self.dbs[db_alias]))
to_concat = [convert_sparse(x, axis) for x in to_concat] result = np.concatenate(to_concat, axis=axis)
n_samples, n_features = X.shape max_features = ensemble.max_features
source_course = self.store.get_course( source_course.location.course_key, remove_version=False, remove_branch=False )
idx = PeriodIndex([2000, 2007, 2007, 2009, 2007], freq='A-JUN') ts = Series(np.random.randn(len(idx)), index=idx)
self.assertParentReferences( element, course_key, **kwargs )
password_label = _(u"Password")
from __future__ import absolute_import import warnings
if power_iteration_normalizer == 'auto': if n_iter <= 2: power_iteration_normalizer = 'none' else: power_iteration_normalizer = 'LU'
salt '*' win_wua.list_updates categories=['Feature Packs','Windows 8.1'] summary=True
self.assertIsInstance( descriptor._field_data._authored_data._source, OverrideFieldData )
from salt.ext import six
os.kill(parent_pid, 0)
return "is-editing" in self.q( css=self._bounded_selector(self.NAME_FIELD_WRAPPER_SELECTOR) )[0].get_attribute("class")
self.library = modulestore().get_library(self.lib_key)
try: import win32security import win32service import win32serviceutil import pywintypes HAS_WIN32_MODS = True except ImportError: HAS_WIN32_MODS = False
Article.objects.create(headline='Article_ with underscore', pub_date=datetime(2005, 11, 20))
DATE_INPUT_FORMATS = [
auth = _auth(profile=profile)
if band.nodata_value is not None: pixeltype += 64
world.wait_for( lambda _: world.css_has_value(grace_period_css, grace_period) )
from __future__ import absolute_import import os import time import logging
phase_data = self.run_data.setdefault(test_phase, {}) amount_data = phase_data.setdefault(amount_md, {}) __ = amount_data.setdefault(modulestores, time_taken)
other_course_key = CourseKey.from_string("edX/other/2015") self._configure_credit(course_key=other_course_key) second_request = api.create_credit_request(other_course_key, self.PROVIDER_ID, self.USER_INFO["username"])
with self.assertRaises(ValueError): InvalidModelForm(instance=Category)
self.assertLocationCommentPresent(self.PO_FILE, 'Translatable literal #6b', 'templates', 'test.html')
self.options.log_level = self._default_logging_level_
config = microsite.values return config.get(val_name, default)
result = read_csv(filename, index_col=0) result = result.rename(columns={'a.1': 'a'}) assert_frame_equal(result, df)
with self.assertRaises(TypeError): microsite.get_backend('microsite_configuration.microsite.get_backend', BaseMicrositeBackend)
query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(now, query) self.assertIs(result, None)
if is_extension_type(value): return value
ide_controllers[device.key] = len(device.device)
self._initialize_handlers()
if not keepdb: self._destroy_test_db(test_database_name, verbosity)
if val == val: nobs[lab, j] += 1 sumx[lab, j] += val
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
dquality_dir = (Env.REPORT_DIR / "diff_quality").makedirs_p()
self.should_fetch_course = kwargs.get('should_fetch_course') self.imports_dir = path('test_root/courses/')
self.assertFalse(section.due_date) self.assertFalse(section.policy)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
for member in pkg_files: member.uid = uid member.gid = gid member.uname = uname member.gname = gname
self._fields[key.field_name] = value
role_class(*args)
labname = self._encode(_pad_bytes(self.labname[:32], 33)) bio.write(labname)
sparse_results = sparse_classifier.staged_decision_function( X_test_sparse) dense_results = dense_classifier.staged_decision_function(X_test) for sprase_res, dense_res in zip(sparse_results, dense_results): assert_array_equal(sprase_res, dense_res)
elif self._selection is not None:
import salt.loader import salt.runner import salt.state import salt.utils import salt.utils.schema as S from salt.utils.doc import strip_rst as _strip_rst from salt.ext.six.moves import zip
block = self.get_a_block() self.assertEqual(block.inherited, "the default") self.assertEqual(block.not_inherited, "nothing")
module_type = BlockTypeKeyField(max_length=64, db_index=True)
response = self.client.get('/raises400/') self.assertContains(response, '<div class="context" id="', status_code=400)
FIELD_BLACKLIST = ['last_activity_at', 'team_size']
fstypes.add(arg)
return transformer.transform(X) * transformer_weights[name]
self.m2m_column_name = curry(self._get_m2m_attr, related, 'column') self.m2m_reverse_name = curry(self._get_m2m_reverse_attr, related, 'column')
if isinstance(exc, zmq.ZMQError) and exc.errno == errno.EINTR: return
import os import os.path import logging
self.values_select = []
func = wrapper
expression_wrapper = '(%s)' sql = connection.ops.combine_duration_expression(self.connector, expressions) return expression_wrapper % sql, expression_params
def _get_items(self): return self.axes[0]
self.download_collection = win32com.client.Dispatch('Microsoft.Update.UpdateColl')
PER_REMOTE_OVERRIDES = ('ssl_verify',)
keys = sorted(_registered_options.keys())
obj = obj.copy() obj.index.freq = self.freq return obj
result = SparseSeries(sparse, name='x') tm.assert_sp_series_equal(result, sparse, check_names=False) self.assertEqual(result.name, 'x')
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
config_data = __salt__['config.option']('virt.nic', {}).get( profile_name, None )
npm.__salt__ = {}
exclude.extend(self.form._meta.exclude)
result = to_timedelta(2, unit=unit) expected = Timedelta(np.timedelta64(2, transform(unit)).astype( 'timedelta64[ns]')) self.assertEqual(result, expected)
wi = W_list[i] hi_mean += T.dot(samples[i-1], wi) * beta
([UnregisteredTestTransformer3()], [UnregisteredTestTransformer3.name()]),
while remaining != 0: assert remaining > 0, 'remaining bytes to read should never go negative'
if node_ids: if labels: node_string += 'node ' node_string += characters[0] + str(node_id) + characters[4]
predictions = cval.cross_val_predict(clf, X_sparse, X) assert_equal(predictions.shape, (10, 2))
content.pop('group_id', None)
self.context['return_to_annotation'] = True xml = self.render_to_xml(self.context) self.assert_has_xpath(xml, xpath, self.context)
clf = MockClassifier() grid_search = GridSearchCV(clf, {'foo_param': [1]}) grid_search.fit(X, y) assert_true(hasattr(grid_search, "grid_scores_"))
SignatureValidator.verify = MagicMock(return_value=True) self.consumer = models.LtiConsumer( consumer_name='consumer', consumer_key=LTI_DEFAULT_PARAMS['oauth_consumer_key'], consumer_secret='secret' ) self.consumer.save()
with self.assertRaises(forms.ValidationError): f.clean('13:30:05')
from pandas.core.config import get_default_val terminal_width = get_default_val('display.width') terminal_height = get_default_val('display.height')
PRIVATE_REQS = 'requirements/private.txt' if os.path.exists(PRIVATE_REQS): PYTHON_REQ_FILES.append(PRIVATE_REQS)
kf = cval.KFold(300, 3) check_cv_coverage(kf, expected_n_iter=3, n_samples=300)
if "language_proficiencies" in update: old_language_proficiencies = legacy_profile_serializer.data["language_proficiencies"]
self.sequential.children = [self.vertical.location] self.sequential = self.store.update_item(self.sequential, ModuleStoreEnum.UserID.test)
free = GEOSFuncFactory('GEOSFree') free.argtypes = [c_void_p]
self.assertEqual(Employee.objects.get(employee_code=123), self.dan)
return False
socket.setdefaulttimeout(10)
self.assertEqual( list(iter_format_modules('de', 'i18n.other.locale')), [test_mod, default_mod])
self.assertIn( 'Invalid String Value for Enabled', self.run_function('system.set_disable_keyboard_on_lock', ['spongebob']))
out_path = __opts__['reactor_path']
self.assertIn('/courses/' + self.course_key.to_deprecated_string() + '/jump_to_id/vertical_test', html)
if offset.isdigit(): offset = int(offset) else: offset = 0
from __future__ import absolute_import
assert_raises(ValueError, sel.transform, np.array([[1], [2]]))
'SQUELCH_PII_IN_LOGS': True,
content = ET.Element('ve')
from __future__ import unicode_literals
win_ntp.__salt__ = {}
continue
post_data = models.model_to_dict(provider1) del post_data['icon_image']
self.selenium.switch_to.window(main_window) self.wait_for_value('#id_main_band', '42')
#add_module_names = True
pred = Y_proba > .5 assert_array_equal(pred, Y_pred)
from __future__ import unicode_literals
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit()
from pandas.tseries.timedeltas import to_timedelta try: return to_timedelta(v)._values.reshape(shape) except: return v
import salt.utils
from __future__ import absolute_import
if retcode_sv != 0: os.unlink(os.path.join([_service_path(name), name])) return False return True
idx = PeriodIndex([], freq='M') result = idx._shallow_copy() expected = idx
X, y = make_classification(n_samples=20, n_classes=2, random_state=0)
return none_fill(row[0]), row[1:]
if p.active and p.groups and (schemes is None or p.scheme.name in schemes):
MKTG_URL_LINK_MAP.update(ENV_TOKENS.get('MKTG_URL_LINK_MAP', {}))
assert_not_debug_mode()
([], CourseMode.DEFAULT_MODE_SLUG),
top_idx = set(component.argsort()[-3:][::-1]) assert_true(tuple(sorted(top_idx)) in correct_idx_grps)
from __future__ import absolute_import import libcloud.security import platform import os
config.groups[0].remove() config.save()
with override_settings(SESSION_EXPIRE_AT_BROWSER_CLOSE=False): self.session.set_expiry(10) self.assertFalse(self.session.get_expire_at_browser_close())
X = self.estimators_[0]._validate_X_predict(X, check_input=True) n_samples = X.shape[0]
self.client.get( pipeline.get_login_url(self.provider.provider_id, pipeline.AUTH_ENTRY_LOGIN))
SSL_AUTH_EMAIL_DOMAIN = ENV_TOKENS.get("SSL_AUTH_EMAIL_DOMAIN", "MIT.EDU") SSL_AUTH_DN_FORMAT_STRING = ENV_TOKENS.get("SSL_AUTH_DN_FORMAT_STRING", "/C=US/ST=Massachusetts/O=Massachusetts Institute of Technology/OU=Client CA v1/CN={0}/emailAddress={1}")
self.assertRaises(Exception, BlockIndex, 10, [5], [10])
import salt.ext.six as six
lat = models.CharField(max_length=100) lon = models.CharField(max_length=100)
logistic_classifier = linear_model.LogisticRegression(C=100.0) logistic_classifier.fit(X_train, Y_train)
self._reset_event_aggregation() self.local.event.set_event_handler(self._process_event)
import salt.utils from salt.exceptions import CommandExecutionError, SaltRenderError from salt.ext.six import string_types
g.precisions_init = precisions_bad_shape[covar_type] assert_raise_message(ValueError, "The parameter '%s precision' should have " "the shape of" % covar_type, g.fit, X)
from __future__ import absolute_import import logging
_period_code_map.update({
import salt.utils
plt.figure() plt.legend(legend_rects, legend_labels, loc='upper left')
from __future__ import absolute_import from random import randint from re import findall import pprint import logging import time import os.path import subprocess
if fit_intercept: ret[:n_features] += s[-1] * dd_intercept ret[-1] = dd_intercept.dot(s[:n_features]) ret[-1] += d.sum() * s[-1] return ret
for mode in ["honor", "verified"]: CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
import salt.utils import salt.utils.compat import salt.ext.six as six from salt.exceptions import SaltInvocationError, CommandExecutionError
stamp = Timestamp('2012-01-01')
available_version = salt.utils.alias_function(latest_version, 'available_version')
assert source == '' return None
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch from salttesting.helpers import ensure_in_syspath
url(r'raises/$', views.raises),
self.assertEqual(CourseEnrollment.objects.count(), 1) enrollment = CourseEnrollment.objects.get(course_id=course_key) self.assertEqual(enrollment.user.username, "test")
if isinstance(key, string_types): self.env.swapkey(self.local_name, key, new_value=value)
import logging log = logging.getLogger(__name__)
score[i] += n_ranked_above / rank[label]
self.create_programs_config(enable_certification=False)
INETARRAY_OID = 1041 INETARRAY = psycopg2.extensions.new_array_type( (INETARRAY_OID,), 'INETARRAY', psycopg2.extensions.UNICODE, ) psycopg2.extensions.register_type(INETARRAY)
import tornado.ioloop
indent_next = logical_line.endswith(':')
response = self.client.get('/syndication/naive-dates/') doc = minidom.parseString(response.content) updated = doc.getElementsByTagName('updated')[0].firstChild.wholeText
return {}
storage.staticfiles_storage.hashed_files.clear()
warnings.simplefilter('ignore', category=RemovedInDjango20Warning) obj = mark_for_escaping(new_obj) escape_isnt_last_filter = False
verbose = min(verbose, 3)
break
self.assertEqual(Item.objects.get(q1), item) self.assertEqual(Item.objects.get(q2), item)
params = estimator.get_params() original_params = deepcopy(params)
courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(len(courses_list), 1)
mixed_stores.remove(store) mixed_stores.insert(0, store) return
if not salt.utils.is_darwin(): return False, 'Not Darwin'
self.assertEqual(ogc_hex, pnt_2d.hex) self.assertEqual(ogc_hex_3d, pnt_3d.hex)
est = DummyRegressor() est.fit(X_learn, y_learn) y_pred_learn = est.predict(X_learn) y_pred_test = est.predict(X_test)
initialize_permissions(destination_course_key, User.objects.get(id=user_id))
restart = False
uuid = request["parameters"]["request_uuid"] with self.assertNumQueries(3): api.update_credit_request_status(uuid, self.PROVIDER_ID, "approved")
assert_equal(slo.get_n_splits(X, y, labels=l), n_iter)
for st in (4, 7, 1000): clear_counties() lm.save(step=st, strict=True) self.county_helper(county_feat=False)
def dec(func): return self.filter_function(func, **flags) return dec
if local_loglevel not in LOG_LEVELS: local_loglevel = 'INFO'
from __future__ import absolute_import, print_function import optparse import pprint import time import os
from __future__ import absolute_import import logging import json
from __future__ import absolute_import
f = plt.figure(figsize=(7, 5)) for index, image_index in enumerate(uncertainty_index): image = images[image_index]
__virtualname__ = 'partition'
leaves = est.apply(X) leave_indicator = [node_indicator[i, j] for i, j in enumerate(leaves)] assert_array_almost_equal(leave_indicator, np.ones(shape=n_samples))
version = sys.version_info if version[0] == 3: if version[1] == 3: reload = None else: from importlib import reload
_update_badge_context(context, course, user)
for line in f:
codeparam_element = etree.SubElement(response_element, "codeparam")
html_problem_semantics = [ "codeparam", "responseparam", "answer", "script", "hintgroup", "openendedparam", "openendedrubric", ]
response = c.get("/login_protected_redirect_view/")
return get_user_model()._meta.pk.to_python(request.session[SESSION_KEY])
self.assertEqual(response.status_code, 200) certificate_exception = json.loads(response.content)
from __future__ import unicode_literals
session = requests.Session() response = session.get(LMS_BASE_URL + "/auto_auth?superuser=true")
option1=main1
def create_pandas_abc_type(name, attr, comp): @classmethod def _check(cls, inst): return getattr(inst, attr, '_typ') in comp
lib = glob.glob(os.path.join( '/opt/local/lib', 'libcrypto.so*')) lib = lib[0] if len(lib) > 0 else None
if code.ndim == 1: code = code[np.newaxis, :] return code
log.error('No host given to create this VM on') raise SaltCloudExecutionFailure
digits = datasets.load_digits(n_class=9)
for freq in ['Y', 'M', 'foobar']: self.assertRaises(ValueError, lambda: t1.round(freq))
text = f.widget.format_value(result) self.assertEqual(text, '01:30:05 PM 21/12/2010')
extra['w'] = extra.get('w', 0)
x=dataset_resolver() logger.info(x.resolve_dataset("toaster-oven")) logger.info(x.resolve_dataset("fake-dataset"))
self.cohort_management_page.select_discussion_topic(self.inline_key)
self.tsframe.index = old_index
__virtualname__ = 'docker'
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import destructiveTest
upload_csv_to_report_store(rows, 'grade_report', course_id, start_date)
if not _np_version_under1p9: raise nose.SkipTest("Numpy version is greater than 1.9")
self.assertTrue(getattr(vertical, "is_draft", False))
assert_raises(ValueError, partial_dependence, GradientBoostingClassifier(), [0], X=X)
exc_info_on_loglevel=logging.DEBUG
self.assertEqual(len(self.certificates_page.certificates), 1)
_view_name = None client_class = PatchedClient
self.asset_collection.update( {'_id': course_assets.doc_id}, {'$set': updates_by_type} ) return True
if not uninstaller: uninstaller = pkginfo[version_num].get('installer')
JoblibException.__init__(self, message, etype) self.message = message self.etype = etype
tm.reset_testing_mode()
assert_array_equal(y, [1, 2, 3, 4, 1, 2])
def geometry_columns(self): from django.contrib.gis.db.backends.oracle.models import OracleGeometryColumns return OracleGeometryColumns
dup_gr_nbrs = np.all(sample_mask, axis=1) sample_mask[:, 0][dup_gr_nbrs] = False
reset_time = datetime.now(UTC) + timedelta(seconds=300) with freeze_time(reset_time): response = self.client.post(url) self.assertEquals(response.status_code, 404)
with np.errstate(divide='ignore'): retval = 1. / dist return retval ** 2
del self.send_queue[0] continue
data = list(storage) self.assertTrue(storage.used) self.assertEqual(data, list(storage))
pass
match.__grains__ = {} match.__salt__ = {} match.__opts__ = {} match.__pillar__ = {}
python_shell = False if '*.' in cmd: python_shell = True
with self.assertRaises(ValueError): mock_strftime_localized(test_datetime, 'BAD_FORMAT_SPECIFIER')
ModeCreationPage(self.browser, self.course_id).visit()
return
from salt.modules import pw_user from salt.exceptions import CommandExecutionError try: import pwd HAS_PWD = True except ImportError: HAS_PWD = False
ret.append('.'.join(comps[:comps.index('ko')]))
if self.savepoint and not connection.needs_rollback: sid = connection.savepoint() connection.savepoint_ids.append(sid) else: connection.savepoint_ids.append(None)
if data.get('essential'): return super(IDTokenHandler, self).claim_staff_courses(data) else: return None
self.assertIn(a, Article.objects.all()) self.assertTrue(Article.objects.filter(id=a.id).exists())
self.srs = ds_input.get('srid')
if ndim is None: if isinstance(result, dict): ndim = getattr(list(compat.itervalues(result))[0], 'ndim', 0)
(['honor', 'verified', 'audit'], 'course_modes_choose', CourseMode.HONOR),
from datetime import datetime, date import time import re import copy import itertools import warnings import os
@patch('salt.utils.which', lambda exe: exe) def test_existing_binary_in_linux(self): self.assertTrue(salt.utils.which('this-binary-exists-under-linux'))
return set_system_date_time(hours=int(dt_obj.strftime('%H')), minutes=int(dt_obj.strftime('%M')), seconds=int(dt_obj.strftime('%S')))
username = request.data.get('username') if not username: raise ValidationError({'detail': 'A username must be specified.'})
if field.error_messages['incomplete'] not in errors: errors.append(field.error_messages['incomplete']) continue
from __future__ import absolute_import
extra['tz_aware'] = extra.get('tz_aware', True)
self.assertIn(SESSION_KEY, self.client.session)
DEBUG_PROPAGATE_EXCEPTIONS = False
problem = new_loncapa_problem(xml_str, capa_system=the_system) rendered_html = etree.XML(problem.get_html())
if name in list_folders(location): return '{0} already exists'.format(name)
if isinstance(ret, dict) and 'newname' in ret: salt.utils.cloud.remove_key( self.opts['pki_dir'], ret['newname'] ) continue
lhs = Series(randint(5, size=5)) expect = -lhs result = pd.eval(expr, engine=self.engine, parser=self.parser) assert_series_equal(expect, result)
self.assertIn( 'Failed to setup the Syslog logging handler', '\n'.join(ret[1]) ) self.assertEqual(ret[2], 2)
for probe_name in new_probes_keys_set: new_probes[probe_name] = expected_probes.pop(probe_name)
self.client.logout()
module = CapaFactory.create(max_attempts="0", attempts="2") self.assertTrue(module.closed())
for dsc in dscs: afile = os.path.basename(dsc) adist = os.path.join(dest_dir, afile) shutil.copy(dsc, adist)
return None
if self._sample_switch: self._apply_corruption(activations, self._layer_samplers, idx_iter) return activations
'mode': 'r+' if memmap.mode in ('r+', 'w+') else 'r'}
return self.base_loader.load_template_source(template_name, template_dirs)
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
if video_list: sub_attr = source_subs_name try: generate_subs_from_source({1: sub_attr}, source_subs_ext, source_subs_filedata, item)
if (start != int(start) or stop != int(stop) or step != int(step)): return super_getitem(key)
X = X.reshape(-1, 2 * numpy.prod(self.original_image_shape))
X, y = make_hastie_10_2(n_samples=20, random_state=1)
self._chk_truncate() strcols = self._to_str_columns() text = self.adj.adjoin(1, *strcols)
elif trigger_types[trigger_type] == TASK_TRIGGER_BOOT: trigger.Id = 'OnBoot_ID1'
self.assertEqual( info['blocks'], [[reverse_usage_url('container_handler', vertical2.location), 'notes problem in vert2']] )
if api != 2: log.error('Foreman API v2 is supported only, please specify' 'version 2 in your Salt master config') raise Exception
self.assertEqual(ProfileCollection.objects.all().count(), 1) self.assertEqual(Profile.objects.all().count(), 3)
s = (y == 2) + (y == 4) X = X[s, :] y = y[s] y = (y != 2).astype(int)
CLIENT_TIMEOUT = 60
offsets = [pd.offsets.Hour(2), timedelta(hours=2), np.timedelta64(2, 'h'), Timedelta(hours=2)]
assert_series_equal(df[:0].dtypes, ex_dtypes) assert_series_equal(df[:0].ftypes, ex_ftypes)
fresult = first.value - foffset
result = ts - ts expected = Timedelta('0 days') _check(result, expected)
self.assertFalse(os.path.exists(path_test + '.bak'))
ret = envstate.setenv('test', 'other') self.assertEqual(ret['changes'], {})
self._set_opt_in_pref(self.user, self.TEST_ORG, True) self._set_opt_in_pref(self.user, "org_alias", False)
df_badcolumn = DataFrame( {'col1': [1, 2], 'custom_column_name': [2, 2]})
assert_almost_equal(clf.coef_, clf_weighted.coef_, decimal=2) assert_almost_equal(clf.coef_, clf_balanced.coef_, decimal=2)
self.check_event_response_by_key( 'add_resource', self.test_recommendations[self.resource_id], 'id', self.resource_id )
kwargs.setdefault('widget', super(IntegerField, self).widget)
self.assertTrue(hasattr(course_overview_after, 'image_set')) image_set = course_overview_after.image_set self.assertEqual(image_set.small_url, broken_small_url) self.assertEqual(image_set.large_url, broken_large_url)
self.release_languages('fa')
if cherrypy.request.method == 'OPTIONS': cherrypy.serving.request.handler = cors_handler
eps = 1e-5 n, m = V.shape W, H = _initialize_nmf(V, r, init, random_state=0)
CourseFinanceAdminRole(self.course.id).remove_users(self.instructor)
result = isnull(['foo', 'bar']) assert (not result.any())
if RateLimitConfiguration.current().enabled: return func(*args, **kwargs) else: msg = "Rate limiting is disabled because `RateLimitConfiguration` is not enabled." LOGGER.info(msg) return
def contains(self, other): "Returns true if other.within(this) returns true." return capi.geos_contains(self.ptr, other.ptr)
for sql in self.deferred_sql: self.execute(sql) self.deferred_sql = [] if restore_pk_field: restore_pk_field.primary_key = True
TMPDIR = tempfile.mkdtemp(prefix='django_') tempfile.tempdir = os.environ['TMPDIR'] = TMPDIR
raise NotImplementedError()
_NEUPD_WHICH = ['LM', 'SM', 'LR', 'SR', 'LI', 'SI']
n_responses = 3 y = rng.randn(n_samples, n_responses) r.fit(x, y) assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))
time.sleep(1)
repo = kwargs.get('repo', '') if not fromrepo and repo: fromrepo = repo
from salt.modules import moosefs
from __future__ import unicode_literals
return store.create_item(user.id, usage_key.course_key, usage_key.block_type, block_id=usage_key.block_id)
rho = evals[:, n_components:].sum(1) / evals[:, :n_components].sum(1) eta = np.median(rho)
import logging
store = HDFStore(path, mode='w') store.append('df', df)
module.data = rewrite_nonportable_content_links( source_course_id, dest_course_id, module.data )
import copy import threading import collections from contextlib import contextmanager
'enable_lspci': bool,
import logging import json import salt.ext.six as six
cauth = EmbargoedCourse(course_id=course_id, embargoed=True) cauth.save()
inline_formset = generic_inlineformset_factory(Media, exclude=('url',))
keys, values_lists = zip(*sorted(sub_grid.items())[::-1]) sizes = [len(v_list) for v_list in values_lists] total = np.product(sizes)
from __future__ import absolute_import
class EpisodePermanent(Episode): pass
MOCK_HOSTNAME = 'very.long.complex.fqdn.that.is.crazy.extra.long.example.com'
self.assertOLXIsDraftOnly(block_list_to_revert) with self.assertRaises(InvalidVersionError): self.revert_to_published(block_list_to_revert)
log = logging.getLogger() log = logging.getLogger(__name__) info = log.info
GeneratedCertificate.eligible_certificates.all().delete()
client_kwargs['base_url'] = os.environ.get('DOCKER_HOST')
extract_dir_relative = path.relpath(extract_dir, settings.DATA_DIR)
non_editable_fields.extend([DiscussionDescriptor.discussion_id, DiscussionDescriptor.sort_key]) return non_editable_fields
contentstore().save(content) del_cached_content(content.location)
address_predefined = 'DJANGO_LIVE_TEST_SERVER_ADDRESS' in os.environ old_address = os.environ.get('DJANGO_LIVE_TEST_SERVER_ADDRESS')
from __future__ import absolute_import
self.assertRaises(SyntaxError, df.eval, 'd c = a + b')
i2 = PeriodIndex([end_intv, Period('2005-05-05', 'B')]) self.assertEqual(len(i2), 2) self.assertEqual(i2[0], end_intv)
iterator = itertools.islice(iterator, pre_dispatch)
self.conn.get_rest_apis.return_value = no_apis_ret self.conn.create_rest_api.side_effect = ClientError(error_content, 'create_rest_api')
s = Series(tslib.iNaT, index=lrange(5)) self.assertFalse(isnull(s).all())
expand = False if result.ndim == 1 else True
#
from __future__ import unicode_literals
STATIC_GRAB = False DEV_CONTENT = True
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return view(request, course, ccx)
dist_dict = defaultdict(int) dist_dict.update(single_source_shortest_path_length(dist_matrix, i))
X = g.sample(n_samples=100) g = self.model(n_components=self.n_components, covariance_type=self.covariance_type, random_state=rng, min_covar=1e-1, n_iter=1, init_params=params) g.fit(X)
return True
simplefilter('ignore')
self.lc_block.max_count = 1 self.lc_block.capa_type = 'customresponse' self.lc_block.refresh_children() result = self.lc_block.validate()
stamp = long(1337299200000000000)
__virtualname__ = 'timezone'
self.mean_ = numpy.mean(X, axis=0) X -= self.mean_
required_boto_version = '2.8.0' required_moto_version = '0.3.7'
from __future__ import absolute_import import os import logging import socket import pprint import yaml
from __future__ import absolute_import
result = td.sum() expected = to_timedelta('00:01:21') self.assertEqual(result, expected)
last_name_label = _(u"Last Name")
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
try: fileserver.init() except FileserverConfigError as exc: critical_errors.append('{0}'.format(exc))
errors = to_list(errors)
def import_epsg(self, epsg): "Imports the Spatial Reference from the EPSG code (an integer)." capi.from_epsg(self.ptr, epsg)
for klass, count in instance_count.items(): self.assertEqual(count, klass.objects.count())
from __future__ import unicode_literals
new_indexer = np.arange(len(indexer)) new_indexer[cur_indexer] = np.arange(len(cur_labels)) new_indexer[missing_indexer] = -1
syslog_opts.pop('socktype', None)
problem = new_loncapa_problem(xml_str)
response = self._load_dashboard() self.assertContains(response, "credit-eligibility-msg") self.assertContains(response, "purchase-credit-btn")
world.create_user('robot', 'test') user = User.objects.get(username='robot')
return redirect_with_get('register_user', request.GET)
self.assertTrue(linode._validate_name('foo123bar'))
result = sparse.loc[sparse.x % 2 == 1] exp = orig.loc[orig.x % 2 == 1].to_sparse() tm.assert_sp_frame_equal(result, exp)
self.config.pop(cli_log_path)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.opts = opts self.grains = grains self.minion_id = minion_id self.ext = ext self.functions = functions self.pillar = pillar self.pillarenv = pillarenv
idx = Index([0, 1, 2]) frame = DataFrame({}, index=idx) self.assertIs(frame.index, idx)
from salt.modules import rpm
check_ortho(pls_ca.x_weights_, "x weights are not orthogonal") check_ortho(pls_ca.y_weights_, "y weights are not orthogonal")
instance.__flatten__ = True
mixed = Series(['a_b_c', NA, 'c_d_e', True, datetime.today(), None, 1, 2.])
if tz is not None: result = result.tz_localize('UTC').tz_convert(tz) return result
salt.utils.daemonize()
self.frame['A'][:5] = nan self.frame['B'][:10] = nan cov = self.frame.cov()
super(VectorSequenceSpace, self)._validate_impl(is_numeric, batch)
log.error('PhotoVerification: Error parsing this error message: %s', self.error_msg) return _("There was an error verifying your ID photos.")
with patch('mongodb_proxy.MongoProxy') as mock_proxy: mock_proxy.return_value.alive.return_value = False useless_conn = MongoConnection('useless', 'useless', 'useless')
buttons = world.css_find('div.new-component-{} button'.format(category))
monitoring_dataset = DenseDesignMatrix(X=X)
self.local = salt.client.get_local_client( self.opts['_minion_conf_file'], io_loop=self.io_loop)
mixed_appended = self.mixed_frame[:5].append(self.frame[5:]) mixed_appended2 = self.frame[:5].append(self.mixed_frame[5:])
self.assertIn( 'Invalid value passed for seconds.', self.run_funcdtion('system.set_restart_delay', [70]))
raised = False try: fmt.format(numpy.zeros(10, dtype='float64')) except TypeError: raised = True assert raised
update_subtask_status(entry_id, task_id, subtask_status)
url( r'^(?P<certificate_uuid>[0-9a-f]{32})$', views.render_cert_by_uuid, name='render_cert_by_uuid' ),
end = datetime(year=2013, month=11, day=2, hour=0, minute=0, tzinfo=dateutil.tz.tzutc())
save_path.replace('\\', r'\\')
course_module = modulestore().get_course(course_id) if course_module is None: return Response(status=status.HTTP_404_NOT_FOUND)
'openedx.core.djangoapps.programs',
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
result = d['a'].fillna(False) | d['b'] expected = Series([True, True]) assert_series_equal(result, expected)
self.off = np.array(self.off, dtype=np.int32) self.val = np.array(self.val, dtype=np.int32)
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
df.iloc[[0, 1], [0, 1]] = df.iloc[[0, 1], [0, 1]] assert_frame_equal(df, expected)
assert_equal(X_counted.nnz, X_hashed.nnz)
layers = [model.visible_layer] + model.hidden_layers
userKeys += ['id_rsa', 'id_dsa', 'id_ecdsa', 'id_ed25519']
from __future__ import absolute_import import os import random import string
expected_index = (pd.period_range(start=start, end=end, freq='D') - 1) expected = pd.Series(1, index=expected_index) assert_series_equal(result, expected)
from __future__ import absolute_import import os import string import random
import salt.utils.jid import salt.returners
context['script_code'] = all_code context['python_path'] = python_path context['extra_files'] = extra_files or None return context
n_samples = len(digits.images) X = digits.images.reshape((n_samples, -1)) y = digits.target
subscription['endpoint'] = _endpoint
X_checked = assert_warns(DeprecationWarning, check_array, [42], ensure_2d=True) assert_array_equal(np.array([[42]]), X_checked)
x, new_x = x._values.astype('i8'), new_x.astype('i8')
self.assertNotIn(self.seq_loc, chapter.children)
(y,x) = (oy,ox) if mode=='full' else (oy,ox) - topleft
return [tuple(items.split("=")) for items in opt]
COMPREHENSIVE_THEME_DIR = ""
html_translator_class = "djangodocs.DjangoHTMLTranslator"
a = Article.objects.get(pk=a.pk) self.assertEqual(a.misc_data, '') self.assertIs(type(a.misc_data), six.text_type)
tmp = __salt__['config.option'](attributes_from_pillar, {}) if attributes: attributes = dictupdate.update(tmp, attributes) else: attributes = tmp
from __future__ import unicode_literals
idx = Index(np.arange(10))
self.course_outline.open_subsection_settings_dialog()
clear_cmd = '/usr/sbin/svcadm clear {0}'.format(name) __salt__['cmd.retcode'](clear_cmd, python_shell=False) return not __salt__['cmd.retcode'](cmd, python_shell=False)
v = value.value[result]
if third_party_auth.is_enabled() and pipeline.running(request): running_pipeline = pipeline.get(request) redirect_url = pipeline.get_complete_url(running_pipeline['backend'])
code = "1/0" g = {} cache = {} with self.assertRaises(SafeExecException): safe_exec(code, g, cache=DictCache(cache))
expected = df.copy()
assert len(state) == 2 if isinstance(coeffs, str): coeffs = float(coeffs) assert isinstance(coeffs, float) _, state = state state = [state] coeffs = [coeffs]
from distutils.version import LooseVersion from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, skip_if_binaries_missing ) ensure_in_syspath('../..')
if self.selection.filter is not None: for field, op, filt in self.selection.filter.format():
self.assertQuerysetEqual( Annotation.objects.exclude(tag__children__name="t2"), ['<Annotation: a2>'] )
cp = s.copy() cp.ix[4:10] = 0 self.assertTrue((cp.ix[4:10] == 0).all())
resp = self.client.get_html( get_url(handler, course_key, 'course_key_string') ) self.assertEqual(resp.status_code, 200)
if connection.features.interprets_empty_strings_as_nulls: expected_null_imagefield_repr = '' else: expected_null_imagefield_repr = None
if e in punish: second = punish.index(e) else: second = -1
X = 1. / (np.arange(1, 11) + np.arange(0, 10)[:, np.newaxis]) y = np.ones(10)
log = logging.getLogger(__name__)
__BACKUP_ATTRIBUTE_NAME = '__monkey_patch'
split_test = self._assert_children(2) group_id_to_child = split_test.group_id_to_child.copy() self.assertEqual(2, len(group_id_to_child))
from __future__ import unicode_literals
if self.transcripts: for language in self.transcripts.keys(): _update_transcript_for_index(language)
from __future__ import unicode_literals
n_topics, X = _build_sparse_mtx() lda = LatentDirichletAllocation(n_topics=n_topics, max_iter=10, random_state=0) distr = lda.fit_transform(X) perplexity_1 = lda.perplexity(X, distr, sub_sampling=False)
from __future__ import absolute_import
import salt.ext.six as six
__virtualname__ = 'svn'
custom_form = get_registration_extension_form()
s['select_field'] = AreaField('sq_m')
with self.assertRaises(transaction.TransactionManagementError): r2.save(force_update=True)
def _translate_newlines(self, data): if data is None or not data: return return data.replace('\r\n', os.linesep)
cmd = 'which zfs'
votes = np.round(ovo_decision) normalized_confidences = ovo_decision - votes
mpoly = MultiPolygon(poly.clone(), poly) self.assertEqual(8.0, mpoly.length)
for dt in [dtype_str, 'object']: f = getattr(_algos, "%s_%s" % (fname, dtype_str), None) if f is not None: return f
from __future__ import absolute_import
s = Series([1, 2, 3, 4], index=list('abde'))
self.assertAlmostEqual(self.ts[:15].cov(self.ts[5:]), self.ts[5:15].std() ** 2)
import salt.utils import salt.utils.templates import salt.utils.validate.net import salt.utils.odict
uid_patch = patch('onelogin.saml2.utils.OneLogin_Saml2_Utils.generate_unique_id', return_value='TESTID') uid_patch.start() self.addCleanup(uid_patch.stop)
texinfo_documents = [( master_doc, "django", "", "", "Django", "Documentation of the Django framework", "Web development", False )]
if 'database' not in kwargs: return False if user_exists(username, **kwargs): return False
X_mean = X.mean(axis=-1) X -= X_mean[:, np.newaxis]
self.usecols = _validate_usecols_arg(self._reader.usecols)
addr_str = str(address) self._ip = self._ip_int_from_string(addr_str)
error_bad_lines=True, warn_bad_lines=True,
for algorithm in ALGORITHMS:
settings = partitioned_fields[Scope.settings] settings = self._serialize_fields(block_key.type, settings) if not is_updated: is_updated = self._compare_settings(settings, original_entry.fields)
with Timer() as iteration_over_groups_time_1: courses_list, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(len(courses_list), USER_COURSES_COUNT)
indexer = [slice(None)] * self.ndim indexer[axis] = loc indexer = tuple(indexer)
os.rmdir(path)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
self.navigate_to_video() execute_video_steps(tab1_video_names)
import urllib.parse quote = urllib.parse.quote
add_geom = void_output(lgdal.OGR_G_AddGeometry, [c_void_p, c_void_p]) import_wkt = void_output(lgdal.OGR_G_ImportFromWkt, [c_void_p, POINTER(c_char_p)])
self.assertFalse(payload.get('success')) self.assertIn('incorrect', payload.get('value'))
clf = MyEstimator(empty=np.nan) clf2 = clone(clf)
comb[comb < 1] = 5 expected = Series([5, 1, 2, 5, 1, 2], index=[0, 1, 2, 0, 1, 2]) assert_series_equal(comb, expected)
self._compare(o.head(len(o) + 1), o) self._compare(o.tail(len(o) + 1), o)
if false_discovery_rate != 0: assert_greater(false_discovery_rate, alpha / 10)
NO_RECEIVERS = object()
rs = self.frame.copy() rs.sortlevel(0, inplace=True) assert_frame_equal(rs, self.frame.sortlevel(0))
df = DataFrame(columns=['A', 'B'])
problem_state = json.loads(studentmodule.state) problem_state["attempts"] = 0
self.video.show_captions()
attempt = self._submit_attempt(request.user, face_image, photo_id_image, initial_verification)
super(LineString, self).__init__(self._init_func(cs.ptr), srid=srid)
'staff_access': True, 'ordered_grades': sorted(course.grade_cutoffs.items(), key=lambda i: i[1], reverse=True),
response = self._regenerate(course_key=self.CERT_COURSE_KEY) self.assertEqual(response.status_code, 400)
train, valid, test, transfer = utlc.load_ndarray_dataset("ule", normalize=True, transfer=True) assert train.shape[0] == transfer.shape[0]
is_enrolled = CourseEnrollment.is_enrolled(self.user, self.course.id) self.assertTrue(is_enrolled)
course_overview = self._assert_image_urls_all_default(modulestore_type, fake_course_image)
ddof = 1
if is_setter: pass
result = first.difference(first) self.assertEqual(len(result), 0) self.assertEqual(result.name, first.name)
s = pd.Series([1., 2., 3.]) result = s.interpolate(limit=1) expected = s assert_series_equal(result, expected)
from __future__ import absolute_import
Ensure mysecgroup exists: boto_secgroup.present: - name: mysecgroup - description: My security group - profile: keyid: GKTADJGHEIQSXMKKRBJ08H key: askdjghsdfjkghWupUjasdflkdfklgjsdfjajkghs region: us-east-1
if all(conn.features.can_clone_databases for conn in connections.all()): return default_test_processes() else: return 1
from __future__ import absolute_import import atexit import logging import time
from salttesting import TestCase, skipIf from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON )
cacher_needs_updating = self._check_is_chained_assignment_possible() setitem(key, value) if cacher_needs_updating: self._maybe_update_cacher()
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
return not re.search(r'manufacturer|to be filled|available|asset|^no(ne|t)', val, flags=re.IGNORECASE)
xpath = "//div[@class='indicator-container']/span" self.assert_no_xpath(xml, xpath, self.context)
'state_output_diff': bool,
if protocol == 6:
self.store.delete_item(published_xblock.location, self.user_id)
- cn=foo,ou=users,dc=example,dc=com: - delete_others: True
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if chunksize is None: chunksize = 100000
from __future__ import absolute_import import re import logging
if name is None: name = data.name
from __future__ import absolute_import from __future__ import unicode_literals import sys import logging
certs_list = self.run_function('keychain.list_certs') self.assertIn(CERT_ALIAS, certs_list)
is_x_old_in_X = int(mask.sum() < X.shape[0])
mock_logger.exception.assert_called_once_with(expected_log_msg)
__, __ = self.log_in_as_instructor()
try: import salt.utils.openstack.neutron as suoneu HAS_NEUTRON = True except NameError as exc: HAS_NEUTRON = False
manager = getattr(self.model, kwargs.pop('manager')) manager_class = create_generic_related_manager(manager.__class__, rel) return manager_class(instance=self.instance)
subnets = conn.get_all_subnets(subnet_ids=subnets)
result = df.assign(A=lambda x: x.A + x.B) assert_frame_equal(result, expected)
url = settings.STATIC_URL + settings.DEFAULT_COURSE_ABOUT_IMAGE_URL
import psutil
os.makedirs(self.mydir)
self.assertEqual(len(Event.objects.values('screening__movie__pk', 'screening__movie__title')), 2)
payment_support_email = microsite.get_value('payment_support_email', settings.PAYMENT_SUPPORT_EMAIL)
base = PeriodIndex(['2011-01-05', '2011-01-04', '2011-01-02', '2011-01-03'], freq='D', name='idx')
break
n_components = init.shape[1] if n_samples != init.shape[0]: raise ValueError("init matrix should be of shape (%d, %d)" % (n_samples, n_components)) X = init
value = value.astimezone(timezone) if hasattr(timezone, 'normalize'): value = timezone.normalize(value) return value.replace(tzinfo=None)
self.assertTrue(type(df.a[0]) is np.float64) self.assertEqual(df.a.dtype, np.float)
import salt.utils
p.mugshot.save("mug", self.file1) self.check_dimensions(p, 4, 8)
sources, duration = self.video.sources[0], self.video.duration self.assert_bumper_payload_contains_ids(load_video_event, sources, duration)
lines[ind] = newline + os.linesep
self.streaming_content = streaming_content
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
rendered_html = etree.XML(problem.get_html())
self.assertEqual( res_json['message'], u"{user} does not exist in the LMS. Please check your spelling and retry.".format(user=invalid_user) )
multi_target_forest.fit(X, y)
n_samples = len(digits.data) data = digits.data / 16. data -= data.mean(axis=0)
BULK_EMAIL_LOG_SENT_EMAILS = False
grouper, _, _ = _get_grouper(dropped, key=self.keys, axis=self.axis, level=self.level, sort=self.sort, mutated=self.mutated)
df = DataFrame(np.random.randn(2, 2)) mask = DataFrame([[False, False], [False, False]]) s = Series([0, 1])
return False
with descriptor.runtime.export_fs.open('course/{url_name}.xml'.format(url_name=url_name)) as f: course_xml = etree.fromstring(f.read())
data = '1,2,3\n4,5,6'
cls.cache_regex = salt.utils.cache.CacheRegex(prepend='^')
self.assertQuerysetEqual(Choice.objects.filter(choice__iexact=None), [])
if str_instance and hex_regex.match(geom_input): geom_input = six.memoryview(a2b_hex(geom_input.upper().encode())) str_instance = False
mi = MultiIndex.from_product([list('abcdefg'), range(10)], names=['first', 'second']) result = str(mi)
response = self.assert_enrollment_status( as_server=True, mode=new_mode, is_active=new_is_active, expected_status=expected_status, )
try: result = o.combine_first(o2) self.check_metadata(o, result) except (AttributeError): pass
loss, grad, p = _multinomial_loss_grad(w, X, Y, alpha, sample_weight) sample_weight = sample_weight[:, np.newaxis]
dog_stats_api.increment( DEPRECATION_VSCOMPAT_EVENT, tags=["location:customtag_descriptor_render_template"] )
expected = Series([Timestamp('2012/01/01', tz='UTC')]) expected2 = Series([Timestamp('1999/01/01', tz='UTC')])
result = df.drop_duplicates('A') expected = df.iloc[[0, 2, 3, 5, 7]] tm.assert_frame_equal(result, expected)
for app_label in app_labels: if app_label.startswith('--'): raise CommandError("Sorry, Dave, I can't let you do that.")
response = self.client.get(self.url, params)
ensure_in_syspath('../../') import salt.ext.six as six from salt.ext.six.moves import reload_module from salt.utils import locales
from salt.modules import postgres
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
y = label_binarize(y, classes=[0, 1, 2]) n_classes = y.shape[1]
self._assert_redirects_to_instructor_dash(response)
__virtualname__ = 'group'
UnorderedObjectAdmin.ordering = ['bool'] check_results_order()
self.add_team_configuration(max_team_size=4, topics=[self.make_topic()]) self.assertTrue(self.course.teams_enabled)
self.Xt = numpy.zeros([self.n_eigen + self.minibatch_size, self.n_dim])
nagios.__salt__ = {}
return
models.signals.m2m_changed.connect( self.m2m_changed_signal_receiver, Person.fans.through ) models.signals.m2m_changed.connect( self.m2m_changed_signal_receiver, Person.friends.through )
return response
from __future__ import absolute_import
#pepa_delimiter: ..
for attr in REQUISITES: if attr in kwargs: kwargs[attr] = [ req() if isinstance(req, StateRequisite) else req for req in kwargs[attr] ]
import salt.client import salt.config import salt.loader import salt.output import salt.pillar import salt.runner
ttl = force_text(ttl)
if palette == PALETTES[NOCOLOR_PALETTE]: return None return palette
counts = {}
pkg_params = __salt__['pkg_resource.parse_targets'](name, pkgs, **kwargs)[0]
assert_almost_equal(np.cov(clf.transform(scatter).T), np.eye(2))
fld = forms.GeometryField(required=False) self.assertIsNone(fld.clean(None))
info_log.assert_called_with('email sent to new created user at %s', 'test_student@example.com')
self.session['foo'] = 'bar' self.session.set_expiry(3600) self.session.save()
return redirect_with_get('register_user', request.GET)
user_name = 'SYSTEM'
time.sleep(1) return info(new_name).get('RecordName') == new_name
dt += timedelta(days=1)
self.assertTrue(glusterfs.create_volume('newvolume', 'host1:/brick')) self.assertFalse(mock_start_volume.called)
self.make_course(pdf_textbooks=[PDF_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('pdf_book', book_index=0, page='xyzzy')
resource['event'] = test_case['event_second'] self.check_event_response_by_key('handle_vote', resource, 'newVotes', test_case['new_votes'])
course_module = self.store.get_course(target_id)
LASTCALL = int(time.mktime(datetime.datetime.now().timetuple()))
self.validate_version(where)
cmd = 'emerge-webrsync -q' if salt.utils.which('emerge-delta-webrsync'): cmd = 'emerge-delta-webrsync -q' return __salt__['cmd.retcode'](cmd, python_shell=False) == 0
num_examples = 40 theano_rng = MRG_RandomStreams(2012+11+1)
msg = "Input has different freq=A-DEC from Period" with tm.assertRaisesRegexp(period.IncompatibleFrequency, msg): base <= s2
X -= X.min() with warnings.catch_warnings(record=True): estimator = Estimator()
silent = kwargs.pop('silent', False)
university = microsite.get_value('university')
assert_array_almost_equal(grad_interp[:n_features], grad[:n_features]) assert_almost_equal(grad_interp[-1] + alpha * w[-1], grad[-1])
HAS_FCNTL = False
DEBUG_ENGINE = Engine(debug=True)
assert_raises(ValueError, sel.inverse_transform, np.array([[1], [2]]))
connections['default'].allow_thread_sharing = False exceptions = [] do_thread() self.assertIsInstance(exceptions[0], DatabaseError)
settings._setup()
self.app = app
SOCIAL_AUTH_PIPELINE_TIMEOUT = ENV_TOKENS.get('SOCIAL_AUTH_PIPELINE_TIMEOUT', 600)
self.assert_grade(problem, "Other String", "incorrect") self.assert_grade(problem, "second", "incorrect")
assert_equal(5, StratifiedKFold(5).get_n_splits(X, y))
drag(container, first_handle + 3, first_handle, 40) drag(container, first_handle + 2, first_handle, 40)
cache_key = get_cache_key(request, self.key_prefix, 'GET', cache=self.cache) if cache_key is None: request._cache_update_cache = True
self.assert_redirect_to_register_looks_correct(actions.do_complete(request.backend, social_views._do_login))
n_samples = 100
assert_array_equal(np.intersect1d(train, test), [])
os.close(stdout_parent_fd) os.close(stderr_parent_fd) salt.utils.reinit_crypto()
html = self.get_problem_html(encapsulate=False)
elif isinstance(file, FieldFile) and instance is not file.instance: file.instance = instance
from salt.log import is_console_configured from salt.exceptions import SaltClientError, SaltSystemExit, \ CommandExecutionError import salt.defaults.exitcodes import salt.utils
varnish.__salt__ = {}
_config_filename_ = 'spm' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'spm')
self.assertEqual(google_provider.id, google_state.provider.id) self.assertEqual(self.user, google_state.user)
__context__[contextkey] = 'docker-exec'
res[b][a] = group.sum()
result = A.dot(b)
pass
o = Series([1, 2, 3]) result = o._get_numeric_data() self._compare(result, o)
hosts = [] for name in h: name = name.strip() if len(name) > 0: hosts.append(name)
contents = path_or_buf.read() try: contents = contents.encode(self._default_encoding) except: pass self.path_or_buf = BytesIO(contents)
obj = queryset.get()
W[0, 1] = .5 W[0, 2] = 1. W[0, 3] = 2.
assert_equal(X.indptr.shape[0], 7) assert_equal(X.shape[0], 6) assert_equal(X.shape[1], 22)
out_file = os.path.join(salt.syspaths.CONFIG_DIR, new_name)
self.assertTrue(self.lc_block.has_dynamic_children())
mean_square_grad = sharedX(param.get_value() * 0.)
testit(tm.makeCategoricalIndex, check_index_type=False, check_categorical=False)
X = FeatureHasher().transform([{'foo': 0}]) assert_equal(X.data.shape, (0,))
DECIMAL_SEPARATOR = '.' THOUSAND_SEPARATOR = ','
urlpath = None article = None
if self.names == other.names: pass else: return self._join_multi(other, how=how, return_indexers=return_indexers)
else: yield enrollment
if valid_commands: if cmd not in valid_commands: channel.send_message('Using {0} is not allowed.'.format(cmd)) return
mgmt_command = -1
if len(index) == l: return True elif lplane_indexer == l: return True
fmt = '%%(function)s(%s)' % settings['procedure_fmt']
max_scores_cache.fetch_from_remote(field_data_cache.scorable_locations)
import salt.fileserver import salt.utils from salt.utils.event import tagify import salt.ext.six as six
if n_useless > 0: X[:, -n_useless:] = generator.randn(n_samples, n_useless)
for key in locations: self.assertFalse(self._has_changes(locations[key]))
call_command('import', self.content_dir, self.good_dir) store = modulestore() self.assertIsNotNone(store.get_course(self.base_course_key))
result = cut(np.arange(11.), 2)
from __future__ import unicode_literals
from __future__ import absolute_import import logging
entry_needs_updating = True entry_needs_saving = False task_output = None
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
assert_panel4d_equal(panel4d.ix[:, :, dates, cols], panel4d.reindex(major=dates, minor=cols))
print("", file=out) print("{} violations total".format(self.total_violations), file=out)
if isinstance(address, int): self._check_int_address(address) self._ip = address return
for k in self.file_mapping: if mod_name not in k: yield k
result = self.frame.apply(lambda x: x * 2, raw=True) expected = self.frame * 2 assert_frame_equal(result, expected)
default_test_id = ( "{system}/djangoapps/*" " common/djangoapps/*" " openedx/core/djangoapps/*" " openedx/tests/*" " openedx/core/lib/*" )
import salt.ext.six as six import salt.utils.dictupdate as dictupdate
proba[proba < np.finfo(proba.dtype).eps] = np.finfo(proba.dtype).eps log_proba = np.log(proba)
X_bernoulli = [[1, 100, 0], [0, 1, 0], [0, 100, 1]] X_multinomial = [[0, 1], [1, 3], [4, 0]]
second_group = self.user_partition.groups[1] self.user_partition.scheme.current_group = second_group
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
import os import stat
class Individual(models.Model): alive = models.BooleanField()
if adjacent: self.leaveWhitespace() self.adjacent = adjacent self.skipWhitespace = True self.joinString = joinString
pki_dir = pki_dir.replace('minion', 'master')
('gis_tests', os.path.join(RUNTESTS_DIR, 'gis_tests')),
'service_status',
protocol = None
if isinstance(target_name, numbers.Integral): target_name = col_names[target_name] if isinstance(data_name, numbers.Integral): data_name = col_names[data_name]
permutation = rng.permutation(n_samples) ind_test = permutation[:n_test] ind_train = permutation[n_test:(n_test + n_train)] yield ind_train, ind_test
import salt.ext.six as six
n_samples = len(y) n_classes = float(len(np.unique(y)))
with tm.assert_produces_warning(FutureWarning): s.iget(1)
if id_: id_ += '_0' return id_
#man_show_urls = False
'syndic_finger': str,
history = HistoricalRecords()
self._is_valid_list_like(key, axis)
CREDIT_REQUIREMENT_XBLOCK_CATEGORIES = [ "edx-reverification-block", ]
from __future__ import absolute_import import os import subprocess
return False
HAS_LIBS = False try: from servicenow_rest.api import Client
c1 = Categorical(["a", "b", "c", "a"]) c2 = Categorical(c1) tm.assert_categorical_equal(c1, c2)
AWS_API_DESCRIPTION = _dict_to_json_pretty({"provisioned_by": "Salt boto_apigateway.present State", "context": "See deployment or stage description"})
return narr - 1 - inds
#html_sidebars = {}
shrinkages = np.logspace(-2, 0, 30) negative_logliks = [-ShrunkCovariance(shrinkage=s).fit(X_train).score(X_test) for s in shrinkages]
for j, col in enumerate(f.columns):
assert_array_almost_equal(X_truth[:, 2], out_X_unstructured[4]) assert_array_almost_equal(X_truth[:, 2], out_X_structured[4])
class ReferencedByGenRel(models.Model): content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE) object_id = models.PositiveIntegerField() content_object = GenericForeignKey('content_type', 'object_id')
self.assertTrue('AAPL' in df.index) self.assertTrue('GOOG' in df.index) self.assertTrue('AMZN' in df.index)
return errors
from __future__ import absolute_import
__ = CourseOverview.get_from_id(course.id)
pred = grid_search.fit(train_data, target_train).predict(test_data) assert_array_equal(pred, target_test)
self._navigate_to_course_unit_page() self.assertTrue(self.video.is_controls_visible())
if not os.path.exists(TMP_JID_DIR): os.makedirs(TMP_JID_DIR)
return freqstr
if isinstance(result, np.ndarray): if is_integer_dtype(result): result = result.astype('int64') elif not is_list_like(result): return result
self.split_modulestore.fix_not_found(course_version_locator, user_id)
execfile
if act_func is not None: activations[i] = act_func(activations[i])
self.cart = Order.get_cart_for_user(self.user) CertificateItem.add_to_order( self.cart, self.course_key, self.COST, 'verified' ) self.cart.start_purchase()
if len(bins) < len(labels): labels = labels[:len(bins)]
try: marty.edited.add(dive, bulk=False) except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
dtype, _ = com._maybe_promote(n.dtype)
cache_key = programs_config.CACHE_KEY if programs_config.is_cache_enabled and not user.is_staff else None return get_edx_api_data(programs_config, user, 'programs', resource_id=program_id, cache_key=cache_key)
panel4d = Panel4D(self.panel4d._data) self.assertIs(panel4d._data, self.panel4d._data)
StudentViewTransformer('video').transform(usage_info=None, block_structure=self.block_structure)
self._hints.update(hints)
class TO(object):
if len(self.costs) > 1: output = self._get_samples_from_model(model, data)
np.seterr(all='ignore')
#pylint: disable=E0602
if self.__no_lock: self.__no_lock = not self.__refresh
if all_students or delete_module: if not has_access(request.user, 'instructor', course): return HttpResponseForbidden("Requires instructor access.")
fig = plt.figure(figsize=(15, 8)) plt.suptitle("Manifold Learning with %i points, %i neighbors" % (1000, n_neighbors), fontsize=14)
tm._skip_if_no_localpath()
from __future__ import unicode_literals
response = self.client.get('/syndication/latest/') feed = minidom.parseString(response.content).firstChild updated = feed.getElementsByTagName('updated')[0].firstChild.wholeText
LogoutPage(self.browser).visit()
try: import psutil HAS_PSUTIL = True except ImportError: HAS_PSUTIL = False
update_course_in_cache.apply_async([unicode(course_key)], countdown=0)
if not self.fields['download_track'].is_set_on(self) and self.track: self.download_track = True
for i in range(3): bio.write(struct.pack('c', null_byte))
run_before = []
] DATETIME_INPUT_FORMATS = [
msg = Messages.ORDER_COMPLETED.format(order_number=response_data['order']['number']) log.debug(msg) response = DetailResponse(msg)
try: import progressbar HAS_PROGRESSBAR = True except ImportError: HAS_PROGRESSBAR = False
if '_when' not in data: data['_when'] = when
problem_vertical = ItemFactory.create( parent_location=self.problem_section.location, category='vertical', display_name='Problem Unit' )
'shoppingcart',
show_keypair = self.run_cloud('-f show_keypair {0} keyname={1}'.format(PROVIDER_NAME, 'MyPubKey'))
update_session_auth_hash(request, form.user) return HttpResponseRedirect(post_change_redirect)
response = requests.get(self._get_url("api/v1/search")) self.assertEqual(response.status_code, 400)
TestScenario( (self.demo_course.id, '='), "course_MVSFQL2EMVWW6WBOGEXUMYLMNRPTEMBRGQ======" ), TestScenario( (self.html_course.id, '~'), "course_MNXXK4TTMUWXMMJ2KVXGS5TFOJZWS5DZLAVUGUZNGIYDGK2ZGIYDSNQ~" ),
selectors = compound_hint.get('value').upper().split() selector_set = set(selectors)
log.info('Runner completed: {0}'.format(data['jid'])) del event del namespaced_event return data['return']
template_pdf = "certificate-template-{id.org}-{id.course}.pdf".format(id=course_id)
assert_equal(7, counts_1.max()) assert_equal(7, counts_3.max()) assert_equal(7, counts_None.max())
import salt.utils import tempfile import salt.utils.locales import salt.utils.url from salt.ext.six import string_types from salt.exceptions import CommandExecutionError, CommandNotFoundError
if "TRACKING_IGNORE_URL_PATTERNS" in ENV_TOKENS: TRACKING_IGNORE_URL_PATTERNS = ENV_TOKENS.get("TRACKING_IGNORE_URL_PATTERNS")
service = _get_service(name) path = service['file_path']
AllowsNullGFK(content_object=None) TaggedItem(content_object=None)
log = logging.getLogger(__name__)
self.assertNotIn('broadcast_address', self.ipv6_network._cache) self.assertNotIn('hostmask', self.ipv6_network._cache)
self.assertListEqual(got, ['café', 'café', 'caf\ufffd', 'café'])
epoch_num = 15 termination_criterion = EpochCounter(epoch_num)
s.write(obj=value, append=append, complib=complib, **kwargs)
with tm.assertRaises(gbq.InvalidSchema): gbq.to_gbq(df_different_schema, destination_table, PROJECT_ID, if_exists='append')
self.assertEqual(houston_json, City.objects.geojson(crs=True, model_att='json').get(name='Houston').json)
response = self.client.get(reverse('admin:admin_views_customarticle_add')) self.assertTemplateUsed(response, 'custom_admin/add_form.html')
import salt.utils from salt.exceptions import ( CommandExecutionError, CommandNotFoundError, SaltInvocationError )
serial = salt.payload.Serial(self.opts.get('serial', ''))
l_ups, learn_rates = self.learning_rate_updates(gradients) safe_update(ups, l_ups)
ret.update(set( [x for x in _get_sysv_services() if _sysv_enabled(x)] )) return sorted(ret)
return s
problem = self.store.get_item(problem_location) problem.display_name = problem_new_name self.store.update_item(problem, self.user_id)
self.course_db = {}
fe_bp_h1 = free_energy_at_beta(W_list, b_list, nsamples, beta, pa_bias, marginalize_odd=marginalize_odd) free_energy_fn = theano.function([beta], fe_bp_h1)
return result_index, result
if isinstance(other, datetime.timedelta): other = DurationValue(other, output_field=fields.DurationField()) else: other = Value(other)
mako_middleware_process_request(self.request) self.request.user = self.user
"redirect_url": redirect_url,
loss[np.logical_or(n_positives == 0, n_positives == n_labels)] = 0.
], ROOT_URLCONF='flatpages_tests.urls', TEMPLATES=FLATPAGES_TEMPLATES, SITE_ID=1,
self.assertRaises(TypeError, lambda: np.log(s))
safe_exec("rnums = [random.randint(0, 999) for _ in xrange(100)]", g, random_seed=17) self.assertEqual(g['rnums'], rnums)
ordering = ('author__extra__note', 'author__name', 'rank')
username = user.username if user else ""
self.settings_page.a11y_audit.config.set_rules({ "ignore": [
is_stopped = False for proc in all_processes: if proc.startswith(name) \ and _is_stopped_state(all_processes[proc]['state']): is_stopped = True break
pkg_resource.__grains__ = {} pkg_resource.__salt__ = {}
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'joyent'
for mode in ('audit', 'honor', 'verified'): CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
X_mb = X[:10] X_mb_csr = X_csr[:10] x_mb_squared_norms = x_squared_norms[:10] x_mb_squared_norms_csr = x_squared_norms_csr[:10]
with context.push(var=output): return self.filter_expr.resolve(context)
problem = self.build_problem(answer="Second", case_sensitive=False)
self.token = None
from salttesting.helpers import ensure_in_syspath
exp_row = pd.Series(["b", 3], index=["cats", "values"], dtype="object", name="j")
url = marketing_link(name)
self.assertEqual( self.run_function('shadow.set_password', [NO_USER, 'P@SSw0rd']), 'ERROR: User not found: {0}'.format(NO_USER))
if 'load' in msg: role = self.road_stack.value.nameRemotes[sender].role
from __future__ import absolute_import
theano.config.warn.sum_div_dimshuffle_bug = False
LMS_BASE_URL = os.environ.get('lms_url', 'http://localhost:8003')
library2_key = self._create_library(library="lib2") self._login_as_non_staff_user()
self.assertRaises(TypeError, self.frame.reindex, columns=['A'], level=1)
from __future__ import absolute_import, print_function import os import sys import time import logging import threading import traceback from random import randint
self.locations = self._build_kml_sources(locations)
def long_range(start, end): while start < end: yield start start += 1
params = self._signed_callback_params(self.order.id, self.COST, self.COST) del params[missing_param]
faces_centered = faces - faces.mean(axis=0)
CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52 CSRF_COOKIE_SECURE = False
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
Uhat, s, V = linalg.svd(B, full_matrices=False) del B U = np.dot(Q, Uhat)
for balancer in status: if not status[balancer]: ret['errors'].append(balancer) elif status[balancer]['activation'] != activation: ret['wrong_state'].append(balancer)
self.assertTrue(hasattr(request, '_files'))
], ROOT_URLCONF='flatpages_tests.urls', TEMPLATES=FLATPAGES_TEMPLATES, SITE_ID=1,
try: import esky from esky import EskyVersionError HAS_ESKY = True except ImportError: HAS_ESKY = False from salt.ext import six from salt.ext.six.moves.urllib.error import URLError
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
res = dfobj.copy() res.replace(r'\s*\.\s*', nan, regex=True, inplace=True) assert_frame_equal(dfobj, res.fillna('.'))
free_regex = re.compile(r'^GEO-\d{3}FREE') lite_regex = re.compile(r'^GEO-\d{3}LITE')
y_pred = clf.classes_.take(y_proba.argmax(axis=1), axis=0) assert_array_equal(y_pred, true_result)
choose_track_url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.post(choose_track_url, self.POST_PARAMS_FOR_COURSE_MODE[course_mode])
mock_create_subtask_fcn_args = mock_create_subtask_fcn.call_args_list self.assertEqual(len(mock_create_subtask_fcn_args[0][0][0]), 3) self.assertEqual(len(mock_create_subtask_fcn_args[1][0][0]), 3) self.assertEqual(len(mock_create_subtask_fcn_args[2][0][0]), 2)
add_users(self.admin, CourseCreatorRole(), self.user)
$ ./manage.py lms resubmit_error_certificates -c edX/DemoX/Fall_2015 -c edX/DemoX/Spring_2016
class BinOutput(GEOSFuncFactory): "Generates a prototype for the routines that return a sized string." argtypes = [GEOM_PTR, POINTER(c_size_t)] restype = c_uchar_p errcheck = staticmethod(check_sized_string)
if sparse: decay = .01
if com.is_list_like(key): return self.reindex(**{self._get_axis_name(axis): key})
cons = self._orig._constructor return cons(result, name=name, index=index)
custom_colors = ['#F00', '#00F', '#FF0', '#000', '#FFF'] _check_plot_works(df.plot, color=custom_colors)
ishfts = 1 self.mode = mode self.iparam[0] = ishfts self.iparam[2] = maxiter self.iparam[3] = 1 self.iparam[6] = mode
user: fred password: saltybacon private_key: /root/mykey.pem private_key: mykey
sql_params.insert(1, lookup.lhs.output_field._spheroid)
if dtype.kind == result.dtype.kind: if (result.dtype.itemsize <= dtype.itemsize and np.prod(result.shape)): return result
overview = CourseOverview.get_from_id(course.id) self.assertFalse(hasattr(overview, 'image_set'))
response = self.client.post( '/i18n/setlang/', data={'language': 'en'}, follow=True, HTTP_REFERER='/nl/vertaald/' ) self.assertRedirects(response, '/en/translated/')
try: kwargs['entrypoint'] = salt.utils.shlex_split(kwargs['entrypoint']) except AttributeError: pass
filtered_visible_ids = None
if isinstance(start, RangeIndex): if name is None: name = start.name return cls._simple_new(name=name, **dict(start._get_data_as_items()))
axes = df.hist(by='D', rot=30) self._check_axes_shape(axes, axes_num=1, layout=(1, 1)) self._check_ticks_props(axes, xrot=30)
DATE_INPUT_FORMATS = [
try: import psycopg2 HAS_POSTGRES = True except ImportError: HAS_POSTGRES = False
self.assertTrue(isinstance(kubectl_out, dict))
import salt.ext.six as six
student = certificate_invalidation.generated_certificate.user instructor_task.api.generate_certificates_for_students( request, course_key, student_set="specific_student", specific_student_id=student.id )
os.remove(os.path.join(mine_file))
capi.band_io(self._ptr, access_flag, offset[0], offset[1], size[0], size[1], byref(data_array), shape[0], shape[1], self.datatype(), 0, 0)
if settings.THEME_NAME == "": settings.THEME_NAME = None return
self.assertEqual(list(children), [my2]) self.assertEqual(list(parents), [my1])
idx = np.arange(n_train) np.random.seed(13) np.random.shuffle(idx) X_train = X_train[idx] y_train = y_train[idx]
self.url = reverse('instructor_dashboard', kwargs={'course_id': self.course.id.to_deprecated_string()})
self.assertTrue('Activate Course Enrollment' in response.content)
from __future__ import unicode_literals
if v.is_indexed: index = v.index cur_optlevel = index.optlevel cur_kind = index.kind
from safe_lxml import defuse_xml_libs defuse_xml_libs()
import salt.utils import salt.utils.yast import salt.utils.preseed import salt.utils.kickstart import salt.syspaths from salt.exceptions import SaltInvocationError
grid_search.score(X, y) grid_search.predict_proba(X) grid_search.decision_function(X) grid_search.transform(X)
P *= self.early_exaggeration
service = _get_service(name) label = service['plist']['Label']
from __future__ import unicode_literals
paths = ['grading_policy.json'] if policy_dir: paths = [policy_dir + '/grading_policy.json'] + paths
check_ortho(T, "x scores are not orthogonal") check_ortho(U, "y scores are not orthogonal")
if self.section.default_tab: courseware_context['default_tab'] = self.section.default_tab
X = check_array(X, accept_sparse=['csr', 'csc'])
from salt.utils import get_colors
log.error( 'Top function {0} failed with error {1} for minion ' '{2}'.format( fun, exc, load['id'] ) )
if y.dtype.kind == 'f' and np.any(y != y.astype(int)): return 'continuous' + suffix
self.assertEqual({'k2': 'v2'}, grains['a_custom'])
from __future__ import unicode_literals
def compare(slobj): result = ts2[slobj].copy() result = result.sort_index() expected = ts[slobj] assert_series_equal(result, expected)
XBLOCK_FIELD_DATA_WRAPPERS = ()
if not log_format: log_format = '[%(levelname)-8s] %(message)s' if not date_format: date_format = '%H:%M:%S'
assert_raises(ValueError, lambda X, y: GradientBoostingClassifier( loss='deviance').fit(X, y), X, [0, 0, 0, 0])
from __future__ import unicode_literals
memcached.host: 127.0.0.1 memcached.port: 11211
if use_dtypes: if self.dtype is False: return data, False elif self.dtype is True: pass
self.no_labels = Attribute('no_labels', default="False").parse_from_xml(self.xml)
add_instance = False
n_samples, n_features = X.shape _, n_targets = y.shape
try: from mpl_toolkits.basemap import Basemap basemap = True except ImportError: basemap = False
self.run_function('cp.get_url', [TEST_PKG_URL, TEST_PKG])
self.connection.close()
new_ssl_option.append("{0} '{1}'".format(normal_key, opt[key].replace("'", '')))
from __future__ import absolute_import import logging import socket import pprint
(13, True, False, u"False"),
corr_x_x = corr(x, x)
ensemble = BaggingClassifier(base_estimator=Perceptron(), n_estimators=3)
OAuth2AuthenticationAllowInactiveUser, SessionAuthenticationAllowInactiveUser,
alice = User.objects.using('default').get(username="alice") self.assertEqual(alice.userprofile.flavor, "chocolate")
import ioflo.base.deeding
tm.assert_numpy_array_equal(res, expected)
keys1 = ['@' + str(i) for i in range(5)] val1 = np.arange(5, dtype='int64')
y = np.array([3, 7, 5, 9, 8, 7, 10]) x = np.arange(len(y))
from __future__ import absolute_import import logging
metadata_translations = dict(RawDescriptor.metadata_translations) metadata_translations['attempts'] = 'max_attempts'
complex_value_list = [] v_value = value while isinstance(v_value, dict): v_key = v_value.keys()[0] v_value = v_value.values()[0] complex_value_list.append(v_key)
self.descriptor = descriptor self._runtime = None super(XModule, self).__init__(*args, **kwargs) self.runtime.xmodule_instance = self
self._setup_mode_and_enrollment(self.PAST, "verified")
from __future__ import absolute_import import logging
self.assertTrue( self._check_equality(source_usage_key, usage_key, parent_usage_key, check_asides=check_asides), "Duplicated item differs from original" )
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
with check_mongo_calls(max_find.pop(0), max_send): self.assertFalse(self.store.has_item(self.fake_location))
current = set() for wd in wm.watches: current.add(wm.watches[wd].path)
pass
DEFAULT_SHOPPINGCART_MODE_SLUG = HONOR DEFAULT_SHOPPINGCART_MODE = Mode(HONOR, _('Honor'), 0, '', 'usd', None, None, None, None)
config_key = microsite.get_value('cybersource_config_key') if config_key: config = config['microsites'][config_key]
return store.asset_collection
if on_saltstack: html_search_template = 'googlesearch.html' else: html_search_template = 'searchbox.html'
to = force_text(to)
@property def real(self): return self.values.real
resp = self.client.get(reverse('dashboard'), HTTP_HOST=settings.MICROSITE_TEST_HOSTNAME) self.assertContains(resp, 'Robot_Super_Course') self.assertNotContains(resp, 'Robot_Course_Outside_Microsite')
for index in [tm.makeIntIndex, tm.makeRangeIndex]:
from __future__ import absolute_import import os import copy import logging
ssh_interface = _get_ssh_interface(vm_)
saveload_fstr = '{0}.save_load'.format(self.opts['master_job_cache']) self.mminion.returners[saveload_fstr](load['jid'], load)
return { 'username': data['username'].lower(), 'password': 'this_is_not_a_secret', }
if isinstance(self._orig, Index): if is_bool_dtype(result): return result
cond = df > 0 _check_align(df, cond, (_safe_add(df).values))
problem = self.build_problem(sample_dict=sample_dict, num_samples=10, tolerance=0.01, answer="x+2*y", hints=hints)
from __future__ import absolute_import import os import glob import tempfile import time import logging
if existing['code'] == 200:
sys_doc_load = self.valid_clear_load sys_doc_load['fun'] = 'sys.doc' self.clear.publish(sys_doc_load)
eigvals = np.maximum(eigvals.real, 0)
os.environ['REQUIRE_BUILD_PROFILE_OPTIMIZE'] = 'none'
return has_access(user, action, xmodule.descriptor, course_key)
u"\u00A9 {org_name}. All rights reserved except where noted. " u"EdX, Open edX and the edX and Open EdX logos are registered trademarks " u"or trademarks of edX Inc."
tm.assert_series_equal(temp, pd.Series([True, True, True, False])) self.assertEqual(temp.dtype, np.bool)
UNKNOWN_SOURCE = '<unknown source>'
'enable_zip_modules': bool,
if to_rep_re and regex_re: raise AssertionError('only one of to_replace and regex can be ' 'regex compilable')
from urllib2 import urlopen PY2 = True
if self._dirty: self.redo_theano()
'course_action_state',
monitoring_dataset = DenseDesignMatrix(X=X)
ax = df.plot.hexbin(x='A', y='B') self.assertEqual(ax.collections[0].cmap.name, 'BuGn')
INNER = 'INNER JOIN' LOUTER = 'LEFT OUTER JOIN'
self._assert_not_almost_equal_both(iter([1, 2, 3]), [1, 2, 3])
Series._metadata = _metadata Series.__finalize__ = _finalize
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
if value is None: return None return six.text_type(value)
test = [[1], [3], [4]] assert_array_almost_equal(clf.predict(test), [1, 3, 4], 2)
config_course_cohorts( course, is_cohorted=True, auto_cohorts=["AutoGroup"] )
if len(student) != 2: if len(student) > 0: build_row_errors('data_format_error', student[user_index], row_num)
class_counts = np.bincount(y)[2:] assert_almost_equal(np.dot(cw, class_counts), y.shape[0]) assert_true(cw[0] < cw[1] < cw[2])
with patch('salt.utils.which', mock_true): ret = parallels.__virtual__() self.assertTrue(ret) self.assertEqual(ret, 'parallels')
def append(self, val): "Standard list append method" self[len(self):] = [val]
X = check_array(X, accept_sparse=['csr', 'csc'])
from matplotlib import cm default_colors = self._maybe_unpack_cycler(self.plt.rcParams)
return None
continue
self._test_page("/logout", 302)
__salt__['saltutil.refresh_modules']()
from __future__ import absolute_import
from __future__ import absolute_import
class Alfa(models.Model): name = models.CharField(max_length=10, null=True)
VS = VectorSpace(dim=27) VS_sparse = VectorSpace(dim=27, sparse=True)
d = data.copy()['c']
return strip_key_collection(retval)
elif cl.list_editable: FormSet = self.get_changelist_formset(request) formset = cl.formset = FormSet(queryset=cl.result_list)
if 'unknown' in out: return '3' else: return out.split()[1]
GITHUB_REPO_ROOT = (TEST_ROOT / "data").abspath() LOG_DIR = (TEST_ROOT / "log").abspath()
with self.assertRaisesMessage(AssertionError, msg): with self.assertRaisesMessage(ValueError, "Expected message"): raise ValueError("Unexpected message")
import salt.utils from salt.ext.six import string_types from salt.exceptions import CommandExecutionError import logging
cmd = 'emerge-webrsync -q' if salt.utils.which('emerge-delta-webrsync'): cmd = 'emerge-delta-webrsync -q' return __salt__['cmd.retcode'](cmd, python_shell=False) == 0
import logging
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath
json = salt.utils.import_json() couchbase.set_json_converters(json.dumps, json.loads)
s = Series(['abc', True])
pass
STATUS_VISIBLE = 'visible' STATUS_DELETED = 'deleted' TEMPLATE_DIR = 'courseware'
w = [x for x in w if x.category is UserWarning]
self.verify_end_date('edX/toy/TT_2012_Fall')
names = list(self.orig_names) names = self._maybe_dedup_names(names)
union_idx = idx1.union(idx2) expected = idx2 self.assertEqual(union_idx.ndim, 1) self.assert_index_equal(union_idx, expected)
import yaml import json
water = Book(title="Dive into Water", published=datetime.date(2001, 1, 1), editor=mark) self.assertEqual(water._state.db, 'default')
] TIME_INPUT_FORMATS = [
is_done = page.browser.execute_script("return $({!r}).data('initialized')".format(xblock_css)) return (is_done, is_done)
rindex = list(self.ts.index) random.shuffle(rindex)
if not isinstance(user_exists, bool): ret['comment'] = user_exists ret['result'] = False return ret
self.assertEqual(col[1], Timestamp('2000-06-01 07:00:00'))
self._update_cutoff()
params["honor_code"] = "tRUe" self.assert_success(params)
kernel_svm = svm.SVC(gamma=.2) linear_svm = svm.LinearSVC()
qtBindingInstalled = True try: from PyQt4 import QtGui except ImportError: try: from PySide import QtGui except ImportError: qtBindingInstalled = False
cond = (df > 0)[1:] _check_align(df, cond, _safe_add(df))
is_multivalue_dict = isinstance(value, MultiValueDict)
from __future__ import unicode_literals
self.factory(alpha=0, learning_rate="optimal")
xblock, fields = (block, block.fields)
ret = None
CertificateGenerationConfiguration.objects.create(enabled=False) cache.clear()
if self.optimizer not in self._optimizer_types: raise ValueError("optimizer should be one of %s" % self._optimizer_types)
if settings.LMS_SEGMENT_KEY: analytics.write_key = settings.LMS_SEGMENT_KEY
assert_true(ocur == X.shape[1])
from __future__ import absolute_import
if not isinstance(self.remote_field.model, ModelBase): return []
with default_signals(signal.SIGINT, signal.SIGTERM):
epoch_num = 1
assert_equal(_barnes_hut_tsne.test_index2offset(), 1) assert_equal(_barnes_hut_tsne.test_index_offset(), 1)
class Thingy(models.Model): name = models.CharField(max_length=255)
self.check_event_response_by_http_status('remove_resource', resource, test_case['status'])
assert_greater(np.abs(s[:k] - sa).max(), 0.1)
pass
def callable(): raise Exception try: raise Exception except Exception: return technical_500_response(request, *sys.exc_info())
import logging
transcripts_info = video_descriptor.get_transcripts_info() transcript_langs = video_descriptor.available_translations(transcripts_info, verify_assets=False)
if comps[0] == 'user' and not comps[1]: comps[1] = user elif comps[0] == 'group' and not comps[1]: comps[1] = group vals[comps[0]] = comps[1]
self.assertEqual(MANY_TO_MANY_CLASSES, {f.__class__ for f in m2m_type_fields})
self.assertEqual(len(courses), 1)
courses, in_process_course_actions = _accessible_courses_summary_list(request)
from __future__ import unicode_literals
none_coerced = block._try_coerce_args(block.values, None)[2] self.assertTrue(pd.Timestamp(none_coerced) is pd.NaT)
y = zca_dataset.mapback_for_viewer(zca_dataset.X) z = x/np.abs(x).max(axis=0) assert_allclose(z[start:stop], y, rtol=1e-2)
if self.float_format is None and self.fixed_width: float_format = '%% .%df' % self.digits else: float_format = self.float_format
import salt.ext.six as six
levels = self.index.levels new_levels = [[lev + 'a' for lev in level] for level in levels]
X = check_array(X, copy=False, ensure_2d=False, warn_on_dtype=True, dtype=FLOAT_DTYPES) original_ndim = X.ndim
lazy.invalidate(library_descriptor, '_unwrapped_field_data') library_descriptor._field_data = inheriting_field_data(InheritanceKeyValueStore(init_dict))
assert_raises(ValueError, next, KFold(4).split(X1))
prepend_root_dirs = [ 'pki_dir', 'cachedir', 'sock_dir', 'extension_modules', 'pidfile', ]
result = super(NORB, self).get_topological_view(mat)
pickled_estimator = pickle.dumps(estimator) unpickled_estimator = pickle.loads(pickled_estimator)
from salt.modules import iptables
value = dist_val[0]
course_module = modulestore().get_course(course_key) if course_module is None: return Response(status=status.HTTP_404_NOT_FOUND) result_filter.update({'course_id': course_key})
)
try: salt_SIGKILL = signal.SIGKILL except AttributeError: salt_SIGKILL = signal.SIGTERM
self.split_test_module.user_partition_id = 2 [active_children, inactive_children] = split_test_module.active_and_inactive_children() self.assertEqual(active_children, []) self.assertEqual(inactive_children, children)
version_status[2] = master_version.string
log.info( 'Failed to get mtime on {0}, ' 'dangling symlink ?'.format(file_path)) continue
self.assertTrue(glusterfs.delete_volume('Newvolume1')) self.assertTrue(mock_run.called) self.assertTrue(mock_stop_volume.called)
with filesystem.open('updates.html', 'r') as grading_policy: on_disk = grading_policy.read() self.assertEqual(on_disk, course_updates.data)
model = models.IntegerField()
for (name, TreeEstimator), dtype in product(ALL_TREES.items(), [np.float64, np.float32]): est = TreeEstimator(random_state=0)
log = logging.getLogger(__name__)
from salt.ext import six
deadline = second_attempt.created_at + timedelta(days=1) query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(deadline, query) self.assertEqual(result, second_attempt)
self.assertEqual(len(FooFile.objects.all()), 0) self.assertEqual(len(FooImage.objects.all()), 0)
course_tag_api.set_course_tag(user, course_key, partition_key, group.id)
if not PY3: axes = _check_plot_works(df.plot.box, subplots=True, logy=True)
if seconds < 0: continue
self.assertEqual(result, expected_without_index)
self.assertEqual( str(w.message), 'copying data after decompressing; this may mean that' ' decompress is caching its result', )
b5 = BooleanModel.objects.all().extra(select={'string_col': 'string'})[0] self.assertNotIsInstance(b5.pk, bool)
if template not in salt.utils.templates.TEMPLATE_REGISTRY: raise CommandExecutionError( 'Attempted to render file paths with unavailable engine ' '{0}'.format(template) )
import integration
self.assertEqual(start_ts, p.to_timestamp('3D', how=a))
for X in [X_1row, X_1col, X_list_1row, X_list_1row]:
reset = key_node.tag == u'!reset'
MODULESTORE = convert_module_store_setting_if_needed(MODULESTORE)
self.assertRaises(ValueError, lambda: df1 == df2)
assert_array_equal(X_2.astype(bool), univariate_filter.inverse_transform(X_r.astype(bool)))
def _get_axes(N, K, index=index, columns=columns):
idx = DatetimeIndex(['2016-05-16', 'NaT', NaT, np.NaN])
certificate_template_asset.asset = SimpleUploadedFile('picture1.jpg', 'file contents') certificate_template_asset.save() self.assertEqual(certificate_template_asset.asset, 'certificate_template_assets/1/picture1.jpg')
ModeCreationPage( self.browser, self.course_id, mode_slug=u'verified', mode_display_name=u'Verified Certificate', min_price=10, suggested_prices='10,20' ).visit()
contents='ssh-rsa AAAAB3NzaC1kc3MAAACBAL0sQ9fJ5bYTEyY== root'
self.assertIsNone(item.getElementsByTagName( 'guid')[0].attributes.get('isPermaLink'))
for i, geom in enumerate(coll): if isinstance(geom, Polygon): coll[i] = self._fix_polygon(geom)
path, final_field, targets, rest = self.names_to_path( names, opts, allow_many, fail_on_missing=True)
if fastpath:
if isinstance(loc, (slice, np.ndarray)): new_axes[axis] = new_axes[axis][loc] else: new_axes.pop(axis)
for i in list(set(self.indices.keys()) - set(restricted)): ind = self.indices[i]
key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))
short_name = '.'.join(parts[:(i + 1)]) break
self.register_page.visit()
X_csr_scaled = scale(X_csr, with_mean=False, with_std=False, copy=True) assert_array_almost_equal(X_csr.toarray(), X_csr_scaled.toarray())
self.assertEqual(df.memory_usage().sum(), df.memory_usage(deep=True).sum())
data_not_concrete_inherited = models.ForeignObject( Relation, on_delete=models.CASCADE, from_fields=['model_non_concrete_id'], to_fields=['id'], related_name='fo_concrete_rel', )
from __future__ import absolute_import import datetime import os import time import pickle import logging
self.io_loop.spawn_callback( self._handle_connection, client_socket, address)
from __future__ import absolute_import import contextlib
y = lfw_people.target target_names = lfw_people.target_names n_classes = target_names.shape[0]
time.sleep(1) return info(name).get('uid') == uid
user = User.objects.get(email=self.enrolled_student.email) self.assertFalse(CourseEnrollment.is_enrolled(user, self.course.id))
filelist = random.sample(filelist, int(num_entries / self._cull_frequency)) for fname in filelist: self._delete(fname)
HAS_MARKUPSAFE = False
url(r'^\$', include([ url(r'^bar/$', lambda x: x, name='bar'), ])),
result = strings.str_contains(values, 'foo', regex=False, case=False) expected = np.array([True, False, True, False]) tm.assert_numpy_array_equal(result, expected)
if key.scope not in self.VALID_SCOPES: raise InvalidScopeError(key, self.VALID_SCOPES) if key.scope == Scope.content: self._load_definition()
time.sleep(5)
try: return MultiIndex.from_tuples(new_tuples, names=self.names) except: return Index(new_tuples)
bulk_ops_record.unnest()
success, task_message = get_task_completion_info(task) status = _("Complete") if success else _("Incomplete") task_feature_dict['status'] = status task_feature_dict['task_message'] = task_message
sections_list = [] for chapter in self.get_progress_summary(): sections_list.extend(chapter['sections'])
params_without_course_id = get_params_from_user_info_call(False) self.assertNotIn("group_id", params_without_course_id)
from __future__ import unicode_literals
result._set_as_cached(label, self)
result = f.clean('12/21/2010 13:30:05') self.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))
if try_quick:
fields = {}
raise SaltClientError('Connection to master lost')
revoke_access(course_ccx, staff, 'staff')
with self: if self.cmd: passed = self.run_test() if not passed: self.failed_suites.append(self)
from __future__ import absolute_import import os
before = attempt.created_at - timedelta(seconds=1) self.assertFalse(attempt.active_at_datetime(before))
scores = cval.cross_val_score(clf, X_sparse, X) assert_array_equal(scores, clf.score(X_sparse, X))
netapi = salt.netapi.NetapiClient(__opts__) if not netapi._is_master_running(): raise salt.exceptions.SaltDaemonNotRunning( 'Salt Master must be running.')
mode = (0o0777 ^ mask) & 0o0666 os.chmod(img_dest, mode)
self.save() orderitems = OrderItem.objects.filter(order=self).select_subclasses() site_name = microsite.get_value('SITE_NAME', settings.SITE_NAME)
self.assertRaises(KeyError, lambda: self.df2.loc['e'])
def is_in_obj(gpr): try: return id(gpr) == id(obj[gpr.name]) except Exception: return False
'subscription_id': course_overview.clean_id(padding_char='_'),
self.submit_question_answer('H1P1', {'2_1': 'Correct', '2_2': 'Incorrect'})
assert len(str(e))
descriptor.save() return descriptor
block_structure.remove_block_if( lambda block_key: block_key.block_type == 'split_test', keep_descendants=True, )
cmd = ['softwareupdate', '--clear-catalog']
continue
'simple_history',
with self.assertNumQueries(0): self.field_data_cache = FieldDataCache([mock_descriptor()], course_id, self.user) self.kvs = DjangoKeyValueStore(self.field_data_cache)
from __future__ import unicode_literals
response = requests.get(self.url) self.assertEqual(response.status_code, 400)
import salt.utils from salt.exceptions import CommandExecutionError
stdout, stderr, _ = single.cmd_block()
self.__xml = False self.__no_lock = False self.__no_raise = False self.__refresh = False
permutation_option = None if response.has_shuffle(): permutation_option = 'shuffle' elif response.has_answerpool(): permutation_option = 'answerpool'
X_sparse_test = X_sparse_test.copy()
import salt import salt.loader import salt.utils from salt.utils.process import SignalHandlingMultiprocessingProcess
try: from genshi.template import MarkupTemplate from genshi.template import NewTextTemplate from genshi.template import OldTextTemplate HAS_LIBS = True except ImportError: HAS_LIBS = False
available = list(_available_services().keys())
self.verify_lists_expected_cohorts([])
self.deferred_loading = (set(), True)
if absurl.startswith(('http://', 'https://', '//')): return http.HttpResponseRedirect(absurl)
with salt.utils.fopen(self.path, 'w') as fic: fic.write(content) fic.flush()
df2 = DataFrame(np.ones(5), MultiIndex.from_arrays([l0, l1]))
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
r = result.ravel() arr = np.array([r[0]])
from openedx.core.djangoapps.credit.api.eligibility import ( is_credit_course, get_credit_requirement_status, )
tree = etree.Element(problemtree.tag) for item in problemtree: item_xhtml = self._extract_html(item) if item_xhtml is not None: tree.append(item_xhtml)
if result['requireType'] == 'require': world.wait(1) continue
system.__salt__ = {}
return salt.runner.RunnerClient(_master_opts())
self.assertEqual(len(site_configuration_history), 1)
app_module = import_module(app_name)
if getattr(cls, 'multi_db', False): return [ alias for alias in connections if include_mirrors or not connections[alias].settings_dict['TEST']['MIRROR'] ] else: return [DEFAULT_DB_ALIAS]
df = DataFrame(np.random.randn(30, 4), columns=list('abcd'))
if values is not None: course_ids = list(set(course_ids) & set(values))
pr_url = os.environ.get('CI_PULL_REQUEST') if not pr_url: exit("not a pull request")
if rbm == rbm_list[-1]: if targets: assert len(rbm.hidden_layers) == 2 else: assert len(rbm.hidden_layers) == 1 else: assert len(rbm.hidden_layers) == 1
if self.on is None and self.left_on is None and self.right_on is None:
go_to_section("data_download")
assert not is_local and not self.has_resolvers return self.scope[key]
self.assertEqual( StudentModule.objects.filter( student=self.module_to_reset.student, course_id=self.course.id, module_state_key=self.module_to_reset.module_state_key, ).count(), 0 )
self.client = Client() assert_true(self.client.login(username=uname, password=password))
return None
import salt.utils
if course is None: log.warn(u"Could not find course with ID %s.", course_id) raise Http404
assert_not_equal(id(attr_value), id(attr_value_cloned))
Child.objects.create(parent=parent, name='Daniel') Child.objects.create(parent=parent, name='Daniel')
from salt.ext.six import exec_ import salt.utils import salt.loader from salt.fileclient import get_file_client from salt.utils.pyobjects import Registry, StateFactory, SaltObject, Map import salt.ext.six as six
DATE_INPUT_FORMATS = [
if not _check_features(): ret['error'] = 'bookmarks are not supported' return ret
publications = models.ManyToManyField(Publication, name='publications') tags = models.ManyToManyField(Tag, related_name='tags')
self.tsframe.to_csv(path) recons = DataFrame.from_csv(path)
__proxyenabled__ = ['esxi']
from __future__ import absolute_import
sdf = SparseDataFrame(columns=np.arange(10), index=np.arange(10)) for col, series in compat.iteritems(sdf): tm.assertIsInstance(series, SparseSeries)
s = Series(list('abcdef'))
dict_delitem(self, key) link_prev, link_next, key = self.__map.pop(key) link_prev[1] = link_next link_next[0] = link_prev
s = Series([True]) self.assertTrue(s.bool())
def f(): cat > cat_rev
from salt.states import cloud import salt.utils.cloud
cmd = ['softwareupdate', '--set-catalog', url]
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
result = self.panel4d.reindex( major=self.panel4d.major_axis, copy=False) assert_panel4d_equal(result, self.panel4d) self.assertTrue(result is self.panel4d)
@ignore_warnings(category=DeprecationWarning) def score(self, g, X): return g.score(X).sum()
__virtualname__ = 'pkg'
import logging
num_post_keys += 1 if (settings.DATA_UPLOAD_MAX_NUMBER_FIELDS is not None and settings.DATA_UPLOAD_MAX_NUMBER_FIELDS < num_post_keys): raise TooManyFieldsSent( 'The number of GET/POST parameters exceeded ' 'settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.' )
self.assertEqual( self.run_function('timezone.set_zone', ['spongebob']), 'ERROR executing \'timezone.set_zone\': ' 'Invalid Timezone: spongebob')
if button == 'pause': self.wait_for(lambda: self.state != 'buffering', 'Player is Ready for Pause')
if self.axis == 0: obj = obj.swapaxes(0, 1) return obj
newnode['hostname'] = vm_['name'] newnode['ostemplate'] = vm_['image']
if salt.utils.is_windows(): from salt.utils.win_functions import get_parent_pid ppid = get_parent_pid() else: ppid = os.getppid()
self.course = CourseFactory.create() self.checkpoint_location = u'i4x://{org}/{course}/edx-reverification-block/first_uuid'.format( org=self.course.id.org, course=self.course.id.course )
from salt.states import win_path
for parent, children in enumerate(children_map): for child in children:
X = X_orig.copy() result1 = (X[block1] + Z).reindex(columns=subs)
self.assertEqual(response.status_code, 200)
store = HDFStore(hh) result = store.select('df', where='l1=l') assert_frame_equal(result, expected) store.close()
import salt.loader import salt.utils import salt.utils.minion from salt.ext.six.moves import map
is_justify = not (self.inferred_type in ('string', 'unicode') or (self.inferred_type == 'categorical' and is_object_dtype(self.categories)))
for pool_size in [1, 2, 5]: do_test(pool_size)
land_reference = data.coverages[6]
first_checkpoint = VerificationCheckpoint.objects.create( course_id=self.course.id, checkpoint_location=self.checkpoint_midterm ) second_checkpoint = VerificationCheckpoint.objects.create( course_id=self.course.id, checkpoint_location=self.checkpoint_final )
X = rng.randint(0, 4, size=(1000, 1)) y = rng.rand(1000) n_trees = 500
self.table = self.pd_sql.get_table(self.name, self.schema)
if widths is not None: colspecs, col = [], 0 for w in widths: colspecs.append((col, col + w)) col += w
skip_compression = PY3 and is_platform_windows()
self.coefs_ = [] self.intercepts_ = []
return super(DatetimeBlock, self)._astype(dtype=dtype, **kwargs)
return _("All learners")
return
lc_block = self._add_library_content_block(course, self.lib_key) lc_block = self._refresh_children(lc_block) self.assertEqual(len(lc_block.children), 0)
return source, display_name
center2 = models.PointField(srid=2276, db_column='mycenter') border1 = models.PolygonField() border2 = models.PolygonField(srid=2276)
if groups[-1] != ln: groups.append(ln)
f_init = compile_f_init() cc = self._compiled_cache self._compiled_cache = (state, indices, f_init, cc[3]) return self._compiled_cache[2:]
expected_1 = TimedeltaIndex( ['1 day', '3 day', '4 day', '5 day'], freq=None, name='idx')
dbm = make_random_basic_binary_dbm( rng = rng, pool_size_1 = pool_size_1, )
x_squared_norms = row_norms(X, squared=True)
continue
for i, k in enumerate(tup):
from __future__ import absolute_import
if norm(grad * np.logical_or(grad < 0, H > 0)) < tol: break
qs = SouthTexasCity.objects.annotate(perim=Perimeter('point')) for city in qs: self.assertEqual(0, city.perim.m)
K_test = np.dot(X_[180:], X_[:180].T) y_test = y_[180:]
self._original = None
self.prev_floatX = config.floatX config.floatX = 'float64'
alpha_ = 1. / np.var(y) lambda_ = np.ones(n_features)
return False
[heappush(inertia, (ini[idx], k, coord_col[idx])) for idx in range(n_additions)]
from salt.modules import mac_defaults as macdefaults
return obj
target_source = self.add_mask_source(self.get_target_space(), 'targets') return target_source
e = pd.Series([0, 1, 2, 3, 4]) tr, v = [3], [3.0] check_replace(tr, v, e)
enrollment = cls.get_or_create_enrollment(user, course_key) enrollment.update_enrollment(is_active=True, mode=mode) if badges_enabled(): from lms.djangoapps.badges.events.course_meta import award_enrollment_badge award_enrollment_badge(user)
self.assertListEqual( self.get_item_from_modulestore(self.seq2_usage_key).children, [unit_1_key, unit_2_key] )
m = Memory(cachedir=lfw_home, compress=6, verbose=0) load_func = m.cache(_fetch_lfw_people)
from __future__ import unicode_literals
ret = np.empty(shape, dtype=dtype)
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
def f(): s[l] = 0
(ModuleStoreEnum.RevisionOption.published_only, 'assertOLXIsDeleted'), (ModuleStoreEnum.RevisionOption.all, 'assertOLXIsDeleted'), (None, 'assertOLXIsDeleted'),
ret['msg'] = _urlopen(url6, timeout=timeout).read().splitlines()
if not DETAILS['url'].endswith('/'): DETAILS['url'] += '/'
('cancelled', 'cancelled')
the_html2 = problem.get_html() self.assertEquals(the_html, the_html2)
from __future__ import absolute_import import logging import os import pprint import time
self.choices = list(choices)
import os import logging import smtplib import StringIO from email.utils import formatdate
self.assertEqual(dt_result.index.name, 'key')
raise PyDslError( 'An error occurred while running highstate: {0}'.format( '; '.join(result) ) )
if kw_overrides_match is None: return profile_match return kw_overrides_match
random_state = np.random.RandomState(0) X = np.c_[X, random_state.randn(n_samples, 200 * n_features)]
self._prefixlen = self._prefix_from_ip_string(addr[1])
model = model_id
self.assertEqual(4, len(coll)) self.assertTrue(ref_geom.equals(coll))
limiter = BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning("Rate limit exceeded in password_reset") return HttpResponseForbidden()
super(AppConfigStub, self).__init__(label, None)
folds = np.zeros(n_samples) for i, (_, test) in enumerate(lkf.split(X, y, labels)): folds[test] = i
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
if clone: return self.clone() else: return
if len(names) == 1: return ret[names[0]] return ret
from __future__ import absolute_import
return False
for func in dir(base): if not func.startswith('process_'): continue
'openedx.core.djangoapps.theming',
reload_the_page(step) edit_component_and_select_settings()
result = f.clean('1:30 PM 21-12-2010') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
tm._skip_if_no_pytz() import pytz
driver = Driver(ds_input.get('driver', 'MEM'))
from django.utils.translation import ugettext as _
frgd_img = to_img(data.X[i], 28) frgd_img = frgd_img.convert('L')
course = modulestore().get_course(course_key) if course is None: return HttpResponse(status=400)
iris = datasets.load_iris()
exc_info_on_loglevel=logging.DEBUG
import yaml
self.assertEqual(event.dt.replace(tzinfo=EAT), dt)
_response = _request("GET", options['url'] + options['db'] + "/_design/salt")
transcripts_utils.download_youtube_subs(good_youtube_sub, self.course, settings)
self.certificates_section.wait_for_certificate_invalidations_section()
if indexnamerow: coffset = len(indexnamerow) - len(columns) index = index.set_names(indexnamerow[:coffset])
from salt.exceptions import CommandExecutionError, SaltRenderError import salt.utils import salt.utils.gitfs import logging import salt.minion import salt.loader import salt.template
self._verify_branch_setting(ModuleStoreEnum.Branch.draft_preferred) _verify_revision_is_published(location)
thumbnail_location = asset.get('thumbnail_location', None) if thumbnail_location: thumbnail_location = course_key.make_asset_key( 'thumbnail', thumbnail_location[4])
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
filterwarnings('ignore', message='No request passed to the backend, unable to rate-limit')
raise
self.video.reload_page()
grains = {'virtual': 'physical'}
def print_to_console(payload): print(payload)
self._mixin_after_parsed_funcs.append(self.__merge_config_with_cli)
review3.content_object = dive self.assertEqual(review3._state.db, 'default')
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
violations_count_str = "Number of {safecommit_script} violations: {num_violations}\n".format( safecommit_script=safecommit_script, num_violations=num_violations )
class Model(models.Model): foreign_key = models.ForeignKey('Rel1', models.CASCADE)
self.assert_no_xss(response, xss_content)
return template % unquote(transformed_url)
self._post_init(srid)
vic = City.objects.get(point__left=co_border) self.assertEqual('Victoria', vic.name)
self.go_to_tab_and_assert_problem(2, self.problem2_name)
self.register_get_threads_response([], page=3, num_pages=3) with self.assertRaises(PageNotFoundError): get_thread_list(self.request, self.course.id, page=4, page_size=10)
supports_add_srs_entry = True supports_geometry_field_introspection = True
if check_dtype: lcd_dtype = frame.values.dtype self.assertEqual(lcd_dtype, result0.dtype) self.assertEqual(lcd_dtype, result1.dtype)
return ( f for f in opts.get_fields(include_hidden=True) if f.auto_created and not f.concrete and (f.one_to_one or f.one_to_many) )
raise SaltClientError(general_exception)
celery_task_patcher = patch.object( sync_cohort_with_mode, 'apply_async', mock.Mock(wraps=sync_cohort_with_mode.apply_async) ) self.mocked_celery_task = celery_task_patcher.start() self.addCleanup(celery_task_patcher.stop)
world.css_click(css_selector='.chapter', index=1) subsection_css = 'a[href*="Test_Subsection_2/"]'
result.append(".")
list_updates = salt.utils.alias_function(list_upgrades, 'list_updates')
GRAINS_CACHE = {} DETAILS = {}
if _np_version_under1p9: raise nose.SkipTest("Numpy version under 1.9")
for key, value in pkg_nfo.items(): if key == 'source_rpm': t_nfo['source'] = value else: t_nfo[key] = value
from salt.states import alternatives
y_true, y_pred, _ = make_prediction(binary=False)
result = f.clean('1:30:05 PM') self.assertEqual(result, time(13, 30, 5))
self.assertContains(response, "\n1 person\n") self.assertContains(response, "Guido")
jid_dir, jid_file = self._make_tmp_jid_dirs(create_files=False)
return SPF(domain, 'TXT', nameserver)
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
from __future__ import unicode_literals
intAttributes = win32file.GetFileAttributes(path)
if f.__call__.func_code.co_flags & STAR_ARGS: return f numargs = f.__call__.func_code.co_argcount if hasattr(f.__call__,"im_self"): numargs -= 1
self.validate_metadata(existing_table)
import salt.exceptions import salt.utils.event
CHECKPOINT_PATTERN = r'(?P<checkpoint_name>[^/]+)'
self.exp_dirichlet_component_ = np.exp( _dirichlet_expectation_2d(self.components_)) self.n_batch_iter_ += 1 return
response = self.client.post(reverse('admin:student_courseaccessrole_add'), data=data) self.assertRedirects(response, reverse('admin:student_courseaccessrole_changelist'))
resp = ProxyBug.objects.get(version__icontains='beta') self.assertEqual(repr(resp), '<ProxyBug: ProxyBug:fix this>')
if data.dtype == 'int':
self._codes[self._codes >= len(new_categories)] = -1
if (len(args) == 1 and hasattr(args[0], '__iter__') and not com.is_string_like(args[0])): axes = args[0] else: axes = args
dtype = None
import numpy as np
self.assertFalse(zendesk_mock_class.mock_calls) self.assertFalse(datadog_mock.mock_calls)
version = '%s' % (pandas.__version__)
state_frame = self._get_context_stack_frame(context) if self not in state_frame: state_frame[self] = None
self.frame.index = old_index
version = 'dev' release = 'dev'
tm.skip_if_no_ne('numexpr') df = DataFrame(np.random.randn(5, 2), columns=list('ab'))
params["username"] = "this_username_has_31_characters" assert_username_error("Username cannot be more than 30 characters long")
comment, passed, retries = _download(quidditch, retries) if not passed: return (comment, str(passed))
child_vertical_usage_key = self._create_vertical(parent_usage_key=root_usage_key) resp = self.create_xblock(parent_usage_key=child_vertical_usage_key, category='problem', boilerplate='multiplechoice.yaml') self.assertEqual(resp.status_code, 200)
if (self.is_data_valid is not None and not self.is_data_valid(X_subset, y_subset)): continue
result = self.client.get_html(self._url()) self.assertNotIn('Test certificate', result.content)
schedule.__salt__ = {} schedule.__opts__ = {} schedule.__pillar__ = {}
response_gone_class = http.HttpResponseGone response_redirect_class = http.HttpResponsePermanentRedirect
assert_series_equal(s[l_slc], s.iloc[i_slc]) assert_series_equal(s.ix[l_slc], s.iloc[i_slc])
self._make_eligible() self._purchase_credit()
from pylearn2.datasets.mnist import MNIST dataset = MNIST(which_set='train') data = numpy.asarray(dataset.X, dtype=config.floatX)
if __grains__.get('os_family') == 'Debian': cfg_file = '/etc/mdadm/mdadm.conf' else: cfg_file = '/etc/mdadm.conf'
from __future__ import unicode_literals
V = rng.rand(n_features, n_features) VI = np.dot(V, V.T)
tab_css = self._tab_css(tab_name)
self.assertRaises(TypeError, lambda: ci.append(['a', 'd']))
comps = line.split() path = comps[0] mask = comps[1]
children = [] for child in tree: children.append(_merge_children(child, tags))
clf = SVC() filter1 = SelectKBest(f_classif) pipe = Pipeline([('anova', filter1), ('svc', clf)])
pixeltype = POSTGIS_TO_GDAL[pixeltype] pack_type = GDAL_TO_STRUCT[pixeltype] pack_size = 2 * STRUCT_SIZE[pack_type]
self.assertIn( 'Invalid value passed for path.', self.run_function('system.set_startup_disk', ['spongebob']))
with filesystem.open('grading_policy.json', 'r') as grading_policy: on_disk = loads(grading_policy.read()) self.assertEqual(on_disk, course.grading_policy)
self.assertTrue(formset.is_valid()) formset.save() self.assertEqual(UserSite.objects.count(), 0)
return '/boot/grub/menu.lst'
SESSION_KEY = '2b1189a188b44ad18c35e1baac6ceead'
context["autoSubmitRegForm"] = True
pipeline = preprocessing.Pipeline() pipeline.items.append(preprocessing.GlobalContrastNormalization(batch_size=5000)) pipeline.items.append(preprocessing.LeCunLCN((32,32)))
if tol > 0.0 and ewa_diff <= tol: if verbose: print('Converged (small centers change) at iteration %d/%d' % (iteration_idx + 1, n_iter)) return True
self.assertEqual(cl.queryset.count(), 1)
refdf = pd.DataFrame([[1, 'foo'], [2, 'bar'], [3, 'baz']], columns=['a', 'b'])
self.assertEqual(result['order'].bill_to_ccnum, '####')
self.assertQuerysetEqual(ObjectC.objects.exclude(childobjecta=self.oa), out_c)
v = np.empty(len(index), dtype=object)
self.assertTrue(api.is_user_eligible_for_credit("bob", self.course_key))
if sp.issparse(X): centers[c] = X[best_candidate].toarray() else: centers[c] = X[best_candidate] current_pot = best_pot closest_dist_sq = best_dist_sq
path %= { 'minion_id': minion_id }
from __future__ import absolute_import
if terminal.stdout is not None: terminal.recv() if terminal.stderr is not None: terminal.recv_err() time.sleep(0.125)
combined = series_copy.combine_first(series) self.assertTrue(np.isfinite(combined).all())
cv = StratifiedKFold(n_folds=6) classifier = svm.SVC(kernel='linear', probability=True, random_state=random_state)
content_range = {'start': 0, 'stop': 1, 'end': 2}
uniques = DatetimeIndex(uniques.astype('M8[ns]')).tz_localize( values.tz)
return self.as_sql(compiler, connection, template='%(expressions)s::%(db_type)s')
continue
class DatetimeConverter(dates.DateConverter):
module = get_module( user, request, problem.scope_ids.usage_id, field_data_cache, )._xmodule module.system.publish(problem, 'grade', grade_dict)
index = counter[chosen] minibatch = self.dataset[chosen][ index * self.batch_size:(index + 1) * self.batch_size ] counter[chosen] = (counter[chosen] + 1) % self.limit[chosen] yield minibatch
self.staff_user = User.objects.create_user( "patty", "patty@fake.edx.org", ) self.staff_user.is_staff = True
from pylearn2.utils.rng import make_np_rng
sindex = get_data(searchindex_url) filenames, objects = parse_sphinx_searchindex(sindex)
get_version = { 'Linux': linux_cpustats, 'FreeBSD': freebsd_cpustats, }
from __future__ import unicode_literals
self.best_cost = self.coeff * np.inf self.best_model = None
from salt.exceptions import CommandExecutionError from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return cursor
from __future__ import unicode_literals
url = _YAHOO_COMPONENTS_URL + 's={0}&f={1}&e=.csv&h={2}'
pairs, target, target_names = load_func( index_file_path, data_folder_path, resize=resize, color=color, slice_=slice_)
html = module.get_problem_html()
return self.lcp.done
PLATFORM_TWITTER_ACCOUNT = ENV_TOKENS.get('PLATFORM_TWITTER_ACCOUNT', PLATFORM_TWITTER_ACCOUNT) PLATFORM_FACEBOOK_ACCOUNT = ENV_TOKENS.get('PLATFORM_FACEBOOK_ACCOUNT', PLATFORM_FACEBOOK_ACCOUNT)
from __future__ import absolute_import
self.case_sensitive = True
import salt from salt.modules import syslog_ng
result = block._try_coerce_and_cast_result(result)
return []
for a in self.axes: a.set_info(self.info) a.convert(values, nan_rep=self.nan_rep, encoding=self.encoding)
if service != 'README': ret.add(service)
new_axes = [] for a in self._AXIS_ORDERS: new_axes.append(getattr(self, a).union(getattr(other, a)))
instructor = UserFactory.create(username="instructor", email="instructor@e.com", password="test") role = CourseInstructorRole(self.course_limited.id) role.add_users(instructor)
if self.centering: self.Xt[row] -= self.x_sum / normalizer
self.assertEqual(last_thurs + offset_thur, next_thurs)
df = self.process_axes(df, columns=columns)
if not os.path.exists(dataset_conf_path): os.makedirs(dataset_conf_path)
self.assertRaises(Exception, self.bseries.__getitem__, len(self.bseries) + 1)
labels = birch_model.labels_ centroids = birch_model.subcluster_centers_ n_clusters = np.unique(labels).size print("n_clusters : %d" % n_clusters)
called_save = [] called_write_cells = []
expected = '<video url_name="SampleProblem" download_video="false"/>\n' self.assertEquals(expected, etree.tostring(xml, pretty_print=True))
results.append(['', label, problem_name, count_grade, student_count_percent, percent])
self.assertEqual( Book.objects.filter(id__in=[]).count(), 0 )
context[context_key] = request.META.get(header_name, '').decode('latin1')
n_features = 2 n_classes = 2 n_samples = 1000 X, y = make_blobs(n_samples=n_samples, n_features=n_features, centers=n_classes, random_state=11)
import sqlite3 sqlite3.register_adapter(time, lambda _: _.strftime("%H:%M:%S.%f")) super(SQLiteTable, self).__init__(*args, **kwargs)
for update in wua_search_result.Updates: if update.IsDownloaded: log.debug(u'To be installed: {0}'.format(update.Title)) wua_install_list.Add(update)
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, done=True) self.assertFalse(module.should_show_check_button())
orphan = course_key.make_usage_key('chapter', 'OrphanChapter') self.store.create_item(self.user_id, orphan.course_key, orphan.block_type, block_id=orphan.block_id)
num_certs = 0 for cert in refunded_certs: num_certs += 1 self.assertEqual(num_certs, 2)
available_version = salt.utils.alias_function(latest_version, 'available_version')
if blocked and unsatisfied: ret['blocked'] = blocked
if name[-1] == '/' and name != '/': name = name[:-1]
from __future__ import absolute_import
self.assertEqual(iptables.build_rule(**{'if': '!eth0'}), '! -i eth0')
import salt.utils from salt.ext import six
func.argtypes = argtypes
TASK_RUNLEVEL_LUA = 0 TASK_RUNLEVEL_HIGHEST = 1
logging.basicConfig(level=logging.DEBUG, format="%(levelname)s %(message)s")
self.mixed_frame.ix[5:20, 'foo'] = nan self.mixed_frame.ix[-10:, 'A'] = nan
output = os.linesep.join(output.splitlines())
autosummary_generate = True
atexit.register(shutil.rmtree, six.text_type(TMPDIR))
from __future__ import unicode_literals
if os.path.isfile(CONFIG): os.remove(CONFIG)
return GISLookup._check_geo_field(self.model._meta, field_name)
import logging import os import functools from itertools import repeat import warnings
assert isinstance(model.hidden_layers[-1], Softmax) layer_to_clamp[model.hidden_layers[-1]] = True layer_to_pos_samples[model.hidden_layers[-1]] = Y hid = model.hidden_layers[:-1]
fg1.ptr = ctypes.c_void_p() fg1.ptr = None fg2.ptr = c_float_p(ctypes.c_float(5.23)) fg2.ptr = None
locator = BlockUsageLocator(course_locator, block_type='chapter', block_id='chapter1') self.assertTrue( modulestore().has_item(locator), "couldn't find chapter1" )
shutil.rmtree(t_path)
self.assertDone([1, 3])
import os
ret = _get_namespaces(apiserver_url, namespace) return ret
def context_manager_no_warning(): with ignore_warnings(): _warning_function()
request = RequestFactory().post('unused_url') request.user = self.user request.META['HTTP_HOST'] = "aGenericValidHostName" self.append_allowed_hosts("aGenericValidHostName")
self.assertEqual([], course_detail_json['pre_requisite_courses'])
layer_below = self.dbm.hidden_layers[i-1]
def __init__( self, contentstore=None,
from __future__ import absolute_import import optparse import pprint
tmp *= 1 - damping A *= damping A -= tmp
if (i + 1) != (self.n_layers_ - 1): activations[i + 1] = hidden_activation(activations[i + 1])
self.contentstore = MongoContentStore(HOST, DB, port=PORT)
train_data, test_data, target_train, target_test = train_test_split( data, target, test_size=.2, random_state=0)
b2 = b.reindex(index=reversed(b.index)) result = a.dot(b) assert_series_equal(result, expected)
if line.lstrip().startswith('#') or line.isspace(): continue if line.startswith('iface'): sline = line.split()
return ip_str
simplefilter('ignore')
from __future__ import absolute_import import logging import pipes
if fnmatch.fnmatch(chunk['__sls__'], req_val): if requisite == 'prereq': chunk['__prereq__'] = True reqs.append(chunk) found = True continue
key = safe_key('a' * 300, 'prefix', 'version') self.assertTrue(self._is_valid_key(key))
with super(FollowedThreadsUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
mi2.set_labels(labels2, inplace=True) assert_almost_equal(mi2.values, new_values)
from .models import CourseStructure
connectivity = kneighbors_graph(X, n_neighbors=10, include_self=False) connectivity = 0.5 * (connectivity + connectivity.T)
ssh_gateway_config['ssh_gateway_user'] = config.get_cloud_config_value( 'ssh_gateway_username', vm_, __opts__, default=None, search_global=False )
if self.eigen_solver == 'auto': if K.shape[0] > 200 and n_components < 10: eigen_solver = 'arpack' else: eigen_solver = 'dense' else: eigen_solver = self.eigen_solver
assert_equal(l[train].size + l[test].size, l.size)
self.assertEqual(iptables.build_rule(jump='LOG', **{'log-prefix': 'long prefix'}), '--jump LOG --log-prefix "long prefix"')
if lines_list and lines_list[-1]: lines_list.append('') return '\n'.join(lines_list)
X_dense[3, :] = 0.0
result = result.astype(float) tm.assert_frame_equal(result, df)
if sys.version_info[:2] < (2, 6): raise nose.SkipTest("file:// not supported with Python < 2.6")
port = 4505 master_ip = None
from __future__ import unicode_literals
names_t_actual = sel.transform([feature_names]) assert_array_equal(feature_names_t, names_t_actual.ravel())
from __future__ import absolute_import
truncates_names = False
time.sleep(1) continue
DEPRECATED_BLOCK_TYPES = ['poll', 'survey']
if sys.platform == "win32": _moved_attributes += [ MovedModule("winreg", "_winreg"), ]
return comdat['stderr']
elif mask.any(): if transpose: mask = mask.T if isinstance(new, np.ndarray): new = new.T axis = new_values.ndim - axis - 1
send_mail_to_student(student_email, email_params, language=language)
self.login_staff() self.assertEqual(self.get_progress_detail(), u'0/2')
return self.initial["password"]
if isinstance(block_key, BlockUsageLocator): return block_key.map_into_course(course_key) elif not isinstance(block_key, BlockKey): block_key = BlockKey(*block_key)
self._assert_cannot_reverify()
link_pattern = '<a href="%s">%s</a>' orig_pattern = '<span class="n">%s</span>' period = '<span class="o">.</span>'
if response.status_code != 200: log.error( "Outcome service response: Unexpected status code %s", response.status_code ) return False
cp = salt.utils.alias_function(copy_from, 'cp')
if index_entry is not None: self._update_head(course_key, index_entry, xblock.location.branch, new_id)
params, response = _validate_post_params(request.POST) if response is not None: return response
other = Int64Index(np.arange(25, 14, -1))
XBLOCK_SETTINGS = { "VideoDescriptor": { "licensing_enabled": True } }
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
from __future__ import absolute_import import os from os.path import join from shutil import rmtree from tempfile import mkdtemp
valid_repr = numpy.floor((valid_repr / valid_repr.max())*999) test_repr = numpy.floor((test_repr / test_repr.max())*999)
msg = 'Disabling timed exam {exam_id}'.format(exam_id=exam['id']) log.info(msg) update_exam( exam_id=exam['id'], is_proctored=False, is_active=False, )
_list = self.run_function('beacons.list', return_yaml=False) self.assertFalse(_list['enabled'])
if do_oob: sample_mask = _random_sample_mask(n_samples, n_inbag, random_state) old_oob_score = loss_(y[~sample_mask], y_pred[~sample_mask], sample_weight[~sample_mask])
if field_decorator is None: self.field_decorator = lambda x: x else: self.field_decorator = field_decorator
assert_equal(5, KFold(5).get_n_splits(X2))
self.assertTrue(filecmp.cmp(path_test + '.bak', path_in))
if self.mangle_dupe_cols:
try: os.unlink(filename_numpy) except: pass try: os.unlink(filename_larry) except: pass
self.eof_index = len(string)
MAX_ASSET_UPLOAD_FILE_SIZE_URL = ""
modulestore().get_item(usage_key)
self.assertIsNone(get_template_request_context())
ContentType.objects.clear_cache()
oracle.__salt__ = {} oracle.cx_Oracle = object()
self.assertEqual( self.run_function('pip.list', ['pip'], bin_env=venv_dir), {'pip': '6.0'} )
log = logging.getLogger(__name__)
import json
mock_create_subtask_fcn_args = mock_create_subtask_fcn.call_args_list self.assertEqual(len(mock_create_subtask_fcn_args[0][0][0]), 3) self.assertEqual(len(mock_create_subtask_fcn_args[1][0][0]), 3) self.assertEqual(len(mock_create_subtask_fcn_args[2][0][0]), 5)
__bool__ = __nonzero__
echo "Working hard..."
test3 = new value 3B
item = self.get_item(item_location)
choices.append((choice.get("name"), components))
start = datetime.now(UTC) first_block = self.add_icrv_xblock(related_assessment_name="Midterm Start Date")
if enc in ['e', 'ecdsa']: return 'ecdsa-sha2-nistp256' return enc
for handler in logging.root.handlers: handler.addFilter(SleekXMPPMUC())
return ngroup_pillar
ml_cost = (model.free_energy(pos_v).mean() - model.free_energy(neg_v).mean())
abc = RestrictedCourse.objects.get(course_key=new_course_id) abc.delete() with self.assertNumQueries(1): RestrictedCourse.is_restricted_course(new_course_id)
td = Timedelta(days=1, seconds=1) result = frequencies.to_offset(td) expected = offsets.Second(86401) assert (expected == result)
expected = DataFrame([[2, 1]], columns=['b', 'a'])
pass
with self.assertRaises(TemplateSyntaxError): FilterExpression("article._hidden|upper", p)
if isinstance(authored_data, CmsFieldData):
from salt.states import ipset
DATE_INPUT_FORMATS = [
from __future__ import absolute_import import os import shutil import tempfile
for sql in self.geometry_sql: self.execute(sql) self.geometry_sql = []
self.course_nav.q(css='button.check.Check').click() self.course_nav.wait_for_ajax()
ind -= total
r2_scorer = make_scorer(r2_score) mean_squared_error_scorer = make_scorer(mean_squared_error, greater_is_better=False) mean_absolute_error_scorer = make_scorer(mean_absolute_error, greater_is_better=False) median_absolute_error_scorer = make_scorer(median_absolute_error, greater_is_better=False)
self.user = UserFactory.create( username="inactive", email="inactive@example.com", password=self.PASSWORD, is_active=True )
raise IOError("No translation files found for default language %s." % settings.LANGUAGE_CODE)
USER_RESPONSE_DATA = None
def __or__(self, other): "Returns the union of this Geometry and the other." return self.union(other)
from __future__ import absolute_import import logging
EXAMPLE_FULL_NAME = u'John Doë'
import salt.config as config
with self.assertRaises(ValueError): Author.objects.annotate(friends=Count('friends'))
'pillar_cache': bool,
X = np.c_[X, E]
self.lock = threading.Lock()
from __future__ import absolute_import
hard_dependencies = ("numpy", "pytz", "dateutil") missing_dependencies = []
pass
assert_series_equal(result + td2, td1)
info = super(UserList, self).__reduce_ex__(*args, **kwargs) return info[:3] + (None, None)
ecommerce_service = EcommerceService() if ecommerce_service.is_enabled(user): url = ecommerce_service.checkout_page_url(sku)
self._test_email_address_failures(SESAddressBlacklistedError(554, "Email address is blacklisted"))
if exc.errno != errno.EPIPE: raise exc
Z = Z.reshape(xx.shape) plt.figure() plt.pcolormesh(xx, yy, Z, cmap=cmap_light)
from __future__ import absolute_import import os import yaml import shutil import tempfile
__virtualname__ = 'network'
self.signal_handler.send("course_published", course_key=course_key.for_branch(None))
kwds['allow_leading_cols'] = self.index_col is not False
if constraint not in constraints: constraints[constraint] = { "columns": [], "primary_key": pk, "unique": unique, "foreign_key": None, "check": check,
PAGES_PACKAGE_DIR = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'pages')
EDXMKTG_LOGGED_IN_COOKIE_NAME = ENV_TOKENS.get('EDXMKTG_LOGGED_IN_COOKIE_NAME', EDXMKTG_LOGGED_IN_COOKIE_NAME) EDXMKTG_USER_INFO_COOKIE_NAME = ENV_TOKENS.get('EDXMKTG_USER_INFO_COOKIE_NAME', EDXMKTG_USER_INFO_COOKIE_NAME)
with self.assertRaises(Place.DoesNotExist): ItalianRestaurant.objects.get(name="The Noodle Void")
self.cohort_default_student_username = "cohort_default_student" self.cohort_default_student_email = "cohort_default_student@example.com" StudioAutoAuthPage( self.browser, username=self.cohort_default_student_username, email=self.cohort_default_student_email, no_login=True ).visit()
expected = 'You can now <a href="' + reverse('login') + '">login</a>.' self.assertIn(expected, resp.content)
from __future__ import absolute_import import logging
course_page.wait_for_page()
raise NotImplementedError(_("Problem's definition does not support rescoring."))
default = self.defaults.get(option.dest) value = getattr(self.options, option.dest, default) if value != default: continue
ret['master'] = ip_port[0]
self.assertTrue(com.is_integer(np.timedelta64(1, 'D')))
import codecs from fractions import Fraction import unittest
module = CapaFactory.create(attempts=attempts, max_attempts=attempts, done=True) self.assertFalse(module.should_show_save_button())
with self.assertRaises(ValueError): Country.objects.filter(mpoly__relate=(23, 'foo'))
return _render_certificate_template(request, context, course, user_certificate)
attempts_left_open = CapaFactory.create(showanswer='finished', max_attempts="1", attempts="0", due=self.tomorrow_str) self.assertFalse(attempts_left_open.answer_available())
if self._aborting: return
f = CharField() self.assertEqual(f.widget_attrs(TextInput()), {}) self.assertEqual(f.widget_attrs(Textarea()), {})
with tm.ensure_clean() as path: empty_ds.to_stata(path, write_index=False) empty_ds2 = read_stata(path) tm.assert_frame_equal(empty_ds, empty_ds2)
world.clear_courses()
exc_info_on_loglevel=logging.DEBUG
useradd.__grains__ = {} useradd.__salt__ = {} useradd.__context__ = {}
when = _when[0]
from __future__ import absolute_import
self.panel['ItemQ'] = 'foo' self.assertEqual(self.panel['ItemQ'].values.dtype, np.object_)
import logging
self.real_apps = real_apps or []
kernel_current = __salt__['cmd.run']('uname -a') for kernel in kernel_versions: if kernel in kernel_current: kernel_restart = False break
if self.dataset_local_dir == "": return filename
df = DataFrame([['a'], ['b']], index=[1, 2], columns=['value'])
df = DataFrame({'x': [1, 2, 3]})
redirect_response = self._redirect_if_necessary( message, already_verified, already_paid, is_enrolled, course_key, user_is_trying_to_pay, request.user, relevant_course_mode.sku ) if redirect_response is not None: return redirect_response
COURSES_WITH_UNSAFE_CODE = []
sql = "DATE_TRUNC('%s', %s)" % (lookup_type, field_name) return sql, params
def func(): raise ValueError("Unexpected message")
VerificationDeadline.set_deadline(self.course.id, self.VERIFICATION_DEADLINE)
"decision": decision,
if hextets[index] == '0': doublecolon_len += 1 if doublecolon_start == -1: doublecolon_start = index if doublecolon_len > best_doublecolon_len: best_doublecolon_len = doublecolon_len best_doublecolon_start = doublecolon_start else: doublecolon_len = 0 doublecolon_start = -1
class Channel(object): @staticmethod def factory(opts, **kwargs): ttype = 'zeromq'
time.sleep(3)
d = Series(np.random.randn(5)) x = d.rolling(window=3).kurt() tm.assert_series_equal(all_nan, x)
if self.opts.get('quiet', False): return
clf = BernoulliNB(alpha=1.0) clf.fit(X, Y)
cauth = CourseAuthorization(course_id=self.course.id, email_enabled=True) cauth.save()
CourseEnrollment.enroll(user, course_id) self.assertTrue(CourseEnrollment.is_enrolled(user, course_id)) self.assertTrue(CourseEnrollment.is_enrolled_by_partial(user, course_id_partial)) self.assert_no_events_were_emitted()
self.assertTrue( self.user.roles.filter(name="Student", course_id=new_course_key) )
self.track_selection_page.enroll('verified')
profile_image_names = get_profile_image_names(username) create_profile_images(uploaded_file, profile_image_names)
still_in_grace = CapaFactory.create(showanswer='closed', max_attempts="1", attempts="0", due=self.yesterday_str, graceperiod=self.two_day_delta_str) self.assertFalse(still_in_grace.answer_available())
grade_summary['raw_scores'] = raw_scores
from yaml import Loader, SafeLoader
label_to_fold = np.zeros(len(unique_labels))
for arg_name in operation_args[i:]:
try: migrations_module = import_module(migrations_package_name) except ImportError: pass else: try: return upath(module_dir(migrations_module)) except ValueError: pass
tm.assert_series_equal(df['labels'], df['expected_labels'], check_names=False)
result._set_names(names)
html_additional_pages = {}
from salt.states import mysql_user import salt
n_labels = 15 n_samples = 1000 n_folds = 5
import integration
'edxmako.middleware.MakoMiddleware',
randomize_module = RandomizeModule( randomize_descriptor, self.system, scope_ids=ScopeIds(None, None, self.course.id, self.course.id) )
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
self.assertEqual(first_cohort.users.get(), course_user)
from multiprocessing.pool import Pool
result = store.select('df', [Term('B>0')]) expected = df[df.B > 0] tm.assert_frame_equal(result, expected)
clf = ForestClassifier(class_weight='the larch', random_state=0) assert_raises(ValueError, clf.fit, X, y) assert_raises(ValueError, clf.fit, X, _y)
staff = self.make_staff() self.assertTrue(CourseStaffRole(self.course.id).has_user(staff))
float_items = [] complex_items = [] int_items = [] bool_items = [] object_items = [] sparse_items = [] datetime_items = [] datetime_tz_items = [] cat_items = [] extra_locs = []
import pyinotify
self.course_key = course_key self.role = role self.user_partition_id = user_partition_id self.group_id = group_id self.user_name = user_name
log_format = '[%(name)-15s] %(message)s' handler = TestsLoggingHandler(format=log_format) log.addHandler(handler)
self.centroids_ = np.empty((n_classes, n_features), dtype=np.float64) nk = np.zeros(n_classes)
from __future__ import unicode_literals
result = getattr(self.asi8, op)(other.asi8)
name = _sdecode(name) snap_name = _validate_snap_name(name, snap_name, runas=runas)
y = np.array([3, 7, 5, 9, 8, 7, 10]) x = np.arange(len(y))
_unique_labels = _FN_UNIQUE_LABELS.get(label_type, None) if not _unique_labels: raise ValueError("Unknown label type: %s" % repr(ys))
self.problem_page.a11y_audit.check_for_accessibility_errors()
group_id, user_partition_id = get_masquerading_group_info(self.test_user, self.course.id) self.assertEqual(group_id, 1) self.assertEqual(user_partition_id, 0)
import salt.ext.six as six
geom_args = bool(geom)
from __future__ import absolute_import import os import shutil import tempfile
delete_user_preference(request.user, DARK_LANGUAGE_KEY) user_pref = get_user_preference(request.user, LANGUAGE_KEY) if user_pref: request.session[LANGUAGE_SESSION_KEY] = user_pref
if hasattr(self, '_dimensions_cache'): del self._dimensions_cache super(ImageFieldFile, self).delete(save)
idx = PeriodIndex(['2011-01', 'NaT', '2011-03', '2011-04'], freq='M', name='idx')
arr = randn(50) arr[:10] = np.NaN arr[-10:] = np.NaN s = Series(arr)
a = '\xe0\xe1\xe2\xe3\xe4\xe5\xe7\xe8\xe9\xea\xeb' expected = 'aaaaaaceeee' assert_equal(strip_accents_ascii(a), expected)
other = RangeIndex(25, 14, -1)
if subset is None: subset = self.obj
import errno import glob import logging import os import shutil import time import hashlib import bisect
prefix = unichr(unicode_char)
self.conn.put_method.return_value = method_ret self.conn.put_integration.return_value = method_integration_ret self.conn.put_method_response.return_value = method_response_200_ret self.conn.put_intgration_response.return_value = method_integration_response_200_ret
def wrapped_view(*args, **kwargs): return view_func(*args, **kwargs) wrapped_view.csrf_exempt = True return wraps(view_func, assigned=available_attrs(view_func))(wrapped_view)
ax = df.plot.bar(linewidth=2) for r in ax.patches: self.assertEqual(r.get_linewidth(), 2)
self.assertContains(response, 'course-container', 1) self.assertIn('Pursue a Certificate of Achievement to highlight', response.content)
import salt.utils import salt.utils.decorators as decorators from salt.ext import six from salt.exceptions import CommandExecutionError from salt.utils import locales
zipped_content = list(lib.to_object_array( content, min_width=col_len).T) zip_len = len(zipped_content)
for chapter_module in course_module.get_display_items(): if chapter_module.hide_from_toc: continue
if cherrypy.request.config.get('tools.sessions.on', False): cherrypy.session.release_lock()
self.assertEqual(cl.queryset.count(), 1)
from Crypto.Cipher import PKCS1_OAEP
train_data = iter(ALL_FOOD_DOCS[:-1]) tv = TfidfVectorizer(norm='l1')
'ENABLE_DISCUSSION_SERVICE': True, 'ENABLE_TEXTBOOK': True,
self.submit_student_answer(self.student_a.username, problem_a_url, [OPTION_1, OPTION_1]) self.submit_student_answer(self.student_b.username, problem_b_url, [OPTION_1, OPTION_2])
MODULESTORE_FIELD_OVERRIDE_PROVIDERS = ()
environ['QUERY_STRING'] = str(raw_query_string, 'iso-8859-1')
if course_mode_has_price and (access['finance_admin'] or access['sales_admin']): sections.append(_section_e_commerce(course, access, paid_modes[0], is_white_label, is_white_label))
s = Series(['2014-01-01', '2014-02-02'], dtype='datetime64[ns]') expected = Timestamp('2014-02-02')
V = np.zeros((N, n_neighbors, n_neighbors)) nev = min(d_in, n_neighbors) evals = np.zeros([N, nev])
pass
pass
normalize = False
parent_link = parent._meta.get_ancestor_link(ancestor) if parent_link: return self.parents[parent] or parent_link
'ENABLE_CORS_HEADERS': False,
try: import SoftLayer HAS_SLLIBS = True except ImportError: HAS_SLLIBS = False
answer_objs = SurveyAnswer.objects.filter( user=self.user, form=self.survey )
tm.assert_frame_equal(rs2, df_expected)
self.course.enable_subsection_gating = True self.save_course()
set_user_preference(self.user, LANGUAGE_KEY, 'eo') self.middleware.process_request(self.request) self.assertEquals(self.request.session[LANGUAGE_SESSION_KEY], 'eo')
hash_val = ",".join([ "{0}={1}".format(key, resp_params[key]) for key in signed_fields ]) resp_params['signature'] = processor_hash(hash_val)
unser.index = [str(i) for i in unser.index] unser.columns = [str(i) for i in unser.columns]
with self.assertRaises(Exception): r.tell()
calendar0 = self.selenium.find_element_by_id('calendarin0') tds = calendar0.find_elements_by_tag_name('td')
rendered_html = etree.XML(problem.get_html())
reset_sequences = options.get('reset_sequences', True) allow_cascade = options.get('allow_cascade', False) inhibit_post_migrate = options.get('inhibit_post_migrate', False)
from __future__ import unicode_literals
try: connection.commit() except DatabaseError: try: connection.rollback() except Error: connection.close() raise
class MyModel4(AbstractParent, ConcreteParentWithManager): pass self.assertIs(MyModel4.default, MyModel4._default_manager) self.assertIsNone(getattr(MyModel4, 'objects', None))
log = logging.getLogger(__name__)
self.course_info_page.visit() self.tab_nav.go_to_tab('Course')
unicode_text = "好 各位同学".decode('utf-8') self.assertTrue(self.video.downloaded_transcript_contains_text('srt', unicode_text))
import salt.utils
self.assertEqual(Author.objects.count(), 3) self.assertEqual(book.authors.count(), 2)
execlines = ['import numpy as np', 'import matplotlib.pyplot as plt'] app.add_config_value('ipython_execlines', execlines, 'env')
bridge.__grains__ = {}
dest_structure['blocks'][new_parent_block_key].fields['children'] = new_children
raise
params[field] = "" assert_extra_field_error()
self.assertURLEqual( 'http://testserver{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format( change_user_url ), '{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format(change_user_url) )
score += _loglikelihood(doc_topic_prior, doc_topic_distr, dirichlet_doc_topic, self.n_topics)
from salt.states import boto_secgroup from salt.utils.odict import OrderedDict
email_context = {'name': '', 'email': ''} email_context.update(global_email_context)
mode = 'r+'
dm['A'] = 'bar' self.assertEqual('bar', dm['A'][0])
return True
wkt_writer_create = GEOSFuncFactory('GEOSWKTWriter_create', restype=WKT_WRITE_PTR) wkt_writer_destroy = GEOSFuncFactory('GEOSWKTWriter_destroy', argtypes=[WKT_WRITE_PTR])
y = 0.5 * X.ravel()
metadata_translations = { 'slug': 'url_name', 'name': 'display_name', }
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, Mock, NO_MOCK, NO_MOCK_REASON, patch )
return self.check_root()
priority = None
enabled = get_enabled(runas=runas)
xml = etree.fromstring(expr) xml = self.formulaInstance.preprocess_pmathml(xml) test = etree.tostring(xml)
to_string(monitor)
mean = X.mean(axis=0) std = X.std(axis=0) X = (X - mean) / std
results.columns = db._results.c.keys() results = results.join(bench['name'], on='checksum').set_index("checksum") return results
tm._skip_if_no_pytz() import pytz
if allow_empty: if is_previous: result = get_current(start - datetime.timedelta(days=1)) else: result = end
from pandas.tseries.plotting import tsplot import matplotlib.pyplot as plt
from __future__ import absolute_import
expected = DataFrame(index=[0, 1], columns=[0, 1], dtype=object)
GeoIP_open = lgeoip.GeoIP_open GeoIP_open.restype = DBTYPE GeoIP_delete = lgeoip.GeoIP_delete GeoIP_delete.argtypes = [DBTYPE] GeoIP_delete.restype = None
first = pd.DataFrame([[datetime(2016, 1, 1)]]) first[0] = first[0].dt.tz_localize('UTC')
if len(err_rows) > 1: upload_csv_to_report_store(err_rows, 'grade_report_err', course_id, start_date)
else: raise NotImplemented("cannot align with a higher dimensional " "NDFrame")
warnings.warn("SparsePanel is deprecated and will be removed in a " "future version", FutureWarning, stacklevel=2)
new_blocks.extend( make_block(values=value.copy(), ndim=self.ndim, placement=slice(mgr_loc, mgr_loc + 1)) for mgr_loc in unfit_mgr_locs)
print("Feature ranking:")
np.random.seed(0) n_samples, n_features = 100, 100
added_to_index = self.reindex_course(store) self.assertEqual(added_to_index, 3) response = self.search() self.assertEqual(response["total"], 3)
if template not in salt.utils.templates.TEMPLATE_REGISTRY: raise CommandExecutionError( 'Attempted to render file paths with unavailable engine ' '{0}'.format(template) )
from salttesting.case import TestCase from salttesting.helpers import ensure_in_syspath
DEFAULT_TABLESPACE = '' DEFAULT_INDEX_TABLESPACE = ''
reports_dir = Env.REPORT_DIR.makedirs_p() clean_dir(reports_dir)
self.assertEqual(response.status_code, 200)
url(r'^(?:foo|bar)(\w+)/$', empty_view, name="disjunction"),
url(r'^admin/', admin.site.urls),
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'azure', vm_['profile'], vm_=vm_) is False: return False
print("Computing embedding") X_red = manifold.SpectralEmbedding(n_components=2).fit_transform(X) print("Done.")
params[u'oauth_signature'] = urllib.unquote(params[u'oauth_signature']).decode('utf8')
from __future__ import absolute_import import time import datetime
log.setup_temp_logger( getattr(self.options, 'log_level', 'error') )
SORT_REVISION_FAVOR_DRAFT = ('_id.revision', pymongo.DESCENDING)
request = mock.Mock() with self.assertRaises(Throttled): self.view.check_throttles(request)
K = self.kernel_(self.X_train_) K[np.diag_indices_from(K)] += self.alpha
test_command = 'sysbench --num-threads=64 --test=threads ' test_command += '--thread-yields={0} --thread-locks={1} run ' result = None ret_val = {}
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
assert_true(X_scaled is not X)
if (llx <= ans_x <= urx) and (lly <= ans_y <= ury): correct_map.set(aid, 'correct') break
reraise_as("Couldn't open {0}".format(filepath))
course_keys = map(self._parse_course_key, args)
if upgrade_deadline is not None and verification_deadline < upgrade_deadline: raise serializers.ValidationError( 'Verification deadline must be after the course mode upgrade deadlines.')
co_mapping = { 'name': 'Name', 'state': {'name': 'State'},
store = HDFStore(hh)
from __future__ import absolute_import import logging
return False
from __future__ import unicode_literals
assert_raises(ValueError, e.fit, X_zero_samples, [])
random_state = check_random_state(42)
return HttpResponseBadRequest(u'The field {} is required.'.format(err.message))
self.tz = _get_tz(block.values.tz) self.update_info(info)
gtype = self._field.geom_type
if not hasattr(self, 'verbose_name'): self.verbose_name = self.label.title()
checkpoint = VerificationCheckpoint(course_id=self.course_id, checkpoint_location=reverification.location) checkpoint.save()
return True
if six.text_type(remote) not in repo['url']: continue
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
alternate_course = self.create_course( org=md5(self.course.org).hexdigest() )
self.assertContains(response, k, status_code=500) self.assertContains(response, v, status_code=500)
self._publish_events(block_structure, block_key, previous_count, max_count, block_keys) all_selected_children.update(usage_info.course_key.make_usage_key(s[0], s[1]) for s in selected)
max_prec = model_field.max_digits - model_field.decimal_places
self._X_ = X = unique_X self._y_ = y = isotonic_regression(unique_y, unique_sample_weight, self.y_min, self.y_max, increasing=self.increasing_)
JSON_SCHEMA_DRAFT_4 = 'http://json-schema.org/draft-04/schema#'
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
mark.delete(using='other')
mixed = Series(['aBAD', NA, 'bBAD', True, datetime.today(), 'fooBAD', None, 1, 2.])
minion = salt.cli.daemons.Minion() minion.start() break
bandwidth = cluster.estimate_bandwidth(X, quantile=0.3)
test_once = kwargs.get('test_once', False)
self.assertFalse(utils.is_commentable_cohorted(course.id, team.discussion_topic_id)) self.assertTrue(utils.is_commentable_cohorted(course.id, "random"))
yield parse_boundary_stream(sub_stream, 1024)
salt '*' win_wua.list_updates severities=['Critical']
assert_array_equal(np.argmin(samme_proba, axis=1), [2, 0, 0, 2]) assert_array_equal(np.argmax(samme_proba, axis=1), [0, 1, 1, 1])
self._original = dict((data, _zero_pad( data.get_topological_view().astype('float32'), self._pad_randomized)) for data in randomize_now)
tid = tid + random.choice(string.ascii_lowercase)
self.assertEqual(len(names), len(set(names)))
properties_current = __salt__['zpool.get'](name)[name]
X = [[1, 1, 5], [1, 1, 0]] t3.fit(X) X_incompt = [[1, 3], [1, 3]] assert_raises(ValueError, t3.transform, X_incompt)
AutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=False).visit()
assert remaining + nfalse == len(mask)
self._should_compress = True
if name is not None: self._check_structures(f, static_comp, name=name, has_min_periods=has_min_periods, has_time_rule=has_time_rule, fill_value=fill_value, has_center=has_center, **kwargs)
validated_lti_params = self.get_validated_lti_params(self.strategy)
z = np.zeros((X.shape[0], self.n_components))
>>> get_to_timestamp_base(get_freq_code('D')[0]) 6000 >>> get_to_timestamp_base(get_freq_code('W')[0]) 6000 >>> get_to_timestamp_base(get_freq_code('M')[0]) 6000
c = q.child_set.create(name='Charles') q.child_set.create(name='Edward')
neighbors_nn = np.argsort(distances, axis=1)[:, :k]
last_element = t.nodes[-1] self._dispatch(last_element)
topmost_call = False if seen_models is None: seen_models = set() topmost_call = True seen_models.add(self.model)
self.assertTrue(self.video.is_aligned(True))
return self.queryset.filter()
self.assertReturnNonEmptySaltType(ret) for state_id, state_result in six.iteritems(ret): self.assertSaltTrueReturn(dict([(state_id, state_result)]))
try:
import salt.utils.templates from salt.exceptions import SaltRenderError
project = u('pandas') copyright = u('2008-2014, the pandas development team')
broadcasted = self.frame.apply(np.sum, broadcast=True) tm.assertIsInstance(broadcasted, SparseDataFrame)
if average is not None: return np.average(score, weights=average_weight) else: return score
from pylearn2.space import (SimplyTypedSpace, VectorSpace, Conv2DSpace, CompositeSpace, VectorSequenceSpace, IndexSequenceSpace, IndexSpace, NullSpace, is_symbolic_batch) from pylearn2.utils import function, safe_zip
self.assertIn( 'Invalid String Value for Enabled', self.run_function('system.set_remote_login', ['spongebob']))
time.sleep(2 + randint(1, 10)) rlogger = logging.getLogger() for handler in rlogger.handlers: rlogger.removeHandler(handler) logging.basicConfig()
from io import TextIOWrapper s = TextIOWrapper(s, encoding='utf-8')
CourseModeFactory.create(mode_slug='honor', course_id=self.course.id) CourseModeFactory.create(mode_slug='verified', course_id=self.course.id, min_price=1)
try: if block_data.asides: aside_fields = {block_key.type: {}} for aside in block_data.asides: aside_fields[block_key.type].update(aside['fields']) except AttributeError: pass
if reload_items:
if recursive:
linear_units = units_func(lgdal.OSRGetLinearUnits) angular_units = units_func(lgdal.OSRGetAngularUnits)
actual = self.get_exceldf(basename, 'Sheet1') tm.assert_frame_equal(actual, expected)
return True
store.select('df2', typ='legacy_frame')
self.assert_correct_json_response(json_response)
df = DataFrame(np.random.randn(10, 3), index=index, columns=['A', 'B', 'C'])
self.assertEqual( second_group.id, ps_uncached.get_user_group_id_for_partition(user_partition_id) )
sys.exit(0)
if to.startswith(('./', '../')): return to
err_loc_emp_full[i, j] = np.sum(X.mean(0) ** 2) err_cov_emp_full[i, j] = EmpiricalCovariance().fit(X).error_norm( np.eye(n_features))
authentication_classes = (EnrollmentCrossDomainSessionAuth, OAuth2AuthenticationAllowInactiveUser) permission_classes = (IsAuthenticated,)
html_module = self.store.get_item(course_id.make_usage_key('html', 'nonportable')) self.assertIn('/static/foo.jpg', html_module.data)
dist_unstructured = out_unstructured[-1] dist_structured = out_structured[-1]
if isinstance(usage_key, BlockUsageLocator):
difference = salt.utils.compare_dicts(old, new)
from __future__ import unicode_literals
if self.tz is not None: key = Timestamp(key, tz=self.tz)
if not installer: log.error('No installer configured for version {0} of package ' '{1}'.format(version_num, pkg_name)) ret[pkg_name] = {'no installer': version_num} continue
obj.consolidate(inplace=True) ndims.add(obj.ndim)
if isinstance(instances, str) or isinstance(instances, six.text_type): instances = [instances] conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)
n_samples_min = int(1e3) n_samples_max = int(1e5) n_features = 100 n_centers = 100 n_queries = 100 n_steps = 6 n_iter = 5
dts_with_oob = dts + [np.datetime64('9999-01-01')]
class MyRelModel2(models.Model): objects = MyManager()
self.create_thread_helper(mock_request, extra_response_data={'context': ThreadContext.STANDALONE})
if graceperiodjson is not None: if 'grace_period' in graceperiodjson: graceperiodjson = graceperiodjson['grace_period']
from __future__ import division
pyximport = None
return None, None
if self._test_dir and os.path.sep == self._test_dir[0]: shutil.rmtree(self._test_dir) self._test_dir = None
grid_indices = [0, ] * 5
import salt.utils.pagerduty from salt.ext.six import string_types
cache_key += '.%s' % getattr(request, 'LANGUAGE_CODE', get_language())
return
warnings.warn("Do you really want to regularize the detector units to be more active than the pooling units?")
values = np.array([1, 2, 3]) self.assertTrue(np.allclose(nanops._ensure_numeric(values), values), 'Failed for numeric ndarray')
temp_poll_answers = self.poll_answers
self.n_unique_specs = 0
'log_fmt_console': str,
items = [nan] * 5 + list(range(100)) + [nan] * 5 items2 = np.array(items, dtype='O')
FILE_UPLOAD_PERMISSIONS = None
n_samples = 200 X, y = make_circles(n_samples=n_samples, shuffle=False) outer, inner = 0, 1 labels = -np.ones(n_samples) labels[0] = outer labels[-1] = inner
if center and scale: data_x -= 127.5 data_x /= 127.5 elif center: data_x -= 127.5 elif scale: data_x /= 255.
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from salttesting.unit import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
ax.plot_surface(X, Y, Z, rstride=8, cstride=8, alpha=0.3, color=c) ax.plot([1], [1], [1], color=c, label=label)
'grains_refresh_every': int,
if self.rerandomize in [RANDOMIZATION.ALWAYS, RANDOMIZATION.ONRESET] and self.is_submitted(): return True else: if self.is_correct(): return False else: return self.show_reset_button
LOGGING = {}
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
sigmas = sigma * rng.rand(n_features) + sigma / 2. X_hetero = X + rng.randn(n_samples, n_features) * sigmas
self.user = {}
from __future__ import absolute_import from __future__ import print_function
from __future__ import absolute_import import salt.utils from datetime import datetime import logging import time
bad3 = copy(city_mapping) bad3['point'] = 'CURVE'
log.exception( "Unexpected exception while attempting to initiate refund for user [%s], course [%s]", course_enrollment.user.id, course_enrollment.course_id, )
x = np.dot(x, np.arange(x.shape[1] ** 2).reshape(x.shape[1], x.shape[1]))
def true_and_notnull(x, *args, **kwargs): b = wrapper(x, *args, **kwargs) return b and notnull(b)
self.assertFalse(bool(version))
profile_privacy = UserPreference.get_value(user, ACCOUNT_VISIBILITY_PREF_KEY) return profile_privacy if profile_privacy else configuration.get('default_visibility')
cherrypy.response.headers['Content-Type'] = best out = cherrypy.response.processors[best] return out(ret)
$ ./manage.py lms resubmit_error_certificates
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
self.assertFalse(self._has_changes(parent.location)) self.assertFalse(self._has_changes(child.location))
return transform(X)
with self.assertRaises(ValueError): df.round(nan_round_Series)
vsan_config = vim.vsan.host.ConfigInfo() vsan_config.enabled = False
module.save()
del self.lc_block._xmodule._selected_set initial_blocks_assigned = self.lc_block.get_child_descriptors() self.assertEqual(len(initial_blocks_assigned), 2)
self.assertTrue(payload.get('success'))
calls = []
ser = Series(np.random.randn(100), name=0) rep_str = repr(ser) self.assertIn("Name: 0", rep_str)
raise SaltCloudConfigError( 'Either an instance (or list of names) or a provider must be ' 'specified, but not both.' )
return functools.partial(self.cache, ignore=ignore, verbose=verbose, mmap_mode=mmap_mode)
if os.path.isfile(logfile): os.unlink(logfile)
import os
__virtualname__ = 'service'
import nose
with translation.override('pl'): result = management.call_command('leave_locale_alone_false', stdout=StringIO()) self.assertIsNone(result)
with super(CreateSubCommentUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
iter_labels = labels if self.multi_class == 'multinomial': iter_labels = [None]
object_image_index = [0, ] blank_image_index = [0, ] blank_label = _get_blank_label(dataset)
from __future__ import unicode_literals
expected_p, expected_h = h1.mf_update( state_below = v.upward_state(v_state), state_above = h2.downward_state(h2_state), layer_above = h2)
salt '*' vsphere.set_coredump_network_config my.esxi.host root bad-password 'dump_ip.host.com'
return course_key.to_deprecated_string()
get_management_certificate = show_management_certificate
combos = [{x[0]: x[1]} for x in zip(combo_keys, combo_values)]
self.strategy.session_setdefault('auth_entry', 'login')
if com.is_bool_dtype(result): return result return Index(result)
if self.op in eval_in_python: res = self.func(left.value, right.value) else: res = pd.eval(self, local_dict=env, engine=engine, parser=parser)
ret = regenerate_user_certificates( student, course_id, course=course, forced_grade=options['grade_value'], template_file=options['template_file'], insecure=options['insecure'] )
dpkg.__grains__ = {} dpkg.__salt__ = {} dpkg.__context__ = {}
with warnings.catch_warnings(record=True): estimator_1 = Estimator() estimator_2 = Estimator() set_testing_parameters(estimator_1) set_testing_parameters(estimator_2) set_random_state(estimator_1) set_random_state(estimator_2)
if len(document.children) == 1: if not isinstance(document.children[0], six.string_types): document = document.children[0] return document
expected_message = self.emails[0].html_message returned_email_info = email_info[0] received_message = returned_email_info[u'email'][u'html_message'] self.assertEqual(expected_message, received_message)
import integration
self._assert_certs_in_queue(mock_queue, 1)
svc = LinearSVC(random_state=0) multi_class_svc = OneVsRestClassifier(svc) multi_target_svc = MultiOutputClassifier(multi_class_svc)
CONTEXT_EXTRA_FIELDS = 'context_extra_fields'
f = lambda *args: 0 assert_raises(ValueError, make_scorer, f, needs_threshold=True, needs_proba=True)
super(AutoAuthDisabledTestCase, self).setUp() self.url = '/auto_auth' self.client = Client()
self.assertQuerysetEqual( Article.objects.complex_filter({'pk': self.a1}), [ 'Hello' ], attrgetter("headline"), )
import salt.ext.six as six
from __future__ import absolute_import import os import json import logging import base64 import pprint import inspect import yaml import datetime from Crypto.Hash import SHA256 from Crypto.PublicKey import RSA from Crypto.Signature import PKCS1_v1_5
self.colspecs = kwds.pop('colspecs')
try: atomic_replace(temp_filename,local_dst) except Exception as e: raise IOError("[ac] %s %s --> %s" % (str(e),temp_filename,local_dst))
forms.MultiWidget.__init__(self, widgets, attrs)
import matplotlib.pyplot as plt import matplotlib.gridspec as gridspec
import msgpack
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010 13:30:00")
self.user.profile.country = restricted_country.country self.user.profile.save()
fragment = Fragment( self.system.render_template(self.mako_template, self.get_context()) ) shim_xmodule_js(self, fragment) return fragment
buf = (c_ubyte * sz)() capi.to_wkb(self.ptr, byteorder, byref(buf)) return six.memoryview(string_at(buf, sz))
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
precor = [None] * len(self.activations) for idx, val in evens_copy + odds_copy: assert precor[idx] is None precor[idx] = val assert None not in precor
if not position: position = get_rule_handle(table, chain, rule, family)
if strategy == "mean": if missing_values != 0: n_non_missing = n_zeros_axis
result1 = df.groupby('a').apply(f1) result2 = df2.groupby('a').apply(f1) assert_frame_equal(result1, result2)
payment_data = checkout_with_ecommerce_service( request.user, course_id, current_mode, request.POST.get('processor') )
user_answer = json.loads(user_answer)
self.INVALID_TOKEN = ("\n\nIt appears the LOGENTRIES_TOKEN " "parameter you entered is incorrect!\n\n") self.LINE_SEP = _to_unicode(r'\u2028')
if course_id in course_summaries: log.warning( u"Modulestore %s have duplicate courses %s; skipping from result.", store, course_id ) else: course_summaries[course_id] = course_summary
self.stored_app_configs = []
tolerance_xml = xml.xpath( '//*[@id=$id]//responseparam[@type="tolerance"]/@default', id=xml.get('id') )
world.css_click(".mce-i-none")
run_code(code_piece, code_path, ns)
lim = max(abs(abs(np.diag(fast_dot(W1, W.T))) - 1)) W = W1 if lim < tol: break
self.assertEqual(iri_to_uri(iri_to_uri(iri)), uri)
security_attributes = win32security.SECURITY_ATTRIBUTES() security_attributes.bInheritHandle = 1
df = DataFrame(index=lrange(10), columns=['a', 'b'], dtype=object) self.assertEqual(df.values.dtype, np.object_)
try: instance.handle_ajax(dispatch, data) instance.save() except: log.exception("error processing ajax call") raise
import salt.utils
@python_2_unicode_compatible class TagCollection(Tag): tags = models.ManyToManyField(Tag, related_name='tag_collections')
data = 'a,b,c\n4,5,6\nskipme' result = self.read_csv(StringIO(data), skiprows=[2]) tm.assert_frame_equal(result, expected)
from __future__ import absolute_import import sys
norm_expected = expecteds.copy() for k in norm_expected: norm_expected[k] = Timestamp(norm_expected[k].date())
self.certificates_section.wait_for_certificate_invalidations_section()
if isinstance(file_h, six.string_types): with open(file_h, 'rb') as file_h: buf = file_h.read() else: buf = file_h.read()
import salt.payload from salt.utils.odict import OrderedDict import salt.exceptions
break
ci = self.create_index(categories=list('abc'))
try: super(URLValidator, self).__call__(value) except ValidationError as e: if value: scheme, netloc, path, query, fragment = urlsplit(value) try:
for i in range(X.shape[0]): assert_almost_equal(np.linalg.norm(X[0].data, 1), 1.0)
from __future__ import unicode_literals
if is_categorical_dtype(values):
clf3 = self.factory(alpha=0.01, eta0=0.01, n_iter=5, shuffle=False, warm_start=True, learning_rate=lr) clf3.fit(X, Y)
if (('python2.7/site-packages/gunicorn/workers/sync.py' in exc_str) and ('[Errno 11] Resource temporarily unavailable' in exc_str)): exc_str = ''
if not settings.FEATURES.get('CUSTOM_COURSES_EDX'): filtered_list.append('enable_ccx') filtered_list.append('ccx_connector')
response = self.client.post(reverse('admin:course_modes_coursemode_add'), data=data) self.assertRedirects(response, reverse('admin:course_modes_coursemode_changelist'))
hashed_pwd = gen_hash('salt', password, 'sha512')
import logging
vmconfig = _parse_vmconfig(vmconfig, vmconfig_type['instance']) log.debug('smartos.vm_present::{0}::vmconfig - {1}'.format(name, vmconfig))
@property def wkt(self): "Returns the WKT representation of this Spatial Reference." return capi.to_wkt(self.ptr, byref(c_char_p()))
import salt.utils
self.assertContains(response, "\n1 recommendation\n")
rows = [] rows.append([datetime(2010, 1, 1), 1])
request.COOKIES[settings.SESSION_COOKIE_NAME] = 'abc'
for freq in ['Y', 'M', 'foobar']: self.assertRaises(ValueError, lambda: dti.round(freq))
from salt.exceptions import CommandExecutionError
X = faces.data[:5000] n_samples, h, w = faces.images.shape n_features = X.shape[1]
X_dense = theano.sparse.dense_from_sparse(X) noise = self.random_stream.binomial(size=X_dense.shape, n=1, prob=self.one_ratio, ndim=None)
self.assertEqual( chan.getElementsByTagName('atom:link')[0].getAttribute('href'), 'http://example.com/syndication/rss2/' )
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch, MagicMock from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.assertContains( response, '<tr><td colspan="4"><ul class="errorlist nonfield">' '<li>The two titles must be the same</li></ul></td></tr>' )
for periodic_cb in six.itervalues(self.periodic_callbacks): periodic_cb.start()
with self.assertRaisesRegexp(CommandError, unicode(GitExportError.URL_BAD)): call_command('git_export', 'foo/bar/baz', 'silly', stderr=StringIO.StringIO())
try: module = getattr(self, '_xmodule', None) if not module: module = self except UndefinedContext: module = self
return False
col_formatter = _maybe_wrap_formatter(col_formatter) col_num = self.data.columns.get_indexer_for([col])[0]
return self._join_compat(other, on=on, how=how, lsuffix=lsuffix, rsuffix=rsuffix, sort=sort)
add_user_with_status_unrequested(self.admin) self.assertIsNone(get_course_creator_status(self.admin))
y = f(X).ravel()
post_params = sign(self.CLIENT_POST_PARAMS)
#self.assertIn("3 matching components", library_block.author_content)
return 0
with self.assertRaises(LookupError): LayerMapping(City, city_shp, city_mapping, encoding='foobar')
return len(tsql_query(query="SELECT name FROM sys.syslogins WHERE name='{0}'".format(login), **kwargs)) == 1
definition_guid = course_key.as_object_id(definition_guid) return self.db_connection.get_definition(definition_guid, course_key)
result = f.clean('12-21-2010 13:30') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
#html_use_opensearch = ''
select_option_by_text(language_selector, 'English') self.account_settings.wait_for_ajax() self.assertEqual(self.account_settings.value_for_dropdown_field('pref-lang'), u'English')
for item in ret: self.assertSaltTrueReturn(item)
indexer, new_index = self.index.get_loc_level(key) return self._constructor(self._values[indexer], index=new_index).__finalize__(self)
r = 0.1 real_cov = toeplitz(r ** np.arange(n_features)) coloring_matrix = cholesky(real_cov)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
elif isinstance(key, BaseGrouper): return key, [], obj
self.assertEqual(book.authors.count(), 2)
s = self.ymd['A'] s_unstacked = s.unstack(['year', 'month']) assert_frame_equal(s_unstacked, expected['A'])
self.login(self.email, self.pw)
return
diff_threshold = int(getattr(options, 'percentage', -1)) percentage_string = u'' if diff_threshold > -1: percentage_string = u'--fail-under={0}'.format(diff_threshold)
from __future__ import absolute_import import time
return
response = api.add_enrollment(username, unicode(course_id), mode=mode, is_active=is_active)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch ensure_in_syspath('../../')
self.X_topo_space = view_converter.topo_space
#pylint: disable=E0602
import logging
_locals[key](*validation_arg)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
from __future__ import absolute_import
casted = pd.Series(other, index=self.columns)
df['foo', 'four'] = 'foo' df = df.sortlevel(0, axis=1)
self._socket.setsockopt(zmq.IPV4ONLY, 0)
copy = (isinstance(new_values, np.ndarray) and new_values.base is None) result = self._constructor_sliced(new_values, index=self.columns, name=self.index[i], dtype=new_values.dtype)
from __future__ import unicode_literals
resp = self.client.post(reverse('shoppingcart.views.remove_item', args=[]), {'id': reg_item.id})
elif existing['code'] == 404: ret['comment'] = 'A Monitor with this name was not found.' else: ret = _load_result(existing, ret)
if name == 'ROOT': return settings.MKTG_URLS.get('ROOT') return settings.MKTG_URLS.get('ROOT') + settings.MKTG_URLS.get(name)
continue
return False
if isinstance(self.path, compat.string_types):
self.distribution.running_salt_install = True self.distribution.salt_version_hardcoded_path = os.path.join( self.build_lib, 'salt', '_version.py' ) if IS_WINDOWS_PLATFORM:
if existing['code'] == 200:
instructor = self.make_instructor() self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
from __future__ import absolute_import
self.params['map_options'] = self.map_options()
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.assertNotIn(self.module_key + '3', self.loader) self.assertNotIn(self.module_key + '4', self.loader)
self.config.pop(cli_log_file_fmt)
self.assertTrue(self.run_function('softwareupdate.reset_catalog')) self.assertEqual(self.run_function('softwareupdate.get_catalog'), 'Default')
for i in range(X.shape[0]): assert_almost_equal(np.linalg.norm(X[0].data, 2), 1.0)
acond = anorm * sqrt(ddnorm) res1 = phibar**2 res2 = res2 + psi**2 rnorm = sqrt(res1 + res2) arnorm = alfa * abs(tau)
f = function([X, y], [gradients[W].sum(), clipped_gradients[W].sum()], allow_input_downcast=True)
df = pd.DataFrame(vals, columns=cols) a, b = pd.concat([df, df]), df.drop_duplicates(subset=cols[:-1])
return levheader + "[" + levstring.replace(" < ... < ", " ... ") + "]"
log = logging.getLogger(__name__)
from __future__ import absolute_import
class1_1 = [pr[0, 0] for pr in probas] class2_1 = [pr[0, 1] for pr in probas]
from __future__ import absolute_import import os
from __future__ import print_function from __future__ import absolute_import
if format == 'table': pt += u('_table')
dispatch[type(len)] = save_global dispatch[type(object)] = save_global dispatch[type(Pickler)] = save_global dispatch[type(pickle.dump)] = save_global
from __future__ import absolute_import import logging import time
self.course.tabs = self.all_valid_tab_list
from salt.modules import firewalld
try: parser = TextParser(data, header=header, index_col=index_col, has_index_names=has_index_names, na_values=na_values, thousands=thousands, parse_dates=parse_dates, date_parser=date_parser, skiprows=skiprows, skip_footer=skip_footer, squeeze=squeeze, **kwds)
rects = [x for x in ax.get_children() if isinstance(x, Rectangle)] self.assertAlmostEqual(rects[-1].get_height(), 1.0) tm.close()
TIME_ZONE = 'America/Chicago'
if ndim != 0: ndim += 1
explained_variance_ = (S ** 2) / n_samples total_var = explained_variance_.sum() explained_variance_ratio_ = explained_variance_ / total_var
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.login_page.visit() self.assertScreenshot('#login .login-providers', 'login-providers-{}'.format(self.browser.name))
with wrap_ugettext_with_xyz(french_translation): self.assertEqual(i18n_service.ugettext(self.test_language), 'XYZ dummy language')
from salt.modules import status from salt.exceptions import CommandExecutionError
from salt.modules import logadm
self.assertEqual(url, f.clean(url))
s = Series(np.random.randn(5)) expected = s - s.index.to_series() result = s - s.index assert_series_equal(result, expected)
'tcp_pub_port': int,
from django.db.models.query import QuerySet if isinstance(rhs, QuerySet): raise NotImplementedError("Bilateral transformations on nested querysets are not supported.")
self.client.login(username=self.coach.username, password="test")
GitBase.__init__(self, opts, valid_providers=('gitpython', 'pygit2'))
gender_label = _(u"Gender")
import salt.utils
from __future__ import absolute_import import salt.runner
Site.objects.all().delete() management.call_command('loaddata', 'fixture1.json', verbosity=0)
reloc_spec = vim.vm.RelocateSpec()
answer_id = "1_2_1_choiceinput_{index}_numtolerance_input_{ind}".format( index=index, ind=ind ) answer_dict[answer_id] = answer
y = 0.5 * X.ravel()
if len(axes) != self.ndim - 1: raise ValueError( "currently only support ndim-1 indexers in an AppendableTable")
print('Failed to save %s to .npy file:\n%s' % ( type(obj), traceback.format_exc()))
ind = res.argsort() res = res.take(ind) lidx = lidx.take(ind) ridx = ridx.take(ind)
apps = Apps() verbose_name = 'úñí©óðé µóðéø' verbose_name_plural = 'úñí©óðé µóðéøß'
output = self._run_command(self.TEST_ORG) self._assert_output( output, (self.user, self.courses[0].id, True), expect_pref_datetime=False )
if code in self.expected: return if self.print_filename and not self.file_errors: print(self.filename) self.file_errors += 1 self.total_errors += 1 return code
assert x.ndim == 4 x_axes = self.input_axes assert len(x_axes) == 4
import json import logging
import salt.utils import salt.utils.mac_utils from salt.exceptions import CommandExecutionError, SaltInvocationError
zfs.__salt__ = {}
module = CapaFactory.create(attempts=1)
from __future__ import absolute_import import logging import gc import datetime
with self.assertRaises(OSError): self.storage.save('error/test.file', ContentFile('not saved'))
return
required_boto3_version = '1.2.1'
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
def f(): result[8] = 0. self.assertRaises(com.SettingWithCopyError, f) self.assertTrue((df[8] == 0).all())
epub_theme = 'djangodocs-epub'
places = list(Place.objects.all()) self.assertEqual(places, [place1, place2])
assert_almost_equal(copy.labels, original.labels) self.assertIsNot(copy.labels, original.labels)
{date:%A, %d %B %Y @ %H:%m:%S UTC}.
return Int64Index([])._values
response = self.client.get(self.dashboard_url) self.assertContains(response, attempt.expiration_datetime.strftime("%m/%d/%Y"))
'state_output': str,
from salt.exceptions import SaltInvocationError
SECRET_KEY = 'dev key'
_schema = self._update_schema_to_aws_notation(schema) _schema.update({'$schema': _Swagger.JSON_SCHEMA_DRAFT_4, 'title': '{0} Schema'.format(model)})
FEATURES['ENABLE_CSMH_EXTENDED'] = True INSTALLED_APPS += ('coursewarehistoryextended',)
db_query = models.StudentModule.objects.filter( course_id__exact=course_id, module_type__exact="sequential", ).values('module_state_key').annotate(count_sequential=Count('module_state_key'))
log.warning('Authentication failure of type "eauth" occurred.') return ''
df = SparseDataFrame({'A': [nan, 0, 1]})
Site.objects.clear_cache()
panel = tm.makePanel()
with tm.assertRaises(Exception): func(idx)
for c in range(1, n_clusters): rand_vals = random_state.random_sample(n_local_trials) * current_pot candidate_ids = np.searchsorted(closest_dist_sq.cumsum(), rand_vals)
iris = datasets.load_iris() rng = check_random_state(0) perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
s = Series(pd.date_range('20130101', periods=100000, freq='H')) s[0] += pd.Timedelta('1s 1ms')
with self.assertNumQueries(0): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
pass
import salt.config import salt.wheel import salt.auth
track_function = _get_track_function_for_task(student_module.student, xmodule_instance_args) track_function('problem_delete_state', {}) return UPDATE_STATUS_SUCCEEDED
MAX_MESSAGE_LENGTH = 1000
users_state = self._get_users_state()
if save_definition: task_definition.RegistrationInfo.Author = 'Salt Minion' task_definition.RegistrationInfo.Source = "Salt Minion Daemon"
log = logging.getLogger(__name__)
for k, v in sorted(results.items()): data[k] = v
self.assertIn( "<script type=\"text/javascript\">function(){}</script>", etree.tostring(rendered_html) )
PARTNER_SUPPORT_EMAIL = ''
P3P_HEADER = 'CP="Open EdX does not have a P3P policy."'
loaded_mods = list(set(loaded_mods) & set(persist_mods))
self.assertEqual(len(h_data['course_modes']), 1) self.assertEqual(h_data['course_modes'][0]['slug'], CourseMode.HONOR)
response = self.client.get(collector_url) self.assertContains(response, 'name="widget_set-0-id"')
page_num = ((offset / MAX_STUDENTS_PER_PAGE_GRADE_BOOK) + 1)
r_time = 0
required_boto3_version = '1.2.1'
for i in range(len(group) - 1): connections.append((group[i], group[i + 1]))
from salt.modules import portage_config
monitor = lm.LiveMonitor() monitor.update_channels(['train_objective'], start=0, end=2) assert(len(monitor.channels['train_objective'].val_record) == 2)
assert_greater(1, 0) _assert_greater(1, 0) assert_raises(AssertionError, assert_greater, 0, 1) assert_raises(AssertionError, _assert_greater, 0, 1)
n_iter = 4 n_iter_specified = False
#html_last_updated_fmt = '%b %d, %Y'
f_init = compile_f_init() f_step = compile_f_step() self._compiled_cache = (state, indices, f_init, f_step) return self._compiled_cache[2:]
convnet_available.compiled = False convnet_available.compile_error = False
return self.q(css="#is_prereq:checked").present
import os import copy import json import logging
return None
l = [1, 2, 3]
author = super(PoetForm, self).save(commit=False) author.name = "Vladimir Mayakovsky" if commit: author.save() return author
X_0 = X[y == 0, :] y_0 = y[y == 0]
self.assertEqual(w1.choices, [1, 2, 3])
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
os.makedirs(fn_, **mode)
results[guid]['NeedsReboot'] = str(update.RebootRequired)
self.assertRaises(ValueError, df.iloc.__getitem__, tuple(['j', 'D']))
f = lambda x: x.decode(encoding, errors)
log.error('Volume {0} must be stopped before deletion'.format(target)) return False
if os.path.isfile(this_minion_key): os.unlink(this_minion_key)
epoch_num = 6 termination_criterion = EpochCounter(epoch_num)
if existing['code'] == 200:
from __future__ import absolute_import
re.compile(r'^Advanced Settings \|'): [ "jquery", "js/base", "js/models/course", "js/models/settings/advanced", "js/views/settings/advanced", "codemirror"],
if not container_ref: container_ref = service_instance.content.rootFolder
X = iris.data
options.modules = [os.path.normpath(labels) for labels in options.modules]
result = func(p1, p2) self.assert_numpy_array_equal(result.values, func(p1.values, p2.values))
self._convert_to_draft(xblock.location, user_id, ignore_if_draft=True)
from salt.cloud.clouds import vmware from salt.exceptions import SaltCloudSystemExit
from salt.ext.six import string_types from salt.exceptions import get_error_message as _get_error_message
def __discover_version(saltstack_version): import os import subprocess
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.guitar_book])
expected = self.read_csv(self.csv15) expected['date_td'] = expected['date_td'].apply(datetime.strptime, args=('%Y-%m-%d',))
__virtualname__ = 'zabbix'
from __future__ import absolute_import import logging
log.error("etcd: Could not connect") raise etcd.EtcdConnectionFailed("Could not connect to etcd server")
der = asn1.DerSequence() der.decode(cert_asn1)
from __future__ import absolute_import
if not assume_unique: ar1, rev_idx = np.unique(ar1, return_inverse=True) ar2 = np.unique(ar2)
call_command('force_publish', unicode(self.course.id), '--commit')
log = logging.getLogger(__name__)
#_connarg('connection_useSSL', 'useSSL')
self.parents = []
self.mock_programs_api() self.mock_credentials_api(self.user, reset_url=False) actual = get_programs_credentials(self.user, category='dummy_category') expected = self.expected_credentials_display_data()
if world.is_css_present('div#login_error'): assert_false(world.css_visible('div#login_error'))
self.assertEqual(reindexed_bool.dtype, np.object_)
certificates = course.certificates.get('certificates', []) if only_active: certificates = [certificate for certificate in certificates if certificate.get('is_active', False)] return certificates
count = 100 if not isinstance(trim_output, bool): count = trim_output
site_header = ugettext_lazy('Django administration')
result.index = result.index._to_safe_for_reshape() result = result.append(margin_dummy)
self.assertEqual(len(calls), 1) self.assertIn('corrupted', calls[0])
bins = lib.generate_bins_dt64( ax_values, bin_edges, self.closed, hasnans=ax.hasnans)
is_deleted = np.zeros(self.nblocks, dtype=np.bool_) is_deleted[removed_blknos] = True
if self.status == "approved": return
logout_url = reverse('logout') response = self.client.post(logout_url)
from __future__ import absolute_import import os
def f(): s[slice(-10.0, 10.0)]
from salt.modules import gnomedesktop
from openpyxl.cell import get_column_letter
class SomeChildModelForm(forms.ModelForm):
if isinstance(ret, collections.Iterator): for i in ret: yield i else: yield ret
pass
TEST_DIR = path(__file__).dirname() PLATFORM_ROOT = TEST_DIR.parent.parent.parent.parent.parent.parent TEST_DATA_ROOT = PLATFORM_ROOT / TEST_DATA_DIR COURSE_DATA_DIR = TEST_DATA_ROOT / COURSE_NAME
return { 'success': True, 'contents': prefix + hint_text, 'hint_index': hint_index }
component.display_name = 'Changed' self.store.update_item(component, edit_user) updated_component = self.store.get_item(component.location)
result = self.read_csv(StringIO(data), names=['a', 'b'], header=None, usecols=[0, 1])
import warnings
precs_full = np.array([np.diag(1. / np.sqrt(x)) for x in covars_diag])
self.assertNotContains(response, "How it Works") self.assertNotContains(response, "Find courses") self.assertNotContains(response, "Schools & Partners")
mask = np.ones((size, size), dtype=np.int16) A = grid_to_graph(n_x=size, n_y=size, n_z=size, mask=mask) assert_true(connected_components(A)[0] == 1)
mock_sh = patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh = mock_sh.start()
self.assertQuerysetEqual( self.a.friends.all(), [] )
management.call_command('loaddata', 'fixture1', verbosity=0)
ScopeIds(None, node.tag, def_id, usage_id), field_data,
def check(nlevels, with_nulls): labels = np.tile(np.arange(500), 2) level = np.arange(500)
with self.assertRaises(UnsupportedRevisionError): self.store.get_items( self.course_locations[self.MONGO_COURSEID].course_key, revision=ModuleStoreEnum.RevisionOption.draft_preferred )
load(filename, mmap_mode=self._mmap_mode).max()
self.write_data(chunksize, dropna=dropna)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from __future__ import absolute_import
from pandas.tseries.index import DatetimeIndex return DatetimeIndex(subarr, copy=copy, name=name, **kwargs)
import salt.utils
def makeStringIndex(k=10, name=None): return Index(rands_array(nchars=10, size=k), name=name)
assert_raises(ValueError, pairwise_distances, X, Y, metric="blah")
RANDOM_SEED = np.random.randint(2 ** 10)
usage_id = LocationKeyField(max_length=255, db_index=True)
from __future__ import absolute_import import os import logging import socket import pprint
with tm.assertRaises(ValueError): df.sample(n=1, axis=2)
conv_first_part = ConvElemwise(8, [2, 2], 'sf1', SigmoidConvNonlinearity(), .1) mlp_first_part = MLP(layers=[conv_first_part], input_space=Conv2DSpace(shape=[5, 5], num_channels=2))
self.assertEqual(a.other, 1) self.assertTrue(callable(a.other_value))
log.warning("Could not send email notification for refund.", exc_info=True)
if not isinstance(srs, SpatialReference): srs = SpatialReference(srs)
'ENABLE_COURSEWARE_INDEX': False,
shape = values.shape
'PREVENT_CONCURRENT_LOGINS': True,
tree = etree.Element('span')
try: return self._aggregate_item_by_item(name, *args, **kwargs) except (AttributeError): raise ValueError
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
top_level_logger.setLevel(logging.NOTSET)
return
for line in exec_lines: self.process_input_line(line, store_history=False)
if pkg_ver: if installed_pkg_ver != pkg_ver: pkgs_to_install.append(pkg) else: pkgs_satisfied.append(installed_name_ver)
values = np.column_stack([d_values[item][mask.take(d_indexer[item])] for item in self.items])
CLASS_PRIORITY = ['video', 'problem']
self.obj._check_is_chained_assignment_possible()
result = [] for image in res['stdout'].splitlines(): image = [var for var in image.split(" ") if var] result.append(image[2])
wiki_courses = self.store.get_courses_for_wiki('999') self.assertIn(
if issubclass(self.dtype.type, np.floating): v = float(v) self.values.fill_value = v
courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(courses_list, [])
'backup_mode': str,
self.X1_bool = self.X1.round(0) self.X2_bool = self.X2.round(0)
g.precisions_init = rand_data.precisions[covar_type] g.fit(X) assert_array_equal(rand_data.precisions[covar_type], g.precisions_init)
cls.rank1 = Ranking.objects.create(rank=2, author=cls.a2)
if '.' in ip_str.split(':')[-1]: fill_to = 7 else: fill_to = 8
if is_timedelta64_dtype(values): return lib.Timedelta(0) return 0
d = TreeEstimator(random_state=0, max_depth=max_depth).fit(X, y) s = TreeEstimator(random_state=0, max_depth=max_depth).fit(X_sparse, y)
bookmark_service = BookmarksService(self.other_user) with self.assertNumQueries(1): self.assertFalse(bookmark_service.is_bookmarked(usage_key=self.sequential_1.location))
self.assertEqual(uri_to_iri(uri_to_iri(uri)), iri)
if not os.path.isdir(repo_dir): os.mkdir(repo_dir) self.addCleanup(shutil.rmtree, repo_dir)
INSTALLED_APPS += ('lettuce.django',) LETTUCE_APPS = ('courseware', 'instructor')
wollongong = AustraliaCity.objects.get(name='Wollongong')
from __future__ import absolute_import
assert com._random_state() is np.random
continue
assert_(loaded['a'].yaml_src.find("${TEST_VAR}") != -1) del environ['TEST_VAR']
file_to_upload = 'image.jpg' self.settings_page.upload_image('#upload-banner-image', file_to_upload) self.assertIn(file_to_upload, self.settings_page.get_uploaded_image_path('#banner-image'))
'timestamp': datetime.datetime(2013, 5, 19, 20), 'value': decimal.Decimal('3.14'),
from __future__ import absolute_import
return self.source_expressions[self.geom_param_pos + 1].value
self.options.log_file = self.config.get( self._logfile_config_setting_name_ )
from salttesting import skipIf, TestCase from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.assertFalse(version)
level = ''
if len(stats) < h_len: h_len = len(stats) dev_stats[disk].append(stats)
from salt.states import timezone
module = CapaFactory.create(rerandomize=rerandomize, attempts=0, done=True)
if recursive: cmd = '{0} -r'.format(cmd) if depth: cmd = '{0} -d {1}'.format(cmd, depth)
CourseEnrollmentFactory( course_id=self.course.id, user=self.user, mode="verified" )
vmcfg = {} kwargs = salt.utils.clean_kwargs(**kwargs) for k, v in kwargs.iteritems(): vmcfg[k] = v
self.panel['strings'] = 'foo' result = self.panel.xs('D', axis=2) self.assertIsNotNone(result.is_copy)
'RUN_AS_ANALYTICS_SERVER_ENABLED': False,
self.course_hierarchy = self.get_course_hierarchy() self.blocks = self.build_course(self.course_hierarchy) self.course = self.blocks['course']
plt.xlim(0, 100) plt.legend(loc='best') plt.title('Feature selection scores - Mutual incoherence: %.1f' % mi)
try: cls.connect() except cls.driver.err.OperationalError: raise nose.SkipTest( "{0} - can't connect to MySQL server".format(cls))
access_role(library2_key).add_users(self.non_staff_user)
return True
self.assertRaises(ValueError, lambda: df == (2, 2)) self.assertRaises(ValueError, lambda: df == [2, 2])
for i, key in enumerate(tup): if is_label_like(key) or isinstance(key, tuple): section = self._getitem_axis(key, axis=i)
cache.clear()
def _get_dtypes(self, seek_vartypes):
self.assertEquals(3, self.response.content.count('grade_C'))
from __future__ import absolute_import
def _get_errcheck(self): return self.cfunc.errcheck
w = clf.coef_[0] a = -w[0] / w[1] xx = np.linspace(-5, 5) yy = a * xx - (clf.intercept_[0]) / w[1]
for block_type in ['course', 'html', 'video']: self.assertNotIn(block_type, block_counts_for_course) self.assertNotIn(block_type, block_counts_for_chapter_x)
preprocessor = ZCA(filter_bias=0.0, n_components=3) preprocessed_X = self.get_preprocessed_data(preprocessor)
log_proba = all_log_proba[0]
dynamath = [student_answers.get(k + '_dynamath', None) for k in idset]
mask = isnull(val) if dropna: inc[idx] = 1 inc[mask] = 0 else: inc[mask & np.r_[False, mask[:-1]]] = 0 inc[idx] = 1
self.assertEqual(self.course_info_page.num_updates, 1)
class A(object):
result = self._constructor(self._data.get(key)) if result.columns.is_unique: result = result[key]
repo = repo.split('\\') definition = name.split('.') repo.extend(definition)
return [self._get_axis(a) for a in self._AXIS_ORDERS]
changes[namespace] = { 'new': config, 'old': update_config, }
self.add_license_to_xml(xml)
import salt.utils.dictupdate as dictupdate
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=rng)
pieces["distance"] = int(mo.group(2))
response = self.client.post(reverse('admin:student_courseaccessrole_add'), data=data) self.assertRedirects(response, reverse('admin:student_courseaccessrole_changelist'))
PUBLIC_RSA_KEY = None PRIVATE_RSA_KEY = None
self.assertFalse(mgr2._is_consolidated) self.assertFalse(mgr2._known_consolidated)
clf.sparsify() assert_true(sp.issparse(clf.coef_)) pred = clf.predict(X) assert_array_equal(pred, Y)
self.assertEqual(buffer_e, expected_data) self.assertFalse(term.isalive())
try:
out += 1. continue
response = explicit_default_view(request, '13') self.assertEqual(response.content, b'Hello World 1')
agent_version = 1
index = self.create_series().index[:0] f = DataFrame(index=index)
from __future__ import absolute_import
X, y = make_circles(factor=0.5, random_state=0, noise=0.05)
pass
from salt.exceptions import SaltSystemExit
self._set_microsite_config_from_obj(microsite.site.domain, domain, microsite)
df.fillna(np.nan)
@override_settings(ROOT_URLCONF='auth_tests.urls_admin') class ChangelistTests(AuthViewsTestCase):
df = DataFrame(dict(time=[Timestamp('20130101 9:01'), Timestamp('20130101 9:02')], value=[1.0, 2.0]))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
CourseInstructorRole(self.course_with_invalid_ee.id).add_users(self.instructor) self.client.login(username=self.instructor.username, password='test')
if stdout is None and stderr is None: self.assertFalse(term.isalive())
iris = self._make_iris_table_metadata()
if len(inputfiles) > settings.MAX_FILEUPLOADS_PER_INPUT: msg = 'Submission aborted! Maximum %d files may be submitted at once' % \ settings.MAX_FILEUPLOADS_PER_INPUT return msg
from __future__ import absolute_import
import salt.utils from salt.ext.six.moves import map
run = problem_key.run if not run: problem_key = course_key.make_usage_key_from_deprecated_string(problem_location) if problem_key.course_key != course_key: return []
arr = randn(50) arr[:10] = np.NaN arr[-10:] = np.NaN
for pos, expr in enumerate( self.source_expressions[self.geom_param_pos + 1:], start=self.geom_param_pos + 1): if isinstance(expr, GeomValue): expr.geography = True
return XBlockFixtureDesc( 'problem', self.problem_name, data=self.factory.build_xml(**self.factory_kwargs), metadata={'rerandomize': 'always'} )
import salt.pillar.git_pillar import salt.utils.gitfs from salt.exceptions import SaltRunnerError from salt.ext import six
def canonicalize(block): return (block.dtype.name, block.mgr_locs.as_array.tolist())
HAS_LIBS = False try: import splunklib.client from splunklib.client import AuthenticationError from splunklib.binding import HTTPError HAS_LIBS = True except ImportError: pass
try: self.assertIn(ret_str, instance) except AssertionError: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME)) raise
return dict((_instantiate(k, bindings), _instantiate(v, bindings)) for k, v in six.iteritems(proxy))
self.submit_question_answer('p1', {'2_1': u'Correct'})
import salt.config import salt.loader import salt.utils.boto
self.factory(penalty='foobar', l1_ratio=0.85)
return self._getitem_array(key)
self.assertIsInstance(ret, list)
import salt.utils
from __future__ import print_function from __future__ import absolute_import import os import sys import logging from salt.ext.six.moves import input
self._base_geom = geom from .geometry import GEOSGeometry if not isinstance(geom, GEOSGeometry): raise TypeError self.ptr = capi.geos_prepare(geom.ptr)
self.assertNumContains(sql, 'idx_tbsp', 1)
course_outline_page = CourseOutlinePage( self.browser, new_org, self.course_number, self.course_run ) course_outline_page.visit() course_outline_page.wait_for_page()
from copy import deepcopy import sys import nose from distutils.version import LooseVersion
import yaml import msgpack import salt.ext.six as six if salt.utils.is_windows(): import win32api
k3 = 0.66**2 \ * RationalQuadratic(length_scale=1.2, alpha=0.78) k4 = 0.18**2 * RBF(length_scale=0.134) \
clf = svm.LinearSVC(random_state=0).fit(X, Y)
assert_raises(ValueError, MLPClassifier( algorithm='sgd').partial_fit, X, y, classes=[2])
import salt.utils.http import salt.ext.six as six from salt._compat import ElementTree as ET
Restaurant.objects.bulk_create([ Restaurant() for i in range(0, 501) ])
self.assertEqual(res.dtype, np.dtype('object').type)
contribution_amount = request.session.get( 'donation_for_course', {} ).get(unicode(course_key), '')
for svd in svds: assert_array_less(0.0, svd.explained_variance_ratio_)
from salt.modules import win_groupadd
self.assertEqual(connection.autocommit, autocommit)
with self.connection.temporary_connection() as cursor: cursor.execute('SELECT %s()' % func) return cursor.fetchone()[0]
assert_extra_field_error()
dive.authors.set([mark])
#html_use_modindex = True
if swapped and swapped == to_string: return model._meta.swappable if model._meta.swappable and model._meta.label == to_string: return model._meta.swappable
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.status = "must_retry" attempt.system_error("Error!")
self.assertFalse(hasattr(self.series.iteritems(), 'reverse'))
y = 0.5 * X.ravel()
vm_['instance_id_list'] = [] for instance in data: vm_['instance_id_list'].append(instance['instanceId'])
self.request.backend = social_utils.load_backend(self.request.social_strategy, self.BACKEND, redirect_uri)
a = Timestamp('3/12/2012') b = Timestamp('3/12/2012', tz=utc)
_, _, traceback_obj = sys.exc_info() raise ResponseError(err.message, traceback_obj)
ax = self.obj._get_axis(min(axis, self.ndim - 1)) return ax._convert_slice_indexer(key, kind=self.name)
item = order.orderitem_set.all().select_subclasses()[0] coupon_redemption = CouponRedemption.objects.select_related('coupon').filter(order=order)
import os import subprocess
if self.n >= 0: nb_offset = 1 else: nb_offset = -1 self.next_bday = BusinessDay(n=nb_offset)
if self.float_format is not None and self.formatter is None: if callable(self.float_format): self.formatter = self.float_format self.float_format = None
page.wait_for_element_visibility('.new-component-html', 'HTML component menu is visible')
self._test_dir = tempfile.mkdtemp(prefix='salt-testdaemon-')
try: del self._process_map[pid] except KeyError: pass
if com.is_numeric_v_string_like(arr, x): mask = False else: mask = arr == x
if perimeter: procedure_args.update({'function': backend.perimeter3d}) elif length: procedure_args.update({'function': backend.length3d})
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, mock_open, NO_MOCK, NO_MOCK_REASON )
clean_me = search.findPackages(None, destructive=destructive, package_names=package_names, time_limit=time_limit, exclude=exclude, pkgdir=search.pkgdir)
results = np.array(np.where(state.marked == 1)).T
figure_list = []
self.components_ = self.random_state_.gamma( init_gamma, init_var, (self.n_topics, n_features))
instructor = self.make_instructor() self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
axes = df.plot(subplots=True, color='green') for ax in axes: self._check_colors(ax.get_lines(), linecolors=['green']) tm.close()
def __setstate__(self, state): self._is_child = True Reactor.__init__( self, state['opts'], log_queue=state['log_queue'])
import salt.minion
values = np.array([u'foo', NA, u'fooommm__foo', u'mmm_'], dtype=np.object_) pat = 'mmm[_]+'
if not os.path.isdir(path): os.makedirs(path)
signs = np.sign(X) signs = signs.view(dtype='|S{0}'.format(signs.strides[0])) unique_signs, cluster_index = np.unique(signs, return_inverse=True)
try: expiry = kwargs['expiry'] except KeyError: expiry = self.get('_session_expiry')
if self.paginator.count == 0: return 0 return (self.paginator.per_page * (self.number - 1)) + 1
values = [u('foo'), u('foofoo'), NA, u('foooofooofommmfoo')]
warning_string = 'Found another file'
for key, val in value.items(): value[key] = six.text_type(val) return value
self.assertQuerysetEqual( Article.objects.exclude(publications=self.p2), ['<Article: Django lets you build Web apps easily>'] )
sheet_name = self._get_sheet_name(sheet_name)
raise nose.SkipTest("skipping for now")
import salt.output import salt.utils import salt.loader import salt.template from salt.exceptions import CommandExecutionError, SaltRenderError
__virtualname__ = 'kmod'
result = df.loc[idx['2016-01-01':'2016-02-01', :], :] expected = df tm.assert_frame_equal(result, expected)
from __future__ import unicode_literals
file1 = open(filename) r = HttpResponse(file1) self.assertTrue(file1.closed) r.close()
transfer_students.Command().handle( source_course=original_key, dest_course_list=new_key_one + "," + new_key_two ) self.assertTrue(self.signal_fired)
CONTACT_MAILING_ADDRESS = ''
data = dict((k, v) for k, v in compat.iteritems(data) if k in columns)
try: m = missing.clean_fill_method(method) except: m = None
mark.save(using='default')
NOTICEFUNC = CFUNCTYPE(None, c_char_p, c_char_p)
ret = self.run_run_plus(fun='fileserver.envs', args=['backend="[roots]"']) self.assertIsInstance(ret['fun'], list)
expected = ix[5:11] result = ix[f.index[5]:f.index[10]] assert_frame_equal(expected, result)
from __future__ import unicode_literals
parent_task_id = InstructorTask.objects.get(pk=entry_id).task_id task_id = subtask_status.task_id total_recipients = len(to_list) recipient_num = 0 total_recipients_successful = 0 total_recipients_failed = 0 recipients_info = Counter()
from __future__ import unicode_literals
reparse_data = _get_reparse_data(path)
test_context.push()
return sorted(ret)
self.assertTrue(ax1._shared_y_axes.joined(ax1, ax2)) self.assertTrue(ax2._shared_y_axes.joined(ax1, ax2))
parameters = { 'vect__max_df': (0.5, 0.75, 1.0), #'vect__max_features': (None, 5000, 10000, 50000),
value = value.toPyObject()
students_require_certificates = enrolled_students.filter( generatedcertificate__course_id=course_id, generatedcertificate__status__in=statuses_to_regenerate ) return list(students_require_certificates)
s2 = self.backend(s1.session_key) s2.delete()
if not allow_overwrite and os.access(new_file_name, os.F_OK): raise IOError("Destination file %s exists and allow_overwrite is False" % new_file_name)
wkb_w.outdim = 3
if self.day_deltas == [1, 3]: return 'B'
import logging import warnings
if result['retcode'] == 1: return None ret = result['stdout'].splitlines() if all_: return ret else: try: return ret[-1] except IndexError: return ''
import salt.utils.cloud import salt.config as config from salt.exceptions import ( SaltCloudNotFound, SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
return first_line.split(':')[2][0:10]
self.assertEqual(any_.result(), futures[0])
user_login_failed.send(sender=__name__, credentials=_clean_credentials(credentials))
latex_documents = [ ('contents', 'django.tex', 'Django Documentation', 'Django Software Foundation', 'manual'), ]
max_squared_sum = 4 + 9 + 16 max_squared_sum_ = row_norms(X, squared=True).max() assert_almost_equal(max_squared_sum, max_squared_sum_, decimal=4)
grains['virtual_subtype'] = 'Xen Dom0'
self.client.ajax_post(course_update_url)
self._nzoom = num_zoom
df = DataFrame({'foo': [1, 2], 'bar': [3, 4]}).astype(np.int64)
s = pd.Series( np.random.randn(20), index=pd.date_range('1/1/2000', periods=20, freq='12H'))
self.assertEqual(res.shape, (nrows - 1, ncols + i))
for (x, is_constant, no_nans) in self.data: functions = self.base_functions
agged = grouped.aggregate([np.mean, np.std]) agged = grouped.aggregate({'one': np.mean, 'two': np.std})
if isinstance(value, Morsel): dict.__setitem__(self, key, value) else: super(SimpleCookie, self).__setitem__(key, value)
pass
import salt.utils from salt.modules.cron import ( _needs_change, _cron_matched )
if callable(field): class_name = field.__name__ if field.__name__ != '<lambda>' else '' else: class_name = field
class Post(models.Model): primary_lines = models.ManyToManyField(Line, related_name='+') secondary_lines = models.ManyToManyField(Line, related_name='+')
if user != current_user: msg += ' Try running as user {0}.'.format(user) else: msg += ' Please give {0} read permissions.'.format(user)
handler.release() return instance
max_scores_cache.fetch_from_remote(field_data_cache.scorable_locations)
request_finished.disconnect(close_old_connections)
tstart = datetime.now() clf = DecisionTreeRegressor() clf.fit(X, Y).predict(X) delta = (datetime.now() - tstart)
result = SoftwareSecurePhotoVerification.get_initial_verification(user=user) self.assertIs(result, None)
return "%s(%s)" % (self.__class__, self)
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
with self.assertRaises(Http404): get_list_or_404(a1.article_set, title__icontains="Shrubbery")
yield self.auth.authenticate()
if profiles_config is None: profiles_config = vm_profiles_config(profiles_config_path, providers_config) opts['profiles'] = profiles_config
from __future__ import absolute_import import json
"original_usage_version": None, "descendants": [],
_, created = ed.books.get_or_create(name='The Great Book of Ed', publisher_id=p.id) self.assertTrue(created)
order_by.append(( OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending), True)) continue
unfiltered = self.panel.to_frame(filter_observations=False) assert_panel_equal(unfiltered.to_panel(), self.panel)
url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'),
if not os.path.isdir(os.path.join(local_path, 'h5')): os.makedirs(os.path.join(local_path, 'h5'))
context['disable_student_access'] = True
self.assertTrue(t == (tstart.tz_convert('UTC') + offset ).tz_convert('US/Pacific'))
second_checkpoint.photo_verification.remove(attempt) self.assertEqual(second_checkpoint.photo_verification.count(), 0)
result = DataFrame.from_records(tuples) tm.assert_index_equal(result.columns, pd.Index(lrange(8)))
self.lc_block.source_library_id = "library-v1:BAD+WOLF" result = self.lc_block.validate()
html_parent = self.store.get_parent_location(html.location) self.assertEquals(unicode(html_parent), unicode(vertical1.location))
lresult = last.value + (offset.nanos - loffset)
if mode == 'connectivity': A_data = np.ones(n_samples1 * n_neighbors) A_ind = self.kneighbors(X, n_neighbors, return_distance=False)
_list = self.run_function('beacons.list', return_yaml=False) self.assertFalse(_list['ps']['enabled'])
self.assertEquals(293, self.response.content.count('grade_None'))
for _ in range(3): uninstalled = False frozen = sh("pip freeze", capture=True)
model_def = ogrinspect(ogr_db, 'Measurement', layer_key=AllOGRFields._meta.db_table, decimal=['f_decimal'])
y_true *= 2 y_pred *= 2 loss = log_loss(y_true, y_pred, normalize=False) assert_almost_equal(loss, 0.6904911 * 6, decimal=6)
search_string = 'UpdateID=\'{0}\''.format(name)
from __future__ import absolute_import
assert_greater(np.min(decision_func[-2:]), np.max(decision_func[:-2])) assert_array_equal(pred, 6 * [1] + 2 * [-1])
import salt.utils import salt.utils.s3
connection.timezone del connection.timezone connection.timezone_name del connection.timezone_name
from scipy import misc face = misc.face(gray=True)
return list(whitelist_countries - blacklist_countries)
for mode_slug in course_modes: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode_slug, mode_display_name=mode_slug, )
self.assertFalse(hasattr(r, 'content'))
days=5 \ CN='My Little CA' \ C=US \ ST=Utah \ L=Salt Lake City \ O=Saltstack \ emailAddress=pleasedontemail@example.com
target_shim_file = '.{0}'.format(binascii.hexlify(os.urandom(6))) self.shell.send(shim_tmp_file.name, target_shim_file)
treedic = {} treedic['1'] = _get_final_tree(s1) treedic['2'] = _get_final_tree(s2)
return 1.0 / (max_squared_sum + int(fit_intercept) + alpha_scaled)
__virtualname__ = 'pgjsonb'
if val_video_urls["youtube"]: youtube_streams = "1.00:{}".format(val_video_urls["youtube"])
from contextlib import contextmanager import sys import time import logging
center_id = random_state.randint(n_samples) if sp.issparse(X): centers[0] = X[center_id].toarray() else: centers[0] = X[center_id]
from __future__ import unicode_literals
Person.objects.create(name='person1', gender=1) Person.objects.create(name='person2', gender=2) changelist_url = reverse('admin:admin_views_person_changelist')
__func_alias__ = { 'set_': 'set' }
if php is not None: cmd = [php] + cmd
if not isinstance(key, slice): return key
valid_block_keys = set([(c.block_type, c.block_id) for c in children]) invalid_block_keys = (selected - valid_block_keys) if invalid_block_keys: selected -= invalid_block_keys
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
if hasattr(self, '_file'): self.close() del self.file
ovr = OneVsRestClassifier(DecisionTreeClassifier()) ovr.fit(iris.data, iris.target) assert_raises(AttributeError, lambda x: ovr.coef_, None)
ret[host_name] = {}
team_membership = team['membership'] del team['membership']
result = df.set_index(['A', 'B']) result_nodrop = df.set_index(['A', 'B'], drop=False)
assert_raises(ValueError, plot_partial_dependence, clf, X, [-1])
self.distribution.salt_installing_pycrypto_windows = True self.run_command('install-pycrypto-windows') self.distribution.salt_installing_pycrypto_windows = None
descriptor.bind_for_student = partial(xblock_class.bind_for_student, descriptor)
compute_full_tree = self.n_clusters < max(100, .02 * n_samples)
if acl_name == '': _search_name = __current_perms[name].get('comment').get(_acl_type) else: _search_name = acl_name
df = pd.DataFrame({0: [1, 2, 3]}) df.style._translate()
reg_code = CourseRegistrationCode.objects.get(code=reg_code.code) self.assertEqual(reg_code.is_valid, True)
import integration import salt.version from salt import config
pillar.fetch_remotes()
ret = self.run_function('group.delete', [DEL_GROUP]) self.assertTrue(ret)
if space.axes != self.axes: batch = _undo_op(batch, 'DimShuffle', strict=True)
self._check_allowed(init_geoms)
argv = self.opts['argv']
result = df1.loc[(slice(None), slice('B2')), :] expected = df1 assert_frame_equal(result, expected)
request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO['username'])
mid = int(np.floor(kernel_shape/ 2.)) centered_X = X - convout[:,:,mid:-mid,mid:-mid]
ds = DataSource(os.path.join(TEST_DATA, 'texas.dbf')) feat = ds[0][0] self.assertEqual(676586997978, feat.get('ALAND10'))
attempt2 = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt2.mark_ready() attempt2.submit() attempt2.approve() attempt2.save()
new_indexer = np.arange(len(self.take(indexer))) new_indexer[~check] = -1
new_communities = get_community_names() failed_communities = dict()
if self.contentstore: self.contentstore.delete_all_course_assets(course_key) super(ModuleStoreWriteBase, self).delete_course(course_key, user_id)
self.win_installer = self.update_session.CreateUpdateInstaller() self.win_installer.Updates = self.install_collection
'tcp_master_pull_port': int,
UserProfileFactory(user=self.user)
from __future__ import absolute_import
for (x, is_constant, no_nans) in self.data: functions = self.base_functions
lines = dropwhile(len, pot_lines)
if not iboost == self.n_estimators - 1: sample_weight *= np.exp(estimator_weight * incorrect * ((sample_weight > 0) | (estimator_weight < 0)))
zip_lib = self.capa_system.get_python_lib_zip() if zip_lib is not None: extra_files.append(("python_lib.zip", zip_lib)) python_path.append("python_lib.zip")
self.client.login(username="inactive", password=self.PASSWORD)
cherrypy.session.release_lock()
new_vals = mi1.set_levels(levels2).values assert_almost_equal(vals2, new_vals) assert_almost_equal(mi1._tuples, vals) assert_almost_equal(mi1.values, vals)
repo['repo'].close() continue
if not args.show_plot: print(n, np.mean(time_per_iteration))
train_score = Perceptron().fit(X, y).score(X, y) assert_less(train_score, 0.8)
self.assertIn('request_uuid', parameters) self.assertEqual(len(parameters['request_uuid']), 32)
self.assertEqual(len(exported_static_files), 1) self.assertTrue(filesystem.exists(expected_displayname)) self.assertEqual(exported_static_files[0], expected_displayname)
self._update_head(usage_locator.course_key, index_entry, usage_locator.branch, new_id) result = usage_locator.course_key.for_version(new_id)
if self._reader: self._reader.close()
log.debug( "SafeCookieData received empty user_id '%s' for session_id '%s'.", user_id, session_id, )
sl = self.frame[:20] self.assertEqual(20, len(sl.index))
for label, clf_err in error_rate.items(): xs, ys = zip(*clf_err) plt.plot(xs, ys, label=label)
self._create_cert(self.courses[0].id, self.user, CertificateStatuses.error) self._create_cert(self.courses[1].id, self.user, other_status)
has_case_insensitive_like = True
class _WKTReader(IOBase): _constructor = wkt_reader_create _destructor = wkt_reader_destroy ptr_type = WKT_READ_PTR
middleware.process_request(request) request.session.flush()
self.assertFalse(course.is_cohorted)
student_complex = complex(student_complex) instructor_complex = complex(instructor_complex)
self.assertTrue(self.run_function('system.set_restart_delay', [90])) self.assertEqual( self.run_function('system.get_restart_delay'), '90 seconds')
FINANCIAL_REPORTS = ENV_TOKENS.get("FINANCIAL_REPORTS", FINANCIAL_REPORTS)
courses_list_by_groups, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(len(courses_list_by_groups), 1)
resp = self.client.get(reverse('dashboard')) self.assertEquals(resp.status_code, 200)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
n_iter_search = 20 random_search = RandomizedSearchCV(clf, param_distributions=param_dist, n_iter=n_iter_search)
params = { 'photo_id_image': self.IMAGE_DATA } response = self._submit_photos(expected_status_code=400, **params) self.assertEqual(response.content, "Missing required parameter face_image")
fcopy = self.frame.copy() fcopy['AA'] = 1
data = dict(self.data.items()) self.cleaned_data['confirmed'] = data['confirmed'] = 'true' self.data = data is_valid = False
if scipy.__version__ < LooseVersion('0.9'): raise nose.SkipTest("skipping corr rank because of scipy version " "{0}".format(scipy.__version__))
clf_base_regressor = \ CalibratedClassifierCV(RandomForestRegressor(), method="sigmoid") assert_raises(RuntimeError, clf_base_regressor.fit, X_train, y_train)
casted = mn.astype('O') _check_cast(casted, 'object')
stream_stdout=None, stream_stderr=None, ):
self._sample_switch = True
message = "Error while calling " + str(type(self)) + ".expr" reraise_as(TypeError(message))
cmd = 'make-bcache --cache /dev/{0} --block {1} --wipe-bcache'.format(dev, block_size)
Created Private Key: "/etc/pki/my_little/certs/www.example.com.key Created CSR for "www.example.com": "/etc/pki/my_little/certs/www.example.com.csr"
df = DataFrame(index=['a', 'b']) assert_frame_equal(df, df.replace(5, 7))
unstacked = self.ymd.unstack(['year', 'month'])
reg = RidgeClassifierCV(class_weight={1: 0.001}, alphas=[.01, .1, 1, 10]) reg.fit(X, y)
age = years_ago - 1 self.assertEqual(self.profile.age, age)
course_locations = self.draft_store.get_courses_for_wiki('toy') assert_equals(len(course_locations), 0)
if other_names is None: other_names = []
yield check_oob_score, name, csc_matrix(boston.data), boston.target, 50
_check_plot_works(df.hist, sharex=True, sharey=True)
__virtualname__ = 'minion'
for item in structure.get_children(): prepare_item_index(item, groups_usage_info=groups_usage_info) searcher.index(cls.DOCUMENT_TYPE, items_index) cls.remove_deleted_items(searcher, structure_key, indexed_items)
panel = Panel(np.random.rand(3, 3, 3)) with assert_produces_warning(): panel.major_xs(1, copy=False)
raise TypeError("PermLookupDict is not iterable.")
self.mock_programs_api()
self.store.delete_course(course_id, self.user.id)
for l in [slice(-10, 10), slice(-10.0, 10.0)]:
self.cohort_management_page.select_always_inline_discussion()
err = Exception mock_index_dictionary.return_value = err
if queue in minion_tracker: minion_tracker[queue]['active'] = False
self.assertEqual(df.resample('D').asfreq().index.freq, 'D')
for train, test in kfold.split(X, y): est.fit(X[train], y[train]) expected_predictions[test] = func(X[test])
self.assertLessEqual(old_time, updated_component.published_on) self.assertEqual(updated_component.published_by, publish_user)
exclude_patterns = ['build', 'links.rst']
labels = list(map(lambda lab: np.repeat(lab[diff], nbin), labels[:-1])) labels.append(left[-1])
assert_almost_equal(reference._stats, result._stats[:, i], check_dtype=False)
import salt.spm import salt.utils.parsers as parsers from salt.utils.verify import verify_log
self.assertFalse(mail.outbox[0].message().is_multipart())
super(CourseKeyField, self).__init__(**kwargs)
import datetime df = DataFrame({'date': [datetime.datetime(2012, 1, 1), datetime.datetime(1012, 1, 2)]}) expected = df.dtypes
if not self._rot_set: self.rot = 30 format_date_labels(ax, rot=self.rot)
test_success = win_mod_reg.delete_key_recursive('HKEY_LOCAL_MACHINE', subkey) self.assertTrue(test_success)
self.assertIsNone(subq._result_cache)
import multiprocessing import os
__virtualname__ = 'zpool'
assert_greater(X.std(axis=0).std(), 43.8)
form_descriptions = _get_form_descriptions(request)
import tornado.ioloop
with ensure_clean_store(self.path) as store:
accepts = request.META.get('HTTP_ACCEPT', '*/*')
return
X, y = X[y < 2], y[y < 2]
thumbnail_content = StaticContent(thumbnail_file_location, thumbnail_name, 'image/jpeg', thumbnail_file)
if dry_run: return
if result['retcode'] != 0 and result['stderr']: raise CommandExecutionError(result['stderr'])
_mbce = MeanBinaryCrossEntropy() reconstruction_cost = lambda a, b: _mbce.cost(a, b) / ds.X.shape[1]
train_sizes_abs = _translate_train_sizes(train_sizes, n_max_training_samples) n_unique_ticks = train_sizes_abs.shape[0] if verbose > 0: print("[learning_curve] Training set sizes: " + str(train_sizes_abs))
e = Episode.objects.get(name='This Week in Django') formset = inline_formset(instance=e) self.assertTrue(formset.get_queryset().ordered)
param.update({key: str(data).lower()})
gid_list = _list_gids() if str(gid) in gid_list: raise CommandExecutionError( 'gid \'{0}\' already exists'.format(gid) )
request = self.factory.get('/child/', data={ALL_VAR: ''})
if not queryset._prefetch_related_lookups: queryset = queryset.iterator() for obj in queryset: yield self.choice(obj)
self.assertTrue('Activate Course Enrollment' in response.content)
if not self.transcript_language == 'en': return response
return {}
'a minute from now', '%(count)s minutes from now', count
for name in keyword_only: default = _empty if kwdefaults is not None: default = kwdefaults.get(name, _empty)
outp = Series(ujson.decode(ujson.encode(s))).sort_values() self.assertTrue((s == outp).values.all())
item = self.panel['ItemA'] self.panel.items = new_items
inviter = models.ForeignKey(Person, models.CASCADE, related_name='invitations_sent') invitee = models.ForeignKey(Person, models.CASCADE, related_name='invitations')
tag_sha = tag_obj.target.hex
from __future__ import absolute_import, print_function import logging
model = self.object.__class__
try: import boto import boto.exception from boto.exception import BotoServerError
raise SaltCloudSystemExit( 'The request_instance action must be called with -a or --action.' )
ret = self.run_run_plus(fun='fileserver.symlink_list', args=['backend="[roots]"']) self.assertIsInstance(ret['fun'], dict)
X = check_array(X) n_eval, _ = X.shape n_samples, n_features = self.X.shape n_samples_y, n_targets = self.y.shape
DECIMAL_SEPARATOR = '.' THOUSAND_SEPARATOR = ','
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch, Mock
import_course_from_xml( self.store, self.user.id, root_dir, ['test_export'], static_content_store=content_store, target_id=course_id, )
s = Series(ser) result = s.value_counts() str(result)
xblock.runtime.wrappers.append(partial( wrap_xblock, 'StudioRuntime', usage_id_serializer=unicode, request_token=request_token(request), ))
template = CourseEmailTemplate.get_template() self.assertIsNotNone(template.html_template) self.assertIsNotNone(template.plain_template)
pass
if existing['code'] == 200:
shifted_gaussian = np.random.randn(n_samples, 2) + np.array([20, 20])
from __future__ import unicode_literals
import logging
from __future__ import absolute_import import multiprocessing import ctypes import logging import os import hashlib import shutil import binascii
with self.assertRaises(AssertionError): self.assertURLEqual( 'http://testserver{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format( change_user_url ), 'http://testserver{}?_changelist_filters=is_staff__exact%3D1%26is_superuser__exact%3D1'.format( change_user_url ) )
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
from salt.modules import linux_sysctl from salt.modules import systemd from salt.exceptions import CommandExecutionError
eobjs = mes.create_user(self.course_key) ees = EmailEnrollmentState(self.course_key, eobjs.email) self.assertEqual(mes, ees)
parent = models.OneToOneField(Place, models.CASCADE, parent_link=True)
source_name = name if os.sep == '/' else name.replace(os.sep, '/') target_name = posixpath.join(posixpath.dirname(source_name), url_path)
from __future__ import absolute_import
ret = {'pid': process_info.dwProcessId}
settings.LOCALE_PATHS = (theme_root / 'conf/locale',) + settings.LOCALE_PATHS
df = DataFrame( np.arange(12).reshape(-1, 1), index=pd.MultiIndex.from_product([[1, 2, 3, 4], [1, 2, 3]]))
self.assertFalse(o is result)
index = world.get_setting_entry_index(DISPLAY_NAME) world.set_field_value(index, '3.4') verify_modified_display_name()
if not isnull(new_values).all(): values = new_values
CourseModeFactory.create(course_id=self.COURSE_KEY, mode_slug=CourseMode.HONOR) data = certs_api.get_certificate_header_context(is_secure=True)
temp_dir = __salt__['temp.dir'](prefix='pkg-')
self.assertEqual(course_date, expected_course_date)
CourseModeFactory.create( course_id=self.course_key, mode_display_name="Verified Expired", mode_slug="verified_expired", expiration_datetime=past )
self._verify_components_visible(['discussion']) self._verify_student_view_visible(['discussion'])
for vert in [vertical, private_vertical, public_vertical]: self.assertIn(vert.location, sequential.children)
new_display_name = "The Trouble with Tribbles" new_weight = 20 problem_block_course.display_name = new_display_name problem_block_course.weight = new_weight self.store.update_item(problem_block_course, self.user_id)
s = df['dt'].copy() s = klass([v for v in s.values] + [pd.NaT])
import os
] DATETIME_INPUT_FORMATS = [
assert element.value.strip() == expected
result = api.get_credit_providers(['fake_provider_id']) self.assertEqual(result, [])
applied = self.empty.apply(np.sqrt) self.assertTrue(applied.empty)
X, y = mnist.data / 255., mnist.target X_train, X_test = X[:60000], X[60000:] y_train, y_test = y[:60000], y[60000:]
from __future__ import absolute_import
byte = response.read(4096) fic.write(byte)
from salt.modules import drac
res = self.index[1] expected = 2 self.assertEqual(res, expected)
return False
if not isinstance(config, dict): return False, ('Configuration for sh beacon must be a dictionary.') return True, 'Valid beacon configuration'
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
class ChildModel1Inline(admin.TabularInline): model = ChildModel1
lm = LayerMapping(City, city_shp, city_mapping) lm.save()
self.addCleanup(self._mock_paver_needs.stop)
import integration from salt.exceptions import CommandExecutionError
pear_group = self.notes_page.tag_groups[group_index] self.assertEqual(tag_name + " (3)", pear_group.title) self.assertTrue(pear_group.scrolled_to_top(group_index))
if self.app_configs: raise RuntimeError("populate() isn't reentrant")
OAUTH_ID_TOKEN_EXPIRATION = 5 * 60
FIRST_DAY_OF_WEEK = 0
with self.assertRaises(forms.ValidationError): f.clean('21/12/2010')
n_samples, n_features = iris.data.shape target = iris.target_names[iris.target] clf = LogisticRegression(random_state=0).fit(iris.data, target)
if date.isdigit(): date = int(date) else: date = float(date)
norm_phi = np.dot(exp_doc_topic_d, exp_topic_word_d) + EPS
self.test_cleanup()
super(SurveyForm, self).save(*args, **kwargs)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, mock_open, patch, NO_MOCK, NO_MOCK_REASON )
arr = np.arange(15, dtype=np.float64) arr[7:12] = nan arr[-1:] = nan
self.check('[50,40]', 35, 25)
import logging import time import salt.ext.six as six
cart.start_purchase()
all_assets = SortedAssetList(iterable=course_assets.get(asset_type, []), key=key_func)
version = self.postgis_lib_version() m = self.version_regex.match(version)
"xmodule_js", "common_static",
self.assertEqual(include(self.url_patterns, 'namespace'), (self.url_patterns, None, 'namespace'))
for attribute in ABOUT_ATTRIBUTES: if attribute in jsondict: cls.update_about_item(descriptor, attribute, jsondict[attribute], user.id)
change_info = self.run_function('group.info', [CHANGE_GROUP]) if change_info: self.run_function('group.delete', [CHANGE_GROUP])
result = f.clean('21-12-2010') self.assertEqual(result, date(2010, 12, 21))
cohort_list[0].users.add(*user_list) assert_events("added", user_list, cohort_list[:1]) mock_tracker.reset_mock()
new_deadline = (self.VERIFICATION_DEADLINE + timedelta(days=1)).replace(microsecond=0) self._set_form_verification_deadline(form, new_deadline) form.save()
result = store.select_column('df', 'index') tm.assert_almost_equal(result.values, Series(df.index).values) self.assertIsInstance(result, Series)
assert not com.is_hashable(np.array([]))
_list = self.run_function('beacons.list', return_yaml=False) self.assertIn('ps', _list)
if not old_method and new_method: setattr(base, old_method_name, wrapper(new_method))
from salttesting import (expectedFailure, skipIf) from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
analytics_patcher = patch('lms.djangoapps.verify_student.views.analytics') self.mock_tracker = analytics_patcher.start() self.addCleanup(analytics_patcher.stop)
params_wrong_amt = params.copy() params_wrong_amt['ccAuthReply_amount'] = '1.00' with self.assertRaises(CCProcessorWrongAmountException): payment_accepted(params_wrong_amt)
arrays.extend(self.iloc[:, k] for k in range(len(self.columns)))
if self._selection is None: slice_axis = self._selected_obj.items else: slice_axis = self._selection_list slicer = lambda x: self._selected_obj[x]
exp_gml = exp_gml.replace('GeometryCollection', 'MultiGeometry')
if not data[pkg_name]: data.pop(pkg_name)
izip = zip(* map(reversed, ( self.grouper.names, self.grouper.get_group_levels(), [grp.in_axis for grp in self.grouper.groupings])))
num_optout = len(optouts) to_list = [recipient for recipient in to_list if recipient['email'] not in optouts] return to_list, num_optout
signal.signal(signal.SIGINT, self.signal_handler)
assert_raises(ValueError, cval.KFold, 5, 1.5) assert_raises(ValueError, cval.StratifiedKFold, y, 1.5)
self.assertIn(orphan, self.store.get_orphans(course.id))
self.assertEqual(formset.is_valid(), False) self.assertEqual(Poet.objects.count(), 1)
import salt.utils
from __future__ import absolute_import import json import logging
end = how == 'E' if end: ordinal = asi8 + mult1 - 1 else: ordinal = asi8
test_data = state_run['cmd_|-test_changing_state_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
jid_dir, jid_file = self._make_tmp_jid_dirs()
if values is None:
return escape(force_text(item))
cat = pd.Categorical([1, 2, 3, np.nan], categories=[1, 2, 3]) self.assertTrue(com.is_integer_dtype(cat.categories))
obj_spec = vmodl.query.PropertyCollector.ObjectSpec( obj=obj_view, skip=True, selectSet=[traversal_spec] )
'rss_proxy',
from nose.plugins.skip import SkipTest from theano import config from theano import function from theano.sandbox import cuda from theano import tensor as T
functions = self.functions self.functions = {} returners = self.returners self.returners = {}
output_emails = [row["email"] for row in output] for email in output_emails: self.assertIn(email, output_emails)
current_umask = os.umask(0o027) verify_files([logfile], self.config['user']) os.umask(current_umask)
CONTENT_GROUP_CONFIGURATION_DESCRIPTION = 'The groups in this configuration can be mapped to cohort groups in the LMS.'
if instructor_task.task_state not in READY_STATES: result = AsyncResult(task_id) _update_instructor_task(instructor_task, result)
import salt.utils.compat import salt.utils from salt.ext.six import string_types
items = self.store.get_items(course_key) self.assertIn(orphan, [item.location for item in items]) self.assertEqual(len(items), 3)
qbuffer.extend([[None, s] for s in args])
perf_test = True
time.sleep(1) return info(name).get('home') == home
raise ItemNotFoundError(course_key)
output = self._run_command(self.TEST_ORG) self._assert_output(output, (self.user, self.courses[0].id, opt_in_pref))
import salt.ext.six as six
if not inplace and first_expr: target = env.target.copy() else: target = env.target
validators = ( traverse_tree, )
all_modes, unexpired_modes = CourseMode.all_and_unexpired_modes_for_courses([course_key])
#])
self.navigate_to_video()
from __future__ import unicode_literals
CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'
d = ts.index[0].to_timestamp() - datetools.bday self.assertTrue(np.isnan(ts.asof(d)))
fields = make_immutable_fields_list("get_fields()", fields)
exc_info_on_loglevel=logging.DEBUG
if 'enabled' not in new_item: new_item['enabled'] = True
assert_allclose(ecov.error_norm(prec_pred[k]), 0, atol=0.1)
if write: self._write = 1 else: self._write = 0 self.encoding = encoding
self.t_ = None
if isinstance(course_descriptor, ErrorDescriptor): return course_descriptor
import logging import re
gkey = lambda x: x._consolidate_key grouper = itertools.groupby(sorted(blocks, key=gkey), gkey)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.assertEqual(requirements[2]["name"], first_block.get_credit_requirement_name()) self.assertEqual(requirements[3]["name"], second_block.get_credit_requirement_name())
try:
predictions = cross_val_predict(clf, X_sparse, multioutput_y) assert_array_equal(predictions.shape, (150, 2))
clf = ensemble.RandomForestClassifier(n_estimators=100, random_state=0)
from __future__ import absolute_import import os import traceback
jdict['__master_id__'] = event['data']['master_id']
for key, val in data.iteritems():
if false_unsets is not True: ret['changes'].update({key: ''})
name = pprint_thing(self.__class__.__name__) if self._is_single_block:
DEFAULT_ASSET_COLLECTION_NAME = 'assetstore'
assert_raise_message(ValueError, error_msg % ("fake", pipe), pipe.set_params, fake__estimator='nope')
import salt.utils.systemd import salt.utils.odict as odict
filtered_response = self.verify_response(params={'org': self.course.org, 'username': self.staff_user.username}) self.assertTrue(
try: lookup_key = _lookup_syslog_config(key) except KeyError: ret['comment'] = '\'{0}\' is not a valid config variable.'.format(key) return ret
module = CapaFactory.create(max_attempts="2", attempts="1") self.assertFalse(module.closed())
args.log_file = os.path.realpath(args.log_file)
self.assertContains(response, "<h2>admin_list</h2>", count=2, html=True)
logadm.__salt__ = {}
frame = DataFrame() ct1 = frame.count(1) tm.assertIsInstance(ct1, Series)
import salt.utils import integration
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
ir = IsotonicRegression() copy.copy(ir)
return launchctl('list', label, return_stdout=True, output_loglevel='trace', runas=runas)
rendered = pieces["short"]
self.refresh_cached_metadata_inheritance_tree(xblock.scope_ids.usage_id.course_key, xblock.runtime)
from __future__ import absolute_import import os import re import logging from subprocess import Popen, PIPE
SECURE_BROWSER_XSS_FILTER = False SECURE_CONTENT_TYPE_NOSNIFF = False SECURE_HSTS_INCLUDE_SUBDOMAINS = False SECURE_HSTS_SECONDS = 0 SECURE_REDIRECT_EXEMPT = [] SECURE_SSL_HOST = None SECURE_SSL_REDIRECT = False
import salt.ext.six as six import salt.utils
call_command('manage_group', TEST_GROUP, '--permissions', 'auth:Group:change_group') self.check_groups([TEST_GROUP]) self.check_permissions(TEST_GROUP, ['change_group'])
iterator = kwds.get('iterator', False) chunksize = kwds.get('chunksize', None) nrows = _validate_nrows(kwds.pop('nrows', None))
if revision == ModuleStoreEnum.RevisionOption.published_only: return get_published()
from __future__ import absolute_import
__zypper__.xml.call('ar', url, repo)
self.assertEqual(response.status_code, 200)
response = self.client.get(self.url, content_type="application/json") self.assertHttpOK(response)
if hasattr(self, 'process_manager'): self.process_manager.stop_restarting() self.process_manager.send_signal_to_processes(signum) self.process_manager.kill_children()
login = self.client.login(username='testclient', password='password') self.assertTrue(login, 'Could not log in')
ret['result'] = None
if 'datetime' in typs or 'datetimetz' in typs or 'timedelta' in typs: return _concat_datetime(to_concat, axis=axis, typs=typs)
if isinstance(path, string_types): ext = os.path.splitext(path)[-1] else: ext = 'xls' if engine == 'xlwt' else 'xlsx'
result = sparse.loc[[1, 3, 4, 5]] exp = orig.loc[[1, 3, 4, 5]].to_sparse() tm.assert_sp_series_equal(result, exp)
return cls( model._meta.app_label, model._meta.object_name, fields, options, bases, managers, )
self.client.logout()
#latex_font_size = '10pt'
for app_config in apps.get_app_configs(): try: import_module('.management', app_config.name) except ImportError: pass
cookies.append(cookie)
time.sleep(self.server.config.get('time_to_response', self.DEFAULT_DELAY_SEC))
key = safe_key('key', 'a' * 300, 'version') self.assertTrue(self._is_valid_key(key))
salt '*' vsphere.get_ntp_config my.esxi.host root bad-password
_join_precedence = 1
def func1(): raise ValueError("[.*x+]y?")
request_uuid = self._create_credit_request_and_get_uuid()
cls._internal_names_set.add(iname)
f = lambda x: x.rename({1: 'foo'}, inplace=True) _check_f(d.copy(), f)
lines.append(line) continue
args = [] self.create_squares_with_executemany(args) self.assertEqual(models.Square.objects.count(), 0)
assert library.location.library_key.version_guid is not None return library.location.library_key.version_guid
if is_integer(r) and r not in [0, 1]: return int(r) r = bool(r)
if __grains__['os_family'] not in ('Debian',): return False
SITE_ID = 1 SITE_NAME = "localhost:8001" HTTPS = 'on' ROOT_URLCONF = 'cms.urls'
if self.course_key is None: self.course_key = CourseKeyField.Empty entries = User.objects.filter( courseaccessrole__role=self._role_name, courseaccessrole__org=self.org, courseaccessrole__course_id=self.course_key ) return entries
_check_types(left, right, obj=obj)
filename_extension = 'xml'
return self._get_ax_layer(ax)
TEST_DATA = None
self._seek_variable_labels = self._get_seek_variable_labels()
for parameter, default in PARAMETERS.iteritems(): PARAMETERS[parameter] = request.GET.get(parameter, default)
xWlist = [W.lmul(x,T).flatten(2) for W in self._Wlist] rval = tensor.join(1, *xWlist)
import salt.utils from salt.returners import local_cache
newLen = len(self) newVals = dict(zip(indexList, valueList))
XA_checked, XB_checked = check_pairwise_arrays(XA, XB.astype(np.float)) assert_equal(XA_checked.dtype, np.float) assert_equal(XB_checked.dtype, np.float)
cluster_centers = _init_centroids( X, self.n_clusters, self.init, random_state=random_state, x_squared_norms=x_squared_norms, init_size=init_size)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
SSL_AUTH_EMAIL_DOMAIN = "MIT.EDU" SSL_AUTH_DN_FORMAT_STRING = "/C=US/ST=Massachusetts/O=Massachusetts Institute of Technology/OU=Client CA v1/CN={0}/emailAddress={1}"
account_settings.switch_account_settings_tabs('accounts-tab')
preprocessor = GlobalContrastNormalization(subtract_mean=True, sqrt_bias=0.0, use_std=True)
self.assertEqual(A.value.__doc__, "Here is the docstring...")
from __future__ import print_function from __future__ import absolute_import import socket
if len(bits) % 2 == 0: prefix = bits[1] else: prefix = None
self.dashboard_page.visit()
self.send_delete(self.client, expected_status=404)
deleted = [] valid = [] for enrollment in enrollments: if enrollment.get("course_details") is not None: valid.append(enrollment) else: deleted.append(enrollment)
res_row = df.loc["j", :] tm.assert_series_equal(res_row, exp_row) tm.assertIsInstance(res_row["cats"], compat.string_types)
path = tm.get_data_path('mindex_073.pickle') obj = pd.read_pickle(path)
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0)
import os import ast import logging
f.DEFAULT_CHUNK_SIZE = 4 self.assertEqual(list(f), [b'one\n', b'two\n', b'three'])
if not isinstance(self.storage, (Storage, LazyObject)): self.storage = self.storage() super(BaseStorageFinder, self).__init__(*args, **kwargs)
results.append((code_piece, images))
clf = DecisionTreeClassifier(max_depth=3, min_samples_split=2, criterion="gini", random_state=2) clf.fit(X, y)
try: choc_path = _find_chocolatey(__context__, __salt__) except CommandExecutionError: choc_path = None if choc_path and not force: return 'Chocolatey found at {0}'.format(choc_path)
if defaults: if option in defaults: log.info('Using default for %s %s', virtualname, option) yield option, defaults[option] continue
size = tuple([X.shape[i] for i in xrange(X.ndim)]) if self.sync_channels: del size[X_space.axes.index('c')]
migration.mutate_state(state, preserve=False)
from __future__ import absolute_import import os import tempfile import logging import shutil
first_name_label = _(u"First Name")
void_output = partial(void_output, cpl=True) const_string_output = partial(const_string_output, cpl=True) double_output = partial(double_output, cpl=True)
import contracts contracts.disable_all()
from __future__ import absolute_import
import logging
if not __opts__['test'] and len(ret['changes']) > 0: ret['result'] = _write_config(config)
class Model(models.Model): field = models.AutoField(primary_key=False)
d = Entry.objects.get(pk=1).published pub_date = rfc2822_date(timezone.make_aware(d, TZ))
import copy import logging import json
fd_, adminfile = salt.utils.mkstemp(prefix="salt-", close_fd=False)
exp = f.copy() exp.values[5] = 4 ix[5][:] = 4 assert_frame_equal(exp, f)
if not all(parent in yield_results for parent in parents): continue
for i in cfg.versionfile_source.split('/'): root = os.path.dirname(root)
import salt.ext.six as six from salt.exceptions import SaltClientError
word_cloud = ItemFactory.create(parent_location=parent.location, category="word_cloud", display_name="untitled") del word_cloud.data self.assertEquals(word_cloud.data, '')
self.assertRaises(ValueError, f, self.series, axis=1)
'transcript': 'http://video.google.com/timedtext?lang=en&v=3_yD_cEKoCk',
import salt.ext.six as six
objects = [] instance_count = {} for (func, pk, klass, datum) in test_data: with connection.constraint_checks_disabled(): objects.extend(func[0](pk, klass, datum))
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
xblock._edit_info = payload['edit_info']
from salt.exceptions import CommandExecutionError import salt.utils
X = iris.data y = np.array(iris.target) est = GradientBoostingClassifier(n_estimators=20, max_depth=1, random_state=1, init=ZeroEstimator()) est.fit(X, y)
_write_file_network(network, _DEB_NETWORKING_FILE, True)
self.client.post( url_course2, data=json.dumps(self.certificate_exception), content_type='application/json' )
return False
response = self.client.get(collector_url) self.assertContains(response, 'name="grommet_set-0-code"')
packed_coef_inter = _pack(self.coefs_, self.intercepts_)
for alg in ['SAMME', 'SAMME.R']: clf = AdaBoostClassifier(algorithm=alg, n_estimators=10) clf.fit(iris.data, iris.target, sample_weight=iris_weights)
if presort == 'auto' and issparse(X): presort = False elif presort == 'auto': presort = True
id = "literal" lbp = 0
result = f.clean('21-12-2010') self.assertEqual(result, date(2010, 12, 21))
if [ -z '$debian_chroot' ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
with self.assertRaises(ValueError): with store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course.id):
try: import dogstats_wrapper as dog_stats_api except ImportError: dog_stats_api = None
try: import psycopg2 except ImportError: raise nose.SkipTest("no psycopg2 installed")
using_firefox = (os.environ.get('SELENIUM_BROWSER', 'firefox') == 'firefox') validate_firefox = getattr(options, 'validate_firefox_version', using_firefox)
self.dim = dim
p, h = prob_max_pool_c01b(z, (pool_rows, pool_cols) ) func = function([z], [p, h], mode = mode_with_gpu)
from __future__ import absolute_import
del apps._pending_operations[('migrations', 'tribble')]
exc_info_on_loglevel=logging.DEBUG
modules_to_update = StudentModule.objects.filter(course_id=course_id, module_state_key__in=usage_keys)
if lookup_type == 'week_day': return "DAYOFWEEK(%s)" % field_name else: return "EXTRACT(%s FROM %s)" % (lookup_type.upper(), field_name)
task_input = {'statuses_to_regenerate': [CertificateStatuses.downloadable, CertificateStatuses.error]}
import salt.utils
self.assertEqual(copy.sortorder, original.sortorder)
correct_map = problem.grade_answers({'1_2_1': 'choice_0'}) self.assertAlmostEqual(correct_map.get_npoints('1_2_1'), 1)
([], '', CourseMode.DEFAULT_MODE_SLUG),
clf = svm.LinearSVC(penalty='l1', loss='squared_hinge', dual=False, random_state=0).fit(X, Y) assert_array_equal(clf.predict(T), true_result)
npm_output = result['stdout'] or result['stderr'] try: return json.loads(npm_output) except ValueError: pass
groupby_frame_nth_none = Benchmark("df.groupby(0).nth(0)", setup, start_date=datetime(2014, 3, 1))
Yt /= np.sqrt((Yt ** 2).sum())
self.assertLess(old_edited_on, updated_component.edited_on) self.assertEqual(updated_component.edited_by, edit_user)
os.remove(layer0_filename) os.remove(layer1_filename)
data = {} if headers and 'Accept' in headers: data['CONTENT_TYPE'] = headers['Accept'] response = self.client.get(url, data)
from __future__ import unicode_literals
mask = str(mask).upper()
os.environ.get('TMPDIR', tempfile.gettempdir()) if salt.utils.is_darwin() else '/tmp'
from __future__ import absolute_import
def ol_bounds(extent): return 'new OpenLayers.Bounds(%s)' % str(extent)
from __future__ import absolute_import import os import yaml import signal import shutil
VerificationDeadline.set_deadline(self.course.id, self.VERIFICATION_DEADLINE)
app.release_serving()
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, with_system_user_and_group )
self.assertEqual( df.set_index(['a', 'b']).to_csv(decimal="^"), expected)
continue
neigh_ind = np.empty(n_samples, dtype='object') neigh_ind[:] = neigh_ind_list
result = df.drop_duplicates(['AAA', 'B']) expected = df.iloc[[0, 1, 2, 3, 4, 6]] tm.assert_frame_equal(result, expected)
cp.__salt__ = {} cp.__opts__ = {} cp.__pillar__ = {} cp.__grains__ = {} cp.__context__ = {}
export_extra_content( export_fs, self.modulestore, self.courselike_key, xml_centric_courselike_key, 'custom_tag_template', 'custom_tags' )
__virtualname__ = 'user'
specimens = models.Manager()
with self.bulk_operations(source_course): source_structure = self._lookup_course(source_course).structure
self._pyplot_imported = False
set_credit_requirements(course.id, requirements)
d = DataFrame({'A': 'foo', 'B': ts}, index=dr) self.assertTrue(d['B'].isnull().all())
break
htown = City.objects.get(name='Houston') with self.assertRaises(ValueError): City.objects.get(point__exact=htown.point)
raise SaltClientError( 'The salt master could not be contacted. Is master running?' )
RESO_US = US_RESO RESO_MS = MS_RESO RESO_SEC = S_RESO RESO_MIN = T_RESO RESO_HR = H_RESO RESO_DAY = D_RESO
lm = LayerMapping(Point2D, vrt_file, point_mapping, transform=False) lm.save() self.assertEqual(3, Point2D.objects.count())
self.key = key
log.debug( 'Gateway {0} on port {1} is reachable.'.format( test_ssh_host, test_ssh_port ) )
hasher = RandomTreesEmbedding(n_estimators=10, random_state=0, max_depth=3) X_transformed = hasher.fit_transform(X)
result = df.quantile(.5) expected = Series([2.5], index=['b'])
for _ in range(20): next_index = random.randrange(len(alphabet)) password += alphabet[next_index]
self.assertQuerysetEqual(author.book_set.order_by('title'), [ '<Book: Les Fleurs du Mal>', '<Book: Les Paradis Artificiels>', ])
import salt.utils.gitfs import salt.utils.dictupdate from salt.exceptions import FileserverConfigError from salt.pillar import Pillar
new_hash = compute_fingerprint(paths) if new_hash != old_hash: install_func()
super(Donation, cls).add_to_order(order, currency=currency)
self.assertNotIn(REG_STR, resp.content)
import salt.minion import salt.utils.verify import salt.utils.jid from salt.utils.event import tagify
if salt.utils.is_windows(): fp_.close() try: os.unlink(fn_) except OSError: pass
pipe2 = clone(pipe) assert_false(pipe.named_steps['svc'] is pipe2.named_steps['svc'])
smaller_major = self.panel4d.major_axis[::5] smaller = self.panel4d.reindex(major=smaller_major)
assert_array_equal(X, Xdigits)
os.umask(0o777)
__dir__ = new_method_proxy(dir)
c_uchar_p = POINTER(c_ubyte)
relations = {}
self.assertEqual(set(self.run_manage(args1)), set(self.run_manage(args2)))
self.obj[item] = s
comment, passed, retries = _search(win_updater, retries) ret['comment'] += comment if not passed: ret['result'] = False return ret
if self.event_queue: self.flush_events() self.stop = True super(EventReturn, self)._handle_signals(signum, sigframe)
values = _ensure_datetimelike_to_i8(self)
wkb_reader_create = GEOSFuncFactory('GEOSWKBReader_create', restype=WKB_READ_PTR) wkb_reader_destroy = GEOSFuncFactory('GEOSWKBReader_destroy', argtypes=[WKB_READ_PTR])
'job_cache': bool,
urls = _get_default_profile_image_urls()
from __future__ import absolute_import import os import logging
ser = Series(['A', 'B'], [1, 2]) ser.sort_values()
self.assertDeserializeEqual(False, 'false') self.assertDeserializeEqual(True, 'true')
import salt.client.ssh.shell import salt.client.ssh import salt.utils import salt.utils.thin import salt.utils.url import salt.roster import salt.state import salt.loader import salt.minion
from __future__ import unicode_literals
estimator.set_params(alpha=.5)
activations = self._forward_pass(activations)
sampler_updates = self.sampler.updates()
inlineformset_factory( Parent, Child, exclude=['school'], fk_name='mother' )
scaler_batch = MaxAbsScaler().fit(X)
df.plot(subplots=True, ax=axes)
self.assertFalse(self.has_notes_tab(self.course, self.user))
import salt.ext.six as six from salt.ext.six.moves import filter from salt.ext.six.moves.urllib.parse import quote as _quote
isBusinessDay = BDay().onOffset isMonthEnd = MonthEnd().onOffset isBMonthEnd = BMonthEnd().onOffset
if 'nobase' not in ks_opts['packages']['options']: sls['base'] = {'pkg_group': ['installed']}
user: MYLOGIN apikey: JVkbSJDGHSDKUKSDJfhsdklfjgsjdkflhjlsdfffhgdgjkenrtuinv driver: softlayer
self.assertEqual(html.count("</script>"), 1)
x = df.iloc[[0, 1, 2]] self.assertIsNotNone(x.is_copy) x = df.iloc[[0, 1, 2, 4]] self.assertIsNotNone(x.is_copy)
from salt.states import win_dism as dism
from __future__ import absolute_import
assert_raises(ValueError, _SigmoidCalibration().fit, np.vstack((exF, exF)), exY)
def f(): c.codes = np.array([0, 1, 2, 0, 1], dtype='int8')
sql_and_param_pair_rows = (zip(*row) for row in rows_of_fields_as_sql)
DEFAULT_GROUPS = []
import salt.config as config import salt.utils.cloud from salt.exceptions import ( SaltCloudConfigError, SaltCloudSystemExit )
source_image = VirtualHardDisk(uri=vm_['image']) img_ref = None if win_installer: os_type = 'Windows' else: os_type = 'Linux'
absent_state = 'cmd_|-listener_test_listening_non_changing_state_|-echo "Only run once"_|-mod_watch' self.assertNotIn(absent_state, state_run)
kwargs[param_name] = arg
profile_str = 'ec2-config' providers = self.run_cloud('--list-providers')
self.assertTrue(router.allow_migrate_model('default', User)) self.assertTrue(router.allow_migrate_model('default', Book))
dt -= timedelta(days=1)
self.assertEqual(id(self.ts.index), id(derived.index))
import salt.utils import salt.modules.nxos
result = get_email_params( self.course, True, course_key=self.course_key, display_name=self.ccx.display_name )
def run_collectstatic(self, **kwargs): pass
return
sql, _ = compiler.compile(value) return placeholder % sql
self._export_import_course_round_trip( self.store, contentstore, source_course_key, self.export_dir )
return self.add_truncation_text(text[:end_index or 0], truncate)
return a
test_file = File.objects.get(pk=test_image.pk) foo_file = FooFile(my_file=test_file) foo_file.save()
shared = str(shared).lower()
X_composite = mlp_composite.get_input_space().make_theano_batch() X_first_part = mlp_first_part.get_input_space().make_theano_batch() X_second_part = mlp_second_part.get_input_space().make_theano_batch()
mixed = Series([' aa ', NA, ' bb \t\n', True, datetime.today(), None, 1, 2.])
if connection.features.allows_auto_pk_0: test_data.extend([ (data_obj, 0, Anchor, "Anchor 0"), (fk_obj, 465, FKData, 0), ])
self.assertEqual(correct_map.get_overall_message(), 'Message text')
lush_magic = { 507333717: 'uint8', 507333716: 'int32', 507333713: 'float32', 507333715: 'float64' }
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
if not labels.is_lexsorted(): labels = MultiIndex.from_tuples(labels.values)
paver.easy.sh("exit 1")
return super(DatabaseOperations, self).last_executed_query(cursor, statement, params)
__virtualname__ = 'service'
stochastic = False
Score = namedtuple("Score", "earned possible graded section module_id")
session = requests.Session() response = session.get(STUDIO_BASE_URL + "/auto_auth?staff=true")
memory = Memory(os.path.join(get_data_home(), 'mnist_benchmark_data'), mmap_mode='r')
if self.ndim == 1: new_mgr_locs = [0] else: if new_mgr_locs is None: new_mgr_locs = self.mgr_locs
self.assertIs(t1.entry_set.__class__, t1.entry_set.__class__) self.assertIs(e1.topics.__class__, e1.topics.__class__)
raise
return wrapper
if values: expected = f.values[i] else: expected = f for a in reversed(i): expected = expected.__getitem__(a)
if refresh: refresh_db()
max_scores_cache.fetch_from_remote([location_to_cache]) self.assertIsNone(max_scores_cache.get(location_to_cache)) self.check_grade_percent(0.33)
return 'Software definition {0} not found'.format(name)
titles = ['SVC with linear kernel', 'LinearSVC (linear kernel)', 'SVC with RBF kernel', 'SVC with polynomial (degree 3) kernel']
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
n_samples = 12 n_features = 2 n_estimators = 5 rng = np.random.RandomState(42) X = rng.rand(n_samples, n_features)
dists_m = [3553.30384972258, 1243.18391525602, 2186.15439472242]
url = reverse('dashboard')
colors = cycle(['navy', 'turquoise', 'darkorange', 'cornflowerblue', 'teal']) lw = 2
project = 'Django' copyright = 'Django Software Foundation and contributors'
try: from netaddr import all_matching_cidrs HAS_NETADDR = True except ImportError: HAS_NETADDR = False
matchin = rgxin.match(line) if matchin: lineno, inputline = int(matchin.group(1)), matchin.group(2)
from __future__ import absolute_import, division import fnmatch
assert_series_equal(ix[:, 'A'], f['A'])
raise cls.MyException()
assert_array_equal(np.log(proba[k]), log_proba[k])
obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')
from django.template.base import ( TemplateSyntaxError, Library, token_kwargs, TemplateDoesNotExist ) from django.template.loader_tags import IncludeNode
args.extend([ 'test' ])
s = Series(np.arange(5))
problem_section = ItemFactory.create(parent_location=chapter.location, category='sequential', metadata={'graded': True, 'format': problem_section_format}, display_name=problem_section_name)
libraries = [LibraryFactory.create() for _ in range(3)] lib_dict = dict([(lib.location.library_key, lib) for lib in libraries])
import salt.returners import salt.utils.jid import salt.exceptions
self.assertEquals(self.draft_store.get_all_asset_metadata(course.id, 'asset'), [])
self.assertEqual(safe_key('test', 'prefix', 5), 'prefix:5:test')
from __future__ import unicode_literals
ofh.write('')
return social_auth.uid[len(self.lti_consumer_key) + 1:]
y_true_inv = ["b" if i == "a" else "a" for i in y_true]
#latex_paper_size = 'letter'
if listen and not self.event.connect_pub(timeout=timeout): raise SaltReqTimeoutError() payload = yield channel.send(payload_kwargs, timeout=timeout)
self.courseware_page.go_to_sequential_position(4) self.assert_navigation_state('Test Section 1', 'Test Subsection 1,1', 3, next_enabled=True, prev_enabled=True)
if old_value is not None: __salt__['file.sed'](makeconf, '^{0}=.*'.format(var), '')
if invoice_transaction.amount > 0: payment_status = 'Invoice Paid' else: payment_status = 'Refunded'
for app_label, migrations in self.migrations.items(): for migration in migrations: migration.operations = MigrationOptimizer().optimize(migration.operations, app_label=app_label)
from salt.exceptions import SaltRenderError import salt.utils.templates
tail['A'][:10] = 0 combined = tail.combine_first(head) self.assertTrue((combined['A'][:10] == 0).all())
self.assert_json_success_response_looks_correct(student_views.login_user(strategy.request))
else: other = self._constructor(other, **self._construct_axes_dict())
is_compressed = False
assert_raises(ValueError, lambda: GradientBoostingClassifier().feature_importances_)
from __future__ import unicode_literals
from __future__ import absolute_import
import salt.utils import salt.syspaths from salt.exceptions import SaltRenderError
r = self.frame.rolling(window=5)[1, 3] tm.assert_index_equal(r._selected_obj.columns, self.frame.columns[[1, 3]])
tm.assertIsInstance(s, Series)
if not hasattr(self, 'freeze_set'): self.freeze_set = set([])
qs = Author.objects.annotate(Count('item')) qs = qs.filter(~Q(extra__value=0))
azimuth_degrees = numpy.arange(0, 341, 20)
y = np.array([[y_i] for y_i in y]) assert min(y) == 0 assert max(y) == 2
if comment_id in self.server.config.get('comments', {}): comment = self.server.config['comments'][comment_id] self.send_json_response(comment)
with self.assertRaisesMessage(FieldError, 'Infinite loop caused by ordering.'):
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
if expected_n_iter is not None: assert_equal(len(cv), expected_n_iter) else: expected_n_iter = len(cv)
result = self.frame.iloc[:, 0] self.assertTrue(isinstance(result, SparseSeries)) tm.assert_sp_series_equal(result, self.frame['A'])
return ( super(ModelOperation, self).reduce(operation, in_between, app_label=app_label) or not operation.references_model(self.new_name, app_label) )
if _get_msupdate_status(): try: obj_sm.RemoveService('7971f918-a847-4430-9279-4a52d1efe18d') ret['msupdate'] = msupdate except Exception as error:
for injected in injected_func_globals: del func_globals[injected]
'a second ago', '%(count)s seconds ago', delta.seconds
result = conv.to_rgba(result)
ret = [] for process in response['Processes']: cur_proc = {} for idx, val in enumerate(process): cur_proc[columns[idx]] = val ret.append(cur_proc) return ret
resp = self.client.get(reverse('shoppingcart.views.show_receipt', args=[self.cart.id])) self.assertEqual(resp.status_code, 200)
default_axes = ('b', 0, 1, 'c')
if isinstance(o, PeriodIndex):
import salt.utils import salt.utils.mac_utils from salt.exceptions import CommandExecutionError
make_thumbnail('images/no_image.png', thumb_file, 200, 140)
for i in range(3):
test_svm.test_dense_liblinear_intercept_handling(svm.LinearSVC)
from __future__ import absolute_import
from __future__ import unicode_literals
if hasattr(errors, 'error_dict'): error_dict = errors.error_dict else: error_dict = {NON_FIELD_ERRORS: errors}
courses, in_process_course_actions = _accessible_courses_summary_list(request)
self.url = xml.get('url') or "http://qisx.mit.edu:8889/pyloncapa"
pca = PCA(n_components=n_digits).fit(data) bench_k_means(KMeans(init=pca.components_, n_clusters=n_digits, n_init=1), name="PCA-based", data=data) print(79 * '_')
time_step = 5 return np.zeros((time_step, batch_size, self.dim), dtype=dtype)
certs_api.set_cert_generation_enabled(self.COURSE_KEY, True) self._assert_enabled_for_course(self.COURSE_KEY, True)
if value: wait_for(lambda _: css_value(css_selector, index=index))
obj_list = done_queries[prefetch_to] continue
if not isinstance(config, dict): return False, ('Configuration for service beacon must be a dictionary.') return True, 'Valid beacon configuration'
o_values = values.astype(object) self.assertTrue(np.allclose(nanops._ensure_numeric(o_values), values), 'Failed for object ndarray')
deploy_d_from_conf_file = os.path.join( os.path.dirname(config['conf_file']), 'cloud.deploy.d' )
dtype_numeric = dtype == "numeric"
km = KMeans(precompute_distances="wrong") assert_raises(ValueError, km.fit, X)
elif response.status_code != 200 or not success: if response.status_code == 200: response.status_code = 400 response.content = msg
if not isinstance(ssh_gateway, str): return None
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
cp = df.copy() cp.ix[3:11] = 0 self.assertTrue((cp.ix[3:11] == 0).values.all())
import integration from salt import client from salt.exceptions import EauthAuthenticationError, SaltInvocationError, SaltClientError
context['last_accessed_courseware_url'] = None if SelfPacedConfiguration.current().enable_course_home_improvements: context['last_accessed_courseware_url'] = get_last_accessed_courseware(course, request, user)
self.redefine_option_problem(problem_url_name) self.render_problem('u1', problem_url_name) self.check_state('u1', descriptor, 2, 2, 1)
password_hash='*EEF6F854748ACF841226BB1C2422BEC70AE7F1FF', new_password_hash=user2_pwd_hash, connection_user=self.user, connection_pass=self.password, connection_charset='utf8', saltenv={"LC_ALL": "en_US.utf8"}
self.store.revert_to_published(vertical.location, self.user_id) self.assertFalse(self._has_changes(vertical.location))
self._pid = os.getpid() self._sigterm_handler = signal.getsignal(signal.SIGTERM) self._restart_processes = True
params = self._signed_callback_params("98272", self.COST, self.COST) result = process_postpay_callback(params)
ctx = self.cf.option_context(option_name, context_value) self.assertEqual(self.cf.get_option(option_name), original_value)
leaf_indices = clf.apply(X) assert_equal(leaf_indices.shape, (len(X), clf.n_estimators))
nat_index = to_datetime( ['NaT'] * 10 + ['2000-01-01', '1/1/2000', '1-1-2000']) nat_frame = DataFrame({'A': nat_index}, index=nat_index)
instance_map = weakref.WeakKeyDictionary()
_update_certificate_context(context, user_certificate, platform_name)
user_groups = {} for partition, groups in partition_groups: user_groups[partition.id] = partition.scheme.get_group_for_user( course_key, user, partition, )
import integration
if batch is None or (isinstance(batch, tuple) and len(batch) == 0): return True
while(True):
host[host.index(o_hostname.split('.')[0])] = hostname.split('.')[0]
courses, failed_export_courses = export_courses_to_output_path(self.temp_dir) self.assertEqual(len(courses), 2) self.assertEqual(len(failed_export_courses), 0)
self.assertIn(html, html_encapsulated)
score_bucket = get_score_bucket(grade, max_grade)
eigvals, eigvec = eigsh(XH_X, k=k, tol=tol ** 2, maxiter=maxiter, ncv=ncv, which=which, v0=v0)
<%block name="requirejs"> {expression} </%block>
if len(tree) == 1: return tree[0][0] if len(tree) == 3: return " <sup>{num}</sup>&frasl;<sub>{den}</sub> ".format(num=tree[0][0], den=tree[2][0]) return "Error"
from django.db import models from django.utils.encoding import python_2_unicode_compatible
import salt.defaults.exitcodes import salt.utils import salt.utils.nb_popen import salt.utils.vt
for locale in locales: if self.verbosity > 0: self.stdout.write("processing locale %s\n" % locale) for potfile in potfiles: self.write_po_file(potfile, locale)
exc_info_on_loglevel=logging.DEBUG
self._corrupt_switch = True
self.assertTrue( self.run_function('softwareupdate.schedule_enable', [False])) self.assertFalse(self.run_function('softwareupdate.schedule_enabled'))
if is_copy: if not result._get_axis(axis).equals(self._get_axis(axis)): result._set_is_copy(self)
result = df.xs(1, level=2, drop_level=False) assert_frame_equal(result, expected)
self.coach = coach = AdminFactory.create(password="test") self.client.login(username=coach.username, password="test")
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
X = datasets.make_classification(n_samples, n_features, n_informative=n_features-2, random_state=rng)[0]
for max_leaf_nodes, name in product((None, 1000), ALL_TREES.keys()): TreeEstimator = ALL_TREES[name]
image_url = microsite.get_value('logo_image_url') if image_url: return '{static_url}{image_url}'.format( static_url=settings.STATIC_URL, image_url=image_url )
assert_frame_equal(wp['bool'], panel['bool'], check_names=False)
__virtualname__ = 'service'
self.check_ordering_of_field_choices([self.b1, self.b2])
remote_refs.append( line.split()[-1].replace(b'refs/heads/', b'refs/remotes/origin/') )
core_samples = np.asarray(n_neighbors >= min_samples, dtype=np.uint8) dbscan_inner(core_samples, neighborhoods, labels) return np.where(core_samples)[0], labels
sample_weight = sample_weight / sample_weight.sum(dtype=np.float64)
if self.client.exists(self.create_path): self.is_acquired = True else: self.is_acquired = False
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
if not slsmod: errors.append( 'Environment {0} contains an empty sls ' 'index'.format(saltenv) )
self.enrollment = CourseEnrollmentFactory( user=self.user,
self.current_block.add(string, start, end, line)
import logging
from __future__ import unicode_literals
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
set_credit_requirement_status( user.username, course_key, 'reverification', checkpoint.checkpoint_location, status='declined' )
action_name = ugettext_noop('cohorted') task_fn = partial(cohort_students_and_upload, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
class ArrayLike(object):
try: for link in listdir: path = dirpath + link readlink = os.readlink(path) filenames = []
module.save() return module
def f(): np.dtype(self.dtype)
with self.assertRaises(forms.ValidationError): f.clean('1:30:05 PM')
run_tests(df, rhs, right)
assert url_path.startswith(settings.STATIC_URL) target_name = url_path[len(settings.STATIC_URL):]
VIRTUAL_UNIVERSITIES = []
import logging import os.path
assert_equal(len(slo), n_iter)
selected = block_keys['selected']
import integration from salt.config import cloud_providers_config
import integration import salt.utils import salt.utils.find
if style: first_row = startrow + cell.row + 1 last_row = startrow + cell.mergestart + 1 first_col = startcol + cell.col + 1 last_col = startcol + cell.mergeend + 1
w = [e for e in w if e.category is not np.VisibleDeprecationWarning]
class X(object):
DEBUG_TOOLBAR_MONGO_STACKTRACES = False
columns = self.column_classes(Note) self.assertFalse(columns['info'][1][6])
aggregated = grouped.aggregate(np.mean) self.assertEqual(len(aggregated), 5) self.assertEqual(len(aggregated.columns), 4)
supports_select_for_update_with_limit = False supports_temporal_subtraction = True
orig_filters = admin_email_handler.filters try: admin_email_handler.filters = []
item = self.cart.orderitem_set.all().select_subclasses()[0] self.assertEquals(item.unit_cost, self.get_discount(self.cost))
X, y, _, _, _ = _preprocess_data(X, y, fit_intercept, normalize, copy=False)
best_optimal_theta = [] best_optimal_rlf_value = [] best_optimal_par = []
import doctest doctest.master = None
self.assertNotIn('error_code', json.loads(response.content))
X = np.array(list(product(range(N_per_side), repeat=2)))
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) signal_handler.send.assert_called_with('course_published', course_key=course.id)
self.set_header('Access-Control-Allow-Headers', ','.join(allowed_headers))
if not self.env_is_exposed(tgt_env): return None try: commit = self.repo.revparse_single(tgt_ref) except (KeyError, TypeError): pass else: return commit.tree return None
return True
result = idx.delete(5)
for student in students[5:7]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.unavailable, mode='honor', grade=default_grade )
from __future__ import absolute_import
ans = False
ug_bar = UndergroundBar.objects.create(place=p, serves_cocktails=False) ug_bar.place = None self.assertIsNone(ug_bar.place)
self.assertEqual(list(storage), [])
other = other.replace(tzinfo=None)
clf_sigmoid = CalibratedClassifierCV(clf, cv=2, method='sigmoid') clf_sigmoid.fit(X_train, y_train, sw_train) prob_pos_sigmoid = clf_sigmoid.predict_proba(X_test)[:, 1]
course_honor_mode = CourseMode.mode_for_course(self.course.id, 'honor')
from __future__ import absolute_import import os import logging
a = np.random.rand(10).astype(np.complex64) b = np.random.rand(10).astype(np.complex128)
@property def geom_type(self): "Returns a string representing the Geometry type, e.g. 'Polygon'" return capi.geos_type(self.ptr).decode()
for ax in axes[[0, 1, 2], [0]].ravel(): self._check_visible(ax.get_yticklabels(), visible=True)