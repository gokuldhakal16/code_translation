call the method self.write_message with argument message.
define the method __eq__ with arguments self and other.
write string "  you can delete them." to self.stdout.
if six.PY3 is true,
if value is not contained in result,
if not,
define the method __exit__ with 4 arguments: self, exc_type, exc_value and traceback.
substitute the value under the 'HTTP_HOST' key of the self.META dictionary, substitute it for host.
call the options.update method with an argument kwargs.
call the method handler.addQuickElement with an argument string "author", "%s (%s)", formated with values under the 'author_email' and 'author_name' keys of item dictionary.
call the method field_stream.read, substitute the result for data.
if length of bits is lesser than integer 2,
define the method __str__ with an argument self.
position the file pointer at the beginning of self file.
substitute sup_cls.media for base.
from __future__ import unicode_literals into default name space.
define the function valid_ident with an argument s.
try,
return new_class.
call the method _trans.npgettext with 4 arguments context, singular, plural and number.
import module logging.
replace all the occurrences of the '%' string for '%%', append result to the previous result, substitute it for candidate_pat.
import module types.
self.verbatim is boolean False.
call the function warnings.simplefilter with 2 arguments: string "default" and RemovedInNextVersionWarning.
if not,
self.paths_to_remove is an empty list.
substitute settings.LANGUAGES for the value under the 'LANGUAGES' key of the context_extras dictionary.
call the function timedelta with an argument integer 0, substitute the result for ZERO.
return plural_suffix.
if not,
fields is an tuple containing instances of the class DateField, created with 3 arguments: input_formats set to input_date_formats, error_messages as an dictionary with an entry: value under the 'invalid_date' of errors dictionary for 'invalid', localize set to localize, and an instance of the class TimeField created with 3 arguments: input_formats set to input_time_formats, error_messages as an dictionary with an entry: value under the 'invalid_time' of errors dictionary for 'invalid', localize set to localize
append list with 2 strings: '_request' and '_current_app' to SimpleTemplateResponse.rendering_attrs, substitute the result for rendering_attrs.
otherwise if piece is true,
substitute title for sublist_item.
raise an TypeError exception with an argument sting "can't delete _wrapped.".
if plan is not true,
derive the class SafeMIMEText from the MIMEMixin and MIMEText base class.
if six.PY3 is true,
if option_value is None,
call the function os.chmod with arguments dst and mode.
replace '%s' in string 'ignoring file %s in %s\n' with filename and dirpath, write it to self.stdout.
if e.errno equals errno.EEXIST,
inplural is boolean True.
call the method router.get_migratable_models with arguments app_config, database and include_auto_created set to boolean True, extend all_models list with the result.
return version
define the function parse_boundary_stream with arguments stream and max_header_size.
substitute META for self._meta.
call the method stream.unget with last rollback elements of chunk as an argument.
substitute parent_widget for self.parent_widget.
if value is true and character ':' is contained in value,
define the method __init__ with 3 arguments: self, token_type and contents.
self.empty_label is None.
call the method handler.addQuickElement with 2 arguments: string 'pubDate' and result of the function rfc2822_date, called with value under the 'pubdate' key of the item dictionary.
if value has an attribute 'close',
call the method self.merge with an argument translation.
call the function compile_string with 2 arguments: template_string and origin, substitute the result for self.nodelist.
return out.
if character '@' is contained in addr,
get the value under the value key of a dictionary with 6 entries: boolean True for '2', boolean True for boolean True, boolean True for 'True', boolean False for '3', boolean False for 'False' and boolean False for boolean False, return it if the key exists, if not return None.
call the function F with an argument x, for every x in sequence of integers from 1 to l, not included, substitute the results in a list for T.
check if obj is instance of the object _PROTECTED_TYPES, return the boolean result.
define the function b64_encode with an argument s.
msg is an instance of a class SafeMIMEMultipart, created with arguments: _subtype set to self.mixed_subtype and encoding set to encoding.
from django.core.management import call_command into default name space.
s is an instance of MLStripper class.
substitute value for the vale under the name key of the pdict dictionary.
if stream_or_string is an instance of six.string_types type.
call the formatdate function, substitute it for value under the 'Date' key of msg dictionary.
from django.db.migrations import Migration into default name space.
define the method _has_expired with self and key as arguments.
raise an exception.
define the method endChannelElement with 2 arguments: self and handler.
call the method self.clean.
define the method delete with self, key and version set to None as arguments.
if not,
call the method fixture.close.
call the function logging.getLogger with string 'django.request' as the argument, assign the return object handle to logger.
for every hextet in new_ip,
append orig_file to string '#: ', substitute it for new.
return the value under the filter_name key of the self.filters dictionary.
call the function tempfile.mkdtemp, substitute the result for tmpdir.
if not,
derive the class TokenBase from the object base class.
if months is true,
return boolean False.
call the function allow_lazy with 2 arguments: get_text_list and six.text_type, substitute the result for get_text_list.
raise an StopIteration exception.
call the method __init__ from the base class of the class CharField, with arguments unpacked list args and unpacked dictionary kwargs.
evaluate the method get_image_dimensions with self class instance and close set to close as the arguments, substitute the result for self._dimensions_cache.
concatenate path and string '.%s', append the result to format_module_path.
if field.rel.through._meta.auto_created is true,
join statements into a string, separated by newlines, return it.
if self.timezone is false,
call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key, with unpacked list field_value as an argument, substitute the field pk of the result for obj_pk.
get the element with maximal value between initial_forms and self.min_num, add self.extra to it, substitute the result for total_forms.
otherwise if k equals a string 'bg',
call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments, substitute the result for pickled.
substitute field_name for self.field_name.
return a string '%s:%s' formated with the results of the functions self.g and self.i, respectivley.
call the method to_python with an argument value from the base class of the DateField class, return the result.
call the method self.data.weekday, increment the result by integer 1, substitute the result for weekday.
return d.
if return value of function response.has_header with string 'Vary' as argument is boolean False,
if app_config.models_module is None or app_config is contained in excluded_apps,
import module re.
from django.utils import six into default name space.
decorator function register.filter with 2 arguments string "escape" and is_safe set to boolean True.
import module '.management' from the package app_config.name.
call the function ugettext_lazy with an argument value, return the result.
define the method entity_decl with arguments self, name, is_parameter_entity, value, base, sysid, pubid and notation_name.
parentloop is an empty dictionary.
call the function partial with 8 arguments: generic_tag_compiler, params set to params, varargs set to varargs, varkw set to varkw, defaults set to defaults, name set to function_name, takes_context set to takes_context and node_class set to InclusionNode, substitute the result for compile_func.
call the method LocaleRegexProvider.__init__ with arguments self and regex.
get the value under the library_name key of the libraries dictionary, if it exists, substitute it for lib, if not, lib is None.
import module os.
self.lineno is integer 1.
from django.utils.html import format_html into default name space.
if func doesnt have a attribute '__name__',
call the __init__ method of the base class of the class LocaleRegexURLResolver, with arguments:  None, urlconf_name, default_kwargs, app_name and namespace.
decorator register with Tags.models and Tags.signals as arguments.
get the value under the tail_ext key of the extension_map dictionary, substitute it for cls.
requires_system_checks is boolean False.
define the method __init__ with 6 arguments: self, regex set to None, message set to None, code set to None, inverse_match set to None and flags set to None.
if timezone is None,
if not,
substitute base for self.base.
define the function reloader_thread.
raise an CommandError with an argument string "Cannot find a migration matching '%s' from app '%s'.", where '%s' is replaced with migration_name and app_label.
self._post is an instance of QueryDict class created with an empty string as argument.
define the function import_module with 3 arguments: name and package set to None.
for every name and value in items of props dictionary,
import module time.
call the method self.func with an argument value.
call the method sys.stdin.close.
define the method validate with arguments self and value.
call the function is_aware with an argument date, if it evaluates to true,
from django.utils import six into default name space.
filenames is an empty list.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
define the method get_nodes_by_type with 2 arguments: self and nodetype.
get 'editable' attribute from object f, if it doesnt exists or its true,
define the function copystat with arguments src and dst.
define the method assignment_tag with 4 arguments: self, func set to None, takes_context set to None and name set to None.
substitute queryset for self.queryset.
raise an TemplateSyntaxError exception with an argument string "%r expected at least one variable assignment", where '%r' is replaced with first element of bits.
return an empty dictionary.
if Exception exception is caught,
from django.conf import settings into default name space.
if v is an instance of list or tuple type,
try,
call the method cursor.execute with string "SELECT COUNT(*) FROM %s" as argument, substitute the '%s' with table.
if value under the 'ttl' key of the self.feed dictionary is not None,
increment i by 1.
substitute _iterlists for iterlists.
get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
use the remainder of the division of name by count as the argument for the call to the avoid_wrapping function, store the result in result.
define the method __init__ with 4 arguments: self, cyclevars, variable_name set to None and silent set to boolean False.
call the function split_domain_port with an argument host, assign the result to domain and port, respectively.
split ip_str into parts by ':', substitute the result for hextets.
from django.core.exceptions import ValidationError into default name space.
call the function normpath with an argument path, return the result.
call the method template_localtime with 2 arguments: value and use_tz=context.use_tz, substitute the result for value.
if StandardError, renamed to e, exception is caught,
substitute i for self.pointer.
substitute '%s' in 'Forbidden (Permission denied): %s' with request.path, extra is an dictionary with two pairs of elements, 'status_code' with value 403, and 'request with value request, respectively use the previous as the arguments for the call to the logger.warning function.
crate a set containing of app_labels elements, substitute it for app_labels.
import module opera.
otherwise if dirname equals string 'locale',
raise an MultiPartParserError with an argument string "Invalid content length: %r", where '%r' is replaced with content_length.
call the function find_command with an argument program, if it evaluates to None,
try,
match rest string with self.DIGIT_PATTERN regex, if it evaluates to false,
call the get method with an argument string 'tried' on the first element of the e.args, substitute the result for sub_tried.
form is an instance of ManagementForm class, created with 3 arguments: auto_id as self.auto_id, prefix as self.prefix, and initial as a dictionary with 4 entries: result of self.total_form_count method for TOTAL_FORM_COUNT, result of self.initial_form_count method for INITIAL_FORM_COUNT, self.min_num for MIN_NUM_FORM_COUNT and self.max_num for MAX_NUM_FORM_COUNT.
from django.utils.encoding import force_str into default name space.
define the method __init__ with 4 arguments: self, query_string is None, mutable is boolean False and encoding set to None.
substitute the second element of result for current_expires.
if KeyError exception is caught,
_func_closure is a string "__closure__".
derive the class ConvertingList from list base class.
substitute first element of item for k.
raise an exceptions
define the function trim_url with 2 arguments: x and limit set to trim_url_limit.
return boolean False.
from django.utils.translation import ugettext_lazy as _ into default name space.
define the method sign with arguments self and value.
define the method timestamp with an argument self.
if self has an '_files' attribute.
if ending is true and msg doesnt end with ending,
from importlib import import_module into default name space.
define the method to_python with arguments self and data.
call the value.split method with '://' as argument, convert first element of the result to lower case, substitute the result for scheme.
handler is an instance of SimplerXMLGenerator class, created with 2 arguments: outfile and encoding.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
call the method optimizer.optimize with 2 arguments operations and migration.app_label, substitute the result for new_operations.
append app_dir to dirs list.
content.setter decorator,
if settings.configured is false,
map the locale_dirs elements with mapping function os.path.basename, substitute the result for all_locales.
substitute settings.TEMPLATE_DIRS for template_dirs.
substitute source for self.source.
if self.can_delete is true,
call the function datetime.utcfromtimestamp with argument timeout, substitute it for exp.
get the value under the 'no_startup' key of the options dictionary, if it evaluates to false,
return result.
substitute value under the f.name key of the widgets dictionary for value under the 'widget' key of kwargs dictionary.
if OSError exception was raised,
define _get_files method with self class instance as the argument.
raise an TemplateSyntaxError exception with an argument string '"with" in %r tag needs at least one keyword argument.', where '%s' is replaced with first element of bits.
if value.__traceback__ is not tb,
return result.
while bits is true,
append string '_directory' to app_or_project, substitute it for base_directory.
create directories from the elements in filename.
if name is contained in lib.tags,
substitute fields for self.fields.
for every format in settings.SERIALIZATION_MODULES,
if chunks is false,
from django.utils.datastructures import MultiValueDict and MergeDict into default name space.
if app_config.models_module is None,
app_dirs is an empty list.
if scheme is not contained in self.schemes,
call the function construct_instance with 4 arguments form, instance, fields, exclude and substitute the result for instance.
if ImportError exception is caught,
_assertRegex is a strnig "assertRegex".
import hashlib module.
otherwise if value is boolean False,
substitute save_as_new for self.save_as_new.
define the method _create_attachments with arguments self and msg.
help is an empty string.
not_found is an empty list.
call the method pending_references.setdefault with 2 arguments: refto and an empty list, extend the result with refs.
if ch is not equal to string '\\'.
from django.conf import settings into default name space.
call the method self._get_validation_exclusions, substitute the result for exclude.
if colors is true and last element of colors is contained in color_names,
try,
substitute DNS_NAME for idhost.
parser is an instance of the object OptionParser, created with arguments: prog set to prog_name, usage set to return value of the method self.usage called with an argument subcommand, version set to return value of the method self.get_version.
append rel_to to string 'ForeignKey(, append character "'" to it, substitute the result for field_type.
append template_dir to app_template_dirs.
for every k and v in return value of the ret.items function,
replace '%s' in the string 'handler%s' with view_type, use it as an name of the attribute to get from the urls, substitute it for callback.
if block_context is None,
if not
substitute self.config for config.
call the method questioner.ask_merge with an argument app_label, if it evaluates to true,
if data is None or data is an instance of dict type,
derive the class WSGIServer from simple_server.WSGIServer and object base classes.
if self.connection_reset is true,
derive the class VariableDoesNotExist form the base class Exception.
for every f in self.instance._meta.fields,
return singular_suffix.
if self.inverse_match equals to return value of the self.regex.search method converted to boolean, called with argument force_text(value),
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
if TypeError exception is caught,
call the method self.splitext with an argument guessed_filename, substitute the second element of the result for ext.
raise an exception.
try,
derive class BaseCOnverter from object base class.
if reverse is true,
call the method regex_match.group with an argument integer 1, substitute the result for lang_code.
define the method __ne__ with 2 arguments: self and other.
code_list is an empty list.
from django.core.management.sql import sql_destroy_indexes into default name space.
replace '%s' in string "Creating %s\n" with new_path, write it to the self.stdout stream.
call the method parser.add_argument with 5 arguments: string '--extension', string '-e', dest set to string 'extensions', help set to a string 'The file extension(s) to examine (default: "html,txt", or "js" ' 'if the domain is "djangojs"). Separate multiple extensions with commas, or use -e multiple times.' and action as a string 'append'.
from django.apps import apps into default name space.
assign values under the 'app_label' and 'migration_name' keys of the options dictionary to the app_label and migration_name, respectively.
define the method emit_post_migrate with arguments verbosity, interactive and database.
decorator deconstructible,
call to the self.handle_uncaught_exception method with request, resolver and value of the evaluated function sys.exec_info, as the arguments, substitute the result for response.
year_field is a string '%s_year'.
for every c in candidate without the last element and in reversed order, convert c into an integer, use the result as an key to get the value from the LUHN_ODD_LOOKUP dictionary, sum all the results and substitute the result for odds.
substitute the last element of parts for parts.
return value.
call the self._lock.reader method, with the result perform the following,
call the method self.split_leading_dir with an argument path, assign the result to prefix and rest, respectively.
property decorator,
evaluate the function http.parse_cookie with raw_cookie as an argument, return the result.
append string '_0' to id_.
add field_params to extra_params dictionary.
call the method s.find with 2 arguments: bytes string ';' and end incremented by one, substitute the result for end.
import module os.
define the method _delete with self and fname as arguments.
for every app_name and namespace_list in pattern.app_dict.items method return value,
derive the class ClearableFileInput from the FileInput base class.
raise an TemplateSyntaxError exception with an argument string "second argument to 'regroup' tag must be 'by'".
define the method as_textarea with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
if ImportError exception is caught,
import module operator.
call the add_arguments method with parser as argument form the base class of the class Command.
get the type of the exc object, substitute it for exc_type.
call the function fastcgi_help with an argument string "ERROR: Implementation must be one of prefork or thread.", return the result.
derive the InMemoryUploadedFile class from the UploadedFile base class.
raise an EmptyPage exception with string 'That page contains no results' as an argument.
define the function do_for with 2 arguments: parser and token.
if i is not an instance of six.integer_types class,
while bit doesnt end with sential,
from django.template.base import Context, FilterExpression, Lexer, Node, NodeList, Parser, RequestContext, Origin, StringOrigin, Template, TextNode, Token, TokenParser, Variable, VariableNode, constant_string and filter_raw_string.
call the method self._assert_mutable.
call the method connection.introspection.sequence_list if reset_sequences is true, substitute the result for seqs, if not, seqs is an empty tuple.
BASE62_ALPHABET is string '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.
if filename ends with string '.mo' return I18N_MODIFIED, otherwise return FILE_MODIFIED.
call the re.compile function with 2 arguments: raw string '\[([A-f0-9:\.]+)\]$' and re.IGNORECASE, substitute the result for literal_regex.
value under the klass key of the cls.__dispatch dictionary is an empty dictionary.
substitute _iteritems for items.
if t.token_type == TOKEN_TEXT:
call the function loader with arguments name and dirs, assign the result to template and display_name, respectively.
if not,
return nothing.
self.backout is an empty list.
substitute c for factory.
return self.
substitute complain for extend.
if value under the 'description' key of the item dictionary is not None,
raise an exception.
append a tuple with 2 elements: obj and form.changed_data to self.changed_objects.
define the method keys with an argument self.
_urllib_request_moved_attributes is an list with 33 elements, all of them are the results of the call to the function MovedAttribute with 3 different string arguments.
if not,
define the method __getitem__ with 2 arguments: self and key.
for every match in matches,
query a string 'Please enter either "yes" or "no": ' and store the result in confirm.
if not settings.DEBUG is true and settings.ALLOWED_HOSTS is false,
define the function make_template_fragment_key with fragment_name and vary_on defaulting to None as arguments.
call the method handler.addQuickElement with 2 arguments: string 'lastBuildDate' and result of the function rfc2822_date, called with an argument result of the method self.latest_post_date.
read data from buf, yield the result.
call the method stream.unget with elements of list chunk from the index next to the end.
if template_source_loaders is None,
call the method self.get_resolved_arguments with an argument context, substitute the result for resolved_args and resolved_kwargs.
if self.fixture_count equals integer 0 and self.hide_empty is true,
from PIL module import ImageFile as PillowImageFile.
if not,
append list containing string '--no-wrap' to self.msgattrib_options.
define the method source_error with 3 arguments: self, source and msg.
define the function _wrapped_view with 3 arguments: request, unpacked list args and unpacked dictionary kwargs.
if KeyError and TypeError exceptions are caught,
substitute the value under the ns key of the resolver.namespace_dict dictionary for extra and resolver, respectively.
clean_data is an empty list.
define the method has_changed with an argument self.
if field_type is not equal to string 'TextField(' or string 'CharField(',
asvar is None.
call the method settings.configure with an argument USE_I18N set to boolean True.
define the method __init__ with 5 arguments: self, attrs set to None, years set to None, months set to None and empty_label set to None.
call the method self.make_writeable with an argument new_path.
define the method __init__ with an argument self.
append string "UNIQUE" to field_output.
if t is not None,
raise an ViewDoesNotExist exception with an argument string "Could not import '%s'. View does not exist in module %s.", where string '%s' is replaced by lookup_view and mod_name, respectively.
from collections import namedtuple.
streaming is boolean False.
from __future__ import unicode_literals into default name space.
decorator deconstructible,
define the method __getitem__ with 2 arguments: self and key.
derive the class EmailMessage from the object base class.
define the method decr with self, key, delta defaulting to integer 1 and version defaulting to None as arguments.
call the method self.widget_attrs with an argument widget, substitute the result for extra_attrs.
call the method self._clean_form.
call the function import_string with backend if exists or settings.EMAIL_BACKEND if not, store the result into klass.
if required is true and initial is not None,
if not,
define the method build_absolute_uri with an arguments self and location set to None.
return field.to_python.
return first end elements of list chunk.
return empty bytes string.
substitute value under the 'suffix' key of dictionary d, substitute it for suffix.
for every app_label and migration_names in result of the method conflicts.items,
if commands_only is true,
if not,
return obj.
if self.verbosity is greater or equal than integer 1,
otherwise if ch equals a string ')',
to_unicode is an lambda function with an argument s, result is the result of the function force_text, called with 2 arguments: s and string_only as boolean True.
raise a ValidationError exception with arguments self.message and code set to self.code.
increment self.active_readers by t.
substitute settings.MEDIA_URL for prefix.
if base has an 'declared_fields' attribute,
try,
if self doesnt have '_queryset' attribute,
if CONTEXT_SEPARATOR is contained in result,
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
return field_type, field_params and field_notes.
call the function _load_serializers.
derive the class BaseForm from the base class object.
define the method render with 2 arguments: self and context.
divide message by error.params, substitute the residue of the division for message.
append tuple containing 2 elements: k and v to a list, for every k and v in options, only if k starts with curr, sort the result and substitute it for options.
define the method render with 2 arguments self and context.
self.charset is None.
call the function local, substitute the result _urlconf.
if old_attr is None,
call the os.stat function with argument src, substitute the result for st.
define the method __setitem__ with arguments self, name and val.
define the function serializer with 3 arguments: format, queryset and unpacked dictionary options.
return final_path.
try,
derive the class ErrorList from the UserList and list base classes.
if fname file path exists,
if attrs is not None,
existing_headers is a set containing lowercase strings header for every header in vary_headers.
define the method initial_form_count with an argument self.
if SkipFile exception is caught,
call the function func with request and response as arguments, assign the result to response.
evaluate the function bytes with the argument s, and return the result.
if location is None,
call the function re.compile with 2 arguments: raw string '<%s(/?>|(\s+[^>]*>))' formated with tags_re and re.U, substitute the result for starttag_re.
return s.
return output.
define the __init__ method with 4 arguments: self, message set to None, code set to None and whitelist set to None.
define the method _resolve with an argument self.
try,
call the function fcntl.flock with return value of the _fd(f) function and flags as arguments, substitute the result for ret.
define the function ungettext_lazy with 3 arguments: singular, plural and number set to None.
if AttributeError exception is caught,
call the method msgs.decode with an argument string 'utf-8', substitute the result for msgs.
get the name key of the data dictionary, if the key exists return it, if not return None.
call the method to_python with an argument data from the base class of the class URLField, substitute the result for value.
return self.file.name.
substitute as_string for as_bytes.
loaders is an empty list.
request is None.
define the function all_locale_paths.
if not,
convert result of the method self.__iter__ into a list, return its length.
add plan_node to the shown set.
define the function urlquote with 2 arguments: url and safe set to '/'.
_upload_handlers is an empty list.
form the tuple from the attrname converted to lowercase and attrvalue, append it to the end of attrs.
call the timezone.now function, substitute the result for now.
return an empty string.
for every templatetag_module in templatetags_modules_candidates,
derive the class RequireDebugTrue from logging.Filter base class.
substitute line for buffer_.
choice_input_class is None.
from django.db.models import AutoField, OneToOneField and ForeignKey.
call the function is_aware with an argument date, if it evaluates to true,
__all__ is a tuple, containing strings 'NamedTemporaryFile' and 'gettempdir'.
do nothing.
update the self._catalog dictionary with other._catalog.
if key_prefix is None,
join elements of tags into a string, separated with '|', format string '(%s)' with it, substitute the result for tags_re.
split template once at the first character ':', convert the first element to lowercase and substitute it for scheme.
substitute registry.tag_exists for tag_exists.
call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
if self.language is not None,
decrement self.number by one, multiply it by self.paginator.per_page, increment the result by one, return it.
substitute first element of options for opt_label.
call the method self.resolve_template with an argument self.template_name, substitute the result for template.
define the method __init__ with an argument self.
call the function get_language, substitute the result for language_code.
define the function get_public_serializer_formats.
insert mw_instance.process_response at the beginning of self._response_middleware.
join tokens elements into a string, substitute it for message.
substitute self.DEFAULT_CHUNK_SIZE for chunk_size.
if klass is a subclass of logging.handlers.MemoryHandler base class and string 'target' is contained in config,
from importlib import import_module into default name space.
if second_item is an empty list,
if token.contents equals string 'empty',
raise an ValueError with an argument string "attempted relative import beyond top-level package".
return name, ser_fmt and cmp_fmt.
call the method self.error_class with an argument list with a element: result of the method self.get_form_error, substitute the result for value under the NON_FIELD_ERRORS key of the form._errors dictionary.
candidate_subs is dictionary created from elements in return value of the function urlquote called with argument v, mapped with a function k, for every k and v in return value of the method candidate_subs.items.
define the function calculate_app_template_dirs.
call the function six.iteritems with an argument self.months, convert the result to a list and substitute it for choices.
substitute the value under the command key of self.tags dictionary for compile_func.
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.
app_template_dirs is an empty list.
call the function format_html with 2 arguments: string '<input{0} />' and result of the function flatatt, called with an argument final_attrs, return the result.
call the method message.message.
use_null_fallback is boolean False.
import module random as random_module.
otherwise if t.token_type equals TOKEN_VAR,
define the method clean with 2 arguments: self and value.
substitute config dictionary value under '()' key for factory.
if self.localize is true,
decorated is an instance of class Node, created with 3 arguments: syms.decorated, list with 2 arguments: decorator and klass, and prefix as node.prefix.
if not,
value under the 'null' key of the extra_params dictionary is boolean True.
call the function ugettext_lazy with an argument string 'Currently', substitute the result for initial_text.
call the method self._archive.extractfile with an argument member, substitute the result for extracted.
from django.core.files import locks into default name space.
call the method __init__ from the base class of the class SimpleTemplateResponse, return the result.
sum m and value under the medium key of the base dictionary, substitute it for m.
if not,
substitute self for data.
define the method tell with an argument self.
substitute _BROWSERS_DEPRECATED_LOCALES for _DJANGO_DEPRECATED_LOCALES.
increment i by integer 1, substitute the result for i.
return result.
define the method _iterkeys with an argument self.
remove '__dict__' key from the orig_vars dictionary.
define the method id_for_label with 2 arguments: self and id_.
substitute value under name key of logging._handlers dictionary for handler.
call the function get_runner with arguments settings and self.test_runner, substitute the result for test_runner_class.
define the method render with 4 arguments: self, attrs set to None, date_format set to None and time_format set to None.
if both cursor and close_connection are true,
for every obj in value call the function mark_safe with an argument result of the function force_text called with an argument obj, return all the results in a list.
DEFAULT_PORT is a string "8000".
if character '=' is contained in x,
substitute length of s for end.
import gettext module.
plist is an empty list.
from django.apps import apps into default name space.
if ValueError exception is caught,
substitute self.parent_instance.pk for value under the 'initial' key of the kwargs dictionary.
for every app_config and model_list in app_list,
call the context.push method, with the result, perform,
define the function urlsafe_base64_decode with an argument s.
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
if not,
if AmbiguityError exception is raised,
if scheme is countaine in self.url_schemes return boolean True, otherwise return False.
return a list with an element etag_str.
call the method token.split_contents, substitute the result for bits.
import module decimal.
creation_counter is an integer 0.
call the method os.path.basename with an argument fixture_name, substitute the result for fixture_name.
call the method self.configure_root with an argument root.
call the method block.nodelist.render with an argument context, substitute the result for result.
args is a empty tuple.
call the method parser.add_argument with 2 arguments: string 'migration_name', and help is a string 'Migrations will be squashed until and including this migration.'.
define the method body with an argument self.
for every header in list of strings compiled by splitting string cc_delim_re with value under the key 'Vary' of response dictionary as a delimiter.
substitute new_obj for obj.
return lookup_view.
for arg in argv list without the first two elements,
if name is false,
call the method parser.add_argument with 6 arguments: string '-e', string '--exclude', dest set to 'exclude', action set to 'append', default is a an empty list and help is a string '(use multiple --exclude to exclude multiple apps/models).'.
internal_use_only is boolean False.
cookiedict is an empty dictionary.
if self.data is false,
call the method call the function warnings.warn with 3 arguments: msg formatted with language and value under the language key, of the _DJANGO_DEPRECATED_LOCALES dictionary, RemovedInDjango19Warning and stacklevel set to integer 2.
if not,
return flat.
return result.
call the method self.create_nodelist, substitute the result for nodelist.
call the function token_kwargs with 3 arguments: remaining_bits, parser and support_legacy set to boolean True, substitute the result for extra_context.
call the function urlsplit with an argument url, assign the result to scheme, netloc, path, query and fragment, respectively.
define the method __eq__ with an argument self.
substitute cache.get for cache_get.
from django.utils.translation import trans_real as trans.
call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list containing element value.
define the method add_arguments with self and parser.
if self.allow_files is true,
for every f in opts.local_fields that has an 'post_create_sql' attribute, append f to a list, substitute the resulting list for post_sql_fields.
call the getvalue method from the base class of the class PythonSerializer, return the result.
if not,
define the method _find_boundary with an arguments self, data and eof set to boolean False.
return node.
define the method handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options.
call the addr.encode method with string 'ascii' as an argument.
call the method self._add_local_translations.
set k attribute of cls object to meth.
derive the class LazyObject from the object base class.
call the function mark_safe with an argument output.
define the function _split_statements with an argument content.
substitute first element of loader for loader and loader without the first element for args.
close the process with an argument 0.
return self.
if AmbiguityError exception is caught,
define the function _findall with 2 arguments text and substr.
if features.needs_datetime_string_cast field of the object represented stored under the db key of connections dictionary is true, and expires is not an instance of datetime.
derive the class Origin form the base class object.
if not,
call the os.path.normpath with argument path, return the result.
__Y2 is a raw string '(?P<year>\d{2})'.
_CacheInfo is an instance of namedtuple class created with 2 arguments: string "CacheInfo" and a list with 4 elements: string 'hits', "misses", "maxsize" and "currsize".
if arg is an instance of unicode,
if self.active_writers and self.waiting_writers both equal to integer 0,
for every statements in sql_statements:
return settings.LANGUAGE_CODE.
derive the class AppRegistryNotReady from the Exception base class.
if table_name_filter is not None and table_name_filter is callable object,
for every error in self.error_list,
if data is not None, substitute data for initial_value, otherwise data_value is an empty string.
define the method render with 4 arguments: self, name, value and attrs set to None.
if message has an 'error_dict' attribute,
call the method self.choice_input_class with 5 arguments: self.name, self.value, return value of the method self.attrs.copy, choice and i, substitute the result for w.
get config dictionary element under 'datefmt' key, if it exists substitute it for dfmt, if not, dfmt is None.
for every pos and elt in enumerated iterable source,
if extensions is false, substitute it for exts, otherwise exts is a list containing string 'js'.
for every model in app_models,
call the function get_commands, substitute the value under the name key of the return value, for app_name.
if exit_code is lesser than integer 0,
substitute current_app for ns.
return boolean False.
request_queue_size is integer 10.
call the function walk_to_end with 2 arguments: ch and pattern_iter.
raise TemplateSyntaxError(
define lambda function that returns self.file.newlines field, use it as an argument for property function, put the result in newlines.
c is an instance of the class SimpleCookie.
print opt_label to the standard output.
substitute ngettext for ngettext_lazy.
as arguments for the call to the unicode function, return the result.  substitute unichr for unichr.
get value under the 'database' key of the options dictionary, use it as a key to get the value from the connections dictionary, substitute the result for connection.
if KeyError exception is caught,
if not,
floor the division of i by j, use it an an index to get the element of the digits list, append the result for base36.
if leading is true,
if chunk is None,
try,
if file is an instance of six.string_types.
define the method _resolve_lookup with 2 arguments: self and context.
from django.conf import settings into default name space.
modes is an empty list.
get 'model' attribute from the options object, if it exists substitute it for self.model, if not self.model is None.
call the method parser.invalid_block_tag with 3 arguments: endblock, 'endblock' and acceptable_endblocks.
substitute opname for opfunc.__name__.
define the method execute with 3 arguments self, unpacked list args and unpacked dictionary options.
return value.
if self.max_value is not None,
call the method self.build_attrs with 3 arguments: attrs, type as a string 'checkbox', name as name, substitute the result for final_attrs.
call the function dateformat.format with 2 arguments: value and result of the function get_format called with 2 arguments: format, if its true, otherwise string 'DATE_FORMAT' and use_l10n as use_l10n, return the result.
call the method cache.set with cache_key, an empty list and cache_timeout as arguments.
substitute dt for self.__dt.
define the method _update_unget_history with arguments self and num_bytes.
filters is an empty list.
if Exception, renamed to e, exception is caught,
from django.utils.datastructures import MultiValueDict and ImmutableList into default name space.
if objects_in_fixture equals integer 0,
return the value under the language_code key of the self._namespace_dict dictionary.
call the function thread.start_new_thread with main_func, args and kwargs as arguments.
call the method date_value.strftime with an argument input_format, return the result.
exit the program with the integer 2 as exit code.
define the method get_template_source with 3 arguments: self, template_name, template_dirs set to None.
return nothing.
is_compressed is boolean True.
derive the class Token form the base class object.
call the method self.copy, return the result.
call the method add_fields from the base class of the class BaseModelFormSet, with 2 arguments: form and index.
TOKEN_MAPPING is a dictionary with 4 initial entries: 'Text' for TOKEN_TEXT, 'Var' for TOKEN_VAR, 'Block' for TOKEN_BLOCK, and 'Comment' for TOKEN_COMMENT.
if ImportError exception occurred,
call the msg.attach with an argument body_msg.
call the method parser.add_argument with string '--exclude', string '-x', dest set to string 'exclude', action set to string 'append', default as an empty list and help as an string 'Locales to exclude. Default is none. Can be used multiple times.'.
call the function date_format with 2 arguments: value, string 'DATETIME_FORMAT' and use_l10n as use_l10n, return the result.
delete entry from form.cleaned_data dictionary under the field key.
if LookupError exception is caught,
try,
substitute tempfile.gettempdir for gettempdir.
if not,
if out has an 'isatty' argument and return value of the function out.isatty is true,
with call to the io.open function with fname and string 'rb' as arguments, renamed to f,
call the method token.split_contents, substitute the result for bits.
for every f in opts.local_fields,
if error_messages is not None,
derive the class SignatureExpired from the BadSignature base class.
if self.file has an attribute 'tell' and an attribute 'seek',
call the function emit_post_migrate_signal with 4 arguments: all_models converted into a set, verbosity, interactive and database.
define the method w with an argument self.
increment num_sent by one.
locales is a difference between the locales and exclude sets.
call the method self.nodelist.render with an argument context, strip the result of the surrounding whitespaces, use the result as an argument for the call to the function strip_spaces_between_tags, return the result.
define the method validate with arguments self and value.
substitute var_name for self.var_name.
if not,
for every check in checks,
append ext to guessed_filename.
call the method path.encode with an argument fs_encoding, return the result.
if DatabaseError, renamed to e, exception is caught,
remove the first occurrence of the filename value in the _error_files list.
substitute parser for self.template_parser.
if self.can_import_settings is false,
call the method f.value_from_object with an argument instance, substitute the result for qs.
substitute value under the "unifunc" key of the results dictionary for unifunc.
define the method render_js with an argument self.
call the function check_for_migrations with arguments app_config and connection.
define the method __repr__ with an argument self.
if self has an 'error_dict' attribute,
substitute self.default_timeout for timeout.
call the method time_str.decode with an argument string 'utf-8', substitute the result for time_str.
define the function address_string with an argument self.
delete _active.value.
nodes is an empty list.
substitute server for self._servers.
call the method df.format with an argument format_string, return the result.
if template is None,
message_context is None.
try,
delete name attribute from self._wrapped object.
for every event and node in self.event_stream,
reverse order of parts, join them into a string, separated with '.', substitute the result for value.
define the method is_silence with argument self.
from io import StringIO into default name space.
if unicode_value is an instance of six.text_type,
try,
substitute self for result.parent.
if not,
call the function lazy with 2 arguments: func and unpacked list resultclasses, call the result with 2 arguments: unpacked list args, and unpacked dictionary kwargs.
call the method self.__class__ with an argument list, with elements: tuples with 2 elements: k and hard copy of list v, for every k and v in result of method the self.lists.
replace '%s' in the string "<BaseConverter: base%s (%s)>" with length of self.digits and self.digits, respectively, return the string.
substitute MultipleHiddenInput for hidden_widget.
substitute instance._meta for opts.
call the method operator.attrgetter with an argument _func_code, substitute the result for get_method_code.
from django.utils.html import strip_spaces_between_tags.
try,
define the function timesince_filter with 2 arguments value and arg set to None.
property decorator,
if self.fail_silently is boolean False,
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
call the method match.groupdict, substitute the result for kw.
split first element of args by ',', convert separated elements to strings, substitute the first 2 elements of the result, for second and third element of args, respectively.
write string "  You should commit this migration but leave the old ones in place;" to self.stdout.
call the method settings.configure.
if seconds smaller than integer 0, sign is '-', otherwise sign is '+',
call the method sys.stderr.write with an argument string "Unknown command: %r\nType '%s help' for usage.\n", where '%r' is replaced with subcommand and '%s' is replaced with self.prog_name.
if filename ends with string "$py.class",
substitute raw_data for data.
for every name in MEDIA_TYPES,
extend basedirs list with settings.LOCALE_PATHS.
define the method _has_changed with 3 arguments: self, initial and data.
call the method m.group with an argument string 'sec', convert the result into a string, substitute it for sec.
background is a dictionary created with elements: x appended to a string '4' for value under the key x of color_names dictionary, for every x in sequence of integers from 0 to 7.
increment res by element of to_digit at the digit index.
if Exception exception is caught.
call the method self.split_leading_dir with an argument name, substitute the first element of result for name.
try,
get 'nodelist' attribute from self object. if it doesnt exists return boolean False, if the result evaluates to false,
if self.verbosity is greater than integer 0 or self.interactive is true,
if not,
define the function parse_cookie with cookie as the argument.
define the method add_arguments with arguments self and parser.
help is a string "Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s).".
try,
if OverflowError or ValueError exceptions are caught,
return _cached_filenames.
if not,
append key to self.keyOrder.
if length of fixture_files_in_dir is greater than 1,
call the function ugettext with an argument msg_with_ctxt, substitute the result for result.
for every v in value call the function conditional_escape with an argument v, append the result in a list, substitute the resulting list for value.
if num is greater than self._max_entries,
if param is true,
strip message_context of "'" characters from both ends, substitute the result for message_context.
call the method self.get_available_name with argument name, substitute the result for name.
convert six.PY3 to an integer, substitute it for buffering.
define the method __bool__ with an argument self.
for every refto and refs in return value of the method references.items,
if not,
call the method self._css.setdefault with 2 arguments medium and an empty string, append path to the result.
xgettext_options is an list with elements: strings '--from-code=UTF-8' and '--add-comments=Translators'.
call the method self._archive.close.
if not,
define the function camel_case_to_spaces with an argument value.
append string "Field renamed because of name conflict." to field_notes.
derive class SingleZipReader for zipfile.ZipFile base class.
define the method validate with arguments self and value.
compile a regex from raw string '^(?P<prefix>[a-z]+)://(?P<suffix>.*)$', substitute it for CONVERT_PATTERN.
skip this loop iteration,
if not,
find first index of occurrence of character '-' in language, substitute it for p.
for every field in concrete_model._meta.local_fields,
write string "Flush cancelled.\n" to self.stdout stream.
if pattern.name is not None,
substitute result for value under the self.asvar key of context dictionary.
read the whole file f, substitute the result for content.
try,
if csrf_token equals string 'NOTPROVIDED',
call the method handler.addQuickElement with 2 arguments: string 'language' and value under the 'language' key of the self.feed dictionary.
if not,
otherwise if call the method simple_url_2_re.match with an argument middle evaluates to true,
divide num_entries by self._cull_frequency, convert the result to an integer, call the random.sample function with filelist and previous result as arguments, substitute the result for filelist.
substitute size for self.size.
open the output file in writing mode if output is true, assign the file descriptor to stream, otherwise stream is None.
define the method render with 2 arguments: self and context.
append list containing string '--no-wrap' to self.xgettext_options.
try,
call the method tpl.format with an arguments self.name, self.sysid and self.pubid.
call the method match.groupdict, substitute the result for kw.
substitute nonlocal_root for a tuple with an element root.
cookies is a string '<could not parse>'.
app_configs is a list containing app_config.
call the method __new__ from the base class of the class MediaDefiningClass, called with 4 arguments: mcs, name, bases and attrs.
path is an list containing path.
flush zfile stream buffer.
call the function starttag_re.sub with 2 arguments: an empty string and html, substitute the result for html.
return None.
call the method models.signals.pre_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config, verbosity set to verbosity, interactive set to interactive and using set to db.
if not,
return klass.
call the function importlib.import_module with 2 arguments: flup_module converted to string and appended to '.' character, and string 'flup', substitute the result for module.
from django.core.files.utils import FileProxyMixin into default name space.
decrement factor by one.
return nothing.
call the method parser.next_token, substitute the result for token.
return style.
call the function hmac.compare_digest with 2 arguments: result of the function force_bytes called with an argument val1, and result of the function force_bytes called with an argument val2, return the result.
derive the class CheckboxSelectMultiple from the RendererMixin and SelectMultiple base classes.
do nothing.
define the method update with 2 arguments: self and other_dict.
if Exception exception is caught,
if first and second elements of value are contained in self.empty_values,
call the method self._coerce with an argument value, return the result.
from django.utils import six into default name space.
define the method new_file with arguments: self, unpacked list args and unpacked dictionary kwargs.
get the value under the key 'verbosity' of options dictionary, substitute it for verbosity.
substitute obj._meta.concrete_model for concrete_model.
call the method self._assert_mutable.
define the function deactivate_all.
call the method self._convert_to_charset with arguments: header, string 'latin-1' and mime_encode set to boolean True, substitute the result for value.
nodelist.contains_nontext is boolean True.
if call to the function module_has_submodule with app_config.module and "management" evaluates to True.
call the method constant_re.findall with an argument t.contents, for every fmatch in the result,
return unbound.
define the method getvalue with an argument self.
mixed_subtype is a string 'mixed'.
if 'file_path' is contained in kwargs,
set response to None.
if KeyError exception is caught,
call the method cls.__dict__.copy substitute the result for orig_vars.
derive the class EmptyPage from the InvalidPage base class.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
call the function allow_lazy with 2 arguments: wrap and six.text_type, substitute the result for wrap.
if first element of message_context equals to character '"',
return directories and files.
call the method self.validate_key with key as argument.
try,
define the method __deepcopy__ with 2 arguments self and memo.
append i_args to args, append new_args with the result.
if not,
if match is true,
decorator stringfilter,
use_func is boolean True.
define the protected method _base_set with 4 arguments, self class instance, key, value and timeout set to DEFAULT_TIMEOUT.
return value.
split is an empty list.
get the name of the callback, substitute it for view_name.
get value under the config_string key of the PALETTES dictionary, call the copy method on the result and substitute it for palette.
call the method signals.got_request_exception.send with sender set to type of the self class instance and request set to request.
remove first element of text.
define the method __setattr__ with self, name and value as arguments.
call the method self.stdout.write with an argument string "Checking %s for fixtures...", where '%s' is replaced with result of the function humanize, called with an argument fixture_dir.
if string '--commands' is contained in args,
if settings.SETTINGS_MODULE is true,
return boolean True.
append x to self.namespaces list for every x in namespaces, only if x is true.
raise an TypeError exception with an argument string "If the flags are set, regex must be a regular expression string.".
return an empty string,
call the method self.data.weekday, use the result as an key for obtaining WEEKDAYS dictionary value, return it.
errors is an empty list.
call the method logger.removeHandler with an argument handler.
assign path_info to the value under the 'PATH_INFO' key of the self.META dictionary.
extend replaces list with migration.replaces,
for bit in self.lookups,
call the method stream_or_string.decode with an argument string 'utf-8', substitute the result for stream_or_string.
return value.
delete attr.
define the method __dir__ with an argument self.
call the method stream.read with an argument max_header_size, substitute the result for chunk.
find the ending position of the regular expression match of the object match, substitute the result for k.
raise an TypeError exception with an argument string "invalid keyword arguments to print()".
if var starts with '_(' and var ends with ')',
if self.loaded_object_count is greater than zero,
if not,
if template_dirs is false,
__all__  is a tuple containing 4 strings: 'Template', 'Context', 'RequestContext' and 'compile_string'.
define the function get_language_bidi.
if logging_config is true,
get the value under the cmp_fmt key of the self.compression_formats dictionary, assign it to open_method and mode.
from django.utils.text import get_valid_filename into default name space.
decorator stringfilter,
instantiate RelatedObject class with 3 arguments: cls.fk.rel.to, cls.model and cls.fk, call the method get_accessor_name on the result, substitute all occurrences of '+' in the result with an empty string, return it.
call the method self.handle_template with 2 arguments: value under the 'template' key of the options dictionary and base_subdir.
msgmerge_options is an list with elements: strings '-q' and '--previous'.
call the method parser.add_argument with 5 arguments: string '--dry-run', action as a string 'store_true', dest as string 'dry_run', default set to boolean False, help as a string "Just show what migrations would be made; don't actually write them.".
define the method serialize_headers with an argument self.
if event equals a string "START_ELEMENT" and node.nodeName equals a string 'object',
get the value under the ext key of the extension_map dictionary, substitute it for cls.
convert number to a string, truncate first element.
buffer_ is None.
substitute name for self.name.
define the method start_serialization with an argument self.
derive the class DjangoUnicodeDecodeError from the base class UnicodeDecodeError.
call the function zlib.compress with an argument data, substitute the result for compressed.
substitute complain for __setslice__.
if root is true,
call the method parser.parse with an argument tuple with 2 elements strings 'empty' and 'endfor', substitute the result for nodelist_loop.
call the function sql_indexes with app_config, self.style and connection as arguments, store the result in statements.
if self.forms is true,
define the function date with 2 arguments value and arg set to None.
define the function compress_string with an argument s.
call the method self.iterkeys, return the list of results.
if not,
if attr is contained in flags,
substitute the value under the 'socket' key of options dictionary for value under the 'bindAddress' key of wsgi_opts dictionary.
file_field_list is an empty list.
substitute kw for self.__kw.
substitute table for self._table.
call the method self.set with arguments key, value, timeout set to timeout, version set to version.
if CONTEXT_SEPARATOR is contained in result,
define the method evalu with 2 arguments self and context.
derive the class Operator from the base class TokenBase.
derive the class BooleanField from the base class Field class.
return self.__name.
call the method parser.add_argument with 6 arguments: string '--all', string '-a', action as a string'store_true', dest as a string 'all' default as boolean False and help as a string 'Updates the message files for all existing locales.'.
property decorator,
substitute self.unparsed_entity_decl for parser.UnparsedEntityDeclHandler.
substitute length for self._length.
append entry to the directories list.
call the method logging.StreamHandler, substitute the result for handler.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
return an empty list.
try,
define iterator method __iter__ with self as the argument.
extend collect list with settings.TEMPLATE_CONTEXT_PROCESSORS.
otherwise if self.verbosity equals integer 3,
if not,
call the method validators.MinLengthValidator with min_length converted into an integer, append the result to list self.validators.
if e doesnt have an 'django_template_source' attribute,
call the method self.decompress with an argument value, substitute the result for value.
return boolean False.
if self.field.required is true and self.form has an attribute 'required_css_class' ,
substitute complain for pop.
if command.verbosity is greater than integer 1,
convert cull_frequency into an integer and substitute it for self._cull_frequency.
define the function normalize with an argument pattern.
substitute _urllib_parse_moved_attributes for Module_six_moves_urllib_parse._moved_attributes.
define the method key_to_file with self class instance, key and version defaulting to None as arguments.
call the parent class of Command class add_arguments method and parser as the arguments.
if self.paths_to_remove is true,
if stream_created is true,
call the function force_text with argument val, substitute it for val.
define the method to_python with arguments self and value.
define the method start_object with arguments self and obj.
evaluate the function import_string with middleware_path as argument, substitute the result for my_class.
try,
define the function make_decorator with 2 arguments: unpacked list m_args and unpacked dictionary m_kwargs.
call the function base64.b64decode with an argument raw_data, substitute the result for data.
substitute '%s' in a string "Full migrations file '%s':" with writer.filename, append newline to it, use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.
if self.locale_paths is true,
substitute CheckboxChoiceInput for choice_input_class.
if self.addr is false,
update attrs dictionary with extra_attrs entry.
return boolean False.
define the method send with arguments self and fail_silently set to boolean False.
join app_dir and string 'sql' into a file path, use the result as an argument for the call to the function os.path.normpath, append the result to app_dirs.
return self.__offset.
call the method s.decode with an argument string 'utf-8', substitute the result for s.
try,
define the method multiple_chunks with arguments self and hunk_size set to None.
if not,
derive the class SimpleNode form the base class TagHelperNode.
call the connection.creation.sql_indexes_for_model with model and no_style() as arguments, substitute the result for index_squl.
try,
if attrs is None,
return boolean False.
call the method lexer.lex with an arguments js, for every name and tok in the result,
if not,
define the method find_potfiles with an arguments self and root.
if length of bits equals integer 2,
insert tagname at the beginning of open_tags.
return last element of value.
define the method filter_function with 3 arguments: self, func and unpacked dictionary flags.
call the function settings.is_overridden with argument string 'MANAGERS', if it evaluates to boolean True,
define the function do_extends with 2 arguments parser and token.
from django.core.mail.backends.base import BaseEmailBackend into default name space.
call the method self.nodelist_true.render with an argument context, return the result.
return a tuple with 2 elements: result of the method self.field.prepare_value called with an argument obj, and result of the method self.field.label_from_instance, called with an argument obj.
call the method self.create_token with 3 arguments: self.template_string list elements from start index to end index, tuple with 2 elements: start and end and boolean False, append the result to result.
call the self.close method.
define the __init__ method with arguments: self, unpacked list args and unpacked dictionary kwargs.
derive the class HttpResponseServerError from the HttpResponse base class.
if option_value is contained in selected_choices,
self.literal is None,
substitute length of self.object_list for self._count.
remove slots_var key from the orig_vars dictionary.
_response_middleware is an empty list.
call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS, and help set to string 'Nominates a database to synchronize. Defaults to the "default" database.'.
join tmpdir and sting 'symlink' into a file path name, substitute it for symlink_path.
call the method parser.add_argument with 5 arguments: string '--liveserver', action set to string 'store', dest set to 'liveserver', default set to None and help set to string 'Overrides the default address where the live server (used '  'with LiveServerTestCase) is expected to run from. The default value is localhost:8081.'
from django.core import mail into default name space.
define the method get with 3 arguments: self, key and otherwise set to None.
from django.utils.encoding import force_text into default name space.
requires_system_checks is boolean False.
return out.
get the value under self._pk_field.name key of form._meta.widgets dictionary, if it exists substitute it for widget, if not, widget is an instance of HiddenInput class.
target_app_labels_only is boolean False.
if values is None,
if value under the 'umask' key of options dictionary is true,
if data is not None,
from django.forms.widgets import Widget and Select into default name space.
if e doesnt have an 'django_template_source' attribute,
define the function itervalues with 2 arguments: d and unpacked dictionary  kw.
derive the class BaseCache from the object base class.
define the function upper with an argument value.
delete logging._handlerList list.
call the method self.extend_nodelist with 3 arguments: nodelist, var_node and token.
substitute frame.f_globals for _globs_.
call the import_string with argument: import_path if exists or settings.DEFAULT_FILE_STORAGE, if not, return the result.
raise an CommandError exception with an argument string "Django doesn't know which syntax to use for your SQL statements,\n" "because you haven't properly specified the ENGINE setting for the database.\n see: https://docs.djangoproject.com/en/dev/ref/settings/#databases".
call the httpd_cls function with 4 arguments: server_address, WSGIRequestHandler and ipv6 set to ipv6, substitute the result for httpd.
return result.
call the self.style.HTTP_SERVER_ERROR with an argument msg, substitute it for msg.
if other is an instance of Promise class,
if bit is true,
from django.utils import iri_to_uri, force_bytes, force_text to the default name space.
do nothing,
split instructions by ',' character, substitute the result for styles.
call the function force_text with an argument truncate, substitute the result for truncate.
return boolean False.
if self.choice_value is contained in self.value return boolean True, otherwise return boolean False.
if self._content_length equals integer 0,
convert arg to an integer, substitute it for p.
self.find_template_cache is an empty dictionary.
remove the first element from self.backout, substitute the result for self.pointer.
substitute SafeText for SafeString.
self.fixture_object_count is integer 0.
from django.utils.text import get_text_list and capfirst into default name space.
try,
call the function force_str with 3 arguments: string "<Text Node: '%s'>", with '%s' replaced with first 25 elements of self.s string, string 'ascii' and errors set to a string 'replace', return the result.
call the function _generate_cache_key with request, request.method, an empty list and key_prefix as arguments, return the result.
class static method,
raise an ContentNotRenderedError exception with an sring 'The response content must be rendered before it can be accessed.'.
from django.utils.six.moves import reduce into default name space.
call the method parse from the instance of TemplateIfParser class, created with 2 arguments parser and bits, substitute the result for condition.
name is a property object with _get_name as a getter method and _set_name as a setter method.
define the function csrf_token with 2 arguments: parser and token.
substitute the compiled_regex for value under the language_code key of the self._regex_dict dictionary.
substitute var for self.var.
append 2 consecutive newlines to output.
if data is an callable object,
call the method m.group with an argument string 'fay', convert the result into a string, substitute it for day.
value under the name key of the form.fields dictionary is an instance of InlineForeignKeyField created with 2 arguments: self.instance and unpacked dictionary kwargs.
call the method query.lists, substitute the result for query.
call the method connection.close,
call the method prepare_value from the base class of the class ModelChoiceField, with an argument value, return the result.
call the method query_string.decode, substitute the result for query_string.
raise an ValidationError with 2 arguments: dictionary self.error_messages value under the key 'list', and code set to string 'list.
append a tuple containing 2 elements: model and deps to model_dependencies.
return an string "Error in formatting: %s", replace '%s' with result of the function force_text,
remove item from self dictionary.
bring integer 2 to the power of 31, subtract the result by 4, put the result into a list, append possible_sizes to it, substitute minimal element of the resulting list for self._chunk_size.
if IndexError exception is caught,
define the method handle with 3 arguments: self, unpacked args and unpacked dictionary options.
if not,
return self.s.
define the method __newobj__ with 2 arguments cls and unpacked list args.
define the method __repr__ with an argument self.
if options is true,
return a tuple with 3 elements: self.__newobj__, tuple with an element self.__class__ and result of the method self.__getstate__.
call the signal.signal method with signal.SIGTTOU and signal.SIG_IGN as arguments, store the result in old_handler.
call the os.utime unction, with path and None as arguments.
return path.
call the method autodetector.changes with 3 arguments: graph set to loader.graph, trim_to_apps set to app_labels, if it exists or None if not and convert_apps set to app_labels, if it exists or None if not, substitute the result for changes.
define the method as_bytes with arguments self and unixfrom set to boolean False.
call the function dictvalue with el as argument for every el in values of dictionary cc, join the resulting sequence in a string with comma as separator, assign the string to cc.
return f.
from inspect import getargspec and getcallargs into default name space.
substitute doublecolon_start for best_doublecolon_start.
substituet node for value under the name key of the parser._namedCycleNodes dictionary.
if not,
if self.active_readers equals integer 0 and self.waiting_writers is not equal to integer 0,
call the method parser.add_argument with 3 arguments: string 'addrport', nargs='?' and help as a string 'Optional port number, or ipaddr:port'.
call the function force_bytes with arguments k and self.encoding, substitute the result for k.
otherwise if message is an instance of the list type.
derive class FileProxyMixin from the base class object, making it a new-style class.
if self.verbosity is greater or equal to integer 2,
derive the class Command from the AppCommand base class.
silent_variable_failure is an boolean True.
call the method self.get_date_error_message with an argument date_check, append the result to errors.
from ctypes.wintypes import BOOL, DWORD and HANDLE into default name space.
define the function npath with an argument path.
if delta is smaller than integer 0.
call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for unencoded_ampersands_re.
try,
if length of args is not equal to the sum of the lengths of params and prefix_args,
define the method __init__ with 4 arguments: self, name, content and content_type defaulting to a string 'text/plain'.
if from_email exists substitute from_email for self.from_email, if not substitute settings.DEFAULT_FROM_EMAIL for self.from_email.
if TypeError or AttributeError exceptions are caught,
call the method self.xml.endElement with an argument string 'field'.
if errors is true,
from django.forms.fields import everything into default name space.
from pkg_resources import resource_string into default name space.
substitute cookie for c.
return an empty string,
call the method self.nodelist.render with an argument new_context, return the result.
otherwise if field is contained in the result of the call to the method self._errors.keys,
if _locs_ is None,
label is an empty string.
for every opening and closing in WRAPPING_PUNCTUATION,
if value is not contained in result,
help is a string 'Runs a development server with data from the given fixture(s).'.
define the function lock with arguments f and flags.
substitute compile_function for self.tags dictionary value under the name key.
call the function escape with an argument value, return the result.
return the first element of self.client_address.
define the method __init__ with 2 arguments: self and tokens.
for every finder in sys.meta_path,
from django.utils import six into default name space.
call the get_bytes_from_wsgi function with self.environ, string 'QUERY_STRING' and empty string as arguments, substitute the return value for raw_query_string.
format string normal_row with an dictionary containing 6 entries: return value of the function force_text with an argument bf_errors, for 'errors', return value of the function force_text with an argument label for 'label', return value of the function six.text_type, with an argument bf, for 'field', help_text for help_text, html_class_attr for 'html_class_attr' and bf.html_name for 'field_name'.
call the function force_text with an argument text, substitute the result for input_val.
return commands.
convert self.forms into an iterable, return it.
define the method receive_data_chunk with arguments: self, raw_data and start.
define the function get_format with 3 arguments: format_type, lang set to None and use_l10n set to None.
if InvalidOperation exception is caught,
define the function _explode_shorthand_ip_string with an argument ip_str.
derive the class ComboField from the base class Field class.
call the function is_library_missing with an argument taglib_module, if it evaluates to true,
define the method __deepcopy__ with arguments self and memo.
substitute value.year, value.month and value.day for year_val, month_val and day_val, respectively.
derive the class BaseArchive from the object base class.
replace every occurrence of ' ' in value for '\xa0', return the result.
call the method parser.parse with an argument tuple with an element string 'endfilter', substitute the result for nodelist.
substitute conn_type for self.connector.
call the method base.build_instance with arguments Model, data and self.db, substitute the result for obj.
compile the regex "^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$", substitute it for host_validation_re.
call the method deactivate.
call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
if ImportError, renamed to e, exception is caught,
define the method popitem with an argument self.
name is a string "_%d" formated with num_args.
substitute first for self.state.
call the method self.next_token, substitute the result for self.current_token.
return nothing.
define the function _string_concat with an argument unpacked list strings.
define the method __init__ with 5 arguments: self, template, context set to None, content_type set to None and status set to None.
evaluate method self.literal_regex.match with an argument domain_part, substitute the result for literal_match.
create list of first remaining elements of chunk, substitute it for emitting.
set value under the 'timeout' key of the connection_params to self.timeout.
import module re.
call the method __get__ with 2 arguments: instance and owner, from the base class of the classonlymethod class, return the result.
if not,
media is an instance of Media class.
if not,
call the method self.validate_key with argument key.
increment stats dictionary value under the HITS key by integer 1.
define the method incr_version with 4 arguments, self, key, delta defaulting to integer 1 and version defaulting to None.
raise CommandError exception, with sring "Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed." as argument, substitute '%s' with self.program.
define the method render with an argument self.
yield string "# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'" as the result.
return value.
try,
if parse_until is true,
call the method app_config.get_models with include_auto_created set to boolean True, substitute the result for models.
call the method handler.new_file with 6 arguments: field_name, file_name, content_type, content_length, charset and  content_type_extra.
raise an exception value.
if i equals to integer 0 and
append a tuple with elements key and value to current_fields.
find the value of response under the key 'Cache-Control', use it as a delimiter to split string ss_delim_re, assign the result to cc.
call the _create_cache with backend and dictionary kwargs as arguments, substitute the result for cache.
start is an integer 0.
call the method datetime_safe.new_datetime with an argument value, substitute the result for value.
try,
if self.leave_locale_alone is false,
define the method fixture_dirs with an argument self.
define the method __iter__ with an argument self.
call the function make_middleware_decorator with an argument middleware_class, return the result.
from django.conf import settings into default name space.
get 'localized_fields' attribute from the options object, if it exists substitute it for self.localized_fields, if not self.localized_fields is None.
substitute use_l10n for self.use_l10n.
counters is a list containing length of handlers number of zeros.
call the method self.validate_key with argument key.
return _decorator.
split ip_str by '::', substitute it for hextet.
leave_locale_alone is boolean False.
if not,
if not,
do nothing.
substitute self.current_token for t.
if exception GeneratorExit is caught,
if not,
derive the class ContentFile from File base class.
_builtin_context_processors is a tuple containing a string 'django.core.context_processors.csrf'.
split middle into two parts from the right by '@' character, assign the resulting parts to local and domain.
increment key by kwd_mark.
get the value 'reset_sequences' key of the options dictionary, if it exists substitute it for reset_sequences, otherwise reset_sequences is boolean True.
raise an TemplateSyntaxError exception with an argument string "'%s' cannot appear more than once in the same template", where '%s' is replaced with first element of bits.
substitute WSGIRequest for request_class.
if ImportError exception is caught,
call the method func.__get__ with 2 arguments: self and type of self object, call the result with 2 arguments: unpacked list args2 and unpacked dictionary kwargs2, return the result.
if fourth element of version does not equals to string 'alpha' or 'beta' or 'rc' or 'final', raise an exception.
if t is contained in self.__dispatch,
call the function warnings.warn with 2 arguments: string "Custom SQL location '<app_label>/models/sql' is deprecated, use '<app_label>/sql' instead." and RemovedInDjango19Warning.
import module os.
derive the class InlineForeignKeyField from the Field base class.
append string ".moves.urllib_parse" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for parse.
define the method _get_count with an argument self.
call the method handler.receive_data_chunk with 2 arguments: chunk and i-th element of counters, substitute the result for chunk.
if not,
if OSError exception is caught,
if not,
join elements of code_list in a string, separated by ';', format string '\x1b[%sm' with it, append text to the result if exists, return the string.
define the method L with an argument self.
define the method tell with an argument self.
update attrs dictionary with entry: self.max_length converted into a string for 'maxlength'.
try,
call the method self.save_new with 2 arguments: form and commit as commit, append the result to self.new_objects.
define the function i18n with an argument request.
comment is an empty list.
call the method cursor.execute with sql as argument.
get the values under the 'app_label' and 'migration_name' keys of the options dictionary, substitute them for app_label and migration_name, respectively.
append self.form.required_css_class to a whitespace character, append it to the value under the 'class' key of the attrs dictionary.
if end is None
new_args is an empty list.
return self._errors.
call the method parser.delete_first_token.
derive the class Input from the Widget base class.
doublecolon_len is integer 0.
substitute MultipleHiddenInput for hidden_widget.
_cached_modules is an empty set.
call the method six.text_type with 3 arguments: s, encoding and string 'replace'.
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
define the method __init__ with 4 arguments: self, name, old and new set to None.
raise an BadHeaderError exception  with argument string "Header values can't contain newlines (got %r for header %r)", where '%r' are replaced by val and name, respectively.
substitute compressed for data.
decrement mtime by stat.st_ctime.
define the function _check_test_runner with app_config set to None and kwargs dictionary as arguments.
call the function view_func with 3 arguments: request, unpacked list args, unpacked dictionary kwargs, substitute the result for response.
if InputStreamExhausted exception is caught,
subtract day_of_year from i, if the result is smaller than the result of subtraction of weekday from integer 4,
call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments: NON_FIELD_ERRORS and an empty list.
get the value under the 'ignore_patterns' key of the options dictionary, substitute it for ignore_patterns.
derive the class MaxValueValidator form the BaseValidator base class.
call the function walk_to_end with 2 arguments: ch and pattern_iter.
try,
if formfield_callback is None,
call the method self.check_for_whole_start_tag with i as an argument, substitute result for the endpos.
call the method self.style.NOTICE with string "  Your models have changes that are not yet reflected in a migration, and so won't be applied." as an argument, use the result as an argument for the call to the self.stdout.write method.
call the method match.group with 2 arguments: strings "var" and "constant", substitute the result for var and constant, respectively.
if http_cookies.CookieError exception is raised,
if not,
raise an Resolver404 exception with an argument dictionary containing 1 entry: path for 'path'.
substitute value for rest.
call the method autodetector.changes with the graph set to executor.loader.graph as an argument, substitute it for the changes.
args_check is a static method.
sublist is an string '\n%s<ul>\n%s\n%s</ul>\n%s', where every '%s' is replaced with indent, sublist, indent and indent, respectively.
use fourth element of version as a key to get the value from mapping dictionary, append to it fourth element of version converted to string, substitute it for sub.
substitute tok.next for state.
substitute self._options for client.behaviors.
define the method close with an argument self.
substitute filter_expression for self.filter_expression.
append string '</select>' to output.
otherwise if first element of cwords is contanied in tuple with 8 entries: 'dumpdata', 'sql', 'sqlall', 'sqlclear', 'sqlcustom',
if value under the 'author_link' key of the item dictionary is not None,
call the self.style.HTTP_NOT_MODIFIED with an argument msg, substitute it for msg.
find first index of occurrence of character '-' in locale, substitute it for p.
terminal_char is an string ')'.
call the function get_bytes_from_wsgi with environ, string 'PATH_INFO' and character '/' as arguments, substitute the result for path_info.
return errors.
decorator function register.filter with an argument is_safe set to boolean False.
for every migration in app_migrations,
if config_string is false,
define the method loaders with an argument self.
define the function lock with arguments f and flags.
define the function cache_info.
call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
substitute environ for self.environ.
call the os.path.splitext with argument file_name, assign the result to the file_root and file_ext respectively.
write string "  the new migration will be used for new installs. Once you are sure" to self.stdout.
import bz2.
if KeyError, renamed to key, exception is caught,
call the function datetime.utcnow, substitute the result for now.
for f in sorted list of the files in the self.path directory,
read file fp, call the method decode on the result with an argument settings.FILE_CHARSET, return tuple containing 2 elements, previous result and filepath.
parent is a tuple with 1 element, object.
from __future__ import unicode_literals into default name space.
call the method self._save with arguments name and content, substitute it for name.
convery value into a tuple, substitute it for value.
yield string "# You'll have to do the following manually to clean this up:" as the result. yield string "#
self.active_readers is an integer 0.
define the method add_arguments with 2 arguments: self and parser.
define private method __repr__ with argument self.
if forms_valid is true and call to the method self.non_form_errors, evaluates to false, return boolean True, otherwise return False.
define the method tag with an argument self.
mime_type is a string 'application/rss+xml; charset=utf-8'.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
value is an empty string.
for every d in deps, if d is not contained in models and d is contained in model_list add boolean True to a tuple, otherwise add boolean False, for every candidate in the result perform following,
skip this loop iteration.
help is a string "Starts a lightweight Web server for development.".
define the get_path_info function with environ as the argument.
call the function parse_header with an argument line, substitute the result for main_value_pair and params, respectively.
if _localtime is None,
if second element of options is true,
if number is greater than self.num_pages,
define the method clear with an argument self.
call the method parser.add_argument with 5 arguments: string '--no-default-ignore', action as a string 'store_false', dest as a string 'use_default_ignore_patterns', default set to boolean True, and help as a string "Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'.".
try,
for every app_config in return value of the call to the function apps.get_app_configs,
append self.pointer to self.backout.
return attrs.
if self is false,
if KeyError exception is caught,
if value under the 'socket' key of the options dictionary is false and values under the 'host' and 'port' keys of the options dictionary are true,
return dec.
call the function six.text_type with s as an argument, substitute result for s.
if path starts with string 'http://' or string 'https://' or with string '/',
define the method __init__ with 4 arguments: self, form, field and name.
define the method led with 3 arguments: self, left and parser.
call the function sys.exit with an integer 1 as an argument.
call the function locks.unlock with argument fd.
common_ancestor is None.
raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag library: %s", where '%s' is replaced with taglib and e.
from django.db.migrations.loader import MigrationLoader into default name space.
call the function force_str with an argument self._tzname, return the result.
define the method _get_regex an argument self.
call the self._lib.Client with argument self._servers, substitute the result for self._client.
define the method __init__ with 3 arguments: self unpacked list args and unpacked dictionary kwargs.
MONTHS_3_REV is an dictionary with 12 entries: 1 for 'jan', 2 for 'feb', 3 for 'mar', 4 for 'apr', 5 for 'may', 6 for 'jun', 7 for 'jul', 8 for 'aug', 9 for 'sep', 10 for 'oct', 11 for 'nov' and 12 for 'dec'.
if ValueError exception is caught,
define the method all with argument self.
call the method field.rel.to._default_manager.db_manager with db as argument, call the get_by_natural_key method on the result with, unpacked list field_value as an argument, substitute the result for obj.
otherwise if length of fks_to_parent is zero,
raise an Exception exception with an argument string "This %s instance is not writable", where '%s' is replaced with self.__class__.__name__.
if not,
sub_ul_renderer is an instance of ChoiceFieldRenderer class, created with 4 arguments: name as self.name, value as self.value, attrs as attrs_plus and choices as choice_label.
substitute value under n key of dictionary d for d.
if i incremented by 1 is lesser than length of chunks,
for every name and value in return value of the method self.extra_headers.items,
print FASTCGI_HELP to the standard output.
substitute model._default_manager for objects.
delete _prefixes.values.
if value is not equal to value or value equals return value of the call to Decimal with argument 'Inf', or value equals return value of the call to Decimal with argument '-Inf'
self.first is boolean False.
substitute cache for value under the alias key of self._caches.caches dictionary.
get the value under the 'id' key of the widget.attrs dictionary, if the key exists substitute it for id_, if not, substitute self.auto_id for id_.
call the function OPERATORS.items, for every key and op in result,
from django.core.files.move import file_move_safe into default name space.
call the method self.build_attrs with 2 arguments: attrs and name set to name, substitute the result for final_attrs.
define the function get_unbound_function with an argument unbound.
for every obj in result of the call to the method self.queryset.all,
if timezone has an attribute 'normalize',
strip_prefix is a lambda function with an argument s, return value is s without the first element if s starts with string 'u'', otherwise returns s.
substitute first element of to_digits for res.
self._read_started is True.
self._non_form_errors is None.
split ip_str by ':', substitute the result for hextets.
return string "(%s %r)", replace '%s' with self.if and '%r' with self.value.
call the method parser.add_argument with an argument string '--settings'.
define the method __init__ with an argument self.
get the value under the 'localize' key of the kwargs dictionary, substitute it for localize, if the key doesnt exists, substitute the result for localize.
if valu is an instance of list type,
if exclude is true and f.name is contained in exclude,
define the method is_valid with an argument self.
for every sublist in second_item,
remove 'sep' key from the kwargs dictionary, if it exists substitute it for sep, if not sep is None.
HttpResponse.content.setter property,
call the method self.get_renderer with 4 arguments: name, value, attrs and choices, call the render method on the result, return the result.
call the function re.compile with 2 arguments: string '^([a-z]):' and re.I, substitute the result for _drive_re.
return id_.
return self.data.month.
define the method clean with arguments self and value.
from django.db.models.fields.related import ManyToManyField.
call the method self.validate_name with arguments project_name and string "project".
call the function format_html with 2 arguments: string "<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />", and csrf_token, return the result.
if self.merge is true and conflicts is false,
property decorator,
if name is true,
substitute '%r' in string ' npgettext(%r, %r, %r,count) ' with message_context, result of the function join_tokens, called with 2 arguments: singular and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed, write the result to out.
call the function smart_text with argument key_value, use the result as an argument for the call to the self.xml.characters method.
call the method handler.startElement with 2 arguments: string 'entry' and result of the function self.item_attributes, called with an argument item.
call the function post_callback with an argument retval, substitute the result for newretval.
if not,
call the method handler.addQuickElement with 2 arguments: string 'ttl' and value under the 'ttl' key of the item dictionary.
define the method self and blocks.
if self._is_rendered is false,
get maximal element from roots and substitute it for root.
define the method _create_attachment with 4 arguments: self, filename, content and mimetype set to None.
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
if self.use_ipv6 is true and socket.has_ipv6 is false,
if not,
call the method bit.group with an argument integer 0, yield the result.
define the method render with 2 arguments: self and context.
substitute BOOL for UnlockFileEx.restype.
strip whitespaces from both sides of the value, return the result.
for every ldir in dirs,
do nothing.
substitute nodelist_loop for self.nodelist_loop.
append value to the '-', substitute it for value.
define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
field_type is a string 'TextField'.
return the value under the self.data.month key of the MONTHS_AP dictionary.
call the method cursor.execute with string "SELECT cache_key, value, expires FROM %s WHERE cache_key = %%s" as argument, substitute the '%s' with table and list containing key, respectively.
kwargs is an dictionary, populated for every k and v in result of the method self.kwargs.items with: result of the call to the method v.resolve with an argument context, for result of the function smart_text called with 2 arguments k and string 'ascii'.
write string "Cleaning up temporary files.\n" to self.stdout stream.
substitute object_list for self.object_list.
import module calendar.
do nothing.
if value under the 'author_email' key of the self.feed dictionary is not None,
call the function __proxy__ with 2 arguments: args and kw, return the result.
exception_middleware is an empty list.
if latest_date is None or item_date is greater than latest_date,
primary_keys is an empty list.
call the method self.next_token, substitute the result for token.
append label_output to output.
call the function lazy_number with 6 arguments: npgettext, six.text_type, context set to context, singular set to singular, plural set to plural and number set to number, return the result.
return boolean False.
call the method self.setlistdefault with an argument key, extend the result with value_list.
_func_globals is a string "__globals__".
return value if six.PY2 is true, if not return value.encode(ISO_8859_1).decode(UTF_8).
call the function date_format with 2 arguments: value and use_l10n as use_l10n, return the result.
define the method __get__ with 3 arguments: self, instance and name type to None.
yield d.
call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
define the private method __contains__ with self class instance and key as arguments.
timeout is a integer -1.
substitute number_value for kwargs dictionary value under the 'number' key.
return an instance of DebugNode class.
if count of occurrence of '.' in ip_str is equal to integer 3,
substitute settings.DEFAULT_CHARSET for encoding.
decrement end by one.
join m and n into a string, separated by '.', substitute the result for lookup_view_s.
import module logging.
if not,
define the private method __str__, with self instance of this class as the only argument.
define the method handle_field with argument self, obj and field.
on the object under the db key of connections dictionary call the method ops.value_to_db_datetime with argument exp, substitute the result for the exp.
call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib.error" appended to __name__, assign the result to the value under the string ".moves.urllib_error" appended to __name__ key of the sys.modules dictionary, and to the value under the string ".moves.urllib.error" appended to __name__ key of the sys.modules dictionary.
return input_val.
for every d in reversed list self.dicts,
self.lineno is None.
if TemplateDoesNotExist exception is caught,
do nothing.
take a tuple with 2 elements: boolean False and instance of Variable class, created with an argument constant_arg, append it to args.
if ImportError exception is caught.
define the method filter with 2 arguments: self and record.
define the method _iteritems with an argument self.
with lock,
property decorator,
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
try,
if self.use_natural_keys is true,
derive the class MiddlewareNotUsed from the Exception base class.
define the method render with 2 arguments: self and context.
if item_date is true,
read 4 bytes from file f and store it in sample.
if s is an instance of bytes or Promise and s._delegate_bytes is true,
if html_message is true,
if self.verbosity is greater or equal to integer 3, call the self.stderr.write method with string "
else if timeout equals to integer 0,
if unused_char is false,
errors is an empty list.
from django.utils import six into default name space.
call the method parser.add_argument with 5 arguments: string '--indent', default set to None, dest set to 'indent', type set to int and help is a string 'Specifies the indent level to use when pretty-printing output.'.
_format_cache is an empty dictionary.
call the method popitem from the base class of the class SortedDict, substitute the result for result.
define the method __getinitargs__ with an argument self.
do nothing.
return value.
otherwise if length of key equals integer 1 and type of first element of key is contained in fasttypes,
try,
call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote, use the result as an argument for the call to the function force_text, return the result.
call the function os.kill with os.getpid() and negative exit_code as arguments.
call the method self._set with key, pickled and timeout as arguments.
if not,
if self._options exists,
call the function _findall with 2 arguments: s1 and year converted into a string, substitute the result for sites1.
if hashlib had an instance "pbkdf2_hmac",
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
self._callback_strs is an empty set.
if self.verbosity is greater or equal to integer 1,
if accept_lang equals '*',
if MiddlewareNotUsed exception is raised,
filesize_number_format is an lambda function with an argument value, return value is the result of the method formats.number_format, called with 2 arguments: value rounded to 1 decimal point and integer 1.
if not,
get field.rel.field_name attribute of the object obj, substitute it for value.
skip this loop iteration.
memo is an empty dictionary.
import module hashlib.
call the self.sync_apps method with connection and executor.loader.unmigrated_apps as arguments, substitute it for created_models.
if cleaned_data is not None,
if not,
define the method to_python with 2 arguments: self and value.
if now is false,
otherwise if rhs is an instance of SafeBytes,
define the method start_object with argument self and obj.
call the method self.xml.endElement with an argument string "django-objects".
define the function server_bind with an argument self.
define the method __mod__ with 2 arguments: self and rhs.
BASE16_ALPHABET is a string '0123456789ABCDEF'.
msgattrib_options is an list with elements: string '--no-obsolete'.
if e doesnt have an 'django_template_source' attribute,
for every d in reversed list self.dicts,
define the function get_current_timezone.
yield node.
from django.core.servers.fastcgi import FASTCGI_HELP into default namespace.
nodelist_false is an instance of NodeList.
try,
join statements into a string, separated by newlines, return it.
if IndexError, TypeError or ValueError exception is caught,
for every k and list_ in return value of the method self.lists,
if not,
if not,
return nothing.
self.path is an empty string.
for i in self._deleted_form_indexes append i-th element of self.forms into a list, return the resulting list.
derive the class SelectDateWidget for the Widget base class.
call the method self.parse_file_upload with arguments self.META and data, assign the result to self._post and self._files.
if used_name is not equal to guessed_filename,
if not,
if not,
call the function urlquote with argument var for every var in vary_on, join the results into a string separated by ':', substitute it for key.
call the method handler.endElement with 2 arguments: string 'author' and an empty dictionary.
call the self.style.HTTP_BAD_REQUEST with an argument msg, substitute it for msg.
return an string "[Included template had syntax error: %s]", where '%s' is replaced with e.
raise an TemplateSyntaxError exception with an argument string "widthratio final argument must be a number".
from django.utils.encoding import force_bytes,  force_text and iri_to_uri into default name space.
if self.verbosity is greater than integer 0,
raise an ImproperlyConfigured exception with argument string 'Path for saving email messages exists, but is not a directory: %s',  replace '%s' with self.file_path.
call the method compiled_parent._render with an argument context, return the result.
call the method handler.addQuickElement with 2 arguments: string 'copyright' and value under the 'feed_copyright' key of the self.feed dictionary.
define the function get_language_from_path with an argument path.
while self.tokens is true,
if decimal_pos is not None
remove '__weakref__' key from the orig_vars dictionary.
substitute namespace for self.namespace.
with return value of the function io.open with fname and string 'rb' as arguments, named as f,
if not,
if self.cmd has an attribute 'missing_args_message' and next statement is not true: args is true or any arg doesnt start with '-' for arg in args,
if formatter is true,
if not,
from django.utils.http import urlquote into default name space.
python_2_unicode_compatible decorator,
call the method connection.ops.end_transaction_sql, use the result as the argument for the call to the method self.style.SQL_KEYWORD, append the result to the '\n' string, write it to self.stdout.
remove first element from self.tokens, return removed element.
if AttributeError exception is caught,
get shell attribute of the self object, call it and return the result.
__expire_info is an empty dictionary.
call the method queryset.filter with an argument unpacked dictionary containing self.instance for self.fk.name, substitute the result for qs.
join rendered_widgets into a string, return it.
return check.
from django.conf import settings into a default name space,
from django.apps import apps into default name space.
call the function get_supported_language_variant with an argument accept_lang, return the result.
basedirs is a list containing tuple with strings, 'conf/locale' and 'locale'.
increment num by one.
get 'errors' attribute from fp object, substitute it for errors if it exists, if not errors is None.
derive the class MemcachedCache from the BaseMemcachedCache base class.
append data to self.children.
substitute nodelist for self.nodelist.
define the method handle with arguments self and unpacked dictionary options.
define the method end_object with arguments self and obj.
append ch to result.
if exception PermissionDenied is caught,
if field is not equal to NON_FIELD_ERRORS and field is not contained in self.fields,
define the method render with 4 arguments: self, name, value and attrs set to None.
raise an OverflowError exception with an argument string 'dklen too big'.
call the function _ with an argument string 'Ensure this value is less than or equal to %(limit_value)s.', substitute the result for message.
from django.core.wsgi import get_wsgi_application into default name space.
call the method json.__version__.split with an argument '.', if the result is respectively greater than list containing strings '2', '1' and '3',
return the value under the language_code key of the self._regex_dict dictionary.
if remaining is not greater than 0, assert an error with the message string 'remaining bytes to read should never go negative'.
if mw_instance has an attribute named 'process_exception'.
call the function ugettext with an argument string "%s MB", substitute '%s' with the result of the call to the function, filesize_number_format with result of division of bytes by MB as an argument, substitute the result for value.
call the method self.close.
call the file.__exit__ method on self with exc, value and tb as the arguments.
try,
define the method __init__ with 10 arguments: self, subject set to an empty string, body set to an empty string,
if e.errno equals to errno.EEXIST,
if not,
return callback split into two lists at the dot index, without the element at the dot index.
if header equals a string 'ACCEPT_LANGUAGE' and is_accept_language_redundant is boolean True,
call the function patch_response with response and cache_timeout decremented by integer 1 as arguments.
if not,
substitute settings.TEMPLATE_STRING_IF_INVALID for current.
call the __init__ method from the base class of the EmailBackend class with argument fail_silently set to fail_silently.
raise an UnrecognizedArchiveFormat exception with an argument string "File object not a recognized archive format.".
call the method self.configure_custom with an argument config, substitute the result for result.
call the function os.path.expanduser with an argument pythonrc, substitute the result for pythonrc.
call the method parser.compile_filter with an argument value, substitute the result for value under the key key of kwargs dictionary.
try,
call the function decorator with 2 arugments: unpacked list args and unpacked dictionary kwargs, return the result.
from django.forms.widgets import HiddenInput into default name space.
if port exists substitute it for self.host, if not substitute settings.EMAIL_PORT for self.port.
for every i and v in enumerated iterable value,
for every cache in return value of the function caches.all.
iterator is an instance of ChunkIter class, created with arguments: stream_or_iterable and integer 16384.
define the function reset_translation.
call the function file_move_safe with tmp_path, fname, allow_overwrite set to boolean True as arguments.
call the function _slugify with an argument value, return the result.
raise a SerializerDoesNotExist exception with an argument format.
derive the class HTMLParser from the base class HTMLParser located in the module _html_parser.
get the value under the key key of the self.cookies dictionary, domain expires for 'domain' key of the returned dictionary.
raise an TemplateSyntaxError exception with an argument string "'templatetag' statement takes one argument".
append value under the 'protocol' key of the options dictionary to the string 'server.', substitute it for flup_module.
skip this loop iteration,
call the method self.end_object with an argument obj.
if value is not equal self.empty_value,
substitute _templatetags_modules for templatetags_modules.
substitute asvar for self.asvar.
define the method open with arguments self and mode defaulting to None.
try,
call the __init__ method with self and params arguments from the base class BaseCache.
call the function six.text_type with s, encoding and errors as the arguments, substitute the result for s.
call the function escape with an argument p, replace every occurrence of '\n' in the result for '<br />', format the string  '<p>%s</p>' with the result, for every p in paras, substitute list of results for paras.
substitute DEFAULT_MAX_NUM for max_num,
substitute idx-th element of self.choices for choice.
if ValueError exception is caught,
define the function convert_old_style_list with an argument list_.
token is an instance of Token class, created with 2 arguments: TOKEN_TEXT and token_string.
requires_system_checks is boolean False.
call the function http_date with no arguments, and substitute its return value for value of dictionary response under the key 'Last-Modified'.
i is integer 366.
derive the class DateField from the base class BaseTemporalField class.
call the method urlresolvers.RegexURLResolver with raw literal string '^/' and urlconf as the arguments, substitute the result for resolver.
data is an empty list.
raise an CommandError exception with an argument string "Destination directory '%s' does not exist, please create it first.", where '%s' is replaced with top_dir.
for every loader_name in settings.TEMPLATE_LOADERS,
derive the class HttpResponseRedirect from the HttpResponseRedirectBase base class.
if sign is contained in self.digits,
MIN_NUM_FORM_COUNT is a string 'MIN_NUM_FORMS'.
 %s', where '%s' is replaced with field_desc.
call the function ungettext_lazy with 3 arguments: string 'Ensure this value has at least %(limit_value)d character (it has %(show_value)d), string 'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message.
substitute hint for self.hint.
from django.conf import settings into default name space.
try,
concatenate opts.concrete_fields, opts.virtual_fields and opts.many_to_many, for every f in the result,
try,
call the method _ExpatParser.reset with an argumen sefl.
call the function random.choice with an argument allowed_chars, for every i in range of integers from 0 to lengths, join the results into a string, return it.
call the method parser.skip_past with an argument string 'endcomment'.
from __future__ import unicode_literals into default name space.
nodelist_false is an instance of NodeList class.
if args and kwargs are both true,
call the function render_value_in_context with 2 arguments output and context, return the result.
call the function remove_tags with 2 arguments value and tags, return the result.
call the function six.text_type with an argument number, use the result as an argument for the call to the function mark_safe, return the result.
decorator stringfilter,
if t is not None,
from django.utils.deprecation import RemovedInNextVersionWarning into default name space.
from email.mime.base import MIMEBase into default name space.
get the value under the old_method_name key of the base.__dict__ dictionary, substitute it for old_method.
if s is an instance of an object Promise.
for every line in chunk_buffer,
delete the value under the key key of self._cache dictionary.
call the method writer.as_string, substitute the result for migration_string.
value under the field.attname key of the data dictionary is None.
append first element of e.args to not_found list.
from django.core.management.base import AppCommand into default name space.
define delete method with self class instance, key and version set to None, as arguments.
call the method cls.__new__ with 2 arguments: cls and unpacked list args.
call the method form.add_initial_prefix with an argument self.auto_id, substitute the result for self.html_initial_id.
convert e to a string, substitute it for error_text.
substitute value_not_found_exception for self.LibraryValueNotFoundException.
call the method self.error with 2 arguments: token and string "Empty block tag", return the result.
call the method router.db_for_read with self.cache_model_class as argument, substitute the result for db.
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries: 'alternate' for 'rel' and value under the 'link' key of self.feed dictionary for 'href'.
if self.decimal_places is not None,
return None.
call the self.style.HTTP_NOT_FOUND with an argument msg, substitute it for msg.
call the params.get function with string 'OPTIONS' and None as arguments, substitute the result for self._options.
call the method re.sub with 3 arguments: string '[^\w\s-]', empty string and value, strip the result of whitespaces from both ends, and convert it to lowercase, substitute the result for value.
define the function cache_clear.
if six.PY2 is true and path is not an instance of six.text_type type,
call the function get_supported_language_variant with an argument settings.LANGUAGE_CODE, return the result.
call the method self.stdout.write with an argument string "Installing %s fixture '%s' from %s.", substitute '%s' with ser_fmt, fixture_name and return value of the function humanize called with an argument fixture_dir.
evaluate the method s.decode with string 'utf-8' and errors as the arguments, on the result call the method encode with the arguments encoding and errors, return the result.
define the method __repr__ with an argument self.
pop the element form the path as substitute the result for ns.
join elements of c into a string, return it.
if UnicodeDecodeError exception is caught,
append self.msguniq_options to a list containing a string 'msguniq', append list containing potfile to the result, substitute it for args.
for every exclude in excludes,
if not_installed_models is true,
call the function walk_to_end with 2 arguments: ch and pattern_iter.
self.invoked_for_django is boolean False.
raise an TypeError with an argument s.
if value is not contained in result,
incomment is boolean False.
for every sql in index_sql,
if key is contained in dict_,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
mode is a string 'wb' is chunk is instance of the type bytes, otherwise mode is a string 'wt'.
define the function tz with an argument request.
call the function timedelta with an argument integer 0, return the result.
if length of parts is greater than integer 1 and last element of parts is contained in self.compression_formats,
for every f in fields,
raise the exception ValueError, with string as argument, "@python_2_unicode_compatible cannot be applied", "to %s because it doesn't define __str__().", replace %s with string value of klass.__name__.
for every header in headerlist,
if definition is true,
call the function safe_join with 2 arguments template_dir and template_name, yield the result.
from importlib import import_module into default name space.
call the encode function on the Header class instance, created with arguments val and encoding, substitute the result for val.
call the method lexer_class with an arguments template_string and origin, substitute the result for lexer.
get property attribute _get_height, and substitute it for width.
call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs, return it.
if val is an instance of bytes, return val, otherwise return result of the method val.encode called with an argument encoding.
convert timeout into an integer, return it.
if self doesnt have an attribute '_fqdn',
if length of compressed is lesser than length of data decremented by 1,
if html is true,
from datetime import datetime into default name space.
return obj.
define the method start_serialization with an argument self.
from __future__ import unicode_literals into default name space.
define function _i18n_cache_key_suffix, with request and cache_key as arguments.
from django.apps import apps into default name space.
if self.verbosity is greater or equal to integer 2, call the self.stdout.write method with string "
derive the class InterBoundaryIter from the six.Iterator base class.
get the value under the 'keep_pot' key of the options dictionary, substitute it for self.keep_pot.
import module django.
if ValueError exception is caught.
do nothing.
define the method streaming_content with 2 arguments: self and value.
if not,
return nothing.
call the method logger.removeHandler with an argument h.
define the method has_leading_dir with 2 arguments self and paths.
return None.
define the function media_property with an argument cls.
substitute self.to_field_name, if exists, for key, if not substitute string 'pk' for key.
call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
raise an ValueError with an argument string "Could not find common ancestor of %s", where '%s' is replaced with migration_names.
truncate first size number of elements of self.buffer.
for every app_config in return value of the method apps.get_app_configs,
self._num_pages and self._count are None.
raise an CommandError with an argument string "Problem installing fixture '%s': %s is not a known serialization format.", replace '%s' with: elements of last element of parts joined into a string and last element of parts.
substitute str for string_types.
register.tag decorator,
call the method path_rest.replace with arguments base_name and name, substitute the result for relative_dir.
get the value under the e.code key of the self.error_messages dictionary, substitute the result for e.message.
define the method add_prefix with an argument self.
current_len is equal to integer 0.
return context_extras.
define the method __init__ with 3 arguments: self, template_string and origin.
call the itertools.count function with argument integer 1, substitute the result for count.
confirm is a string 'yes'.
join 'conf' and 'locale' into a file path, use it as an argument for the call the method os.path.abspath, put the results into a list, substitute self.locale_paths for it.
if self.fk.rel.field_name is not equal to self.fk.rel.to._meta.pk.name,
do nothing.
if the value under the 'bindAddress' key of the wsgi_opts dictionary is not None, set daemonize to boolean True, if not, set it to boolean False.
call the BaseConverter function with BASE16_ALPHABET as argument, store the result in base16.
link is a list with 4 elements: last, root, key and result.
skip this loop iteration.
yield choice.
define the method is_multipart with an argument self.
call the method six.iteritems with an argument kwarg, convert the result into a list, substitute first element of the result for param and value.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid time.' for 'invalid'.
define the method values with an argument self.
derive class Module_six_moves_urllib_error from the _LazyModule base class.
call the method self._archive.extract with an argument to_path.
if 'require_all_fields' key of the kwargs dictionary exists remove it and substitute its value for self.require_all_fields, if not, self.require_all_fields is boolean True.
post is a string '<could not parse>'.
call the method parser.parse with an argument tuple with 3 elements strings 'elif', 'else' and 'endif', substitute the result for nodelist.
decrement number by one, multiply it with self.per_page, substitute the result for bottom.
func is an instance of TemplateLoader class, created with unpacked list args.
from django.core import signing into default name space.
substitute content_type_extra for self.content_type_extra.
if not,
if exception ValueError or TypeError is caught,
delete the first element of self.tokens.
define the method clear_checkbox_name with 2 arguments: self and name.
define the method to_python with arguments self and value.
if six.PY2,
add data to seen_data set.
__version__ is a string "0.1".
call the function force_text with an argument value, call the method translate on the result, with an argument _js_escapes, use the result as an argument for the call to the mark_safe function, return the result.
if cache is None,
from django.core.management.base import BaseCommand and CommandError into default name space.
define the method discard with 2 arguments: self and item.
import module sys.
derive the class SubWidget from the object base class.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
builtins is an dictionary with 3 initial entries: boolean True for 'True', boolean False for 'False' and None for 'None'.
from django.conf import settings into default name space.
ch is None.
substitute prefix for self.prefix.
for every date_check in all_date_checks,
define the method display with an argument self.
define the function get_declared_fields with 3 arguments: bases, attrs and with_base_fields set to boolean True.
substitute urlconf_name for _urlconfs.value.
if index is not an instance of six.integer_types or tuple type,
while i is lesser than length of subject and i-th element of subject is an empty space or tab character.
for every middleware_path in settings.MIDDLEWARE_CLASSES:
self.cc is an empty list.
define the method __init__ with 3 arguments: self, media set to None and unpacked dictionary kwargs.
for every label in app_labels,
define the method __init__ with argument self, server and params.
call the function localize with 2 arguments: value and use_l10n=context.use_l10n, substitute the result for value.
append other_dict to self.dicts.
from __future__ import unicode_literals into default name space.
use global variable _default.
from pprint import pformat into default name space.
ignore is a lambda function with pattern as an argument, return value is the return value of the function fnmatch.fnmatchcase, called with arguments: filename and pattern.
loader is instance of MigrationLoader initialized with connection as an argument.
define the method errors with an argument self.
call the method re.match with 2 arguments: naiveip_re and value under the 'addrport' key of the options dictionary, substitute the result for m.
call the mail.attach_alternative method with html_message and string 'text/html' as arguments.
if takes_context is true,
return property object with _media as getter function.
define the method update with 2 arguments: self and dict_.
if plen is lesser than difference of alen and dlen, or if plen is greater than alen,
call the function factory with an argument unpacked dictionary kwargs, substitute the result for result.
define the method __setitem__ with 3 arguments: self, key and value.
call the function token.split_contents, substitute the result without the first element for bits.
return tuple, consisting of first element of t converted to lowercase and second element of t.
define the method handle_uncaught_exception with self class instance, request, resolver and exec_info as arguments.
e.args is a tuple, containing 1 element: string "Problem installing fixtures: %s", where '%s' is replaced with e.
return current.
return lang_code.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
try,
if ns_pattern is true,
define the function request with an argument request.
if output is true,
from django.utils.dates import MONTHS, MONTHS_3, MONTHS_ALT, MONTHS_AP, WEEKDAYS and WEEKDAYS_ABBR into default name space.
call the method clean with an argument data from the base class of the class URLField, return the result.
sum trail and closing, substitute the result for lead.
call the method connection.cursor, substitute the result for cursor.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
buffer_types is a tuple with 3 elements: bytes, bytearray and memoryview.
derive the class DebugParser from the Parser base class.
if field.rel.to._default_manager has an attribute 'get_by_natural_key',
from django.utils.text import get_text_list into default name space.
define the method _read_limited with self class instance and size set to None as arguments.
raise an KeyError with an argument string 'Unknown media type "%s"', where '%s' is replaced with name.
substitute timezone for _active.value.
if call to the function response.has_header with argument 'Vary' returns boolean True,
if value is not an instance of list type,
append string '.moves' to __name__, use it as an argument to instantiate _MovedItems class, assign it to moves, and to value under the '.moves' appended to __name__ key of the sys.modules dictionary.
call the function ugettext with '0 minutes' as argument, use the result as the argument for the call to the avoid_wrapping function, return the result.
call the signed_value.rsplit method with arguments self.sep and integer 1, substitute the result for value and sig, respectively.
if alias is not contained in setting.CACHES,
for every chunk in content.chunks function return value,
extend comment_notes list with notes.
yield node.
define the method __getattr__ with 2 arguments: self and attr set to None.
append f.name to exclude.
call the method match.group with an argument integer 0, return the result.
level is an integer 0.
call the method filename.encode with an argument string 'ascii'
call the method self._create_mime_attachment with unpacked list alternative as an argument, use the result as an argument for the call to the msg.attach method.
while length of digits is smaller than or equal to absolute value of exponent,
otherwise if o is an instance of datetime.time object,
call the method self.fields.items, for every name and field in the result,
_file is None.
with return value of the function io.open with fname and string 'rb' as arguments, named as f,
from django.core.serializers.python import Serializer as PythonSerializer into default name space.
if connection exists dont change it, if not call the get_connection function with username set to auth_user, password set to auth_password, fail_silently set to fail_silently as arguments, assign the result to connection.
get the value under the key key of the self.cookies dictionary, substitute boolean True for 'httponly' key of the returned dictionary.
return an empty dictionary.
define the method to_python with arguments self and value.
call the method m.end, slice list rest from previous result as starting index to the end, substitute the result for rest.
call the method block_context.push with 2 arguments: self.name and push.
call f.read function, use the result as the argument for zlib.decompress function call, call the pickle.loads function with the previous result as argument, return the result.
if ImportError exception is caught,
try,
if not,
for every path in collect,
return an empty string.
call the method self.open.
define the method dict with an argument self.
define the function localize with 2 arguments value and use_l10n set to None.
if not,
from django.utils.xmlutils import SimplerXMLGenerator into default name space.
call the self.stderr.write, with string "The po files under %s are in a seemingly not writable location. mo files will not be updated/created." as argument, with '%s' replaced by dirpath.
do nothing.
MONTHS is an dictionary with 12 entries: result of the call to the function _ with an argument string 'January' for 1, result of the call to the function _ with an argument string 'February' for 2, result of the call to the function _ with an argument string 'March' for 3, result of the call to the function _ with an argument string 'April' for 4, result of the call to the function _ with an argument string 'May' for 5, result of the call to the function _ with an argument string 'June' for 6, result of the call to the function _ with an argument string 'July' for 7, result of the call to the function _ with an argument string 'August' for 8, result of the call to the function _ with an argument string 'September' for 9, result of the call to the function _ with an argument string 'October' for 10, result of the call to the function _ with an argument string 'November' for 11, and result of the call to the function _ with an argument string 'December' for 12.
if data is true, substitute it for self.data, if not self.data is an empty dictionary.
call the function force_bytes with an argument password, substitute the result for password.
return self.file.size.
import module tarfile.
ipv4_address is a string "%d.%d.%d.%d" formated with first 2 elements of seventh element of hextets converted into hexadecimal number, second 2 elements of seventh element of hextets converted into hexadecimal number, first 2 elements of eight element of hextets converted into hexadecimal number, second 2 elements of eight element of hextets converted into hexadecimal number.
from django.utils.functional import cached_property into default name space.
target_app_labels_only is boolean True.
define the method is_valid with an argument self.
convert x into a string for every x in list of version elements up to the parts index, join the previous into a string separated by '.', assign the result to major.
define the method get with 3 arguments: self, key and default set to None.
call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS, and help set to string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.
if self.forms is true,
raise an base.DeserializationError exception with an argument string "<%s> node is missing the required '%s' attribute", where '%s' is replaced with node.nodeName and attr.
call the method self.data.weekday, increment the result by an integer 1, divide it with integer 7, return the reminder of the division.
if not,
if other_dict doesnt have an '__getitem__' attribute,
if node.must_be_first is true and nodelist is true,
description is a string "An instance of the '%s' class" with '%s' replaced by value of receiver.__class__.__name__.
if not,
get the value under the key 'DJANGO_COLORS' of os.environ dictionary, if key doesnt exists return empty string, assign the result to DJANGO_COLORS.
return value.
call the formataddr function with argument tuple containing 2 elements nm and addr.
default_error_messages is an dictionary with 2 entries: return value of the function _ called with an argument string, 'Enter a list of values.' for 'invalid' and return value of the function _ called with an argument string, 'Enter a complete value.' for 'incomplete'.
yield string "# This is an auto-generated Django model module." as the result.
try,
define the function m2m_convert with an argument n,
if self._dir file path does not exists,
from django.core.management.sql import custom_sql_for_model, emit_post_migrate_signal and emit_pre_migrate_signal into default name space.
if self.verbosity is greater or equal than integer 1,
call the method tf.format with an argument format_string, return the result.
call the __bool__ method with argument self, on the return value of the type function with argument self, return the result.
replace '%s' in string "processing locale %s\n" with locale, write it to self.stdout.
define the function urlunquote with an argument quoted_url.
if not,
derive the class BaseEmailBackend from the object base class.
raise an exception.
substitute '%s' in string "#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n" with self.domain, replace all the occurrences of previous string in msgs for an empty string, substitute the result for msgs.
define the method id_for_label with an argument self.
call the method logger.addHandler with an argument handler.
if TypeError or ValueError exceptions are caught,
call the cursor.execute method with statement as argument.
from __future__ import unicode_literals into default name space.
derive the class URLField from the base class CharField class.
define the method __init__ with 2 arguments: self and s.
return None.
for every key and value in items of other_dict dictionary,
define the method as_table with an argument self.
if self.first is true,
define the function gettext with an argument message.
sum m and class Media created with definition, return the result.
raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary, code set to an string 'invalid_choice' and dictionary params with an entry: val for 'value'.
from xml.sax.expatreader import ExpatParser as _ExpatParser into default name space.
zip elements of result and result_args into a list of tuples, for every item and args in the result,
get value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary, substitute it for block_context.
raise a SerializerDoesNotExist exception with an argument format.
call the method termios.tcgetattr with argument fd, substitute the result for attr_list.
call the method self.connection.ehlo.
if not,
break from the loop execution,
call the method self.add_prefix with an argument name, substitute the result for prefixed_name.
raise an ValidationError exception with an argument errors,
define the function to_current_timezone with an argument value.
append a tuple with 2 arguments: filter_func and args to filters.
return nothing.
call the method models.signals.post_syncdb.send with 6 arguments: sender set to app_config.models_module,
from django.db import connections and transaction into default name space.
replace '%s' in sting '%s-%s' with self.prefix and index, return the result.
call the method apps.get_model with exclude as an argument, substitute it for model.
for every file in value under the 'files' key of the options dictionary.
append data to self.children.
from django.apps import apps into default name space.
if self._cull_frequency equals to integer 0.
define the method closed with self as the argument.
call the method writer.as_string, append newline to the result, write it to self.stdout.
data_set is set created out of return values of the function force_text called with an argument value, for every value in data.
def the method get_signed_cookie with 5 arguments: self, key, default set to RAISE_ERROR, salt as an empty string,
define the function get_key_func with argument key_func.
yield d.
define the method __next__ with an argument self.
call the method context.new with an argument values, use it as an argument for the call to the method template.render, return the result.
if self.verbosity is greater than integer 0,
_version is a string "0.91".
strfunc is an instance of a class Name, created with 2 arguments: string "__str__" and prefix as unifunc.prefix.
define the function dec with an argument func.
substitutions is a dictionary with 4 initial entries: self.initial_text for 'initial_text', self.input_text for 'input_text', an empty string for 'clear_template' and self.clear_checkbox_label for 'clear_checkbox_label'.
format settings.TEMPLATE_STRING_IF_INVALID with self.var, return the result.
try,
skip this loop iteration.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
define the function salted_hmac with 3 arguments: key_salt, value and secret set to None.
define the function get_fixed_timezone with an argument offset.
otherwise if intrans is true,
define the function custom_sql_for_model with 3 arguments: app_config, style and connection.
compile the handle.read in mode 'exec' source is read from file pythonrc, execute the compiled script with imported_objects variables.
decorator stringfilter,
substitute root for value under the NEXT key of the link dictionary.
write the chunk to the file _file.
replace every occurrence of '"' in s with '&quot;'.
apply operator.eq function to elements of level iterable, until level is reduced to a single value, if the result is true,
define the function conditional_escape with an argument text.
replace '%s' in string 'django_%s_template_' with self.app_or_project.
try,
define the method load_template with 3 arguments: self, template_name and template_dirs set to None.
call the method self._load_post_and_files.
if settings.DEBUG is True,
define the method _set with 4 arguments, self class instance, key, value and timeout set to DEFAULT_TIMEOUT.
from django.utils.timezone import is_aware and utc into default name space.
define the method total_error_count with an argument self.
return boolean False.
call the method parser.add_argument with 2 arguments: string 'app_label', and help is a string 'App label of the application to squash migrations for.'.
return token.
if record.exc_info is true,
return the length of self.children.
substitute label_suffix for self.label_suffix.
if autoescape is true,
call the method n.getElementsByTagName with string 'natural' as argument, substitute result for keys.
if value under the 'author_name' key of the item dictionary is not None,
substitute result for value under the id of self key of memo dictionary.
call the method deactivate.
substitute target_var for self.target_var.
update self.feed dictionary with kwargs.
evaluate the boolean expression, if first three characters of sample equals to string of bytes '\xef\xbb\xbf\', of if sample starts with codecs.BOM_UTF16_LE or sample starts with codecs.BOM_UTF16_BE, return the evaluated boolean expression.
call the function ugettext with an argument string "Please correct the duplicate data for %(field)s, which must be unique.", where '%(field)s' is replaced with return value of the get_text_list function called with 2 arguments: unique_check and return value of the function six.text_type called with return value of the function _ with an argument string 'and', return the result.
bad_app_labels is an empty set.
return default.
from django.core import serializers into default name space.
from django.core.servers.fastcgi import runfastcgi into default namespace.
substitute is_reversed for self.is_reversed.
try,
first element of url_fields is string 'http'.
call the function self._key_to_file with key and version as arguments, substitute it for fname.
substitute max_width for self.max_width.
substitute first element of s for quote.
_meta is class Options class instance initialized with table argument.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
if not,
for every cat in value under the 'categories' key of the self.feed dictionary.
call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.
return an instance of Context class, created with an argument context.
substitute i-th element of self.data for error.
return an empty string.
return the value under the language_code key of the self._app_dict dictionary.
derive the class DeserializedObject from the object base class.
call the method self.has_leading_dir with an argument namelist, substitute the result for leading.
call the method self.can_write.release.
substitute chr for unichr.
if result is not root,
call the method self.view_name.resolve with an argument context, substitute the result for view_name.
if self.asvar is None,
import module stat.
substitute content for self.content.
substitute complain for append.
import module warnings.
replace '%s' in string "%s; charset=%s" with settings.DEFAULT_CONTENT_TYPE and self._charset, substitute it for content_type.
append string "Field renamed because it contained more than one '_' in a row." to field_notes.
define function fix_location_header with request and response as arguments.
if '_' is contained in locale,
raise an exception,
substitute pubid for self.pubid.
outut is an empty list.
if initial is None,
try,
call the method wm.add_watch with path and mask as arguments.
if not,
append string "System check identified %s (%s silenced)." to msg, replace first '%s' for: string "no issues", if visible_issue_count equals to integer 0, or for string "1 issue" if visible_issue_count equals integer 1, or for string "%s issues", with '%s' replaced by visible_issue_count, subtract visible_issue_count from length of all_issues, and substitute it for second '%s' in the stirting string.
define the method content with 2 arguments: self and value.
try,
if filename path doesnt exists,
from django.utils.translation import templatize into default namespace.
raise an ValueError exception with an argument string "make_aware expects a naive datetime, got %s", where '%s' is replaced with value.
self.dict is an instance of OrderedDict class, created with arguments: tuples with 2 argument x and None, for every x in iterables, if iterable is true, otherwise use an empty list as an argument.
call the getvalue method of the base class of the PythonSerializer class, return the result.
substitute key for result.key.
raise CommandError exception with "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)", with '%s' substituted for app_label, as arguments.
if headers exists substitute it for self.extra_headers, if not extra_headers is an empty dictionary.
call the os.utime function with arguments dst and tuple containing 2 elements: st.st_atime and st.st_mtime.
substitute second element of bits for tag.
if instance is None,
if not,
call the method self.compression_formats.keys, convert it to list, substitute it for cmp_fmts if cmp_fmt is None, otherwise cmp_fmts is a list containing cmp_fmt.
import module datetime.
for every node_app and node_name in migration.branch,
return saved_instances.
call the function warnings.warn with 3 arguments: string 'Reversing by dotted path is deprecated (%s).', with '%s' replaced with original_lookup, RemovedInDjango20Warning and stacklevel set to integer 3.
derive the class RadioSelect from the RendererMixin and Select base classes.
substitute self.subject for subject.
property decorator,
try,
return value.
substitute (i+1)-th element of list_ for next_item.
define the method __iter__ with an argument self.
define the method as_widget with 4 arguments: self, widget set to None, attrs set to None, only_initial set to boolean False.
try,
call the method unicodedata.normalize with 2 arguments: string 'NFKD' and value, encode the result with 2 arguments: string 'ascii', and string 'ignore', call the method decode on the result with an argument string 'ascii', substitute the result for value.
get the value under the 'error_messages' key of the kwargs dictionary, if it exists substitute it for error_messages, if not, error_messages is an empty dictionary.
append value to self.dicts list.
if attr equals any of the strings "__file__", "__name__" or "__path__" and self.mod is not contained in sys.modules,
if prefix is true, substitute it for self.prefix, otherwise call the method self.get_default_prefix, and substitute the result for self.prefix.
substitute form.cleaned_data for cleaned_data.
define the method __str__ with an argument self.
define the method has_header with 2 arguments: self and header.
sum media and w.media, substitute the result for media.
call the method self.set_charset with utf8_charset as an argument.
substitute args for self.args.
return an instance of metaclass class, created with 3 arguments: string 'temporary_class', None and an empty dictionary.
if TypeError exception is caught,
call the method self.total_form_count, for every i in sequence of integers, from 0 to the previous result,
if ignore is true and field_name is not contained in model_fields,
call the method __init__ from the base class of the class ModelMultipleChoiceField, with 10 arguments: queryset, None, cache_choices, required, widget, label, initial, help_text, unpacked list args and unpacked dictionary kwargs.
define the method __getitem__ with 2 arguments: self and name.
return data.
msg is a string ""The included urlconf '{name}' does not appear to have any patterns in it. If you see valid patterns in the file then the issue is probably caused by a circular import."
try,
join p and cmd into a file path, substitute it for f.
extend final_output with alter_sql.
self._css is an empty dictionary.
try,
if AttributeError exception is caught,
call the method re.search with 2 arguments: raw string '^[_a-zA-Z]' and name, if it evaluates to false,
raise an TemplateSyntaxError exception with an argument string "'%s' received too many positional arguments", where '%s' is replaced with name.
while t is greater than integer 0,
get the value under the 'id' key of the self.attrs dictionary, return it, if the key doesnt exists return an empty string.
call the __init__ method with 3 arguments: INFO, unpacked list args and unpacked dictionary kwargs from the base class of Info.
endless loop,
define the function firstof with 2 arguments: parser and token.
if IndexError exception is caught,
define the method __html__ with an argument self.
self.regexes is an empty dictionary.
define the method has_key with self class instance, key and version defaulting to None as arguments.
return the length of self.forms.
input_type is a string 'email'.
if m is None,
derive the class BaseModelFormSet from the BaseFormSet base class.
call the function get_language, split the result by '-', substitute the first element of the result for base_lang.
if format is not contained in return value of the method serializers.get_public_serializer_formats,
substitute self for value under the 'block' key of context dictionary.
if key is not contained in self,
derive the class override from the object base class.
call the method close on self.
call the method parser.add_argument with 4 arguments: string '--format', default set to string 'json', dest set to 'format' and help is a string 'Specifies the output serialization format for fixtures.'.
raise an ValueError exception with an argument string 'Unable to add filter %r: %s' formated with f and e.
call the function force_text with an argument bf_errors, format the error_row string with the result, append it to the output.
substitute resolver_match for request.resolver_match.
define the function ifnotequal with 2 arguments: parser and token.
search anywhere in the rawdata string starting from the (i+1)-th element for the _html_parser.endendeag, replace the result for match.
call the function middleware_class with 2 arguments: unpacked list m_args and unpacked dictionary m_kwargs, substitute the middleware.
match regex date_re with value, substitute the result for match.
try,
derive the class IfNode from Node base class.
if field.rel.through._meta.auto_created is true,
substitute self.files for value under the 'files' key of the defaults dictionary.
call the function force_text, with the function get_current_timezone_name and errors set to string 'ignore' as arguments, replace the result for tz_name.
define the method __init__ with 3 arguments: self, value and text.
define the method copy with an argument self.
call the method self.common_logger_config with 3 arguments: root, config and incremental.
raise an IOError exception with argument string "%s exists and is not a directory.", where '%s' is replaced by directory.
return num_sent.
help is a tuple containing string "Creates a Django project directory structure for the given " "project name in the current directory or optionally in the given directory.".
for every i and widget in enumerated iterable self.widgets,
if not,
define the method __init__ with 5 arguments: self, data, encoder set to DjangoJSONEncoder, safe set to boolean True, and unpacked dictionary kwargs.
if param is contained in unhandled_params,
call the method self.configurator.convert with an argument value.
return an empty list.
meta is an instance of a class named 'Meta', derived from the object base class, without any fields.
raise an ValueError exception with an argument string 'Not a valid Python identifier: %r' formated with s.
if not,
set real_name attribute of the self object to value of real_name attribute of trans object.
if KeyError or AttributeError, renamed to exc, exceptions are caught,
call the function sql_custom with app_config, self.style and connection as the arguments, substitute the result for statements.
if path_to_remove is file,
define the method render with 2 arguments: self and context.
define the method __init__ with arguments: self and options set to None.
call the self.style.HTTP_INFO with an argument msg, substitute it for msg.
if not,
requires_system_checks is boolean False.
substitute self.rawdata for rawdata.
if _supported is None,
substitute a tuple with 2 elements: template and origin, for self.find_template_cache dictionary value under the key key.
substitute self.queryset for qs.
return an empty string.
if exp is None or exp is greater than the return value of the call to the function time.time,
substitute value under the 'verbosity' key of the options dictionary for verbosity.
from django.utils._os import upath into default name space.
call the function ugettext with an argument string "%s KB", substitute '%s' with the result of the call to the function, filesize_number_format with result of division of bytes by KB as an argument, substitute the result for value.
raise an ValueError exception with an argument string "Negative base36 conversion input.".
if ValueError exception is caught,
call the exp.replace with microsecond set to integer 0, substitute the result for exp.
call the function get_mod_func with an argument lookup_view, store the result in mod_name and func_name, respectively.
define the method chunks with arguments self ad chunk_size set to None.
if error is not an instance of ValidationError,
try,
get the value under the self.name key of the self.form.initial dictionary, if it exists, substitute it for data, if not, substitute self.field.initial for data.
if message is an instance of SafeData,
derive class Module_six_moves_urllib_robotparser from the _LazyModule base class.
return nothing.
if self._delegate_bytes and six.PY2 are both true,
call the function socket.getfqdn, substitute the result for self._fqdn.
use global variable _translations.
slice the list from the i-th to the endpos-th element, substitute it for self.__starttag_text.
derive the class FilterExpression form the base class object.
define method _get_height with self class instance as the argument.
nm and addr are addr.
return an property object with getter function fget, setter function fset, destructor fdel and documentation string doc.
g is an instance of a class generator.Generator called with fp and mangle_from_ set to False.
decorator function register.filter with an argument is_safe set to boolean False.
from django.core.management.base import BaseCommand and CommandError into default name space.
increment Tok.num with an integer 1.
get the value under the 'boundary' key of the opts dictionary, substitute it for boundary.
call the function gettext with an argument message, use the result as an argument for the call to the force_text function, return the result.
decorator function register.filter with an argument is_safe set to boolean False.
return value.
return value.
raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' with key converted into a string.
substitute self.entity_decl for parser.EntityDeclHandler.
if six.PY3 is true,
for every attr in self.child_nodelists,
define the method start_index with an argument self.
call the method translation._catalog.copy, substitute the result for self._catalog.
from django.utils.text import unescape_entities into default name space.
yield self.
define the method H with an argument self.
if settings.DEBUG is True,
define the method _cache with argument self.
otherwise, if field.rel is true and field.rel is an instance of models.ManyToOneRel,
append t.contents to comment.
call the method m.group with an argument string 'hour', convert the result into a string, substitute it for hour.
if model is not contained in app_models for every model in return value of the connection.introspection.installed_models function return value, add model to a set, substitute the result for known_models.
if not,
return printable representation of self.value.
call the BaseConverter function with BASE36_ALPHABET as argument, store the result in base36.
return filename and display_url.
call method __init__ with argument params from the base class of the FileBaseCache.
raise an TemplateSyntaxError exception with an argument string '"filter %s" is not permitted.  Use the "autoescape" tag instead.', where '%s' is replaced with filter_name.
concatenate string 'templates/' and template_name, substitute the result for pkg_name.
close the file fd.
raise an CommandError with an argument string "%s. Are you sure your INSTALLED_APPS setting is correct?", with '%s' replaced by e.
call the method date.tzinfo.utcoffset with an argument date, substitute the result for offset.
self._is_rendered is boolean False.
call the function allow_lazy with 2 arguments: urlquote_plus and six.text_type, substitute the result for urlquote_plus.
_supported is an instance of OrderedDict class, created with an argument settings.LANGUAGES.
define the method __mod__ with 2 arguments: self and rhs.
if jan1_weekday is greater than integer 4,
substitute name for self.name.
call the function is_aware with an argument o, if it evaluates to true,
if nofollow is true nofollow_attr is a string ' rel="nofollow"', otherwise nofollow_attr is an empty string.
substitute self.widget if the widget is false, otherwise substitute widget for widget.
try,
if ImportError exception is caught,
self._read_started is boolean False.
import module time.
if field.widget.needs_multipart_form is true,
derive the class ChunkIter from the six.Iterator base class.
call the __init__ method from the base class of the class SimpleTemplateResponse, with 3 arguments: an empty string, content_type and status.
if email_messages is false,
define the method __delitem__ with 2 arguments: self and header.
from django.utils.module_loading import module_has_submodule into default name space.
if 'is_safe' attribute of func object exists and is true and obj is an instance of SafeData,
define the method __add__ with 2 arguments self and rhs.
define the method get_backend_timeout with self class instance and timeout set to DEFAULT_TIMEOUT as arguments,
regex is an empty string.
value_converters is a dictionary with 2 entries: 'ext_convert' for 'ext' and 'cfg_convert' for 'cfg'.
if not,
decorator register.filter.
call the method form._get_validation_exclusions, substitute the result for exclude.
substitute memoryview for memoryview.
derive the class DjangoSafeDumper from the SafeDumper base class.
return None.
call the function warnings.warn with an argument string "A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext.".
return boolean False.
define the function modelformset_factory with 18 arguments: model, form set to ModelForm, formfield_callback set to None,
set cache to the value of the dictionary caches under the key settings.CACHE_MIDDLEWARE_ALIAS.
call the urlsplit with an argument url, convert the result into a list and return it.
call the method self.make_key with key and version set to version as arguments, substitute it for key.
call the __init__ method from the base class of the class ValidationError with arguments message, code and params.
define the function template_localtime with 2 arguments: value and use_tz set to None.
if level is not an integer raise an error with message string "The first argument should be level.".
if not,
import module os.
output is an empty list.
raise an TemplateDoesNotExist exception with an argument, elements of not_found joined into a string, separated with ', '
call the self.load_middleware method.
call the method self.run_validators with an argument out.
call the force_text function with an argument value, return the result.
substitute old_attr for new_attr.
assign the value of the dictionary color_settings under the key role to format, if key doesnt exist assign the empty dictionary.
if value is not contained in result,
return self._client.
remove entry under 'render' key of the kwargs dictionary and substitute it for renderer, if the key doesnt exists, renderer is None.
shown is an empty set.
substitute second element of bits without the first and last element for format_string.
allowed_schemes is an list containing 3 elements: strings 'http', 'https' and 'ftp'.
return msg_count.
do nothing.
substitute complain for reverse.
substitute SelectMultiple for widget.
if idstring is None,
split lang_code by character '-', substitute the first element of the result for generic_lang_code.
derive the class CsrfTokenNode from Node base class.
substitute i for p.
if fields is not None and f.name is not contained in fields,
call the method self._lib.Client with self._servers and pickleProtocol set to pickle.HIGHEST_PROTOCOL as arguments, substitute the result for self._client.
get the value under the root key of the convert dictionary, for every opname and opfunc in the result,
call the method self._setup.
raise an CommandError exception with an argument string 'You must set settings.ALLOWED_HOSTS if DEBUG is False.'.
substitute context for self.context.
return an empty string.
substitute result for self.find_template_cache dictionary value under the key key.
substitute last element of bits for taglib.
if not,
crate a dictionary with app mapping and from the class Migration, created with arguments: string 'custom' and app, for every app in app_labels.
format string '%+03d%02d' with hour and minute, append it to time_str, return the result.
return chunk.
call the executor.migration_plan method with targets as the argument, substitute the result for plan.
from django.utils.six.moves import html_entities into default name space.
if instance is None,
substitute empty bytes string for self.buffer.
call the method node.get_nodes_by_type with an argument nodetype, extend nodes with it.
raise an KeyError with an argument "Unknown language code %s.", where '%s' is replaced with lang_code.
sort all_files and return it.
define the function add_library with 2 arguments: self and lib.
raise an ValueError exception.
from django.utils.six.moves.urllib.parse import quote, quote_plus, unquote, unquote_plus, urlparse, urlencode as original_urlencode.
call the method self.configure_logger with 3 arguments: name, value under name key of loggers dictionary and boolean True.
return self._urlconf_module.
return a string "%s.%s" formated with first dot package elements and name.
define the method push with 3 arguments: self, name and block.
try,
substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout.
join elements of output into a string, separated with newline character, use it as an argument for the call to the mark_safe function, return the result.
instantiate a class Group with 2 arguments: string "%%(%s)s" formated with param, and param, append it to result.
self.month_none_value is a tuple containing 2 elements: integer 0 and second element of empty_label.
if not,
import module itertools.
call the method self.field.prepare_value with an argument data, return the result.
call the json.dump function with 4 arguments: return value of the method self.get_dump_object called with an argument obj,  self.stream, cls set to DjangoJSONEncoder and unpacked dictionary self.json_kwargs.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
if value is None,
return next element of the iterable it.
define the method incr with self class instance, key, delta set to integer 1 and version set to None, as arguments.
convert col_name to lowercase, substitute the result for new_name.
remove key element from self.keyOrder dictionary.
if key is contained in dict_,
if not,
derive the class DTDForbidden from the DefusedXmlException base class.
define the method __contains__ with self and key as arguments.
try,
return value.
define the method __getitem__ with arguments self and name.
if content has an attribute 'temporary_file_path',
call the method test_runner.run_tests with an argument test_labels, substitute it for failures.
try,
is self.data has an attribute 'tzinfo' and self.data.tzinfo is true,
if not,
decompress is boolean True.
for every f in opts.fields,
got_request_exception is a instance of a Signal class, created with an argument providing_args as the list containing string 'request'.
derive the class EmailBackend from the BaseEmailBackend base class.
call the method self.as_hidden with an argument only_initial set to boolean True, append the result to the result of the method, self.as_widget, return the resulting string.
call the method field_stream.read with an argument: over_bytes subtracted from integer 4, substitute the result for over_chunk.
call the function unicodedata.combining with an argument char, if it evaluates to true,
from django.utils import six and timezone into default name space.
mem_args is a list containing of first num_args elements of args list.
replace all the strings '\\' with '/' in the string name, use it as an argument for the call to the force_text function, return the result.
substitute apps for the value under language_code key of the self._app_dict dictionary.
return integer 1.
append digit to int_part_gd.
return a string '<%s token: "%s...">' with '%s', replace '%s' with token_name and 20 self.contents elements with every newline deleted.
call the function get_supported_language_variant with 2 arguments: lang_code and strict set to strict, return the result.
write a new line to the self.stream file stream.
substitute '%s\ in string "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'", with name_str, use it as an argument to throw an CommandError exception.
if token.contents is false,
if AttributeError exception is caught,
derive the class HttpResponseNotFound from the HttpResponse base class.
define the method __next__ with an argument self.
if app_name is an instance of BaseCommand,
define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_foreign_keys, if the key doesnt exists substitute self.use_natural_keys for self.use_natural_foreign_keys.
decorator stringfilter,
raise an TemplateSyntaxError exception with an argument string "Variables and attributes may not begin with underscores: '%s'", where '%s' is replaced with var.
try,
return result.
if value equals k2 or text_value equals return value of the function force_text called with argument k2,
raise an SyntaxError with an argument string "Translation blocks must not include other block tags: %s (%sline %d)", formated with t.contents, filemsg and t.lineno.
substitute message for self.message.
call the function popen_wrapper with argument args, assign the result to msgs, errors and status.
from django.utils.safestring import SafeData and mark_safe into default name space.
return an instance of FirstOfNode class, created with an argument, result of the method parser.compile_filter called with bit, for every bit in bits.
call the method bytes_to_text with 2 arguments: value and self.encoding, substitute the result for value.
if value is None,
convert first element of answer to lowercase and substitute it for answer.
define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
try,
replace '%s' in a string "Created new squashed migration %s" with writer.path, use it as an argument for the call to the method, self.style.MIGRATE_HEADING, write the result to self.stdout.
call the function handle_default_options with an argument options.
call the function to_current_timezone with an argument value, substitute the result for value.
substitute current_app for self._current_app.
define the method handle_m2m_field with self, obj and field arguments.
raise AttributeError exception,
define the method __init__ with 5 arguments: self, regex, callback, default_args set to None and name set to None.
raise an ValidationError exception with an argument errors.
fks_to_parent is a list containing f for every f in opts.fields, only if f is an instance of ForeignKey, and, if f.rel.toequals parent_model or f.rel.to is contained in result of the call to the method parent_model._meta.get_parent_list.
replace '%s' in string "Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem.", with new_path and self.style.NOTICE, respectively, write it to self.stderr stream.
call the function six.reraise with 3 arguments: class ValidationError, class ValidationError, created with 3 arguments: message, code as a string 'ambiguous_timezone' and params as params, and third element of the return value of the function sys.exc_info.
if not,
kwargs is an empty dictionary.
self._deleted_form_indexes is an empty list.
if recursive is true,
call the emit_pre_migrate_signal with create_models, self.verbosity, self.interactive. connection.alias as arguments.
if not,
define the function _long_to_bin with 2 arguments: x and hex_format_string.
STATUS_OK is integer 0.
if self.timezone is false,
if not,
call the method self.model._default_manager.get_queryset with an argument qs.
try,
if self.required is true and value is false,
do nothing.
root dictionary values under the KEY and RESULT keys are both None.
if self.field.cache_choices is true,
import StringIO.
define the method clear with argument self.
define the function number_format with 4 arguments: value, decimal_pos set to None, use_l10n set to None,
if AttributeError exception is raised,
if self.selected_fields is None or last three elements of field.attname are contained in self.selected_fields:
if self._wrapped is empty,
decorator stringfilter,
if not,
if length of tablenames is greater than zero,
if ValidationError, renamed to e, is caught,
do nothing.
from ctypes import sizeof, c_ulong, c_void_p, c_int64, Structure, Union, POINTER, windll and byref into default name space.
get 'value' attribute of the _active object
derive the class NoReverseMatch with Exception as base class.
if IOError or OSError exceptions occurred,
print message to the standard output.
from django.conf import settings into default namespace.
substitute self.deleted_forms for forms_to_delete.
if self.empty_permitted is true and call to the method self.has_changed evaluates to false,
for every basedir in basedirs,
get the value under the 'primary_keys' key of the options dictionary, substitute the result for pks.
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
if not,
call the function force_text with an argument bf.label, use the result as an argument for the call to the function conditional_escape, substitute the result label.
unpack the manifest.values function return value and feed it to the itertools.chain function, create_models is a set containing chanied list.
post is a string '<could not parse>'.
if OSError renamed to e, exception is caught,
define the method __iter__ with an argument self.
if app_name is not contained in loader.migrated_apps,
define the method __repr__ with an argument self.
call the method cursor.execute with string "UPDATE %s SET value = %%s, expires = %%s WHERE cache_key = %%s" as argument, substitute the '%s' with table and 3 elements of a list: b64encoded, exp and key, respectively.
call the method self.registered_checks.append with argument check.
self.stderr is an instance of an OutputWrapper object, created with 2 arguments: value under the 'stderr' key of the options dictionary, if it doesnt exists use the sys.stderr instead, and self.style.ERROR.
if not,
if filename is empty,
for every node in self.nodelist_loop,
define the method save_new with 3 arguments: self, form and commit set to boolean True.
define the method handle_merge with arguments self, loader and conflicts.
return boolean True.
if level is not None,
sum results of method self.save_existing_objects called with an argument commit and of method self.save_new_objects, called with an argument commit, return the result.
define the function truncatewords with 2 arguments value and arg.
derive the class TypedChoiceField from the base class ChoiceField class.
otherwise if action equals to string 'apply_success',
raise an ValueError exception with an argument string "Don't mix *args and **kwargs in call to reverse()!".
append e to infos list for every e in all_issues, if checks.INFO is lesser or equal to e.level, and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false.
if not,
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with an entry: cat for 'term'.
call the method handler.addQuickElement with 2 arguments: string 'category' and cat.
define the method get_response, with self class instance and request as the arguments.
derive the class NullDevice.
from django.utils.encoding import force_bytes and python_2_unicode_compatible into default name space.
if not,
append '/' to prefix.
if pks is true,
substitute serialize_headers for __bytes__.
call the method parser.add_option with 2 arguments: string '--pythonpath' and help set to a string 'A directory to add to the Python  path, e.g. "/home/djangoprojects/myproject".'
raise an CommandError with argument msg,
create the object WSGIServer with 2 arguments: get_internal_wsgi_application return value and unpacked dictionary wsgi_opts, call the method run on it.
define the method find_template with 3 arguments: self, name, dirs set to None.
if not,
call the method match.end, substitute the result for upto.
define the function get_template with 2: template_name and dirs set to None.
if self.data.day equals integer 11, 12 or 13,
call the function file_move_safe with content.temporary_file_path function result and full_path.
call the self._cull method.
define the method simple_tag with 4 arguments: self, func and None, takes_context and None and name set to None.
_encoding is None.
skip this loop iteration,
define the method __init__ with arguments: self class instance and argv set to None.
call the method self.template.resolve with an argument context, substitute the result for template.
call the function self.coerce with an argument value, substitute it for value.
if basedir is not a directory,
define the method dst with 2 arguments self and dt.
call the function middleware_method with request and response as the arguments, substitute the result for response.
from django.core.mail.backends.console import EmailBackend as ConsoleEmailBackend into default name space.
if email_messages is false,
define the method get_date_error_message with 2 arguments: self and date_check.
define the method combine with 3 arguments: cls, date and time.
raise an ValueError with an argument string "'%s.%s' has no field named '%s'.", where '%s' is replaced with, model._meta.app_label, model._meta.object_name, fk_name, respectively.
return path.
derive the class Operator from the base class TokenBase.
derive the class TemplateLiteral from Literal base class.
return an instance of a RegroupNode class, created with 3 arguments target, expression and var_name.
call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class TypedChoiceField.
call the function get_urlconf with an argument urlconf.
if field is an instance of models.TimeField and filed.name attribute of obj is not None,
if field.help_text is true, substitute field.help_text for self.help_text, if not self.help_text is an empty string.
raise an SystemRestart exception,
ns_resolver is class instance of a class RegexURLResolver, created with 2 arguments: ns_pattern and resolver.url_patterns.
if self.allow_multiple_selected is false,
evaluate the method self._cache.incr with key and negative delta as arguments, return the result.
call the method apps.setdefault with 2 arguments: pattern and an empty list, append to the resulting object pattern.namespace.
define the method strftime with 2 arguments: self and fmt.
set move.name attribute of the _MovedItems to move.
from django.forms.forms import everything into default name space.
extend self.program list with self.program_options, string '-o', return value of the npath function with string '.mo' appended to the base_path as argument, and return value of the npath function with string '.po' appended to the base_path as argument, substitute it for args.
contains_nontext is boolean False.
get the value under the 'interactive' key of the options dictionary, substitute it for self.interactive.
call the function allow_lazy with 2 arguments: urlize, six.text_type, substitute the result for urlize.
substitute _globs_ with an argument _locs_.
if not callback,
lines is an empty list.
ISO_8859_1 is a string 'iso-8859-1', UTF_8 is a string 'utf-8'.
PATTERN is a string  "classdef< 'class' any+ ':'suite< any*funcdef< 'def' unifunc='__unicode__'parameters< '(' NAME ')' > any+ >any* > >".
zip val1 and va2 into list of tuples, for every x and y in the result,
convert the value under the 'umask' key of options dictionary into an integer of base 8, substitute it for value under the 'umask' key of daemon_kwargs dictionary.
import module json.
otherwise if ns is not contained in app_list,
import module warnings.
import module random.
split header string at string '\r\n', for every line in result,
return result.
if elt is an instance of Choice or NonCapture classes,
define the method getvalue with an argument self.
contextlib.contextmanager decorator,
define the method __init__ with 3 arguments: self, attrs set to None and format is None.
if text has an '__html__' attribute,
call the function warnings.warn with 3 arguments: string "memoize wrapper is deprecated and will be removed in Django 1.9. Use django.utils.lru_cache instead.", RemovedInDjango19Warning and stacklevel set to integer 2.
return WSGIHandler object.
concatenate opts.concrete_fields, sortable_virtual_fields and opts.many_to_many, for every f in sorted result,
if ImportError, renamed to e, is caught,
if NotImplementedError exception is caught,
join into a file path: django_dir, 'conf', 'locale', locale, 'LC_MESSAGES' and string '.po' appended to domain, substitute the result for django_po.
if args is None,
call the BaseCache initialization method __init__ with 3 arguments self, list of arguments args and dictionary of arguments kwargs.
self.tags is an empty dictionary.
calculate negative length of s, by modulus integer 4, use the result as the number of '=' characters to be stored in pad.
call the function include_is_allowed with an argument filepath, if it evaluates to false,
f _serializers is false,
comment_notes is an empty list.
RAISE_ERROR is an instance of object class.
set attr.name attribute of the Module_six_moves_urllib_error object to attr.
if self object has an attribute '_client',
replace '%s' in string "Running post-migrate handlers for application %s" with app_config.label, print it to the standard output.
substitute name for self.name.
evaluate the method self._has_expired with argument key, if it as False,
raise an CommandError with an argument string "couldn't extract file %s to %s: %s", where '%s' is replaced with filename, tempdir and e.
import module re.
if os.path.exists function with argument name, evaluates to boolean True,
call the function new_method_proxy with an argument operator.ne, substitute the result for __ne__.
define the method strptime with arguments self, value and format.
numbers is a list containing return value of the MigrationAutodetector.parse_number method called with an argument migration.name, for every migration in merge_migrations.
if count of occurrence of '.' in ip_str is not equal to integer 3,
call the function six.reraise with 3 arguments: ValidationError, ValidationError created with 2 arguments: value under the 'invalid_image' key of the self.error_messages dictionary and code set to a string 'invalid_image', and third element of the return value of the function sys.exc_info.
define the method super with an argument self.
call the traceback.print_exc method.
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
if i-th element of subject is '"' character or "'" character,
return settings.DEBUG.
call the method parser.add_argument with arguments: string 'args' and nargs set to '*'.
put elements of ignore_patterns into a set, substitute the length of it for self.ignore_patterns.
derive the class SsiNode from Node base class.
substitute second element for bits for block_name.
call the function logging_config_func with an argument logging_settings.
if cls has an attribute k,
self.__name is a string "%s%02d%02d", replace '%s' with sign, '%02d' is replaced with absolute value of offset divided by 60, and placed into 2 character spaces, and '%02d' is replaced with reminder of the division of absolute offset by integer 60, and placed into 2 character spaces.
if 'locale' is a directory,
call the executor.loader.detect_conflicts, substitute the result fr conflicts.
from django.utils.encoding import force_text and python_2_unicode_compatible into default name space.
if not,
substitute deprecation_warning for self.deprecation_warning.
decorator deconstructible,
with call to the function transaction.atomic with using set to connection.alias as argument,
if bytes is false,
define the function is_writable with path as argument,
if iso_input is not contained in val,
define the method with 3 arguments: self, app_config  set to None and display_num_errors set to boolean False.
call the function import_module with argument self.urlconf_name, substitute the result for self._urlconf_module.
import module time.
substitute exception for self.exception.
call the function force_text with an argument message, return the result.
from django.utils._os import upath into default name space.
serialize data to JSON format with cls set to encoder, substitute it for data.
FILE is a file".
if lengths of new_operations and operations are the same,
substitute unpack_ipv4 for self.unpack_ipv4.
call the method input with an argument msg and store the result in confirm.
call the function sys.exit with argument integer 3.
call the method formats.time_format with 2 arguments: value and arg, return the result.
if initial is true, substitute it for self.initial, if not self.files is an empty dictionary.
if not,
_get_post is a getter function and _set_post is a setter function for POST attribute of this class.
derive CacheEntry class from the object base class.
return value.
self.active_writers is an integer 0.
from django.db.migrations.executor import MigrationExecutor into default name space.
return result.
from django.conf import settings into default name space.
call the function os.walk with 3 arguments: root, topdown set to boolean True, followlinks set to self.symlinks, for every dirpath, dirnames and filenames in the result,
join dirpath and dirname into a file path, use is as an argument for the call to the function os.path.join, use the result as an argument for the call to the os.path.join function, use the result and the norm_patterns as arguments for the call to the is_ignored function, if it evaluates to true,
substitute field.rel.to for rel_model.
define the __init__ method with 7 arguments: self, func, args, kwargs, url_name set to None, app_name set to None and namespaces set to None.
write string "  Installing indexes...\n" to the standard output.
if get_git_changeset has an attribute 'cache',
if PY3 is true,
return lookup_view
try,
if self.__language equals settings.LANGUAGE_CODE or self.__language equals a string "en-us",
from django.utils.translation import TranslatorCommentWarning, trim_whitespace and LANGUAGE_SESSION_KEY into default name space.
if content is None, raise an error.
split ip_str into 2 parts from right, return second element of the result.
if self has an 'requires_model_validation' attribute, has_old_option is boolean True, otherwise it is boolean False.
substitute new_class.declared_fields for fields.
derive the class Textarea from the Widget base class.
decorator function register.filter with 2 arguments string "timesince" and is_safe set to boolean False.
substitute self.addr without the first and last element for self.addr.
define the method next with an argument self.
call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args, third element of the result of the function sys.exc_info.
call the method self.has_previous, if it evaluate to false, call the self.has_next method, return the result.
if self._pk_field equals self.fk,
define the function m2m_convert with an argument value.
return url.
return wrapped.
get the value under the 'HTTP_X_REQUESTED_WITH' key of the self.META dictionary, if it equals string 'XMLHttpRequest', return boolean True, otherwise return boolean False.
define the function u with an argument s.
locale_dir is None.
if serializers.SerializerDoesNotExist exception is caught,
split string s once, with '=' sign as a delimiter, assign the resulting list to the t.
define the method handle_fk_field with arguments self, obj and field.
call the method autodetector.arrange_for_graph with 2 arguments: changes, loader.graph, substitute the result for changes.
define the function join_tokens with 2 arguments: tokens and trim set to boolean False.
try,
raise an InvalidTemplateLibrary exception with an argument string "Template library %s not found, tried %s", where '%s' is replaced with library_name and elements of tried_modules joined into a string, separated by ','.
define the method delete with 3 arguments: self, key, and version set to None.
try,
if TypeError, renamed to te, exception is caught,
substitute first size elements of self.buffer for result.
if value is false,
if number equals integer 1,
if middle starts with opening,
call the check function with argument app_config set to app_config, substitute the result for new_errors.
define the method latest_post_date with an argument self.
call the function check_for_migrations with 2 arguments: app_config and connection.
if self.urlconf_name is an instance of a list type and its length is not zero.
if self._varlist is true,
import module gzip.
call the method render from the base class of the class FileInput, called with 3 arguments: name, None and attrs as attrs.
define ensure_echo_on function.
return an instance of a dummy class.
msg is a tuple containing string "\nYou have installed Django's auth system, and don't have any superusers defined.\nWould you like to create one now? (yes/no): ".
substitute package.__path__ for package_path.
return the value under the pk key of self._object_dict dictionary.
increment i-th element of result by piece.
if other is contained in self.children, return boolean True, otherwise return boolean False.
substitute value for self.value.
if ttl is not None,
token is an instance of Token class, created with 2 arguments: TOKEN_VAR, and elements of token_string from second to second last element wiht the whitespaces striped from the both sides.
return boolean False.
decorator function register.filter with 3 arguments string "slice", is_safe set to boolean True and needs_autoescape set to True.
substitute self._pk_field.name for name.
otherwise if char is contained in string 'bEFMmNn',
if KeyError exception is caught,
if self.is_required is false,
define the function slugify with an argument value.
call the method self.resolve with an argument c, substitute the result for c.
if value is false,
import module sys.
call the function var.find with an argument: '_' appended to VARIABLE_ATTRIBUTE_SEPARATOR, if the result is greater than integer -1, or first element of var equals '_',
derive the TemporaryUploadedFile class from the UploadedFile base class.
register.tag decorator,
call the method self._update_errors with an argument e.
call the method self._new_gnu_trans with an argument localedir, substitute the result for translation.
skip this loop iteration.
return self.empty_value.
import module sys.
slice the rawdata from i-th to the j-th element, replace with it '%r' in the string "bad end tag: %r", use it to call the method self.error.
if use_reloader is true,
derive the class Loader from the BaseLoader base class.
substitute filter_func for value under the name key of self.filters dictionary.
derive the class OVERLAPPED from the Structure base class.
__all__ is a list with 15 elements: strings 'utc', 'get_fixed_timezone', 'get_default_timezone', 'get_default_timezone_name', 'get_current_timezone', 'get_current_timezone_name', 'activate', 'deactivate', 'override', 'localtime', 'now', 'is_aware', 'is_naive', 'make_aware' and 'make_naive'.
otherwise, length of options.args is lesser than integer 1,
call the connection.cursor method, substitute it for cursor.
define the method _truncate_html with 6 arguments: self, length, truncate, text, truncate_len and words.
do nothing.
if token.contents equals string 'else',
call the self.run method with unpacked dictionary options as an argument.
call the method self.limit_choices_to, return the result,
for every j in range of integers from 0 to iterations converted to an integer,
if token.contents doesn not equals a string 'endif', raise an AssertionError exception,
join prefix and path into an url, return it.
get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
define the function iterkeys with 2 arguments: d and unpacked dictionary  kw.
import module sys.
derive the class TimeInput from the DateTimeBaseInput base class.
utility is a instance of ManagementUtility class, created with an argument argv.
leave_locale_alone is boolean True.
for every fname in return value of the glob.glob1 function called with 2 arguments: self._dir and , self.cache_suffix converted to a string, appended to the character '*', call os.path.join with self._dir and fname as arguments, filelist is a list containing all the previous results.
if url_info.netloc is false or url_info.netloc equals host, and if url_info.scheme is false or url_info.scheme equals,
call the method msg.as_bytes, substitute the result for msg_data.
if self._delegate_bytes is true,
call the method error.items, for every field and error_list in the result,
return value under the key key of d dictionary.
return boolean False.
if value under the 'unique_id' key of the item dictionary is not None,
call the function self.path with argument name, use it and mode as arguments for the call to the function open, use it as an argument for creatinon of a File object instance, return it.
try,
return form.
call the function converter with an argument suffix, substitute the result for value.
call the method os.path.splitext with an argument base, substitute the result for base and ext, respectively.
define the method is_url with arguments self and template.
calculate the length of args, substitute it for alen.
call the function restart_with_reloader, substitute the return value for exit_code.
substitute new_mod for self.mod.
call the method self.port.isdigit, if it evaluates to false,
call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, use the result as an argument for the call to the function bytes, return the result.
convert self.option_list into a boolean, return the inverted value.
if ValidationError exception is caught,
return default.
call the method self.get_queryset, substitute i-th element of the result for value under the 'instance' key of kwargs dictionary.
get the value under the new_method_name key of the base.__dict__ dictionary, substitute it for new_method.
call the method template.render with an argument context, return the result.
if resource_string is not None,
import module datetime.
if old_attr is None,
derive the class NonCapture from list base class.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string, 'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice'.
return value.
if server is an instance of six.string_types,
multiply 10 to the power of 200, with itself, substitute the result for pos_inf.
add j and integer 1, substitute the result for i.
call the function warnings.warn with 2 arguments: string "OptionParser usage for Django management commands " "is deprecated, use ArgumentParser instead" and RemovedInDjango20Warning.
convert number to string, if first element equals to sign,
substitute cache_choices for self.cache_choices.
return data.
call the popen_wrapper with args as the argument, assign the result to the output, errors and status, respectively.
if self._upload_handlers is false,
call the method handler.addQuickElement with 2 arguments: string 'subtitle' and value under the 'subtitle' key of the self.feed dictionary.
import module zlib.
do nothing.
return palette.
_urllib_response_moved_attributes is a list with 4 elements: result of the function MovedAttribute, called with 3 arguments: strings "addbase", "urllib" and "urllib.response", result of the function MovedAttribute, called with 3 arguments: strings "addclosehook", "urllib", "urllib.response", result of the function MovedAttribute, called with 3 arguments: strings "addinfo", "urllib", "urllib.response" and result of the function MovedAttribute, called with 3 arguments: strings "addinfourl", "urllib", "urllib.response".
call the function from_current_timezone with an argument result, return the result.
assign the settings.SECURE_PROXY_SSL_HEADER to header and value, respectively.
from django.apps import apps.
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'app_label', nargs set to character'*', and help as a string 'Specify the app label(s) to create migrations for.'.
call the method n.getAttribute with string 'pk' as argument, use the result as an argument for the call to the field.rel.to._meta.pk.to_python method, substitute the result for obj_pk.
changeset is None.
derive the AppCommand class from the BaseCommand base class.
substitute digits for self.digits.
while token.contents starts with a string 'elif',
try,
try,
substitute parent_instance for self.parent_instance.
substitute notation_name for self.notation_name.
define the function _import_module with an argument name.
for every pythonrc in tuple containing 2 elements: return value of the function os.environ.get called with a string "PYTHONSTARTUP", and string '~/.pythonrc.py' as tuples second element.
join elements of output into a string, separated with newlines, return the result.
define get_script_name function with environ as an argument.
append e to warnings list for every e in all_issues, if checks.WARNING is lesser than or equal to e.level, and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false.
from django.dispatch import Signal into default name space.
raise an base.DeserializationError exception with an argument string "Invalid model identifier: '%s'", where '%s' is replaced with model_identifier.
close file_ file descriptor.
find first index of whitespace occurrence in line, add integer 1 to it, substitute the result for space.
join self into a bytes string, yield the result as the return value of the generator.
append tuple containing element attr to boolean_attrs.
define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
output is an empty list.
define the function parse_http_date_safe an argument date.
evaluate the method six.text_type(s), on the result call the method encode with encoding as an argument, return the result.
if not,
substitute cache_clear for wrapper.cache_clear.
do nothing.
evaluate the function smart_text with an argument value, return the result.
output_transaction is boolean True.
from django.db.models.fields.related import RelatedObject into default namespace.
return boolean False.
call the method self.make_view_atomic with callback as the argument, substitute the result for the wrapped_callback.
get the value under the name key of the data dictionary, return it, if the previous doesnt exists, return None.
from django.utils.encoding import force_bytes, force_str and force_text into default name space.
locations is an empty list.
return boolean True.
return new_context.
define the method add_arguments with 2 arguments self and parser.
raise an CommandError exception with an argument string 'You appear not to have the %r program installed or on your path.',
from django.utils.functional import allow_lazy into default name space.
try,
self.path_info is an empty string.
if output is true,
define the method send_messages with arguments self and messages.
errors is an empty list.
return dec.
call the method connection.ops.prepare_sql_script with 2 arguments: return value of the function fp.read, and _allow_fallback set to boolean True, extend the output with the result.
derive the class lazy_property from the property base class.
define the method __str__ with an argument self.
property decorator,
append filepath to tried.
get handler_config dictionary element under 'level' key, if it exists substitute it for level, if not, level is None.
raise an exception.
append cleaned_lien to statement.
define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
if not,
call the method apps.get_app_config with an argument app_lable, for every app_label in app_labels, append the results to app_configs list.
define the method _archive_cls with an argument file.
call the method self.build_attrs with arguments attrs, name as name, substitute the result for final_attrs.
split locale by '_', append the first element of the result to locales.
call the function conditional_escape with an argument checkbox_id, substitute the result for value under the 'clear_checkbox_id' key of the substitutions dictionary.
call the method serializers.get_serializer with an argument format.
if value is contained in self.empty_values,
try,
call the function mark_for_escaping with an argument new_obj, substitute the result for obj.
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " FAKED" as a argument.
define the function dec with an argument func,
raise an TemplateSyntaxError with an argument string "'autoescape' tag requires exactly one argument.".
internal_use_only is boolean True.
if VariableDoesNotExist exception is caught,
define the method decr with arguments self, key, delta defaulting to integer 1 and version defaulting to None.
call the method self._cache.add with key, value, self.get_backend_timeout(timeout) as arguments.
call the function is_library_missing with an argument path, return the result.
derive the class Parser form the base class object.
return input_val.
try,
call the method formats.sanitize_separators with an argument value, substitute the result for value.
substitute value for value under name key of msg dictionary.
return self.msg formatted with a tuple, with elements generated from return value of the function force_text with 2 arguments: p and errors set to string 'replace', for p in self.params.
call the method transaction.atomic with 2 arguments: using set to database, savepoint set to connection.features.can_rollback_ddl, with the result,
from django.conf import settings into default name space.
define the function _add_doc with 2 arguments: func and doc.
if key exists, substitute it for self.key, if not substitute settings.SECRET_KEY for key.
substitute self.start_doctype_decl for parser.StartDoctypeDeclHandler.
define the method visible_fields with an argument self.
if not,
self.file is a instance of a class TemporaryUploadedFile initialized with arguments: self.file_name, self.content_type, integer 0, self.charset and self.content_type_extra.
try,
call the method gettext_module.find with 3 arguments: string 'django', path and list with an element: result of the function, to_locale called with an argument lang_code, if the result is not None,
decorator function register.filter with an argument is_safe set to boolean True.
self.settings_exception is None.
call the method __init__ from the base class of the class RendererMixin, with 2 arguments: unpacked list args, and unpacked dictionary kwargs.
append an empty string to list hextets.
call the function io.open with 3 arguments: work_file, string 'w' and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:
evaluate binary expression with 4 operands: os.O_WRONLY, binary or os.O_CREAT, binary or os.O_EXCL, binary or 'O_BINARY' attribute of the os object, or integer 0 if it doesnt exists.
call the method parser.add_argument with 5 arguments: string '--noinput', action as a string 'store_false', dest as a string 'interactive', default set to boolean True, and help as a string 'Tells Django to NOT prompt the user for input of any kind.'.
define the method handle_fk_field with self, obj and field arguments.
week_number is integer 1.
return printable representation of self.dicts.
substitute DictConfigurator for dictConfigClass.
call the function force_text with an argument path, substitute the result for path.
define the method __next__ with an argument self.
bitwise shift integer 1 to the left by 63 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
while model_dependencies is true,
import module time.
if key is not contained in self,
if not,
reverse elements order of values.
join elements of out into a string, separated with whitespaces, append ')' to it, append the result to '(', return it.
url is a property of the class, lambda function is getter attribute with an argument self and return value is the value under the 'Location' key of the self dictionary.
call the function smart_split with an argument self.contents, substitute the result converted to an iterable for bits.
obj is a string "?".
if file path sql_file exists,
do nothing.
if d is an instance of real_datetime class,
call the method now.replace with argument tzinfo set to None, substitute it for now.
from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space.
derive the CommandParser class from the ArgumentParser base class.
call the method __init__ with an argument lexer, from the base class of the class DebugParser.
define the function _make_key with 9 arguments: args, kwds, typed, kwd_mark as a tuple with an element result of the function object,
HITS and MISSES are integer 0 and 1, respectively.
call the method UnicodeDecodeError.__str__, with self as the argument, substitute the result for original.
call the method Encoders.encode_base64 with an argument attachment.
call the function hook with an argument entry, substitute the result for finder.
if response has an attribute 'render' and response.render is a callable object,
take elements of token_string from second to second last element and strip the whitespaces surrounding the result, substitute the result for content.
try,
if not,
if use_base_manager is true,
derive the class __proxy__ from the Promise base class.
register.tag decorator,
define the function get_image_dimension with file_or_path and close set to boolean False as the arguments.
delete value under the 'args' key of the cmd_options dictionary.
if fdel is not None,
try,
call the method strftime with an argument fmt, from the base class of the type of dt class.
call the function getInnerText with argument k, on the result call the method strip, for every k in keys, append the results to field_value list.
derive the class BlockContext from the Exception base class.
try,
best_doublecolon_len is an integer 0.
if self.require_all_fields is boolean true,
if language is not contained in _translations,
call the method value.rjust with an argument, arg converted into a integer, return the result.
define the method reverse with arguments self, lookup_view, unpacked list args and unpacked dictionary kwargs.
if IndexError exception is caught,
do nothing.
from django.core.cache import caches to the default name space.
substitute first element of self.argv for subcommand.
if number is an integer and use_grouping is false and decimal_pos is false,
try,
convert value into an floating point number, substitute it for value.
join elements of list source from index last to the end into a string, substitute it for piece.
open writer.path file in write mode, with file descriptor as fh, perform the following,
call the method obj.delete.
call the params.get with string 'OPTIONS' and empty dictionary as arguments, substitute the result for options.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
from django.utils.timezone import get_current_timezone_name to the default name space.
try,
define the method appendlist with 3 arguments: self, key and value.
call the self.stdout.write method, with string "  Applying %s..." with '%s' replaced with migration and ending set to '', as arguments.
substitute default for value under the key key of self dictionary.
otherwise if field.required is true,
define the function unregister_serializer with an argument format.
for every val in value,
position the file pointer at the start of the self.file file.
if not,
get dictionary self items, convert the result into a dictionary, convert the result into a string and return it.
return s.
if PY3 is true,
if not,
neg is integer 0.
if LookupError exception is caught.
return result and result_args.
if node is an instance of Node,
if s is not an instance of the object Exception,
return klass.
define the function debug with 2 arguments: parser and token.
substitute self.current_token for t.
if s is an instance of an object six.memoryview.
from django import VERSION as version into default name space.
call the method shutil.copyfileobj with 2 arguments: extracted and outfile.
call the method serializers.serialize with 6 arguments: format, result of the function get_objects, indent set to indent, use_natural_foreign_keys set to use_natural_foreign_keys, use_natural_primary_keys set to use_natural_primary_keys, and stream set to stream, if the stream is true, otherwise stream set to self.stdout.
if escaped is true,
raise a ValidationError exception with arguments self.message and code set to self.code.
substitute upload_handlers for self._upload_handlers.
if count of occurrence of '::' in ip_str is greater than integer 1,
return nothing.
do nothing.
call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS, and help set to string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.
remove the first element from p_pattern.
call the connection.introspection.table_names with cursor as argument, store the result in tables.
substitute xreadlines for __iter__.
derive the class Command from the BaseCommand class.
try,
remove config dictionary element under '.' key, if it exists substitute it for props, if not, props is None.
if cache_choices is not None,
extend list inner_args with args.
append value to the self.sign, return the result.
substitute greater element between integer 0 and end decremented by one for last.
derive the class ZipArchive from the BaseArchive base class.
derive the class RemovedInDjango20Warning from PendingDeprecationWarning base class.
derive the class AssignmentNode form the base class TagHelperNode.
call the self.path with argument name, use the result as an argument for the call to the os.path.getsize function, return the result.
define the method end_index with an argument self.
call the method t.led with 2 arguments left and self.
bitwise shift integer 1 to the left by 31 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
for every loader in self.loaders,
field_params is an instance of a class OrderedDict.
substitute self.field.widget for widget.
derive the class EmailValidator form the object base class.
if settings.configured is true,
call the method self.stdout.write, with an argument string "Rendering %s template files with extensions: %s\n", where '%s' is replaced with app_or_project and extensions joined into a string, separated by a string ', '.
if KeyError exception is caught,
if value under the 'description' key of the item dictionary is not None,
result is an integer 0.
for every basedir in basedirs,
return boolean True.
stats is an list with 2 elements: 2 integers 0.
return boolean True.
define the function _get_foreign_key with 4 arguments: parent_model, model, fk_name set to None and can_fail set to boolean False.
get the value under the key key of the self.find_template_cache dictionary, substitute it for result.
derive the class Node form the base class object.
define lambda function that returns self.file.flush field, use it as an argument for property function, put the result in flush.
call the function pickle.dumps with expiry and integer -1 as arguments, use the result as the argument for the call to f.write function.
call the function force_str with argument self.obj, substitute the result for obj.
from django.conf import settings into default namespace.
return media.
call the method LocaleRegexProvider.__init__ with arguments self and regex.
call the function validate_ipv4_address with an argument value.
substitute self.subject for subject.
call the function warnings.warn with an argument string "Your TEMPLATE_LOADERS setting includes %r, but your Python installation doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS.", where '%r' is replaced with loader.
define the method __init__ with 2 arguments: self and attrs set to None.
call the function parse_http_date with an argument date, return the result.
substitute self.handle_app for handle_app.
return a string "<Variable Node: %s>", substitute '%s' with self.filter_expression.
raise NotImplementedError exception with an argument string 'Subclasses must implement this method.'.
define the function int2byte with an argument i.
assign script_name to the value under the 'SCRIP_NAME' key of the self.META dictionary.
define the method expression with 2 arguments: self and rbp set to integer 0.
skip this loop iteration,
try,
for model in self.models append model._meta.db_table to a list, substitute the resulting list for table_names.
from django.utils.encoding import force_str and force_text into default name space.
call the method self.create_select with 6 arguments: name, self.month_field, value, month_val, choices and self.month_none_value, substitute the result for the value under the 'month' key of the html dictionary.
do nothing.
substitute SplitDateTimeWidget for widget.
__D2 is a raw string '(?P<day>[ \d]\d)'.
call the function blankout with 2 arguments: t.contents and 'X', write the result to out.
if response.streaming is boolean False,
is_templatized is boolean True.
define the function decorator_from_middleware with an argument middleware_class.
call the method notifier.process_events.
if content is an instance of a EmailMessage class,
put loaders elements in a tuple, substitute it for template_source_loaders.
if form has an attribute 'Meta',
call the method _trans.gettext_noop with an argument message.
do nothing.
return self.
call the method f.post_create_sql with arguments: style and model._meta.db_table, extend the output with the result.
substitute attrs for self.attrs.
if ValueError exception is caught,
call the method value.decode with an argument charset, substitute the result for value.
define the function find_template_loader with an argument loader.
if mode equals to string 'add' and current_expires is lesser than now, or mode equals to string 'set', and result is true,
return output.
WEEKDAYS is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Monday' for 0, result of the call to the function _ with an argument string 'Tuesday' for 1, result of the call to the function _ with an argument string 'Wednesday' for 2, result of the call to the function _ with an argument string 'Thursday' for 3, result of the call to the function _ with an argument string 'Friday' for 4, result of the call to the function _ with an argument string 'Saturday' for 5, and result of the call to the function _ with an argument string 'Sunday' for 6.
return boolean False.
define the method parse_endtag with self class instance and i as the arguments.
if extra_attrs is true,
derive the class AdminEmailHandler from logging.Handler base class.
position the file pointer at the beginning of self file.
define the method has_changed with arguments self, initial and data.
call the method self.write with 2 arguments: s and encoding.
get the value under the name key of the data dictionary, if it exists substitute it for value, if not, value is None.
from django.core.exceptions import ImproperlyConfigured into default name space.
define the method get_block with 2 arguments self and name.
substitute elements of self.validators list for result.validators.
import module importlib.
substitute '%s' in string '%s-%s-%s' with y, m and d, return the result.
call the method self.__cast, if the result doesnt equal to other, return boolean True, otherwise return boolean False.
define the method get with 4 arguments, self class instance, key, default set to None and version set to None.
define the method attach with 4 arguments: self, filename set to None, content set to None and mimetype set to None.
substitute element at the bit index of current for current.
substitute third element of url_fields for second element of url_fields.
from django.template.base import Library, add_to_builtins, builtins, get_library, get_templatetags_modules, get_text_list, import_library and libraries.
define the function get_default_timezone.
call the method node.render with an argument context, return the result.
raise an CommandError exception with an argument string 'Unknown model in excludes: %s', where '%s' is replaced with exclude.
for every form in self.forms append form to a list, if function form.is_valid evaluates to true, and form is not contained in forms_to_delete, substitute the resulting list for valid_forms.
from __future__ import unicode_literals into default name space.
call the safe_join function with arguments self.location and name, substitute it for path.
import module decimal.
from django.conf import settings into default name space.
evaluate function has_bom with po_path as argument.
if AttributeError exception is caught,
join printable representation of d into a string separated with ', ', for every d in self.dicts, substitute the result for dictreprs.
call the function tempfile.mkdtemp with arguments: prefix set to prefix and suffix  set to string '_download'.
return boolean False.
define the method to_python with 2 arguments: self and value.
call the method token.split_contents, substitute the result for bits.
all_models is an empty list.
FIELD is a field".
substitute name for filter_func._filter_name.
from copy import copy into default name space.
define the method tokenize with an argument self.
define the function infix with 2 arguments bp and func.
for every i in range of integers from integer 0 to the length of pieces decremented by one, with step of integer 3,
call the function msvcrt.get_osfhandle with return value of the _fd(f) function as argument, substitute the result for hfile.
substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix.
self._current is None.
define the method __repr__ with an argument self.
if ValueError exception is caught,
define the method set_many with arguments, self, data, timeout defaulting to DEFAULT_TIMEOUT and version set to None.
substitute localized_fields for value under the 'localized_fields' key of attrs dictionary.
call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
if s is the instance of the object six.text_type,
for every pattern in self.url_patterns,
import module warnings.
convert fist p elements of language to lowercase, append '_' to it, covert to lowercase language element at (p+1)-th index, append it to the previous result, covert to lowercase language elements from (p+2)-th index to the end, append it to the previous result, return it.
call the function check_for_migrations with arguments app_config and connection.
define the function python_reloader with main_func and kwargs as arguments.
call the method apps.get_app_config with an argument app_label, for every app_label in app_labels, append the results to a list, substitute the resulting list for app_config.
if initial_value is not equal to data_value, return boolean True, otherwise return boolean False.
if striped x by '.' character is not contained in ignored, for every x in ext_list put x into a set, return the resulting set.
decorator stringfilter,
return an instance of RequestContext class, created with 3 arguments: self._request, context and current_app set to self._current_app.
call the six.reraise function with 3 arguments: DeserializationError, DeserializationError called with an argument e, third element of the return value of the function sys.exc_info.
if not,
define the method check with 4 arguments: self, app_configs set to None, tags set to None, display_num_errors set to boolean False.
if self.data and self.files are both False,
derive the class WSGIRequestHandler from simple_server.WSGIRequestHandler and object base classes.
if http_cookies.CookieError exception is caught,
call the function import_library with an argument taglib_module, substitute the result for lib.
decorator function wraps with an argument fget.
substitute cmd for self.cmd.
get the value under the 'dry_run' key of the options dictionary, if the key exists substitute it for self.dry_run, if not, self.dry_run is boolean False.
if not,
if html_message is true,
return attrs.
call the method parser.parse_args with argv, without the first 2 elements, substitute the result for options.
get models.signals name attribute, store it in obj.
call the ops.quote_name method with argument self._table on the value under the db key of connections dictionary, substitute the result for table.
define the method initial_form_count with an argument self.
can_import_settings is boolean False.
append bit to split.
call the method urlresolvers.RegexURLResolver with raw literal string '^/' and urlconf as the arguments, substitute the result for resolver.
join tmpdir and sting 'original' into a file path name, substitute it for original_path.
if not,
floor the division of delta by integer 100 and delta by integer 400, sum the two results, multiply integer 6 by it, substitute the result for off.
derive the class ContextDict from the dict base class.
return EventHandler.modified_code.
define the function wrap with 2 arguments text and width.
if DatabaseError or IntegrityError, renamed to e, exceptions are caught,
if model_identifier is false,
raise an ImproperlyConfigured with an argument string 'Loader does not define a "load_template" callable template source loader'.
if form.errors is true,
call the method handler.file_complete with i-th element of counters as an argument, substitute the result for file_obj.
return evaluated result of the method connection.send_messages with messages as argument.
substitute v.year, v.month and v.day for year_val, month_val and day_val, respectively.
substitute the '%s' in string 'views.decorators.cache.cache_header.%s.%s' with key_prefix and result of the function call, to the function url.hexdigest(), respectively, substitute it for cache_key.
define the method __init__ with 3 arguments: self, args and kw.
in_tag is boolean False.
foreground is a dictionary created with elements: x appended to a string '3' for value under the key x of color_names dictionary, for every x in sequence of integers from 0 to 7.
define the function pluralize with 2 arguments value and arg set to character 's'.
if not,
from django.utils.six.moves import _thread as thread into default name space.
media is a property object of the current class, with _get_media as getter function.
substitute greater element between integer 0 and end decremented by one for last.
raise an TypeError exception with an argument string "Variable must be a string or number, got %s", replace '%s' with type of var.
subclass is a instance of a class named Migration, derived from the base class Migration, with 1 field: dependencies set to a list of tuples with 2 elements: app_label and migration.name for every migration in merge_migrations.
return nothing.
if f is not None append it to a list for every f in tuple containing 3 elements: style_func, self.style_func, and lambda function returning x for x, substitute the firs element of resulting list for style_func.
if IndexError exception is caught,
substitute initial_forms for total_forms.
call the __init__ method with 3 arguments: WARNING, unpacked list args and unpacked dictionary kwargs from the base class of Warning.
raise an exception.
define the method __init__ with an argument self.
return boolean False.
define the method __init__ with 2 arguments: self and config.
substitute input_formats for self.input_formats.
return supported.
if nodelist is true,
return self.
if field.rel is None,
from django.core.mail.utils import DNS_NAME into default name space.
if min_num is None,
if bcc is true,
call the function random_module.choice with an argument value, return the result.
convert host to lowercase.
if query_string is an instance of bytes,
call the middleware_method with the request as an argument, substitute the result for response.
call the method warnings.warn with 2 arguments: string "The syncdb command will be removed in Django 1.9" and RemovedInDjango19Warning.
call the method logging.getLogger, substitute the result for root.
substitute first element of level for common_ancestor.
otherwise if self.verbosity is greater than integer 0,
define the function default_key_func with 3 arguments, key, key_prefix and version.
call the method signals.got_request_exception.send with the sender set to the type of this class, and request set to request as the arguments.
call the method self.__class__ with an argument self, return the result.
call the method self.fetch_command with first element of cwords as an argument, substitute it for subcommand_cls.
call the method parser.add_argument with 5 arguments: string '--failfast', action set to string 'store_true', dest set to 'failfast', default set to boolean False and help  set to string 'Tells Django to stop running the test suite after first failed test.'.
from django.utils.encoding import smart_text,  force_text and python_2_unicode_compatible into default name space.
define the method resolve_expression with 3 arguments: self, obj and context.
call the method os.chdir with an argument our_home_dir.
self.command_stack is an empty list.
call the method filename.rfind with an argument string "\\", increment the result by one, slice the filename from the previous result as start index to the end, strip it of white spaces from both ends, if the result is not an empty string and filename is not an empty string, return boolean True, otherwise return boolean False.
from django.apps import apps into default name space.
increment self.active_writers by 1.
derive the class HttpResponseBase from the six.Iterator base class.
from django.db import connections, transaction, router and DatabaseError into default name space.
if memo is None,
raise an AttributeError exception with an argument string "You cannot set content to a 304 (Not Modified) response".
substitute form.instance.pk for pk_value.
from django.conf import settings into default namespace.
raise an TemplateSyntaxError exception with an argument string "'autoescape' argument should be 'on' or 'off'".
call the function force_text with an argument base, substitute the result for base.
append entry to files list.
define the function iriencode with an argument value.
call method __init__ from the base class of the class PyLibMCCache with arguments: server, params, library set to pylibmc and value_not_found_exception set to pylibmc.NotFound.
if not,
derive the class SafeText from six.text_type and SafeData base classes.
define the function smart_urlquote with an argument url.
append string ".moves.urllib_robotparser" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for robotparser.
return result.
define the method t with an argument self.
derive the class Literal from the TokenBase base class.
call the function _load_serializers.
sum major and sub, return the result converted to string.
define the method list with an argument self.
set field cdata_tag for this class instance to None.
status_code is an integer 302.
if imoportError exception is caught,
return self.__name.
call the method connection.ops.start_transaction_sql, use the result as an argument for the call to the method self.style.SQL_KEYWORD, write the result to the self.stdout stream.
BASE36_ALPHABET is a string '0123456789abcdefghijklmnopqrstuvwxyz'.
call the method dict.__setitem__ with 3 arguments: result, result of the function copy.deepcopy, called with 2 arguments: key, and memo, and result of the function copy.deepcopy called with 2 arguments: value and memo.
call the os.open function with full_path, flags and octal number 0o666 as arguments, substitute the result for fd.
self.fed is an empty list.
if value is true,
try,
define the function become_daemon with 4 argument: our_home_dir set to '.', out_log set to None, err_log set to None,
raise an ValueError exception with an argument string 'Unable to configure logger %r: %s' formated with name and e.
sort current_fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x.
try,
if InvalidTemplateLibrary, renamed to e, exception is caught,
if locations is not empty,
define the function _check_boolean_field_default_value with app_config set to None and kwargs dictionary as arguments.
if self.fail_silently is boolean False,
return the instance of DefusedExpatParser class.
if label_output is true,
if initial is not equal to data, return boolean True, if it is return boolean False.
define the method handle with 2 arguments: self and unpacked dictionary options.
call the function os.path.basename with an arguments path, substitute the result for filename.
increment weight by integer 2.
if not,
define the function _get_timezone_name with an argument timezone.
call the method _trans.pgettext with 2 arguments context and message.
return an empty string.
if handlers is true,
call the method self._post.appendlist with 2 arguments: field_name and result of the function force_text called with 3 arguments: data, encoding and errors as a string 'replace'.
return the printable representation of the self object converted to a list.
substitute file_name for self.file_name.
from django.http.response import HttpResponse, StreamingHttpResponse, HttpResponseRedirect, HttpResponsePermanentRedirect, HttpResponseNotModified, HttpResponseBadRequest, HttpResponseForbidden, HttpResponseNotFound, HttpResponseNotAllowed, HttpResponseGone, HttpResponseServerError, Http404, BadHeaderError, JsonResponse into default name space.
derive the class InvalidTemplateLibrary form the base class Exception.
call the method parser.add_argument with 3 arguments: string 'args', metavar set to string 'app_label' and nargs set to '*'.
return _curried.
return is boolean True.
call the method password.translate with an argument hmac.trans_36, update inner dictionary with the result.
call the method data.getlist with an argument name, return the result.
biggest_number is integer 1.
write raw_data to self.file file.
if priority is true,
call the function constant_re.findall with an argument t.contents, substitute the result for cmatches.
derive the class DummyCache from the base class BaseCache.
return default.
self._unget_history is an empty list.
if exclude is true and f.name is contained in exclude,
content is a File object instance created with content argument.
call the method self.data.tzinfo.tzname with an argument self.data, if it is true, return it, otherwise return an empty string.
define the method nud with 2 arguments self and parser.
raise an TemplateSyntaxError exception with an argument string "'now' statement takes one argument".
call the executor.migrate method with, targets, plan and fake set to the value under the 'fake' key of options dictionary, if the 'fake' key doesnt exists set fake to boolean False, as arguments.
substitute os.unlink for unlink.
res is an empty string.
import module fnmatch.
convert current_expires to a string, use it as the argument for the call to the function typecast_timestamp, substitute the result for current_expires.
get absolute directory path of dir, substitute it for self._dir.
try,
define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
derive class BaseHandler, derive from the base class object, making this a new style class.
yield value under key key of self dictionary.
do nothing.
from django.db.migrations.questioner import MigrationQuestioner and InteractiveMigrationQuestioner into default name space.
update widget.attrs dictionary with extra_attrs.
call the get_path_info function with environ as argument, substitute the result for path_info.
decorator function register.filter with an argument is_safe set to boolean True.
return None.
BLOCK_CONTEXT_KEY is a strign 'block_context'.
define the method __init__ with arguments self, stream and boundary.
try,
if settings.USE_L10N is true,
raise an TemplateSyntaxError exception with an argument string "'%s' tag takes only one argument", where '%s' is replaced with first element of bits.
from threading import local into default name space.
if ValueError or TypeError exceptions occurred,
if field.serialize is true,
self._num_pages is a integer 0.
call the method ops.process_clob with second element of row as argument, on the object under the db key of connections dictionary, substitute the result for value.
raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary, code set to an string 'invalid_choice' and dictionary params with an entry: value for 'value'.
continue with the next iteration of the for loop.
if not,
if value.tzinfo is not None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to not None, return boolean True, otherwise return boolean False.
if _cookie_encodes_correctly and _cookie_allows_colon_in_names are boolean True,
from __future__ import absolute_import into default name space.
define the function import_library with an argument taglib_module.
define the method split_contents with an argument self.
if limit_choices_to is callable object,
call the method data.find with an argument self._boundary, substitute the result for index.
from django.utils.http import urlquote into default name space.
if sep is not None,
define the method add_arguments with 2 arguments self and parser.
remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_primary_keys, if the key doesnt exists substitute boolean False for self.use_natural_primary_keys.
append filename to the self.attachments list.
define the function media with an argument request.
get the value under the 'database' key of the options dictionary, use it as a key to access the element under the connections dictionary, substitute it for connection.
if function form.has_changed evaluates to false,
do nothing.
define the function fget with 3 arguments: instance, instance_type set to None and name set to fget.__name__.
if offset is smaller than integer 0, sign is '-', otherwise sign is '+'.
define the method validate with arguments self and value.
define the method __copy__ with an argument self.
call the method tempfile.mkstemp with dir set to self._dir, substitute result for fd and tmp_path, respectively.
from django.utils import datastructures into default name space.
derive the class SpacelessNode from Node base class.
parent is a tuple with 2 arguments: form.Meta and object.
import module re.
call the method parser.add_argument with 5 arguments: string '--no-optimize', action as a string 'store_true', dest as a string 'no_optimize', default set to boolean False and help as a string 'Do not try to optimize the squashed operations.'.
raise an exception.
decorator function register.filter with an argument is_safe set to boolean False.
call the method self.autocomplete.
from django.apps import apps into default name space.
if app_label is not contained in executor.loader.migrated_apps,
define the method transform with 3 arguments: self, node and results.
finally perform,
if commit is false,
bring intger 2 to integer 32, decrement the result by 1, multiply it with hlen, if dklen is greater than the previous result,
return exclude.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
if not,
call the method self._create_attachments with argument msg, return the result.
delete X.
define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
self.abstract is boolean False.
if not,
call the function inner.copy, substitute the result for dig1, call the function outer.copy, substitute the result for dig2.
call the function register_serializer with 3 arguments: format, value under the format key of the settings.SERIALIZATION_MODULES dictionary and serializers.
define the method _html_output with 6 arguments: self, normal_row, error_row, row_ender, help_text_html and errors_on_separate_row.
append string '-0000' to time_str, return the result.
call the method warnings.warn with an argument string "No fixture named '%s' found." where '%s' is replaced with fixture_name.
call the function now.replace with microseconds set to integer 0, substitute the result for now.
if self equals to other return boolean False, otherwise return True.
if x equals to integer 0,
define the function loads with 5 arguments: s, key set to None, salt set to string 'django.core.signing',
add model to known_models set.
call the method self.has_header with string 'Content-Encoding' as an argument, if it evaluates to true,
insert mw_instance.process_template_response at the beginning of self._template_response_middleware.
return an empty string,
remove the value under the 'using' key from the options dictionary, assign it to the db, if the entry doesnt exists, substitute DEFAULT_DB_ALIAS for db.
subtract i from len_values, decrement the result by integer 1, substitute it for value under the 'revcounter' key of the loop_dict dictionary.
if role is contained in value under the NOCOLOR_PALETTE key of the PALETTES dictionary and definition is true,
import module re.
call the method update_watch.
from logging import _checkLevel.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
substitute smart_text for smart_unicode.
define the function iri_to_uri with iri as an argument.
define the function bound_func with 2 arguments: unpacked list args2 and unpacked dictionary kwargs2.
num is an integer 0.
if not,
from wsgiref.util import FileWrapper
call the __init__ method from the base class of the SimpleUploadedFile class with 7 arguments: BytesIO(content), None, name, content_type, length of content, None and None.
define the mehod __lt__ with self and other.
for every ch and escaped in input_iter,
define the method __init__ with 2 arguments: self and offset.
value is an empty list.
if e has an attribute 'code' and e.code is contained in self.error_messages,
substitute target and expression for self.target and self.expression, respectively.
define the method handle with self class instance and dictionary pair of elements options as arguments.
call the method validate with an argument value from the base class of the class ChoiceField.
sort elements of handlers, for every name in result,
define the method render with 4 arguments: self, name, value and attrs set to None.
define the method clean with arguments self and value.
from functools import wraps into default name space.
define the method _init_translation_catalog with an argument self.
call the function import_module with an argument path, substitute it for package.
return __wrapper__.
format string 'tag:%s%s:%s/%s' with bits.hostname, d, bits.path and bits.fragment, return it.
substitute self for result.parent.
if self.is_bound is true,
invalid_apps is an empty list.
remove the 'fields' key from the options dictionary and substitute it for self.selected_fields, if the key doesnt exists substitute None for self.selected_fields.
if sublist_item is true,
call the os.umask function with argument old_umask.
from django.utils.encoding import force_text into default name space.
derive the class DateFormat from the base class TimeFormat.
try,
define the method validate_host with 2 arguments: host and allowed_hosts.
call the method handler.addQuickElement with 2 arguments: string 'ttl' and value under the 'ttl' key of the self.feed dictionary.
finally perform,
import module sys.
convert self.children into an boolean, return it.
define the method display with an argument self.
self.items is an empty list.
call the method self.is_valid, if it evaluates to false,
call the method timezone.localize with 2 arguments: value and is_dst as None, return the result.
if value is contained in self.empty_values,
call the function re.search with 3 arguments: string '^%s%s', with '%s' replaced for prefix_norm and pattern, respectively, candidate_pat formated with candidate_subs and re.UNICODE.
evaluate the method s.getvalue, return the result.
if OSError, renamed to e, exception is caught,
substitute the location for self.base_location.
for every node in nodelist,
response.streaming_content is an empty list.
otherwise if timezone is an instance of six.string_types and pytz is not None,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
if 'date' is not in header_names,
substitute result for value under key key of self dictionary.
convert name to lower case if it equals to string 'from' or 'to,
call the function force_text with an argument text, replace every occurrence of '&' in the result with '&amp;', every occurrence of '<' with '&lt;', every occurrence of '>' with '&gt;', every occurrence of '"' with '&quot;', and every occurrence of "'" with '&#39;', call the function mark_safe with the previous result as an argument, return the result.
for every app_config in return value of the method apps.get_app_configs if app_config.models_module is not None, and app_config.label is contained in app_labels, create a tuple containing app_config.label and return value of the method router.get_migratable_models called with app_config, connection.alias and include_auto_created set to True, append the tuple to the list all_models.
define the function parse_header with an argument line.
call the function _trans.get_language_from_path with an argument path, return the result.
if not,
call the method self.xml.startElement with an argument string 'object'.
remove 'BACKEND' key from params dictionary and put it into backend.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
def method add_arguments with self class instance and parser as the arguments.
hard copy list self.dicts to duplicate.dicts.
if ValueError exception is caught.
define the method _isdst with 2 arguments: self and dt.
call the method self.add_fields with arguments form and i).
derive the class ExternalReferenceForbidden from the DefusedXmlException base class.
if vale is not an instance of ConvertingDict and value is an instance of dict type,
define the method make_key with self class instance, key and version defaulting to None as arguments.
if self.verbosity is greater or equal to integer 1,
from collections import OrderedDict into default name space.
derive the class BaseFormSet from the object base class.
define the function reset_format_cache.
if not,
call the function six.text_type with an argument bf, append the result to hidden_fields.
do nothing.
call the function self._key_to_file with key and version as arguments, substitute it for fname.
call the method widget_attrs with an argument widget, from the base class of the class IntegerField, substitute it for attrs.
define the function handle_m2m with an argument value,
from importlib import import_module into default name space.
call the method parser.parse with an argument tuple with an element string 'endfor', substitute the result for nodelist_empty.
from django.core.serializers.python import Serializer as PythonSerializer into default name space.
if cc contains item 'max-age' and kwargs contains item 'max_age',
from django.utils.six.moves.urllib.parse import urlparse into default name space.
for every smigration in migrations_to_squash,
from django.template.base import Origin,  Template,  Context and TemplateDoesNotExist into default name space.
call the function _generator, join the result into a string, return the result.
from django.core.management.utils import handle_extensions, find_command and popen_wrapper into default name space.
from django.utils.safestring import mark_safe into default name space.
define the method _has_changed with arguments self, initial and data.
if length of args is smaller than integer 2,
do nothing.
call the function import_library with an argument module, append the result to builtins.
substitute connections element at the index of the value db for connections.
if viewname is not an instance of the six.string_types object,
delete the value under the 'liveserver' key of the options dictionary.
define the method writeString with 2 arguments self and encoding.
replace every occurrence of '\\' in s with '\\\\'.
define the function call_command with 3 arguments: name, unpacked list args and unpacked dictionary options.
substitute _iteritems for iteritems.
otherwise if ch equals a string '[',
call the function sys.exit with an argument integer 1.
output is an empty list.
get config dictionary element under 'handlers' key, if it exists substitute it for handlers, if not, handlers is EMPTY_DICT.
call the function render_value_in_context with 2 arguments: value and context, return the result.
call the method self.filter with 3 arguments: name, func and unpacked dictionary flags, return the result.
return boolean False.
if _serializers is false,
derive the class Command from the BaseCommand class.
if not,
remover 'file' key from the kwargs dictionary, if it exists substitute it for fp, if not substitute sys.stdout for fp.
define the method autocomplete with an argument self.
supported is boolean False.
define the method close with argument self.
call the function get_language, substitute the result for lang.
if not,
import module os.
if obj.pk is None, and Model has an 'natural_key' attribute, and Model._default_manager has and 'get_by_natural_key',
call the method self.items, for every field and errors in the result.
get the value under the 'id' key of the final_attrs dictionary, substitute it for id_, if it doesnt exists, id_ is None.
append string "Field renamed because it started with '_'." to field_notes.
 - %s\n" with return value of the operation.describe method, write the result to self.stdout.
call the function re.compile with an argument raw string '(?:W/)?"((?:\\.|[^"])*)"', substitute the result for ETAG_MATCH.
value under the app_config key of the app_list is None.
substitute RemovedInDjango19Warning for RemovedInNextVersionWarning.
create dictionary out of the unpacked dictionary options, using defaults._get_kwargs as a mapping function, substitute the result for defaults.
if UnicodeEncodeError exception is caught,
substitute True for self.close_called.
nesting is integer 0.
call the function escapejs with an argument value, return the result.
split self._wrapped into words, substitute the result for words.
define the function do_include with 2 arguments parser and token.
define the method as_text with an argument self.
divide self.data.day by 10, substitute reminder of the result for last.
if code is not None,
derive the class TimestampSigner from the Signer base class.
self.choices is an list containing an tuple with 2 elements: an empty string and string "---------".
requires_system_checks is boolean False.
try,
from IPython.Shell import IPShell into default namespace.
define the method handle_template with 3 arguments: self, template and subdir.
substitute obj for value under the self.var_name key of the context dictionary.
finally perform,
call the method timezone.make_naive with arguments: expires, timezone.utc, substitute the result for expires.
if value is contained in self.empty_values,
call the function re.compile with 2 arguments, string '^%s/', where '%s' is replaced with language_code and re.UNICODE, substitute the result for regex_compiled.
substitute error_messages under the message.code key of error_messages dictionary for message.message.
call the method self.stdout.write with an argument string "Installed %d object(s) (of %d) from %d fixture(s)", substitute '%d' with self.loaded_object_count, self.fixture_object_count and self.fixture_count.
define the method __init__ with 2 arguments: self and name.
derive the class BaseConfigurator from object base class.
define the method _get_name with argument self.
call the method os.path.dirname with an argument fixture_name, append it to a list, substitute resulting list for fixture_dirs.
call the method self.field.bound_data with 2 arguments: self.data and value under the self.name key of the dictionary, self.form.initial, if it exists, or self.field.initial if not, substitute the result for data.
call the method self._cache.disconnect_all.
from itertools import chain into default name space.
append field.widget.media to media, substitute the result for media.
substitute self.external_entity_ref_handler for parser.ExternalEntityRefHandler.
mapping is a dictionary with 3 initial entries: 'a' for 'alpha', 'b' for 'beta' and 'c' for 'rc'.
if not,
flags is a integer 0.
define the function is_safe_url with 2 arguments url and host set to None.
return new_value.
substitute hashlib.sha256 for digest.
self.filters is an empty dictionary.
if match is true,
if reason is not None,
from django.utils import six into default name space.
raise an TemplateSyntaxError exception with an argument string "widthratio takes at least three arguments".
call the method self._initialize_handlers,
call the function table2model with an argument table_name, append the result to known_models.
return x.
args is an empty list.
try,
get the value under the 'locale' key of the options dictionary, substitute it for locale.
if call to the method self._css.get with an argument medium evaluates to false, or path is not contained in the value under the medium key of self._css dictionary.
call the method self.error with an argument self.cmd.missing_args_message.
increment i by integer 1.
call the method self.next_token, substitute the result for self.current_token.
call the function update_wrapper with 2 arguments: wrapper and user_function, return the result.
if name is None,
derive the class ImageField from the base class FileField class.
try,
derive the class DebugVariableNode from the VariableNode base class.
if six.PY3 is true,
return value.
try,
define the function compile_filter with 2 arguments: self and token.
from django.utils.encoding import force_text into default name space.
return self._queryset.
skip this loop iteration,
if comment_lineno_cache equals cur_lineno.
if call to the method response.has_header with string 'Cache-Control' as an argument returns boolean True,
from __future__ import unicode_literals into default name space.
call the method self._get_model_from_node with arguments node and string 'model'.
if self.initial is true and 'initial' key is not contained in kwargs,
return dictionary created with tuples with 2 elements: key and value under the key key of self dictionary, for every key in self.
from django.forms.extras.widgets import SelectDateWidget into default name space.
call the method tarfile.open with an argument file, substitute the result for self._archive.
join self.dirpath and self.file into a file path, substitute it for orig_file.
split label by '.', assign the result to app_label and model_label, respectively.
try,
try,
call the function get_quantifier with 2 arguments: ch and pattern_iter, substitute the result for count and ch, respectively.
otherwise if ch equals a string '$',
raise an NotImplementedError with an argument string 'subclasses of Widget must provide a render() method'.
if new_path file path exists,
return output.
call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
try,
define the method open with argument self.
property decorator,
for every field in unique_check,
call the method self.handle_file_complete with arguments old_field_name, counters.
call the function force_text with an argument value, substitute the result for value.
return output.
get the value under the key key of the self.cookies dictionary, substitute expires for 'expires' key of the returned dictionary.
try,
return boolean True.
define the method prepare_value with arguments self and value.
define the method j with an argument self.
try,
if value under the 'setting' key of the kwargs dictionary is equal to string 'LANGUAGES' or strnig 'LANGUAGE_CODE',
if initial is not None, substitute initial for initial_value, otherwise initial_value is an empty string.
substitute serialize for __bytes__.
call the function params.update with argument kwargs.
call the method validators.MinValueValidator with min_value converted into an integer, append the result to list self.validators.
substitute char '0' for the value under the 'Content-Length' key of the response dictionary.
substitute obj.tzinfo for self.timezone.
define the serialize content with an argument self.
if index is not None and index is smaller than return value of the method self.initial_form_count,
raise an NotImplementedError exception with an argument string 'may be implemented in a future release'.
if id_ is true,
call the method connection.introspection.table_names with an argument cursor, substitute the result for table_names.
if not,
call the self.style.MIGRATE_HEADING with string "Synchronizing apps without migrations:" as an argument, use the result as an argument for the call to the self.stdout.write.
strip whitespaces from both ends of unicode_value, substitute the result for value.
decorator function register.filter with an argument is_safe set to boolean False.
call the method __init__ from the base class of the InMemoryUploadedFile base class, with 6 arguments: file, name, content_type, size, charset, content_type_extra.
substitute '%s' in TEMPLATE_FRAGMENT_KEY_TEMPLATE string with fragment_name and args.hexdigest(), respectively, return the result.
import module binascii.
if ImportError exception is caught,
instantiate class Module_six_moves_urllib_robotparser with an argument, string ".moves.urllib.robotparser" appended to __name__, assign it to value under the string ".moves.urllib_robotparser" appended to __name__ key of the sys.modules dictionary, and to value under the string ".moves.urllib.robotparser" appended to __name__ key of the sys.modules dictionary.
return a dictionary with 2 elements: self._version for "version" and "http://www.w3.org/2005/Atom" for "xmlns:atom".
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries: 'self' for 'rel' and value under the 'feed_url' key of self.feed dictionary for 'href'.
call the function sanitize_address with arguments addr and email_message.encoding, for every addr in return value of the function email_message.recipients, store the results in a recipients list.
template_source_loaders is None.
try,
if nor,
call the method self.add_item_elements with 2 arguments: handler and item.
evaluate the force_text function with settings.FORCE_SCRIPT_NAME as argument, return the result.
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'table_name', nargs set to '*' character, and help set to a string 'Optional table names. Otherwise, settings.CACHES is used to find cache tables.' .
if hmac has an attribute "compare_digest",
call the function avoid_wrapping with an argument value, return the result.
get is a string '<could not parse>'.
for every v in list_ append to a list result of the function encode, called with arguments: k and result of the function force_bytes, called with arguments v and self.encoding, extend the output with the result.
return value,
decorator function register.filter with an argument is_safe set to boolean True.
split tmp at '/' character, substitute the last element of the result for filename.
if value is an instance of SafeData, safe is boolean True, otherwise it is boolean False.
if size equals to integer zero.
do nothing.
if count does not equals to integer 0,
return default.
call the function re.compile with raw string '(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z', substitute the result for trailing_empty_content_re.
register.tag decorator,
call the method self.dicts.pop, return the result.
call the method fp.write with an argument msgs.
return the first element of bits and an empty string.
derive the class SplitHiddenDateTimeWidget from the SplitDateTimeWidget base class.
if not,
get the value under the '__slots__' key of the orig_vars dictionary, substitute it for slots.
define the function sql_flush with 4 arguments: style, connection, only_django set to boolean False,
_mutable is boolean True.
call the method token.split_contents, convert the result into a list and substitute it for bits.
bring integer 2 to the power of 10, multiply it by integer 64, substitute the result for DEFAULT_CHUNK_SIZE.
return value.
for every c in phone converted to lowercase, join the value under the c key of the char2number dictionary into a string, return it.
output is a list containing an element: result of the function format_html called with 2 arguments: string '<select{0}>', and return value of the function flatatt called with an argument final_attrs, substitute the result for output.
call the method sys._getframe with an argument 1, substitute the result for frame.
internal_use_only is a boolean False.
if length of unique_check equals integer 1,
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
if only_new is True,
call the function get_callable.cache_clear.
define the method handle_app_config with self class instance, app_config and dictionary options as arguments.
call the nethod self._isdst with an argument dt, if it evaluates to true,
define the method A with an argument self.
derive the class InclusionNode form the base class TagHelperNode.
define the method pop with an argument self.
if data is false and initial is true,
replace every occurrence of '\\' in url with '/'.
put a tuple with 2 elements: k and value under k key of self dictionary into a list, for every k in self.keyOrder, return resulting list.
from django.core.servers.basehttp import get_internal_wsgi_application into default name space.
get the next element of iterable self, substitute it for chunk.
substitute show_hidden_initial for self.show_hidden_initial.
call the function quote_plus with 2 arguments: result of the function force_str called with an argument url, and result of the function force_str called with an argument safe, use the result as an argument for the call to the function force_text, return the result.
call the method handler.addQuickElement with 2 arguments: string 'name' and value under the 'author_name' key of the item dictionary.
from django.core.cache.backends.db import BaseDatabaseCache into default name space.
help is a string, "Prints the custom table modifying SQL statements for the given app name(s).".
for m in merge_migrations append m.ancestry to a list, zip the resulting list into tuples of pairs, for every level in result,
convert timeout into an integer.
call the method parser.parse with an argument tuple with 2 elements strings: 'else' and 'endfilter', substitute the result for nodelistelse.
call the method copy.deepcopy with arguments self.widget and memo, substitute the result for result.widget.
if _supported is None,
remove name from existing.
substitute self.none_value for self.month_none_value.
import module re.
return value.
call the function get_template_from_string with 3 arguments: template, origin and template_name, substitute the result for template.
if label_suffix and contents are both true and last element of contents is not contained in the result of the function _, called with an argument string ':?.!'.
from django.utils.module_loading import import_string into default name space.
from django.utils.encoding import force_text and DEFAULT_LOCALE_ENCODING into default name space.
consume_next is boolean False.
if not,
for every node in compiled_parent.nodelist,
otherwise if ':' is not contained in middle and result of the function simple_email_re.match called with an argument middle, evaluates to true,
if exists return next entry from the database that cursor points at.
if match is true,
define the method __init__, with 3 arguments: self, stream_or_string and unpacked dictionary options.
substitute '%r' in string ' gettext(%r) ' with  result of the function join_tokens, called with 2 arguments: singular, and trimmed, write the result to out.
if filename is not contained in _mtimes,
return an instance of a NodeList class, created with arguments node, for every node in nodelist, and for every _, nodelist in self.conditions_nodelists.
call the method MIMEText.__setitem__ with arguments self, name and val.
substitute self.field.label for self.label.
if changes is true,
substitute value for url.
if errors is true,
call the method self.tag with 2 arguments name and func, return the result.
define the method clean with an argument self.
otherwise if char is contained in string 'dj',
call the function import_module with an argument string '%s.%s', where '%s' is replaced with app_config.name and module_to_search.
states is a dictionary with 2 arguments: appended list with an element instance of a class Tok, created with 3 arguments: "punct", result of the function literals called with an argument string "/= /" and next as a string 'reg', to the both_before, appended both_after to the previous result, for 'div' and appended list with an element instance of a class Tok, created with 3 arguments: string "regex", raw string '/([^*\\/[]|\\.|\[( [^\]\\]| \\.)*\])( [^\\/[]| \\.| \[( [^\]\\]| \\.)*\])*/[a-zA-Z0-9]*', and next as a string 'div', to the both_before, appended both_after to the previous result for 'div'.
call the method stat.S_IMODE with an argument st.st_mode, calculate binary OR with the result and stat.S_IWUSR, as operands, substitute the result for new_permission.
substitute '%s' in string 'id_%s' with name, return it.
define the method render with 2 arguments self and context.
call the method serializers.get_public_serializer_formats, substitute the result for self.serialization_formats.
substitute cached_loaders for self._cached_loaders.
if not,
convert value to uppercase, return the result.
define the function do_translate with 2 arguments: message and translation_function.
if NameError exception is caught,
call the function force_text with an argument text, substitute the result for text.
call the function date with 2 arguments: result of the call to the function datetime.now with an argument tz set to tzinfo, and self.format_string, return the result.
define the method as_table with an argument self.
call the function force_text with an argument value, substitute the result for value under the 'value' key of the final_attrs.
define the method top with an argument self.
derive the class override from the object base class.
try,
substitute Iterator for create_bound_method.
append string ', ' to field_desc.
request_repr is a string "unavailable".
set filter_func._decorated_function objects attr attribute to value.
msg is a instance of a SafeMIMEText class created with arguments: self.body, self.content_subtype and encoding.
if choice_label is an instance of tuple or list,
full_statement is a list containing: string "CREATE TABLE %s (", where %s is replaced by result of the function qn called with an argument tablename.
return boolean False.
open file named path in 'rb' mode, with file descriptor as f,
if every filter_name in strings 'escape' or 'safe',
call the function datetime.datetime with 3 arguments: value.year, value.month and value.day, substitute the result for result.
substitute .error_class for self.error_class.
call the method self._assert_mutable.
for every f in files,
if os.path has an attribute 'samefile',
if space equals integer 0,
derive class _HashedSeq from list base class.
from django.core import signals into default name space.
replace all occurrences of '\\' with '\\\\' in value, replace all occurrences of '"' with '\\"' in the previous result, replace all occurrences of "'" with "\\'" in the previous result, return the result.
compile a regex from raw string '^\.\s*(\w+)\s*', substitute it for DOT_PATTERN.
return an instance of DebugNodeList class.
call the method lookup with the encoding as the argument.
from django.conf import settings into default name space.
append k into a list for every k and v in return value of the six.iteritems function with an argument _serializers, only if v.Serializer.internal_use_only is false, return the resulting list.
format string '%+03d:%02d' with hour and minute, append it to time_str, return the result.
if response is True,
if widget is false,
substitute sys.platform for plat.
for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
if value is an instance of datetime.time,
call parser.add_argument method with '--ipv6', string '-6', action set to string 'store_true', dest set to string 'use_ipv6', default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'.
derive the class HttpResponseNotModified from the HttpResponse base class.
OPERATORS is an dictionary with 12 initial entries: result of the function inflix called with 2 arguments, integer 6, and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) or y.eval(context) is True, for 'or', result of the function inflix called with 2 arguments, integer 7, and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) and y.eval(context) is True for 'and', result of the function prefix called with 2 arguments, integer 8, and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is True for 'not', result of the function inflix called with 2 arguments, integer 9, and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is contained in y.eval(context) for 'in', result of the function inflix called with 2 arguments, integer 9, and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is not contained in y.eval(context), for 'not in', result of the function inflix called with 2 arguments, integer 10, and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '=', result of the function inflix called with 2 arguments, integer 10, and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '==', result of the function inflix called with 2 arguments, integer 10, and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) doesnt equals y.eval(context) for '!=', result of the function inflix called with 2 arguments, integer 10 and, lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is greater than y.eval(context) for '>', result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is greater than or equal to y.eval(context) for '>=', result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is smaller than y.eval(context) for '<', result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is smaller than or equal to y.eval(context) for '<=',
if last element of pieces is true,
define the function escapejs with an argument value.
call the force_str function with an argument value, substitute the result for value.
statement is an empty list.
if length of s is greater than integer 13,
if filename is an instance of MIMEBase,
try,
if settings.USE_TZ is true,
decorator function wraps with an argument fdel.
define the method __exit__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
if not,
if not,
from django.utils.encoding import force_text into default name space.
otherwise if self._delegate_text is true,
if best_doublecolon_len is greater than integer 1,
substitute last element of output for last_row.
call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
assign bits elements to yes, no and maybe, respectively.
call the server_bind method from the base class of the WSGIServer class.
if not,
if TypeError exception is caught,
call the method arg.resolve with an argument context, append the result to arg_vals.
define the method _create_mime_attachment with arguments self, content and mimetype.
if not,
for every bit in bits,
if self.is_required is boolean false and call to the method value_from_datadict from the instance of CheckboxInput class, with 3 arguments: data, files and return value of the function self.clear_checkbox_name called with an argument name, evaluates to true,
substitute value for value under the field.attname key of the data dictionary.
derive the class StreamingHttpResponse from the HttpResponseBase base class.
escaped is boolean True.
call the function number_format with an argument value, return the result.
call the function field.value_to_string with an argument obj, substitute the result for value under the field.name key of self._current dictionary.
return timezone.zone.
define the function runfastcgi with 2 arguments: argset set to an empty list and unpacked dictionary kwargs.
define the method bpython with an argument self.
plural is an empty list.
take the first i elements of string p, strip the whitespaces from the both sides, convert it to lowercase and apply on it the method, decode with an argument string 'ascii', substitute the result for name.
split part by '=' character, substitute the result for role and instructions, respectively.
for field in self if field.is_hidden is false, append field to a list, return the resulting list.
call the function io.open with 3 arguments: self.dirpath and thefile joined into a file path, string 'w', and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:
define the method upload_handlers with arguments: self and upload_handlers.
call the function re.compile with 2 arguments: raw string '<.*?>|((?:\w[-\w]*|&.*?;)+)' and bitwise OR performed with 2 operands, re.U and re.S, substitute the result for re_words.
from django.conf import settings into default name space.
get the value under ch key of the ESCAPE_MAPPINGS dictionary, if it exists substitute it for representative, if not substitute ch for representative.
args is an empty string.
define the method __call__ with arguments self and value.
if data is None,
derive the class SimplerXMLGenerator form the XMLGenerator base class.
define the method end_serialization with an argument self.
return an raw string '\"'.
if self.keep_pot is false,
from xml.sax.saxutils import XMLGenerator into default name space.
return a dictionary with an entry: self.ns for "xmlns".
raise an base.SerializationError exception with argument string "Non-model object (%s) encountered during serialization", replace '%s' with type of the obj object.
filemsg is a string 'file %s, ', where '%s' is replaced with origin.
call the function get_format_modules with an argument lang, for every module in the result,
for every loader in template_source_loaders,
call the method self.add_fields with arguments form and None.
from django.utils.formats import get_format into default name space.
return args and kwargs.
call the function import_module with an argument string '%s.formats' formated with location, which is formated with loc, yield the result.
compare is a lambda function with arguments self, a and b, return value is boolean true if a is lesser than b, otherwise is false.
import module datetime.
call the method loader.detect_conflicts, substitute the result for conflicts.
from django.forms.fields import Field and ChoiceField into default name space.
call the method __init__ from the base class of the class IncludeNode, called with 2 arguments: unpacked dictionary args, and unpacked dictionary kwargs.
get 'dependencies' attribute of the model.natural_key, substitute it for deps, if the attribute doesnt exist, deps in an empty list.
doctring
if name is true, substitute it for self.name, otherwise substitute func.__name__ for self.name.
get format_type attribute of the settings object, return it.
code is a string 'max_length'
import module sys.
otherwise if field_type equals a string 'IntegerField(' and connection.features.can_introspect_autofield is false,
if not,
derive the class SuspiciousOperation from the Exception base class.
substitute value for value under the field.name key of the self._current dictionary.
from django.utils.encoding import force_text and iri_to_uri into default name space.
if __name__ equals a string '__main__'.
__all__ is an list containing strings: 'activate', 'deactivate', 'override', 'deactivate_all', 'get_language', 'get_language_from_request', 'get_language_info', 'get_language_bidi', 'check_for_language', 'to_locale', 'templatize', 'string_concat', 'gettext', 'gettext_lazy', 'gettext_noop', 'ugettext', 'ugettext_lazy', 'ugettext_noop', 'ngettext', 'ngettext_lazy', 'ungettext', 'ungettext_lazy', 'pgettext', 'pgettext_lazy', 'npgettext', 'npgettext_lazy' and 'LANGUAGE_SESSION_KEY'.
if six.PY3 is true or os.name equals a string 'nt',
otherwise if level converted into a string equals level,
define the method compress with arguments self and data_list.
define the method __init__ with arguments self, name, value, base, sysid, pubid and notation_name.
call the function context_class with 2 arguments: _dict and unpacked dictionary containing 4 entries: context.autoescape for 'autoescape', context.autoescape for 'current_app', context.use_l10n for 'use_l10n', and context.use_tz for 'use_tz', substitute the result for new_context.
try,
append '-' to digits.
get the value under the 'extensions' key of the options dictionary, substitute it for extensions.
call the initialization method for the base class, _html_parser.HTMLParser.__init__ with self, convert_charrefs set to convert_charrefs and dictionary **kwargs as the arguments.
output is an empty list.
if not,
get 'clean_%s', where '%s' is replaced with name' attribute of the self object, call the result as an function, substitute the result for value.
raise an ValueError with an argument string "Non-reversible reg-exp portion: '(?%s'" formated with ch.
from .. import Warning, register and Tags into default name space.
if self.localize is true,
if use_l10n is true, or use_l10n is None and settings.USE_L10N is true,
from django.core.exceptions import ValidationError into default name space.
append string 'Field name made lowercase.' to field_notes.
for every dict_ in self.dicts,
define the function get_mod_func with an argument callback.
return boolean False.
if alter_sql,
if self.output_transaction is true,
for every name in bits from the start index 1 to the end index negative 2,
append pattern to tried list.
define the method B with an argument self.
raise self.warning.
import module errno.
if TypeError or ValueError exceptions are caught,
call the function smart_text with an argument obj, return the result.
decorator function register.filter with an argument is_safe set to boolean True.
decorator function register.filter with an argument is_safe set to boolean False.
raise an ImproperlyConfigured exception with argument string 'Path for saving emails is invalid: %r', replace '%r' with self.file_path.
value under the self.var_name key of the context dictionary is an list with dictionary elements with 2 entries: key for 'grouper' and val converted into a list for 'list', for every key and val in result of the function groupby, called with 2 arguments: obj_list and lambda function with an argument obj and return value as a result of the function, self.resolve_expression called with 2 arguments obj and context.
evaluate the method six.text_type(s), on the result call the method encode with the arguments encoding and errors, return the result.
use the app_config, style and connection as arguments for the call to the sql_create, sql_custom and sql_indexes functions,  append the results respectively, return the result.
if value under the 'feed_url' key of the self.feed dictionary is not None,
call the function force_text with an argument v, for every v in args, put the results in a text_args list.
import module base64.
err_msg is a string "Tried %s", where '%s' is replaced with tried.
import module warnings.
define the method extra_forms with an argument self.
define the method make_bytes with 2 arguments: self and value.
from yaml import CSafeLoader as SafeLoader into default name space.
define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
call the function m.group, if the result evaluates to true,
define the function _curried with 2 arguments: unpacked list moreargs and unpacked dictionary morekwargs.
cc is a dictionary populated with items by calling function dictitem with el as argument, for every el in cc.
define the method get with 5 arguments, self class instance, key, default set to None and version set to None.
define the method keys with an argument self.
call the function self._key_to_file with key and version as arguments, substitute it for fname.
breaks from the smallest enclosing loop.
try,
substitute len for _len.
define the method __repr__ with an argument self.
call the method self._archive_cls with an argument file, call the result with an argument file, substitute the result for self._archive.
for every app_name in app_names.
if format is not contained in _serializers,
if package doesnt have an 'rindex' attribute,
if want_unicode is true,
define the method _reset_dicts with 2 arguments: self and value set to None.
call the function formatdate with an argument epoch_seconds, substitute the result for rfcdate.
self.tokens is an empty dictionary.
derive the class Form from the base classes DeclarativeFieldsMetaclass and BaseForm.
define the method exit_command with an argument self.
if invalid_apps in not empty,
define the method eval with 2 arguments: self and context.
import module subprocess.
decorator function register.filter with an argument is_safe set to boolean True.
get the value under the settings.LANGUAGE_COOKIE_NAME key of the request.COOKIES dictionary, substitute it for lang_code.
substitute sys.stdin for fd.
define the method complain with 3 arguments: self, unpacked dictionary wargs and unpacked dictionary kwargs.
if UnicodeDecodeError exception is caught,
call the timestamp.strftime with string '%Y%m%d%H%M%S' as an argument, substitute the result for changeset.
call the method d.quantize with 3 arguments: exp, ROUND_HALF_UP and instance of Context class created with prec as prec, call the method as_tuple on the result, substitute the result for sign, digits and exponent, respectively.
set the attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary to value, return it.
define the method __repr__ with an argument self.
call the function datetime.datetime with utc as argument if call to the is_aware(d) returns True, if not None is the argument, store the result in now.
substitute func.__doc__ for compile_func.__doc__.
call the method context_match.group with an argument integer 1, substitute the result for message_context.
if arg is None
try,
derive the class MemoryFileUploadHandler from the FileUploadHandler base class.
operations is an empty list.
return instance.
for every dirname in list dirnames,
append rel_model to deps.
return an instance of IfEqualNode class, created with 5 arguments: val1, val2, nodelist_true, nodelist_false and negate.
if not,
import module sys.
from io import BytesIO into default name space.
call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references, use the result as an argument for the call to the method final_output.extend.
return view_func.
unique_check is a list with elements field, for every field in unique_check if field is not equal to self.fk.name.
replace hextets list from the best_doublecolon_start index to best_doublecolon_end index with an empty string.
from io import BytesIO into default name space.
from django.core.management.templates import TemplateCommand into default name space.
call the method self.characters with an argument contents.
call the self._lock.writer method, with the result perform the following,
define the method __init__ with 2 arguments: self and dict_ set to None.
call the method re.compile with 2 arguments: raw string """^(?: (?P<addr> (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |""" """(?P<ipv6>\[[a-fA-F0-9:]+\]) | (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) ):)?(?P<port>\d+)$""", re.X
call the function initial_value, substitute the result for initial_value.
call the function warnings.warn with 3 arguments: string "resolve_variable() is deprecated. Use django.template. Variable(path).resolve(context) instead", RemovedInDjango20Warning, and stacklevel set to integer 2.
call the function _is_shorthand_ip with an argument ip_str, if it evaluates to false,
call the method connection.ops.sql_flush with arguments: style, tables, seqs and allow_cascade, substitute the result for statements.
raise an TemplateSyntaxError exception with an argument error_msg.
define the method configure_root with 3 arguments: self, config and incremental set to boolean False.
if timezone has an attribute 'localize',
call the method deactivate.
substitute subject for self.subject.
call the method self.validate_unique.
call the function force_bytes with 2 arguments: safe and self.encoding, substitute it for safe.
if not,
define the method delete with arguments self and name.
if cmatch is true,
if finder is None,
if PY3 is true,
from django.core.handlers import base into default name space.
self.attrs is an empty dictionary.
derive the class MultipleObjectsReturned from the Exception base class.
from django.conf import settings into default name space.
substitute before_import_registry for register_to._registry.
call the method connection.cursor, with the result as cursor,
if not,
define the method get_form_error with an argument self.
if fourth element of version equals to string 'alpha' and fight element of version equals to integer 0,
if ImportError exception is caught.
if comment_lineno_cache is not None,
if value is an instance of six.string_types class,
return self.hashvalue.
map elements of self._iterator through self.make_bytes function, return the result.
define the function Deserializer with arguments object_list and unpacked dictionary options.
substitute link_next for value under the NEXT key of the link_prev dictionary.
from django.utils import six into default name space.
derive the class SplitDateTimeField from the base class MultiValueField class.
requires_system_checks is boolean False.
define the function safeseq with an argument value.
bits is an empty list.
define the function strip_tags with an argument value.
self.deleted_objects is an empty list.
for every arg in s, evaluate the function force_bytes for the arguments arg, encoding, strings_only and errors, put the results in a list, join the list elements in a string separated by whitespace separator, return the string as the bytes string.
return a tuple with 2 elements: integer 0 and second element of k.
return the media field of the first element of self.forms.
if not,
if six.text_type is contained in resultclasses, cls._delegate_text is boolean True, otherwise it is boolean False.
define the function flatten_result with an argument source.
subtract length of dec_part from decimal_pos, multiply the number of character '0' by the result, append the resulting string to dec_part, substitute it for dec_part.
from django.utils import six into default name space.
call the function ugettext_lazy with an argument string 'Clear', substitute the result for clear_checkbox_label.
substitute value under the 'interactive' key of the options dictionary for interactive.
call the function re.compile with 2 arguments: raw string '^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' and re.IGNORECASE, substitute the result for language_code_re.
define the method reader_leaves with an argument self.
write a white space to the self.stream file stream.
if s is an instance of an object Promise.
if integers 3 and 2 in a tuple are smaller than the sys.version_info and sys.version_info is smaller than integers 3,4 and 4 in a tuple, respectively,
call the method to_python with an argument value, from the base class of the IntegerField class, substitute the result for value.
from django.core.exceptions import ImproperlyConfigured and DjangoRuntimeWarning into default name space.
if obj is an instance of datetime.datetime,
if max_value is not None,
substitute complain for __imul__.
define the method b with an argument self.
return integer 0 and ch2.
define the method _itervalues with an argument self.
return nothing.
if self.file has an attribute 'name',
return value under the name key of the files dictionary, if it doesnt exists, return None.
from django.utils.encoding import force_bytes into default name space.
define the method media with an argument self.
return integer -1.
call the function reloader_thread.
return self._urlconf_module.
call the function register_serializer with 3 arguments: format, value under the format key of the BUILTIN_SERIALIZERS dictionary and serializers.
import module glob.
match regex datetime_re with value, substitute the result for match.
return result.
call the method self.z, substitute the result for day_of_year.
if p.image is not empty,
if value is contained in self.empty_values,
call the function escape with an argument text, return the result.
call the method handle_default_options with an argument options.
define the method N with an argument self.
call the method timezone.normalize with an argument value, substitute the result for value.
_translations is an empty dictionary.
if not,
if KeyError exception is caught,
return self._upload_handlers.
format translated with rhs, substitute the result for translated.
substitute value under the 'use_ipv6' key of the options dictionary for self.use_ipv6.
if the value of the kwargs dictionary under the key k is not equal to v,
call the method parser.parse with an argument tuple with an element string 'endifchanged', substitute the result for nodelist_false.
substitute value under the field_name key of the self.fields dictionary for formfield.
call the method fp.read, substitute the result for src_data.
is_usable is boolean True.
define the function _decorator with an argument view_func.
if PY3 is true,
call the method datetime.datetime with an argument unpacked dictionary kw, return the result.
if _cached_filenames is empty and settings.USE_I18N is True,
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
if third element from the end of the args equals string 'as',
if self.field.localize is true,
format string ' gettext(%r) ' with g, write it to out.
substitute link for values under the NEXT key of the last dictionary and PREV key of the root dictionary.
from __future__ import unicode_literals into default name space.
append key to self.keyOrder dictionary.
append name to self._changed_data list.
message is an instance of the ValidationError class created with an argument message.
substitute field.rel.to with rel_model.
raise CommandError exception with string "This script should be run from the Django Git checkout or your project or app tree, or with the settings module specified.", as argument.
define the __init__ method with 6 arguments: self, name, content_type, size, charset and content_type_extra set to None.
if settings.FILE_UPLOAD_TEMP_DIR is true,
if 'error_messages' is contained in kwargs,
__author__ is a string "Benjamin Peterson <benjamin@python.org>".
self.cookies is an instance of a class SimpleCookie.
derive class InvalidCacheBackendError from the ImproperlyConfigured base class.
substitute value under idx key of dictionary d for d.
call the method __init__ with an argument data, from the base class of the class DictWrapper.
call the function datetime.date.today, substitute the year field of the result for this_year.
use global variables _format_cache and _format_modules_cache.
call the function re.compile with an argument raw string "_\(((?:".*?")|(?:'.*?'))\)", substitute the result for constant_re.
call the function termcolors.parse_color_setting with DJANGO_COLORS as an argument, assign the result to color_settings.
from django.utils.deprecation import RemovedInDjango20Warning into default name space.
property decorator,
define the function yesno with 2 arguments value and arg set to None.
define the method management_form with an argument self.
substitute timeout for self.default_timeout.
define the function become_daemon with 4 arguments: our_home_dir set to '.', out_log set to a string '/dev/null',
try,
call the method self.create_variable_node with an argument filter_expression, substitute the result for var_node.
for every key in self,
read data from buf file stream, yield the result.
if TypeError or ValueError exceptions are caught,
otherwise if f.unique is true,
split into two parts string main_value_pair at character ':', substitute the parts for name and value, respectively.
define the method copy with an argument self.
if not,
raise an TemplateSyntaxError exception with an argument string "Invalid syntax in widthratio tag. Expecting 'as' keyword".
call method request.META.get with arguments header and None.
skip this loop iteration.
call the function os.getpid, substitute it for pid.
call the method self.renderer with 4 arguments: name, value, final_attrs and choices, return the result.
substitute messages.error_list for the value under the field key of the self.error_dict dictionary.
from __future__ import unicode_literals into default name space.
substitute file for self.file.
compile the regex from the raw string "((^|[^%])(%%)*%[sy])", substitute the result for _illegal_formatting.
if want_unicode is false,
if found is true,
otherwise if result of the call to the function _len with an argument cache is greater than or equal to maxsize,
define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
call the method field_node.getElementsByTagName with an argument string 'None', if it evaluates to true,
for every supported_code in _supported,
define the method has_changed with an argument self.
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
content_length is integer 0.
msg is a string "%s doesn't look like a module path" formated with dotted_path.
append path to self._js.
if not,
define the method cache_key with 3 arguments: self, template_name and template_dirs.
call the function date.strftime with an argument string '%s, %%d %s %%Y %%H:%%M:%%S ' formated with dow and month, substitute the result for time_str.
from django.utils.deprecation import RemovedInDjango19Warning and RemovedInDjango20Warning into default name space.
do nothing.
use_func is boolean False.
want_unicode is boolean True.
convert value, self.sep and return value of the function timestamp, concatenate them, substitute the result for value.
if not,
return boolean False.
try,
module_values is a set created from the elements of sys.modules.values method return value.
add bits to a tuple, return it.
otherwise if value is an instance of decimal.Decimal, float or six.integer_types,
divide negative dklen with hlen, substitute floored result for l.
call the method self.get_backend_timeout with argument timeout, substitute the result for timeout.
values is an dictionary created with result of the method val.resolve called with an argument context, for key, for every key and val in return value of the function six.iteritems called with an arguments self.extra_context.
call the function do_translate with 2 arguments: message and string 'ugettext', return the result.
convert items of attrs dictionary to list of tuples, for every attr and value in it,
call the method parser.add_argument with 6 arguments: string '--locale', string '-l', default as an empty list, dest as a string 'locale', action as a string 'append' and help as a string, 'Creates or updates the message files for the given locale(s) (e.g. pt_BR). Can be used multiple times.'.
define the method __next__ with an argument self.
if LookupError exception is caught,
 if top_errors is true,
join path and entry into a file path, if it exists,
if not,
try,
if not,
from django.apps import apps into default name space.
if action equals to string "apply_start",
if field.rel.to._meta.pk.rel is true,
call the method self._callback_strs.update with an argument pattern._callback_strs.
return self.data.day.
encoding is None.
_translations dictionary value, under the language key is an instance of DjangoTranslation class, created with an argument language.
call the cursor.close method.
if ValueError or TypeError exceptions are caught,
try,
raise a NotImplementedError with an argument string
substitute Lexer and Parser for lexer_class and parser_class.
if arg is smaller than integer 1,
otherwise if subcommand equals a string 'version' or self.argv, without the first element equals a list containing a string '--version'
fetch one entry from the database that cursor points at, substitute it for the result.
return lambda function with text as argument and return value being result of the function colorize, called with 3 arguments: text, opts and unpacked dictionary kwargs.
define the _setup method with argument self.
define the function compare_ordering_key with an argument k.
convert self.index into a string and append it to '_' string, substitute it for value under the 'id' key of self.attrs dictionary.
import module warnings.
LockFileEx.argtypes is a list containing 6 elements: HANDLE, DWORD, DWORD, DWORD, DWORD and LPOVERLAPPED.
call the method widget_attrs with an argument widget, from the base class of the DecimalField class, substitute the result for attrs.
must_be_first is boolean False.
return path.
call the function timezone.make_aware with arguments value and current_timezone, return the result.
substitute Field.creation_counter for self.creation_counter.
from django.utils.formats import localize into default name space.
raise a NotImplementedError with an argument string 'subclasses of Deserializer must provide a __next__() method'.
call the method re.compile with 2 arguments: raw string '^(?P<value>"Plural-Forms.+?\\n")\s*$', and result of the bitwise OR performed on the re.MULTILINE and re.DOTALL operands, substitute the result for plural_forms_re/
if value under the DEFAULT_CACHE_ALIAS key of caches dictionary equals to other, return boolean True, otherwise return False.
define the function unordered_list with 2 arguments value and autoescape set to None.
define the method __init__, with 3 arguments: self, m2m and data set None.
from __future__ import unicode_literals into default name space.
define the function rmtree_errorhandler with 3 arguments func, path and exc_info.
split str_number by '.', substitute the result for int_part and dec_part, respectively.
define the function avoid_wrapping with an argument value.
otherwise if file_name is not an instance of six.string_types and call to the function is_iterable with an argument file_name, evaluates to true,
open_tags is an empty list.
derive the class RadioChoiceInput from the ChoiceInput base class.
substitute value under the NEXT key of the oldroot dictionary for root and first element of nonlocal_root.
if not,
call the get_script_name function with environ as argument, substitute the result for script_name.
return self.token.
derive the class FileBasedCache from BaseCache base class.
get the value under formatter key of dictionary under 'formatters' key of self.config dictionary, substitute the result for formatter.
if token.token_type equals TOKEN_BLOCK and token.contents equals endtag,
if language_code is not contained in self._namespace_dict,
return an empty string.
if self.field.show_hidden_initial is true,
return dec.
create a class class which name is generated by converting 'FormSet' into a string and appending it to form.__name__, is derived from the formset base class and with fields contained in attrs, return an instance of the obtained class.
if self.selected_fields is None or field.attname is contained in self.selected_fields,
self.translate is boolean False.
from functools import wraps into default name space.
call the method parser.add_argument with 5 arguments: string '--all', action set to string 'store_true', dest set to string 'all', default set to boolean False and help set to a string 'Display all settings, regardless of their value. Default values are prefixed by "###".'
return result.
call the method p.find with bytes string '=' as an argument, substitute the result for i.
call the function allow_lazy with 2 arguments: unescape_entities and six.text_type, substitute the result for unescape_entities.
call the method pickle.dumps with value and pickle.HIGHEST_PROTOCOL as arguments, substitute it for pickled.
define the method __getattr__ with self and name as arguments.
factor is integer 0.
import module socket.
call the method self.validate_key with key as argument.
define the function urlencode with 2 arguments query and doseq set to integer 0.
call the method form.add_prefix with an argument self.fk.name, use the result as an key to get the value of the form.data dictionary, assign it value None.
do nothing.
substitute cls.__bytes_cast for cls.__bytes__.
from django.forms.widgets import SelectMultiple, HiddenInput, MultipleHiddenInput into default namespace.
as_form is boolean True.
finally,
is_localized is boolean False.
callback is an lambda function with an argument response and with return value result of the method middleware.process_response, called with 2 arguments: request and response.
call the function _ with an argument string 'midnight', return the result.
import module sys.
call the method clean with an argument value from the base class of the class TypedMultipleChoiceField, substitute the result for value.
call the urljoin function with arguments: self.base_url and result of the call to the function filepath_to_uri with argument name, return the result.
return nothing.
define the function ifequal with 2 arguments: parser and token.
import module warnings.
define the method __str__ with an argument self.
import module json.
split ip_str into parts by ':', for every x in the result, calculate length of x, if any is smaller than integer 4,
define the method validate_unique with an argument self.
skip this loop iteration,
call the get_script_name function with environ as argument, use the result as an argument for call to the set_script_prefix function.
if upto is not equal to length of token,
sort result in reversed order by the key as lambda function with an argument k and reeturn value second element of k.
raise an TemplateSyntaxError exception "'%s' is decorated with takes_context=True so it must have a first argument of 'context'", where '%s' is replaced with name.
return attrs.
substitute timeout for self.timeout.
data is an empty list.
if base has an attribute 'base_fields'.
if keys is true,
attachment is an instance of a class MIMEBase, created with the arguments basetype and subtype.
from django.core.files import temp as tempfile into default name space.
if line ends with a new line character substitute width incremented by integer 1 for max_width, if not substitute width for max_width.
call the method self.handle_field with arguments obj and filed.
split file by ',' character, apply on its every element a lambda function which takes an argument x, and returns x striped of the surrounding whitespaces, extend the extra_files with the mapped list.
curr is an empty string.
call the method handler.addQuickElement with 2 arguments: string 'rights' and value under the 'item_copyright' key of the item dictionary.
otherwise if klass is a subclass of logging.handlers.SMTPHandler and string 'mailhost' is contained in config,
compare is a lambda function with arguments self, a and b, return value is boolean true if a is greater than b, otherwise is false.
call the function pgettext with an argument 'String to return when truncating text', '%(truncated_text)s...', substitute the result for truncate.
if not,
if value under the 'item_copyright' key of the item dictionary is not None,
substitute first element of fks_to_parent for fk.
property decorator.
value under the MIN_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class, created with 2 arguments: required as boolean False and widget set to HiddenInput.
if form.cleaned_data is true and value under the field key of form.cleaned_data dictionary is not None, and value under the unique_for key of form.cleaned_data dictionary is not None,
get the value under the 'charset' key of the content_type_extra dictionary, substitute it for charset.
convert to strings and concatenate context, CONTEXT_SEPARATOR and message, substitute the result for msg_with_ctxt.
nonlocal_root is an list with an element root.
substitute allow_files and allow_folders for self.allow_files and self.allow_folders.
import module copy.
call the method self.has_key with an argument key, return the result.
otherwise if value is an instance of decimal.Decimal, float or six.integer_types,
if call to the self.is_valid method evaluates to false or self.can_order is false,
define the function get_storage_class with argument import_path=None defaulting to None.
raise an ValueError with an argument string "MultiValueDict.update() takes either a MultiValueDict or dictionary".
call the method bpython.embed.
call the method self.stdout.write, with an argument string "Rendering %s template files with filenames: %s\n", where '%s' is replaced with app_or_project and extra_files joined into a string, separated by a string ', '.
evaluate method connection.cursor, with return value as curs,
from django.utils import termcolors into default name space.
if AttributeError exception is caught,
if self.merge and conflicts are both true,
substitute value under name key of handlers dictionary for handler_config.
__all__ is a tuple containing strings: 'LOCK_EX', 'LOCK_SH', 'LOCK_NB', 'lock' and 'unlock'.
self.verbatim is boolean False.
derive the class ViewDoesNotExist from the Exception base class.
int_part_gd is an empty string.
substitute settings.DEFAULT_CHARSET for self._encoding.
from django.core.exceptions import AppRegistryNotReady into default name space.
if six.PY2 is true,
if response is True,
set accessor_name of the self.object to object_list.
get attribute real_name from the trans object, return it.
derive the class ModelChoiceIterator from object base class.
derive the class RemovedInDjango19Warning from DeprecationWarning base class.
call the function copystat with old_file_name and new_file_name as arguments.
call the method self.instance.full_clean with 2 arguments: exclude set to exclude and validate_unique set to boolean False.
if settings.DEBUG is true,
raise an AttributeError exception with an argument string: "'%s' object has no attribute 'cleaned_data'", where '%s' is replaced with self.__class__.__name__.
if not,
substitute EscapeBytes for EscapeString.
if allow_overwrite is boolean False and call to the os.access function with arguments new_file_name and os.F_OK evaluates to boolean True,
if settings.TEMPLATE_DEBUG is true,
substitute second element of plan_node for title.
if mtime is different than the value of dictionary _mtimes under the key filename,
call the method self.sequence.resolve with 2 arguments: context and boolean True, substitute the result for values.
from django.utils.safestring import mark_safe and SafeData into default name space.
call the method self.namelist, if the length of the result is not integer 1,
do nothing.
from __future__ import unicode_literals into default name space.
call the method cls.__promise__ with 3 arguments: resultclass, k and v, substitute the result for meth.
from django.core.cache import caches into default name space.
call the method self.get_json_data with an argument escape_html, use the result as an argument for the call to the json.dumps function, return the result.
define the method set_many with 4 arguments: self, data, timeout set to DEFAULT_TIMEOUT and version set to None.
return hard copy of self.keyOrder elements.
call the method self.data.weekday, use the result as an key for obtaining WEEKDAYS_ABBR dictionary value, return it.
from django.core.management.utils import handle_extensions into default name space.
define the method __init__ with 4 arguments: self, template, unpacked list args and unpacked dictionary kwargs.
call the method self.file.write with argument raw_data.
define the function urlizetrunc with 3 arguments value, limit and autoescape set to None.
update flat dictionary with d.
import module locale.
if name is not None,
if mem_args is contained in cache,
if first element of tzinfo equals '-',
convert self.object_list to a list.
define the method add_css with arguments self and data.
define the initialization method __init__ with self class instance and environ as arguments.
if not,
TRAILING_PUNCTUATION is a list with 7 elements: '.', ',', ':', ';', '.)', '"' and '\''.
define the method modified_time with arguments self and name.
reporter is an instance of ExceptionReporter class, created with 3 arguments: request, is_email as boolean True, unpacked list exc_info.
extend the self.error_list list with message.error_list.
from __future__ import unicode_literals into default name space.
status_code is an integer 400.
call the method self.parse_name with an argument fixture_label, substitute the result for fixture_name, ser_fmt, cmp_fmt, respective.
call the method self.represent_scalar with 2 arguments: string 'tag:yaml.org,2002:str' and data converted into a string, return the result.
initial is an empty list.
return None.
if not,
if not,
substitute '%s' in string '<%s %s %s>' with self.__class__.__name__, self.name and self.regex.pattern, respectively, use it as an argument for the call to the force_str function, return the result.
from django.utils.functional import allow_lazy into default name space.
if ch is contained in string '*?+',
if self.min_value is not None,
if parser doesnt have an '_namedCycleNodes' attribute,
define the method regex with an argument self.
find the first, second and third subgroup of the m regular expression match, assign the result to the attrname, rest and attrvalue, respectively.
call the method parser.add_option with 8 arguments: string '-v', string '--verbosity', action set to string 'store', dest set to string 'verbosity', default set to string '1', type set to int, choices is a list, containing integers: 0, 1, 2 and 3,
convert self.dict into boolean, return the result.
args is a string '[fixture ...]'.
define the function _replace_entity with an argument match.
if year is lesser than integer 70,
write ',' to the self.stream file stream.
call the method self.add_root_elements with an argument handler.
raise an ValidationError with an argument errors.
finally perform,
get the unicode representation of the absolute path of base, substitute it for base_path.
define the function get_valid_filename with an argument s.
directories, files are empty lists.
get the attribute 'extend' of the cls object, if it exists substitute it for extend, if not extend is boolean True.
call the method self._ordering.sort with an argument key as compare_ordering_key.
if AttributeError exception is caught,
for every form in valid_forms,
if self._wrapped is empty,
call the function get_fixed_timezone with an argument offset, substitute the result for tzinfo.
set attr.name attribute of the _MovedItemst object to attr.
from django.utils.safestring import mark_safe into default name space.
define the function boolean_check with an argument v.
do nothing.
if NotImplementedError exception is caught,
processors is an empty list.
call the method self.stdout.write with string "  No migrations to apply." as an argument.
third element of url_fields is an empty string.
substitute auto_id for self.auto_id.
otherwise if value under the "author_name" key of the item dictionary is true,
found is boolean True.
define the method __iter__ with an argument self.
buffer_types is a tuple with 2 elements bytearray and memoryview.
call the method self.incr_version with key, negative delta and version as arguments.
return an empty list.
import readline.
return boolean True.
try,
define the function localtime with 2 arguments: value and timezone set to None.
return self.
call the method apps.setdefault with 2 arguments: app_name and an empty list, extend the resulting list with namespaces_list.
substitute val_expr for self.val_expr.
call the function binascii.hexlify with an argument x, convert the result to base 16 integer, return the result.
put elements of validators.EMPTY_VALUES to a list, substitute the result for empty_values.
var_obj is None.
break the loop execution.
call the function bytes with an argument value, return the result.
if self.timezone is true, call the method self.timezone.tzname with an argument self.data, substitute the result for name, otherwise name is None.
if bf.label is true,
call the method query.items, substitute the result for query.
substitute value under the database key of the connections dictionary for connection.
if not,
if value is not an instance of list or tuple types,
try,
if TypeError or ValueError exceptions are caught,
tags is a list containing results of the function re.escape with an argument tag, for every tag in tags split into words.
if value equals self.empty_value or value is contained in self.empty_values,
define the function pbkdf2 with 5 arguments: password, salt, iterations, dklen set to integer 0 and digest set to None.
define the method __nonzero__ with an argument self.
substitute link_prev for value under the PREV key of the link_next dictionary.
call the method datetime.timedelta with an argument seconds set to integer 1, increment delta by it.
return boolean True.
if new_name ends with string '_id',
from io import BytesIO into default name space.
return neg and res.
if args in true,
define lambda function that returns self.file.isatty field, use it as an argument for property function, put the result in isatty.
for every i in sequence of integers from 0 to result of the method self.total_form_count, call the method self._construct_form, with an argument i, append the result to a list, substitute the resulting list for forms.
from django.utils.safestring import SafeData, EscapeData, mark_safe and mark_for_escaping into default namespace.
call the method self.configurator.convert with an argument value, substitute the result for result.
if not,
update defaults dictionary with kwargs.
define the method add_arguments with 2 arguments self and parser.
get the value under the self key of the context.render_context dictionary, substitute it for cycle_iter.
do nothing.
plural is an empty list.
define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
call the method self.create_parser with arguments prog_name and subcommand.
if self.use_natural_foreign_keys is true and field.rel.to has an attribute 'natural_key',
ser_fmt is None.
call the method test_runner_class.add_arguments with an argument parser.
get the value under the 'shutdown_message' key of the options dictionary, if it exists substitute it for shutdown_message, if not, shutdown_message is an empty string.
raise an TemplateSyntaxError exception with an argument string "Searching for value. Unexpected end of string in column %d: %s", where '%d' is replaced with i and '%s' is replaced with subject.
if threading is true,
call the function glob.glob with an argument: string '/*' appended to self.default_locale_path converted into a string, filter out the results for which function os.path.isdir returns false, substitute the result for locale_dirs.
call the method cursor.execute with string "SELECT COUNT(*) FROM %s" as argument, substitute the '%s' with table.
try,
filemsg is an empty string.
if IOError exception is caught,
define the method resolve_variable with 2 arguments: path and context.
format truncate with a dictionary with an element: text for 'truncated_text', return the result.
do nothing.
for every k and v in items of dictionary kwargs, respectively,
if not,
msg is a string "The use of the language code '%s' is deprecated. Please use the '%s' translation instead.".
if self.timezone is None,
replace '%s' in string "%s, from %s" with second and first element of the first targets row, respectively, append it to the string "  Target specific migration: ", use it as the argument for the call to the self.style.MIGRATE_LABEL method, call the self.stdout.write method with previous return value as an argument.
substitute app_template_dirs for template_dirs.
call the method self.download with an argument template, substitute the result for absolute_path.
substitute CacheEntry for self.cache_model_class.
if LookupError or BinasciiError, renamed to e, exceptions are caught.
if value under the 'language' key of the self.feed dictionary is not None,
args is an empty tuple.
write msgs to fp.
derive the class SyndicationFeed from the object base class.
call the function force_text with an argument redirect_to, use the result as an argument for the call to the function urlparse, substitute the result for parsed.
substitute socket.AF_INET6 for self.address_family.
if errors is true,
__all__ is a list containing next strings, 'CheckMessage', 'Debug', 'Info', 'Warning', 'Error', 'Critical',
substitute value under level key of logging._levelNames dictionary for rv.
derive class CheckMessage from object base class.
raise an NotImplementedError exception with an argument sting 'subclasses of LazyObject must provide a _setup() method'.
define the function first with an argument value.
if six.PY2 is true,
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'test_label', nargs set to string '*', and help is a string 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method'.
substitute value for value under the field.name key of the data dictionary.
substitute value for self.cookies dictionary value under the key key.
derive the class EscapeText from six.text_type and EscapeData base classes.
call the function format_html with 3 arguments: string '<ul class="{0}">{1}</ul>', self.error_class and return value of the function, format_html_join, called with 3 arguments: empty string, string '<li>{0}</li>', tuple containing results of the function, force_text with an argument e, for every e in self, return the result.
return an instance of EscapeText, created with an argument s.
call the method self.get_template_sources with 2 arguments template_name and template_dirs, for every filepath in the result,
if not,
call the function urlunsplit with an argument tuple with 4 elements: scheme, netloc, path, query and fragment, substitute the result for url.
call the function is_ignored, with arguments: file_path and self.ignore_patterns, if it evaluates to true,
if unpack_ipv4 is true,
if middle ends with closing and count of occurrence of closing in middle equals count of occurrence of opening in middle incremented by one,
import pyinotify module.
substitute old_mod for self.mod.
add self.form.required_css_class to extra_classes set.
from django.db import models and router into default name space.
substitute '%s' in a string "  %s:\n" with return value of the self.style.MIGRATE_LABEL method called with argument writer.filename, write the result to self.stdout.
guid_attrs is an empty dictionary.
call the method self.connection.login with arguments self.username and self.password.
message is an string 'Unknown field(s) (%s) specified for %s'.
if self.method is not equal to string 'POST',
if value is not an instance of bytes or six.text_type classes,
if length of name is greater than integer 255,
if new_conn_created is true,
if unpack is true,
substitute settings.ROOT_URLCONF for urlconf.
convert ret to a boolean, return it.
missing_args_message is a string "You must provide an application name.".
call the method field.widget.value_from_datadict with 3 arguments: self.data, self.files and return value of the method, self.add_prefix called with an argument name, substitute the result for value.
add self.buffer and self._read_limited method return value together, store it in result.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
try,
new_second_item is an empty list.
substitute iter for iterbytes.
convert second item to an iterable,
call the CacheHandler function, substitute the result for caches.
call the DefaultCacheProxy function, substitute it for cache.
indexes is an empty dictionary.
if ignore_failures is true,
if TemplateDoesNotExist exception is caught,
call the method self.setFeature with 2 arguments: handler.feature_external_pes and boolean False.
call the method handler.addQuickElement with 3 arguments: string 'title', an empty string and a dictionary with 3 entries: field url of the value under the 'enclosure' key of the item dictionary for 'url', field length of the value under the 'enclosure' key of the item dictionary for 'length', and field mime_type of the value under the 'enclosure' key of the item dictionary for 'type'.
raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag or filter in tag library '%s'", where '%s' is replaced with name and taglib.
if CommandError exception is caught,
for every format in BUILTIN_SERIALIZERS,
if ImportError, rename it to e, exception is caught,
return data.
get the value under the field key of the html dictionary, append it to output.
if middleware has an attribute 'process_response',
join elements of output into a string, return the result.
define the function cut with 2 arguments value and arg.
call the method self.as_data, for every error in the result.
from django.core.management import call_command into default name space.
if fist and second element of sys.version_info equals to integer 3 and 2, respectively,
for statements is sql,
current_fields is an empty list.
call the method sys.stderr.write with an argument string "  Unable to load the flup package.  In order to run django\n".
return an instance of BoundField class, created with arguments self, field and name.
result is an empty list, upto is integer 0.
define the method extend_nodelist with 4 arguments: self, nodelist, node and token.
define the method convert with 2 arguments: self and value.
call the method self.extract with an argument absolute_path, return the result.
define the method __init__ with 2 arguments self and func.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string, '"Upload a valid image. The file you uploaded was either not an image or a corrupted image."' for 'invalid_image'.
help is a string "Checks the entire Django project for potential problems.".
substitute propagate for logger.propagate.
return self._files.
if other is instance of EmailValidator and, self.domain_whitelist equals to other.domain_whitelist, and self.message equals to other.message, and self.code equals to other.code, return boolean True, otherwise return boolean False.
lang is None.
return a list containing results of the function format_html called with 2 arguments: string '<script type="text/javascript" src="{0}"></script>' and absolute file path of the path, for every path is self._js.
call the mail.attach_alternative method with html_message and string 'text/html' as arguments.
call the method render from the base class of the class NullBooleanSelect, with 4 arguments: name, value, attrs and choices, return the result.
if self.size is greater than chunk_size, return boolean True, otherwise return boolean False.
self.verbose_name is a string 'cache entry'.
if next_item is true and next_item is an instance of list or tuple type,
define the method _get_size with argument self.
pop the value under the 'stream' key of the kwargs dictionary, if it exists replace it for self.stream, if not replace sys.stdout for self.stream.
return an empty string.
define the method has_key with 2 arguments: self and key.
call the method expires.utcnow, subtract the result from expires, substitute the result for delta.
derive the class SkipFile from the UploadFileException base class.
return boolean True.
if ValueError exception is caught,
get the value under the self.data.month key of the MONTHS_3 dictionary, call on it the method title, return the result.
derive the class StopUpload from the UploadFileException base class.
if value is false,
substitute boolean False for cache_choices.
if message_context is true,
define method parse_starttag with self class instance and i as the arguments.
if match is false or call to the method match.group with an argument integer 1 evaluates to boolean false,
sort elements of kwds, substitute the result for sorted_items.
call the method sql_flush with 5 arguments: self.style, connection, only_django set to boolean True, reset_sequences set to reset_sequences, allow_cascade set to allow_cascade, substitute the result for sql_list.
call the function format_html with 2 arguments: string '<input{0} />', return value of the function flatatt, called with an argument, input_attrs, append the result to inputs list.
try,
get opt attribute of the opts object, substitute it for value.
try,
if with_base_fields is true,
substitute '%s' is "%s.process_response didn't return an HttpResponse object. It returned None instead.", with the name of the type of the self class instance of the middleware_method, raise the ValueError with the previous as the argument.
import stat.
if 'id' is contained in self.attrs,
get the 'do_not_call_in_templates' attribute of current object, if it exists and is true,
substitute the datetime.max for exp.
if empty_label is not None,
assign the bits elements to tag, this_value_expr, max_value_expr, max_width, as_ and asvar.
if not,
try,
import pickle.
form._meta.fields is a list created out of form._meta.fields elements.
if not,
request_finished is a instance of a Signal class.
for every ip in tuple containing 3 elements: self._ipython, self._ipython_pre_100 and self._ipython_pre_011,
substitute tokens for self.tokens.
call the method selected_choices.remove with an argument option_value.
subtract self.STDOFFSET with self.DSTOFFSET, substitute the result for self.DSTDIFF.
increment line by buffer_.
if the Exception exception is caught,
from django.core.management.base import BaseCommand and CommandError into default name space.
get the index name, of the parser._namedCycleNodes, return the result.
return self.field.widget.is_hidden,
if not,
if bytes_read is greater than rollback,
if bf.is_hidden is true,
for every closable in self._closable_objects,
derive the class ForNode from Node base class.
call the method clear from the base class of the class SortedDict.
for every first_select in return value of the function _parse_date_fmt.
modify value at the key 'Location' of the dictionary response by applying function request.build_absolute_uri on it.
if as_form is true,
call the function six.reraise with 3 arguments: ImportError, instance of ImportError class created with an argument msg, and third element of result of the function sys.exc_info.
nodelist_true_output is None.
if test_runner_class has an 'option_list' attribute,
substitute self for result.parent.
if member is a directory,
try,
call the function sys.exit with an argument integer 1.
return boolean False.
if PY3 field of module six is boolean True,
from django.core.exceptions import ImproperlyConfigured into default name space.
derive the class MultiValueDict from the dict base class.
substitute the last element of parts for ser_fmt.
if length of args is greater than integer 1,
raise an exception.
if value under the 'ttl' key of the item dictionary is not None,
if url starts with '///',
substitute the value under the pk_key key of the self.data dictionary for pk.
get 'fields' attribute from the options object, if it exists substitute it for self.fields, if not self.fields is None.
if sum of the top and self.orphans is greater or equal to self.count,
if sequence_sql is true,
call the function os.chmod wiht arguments filename and new_permissions.
substitute dicts for self.dicts.
call the method self.read, substitute the result or self._body.
substitute labels for value under the 'labels' key of attrs dictionary.
derive the class ValidationError from the Exception base class.
label is a string 'label'
get the value under the key key of the self.template_cache dictionary, substitute it for template_tuple.
call the function getargspec with an argument func, substitute the result for args, varargs, varkw and defaults, respectively.
call the method to_python with an argument value, from the base class of the IntegerField class, substitute the result for value.
if extracted is true,
from django.utils import six into default name space.
call the function urlunsplit with an argument url_fields, substitute the result for value.
define the method tag_function with 2 argument: self and func.
join root and f in path, substitute the result for f.
call the function _load_serializers.
if not,
define the method _iteritems with an argument self.
if content_type doesnt start with string 'multipart/',
define the method execute with 3 arguments: self, unpacked list args and unpacked dictionary options.
append a tuple with 2 elements: None and nodelist to conditions_nodelists.
if dt.year is greater than or equal to integer 1900,
if content_length is greater than settings.FILE_UPLOAD_MAX_MEMORY_SIZE,
if column_name is contained in indexes,
decorator function register.filter with an argument is_safe set to boolean False.
_cookie_allows_colon_in_names is a boolean True.
digits is a string "0123456789abcdefghijklmnopqrstuvwxyz".
docs_version is a string 'dev'.
tf is an instance of TimeFormat class, created with an argument value.
call the function add_to_builtins with an argument string 'django.template.defaulttags'.
call the method translation.activate with an argument saved_locale.
return an instance of Media class, created with definition as an argument.
call the function os.stat with an argument filename, substitute the result for st.
return string "<Block Node: %s. Contents: %r>", where '%s' is replaced with self.name and '%r' with self.nodelist.
m2m_value is a lambda function with an argument value, return value is the result of the function smart_text called with arguments: return value of the value._get_pk_val method and strings_only set to boolean True.
define the function fields_for_model with 9 arguments: model, fields set to None, exclude set to None, widgets set to None,
remove file path_to_remove,
define the method as_text with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
if not,
m2m_convert is an lambda function with an argument n, return value is the return value of the method field.rel.to._meta.pk.to_python, called with n.getAttribute('pk') method.
weight is an integer 0.
if string '%(truncated_text)s' is contained in truncate,
skip this loop execution,
call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
call the method attachment.add_header with 3 arguments: string 'Content-Disposition', string 'attachment' and filename set to filename.
if not,
if not,
from django.conf import settings into default namespace,
append idstring to the '.' character, substitute it for idstring.
raise an KeyError with an argument string 'Your dictionary lacks key \'%s\'. Please provide it, because it is required to ' 'determine whether string is singular or plural.', where '%s' is replaced with number.
call the method self.make_key with key and version set to version as arguments, substitute it for key.
define the method __init__ with 3 arguments: self, setting and nodelist.
define show_migration_list with self class instance, connection and app_names set to None, as arguments.
do nothing.
return errors.
raise an NoReverseMatch exception with an argument string "Error importing '%s': %s.", where '%s' is replaced with lookup_view and e, respectively.
call the method widget.render with 3 arguments: name, return value of the method self.value, attrs set to attrs, use it as an argument for the call to the function force_text, return the result.
from django.utils.translation import ugettext and ungettext_lazy into default name space.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide an accessed_time() method'.
call the method parser.add_argument with 5 arguments: string '--nothreading', action set to string 'store_false', dest set to string 'use_threading', default set to boolean True and help set to 'Tells Django to NOT use threading.'.
substitute field_name for self.field_name.
define the method __init__ with 7 arguments: self, request, template, context set to None, content_type set to None, status set to None and current_app set to None.
substitute self.fk.rel.field_name for value under the 'to_field' key of the kwargs dictionary.
call the function type with 3 arguments: string 'WSGIServer', tuple containing 2 elements: socketserver.ThreadingMixIn and WSGIServer, and an empty dictionary, substitute the result for httpd_cls.
if data is not None or FILE_INPUT_CONTRADICTION,
if length of parts is greater than integer 1.
count is a property object with _get_count as a getter method.
create list out of email_messages, return the length of the list.
needs_multipart_form is boolean True.
return an instance of metaclass class, created with 3 arguments: cls.__name__, cls.__bases__ and orig_vars.
instantiate class Header with 3 arguments: value, string 'utf-8', maxlinelen set to sys.maxsize, call the encode method on it, convert the result into a string and substitute it for value.
if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key' attribute,
if timezone has an attribute 'normalize',
define the method render with 2 arguments: self and context.
define the method widget_attrs with arguments self and widget.
call the method self.fields.items, for every name and field in result,
if StopIteration exception,
substitute i for self.pointer.
if self has an attribute 'clean_%s', where '%s' is replaced with name,
value under the all_label key of the directory_created dictionary is boolean True.
return nodelist.
try,
define the function sanitize_separators with an argument value.
define the method process with 3 arguments: self, command and domain.
remove first element from styles, split it by the '/' character, substitute the result for colors.
self.feed is an dictionary with 13 initial entries, result of the function to_unicode called with an argument title for 'title', result of the function iri_to_uri called with an argument link for 'link', result of the function to_unicode called with an argument description for 'description', result of the function to_unicode called with an argument language for 'language', result of the function to_unicode called with an author_email description for 'author_email', result of the function to_unicode called with an argument author_name for 'author_name', result of the function iri_to_uri called with an argument author_link for 'author_link', result of the function to_unicode called with an argument subtitle for 'subtitle', if true, categories is value for 'categories' key, if not, empty tuple is value for 'categories' key, result of the function iri_to_uri called with an argument feed_url for 'feed_url', result of the function to_unicode called with an argument feed_copyright for 'feed_copyright', if true, feed_guid is value for 'id' key, if not, lik is value for 'id' key and ttl for 'ttl'.
calculate length of provided and increment it by one, substitute the result for plen.
convert self.domain into a string and append string '.po' to it, join basedir and result in file path, substitute it for pofile.
otherwise if self._delegate_text is true,
return rv.
delete the value under key key of self._expire_info.
return None.
as_form is boolean False.
if ValueError exception is caught,
otherwise if bytes is smaller than PB,
opts.fields is None.
call the function get_template with 2 arguments: template_name and dirs, substitute the result for t.
call the method context.push with an argument unpacked dictionary values, with the result as an argument,
substitute str_number and an empty string for int_part and dec_part.
append string '_0' to id_.
self.vals is an empty list.
return an instance of SafeText, created with an argument s converted into a string.
call the function io.open with 3 arguments: django_po, string 'r' and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:
call the method self._cache.set with key, value, self.get_backend_timeout(timeout) as arguments.
call the method __setitem__ from the base class of the QueryDict class, with arguments key and value.
call the function os.path.dirname with an argument django.__file__, join the result into a path, use it as an argument for the call to the function os.path.normpath, substitute the result for django_dir.
if template_dirs is false,
for every w in widgets, call the function w and append the result to a list, if w is an instance of type class, if not append w to the list, substitute the resulting list for self.widgets.
substitute 3 successive elements starting from the i-th index of pieces for first, lang and priority, respectively.
from django.core.files.uploadedfile import TemporaryUploadedFile and InMemoryUploadedFile into default name space.
self._errors is None.
from pprint import pformat into default name space.
from __future__ import unicode_literals into default name space.
reuturn cache.
do nothing.
call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
substitute message.error_list for message.
define compile_messages method with self class instance and locations as a arguments.
return an instance of DebugVariableNode, created with an argument contents.
try,
call the method add_arguments from the base class of the class Command, with an argument parser.
define the method W with an argument self.
define method get_exception_response, with self class instance, request, resolver and status_code as the arguments.
try,
get the value under the 'indent' key of self.options dictionary, if it is true,
if result is not None,
increment i by integer 1,
call the method baseconv.base62.encode with result of the time.time function converted to an integer, as an argument, return the result.
call the method s.encode with an argument string 'utf-8', substitute the result for s.
return a list containing an empty string and a list containing an empty list.
if use_workaround is boolean False,
for every statement in index_output,
call the function load_command_class with arguments app_name and subcommand, substitute the result for klass.
for meta_line in return value of the method self.get_meta called with an argument table_name.
self.fixture_count is integer 0.
if _serializers is false,
define the method __init__ with 8 arguments: self, file, field_name, name, content_type, size, charset and content_type_extra set to None.
if self.cdata_tag is not None,
extend self.children list with data.children.
if s is instance of a class Promise,
return data.
call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value, and format, call the method time on the result, return the result.
call the method self.make_key Whit key and version set to version as arguments, substitute the result for key.
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
import module re.
compile regex from raw string '(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})$', substitute it for date_re.
if date is not None,
define the method __init__ with 15 elements: self, title, link, description, language set to None, author_email set to None, author_name set to None, author_link set to None, subtitle set to None, categories set to None, feed_url set to None, feed_copyright set to None, feed_guid set to None, ttl set to None and unpacked dictionary kwargs.
is_usable is boolean False.
define the method __new__ with 4 arguments: mcs, name, bases and attrs.
substitute callable for callable.
if ImportError exception is caught,
define the function stringformat with 2 arguments value and arg.
i is integer 0.
bitwise shift integer 1 to the left by 31 spaces, return the result.
call the method self.max_width.resolve with an argument context, convert the result to an integer and substitute it for max_width.
if 'empty_value' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value, if not, self.empty_value is an empty list.
from django.core.management.color import color_style into default name space.
if encoded contains string "\\" and if encoded doesnt start with the double quote symbol,
define method handle_app_config with self class instance, app_config and dictionary options as arguments.
field_output is an list containing 2 elements: return value of the function qn called with an argument f.name, and return value of the function f.db_type called with an argument connection set to connection.
get attribute 'print' from the moves.builtins object, if it exists substitute it for print_, if not print_ is None.
substitute Select for widget.
missing_fields is difference between set containing none_model_fields and set containing result of the method, new_class.declared_fields.keys.
define the method clean with arguments self and value.
extend list inner_result with res.
multiply delta.days, integer 24, integer 60 and integer 60 add delta.seconds to it, substitute the result for since.
return state.
raise an exception,
extend locations with tuple containing dirpath and f, for every f in filenames, only if it ends with string '.po'.
define the function decorating_function with an argument user_function.
if six.PY2 is true and rawdata is an instance of the type six.text_type.
open the file named filepath in read mode, with file descriptor renamed to fp perform,
VARIABLE_ATTRIBUTE_SEPARATOR is a string '.'.
try,
substitute key for op.id.
if i-th element of subject is '"' character or "'" character,
from django.conf import settings into default name space.
if data is an instance of MultiValueDict or MergeDict class,
if filename ends with '.pyo', '.pyc' or '.py.class',
replace every occurrence of raw string '\\' in s with a raw string '\\\\', use the result and string "unicode_escape",
insert options.pythonpath at the beginning of sys.path.
try,
call the method warnings.warn with 2 arguments: string "No fixture data found for '%s'. (File format may be invalid.)", where '%s' is replaced with fixture_name, and RuntimeWarning.
step is an string 'any'.
call the sio.readline method, substitute the result for line.
if value under the 'primary_key' key of the dictionary contained under the column_name key of the dictionary indexes is true,
try,
define lambda function that returns self.file.softspace field, use it as an argument for property function, put the result in softspace.
call the self.path with argument name, substitute it for name.
from django.core.management.base import BaseCommand and CommandError into default name space.
call the function timedelta with an argument seconds as negative time.timezone, subtract the result from the result of the call, to the function timedelta called with an argument seconds as negative time.altzone, return the result.
instantiate class ContextDict with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, return it.
if self.can_delete is true and call to the function self._should_delete_form with an argument form evaluates to true,
call the method self.validate_unique.
substitute message for self.message.
if not,
define the class DjangoJSONEncoder from the json.JSONEncoder base class.
increment pos by one, substitute the result for last.
if not,
if t.token_type equals TOKEN_BLOCK,
fks_to_parent is a list containing f, for every f in opts.fields if f.name equals fk_name.
get config dictionary element under 'root' key, if it exists substitute it for root, if not, root is None.
covert to string value under the 'unique_id_is_permalink' key of the item dictionary, convert it to lowercase, substitute the result for value under the 'isPermaLink' key of the guid_attrs dictionary.
def the method __init__ with 5 arguments: self, object_list, per_page, orphans set to integer 0 and allow_empty_first_page set to boolean True.
define the method __init__ with 8 arguments: self, data set to None, files set to None, instance set to None, save_as_new set to boolean False, prefix set to None, queryset set to None and unpacked dictionary kwargs.
call the method self.options.update with dictionary as an argument, containing 1 element: boolean False for 'use_decimal'.
define the function available_attrs with an argument fn.
from __future__ import unicode_literals into default name space.
if as_ is not equal to string 'as',
call the method msg.attach with an argument attachment.
if self.variable_name is true.
substitute ngettext for ungettext.
define the method external_entity_ref_handler with arguments self, context, base, sysid and pubid.
if obj.pk is None,
call the function time.time, substitute the result for timeval.
try,
call the EmailMessage function wit subject, message, sender, recipient and connection set to connection, for every subject, message, sender and recipient in datatuple, store the results in the messages list.
if value under the 'errlog' key of options dictionary is true,
return combined.
define the method total_form_count with an argument self.
lookups is an instance of the MultiValueDict class.
call the function warnings.warn with 3 arguments: string "SortedDict is deprecated and will be removed in Django 1.9.", RemovedInDjango19Warning and stacklevel set to integer 2.
define the function new_date with an argument d.
decorator function wraps with an argument fset.
if self.verbosity is greater of equal to integer 1,
from django.apps import apps into default name space.
return None.
import module os.
define the function partition with 2 arguments: predicate and values.
value under the item key of self.dict dictionary is None.
define the function clean_ipv6_address with 3 arguments: ip_str, unpack_ipv4 set to boolean False and error_message,
call the method self.mapping.get with 2 arguments: self.tagtype and an empty list, return the result.
call the method value.rsplit with arguments character '@' and integer 1, assign the result to user_part and domain_part, respectively.
skip this loop iteration.
substitute logging.getLogger for getLogger.
call the method self.var.resolve with an argument context, substitute it for obj.
error is an dictionary with an initial entry error.error_list for filed if true, or NON_FIELD_ERRORS if not.
call the method clean with an argument data from the base class of the class FileField, return the result.
otherwise if call to the method finder.find_module with an argument name evaluates to true,
from django.core.exceptions import ImproperlyConfigured into default name space.
args is an list with 3 initial elements self.name, self.value and self.attrs.
call the function _generate_cache_header_key with key_prefix and request as arguments, substitute the result for cache_key.
define the method i with an argument self.
self.META is an empty dictionary.
define the method unclosed_block_tag with 2 arguments: self and parse_until.
if httponly is true,
define the function get_deserializer with an argument format.
derive the class SuspiciousFileOperation from the SuspiciousOperation base class.
return boolean False.
from __future__ import unicode_literals into default name space.
flush the output buffer of the self.stdout object.
f.required is boolean False.
for every attr in _urllib_parse_moved_attributes,
call the field.rel.to._meta.get_field method with an field.rel.field_name argument, on the result call the method to_python, with field_value as an argument, return the result.
substitute callback for self._callback_str.
if ValueError, TypeError or ValidationError exception is caught,
call the BaseConverter function with BASE2_ALPHABET as argument, store the result in base2.
from django.utils.deprecation import RemovedInDjango20Warning into default name space.
set filter_func objec attr attribute to value.
do nothing.
join self.file_path and fname into a valid file path, substitute it for self._fname.
match rest string with self.DOT_PATTERN regex, substitute the result for m.
for every i and word in enumerated iterable words,
template_with_initial is a string '%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s'.
define the method render with an argument self.
return a string '%s %s %s' formated with 3 elements: result of the function force_text called with an argument i, separated by result of the function _ called with an argument string ', ', for every i in list_ without last element, result of the function force_text called with an argument last_word, result of the function force_text called with an argument: last element of list_.
statement is an empty list.
call the method operator.attrgetter with an argument _func_globals, substitute the result for get_method_globals.
raise a exception of CommandError class, with string "App '%s' does not have migrations" with '%s' replaced with app_label as the argument.
if source is an instance of inst class,
import module warnings.
from django.utils import formats into default name space.
if o is contained in opt_dict,
self.error_dict is an empty dictionary.
end_text_pos is equal to integer 0.
if terminal_char is not equal to string ')',
define the method writer_enters with an argument self.
try,
from __future__ import unicode_literals into default name space.
define the method setlist with 3 arguments: self, key and list_.
if self does not have an '_request' attribute,
call the function six.text_type with an argument self.data.year, return the result without the first 2 elements.
get the value under the format key of the _serializers dictionary, return the Deserializer filed of the result.
substitute data.name for file_name.
define the method __init__ with 3 arguments: self, schemes set to None and unpacked dictionary kwargs.
call the method _isdst with an argument dt from the base class of the class LocalTimezone, return the result.
return context.
if self.lookups is not None,
call the mw_class function, store the result in the mw_instance.
if _BASE64_DECODE_ERROR exception is caught,
register.tag decorator,
call the function parser.compile_filter with an argument arg for every arg in args from the index 1 to the index -2, append the results into a list, substitute it for value.
substitute value under the attr key of flags dictionary for value.
derive the class CheckboxChoiceInput from the ChoiceInput base class.
define the method set_cookie with 9 arguments: self, key, value set to an empty string, max_age set to None, expires set to None,
return an instance of SafeBytes, created with an argument t.
internal_use_only is a boolean False.
call the Warning function with 3 arguments: hint tuple containing one string, Django 1.6 introduced a new default test runner. It looks like this project was generated using Django 1.5 or earlier. You should ensure your tests are all running & behaving as expected. See https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner for more information.", obj set to None and id set to a string '1_6.W001', put the result into a list and return it.
if ZeroDivisionError exception is caught,
open err_log file in append mode with buffering size of the input buffer, substitute the result for sys.stderr.
if fields is not None,
get format_type attribute of module object, substitute the result for val.
title is an empty string.
define the method close with self and dictionary pairs of elements kwargs.
call the function func with 2 arguments: obj and unpacked list arg_vals, substitute the result for new_obj.
saved_locale is None.
self.content_length is None.
define the function smart_text, with s, encoding set to string 'utf-8', strings_only set to False, errors set to 'strict' as arguments.
if 'needs_autoescape' attribute of func object exists and is true,
if f.rel and f.rel.to are not contained in to_delete,
if content is empty, substitute it for an empty string.
message_context is None.
field_list is an empty list.
zip self.loopvars and item is a list to tuples, convert the result to an dictionary, substitute it for unpacked_vars.
call the function re.compile with an argument string '</%s>' formated with tags_re, substitute the result for endtag_re.
from django.conf import settings into default name space.
define the method add_arguments with 2 arguments: self and parser.
join top_dir and relative_dir into a file path, substitute it for target_dir.
for every c in return value of the method response.cookies.values,
from django.conf import settings into default name space.
if field.help_text is true,
instantiate class X, get its length.
return obj_pk.
call the function reset_translations.
call the function get_format with an argument string 'THOUSAND_SEPARATOR', substitute the result for thousand_sep.
if header list is not None,
if not,
substitute stream_or_string for stream.
call the function get_commands, convert the result to a list, append string 'help' to it, substitute it for subcommands.
extend the value under the field key of the self._errors dictionary with error_list.
define method _get_width with self class instance as the argument.
method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
call the method formats.number_format with 2 arguments, d converted to a integer and then to string, and integer 0, use the result as an argument for the call to the function mark_safe, return the result.
get is a tuple containing elements generated by the call to the function pformat with an argument META_override, if META_override is not None, or otherwise generated with the call to the function pformat with an argument request.META.
call the function f.process with 2 arguments: self and self.domain.
raise an ValueError with an argument string 'The joined path (%s) is located outside of the base path component (%s)', where '%s' is replaced with final_path and base_path.
if value is an instance of six.text_type class,
convert if into a string append to it a string '_month', return the result.
convert value under the 'CONTENT_LENGTH' key of the environ dictionary to an integer, substitute it for content_length.
call the method validate with an argument value from the base class of the DecimalField class.
from django.utils.encoding import force_text into default name space.
return an empty dictionary.
substitute cleaned_data for self.cleaned_data.
define the method add_root_elements with 2 arguments: self and handler.
finally perform,
call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
call the function no_style, substitute the result for self.style.
substitute i-th element of subject for c.
if StandardError, renamed to e, exception is caught,
define the method __init__ with 6 arguments: self, dict_ set to None, autoescape set to True, current_app set to None, use_l10n set to None and use_tz set to None.
call the method attachment.set_payload with an argument content.
table_output is an empty list.
num_pages is a property object with _get_num_pages as a getter method.
define the method to_python with arguments self and value.
prefix the base64d with a '.' character.
buffer_ is None.
if self.can_order is true,
define the function F with an argument i.
raise an TypeError with an argument string "relative imports require the 'package' argument".
msg is an string "django.utils.text.javascript_quote() is deprecated. Use django.utils.html.escapejs() instead.".
return kwargs.
from django.conf import settings into default name space.
subtract year from integer 2000, divide the result by integer 28, floor the result, multiply it with 28 and increment by year, substitute the result for year.
raise an KeyError with an argument string "Unknown language code %s and %s.", where '%s' is replaced with lang_code, and generic_lang_code.
if length of self.backout is greater than zero,
call the method parser.add_argument with 5 arguments: string '--database', default set to string 'store', dest set to 'database', add set to DEFAULT_DB_ALIAS and help is 'Nominates a specific database to dump fixtures from. Defaults to the "default" database.'.
if not,
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " OK" as a argument.
do nothing.
if not,
call the function func with an argument unpacked list args, substitute the result for result.
if app_list_value is not None,
define the method chars with 4 arguments: self, num, truncate set to None, html set to boolean False.
get greater value between integer 1 and result of subtraction of self.orphans from self.count, substitute it for hits.
define the method led with 3 arguments self, left and parser.
for every cnt and digit in enumerated list int_part with reversed ordering of elements,
define the method IE_sanitize with arguments self and filename.
return nodelist.
call the method node.getAttribute with an argument string 'pk', use the result as the argument for the call to the method,  Model._meta.pk.to_python with, substitute the result for value under the Model._meta.pk.attname key of the data dictionary.
self.second is None.
define convert method with self class instance, number, from_digits, to_digits and sign as arguments.
from django.core.checks.registry import registry into default name space.
return an instance of IncludeNode class, created with 3 arguments: return value of the method parser.compile_filter,
get 'value' attribute of the _prefixes, if it exists, return it, otherwise return '/'.
raise an CommandError with an argument string "App '%s' does not have migrations (so squashmigrations on it makes no sense)", where '%s' is replaced with app_label.
VARIABLE_TAG_START is a string '{{'.
define the method l with an argument self.
return self.__language.
derive the class DefusedExpatParser from the _ExpatParser base class.
return fext.
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database', default set to DEFAULT_DB_ALIAS and help set to a string: 'Nominates a database onto which the cache tables will be installed. Defaults to the "default" database.'
try,
_assertCountEqual is a strnig "assertCountEqual".
define the method get_data with an argument self.
call the method self._add_installed_apps_translations.
call the method logging.Handler.__init__ with an argument self.
call the function _load_serializers.
substitute parts, without the first element, for path.
derive the class TextNode form the base class Node.
if not,
define the method __nonzero__ with an argument self.
call the method get_unique_error_message from the base class of the class BaseInlineFormSet, with an argument unique_check, return the result.
call the function normalize with an argument p_pattern, substitute the result for bits.
call the method app.start.
evaluate the function getdefaultlocale from the module locale, if second element of return value exists assign it to encoding, otherwise assign string 'ascii' to encoding.
if not,
call the __init__ method of the base class of the EmailBackend class with arguments: unpacked list args and unpacked dictionary kwargs.
define the method num_items with an argument self.
add string '%s.templatetags' to a list, where '%s' is replaced with app_config.name, for every app_config in result of the method apps.get_app_configs, append the resulting list to templatetags_modules_candidates.
call the function force_str with an argument value, substitute the result for value.
from django.core.cache.backends.base import InvalidCacheBackendError, CacheKeyWarning and BaseCache into default name space.
call the function lazy with 2 arguments: _string_concat and six.text_type, substitute the result for string_concat.
substitute Rss201rev2Feed for DefaultFeed.
delete entry under the name key of the moves.__dict__ dictionary.
try,
call the function bf.label_tag with an argument label, if the result is true substitute it for label, otherwise label is an empty string.
raise an exception.
sup_cls is base class of the class cls.
from django.db import models and DEFAULT_DB_ALIAS into default name space.
increment i by one.
if cmd ends with ext,
define the method encoding with an argument self.
define the method update_error_dict with arguments self and error_dict.
define the method delete with self class instance, key and version set to None as arguments.
return an empty dictionary.
import module os.
from __future__ import unicode_literals into default name space.
define the method render with 2 arguments: self and context.
return an instance of TemplateLiteral with 2 arguments: result of the function self.template_parser.compile_filter, called with an argument value and value.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
define the method __iter__ with an argument self.
from __future__ import unicode_literals into default name space.
define the method pk_is_not_editable with an argument pk.
try,
call the function mark_safe with an argument contents, return the result.
decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False.
if OSError, renamed to e, is caught,
return _wrapped_view.
call the method parser.add_argument with 5 arguments: string '--exclude', string '-x', default as a empty list, dest as a string 'exclude', action as a string 'append' and help as a string 'Locales to exclude. Default is none. Can be used multiple times.'.
call the method autoreload.main with 3 arguments: self.inner_run, None and options.
call the function sself.__cast with an argument self, divide the result with rhs and return the reminder of the division.
substitute '%s' in string "Extracting %s\n" with filename, write it to self.stdout stream.
call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults.
call the method __init__ from the base class of the class RegexField, with 4 arguments: max_length, min_length, unpacked list args, unpacked dictionary kwargs.
if TypeError exception is caught,
return ip_str.
decorator python_2_unicode_compatible,
call the function constant_time_compare with 2 arguments: sig and return value of the self.signature method with an argument value,  if it evaluates to true,
from decimal import Decimal and DecimalException into default name space.
call the method self.exit_command.
create a tuple out of elements under the key field of the form.cleaned_data dictionary, add elements of date_data to it, substitute it for data.
if c doesnt have an attribute '__call__', and types has an attribute 'ClassType', and type of c is not equal to types.ClassType,
raise an CommandError exception with an argument string "currently makemessages only supports domains 'django' and 'djangojs'".
call the method self.tag_function with an argument name, return the result.
append string "PRIMARY KEY" to field_output.
call the method parser.next_token, substitute the result for token.
derive the class SuspiciousMultipartForm from the SuspiciousOperation base class.
define the method __len__ with an argument self.
if not,
if stream is true,
for every i and field in enumerated iterable self.fields,
define the method _post_clean with an argument self.
call the flatten method of the self and other objects, if they are equal, return boolean True, if not return boolean False.
call the method subcommand_cls.create_parser with 2 argument an empty string an first element of cwords, substitute it for parser.
derive the UploadedFile class from the File base class.
call the method self._stream.read with 2 arguments: unpacked list args and unpacked dictionary kwargs.
kwargs is a dictionary with boolean True for 'pk_field'.
if self._cull_frequency equals to integer 0.
if Exception exception is caught.
substitute settings.SECRET_KEY for secret.
result is a list containing an empty string.
if IOError, renamed to e, exception is caught,
for model in model_list,
define the method _cull with argument self.
call the method nodelist.render with an argument context, return the result.
call the function _findall with 2 arguments: s2 and sum of year and integer 28, converted into a string, substitute the result for sites2.
known_models is an empty list.
derive the class DjangoRuntimeWarning from the RuntimeWarning base class.
raise an TemplateDoesNotExist exception with an argument name.
return a string "<DeserializedObject: %s.%s(pk=%s)>", where '%s' are replaced with self.object._meta.app_label, self.object._meta.object_name and self.object.pk, respectively.
for every module in templatetags_modules,
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " OK" as a argument.
for every punctuation in TRAILING_PUNCTUATION,
if prefix doesnt end with character '/',
define the function add_metaclass with an argument metaclass.
open the file fn in read mode, with file descriptor as f,
register.tag decorator,
if not,
call the method cache.set, with cache_key, headerlist, cache_timeout as arguments.
call the method executor.loader.graph.leaf_nodes and substitute its result for targets.
raise an base.DeserializationError exception with an argument string "<%s> node has invalid model identifier: '%s'", where '%s' is replaced with node.nodeName and attr.
define the method __enter__ with an argument self.
call the method gettext_module.NullTranslations, substitute the result for _active.value.
if AttributeError exception is caught,
if TypeError and AttributeError exceptions are caught,
call the method form.save with an argument commit as commit, return the result.
call the function force_text with an argument error, return the result.
import module warnings.
doublecolon_len is an integer 0.
if words is true, substitute re_words for regex, if not substitute re_chars for regex.
if ValidationError exception is caught,
decorator function register.filter with an argument is_safe set to boolean True.
if first element of the url_fields is false,
replace all the elements of the basedir list by its corresponding absolute directory path, only is that directory exists.
call the method self._isdst with an argument dt, if it evaluates to true,
get the value under the 'use_natural_primary_keys' key of the options dictionary, substitute the result for use_natural_primary_keys.
self.models is an empty set.
close the file self.
add decimal_sep and dec_part, substitute the result for dec_part.
if since is lesser or equal to integer 0,
call the function format_html with 3 arguments: self.outer_html, if id_ is true id_attr set to return value of the function format_html, if not id_attr set to an empty string, content set to result of the function mark_safe with an argument: string created by joining elements of outputs, with '\n' separator, return the result.
define the method compile_filter_error with 3 arguments: self, token and e.
call function force_bytes with value as argument, use the result to as the result for the call to the methgod ctx.update.
call method request.build_absolute_uri, use the result as an argument for function call of iri_to_uri, use the result as an argument for function call of force_bytes, use the result as an argument for calling the method hashlib.md5, put the result in url.
choices is an property property object of this class, with _get_choices getter and ChoiceField._set_choices setter functions.
substitute code for self.code.
define the function restart_with_reloader.
from django.core.management.base import AppCommand into default name space.
if iterations is lesser than integer 0, raise an error.
define the function make_msgid with argument idstring set to None.
raise an IOError exception with string "Destination file %s exists and allow_overwrite is False" as argument, where '%s' is replaced by new_file_name.
define the method tzname with 2 arguments: self and dt.
define the function safe with an argument value.
call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class TypedMultipleChoiceField.
allow_multiple_selected is boolean True.
_iterkeys is a string "iterkeys".
derive the class Library form the base class object.
call the function os.path.dirname with an argument settingsfile, join the result an string 'locale' into a file path, substitute it for localedir.
try,
call the method self._read_limited, store the return value into chunk.
if first element of message_context equals to character '"',
convert header to lowercase, use it to as a key to get the value of the self._headers dictionary, if it exists return the second element of the result, if not, return alternate.
call the function settings.is_overridden with argument string 'ADMINS', if it evaluates to boolean True,
self.error_list is an empty list.
remove kwargs dictionary element under the 'method' key, substitute it for method.
from __future__ import unicode_literals into default name space.
derive the class SafeMIMEMessage from the MIMEMixin and MIMEMessage base class.
return attrs.
define the method close with argument self.
substitute the regex_compiled for value under the language_code key of the self._regex_dict dictionary.
subtract length of hextet from 4, create a string with previous result number of character '0', append hextet to it, convert the result into a lowercase, append it to ret_ip.
get the value under the 'no_wrap' key of the options dictionary, if it is true,
call the __init__ method with arguments file and name, from the base class of the UploadedFile class.
import module django.
call the function warnings.warn with 3 arguments: string "django.utils.unittest will be removed in Django 1.9.", RemovedInDjango19Warning and stacklevel as integer 2.
replace every occurrence of '\n' in s with '\\n'.
define the method load with self class instance and rawdata as arguments.
if self._changed_data is None,
call the method parser.add_argument with string '--list', string '-l', action contains string 'store_true', dest set to string 'list', default set to False, help containing string 'Show a list of all known migrations and which are applied' as arguments.
raise an exception.
return the value under the is_dst key of the _time.tzname dictionary.
from django.core.files.base import File into default name space.
convert tag to lowercase, use it as the argument for the call to the method self.handle_endtag.
remove config dictionary element under 'filter' key, if it exists substitute it for filters, if not, filters is None.
import module django.
if sys.platform starts with a string 'java',
try,
call the function allow_lazy with 2 arguments: slugify and six.text_type, substitute the result slugify.
append contents to singular.
from __future__ import unicode_literals into default name space.
call the method (hidden_widget.value_from_datadict with 3 arguments: self.data, self.files and initial_prefixed_name, use the result as an argument for the call to the field.to_python method, substitute the result for initial_value.
decorator register with argument Tags.compatibility.
evaluate the boolean expression: locale is None and exclude is false and process_all is false, if the result is true or self.domain is not None,
call the function os.path.realpath with an argument d, use the result as an argument for the call to the function os.path.abspath, use the result as an argument for the call to the upath function, for every d in dirs, append the results into a list, substitute the resulting list for dirs.
__all__ is a list of strings, 'CachedDnsName', 'DNS_NAME', 'EmailMessage', 'EmailMultiAlternatives', 'SafeMIMEText', 'SafeMIMEMultipart', 'DEFAULT_ATTACHMENT_MIME_TYPE', 'make_msgid', 'BadHeaderError', 'forbid_multi_line_headers', 'get_connection', 'send_mail', 'send_mass_mail', 'mail_admins' and 'mail_managers'.
if UnicodeDecodeError exception is caught,
return first element of the list containing elements of error.
substitute label for app_label.
raise an TemplateSyntaxError exception with an argument string "Invalid arguments provided to assignment_tag".
substitute handler for value under name key of handlers dictionary.
admin is a string 'admin'
call the method resolve with an argument context, from the instance of Variable class, created with an argument path.
if _globs_ is None,
compile regex from raw string '(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})' '(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$', substitute it for datetime_re.
if not,
if filename ends with string ".pyc" or it ends with ".pyo",
from django.http.multipartparser import MultiPartParser and MultiPartParserError into default name space.
remove element from kwargs dictionary under the key 'to_field', substitute it for self.to_field if it exists, if not self.to_field is None.
define the method __init__ with 3 arguments: self, stream_or_string and unpacked dictionary options.
call the function datetime.date with 3 arguments: y, m and d all converted into a integers, substitute the result for date_value.
call the method m.group with an argument integer 0, use it as an argument for the call to the re_tag.match function, substitute the result for tag.
get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
from django.utils.module_loading import import_string into default name space.
if not,
if self.attachments is true,
substitute int for integer_types.
if f is an instance of ManyToManyField,
raise an exception.
from django.utils import six into default name space.
do nothing.
decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False.
get the value from the options dictionary under the key 'interactive', substitute it for self.interactive.
if ValidationError, renamed to e, exception is caught,
substitute settings.TEMPLATE_STRING_IF_INVALID with obj.
request_middleware is an empty list.
try,
call the method self.open, substitute the result for stream_created.
call the method self.check,
if field.rel is true, and field.rel is an instance of models.ManyToManyRel,
substitute subject elements from p-th to i-th index for res.
if _cookie_encodes_correctly is boolean False,
define the method __delitem__ with 2 arguments: self and key.
define the method S with an argument self.
from django.core.management.base import AppCommand into default name space.
if not,
if not,
while newline character is not contained in self.buffer and, size is None or length of self.buffer is less than size,
substitute io.StringIO for StringIO.
if self.instance.pk is not None,
define the function wordwrap with 2 arguments value and arg.
delete Trans.
import module logging.
decorator stringfilter,
try,
call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
if logging_settings is true,
substitute value under the 'verbosity' key of the options dictionary for self.verbosity.
define the method _delete with arguments self and key.
call the method tempfile.mkdtemp with 2 arguments: prefix set to prefix, suffix set to string '_extract', substitute the result for tempdir.
raise an TemplateSyntaxError exception with an argument string "'%s' takes at least one argument (path to a view)", where '%s' is replaced with first element of bits.
define the handle method with self class instance and dictionary **options as arguments.
attrs is a list with 2 elements: strings "__doc__" and "__name__".
define the method start_serialization with an argument self.
from django.utils.itercompat import is_iterable into default name space.
if number is lesser than integer 1,
self._files is an instance of MultiValueDict class.
substitute url for value under the self.asvar key of context dictionary.
if prefix is false,
return integer 12.
if i is greater than, or equal to subject,
get the value under the 'id' key of the self.field.widget.attrs dictionary, if the key exists substitute it for id_, if not, substitute self.auto_id for id_.
define the method __iter__ with an argument self.
increment Field.creation_counter by one.
return the result of the call to the function force_text, with s, encoding, string_only and errors as arguments.
call the add_argument method on the parser object, with string 'migration_name', and help set to string 'Migration name to print the SQL for.' as arguments.
inplural is boolean False.
remove kwargs dictionary entry under the 'isolated_context' key, if it exists substitute it for self.isolated_context, if not self.isolated_context is boolean False.
call the method dict.__getitem__ with 2 arguments self and key, substitute the result for value.
while i is smaller than l,
call the self.validate_key method with argument key.
call the method render from the base class of the class ClearableFileInput, called with 3 arguments: name, value and attrs, substitute the result for value under the 'input' key of the substitutions dictionary.
m is an instance of Media class.
if contents is not None,
define the method __copy__ with an argument self.
try,
add model to seen_models set.
call the method __init__ from the base class of the class Select, with an argument attrs.
open out_log flie in append mode with buffering size of input buffer, substitute the result for so.
define the method read with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
if self.domain is not equal to string 'django' or string 'djangojs',
skip this loop iteration.
substitute lib for value under the library_name key of libraries dictionary.
call the method datetime.datetime.combine with unpacked list data_list, substitute the result for result.
call the function _trans.get_language_from_request with 2 arguments: request and check_path, return the result.
increment mes_count by one.
call the method parser.parse with an argument tuple with 3 elements: strings 'elif', 'else' and 'endif', substitute the result for nodelist.
from django.utils.six.moves.urllib.parse import urljoin into default name space.
if not,
if tags is not None.
create an iterator out of x.
call the os.umask function with argument integer 0, substitute the result for old_umask.
call the method validators.MaxLengthValidator with max_length converted into an integer, append the result to list self.validators.
substitute BOOL for LockFileEx.restype.
if app_path is None,
call the function convert_old_style_list with an argument value, substitute the result for value and converted, respectively.
for every app_name and model_list in return value of manifest.items function,
from .messages import CheckMessage, Debug, Info, Warning, Error, Critical, DEBUG, INFO, WARNING, ERROR and CRITICAL into default name space.
for every i and arg in enumerated iterable args,
call the method posixpath.splitext with an argument the_path.
raise an MultiPartParserError with an argument string 'Invalid boundary in multipart: %s' is replaced with boundary.
get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
try,
call the method parser.add_argument with string 'migration_name', nargs set to charcter '?', help containing string, 'Database state will be brought to the state after that migration.' as arguments.
increment self.active_writers by integer 1,
if compress is true,
for every part in singular,
define the method _coerce with arguments self and value.
path_info is a character '/'.
call the function new_method_proxy with an argument operator.getitem, substitute the result for __getitem__.
call the method normalize with sum of parent_pat and pat as an argument, substitute the result for new_matches.
if not,
derive the class Command from the base class BaseCommand.
if in_tag and is not contained in self.verbatim,
substitute self.context.render_context for render_context.
substitute tempfile.NamedTemporaryFile for NamedTemporaryFile.
call the method timezone.tzname with an argument None, return the result.
raise an exception self.error_class with an argument string ""Unused '%s' at end of if expression", where '%s' is replaced with result of the method self.current_token.display.
remove first element of result from self.keyOrder dictionary.
call the method parser.next_token, substitute the result for endblock.
slice root starting from the prefix_length index to the end, substitute it for path_rest.
if ValueError exception is caught,
if self.verbosity is greater or equal to integer 2,
from django.core.serializers.base import DeserializationError into default name space.
while remaining is not equal to integer 0,
define the method has_error with 3 arguments: self, field and code set to None.
from __future__ import unicode_literals into default name space.
substitute self for self.config.configurator.
if self.is_reversed is true,
define the function sql_custom with 3 arguments: app_config, style and connection.
define the method save with 2 arguments: self and commit set to boolean True.
input_type is a string 'file'.
if self.localize is true,
return a list with 5 elements: strings 'parse', 'error', 'request', 'response' and 'robotparser'.
if second element of source is None,
self.years is list containing 10 successive integers from this_year.
return an instance of FixedOffset class, created with 2 arguments: offset and name.
import module shutil.
if offset is an instance of timedelta class,
import module re.
substitute HTMLParser from the module _html_parser for HTMLParser.
if there is no match,
if PY3 field of six is boolean True,
get the value under the name key of the self.fields dictionary, substitute it for field.
return tempdir.
if settings.USE_TZ is true and value is not None and call to the function timezone.is_aware with an argument value, evaluates to true,
derive the class Atom1Feed from the SyndicationFeed base class.
substitute definition for value under the role key of palette dictionary.
call the function v with an argument value.
gett self.attr from the module object, return it.
id is None.
call the method parser.add_argument with 2 arguments: string 'args' and nargs set to '*'.
classmethod decorator,
if param is not in params and varkw is None,
define the function walk_to_end with 2 arguments ch and input_iter.
return None.
from django.utils.encoding import force_str into default name space.
print a string "In the tar file %s the member %s is invalid: %s", where '%s' is substituted with: name, member.name and exc, respectively.
define the method render with 4 arguments: self, name, value and attrs set to None.
prepend string '_' to i converted to an string, append the result to the value under the 'id' key of the attrs_plus.
increment self.active_readers by 1.
call the function mark_safe with an argument word, substitute the result for i-th element of words.
define the function wrapped with 2 arguments: unpacked list args and unpacked dictionary kwargs.
call the method django.setup.
substitute obj for self.obj.
return guessed_path.
substitute length for truncate_len.
call the method self.file.close.
return _dec.
import module traceback.
if errors is true,
substitute val for value under the k key of dictionary d.
define the function urlize with 2 arguments value and autoescape set to None.
get the value under the ' use_natural_foreign_keys' key of the options dictionary, substitute the result for  use_natural_foreign_keys.
call the method self.add_prefix with an argument fieldname, substitute it for prefix.
return value.
call the function ungettext_lazy with 3 arguments: string 'Ensure this value has at most %(limit_value)d character (it has %(show_value)d), string 'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message.
raise an DTDForbidden exception with arguments name, sysid and pubid.
from django.core.mail.message import EmailMessage, EmailMultiAlternatives, SafeMIMEText, SafeMIMEMultipart, DEFAULT_ATTACHMENT_MIME_TYPE, make_msgid, BadHeaderError and forbid_multi_line_headers into default name space.
substitute DjangoJSONEncoder for DateTimeAwareJSONEncoder.
call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the item dictionary.
if cursor is true and return value of the function connection.introspection.table_name_converter called with an arugment:  model._meta.db_table is contained in table_names,
join tempdir and guessed_filename into a file path, substitute it for guessed_path.
define the function force_escape with an argument value.
call the function warnings.warn with 3 arguments: msg, RemovedInDjango19Warning and stacklevel as integer 2.
define the method add_arguments with 2 arguments self and parser.
otherwise if fourth element of version does not equals to 'final',
property decorator,
do nothing.
define the function load_command_class with arguments: app_name and name.
substitute renderer for self.renderer.
error_msg is a string "Invalid template name in 'extends' tag: %r.", where '%s' is replaced with parent.
cls.__dispatch is an empty dictionary.
define the function prefix with 2 arguments bp and func.
import module time.
call the method self.coerce with an argument choice, append the result to new_value.
define the method value with an argument self.
return client.
if comment_notes is true,
call the method self.var2.resolve with 2 arguments: context and boolean True, substitute the result for val2.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
otherwise if cahr equals a string '\\',
define the close method with 2 arguments, self and dictionary of argument pairs kwargs.
return boolean False.
define the method __repr__ with an argument self.
call the functoin callback with an argument self.
if not,
old_field_name is None.
add obj.object.__class__ to self.models set.
define the function inotify_code_changed.
define the function unlock with argument f.
from django.core.exceptions import SuspiciousMultipartF into default name space.
break from the loop execution.
convert ret to a boolean, return it.
otherwise if formfield_callback is not callable object,
call the function warnings.warn with 3 arguments: string "cache_choices has been deprecated and will be removed in Django 1.9.", RemovedInDjango19Warning and stacklevel set to integer 2.
substitute name for new_attr.
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
return list containing 2 elements: None and None.
if cc contains item 'max-age',
from django.template.context import BaseContext, Context, RequestContext and ContextPopException into default namespace.
define the function set_urlconf with an argument urlconf_name.
substitute kwargs for self.kwargs.
call the function mark_safe with an argument data, return the result.
if args is true,
derive the class LocMemCache from the base class BaseCache.
from django.utils.encoding import force_text and filepath_to_uri into default name space.
return first 989 elements of formatted_subject.
define the method render with 4 arguments: self, name, value and attrs set to None.
call the self.get method with arguments key and version set to version, substitute the result for value.
for every dirpath, dirnames and locale_filenames in directory tree starting at the basedir directory.
sum bottom and self.per_page, substitute the result for top.
if timeout equals to DEFAULT_TIMEOUT,
if template_tuple is contained in TemplateDoesNotExist,
get the value filed from the return value of the call to the c.key with the argument key, add the value to the cookiedict under the key key.
substitute length for self._remaining.
if timeout is greater than integer 2592000,
call the method self.connection.quit.
if first element of params equals a string 'context',
for every sql in custom_sql,
call the make_msgid function, substitute it for value under the 'Message-ID' key of msg dictionary.
delete entry under the attr key of the attrs dictionary.
for every tok in rules,
define initialization method __init__ with 4 arguments: self, host, list of arguments args and dictionary of arguments kwargs.
raise an ValueError exception with an argument string "dictionary doesn't specify a version".
append check to checks list, for every check in self.register_checks, if check has an attribute 'tags' and check.tags and tags set intersection is a non empty set.
call the method self.validate_key with argument key.
if not,
return kwargs.
derive the class MaxLengthValidator form the BaseValidator base class.
substitute empty string, word an empty string for lead, middle and trail, respectively.
evaluate self._has_expired with argument key, if the result is True,
yield nothing.
if not,
if base.DeserializationError exception is caught,
get the values under the keys 'app_label' and 'migration_name' of the options dictionary, substitute the results for app_label and migration_name, respectively.
if not,
from django.utils.dateformat import format and time_format into default name space.
do nothing.
from .html_parser import HTMLParser and HTMLParseError into default name space.
finally perform,
split tag_re by self.template_string separator, for every bit in result,
if smtplib.SMTPException exception is caught,
return maybe.
truncate last 9 elements of filename and append it string ".py".
if value is not contained in result,
if not,
return boolean True.
call the function get_internal_wsgi_application, return the result.
test_runner is an instance of TestRunner class, called with an argument unpacked dictionary options.
define the function length with an argument value.
call the method __init__ from the base class of the class MultiValueDict, with an argument key_to_list_mapping.
define the method __new__ with 4 arguments: cls, name, bases and attrs.
call the function time_format with 3 arguments: value, string 'TIME_FORMAT' and use_l10n as use_l10n, return the result.
if defaults is not None,
substitute use_tz for self.use_tz.
delete first element of bits.
split s into parts by '.', substitute the result for name.
if self.verbosity is greater than integer 0,
for every index in range of integers from 0 to length of hextets, not included,
decorator register with Tags.models as an argument.
func.is_usable in false,
if labels is true and f.name is contained in labels,
split ip_str into parts by ':', if '.' is contained in the last element of the result,
define the method __init__ with 6 arguments: (self, var1, var2, nodelist_true, nodelist_false and negate.
call the method self._cache_flush_all.
members is a list with elements member for every member in the result of the function self._archive.getmembers, only if member.name is not equal to string 'pax_global_header'.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
try,
substitute lookup_view for lookup_view_s.
call the function re.compile with an argument raw string "^\s*plural$", substitute the result for plural_re.
call the function get_tag_uri with 2 arguments: values under 'link' and 'pubdate' keys of item dictionary, substitute the result for unique_id.
call the method self._lock, with the result,
import module errno.
define the method parse_args with 3 arguments: self, args set to None and namespace set to None.
if illegal_formatting is true,
substitute params for self.params.
call the function get_current_timezone, use the result as an argument for the call to the function _get_timezone_name, return the result.
for every label in labels,
append string '%%(%s)s' to singular, where '%s' is replaced with t.contents.
raise an ValueError exception with an argument string "%r is not in a valid HTTP date format" formated with date.
join into a path: path and string '%s.pot', where '%s' is replaced with self.domain converted into a string.
raise an NoReverseMatch exception with an argument string "%s is not a registered namespace", with '%s' replaced with key.
define the method errors with an argument self.
call the method self.callback with an argument record, if the result evaluates to true,
ALL_FIELDS is a string '__all__'.
derive the class FileSystemStorage from the Storage base class.
call the method loader.get_template with an argument template, return the result.
derive the class Loader from the BaseLoader base class.
help is a tuple containing a string: 'Removes ALL DATA from the database, including data added during ' 'migrations. Unmigrated apps will also have their initial_data fixture reloaded. Does not achieve a "fresh install" state.'
try,
from __future__ import unicode_literals into default name space.
from functools import lru_cache.
define the method handle with 3 arguments: self, unpacked list labels and unpacked dictionary options.
substitute '%r' in string ' ngettext(%r, %r, count) ' with result of the function join_tokens, called with 2 arguments: singular, and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed, write the result to out.
call the function _get_foreign_key with 3 arguments: parent_model, model and fk_name=fk_name, substitute the result for fk.
substitute max_value and min_value for self.max_value and self.min_value.
return otherwise.
if not,
e.args is a tuple containing string "Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): %(error_msg)s, where '%(app_label)s' is replaced for obj.object._meta.app_label, '%(object_name)s' is replaced with obj.object._meta.object_name, '%(pk)s' is replaced with obj.object.pk and '%(error_msg)s' is replaced with result of the function force_text with an argument e.
convert os.sep into a string and append '*' to it, substitute the result for dir_suffix.
call the function get_token with an argument request, substitute the result for token.
if is_relation is true,
for every name in handlers,
if Exception exception is caught,
call the method self._reset_dicts with an argument dict_.
call the self.handle_noargs method with with unpacked dictionary options as argument, return the result.
substitute new_result for result.
return an empty string.
raise an TemplateSyntaxError exception with an argument string "Searching for value. Unexpected end of string in column %d: %s", where '%d' is replaced with i and '%s' is replaced with subject.
call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
derive the class TranslatableFile from the object class.
from django.conf import settings into default namespace.
do nothing.
call the function bound_func with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
define the method exists with arguments self and name.
from django.utils.functional import lazy into default name space.
define the function default_if_none with 2 arguments value and arg.
import module hmac.
for every fixture_dir in fixture_dirs,
if name is None and compile_function is None,
substitute model._meta for opts.
evaluate the self.has_key method with key as argument, return the result.
try,
call the method value_from_datadict from the base class of the class ClearableFileInput, called with 3 arguments: data, files and name, substitute the result for upload.
if not,
from django.utils.translation import ugettext_lazy as _ into default name space.
return first element of t converted to lowercase and boolean True, as a tuple.
derive the EventHandler class from the base class pyinotify.ProcessEvent.
define the method _get_context_stack_frame with 2 arguments: self and context.
for every module_to_search in args,
if not,
remove all the elements from space index of line.
call the function constant_time_compare with 2 arguments: val1 and val2.
if match is true,
call the method self.get_parent with an argument context, substitute the result for compiled_parent.
append bytes to chunks.
if issues is true,
define the method to_python with arguments self and value.
return _standard_context_processors.
if not,
define the method get with 3 arguments: self, key and default set to None.
define the method utcoffset with 2 arguments self and dt.
define the method to_python with arguments self and data.
find the ending position of the regular expression match of the object match, substitute the result for j.
define the function sql_create with 3 arguments: app_config, style and connection.
define the method __str__ with argument self.
return path an an empty string.
from . import six into default name space.
define the method add_arguments with 2 arguments self and parser.
get 'editable' attribute from object f, if it doesnt exists or its true,
if field_value has an attribute '__iter__' and is not an instance of six.text_type object,
raise an CommandError exception with an argument string "You can only use --pks option with one model".
return value under the name key of the data dictionary, if it doesnt exists, return None.
return dec.
remove elements under the 'path' key of the kwargs dictionary, if it exists substitute it for path, if not path is None.
substitute template for self.template_name.
append string 'Form' to model.__name__, substitute the result for class_name.
define the method clean with an argument self.
substitute widgets for value under the 'widgets' key of attrs dictionary.
if index is negative inter 3, if is_reversed, substitute it for in_index, if not, in_index is negative integer 2.
call the function re.compile with an argument raw string "^\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?'))\s*", substitute the result for context_re.
if django_po file path exists,
from django.utils.module_loading import import_string into default name space.
week_number is integer 53.
call the method HTMLParser.__init__ with 2 arguments: self and strict set to boolean False.
call the method value.encode with an argument charset, substitute the result for value.
call the method build_request_repr with an argument self, return the result.
from wsgiref import simple_server into default name space.
call the function self.path with argument name, use the result as an argument for the call to the function os.path.getmtime, use the result as an argument for the call to the function datetime.fromtimestamp, return the result.
define the method __setitem__ with arguments self, name and val.
from django.core.exceptions import ValidationError into default name space.
call the method __init__ from the base class of the CommandParser class, with unpacked dictionary kwargs as argument.
call the method Context.__init__ with 5 arguments: self, dict_, current_app as current_app, use_l10n as use_l10n, use_tz as use_tz.
define the function lower with an argument value.
call the method self._assert_mutable.
call the method self._lock, with the return value,
if not,
if i is smaller than result of the method self.initial_form_count and key 'instance' is not contained in kwargs,
raise an StopIteration exception.
self._template_response_middleware is an empty list.
from django.utils.encoding import force_text and smart_text into default name space.
as long as self.exists function with argument name evaluates to boolean True,
substitute elements of middle from the beginning to the negative length of punctuation, for middle.
import module os.
for every formset in formsets,
return an instance of SafeText, created with an argument t.
call the method self.build_attrs with an argument attrs, substitute the result for final_attrs.
if widget is an instance of NumberInput and string 'step' is not contained in widget.attrs.
__caches is an empty dictionary.
substitute complain for __delslice__.
call the function chain with 2 arguments: self.choices and choices, convert the result into a list and substitute it for choices.
if ImportError exception is caught,
derive the class EscapeBytes from bytes and EscapeData base classes.
substitute _html_parser.interesting_normal for self.interesting.
return self.DSTOFFSET.
call the method self.loader with 2 arguments: self.loadname and self.dirs, return the first element of the result.
if threading is true,
call the method handler.startElement with 2 arguments: string 'author' and an empty dictionary.
if OSError, renamed to e, exception is caught,
if self._encoding is None,
call the method self.write_po_file with 2 arguments: potfile and locale.
decorator cached_property.
raise an TypeError exception with an argument: result of the method illegal_formatting.group called with an argument, integer 0, appended to a string "strftime of dates before 1900 does not handle".
if cls._delegate_bytes and cls._delegate_text are both false, raise an error, with an argument string "Cannot call lazy() with both bytes and text return types.".
return an dictionary containing 1 entry: request for 'request'.
evaluate the method git_log.communicate, substitute first element of the result for timestamp.
otherwise if length of fks_to_parent is zero,
define the function ungettext with 3 arguments: singular, plural and number.
_iterlists is a string "lists".
substitute self.state for state.
replace every occurrence of "'" in s with "\\'".
define the method usage with arguments self and subcommand.
substitute value under 'unique_id' key of item dictionary for unique_id.
call the function sys.getfilesystemencoding, if it evaluates to true, substitute the result for fs_encoding, if not, call the function sys.getdefaultencoding and substitute the result for fs_encoding.
get attribute class_name form the module object, return it.
substitute value under the subcommand key of the commands dictionary for app_name.
if value under the 'ENGINE' key of the connection.settings_dict dictionary equals a string 'django.db.backends.dummy',
join dir_ and return value of the function os.path.dirname called with an argument fixture_name into a valid file path, append it to a list, perform the previous for every dir_ in fixture_dirs, substitute the resulting list for fixture_dirs.
if value is an instance of datetime.date,
create an object TranslatableFile with arguments: dirpath, filename and locale_dir, append it to all_files.
from io import BytesIO into default name space.
append string '-_' to the BASE62_ALPHABET, substitute it for BASE64_ALPHABET.
return val.
define the method _isdst with 2 arguments: self and dt.
define the function get_language.
call the method handler.addQuickElement with 2 arguments: string 'name' and value under the 'author_name' key of the self.feed dictionary.
if self._request_middleware is None,
if self.timeout is not None,
call the method field.rel.to._meta.pk.to_python with an argument value, use the result as an argument for the call to the, smart_text function, return the result.
if AttributeError exception is caught,
call the method pytz.timezone with an argument settings.TIME_ZONE, substitute the result for _localtime.
append value to the self._closable_objects list.
from django.template.loader import get_template into default name space.
if response is None,
if row is None,
derive the class TemporaryFileUploadHandler from the FileUploadHandler base class.
for every model in not_installed_models,
derive the class HttpResponseGone from the HttpResponse base class.
call the function new_method_proxy with an argument bytes, substitute the result for __bytes__.
return self.tag_function.
call the method self.validate_key with argument key.
define the method __exit__ with self, exc_type, exc_value and tb as arguments.
from __future__ import unicode_literals into default name space.
field_notes is an empty list.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid date/time.' for 'invalid'.
strip path of all leading '/' and '\\' characters, substitute the result for path.
skip this loop iteration.
from django.utils.encoding import python_2_unicode_compatible into default name space.
if opts.model is None.
raise an ImportError exception with an argument string "Could not import '%s'. The path must be fully qualified.", where '%s' is replaced by lookup_view.
call the function format_html with 3 arguments: self.inner_html, choice_value set to choice_value, and sub_widgets set to return value of the function sub_ul_renderer.render, append the result to output.
substitute options.args for args.
if value under the 'updateddate' key of the item dictionary is not None,
call the function re.compile with an argument raw string '^\w{3} %s %s %s %s$' formated with __M, __D2, __T and __Y, substitute the result for ASCTIME_DATE.
call the data.decode method with a string 'latin-1' as an argument, use the result as an argument for the call to the json.load function, return the result.
call the function do_translate with 2 arguments: message and string 'gettext', return the result.
call the method field._get_val_from_obj with obj argument, substitute the result for value.
define the method reader with an argument self.
call the methof model_dependencies.reverse.
define the function rjust with 2 arguments value and arg.
raise an exception.
from django.db import connections and DEFAULT_DB_ALIAS into default namespace.
pks is a set containing results of the call to the function force_text with an argument, key attribute of the o object, for every o in opts.
substitute factory for value under '()' key of config dictionary.
if self has an attribute '_object_dict',
double the chunk size.
define the method add_arguments with self and parser as arguments.
derive the class CacheClass from the base class FileBasedCache.
return new_class.
convert ip_str to lowercase, if it doesnt start with a string '0000:0000:0000:0000:0000:ffff:',
call the initialization method UnicodeDecodeError.__init__, with self instance of this class and *args as arguments.
call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.
derive the class Command from the BaseCommand base class.
if safe is true and data is not an instance of dict type.
excluded_apps is an empty set.
define the method handle_fk_field with argument self, obj and field.
define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
call the method self._find_boundary with 2 arguments: chunk and boolean if length of chunks is lesser than self._rollback, or boolean False if not, substitute the result for boundary.
call the method __init__ from the base class of the class DecimalField, with 4 arguments: max_value, min_value, unpacked list args and unpacked dictionary kwargs.
define the method __len__ with an argument self.
substitute sysid for self.sysid.
import module re.
get value under the 'level' key of the config dictioanry, if it exists substitute it for level, if not level is None.
call the method parser.add_argument with 5 arguments: string '--domain', string '-d', default as a string 'django', dest set to string 'domain' and help as a string 'The domain of the message files (default: "django").'.
skip this loop iteration,
define private method __repr__ with argument self.
for every issues and group_name in sorted_issues,
derive the class EmailBackend from the BaseEmailBackend base class.
otherwise, if s has an attribute '__unicode__',
derive the class VariableNode form the base class Node.
find the first subgroup of the matched string from the match object, strip the whitespaces from the begging and end, replace it for tag.
zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6, and fileobj set to buf.
define the method _get_page with self class instance, unpacked list args and unpacked dictionary kwargs as arguments.
decorator stringfilter,
rendering_attrs is a list containing 3 strings: 'template_name', 'context_data' and '_post_render_callbacks'.
if _cookie_allows_colon_in_names is False,
if not,
call the function re.compile with 2 arguments: filter_raw_string and result for bitwise OR on 2 operands re.UNICODE and re.VERBOSE, substitute the result for filter_re.
call the method self.render, return the result.
import module opera.
if length of bits is not equal to integer 6,
if not,
if value is an instance of six.string_types,
import module tempfile.
if shell is true substitute list with element shell for available_shells, if not substitute self.shells for available_shells.
if value under the 'list_tags' key of options dictionay is true,
def get_handler with 3 arguments: self, unpacked list args and unpacked dictionary options.
set the file pointer at the beginning of the self.file file.
substitute loaders for self._loaders.
mail.outbox is an empty list.
call the method re.compile with an argument raw string "&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));", substitute the result for _entity_re.
if message is an instance of ValidationError class,
call the __init__ method with 3 arguments: ERROR, unpacked list args and unpacked dictionary kwargs from the base class of Error.
define the method save_existing with 4 arguments: self, form, instance and commit set to boolean True.
call the function allow_lazy with 2 arguments: escapejs, six.text_type, substitute the result for escapejs.
self._unget_history is an empty list.
if not,
raise an FieldError exception with an argument message.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
if candidate is false,
from threading import RLock.
from django.conf import settings into default namespace.
substitute new_filenames for filelist.
if value under the 'indend' key of the options dictionary exists and is not None,
call the function format_html with 3 arguments: string ('<textarea{0}>\r\n{1}</textarea>', return value of the function flatatt, called with an argument final_attrs and return value of the function force_text called with an argument value, return the result.
if filter_func has an attribute "_decorated_function",
description is a string "The '%s' function" replaced by value of receiver.__name__.
_func_defaults is a string "func_defaults".
call the color_style function, substitute the result for style.
call the os.path.samefile with arguments src and dst, return the result.
derive class X from the object base class.
WARNING is integer 30.
call the method unescape with attrvalue as the argument on the self class instance, substitute the result for attrvalue.
otherwise if klass is subclass of logging.handlers.SysLogHandler class, and string 'address' is contained in config,
_wrapped is None.
call the method self.create_select with 6 arguments: name, self.year_field, value, year_val, choices and self.year_none_value, substitute the result for the value under the 'year' key of the html dictionary.
raise an AttributeError exception with an argument string "You cannot set the upload handlers after the upload has been processed.".
return boolean False.
if not,
define the method __reversed__ with an argument self.
join elements of quant into a string, split it by string ',', substitute the result for values.
if not,
define the method _save with arguments self, name and content.
call the method self.__dict__.copy, substitute the result for state.
raise a CommandError exception, with string "No migrations present for: %s" as argument, substitute '%s' in previous string with, string joined from invalided_apps list and separated with string ', '.
define the method _new_instance with 4 arguments: (cls, children set to None, connector set to None and negated set to boolean False.
if e.errno is not equal to errno.EEXIST,
call the method self.clean with value as argument, substitute the result for cleaned.
substitute args for self.__args.
try,
if values has an attribute '__len__',
raise an TypeError with an argument string "The argument `field` must be `None` when the `error`argument contains errors for multiple fields.".
derive the class Select from the Widget base class.
call the function cache_get with an argument key, substitute the result for link.
append string "Field renamed because it was a Python reserved word." to field_notes.
call the method cursor.execute with string "DELETE FROM %s WHERE cache_key = %%s" as argument, substitute the '%s' with table and list containing key, respectively.
call the method parser.add_option with 2 arguments: string '--settings' and help as a string 'The Python path to a settings module, e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.'.
if not,
define the method represent_decimal with arguments self and data.
call the method warnings.warn with string '"validate" has been deprecated in favor of "check".' and RemovedInDjango19Warning as arguments.
define the function dummy with 2 arguments: unpacked list args and unpacked dictionary kwargs.
get the value under the 'CONTENT_TYPE' key of the self.META dictionary, if it starts with a string 'multipart/form-data',
decompress is boolean False.
substitute include_html for self.include_html.
call the method _trans.ungettext with 3 arguments singular, plural and number.
try,
define the method __deepcopy__ with 2 arguments: self and memodict.
if name is None,
raise an AttributeError with an argument attr.
if string 'django.middleware.clickjacking.XFrameOptionsMiddleware' is not contained in settings.MIDDLEWARE_CLASSES set,
call the function strftime with 2 arguments: self and fmt, return the result.
decrement end by one.
append string '_fork' to flup_module.
call the method self.xml.addQuickElement with an argument string 'None'.
if language_code is not contained in self._regex_dict,
if field.show_hidden_initial is false,
if settings.USE_TZ is true substitute result of the function timezone.get_current_timezone for tzinfo, if not tzinfo is None.
substitute text_kwargs for candidate_subs.
convert filename to lowercase, use the result as an argument for the call to the function os.path.splitext, substitute the result for base and tail_ext.
from __future__ import unicode_literals into default name space.
call the function re.compile with an argument raw string '^\w{3}, %s %s %s %s GMT$' formated with __D, __M, __Y and __T, substitute the result for RFC1123_DATE.
if _default is None,
msg is a string 'Module "%s" does not define a "%s" attribute/class' formated with dotted_path and class_name, respectively.
if not,
if value is None,
substitute tuple with 2 elements: bz2.BZ2File and string 'r' for value under the 'bz2' key of the self.compression_formats dictionary.
define the method _get_scheme with an argument self.
call the method self._setup.
from django.utils import six into default name space.
return week_number.
call the method tuple.__getitem__ with 2 arguments: self and key, substitute the result for value.
from django.utils.six.moves import map into default name space.
define the function check_for_migrations with 2 arguments: app_config and connection.
if index is lesser than integer 0,
define the function _create_cache with backend and dictionary pair of elements kwargs as arguments.
substitute the tuple containing 2 elements p_pattern and pattern for value under the pattern.namespace key of the namespaces dictionary.
updates is an empty dictionary.
if filters is true,
call the function get_wsgi_application, return the result.
for every i in self.years append tuple containing i and i elements into a list, substitute the resulting string for choices.
assign StringIO.StringIO to StringIO and BytesIO.
substitute TemplateDoesNotExist for self.find_template_cache dictionary value under the key key.
call the method value.encode with an argument charset.
define the method handle_field with arguments self, obj and field.
from django.utils.encoding import force_bytes into default name space.
return s.
if child.nodeType equals to child.TEXT_NODE or child.nodeType equals to child.CDATA_SECTION_NODE,
from UserList import UserList into default namespace.
if not,
call the method self._assert_mutable.
if pythonrc is true,
return cookiedict.
import module codecs.
ch2 is None.
if not,
open new_path file in 'wb' mode, with file descriptor renamed to new_file,
if data is an instance of datetime.datetime or datetime.time classes, and supports_microseconds field of self.field.widget is false,
if answer equals a string 'y',
return response.
do nothing.
define the method _cache with self class instance as an argument.
for every h in elements of logger.handlers list,
if KeyError exception is caught,
app_list is an instance of a class OrderedDict.
derive the class MLStripper from the HTMLParser base class.
self._errors is an instance of ErrorDict.
call the function self._truncate_html with 5 arguments: length, truncate, text, truncate_len and boolean False, return the result.
call the function format_html with 3 arguments: self.inner_html, choice_value set to result of the function force_text, called with an argument w, and sub_widgets as an empty string, append the result to output.
call the function ungettext with 3 arguments: string "%(size)d byte", string "%(size)d bytes" and 0, '%(size)d' is replaced with 0, substitute the result for value.
return self.cleaned_data.
__Y is a raw string '(?P<year>\d{4})'.
call the method stream.unget with an argument chunk.
return new_class.
if second element of t is boolean True,
return an instance of SafeText, created with an argument s.
derive the class TemplateCommand from the BaseCommand base class.
import module types.
if LookupError exception is caught,
try,
define the method message_dict with an argument self.
otherwise, get the 'alters_data' attribute of current object, if it exists and is true,
widget.is_localized is boolean True.
register.tag decorator,
missing_args_message is a string "You must provide a project name.".
for every x is the range of integers from level to the integer 2, in the reversed order,
cls is None.
call the __init__ method from the base class of the WSGIServer class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
get value under the 'database' key of the options dictionary, substitute it for db.
for every k and v in return value of the function defaults.items,
call the method validators.MaxValueValidator with max_value converted into an integer, append the result to list self.validators.
call the function six.reraise with 3 arguments: DeserializationError, return value of the DeserializationError called with an argument e,
otherwise if first element of message_context equals to character "'",
if other equals list containing elements of self, return boolean True, otherwise return boolean False.
if self.pk_field,
append a tuple with 2 entries lang and priority to result.
call the function _trans.to_locale with an argument language, return the result.
from __future__ import unicode_literals into default name space.
derive the class Deserializer from the six.Iterator base class.
if ImportError exception is caught,
return self.file.closed.
if value under the 'microsecond' key of the kw dictionary is true,
if name is true, substitute it for function_name, if not get attribute '_decorated_function' from func object, substitute its __name__ field for function name, if it doesnt exists substitute func.__name__ for function_name.
return an instance of ForNode class, created with 5 arguments: loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty.
comment_lineno_cache is None,
call the function escape with an argument word, substitute the result for i-th element of words.
for every resultclass in resultclasses,
for every val in value call the function smart_text with an argument val, return the results in a lit.
return created_models
if UnicodeDecodeError exception is caught,
define the method __reduce__ with an argument self.
if source is an instance of NonCapture class,
return nothing.
for every option in options,
define the method __bytes_cast with an argument self.
call the function time.sleep with an argument integer 1.
get 'Meta' attribute from form object, if it exists substitute it for meta, if not meta is None.
define the method _make_parser with an argument self.
if TypeError exception is caught,
if data has an attribute 'read',
register.tag decorator,
DEFAULT_CACHE_ALIAS is a string 'default'.
call the method os.dup2 with 2 arguments: result of the method so.fileno and result of the method sys.stdout.fileno.
loader is an instance of MigrationLoader class, created with an argument connection.
call the function ensure_echo_on.
try,
call the method router.allow_migrate with 2 arguments: database and cache.cache_model_class, if it evaluates to false,
substitute self.pointer for i.
define the method o with an argument self.
call the method token.split_contents, substitute the result for bits.
define the method get with 4 arguments, self class instance, key, default set to None and version set to None.
FASTCGI_OPTIONS is a dictionary containing 16 initial entries: 'fcgi' for 'protocol', None for 'host', None for 'port',
found is boolean False.
substitute True for output_transaction.
call the function getInnerText with an argument child, use the result as an argument for the call to the method inner_text.extend.
define the method clear with argument self.
if not,
return data.
raise an BadSignature exception with an argument string 'Signature "%s" does not match', where '%s' is replaced by sig.
define the function date_format with 3 arguments: value, format set to None and use_l10n set to None.
call the method parser.add_argument with 6 arguments: string '--name', string '-n', dest set to string 'files', action set to string 'append', default as an empty list and help set to a string: 'The file name(s) to render. Separate multiple extensions with commas, or use -n multiple times.'.
define the method __init__ with 2 arguments: self and attrs set to None.
if e doesnt have an 'django_template_source' attribute,
if self.use_ssl and self.use_tls are boolean True,
raise an ValueError with an argument string "The %s could not be %s because the data didn't validate.", where '%s' is replaced with opts.object_name and fail_message, respectively.
return FormSet.
if fields is true,
sort elements of list existing.
substitute boolean_check for self.check_test if check_test is None, otherwise substitute check_test for self.check_test.
mapped_tokens is an empty list.
substitute app_name for klass.
call the method self.initial_form_count, return the result initial_forms.
write string "No changes detected" to self.stdout stream.
try,
skip this loop iteration.
call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_read.
from __future__ import unicode_literals into default name space.
do nothing.
if self doesnt have an '_deleted_form_indexes' attribute,
format_key is a string 'DATETIME_INPUT_FORMATS'.
return boolean True.
define the function b64_decode with an argument s.
call the self.get_dum_object method with an argument obj, use the result as an argument for the self.objects.append method.
f _serializers is false,
if settings.configured is false,
try,
append pattern into a list patterns, for every possibility, pattern and defaults in possibilities.
output is an empty list.
sub is an empty string.
if not,
from django.conf import settings into default name space.
define the method delete_many with 3 arguments: self, keys, and version set to None.
define the method __init__ with arguments self, stream and boundary.
define the method full_clean with an argument self.
define the method push with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
if length of version does not equals to integer 5, raise an exception.
if data_list is true,
define the method render with 5 arguments: self, name set to None, value set to None, attrs set to None and choices set to an empty tuple.
evaluate the function callback with request and dictionary of parameters param_dict as the arguments, return the result.
help is a string "Runs this project as a FastCGI application. Requires flup.".
call the function style_func with an argument msg, use the result as an argument for the call to the function force_str, use the result as an argument for the call to the function self._out.write.
call the method add_arguments from the base class of the Command class, with an argument parser.
substitute opts for value under the 'opts' key of definition dictionary.
raise an AttributeError with an argument string "%s could not be imported ", formated with self.name.
define the method tzname with 2 arguments self and dt.
return response.
raise an NotImplementedError with an argument string 'Subclasses must implement this method.'.
from django.core.files.base import File into default name space.
call the function re.compile with 2 arguments: raw string '((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)', formated with string created by joining elements of result of the function re.escape with an argument x, with separator '|', for every x in DOTS, and re.DOTALL, substitute the result for hard_coded_bullets_re.
return boolean False.
if value under the 'outlog' key of options dictionary is true,
define the method send_messages with arguments self and email_messages.
call the method parser.compile_filter with an argument first element of bits, substitute the result for target.
if f.null is false, append string append "NOT NULL" to field_output, otherwise append "NULL" to field_output.
trans_real._default is None.
call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of item dictionary.
raise an ValidationError exception with 2 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary, code set to a string 'invalid_choice'.
BUILTIN_SERIALIZERS is a dictionary containing 4 inital entries: "django.core.serializers.xml_serializer" for "xml", "django.core.serializers.python" for "python", "django.core.serializers.json" for "json", and "django.core.serializers.pyyaml" for "yaml".
join comment elements into a string, substitute it for content.
if attrs is true, call the function flatatt with an argument attrs, substitute the result for attrs, if not attrs is an empty string.
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries: value under the 'link' key of item dictionary for 'href' and "alternate" for "rel".
define the method __len__ with an argument self.
call the method block_context.pop with an argument self.name, assign the result to push and block.
if self.include_html is true, call the method reporter.get_traceback_html and substitute the result for html_message, otherwise html_message is None.
if not,
call the method parser.parse with an argument tuple with an element string 'endverbatim', substitute the result for nodelist.
define the method print_help with 3 arguments: self, prog_name and subcommand.
call the function _bin_to_long with an argument u perform bitwise exclusive OR with 2 operands, previous result an result, substitute the result for result.
from django.utils.encoding import force_bytes into default name space.
break from the smallest enclosing loop.
if self.verbosity is greater than integer 1,
has_bz2 is boolean True.
for every name and app in return value of the function six.iteritems calle with return argument of function get_commands as an arugment,
call the method self.nodelist_false.render with an arguments context, return the result.
call the method self.endElement with an argument name.
call the function warnings.warn with 2 arguments: warn_msg and TranslatorCommentWarning.
if html_message is True,
call the method self.Z, substitute the result for seconds.
raise an CommandError with an argument string "AppCommand cannot handle app '%s' in legacy mode because it doesn't have a models module.", where '%s' is replaced by app_config.label.
call the function six.iteritems with an argument kwargs, for every k and v in the result,
fields is an tuple containing 3 entries: return value of the method models.CharField called with 4 arguments: name set to a string 'cache_key', max_length set to integer 255, unique set to boolean True and primary_key set to boolean True, return value of the method models.TextField called with argument name set to a string 'value', and return value of the method models.DateTimeField called with 2 arguments: name set to string 'expires' and db_index set to True.
for every key in return vale of the method executor.loader.graph.leaf_nodes, check if the first element of key equals to app_label, if it does append it to targets list.
if url is false,
evaluate the logic expression, plat does not equals to string 'Pocket PC', and plat does not equals to string 'win32' or string 'ANICON' is in os.environ, substitute the evaluated boolean for supported_platform.
if view_function is not a callable function,
wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer, for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare', value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxChildren', and value under the key 'maxrequests' of options dictionary converted to an integer, for 'maxRequests'.
from django.conf import settings into default name space.
put every header in newheaders in a list, only if newheader converted to lowercase does not exist in existing_headers, substitute this list for additional_headers.
convert result of the method self.__iter__ into a list, return element at the idx index.
output is an empty string.
call the method self.timezone.utcoffset with an argument self.data, substitute the result for offset.
define the method _open with arguments self, name and mode defaulting to string 'rb'.
call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for value.
if value is contained in self.empty_values,
defaults is a dictionary with 4 entries: data for 'data', files for 'files', auto_id for 'auto_id' and prefix for 'prefix'.
if not,
call the function widget, substitute the result for widget.
define the function deactivate.
call the method __init__ from the base class of the class CheckboxInput, with an argument attrs.
break the loop execution.
define the function b with an argument s.
define the next_space_index with 2 arguments: subject and i.
define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
call the field.rel.to._meta.get_field method with an field.rel.field_name argument, on the result call the method to_python, with field_value as an argument, substitute the result for obj_pk.
initial is an empty list.
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
substitute last element of bits for asvar.
if KeyboardInterrupt exception is caught,
call the method self.options.copy, substitute the result for self.json_kwargs.
define function get_max_age with response as an argument.
define the function parse_date with an argument value.
derive the class MinValueValidator form the BaseValidator base class.
while i is lesser than length of subject and i-th element of subject is an empty space or tab character.
split the string cc_delim_re with value under the key 'Vary' of response dictionary as delimiter, substitute result for vary_headers.
otherwise if value under the key 'all' of the options dictionary is true,
for every i in successive list of integers from 1 to 30, append tuple containing i and i elements into a list, substitute the resulting string for choices.
call the method parser.add_argument with string '--locale', string '-l', dest set to string 'locale', action set to string 'append', default as an empty list and help as an string 'Locale(s) to process (e.g. de_AT). Default is to process all. Can be used multiple times.'.
quant is an empty list.
insert mw_instance.process_exception at the beginning of self._exception_middleware.
return boolean True.
call the function six.reraise with 3 arguments: exc_type, exc_value and third element of the result of the method sys.exc_info.
self._called_from_command_line is boolean True.
call the function six.text_type with s as an argument, substitute the result for s.
decorator function register.filter with 2 arguments string "slice" and is_safe set to boolean True.
define the method attach_alternative with arguments self, content and mimetype.
if ValueError exception is caught,
if extra_classes has an attribute 'split',
call the method __init__ from the base class of the class Truncator, called with with an argument lambda function which returns result of the force_text function called with an argument text.
return an instance of AssignmentNode class created with 4 arguments: takes_context, args, kwargs and target_var.
raise an ValidationError with 3 arguments: value under the 'max_digits' key of the self.error_messages dictionary, code set to string 'max_digits' and params set to a dictionary with an entry: self.max_digits for 'max'.
if AttributeError exception is caught,
otherwise if func is callable,
do nothing.
call the function translation with an argument language, substitute the result for _active.value.
call the function get_language, substitute the result for language_code.
if TemplateDoesNotExist exception is caught,
call the method s.find with an argument bytes string ';', substitute the result for end.
for every key in self.keyOrder,
all_date_checks is an empty set.
return attachment.
replace '%s' in string "System check identified some issues:\n%s" with msg, substitute it for msg.
call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults.
define the method check_programs with an argument unpacked list programs.
if self.is_bound is true,
define lambda function that returns self.file.encoding field, use it as an argument for property function, put the result in encoding.
define the method add_item_elements with 3 arguments: self, handler and item.
call the method self.handle_fk_field with arguments obj and field.
deactivate and deactivate_all are lambda functions returning None.
return nothing.
call the method token.split_contents, substitute the result without the first element for bits.
return value.
if not,
call the method self.enter_command with 2 arguments command and token.
if not,
if self.data is an instance of datetime.datetime and result of the function is_aware called with an argument self.data evaluates to true,
substitute viewname for view.
substitute old_setting for context.autoescape.
for every attr in tuple with 3 arguments: strings 'expects_localtime', 'is_safe' and 'needs_autoescape',
return boolean True.
if sub_tried is not None,
evaluate the member method of s, encode with the encoding and errors as the arguments, return the result.
if self.verbosity is greater or equals to integer 2.
append string 'django.conf.locale.%s' to format_locations.
from __future__ import unicode_literals into default name space.
kwargs is a dictionary with an entry: attribute 'label' of the object under the name key of the form.fields dictionary for 'label', if it doesnt exists return value of the function capfirst with an argument self.fk.verbose_name for 'label'.
from django.utils import six into default name space.
if value under the index key of the hextets dictionary equals to string '0',
if not,
from django.forms.utils import ErrorList into default name space.
define protected method _BaseCookie__set with self class instance, key, real_value and coded_value as arguments.
if e doesnt have an 'django_template_source' attribute,
call the function timezone.get_current_timezone, substitute the result for current_timezone.
call the method __init__ from the base class of the class BaseModelFormSet, with an argument unpacked dictionary defaults.
call the method self.nodelist_false.render with an argument context, return the result.
if self.verbosity is greater or equal to integer 2,
call the method Model._default_manager.db_manager with an argument db, on the result call the get_by_natural_key with, an unpacked list natural_key as argument, substitute the pk filed of the resulting object for obj.pk.
if self.pointer is smaller than length of self.subject, return boolean True, otherwise return False.
call the method self._cache.set_multi with safe_data, self.get_backend_timeout(timeout) as arguments.
from __future__ import unicode_literals into default name space.
if TypeError, ValueError or UnicodeDecodeError exceptions are caught,
from django.core.management.color import no_style into default name space.
return an empty string.
call the method copy.copy, substitute the result for obj.
for every fixture_file, fixture_dir and fixture_name in return value of the method self.find_fixtures called with an argument fixture_label,
if field is contained in self.cleaned_data,
if self._wrapped is contained in empty,
if ch is true,
try,
from django.forms.fields import Field and FileField into default name space.
if not,
_func_globals is a string "func_globals".
return self.data.hour.
if max_num is None,
call the function _load_serializers.
define the function handle_default_options with an argument options.
from .. import Warning, register and Tags into default name space.
if ValueError, TypeError or ValidationError exception is caught,
define the method clean with an argument self.
return string 'StopUpload: Consume request data, then halt.'.
value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary is BlockContext class instance.
if Exception, renamed to e, exception is caught,
call the function format_html with 4 arguments: string '<label{0}>{1} {2}</label>', label_for, result of the method self.tag, and self.choice_label, return the result.
if match evaluates to False throw an exception with the string message 'unexpected call to parse_starttag()'.
return decorating_function.
if not,
if IndexError exception is caught,
if pythonrc is not a file,
append string "Field renamed because it wasn't a valid Python identifier." to field_notes.
define the method data with an argument self.
if type of s equals bytes,
label_for is an empty string.
if length of bits is lesser than integer 2,
define the method __repr__ with argument self.
join to_path and name into a valid system path, substitute the result for filename.
substitute bits, without the first two elements, substitute the result for remaining_bits.
try,
read the whole self file and yield it as a generator return value.
do nothing,
define the method render with 2 arguments: self and context.
if not,
define the method accessed_time with arguments self and name.
multiply self.number and self.paginator.per_page, return the result.
do nothing.
define the method has_other_pages with an argument self.
substitute value under the field key of the self.fields dictionary for form_field.
if self.is_localized is true,
from django.db import router and DEFAULT_DB_ALIAS into default name space.
define the __init__ method with arguments: self, unpacked list args and unpacked dictionary kwargs.
evaluate the method connections[db].ops.cache_key_culling_sql, evaluate the result by table modulus, call the method cursor.execute, with previous result and list containing cull_num, respectively as arguments.
file is an instance of BytesIO class created with an argument: return value of the method data.read.
if IOError, renamed to e, exception is caught,
is_required is boolean False.
if compare_to is not equal to value under the self key of state_frame.
substitute self._meta for opts.
if not,
call the function call_command with 2 arguments: string migrate and unpacked dictionary options.
get the directory name of filename, substitute the result for dirname.
join app_dir and string 'models/sql' into a file path, use the result as an argument for the call to the function os.path.normpath, append the result to old_app_dirs.
define the function set_script_prefix with an argument prefix.
return boolean False.
if length of fks_to_parent is integer 1,
html is an empty dictionary.
if converter is true,
call the method sys.stdout.close.
return an instance of a class RegexURLResolver created with arguments: raw string '^/' and urlconf.
if '.' is contained in last elements of hextets,
num is an integer 0.
if self.allow_files is true and full_file is a file, or if self.allow_folders is true and full_file is an directory, and only if self.match is None or return value of the method self.match_re.search called with an argument f is true.
append ch to result.
join lineno_comment_map dictionary value under the comment_lineno_cache key into a string, separated with ' | ', format with it a string '# %s', write it to out.
msg is a string "[%s] %s\n", where '%s' are replaced with return value of the method self.log_date_time_string and formated args.
call the method connection.ops.sequence_reset_sql with 2 arguments: return value of the no_style and self.models, substitute the result for sequence_sql.
define the initialization method __init__ with 3 arguments: self, name and params.
value under the 'blank' key of the extra_params dictionary is boolean True.
d is an empty string.
from django.core.mail import get_connection into default name space.
append key to self.keyOrder.
call the method parser.add_argument with 5 arguments: string '--no-obsolete', action as a string 'store_true', dest as a string 'no_obsolete', default as boolean False and help as a string "Remove obsolete message strings.".
call the method local, substitute the result for _active.
return the value under the language_code key of the self._reverse_dict dictionary.
define the function _set_response_etag, with response as an argument.
if options.traceback is true or e is not CommandError instance,
define the method to_python with arguments self and data.
call the function f with a arguments: unpacked list args and unpacked dictionary kwargs, return the result.
import module base64.
substitute value for the value under the name key of the self.cleaned_data dictionary.
can_import_settings is boolean True.
call the function save_m2m.
substitute skipped for model_dependencies.
help is a string "Prints the DROP TABLE SQL statements for the given app name(s).".
if not,
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
if not,
if query is an instance of MultiValueDict class,
do nothing.
if name is true,
if 'coerce' key of the kwargs dictionary exists remove it and substitute its value for self.coerce, if not, self.coerce is an identity lambda function with an argument val.
if not,
do nothing.
derive the class BoundaryIter from the six.Iterator base class.
MONTHS_3 is an dictionary with 12 entries: result of the call to the function _ with an argument string 'jan' for 1, result of the call to the function _ with an argument string 'feb' for 2, result of the call to the function _ with an argument string 'mar' for 3, result of the call to the function _ with an argument string 'apr' for 4, result of the call to the function _ with an argument string 'may' for 5, result of the call to the function _ with an argument string 'jun' for 6, result of the call to the function _ with an argument string 'jul' for 7, result of the call to the function _ with an argument string 'aug' for 8, result of the call to the function _ with an argument string 'sep' for 9, result of the call to the function _ with an argument string 'oct' for 10, result of the call to the function _ with an argument string 'nov' for 11, result of the call to the function _ with an argument string 'dec' for 12.
substitute v for value under the k converted to lower case key of options dictionary.
for key and value in result of the function six.iterlists called with an argument,
return nothing.
call the method parser.add_argument with string '--database', action containing string 'store', dest set to string 'database', default set to DEFAULT_DB_ALIAS, help containing string 'Nominates a database to synchronize. Defaults to the "default" database.' as arguments.
if first element of s is not contained in "\"'" or last element of s is not equal to first element of s,
call the method settings._setup.
from django.utils.encoding import force_text and python_2_unicode_compatible into default name space.
join inner_text elements into a string.
return None.
from django.conf import settings into default name space.
if chunk is empty,
define the method g with an argument self.
from django.utils import six into default name space.
from django.utils.encoding import force_str and force_text into default name space.
from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space.
if self.required is true,
if attrs is false, make it an empty dictionary.
self.method is None.
join chunks into bytes string, substitute it for chunk.
return self.find_template_cache dictionary value under the key key.
call the method self.nodelist.render with an argument context, return the result.
call the function _ with an argument string '(Hidden field %(name)s) %(error)s', where '%(name)s' is replaced with name, and '%(error)s' is replaced with return value of the force_text function called with an argument e, extend the top_errors with the result.
call the method self.compress with an argument clean_data, substitute the result for out.
call the method self.event_stream.expandNode with an argument node.
read data from buf, yield the result.
call the encode function on the Header class instance, created with arguments addr and encoding, substitute the result for addr.
convert text to an integer, substitute it for c.
define the method h with an argument self.
derive class Command from the base class BaseCommand.
fixture_files_in_dir is an empty list.
call the options.get method with string 'MAX_ENTRIES' and integer 300 as arguments, use the string 'max_entries' and previous result as the arguments for the call to the params.get method, substitute the result for max_entries.
call the method parser.compile_filter with an argument, third element of bits, substitute the result for val2.
return the directory name two directories up from the __file__ path, join it with 'conf' and 'locale' into valid path, separated by '/', basedirs is a list containing 2 elements: previous result and string 'locale'.
if 'class' is contained in attrs,
from django.utils.six.moves import cPickle as pickle, into default namespace.
join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name, append the result to sql_files.
for every f in return value of the os.listdir function called with an argument command_dir, append f without 3 last elements to a list, only if f doesnt start with character '_' and doesnt ends with string '.py', return the resulting list.
if first element of e.args is not contained in not_found,
substitute ev.filename for filename.
define the method __deepcopy__ with 2 arguments: self and memo set to None.
self.pos is integer 0.
append list with element inner to list containing first start elements of result, substitute it for result.
substitute content for self.content.
from django.apps import apps into default name space.
register.tag decorator,
from django.utils.translation import get_language, to_locale and check_for_language into default name space.
if not,
pop_context is boolean True.
multiply 10 to the power of 200, with 10 to the power of 200, negative, substitute the result for neg_inf.
define the method make_writeable with arguments self and filename.
define the method __str__ with argument self.
define the method __iter__ with an argument self.
call the method pop from the base class of the class SortedDict, with 2 arguments k and unpacked list args, substitute the result for result.
substitute field for self.field.
if indent is true,
from django.core.exceptions import ImproperlyConfigured into default name space.
call the function re.compile with 2 arguments regex, re.UNICODE and substitute the result for regex.
if six.PY2 is true and path is not an instance of byes type,
for every path in self.locale_paths,
derive the class QueryDict from the base class MultiValueDict.
return nothing.
substitute model._meta for opts.
call the method self.open, substitute the result for the new_conn_created.
for every pk in value,
call the method zipfile.ZipFile.__init___ with the arguments self, unpacked list args and unpacked dictionary kwargs.
define the method list with an argument self.
define the function build_request_repr with arguments: request, path_override set to None, GET_override set to None,
join root and f into a file, substitute it for f.
format string "%s%s%s" with 3 elements: result of the function random.getstate, result of the call the the function time.time, and settings.SECRET_KEY, call on it method encode with an argument string 'utf-8', use the result as an argument for the call to the method hashlib.sha256, call the method digest on the result, use the result as an argument for the call to the function random.seed.
raise an AttributeError exception with an argument string: "'%s' object has no attribute 'ordered_forms'", where '%s' is replaced with self.__class__.__name__.
clean is a lambda function with self and x as arguments, return value is length of x.
if neg is true,
return instance.
call the function warnings.warn with 3 arguments: string "`%s.%s` is deprecated, use `%s` instead.", formated with 3 elements: self.class_name, self.old_method_name and self.new_method_name, self.deprecation_warning and integer 2.
return boolean False.
otherwise if ch equals a string '.',
define the method read with self class instance and size set to None as arguments.
substitute _iterkeys for keys.
if self.use_natural_primary_keys is false and obj doesnt have 'natural_key' argument.
substitute cls for obj.__class__.
join bytes and self._leftover into a bytes string, substitute it for self._leftover.
try
define the method compile_filter_error with 3 arguments: self, token and e.
get the unicode representation of result of the method match.group called with an integer 1, format with in a string "\\u%04x", return the result.
set self.name attribute of the obj object to result.
remove value under key key of self dictionary, if it doesnt exists return default, substitute the result for value.
return a string 'Raw content'.
if six.PY2 is true,
define the method choice with 2 arguments: self and obj.
if parsed.scheme is true and parsed.scheme is not contained in self.allowed_schemes,
for name in attributes of models_signals object,
derive the class TagHelperNode form the base class Node.
from django.utils.six.moves import input into default name space.
try,
call the method opts.model, substitute the result for self.instance.
call the method dict_.getlist with an argument key, return the result.
property decorator,
define the method add_aguments with arguments self and parser.
return msgs.
return is empty dictionary.
call the function re.compile with raw string '(<a [^>]*?)target=[^\s>]+', substitute the result for link_target_attribute_re.
define the method inclusion_tag with 5 arguments: self, file_name, context_class set to Context, takes_context set to boolean False, and name set to None.
if value under the 'DJANGO_SETTINGS_MODULE' key of os.environ dictionary exists.
if self.default_locale_path directory doesnt exists,
define the method __init__ with 3 arguments: self, attrs set to None and choices set to an empty tuple.
raise an ValueError exception with an argument string 'Unable to configure handler %r: %s' formated with name and e.
call the function signed_value with an argument value, substitute the result for signed_value.
return None.
substitute level for rv.
call the method parser.parse_known_args wiht an argument self.argv, without the first two elements, assign the result for options, and args, respectively.
if level is an instance of int type,
call the method self.tag, substitute the result for self.tagname.
append a tuple containing 2 elements: content and mimetype, to the self.alternatives list.
break the loop execution.
otherwise if '\\' is contained in path,
define the method handle_label with 3 arguments: self, label and unpacked dictionary options.
define the function modelform_defines_fields with an argument form_class.
if host ends with '.', remove the last element from host.
substitute help_text for self.help_text.
define the function gettext_noop with an argument message.
call the function _helper with an argument value, use it as an argument for the call to the function mark_safe, return the result.
pdict is an empty dictionary.
return string 'initial-%s' where '%s' is replaced with return value of the self.add_prefix method called with an argument field_name.
call the method datetime_safe.new_date with an argument date_value, substitute the result for date_value.
import module re.
slots is a list with an element, slots.
derive the class ImproperlyConfigured from the Exception base class.
if autoescape is true and value is not an instance of SafeData, autoescape is boolean True, otherwise it is boolean False.
update default_attrs dictionary with attrs entry.
if attachments exists substitute it for self.attachments, if not attachments is an empty list.
if LookupError exception is caught,
call the function os.path.basename with an argument fixture_file, use the result as an argument for the call to the method, self.parse_name, assign the result to _, ser_fmt and cmp_fmt, respectively.
if context_instance is false,
call the method re.sub with 3 arguments: raw string '&(?:\w+|#\d+);', empty string and result of the function force_text, called with an argument value, return the result.
call the function patch_cache_control, with response and max_age set to cache_timeout as arguments.
split first and second element of hextet into parts by ':', sum their lengths, substitute the result for sep.
replace '%s' in the string '%s %s' with response.status_code and response.reason_phrase, respectively, substitute it for status.
evaluate self.stream.getvalue method, return the result.
call the function _trans.get_language_bidi, return the result.
raise an NotImplementedError with an argument string "Subclasses of AppCommand must provide a handle_app_config() method.".
define the function send_mass_mail with, datatuple, fail_silently set to False, auth_user set to None, auth_password set to None,
raise an StopIteration exception,
call the function force_text with an argument option_value, substitute the result for option_value.
if original_lookup and lookup_view are not callable objects,
do nothing.
define the method as_p with an argument self.
call the method self.error with 2 arguments: token and string "Invalid block tag: '%s'", where '%s' is replaced with command, return the result.
return the result of the method field.widget.value_from_datadict called with 3 arguments: self.data, self.files and prefix.
get the value under the 'ignore' key of the options dictionary, substitute it for self.ignore.
replace '%s' in string '</%s>' with tag, append the result to out.
inputs is an empty list.
call the method self.xml.startElement with 2 arguments, string "django-objects" and a dictionary containing 1 element: "1.0" for "version".
call the method self.xml.startElement with 2 arguments: string 'field' and dictionary containing 3 entries: field.name for 'name', field.rel.__class__.__name__ for 'rel' and return value of the function smart_text with an argument field.rel.to._meta for 'to'.
substitute fcntl.LOCK_SH for LOCK_SH.
substitute self for result.parent.
substitute the value under the 'outlog' key of options dictionary for value under the 'out_log' key of daemon_kwargs dictionary.
url is None.
derive the class ReferenceLocalTimezone from the tzinfo base class.
if request._post_parse_error is true,
append tuple containing 3 elements: candidate, fixture_dir and fixture_name to list fixture_files_in_dir.
call the function allow_lazy with an argument strip_tags, substitute the result for strip_tags.
raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' for key.
yield line.
if character ':' is not contained in template,
from django.db.migrations.autodetector import MigrationAutodetector into default name space.
middle is a string '<a href="%s"%s>%s</a>' formated with url, nofollow_attr and trimmed.
skip this loop iteration.
delete element under 'warning' key of kwargs dictionary.
sorted_issues is a list of tuples with 5 entries: criticals and 'CRITICALS', errors and 'ERRORS', warnings and 'WARNINGS', infos, 'INFOS'
substitute boundary for self.boundary.
convert value to an floating point number if it is not equal to integer 1,
  managed = False",
call the method widget.id_for_label with an argument id_, return the result.
try,
call the function warnings.warn with 2 arguments: string "Need {0} values to unpack in for loop; got {1}. This will raise an exception in Django 2.0." formated with num_loopvars and len_item, respectively, and RemovedInDjango20Warning.
otherwise if value under the key key of the user_settings dictionary is not equal to the value under the key key of the default_settings dictionary,
call the function six.reraise with 3 arguments: ImportError, instance of ImportError class created with an argument msg, and third element of result of the function sys.exc_info.
if _standard_context_processors is None,
substitute declared_fields for new_class.declared_fields.
return an empty string.
if tried is true,
decorator python_2_unicode_compatible,
from django.utils import six into default name space.
define the method __init__ with 3 arguments: self, msg and params set to an empty tuple.
derive the class CheckRegistry with object as base class.
derive the class ManagementForm from the Form base class.
timeout is a integer -1.
if not,
substitute media.__dict__ for media_attrs.
call the method node.getAttribute with an argument attr, substitute the result for model_identifier.
from django.utils.html import avoid_wrapping into default name space.
define the method  remove_potfiles with an argument self.
do nothing.
if not,
call the function get_exception_reporter_filter with an argument request, substitute the result for filter.
seen_data is an empty set.
node is an instance CycleNode class, created with  values,name and silent set to silent.
if app_config.models_module is None,
define the function format_html with 3 arguments: format_string, unpacked list args and unpacked dictionary kwargs.
if value is None,
otherwise if value is an instance of datetime.datetime,
if not,
call the method parser.parse_args with argv, without the first 2 elements, substitute the result for options and args.
concatenate string '%0', width and string "d. %s", format the previous string with i incremented by 1 and line, substitute the result for i-th element of lines.
compile a regex from raw string '^\s*(\w+)\s*', substitute it for WORD_PATTERN.
remove self.value_converters dictionary element under prefix key, if it exists substitute it for converter, if not, converter is None.
usage is a list containing 4 entries: an empty string, string "Type '%s help <subcommand>' for help on a specific subcommand.", where '%s' is replaced with self.prog_name, an empty string and string "Available subcommands:".
substitute False for self.close_called.
get type of self, call it and substitute the result for result.
if self.file_permissions_mode is not None,
call the method m.group with an argument string 'mon', convert the result to lowercase, use it as an argument for the call to the, method MONTHS.index, increment the result by integer 1, substitute it for month.
from django.utils.module_loading import import_string into default name space.
if invalid_var_format_string is true,
targets is a list containing tuple with two elements, app_label and migration.name.
substitute cls.__bytes_cast for cls.__str__.
try,
import module struc.
get the value under the key key of the self.cookies dictionary, substitute boolean True for 'secure' key of the returned dictionary.
import module time.
if not,
if data is boolean False,
call the function six.itervalues with an argument kwargs, convert the result to a list and append it to a list containing args, for every arg in the result,
derive class Module_six_moves_urllib from the types.ModuleType base class.
define the method _ipython_pre_011 with an argument self.
return kwargs.
call the method sys.stderr.write with an argument string "  as a FastCGI application, you will need to get flup from\n". call the method sys.stderr.write with an argument string "  http://www.saddi.com/software/flup/
if is_templatized is true,
raise an TemplateSyntaxError exception with an argument string "Could not parse some characters: %s|%s|%s", where '%s' is replaced with first upto elements of token string, token string elements from upto to start index, and token string elements from start index to the end.
define the method _add_installed_apps_translations with an argument self.
from django.core.management.color import no_style into default name space.
define the method __dir__ with an argument self.
substitute rhs for number_value.
call the method value.replace with an arugment tzinfo set to None, return the result.
if line ends with a new line character substitute width incremented by integer 1 for max_width, if not substitute width for max_width.
from __future__ import unicode_literals into default name space.
define the method __reduce_ex__ with 2 arguments self and proto.
define the initialization method __init__ with arguments: self class instance, dir and params.
property decorator,
return result.
do nothing.
if self.fail_silently is boolean True,
define the method __len__ with an argument self.
if Exception exception is caught,
define the method __init__ with an argument self.
create a generator that for every d in row_data, if d has an '_get_pk_val' attribute, returns the result of the call the method d._get_pk_val, if not return d, put all the generator items into a tuple row_data.
if self.file is false or self.file.closed is true, return boolean true, otherwise return boolean false.
return result.
finally, perform,
if not,
return integer 0.
for every template_name in template_name_list,
call the method cgi.parse_header with an argument content_disposition, assign the result to _ and params, respectively.
for every bit in elements of bits without the first element, call the method parser.compile_filter, with an argument bit, substitute the list of results for values.
define the method handle with arguments self, unpacked list tablenames and unpacked dictionary options.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid date.' for 'invalid'.
self.position is an integer 0.
otherwis if char is contained in string 'Yy',
if '.' is not contained in str_number,
from pprint import pformat.
DEFAULT_LOGGING is a dictionary with 5 initial entries: 1 for 'version', False for 'disable_existing_loggers', and 3 additional pairs of dictionaries for string.
make a directory migrations_directory.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
try,
convert key_prefix, version and key into strings, concatenate them respectively, with character ':' as delimiter, return the result.
raise an NotImplementedError exception with an argument string 'subclasses of Origin must provide a reload() method'.
substitute HiddenInput for hidden_widget.
define the function cycle with 2 arguments: parser and token.
if ImportError exception is caught.
call the method self.add_initial_prefix with an argument name, substitute the result for initial_prefixed_name.
call the function warnings.warn with 2 arguments: string "NoArgsCommand class is deprecated and will be removed in Django 2.0. " "Use BaseCommand instead, which takes no arguments by default." and RemovedInDjango20Warning.
for field in self if field.is_hidden is true, append field to a list, return the resulting list.
substitute link for value under the NEXT key of the last dictionary, for value under the PREV key of the root dictionary, for value under the key key of the cache dictionary.
substitute instance for self.instance.
call the method self.validate_key with argument key.
substitute value for value under the key key of dictionary at last element of self.dicts.
call the method self._setup.
call the method match.group with 2 arguments: strings "constant_arg" and "var_arg", substitute the result for constant_arg, and var_arg, respectively.
logger.handlers is an empty list.
if arg starts with options,
from django.utils import timezone into default name space.
c is an empty list.
for every possibility, pattern and defaults in possibilities,
if value is contained in self.empty_values,
substitute fields for self.fields.
call the method objects.using with an argument using, call the method order_by on the result with an argument model._meta.pk.name, substitute the result for queryset.
append i-th element of existing to child_loggers.
call the method one_percent_re.sub with 2 arguments: string '%%' and g, substitute the result for .
define the function memoize with 3 arguments: func, cache and num_args.
raise an NotImplementedError with an argument string 'subclasses of BaseLoader must provide a load_template_source() method'.
delete self entry under the key key.
try,
self.dicts is an list with element builtins.
return result.
if settings.TEMPLATE_DEBUG is true,
attrs is a dictionary containing 1 entry: return value of the smart_text function with argument obj._meta for 'model'.
get the value from META dictionary, under the 'HTTP_CONTENT_TYPE' key, if the key doesnt exist, return the value under the 'CONTENT_TYPE' of the META dictionary, if it doesnt exist return an empty string, substitute the result for content_type.
field_value is None.
register.tag decorator function with an argument 'with',
substitute result.queryset for result.queryset.
from django.utils import six into default name space.
if not,
substitute settings.STATIC_URL for prefix.
substitute help_texts for value under the 'help_texts' key of attrs dictionary.
return initial.
do nothing.
define the function get_language_info with an argument lang_code.
if value is None,
if missing_fields is true,
flat is an empty dictionary,
call the method formats.localize_input with an argument value, return the result.
from django.core.management.templates import TemplateCommand into default name space.
call the method self.check_migrations.
if size is None or size is greater than self.remaining,
define the function lock with arguments f and flags.
tried is an empty list.
register.tag decorator,
import module unicodedata.
for every d in reversed list self.dicts,
return yes.
return an empty list.
call the function ugettext with an argument string "%s GB", substitute '%s' with the result of the call to the function, filesize_number_format with result of division of bytes by GB as an argument, substitute the result for value.
if current_len equals truncate_len,
substitute python_reloader for reloader.
define the method unsign with arguments self and signed_value.
convert tag to lowercase if it is not equal to self.cdata_tag,
call the function t.render with an argument context_instance, return the result.
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 4 entries: "enclosure" for 'rel', field url of value under the "enclosure" key of item dictionary for 'href', field length of value under the "enclosure" key of item dictionary for 'length', and field mime_type of value under the "enclosure" key of item dictionary for 'type'.
for every location in format_locations,
if not,
iterator is iterator created out of stream_or_iterable.
if app_names is not empty,
if UnicodeEncodeError exception is caught,
singular is an empty list.
return self.
if data is false,
if not,
if p is greater or equal to integer 0,
if not,
if KeyboardInterrupt exception is caught,
if pattern.app_name is true,
call the method tried.extend with an argument: t added to a list containing element pattern, for every t in sub_tried.
call the function _add_doc with 2 arguments: u and string """Text literal""".
create directories from the elements in filename.
self._leftover is an empty string.
if message is an instance of SafeData.
from django.http.response import REASON_PHRASES as STATUS_CODE_TEXT into default name space.
try,
derive the class warn_about_renamed_method from object base class.
call the hashlib.md5 fuction with force_bytes(key) as argument.
call the method self._cache.delete with argument key.
define the method __contains__ with 2 arguments: self and key.
from django.utils.translation import get_language to the default name space.
define the function get_supported_language_variant with 2 arguments: lang_code and strict set to boolean False.
derive the class GenericIPAddressField from the base class CharField class.
define the function import_by_path with 2 arguments dotted_path and error_prefix set to an empty string..
if extra_context is true, substitute it for self.extra_context, if not self.extra_context is an empty dictionary.
call the method cursor.execute with an argument line.
define the method __lt__ with 2 arguments: self and other.
if lookup_view is a callable object,
call the method node.getElementsByTagName with the argument string 'natural', substitute the result for keys.
raise CommandError exception with "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)", with '%s' substituted for app_label, as arguments.
substitute string "Enter at least one %s.", with '%s' replaced by label, for missing_args_message.
call the method self._coerce with an argument value, return the result.
call the function lazy_number with 5 arguments: ngettext, str, singular set to singular, plural set to plural, and number set to number, return the result.
call the add_arguments method from the base class of the class Command with parser as an argument.
if first element of bits is not equal to string 'and',
call the method widget.id_for_label with an argument id_, substitute the result for id_for_label.
define the method __ne__ with self and other as arguments.
if not,
skipped is an empty list.
define the method _handle_object with arguments self and node.
try,
call the method self.validate_name with 2 arguments name and app_or_project.
define the method get with 3 arguments: self, header and alternate set to None.
for every x in slice of cwords from the second element to the element at the cword decremented by 1 index, split x by character '=' and append first element of the result to the prev_opts list.
raise an exception.
define the method create_table with arguments self, database and tablename.
call the method parser.add_argument with 2 arguments: string 'name' and help set to string 'Name of the application or project.'.
encode is an lambda function with arguments k and v, return value is string '%s=%s', where '%s' is replaced with: return value of the function quote called with arguments k and safe, and with return value of the function quote called with arguments v and safe.
raise an CommandError exception with an argument string 'Your Python does not support IPv6.'.
if ValueError exception is caught,
instantiate base class of the class ModelMultipleChoiceField, substitute filed to_python of the  result for to_py.
sys.stdout is an instance of NullDevice class.
do nothing.
get _iterlists attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable, return it.
raise an LookupError with an argument lang_code.
if not,
from the base class of the class SimpleCookie call the value_encode method with val as the argument, store the result in the val and encoded, respectively.
for every item in self.items,
substitute TimeInput for widget.
if not,
do nothing.
delete attr.
yield key and value under the key key of self dictionary.
from django.utils import six into default name space.
substitute StringIO for stream_class if content is an instance of six.text_type, otherwise substitute BytesIO for stream_class.
for every code in tuple with 2 elements: lang_code and generic_lang_code,
return nothing.
derive the class CycleNode from Node base class.
convert key and default to strings, get the value under the key string key of the environ dictionary, if it does not exists use the, default string value, substitute it for value.
substitute widget for self.widget.
if length of password is greater than inner.block_size,
from django.forms.models import everything into default name space.
define the method _iter with an argument self.
self._js is an empty list.
replace all the occurrences of '\\\\' in string value with '\\' and all occurrences of '\\"' for '"', substitute the result for value.
call the function warnings.warn with 3 arguments: string '`MergeDict` is deprecated, use `dict.update()` instead.', RemovedInDjango19Warning and integer 2.
append string '_name' to app_or_project, substitute it for base_name.
while start is lesser than end.
call the function get_mod_func with an argument mod_name, store the result in parentmod and submod, respectively.
define the class Serializer from the PythonSerializer base class.
if process_all is true,
call the method check_for_migrations with arguments: app_config and connection.
substitute module.WSGIServer for WSGIServer.
option_value is an empty string.
call the function import_string with an argument loader, substitute the result for TemplateLoader.
derive the class URLNode from Node base class.
substitute Paginator for QuerySetPaginator.
return None.
inner_html is a string '<li>{choice_value}{sub_widgets}</li>'.
define the method __repr__ with an argument self.
if not,
decorator function register.filter with an argument is_safe set to boolean True.
if auto_id is true and 'id' is not contained in attrs and 'id' is not contained in widget.attrs,
substitute dirpath for self.dirpath.
call the function popen_wrapper with an argument args, assign the result to msgs, errors and status.
define the method render with 2 arguments: self and context.
skip this loop iteration,
call the function self.format_subject with an argument subject, substitute the result for subject.
classmethod decorator,
if not,
if call to the method finder.find_module with 2 arguments: name and package_path evaluates to true,
raise an ValueError with an string "Zip-compressed fixtures must contain one file.".
remove the first element of value under the name key of self.blocks dictionary, return it.
if event.path ends with string '.mo',
for ext in pathext,
call the method models.signals.post_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config, verbosity set to verbosity, interactive set to interactive and using set to db.
if TemplateSyntaxError, renamed to e, exception is caught,
if not,
leave_locale_alone is boolean True.
if self.use_ipv6 substitute string '::1' for self.addr, if not substitute '127.0.0.1' for self.addr.
exclude is an empty list.
join elements of the output into a string, separated by newlies, return the string.
if not,
do nothing.
self.render_context is a instance of RenderContext class.
if not,
for every field in model._meta.many_to_many,
args is an empty string.
append string ".moves.urllib_request" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for request.
substitute self.parent_instance.pk for orig.
if lang_code is not contained in _supported and replacement is contained in _supported,
define the method __init__ with 7 arguments: self, regex, max_length set to None, min_length set to None, error_message set to None,
call the method six.iteritems with an argument base.base_fields, convert it to a list and append fields to it, substitute the result for fields.
substitute msg for body_msg.
if self._wrapped is empty,
split host from the right side into 2 parts at the ':', substitute the result for bits.
if match is true,
return result.
if status is not equal to STATUS_OK,
import module warnings.
call the method self.as_table, return the result.
return lookup_view
define the method __init__ with 4 arguments: self, nodelist_true, nodelist_false and unpacked list varlist.
call the method __init__ from the base class of the ExternalReferenceForbidden class.
define the method __enter__ with an argument self.
substitute func.__doc__ for compile_func.__doc__.
reverse the order of colors elements,
raise ValueError exception with string 'Sign character found in converter base digits.' as an argument.
if 'Location' is contained in response and function request.get_host evaluates to True,
import time module.
call the method six.iteritems with an argument base.declared_fields, convert it to a list and append fields to it, substitute the result for fields.
break from the smallest enclosing loop execution.
define the method __init__ with arguments: self, fields set to an empty tuple, unpacked list args and unpacked dictionary kwargs.
call the function base64_hmac with 3 arguments: string 'signer' appended to self.salt, value and self.key, substitute the result for signature.
insert '.' to digits at negative exponent index.
if not,
append model to app_list_value.
if boundary is true,
derive the class MultiValueField from the base class Field class.
define the method encoding with an argument self.
call the method base64.urlsafe_b64decode with sum of s and pad as argument.
if new_name is not equal to col_name,
return cache.
call the function ugettext with an argument string "Please correct the duplicate values below.", return the result.
call the __call__ method from the base class of the class URLValidator, with an argument value.
if not,
call the function __import__ with an argument name.
replace every occurrence of string 'charset=CHARSET' for string  'charset=UTF-8' in msgs, substitute the result for msgs.
if value is contained in self.empty_values,
biggest_number is maximum numbers element.
return boolean True.
call the method parser.add_argument with 6 arguments: string '--ignorenonexistent', string '-i', action as a string 'store_true', dest as a string 'ignore', default set to boolean False and help set to string 'Ignores entries in the serialized data for fields that do not currently exist on the model.'.
replace '%s' in string 'django_%s_template_' with self.app_or_project, substitute it for prefix.
call os.path.splitext function with po_path as argument, substitute the first element of the result for base_path.
define the method run with 3 arguments: self and unpacked dictionary options.
call the method form.save_m2m.
call the method self.run_validators with an argument value.
return func.
call the function import_string with an argument logging_config, substitute the result for logging_config_func.
substitute self.html_initial_id for value under the 'id' key of the attrs dictionary.
do nothing.
if six.PY3 is boolean True,
define the method tag with an argument self.
do nothing.
join elements of paras into a string separated with '\n\n', return the result.
define the method create_nodelist with an argument self.
call the function lazy with 4 arguments: get_format, six.text_type, list and tuple, substitute the result for get_format_lazy.
call the new_file method form the base class from the MemoryFileUploadHandler class with arguments: unpacked list args and unpacked list kwargs.
self._errors is an empty list.
define the function to_bytes with arguments val and encoding.
from django.db import models into default name space.
call the method self._resolve, substitute the result for _module.
call the method self.add_error with 2 arguments: None and errors.
yield subnode.
for every filename is filelist,
substitute http_cookies.SimpleCookie for SimpleCookie.
call the method node.clone, substitute the result for klass.
arg_vals is an empty list,
from django.core.management.base import BaseCommand and CommandError into default name space.
escaper is an identity lambda function.
for every c in reversed order of self.__class__.__mro__,
from math import ceil into default name space.
from itertools import chain into default name space.
call the method context.push with unpacked dictionary values as an argument, with the result perform,
define the function has_bom with fn as argument.
if mimetype is None, raise an error.
return tuple, consisting of first element of t converted to lowercase and True.
parsed is boolean False.
import module sys.
define the method size with arguments self and name.
call the method app_config.get_models, substitute the result fr model_list.
return a string '<%s: %r>', format it with __name__ field of the self class and repr_attr.
match the rawdata from the position k, with attrfind pattern, assign the result to the m.
raise SuspiciousMultipartForm exception with an argument string, "The multipart parser got stuck, which shouldn't happen with" " normal uploaded files. Check for malicious upload activity; if there is none, report this to the Django developers.".
convert self.file to a string and append '.c' string to it, substitute the result for thefile.
convert to integer the value of dictionary cc under the key 'max-age', and return it
token is a string "not in".
if ImportError exception is caught,
define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
d is an empty dictionary.
call the function _add_doc with 2 arguments: get_unbound_function and string """Get the function out of a possibly unbound function""".
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
self._files is an instance of MultiValueDict class.
call the method parser.next_token, substitute the result for token.
from importlib import import_module into default name space.
define the method inner with argument check.
call the method apps.get_app_config with an argument app_label, substitute the result for app_config.
from django.utils.timezone import is_aware into default name space.
call the method self.close.
call the method __init__ from the base class of the class PasswordInput, called with an argument attrs.
value under '_data' key of obj_dict is a dictionary created with tuples containing 2 elements: k and result of the function, self.getlist with an argument k, for every k in self.
call the method sys.stderr.write with an argument string "  installed flup, then make sure you have it in your PYTHONPATH.\n".
if value under the header key of the self.META dictionary is equal to value,
format the string '{scheme}://{host}{path}' by replacing scheme with self.scheme, host with return value of the self.get_host method, and path with self.path, substitute the result for current_uri.
call the MigrationExecutor with the connection as the argument, substitute it for executor.
for every potfile in potfiles,
define the method handle with 3 arguments: self, unpacked list fixture_labels and unpacked dictionary options.
try,
from django.core.management import call_command into default name space.
try,
ERRORS is a dictionary with 3 initial entries: string "You don't have permission to access that port." for errno.EACCES, "That port is already in use." for errno.EADDRINUSE and "That IP address can't be assigned-to." for errno.EADDRNOTAVAIL.
return None.
define the function patch_response_headers, with response and cache_timeout with None as default value, as arguments.
otherwise if sep is not an instance of string type,
call the method self.fields.values, for every field in result,
if self.connection is false,
define the function fix with an argument match.
return an instance of a NowNode class, created with an argument format_string.
call strip s of the surrounding whitespaces, substitute every occurrence of the whitespace in the trim_whitespace_re with previous result, return the result.
if content_disposition is true,
derive the class Serializer from the PythonSerializer base class.
append newline to plural_form_line, substitute the result for line.
return None.
if exit_code is not equal to integer 3.
write content to new_file file.
do nothing.
try,
delete dictionary item 'public' from cc.
if MultiPartParserError exception is caught,
property decorator,
if field_value is an instance of the str type,
raise an ValidationError with 2 arguments: self.error_messages dictionary value under the 'invalid_choice' key, and code set to a string 'invalid_choice'.
INFO is integer 20.
call get_str_from_wsgi function with self.environ, string 'HTTP_COOKIE' and empty string as arguments, substitute it for raw_cookie.
call the method tzinfo.__init__ with an argument self.
call the method setdefault from the base class of the class SortedDict, with 2 arguments key and default, return the result.
raise an ValueError with string "This file is not accessible via a URL." as argument.
return replacement.
raise an TemplateSyntaxError exception with an argument string 'The %r option was specified more than once.', where '%r' is replaced with options.
try,
if d is not an instance of datetime.datetime,
if m is false,
call the fastcgi_help function with an argument string "ERROR: Invalid option for daemonize parameter.", return it.
call the method m.groupdict, substitute the result for d.
get the value under the 'addrport' key of the options dictionary, if it is false,
BLOCK_TAG_END is a string '%}'.
if not,
from __future__ import unicode_literals into default name space.
substitute connection.features.test_db_allows_multiple_connections for use_threading.
for every key and value in list created out of the elements of the result of the call to the method attrs.items,
define the method as_p with an argument self.
call the method bytes_to_text with an arguments key and self.encoding, substitute the result for key.
if form is contained in forms_to_delete,
define the method add_item_elements with 3 arguments: self, handler and item.
if not,
raise CommandError with an argument string 'Unknown serialization format: %s', where '%s' is replaced with format.
if self.data.hour is greater than integer 11,
derive the class Widget from the base class in the return value of the six.with_metaclass called with an argument MediaDefiningClass.
open writer.path file in write mode, with the file descriptor as fh, perform,
substitute origin for self.origin.
call the method parser.add_argument with an argument string '--pythonpath'.
register.tag decorator,
derive the class DecimalField from the base class IntegerField class.
evaluate the function smart_text with argument self.name, if exists, or an empty string, if not, return the result.
call the function six.iteritems with an argument: instance of base class of the MultiValueDict class, return the result.
return sys.modules dictionary value under the name key.
call the __init__ method from the base class of the TemporaryFileUploadHandler class with arguments: unpacked list args, and unpacked dictionary kwargs.
call the function mark_safe with an argument value, return the result.
substitute key for value under the KEY key of the oldroot dictionary.
define the method apply_response_fixes with self class instance, request and response as the arguments.
call the function os.path.dirname with an argument writer.path, substitute the result for migrations_directory.
from __future__ import unicode_literals into default name space.
if obj is instance of models.signals.ModelSignal class,
call the method form.is_valid, perform bitwise and with the result and forms_valid as operands, substitute the result for forms_valid.
find the first subgroup of the matched string from the match object, convert it to lowercase, substitute it for tag and self.lasttag.
substitute self.lineno for token.lineno.
call the method self._stream.readline with 2 arguments: unpacked list args, unpacked dictionary kwargs.
from django.core.files import locks and File into default name space.
if lengths of initial and data are equal,
do nothing.
if attribute '_client' of the self object is None,
if ipv4_unpacked is true,
return view
yield one element of data iterable.
msg is a string "Execution of %s failed: %s", with '%s' replaced by self.program and errors.
raise an CommandError exception with an argument string "errors happened while running msguniq\n%s", where '%s' is replaced with errors.
call the function validate_ipv4_address with an argument hextet.
define the method args_check with 3 arguments: name, func and provided.
return an empty dictionary.
define the method __str__ with an argument self.
evaluate the function timesince with d, now and reversed set to boolean true as arguments, return the result.
define the method end_serialization with an argument self.
otherwise if token_string starts with COMMENT_TAG_START,
_get_files is getter function for FILES attribute of this class.
define the method delete_cookie with 4 arguments: self, key, path set to character '/' and domain set to None.
substitute choices for self.choices.
define the function _dec with an argument func.
define the method url with arguments self and name.
join output into a string, separated by newline characters, return it.
for every h in handlers,
define the method writer_leaves with an argument self.
call the function exc_type with an argument string "Unsupported value: %r. You should install pytz.", replace '%s' with dt, substitute the result for exc_value.
return boolean True.
if not,
call the method operator.attrgetter with an argument _meth_func, substitute the result for get_method_function.
substitute self.choice_input_class for sub_ul_renderer.choice_input_class.
append self to context.dicts.
try,
for every operation in migration.merged_operations, substitute '%s' in a string "
return nothing.
define the method_mark_post_parse_error with an argument self.
_func_closure is a string "func_closure".
define the method __init__ with 2 arguments: self and conditions_nodelists.
substitute force_text for force_unicode.
if IndexError exception is caught,
for every name in loggers,
if cached is not None,
call the method self.to_python with an argument value, substitute it for value.
derive the class BaseMemcachedCache from base class BaseMemcachedCacheMethods and BaseCache.
if cls._delegate_text is true,
return commands.
get the value under the index key of the hextets dictionary, if it is false,
convert orphans into an integer and substitute it for self.orphans.
if ValueError, OverflowError or InvalidOperation exceptions are caught,
if archive.ArchiveException or IOError, renamed to e, exception are caught,
call the method filter_re.finditer with an argument token, substitute the result for matches.
self.children is an list with 2 elements: obj and data.
call the method call_command with 3 arguments, string 'loaddata', unpacked list fixture_labels and unpacked dictionary containing 1 element: verbosity for 'verbosity'.
increment nesting by one.
raise an CommandError exception with an argument string "you must provide %s %s name", where '%s' is replaced with string 'an', and app_or_project if app_or_project equals to string 'app', if not, it is replaced with 'a' and app_or_project.
substitute '%s' in string "%s_%s%s" with: file_root, next(count) and file_ext, join the dir_name and previous string into a valid file path, substitute it for name.
call the method __init__ from the base class of the TemporaryUploadedFile class with arguments: file, name, content_type, size, charset and content_type_extra.
call the method self._should_delete_form with an argument form, if it evaluates to true,
calculate length of chunk modulo integer 4, substitute the result for over_bytes.
call the method self.fk.rel.to, substitute the result for self.instance.
if self has an attribute '_choices',
call the function copy with an argument self, substitute the result for new_context.
otherwise if value under the "author_email" key of the item dictionary is true,
call the function mark_safe with an argument template, formated with substitutions, return the result.
if not,
increment self.fixture_count by one.
both_after is an list with an element instance of Tok class, created with 2 arguments: string 'other' and raw string '.'.
__all__ is an list with an element 'luhn'.
match the rawdata from the position i, with _html_parser.endtagfind pattern, assign the result to the match.
define the method resolve with 2 arguments: self and context.
LOCK_EX, LOCK_SH and LOCK_NB are all equal to integer 0.
call the function force_text with 3 arguments: old_field_name, self._encoding and errors as a string 'replace', use the result and file_obj as arguments for the call to the method self._files.appendlist.
with self.mutex perform,
from os import path into default name space.
if value is an instance of bool.
break from the loop execution.
from django.utils.itercompat import is_iterable into default name space.
get opname attribute from int object, substitute its field __doc__ for opfunc.__doc__.
import module sys.
if not,
call the os.remove function with argument name.
if self.username and self.password are true,
assign return value of the call to the http_cookies.SimpleCookie function to _tc.
call the method parser.add_argument with 5 arguments: string '--natural-foreign', action set to string 'store_true', dest is string 'use_natural_foreign_keys', default is boolean False and help is a string 'Use natural foreign keys if they are available.'.
skip this loop iteration.
call the method __init__ from the base class of the class ContextDict, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
define the method strptime with arguments self, value and format.
return boolean False.
 return boolean  True.
call the method parser.add_argument with 5 arguments: string '--keep-pot', action as a string 'store_true', dest as a string 'keep_pot', default as boolean False and help as a string "Keep .pot file after making messages. Useful when debugging."
replace every occurrence of '\n' in subject with '\\n' and replace every occurrence of '\r' in subject with '\\r', substitute the result for formatted_subject.
call the self.handle_app_config method with app_config and options as arguments, substitute the result for app_output.
return default.
define the method delete with arguments self and name.
call the function re.compile with 2 arguments: raw string '<.*?>|(.)' and bitwise OR performed with 2 operands, re.U and re.S, substitute the result for re_chars.
if lengths of val1 and val2 are not equal,
try,
define the function execute_from_command_line with an argument argv set to None.
if version is None,
get the value under the key key of the self.cookies dictionary, call the cookie_date function with an argument: sum of the result of the function time.time and max_age, substitute it for 'expires' key of the previously returned dictionary.
append rel_model to deps.
if UnicodeDecodeError exception is caught,
define the method as_ul with an argument self.
get '_filter_name' attribute of the func object, if it exists, substitute it for filter_name, if not, filter_name is None.
otherwise if func is callable object,
get the value under the DELETION_FIELD_NAME key of the form.cleaned_data dictionary, if it exists return it, if not, return boolean False.
if os.path.sep is contained in fixture_name,
if settings.USE_I18N is true,
from django.utils.encoding import smart_text and is_protected_type into default name space.
for every name in self.fields,
return boolean True.
append string '</optgroup>' to output.
if self.limit_choices_to object is callable,
if status is True,
join elements of base36 into a string, return it.
call the function data with 3 arguments: d.year, d.month and d.day, return the result.
define the method close with an argument self.
derive the class Command from the BaseCommand base class.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
call the function prepare_js_for_gettext with an argument src_data, substitute it for src_data.
do nothing.
call the function smart_text with an argument value, return the result.
substitute SelectMultiple for widget.
otherwise if pluralmatch is true,
replace all occurrences of symbol '_' in string k with symbol '-', use new string as key to find a value in dictionary cc, replace this value with v.
return fk.
return nothing.
if attrvalue is not an empty string,
if lang is None,
if s is an instance of SafeData.
value under the 'declared_fields' key of the attrs dictionary is an instance of OrderedDict class, created with an argument current_fields.
format string ' _(%s) ', with fmatch, write it to out.
join func.__module__ and func.__name__ into a string, separated by character '.', substitute it for self._func_path.
evaluate the binary expression with 4 operands: os.O_WRONLY, binary or os.O_CREATE, binary or 'O_BINARY' attribute of object os, binary or os.O_EXCL if allow_overwrite is boolean False, use the previous as the mode to open new_file_name file, assign the file descriptor to fd.
substitute localize for self.localize.
for app_config in return value of the method apps.get_app_configs,
if decimal_pos is not None,
if app_config.models_module is None,
define the method __deepcopy__ with 2 arguments: self and memo.
derive the class IfParser from the object base class.
substitute complain for insert.
do nothing.
return an instance of AutoEscapeControlNode with 2 arguments: boolean exception arg equals to string 'on', and nodelist.
take subject elements from p-th to i-th index, substitute it for s.
call the method form.save with an argument commit as commit, return the result.
call the function template_localtime with 2 arguments: output and use_tz set to context.use_tz, substitute the result for output.
remove 'LOCATION' key from kwargs dictionary and put it into location, or use an empty string if key doesnt exists.
if ValueError exception is caught,
return func.
for every e in errors convert e into a string and append it to a string '  * ', join all the results into a string separated by newlines, append the result to output.
raise an TemplateSyntaxError exception with an argument string "%s requires %d arguments, %d provided", where '%d' is replaced with name, dlen subtracted from alen, and plen.
args is an empty list.
if not,
use global variable template_source_loaders.
return self._regex.
call the method self._cull with db, cursor and now as arguments.
convert elements of tzinfo from indexes 1 to 3 to an integer, multiply it by integer 60 and increment it by offset_mins, substitute the result for offset.
append old_app_dir to app_dirs.
self.plural is an lambda function with an argument n, which returns result of boolean expression n not equal to integer 1, converted to an integer.
if not,
if six.PY2 is true and value is greater than sys.maxint,
read chunk_size bytes from file and store it in data.
call the warnings.warn method with string '`request.REQUEST` is deprecated, use `request.GET` or `request.POST` instead.', RemovedInDjango19Warning and integer 2 as arguments.
call the function import_module with an argument mod_name.
from django.utils.encoding import force_bytes,  force_text,  force_str and iri_to_uri into default name space.
substitute serialize_headers for __str__.
if self.verbosity is greater than integer 0,
as long as current_chunk is not an empty string,
call the function quote with 2 arguments: result of the function force_str called with an argument url, and result of the function force_str called with an argument safe, use the result as an argument for the call to the function force_text, return the result.
evaluate the function debug.technical_500_response with request, evaluated value of function sys.exc_info as a list, status code set to integer 400, return the result.
define the method close with argument self.
if string 'trimmed' is contained in result of the method t.split_contents, trimmed is boolean True, otherwise is boolean False.
define private method __getattr__ with self class instance and attr as the arguments.
read file fp, substitute the read data for output.
if timeout is None,
if best_doublecolon_end equals length of hextets,
return nothing.
DEFAULT_MAX_NUM is an integer 1000.
skip this loop iteration.
substitute third element of row list for expires.
try,
call the method parser.add_option with 3 arguments: string '--traceback', action set to a string 'store_true', and help set to string 'Raise on exception'.
substitute v for value under the k key of self dictionary.
import module argparse.
call the method self.nodelist.render with an argument context, substitute the result for output.
substitute version_info from module sys for surrent_version.
call the function time.strftime with 2 arguments: fmt and and timetuple without the first element, added to a tuple with an element sum of year an integer 28, substitute the result for s2.
call the method parser.add_option with 8 arguments: string '-v', string '--verbosity', action set to string 'store', dest set to string 'verbosity', default set to string '1', type set to string 'choice', choices is a list containing elements: '0', '1', '2', '3', and help as a string 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output'.
call the method error with an argument message, from the base class of the class CommandParser.
if self.obj is None,
for every field_name and field_value in return value of the function six.iteritems called with value under the 'fields' key of dictionary d,
define the method __call__ with 3 arguments: self, template_name and template_dirs set to None.
for every elt in source,
call the force_str function with an argument: salt, if it exists, if not with a string '%s.%s', with '%s' replaced by, self.__class__.__module__ and self.__class__.__name__, respectively, substitute the result for self.salt.
define the method items with an argument self.
derive the class FixedOffset from the tzinfo base class.
if not,
if fname doesnt start with self._dir and fname file path doesnt exists,
define the method __iter__ with an argument self.
if root is true,
__all__ is a tuple containing strings 'BaseFormSet', 'formset_factory' and 'all_valid'.
raise an exception PageNotAnInteger with string 'That page number is not an integer' as an argument.
call the function re.compile with raw string '(\s+)', substitute the result for word_split_re.
substitute url for display_url.
if args is true,
derive the SimpleUploadedFile class from the InMemoryUploadedFile base class.
if OverflowError exception is caught,
define the method write with 2 arguments: self and value.
from django.utils import six into default name space.
for every loader in self._loaders,
if number_equal is greater than integer 40,
file is an instance of BytesIO class created with an argument: value under the 'content' key of the data dictionary.
substitute name for self.__name.
substitute value under the PREV key of the root dictionary for last.
from django.utils import six into default name space.
if not,
while '<' is contained in value and '>' is contained in value,
if has_bz2 is true,
join usage and self.help into a string, separated by 2 new line characters, return it.
get config dictionary element under 'incremental' key, if it exists substitute it for incremental, if not, incremental is boolean False.
write data bytes to outfile.
define the function templatize with 2 arguments: src and origin set to None.
return self._size.
do nothing.
if attrs is not None substitute it for self.attrs, or if not self.attrs is an empty dictionary.
call the method self.writer_enters.
if length of tzinfo is greater than integer 3, convert elements of tzinfo from indexes 1 to 3 to an integer, substitute the result for offset_mins, otherwise offset_mins is integer 0.
return an instance of a class WithNode, created with 4 arguments: None, None, nodelist and extra_context as extra_context.
if not,
if msgs is true,
derive the class EmailField from the base class CharField class.
if field equals NON_FIELD_ERRORS and opts.error_messages is true and NON_FIELD_ERRORS is contained in opts.error_messages,
call the method types.MethodType with 3 arguments: func, obj and obj.__class__, return the result.
from django.template.base import TemplateDoesNotExist into default name space.
if not,
return self._queryset.
append work_file to args.
define the method _cull with argument self.
call the method __init__ from the base class of the EmailMultiAlternatives class, with 9 arguments: subject, body, from_email, to, bcc, connection, attachments, headers and cc.
if not,
define the function activate with an argument language.
define the method render with 2 arguments self and context.
if not,
import module os.
call the method parser.parse with an argument tuple, with an element string 'endwith', substitute the result for nodelist.
define the function with_metaclass with 2 arguments meta and unpacked list bases.
if KeyError exception is caught,
while path is true,
return an instance of Literal class, created with an argumen value.
with self.mutex perform,
call the method dict with 4: self.attrs, type as self.input_type, name as self.name, value as self.choice_value, substitute the result for final_attrs.
msg is an string "Unclosed tag '%s'. Looking for one of: %s ", where '%s' is replaced with command, and elements of parse_until joined into a string, separated by string ', '.
if not,
define initialization method __init__ with self instance of the class as an argument.
call the method get_template with an argument template, substitute the result for template.
return potfiles.
define the method non_form_errors with an argument self.
define the function exec with 3 arguments: _code_, _globs_ set to None and _locs_ set to None.
derive the class EmailBackend from the BaseEmailBackend base class.
value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class, created with 2 arguments: label set to return value of the function _ called with an string 'Order' and required as boolean False.
for every app in sorted return value of the commands_dict.keys function,
return value under the key key of d dictionary.
substitute value under the key key of self dictionary for val.
from django.utils import six into default name space.
try,
if not,
return a string "<UTC>".
in the string '%s. You passed in %r (%s)' replace every %s with original and type of the object self.obj as strings, respectively, and replace %r with self.obj, return the result.
substitute choices for self.choices.
from django.core.management.commands.check import Command as CheckCommand into default name space.
define the method with reload with an argument self.
FILTER_ARGUMENT_SEPARATOR is a string ':'.
if localized_fields equals ALL_FIELDS, or if localized_fields is true and f.name is contained in localized_fields,
append list containing string '--no-wrap' to self.msgmerge_options
try,
if ignore is true,
if not,
parser is an instance of CommandParser class, created with 3 arguments: self, prog as a string created by joining: os.path.basename(prog_name) and subcommand, separated by whitespace and description set to self.help, if exists, or None, otherwise.
call the method self._set with key, pickled and timeout as arguments.
if not,
substitute _itervalues for values.
append j to sites.
return an instance of EscapeBytes, created with an argument s.
increment i by integer 1.
if not,
value under the 'required' key of the kwargs dictionary is boolean False.
derive the class Loader from the BaseLoader base class.
substitute package.__path__ for package_path.
try,
call the method extend with refs as argument, on the result call the pending_references.setdefault method with refto and empty list as arguments.
call the method self.target.resolve with 2 arguments: context and boolean True, substitute it for obj_list.
substitute func.__doc__ for compile_func.__doc__.
property decorator,
if self doesnt have an '_body' attribute,
define the method write with 3 arguments: self, outfile and encoding.
yield line.
call the method clean with an argument value from the base class of the class ComboField.
define the method listdir with arguments self and path.
property getter decorator,
strip message_context of '"' characters from both ends, substitute the result for message_context.
call the method blankout with 2 arguments: part and 'P', write the result to out.
if self._cull_frequency equals to integer 0.
convert settings.FIXTURE_DIRS to a list, extend dirs by it.
for every var in self.vars,
define the method render with 2 arguments self and context.
if dklen is false,
try,
substitute first element of self.locale_paths for self.default_locale_path.
define the method __contains__ with an argument self.
output_transaction is boolean True.
derive the class Loader from the BaseLoader base class.
var_obj is None.
if not,
if StandardError, renamed to e, exception is caught,
define the method read with arguments self and size set to None.
define the method as_json with 2 arguments self and escape_html set to boolean False.
kwargs is an empty dictionary.
call the method archive.extract with arguments: filename and tempdir.
if name equals string "_wrapped",
substitute '%s' in a string "\nCreated new merge migration %s" with writer path, write it to self.stdout.
if self.parent_name.filters is true or self.parent_name.var is an instance of Variable.
from django.template.loader import get_template, select_template.
call self.clear method.
if KeyError exception is caught,
return nothing.
substitute streaming_content for self.streaming_content.
call the method match.groupdict, substitute the result for kwargs.
call the self._lock.writer method, with the result perform the following,
define the method remove with 2 arguments: self and item.
call the function write_pot_file with 2 arguments: potfile and msgs.
if not,
save.alters_data is boolean True.
call the method out.getvalue, return the result.
call the function to_locale with an argument language, substitute it for self.__locale.
call the function force_str with an argument: default if it is true, or if not, first element of the result of the function, get_format called with an argument string 'TIME_INPUT_FORMATS', substitute the result for format.
find index of the occurrence of string ':_(' in p, if its greater or equal to integer 0,
if for all attr in list of attributes 'level', 'msg', 'hint', 'obj' and 'id', self and other have the same attribute attr, return boolean True, otherwise return boolean False.
call the self.xml.endDocument method.
call the function
substitute request for self._request.
__all__ is a tuple containing 2 initial elements: strigs 'WSGIServer' and 'WSGIRequestHandler'.
return an instance of ExtendsNode with 2 arguments nodelist and parent_name.
open pythonrc, with the file handle renamed to handle perform the following,
if last element of line is newline or carriage return character,
substitute a tuple with 2 elements: characters ',' and ': ' for value under the 'separators' key of the self.json_kwargs dictionary.
if self.interactive is true,
define the method end_object with arguments self and obj.
return content.
define the method initial_form_count with an argument self.
if PY3 is true,
define the method delete with self class instance, key and version defaulting to None as arguments.
if six.PY2 is true,
if not,
while i is lesser than num_existing and first pflen elements of i-th element of existing equals prefixed,
derive class Module_six_moves_urllib_response from the _LazyModule base class.
feed data to the parser p.
raise an InvalidTemplateLibrary exception with an argument string "Template library %s does not have a variable named 'register'", where '%s' is replaced with taglib_module.
call the function func with 3 arguments: obj, autoescape set to context.autoescape and unpacked list arg_vals, substitute the result for new_obj.
self._raw_ipv6 is boolean False.
call the method self.add_item_elements with 2 arguments: handler and item.
return text.
for every item in self.items,
call the function endtag_re.sub with 2 arguments: an empty string and html, substitute the result for html.
call the method self._populate,
append an empty string to usage.
from django.utils.encoding import force_unicode.
call the method parser.parse, return the result.
if not,
if ImportError, renamed to e, exception is caught,
if self.number is lesser than self.paginator.num_pages, return boolean True, otherwise return boolean False.
raise a ValidationError exception with arguments self.message, code set to self.code and params set to params.
define the method __get__ with 3 arguments: self, obj and tp.
import module datetime.
raise an ValidationError with 3 arguments: value under the 'max_whole_digits' key of the self.error_messages dictionary, code set to string 'max_whole_digits' and params set to a dictionary with an entry: difference of the self.max_digits and self.decimal_places, for 'max'.
if safe is true and arg is not equal to string ';',
if not,
define the method flatten with an argument self.
call the function generic_tag_compiler, params set to params, varargs set to varargs, varkw set to varkw, defaults set to defaults, name set to function_name, and takes_context set to takes_context and node_class set to SimpleNode.
__dispatch is None.
for every cat in value under the 'categories' key of the item dictionary,
define the method write_po_file with arguments self, potfile and locale.
append form.errors to self._errors.
for every path in format_module_path,
define the function _is_shorthand_ip with an argument ip_str.
from itertools import groupby and cycle as itertools_cycle into default name space.
call the method parser.add_argument with 4 arguments: string 'args', metavar set to 'app_label', nargs set to '+', and help set to string 'One or more application label.'.
call the method cursor.execute with string "DELETE FROM %s WHERE expires < %%s" as argument, substitute the '%s' with table and list containing return value of the method call ops.value_to_db_datetime with argument now on the object under the db key of connections dictionary, respectively.
bits is an empty list.
if not,
append f.name to exclude.
call the function re.compile with an argument raw string "(?:(\w+)=)?(.+)", substitute the result for kwarg_re.
define the function time_format with 3 arguments: value, format set to None and use_l10n set to None.
call the method self.filter_expression.resolve with an argument context, substitute the result for output.
if self doesnt have an '_ordering' attribute,
define the method __iter__ with argument self.
call the method mail.mail_admins with 5 arguments: subject, message, fail_silently as boolean True, tml_message as html_message, and connection as the result of the method self.connection.
if hextet converted to hexadecimal number is smaller than hexadecimal 0, or hextet converted to hexadecimal number is smaller than hexadecimal FFFF,
if value is false, return it, if it is true convert first element of value to uppercase letter, return the value.
call the method resolver._reverse_with_prefix with 4 arguments: view, prefix, unpacked list args, unpacked dictionary kwargs, use the result as an argument for the call to the function iri_to_uri, return the result.
if self.is_bound is false,
call the function next_space_index with 2 arguments subject and i, substitute the result for i.
from django.core.files.utils import FileProxyMixin into default name space.
substitute value under the RESULT key of the root dictionary for oldvalue.
if widget is an instance of the NumberInput,
call the method self._cull.
s is an instance of StringIO class.
call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, substitute the result for list_.
from django.conf import settings into default name space.
slice the rawdata string from the k-th to the endpos-th index, remove the whitespaces from the start and the end of the string, substitute it for end.
derive the class BadHeaderError from the ValueError base class.
all_unique_checks is an empty set.
define the _set_post method with self class instance and post as the arguments.
if k equals a string 'fg',
import module datetime.
if not,
from django.utils.module_loading import import_string into default name space.
from __future__ import unicode_literals into default name space.
ADDRESS_HEADERS is a set containing strings: 'from', 'sender', 'reply-to', 'to', 'cc', 'bcc', 'resent-from', 'resent-sender', 'resent-to', 'resent-cc' and 'resent-bcc'.
out is an instance of StringIO class, created with an empty string as an argument.
if exception LookupError is caught,
return result.
if not,
append opts.virtual_fields to opts.many_to_many, for every f in the result,
define the function byte2int with an argument bs.
define the method _ipython_pre_100 with an argument self.
substitute complain for __iadd__.
do nothing.
substitute error_message for value under the 'invalid' key of the error_messages dictionary.
import module warnings.
substitute value under the key key of self._cache dictionary for pickled.
from django.utils import six into default name space.
call the function get_supported_language_variant with an argument lang_code, return the result.
define the messages with an argument self.
raise an ImproperlyConfigured exception with an argument string 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.'.
get the value under the 'charset' key of content_params dictionary, use it to call the codec.lookup method.
assign self.model._meta.pk to self._pk_field and pk.
if quote_double_quotes is true,
derive the class CheckboxInput from the Widget base class.
if model is contained in created_models,
define the method __getinitargs__ with an argument self.
try,
call the method parts.reverse.
call the function force_text with second element of choice as an argument, substitute the result for self.choice_label.
for every cat in value under the 'categories' key of the self.feed dictionary.
define the function ssi with 2 arguments: parser and token.
call the method self._get_context_stack_frame with an argument context, substitute the result for state_frame.
import threading.
from .base import CommandError into default name space.
inner is an instance of NonCapture, created with elements of result from start index to the end.
content_length is None.
substitute value under idx key of dictionary d for d.
call the method self._cache.incr with key and delta as arguments, substitute the result for val.
define the function compile_func with 2 arguments: parser and token.
renamed is boolean False.
call the dict function with 2 arguments: final_attrs and id set to string '%s_%s', where '%s' is replaced with id_ and i, substitute the result for final_attrs.
from django.utils.module_loading import import_string into default name space.
if app_config.models_module is None,
otherwise if t.contents equals a string 'comment',
if not,
try,
from email.utils import formatdate into default name space.
call the method dot_re.sub with 2 arguments: char and src, return the result.
return value.
for every cmatch in cmatches,
import module sys.
if ValidationError exception is caught,
define the method has_previous with an argument self.
substitute name for new_mod.
if os.name equals string 'posix',
call the method parser.parse, substitute the result for nodelist.
if self.negate is true and val1 is not equal to val2, or if, self.negate is false and val1 equals val2,
define the function clear_script_prefix.
get value under the 'filters' key of the config dictioanry, if it exists substitute it for filters, if not filters is None.
if self.field.required is true and self.form has an attribute 'required_css_class',
in not,
if error.code equals code,
if self.verbosity is greater than integer 0,
join usage elements in a string separated by newline characters, return it.
perform the bitwise or operation on the next 6 operands pyinotify.IN_MODIFY pyinotify.IN_DELETE, pyinotify.IN_ATTRIB, pyinotify.IN_MOVED_FROM, pyinotify.IN_MOVED_TO and pyinotify.IN_CREATE, store the result in mask.
if args is true,
decorator function register.filter with an argument is_safe set to boolean True.
call the method logging._acquireLock.
special_floats is an list with 3 elements, pos_inf, neg_inf and nan, all converted to strings.
call the method self.apply_response_fixes with the request and response as the arguments, substitute the result for response.
if length of x is equal to integer 0,
call the method f.value_from_object with an argument instance, substitute the result for value under the f.name key of the data dictionary.
if self.verbatim is true and block_content equals self.verbatim,
return boolean False.
define method add_arguments with class instance self and parser as the input arguments.
from django.utils import six into default name space.
if ValueError or TypeError are caught,
raise an TemplateSyntaxError exception with an argument string "'ssi' tag takes one argument: the path to the file to be included".
import module codecs.
call the method apps.get_model with an argument model_identifier, return the result.
define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
if TemplateSyntaxError, replaced with e, exception is caught,
from django.utils.text import normalize_newlines and slugify as _slugify into default name space.
if m is false and p is lesser than integer 0,
if not,
derive the class DebugNodeList from the NodeList base class.
call the method self.queryset.filter with an argument, unpacked dictionary with an entry: pk for key.
import module time.
do nothing
define the function npgettext with 4 arguments: context, singular, plural and number.
for every medium in extend,
call the method self._close_files.
call the method parser.add_argument with 5 arguments: string '-o', string '--output', default is None, dest set to string 'output', and help is a string 'Specifies file to which the output is written.'.
write shutdown_message to self.stdout file stream.
if value under the 'enclosure' key of the item dictionary is not None,
self._post_render_callbacks is an empty list.
call the method commands.update, with an argument dictionary containing entries: app_config_name for name, for every name in return value of the function find_commands, called with an argument path.
define the method filter with 2 arguments: self and record.
call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, substitute the result for res.
input_type is a string 'url'.
substitute queryset for self.queryset.
call the function _ with an argument string 'PM', return the result.
define the method m with an argument self.
define the function _get_val.
define the function allow_lazy with 2 arguments: func and unpacked list resultclasses.
get the '_decorated_function' attribute from func object, if it exists substitute it for func.
raise an ValidationError with 2 arguments: value under the 'contradiction' key of the self.error_messages dictionary and code set to 'contradiction'.
for every func and unused in filter_expr.filters,
define the method __setitem__ with 3 arguments: self, key and value.
for every date_key in date_keys,
call the function os.path.abspath with an argument 'locale', append the result to self.locale_paths.
for every k and v in return value of the function six.iteritems called with an argument fields, if n is false, append it to a list, substitute the resulting list for none_model_fields.
define the method parse with an argument self.
for every form in self call the form.as_p method, join the results in a string, separated by an empty string.
get the name key of the data dictionary, substitute it for value.
if result is not None,
return a dictionary with 2 entries: value under the 'language' key of the self.feed dictionary for "xml:lang", and self.ns for "xmlns".
call the method parser.expression with an argument bp, substitute the result for self.first.
define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
call the function loader with 2 arguments name and dirs, substitute the result for source and display_name, respectively.
join statements into a string, separated by newline characters, return it.
define the method __setstate__ with 2 arguments: self and obj_dict.
from threading import local into default name space.
from django.utils.text import normalize_newlines into default name space.
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
call the function is_aware with an argument value, if it evaluates to true,
call the method parser.parse with an argument tuple with an element string 'endspaceless', substitute the result for nodelist.
try
in_tag is boolean True if in_tag is False, otherwise is boolean False.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
from django.utils.http import urlquote into default name space.
return an instance of EscapeBytes, created with an argument, reuslt of the call to the function bytes with an argument s.
if self._read_started is true and self doesnt have an '_body' attribute.
define the __getitem__ method with self and alias arguments.
call the method self.write_migration_files with an argument changes.
multiply delta.days with an integer 86400 add to the result delta.seconds, if the result is greater than integer 0, substitute it for max_age, if not, max_age is integer 0.
call the function force_text with an argument v, for every v in selected_choices, add results to a set, substitute the resulting set for selected_choices.
call the function module_has_submodule with 2 arguments: package and module, return inverted boolean result.
otherwise if, first element of message_context is equal to "'",
call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs.
if VariableDoesNotExist exception is caught,
call the function warnings.warn with 2 arguments string "IPAddressField has been deprecated. Use GenericIPAddressField instead.", and RemovedInDjango19Warning.
return a string '%s-%s-%s GMT', formated with: first 7 elements of rfcdate, elements of rfcdate from 8-th to the 11-th index, and elements of rfcdate from 12-th to the 25-th index.
convert expires to a string, use it as argument for the call to the function typecast_timestamp, substitute the result for expires.
return result.
if refto is contained in seen_models,
import module warnings.
convert var into an floating point number, substitute it for self.literal.
derive class ImageFile from the base class File.
for every plan_node in return value of the graph.forwards_plan method called with node as argument.
call the _lock.setdefault method with name and RWLock() as arguments, substitute the result for self_lock.
property decorator,
call the function runfastcgi with an argument args.
args is an empty list.
define the function trim_whitespace with an argument s.
substitute m2m_data for self.m2m_data.
call the method self._prepare_data with an argument data, substitute the result for data.
return boolean False.
call the function _trans.activate with an argument language, return the result.
get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
if func_name is false,
if ImportError exception is caught,
define the method __init__ with arguments self and connection_reset defaulting to boolean False.
if value is contained in self.empty_values,
substitute substitute TextInput for widget.
define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
skip this loop iteration.
raise an TypeError with an string 'formfield_callback must be a function or callable'.
increment doy by integer 1.
for x in a list containing 3 elements: self.id, self.first and self.second, if x is not None, convert x into a string and append it to a list, substitute the resulting list for out.
if IOErro, renamed to e, exception is caught,
call the method code.interact with an argument local set to imported_objects.
if model._meta.proxy is false and return value of the function router.allow_migrate called with arguments using and model is true,
substitute t.nodelist for self.nodelist.
call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
if mode is not contained in app_list_value,
call the response.render() method and assign the return to the response.
append work_file to string '#: ', substitute it for old.
substitute sysid for self.sysid.
libraries is an empty dictionary.
call the function allow_lazy with 3 arguments: capfirst and six.text_type.
return string 'rd'.
call the method self.itervalues, return the list of results.
derive class LimitedStream from the object base class, making it a new-style class.
return result.
if not,
define the method get_limit_choices_to with arguments self.
try,
yield string "# into your database." as the result.
if template_name is an instance of list or tuple types,
define the method __eq__ with 2 arguments: self and other.
decorator function register.filter with an argument is_safe set to boolean False.
append block to the value under the name key of self.blocks dictionary.
expires is None.
raise an UnrecognizedArchiveFormat exception with an argument string "Path not a recognized archive format: %s", where '%s' is replaced with filename.
define the method __init__ with 4 arguments: self, url, length and mime_type.
substitute self.urlconf_name for self.urlconf_module.
try,
try,
call the method validators.ip_address_validators with arguments protocol, unpack_ipv4, substitute first element of the result for self.default_validators.
join fixture_name and suffix into a string, separated by '.' for every suffix in suffixes, put the results in set, substitute it for targets.
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
derive the class Tok from the object base class.
decorator python_2_unicode_compatible,
define the method with reload with an argument self.
delete attr.
derive class Command from the TemplateCommand base class.
call the subprocess.Popen function with, 'git log --pretty=format:%ct --quiet -1 HEAD', stdout set to subprocess.PIPE, stderr set to subprocess.PIPE, shell set to boolean True, cwd set to repo_dir and universal_newlines set to boolean True, as arguments, substitute the result for git_log.
call the method self.reader_leaves.
substitute URLInput for widget.
assign value and params to the value under the name key of the outdict dictionary.
from django.utils import timezone into default name space.
if mail doesnt have an 'outbox' attribute,
insert none_value at the beginning of the choices list.
set new_method_name attribute of the base object to old_method.
call the EmailMultiAlternatives function with, subject, message, from_email, recipient_list and connection set to connection, as arguments, assign the result to mail.
if value is an instance of datetime.datetime,
return result.
define the function timeuntil with 2 arguments, d and now defaulting to none.
parts is an empty list.
if var_obj is None,
break the loop execution.
if data is an instance of MultiValueDict or MergeDict,
apps is an empty dictionary.
if settings.DEBUG is true,
if string '__str__' is not contained in __dict__ field of klass,
try,
from django.utils.functional import allow_lazy and SimpleLazyObject into default name space.
self.year_none_value is a tuple containing 2 elements: integer 0 and first element of empty_label.
instantiate a class Group with 2 arguments: string "%%(%s)s" formated with name, and name, append it to result.
call the get_bytes_from_wsgi function with environ, string 'SCRIPT_URL' and empty strings as arguments, substitute the result for script_url.
substitute __str__ filed of klass for __unicode__ field of klass.
call the method self.can_read.release.
get config dictionary element under 'root' key, if it exists substitute it for root, if not, root is None.
filemsg is an empty string.
substitute self for result.parent.
import module contextlib.
return boolean False,
do nothing.
define the function last with an argument value.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
call the function format_html with 2 arguments: string ' for="{0}"' and self.id_for_label, substitute the result for label_for.
try,
invert self.negated.
define the method ugettext with an argument message.
try,
call the method form.save, with an argument commit set to boolean False, substitute the result for obj.
append string " The domain name provided is not valid according to RFC 1034/1035." to msg.
executor is an instance of the class MigrationExecutor created with an argument: value under the DEFAULT_DB_ALIAS key of the connections dictionary.
call the method copy.deepcopy with arguments self._choices and memo, substitute the result for result._choices.
decrement date.month by integer 1, use the result as an key to obtain the value from the months dictionary, substitute it for month.
params is an empty list,
if var is not an instance of six.string_types,
writer is an instance of MigrationWriter class, created with an argument migration.
substitute first element of renamed_method for old_method_name.
substitute _upload_handlers for self.__upload_handlers.
from functools import reduce into default name space.
if not,
define the function ungettext with 3 arguments: singular, plural and number.
decorator python_2_unicode_compatible.
decorator stringfilter,
get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
delete attr.
call the timezone.now function, substitute the result for now.
call the method self.prepend_token with an argument token,
token is an instance of Token class, created with 2 arguments: TOKEN_COMMENT and content.
replace every occurrence of old for new in msgs, substitute the result for msgs.
substitute msg for self.msg.
from django.apps import apps into default name space.
substitute _iterkeys for iterkeys.
define the method __init__ with arguments self, input_formats set to None, unpacked list args and unpacked dictionary kwargs.
pytz is None.
try,
derive the class RequireDebugFalse from logging.Filter base class.
raise an exception.
if KeyError exception is caught,
define the function is_library_missing with an argument name.
if i is greater or equal to integer 0,
return errors.
otherwise if ch equals a string '(',
call the method self._assert_mutable.
remove the value under 'allow_empty_file' key from the kwargs dictionary and if the key exists, substitute it for self.allow_empty_file, if not self.allow_empty_file is boolean False.
if value under the name key of self.cleaned_data dictionary is not None, and field _state.adding of value under the name key of self.cleaned_data dictionary is true,
if count of occurrence of '::' in ip_str equals integer 1,
define the method write with 3 arguments: self, outfile and encoding.
for every part in plural,
call the method handler.endElement with an argument string 'feed'.
if not,
otherwise if token.token_type equals integer 2,
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
return the result of the method self.errors.get called with 2 arguments: NON_FIELD_ERRORS and return value of the method, self.error_class called with an argument error_class set to string 'nonfield'.
import module tempfile.
data is an empty dictionary,
if self.body is true,
call the function self._key_to_file with key and version as arguments, use the result as an argument for the call to the self._delete method.
call the function allow_lazy with 2 arguments: remove_tags, six.text_type, substitute the result for remove_tags.
return func.
call the function get_ns_resolver with arguments ns_pattern and resolver, substitute the result for resolver.
substitute decimals for digits.
call the self.style.MIGRATE_HEADING method with string "Running migrations:" as an argument, use the result as an argument for the call to the self.stdout.write method.
want_unicode is boolean False.
define the method clean with an argument self.
evaluate self.clear method and return the result.
call the function format_html with 4 arguments: string '<option value="{0}"{1}>{2}</option>', option_value, selected_html, result of the function force_text with an argument option_label, return the result.
from datetime import datetime into default name space.
append list containing view_path to self.namespaces list, join all the elements into a string separated by character ':', substitute it for self.view_name.
use_null_fallback is boolean True.
if not,
if self._is_rendered is false.
call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib.request" appended to __name__, assign the result to the value under the string ".moves.urllib_request" appended to __name__ key of the sys.modules dictionary, and to the value under the string ".moves.urllib.request" appended to __name__ key of the sys.modules dictionary.
define the method __new__ with 5 arguments: cls, fget set to None, fset set to None, fdel set to None and doc set to None.
call the clean method wiht value argument from the base class of the SlugField class, return the result.
if module os field name equals to string 'nt',
return s.
define the __init__ method with 3 arguments: self, unpacked list args and unpacked dictionary **kwargs.
substitute value under the unique_for key of form.cleaned_data dictionary for date.
if not,
define the function spaceless with 2 arguments: parser and token.
define the function sql_delete with 4 arguments: app_config, style, connection and close_connection set to boolean True.
remove the value under 'max_length' key from the kwargs dictionary and if the key exists substitute it for self.max_length, if not self.max_length is None.
self.to is an empty list.
call the method tuple.__new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs, substitute the result for self.
if rest is not False, None is considered False,
return boolean False.
call the method __init__ from the base class of the class Textarea, with an argument default_attrs.
if self.argv, without the first element is contained in a tuple with 2 entries: a list containing a string '--help', and a list containing a string '-h',
call the method datetime.date with an argument unpacked dictionary kw, return the result.
try,
if base_url is None,
self.first is boolean True.
help is a string, containing "Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed.".
call the method var.resolve with 2 arguments: context and True, substitute the result for value.
substitute self.old_timezone for _active.value.
call the method parser.add_argument with 2 arguments: string '--template' and help set to string 'The path or URL to load the template from.'.
do nothing.
if self.close_called is False,
if not,
substitute exc for exc_value.__cause__.
convert field into a string and concatenate it to a string '* ', append the result to output.
call the method tag.groups, substitute the result for closing_tag, tagname and self_closing, respectively.
value under the index key of the hextets dictionary is a string '0'.
if escaped is true,
take elements of token_string from second to second last element and strip the whitespaces surrounding the result, substitute the result for block_content.
define the method add_arguments with arguments self and parser.
call the method find_indentation with an argument node, append the result to newline, substitute the result for klass.prefix.
call the method appendlist from the base class of the QueryDict class, with arguments key and value.
if cc contains item 'private' and kwargs contains item 'public',
base36 is an empty list.
yield key.
raise an ValueError exception with an argument string "Base36 input too large".
if value is false or character '@' is not contained in value,
define the method validate_key with self class instance and key as arguments.
append list containing string '--no-location' to self.msgattrib_options.
substitute result of the function urlparse with an argument ur1 for p1 and result of the function urlparse with an argument ur2 for p2.
if not,
raise an self.exception exception.
substitute self.file for thefile.
from django.db import models into default name space.
self._regex_dict is an empty dictionary.
convert d into a integer, subtract d from it, substitute the result for m.
try,
if not,
try,
if AttributeError exception is caught,
call the method filename.encode with an argument string 'utf-8', substitute the result for filename.
if refto is contained in known_models,
derive the class TranslatorCommentWarning from the SyntaxWarning base class.
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwargs.
nofollow_attr is an empty string.
found is boolean False.
from django.core import signing into default name space.
if failures is true,
define the method has_key with 2 arguments: self and key.
join into a file path: self.locale_dir and string '.pot' appended to domain converted to string, substitute it for potfile.
pop value under the 'ipv6' key of the kwargs dictionary, if it is true,
define the method display with an argument self.
call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.
call the __add__ method with an arguments rhs from the base class of the class SafeBytes, substitute the result for t.
call settings.INSTALLED_APPS.
for every template_dir in template_dirs,
replace '%s' in string 'ignoring directory %s\n' with dirname, write it to self.stdout stream.
if initial equals a string 'False',
return form.
call the method self._add_fallback.
call the function call_command with 3 arguments: string "createsuperuser", interactive is boolean True, and database set to value under the 'database' key of the options dictionary.
raise an ValidationError with 2 arguments: value under the 'invalid_date' key of the self.error_messages dictionary and code set to string 'invalid_date'.
content is an empty string.
call the method formats.get_format_lazy with an argument string 'TIME_INPUT_FORMATS', substitute the result for input_formats.
vary_headers is an empty list.
call the method time.mktime with an argument tt, substitute the result for stamp.
for every i and item in enumerated iterable values,
request_started is a instance of a Signal class.
call the function _import_module with an argument self.mod, substitute the result for module.
if self.verbosity is greater or equal to integer 1.
if TemplateDoesNotExist, renamed to e, exception is caught,
define the method get_template_sources with 3 arguments: self, template_name, template_dirs set to None.
if call to the settings.is_overridden with string 'TEST_RUNNER' evaluates to boolean False.
call the import_string function with an argument settings.SIGNING_BACKEND, substitute the result for Signer.
if StandardError, renamed to e, exception is caught,
if bf_errors is true,
from django.forms.utils import flatatt and to_current_timezone into default name space.
if values under the 'socket', 'host' and 'port' keys of the options dictionary are false,
call the method now.replace with the argument microsecond set to integer 0, substitute the result for now.
call the function format_html with 2 arguments: string '<ul class="errorlist">{0}</ul>', and return value of the function, format_html_join, called with 3 arguments: empty string, string '<li>{0}{1}</li>', tuple containing tuples with 2 elements: k and result of the function force_text with an argument v, for every k and v in items of the dictionary self, return the result.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
call the method self._handle_object with an argument node, return the result.
derive the class Promise from the object base class.
for every child in node.childNodes,
if KeyError exception is caught,
return response.
if lengths of initial and data are not the same,
USE_INOTIFY is boolean False.
return boolean True.
define the function prepare_js_for_gettext with an argument js.
COMMENT_TAG_START is a string '{#'.
define the method signature with arguments self and value.
if ValueError exception is caught,
if qs._result_cache is not None,
call the function no_style, substitute it for self.style.
if value under the 'socket' key of the options dictionary is true and values under the 'host' and 'port' keys of the options dictionary are false,
call the function get_current_timezone, substitute the result for timezone.
call the method template.render with an argument context, substitute the result for content.
define the method widget_attrs with arguments self and widget.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
return value if six.PY2 is true, if not return value.encode(ISO_8859_1).
return Operator.
call the function datetime.datetime with 3 arguments, d.year, d.month and d.day, substitute the result for d.
if commit is true,
define COOKIES method with self as the argument.
call the method cursor.execute with string "SELECT cache_key FROM %s WHERE cache_key = %%s and expires > %%s" as argument, substitute the '%s' with table and list containing return value of the method call ops.value_to_db_datetime with argument now on the object under the db key of connections dictionary, respectively.
if not,
return form.
return an empty string,
from django.db import DEFAULT_DB_ALIAS into default name space.
return None.
define the function wordcount with an argument value.
substitute content_type for self.content_type.
if self.waiting_writers is not equal to integer 0,
create a tuple out of types of v, for every v in args, extend key tuple with the result.
call the function run with 5 arguments: self.addr, self.port converted to an integer, handler, ipv6 set to self.use_ipv6,  and threading set to threading.
if e.errno equals to errno.ENOENT,
skip this loop iteration.
asvar is None.
call the function warnings.warn with string "'get_cache' is deprecated in favor of 'caches'.", RemovedInDjango19Warning, and stacklevel set to 2 as arguments.
content.setter decorator,
output is an empty list.
convert processors into a tuple and substitute it for processors.
derive the class RegexValidator form the object base class.
raise an exception.
import module datetime.
concatenate var_name, VARIABLE_ATTRIBUTE_SEPARATOR and fourth element of bits, use the result as an argument for the call the method, parser.compile_filter, substitute the result for expression.
value is boolean True.
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
code is a string 'min_value'
derive the class cached_property from the object base class.
convert new_name to a string and append it to string 'field', substitute the result for new_name.
from django.utils.functional import lazy into default name space.
return total_forms.
call the method host_validation_re.match with an argument host.
if f doesnt has an 'save_form_data' attribute,
if not,
import module mimetypes.
try,
call the function smart_text with an argument value, strip the result of whitespaces from both ends and substitute it for value.
derive the class BaseContext from the object base class.
get the value under the 'filename' key of the params dictionary, if the key exists substitute it for guessed_filename, if not, substitute used_name for guessed_filename.
initialize the object of a InMemoryUploadedFile class with arguments: file set to self.file, field_name set to self.field_name, name set to self.file_name, content_type set to self.content_type, size set to file_size, charset set to self.charset, and content_type_extra set to self.content_type_extra, return it.
call the function _generate_cache_key with request, method, headerlist, key_prefix as arguments, return the result.
call the method os.path.dirname with an argument potfile, join the result, locale and string 'LC_MESSAGES' into a file path, substitute it for basedir.
substitute smart_text for smart_str.
substitute length of content for self.size.
if UnicodeEncodeError exception is caught,
return dictionary created out of tuple elements k and printable representation of v, for every k and v in return value of the method module.__dict__.items, only if result of the method omittable called with an argument k is false.
return base and ext.
from django.utils.encoding import smart_text and force_text into default name space.
return the printable representation of the self object converted to a dictionary.
call the function re.compile with 2 arguments: raw string '^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$', and re.IGNORECASE, substitute the result for simple_url_re.
try,
from django.utils.encoding import force_text into default name space.
call the method self.appendlist with 2 arguments: return value of the function force_text with 3 arguments: key, encoding and errors set to string 'replace', and return value of the function force_text with 3 arguments: value, encoding and errors set to string 'replace'.
if not,
join 'conf' and 'locale' into a file path, if it is a directory,
if ValueError or TypeError exceptions are caught,
derive the class DefaultStorage from the LazyObject base class.
get converter attribute from self object, substitute it for converter.
raise an DisallowedRedirect exception with an argument string "Unsafe redirect to URL with protocol '%s'", where '%s' is replaced with parsed.scheme.
call the method self.create_parser with first and second element of argv, substitute the result for parser.
if settings.USE_THOUSAND_SEPARATOR is true,
call the method o.isoformat substitute the result for r.
call the method value.strftime with an argument format, return the result.
help is a string "Prints the CREATE TABLE SQL statements for the given app name(s).".
define the method _handle_m2m_field_node with arguments self, node and field.
call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
html_class_attr is an empty string.
define the method z with an argument self.
try,
define the function save_instance with 7 arguments: form, instance, fields set to None, fail_message as string 'saved',
define the method __init__ with 5 arguments: self, name, value, attrs and choices.
po_path is a string containing joined directory path from dirpath and f.
bring integer 36 to the power of factor, if i is smaller than the result,
if fext is a file,
raise an TypeError exception with an argument string 'other_dict must be a mapping (dictionary-like) object.'.
from django.utils import datetime_safe into default name space.
add ext to f, substitute the result for fext.
define the function mail_managers with subject, message, fails_silently set to boolean False, connection set to None,
bitwise shift integer 1 to the left by 31 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
close the process with an argument 0.
ESCAPE_MAPPINGS is an dictionary with 10 initial entries: None for 'A', None for 'b', None for 'B', '0' for 'd', 'x' for 'D', ' ' for 's', 'x' for 'S', 'x' for 'W', '!' for 'W' and None for 'Z'.
call the self.incr method with key, negative delta and version set to version as arguments.
define the method _prepare_data with 2 arguments: self and data.
for every site in sites,
if test_runner_class has an attribute 'add_arguments',
call the function get_template with an argument file_name, substitute the result for t.
if first element of the second row of args equals a string '2',
call the get_complete_version function with version as argument, store the result in version.
hex_format_string is a string "%%0%ix" formated with hlen multiplied with integer 2.
strip message_context of "'" characters from both ends, substitute the result for message_context.
for every uclass, unique_check in all_unique_checks,
subtract _cached_modules from module_values, assign the result to new_modules.
return s.
define the function literals with 3 arguments: choices, prefix set to an empty string and suffix set to an empty string.
builtins is an empty list.
close is boolean True.
call the function user_function with 2 arguments unpacked list args and unpacked dictionary kwds, substitute the result for result.
call the method base.build_instance with arguments Model, data and db, substitute the result for obj.
import module copy.
call the method widget_attrs with an argument widget, from the base class of the FloatField class, substitute the result for attrs.
call the self._cache.get method with argument key, substitute the result for val.
define the method tokenize with an argument self.
if not,
call the function format_html with 2 arguments: string '<optgroup label="{0}">' and return value of the function force_text, called with an argument option_value, append the result to output.
define the function quote_etag with an argument etag.
if TypeError or VariableDoesNotExist exceptions are caught,
if Exception, renamed to e, exception is caught,
if lib is false,
if count2 does not equals to integer 0,
call the function func with 2 arguments: self._wrapped and unpacked list args.
try,
call the function exhaust with an argument self._input_data.
call the method tmpfile.mkstemp with suffix set to suffix, prefix set to prefix and dir set to dir, store the result in the fd and name, respective.
define the method render with 2 arguments: self and context.
return None.
call the method self.endChannelElement with an argument handler.
call the method parser.delete_first_token.
chars is a string 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'.
call the method match.start, substitute the result for start.
append string " You may need to add %r to ALLOWED_HOSTS." to msg, where '%s' is replaced with domain.
if first element of str_number equals a string '-'.
call the function shutil.copymode with arguments old_path and new_path.
derive the class datetime from the real_datetime base class.
from __future__ import unicode_literals into default name space.
define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
if NotImplementedError exception is caught,
rise an KeyError exception with an argument key.
format self.day_field string with name, use it as the key for the data dictionary, substitute the result for d.
call the re.compile function with 2 arguments: raw string "^(?:[a-z0-9\.\-]*)://(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+", "(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\[?[A-F0-9]*:[A-F0-9:]+\]?)(?::\d+)?(?::\d+)?(?:/", "?|[/?]\S+)$" and re.IGNORECASE, substitute the result for regex.
status_code is an integer 304.
if kwargs is true,
get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
raise an exception,
otherwise if self.reason_phrase is None,
decorator deconstructible,
return d.
if dirname starts with character '.' or dirname equals a string '__pycache__',
if self.paginator.count equals a integer 0,
define the method __init__ with 13 arguments: self, queryset, empty_label set to a string  "---------", cache_choices set to None, required set to boolean True, widget set to None, label set to None, initial set to None, help_text set to an empty string, to_field_name set to None, limit_choices_to set to None, unpacked list args and unpacked dictionary kwargs.
from django.core.files.move import file_move_safe into default name space.
from django.utils import datetime_safe into default name space.
if cls is false,
call the method self.make_key with key and version set to version as arguments, substitute it for key.
from __future__ import absolute_import into default name space.
import module smtplib.
if self.LibraryValueNotFoundException exception is caught,
if chunk_size is false,
if use_natural_keys is true,
return input_val.
remove 3 elements from r starting at the index 23.
from django.core import urlresolvers into default name space.
self._handler_class is None.
if not,
call the method result.setFormatter with an argument formatter.
derive the class BaseTemporalField from the base class Field class.
define the emethod parse with 2 arguments: self and parse_until set to None.
write msg to self.stderr stream.
decorator function receiver with an argument setting_changed,
define the method tag_exists with self class instance and tag as arguments.
try,
derive the class UnrecognizedArchiveFormat from the ArchiveException base class.
call the method get_language, substitute the result for language_code.
otherwise if t.token_type equals TOKEN_VAR,
from django.db.migrations.loader import MigrationLoader into default name space.
if extra_classes is not empty put its elements into a set, substitute it for extra_classes, if not extra_classes is an empty set.
derive the class Command from the TemplateCommand base class.
call the function codecs.open with 3 arguments: sql_file, string 'r' and  encoding set to settings.FILE_CHARSET, with the result renamed to fp,
from io import BytesIO,  StringIO and UnsupportedOperation into default name space.
if not,
match value string with regex self.CONVERT_PATTERN, substitute the result for m.
call the function time_format with 2 arguments: value and arg, return the result.
decorator function register.filter with an argument is_safe set to boolean True.
call the method prepare_value the base class of the class ModelMultipleChoiceField, with an argument value, return the result.
call the function get_callable with an argument callback, return the result and an empty dictionary.
if m is true,
substitute parent_name for self.parent_name.
substitute third element of renamed_method for deprecation_warning.
call the function forbid_multi_line_headers with 3 arguments: name, val and string 'ascii', substitute the result for name and val, respectively.
call the s.serialize method with arguments queryset and unpacked dictionary options.
get the value under the 'error_messages' key of the kwargs dictionary, update errors dictionary with it.
if target is None,
valid is boolean True.
define the function ljust with 2 arguments value and arg.
for every path_to_remove in self.paths_to_remove,
if OSError, renamed to e, is caught,
from django.core.management.base import BaseCommand and CommandError into default name space.
call the method operations.extend with an argument smigration.operations.
decorator stringfilter,
input_type is a string 'checkbox'.
return an instance of VariableNode class with an argument filter_expression.
if not,
do nothing.
g is an instance of a class generator.BytesGenerator called with fp and mangle_from_ set to False.
if field_type is a tuple,
import module re.
get attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary, return it.
if not,
define the method __init__ with arguments self, flo and chunk_size set to integer 64 multiplied by integer 1024.
call the method now.decode with an argument string 'utf-8', substitute the result for now.
if self.verbosity is greater or equal to integer 2, call the self.stderr.write method with string "
from django.utils.translation import ugettext_lazy,  ugettext as _ and pgettext into default name space.
termios is None.
raise an exception.
call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.
from django.db import models into default name space.
sum punctuation and trail, substitute the result for trail.
import module base64.
define the method render with 2 arguments: self and context.
return an string "<IfEqualNode>".
from __future__ import unicode_literals into default name space.
call the method field.hidden_widget, substitute the result for field.hidden_widget.
if regex is an instance of six.string_types class,
extend comment_notes list with field_notes.
if rel_model has an attribute 'natural_key' and rel_model is not equal to model,
join elements of hextets into a string, separated with ':', substitute it for result.
self.resolver_match is None.
define the method save_existing_objects with 2 arguments: self and commit set to boolean True.
return self._name.
return value.
call the sio.read method, substitute the result for self.buffer.
from django.forms.utils import ErrorList into default name space.
define the method dst with 2 arguments: self and dt.
define the method handle_noargs with 2 arguments: self and unpacked dictionary options.
if template is an instance of list or tuple types,
from django.utils import six into default name space.
get the value under the key key of the self.cookies dictionary, substitute max-age for 'max-age' key of the returned dictionary.
import module sys.
define the method inner with 2 arguments: self and unpacked list args.
skip this loop execution.
if self.dry_run is false,
instantiate class ChunkIter with 2 arguments: self._input_data and self._chunk_size, use it to instantiate LazyStream class, assign the handle to stream.
instantiate QueryDict class with 2 arguments: an empty string and encoding set to self._encoding, instantiate a class MultiValueDict, return them.
increment i-th element of counters by chunk_length.
self._current is None.
define the method get_available_name with arguments self and name.
call the method val.encode with argument string 'ascii'.
return boolean True.
return data.
raise an ValueError with an argument string 'ModelForm has no model class specified.'.
define the method __init__ with 10 arguments: self, queryset, cache_choices set to None, required set to boolean True, widget set to None, label set to None, initial set to None, help_text set to an empty strign, unpacked list args and unpacked dictionary kwargs.
if not,
idstring is an empty string.
join elements of the output into a string, separated with '&', return the result.
call the style.NOTICE method with an argument string "[%s]", where '%s' is replaced with app, append the result to usage.
get the value under the mem_args key of the cache dictionary, return it.
create a tuple out of types of v, for every k and v in sorted_items, extend key tuple with the result.
derive the class SafeData from object base class.
if value is contained in self.empty_values,
try,
return boolean True.
return result.
call the method dig1.digest, use the result as an argument for the call to the function dig2.update.
define the method __init__ with 2 arguments: self and timezone.
if args in None of boolean False, substitute it for an empty dictionary.
call the method self.requires_system_checks with an argument: self.requires_system_checks if has_new_option is true, or if it is false, but has_old_option is true use self.requires_model_validation, if they are both false use boolean True as an argument.
if features.needs_datetime_string_cast field of object under the db key of connections dictionary is true and current_expires is not an instance of datetime object.
call the method bf.css_classes, substitute the result for css_classes.
return response.
call the function six.text_type with an argument name, return the result.
from __future__ import unicode_literals into default name space.
replace every occurrence of '\t' in s with '\\t'.
return None.
define the function ungettext with 3 arguments: singular, plural and number.
call the method d.as_tuple, substitute the result for tupl.
call the function reverse with 4 arguments: view_name, args as args, kwargs as kwargs and current_app as context.current_app, substitute the result for url.
append field to problem_fields list for every model in apps.get_models with argument kwargs dictionary, only if app_configs is None, or model._meta.app_config is contained in app_configs, for every field in model._meta.local_fields, only if field is an instance of models.BooleanField and field.has_default() evaluates to False.
if limit is None or length of x is lesser than or equal to limit,
return an empty string,
call the method parse from the instance of TemplateIfParser class, created with 2 arguments parser and bits, substitute the result for condition.
if filename is true and filename path doesnt exist,
yield string "#" as the result.
if fg is contained in color_names,
call the method msg.attach with an argument body_msg.
call the function force_text with an argument output, substitute the result for output.
return result.
is_usable is boolean True.
sublist is an empty string.
return self.
if end_index is None and s_len is greater than truncate_len,
append current_number to a list for current_number in self._unget_history, if current_number is equal to num_bytes, substitute the length of the resulting list for number_equal.
do nothing.
call the method imatch.group with an argument integer 2, use the result as an argument for the call to the method context_re.match, substitute the result for context_match.
return self.empty_form.media.
define the method urlconf_module with an argument self.
return value.
call the method cursor.execute with string "DELETE FROM %s" as argument, substitute the '%s' with table.
text_kwargs is a dictionary created from the result of the function force_text with an argument v, mapped through function k, for every k and v in return value of the kwargs.items.
if f equals to string '__pycache__',
finally perform,
if not,
call the function strftime with 2 arguments: self and fmt, return the result.
call the method parser.compile_filter with an argument, second element of bits, substitute the result for val1.
call the models.Model.save_base method with arguments self.object, using as using and raw set to boolean True.
substitute doublecolon_len for best_doublecolon_len.
skip this loop iteration.
return parent.
raise an TemplateSyntaxError with an argument string "%r tag takes at least one argument: the name of the template to be included.", where '%r' is replaced with first element of bits.
for every char in result of the self.add_truncation_text, called with 2 arguments: an empty string and truncate.
if ret equals to integer 0, return boolean True, otherwise return boolean False.
from django.utils.encoding import force_text into default name space.
from django.utils import six into default name space.
for every node in self.nodelist,
if ImportError exception is caught,
changed is boolean False.
call the method self._base_set with string 'add', key, value and timeout as arguments, return the result.
define the method get_backend_timeout with self and timeout set to DEFAULT_TIMEOUT as arguments.
domains is a tuple with element string 'django'.
for every k in keys,
if self.verbosity is greater or equals integer 2 and fixture_files_in_dir is false,
raise an exception.
TOKEN_VAR is integer 1
set field interesting for this class instance to interesting_cdata from module _html_parser.
call the function _ with the argument string 'Ensure this value is %(limit_value)s (it is %(show_value)s).', substitute the result for message.
substitute auto_id for self.auto_id.
define the function find_command with 3 arguments: cmd, path set to None and pathext set to None.
try,
if OverflowError or ValueError exceptions are caught,
close fd file descriptor.
substitute value under the backend key of settings.CACHES dictionary for conf.
return result.
call the function meta with 3 arguments: name, base and d.
if Exception exception is caught,
call the function normalize_newlines with an argument value, substitute the result for value.
return a tuple with an element self.__dt.
skip this loop iteration.
call the function io.open with 3 arguments: potfile, string 'r' and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:
return self.name.
call the method self._base_set with string 'set', key, value and timeout as arguments.
define the method configure_formatter with 2 arguments: self and config.
call the method self._new_instance with 3 arguments: self.children, self.connector and self.negated, substitute the result for obj.
if pos is greater than or equal to last,
if not,
close file file.
return a instance of the class Page, created with 2 arguments: unpacked list args and unpacked dictionary kwargs.
response.content is bytes empty string.
call the function ugettext with string 'yes,no,maybe' as an argument, substitute the result for arg.
return the length of self.content.
perform bitwise exclusive OR on 2 operands integer representation of x and integer representation of y, perform bitwise OR with 2 operands: previous result and result, substitute the result for result.
if token.contents equals a string 'else',
return value under the alias key of self._caches.caches dictionary.
evaluate next boolean expression, value of converter function with opts.db_table as argument is contained in tables, or opts.auto_created is True and return value of converter function with opts.auto_created._meta.db_table is contained in tables, invert the evaluated expression and return it.
derive the class BaseInlineFormSet from the BaseModelFormSet base class.
convert lang_string to lowercase, split by the result string accept_language_re, substitute the result for pieces.
day_field is a string '%s_day'.
if hidden_fields is true,
define the function phone2numeric_filter with an argument value.
define the function get_serializer with an argument format.
cc is an empty dictionary.
nesting is integer 1.
append options to output.
if connection exists dont modify it, if not call get_connection function with username set to auth_user, password set to auth_password, fail_silently set to fail_silently as arguments, assign it to connection.
substitute value for self.value.
call the method parser.add_argument with string '--no-initial-data', action containing string 'store_false', dest set to string 'load_initial_data', default set to True, help containing string 'Tells Django not to load any initial data after database synchronization.' as arguments.
self.proxy is boolean False.
return boolean False.
raise an MultiPartParserError with an argument string 'multipartparser.exhaust() was passed a non-iterable or stream parameter'.
substitute name for self.name.
return inner.
return an empty string,
call the os.path.abspath with argument self.file_path, substitute the result for self.file_path.
call the method data, substitute the result for data.
call the os.path.basename with path as argument, substitute the result for filename.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string, 'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice', and return value of the function _ called with an argument string 'Enter a list of values.' for 'invalid_list'.
append site to sites.
best_doublecolon_start is an integer -1.
call the method self._archive.printdir with 2 arguments: unpacked list args and unpacked dictionary kwargs.
try,
for every field_node in return value of the method node.getElementsByTagName with an argument string 'field'.
as_form is boolean True
if kwargs is None,
return j.
call the method connection.cursor, with the result as cursor,
skip this loop iteration,
if i is greater than or equal to the result of the method self.initial_form_count, and call to the method form.has_changed evaluates to false,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
substitute self.__offset.seconds for offset.
raise an ValueError with an argument string "'%s.%s' has no ForeignKey to '%s.%s'.", where '%s' is replaced with, model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively.
get the value under the 'csrf_token' key of the context dictionary, if it exists substitute the result for csrf_token, if not csrf_token is None.
if parent has an attribute 'render',
split msgs by newline characters, for every line in result,
define the method __init__ with 4 arguments: self, content set to an empty list, unpacked list args and unpacked dictionary kwargs.
from django.core.management.sql import check_for_migrations into default name space.
if escaped is true,
define the method __deepcopy__ with arguments self and memo.
call the method domain.encode with an argument string 'idna', call the method decode on the result with an argument string 'ascii', substitute the result for domain.
call the method __delitem__ from the base class of the class SortedDict, with an argument key.
raise an CommandError with argument: string "Can't resolve dependencies for %s in serialized app list.", where '%s' is replaced with: model._meta.app_label and model._meta.object_name joined into a string, with separator '.', result joined into a string, separated by string ', ' for every model and deps in sorted list of elements skipped sorted by key: return value of the lambda function with an argument obj, and result the __name__ field of the first element of obj.
substitute library for self._lib.
decorator function wraps with an argument func.
join elements of parts into a string, separated with '.', substitute it for name.
substitute smart_bytes for smart_str.
call the method handler.addQuickElement with 3 arguments: string 'summary', value under the 'description' key of item dictionary, and dictionary with an entry: 'html' for 'type'.
raise an TypeError with an argument string "update expected at most 1 arguments, got %d" formated with length of args.
from django.utils.timezone import template_localtime into default name space.
__all__ is a tuple containing strings: 'UploadedFile', 'TemporaryUploadedFile', 'InMemoryUploadedFile' and 'SimpleUploadedFile'.
try,
if exception http.Http404 as e is caught,
if app_config.models_module is None,
import module time.
substitute klass.__dict__ for next.
call the method parser.add_argument with 4 arguments: string '--testrunner', action set to string 'store', dest set to 'testrunner', and help set to a string 'Tells Django to use specified test runner class instead of the one specified by the TEST_RUNNER setting.'.
call the method self.__cast, if the result is lesser than other, return boolean True, otherwise return boolean False.
call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
substitute arg converted into an integer for length.
call the method formfield_callback with 2 arguments: f and unpacked dictionary kwargs, substitute the result for formfield.
return s.
call the method kwarg_re.match with an argument bit, substitute it for match.
get the value under the key 'database' of the options dictionary, substitute it for db.
return changeset.
import module unicodedata.
return ZERO.
if num_entries is lesser than self._max_entries,
return a string '%02d' formated with self.data.minute.
program_options is list containing string '--check-format'.
get attribute 'caches' from the self._caches if exists, otherwise get an empty dictionary, call the values method on the return value, return it.
if template_name_list is false,
call the method checks.run_checks with 2 arguments: app_configs set to app_configs, tags set t tags, substitute the result for all_issues.
if obj_pk is not None,
joint prefix, character '.' and self._callback_str together, substitute the result for self._callback_str.
return integer 0.
return an string "<IfNode>".
if cleaned_line is false,
input_type is None.
append ending to msg.
_empty_value is an empty string.
call the method Field.__init__ with 8 arguments: self, required, widget, label, initial, help_text, unpacked list args, and unpacked dictionary kwargs.
append str_hidden to output.
call the function re.compile with an argument raw string '(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))', substitute the result for re_camel_case.
from __future__ import unicode_literals into default name space.
derive the class LocalTimezone from the tzinfo base class.
import module warnings.
raise CommandError exception with "More than one migration matches '%s' in app '%s'. Please be more specific.", with '%s' substituted for migration_name and app_label, respectively, as arguments.
join inputs elements into a string, separated with newline character, use it as an argument for the call to the function mark_safe, return the result.
self.message_context is None.
return self.parent_instance.
substitute _iteritems for iteritems.
replace '%s' in the string '</\s*%s\s*>' with the result of the function call tag.lower(), use it and the re.I as the input arguments for function re.compile, put the result in the self.interesting.
define the method add_initial_prefix with 2 arguments: self and field_name.
append None to bits.
append string '_field' to new_name.
update self.filters dictionary with lib.filters.
call the method self.render, return the result.
get attribute "urlpatterns" form the self.urlconf_module, substitute it for patterns, if the attribute doesnt exist, substitute self.urlconf_module for self.urlconf_module.
substitute elements of tuple boundary to end and next, respectively.
return boolean False.
tr,
if locale is not false or None, substitute it for locales, otherwise substitute all_locales for locales.
substitute table for self.db_table.
call the method boundary with an argument string 'ascii', use the result to call to the parse_header function, assign the result to ctypes and opts.
call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, return the result.
define the method value_from_datadict with 2 arguments: self, data, files and name.
char2number is an dictionary, with 26 elements: 2 for 'a', 2 for 'b', 2 for 'c', 3 for 'd', 3 for 'e', 3 for 'f', 4 for 'g', 4 for 'h', 4 for 'i', 4 for 'j', 5 for 'k', 5 for 'l', 5 for 'm', 6 for 'n', 6 for 'o', 6 for 'p', 7 for 'q', 7 for 'r', 7 for 'r', 7 for 's', 7 for 't', 8 for 't', 8 for 'u', 8 for 'v', 9 for 'w', 9 for 'x', 9 for 'y' and 9 for 'z'.
if self.activated is boolean True,
call the function datetime.now, substitute the result to now.
call the re.compile function with self.regex and self.flags as arguments, substitute the result for self.regex.
if fh has an attribute a, for every a in WRAPPER_ASSIGNMENTS, put a into a tuple, return the resulting tuple.
define the function _bin_to_long with an argument x.
call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_write.
define the function load_handler with arguments: path, unpacked list args and unpacked dictionary kwargs.
from django.conf import settings, global_settings into default name space.
define the function javascript_quote with 2 arguments: s and quote_double_quotes set to boolean False.
old_field_name is None.
substitute self.model._meta.pk for pk_field.
derive the class URLValidator form the RegexValidator base class.
if mw_instance has an attribute named 'process_view'.
if string 'forloop' is contained in context,
if location is None,
call the function mark_safe with an argument new_obj, substitute the result for obj.
define the method readline with 3 arguments: self, unpacked list args and unpacked list kwargs.
if app_output is true,
self.object_name is a string 'CacheEntry'.
decorator function register.filter with an argument is_safe set to boolean True.
if KeyError exception is caught,
define the method get with 4 arguments, self, key, default set to None and version set to None.
define the method __str__ with argument self.
define the function wrapper with an argument cls.
if data is not an instance of basestring,
call the method self.build_attrs with an argument attrs, substitute the result for final_attrs.
subtract integer 12 from self.data.hour, return the result.
call the import_string with argument backend, substitute it for backend_cls.
yield a tuple with 2 elements: tok.name and toktext.
call the function force_bytes with an argument salt, substitute the result for salt.
increment length of boundary by integer 6, substitute the result for self._rollback.
return retval.
define the function check_errors with argument fn.
convert 'Set-Cookie' to a string and convert the return value of method c.output(header='') call to a string, format the previous in a tuple, append the tuple to the response_headers.
from django.utils import six into default name space.
if attr is an instance of MovedModule.
call the x.split method with arguments: character '=' and integer 1, store the result in k and v, respectively.
call the function get_language, substitute the result for lang.
call the method transaction.get_autocommit with an argument self.using, if it evaluates to true,
remover the entry under the 'type' key of the attrs dictionary, substitute it for self.input_type, if the key doesnt exists, substitute self.input_type for self.input_type.
decorator classmethod,
from django.utils import six into default name space.
if Exception, renamed to e, exception is caught,
app is a string 'django'
return nothing.
data is an instance of BytesIO class, created with an argument: self._body.
get the value under the e.errno key of the ERRORS dictionary, substitute it for error_text.
import io.
increment bytes_read by length of bytes.
for every c in reversed order of candidate, convert c into an integer, sum all the results and substitute the result for evens.
define the method __init__ with 3 arguments: self, producer and length set to None.
join elements of self.fed into a string, return the result.
if s is an instance of an object bytes.
call the method self.setlistdefault with an argument key, append value to the result.
increment weight by integer 2.
define the function striptags with an argument value.
self.managed is boolean True.
from django.core.urlresolvers import reverse, NoReverseMatch.
define the method pop with 2 arguments: self and idx set to negative integer 1.
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
if format is not contained in _serializers,
derive the class Lexer form the base class object.
append string '-- The following references should be added but depend on non-existent tables:' to the final_output.
call the method self.get_backend_timeout with argument timeout, substitute it for expiry.
remove the old_file_name file.
get the value under the part key of the PALETTES dictionary, update with it palette dictionary.
do nothing.
call the method self._truncate_html with 5 arguments: length, truncate, self._wrapped, length and boolean True, return the result.
if call to the function response.has_header with string 'Vary' as an argument returns True,
substitute '%s' with title in the string " [X] %s", write it to the standard output.
define the method __init__ with 2 arguments: self and unpacked list dicts.
if self.to_field is true,
messages is an empty dictionary.
substitute self for value.configurator.
import module json.
define the method add_arguments with 2 arguments: self and parser.
if data is true,
return klass.
for every app_name and mode_list in return value of manifest.items method,
define the method value_from_datadict with 4 arguments: self, data, files and name.
call the method self.find_template with 2 argumetns: template_name and template_dirs, assign the result to template, origin, respectively.
for every i and tuple containing 2 elements: seconds and name, in enumerated chunks,
from django.utils.timezone import utc and get_fixed_timezone into default name space.
substitute max_length and min_length for self.max_length for self.min_length.
call close method on a file stream.
from django.utils import timezone into default name space.
define the method filter with 2 arguments: self and record.
executor is an instance of MigrationExecutor, created with value under the DEFAULT_DB_ALIAS key of the connections dictionary.
with return value of the function transaction.atomic with using set to db as arguments, perform the following,
define the method __contains__ with 2 arguments: self and item.
if not,
if formfield is true,
derive the class Tags with base class object.
call the method self.normalize_col_name with 3 arguments column_name, used_column_names, is_relation, assign the result to att_name,  params and notes, respectively.
call the function become_daemon with 2 arguments: our_home_dir set to the value under the 'workdir' key of options dictionary and, unpacked dictionary daemon_kwargs.
if f has an attribute 'seek' and if f.seek is an callable object,
import module datetime.
for every operation in migration.operations, substitute '%s' in a string "
substitute content.name for name.
substitute takes_context for self.takes_context.
from django.forms.widgets import TextInput, NumberInput, EmailInput, URLInput, HiddenInput, MultipleHiddenInput, ClearableFileInput, CheckboxInput, Select, NullBooleanSelect, SelectMultiple, DateInput, DateTimeInput, TimeInput, SplitDateTimeWidget, SplitHiddenDateTimeWidget and FILE_INPUT_CONTRADICTION.
default_error_messages is an dictionary with 2 entries: return value of the function _ called with an string 'Enter a valid date.', for 'invalid_date' and return value of the function _ called with an string 'Enter a valid time.', for 'invalid_time.
convert config_string to lowercase and split it by ';' character, substitute the result for parts.
call the method self._delete with argument key.
substitute name for self.name.
call the function block_re.match with an argument t.contents, substitute the result for bmatch.
define the function fset with 3 arguments: instance, valse to None and name set to fset.__name__.
try,
return cls.
self.blocks is a dictionary with elements: n for n.name, for every n in return value of the method nodelist.get_nodes_by_type, called with an argument BlockNode.
_default is None.
define the method parse_name with arguments self and fixture_name.
join the executor.loader.unmigrated_apps into a string separated by string ', ' append it to the end of a string "  Synchronize unmigrated apps: ", use it as an argument for the call to the self.style.MIGRATE_LABEL method, use the result of the previous method as an argument for the call to the self.stdout.write method.
call the method __init__ with an argument UNKNOWN_SOURCE, from the base class of the class StringOrigin.
assign the return value of the function fn to change.
remove first element from self.command_stack.
raise an TemplateSyntaxError exception with an argument string "'cycle' tag requires at least two arguments".
update a dictionary with an entry v converted to an integer for k, for every k and v in result of the function six.iteritems, called with an argument kw, only if v is not None, substitute the result for kw.
define the method is_checked with an argument self.
s is an instance of the Select class, created with choices set to choices.
self._post is an instance of QueryDict class, created with an empty string and mutable set to boolean True.
assign the bits elements to tag, this_value_expr, max_value_expr and max_width, respectively.
_error_files is an empty list.
if NameError exception is caught,
shell is an instance of IPShell class, created with an argument argv as an empty list.
call the method __init__ from the base class of the DTDForbidden class.
python_2_unicode_compatible decorator,
self._wrapped.
substitute EscapeText for EscapeString.
call the function allow_lazy with 2 arguments: urlunquote_plus and six.text_type, substitute the result for urlunquote_plus.
call the method self.error_class with an argument e.error_list, substitute the result for self._non_form_errors.
get value under the key settings.CACHE_MIDDLEWARE_ALIAS of caches dictionary, substitute with it the cache.
substitute NullBooleanSelect for widget.
extend fixture_files list with fixture_files_in_dir.
define the function formset_factory with 9 arguments: form, formset set to BaseFormSet, extra set to integer 1,
call the method self.xml.endElement with an argument string 'object'.
call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults, respectively.
call the add_argument method on the parser object with string '--backwards', asction set to 'store_true', dest set to 'backwards', default set to False and help set to string'Creates SQL to unapply the migration, rather than to apply it' as arguments.
call the method hashlib.sha1 with an argument secret appended to key_salt, call the method digest on the result, return the result.
if ValueError exception is caught,
derive the class HiddenInput from the Input base class.
if first element of text is contained in 'xX'.
from django.utils.encoding import python_2_unicode_compatible and force_st into default name space.
_get_request is getter function for REQUEST attribute of this class.
substitute msg for self.msg.
return endpos.
call the function sanitize_address with arguments email_message.from_email and email_message.encoding, substitute the result for from_email.
write migration_string to file fh.
call the method parser.compile_filter with second element of bits as an argument, substitute the result for filepath.
append ch to result.
return self.source.
define the method _load_post_and_files with an argument self.
call the method connection.ops.start_transaction_sql, if it evaluates to true,
raise an ValueError exception with an argument string 'Unable to configure handler %r: %s' formated with name and e.
from django.core.management.base import BaseCommand and CommandError into default name space.
if not,
append f.name to ignored list.
define the method resolve with an argument self.
define the function ngettext with 3 arguments: singular, plural and number.
convert bytes to floating point number, substitute it for bytes.
if lookup_view is contained in self._callback_strs,
blocks is a dictionary with elements: n for n.name, for every n in return value of the method, compiled_parent.nodelist.get_nodes_by_type, called with an argument BlockNode.
define the method strptime with arguments self, value and format.
get format_type attribute of the settings object, return it.
from django.core.management.base import BaseCommand and CommandError into default name space.
try,
derive the class HttpRequest from the object base class.
import module hashlib.
join elements of ret_ip into a string separated with ':', return it.
substitute io.BytesIO for BytesIO.
call the import_string with arguments path, call the return function with arguments: unpacked list args and unpacked dictionary kwargs, return the result.
return nothing.
call the function get_ns_resolver.cache_clear.
call the re.compile function with an argument raw string '^[-a-zA-Z0-9_]+$', substitute the result for slug_re.
if not,
if data_set is not equal to initial_set return boolean True, otherwise return boolean False.
derive the class StreamingBuffer from the object base class.
otherwise if autoescape is true,
call the method self.__class__ with an argument list, with 2 elements: key and result of the function copy.deepcopy, called with 2 arguments: value and memo, for every key and value in result for the method self.items, return the result.
from __future__ import unicode_literals into default name space.
import module os.
if not,
if size is not zero,
row_data is an generator object that returns value under the field key of form.cleaned_data dictionary, for every field in unique_check, if field is contained in form.cleaned_data.
yield value under key key of self dictionary.
remove the 'using' key from the options dictionary, substitute the return value for self.db, if the key doesnt exists substitute DEFAULT_DB_ALIAS for self.db.
call the datastructures.MergeDict with self.POST and self.GET as arguments, assign the result to self._request.
call the method self._resolve, substitute the result for result.
if TypeError or VariableDoesNotExist exceptions are caught,
contextlib.contextmanager decorator,
self._producer is an empty list.
for every hook in sys.path_hooks,
call the method field._has_changed with 2 arguments: initial_value and data_value, if it evaluates to true,
if method msg.get_charset evaluates to true, call the get_output_charset method on the return value of the msg.get_charset method, substitute the result for charset, otherwise if it is false, substitute the string 'utf-8' for charset.
data is an dictionary with 2 initial entries: return value of the smart_text function with the argument obj._meta for 'model', and self._current for 'fields'.
define the method write_migration_files with arguments self and changes.
return an integer 0.
call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class MultiValueField.
return boolean True.
extend errors list with m for every m in e.error_list, only if m is not in errors.
derive the class Archive from the object base class.
define the method get_connection with arguments self and fail_silently set to boolean False.
for every line in return value of the method self.handle_inspection called with an argument options,
get the index of first occurrence of name in existing, substitute it for i.
if changes is false and self.verbosity is greater than, or equal to iteger 1,
value is None.
num_args is an integer 0.
yield obj as generator return value,
help is a string "Prints the SQL statements for the named migration."
return output.
self.error_class is a string 'errorlist'.
call the method context.push with an argument var set to output, with the result perform,
if not,
substitute '%s' in 'django.security.%s' with the name of the type of the class object e, use it as the argument for the call to the, function logging.getLogger, assign the result to the security_logger.
if not,
if not,
try,
if safe_input is true,
if call to the function contains with 2 arguments: last element of result and Group, evaluates to true,
for every reference and receivers in return value of the call of obj.unresolved_references.items method,
for every key and value in return value of the parse_qsl with 3 arguments: query_string is it exists or an empty string if not, keep_blank_values set to boolean True, encoding set to encoding.
self._populated is boolean True.
substitute regex for self._regex.
if extend is true,
call the function re.compile with an argument string "([\u0080-\uffff])", substitute the result for ustring_re.
return self.__offset.
define the method __init__ with 13 arguments: self, path, match set to None, recursive set to boolean False, allow_files set to boolean True, allow_folders set to boolean False, required set to boolean True, widget set to None, label set to None, initial set to None, help_text set to an empty string, unpacked list args, unpacked dictionary kwargs.
do nothing.
split ip_str into parts by ':', substitute the result for new_ip.
raise an exception.
if not,
if content_type is false,
call the function update_wrapper with 2 arguments: _wrapper and dummy.
decrement l by integer 1, multiply it with hlen, subtract the result from dklen, substitute the result for r.
TOTAL_FORM_COUNT is a string 'TOTAL_FORMS'.
from django.utils.module_loading import module_has_submodule into default name space.
substitute obj for the value of the memo dictionary at the identity of the self object key.
property decorator,
call the function forbid_multi_line_headers with 3 arguments: name, val and self.encoding, substitute the result for name and val, respectively.
for every d in self.dicts,
call the method os._exit with an argument integer 1.
if self._read_started is true,
define the method extract with 2 arguments self and to_path.
if count is equal to integer 0.
if ValueError or TypeError exceptions are caught,
increment s_len by integer 1,
get field.name attribute of the obj, substitute it for related.
if first element of text equals '#',
define the method __call__ with arguments self and value.
from django.utils import six into default name space.
call the method self.add_root_elements with an argument handler.
bring integer 2 to the power of 10, multiply it by integer 64, substitute the result for chunk_size.
from django.conf import settings into default name space.
define the method reverse_dict with an argument self.
define the function find_template with 2: template_name and dirs set to None.
do nothing.
for every tablename in tablenames,
try,
call the function six.text_type with an argument self, divide the result with rhs and return the reminder of the division.
append list containing string '--no-location' to self.msgmerge_options.
define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
call the self._createdir method.
substitute the length of defaults for dlen.
define the method __str__ with an argument self.
if not,
if data_set is not equal to initial_set, return boolean True, otherwise return boolean False.
property decorator,
return an empty list.
if cc is not an six.string_types instance raise an error with message string '"cc" argument must be a list or tuple'.
call the method filter.get_request_repr with an argument request, format string '\n{0}' with the result, substitute the result for request_repr.
call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, return the result..
raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide a list() method'.
substitute __setitem__ filed of the base class of the class SortedDict for super_set.
default_validators is a list with an element validators.validate_email.
call the function allow_lazy with 2 arguments: get_valid_filename and six.text_type, substitute the result for get_valid_filename.
from django.core.exceptions import ImproperlyConfigured into default name space.
decorator function register.filter with an argument is_safe set to boolean False.
append list containing string '--no-wrap' to self.msguniq_options.
define the function get_major_version with an argument version defaulting to None.
_dec.__name__ is a string 'method_decorator(%s)' formated with decorator.__name__.
do nothing.
if length of value is greater or equal to integer 2 and first and last elements of value are an empty string,
decorator function register.filter with an argument is_safe set to boolean True.
from django.utils.six.moves import cPickle as pickle into default name space.
call the import_string with app_path as an argument, return the result.
define the method __init__ with 4 arguments: self, object_list, number, and paginator.
call the function pgettext_lazy with an argument self.message_context and value, return the result.
call the method translation.activate with an argument settings.LANGUAGE_CODE.
do nothing.
raise a ValidationError exception with arguments self.message and code set to self.code.
if value under the 'verbosity' key of the options dictionary is greater than zero,
if opts is true,
return an empty string.
define the method __init__ with arguments self, content and name defaulting to None.
return usage.
if not,
safe_data is an empty dictionary.
append first 49 elements of self._unget_history to list containing num_bytes, substitute the result for self._unget_history.
if not,
try,
call the function get_git_changeset, store the result in git_changeset.
substitute DEFAULT_MIN_NUM for min_num,
define the method get_default_prefix with an argument cls.
try,
call the method migration.ancestry.index with an argument common_ancestor, increment the result by one, slice migration.ancestry list from the last result as an starting index to the end, substitute the slice for migration.branch.
get the value under the index key of the hextets dictionary, remove the leading '0' characters, substitute the result for value under the index key of the hextets dictionary.
if length of fks_to_parent equals integer 1.
call the middleware_method with request and e as the arguments, substitute the result for response.
evaluate the function bytes with the argument s, and return the result.
do nothing.
call the function get_commands, substitute it for commands.
join elements of output into a string, separated by newline characters, return the result.
if not,
append to options a tuple containing 2 entries: result of the method s_opt.get_opt_string and s_opt.nargs, for every s_opt in parser.option_list.
output is an empty list.
return val and encoded as a tuple.
call the method m.group with an argument string 'year', convert the result into a string, substitute it for year.
delete entry under item key of self.dict dictionary.
if not,
escaped is boolean False.
call the function get_connection with 2 arguments: backend set to self.email_backend and fail_silently set to boolean True.
from django.utils.synch import RWLock into default name space.
define the function _generator.
define the method __copy__ with an argument self.
split p into two parts at the first ':', use the second element of the result to format string ' _(%s) ', write it to out.
define the method open with arguments self and mode set to None.
if value is true and value has an attribute 'url',
call the method logging.getLogger with an argument name, substitute the result for logger.
return an instance of SafeBytes, created with an argument s.
join first element of django.__path__, string 'conf' and subdir into a valid file path, return it.
call the function get_callable with arguments lookup_view and boolean True, substitute the result for lookup_view.
substitute flags for self.flags.
from django.core.exceptions import ValidationError and NON_FIELD_ERRORS into default name space.
call the method __init__ from the base class of the class NullBooleanSelect, with arguments attrs and choices.
if pk.editable is true, or pk.auto_created is true or pk is an instance of AutoField class, or if pk.rel is true, and pk.rel.parent_link is true and function pk_is_not_editable called with an argument pk.rel.to._meta.pk evaluates to true,
define method load_middleware with class instance self as the argument.
take subject elements from p-th to i-th index, substitute it for s.
if not,
if not,
if except UnicodeDecodeError exception is caught,
define the method content with an argument self.
call the method self.next_token, substitute the result for token.
for every model in app_models,
substitute self.model._default_manager for queryset.
for every subnode in node,
return boolean True.
if ret is true.
form is an instance of ManagementForm class, created with 3 arguments: self.data, auto_id as self.auto_id and prefix as self.prefix.
call the function force_str with an argument signature, return the result.
for every sql in sql_list,
return value.
call the Error function with 4 arguments, string "%s was connected to the '%s' signal with a lazy reference to the '%s' sender, which has not been installed." with all the '%s' replaced by values of description, name and reference joined into a string delimited by '.', respectively, obj set to receiver.__module__, hint set to None and id set to string 'signals.E001', append the result to errors.
call the self._list_cache_files method, substitute the result for filelist.
raise an exception.
if val is an instance of tuple,
substitute self.auto_id for auto_id.
call the function get_library with an argument taglib, substitute the result for lib.
call the function language_code_prefix_re.match with an argument path, substitute it for regex_match.
return value under the 'wsgi.url_scheme' key of self.environ dictionary.
increment key by item.
return boolean False.
if value in self.empty_values,
if size of c_ulong does not equals to size of c_void_p,
append name to exclude.
append a tuple with 2 elements: f and f with first occurrence of the path replaced with an empty string, to self.choices.
get field.name from the obj, substitute it for related.
substitute var_obj for self.var.
match is None.
format string ' _(%s) ', with fmatch, write it to out.
define the function gettext with an argument message.
values is an dictionary with entries: return value of the method var.resolve with an argument context for name, for every name and var in return value of the function six.iteritems called with an argument self.extra_context.
from django.conf import settings into default name space.
import module sys.
call the function func with unpacked dictionary kwargs as an argument, substitute the result for translated.
define the function from_current_timezone with an argument value.
increment weight by integer 2.
call the function __import__ with an argument name.
if value under the 'microsecond' key of the kw dictionary is true,
if push is not None,
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
for every name in namelist,
for every bwidget in self.widgets,
substitute '%s' in string "No changes detected in apps '%s'" with the app_labels joined into a string, separated by string "', '", write it to self.stdout.
if not,
substitute the settings.MEDIA_ROOT for location.
from django.utils.six.moves import cPickle as pickle into default name space.
increment length of template_dir by one and substitute it for prefix_length.
if model_list is None,
define the method __init__ with 2 arguments: self and token.
return EndToken.
call the function import_module with 2 arguments: string .management and app_config.name.
raise an AttributeError exception with string "Unable to determine the file's size." as argument.
return new_value.
call the function chain with arguments self.choices and choices, for every option_value and option_label in the result,
define the method c with an argument self.
define the initialization method __init__ with self class instance and table as arguments.
define the function get_standard_processors.
if filepath starts with root,
call the __getstate__ method from the base class of the class SimpleTemplateResponse, substitute the result for obj_dict.
call the function import_module with an argument templatetag_module.
call the method self.as_widget, return the result.
call the method token.contents.split, substitute the result for bits.
do nothing.
substitute cyclevars for self.cyclevars.
do nothing.
return boolean False.
skip this loop iteration.
_iterkeys is a string "keys".
_func_defaults is a string "__defaults__".
return an empty string.
define the method __init__ with self and limit_value as arguments.
substitute t.lineno for comment_lineno_cache.
subject is an string '%s (%s IP): %s', formated with record.levelname, string 'internal' if value under the 'REMOTE_ADDR' key, of the request.META dictionary is contained in settings.INTERNAL_IPS, otherwise use string 'EXTERNAL', and result of the method record.getMessage.
define the method absolute_path with 3 arguments self, path and prefix set to None.
from django.core.mail.utils import CachedDnsName and DNS_NAME into default name space.
for every part in parts,
for every condition and nodelist in self.conditions_nodelists,
if file_ is true,
from django.utils.safestring import mark_safe into default name space.
import module os.
add value and delta together, substitute the result for new_value.
define the function format with 6 arguments: number, decimal_sep, decimal_pos set to None, grouping set to integer 0,
call the method s.get_data, return the result.
if values under the 'app_label' and 'migration_name' keys of the options dictionary are True,
return integer 0.
update object_data dictionary with initial.
substitute setting and nodelist for self.setting and self.nodelist, respectively.
try,
substitute self.deleted_forms for forms_to_delete.
derive the class PasswordInput from the TextInput base class.
from django.utils import six into default name space.
if self does not have 'bad_cookies' attribute,
for every a and n in targets, put a into a set, join all the set elements into a string separated by string ', ', if set is empty return string '(none)' instead, append the previous to the string " Apply all migrations: ", use the previous string as the argument for the call to the method self.style.MIGRATE_LABEL, use the result as an argument for the call to the method self.stdout.write.
convert fist p elements of language to lowercase, append '_' to it, covert to lowercase language elements from (p+1)-th index to the end, append it to the previous result, return it.
substitute sys.maxsize for MAXSIZE.
 %s", where '%s' is replaced by name to the usage.
skip this loop iteration.
call the function mark_safe with an argument arg, append it to arg_vals.
get the value under the 'content-disposition' key of the meta_data dictionary, substitute second element of it for disposition.
move integer 1 left for 10 bits, substitute the result for KB.
define the method add_arguments with arguments self and parser.
call the initialization method _html_parser.HTMLParser.__init__(self) for the base class.
all the method field.rel.to._meta.get_field with field.rel.field_name as argument, call the to_python method on the result with, unpacked list field_value as an argument, substitute the result for value.
call the function six.unichr with value under the text key of the html_entities.name2codepoint dictionary, return the result.
call the method zipfile.ZipFile with an argument self, substitute the result for self._archive.
return string 'st'.
if field is not None,
define the method start_serialization with an argument self.
call the function re.compile with an argument string '(%s.*?%s|%s.*?%s|%s.*?%s)', substitute all occurrences of '%s' with, return value of the function re.escape called with an argument BLOCK_TAG_START, return value of the function re.escape called with an argument BLOCK_TAG_END, return value of the function re.escape called with an argument VARIABLE_TAG_START, return value of the function re.escape called with an argument VARIABLE_TAG_END, return value of the function re.escape called with an argument COMMENT_TAG_START, and return value of the function re.escape called with an argument COMMENT_TAG_END, substitute the result for tag_re.
if not,
if length of value is not equal to integer 2,
derive the class NullBooleanSelect from the Select base class.
call the method self.validate_key with argument key.
call the self.xml.startDocument method.
substitute boundary for self._boundary.
substitute args, without the last element for args.
if form._meta.fields is true,
derive the class File from the FileProxyMixin base class.
define the method __bool__ with an argument self.
call the method self.as_tuple with an argument value under 'address' key of config dictionary, substitute the result for value under 'address' key of config dictionary.
if second last element of django.VERSION is not equal to a string 'final',
from django.core.management.base import BaseCommand into default name space.
call the method self._clean_fields.
substitute type for class_types.
property decorator,
substitute url_name for self.url_name.
call the method pyinotify.INotifyWrapper.create, on the return value call the inotify_init method, substitute the result for fd.
append self._regex_validator to self.validators.
if 'pk' is contained in d,
__all__ is an tuple with 3 elements: strings 'MultiPartParser', 'MultiPartParserError' and 'InputStreamExhausted'.
if not,
define the method items with an argument self.
from django.core.management.color import no_style into default name space.
define the method write with 2 arguments: self and s.
get the value under the 'content-transfer-encoding' key of the disposition meta_data, substitute it for transfer_encoding.
for every base in reversed order of bases,
from collections import OrderedDict into default name space.
return boolean False.
increment weight by integer 2.
call the method imatch.group with an argument integer 1, if it evaluates to true,
open the file named filepath in read mode, with file descriptor renamed to fp perform,
if not,
if errors is true,
substitute value under 'warning' key of kwargs dictionary for warning.
append self.pointer to self.backout.
define the method __repr__ with an argument self.
derive the class RenameMethodsBase from type base class.
define private method __eq__ with self class instance and other as arguments.
if not,
use the global variable _serializers.
if 'widget' key of the kwargs dictionary doesnt exists assign it widget field of the base class of the IntegerField class value.
otherwise if child.nodeType equals to child.ELEMENT_NODE,
for every field, error_list in self.error_dict.items method return value,
call the function chain with an argument unpacked list, append name to string 'render_', and use it as the name of the attribute to get from the self object, call the result and append it to a list for every name in MEDIA_TYPES, join all the results into a string with newline separator, use the result as an argument for the call to the function mark_safe, return the result.
call the method fp.read, substitute the result for src_data.
yaml import CSafeDumper as SafeDumper into default name space.
define the method end_serialization with an argument self.
comment is an empty list.
define the method __init__ with 2 arguments: self and text.
define the function deserialize with 3 arguments: format, stream_or_string and unpacked dictionary options.
define the method find_fixtures with arguments: self and fixture_label.
if exctype is not WindowsError or string 'Access is denied' is not contained in value converted into a string,
app_list is an instance of OrderedDict class, created with an argument a tuple containing elements: app_config and None, for every app_config in return value of the method apps.get_app_configs, only if app_config.models_module is not None, and app_config is not contained in excluded_apps.
derive the class InvalidPage from the Exception base class.
define the method render with 2 arguments: self and context.
append iso_input to val.
from django.conf import settings into default name space.
substitute fields for new_class.base_fields.
if use_ssl is None substitute settings.EMAIL_USE_SSL for self.username, if not substitute use_ssl for self.use_ssl.
if _default is None
call the function locks.unlock with fd as argument.
for every attr in _moved_attributes,
call the function re.compile with 2 arguments: raw string '<(/)?([^ ]+?)(?:(\s*/)| .*?)?>' and bitwise OR performed with 2 operands, re.U and re.S, substitute the result for re_chars.
define the method open with argument self.
if package is false,
substitute bytes for binary_type.
if invalid_var_format_string is None,
if not,
define the __call__method with arguments self, unpacked list args and unpacked dictionary kwargs.
call the method self.read_limited with length of self.buffer subtracted from size as argument, add result to self.buffer, store it in result.
otherwise if vale is not an instance of ConvertingTuple and value is an instance of tuple type,
define the method encoding with arguments self and value.
return boolean True.
otherwise if second element of args equals a string '304',
if cache is an instance of BaseDatabaseCache,
define the method handle_m2m_field with arguments self, obj and field.
define the function handle_m2m with an argument value,
if not,
try,
import pytz.
from __future__ import unicode_literals into default name space.
try,
args is a list containing arg surrounded by double quotes for every arg in args.
call the function six.reraise with 3 arguments: ImproperlyConfigured, ImproperlyConfigured(msg) and third element of return value of the function sys.exc_info.
alternative_subtype is a string 'alternative'.
classmethod decorator,
define the method add_item with 17 arguments: self, title, link, description, author_email set to None, author_name set to None,
divide x by length of to_digits, convert floor value of the result to an integer, substitute it for x.
if localized_fields is not None,
call the method msgs.decode with an argument string 'utf-8', substitute it for msgs.
match rest string with self.INDEX_PATTERN regex, substitute the result for m.
define the function iter_format_modules with 2 arguments: lang and format_module_path set to None.
substitute SafeText for SafeUnicode.
from __future__ import unicode_literals into default name space.
delete all the whitespaces from ext, split it by ',' character, extend ext_list with the result.
call the method os.environ.copy, substitute the result for new_environ.
default_attrs is an dictionary with 2 initial entries: string '40' for 'cols' and string '10' for 'rows'.
define the method E with an argument self.
try,
define the method read with an argument self.
instantiate class Truncator, with an argument value, call the method chars on the result with an argument length, return the result.
substitute pubid for self.pubid.
convert value under the 'REQUEST_METHOD' key of the environ dictionary to uppercase, substitute it for self.method.
substitute msg for body_msg.
join root and filename into a file path, substitute it for old_path.
if not,
raise CommandError with an argument string 'Unknown model: %s', where '%s' is replaced with app_label and model_label, respectively.
call the function get_standard_processors, append processors to the result, for every processor is the result,
if not,
define the method __eq__ with self and other arguments:
for every ext in extensions,
default_error_messages is an dictionary with 5 initial entries: return value of the function _ called with an argument string, "No file was submitted. Check the encoding type on the form." for 'invalid', return value of the function _ called with an argument, string "No file was submitted." for 'missing', return value of the function _ called with an argument "The submitted file is empty.", for 'empty', return value of the function ungettext_lazy called with 3 arguments: string 'Ensure this filename has at most %(max)d character (it has %(length)d).', string 'Ensure this filename has at most %(max)d characters (it has %(length)d).' and string 'max' for 'max_length', and return value of the function _ called with an argument string, 'Please either submit a file or check the clear checkbox, not both.' for 'contradiction'.
if not,
if KeyError exception is caught,
if not,
call the method cursor.execute with string "SELECT cache_key, expires FROM %s WHERE cache_key = %%s" as argument, substitute the '%s' with table and list containing key, respectively.
try,
new_value is a sum of value and delta.
call the method blankout with 2 arguments: part and 'S', write the result to out.
substitute return value of call to the function _set_response_etag with response as an argument, for response.
call the self.style.MIGRATE_HEADING method, with string "Operations to perform:" as an argument, use the result as an argument for the call to the self.stdout.write method.
join missing_fields into a string separated by string ', ', use it and opts.model.__name__ to format message, substitute the result for message.
return major.
yield widget.
try,
call the mail.send method with fail_silently=fail_silently as argument.
substitute settings.FORMAT_MODULE_PATH for settings.FORMAT_MODULE_PATH.
define the function _resolve_name with 3 arguments: name, package and level.
call the function data with 3 arguments: self.year, self.month and self.day, return the result.
result is None.
from django.utils import six into default name space.
define the function assertRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
call the method parser.add_argument with string '--fake', action containing string 'store_true', dest set to string 'fake', default set to False, help containing string 'Mark migrations as run without actually running them' as arguments.
define the method as_tuple with 2 arguments: self and value.
if not,
if value is None and attr is contained in declared_fields,
default_error_messages is a dictionary with an entry, result of the call to the function _ with an argument, string 'Select a valid choice. That choice is not one of the available choices.' for 'invalid_choice'.
return value.
if evaluation of the function find_command with self.program as argument equals to None,
call the method self.split_leading_dir with an argument name, substitute the second element of the result for name.
call the method field_node.getAttribute with an argument string 'name', substitute the result for field_name.
from __future__ import unicode_literals into default name space.
for every f in post_sql_fields,
if NotImplementedError exception is caught,
set value under the 'bindAddress' key of wsgi_opts to None.
from django.db.migrations.loader import AmbiguityError into default name space.
if not,
get the element of chunks at the (i+1)-the index, assign it to the seconds2 and name2, respectively.
define the function translation with an argument language.
instantiate the TimestampSigner object with arguments key and salt set to salt, call its method sign with an argument base64, return it.
from django.conf import settings into default name space.
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
create md5 hash from string response.content in hexadecimal format, surround the hash with double quotes, and store it in the value of the dictionary response under the key 'ETag'.
return self.object_list element at index.
raise an TypeError exception with an argument string 'Level not an integer or a valid string: %r' formated with level.
if message-id' is not in header_names,
for every widget in self.widgets:,
call the method calendar.monthrange with 2 arguments: self.data.year and self.data.month, format string '%02d' with the second element of the result, return it.
call the method lineno_comment_map.setdefault with 2 arguments: t.lineno and an empty list, append t.contents to the result.
from PIL import Image into default namespace.
if p is greater or equal to integer 0,
if using_sysrandom is false,
return key_func.
substitute limit_choices_to for self.limit_choices_to.
if self.verbosity is greater or equal to integer 1,
if maxsize equals integer 0,
from django.template.smartif import IfParser and Literal into default name space.
return an empty string.
return last element of list_.
if field_name is false,
decorator method register.tag with an argument 'block',
derive the class CacheClass from the base class LocMemCache.
call the method nodelist.get_nodes_by_type with an argument ExtendsNode, if it evaluates to true,
match the rawdata from the position i+1, with tagfind pattern, assign the result to the match.
define the method _ipython with an argument self.
try,
if token equals a string "not" and i incremented by 1 is lesser than l, and element of tokens at i incremented by 1 index equals a string "in",
append the tempdir to self.paths_to_remove.
call the method to_python with an argument value from the base class of the DateTimeField class, substitute the result for result.
filter_raw_string is a raw string "^(?P<constant>%(constant)s)|^(?P<var>[%(var_chars)s]+|%(num)s)| (?:\s*%(filter_sep)s\s* (?P<filter_name>\w+)(?:%(arg_sep)s(?:(?P<constant_arg>%(constant)s)|(?P<var_arg>[%(var_chars)s]+|%(num)s)))?)", where 'constant' is replaced with constant_string, 'num' with raw string '[-+\.]?\d[\d\.e]*', 'var_chars' with string "\w\.", 'filter_sep' with result of the function re.escape called with an argument FILTER_SEPARATOR, anbd 'arg_sep' with result of the function re.escape called with an argument FILTER_ARGUMENT_SEPARATOR.
return nothing.
call the function add_to_builtins with an argument string 'django.template.defaultfilters'.
substitute v for value under the k-th element of m key of _ dictionary.
return an empty string.
call the method handler.handle_raw_input with 5 arguments: self._input_data, self._meta, self._content_length, self._boundary, and encoding, substitute the result for result.
define the function deactivate.
msg is a tuple containing one initial entry: a string "WSGI application '%(app_path)s' could not be loaded; Error importing module: '%(exception)s'", where '%(app_path)s' is replaced by app_path and '%(exception)s' is replaced by e.
call the method threading.RLock, substitute the result for self._lock.
tt is a tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the method dt.weekday, ingeter 0 and integer 0.
extend new_second_item with item.
substitute level for self.level.
exit the program with failures converted to boolean as a message.
call the method self._get_to_python with an argument pk_field, substitute the result for to_python.
if 'empty_value' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value, if not, sself.empty_value is an empty string.
return value under the DEFAULT_PALETTE key of the PALETTES dictionary.
call the method self.add_handlers with 2 arguments: logger and handlers.
if limit_choices_to is not None,
skip this loop iteration.
if self.is_reversed is true, substitute reversed_text is an string ' reversed', if not, reversed_text is an empty string.
define the method render with 2 arguments self and context.
raise ValidationError with 2 arguments: return value of the function _ called with an argument string, 'ManagementForm data is missing or has been tampered with' and code as a string 'missing_management_form'.
define the method has_key with 2 arguments: self and key.
define the method lists with an argument self.
define the function linebreaks_filter with 2 arguments value and autoescape set to None.
self.verbose_name_plural is a string 'cache entries'.
call the self.setup_environ method.
call the method datetime.datetime.strptime with 2 arguments: return value of the function force_str called with an argument value, and input_format, substitute the result for v.
define function smart_bytes with s, encoding set to string 'utf-8', strings_only set to False and errors set to string 'strict', as arguments.
substitute chr for int2byte.
response.content is bytes empty string.
TEMPLATE_FRAGMENT_KEY_TEMPLATE is a string 'template.cache.%s.%s'.
return an empty list.
call the method logging.Formatter with 2 arguments: fmt and dfmt, substitute the result for result.
call the method loader.get_migration with arguments node_app and node_name, extend the migration.merged_operations with the operations field of the result.
call the function force_str with an argument url, use the result as an argument for the call to the function unquote, substitute the result for url.
if domain is true and return value of the function validate_host called with 2 arguments: domain and settings.ALLOWED_HOSTS, evaluates to true,
define the function get_resolver with an argument urlconf.
call the function ungettext with 3 arguments: singular, plural and number, return the result.
call the function import_module with an argument project_name.
if KeyError exception is caught,
content_subtype is a string 'plain'.
if six.PY2 is true,
substitute self.none_value for self.year_none_value.
define the method __ne__ with 2 arguments: self and other.
define the method nud with 2 arguments: self and parser.
substitute date_check elements to uclass, lookup, field and unique_for, respectively.
define the method eval with 2 arguments: self and context.
call the function unicodedata.normalize with 2 arguments: string 'NFC' and self._wrapped, substitute the result for text.
self._post_parse_error is boolen False.
return self.
if c doesnt have an attribute '__call__' and types has an 'ClassType' attribute and type of c is not equal to types.ClassType,
raise an TypeError exception with an argument msg.
if OSError or IOError exceptions were raised,
return an empty string,
if value is an instance of datetime and settings.USE_TZ if use_tz is None else use_tz and call to the function is_naive, with an argument value evaluates to false, and if 'convert_to_local_time' attribute of value object doesnt exists, or is it does is boolean True, should_convert is boolean True, otherwise is boolean False.
define the function floatformat with 2 arguments text and arg set to integer -1.
if roots is false,
open file named file_or_path for reading, store the file object handle in file.
derive the class RegexURLPattern with LocaleRegexProvider as base class.
define the method resolve_error_handler with arguments self and view_type.
substitute whitelist for self.domain_whitelist.
define the method send_messages with arguments self and email_messages.
if OSError exception is caught,
define the method __delitem__ with 2 arguments: self and key.
derive the class DefusedXmlException from the ValueError base class.
decrement self.waiting_writers by integer 1,
define the function find_filter with 2 arguments: self and filter_name.
call the method operator.attrgetter with an argument _meth_self, substitute the result for get_method_self.
call the method add_arguments from the base class of the class Command, with an argument parser.
substitute data.size for file_name.
return None.
if self.id exists, convert self.id to a string, surround it with round brackets, substitute id for it, otherwise id is an empty string.
delete name attribute of the _MovedItems object.
from django.utils.translation import ugettext as _ into default name space.
write string "No conflicts detected to merge." to self.stdout stream.
for every o in opts,
call the method chunk.find with an argument bytes string '\r\n\r\n', substitute the result for header_end.
call the method template_file.read, substitute it for content.
from django.utils.translation import ugettext as _ into default name space.
call the method self.empty_block_tag with an argument token.
call the method six.moves.input with an argument string "Do you wish to proceed? [yN] ", substitute the result for answer.
raise an ExternalReferenceForbidden exception with arguments context, base, sysid and pubid.
call the translation.get_language function, substitute the result for the value under the 'LANGUAGE_CODE' key of the context_extras dictionary.
if delta is smaller than integer 0,
define the method save_new with 3 arguments: self, form and commit set to boolean True.
define the function get_library with an argument library_name.
return fixture_files.
raise an BadSignature exception with an argument string 'No "%s" found in value', where '%s' is replaced by self.sep.
try,
while RUN_RELOADER is true.
if host exists substitute it for self.host, if not substitute settings.EMAIL_HOST for self.host.
return lookup_view.
if self.id is contained in settings.SILENCED_SYSTEM_CHECKS return boolean True, False otherwise.
from django.forms.formsets import everything into default name space.
from unittest import import everything.
if sys.version_info is greater than or equal to a tuple with 3 elements: integers 2, 7 and 2, respectively,
from django.utils.encoding import smart_text into default name space.
if text is true format with it and RESET a string '%s\x1b[%sm', if not format it with an empty string and RESET, substitute the result for text.
call the method connection.creation.sql_create_model with arguments model, style and known_models, substitute the result for output and references.
if second element of k is None,
return result.
create dictionary out of the unpacked dictionary options, using defaults.__dict__ as a mapping function, substitute the result for defaults.
if opname is not contained in roots,
try,
from __future__ import unicode_literals into default name space.
self._choices and self.widget.choices are assigned value converted into a list.
substitute tzinfo for value under the 'tzinfo' key of the kw dictionary.
call the method self.__text_cast, return the result.
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
if filename is true,
from django.utils.six.moves import _dummy_thread as thread into default name space.
define the method save, with 3 arguments: self, save_m2m set to boolean True and using set to boolean True.
call the middleware_method with request, callback, callback_args and callback_kwargs as the arguments, substitute the result for response.
value under the cache_key key of the _format_cache dictionary is None.
self._errors is None.
define the method  main_help_text with arguments: self class instance and commands_only set to boolean False.
call the method match.groups, substitute the result for args.
call the method handler.addQuickElement with 2 arguments: string 'updated' and result of the function rfc3339_date, called with an argument result of the method self.latest_post_date.
do nothing.
define the method is_serious with argument self.
define function dictitem with s as an argument.
raise an AttributeError exception.
import module sys.
raise an AttributeError with an argument attr.
if not,
define the method _get_image_dimensions with self class instance as the argument.
return output.
for every template_dir in template_dirs,
try,
if not,
for every func and args in self.filters,
if self.verbosity is greater or equal to integer 2,
if not,
write msgs to fp.
find position of '-' in the index of the language, substitute the result for p.
convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'false', 'no' or 'f',
raise an TemplateSyntaxError exception with an argument string "next-to-last argument to 'regroup' tag must be 'as'".
call avoid_wrapping function with name2 modulus count2 as argument, call the ugettext with ', ' as argument, add previous 2 results, increment variable result by it.
return string "[Didn't have permission to include file]".
if app_config.models_module is None,
return kwargs.
define the method clean with arguments self and value.
sort fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x.
call the method parser.add_argument with 3 arguments: string 'directory', nargs set to '?' and help set to string 'Name of the application or project.'.
define the method __add__ with 2 arguments self and rhs.
yield string 'from %s import models' % self.db_module as the result, where "%s" is replaced with self.db_module.
if self._validate_unique is true,
define the method copy with an argument self.
if primary_keys is true,
derive the class MultipleChoiceField from the base class ChoiceField class.
call the function table_name_filter with an argument table_name, if it evaluates to true,
update a dictionary with an entry v converted to an integer for k, for every k and v in result of the function six.iteritems, called with an argument kw, only if v is not None, substitute the result for kw.
if out_log is true,
raise an TemplateSyntaxError exception with an argument string "Only 'silent' flag is allowed after cycle's name, not '%s'.", where '%s' is replaced with last element of args.
try,
if not,
get the type of form object, return an instance of resulting class created with 3 arguments: class_name, tuple with an element form, and form_class_attrs.
try,
return a string "%s%02d%02d" formated with sign, floored result of the division of seconds by integer 3000, reminder of the division of floored result of division of seconds by 60, by integer 60.
get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
get value under 'target' key of config dictionary, use it as a key to get the value from the dictionary, under the 'handlers' key of self.config dictionary, substitute the result for value under 'target' key of config dictioanry.
if AttributeError or UnsupportedOperation exception occurred.
call the function quote with 2 arguments: url and safe as bytes string '!*\'();:@&=+$,/?#[]~', substitute the result for url.
call the method parser.delete_first_token.
call the function force_bytes with arguments value and self._charset, return the result.
if token_string starts with VARIABLE_TAG_START,
if level is not None,
import module ssl.
from django.utils.module_loading import import_string into default name space.
self.new_objects is an empty list.
substitute instance._meta for opts.
if self.isolated_context is true,
import pylibmc.
if LookupError or TypeError exceptions are caught,
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
return None.
call the method self.get_template_sources with 2 arguments template_name and template_dirs, for every filepath in the result,
define the method __init__ with arguments self, stream and boundary.
if not,
otherwise if name is not None and filter_func is not None,
join base an unpacked list paths into a string, get the absolute path in unicode representation of the result, substitute the result for final_path.
strip t.contents from the left side of whitespaces, if the result starts with TRANSLATOR_COMMENT_MARK,
if self.connection is None,
choices is a tuple with 3 elements: tuple with 2 elements: string '1' and return value of the function ugettext_lazy, called with an argument string 'Unknown', tuple with 2 elements: string '2' and return value of the function ugettext_lazy, called with an argument string 'Yes' and tuple with 2 elements: string '3' and return value of the function ugettext_lazy, called with an argument string 'No'.
if other is an instance of Promise,
streaming_content.setter decorator,
convert new_name to a string and append string 'field' to it, substitute the result for new_name.
write 79 '-' characters into self.stream file stream.
call the method s.render with 3 arguments: field string formated with name, val and local_attrs, substitute the result for select_html.
substitute obj for self.data.
call the function six.iteritems with an argument kwargs, for every key and value in the result,
if TypeError, AttributeError, KeyError or ValueError exceptions are caught,
define the method add_filters with 3 arguments: self, filterer and filters.
raise an TemplateSyntaxError exception with an argument string "Second (optional) argument to %s tag must be 'parsed'", where '%s' is replaced with first element of bits.
if not,
define the method handle with self class instance and dictionary options as the arguments.
from django.utils._os import rmtree_errorhandle into default name space.
call the method parser.add_argument with 6 arguments: string '-n', string '--natural', action is string 'store_true', dest is string 'use_natural_keys', default is boolean False and help is a string 'Use natural keys if they are available (deprecated: use --natural-foreign instead).'.
decorator decorator.
if language is contained in _DJANGO_DEPRECATED_LOCALES,
otherwise if count is greater than integer 1,
define the function next_space_index with 2 arguments: self and subject.
get _assertCountEqual attribute of the self object, call the result with 2 arguments: unpacked list args, and unpacked dictionary kwargs, return the result.
__all__ is an tuple containing string 'SelectDateWidget'.
_trans is an instance of Trans class.
define the method __init__ with 3 arguments: self, attrs set to None and render_value set to boolean False.
if current is an instance of BaseContext and bit attribute of type of current is true,
return number.
if not,
import module socket.
from django.utils.http import cookie_date into default name space.
substitute s1 for s.
import module warnings.
yield string 'year' as an return value of the generator.
define the method non_field_errors with an argument self.
define the method _raw_value with 2 arguments: self and fieldname.
join the current working directory and name into a file path, substitute it for top_dir.
if only_initial is false,
define the function wrapper with list args, and dictionary pair of values kwargs as arguments.
call the function cache.close.
if KeyboardInterrupt exception is caught,
property decorator,
divide value by max_value, multiply the result with max_width, substitute it for ratio.
call the method token.split_contents, substitute the result for bits.
from email.header import Header into default name space.
if urlconf_name is true,
call the method context_instance.push with an argument dictionary, with the result perform,
take all but the length of path_info last elements of script_url, substitute it for script_name.
if new_mod is None,
call the method self.check_test with an argument value, if it evaluates to true,
call the method signal.signal with signal.SIGTTOU and old_handler, as arguments.
raise an exception.
if extra_context is false,
if app_label is not contained in executor.loader.migrated_apps,
sys.stderr is an instance of NullDevice class.
from django.utils import six into default name space.
if KeyError exception is caught,
derive the class UploadFileException from the Exception base class.
logger.disabled is boolean True.
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
define the method cfg_convert with 2 arguments: self and value.
d is an instance of Decimal class created with an argument input_val.
call the function sys.getfilesystemencoding if it evaluates to true, substitute its result for fs_encoding, otherwise call the function sys.getdefaultencoding and substitute its result for fs_encoding.
call the handle_filed method of the base class of the Serializer class, with arguments obj and field.
try,
raise an TemplateDoesNotExist exception with an argument template_name.
call the method handler.addQuickElement with 2 arguments: string 'published' and result of the function rfc3339_date, called with an argument value under the 'pubdate' key of the item dictionary.
from django.utils.six.moves.urllib.parse import quote, unquote, urlsplit and urlunsplit into default name space.
set the value under the 'bindAddress' key of the wsgi_opts dictionary to a tuple containing 2 elements: value under the 'host' key, of the options dictionary and value under the 'port' key of the options dictionary converted into an integer.
define the method save with 2 arguments: self and commit set to boolean True.
join management_dir and string 'commands' into a file path name, substitute it for command_dir.
remove kwargs dictionary entry under the 'extra_context' key, if it exists substitute it for self.extra_context, if not self.extra_context is an empty dictionary.
append new_filenames to _cached_filenames.
import pickle.
skip this loop execution.
define the method __init__ with 7 arguments: self, request, dict_ set to None, processors set to None, current_app set to None, use_l10n set to None and use_tz set to None.
return self.DSTDIFF.
call the method self._iteritems, for every k and v in the result,
if max_age is not None,
get the bit attribute of current object, substitute it for current.
if not,
call the method self.regex.search with an argument path, substitute the result for match.
self._ordering is an empty list.
call the smart_text function with an argument token, return the result.
return translation.
call the method connection.creation.sql_destroy_indexes_for_model with arguments model and style, extend the output with the result.
call the method dig2.digest, substitute the result for u.
otherwise if value is an instance of datetime.datetime,
from django.core.exceptions import ImproperlyConfigured and ViewDoesNotExist into default name space.
return boolean False.
try,
if expanded_template is a directory,
return source and display_name.
derive the class TemplateSyntaxError form the base class Exception.
call the function find_template_loader with an argument loader_name, substitute the result for loader.
convert first 2 elements of django.VERSION into a strings, join them together, separated by a '.', substitute the result for docs_version.
from django.template.debug import DebugLexer and DebugParser.
if value is false and self.required is true,
if not,
call the method self.flo.read with an argument self.chunk_size, substitute the result for data.
call the function _trans.templatize with 2 arguments: src and origin, return the result.
data is an empty dictionary.
return text.
substitute file_size for self.file.size.
if can_fail is true,
parsed is boolean True.
from django.template.base import compile_string, resolve_variable, unescape_string_literal and generic_tag_compiler.
if last element of parts is contained in self.serialization_formats,
import module warnings.
define the method __init__ with 5 arguments: self, var, name, nodelist and extra_context set to None.
if string 'id' is contained in self.attrs,
with lock,
call the function force_text with an argument top_errors, format error_row with it, insert it at the beginning of output.
otherwise if name is not None and compile_function is None,
if form._meta.fields is an instance of tuple type,
media is an instance of Media class.
define lambda function that returns self.file.readlines field, use it as an argument for property function, put the result in readlines.
if labels is not None,
import module warnings.
get the element with minimal value between the value under the TOTAL_FORM_COUNT key of self.management_form.cleaned_data dictionary, and self.absolute_max, return the result.
if is_relation,
call the method self.replace_header with argument string 'Content-Type', 'text/%s; charset="%s"', where '%s' symbols are replaced by: subtype and charset, respectively.
do nothing.
from django.utils.six import StringIO into default name space.
substitute type.__call__ for __call__.
if ImportError, IndentationError, NameError, SyntaxError, TypeError or AttributeErrorexception is caught,
define the function _unpack_ipv4 with an argument ip_str.
try,
if confirm equals string 'yes',
define the method create_token with 4 arguments: self, token_string, source and in_tag.
define the method _clean_fields with an argument self.
return attr.
import module errno.
if self.base_url is None,
get the value under the 'database' key of the options dictionary, substitute it for self.database.
inner_text is an empty list.
define the method __call__ with arguments self and value.
if 'HTTP_HOST' is contained in self.META,
if call to the method self.L evaluates to true, and result of the call to the method self.data.month is greater than integer 2,
call the get_valid_filename with argument name, return the result.
return an instance of a class IfChangedNode, created with 3 arguments: nodelist_true, nodelist_false and unpacked list values.
if value is false or for every v in value every v is contained in self.empty_values,
try,
raise a ValidationError exception with 2 arguments: return value of the function _ called with an argument string 'Enter a valid IPv4 or IPv6 address.', and code set to string 'invalid'.
if not,
if context is an instance of Context class.
for every key and value in parse_gsl with query_string is it exists or an empty string if not and keep_blank_values set to boolean True.
call the method self.set_cookie with 5 arguments: key, max_age as integer 0, path as path, domain as domain, expires as a string 'Thu, 01-Jan-1970 00:00:00 GMT', return the result.
lineno_comment_map is an dictionary.
if ValueError exception is caught,
call the method self.save_existing with 3 arguments: form, obj and commit as commit, append the result to saved_instances.
call the method app_config.get_model with an argument model_label, substitute the result for model.
if not,
call the method self._stream.unget with an argument unused_char.
substitute chunk_size for self.chunk_size.
if value is boolean True,
if message is not None
if not,
self.timezone is None.
define the method has_key with self class instance, key and version defaulting to None as arguments.
do nothing.
if six.PY3 is true,
call the function base.DeserializedObject with obj and m2m_data as arguments, yield the result as the generator return value.
if any element of self.dicts is true, return boolean True, otherwise return boolean False.
call the function timedelta with an argument integer 0, return the result.
call the function BytesIO, substitute the result for self.file.
iterator is None.
do nothing.
call the function force_text with an argument url, return the result.
from __future__ import unicode_literals into default name space.
call the function ngettext with 3 arguments: singular, plural and number, use the result as an argument for the call to the force_text, return the result.
match string s with regex IDENTIFIER, substitute the result for m.
call the function warnings.warn with 3 argument: string "AppCommand.handle_app() is superseded by AppCommand.handle_app_config().", RemovedInDjango19Warning and stacklevel set to integer 2.
if first and second element of sys.version_info are both equal to integer 3,
define the method __getitem__ with an argument self.
if to_lower is true,
try,
if kwds is true,
line is an empty string.
from django.utils.encoding import force_st into default name space.
date_data is a tuple with an entry: attribute lookup from the value under the unique_for key of the form.cleaned_data dictionary.
import module os.
define the method add_arguments with arguments self and parser.
raise CommandError with an argument string 'Unknown app in excludes: %s', where '%s' is replaced with exclude.
derive the class Choice from list base class.
if not,
append app_output to output.
if call to the _has_expired method with argument key evaluates to boolean False,
substitute gettext for ugettext.
pos and last are integer 0.
derive the class TemplateDoesNotExist form the base class Exception.
except ImportError.
combined is an instance of Media class.
_iterlists is a string "iterlists".
if not,
output_transaction is boolean True.
from django.core.management.base import BaseCommand into default name space.
convert to integer value of dictionary cc under the key 'max-age', if it is smaller than the value of dictionary kwargs under the key 'max_age', substitute kwargs value under the key 'max-age' by it.
self._fname is None.
from django.db.models.fields import Field as ModelField.
skip this loop iteration.
append att_name to used_column_names list.
append first element of bits to 'end'. substitute the result for end_tag.
remove k element from self.keyOrder dictionary.
if self.timezone is true,
import module warnings.
call the function _check_test_runner with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
substitute self.default_locale_path for locale_dir.
call the method self.indent with argument integer 1.
call the method fp.write with an arguments src_data.
return the second element of the return value of the call to the self._det_image_dimensions method.
if StopIteration exception,
return boolean False.
settings.BASE_DIR.
try,
return nothing.
substitute basestring for string_types.
if command.use_argparse is true,
define the method common_logger_config with 4 arguments: self, logger, config and incremental set to boolean False.
add model to created_models set.
remove entry at the key key of the attrs dictionary.
if not,
append migration to merge_migrations.
remove element under 'stream' key of kwargs dictionary, substitute the result for value under 'strm' key of kwargs dictionary.
define the __init__ method with argument self.
call the method parser.add_option with 2 arguments: string '--pythonpath' and help set to string 'A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".'.
writer is instance of MigrationWriter class, created with new_migration argument.
define the method __init__ with 9 arguments: self, choices set to an empty tuple, required set to boolean True, widget set to None, label set to None, initial set to None, help_text set to an empty string, unpacked list args and unpacked dictionary kwargs.
call the method template.render with an argument context, substitute it for content.
if six.PY2 is boolean True,
call the mimetypes.guess_type with an argument filename, assign the result to the mimetype and _, respectively.
define the method __nonzero__ with argument self.
call the function self._resolve_lookup with an argument context, substitute the result for value.
if 'fields' attribute of Meta object is None and 'exclude' attribute of Meta object is None,
if self.input_type equals string 'hidden' and self has an attribute 'input_type', return boolean True, otherwise return boolean False.
return self._size.
_supported is None.
opt_dict is an dictionary with 5 elements: '1' for 'bold', '4' for 'underscore', '5' for 'blink', '7' for 'reverse', and '8' for 'conceal'.
raise an MultiPartParserError with an argument string 'Invalid Content-Type: %s', where '%s' is replaced with content_type.
call the method connection.introspection.get_relations with 2 arguments cursor, table_name and substitute the result for relations.
derive the class SafeMIMEMultipart from the MIMEMixin and MIMEMultipart base class.
call the method tag_re.finditer with an argument self.template_string, for every match in result,
if value is an instance of six.string_types and value is not equal to ALL_FIELDS,
append string '.' to result.
property decorator,
append string 'Field renamed to remove unsuitable characters.' to field_notes.
if not,
raise an ImproperlyConfigured exception with argument string 'Could not create directory for saving email messages: %s (%s)', replace '%s' with self.file_path and err, respectively.
self.registered_checks is an empty list.
substitute if _locs_ is None for _locs_.
raise an ValueError exception with an argument string 'Unable to configure filter %r: %s' formated with name and e.
call the encode function on the Header class instance, created with argument val, substitute the result for val.
call the function _ with an argument string 'a.m.', return the result.
call the method mutable substitute for self._mutable.
return error_dict.
multiply offset.days with 86400, add offset.seconds to the result, return the result.
databases is a list containing 2 elements: self.using and None.
return self.
if old_handler is not None,
if func is None,
raise an exception.
call the method date.tzinfo.utcoffset with an argument date, substitute the result for offset.
if cache_timeout is lesser than integer 0,
return the length of self.object_list.
finally perform,
derive the class ModelForm from the base class in the return value of the method six.with_metaclass, called with 2 arguments: ModelFormMetaclass and BaseModelForm.
decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000.
replace '%s' in a string "Error: %s" with error_text, write it to self.stderr.
substitute self for block.
from django.template.base import ALLOWED_VARIABLE_CHARS, BLOCK_TAG_END, BLOCK_TAG_START, COMMENT_TAG_END, COMMENT_TAG_START, FILTER_ARGUMENT_SEPARATOR, FILTER_SEPARATOR, SINGLE_BRACE_END, SINGLE_BRACE_START, TOKEN_BLOCK, TOKEN_COMMENT, TOKEN_TEXT, TOKEN_VAR, TRANSLATOR_COMMENT_MARK, UNKNOWN_SOURCE, VARIABLE_ATTRIBUTE_SEPARATOR, VARIABLE_TAG_END, VARIABLE_TAG_START, filter_re and tag_re.
return FASTCGI_HELP.
if zlib.error as e exception is raised,
call the function dict with an argument tuple with 2 elements: o.pk and o, for every o in result of the method self.get_queryset, substitute the result for self._object_dict.
if lookup is false,
get the value under the 'exclude' key of the options dictionary, substitute the result for exclude.
define the method reset with an argument self.
otherwise if bytes is smaller than TB,
return an empty list.
if not,
define the function get_template_from_string with 3: source, origin set to None and name set to None.
if value is false or value is not an instance of list or tuple types,
raise a ValidationError exception with arguments self.message and code set to self.code.
call the method m.groups, use the first element of the result as key for obtaining value from d dictionary,
return a list containing 2 elements: return value of the value.date method and return value of the replace method, called with the argument microseconds set to integer 0, on the result of the method value.time.
define the method ext_convert with 2 arguments: self and value.
return None.
if protocol is not equal to string 'both' and unpack_ipv4 is true,
use global variable templatetags_modules.
for every migration in merge_migrations,
errors is a string "strict".
define the method validate with arguments self and value.
if self.render_value is false,
for every obj in objects,
try,
define the method validate with arguments self and value.
if cls is false,
define the method ordered_forms with an argument self.
call the handle function with dictionary pair of elements options from the base class of the class Command.
if squash is false,
call the sql_flush function with self.style, connections under the key with the value of options dictionary under the 'database' key,
if language_code is not contained in self._regex_dict,
get the absolute path of the __file__, repo_dir is name of the directory two leveles above it.
try,
define the method content with an argument self.
call the method field.clean with an argument value, substitute the result for value.
get 'value' attribute of the _active object, if it exists return it, if not, call the function get_default_timezone and return the result.
substitute number for value under the 'number' key of the kwargs dictionary.
define the method validate with arguments self and value.
call the __init__ method from the base class of the HttpResponseRedirectBase class, called with arguments: unpacked list args, and unpacked dictionary kwargs.
call the function mark_safe with an argument string ' selected="selected"', substitute the result for selected_html.
return a string '"%s"' formated with etag, in which every occurrence of '\\' is replaced with '\\\\' and every occurrence of '"', is replaced with '\\"'.
return found.
substitute i-th element of self.forms for form.
if response has an attribute named 'render' and response.render is a callable function,
return obj.
return an instance of LoaderOrigin class, created with 4 arguments: display_name, loader, name and dirs.
if an exception of the type UnicodeDecodeError, renamed to e, is caught,
get self.to_field attribute of self.parent_instance object, substitute it for value under the 'initial' key of the kwargs dictionary.
intrans is boolean False.
substitute _iterkeys for keys.
if template_dirs is true,
for every bit in bits,
from datetime import datetime into default name space.
if Exception, renamed to e, exception is caught,
substitute SafeBytes for SafeString.
if fk_name is true,
call the function is_protected_type with an argument value, if it evaluates to true,
from __future__ import absolute_import into default name space.
streaming is boolean True.
call the method add_fields from the base class of the class BaseInlineFormSet, with 2 arguments: form and index.
from django.core.management.sql import sql_delete into default name space.
self.content_type_extra is None.
define the method splitext with arguments self and the_path.
self.xml is a instance of SimplerXMLGenerator class created with 2 arguments: self.stream and value under the 'encoding' key of the options dictionary, if the key doesnt exists use settings.DEFAULT_CHARSET instead.
call the function re.compile with 2 arguments: raw string "((?:[^\s'"]*(?:(?:"(?:[^"\\]|\\.)*" | '(?:[^'\\]|\\.)*')[^\s'"]*)+) | \+)", and re.VERBOSE, substitute the result for smart_split_re.
join template_dirs elements into a string, separated by '|', use it as an argument for the call to the function force_bytes, use the result as the argument for the call to the function hashlib.sha1, call the hexdigest method on the result, join template_name and previous final result into a string, separated with '-', return it.
define the method as_ul with an argument self.
from django.utils import six into default name space.
update messages dictionary with error_messages, if it exists, if not don't update it.
return forms.
call the get_major_version wit version as argument, store the result in major.
try,
substitute connection for self.connection.
if not,
call the method t.render with an argument, instance of Context class, created with an argument dictionary, return the result.
get attr attribute from the _module object, substitute it for value.
concatenate name and string '_id', return it.
call the function avoid_wrapping with an argument value, return the result.
raise an ValidationError with 3 arguments: value under the 'max_decimal_places' key of the self.error_messages dictionary, code set to string 'max_decimal_places' and params set to a dictionary with an entry: self.decimal_places for 'max'.
break the loop execution.
call the method value.encode with an argument self._charset, use the result as an argument for the call to the bytes function, return the result.
call the method final_output.extend with an argument output.
raise an ValueError exception with an argument string 'Unable to configure root logger: %s' formated with e.
call the method new_file from the base class of the TemporaryFileUploadHandler class with arguments: file_name, unpacked list args and unpacked dictionary kwargs.
call the method self.xml.addQuickElement with an argument string 'None'.
call the function zlib.decompress with an argument data, substitute the result for data.
for every k2 and v2 in v,
for every path in data,
return the content field of the base class of the class SimpleTemplateResponse.
define the method handle with self class instance, list of arguments args and options dictionary as the arguments.
set the file pointer at the beginning of the self.file file.
if i is greater than or equal to the result of the method self.initial_form_count, and call to the method form.has_changed evaluates to false,
define the method __str__ with an argument self.
if characters '\n' or '\r' are contained in val,
return size of the image that was fed to the parser p.
try,
return id_.
convert value to an string and substitute it for value.
call the method bad_app_labels with an argument app_label,
yield ch and boolean False.
context_extras is an empty dictionary.
substitute self.choices for self.widget.choices.
define the function configure_logging with 2 arguments: logging_config and logging_settings.
if self.verbosity is greater or equal to integer 1,
LANGUAGE_SESSION_KEY is an string '_language'.
domain_whitelist is a list containing string 'localhost'.
gettext._translations is an empty dictionary.
from django.forms.formsets import BaseFormSet and formset_factory into default name space.
return s.
value is an empty string.
sum return value of the function call time.time() and cache_timeout, use it as an argument for function call of http_date, and substitute the return value for value under the key 'Expires' of dictionary response.
substitute context for current.
return form.
define the method fetch_command, with arguments self and subcommand.
define the add_arguments with arguments self and parser.
if DEFAULT_CACHE_ALIAS is not contained in settings.CACHES,
substitute model._base_manager for objects.
questioner is an instance of a InteractiveMigrationQuestioner class, created with an argument: defaults set to dictionary with entry: boolean True for 'ask_merge'.
call the method __deepcopy__ with an argument memo, from the base class of the class MultiValueField, substitute the result for result.
handler is an instance of SimplerXMLGenerator class, created with 2 arguments: outfile and encoding.
otherwise if value under the 'method' key of optins dictionary equals to string 'thread' or 'threaded',
raise an ValueError exception with an argument string 'Unable to set target handler %r: %s', formated with value under 'target' key of config dictionary and e.
call the method _construct_form from the base class of the class BaseModelFormSet, with 2 arguments: i and unpacked dictionary kwargs.
define the method __repr__ with an argument self.
raise an exception.
BLOCK_TAG_START is a string '{%'.
origin is an instance of StringOrigin class created with an argument template_string.
if matches is false,
if header_end equals integer negative 1,
return lang_code.
if value is None,
call the method unlink on self with self.name as the argument.
if key_prefix is None,
call the method self.error with 2 arguments: token and string "Empty variable tag", return the result.
derive the class Command from the base class BaseCommand.
derive the class WithNode from Node base class.
define the method generic_tag_compiler with 9 arguments: parser, token, params, varargs, varkw, defaults, name, takes_context,
if not,
self.GET is an instance of QueryDict class created with an argument mutable set to boolean True.
otherwise if length of bits equals integer 6,
from django.template import Lexer, TOKEN_TEXT, TOKEN_VAR, TOKEN_BLOCK, TOKEN_COMMENT and TRANSLATOR_COMMENT_MARK.
define the initialization method __init__, with self instance of this class, convert_charrefs set to boolean False, and dictionary of arbitrary length **kwargs as arguments.
call the function debug.technical_404_response with request and e as arguments, assign the result to response.
do nothing.
if TypeError exception is caught,
substitute name for self.name.
if not,
call the function number_format with 2 arguments: value and use_l10 as use_l10n, return the result.
try,
instantiate ValidationError class with an argument self.data, return its field error_list.
kwargs is an empty dictionary,
if self.var is an instance of Variable class,
do nothig.
define the function select_template with 2 arguments: template_name_list and dirs set to None.
call the function exhaust with an argument field_stream.
from django.utils.six.moves import xrange into default name space.
call the method fp.getvalue, return the result.
try,
call the self.domain_regex.match method with an argument domain_part, if it evaluates to true,
call the method connection.creation.sql_destroy_model with arguments: model, references_to_delete and style, extend with the result the list output.
5 for 'saturday' and 6 for 'sunday'.
break from the loop execution,
define the method enter_command with 3 arguments: self, token and msg.
if call to the method finder.find_module with an argument name evaluates to true,
call the method block_context.add_blocks with an argument blocks.
substitute last four elements of base for base.
get the value under the key 'database' of the options dictionary, use it as a index to get an element from connections, substitute it for connection.
try,
call the method self.make_bytes with an argument content, append it to self._container.
if fixture_name is an absolute file path,
ISO_INPUT_FORMATS is a dictionary with 3 entries: tuple with an element string '%Y-%m-%d' for 'DATE_INPUT_FORMATS', tuple with 3 elements: strings '%H:%M:%S', '%H:%M:%S.%f' and '%H:%M' for 'TIME_INPUT_FORMATS', tuple with 4 elements: strings '%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M:%S.%f', '%Y-%m-%d %H:%M' and '%Y-%m-%d' for 'DATETIME_INPUT_FORMATS'.
define the method content with self and value.
if not,
call the method to_python with an argument value from the base class of the TimeField class, return the result.
return plist.
substitute empty bytes string for self.buffer.
if UnicodeError exception is caught,
substitute RAW for TYPE.
if buf is false,
return self.empty_value.
define the method close with an argument self.
define the function escapejs_filter with an argument value.
if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
call the method self.style.MIGRATE_HEADING with an argument string "Optimizing...", write it to self.stdout.
call the method writer.as_string, write the result to file fh.
define the method __init__ with 3 arguments: self, input_date_formats set to None, input_time_formats set to None,
call the method parser.add_option with 5 arguments: string '--no-color', action is string 'store_true', dest is string 'no_color', default is boolean False, and help is a string "Don't colorize the command output.".
if six.PY2 is true,
call the method self.nodelist_true.render with an argument context, assign the result to compare_to and nodelist_true_output.
get the value under the 'tags' key of the options dictionary, if it exists substitute it for tags, if not, tags is None.
if template doesnt have a 'render' attribute,
return first element of key.
call the function to_locale with an argument lang, substitute the result for locale.
call the function re.compile with an argument raw string "^((?:'[^']*'|[^'])*?)--.*$", substitute the result for comment_re.
return boolean False.
from django.conf import settings into default name space.
replace every occurrence of '\\' in tok with 'U', substitute the result for tok.
append string ');' to full_statement.
call the method self._should_delete_form with an argument, if it evaluates to true,
if is_templatized is true,
self.POST is an instance of QueryDict class created with an argument mutable set to boolean True.
call the function ungettext with unpacked dictionary msgs_with_ctxt, substitute the result for result.
get the absolute file path of the expanded_template, substitute it for absolute_path.
call the method zfile.close.
define the method lex with 2 arguments self and text.
define the function rfc3339_date with an argument date.
call the method self.configure_root with 2 arguments: root and boolean True.
call the connection.introspection.table_names with tables as argument, store the result in seen_models.
call the function deactivate_all.
otherwise if value is not an instance of list ot tuple type,
substitute DEFAULT_PORT for self.port.
define the function get_ns_resolver with arguments ns_pattern and resolver.
define the method __repr__ with an argument self.
i is integer 0.
return boolean False.
 Creating table %s\n" as argument, with all occurrences of '%s' replaced with model._meta.db_table.
if result is not None,
define the method __init__ with 2 arguments: self and content.
call the method self.xml.endElement with an argument string 'natural'
define the function check_for_language with an argument lang_code.
remove entry under the 'tzinfo' key of the kw dictionary, substitute it for tzinfo.
if self.__language equals settings.LANGUAGE_CODE,
from django.apps import apps into default name space.
import module datetime.
define the method write with 2 arguments: self and content.
define the method __init__ with 4 arguments: self, target, expression and var_name.
return a list with an element tuple with 2 elements: an empty string and an empty list.
get attribute 'pk' of the pk_value object, if it doesnt exists use pk_value, set to it self.fk.get_attname return value attribute, of the obj object.
if self._non_form_errors is None,
if queryset is None,
from django.template.base import Lexer, Parser, tag_re, NodeList, VariableNode and TemplateSyntaxError into default name space.
remove first element from remaining_bits, substitute the result for option.
requires_system_checks is boolean False.
define the method __init__ with an argument self.
call the b64_encode function with an argument data, substitute the result for base64d.
raise an ValidationError with 2 arguments: return value of the function ungettext with 3 arguments: strings "Please submit %d or more forms.", "Please submit %d or more forms." and self.min_num, where '%d' is replaced with self.min_num, and code as a string 'too_few_forms'.
call the method copy.copy with an argument self, return the result.
call the method request_finished.connect with argument update_watch.
call the method parser.compile_filter with an argument bit, append the result to args.
if not,
call the method self.validate_key with argument key.
try,
derive the class BadHeaderError from the ValueError base class.
return self._non_form_errors.
if not,
derive the class DictConfigurator from the BaseConfigurator base class.
if sys.platform equals to string "win32",
delete entry under the attr key of obj_dict dictionary.
if urlconf is None,
define method set_cdata_mode, with self class instance and tag as the arguments.
if to is not an six.string_types instance raise an error with message string '"to" argument must be a list or tuple'.
import module logging.handlers.
call the method self.compile_filter with an argument token.contents, substitute the result for filter_expression.
define the method get_renderer with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
import module sys.
return ZERO.
increment year by integer 2000.
if path is not None,
return nothing.
call the method self._get_size_from_underlying_file, substitute the result for self._size.
call the method self.empty_form.is_multipart, return the result
call the method self._assert_mutable.
do nothing.
if HTMLParseError or UnboundLocalError exceptions are caught,
call the method self.as_ul, return the result.
call the function re.sub with 3 arguments: string "([a-z])'([A-Z])", lambda function with an argument m and return value, result of the m.group method called with an argument integer 0 converted into lowercase and result of the method value.title, substitute the result for t.
if not,
from django.template.base import Node, NodeList, Template, Context, Library, TemplateSyntaxError, VariableDoesNotExist, validTemplateLibrary, BLOCK_TAG_START, BLOCK_TAG_END, VARIABLE_TAG_START, VARIABLE_TAG_END, SINGLE_BRACE_START, SINGLE_BRACE_END, COMMENT_TAG_START, COMMENT_TAG_END, VARIABLE_ATTRIBUTE_SEPARATOR, get_library, token_kwargs, kwarg_re and render_value_in_context.
from django.core.management.base import CommandError into default name space.
call the self.seek method with argument integer 0.
concatenate CheckCommand.help to string 'Deprecated. Use "check" command instead. ', substitute it for help.
return self._changed_data.
return an empty list.
call the method self.get with key and version set to version as arguments, substitute the result for value.
substitute years for self.years.
define the function prepend_token with 2 arguments: self and token.
for every model in model_list,
call the method parser.parse with an argument tuple with an element string 'endif', substitute the result for nodelist.
return string 'https' if value under the "HTTPS" key of the os.environ dictionary equals string 'on', if not return 'http'.
define the function same_origin with 2 arguments url1 and url2.
if neg is true,
try,
define the method handle with arguments self and unpacked dictionary options.
if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key' attribute.
if not,
cal the method self.startElement with 2 arguments: name and attrs.
yield one element of line iterable.
neg is integer 1.
break from the loop execution,
bring integer 2 to the power of 10, multiply it by 64, substitute the result for DEFAULT_CHUNK_SIZE.
if self.field.label_suffix is not None, substitute self.field.label_suffix for label_suffix, otherwise substitute self.form.label_suffix for label_suffix.
call the method cursor.execute with string "DELETE FROM %s WHERE cache_key = %%s" as argument, substitute the '%s' with table and list containing key, respectively.
join self.dirpath and self.file in a string, substitute with it '%s' in string "<TranslatableFile: %s>", return the result.
define the function format with 2 arguments: value and format_string.
import module sys.
call self.errors.
convert value, self.sep and return value of a method self.signature called with an argument value, concatenate them together, return the result.
if dirname is true and dirname path doesnt exists,
define the function get_version with version set to None as argument.
call the BaseConverter function with BASE56_ALPHABET as argument, store the result in base56.
try,
call the method self.resolve with an argument c, substitute the result for c.
substitute stat.st_mtime for mtime.
call the function format_html with 2 arguments: string '<input{0} />', result of the function flatatt called with an argument final_attrs, return the result.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
call the method parser.add_argument with 6 arguments: string '--symlinks', string '-s', action as a string 'store_true', dest as a string 'symlinks', default as boolean False and help as a string 'Follows symlinks to directories when examining ' 'source code and templates for translation strings.'.
call the method self.as_tuple with an argument value under 'mailhost' key of config dictionary, substitute the result for value under 'mailhost' key of config dictionary.
call the method pk.rel.to._default_manager.get_queryset, substitute the result for qs.
if not,
if string '()' is contained in config,
define the method callback with an argument self.
return an instance of a SpacelessNode class, created with an argument nodelist.
instantiate Lexer class with 2 argumets src and origin, call the method tokenize from it, for every t in the result,
substitute id for self.id.
fixture_files is an empty list.
get the value under the 'id' key of the self.attrs dictionary, substitute it for id_ if the key exists, if not id_ is None.
substitute value under the "_wrapped" key of the self.__dict__ dictionary.
yield an instance of SubWidget class created with 5 arguments: self, name, value, attrs and choices.
use global variable _supported.
call the method transaction.atomic with an argument using set to self.using, with the result,
from django.core.mail.utils import DNS_NAME into default name space.
call the method self.get_renderer with 4 arguments: name, value, attrs and choices, for every widget in result,
_urllib_parse_moved_attributes is a list with 16 elemetns, all of them are the results of the call to the function MovedAttribute with different 3 string arguments.
if not,
return an instance of _CacheInfo class, created with 4 arguments: value under the HITS key of the stats dictionary, value under the MISSES key of the stats dictionary, maxsize and length of cache.
call the method parser.delete_first_token.
substitute next for self.next.
define the function _sanitize_ipv4_mapping with an argument ip_str.
get the value under the self.status_code key of the REASON_PHRASES dictionary, if it exists substitute it for the self.reason_phrase, if not, self.reason_phrase is a string 'UNKNOWN STATUS CODE'.
from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
decorator function register.filter with an argument is_safe set to boolean False.
call the method context.render_context.push.
for every key in self.keyOrder,
call the method value.as_tuple, assign the result to sign, digittuple and exponent, respectively.
break the loop execution.
call the method self.extend_nodelist with 3 arguments: nodelist, compiled_result and token.
if self is not contained in state_frame,
self._validate_unique is boolean True.
call the Warning function with 4 arguments: string "MIDDLEWARE_CLASSES is not set.", hint tuple containing one string, "Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. django.contrib.sessions.middleware.SessionMiddleware, django.contrib.auth.middleware.AuthenticationMiddleware, and django.contrib.messages.middleware.MessageMiddleware were removed from the defaults. If your project needs these middleware then you should configure this setting.", obj set to None, and id set to a string '1_7.W001', put the result into a list and return it.
substitute col_name for value under the 'db_column' key of the field_params dictionary.
if autoescape is true and value is not an instance of SafeData, autoescape is boolean True, otherwise it is boolean False.
define the method url with arguments self and name.
if ',' is contained in second element of args,
return self.new_objects.
substitute value under the PREV key of the root dictionary for last.
if not,
self._post_parse_error is boolean False.
remove file tmp_path.
substitute the return value of the method self.object_list.count for self._count.
get config dictionary element under 'format' key, if it exists substitute it for fmt, if not, fmt is None.
call the method self._set_regex with an argument regex.
if not,
root is an list with 4 elements: root, root, None and None.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide an exists() method'.
self._raw_ipv6 is boolean True.
raise an exception.
substitute name for self.name.
break from this loop execution.
return an instance of FilterExpression class, created with 2 arguments: token and self.
call the http.HttpResponseBadRequest function, assign the result to the response.
define the method add with 4 arguments: self, data, conn_type and squash set to boolean True.
for every k and v in result of the call to the method type_.__dict__.items,
result is an empty list.
if call to the function module_has_submodule with 2 arguments: app_config.module and module_to_search evaluates to true,
return result,
if self.cdata_tag is not None,
call the method self.stream.flush.
filename is a tuple containing 3 initial elements: string 'utf-8', and empty string and filename.
if constant_arg is true,
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
define the method __init__ with 7 arguments: self, data set to None, files set to None, auto_id set to string 'id_%s', prefix set to None, queryset set to None and unpacked dictionary kwargs.
if auto_id is true and '%s' is contained in result of the call to the function smart_text with an argument auto_id,
append block_name to parser.__loaded_blocks.
if OSError, renamed to e, exception is caught,
if IndexError exception is caught,
call the command.execute method with arguments: unpacked list args and unpacked dictionary defaults, return the result.
define the method _get_filename with argument self.
call the method translation.get_language, substitute th result for saved_locale.
regex is an property object of this class, with _get_regex getter and _set_regex setter function.
substitute context.autoescape for old_setting.
define the method __repr__ with an argument self.
encode is an lambda function with 2 arguments k and v, return value is the result of the function urlencode, called with an argument: dictionary containing element v for k.
if every input_val in special_floats,
TRANSLATOR_COMMENT_MARK is a string 'Translators'.
if newretval is not None,
if k is contained in seen,
define the function pgettext with 2 arguments: context and message.
convert candidate to a string.
import module sys.
define the function parse_time with an argument value.
call the function copy.deepcopy with 2 arguments: self.children and memodict, substitute the result for obj.children.
substitute base for m.
append name to string 'add_' use it as the name of the attribute to get from object self, call the result as an function, with an argument: value under the name key of the media_attrs dictionary, if it exists, if not use None as an argument.
call the function locks.lock with arguments fd and locks.LOCK_EX.
from .registry import register, run_checks, tag_exists and Tags into default name space.
define the method execute with an argument self,
break from the smallest enclosing loop.
call the method context.push, with the result perform,
if length of bits is not integer 2 or 3,
call the method self._handle_fk_field_node with field_node and field as arguments, substitute the result for the value under the field.attname of the data dictionary.
raise an ContentNotRenderedError exception with an argument string 'The response content must be rendered before it can be pickled.'.
if not,
if value under the 'author_link' key of the self.feed dictionary is not None,
from django.utils import six and lru_cache into default name space.
do nothing.
if self._errors is None,
call the method value.strftime with an argument format, return the result.
return result.
call the function force_text with an argument first element of args, substitute the result for first element of args.
raise the exception.
call the method self.render_options with 2 arguments: choices and list with an entry, value, substitute the result for options.
call the method self._assert_mutable.
sum item and i_item together, append the result to new_result.
put bcc into a list, assign it to self.bcc.
replace every occurrence of arg is value for an empty string, substitute the result for value.
call the method ETAG_MATCH.findall with an argument etag_str, substitute the result for etags.
if self.errors is true and self.form has an attribute 'error_css_class',
substitute first 12 elements of r for r.
define the method render_node with 3 arguments: self, node and context.
from django.core.exceptions import ImproperlyConfigured into default name space.
define the function _parse_header_params with an argument s.
decorator function register.filter with an argument is_safe set to boolean True.
replace '%s' in string "### %s = %s" with key and value under the key key of the user_setting dictionary, append it to the output.
call the self.get method with key and version set to version as arguments, substitute the result for value.
remove first element from model_dependencies, assign it to model and deps, respectively.
define the method _iterkeys with an argument self.
call the function import_module with an argument taglib_module, substitute the result for mod.
derive the class Command from the AppCommand base class.
pathext is an list containing an empty string.
define the method add_arguments with arguments self and parser.
call the function _trans.check_for_language with an argument lang_code, return the result.
replace every occurrence of replacement in value for an empty string, substitute the result for value.
concatenate name and string '-clear', return it.
try,
call the method __new__ with 4 arguments: cls, name, bases and attrs, from the base class of the class RenameMethodsBase.
return boolean True.
call the method self.reverse_dict.getlist with an argument lookup_view, substitute the result for possibilities.
call the params.get method with string 'TIMEOUT' and integer 300 as arguments, use the string 'timeout' and previous result as the arguments for the call to the params.get method, substitute the result for timeout.
if UnicodeError, renamed to e, exception is caught,
if last element of host equals character ']',
from importlib import find_loader as importlib_find.
call the method copy.copy with an argument register_to._registry, substitute the result for before_import_registry.
evaluate the self.getpos() and assign the result to the lineno and offset respectfully.
return html.
if self.timezone is false,
get the value under the self.using key of the connections dictionary, substitute it for connection.
convert first element of values into a integer, return the result and ch.
if not,
get translation_function attribute of the object t, call the result with an argument eol_message, substitute the result for result.
if tuple current_version elements are greater or equal to (3, 4), respectively,
call the method to_python with an argument data from the base class of the class BooleanField, return the result.
if migrations_directory is not a directory,
open filename file in write mode, with the file descriptor renamed to outfile, perform,
call the method __init__ from the base class of the class IntegerField, with arguments unpacked list args and unpacked dictionary kwargs.
define the method item_attributes with 2 arguments self and item.
return an empty list.
if not,
if field is not contained in self.errors,
get _itervalues attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable, return it.
substitute index for doublecolon_start.
open the file in mode 'ab' and with file name obtained by calling the self._get_filename method.
return self.streaming_content
define the method write with 4 arguments: self, msg, style_func with None and ending set None.
for every key and value in data.items function return value,
for every opt in self.option_list,
call the function self.to_python with an argument data, substitute the result for data.
while ch is not equal to terminal_char,
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
if cookie is not an instance of http_cookies.BaseCookie,
get_language_bidi is lambda function returning boolean True if settings.LANGUAGE_CODE is contained in settings.LANGUAGES_BIDI.
for every __ in iterator,
call the method self._setupfunc, substitute the result for self._wrapped.
self.template_cache is an empty dictionary.
if not,
split string cc_delim_re by value of dictionary response under the key 'Vary' as a delimiter, substitute it for vary_headers.
get the type of the self object, on the result call the __bool__ method with an argument self, return the result.
define the function flatatt with an argument attrs.
raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide an extract() method'.
define the method get_resolved_arguments with 2 arguments: self and context.
return boolean upload.
decorator stringfilter,
return length of value,
define the method message with argument self.
define the method __init__ with 2 arguments: self and value.
convert initial and data into boolean, if they are not equal return boolean True, if they are return boolean False.
call the params.get method wit string 'VERSION' and integer 1 as arguments, substitute the result for self.version.
define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
define the function parts.
no_settings_commands is a list containing entries: 'help', 'version', '--help', '--version', '-h', 'compilemessages', 'makemessages', 'startapp' and 'startproject'.
if node is not an instance of TextNode,
return self.forms element at the index index.
if self.deactivate is true,
call the function force_str with an argument format_type, substitute the result for format_type.
break the loop execution.
if self has an '_regex_validator' attribute and self._regex_validator is contained in self.validators,
for every root in settings.ALLOWED_INCLUDE_ROOTS,
define the method getvalue with an argument self.
derive the class Rss201rev2Feed from the RssFeed base class.
define the function blankout with 2 arguments: src and char.
return an empty list.
define the method add_root_elements with 2 arguments: self and handler.
call the method __init__ from the base class of the class SortedDict, called with an argument data.
otherwise if self.object is an instance of the models.base.ModelBase class,
return boolean True.
call the function smart_text with an argument auto_id, format the result with self.html_name, return it.
if subcommand equals to a string 'help'.
self.bad_cookies is an empty set.
derive the LabelCommand class from the BaseCommand base class.
call the function context.get with 2 argument 'csrf_token' and None, substitute the result for csrf_token.
self.waiting_readers is integer 0.
call the method stream.unget with list containing elements of chunk list from the header_end incremented by integer 4 as a start index to the end as argument.
evaluate the function BytesIO with argument chunk, substitute it for chunk_buffer.
if file_ext is contained in command.extensions, is_templatized is boolean True, otherwise it is boolean False.
call the method apps.get_app_configs, convert the result in a list, reverse the order of elements, substitute the result for app_configs.
fp is a instance of a class six.StringIO.
if not,
if option equals a string 'with',
return boolean False.
define the function title with an argument value.
from django.core import checks into default name space.
try,
from lib2to3.fixer_util import find_indentation, Name, syms and touch_import into default name space.
substitute first element of self.locale_paths for self.default_locale_path.
write current_chunk to file fd.
if not,
for every i and tuple containing dirpath and f, in enumerated list of locations,
call the function six.text_type with return value of the function bytes(s), encoding and errors as the arguments, substitute the result for s.
default_validators is an list containing validators.validate_slug.
if data is true, substitute list created from elements of data, substitute it for self.keyOrder, otherwise self.keyOrder is an empty list.
d is an instance of class Decimal, created with result of the function force_text, called with an argument text converted into a floating point number.
return obj.
if self.object is not an instance of list type,
if not,
if confirm equals a string 'yes',
if second from the end element of args equals a string 'as',
raise an NotImplementedError exception with an argument string 'Awaiting Implementation'.
if url ends with '/' character,
substitute block for value under the 'block' key of context dictionary.
call the method match.span, substitute the result for start an end, respectively.
if app_labels is false,
self.namespaces is an empty list.
substitute _urllib_request_moved_attributes for Module_six_moves_urllib_request._moved_attributes.
raise an TemplateSyntaxError exception with an argument string "'%s' takes one argument", where '%s' is replaced with first element of bits.
return value.
call the method self.iteritems, return list of results.
if literal_match is true,
self._changed_data is None.
substitute the result of the function data.temporary_file_path for file.
output is an empty list.
call the method other.__cast, substitute the result for other.
return six.text_type(s).encode(encoding, errors).
call the function new_method_proxy with an argument operator.delitem, substitute the result for __delitem__.
if field is an instance of FileField,
convert val to an list, substitute it for val.
define initialization method __init__ with argument self.
try,
for every app_name and model_list in return value of manifest.items method,
if name is callable object,
for every frag in name.
otherwise if param is contained in kwargs,
raise an TemplateDoesNotExist exception with an argument string "No template names provided".
if other is an instance of BaseContext class,
if ch is not equal to a sring '?' or escaped is true,
define the method __init__ with 2 arguments: self and attrs set to None.
define the method clean with 2 arguments self and value.
matches is boolean False.
define the function is_aware with an argument value.
raise an exception.
for every line in sequence_sql,
substitute list containing element self for self.error_list.
if origin is true,
put to into a list, assign it to self.to.
if IndexError, ValueError, KeyError or TypeError exceptions are caught,
strip whitespaces from both sides of the value, substitute it for value.
try,
call the __init__ method from the base class of the HttpResponseNotAllowed class, called with arguments: unpacked list args, and unpacked dictionary kwargs.
if http_cookies.CookieError exception is raised.
call the add_argument method on the parser object, with string '--database', default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database to create SQL for. Defaults to the default" database.' as arguments.
for every name in pattern.reverse_dict,
define the method strftime with 2 arguments: self and fmt.
format self.template_with_clear with substitutions, substitute the result for value under the 'clear_template' key of, substitutions dictionary.
from __future__ import unicode_literals into default name space.
slice the path list from the result of the match.end method as the start index to the end, substitute it for new_path.
return boolean True.
dirs is an empty dictionary.
if call to the method os.access with arguments: filename and os.W_OK, evaluates to false,
define the method __hash__ with an argument self.
if not,
substitute '%s' in string '%s-%s-%s' with y,m and d, return the result.
if upload is true,
raise an TemplateSyntaxError exception with an argument "Could not find variable at start of %s.", replace '%s' with token.
self.directory_permissions_mode is a tuple containing: directory_permissions_mode if directory_permissions_mode is not None, or settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS if it is.
do nothing.
raise an exception parser.error_class with an argument string "Unexpected end of expression in if tag.".
call the executor.loader.get_migration_by_prefix with app_label and migration_name with arguments, substitute the result fr migration.
call the model.check method with unpacked dictionary kwargs for every model in return value of function apps.get_models, only if app_configs is None ot model._meta.app_config is contained in app_configs, error is a list containing all the previous elements.
join results of format_html called with 2 arguments: format_string and tuple with an element args, into a string, separated with result of the function conditional_escape with an argument sep, for every args in args_generator, use the result as an argument for the call to the function mark_safe, return the result.
get the type of res, call the method mro on the result, for every t in the result,
for every name in sorted value under the app key of the commands_dict dictionary, append string "
define the method __ne__ with an argument self.
do nothing.
if not,
if format_module_path is an instance of six.string_types,
call the method re.sub with 3 arguments: raw string '>\s+<', string '><' and result of the function force_text, called with an argument value, return the result.
if result is true,
return nothing.
return value.
define the method __init__ with 3 arguments: self, include_html set to boolean False and email_backend set to None.
substitute Tok.num for self.id.
__all__ is an list containing a string 'File'.
from django.utils.six.moves import copyreg into default name space.
from django.utils.encoding import force_text into default name space.
input_type is a string 'radio'.
define the method __len__ with an argument self.
call the serializer function, call the dumps method on the result with an argument obj, substitute result for data.
if result is true,
substitute new_args for result_args.
sort elements formatted, join them in the list separated with newline character, substitute the result for formatted.
if current_len is smaller than or equal to length,
call the function six.StringIO with an argument stream_or_string, substitute the result for self.stream.
derive the class ExtendsNode from the Node base class.
break from the loop execution.
for every node in return value of the graph.leaf_nodes method called with the app_name argument,
if not,
split string s once, with '=' as delimiter, substitute the result for t.
execute code statement """exec _code_ in _globs_, _locs_""". call the function exec_ with an argument string """def reraise(tp, value, tb=None):
for every loc in locales,
days is a tuple with 7 elements: strings 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' and 'Sun'.
define the method Z with an argument self.
if DatabaseError exception is caught,
return string '(NOT (%s: %s))', formated with self.connector and string created by joining c into a string, separated by ', ', for every c in self.children.
if exception of the class Exception, as e, is caught, call the self.stderr.write method with string "
dirs is a list containing basedir.
messages is an instance of the ValidationError class created with an argument messages.
if length of bits is not equalt to integer 2,
convert elements of error into a list, substitute the first element for message.
derive the class Command from the BaseCommand class.
call the email_message.recipients method, if it evaluates to false,
from django.utils import six into default name space.
if dirname is true and dirname directory doesnt exists,
call the method setlist from the base class of the QueryDict class, with arguments key and list_.
remove all occurrences of newline character from constant_string.
if six.PY3 is boolean True,
if offset is not None,
for every filename in filenames,
append string "Field renamed because it ended with '_'." to field_notes.
define the method __init__ with 2 arguments self and file.
if p2.scheme, p2.hostname and p2.port equals p1.scheme, p1.hostname and p1.port, respectively, return boolean True, otherwise return boolean False.
raise an InvalidTemplateLibrary exception with an argument string "Unsupported arguments to Library.tag: (%r, %r)", substitute '%r' with name and compile_function.
request user input from the standard input, assign it o confirm, with the query string: "You have requested a flush of the database." "This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state." "Are you sure you want to do this?"Type 'yes' to continue, or 'no' to cancel: ", where '%s' is replaced with value under the 'NAME' key of the connection.settings_dict dictionary.
define the method render with 2 arguments: self and context.
match is boolean True.
if year is lesser than integer 100,
call the self._read_limiter with length of self.buffer subtracted from size as argument, store the result into chunk.
call the method base64.urlsafe_b64encode with an argument s, strip the result of the bytes string '\n=' from the right, return it.
if not,
derive the WSGIHandler class from the base class base.BaseHandler.
instantiate Archive class with an argument path, with it renamed to archive, perform,
substitute fk for FormSet.fk.
define the method _proxy_method with 3 arguments self, unpacked list args and unpacked dictionary kwargs.
substitute args for self.args.
break the loop execution.
define the method __enter__ with an argument self.
return msg.
get value under key key of self dictionary, if it doesnt exists return default, substitute the result for value.
if bad_app_labels is true,
if value is not None,
define the function make_naive with 2 arguments: value and timezone.
decorator function register.filter with an argument is_safe set to boolean False.
call the function factory with an argument unpacked dictionary kwargs, substitute the result for result.
if AmbiguityError exception is caught,
python_2_unicode_compatible decorator,
if conflicts is true,
define the method exit_command with an argument self.
call the method self.errors.as_data, for every error for value under the filed key of the returned dictionary,
call the function format_html with an argument empty string, return the result.
define the method scheme with an argument self.
if value has an attribute '_meta',
if six.PY2 is true,
define the method f with an argument self.
if not,
import module codecs.
return msgid.
if max_length is not None,
substitute '%s' is string 'processing file %s in %s\n' with self.file and self.dirpath, write it to command.stdout.
call the function ungettext with 3 arguments: singular, plural and number, substitute the result for result.
return a string '%02d' formated with self.data.month.
derive the class FileUploadHandler from the object base class.
from django.utils._os import npath and upath into default name space.
otherwise if second element of args equals a string '404',
derive the class DebugLexer from the Lexer base class.
decorator function register.filter with an argument is_safe set to boolean True.
define the method __init__ with arguments self and regex.
from django.utils.six.moves import xrange into default name space.
want_unicode is boolean True.
_serializers is an empty dictionary.
extend all_locales list with the elements of locale_dirs list on which os.path.basename function was applied.
if TypeError or ValueError exceptions are caught,
call the method imp.find_module with 2 arguments: module_name and list containing element entry, assign the result to file_, _, and _, respectively.
import module warnings.
define the method configure_filter with 2 arguments: self and config.
if filename ends with '/' or with '\\',
call the method __init__ from the base class of the class AssignmentNode, with 3 arguments: takes_context, args and kwargs.
define the function receive_data_chunk with arguments self, raw_data and start.
try,
raise an CommandError with an argument string "errors happened while running msgattrib\n%s", where '%s' is replaced with errors.
instance.keyOrder is an empty list.
get the value under the 'format' key of the options dictionary, substitute the result for format.
call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS, and help set to a string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.
define the method addQuickElement with 4 arguments: self, name, contents set to None and attrs set to None.
define the method write_message with arguments self and message.
total_ordering decorator,
define the method to_python with arguments self and value.
decorator function register.filter with an argument is_safe set to boolean True.
if response is None,
define the method __str__ with an argument self.
get name attribute from the instance object, call it and return the result.
derive the class CharField from the base class Field class.
if self.required is false,
for every form in self call the method form.has_changed if any of the results evaluates to true, return boolean True, if not return boolean False.
call the method field_params.update with an argument new_params.1
call the function is_valid_ipv6_address with an argument value, if it evaluates to false,
define the method has_next with an argument self.
from django.conf import settings into default name space.
define the function get_callable with arguments lookup_view and can_fail set to boolean False.
from collections import OrderedDict into default name space.
from django.core.exceptions import DisallowedHost and ImproperlyConfigured into default name space.
call the method context_match.group with an argument integer 1, substitute the result for message_context.
return self.
call the method self.xml.endElement with an argument string 'field'.
call the function write with an argument arg.
if there is no match,
if errors is true,
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
while i is lesser than length of subject and i-th element of subject is not equal to c,
append newline character to msg.
call the _caches.setdefault method with name and empty dictionary as arguments, substitute the result for self_cache.
if supported_platform is False or is_a_tty is False,
return self._choices.
attrs is an empty dictionary.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
call the method self.build_attrs with 3 arguments: attrs, type set to self.input_type, name set to name, substitute the result for final_attrs.
if widgets is true and f.name is contained in widgets,
execute regardless of the exception being raised,
if KeyError exception is caught,
define the method __getstate__ with an argument self.
dklen is None.
if potfile file path doesnt exist,
define the function parse_accept_lang_header with an argument lang_string.
return FILE_INPUT_CONTRADICTION.
call the method handler.endElement with an argument string 'rss'.
if value under the 'description' key of the item dictionary is not None,
if o.microsecond is true,
try,
property decorator,
substitute field for self.field.
if HTMLParseError exception is caught,
call the method default with an argument o from the base class of the class DjangoJSONEncoder, return the result.
property decorator,
evaluate self._is_expired method with f as argument, if the result is false,
call the function force_bytes with argument value, use the result as an argument for the call to the method base64.b64decode, use the result as the argument for the function call to the pickle.loads, return the result.
if condition is not None,
call the method self.configure_custom with an argument config, substitute the result for result.
get translation_function attribute of the t object, call the result with 3 arguments: singular, plural and number, return the result.
call the function BytesIO with self.buffer as argument, store the result is sio.
otherwise if basetype equals a string 'message' and subtype equals a string 'rfc822',
call the method to_python with an argument data from the base class of the class ImageField, substitute the result for f.
define the function pgettext with 2 arguments: context and message.
substitute i-th element of list for title.
check if lowercase header_query exists is existing_headers, return the boolean result.
if value has an 'close' attribute,
join into a file path: path and string '%s.pot', where '%s' is replaced with self.domain converted into a string, substitute the result for pot_path.
from django.core.management.base import BaseCommand, CommandError, CommandParser and handle_default_options into default name space.
call the os.fdopen function with fd, mode and bufsize as the arguments, assign the file handle object to self.file.
seen_data is an empty set.
return a string '%02d' formated with the result of the function self.g.
substitute self for result.parent.
call the get_deserializer function with an argument format, substitute the result for d.
define the method _assert_mutable with an argument self.
call the method add_arguments from the base class of the class Command, with an argument parser.
if count of occurrence of ':' in ip_str is greater than integer 7,
call the function resource_string with 2 arguments app_config.name and pkg_name, substitute the result for resource.
from django.utils.functional import cached_property into default name space.
call the function to_language with an argument language, substitute it for self.__to_language.
call the method self.validate_key with argument key.
define the method a with an argument self.
WRAPPING_PUNCTUATION is a list with 6 elements: tuple with 2 elements: '(' and ')', tuple with 2 elements: '<' and '>', tuple with 2 elements: '[' and ']', tuple with 2 elements: '&lt' and '&gt', tuple with 2 elements: '"' and '"', and tuple with 2 elements: '\'' and '\''.
from __future__ import unicode_literals into default name space.
if renderer is true,
try,
substitute value for value under the options key of options dictionary.
if template has an attribute 'render',
call the function update_wrapper with 3 arguments: _dec, decorator and assigned as result of the function available_attrs, called with an argument decorator.
if _file is not None,
define the method __init__ with 4 arguments: self, parser, unpacked list args and unpacked dictionary kwargs.
if self.parsed is true,
define the handle_app_config with 3 arguments self, app_config and unpacked dictionary options.
call the method base.DeserializedObject with arguments obj and m2m_data, return the result.
inner_result and inner_args are empty lists.
if not,
format_module_path is a list containing an element format_module_path.
define the method close with self class instance as the argument.
return mod.register.
try,
TOKEN_COMMENT is integer 3.
define the function emit_pre_migrate_signal with 4 arguments: create_models, verbosity, interactive and db.
if return values of the function force_text called two times with 1 argument, with value, and with orig, are equal,
_format_cache is an empty dictionary.
get the value under the name key of the self dictionary, yield it as the return value of the generator.
if the value under the 'QUERY_STRING' key of the self.META dictionary is true, call the function iri_to_uri, called with value under the 'QUERY_STRING' key of the self.META dictionary and append it to string '?', append the result th the self.path converted into a string and return it, if the value under the 'QUERY_STRING' key of the self.META dictionary is false, return self.path converted into a string.
call the function _create_cache with argument alias.
define the private method __init__, with self instance of this class, obj and list of arbitrary length *args as arguments.
while i is smaller than list_length,
property decorator.
append callback to self._post_render_callbacks list.
call the self.get_backend_timeout with argument timeout, substitute it for the value under the key key of self._expire_info dictionary.
ge the absolute path of the return value of the function path.expanduser with the argument target, substitute it for top_dir.
append func to processors.
call the method g.flatten with arguments self and unixfrom set to unixfrom.
substitute number for self.number.
substitute namespaces for the value under language_code key of the self._namespace_dict dictionary.
call the method base.__dict__.items, for every attr and value in the result,
substitute auto_id for value under the 'id' key of the attrs dictionary.
call the method self._close_files.
import module copy.
substitute result for value under key key of self dictionary.
define the function join with 3 arguments: value, arg and autoescape set to None.
call the self.stdout.write method, with string "  Unapplying %s..." with '%s' replaced with migration and ending set to '', as arguments.
if script_url is false,
derive the class MultiWidget from the Widget base class.
finally perform,
if file_name is false,
if data has an 'temporary_file_path' attribute,
skip this loop iteration.
if field PY2 of the module six is boolean True,
substitute self.pointer for i.
call the method self.unclosed_block_tag with an argument parse_until.
define the method add_arguments with self class instance and parser as the arguments.
call the add_argument method on parser object, use string '--database', default set to DEFAULT_DB_ALIAS and help set to string, 'Nominates a database to print the SQL for. Defaults to the "default" database.' as the arguments.
join elements of output into a string, separated by newline characters, return it.
call the function get_format with an argument string 'DATE_FORMAT', substitute it for fmt.
derive class Command from the BaseCommand base class.
skip this loop iteration.
output is an empty list.
set self.__starttag_text to None.
if self._fname is None:
if migration.replaces is true,
call the function email_message.message, substitute the result for message.
define the function luhn with an argument candidate.
return result.
if subcommand_cls.use_argparse is true,
call the method parser.add_argument with 5 arguments: string '--no-initial-data', action set to string 'store_false', dest set to string 'load_initial_data', default=True and help as a string 'Tells Django not to load any initial data after database synchronization.'.
register.tag decorator,
if value is contained in self.empty_values,
raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' for key.
if not,
from django.core.management.color import color_style into default name space.
define the method __repr__ with an argument self.
raise an ValueError exception with an argument string "Base36 conversion input too large.".
call the __init__ method with an argument name from the base class of the MovedModule class.
define the method handle with arguments self and unpacked dictionary options.
derive the class TypedMultipleChoiceField from the base class MultipleChoiceField class.
define method add_arguments with self class instance and parser as the arguments.
yield key and value under key key of self dictionary.
import module warnings.
trym
inplural is boolean False.
raise an TypeError exception with an argument string "Non-integer base36 conversion input.".
return the result of the function format_html called with 2 arguments: string '<input{0} />', and result of the function flatatt, called with an argument final_attrs.
if field.rel.to._default_manager has an 'get_by_natural_key' attribute,
return path,
derive the class SortedDict from the dict base class.
return last rollback elements of chunk.
from django.utils import six into default name space.
define the method __str__ with an argument self.
if not,
define the method __len__ with argument self.
define the method render with 2 arguments self and context.
return an empty string,
if KeyError exception is raised,
if reversed is True substitute difference of d and now for delta, if not substitute the difference of now and d for delta.
substitute string 'ascii' for encoding.
from django.utils.encoding import force_bytes into default name space.
substitute '%s' in a string "Merging %s" with app_label, use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.
substitute return value of the method obj._get_pk_val for obj_pk.
all the function fcntl.flock with return value of the _fd(f) function and fcntl.LOCK_UN as arguments, substitute the result for ret.
split string name into two parts from the right side by the separator '.', substitute parts for path and module, respectively.
derive the class EntitiesForbidden from the DefusedXmlException base class.
compare is a lambda function with arguments self, a and b, return value is boolean true if a is greater than b, otherwise is false.
if not,
remove config dictionary element under 'disable_existing_loggers' key, if it exists substitute it for disable_existing, if not, disable_existing is boolean True.
call the function self.path with argument name, use the result as an argument for the call to the function os.path.getctime, use the result as an argument for the call to the function datetime.fromtimestamp, return the result.
try,
remove values under the keys 'name' and 'directory' of the options dictionary and substitute it for app_name and target, respectively.
increment self.waiting_writers by integer 1,
from django.utils._os import safe_join and abspathu into default name space.
substitute callback for self._callback.
if ImportError exception is caught,
if content is not None raise an error.
return cached.
from django.db.migrations.autodetector import MigrationAutodetector into default name space.
join full_statement into a string, separated by newlines, use it as an argument for the call to the method curs.execute.
call the method self.as_widget with 3 arguments: return value of the method self.field.hidden_widget, attrs, and unpacked dictionary kwargs, return the result.
from django.core.management.sql import sql_flush into default name space.
substitute None for pickled.
if val is None,
call the __init__ method with fields, unpacked list args and unpacked dictionary kwargs from the base class of the SplitDateTimeField class.
return boolean False.
import module json.
append string ".moves.urllib_response" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for response.
return an empty string,
call the method self._mark_post_parse_error.
make basedir directory,
from django.template.base import Variable, Library and VariableDoesNotExist into default name space.
define the method resolve with arguments self and path.
self._current is None.
translators_comment_start is None.
TOKEN_BLOCK is integer 2
__all__ is a string containing strings: 'UploadFileException', 'StopUpload', 'SkipFile', 'FileUploadHandler', 'TemporaryFileUploadHandler', 'MemoryFileUploadHandler', 'load_handler' and 'StopFutureHandlers'.
define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
if pickled is not None.
substitute func for self.func.
remove first element from name, substitute the result for used.
slice the rawdata to obtain substring from i-th to j-th element, use it as the argument for the method call to the self.handle_data.
call the function check_programs with an argument string 'xgettext'.
import module copy.
from django.utils import dateformat, numberformat and datetime_safe into default name space.
output is an list with initial elements generated with call to the function pformat with an argument val, for every val in context.
field_dict is an instance of OrderedDict class, created with an argument field_list.
kwargs is a empty dictionary.
define the method download with arguments self and url.
substitute complain for __delitem__.
call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args, third element of the result of the function sys.exc_info.
try,
subtract length of the ext from the integer 255, take first elements of the name list up to the previous result index, append ext to the end of it, substitute the resulting list for name.
if name equals string "_wrapped",
from django.conf import settings into default name space.
join elements of self.cc into a string separated by ', ', substitute the result for value under the 'Cc' key of msg dictionary.
join the list of statements into a string separated by new lines, return it.
call the method self._populate.
append settings.LOCALE_PATHS converted into a list to a list containing an element globalpath, return it.
import module sys.
define the function comment with 2 arguments: parser and token.
endless while loop,
perform bitwise exclusive OR on 2 operands x and y, perform bitwise OR with 2 operands: previous result and result, substitute the result for result.
return nothing.
if not,
call the function get_templatetags_modules, substitute the result for templatetags_modules.
try,
if exception OSError occurred,
derive the class HttpResponse from the HttpResponseBase base class.
skip this loop iteration.
return self.position.
if media is true,
import module datetime.
for every obj in queryset,
call the klass method with fail_silently set to fail_silently and dictionary arguments kwds as arguments, return the result.
subtract i from len_values, substitute the result for value under the 'revcounter' key of the loop_dict dictionary.
from itertools import dropwhile into default name space.
concatenate __name__, string '.moves' and attr.name together, use it as an key to get the value from the sys.modules dictionary, substitute attr for the obtained value.
derive the NoArgsCommand class from the BaseCommand base class.
data is None.
define the method __str__ with an argument self.
append string ".moves.urllib_error" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for error.
append child.data to the inner_text list.
define the method __init__ with 2 arguments: self and key_to_list_mapping set to an empty tuple.
if common_ancestor is None,
if first element of cwords equals a string 'runfcgi',
call the method self.copy_plural_forms with arguments: msgs and locale, substitute it for msgs.
derive the class AutoEscapeControlNode from Node base class.
if values is None,
return an empty string and an empty string.
for every key in return value of the method c.keys call,
substitute sixth element of row for value under the 'decimal_places' key of the field_params.
from django.utils.six.moves import http_cookies into default name space.
get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
if ValueError exception is caught,
self.nodelist_empty is an instance of NodeList class.
call the method self.get_connection with argument fail_silently, on the result call the method send_messages with one argument: list containing self, return the result.
call the method __init__ from the base class of the class MultipleHiddenInput, called with an argument attrs.
if first element of data_list is contained in self.empty_values,
object_data is an empty dictionary.
substitute self.remaining for size.
substitute self for value.configurator.
convert params into a list, substitute it for unhandled_params.
decorator total_ordering,
call the method related.natural_key, substitute the result for related.
substitute empty for self._wrapped.
_meth_self is a string "__self__".
call the function module_to_dict with an argument settings._wrapped, substitute it for user_settings.
append item to self.items.
if url_name exists substitute it for view_path, if not substitute .self._func_path for view_path.
if ch is not equal to string '<' or string '=',
MONTHS_AP is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'abbrev. month' and 'Jan.' for 1, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Feb.' for 2, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'March' for 3, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'April' for 4, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'May' for 5, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'June' for 6, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'July' for 7, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Aug.' for 8, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Sept.' for 9, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Oct.' for 10, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Nov.' for 11, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Dec.' for 12,
define the method __init__ with 6 arguments: self, loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty set to None.
from django.core import signals into default name space.
if has_old_option is true,
renamed_methods is an tuple.
increment i by integer 1,
call the method parser.compile_filter with an argument value, substitute the result for value under the name key of kwargs dictionary.
substitute exclude for value under the 'exclude' key of attrs dictionary.
if response is None,
define the method id_for_label with an argument self.
append value to self._closable_objects list.
substitute _iterkeys for iterkeys.
if not,
if key if contained in value under the DEFAULT_CACHE_ALIAS key of caches dictionary, return boolean True, otherwise return False.
return an empty string.
return value under the key key of self dictionary.
call the function force_bytes with argument content, substitute it for content.
if not,
call the method self.setlist with 2 arguments: k and v.
if self.use_argparse is false,
if AttributeError exception is caught,
if self has an 'error_dict' attribute,
remove the 'stream' key from the options dictionary and substitute it for self.stream, if the key doesnt exists call the six.String function and substitute the result for self.stream.
append string ')' to field_desc.
pop the value under the 'file_path' key of kwargs dictionary, substitute it for self.file_path.
define the method utcoffset with 2 arguments self and dt.
return obj_pk.
if cache_timeout is None,
if value is None,
if not,
replace "%s" from the string ' class="%s"' with css_classes, substitute it for html_class_attr.
if '_meta' is not an attribute of obj,
call the method fp.getvalue, return the result.
get the value under the name key of the self.initial dictionary, if it exists substitute it for initial, if not substitute field.initial for initial.
if self does not have an attribute named '_dimensions_cache'.
call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs, substitute the result for _dict.
if _serializers is false,
call the method self.open()
return a string "<DjangoTranslation lang:%s>", where '%s' is replaced with self.__language.
if other is not equal to list containing elements of self, return boolean True, otherwise return boolean False.
define the method getlist with 3 arguments: self, key and default set to None.
return template and None.
call the method rlcompleter.Completer with an argument imported_objects, use the complete field of the result as an argument for the call to the method readline.set_completer.
skip this loop iteration,
if settings.SECURE_PROXY_SSL_HEADER is true,
if nesting is false,
cal the method re.subn with 3 arguments: raw string '\W', string '_' and new_name.
convert header to lowercase, use it as the key to get the value from the self._headers dictionary, return the second element of the result.
return self.connection.
define the method translate_token with 2 arguments: self and token.
convert self into a string and return it.
call the method self.getlist with an argument key, return the result.
if not,
call the function warnings.warn with 3 arguments: string "`%s.%s` method should be renamed `%s`.", formated with 3 elements: class_name, old_method_name and new_method_name, deprecation_warning and integer 2.
define the function get_format_modules with 2 arguments: lang set to None and reverse set to boolean False.
cache is an instance of BaseDatabaseCache class, created with arguments: tablename and an empty dictionary.
substitute inotify_code_changed for fn.
raise an ImproperlyConfigured exception with an argument: return value of the method msg.format, called with an argument name set to self.urlconf_name.
increment self.active_writers by integer 1,
call the method tempfile.NamedTemporaryFile with arguments: suffix set to string '.upload' and dir set to settings.FILE_UPLOAD_TEMP_DIR.
if tt.tm_isdst is greater than integer 0, return the result.
raise an CommandError exception with an argument string, "Incompatible values of 'leave_locale_alone' " "(%s) and 'can_import_settings' (%s) command options.", replace '%s' with self.leave_locale_alone and self.can_import_settings.
if Exception exception is caught,
silent is boolean True.
define the method _has_changed with arguments self, data and initial.
raise an ValueError with an argument string "'%s' has no field named '%s'.", with '%s' replaced with self.__class__.__name__ and field, respectively.
if not,
call the function contains with 2 arguments: elt and inst, if it evaluates to true,
call the method connection.check_constraints with an arguments table_names set to table_names.
substitute self.form.auto_id for auto_id.
substitute self.is_localized for widget.is_localized.
call the method self.key_function with key, self.key_prefix and version as arguments, substitute the result for new_key.
derive the class Lexer from the object base class.
call the function re.compile with an argument string '\s*\n\s*', substitute the result for trim_whitespace_re.
increment i by integer 1.
call the method handler.upload_complete, substitute the result for retval.
decorator stringfilter,
call the method handler.endElement with an argument string 'author'.
get the value under the 'no_obsolete' key of the options dictionary, substitute it for self.no_obsolete.
return string '(%s: %s)', formated with self.connector and string created by joining c into a string, separated by ', ', for every c in self.children.
if pop_context is true,
call the method parser.add_argument with 7 arguments: string '--ignore', string '-i', action as a string 'append', dest as a string 'ignore_patterns', default as an empty list, metavar as a string 'PATTERN', and help as a string 'Ignore files or directories matching this glob-style pattern. Use multiple times to ignore more.'.
return obj_dict.
create a list out of basedir elements for which function os.path.isdir returns true, apply the os.path.abspath function on every element, and put the results in a list, basedir is set of previous list elements.
derive the class DeclarativeFieldsMetaclass from the base class MediaDefiningClass.
define the function _get_model with an argument model_identifier.
call the method handler.file.close.
if default is true and RAISE_ERROR is false,
define function dictvale, with an argument t.
substitute safe for value under the 'safe' key of kwargs dictionary.
if primary_keys is true,
if settings.TIME_ZONE is an instance of six.string_types and pytz is not None,
derive the class TokenParser form the base class object.
call the function get_template_from_string with 3 arguments: source, origin and template_name, substitute the result for template.
if ImportError exception is caught,
pid is integer 1.
return s.
message is a string 'make sure the name begins with a letter or underscore'.
break from the loop execution.
define the method send_messages with arguments self and email_message.
define the function urlize with 4 arguments: text, trim_url_limit set to None, nofollow set to boolean False,
otherwise if ch equals a string '|',
call the method pretty_name with an argument name, substitute the result for self.label.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
define class dummy.
return host.
raise an EntitiesForbidden exception with arguments name, value, base, sysid, pubid and notation_name.
call the function validate_ipv46_address with an argument ip_address.
chunks is an empty list.
raise an ImproperlyConfigured exception with an argument string "Creating a ModelForm without either the 'fields' attribute, "or the 'exclude' attribute is prohibited; form %s needs updating.", where '%s' is replaced with name.
call the method self.filter_function with 2 arguments func and unpacked dictionary flags, return the result.
substitute value.pk for value.
call the method self.__dict__.copy, substitute the result for obj_dict.
try,
set attr attribute of the self object to value.
append rel_to to string 'ForeignKey(, substitute the result for field_type.
python_2_unicode_compatible decorator,
if use_grouping is true substitute it for use_grouping, otherwise substitute force_grouping for use_grouping.
instantiate class Module_six_moves_urllib_response with an argument, string ".moves.urllib.response" appended to __name__, assign it to value under the string ".moves.urllib_response" appended to __name__ key of the sys.modules dictionary, and to value under the string ".moves.urllib.response" appended to __name__ key of the sys.modules dictionary.
call the function wraps with an argument func, call the result with an argument _dec, return the result.
put the double qoutes around encoded.
if not,
return the result of the method self._html_output, called with 5 arguments: normal_row to a string, '<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>', error_row set to a a string, '<tr><td colspan="2">%s</td></tr>', row_ender set to a string '</td></tr>', help_text_html set to a string, '<br /><span class="helptext">%s</span>' and errors_on_separate_row set to boolean False.
if expires is not None,
tok is a string '"REGEX"',
call the method parser.add_argument with 4 arguments: string '--list-tags', action set to string 'store_true', dest set to string 'list_tags' and help set to string 'List available tags.'.
self.connection is None.
define the method write_items with 2 arguments: self and handler.
if model is contained in excluded_models,
substitute data for data_value if data is not None, otherwise data_value is an empty list.
call the initialization method with argument params for the base class of the BaseMemcachedCache class.
return errors.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
substitute registry.run_checks for run_checks.
return nothing.
define the method add_truncation_text with 3 arguments: self, text and truncate set to None.
define the method _initialize_handlers with an argument self.
call the method self.filter with 3 arguments: name, func and unpacked dictionary flags.
delete entry under the attr key of the attrs dictionary.
clean is a lambda function with self and x as arguments, return value is length of x.
call the self.path function with argument path, substitute it for path.
compile self.match regular expression, substitute it for self.match_re.
if first two elements of sys.version_info equal to integers 2 ant 7, respectively,
define the method __init__ wiht 5 arguments: self, META, input_data, upload_handlers and encoding set to None.
call the method self.translate_token with an argument token, append the result to mapped_tokens.
try,
get the integer representation of the first element of bs, return it.
define the method add_arguments with self class instance and parse as the arguments.
if ValueError or TypeError exceptions are caught,
raise an NotImplementedError exception with argument string "This backend doesn't support absolute paths.".
raise an EntitiesForbidden exception with arguments name, None, base, sysid, pubid and notation_name.
open err_log flie in append mode with buffering size of input buffer, substitute the result for se.
append line to lines.
if ValidationError exception is caught,
if ValueError exception is caught,
old_style_list is boolean True.
if self.__stattag_text contains newline character,
use global variable invalid_var_format_string.
call the method self.__class__, substitute the result for result.
use global variable _supported.
call the function re.compile with 2 arguments: string '^([a-z])[:|]' and re.I, substitute the result for _url_drive_re.
if AttributeError exception is caught,
call the method language_code_re.search with an argument lang_code, if it evaluates to false,
inverse_match is boolean False.
cache_key is a tuple with 2 argumetns: format_type and lang.
for every model in model_list,
evaluate the self.get_fqdn method, return the result.
skip this loop iteration,
if filename ends with string '.mo',
if self has an attribute '_coerce',
set name attribute of self._wrapped object to value.
if not,
concatenate first site elements of s, syear and elements of s from the site incremented by integer 4 index, substitute the result for s.
call the function local, substitute the result for self._caches.
decorator stringfilter,
return boolean False.
decorator function register.filter with an argument is_safe set to boolean True.
call the function force_str with an argument: default if it is true, or if not, first element of the result of the function, get_format called with an argument string 'DATE_INPUT_FORMATS', substitute the result for format.
define the method end_serialization with an argument self.
define the method url_patterns with an argument self.
call the function render_value_in_context with 2 arguments: value and context, return the result.
collect is an empty list.
set the file position pointer at the beginning.
create lambda identity function which returns x for input parameter x, return the function.
options is an empty dictionary.
return self._wrapped.__dict__.
substitute elements of middle from the beginning to the negative length of closing, for middle.
define method __init__ with self class instance, mode string 'w+b', bufsize set to integer -1, suffix and prefix set to empty strig, dir set to None as the arguments.
call the function copy with an argument base class of the class BaseContext, substitute the result for duplicate.
msg is a string "Invalid HTTP_HOST header: %r.", replace '%r' with host.
substitute self for value.configurator.
define the method clear with argument self.
self._done is boolean True.
use return value of the self.fk.get_attname as the name of the attribute of form.instance object to set, set it to self.instance.pk.
substitute token.source for node.source.
break the execution of the smallest enclosing loop.
derive the class MultiPartParser from the object base class.
call the function _i18n_cache_key_suffix with request and cache_key as arguments, return the result.
yield v.
define the method _set_regex with arguments self and regex.
define the function make_list with an argument value.
for every k and v in self.choices,
if instance is not None,
try,
define the method incr with 4 arguments, self class instance, key, delta defaulting to integer 1 and version defaulting to None.
if data is true, substitute it for self.files, otherwise self.files is an empty dictionary.
try,
call the function urlsplit with an argument location, substitute the result for bits.
append filename to _error_files.
call the method MIMEText.__init__ with 4 arguments: self, text, subtype and charset.
from xml.dom import pulldom into default name space.
if call to the function response.has_header with string 'Last-Modified' as an argument returns boolean False,
if 'warning' is contained in kwargs,
if not,
derive the class ContextPopException from the Exception base class.
get the integer representation of the i-th element of buf, return it.
return resolved_args and resolved_kwargs.
join elements of output in a string, separated by newlines, return it.
define the method get_version with an arguments self.
node is an instance of CycleNode class, created wiht an argument values.
if name is callable object,
call the method self.get_unique_error_message with an argument unique_check, append the result to errors.
raise an AttributeError exception with an argument string "This method is available only on the view class.".
take last four elements of base and append ext to it, substitute result for ext.
if app_config.models_module is None.
call the function shutil.rmtree with 2 arguments: path_to_remove and onerror set to rmtree_errorhandler.
convert base to lowercase, if it ends with string '.tar',
return integer 0.
substitute c_ulong for ULONG_PTR.
call the function force_text with an argument ttl, substitute the result for ttl.
if Exception exception is caught,
only if form_class is not None, and if form_class has an attribute '_meta' and form_class._meta.fields is not None,
define the method get_default_prefix with an argument cls.
call the function ugettext with 3 arguments, string "%(size)d byte", string "%(size)d bytes" and bytes, replace '%(size)d with bytes, substitute the result for value.
skip this loop iteration,
call the method self.prepare_value with an argument initial_value, use it as the argument for the call to the function force_text, if the result is equal to the result of the call to the function force_text with data_value as an argument, return boolean True, otherwise return boolean False.
substitute _urllib_robotparser_moved_attributes for Module_six_moves_urllib_robotparser._moved_attributes.
_meth_func is a string "im_func".
from django.conf import settings.
if Exception, renamed to e, exception is caught,
from django.utils.encoding import force_str into default name space.
define the method created_time with arguments self and name.
value is None.
for every x in upload_handlers if x.chunk_size is true, append x.chunk_size to a list, substitute the result for possible_sizes.
* Rearrange models' order" as the result. yield string "#
call the method self.validate_name with 2 arguments: app_name and string 'app'.
return f.
if not,
from __future__ import absolute_import into default name space.
call the function flatten_result with an argument result, unpack the resulting list and zip it in the list of tuples, return the result.
return an dictionary containing 1 entry: settings.STATIC_URL for 'STATIC_URL'.
define the function static with an argument request.
define the function decorator with an argument klass.
get the value under the 'list' key of options dictionary, if key doesnt exist return False, if the return value is True,
append self.pointer to self.backout.
call the method list.__getitem__ with 2 arguments self and key, substitute the result for value.
define the method add_item_elements with 3 arguments: self, handler and item.
if string 'charset' is contained in content_params,
call the method self.compile_filter_error with 2 arguments: token and e, if it evaluates to false,
increment the lineno by the count of the newlines in self.__starttag_text.
call the method self.emit_post_migrate with arguments verbosity, interactive and database.
FILE_MODIFIED is integer 1.
if not,
call the method p.communicate, assign the result to output and errors, respectively.
call the method self.choice with an argument obj, yield the result.
call the function construct_instance with 4 arguments: self, self.instance, opts.fields and construct_instance_exclude, substitute the result for self.instance.
get the value of dictionary cache under the key cache_key, if key is not available return None, substitute it for headerlist.
if bytes is false,
for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
raise an exception,
convert _serializers into a list, return it.
call the method self.remove_potfiles.
from django.utils.encoding import force_text into default name space.
define the function truncatechars with 2 arguments value and arg.
if func is None,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
call the method _time.mktime with an argument tt, substitute the result for stamp.
if value,
define the method close with an argument self.
call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.
substitute operator.getitem for indexbytes.
define the method _createdir with argument self.
call the function forbid_multi_line_headers with 3 arguments: name, val and self.encoding, substitute the result for name and val, respectively.
doublecolon_start is integer -1.
if day_of_year is smaller than or equalt to jan1_weekday subtracted from integer 8 and jan1_weekday is greater than integer 4,
if BLOCK_CONTEXT_KEY is not contained in context.render_context,
append bit to trans_bit.
call the method parser.add_argument with 5 arguments: string '--no-location', action set to string 'store_true', dest set to string 'no_location', default as boolean False and help as a string "Don't write '#: filename:line' lines.".
define the method __getitem__ with 2 arguments: self and key.
call the unsign method from the base class of the TimestampSigner class with an argument value, substitute the result for result.
if row_data is true and None is not contained in row_data,
remove first and last character from the attrvalue, substitute it for attrvalue.
return an empty string,
lbp is integer 0.
ext_list is an empty list,
raise CommandError exception with string "The %s file has a BOM (Byte Order Mark). Django only supports .po files encoded in UTF-8 and without any BOM.", with '%s' replaced with po_path, as argument.
s_len is integer 0.
define the method handle_field with arguments self, obj and field.
call the method self.as_table, return the result.
define the method render with 2 arguments: self and context.
substitute value under the 'liveserver' key of the options dictionary for value under the 'DJANGO_LIVE_TEST_SERVER_ADDRESS' key of the os.environ dictionary.
call the method self.add_error with 2 arguments None and e.
acceptable_endblocks is a tuple with 2 elements: string 'endblock' and 'endblock %s', where '%s' replaced with block_name.
child_nodelists is an tuple with an element 'nodelist'.
help is a tuple containing a string "Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory.".
if not,
call the method registry.tags_available, sort the result and join it into a string, separate by newlines, write it to self.stdout.
if fifth and sixth elements of row are None,
call the method imp.find_module with 2 arguments: module_name and list containing element entry, assign the result to file_, _, and _, respectively.
if self.allow_empty_file and file_size are both false,
get the value under the 'output' key of the options dictionary, substitute the result for output.
from django.utils.timesince import timesince and timeuntil into default name space.
derive the class Command from the BaseCommand base class.
call the method to_delete.add with an argument model.
default_validators is a list with an element, return value of the validators.URLValidator method.
try,
substitute name for self._name.
if file path absolute_path exists,
create directories from the elements in filename.
substitute self._meta for opts.
skip this loop iteration.
call the function six.text_type with length of lines as an argument, use length of result as an argument for the call to the function six.text_type, substitute the result for width.
if not,
substitute post for self._post.
obj is None,
define the function next_char with an argument input_iter.
return default_key_func.
call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the self.feed dictionary.
call the function mark_safe with an argument, elements of bits joined into a string, return the result.
while escaped is true or ch is not equal to a string ']',
try,
call the function get_default_timezone, substitute the result for self.timezone.
substitute the last element of parts for parts.
if tzinfo equals a string 'Z',
if qs.ordered is false,
call the method numberformat.format with 6 arguments: value, result of the function get_format called with 3 arguments: string 'DECIMAL_SEPARATOR', lang and use_l10n set to use_l10n, decimal_pos, result of the function get_format called with 3 arguments: string 'NUMBER_GROUPING', lang and use_l10n as use_l10n, result of the function get_format called with an argument: string 'THOUSAND_SEPARATOR', lang and use_l10n as use_l10n and force_grouping as force_grouping, return the result.
derive the class URLInput from the TextInput base class.
call the method token.split_contents, substitute the result for bits.
define the method recipients with argument self.
for every app_dir in app_dirs,
call the method path.decode with an argument fs_encoding, return the result.
call the function smart_text with argument related_att, use the result as an argument for the call to the self.xml.characters method.
if format_module_path is None.
derive the class BaseModelForm from the BaseForm base class.
property decorator,
call the method result.setlist with the arguments: key and value.
call the __init__ method of the base class of the class URLValidator, with unpacked dictionary kwargs as argument.
remove last 2 elements from bits.
return string first element of t, '=', second element of t.
define the method _set_name with arguments self and name.
call the function pickle.load with argument f, substitute the result for exp.
if not,
substitute windll.kernel32.UnlockFileEx for UnlockFileEx.
raise an TemplateSyntaxError exception with an argument string "No named cycles in template. '%s' is not defined", where '%s' is replaced with name.
try,
if self._request_middleware is None,
if support_legacy is false,
__all__ is an list containing 6 elements: 'get_cache', 'cache', 'DEFAULT_CACHE_ALIAS', 'InvalidCacheBackendError', 'CacheKeyWarning' and 'BaseCache'
define the function pbkdf2 with 5 arguments: password, salt, iterations, dklen set to integer 0 and digest set to None.
substitute value for self.value.
get 'EMAIL_FILE_PATH' from the settings, if it exists, substitute it for self.file_path, if not substitute None for self.file_path.
empty is an instance of object class.
try,
substitute options.settings for value under the 'DJANGO_SETTINGS_MODULE' key of the os.environ dictionary.
define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
substitute settings.TEMPLATE_STRING_IF_INVALID for current.
return self.id.
num_sent is an integer 0.
compile a regex from raw string '^\d+$', substitute it for DIGIT_PATTERN.
from django.utils import six into default name space.
return value.pk.
return __wrapper__.
if self.required is true and value is false,
if ValueError or TypeError exceptions occurred,
otherwise is template is six.string_types instance,
call the method self.handle_merge with 2 arguments: loader and conflicts, return the result.
if element of targets in first row and second column is None,
get the value under the 'incomplete' key of the field.error_messages dictionary, append it to errors.
if field.rel.to._default_manager has an attribute 'get_by_natural_key',
httpd.daemon_threads is boolean True.
call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated, message, settings.SERVER_EMAIL, list of second elements of a for every a in settings.Managers and connection set to connection, as arguments, assign the result to mail.
define the method P with an argument self.
from module __future__ import unicode_literals to default name space.
try,
set class fields _request_middleware, _view_middleware, _template_response_middleware, _response_middleware and _exception_middleware to None.
endless loop,
define the method bound_data with arguments self, data and initial.
for every choice in value,
get executor.loader.graph.nodes list item at the index of the first element of targets list, get the value under the 'backwards' key of options dictionary, put previous two elements is a tuple, tuple is contained in a plan list.
call the function formatdate with 2 arguments: epoch_seconds and usegmt set to boolean True, return the result.
from collections import UserList into default namespace.
convert provided into a list and substitute it for provided.
requires_system_checks is boolean False.
call the method context.update with an argument unpacked_vars.
if not,
define the function strip_entities with an argument value.
if subcommand is contained in no_settings_commands,
call the method parser.parse with an argument tuple with an element string 'else' and end_tag, substitute the result for nodelist_true.
instantiate class Module_six_moves_urllib with an argument, string ".moves.urllib" appended to __name__, substitute it for value under the string ".moves.urllib" appended to __name__ key of the sys.modules dictionary.
* Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table" as the result.
define the function deactivate_all.
if s is not an instance of the object six.string_types,
call the function lazy with 2 arguments: func and resultclass, call the result with an argument, unpacked dictionary kwargs, substitute the result for proxy.
compare is a lambda function with arguments self, a and b, return value is boolean True if a is not b, otherwise it is False.
append '-' to generic_lang_code, if supported_code starts with it,
call the function re.sub with 3 arguments: raw string '(?u)[^-\w.]', an empty string and s, return the result.
raise an ValueError with an argument string "Non-reversible reg-exp portion: '(?P%s'" formated with ch.
if not,
if not,
append '_' to string created from first p elements of languages converted to lowercase, convert slice of language string from (p+1)-th index to the end to uppercase, append it to the previous result, return the resulting string.
substitute complain for sort.
if Exception, renamed to e, exception is caught,
yield nothing.
from django.utils import six into default name space.
from django.apps import apps into default name space.
call the method self.extra_headers.get with string 'From' and self.from_email as arguments, substitute the result for value under the 'From' key of msg dictionary.
substitute code for self.code.
call the function digest, substitute the filed digest_size of the result for hlen.
try,
if AttributeError exception is caught.
try,
from django.utils.six import StringIO into default name space.
register.tag decorator function with an argument 'if',
if name is not None,
call the function warn_about_renamed_method with 2 arguments: class_name and unpacked list renamed_method, substitute the result for wrapper.
call the function make_origin with 4 arguments: display_name, loader, name and dirs, return a tuple containing 2 elements: source and previous result.
if not,
kwargs is an empty dictionary,
add ns_pattern and extra, substitute the result for ns_pattern.
if first element of sys.version_info equals integer 3, PY3 is boolean True, otherwise it is boolean False.
position file self.file pointer at the pos position.
msg is an empty string.
for key and value in return value of the six.iterlists function called with an argument self,
define the method __iter__ with an argument self.
if not,
for every domain in domains,
call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
raise an ValueError with an argument string "'package' not set to a string".
self.resolver_match is None.
define the method pop with 3 arguments: self, k and unpacked list args.
return value under the key key of dictionary in last element of self.dicts, if it doesnt exists return otherwise.
if related_att is not None,
if value under the DEFAULT_CACHE_ALIAS key of caches dictionary is not equal to other, return boolean True, otherwise return False.
if return value of the function normcase called with an argument final_path doesnt starts with result of the function normcase, called with sep appended to base_path as an argument and results of the function normcase called twice with final_path, and base_pah are not equal and directory name of the result of the function normcase called with an argument base_path, if not equal to the result of the function normcase called with an argument base_path.
substitute first decimal_pos elements of dec_part for dec_part.
define the method configure_handler with 2 arguments: self and config.
for every message in email_messages,
import module datetime.
increment self.waiting_readers by 1.
try,
use global variable _default.
use global variable _supported.
if fd is greater or equal to integer 0.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
increment loaded_objects_in_fixture by one.
if not,
define the method __iter__ with an argument self.
define the function module_has_submodule with 2 arguments: package and module_name.
substitute the last element of args for name.
call the function MigrationExecutor with connection and self.migration_progress_callback as arguments, substitute the result fro executor.
skip this loop iteration.
define the method skip_past with 2 arguments: self and endtag.
if six.PY3 is true,
output_transaction is boolean True.
call the method self.indent with argument integer 1.
if self has an '_post' attribute,
define the method _resolve with an argument self.
define the method is_hidden with an argument self.
call the method self.xml.startElement with argument string 'natural' and an empty dictionary.
define the function is_iterable with an argument x.
substitute value under the key key of the self.COOKIES dictionary, substitute it for cookie_value.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a url() method'.
_anonymous_ is a list containing one string: '_offset'.
call the method self.__class__ with 3 arguments: an empty string, mutable is boolean True, encoding is self.encoding, substitute the result for result.
if KeyError exception is caught,
_PROTECTED_TYPES is a tuple containing next elements, six.integer_types, type of None, type of float, Decimal, detetime.datetime, datetime.date and datetime.time.
define the method _proxy_method with 3 arguments self, unpacked list args and unpacked dictionary kwargs.
if error.params is true,
if not,
derive the class RenderContext from the BaseContext base class.
increment i by integer 1,.
call the method __init__ from the base class of the class DateTimeBaseInput, with an argument attrs.
if self._dir file path does not exists,
from django.utils.functional import LazyObject into default name space.
call the method self.get_field_type with 3 arguments connection, table_name and row, assign the result to field_type, field_params, field_notes, respectively.
value under the 'primary_key' key of the extra_params dictionary is boolean True,
return output.
define the method __init__ with arguments: self, fail_silently set to boolean False and unpacked dictionary kwargs.
if f is None,
raise an exception.
call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for default_translation.
define the method send_messages with arguments self and email_messages.
from django.utils import six into default name space.
import module re.
call the function six.text_type with an argument arg, append the result to '%', format the previous with value, return the result.
if commit is true,
call the function t.render with an argument context, return the result.
for every pattern in reversed list self.url_patterns,
for every shell in available_shells,
decorator function register.filter with an argument is_safe set to boolean True.
if data is None,
msgid is a string '<%s.%s.%s%s@%s>', replace '%s' with utcdate, pid, randint, idstring and idhost, respectively.
if cc is true,
for every dict_ in self.dicts,
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a created_time() method'.
if seventh element of row is true,
substitute current_app for self.current_app.
if meta is None,
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid URL.' for 'invalid'.
if name is not contained in data,
if not,
_templatetags_modules is an empty list.
ALLOWED_VARIABLE_CHARS is a string 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.'.
define the method __setitem__ with arguments self, name and val.
substitute self.registered_checks for checks.
if label_suffix is not None substitute label_suffix for self.label_suffix, otherwise substitute return value of the function _ called with an argument ':' for self.label_suffix.
return nothing.
if TypeError exception is caught,
derive the class Media from the object base class.
call the function subclass with 2 arguments string "0001_squashed_%s", where '%s' is replaced with migration.name and app_label, substitute the result for new_migration.
call the function sql_all with 3 arguments: app_config, self.style and connection, substitute the result for statements.
define the method __setitem__ with 3 arguments: self, kay and value.
if item is not an instance of list or tuple class,
call the method MIMEMultipart.__setitem__ with arguments self, name and val.
substitute size for self._size.
define the function _checkLevel with an argument level.
in the string "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)", replace all the occurrences of: string '%s' with self._func_path, self.args, self.kwargs, self.url_name, self.app_name and self.namespaces, respectively.
if second element of the i-th row of relations equals table_name, rel_to is string 'self', otherwise call the method table2model with second element of the i-th row of relations and substitute it for rel_to.
cc is a dictionary populated with items by calling function _to_tuple with el as an argument, for every el in split string cc_delim_re, with delimiter being the value of dictionary response under the key 'Cache-Control'.
derive the class WSGIRequest from base class http.HttpRequest.
if self.LibraryValueNotFoundException exception is caught,
if status is not None.
call the method DjangoSafeDumper.add_representer with arguments decimal.Decimal and DjangoSafeDumper.represent_decimal.
define the method decompress with 2 arguments: self and value.
from django.core.exceptions import ValidationError into default name space.
call the method execute form the base class of the class Command, with 2 arguments: unpacked list args and unpacked dictionary options.
define the method urlencode with 3 arguments: self and safe set to None.
if value.tzinfo is None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to None, return boolean True, otherwise return boolean False.
define the method _format_value with 2 arguments: self and value.
if second element of data_list is contained in self.empty_values,
decorator stringfilter,
raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a get() method' as argument.
return value.
define the method __init__ with arguments self, argument list args and dictionary of arguments kwargs.
from django.utils.deprecation import RenameMethodsBase and RemovedInDjango19Warning into default name space.
otherwise if self.nodelist_false is true,
define the method _populate with an argument self.
if not,
if not,
append ')' to third element of bit, substitute it for sentinal.
skip this loop iteration.
substitute name for self.name.
delete _active.value.
define the method tzname with 2 arguments: self and dt.
if not,
from django.utils.translation import get_language into default name space.
if UnicodeEncodeError exception is caught,
for every i and char in enumerated text,
call the method copy.deepcopy with an argument self.widgets, substitute the result for obj.widgets.
call the method fixture_name.rsplit with 2 arguments: character '.' and integer 2, substitute the result for parts.
if not,
while model_dependencies is true,
call the method __getitem__ with an argument key from the base class of the class DictWrapper, substitute the result for value.
from __future__ import unicode_literals into default name space.
call the method f.seek with an argument integer 0.
if NameError exception is caught,
call the nethod self._isdst with an argument dt, if it evaluates to true,
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
if six.PY2 is true,
define the method decompress with 2 arguments: self and value.
call the method operator.attrgetter with an argument _func_defaults, substitute the result for get_method_defaults.
define the function all_valid with an argument formsets.
call the function clean_ipv6_address with arguments value and self.unpack_ipv4, return the result.
skip this loop iteration,
raise an TemplateSyntaxError exception with an argument "Searching for value. Expected another value but found end of string: %s", where '%s' is replaced with subject.
call the function import_string with argument backend.
get the value under the 'content-type' key of the info dictionary, substitute it for content_type.
raise an ValueError exception with an argument string 'Cannot resolve %r: %s', formated with s and e.
call the method handler.addQuickElement with 3 arguments: string 'dc:creator', value under the 'author_name' key of the item dictionary and dictionary with an entry: "http://purl.org/dc/elements/1.1/" for "xmlns:dc".
for every key and value in data.items method return value,
return s.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
from django.forms.fields import IntegerField and BooleanField into default name space.
get the hash value of the tup, substitute it for self.hashvalue.
 Failed to install index for %s.%s model: %s\n" as argument, with all occurrences of '%s' replaced with app_name and model._meta.object_name and e, respectively.
append '.' to frag, append the result to used.
return context.render_context.
self._callback is None.
call the method s.getvalue, return the result.
call the method os.chdir with an argument our_home_dir.
derive the class UTC from the tzinfo base class.
if not,
help is a string "Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available.".
if not,
definition is an empty dictionary,
try,
call the self.indent method with integer 0 as an argument.
return boolean False.
define the method handle_data with 2 arguments self and d.
from __future__ import unicode_literals into default name space.
if value is true,
derive the class BaseLoader from the object base class.
if attrs is true,
import module sys.
format a string "(?P<%s>%s)" with groupid and tok.regex, append it to the parts.
call the function timesince with an argument value, return the result.
if fixture_name is not equal to string 'initial_data' and fixture_files is false,
from django.core.management.base import BaseCommand and CommandError into default name space.
ERROR is integer 40.
call the method self._isdst with an argument dt, use it as an key to get the value from the _time.tzname dictionary, return it.
from binascii import Error as BinasciiError into default name space.
close zfile stream.
call the value.natural_key method, substitute the result for natural.
append ':' and ipv4_address to result.
call the method parser.compile_filter with second element of bits as an argument, substitute the result for viewname.
return value under the name key of the sys.modules dictionary.
if LookupError exception is caught,
convert priority into a floating point integer, substitute it for priority.
if signal has an attribute 'SIGTTOU',
define the function server_bind with an argument self.
define the method __init__ with 3 arguments: self, attrs set to None and check_test set to None.
if pattern is an instance of RegexURLResolver class,
add params to extra_params dictionary.
call the method content.decode with an argument string 'utf-8', substitute it for content.
raise an ValueError exception with an argument string 'Unable to set formatter %r: %s' formated with formatter and e.
new_ip is an empty list,
if filter_name is contained in self.filters,
define the method get_field_type with 4 arguments: self, connection, table_name and row.
value under 'localize' key of kwargs dictionary is boolean True.
raise a exception of CommandError class, with string "Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?", replace all the '%s' occurrences with migration_name and app_label, respectively.
tt is an tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the function dt.weekday, integer 0 and integer 0.
if self.body is true,
define lambda function that returns self.file.writelines field, use it as an argument for property function, put the result in writelines.
raise an RawPostDataException exception with an argument string "You cannot access body after reading from request's data stream".
define the method _get_num_pages with an argument self.
call the method __init__ with 2 arguments: self.states and string 'reg' from the base class of the class JsLexer.
define the method handle_m2m_field with argument self, obj and field.
define the method colorize with 3 arguments: text set to an empty string, opts set to an empty tuple and unpacked dictionary kwargs.
return a string '%02d' formated with self.data.month.
if base_lang is contained in settings.LANGUAGES_BIDI, return boolean True, if not, return boolean False.
define the function method_decorator with an argument decorator.
call the method self.add_truncation_text with 2 arguments: if end_index is greater than zero, first end_index elements of text, if not an empty string, and truncate, return the result.
inplural is boolean False.
call the function get_language, substitute the result for language_code.
call the method parser.add_argument with 5 arguments: string '--noinput', action set to 'store_false', dest set to 'interactive', default set to boolean True, help set to string 'Tells Django to NOT prompt the user for input of any kind.'.
define the method U with an argument self.
silent is boolean False.
daemonize is boolean False.
derive the class ModelMultipleChoiceField from the ModelChoiceField base class.
write 79 '-' characters into self.stream file stream.
substitute root for oldroot.
for every tag in tags, if return value of the method checks.tag_exists called with an argument tag, evaluates to false, use tag as an argument to call the iterator method next, substitute the result for invalid_tag.
call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated, message, settings.SERVER_EMAIL, list of second elements of a for every a in settings.Managers and connection set to connection, as arguments, assign the result to mail.
try,
if not,
call the function blankout with 2 arguments: p and 'F', write the result to out.
_format_modules_cache is an empty dictionary.
import termios module.
call the method self.add_filters with 2 arguments: result and filters.
from django.conf import settings into default name space.
if self.hint exists, replace '%s' in a string "\n\tHINT: %s" with value of self.hint, substitute it for hint, otherwise hint is an empty string.
FILTER_SEPARATOR is a string '|'.
sum absolute p with units an integer 1, substitute the result for prec.
otherwise if closing_tag is true,
get the length of the options, use it as a starting index for the slicing arg list, substitute it for self.test_runner.
from xml.sax import handler into default name space.
call the function get_language, substitute the result for language_code.
if node is not an instance of ExtendsNode,
substitute new_method_name for new_method_name.
call the method operator.attrgetter with an argument _func_closure, substitute the result for get_method_closure.
if boundary is an instance of six.text_type class,
return nothing.
evaluate the function get_system_encoding(), substitute the return vale for DEFAULT_LOCALE_ENCODING.
 %s%s' with: line and character ',' if i is lesser than length of table_output decremented by one, or with an empty string if its not, append the resulting string to full_statement.
return ipv4_unpacked.
style is an instance of the dummy class.
if not,
substitute first args for other_dict.
if sender is true and sender attribute 'handles_files' is also True,
return an instance of a BlockNode class, created with 2 arguments: block_name and nodelist.
do nothing.
raise an ImproperlyConfigured with an argument string "Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited."
if not,
errors is an empty list.
if field.serialize is true,
return boolean False.
get is a tuple containing elements generated by the call to the function pformat with an argument GET_override, if GET_override is not None, or otherwise generated with the call to the function pformat with an argument request.GET.
derive the class BaseValidator form the object base class.
from functools import total_ordering.
split ip_str into parts by ':', for every hextet in the result,
otherwise if size is less than length of self.buffer,
return list_ and boolean False.
define the method render with an argument self.
property decorator,
substitute self.fk.name for name.
call the method t.to_language, return the result.
if StopIteration exception,
return self._count.
call the function six.iteritems with an argument dict_, for every item in the result,
define the method is_ajax with an argument self.
call the private dict.__setitem__ method with self class instance, key and result of the function http_cookies.Morsel() as arguments.
if not,
paths is a list containing results of the function force_text called with an argument p, for every p in paths.
references_to_delete is an empty dictionary.
try,
define the method __init__ with arguments self and request defaulting to None.
from django.http import Http404 into default name space.
substitute the '%s' in string 'views.decorators.cache.cache_page.%s.%s.%s.%s' with key_prefix, method, return value of method url.hexdigest(), return value of method ctx.hexdigest, respectively, substitute it for cache_key.
call the method m.group with an argument string 'value', use the result as an argument for the call to the force_str, substitute the result for plural_form_line.
call the method self.expression, substitute the result for retval.
define the method start_doctype_decl with an arguments self, name, sysid, pubid and has_internal_subset.
try,
if message is not None,
define the method parse_file_upload with 3 arguments: self, META and post_data.
add model to excluded_models set.
if self.takes_context is true,
date_keys is a tuple with 2 arguments: strings 'updateddate' and 'pubdate'.
call the method handler.startElement with 2 arguments: string "item" and result of the method self.item_attributes with an argument item.
call the method parser.add_argument with 5 arguments: string '--empty', action as a string 'store_true', dest as a string 'empty', default set to boolean False and help as a string "Create an empty migration.".
substitute self._setupfunc for repr_attr.
return an instance of ModelChoiceIterator class, created with an argument self.
substitute source for e.django_template_source.
call the function handle_m2m with an argument relobj.
if self does not has an '_post' attribute.
_iteritems is a string "items".
from django.db import connection into default name space.
singular is an empty list.
call the method self.get_available_name with argument name, substitute it for name.
call the method self._callback_strs.add with an argument pattern._callback_str.
call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
call the method simple_url_re.match with an argument middle, if it evaluates to true,
call the function _add_doc with 2 arguments: b and string """Byte literal""".
if e.errno is not equal to errno.ENOENT,
if conflicts is true and self.merge is false,
define the method _iterlists with an argument self.
if not,
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
format string '<a href="%s"%s>%s</a>' with lead, middle and trail, use it as an argument for the call to the function mark_safe, substitute the result for i-th element of words.
if value object the 'unique_id_is_permalink' key of the item dictionary is an instance of bool type,
derive the class FixedOffset from the tzinfo base class.
if LookupError exception is caught,
if weight is greater or equal to integer 6,
from django.utils import formats into default name space.
from django.core.management.base import AppCommand into default name space.
attachment is an instance of a class SafeMIMEText, created with arguments: content, subtype and encoding.
from django.core.servers.fastcgi import FASTCGI_OPTIONS into default namespace,
raise an TemplateSyntaxError exception with an argument string "'%s' received multiple values for keyword argument '%s'", where '%s' are replaced with name and param.
define the method get_full_path with an argument self.
substitute length of self.loopvars for num_loopvars.
_func_code is a string "func_code".
substitute variables for self.vars.
call the method b64encoded.decode with string 'latin1' as argument, substitute the result for b64encoded.
slit by whitespace the value under the 'COMP_WORDS' key of the os.environ dictionary, substitute the result without the first element for cwords.
value is an instance of a class Decimal created with value as an argument.
define the method validate with 2 arguments: self and value.
sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, return the result.
import module django.
get '_decorated_function' attribute from the func object, substitute it for _dec._decorated_function, if it doesnt exist, substitute func for _dec._decorated_function.
replace '%s' in string "%s = %s  ###" with key and value under the key key of the user_setting dictionary, append it to the output.
if other is an instance of self.__class__ and, self.limit_value equals to other.limit_value, and self.message equals to other.message, and self.code equals to other.code, return boolean True, otherwise return boolean False.
define the method __repr__ with an argument self.
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
if nodelist.contains_nontext is true,
validate_ipv4_address is a instance of a RegexValidator class, created with 3 arguments: ipv4_re, return value of the call to the function _ with an argument string 'Enter a valid IPv4 address.' and string 'invalid'.
if KeyError exception is caught,
concatenate package_name, string '.' and module_name, substitute it for full_module_name.
if self.is_bound is true,
set value under the 'stream' key of kwargs dictionary to None.
call the method handler.endElement with an argument string 'entry'.
sum day_of_year, result of the subtraction of weekday from integer 7 and subtraction of integer 1 from jan1_weekday.
otherwise if _locs_ is None,
define the method serialize_headers with an argument self.
define private method __call__ with self class instance, environ and start_response as the arguments.
get the position of the self.file file pointer, substitute it for pos.
multiply offset.days, integer 24 and integer 60, sum the result with floored result of division of offset.seconds, and integer 60, substitute the result for timezone.
get the value under the key 'interactive' of options dictionary, substitute it for interactive.
call the function mark_safe with an argument result, return it.
try,
from __future__ import unicode_literals into default name space.
call the function force_text with an argument val, if the result is not contained in pks,
convert object self to a dictionary, return it.
if settings.TEMPLATE_DEBUG and display_name are both true,
if secure is true,
call the method router.allow_migrate with 2 arguments: self.using and obj.object.__class__, if it evaluates to true,
if Resolver404, renamed to e, exception is caught,
if response.status_code is lesser than integer 200 and grater or equal than 100, or response.status_code equals to integer 204 or 304,
define the method handle with self class instance, list of arguments fixture_labels and dictionary options as arguments.
append tuple with 2 elements: migration.app_label and migration.name to replaces.
define the method __init__ with 2 arguments self and file.
from django.utils import six into default name space.
return self.text.
call the method text.splitlines with an argument boolean True, for every line in the result,
from email.mime.text import MIMEText into default name space.
import module io.
call the method message.message, substitute the result for msg.
call the method __init__ from the base class of the class SplitHiddenDateTimeWidget, with 3 arguments: attrs, date_format,  and time_format.
call the function self.filepath.resolve with an argument context, substitute the result for filepath.
define the method as_json with 2 argumens self and escape_html set to boolean False.
try,
create a instance of a class BadSerializerModule from the object base class, with elements Deserializer set to bad_serializer and Serializer set to bad_serializer.
define the method _create_message with arguments self and msg.
if ValueError exception is caught,
define the method __iter__ with an argument self.
return results.
call the function ugettext with an argument message.
define the method handle with 3 arguments: self, unpacked list test_labels and unpacked dictionary options.
define the method tag with 3 arguments: self, name set to None and compile_function set to None.
if file self is not closed,
from django.utils.text import Truncator, wrap and phone2numeric into default name space.
if text is an empty string and length of opts equals integer 1 and first element of opts equals string 'reset',
for f in file_list,
call the method base64.b64encode with argument pickled, substitute the result for b64encoded.
get the value under the if iso_input not in val key of the ISO_INPUT_FORMATS dictionary, if it doesnt exists return an empty tuple, for every iso_input in the result,
try,
call the method comment_re.sub with an arguments: raw string '\1' and line, strip the whitespaces surrounding the result, return it.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
return value.
from django.db.models import ForeignKey.
define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.
from django.conf.locale import LANG_INFO.
call the method pulldom.parse with arguments: self.stream and return value of the method self._make_parser, substitute the result for self.event_stream.
if os has an attribute 'utime',
return a string "<%s: %s>" formated with self.__class__.__name__, and a result of the method __repr__ called from instance of base class of the MultiValueDict class.
if self.regex is not an instance of six.string_types,
define the function cleanup_url with an argument url.
join output into a string, separated by newline characters, use it as an argument for the call to the mark_safe, return the result.
substitute pickled for value under the key key of self._cache dictionary.
derive class Options from the base class object.
call the method self.configurator.convert with an arugment value, substitute the result for result.
call the function force_text with an argument ttl, substitute the result for ttl.
if six.PY2 is true,
if ImportError exception is caught,
call the function mark_safe with an arguments: for every n in nodelist results of the function force_text called with an argument n,  joined in a string, return the result.
call the method Model._meta.get_field with an argument field_name, substitute it for field.
if length of bits is smaller than integer 1,
define the method full_clean with an argument self.
derive the class ModelFormMetaclass from the DeclarativeFieldsMetaclass base class.
message_context is None.
substitute a tuple with 2 elements: template and None, for self.find_template_cache dictionary value under the key key.
raise an TemplateSyntaxError exception with an argument string "'%s' tag with name '%s' appears more than once", substitute '%s' with first element of bits and block_name, respectively.
substitute ClearableFileInput for widget.
if self.path is lesser than other.path, return boolean True, otherwise return boolean False.
call the method serializers.deserialize with 4 arguments: ser_fmt, fixture, using set to self.using, and ignorenonexistent set to self.ignore, substitute the result for objects.
if this_bases is None,
call the function datetime.datetime with 3 arguments, now.year, now.month and now.day, substitute the result for now.
endless loop,
if e.is_serious method evaluates to true, call the function color_style, on the result call the method ERROR with result of the  force_str called with an argument e, if not call the function color_style on the result call the method ERROR with result of the  force_str called with an argument e, for every e in issues, formatted is a tuple containing the previous result.
if mw_instance has an attribute named 'process_template_response'.
call the method bmatch.group with an argument integer 1, if it evaluates to true,
otherwise if self.name exists and self.name file path exists,
import module threading.
if inhibit_post_migrate is false,
if self.no_obsolete is true,
convert col_name to lowercase, on the result call the method find with an argument string '__', if the result is greater of equal to integer 0,
return new_name, field_params and field_notes.
WEEKDAYS_ABBR is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Mon' for 0, result of the call to the function _ with an argument string 'Tue' for 1, result of the call to the function _ with an argument string 'Wed' for 2, result of the call to the function _ with an argument string 'Thu' for 3, result of the call to the function _ with an argument string 'Fri' for 4, result of the call to the function _ with an argument string 'Sat' for 5, and result of the call to the function _ with an argument string 'Sun' for 6. WEEKDAYS_REV is an dictionary with 7 entries: 0 for 'monday', 1 for 'tuesday', 2 for 'wednesday', 3 for 'thursday', 4 for 'friday',
substitute buffer for memoryview.
define the function activate with an argument language.
while i is lesser than length of subject and i-th element of subject is not an empty space or tab character,
append self.data.day to the value under the self.data.month key of the self.year_days dictionary, substitute the result for doy.
delete the value under the header converted to lowercase key of the self._headers dictionary.
append f.name to exclude.
if self is not contained in context.render_context,
substitute smtplib.SMTP_SSL for connection_class if self.use_ssl is true, if not substitute smtplib.SMTP for connection_class.
try,
derive the class EmailInput from the TextInput base class.
incomment is boolean False.
call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value, and format, call the method date on the result, return the result.
raise an CommandError with an argument string "Unable to find a locale path to store translations for file %s", where '%s' is replaced with file_path.
last element of result is an instance of Choice class, created with an argument list with 2 elements: None and last element of result.
call the method parser.add_argument with 3 arguments: string 'args', metavar set to self.label and nargs set to '+'.
otherwise if common_prefix is None,
for every i and line in enumerated iterable lines,
call the method self._text_words with 2 arguments length and truncate, return the result.
if keys is true,
define the function activate with an argument timezone.
from __future__ import unicode_literals into default name space.
define the function dictConfig with an argument config.
call the method self._existing_object with an argument pk, substitute the result for value under the 'instance' key of kwargs.
sum the result of the method s.get_data and s.rawdata, return the result.
call the method clean with an argument value from the base class of the class TypedChoiceField, substitute the result for value.
cached_property decorator,
result is an instance of SimpleLazyObject class, created with an argument self._setupfunc.
call the method formats.sanitize_separators with an argument value, substitute the result for value.
if parent is false,
define the function smart_split with an argument text.
define the method language with an argument self.
from django.utils.encoding import force_text and force_str into default name space.
return a tuple wit 2 elements: _lazy_proxy_unpickle and tuple with 3 elements: func, self.__args, self.__kw and resultclasses.
if value under the 'pubdate' key of the item dictionary is not None,
sublist_item is None.
for every root, dirs and files in subdirectory tree starting from the base dir template_dir,
requires_system_checks is boolean False.
substitute key for result.key.
app_configs is None.
if not,
join self.path and f in path, substitute the result for full_file.
substitute value under the name key of the toks dictionary for tok.
substitute package.__name__ for package_name.
if 'fields' attribute of meta is None, or if it doesnt exists if fields is None and if 'exclude' attribute of meta is None, or if it doesnt exists if exclude is None.
define the method enter_command with 3 arguments: self, command and token.
raise an TypeError exception with an argument string "end must be None or a string".
return _default.
initial_set is set created out of return values of the function force_text called with an argument value, for every value in result of the method self.prepare_value called with an argument initial.
if length of hextet is greater than integer 1,
try,
call the method HttpResponse.content.fset with 2 arguments: self and value.
split value into words, return the length of the result.
result is an integer 0.
substitute autoescape for self.autoescape.
if old_style_list is false,
call the function io.open with 3 arguments: pofile, string 'w' and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:
if other is an instance of Promise class,
return is boolean False.
if TypeError or ValueError exceptions are caught,
if val is not None,
call the function strip_tags with an argument value, return the result.
if over_bytes is true,
call the method self._reverse_with_prefix with 4 arguments: lookup_view, an empty string, unpacked list args and unpacked dictionary kwargs.
from django.core.exceptions import ValidationError into default name space.
import module warnings.
output and hidden_fields are both empty lists.
call the function escape with an argument value, return the result.
call the __init__ method with stream_class(content) and name set to name arguments, from the base class of the ContentFile class.
substitute stream for self.stream.
call the method match.groups with 2 arguments: key and value.
property decorator,
define the method __setitem__ with 3 arguments: self, header and value.
derive the class _OFFSET_UNION from the Union base class.
if not,
remove config dictionary element under 'level' key, if it exists substitute it for level, if not, level is None.
define the function render_value_in_context with 2 arguments: value and context.
define the method __init__ with 3 arguments: self, attrs set to None and choices set to an empty tuple.
call the cursor.execute method with sql as argument.
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database', default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a specific database to load fixtures into. Defaults to the "default" database.'
set attr.name attribute of the Module_six_moves_urllib_parse object to attr.
call the method self.create_token with 3 arguments: last_bit, tuple with 2 elements: upto and sum of upto and length of last_bit, and boolean False, append the result to result.
if options.settings is true,
if e.errno equals to errno.EEXIST,
substitute field.queryset for self.queryset.
if file_obj is true,
call the function time.gmtime with argument timeval, use string '%Y%m%d%H%M%S' and the previous result as an argument for the call to the time.strftime function, substitute the result for utcdate.
define the method e with an argument self.
return boolean True.
write errors to self.stdout.
if ValueError exception is caught,
substitute '%s' in string '%s-%s' with self.prefix and field_name and return it, if self.prefix is true, if not return field_name.
to_unicode is an lambda function with an argument s, result is the result of the function force_text, called with 2 arguments: s and string_only as boolean True.
from django.conf import settings into default name space.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
if the boolean return vale of the call to the function is_protected_type(s) and string_onlys are boolean True,
call the method self.queryset.filter with an argument, unpacked dictionary with an entry: value for string '__in' appended to key, substitute the result for qs.
return value.
return message.
convert value to an integer, return it.
decorator function register.filter with an argument is_safe set to boolean True.
do nothing.
if IndexError exception is caught,
substitute input_data for self._input_data.
if is_templatized is true,
append decimals to parts.
remove the value under the 'ignorenonexistent' key from the options dictionary, assign it to the ignore, if the entry doesnt exists, substitute boolean False for ignore.
substitute key for result.key.
substitute value for the value under the key key of self._cache dictionary.
substitute first, second and second elements of bits for yes, no, maybe, respectively.
if f.blank is false and form_field.required is false and field_value is contained in form_field.empty_values,
otherwise if total_forms is grater than self.max_num is grater or equal to integer 0,
call the method self._send with argument message, substitute the result for sent.
return boolean False.
if not,
if rhs is an instance of SafeText,
substitute _itervalues for itervalues.
if not,
get the value under the 'exclude' key of the options dictionary, substitute it for exclude.
if ValidationError exception is caught,
define the method empty_variable with 2 arguments: self and token.
call the function re.compile with an argument raw string "^\s*endblocktrans$", substitute the result for endblock_re.
derive the class BaseMemcachedCacheMethods from RenameMethodsBase the base class.
call the method connection.introspection.table_names, substitute the result for tables.
if ImportError exception is caught,
if self.active_writers equals integer 0 and self.waiting_writers equals integer 0 and self.active_readers equals integer 0,
define the method end_object with arguments self and obj.
skip this loop iteration.
add key to the self.bad_cookies set.
delete the value under the key key of the self._expire_info dictionary.
if value under the name key of the sys.modules dictionary is not None, return boolean True, otherwise return boolean False.
derive the class StringOrigin form the base class Origin.
convert num to an integer, substitute the result for length.
substitute tagtype for self.tagtype.
from django.middleware.csrf import get_token into default name space.
from django.utils.deconstruct import deconstructible into default name space.
if ValueError, InvalidOperation, TypeError or UnicodeEncodeError exceptions are caught,
call the m2m_convert function with an argument c, for every c in return value of the method node.getElementsByTagName, with an argument string 'object', return the result.
if truncate_text is true,
default_error_messages is an dictionary containing entry: return value of the function _ called with an string 'This field is required.' for 'required'.
value under the self.var_name key of the context dictionary is an empty list.
substitute _iterkeys for __iter__.
call the function iter with an argument patterns.
call the method self.val_expr.resolve with an argument context, substitute the result for value.
return message.
return settings.LANGUAGE_CODE.
make target_dir directory,
do nothing.
define the method size with arguments self and name.
strip url of surrounding '/' characters, substitute it for tmp.
import module errno.
delete first element of bits.
label is an empty string.
if re.error, renamed to e, is caught,
derive the class UnreadablePostError from the base class IOError.
substitute key for result.key.
call the method self.create_token with 2 arguments bit and in_tag, append the result to result.
from django.utils.module_loading import import_string into default name space.
substitute func for self.func.
return an empty string.
call the method FASTCGI_OPTIONS.copy, substitute the result for options.
for every path in paths,
call the function user_function with 2 arguments: unpacked list args and unpacked dictionary kwds, substitute the result for result.
return default.
evaluate function tag.lower, without the arguments, put the result in the self.cdata_tag.
return an empty string.
call the method self.data.timetuple, use the result as an argument for the call to the function time.mktime, return result converted into an integer.
decorator python_2_unicode_compatible,
if prefix is None,
raise an TemplateSyntaxError exception with an argument string "'for' statements should use the format 'for x in y': %s", where '%s' is replaced with token.contents.
if sub_match is true,
if not,
define the method __copy__ with an argument self.
parser is an instance of MultiPartParser class, created with 4 arguments: META, post_data, self.upload_handlers and self.encoding.
if not,
if tt.tm_isdst is greater than intger 0, return boolean True, otherwise return boolean False.
__all__ is a list of strings, 'SimpleCookie', 'parse_cookie', 'HttpRequest', 'QueryDict', 'RawPostDataException',
derive the class FixUnicode from the base class fixer_base.BaseFix.
if not,
url is a string 'mailto:%s@%s' formated with local and domain.
define the method __init__ with arguments self, context, base, sysid and pubid.
templatetags_modules_candidates is an list with an argument string 'django.templatetags'.
if site is contained in sites2,
__all__ is a tuple containing strings: 'Storage', 'FileSystemStorage', 'DefaultStorage' and 'default_storage'.
closed is a property object with _get_closed as a getter method.
call the method apps.get_app_configs, for every app_config in the result,
derive the class SplitDateTimeWidget from the MultiWidget base class.
define the method page with self class instance and number as arguments.
substitute value for self._encoding.
call the function empty_form with 3 arguments: auto_id as self.auto_id, prefix set to the return value of the self.add_prefix method, called with string '__prefix__' as an argument and empty_permitted as boolean True, substitute the result for form.
if las equals integer 2,
kwargs is a dictionary created with tuples with 2 elements: k and value under k key of config dictionary, for every k in config, only if result of the function valid_ident called with an argument k evaluates to true.
from django.db.migrations.loader import MigrationLoader and AmbiguityError into default name space.
call the function call_command with string 'flush', verbosity set to greater element, self.verbosity decremented by 1 or integer 0, interactive set to boolean False, database set to db, reset_sequences set to boolean False, inhibit_post_migrate set to boolean True.
unpack dictionary final_attrs, map the values through force_text function with an argument v and convert it to a dictionary, again, substitute the result input_attrs.
if use_grouping is true and grouping is greater than integer 0, use_grouping is boolean True, otherwise it is boolean False.
call the signals.got_request_exception.send method with sender set to type of the self class instance and request set to request.
return an empty string.
return raw_data.
define the function get_quantifier with 2 arguments ch and input_iter.
define the method validate_number with self class instance and number as arguments.
call the method self.setlistdefault with an argument key, append value to the result.
define the method new with 2 arguments: self and values set to None.
if length of bits equals integer 4,
default_validators is an empty list.
if self.field.empty_label is not None,
return an instance of SafeBytes, created with an argument data.
substitute charset for self.charset.
from itertools import product into default name space.
from io import BytesIO into default name space.
call the as_bytes method on the return value of the message.message method append to it '\n' character, use it as the argument for the call to the self.stream.write method.
call the method parser.next_token, substitute the result for token.
call the method self.validate_key with argument key.
if value is true and method self.valid_value called with an argument value evaluates to false,
do nothing.
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
substitute elements of s from the end index to end for s.
derive class _LazyModule from the types.ModuleType base class.
call the method parser.add_argument with arguments: string '--database', action set to string 'store', dest set to string 'database', default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database onto which to open a shell. Defaults to the "default" database.'.
get 'getvalue' attribute of the self.stream object, if it exists and is callable,
return iri.
REASON_PHRASES is a dictionary containing 59 initial entries: 'CONTINUE' for 100, 'SWITCHING PROTOCOLS' for 101, 'PROCESSING' for 102, 'OK' for 200, 'CREATED' for 201, 'ACCEPTED' for 202, 'NON-AUTHORITATIVE INFORMATION' for 203, 'NO CONTENT' for 204, 'RESET CONTENT' for 205, 'PARTIAL CONTENT' for 206, 'MULTI-STATUS' for 207, 'ALREADY REPORTED' for 208, 'IM USED' for 226, 'MULTIPLE CHOICES' for 300, 'MOVED PERMANENTLY' for 301, 'FOUND' for 302, 'SEE OTHER' for 303, 'NOT MODIFIED' for 304, 'USE PROXY' for 305, 'RESERVED' for 306, 'TEMPORARY REDIRECT' for 307, 'PERMANENT REDIRECT' for 308, 'BAD REQUEST' for 400, 'UNAUTHORIZED' for 401, 'PAYMENT REQUIRED' for 402, 'FORBIDDEN' for 403, 'NOT FOUND' for 404, 'METHOD NOT ALLOWED' for 405, 'NOT ACCEPTABLE' for 406, 'PROXY AUTHENTICATION REQUIRED' for 407, 'REQUEST TIMEOUT' for 408, 'CONFLICT' for 409, 'GONE' for 410, 'LENGTH REQUIRED' for 411, 'PRECONDITION FAILED' for 412, 'REQUEST ENTITY TOO LARGE' for 413, 'REQUEST-URI TOO LONG' for 414, 'UNSUPPORTED MEDIA TYPE' for 415, 'REQUESTED RANGE NOT SATISFIABLE' for 416, 'EXPECTATION FAILED' for 417, 'I'M A TEAPOT' for 418, 'UNPROCESSABLE ENTITY' for 422, 'LOCKED' for 423, 'FAILED DEPENDENCY' for 424, 'UPGRADE REQUIRED' for 426, 'PRECONDITION REQUIRED' for 428, 'TOO MANY REQUESTS' for 429, 'REQUEST HEADER FIELDS TOO LARGE' for 431, 'INTERNAL SERVER ERROR' for 500, 'NOT IMPLEMENTED' for 501, 'BAD GATEWAY' for 502, 'SERVICE UNAVAILABLE' for 503, 'GATEWAY TIMEOUT' for 504, 'HTTP VERSION NOT SUPPORTED' for 505, 'VARIANT ALSO NEGOTIATES' for 506, 'INSUFFICIENT STORAGE' for 507, 'LOOP DETECTED' for 508, 'NOT EXTENDED' for 510 and 'NETWORK AUTHENTICATION REQUIRED' for 511.
call the function lazy with 2 arguments: lambda function with unpacked dictionary kwargs as an argument and return value an instance of NumberAwareString class and NumberAwareString, call the result with an argument unpacked dictionary kwargs, substitute the result for proxy.
pk_value is None.
yield string 'day' as an return value of the generator.
call the function local, substitute the result for _prefixes.
define the method create_var with 2 arguments: self and value.
try,
get _assertRaisesRegex attribute of the self object, call the result with 2 arguments: unpacked list args, and unpacked dictionary kwargs, return the result.
join return value of the function six.text_type called with an argument self.management_form and forms into a string, separated by newline, use it as an argument for the call to the function mark_safe, return the result.
call the method self.handle_starttag, with tag and attrs as the arguments.
return integer 1 and ch2.
raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary, code set to an string 'invalid_choice' and dictionary params with an entry: choice for 'value'.
derive the class Deserializer from the base.Deserializer base class.
if lookup equals a string 'date',
if new_errors is not an iterable object raise an error with error message "The function %r did not return a list. All functions registered with the checks registry must return a list.", with '%s' replaced by value of check.
if vale is None or an empty string,
remove entry under 'initial' key of the kwargs dictionary, substitute it for self.initial_extra if it exists, if not self.initial_extra is None.
define the function compress_sequence with an argument sequence.
call the method token.contents.split, substitute the result for args.
raise KeyError exception with an argument key.
raise a TypeError exception,
if self.stream is not None,
call the method obj.save.
call the function select_template with 2 arguments: template_name, dirs, substitute the result for t.
temp_lib is an instance of Library class.
call the method six.unichr with an argument c, return the result.
substitute DEFAULT_ATTACHMENT_MIME_TYPE for mimetype.
if field equals NON_FIELD_ERRORS,
INITIAL_FORM_COUNT is a string 'INITIAL_FORMS'.
call the method six.iteritems with an argument dict_, for every k and v in the result,
call the method make_key with arguments key and version from the base class of the class BaseMemcachedCache, use it as an argument for the call to the function force_str, return the result.
if self._errors is None,
output is an empty list.
return an instance of a class WidthRatioNode, created with 4 arguments: result of the method parser.compile_filter, called with an argument this_value_expr, result of the method parser.compile_filter called with an argument max_value_expr, return value of the method parser.compile_filter called with an argument max_width and asvar as asvar.
try,
call the method self.start_serialization
supports_microseconds is boolean False.
call the method self.style.MIGRATE_HEADING with an argument string "Will squash the following migrations:", write it to self.stdout.
convert the value under the 'SERVER_NAME' key of the self.META dictionary to a string, substitute result for server_port.
call the method data.items, for every medium and paths in the result.
if varargs is None,
split into two parts token.contents by None, substitute the parts for _ and rest, respectively.
t is an instance of Template class, created with 2 arguments output and name set to filepath.
call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
chunk_size is an integer 1024.
define the method delete with self class instance, key and version defaulting to None as arguments.
if use_tls is None substitute settings.EMAIL_USE_TLS for self.username, if not substitute use_tls for self.use_tls.
return end ans next.
if commit is true,
return.
otherwise if, type of s doesnt equal to six.text_type,
define the method __init__ with arguments self, name, sysid and pubid.
import module re.
if match is true and call to the method match.group with an argument integer 1 evaluates to true, kwarg_format is boolean True, otherwise it is boolean False.
convert per_page into an integer and substitute it for self.per_page.
do nothing.
convert cls to a dictionary, convert the result into a set and convert convert into a set, roots is a set of differences of the two previous sets.
import pickle.
append list containing string '--no-location' to self.xgettext_options.
substitute first element of args for arg.
if content has an 'chunks' attribute,
from django import http into default name space.
if self.data.hour equals integer 0,
if value equals k or text_value equals return value of the function force_text called with argument k,
update self.tags dictionary with lib.tags.
substitute form.instance for obj.
define function get_connection with backend set to None, fail_silently set to boolean False and dictionary kwds as arguments.
convert fist p elements of language to lowercase, append '_' to it, covert to uppercase language elements from (p+1)-th index to the end, append it to the previous result, return it.
try,
if it exists, get 'stderr' attribute of self, substitute it for stderr, if not, stderr is an instance of OutputWrapper class, created with arguments sys.stderr and self.style.ERROR.
if self.translate is true,
otherwise if o is an instance of decimal.Decimal object,
convert is a dictionary with 4 initial entries: list with 3 tuples: tuple with 2 elements: string '__gt__', and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other or self is equal to other, tuple with 2 elements: string '__le__', and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than other or self is equal to other, tuple with 2 elements: string '__ge__', and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other, for '__lt__', list with 3 tuples: tuple with 2 elements: string '__ge__', and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other, or self is equal to other, tuple with 2 elements: string '__lt__', and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than or equal to other, or self is not equal to other, tuple with 2 elements: string '__gt__', and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other, for '__le__', list with 3 tuples: tuple with 2 elements: string '__lt__', and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other or self is equal to other, tuple with 2 elements: string '__ge__', and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than other or self is equal to other, tuple with 2 elements: string '__le__', and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other, for '__gt__', and list with 3 tuples: tuple with 2 elements: string '__le__', and lambda function with 2 arguments: self and other, resulting boolean True if self is not greater than or is not equal to other, or self is equal to other, tuple with 2 elements: string '__gt__', and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than or not equal to other, or self is not equal to other, tuple with 2 elements: string '__lt__', and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than or equal to other, for '__ge__',
import module os.
define the function get_git_changeset.
help is a string 'Prints the SQL statements for resetting sequences for the given app name(s).'.
if self.sep is not contained in signed_value,
from email import charset as Charset, encoders as Encoders, message_from_string and generator.
from importlib import import_module into default name space.
substitute str for binary_type.
define the method __init__ with arguments: self, host set to None, port set to None, username set to None, password set to None, use_tls set to None, fail_silently set to False, use_ssl set to None, timeout set to None and unpacked dictionary kwargs.
if not,
self.stdout.ending is None.
remove the first element from the self.context.
call the method self.add_fallback with an argument default_translation.
define the method __init__ with 7 arguments: self, max_value set to None, min_value set to None, max_digits set to None, decimal_places set to None, unpacked list args and unpacked dictionary kwargs.
errors is an empty list
derive the class MediaDefiningClass from the type base class.
get is a tuple containing elements generated by the call to the function pformat with an argument COOKIES_override, if COOKIES_override is not None, or otherwise generated with the call to the function pformat with an argument request.COOKIES.
define the method __init__ with 4 arguments: self, result of the function streaming_content=(), unpacked list args, and unpacked dictionary kwargs.
substitute kwargs for media_attrs.
get 'help_texts' attribute from the options object, if it exists substitute it for self.help_texts, if not self.help_texts is None.
call the method self._css.keys, sort the result and substitute it for media.
for every base in reversed order of bases,
define the method extract with 2 arguments self and to_path.
for every dict_ in self.dicts,
call the method sys.stderr.write with an argument string "fork #1 failed: (%d) %s\n", formated with e.errno and e.strerror.
url is an empty string.
get the first space decremented with integer 1 elements from string line, append newline character to it, and yield the result.
if name starts with an string '.',
convert args into a list, substitute it for args.
try,
if not,
from django.utils.safestring import mark_safe into default name space.
derive the class Command from the BaseCommand base class.
if value under the 'subtitle' key of the self.feed dictionary is not None,
substitute first element of nonlocal_root for root.
define the method __deepcopy__ with arguments self and memo.
import module warnings.
from django.utils.six.moves.urllib.parse import parse_qsl,  urlencode,  quote,  urljoin and urlsplit into default name space.
try,
if s is an instance of object bytes,
if field.rel.through._meta.auto_created is true,
break the loop execution.
define the method save_new_objects with 2 arguments: self and commit set to boolean True.
try,
evaluate the logical expression, if other is an instance of RegexValidator and self.regex.pattern equals to other.regex.pattern, and self.regex.flags equals to other.regex.flags and self.message equals to other.message and self.code equals to other.code, and self.inverse_match equals to other.inverse_match, return the result.
call the method self.iterlists, return list of results.
otherwise if ch equals a string ')',
if not,
define the method s with an argument self.
if not self._mutable,
method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
derive the class MultiValueDictKeyError from the KeyError base class.
return value under the 'forloop' key of the context dictionary.
sites is an empty list.
call the os.path.splitex with argument name, assign the result to name and ext, respectively.
if csrf_token is not None,
return boolean False.
substitute method for value under the funcname key of the dictionary under the klass key of the cls.__dispatch dictionary.
substitute environ for self.META.
define the method exists with arguments self and name.
from django.db.migrations.state import ProjectState into default name space.
evaluate method self.has_key with key and version as arguments, if the result is true,
raise an TypeError exception with an argument sting "Lazy object returned unexpected type.".
return an instance of SafeText, created with an argument t.
if value under the 'method' key of the options dictionary equals to string 'perfork' or 'fork',
call the function warnings.warn with 3 arguments: string 'Using SplitDateTimeWidget with DateTimeField is deprecated. ' 'Use SplitDateTimeField instead.', RemovedInDjango19Warning and stacklevel set to integer 2.
define the method set with 5 arguments, self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
finally perform,
if opts.model is true,
call the function conditional_escape with an argument contents, substitute the result for contents.
from django.core.management.sql import sql_indexes into default name space.
call the function force_str with raw data as an argument and substitute it for rawdata.
define the initialization method __init__ with self, table and params as arguments.
create a list with count decremented by 1 number of last element of result elements, extend list result with it.
while first element of s is equal to bytes string ';',
if not,
join elements of pieces into a string, return it.
strip g of "'" from both ends,
call the method self._headers.values, return the result,
from django.utils import lru_cache into default name space.
if signing.BadSignature exception is caught,
define method __exit__ with self, exc, value and tb as the arguments.
otherwise if ch is contained in string "*?+{",
zbuf is an instance of BytesIO class.
convert result to lowercase and return it.
call the function getattr with request, string 'LANGUAGE_CODE' and function get_language as arguments, append the result at the end of string '.', append it all at the end of string cache_key.
from datetime import datetime,  timedelta and tzinfo into default name space.
append to a list elements of the iterator self, return the resulting list.
if length of bits is not equal to integer 3,
all the method field.rel.to._meta.get_field with field.rel.field_name as argument, call the to_python method on the result with, unpacked list field_value as an argument, substitute the result for value of under the field.attname key of the data dictionary.
define the function make_aware with 2 arguments: value and timezone.
define the method clean with arguments self and value.
increment i by integer 1.
if AttributeError exception is caught,
remove original_path directory.
raise an exception.
return boolean False.
define the method __init__ with 4 arguments: self, out, style, func set to None and endings set to newline character.
for every arg in args,
substitute self.subject for value under the 'Subject' key of msg dictionary.
decorator stringfilter,
do nothing.
derive the class RadioFieldRenderer from the ChoiceFieldRenderer base class.
define the method add_arguments with self and parser as arguments.
derive the class JSONSerializer from the object base class.
DNS_NAME is a instance of CachedDnsName class.
if not,
from django.utils.encoding import force_text into default name space.
define the method resolve_template with 2 arguments: self and template.
call the function bytes with an argument tuple with an element i, return the result.
call the method value.strftime with an argument format, return the result.
define the method write_items with 2 arguments: self and handler.
define the function find_commands with an argument management_dir.
call the function MovedModule with 2 arguments: strings "_dummy_thread" and "dummy_thread", use the result as an argument for the call to the add_move function.
call the function warnings.warn with 3 arguments: string "get_declared_fields is deprecated and will be removed in Django 1.9.", RemovedInDjango19Warning, stacklevel set to integer 2.
call the settings.INSTALLED_APPS.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
substitute new_value for value.
try,
if not,
if not,
try,
call the method os.unlink with an argument pot_path.
is exception is caught,
migrations_to_squash is a list created dynamically with elements: return value of the method executor.loader.get_migration called, with arguments al and mn, for every al, mn in executor.loader.graph.forwards_plan method return value called with 2 arguments: migration.app_label, migration.name, only if al equals migration.app_label.
call the function self.filter_expr.resolve with an argument context, return the result.
call the function from_current_timezone with an argument, return the result.
call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
call the method parser.add_argument with 5 arguments: string '-i', string '--interface', choices set to string self.shells, dest as a string 'interface' and help as a string 'Specify an interactive interpreter interface. Available options: "ipython" and "bpython"'.
from django.utils.encoding import force_text into default name space.
groupid is a string "t%d" formated with tok.id.
call the function _trans.deactivate_all, return the result.
substitute value for value under the key key of safe_data dictionary.
if OSError, renamed to e, exception is caught,
from django.core.management.base import BaseCommand and CommandError into default name space.
widgets is a tuple with 2 elements: instance of DateInput class, created with 2 arguments: attrs as attrs and format as date_format, and instance of TimeInput class, created with 2 arguments: attrs set to attrs and format set to date_format.
define the method _is_expired with self and f as arguments.
call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib_parse" appended to __name__, assign the result to the value under the string ".moves.urllib_parse" appended to __name__ key of the sys.modules dictionary, and to the value under the string ".moves.urllib.parse" appended to __name__ key of the sys.modules dictionary.
for every handler in self._upload_handlers,
open filepath file in read mode, with file descriptor as fp, perform,
from django.core.mail import get_connection into default name space.
if not,
from django.db import connections,  router,  transaction and DEFAULT_DB_ALIAS into default name space.
define function color_style, without input arguments.
from django.utils.safestring import mark_safe into default name space.
if length bits is smaller than intger 4,
if not,
substitute self.max_num for total_forms.
call the method self._expire_info.get with key and integer -1 as arguments, substitute the result for exp.
otherwise if obj is an instance of EscapeData,
ch2 is None.
ctx is an hashlib object, for calculating hash function with md5 algorithm.
from django.core.management.base import AppCommand into default name space.
return result.
define the method Y with an argument self.
call the method time_str.decode with an argument string 'utf-8', substitute the result for time_str.
define the function sql_all with 3 arguments: app_config, style and connection.
define the __init__method with arguments self and exception.
substitute self.default_timeout for timeout.
upload_handlers.setter decorator.
import module warnings.
__all__ is a tuple containing strings: 'ModelForm', 'BaseModelForm', 'model_to_dict', 'fields_for_model', 'save_instance', 'ModelChoiceField', 'ModelMultipleChoiceField', 'ALL_FIELDS', 'BaseModelFormSet', 'modelformset_factory', 'BaseInlineFormSet', and 'inlineformset_factory'.
define the method split_leading_dir with 2 arguments self and path.
define the function get_tag_uri with 2 arguments: url and date.
if error is an instance of ValidationError,
if self.data.hour is greater than inreger 12,
derive the class Critical from base class CheckMessage.
append list containing pattern to tried.
substitute filters for self.filters.
if self.file_path file path exists and it is not a directory,
otherwise if msg is true,
substitute file for filename.
raise an ValueError exception with an argument string 'Unable to convert %r at %r' formated with value and rest.
call the private dict.__setitem__ method with self class instance, key and M as arguments.
concatenate string '%0', width and string "d. %s", format the previous string with i incremented by 1, and result of the function escape called with an argument line, substitute the result for i-th element of lines.
define the method rss_attributes with an argument self.
import module warnings.
if not,
for every f in file_field_list,
substitute error_messages for value under the 'error_messages' key of attrs dictionary.
if 'coerce' key of the kwargs dictionary exists remove it and substitute its value for self.coerce, if not, self.coerce is an identity lambda function with an argument val.
_mtimes is an empty dictionary.
optimizer is an instance of MigrationOptimizer class.
call the start_response function with force_str(status) method return value and response_headers as arguments.
raise an exception e.
call the method field.value_to_string with an argument obj, use the result as an argument for the call the method self.xml.characters.
if not,
if cleaned_line ends with ';' character,
for every form in valid_forms,
join all of the elements of vary_headers and additional_headers in a string delimited by a comma, substitute it for value of dictionary response under the key 'Vary'.
nodelist_empty is None.
if sys.platform equals string win32', substitute string 'CTRL-BREAK' for quit_command, if not substitute string 'CONTROL-C' for quit_command.
call the method regex.match with an argument date, substitute the result for m.
substitute fg for value under the 'fg' key of definition dictionary.
substitute self.version for version.
call the method self.end_serialization.
call the method __init__ with an argument initlist from the base class of the class ErrorList.
if self.field.choice_cache is None,
try,
define the method __init__ with an argument self.
define the function pprint with an argument value.
get the type of self object, call the __bool__ method on the result with an argument self, return the result.
if kwds is true or typed is true, call the function make_key with 3 arguments: args, kwds and typed, substitute the result for key, otherwise substitute args for key.
return first element of value.
return exit_code.
define the method __getitem__ with an argument self.
call function _generate_cache_header_key with arguments key_prefix and request, substitute the result for cache_key.
call the method self.render_node with 2 arguments: node and context, substitute the result for bit.
if ch2 equals string '?',
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to string 'required'.
from django.conf import settings into default name space.
define the method next_page_number with an argument self.
raise an TemplateDoesNotExist exception with an argument error_msg.
found is boolean True.
import module re.
otherwise if value is an instance of datetime.time,
join self.dirpath, thefile into a file path, substitute it for work_file.
return a tuple containing 3 entries: output, result of the function force_text, called with 3 arguments: errors, DEFAULT_LOCALE_ENCODING and strings_only set to boolean True and p.returncode.
call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references, use the result as an argument for the call to the method final_output.extend.
otherwise if name is contained in lib.filters,
resource_string is None.
write item to zfile stream.
try,
append list containing string '--no-location' to self.msguniq_options.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
from django.utils import six into default name space.
for every obj in result of the method queryset.iterator,
do nothing.
if expires is an instance of datetime.datetime class,
if callback is an callable object,
call the method self.full_clean.
from django.core.management.sql import sql_all into default name space.
if IOError exception is caught,
remove the entry under the 'stream' key of the self.json_kwargs dictionary.
define the method render with 4 arguments: self, name, value and attrs set to None.
increment msg_count by one.
call the method self.error_class with an argument list containing results of the function conditional_escape, called with an argument error, for every error in bf.errors, substitute the result for bf_errors.
substitute content_type for self.content_type.
define the function regroup with 2 arguments: parser and token.
replace '%s' in string "copying plural forms: %s\n" with plural_form_line, write it to self.stdout.
if not,
substitute model._meta.app_label for app.
substitute flo for self.flo.
if exception SuspiciousOperation as e is caught,
define the function validate_ipv6_address with an argument value.
substitute element at self.pos index of self.tokens for retval.
try,
define the method unsign with arguments self, value and max_age set to None.
return result.
return boolean False.
convert git_changeset to string, append it to the string '.dev', replace it for sub.
from django.utils.functional import lazy into default name space.
define the method emit with 2 arguments: self and record.
call the function parse_accept_lang_header with an argument accept, for every accept_lang and unused in the result,
substitute negated for self.negated.
raise an ImproperlyConfigured exception with argument string '"%s" is not a valid regular expression: %s', where '%s' is replace by regex and return value of the function six.text_type with an argument e.
define the method __setstate__ with 2 arguments: self and state.
convert number into an integer and substitute it for number
must_be_first is boolean True.
import module decimal.
substitute response dictionary value under the key 'Cache-Control' for cc.
call the method parser.add_argument with string 'app_label', nargs set to charcter '?', help containing string, 'App label of an application to synchronize the state.' as arguments.
return cls.
if context is an instance of Context,
call the method translation._info.copy, substitute the result for self._info.
define the function Deserializer with arguments stream_or_string and unpacked dictionary options.
define the method __get__ with 3 arguments: self, instance and owner.
call the __call__ method from the base class of the URLValidator class, with an argument url.
from django.core.management.base import BaseCommand into default name space.
if pattern.namespace is true,
define the function filesizeformat with an argument bytes.
from django.core.management.base import AppCommand into default name space.
call the function re.compile with 2 arguments: elements of parts joined into a string, separated with '|', and result of bitwise OR performed on 2 operands: re.MULTILINE and re.VERBOSE, substitute the result for value under the state key of the self.regexes dictionary.
import module os.
if s is an instance of six.text_type or Promise,
if string 'DJANGO_AUTO_COMPLETE' is not contained in os.environ,
get the value under the name key of the self.initial dictionary, if it exists substitute it for initial_value, if not substitute field.initial for initial_value.
delete the form.cleaned_data dictionary entry under the field key.
define function learn_cache_key with request, response, cache_timeout set to None, key_prefix set to None, cache set to None as arguments.
derive the class EmailBackend from the ConsoleEmailBackend base class.
if not,
convert elements of choices into a list, substitute it for self.choices.
call the method six.reraise 3 with arguments: os_err_exc_type, return value of the function os_err_exc_type, called with string as an argument 'Error executing %s: %s', where '%s' is replaced by: first element of args and strerror, respective, and third element of the result of the function sys.exc_info.
call the method wrap with 2 arguments, value and arg converted into a integer, return the result.
substitute self.count for top.
call the method m.end with an argument integer 0, substitute the result for pos.
subcommand is a string 'help'.
daemonize is boolean True.
raise an CommandError exception with an argument "Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed.",  where '%s' is replaced with program.
all the method self.create_table with arguments: db and cache._table.
for every path in self.locale_paths,
call the method self._iteritems, for every k and v in the result,
call the self.path function with argument name, use the result as the argument for the call to the os.path.exists function, return the result.
from django.utils.crypto import get_random_string into default name space.
define the method __multiple_chunks__ with arguments self and chunk_size defaulting to None.
try,
define the method extend_nodelist with 4 arguments: self, nodelist, node and token.
return text.
if field.rel.to._meta.pk.rel is true,
call the method self.value.resolve with 2 arguments context and ignore_failures set to boolean True, return the result.
from django.template.base import TemplateDoesNotExist into default name space.
define the function ngettext with 3 arguments: singular, plural and number.
call the function original_urlencode with 2 arguments: list with 2 elements: result of the function force_str with an argument k, and list with results of the function force_str with an argument i, for every i in v, only if v is a list or a tuple, otherwise second element is result of the function force_str with an argument v, for every k and v in query, and doseq, return the result.
if content_length is lesser than integer 0,
convert pattern to lowercase, substitute it for pattern.
call the mail.send method with fail_silently set to fail_silently as argument.
if timeouts is None return None, otherwise return the sum of function time.time return value and timeout.
if length of t equals to integer 2,
substitute format for self.format if format is true, if not self.format is None.
substitute integer 0 for cache_timeout.
if settings.ADMINS is false,
increment current_len by integer 1,
for every name in MEDIA_TYPES,
__M is a raw string '(?P<mon>\w{3})'.
for every form in self.saved_forms,
define the method __delitem__ with 3 arguments: self and key.
call the method self.stdout.write with an argument: string "%(started_at)s\nDjango version %(version)s, using settings %(settings)r\n" "Starting development server at http://%(addr)s:%(port)s/\n Quit the server with %(quit_command)s.\n", where '"%(started_at)s' is replaced with now, '%(version)s' is replaced with return value of the method self.get_version, '%(settings)r' is replaced with settings.SETTINGS_MODULE, '%(addr)s' is replaced with self.addr if self._raw_ipv6 is true, or with self.addr if it is false, '%(port)s' is replaced with self.port and '%(quit_command)s' is replaced with quit_command.
call the function time.strftime with 2 arguments: fmt and and timetuple without the first element, added to a tuple with an element year, substitute the result for s1.
for every x in sequence of integer from integer 0 to length of data, append an empty string to a list, substitute the resulting list for initial.
substitute length of chunk for chunk_length.
if instance is None,
try,
if StopIteration exception,
pk_key is a string "%s-%s", where '%s' is replaced with: result of the method self.add_prefix called with an argument i, and self.model._meta.pk.name.
value is None.
try,
call the method time.mktime with an argument tt, substitute the result for stamp.
try,
skip this loop iteration.
call the method connection.constraint_checks_disabled, with the result perform,
call the method middleware.process_exception with 2 arguments: request and e, substitute the result for result.
if input_formats is not None,
if settings.USE_ETAGS is True and function call response.has_header with string 'ETag' as argument returns boolean False,
call the method formats.time_format with 2 arguments: value and arg, return the result.
self.translate is boolean True.
substitute '%s' in the string '%%prog %s [options] %s' with subcommand and self.args, respectively, substitute it for usage.
outdict is an empty dictionary.
unpack dictionary kwargs, map it through self.attrs and convert to dictionary, substitute the result for attrs.
 call the re.compile function with 2 arguments: raw string '(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$', and re.IGNORECASE, substitute the result for domain_regex.
for every ext in pathext,
if app_name is an instance of BaseCommands.
define the method get_unique_error_message with 2 arguments: self and unique_check.
substitute value under the database key of the connections dictionary for connection.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
call the function unescape_string_literal with an argument var, use it as an argument for the call to the function mark_safe, substitute the result for self.literal.
try,
get the value under the 'indent' key of the options dictionary, substitute the result for indent.
yield string "# Feel free to rename the models, but don't rename db_table values or field names." as the result.
add row_data to seen_data set.
define the method __repr__ with argument self.
_assertCountEqual is a strnig "assertItemsEqual".
get the value from the options dictionary under the key 'traceback', substitute it for self.show_traceback.
get property attribute _get_width, and substitute it for width.
ignored  is an empty list.
get the value under the 'verbosity' key of the options dictionary, convet it to an integer and substitute for self.verbosity.
join package.__name__ and module_name into a string separated with '.', substitute it for name.
define the method _close_files with an argument self.
return an empty string.
do nothing.
try,
substitute length of item for len_item.
if self.to_field_name is true,
try,
while answer is false or answer is not contained in string "yn", perform the following,
if context.autoescape is true and output is not an instance of SafeData class or output is an instance of EscapeData class,
try,
UNKNOWN_SOURCE is a string '<unknown source>'.
return an empty string.
define the method setlistdefault with 3 arguments: self, key and default_list set to None.
join first 5 elements of hextets into a string, separated by ':', substitute the result for result.
convert param to a string, use it as a key to get the value from kwargs dictionary, assign it value.
substitute producer for self._producer.
compile regex from a string '(?<!\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])', substitute it for re_formatchars.
raise and exception InvalidCacheBackendError with string "Could not find backend '%s': %s" as argument, replace '%s' with backend and e, respectively.
call the method notifier.check_events with argument timeout set to None.
if not,
if self.settings_exception is not None,
try,
derive the class RegroupNode from Node base class.
call the method self.format_output with an argument output, use the result as an argument for the call to the function mark_safe, return the result.
call the method match.groupdict, use the result as an argument for the call to the function six.iteritems, for every k and v in the previous result, add a key into a dictionary: v converted to an integer for k, substitute the resulting dictionary for kw.
warning is a string 'ImmutableList object is immutable.'.
try,
substitute fields for value under the 'fields' key of attrs dictionary.
if exception is caught,
close the _file file.
call the function re.sub with 3 arguments: string '[-\s]+', string '-' and value, use the result as an argument for the call to the, mark_safe function, return the result.
derive the class PyLibMCCache from BaseMemcachedCache base class.
define function has_vary_header, with response and header_query as arguments.
define the function make_origin with 4 arguments: display_name, loader, name and dirs.
call the function middleware_method with the request and response as the arguments, assign the result to response.
raise an CommandError exception with an argument string "You can only use --pks option with one model".
if value under the 'indent' key of the self.options dictionary is true,
define the _fd function with argument f.
if not,
for every w in self.widgets, if all elements w.is_hidden are true, return boolean True, otherwise return boolean False.
for every app_label in bad_app_labels,
from django.utils.encoding import force_str, force_text and iri_to_uri into default name space.
call the method self.style.NOTICE with string "  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them." as an argument, use the result as an argument for the call to the self.stdout.write method.
break from the loop execution,
replace all the occurrences of character '_' in name with a whitespace, capitalize the first letter and return the result.
if ImportError exception is caught,
define the method render with 2 arguments: self and context.
substitute content_length for self._content_length.
call the method parser.delete_first_token.
from django.utils.six.moves.urllib.parse import urljoin into default name space.
take a tuple with 2 elements: boolean False and method resolve called with an empty dictionary on the instance of Variable class, created with an argument constant_arg, append it to args.
msgs_with_ctxt is a tuple containing 2 elements: string created by concatenating context, CONTEXT_SEPARATOR and singular, string created by concatenating context, CONTEXT_SEPARATOR and plural and number.
call the function get_format with an argument string 'DATE_INPUT_FORMATS', substitute the first element of the result for input_format.
define lambda function that returns self.file.readinto field, use it as an argument for property function, put the result in readinto.
call the method self.configure_logger with 2 arguments: name and value under loggers dictionary key name.
define the function constant_time_compare with 2 arguments: val1 and val2.
define the method _dec with 2 arguments: unpacked list args and unpacked dictionary kwargs.
raise an TemplateSyntaxError exception with an argument string "'for' statements should have at least four words: %s", where '%s' is replaced with token.contents.
for every form_errors in self.errors sum length of return value of the method self.non_form_errors and length of form_errors, return the result.
define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
rais an AppRegistryNotReady exception with an argument string "The translation infrastructure cannot be initialized before the " "apps registry is ready. Check that you don't make non-lazy gettext calls at import time.".
call the function six.reraise with 3 arguments: CommandError, CommandError created with argument new_msg, and third element of the return value of the function sys.exc_info.
if not,
import module sys.
call the method handler.startElement with 2 arguments: string 'feed' and result of the method self.root_attributes.
if response is None,
get the value under the 'CONTENT_TYPE' key of environ dictionary, if the key doesnt exist get the empty string, use it to call the cgi.parse_header method, assign the result to the _ and content_params respectively.
import module os.
define the method __init__ with 2 arguments: self and data set to None.
define the method __init__ with 4 arguments: self, content_type set to None, status set to None, reason set to None.
substitute options for self.options.
decorator stringfilter,
if smtplib.SMTPException exception is caught,
if six.PY3 is true and val1 and val2 are an instances of bytes,
append name to 'add_' use it as the name of the attribute to get from combined object , call the result with an argument: name appended to string '_', as the name of the attribute to get from other object, or if the previous doesnt exist, None.
define the function iterbytes with an argument buf.
if not,
for every field, errors in self.error_dict.items method return value,
if strict is false,
substitute value under the cache_key key of the _format_cache dictionary for cached.
get attribute 'error_dict' from the self object.
if not,
skip this loop iteration.
for every matches, pat and defaults in return value of the method pattern.reverse_dict.getlist called with an argument name,
define the method copy_plural_forms with arguments self, msgs and locale.
import module warnings.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
do nothing.
substitute name for self.name.
define the method save with arguments self, name and content.
if i is true,
get config dictionary element under 'loggers' key, if it exists substitute it for loggers, if not, loggers is EMPTY_DICT.
if not,
if priority is false,
return instance.
from django.conf import settings into default name space.
from __future__ import unicode_literals into default name space.
import module os.
sub_match_dict is a dictionary created from self.default_kwargs dictionary using mapping function match.groupdict.
call the function re.compile with an argument raw string '^/([\w-]+)(/|$)', substitute the result for language_code_prefix_re.
call the method executor.migration_plan wiht return value of te method executor.loader.graph.leaf_nodes as argument, substitute it for plan.
call the function _import_module with an argument self.mod, return the result.
define the function file_complete with arguments self and file_size.
resolved_path is an empty list.
call the method self.model._default_manager.get_queryset with an argument qs.
import module warnings.
if incomment is true,
if context.autoescape is true and value is not an instance of SafeData, or value is an instance of EscapeData,
convert value into an integer.
if length of bits is smaller than integer 2 or second last element of bits is not equal to 'as',
if exception OSError, renamed to e, occurred,
call the function settings.is_overridden with argument string 'TEMPLATE_LOADERS', if it evaluates to boolean True,
set old_method_name attribute of the base object to the result of the function wrapper called with an argument new_method.
call the function copy.deepcopy with an argument self.base_fields, substitute the result for self.fields.
if end is not a '>' or '/>' character,
for every attr in _urllib_response_moved_attributes,
if ValidationError, renamed to e, exception is caught,
if AttributeError exception is caught,
substitute error_class for self.error_class.
call the function _helper with 2 arguments: sublist_item and tabs incremented by 1, substitute the result for sublist.
return response
substitute start for upto.
if tablename is contained in return value of the method connection.introspection.table_names,
define the method __getitem__ with 2 arguments: self and key.
if leading is true,
call the method dictConfigClass with an argument config, call the method configure on the result.
define the method __init__ with 2 arguments self and file.
call the method token.split_contents, substitute the result for bits.
define the function render_to_string with 4 arguments: template_name, dictionary set to None, context_instance set to None and dirs set to None.
substitute self._empty_value for value.
delete dictionary item 'private' from cc.
return boolean True.
if file_ is true,
get the 'value' attribute of the _urlconfs, if it exists return it, otherwise return defaults.
if ValidationError renamed to e, exception is caught,
substitute the last element of parts for cmp_fmt.
from __future__ import unicode_literals into default name space.
from django.utils import autoreload into default name space.
call the function ugettext_lazy with an argument string 'Change', substitute the result for input_text.
remove first two elements from bits.
call the function getInnerText with an argument node, call the strip method on the result, substitute the result for field_value.
internal_use_only is boolean False.
call the method self._expire_info.clear.
define the method handle_raw_input with arguments: self, input_data, META, content_length, boundary and encoding set to None.
import module codecs.
substitute _iteritems for items.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
potfiles is an empty list.
get the value under the key 'exclude' of the options dictionary, convert it to an integer, substitute it for exclude.
if TemplateDoesNotExist exception is caught,
if not,
if only_new is true,
for app_config in return value of the method apps.get_app_configs,
if incremental is true,
otherwise if self.waiting_readers is not equal to integer 0,
if id_ is true,
endless loop,
call the function force_bytes with an argument salt, substitute the result for salt.
if result is equal to integer 0, return boolean True, otherwise return boolean False.
is_compressed is boolean False.
call the method unicodedata.combining with an argument char, if it evaluates to false,
if command.verbosity is greater than integer 0,
get the value under the 'width' key of the options dictionary, if it exists, substitute it for namemap, if not namemap is an empty dictionary.
call the function warnings.warn with 3 arguments: string 'import_by_path() has been deprecated. Use import_string() instead.', RemovedInDjango19Warning and stacklevel as integer 2.
if self.max_length is not None and length of file_name is grater than self.max_length,
self.config is an instance of ConvertingDict, called with an argument config.
return string 'https'.
call the result.rsplit method with arguments self.sep and integer 1, substitute the result for value and timestamp, respectively.
call the M.set method with the key, real_value, coded_value as the arguments.
if age is greater than max_age,
call the field.to_python method with field_value, substitute the result for field.name key of the data dictionary.
call the method self._handle_m2m_field_node with an argument field_node and field, substitute the result for value under the field.name key of m2m_data dictionary.
return an empty string.
substitute _ for ret.
define the method __init__ with 2 arguments: self and format_string.
return retval.
NOCOLOR_PALETTE is a string 'nocolor'.
raise an TemplateSyntaxError exception with an argument string "Invalid arguments provided to simple_tag".
instantiate TimestampSigner object with arguments key and salt set to salt, call its method unsign with arguments: s and max_age set to max_age, use it as an argument for the force_bytes function, substitute the result for base64d.
raise an TemplateSyntaxError with an argument string 'Unknown argument for %r tag: %r.', where '%r' is replaced with first element of bits and options.
property decorator,
substitute space for sep.
substitute force_bytes for force_str.
append contents to plural.
call the method lookups.appendlist with 2 arguments: pattern.callback and a tuple containing 3 elements: bits, p_pattern, and pattern.default_args.
call the function datetime.fromtimestamp with argument timeout, substitute it for exp.
import module sys.
define the method setdefault with 3 arguments: self, key and default.
if not,
cached_loaders is an empty list.
call the method notifier.stop.
field_desc is a string '%s = %s%s', where '%s' is replaced with: att_name, an empty string if '.' is contained in field_type, or with string 'models.' if it is not and field_type.
if first is true,
if timezone is an instance of tzinfo,
if cnt is true and remained of dividing cnt with grouping is zero,
import module django.
if size is not empty,
convert text without first element to hexadecimal integer, substitute it for c.
strip f of whitespaces and append it to plist.
if kwargs is true,
if self.output_transaction is true,
try,
define the method attach_file with arguments self, path and mimetype set to None.
from django.template.loader import BaseLoader, get_template_from_string, find_template_loader and make_origin into default name space.
if language_code is not containsed in self._app_dict
if self._leftover is true,
vary_on is an empty tuple.
from django.template.loader import BaseLoader into default name space.
if Exception exception is caught,
define the function iterlists with 2 arguments: d and unpacked dictionary  kw.
result is an tuple with 2 elements: template and return value of the function make_origin called with 4 arguments: display_name,  loader, name and dirs.
self.stderr is an OutputWrapper object instance, created with value under the 'stderr' key of the options dictionary as an argument, if the key doesnt exists use sys.stderr as an argument.
if options.pythonpath is true,
call the __init__ method with 3 arguments: DEBUG, unpacked list args and unpacked dictionary kwargs from the base class of Debug.
define the method indent with argument self and level.
self._request_middleware is None.
call the method warnings.warn with 2 arguments: string "FastCGI support has been deprecated and will be removed in Django 1.9.", and RemovedInDjango19Warning.
substitute x for k and boolean True for v.
call the method MIMEMessage.__setitem__ with arguments self, name and val.
call the function blankout with 2 arguments: t.contents and 'B', write the result to out.
define the function import_string with an argument dotted_path.
if not,
define the method with self class instance and parser as arguments.
do nothing.
do nothing.
derive the class RawPostDataException from the base class Exception.
import module sys.
call the method parser.add_argument with 5 arguments: string '--tag', string '-t', action set to string 'append', dest set to string 'tags' and help set to string 'Run only checks labeled with given tag.'.
raise an exception of the class ValueError with string "Key '%s' not found" as argument, '%s' is substituted for key.
write the string "  Creating tables...\n" to the standard output.
call the method _construct_form from the base class of the class BaseInlineFormSet, with 2 arguments: i, and unpacked dictionary kwargs, substitute the result for form.
call the baseconv.base62.decode method with an argument timestamp, substitute the result for timestamp.
import module binascii.
format string normal_row with an dictionary containing 5 entries: an empty string for 'errors', empty string for 'label', empty string for 'field', empty string for 'help_text' and html_class_attr for html_class_attr.
timeout is integer 300.
if AttributeError exception is caught,
return string 'StopUpload: Halt current upload.'.
get 'WSGI_APPLICATION' attribute from the settings, substitute it for app_path.
if six.PY3 is true,
call the resolver.resolve_error_handler with integer 500 as the argument, assign the resulting tuple elements to the callback, and param_dict, respectively.
if s is an instance of bytes class,
from threading import Lock into default name space.
call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args, third element of the result of the function sys.exc_info.
from django.utils.module_loading import import_string into default name space.
define the method flush with an argument self.
return val.
if not,
if fname is contained in self._list_cache_files method return value,
define function _to_tuple with s as an argument.
if self.is_bound is true and i is smaller than self.initial_form_count,
set self.cdata_tag to None.
options_list is an empty tuple.
if not,
call the method self.max_expr.resolve with an argument context, substitute the result for max_value.
try,
call the function signals.request_finished.connect with argument cache.close.
derive the class EscapeData from object base class.
substitute context for self.context_data.
if not,
define the method create_parser with 3 arguments: self, prog_name and subcommand.
define the method _cache with argument self.
for every key and value in data,
call the method self._cache.clear.
raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag library: %s", where '%s' is replaced with taglib and e.
derive the class Resolver404 with Http404 as base class.
call the method parser.print_help.
move integer 1 left for 50 bits, substitute the result for PB.
declared_fields is an instance of OrderedDict class.
join self.dirpath and self.file into a file path, substitute it for orig_file.
evaluate the field.get_attname, use the result as the name of the obj attribute to get, substitute it for related_att.
if ValidationError, renamed to e, exception is caught,
substitute settings.TEMPLATE_STRING_IF_INVALID for current,
substitute subject for self.subject.
append param to i-th element of result_args.
substitute regex for self._regex.
if settings.DEBUG is true,
replace '%s' in string "Downloading %s\n", with display_url, write it to self.stdout stream.
try,
if empty_label is an instance of list or tuple type,
call the method self.get_exception_response with the request, resolver and integer 400 as the arguments, substitute the result for response.
if ImportError, AttributeError, renamed to e, exceptions are caught,
from django.utils.encoding import force_bytes into default name space.
define the method reader_enters with an argument self.
call the OVERLAPPED function, substitute the result for overlapped.
call the function hashlib.pbkdf2_hmac with 5 arguments: field name of the result of the function digest, password, salt, iterations and dklen, return the result.
get the value under the 'content-disposition' key of the info dictionary, substitute it for content_disposition.
from django.template import Template and Context into default name space.
call the method self.make_key with key and version set to version as arguments, substitute it for key.
define the method __copy__ with an argument self.
define the method next_token with an argument self.
call the method self.getvalue, return the result.
substitute __import__ for importer.
substitute s for self.s.
return id_.
define the function b with an argument s.
define the function print_ with 2 arguments: unpacked list args and unpacked dictionary kwargs.
if not,
call the method connection.introspection.get_field_type with 2 arguments: second element of row and row, substitute the result for field_type.
define the method __repr__ with an argument self.
substitute value for the value under the name key of the self.cleaned_data dictionary.
break from the loop execution.
if form._meta.widgets is true,
define method GET with self class instance as an argument.
join field_output elements into a string, separated by whitespaces, append it to table_output.
call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of the item dictionary.
substitute so and se for sys.stdout and sys.stderr.
call the method self.field.widget.value_from_datadict with 3 arguments: self.form.data, self.form.files, self.html_name, return the result.
define the method run_from_argv with arguments self and argv.
headerlist is an empty list.
if not,
call the method self.configurator.convert with an argument value, substitute the result for result.
concatenate string '"', guts and string '"', substitute the result for tok.
call the function popen_wrapper with an argument args, assign the result to msgs, errors and status, respectively.
if domain is true,
evaluate connection.creation.sql_create_model method with model, no_style() and seen_models as arguments, assign the result to the sql and references, respectively.
substitute all_locales for locales.
BASE2_ALPHABET is a string '01'.
finally perform,
split content by newline character, for every line in result,
if first element of base64d equals to a '.' character,
replace '%s' in the string 'handler%s' with view_type, use it as an name of the attribute to get from the self.urlconf_module, substitute it for callback, if the attribute doesnt exists, callback is None.
from django.utils import six into default name space.
substitute string 'checked' for value under the 'checked' key of final_attrs dictionary.
if regex is not None,
get the value under the 'app_label' key of the options dictionary, substitute it for self.app_label.
split dotted_path into two parts from the right at the '.' character, assign the result to module_path and class_name, respectively.
call the method m.group with an argument integer 0, substitute the result for s.
if StandardError, renamed to e, exception is caught,
if not,
strip g of '"' from both ends,
call the method logging.Filter with an argument name, substitute the result for result.
otherwise if o is an instance of datetime.date object,
substitute first element of fks_to_parent for fk.
_moved_attributes is a list with 55 initial elements, 13 of them are the results of the call to the function MovedAttribute, with different 3 string arguments, the others are results of the call to the function MovedModule called with 3 string arguments.
return boolean False.
for every item in sequence,
define the function dictsortreversed with 2 arguments value and arg.
call the method self.compile_function_error with 2 arguments token and e, if it evaluates to false,
define the method words with 4 arguments: self, num, truncate set to None, html set to boolean False.
define the method handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options.
get the value under the field key of the self.cleaned_data dictionary, if it exists substitute it for field_value, if not field_value is None.
call the method attrs.copy, substitute the result for self.attrs.
get func_name attribute from the mod object, substitute it for view_func.
otherwise if cmatches is true,
try,
substitute self.data for value under the 'data' key of the defaults dictionary.
for every migration in merge_migrations,
if not,
if not,
raise an TemplateSyntaxError exception with an argument string "'%s' received some positional argument(s) after some keyword argument(s)", where '%s' is replaced with name.
return boolean False.
call the method self.is_url with an argument template, if it evaluates to true,
if name is boolean False raise an assert error with message string "The name argument is not allowed to be empty.".
call the method self.run_validators with an argument value.
from django.conf import settings into default name space.
all the method command.create_parser with arguments: empty and name, substitute the result for parser.
write string "  all instances of the codebase have applied the migrations you squashed," to self.stdout.
if option is contained in options,
return value.
if bcc is not an six.string_types instance raise an error with message string '"bcc" argument must be a list or tuple'.
try,
get the value under the BLOCK_CONTEXT_KEY key of the context.render_context dictionary, substitute it for block_context.
try,
compare_to is an list with elements generated by calling the var.resolve method with 2 arguments: context and boolean True, for every var in self._varlist.
return plural.
ch is None.
if errors is None,
if template_dir is directory,
for every item in elt,
define the method __getitem__ with 2 arguments: self and key.
if PY3 is true,
if not,
substitute ValueError for error_class.
self._done is boolean True.
if app_config.path is true,
call the method response.add_post_render_callback with _set_response_etag as argument.
call the method utility.execute.
do nothing.
define the method __repr__ with an argument self.
call the re.compile function with an argument raw string '^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$', substitute the result for ipv4_re.
derive the class RssFeed from the SyndicationFeed base class.
call the method get_language, substitute the result for language_code.
if log is contained in child_loggers,
open old_path file in 'rb' mode, with file descriptor renamed to template_file,
for every sql_file in sql_files,
from IPython import start_ipython into default namespace.
define the function deactivate.
from threading import local into default name space.
if m is true,
substitute _iterlists for lists.
call the method parser.add_argument with 3 arguments: string '--pks', dest set to string 'primary_keys', and help is a string "Only dump objects with given primary keys. Accepts a comma separated list of keys. " "This option will only work when you specify one model.".
if token.token_type equals integer 0,
define the method migration_progress_callback with self class instance, action, migration and fake set to boolean False as arguments.
return an instance of a class ResolverMatch created with 6 arguments: sub_match.func, sub_match.args, sub_match_dict, sub_match.url_name, self.app_name if it exists or if not sub_match.app_name and sub_match.namespaces list appended to self.name.
substitute record.exc_info for exc_info.
get the next element of the iterable pattern_iter, assign the result for ch.
if value is None,
call the method parser.add_argument with 5 arguments: string '--natural-primary', action set to 'store_true', dest is 'use_natural_primary_keys', default is boolean False and help is a string 'Use natural primary keys if they are available.'.
from django.apps import apps into default name space.
from django.core.management.base import BaseCommand into default name space.
call the method self.check with arguments: app_configs set to app_configs, tags set to tags, display_num_errors set to boolean True.
join app_config.path and string 'fixtures' into a valid file path, substitute it for app_dir.
data is an empty dictionary.
substitute BytesIO for stream_class.
yield k.
if data is contained in self.children,
increment stats dictionary value under the MISSES key by integer 1.
if self has an attribute '_files',
if field.rel is true and field.rel is an instance of models.ManyToManyRel,
return self.__to_language.
define the method load_label with self and fixture_label as arguments.
if method self.validate_domain_part with an argument domain_part evaluates to true,
call the method __init__ from the base class of the class ManagementForm, called with 2 arguments: unpacked list args, and unpacked dictionary kwargs.
for every lineno and line is enumerated result of the method content.splitlines, called with an argument boolean True,
define the method validate_domain_part with arguments self and domain_part.
if setting has an "SERIALIZATION_MODULES" attribute,
call the method blankout with 2 arguments: part and 'S', write the result to out.
call the get_serializer function with an argument format, call the return value object and substitute it for s.
call the method timezone.normalize with an argument value, substitute the result for value.
if translators_comment_start is not None and lineno is greater than or equal to translators_comment_start,
if o.microsecond is true,
from django.apps import apps into default name space.
call the method field.rel.to._default_manager.db_manager with an argument db on the return value call the method  get_by_natural_key, with unpacked list value as an argument, return the pk field of the result.
for every node in self,
join app_config.path and string 'locale' into a file path, substitute it for localedir.
relations is an empty dictionary.
split first element of hextet into parts by ':', append them to new_ip.
define the function check_1_6_compatibility with argument kwargs dictionary.
if not,
raise an NoReverseMatch exception with an argument string "Reverse for '%s' with arguments '%s' and keyword ", "arguments '%s' not found. %d pattern(s) tried: %s", replace '%s' with lookup_view_s, args, kwargs, length of patterns, patterns,  and respectively.
sets the role attribute of the style object to the value of the call to the termcolors.make_style function with dictionary format as an argument.
substitute kwargs for params.
field_params is an empty dictionary.
raise an ValueError exception wit an argument string "Not a string literal: %r", where "%r" is replaced with s.
define the method to_python with arguments self and value.
define the method handle_raw_input with arguments: self, input_data, META, content_length, boundary and encoding set to None.
if mimetype is None,
call the method self.render, return the result.
raise an exception.
call the function force_text with 2 arguments: src and settings.FILE_CHARSET.
if urlconf is None,
define the function main, with main_func, args defaulting to None and kwargs defaulting to None as arguments.
call the method self.render_option with 3 arguments: selected_choices, option_value and option_label, append the result to output.
call the self.style.HTTP_REDIRECT with an argument msg, substitute it for msg.
call the method token_string.find with an argument TRANSLATOR_COMMENT_MARK, if it evaluates to true,
call the function make_middleware_decorator with an argument middleware_class, call the result, return the new result.
try,
self.file_permissions_mode is a tuple containing: file_permissions_mode if file_permissions_mode is not None, or settings.FILE_UPLOAD_PERMISSIONS if it is.
raise an ValueError with an argument string "Invalid header: %r", where '%s' is replaced with line.
divide num by self._cull_frequency, floor the result and substitute it for cull_num.
get the value under the 'id' key of final_attrs dictionary, substitute if for id_ if the key doesnt exists, id_ is None.
define the function ngettext with 3 arguments: singular, plural and number.
define the method __next__ with an argument self.
if mw_instance has an attribute named 'process_request'.
self.activated is boolean True.
from django.core.mail.message import sanitize_address into default name space.
value is an empty list.
raise an NotImplementedError exception with argument string 'subclasses of BaseEmailBackend must override send_messages() method'.
call method self.serialize_headers, append bytes string '\r\n\r\n' to the result, append self.content to the result, return it.
return an empty string.
if run_syncdb and executor.loader.unmigrated_apps is true,
append loader to loaders.
if last element of args is not equal to a string "silent",
register.tag decorator,
if categories is true,
substitute encoding for self.encoding.
call the function date.strftime with an argument string '%Y-%m-%dT%H:%M:%S', substitute the result for time_str.
return an string "<For Node: for %s in %s, tail_len: %d%s>", substitute '%s' with elements of self.loopvars joined into a string, separated with string ', ', substitute '%s' with self.sequence, substitute '%d' with length of self.nodelist_loop, substitute '%s' with reversed_text.
derive the class Parser from the base class object.
otherwise if prefix is not equal to common_prefix,
append tempdir to self.self.paths_to_remove.
call the function _checkLevel with an argument level, use the result as an argument for the call to the function handler.setLevel.
return i.
otherwise if auto_id is true,
define the method get_meta with arguments self and table_name. return the list, containing 4 elements: an empty string, string "  class Meta:", string " 
import module re.
instantiate class Truncator, with an argument value, call the method chars on the result with 2 arguments length, and html set to boolean True, return the result.
compile regex from raw string '(?P<hour>\d{1,2}):(?P<minute>\d{1,2})(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?', substitute it for time_re.
if sign is true,
substitute template for self.template.
if inplural is true,
define the method __init__ with 4 arguments: self, parent_instance, unpacked list args and unpacked dictionary kwargs.
call the function func with 2 arguments: context and self.first, return the result.
buf is an instance of StreamingBuffer class.
define the method r with an argument self.
define the method _coerce with arguments self and value.
return duplicate.
EndToken is an instance of EndToken class.
define the method initial_forms with an argument self.
define the function contains with 2 arguments source and inst.
raise an ImproperlyConfigured exception with argument string 'Could not write to directory: %s', replace '%s' with self.file_path.
if formfield has an attribute 'queryset',
import module re.
if autoescape is true,
if _ipv6 is true,
derive the class HTMLParser from the base class HTMLParser located in the module _html_parser.
get attribute '_non_atomic_requests' from the view object, if the attribute doesnt exist return the empty set, substitute the result for non_atomic_requests.
split server with ';' as delimiter, substitute the result for self._servers.
try,
if data is not None or files is not None, self.is_bound is boolean True, otherwise it is boolean False.
define the method __init__ with 7 arguments: self, file set to None, name set to None, content_type set to None, size set to None, charset set to None and content_type_extra set to None.
declare that we use global variables cached_modules and _cached_filenames in this function.
define the method render_options with 3 arguments: self, choices and selected_choices.
call the function _urlize with 3 arguments: value, nofollow set to boolean True, autoescape set to autoescape, use the result as an argument for the call to the function mark_safe, return the result.
call the method sys.exc_info, substitute the result without the first element for e and tb.
define function _generate_cache_key, with request, method, headerlist and key_prefix as arguments.
call the method urlparse with an argument url, substitute the result for bits.
call the function new_method_proxy with an argument bool, substitute the result for __nonzero__.
substitute logging.root for root.
raise an exception.
if initial_forms is grater than self.max_num is grater or equal to integer 0,
if TypeError or ValueError exceptions are caught,
if character is not equal to a string '.',
taglib_module is an string '%s.%s', where '%s' is replaced to module and library_name.
multiply x by length of from_digits add the return value of method from_digits.index with digit argument, substitute the result for x.
return template.
if attr is contained in obj_dict,
escaped is boolean False.
split token.contents into separate words, substitute the first element of the result for command.
call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the item dictionary.
from django.http import HttpResponse into default name space.
append taglib_module to tried_modules.
call the function stat.S_IMODE with argument st.st_mode, substitute the result for mode.
define the method end_object with argument self and obj.
return boolean True.
zip elements of inner_result and inner_args into a list of tuples, for every i_item and i_args in the result,
from django.utils.encoding import force_st into default name space.
decorator stringfilter,
call the function cache_get with 2 arguments: key and root, substitute the result for result.
widget.is_localized is boolean True.
define the method dst with 2 arguments self and dt.
if self.required is boolean true,
if loader is not None,
derive the class MergeDict from the object base class.
call the method b64_decode with an argument base64, substitute the result for data.
import module zipfile.
define the method use_argparse with an argument self,
return the result of the method self._html_output, called with 5 arguments: normal_row to a string, '<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>', error_row set to a a string '%s', row_ender set to a string '</p>', help_text_html set to a string, <span class="helptext">%s</span>' and errors_on_separate_row set to boolean True.
for every f in filters,
if file path top_dir doesnt exists,
return val.
define the function supports_color, without arguments.
format candidate_pat with candidate_subs, return the result.
call the function datetime.now, on the result call the method strftime with an argument string '%B %d, %Y - %X', substitute the result for now.
call the method self.set with key, value, version incremented by delta, as arguments.
TOKEN_TEXT is integer 0
raise an TemplateSyntaxError with an argument string "Invalid filter: '%s'", substitute '%s' with filter_name.
substitute self for retval.
widget_value is None.
from django.core.management.sql import sql_create into default name space.
call the method result.setlist with 2 arguments: return value of the function copy.deepcopy called with 2 arguments: key and memo, and return value of the function copy.deepcopy called with 2 arguments: value and memo.
decorator method lru_cache.lru_cache with an argument maxsize set to None.
using_sysrandom is boolean False.
if not,
if length of bits equals integer 3,
if not,
derive the class FirstOfNode from Node base class.
define the method __prepare_class__ with an argument self.
call the method datetime.now, return the result.
if check_path is true,
define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
mapping is an dictionary with 8 initial entries: BLOCK_TAG_START for 'openblock', BLOCK_TAG_END for 'closeblock', VARIABLE_TAG_START for 'openvariable', VARIABLE_TAG_END for 'closevariable', SINGLE_BRACE_START for 'openbrace', SINGLE_BRACE_END 'closebrace', COMMENT_TAG_START 'opencomment' and COMMENT_TAG_END for 'closecomment'.
help is a string "Creates new migration(s) for apps.".
if m is true,
call the function next with an argument cycle_iter, call the method resolve on the result with an argument context, substitute the result for value.
if entry is a directory,
if not,
define the method _set_choices with arguments self and value.
define the method handle with 3 arguments: self and unpacked dictionary options.
return _make_decorator.
define the method symlinks_supported.
call the method self.handle_label with 2 arguments: label and unpacked dictionary options, substitute the result for label_output.
do nothing.
do nothing
from django.conf import settings into default namespace.
if ext is false and content_type is true,
import module sys.
if ch equals a string '<',
raise an exception.
otherwise if end is not an instance of string type,
define the function get_serializer_formats.
substitute self._request_middleware for request_middleware.
if ValueError or self.queryset.model.DoesNotExist exception is caught,
if self.cc is true,
get frag attribute from found object, substitute it for found.
value is an empty string.
if i is smaller than integer 0,
define the method render with 2 arguments: self and context.
return msg_count.
write string "  No optimizations possible." to self.stdout stream.
return an instance of SafeBytes, created with an argument data.
trans_bit is a list with an element bit.
append name to construct_instance_exclude list.
substitute value under the the 'forloop' key of the context dictionary for parentloop.
if last_bit is true,
get "_decorated_function" attribute from func object, if it exists substitute __name__ field of the result for name, if not, substitute func.__name__ for name.
incomment is boolean True.
decrement self.position by length of bytes.
call the method parser.add_argument with 4 arguments: string '--no-startup', action as a string 'store_true', dest as a string 'no_startup' and help as a string 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.'.
call the method __init__ from the base class of the class BaseInlineFormSet, with 5 arguments: data, files, prefix set to prefix, queryset set to qs and unpacked dictionary kwargs.
define the method _get_choices with an argument self.
self.test_runner is None.
if UnicodeError exception is caught,
call the method references_to_delete.setdefault with arguments: r.rel.to and an empty list, append to the result tuple with 2 entries: model and f.
derive the class IPAddressField from the base class CharField class.
as long k is smaller than endpos,
if urlconf is None,
skip this iteration of he smallest enclosing loop.
substitute DARK_PALETTE for DEFAULT_PALETTE.
call the method package.rindex with 3 arguments: string '.', integer 0 and dot, substitute the result for dot.
call the method self.render_option with 2 arguments: selected_choices and unpacked list option, append the result to output.
call the __init__ method from the base class of the HttpResponseNotModified class, called with arguments: unpacked list args, and unpacked dictionary kwargs.
call the method self.importer with an argument used.
call the method create_token from the base class of the class DebugLexer, with 2 arguments: template_string and in_tag, substitute the result for token.
call the method self.show_migration_list with connection as first argument, as second argument use value under the 'app_label' key of options dictionary, if exists, if not use None as the second argument, return the result.
from django.core.management.base import BaseCommand into default name space.
from django.core.exceptions import ImproperlyConfigured into default name space.
substitute old for self.mod.
define the method _get_queryset with an argument self.
get the value under the 'indent' key of the options dictionary, multiply it with level, create a string containing number of  whitespaces equal to the previous result, append it to the string containing newline character, use the result as the argument for  the call to the self.xml.ignorableWhitespace method.
append result of method six.text_type called with an argument digit to an list, for every digit in reversed order of digits, substitute the resulting list for digits.
convert max_value into an floating point number, substitute it for max_value.
define the function get_cache with backend and dictionary pair of elements kwargs as arguments.
call the method nodelist.get_nodes_by_type with an argument nodetype, extend nodes with the result.
call the function new_method_proxy with an argument operator.setitem, substitute the result for __setitem__.
from django.core.files import File into default name space.
return an string "<%s: %r>", where '%s' is replaced with self.__class__.__name__ and self.var, respectively.
append a tuple with 2 elements: condition and nodelist to conditions_nodelists.
if args is true,
convert arg to an integer.
define the function total_ordering with an argument cls.
if self._is_rendered is true,
return an empty string.
substitute serializers for _serializers.
self._leftover is an empty string.
substitute length of package for dot.
if call to the function os.path.exists with argument directory evaluates to boolean False,
call the method self.to_python with an argument value, strip the whitespaces from the both ends of the result and substitute it for value.
substitute code for self.code.
define the method loaddata with 2 arguments self and fixture_labels.
define the method merge with 2 arguments self and other.
yield field and ValidationError object converted to an list, created with an argument errors.
want_unicode is boolean True.
call the method self._create_mime_attachment with the arguments content and mimetype, substitute the result for attachment.
do nothing.
take two characters from the i-th element of rawdata, if they are not equal to the string '</', throw an exception with string "unexpected call to parse_endtag" as the message.
call the method self.unclosed_block_tag with an argument list with an element endtag.
define the method __contains__ with 2 arguments: self and other.
return boolean True.
call the method self.strptime with arguments value and format, return the result.
raise an TemplateSyntaxError exception with an argument string "Named cycle '%s' does not exist", where '%s' is replaced with name.
define the function npgettext_lazy with 4 arguments: context, singular, plural and number set to None.
call the method zbuf.getvalue, return the result.
call the function http_cookies.SimpleCookie, on the return value call the value_encode method, with the argument character ';', if the tuple result equals to tuple containing character ';' and string '"\\073"', respectively, assign _cookie_encodes_correctly the boolean True value, otherwise assign it False.
call the __init__ method from the base class of the WSGIRequestHandler class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
if m is not None,
increment i by integer 1.
derive the class Info from base class CheckMessage.
from __future__ import unicode_literals into default name space.
if NoReverseMatch exception is caught,
try,
define the method __init__ with 2 arguments: self and variables.
call the method one_percent_re.sub with 2 arguments: string '%%' and t.contents, substitute the result for contents.
append a tuple containing 2 elements: full_file and f to self.choices list.
define lambda function that returns self.file.write field, use it as an argument for property function, put the result in write.
if file filename exists,
otherwise if action equals to string 'unapply_start'.
return encoding.
define the method _send with arguments self and email_message.
_meth_self is a string "im_self".
for every handler in handlers,
call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list_.
return obj.
call the method parser.parse_args with an arguments args set to an empty list, assign the result for defaults and _, respectively.
define the method __init__ with 4 arguments: self, data set to None, files set to None, auto_id is an string 'id_%s', prefix is None, initial set to None, error_class set to ErrorList, label_suffix set to None, empty_permitted set to boolean False.
if code is contained in _supported and call to the function check_for_language with an argument code evaluates to true,
call the function localize with 2 arguments: output and use_l10n set to context.use_l10n, substitute the result for output.
remove first and last elements of s, replace every occurrence of string '\%s' formated with quote with quote, replace every occurrence of raw string '\\' in the result with string '\\', return the result.
else if timeout converted into an integer equals to integer 0,
if remaining_bits is true,
return nothing.
call the method _time.localtime with an argument stamp, substitute the result for tt.
raise an Exception exception with an argument string "This %s instance cannot tell its position", where '%s' is replaced with self.__class__.__name__.
if pytz is true, substitute pytz.utc for utc, otherwise substitute result of the function UTC for utc.
if not,
if not,
self._container is an list.
if not,
call the method translation.activate with an argument string 'en-us'.
return settings.LANGUAGE_CODE.
derive class TemporaryFile from the base class FileProxyMixin.
import module sys.
do nothing.
raise an ValidationError with 3 arguments: value under the 'required' key of the self.error_messages dictionary, and code set to an string 'required'.
if candidate is not an instance of six.string_types,
substitute self._encoding for encoding.
define the method root_attributes with an argument self.
if ImportError exception is caught,
import module posixpath.
if truncate is None,
if Exception, renamed to e, exception is caught,
derive class Module_six_moves_urllib_request from the _LazyModule base class.
define the method __init__ with 2 arguments: self and field.
import module django.core.checks.model_checks.
if s is an instance of the subclass Exception,
substitute stream_or_string for self.stream.
raise an AttributeError with an argument string "This %s instance has no `content` attribute. "Use `streaming_content` instead.", where '%s' is replaced with self.__class__.__name__.
substitute template_dirs for self.template_dirs.
yield one element from the buffer_ iterable.
evaluate the method self._cache.decr with key and negative delta as arguments, return the result.
move integer 1 left for 20 bits, substitute the result for MB.
if settings.USE_L10N is true,
define the function get_default_timezone_name.
return value.
return initial_forms.
update fields dictionary with new_class.declared_fields.
delete entry under the oldkey key of the cache dictionary.
return boolean True.
append to errors list a dictionary created with 2 etries, if escape_html is true, return value of the function escape with an argument message for 'message', or if not message for 'message' and error.code for 'code' in error.code is true, if not, an empty string for 'code'.
remove the 'use_natural_keys' key from the options dictionary and substitute it for self.use_natural_keys, if the key doesnt exists substitute boolean False for self.use_natural_keys.
call the function timeuntil with 2 arguments value and arg, return the result.
import module os.
substitute FIELD for TYPE,
call the function add_arguments with parser as an argument, from the base class of the Command class.
call the self._delete method with argument f.name.
append tok to c.
if self._is_rendered is false,
call the method self.validate with an argument out.
if addr is a instance of six.string_types,
call the method response.add_post_render_callback with an argument callback.
otherwise if msg and visible_issue_count are true,
if not,
define the method add with 5 arguments, self, key, value, timeout defaulting to DEFAULT_TIMEOUT and version defaulting to None.
if not,
if default is None,
call the function self._new_gnu_trans with 2 arguments: localedir and use_null_fallback, substitute the result for translation.
if length of bits is greater or equal to intger 2 and second last element of bits is equal to string 'as',
split path in two parts by '/' character, return the result.
if j equals to integer -1,
call the method archive.extract with an argument to_path.
call the method ustring_re.sub with 2 arguments: fix and s, return the result.
call the method self.set_cdata_mode with tag as the argument.
try,
call the method _entity_re.sub with 2 arguments: _replace_entity and text, return the result.
f.required is boolean False.
do nothing.
self._cull_frequency is integer 3.
errors is an empty list.
call the method validate with an argument value, from the base class of the FloatField class.
from django.forms.forms import DeclarativeFieldsMetaclass and BaseForm into default name space.
return self.
if not,
value under the 'empty_permitted' key of the defaults dictionary is boolean True.
if self.stream is None:
for every w in self.widgets,
from __future__ import unicode_literals into default name space.
call the method parser.add_option with 2 arguments: string '--settings' and help as a string 'The Python path to a settings module,  e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.'
call the function node_class with 3 arguments: takes_context, args and kwargs.
if ssl.SSLError or smtplib.SMTPServerDisconnected exception occurred,
define function filepath_to_uri with path as the argument.
define the function templatetag with 2 arguments: parser and token.
define the method is_rendered with an argument self.
decorator function register.filter with an argument is_safe set to boolean False.
substitute options for self.options.
RESET is a string '0'.
for eery z in range of integers from 0 to 31, update _js_escapes dictionary with '\\u%04X' formated with z, for integer representation of z converted into a string.
define the method open with arguments self and mode set to None.
if slots is an instance of str,
define the method reset with an argument self.
convert app_template_dirs to a tuple, return it.
from django.core.handlers.wsgi import WSGIHandler into default name space.
define the method tzname with 2 arguments self and dt.
if not,
define the method __iter__ with an argument self.
substitute newline character for newline.
return nothing.
return sites.
define the method clear with an argument self.
BM_compatible is boolean True.
for every key and value in items of dictionary self,
try,
decorator function register.filter with an argument string "escapejs".
m2m_data is an empty dictionary.
if AttributeError exception is caught,
call the function lazy with arguments reverse and str, substitute the results for reverse_lazy.
split value by newline characters, substitute the result for lines.
substitute registry.register for register.
call the method kwarg_re.match with an argument first element of bits, substitute the result for match.
try,
set opname attribute of cls object to opfunc.
if serializers is None,
call the OVERLAPPED function, substitute the result for overlapped.
return host and an empty string.
if file path of src and dst files are the same, return boolean True, otherwise return boolean False.
call the method base64.b64decode with an argument chunk, substitute the result for chunk.
return input_val.
break from the loop execution.
if ImportError, renamed to e, exception is caught,
if ImportError exception is caught,
call the method form.instance._get_unique_checks with an argument exclude as exclude, substitute the result for unique_checks,  and date_checks, respectively.
define the method __repr__ with an argument self.
substitute i incremented by 1 for value under the 'counter' key of the loop_dict dictionary.
for every dict_ in self.dicts,
raise an CommandError exception with an argument string '"%s" is not a valid IPv6 address.' where '%s' is replaced with self.addr.
code is a string 'invalid'.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
decorator function register.filter with an argument is_safe set to boolean True.
invalid_var_format_string is None.
substitute DateTimeInput for widget.
move integer 1 left for 40 bits, substitute the result for TB.
if id_,
call the function allow_lazy with 2 arguments: linebreaks, six.text_type, substitute the result for linebreaks.
return nothing,
define the method has_key with 3 arguments: self, key, and version set to None.
return result.
evaluate method transaction.atomic with arguments: using set to database and savepoint set to connection.features.can_rollback_ddl, with the result,
slice the list value with unpacked list bits as an argument, return the result.
substitute member.name for name.
decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000.
if TypeError or ValueError exceptions are caught,
call the method self.write_items with an argument handler.
call the method self._archive.read with an argument name, substitute the result for data.
call the method self.get_exception_response with request, resolver and integer 404 as the arguments, assign the result to response.
item is a dictionary with 15 initial entries: result of the function to_unicode called with an argument title for 'title', result of the function iri_to_uri called with an argument link for 'link', result of the function to_unicode called with an argument description for 'description', result of the function to_unicode called with an argument author_email for 'author_email', result of the function to_unicode called with an argument author_name for 'author_name', result of the function iri_to_uri called with an author_link link for 'author_link', pubdate for 'pubdate', updateddate for 'updateddate', result of the function to_unicode called with an comments author_name for 'comments', result of the function to_unicode called with an argument unique_id) for 'unique_id)', unique_id_is_permalink for 'unique_id_is_permalink', enclosure for 'enclosure',  if true, categories is value for 'categories' key, if not, empty tuple is value for 'categories' key, result of the function to_unicode called with an argument item_copyright for 'item_copyright', ttl for 'ttl'.
for dirpath, dirnames and filenames, respectively, in directory tree tuple starting from the ldir,
return value.
define lambda function that returns self.file.seek field, use it as an argument for property function, put the result in seek.
return data.
if UnicodeError exception is caught,
call the function six.reraise with unpacked list exc_info as an argument.
if kwargs is true,
put cc into a list, assign it to self.cc.
if ch is contained in string "iLmsu#",
call the method self.can_read.release.
remove last element for quant.
derive the class LocaleRegexURLResolver with RegexURLResolver as base class.
call the method self.get_exception_response with request, resolver and integer 403 as the arguments, assign the result to response.
define the initialization function __init__ with self class instance and params as arguments.
input_type is a string 'number'.
define the method __init__ with 3 arguments: self, filter_expr and nodelist).
while ch is not equal to a string '}',
for every f in fields, if exclude is false, or if exclude is true and f is not contained in exclude, and only if f is not in ignored, append to list, a tuple with 2 elements: f and value under the f key of field_dict dictionary, use the resulting list as an argument, for the creation of the instance of OrderedDict class, substitute it for field_dict.
return supported_code.
call the function fn with list of arguments args and dictionary of argument values kwargs.
otherwise if i is smaller than list_length decremented by one,
raise an exception.
substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary.
elt is an list with an element elt.
call the function iri_to_uri with an argument redirect_to, substitute the result for the value under the 'Location' key of the self dictionary.
value under the DELETION_FIELD_NAME key of the form.fields is an instance of BooleanField class, created with 2 arguments: label set to return value of the function _ called with an string 'Delete' and required as boolean False.
evaluate the function force_text with e as an argument, extra is an dictionary with two pair of elements, 'status code' with integer value of 400 and 'request' with value request, respectively use the previous to call the function security_logger.error.
define the method __init__ with 3 arguments: self,unpacked list args and unpacked dictionary kwargs.
from django.conf import settings into default name space.
call the function add_to_builtins with an argument string 'django.template.loader_tags'.
close the process with an argument 1.
__T is a raw string '(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})'.
define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
call the BaseConverter function with BASE64_ALPHABET and sign set to '$' as arguments, store the result in base64.
if length of bits is lesser than integer 3 or second element of bits is not equal to string 'as',
substitute deactivate for self.deactivate.
call the method value.replace with an argument tzinfo as timezone, return the result.
return value.
for every part in singular,
get the value under the lang_code key of the _BROWSERS_DEPRECATED_LOCALES dictionary, substitute it for replacement.
call the function ugettext with an argument string "%s TB", substitute '%s' with the result of the call to the function, filesize_number_format with result of division of bytes by TB as an argument, substitute the result for value.
if new_name ends with a string '_',
derive the class NullBooleanField from the base class BooleanField class.
if value under the 'feed_copyright' key of the self.feed dictionary is not None,
if not,
if cursor is true,
call the _tc.load method with the 'foo:bar=1' converted to string as an argument.
define the method validate with arguments self and value.
call the function exhaust with an argument stream.
call the function template_dir.decode with an argument fs_encoding, substitute the result for template_dir.
call the method self.queryset.none, return the result.
return self.var.
self._namespace_dict is an empty dictionary.
self._empty is boolean False.
call the function self.create_var with an argument token, return the result.
define the function check_for_language with an argument lang_code.
sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, reverse the sort and return the result.
if result is not None,
derive the class Http404 from the Exception base class.
convert processors elements into a tuple, substitute it for _standard_context_processors.
call the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and function_name, substitute the result for args and kwargs.
call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, return the result.
while end is greater than integer 0 and return value of the s.count called with 3 arguments: an empty string, integer 0 and end, is an even number,
write a new line to the self.stream file stream.
substitute state for self.state.
for every item in qu append item.pk to a list, substitute resulting list for value under f.name key of the data dictionary.
define the function parse_color_setting with an argument config_string.
call the method clean with an argument value from the base class of the EmailField class.
app_configs is not None.
append form to self.saved_forms.
if regex_match is false,
val is None.
try,
join trans_bit into a string separated with whitespaces, substitute the result for bit.
call the method self.full_clean.
self._current is None.
raise an exception StopFutureHandlers.
yield and empty string as the result.
return an instance of a SsiNode class, created with 2 arguments: filepath and parsed.
raise an ValueError exception with string "The file cannot be reopened." as an argument.
divide j by integer 7, substitute the floored result for week_number.
raise an ValueError exception with an argument string 'must define at least one ordering operation: < > <= >='.
call the function sanitize_address with arguments addr and encoding, for every addr in return value of the getadresses function with tuple containing val as argument, join all the results into a string separated by ', ', substitute the result for val.
insert token at the beginning of self.tokens.
model_list is an empty list.
from django.template.loader import BaseLoader into default name space.
call the function activate with an argument self.language.
define the method widget_attrs with arguments self and widget.
return string 'th'.
if s is an instance of six.text_type or Promise,
otherwise if first element of second row of args equals a string '4',
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database', default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a database to introspect. Defaults to using the "default" database.'.
if match is true,
import module os.
attrs is an dictionary with 9 initial entries: form for 'form', extra for 'extra', can_order for 'can_order', can_delete for 'can_delete', min_num for 'min_num', max_num for 'max_num', absolute_max for 'absolute_max', validate_min for 'validate_min' for validate_max for 'validate_max'.
for every s in strings, call the function force_text with an argument s, join the results in a string, return the result.
i is integer 0.
substitute value under the name key for bf.
call self.stdout.write method with app_name and self.style.MIGRATE_LABEL as arguments.
call the method extracted.close.
return boolean True.
call the threading.local method, assign the result to trans_real._active.
return final_output.
_assertRegex is a strnig "assertRegexpMatches".
raise an StopIteration exception.
call the method self.fields.items, for every name and field in result,
call the self.make_key with key and version set to version as arguments, substitute the result for key.
do nothing.
if sys.platform starts with string 'java',
if saved_locale is not None,
define the connection with an argument self.
call the method self._create_attachment with an unpacked list attachment as an argument, use the result as an argument for the call to the msg.attach method.
append '/' to tmp, substitute it for display_url.
options is a list containing a tuple with 2 entries: string '--help' and None.
do nothing.
if e.args list first element starts with string "Error -5",
for model in router.get_migratable_models method return value, called with 3 arguments: app_config, connection.alias, and include_auto_created set to boolean True,
raise an TemplateSyntaxError exception with an argument string "expected another tag, found end of string: %s", where '%s' is replaced with subject.
call the method self.expression.resolve with 2 arguments: context and boolean True, return the result.
call the method os.path.basename with an argument fixture_name, substitute the result for fixture_name.
call the function os.chmod with arguments full_path and self.file_permissions_mode.
call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the IPAddressField class.
define the method list with an argument self.
raise a ValueError exception with an argument "You can only use `unpack_ipv4` if `protocol` is set to 'both'".
define the method encoding with arguments self and val.
return nothing.
call the method pending_references.keys, put the result into a set and substitute it for not_installed_models.
import module warnings.
raise an ValueError with an argument string 'empty_label list/tuple must have 3 elements.'.
call the method self.xml.startElement with arguments string 'object' and attrs.
substitute model for FormSet.model.
from gzip import GzipFile into default name space.
if settings.TEMPLATE_STRING_IF_INVALID is true,
call the method data.encode with 2 arguments: fp.encoding and errors, substitute the result for data.
derive the class FloatField from the base class IntegerField class.
define the method make_view_atomic, with self class instance and view as the arguments.
try,
substitute required, label and initial for self.required, self.label and self.initial.
try,
call the method re.search with 2 arguments: raw string '^[_a-zA-Z]\w*$' and name, if it evaluates to false,
call the function force_text with first element of list_ as an argument, return the result.
if fields is not None and f.name is not contained in fields,
if args in None of boolean False, substitute it for an empty list.
call the cursor.fetchone method, substitute the result for row.
domains is a tuple with 2 elements: strings 'djangojs' and 'django'.
UnlockFileEx.argtypes is a list containing 5 elements: HANDLE, DWORD, DWORD, DWORD and LPOVERLAPPED.
get the unicode representation of current working directory, join it and path into a string, substitute the result for path.
compatibility is a string 'compatibility'.
do nothing.
if encoding is true, substitute it for self._encoding, if not substitute settings.DEFAULT_CHARSET for self._encoding.
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " FAKED" as a argument.
define the method setlistdefault with 3 arguments: self, key and default_list set to None.
from django.core.exceptions import ValidationError into default name space.
define the method add_root_elements with 2 arguments self and handler.
define the method path with arguments self and name.
return context.
define the method as_text with an argument self.
call the method imatch.group with an argument integer 1, substitute the result for g.
if chunk_size is false,
return name.
call the method custom_sql_for_model with model, no_style() and connection as arguments, substitute the result for custom_sql.
derive the class Warning from base class CheckMessage.
return a tuple with 3 elements: if path is true, path, in not, a string '%s.%s' formated with obj.__class__.__module__, and obj.__class__.__name__, first element of obj._constructor_args and second element of obj._constructor_args.
define the function parse_datetime with an argument value.
for every relobj in iterator generated from the field.name attribute of the obj object.
increment weight by integer 2.
convert value and arg to integers, if value is divisible by arg, return True, otherwise return boolean False.
excluded_models is an empty set.
call the method parser.add_argument with 5 arguments: string '--noreload', action set to string 'store_false', dest set to string 'use_reloader', default set to boolean True and help is a string 'Tells Django to NOT use the auto-reloader.'.
substitute first header_end elements of chunk list for header.
call the function ugettext with an argument string "Please correct the duplicate data for %(field_name)s which must be unique for, the %(lookup)s in %(date_field)s.", where '%(field_name)s' is replaced with third element of data_check, '%(date_field)s' is replaced with fourth element of date_check and '%(lookup)s' is replaced with result of the function, six.text_type called with second element of date_check as an argument, return the result.
otherwise if value is an instance of datetime.date,
substitute var1 and var2 for self.var1 and self.var2, respectively.
with open file path in append mode,
try,
if not,
create a list of tuples out of 2 lists: appended params list to prefix_args and text_args, covert the result into a dictionary, substitute it for candidate_subs.
if cache is None,
substitute params for self.params.
if value under the "RUN_MAIN" key of the os.environ dictionary equals to string "true",
mime_type is a string 'application/atom+xml; charset=utf-8'.
input_type is a string 'text'.
call the function unicodedata.normalize with 2 arguments: string 'NFKD' and thousand_sep, put the result and thousand_sep into a set, for every replacement in the resulting set,
return None.
If you've already\n".
for every result and params in possibility,
if self has an attribute '_size'.
if o is an instance of datetime.datetime object.
otherwise if name equals a string 'id'.
substitute field_type for field_type and new_params, respectively.
try,
raise an ValidationError with 2 arguments: dictionary self.error_messages value under the key 'required', and code set to string 'required.
call the method handler.addQuickElement with 2 arguments: string 'uri' and value under the 'author_link' key of the self.feed dictionary.
append value under the key v of background dictionary to code_list.
if response.streaming is true,
return an empty string,
define the function unescape_string_literal with an argument s.
if self.verbosity is greater than integer 1,
define the method __promise__ with 4 arguments: cls, klass, funcname and method.
return ip_str.
call the params.get method with string 'KEY_PREFIX' and an empty string as arguments, substitute the result for self._key_prefix.
help is an string "Prints the DROP INDEX SQL statements for the given model module name(s).".
return result.
substitute self.toks for toks.
input_type is a string 'hidden'.
from django.utils.functional import cached_property into default name space.
if migration_name equals to string 'zero',
property decorator, to be called by property built-in function.
for every message in messages,
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
if name is contained in lib.filters.
if encoding equals to string 'utf-8'.
output is an empty list.
if strings_only and boolean return value of the call to the function is_protected_type for argument s are boolean True,
try,
substitute i-th element of value for widget_value.
define the method add_arguments with 2 arguments self and parser.
from django.conf import settings into default name space.
if unhandled_params is true,
substitute charset for self.charset.
from django.db import models into default name space.
convert value into boolean and substitute it for value.
output is an empty list.
get the value of the values dictionary under the value converted to lowercase key, substitute it for value, if the key doesnt exists, substitute value for value.
substitute value under the 'prefix' key of dictionary d, substitute it for prefix.
MEMCACHE_MAX_KEY_LENGTH is integer 250.
derive the class Command from the BaseCommand class.
derive the class TextInput from the Input base class.
derive the class Storage from the object base class.
call the method self.style.NOTICE with an argument: string: "\nYou have unapplied migrations; your app may not work properly until they are applied.", write it to self.stdout.
otherwise if safe_input is true,
call the method node.replace with an argument decorated.
for i in self._ordering append to a list value under the first element of i key of the self.forms dictionary, return resulting list.
for every ext in combo, if ext is true, join it to a string, separated by '.', put the result in a tuple, perform the previous for every combo in result of the function product called with 3 arguments: databases, ser_fmts and cmp_fmts, substitute the result for suffixes.
if self.number is greater than integer 1, return boolean True, otherwise return boolean False.
call the method self.form with unpacked dictionary defaults as an argument, substitute it for form.
call the method __init__ from the base class of the class SplitDateTimeWidget, with 2 arguments: widgets and attrs.
if errors_on_separate_row and bf_errors are both true,
if AttributeError exception is caught,
substitute '%s' in string 'Cache key will cause errors if used with memcached: %s (longer than %s)' with key, and MEMCACHE_MAX_KEY_LENGTH, call the function warnings.warn with previous string and CacheKeyWarning as arguments.
get the value under the settings.__module__ key of the sys.modules dictionary, use its __file__ field as an argument, for the call to the function upath, get the directory name of the resulting system path, join the result and string 'locale', into a valid file path, substitute it for globalpath.
call the self.user_regex.match method with an argument user_part, if it evaluates to false,
define the method handle with 2 arguments: self and unpacked dictionary options.
if self.__dispatch is None.
call the method self.find_template_cache.clear.
_mtimes is an empty dictionary.
call the function allow_lazy with an argument words, substitute the result for words.
from django.http.request import HttpRequest, QueryDict, RawPostDataException, UnreadablePostError and build_request_repr into default name space.
call the method line.lstrip, if the result starts with TRANSLATOR_COMMENT_MARK,
import module os.
return self.paginator.count.
value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class, created with 3 arguments: label set to return value of the function _ called with an string 'Order', initial set to index incremented by 1, and required as boolean False.
if IndexError exception is caught,
return translated.
substitute new_second_item with second_item.
otherwise is settings.USE_TI is true,
define the method _post_clean with an argument self.
map elements from args through the function conditional_escape, substitute the result for args_safe.
if p equals integer 0,
return ZERO.
close file descriptor s.
if not,
from __future__ import absolute_ into default name space.
split arg by ':', for every x in result,
from django.conf import settings into default name space.
import module sys.
substitute allow_empty_first_page for self.allow_empty_first_page.
otherwise if template_tuple is None,
remove the first element from self.command_stack, assign the result to command and source, respectively.
substitute _iteritems for items.
call the method self._mark_post_parse_error.
_supported is None.
read size number of bytes from self.stream stream, store the result in the result.
if item is contained in self.dict, return boolean True, otherwise return boolean False.
define the method update_watch with sender defaulting to None and dictionary pair of elements kwargs.
return nothing.
if "'stream'" is not contained in te converted into a string,
substitute left for self.first.
define the function timesince with d, now defaulting to None, reversed defaulting to False as arguments.
raise an ValidationError with 2 arguments: value under the 'max_length' key of the self.error_messages dictionary and code set to 'max_length'.
in string '%s_%d', replace '%s' with new_name and '%d' with num, substitute the result for new_name.
substitute result for self dictionary under key key.
append string '_template' to app_or_project, substitute it for base_subdir.
import module os.
substitute app_or_project for self.app_or_project.
if m is None,
substitute item for value under the first element of self.loopvars key of the context dictionary.
if self.is_required is false,
context_extras is an empty dictionary.
define the function dec with an argument func,
call the function datetime_safe.new_datetime with an argument date, substitute the result for date.
from django.utils.safestring import mark_safe into default name space.
call the method self.unget with list containing first remaining elements of chunk as an argument.
return iterable self.keyOrder.
raise an ValueError exception with an argument string ''Unable to configure root logger: %s' formated with e.
call the function warnings.warn with 3 arguments: string "django.utils.tzinfo will be removed in Django 1.9. " "Use django.utils.timezone instead.", RemovedInDjango19Warning and stacklevel set to 2.
call the function warnings.warn with 2 arguments: string "``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead." and RemovedInDjango19Warning.
if name equals a string 'content-disposition',
if potfile fie exists,
define the method resolve with 3 arguments: self, context and ignore_failures set to boolean False.
self.choices is an empty list.
for every member in members,
months is a tuple with 12 elements: strings 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov' and 'Dec'.
if request has an attribute named 'urlconf',
substitute self.rendered_content for self.content.
if name is None and filter_func is None,
derive the class ChoiceInput from the SubWidget base class.
position the file self.file pointer at the end.
yield buf as return value of the generator.
replace '%s' in string '%s.management.commands.%s' with app_name and name, respectively, use it as an result for the call to the import_module function, substitute the result for module.
for every app_label in app_labels,
call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments, substitute the result for pickled.
define the method items with an argument self.
convert language to lowercase, return it.
extend errors list with e.error_list.
substitute func for self.func.
define the function __init__ with 3 arguments: self, token and parser.
define the method __init__ with 2 arguments: self and filter_expression.
if not,
substitute parsed for self.parsed.
_iterkeys is a string "iterkeys".
self.none_value is a tuple containing 2 elements: integer 0 and empty_label.
field_notes is an empty list.
if value under 'plain' key of the options dictionary is true,
if not,
derive the class RssUserland091Feed from the RssFeed base class.
otherwise if self.verbosity is greater than integer 0,
define the method __init__ with arguments: self, unpacked list args and unpacked dictionary kwargs.
if name is contained in MEDIA_TYPES,
return first and second element of result.
raise a ValueError exception with an argument string "JSON can't represent timezone-aware times.".
define the function strftime with 2 arguments dt and fmt.
define lambda function that returns self.file.truncate field, use it as an argument for property function, put the result in truncate.
try,
call the method _ExpatParser.__init__ with arguments self, unpacked list args and unpacked dictionary kwargs.
call the method self.attrs.copy, substitute the result for attrs_plus.
from unittest2 import everything.
define the method __init__ with 5 arguments: self, protocol set to string 'both', unpack_ipv4 set to boolean False, unpacked list args, unpacked dictionary kwargs.
from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space.
substitute value under the KEY key of the root dictionary for oldkey.
try,
for every sub_stream in boundarystream,
define the function gen_filenames with an argument only_new defaulting to boolean False.
get the value from the options dictionary under the key 'verbosity', substitute it for self.verbosity.
from django.core.management.base import BaseCommand and CommandError into default name space.
make a system symbolic link between original_path and symlink_path.
call the method logging.getLogger with an argument string 'py.warnings', substitute the result for logger.
translation._catalog is an empty dictionary.
call the method parser.next_token, substitute the result for token.
call the method emit_post_migrate_signal with created_models, self.verbosity, self.interactive and connection.alias as arguments.
split extra_classes into words, by whitespaces, substitute the result for extra_classes.
do nothing.
if value is an instance of str type,
from email.header import Header into default name space.
return nothing.
raise an ValueError exception with an argument string 'No handler found with name %r' formated with name.
call the method self.__prepare_class__.
import module os.
from django.utils.functional import Promise into default name space.
from django.conf import settings into default name space.
increment i by integer 1.
define the method is_checked with an argument self.
define the method got with 3 arguments: self, key and otherwise set to None.
remove first 2 and last 2 elements from var.
get the value under the 'use_natural_keys' key of the options dictionary, substitute the result for use_natural_keys.
call the method self.configurator.convert with an argument value, substitute the result for result.
define the method handle with self instance of a class, list args, dictionary options as arguments.
for every migration in migrations_to_squash,
get the value 'inhibit_post_migrate' key of the options dictionary, if it exists substitute it for inhibit_post_migrate, otherwise inhibit_post_migrate is boolean False.
return nothing.
if call to the method self.is_valid, evaluates to false or self.can_delete is boolean false,
call the function warnings.warn with an argument, string 'A secure pseudo-random number generator is not available on your system. Falling back to Mersenne Twister.'.
return boolean False.
if OSError or TypeError errors occurred.
if verbosity is greater or equal to integer 2,
derive the class Variable form the base class object.
if socket.error, renamed to e, exception is caught,
call the function itertools_cycle with an argument self.cyclevars, substitute the result for value under the self dictionary context.render_context.
raise an ImportError exception.
define the method __nonzero__ with argument self.
return boolean False.
from django.core.mail.backends.base import BaseEmailBackend into default name space.
replace all the occurrences of '__' with '_' in new_name.
try,
if length of args equals integer 2,
if six.PY2 is true,
if IOError, substituted to e, exception is caught,
substitute _moved_attributes for _MovedItems._moved_attributes.
 raise tp, value, tb""".
return ret.
if i is even number,
return new_class.
define the method id_for_label with arguments self, data, files and name.
call the method self.nodelist_empty.render with an argument context, return the result.
define the function module_to_dict with 2 arguments: module and omittable as a lambda function with an argument k,
get the value under the 'all' key of the options dictionary, substitute it for process_all.
try,
return string '0'.
if field.name attribute of obj is not None,
if self.save_as_new is true,
set old_method_name attribute of the base object to the result of the function wrapper called with an argument old_method.
define the method render with 2 arguments: self and context.
import module time.
derive the class EmailBackend from the BaseEmailBackend base class.
return boolean True.
if field.rel has an 'to' attribute,
call the method self.error_class, substitute the result for value under the field key of the self._errors dictionary.
increment factor by one.
call the method field_stream.read, substitute the result for raw_data.
raise a exception of ComandError class with string "More than one migration matches '%s' in app '%s'. Please be more specific.", with all '%s' strings replaced with migration_name and app_label, respectively, as an argument.
substitute declared_fields for new_class.base_fields.
define the function _parse_date_fmt.
define the method __init__ with an argument self.
return boolean False,
derive the class LocaleRegexProvider with object as base class.
define the method _create_message with arguments self and msg.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
call the function force_text with an argument value, substitute the result for text_value.
evaluate the function import_string with key_func as argument, return the result.
return an instance of SafeText, created with an argument data.
call the m2m_convert function with pk as argument, for every pk in field_value, substitute the value under the field.name key of the m2m_data dictionary.
call the method formats.get_format_lazy with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for input_formats.
call the method self.args_check with 3 arguments: filter_name, filter_func and args.
remove config dictionary element under 'class' key, use it as an argument for the call to the method self.resolve, substitute the result for klass.
append list containing 4 elements: 'CVS', '.*', '*~' and '*.pyc', to ignore_patterns.
call the method self.error_class with an argument error_class as an string 'nonfield', substitute the result for value under the field key of the self._errors dictionary.
if key is contained in d,
for every app and names in result of the method conflicts.items, join names into a string, separated by ', ', join it with app into a string, separated with string '; ', substitute it for name_str.
return out.
return base.
make a directory top_dir.
define the function jython_reloader with main_func, args and kwargs as arguments.
return boolean False.
if widget is an instance of type class,
call the re.compile function with an argument raw string '^[\d,]+$', substitute the result for comma_separated_int_list_re.
from __future__ import unicode_literals into default name space.
otherwise if token_string starts with BLOCK_TAG_START,
use global variable _localtime.
derive the class InputStreamExhausted from the Exception base class.
return new_value.
substitute self.form.required_css_class for the value under the 'class' key of the attrs dictionary.
append potfile to potfiles.
try,
increment int_part_gd by thousand_sep.
define the function module_has_submodule with 2 arguments: package and module_name.
skip this loop iteration.
define the method path with an argument self.
divide timezone by integer 60, substitute the quotient of the division for hour and reminder for minute.
define function patch_cache_control, with response and dictionary set of arguments, kwargs, as arguments.
call the method resolved_path.append with an argument ns.
substitute settings.DATE_FORMAT for arg.
define the method add_arguments with 2 arguments self and parser.
get the value under the 'cookies' key of the state dictionary, convert it to a string and substitute it for value under the 'cookies' key of the state dictionary.
if call to the function _samefile with old_file_name and new_file_name evaluates to boolean True,
return WRAPPER_ASSIGNMENTS.
substitute windll.kernel32.LockFileEx for LockFileEx.
call the self.clear method.
return attrs.
if not,
_version is a string "2.0".
call the method Field.validate with 2 arguments: self and value, return the result.
try,
call the method signing.get_cookie_signer with an argument salt set to sum of key and salt, call the method sign on the result with an argument value, substitute the result for value.
try,
if not,
call the method self.can_write.release.
call the get_bytes_from_wsgi function with environ, string 'SCRIPT_NAME' and empty strings as arguments, substitute the result for script_name.
for every digit in number coverted to a string,
get the value under the 'hide_empty' key of the options dictionary, if the key exists substitute it for self.hide_empty, if not, self.hide_empty is boolean False.
if error_messages is true and f.name is contained in error_messages,
if pattern has an attribute '_callback_str',
convert whitespace character to unicode and substitute the result for space.
append header to the string 'HTTP_', append the result to the list headerlist.
return statements.
divide absolute offset by module 60, use the result to format string '%02d%02d', substitute it for hhmm.
call the method self.is_checked, if it evaluates to true,
define the method id_for_label with 2 arguments: self and id.
derive the class WidthRatioNode from Node base class.
define the function file_move_safe with 4 arguments: old_file_name, new_file_name, chunk_size set to multiple of integers 1024 and 64,
from django.utils.dates import MONTHS into default name space.
if run_syncdb and executor.loader.unmigrated_apps exist,
substitute self._rollback for rollback.
instantiate class ModelFormOptions with argument: attribute 'Meta' of the new_class object. if it exists or None, if not, assign the result to opts and new_class._meta.
replace '%r' from string '\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.',  with db_name, substitute it for shutdown_message.
call the method self._isdst with an argument dt, if it evaluates to true,
substitute _itervalues for values.
breaks from the smallest enclosing loop execution.
if not,
call the function _ with an argument string '%(datetime)s couldn\'t be interpreted in time zone %(current_timezone)s; it ' 'may be ambiguous or it may not exist.', substitute the result for message.
import module datetime.
define the method __repr__ with an argument self.
if KeyError exception is caught,
import module re.
if not,
if kwarg is true,
help is an string "Introspects the database tables in the given database and outputs a Django model module.".
extend list kw with a list with 5 elements: d.hour, d.minute, d.second, d.microsecond and d.tzinfo.
if initial is not an instance of the list type,
widget is an instance of HiddenInput class
set attrvalue to None.
call the method logger.addHandler with an argument: h-th element of value under 'handlers' key of self.config dictionary.
if extra_params is true,
define the method _format_value with 2 arguments: self and value.
if self.verbosity is grater than, or equal to integer 2,
define the method empty_form with an argument self.
sign is a string '-'.
get the value under the 'content-type' of the meta_data dictionary, if it exists assign it to content_type, content_type_extra, if not, content_type is an empty string and content_type_extra is an empty dictionary.
for every key is self.bad_cookies,
define the function widthratio with 2 arguments: parser and token.
update defaults dictionary with kwargs.
import module sys.
define the function get_script_prefix.
call the function self.regex.search with an argument path, substitute the result for match.
self._post is an instance of QueryDict created with arguments: self.body and encoding set to self._encoding, self._files is an instance of class MultiValueDict.
if key is not contanied in self,
from io import BytesIO into default name space.
define the method __nonzero__ with an argument self.
if self.instance.pk is None,
property decorator,
derive the BaseCommand class from the object base class.
call the function new_method_proxy with an argument dir, substitute the result for __dir__.
substitute fcntl.LOCK_EX for LOCK_EX.
from django.core.serializers.json import DjangoJSONEncode into default name space.
get self.instance
from django.utils import six into default name space.
define method handle with arguments self, unapcked list app_labels and unpacked dictionary options.
if 'content_type' key doesnt exist in kwargs, set its value to 'application/json'.
define the method __init__ with 5 arguments: self, max_value set to None, min_value set to None, unpacked list args and unpacked dictionary kwargs.
raise an AttributeError with an argument string "no such move, %r", formated with a tuple with an element name.
derive class Module_six_moves_urllib_parse from the _LazyModule base class.
if self.match is not None,
template is an instance of Template class, created with an argument content.
if vale is None or an empty string,
if LookupError or ImportError, renamed to e, exceptions are caught,
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
help is a string "Updates database schema. Manages both apps with migrations and those without.".
define the function include_is_allowed with an argument filepath.
call the method token.split_contents, substitute results without the first element for bits.
for every accessor_name and object_list is return value of the method self.m2m_data.items.
close the file object.
call the function to_python with an argument pk, substitute the result for pk.
call the method logging._handler.clear.
evaluate the http.QueryDict method with raw_query_string and encoding set to self._encoding as arguments, return the result.
try,
week_number is None.
if timeout equals to DEFAULT_TIMEOUT,
lbp is an integer 0.
join hidden_fields elements into a string, without separation, substitute the result for str_hidden.
if settings.TEMPLATE_DEBUG is true,
call the self.get method with k and version set to version as arguments, substitute the result for val.
from django.utils.jslex import prepare_js_for_gettext into default name space.
define the method to_python with arguments self and value.
call the function sql_destroy_indexes with 3 arguments: app_config, self.style and connection, substitute the result for statements.
return the value under the INITIAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary.
call the method language_code_re.search with an argument accept_lang, if it evaluates to false,
substitute origin for self.origin.
from django.core.validators import validate_ipv4_address.
import module copy.
append attr.name to attrs for every attr in self._moved_attributes.
yield item.
call the method parser.add_option with 3 arguments: string '--version', action set to string 'version', and version set to result of the method self.get_version.
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
break from the loop execution.
call the method parser.add_option with 5 arguments: string '--no-color', action set to a string 'store_true', dest set to string 'no_color' default set to boolean False and help set to a string "Don't colorize the command output.".
return value.
define the function check_1_7_compatibility with argument kwargs dictionary.
define the method add_handlers with 3 arguments: self, logger and handlers.
call the function open_method with arguments: fixture_file and mode, substitute the result for fixture.
for every log in existing,
define the method render with 4 arguments: self, name, value and attrs set to None.
from django.http.cookie import SimpleCookie and parse_cookie into default name space.
call the function django.get_version, return the result.
strip value of the first and last element.
fp is a instance of a class six.BytesIO.
for model in return value of the method router.get_migratable_models with arguments app_config, connection.alias, and include_auto_created set to boolean True,
define the method __init__ with 5 arguments: self, display_name, loader, name and dirs.
call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key, with unpacked list field_value as an argument, substitute the result for obj.
raise an ImproperlyConfigured exception with an argument string "Error importing template source loader %s - can't pass arguments to function-based loader.", where '%s' is replaced with loader.
self.field.choice_cache is a list containing results of the method self.choice called with an argument obj, for every obj in result of the method self.queryset.all.
define the method __getattr__ with arguments self and name.
raise an DisallowedHost exception with an argument msg.
decorator function register.filter with an argument is_safe set to boolean False.
raise TemplateSyntaxError("%r must be the first tag in the template.", where '%s' is replaced with node.
substitute next_item for sublist_item.
substitute EscapeText for EscapeUnicode.
define the method render with 4 arguments: self, name, value and attrs set to None.
append ch to result.
from django.utils.module_loading import import_string into default name space.
if ImportError exception is caught,
define the method __init__ with arguments self, fields set to an empty ilst, unpacked list args and unpacked dictionary kwargs.
call the method self.reset.
raise an exception of class NotImplementedError with string 'subclasses of BaseCache must provide an add() method' as argument.
raise an exception,
pop_context is boolean False.
append self.msgattrib_options to a list containing string 'msgattrib', append to it a list containing string '-o', pofile and pofile, substitute the result for args.
if not,
subject is an string '%s: %s' formated with record.levelname and result of the method record.getMessage, respectively.
cache_suffix is a string '.djcache'.
define the method as_text with an argument self.
return instance of _HashedSeq class, created with an argument key.
singular is an empty list.
define the method get_many with self class instance, keys and version defaulting to None as arguments.
strip the content_type of the whitespaces, substitute it for content_type.
call the function runfastcgi with an argument all the elements, except the first from the sys.argv list.
call the Parser object with stream and self._boundary, for every item_type, meta_data and field_stream in return value,
pk_value is None.
if change equals to FILE_MODIFIED,
if cache_timeout equals to None,
from django.utils.translation import ungettext and ugettext as _ into default name space.
do nothing.
if not,
define the method configure_custom with 2 arguments: self and config.
from os.path import join, normcase, normpath, abspath, isabs, sep and dirname into default name space.
return an instance of a LoadNode class.
break from the loop execution,
define send_mail funtion with subject, message, from_email, recipient_list, fail_silently set to boolean False,
chain all errors elements into a list, return it.
define the function popen_wrapper with 2 arguments: args and os_err_exc_type set to CommandError.
derive the class Group from list base class.
from django.utils.translation import ugettext_lazy as _ and ugettext into default name space.
define the function is_protected_type with obj as the only argument.
if length of list_ equals integer 1,
return message.
append self.msgmerge_options to a list containing string 'msgmerge', append to it a list containing pofile and potfile, substitute the result for args.
get the value under the 'no_location' key of the options dictionary, if it is true,
define the method _get_size_from_underlying_file with argument self.
call the load method on the c class instance, with the cookie argument.
call the method self.next_token, substitute the result for self.current_token.
define the function now with 2 arguments: parser and token.
call the method apps.get_app_config with an argument exclude, substitute the result for app_config.
call the method s.feed with an argument value.
if relative_dir is true,
get field.name attribute of obj, convert it to a string, substitute it for the value under the filed.name key of self._current dictionary.
return attachment.
if default_kwargs exists, substitute it for self.default_kwargs, otherwise self.default_kwargs is an empty dictionary.
call function _checkLevel with an argument level, use the result as an argument for the method result.setLevel.
write string "Performing system checks...\n\n" to self.stdout stream.
if error has an attribute 'error_dict',
for every path in self.locale_paths,
call the function allow_lazy with 2 arguments: strip_spaces_between_tags, six.text_type, substitute the result for strip_spaces_between_tags.
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database', default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a database to flush. Defaults to the "default" database.'.
if exception OSError, renamed to e, is caught,
valid is boolean False.
call the method __setitem__ from the base class of the class SortedDict, with 2 arguments key and value.
if ValueError exception is caught,
call the function force_text with an argument self.value, substitute the result for self.value.
try,
define the function construct_instance with 4 arguments: form, instance, fields set to None and exclude set to None.
in encoded, replace all the occurrences of unicode character "\\054" with ',' character and "\\073" with ';' characters.
substitute tok for value under the groupid key of the self.toks dictionary.
if serializers is None and _serializers is false,
raise an NotImplementedError with argument string 'subclasses of FileUploadHandler must provide a receive_data_chunk() method'.
call the method cache.clear.
open '/dev/null' file in read mode, substitute the result for si.
common_prefix is None.
for every i and line in enumerated iterable lines,
convert ip_str to lowercase, if it doesnt start with a string '0000:0000:0000:0000:0000:ffff:',
consume_next is boolean True.
skip this loop iteration.
define the method prepare_value with 2 arguments: self and value.
define the function force_text, with s, encoding set to 'utf-8', strings_only set to False, errors set to string 'strict' as arguments.
zip val1 and va2 into list of tuples, for every x and y in the result,
raise an TypeError exception with an argument string "sep must be None or a string".
count occurrences of '\n' in t.contents, add the result to t.lineno, substitute the result for cur_lineno.
call the object d with arguments stream_or_string and unpacked dictionary options, return the result.
call the method collections.defaultdict with a argument: lambda function without arguments that returns an empty list, substitute the result for commands_dict.
try,
call the method threading.RLock, substitute the result for self.mutex.
call the function resolve with arguments path and urlconf.
if parser doesnt have an '_namedCycleNodes' attribute,
from django.apps import apps into default name space.
if y, m and d are all equal to string '0',
derive the class ConvertingTuple from tuple base class.
call the method parser.delete_first_token.
define the method T with an argument self.
substitute TemplateLoader for func.
convert key and default to strings, get the value under the key string key of the environ dictionary, if it does not exists use the, default string value, substitute it for value.
import module zlib.
decorator stringfilter,
if self.is_bound is true and self.errors is false, return boolean True, otherwise return boolean False.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
import re module.
if form.is_bound is true,
derive the class ImmutableList from the tuple base class.
if s is an instance of bytes or Promise and s._delegate_bytes is true,
define the function get_commands.
substitute boundary for self._boundary.
derive the class MIMEMixin.
yield one element of the itterable obj.
wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer, for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare', and value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxThreads'.
define the method __init__ with 3 arguments: self, filepath and parsed.
if six.PY2 is true,
replace every occurrence of '</' in s with '<\\/'.
define the function lru_cache with 2 arguments maxsize set to integer 100 and typed set to boolean False.
call the method self.write_migration_files with an argument changes.
return length of self.items.
code is a string 'limit_value'
substitute nodelist for self.nodelist.
if self has an attribute 'error_dict',
substitute HiddenInput for widget.
if data is true,
define the function inlineformset_factory with 20 arguments: parent_model, model, form set to ModelForm,
if not,
otherwise, if pattern has an '_callback' attribute.
define lambda function that returns self.file.fileno field, use it as an argument for property function, put the result in fileno.
if request.method equals to string 'HEAD',
create the list of paths from which filename module was included for every filename in new_modules, only is filename has '__file__' attribute, substitute the resulting list for new_filenames.
substitute object for Iterator.
get the value under the key 'exclude' of the options dictionary, substitute it for exclude.
if key starts with self.prefix.
if first nine elements of block_content is string 'verbatim' or 'verbatim ',
get the value under the 'traceback' key of the options dictionary, substitute the result for traceback.
if extra_attrs is true,
substitute value under the cache_alias key of the caches dictionary for cache.
return self.value.
created_models is a set.
define the method listdir with arguments self and path.
compile regex from a string '\\(.)', substitute it for re_escaped.
define the method __init__ with 6 arguments: self, name, old_mod, new_mod, old_attr set to None, new_attr set to None.
if self.data.minute equals integer 0,
from django.core.management.sql import sql_custom into default name space.
if status is not equal to STATUS_OK,
call the method app.initialize with an argument argv as an empty list.
derive the class DateInput from the DateTimeBaseInput base class.
call the method __new__ from the base class of the class SortedDict, with 3 arguments: cls, unpacked list args, and unpacked dictionary kwargs.
substitute '%s' in string '<%s: %s>' with self.__class__.__name__ and self, if exists, or string 'None' if it doesnt, return it.
if 'args' is contained in options,
do nothing.
for every v in self.validators,
get 'render' attribute of template object, if it is callable,
output is a list containing an entry: result of the function format_html called with 2 arguments: string '<select multiple="multiple"{0}>' and result of the function flatatt called with an argument final_attrs.
call the function allow_lazy with an argument phone2numeric, substitute the result for phone2numeric.
m2m_value is an lambda function with value as an argument, return value is the result of the method value.natural_key.
call the function iri_to_uri with an argument location, return the result.
define the method __init__ with 4 arguments: self, takes_context, args and kwargs.
call the method self.common_logger_config with 3 arguments: logger, config and incremental.
substitute months for self.months.
define the method configure with an argument self.
from functools import update_wrapper.
derive the class FileInput from the Input base class.
define the method __init__ with 2 arguments: self and name.
return string '1'.
import module logging.
property decorator,
from importlib import import_module.
python_2_unicode_compatible decorator
join self._container elements into a string, return it.
call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
call the method pop from the base class of the class QueryDict, with arguments key and unpacked list args, return the result.
if f equals to string '__pycache__',
substitute the value under the fieldname key of the self.fields dictionary for field.
if renamed is boolean False,
join elements of output into a string, separated by newline characters, use it as the argument for the call the function mark_safe, return the result.
if digest is false,
call method mail.attach_alternative as html_message and string 'text/hmtl' as arguments.
if length of bits is not zero,
try,
if elt is an instance of six.string_types class,
derive class CacheKeyWarning from the DjangoRuntimeWarning base class.
substitute compare_to for value under the state_frame dictionary under the self key.
if domain_part is not contained in self.domain_whitelist and method self.validate_domain_part with an argument domain_part evaluates to false,
append options to output.
if obj_list is None,
for every field in concrete_model._meta.many_to_many,
call the Model._meta.get_field method with an argument field_name, substitute the result for field.
add self.form.error_css_class to extra_classes set.
define the method __iter__ with an argument self.
call the encode function on the Header class instance, created with arguments nm and string 'utf-8', substitute the result for nm.
compare_to is None.
bring integer 36 to the power of factor, substitute the result for j.
otherwise if name is not None and compile_function is not None,
slice list unhandled_params from the beginning to the length of defaults last element,
return an instance of TemplateSyntaxError class with an argument msg.
decrement week_number by integer 1.
define the method delete_first_token with an argument self.
substitute EmailInput for widget.
try,
_cookie_allows_colon_in_names is boolean False.
self.file_name is None.
define the method __iter__ with an argument self.
raise a NotImplementedError with an argument string
substitute last element of bits for target_var.
if value is an instance of six.string_types and value converted to lowercase is not equal to strings 'false' or '0',
call function update with path as the argument, for every path in settings.LOCALE_PATHS, extend basedirs list with previous items.
instantiate a class Group with 2 arguments: string "%%(%s)s" formated with param, and None, append it to result.
call the function import_module with an argument app_name.
if connector is true, substitute it for self.connector, otherwise substitute self.default for self.connector.
call the function _generate_cache_key with request, request.method, headerlist, key_prefix as arguments, return the result.
for every migration in migrations_to_squash,
if stream_or_string is an instance of the six.string_types,
if language_code is not contained in self._reverse_dict
for every middleware_method in self._request_middleware,
sites is an empty list.
define the method stringfilter with an argument func.
if bits is true and kwarg_format is false,
if t is not None,
return a string '%02d' formated with self.data.day.
if self._count is None,
append '.' to name, substitute the result for prefixed.
if OSError exception is caught,
call the method viewname.split, with an argument ':', substitute the result for parts.
if data is None,
if default is true and RAISE_ERROR is false,
return the string '<Page %s of %s>', with occurrences of '%s' replaced by self.number and self.paginator.num_pages, respectively.
if not,
define the method render_node with 3 arguments: self, node and context.
tpl is an string "EntitiesForbidden(name='{}', system_id={!r}, public_id={!r})".
if current is callable object,
format_key is a string 'TIME_INPUT_FORMATS'.
raise an NotImplementedError with an argument string 'subclasses of Tokenparser must provide a top() method'.
if app_config.models_module is None or app_config is contained in excluded_apps
try,
return token.
if length of self._cache is greater or equal to self._max_entries,
define the function autoescape with 2 arguments: parser and token.
derive the class HttpResponseForbidden from the HttpResponse base class.
return s.
python_2_unicode_compatible decorator,
self._headers is an empty dictionary.
raise an CommandError exception with an argument string '"%s" is not a valid port number or address:port pair.', where '%s' is replaced with value under the 'addrport' key of the options dictionary.
call the function get_language, substitute the result for lang.
define the function pretty_name with an argument name.
define the method value_from_datadict with 4 arguments: self, data, files and name.
get _iteritems attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable, return it.
if self.is_localized is true,
return nothing.
for every fixture_label in fixture_labels,
do nothing.
call the method mimetype.split with arguments: character '/' and integer 1, substitute the result for basetype and subtype, respectively.
from django.forms.widgets import everything into default name space.
substitute node.source for e.django_template_source.
return wrapper.
raise an CommandError with an argument string "errors happened while running msgmerge\n%s", where '%s' is replaced with errors.
call the method self.add_arguments with an argument parser.
if value is not equal to an empty string,
call the method parser.add_argument with 5 arguments: string '--merge', action as a string 'store_true', dest as a string 'merge', default set to boolean False and help set to a string "Enable fixing of migration conflicts.".
import threading module.
define the function ngettext_lazy with 3 arguments: singular, plural and number set to None.
return a string '%s(%s)' formated with self.__class__.__name__ and dictreprs.
if self.use_natural_foreign_keys is true and field.rel.to has an attribute 'natural_key',
if bytes is smaller than KB,
if self._is_rendered is false,
call the function bytes with an argument self, divide the result with rhs and return the reminder of the division.
call the function lazy with 2 arguments: pgettext and six.text_type, substitute pgettext_lazy.
define the method _create_alternatives with arguments self and msg.
default_error_messages is an dictionary with an initial entry: result of the function _ called with an argument string, 'Enter a number.' for 'invalid'.
define the method __getitem__ with 2 arguments: self and idx.
call the method self.recipients, if it evaluates to false,
if num_loopvars is not equal to len_item,
call the method value.decode with an argument charset.
try,
return an empty string.
if data is true,
increment weight by integer 2.
convert num to an integer, substitute it for length.
if las equals integer 3,
if first element of new_name is digit,
raise an CommandError exception with an argument string 'There is no system check with the "%s" tag.', where '%s' is replaced with invalid_tag.
if self.file_path file is not writable,
return Operator.
get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
if string '()' is contained in config,
define the method clear with argument self.
if exclude is true and f.name is contained in exclude,
append truncate_text to out.
define the method __getitem__ with 2 arguments: self and key.
if not,
if extensions is false, substitute it for exts, otherwise exts is a list containing 2 elements: string 'html' and string 'txt'.
if shown is an empty set,
from datetime import date as real_date and datetime as real_datetime into default name space.
substitute new_attr for self.attr.
call the method self.has_leading_dir with an argument list, with elements x.name for every x in members, substitute the result for leading.
return default.
decorator deconstructible,
define the function format with 2 arguments self and formatstr.
if attribute 'winerror' of object e is not equal to integer 32 and if 'errno' attribute is not equal to integer 13,
call the method self.load_label with an argument fixture_label.
append value to parts.
call the os.path.split with argument name, assign the result to the dir_name and file_name respectively.
derive the class IncludeNode from the Node base class.
raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a set() method' as argument.
do nothing,
do nothing.
call the method self.parent_name.resolve with an argument context.
define the method pop with 3 arguments: self, key and unpacked list args.
if vary_on is None,
if length of value is not equal to integer 1,
call the function isabs with an argument path, if it evaluates to false,
return self.data.hour.
return a dictionary generated with an expression, return value of the method e.as_data for f, for every f and e in list of tuples of self dictionary key, pair entries.
call the function force_str with an argument: default if it is true, or if not, first element of the result of the function, get_format called with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for format.
raise an TemplateDoesNotExist exception with an argument template_name.
if representative is None,
for form in self.forms append form.cleaned_data to a list, return the resulting list.
substitute arg converted into an integer for length.
from django.utils import six into default name space.
reverse the order of elements of styles.
re raise an exception.
substitute i-th element of self.forms for form.
if origin is true,
append name to the value of under the app key of the commands_dict.
from logging.config import dictConfig.
call the function dec with an argument func, return the result.
substitute self.__class__ for obj.__class__.
call the function sys.exit with argument exit_code.
call the method datetime.time with an argument unpacked dictionary kw, return the result.
substitute obj for self.object.
import module copy.
do nothing.
try,
call the function dateformat.time_format with 2 arguments: value and result of the function get_format called with 2 arguments: format, if its true, otherwise string 'TIME_FORMAT' and use_l10n as use_l10n, return the result.
substitute urlconf_name for self.urlconf_name.
call the method m.groups, assign the result to self.addr, _ipv4, _ipv6, _fqdn and self.port, respectively.
RAW is a string "raw".
return iterator object based on the self.file collection object.
template is a string '%(input)s'.
if p_pattern starts with a string '^',
substitute settings.TIME_FORMAT for arg.
results is a tuple with 2 elements, 2 empty lists.
if translation has an attribute '_catalog',
call the sio.readline method with size as an argument, substitute the result for line.
django.core.exceptions import ImproperlyConfigured, ValidationError, NON_FIELD_ERRORS and FieldError into default namespace.
call the method prepare_value from the base class of the class ModelMultipleChoiceField, with an argument v, for every v in value, return the list of results.
call the method form.add_prefix with an argument self._pk_field.name, use the result as an key to get the value of the form.data dictionary, assign it value None.
derive the class SlugField from the base class CharField class.
if ImportError, renamed to e, exception is caught,
call the method self.create_table with arguments: db and tablename.
return obj_dict.
decorator function register.filter with an argument is_safe set to boolean False.
substitute list with an element block_name for parser.__loaded_blocks.
get the value under the name key of self.blocks dictionary, insert to it block at the beginning.
if 'filename' attribute of ev is None,
if string '()' is contained in config,
if list_ is not an instance of tuple or list types and length of list_ is not equal to integer 2,
raise an exception.
try,
return value.
for every attr in _urllib_robotparser_moved_attributes,
from django.core.management.utils import find_command and popen_wrapper into default name space.
substitute '%s' in 'Internal Server Error: %s' with request.path, exc_info set to exc_info, extra is an dictionary with two pairs of elements 'status_code' with value 500, and 'request with value request, respectively use the previous as the arguments for the call to the logger.error function.
write output to self.stdout stream.
import module time.
if kwarg_format is true,
call the method tz_name.encode with the arguments 'ascii' and 'ignore', call the method decode on the result with 'ascii' as argument, in the resulting string replace all occurrences of ' ' with '_' and append it to the end of cache_key.
if not,
_fields_ is a list containing 2 tuples: first tuple contains: string '_offset' and _OFFSET, second contains: string 'Pointer' and PVOID.
try,
_supported is an instance of OrderedDict class, created with an argument settings.LANGUAGES.
raise an CommandError with an argument string "Cache table '%s' could not be created.\nThe error was: %s.", replace '%s' with: tablename and return value of the function force_text called with an argument e, respectively.
derive the class NowNode from Node base class.
if match is true,
replace every occurrence of '\r' in s with '\\r'.
if domain equals a string 'djangojs' and file_ext is contained in command.extensions,
call the function urlquote with 2 arguments value and unpacked dictionary kwargs, return the result.
convert to k and v to strings for every k and v in return value of the response.item method, response_headers is a list containing all the above iteration elements.
substitute messages for self.error_messages.
try,
self.stdout is an instance of OutputWrapper class created with an argument: value under the 'stdout' key of the options dictionary, if the key doesnt exists use sys.stdout as an argument.
get_language is a lambda function returning settings.LANGUAGE_CODE.
set attr.name attribute of the Module_six_moves_urllib_request object to attr.
try,
if value is contained in self.empty_values,
if settings.USE_L10N is true and value is an instance of six.string_types,
compare is a lambda function with arguments self, a and b, return value is boolean true if a is lesser than b, otherwise is false.
join together callback.__module__, character "." and callback.__name__, substitute the result for lookup_str.
increment objects_in_fixture by one.
if whitelist is not None
raise an exception NotImplementedError with string 'subclasses of BaseCache must provide a clear() method' as argument.
help is a tuple containing a string "Runs the command-line client for specified database, or the default database if none is provided.".
call the method fp.write with an argument content.
substitute hashlib.sha256 for digest.
call the self.to_python method with an argument value, strip the result of the whitespaces from the sides, substitute the result for value.
ba_serializer is a instance of BadSerializer class, created with an argument exc.
call the method __init__ form the base class of the Command class.
attrs is a dictionary with model for 'model'.
return name and tuple containing 2 elements value and params.
define the method O with an argument self.
if propagate is not None,
if fk is not an instance of ForeignKey class, or fk.rel.to is not equal to parent_model, and fk.rel.to is not contained in result of the call to the method parent_model._meta.get_parent_list.
if elt is an instance of Group class,
return the value under the self.data.month key of the MONTHS_ALT dictionary.
define the method reload with an argument self.
define the method get_unique_error_message with 2 arguments: self and unique_check.
if _active has an attribute "value",
if basetype equals a string 'text',
raise an ValidationError with 2 arguments: return value of the function ungettext with 3 arguments: strings "Please submit %d or fewer forms.", "Please submit %d or fewer forms." and self.max_num, where '%d' is replaced with self.max_num, and code as a string 'too_many_forms'.
get the 'silent_variable_failure' attribute of e object, if it exists and is true,
try,
define the method __init__ with 2 arguments: self and obj.
statements is an empty list.
decorator cached_property,
call the method _illegal_formatting.search with an argument fmt, substitute the result for illegal_formatting.
def initialization method __init__ with self class instance, stream, limit and buf_size set to integer value of the product 64*1024*1024.
return no.
if directory is not an directory,
_encoding is None.
call the function reraise from the module six, with list of arguments exec_info.
call the function warnings.warn with 3 arguments: string "The django.forms.util module has been renamed. " "Use django.forms.utils instead.", RemovedInDjango19Warning and stacklevel set to an integer 2.
define the method loads with arguments self and data.
update declared_fields dictionary with entry base.declared_fields.
define the method reload with an argument self.
return the absolute path of file path filepath, substitute it for filepath.
substitute encoding for self.encoding.
if kwarg_format is false,
try,
if Exception exception is caught,
from django.utils import six into default name space.
increment self.position by length of output.
return result.
return retval.
call the method sys.stderr.close.
call the self.convert method with s, self.decimal, self.decimal_digits and self.sign as arguments, assign the result to the neg and value, respectively.
define the method items with an argument self.
if processors is None,
params is a dictionary with 2 initial entries: self.limit_value for 'limit_value' and cleaned for 'show_value'.
define the method compile_string with 2 arguments: template_string and origin.
substitute empty_permitted for self.empty_permitted.
get the value under the 'empty' key of the options dictionary, if the key exists substitute it for self.empty, if not, self.empty is boolean False.
define the function localize_input with 2 arguments value and default set to None.
define the function remove_move with an argument name.
call the method text.find with 2 arguments: substr and i, substitute the result for j.
cursor is None.
call the method self.tzname with an argument dt, substitute the result for self._tzname.
if exception of class Exception, as e, is caught, call the self.stderr.write method with string "
try,
call the method self.can_write.acquire.
substitute None for self.style_func.
substitute cls.__text_cast for cls.__str__.
EMPTY_VALUES is a tuple containing 5 initial elements: None, empty string, empty list, empty tuple and an empty dictionary.
from django.utils.encoding import force_text into default name space.
DEBUG is integer 10.
call the function force_bytes with an argument password, substitute the result for password.
substitute OPERATORS dictionary element under token key for op.
do nothing.
if not,
define the function truncatewords_html with 2 arguments value and arg.
 No custom SQL for %s.%s model\n" as argument, with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.
derive the class DefaultCacheProxy from the base class object.
break the loop execution.
if self.selected_fields is None or field.attname is contained in self.selected_fields
try,
if StandardError, renamed to e, exception is caught,
for p in self.ignore_patterns if p ends with dir_suffix take sliced list p from the start, to the negative length of the dir_suffix as the end index and append it to a list, if p doesnt end with dir_suffix, append p to a list, substitute resulting list for norm_patterns.
value is an instance of ConvertingDict class, created with an argument value.
call the function POINTER with argument OVERLAPPED, substitute the result for LPOVERLAPPED.
remove element from kwargs dictionary under the key 'pk_field', substitute it for self.pk_field if it exists, if not self.pk_field is boolean False.
from __future__ import unicode_literals into default name space.
if old_field_name is true,
call the method self.main_help_text, append new line to it, write it to sys.stdout.
I18N_MODIFIED is integer 2
find the last index of newline occurrence in self.__starttag_text, subtract it from total length of self.__starttag_text, substitute the result for offset.
join headers into a string, separated by string '\r\n'.
default_validators is an list containing validators.validate_ipv4_address.
define the method __init__ with an argument self.
try,
cache is an empty dictionary.
define validate_name with 3 arguments: self, name and app_or_project.
call the method os.path.abspath with an argument dirpath, join the result and dirname into a file path, inset it at the beggining of self.locale_paths.
if settings.USE_L10N is true, substitute settings.USE_THOUSAND_SEPARATOR for use_grouping, otherwise substitute settings.USE_L10N for use_grouping.
return duplicate
if trim is true,
if Exception, renamed to e, exception is caught,
size is a property object with _get_size as getter method and _set_size as setter method.
define the method incr with self, key, delta defaulting to integer 1 and version defaulting to None as arguments.
substitute value for self.value.
if lang_code is not None,
define the method get with 5 arguments, self class instance, key, default set to None and version set to None.
otherwise if value under the 'app_label' key of options dictionary is true,
call the method self.nodelist.render with an argument context, substitute the result for result.
LUHN_ODD_LOOKUP is a tuple with 10 elements: integers 0, 2, 4, 6, 8, 1, 3, 5, 7 and 9.
if field_type equals a string 'BooleanField(',
append val to self.vals.
define the method __getitem__ with 2 arguments: self and key.
substitute old_attr for self.attr.
value under the TOTAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class, created with an argument widget set to HiddenInput.
return default.
return host.
define the method get_queryset with an argument self.
if InvalidTemplateLibrary, renamed to e, exception is caught,
if incremental is true,
return an instance of IfNode class, created with an argument conditions_nodelists.
if offset is lesser than integer 0, sign is set to '-', otherwise sign is '+',
sum sign and hhmm, substitute the result for name.
derive class WindowsError from Exception base class.
try,
call the method get_supported_language_variant.cache_clear.
ORDERING_FIELD_NAME is a string 'ORDER'.
self.cookies is an instance of SimpleCookie class created with self.cookies as an argument.
default_list is an empty list.
define the function validate_ipv46_address with an argument value.
from django.utils.functional import lazy into default name space.
define the method to_python with arguments self and value.
if length of bits is not equal to integer 2,
from datetime import timedelta and tzinfo into default name space.
call the method self.create_token with 3 arguments: self.template_string list elements from upto index to start index, tuple with 2 elements: upto and start and boolean False, append the result to result.
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'fixture', nargs set to '+', and help set to 'Fixture labels.'.
append the request to the end of the protected class member response._closable_objects.
decorator stringfilter,
try,
append command.xgettext_options to list containing 15 elements: string 'xgettext', string '-d', domain, string '--language=Python', string '--keyword=gettext_noop', string '--keyword=gettext_lazy', string '--keyword=ngettext_lazy:1,2', string '--keyword=ugettext_noop', string '--keyword=ugettext_lazy', string '--keyword=ungettext_lazy:1,2', string '--keyword=pgettext:1c,2', string '--keyword=npgettext:1c,2,3', string '--keyword=pgettext_lazy:1c,2', string '--keyword=npgettext_lazy:1c,2,3' and string '--output=-', substitute the result for args.
shells is a list containing 2 elements: string 'ipython' and string 'bpython'.
call the method apps.get_app_configs, for app_config in the result,
define the function lazy with 2 arguments: func and unpacked list resultclasses.
decorator stringfilter,
define the function _load_serializers.
call the function formset_factory with 10 arguments: form, formset, extra as extra, min_num as min_num, max_num as max_num, can_order as can_order, can_delete as can_delete, validate_min as validate_min, validate_max as validate_max, substitute the result for form.
for every middleware_method in self._exception_middleware,
self._is_rendered is boolean True.
if cookie is an empty string,
define the function templatize with 2 arguments: src and origin set to None.
define the function do_ntranslate with 4 arguments: singular, plural, number and translation_function.
call the function modelformset_factory with 2 arguments: model and unpacked dictionary kwargs, substitute the result for FormSet.
requires_system_checks is boolean False.
if not,
define the method __iter__ with an argument self.
return nothing.
skip this loop iteration,
if new_value equals value,
derive the class Command from the AppCommand base class.
if exp is not None and exp is lesser than return value of the function time.time,
message is a string 'use only numbers, letters and underscores'.
define the function get_language_from_path with an argument request.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument, string 'The inline foreign key did not match the parent instance primary key.' for 'invalid_choice'.
write a newline character into self.stream file stream.
define the method render with 2 arguments: self and context.
call the function allow_lazy with 2 arguments: strip_entities, six.text_type, substitute the result for strip_entities.
from django.utils.timezone import is_aware into default name space.
if data is bound to the same object as FILE_INPUT_CONTRADICTION,
derive the class ModelFormOptions from object base class.
if flags is not None,
derive the class TimeFormat from the base class Formatter.
from django.conf import settings into default name space.
for every x in self.fields call the method x.__deepcopy__ with an argument memo, put the result into a tuple, substitute it for result.fields.
from django.forms.widgets import Media,  MediaDefiningClass,  TextInput and Textarea into default name space.
call the method loader.graph.forwards_plan with argument a tuple, with 2 elements: app_label and migration_name, substitute the result for migration.ancestry.
return qs.
from django.core import mail into default name space.
return None.
get the attribute 'Media' of the cls object, if it exists substitute it for definition, if not definition is None.
define the method n with an argument self.
call the method new_context._reset_dicts values.
call the function six.reraise with 3 arguments: ValueError, instance of a class ValueError, created with an argument string, "%r is not a valid date" formated with date and third element of the result of the function sys.exc_info.
if commit is true,
define the method __nonzero__ with an argument self.
substitute bp for lbp.
for every arg in self.args call the method arg.resolve with an argument context, substitute the results in a list for args.
substitute match.lastgroup for name.
substitute index for end.
call method __init__ from the base class of the class MemcachedCache with arguments: server, params, library set to memcache and value_not_found_exception set to ValueError.
call the function io.open with orig_file and encoding set to settings.FILE_CHARSET, with the result renamed to fp, perform the following:
_localtime is an instance of LocalTimezone class.
if status is not equal to STATUS_OK,
if m is true,
define the method run_from_argv with arguments self and argv.
define the method getvalue with an argument self.
call the method os.path.splitext with an argument self.file, assign the result to _ and file_ext.
return boolean False.
substitute connection.queries for value under the 'debug' key of the context_extras dictionary.
define the method as_data with an argument self.
derive the class IfEqualNode from Node base class.
otherwise if disable_existing is true,
call the method self.attrs.copy, substitute the result for obj.attrs.
substitute last for value under the PREV key of the link dictionary.
substitute sign for self.sign.
for every slots_var in slots,
if self.scheme equals to string 'https', return boolean True, otherwise return boolean False.
if self._populated is false,
substitute empty_label for self.empty_label.
import module os.
answer is None.
call the method self._delete with argument k.
define the method nodelist with an argument self.
call the serializer function, call the loads method on the return value with an argument data, return the result.
import module django.core.checks.compatibility.django_1_6_0.
if not,
return a list with an element tuple with 2 elements: an empty string and an empty list.
define method add_arguments with self class instance and parser as arguments.
for every f in fields,
define the method reset with an argument self.
register.tag decorator,
call the method self._update_unget_history with length of bytes as an argument.
return an empty string,
call the method calendar.isleap with an argument self.data.year, return the result.
property decorator,
call the method __new__ from the base class of the class DeclarativeFieldsMetaclass, with 4 arguments: mcs, name, bases and attrs.
help is a string "Runs over the entire source tree of the current directory and " "pulls out all strings marked for translation. It creates (or updates) a message " "file in the conf/locale (in the django tree) or locale (for projects and " "applications) directory.\n\nYou must run this command with one of either the " "--locale, --exclude or --all options.".
call the method parser.add_argument with 5 arguments: string '--no-wrap', action as a string 'store_true', dest as a string 'no_wrap', default as boolean False and help as a string "Don't break long message lines into several lines.".
self._validate_unique is boolean False.
substitute value under the f.name key of the help_texts dictionary for value under the 'help_text' key of kwargs dictionary.
define the method has_key with self class instance, key and version defaulting to None as arguments.
if AttributeError exception is caught,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
get "_decorated_function" attribute from func, return func if the attribute doesnt exists, use its __name__ field as a key to get the value from self.tags, assign func to it.
return code.
if pattern equals '*' or pattern starts with '.' or pattern equals host, and only if: host ends with '.' and host ends with pattern or host is equal to all but first elements of pattern, substitute boolean true for match, otherwise substitute boolean False for match.
compile a regex from raw string '^\[\s*(\w+)\s*\]\s*', substitute it for INDEX_PATTERN.
if pofile path exists,
call the method keyword.iskeyword with an argument new_name, if it evaluates to true,
return self.data.year.
from django.core.management.base import BaseCommand into default name space.
if six.PY3 is true,
call the sign method from the base class of the TimestampSigner class with an argument value, return the result
try,
if not,
if arg is None,
use global variable _default.
derive the class TimeField from the base class BaseTemporalField class.
element of data at the index last equals to carriage return bytes character.
call the __init__ method of the base class of the class ChoiceField, called with 7 arguments: required set to required, widget set to widget, label set to label, initial set to initial, help_text set to help_text, unpacked list args, and unpacked dictionary kwargs.
VARIABLE_TAG_END is a string '}}'.
append work_file to string '#: ', substitute it for old.
call the self._load_post_and_files method.
while rbp is smaller than self.current_token.lbp,
import module sys.
define the method _get_page_range with an argument self.
substitute fifth element of row for value under the 'max_digits' key of the field_params.
return value converted into a list.
skip this loop iteration.
define the method setdefault with 3 arguments: self, key and default set to None.
define the method check_migrations with an argument self.
from django.utils.daemonize import become_daemon into default name space.
raise an CommandError exception with an argument string "%r conflicts with the name of an existing Python module and cannot be used " "as an app name. Please try another name.", where '%r' is replaced with app_name.
import module hashlib.
if ValueError exception is caught,
convert self.literal into an integer, substitute it for self.literal.
call the function inline_re.match with an argument t.contents, substitute the result for imatch.
truncate the last element of filename.
define the function iteritems with 2 arguments: d and unpacked dictionary  kw.
call the method re_escaped.sub with 2 arguments: raw string '\1' and piece, append the result to pieces.
if mw_instance has an attribute named 'process_response'.
return default,
if err_log is true,
call the method handler.addQuickElement with 2 arguments: string 'comments' and value under the 'comments' key of the item dictionary.
call the method self.template_cache.clear.
call the method match.group with an argument integer 1, substitute the result for text.
derive the class JsLexer from the Lexer base class.
raise an self.error with 2 arguments: None and string "Unclosed tags: %s ", where '%s' is replaced with parse_until elements joined into a string, separated with ', '.
if index_sql is not empty,
define the method __init__ with 4 arguments: self, message, code set to None and params set to None.
if num_loopvars is greater than integer 1, unpack is an boolean True, otherwise is an boolean False.
derive the class SerializationError from the Exception base class.
substitute nodelist for self.nodelist.
if ValueError exception is caught,
get the value under the 'database' key of the options dictionary, if it doesnt exists use the DEFAULT_DB_ALIAS to address an element from the connections list, substitute it for connection.
convert to an integer value under the 'COMP_CWORD' key of the os.environ dictionary, substitute it for cword.
_win is a tuple containing 1 initial boolean: True is sys.platform equals to string "win32", False otherwise.
activate is a lambda function which returns None for any argument x.
call the method other.__cast, substitute the result for other.
boundarystream is an instance of InterBoundaryIter class, created with self._stream and self._separator as arguments.
try,
if length of key is greater than MEMCACHE_MAX_KEY_LENGTH,
substitute used_name for guessed_filename.
from __future__ import unicode_literals into default name space.
if default_list is None,
if self has an 'requires_system_checks' attribute, has_new_option is boolean True, otherwise it is boolean False.
from django.db.migrations.writer import MigrationWriter into default name space.
call the method os.dup2 with 2 arguments: result of the method se.fileno and result of the method sys.stderr.fileno.
call the method __init__ with an argument name form the base class of the class _LazyModule.
call the method tpl.format with an arguments self.name, self.sysid and self.pubid.
substitute the value under the 'SERVER_NAME' key of the self.META dictionary, substitute it for host.
import dummy_threading as threading.
try,
define the method __init__ with 2 arguments: self and callback.
if NoReverseMatch exception is caught,
increment visible_issue_count for length of issues.
if ImportError exception is caught,
raise an exception CommandError, with argument string "%r conflicts with the name of an existing Python module and cannot be used as a project name. Please try another name.", where '%r' is replaced with project_name.
call the function flatten_result with an argument item, assign the result to res and args, respectively.
substitute cache_info for wrapper.cache_info.
filter all the subcommands element through the lambda function with an argument x, that evaluates the method x.startswith, with an argument curr, sort the result and join it in a list separated with blank spaces, print it to the standard output.
define the function _check_middleware_classes with app_config set to None and kwargs dictionary as arguments.
split path in two parts by '\\' string, return the result.
if not,
define the method unclosed_block_tag with 2 arguments: self and parse_until.
append tuple with 2 elements: command and token.source, append the result to self.command_stack.
call the method boundary.encode with an argument string 'ascii', substitute the result for boundary.
derive the class ConvertingDict from dict base class.
substitute logging.NOTSET for logger.level.
substitute self.__class__.__doc__ for self.__doc__.
call the method text.encode with argument utf8_charset.output_charset, substitute the result for payload.
define the method file_complete with arguments self and file_size.
do nothing.
call the method value.date, return the result.
do nothing.
call the color_style method, substitute the result for self.style.
derive the class LoadNode from Node base class.
substitute language for self.language.
define the method open with arguments self, name and mode defaulting to string 'rb'.
import module os.
raise an NoReverseMatch exception with an argument string "%s is not a registered namespace inside '%s'", respectively replace '%s' with key and elements of the resolved_path joined into a string, separated by ':'.
if name is None,
return context_extras.
return an instance of OrderedDict class, created with an argument fields.
if level is true,
new_result is an empty list.
call the function pformat with an argument sys.modules, append the result for output.
define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
divide since by seconds, store the floored result in count.
call the method operator.methodcaller with 3 arguments: string 'to_bytes', integer 1 and string 'big', substitute the result for int2byte.
increment start by length of toktext.
if _urlconfs has an attribute 'value',
if not,
call the method self.data.isocalendar, return the first element of the result.
call the method self.execute, with 2 arguments: unpacked list args and unpacked dictionary cmd_options.
call the method extend_nodelist with 3 arguments: nodelist, node and token, from the base class of the class DebugParser.
call the function timedelta with an argument minutes set to offset, substitute the result for self.__offset.
substitute form.cleaned_data for cleaned_data.
define the method content with 2 arguments: self and value.
substitute out for self._out.
substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary.
skip this loop iteration.
return default.
define the method build_attrs with 3 arguments: self, extra_attrs set to None and unpacked dictionary kwargs.
set use_workaround to boolean True if current_version tuple elements are smaller than the tuple (2,7,3), respectively, or if current_version is greater than (3,0), but smaller than (3,2,3), otherwise set use_workaround to boolean False.
define the method prepare_value with arguments: self and value.
do nothing.
define the method __str__ with an argument self.
define the method __getitem__ with arguments self and index.
if use_func is true,
call the method struct.pack with 2 arguments: bytes string '>I' and i, append the result to salt, substitute the result or u.
return self._fname.
errors is an empty list.
for every val in value,
call the methof match.group with an argument "filter_name", substitute the result for filter_name.
if 'incomplete' key of the f.error_messages doesnt exists, assign it the value under the 'incomplete' key of the self.error_messages dictionary.
try,
if TypeError exception is caught,
try,
define the function unlock with argument f.
define the method __enter__ with argument self.
close file_ file descriptor.
define the function _helper with 2 arguments list and tabs set to integer 1.
call the method datetime.utcnow, on the result call the method replace with an argument tzinfo set to utc, return the result.
define the function reraise with 3 arguments: tp, value and tb set to None.
return boolean True if tag is contained in self.tags_available method return value, return False otherwise.
if not,
define the function http_date with an argument epoch_seconds set to None.
if consume_next is true,
call the function force_text with an argument template_string.
questioner is an instance of a InteractiveMigrationQuestioner class.
from django.utils.encoding import force_text into default name space.
from django.utils import six into default name space.
get the value under the 'database' key of options dictionary, use it as a index to get connections list element, store it in connection.
return a tuple with 2 elements: resource and string 'egg:%s:%s', where '%s' is replaced with app_config.name and pkg_name, respective.
raise CommandError with an argument string "Unable to serialize database: %s", where '%s' is replaced with e.
self.content_type is None.
value is boolean False.
decrement nesting by one.
if string 'version' is not contained in config,
define the method get with 3 arguments: self, key and default set to None.
substitute FILE for TYPE.
if domain is not None,
derive the class TemplateTagNode from Node base class.
endless loop,
append boundary to bytes string '--', substitute the result for self._separator.
define the __init__ method with 3 arguments: self, unpacked list args and unpacked dictionary **kwargs.
convert fourth element of row to an integer, substitute it for value under the 'max_digits' key of the field_params.
call the function trim_url with an argument middle, substitute the result for trimmed.
define __enter__ method with self as the argument.
call the function logging_config_func with an argument DEFAULT_LOGGING.
return an empty dictionary.
substitute error.error_dict for error.
if attrs is not None,
substitute node.source for e.django_template_source.
loaded_objects_in_fixture is integer 0.
derive DatabaseCache from the BaseDatabaseCache base class.
do nothing.
if the union of the kwargs and defaults dictionary keys converted into sets is not the same as the union of the defaults and prefix dictionary keys converted into sets,
if self.is_bound is true,
if self._done is true,
slice the rawdata from k to endpos, then take the first 20 elements of the previous slice, with it replace %r in the string "junk characters in start tag: %r", call the method self.error with the resulting string as an argument.
try,
call the self.compare method with arguments cleaned and self.limit_value, if it evaluates to true,
substitute TemplateSyntaxError for error_class.
raise an TemplateSyntaxError exception with an argument string "'regroup' tag takes five arguments".
define the function capfirst with an argument value.
call the method self.non_field_errors, substitute the result for top_errors.
if self equals to other return boolean False, otherwise return boolean True.
substitute first end elements of s for f.
call the function force_bytes with an argument key_salt, substitute the result for key_salt.
if return value of the method UserModel._default_manager.exists is false and value under the 'interactive' key of the options dictionary is true,
try,
add self.default_validators and validators, substitute the result for self.validators.
call the function warnings.warn with 2 arguments: string "django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. " "Use django.utils.timezone.get_default_timezone instead." and RemovedInDjango19Warning.
sum sign, int_part and dec_part, return the result.
if message is not an instance of the ValidationError class,
call the method self.set with key, value, timeout and version as arguments.
decorator function register.filter with an argument is_safe set to boolean True.
self.compression_formats is an dictionary with 3 initial entries: tuple containing 2 elements: open and string 'rb' for None, tuple with 2 arguments: gzip.GzipFile and string 'rb' for 'gz', tuple with 2 arguments: SingleZipReader and string 'r' for 'gzip'.
if app_dir is a directory,
substitute stream for self._stream.
if end is not None,
define the function fdel with 2 arguments: instance and name set to fdel.__name__.
if bit starts with '_("' ot bit starts with "_('",
raise an ValueError with an argument string "'%s.%s' has more than one ForeignKey to '%s.%s'.", where '%s' is replaced with, model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively.
call the function import_string with an argument path, substitute the result for func.
call the method token.split_contents, substitute results without the first element for bits.
if self.max_digits is not None and digits is grater than self.max_digits,
if ImproperlyConfigured exception is caught,
substitute pattern.regex.pattern for p_pattern.
substitute '%s' in a string "Migrations for '%s':" with app_label, append newline to it, use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.
try,
call the function t.render with an argument context_instance, return the result.
subtract timestamp from the return value of the function time.time, substitute the result for age.
define the method path with arguments self and name.
define the function bytes_to_text with 2 arguments s and encoding.
subtract result of the method self.initial_form_count from i, use the result as an index to get the element from self.initial_extra, substitute it for value under the 'initial' key of kwargs dictionary.
add elements from new_modules set to _cached_modules set.
define the method __exit__ with arguments: self, exc_type, exc_value and traceback.
do nothing.
join self.dirpath and self.file into a file path, return it.
if PY3 is true,
if exclude is true and f.name is contained in exclude,
if ch equals string '+',
cut the last 6 elemetns from r, append character 'Z' to it, substitute the result for r.
substitute name for self.name.
if cword equlals a integer 1,
if parse_until is None,
substitute form for self.form.
define the method inner_run with 3 arguments: self, unpacked list args and unpacked dictionary options.
return default.
if length of empty_label is not equal to integer 3.
if self.verbosity is greater or equal than integer 1 and sql is true, call the self.stdout.write method with string "
define the method value_from_datadict with 4 arguments: self, data, files and name.
return response.
if value under the 'debug' key of options dictionary is not None, substitute it for value under the 'debug' key of wsgi_opts dictionary.
if initial is None,
if children is true, copy children list to self.children, otherwise self.children is an empty list.
otherwise if self.file_path file path doesnt exists,
return template.
if self.verbosity is greater or equal to integer 2.
format_key is a string 'DATE_INPUT_FORMATS'.
call the function escape with an argument output.
decorator stringfilter,
call the function get_template with 2 arguments template_name and dirs, return the result.
call the method netloc.encode with an argument string 'idna', call the method decode on the result with an argument 'ascii', substitute the result for netloc.
if the result to the method call response.has_header, with string 'Cache-Control' as an argument is boolean False,
define the method _clean_form with an argument self.
call the function get_urlconf with an argument urlconf.
pop the first element from plist, convert it to lowercase, call the method decode on it, with string 'ascii' as an argument, substitute the result for key.
define the method set_signed_cookie with 5 arguments: self, key, value, salt as an empty string and unpacked dictionary kwarg.
if var is false or whitespaces are contained in var,
derive class Command from CheckCommand base class.
substitute has_key for __contains__.
self.upload_handlers is an instance of ImmutableList, created with 2 arguments: self.upload_handlers, and warning as a string "You cannot alter upload handlers after the upload has been processed.".
msg_count is integer 0.
latest_date is None.
call the method kwarg_re.match with an argument first element of bits, substitute the result for match.
substitute class_name for self.class_name.
call the method connection.introspection.get_relations with 2 arguments cursor, table_name and substitute the result for indexes.
pos is equal to integer 0.
append tuple containing two entries: app_config.label and integer 0 to options, for every app_config in app_configs.
import module io.
try,
return string 'th'.
substitute reason for self.reason_phrase.
for every tag in open_tags,
from django.utils.timezone import get_default_timezone, is_aware and is_naive into default name space.
if self.can_delete is true,
return obj.
substitute value for value under the self.variable_name key of the context dictionary.
call the method self._populate.
return value.
define the method __iter__ with an argument self.
call the method clear from the base class of the class QueryDict, return the result.
format key is an empty string.
remove the first element from str_number.
counters is a list containing length of handlers number of zeros.
try,
call the sys.stderr.write function with an argument msg.
call the self._lock.reader method, with the result perform the following,
get 'error_messages' attribute from the options object, if it exists substitute it for self.error_messages, if not self.error_messages is None.
if KeyError exception is caught,
if not,
raise an exception parser.error_class with an argument string "Not expecting '%s' in this position in if tag.", where '%s' is replaced with self.id.
derive class Command from the BaseCommand base class.
if NameError exception is caught,
import module sys.
evaluate function Lock() assign the result to initLock.
locale_dirs is a list of elements from the list of path names that maths the basedir path with '/*' wild card characters for which call to the os.path.isdir returned true, assign it to locale_dirs.
return self._post.
return an empty list.
if self.message_context is true,
get the value under the state key of the regexes dictionary, call the method finditer on the result with 2 arguments: text and start, for every match in the result,
from django.utils import six into default name space.
return self.limit_choices_to.
while rest is true,
if is_compressed is true,
raise an ValidationError with 2 arguments: value under the 'invalid_time' key of the self.error_messages dictionary and code set to string 'invalid_time'.
from django.utils import translation into default namespace.
if GeneratorExit exception is caught,
return an instance of a ResolverMatch class, crated with arguments self.callback, args, kwargs and self.name.
return _localtime.
call the method writer.as_string, write the result to fh file.
raise an CommandError exception with an argument message.
if e.errno is not equal to errno.EEXIST,
return an empty string.
return all the integers from the integer 1 to the self.num_pages.
define the function ifchanged with 2 arguments: parser and token.
call the method token.split_contents, substitute the result for bits.
if value is true,
call the function all_locale_paths, for every path is the result,
define the method write with 2 arguments: self and val.
define the method add_fields with 2 arguments: self, form and index.
try,
import module zlib.
try,
return obj.
call to the resolver.resolve method with request.path_info as an argument.
option is a string '--testrunner='.
if decimal_separator is contained in value,
if dictionary is false,
if self.asvar is None,
if custom_sql is empty,
if i is greater than length of subject,
try,
from django.core.files import uploadhandler into default name space.
derive the class DjangoTranslation from gettext_module.GNUTranslations base class.
if KeyError, IndexError and AttributeError exception is caught,
call the method self_cache.delete_multi with argument list containing keys mapped through function l.
derive the class CacheHandler from the object base class.
derive the class BoundField from the base class object.
define the method get_parent with 2 arguments self and context.
if not,
while remaining_bits is true,
substitute pubid for self.pubid.
if self.verbosity is greater than integer 0,
substitute mtime for the value under the filename key of _mtimes dictionary.
if identity lambda function returns false, substitute the x for capfirst, if not call the function force_text with an argument x, convert the first element of the result to uppercase, append to it the rest of the result, substitute it for capfirst.
get the value under the 'HTTP_X_FORWARDED_HOST' key of the self.META dictionary, substitute the result for host.
return nothing.
return s.
derive class _MovedItems from the _LazyModule base class.
if fields is true and f.name is not contained in fields,
substitute asvar for self.asvar.
LOCK_EX is a hexadecimal 2.
define the method add with 2 arguments: self and item.
return filenames.
from threading import local into default name space.
if pathext is None,
append command.xgettext_options to the list containing 10 elements: string 'xgettext', string '-d', domain, string '--language=C', string '--keyword=gettext_noop', string '--keyword=gettext_lazy', string '--keyword=ngettext_lazy:1,2', string '--keyword=pgettext:1c,2', string '--keyword=npgettext:1c,2,3' and string '--output=-', substitute it for args.
substitute value under the f.name key of the labels dictionary for value under the 'label' key of kwargs dictionary.
call the function ugettext with an argument string "Please correct the duplicate data for %(field)s.", where '%(field)s' is replaced with first element of unique_check, return the result.
call the method value.astimezone with an argument timezone, substitute the result for value.
define the method __init__ with 3 arguments: self, offset set to None, name set to None.
import module collections.
from django.utils.translation import ugettext_lazy as _ and pgettext_lazy into default name space.
call the function allow_lazy with 2 arguments: urlunquote and six.text_type, substitute the result for urlunquote.
return result.
do nothing.
call the function token_kwargs with 3 arguments: remaining_bits, parser, support_legacy set to boolean False, substitute the result for value.
define the method __cast with an argument self.
remove config dictionary element under '()' key, substitute it for c.
register.tag decorator,
substitute exc for self.settings_exception,
create a list out of open_tags elements form (i+1)-th index to the end, substitute it for open_tags.
if decompress is true,
otherwise if first element of cwords is contanied in subcommands and is not equal to string 'help',
return field_dict.
if now equals to boolean True and now is not an instance of datetime.datetime,
convert deader to lowercase, if it is contained in self._headers return boolean True, if not, return boolean False.
append last_row to output.
from django.utils.functional import curry and Promise into default name space.
round up radio, convert it to an integer and the convert it to a string and substitute the result for result.
call the function get_resolver.cache_clear.
if self.cmd._called_from_command_line is true,
indent contain tabs number of tab character.
define function force_bytes with s, encoding set to 'utf-8', strings_only set to False and errors set to 'strict' as arguments.
match rest string with self.WORD_PATTERN regex, substitute the result for m.
do nothing,
if errors is true,
return boolean True.
ret_ip is an empty list.
if field_desc doesnt end with '(',
remove config dictionary entry under 'format' key, substitute it for value under 'fmt' key of config dictionary.
join app_config.path and string 'management' into a file path, substitute it for path.
call the self._lock.writer method, with the result perform the following,
while the result of the method new_name.find, called with an argument string '__' is greater or equals integer 0,
call the function check_errors with argument main_func, substitute the result for wrapped_main_func.
call the method __new__ with an argument cls from the base class of the klass function.
year_days is a list with 13 elements: None, integer 0, integer 31, integer 59, integer 90, integer 120, integer 151, integer 181, integer 212, integer 243, integer 273, integer 304 and integer 334.
join elements of output into a string with newline as separator, use it as an argument for the call to the function mark_safe, return it.
return new_class.
return r.
return unbound.im_func.
return templatetags_modules.
if not,
if '.' is not contained in var and 'e' is not contained in var converted into lowercase,
if NotImplementedError exception is caught,
call the method self._cache.get_multi with argument new_keys, substitute the result for ret.
increment stats dictionary value under the HITS key by integer 1.
if not,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
if first element of g equals a string '"',
if not,
prepend an empty string to hextets list.
return None.
return an empty dictionary.
define the method __repr__ with an argument self.
return integer 0.
substitute _itervalues for values.
if locales is true,
substitute timezone for self.timezone.
call the function force_text with an argument text, split by it word_split_re, substitute it for words.
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_serialization() method'.
substitute path_override for path if path_override is not None, otherwise substitute request.path for path
substitute callback for self.callback.
try,
skip this loop iteration.
derive class MovedModule from the _LazyDescr base class.
substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout.
define the method _get_validation_exclusions with an argument self.
define the method D with an argument self.
substitute length of tokens for l.
self._done is boolean False.
call the function os.environ.get with 2 arguments: string 'PATH' and an empty string, split the result at the os.pathsep, substitute the result for path.
call the function wrapped_callback with request, list or arguments callback_args and dictionary arguments callback_kwargs, as the arguments, substitute the result for response.
call the method pyinotify.Notifier with wm and EventHandler() as arguments, assign the result to notifier.
try,
call the function re.compile with an argument raw string '\S', substitute it for dot_re.
join result of the parts function into a bytes string, substitute it for out.
if any exception is caught,
if return value of the self.is_secure method is true and server_port is not equal to string '443', if return value of the self.is_secure is false and server port is not equal to string '80',
define the function linenumbers with 2 arguments value and autoescape set to None.
for ever app_config in return value of the method apps.get_app_configs,
reverse order of elements of self.keyOrder, return the result.
define the method __getitem__ with 2 arguments: self and key.
substitute self.setting for context.autoescape.
call the function pformat with an argument value, return the result.
property decorator.
define the method get_fqdn with argument self.
from django.utils import six into default name space.
substitute '%s' in string "No changes detected in app '%s'" with the result of the method app_labels.pop, write it to self.stdout.
substitute loader, name and dirs for self.loader, self.loadname and self.dirs, respectively.
define the method add_arguments with 2 arguments self and parser.
if source is an instance of Group class,
property decorator,
call the function signals.request_finished.connect with argument close_caches.
if value is an instance of datetime.date class,
if self.initial_forms is false,
if AppRegistryNotReady exception is caught,
import module collections.
if self.flags is true and self.regex is not an instance of a six.string_types type,
call the method app_list.setdefault with 2 arguments app_config and an empty list, substitute the result for app_list_value.
substitute value under the number key of the rhs dictionary for number_value.
define the function do_block with 2 arguments parser and token.
call the self.style.HTTP_SUCCESS with an argument msg, substitute it for msg.
python_2_unicode_compatible decorator,
substitute callable for callable.
define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
define the method __exit__ with 4 arguments: self, exc_type, exc_value and traceback.
max_num is integer 1.
if inplural is true,
call the executor.loader.get_migration_by_prefix with app_label and migration_name, substitute the result for migration.
call the method dig1.update with an argument u.
evaluate debug.technical_500_response with request and list of arguments exec_info, return the result.
define the function dictsort with 2 arguments value and arg.
call the method datetime_safe.new_datetime with an argument date, substitute the result for date.
value under the self key of state_frame dictionary is None.
substitute self.choices for self.widgetchoices.
if eather one of settings.USE_I18N or settings.USE_L10N is True,
if key is not contained in self,
raise an TemplateSyntaxError exception with an argument string "'for' tag received an invalid argument: %s", where '%s' is replaced with token.contents.
if field_value is cotained in self.empty_values,
if initial is None,
call the self.delete method with key and version set to version as arguments.
try,
import module django.core.checks.compatibility.django_1_7_0.
if not,
if schemes is not None,
substitute self.__class__ for response._handler_class.
call the get_complete_version with an argument version, store the result in version.
substitute self.field.widget for widget.
df is an instance of DateFormat class, created with an argument value.
define the function load with 2 arguments: parser and token.
if USE_INOTIFY is true,
for every func in self.response_fixes,
supported is boolean True.
call the function check_for_migrations with an arguments app_config, connection.
return value under key key of dict_ dictionary.
call the re.compile function with 2 arguments: raw string "(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*$", "|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"$)" and re.IGNORECASE, substitute the result for user_regex.
derive the class NodeList form the base class list.
replace '%s' in string "CREATE %sINDEX %s ON %s (%s);" with: unique, return value of the function qn called with an argument: a string '%s_%s', where '%s' is replaced with tablename and f.name, respectively, return value of the function qn called with an argument tablename and return value of the function qn called with an argument f.name.
call the function find_template with 2 arguments: template_name and dirs, substitute the result for template and origin.
call the method self.can_write.release.
for every x in argset,
status_code is an integer 405.
instantiate Header class with localpart and encoding, convert it to a string, substitute the result for localpart.
substitute buf_size for self.buf_size.
call the function supports_color, if evaluates to False,
if not,
define the function get_language_bidi.
try,
delete the value under the key key of self._cache dictionary.
call the method self.queryset.get with an argument, unpacked dictionary with an element: value for key, substitute the result for value.
call the function _ with an argument string 'AM', return the result.
return get_git_changeset.cache.
if IndexError exception is caugh,
import module sta.
from django.utils.translation import ugettext_lazy and pgettext_lazy into default name space.
trans_real._translations is an empty dictionary.
define the function dumps with 5 arguments: obj, key set to None, salt set to string 'django.core.signing',
substitute pattern._callback for callback.
decrement truncate_len by integer 1.
return self.__name.
evaluate the function backend_cls with location and params as arguments, return the result.
call the function smart_urlquote with an argument string 'http://%s' formated with an argument middle, substitute the result for url.
if ',' is not contained in arg,
substitute last element of colors for value under the 'bg' key of definition dictionary.
get the value under value key of a dictionary with 4 entries: '2' for boolean True, '3' for boolean False, '2' for '2', and '3' for '3', substitute it for value.
call the method self._post_clean.
return an instance of SafeText, created with an argument data.
to_delete is an empty set.
del self._post
call the function next_char with an argument iterator pattern, substitute the result for pattern_iter.
call the function with 7 arguments: self, self.instance, self._meta.fields, fail_message, commit, self._meta.exclude, and construct as boolean False, return the result.
call the self.convert method with i, self.decimal_digits, self.digits and '-' as arguments, assign the result to the neg and value, respectively.
join elements of extra_classes into a string separated by whitespaces, return it.
define the method __init__ with 2 arguments: self and iterable set to None.
define the method to_python with arguments self and value.
define lambda function that returns self.file.readline field, use it as an argument for property function, put the result in readline.
call the method self.build_attrs with 2 arguments: attrs and name set to name, substitute the result for final_attrs.
raise an ValidationError with 2 arguments: value under the 'empty' key of the self.error_messages dictionary and code set to 'empty'.
return boolean True.
from django.utils import six into default name space.
remove dirname key from dirs.
return expanded_template.
__slots__ is a string 'hashvalue'.
call the function pickle.dumps with argument value, use the result and integer -1 as arguments for the call to the function zlib.compress, use the result as an argument for the call to the f.write method.
try,
if contents is false, substitute self.label for contents.
for every app_config in return value of the method apps.get_app_configs,
join elements of lines into a string, separated by newline characters, substitute it for msgs.
return j.
substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false, respectively.
fname is a string "%s-%s.log", with '%s' replaced by timestamp and absolute value of the return value of the function id with argument self, respectively.
if not,
for every e in etags call the method e.encode with an argument string 'ascii', call the method decode on the result with an argument, string 'unicode_escape', substitute the list of results for etags.
if self.current_token is not EndToken,
derive the class Signer from the object base class.
if value under the key 'ATOMIC_REQUESTS of db.settings_dic dictionary is True and db.alias is not present in the non_atomic_requests,
if response is True,
define the method _has_changed with arguments self, initial and data.
derive the class Command from the base class AppCommand.
return filter_func.
define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
evaluate the method type(self).__bool__ with argument self, return the result.
define the function get_cache_key, with request key_prefix set to None, method set to 'GET' and cache set to None as arguments.
decorator stringfilter,
call the method self.validate_key with argument key.
if url is true,
none_value is a tuple containing 2 elements: integer 0 and string '---'.
call the method self.xml.startElement with 2 arguments: string 'field' and a dictionary containing 2 entries: field.name for 'name', and return value of the field.get_internal_type method for 'type'.
derive the class FilePathField from the base class ChoiceField class.
call the function force_text with an argument value, substitute the result for value.
if string 'help' is contained in options,
call the function timedelta with an argument seconds set to negative _time.altzone, substitute the result for self.DSTOFFSET.
otherwise if form.has_changed method evaluates to true,
alter_sql is an empty list.
convert byte to its integer representation, return all of the results for every byte in buf.
call the method self.error_class, substitute the result for self._non_form_errors.
define the method resolve_context with 2 arguments: self and context.
define lambda function with self class instance as the argument, lambda function body encapsulates the call to the method, str.__unicode__().encode('utf-8'), call the lambda function and put the result in the __str__ filed of klass.
base is an instance of Media class.
call the function import_module with an argument module_path, substitute the result for module.
define the function create_bound_function with 2 arguments: func and obj.
if sys.platform starts with string 'java',
if field is an instance of InlineForeignKeyField class,
append x converted to an integer to bits.
if not,
if settings.USE_TZ is True,
substitute path for locale_dir.
self.loaded_object_count is integer 0.
if label_suffix is None,
if value under the 'pubdate' key of the item dictionary is not None,
call the method Model._meta.get_all_field_names, substitute the result for model_fields.
substitute text for self.text.
call parse.add_argument method, with string '--database', default set to DEFAULT_DB_ALIAS, and help as a string 'Nominates a database to print the SQL for. Defaults to the "default" database.', as arguments.
join return value of the function six.text_type called with an argument self.management_form and forms into a string, separated by newline, use it as an argument for the call to the function mark_safe, return the result.
substitute connection.ops.quote_name for qn.
call the function allow_lazy with 2 arguments: escape, six.text_type, substitute the result for escape.
try,
if self._num_pages is None,
get the value from the options dictionary under the key 'test_database', or False if the key dont exists, substitute it for self.test_database.
import module sys.
raise an ValueError exception with an argument e.
substitute error.message for message.
call the method self.__cast, if the result equals other, return boolean True, otherwise return boolean False.
call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false', dest as a string 'interactive', default as boolean True help as a string 'Tells Django to NOT prompt the user for input of any kind.'.
call the function transaction.atomic, with using set to db.alias as the argument, return value is a function which is called, with the argument view, store the result in the view.
from django.conf import settings into default name space.
substitute oldroot for value under the key key of the cache dictionary.
if constant is true,
if NameError exception is caught,
while x is greater than zero,
while i is lesser than length of subject and i-th element of subject is not equal to p-th element of subject,
skip this loop iteration,
increment chunk by over_chunk.
return wrapper.
if kwds is true,
from django.utils.translation import ugettext_lazy into default name space.
remove the entry under the 'fields' key of the self.json_kwargs dictionary.
raise a SerializerDoesNotExist exception with an argument format.
if fp is None,
if last_row doesnt ends with row_ender,
if args is true,
call the method apps.get_app_config with an argument app_label, substitute the result for app_config.
if not,
call the method self.nodelist.render with an argument context, substitute the result output.
call the os.path.getsize function with argument self.file.name, return the result.
call the function os.spawnve with os.P_WAIT, sys.executable, args and new_environ as arguments, substitute the result for exit_code.
remove tmpdir directory.
from django.utils import six into default name space.
value under the comment_lineno_cache key of the lineno_comment_map dictionary is an empty string.
if else,
raise an StopIteration exception.
import module sys.
add app_config to excluded_apps set.
from collections import OrderedDict into default name space.
read one line from self file stream, substitute the result for buf.
if bases equals a tuple with an element: class BaseModelForm.
if field.rel.to._default_manager has an atttribute 'get_by_natural_key',
calculate reminder of division of x by length to_digits, substitute it for digit.
call the method token_string.count with an argument '\n', append the result to self.lineno.
return value.
call the self.read method with argument chunk_size, substitute the result for data.
from django.utils.ipv6 import clean_ipv6_address into default name space.
if self.require_all_fields is true,
substitute HTMLParseError from the module _html_parser for HTMLParseError.
_assertRaisesRegex is a strnig "assertRaisesRegexp".
decorator function wraps with 2 arguments: view_func and assigned set to result of the function available_attrs, called with an argument view_func.
remove config dictionary element under 'formatter' key, if it exists substitute it for formatter, if not, formatter is None.
fail_message is a string 'created'.
substitute length of digittuple for digits.
append mw_instance.process_view at the end of self._view_middleware.
yield string 'from %s import models' % self.db_module as the result, where "%s" is replaced with result of the call to the function, table2model with an argument table_name.
append an empty string to dirs list.
try,
if self.verbosity is greater or equal to integer 1,
if not,
derive class _LazyDescr from the object base class.
raise a ValidationError exception with 2 arguments: return value of the function _ with an string argument 'Enter a valid integer.', and code set to string 'invalid'.
if endpos is lesser than zero,
derive class BaseDatabaseCache from BaseCache base class.
if i is equal to len_values decremented by 1, value under the 'last' key of the loop_dict dictionary is boolean True, otherwise it is False.
invert the ordering of elements of int_part_gd, substitute it for int_part.
define the method is_multipart with an argument self.
from django.utils.module_loading import module_has_submodule into default name space.
define the method __init__ with 6 arguments: self, _subtype set to string 'mixed', boundary set to None, _subparts set to None, encoding set to None and unpacked dictionary _params.
if active has an attribute 'value',
substitute '%r' in string 'Cache key contains characters that will cause errors if used with memcached: %r' with key, call the function warnings.warn with previous string and CacheKeyWarning as arguments.
if self.connection is false,
value is None.
get the attribute '__name__' from the getattr, if it exists substitute it for m, if not, m is None.
call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.
call the method apps.get_app_config with an argument app_label.
do nothing.
if value under the 'verbosity' key of the options dictionary is greater than zero,
join app_config.path and string 'templates' into file path, substitute it for template_dir.
return scrip_name.decode method result called with UTF_8 as argument.
if UnicodeDecodeError exception is caught,
if t.token_type is not equal to TOKEN_COMMENT,
return model_list.
from django.core.management.base import BaseCommand and CommandError into default name space.
define the method format_output with 2 arguments: self and rendered_widgets.
compile regex from the raw string '(\d{4})-(\d\d?)-(\d\d?)$', substitute it for RE_DATE.
if not,
substitute arg converted into a integer for length.
define the method handle with 3 arguments: self and unpacked dictionary options.
substitute the '%s' in the string "The view %s.%s didn't return an HttpResponse object. It returned None instead.", with the name of the module callback is in and the view_name, respectively, use it as the argument for the ValueError exception raise.
from email.mime.multipart import MIMEMultipart into default name space.
substitute jython_reloader for reloader.
call the __init__ method of the base class of the class FilePathField, with arguments: choices set to an empty tuple,4 required set to required, widget set to widget, label set to label, initial st to initial, help_text set to help_text, unpacked list args, unpacked dictionary kwargs.
define the method __ne__ with arguments self and other.
define the method app_dict with an argument self.
supports_microseconds is boolean False.
call the function self.compress with empty list as an argument, return the result.
if not,
define the method forms with an argument self.
intrans is boolean False.
call the function is_naive with an argument obj.
define the method create_var with 2 arguments: self and value.
for every c in lineno_comment_map dictionary value under the comment_lineno_cache key,
define the method clear with self class instance as the argument,
substitute sixth element of bits for var_name.
parser._namedCycleNodes is an empty dictionary.
convert app and model._meta.object_name to strings, join them with separating '.' character, substitute it for obj.
substitute stream for self._stream.
try,
define the function make_middleware_decorator with an argument middleware_class.
call the method __init__ from the base class of the Field class.
call the function timedelta with an argument seconds set to negative _time.timezone, substitute the result for self.STDOFFSET.
define the function reset_cache with an argument unpacked dictionary kwargs.
break from the loop execution.
substitute content_type_extra for self.content_type_extra.
if retval is true,
call the method self._init_translation_catalog.
define the method run_checks with self class instance, app_configs defaulting to None, tags defaulting to None as argument.
call the method queryset.filter with an argument pk__in set to primary_keys, substitute the result for queryset.
return first element of t.
import module threading.
yield and empty string as the result.
get _iterkeys attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable, return it.
return an empty string.
call the method executor.loader.get_migration_by_prefix with arguments app_label, migration_name, substitute the result for migration.
for root, dirs and files in sorted list of the directory tree starting from the directory self.path,
call the function force_text with an argument formatstr, use the result as an argument for the call to the method, re_formatchars.split, for every i and piece in enumerated result,
call the method self.__deepcopy__ with an empty dictionary as an argument.
if not,
raise an EnvironmentError exception with string "Cache directory '%s' does not exist and could not be created" as argument, substitute '%s' with self._dir converted to a string.
substitute f.name for field.
call the function os.unlink with an argument work_file.
raise CommandError with an argument string 'Unknown application: %s', where '%s' is replaced with app_label.
define the method to_python with arguments self and value.
append ch to quant.
if not,
derive the class Debug from base class CheckMessage.
call the method self.check with 2 arguments app_configs set to app_configs, display_num_errors set to display_num_errors, return the result.
import module warnings.
from django.core.servers.basehttp import run and get_internal_wsgi_application into default name space.
fetch one record from the database cursor points at, substitute the first element of return value for num.
input_type is a string 'password'.
break from the loop execution.
call the method __init__ from the base class of the class CheckboxChoiceInput, with 2 arguments: unpacked list args, and unpacked dictionary kwargs.
from django.conf import settings into default name space.
call the function escape with an argument word, substitute the result for i-th element of words.
convert language to lowercase and return it.
if offset is an instance of timedelta class,
self._stream is an instance of BytesIO class created with an argument self._body.
substitute value under the NON_FIELD_ERRORS key of opts.error_messages dictionary for error_messages.
call the method connection.creation.sql_indexes_for_model with arguments model and style, extend output with the result.
call the method token.split_contents, substitute the result for bits.
if plan is true,
derive the class CheckboxFieldRenderer from the ChoiceFieldRenderer base class.
return an string '<ExtendsNode: extends %s>', where '%s' is replaced with self.parent_name.token.
assign the string 'reversed' to is_reversed and bits last elements.
call the function update_wrapper with 2 arguments: _wrapper and func.
call the function _resolve_name with 3 arguments: name list elements from the level index to the end, package and level, substitute the result for name.
if value is an instance of str type,
call the method self.xml.startElement with arguments string 'natural' and an empty dictionary.
if parse_until is true,
raise an exception.
if request has an attribute 'session',
import module copy.
call the method self.validate_key with argument key.
define the method run_validators with arguments self and value.
return value, if it is None return arg.
define the decode method with self class instance and s as arguments.
url_schemes is list of strings 'http', 'https' and 'ftp'.
return None.
call the method self.inner_run with 2 arguments: None and unpacked dictionary options.
warn_msg is a string "The translator-targeted comment '%s' (%sline %d) was ignored, because it wasn't the last item on the line.", formated with c, filemsg and comment_lineno_cache.
if name is None,
_empty_value is an empty list.
if 'expects_localtime' attribute of func object exists and is true,
call the function _long_to_bin with 2 arguments: result and hex_format_string, return the result.
define the method process_default with self class instance and event as arguments.
from _systemrestart import SystemRestart into default name space.
if value is boolean False or boolean True or value is None or value is an empty string, do not perform the following,
all_unique_checks is union of all_unique_checks set and unique_checks set.
define the method changed_data with an argument self.
call the method self.get_resolved_arguments with an argument context, substitute the result for resolved_args and resolved_kwargs.
return val.
if VariableDoesNotExist exception is not caught,
call the function lazy with 2 arguments: func and unpacked list resultclasses, call the result with 2 arguments: unpacked list args, and unpacked dictionary kwargs, return the result.
raise an RuntimeError exception with an argument string "The method to extend accepted command-line arguments by the " "test management command has changed in Django 1.8. Please create an add_arguments class method to achieve this."
format value into printable data representation with formating rules arg, return the result.
register.tag decorator,
define the method __init__ with 3 arguments: self, func and name set to None.
execute statement on the database that curs points to.
if app_label is not contained in executor.loader.migrated_apps,
derive the class IfChangedNode from Node base class.
call the self._lock.writer method, with the result perform the following,
decorator classmethod,
call the method self.add_error with 2 arguments name and e.
raise an exception.
method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
kw is a list with 3 elements: d.year, d.month and d.day.
if _time.daylight is true,
call the function re.compile with an argument string "^\s*trans\s+((?:"[^"]*?")|(?:'[^']*?'))(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?\s*", substitute the result for inline_re.
define the __init__ method with arguments: self, text, subtype and charset.
call the method self._callback_strs.add with an argument lookup_str.
define the method _get_to_python with 2 arguments: self and field.
try,
call the method is_multipart on the first element of self.forms, return it.
call the method __init__ from the base class of EmailBackend class, with arguments: unpacked list args and unpacked dictionary kwargs.
call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs, substitute the result for value under the self.target_var key of the context dictionary.
substitute cwords element at the cword decremented by 1 index for curr.
call the method literal_match.group with an integer 1, substitute the result for ip_address.
return an empty string.
call the method logging._releaseLock.
if commit is true and form has an attribute 'save_m2m',
if not,
if ValueError exception is caught,
raise an exception.
decorator deconstructible,
if mimetype is not None raise an error.
define the method render with 2 arguments: self and context.
call the function parse_boundary_stream with 2 arguments: sub_stream and integer 1024, yield the result as the return value of the generator.
define the function mark_for_escaping with an argument s.
return val.
call the method self.configure_filter with an argument value under name key of filters dictionary, substitute the result for filters dictionary value under name key.
raise an NotImplementedError with argument string 'subclasses of FileUploadHandler must provide a file_complete() method'.
if self.verbosity is greater than integer 1,
if not,
call the function timedelta with an argument minutes set to offset, substitute the result for self.__offset.
if ch equal a string '(',
PALETTES is a dictionary containing 3 elements, a dictionary with 18 pairs of dictionary value and string keys for NOCOLOR_PALETTE, a dictionary with 18 pairs of dictionary value and string keys for DARK_PALETTE, and a dictionary with 18 pairs of dictionary value and string keys for LIGHT_PALETTE.
if m is true,
delete attr.
for every middleware_method in self._response_middleware,
skip this loop iteration,
if length of app_labels equals integer 0,
for every middleware_method in self._view_middleware,
if fget is not None,
return attrs.
if self.required is true,
call the method token.split_contents, substitute the result for bits.
define the method add_error with 3 arguments: self, field and errors.
call he function is_valid_ipv6_address with an argument ip_str, if it evaluates to false,
derive the class ErrorDict from the dict base class.
from django.core.management.sql import sql_flush and emit_post_migrate_signal into default name space.
decorator stringfilter,
property decorator,
define the method create_variable_node with 2 arguments: self and contents.
define the method _setup with an argument self.
content_length is integer 0.
get the LANG_INFO dictionary value under the generic_lang_code key, return the result.
define the function split_domain_port with an argument host.
substitute super for _super.
first and second are None.
from decimal import Decimal into default name space.
substitute value for field.name key of self._current dictionary.
call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the GenericIPAddressField class.
values is an dictionary with 2 arguments: boolean False for 'false' and boolean True for 'true'.
substitute choice for choice_value and choice_label, respectively.
from lib2to3.pytree import Leaf and Node into default name space.
call the method password.translate with an argument hmac.trans_5C, update outer dictionary with the result.
substitute i for p.
yield a tuple with 2 elements: an empty string and self.field.empty_label.
return an instance of a URLNode class, created with 4 arguments viewname, args, kwargs and asvar.
derive the class ArchiveException from the Exception base class.
from django.utils.html import escape into default name space.
return an instance of the class Media, called with an unpacked dictionary with an entry: name appended to string '_', attribute of the self object for name converted into a string.
substitute callback.func for callback.
define the method utcoffset with 2 arguments: self and dt.
substitute qs for self._queryset.
return t.
if msg is true,
call the function MovedModule with 2 arguments: strings "_thread" and "thread",
raise an ValueError exception with an argument string 'Unable to add handler %r: %s' formated with h and e.
substitute self.html_initial_name for name.
join statements into a string, separated by newlines, return it.
for every obj in PythonDeserializer called with arguments objects and unpacked dictionary options,
define the function now.
if text ends with truncate,
define the function unlock with argument f.
decrement self.remaining by length of result.
convert value into a string, take character at the negative arg index, convert it into an integer, return it.
replace every occurrence of '\n' in p for '<br />', format the string  '<p>%s</p>' with the result, for every p in paras, substitute list of results for paras.
if ImportError exception is caught,
get the value under the 'name' key of the disposition dictionary, strip it of whitespaces, substitute the result for field_name.
if self.negated,
use global variable _standard_context_processors.
substitute self.var for obj.
derive the class VerbatimNode from Node base class.
yield string 'month' as an return value of the generator.
if self.verbosity is integer 1,
if not,
call the method self.configurator.convert with an argument value, substitute the result for result.
self.use_ipv6 is boolean True.
define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
append error_class converted into a string to string 'errorlist ', substitute the result for self.error_class.
import module sys.
trimmed is boolean False.
call the self.stdout.write method with string 'processing file %s in %s\n' as argument, replacing all the occurrences of '%s' with f and dirpath, respectively.
define the method render with 2 arguments self and context.
if not,
call the function call_command with 3 arguments: string 'loaddata', string 'initial_data' and unpacked dictionary options.
if value has an attribute '__iter__' and value is not an instance of six.text_type and value doesnt have an attribute '_meta',
convert initial into boolean and substitute it for initial.
otherwise if self.fixture_object_count equals self.loaded_object_count,
if self has an attribute '_body',
define the method __init__ with 3 arguments: self, widgets and attrs set to None.
raise a ValidationError exception with 2 arguments: return value of the function _ called with an argument string 'Enter a valid IPv6 address.', and code set to string 'invalid'.
skip this loop iteration,
decimal_digits is a string '0123456789'.
if errors is True,
call the function new_method_proxy with an argument hash, substitute the result for __hash__.
define the function get_current_timezone_name.
return self._post and self._files.
call the __init__ method from the base class of the StreamingHttpResponse class, called with arguments: unpacked list args, and unpacked dictionary kwargs.
do nothing.
get value under the self.blocks dictionary under the name key, return the last element.
define the function add_to_builtins with an argument module.
derive the class Trans from the object base class.
USE_INOTIFY is boolean True.
if any w.needs_multipart_form for every w in self.widgets is true, return boolean True, if not return boolean False.
raise CommandError exception with msg as argument.
integer_types is a tuple with 2 elements int and long.
skip this loop iteration.
if not,
if tags exists and if all elements in the return value of the method checks.tag_exists called with an argument tag, for every tag in tags, are false,
append self.choices to args.
if decimals is greater than digits,
if url_info.netloc is false and url_info.scheme is true,
substitute http_cookies.Morsel for Morsel.
models is an empty set.
delete _urlconfs.value.
define the method F with an argument self.
define the method __init__ with 2 arguments: self and lexer.
if ImportError or AttributeError exception occurred,
decrement self.active_readers by integer 1,
derive the class MinLengthValidator form the BaseValidator base class.
if resolved_path is true,
call the method content.message, substitute the result for content.
for every cache_alias in settings.CACHES,
if middle ends with punctuation,
define the function u with an argument s.
call the method self.stdout.write with an argument string "Installed %d object(s) from %d fixture(s)", where '%d' is replaced with self.loaded_object_count and self.fixture_count, respectively.
if id_ is true,
call the method self.filter_function with arguments name and unpacked dictionary flags, return the result.
call the method self.__copy__, return the result.
for every f in return value of the return value of the method chain.from_iterable called with argument: second element of l for every l in return value of the self._files.lists
self.saved_forms is an empty list.
call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false', dest set to string 'interactive', default set to boolean True and help as 'Tells Django to NOT prompt the user for input of any kind.'
while i is lesser than length of subject and i-th element of subject is not an empty space or tab character,
for every app_name is app_names,
derive the class SimpleTemplateResponse from the HttpResponse base class.
root is an empty list.
num_entries is length of filelist.
import module copy.
define the method close with an argument self.
call the method lexer.tokenize, use it as an argument for the call to the parser_class function, substitute the result for parser.
help is string 'Compiles .po files to .mo files for use with builtin gettext support.'.
call the method self.render_options with 2 arguments: choices and value, substitute the result for options.
if length of bits is not equal to integer 2,
from django.core import signals into default name space.
for every chunk in return value of the method self.chunks,
define the method __str__ with argument self.
substitute module for the value under the format key of the _serializers dictionary.
call the method condition.eval with an argument context, substitute the result for match.
return ZERO.
evaluate the function force_bytes, with the arguments s, encoding, strings_only and errors, return the result.
define the method _new_gnu_trans with 3 arguments: self, localedir and use_null_fallback set to boolean True.
call the function sql_create with 3 arguments: app_config, self.style and connection, substitute the result for statements.
if i is contained in relations, is_relation is boolean True, otherwise is_relation is boolean False.
call the function timedelta with an argument seconds as negative time.altzone, return the result.
renamed methods is a tuple containing 3 elements: '_get_memcache_timeout', 'get_backend_timeout' and RemovedInDjango19Warning.
substitute self.source for e.django_template_source.
from django.core import signals into default name space.
append value under the key v of foreground dictionary to code_list.
from django.dispatch import receiver into default name space.
cal the method operator.attrgetter with an argument string "__class__", use the result as an argument for the call to the function, new_method_proxy, __class__ is an property object created with previous result as an argument.
call the self.initial_form_count method, return the sublist of self.forms from the beginning to the previous result as the end index.
call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments: field and an empty list.
append string '</select>' to output.
if found is false and, line is false or return value of the function plural_forms_re.search called with an argument line is false,
if self.match is None or call to the method self.match_re.search with an argument f, evaluated to true,
if not,
define the method __repr__with an argument self.
define the method filter with 4 arguments: self, name set to None, filter_func set to None and unpacked dictionary flags.
call the method stream.unget with an argument chunk.
call the method self.write_items with an argument handler.
return an empty string.
if first and second element of sys.version_info are equal to integers 3 and 4, respectively,
if las equals integer 1,
if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
from __future__ import unicode_literals into default name space.
return proxy.
help is an string "Creates the tables needed to use the SQL cache backend.".
define the function npgettext with 4 arguments: context, singular, plural and number.
call the method __init__ from the base class of the class SortedDict.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
call the method payload.decode with 2 arguments: text and utf8_charset, substitute the result for self._payload.
substitute self._parser for parser.
substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false, respectively.
substitute filepath for self.filepath.
if KeyError exception is caught,
for every app_config in app_configs,
substitute context for self.context.
define the method values with an argument self.
get the value under the 'use_default_ignore_patterns' key of the options dictionary, if it is true,
if data is empty.
call the method __init__ from the base class of the Deserializer class with arguments stream_or_string and unpacked dictionary options.
call the function re.compile with an argument raw string "^\s*blocktrans(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?(?:\s+|$)", substitute the result for block_re.
if ValidationError exception is caught,
remove the first element of context.
call the function _check_middleware_classes with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
call the method self.valid_value with an argument val, if it evaluates to false,
call the method node.render with an argument context, return the result.
call the method copy.copy with an argument self, substitute the result for result.
if StandardError, renamed to e, exception is caught,
call the method __new__ from the base class of the class ModelFormMetaclass, with 4 arguments: mcs, name, bases and attrs, substitute the result for new_class.
return.
for every attr in self.rendering_attrs,
except if KeyError exception is caught,
if self.first is false,
if self.timezone is true and call to the method self.timezone.dst with an argument self.data, evaluates to true,
self.invoked_for_django is boolean True.
return value.
substitute name for self.name.
substitute error_messages for value under the ''error_messages' key of the kwargs dictionary.
call the function escape with an argument url, substitute the result for url, call the function escape with an argument trimmed, substitute the result for trimmed.
break from the loop execution.
define the method __init__ with an argument self.
missing_args_message is an string "Enter at least one application label.".
if file_name is an instance of Template class.
try,
define the method is_hidden with an argument self.
do nothing.
__locks is an empty dictionary.
if self.fail_silently is false,
try,
call the function os.makedirs with argument directory.
call the function re.sub with 3 arguments: raw string "\\.|.", escape_quotes and tok without the first and last element, substitute the result for guts.
return list_ and boolean False.
if 'media' is not contained in attrs,
substitute status for self.status_code.
call the function warnings.warn with 3 arguments: string "django.utils.dictconfig will be removed in Django 1.9.", RemovedInDjango19Warning and stacklevel set to integer 2.
if UnicodeEncodeError exception is caught,
if instance.pk is None,
call the self.request_class method with environ as an argument, substitute the result for request.
define the method __getitem__ with arguments self and index.
from django.utils.html import conditional_escape and format_html into default name space.
derive the class BlockNode from the Node base class.
call the method models.signals.pre_syncdb.send with 6 arguments: sender set to app_config.models_module, app set to app_config.models_module, create_models set to create_models, verbosity set to verbosity, interactive set to interactive, and db set to db.
replace tags for check.tags.
call the function mark_safe with an argument value, return the result.
assign integer 2 to parts if third element of version equals to zero, otherwise assign it integer 3.
call the delete method with key and version set to version as arguments.
define the function time_format with 2 arguments: value and format_string.
call the method timezone.is_aware with an argument expires, if it evaluates to true,
return list with an element first_item, and boolean True.
if dt is None, is_dst is boolean False, otherwise call the method _isdst with an argument dt, substitute the result for is_dst.
call the self._lock.writer method, with the result perform the following,
call the function func with 3 arguments: context, self.first and self.second, return the result.
if lengths of value and arg are equal, return boolean True, otherwise return boolean False.
if not,
derive the class RequestContext from the Context base class.
if key is not contained in self,
get self.to_field attribute of self.parent_instance, substitute it for orig.
if latest_date is true, return it, if not, call the method datetime.datetime.now and return the result.
substitute request.urlconf for urlconf.
define the method __init__ with 2 arguments self and dt.
raise an CommandError exception with an argument "Database inspection isn't supported for the currently selected database backend.".
new_msg is a tuple containing a string: "Database %s couldn't be flushed. Possible reasons:\n" "  * The database isn't running or isn't configured correctly.\n  * At least one of the expected database tables doesn't exist.\n" "  * The SQL was invalid.\nHint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n" "The full error: %s", where '%s' is replaced by value under the 'NAME' key of the connection.settings_dict dictionary and e.
derive the class DateTimeInput from the DateTimeBaseInput base class.
remove dirname from the dirnames.
key is a list with elements of list key from length of self.prefixes index to the end,
yield string "from __future__ import unicode_literals" as the result.
define the method __new__ with 4 arguments: mcs, name, bases and attrs.
return default.
call the function os.unlink with an argument work_file.
try,
call the method app_config.get_models with an argument include_auto_created set to boolean True, substitute it for app_models.
if stream_or_string is not an instance of bytes or six.string_types,
if rel_to is contained in known_models,
comment_lineno_cache is None.
if object response has an attribute 'render' and if response.render is callable object,
if plan_node is not contained in shown and first element of plan_node equals to app_name,
raise an NotImplementedError with an argument string 'Subclasses must define this method.'.
if field_type equals a string CharField' and fourth element of row is true,
model is None.
if pot_path file path exists,
define the function add with 2 arguments value and arg.
define the function urlsafe_base64_encode with an argument s.
import module socket.
do nothing.
if self.use_argparse is true,
for every dep in deps call the method apps.get_model with an argument dep, and append the result to the list, substitute it for deps.
call the method node.getElementsByTagName with an argument string 'None', if it evaluates to true,
define the method y with an argument self.
reason_phrase is None.
from django.utils.encoding import force_str,  force_text and DEFAULT_LOCALE_ENCODING into default name space.
divide 10 to the power of 400 by 10 to the power of 400, substitute the result for nan.
call the method other.__cast, substitute the result for other.
call the method self.connection.close.
if slots is not None,
derive the class Serializer from the object base class.
otherwise if ch equals a string '^',
derive the class DateTimeBaseInput from the TextInput base class.
if LookupError or TypeError exceptions are caught,
for every middleware_method in self._template_response_middleware,
substitute i-th element of self.forms for form.
try,
call the function smart_urlquote with an argument middle, substitute the result for url.
substitute limit for self.remaining.
return etags.
substitute self.html_name for name.
substitute var for value under the name key of the self.extra_context dictionary.
if new is None,
define the method flush with an argument self.
if "__call__" is contained in klass.__dict__ for any klass in __mro__ field of the obj class, return boolean True, otherwise return False.
if buffer_ is true,
define the method __init__ with 5 arguments: self, val_expr, max_expr, max_width and asvar set to None.
otherwise if length of app_labels is greater than integer 1,
substitute token_type and contents for self.token_type and self.contents.
call the method self._stream.read with an argument integer 1, substitute the result for unused_char.
define the method usage with 2 argument: self and subcommand.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
code is a string 'invalid'
substitute instance._meta for opts.
raise an TemplateSyntaxError exception with an argument string, "'%s' tag takes at least 2 arguments and the second last argument must be 'as'", where '%s' is replaced with function_name.
append a tuple containing 2 elemetns: model and deps, to skipped.
call the function escape with an argument value, substitute it for value.
call the function self.func with an argument instance, substitute the result for res and value under the self.name key of the instance.__dict__ dictionary.
substitute file_name for self.file_name.
return the string 'ValidationError(%s)', replace '%s' with self.
define the method __delattr__ with 2 arguments self and name.
define the method errors with an argument self.
if not,
if not,
self.connection is None.
define the method __deepcopy__ with 2 arguments: self and memo.
if related is true,
from django.test.signals import setting_changed into default name space.
MEDIA_TYPES is a tuple with 2 strings: 'css' and 'js'.
try,
define the method __getstate__ with an argument self.
from django.conf import settings into default name space.
substitute code_changed for fn.
derive the class TemplateIfParser from IfParser base class.
substitute '%s' in string "UnicodeDecodeError: skipped file %s in %s" with f.file and f.dirpath, write it to self.stdout.
define the method __init__ with 4 arguments: self, data, func and prefix.
self.callback is None.
return modules.s
if ValidationError, substituted for e, exception is caught,
get name attribute from the instance object, call it with an argument value and return the result.
call the method handler.addQuickElement with 2 arguments: string 'id' and unique_id.
define the method handle with arguments self, unpacked list app_labels and unpacked dictionary options.
call the function importlib_find with 2 arguments: full_module_name and package_path, if the result is not None, return boolean True, otherwise return boolean False.
return boolean False.
self.addr is an empty string.
substitute template_string for self.template_string.
if self.max_length is not None,
from django.db import connections, router, transaction and DEFAULT_DB_ALIAS into default name space.
import module random.
from __future__ import unicode_literals into default name space.
try,
derive the class Paginator from the object base class.
substitute val for self._encoding.
define the method __setitem__ with 3 arguments: self, key and value.
define the function dec with an argument func.
if self.regex is not an instance of a six.string_types type,
if git_changeset is true,
do nothing.
if function pk_is_not_editable called with an argument pk evaluates to true, or pk.name is not contained in form.fields,
return self.cleaned_data.
self._done is boolean True.
if field is contained in self.errors,
do nothing.
define the function check_model_signals with app_config defaulting to None and unpacked dictionary kwargs as arguments,
processors is an empty tuple.
define handle_field method with self, obj and field arguments.
if self._cached_loaders is false,
substitute s without the first element for s.
return self._choices.
call the method form.add_prefix with an argument self, substitute the result for self.html_name.
result is an empty list.
substitute email_backend for self.email_backend.
_assertRaisesRegex is a strnig "assertRaisesRegex".
call the method self.build_potfiles, substitute the result for potfiles.
html4_singlets is a tuple with 9 elements: strings 'br', 'col', 'link', 'base', 'img', 'param', 'area', 'hr' and 'input'.
call the method instance.save.
status_code is an integer 410.
derive the class NumberAwareString from the resultclass base class.
if s_len is greater than length,
substitute unicode for text_type.
derive the class MultiPartParserError from the Exception base class.
decorator function wraps with an argument func.
import module pickle.
return a tuple with an element self.__offset.
return dirs.
if self.field.label is None,
call the function urljoin with arguments current_uri and location, substitute the result for location.
substitute self.obj for model.
get translation_function attribute of the _default object, call the result with 3 arguments: singular, plural and number, return the result.
call the method parser.add_argument with 6 arguments: string '--ipv6', string '-6', action set to string 'store_true', dest set to string 'use_ipv6', default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'.
call the method self.configure_filter with an argument value under name key of formatters dictionary, substitute the result for formatters dictionary value under name key.
substitute e for message.
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
try,
try,
call method self.stdout.write with statement as an argument.
define the method __init__ with arguments self, unpacked list args and unpacked dictionary kwargs.
import module sys.
raise an SuspiciousFileOperation exception with string "Attempted access to '%s' denied." as argument, replace '%s' with name.
otherwise if var_arg is true,
call the function urlretrieve with arguments url and tempdir and filename joined into a file path, assign the result to the_path,  and info, respectively.
return an empty string.
import module time.
if all_issues is true,
call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.
replaces is an empty list.
try,
increment self.pos by integer 1.
missing_args_message is a tuple containing a string "No database fixture specified. Please provide the " "path of at least one fixture in the command line."
define the function slice_filter with 2 arguments value and arg.
derive the class SerializerDoesNotExist from the KeyError base class.
if i is greater than or equal to length of subject.
call the function token.split_contents, substitute the result without the first element for bits.
define the method _iteritems with an argument self.
define the method __deepcopy__ with 2 arguments: self and memo.
if message is true,
for every form in self.initial_forms,
split arg by ',', substitute the result for bits.
return boolean True.
if v is boolean False or v is None or v is an empty string, return boolean False, otherwise return boolean True.
call the method data.replace with an argument microsecond set to integer 0, substitute the result for data.
if autoescape is true,
skip this loop iteration.
LIGHT_PALETTE is a string 'light'.
call the method match.groups, assign the result to name and value, respectively.
substitute _itervalues for itervalues.
replace all '%s' in string '<%s %s (%s:%s) %s>' with self.__class__.__name__, urlconf_repr, self.app_name, self.namespace and self.regex.pattern, respectively. return it.
zip together new_keys and keys, convert it to dictionary, assign it to m.
if not,
raise an ValueError exception with argument string "EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set one of those settings to True.".
if TemplateSyntaxError, renamed to e, exception is caught,
define the method __iter__ with an argument self.
import msvcrt.
if e is not an instance of CommandError class,
if self.file_path is not an instance of six.string_types,
if options is true,
call the method self.indent with argument integer 2.
call the function _super with 2 arguments: class SimpleLazyObject and self, call the method __init__ on the result.
if app_config.models_module is None,
define the method __deepcopy__ with 2 arguments self and memo.
return self._body.
if KeyError exception is caught,
raise an exception of class ValueError, with string "Key '%s' not found" as argument, where '%s' is substituted for key.
replace every occurrence of newline character in value with string '<br />', use it as an argument for the call to the mark_safe, return the result.
sum lead and opening, substitute the result for lead.
from django.db.utils import DatabaseError into default name space.
if data is an instance of bytes,
 requires_system_checks is boolean False.
if tok.next is true,
call the method constant_re.match with first element of parts as an argument, substitute the result for cmatch.
return response.
define the function cookie_date with an argument epoch_seconds set to None.
define the function getInnerText with an argument node.
derive the class Page from the collections.Sequence base class.
substitute result for value under the mem_args key of the cache dictionary.
sql_files is an empty list.
from __future__ import unicode_literals into default name space.
return default.
DARK_PALETTE is a string 'dark'.
otherwise if value is an instance of datetime.time,
substitute lineno for translators_comment_start.
call the method mimetypes.guess_extension with an argument content_type, substitute result for ext.
raise a CommandError exception with an argument: string "%s already exists, overlaying a project or app into an existing directory won't replace conflicting files", where '%s" is replaced with new_path.
substitute i-th element of value for field_value.
self._populated is boolean False.
convert max_entries into a string, substitute it for self._max_entries.
call the method self.cache_key with 2 arguments name and dirs, substitute the result for key.
define class dummy.
from django.db import connection into default name space.
return result.
append name to 'add_' use it as the name of the attribute to get from combined object , call the result with an argument: name appended to string '_', as the name of the attribute to get from self object, or if the previous doesnt exist, None.
define the method subwidgets with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
call the method self.set_cookie with 3 arguments: key, value and unpacked dictionary kwargs, return the result.
from django.contrib.auth import get_user_model into default name space.
if not,
if i is greater or equal to the result of the method self.initial_form_count and self.initial_extra is true,
_dec.__name__ is a string 'method_decorator(%s)' formated with decorator.__class__.__name__.
return from the function
define the method add_arguments, with 2 arguments self and parser.
merge_migrations is an empty list.
if os.name equals string 'nt',
define the method add_fields with 3 arguments: self, form and index.
for every lineno and line is enumerated result of the method content.splitlines, called with an argument boolean True,
call the function cleanup_url with an argument url, assign the result to filename and display_url, respectively.
substitute the return value of the smart_text function with an argument obj_pk for the value under the 'pk' key of the attrs dictionary.
if palette equals value under the NOCOLOR_PALETTE key of the PALETTES dictionary,
if secret is None,
call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false', dest set to string 'interactive', default set to boolean True, help as a string 'Tells Django to NOT prompt the user for input of any kind.'.
if value is an instance of datetime.datetime class,
substitute first element of app_list for ns.
writer is an instance of a class MigrationWriter, created with an argument new_migration.
define the method __init__ with 4 arguments: self, children set to None, connector set to None and negated set to boolean False.
return result of the f.fileno method if f has an 'fileno' attribute, otherwise return f.
self.model_name is a string 'cacheentry'.
if argv is true, substitue it for self.argv, if not substitute sys.argv for self.argv.
if ImportError, renamed to exc, exception is caught,
substitute self.required for widget.is_required.
call the method value.astimezone with an argument timezone, substitute the result for value.
derive the class FileField from the base class Field class.
call the method shell.mainloop.
append check.tags into a list for every check in self.registered_checks if check has 'tags' attribute, put the elements into a set and return it.
call the method field.rel.get_related_field, substitute the result for field.
msg_count is an integer 0.
call the function call_command with 6 arguments, string 'runserver', addrport as the value under the 'addrport' key of options dictionary,
raise an CommandError exception with an argument string "Type '%s help %s' for usage information.", where '%s' are replaced by: return value of the function os.path.basename called with first element of sys.argv as an argument, and second element of sys.argv.
doublecolon_start is an integer -1.
substitute utc for tzinfo.
define the function wrapper with an argument unpacked list args.
from django.utils import six into default name space.
call the method handler.startDocument.
call the method inspect.getmro with an argument new_class, for every base in the result,
call the method cursor.execute with string "DELETE FROM %s WHERE cache_key < %%s" as argument, substitute the '%s' with table and list containing first element of cursor.fetchone method, respectively.
define the method d with an argument self.
get the value under the 'interactive' key of the options dictionary, substitute it for self.interactive.
call the method render from the instance of CheckboxInput class, with 3 arguments: checkbox_name, boolean False, attrs as a dictionary with an entry: checkbox_id for 'id', substitute the result for value under the 'clear' key of the substitutions dictionary.
for every k and v in result of the function six.iteritems,called with an argument self, joining string '%r: %r' formated with k and v into a string, separated with ', ', use it to format a string '{%s}', return it.
if transfer_encoding equals string 'base64',
len_item is integer 1.
call the function _load_serializers.
if tag is false or current_len is greater or equal to truncate_len,
define the function advance_iterator with an argument it.
return an instance of CommentNode class.
do nothing.
return a string '%02d' formated with self.data.second.
convert newline character to unicode and substitute the result for newline.
raise an BadHeaderError exception with an argument string "Header values can't contain newlines (got %r)", where '%r' is replaced with value.
call the object Decimal with string '1' as an argument, divide it by 10, bring the result to the power of self.decimal_places, convert the result to a lowercase string, substitute it for step.
seen is an empty set.
call the function linebreaks with 2 arguments value and autoescape, use the result as an argument for the call to the mark_safe, return the result.
get config dictionary element under 'formatters' key, if it exists substitute it for formatters, if not, formatters is EMPTY_DICT.
if id_ is true,
call the function force_text with arguments self and _regex, substitute the result for regex.
raise an v exception.
call the function check_for_migrations with an arguments app_config and connection.
try,
from IPython.frontend.terminal.ipapp import TerminalIPythonApp into default namespace.
substitute format_string for self.format_string.
if self.to_field is true,
import module mimetypes.
convert o to an string, return it.
call the method field._has_changed with 2 arguments: return value of the function field.to_python called with an argument initial, and data, if it evaluates to true,
derive the class DictWrapper from the dict base class.
define the method __eq__ with self and other as arguments.
for every receiver, _ and _ in receivers,
substitute first element of base64d for base64d.
default_error_messages is an dictionary with an initial entry: result of the function _ called with an argument string, 'Enter a whole number.' for 'invalid'.
define the function validate_integer with an argument value.
call the method hmac.new with 3 arguments: key, msg set to result of the function force_bytes with an argument value, and digestmod set to hashlib.sha1, return the result.
if not,
if tag is not contained in TemplateTagNode.mapping,
try,
try,
from django.utils.encoding import force_str and force_text into default name space.
if not,
import code.
define the function new_datetime with an argument d.
define the method encode with self class instance and i as arguments.
call the method django.get_version append new line to it, write it to sys.stdout.
register is an instance of Library class.
otherwise if cls._delegate_bytes is true,
call the method value.serializable_value with an argument self.to_field_name, return the result.
call the function normalize_newlines with an argument value, substitute the result for value.
if self.localize is true,
substitute object_list for self.object_list.
try,
if autoescape is true and safe_input is false,
 return value.
if can fail is true,
self.id_for_label is true,
from django.utils.functional import total_ordering into default name space.
register.tag decorator function with an argument 'for',
evaluate the method connection.introspection.table_name_converter with model._meta.db_table as argument, append it to tables.
call the logger.warning method with string 'Bad Request (UnicodeDecodeError)', exec_info set to sys.exec_info() and dictionary extra with one entry 'status_code' is integer 400, as arguments.
append e to criticals list for every e in all_issues, if checks.CRITICAL is lesser than or equal to e.level.
if eather of settings.USE_I18N or settings.USE_L10N is True, set is_accept_language_redundant to True.
split the_path at the '/' character, substitute last element of the result for used_name.
define the method load_template_source with 3 arguments: self, template_name and template_dirs set to None.
obj is an instance of Node class, created with 3 arguments: children, connector and negated.
define the method __init__ with arguments self and attrs set to None.
define function add_never_cache_headers, with response as an argument.
derive the class ModelChoiceField from the ChoiceField base class.
define the function assertCountEqual with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
if not,
call the method router.get_migratable_models with argument: app_config, connection.alias and include_auto_created set to True, substitute the result for app_models.
convert elements of defaultdict to list, substitute it for self.blocks.
if message_context is true,
call the method self.validate_key with argument key.
call the function unescape_entities with an argument file_name, use the result as an argument for the call to the self.IE_sanitize, method, substitute the result for file_name.
define the method __init__ with 3 arguments self and unpacked list args and unpacked dictionary kwargs.
if value has an '__iter__' attribute and value is not an instance of bytes or six.string_types class.
return an empty list.
otherwise if, if value under the 'unique' key of the dictionary contained under the column_name key of the dictionary indexes is true,
call the method tpl.format with an arguments self.sysid and self.pubid.
if rhs is an instance of dict type and number is true,
derive the class BadSignature from the Exception base class.
import module re.
finally perform,
write msg to self.stderr stream.
define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.
if not,
define the method as_hidden with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
return self._num_pages.
define the method __init__ with 4 arguments: self, redirect_to, unpacked list args and unpacked dictionary kwargs.
split settings.SETTINGS_MODULE by '.' character, substitute the first element of the result for project_name.
msg is a string "Execution of %s failed", with '%s' replaced by self.program.
if data is true, substitute it for self.data, otherwise self.data is an empty dictionary.
if OSError, renamed to e, is caught,
call the function _urlize with 4 arguments: value, trim_url_limit as limit converted into an integer, nofollow as boolean True, and autoescape as autoescape, use the result as an argument for the call to the function mark_safe, return the result.
response.streaming_content is an empty list.
if PY3 filed of six is boolean True,
raise an CommandError with an argument string "You must supply at least one app label when using --empty.".
msg is an instance of a class SafeMIMEMultipart, created with the arguments: _subtype set to self.alternative_subtype and encoding set to encoding.
otherwise if self.required is true,
do nothing
if call to the function response.has_header with 'Expires' as argument returns boolean False,
join source list elements from last till pos indexes into a string, substitute the result for piece.
for every key in sorted list of user_settings,
for every model in return value of the function router.get_migratable_models, called with arguments: app_config, connection.alias and include_auto_created set to boolean True.
if not,
try,
if fk.unique is boolean true,
return self.
derive the class ExtendsError from the Exception base class.
append e to errors list for every e in all_issues, if checks.ERROR is lesser than or equal to e.level, and e.level is lesser than checks.CRITICAL.
if key is contained in last element of self.dicts, return boolean True, otherwise return boolean False.
call the function iri_to_uri with an argument value, use the result as an argument for the call to the force_text function, return the result.
categories is a list containing the results of the function to_unicode, called with an argument c, for every c in categories.
call the function urlresolvers.set_urlconf with urlconf as the argument.
raise an TemplateSyntaxError exception with an argument string "Could not parse the remainder: '%s' from '%s'", where '%s' is replaced with elemnts of token from upto index till the end, and token.
if new_name starts with a string '_',
if value is None,
call the method __init__ from the base class of the class BaseModelForm, with 8 arguments: data, files, auto_id, prefix, object_data, error_class, label_suffix and empty_permitted.
return nodelist_true_output, if true, if not call the method self.nodelist_true.render with an argument context and return the result.
call the method parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and name, substitute the result for args and kwargs, respectively.
random is an instance of random.SystemRandom class.
otherwise if name is not None and filter_func is None,
program is string 'msgfmt'
get the value under the 'table_name_filter' key of the options dictionary, substitute it for table_name_filter.
value is an instance of ConvertingList class, created with an argument value.
derive the OutputWrapper class from the object base class.
replace '%s' in string '%s_%s' with id_ and i, substitute the result for input_attrs dictionary value under the 'id' key.
call the method regex.search with 2 arguments: text and pos.
from django.core.mail.backends.base import BaseEmailBackend into default name space.
for every renamed_method in cls.renamed_methods,
convert value into a iterator, substitute the result for self._iterator.
define the method add with 5 arguments: self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
get value under the 'handlers' key of the config dictioanry, if it exists substitute it for handlers, if not handlers is None.
migration.merged_operations is an empty list.
if typed is true,
call the addr.split method with character '@' and integer 1 as arguments, substitute the result for localpart and domain, respectively.
get the value under the key 'only' of the options dictionary, if it exists substitute the result for isolated_context, if not, isolated_context is boolean False.
increment level by one.
derive the class classonlymethod from the classmethod base class.
return nothing.
if new_attr is None,
replace '%s' in string "  Optimized from %s operations to %s operations." with lengths of operations and ew_operations, respectively, write it to self.stdout stream.
define the method token_kwargs: bits, parser and support_legacy set to boolean False.
return nothing.
call the method self._is_expired with argument f, invert the boolean result and return it.
call the method re.split with 2 arguments: raw string ' *, *' and elements of bits from 1 index to in_index index, joined into a string, separated by whitespaces, substitute the result for loopvars.
write string "App '%s' could not be found. Is it in INSTALLED_APPS?" with '%s' where '%s' is replaced with app_label, write it for self.stderr.
if indent is false,
register is an instance of Library class.
self.cleaned_data is an empty dictionary.
return None.
try,
call the function get_user_model, substitute the result for UserModel.
call the os.stat function with argument filename, store the return value in stat.
get fist max_width incremented by 1 elements from line, find index of the first occurrenece of whitespace from the right side, add integer 1 to it, substitute the result for space.
call the method self.add_filters with 2 arguments: logger and filters.
define the function close_caches with dictionary pair of elements kwargs as argument.
call method sort on the headerlist.
otherwise if first element of second row of args equals a string '3',
make a directory named original_path.
substitute offset.seconds for offset.
otherwise if self.use_ipv6 is true and _fqdn is false,
substitute '%s' in 'Not Found: %s' with request.path, extra is an dictionary with two pairs of elements 'status_code' with value 404, and 'request with value request, respectively use the previous as the arguments for the call to the logger.warning function.
derive the class TemplateEncodingError form the base class Exception.
call the method os.environ.get with 2 arguments: strings 'PATHEXT' and '.COM;.EXE;.BAT;.CMD', split the result at os.pathsep, substitute it for pathext.
if transfer_encoding equals a string 'base64',
call the method match.group with an argument integer 0, return the result.
call the method threading.RLock, substitute the result for self._lock.
set file pointer at the beginning of the self.file file.
define the function to_locale with an argument language.
call the function exhaust with an argument self._input_data.
call the function templatize with 2 arguments: src_data and sliced orig_file, without first 2 elements, substitute the result for content.
call the method check_for_language.cache_clear.
substitute self.min_value for the value under the 'min' key of the attrs dictionary.
define the function time with 2 arguments value and arg set to None.
import module functools.
if not,
close the file stream.
call the function convert_old_style_list with an argument sublist, substitute the result for item and old_style_list.
increment stats dictionary value under the MISSES key by integer 1.
try,
if fake is true,
set attr.name attribute of Module_six_moves_urllib_response object to attr.
from django.utils.safestring import mark_safe, SafeData and mark_for_escaping into default name space.
evaluate function force_bytes with path as the argument, replace all of the occurancies of the "\\" with "/" in the resulting string, call the function quote with the result and with the safe set to bytes string "/~!*()'", return the function result.
python_2_unicode_compatible decorator,
if Exception, renamed to e, exception is caught,
join statements into a string, separated by white spaces, append it to statements.
__all__ a tuple containing strings: 'Field', 'CharField', 'IntegerField', 'DateField', 'TimeField', 'DateTimeField', 'RegexField', 'EmailField', 'FileField', 'ImageField', 'URLField', 'BooleanField', 'NullBooleanField', 'ChoiceField', 'MultipleChoiceField', 'ComboField', 'MultiValueField', 'FloatField', 'DecimalField', 'SplitDateTimeField', 'IPAddressField', 'GenericIPAddressField', 'FilePathField', 'SlugField', 'TypedChoiceField', 'TypedMultipleChoiceField'.
define the method update with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
call the function __current_timezone with an argument value, return the result.
if os has an attribute 'chmod',
define the method __repr__ with an argument self.
call the method subsclass with 2 arguments: string "%04i_merge", replace '%04i' with biggest_number incremented by one, that occupies minimum 4 places within a string, and app_label, substitute the result for new_migration.
if mime_encode is true,
append line to bytes string ';', use it as an argument for the call to the function _parse_header_params, substitute the result for plist.
otherwise if name starts with a string 'string',
end_index is None.
raise an self.error exception with 2 arguments: token and string  "Invalid block tag: '%s', expected %s", where '%s' is replaced with command and result of the function get_text_list called with an argument list, with p converted into a string and surrounded with single quotes for every p in parse_until.
docsring
if min_length is not None,
outer_html is a string '<ul{id_attr}>{content}</ul>'.
return nothing.
if string 'noreset' is not contained in opts,
if not,
if var ends with '.',
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide an handle_m2m_field() method'.
call the method self.attach with arguments filename, content and mimetype.
call the method get_runner with 2 arguments: settings and value under the 'testrunner' key of the options dictionary, substitute it for the TestRunner.
raise an exception ImproperlyConfigured with string "You must define a '%s' cache" as argument, with '%s' replaced with DEFAULT_CACHE_ALIAS converted into a string.
resolved_args is an list with elements, return value of the method var.resolve with an argument context, for every var in self.args.
if autoescape is true,
define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
return self.file.
substitute connection.introspection.table_name_converter for converter.
return result.
raise an ValueError exception with an argument string 'Unable to configure formatter %r: %s' formated with name and e.
tpl is an string "ExternalReferenceForbidden(system_id='{}', public_id={})".
call the method node.render with an argument context, append the result to the nodelist.
if answer is false,
return None.
slice the rawdata to obtain substring from i-th to j-th element, use it as the argument for the method call to the self.handle_data.
from django.test.utils import get_runner into default namespace.
do nothing.
from collections import OrderedDict into default name space.
p is a instance of Popen class, created with 6 arguments: args, shell set to boolean False, stdout set to PIPE, stderr set to PIPE, close_fds set to boolean True is os.name is not equal to 'nt', universal_newlines set to boolean True.
if '.' is contained in exclude,
property decorator,
from django.utils.safestring import mark_safe into default name space.
if not,
selected_html is an empty string.
if number is an instance of int type.
open filename file in write mode, with the file descriptor renamed to outfile, perform,
if locales in not empty,
if self.form.is_bound is false,
call the method self.find_files with an argument string '.', substitute the result for file_list.
substitute args for key.
substitute result for value under the RESULT key of the oldroot dictionary.
return boolean True.
from django.utils.safestring import mark_safe into default name space.
if message is an instance of ValidationError class and message.code is contained in error_messages,
if size is None substitute self._remaining for remaining, if not, substitute size for remaining.
if model is contained in created_models,
try,
if value under the 'pidfile' of options dictionary exists,
call the method self.validate_number with an argument number, substitute it for number.
if att_name equals string 'id' and extra_params equals a dictionary with 1 entry: boolean True for 'primary_key',
output_transaction is boolean True.
substitute result for the value of the memo dictionary, with identity of the self object as an key.
try,
class method decorator,
if new_name is contained in used_column_names,
call the method parser.delete_first_token.
conditions_nodelists is a list containing tuple with 2 elements condition and nodelist.
if default_args exists substitute it for self.default_args, if not, self.default_args is an empty dictionary.
call the method cursor.execute with an argument sql.
define the method get_dump_object with arguments self and obj.
import module os.
if words is not empty and length is smaller than or equal to integer 0,
if e.connection_reset is false,
clean is a lambda function with arguments self and x, return value is x.
get name attribute of the self._out object, return it.
COMMENT_TAG_END is a string '#}'.
define the method _get_request with self class instance as argument.
if is_templatized is true,
get name attribute from the instance object, call it and return the result.
import flup
if value is None,
if match is true,
get value under the 'register_to' key of the kwargs dictionary, substitute it for register_to.
call the method __init__ with an argument name form the base class of the class MovedAttribute.
call the function new_method_proxy with an argument getattr, substitute the result for __getattr__.
p is image parser object, set by calling the PillowImageFile.Parser method.
for every key and value in return value of the self._headers.values method, call the function to_bytes with 2 arguments: key, and string 'ascii' and call the function to_bytes with 2 arguments: value and string 'latin-1', join the previous 2 results into a string, separated by ': ', append it to a list, substitute the resulting list for headers.
derive the class DebugNode from Node base class.
if response is None,
define the method file_complete with arguments: self and file_size.
if data in self.empty_values is true,
if value is contained in self.empty_values and self.required is true,
if source is None,
if self.args is true,
call the function os.remove with argument fname.
call the function urlunsplit with a tuple containing 5 elements: scheme, netloc, path, query and fragment, as an argument, substitute the result for url.
call the method self.setlistdefault with an argument key, append value to the result.
define the method new_file with arguments: self, file_name, unpacked list args and unpacked dictionary kwargs.
define the method __repr__ with an argument self.
error_msg is a string "Your TEMPLATE_DIRS setting is empty. Change it to point to at least one template directory.".
try,
if formatter is true,
substitute CheckboxInput for widget.
from yaml import SafeLoader, SafeDumper into default name space.
call the fastcgi_help function, return the result.
define the function linebreaksbr with 2 arguments value and autoescape set to None.
substitute first length elements of words for words.
define the method handle_file_complete with 3 arguments: self, old_field_name and counters.
if not,
define the function is_valid_ipv6_address with an argument ip_str.
from subprocess import PIPE and Popen into default name space.
substitute _make_key for make_key.
return an empty dictionary.
call the self.start_object with an argument obj.
try,
if KeyError exception is caught,
read data from file fp, use the result as an argument for the call to the function plural_forms_re.search, substitute it for m.
append to options a tuple containing 2 entries: firs element of sorted list of the s_opt.option_strings, and evaluated boolean expression s_opt.nargs doesnt equal to integer 0, for every s_opt in parser._actions, only if s_opt.option_strings is true,
define the method sync_apps with self class instance, connection and app_labels as arguments.
substitute loopvars and sequence for self.loopvars and self.sequence, respectively.
while current_len is smaller than or equal to length,
call the method widget_attrs from the base class of the class CharField, with an argument widget, substitute the result for attrs.
try,
remove entry under the 'formfield_callback' key of the attrs dictionary, if it exists substitute if for formfield_callback, if not formfield_callback is None.
define the function get_complete_version with in argument version, defaulting to None.
get the value under the 'use_base_manager' key of the options dictionary, substitute the result for use_base_manager.
define the function normalize_newlines with an argument text.
call the method parser.add_library with an argument temp_lib.
if self.verbosity is greater than integer 1,
self._post is an instance of QueryDict created with arguments: an empty string and encoding set to self._encoding, self._files is an instance of class MultiValueDict.
if rhs is an instance of SafeData.
from django.utils import six into default name space.
call the method widget.render with 3 arguments: string created by concatenation from: name, string '_' and i, widget_value, and final_attrs, append the result to output.
substitute gettext_noop for ugettext_noop.
if ch equals a string '?',
if KeyError exception is caught,
call the method value.center with an argument, arg converted into a integer, return the result.
write a newline into a self.stream file stream.
from django.utils.six.moves import input into default name space.
from django.utils.http import http_date to the default name space.
status_code is an integer 404.
call the function os.umask with an argument umask.
call the _expire_info.setdefault method with name and empty dictionary as arguments, substitute the result for self_expire_info.
call the function re.sub with 3 arguments: string "\d([A-Z])", lambda function with an argument m and return value, result of the m.group method called with an argument integer 0 converted into lowercase and t, return the result.
define the method pop with 3 arguments: self, key and default set to None.
call the BaseConverter function with BASE62_ALPHABET as argument, store the result in base62.
return nothing.
call the function format_html with 3 arguments: self.url_markup_template, value.url and return value of the function force_text, called with an argument value, substitute the result for value under the 'initial' key of the substitutions dictionary.
define the function upath with an argument path.
get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
if KeyError exception is caught,
derive the class LoaderOrigin from the Origin base class.
used_column_names is an empty list.
import module os.
call the self._create_message method with argument msg, substitute it for msg.
 Installing index for %s.%s model\n" as argument, with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.
from django.utils.encoding import python_2_unicode_compatible into default name space.
if doublecolon_len is greater than best_doublecolon_len,
call the method self.render with an argument self.context, use it as an argument for the call to the mark_safe function, return the result.
if TypeError exception is caught,
call the method self.stdout.write with an argument string "No fixture '%s' in %s.", where '%s' is replaced with fixture_name, and result of the function humanize called with an argument fixture_dir.
define the method subwidgets with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
if files is true, substitute it for self.files, if not self.files is an empty dictionary.
call the method parser.add_argument with 5 arguments: string '--app', action as a string 'store', dest as a string 'app_label', default set to None, help is a string 'Only look for fixtures in the specified app.'.
otherwise if field is contained in self.fields,
substitute end for upto.
call the method httpd.serve_forever.
increment year by integer 1900.
ip_address_validator_map is a dictionary containing 3 initial entries: tuple containing 2 elements: list with an element,  validate_ipv46_address and return value of the function _ with an argument string 'Enter a valid IPv4 or IPv6 address.' for 'both', tuple containing 2 elements: list with an element validate_ipv4_address and return value of the function _ with an argument string, 'Enter a valid IPv4 address.' for 'ipv4' and tuple containing 2 elements: list with an element validate_ipv6_address, and return value of the function _ with an argument string 'Enter a valid IPv6 address.' for 'ipv6'.
raise an TemplateSyntaxError exception with an argument string "Malformed arguments to url tag".
call the method node.render with an argument context, append the result to the nodelist.
call the method style.NOTICE with an argument string "Note that only Django core commands are listed as settings are not properly configured (error: %s).", where '%s' is replaced by self.settings_exception, append the result to usage.
take locale or all_locales, whichever is not empty, respectively, and substitute it for locales.
remove element under '_data' key of obj_dict dictionary, if it exists substitute it for data, if not data is an empty list.
substitute prefix for common_prefix.
define the method from_dict with argument cls and file_dict.
for app_config in reversed list of apps.get_app_configs() elements,
for every taglib in bits without the first element,
if min_value is not None,
for every name in loggers,
if locale_dir is false,
if help_texts is true and f.name is contained in help_texts,
namespaces is an empty dictionary.
define the method compile_function_error with 3 arguments: self, token and e.
NON_FIELD_ERRORS is an string '__all__'.
pieces is an empty list.
if self.activated is boolean True,
return a list containing return values of the function to_py called with an argument val, for every val in value.
call the function new_method_proxy with an argument unicode, substitute the result for __unicode__.
if sys.platform starts with string 'java',
from django.utils import six into default name space.
break from the smallest enclosing loop execution.
call the pyinotify.WatchManager method, assign the result to wm.
return a tuple with 3 elements: copyreg._reconstructor, tuple with 3 elements: self.__class__, object and None, and result of the method self.__getstate__.
substitute field_name for old_field_name.
for every name in filters,
if e.errno does not equals to errno.ENOENT,
derive the class Template form the base class object.
if not,
import module datetime.
try,
get the value under the 'domain' key of the options dictionary, substitute it for self.domain.
call the method text.__html__, return the result.
from django.template.base import TemplateSyntaxError, Library, Node, TextNode, token_kwargs and Variable into default namespace.
if not,
call the function timedelta with an argument seconds as negative time.timezone, return the result.
substitute new_name, without the last 3 elements for new_name.
from . import Error, Tags and register into default name space.
__all__ is a list containing a string 'file_move_safe'.
if command is contained in parse_until,
call the function find_template_loader with an argument loader, append the result to cached_loaders.
return nothing.
if data is instance of Node and data.negated is false, and if data.connector equals conn_type or length of data equals integer 1,
call the function get_template_from_string with 3 arguments: template, origin and template_name, substitute the result for template.
if character '-' is not contained  in lang_code,
return the value under the self.data.month key of the MONTHS_3 dictionary.
self._max_entries is integer 300.
property decorator,
DELETION_FIELD_NAME is a string 'DELETE'.
remove the elements from the 'name' and 'dictionary' keys of the options dictionary, substitute them for project_name and target, respectively.
return wrapper.
define the method close with argument self.
if receiver is an instance of types.FunctionType type,
substitute token.source for e.django_template_source.
call the method apps.get_app_configs, substitute the result for app_configs.
call the method copy.deepcopy with 2 arguments: self._wrapped and memo, return the result.
call the encode function on the Header class instance, created with arguments nm and encoding, substitute the result for nm.
if self.directory_permissions_mode is not None,
get the value under log key of root.manager.loggerDict dictionary, substitute it for logger.
_localtime is None.
return res.
child_loggers is an empty list.
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_object() method'.
get the value under the self.using key of the connections dictionary, call the method close on it.
substitute _itervalues for itervalues.
call the method self.fields.items, for every name and field in return value,
from __future__ import unicode_literals into default name space.
import module os.
define the method error with arguments self and message.
return self.
if token.contents equals string 'else',
split lang_code by '-', substitute the first element of the result for generic_lang_code.
define the method __next__ with an argument self.
convert self.changed_data into boolean, return it.
call the method match.group with an arugument name, substitute the result for toktext.
append block_content to a string 'end', substitute the result for self.verbatim.
substitute self._leftover for output.
call the method __init__ from the base class of the class InlineForeignKeyField, with 2 arguments unpacked list args, and unpacked dictionary kwargs.
try,
if length of app_labels is greater than integer 1 and primary_keys is true,
return value.
call the method handler.addQuickElement with 3 arguments: string 'guid', value under the 'unique_id' key of the item dictionary, and guid_attrs.
define the method _get_model_from_node with arguments self, node and attr.
substitute name for self.name.
try,
get 'exec' attribute from the moves.builtins object, substitute it for exec_.
define the method __init__ with 3 arguments: self, template_string and origin.
if html is true,
substitute to_field_name for self.to_field_name
call the function calendar.isleap with an argument self.data.year, if it evaluates to true,
define the method _text_chars with 5 arguments: self, length, truncate, text and truncate_len.
import module re.
call the method resource.decode with an argument settings.FILE_CHARSET, substitute the result for resource.
import module random.
define the method clear_checkbox_id with 2 arguments: self and name.
call the method self._start_relational_field with an argument field.
call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.
if not,
if value is contained in self.empty_values,
from django.db.migrations.executor import MigrationExecutor into default name space.
get the value under the date_key key of the item dictionary, substitute it for item_date.
* Make sure each model has one field with primary_key=True" as the result. yield string "#
if settings.USE_X_FORWARDED_HOST is true and 'HTTP_X_FORWARDED_HOST' is contained in self.META.
get return value of the field.get_attname function attribute of the obj object, substitute it for value.
if ValidationError, renamed to e, is caught,
m2m_data is an empty dictionary.
if value is an instance of Field class,
call the function write with an argument end.
format string hex_format_string with x, call the method encode on the result with an argument string 'ascii', use the result as an argument for the call to the function binascii.unhexlify, return the result.
define the function model_to_dict with 3 arguments: instance, fields set to None and exclude set None.
call the method parser.compile_filter with an argument second element for bits, substitute the result for parent_name.
default_error_messages is an dictionary with 3 entries: return value of the function _ called with an argument, string 'Enter a list of values.' for 'list', return value of the function _ called with an argument, string 'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice', and return value of the function _ called with an argument string '"%(pk)s" is not a valid value for a primary key.' for 'invalid_pk_value'.
substitute name for handler.name.
self.bcc is an empty list.
from django.utils.encoding import force_text into default name space.
if StandardError, renamed to e, exception is caught,
call the function os.path.dirname with argument full_path, substitute the result for directory.
substitute inverse_match for self.inverse_match.
call the strftime function with argument string "%Y%m%d-%H%M%S" on the return value of the function datetime.datetime.now, substitute the result for timestamp.
define the method __init__ with 2 arguments self and var.
append orig_file to string '#: ', substitute it for new.
if StandardError, renamed to e, exception is caught,
return singular.
define the method set_many with self, data, timeout set to DEFAULT_TIMEOUT and version set to None as arguments.
increment self.fixture_object_count by objects_in_fixture.
pending_references is an empty dictionary.
call the method compile_func with 2 arguments self and token, substitute the result for compiled_result.
define the function urlencode with 2 arguments value and safe set to None.
return boolean True.
substitute lookups for the value under language_code key of the self._reverse_dict dictionary.
define the function get_digit with 2 arguments value and arg.
define the method render with 4 arguments: self, name, value and attrs set to None.
substitute queryset for self._queryset.
define the function indexbytes with 2 arguments buf and i.
if daemonize is true,
call the smart_text function with 2 arguments: return value of the obj._get_pk_val function and string_only set to boolean True, substitute it for value under the 'pk' key of data dictionary.
return self._dimensions_cache.
get the value under the lang_code key of the LANG_INFO dictionary, return it.
substitute doc for func.__doc__.
substitute app_name for self.app_name.
if not,
return an empty string.
if LookupError exception is caught,
manifest is OrderDict class instance, created with tuple of two elements, app_name and list of elements of model_list for which model_installed function returned true, for every app_name and model_list in all_modules.
if attachment is an instance of MIMEBase,
call the method self.configure_custom with an argument config, substitute the result for result.
if m and n are not None,
if mimetype is None,
convert idx to an integer, substitute it or n.
from django.utils.translation import ugettext and ungettext into default name space.
for every i and handler in enumerated iterable handlers,
if sep is None,
if not,
call the method self.widget.decompress with an argument initial, substitute the result for initial.
call the method re.split with 2 arguments: string '\n{2,}' and value, substitute the result for paras.
remove first element from non_capturing_groups, substitute it for start.
decorator function register.filter with 2 arguments string "phone2numeric" and is_safe set to boolean True.
if not,
call the method self.handle_m2m_field with arguments obj and filed.
if shutdown_message is true,
call the method self.get_resolved_arguments with context as an argument, substitute the result for resolved_args and resolved_kwargs.
skip this loop iteration.
decorator function wraps with an argument func.
if print_ is None,
raise an exception parser.error_class with an argument string "Not expecting '%s' as infix operator in if tag.", where '%s' is replaced with self.id.
if match is true,
if col_name is not equal to new_name and field_notes is true,
django.utils import translation into default namespace.
return an instance of Template class, created with 2 arguments: source, origin and name, return the result.
from django.utils.timezone import template_localtime into default name space.
e is an instance of TemplateSyntaxError class, created with an argument msg.
raise and exception InvalidCacheBackendError with string "Could not find config for '%s' in settings.CACHES" as argument, replace '%s' with alias.
define the method to_python with arguments self and value.
if six.PY3 is true,
_standard_context_processors is None.
remove the 'ignorenonexistent' key from the options dictionary, substitute the return value for self.db, if the key doesnt exists substitute boolean False for self.ignore.
if line is true,
values is an empty list.
define the method __add__ with arguments self and other.
if display_num_errors is true,
define the method to_language with an argument self.
call the json.dumps function with 2 arguments: obj and separators set to tuple containing ',' and ':' characters, call the encode method on the result with string 'latin-1' as an argument, return the result.
derive the class CacheClass from the DummyCache base class.
define the method __repr__ with an argument self.
substitute model._meta for opts.
if not,
autodetector is an instance of the MigrationAutodetector class, created with 3 arguments: result of the method loader.project_state, result of the method ProjectState.from_apps with an argument apps and result of the method InteractiveMigrationQuestioner, called with 2 arguments specified_apps set to app_labels and dry_run set to self.dry_run.
_itervalues is a string "values".
params is a list with second element of source as a element.
call the function plural_re.match with an argument t.contents, substitute the result for pluralmatch.
get 'widgets' attribute from the options object, if it exists substitute it for self.widgets, if not self.widgets is None.
import module os.
from django.utils.datastructures import MultiValueDict into default name space.
convert self to a tuple, call the result with 2 arguments: block.name and block.nodelist, substitute the result for block.
if not,
DEFAULT_MIN_NUM is an integer 0.
if in_index-th element of bits equals to string 'in',
otherwise if t.token_type equals TOKEN_COMMENT,
return string 'form'.
from django.utils.html import conditional_escape and format_html into default name space.
import module zipfile.
if code is not None
try,
with self.initLock,
from collections import OrderedDict into default name space.
call the function self._new_gnu_trans with an argument localedir, substitute the result for translation.
call logging.getLogger method with string 'django.request' as argument, store the result in logger.
call the function type with an argument self, on the result call the method __next__ with an argument self, return the result.
from django.utils.six.moves import socketserver into default name space.
remove 'end' key from the kwargs dictionary, if it exists substitute it for end, if not end is None.
try,
check_for_language is lambda function that returns boolean True for every argument x.
define the function exhaust with an argument stream_or_iterable.
if not,
substitute formfield.limit_choices_to for limit_choices_to.
return size.
raise an NotImplementedError with an argument string 'subclasses of NoArgsCommand must provide a handle_noargs() method'.
call the function force_text with an argument text, substitute the result for text.
call the method self.reader_enters.
decorator cached_property,
if not,
raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary, code set to an string 'invalid_choice' and dictionary params with an entry: value for 'value'.
call the method handler.addQuickElement with 3 arguments: string 'category', an empty string and a dictionary with an entry: cat for 'term'.
if self_closing is true or tagname is contained in html4_singlets,
from lib2to3.pgen2 import token into default name space.
call the method o.isoformat, return the result.
define the method render with 2 arguments: self and context.
substitute regex for self.regex.
if elt is an instance of NonCapture class,
if DecimalException exception is caught,
append new line to line, write it to self.stdout stream.
define the function sql_indexes with 3 arguments: app_config, style and connection.
call the method self.resolve with an argument value, return the result.
if ascii value of char is smaller than integer 33 or is equal to integer 127,
import module traceback.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
substitute base_url for self.base_url.
from django.db import connections, router, transaction, models and DEFAULT_DB_ALIAS into default name space.
call the method loader.get_migration with arguments app_label and migration_name, substitute the result for migration.
var_obj is an instance of Variable class, created with an argument var.
call the method self.paginator.validate_number with self.number decremented by 1 as argument, return the result.
if InvalidOperation exception is caught,
try,
substitute warning for self.warning.
 call the Warning function with 4 arguments: string "BooleanField does not have a default value.",
call the method middleware.process_template_response with 2 arguments: request and response, substitute the result for response.
try,
raise an exception,
settings.SITE_ID.
if sixth element of row is not None, substitute it for value under the 'decimal_places' key of the field_params, otherwise, value under the 'decimal_places' key of the field_params is integer 5.
call the self._delete method with argument fname.
derive the class ResolverMatch with object as base class.
append '(' to field_type.
from django.utils.safestring import mark_safe into default name space.
if length of bits is lesser than integer 3 or second element of bits is not equal to string 'as',
define the function run with 5 arguments: addr, port, wsgi_handler, ipv6 set to boolean False and threading set to boolean False.
if stream_or_string is instance of bytes type,
if response.streaming is True,
if prefix is false, and self doesnt have '_callback_str' attribute,
break from the loop execution.
derive the class Serializer from the base.Serializer base class.
from django.utils import baseconv into default name space.
value under f.name key of the dta dictionary is an empty list.
for every field, initial and data in list of tuples tuple containing elements of self.fields, initial and data, respectively,
call the self.set method with key, new_value and version set to version as arguments.
format self.year_field string with name, use it as the key for the data dictionary, substitute the result for y.
define the method temporary_file_path with argument self.
derive the class HttpResponseBadRequest from the HttpResponse base class.
call the function check_for_migrations with arguments app_config and connection.
call the method data.items, for every k and v in the result,
call the method __delitem__ from the base class of the QueryDict class, with an argument key.
call the method self.var1.resolve with 2 arguments: context and boolean True, substitute the result for val2.
call the method Model._meta.get_all_field_names, substitute the result for model_fields.
if not,
substitute second element of args for name.
in string '%s_%d', replace '%s' with new_name and '%d' with num, while the result is contained in used_column_names,
define the method get_json_data with 2 arguments self and escape_html set to boolean False.
 Installing custom SQL for %s.%s model\n" as argument, with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.
if i is equal to integer 0, value under the 'first' key of the loop_dict dictionary is boolean True, otherwise it is False.
substitute col_name for value under the 'db_column' key of the field_params dictionary.
call the function timesince with 2 arguments: value and arg, return the result.
if six.PY3 is true,
convert data into boolean and substitute it for data.
if verbosity is greater or equal to integer 2,
from __future__ import unicode_literals into default name space.
call the __init__ method of the base class of the QueryDict class.
call the method self._convert_to_charset with arguments: header and string 'ascii', substitute the result for header.
if submod is true and return value of the function module_has_submodule called with 2 arguments: result of the function: import_module called with an argument parentmod and submod, evaluates to false.
substitute charset for self.encoding.
extra_params is an instance of the class OrderedDict.
def _get_post method with self class instance as the argument.
if AttributeError exception is caught,
if self.alternatives is true,
return value.
if ValueError exception is caught,
call the method parser.parse with an argument tuple with one element string 'endblock', substitute the result for nodelist.
define the method render_css with an argument self.
define the method nud with 2 arguments: self and parser.
call the self.xml.addQuickElement method with 2 arguments: string 'object' and attr dictionary containing 1 entry: return value of the function smart_text with return value of the method value._get_pk_val as an argument for 'pk'.
if self.file has an attribute 'size',
derive the class RWLock from the object base class.
from django.utils.encoding import smart_text into default name space.
multiply offset by integer -1.
define the method __new__ with 4 arguments mcs, name, bases and attrs.
call the method self.make_key with key and version set to version as arguments, substitute it for key.
raise CommandError exception with "Cannot find a migration matching '%s' from app '%s'.", with '%s' substituted for migration_name and app_label, respectively, as arguments.
for every attr in _urllib_request_moved_attributes,
define the method __init__ with 4 arguments: self, nodelist, parent_name and template_dirs set to None.
substitute absolute value of the exponent for decimals.
if KeyError exception is caught,
help is an string 'Installs the named fixture(s) in the database.'.
call the method closable.close.
_format_modules_cache is an empty dictionary.
from django.core.management.color import color_style and no_style into default name space.
derive the class CommandError from the base class Exception.
call the function smart_text with argument key_value, use the result as an argument for the call to the self.xml.characters method.
subtract year from integer 2000, substitute the result for delta.
substitute variable_name for self.variable_name.
if best_doublecolon_start equals integer 0,
return boolean True.
call the method validate with an argument value from the base class of the class TypedMultipleChoiceField.
import module sys.
if self.activated is boolean False,
call the method serializers.get_public_serializer_formats, substitute the result for ser_fmts if ser_fmt is None, otherwise ser_fmts is a list containing ser_fmt.
if self.app_label is true and app_config.label is not equal to self.app_label,
for every alternative in self.alternatives,
split second element of hextet into parts by ':', append them to new_ip.
convert new_name to a string and append it to string 'number_', substitute the result for new_name.
using_sysrandom is boolean True.
substitute locale_dir for self.locale_dir.
read file fp and substitute the result for msgs.
set the file position pointer at file_pos.
for every form in self call the form.as_table method, join the results in a string, separated by an empty string.
call the method parser.add_option with 3 arguments: string '--traceback', action set to a string 'store_true', and help='Raise on exception'.
from django.utils import lru_cache into default name space.
call the method self._text_chars with 4 arguments: length, truncate, text and truncate_len, return the result.
_anonymous_ is a list containing one string: '_offset_union'.
decrement by length of password, create bytes string with previous result number of characters '\x00', append the result to password.
try,
split ip_str by ':', if last element of the result is not equal to hextet.
if prefix is None,
from django.forms.utils import everything into default name space.
call the function lazy with arguments _get_val and six.text_type, substitute the result for _get_val.
if start is greater than upto,
call the method token.split_contents, substitute the result.
define the function debug with an argument request.
if not,
get attribute piece of the self object, call it and use the result as an argument for the call to the function force_text, append the result to pieces.
substitute lookup_view for original_lookup,
call the function new_method_proxy with an argument str, substitute the result for __str__.
if not,
call the method handler.startDocument.
if f is an instance of ModelFiled, for every f in opts.virtual_fields, append f to a list, substitute the resulting list for sortable_virtual_fields.
call the method self.connection.starttls.
return self.html_name.
call the function get_template with an argument parent, return the result.
import module yaml.
call the fastcgi_help function with an argument string "Invalid combination of host, port, socket.", return it.
for every attachment in self.attachments,
return string 'nd'.
import module warnings.
call the method notifier.read_events.
call the method parser.add_argument with 6 arguments: string '-a', string '--all', action set to 'store_true', dest is 'use_base_manager', default is boolean False and help is a string '(use multiple --exclude to exclude multiple apps/models).'.
substitute result for cache dictionary value under the key key.
return boolean True.
try,
if the value under the 'test_flush' key of the options dictionary exists,
otherwise if vale is an instance of value,
call the method __init__ from the base class of the FileField class, with 2 arguments: unpacked list args and unpacked dictionary.
define the function clear_url_caches.
import module glob.
from django.db.migrations.loader import AmbiguityError into default name space.
otherwise if self.required is false and value is false,
get config dictionary element under 'loggers' key, if it exists substitute it for loggers, if not, loggers is EMPTY_DICT.
substitute '%s' in a string "  Branch %s" with migration.name, use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.
get the value under the 'indent' key of the self.options dictionary, substitute it for indent.
substitute user_function for wrapper.__wrapped__.
call the function get_random_string with 2 arguments: integer 50 and chars, substitute it for value under the 'secret_key' of the options dictionary.
call the function warnings.warn with 2 arguments: "django.utils.tzinfo.FixedOffset will be removed in Django 1.9. " "Use django.utils.timezone.get_fixed_timezone instead." and RemovedInDjango19Warning.
from django.core.urlresolvers import set_script_prefix into default name space.
otherwise if self._meta.fields is true and field is not contained in self._meta.fields,
join to_path and name into a file path, substitute the result for filename.
if six.PY3 is true,
call the method self.nodelist.render with an argument context, return the result.
if sys.warnoptions is false,
finally perform,
from django.template.base import TemplateDoesNotExist into default name space.
if basedirs is empty,
substitute '%s' in string '%s_%s' with id_ and first_select, return it.
return select_html.
define the function mark_safe with an argument s.
call the os.makedirs with argument self.file_path.
define the function b64_hmac with arguments salt, value and key.
convert to an integer first element of the value under the 'content-length' key of the meta_data dictionary, substitute it for content_length.
sum length of self.quertset and integer 1 if self.field.empty_label is not None, or integer 0 if not, return the result.
define the function ugettext with an argument message.
return initial.
define the method _has_changed with arguments self, initial and data.
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
MONTHS is a list with 12 elements: strings 'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', and 'dec'.
return the value under the self.data.month key of the MONTHS dictionary.
from django.db.migrations.state import ProjectState into default name space.
try,
for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
for every d in last element of self.dicts,
read chunk_size bytes from the old_file file, substitute the result for current_chunk.
if old_method is false and new_method is true,
decorator function register.filter with an argument is_safe set to boolean True.
if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
filemsg is a string 'file %s, ', where '%s' is replaced with origin.
define the method __deepcopy__ with 2 arguments: self and memo.
for every form in self call the form.as_ul method, join the results in a string, separated by an empty string.
msg is a string '%sError importing module %s: "%s"', where '%s' is replaced with error_prefix, dotted_path and e, respectively.
for every i and line in enumerated iterable table_output, replace %s in string '
import module operator.
derive the class Command from the BaseCommand base class.
if 'step' attribute of attrs dictionary does not exists, set it to to string 'any'.
if username is None substitute settings.EMAIL_HOST_USER for self.username, if not substitute username for self.username.
substitute self._upload_handlers for handlers.
from django.utils import six and lru_cache into default name space.
from lib2to3 import fixer_base into default name space.
renderer is None.
for every filename in files,
from itertools import chain into default name space.
define the method render with 2 arguments: self and context.
raise an TemplateSyntaxError exception with an argument string "back called without some previous parsing".
define the method handle_entityref with 2 arguments self and name.
yield emitting as result of the generator.
format_locations is an empty list.
from django.conf import settings into default name space.
call the function _ with an argument string 'noon', return the result.
help is a string 'Discover and run tests in the specified modules or the current directory.'.
endless loop,
call the method __deepcopy__ with an argument memo from the base class of the class ChoiceField, substitute the result for result.
define the function get_cookie_signer with an argument salt set to string 'django.core.signing.get_cookie_signer'.
substitute self.fixture_dirs for fixture_dirs.
from django.utils.html import format_html, format_html_join and escape into default name space.
do nothing.
if resolver.urlconf_module is None:
append tuple containing two entries: k and integer 1 to options, for every k in FASTCGI_OPTIONS.
get the value under the key key of the self.cookies dictionary, substitute path for 'path' key of the returned dictionary.
call the method self.fetch_command with first element of options.args as argument, on the result call the method print_help, with 2 arguments: self.prog_name and first element of options.args.
if value under the 'author_name' key of the self.feed dictionary is not None,
MONTHS_ALT is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'alt. month' and 'January' for 1,
define the method __init__ with an argument self.
call the function resolver.resolve_error_handler with status_code as an argument, assign the result to the callback and param_dict, respectively.
raise an ViewDoesNotExist exception with an argument string "Could not import '%s.%s'. View is not callable.", where string '%s' is replaced by mod_name and func_name, respectively.
substitute DateInput for widget.
skip this loop iteration.
substitute file_name for t.
return elements of words joined in a string, separated with whitespaces.
import module warnings.
derive class Command from the BaseCommand base class.
for every key_value in related,
if IOError, renamed to e, exception is caught,
call the method self.as_widget with 3 arguments: instance of a class TextInput, attrs and unpacked dictionary kwargs, return the result.
while factor is greater or equal to integer 0,
do nothing.
call the method __init__ from the base class of the class TextInput, called with an argument attrs.
call the function reloader with wrapped_main_func, args and kwargs as arguments.
if value under the 'load_initial_data' key of the options dictionary is true,
call the function warnings.warn with 2 arguments: string '"requires_model_validation" is deprecated ' 'in favor of "requires_system_checks".' and RemovedInDjango19Warning.
open the file whose name is stored in the value under the 'pidfile' key of options dictionary and mode 'w', with the file descriptor as fp,
call the function StringIO with an argument stream_or_string, substitute the result for stream.
call the function phone2numeric with an argument value, return the result.
return an empty string.
define method readline with self class instance and size set to None.
append 'Z' to time_str, return the result.
if not,
for every handler in settings.FILE_UPLOAD_HANDLERS, add to a list result of the method uploadhandler.load_handler called with arguments handler and self, substitute resulting list for self._upload_handlers.
define the method empty_block_tag with 2 arguments: self and token.
try,
call the method instance of TerminalIPythonApp class, substitute the result for app.
call the method tzinfo.__init__ with an argument self.
call the os.makedirs function with directory and self.directory_permissions_mode as arguments.
call the function force_text with an argument value, substitute the result for value.
for every entry in package_path,
raise an NotImplementedError with an argument string 'subclasses of SyndicationFeed must provide a write() method'.
substitute string " " for space.
match regex time_re with value, substitute the result for match.
for every path in return value of the call to the function gen_filenames with argument only_new set to boolean True,
call the method os.dup2 with 2 arguments: result of the method si.fileno and result of the method sys.stdin.fileno.
call the method self._coerce with an argument data, substitute the result for data.
if self.silent is true,
if confirm is not equal to string 'yes' or string 'no',
define the method _has_changed with 3 arguments: self, initial and data.
if value under the 'liveserver' key of the options dictionary is not None,
final_output is an empty list.
if not,
substitute '%s' in the string " (%s squashed migrations)" with length of replaces filed of graph.nodes element at the plan_node index, append the string to the title.
status_code is an integer 403.
substitute nonlocal_root for tuple root.
define the method __str__ with an argument self.
raise an TemplateSyntaxError exception with an argument string "'firstof' statement requires at least one argument".
__all__ is a tuple of strings: 'Media', 'MediaDefiningClass', 'Widget', 'TextInput', 'EmailInput', 'URLInput', 'NumberInput', 'PasswordInput', 'HiddenInput', 'MultipleHiddenInput', 'ClearableFileInput', 'FileInput', 'DateInput', 'DateTimeInput', 'TimeInput', 'Textarea', 'CheckboxInput', 'Select', 'NullBooleanSelect', 'SelectMultiple', 'RadioSelect','CheckboxSelectMultiple', 'MultiWidget', 'SplitDateTimeWidget' and 'SplitHiddenDateTimeWidget'.
call the function make_key with 3 arguments: args, kwds and typed, substitute the result for key.
return path_info.decode method return value called with UTF_8 as the argument.
from django.core.management.base import BaseCommand and CommandError into default name space.
if pickle.PickleError exception is caught,
decorator function register.filter with an argument is_safe set to boolean True.
substitute value under the f.name key of the error_messages dictionary for value under the 'error_messages' key of kwargs dictionary.
substitute bits without last two elements for bits.
 Failed to install custom SQL for %s.%s model: %s\n" as argument, with all occurrences of '%s' replaced with app_name and model._meta.object_name and e, respectively.
otherwise if value under the 'CONTENT_TYPE' key of hte self.META dictionary starts with 'application/x-www-form-urlencoded',
call the method result.utctimetuple, use the result as an argument for the call to the method calendar.timegm, return the result.
define the method __getitem__ with arguments self and name.
define the method __init__ with 4 arguments: self, context, unpacked list args and unpacked dictionary kwargs.
call the method start_ipython with an argument argv as an empty list.
endless loop,
derive the class ObjectDoesNotExist from the Exception base class.
define the method widget_attrs with arguments self and widget.
define the method add_arguments with 2 arguments self and parser.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
call the method activate with an argument self.timezone.
import memcache.
call the method self._render with an argument context, return the result,
append length of result to non_capturing_groups.
do nothing.
from django.http.cookie import SimpleCookie into default name space.
if klass is not contained in cls.__dispatch,
if name is true, substitute it for function_name, if not get '_decorated_function' attribute from func object, if it exists, substitute __name__ field of the result for function_name, in not, substitute func.__name__ for function_name.
if use_l10n is true, or if use_l10n is None and settings.USE_L10N is true,
substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix.
delete attr.
call the method handler.startElement with 2 arguments: string "rss" and result of the method self.rss_attributes.
if site is contained in sites1,
define the method get with 4 arguments: self, key, default set to None and version set to None.
format string '&%s;' with name, append it to self.fed.
define the function deconstructible with 2 arguments: unpacked list args and unpacked dictionary kwargs.
substitute message.message, message.code, message.params for message, code and params, respectively.
if key_function is callable object,
if fourth element of attr_list and termios.ECHO are both true,
call the function handle_app with 2 arguments: app_config.models_module and unpacked dictionary options.
define the function linebreaks with 2 arguments: value and autoescape set to boolean False.
return self.parent_instance.
call the function allow_lazy with 2 arguments: normalize_newlines and six.text_type, substitute the result for normalize_newlines.
for every message is message,
from django.utils import six into default name space.
substitute kwargs for self.kwargs.
if TypeError exception is caught,
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
call the method path.expanduser with an argument template, substitute it for expanded_template.
if old_style_list is true,
from django.utils.text import smart_split, unescape_string_literal and get_text_list into default namespace.
from django.core.exceptions import ImproperlyConfigured into default name space.
if value under the 'unique_id' key of the item dictionary is not None,
for every option in option_label,
from django.utils.translation import trans_null as trans.
forms_valid is True.
define the function parse_http_date with an argument date.
define the method __init__ with, self, server, params, library, value_not_found_exception as arguments.
call the method field.widget.value_from_datadict with 3 arguments: self.data, self.files, prefixed_name, substitute the result for data_value.
error is an instance of ValidationError created with an argument error.
call the method bmatch.group with an argument integer 1, use the result as an argument for the call to the function context_re.match, substitute the result for context_match.
if self.verbosity is greater or equal to integer 1,
from django.core.serializers.python import Deserializer as PythonDeserializer into default name space.
substitute attrs and choices for self.attrs and self.choices
initial is boolean False.
import imp.
raise an exception.
if self.connector equals conn_type,
decorator stringfilter,
consume_next is boolean True.
if '%s' is contained in settings.TEMPLATE_STRING_IF_INVALID, invalid_var_format_string is boolean True, otherwise it is False.
define the function sql_destroy_indexes with 3 arguments: app_config, style and connection.
if middleware has an attribute 'process_view',
if self.verbosity is greater than integer 0,
define the method as_ul with an argument self.
call the method self.invalid_block_tag with 3 arguments: token, command and parse_until.
derive the class IntegerField from the base class Field class.
define the function unescape_entities with an argument text.
loop_dict and value under the 'forloop' key of the context dictionary are dictionaries with an entry: parentloop for 'parentloop'.
get the value under the key 'locale' of the options dictionary, substitute it for locale.
define the method clean with arguments self and value.
self._cached_loaders is an empty list.
import module sys.
if IndexError exception is caught,
matches is boolean True,
call the method self.clear_checkbox_id with an argument checkbox_name, substitute the result for checkbox_id.
call the function CheckRegistry, substitute the result for registry.
get the position of the file self.file pointer, substitute it for size.
try,
raise an ValueError exception with an argument string 'Unable to configure logger %r: %s' formated with name and e.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
return an instance of NodeList class.
if Exception, renamed to e, exception is caught,
cmp_fmt is None.
call the function io.open with 3 arguments: potfile, string 'a' and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:
call the force_text function with 3 arguments: e.strerror, DEFAULT_LOCALE_ENCODING and strings_only set to boolean True.
if primary_keys is true,
if length of bits is lesser than integer 2,
value is an string '1'.
define the function urlunquote with an argument quoted_url.
return nothing.
existing_headers is a set of lowercase headers for every header in vary_headers.
if value is true,
for every i and widget in enumerated iterable self.widgets, call the function widget.value_from_datadict with 3 arguments: data, files and string created with concatenation of: name, string '_' and i converted into a string, return the results in a list.
convert the first element of the first row of targets to string, append it to the string "  Unapply all migrations: ", use the it as an argument for the call to the self.style.MIGRATE_LABEL method, use the result to cal the self.stdout.write method.
if not,
otherwise if action equals to string "unapply_success".
call the method middleware.process_view with 4 arguments: request, view_func, args and kwargs, substitute the result for result.
if val equals an empty list.
derive the class SelectMultiple from the Select base class.
return self._is_rendered.
substitute CheckboxFieldRenderer for renderer.
substitute attrs for self.attrs.
objects_in_fixture is integer 0.
if not,
DEFAULT_ATTACHMENT_MIME_TYPE is a string 'application/octet-stream'.
join migrations_directory and string "__init__.py" into a file path, substitute it for init_path.
if AttributeError exception is caught.
EMPTY_DICT is an empty dictionary.
otherwise if base_url does not ends with '/' character,
from django.template import loader,  Context and RequestContext into default name space.
in string '%s=%s' replace '%s' with k and return value of the function strip_prefix with an argument printable representation of v, for every k and v in return value of the extra_params.items method, join all results into a string separated by a string ', ', substitute it for field_desc.
if space equals integer 0,
if props is true,
try,
define the method to_python with arguments self and value.
if Exception exception is caught,
define the method back with an argument self.
define the method _get_scheme with self class instance as argument.
otherwise if bytes is smaller than GB,
return the value under the language_code of the self._regex_dict dictionary.
from itertools import chain into default name space.
call the function re.compile with 2 arguments: raw string '^https?://\[?\w' and re.IGNORECASE, substitute the result for simple_url_re.
call the function urlsplit with an argument value, assign the result to scheme, netloc, path, query and fragment, respectively.
define the method __eq__ with arguments self and other.
if self.number equals to self.paginator.num_pages,
call the function iri_to_uri with an argument url, substitute the result for self.url.
define the method label_tag with 4 arguments: self, contents set to None, attrs set to None and label_suffix set to None.
call the method self._assert_mutable.
convert protocol to lowercase, use it as a key to get a value from the ip_address_validator_map dictionary, return it.
from django.conf import urls into default name space,
get the value under the 'symlinks' key of the options dictionary, substitute it for self.symlinks.
if not,
call the method MONTHS.index with 6 arguments: year, month, day, hour, min and sec, substitute the result for result.
import module re.
call the django.setup method.
utf8_charset.body_encoding is None.
append migration.name to string ' - ', write it to self.stdout stream.
tpl is an string "DTDForbidden(name='{}', system_id={!r}, public_id={!r})".
substitute new for self.mod.
if TemplateLoader has an attribute 'load_template_source',
otherwise if var is None,
return boolean True.
if value is an instance of six.text_type class,
return self._container converted into a iterable.
for every arg in s, call the function force_text with arg, encoding, strings_only and errors as arguments, join the result in a string separated by whitespaces, substitute it for s.
Meta is an instance of class with name 'Meta', parent base class and fields attrs.
substitute every '%s' in string '%s<li>%s%s</li>' with indent, with result of the function escaper called with an argument: result of the function force_text called with an argument title, and with sublist, append the string to output.
substitute name and value for self.name and self.value.
define the method __str__ with an argument self.
subclass is a class named Migration, sub classed from migrations.Migration base class, with fields dependencies set to an empty list, dependencies set to new_operations and replaces set to replaces.
call the method field.clean with an argument field_value, append the result to clean_data.
define the method close with argument self.
substitute the value under the 'errlog' key of options dictionary for value under the 'err_log' key of daemon_kwargs dictionary.
zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6, and fileobj set to zbuf.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
call the method self.indent with argument integer 2.
if message is an instance of dict type,
opts is a tuple created out of elements s, for every s in styles is s is in the keys of the opt_dict dictionary.
if Exception exception is caught,
substitute self._regex for regex.
substitute message.error_dict for message.
define private method __str__ with argument self.
if not,
klass.__new__ is a static method of the function __new__.
substitute fist and second element of exc_info for exctype and value, respectively.
import module warnings.
from django.forms.utils import from_current_timezone and to_current_timezone into default name space.
call the method fp.write with an argument string '%d\n", with '%d' replaced by os.getpid function return value.
call the key.lower method for every key in self.extra_headers, join the results into a header_names.
for every item in self.items,
target is a list containing tuple with two elements app_label and migration.name.
parts is an empty list.
value under the resultclass key of the cls.__dispatch dictionary is an empty dictionary.
define the function get_language.
do nothing.
define the method _convert_to_charset with 4 arguments: self, value, charset and mime_encode set to boolean False.
if not,
read file fp, call the method decode on the result with an argument settings.FILE_CHARSET, return tuple containing 2 elements, previous result and filepath.
if only_django,
if index is not None,
join app_config.path and 'locale' into a valid directory path, separated by '/', append it to basedirs.
if ValueError exception is caught,
if s is not an instance of the object six/string_types,
call the method self.validate with an argument value.
if not,
do nothing.
from django.utils import archive into default name space.
if value under the 'no_color' key of the options dictionary.
get the value 'allow_cascade' key of the options dictionary, if it exists substitute it for allow_cascade, otherwise allow_cascade is boolean False.
from django.conf import settings into default name space.
call the callback function with request and dictionary argument param_dict as the arguments, substitute it for response.
for every chunk in field_stream,
for every sql in return value of the function connection.creation.sql_for_pending_references called with arguments: model, style, and pending_references append sql to the string '-- ', put the results in a list, extend alter_sql with the result.
yield obj, as an return value of the generator.
return value.
substitute the return value of the function abspathu with self.base_location as argument for self.location.
call the method handler.addQuickElement with 2 arguments: string 'uri' and value under the 'author_link' key of the item dictionary.
define the method tzname with 2 arguments: self and dt.
if self.is_bound is false,
define the method chunks with arguments self and chunk_size defaulting to None.
if TypeError, renamed to te, exception is caught,
derive the class Field from the base class object.
if not,
do nothing.
substitute record.request for request.
define the method _reverse_with_prefix with arguments self, lookup_view, _prefix, unpacked list args and unpacked dictionary kwargs.
try,
substitute dt.year for year.
if i is greater than or equal to length of subject,
from email.utils import formatdate,  getaddresses,  formataddr and parseaddr into default name space.
append templatetag_module to _templatetags_modules.
from django.db import models into default name space.
return func.
if urlconf_name is not an instance of six.string_types class,
open out_log file in append mode with buffering size of the input buffer, substitute the result for sys.stdout.
define the method fastcgi_help with an argument message set to None.
if six.PY3 is true,
self.day_none_value is a tuple containing 2 elements: integer 0 and third element of empty_label.
do not perform the following only if bits.scheme and bits.netloc are both true,
from django.utils.deprecation import RemovedInDjango20Warning into default name space.
sum max_num and DEFAULT_MAX_NUM, substitute the result for absolute_max.
if ValueError exception is caught,
increment self.buffer by chunk.
join top_dir, relative_dir and return value of the function filename.replace called with 2 arguments: base_name and name, into a file path, substitute it for new_path.
from django.utils.encoding import python_2_unicode_compatible into default name space.
call the message_from_string function with an argument content, substitute the result for content.
substitute return value of function no_style for style.
if template starts with a string 'file://',
define the method css_classes with 2 arguments: self and extra_classes set to None.
write ']' to the self.stream file stream.
for every bytes in stream,
from django.utils import six into default name space.
call the operator.add on the values of the self object converted into a dictionary, until it is reduced to a single value, return it.
__all__ is a list containing a string "runfastcgi".
if version is None,
substitute arg converted into an integer for length.
call the method _format_modules_cache.setdefault with 2 arguments: lang and list created out of the results of the function, iter_format_modules called with 2 arguments: lang and settings.FORMAT_MODULE_PATH, substitute the result for modules.
call the function handle_extensions exts, substitute self.extensions.
otherwise if query has an attribute 'items',
call the method block_context.add_blocks with an argument self.block.
if script_url is true,
derive the class DateTimeField from the base class BaseTemporalField class.
self.keyOrder is an empty list.
substitute hlen for dklen.
define the method add_item_elements with 2 arguments, handler self and item.
add model to models set.
if Exception exception is caught,
if not,
call the function get_script_prefix, substitute the result for prefix.
raise an ImproperlyConfigured exception wiht an argument string 'Command %s defines both "requires_model_validation" ' 'and "requires_system_checks", which is illegal. Use only "requires_system_checks".', replace '%s' for self.__class__.__name__.
otherwise if bytes is smaller than MB,
if text is an instance of SafeData, safe_input is boolean True, otherwise is boolean False.
define the method previous_page_number with an argument self.
substitute RadioChoiceInput for choice_input_class.
subtract third element of tupl from length of second element of tupl, substitute the result for units.
if ip_str starts with ':, but it doesnt starts with '::', or if ip_str ends with ':, but it doesnt ends with '::',
try,
get the value under the template_name key of the self.cache_key dictionary, if it exists, substitute it for key, if not, substitute template_dirs for key.
aise and exception InvalidCacheBackendError with string "Could not find backend '%s': %s" as argument, replace '%s' with backend and e, respectively.
if callback is of instance types.FunctionType,
call the method self.__cast, return the hash value of the result.
kwargs_safe is a dictionary created for every k and v in result of the function six.iteritems called with an argument kwargs, with value result of the conditional_escape function called with an argument v for key k.
append character '/' to the base_url.
if new_method is false and old_method is true,
call the method self._populate.
call the method os.path.basename with an argument candidate, is result is contained in targets,
if six.PY3 is true,
if app_config.models_module is None,
if autoescape is false, if value is an instance of SafeData,
define the method id_for_label with arguments self, name, field, value, val, choices and none_value.
if an exception occurred,
call the method self.filter_expression.resolve with an argument context, substitute the result for output.
define the method __init__ with 4 arguments: self, permitted_methods, unpacked list args and unpacked dictionary kwargs.
convert self.use_ipv6 to boolean, substitute it for self._raw_ipv6.
from django.utils import six into default name space.
substitute name for new.
instantiate class Decimal with string '1.0' as argument, divide it by product of instance of Decimal class created with integer 10, and absolute value of p, substitute the result for exp.
get 'name' attribute from the file object, if it doesnt exists use None, substitute it for name.
call the method parser.add_argument with 5 arguments: string '--no-initial-data', action set to string 'store_false', dest set to string 'load_initial_data', default set to boolean True, and help as a string 'Tells Django not to load any initial data after database synchronization.'
call the method self.handle_uncaught_exception with request, resolver and return value of the function sys.exec_info as the arguments.
return the result of the method self._html_output, called with 5 arguments: normal_row to a string, '<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>', error_row set to a a string '<li>%s</li>', row_ender set to a string '</li>', help_text_html set to a string, ' <span class="helptext">%s</span>', and errors_on_separate_row set to boolean False.
define the method add_prefix with arguments self and prefix.
if arg is true,
if not,
define the method __bool__ with an argument self.
define the method extract with 2 arguments: self and to_path set to an empty string.
constant_string is a raw string "(?:%(i18n_open)s%(strdq)s%(i18n_close)s|%(i18n_open)s%(strsq)s%(i18n_close)s|%(strdq)s|%(strsq)s)", where 'strdq' is replaced with '"[^"\\]*(?:\\.[^"\\]*)*"', 'strsq' is replaced with "'[^'\\]*(?:\\.[^'\\]*)*'", 'i18n_open' is replaced with return value of function re.escape called with an argument string '_(', 'i18n_close' is replaced with return value of function re.escape called with an argument string ')'.
call the function get_resolver with an argument urlconf, substitute the result for resolver.
call the method self.xml.endElement with an argument string 'field'
_fields_ is a list containing 2 tuples: first tuple contains: string 'Offset' and DWORD, second contains: string 'OffsetHigh' and DWORD.
convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'true', 'yes' or 't',
append string " Got this from the '%s' variable." to error_msg, where '%s is replaced with self.parent_name.token.
decorator stringfilter,
if not,
substitute model._meta for opts.
do nothing.
import module signal.
try,
call the method self.validate with an argument display_num_errors set to boolean True.
define lambda function that returns self.file.tell field, use it as an argument for property function, put the result in tell.
from django.core.exceptions import MiddlewareNotUsed, PermissionDenied and SuspiciousOperation into default name space.
if ext doesnt start with '.' character,
define the method utcoffset with 2 arguments self and dt.
return arg.
return res.
return self._request.
define the method upload_handlers with an argument self.
return name converted to a string and val.
if s equals a string '"',
from __future__ import unicode_literals into default name space.
if six.PY2 is true,
raise an VariableDoesNotExist exception with an argument string "Failed lookup for key [%s] in %r", where '%s' is replaced with bit and '%r' is replaced with current.
call the function  six.iteritems with an argument blocks, for every name and block in result,
derive the class StopFutureHandlers from the UploadFileException base class.
try,
attachment is an instance of a class SafeMIMEMessage, created with the arguments content and subtype.
if ImportError exception is caught,
convert self to a list and return it.
derive the class FilterNode from Node base class.
define method clear_cdata_mode, with self class instance as an argument.
try,
define the function lazy_number with 4 arguments: func, resultclass, number set to None and unpacked dictionary kwargs.
append a tuple with 2 elements: f and f with first occurrence of the path replaced with an empty string, to self.choices.
call the function modelform_factory with 10 arguments: model, form as form, fields as fields, exclude as exclude, formfield_callback as formfield_callback, widgets as widgets, localized_fields as localized_fields, labels as labels, help_texts as help_texts and error_messages as error_messages, substitute the result for form.
return a tuple with 2 elements: integers 1 and 0.
from django.utils import six into default name space.
if model has an 'natural_key' attribute,
call the function conditional_escape with an argument arg, call the method join on the result with an argument value, substitute the result for data.
return value.
while field.rel is not None,
self.stream is None.
define the method close with an argument self.
if self._wrapped is empty,
from decimal import Decimal, InvalidOperation, Context and ROUND_HALF_UP into default name space.
call the function os.path.basename with argument name, substitute the result for name.
define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
root is a list with elements: root, root, None and None.
define the method clear with argument self.
if css_classes is true,
define the method utcoffset with 2 arguments: self and dt.
choices is an property object of this class where _get_choices is a getter and _set_choices is a setter function.
delete the entry of self.cleaned_data dictionary under the key field.
call the method parser.parse_args with an argument args set to args, substitute the result for defaults.
if length of t is greater than integer 1,
decorator function register.filter with an argument is_safe set to boolean True.
call the method f.close.
if widgets is not None,
call the method __deepcopy__ from the base class of the class MultiWidget, with an argument memo, substitute the result for obj.
if f.name is contained in cleaned_data,
decorator decorator.
define the function get_language_from_path with 2 arguments: path and strict set to boolean False.
substitute filter_expr and nodelist for self.filter_expr and self.nodelist, respectively.
append name to self._changed_data.
evaluate the function force_str with key as the argument, substitute it for key.
if not,
for every p in plist,
delete the _serializers dictionary entry at the format key.
call the function get_commands, call the method keys on the result, substitute sorted result for usage.
convert return value of the function time.time to an integer, increment timeout by it.
if fields is true and f.name is not contained in fields,
yield node as an return value of a generator.
call the method self._archive.namelist, substitute the result for namelist.
classmethod decorator,
define the method __exit__ with 4 arguments self, exc_type, exc_value and traceback.
call the function get_connection with argument fail_silently set to fail_silently, substitute it for self.connection.
derive class CachedDnsName from the object base class.
call the method cursor.close,
raise CommandError with an argument string 'Unknown app in excludes: %s', where '%s' is replaced with exclude.
call the method dt.timetuple, substitute the result for timetuple.
try,
resolved_kwargs is dictionary with elements: return value of the method v.resolve called with an argument context, for k, for every k and v in return value of the method self.kwargs.items.
call the function ugettext with an argument string "%s PB", substitute '%s' with the result of the call to the function, filesize_number_format with result of division of bytes by PB as an argument, substitute the result for value.
call the function ignore with an argument pattern, for every pattern in ignore_patterns, if any resulting element is true, return boolean True, otherwise return boolean False.
define the method __bool__ with argument self.
self._container is a list containing element value.
break the execution of the smallest enclosing loop.
if token is None,
if error_message is not None,
if app_label is not contained in executor.loader.migrated_apps,
open file old_file_name in read bytes mode, with file descriptor as f,
call the method self.field.widget.subwidgets with 3 arguments: self.html_name, return value of the method self.value and attrs, for every subwidget in the result,
replace '%s' in string '%s: %s' with e.__class__.__name__ and e, respectively, write it to the stderr stream.
if OSError exception is caught,
from importlib import import_module into default name space.
i is integer 365.
substitute max_digits and decimal_places for self.max_digits and self.decimal_places.
define the method __str__ with an argument self.
value under the INITIAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class, created with an argument widget set to HiddenInput.
return decorator.
call the method return self.format with an argument string 'D, j M Y H:i:s O', return the result.
if AttributeError exception is caught,
return self.
from django.utils import six into default name space.
kwargs is an empty dictionary.
call the method self.handle with 2 arguments unpacked list args and unpacked dictionary options, substitute the result for output.
call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
call the method parser.add_argument with 3 arguments: string 'args', nargs set to argparse.REMAINDER and help as a string 'Various KEY=val options.'
call the method zipfile.ZipFile.read with 2 arguments: self and first element of the result of the self.namelist method.
value under the 'unique' key of the extra_params dictionary is boolean True,
call the function Charset.Charset with argument string 'utf-8', substitute the result for utf8_charset.
import module os.
from django.http import QueryDict into default namespace.
if pk is an instance of OneToOneField or ForeignKey classes,
increment stats dictionary value under the MISSES key by integer 1.
call the function get_format with an argument string 'DECIMAL_SEPARATOR', substitute the result for decimal_separator.
if boundary is false or return value of the method cgi.valid_boundary called with an argument boundary evaluates to false,
substitute style_func for self.style_func.
get the value under the 'filename' key of the params dictionary, if it is true,
do nothing.
if not,
if self.addr is true,
compile the regex "^https?://" with an argument re.I, substitute it for absolute_http_url_re.
return boolean True.
from django.core.management import call_command into default name space.
derive the class PermissionDenied from the Exception base class.
append value under the 0 key of the opt_dict dictionary to code_list.
return self.
skip this loop iteration,
call the method format_string.format with 2 arguments: unpacked list args_safe and unpacked dictionary kwargs_safe, use the result as an argument for the call to the function mark_safe, return the result.
if option_label is an instance of list or tuple,
_urllib_error_moved_attributes is a list with 3 elements: result of the call to the function MovedAttribute with 3 arguments: strings "URLError", "urllib2", "urllib.error", result of the call to the function MovedAttribute with 3 arguments: strings "HTTPError", "urllib2", "urllib.error" and result of the call to the function MovedAttribute with 3 arguments: strings "ContentTooShortError", "urllib", "urllib.error".
substitute RadioFieldRenderer for renderer.
append string '0000' to new_ip.
params is a dictionary with 2 initial entries: self.max_length for 'max' and length of file_name for 'length'.
call the method parser.compile_filter with an argument, in_index incremented by one, and used to index parser.compile_filter, substitute the result for sequence.
sign is an empty string.
boolean_attrs is an empty list.
return t.
call the function curry with 2 arguments: _proxy_method and method set to six.text_type.encode, substitute the result for encode.
return left.
define the method __eq__ with arguments self and other.
if opts.fields equals ALL_FIELDS,
define the method unparsed_entity_decl with arguments self, name, base, sysid, pubid and notation_name.
decorator deconstructible,
convert bit to an integer and use it as index to obtain an element for list current, substitute it for current.
for every key in keys,
from django.template.loader import BaseLoader into default name space.
table_names is an empty list.
prepend '.' to the i-th element of the ext_list.
return boolean False.
define the function _lazy_proxy_unpickle with 4 arguments: func, args, kwargs and unpacked list resultclasses.
for every field in model._meta.fields,
if title is an instance of list or tuple,
define the method rendered_content with an argument self.
if not,
LOCK_SH is a integer 0.
if TypeError exception is caught,
otherwise if self.verbosity is greater than integer 0,
if len_values is smaller than integer 1,
try,
if self.requires_system_checks is true and values under the 'skip_validation' and 'skip_checks' keys of the options dictionary are false,
define the method __init__ with self, server and params as arguments.
if not,
if block is None,
substitute i for value under the 'counter0' key of the loop_dict dictionary.
try,
if callback doesnt have '__name__' attribute,
return other_dict.
define the method _get_media with an argument self.
if self.data.minute equals integer 0 and self.data.hour equals integer 12,
call the DefaultStorage method, substitute the result for default_storage.
define the function slugify with an argument value.
call the method parser.find_filter with an argument filter_name, substitute the result for filter_func.
input_type is None.
if value is contained in self.empty_values,
decorator function register.filter with an argument is_safe set to boolean True.
open writer.path file in write mode, with the file descriptor as fh, perform the following,
import module hashlib.
call the method value.ljust with an argument, arg converted into a integer, return the result.
substitute string 'checked' for value under the 'checked' key of final_attrs dictionary.
substitute params without the first element for params.
return s.
substitute the self.DEFAULT_CHUNK_SIZE for chunk_size.
reverse element order of dicts, join them in a string, substitute the result for number.
join into a string permitted_methods, separated by string ', ', substitute it for value under the 'Allow' key of the self dictionary.
derive the class Iterator from the base class object.
call the function force_text with 3 arguments: file_name, encoding and errors set to string 'replace', substitute the result for file_name.
define initialization method __init__, with self class instance as the argument.
call the method loader.select_template with an argument template, return the result.
if part is contained in PALETTES,
from __future__ import unicode_literals into default name space.
decrement t by integer 1,
if num_repl is greater than integer 0,
if self.verbosity is greater than integer 1,
if VariableDoesNotExist exception is caught,
define the method __init__ with arguments: self, cmd and unpacked dictionary kwargs.
is_usable is boolean True.
define the method read with an argument self.
define the method _should_delete_form with an argument self.
substitute conditional_escape for escaper.
append f to file_field_list.
for every item in values,
return self._cached_loaders.
call the method handler.addQuickElement with 2 arguments: string 'author' and value under the 'author_email' key of the item dictionary.
self.tags is an empty dictionary.
call the signals.request_started.send method with sender set to self.__class__ as argument.
if self.domain equals to string 'djangojs',
raise an CommandError exception with an argument string "Unknown command: %r", with '%r' replaced by name.
__D is a raw string '(?P<day>\d{2})'.
call the method stream_or_string.decode with string 'utf-8' as argument, substitute the result for stream_or_string.
otherwise if ch equals a string 'P',
define the method _parse_header with an argument line.
get the value under the app_label key of the directory_created dictionary, if exists and it is false,
call the function getInnerText with an argument node, call the strip method on the result, substitute the result for field_value.
try,
do nothing.
if not,
do nothing.
if not,
define the method __call__ with 2 arguments: self and f.
define the method get with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
from collections import OrderedDict into default name space.
define method value_encode with self class instance and val as arguments.
from django.utils import six into default name space.
call the method self.merge with an argument translation.
call the function re.compile with an argument raw string "(?<!%)%(?!%)", substitute the result for one_percent_re.
for every key in self.keyOrder,
define the method __getstate__ with an argument self.
derive the class Formatter from object base class.
from __future__ import unicode_literals into default name space.
return result
if length of bits is not equal to integer 2,
if fname file path exists,
raise an CommandError exception with an argument string "errors happened while running xgettext on %s\n%s", where '%s' are replaced by sel.file and errors, respectively.
otherwise if options equals 'only',
if t.token_type equals TOKEN_BLOCK and t.contents equals 'endcomment',
return first element of t converted to lowercase and second element of t, as a tuple.
define the method _set_queryset with 2 arguments: self and queryset.
for every node in self,
if app_config.models_module is None,
do nothing.
call the function quote with return value of the evaluated function force_bytes(iri), and with safe set to bytes string "/#%[]=:;$&()+,!?*@'~", return the result.
if length of bits is greater or equal to integer 4 and second last element of bits equals sting 'from',
write a '[' to the self.stream file stream.
split value into two parts by decimal_separator, assign the result to value and decimals.
if not,
if item is contained in the list of the elements of self, return boolean True, otherwise return boolean False.
call the function force_bytes with an argument secret, substitute the result for secret.
define the method next_token with an argument self.
define the method values with an argument self.
if not,
exit program with code integer 0.
call the function vars with an argument options, substitute the result for cmd_options.
raise an AttributeError with an argument string "This QueryDict instance is immutable".
call the function _trans.deactivate, return the result.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a delete() method'.
call the function six.text_type with an argument value, use the result as an argument for the call to the function mark_safe, return the result.
if settings.DEBUG is true, return boolean False, otherwise return boolean True.
get config dictionary element under 'filters' key, if it exists substitute it for filters, if not, filters is EMPTY_DICT.
if not,
if iterator is None,
define the method created_time with arguments self and name.
for field_name every obj in list created from the elements of the return value of the function six.iteritems with an argument attrs. if obj is an instance of Field, append to a list a tuple with 2 elements: field_name, and poped value under the field_name key of the attrs dictionary, substitute the resulting list for fields.
try,
define the method widget_attrs with arguments self and widget.
call the method other_dict.lists, for every key and value_list in result,
call the function force_text with 3 arguments: field_name, encoding and errors as a string 'replace', substitute the result for field_name.
_func_code is a string "__code__".
define the method __init__ with 2 arguments: self and loaders.
if other_dict is an instance of MultiValueDict.
fill_to is an integer 7.
convert root.manager.loggerDict into a list, substitute it for existing.
from django.views import debug into default name space.
call the function module_to_dict with an argument global_settings, substitute it for default_settings.
call the function force_text with arguments value and strings_only set to boolean True, substitute the result for unicode_value.
if not,
derive the class Truncator form the SimpleLazyObject class.
if self does not have '_files' attribute,
update self.__dict__ dictionary with obj_dict.
call the self._createdir method.
if TypeError exception is caught,
substitute complain for remove.
call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the self.feed dictionary.
changed is boolean True.
define the method self and name.
for every role in termcolors.PALETTES list at the index termcolors.NOCOLOR_PALETTE,
if endblock.contents is not contained in acceptable_endblocks,
substitute length of list_ for list_length.
call the method _parse_header with an argument line, assign the result to name and tuple with 2 elements: value and params, respectively.
in string '-W%s' replace '%s' with o for every o in sys.warnoptions, put the result into a list, append the list to a list containing sys.executable, append sys.argv to the end of the resulting list, substitute the result for args.
return parser
lock is an instance of RLock class.
extra_files is an empty list.
call the method self.as_ul, return the result.
call the method logging.captureWarnings with an argument boolean True.
for every value in initial call the function force_text with an argument value, add the results into a set, substitute the resulting set for initial_set.
if first element of sys.version_info equals integer 2, PY2 is boolean True, otherwise it is boolean False.
substitute index for self.index.
if interactive is true,
define the method _has_changed with arguments self, initial and data.
define the method value with an argument self.
call the parser.add_argument method with the string '--database', default set to DEFAULT_DB_ALIAS and help containig string, 'Nominates a database to print the SQL for. Defaults to the "default" database.' as the arguments.
derive the class Command from the BaseCommands base class.
define the method __wrapper__ with 3 arguments: self, unpacked list args and unpacked dictionary kw.
try,
substitute tup for elements of self.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
if six.PY3 is true,
define the method _update_errors with 2 arguments: self and errors.
call the method self.get_queryset, return the length of the result.
help is a string "Deprecated - use 'migrate' instead.".
call the function force_text with an argument text, substitute the result for text.
queryset is an property object of this class, with _get_queryset getter and _set_queryset setter functions.
compile regex from string '^[a-z_][a-z0-9_]*$' in case insensitive mode, substitute it for IDENTIFIER.
get the value under the self.name key of the self.form.errors dictionary, if the key exists, return it, if not evaluate the method self.form.error_class and return the result.
import module datetime.
call the method self.choice_input_class with 5 arguments: self.name, self.value, result of the method self.attrs.copy, choice and idx, return the result.
return the first element of the return value of the call to the self._det_image_dimensions method.
param is None.
try,
define the function make_style with 2 arguments: opts set to an empty tuple and unpacked dictionary kwargs.
define the function divisibleby with 2 arguments value and arg.
for every item in sorted_items,
call the method pytz.timezone with an argument timezone, substitute the result for _active.value.
derive the class PageNotAnInteger from the InvalidPage base class.
call the function formset.is_valid, if it evaluates to false,
if arg is an instance of Promise class,
if path is None,
for every app and names in key, value tuple pairs of conflicts dictionary join names into a string separated by commas, in "%s in %s" substitute '%s' with names string and app, respective, join all the previous pairs into a string separated by ';', substitute it for name_str.
substitute style.ERROR for style.ERROR_OUTPUT.
from importlib.util import find_spec as importlib_find.
if self has an 'error_dict' attribute,
raise an base.DeserializationError exception with string "<field> node is missing the 'name' attribute" as argument.
import module tempfile.
otherwise if value is boolean False, string 'False' or string '0'
for every d in self.dicts,
substitute self.template_with_initial for template.
assign obj to the obj field of self instance of this class.
substitute self.regexes for regexes.
import module importlib.
define the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and name.
import module os.
define the function int_to_base36 with an argument i.
if years is true,
if self.path equals other.path, return boolean True, if not return boolean False.
if r ends with string '+00:00',
substitute settings.DEFAULT_CHARSET for self._charset.
define the method add_prefix with 2 arguments: self and field_name.
call the function handle_extensions with 2 arguments: value under the 'extensions' key of the options dictionary, and ignored as an empty tuple, convert the result into a tuple and substitute it for extensions.
get the value under the 'localize' key of the kwargs dictionary, if it is true and self.widget equals to NumberInput,
import module glob.
split t.contents by '|' symbol, substitute the result for parts,
define the method get_many with 3 arguments: self, keys, and version set to None.
call the function lazy with 2 arguments: gettext and str, substitute gettext_lazy.
if not,
append truncate to text, return the result.
from django.utils.encoding import smart_text into default name space.
return nodes.
call the method self.add_truncation_text with 2 arguments: elements of words joined in a string, separated with whitespaces, and truncate, return the result.
join self.namespaces into a string separated with character ':', substitute it for self.namespace.
substitute length and mime_type for self.length and self.mime_type.
for every var in loopvars,
if not,
from django.utils.ipv6 import is_valid_ipv6_address into default name space.
remove first 7 elements form template.
call the function load_command_class with arguments: app_name and name, substitute the result for command.
call the method parser.add_argument with string '--noinput', action containing string 'store_false', dest set to string 'interactive', default set to True, help containing string 'Tells Django to NOT prompt the user for input of any kind.' as arguments.
define the method __repr__ with an argument self.
substitute item_date for latest_date.
define the method handle_charref with 2 arguments self and name.
define the method upload_complete with argument self.
if OSError exception is caught,
call the method connection.cursor, with the result renamed to cursor, perform the following,
if self.is_bound is false,
do nothing.
for every i and handler in enumerated iterator self._upload_handlers,
from django.utils.six.moves.urllib.parse import quote into default name space.
if name equals a string 'regex',
deifne the method __init__ with 5 arguments: self, class_name, old_method_name, new_method_name and deprecation_warning.
substitute memoryview for memoryview.
do nothing.
call the method path.normpath with an argument expanded_template, substitute it for expanded_template.
left justify value under the 'microsecond' key of the kw dictionary, in the field of width 6, fill the rest with '0', substitute the result for value under the 'microsecond' key of the kw dictionary.
all_date_checks is union of all_date_checks set and date_checks set.
define the function get_wsgi_application.
from django.conf import settings into default name space.
call the method json.dumps with a dictionary generate with an expression as an argument, return value of the function e.get_json_data, with an argument escape_html for f, for every f and e in list of tuples of self dictionary key, pair entries, return the result.
call the function get_language_from_path with an argument request.path_info, substitute it for lang_code.
from django.utils import six into default name space.
if self.invoked_for_django is false,
define the funtion _generate_cache_header_key with key_prefix and request as arguments.
call the function lazy_number with 5 arguments: ungettext, six.text_type, singular set to singular, plural set to plural, and number set to number, return the result.
if self is an instance of nodetype,
import module time as _time.
call the function trim_whitespace with an argument message, substitute the result for message.
imported_objects is an empty dictionary.
define the method __init__ with 3 arguments: self, language and deactivate set to boolean False.
if data is contained in seen_data,
try
raise an TemplateDoesNotExist exception with an argument name.
self._post_parse_error is boolean True.
slice language from (p+1)-th index to the end, calculate the length of the obtained segment, if it is greater than integer 2,
call the function apps.get_app_configs, for every app_config in result,
if settings.TEMPLATE_DEBUG is true and origin is None,
call the method s.decode with encoding and errors as the arguments, substitute the result for s.
return an instance of a TemplateTagNode class, created with an argument tag.
if construct is true,
get _assertRegex attribute of the self object, call the result with 2 arguments: unpacked list args, and unpacked dictionary kwargs, return the result.
return an empty string.
substitute fcntl.LOCK_NB for LOCK_NB.
if second element of sys.version_info is smaller than or equal to integer 1,
define the method __init__ with 3 arguments: self, initlist set to None and error_class set to None.
if value is an instance of datetime.datetime,
if check is not contained in self.registered_checks.
run_syncdb is boolean True.
if fifth element of row is not None, substitute it for value under the 'max_digits' key of the field_params, otherwise, value under the 'max_digits' key of the field_params is integer 10.
if self.old_timezone is None,
define the function get_system_encoding without the input arguments.
substitute type.__init__ for __init__.
if any element in the return value of the e.is_serious method is true, and if return value of the method e.is_silenced is false, for every e in all_issues,
otherwise id change equals to I18N_MODIFIED,
output_transaction is boolean True.
call the method self.fetch_command with an argument command, call the method run_from_argv on the result with an argument self.argv.
alternatively, if six.PY3 is true check if message does not have an attribute 'message', if six.PY3 is false, check if message doesnt have an attribute 'code', perform the following,
if not,
has_bz2 is boolean False.
define the method __copy__ with an argument self.
nodelist is an empty list.
from django.utils.encoding import force_st into default name space.
call the function locks.lock with fd and locks.LOCK_EX as arguments.
call the method self._archive.list.
DOTS is a list with 6 elements: strings '&middot;', '*', '\u2022', '&#149;', '&bull;' and '&#8226;'.
define the method render with 2 arguments: self and context.
try,
if '.' is contained in words or '@' is contained in word or ':' is contained in word,
substitute varlist for self.varlist.
from __future__ import unicode_literals into default name space.
append tuple with 2 elements: i and value under the ORDERING_FIELD_NAME key of form.cleaned_data dictionary to self._ordering.
substitute first element of row for column_name.
return an dictionary containing 1 entry: settings.MEDIA_URL for 'MEDIA_URL'.
substitute first element of parts for view.
define the method render_option with 4 arguments: self, selected_choices, option_value and option_label.
get the field.rel.field_name from the obj, substitute it for obj_pk.
get the directory name of filename, substitute it for dirname.
call the function re.compile with an argument raw string '\r\n|\r', substitute the result for re_newlines.
return a string '%06d' formated with self.data.microsecond.
_empty_value is None.
define private method __ne__ with self class instance and other as arguments.
bytes_read is integer 0.
from django.utils import six into default name space.
if not,
convert elements of self into a list, return the its printable representation.
call the method self.itervalues, return list of results.
call the method app_list.items, use the result as an argument for the call to the function sort_dependencies, for every model in result,
call the method type.__new__ with 4 arguments: cls, name, empty tuple and d, return the result.
stats is a list with 2 elements: 2 integers 0.
call the method netloc.encode with an argument string 'idna', on the return value call the decode method with string 'ascii' as argument, substitute the result for netloc.
call the method connections.all(), perform the following for every db in the result,
substitute self.version for version.
if Exception, renamed to e, exception is caught,
define the method __init__ with 2 arguments: self and language.
exp is an instance of Decimal, created with an argument integer 1.
from django.core import serializers into default name space.
return boolean False.
call the method from_current_timezone with an argument result, return the result.
if LookupError exception is caught,
define the method __repr__ with an argument self.
call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote_plus, use the result as an argument for the call to the function force_text, return the result.
define the method __str__ with an argument self.
call the function get_callable with an argument self._callback_str, substitute the result for self._callback.
derive the class ChoiceFieldRenderer from the object base class.
otherwise if ch equals a string '(',
call the method o.isoformat substitute the result for r.
if not,
define the method content with an argument self.
if app equals a string 'django.core',
skip this loop iteration,s
static method,
if AttributeError exception is caught,
params is an dictionary containing 2 initial entries: value for 'datetime' and current_timezone for 'current_timezone'.
if t.token_type equals TOKEN_BLOCK,
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
define the method as_text with an argument self.
property decorator,
substitute ending for self.ending.
do nothing.
define the method with reload with an argument self.
call the method t.nud with an argument self, substitute the result for left.
response_fixes is a list with  http.fix_location_header and http.conditional_content_removal as elements.
define the method __init__ with 10 arguments: self, data set to None, files set to None, auto_id set to string 'id_%s', prefix set to None, initial set to None, error_class set to ErrorList, label_suffix set to None, empty_permitted set to boolean False, instance set to None.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
from __future__ import unicode_literals into default name space.
call the method settings.configure.
define the method resolve with 2 arguments: self and s.
return boolean True.
get the name of the type of the callback, append the string '.__call__' to it, substitute it for view_name.
define the method __getattr__ with 2 arguments: self and real_name.
chunks is a tuple containing 6 initial tuples: result of multiplication of integers: 60,60,24,365, and return value of ungettext_lazy with 2 arguments: '%d year', '%d years', result of multiplication of integers: 60,60,24,30, and return value of ungettext_lazy with 2 arguments: '%d month', '%d month', result of multiplication of integers: 60,60,24,7, and return value of ungettext_lazy with 2 arguments: '%d weeks', '%d weeks', result of multiplication of integers: 60,60,24, and return value of ungettext_lazy with 2 arguments: '%d days', '%d days', result of multiplication of integers: 60,60, and return value of ungettext_lazy with 2 arguments: '%d hours', '%d hours', result of multiplication of integers: 60, and return value of ungettext_lazy with 2 arguments: '%d minutes', '%d minutes',
call the datetime.datetime.utcfromtimestamp with timestamp converted to an integer as argument, substitute result for timestamp.
if encoding is false.
call the method validators.RegexValidator with an argument regex set to regex, substitute it for self._regex_validator.
DEFAULT_TIMEOUT is a instance of the class object.
call method executor.collect_sql with plan as the argument, substitute the result for sql_statements.
call the function os.path.abspath with an argument dirpath, if it starts with return value of the method os.path.dirname, called with an argument path,
raise an KeyError with an argument string "Key %r not found in '%s'", substitute '%s' with name and self.__class__.__name__.
return self._callback.
return nothing.
try,
get translation_function attribute of the object _default, call the result with an argument eol_message, substitute the result for result.
self.locale_paths is an empty list.
if self.asvar is true,
if not,
join elements of name into a string, substitute it for param.
call the handle method of the base class of the Command class, with 4 arguments: string 'project', project_name, target,
call the function force_str with an argument sep, substitute the result for self.sep.
return value
if data is not None or files is not None, self.is_bound is boolean True, otherwise it is boolean False.
call the method connection.introspection.table_names, substitute the result for tables.
return name.
tried is an empty list.
define the function phone2numeric with an argument phone.
result_args is a list containing an empty list.
if UnicodeError exception is caught,
get the value under the 'charset' key of content_params dictionary, substitute it for self.encoding.
substitute module for the value under the format key of the serializers dictionary.
substitute initial_id for self.auto_id.
from django.apps import apps into default name space.
substitute empty bytes string for self.buffer.
raise a ValidationError exception with arguments self.message and code set to self.code.
return tuple containing 3 elements: RAW, an empty dictionary and stream.
for every pattern in allowed_hosts:
self._read_started is boolean True.
LOCK_NB is a hexadecimal 1.
define the method _set_size with arguments self and size.
if lang_code is true,
call the function urlunsplit with an argument url_fields, use the result as an argument for the call to the function split_url, substitute the result for url_fields.
try,
call the method sys.stderr.write with an argument string "ERROR: %s\n", where '%s' is replaced by e.
if self.setting is true,
from django.db import connections,  DEFAULT_DB_ALIAS and migrations into default name space.
status_code is an integer 200.
return an empty list.
from django.core.serializers.base import DeserializationError into default name space.
if alternatives exists substitute it for self.alternatives, if not self.alternatives is an empty list.
loader is an instance of MigrationLoader class, created with 2 arguments: None and ignore_no_migrations set to boolean True.
if not,
create a list out of fist end_text_pos text elemnts, substitue it for out.
value under the MAX_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class, created with 2 arguments: required as boolean False and widget set to HiddenInput.
call the function get_resolver with an argument urlconf, on the result call the method resolve with an argument path, return it.
if self.count equals a integer 0 and self.allow_empty_first_page is false,
define the function catalog.
if not,
substitute return value of function no_style for style.
raise an ValidationError with 2 arguments: value under the 'invalid_list' key of the self.error_messages dictionary and code set to 'invalid_list'.
for every lookup and arg in args,
skip this loop iteration,
if timeout is not None,
substitute list_ for first_item and second_item, respectively.
parser is an instance of CommandParser class, created with 3 arguments, None, usage as a string "%(prog)s subcommand [options] [args]" and add_help set to boolean False.
call the function super_set with 2 arguments: key and value.
if not,
convert '\n' to a string, if it is contained in value or '\r' converted to an string is contained in value,
if m is false,
daemon_kwargs is an empty dictionary.
call the function new_method_proxy with an argument operator.eq, substitute the result for __eq__.
return boolean True.
define the function do_filter with 2 arguments: parser and token.
call the method popitem from the base class of the class QueryDict, return the result.
call the __init__ method from the base class of the JsonResponse class, called with arguments: content set to data,
sum year and off, substitute the result for year.
from argparse import ArgumentParser into default name space.
substitute deconstruct for klass.deconstruct.
try,
if middleware has an attribute 'process_request',
for every node in self.nodelist_loop,
substitute pattern.regex.pattern for parent_pat.
return result.
_js_escapes is a dictionary with 11 initial entries: '\\u005C' for integer representation of string '\\', '\\u0027' for integer representation of string '\', '\\u0022' for integer representation of string '"', '\\u003E' for integer representation of string '>', '\\u003C' for integer representation of string '<', '\\u0026' for integer representation of string '%', '\\u003D' for integer representation of string '=', '\\u002D' for integer representation of string '-', '\\u003B' for integer representation of string ';', '\\u2028' for integer representation of string '\u2028' and '\\u2029' for integer representation of string '\u2029'.
for every field_name in self.fields,
call the parse_args method with arguments args and namespace, from the base class of the CommandParser class.
raise a ValueError exception with an argument "The protocol '%s' is unknown. Supported: %s", replace '%s' with protocol, and ip_address_validator_map converted to a list, respectively.
if key is contained in d,
call the method obj.natural_key, substitute the result for natural_key.
if not,
substitute prefix for _prefixes.values.
return an instance of CsrfTokenNode class.
return value.
call the method self._archive.close.
define the method __init__ with 4 arguments: self, attrs set to None, date_format set to None and time_format set to None.
instantiate class Truncator, with an argument value, call the method words on the result with 2 arguments length, and truncate set to string ' ...', return the result.
replace '%s' in string '<%s list>' with __class__.__name__ field of first element of self.urlconf_name, substitute it for urlconf_repr.
call the method self.stdout.write with an argument string 'examining files with the extensions: %s\n', substitute '%s' with return value of the function get_text_list called with 2 arguments:self.extensions converted into a list and string 'and'.
if number equals a integer 1 and self.allow_empty_first_page is true,
call the __init__ method with 3 arguments: CRITICAL, unpacked list args and unpacked dictionary kwargs from the base class of Critical.
decrement self.active_writers by integer 1,
from django.core import validators into default name space.
for every basedir in basedirs,
call the method self.get_queryset, substitute field pk under the result at the index index for pk_value.
raise an TemplateSyntaxError exception with an argument string "%r takes two arguments", where '%r' is replaced with first element of bits.
define the method __init__ with 4 arguments: self, name, regex and next set to None.
logger.propagate is boolean True.
define the method regex with an argument self.
status_code is an integer 500.
for every d in object_list,
substitute e and tb for v.__cause__ and v.__traceback__.
substitute paginator for self.paginator.
add together self.to, self.cc and self.bcc, return the result.
define the method get_many with 3 arguments, self class instance, keys and version set to None.
join into a string: md5 hash sum of force_bytes(key) and self.cache_suffix, compose root file path out of self._dir and previous result, return it.
convert value under the 'HTTP_CONTENT_LENGTH' key of the META dictionary to an integer of base of value under the 'CONTENT_LENGTH' key of META dictionary, if the key doesnt exists use 0 as the base, substitute the result for content_length.
substitute instance for self.instance.
return self.objects.
define the method error with 3 arguments: self, token and msg.
define the function mail_admins with subject, message, fails_silently set to boolean False, connection set to None,
remove kwargs dictionary element under the 'method' key, substitute it for method.
call the function io.open with 3 arguments: potfile, string 'w' and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:
create a printable representation of self.urlconf_name object, substitute it for urlconf_repr.
from django.core.serializers.base import SerializerDoesNotExist into default name space.
from functools import wraps, update_wrapper and WRAPPER_ASSIGNMENTS into default name space.
decorator method register.tag with an argument 'extends',
call the method m.group with an argument string 'min', convert the result into a string, substitute it for min.
call the function dec with an argument func, return the result.
if not,
from django.utils import timezone and six into default name space.
join return value of the function six.text_type called with an argument self.management_form and forms into a string, separated by newline, use it as an argument for the call to the function mark_safe, return the result.
define function patch_vary_headers, with response and newheaders as arguments.
if value is boolean True, string 'True' or string '1',
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
define the function __init__ with 5 arguments: self, takes_context, args, kwargs and target_var.
get the value under the 'merge' key of the options dictionary, if the key exists substitute it for self.merge, if not, self.merge is boolean False.
substitute body for self.body.
element of data at the index last equals to newline bytes character.
self.objects is an empty list.
decrement factor by one.
create a tuple out a tuple with an element integer 2037 and a list tt elements without the first element, substitute the result for tt.
delete the value under the 'Content-Transfer-Encoding' key of self dictionary.
connection_params is a dictionary with 1 initial entry: return value of the function DNS_NAME.get_fqdn for 'local_hostname'.
if file_name is false,
if self.can_import_settings is true,
try,
if f is an instance of models.FileField,
if not,
substitute context for block.context.
derive the class Command from the BaseCommand base class.
if not,
define the function get_urlconf with an argument default set to None.
call the function popen_wrapper with an argument args, assign the result to msgs, errors and status, respectively.
define the method add_arguments with arguments self and parser.
call the translation.get_language_bidi function, substitute the result for the value under the 'LANGUAGE_BIDI' key of the context_extras dictionary.
substitute '%s' from string "<%s: %s (%s)>" with self.__class__.__name__, self.name and self.content_type, respectively, use it as an argument for the call to the function force_str, return the result.
from django.utils.datastructures import MultiValueDict into default name space.
call to the self.handle_uncaught_exception method with request, resolver and value of the evaluated function sys.exec_info, as the arguments, substitute the result for response.
remove config dictionary element under '()' key, substitute it for c.
if replaces filed of graph.nodes element at the plan_node index is true,
return statements.
call the function urlparse with an argument url, substitute the result for url_info.
class_types is a tuple with 2 elements: type and types.ClassType.
if ValueError exception is caught,
return None.
write new line to the self.stream file stream.
define the method compile_function_error with 3 arguments: self, token and e.
if settings.DEBUG is true,
from __future__ import unicode_literals into default name space.
decorator function register.filter with an argument is_safe set to boolean False.
if error_class is None,
define the method __init__ with 4 arguments: self, key set to None, sep set to ':' and salt set to None.
call the method self.paginator.validate_number with self.number incremented by 1 as argument, return the result.
return self.
return an empty string.
if Exception exception is caught,
return result.
call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for simple_email_re.
from the base class of the SimpleCookie class call the method load with rawdata as argument.
if ValueError exception is caught,
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
append '0' to digits.
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
for every character in name,
sum index and length of self._boundary, substitute the result for next.
derive the class TemplateResponse from the SimpleTemplateResponse base class.
if AttributeError exception is caught,
substitute value under the self.token_type key of the TOKEN_MAPPING dictionary for token_name.
call the method RE_DATE.match with an argument value, substitute the result for match.
try,
call the force_bytes function with an argument settings.SECRET_KEY, substitute the result for key.
call the function timezone.make_naive with 2 arguments value, current_timezone, return the result.
substitute next for advance_iterator.
call the method self.remove_potfiles.
call the method bytes_to_text with 2 arguments: default and self.encoding, substitute the result for default.
if csrf_token is true,
define the function emit_post_migrate_signal with 4 arguments: created_models, verbosity, interactive and db.
new_value is an empty list.
derive the class OrderedSet from the object base class.
if initial is not None,
from django.template.base import ContextPopException, InvalidTemplateLibrary, TemplateDoesNotExist, TemplateEncodingError, TemplateSyntaxError and VariableDoesNotExist.
import module datetime.
if self.interactive is true,
define the method _media with an argument self.
finally perform,
define the method u with an argument self.
raise an exception DjingoUnicodeDecodeError, with s and list of arguments *args from object e, as the arguments.
from django.forms.utils import flatatt,  ErrorDict and ErrorList into default name space.
do nothing.
derive the class date from the real_date base class.
substitute WindowsError for WindowsError.
do nothing.
call the os.rename function with arguments old_file_name and new_file_name.
remove 'LOCATION' key from kwargs dictionary and put it into location, or use an empty string if key doesnt exists.
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
define the function handle_extensions with 2 arguments: extensions set to tuple containing string 'html' and ignored set to tuple containing string 'py'.
get the value under the funcname key of the t-th elment of self.__dispatch dictionary, call the result with 3 arguments: res, unpacked list args and unpacked dictionary kw, return the result.
substitute val for the value under the cache_key key of the _format_cache dictionary.
if self.choices is true,
define the get_many method with self class instance, keys and version set to None as arguments.
join fixture_dir, fixture_name with appended character '*' into a valid file path, use it as an argument for the call to the glob.iglob, for every candidate in result,
if OverflowError or ValueError, renamed to exc, exceptions are caught,
raise an TemplateSyntaxError exception with an argument string "%r received an invalid token: %r", where '%r' is replaced with, first element of bits and first element of remaining_bits.
if cc contains item 'public' and kwargs contains item 'private',
define the function ngettext with 4 arguments: context, singular, plural and number.
msg is a string "%(model)s.Meta.%(opt)s cannot be a string. Did you mean to type: ('%(value)s',)?", where '%(model)s' is replaced, with new_class.__name__, '%(opt)s' is replaced with opt and '%(value)s' is replaced with value.
define method has_key with self class instance, key and version set to None as arguments.
call the method errors.extend with argument new_errors.
define the method __init__ with an argument self.
value under the 'debug' key of the context_extras dictionary is boolean True.
return result.
if deps is true,
convert keys of dictionary self.dict into a iterable, return it.
for every fname in filelist,
substitute message for self.message.
define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
get the value under the 'id' key of the attrs dictionary, substitute the return value field of the self object for id_.
define the method __repr__ with an argument self.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a listdir() method'.
form_class_attrs is a dictionary with 2 entries: Meta for 'Meta' and formfield_callback for 'formfield_callback'.
self.vals is an empty list.
define the function new_method_proxy with an argument func.
crate a file named init_path.
for every p in parts without the first element,
if not,
call the function predicate with an argument item, use it as a key to get results dictionary value, append item to it.
define the method tags_available with argument self.
self.filters is an empty dictionary.
if first element of args is an instance of SafeData, and 'is_safe' attribute of dec._decorated_function object is true,
if Exception exception is caught,
call the function endblock_re.match with an argument t.contents, substitute the result for endbmatch.
from django.db.backends.utils import typecast_timestamp into default name space.
from functools import partial into default name space.
raise an CommandError exception with an argument string "You can only use --pks option with one model".
for every app_config in reversed list created out of the return value of the function apps.get_app_configs,
instantiate Variable class, with an argument constant, call the resolve method with an empty dictionary as an argument, substitute the result for var_obj.
call the function force_text with an argument bit, append the result to bits.
kwargs is a dictionary with elements: config dictionary element under k key for k, for every k in result of function valid_ident, called with an argument k.
call the function importlib.import_module with an argument serializer_module, substitute it for module.
call the method self.clear_cdata_mode.
otherwise if autoescape is true,
compile regular expression based on the string '\s*,\s*' and assign the result to cc_delim_re.
call the method __copy__ with an argument unpacked list self.dicts, return the result.
if f.editable is true and f is an instance of models.AutoField, or f.name is not contained in cleaned_data,
substitute render_value for self.render_value.
define the method add_post_render_callback with 2 arguments: self and callback.
define the function is_ignored with arguments path and ignore_patterns.
fail_message is a string changed'.
call the method self.tag with 2 arguments: function_name and compile_func.
if OSError, NotImplementedError or AttributeError exceptions are caught,
color_names is a tuple with 8 elements: strings 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan' and 'white'.
meta is a string '<could not parse>'.
for every field, messages in return value of the message.items method,
return response
extend collect list with _builtin_context_processors.
from django.conf import settings into default name space.
define the method __init__ with 6 arguments: self, name, value, attrs, choice and index.
call the function current, substitute the result for current.
define the method set with 5 arguments: self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
define the method open with argument self.
call the method formats.get_format_lazy with an argument string 'DATE_INPUT_FORMATS', substitute the result for input_formats.
if field is contained in self.errors return boolean True, if not, return boolean False.
define the method cleaned_data with an argument self.
substitute the limit_value for self.limit_value.
do nothing.
self.lookups is None.
if six.PY3 is true,
return t.
derive the class SafeBytes from bytes and SafeData base classes.
call the method __init__ from the base class of the class RadioChoiceInput, with 2 arguments: unpacked list args, and unpacked dictionary kwargs.
try,
if third element of bits equals a string 'parsed',
define the method enter_command with 3 arguments: self, command and token.
define the function delete_many with self, keys and version set to None as arguments.
substitute abspath for abspathu.
call the method self.resolve_context with an argument self.context_data, substitute the result for context.
define the method ipython with an argument self.
create the Singer class with 2 arguments: key appended to string 'django.http.cookies' and salt set to salt, return it.
if opts.fields is None and opts.exclude is None,
if t is not None
get config dictionary element under 'handlers' key, if it exists substitute it for handlers, if not, handlers is EMPTY_DICT.
if sent is true,
do nothing.
define the method I with an argument self.
use the global variables _mtimes and _win in this function.
call the method cursor.execute with string "INSERT INTO %s (cache_key, value, expires) VALUES (%%s, %%s, %%s)", substitute the '%s' with table and 3 elements of a list: b64encoded, exp and key, respectively.
define the method end_serialization with an argument self.
if not,
get the value under the 'incomplete' key of the field.error_messages dictionary, if it is not contained in errors,
try,
replace all '%s' from string "%s: %s%s%s" with values of obj, id, self.msg and hint, respectively, return the result.
if not,
open the file self.name in mode or self.mode mode, whichever exists, assign the file handler to self.file.
for every choice in self.field.choice_cache,
if length of app_labels is equal to integer 1,
define the method appendlist with 3 arguments: self, key and value.
call the function time.sleep with argument integer 1.
format string '&#%s;' with name, append it to self.fed.
return integer 0.
increment num_args by one.
raise an ValidationError with 3 arguments: dictionary self.error_messages value under the key 'invalid_choice', code set to string 'invalid_choice' and params as a dictionary with an entry, val for 'value'.
if target_app_labels_only is true,
from django.core.files.uploadhandler import StopUpload,  SkipFile and StopFutureHandlers into default name space.
call the method qs.order_by with argument self.model._meta.pk.name, substitute the result for qs.
finally perform,
from django.utils.encoding import smart_text, force_str and force_text into default name space.
import module gettext as gettext_module.
from django.utils.html import conditional_escape, escapejs, escape, urlize as _urlize, linebreaks, strip_tags, avoid_wrapping, and remove_tags.
define the function length_is with 2 arguments value and arg.
define the method __text_cast with an argument self.
return value.
if field is contained in form.cleaned_data,
if item_type equals FIELD,
substitute _urllib_response_moved_attributes for Module_six_moves_urllib_response._moved_attributes.
compile a regular expression pattern string '([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\s|/(?!>))*' into a regular expression object and assign it to tagfind.
if lib is false,
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
call the method self._start_relational_field with the argument field.
for every post_callback in self._post_render_callbacks,
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
return string "<%s: %s>", formated with self.__class__.__name__ and self.
if path is not initialized,
define the method auto_id with an argument self.
if file object has an attribute 'mode',
call the parser.add_argument with string '--addrport', default set to an empty string and help as string 'Port number or ipaddr:port to run the server on.'.
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
call the method self.tag with 2 arguments: function_name and compile_func.
for every model in app_models,
return an empty string.
substitute force_text for force_str.
for every c in choices split into words, concatenate prefix, result of the function re.escape with an argument c and suffix, and join the results into a string, separated with '|' character, return the result.
for every __ in range of integers from 0 up to sep subtracted from fill_to,
call the method self.stream.write with argument string '%s\n', with '%s' replaced with msg_data.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a modified_time() method'.
return nodes.
return a class instance FilterNode, called with an arguments filter_expr and nodelist.
if StopFutureHandlers exception is caught.
define the method det_valid_name with arguments self and name.
try,
substitute loader.graph for graph.
return self.
if AttributeError exception is caught.
substitute tuple containing 2 elements: sum of p_pattern and prefix, and sub_pattern for value under the namespace key of the namespace dictionary.
define the function Deserializer with 2 arguments: stream_or_string and unpacked dictionary options.
define the function sort_dependencies with an argument app_list.
call the self.stdout.write method with string " (no migrations)" and self.style.MIGRATE_FAILURE as arguments.
RUN_RELOADER is boolean True.
return self._encoding.
call the method self.data.isoformat, return the result.
define the method value_from_datadict with 4 arguments: self, data, files and name.
otherwise if content is not an instance of Message class,
if not,
decorator cached_property.
docstirng
break from the loop execution
remove the first element from context.render_context.
try,
substitute self.max_value for the value under the 'max' key of the attrs dictionary.
_moved_attributes is an empty list.
call the method model_to_dict with 3 arguments: instance, opts.fields, opts.exclude and substitute the result for object_data.
call the method self._setup.
if StandardError, renamed to e, exception is caught,
call the method handle from the base class of Command class, with 4 arguments: string 'app', app_name, target and unpacked dictionary options.
call the function getcallargs with an argument current,
from django.db.migrations.executor import MigrationExecutor into default name space.
if encoding does not exists substitute it for settings.DEFAULT_CHARSET.
define the method dst with 2 arguments self and dt.
decorator deconstructible,
call the BaseCache.__init__ method with self class instance and params as the arguments.
if Exception, renamed to e, exception is caught,
return a tuple with 3 elements: TYPE, outdict and stream.
if not,
plural is an empty list.
raise an CommandError with an argument string "%r is not a valid %s name. Please %s.", were '%r' is replaced with name, and '%s' is replaced with app_or_project and message, respectively.
import module sys.
define the method handle with 5 arguments: self, app_or_project, name, target set to None and unpacked dictionary options.
if current_app and is true and current_app is contained in app_list,
derive the class ContentNotRenderedError from the Exception base class.
raise an exception.
call the function six.reraise with 3 arguments: ImproperlyConfigured, instance of ImproperlyConfigured class created with msg, and third element of the function sys.exc_info result.
if self.data.hour is greater than integer 11,
if rel_model has an 'natural_key' attribute and rel_model is not equal to model,
if y and m and d are all true,
define the method deleted_forms with an argument self.
call the method resultclass.mro, reverse the order of elements, for every type_ in the result.
from django.utils.six.moves.urllib.parse import urlparse into default name space.
call the method connection.ops.sequence_reset_sql with 2 arguments self.style and models, substitute the result for statements.
replace '%s' in the string  "%s.process_template_response didn't return an HttpResponse object. It returned None instead.", with name of the class type of the middleware_method instance, use it as the argument for call to the ValueError exception raise.
call the method self._get_validation_exclusions, substitute the result for exclude.
call the method field.clean with an argument value, substitute the result for value.
convert exclude elements to list, substitute it for construct_instance_exclude.
if in_tag is true and token_string starts with BLOCK_TAG_START.
return data.
with call to the function transaction.atomic with using set to connection.alias and savepoint set to connection.features.can_rollback_ddl, as arguments.
call the method re_camel_case.sub with 2 arguments: raw string ' \1' and value, strip the result of whitespaces from both ends,
current_chunk is None.
if name is not contained in logging._handlers,
call the method self.create_select with 6 arguments: name, self.year_field, value, day_val, choices and self.day_none_value, substitute the result for the value under the 'day' key of the html dictionary.
define the function pgettext with 2 arguments: context and message.
from django.views.debug import ExceptionReporter and get_exception_reporter_filter into default name space.
substitute gettext for gettext_noop, gettext_lazy and _.
call the method params.get with 2 arguments, string 'KEY_FUNCTION' and None, use the result as the argument for the call to the function get_key_func, substitute the result for the self.key_func.
if not,
call the method self.get_handler with 2 arguments unpacked list args and unpacked dictionary options, substitute the result for handler.
import module re.
self.waiting_writers is an integer 0.
register.tag decorator function with an argument 'filter',
call the function fields_for_model with 9 arguments: opts.model, opts.fields, opts.exclude, opts.widgets, formfield_callback, opts.localized_fields, opts.labels, opts.help_texts and opts.error_messages, substitute the result for fields.
self._stream is a class instance of a LimitedStream class, initialized with self.environ dictionary value under the 'wsgi.input' key, and content_length.
substitute model._meta for opts.
save.alters_data is boolean True.
for every i and k in enumerated values of self._cache, if i is divisible by self._cull_frequency, append k to doomed list.
if length of args is not equal to integer 2,
if end is an instance of unicode,
call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
delete frame.
derive the class HttpResponseNotAllowed from the HttpResponse base class.
define the function forbid_multi_line_headers with arguments: name, val and encoding.
if not,
for every field in self.fields,
define the method __init__ with 5 arguments: self, view_name, args, kwargs and asvar.
call the self.compile_messages with locations as argument,
fetch next entry for the database that cursor points into, substitute first element of it for num.
if termios is true,
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
define the method eval with 2 arguments self and context.
define the method __getitem__ with 2 arguments: self and header.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
self._caches.caches is an empty dictionary.
return boolean False.
if ImportError exception is caught,
if self.pos is greater than or equal to self.tokens,
if settings.DEBUG is true and value of the request.META dictionary under the 'REMOTE_ADDR' key is contained in settings.INTERNAL_IPS,
from django.test.utils import get_runner into default name space.
decorator function register.filter with 2 arguments string "timeuntil" and is_safe set to boolean False.
substitute _urllib_error_moved_attributes for Module_six_moves_urllib_error._moved_attributes.
call the get_bytes_from_wsgi function with environ, string 'PATH_INFO' and empty strings as arguments, substitute the result for path_info.
for every node in self.nodelist_empty,
call the self.get_response with request as the argument, substitute the result for response.
if settings.USE_TZ is true and value is not None and call to the function timezone.is_naive with an argument value, evaluates to true,
while length of line is grater than max_width,
get 'labels' attribute from the options object, if it exists substitute it for self.labels, if not self.labels is None.
call the method apps.get_model with an argument model_identifier.
from django.utils import six into default name space.
if buffer_ is not None,
define the method handle with 2 arguments: self and unpacked dictionary options.
call the function to_current_timezone with an argument, substitute the result for value.
from __future__ import unicode_literals into default name space.
return compile_function.
if key_func is not of None type,
define the method setlist with 3 arguments: self, key and list_.
if statue is not equal to STATUS_OK.
define the function do_ifequal with 2 arguments: parser, token and negate.
define the method _itervalues with an argument self.
if not,
from django.utils.functional import cached_property into default name space.
if self.load_initial_data is not empty,
raise an ContentNotRenderedError exception with an string 'The response content must be rendered before it can be iterated over.'.
if not,
instantiate class BoundaryIter with 2 arguments: self._stream and self._boundary, use it to instantiate LazyStream class, return it.
define the method to_python with arguments self and value.
if OSError, renamed to err, is caught,
from django.utils.six.moves.urllib.request import urlretrieve into default name space.
