                      self . write_message ( message )
    def __eq__ ( self , other ) :
 self . stdout . write ( "  you can delete them." )
    if six . PY3 :
  if value is not result :
  else :
   def __exit__ ( self , exc_type , exc_value , traceback ) :
              host = self . META [ 'HTTP_HOST' ]
 options . update ( kwargs )
              handler . addQuickElement ( "author" , "%s (%s)" %  ( item [ 'author_email' ] , item [ 'author_name' ] ) )
                          data = field_stream . read ( )
 if len ( bits ) < 2 :
   def __str__ ( self ) :
              self . seek ( 0 )
              base = sup_cls . media
  from __future__ import unicode_literals
   def valid_ident ( s ) :
                      try :
  return new_class
      return _trans . npgettext ( context , singular , plural , number )
import logging
       candidate_pat = prefix_norm . replace ( '%' , '%%' ) + result
 import types
                  self . verbatim = False
   warnings . simplefilter ( "default" , RemovedInNextVersionWarning )
  else :
 self . paths_to_remove = [ ]
 context_extras [ 'LANGUAGES' ] = settings . LANGUAGES
     ZERO = timedelta ( 0 )
              return plural_suffix
  else :
 fields = (  DateField ( input_formats = input_date_formats ,  error_messages = { 'invalid' : errors [ 'invalid_date' ] } ,  localize = localize ) ,  TimeField ( input_formats = input_time_formats ,  error_messages = { 'invalid' : errors [ 'invalid_time' ] } ,  localize = localize ) ,  )
      rendering_attrs = SimpleTemplateResponse . rendering_attrs + [ '_request' , '_current_app' ]
  elif piece :
                  sublist_item = title
              raise TypeError ( "can't delete _wrapped." )
  if not plan :
     class SafeMIMEText ( MIMEMixin , MIMEText ) :
   if six . PY3 :
          if option_value is None :
              os . chmod ( dst , mode )
                          self . stdout . write ( 'ignoring file %s in %s\n' % ( filename , dirpath ) )
                  if e . errno == errno . EEXIST :
                      inplural = True
              all_models . extend ( router . get_migratable_models ( app_config , database , include_auto_created = True ) )
   return version
     def parse_boundary_stream ( stream , max_header_size ) :
  self . _meta = META
                  stream . unget ( chunk [ - rollback : ] )
          self . parent_widget = parent_widget
 if value and ':' in value :
      def __init__ ( self , token_type , contents ) :
              self . empty_label = None
              handler . addQuickElement ( "pubDate" , rfc2822_date ( item [ 'pubdate' ] ) )
 if hasattr ( value , 'close' ) :
 self . merge ( translation )
  self . nodelist = compile_string ( template_string , origin )
 return out
          if '@' in addr :
 return { '2' : True ,  True : True ,  'True' : True ,  '3' : False ,  'False' : False ,  False : False } . get ( value , None )
   T = [ F ( x ) for x in range ( 1 , l ) ]
 return isinstance ( obj , _PROTECTED_TYPES )
    def b64_encode ( s ) :
 msg = SafeMIMEMultipart ( _subtype = self . mixed_subtype , encoding = encoding )
 from django . core . management import call_command
 s = MLStripper ( )
  pdict [ name ] = value
 if isinstance ( stream_or_string , six . string_types ) :
              msg [ 'Date' ] = formatdate ( )
 from django . db . migrations import Migration
    def _has_expired ( self , key ) :
  raise
    def endChannelElement ( self , handler ) :
   self . clean ( )
   def delete ( self , key , version = None ) :
  else :
                  fixture . close ( )
  logger = logging . getLogger ( 'django.request' )
 for hextet in new_ip :
 new = '#: ' + orig_file
              return self . filters [ filter_name ]
 tmpdir = tempfile . mkdtemp ( )
  else :
         class TokenBase ( object ) :
    if months :
              return False
  get_text_list = allow_lazy ( get_text_list , six . text_type )
              raise StopIteration ( )
 super ( CharField , self ) . __init__ ( * args , ** kwargs )
 self . _dimensions_cache = get_image_dimensions ( self , close = close )
              format_locations . append ( path + '.%s' )
                  if field . rel . through . _meta . auto_created :
 return '\n' . join ( statements )
 if not self . timezone :
 obj_pk = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value ) . pk
 total_forms = max ( initial_forms , self . min_num ) + self . extra
  elif k == 'bg' :
 pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
 self . field_name = field_name
  return '%s:%s' % ( self . g ( ) , self . i ( ) )
  return super ( DateField , self ) . to_python ( value )
 weekday = self . data . weekday ( ) + 1
   return d
 if not response . has_header ( 'Vary' ) :
  if app_config . models_module is None or app_config in excluded_apps :
 import re
 from django . utils import six
        @ register . filter ( "escape" , is_safe = True )
                  import_module ( '.management' , app_config . name )
                  return ugettext_lazy ( value )
   def entity_decl ( self , name , is_parameter_entity , value , base ,  sysid , pubid , notation_name ) :
              parentloop = { }
 compile_func = partial ( generic_tag_compiler ,  params = params , varargs = varargs , varkw = varkw ,  defaults = defaults , name = function_name ,  takes_context = takes_context , node_class = InclusionNode )
          LocaleRegexProvider . __init__ ( self , regex )
 lib = libraries . get ( library_name , None )
  import os
 self . lineno = 1
 from django . utils . html import format_html
  if not hasattr ( func , '__name__' ) :
          super ( LocaleRegexURLResolver , self ) . __init__ (  None , urlconf_name , default_kwargs , app_name , namespace )
    @ register ( Tags . models , Tags . signals )
 cls = extension_map . get ( tail_ext )
  requires_system_checks = False
  def __init__ ( self , regex = None , message = None , code = None , inverse_match = None , flags = None ) :
 if timezone is None :
  else :
 self . base = base
        def reloader_thread ( ) :
              raise CommandError ( "Cannot find a migration matching '%s' from app '%s'." % ( migration_name , app_label ) )
          self . _post = QueryDict ( '' )
      def import_module ( name , package = None ) :
              for name , value in props . items ( ) :
 import time
              return self . func ( value )
 sys . stdin . close ( )
   def validate ( self , value ) :
  if is_aware ( date ) :
 from django . utils import six
  filenames = [ ]
                      ch , escaped = next ( pattern_iter )
   def get_nodes_by_type ( self , nodetype ) :
          if not getattr ( f , 'editable' , False ) :
  def copystat ( src , dst ) :
    def assignment_tag ( self , func = None , takes_context = None , name = None ) :
          self . queryset = queryset
          raise TemplateSyntaxError ( "%r expected at least one variable "  "assignment" % bits [ 0 ] )
          return { }
   except Exception :
  from django . conf import settings
              if isinstance ( v , ( list , tuple ) ) :
                      try :
 cursor . execute ( "SELECT COUNT(*) FROM %s" % table )
 if self . feed [ 'ttl' ] is not None :
 i += 1
 iterlists = _iterlists
           self . verbosity = options . get ( 'verbosity' )
   result = avoid_wrapping ( name % count )
      def __init__ ( self , cyclevars , variable_name = None , silent = False ) :
   domain , port = split_domain_port ( host )
   hextets = ip_str . split ( ':' )
  from django . core . exceptions import ValidationError
  return normpath ( path )
 value = template_localtime ( value , use_tz = context . use_tz )
  except StandardError as e :
 self . pointer = i
              logger . warning (  'Forbidden (Permission denied): %s' , request . path ,  extra = {  'status_code' : 403 ,  'request' : request  } )
   app_labels = set ( app_labels )
 import operator
   elif dirname == 'locale' :
               raise MultiPartParserError ( "Invalid content length: %r" % content_length )
          if find_command ( program ) is None :
 try :
 if not self . DIGIT_PATTERN . match ( idx ) :
                      sub_tried = e . args [ 0 ] . get ( 'tried' )
              form = ManagementForm ( auto_id = self . auto_id , prefix = self . prefix , initial = {  TOTAL_FORM_COUNT : self . total_form_count ( ) ,  INITIAL_FORM_COUNT : self . initial_form_count ( ) ,  MIN_NUM_FORM_COUNT : self . min_num ,  MAX_NUM_FORM_COUNT : self . max_num  } )
 from django . utils . encoding import force_str
  def __init__ ( self , query_string = None , mutable = False , encoding = None ) :
                          current_expires = result [ 1 ]
  except KeyError :
  _func_closure = "__closure__"
     class ConvertingList ( list ) :
                  k = item [ 0 ]
 raise
 def trim_url ( x , limit = trim_url_limit ) :
  return False
 from django . utils . translation import ugettext_lazy as _
   def sign ( self , value ) :
       def timestamp ( self ) :
          if hasattr ( self , '_files' ) :
 if ending and not msg . endswith ( ending ) :
 from importlib import import_module
  def to_python ( self , data ) :
  scheme = value . split ( '://' ) [ 0 ] . lower ( )
          handler = SimplerXMLGenerator ( outfile , encoding )
 from django . db import connections , DEFAULT_DB_ALIAS
 new_operations = optimizer . optimize ( operations , migration . app_label )
                  dirs . append ( app_dir )
   @ content . setter
 if not settings . configured :
 all_locales = map ( os . path . basename , locale_dirs )
              template_dirs = settings . TEMPLATE_DIRS
 self . source = source
 if self . can_delete :
                  exp = datetime . utcfromtimestamp ( timeout )
     if not options [ 'no_startup' ] :
  return result
              kwargs [ 'widget' ] = widgets [ f . name ]
  except ( OSError ) :
   def _get_files ( self ) :
                  raise TemplateSyntaxError ( '"with" in %r tag needs at least '  'one keyword argument.' % bits [ 0 ] )
          if value . __traceback__ is not tb :
 return result
 while bits :
 base_directory = '%s_directory' % app_or_project
                          os . makedirs ( dirname )
                  if name in lib . tags :
  self . fields = fields
          for format in settings . SERIALIZATION_MODULES :
   if not chunks :
 from django . utils . datastructures import MultiValueDict , MergeDict
          if app_config . models_module is None :
 app_dirs = [ ]
 if scheme not in self . schemes :
          instance = construct_instance ( form , instance , fields , exclude )
  except ImportError :
 _assertRegex = "assertRegex"
  import hashlib
  elif value is False :
  self . save_as_new = save_as_new
   def _create_attachments ( self , msg ) :
 help = ''
  not_found = [ ]
              pending_references . setdefault ( refto , [ ] ) . extend ( refs )
          if ch != '\\' :
  from django . conf import settings
 exclude = self . _get_validation_exclusions ( )
  if colors and colors [ - 1 ] in color_names :
 try :
  idhost = DNS_NAME
 parser = OptionParser ( prog = prog_name ,  usage = self . usage ( subcommand ) ,  version = self . get_version ( ) )
                              field_type = "ForeignKey('%s'" % rel_to
  app_template_dirs . append ( template_dir )
 for k , v in ret . items ( ) :
 callback = getattr ( urls , 'handler%s' % view_type )
              if block_context is None :
  else :
  config = self . config
    if questioner . ask_merge ( app_label ) :
 if data is None or isinstance ( data , dict ) :
     class WSGIServer ( simple_server . WSGIServer , object ) :
          if self . connection_reset :
 class VariableDoesNotExist ( Exception ) :
   for f in self . instance . _meta . fields :
   return singular_suffix
 if not ( self . inverse_match is not bool ( self . regex . search (  force_text ( value ) ) ) ) :
  from django . utils . deprecation import RemovedInDjango19Warning
  except TypeError :
    ext = self . splitext ( guessed_filename ) [ 1 ]
          raise
              try :
   class BaseConverter ( object ) :
 if reverse :
  lang_code = regex_match . group ( 1 )
   def __eq__ ( self , other ) :
 code_list = [ ]
 from django . core . management . sql import sql_destroy_indexes
                      self . stdout . write ( "Creating %s\n" % new_path )
 parser . add_argument ( '--extension' , '-e' , dest = 'extensions' ,  help = 'The file extension(s) to examine (default: "html,txt", or "js" '  'if the domain is "djangojs"). Separate multiple extensions with '  'commas, or use -e multiple times.' ,  action = 'append' )
  from django . apps import apps
              app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
 def emit_post_migrate ( verbosity , interactive , database ) :
     @ deconstructible
 response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
 year_field = '%s_year'
 odds = sum ( LUHN_ODD_LOOKUP [ int ( c ) ] for c in candidate [ - 2 : : - 2 ] )
 parts = parts [ : - 1 ]
  return value
 with self . _lock . reader ( ) :
              prefix , rest = self . split_leading_dir ( path )
   @ property
 return http . parse_cookie ( raw_cookie )
              id_ += '_0'
 extra_params . update ( field_params )
              end = s . find ( b';' , end + 1 )
 import os
   def _delete ( self , fname ) :
  for app_name , namespace_list in pattern . app_dict . items ( ) :
   class ClearableFileInput ( FileInput ) :
          raise TemplateSyntaxError ( "second argument to 'regroup' tag must be 'by'" )
   def as_textarea ( self , attrs = None , ** kwargs ) :
  except ImportError :
 import operator
          super ( Command , self ) . add_arguments ( parser )
              exc_type = type ( exc )
          return fastcgi_help ( "ERROR: Implementation must be one of prefork or "  "thread." )
       class InMemoryUploadedFile ( UploadedFile ) :
                  raise EmptyPage ( 'That page contains no results' )
 def do_for ( parser , token ) :
          if not isinstance ( i , six . integer_types ) :
 while not bit . endswith ( sentinal ) :
   from django . template . base import ( Context , FilterExpression , Lexer , Node ,  NodeList , Parser , RequestContext , Origin , StringOrigin , Template ,  TextNode , Token , TokenParser , Variable , VariableNode , constant_string ,  filter_raw_string )
          self . _assert_mutable ( )
  seqs = connection . introspection . sequence_list ( ) if reset_sequences else ( )
 BASE62_ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
  return I18N_MODIFIED if filename . endswith ( '.mo' ) else FILE_MODIFIED
 literal_regex = re . compile (   r'\[([A-f0-9:\.]+)\]$' ,  re . IGNORECASE )
                  cls . __dispatch [ klass ] = { }
          items = _iteritems
   elif t . token_type == TOKEN_TEXT :
                      template , display_name = loader ( name , dirs )
  else :
                  return
 self . backout = [ ]
  factory = c
 return self
 extend = complain
   if item [ 'description' ] is not None :
                      raise
                  self . changed_objects . append ( ( obj , form . changed_data ) )
   def keys ( self ) :
    _urllib_request_moved_attributes = [  MovedAttribute ( "urlopen" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "install_opener" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "build_opener" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "pathname2url" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "url2pathname" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "getproxies" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "Request" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "OpenerDirector" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPDefaultErrorHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPRedirectHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPCookieProcessor" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "BaseHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPPasswordMgr" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPPasswordMgrWithDefaultRealm" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "AbstractBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "AbstractDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPSHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "FileHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "FTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "CacheFTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "UnknownHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPErrorProcessor" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "urlretrieve" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "urlcleanup" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "URLopener" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "FancyURLopener" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "proxy_bypass" , "urllib" , "urllib.request" ) ,  ]
  else :
   def __getitem__ ( self , key ) :
 for match in matches :
                      confirm = input ( 'Please enter either "yes" or "no": ' )
  if not settings . DEBUG and not settings . ALLOWED_HOSTS :
   def make_template_fragment_key ( fragment_name , vary_on = None ) :
  handler . addQuickElement ( "lastBuildDate" , rfc2822_date ( self . latest_post_date ( ) ) )
 yield buf . read ( )
 stream . unget ( chunk [ next : ] )
 if template_source_loaders is None :
                      resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
              if self . fixture_count == 0 and self . hide_empty :
 from PIL import ImageFile as PillowImageFile
  else :
 self . msgattrib_options = self . msgattrib_options [ : ] + [ '--no-wrap' ]
   def source_error ( self , source , msg ) :
 def _wrapped_view ( request , * args , ** kwargs ) :
  except ( KeyError , TypeError ) :
                  extra , resolver = resolver . namespace_dict [ ns ]
 clean_data = [ ]
   def has_changed ( self ) :
 if field_type not in ( 'TextField(' , 'CharField(' ) :
 asvar = None
              settings . configure ( USE_I18N = True )
  def __init__ ( self , attrs = None , years = None , months = None , empty_label = None ) :
 self . make_writeable ( new_path )
       def __init__ ( self ) :
                  field_output . append ( "UNIQUE" )
 if t is not None :
                  raise ViewDoesNotExist (  "Could not import '%s'. View does not exist in module %s." %  ( lookup_view , mod_name ) )
           from collections import namedtuple
  streaming = False
from __future__ import unicode_literals
     @ deconstructible
   def __getitem__ ( self , key ) :
     class EmailMessage ( object ) :
   def decr ( self , key , delta = 1 , version = None ) :
   extra_attrs = self . widget_attrs ( widget )
 self . _clean_form ( )
 klass = import_string ( backend or settings . EMAIL_BACKEND )
          if required and ( initial is not None ) :
  else :
   def build_absolute_uri ( self , location = None ) :
  return field . to_python
 return chunk [ : end ]
              return b''
                      suffix = d [ 'suffix' ]
  for app_label , migration_names in conflicts . items ( ) :
 if commands_only :
  else :
 return obj
   if self . verbosity >= 1 :
  elif ch == ')' :
 to_unicode = lambda s : force_text ( s , strings_only = True )
  raise ValidationError ( self . message , code = self . code )
 self . active_readers += t
                   prefix = settings . MEDIA_URL
              if hasattr ( base , 'declared_fields' ) :
  try :
          if not hasattr ( self , '_queryset' ) :
 if CONTEXT_SEPARATOR in result :
                      ch , escaped = next ( pattern_iter )
    return field_type , field_params , field_notes
          _load_serializers ( )
 class BaseForm ( object ) :
      def render ( self , context ) :
                      message %= error . params
   options = sorted ( ( k , v ) for k , v in options if k . startswith ( curr ) )
   def render ( self , context ) :
 self . charset = None
   _urlconfs = local ( )
                  if old_attr is None :
 st = os . stat ( src )
       def __setitem__ ( self , name , val ) :
    def serialize ( format , queryset , ** options ) :
  return final_path
          try :
 class ErrorList ( UserList , list ) :
 if os . path . exists ( fname ) :
          if attrs is not None :
 existing_headers = set ( header . lower ( ) for header in vary_headers )
   def initial_form_count ( self ) :
      except SkipFile :
              response = func ( request , response )
          return bytes ( s )
 if location is None :
 starttag_re = re . compile ( r'<%s(/?>|(\s+[^>]*>))' % tags_re , re . U )
              return s
              return output
  def __init__ ( self , message = None , code = None , whitelist = None ) :
    def _resolve ( self ) :
 try :
              ret = fcntl . flock ( _fd ( f ) , flags )
    def ungettext_lazy ( singular , plural , number = None ) :
  except AttributeError :
                  msgs = msgs . decode ( 'utf-8' )
   return data . get ( name , None )
    value = super ( URLField , self ) . to_python ( value )
 return self . file . name
          as_bytes = as_string
          loaders = [ ]
 request = None
    def all_locale_paths ( ) :
  else :
          return len ( list ( self . __iter__ ( ) ) )
  shown . add ( plan_node )
   def urlquote ( url , safe = '/' ) :
 _upload_handlers = [ ]
  attrs . append ( ( attrname . lower ( ) , attrvalue ) )
  now = timezone . now ( )
              return ''
 for templatetag_module in templatetags_modules_candidates :
     class RequireDebugTrue ( logging . Filter ) :
                      buffer_ = line
  choice_input_class = None
 from django . db . models import AutoField , OneToOneField , ForeignKey
  if is_aware ( date ) :
  __all__ = ( 'NamedTemporaryFile' , 'gettempdir' , )
              pass
 self . _catalog . update ( other . _catalog )
 if key_prefix is None :
 tags_re = '(%s)' % '|' . join ( tags )
  scheme = template . split ( ':' , 1 ) [ 0 ] . lower ( )
 tag_exists = registry . tag_exists
          f . save_form_data ( instance , cleaned_data [ f . name ] )
          if self . language is not None :
  return ( self . paginator . per_page * ( self . number - 1 ) ) + 1
                  opt_label = option [ 0 ]
 template = self . resolve_template ( self . template_name )
  def __init__ ( self ) :
          language_code = get_language ( )
    def get_public_serializer_formats ( ) :
                  self . _response_middleware . insert ( 0 , mw_instance . process_response )
          message = '' . join ( tokens )
              chunk_size = self . DEFAULT_CHUNK_SIZE
  if issubclass ( klass , logging . handlers . MemoryHandler ) and 'target' in config :
 from importlib import import_module
 if second_item == [ ] :
 if token . contents == 'empty' :
              raise ValueError ( "attempted relative import beyond top-level package" )
  return name , ser_fmt , cmp_fmt
 form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] )
                      candidate_subs = dict ( ( k , urlquote ( v ) ) for ( k , v ) in candidate_subs . items ( ) )
   def calculate_app_template_dirs ( ) :
 choices = list ( six . iteritems ( self . months ) )
                      compile_func = self . tags [ command ]
                   def wrapper ( * args , ** kwds ) :
  app_template_dirs = [ ]
  return format_html ( '<input{0} />' , flatatt ( final_attrs ) )
              message . message ( )
                use_null_fallback = False
 import random as random_module
   elif t . token_type == TOKEN_VAR :
   def clean ( self , value ) :
              factory = config [ '()' ]
 if self . localize :
 decorated = Node ( syms . decorated , [ decorator , klass ] , prefix = node . prefix )
   else :
                                  extra_params [ 'null' ] = True
      initial_text = ugettext_lazy ( 'Currently' )
                      extracted = self . _archive . extractfile ( member )
 from django . core . files import locks
  return super ( SimpleTemplateResponse , self ) . __iter__ ( )
                          m = m + base [ medium ]
    else :
                  data = self
   def tell ( self ) :
  _DJANGO_DEPRECATED_LOCALES = _BROWSERS_DEPRECATED_LOCALES
 i = i + 1
  return result
    def _iterkeys ( self ) :
 orig_vars . pop ( '__dict__' , None )
   def id_for_label ( self , id_ ) :
                                  handler = logging . _handlers [ name ]
  test_runner_class = get_runner ( settings , self . test_runner )
 def __init__ ( self , attrs = None , date_format = None , time_format = None ) :
            if cursor and close_connection :
 return [ mark_safe ( force_text ( obj ) ) for obj in value ]
 DEFAULT_PORT = "8000"
          if "=" in x :
              end = len ( s )
      import gettext
      plist = [ ]
  from django . apps import apps
  except ValueError :
                  kwargs [ "initial" ] = self . parent_instance . pk
 for app_config , model_list in app_list :
 with context . push ( ) :
    def urlsafe_base64_decode ( s ) :
 from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
  else :
  except AmbiguityError :
 return scheme in self . url_schemes
           return [ etag_str ]
 bits = token . split_contents ( )
  import decimal
   creation_counter = 0
 fixture_name = os . path . basename ( fixture_name )
                          self . configure_root ( root )
 result = block . nodelist . render ( context )
          args = ( )
 parser . add_argument ( 'migration_name' ,  help = 'Migrations will be squashed until and including this migration.' )
 def body ( self ) :
 for header in cc_delim_re . split ( response [ 'Vary' ] ) :
                  obj = new_obj
          return lookup_view
 for arg in argv [ 2 : ] :
 if not name :
 parser . add_argument ( '-e' , '--exclude' , dest = 'exclude' , action = 'append' , default = [ ] ,  help = 'An app_label or app_label.ModelName to exclude '  '(use multiple --exclude to exclude multiple apps/models).' )
 internal_use_only = False
  cookiedict = { }
          if not self . data :
 warnings . warn ( msg % ( language , _DJANGO_DEPRECATED_LOCALES [ language ] ) ,  RemovedInDjango19Warning , stacklevel = 2 )
  else :
  return flat
 return result
  nodelist = self . create_nodelist ( )
 extra_context = token_kwargs ( remaining_bits , parser , support_legacy = True )
          scheme , netloc , path , query , fragment = urlsplit ( url )
   def __eq__ ( self , other ) :
 cache_get = cache . get
              from django . utils . translation import trans_real as trans
          super ( MultiValueDict , self ) . __setitem__ ( key , [ value ] )
  def add_arguments ( self , parser ) :
                  if self . allow_files :
          post_sql_fields = [ f for f in opts . local_fields if hasattr ( f , 'post_create_sql' ) ]
           return super ( PythonSerializer , self ) . getvalue ( )
   else :
     def _find_boundary ( self , data , eof = False ) :
  return node
   def handle ( self , * app_labels , ** options ) :
          addr . encode ( 'ascii' )
 self . _add_local_translations ( )
  setattr ( cls , k , meth )
    class LazyObject ( object ) :
              return mark_safe ( output )
    def _split_statements ( content ) :
          loader , args = loader [ 0 ] , loader [ 1 : ]
                  sys . exit ( 0 )
          return self
  except AmbiguityError :
   def _findall ( text , substr ) :
 if connections [ db ] . features . needs_datetime_string_cast and not isinstance ( expires , datetime ) :
    class Origin ( object ) :
  else :
  return os . path . normpath ( path )
 __Y2 = r'(?P<year>\d{2})'
  _CacheInfo = namedtuple ( "CacheInfo" , [ "hits" , "misses" , "maxsize" , "currsize" ] )
                  if isinstance ( arg , unicode ) :
              if self . active_writers == 0 and self . waiting_writers == 0 :
 for statement in sql_statements :
    return settings . LANGUAGE_CODE
    class AppRegistryNotReady ( Exception ) :
                  if table_name_filter is not None and callable ( table_name_filter ) :
              for error in self . error_list :
 data_value = data if data is not None else ''
   def value_from_datadict ( self , data , files , name ) :
              if hasattr ( message , 'error_dict' ) :
                  w = self . choice_input_class ( self . name , self . value ,  self . attrs . copy ( ) , choice , i )
 dfmt = config . get ( 'datefmt' , None )
 for pos , elt in enumerate ( source ) :
              exts = extensions if extensions else [ 'js' ]
    for model in app_models :
          app_name = get_commands ( ) [ name ]
 if exit_code < 0 :
                        ns = current_app
   return False
  request_queue_size = 10
 walk_to_end ( ch , pattern_iter )
           raise TemplateSyntaxError (  "'%s' did not receive value(s) for the argument(s): %s" %  ( name , ", " . join ( "'%s'" % p for p in unhandled_params ) ) )
 newlines = property ( lambda self : self . file . newlines )
              c = SimpleCookie ( )
  print ( opt_label )
  ngettext_lazy = ngettext
  unichr = unichr
          connection = connections [ options [ 'database' ] ]
  except KeyError :
   else :
 base36 . append ( digits [ i // j ] )
 if leading :
 if chunk is None :
          try :
 if isinstance ( file , six . string_types ) :
   def _resolve_lookup ( self , context ) :
          from django . conf import settings
 nodes = [ ]
          self . model = getattr ( options , 'model' , None )
          parser . invalid_block_tag ( endblock , 'endblock' , acceptable_endblocks )
                  opfunc . __name__ = opname
    def execute ( self , * args , ** options ) :
          return value
  if self . max_value is not None :
          final_attrs = self . build_attrs ( attrs , type = 'checkbox' , name = name )
 return dateformat . format ( value , get_format ( format or 'DATE_FORMAT' , use_l10n = use_l10n ) )
            cache . set ( cache_key , [ ] , cache_timeout )
 self . __dt = dt
   def _update_unget_history ( self , num_bytes ) :
 filters = [ ]
       except Exception as e :
 from django . utils . datastructures import MultiValueDict , ImmutableList
    if objects_in_fixture == 0 :
  return self . _namespace_dict [ language_code ]
          thread . start_new_thread ( main_func , args , kwargs )
 return date_value . strftime ( input_format )
  sys . exit ( 2 )
  def get_template_sources ( self , template_name , template_dirs = None ) :
              return
 is_compressed = True
    class Token ( object ) :
             return self . copy ( )
  super ( BaseModelFormSet , self ) . add_fields ( form , index )
 TOKEN_MAPPING = {  TOKEN_TEXT : 'Text' ,  TOKEN_VAR : 'Var' ,  TOKEN_BLOCK : 'Block' ,  TOKEN_COMMENT : 'Comment' ,  }
  except ImportError :
                  msg . attach ( body_msg )
 parser . add_argument ( '--exclude' , '-x' , dest = 'exclude' , action = 'append' , default = [ ] ,  help = 'Locales to exclude. Default is none. Can be used multiple times.' )
          return date_format ( value , 'DATETIME_FORMAT' , use_l10n = use_l10n )
  del form . cleaned_data [ field ]
  except LookupError :
  try :
   gettempdir = tempfile . gettempdir
   else :
 if hasattr ( out , 'isatty' ) and out . isatty ( ) :
              with io . open ( fname , 'rb' ) as f :
 bits = token . split_contents ( )
 for f in opts . local_fields :
  if error_messages is not None :
    class SignatureExpired ( BadSignature ) :
   if hasattr ( self . file , 'tell' ) and hasattr ( self . file , 'seek' ) :
  emit_post_migrate_signal ( set ( all_models ) , verbosity , interactive , database )
    def w ( self ) :
                      num_sent += 1
 locales = set ( locales ) - set ( exclude )
 return strip_spaces_between_tags ( self . nodelist . render ( context ) . strip ( ) )
   def validate ( self , value ) :
 self . var_name = var_name
  else :
   for check in checks :
                  guessed_filename += ext
          return path . encode ( fs_encoding )
  except DatabaseError as e :
                  del _error_files [ _error_files . index ( filename ) ]
          self . template_parser = parser
                  if not self . can_import_settings :
                   qs = f . value_from_object ( instance )
          unifunc = results [ "unifunc" ]
   def render_js ( self ) :
       check_for_migrations ( app_config , connection )
   def __repr__ ( self ) :
          if hasattr ( self , 'error_dict' ) :
              timeout = self . default_timeout
          time_str = time_str . decode ( 'utf-8' )
   def address_string ( self ) :
          del _active . value
 nodes = [ ]
              self . _servers = server
 return df . format ( format_string )
 if template is None :
 message_context = None
  try :
  delattr ( self . _wrapped , name )
          for event , node in self . event_stream :
 value = '.' . join ( reversed ( parts ) )
   def is_silenced ( self ) :
 from io import StringIO
 if isinstance ( unicode_value , six . text_type ) :
      try :
                  result . parent = self
  else :
      return lazy ( func , * resultclasses ) ( * args , ** kwargs )
          return self . __class__ ( [  ( k , v [ : ] )  for k , v in self . lists ( )  ] )
          return "<BaseConverter: base%s (%s)>" % ( len ( self . digits ) , self . digits )
      hidden_widget = MultipleHiddenInput
  opts = instance . _meta
 get_function_code = operator . attrgetter ( _func_code )
          from django . utils . html import strip_spaces_between_tags
 try :
 def timesince_filter ( value , arg = None ) :
   @ property
                  if not self . fail_silently :
      def __init__ ( self , * args , ** kwargs ) :
          kw = match . groupdict ( )
            args [ 1 : 2 ] = [ '"%s"' % arg for arg in args [ 1 ] . split ( "," ) ]
 self . stdout . write ( "  You should commit this migration but leave the old ones in place;" )
              settings . configure ( )
 sign = '-' if seconds < 0 else '+'
 sys . stderr . write ( "Unknown command: %r\nType '%s help' for usage.\n" %  ( subcommand , self . prog_name ) )
  if filename . endswith ( "$py.class" ) :
                              data = raw_data
  for name in MEDIA_TYPES :
  basedirs . extend ( settings . LOCALE_PATHS )
   def _has_changed ( self , initial , data ) :
 sec = int ( m . group ( 'sec' ) )
 background = dict ( ( color_names [ x ] , '4%s' % x ) for x in range ( 8 ) )
 res = to_digits [ digit ] + res
  except Exception :
                  name = self . split_leading_dir ( name ) [ 1 ]
 try :
  if not getattr ( self , 'nodelist' , False ) :
   if self . verbosity > 0 or self . interactive :
   else :
        def parse_cookie ( cookie ) :
  def add_arguments ( self , parser ) :
      help = "Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s)."
              try :
  except ( ValueError , KeyError ) :
              return _cached_filenames
  else :
                      self . keyOrder . append ( key )
     if len ( fixture_files_in_dir ) > 1 :
 result = ugettext ( msg_with_ctxt )
          value = [ conditional_escape ( v ) for v in value ]
 if num > self . _max_entries :
 if param :
                              message_context = message_context . strip ( "'" )
                       name = self . get_available_name ( name )
  buffering = int ( six . PY3 )
   def __bool__ ( self ) :
 for refto , refs in references . items ( ) :
  else :
                          self . _css . setdefault ( medium , [ ] ) . append ( path )
 xgettext_options = [ '--from-code=UTF-8' , '--add-comments=Translators' ]
          self . _archive . close ( )
         else :
   def camel_case_to_spaces ( value ) :
 field_notes . append ( 'Field renamed because of name conflict.' )
     class SingleZipReader ( zipfile . ZipFile ) :
   def validate ( self , value ) :
  CONVERT_PATTERN = re . compile ( r'^(?P<prefix>[a-z]+)://(?P<suffix>.*)$' )
                  continue
   else :
 p = language . find ( '-' )
 for field in concrete_model . _meta . local_fields :
              self . stdout . write ( "Flush cancelled.\n" )
 if pattern . name is not None :
              context [ self . asvar ] = result
              content = f . read ( )
 try :
              if csrf_token == 'NOTPROVIDED' :
              handler . addQuickElement ( "language" , self . feed [ 'language' ] )
  else :
  elif simple_url_2_re . match ( middle ) :
   filelist = random . sample ( filelist ,  int ( num_entries / self . _cull_frequency ) )
 self . size = size
 stream = open ( output , 'w' ) if output else None
   def render ( self , context ) :
 self . xgettext_options = self . xgettext_options [ : ] + [ '--no-wrap' ]
 try :
 return tpl . format ( self . name , self . sysid , self . pubid )
          kw = match . groupdict ( )
                               root , = nonlocal_root
          cookies = '<could not parse>'
              app_configs = [ app_config ]
          new_class = ( super ( MediaDefiningClass , mcs )  . __new__ ( mcs , name , bases , attrs ) )
          path = [ path ]
 zfile . flush ( )
 html = starttag_re . sub ( '' , html )
              return None
  models . signals . pre_migrate . send (  sender = app_config ,  app_config = app_config ,  verbosity = verbosity ,  interactive = interactive ,  using = db )
  else :
  return klass
          module = importlib . import_module ( '.%s' % flup_module , 'flup' )
 from django . core . files . utils import FileProxyMixin
              factor -= 1
  return
 token = parser . next_token ( )
   return style
          return hmac . compare_digest ( force_bytes ( val1 ) , force_bytes ( val2 ) )
    class CheckboxSelectMultiple ( RendererMixin , SelectMultiple ) :
                  pass
   def update ( self , other_dict ) :
  except Exception :
  if value [ 0 ] in self . empty_values and value [ 1 ] in self . empty_values :
 return self . _coerce ( value )
 from django . utils import six
    def new_file ( self , * args , ** kwargs ) :
          verbosity = options . get ( 'verbosity' )
   concrete_model = obj . _meta . concrete_model
          self . _assert_mutable ( )
    def deactivate_all ( ) :
 value = self . _convert_to_charset ( value , 'latin-1' , mime_encode = True )
              nodelist . contains_nontext = True
              if module_has_submodule ( app_config . module , "management" ) :
                      for fmatch in constant_re . findall ( t . contents ) :
          return unbound
   def getvalue ( self ) :
 mixed_subtype = 'mixed'
 if 'file_path' in kwargs :
              response = None
   except KeyError :
          orig_vars = cls . __dict__ . copy ( )
    class EmptyPage ( InvalidPage ) :
 def __init__ ( self , * args , ** kwargs ) :
  wrap = allow_lazy ( wrap , six . text_type )
 if message_context [ 0 ] == '"' :
   return directories , files
 self . validate_key ( key )
          try :
   def __deepcopy__ ( self , memo ) :
 new_args . append ( args [ : ] + i_args )
   else :
 if not match :
 @ stringfilter
              use_func = True
   def _base_set ( self , mode , key , value , timeout = DEFAULT_TIMEOUT ) :
  return value
          split = [ ]
                      view_name = callback . __name__
 palette = PALETTES [ NOCOLOR_PALETTE ] . copy ( )
               signals . got_request_exception . send ( sender = self . __class__ , request = request )
          text = text [ 1 : ]
   def __setattr__ ( self , name , value ) :
                  self . stdout . write ( "Checking %s for fixtures..." % humanize ( fixture_dir ) )
              if '--commands' in args :
 if settings . SETTINGS_MODULE :
                          return True
              self . namespaces = [ x for x in namespaces if x ]
              raise TypeError ( "If the flags are set, regex must be a regular expression string." )
              return ''
 return WEEKDAYS [ self . data . weekday ( ) ]
          errors = [ ]
               logger . removeHandler ( handler )
 self . META [ 'PATH_INFO' ] = path_info
                  replaces . extend ( migration . replaces )
              for bit in self . lookups :
          stream_or_string = stream_or_string . decode ( 'utf-8' )
  return value
  del attr
  def __dir__ ( self ) :
    chunk = stream . read ( max_header_size )
 k = match . end ( )
              raise TypeError ( "invalid keyword arguments to print()" )
               if var . startswith ( '_(' ) and var . endswith ( ')' ) :
     if self . loaded_object_count > 0 :
  else :
 if not template_dirs :
  __all__ = ( 'Template' , 'Context' , 'RequestContext' , 'compile_string' )
    def get_language_bidi ( ) :
   if logging_config :
 open_method , mode = self . compression_formats [ cmp_fmt ]
 from django . utils . text import get_valid_filename
 @ stringfilter
 return RelatedObject ( cls . fk . rel . to , cls . model , cls . fk ) . get_accessor_name ( ) . replace ( '+' , '' )
   template_dir = self . handle_template ( options [ 'template' ] ,  base_subdir )
  msgmerge_options = [ '-q' , '--previous' ]
 parser . add_argument ( '--dry-run' , action = 'store_true' , dest = 'dry_run' , default = False ,  help = "Just show what migrations would be made; don't actually write them." )
   def serialize_headers ( self ) :
              if event == "START_ELEMENT" and node . nodeName == "object" :
 cls = extension_map . get ( ext )
              number = str ( number ) [ 1 : ]
 buffer_ = None
          self . name = name
    def start_serialization ( self ) :
   class DjangoUnicodeDecodeError ( UnicodeDecodeError ) :
           compressed = zlib . compress ( data )
 __setslice__ = complain
 if root :
 nodelist_loop = parser . parse ( ( 'empty' , 'endfor' , ) )
 statements = sql_indexes ( app_config , self . style , connection )
            if self . forms :
 def date ( value , arg = None ) :
     def compress_string ( s ) :
              return list ( self . iterkeys ( ) )
  else :
                  if attr in flags :
          wsgi_opts [ 'bindAddress' ] = options [ "socket" ]
 file_field_list = [ ]
 self . __kw = kw
 self . _table = table
              self . set ( key , value , timeout = timeout , version = version )
 if CONTEXT_SEPARATOR in result :
   def eval ( self , context ) :
 class Operator ( TokenBase ) :
     class BooleanField ( Field ) :
          return self . __name
 parser . add_argument ( '--all' , '-a' , action = 'store_true' , dest = 'all' ,  default = False , help = 'Updates the message files for all existing locales.' )
   @ property
 parser . UnparsedEntityDeclHandler = self . unparsed_entity_decl
 self . length = length
                  directories . append ( entry )
 handler = logging . StreamHandler ( )
          ch , escaped = next ( input_iter )
          return [ ]
 try :
  def __iter__ ( self ) :
 collect . extend ( settings . TEMPLATE_CONTEXT_PROCESSORS )
   elif self . verbosity == 3 :
   else :
              self . validators . append ( validators . MinLengthValidator ( int ( min_length ) ) )
                              if not hasattr ( e , 'django_template_source' ) :
              value = self . decompress ( value )
           return False
  if self . field . required and hasattr ( self . form , 'required_css_class' ) :
 pop = complain
  if command . verbosity > 1 :
              self . _cull_frequency = int ( cull_frequency )
    def normalize ( pattern ) :
  Module_six_moves_urllib_parse . _moved_attributes = _urllib_parse_moved_attributes
      def _key_to_file ( self , key , version = None ) :
          super ( Command , self ) . add_arguments ( parser )
     if self . paths_to_remove :
  if stream_created :
 val = force_text ( val )
   def to_python ( self , value ) :
   def start_object ( self , obj ) :
              mw_class = import_string ( middleware_path )
 try :
      def _make_decorator ( * m_args , ** m_kwargs ) :
                              data = base64 . b64decode ( raw_data )
                         self . stdout . write ( self . style . MIGRATE_HEADING ( "Full migrations file '%s':" % writer . filename ) + "\n" )
  if self . locale_paths :
      choice_input_class = CheckboxChoiceInput
    if not self . addr :
              attrs . update ( extra_attrs )
   return False
   def send ( self , fail_silently = False ) :
 app_dirs . append ( os . path . normpath ( os . path . join ( app_dir , 'sql' ) ) )
          return self . __offset
          s = s . decode ( 'utf-8' )
  try :
   def multiple_chunks ( self , chunk_size = None ) :
   else :
  class SimpleNode ( TagHelperNode ) :
                          index_sql = connection . creation . sql_indexes_for_model ( model , no_style ( ) )
                  try :
 if attrs is None :
    return False
 for name , tok in lexer . lex ( js ) :
   else :
     def find_files ( self , root ) :
 if len ( bits ) == 2 :
                   open_tags . insert ( 0 , tagname )
          return value [ - 1 ]
    def filter_function ( self , func , ** flags ) :
    if settings . is_overridden ( 'MANAGERS' ) :
 def do_extends ( parser , token ) :
  from django . core . mail . backends . base import BaseEmailBackend
              return self . nodelist_true . render ( context )
          return ( self . field . prepare_value ( obj ) , self . field . label_from_instance ( obj ) )
  result . append ( self . create_token ( self . template_string [ start : end ] , ( start , end ) , True ) )
                  self . close ( )
      def __init__ ( self , * args , ** kwargs ) :
    class HttpResponseServerError ( HttpResponse ) :
 if option_value in selected_choices :
 self . literal = None
                     self . _count = len ( self . object_list )
                  orig_vars . pop ( slots_var )
 self . _response_middleware = [ ]
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to synchronize. Defaults to the "default" database.' )
 symlink_path = os . path . join ( tmpdir , 'symlink' )
 parser . add_argument ( '--liveserver' ,  action = 'store' , dest = 'liveserver' , default = None ,  help = 'Overrides the default address where the live server (used '  'with LiveServerTestCase) is expected to run from. The '  'default value is localhost:8081.' ) ,
 from django . core import mail
   def get ( self , key , otherwise = None ) :
 from django . utils . encoding import force_text
  requires_system_checks = False
 return out
                  widget = form . _meta . widgets . get ( self . _pk_field . name , HiddenInput )
  target_app_labels_only = False
  if values is None :
  if options [ 'umask' ] :
  if data is not None :
  from django . forms . widgets import Widget , Select
              if not hasattr ( e , 'django_template_source' ) :
   def itervalues ( d , ** kw ) :
    class BaseCache ( object ) :
 def upper ( value ) :
 del logging . _handlerList [ : ]
 self . extend_nodelist ( nodelist , var_node , token )
 _globs_ = frame . f_globals
      return import_string ( import_path or settings . DEFAULT_FILE_STORAGE )
            raise CommandError ( "Django doesn't know which syntax to use for your SQL statements,\n" +  "because you haven't properly specified the ENGINE setting for the database.\n" +  "see: https://docs.djangoproject.com/en/dev/ref/settings/#databases" )
  httpd = httpd_cls ( server_address , WSGIRequestHandler , ipv6 = ipv6 )
  return result
               msg = self . style . HTTP_SERVER_ERROR ( msg )
              if isinstance ( other , Promise ) :
              if bit :
 from django . utils . encoding import iri_to_uri , force_bytes , force_text
          pass
  styles = instructions . split ( ',' )
  truncate = force_text ( truncate )
          return False
          return self . choice_value in self . value
    if self . _content_length == 0 :
          p = int ( arg )
 self . find_template_cache = { }
  self . pointer = self . backout . pop ( )
      SafeString = SafeText
 self . fixture_object_count = 0
 from django . utils . text import get_text_list , capfirst
 try :
          return force_str ( "<Text Node: '%s'>" % self . s [ : 25 ] , 'ascii' ,  errors = 'replace' )
 return _generate_cache_key ( request , request . method , [ ] , key_prefix )
    @ staticmethod
              raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be accessed.' )
 from django . utils . six . moves import reduce
 condition = TemplateIfParser ( parser , bits ) . parse ( )
   name = property ( _get_name , _set_name )
 def csrf_token ( parser , token ) :
   self . _regex_dict [ language_code ] = compiled_regex
          self . var = var
 output . append ( '\n\n' )
 if callable ( data ) :
 day = int ( m . group ( 'day' ) )
    form . fields [ name ] = InlineForeignKeyField ( self . instance , ** kwargs )
          query = query . lists ( )
 connection . close ( )
   return super ( ModelChoiceField , self ) . prepare_value ( value )
                   query_string = query_string . decode ( )
              raise ValidationError ( self . error_messages [ 'list' ] , code = 'list' )
    model_dependencies . append ( ( model , deps ) )
          return "Error in formatting: %s" % force_text ( e , errors = "replace" )
              self . remove ( item )
 self . _chunk_size = min ( [ 2 ** 31 - 4 ] + possible_sizes )
   except IndexError :
    def handle ( self , * args , ** options ) :
  else :
          return self . s
 def __newobj__ ( cls , * args ) :
   def __repr__ ( self ) :
 if options :
                return ( self . __newobj__ , ( self . __class__ , ) , self . __getstate__ ( ) )
                      old_handler = signal . signal ( signal . SIGTTOU , signal . SIG_IGN )
              os . utime ( path , None )
  return path
    changes = autodetector . changes (  graph = loader . graph ,  trim_to_apps = app_labels or None ,  convert_apps = app_labels or None ,  )
          def as_bytes ( self , unixfrom = False ) :
  cc = ', ' . join ( dictvalue ( el ) for el in cc . items ( ) )
              return f
 from inspect import getargspec , getcallargs
 best_doublecolon_start = doublecolon_start
  parser . _namedCycleNodes [ name ] = node
    else :
 if self . active_readers == 0 and self . waiting_writers != 0 :
          parser . add_argument ( 'addrport' , nargs = '?' ,  help = 'Optional port number, or ipaddr:port' )
              k = force_bytes ( k , self . encoding )
    elif isinstance ( message , list ) :
class FileProxyMixin ( object ) :
  if self . verbosity >= 2 :
   class Command ( AppCommand ) :
 silent_variable_failure = True
                            errors . append ( self . get_date_error_message ( date_check ) )
 from ctypes . wintypes import BOOL , DWORD , HANDLE
    def npath ( path ) :
  if delta < 0 :
  unencoded_ampersands_re = re . compile ( r'&(?!(\w+|#\d+);)' )
 try :
                      if len ( args ) != len ( params ) + len ( prefix_args ) :
 def __init__ ( self , name , content , content_type = 'text/plain' ) :
  self . from_email = from_email or settings . DEFAULT_FROM_EMAIL
  except ( AttributeError , TypeError ) :
  self . xml . endElement ( "field" )
  if errors :
 from django . forms . fields import *
      from pkg_resources import resource_string
          c = cookie
    return ''
  return self . nodelist . render ( new_context )
     elif field in self . _errors . keys ( ) :
 if _locs_ is None :
                      label = ''
   for opening , closing in WRAPPING_PUNCTUATION :
 if value is not result :
      help = 'Runs a development server with data from the given fixture(s).'
   def lock ( f , flags ) :
               self . tags [ name ] = compile_function
          return escape ( value )
           return self . client_address [ 0 ]
  def __init__ ( self , tokens ) :
  for finder in sys . meta_path :
  from django . utils import six
           raw_query_string = get_bytes_from_wsgi ( self . environ , 'QUERY_STRING' , '' )
   output . append ( normal_row % {  'errors' : force_text ( bf_errors ) ,  'label' : force_text ( label ) ,  'field' : six . text_type ( bf ) ,  'help_text' : help_text ,  'html_class_attr' : html_class_attr ,  'field_name' : bf . html_name ,  } )
          input_val = force_text ( text )
          return commands
 return iter ( self . forms )
   def receive_data_chunk ( self , raw_data , start ) :
    def get_format ( format_type , lang = None , use_l10n = None ) :
  except InvalidOperation :
    def _explode_shorthand_ip_string ( ip_str ) :
      class ComboField ( Field ) :
              if is_library_missing ( taglib_module ) :
   def __deepcopy__ ( self , memo ) :
              year_val , month_val , day_val = value . year , value . month , value . day
     class BaseArchive ( object ) :
 return value . replace ( " " , "\xa0" )
   nodelist = parser . parse ( ( 'endfilter' , ) )
 self . connector = conn_type
    obj = base . build_instance ( Model , data , self . db )
 host_validation_re = re . compile ( r"^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$" )
              deactivate ( )
              f . save_form_data ( instance , cleaned_data [ f . name ] )
  except ImportError as e :
   def popitem ( self ) :
                       name = "_%d" % num_args
   self . state = first
 self . current_token = self . next_token ( )
              return
    def _string_concat ( * strings ) :
  def __init__ ( self , template , context = None , content_type = None , status = None ) :
   literal_match = self . literal_regex . match ( domain_part )
  emitting = chunk [ : remaining ]
              connection_params [ 'timeout' ] = self . timeout
  import re
  return super ( classonlymethod , self ) . __get__ ( instance , owner )
  else :
 media = Media ( )
  else :
 self . validate_key ( key )
 stats [ HITS ] += 1
     def incr_version ( self , key , delta = 1 , version = None ) :
              raise CommandError ( "Can't find %s. Make sure you have GNU gettext "  "tools 0.15 or newer installed." % self . program )
   def render ( self ) :
 yield "# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'"
   return value
    try :
          if parse_until :
 models = app_config . get_models ( include_auto_created = True )
                                  handler . new_file ( field_name , file_name ,  content_type , content_length ,  charset , content_type_extra )
  raise value
   if i == 0 and not is_writable ( npath ( base_path + '.mo' ) ) :
                  current_fields . append ( ( key , value ) )
          cc = cc_delim_re . split ( response [ 'Cache-Control' ] )
 cache = _create_cache ( backend , ** kwargs )
 start = 0
          value = datetime_safe . new_datetime ( value )
              try :
 if not self . leave_locale_alone :
 def fixture_dirs ( self ) :
   def __iter__ ( self ) :
 return make_middleware_decorator ( middleware_class )
  from django . conf import settings
 self . localized_fields = getattr ( options , 'localized_fields' , None )
 self . use_l10n = use_l10n
 counters = [ 0 ] * len ( handlers )
 self . validate_key ( key )
  return _decorator
 hextet = ip_str . split ( '::' )
 leave_locale_alone = False
  else :
  else :
                      pass
              t = self . current_token
   except GeneratorExit :
  else :
 class ContentFile ( File ) :
    _builtin_context_processors = ( 'django.core.context_processors.csrf' , )
                  local , domain = middle . rsplit ( '@' , 1 )
 key += kwd_mark
  reset_sequences = options . get ( 'reset_sequences' , True )
          raise TemplateSyntaxError ( "'%s' cannot appear more than once in the same template" % bits [ 0 ] )
 request_class = WSGIRequest
   except ImportError :
                  return func . __get__ ( self , type ( self ) ) ( * args2 , ** kwargs2 )
 assert version [ 3 ] in ( 'alpha' , 'beta' , 'rc' , 'final' )
                      if t in self . __dispatch :
          warnings . warn ( "Custom SQL location '<app_label>/models/sql' is "  "deprecated, use '<app_label>/sql' instead." ,  RemovedInDjango19Warning )
import os
      class InlineForeignKeyField ( Field ) :
 parse = sys . modules [ __name__ + ".moves.urllib_parse" ]
   def _get_count ( self ) :
 chunk = handler . receive_data_chunk ( chunk ,  counters [ i ] )
   else :
    except OSError :
   else :
  return '%s%s' % ( ( '\x1b[%sm' % ';' . join ( code_list ) ) , text or '' )
   def L ( self ) :
   def tell ( self ) :
               attrs . update ( { 'maxlength' : str ( self . max_length ) } )
   try :
  self . new_objects . append ( self . save_new ( form , commit = commit ) )
    def i18n ( request ) :
 comment = [ ]
                                          cursor . execute ( sql )
 app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
                      attrs [ 'class' ] += ' ' + self . form . required_css_class
  if end is None :
 new_args = [ ]
  return self . _errors
 parser . delete_first_token ( )
     class Input ( Widget ) :
              doublecolon_len = 0
 hidden_widget = MultipleHiddenInput
 _cached_modules = set ( )
          return six . text_type ( s , encoding , 'replace' )
 with connections [ db ] . cursor ( ) as cursor :
       def __init__ ( self , name , old , new = None ) :
          raise BadHeaderError ( "Header values can't contain newlines (got %r for header %r)" % ( val , name ) )
              data = compressed
              mtime -= stat . st_ctime
    def _check_test_runner ( app_configs = None , ** kwargs ) :
                      response = view_func ( request , * args , ** kwargs )
  except InputStreamExhausted :
  if ( i - day_of_year ) < ( 4 - weekday ) :
              error_dict . setdefault ( NON_FIELD_ERRORS , [ ] ) . extend ( self . error_list )
 ignore_patterns = options . get ( 'ignore_patterns' )
 class MaxValueValidator ( BaseValidator ) :
 walk_to_end ( ch , pattern_iter )
          try :
   if formfield_callback is None :
 endpos = self . check_for_whole_start_tag ( i )
                      self . stdout . write ( self . style . NOTICE ( "  Your models have changes that are not yet reflected in a migration, and so won't be applied." ) )
                  var , constant = match . group ( "var" , "constant" )
  except http_cookies . CookieError :
  else :
  raise Resolver404 ( { 'path' : path } )
 rest = value
 changes = autodetector . changes ( graph = executor . loader . graph )
  args_check = staticmethod ( args_check )
 sublist = '\n%s<ul>\n%s\n%s</ul>\n%s' % ( indent , sublist ,  indent , indent )
 sub = mapping [ version [ 3 ] ] + str ( version [ 4 ] )
                      state = tok . next
              client . behaviors = self . _options
       def close ( self ) :
          self . filter_expression = filter_expression
  output . append ( '</select>' )
   elif cwords [ 0 ] in ( 'dumpdata' , 'sql' , 'sqlall' , 'sqlclear' ,  'sqlcustom' , 'sqlindexes' , 'sqlsequencereset' , 'test' ) :
  if item [ 'author_link' ] is not None :
              msg = self . style . HTTP_NOT_MODIFIED ( msg )
 p = locale . find ( '_' )
                              terminal_char = ')'
 path_info = get_bytes_from_wsgi ( environ , 'PATH_INFO' , '/' )
 return errors
     @ register . filter ( is_safe = False )
  for migration in app_migrations :
 if not config_string :
 def loaders ( self ) :
          def lock ( f , flags ) :
    def cache_info ( ) :
 key = bytes_to_text ( key , self . encoding )
  self . environ = environ
 file_root , file_ext = os . path . splitext ( file_name )
 self . stdout . write ( "  the new migration will be used for new installs. Once you are sure" )
      import bz2
  except KeyError as key :
              now = datetime . utcnow ( )
                  for f in sorted ( os . listdir ( self . path ) ) :
                      return ( fp . read ( ) . decode ( settings . FILE_CHARSET ) , filepath )
     parent = ( object , )
 from __future__ import unicode_literals
 name = self . _save ( name , content )
              value = tuple ( value )
 yield "# You'll have to do the following manually to clean this up:"
 self . active_readers = 0
  def add_arguments ( self , parser ) :
    def __repr__ ( self ) :
  return forms_valid and not self . non_form_errors ( )
   def tag ( self ) :
      mime_type = 'application/rss+xml; charset=utf-8'
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
              value = ''
 for candidate in ( ( d not in models or d in model_list ) for d in deps ) :
              continue
      help = "Starts a lightweight Web server for development."
     def get_path_info ( environ ) :
          main_value_pair , params = parse_header ( line )
 if _localtime is None :
  if option [ 1 ] :
  if number > self . num_pages :
   def clear ( self ) :
 parser . add_argument ( '--no-default-ignore' , action = 'store_false' , dest = 'use_default_ignore_patterns' ,  default = True , help = "Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'." )
   try :
    for app_config in apps . get_app_configs ( ) :
  self . backout . append ( self . pointer )
  return attrs
          if not self :
  except KeyError :
  if options [ "host" ] and options [ "port" ] and not options [ "socket" ] :
  return dec
                  s = six . text_type ( s )
          if path . startswith ( ( 'http://' , 'https://' , '/' ) ) :
 def __init__ ( self , form , field , name ) :
   def led ( self , left , parser ) :
   sys . exit ( 1 )
                          locks . unlock ( fd )
  common_ancestor = None
                  raise TemplateSyntaxError ( "'%s' is not a valid tag library: %s" %  ( taglib , e ) )
       from django . db . migrations . loader import MigrationLoader
          return force_str ( self . _tzname )
   def _get_regex ( self ) :
              self . _client = self . _lib . Client ( self . _servers )
      def __init__ ( self , * args , ** kwargs ) :
 MONTHS_3_REV = {  'jan' : 1 , 'feb' : 2 , 'mar' : 3 , 'apr' : 4 , 'may' : 5 , 'jun' : 6 , 'jul' : 7 , 'aug' : 8 ,  'sep' : 9 , 'oct' : 10 , 'nov' : 11 , 'dec' : 12  }
  except ValueError :
   def all ( self ) :
                              obj = field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * field_value )
  elif len ( fks_to_parent ) == 0 :
          raise Exception ( "This %s instance is not writable" % self . __class__ . __name__ )
  else :
  sub_ul_renderer = ChoiceFieldRenderer ( name = self . name ,  value = self . value ,  attrs = attrs_plus ,  choices = choice_label )
 d = d [ n ]
 if i + 1 < len ( chunks ) :
  for name , value in self . extra_headers . items ( ) :
      print ( FASTCGI_HELP )
                          objects = model . _default_manager
          del _prefixes . value
     if value != value or value == Decimal ( "Inf" ) or value == Decimal ( "-Inf" ) :
                  self . first = False
 self . _caches . caches [ alias ] = cache
 id_ = widget . attrs . get ( 'id' ) or self . auto_id
   for key , op in OPERATORS . items ( ) :
 from django . core . files . move import file_move_safe
  final_attrs = self . build_attrs ( attrs , name = name )
      def get_unbound_function ( unbound ) :
              for obj in self . queryset . all ( ) :
 if hasattr ( timezone , 'normalize' ) :
 strip_prefix = lambda s : s [ 1 : ] if s . startswith ( "u'" ) else s
              res = to_digits [ 0 ]
          self . _read_started = True
 self . _non_form_errors = None
    hextets = ip_str . split ( ":" )
          return "(%s %r)" % ( self . id , self . value )
 parser . add_argument ( '--settings' )
  def __init__ ( self ) :
  localize = kwargs . get ( 'localize' , False )
 if isinstance ( value , list ) :
  if exclude and f . name in exclude :
   def is_valid ( self ) :
 for sublist in second_item :
 sep = kwargs . pop ( "sep" , None )
   @ HttpResponse . content . setter
          return self . get_renderer ( name , value , attrs , choices ) . render ( )
   _drive_re = re . compile ( '^([a-z]):' , re . I )
 return id_
 return self . data . month
   def clean ( self , value ) :
  from django . db . models . fields . related import ManyToManyField
 self . validate_name ( project_name , "project" )
                  return format_html ( "<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />" , csrf_token )
    if self . merge and not conflicts :
   @ property
 if name :
                              out . write ( ' npgettext(%r, %r, %r,count) ' % (  message_context ,  join_tokens ( singular , trimmed ) ,  join_tokens ( plural , trimmed ) ) )
 self . xml . characters ( smart_text ( key_value ) )
              handler . startElement ( "entry" , self . item_attributes ( item ) )
                  newretval = post_callback ( retval )
  else :
              handler . addQuickElement ( "ttl" , item [ 'ttl' ] )
   def add_blocks ( self , blocks ) :
 if not self . _is_rendered :
  root = max ( roots )
   def _create_attachment ( self , filename , content , mimetype = None ) :
 if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
 if self . use_ipv6 and not socket . has_ipv6 :
  else :
          yield bit . group ( 0 )
      def render ( self , context ) :
 UnlockFileEx . restype = BOOL
  return value . strip ( )
 for ldir in dirs :
                  pass
 self . nodelist_loop = nodelist_loop
              value = '-' + value
      def __init__ ( self , * args , ** kwargs ) :
              field_type = 'TextField'
 return MONTHS_AP [ self . data . month ]
              cursor . execute ( "SELECT cache_key, value, expires FROM %s "  "WHERE cache_key = %%s" % table , [ key ] )
 kwargs = dict ( ( smart_text ( k , 'ascii' ) , v . resolve ( context ) )  for k , v in self . kwargs . items ( ) )
                  self . stdout . write ( "Cleaning up temporary files.\n" )
          self . object_list = object_list
 import calendar
 pass
 if self . feed [ 'author_email' ] is not None :
           return __proxy__ ( args , kw )
 self . _exception_middleware = [ ]
                      if latest_date is None or item_date > latest_date :
              primary_keys = [ ]
              token = self . next_token ( )
                  output . append ( label_output )
      return lazy_number ( npgettext , six . text_type , context = context , singular = singular , plural = plural , number = number )
   return False
                      self . setlistdefault ( key ) . extend ( value_list )
 _func_globals = "__globals__"
  return value if six . PY2 else value . encode ( ISO_8859_1 ) . decode ( UTF_8 )
          return date_format ( value , use_l10n = use_l10n )
   def __get__ ( self , instance , type = None ) :
              yield d
          _default = translation ( settings . LANGUAGE_CODE )
   def __contains__ ( self , key ) :
                timeout = - 1
  kwargs [ 'number' ] = number_value
 return DebugNode ( )
          if hextet . count ( '.' ) == 3 :
              encoding = settings . DEFAULT_CHARSET
                  end -= 1
              lookup_view_s = "%s.%s" % ( m , n )
 import logging
  else :
   def __str__ ( self ) :
   def handle_field ( self , obj , field ) :
   exp = connections [ db ] . ops . value_to_db_datetime ( exp )
  sys . modules [ __name__ + ".moves.urllib_error" ] = sys . modules [ __name__ + ".moves.urllib.error" ] = Module_six_moves_urllib_error ( __name__ + ".moves.urllib.error" )
          return input_val
 for d in reversed ( self . dicts ) :
 self . lineno = None
  except TemplateDoesNotExist :
                  pass
                      args . append ( ( True , Variable ( var_arg ) ) )
  except ImportError :
   def filter ( self , record ) :
   def _iteritems ( self ) :
 with lock :
    @ property
  with connections [ db ] . cursor ( ) as cursor :
  try :
 if self . use_natural_keys :
    class MiddlewareNotUsed ( Exception ) :
   def render ( self , context ) :
 if item_date :
          sample = f . read ( 4 )
  if isinstance ( s , bytes ) or ( isinstance ( s , Promise ) and s . _delegate_bytes ) :
 if html_message :
                              if self . verbosity >= 3 :
  elif timeout == 0 :
 if not unused_char :
   errors = [ ]
 from django . utils import six
 parser . add_argument ( '--indent' , default = None , dest = 'indent' , type = int ,  help = 'Specifies the indent level to use when pretty-printing output.' )
 _format_cache = { }
          result = super ( SortedDict , self ) . popitem ( )
   def __getinitargs__ ( self ) :
                        pass
  return value
   elif len ( key ) == 1 and type ( key [ 0 ] ) in fasttypes :
          try :
 return force_text ( unquote ( force_str ( quoted_url ) ) )
                  os . kill ( os . getpid ( ) , - exit_code )
                  self . _set ( key , pickled , timeout )
      else :
 if self . _options :
 sites1 = _findall ( s1 , str ( year ) )
    if hasattr ( hashlib , "pbkdf2_hmac" ) :
    @ register . filter ( is_safe = True , needs_autoescape = True )
   self . _callback_strs = set ( )
 if self . verbosity >= 1 :
          if accept_lang == '*' :
  except MiddlewareNotUsed :
   filesize_number_format = lambda value : formats . number_format ( round ( value , 1 ) , 1 )
  else :
 value = getattr ( obj , field . rel . field_name )
                          continue
              memo = { }
 import hashlib
  created_models = self . sync_apps ( connection , executor . loader . unmigrated_apps )
              if cleaned_data is not None :
  else :
   def to_python ( self , value ) :
   if not now :
  elif isinstance ( rhs , SafeBytes ) :
   def start_object ( self , obj ) :
 self . xml . endElement ( "django-objects" )
   def server_bind ( self ) :
              def __mod__ ( self , rhs ) :
 BASE16_ALPHABET = '0123456789ABCDEF'
 msgattrib_options = [ '--no-obsolete' ]
          if not hasattr ( e , 'django_template_source' ) :
          for d in reversed ( self . dicts ) :
   def get_current_timezone ( ) :
              yield node
          from django . core . servers . fastcgi import FASTCGI_HELP
          nodelist_false = NodeList ( )
  try :
 return '\n' . join ( statements )
  except ( IndexError , TypeError , ValueError ) :
  for k , list_ in self . lists ( ) :
  else :
  else :
 return
  self . path = ''
    return [ self . forms [ i ] for i in self . _deleted_form_indexes ]
      class SelectDateWidget ( Widget ) :
                  self . _post , self . _files = self . parse_file_upload ( self . META , data )
      if used_name != guessed_filename :
    else :
  else :
  key = ':' . join ( urlquote ( var ) for var in vary_on )
              handler . startElement ( "author" , { } )
              msg = self . style . HTTP_BAD_REQUEST ( msg )
                      return "[Included template had syntax error: %s]" % e
              raise TemplateSyntaxError ( "widthratio final argument must be a number" )
 from django . utils . encoding import force_bytes , force_text , iri_to_uri
                  if self . verbosity > 0 :
              raise ImproperlyConfigured ( 'Path for saving email messages exists, but is not a directory: %s' % self . file_path )
      return compiled_parent . _render ( context )
              handler . addQuickElement ( "copyright" , self . feed [ 'feed_copyright' ] )
    def get_language_from_path ( path ) :
          while self . tokens :
  if decimal_pos is not None :
 orig_vars . pop ( '__weakref__' , None )
 self . namespace = namespace
              with io . open ( fd , 'wb' ) as f :
  else :
           if ( hasattr ( self . cmd , 'missing_args_message' ) and  not ( args or any ( [ not arg . startswith ( '-' ) for arg in args ] ) ) ) :
 if formatter :
  else :
 from django . utils . http import urlquote
   @ python_2_unicode_compatible
                      self . stdout . write ( '\n' + self . style . SQL_KEYWORD ( connection . ops . end_transaction_sql ( ) ) )
          return self . tokens . pop ( 0 )
  except AttributeError :
                  return getattr ( self , shell ) ( )
 _expire_info = { }
              qs = queryset . filter ( ** { self . fk . name : self . instance } )
 return '' . join ( rendered_widgets )
  return check
   from django . conf import settings
          from django . apps import apps
              return get_supported_language_variant ( accept_lang )
   basedirs = [ os . path . join ( 'conf' , 'locale' ) , 'locale' ]
                  num += 1
                  errors = getattr ( fp , "errors" , None )
     class MemcachedCache ( BaseMemcachedCache ) :
                    self . children . append ( data )
          self . nodelist = nodelist
   def handle ( self , ** options ) :
   def end_object ( self , obj ) :
                   result . append ( ch )
    except PermissionDenied :
                  if field != NON_FIELD_ERRORS and field not in self . fields :
   def render ( self , name , value , attrs = None ) :
              raise OverflowError ( 'dklen too big' )
 message = _ ( 'Ensure this value is less than or equal to %(limit_value)s.' )
 from django . core . wsgi import get_wsgi_application
          if json . __version__ . split ( '.' ) >= [ '2' , '1' , '3' ] :
  return self . _regex_dict [ language_code ]
                  assert remaining > 0 , 'remaining bytes to read should never go negative'
  if hasattr ( mw_instance , 'process_exception' ) :
          value = ugettext ( "%s MB" ) % filesize_number_format ( bytes / MB )
          self . close ( )
              self . file . __exit__ ( exc , value , tb )
   try :
  def __init__ ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None ,  connection = None , attachments = None , headers = None , cc = None ) :
                  if e . errno == errno . EEXIST :
    else :
  return callback [ : dot ] , callback [ dot + 1 : ]
 if header == 'ACCEPT_LANGUAGE' and is_accept_language_redundant :
 patch_response_headers ( response , cache_timeout = - 1 )
  else :
                          current = settings . TEMPLATE_STRING_IF_INVALID
          super ( EmailBackend , self ) . __init__ ( fail_silently = fail_silently )
                  raise UnrecognizedArchiveFormat (  "File object not a recognized archive format." )
 result = self . configure_custom ( config )
  pythonrc = os . path . expanduser ( pythonrc )
  kwargs [ key ] = parser . compile_filter ( value )
              try :
  return decorator ( * args , ** kwargs )
 from django . forms . widgets import HiddenInput
 self . port = port or settings . EMAIL_PORT
 for i , v in enumerate ( value ) :
         for cache in caches . all ( ) :
          iterator = ChunkIter ( stream_or_iterable , 16384 )
    def reset_translations ( ) :
  file_move_safe ( tmp_path , fname , allow_overwrite = True )
 return _slugify ( value )
          raise SerializerDoesNotExist ( format )
  class HTMLParser ( _html_parser . HTMLParser ) :
              self . cookies [ key ] [ 'domain' ] = domain
          raise TemplateSyntaxError ( "'templatetag' statement takes one argument" )
   flup_module = 'server.' + options [ 'protocol' ]
                        continue
    self . end_object ( obj )
          if value != self . empty_value :
   templatetags_modules = _templatetags_modules
 self . asvar = asvar
   def open ( self , mode = None ) :
 try :
          BaseCache . __init__ ( self , params )
                      s = six . text_type ( s , encoding , errors )
          paras = [ '<p>%s</p>' % escape ( p ) . replace ( '\n' , '<br />' ) for p in paras ]
          max_num = DEFAULT_MAX_NUM
          choice = self . choices [ idx ]
    except ValueError :
   def convert_old_style_list ( list_ ) :
              token = Token ( TOKEN_TEXT , token_string )
  requires_system_checks = False
          response [ 'Last-Modified' ] = http_date ( )
                  i = 366
     class DateField ( BaseTemporalField ) :
 resolver = urlresolvers . RegexURLResolver ( r'^/' , urlconf )
              data = [ ]
                  raise CommandError ( "Destination directory '%s' does not "  "exist, please create it first." % top_dir )
 for loader_name in settings . TEMPLATE_LOADERS :
    class HttpResponseRedirect ( HttpResponseRedirectBase ) :
 if sign in self . digits :
 MIN_NUM_FORM_COUNT = 'MIN_NUM_FORMS'
  yield '    %s' % field_desc
 message = ungettext_lazy (  'Ensure this value has at least %(limit_value)d character (it has %(show_value)d).' ,  'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' ,  'limit_value' )
 self . hint = hint
 from django . conf import settings
   try :
 for f in opts . concrete_fields + opts . virtual_fields + opts . many_to_many :
    try :
          _ExpatParser . reset ( self )
  return '' . join ( random . choice ( allowed_chars ) for i in range ( length ) )
 parser . skip_past ( 'endcomment' )
  from __future__ import unicode_literals
          nodelist_false = NodeList ( )
          if args and kwargs :
  return render_value_in_context ( output , context )
 return remove_tags ( value , tags )
          return mark_safe ( six . text_type ( number ) )
 @ stringfilter
 if t is not None :
 from django . utils . deprecation import RemovedInNextVersionWarning
 from email . mime . base import MIMEBase
 old_method = base . __dict__ . get ( old_method_name )
 if isinstance ( s , Promise ) :
  for line in chunk_buffer :
              del self . _cache [ key ]
  migration_string = writer . as_string ( )
                      data [ field . attname ] = None
                  not_found . append ( e . args [ 0 ] )
  from django . core . management . base import AppCommand
   def delete ( self , key , version = None ) :
          return cls . __new__ ( cls , * args )
 self . html_initial_id = form . add_initial_prefix ( self . auto_id )
                  error_text = str ( e )
       self . LibraryValueNotFoundException = value_not_found_exception
          raise self . error ( token , "Empty block tag" )
 db = router . db_for_read ( self . cache_model_class )
 handler . addQuickElement ( "link" , "" , { "rel" : "alternate" , "href" : self . feed [ 'link' ] } )
              if self . decimal_places is not None :
              return None
              msg = self . style . HTTP_NOT_FOUND ( msg )
 self . _options = params . get ( 'OPTIONS' , None )
 value = re . sub ( '[^\w\s-]' , '' , value ) . strip ( ) . lower ( )
    def cache_clear ( ) :
 if six . PY2 and not isinstance ( path , six . text_type ) :
          return get_supported_language_variant ( settings . LANGUAGE_CODE )
                      self . stdout . write ( "Installing %s fixture '%s' from %s." %  ( ser_fmt , fixture_name , humanize ( fixture_dir ) ) )
              return s . decode ( 'utf-8' , errors ) . encode ( encoding , errors )
   def __repr__ ( self ) :
              ns = path . pop ( )
  return '' . join ( c )
  except UnicodeDecodeError :
  args = [ 'msguniq' ] + self . msguniq_options + [ potfile ]
 for exclude in excludes :
 if not_installed_models :
                            walk_to_end ( ch , pattern_iter )
   self . invoked_for_django = False
          raise TypeError ( s )
 if value is not result :
 incomment = False
                                      for sql in index_sql :
              if key in dict_ :
          key = self . make_key ( key , version = version )
                                  mode = 'wb' if isinstance ( chunk , bytes ) else 'wt'
    def tz ( request ) :
          return timedelta ( 0 )
  if len ( parts ) > 1 and parts [ - 1 ] in self . compression_formats :
 for f in fields :
              raise ValueError ( "@python_2_unicode_compatible cannot be applied "  "to %s because it doesn't define __str__()." %  klass . __name__ )
 for header in headerlist :
 if definition :
                  yield safe_join ( template_dir , template_name )
from importlib import import_module
              val = Header ( val , encoding ) . encode ( )
  lexer = lexer_class ( template_string , origin )
  height = property ( _get_height )
 return func ( * resolved_args , ** resolved_kwargs )
              return val if isinstance ( val , bytes ) else val . encode ( encoding )
  return int ( timeout )
          if not hasattr ( self , '_fqdn' ) :
 if len ( compressed ) < ( len ( data ) - 1 ) :
    if html :
 from datetime import datetime
 return obj
   def start_serialization ( self ) :
 from __future__ import unicode_literals
    def _i18n_cache_key_suffix ( request , cache_key ) :
  from django . apps import apps
                              if self . verbosity >= 2 :
     class InterBoundaryIter ( six . Iterator ) :
 self . keep_pot = options . get ( 'keep_pot' )
  import django
  except ValueError :
      pass
 def streaming_content ( self , value ) :
  else :
          return
                  logger . removeHandler ( h )
    def has_leading_dir ( self , paths ) :
          return None
     def media_property ( cls ) :
              key = self . to_field_name or 'pk'
  db = router . db_for_read ( self . cache_model_class )
                  raise ValueError ( "Could not find common ancestor of %s" % migration_names )
 self . buffer = self . buffer [ size : ]
    for app_config in apps . get_app_configs ( ) :
 self . _num_pages = self . _count = None
                  raise CommandError (  "Problem installing fixture '%s': %s is not a known "  "serialization format." % ( '' . join ( parts [ : - 1 ] ) , parts [ - 1 ] ) )
      string_types = str ,
    @ register . tag
 relative_dir = path_rest . replace ( base_name , name )
                      e . message = self . error_messages [ e . code ]
    def add_prefix ( self , index ) :
 current_len = 0
  return context_extras
      def __init__ ( self , template_string , origin ) :
    count = itertools . count ( 1 )
              confirm = 'yes'
              self . locale_paths = [ os . path . abspath ( os . path . join ( 'conf' , 'locale' ) ) ]
 if self . fk . rel . field_name != self . fk . rel . to . _meta . pk . name :
 pass
           daemonize = ( wsgi_opts [ 'bindAddress' ] is not None )
 base16 = BaseConverter ( BASE16_ALPHABET )
 link = [ last , root , key , result ]
              continue
                  yield choice
   def is_multipart ( self ) :
               param , value = list ( six . iteritems ( kwarg ) ) [ 0 ]
 default_error_messages = {  'invalid' : _ ( 'Enter a valid time.' )  }
   def values ( self ) :
   class Module_six_moves_urllib_error ( _LazyModule ) :
          self . _archive . extract ( to_path )
          self . require_all_fields = kwargs . pop ( 'require_all_fields' , True )
              post = '<could not parse>'
 nodelist = parser . parse ( ( 'elif' , 'else' , 'endif' ) )
 bottom = ( number - 1 ) * self . per_page
              func = TemplateLoader ( * args )
 from django . core import signing
 self . content_type_extra = content_type_extra
  else :
  except ( ValueError , TypeError ) :
          del self . tokens [ 0 ]
  def clear_checkbox_name ( self , name ) :
  def to_python ( self , value ) :
 if six . PY2 :
   seen_data . add ( data )
  __version__ = "0.1"
 return mark_safe ( force_text ( value ) . translate ( _js_escapes ) )
 if cache is None :
 from django . core . management . base import BaseCommand , CommandError
   def discard ( self , item ) :
 import sys
 class SubWidget ( object ) :
                  ch , escaped = next ( pattern_iter )
          builtins = { 'True' : True , 'False' : False , 'None' : None }
  from django . conf import settings
          ch = None
 self . prefix = prefix
     for date_check in all_date_checks :
   def display ( self ) :
    def get_declared_fields ( bases , attrs , with_base_fields = True ) :
          _urlconfs . value = urlconf_name
          if not isinstance ( index , ( slice , ) + six . integer_types ) :
 while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :
 for middleware_path in settings . MIDDLEWARE_CLASSES :
              self . cc = [ ]
      def __init__ ( self , media = None , ** kwargs ) :
 for label in app_labels :
 def __init__ ( self , server , params ) :
 value = localize ( value , use_l10n = context . use_l10n )
  self . dicts . append ( other_dict )
from __future__ import unicode_literals
 global _default
 from pprint import pformat
 ignore = lambda pattern : fnmatch . fnmatchcase ( filename , pattern )
  loader = MigrationLoader ( connection )
 def errors ( self ) :
              m = re . match ( naiveip_re , options [ 'addrport' ] )
          mail . attach_alternative ( html_message , 'text/html' )
 if takes_context :
   return property ( _media )
    def update ( self , dict_ ) :
  if plen < ( alen - dlen ) or plen > alen :
              result = factory ( ** kwargs )
   def __setitem__ ( self , key , value ) :
                  bits = token . split_contents ( ) [ 1 : ]
          return t [ 0 ] . lower ( ) , t [ 1 ]
   def handle_uncaught_exception ( self , request , resolver , exc_info ) :
              e . args = ( "Problem installing fixtures: %s" % e , )
    return current
              return lang_code
          key = self . make_key ( key , version = version )
 from django . utils . deprecation import RemovedInDjango19Warning
  try :
    if ns_pattern :
    def request ( request ) :
 if output :
  from django . utils . dates import MONTHS , MONTHS_3 , MONTHS_ALT , MONTHS_AP , WEEKDAYS , WEEKDAYS_ABBR
 return super ( URLField , self ) . clean ( value )
 trail = closing + trail
          cursor = connection . cursor ( )
 from django . utils . deprecation import RemovedInDjango19Warning
 buffer_types = ( bytes , bytearray , memoryview )
     class DebugParser ( Parser ) :
                  if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
 from django . utils . text import get_text_list
   def _read_limited ( self , size = None ) :
  raise KeyError ( 'Unknown media type "%s"' % name )
          _active . value = timezone
    if response . has_header ( 'Vary' ) :
     if not isinstance ( value , list ) :
  moves = sys . modules [ __name__ + ".moves" ] = _MovedItems ( __name__ + ".moves" )
           return avoid_wrapping ( ugettext ( '0 minutes' ) )
  value , sig = signed_value . rsplit ( self . sep , 1 )
   if alias not in settings . CACHES :
 for chunk in content . chunks ( ) :
 comment_notes . extend ( notes )
              yield node
   def __getattr__ ( self , attr ) :
                      exclude . append ( f . name )
              return match . group ( 0 )
  level = 0
                  filename . encode ( 'ascii' )
                  msg . attach ( self . _create_mime_attachment ( * alternative ) )
 while len ( digits ) <= abs ( exponent ) :
  elif isinstance ( o , datetime . time ) :
       for name , field in self . fields . items ( ) :
 _file = None
                  with io . open ( fname , 'rb' ) as f :
 from django . core . serializers . python import Serializer as PythonSerializer
 connection = connection or get_connection ( username = auth_user ,  password = auth_password ,  fail_silently = fail_silently )
              self . cookies [ key ] [ 'httponly' ] = True
               return { }
   def to_python ( self , value ) :
              rest = rest [ m . end ( ) : ]
                      block_context . push ( self . name , push )
                          return pickle . loads ( zlib . decompress ( f . read ( ) ) )
  except ImportError :
 try :
  else :
 for path in collect :
              return ""
          self . open ( )
    def dict ( self ) :
    def localize ( value , use_l10n = None ) :
   else :
 from django . utils . xmlutils import SimplerXMLGenerator
                  self . stderr . write ( "The po files under %s are in a seemingly not writable location. "  "mo files will not be updated/created." % dirpath )
 pass
 MONTHS = {  1 : _ ( 'January' ) , 2 : _ ( 'February' ) , 3 : _ ( 'March' ) , 4 : _ ( 'April' ) , 5 : _ ( 'May' ) , 6 : _ ( 'June' ) ,  7 : _ ( 'July' ) , 8 : _ ( 'August' ) , 9 : _ ( 'September' ) , 10 : _ ( 'October' ) , 11 : _ ( 'November' ) ,  12 : _ ( 'December' )  }
 self . data = data or { }
  password = force_bytes ( password )
              return self . file . size
 import tarfile
   ipv4_address = "%d.%d.%d.%d" % (  int ( hextets [ 6 ] [ 0 : 2 ] , 16 ) ,  int ( hextets [ 6 ] [ 2 : 4 ] , 16 ) ,  int ( hextets [ 7 ] [ 0 : 2 ] , 16 ) ,  int ( hextets [ 7 ] [ 2 : 4 ] , 16 ) ,  )
 from django . utils . functional import cached_property
 target_app_labels_only = True
   def is_valid ( self ) :
 major = '.' . join ( str ( x ) for x in version [ : parts ] )
   def get ( self , key , default = None ) :
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
 if self . forms :
              raise base . DeserializationError (  "<%s> node is missing the required '%s' attribute"  % ( node . nodeName , attr ) )
 return ( self . data . weekday ( ) + 1 ) % 7
  else :
 if not hasattr ( other_dict , '__getitem__' ) :
          if node . must_be_first and nodelist :
                          description = "An instance of the '%s' class" % receiver . __class__ . __name__
  else :
          DJANGO_COLORS = os . environ . get ( 'DJANGO_COLORS' , '' )
          return value
   return formataddr ( ( nm , addr ) )
 default_error_messages = {  'invalid' : _ ( 'Enter a list of values.' ) ,  'incomplete' : _ ( 'Enter a complete value.' ) ,  }
              yield "# This is an auto-generated Django model module."
 try :
              def m2m_convert ( n ) :
 if not os . path . exists ( self . _dir ) :
 from django . core . management . sql import custom_sql_for_model , emit_post_migrate_signal , emit_pre_migrate_signal
                if self . verbosity >= 1 :
 return tf . format ( format_string )
          return type ( self ) . __bool__ ( self )
                      self . stdout . write ( "processing locale %s\n" % locale )
   def urlunquote_plus ( quoted_url ) :
  else :
   class BaseEmailBackend ( object ) :
                   raise
   msgs = msgs . replace (  "#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n" % self . domain , "" )
 def id_for_label ( self ) :
 logger . addHandler ( handler )
  except ( ValueError , TypeError ) :
                              cursor . execute ( statement )
from __future__ import unicode_literals
     class URLField ( CharField ) :
      def __init__ ( self , s ) :
      return None
                      for key , value in other_dict . items ( ) :
   def as_table ( self ) :
 if self . first :
    def gettext ( message ) :
   return m + Media ( definition )
                  raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : val } ,  )
 from xml . sax . expatreader import ExpatParser as _ExpatParser
 for item , args in zip ( result , result_args ) :
          block_context = context . render_context . get ( BLOCK_CONTEXT_KEY )
          raise SerializerDoesNotExist ( format )
              attr_list = termios . tcgetattr ( fd )
                  self . connection . ehlo ( )
   else :
                   break
                  prefixed_name = self . add_prefix ( name )
              raise ValidationError ( errors )
    def to_current_timezone ( value ) :
 filters . append ( ( filter_func , args ) )
          return
  models . signals . post_syncdb . send (  sender = app_config . models_module ,  app = app_config . models_module ,  created_models = created_models ,  verbosity = verbosity ,  interactive = interactive ,  db = db )
 from django . db import connections , transaction
          return '%s-%s' % ( self . prefix , index )
                      model = apps . get_model ( exclude )
 for file in options [ 'files' ] :
              self . children . append ( data )
  from django . apps import apps
  if self . _cull_frequency == 0 :
 def closed ( self ) :
 self . stdout . write ( "%s\n" % writer . as_string ( ) )
 data_set = set ( force_text ( value ) for value in data )
   def get_signed_cookie ( self , key , default = RAISE_ERROR , salt = '' , max_age = None ) :
    def get_key_func ( key_func ) :
              yield d
   def __next__ ( self ) :
                  return template . render ( context . new ( values ) )
  if self . verbosity > 0 :
      _version = "0.91"
 strfunc = Name ( "__str__" , prefix = unifunc . prefix )
          def dec ( func ) :
          substitutions = {  'initial_text' : self . initial_text ,  'input_text' : self . input_text ,  'clear_template' : '' ,  'clear_checkbox_label' : self . clear_checkbox_label ,  }
                              return settings . TEMPLATE_STRING_IF_INVALID % self . var
  try :
              continue
 from django . utils . deprecation import RemovedInDjango19Warning
   def salted_hmac ( key_salt , value , secret = None ) :
   def get_fixed_timezone ( offset ) :
   elif intrans :
    def custom_sql_for_model ( model , style , connection ) :
                              exec ( compile ( handle . read ( ) , pythonrc , 'exec' ) , imported_objects )
 @ stringfilter
 link [ NEXT ] = root
  _file . write ( chunk )
          s = s . replace ( '"' , '&quot;' )
                  if reduce ( operator . eq , level ) :
   def conditional_escape ( text ) :
   prefix = 'django_%s_template_' % self . app_or_project
  try :
   def load_template ( self , template_name , template_dirs = None ) :
              self . _load_post_and_files ( )
 if settings . DEBUG :
    def _set ( self , key , value , timeout = DEFAULT_TIMEOUT ) :
 from django . utils . timezone import is_aware , utc
   def total_error_count ( self ) :
                  return False
          parser . add_argument ( 'app_label' ,  help = 'App label of the application to squash migrations for.' )
 return token
  if record . exc_info :
 return len ( self . children )
 self . label_suffix = label_suffix
 if autoescape :
                  keys = n . getElementsByTagName ( 'natural' )
    if item [ 'author_name' ] is not None :
 memo [ id ( self ) ] = result
              deactivate ( )
 self . target_var = target_var
  self . feed . update ( kwargs )
  return sample [ : 3 ] == b'\xef\xbb\xbf' or sample . startswith ( codecs . BOM_UTF16_LE ) or sample . startswith ( codecs . BOM_UTF16_BE )
              return ugettext ( "Please correct the duplicate data for %(field)s, "  "which must be unique." ) % {  "field" : get_text_list ( unique_check , six . text_type ( _ ( "and" ) ) ) ,  }
 bad_app_labels = set ( )
                  return default
 from django . core import serializers
  from django . core . servers . fastcgi import runfastcgi
 self . is_reversed = is_reversed
  try :
                   url_fields [ 0 ] = 'http'
          fname = self . _key_to_file ( key , version )
 self . max_width = max_width
  quote = s [ 0 ]
              _meta = Options ( table )
          key = self . make_key ( key , version = version )
  else :
  for cat in self . feed [ 'categories' ] :
 data = method ( self , * args , ** kwargs )
              return Context ( context )
          error = self . data [ i ]
          return ''
  return self . _app_dict [ language_code ]
     class DeserializedObject ( object ) :
 leading = self . has_leading_dir ( namelist )
 self . can_write . release ( )
  unichr = chr
 if result is not root :
  view_name = self . view_name . resolve ( context )
                      if self . asvar is None :
 import stat
  self . content = content
 append = complain
import warnings
              content_type = "%s; charset=%s" % ( settings . DEFAULT_CONTENT_TYPE ,  self . _charset )
                   field_notes . append ( "Field renamed because it contained more than one '_' in a row." )
         def fix_location_header ( request , response ) :
 if '_' in locale :
                  raise
 self . pubid = pubid
  output = [ ]
          if initial is None :
  try :
              wm . add_watch ( path , mask )
  else :
  msg += "System check identified %s (%s silenced)." % (  "no issues" if visible_issue_count == 0 else  "1 issue" if visible_issue_count == 1 else  "%s issues" % visible_issue_count ,  len ( all_issues ) - visible_issue_count ,  )
 def content ( self , value ) :
          try :
                   if not os . path . exists ( filename ) :
 from django . utils . translation import templatize
              raise ValueError (  "make_aware expects a naive datetime, got %s" % value )
          self . dict = OrderedDict ( ( ( x , None ) for x in iterable ) if iterable else [ ] )
           return super ( PythonSerializer , self ) . getvalue ( )
 result . key = key
                  raise CommandError ( "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)" % app_label )
 self . extra_headers = headers or { }
              os . utime ( dst , ( st . st_atime , st . st_mtime ) )
  tag = bits [ 1 ]
  if instance is None :
   else :
 cmp_fmts = list ( self . compression_formats . keys ( ) ) if cmp_fmt is None else [ cmp_fmt ]
  import datetime
 for node_app , node_name in migration . branch :
    return saved_instances
                  warnings . warn (  'Reversing by dotted path is deprecated (%s).' % original_lookup ,  RemovedInDjango20Warning , stacklevel = 3  )
     class RadioSelect ( RendererMixin , Select ) :
 subject = self . subject
   @ property
   try :
  return value
                  next_item = list_ [ i + 1 ]
   def __iter__ ( self ) :
   def as_widget ( self , widget = None , attrs = None , only_initial = False ) :
          try :
 value = unicodedata . normalize ( 'NFKD' , value ) . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' )
              error_messages = kwargs . get ( 'error_messages' ) or { }
              self . dicts . append ( value )
                   if ( attr in ( "__file__" , "__name__" , "__path__" ) and  self . mod not in sys . modules ) :
 self . prefix = prefix or self . get_default_prefix ( )
          cleaned_data = form . cleaned_data
   def __str__ ( self ) :
   def has_header ( self , header ) :
              media = media + w . media
 self . set_charset ( utf8_charset )
 self . args = args
   return metaclass ( 'temporary_class' , None , { } )
  except TypeError :
 for i in range ( 0 , self . total_form_count ( ) ) :
               if ignore and field_name not in model_fields :
          super ( ModelMultipleChoiceField , self ) . __init__ ( queryset , None ,  cache_choices , required , widget , label , initial , help_text ,  * args , ** kwargs )
    def __getitem__ ( self , name ) :
   return data
              msg = (  "The included urlconf '{name}' does not appear to have any "  "patterns in it. If you see valid patterns in the file then "  "the issue is probably caused by a circular import."  )
  try :
          f = os . path . join ( p , cmd )
 final_output . extend ( alter_sql )
   self . _css = { }
 try :
  except AttributeError :
               if not re . search ( r'^[_a-zA-Z]' , name ) :
                          raise TemplateSyntaxError (  "'%s' received too many positional arguments" %  name )
 while t > 0 :
          return self . attrs . get ( 'id' , '' )
          return super ( Info , self ) . __init__ ( INFO , * args , ** kwargs )
 while True :
 def firstof ( parser , token ) :
  except IndexError :
      def __html__ ( self ) :
          self . regexes = { }
   def has_key ( self , key , version = None ) :
          return len ( self . forms )
      input_type = 'email'
 if m is None :
      class BaseModelFormSet ( BaseFormSet ) :
 base_lang = get_language ( ) . split ( '-' ) [ 0 ]
       if format not in serializers . get_public_serializer_formats ( ) :
                  context [ 'block' ] = self
          if key not in self :
     class override ( object ) :
              self . close ( )
 parser . add_argument ( '--format' , default = 'json' , dest = 'format' ,  help = 'Specifies the output serialization format for fixtures.' )
                  raise ValueError ( 'Unable to add filter %r: %s' % ( f , e ) )
                      output . append ( error_row % force_text ( bf_errors ) )
 request . resolver_match = resolver_match
 def ifnotequal ( parser , token ) :
 match = _html_parser . endendtag . search ( rawdata , i + 1 )
          middleware = middleware_class ( * m_args , ** m_kwargs )
 match = date_re . match ( value )
 try :
     class IfNode ( Node ) :
          if field . rel . through . _meta . auto_created :
 defaults [ 'files' ] = self . files
              tz_name = force_text ( get_current_timezone_name ( ) , errors = 'ignore' )
      def __init__ ( self , value , text ) :
   def copy ( self ) :
 self . common_logger_config ( root , config , incremental )
              raise IOError ( "%s exists and is not a directory." % directory )
   return num_sent
      help = ( "Creates a Django project directory structure for the given "  "project name in the current directory or optionally in the "  "given directory." )
 for i , widget in enumerate ( self . widgets ) :
  else :
  def __init__ ( self , data , encoder = DjangoJSONEncoder , safe = True , ** kwargs ) :
 if param in unhandled_params :
 result = self . configurator . convert ( value )
   return [ ]
          meta = type ( str ( 'Meta' ) , ( object , ) , { } )
          raise ValueError ( 'Not a valid Python identifier: %r' % s )
  else :
  setattr ( self , real_name , getattr ( trans , real_name ) )
  except ( KeyError , AttributeError ) as exc :
 statements = sql_custom ( app_config , self . style , connection )
                  if path . isfile ( path_to_remove ) :
      def render ( self , context ) :
      def __init__ ( self , options = None ) :
              msg = self . style . HTTP_INFO ( msg )
  else :
  requires_system_checks = False
  rawdata = self . rawdata
 if _supported is None :
                          self . template_cache [ key ] = ( template , origin )
                  qs = self . queryset
  return ''
 if exp is None or exp > time . time ( ) :
 verbosity = options . get ( 'verbosity' )
 from django . utils . _os import upath
          value = ugettext ( "%s KB" ) % filesize_number_format ( bytes / KB )
          raise ValueError ( "Negative base36 conversion input." )
  except ValueError :
  exp = exp . replace ( microsecond = 0 )
   mod_name , func_name = get_mod_func ( lookup_view )
   def chunks ( self , chunk_size = None ) :
 if not isinstance ( error , ValidationError ) :
  try :
              data = self . form . initial . get ( self . name , self . field . initial )
  if isinstance ( message , SafeData ) :
   class Module_six_moves_urllib_robotparser ( _LazyModule ) :
                  return
              if self . _delegate_bytes and six . PY2 :
              self . _fqdn = socket . getfqdn ( )
 global _translations
 self . __starttag_text = rawdata [ i : endpos ]
   class FilterExpression ( object ) :
  def _get_height ( self ) :
  nm , addr = addr
   return property ( fget , fset , fdel , doc )
 g = generator . Generator ( fp , mangle_from_ = False )
    @ register . filter ( is_safe = False )
  from django . core . management . base import BaseCommand , CommandError
 Tok . num += 1
 boundary = opts . get ( 'boundary' )
      return force_text ( gettext ( message ) )
    @ register . filter ( is_safe = False )
 return value
  return value
              raise ValueError ( "Key '%s' not found" % key )
 parser . EntityDeclHandler = self . entity_decl
   if six . PY3 :
  for attr in self . child_nodelists :
   def start_index ( self ) :
 self . _catalog = translation . _catalog . copy ( )
 from django . utils . text import unescape_entities
          yield self
   def H ( self ) :
 if settings . DEBUG :
 def _cache ( self ) :
  elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :
                  comment . append ( t . contents )
 hour = int ( m . group ( 'hour' ) )
 known_models = set ( model for model in connection . introspection . installed_models ( tables ) if model not in app_models )
   else :
          return repr ( self . value )
 base36 = BaseConverter ( BASE36_ALPHABET )
  return filename , display_url
          super ( FileBasedCache , self ) . __init__ ( params )
              raise TemplateSyntaxError ( '"filter %s" is not permitted.  Use the "autoescape" tag instead.' % filter_name )
              pkg_name = 'templates/' + template_name
 os . close ( fd )
              raise CommandError ( "%s. Are you sure your INSTALLED_APPS setting is correct?" % e )
          offset = date . tzinfo . utcoffset ( date )
       self . _is_rendered = False
  urlquote_plus = allow_lazy ( urlquote_plus , six . text_type )
          _supported = OrderedDict ( settings . LANGUAGES )
   def __mod__ ( self , rhs ) :
 if jan1_weekday > 4 :
 self . name = name
              if is_aware ( o ) :
 nofollow_attr = ' rel="nofollow"' if nofollow else ''
 widget = widget or self . widget
 try :
  except ImportError :
 self . _read_started = False
 import time
              if field . widget . needs_multipart_form :
      class ChunkIter ( six . Iterator ) :
     super ( SimpleTemplateResponse , self ) . __init__ ( '' , content_type , status )
 if not email_messages :
   def __delitem__ ( self , header ) :
 from django . utils . module_loading import module_has_submodule
  if getattr ( func , 'is_safe' , False ) and isinstance ( obj , SafeData ) :
 def __add__ ( self , rhs ) :
   def get_backend_timeout ( self , timeout = DEFAULT_TIMEOUT ) :
      regex = ''
  value_converters = {  'ext' : 'ext_convert' ,  'cfg' : 'cfg_convert' ,  }
  else :
    @ register . filter
              exclude = form . _get_validation_exclusions ( )
          memoryview = memoryview
    class DjangoSafeDumper ( SafeDumper ) :
              return None
                  warnings . warn ( "A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext." )
               return False
     def modelformset_factory ( model , form = ModelForm , formfield_callback = None ,  formset = BaseModelFormSet , extra = 1 , can_delete = False ,  can_order = False , max_num = None , fields = None , exclude = None ,  widgets = None , validate_max = False , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ,  min_num = None , validate_min = False ) :
          cache = caches [ settings . CACHE_MIDDLEWARE_ALIAS ]
                  return list ( urlsplit ( url ) )
          key = self . make_key ( key , version = version )
   super ( ValidationError , self ) . __init__ ( message , code , params )
        def template_localtime ( value , use_tz = None ) :
          assert isinstance ( level , int ) , "The first argument should be level."
   else :
 import os
 output = [ ]
    raise TemplateDoesNotExist ( ', ' . join ( not_found ) )
                          self . load_middleware ( )
 self . run_validators ( out )
              return force_text ( value )
                      new_attr = old_attr
                  format = color_settings . get ( role , { } )
  if value is not result :
  return self . _client
           renderer = kwargs . pop ( 'renderer' , None )
 shown = set ( )
  format_string = bits [ 1 ] [ 1 : - 1 ]
      allowed_schemes = [ 'http' , 'https' , 'ftp' ]
 return msg_count
                  pass
 reverse = complain
 widget = SelectMultiple
 if idstring is None :
  generic_lang_code = lang_code . split ( '-' ) [ 0 ]
     class CsrfTokenNode ( Node ) :
  p = i
  if fields is not None and f . name not in fields :
              self . _client = self . _lib . Client ( self . _servers , pickleProtocol = pickle . HIGHEST_PROTOCOL )
 for opname , opfunc in convert [ root ] :
                  self . _setup ( )
              raise CommandError ( 'You must set settings.ALLOWED_HOSTS if DEBUG is False.' )
 self . context = context
          return ''
    self . find_template_cache [ key ] = result
              taglib = bits [ - 1 ]
  else :
   changes = dict (  ( app , [ Migration ( "custom" , app ) ] )  for app in app_labels  )
 return time_str + '%+03d%02d' % ( hour , minute )
 return chunk
   plan = executor . migration_plan ( targets )
 from django . utils . six . moves import html_entities
          if instance is None :
 self . buffer = b''
              nodes . extend ( node . get_nodes_by_type ( nodetype ) )
              raise KeyError ( "Unknown language code %s." % lang_code )
    return sorted ( all_files )
   def add_library ( self , lib ) :
                  raise ValueError
 from django . utils . six . moves . urllib . parse import (  quote , quote_plus , unquote , unquote_plus , urlparse ,  urlencode as original_urlencode )
                          self . configure_logger ( name , loggers [ name ] , True )
              return self . _urlconf_module
   return "%s.%s" % ( package [ : dot ] , name )
    def push ( self , name , block ) :
  try :
          cache_timeout = settings . CACHE_MIDDLEWARE_SECONDS
 return mark_safe ( '\n' . join ( output ) )
                              result . append ( Group ( ( ( "%%(%s)s" % param ) , param ) ) )
 self . month_none_value = ( 0 , empty_label [ 1 ] )
  else :
 import itertools
  return self . field . prepare_value ( data )
  json . dump ( self . get_dump_object ( obj ) , self . stream ,  cls = DjangoJSONEncoder , ** self . json_kwargs )
                  raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
          if value is None :
          return it . next ( )
    def incr ( self , key , delta = 1 , version = None ) :
  new_name = col_name . lower ( )
 self . keyOrder . remove ( key )
              if key in dict_ :
   else :
     class DTDForbidden ( DefusedXmlException ) :
   def __contains__ ( self , key ) :
 try :
          return value
   def add_js ( self , data ) :
                   if hasattr ( content , 'temporary_file_path' ) :
 failures = test_runner . run_tests ( test_labels )
   try :
              if hasattr ( self . data , 'tzinfo' ) and self . data . tzinfo :
  else :
 decompress = True
 for f in opts . fields :
 got_request_exception = Signal ( providing_args = [ "request" ] )
   class EmailBackend ( BaseEmailBackend ) :
              return self . as_widget ( ) + self . as_hidden ( only_initial = True )
                                      over_chunk = field_stream . read ( 4 - over_bytes )
              if unicodedata . combining ( char ) :
 from django . utils import six , timezone
          mem_args = args [ : num_args ]
   return force_text ( name . replace ( '\\' , '/' ) )
 self . _app_dict [ language_code ] = apps
              return 1
  int_part_gd += digit
 return ( '<%s token: "%s...">' %  ( token_name , self . contents [ : 20 ] . replace ( '\n' , '' ) ) )
          return get_supported_language_variant ( lang_code , strict = strict )
              self . stream . write ( "\n" )
 raise CommandError ( "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'" % name_str )
                  if not token . contents :
  except AttributeError :
    class HttpResponseNotFound ( HttpResponse ) :
   def __next__ ( self ) :
   if isinstance ( app_name , BaseCommand ) :
   def handle_app_config ( self , app_config , ** options ) :
  self . use_natural_foreign_keys = options . pop ( 'use_natural_foreign_keys' , False ) or self . use_natural_keys
 @ stringfilter
                      raise TemplateSyntaxError ( "Variables and attributes may "  "not begin with underscores: '%s'" %  var )
              try :
 return result
                      if value == k2 or text_value == force_text ( k2 ) :
  raise SyntaxError ( "Translation blocks must not include other block tags: %s (%sline %d)" % ( t . contents , filemsg , t . lineno ) )
              self . message = message
  msgs , errors , status = popen_wrapper ( args )
 from django . utils . safestring import SafeData , mark_safe
  return FirstOfNode ( [ parser . compile_filter ( bit ) for bit in bits ] )
 value = bytes_to_text ( value , self . encoding )
          if value is None :
                          answer = answer [ 0 ] . lower ( )
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
                              try :
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Created new squashed migration %s" % writer . path ) )
  handle_default_options ( options )
              value = to_current_timezone ( value )
   self . _current_app = current_app
   def handle_m2m_field ( self , obj , field ) :
                      raise AttributeError
      def __init__ ( self , regex , callback , default_args = None , name = None ) :
              raise ValidationError ( errors )
           fks_to_parent = [  f for f in opts . fields  if isinstance ( f , ForeignKey )  and ( f . rel . to == parent_model  or f . rel . to in parent_model . _meta . get_parent_list ( ) )  ]
                      self . stderr . write (  "Notice: Couldn't set permission bits on %s. You're "  "probably using an uncommon filesystem setup. No "  "problem." % new_path , self . style . NOTICE )
 six . reraise ( ValidationError , ValidationError (  message ,  code = 'ambiguous_timezone' ,  params = params ,  ) , sys . exc_info ( ) [ 2 ] )
  else :
 kwargs = { }
              self . _deleted_form_indexes = [ ]
   if recursive :
 emit_pre_migrate_signal ( create_models , self . verbosity , self . interactive , connection . alias )
  else :
    def _long_to_bin ( x , hex_format_string ) :
 STATUS_OK = 0
 if not self . timezone :
  else :
                  qs = self . model . _default_manager . get_queryset ( )
 try :
          if self . required and not value :
                  pass
 root [ KEY ] = root [ RESULT ] = None
  if self . field . cache_choices :
  import StringIO
     def clear ( self ) :
    def number_format ( value , decimal_pos = None , use_l10n = None , force_grouping = False ) :
   except AttributeError :
                          if self . selected_fields is None or field . attname [ : - 3 ] in self . selected_fields :
          if self . _wrapped is empty :
 @ stringfilter
  else :
 if len ( tablenames ) :
  except ValidationError as e :
      pass
 from ctypes import ( sizeof , c_ulong , c_void_p , c_int64 ,  Structure , Union , POINTER , windll , byref )
 self . old_timezone = getattr ( _active , 'value' , None )
    class NoReverseMatch ( Exception ) :
   except ( IOError , OSError ) :
          print ( message )
          from django . conf import settings
 forms_to_delete = self . deleted_forms
   if self . empty_permitted and not self . has_changed ( ) :
 for basedir in basedirs :
 pks = options . get ( 'primary_keys' )
    @ register . filter ( is_safe = True , needs_autoescape = True )
  else :
                      label = conditional_escape ( force_text ( bf . label ) )
  create_models = set ( itertools . chain ( * manifest . values ( ) ) )
          post = '<could not parse>'
  except OSError as e :
   def __iter__ ( self ) :
                  if app_name not in loader . migrated_apps :
   def __repr__ ( self ) :
                          cursor . execute ( "UPDATE %s SET value = %%s, expires = %%s "  "WHERE cache_key = %%s" % table ,  [ b64encoded , exp , key ] )
                  self . registered_checks . append ( check )
              self . stderr = OutputWrapper ( options . get ( 'stderr' , sys . stderr ) , self . style . ERROR )
  else :
          if not filename :
                      for node in self . nodelist_loop :
   def save_new ( self , form , commit = True ) :
      def handle_merge ( self , loader , conflicts ) :
   return True
  if level is not None :
  return self . save_existing_objects ( commit ) + self . save_new_objects ( commit )
 def truncatewords ( value , arg ) :
     class TypedChoiceField ( ChoiceField ) :
  elif action == "apply_success" :
              raise ValueError ( "Don't mix *args and **kwargs in call to reverse()!" )
 infos = [ e for e in all_issues if checks . INFO <= e . level < checks . WARNING and not e . is_silenced ( ) ]
  else :
              handler . addQuickElement ( "category" , "" , { "term" : cat } )
              handler . addQuickElement ( "category" , cat )
   def get_response ( self , request ) :
    class NullDevice :
 from django . utils . encoding import force_bytes , python_2_unicode_compatible
  else :
          prefix += '/'
  if pks :
          __bytes__ = serialize_headers
 parser . add_argument ( '--pythonpath' ,  help = 'A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".' )
              raise CommandError ( msg )
    WSGIServer ( get_internal_wsgi_application ( ) , ** wsgi_opts ) . run ( )
    def find_template ( self , name , dirs = None ) :
  else :
  upto = match . end ( )
    def get_template ( template_name , dirs = None ) :
 if self . data . day in ( 11 , 12 , 13 ) :
                      file_move_safe ( content . temporary_file_path ( ) , full_path )
              self . _cull ( )
   def simple_tag ( self , func = None , takes_context = None , name = None ) :
 _encoding = None
                          continue
 def __init__ ( self , argv = None ) :
              template = self . template . resolve ( context )
              value = self . coerce ( value )
 if not os . path . isdir ( basedir ) :
    def dst ( self , dt ) :
                  response = middleware_method ( request , response )
 from django . core . mail . backends . console import EmailBackend as ConsoleEmailBackend
 if not email_messages :
    def get_date_error_message ( self , date_check ) :
 def combine ( cls , date , time ) :
              raise ValueError (  "'%s.%s' has no field named '%s'."  % ( model . _meta . app_label , model . _meta . object_name , fk_name ) )
  return path
 class Operator ( TokenBase ) :
    class TemplateLiteral ( Literal ) :
 return RegroupNode ( target , expression , var_name )
 super ( TypedChoiceField , self ) . __init__ ( * args , ** kwargs )
          urlconf = get_urlconf ( )
                if isinstance ( field , models . TimeField ) and getattr ( obj , field . name ) is not None :
  self . help_text = field . help_text or ''
              raise SystemRestart
         ns_resolver = RegexURLResolver ( ns_pattern , resolver . url_patterns )
 if not self . allow_multiple_selected :
              return self . _cache . incr ( key , - delta )
                          apps . setdefault ( pattern . app_name , [ ] ) . append ( pattern . namespace )
      def strftime ( self , fmt ) :
 setattr ( _MovedItems , move . name , move )
 from django . forms . forms import *
   args = [ self . program ] + self . program_options + [ '-o' ,  npath ( base_path + '.mo' ) , npath ( base_path + '.po' ) ]
        contains_nontext = False
 self . interactive = options . get ( 'interactive' )
  urlize = allow_lazy ( urlize , six . text_type )
              _locs_ = _globs_
 if not callback :
  lines = [ ]
   ISO_8859_1 , UTF_8 = str ( 'iso-8859-1' ) , str ( 'utf-8' )
 PATTERN = """     classdef< 'class' any+ ':'               suite< any*                      funcdef< 'def' unifunc='__unicode__'                               parameters< '(' NAME ')' > any+ >                      any* > >     """
              for x , y in zip ( val1 , val2 ) :
          daemon_kwargs [ 'umask' ] = int ( options [ 'umask' ] , 8 )
 import json
  elif ns not in app_list :
import warnings
   import random
   for line in header . split ( b'\r\n' ) :
 return result
   if isinstance ( elt , ( Choice , NonCapture ) ) :
    def getvalue ( self ) :
     @ contextlib . contextmanager
  def __init__ ( self , attrs = None , format = None ) :
 if hasattr ( text , '__html__' ) :
 warnings . warn ( "memoize wrapper is deprecated and will be removed in "  "Django 1.9. Use django.utils.lru_cache instead." ,  RemovedInDjango19Warning , stacklevel = 2 )
 return WSGIHandler ( )
 for f in sorted ( opts . concrete_fields + sortable_virtual_fields + opts . many_to_many ) :
  except ImportError as e :
  except NotImplementedError :
              django_po = os . path . join ( django_dir , 'conf' , 'locale' , locale , 'LC_MESSAGES' , '%s.po' % domain )
      if args is None :
          BaseCache . __init__ ( self , * args , ** kwargs )
 self . tags = { }
      pad = b'=' * ( - len ( s ) % 4 )
  if not include_is_allowed ( filepath ) :
      if not _serializers :
                      comment_notes = [ ]
   RAISE_ERROR = object ( )
      setattr ( Module_six_moves_urllib_error , attr . name , attr )
 if getattr ( self , '_client' , None ) is None :
              print ( "Running post-migrate handlers for application %s" % app_config . label )
 self . name = name
              if not self . _has_expired ( key ) :
              raise CommandError ( "couldn't extract file %s to %s: %s" %  ( filename , tempdir , e ) )
 import re
     if os . path . exists ( name ) :
 __ne__ = new_method_proxy ( operator . ne )
   def strptime ( self , value , format ) :
                    numbers = [  MigrationAutodetector . parse_number ( migration . name )  for migration in merge_migrations  ]
           if ip_str . count ( '.' ) != 3 :
               six . reraise ( ValidationError , ValidationError (  self . error_messages [ 'invalid_image' ] ,  code = 'invalid_image' ,  ) , sys . exc_info ( ) [ 2 ] )
   def super ( self ) :
                                      traceback . print_exc ( )
                          raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
  if subject [ i ] in ( '"' , "'" ) :
          return settings . DEBUG
 parser . add_argument ( 'args' , nargs = '*' )
  self . ignore_patterns = list ( set ( ignore_patterns ) )
    class SsiNode ( Node ) :
  block_name = bits [ 1 ]
              logging_config_func ( logging_settings )
 if hasattr ( cls , k ) :
 self . __name = "%s%02d%02d" % ( sign , abs ( offset ) / 60. , abs ( offset ) % 60 )
  if os . path . isdir ( 'locale' ) :
    conflicts = executor . loader . detect_conflicts ( )
 from django . utils . encoding import force_text , python_2_unicode_compatible
  else :
 self . deprecation_warning = deprecation_warning
   @ deconstructible
                                  with transaction . atomic ( using = connection . alias ) :
 if not bytes :
    def is_writable ( path ) :
                          if iso_input not in val :
     def validate ( self , app_config = None , display_num_errors = False ) :
              self . _urlconf_module = import_module ( self . urlconf_name )
 import time
          self . exception = exception
            result = force_text ( message )
 from django . utils . _os import upath
 data = json . dumps ( data , cls = encoder )
 FILE = "file"
              if len ( new_operations ) == len ( operations ) :
          self . unpack_ipv4 = unpack_ipv4
 confirm = input ( msg )
              sys . exit ( 3 )
          return formats . date_format ( value , arg )
 self . initial = initial or { }
     else :
   POST = property ( _get_post , _set_post )
  class CacheEntry ( object ) :
  return value
 self . active_writers = 0
 from django . db . migrations . executor import MigrationExecutor
                          return result
  from django . conf import settings
 for dirpath , dirnames , filenames in os . walk ( root , topdown = True , followlinks = self . symlinks ) :
                  if is_ignored ( os . path . normpath ( os . path . join ( dirpath , dirname ) ) , norm_patterns ) :
                      rel_model = field . rel . to
      def __init__ ( self , func , args , kwargs , url_name = None , app_name = None , namespaces = None ) :
                  self . stdout . write ( "  Installing indexes...\n" )
  if hasattr ( get_git_changeset , 'cache' ) :
      if PY3 :
              return lookup_view
 try :
     if self . __language == settings . LANGUAGE_CODE or self . __language == "en-us" :
 from django . utils . translation import TranslatorCommentWarning , trim_whitespace , LANGUAGE_SESSION_KEY
 assert content is not None
   return ip_str . rsplit ( ':' , 1 ) [ 1 ]
      has_old_option = hasattr ( self , 'requires_model_validation' )
              fields = new_class . declared_fields
     class Textarea ( Widget ) :
      @ register . filter ( "timesince" , is_safe = False )
                      self . addr = self . addr [ 1 : - 1 ]
           def next ( self ) :
                  six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
          return self . has_previous ( ) or self . has_next ( )
 if self . _pk_field == self . fk :
                      def m2m_convert ( value ) :
              return url
  return wrapped
          return self . META . get ( 'HTTP_X_REQUESTED_WITH' ) == 'XMLHttpRequest'
   def u ( s ) :
                      locale_dir = None
  except serializers . SerializerDoesNotExist :
          t = s . split ( '=' , 1 )
   def handle_fk_field ( self , obj , field ) :
 changes = autodetector . arrange_for_graph ( changes , loader . graph )
  def join_tokens ( tokens , trim = False ) :
 try :
              raise InvalidTemplateLibrary ( "Template library %s not found, "  "tried %s" %  ( library_name ,  ',' . join ( tried_modules ) ) )
   def delete ( self , key , version = None ) :
   try :
  except TypeError as te :
              result = self . buffer [ : size ]
          if not value :
      if number == 1 :
                  if middle . startswith ( opening ) :
              new_errors = check ( app_configs = app_configs )
   def latest_post_date ( self ) :
 check_for_migrations ( app_config , connection )
          if isinstance ( self . urlconf_name , list ) and len ( self . urlconf_name ) :
              if self . _varlist :
 import gzip
          return super ( FileInput , self ) . render ( name , None , attrs = attrs )
    def ensure_echo_on ( ) :
   return dummy ( )
              msg = ( "\nYou have installed Django's auth system, and "  "don't have any superusers defined.\nWould you like to create one "  "now? (yes/no): " )
 package_path = package . __path__
  return self . _object_dict . get ( pk )
              result [ i ] += piece
 return other in self . children
 self . value = value
  if ttl is not None :
                  token = Token ( TOKEN_VAR , token_string [ 2 : - 2 ] . strip ( ) )
          return False
    @ register . filter ( "linebreaks" , is_safe = True , needs_autoescape = True )
              name = self . _pk_field . name
  elif char in 'bEFMmNn' :
  except KeyError :
 if not self . is_required :
 def slugify ( value ) :
              c = self . resolve ( c )
 if not value :
 import sys
                    if var . find ( VARIABLE_ATTRIBUTE_SEPARATOR + '_' ) > - 1 or var [ 0 ] == '_' :
    class TemporaryUploadedFile ( UploadedFile ) :
    @ register . tag
              self . _update_errors ( e )
 translation = self . _new_gnu_trans ( localedir )
              continue
              return self . empty_value
 import sys
  self . error ( "bad end tag: %r" % ( rawdata [ i : j ] , ) )
  if use_reloader :
   class Loader ( BaseLoader ) :
               self . filters [ name ] = filter_func
   class OVERLAPPED ( Structure ) :
  __all__ = [  'utc' , 'get_fixed_timezone' ,  'get_default_timezone' , 'get_default_timezone_name' ,  'get_current_timezone' , 'get_current_timezone_name' ,  'activate' , 'deactivate' , 'override' ,  'localtime' , 'now' ,  'is_aware' , 'is_naive' , 'make_aware' , 'make_naive' ,  ]
  elif len ( options . args ) < 1 :
    cursor = connection . cursor ( )
   def _truncate_html ( self , length , truncate , text , truncate_len , words ) :
          pass
    if token . contents == 'else' :
  self . run ( ** options )
              return self . limit_choices_to ( )
 for j in xrange ( int ( iterations ) ) :
    assert token . contents == 'endif'
   return urljoin ( prefix , path )
                 memo [ id ( self ) ] = self
   def iterkeys ( d , ** kw ) :
 import sys
    class TimeInput ( DateTimeBaseInput ) :
 utility = ManagementUtility ( argv )
   leave_locale_alone = True
  filelist = [ os . path . join ( self . _dir , fname ) for fname  in glob . glob1 ( self . _dir , '*%s' % self . cache_suffix ) ]
  return ( ( not url_info . netloc or url_info . netloc == host ) and  ( not url_info . scheme or url_info . scheme in [ 'http' , 'https' ] ) )
 msg_data = msg . as_bytes ( )
              if self . _delegate_bytes :
   for field , error_list in error . items ( ) :
                  return d [ key ]
                      return False
  if item [ 'unique_id' ] is not None :
          return File ( open ( self . path ( name ) , mode ) )
              try :
 return form
 value = converter ( suffix )
              base , ext = os . path . splitext ( base )
    def is_url ( self , template ) :
 alen = len ( args )
              exit_code = restart_with_reloader ( )
  self . mod = new_mod
 if not self . port . isdigit ( ) :
              return bytes ( func ( * self . __args , ** self . __kw ) )
          return not bool ( self . option_list )
  except ValidationError :
              return default
              kwargs [ 'instance' ] = self . get_queryset ( ) [ i ]
 new_method = base . __dict__ . get ( new_method_name )
                  return template . render ( context )
 if resource_string is not None :
 import datetime
 if old_attr is None :
    class NonCapture ( list ) :
 default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the available choices.' ) ,  }
  return value
 if isinstance ( server , six . string_types ) :
           pos_inf = 1e200 * 1e200
 i = j + 1
               warnings . warn ( "OptionParser usage for Django management commands "  "is deprecated, use ArgumentParser instead" ,  RemovedInDjango20Warning )
          if str ( number ) [ 0 ] == sign :
  self . cache_choices = cache_choices
 return data
 output , errors , status = popen_wrapper ( args )
          if not self . _upload_handlers :
              handler . addQuickElement ( "subtitle" , self . feed [ 'subtitle' ] )
 import zlib
      pass
  return palette
    _urllib_response_moved_attributes = [  MovedAttribute ( "addbase" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addclosehook" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addinfo" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addinfourl" , "urllib" , "urllib.response" ) ,  ]
 return from_current_timezone ( result )
                  header , value = settings . SECURE_PROXY_SSL_HEADER
 from django . apps import apps
          parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '*' ,  help = 'Specify the app label(s) to create migrations for.' )
                       obj_pk = field . rel . to . _meta . pk . to_python ( n . getAttribute ( 'pk' ) )
          changeset = None
     class AppCommand ( BaseCommand ) :
 self . digits = digits
   while token . contents . startswith ( 'elif' ) :
 try :
     try :
          self . parent_instance = parent_instance
 self . notation_name = notation_name
    def _import_module ( name ) :
                  for pythonrc in ( os . environ . get ( "PYTHONSTARTUP" ) , '~/.pythonrc.py' ) :
  return '\n' . join ( output )
    def get_script_name ( environ ) :
 warnings = [ e for e in all_issues if checks . WARNING <= e . level < checks . ERROR and not e . is_silenced ( ) ]
from django . dispatch import Signal
          raise base . DeserializationError ( "Invalid model identifier: '%s'" % model_identifier )
                              file_ . close ( )
                      space = line . find ( ' ' ) + 1
                  yield b'' . join ( self )
              boolean_attrs . append ( ( attr , ) )
   def render ( self , name , value , attrs = None , choices = ( ) ) :
          output = [ ]
     def parse_http_date_safe ( date ) :
                  return six . text_type ( s ) . encode ( encoding )
   else :
 wrapper . cache_clear = cache_clear
      pass
  return smart_text ( value )
  output_transaction = True
          from django . db . models . fields . related import RelatedObject
          return False
                  wrapped_callback = self . make_view_atomic ( callback )
 return data . get ( name , None )
 from django . utils . encoding import force_bytes , force_str , force_text
  locations = [ ]
  return True
 return new_context
  def add_arguments ( self , parser ) :
                  raise CommandError ( 'You appear not to have the %r program installed or on your path.' %  connection . client . executable_name )
 from django . utils . functional import allow_lazy
 try :
 self . path_info = ''
 if output :
    def send_messages ( self , messages ) :
 errors = [ ]
  return dec
                  output . extend ( connection . ops . prepare_sql_script ( fp . read ( ) , _allow_fallback = True ) )
     class lazy_property ( property ) :
        def __str__ ( self ) :
   @ property
                  tried . append ( filepath )
 level = handler_config . get ( 'level' , None )
                  raise
  statement . append ( cleaned_line )
   def handle_app_config ( self , app_config , ** options ) :
  else :
              app_configs = [ apps . get_app_config ( app_label ) for app_label in app_labels ]
 def _archive_cls ( file ) :
  final_attrs = self . build_attrs ( attrs , name = name )
          locales . append ( locale . split ( '_' ) [ 0 ] )
 substitutions [ 'clear_checkbox_id' ] = conditional_escape ( checkbox_id )
                  serializers . get_serializer ( format )
          if value in self . empty_values :
              try :
                  obj = mark_for_escaping ( new_obj )
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " FAKED" ) )
               def dec ( func ) :
          raise TemplateSyntaxError ( "'autoescape' tag requires exactly one argument." )
  internal_use_only = True
   except VariableDoesNotExist :
   def decr ( self , key , delta = 1 , version = None ) :
 return self . _cache . add ( key , value , self . get_backend_timeout ( timeout ) )
          return is_library_missing ( path )
     class Parser ( object ) :
          return input_val
          try :
              value = formats . sanitize_separators ( value )
  msg [ name ] = value
          return self . msg % tuple ( force_text ( p , errors = 'replace' ) for p in self . params )
                  with transaction . atomic ( using = database ,  savepoint = connection . features . can_rollback_ddl ) :
 from django . conf import settings
     def _add_doc ( func , doc ) :
 self . key = key or settings . SECRET_KEY
 parser . StartDoctypeDeclHandler = self . start_doctype_decl
   def visible_fields ( self ) :
  else :
 self . file = TemporaryUploadedFile ( self . file_name , self . content_type , 0 , self . charset , self . content_type_extra )
          try :
          if gettext_module . find ( 'django' , path , [ to_locale ( lang_code ) ] ) is not None :
     @ register . filter ( is_safe = True )
 self . settings_exception = None
  super ( RendererMixin , self ) . __init__ ( * args , ** kwargs )
              hextets += [ '' ]
 with io . open ( work_file , "w" , encoding = 'utf-8' ) as fp :
                        flags = ( os . O_WRONLY | os . O_CREAT | os . O_EXCL |  getattr ( os , 'O_BINARY' , 0 ) )
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
    def handle_fk_field ( self , obj , field ) :
                  week_number = 1
          return repr ( self . dicts )
    dictConfigClass = DictConfigurator
          path = force_text ( path )
   def __next__ ( self ) :
               MAXSIZE = int ( ( 1 << 63 ) - 1 )
 while model_dependencies :
  import time
                   if key not in self :
   else :
                  values = reversed ( values )
 return "(" + " " . join ( out ) + ")"
   url = property ( lambda self : self [ 'Location' ] )
 bits = iter ( smart_split ( self . contents ) )
              obj = "?"
          if os . path . exists ( sql_file ) :
                  pass
 if isinstance ( d , real_datetime ) :
               now = now . replace ( tzinfo = None )
 from django . utils . translation import ugettext_lazy as _ , ungettext_lazy
    class CommandParser ( ArgumentParser ) :
          super ( DebugParser , self ) . __init__ ( lexer )
    def _make_key ( args , kwds , typed ,  kwd_mark = ( object ( ) , ) ,  fasttypes = { int , str , frozenset , type ( None ) } ,  sorted = sorted , tuple = tuple , type = type , len = len ) :
 HITS , MISSES = 0 , 1
          original = UnicodeDecodeError . __str__ ( self )
 Encoders . encode_base64 ( attachment )
                          finder = hook ( entry )
  if hasattr ( response , 'render' ) and callable ( response . render ) :
                      content = token_string [ 2 : - 2 ] . strip ( )
 try :
  else :
                      if use_base_manager :
 class __proxy__ ( Promise ) :
    @ register . tag
     def get_image_dimensions ( file_or_path , close = False ) :
 del cmd_options [ 'args' ]
   if fdel is not None :
 try :
          return super ( type ( dt ) , dt ) . strftime ( fmt )
                       field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]
    class BlockContext ( object ) :
              try :
 best_doublecolon_len = 0
                  if self . require_all_fields :
 if language not in _translations :
 return value . rjust ( int ( arg ) )
   def reverse ( self , lookup_view , * args , ** kwargs ) :
  except IndexError :
 pass
 from django . core . cache import caches
              subcommand = self . argv [ 1 ]
  if isinstance ( number , int ) and not use_grouping and not decimal_pos :
          try :
              value = float ( value )
          piece = '' . join ( source [ last : ] )
 with open ( writer . path , "wb" ) as fh :
                      obj . delete ( )
  options = params . get ( 'OPTIONS' , { } )
                          ch , escaped = next ( pattern_iter )
 from django . utils . timezone import get_current_timezone_name
          try :
   def appendlist ( self , key , value ) :
                  self . stdout . write ( "  Applying %s..." % migration , ending = "" )
              self [ key ] = default
   elif field . required :
     def unregister_serializer ( format ) :
 for val in value :
          self . file . seek ( 0 )
  else :
 return str ( dict ( self . items ( ) ) )
          return s
   if PY3 :
  else :
              neg = 0
  except LookupError :
   return result , result_args
              if isinstance ( node , Node ) :
          if not isinstance ( s , Exception ) :
  return klass
 def debug ( parser , token ) :
          t = self . current_token
  if isinstance ( s , six . memoryview ) :
          from django import VERSION as version
                          shutil . copyfileobj ( extracted , outfile )
                  serializers . serialize ( format , get_objects ( ) , indent = indent ,  use_natural_foreign_keys = use_natural_foreign_keys ,  use_natural_primary_keys = use_natural_primary_keys ,  stream = stream or self . stdout )
          if escaped :
              raise ValidationError ( self . message , code = self . code )
  self . _upload_handlers = upload_handlers
    if ip_str . count ( '::' ) > 1 :
              return
      pass
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
                  p_pattern = p_pattern [ 1 : ]
               tables = connection . introspection . table_names ( cursor )
    __iter__ = xreadlines
   class Command ( BaseCommand ) :
          try :
  props = config . pop ( '.' , None )
  if cache_choices is not None :
 inner_args . extend ( args )
              return self . sign + value
  last = max ( 0 , end - 1 )
     class ZipArchive ( BaseArchive ) :
   class RemovedInDjango20Warning ( PendingDeprecationWarning ) :
  class AssignmentNode ( TagHelperNode ) :
          return os . path . getsize ( self . path ( name ) )
   def end_index ( self ) :
 left = t . led ( left , self )
           MAXSIZE = int ( ( 1 << 31 ) - 1 )
 for loader in self . loaders :
 field_params = OrderedDict ( )
              widget = self . field . widget
 class EmailValidator ( object ) :
    if settings . configured :
              self . stdout . write ( "Rendering %s template files with "  "extensions: %s\n" %  ( app_or_project , ', ' . join ( extensions ) ) )
  except KeyError :
 if item [ 'description' ] is not None :
  result = 0
 for basedir in basedirs :
 return True
 stats = [ 0 , 0 ]
                  return True
     def _get_foreign_key ( parent_model , model , fk_name = None , can_fail = False ) :
              result = self . find_template_cache [ key ]
     class Node ( object ) :
 flush = property ( lambda self : self . file . flush )
 f . write ( pickle . dumps ( expiry , - 1 ) )
              obj = force_str ( self . obj )
  from django . conf import settings
  return media
          LocaleRegexProvider . __init__ ( self , regex )
          validate_ipv4_address ( value )
 subject = self . subject
 warnings . warn ( "Your TEMPLATE_LOADERS setting includes %r, but your Python installation doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS." % loader )
 def __init__ ( self , attrs = None ) :
          return parse_http_date ( date )
                handle_app = self . handle_app
          return "<Variable Node: %s>" % self . filter_expression
 raise NotImplementedError ( 'Subclasses must implement this method.' )
          def int2byte ( i ) :
 self . META [ 'SCRIPT_NAME' ] = script_name
   def expression ( self , rbp = 0 ) :
                          continue
  try :
      table_names = [ model . _meta . db_table for model in self . models ]
 from django . utils . encoding import force_str , force_text
 html [ 'month' ] = self . create_select ( name , self . month_field , value , month_val , choices , self . month_none_value )
                  pass
      widget = SplitDateTimeWidget
 __D2 = r'(?P<day>[ \d]\d)'
                  out . write ( blankout ( t . contents , 'X' ) )
      if not response . streaming :
              is_templatized = True
    def decorator_from_middleware ( middleware_class ) :
 notifier . process_events ( )
                if isinstance ( content , EmailMessage ) :
   template_source_loaders = tuple ( loaders )
 if hasattr ( form , 'Meta' ) :
      return _trans . ugettext ( message )
              pass
 return self
              output . extend ( f . post_create_sql ( style , model . _meta . db_table ) )
 self . attrs = attrs
  except ValueError :
                       value = value . decode ( charset )
     def find_template_loader ( loader ) :
 if result and ( mode == 'set' or ( mode == 'add' and current_expires < now ) ) :
 return output
  WEEKDAYS = {  0 : _ ( 'Monday' ) , 1 : _ ( 'Tuesday' ) , 2 : _ ( 'Wednesday' ) , 3 : _ ( 'Thursday' ) , 4 : _ ( 'Friday' ) ,  5 : _ ( 'Saturday' ) , 6 : _ ( 'Sunday' )  }
          return False
    def parse_endtag ( self , i ) :
 if extra_attrs :
      class AdminEmailHandler ( logging . Handler ) :
              self . seek ( 0 )
   def _has_changed ( self , initial , data ) :
 self . write ( s , encoding )
          value = data . get ( name , None )
 from django . core . exceptions import ImproperlyConfigured
   def get_block ( self , name ) :
 result . validators = self . validators [ : ]
  import importlib
                  return '%s-%s-%s' % ( y , m , d )
  return self . __cast ( ) != other
                 def get ( self , key , default = None , version = None ) :
   def attach ( self , filename = None , content = None , mimetype = None ) :
                      current = current [ bit ]
                    url_fields [ 1 ] = url_fields [ 2 ]
   from django . template . base import ( Library , add_to_builtins , builtins ,  get_library , get_templatetags_modules , get_text_list , import_library ,  libraries )
   def get_default_timezone ( ) :
              return node . render ( context )
                      raise CommandError ( 'Unknown model in excludes: %s' % exclude )
 valid_forms = [ form for form in self . forms if form . is_valid ( ) and form not in forms_to_delete ]
from __future__ import unicode_literals
              path = safe_join ( self . location , name )
  import decimal
   from django . conf import settings
 if has_bom ( po_path ) :
  except AttributeError :
 dictreprs = ', ' . join ( repr ( d ) for d in self . dicts )
 tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = '_download' )
                return False
   def to_python ( self , value ) :
 bits = token . split_contents ( )
            all_models = [ ]
 FIELD = "field"
    filter_func . _filter_name = name
from copy import copy
   def tokenize ( self ) :
     def infix ( bp , func ) :
  for i in range ( 0 , len ( pieces ) - 1 , 3 ) :
          hfile = msvcrt . get_osfhandle ( _fd ( f ) )
          key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX
  self . _current = None
   def __repr__ ( self ) :
  except ValueError :
   def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :
          attrs [ 'localized_fields' ] = localized_fields
          db = router . db_for_write ( self . cache_model_class )
  if isinstance ( s , six . text_type ) :
 for pattern in self . url_patterns :
 import warnings
                  return language [ : p ] . lower ( ) + '_' + language [ p + 1 ] . upper ( ) + language [ p + 2 : ] . lower ( )
  check_for_migrations ( app_config , connection )
      def python_reloader ( main_func , args , kwargs ) :
              app_configs = [ apps . get_app_config ( app_label ) for app_label in app_labels ]
 return initial_value != data_value
   return set ( x for x in ext_list if x . strip ( '.' ) not in ignored )
 @ stringfilter
  return RequestContext ( self . _request , context , current_app = self . _current_app )
           six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc_info ( ) [ 2 ] )
  else :
   def check ( self , app_configs = None , tags = None , display_num_errors = False ) :
 if not ( self . data or self . files ) :
     class WSGIRequestHandler ( simple_server . WSGIRequestHandler , object ) :
  except http_cookies . CookieError :
 lib = import_library ( taglib_module )
              @ wraps ( fget )
          self . cmd = cmd
 self . dry_run = options . get ( 'dry_run' , False )
  else :
 if html_message :
  return attrs
              options = parser . parse_args ( argv [ 2 : ] )
          obj = getattr ( models . signals , name )
 table = connections [ db ] . ops . quote_name ( self . _table )
   def initial_form_count ( self ) :
   can_import_settings = False
  split . append ( bit )
 resolver = urlresolvers . RegexURLResolver ( r'^/' , urlconf )
 original_path = os . path . join ( tmpdir , 'original' )
  else :
 off = 6 * ( delta // 100 + delta // 400 )
    class ContextDict ( dict ) :
   return EventHandler . modified_code
   def wrap ( text , width ) :
  except ( DatabaseError , IntegrityError ) as e :
 if not model_identifier :
          raise ImproperlyConfigured ( 'Loader does not define a "load_template" callable template source loader' )
 if form . errors :
              file_obj = handler . file_complete ( counters [ i ] )
 return connection . send_messages ( messages )
 year_val , month_val , day_val = v . year , v . month , v . day
 cache_key = 'views.decorators.cache.cache_header.%s.%s' % (  key_prefix , url . hexdigest ( ) )
  def __init__ ( self , args , kw ) :
 in_tag = False
 foreground = dict ( ( color_names [ x ] , '3%s' % x ) for x in range ( 8 ) )
 def pluralize ( value , arg = 's' ) :
  else :
      from django . utils . six . moves import _thread as thread
  media = property ( _get_media )
  last = max ( 0 , end - 1 )
              raise TypeError (  "Variable must be a string or number, got %s" % type ( var ) )
  subclass = type ( "Migration" , ( Migration , ) , {  "dependencies" : [ ( app_label , migration . name ) for migration in merge_migrations ] ,  } )
              return
  style_func = [ f for f in ( style_func , self . style_func , lambda x : x )  if f is not None ] [ 0 ]
  except IndexError :
                  total_forms = initial_forms
          return super ( Warning , self ) . __init__ ( WARNING , * args , ** kwargs )
                  raise
  def __init__ ( self ) :
                  return False
  def __init__ ( self , config ) :
              self . input_formats = input_formats
 return supported
 if nodelist :
          return self
                      if field . rel is None :
 from django . core . mail . utils import DNS_NAME
 if min_num is None :
  if bcc :
 return random_module . choice ( value )
 host = host . lower ( )
              if isinstance ( query_string , bytes ) :
                  response = middleware_method ( request )
          warnings . warn ( "The syncdb command will be removed in Django 1.9" , RemovedInDjango19Warning )
 root = logging . getLogger ( )
                      common_ancestor = level [ 0 ]
  elif self . verbosity > 0 :
   def default_key_func ( key , key_prefix , version ) :
              signals . got_request_exception . send ( sender = self . __class__ , request = request )
  return self . __class__ ( self )
              subcommand_cls = self . fetch_command ( cwords [ 0 ] )
 parser . add_argument ( '--failfast' ,  action = 'store_true' , dest = 'failfast' , default = False ,  help = 'Tells Django to stop running the test suite after first '  'failed test.' ) ,
 from django . utils . encoding import smart_text , force_text , python_2_unicode_compatible
   def resolve_expression ( self , obj , context ) :
 os . chdir ( our_home_dir )
 self . command_stack = [ ]
 return filename and filename [ filename . rfind ( "\\" ) + 1 : ] . strip ( )
   from django . apps import apps
                  self . active_writers += 1
    class HttpResponseBase ( six . Iterator ) :
 from django . db import connections , transaction , router , DatabaseError
          if memo is None :
              raise AttributeError ( "You cannot set content to a 304 (Not Modified) response" )
                  pk_value = form . instance . pk
      from django . conf import settings
          raise TemplateSyntaxError ( "'autoescape' argument should be 'on' or 'off'" )
 base = force_text ( base )
                  files . append ( entry )
 def iriencode ( value ) :
 super ( PyLibMCCache , self ) . __init__ ( server , params ,  library = pylibmc ,  value_not_found_exception = pylibmc . NotFound )
   else :
    class SafeText ( six . text_type , SafeData ) :
   def smart_urlquote ( url ) :
 robotparser = sys . modules [ __name__ + ".moves.urllib_robotparser" ]
   return result
   def t ( self ) :
    class Literal ( TokenBase ) :
          _load_serializers ( )
   return str ( major + sub )
   def list ( self ) :
 self . cdata_tag = None
      status_code = 302
  except ImportError :
          return self . __name
                          self . stdout . write ( self . style . SQL_KEYWORD ( connection . ops . start_transaction_sql ( ) ) )
 BASE36_ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'
              dict . __setitem__ ( result , copy . deepcopy ( key , memo ) ,  copy . deepcopy ( value , memo ) )
  fd = os . open ( full_path , flags , 0o666 )
 self . fed = [ ]
  if value :
  try :
      def become_daemon ( our_home_dir = '.' , out_log = None , err_log = None , umask = 0o022 ) :
                          raise ValueError ( 'Unable to configure logger '  '%r: %s' % ( name , e ) )
   current_fields . sort ( key = lambda x : x [ 1 ] . creation_counter )
              try :
  except InvalidTemplateLibrary as e :
   if locations :
     def _check_boolean_field_default_value ( app_configs = None , ** kwargs ) :
              if not self . fail_silently :
 return DefusedExpatParser ( )
 if label_output :
  return initial != data
   def handle ( self , ** options ) :
 filename = os . path . basename ( path )
              weight += 2
  else :
    def _get_timezone_name ( timezone ) :
      return _trans . pgettext ( context , message )
          return ''
 if handlers :
   self . _post . appendlist ( field_name ,  force_text ( data , encoding , errors = 'replace' ) )
  return repr ( list ( self ) )
 self . file_name = file_name
 from django . http . response import ( HttpResponse , StreamingHttpResponse ,  HttpResponseRedirect , HttpResponsePermanentRedirect ,  HttpResponseNotModified , HttpResponseBadRequest , HttpResponseForbidden ,  HttpResponseNotFound , HttpResponseNotAllowed , HttpResponseGone ,  HttpResponseServerError , Http404 , BadHeaderError , JsonResponse )
     class InvalidTemplateLibrary ( Exception ) :
          parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '*' )
  return _curried
  return True
 inner . update ( password . translate ( hmac . trans_36 ) )
              return data . getlist ( name )
                      biggest_number = 1
              self . file . write ( raw_data )
  if priority :
 cmatches = constant_re . findall ( t . contents )
   class DummyCache ( BaseCache ) :
  return default
 self . _unget_history = [ ]
  if exclude and f . name in exclude :
              content = File ( content )
                    return self . data . tzinfo . tzname ( self . data ) or ""
  def nud ( self , parser ) :
          raise TemplateSyntaxError ( "'now' statement takes one argument" )
              executor . migrate ( targets , plan , fake = options . get ( "fake" , False ) )
      unlink = os . unlink
              res = ''
  import fnmatch
                              current_expires = typecast_timestamp ( str ( current_expires ) )
 self . _dir = os . path . abspath ( dir )
 try :
      def __init__ ( self , * args , ** kwargs ) :
   class BaseHandler ( object ) :
              yield self [ key ]
              pass
 from django . db . migrations . questioner import MigrationQuestioner , InteractiveMigrationQuestioner
              widget . attrs . update ( extra_attrs )
 path_info = get_path_info ( environ )
    @ register . filter ( is_safe = True )
          return None
  BLOCK_CONTEXT_KEY = 'block_context'
 def __init__ ( self , stream , boundary ) :
              try :
              if settings . USE_L10N :
          raise TemplateSyntaxError ( "'%s' tag takes only one argument" % bits [ 0 ] )
 from threading import local
  except ( ValueError , TypeError ) :
                  if field . serialize :
                  self . _num_pages = 0
  value = connections [ db ] . ops . process_clob ( row [ 1 ] )
              raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : value } ,  )
                  continue
  else :
 return value . tzinfo is not None and value . tzinfo . utcoffset ( value ) is not None
   if _cookie_encodes_correctly and _cookie_allows_colon_in_names :
   from __future__ import absolute_import
     def import_library ( taglib_module ) :
   def split_contents ( self ) :
                      if callable ( limit_choices_to ) :
 index = data . find ( self . _boundary )
 from django . utils . http import urlquote
 if sep is not None :
  def add_arguments ( self , parser ) :
 self . use_natural_primary_keys = options . pop ( 'use_natural_primary_keys' , False )
 self . attachments . append ( filename )
    def media ( request ) :
          connection = connections [ options . get ( 'database' ) ]
              if not form . has_changed ( ) :
                          pass
 def fget ( instance , instance_type = None , name = fget . __name__ ) :
  sign = '-' if offset < 0 else '+'
    def validate ( self , value ) :
   def __copy__ ( self ) :
 fd , tmp_path = tempfile . mkstemp ( dir = self . _dir )
 from django . utils import datastructures
     class SpacelessNode ( Node ) :
          parent = ( form . Meta , object )
  import re
 parser . add_argument ( '--no-optimize' , action = 'store_true' , dest = 'no_optimize' , default = False ,  help = 'Do not try to optimize the squashed operations.' )
 raise
        @ register . filter ( is_safe = False )
   self . autocomplete ( )
  from django . apps import apps
 if app_label not in executor . loader . migrated_apps :
  def transform ( self , node , results ) :
  finally :
 if not commit :
  if dklen > ( 2 ** 32 - 1 ) * hlen :
    return exclude
 key = self . make_key ( key , version = version )
  else :
          return self . _create_attachments ( msg )
  del X
          def __new__ ( cls , * args , ** kwargs ) :
 self . abstract = False
   else :
                  dig1 , dig2 = inner . copy ( ) , outer . copy ( )
              register_serializer ( format , settings . SERIALIZATION_MODULES [ format ] , serializers )
   def _html_output ( self , normal_row , error_row , row_ender , help_text_html , errors_on_separate_row ) :
          return time_str + '-0000'
               warnings . warn ( "No fixture named '%s' found." % fixture_name )
 now = now . replace ( microsecond = 0 )
          return not ( self == other )
    if x == 0 :
    def loads ( s , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , max_age = None ) :
  known_models . add ( model )
      if self . has_header ( 'Content-Encoding' ) :
                  self . _template_response_middleware . insert ( 0 , mw_instance . process_template_response )
 return ''
 db = options . pop ( 'using' , DEFAULT_DB_ALIAS )
 loop_dict [ 'revcounter0' ] = len_values - i - 1
      if role in PALETTES [ NOCOLOR_PALETTE ] and definition :
 import re
   update_watch ( )
      from logging import _checkLevel
 from django . db import connections , DEFAULT_DB_ALIAS
  smart_unicode = smart_text
   def iri_to_uri ( iri ) :
 def bound_func ( * args2 , ** kwargs2 ) :
              num = 0
  else :
 from wsgiref . util import FileWrapper
 super ( SimpleUploadedFile , self ) . __init__ ( BytesIO ( content ) , None , name ,  content_type , len ( content ) , None , None )
   def __lt__ ( self , other ) :
  for ch , escaped in input_iter :
 def __init__ ( self , offset ) :
              value = [ ]
                  if hasattr ( e , 'code' ) and e . code in self . error_messages :
          self . target , self . expression = target , expression
  def handle ( self , ** options ) :
 super ( ChoiceField , self ) . validate ( value )
 for name in sorted ( handlers ) :
    def render ( self , name , value , attrs = None ) :
   def clean ( self , value ) :
 from functools import wraps
   def _init_translation_catalog ( self ) :
          package = import_module ( path )
 return __wrapper__
  return 'tag:%s%s:%s/%s' % ( bits . hostname , d , bits . path , bits . fragment )
                  result . parent = self
 if self . is_bound :
              invalid_apps = [ ]
 self . selected_fields = options . pop ( "fields" , None )
   if sublist_item :
                          os . umask ( old_umask )
  from django . utils . encoding import force_text
     class DateFormat ( TimeFormat ) :
 try :
    def validate_host ( host , allowed_hosts ) :
              handler . addQuickElement ( "ttl" , self . feed [ 'ttl' ] )
    finally :
 import sys
 return bool ( self . children )
   def display ( self ) :
 self . items = [ ]
 if not self . is_valid ( ) :
           return timezone . localize ( value , is_dst = None )
 if value in self . empty_values :
 if re . search ( '^%s%s' % ( prefix_norm , pattern ) , candidate_pat % candidate_subs , re . UNICODE ) :
 return s . getvalue ( )
   except OSError as e :
  self . base_location = location
              for node in nodelist :
              response . streaming_content = [ ]
  elif isinstance ( timezone , six . string_types ) and pytz is not None :
          key = self . make_key ( key , version = version )
 if 'date' not in header_names :
              self [ key ] = result
              if name . lower ( ) in ( 'from' , 'to' ) :
 return mark_safe ( force_text ( text ) . replace ( '&' , '&amp;' ) . replace ( '<' , '&lt;' ) . replace ( '>' , '&gt;' ) . replace ( '"' , '&quot;' ) . replace ( "'" , '&#39;' ) )
   all_models = [  ( app_config . label ,  router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) )  for app_config in apps . get_app_configs ( )  if app_config . models_module is not None and app_config . label in app_labels  ]
      def parse_header ( line ) :
      return _trans . get_language_from_path ( path )
  else :
  self . xml . endElement ( "object" )
 backend = params . pop ( 'BACKEND' )
 from django . utils . deprecation import RemovedInDjango19Warning
  def add_arguments ( self , parser ) :
 duplicate . dicts = self . dicts [ : ]
   except ValueError :
   def _isdst ( self , dt ) :
 self . add_fields ( form , i )
     class ExternalReferenceForbidden ( DefusedXmlException ) :
 if not isinstance ( value , ConvertingDict ) and isinstance ( value , dict ) :
   def make_key ( self , key , version = None ) :
       if self . verbosity >= 1 :
  from collections import OrderedDict
 class BaseFormSet ( object ) :
   def reset_format_cache ( ) :
  else :
  hidden_fields . append ( six . text_type ( bf ) )
                                  pass
          fname = self . _key_to_file ( key , version )
          attrs = super ( IntegerField , self ) . widget_attrs ( widget )
                  def handle_m2m ( value ) :
 from importlib import import_module
          nodelist_empty = parser . parse ( ( 'endfor' , ) )
 from django . core . serializers . python import Serializer as PythonSerializer
      if 'max-age' in cc and 'max_age' in kwargs :
 from django . utils . six . moves . urllib . parse import urlparse
 for smigration in migrations_to_squash :
 from django . template . base import Origin , Template , Context , TemplateDoesNotExist
    return '' . join ( _generator ( ) )
 from django . core . management . utils import ( handle_extensions , find_command ,  popen_wrapper )
 from django . utils . safestring import mark_safe
    def _has_changed ( self , initial , data ) :
  if len ( args ) < 2 :
 pass
      builtins . append ( import_library ( module ) )
 connection = connections [ db ]
   if not isinstance ( viewname , six . string_types ) :
 del options [ 'liveserver' ]
   def writeString ( self , encoding ) :
  s = s . replace ( '\\' , '\\\\' )
    def call_command ( name , * args , ** options ) :
          iteritems = _iteritems
  elif ch == '[' :
 sys . exit ( 1 )
  output = [ ]
       handlers = config . get ( 'handlers' , EMPTY_DICT )
                  return render_value_in_context ( value , context )
                      return self . filter ( name , func , ** flags )
  return False
      if not _serializers :
   class Command ( BaseCommand ) :
  else :
 fp = kwargs . pop ( "file" , sys . stdout )
   def autocomplete ( self ) :
          supported = False
   def close ( self ) :
              lang = get_language ( )
  else :
 import os
 if ( obj . pk is None and hasattr ( Model , 'natural_key' ) and  hasattr ( Model . _default_manager , 'get_by_natural_key' ) ) :
 for field , errors in self . items ( ) :
 id_ = final_attrs . get ( 'id' , None )
 field_notes . append ( "Field renamed because it started with '_'." )
                          self . stdout . write ( "    - %s\n" % operation . describe ( ) )
  ETAG_MATCH = re . compile ( r'(?:W/)?"((?:\\.|[^"])*)"' )
  app_list [ app_config ] = None
    RemovedInNextVersionWarning = RemovedInDjango19Warning
 defaults = dict ( defaults . _get_kwargs ( ) , ** options )
  except UnicodeEncodeError :
                  self . close_called = True
          nesting = 0
 return escapejs ( value )
 words = self . _wrapped . split ( )
 def do_include ( parser , token ) :
   def as_ul ( self ) :
  last = self . data . day % 10
  if code is not None :
     class TimestampSigner ( Signer ) :
              self . choices = [ ( "" , "---------" ) ]
  requires_system_checks = False
 try :
 from IPython . Shell import IPShell
      def handle_template ( self , template , subdir ) :
            context [ self . var_name ] = obj
    finally :
                      expires = timezone . make_naive ( expires , timezone . utc )
 if value in self . empty_values :
              regex_compiled = re . compile ( '^%s/' % language_code , re . UNICODE )
                      message . message = error_messages [ message . code ]
                  self . stdout . write ( "Installed %d object(s) (of %d) from %d fixture(s)" %  ( self . loaded_object_count , self . fixture_object_count , self . fixture_count ) )
      def __init__ ( self , name ) :
     class BaseConfigurator ( object ) :
   def _get_name ( self ) :
              fixture_dirs = [ os . path . dirname ( fixture_name ) ]
              data = self . field . bound_data (  self . data , self . form . initial . get ( self . name , self . field . initial )  )
          self . _cache . disconnect_all ( )
  from itertools import chain
              media = media + field . widget . media
 parser . ExternalEntityRefHandler = self . external_entity_ref_handler
          mapping = { 'alpha' : 'a' , 'beta' : 'b' , 'rc' : 'c' }
   else :
 flags = 0
     def is_safe_url ( url , host = None ) :
 return new_value
              digest = hashlib . sha256
          self . filters = { }
 if match :
  if reason is not None :
 from django . utils import six
          raise TemplateSyntaxError ( "widthratio takes at least three arguments" )
               self . _initialize_handlers ( )
 known_models . append ( table2model ( table_name ) )
              return x
 args = [ ]
                              try :
          locale = options . get ( 'locale' )
                      if not self . _css . get ( medium ) or path not in self . _css [ medium ] :
              self . error ( self . cmd . missing_args_message )
 i += 1
 self . current_token = self . next_token ( )
 return update_wrapper ( wrapper , user_function )
  if name is None :
     class ImageField ( FileField ) :
          try :
      class DebugVariableNode ( VariableNode ) :
   if six . PY3 :
   return value
           try :
   def compile_filter ( self , token ) :
 from django . utils . encoding import force_text
          return self . _queryset
  continue
 if comment_lineno_cache == cur_lineno :
    if response . has_header ( 'Cache-Control' ) :
from __future__ import unicode_literals
   Model = self . _get_model_from_node ( node , "model" )
  if self . initial and 'initial' not in kwargs :
 return dict ( ( key , self [ key ] ) for key in self )
from django . forms . extras . widgets import SelectDateWidget
          self . _archive = tarfile . open ( file )
 orig_file = os . path . join ( self . dirpath , self . file )
                      app_label , model_label = label . split ( '.' )
   try :
 try :
                   count , ch = get_quantifier ( ch , pattern_iter )
  elif ch == '$' :
 raise NotImplementedError ( 'subclasses of Widget must provide a render() method' )
 if path . exists ( new_path ) :
  return output
    ip_str = _explode_shorthand_ip_string ( ip_str )
 try :
   def open ( self ) :
   @ property
  for field in unique_check :
                         self . handle_file_complete ( old_field_name , counters )
          value = force_text ( value )
    return output
                  self . cookies [ key ] [ 'expires' ] = expires
   try :
  return True
  def prepare_value ( self , value ) :
    def j ( self ) :
            try :
 if kwargs [ 'setting' ] in ( 'LANGUAGES' , 'LANGUAGE_CODE' ) :
          initial_value = initial if initial is not None else ''
          __bytes__ = serialize
 params . update ( kwargs )
              self . validators . append ( validators . MinValueValidator ( min_value ) )
  response [ 'Content-Length' ] = '0'
                  self . timezone = obj . tzinfo
   def serialize ( self ) :
               if index is not None and index < self . initial_form_count ( ) :
 raise NotImplementedError ( 'may be implemented in a future release' )
               if id_ :
              table_names = connection . introspection . table_names ( cursor )
  else :
                  self . stdout . write ( self . style . MIGRATE_HEADING ( "Synchronizing apps without migrations:" ) )
              value = unicode_value . strip ( )
     @ register . filter ( is_safe = False )
          super ( InMemoryUploadedFile , self ) . __init__ ( file , name , content_type , size , charset , content_type_extra )
 return TEMPLATE_FRAGMENT_KEY_TEMPLATE % ( fragment_name , args . hexdigest ( ) )
 import binascii
  except ImportError :
  sys . modules [ __name__ + ".moves.urllib_robotparser" ] = sys . modules [ __name__ + ".moves.urllib.robotparser" ] = Module_six_moves_urllib_robotparser ( __name__ + ".moves.urllib.robotparser" )
          return { "version" : self . _version ,  "xmlns:atom" : "http://www.w3.org/2005/Atom" }
              handler . addQuickElement ( "link" , "" , { "rel" : "self" , "href" : self . feed [ 'feed_url' ] } )
 recipients = [ sanitize_address ( addr , email_message . encoding )  for addr in email_message . recipients ( ) ]
  template_source_loaders = None
 try :
  else :
 self . add_item_elements ( handler , item )
          return force_text ( settings . FORCE_SCRIPT_NAME )
          parser . add_argument ( 'args' , metavar = 'table_name' , nargs = '*' ,  help = 'Optional table names. Otherwise, settings.CACHES is used to '  'find cache tables.' )
    if hasattr ( hmac , "compare_digest" ) :
   return avoid_wrapping ( value )
          get = '<could not parse>'
 output . extend ( [ encode ( k , force_bytes ( v , self . encoding ) )  for v in list_ ] )
              return value
    @ register . filter ( is_safe = True )
 filename = tmp . split ( '/' ) [ - 1 ]
 safe = isinstance ( value , SafeData )
  if size == 0 :
          pass
 if count != 0 :
  return default
 trailing_empty_content_re = re . compile ( r'(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z' )
    @ register . tag
  return self . dicts . pop ( )
          fp . write ( msgs )
  return bits [ 0 ] , ''
     class SplitHiddenDateTimeWidget ( SplitDateTimeWidget ) :
   else :
 slots = orig_vars . get ( '__slots__' )
    def sql_flush ( style , connection , only_django = False , reset_sequences = True , allow_cascade = False ) :
    _mutable = True
      bits = list ( token . split_contents ( ) )
 DEFAULT_CHUNK_SIZE = 64 * 2 ** 10
          return value
 return '' . join ( char2number . get ( c , c ) for c in phone . lower ( ) )
 output = [ format_html ( '<select{0}>' , flatatt ( final_attrs ) ) ]
              frame = sys . _getframe ( 1 )
  internal_use_only = False
          if len ( unique_check ) == 1 :
  from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
       if only_new :
      get_callable . cache_clear ( )
   def handle_app_config ( self , app_config , ** options ) :
          if self . _isdst ( dt ) :
   def A ( self ) :
  class InclusionNode ( TagHelperNode ) :
   def pop ( self ) :
  if not data and initial :
   url = url . replace ( '\\' , '/' )
              return [ ( k , self [ k ] ) for k in self . keyOrder ]
    from django . core . servers . basehttp import get_internal_wsgi_application
  chunk = next ( self )
 self . show_hidden_initial = show_hidden_initial
 return force_text ( quote_plus ( force_str ( url ) , force_str ( safe ) ) )
 handler . addQuickElement ( "name" , item [ 'author_name' ] )
 from django . core . cache . backends . db import BaseDatabaseCache
      help = "Prints the custom table modifying SQL statements for the given app name(s)."
 for level in zip ( * [ m . ancestry for m in merge_migrations ] ) :
                  timeout = int ( timeout )
 nodelist_true = parser . parse ( ( 'else' , 'endifchanged' ) )
 result . widget = copy . deepcopy ( self . widget , memo )
 if _supported is None :
  existing . remove ( name )
 self . month_none_value = self . none_value
  import re
   return value
           template = get_template_from_string ( template , origin , template_name )
     if label_suffix and contents and contents [ - 1 ] not in _ ( ':?.!' ) :
 from django . utils . module_loading import import_string
  from django . utils . encoding import force_text , DEFAULT_LOCALE_ENCODING
                         consume_next = False
  else :
    for node in compiled_parent . nodelist :
  elif ':' not in middle and simple_email_re . match ( middle ) :
 return cursor . fetchone ( ) is not None
 if match :
  def __init__ ( self , stream_or_string , ** options ) :
                              out . write ( ' gettext(%r) ' % join_tokens ( singular ,  trimmed ) )
  if filename not in _mtimes :
          return NodeList ( node for _ , nodelist in self . conditions_nodelists for node in nodelist )
 MIMEText . __setitem__ ( self , name , val )
              self . label = self . field . label
 if changes :
              url = value
  if errors :
                      return self . tag ( name , func )
   def clean ( self ) :
  elif char in 'dj' :
                  import_module ( '%s.%s' % ( app_config . name , module_to_search ) )
  states = {   'div' : both_before + [  Tok ( "punct" , literals ( "/= /" ) , next = 'reg' ) ,  ] + both_after ,    'reg' : both_before + [  Tok ( "regex" ,  r"""                     /                       # opening slash                     # First character is..                     (   [^*\\/[]            # anything but * \ / or [                     |   \\.                 # or an escape sequence                     |   \[                  # or a class, which has                             (   [^\]\\]     #   anything but \ or ]                             |   \\.         #   or an escape sequence                             )*              #   many times                         \]                     )                     # Following characters are same, except for excluding a star                     (   [^\\/[]             # anything but \ / or [                     |   \\.                 # or an escape sequence                     |   \[                  # or a class, which has                             (   [^\]\\]     #   anything but \ or ]                             |   \\.         #   or an escape sequence                             )*              #   many times                         \]                     )*                      # many times                     /                       # closing slash                     [a-zA-Z0-9]*            # trailing flags                 """ , next = 'div' ) ,  ] + both_after ,  }
 new_permissions = stat . S_IMODE ( st . st_mode ) | stat . S_IWUSR
              id_ = 'id_%s' % name
   def render ( self , context ) :
  self . serialization_formats = serializers . get_public_serializer_formats ( )
  self . _cached_loaders = cached_loaders
  else :
 return value . upper ( )
    def do_translate ( message , translation_function ) :
  except KeyError :
 text = force_text ( text )
 return date ( datetime . now ( tz = tzinfo ) , self . format_string )
    def as_table ( self ) :
               final_attrs [ 'value' ] = force_text ( value )
   def top ( self ) :
    class override ( object ) :
              try :
   create_bound_method = types . MethodType
                              field_desc += ', '
 request_repr = "unavailable"
                          setattr ( filter_func . _decorated_function , attr , value )
 msg = SafeMIMEText ( self . body , self . content_subtype , encoding )
 if isinstance ( choice_label , ( tuple , list ) ) :
  full_statement = [ "CREATE TABLE %s (" % qn ( tablename ) ]
          return False
 with open ( path , 'rb' ) as f :
 if filter_name in ( 'escape' , 'safe' ) :
              result = datetime . datetime ( value . year , value . month , value . day )
 self . error_class = error_class
          self . _assert_mutable ( )
                      for f in dirs :
       if hasattr ( os . path , 'samefile' ) :
 if space == 0 :
  class _HashedSeq ( list ) :
 from django . core import signals
 return value . replace ( '\\' , '\\\\' ) . replace ( '"' , '\\"' ) . replace ( "'" , "\\'" )
 DOT_PATTERN = re . compile ( r'^\.\s*(\w+)\s*' )
          return DebugNodeList ( )
 codecs . lookup ( encoding )
   from django . conf import settings
  return [ k for k , v in six . iteritems ( _serializers ) if not v . Serializer . internal_use_only ]
 return time_str + '%+03d:%02d' % ( hour , minute )
 if response :
 if not widget :
 plat = sys . platform
 for i in range ( 0 , self . total_form_count ( ) ) :
  if isinstance ( value , datetime . time ) :
 parser . add_argument ( '--ipv6' , '-6' , action = 'store_true' , dest = 'use_ipv6' , default = False ,  help = 'Tells Django to use an IPv6 address.' )
    class HttpResponseNotModified ( HttpResponse ) :
         OPERATORS = {  'or' : infix ( 6 , lambda context , x , y : x . eval ( context ) or y . eval ( context ) ) ,  'and' : infix ( 7 , lambda context , x , y : x . eval ( context ) and y . eval ( context ) ) ,  'not' : prefix ( 8 , lambda context , x : not x . eval ( context ) ) ,  'in' : infix ( 9 , lambda context , x , y : x . eval ( context ) in y . eval ( context ) ) ,  'not in' : infix ( 9 , lambda context , x , y : x . eval ( context ) not in y . eval ( context ) ) ,  '=' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) ,  '==' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) ,  '!=' : infix ( 10 , lambda context , x , y : x . eval ( context ) != y . eval ( context ) ) ,  '>' : infix ( 10 , lambda context , x , y : x . eval ( context ) > y . eval ( context ) ) ,  '>=' : infix ( 10 , lambda context , x , y : x . eval ( context ) >= y . eval ( context ) ) ,  '<' : infix ( 10 , lambda context , x , y : x . eval ( context ) < y . eval ( context ) ) ,  '<=' : infix ( 10 , lambda context , x , y : x . eval ( context ) <= y . eval ( context ) ) ,  }
 if pieces [ - 1 ] :
   def escapejs ( value ) :
          value = force_str ( value )
 statement = [ ]
    if len ( s ) > 13 :
 if isinstance ( filename , MIMEBase ) :
  try :
  if settings . USE_TZ :
              @ wraps ( fdel )
   def __exit__ ( self , * args , ** kwargs ) :
  else :
   else :
 from django . utils . encoding import force_text
  elif self . _delegate_text :
     if best_doublecolon_len > 1 :
                  last_row = output [ - 1 ]
 key = bytes_to_text ( key , self . encoding )
          yes , no , maybe = bits
 super ( WSGIServer , self ) . server_bind ( )
  else :
  except TypeError :
                      arg_vals . append ( arg . resolve ( context ) )
   def _create_mime_attachment ( self , content , mimetype ) :
  else :
 for bit in bits :
 if not self . is_required and CheckboxInput ( ) . value_from_datadict (  data , files , self . clear_checkbox_name ( name ) ) :
  data [ field . attname ] = value
     class StreamingHttpResponse ( HttpResponseBase ) :
              escaped = True
          return number_format ( value )
              self . _current [ field . name ] = field . value_to_string ( obj )
           return timezone . zone
    def runfastcgi ( argset = [ ] , ** kwargs ) :
   def bpython ( self ) :
 plural = [ ]
              name = p [ : i ] . strip ( ) . lower ( ) . decode ( 'ascii' )
     role , instructions = part . split ( '=' )
 return [ field for field in self if not field . is_hidden ]
 with io . open ( os . path . join ( self . dirpath , thefile ) , "w" , encoding = 'utf-8' ) as fp :
 def upload_handlers ( self , upload_handlers ) :
   re_words = re . compile ( r'<.*?>|((?:\w[-\w]*|&.*?;)+)' , re . U | re . S )
  from django . conf import settings
 representative = ESCAPE_MAPPINGS . get ( ch , ch )
 args = ''
    def __call__ ( self , value ) :
  if data is None :
   class SimplerXMLGenerator ( XMLGenerator ) :
    def end_serialization ( self ) :
              return r'\"'
              if not self . keep_pot :
  from xml . sax . saxutils import XMLGenerator
              return { "xmlns" : self . ns }
              raise base . SerializationError ( "Non-model object (%s) encountered during serialization" % type ( obj ) )
                                  filemsg = 'file %s, ' % origin
              for module in get_format_modules ( lang ) :
  for loader in template_source_loaders :
 self . add_fields ( form , None )
 from django . utils . formats import get_format
  return args , kwargs
                  yield import_module ( '%s.formats' % ( location % loc ) )
      compare = lambda self , a , b : a < b
 import datetime
    conflicts = loader . detect_conflicts ( )
 from django . forms . fields import Field , ChoiceField
 super ( IncludeNode , self ) . __init__ ( * args , ** kwargs )
                  deps = getattr ( model . natural_key , 'dependencies' , [ ] )
      """     Adds (or updates) the "Vary" header in the given HttpResponse object.     newheaders is a list of header names that should be in "Vary". Existing     headers in "Vary" aren't removed.     """
 self . name = name or func . __name__
   return getattr ( settings , format_type )
 code = 'max_length'
 import sys
  elif field_type == 'IntegerField(' and not connection . features . can_introspect_autofield :
  else :
    class SuspiciousOperation ( Exception ) :
  self . _current [ field . name ] = value
 from django . utils . encoding import force_text , iri_to_uri
   if __name__ == '__main__' :
   __all__ = [  'activate' , 'deactivate' , 'override' , 'deactivate_all' ,  'get_language' , 'get_language_from_request' ,  'get_language_info' , 'get_language_bidi' ,  'check_for_language' , 'to_locale' , 'templatize' , 'string_concat' ,  'gettext' , 'gettext_lazy' , 'gettext_noop' ,  'ugettext' , 'ugettext_lazy' , 'ugettext_noop' ,  'ngettext' , 'ngettext_lazy' ,  'ungettext' , 'ungettext_lazy' ,  'pgettext' , 'pgettext_lazy' ,  'npgettext' , 'npgettext_lazy' ,  'LANGUAGE_SESSION_KEY' ,  ]
         if six . PY3 or os . name == 'nt' :
  elif str ( level ) == level :
   def compress ( self , data_list ) :
 def __init__ ( self , name , value , base , sysid , pubid , notation_name ) :
  new_context = context_class ( _dict , ** {  'autoescape' : context . autoescape ,  'current_app' : context . current_app ,  'use_l10n' : context . use_l10n ,  'use_tz' : context . use_tz ,  } )
 try :
              digits . append ( '-' )
 extensions = options . get ( 'extensions' )
                  _html_parser . HTMLParser . __init__ ( self , convert_charrefs = convert_charrefs , ** kwargs )
  output = [ ]
    else :
                      value = getattr ( self , 'clean_%s' % name ) ( )
                            raise ValueError ( "Non-reversible reg-exp portion: '(?%s'" % ch )
  from . . import Warning , register , Tags
  if self . localize :
 if use_l10n or ( use_l10n is None and settings . USE_L10N ) :
    from django . core . exceptions import ValidationError
              field_notes . append ( 'Field name made lowercase.' )
          for dict_ in self . dicts :
    def get_mod_func ( callback ) :
              return False
  if alter_sql :
 if self . output_transaction :
 for name in bits [ 1 : - 2 ] :
  tried . append ( [ pattern ] )
   def B ( self ) :
              raise self . warning
  import errno
  except ( ValueError , TypeError ) :
 return smart_text ( obj )
    @ register . filter ( is_safe = True )
    @ register . filter ( is_safe = False )
              raise ImproperlyConfigured ( 'Path for saving emails is invalid: %r' % self . file_path )
    context [ self . var_name ] = [  { 'grouper' : key , 'list' : list ( val ) }  for key , val in  groupby ( obj_list , lambda obj : self . resolve_expression ( obj , context ) )  ]
  return six . text_type ( s ) . encode ( encoding , errors )
 return sql_create ( app_config , style , connection ) + sql_custom ( app_config , style , connection ) + sql_indexes ( app_config , style , connection )
 if self . feed [ 'feed_url' ] is not None :
  text_args = [ force_text ( v ) for v in args ]
 import base64
              error_msg = "Tried %s" % tried
import warnings
 def extra_forms ( self ) :
     def make_bytes ( self , value ) :
      from yaml import CSafeLoader as SafeLoader
  def load_template_source ( self , template_name , template_dirs = None ) :
 if m . group ( 1 ) :
      def _curried ( * moreargs , ** morekwargs ) :
 cc = dict ( dictitem ( el ) for el in cc )
   def get ( self , key , default = None , version = None ) :
   def keys ( self ) :
 fname = self . _key_to_file ( key , version )
                      break
 try :
 _len = len
 def __repr__ ( self ) :
          self . _archive = self . _archive_cls ( file ) ( file )
    for app_name in app_names :
  if format not in _serializers :
 if not hasattr ( package , 'rindex' ) :
    if want_unicode :
   def _reset_dicts ( self , value = None ) :
 rfcdate = formatdate ( epoch_seconds )
 self . toks = { }
     class Form ( six . with_metaclass ( DeclarativeFieldsMetaclass , BaseForm ) ) :
   def exit_command ( self ) :
   if invalid_apps :
   def eval ( self , context ) :
 import subprocess
        @ register . filter ( is_safe = True )
    lang_code = request . COOKIES . get ( settings . LANGUAGE_COOKIE_NAME )
          fd = sys . stdin
   def complain ( self , * wargs , ** kwargs ) :
  except UnicodeDecodeError :
          changeset = timestamp . strftime ( '%Y%m%d%H%M%S' )
    sign , digits , exponent = d . quantize ( exp , ROUND_HALF_UP ,  Context ( prec = prec ) ) . as_tuple ( )
          return setattr ( caches [ DEFAULT_CACHE_ALIAS ] , name , value )
   def __repr__ ( self ) :
          now = datetime . datetime . now ( utc if is_aware ( d ) else None )
 compile_func . __doc__ = func . __doc__
 message_context = context_match . group ( 1 )
 if arg is None :
 try :
     class MemoryFileUploadHandler ( FileUploadHandler ) :
      operations = [ ]
   return instance
              for dirname in dirnames [ : ] :
                          deps . append ( rel_model )
 return IfEqualNode ( val1 , val2 , nodelist_true , nodelist_false , negate )
  else :
 import sys
 from io import BytesIO
   final_output . extend ( connection . creation . sql_for_pending_references ( model , style , pending_references ) )
   return view_func
          unique_check = [ field for field in unique_check if field != self . fk . name ]
  hextets [ best_doublecolon_start : best_doublecolon_end ] = [ '' ] 
 from io import BytesIO
 from django . core . management . templates import TemplateCommand
              self . characters ( contents )
 with self . _lock . writer ( ) :
      def __init__ ( self , dict_ = None ) :
  naiveip_re = re . compile ( r"""^(?: (?P<addr>     (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |         # IPv4 address     (?P<ipv6>\[[a-fA-F0-9:]+\]) |               # IPv6 address     (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) # FQDN ):)?(?P<port>\d+)$""" , re . X )
                          initial_value = initial_value ( )
 warnings . warn ( "resolve_variable() is deprecated. Use django.template."  "Variable(path).resolve(context) instead" ,  RemovedInDjango20Warning , stacklevel = 2 )
 if not _is_shorthand_ip ( ip_str ) :
 statements = connection . ops . sql_flush ( style , tables , seqs , allow_cascade )
  raise TemplateSyntaxError ( error_msg )
    def configure_root ( self , config , incremental = False ) :
 if hasattr ( timezone , 'localize' ) :
              deactivate ( )
          self . subject = subject
          self . validate_unique ( )
              safe = force_bytes ( safe , self . encoding )
  else :
   def delete ( self , name ) :
 if cmatch :
 if finder is None :
    if PY3 :
 from django . core . handlers import base
              self . attrs = { }
    class MultipleObjectsReturned ( Exception ) :
 from django . conf import settings
                  register_to . _registry = before_import_registry
  with connection . cursor ( ) as cursor :
  else :
   def get_form_error ( self ) :
 if version [ 3 ] == 'alpha' and version [ 4 ] == 0 :
  except ImportError :
                if comment_lineno_cache is not None :
 if isinstance ( value , six . string_types ) :
              return self . hashvalue
          return map ( self . make_bytes , self . _iterator )
     def Deserializer ( object_list , ** options ) :
 link_prev [ NEXT ] = link_next
 from django . utils import six
     class SplitDateTimeField ( MultiValueField ) :
 requires_system_checks = False
 def safeseq ( value ) :
          bits = [ ]
     def strip_tags ( value ) :
 self . deleted_objects = [ ]
                     return b' ' . join ( [ force_bytes ( arg , encoding , strings_only ,  errors ) for arg in s ] )
  return ( 0 , k [ 1 ] )
              return self . forms [ 0 ] . media
  else :
 cls . _delegate_text = six . text_type in resultclasses
    def flatten_result ( source ) :
          dec_part = dec_part + ( '0' * ( decimal_pos - len ( dec_part ) ) )
 from django . utils import six
 clear_checkbox_label = ugettext_lazy ( 'Clear' )
 interactive = options . get ( 'interactive' )
  language_code_re = re . compile ( r'^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' , re . IGNORECASE )
   def reader_leaves ( self ) :
                  self . stream . write ( " " )
  if isinstance ( s , Promise ) :
  if ( 3 , 2 ) < sys . version_info < ( 3 , 3 , 4 ) :
 value = super ( IntegerField , self ) . to_python ( value )
  from django . core . exceptions import ImproperlyConfigured , DjangoRuntimeWarning
     if isinstance ( obj , datetime . datetime ) :
  if max_value is not None :
 __imul__ = complain
  def b ( self ) :
  return 0 , ch2
    def _itervalues ( self ) :
              return
  if hasattr ( self . file , 'name' ) :
 return files . get ( name , None )
 from django . utils . encoding import force_bytes
 def media ( self ) :
                  return - 1
              reloader_thread ( )
 return self . _urlconf_module
          register_serializer ( format , BUILTIN_SERIALIZERS [ format ] , serializers )
  import glob
 match = datetime_re . match ( value )
  return result
 day_of_year = self . z ( )
   if p . image :
          if value in self . empty_values :
          return escape ( text )
 handle_default_options ( options )
   def N ( self ) :
           value = timezone . normalize ( value )
     _translations = { }
  else :
   except KeyError :
  return self . _upload_handlers
                      translated = translated % rhs
   self . use_ipv6 = options . get ( 'use_ipv6' )
                          if kwargs . get ( k , v ) != v :
          nodelist_false = parser . parse ( ( 'endifchanged' , ) )
              formfield = self . fields [ field_name ]
                  src_data = fp . read ( )
      is_usable = True
  def _decorator ( view_func ) :
  if PY3 :
 return datetime . datetime ( ** kw )
  if not _cached_filenames and settings . USE_I18N :
  with connections [ db ] . cursor ( ) as cursor :
           if args [ - 3 ] == "as" :
   if self . field . localize :
                          out . write ( ' gettext(%r) ' % g )
 last [ NEXT ] = root [ PREV ] = link
from __future__ import unicode_literals
              self . keyOrder . append ( key )
                      self . _changed_data . append ( name )
                      message = ValidationError ( message )
                      rel_model = field . rel . to
              raise CommandError ( "This script should be run from the Django Git "  "checkout or your project or app tree, or with "  "the settings module specified." )
 def __init__ ( self , name , content_type , size , charset , content_type_extra = None ) :
          if settings . FILE_UPLOAD_TEMP_DIR :
 if 'error_messages' in kwargs :
  __author__ = "Benjamin Peterson <benjamin@python.org>"
  self . cookies = SimpleCookie ( )
   class InvalidCacheBackendError ( ImproperlyConfigured ) :
                              d = d [ idx ]
          super ( DictWrapper , self ) . __init__ ( data )
              this_year = datetime . date . today ( ) . year
 global _format_cache , _format_modules_cache
 constant_re = re . compile ( r"""_\(((?:".*?")|(?:'.*?'))\)""" )
 color_settings = termcolors . parse_color_setting ( DJANGO_COLORS )
 from django . utils . deprecation import RemovedInDjango20Warning
   @ property
 def yesno ( value , arg = None ) :
 def management_form ( self ) :
   self . default_timeout = timeout
      def become_daemon ( our_home_dir = '.' , out_log = '/dev/null' ,  err_log = '/dev/null' , umask = 0o022 ) :
              try :
   var_node = self . create_variable_node ( filter_expression )
 for key in self :
  yield buf . read ( )
  except ( ValueError , TypeError ) :
  elif f . unique :
              name , value = main_value_pair . split ( ':' , 1 )
    def copy ( self ) :
   else :
              raise TemplateSyntaxError ( "Invalid syntax in widthratio tag. Expecting 'as' keyword" )
          value = request . META . get ( header , None )
              continue
          pid = os . getpid ( )
 return self . renderer ( name , value , final_attrs , choices )
  self . error_dict [ field ] = messages . error_list
 from __future__ import unicode_literals
          self . file = file
     _illegal_formatting = re . compile ( r"((^|[^%])(%%)*%[sy])" )
  if not want_unicode :
   if found :
  elif _len ( cache ) >= maxsize :
   def _construct_form ( self , i , ** kwargs ) :
                  if field_node . getElementsByTagName ( 'None' ) :
               for supported_code in _supported :
   def has_changed ( self ) :
              if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
              content_length = 0
          msg = "%s doesn't look like a module path" % dotted_path
                      self . _js . append ( path )
  else :
   def cache_key ( self , template_name , template_dirs ) :
 time_str = date . strftime ( '%s, %%d %s %%Y %%H:%%M:%%S ' % ( dow , month ) )
 from django . utils . deprecation import RemovedInDjango19Warning , RemovedInDjango20Warning
                  pass
              use_func = False
                  want_unicode = True
 value = str ( '%s%s%s' ) % ( value , self . sep , self . timestamp ( ) )
  else :
          return False
 try :
 module_values = set ( sys . modules . values ( ) )
          return tuple ( bits )
 if isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) :
  l = - ( - dklen // hlen )
          timeout = self . get_backend_timeout ( timeout )
          values = dict ( ( key , val . resolve ( context ) ) for key , val in  six . iteritems ( self . extra_context ) )
          return do_translate ( message , 'ugettext' )
 for attr , value in list ( attrs . items ( ) ) :
          parser . add_argument ( '--locale' , '-l' , default = [ ] , dest = 'locale' , action = 'append' ,  help = 'Creates or updates the message files for the given locale(s) (e.g. pt_BR). '  'Can be used multiple times.' )
   def __next__ ( self ) :
  except LookupError :
    if top_errors :
              if os . path . isdir ( os . path . join ( path , entry ) ) :
  else :
 try :
  else :
  from django . apps import apps
              if action == "apply_start" :
   if field . rel . to . _meta . pk . rel :
  self . _callback_strs . update ( pattern . _callback_strs )
 return self . data . day
 encoding = None
          _translations [ language ] = DjangoTranslation ( language )
              cursor . close ( )
  except ( ValueError , TypeError ) :
              try :
 raise NotImplementedError ( 'subclasses of Serializer must provide an handle_field() method' )
          lexer_class , parser_class = Lexer , Parser
  if arg < 1 :
     elif subcommand == 'version' or self . argv [ 1 : ] == [ '--version' ] :
 result = cursor . fetchone ( )
 return lambda text : colorize ( text , opts , ** kwargs )
      def _setup ( self ) :
        def compare_ordering_key ( k ) :
              self . attrs [ 'id' ] += "_%d" % self . index
 import warnings
 LockFileEx . argtypes = [ HANDLE , DWORD , DWORD , DWORD , DWORD , LPOVERLAPPED ]
          attrs = super ( DecimalField , self ) . widget_attrs ( widget )
        must_be_first = False
          return path
              return timezone . make_aware ( value , current_timezone )
   self . creation_counter = Field . creation_counter
 from django . utils . formats import localize
 raise NotImplementedError ( 'subclasses of Deserializer must provide a __next__() method' )
  plural_forms_re = re . compile ( r'^(?P<value>"Plural-Forms.+?\\n")\s*$' , re . MULTILINE | re . DOTALL )
          return caches [ DEFAULT_CACHE_ALIAS ] == other
 def unordered_list ( value , autoescape = None ) :
  def __init__ ( self , obj , m2m_data = None ) :
from __future__ import unicode_literals
    def rmtree_errorhandler ( func , path , exc_info ) :
          int_part , dec_part = str_number . split ( '.' )
   def avoid_wrapping ( value ) :
  elif not isinstance ( file_name , six . string_types ) and is_iterable ( file_name ) :
 open_tags = [ ]
     class RadioChoiceInput ( ChoiceInput ) :
  root = nonlocal_root [ 0 ] = oldroot [ NEXT ]
  else :
          script_name = get_script_name ( environ )
          return self . token
    class FileBasedCache ( BaseCache ) :
                  formatter = self . config [ 'formatters' ] [ formatter ]
 if token . token_type == TOKEN_BLOCK and token . contents == endtag :
 if language_code not in self . _namespace_dict :
          return ''
 if self . field . show_hidden_initial :
  return dec
 return type ( form . __name__ + str ( 'FormSet' ) , ( formset , ) , attrs )
                      if self . selected_fields is None or field . attname in self . selected_fields :
 self . translate = False
 from functools import wraps
          parser . add_argument ( '--all' , action = 'store_true' , dest = 'all' , default = False ,  help = 'Display all settings, regardless of their value. '  'Default values are prefixed by "###".' )
  return result
          i = p . find ( b'=' )
  unescape_entities = allow_lazy ( unescape_entities , six . text_type )
  pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
 def __getattr__ ( self , name ) :
 factor = 0
  import socket
 self . validate_key ( key )
   def urlencode ( query , doseq = 0 ) :
   form . data [ form . add_prefix ( self . fk . name ) ] = None
              pass
                      cls . __bytes__ = cls . __bytes_cast
 from django . forms . widgets import ( SelectMultiple , HiddenInput ,  MultipleHiddenInput )
              as_form = True
   finally :
 is_localized = False
                          callback = lambda response : middleware . process_response ( request , response )
              return _ ( 'midnight' )
 import sys
          value = super ( TypedMultipleChoiceField , self ) . clean ( value )
  return urljoin ( self . base_url , filepath_to_uri ( name ) )
          return
 def ifequal ( parser , token ) :
import warnings
   def __str__ ( self ) :
  import json
  if any ( len ( x ) < 4 for x in ip_str . split ( ':' ) ) :
   def validate_unique ( self ) :
                       continue
     set_script_prefix ( get_script_name ( environ ) )
  if upto != len ( token ) :
  result . sort ( key = lambda k : k [ 1 ] , reverse = True )
              raise TemplateSyntaxError (  "'%s' is decorated with takes_context=True so it must "  "have a first argument of 'context'" % name )
  return attrs
 self . timeout = timeout
              data = [ ]
              if hasattr ( base , 'base_fields' ) :
 if keys :
               attachment = MIMEBase ( basetype , subtype )
 from django . core . files import temp as tempfile
              max_width = min ( ( line . endswith ( '\n' ) and width + 1 or width ) , width )
                              self . handle_field ( obj , field )
              extra_files . extend ( map ( lambda x : x . strip ( ) , file . split ( ',' ) ) )
              curr = ''
              handler . addQuickElement ( "rights" , item [ 'item_copyright' ] )
   elif issubclass ( klass , logging . handlers . SMTPHandler ) and 'mailhost' in config :
      compare = lambda self , a , b : a > b
              truncate = pgettext (  'String to return when truncating text' ,  '%(truncated_text)s...' )
  else :
    if item [ 'item_copyright' ] is not None :
              fk = fks_to_parent [ 0 ]
   @ property
    self . base_fields [ MIN_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )
                   if ( form . cleaned_data and form . cleaned_data [ field ] is not None  and form . cleaned_data [ unique_for ] is not None ) :
 charset = content_type_extra . get ( 'charset' )
      msg_with_ctxt = "%s%s%s" % ( context , CONTEXT_SEPARATOR , message )
 nonlocal_root = [ root ]
 self . allow_files , self . allow_folders = allow_files , allow_folders
import copy
          return self . has_key ( key )
  elif isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) :
 if not self . is_valid ( ) or not self . can_order :
     def get_storage_class ( import_path = None ) :
                      raise ValueError ( "MultiValueDict.update() takes either a MultiValueDict or dictionary" )
 bpython . embed ( )
 self . stdout . write ( "Rendering %s template files with "  "filenames: %s\n" %  ( app_or_project , ', ' . join ( extra_files ) ) )
              with connection . cursor ( ) as curs :
  from django . utils import termcolors
  except AttributeError :
     if self . merge and conflicts :
 handler_config = handlers [ name ]
  __all__ = ( 'LOCK_EX' , 'LOCK_SH' , 'LOCK_NB' , 'lock' , 'unlock' )
 self . verbatim = False
    class ViewDoesNotExist ( Exception ) :
          int_part_gd = ''
              self . _encoding = settings . DEFAULT_CHARSET
 from django . core . exceptions import AppRegistryNotReady
  if six . PY2 :
 if response :
                  setattr ( self . object , accessor_name , object_list )
 return getattr ( trans , real_name )
     class ModelChoiceIterator ( object ) :
    class RemovedInDjango19Warning ( DeprecationWarning ) :
   copystat ( old_file_name , new_file_name )
              self . instance . full_clean ( exclude = exclude , validate_unique = False )
                  if settings . DEBUG :
              raise AttributeError ( "'%s' object has no attribute 'cleaned_data'" % self . __class__ . __name__ )
  else :
      EscapeString = EscapeBytes
           if not allow_overwrite and os . access ( new_file_name , os . F_OK ) :
 if settings . TEMPLATE_DEBUG :
                           title = plan_node [ 1 ]
  if mtime != _mtimes [ filename ] :
                  values = self . sequence . resolve ( context , True )
 from django . utils . safestring import mark_safe , SafeData
 if len ( self . namelist ( ) ) != 1 :
                  pass
from __future__ import unicode_literals
                             meth = cls . __promise__ ( resultclass , k , v )
 from django . core . cache import caches
          return json . dumps ( self . get_json_data ( escape_html ) )
   def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :
              return self . keyOrder [ : ]
 return WEEKDAYS_ABBR [ self . data . weekday ( ) ]
 from django . core . management . utils import handle_extensions
      def __init__ ( self , template , * args , ** kwargs ) :
          self . file . write ( raw_data )
 def urlizetrunc ( value , limit , autoescape = None ) :
              flat . update ( d )
 import locale
           if name is not None :
 if mem_args in cache :
 if tzinfo [ 0 ] == '-' :
              self . object_list = list ( self . object_list )
      def add_css ( self , data ) :
      def __init__ ( self , environ ) :
       else :
    TRAILING_PUNCTUATION = [ '.' , ',' , ':' , ';' , '.)' , '"' , '\'' ]
   def modified_time ( self , name ) :
 reporter = ExceptionReporter ( request , is_email = True , * exc_info )
  self . error_list . extend ( message . error_list )
from __future__ import unicode_literals
      status_code = 400
 fixture_name , ser_fmt , cmp_fmt = self . parse_name ( fixture_label )
          return self . represent_scalar ( 'tag:yaml.org,2002:str' , str ( data ) )
              initial = [ ]
                  return None
   else :
  else :
          return force_str ( '<%s %s %s>' % ( self . __class__ . __name__ , self . name , self . regex . pattern ) )
 from django . utils . functional import allow_lazy
 if ch in '*?+' :
              if self . min_value is not None :
 if not hasattr ( parser , '_namedCycleNodes' ) :
 def regex ( self ) :
  attrname , rest , attrvalue = m . group ( 1 , 2 , 3 )
 parser . add_argument ( '-v' , '--verbosity' , action = 'store' , dest = 'verbosity' , default = '1' ,  type = int , choices = [ 0 , 1 , 2 , 3 ] ,  help = 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output' )
          return bool ( self . dict )
 args = '[fixture ...]'
     def _replace_entity ( match ) :
              if year < 70 :
              self . stream . write ( "," )
 self . add_root_elements ( handler )
              raise ValidationError ( errors )
   finally :
 base_path = abspathu ( base )
     def get_valid_filename ( s ) :
 directories , files = [ ] , [ ]
              extend = getattr ( definition , 'extend' , True )
  self . _ordering . sort ( key = compare_ordering_key )
  except AttributeError :
 for form in valid_forms :
              if self . _wrapped is empty :
  tzinfo = get_fixed_timezone ( offset )
      setattr ( _MovedItems , attr . name , attr )
 from django . utils . safestring import mark_safe
     def boolean_check ( v ) :
              pass
   except NotImplementedError :
          processors = [ ]
                  self . stdout . write ( "  No migrations to apply." )
 url_fields [ 2 ] = ''
 self . auto_id = auto_id
  elif item [ "author_name" ] :
     found = True
   def __iter__ ( self ) :
  buffer_types = ( bytearray , memoryview )
 return self . incr_version ( key , - delta , version )
              return [ ]
                  import readline
                  return True
  try :
      def localtime ( value , timezone = None ) :
          return self
                          apps . setdefault ( app_name , [ ] ) . extend ( namespace_list )
          self . val_expr = val_expr
 return int ( binascii . hexlify ( x ) , 16 )
 empty_values = list ( validators . EMPTY_VALUES )
                          var_obj = None
 break
              return bytes ( value )
   name = self . timezone . tzname ( self . data ) if self . timezone else None
   if bf . label :
          query = query . items ( )
 connection = connections [ database ]
  else :
  if not isinstance ( value , ( list , tuple ) ) :
              try :
  except ( ValueError , TypeError ) :
 tags = [ re . escape ( tag ) for tag in tags . split ( ) ]
 if value == self . empty_value or value in self . empty_values :
      def pbkdf2 ( password , salt , iterations , dklen = 0 , digest = None ) :
   def __nonzero__ ( self ) :
 link_next [ PREV ] = link_prev
    delta = delta + datetime . timedelta ( seconds = 1 )
               return True
              if new_name . endswith ( '_id' ) :
 from io import BytesIO
   return neg , res
          if args :
 isatty = property ( lambda self : self . file . isatty )
  forms = [ self . _construct_form ( i ) for i in xrange ( self . total_form_count ( ) ) ]
 from django . utils . safestring import ( SafeData , EscapeData , mark_safe ,  mark_for_escaping )
 result = self . configurator . convert ( value )
  else :
 defaults . update ( kwargs )
  def add_arguments ( self , parser ) :
  cycle_iter = context . render_context [ self ]
 pass
 plural = [ ]
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
 parser = self . create_parser ( prog_name , subcommand )
 if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
              ser_fmt = None
              test_runner_class . add_arguments ( parser )
 shutdown_message = options . get ( 'shutdown_message' , '' )
                  raise TemplateSyntaxError ( "Searching for value. Unexpected "  "end of string in column %d: %s" %  ( i , subject ) )
 if threading :
      locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % self . default_locale_path ) )
              cursor . execute ( "SELECT COUNT(*) FROM %s" % table )
          try :
                      filemsg = ''
   except IOError :
     def resolve_variable ( path , context ) :
              return truncate % { 'truncated_text' : text }
 pass
   for ( k , v ) in kwargs . items ( ) :
  else :
          msg = ( "The use of the language code '%s' is deprecated. "  "Please use the '%s' translation instead." )
          if self . timezone is None :
                      self . stdout . write ( self . style . MIGRATE_LABEL ( "  Target specific migration: " ) + "%s, from %s" % ( targets [ 0 ] [ 1 ] , targets [ 0 ] [ 0 ] ) )
              template_dirs = app_template_dirs
                   absolute_path = self . download ( template )
  self . cache_model_class = CacheEntry
  except ( LookupError , BinasciiError ) as e :
  if self . feed [ 'language' ] is not None :
                  args = ( )
                  fp . write ( msgs )
    class SyndicationFeed ( object ) :
          parsed = urlparse ( force_text ( redirect_to ) )
              self . address_family = socket . AF_INET6
   if errors :
  __all__ = [  'CheckMessage' ,  'Debug' , 'Info' , 'Warning' , 'Error' , 'Critical' ,  'DEBUG' , 'INFO' , 'WARNING' , 'ERROR' , 'CRITICAL' ,  'register' , 'run_checks' , 'tag_exists' , 'Tags' ,  ]
  rv = logging . _levelNames [ level ]
 class CheckMessage ( object ) :
 raise NotImplementedError ( 'subclasses of LazyObject must provide a _setup() method' )
 def first ( value ) :
 if six . PY2 :
          parser . add_argument ( 'args' , metavar = 'test_label' , nargs = '*' ,  help = 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method' )
  data [ field . name ] = value
 self . cookies [ key ] = value
    class EscapeText ( six . text_type , EscapeData ) :
   return format_html (  '<ul class="{0}">{1}</ul>' ,  self . error_class ,  format_html_join ( '' , '<li>{0}</li>' , ( ( force_text ( e ) , ) for e in self ) )  )
          return EscapeText ( s )
          for filepath in self . get_template_sources ( template_name , template_dirs ) :
  else :
              url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )
 if is_ignored ( file_path , self . ignore_patterns ) :
    if unpack_ipv4 :
   if ( middle . endswith ( closing )  and middle . count ( closing ) == middle . count ( opening ) + 1 ) :
       import pyinotify
              self . mod = old_mod
              extra_classes . add ( self . form . required_css_class )
 from django . db import models , router
                      self . stdout . write ( "  %s:\n" % ( self . style . MIGRATE_LABEL ( writer . filename ) , ) )
              guid_attrs = { }
                  self . connection . login ( self . username , self . password )
                  message = 'Unknown field(s) (%s) specified for %s'
 if self . method != 'POST' :
 if not isinstance ( value , ( bytes , six . text_type ) ) :
   if len ( name ) > 255 :
   if new_conn_created :
 if unpack :
      urlconf = settings . ROOT_URLCONF
 return bool ( ret )
 missing_args_message = "You must provide an application name."
                 value = field . widget . value_from_datadict ( self . data , self . files , self . add_prefix ( name ) )
              result = self . buffer + self . _read_limited ( )
          key = self . make_key ( key , version = version )
              try :
 new_second_item = [ ]
 iterbytes = iter
               iter ( second_item )
    caches = CacheHandler ( )
    cache = DefaultCacheProxy ( )
                      indexes = { }
                  if ignore_failures :
  except TemplateDoesNotExist :
 self . setFeature ( handler . feature_external_pes , False )
              handler . addQuickElement ( "enclosure" , '' ,  { "url" : item [ 'enclosure' ] . url , "length" : item [ 'enclosure' ] . length ,  "type" : item [ 'enclosure' ] . mime_type } )
                      raise TemplateSyntaxError ( "'%s' is not a valid tag or filter in tag library '%s'" %  ( name , taglib ) )
  except CommandError :
 for format in BUILTIN_SERIALIZERS :
  except ImportError as e :
   return data
              output . append ( html [ field ] )
                      if hasattr ( middleware , 'process_response' ) :
 return '' . join ( output )
 def cut ( value , arg ) :
 for error in self . as_data ( ) :
 from django . core . management import call_command
            if sys . version_info [ : 2 ] == ( 3 , 2 ) :
  for statement in sql :
           current_fields = [ ]
 sys . stderr . write ( "  Unable to load the flup package.  In order to run django\n" )
  return BoundField ( self , field , name )
 result , upto = [ ] , 0
   def extend_nodelist ( self , nodelist , node , token ) :
   def convert ( self , value ) :
                  return self . extract ( absolute_path )
 def __init__ ( self , func ) :
      default_error_messages = {  'invalid_image' : _ ( "Upload a valid image. The file you uploaded was either not an image or a corrupted image." ) ,  }
      help = "Checks the entire Django project for potential problems."
              logger . propagate = propagate
  return self . _files
          return isinstance ( other , EmailValidator ) and ( self . domain_whitelist == other . domain_whitelist ) and ( self . message == other . message ) and ( self . code == other . code )
          lang = None
          return [ format_html ( '<script type="text/javascript" src="{0}"></script>' , self . absolute_path ( path ) ) for path in self . _js ]
          mail . attach_alternative ( html_message , 'text/html' )
  return super ( NullBooleanSelect , self ) . render ( name , value , attrs , choices )
  return self . size > chunk_size
 self . verbose_name = 'cache entry'
 if next_item and isinstance ( next_item , ( list , tuple ) ) :
   def _get_size ( self ) :
          self . stream = kwargs . pop ( 'stream' , sys . stdout )
              return ""
    def has_key ( self , key ) :
  delta = expires - expires . utcnow ( )
      class SkipFile ( UploadFileException ) :
              return True
  except ValueError :
 return MONTHS_3 [ self . data . month ] . title ( )
 class StopUpload ( UploadFileException ) :
 if not value :
              cache_choices = False
                          if message_context :
    def parse_starttag ( self , i ) :
 if not match or not match . group ( 1 ) :
              sorted_items = sorted ( kwds . items ( ) )
    sql_list = sql_flush ( self . style , connection , only_django = True ,  reset_sequences = reset_sequences ,  allow_cascade = allow_cascade )
  inputs . append ( format_html ( '<input{0} />' , flatatt ( input_attrs ) ) )
   try :
              value = getattr ( opts , opt )
  try :
     if with_base_fields :
                      raise ValueError (  "%s.process_response didn't return an "  "HttpResponse object. It returned None instead."  % ( middleware_method . __self__ . __class__ . __name__ ) )
      import stat
          if 'id' in self . attrs :
                      if getattr ( current , 'do_not_call_in_templates' , False ) :
                  exp = datetime . max
              if empty_label is not None :
          tag , this_value_expr , max_value_expr , max_width , as_ , asvar = bits
  else :
    try :
      import pickle
                  form . _meta . fields = list ( form . _meta . fields )
   else :
 request_finished = Signal ( )
 for ip in ( self . _ipython , self . _ipython_pre_100 , self . _ipython_pre_011 ) :
          self . tokens = tokens
                   selected_choices . remove ( option_value )
  self . DSTDIFF = self . DSTOFFSET - self . STDOFFSET
                      line = buffer_ + line
  except Exception :
 from django . core . management . base import BaseCommand , CommandError
  return parser . _namedCycleNodes [ name ]
 return self . field . widget . is_hidden
  else :
 if bytes_read > rollback :
 if bf . is_hidden :
          for closable in self . _closable_objects :
     class ForNode ( Node ) :
          super ( SortedDict , self ) . clear ( )
          for first_select in _parse_date_fmt ( ) :
          response [ 'Location' ] = request . build_absolute_uri ( response [ 'Location' ] )
    if as_form :
 six . reraise ( ImportError , ImportError ( msg ) , sys . exc_info ( ) [ 2 ] )
   nodelist_true_output = None
 if hasattr ( test_runner_class , 'option_list' ) :
                  result . parent = self
 if member . isdir ( ) :
  try :
 sys . exit ( 1 )
          return False
    if six . PY3 :
  from django . core . exceptions import ImproperlyConfigured
    class MultiValueDict ( dict ) :
                  ser_fmt = parts [ - 1 ]
 if len ( args ) > 1 :
 raise
  if item [ 'ttl' ] is not None :
   if url . startswith ( '///' ) :
 pk = self . data [ pk_key ]
 self . fields = getattr ( options , 'fields' , None )
 if top + self . orphans >= self . count :
 if sequence_sql :
 os . chmod ( filename , new_permissions )
 self . dicts = dicts
                  self . _body = self . read ( )
          attrs [ 'labels' ] = labels
   class ValidationError ( Exception ) :
 label = 'label'
 template_tuple = self . template_cache . get ( key )
 args , varargs , varkw , defaults = getargspec ( func )
 value = super ( IntegerField , self ) . to_python ( value )
                      if extracted :
 from django . utils import six
  value = urlunsplit ( url_fields )
    def tag_function ( self , func ) :
                              f = os . path . join ( root , f )
          _load_serializers ( )
  else :
   def _iteritems ( self ) :
 if not content_type . startswith ( 'multipart/' ) :
    def execute ( self , * args , ** options ) :
 conditions_nodelists . append ( ( None , nodelist ) )
      if dt . year >= 1900 :
   if content_length > settings . FILE_UPLOAD_MAX_MEMORY_SIZE :
   if column_name in indexes :
     @ register . filter ( is_safe = False )
 _cookie_allows_colon_in_names = True
 digits = "0123456789abcdefghijklmnopqrstuvwxyz"
              docs_version = 'dev'
 tf = TimeFormat ( value )
    add_to_builtins ( 'django.template.defaulttags' )
                  translation . activate ( saved_locale )
                  return Media ( definition )
              st = os . stat ( filename )
          return "<Block Node: %s. Contents: %r>" % ( self . name , self . nodelist )
                  m2m_value = lambda value : smart_text ( value . _get_pk_val ( ) , strings_only = True )
    def fields_for_model ( model , fields = None , exclude = None , widgets = None ,  formfield_callback = None , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ) :
                      os . remove ( path_to_remove )
   def as_text ( self , attrs = None , ** kwargs ) :
  else :
              m2m_convert = lambda n : field . rel . to . _meta . pk . to_python ( n . getAttribute ( 'pk' ) )
            weight = 0
 if '%(truncated_text)s' in truncate :
                  continue
 table = connections [ db ] . ops . quote_name ( self . _table )
  attachment . add_header ( 'Content-Disposition' , 'attachment' ,  filename = filename )
  else :
  else :
              from django . conf import settings
          idstring = '.' + idstring
                          raise KeyError ( 'Your dictionary lacks key \'%s\'. '  'Please provide it, because it is required to '  'determine whether string is singular or plural.'  % number )
          key = self . make_key ( key , version = version )
 def __init__ ( self , setting , nodelist ) :
   def show_migration_list ( self , connection , app_names = None ) :
      pass
 return errors
              raise NoReverseMatch ( "Error importing '%s': %s." % ( lookup_view , e ) )
  return force_text ( widget . render ( name , self . value ( ) , attrs = attrs ) )
 from django . utils . translation import ugettext , ungettext_lazy
 raise NotImplementedError ( 'subclasses of Storage must provide an accessed_time() method' )
 parser . add_argument ( '--nothreading' , action = 'store_false' , dest = 'use_threading' , default = True ,  help = 'Tells Django to NOT use threading.' )
 self . field_name = field_name
  def __init__ ( self , request , template , context = None , content_type = None ,  status = None , current_app = None ) :
                  kwargs [ 'to_field' ] = self . fk . rel . field_name
          httpd_cls = type ( str ( 'WSGIServer' ) , ( socketserver . ThreadingMixIn , WSGIServer ) , { } )
          if data in ( None , FILE_INPUT_CONTRADICTION ) :
   if len ( parts ) > 1 :
  count = property ( _get_count )
          return len ( list ( email_messages ) )
 needs_multipart_form = True
   return metaclass ( cls . __name__ , cls . __bases__ , orig_vars )
                   value = str ( Header ( value , 'utf-8' , maxlinelen = sys . maxsize ) . encode ( ) )
              if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
 if hasattr ( timezone , 'normalize' ) :
   def render ( self , context ) :
   def widget_attrs ( self , widget ) :
          for name , field in self . fields . items ( ) :
  except StopIteration :
 self . pointer = i
 if hasattr ( self , 'clean_%s' % name ) :
   directory_created [ app_label ] = True
  return nodelist
                      try :
    def sanitize_separators ( value ) :
   def process ( self , command , domain ) :
    colors = styles . pop ( ) . split ( '/' )
  self . feed = {  'title' : to_unicode ( title ) ,  'link' : iri_to_uri ( link ) ,  'description' : to_unicode ( description ) ,  'language' : to_unicode ( language ) ,  'author_email' : to_unicode ( author_email ) ,  'author_name' : to_unicode ( author_name ) ,  'author_link' : iri_to_uri ( author_link ) ,  'subtitle' : to_unicode ( subtitle ) ,  'categories' : categories or ( ) ,  'feed_url' : iri_to_uri ( feed_url ) ,  'feed_copyright' : to_unicode ( feed_copyright ) ,  'id' : feed_guid or link ,  'ttl' : ttl ,  }
  plen = len ( provided ) + 1
  pofile = os . path . join ( basedir , '%s.po' % str ( self . domain ) )
  elif self . _delegate_text :
  return rv
 del self . _expire_info [ key ]
              return None
   as_form = False
  except ValueError :
  elif bytes < PB :
                    opts . fields = None
          t = get_template ( template_name , dirs )
 with context . push ( ** values ) :
          int_part , dec_part = str_number , ''
              id_ += '_0'
          self . vals = [ ]
  return SafeString ( str ( s ) )
                  with io . open ( django_po , 'r' , encoding = 'utf-8' ) as fp :
 self . _cache . set ( key , value , self . get_backend_timeout ( timeout ) )
 super ( QueryDict , self ) . __setitem__ ( key , value )
 django_dir = os . path . normpath ( os . path . join ( os . path . dirname ( django . __file__ ) ) )
 if not template_dirs :
          self . widgets = [ w ( ) if isinstance ( w , type ) else w for w in widgets ]
          first , lang , priority = pieces [ i : i + 3 ]
 from django . core . files . uploadedfile import TemporaryUploadedFile , InMemoryUploadedFile
 self . _errors = None
 from pprint import pformat
 from __future__ import unicode_literals
 return cache
      pass
     ip_str = _explode_shorthand_ip_string ( ip_str )
                  message = message . error_list
     def compile_messages ( self , locations ) :
          return DebugVariableNode ( contents )
   try :
          super ( Command , self ) . add_arguments ( parser )
   def W ( self ) :
   def get_exception_response ( self , request , resolver , status_code ) :
 try :
 if self . options . get ( 'indent' ) :
 if result is not None :
                  i += 1
          return baseconv . base62 . encode ( int ( time . time ( ) ) )
 s = s . encode ( 'utf-8' )
          return [ '' ] , [ [ ] ]
  if not use_workaround :
  for statement in index_output :
              klass = load_command_class ( app_name , subcommand )
  for meta_line in self . get_meta ( table_name ) :
   self . fixture_count = 0
 if not _serializers :
 def __init__ ( self , file , field_name , name , content_type , size , charset , content_type_extra = None ) :
 if self . cdata_tag is not None :
                        self . children . extend ( data . children )
 if isinstance ( s , Promise ) :
 return data
          return datetime . datetime . strptime ( force_str ( value ) , format ) . time ( )
          key = self . make_key ( key , version = version )
 if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
  import re
   date_re = re . compile (  r'(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})$'  )
 if date is not None :
 def __init__ ( self , title , link , description , language = None , author_email = None ,  author_name = None , author_link = None , subtitle = None , categories = None ,  feed_url = None , feed_copyright = None , feed_guid = None , ttl = None , ** kwargs ) :
      is_usable = False
 def __new__ ( mcs , name , bases , attrs ) :
      callable = callable
  except ImportError :
 def stringformat ( value , arg ) :
 i = 0
                  return 1 << 31
 max_width = int ( self . max_width . resolve ( context ) )
 self . empty_value = kwargs . pop ( 'empty_value' , [ ] )
 from django . core . management . color import color_style
   if "\\" in encoded and not encoded . startswith ( '"' ) :
   def handle_app_config ( self , app_config , ** options ) :
              field_output = [ qn ( f . name ) , f . db_type ( connection = connection ) ]
    print_ = getattr ( moves . builtins , "print" , None )
      widget = Select
 missing_fields = ( set ( none_model_fields ) -  set ( new_class . declared_fields . keys ( ) ) )
   def clean ( self , value ) :
 inner_result . extend ( res )
  since = delta . days * 24 * 60 * 60 + delta . seconds
 return state
          raise
                      locations . extend ( ( dirpath , f ) for f in filenames if f . endswith ( '.po' ) )
       def decorating_function ( user_function ) :
 if six . PY2 and isinstance ( rawdata , six . text_type ) :
                  with open ( filepath , 'rb' ) as fp :
 VARIABLE_ATTRIBUTE_SEPARATOR = '.'
          try :
      op . id = key
                  if subject [ i ] in ( '"' , "'" ) :
          from django . conf import settings
          if isinstance ( data , ( MultiValueDict , MergeDict ) ) :
                  if filename . endswith ( ( '.pyo' , '.pyc' , '.py.class' ) ) :
          return unicode ( s . replace ( r'\\' , r'\\\\' ) , "unicode_escape" )
          sys . path . insert ( 0 , options . pythonpath )
          try :
                  warnings . warn (  "No fixture data found for '%s'. (File format may be "  "invalid.)" % fixture_name ,  RuntimeWarning  )
                  step = 'any'
              line = sio . readline ( )
                          if indexes [ column_name ] [ 'primary_key' ] :
                  try :
 softspace = property ( lambda self : self . file . softspace )
 name = self . path ( name )
from django . core . management . base import BaseCommand , CommandError
              return timedelta ( seconds = - time . altzone ) - timedelta ( seconds = - time . timezone )
          return ContextDict ( self , * args , ** kwargs )
    if self . can_delete and self . _should_delete_form ( form ) :
              self . validate_unique ( )
              self . message = message
  else :
     class DjangoJSONEncoder ( json . JSONEncoder ) :
  last = pos + 1
  else :
              if t . token_type == TOKEN_BLOCK :
          fks_to_parent = [ f for f in opts . fields if f . name == fk_name ]
   root = config . get ( 'root' , None )
                  guid_attrs [ 'isPermaLink' ] = str (  item [ 'unique_id_is_permalink' ] ) . lower ( )
       def __init__ ( self , object_list , per_page , orphans = 0 ,  allow_empty_first_page = True ) :
 def __init__ ( self , data = None , files = None , instance = None ,  save_as_new = False , prefix = None , queryset = None , ** kwargs ) :
               self . options . update ( { 'use_decimal' : False } )
    def available_attrs ( fn ) :
 from __future__ import unicode_literals
 if as_ != 'as' :
                      msg . attach ( attachment )
 if self . variable_name :
      ungettext = ngettext
   def external_entity_ref_handler ( self , context , base , sysid , pubid ) :
                     if obj . pk is None :
 timeval = time . time ( )
              try :
 messages = [ EmailMessage ( subject , message , sender , recipient ,  connection = connection )  for subject , message , sender , recipient in datatuple ]
  if options [ 'errlog' ] :
  return combined
   def total_form_count ( self ) :
          lookups = MultiValueDict ( )
          warnings . warn (  "SortedDict is deprecated and will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2  )
     def new_date ( d ) :
              @ wraps ( fset )
      if self . verbosity >= 1 :
 from django . apps import apps
          return None
 import os
     def partition ( predicate , values ) :
          self . dict [ item ] = None
   def clean_ipv6_address ( ip_str , unpack_ipv4 = False ,  error_message = _ ( "This is not a valid IPv6 address." ) ) :
          return self . mapping . get ( self . tagtype , '' )
   user_part , domain_part = value . rsplit ( '@' , 1 )
                      continue
  getLogger = logging . getLogger
                  obj = self . var . resolve ( context )
              error = { field or NON_FIELD_ERRORS : error . error_list }
  return super ( FileField , self ) . clean ( data )
    elif finder . find_module ( name ) :
 from django . core . exceptions import ImproperlyConfigured
          args = [ self . name , self . value , self . attrs ]
  cache_key = _generate_cache_header_key ( key_prefix , request )
   def i ( self ) :
 self . META = { }
   def unclosed_block_tag ( self , parse_until ) :
  if httponly :
    def get_deserializer ( format ) :
    class SuspiciousFileOperation ( SuspiciousOperation ) :
          return False
 from __future__ import unicode_literals
 self . stdout . flush ( )
                     f . required = False
 for attr in _urllib_parse_moved_attributes :
 return field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
 self . _callback_str = callback
  except ( ValueError , TypeError , ValidationError ) :
    base2 = BaseConverter ( BASE2_ALPHABET )
 from django . utils . deprecation import RemovedInDjango20Warning
  setattr ( filter_func , attr , value )
      pass
 self . _fname = os . path . join ( self . file_path , fname )
                  m = self . DOT_PATTERN . match ( rest )
 for i , word in enumerate ( words ) :
  template_with_initial = '%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s'
   def render ( self ) :
  return '%s %s %s' % (   _ ( ', ' ) . join ( force_text ( i ) for i in list_ [ : - 1 ] ) ,  force_text ( last_word ) , force_text ( list_ [ - 1 ] ) )
 statement = [ ]
 get_function_globals = operator . attrgetter ( _func_globals )
              raise CommandError ( "App '%s' does not have migrations" % app_label )
 if isinstance ( source , inst ) :
 import warnings
 from django . utils import formats
          if o in opt_dict :
              self . error_dict = { }
 end_text_pos = 0
   if terminal_char != ')' :
    def writer_enters ( self ) :
              try :
 from __future__ import unicode_literals
   def setlist ( self , key , list_ ) :
 if not hasattr ( self , '_request' ) :
 return six . text_type ( self . data . year ) [ 2 : ]
  return _serializers [ format ] . Deserializer
              file_name = data . name
  def __init__ ( self , schemes = None , ** kwargs ) :
              return super ( LocalTimezone , self ) . _isdst ( dt )
              return context
 if self . lookups is not None :
                  mw_instance = mw_class ( )
  except _BASE64_DECODE_ERROR :
    @ register . tag
 values = [ parser . compile_filter ( arg ) for arg in args [ 1 : - 2 ] ]
                      value = flags [ attr ]
     class CheckboxChoiceInput ( ChoiceInput ) :
   def set_cookie ( self , key , value = '' , max_age = None , expires = None , path = '/' ,  domain = None , secure = False , httponly = False ) :
              return SafeBytes ( t )
    internal_use_only = False
          return [  Warning (  "Some project unittests may not execute as expected." ,  hint = ( "Django 1.6 introduced a new default test runner. It looks like "  "this project was generated using Django 1.5 or earlier. You should "  "ensure your tests are all running & behaving as expected. See "  "https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner "  "for more information." ) ,  obj = None ,  id = '1_6.W001' ,  )  ]
  except ZeroDivisionError :
              sys . stderr = open ( err_log , 'a' , buffering )
 if fields is not None :
                      val = getattr ( module , format_type )
 title = ''
   def close ( self , ** kwargs ) :
                  new_obj = func ( obj , * arg_vals )
   saved_locale = None
 self . content_length = None
    def smart_text ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
  if getattr ( func , 'needs_autoescape' , False ) :
                      if f . rel and f . rel . to not in to_delete :
          content = content or b''
 message_context = None
 field_list = [ ]
                          unpacked_vars = dict ( zip ( self . loopvars , item ) )
 endtag_re = re . compile ( '</%s>' % tags_re )
from django . conf import settings
  def add_arguments ( self , parser ) :
                  target_dir = path . join ( top_dir , relative_dir )
 for c in response . cookies . values ( ) :
  from django . conf import settings
   if field . help_text :
              len ( X ( ) )
  return obj_pk
              reset_translations ( )
              thousand_sep = get_format ( 'THOUSAND_SEPARATOR' )
 if headerlist is not None :
  else :
          stream = stream_or_string
   subcommands = list ( get_commands ( ) ) + [ 'help' ]
   self . _errors [ field ] . extend ( error_list )
 def _get_width ( self ) :
    @ lru_cache . lru_cache ( maxsize = None )
          return mark_safe ( formats . number_format ( '%d' % ( int ( d ) ) , 0 ) )
          meta = ( pformat ( META_override )  if META_override is not None  else pformat ( request . META ) )
                  f . process ( self , self . domain )
          raise ValueError ( 'The joined path (%s) is located outside of the base '  'path component (%s)' % ( final_path , base_path ) )
   if isinstance ( value , six . text_type ) :
              return '%s_month' % id_
              content_length = int ( environ . get ( 'CONTENT_LENGTH' ) )
          super ( DecimalField , self ) . validate ( value )
 from django . utils . encoding import force_text
          return { }
                  self . cleaned_data = cleaned_data
    def add_root_elements ( self , handler ) :
  finally :
 table = connections [ db ] . ops . quote_name ( self . _table )
              self . style = no_style ( )
                      c = subject [ i ]
  except StandardError as e :
 def __init__ ( self , dict_ = None , autoescape = True , current_app = None ,  use_l10n = None , use_tz = None ) :
 attachment . set_payload ( content )
 table_output = [ ]
  num_pages = property ( _get_num_pages )
  def to_python ( self , value ) :
          base64d = b'.' + base64d
           buffer_ = None
 if self . can_order :
  def F ( i ) :
                  raise TypeError ( "relative imports require the 'package' argument" )
      msg = (  "django.utils.text.javascript_quote() is deprecated. "  "Use django.utils.html.escapejs() instead."  )
                  return kwargs
  from django . conf import settings
   year = year + ( ( 2000 - year ) // 28 ) * 28
              raise KeyError ( "Unknown language code %s and %s." % ( lang_code , generic_lang_code ) )
 if not len ( self . backout ) :
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a specific database to dump fixtures from. '  'Defaults to the "default" database.' )
  else :
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " OK" ) )
      pass
  else :
  result = func ( * args )
     if app_list_value is not None :
   def chars ( self , num , truncate = None , html = False ) :
                  hits = max ( 1 , self . count - self . orphans )
  def led ( self , left , parser ) :
 for cnt , digit in enumerate ( int_part [ : : - 1 ] ) :
     def IE_sanitize ( self , filename ) :
 return nodelist
              data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python (  node . getAttribute ( 'pk' ) )
 self . second = None
   def convert ( self , number , from_digits , to_digits , sign ) :
 from django . core . checks . registry import registry
 return IncludeNode ( parser . compile_filter ( bits [ 1 ] ) , extra_context = namemap ,  isolated_context = isolated_context )
 return getattr ( _prefixes , "value" , '/' )
              raise CommandError ( "App '%s' does not have migrations (so squashmigrations on it makes no sense)" % app_label )
 VARIABLE_TAG_START = '{{'
   def l ( self ) :
 return self . __language
       class DefusedExpatParser ( _ExpatParser ) :
                  return fext
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database onto which the cache tables will be '  'installed. Defaults to the "default" database.' )
          try :
      _assertCountEqual = "assertCountEqual"
   def get_data ( self ) :
 self . _add_installed_apps_translations ( )
          logging . Handler . __init__ ( self )
          _load_serializers ( )
 path = parts [ 1 : ]
     class TextNode ( Node ) :
  else :
   def __nonzero__ ( self ) :
 return super ( BaseInlineFormSet , self ) . get_unique_error_message ( unique_check )
                  bits = normalize ( p_pattern )
 app . start ( )
          encoding = locale . getdefaultlocale ( ) [ 1 ] or 'ascii'
  else :
 super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
   def num_items ( self ) :
 templatetags_modules_candidates += [ '%s.templatetags' % app_config . name  for app_config in apps . get_app_configs ( ) ]
          value = force_str ( value )
 from django . core . cache . backends . base import (  InvalidCacheBackendError , CacheKeyWarning , BaseCache )
  string_concat = lazy ( _string_concat , six . text_type )
       DefaultFeed = Rss201rev2Feed
              del moves . __dict__ [ name ]
              try :
 label = bf . label_tag ( label ) or ''
                     raise
           sup_cls = super ( cls , self )
 from django . db import models , DEFAULT_DB_ALIAS
   i += 1
          if cmd . endswith ( ext ) :
 def encoding ( self ) :
   def update_error_dict ( self , error_dict ) :
     def delete ( self , key , version = None ) :
          return { }
  import os
from __future__ import unicode_literals
   def render ( self , context ) :
          return TemplateLiteral ( self . template_parser . compile_filter ( value ) , value )
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
   def __iter__ ( self ) :
 from __future__ import unicode_literals
       def pk_is_not_editable ( pk ) :
          try :
  return mark_safe ( contents )
      @ register . filter ( expects_localtime = True , is_safe = False )
  except OSError as e :
  return _wrapped_view
 parser . add_argument ( '--exclude' , '-x' , default = [ ] , dest = 'exclude' , action = 'append' ,  help = 'Locales to exclude. Default is none. Can be used multiple times.' )
              autoreload . main ( self . inner_run , None , options )
  return self . __cast ( ) % rhs
              self . stdout . write ( "Extracting %s\n" % filename )
              params , varargs , varkw , defaults = getargspec ( func )
  super ( RegexField , self ) . __init__ ( max_length , min_length , * args , ** kwargs )
  except TypeError :
           return ip_str
   @ python_2_unicode_compatible
 if constant_time_compare ( sig , self . signature ( value ) ) :
 from decimal import Decimal , DecimalException
 self . exit_command ( )
  data = ( form . cleaned_data [ field ] , ) + date_data
 if not hasattr ( c , '__call__' ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType :
              raise CommandError ( "currently makemessages only supports domains "  "'django' and 'djangojs'" )
                   return self . tag_function ( name )
                  field_output . append ( "PRIMARY KEY" )
 token = parser . next_token ( )
    class SuspiciousMultipartForm ( SuspiciousOperation ) :
              def __len__ ( self ) :
   else :
                  if stream :
  for i , field in enumerate ( self . fields ) :
   def _post_clean ( self ) :
                return self . flatten ( ) == other . flatten ( )
   parser = subcommand_cls . create_parser ( '' , cwords [ 0 ] )
   class UploadedFile ( File ) :
              return self . _stream . read ( * args , ** kwargs )
 kwargs = { 'pk_field' : True }
          if self . _cull_frequency == 0 :
  except Exception :
          secret = settings . SECRET_KEY
  result = [ '' ]
    except IOError as e :
                  for model in model_list :
   def _cull ( self ) :
                  return nodelist . render ( context )
 sites2 = _findall ( s2 , str ( year + 28 ) )
 known_models = [ ]
   class DjangoRuntimeWarning ( RuntimeWarning ) :
   raise TemplateDoesNotExist ( name )
          return "<DeserializedObject: %s.%s(pk=%s)>" % (  self . object . _meta . app_label , self . object . _meta . object_name , self . object . pk )
 for module in templatetags_modules :
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " OK" ) )
 for punctuation in TRAILING_PUNCTUATION :
 if not prefix . endswith ( '/' ) :
    def add_metaclass ( metaclass ) :
      with open ( fn , 'rb' ) as f :
    @ register . tag
  else :
 cache . set ( cache_key , headerlist , cache_timeout )
              targets = executor . loader . graph . leaf_nodes ( )
              raise base . DeserializationError (  "<%s> node has invalid model identifier: '%s'"  % ( node . nodeName , model_identifier ) )
   def __enter__ ( self ) :
 _active . value = gettext_module . NullTranslations ( )
  except AttributeError :
  except ( TypeError , AttributeError ) :
 return form . save ( commit = commit )
  return force_text ( error )
 import warnings
 doublecolon_len = 0
  regex = re_words if words else re_chars
   except ValidationError :
    @ register . filter ( is_safe = True )
 if not url_fields [ 0 ] :
 basedirs = [ os . path . abspath ( basedir ) for basedir in basedirs  if os . path . isdir ( basedir ) ]
          if self . _isdst ( dt ) :
 use_natural_primary_keys = options . get ( 'use_natural_primary_keys' )
 self . models = set ( )
          self . close ( )
          dec_part = decimal_sep + dec_part
 if since <= 0 :
   return format_html ( self . outer_html ,  id_attr = format_html ( ' id="{0}"' , id_ ) if id_ else '' ,  content = mark_safe ( '\n' . join ( output ) ) )
   def compile_filter_error ( self , token , e ) :
              ctx . update ( force_bytes ( value ) )
 url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) )
   choices = property ( _get_choices , ChoiceField . _set_choices )
              self . code = code
     def restart_with_reloader ( ) :
  from django . core . management . base import AppCommand
 assert iterations > 0
       def make_msgid ( idstring = None ) :
              raise IOError ( "Destination file %s exists and allow_overwrite is False" % new_file_name )
   def tzname ( self , dt ) :
 def safe ( value ) :
 super ( TypedMultipleChoiceField , self ) . __init__ ( * args , ** kwargs )
      allow_multiple_selected = True
 _itervalues = "itervalues"
     class Library ( object ) :
 localedir = os . path . join ( os . path . dirname ( settingsfile ) , 'locale' )
              try :
                  chunk = self . _read_limited ( )
 if message_context [ 0 ] == '"' :
          return self . _headers . get ( header . lower ( ) , ( None , alternate ) ) [ 1 ]
     if settings . is_overridden ( 'ADMINS' ) :
              self . error_list = [ ]
 method = kwargs . pop ( 'method' )
 from __future__ import unicode_literals
      class SafeMIMEMessage ( MIMEMixin , MIMEMessage ) :
 return attrs
    def close ( self ) :
 self . _regex_dict [ language_code ] = regex_compiled
          ret_ip . append ( ( '0' * ( 4 - len ( hextet ) ) + hextet ) . lower ( ) )
   if options . get ( 'no_wrap' ) :
          super ( UploadedFile , self ) . __init__ ( file , name )
  import django
  warnings . warn ( "django.utils.unittest will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
 s = s . replace ( '\n' , '\\n' )
              def load ( self , rawdata ) :
          if self . _changed_data is None :
 parser . add_argument ( '--list' , '-l' , action = 'store_true' , dest = 'list' , default = False ,  help = 'Show a list of all known migrations and which are applied' )
   raise
 return _time . tzname [ is_dst ]
from django . core . files . base import File
    self . handle_endtag ( tag . lower ( ) )
 filters = config . pop ( 'filters' , None )
import django
    if sys . platform . startswith ( 'java' ) :
  try :
  slugify = allow_lazy ( slugify , six . text_type )
                      singular . append ( contents )
 from __future__ import unicode_literals
                          initial_value = field . to_python ( hidden_widget . value_from_datadict (  self . data , self . files , initial_prefixed_name ) )
   @ register ( Tags . compatibility )
  if ( locale is None and not exclude and not process_all ) or self . domain is None :
 dirs = [ upath ( os . path . abspath ( os . path . realpath ( d ) ) ) for d in dirs ]
  __all__ = [  'CachedDnsName' , 'DNS_NAME' , 'EmailMessage' , 'EmailMultiAlternatives' ,  'SafeMIMEText' , 'SafeMIMEMultipart' , 'DEFAULT_ATTACHMENT_MIME_TYPE' ,  'make_msgid' , 'BadHeaderError' , 'forbid_multi_line_headers' ,  'get_connection' , 'send_mail' , 'send_mass_mail' , 'mail_admins' ,  'mail_managers' ,  ]
  except UnicodeDecodeError :
              return list ( error ) [ 0 ]
   app_label = label
              raise TemplateSyntaxError ( "Invalid arguments provided to assignment_tag" )
 handlers [ name ] = handler
 admin = 'admin'
 return Variable ( path ) . resolve ( context )
 if _globs_ is None :
  datetime_re = re . compile (  r'(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})'  r'[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})'  r'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?'  r'(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$'  )
  else :
  if filename . endswith ( ".pyc" ) or filename . endswith ( ".pyo" ) :
 from django . http . multipartparser import MultiPartParser , MultiPartParserError
 self . to_field = kwargs . pop ( "to_field" , None )
  def __init__ ( self , stream_or_string , ** options ) :
                      date_value = datetime . date ( int ( y ) , int ( m ) , int ( d ) )
   tag = re_tag . match ( m . group ( 0 ) )
  connection = connections [ options [ 'database' ] ]
 from django . utils . module_loading import import_string
    else :
          if self . attachments :
 integer_types = int ,
  if isinstance ( f , ManyToManyField ) :
                  raise
 from django . utils import six
              pass
         @ register . filter ( expects_localtime = True , is_safe = False )
 self . interactive = options . get ( 'interactive' )
  except ValidationError as e :
                          obj = settings . TEMPLATE_STRING_IF_INVALID
  request_middleware = [ ]
    try :
                  stream_created = self . open ( )
                  self . check ( )
   if field . rel and isinstance ( field . rel , models . ManyToManyRel ) :
  res = subject [ p : i ]
          if not _cookie_encodes_correctly :
   def __delitem__ ( self , key ) :
   def S ( self ) :
  from django . core . management . base import AppCommand
  else :
  else :
          while b'\n' not in self . buffer and ( size is None or len ( self . buffer ) < size ) :
 StringIO = io . StringIO
  if self . instance . pk is not None :
 def wordwrap ( value , arg ) :
   del Trans
import logging
 @ stringfilter
              try :
  db = router . db_for_write ( self . cache_model_class )
   if logging_settings :
 self . verbosity = options [ 'verbosity' ]
     def _delete ( self , key ) :
 tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = '_extract' )
          raise TemplateSyntaxError ( "'%s' takes at least one argument"  " (path to a view)" % bits [ 0 ] )
   def handle ( self , ** options ) :
          attrs = [ "__doc__" , "__name__" ]
  def start_serialization ( self ) :
 from django . utils . itercompat import is_iterable
  if number < 1 :
 self . _files = MultiValueDict ( )
              context [ self . asvar ] = url
 if not prefix :
              return 12
  if i >= len ( subject ) :
 id_ = self . field . widget . attrs . get ( 'id' ) or self . auto_id
   def __iter__ ( self ) :
 Field . creation_counter += 1
  return force_text ( s , encoding , strings_only , errors )
 parser . add_argument ( 'migration_name' ,  help = 'Migration name to print the SQL for.' )
 inplural = False
 self . isolated_context = kwargs . pop ( 'isolated_context' , False )
          value = dict . __getitem__ ( self , key )
 while i < l :
 self . validate_key ( key )
 substitutions [ 'input' ] = super ( ClearableFileInput , self ) . render ( name , value , attrs )
                      m = Media ( )
 if contents is not None :
   def __copy__ ( self ) :
 try :
 seen_models . add ( model )
          super ( Select , self ) . __init__ ( attrs )
 so = open ( out_log , 'a+' , buffering )
             def read ( self , * args , ** kwargs ) :
  if self . domain not in ( 'django' , 'djangojs' ) :
                  break
                  libraries [ library_name ] = lib
  result = datetime . datetime . combine ( * data_list )
      return _trans . get_language_from_request ( request , check_path )
 msg_count += 1
 nodelist = parser . parse ( ( 'elif' , 'else' , 'endif' ) )
 from django . utils . six . moves . urllib . parse import urljoin
  else :
 if tags is not None :
          iter ( x )
                        old_umask = os . umask ( 0 )
              self . validators . append ( validators . MaxLengthValidator ( int ( max_length ) ) )
 LockFileEx . restype = BOOL
 if app_path is None :
  value , converted = convert_old_style_list ( value )
                  for app_name , model_list in manifest . items ( ) :
  from . messages import ( CheckMessage ,  Debug , Info , Warning , Error , Critical ,  DEBUG , INFO , WARNING , ERROR , CRITICAL )
  for i , arg in enumerate ( args ) :
 base , ext = posixpath . splitext ( the_path )
              raise MultiPartParserError ( 'Invalid boundary in multipart: %s' % boundary )
 self . verbosity = options . get ( 'verbosity' )
 try :
 parser . add_argument ( 'migration_name' , nargs = '?' ,  help = 'Database state will be brought to the state after that migration.' )
                  self . active_writers += 1
  if compress :
  for part in singular :
   def _coerce ( self , value ) :
                  path_info = '/'
   __getitem__ = new_method_proxy ( operator . getitem )
                              new_matches = normalize ( parent_pat + pat )
  else :
   class Command ( BaseCommand ) :
   if in_tag and not self . verbatim :
          render_context = self . context . render_context
      NamedTemporaryFile = tempfile . NamedTemporaryFile
           return timezone . tzname ( None )
              raise self . error_class ( "Unused '%s' at end of if expression." %  self . current_token . display ( ) )
 self . keyOrder . remove ( result [ 0 ] )
   endblock = parser . next_token ( )
               path_rest = root [ prefix_length : ]
  except ValueError :
 if self . verbosity >= 2 :
 from django . core . serializers . base import DeserializationError
      while remaining != 0 :
     def has_error ( self , field , code = None ) :
from __future__ import unicode_literals
 self . config . configurator = self
 if self . is_reversed :
    def sql_custom ( app_config , style , connection ) :
   def save ( self , commit = True ) :
      input_type = 'file'
  if self . localize :
          return [ 'parse' , 'error' , 'request' , 'response' , 'robotparser' ]
          if source [ 1 ] is None :
 self . years = range ( this_year , this_year + 10 )
 return FixedOffset ( offset , name )
 import shutil
 if isinstance ( offset , timedelta ) :
 import re
          HTMLParser = _html_parser . HTMLParser
 if not match :
              if six . PY3 :
              field = self . fields [ name ]
 return tempdir
 if settings . USE_TZ and value is not None and timezone . is_aware ( value ) :
      class Atom1Feed ( SyndicationFeed ) :
                  palette [ role ] = definition
                  v ( value )
 return getattr ( module , self . attr )
 id = None
                   parser . add_argument ( 'args' , nargs = '*' )
   @ classmethod
 if param not in params and varkw is None :
     def walk_to_end ( ch , input_iter ) :
  return None
 from django . utils . encoding import force_str
                        print ( "In the tar file %s the member %s is invalid: %s" %  ( name , member . name , exc ) )
   def render ( self , name , value , attrs = None ) :
                      attrs_plus [ 'id' ] += '_{0}' . format ( i )
                  self . active_readers += 1
                      words [ i ] = mark_safe ( word )
          def wrapped ( * args , ** kwargs ) :
              django . setup ( )
 self . obj = obj
 return guessed_path
   truncate_len = length
          self . file . close ( )
  return _dec
 import traceback
 if errors :
                  d [ k ] = val
 def urlize ( value , autoescape = None ) :
  use_natural_foreign_keys = options . get ( 'use_natural_foreign_keys' ) or use_natural_keys
 prefix = self . add_prefix ( fieldname )
          return value
 message = ungettext_lazy (  'Ensure this value has at most %(limit_value)d character (it has %(show_value)d).' ,  'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' ,  'limit_value' )
          raise DTDForbidden ( name , sysid , pubid )
 from django . core . mail . message import (  EmailMessage , EmailMultiAlternatives ,  SafeMIMEText , SafeMIMEMultipart ,  DEFAULT_ATTACHMENT_MIME_TYPE , make_msgid ,  BadHeaderError , forbid_multi_line_headers )
      DateTimeAwareJSONEncoder = DjangoJSONEncoder
 handler . addQuickElement ( "link" , item [ 'link' ] )
              if cursor and connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names :
              guessed_path = path . join ( tempdir , guessed_filename )
 def force_escape ( value ) :
 warnings . warn ( msg , RemovedInDjango19Warning , stacklevel = 2 )
  def add_arguments ( self , parser ) :
    elif version [ 3 ] != 'final' :
   @ property
                       pass
     def load_command_class ( app_name , name ) :
              self . renderer = renderer
              error_msg = "Invalid template name in 'extends' tag: %r." % parent
              cls . __dispatch = { }
    def prefix ( bp , func ) :
 import time
                  new_value . append ( self . coerce ( choice ) )
   def value ( self ) :
   return client
 if comment_notes :
 val2 = self . var2 . resolve ( context , True )
 from django . db import connections , DEFAULT_DB_ALIAS
  elif char == '\\' :
   def close ( self , ** kwargs ) :
    return False
   def __repr__ ( self ) :
              callback ( self )
   else :
   old_field_name = None
 self . models . add ( obj . object . __class__ )
    def inotify_code_changed ( ) :
   def unlock ( f ) :
 from django . core . exceptions import SuspiciousMultipartForm
                      break
 return bool ( ret )
  elif not callable ( formfield_callback ) :
              warnings . warn ( "cache_choices has been deprecated and will be "  "removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
                      new_attr = name
 with connections [ db ] . cursor ( ) as cursor :
  return [ None , None ]
 if 'max-age' in cc :
 from django . template . context import ( BaseContext , Context , RequestContext ,  ContextPopException )
     def set_urlconf ( urlconf_name ) :
 self . kwargs = kwargs
  return mark_safe ( data )
   if not args :
   class LocMemCache ( BaseCache ) :
 from django . utils . encoding import force_text , filepath_to_uri
 return formatted_subject [ : 989 ]
  def render ( self , name , value , attrs = None ) :
   value = self . get ( key , version = version )
              for dirpath , dirnames , locale_filenames in os . walk ( basedir ) :
 top = bottom + self . per_page
 if timeout == DEFAULT_TIMEOUT :
  if template_tuple is TemplateDoesNotExist :
          cookiedict [ key ] = c . get ( key ) . value
 self . _remaining = length
   if timeout > 2592000 :
                  self . connection . quit ( )
          if params [ 0 ] == 'context' :
                                      for sql in custom_sql :
              msg [ 'Message-ID' ] = make_msgid ( )
 del attrs [ attr ]
 for tok in rules :
      def __init__ ( self , host , * args , ** kwargs ) :
              raise ValueError ( "dictionary doesn't specify a version" )
              checks = [ check for check in self . registered_checks  if hasattr ( check , 'tags' ) and set ( check . tags ) & set ( tags ) ]
 self . validate_key ( key )
  else :
                  return kwargs
 class MaxLengthValidator ( BaseValidator ) :
               lead , middle , trail = '' , word , ''
              if self . _has_expired ( key ) :
              yield
  else :
  except base . DeserializationError :
   app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
  else :
 from django . utils . dateformat import format , time_format
 pass
  from . html_parser import HTMLParser , HTMLParseError
       finally :
 for bit in tag_re . split ( self . template_string ) :
  except smtplib . SMTPException :
          return maybe
              filename = filename [ : - 9 ] + ".py"
 if value is not result :
    else :
              return True
 return get_internal_wsgi_application ( )
   test_runner = TestRunner ( ** options )
 def length ( value ) :
          super ( MultiValueDict , self ) . __init__ ( key_to_list_mapping )
  def __new__ ( cls , name , bases , attrs ) :
          return time_format ( value , 'TIME_FORMAT' , use_l10n = use_l10n )
      if defaults is not None :
 self . use_tz = use_tz
  del bits [ : 1 ]
 name = s . split ( '.' )
              if self . verbosity > 0 :
  for index in range ( len ( hextets ) ) :
   @ register ( Tags . models )
   if not func . is_usable :
  if labels and f . name in labels :
     if '.' in ip_str . split ( ':' ) [ - 1 ] :
  def __init__ ( self , var1 , var2 , nodelist_true , nodelist_false , negate ) :
          self . _cache . flush_all ( )
           members = [ member for member in self . _archive . getmembers ( )  if member . name != 'pax_global_header' ]
 from django . db import connections , DEFAULT_DB_ALIAS
          try :
              lookup_view_s = lookup_view
 plural_re = re . compile ( r"""^\s*plural$""" )
              unique_id = get_tag_uri ( item [ 'link' ] , item [ 'pubdate' ] )
 with self . _lock :
 import errno
   def parse_args ( self , args = None , namespace = None ) :
 if illegal_formatting :
 self . params = params
 return _get_timezone_name ( get_current_timezone ( ) )
 for label in labels :
                      singular . append ( '%%(%s)s' % t . contents )
          raise ValueError ( "%r is not in a valid HTTP date format" % date )
              potfile = os . path . join ( path , '%s.pot' % str ( self . domain ) )
                      raise NoReverseMatch ( "%s is not a registered namespace" %  key )
 def errors ( self ) :
          if self . callback ( record ) :
  ALL_FIELDS = '__all__'
 class FileSystemStorage ( Storage ) :
              return loader . get_template ( template )
   class Loader ( BaseLoader ) :
      help = ( 'Removes ALL DATA from the database, including data added during '  'migrations. Unmigrated apps will also have their initial_data '  'fixture reloaded. Does not achieve a "fresh install" state.' )
 try :
from __future__ import unicode_literals
      from functools import lru_cache
   def handle ( self , * labels , ** options ) :
                              out . write ( ' ngettext(%r, %r, count) ' % (  join_tokens ( singular , trimmed ) ,  join_tokens ( plural , trimmed ) ) )
 fk = _get_foreign_key ( parent_model , model , fk_name = fk_name )
          self . max_value , self . min_value = max_value , min_value
   return otherwise
  else :
                              e . args = ( "Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): %(error_msg)s" % {  'app_label' : obj . object . _meta . app_label ,  'object_name' : obj . object . _meta . object_name ,  'pk' : obj . object . pk ,  'error_msg' : force_text ( e )  } , )
   dir_suffix = '%s*' % os . sep
          token = get_token ( request )
    if is_relation :
                      for name in handlers :
  except Exception :
          self . _reset_dicts ( dict_ )
  return self . handle_noargs ( ** options )
   result = new_result
              return ''
                          raise TemplateSyntaxError ( "Searching for value. "  "Unexpected end of string in column %d: %s" %  ( i , subject ) )
              _default = translation ( settings . LANGUAGE_CODE )
 class TranslatableFile ( object ) :
          from django . conf import settings
          pass
     return bound_func ( * args , ** kwargs )
      def exists ( self , name ) :
 from django . utils . functional import lazy
 def default_if_none ( value , arg ) :
  import hmac
 for fixture_dir in fixture_dirs :
          if name is None and compile_function is None :
                  opts = model . _meta
    return self . has_key ( key )
 try :
          upload = super ( ClearableFileInput , self ) . value_from_datadict ( data , files , name )
  else :
 from django . utils . translation import ugettext_lazy as _
              return ( t [ 0 ] . lower ( ) , True )
 class EventHandler ( pyinotify . ProcessEvent ) :
   def _get_context_stack_frame ( self , context ) :
   for module_to_search in args :
  else :
 line = line [ space : ]
      def constant_time_compare ( val1 , val2 ) :
 if match :
          compiled_parent = self . get_parent ( context )
 chunks . append ( bytes )
                  if issues :
   def to_python ( self , value ) :
  return _standard_context_processors
  else :
   def get ( self , key , default = None ) :
   def utcoffset ( self , dt ) :
   def to_python ( self , data ) :
  j = match . end ( )
     def sql_create ( app_config , style , connection ) :
   def __str__ ( self ) :
              return path , ''
  from . import six
  def add_arguments ( self , parser ) :
          if not getattr ( f , 'editable' , False ) :
                          if hasattr ( field_value , '__iter__' ) and not isinstance ( field_value , six . text_type ) :
                  raise CommandError ( "You can only use --pks option with one model" )
  return data . get ( name , None )
               return dec
 path = kwargs . pop ( 'path' , None )
             self . template_name = template
   class_name = model . __name__ + str ( 'Form' )
   def clean ( self ) :
          attrs [ 'widgets' ] = widgets
 in_index = - 3 if is_reversed else - 2
    context_re = re . compile ( r"""^\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?'))\s*""" )
 if os . path . exists ( django_po ) :
 from django . utils . module_loading import import_string
                  week_number = 53
              HTMLParser . __init__ ( self , strict = False )
                       value = value . encode ( charset )
          return build_request_repr ( self )
 from wsgiref import simple_server
          return datetime . fromtimestamp ( os . path . getmtime ( self . path ( name ) ) )
   def __setitem__ ( self , name , val ) :
   from django . core . exceptions import ValidationError
 super ( CommandParser , self ) . __init__ ( ** kwargs )
          Context . __init__ ( self , dict_ , current_app = current_app ,  use_l10n = use_l10n , use_tz = use_tz )
 def lower ( value ) :
          self . _assert_mutable ( )
  with self . _lock :
  else :
  if i < self . initial_form_count ( ) and 'instance' not in kwargs :
              raise StopIteration ( )
 self . _template_response_middleware = [ ]
 from django . utils . encoding import force_text , smart_text
 while self . exists ( name ) :
                      middle = middle [ : - len ( punctuation ) ]
 import os
 for formset in formsets :
              return SafeText ( t )
  final_attrs = self . build_attrs ( attrs )
 if isinstance ( widget , NumberInput ) and 'step' not in widget . attrs :
     _caches = { }
 __delslice__ = complain
 choices = list ( chain ( self . choices , choices ) )
  except ImportError :
    class EscapeBytes ( bytes , EscapeData ) :
              self . interesting = _html_parser . interesting_normal
              return self . DSTOFFSET
          return self . loader ( self . loadname , self . dirs ) [ 0 ]
 if threading :
              handler . startElement ( "author" , { } )
  except OSError as e :
          if self . _encoding is None :
                      self . write_po_file ( potfile , locale )
   @ cached_property
          raise TypeError ( "strftime of dates before 1900 does not handle" + illegal_formatting . group ( 0 ) )
 assert not ( cls . _delegate_bytes and cls . _delegate_text ) , "Cannot call lazy() with both bytes and text return types."
      return { 'request' : request }
 timestamp = git_log . communicate ( ) [ 0 ]
   elif len ( fks_to_parent ) == 0 :
   def ungettext ( singular , plural , number ) :
 _iterlists = "lists"
 state = self . state
 s = s . replace ( "'" , "\\'" )
   def usage ( self , subcommand ) :
              unique_id = item [ 'unique_id' ]
          fs_encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( )
          return getattr ( module , class_name )
              app_name = commands [ subcommand ]
  if connection . settings_dict [ 'ENGINE' ] == 'django.db.backends.dummy' :
                  fixture_dirs = [ os . path . join ( dir_ , os . path . dirname ( fixture_name ) )  for dir_ in fixture_dirs ]
  if isinstance ( value , datetime . date ) :
  all_files . append ( TranslatableFile ( dirpath , filename , locale_dir ) )
 from io import BytesIO
 BASE64_ALPHABET = BASE62_ALPHABET + '-_'
  return val
   def _isdst ( self , dt ) :
      def get_language ( ) :
 handler . addQuickElement ( "name" , self . feed [ 'author_name' ] )
                       if self . _request_middleware is None :
 if self . timeout is not None :
                              return smart_text ( field . rel . to . _meta . pk . to_python ( value ) )
  except AttributeError :
              _localtime = pytz . timezone ( settings . TIME_ZONE )
                  self . _closable_objects . append ( value )
 from django . template . loader import get_template
    if response is None :
  if row is None :
     class TemporaryFileUploadHandler ( FileUploadHandler ) :
 for model in not_installed_models :
     class HttpResponseGone ( HttpResponse ) :
          __bytes__ = new_method_proxy ( bytes )
               return self . tag_function
 self . validate_key ( key )
   def __exit__ ( self , exc_type , exc_value , tb ) :
 from __future__ import unicode_literals
 field_notes = [ ]
 default_error_messages = {  'invalid' : _ ( 'Enter a valid date/time.' ) ,  }
 path = path . lstrip ( '/' ) . lstrip ( '\\' )
                          continue
 from django . utils . encoding import python_2_unicode_compatible
 if opts . model is None :
              raise ImportError (  "Could not import '%s'. The path must be fully qualified." %  lookup_view )
 output . append ( format_html ( self . inner_html , choice_value = choice_value ,  sub_widgets = sub_ul_renderer . render ( ) ) )
                  args = options . args
   if item [ 'updateddate' ] is not None :
 ASCTIME_DATE = re . compile ( r'^\w{3} %s %s %s %s$' % ( __M , __D2 , __T , __Y ) )
          return json . loads ( data . decode ( 'latin-1' ) )
 return do_translate ( message , 'gettext' )
          value = field . _get_val_from_obj ( obj )
 def reader ( self ) :
    model_dependencies . reverse ( )
 def rjust ( value , arg ) :
          raise
                        from django . db import connections , DEFAULT_DB_ALIAS
 pks = set ( force_text ( getattr ( o , key ) ) for o in qs )
 config [ '()' ] = factory
          if not hasattr ( self , '_object_dict' ) :
  chunk_size *= 2
  def add_arguments ( self , parser ) :
      class CacheClass ( FileBasedCache ) :
   return new_class
 if not ip_str . lower ( ) . startswith ( '0000:0000:0000:0000:0000:ffff:' ) :
 UnicodeDecodeError . __init__ ( self , * args )
 return do_ifequal ( parser , token , True )
   class Command ( BaseCommand ) :
          if safe and not isinstance ( data , dict ) :
   excluded_apps = set ( )
   def handle_fk_field ( self , obj , field ) :
  def render ( self , name , value , attrs = None , choices = ( ) ) :
 boundary = self . _find_boundary ( chunk , len ( chunk ) < self . _rollback )
 super ( DecimalField , self ) . __init__ ( max_value , min_value , * args , ** kwargs )
   def __len__ ( self ) :
 self . sysid = sysid
  import re
 level = config . get ( 'level' , None )
 parser . add_argument ( '--domain' , '-d' , default = 'django' , dest = 'domain' ,  help = 'The domain of the message files (default: "django").' )
              continue
   def __repr__ ( self ) :
  for issues , group_name in sorted_issues :
   class EmailBackend ( BaseEmailBackend ) :
   elif hasattr ( s , '__unicode__' ) :
     class VariableNode ( Node ) :
   tag = match . group ( 1 ) . strip ( )
 zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = buf )
   def _get_page ( self , * args , ** kwargs ) :
 @ stringfilter
      rendering_attrs = [ 'template_name' , 'context_data' , '_post_render_callbacks' ]
    if not _cookie_allows_colon_in_names :
  else :
  filter_re = re . compile ( filter_raw_string , re . UNICODE | re . VERBOSE )
          return self . render ( )
                      import operator
 if len ( bits ) != 6 :
  else :
 if isinstance ( value , six . string_types ) :
 import tempfile
          available_shells = [ shell ] if shell else self . shells
          if options . get ( 'list_tags' ) :
   def get_handler ( self , * args , ** options ) :
          self . file . seek ( 0 )
 self . _loaders = loaders
              mail . outbox = [ ]
     _entity_re = re . compile ( r"&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));" )
  if isinstance ( message , ValidationError ) :
          return super ( Error , self ) . __init__ ( ERROR , * args , ** kwargs )
   def save_existing ( self , form , instance , commit = True ) :
  escapejs = allow_lazy ( escapejs , six . text_type )
 self . _unget_history = [ ]
  else :
 raise FieldError ( message )
 from django . utils . deprecation import RemovedInDjango19Warning
                  if not candidate :
 from threading import RLock
  from django . conf import settings
          filelist = new_filenames
          if self . options . get ( 'indent' , None ) is not None :
 return format_html ( '<textarea{0}>\r\n{1}</textarea>' ,  flatatt ( final_attrs ) ,  force_text ( value ) )
   if hasattr ( filter_func , "_decorated_function" ) :
                          description = "The '%s' function" % receiver . __name__
 _func_defaults = "func_defaults"
  style = color_style ( )
              return os . path . samefile ( src , dst )
           class X ( object ) :
 WARNING = 30
                      attrvalue = self . unescape ( attrvalue )
  elif issubclass ( klass , logging . handlers . SysLogHandler ) and 'address' in config :
   _wrapped = None
 html [ 'year' ] = self . create_select ( name , self . year_field , value , year_val , choices , self . year_none_value )
              raise AttributeError ( "You cannot set the upload handlers after the upload has been processed." )
              return False
   else :
   def __reversed__ ( self ) :
 values = '' . join ( quant ) . split ( ',' )
  else :
   def _save ( self , name , content ) :
            state = self . __dict__ . copy ( )
                  raise CommandError ( "No migrations present for: %s" % ( ", " . join ( invalid_apps ) ) )
 def _new_instance ( cls , children = None , connector = None , negated = False ) :
                  if e . errno != errno . EEXIST :
          cleaned = self . clean ( value )
              self . __args = args
 try :
  if not hasattr ( values , '__len__' ) :
                  raise TypeError (  "The argument `field` must be `None` when the `error` "  "argument contains errors for multiple fields."  )
     class Select ( Widget ) :
                          link = cache_get ( key )
 field_notes . append ( 'Field renamed because it was a Python reserved word.' )
                  cursor . execute ( "DELETE FROM %s "  "WHERE cache_key = %%s" % table , [ key ] )
 parser . add_option ( '--settings' ,  help = 'The Python path to a settings module, e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' )
  else :
      def represent_decimal ( self , data ) :
          warnings . warn ( '"validate" has been deprecated in favor of "check".' ,  RemovedInDjango19Warning )
 def dummy ( * args , ** kwargs ) :
   if self . META . get ( 'CONTENT_TYPE' , '' ) . startswith ( 'multipart/form-data' ) :
 decompress = False
 self . include_html = include_html
      return _trans . ungettext ( singular , plural , number )
              try :
   def __deepcopy__ ( self , memodict ) :
 if name is None :
              raise AttributeError ( attr )
    if 'django.middleware.clickjacking.XFrameOptionsMiddleware' not in set ( settings . MIDDLEWARE_CLASSES ) :
          return strftime ( self , fmt )
                  end -= 1
 flup_module += '_fork'
              self . xml . addQuickElement ( "None" )
 if language_code not in self . _regex_dict :
 if not field . show_hidden_initial :
          tzinfo = timezone . get_current_timezone ( ) if settings . USE_TZ else None
  candidate_subs = text_kwargs
   base , tail_ext = os . path . splitext ( filename . lower ( ) )
 from __future__ import unicode_literals
 RFC1123_DATE = re . compile ( r'^\w{3}, %s %s %s %s GMT$' % ( __D , __M , __Y , __T ) )
          if _default is None :
          msg = 'Module "%s" does not define a "%s" attribute/class' % (  dotted_path , class_name )
  else :
 if value is None :
              self . compression_formats [ 'bz2' ] = ( bz2 . BZ2File , 'r' )
   def _get_scheme ( self ) :
              self . _setup ( )
 from django . utils import six
    return week_number
          value = tuple . __getitem__ ( self , key )
 from django . utils . six . moves import map
   def check_for_migrations ( app_config , connection ) :
 if index < 0 :
    def _create_cache ( backend , ** kwargs ) :
                      namespaces [ pattern . namespace ] = ( p_pattern , pattern )
  updates = dict ( )
  if filters :
          return get_wsgi_application ( )
 choices = [ ( i , i ) for i in self . years ]
 StringIO = BytesIO = StringIO . StringIO
              self . template_cache [ key ] = TemplateDoesNotExist
                       value . encode ( charset )
  def handle_field ( self , obj , field ) :
 from django . utils . encoding import force_bytes
          return s
          if child . nodeType == child . TEXT_NODE or child . nodeType == child . CDATA_SECTION_NODE :
      from UserList import UserList
   else :
          self . _assert_mutable ( )
                      if not pythonrc :
  return cookiedict
  import codecs
              ch2 = None
  else :
  with open ( new_path , 'wb' ) as new_file :
   if ( isinstance ( data , ( datetime . datetime , datetime . time ) ) and  not getattr ( self . field . widget , 'supports_microseconds' , True ) ) :
   if answer != "y" :
   return response
              pass
 def _cache ( self ) :
               for h in logger . handlers [ : ] :
  except KeyError :
  app_list = OrderedDict ( )
   class MLStripper ( HTMLParser ) :
 self . _errors = ErrorDict ( )
              return self . _truncate_html ( length , truncate , text , truncate_len , False )
 output . append ( format_html ( self . inner_html ,  choice_value = force_text ( w ) , sub_widgets = '' ) )
          value = ungettext ( "%(size)d byte" , "%(size)d bytes" , 0 ) % { 'size' : 0 }
 return self . cleaned_data
 __Y = r'(?P<year>\d{4})'
          stream . unget ( chunk )
  return new_class
          if t [ 1 ] is True :
          return SafeText ( s )
   class TemplateCommand ( BaseCommand ) :
 import types
  except LookupError :
  try :
 def message_dict ( self ) :
  elif getattr ( current , 'alters_data' , False ) :
              widget . is_localized = True
    @ register . tag
 missing_args_message = "You must provide a project name."
 for x in range ( level , 1 , - 1 ) :
          cls = None
  super ( WSGIServer , self ) . __init__ ( * args , ** kwargs )
          db = options . get ( 'database' )
 for k , v in defaults . items ( ) :
              self . validators . append ( validators . MaxValueValidator ( max_value ) )
           six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc_info ( ) [ 2 ] )
  elif message_context [ 0 ] == "'" :
          return list ( self ) == other
              if self . pk_field :
  result . append ( ( lang , priority ) )
      return _trans . to_locale ( language )
  from __future__ import unicode_literals
      class Deserializer ( six . Iterator ) :
  except ImportError :
 return self . file . closed
 if kw [ 'microsecond' ] :
    function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )
  return ForNode ( loopvars , sequence , is_reversed , nodelist_loop , nodelist_empty )
  comment_lineno_cache = None
                      words [ i ] = escape ( word )
 for resultclass in resultclasses :
  return [ smart_text ( val ) for val in value ]
    return created_models
  except UnicodeDecodeError :
    def __reduce__ ( self ) :
  if isinstance ( source , NonCapture ) :
                      return
 for option in options :
   def __bytes_cast ( self ) :
  time . sleep ( 1 )
 meta = getattr ( form , 'Meta' , None )
   def _make_parser ( self ) :
  except TypeError :
              if hasattr ( data , 'read' ) :
      @ register . tag
  DEFAULT_CACHE_ALIAS = 'default'
 os . dup2 ( so . fileno ( ) , sys . stdout . fileno ( ) )
 loader = MigrationLoader ( connection )
      ensure_echo_on ( )
  try :
 if not router . allow_migrate ( database , cache . cache_model_class ) :
 i = self . pointer
   def o ( self ) :
 bits = token . split_contents ( )
    def get ( self , key , default = None , version = None ) :
  FASTCGI_OPTIONS = {  'protocol' : 'fcgi' ,  'host' : None ,  'port' : None ,  'socket' : None ,  'method' : 'fork' ,  'daemonize' : None ,  'workdir' : '/' ,  'pidfile' : None ,  'maxspare' : 5 ,  'minspare' : 2 ,  'maxchildren' : 50 ,  'maxrequests' : 0 ,  'debug' : None ,  'outlog' : None ,  'errlog' : None ,  'umask' : None ,  }
 found = False
  output_transaction = True
              inner_text . extend ( getInnerText ( child ) )
   def clear ( self ) :
  else :
 return data
  raise BadSignature ( 'Signature "%s" does not match' % sig )
   def date_format ( value , format = None , use_l10n = None ) :
 parser . add_argument ( '--name' , '-n' , dest = 'files' ,  action = 'append' , default = [ ] ,  help = 'The file name(s) to render. '  'Separate multiple extensions with commas, or use '  '-n multiple times.' )
  def __init__ ( self , attrs = None ) :
          if not hasattr ( e , 'django_template_source' ) :
 if self . use_ssl and self . use_tls :
          raise ValueError ( "The %s could not be %s because the data didn't"  " validate." % ( opts . object_name , fail_message ) )
 return FormSet
 if fields :
     existing . sort ( )
   self . check_test = boolean_check if check_test is None else check_test
 mapped_tokens = [ ]
               klass = app_name
              initial_forms = self . initial_form_count ( )
                  self . stdout . write ( "No changes detected" )
              try :
  continue
 self . can_read = threading . Semaphore ( 0 )
 from __future__ import unicode_literals
                  pass
    if not hasattr ( self , '_deleted_form_indexes' ) :
      format_key = 'DATETIME_INPUT_FORMATS'
  return True
    def b64_decode ( s ) :
          self . objects . append ( self . get_dump_object ( obj ) )
      if not _serializers :
  if not settings . configured :
  try :
   patterns = [ pattern for ( possibility , pattern , defaults ) in possibilities ]
   output = [ ]
  sub = ''
  else :
  from django . conf import settings
   def delete_many ( self , keys , version = None ) :
  def __init__ ( self , stream , boundary ) :
   def full_clean ( self ) :
    def push ( self , * args , ** kwargs ) :
          assert len ( version ) == 5
          if data_list :
   def render ( self , name = None , value = None , attrs = None , choices = ( ) ) :
 return callback ( request , ** param_dict )
      help = "Runs this project as a FastCGI application. Requires flup."
 self . _out . write ( force_str ( style_func ( msg ) ) )
          super ( Command , self ) . add_arguments ( parser )
                  definition [ 'opts' ] = opts
               raise AttributeError ( "%s could not be imported " % self . name )
   def tzname ( self , dt ) :
 return response
 raise NotImplementedError ( 'Subclasses must implement this method.' )
 from django . core . files . base import File
 hard_coded_bullets_re = re . compile ( r'((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)' % '|' . join ( re . escape ( x ) for x in DOTS ) , re . DOTALL )
                     return False
 if options [ 'outlog' ] :
   def send_messages ( self , email_messages ) :
  target = parser . compile_filter ( bits [ 1 ] )
 field_output . append ( "%sNULL" % ( "NOT " if not f . null else "" ) )
 trans_real . _default = None
              handler . addQuickElement ( "description" , item [ 'description' ] )
              raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' )
   BUILTIN_SERIALIZERS = {  "xml" : "django.core.serializers.xml_serializer" ,  "python" : "django.core.serializers.python" ,  "json" : "django.core.serializers.json" ,  "yaml" : "django.core.serializers.pyyaml" ,  }
                  content = '' . join ( comment )
   attrs = flatatt ( attrs ) if attrs else ''
 handler . addQuickElement ( "link" , "" , { "href" : item [ 'link' ] , "rel" : "alternate" } )
   def __len__ ( self ) :
                  push = block = block_context . pop ( self . name )
 html_message = reporter . get_traceback_html ( ) if self . include_html else None
  else :
 nodelist = parser . parse ( ( 'endverbatim' , ) )
   def print_help ( self , prog_name , subcommand ) :
 result ^= _bin_to_long ( u )
 from django . utils . encoding import force_bytes
                  break
 if self . verbosity > 1 :
 has_bz2 = True
 for name , app in six . iteritems ( get_commands ( ) ) :
  return self . nodelist_false . render ( context )
  self . endElement ( name )
 warnings . warn ( warn_msg , TranslatorCommentWarning )
 if html_message :
   seconds = self . Z ( )
                  raise CommandError (  "AppCommand cannot handle app '%s' in legacy mode "  "because it doesn't have a models module."  % app_config . label )
  for k , v in six . iteritems ( kwargs ) :
   fields = (   models . CharField ( name = 'cache_key' , max_length = 255 , unique = True , primary_key = True ) ,  models . TextField ( name = 'value' ) ,  models . DateTimeField ( name = 'expires' , db_index = True ) ,  )
  targets = [ key for key in executor . loader . graph . leaf_nodes ( ) if key [ 0 ] == app_label ]
 if not url :
 supported_platform = plat != 'Pocket PC' and ( plat != 'win32' or  'ANSICON' in os . environ )
              if not callable ( view_func ) :
          wsgi_opts = {  'maxSpare' : int ( options [ "maxspare" ] ) ,  'minSpare' : int ( options [ "minspare" ] ) ,  'maxChildren' : int ( options [ "maxchildren" ] ) ,  'maxRequests' : int ( options [ "maxrequests" ] ) ,  }
 from django . conf import settings
 additional_headers = [ newheader for newheader in newheaders  if newheader . lower ( ) not in existing_headers ]
          return list ( self . __iter__ ( ) ) [ idx ]
  output = [ ]
   offset = self . timezone . utcoffset ( self . data )
   def _open ( self , name , mode = 'rb' ) :
 value = bytes_to_text ( value , self . encoding )
 if value in self . empty_values :
 defaults = { 'data' : data , 'files' : files , 'auto_id' : auto_id , 'prefix' : prefix }
  else :
              widget = widget ( )
     def deactivate ( ) :
          super ( CheckboxInput , self ) . __init__ ( attrs )
                  break
      def b ( s ) :
  def next_space_index ( subject , i ) :
     def get_language_from_request ( request , check_path = False ) :
 obj_pk = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
              initial = [ ]
          handler . addQuickElement ( "title" , item [ 'title' ] )
          asvar = bits [ - 1 ]
   except KeyboardInterrupt :
 self . json_kwargs = self . options . copy ( )
    def get_max_age ( response ) :
   def parse_date ( value ) :
 class MinValueValidator ( BaseValidator ) :
 while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :
          vary_headers = cc_delim_re . split ( response [ 'Vary' ] )
  elif options [ 'all' ] :
 choices = [ ( i , i ) for i in range ( 1 , 32 ) ]
          parser . add_argument ( '--locale' , '-l' , dest = 'locale' , action = 'append' , default = [ ] ,  help = 'Locale(s) to process (e.g. de_AT). Default is to process all. '  'Can be used multiple times.' )
   quant = [ ]
                  self . _exception_middleware . insert ( 0 , mw_instance . process_exception )
                  return True
 six . reraise ( exc_type , exc_value , sys . exc_info ( ) [ 2 ] )
 self . _called_from_command_line = True
                      s = six . text_type ( s )
    @ register . filter ( "slice" , is_safe = True )
   def attach_alternative ( self , content , mimetype ) :
  except ValueError :
 if hasattr ( extra_classes , 'split' ) :
          super ( Truncator , self ) . __init__ ( lambda : force_text ( text ) )
 return AssignmentNode ( takes_context , args , kwargs , target_var )
              raise ValidationError (  self . error_messages [ 'max_digits' ] ,  code = 'max_digits' ,  params = { 'max' : self . max_digits } ,  )
  except AttributeError :
  elif callable ( func ) :
              pass
  _active . value = translation ( language )
 language_code = get_language ( )
  except TemplateDoesNotExist :
 end = s . find ( b';' )
          for key in self . keyOrder :
 all_date_checks = set ( )
  return attachment
                  msg = "System check identified some issues:\n%s" % msg
              params , varargs , varkw , defaults = getargspec ( func )
   def check_programs ( * programs ) :
 if self . is_bound :
  encoding = property ( lambda self : self . file . encoding )
    def add_item_elements ( self , handler , item ) :
                              self . handle_fk_field ( obj , field )
 deactivate = deactivate_all = lambda : None
              return
 bits = token . split_contents ( ) [ 1 : ]
          return value
  else :
    self . enter_command ( command , token )
  else :
 if isinstance ( self . data , datetime . datetime ) and is_aware ( self . data ) :
          view = viewname
 context . autoescape = old_setting
 for attr in ( 'expects_localtime' , 'is_safe' , 'needs_autoescape' ) :
 return True
 if sub_tried is not None :
          return s . encode ( encoding , errors )
              if self . verbosity >= 2 :
   format_locations . append ( 'django.conf.locale.%s' )
from __future__ import unicode_literals
 kwargs = {  'label' : getattr ( form . fields . get ( name ) , 'label' , capfirst ( self . fk . verbose_name ) )  }
  from django . utils import six
    if hextets [ index ] == '0' :
  else :
 from django . forms . utils import ErrorList
      def _BaseCookie__set ( self , key , real_value , coded_value ) :
              if not hasattr ( e , 'django_template_source' ) :
          current_timezone = timezone . get_current_timezone ( )
 super ( BaseModelFormSet , self ) . __init__ ( ** defaults )
              return self . nodelist_false . render ( context )
  if self . verbosity >= 2 :
              obj . pk = Model . _default_manager . db_manager ( db ) . get_by_natural_key ( * natural_key ) . pk
 return self . pointer < len ( self . subject )
  self . _cache . set_multi ( safe_data , self . get_backend_timeout ( timeout ) )
  from __future__ import unicode_literals
  except ( TypeError , ValueError , UnicodeDecodeError ) :
 from django . core . management . color import no_style
          return ''
          obj = copy . copy ( self )
 for fixture_file , fixture_dir , fixture_name in self . find_fixtures ( fixture_label ) :
 if field in self . cleaned_data :
          if self . _wrapped is empty :
 if ch :
 try :
 from django . forms . fields import Field , FileField
  else :
 _func_globals = "func_globals"
 return self . data . hour
  if max_num is None :
          _load_serializers ( )
      def handle_default_options ( options ) :
  from . . import Warning , register , Tags
  except ( ValueError , TypeError , ValidationError ) :
  def clean ( self ) :
              return 'StopUpload: Consume request data, then halt.'
              context . render_context [ BLOCK_CONTEXT_KEY ] = BlockContext ( )
  except Exception as e :
  return format_html ( '<label{0}>{1} {2}</label>' , label_for , self . tag ( ) , self . choice_label )
 assert match , 'unexpected call to parse_starttag()'
   return decorating_function
  else :
  except IndexError :
 if not os . path . isfile ( pythonrc ) :
 field_notes . append ( "Field renamed because it wasn't a valid Python identifier." )
 def data ( self ) :
   if type ( s ) == bytes :
              label_for = ''
 if len ( bits ) < 2 :
   def __repr__ ( self ) :
  filename = os . path . join ( to_path , name )
 remaining_bits = bits [ 2 : ]
                  try :
 yield self . read ( )
              pass
   def render ( self , context ) :
  else :
   def accessed_time ( self , name ) :
  return self . number * self . paginator . per_page
 pass
   def has_other_pages ( self ) :
                  form_field = self . fields [ field ]
          if self . is_localized :
 from django . db import router , DEFAULT_DB_ALIAS
      def __init__ ( self , * args , ** kwargs ) :
 cursor . execute (  connections [ db ] . ops . cache_key_culling_sql ( ) % table ,  [ cull_num ] )
                  file = BytesIO ( data . read ( ) )
  except IOError as e :
 is_required = False
   if compare_to != state_frame [ self ] :
            opts = self . _meta
  else :
 call_command ( "migrate" , ** options )
 dirname = os . path . dirname ( filename )
   old_app_dir = os . path . normpath ( os . path . join ( app_dir , 'models/sql' ) )
    def set_script_prefix ( prefix ) :
              return False
 if len ( fks_to_parent ) == 1 :
     html = { }
 if converter :
 sys . stdout . close ( )
  return RegexURLResolver ( r'^/' , urlconf )
  if '.' in hextets [ - 1 ] :
 num = 0
 if ( ( ( self . allow_files and os . path . isfile ( full_file ) ) or  ( self . allow_folders and os . path . isdir ( full_file ) ) ) and  ( self . match is None or self . match_re . search ( f ) ) ) :
                              name . append ( ch )
                      out . write ( '# %s' % ' | ' . join ( lineno_comment_map [ comment_lineno_cache ] ) )
          msg = "[%s] %s\n" % ( self . log_date_time_string ( ) , format % args )
              sequence_sql = connection . ops . sequence_reset_sql ( no_style ( ) , self . models )
      def __init__ ( self , name , params ) :
                              extra_params [ 'blank' ] = True
 d = ''
 from django . core . mail import get_connection
              self . keyOrder . append ( key )
 parser . add_argument ( '--no-obsolete' , action = 'store_true' , dest = 'no_obsolete' ,  default = False , help = "Remove obsolete message strings." )
   _active = local ( )
  return self . _reverse_dict [ language_code ]
      def _set_response_etag ( response ) :
              if options . traceback or not isinstance ( e , CommandError ) :
  def to_python ( self , value ) :
 return f ( * args , ** kwargs )
  import base64
  self . cleaned_data [ name ] = value
 can_import_settings = True
 save_m2m ( )
  model_dependencies = skipped
      help = "Prints the DROP TABLE SQL statements for the given app name(s)."
  else :
   def handle ( self , * args , ** options ) :
   else :
 if isinstance ( query , MultiValueDict ) :
          pass
 if name :
          self . coerce = kwargs . pop ( 'coerce' , lambda val : val )
  else :
          pass
      class BoundaryIter ( six . Iterator ) :
 MONTHS_3 = {  1 : _ ( 'jan' ) , 2 : _ ( 'feb' ) , 3 : _ ( 'mar' ) , 4 : _ ( 'apr' ) , 5 : _ ( 'may' ) , 6 : _ ( 'jun' ) ,  7 : _ ( 'jul' ) , 8 : _ ( 'aug' ) , 9 : _ ( 'sep' ) , 10 : _ ( 'oct' ) , 11 : _ ( 'nov' ) , 12 : _ ( 'dec' )  }
  options [ k . lower ( ) ] = v
 for key , value in six . iterlists ( self ) :
 return
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database to synchronize. '  'Defaults to the "default" database.' )
 if s [ 0 ] not in "\"'" or s [ - 1 ] != s [ 0 ] :
   settings . _setup ( )
 from django . utils . encoding import force_text , python_2_unicode_compatible
   return "" . join ( inner_text )
              return None
 from django . conf import settings
  if not chunk :
   def g ( self ) :
 from django . utils import six
 from django . utils . encoding import force_str , force_text
 from django . utils . translation import ugettext_lazy as _ , ungettext_lazy
                  if self . required :
   attrs = attrs or { }
 self . method = None
   chunk = b'' . join ( chunks )
  return self . template_cache [ key ]
          return self . nodelist . render ( context )
                      top_errors . extend (  [ _ ( '(Hidden field %(name)s) %(error)s' ) % { 'name' : name , 'error' : force_text ( e ) }  for e in bf_errors ] )
   out = self . compress ( clean_data )
                  self . event_stream . expandNode ( node )
 yield buf . read ( )
              addr = Header ( addr , encoding ) . encode ( )
                  c = int ( text )
   def h ( self ) :
   class Command ( BaseCommand ) :
  fixture_files_in_dir = [ ]
 max_entries = params . get ( 'max_entries' , options . get ( 'MAX_ENTRIES' , 300 ) )
 val2 = parser . compile_filter ( bits [ 2 ] )
            basedirs = [ os . path . join ( os . path . dirname ( os . path . dirname ( __file__ ) ) ,  'conf' , 'locale' ) ,  'locale' ]
 if 'class' in attrs :
      from django . utils . six . moves import cPickle as pickle
 sql_files . append ( os . path . join ( app_dir , "%s.sql" % opts . model_name ) )
          return [ f [ : - 3 ] for f in os . listdir ( command_dir )  if not f . startswith ( '_' ) and f . endswith ( '.py' ) ]
              if e . args [ 0 ] not in not_found :
                  filename = ev . filename
   def __deepcopy__ ( self , memo = None ) :
 self . pos = 0
 result = result [ : start ] + [ inner ]
          self . content = content
  from django . apps import apps
    @ register . tag
 from django . utils . translation import get_language , to_locale , check_for_language
   else :
                          pop_context = True
 neg_inf = - 1e200 * 1e200
   def make_writeable ( self , filename ) :
   def __str__ ( self ) :
   def __iter__ ( self ) :
          result = super ( SortedDict , self ) . pop ( k , * args )
          self . field = field
   if indent :
  from django . core . exceptions import ImproperlyConfigured
              regex = re . compile ( regex , re . UNICODE )
 if six . PY2 and not isinstance ( path , bytes ) :
 for path in self . locale_paths :
     class QueryDict ( MultiValueDict ) :
  return
 opts = model . _meta
              new_conn_created = self . open ( )
 for pk in value :
          zipfile . ZipFile . __init__ ( self , * args , ** kwargs )
   def list ( self ) :
     def build_request_repr ( request , path_override = None , GET_override = None ,  POST_override = None , COOKIES_override = None ,  META_override = None ) :
                              f = os . path . join ( root , f )
                random . seed (  hashlib . sha256 (  ( "%s%s%s" % (  random . getstate ( ) ,  time . time ( ) ,  settings . SECRET_KEY ) ) . encode ( 'utf-8' )  ) . digest ( ) )
              raise AttributeError ( "'%s' object has no attribute 'ordered_forms'" % self . __class__ . __name__ )
 clean = lambda self , x : len ( x )
 if neg :
  return instance
              warnings . warn (  "`%s.%s` is deprecated, use `%s` instead." %  ( self . class_name , self . old_method_name , self . new_method_name ) ,  self . deprecation_warning , 2 )
 return False
  elif ch == '.' :
   def read ( self , size = None ) :
 keys = _iterkeys
 if not self . use_natural_primary_keys or not hasattr ( obj , 'natural_key' ) :
 obj . __class__ = cls
 self . _leftover = b'' . join ( [ bytes , self . _leftover ] )
              try :
   def compile_filter_error ( self , token , e ) :
          return "\\u%04x" % ord ( match . group ( 1 ) )
  setattr ( obj , self . name , result )
          value = dict . pop ( self , key , default )
          return 'Raw content'
                  if six . PY2 :
   def choice ( self , obj ) :
 if parsed . scheme and parsed . scheme not in self . allowed_schemes :
  for name in dir ( models . signals ) :
    class TagHelperNode ( Node ) :
 from django . utils . six . moves import input
          try :
               self . instance = opts . model ( )
                  return dict_ . getlist ( key )
   @ property
  def add_arguments ( self , parser ) :
    return msgs
 return { }
 link_target_attribute_re = re . compile ( r'(<a [^>]*?)target=[^\s>]+' )
    def inclusion_tag ( self , file_name , context_class = Context , takes_context = False , name = None ) :
 if os . environ . get ( 'DJANGO_SETTINGS_MODULE' ) :
 if not os . path . exists ( self . default_locale_path ) :
  def __init__ ( self , attrs = None , choices = ( ) ) :
                          raise ValueError ( 'Unable to configure handler '  '%r: %s' % ( name , e ) )
          signed_value = force_str ( signed_value )
              return None
              rv = level
              options , args = parser . parse_known_args ( self . argv [ 2 : ] )
          if isinstance ( level , int ) :
 self . tagname = self . tag ( )
 self . alternatives . append ( ( content , mimetype ) )
 break
  elif '\\' in path :
   def handle_label ( self , label , ** options ) :
     def modelform_defines_fields ( form_class ) :
 host = host [ : - 1 ] if host . endswith ( '.' ) else host
 self . help_text = help_text
   def gettext ( message ) :
 return mark_safe ( _helper ( value ) )
 pdict = { }
 return 'initial-%s' % self . add_prefix ( field_name )
                      date_value = datetime_safe . new_date ( date_value )
 import re
                  slots = [ slots ]
    class ImproperlyConfigured ( Exception ) :
 autoescape = autoescape and not isinstance ( value , SafeData )
              default_attrs . update ( attrs )
 self . attachments = attachments or [ ]
  except LookupError :
              _ , ser_fmt , cmp_fmt = self . parse_name ( os . path . basename ( fixture_file ) )
  if not context_instance :
 return re . sub ( r'&(?:\w+|#\d+);' , '' , force_text ( value ) )
  patch_cache_control ( response , max_age = cache_timeout )
          sep = len ( hextet [ 0 ] . split ( ':' ) ) + len ( hextet [ 1 ] . split ( ':' ) )
  status = '%s %s' % ( response . status_code , response . reason_phrase )
              return self . stream . getvalue ( )
      return _trans . get_language_bidi ( )
               raise NotImplementedError (  "Subclasses of AppCommand must provide"  "a handle_app_config() method." )
    def send_mass_mail ( datatuple , fail_silently = False , auth_user = None ,  auth_password = None , connection = None ) :
              raise StopIteration ( )
  option_value = force_text ( option_value )
              if not callable ( original_lookup ) and callable ( lookup_view ) :
              pass
   def as_p ( self ) :
  raise self . error ( token , "Invalid block tag: '%s'" % command )
 return field . widget . value_from_datadict ( self . data , self . files , prefix )
           self . ignore = options . get ( 'ignore' )
              out += '</%s>' % tag
 inputs = [ ]
 self . xml . startElement ( "django-objects" , { "version" : "1.0" } )
 self . xml . startElement ( "field" , {  "name" : field . name ,  "rel" : field . rel . __class__ . __name__ ,  "to" : smart_text ( field . rel . to . _meta ) ,  } )
 LOCK_SH = fcntl . LOCK_SH
                  result . parent = self
          daemon_kwargs [ 'out_log' ] = options [ 'outlog' ]
     url = None
     class ReferenceLocalTimezone ( tzinfo ) :
  if request . _post_parse_error :
                       fixture_files_in_dir . append ( ( candidate , fixture_dir , fixture_name ) )
  strip_tags = allow_lazy ( strip_tags )
              raise ValueError ( "Key '%s' not found" % key )
                  yield line
 if ':' not in template :
 from django . db . migrations . autodetector import MigrationAutodetector
  middle = '<a href="%s"%s>%s</a>' % ( url , nofollow_attr , trimmed )
                  continue
 del kwargs [ 'warning' ]
 sorted_issues = [  ( criticals , 'CRITICALS' ) ,  ( errors , 'ERRORS' ) ,  ( warnings , 'WARNINGS' ) ,  ( infos , 'INFOS' ) ,  ( debugs , 'DEBUGS' ) ,  ]
 self . _boundary = boundary
          if float ( value ) != 1 :
 return [ "" ,  "    class Meta:" ,  "        managed = False" ,  "        db_table = '%s'" % table_name ]
 return widget . id_for_label ( id_ )
   try :
                          warnings . warn (  "Need {0} values to unpack in for loop; got {1}. "  "This will raise an exception in Django 2.0."  . format ( num_loopvars , len_item ) ,  RemovedInDjango20Warning )
  elif user_settings [ key ] != default_settings [ key ] :
 six . reraise ( ImportError , ImportError ( msg ) , sys . exc_info ( ) [ 2 ] )
 if _standard_context_processors is None :
 new_class . declared_fields = declared_fields
                 return ''
   if tried :
    @ python_2_unicode_compatible
 from django . utils import six
       def __init__ ( self , msg , params = ( ) ) :
    class CheckRegistry ( object ) :
   class ManagementForm ( Form ) :
               timeout = - 1
   else :
              media_attrs = media . __dict__
 model_identifier = node . getAttribute ( attr )
  from django . utils . html import avoid_wrapping
   def remove_potfiles ( self ) :
              pass
    else :
 filter = get_exception_reporter_filter ( request )
              seen_data = set ( )
 node = CycleNode ( values , name , silent = silent )
          if app_config . models_module is None :
     def format_html ( format_string , * args , ** kwargs ) :
          if value is None :
  elif isinstance ( value , datetime . datetime ) :
  else :
              options , args = parser . parse_args ( argv [ 2 : ] )
              lines [ i ] = ( "%0" + width + "d. %s" ) % ( i + 1 , line )
  WORD_PATTERN = re . compile ( r'^\s*(\w+)\s*' )
 converter = self . value_converters . get ( prefix , None )
              usage = [  "" ,  "Type '%s help <subcommand>' for help on a specific subcommand." % self . prog_name ,  "" ,  "Available subcommands:" ,  ]
 self . close_called = False
                result = type ( self ) ( )
    if self . file_permissions_mode is not None :
   month = MONTHS . index ( m . group ( 'mon' ) . lower ( ) ) + 1
 from django . utils . module_loading import import_string
  if invalid_var_format_string :
  targets = [ ( app_label , migration . name ) ]
                      cls . __str__ = cls . __bytes_cast
              try :
 import struct
              self . cookies [ key ] [ 'secure' ] = True
 import time
  else :
    if data is False :
          for arg in list ( args ) + list ( six . itervalues ( kwargs ) ) :
   class Module_six_moves_urllib ( types . ModuleType ) :
   def _ipython_pre_011 ( self ) :
   return kwargs
 sys . stderr . write ( "  as a FastCGI application, you will need to get flup from\n" )
 if is_templatized :
                  raise TemplateSyntaxError ( "Could not parse some characters: "  "%s|%s|%s" %  ( token [ : upto ] , token [ upto : start ] ,  token [ start : ] ) )
   def _add_installed_apps_translations ( self ) :
 from django . core . management . color import no_style
   def __dir__ ( self ) :
                      number_value = rhs
  return value . replace ( tzinfo = None )
 max_width = min ( ( line . endswith ( '\n' ) and width + 1 or width ) , width )
  from __future__ import unicode_literals
   def __reduce_ex__ ( self , proto ) :
  def __init__ ( self , dir , params ) :
    @ property
  return result
                  pass
                  if self . fail_silently :
    def __len__ ( self ) :
  except Exception :
  def __init__ ( self ) :
  row_data = tuple ( d . _get_pk_val ( ) if hasattr ( d , '_get_pk_val' ) else d  for d in row_data )
          return not self . file or self . file . closed
  return result
     finally :
  else :
  return 0
 for template_name in template_name_list :
              _ , params = cgi . parse_header ( content_disposition )
  values = [ parser . compile_filter ( bit ) for bit in bits [ 1 : ] ]
   def handle ( self , * tablenames , ** options ) :
 default_error_messages = {  'invalid' : _ ( 'Enter a valid date.' ) ,  }
 self . position = 0
  elif char in 'Yy' :
   if '.' in str_number :
          from pprint import pformat
     DEFAULT_LOGGING = {  'version' : 1 ,  'disable_existing_loggers' : False ,  'filters' : {  'require_debug_false' : {  '()' : 'django.utils.log.RequireDebugFalse' ,  } ,  'require_debug_true' : {  '()' : 'django.utils.log.RequireDebugTrue' ,  } ,  } ,  'handlers' : {  'console' : {  'level' : 'INFO' ,  'filters' : [ 'require_debug_true' ] ,  'class' : 'logging.StreamHandler' ,  } ,  'null' : {  'class' : 'logging.NullHandler' ,  } ,  'mail_admins' : {  'level' : 'ERROR' ,  'filters' : [ 'require_debug_false' ] ,  'class' : 'django.utils.log.AdminEmailHandler'  }  } ,  'loggers' : {  'django' : {  'handlers' : [ 'console' ] ,  } ,  'django.request' : {  'handlers' : [ 'mail_admins' ] ,  'level' : 'ERROR' ,  'propagate' : False ,  } ,  'django.security' : {  'handlers' : [ 'mail_admins' ] ,  'level' : 'ERROR' ,  'propagate' : False ,  } ,  'py.warnings' : {  'handlers' : [ 'console' ] ,  } ,  }  }
                              os . mkdir ( migrations_directory )
 from django . db import connections , DEFAULT_DB_ALIAS
                       try :
 return '%s:%s:%s' % ( key_prefix , version , key )
          raise NotImplementedError ( 'subclasses of Origin must provide a reload() method' )
 hidden_widget = HiddenInput
 def cycle ( parser , token ) :
   except ImportError :
                      initial_prefixed_name = self . add_initial_prefix ( name )
          warnings . warn (  "NoArgsCommand class is deprecated and will be removed in Django 2.0. "  "Use BaseCommand instead, which takes no arguments by default." ,  RemovedInDjango20Warning  )
 return [ field for field in self if field . is_hidden ]
 last [ NEXT ] = root [ PREV ] = cache [ key ] = link
              self . instance = instance
 self . validate_key ( key )
 self . dicts [ - 1 ] [ key ] = value
              self . _setup ( )
 constant_arg , var_arg = match . group ( "constant_arg" , "var_arg" )
 logger . handlers = [ ]
              if arg . startswith ( option ) :
 from django . utils import timezone
 c = [ ]
 for possibility , pattern , defaults in possibilities :
          if value in self . empty_values :
   self . fields = fields
   queryset = objects . using ( using ) . order_by ( model . _meta . pk . name )
                              child_loggers . append ( existing [ i ] )
  g = one_percent_re . sub ( '%%' , g )
    def memoize ( func , cache , num_args ) :
 raise NotImplementedError ( 'subclasses of BaseLoader must provide a load_template_source() method' )
                      del self [ key ]
          try :
 self . dicts = [ builtins ]
                          return result
              if settings . TEMPLATE_DEBUG :
 attrs = { "model" : smart_text ( obj . _meta ) }
      content_type = META . get ( 'HTTP_CONTENT_TYPE' , META . get ( 'CONTENT_TYPE' , '' ) )
                  field_value = None
    @ register . tag ( 'with' )
  result . queryset = result . queryset
 from django . utils import six
  else :
                  prefix = settings . STATIC_URL
          attrs [ 'help_texts' ] = help_texts
              return initial
          pass
   def get_language_info ( lang_code ) :
          if value is None :
 if missing_fields :
 flat = { }
              return formats . localize_input ( value )
 from django . core . management . templates import TemplateCommand
              self . check_migrations ( )
          if size is None or size > self . remaining :
  def lock ( f , flags ) :
          tried = [ ]
    @ register . tag
 import unicodedata
          for d in reversed ( self . dicts ) :
          return yes
              return [ ]
          value = ugettext ( "%s GB" ) % filesize_number_format ( bytes / GB )
 if current_len == truncate_len :
          reloader = python_reloader
   def unsign ( self , signed_value ) :
                  if tag . lower ( ) != self . cdata_tag :
          return t . render ( context_instance )
              handler . addQuickElement ( "link" , '' ,  { "rel" : "enclosure" ,  "href" : item [ 'enclosure' ] . url ,  "length" : item [ 'enclosure' ] . length ,  "type" : item [ 'enclosure' ] . mime_type } )
  for location in format_locations :
  else :
          iterator = iter ( stream_or_iterable )
  if app_names :
  except UnicodeEncodeError :
 singular = [ ]
          return self
 if not data :
  else :
 if p >= 0 :
  else :
  except KeyboardInterrupt :
 if pattern . app_name :
                          tried . extend ( [ pattern ] + t for t in sub_tried )
 _add_doc ( u , """Text literal""" )
                  os . makedirs ( dirname )
 self . _leftover = b''
      if isinstance ( message , SafeData ) :
   from django . http . response import REASON_PHRASES as STATUS_CODE_TEXT
          try :
   class warn_about_renamed_method ( object ) :
 args = hashlib . md5 ( force_bytes ( key ) )
 self . _cache . delete ( key )
   def __contains__ ( self , key ) :
 from django . utils . translation import get_language
 def get_supported_language_variant ( lang_code , strict = False ) :
     class GenericIPAddressField ( CharField ) :
     def import_by_path ( dotted_path , error_prefix = '' ) :
   self . extra_context = extra_context or { }
                          cursor . execute ( line )
   def __lt__ ( self , other ) :
 if callable ( lookup_view ) :
                  keys = node . getElementsByTagName ( 'natural' )
                  raise CommandError ( "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)" % app_label )
 missing_args_message = "Enter at least one %s." % label
 return self . _coerce ( value )
      return lazy_number ( ngettext , str , singular = singular , plural = plural , number = number )
          super ( Command , self ) . add_arguments ( parser )
              if bits [ 0 ] != 'and' :
              id_for_label = widget . id_for_label ( id_ )
   def __ne__ ( self , other ) :
  else :
          skipped = [ ]
   def _handle_object ( self , node ) :
          try :
  self . validate_name ( name , app_or_project )
   def get ( self , header , alternate = None ) :
   prev_opts = [ x . split ( '=' ) [ 0 ] for x in cwords [ 1 : cword - 1 ] ]
                      raise
      def create_table ( self , database , tablename ) :
          parser . add_argument ( 'name' , help = 'Name of the application or project.' )
 encode = lambda k , v : '%s=%s' % ( ( quote ( k , safe ) , quote ( v , safe ) ) )
              raise CommandError ( 'Your Python does not support IPv6.' )
  except ValueError :
  to_py = super ( ModelMultipleChoiceField , self ) . to_python
              sys . stdout = NullDevice ( )
              pass
 return iter ( getattr ( d , _iterlists ) ( ** kw ) )
     raise LookupError ( lang_code )
  else :
                               val , encoded = super ( SimpleCookie , self ) . value_encode ( val )
          for item in self . items :
      widget = TimeInput
  else :
 pass
  del attr
              yield key , self [ key ]
 from django . utils import six
              stream_class = StringIO if isinstance ( content , six . text_type ) else BytesIO
 for code in ( lang_code , generic_lang_code ) :
 return
      class CycleNode ( Node ) :
 value = environ . get ( str ( key ) , str ( default ) )
   self . widget = widget
 if len ( password ) > inner . block_size :
 from django . forms . models import *
   def __iter__ ( self ) :
 self . _js = [ ]
 value = value . replace ( b'\\\\' , b'\\' ) . replace ( b'\\"' , b'"' )
          warnings . warn ( '`MergeDict` is deprecated, use `dict.update()` '  'instead.' , RemovedInDjango19Warning , 2 )
   base_name = '%s_name' % app_or_project
  while start < end :
              parentmod , submod = get_mod_func ( mod_name )
   class Serializer ( PythonSerializer ) :
   if process_all :
  check_for_migrations ( app_config , connection )
 WSGIServer = module . WSGIServer
              option_value = ''
          TemplateLoader = import_string ( loader )
     class URLNode ( Node ) :
    QuerySetPaginator = Paginator
  return None
 inner_html = '<li>{choice_value}{sub_widgets}</li>'
   def __repr__ ( self ) :
  else :
    @ register . filter ( is_safe = True )
 if auto_id and 'id' not in attrs and 'id' not in widget . attrs :
 self . dirpath = dirpath
 msgs , errors , status = popen_wrapper ( args )
  def render ( self , context ) :
                           continue
  subject = self . format_subject ( subject )
   @ classmethod
  else :
              if finder . find_module ( name , package_path ) :
              raise ValueError ( "Zip-compressed fixtures must contain one file." )
              return self . blocks [ name ] . pop ( )
              if event . path . endswith ( '.mo' ) :
   for ext in pathext :
  models . signals . post_migrate . send (  sender = app_config ,  app_config = app_config ,  verbosity = verbosity ,  interactive = interactive ,  using = db )
  except TemplateSyntaxError as e :
    else :
 leave_locale_alone = True
              self . addr = '::1' if self . use_ipv6 else '127.0.0.1'
 exclude = [ ]
   return '\n' . join ( output )
  else :
                      pass
 self . render_context = RenderContext ( )
  else :
       for field in model . _meta . many_to_many :
 args = ''
 request = sys . modules [ __name__ + ".moves.urllib_request" ]
              orig = self . parent_instance . pk
 if lang_code not in _supported and replacement in _supported :
      def __init__ ( self , regex , max_length = None , min_length = None , error_message = None , * args , ** kwargs ) :
                  fields = list ( six . iteritems ( base . base_fields ) ) + fields
 body_msg = msg
          if self . _wrapped is empty :
  bits = host . rsplit ( ':' , 1 )
 if match :
 return result
                  if status != STATUS_OK :
 import warnings
          return self . as_table ( )
                  return lookup_view
  def __init__ ( self , nodelist_true , nodelist_false , * varlist ) :
          super ( ExternalReferenceForbidden , self ) . __init__ ( )
   def __enter__ ( self ) :
 compile_func . __doc__ = func . __doc__
 colors . reverse ( )
              raise ValueError ( 'Sign character found in converter base digits.' )
 if 'Location' in response and request . get_host ( ) :
 import time
                  fields = list ( six . iteritems ( base . declared_fields ) ) + fields
                              break
 def __init__ ( self , fields = ( ) , * args , ** kwargs ) :
          signature = base64_hmac ( self . salt + 'signer' , value , self . key )
  digits . insert ( - exponent , '.' )
  else :
                              app_list_value . append ( model )
  if boundary :
     class MultiValueField ( Field ) :
 def encoding ( self ) :
 return base64 . urlsafe_b64decode ( s + pad )
 if new_name != col_name :
 return cache
          return ugettext ( "Please correct the duplicate values below." )
              super ( URLValidator , self ) . __call__ ( value )
    else :
 __import__ ( name )
          msgs = msgs . replace ( 'charset=CHARSET' , 'charset=UTF-8' )
 if value in self . empty_values :
                      biggest_number = max ( [ x for x in numbers if x is not None ] )
 return True
 parser . add_argument ( '--ignorenonexistent' , '-i' , action = 'store_true' ,  dest = 'ignore' , default = False ,  help = 'Ignores entries in the serialized data for fields that do not '  'currently exist on the model.' )
 prefix = 'django_%s_template_' % self . app_or_project
  base_path = os . path . splitext ( po_path ) [ 0 ]
   def run ( self , ** options ) :
              form . save_m2m ( )
 self . run_validators ( value )
 return func
           logging_config_func = import_string ( logging_config )
                  attrs [ 'id' ] = self . html_initial_id
      pass
 if six . PY3 :
   def tag ( self ) :
 pass
  return '\n\n' . join ( paras )
   def create_nodelist ( self ) :
   get_format_lazy = lazy ( get_format , six . text_type , list , tuple )
          super ( MemoryFileUploadHandler , self ) . new_file ( * args , ** kwargs )
 self . _errors = [ ]
 def to_bytes ( val , encoding ) :
  from django . db import models
              _module = self . _resolve ( )
     self . add_error ( None , errors )
                  yield subnode
 for filename in filelist :
      SimpleCookie = http_cookies . SimpleCookie
  klass = node . clone ( )
              arg_vals = [ ]
  from django . core . management . base import BaseCommand , CommandError
          escaper = lambda x : x
 for c in reversed ( self . __class__ . __mro__ ) :
 from math import ceil
  from itertools import chain
  with context . push ( ** values ) :
   def has_bom ( fn ) :
 assert mimetype is not None
  return t [ 0 ] . lower ( ) , True
 parsed = False
import sys
   def size ( self , name ) :
              model_list = app_config . get_models ( )
  return '<%s: %r>' % ( type ( self ) . __name__ , repr_attr )
                  m = _html_parser . attrfind . match ( rawdata , k )
              raise SuspiciousMultipartForm (  "The multipart parser got stuck, which shouldn't happen with"  " normal uploaded files. Check for malicious upload activity;"  " if there is none, report this to the Django developers."  )
 thefile = '%s.c' % self . file
              return int ( cc [ 'max-age' ] )
                  token = "not in"
  except ImportError :
   def _construct_form ( self , i , ** kwargs ) :
 d = { }
  _add_doc ( get_unbound_function ,  """Get the function out of a possibly unbound function""" )
   def handle ( self , * args , ** options ) :
 self . _files = MultiValueDict ( )
 token = parser . next_token ( )
 from importlib import import_module
  def inner ( check ) :
                          app_config = apps . get_app_config ( app_label )
 from django . utils . timezone import is_aware
                      self . close ( )
          super ( PasswordInput , self ) . __init__ ( attrs )
 obj_dict [ '_data' ] = dict ( ( k , self . getlist ( k ) ) for k in self )
 sys . stderr . write ( "  installed flup, then make sure you have it in your PYTHONPATH.\n" )
  if self . META . get ( header , None ) == value :
              current_uri = '{scheme}://{host}{path}' . format ( scheme = self . scheme ,  host = self . get_host ( ) ,  path = self . path )
   executor = MigrationExecutor ( connection )
  for potfile in potfiles :
   def handle ( self , * fixture_labels , ** options ) :
 try :
 from django . core . management import call_command
              try :
               ERRORS = {  errno . EACCES : "You don't have permission to access that port." ,  errno . EADDRINUSE : "That port is already in use." ,  errno . EADDRNOTAVAIL : "That IP address can't be assigned-to." ,  }
              return None
    def patch_response_headers ( response , cache_timeout = None ) :
  elif not isinstance ( sep , str ) :
 for field in self . fields . values ( ) :
 if not self . connection :
  def fix ( match ) :
 return NowNode ( format_string )
      return trim_whitespace_re . sub ( ' ' , s . strip ( ) )
 if content_disposition :
   class Serializer ( PythonSerializer ) :
                              line = '%s\n' % plural_form_line
              return None
 if exit_code != 3 :
                      new_file . write ( content )
 pass
                  try :
          del cc [ 'public' ]
  except MultiPartParserError :
   @ property
   if isinstance ( field_value , str ) :
              raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' )
 INFO = 20
          raw_cookie = get_str_from_wsgi ( self . environ , 'HTTP_COOKIE' , '' )
 tzinfo . __init__ ( self )
  return super ( SortedDict , self ) . setdefault ( key , default )
              raise ValueError ( "This file is not accessible via a URL." )
              return replacement
              raise TemplateSyntaxError ( 'The %r option was specified more '  'than once.' % option )
            try :
   if not isinstance ( d , datetime . datetime ) :
 if not m :
              return fastcgi_help ( "ERROR: Invalid option for daemonize "  "parameter." )
                  d = m . groupdict ( )
 if not options . get ( 'addrport' ) :
 BLOCK_TAG_END = '%}'
  else :
 from __future__ import unicode_literals
 use_threading = connection . features . test_db_allows_multiple_connections
 for key , value in list ( attrs . items ( ) ) :
   def as_p ( self ) :
 key = bytes_to_text ( key , self . encoding )
 if form in forms_to_delete :
  def add_item_elements ( self , handler , item ) :
   else :
   raise CommandError ( "Unknown serialization format: %s" % format )
 if self . data . hour > 11 :
     class Widget ( six . with_metaclass ( MediaDefiningClass ) ) :
 with open ( writer . path , "wb" ) as fh :
 self . origin = origin
 parser . add_argument ( '--pythonpath' )
    @ register . tag
     class DecimalField ( IntegerField ) :
          return smart_text ( self . name or '' )
 return six . iteritems ( super ( MultiValueDict , self ) )
 return sys . modules [ name ]
          super ( TemporaryFileUploadHandler , self ) . __init__ ( * args , ** kwargs )
          return mark_safe ( value )
 oldroot [ KEY ] = key
   def apply_response_fixes ( self , request , response ) :
                       migrations_directory = os . path . dirname ( writer . path )
  from __future__ import unicode_literals
 if isinstance ( obj , models . signals . ModelSignal ) :
   forms_valid &= form . is_valid ( )
 self . lasttag = tag = match . group ( 1 ) . lower ( )
  token . lineno = self . lineno
              return self . _stream . readline ( * args , ** kwargs )
 from django . core . files import locks , File
  if len ( initial ) != len ( data ) :
      pass
          if getattr ( self , '_client' , None ) is None :
  if ipv4_unpacked :
   return view
  yield data
                      msg = "Execution of %s failed: %s" % ( self . program , errors )
                      raise CommandError (  "errors happened while running msguniq\n%s" % errors )
                  validate_ipv4_address ( hextet )
   def args_check ( name , func , provided ) :
              return { }
    def __str__ ( self ) :
 return timesince ( d , now , reversed = True )
   def end_serialization ( self ) :
  elif token_string . startswith ( COMMENT_TAG_START ) :
 FILES = property ( _get_files )
   def delete_cookie ( self , key , path = '/' , domain = None ) :
  self . choices = choices
   def _dec ( func ) :
   def url ( self , name ) :
   return '\n' . join ( output )
 for h in handlers :
   def writer_leaves ( self ) :
 exc_value = exc_type (  "Unsupported value: %r. You should install pytz." % dt )
              return True
  else :
   get_method_function = operator . attrgetter ( _meth_func )
 sub_ul_renderer . choice_input_class = self . choice_input_class
  context . dicts . append ( self )
  try :
 for operation in migration . merged_operations :
 return
   def _mark_post_parse_error ( self ) :
  _func_closure = "func_closure"
       def __init__ ( self , conditions_nodelists ) :
 force_unicode = force_text
  except IndexError :
 for name in loggers :
 if cached is not None :
 value = self . to_python ( value )
    class BaseMemcachedCache ( six . with_metaclass ( BaseMemcachedCacheMethods , BaseCache ) ) :
 if cls . _delegate_text :
   return commands
 if not hextets [ index ] :
 self . orphans = int ( orphans )
  except ( ValueError , OverflowError , InvalidOperation ) :
  except ( archive . ArchiveException , IOError ) as e :
 matches = filter_re . finditer ( token )
 self . children = [ obj , data ]
   call_command ( 'loaddata' , * fixture_labels , ** { 'verbosity' : verbosity } )
              nesting += 1
              raise CommandError ( "you must provide %s %s name" % (  "an" if app_or_project == "app" else "a" , app_or_project ) )
               name = os . path . join ( dir_name , "%s_%s%s" % ( file_root , next ( count ) , file_ext ) )
  super ( TemporaryUploadedFile , self ) . __init__ ( file , name , content_type , size , charset , content_type_extra )
  if self . _should_delete_form ( form ) :
                                    over_bytes = len ( chunk ) % 4
              self . instance = self . fk . rel . to ( )
            if hasattr ( self , '_choices' ) :
 new_context = copy ( self )
  elif item [ "author_email" ] :
    return mark_safe ( template % substitutions )
  else :
                  self . fixture_count += 1
  both_after = [  Tok ( "other" , r"." ) ,  ]
  __all__ = [ 'luhn' ]
 match = _html_parser . endtagfind . match ( rawdata , i )
     def resolve ( self , context ) :
           LOCK_EX = LOCK_SH = LOCK_NB = 0
                   self . _files . appendlist (  force_text ( old_field_name , self . _encoding , errors = 'replace' ) ,  file_obj )
          with self . mutex :
  from os import path
 if isinstance ( value , bool ) :
              break
  from django . utils . itercompat import is_iterable
 opfunc . __doc__ = getattr ( int , opname ) . __doc__
 import sys
  else :
                  os . remove ( name )
  if self . username and self . password :
  _tc = http_cookies . SimpleCookie ( )
 parser . add_argument ( '--natural-foreign' , action = 'store_true' , dest = 'use_natural_foreign_keys' , default = False ,  help = 'Use natural foreign keys if they are available.' )
              continue
          super ( ContextDict , self ) . __init__ ( * args , ** kwargs )
   def strptime ( self , value , format ) :
    return False
                  return True
 parser . add_argument ( '--keep-pot' , action = 'store_true' , dest = 'keep_pot' ,  default = False , help = "Keep .pot file after making messages. Useful when debugging." )
 formatted_subject = subject . replace ( '\n' , '\\n' ) . replace ( '\r' , '\\r' )
              app_output = self . handle_app_config ( app_config , ** options )
              return default
      def delete ( self , name ) :
 re_chars = re . compile ( r'<.*?>|(.)' , re . U | re . S )
 if len ( val1 ) != len ( val2 ) :
 try :
      def execute_from_command_line ( argv = None ) :
 if version is None :
                  self . cookies [ key ] [ 'expires' ] = cookie_date ( time . time ( ) +  max_age )
                          deps . append ( rel_model )
  except UnicodeDecodeError :
   def as_ul ( self ) :
          filter_name = getattr ( func , '_filter_name' , None )
  elif callable ( func ) :
 return form . cleaned_data . get ( DELETION_FIELD_NAME , False )
 if os . path . sep in fixture_name :
 if settings . USE_I18N :
 from django . utils . encoding import smart_text , is_protected_type
          for name in self . fields :
  return True
  output . append ( '</optgroup>' )
 if callable ( self . limit_choices_to ) :
 if status :
  return '' . join ( base36 )
 return date ( d . year , d . month , d . day )
   def close ( self ) :
   class Command ( BaseCommand ) :
 from django . utils . deprecation import RemovedInDjango19Warning
  src_data = prepare_js_for_gettext ( src_data )
 pass
  return smart_text ( value )
 widget = SelectMultiple
  elif pluralmatch :
          cc [ k . replace ( '_' , '-' ) ] = v
   return fk
              return
  if attrvalue :
 if lang is None :
 if isinstance ( s , SafeData ) :
 attrs [ 'declared_fields' ] = OrderedDict ( current_fields )
                          out . write ( ' _(%s) ' % fmatch )
               self . _func_path = '.' . join ( [ func . __module__ , func . __name__ ] )
           fd = os . open ( new_file_name , ( os . O_WRONLY | os . O_CREAT | getattr ( os , 'O_BINARY' , 0 ) |  ( os . O_EXCL if not allow_overwrite else 0 ) ) )
    self . localize = localize
       for app_config in apps . get_app_configs ( ) :
 if decimal_pos is not None :
          if app_config . models_module is None :
   def __deepcopy__ ( self , memo ) :
   class IfParser ( object ) :
 insert = complain
 pass
 return AutoEscapeControlNode ( ( arg == 'on' ) , nodelist )
  s = subject [ p : i ]
 return form . save ( commit = commit )
 output = template_localtime ( output , use_tz = context . use_tz )
 location = params . pop ( 'LOCATION' , '' )
  except ValueError :
 return func
 output . append ( '\n' . join ( '  * %s' % e for e in errors ) )
              raise TemplateSyntaxError ( "%s requires %d arguments, %d provided" %  ( name , alen - dlen , plen ) )
          args = [ ]
  else :
         global template_source_loaders
          return self . _regex
                  self . _cull ( db , cursor , now )
 offset = 60 * int ( tzinfo [ 1 : 3 ] ) + offset_mins
 app_dirs . append ( old_app_dir )
 self . plural = lambda n : int ( n != 1 )
  else :
   if six . PY2 and value > sys . maxint :
              data = file . read ( chunk_size )
          warnings . warn ( '`request.REQUEST` is deprecated, use `request.GET` or '  '`request.POST` instead.' , RemovedInDjango19Warning , 2 )
          mod = import_module ( mod_name )
 from django . utils . encoding import force_bytes , force_text , force_str , iri_to_uri
          __str__ = serialize_headers
   if self . verbosity > 0 :
 while current_chunk != b'' :
 return force_text ( quote ( force_str ( url ) , force_str ( safe ) ) )
                  return debug . technical_500_response ( request , * sys . exc_info ( ) , status_code = 400 )
   def close ( self ) :
 trimmed = 'trimmed' in t . split_contents ( )
          def __getattr__ ( self , attr ) :
                  output = fp . read ( )
   if timeout is None :
  if best_doublecolon_end == len ( hextets ) :
              return
   DEFAULT_MAX_NUM = 1000
              continue
 expires = row [ 2 ]
  try :
 parser . add_argument ( '--traceback' , action = 'store_true' ,  help = 'Raise on exception' )
              self [ k ] = v
import argparse
 output = self . nodelist . render ( context )
  current_version = sys . version_info
  s2 = time . strftime ( fmt , ( year + 28 , ) + timetuple [ 1 : ] )
 parser . add_option ( '-v' , '--verbosity' , action = 'store' , dest = 'verbosity' , default = '1' ,  type = 'choice' , choices = [ '0' , '1' , '2' , '3' ] ,  help = 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output' )
              super ( CommandParser , self ) . error ( message )
  if self . obj is None :
   for ( field_name , field_value ) in six . iteritems ( d [ "fields" ] ) :
   def __call__ ( self , template_name , template_dirs = None ) :
          for elt in source :
 self . salt = force_str ( salt or  '%s.%s' % ( self . __class__ . __module__ , self . __class__ . __name__ ) )
  def items ( self ) :
     class FixedOffset ( tzinfo ) :
  else :
          if not fname . startswith ( self . _dir ) or not os . path . exists ( fname ) :
   def __iter__ ( self ) :
 if root :
   __all__ = ( 'BaseFormSet' , 'formset_factory' , 'all_valid' )
              raise PageNotAnInteger ( 'That page number is not an integer' )
 word_split_re = re . compile ( r'(\s+)' )
                  display_url = url
               if args :
     class SimpleUploadedFile ( InMemoryUploadedFile ) :
  except OverflowError :
   def write ( self , content ) :
 from django . utils import six
 for loader in self . _loaders :
  if number_equal > 40 :
                  file = BytesIO ( data [ 'content' ] )
              self . __name = name
                               last = root [ PREV ]
 from django . utils import six
  else :
   while '<' in value and '>' in value :
 if has_bz2 :
              return '%s\n\n%s' % ( usage , self . help )
  incremental = config . pop ( 'incremental' , False )
                      outfile . write ( data )
   def templatize ( src , origin = None ) :
              return self . _size
                          pass
          self . attrs = attrs or { }
          self . writer_enters ( )
              offset_mins = int ( tzinfo [ - 2 : ] ) if len ( tzinfo ) > 3 else 0
 return WithNode ( None , None , nodelist , extra_context = extra_context )
  else :
   if msgs :
    class EmailField ( CharField ) :
              if ( field == NON_FIELD_ERRORS and opts . error_messages and  NON_FIELD_ERRORS in opts . error_messages ) :
          return types . MethodType ( func , obj , obj . __class__ )
 from django . template . base import TemplateDoesNotExist
   else :
  return self . _queryset
 args . append ( work_file )
   def _cull ( self ) :
 super ( EmailMultiAlternatives , self ) . __init__ ( subject , body , from_email , to , bcc , connection , attachments , headers , cc )
  else :
    def activate ( language ) :
   def render ( self , context ) :
   else :
 import os
  nodelist = parser . parse ( ( 'endwith' , ) )
   def with_metaclass ( meta , * bases ) :
  except KeyError :
 while path :
          return Literal ( value )
          with self . mutex :
          final_attrs = dict ( self . attrs , type = self . input_type , name = self . name , value = self . choice_value )
 msg = "Unclosed tag '%s'. Looking for one of: %s " % ( command , ', ' . join ( parse_until ) )
  else :
 def __init__ ( self ) :
                   template = get_template ( template )
  return potfiles
   def non_form_errors ( self ) :
      def exec_ ( _code_ , _globs_ = None , _locs_ = None ) :
   class EmailBackend ( BaseEmailBackend ) :
                  form . fields [ ORDERING_FIELD_NAME ] = IntegerField ( label = _ ( 'Order' ) , required = False )
 for app in sorted ( commands_dict . keys ( ) ) :
                  return d [ key ]
              val = self [ key ]
 from django . utils import six
 try :
   else :
          return "<UTC>"
 return '%s. You passed in %r (%s)' % ( original , self . obj ,  type ( self . obj ) )
 self . choices = choices
  from django . core . management . commands . check import Command as CheckCommand
      def __init__ ( self ) :
 FILTER_ARGUMENT_SEPARATOR = ':'
  if localized_fields == ALL_FIELDS or ( localized_fields and f . name in localized_fields ) :
              self . msgmerge_options = self . msgmerge_options [ : ] + [ '--no-wrap' ]
  try :
              if ignore :
   else :
              parser = CommandParser ( self , prog = "%s %s" % ( os . path . basename ( prog_name ) , subcommand ) ,  description = self . help or None )
              self . _set ( key , pickled , timeout )
  else :
 values = _itervalues
  sites . append ( j )
          return EscapeBytes ( s )
              i += 1
  else :
   kwargs [ "required" ] = False
   class Loader ( BaseLoader ) :
              package_path = package . __path__
          try :
                              pending_references . setdefault ( refto , [ ] ) . extend ( refs )
          obj_list = self . target . resolve ( context , True )
   compile_func . __doc__ = func . __doc__
   @ property
          if not hasattr ( self , '_body' ) :
  def write ( self , outfile , encoding ) :
                          yield line
 super ( ComboField , self ) . clean ( value )
   def listdir ( self , path ) :
    @ property
                              message_context = message_context . strip ( '"' )
                              out . write ( blankout ( part , 'P' ) )
          if self . _cull_frequency == 0 :
   dirs . extend ( list ( settings . FIXTURE_DIRS ) )
          for var in self . vars :
                   def render ( self , context ) :
  if not dklen :
 try :
 self . default_locale_path = self . locale_paths [ 0 ]
   def __contains__ ( self , item ) :
  output_transaction = True
   class Loader ( BaseLoader ) :
 var_obj = None
  else :
  except StandardError as e :
   def read ( self , size = None ) :
   def as_json ( self , escape_html = False ) :
 kwargs = { }
              archive . extract ( filename , tempdir )
          if name == "_wrapped" :
                      self . stdout . write ( "\nCreated new merge migration %s" % writer . path )
 if self . parent_name . filters or isinstance ( self . parent_name . var , Variable ) :
                          from django . template . loader import get_template , select_template
              self . clear ( )
  except KeyError :
              return
   self . streaming_content = streaming_content
                 kwargs = match . groupdict ( )
    with self . _lock . writer ( ) :
   def remove ( self , item ) :
  write_pot_file ( potfile , msgs )
  else :
   save . alters_data = True
    return out . getvalue ( )
 self . __locale = to_locale ( language )
          format = force_str ( default or get_format ( 'TIME_INPUT_FORMATS' ) [ 0 ] )
                      if p . find ( ':_(' ) >= 0 :
          return all ( getattr ( self , attr ) == getattr ( other , attr )  for attr in [ 'level' , 'msg' , 'hint' , 'obj' , 'id' ] )
 self . xml . endDocument ( )
           kwarg = token_kwargs ( [ bit ] , parser )
             self . _request = request
  __all__ = ( 'WSGIServer' , 'WSGIRequestHandler' )
  return ExtendsNode ( nodelist , parent_name )
                          with open ( pythonrc ) as handle :
     if line [ - 1 : ] in ( b'\n' , b'\r' ) :
               self . json_kwargs [ 'separators' ] = ( ',' , ': ' )
   if self . interactive :
   def end_object ( self , obj ) :
 return content
   def initial_form_count ( self ) :
 if PY3 :
     def delete ( self , key , version = None ) :
    if six . PY2 :
  else :
 while ( i < num_existing ) and ( existing [ i ] [ : pflen ] == prefixed ) :
  class Module_six_moves_urllib_response ( _LazyModule ) :
                  p . feed ( data )
          raise InvalidTemplateLibrary ( "Template library %s does not have "  "a variable named 'register'" %  taglib_module )
                  new_obj = func ( obj , autoescape = context . autoescape , * arg_vals )
  self . _raw_ipv6 = False
 self . add_item_elements ( handler , item )
                return text
  for item in self . items :
 html = endtag_re . sub ( '' , html )
              self . _populate ( )
                  usage . append ( "" )
        from django . utils . encoding import force_unicode
 return parser . parse ( )
  else :
  except ImportError as e :
          return self . number < self . paginator . num_pages
              raise ValidationError ( self . message , code = self . code , params = params )
   def __get__ ( self , obj , tp ) :
 import datetime
              raise ValidationError (  self . error_messages [ 'max_whole_digits' ] ,  code = 'max_whole_digits' ,  params = { 'max' : ( self . max_digits - self . decimal_places ) } ,  )
 if safe and arg != ';' :
    else :
   def flatten ( self ) :
 compile_func = partial ( generic_tag_compiler ,  params = params , varargs = varargs , varkw = varkw ,  defaults = defaults , name = function_name ,  takes_context = takes_context , node_class = SimpleNode )
 __dispatch = None
   for cat in item [ 'categories' ] :
   def write_po_file ( self , potfile , locale ) :
 self . _errors . append ( form . errors )
  for path in format_module_path :
    def _is_shorthand_ip ( ip_str ) :
 from itertools import groupby , cycle as itertools_cycle
          parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '+' ,  help = 'One or more application label.' )
 cursor . execute ( "DELETE FROM %s WHERE expires < %%s" % table ,  [ connections [ db ] . ops . value_to_db_datetime ( now ) ] )
          bits = [ ]
  else :
                  exclude . append ( f . name )
     kwarg_re = re . compile ( r"(?:(\w+)=)?(.+)" )
    def time_format ( value , format = None , use_l10n = None ) :
              output = self . filter_expression . resolve ( context )
      if not hasattr ( self , '_ordering' ) :
   def __iter__ ( self ) :
 mail . mail_admins ( subject , message , fail_silently = True ,  html_message = html_message ,  connection = self . connection ( ) )
                    if int ( hextet , 16 ) < 0x0 or int ( hextet , 16 ) > 0xFFFF :
 return value and value [ 0 ] . upper ( ) + value [ 1 : ]
    return iri_to_uri ( resolver . _reverse_with_prefix ( view , prefix , * args , ** kwargs ) )
 if not self . is_bound :
 i = next_space_index ( subject , i )
 from django . core . files . utils import FileProxyMixin
 oldvalue = root [ RESULT ]
 if isinstance ( widget , NumberInput ) :
 self . _cull ( )
 s = StringIO ( )
              list_ = super ( MultiValueDict , self ) . __getitem__ ( key )
  from django . conf import settings
   end = rawdata [ k : endpos ] . strip ( )
   class BadHeaderError ( ValueError ) :
           all_unique_checks = set ( )
   def _set_post ( self , post ) :
          if k == 'fg' :
  import datetime
  else :
 from django . utils . module_loading import import_string
 from __future__ import unicode_literals
     ADDRESS_HEADERS = set ( [  'from' ,  'sender' ,  'reply-to' ,  'to' ,  'cc' ,  'bcc' ,  'resent-from' ,  'resent-sender' ,  'resent-to' ,  'resent-cc' ,  'resent-bcc' ,  ] )
 out = StringIO ( '' )
  except LookupError :
 return result
  else :
    for f in opts . many_to_many + opts . virtual_fields :
 def byte2int ( bs ) :
   def _ipython_pre_100 ( self ) :
 __iadd__ = complain
                  pass
 error_messages [ 'invalid' ] = error_message
 import warnings
                  pickled = self . _cache [ key ]
 from django . utils import six
          return get_supported_language_variant ( lang_code )
 def messages ( self ) :
                  raise ImproperlyConfigured ( 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.' )
                  codecs . lookup ( content_params [ 'charset' ] )
 self . _pk_field = pk = self . model . _meta . pk
 if quote_double_quotes :
    class CheckboxInput ( Widget ) :
                      if model in created_models :
   def __getinitargs__ ( self ) :
 try :
 parts . reverse ( )
 self . choice_label = force_text ( choice [ 1 ] )
  for cat in self . feed [ 'categories' ] :
 def ssi ( parser , token ) :
           state_frame = self . _get_context_stack_frame ( context )
      import threading
  from . base import CommandError
 inner = NonCapture ( result [ start : ] )
                          content_length = None
                                  d = d [ idx ]
              val = self . _cache . incr ( key , delta )
  def compile_func ( parser , token ) :
 renamed = False
                  final_attrs = dict ( final_attrs , id = '%s_%s' % ( id_ , i ) )
 from django . utils . module_loading import import_string
          if app_config . models_module is None :
   elif t . contents == 'comment' :
  else :
      try :
 from email . utils import formatdate
 return dot_re . sub ( char , src )
  return value
                      for cmatch in cmatches :
 import sys
  except ValidationError :
   def has_previous ( self ) :
                  new_mod = name
  if os . name == 'posix' :
 nodelist = parser . parse ( )
 if ( self . negate and val1 != val2 ) or ( not self . negate and val1 == val2 ) :
    def clear_script_prefix ( ) :
  filters = config . get ( 'filters' , None )
  if self . field . required and hasattr ( self . form , 'required_css_class' ) :
  else :
                  if error . code == code :
   if self . verbosity > 0 :
    return '\n' . join ( usage )
  mask = (  pyinotify . IN_MODIFY |  pyinotify . IN_DELETE |  pyinotify . IN_ATTRIB |  pyinotify . IN_MOVED_FROM |  pyinotify . IN_MOVED_TO |  pyinotify . IN_CREATE  )
                  if args :
     @ register . filter ( is_safe = True )
 logging . _acquireLock ( )
 special_floats = [ str ( pos_inf ) , str ( neg_inf ) , str ( nan ) ]
   response = self . apply_response_fixes ( request , response )
              if len ( x ) == 0 :
              data [ f . name ] = f . value_from_object ( instance )
 if self . verbatim and block_content == self . verbatim :
                  return False
  def add_arguments ( self , parser ) :
 from django . utils import six
  except ( ValueError , TypeError ) :
          raise TemplateSyntaxError ( "'ssi' tag takes one argument: the path to"  " the file to be included" )
  import codecs
              return apps . get_model ( model_identifier )
   def _construct_form ( self , i , ** kwargs ) :
  except TemplateSyntaxError as e :
 from django . utils . text import normalize_newlines , slugify as _slugify
   if not m and p < 0 :
  else :
      class DebugNodeList ( NodeList ) :
                  self . queryset . filter ( ** { key : pk } )
 import time
 pass
     def npgettext ( context , singular , plural , number ) :
 for medium in extend :
                          self . _close_files ( )
 parser . add_argument ( '-o' , '--output' , default = None , dest = 'output' ,  help = 'Specifies file to which the output is written.' )
                  self . stdout . write ( shutdown_message )
    if item [ 'enclosure' ] is not None :
  self . _post_render_callbacks = [ ]
 commands . update ( { name : app_config . name for name in find_commands ( path ) } )
      def filter ( self , record ) :
                    res = func ( * self . __args , ** self . __kw )
      input_type = 'url'
 self . queryset = queryset
              return _ ( 'PM' )
   def m ( self ) :
 def _get_val ( ) :
    def allow_lazy ( func , * resultclasses ) :
  func = getattr ( func , '_decorated_function' , func )
              raise ValidationError ( self . error_messages [ 'contradiction' ] , code = 'contradiction' )
 for func , unused in filter_expr . filters :
    def __setitem__ ( self , key , value ) :
              for date_key in date_keys :
                  self . locale_paths . append ( os . path . abspath ( 'locale' ) )
   none_model_fields = [ k for k , v in six . iteritems ( fields ) if not v ]
   def parse ( self ) :
 forms = ' ' . join ( form . as_p ( ) for form in self )
  value = data . get ( name )
 if result is not None :
              return { "xmlns" : self . ns , "xml:lang" : self . feed [ 'language' ] }
              self . first = parser . expression ( bp )
      def __init__ ( self , * args , ** kwargs ) :
              source , display_name = loader ( name , dirs )
 return '\n' . join ( statements )
   def __setstate__ ( self , obj_dict ) :
 from threading import local
 from django . utils . text import normalize_newlines
    @ register . filter ( is_safe = True , needs_autoescape = True )
           if is_aware ( value ) :
 nodelist = parser . parse ( ( 'endspaceless' , ) )
   try :
  in_tag = not in_tag
 from django . utils . deprecation import RemovedInDjango19Warning
 from django . utils . http import urlquote
  return EscapeBytes ( bytes ( s ) )
  if self . _read_started and not hasattr ( self , '_body' ) :
   def __getitem__ ( self , alias ) :
 self . write_migration_files ( changes )
 max_age = max ( 0 , delta . days * 86400 + delta . seconds )
           selected_choices = set ( force_text ( v ) for v in selected_choices )
 return not module_has_submodule ( package , module )
  elif message_context [ 0 ] == "'" :
              return func ( * args , ** kwargs )
  except VariableDoesNotExist :
          warnings . warn ( "IPAddressField has been deprecated. Use GenericIPAddressField instead." ,  RemovedInDjango19Warning )
 return '%s-%s-%s GMT' % ( rfcdate [ : 7 ] , rfcdate [ 8 : 11 ] , rfcdate [ 12 : 25 ] )
                 expires = typecast_timestamp ( str ( expires ) )
 return result
 if refto in seen_models :
 import warnings
                   self . literal = float ( var )
   class ImageFile ( File ) :
                  for plan_node in graph . forwards_plan ( node ) :
 self . _lock = _locks . setdefault ( name , RWLock ( ) )
   @ property
 runfastcgi ( args )
 args = [ ]
   def trim_whitespace ( s ) :
 self . m2m_data = m2m_data
  data = self . _prepare_data ( data )
                  return False
      return _trans . activate ( language )
  t = getattr ( _active , "value" , None )
 if not func_name :
  except ImportError :
 def __init__ ( self , connection_reset = False ) :
 if value in self . empty_values :
      widget = TextInput
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
                  continue
              raise TypeError ( 'formfield_callback must be a function or callable' )
              doy += 1
          out = [ str ( x ) for x in [ self . id , self . first , self . second ] if x is not None ]
  except IOError as e :
    code . interact ( local = imported_objects )
  if not model . _meta . proxy and router . allow_migrate ( using , model ) :
  self . nodelist = t . nodelist
 table = connections [ db ] . ops . quote_name ( self . _table )
                          if model not in app_list_value :
   response = response . render ( )
                      old = '#: ' + work_file [ 2 : ]
 self . sysid = sysid
     libraries = { }
 capfirst = allow_lazy ( capfirst , six . text_type )
              return 'rd'
              return list ( self . itervalues ( ) )
   class LimitedStream ( object ) :
  return result
  else :
   def get_limit_choices_to ( self ) :
 try :
 yield "# into your database."
 if isinstance ( template_name , ( list , tuple ) ) :
   def __eq__ ( self , other ) :
     @ register . filter ( is_safe = False )
          self . blocks [ name ] . append ( block )
  expires = None
              raise UnrecognizedArchiveFormat (  "Path not a recognized archive format: %s" % filename )
 def __init__ ( self , url , length , mime_type ) :
              self . _urlconf_module = self . urlconf_name
                  try :
 try :
 self . default_validators = validators . ip_address_validators ( protocol , unpack_ipv4 ) [ 0 ]
 targets = set ( '.' . join ( ( fixture_name , suffix ) ) for suffix in suffixes )
              if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
   class Tok ( object ) :
         @ python_2_unicode_compatible
   def reload ( self ) :
  del attr
   class Command ( TemplateCommand ) :
 git_log = subprocess . Popen ( 'git log --pretty=format:%ct --quiet -1 HEAD' ,  stdout = subprocess . PIPE , stderr = subprocess . PIPE ,  shell = True , cwd = repo_dir , universal_newlines = True )
              self . reader_leaves ( )
      widget = URLInput
    outdict [ name ] = value , params
      from django . utils import timezone
 if not hasattr ( mail , 'outbox' ) :
              choices . insert ( 0 , none_value )
 setattr ( base , new_method_name , old_method )
 mail = EmailMultiAlternatives ( subject , message , from_email , recipient_list ,  connection = connection )
          if isinstance ( value , datetime . datetime ) :
  return result
    def timeuntil ( d , now = None ) :
          parts = [ ]
  if var_obj is None :
  break
          if isinstance ( data , ( MultiValueDict , MergeDict ) ) :
 apps = { }
     if settings . DEBUG :
          if '__str__' not in klass . __dict__ :
          try :
 from django . utils . functional import allow_lazy , SimpleLazyObject
   self . year_none_value = ( 0 , empty_label [ 0 ] )
 result . append ( Group ( ( ( "%%(%s)s" % name ) , name ) ) )
        script_url = get_bytes_from_wsgi ( environ , 'SCRIPT_URL' , '' )
  klass . __unicode__ = klass . __str__
 self . can_read . release ( )
     root = config . get ( 'root' , None )
                              filemsg = ''
                  result . parent = self
  import contextlib
               return False
 pass
 def last ( value ) :
 from django . utils . deprecation import RemovedInDjango19Warning
              label_for = format_html ( ' for="{0}"' , self . id_for_label )
   try :
 self . negated = not self . negated
    def ugettext ( message ) :
  try :
            obj = form . save ( commit = False )
                  msg += " The domain name provided is not valid according to RFC 1034/1035."
 executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )
 result . _choices = copy . deepcopy ( self . _choices , memo )
 month = months [ date . month - 1 ]
              params = [ ]
  if not isinstance ( var , six . string_types ) :
                   writer = MigrationWriter ( migration )
                  old_method_name = renamed_method [ 0 ]
 self . _upload_handlers = upload_handlers
 from functools import reduce
  else :
    def ungettext ( singular , plural , number ) :
   @ python_2_unicode_compatible
 @ stringfilter
           self . verbosity = options . get ( 'verbosity' )
  del attr
 now = timezone . now ( )
                        self . prepend_token ( token )
  token = Token ( TOKEN_COMMENT , content )
  msgs = msgs . replace ( old , new )
          self . msg = msg
  from django . apps import apps
 iterkeys = _iterkeys
       def __init__ ( self , input_formats = None , * args , ** kwargs ) :
      pytz = None
 try :
     class RequireDebugFalse ( logging . Filter ) :
                  raise
  except KeyError :
     def is_library_missing ( name ) :
 if i >= 0 :
  return errors
  elif ch == '(' :
          self . _assert_mutable ( )
 self . allow_empty_file = kwargs . pop ( 'allow_empty_file' , False )
                  if self . cleaned_data . get ( name ) is not None and self . cleaned_data [ name ] . _state . adding :
 if ip_str . count ( '::' ) == 1 :
  def write ( self , outfile , encoding ) :
  for part in plural :
 handler . endElement ( "feed" )
  else :
  elif token . token_type == 2 :
                      raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
 return self . errors . get ( NON_FIELD_ERRORS , self . error_class ( error_class = 'nonfield' ) )
 import tempfile
   data = { }
 if self . body :
          self . _delete ( self . _key_to_file ( key , version ) )
  remove_tags = allow_lazy ( remove_tags , six . text_type )
              return func
              resolver = get_ns_resolver ( ns_pattern , resolver )
                  digits = decimals
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Running migrations:" ) )
  want_unicode = False
    def clean ( self ) :
              return self . clear ( )
  return format_html ( '<option value="{0}"{1}>{2}</option>' ,  option_value ,  selected_html ,  force_text ( option_label ) )
  from datetime import datetime
 self . view_name = ':' . join ( self . namespaces + [ view_path ] )
 use_null_fallback = True
  else :
          if not self . _is_rendered :
  sys . modules [ __name__ + ".moves.urllib_request" ] = sys . modules [ __name__ + ".moves.urllib.request" ] = Module_six_moves_urllib_request ( __name__ + ".moves.urllib.request" )
 def __new__ ( cls , fget = None , fset = None , fdel = None , doc = None ) :
 return super ( SlugField , self ) . clean ( value )
   if os . name == 'nt' :
  return s
       def __init__ ( self , * args , ** kwargs ) :
                          date = form . cleaned_data [ unique_for ]
   else :
 def spaceless ( parser , token ) :
    def sql_delete ( app_config , style , connection , close_connection = True ) :
          self . max_length = kwargs . pop ( 'max_length' , None )
              self . to = [ ]
  self = tuple . __new__ ( cls , * args , ** kwargs )
 if not rest :
              return False
  super ( Textarea , self ) . __init__ ( default_attrs )
  elif self . argv [ 1 : ] in ( [ '--help' ] , [ '-h' ] ) :
 return datetime . date ( ** kw )
          try :
 if base_url is None :
 self . first = True
      help = "Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed."
              value = var . resolve ( context , True )
              _active . value = self . old_timezone
 parser . add_argument ( '--template' ,  help = 'The path or URL to load the template from.' )
      pass
              if not self . close_called :
  else :
 exc_value . __cause__ = exc
              output . append ( '* %s' % field )
  closing_tag , tagname , self_closing = tag . groups ( )
              hextets [ index ] = '0'
              if escaped :
                  block_content = token_string [ 2 : - 2 ] . strip ( )
  def add_arguments ( self , parser ) :
 klass . prefix = '\n' + find_indentation ( node )
 super ( QueryDict , self ) . appendlist ( key , value )
    if 'private' in cc and 'public' in kwargs :
   base36 = [ ]
              yield key
          raise ValueError ( "Base36 input too large" )
  if not value or '@' not in value :
   def validate_key ( self , key ) :
 self . msgattrib_options = self . msgattrib_options [ : ] + [ '--no-location' ]
 p1 , p2 = urlparse ( url1 ) , urlparse ( url2 )
  else :
          raise self . exception
              thefile = self . file
          from django . db import models
 self . _regex_dict = { }
          m = int ( d ) - d
                      try :
  else :
          try :
  except AttributeError :
                      filename = filename . encode ( 'utf-8' )
 if refto in known_models :
   class TranslatorCommentWarning ( SyntaxWarning ) :
 def wrapper ( * args , ** kwargs ) :
 nofollow_attr = ''
                      found = False
 from django . core import signing
  if failures :
   def has_key ( self , key ) :
   potfile = os . path . join ( self . locale_dir , '%s.pot' % str ( domain ) )
          if kwargs . pop ( 'ipv6' , False ) :
   def display ( self ) :
 return super ( QueryDict , self ) . setlistdefault ( key , default_list )
 t = super ( SafeBytes , self ) . __add__ ( rhs )
               settings . INSTALLED_APPS
  for template_dir in template_dirs :
                          self . stdout . write ( 'ignoring directory %s\n' % dirname )
            if initial == 'False' :
 return form
 self . _add_fallback ( )
                      call_command ( "createsuperuser" , interactive = True , database = options [ 'database' ] )
                  raise ValidationError ( self . error_messages [ 'invalid_date' ] , code = 'invalid_date' )
                  content = ''
 input_formats = formats . get_format_lazy ( 'TIME_INPUT_FORMATS' )
          vary_headers = [ ]
              stamp = time . mktime ( tt )
 for i , item in enumerate ( values ) :
  request_started = Signal ( )
          module = _import_module ( self . mod )
   if self . verbosity >= 1 :
  except TemplateDoesNotExist as e :
  def get_template_sources ( self , template_name , template_dirs = None ) :
     if not settings . is_overridden ( 'TEST_RUNNER' ) :
      Signer = import_string ( settings . SIGNING_BACKEND )
  except StandardError as e :
                  if bf_errors :
 from django . forms . utils import flatatt , to_current_timezone
  elif not options [ "socket" ] and not options [ "host" ] and not options [ "port" ] :
  now = now . replace ( microsecond = 0 )
  return format_html (  '<ul class="errorlist">{0}</ul>' ,  format_html_join ( '' , '<li>{0}{1}</li>' , ( ( k , force_text ( v ) ) for k , v in self . items ( ) ) )  )
  def __init__ ( self , * args , ** kwargs ) :
 return self . _handle_object ( node )
     class Promise ( object ) :
 for child in node . childNodes :
  except KeyError :
  return response
  if len ( initial ) != len ( data ) :
   USE_INOTIFY = False
  return True
     def prepare_js_for_gettext ( js ) :
 COMMENT_TAG_START = '{#'
   def signature ( self , value ) :
   except ValueError :
 if qs . _result_cache is not None :
  self . style = no_style ( )
  elif options [ "socket" ] and not options [ "host" ] and not options [ "port" ] :
          timezone = get_current_timezone ( )
 content = template . render ( context )
   def widget_attrs ( self , widget ) :
          key = self . make_key ( key , version = version )
    return value if six . PY2 else value . encode ( ISO_8859_1 )
     return Operator
          d = datetime . datetime ( d . year , d . month , d . day )
    if commit :
 def COOKIES ( self ) :
              cursor . execute ( "SELECT cache_key FROM %s "  "WHERE cache_key = %%s and expires > %%s" % table ,  [ key , connections [ db ] . ops . value_to_db_datetime ( now ) ] )
  else :
  return form
 return ''
 from django . db import DEFAULT_DB_ALIAS
          return None
 def wordcount ( value ) :
 self . content_type = content_type
 if self . waiting_writers != 0 :
              key += tuple ( type ( v ) for v in args )
 run ( self . addr , int ( self . port ) , handler ,  ipv6 = self . use_ipv6 , threading = threading )
                  if e . errno == errno . ENOENT :
                          continue
 asvar = None
 warnings . warn ( "'get_cache' is deprecated in favor of 'caches'." ,  RemovedInDjango19Warning , stacklevel = 2 )
   @ content . setter
 output = [ ]
              processors = tuple ( processors )
 class RegexValidator ( object ) :
              raise
  import datetime
       expression = parser . compile_filter ( var_name +  VARIABLE_ATTRIBUTE_SEPARATOR +  bits [ 3 ] )
              value = True
          handler . addQuickElement ( "title" , self . feed [ 'title' ] )
 code = 'min_value'
    class cached_property ( object ) :
              new_name = 'field%s' % new_name
 from django . utils . functional import lazy
   return total_forms
  if not host_validation_re . match ( host ) :
              if not hasattr ( f , 'save_form_data' ) :
  else :
  import mimetypes
 try :
  value = smart_text ( value ) . strip ( )
     class BaseContext ( object ) :
 guessed_filename = params . get ( 'filename' ) or used_name
 return InMemoryUploadedFile (  file = self . file ,  field_name = self . field_name ,  name = self . file_name ,  content_type = self . content_type ,  size = file_size ,  charset = self . charset ,  content_type_extra = self . content_type_extra  )
          return _generate_cache_key ( request , method , headerlist , key_prefix )
 basedir = os . path . join ( os . path . dirname ( potfile ) , locale , 'LC_MESSAGES' )
      smart_str = smart_text
 self . size = len ( content )
  except UnicodeEncodeError :
 return dict ( ( k , repr ( v ) ) for k , v in module . __dict__ . items ( ) if not omittable ( k ) )
  return base , ext
 from django . utils . encoding import smart_text , force_text
              return repr ( dict ( self ) )
 simple_url_2_re = re . compile ( r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$' , re . IGNORECASE )
  try :
 from django . utils . encoding import force_text
                  self . appendlist ( force_text ( key , encoding , errors = 'replace' ) ,  force_text ( value , encoding , errors = 'replace' ) )
  else :
 if os . path . isdir ( os . path . join ( 'conf' , 'locale' ) ) :
  except ( ValueError , TypeError ) :
    class DefaultStorage ( LazyObject ) :
 converter = getattr ( self , converter )
              raise DisallowedRedirect ( "Unsafe redirect to URL with protocol '%s'" % parsed . scheme )
 parser = self . create_parser ( argv [ 0 ] , argv [ 1 ] )
  if settings . USE_THOUSAND_SEPARATOR :
              r = o . isoformat ( )
 return value . strftime ( format )
      help = "Prints the CREATE TABLE SQL statements for the given app name(s)."
     def _handle_m2m_field_node ( self , node , field ) :
              db = router . db_for_write ( self . cache_model_class )
              html_class_attr = ''
   def z ( self ) :
              try :
    def save_instance ( form , instance , fields = None , fail_message = 'saved' ,  commit = True , exclude = None , construct = True ) :
  def __init__ ( self , name , value , attrs , choices ) :
  po_path = os . path . join ( dirpath , f )
 if i < 36 ** factor :
 if os . path . isfile ( fext ) :
              raise TypeError ( 'other_dict must be a mapping (dictionary-like) object.' )
 from django . utils import datetime_safe
              fext = f + ext
    def mail_managers ( subject , message , fail_silently = False , connection = None ,  html_message = None ) :
               MAXSIZE = int ( ( 1 << 31 ) - 1 )
                  os . _exit ( 0 )
     ESCAPE_MAPPINGS = {  "A" : None ,  "b" : None ,  "B" : None ,  "d" : "0" ,  "D" : "x" ,  "s" : " " ,  "S" : "x" ,  "w" : "x" ,  "W" : "!" ,  "Z" : None ,  }
 return self . incr ( key , - delta , version = version )
   def _prepare_data ( self , data ) :
 for site in sites :
   if hasattr ( test_runner_class , 'add_arguments' ) :
                              t = get_template ( file_name )
   if args [ 1 ] [ 0 ] == '2' :
 version = get_complete_version ( version )
  hex_format_string = "%%0%ix" % ( hlen * 2 )
                              message_context = message_context . strip ( "'" )
  for uclass , unique_check in all_unique_checks :
    new_modules = module_values - _cached_modules
           return s
     def literals ( choices , prefix = "" , suffix = "" ) :
  builtins = [ ]
 close = True
  result = user_function ( * args , ** kwds )
    obj = base . build_instance ( Model , data , db )
  import copy
          attrs = super ( FloatField , self ) . widget_attrs ( widget )
 val = self . _cache . get ( key )
   def tokenize ( self ) :
   else :
                  output . append ( format_html ( '<optgroup label="{0}">' , force_text ( option_value ) ) )
    def quote_etag ( etag ) :
  except ( TypeError , VariableDoesNotExist ) :
  except Exception as e :
 if not lib :
 if count2 != 0 :
  return func ( self . _wrapped , * args )
              try :
                  exhaust ( self . _input_data )
              fd , name = tempfile . mkstemp ( suffix = suffix , prefix = prefix , dir = dir )
   def render ( self , context ) :
              return None
 self . endChannelElement ( handler )
 parser . delete_first_token ( )
    chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
              start = match . start ( )
                  msg += " You may need to add %r to ALLOWED_HOSTS." % domain
 if str_number [ 0 ] == '-' :
                      shutil . copymode ( old_path , new_path )
     class datetime ( real_datetime ) :
 from __future__ import unicode_literals
   def handle_app_config ( self , app_config , ** options ) :
 from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
  except NotImplementedError :
   raise KeyError ( key )
 d = data . get ( self . day_field % name )
      regex = re . compile (  r'^(?:[a-z0-9\.\-]*)://'  r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|'  r'localhost|'  r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|'  r'\[?[A-F0-9]*:[A-F0-9:]+\]?)'  r'(?::\d+)?'  r'(?:/?|[/?]\S+)$' , re . IGNORECASE )
      status_code = 304
 if kwargs :
 self . verbosity = options . get ( 'verbosity' )
                          raise
  elif self . reason_phrase is None :
    @ deconstructible
     return d
                  if dirname . startswith ( '.' ) or dirname == '__pycache__' :
  if self . paginator . count == 0 :
  def __init__ ( self , queryset , empty_label = "---------" , cache_choices = None ,  required = True , widget = None , label = None , initial = None ,  help_text = '' , to_field_name = None , limit_choices_to = None ,  * args , ** kwargs ) :
 from django . core . files . move import file_move_safe
 from django . utils import datetime_safe
 if not cls :
          key = self . make_key ( key , version = version )
from __future__ import absolute_import
 import smtplib
       except self . LibraryValueNotFoundException :
 if not chunk_size :
 if use_natural_keys :
          return input_val
                  r = r [ : 23 ] + r [ 26 : ]
 from django . core import urlresolvers
   self . _handler_class = None
  else :
              result . setFormatter ( formatter )
     class BaseTemporalField ( Field ) :
    def parse ( self , parse_until = None ) :
              self . stderr . write ( msg )
   @ receiver ( setting_changed )
   def tag_exists ( self , tag ) :
  try :
    class UnrecognizedArchiveFormat ( ArchiveException ) :
          language_code = get_language ( )
   elif t . token_type == TOKEN_VAR :
 from django . db . migrations . loader import MigrationLoader
  extra_classes = set ( extra_classes or [ ] )
   class Command ( TemplateCommand ) :
              with codecs . open ( sql_file , 'r' , encoding = settings . FILE_CHARSET ) as fp :
 from io import BytesIO , StringIO , UnsupportedOperation
  else :
              m = self . CONVERT_PATTERN . match ( value )
              return time_format ( value , arg )
     @ register . filter ( is_safe = True )
  return super ( ModelMultipleChoiceField , self ) . prepare_value ( value )
  return get_callable ( callback ) , { }
  if m :
 self . parent_name = parent_name
 deprecation_warning = renamed_method [ 2 ]
           name , val = forbid_multi_line_headers ( name , val , 'ascii' )
 s . serialize ( queryset , ** options )
              errors . update ( kwargs [ 'error_messages' ] )
   if target is None :
 valid = True
 def ljust ( value , arg ) :
  for path_to_remove in self . paths_to_remove :
     except OSError as e :
  from django . core . management . base import BaseCommand , CommandError
              operations . extend ( smigration . operations )
 @ stringfilter
      input_type = 'checkbox'
          return VariableNode ( filter_expression )
   else :
              pass
 g = generator . BytesGenerator ( fp , mangle_from_ = False )
     if type ( field_type ) is tuple :
 import re
          return getattr ( caches [ DEFAULT_CACHE_ALIAS ] , name )
  else :
 def __init__ ( self , flo , chunk_size = 64 * 1024 ) :
              now = now . decode ( 'utf-8' )
                              if self . verbosity >= 2 :
 from django . utils . translation import ugettext_lazy , ugettext as _ , pgettext
      termios = None
                  raise
 return super ( QueryDict , self ) . setdefault ( key , default )
  from django . db import models
 trail = punctuation + trail
  import base64
    def render ( self , context ) :
          return "<IfEqualNode>"
 from __future__ import unicode_literals
 hidden_widget = field . hidden_widget ( )
          if isinstance ( regex , six . string_types ) :
 comment_notes . extend ( field_notes )
 if hasattr ( rel_model , 'natural_key' ) and rel_model != model :
    result = ":" . join ( hextets )
 self . resolver_match = None
   def save_existing_objects ( self , commit = True ) :
          return self . _name
          return value
  self . buffer = sio . read ( )
 from django . forms . utils import ErrorList
   def dst ( self , dt ) :
   def handle_noargs ( self , ** options ) :
 if isinstance ( template , ( list , tuple ) ) :
 from django . utils import six
              self . cookies [ key ] [ 'max-age' ] = max_age
 import sys
      def inner ( self , * args ) :
                          continue
   if not self . dry_run :
   stream = LazyStream ( ChunkIter ( self . _input_data , self . _chunk_size ) )
              return QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
 counters [ i ] += chunk_length
          self . _current = None
   def get_available_name ( self , name ) :
          val . encode ( 'ascii' )
 return True
              return data
              raise ValueError ( 'ModelForm has no model class specified.' )
  def __init__ ( self , queryset , cache_choices = None , required = True ,  widget = None , label = None , initial = None ,  help_text = '' , * args , ** kwargs ) :
   else :
          idstring = ''
  return '&' . join ( output )
 usage . append ( style . NOTICE ( "[%s]" % app ) )
              return cache [ mem_args ]
                  key += tuple ( type ( v ) for k , v in sorted_items )
    class SafeData ( object ) :
          if value in self . empty_values :
      try :
                              return True
  return result
 dig2 . update ( dig1 . digest ( ) )
 def __init__ ( self , timezone ) :
 kwargs = kwargs or { }
   self . requires_system_checks = (  self . requires_system_checks if has_new_option else  self . requires_model_validation if has_old_option else  True )
 if ( connections [ db ] . features . needs_datetime_string_cast and not  isinstance ( current_expires , datetime ) ) :
                    css_classes = bf . css_classes ( )
   return response
  return six . text_type ( name )
from __future__ import unicode_literals
 s = s . replace ( '\t' , '\\t' )
                  return None
      def ungettext ( singular , plural , number ) :
           tupl = d . as_tuple ( )
              url = reverse ( view_name , args = args , kwargs = kwargs , current_app = context . current_app )
  problem_fields = [  field  for model in apps . get_models ( ** kwargs )  if app_configs is None or model . _meta . app_config in app_configs  for field in model . _meta . local_fields  if isinstance ( field , models . BooleanField ) and not field . has_default ( )  ]
          if limit is None or len ( x ) <= limit :
 return ''
 condition = TemplateIfParser ( parser , bits ) . parse ( )
                  if filename and not os . path . exists ( filename ) :
 yield "#"
 if fg in color_names :
                  msg . attach ( body_msg )
 output = force_text ( output )
 return result
      is_usable = True
 sublist = ''
          return self
 if end_index is None and s_len > truncate_len :
 number_equal = len ( [ current_number for current_number in self . _unget_history  if current_number == num_bytes ] )
                  pass
                           context_match = context_re . match ( imatch . group ( 2 ) )
              return self . empty_form . media
 def urlconf_module ( self ) :
   return value
              cursor . execute ( 'DELETE FROM %s' % table )
 text_kwargs = dict ( ( k , force_text ( v ) ) for ( k , v ) in kwargs . items ( ) )
                          if f == '__pycache__' :
  finally :
  else :
          return strftime ( self , fmt )
  val1 = parser . compile_filter ( bits [ 1 ] )
             models . Model . save_base ( self . object , using = using , raw = True )
                   best_doublecolon_len = doublecolon_len
                      continue
              return parent
          raise TemplateSyntaxError ( "%r tag takes at least one argument: the name of the template to be included." % bits [ 0 ] )
 for char in self . add_truncation_text ( '' , truncate ) :
 return ( ret == 0 )
 from django . utils . encoding import force_text
 from django . utils import six
          for node in self . nodelist :
  except ImportError :
 changed = False
 return self . _base_set ( 'add' , key , value , timeout )
   def get_backend_timeout ( self , timeout = DEFAULT_TIMEOUT ) :
              domains = ( 'django' , )
 for k in keys :
    if self . verbosity >= 2 and not fixture_files_in_dir :
                   raise
 TOKEN_VAR = 1
                  self . interesting = _html_parser . interesting_cdata
 message = _ ( 'Ensure this value is %(limit_value)s (it is %(show_value)s).' )
 self . auto_id = auto_id
    def find_command ( cmd , path = None , pathext = None ) :
                      try :
  except ( OverflowError , ValueError ) :
 os . close ( fd )
              conf = settings . CACHES [ backend ]
  return result
  return meta ( name , bases , d )
  except Exception :
 value = normalize_newlines ( value )
          return self . __dt ,
              continue
              with io . open ( potfile , 'r' , encoding = 'utf-8' ) as fp :
          return self . name
 self . _base_set ( 'set' , key , value , timeout )
    def configure_formatter ( self , config ) :
              obj = self . _new_instance ( self . children , self . connector ,  self . negated )
   if pos >= last :
  else :
              file . close ( )
 return Page ( * args , ** kwargs )
              response . content = b''
          arg = ugettext ( 'yes,no,maybe' )
          return len ( self . content )
                  result |= ord ( x ) ^ ord ( y )
 if token . contents == 'else' :
              return self . _caches . caches [ alias ]
  return not ( ( converter ( opts . db_table ) in tables ) or  ( opts . auto_created and converter ( opts . auto_created . _meta . db_table ) in tables ) )
      class BaseInlineFormSet ( BaseModelFormSet ) :
 pieces = accept_language_re . split ( lang_string . lower ( ) )
 day_field = '%s_day'
   if hidden_fields :
 def phone2numeric_filter ( value ) :
    def get_serializer ( format ) :
          cc = { }
          nesting = 1
              output . append ( options )
 connection = connection or get_connection ( username = auth_user ,  password = auth_password ,  fail_silently = fail_silently )
 self . value = value
 parser . add_argument ( '--no-initial-data' , action = 'store_false' , dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
 self . proxy = False
 return False
          raise MultiPartParserError ( 'multipartparser.exhaust() was passed a non-iterable or stream parameter' )
          self . name = name
   return inner
   return ''
  self . file_path = os . path . abspath ( self . file_path )
                  data = data ( )
 filename = os . path . basename ( path )
 default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the available choices.' ) ,  'invalid_list' : _ ( 'Enter a list of values.' ) ,  }
              sites . append ( site )
 best_doublecolon_start = - 1
          self . _archive . printdir ( * args , ** kwargs )
      try :
  for field_node in node . getElementsByTagName ( "field" ) :
  as_form = True
  if kwargs is None :
 return j
                      with connection . cursor ( ) as cursor :
                          continue
  if i >= self . initial_form_count ( ) and not form . has_changed ( ) :
          key = self . make_key ( key , version = version )
 offset = self . __offset . seconds // 60
  raise ValueError (  "'%s.%s' has no ForeignKey to '%s.%s'."  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
          csrf_token = context . get ( 'csrf_token' , None )
  if hasattr ( parent , 'render' ) :
 for line in msgs . split ( '\n' ) :
  def __init__ ( self , content = b'' , * args , ** kwargs ) :
 from django . core . management . sql import check_for_migrations
          if escaped :
   def __deepcopy__ ( self , memo ) :
                      domain = domain . encode ( 'idna' ) . decode ( 'ascii' )
          super ( SortedDict , self ) . __delitem__ ( key )
              raise CommandError ( "Can't resolve dependencies for %s in serialized app list." %  ', ' . join ( '%s.%s' % ( model . _meta . app_label , model . _meta . object_name )  for model , deps in sorted ( skipped , key = lambda obj : obj [ 0 ] . __name__ ) )  )
  self . _lib = library
 @ wraps ( func )
   name = '.' . join ( parts )
      smart_str = smart_bytes
              handler . addQuickElement ( "summary" , item [ 'description' ] , { "type" : "html" } )
              raise TypeError ( "update expected at most 1 arguments, got %d" % len ( args ) )
 from django . utils . timezone import template_localtime
  __all__ = ( 'UploadedFile' , 'TemporaryUploadedFile' , 'InMemoryUploadedFile' ,  'SimpleUploadedFile' )
              try :
    except http . Http404 as e :
          if app_config . models_module is None :
  import time
   next = advance_iterator
 parser . add_argument ( '--testrunner' ,  action = 'store' , dest = 'testrunner' ,  help = 'Tells Django to use specified test runner class instead of '  'the one specified by the TEST_RUNNER setting.' ) ,
  return self . __cast ( ) < other
 db = router . db_for_write ( self . cache_model_class )
          length = int ( arg )
              formfield = formfield_callback ( f , ** kwargs )
 return s
              match = kwarg_re . match ( bit )
     db = options . get ( 'database' )
 return changeset
 import unicodedata
              return ZERO
 if num_entries < self . _max_entries :
 return '%02d' % self . data . minute
 program_options = [ '--check-format' ]
          return getattr ( self . _caches , 'caches' , { } ) . values ( )
 if not template_name_list :
 all_issues = checks . run_checks ( app_configs = app_configs , tags = tags )
 if obj_pk is not None :
  self . _callback_str = prefix + '.' + self . _callback_str
          return 0
          return "<IfNode>"
 if not cleaned_line :
 input_type = None
              msg += ending
 _empty_value = ''
    Field . __init__ ( self , required , widget , label , initial , help_text ,  * args , ** kwargs )
                    output . append ( str_hidden )
 re_camel_case = re . compile ( r'(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))' )
from __future__ import unicode_literals
           class LocalTimezone ( tzinfo ) :
 import warnings
                      raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % (  migration_name , app_label ) )
  return mark_safe ( '\n' . join ( inputs ) )
 self . message_context = None
   return self . parent_instance
          iteritems = _iteritems
                  self . interesting = re . compile ( r'</\s*%s\s*>' % tag . lower ( ) , re . I )
   def add_initial_prefix ( self , field_name ) :
                  bits . append ( None )
              new_name += '_field'
 self . filters . update ( lib . filters )
          return self . render ( )
           patterns = getattr ( self . urlconf_module , "urlpatterns" , self . urlconf_module )
              end , next = boundary
 return False
  try :
              locales = locale or all_locales
          self . db_table = table
    ctypes , opts = parse_header ( content_type . encode ( 'ascii' ) )
              return func ( * self . __args , ** self . __kw )
   def value_from_datadict ( self , data , files , name ) :
 char2number = { 'a' : '2' , 'b' : '2' , 'c' : '2' , 'd' : '3' , 'e' : '3' , 'f' : '3' ,  'g' : '4' , 'h' : '4' , 'i' : '4' , 'j' : '5' , 'k' : '5' , 'l' : '5' , 'm' : '6' ,  'n' : '6' , 'o' : '6' , 'p' : '7' , 'q' : '7' , 'r' : '7' , 's' : '7' , 't' : '8' ,  'u' : '8' , 'v' : '8' , 'w' : '9' , 'x' : '9' , 'y' : '9' , 'z' : '9' }
 if self . activated :
              now = datetime . now ( )
              self . regex = re . compile ( self . regex , self . flags )
          return tuple ( a for a in WRAPPER_ASSIGNMENTS if hasattr ( fn , a ) )
     def _bin_to_long ( x ) :
 self . can_write = threading . Semaphore ( 0 )
      def load_handler ( path , * args , ** kwargs ) :
           from django . conf import settings , global_settings
   def javascript_quote ( s , quote_double_quotes = False ) :
 old_field_name = None
 pk_field = self . model . _meta . pk
 class URLValidator ( RegexValidator ) :
  if hasattr ( mw_instance , 'process_view' ) :
          if 'forloop' in context :
          if location is None :
                  obj = mark_safe ( new_obj )
    def readline ( self , * args , ** kwargs ) :
 if app_output :
 self . object_name = 'CacheEntry'
    @ register . filter ( is_safe = True )
  except KeyError :
   def get ( self , key , default = None , version = None ) :
      def __str__ ( self ) :
 def wrapper ( cls ) :
              if not isinstance ( data , basestring ) :
 final_attrs = self . build_attrs ( attrs )
              return self . data . hour - 12
  backend_cls = import_string ( backend )
 yield ( tok . name , toktext )
 salt = force_bytes ( salt )
   self . _rollback = len ( boundary ) + 6
  return retval
    def check_errors ( fn ) :
              response_headers . append ( ( str ( 'Set-Cookie' ) , str ( c . output ( header = '' ) ) ) )
  from django . utils import six
 if isinstance ( attr , MovedModule ) :
              k , v = x . split ( '=' , 1 )
          lang = get_language ( )
       if transaction . get_autocommit ( self . using ) :
              self . input_type = attrs . pop ( 'type' , self . input_type )
     @ classmethod
 from django . utils import six
  except Exception as e :
                      app = 'django'
              return
                   data = BytesIO ( self . _body )
                  error_text = ERRORS [ e . errno ]
 import io
              bytes_read += len ( bytes )
          evens = sum ( int ( c ) for c in candidate [ - 1 : : - 2 ] )
 def __init__ ( self , producer , length = None ) :
          return '' . join ( self . fed )
  if isinstance ( s , bytes ) :
              self . setlistdefault ( key ) . append ( value )
              weight += 2
 def striptags ( value ) :
 self . managed = True
          from django . core . urlresolvers import reverse , NoReverseMatch
   def pop ( self , idx = - 1 ) :
   def handle ( self , * args , ** options ) :
  if format not in _serializers :
     class Lexer ( object ) :
              final_output . append ( '-- The following references should be added but depend on non-existent tables:' )
                  expiry = self . get_backend_timeout ( timeout )
          os . remove ( old_file_name )
               palette . update ( PALETTES [ part ] )
                  pass
              return self . _truncate_html ( length , truncate , self . _wrapped , length , True )
  if response . has_header ( 'Vary' ) :
                              self . stdout . write ( " [X] %s" % title )
 def __init__ ( self , * dicts ) :
              if self . to_field :
  messages = { }
 value . configurator = self
 import json
  def add_arguments ( self , parser ) :
  if data :
  return klass
  for app_name , model_list in manifest . items ( ) :
   def value_from_datadict ( self , data , files , name ) :
              template , origin = self . find_template ( template_name , template_dirs )
  for i , ( seconds , name ) in enumerate ( chunks ) :
 from django . utils . timezone import utc , get_fixed_timezone
          self . max_length , self . min_length = max_length , min_length
              f . close ( )
 from django . utils import timezone
      def filter ( self , record ) :
   executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )
                      with transaction . atomic ( using = db ) :
   def __contains__ ( self , item ) :
  else :
   if formfield :
   class Tags ( object ) :
  att_name , params , notes = self . normalize_col_name (  column_name , used_column_names , is_relation )
 become_daemon ( our_home_dir = options [ "workdir" ] , ** daemon_kwargs )
   if hasattr ( f , 'seek' ) and callable ( f . seek ) :
  import datetime
 for operation in migration . operations :
              name = content . name
          self . takes_context = takes_context
 from django . forms . widgets import (  TextInput , NumberInput , EmailInput , URLInput , HiddenInput ,  MultipleHiddenInput , ClearableFileInput , CheckboxInput , Select ,  NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput ,  SplitDateTimeWidget , SplitHiddenDateTimeWidget , FILE_INPUT_CONTRADICTION  )
 default_error_messages = {  'invalid_date' : _ ( 'Enter a valid date.' ) ,  'invalid_time' : _ ( 'Enter a valid time.' ) ,  }
    parts = config_string . lower ( ) . split ( ';' )
              self . _delete ( key )
 self . name = name
 bmatch = block_re . match ( t . contents )
 def fset ( instance , value , name = fset . __name__ ) :
 try :
   return cls
 self . blocks = dict ( ( n . name , n ) for n in nodelist . get_nodes_by_type ( BlockNode ) )
   _default = None
   def parse_name ( self , fixture_name ) :
                  self . stdout . write ( self . style . MIGRATE_LABEL ( "  Synchronize unmigrated apps: " ) + ( ", " . join ( executor . loader . unmigrated_apps ) ) )
          super ( StringOrigin , self ) . __init__ ( UNKNOWN_SOURCE )
          change = fn ( )
          self . command_stack . pop ( )
          raise TemplateSyntaxError ( "'cycle' tag requires at least two arguments" )
  kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )
   def is_checked ( self ) :
 s = Select ( choices = choices )
     self . _post = QueryDict ( '' , mutable = True )
          tag , this_value_expr , max_value_expr , max_width = bits
  _error_files = [ ]
  except NameError :
 shell = IPShell ( argv = [ ] )
          super ( DTDForbidden , self ) . __init__ ( )
    @ python_2_unicode_compatible
  return inner
      EscapeString = EscapeText
  urlunquote_plus = allow_lazy ( urlunquote_plus , six . text_type )
              self . _non_form_errors = self . error_class ( e . error_list )
          cache = caches [ settings . CACHE_MIDDLEWARE_ALIAS ]
 widget = NullBooleanSelect
  fixture_files . extend ( fixture_files_in_dir )
     def formset_factory ( form , formset = BaseFormSet , extra = 1 , can_order = False ,  can_delete = False , max_num = None , validate_max = False ,  min_num = None , validate_min = False ) :
 self . xml . endElement ( "object" )
              params , varargs , varkw , defaults = getargspec ( func )
 parser . add_argument ( '--backwards' , action = 'store_true' , dest = 'backwards' ,  default = False , help = 'Creates SQL to unapply the migration, rather than to apply it' )
     key = hashlib . sha1 ( key_salt + secret ) . digest ( )
  except ValueError :
     class HiddenInput ( Input ) :
              if text [ 0 ] in 'xX' :
  from django . utils . encoding import python_2_unicode_compatible , force_str
 REQUEST = property ( _get_request )
 self . msg = msg
                  return endpos
  from_email = sanitize_address ( email_message . from_email , email_message . encoding )
                          fh . write ( migration_string )
   filepath = parser . compile_filter ( bits [ 1 ] )
                  result . append ( ch )
          return self . source
   def _load_post_and_files ( self ) :
 if connection . ops . start_transaction_sql ( ) :
                                  raise ValueError ( 'Unable to configure handler '  '%r: %s' % ( name , e ) )
 from django . core . management . base import BaseCommand , CommandError
  else :
              ignored . append ( f . name )
   def resolve ( self , path ) :
   def ngettext ( singular , plural , number ) :
          bytes = float ( bytes )
              if lookup_view in self . _callback_strs :
                      blocks = dict ( ( n . name , n ) for n in  compiled_parent . nodelist . get_nodes_by_type ( BlockNode ) )
   def strptime ( self , value , format ) :
                   return getattr ( settings , format_type )
  from django . core . management . base import BaseCommand , CommandError
   try :
    class HttpRequest ( object ) :
  import hashlib
  return ':' . join ( ret_ip )
 BytesIO = io . BytesIO
 return import_string ( path ) ( * args , ** kwargs )
               return
 get_ns_resolver . cache_clear ( )
  slug_re = re . compile ( r'^[-a-zA-Z0-9_]+$' )
  else :
 return data_set != initial_set
    class StreamingBuffer ( object ) :
  elif autoescape :
          return self . __class__ ( [ ( key , copy . deepcopy ( value , memo ) )  for key , value in self . items ( ) ] )
 from __future__ import unicode_literals
  import os
    else :
              if size :
                   row_data = ( form . cleaned_data [ field ]  for field in unique_check if field in form . cleaned_data )
              yield self [ key ]
 self . db = options . pop ( 'using' , DEFAULT_DB_ALIAS )
              self . _request = datastructures . MergeDict ( self . POST , self . GET )
              result = self . _resolve ( )
  except ( TypeError , VariableDoesNotExist ) :
      @ contextlib . contextmanager
 self . _producer = [ ]
                   for hook in sys . path_hooks :
   if field . _has_changed ( initial_value , data_value ) :
              charset = msg . get_charset ( ) . get_output_charset ( ) if msg . get_charset ( ) else 'utf-8'
          data = {  "model" : smart_text ( obj . _meta ) ,  "fields" : self . _current ,  }
   def write_migration_files ( self , changes ) :
                return 0
 super ( MultiValueField , self ) . __init__ ( * args , ** kwargs )
                      return True
                     errors . extend ( m for m in e . error_list if m not in errors )
     class Archive ( object ) :
   def get_connection ( self , fail_silently = False ) :
              for line in self . handle_inspection ( options ) :
                          i = existing . index ( name )
   if not changes and self . verbosity >= 1 :
                  value = None
 num_args = 0
              yield obj
      help = "Prints the SQL statements for the named migration."
   return output
              self . error_class = 'errorlist'
  with context . push ( var = output ) :
   else :
                security_logger = logging . getLogger ( 'django.security.%s' %  e . __class__ . __name__ )
   else :
  else :
 try :
                  if safe_input :
                      if contains ( result [ - 1 ] , Group ) :
              for reference , receivers in obj . unresolved_references . items ( ) :
  for key , value in parse_qsl ( query_string or '' ,  keep_blank_values = True ,  encoding = encoding ) :
 self . _populated = True
  self . _regex = regex
 if extend :
   ustring_re = re . compile ( "([\u0080-\uffff])" )
          return self . __offset
      def __init__ ( self , path , match = None , recursive = False , allow_files = True ,  allow_folders = False , required = True , widget = None , label = None ,  initial = None , help_text = '' , * args , ** kwargs ) :
      pass
          new_ip = ip_str . split ( ':' )
 raise
  else :
 if not content_type :
  update_wrapper ( _wrapper , dummy )
 r = dklen - ( l - 1 ) * hlen
   TOTAL_FORM_COUNT = 'TOTAL_FORMS'
 from django . utils . module_loading import module_has_submodule
 memo [ id ( self ) ] = obj
   @ property
          name , val = forbid_multi_line_headers ( name , val , self . encoding )
 for d in self . dicts :
 os . _exit ( 1 )
              if self . _read_started :
   def extract ( self , to_path ) :
   if count == 0 :
  except ( ValueError , TypeError ) :
  s_len += 1
                  related = getattr ( obj , field . name )
 if text [ 0 ] == '#' :
   def __call__ ( self , value ) :
 from django . utils import six
 self . add_root_elements ( handler )
 chunk_size = 64 * 2 ** 10
  from django . conf import settings
 def reverse_dict ( self ) :
     def find_template ( name , dirs = None ) :
               pass
               for tablename in tablenames :
   try :
                  return six . text_type ( self ) % rhs
              self . msgmerge_options = self . msgmerge_options [ : ] + [ '--no-location' ]
 def __new__ ( cls , * args , ** kwargs ) :
 self . _createdir ( )
 dlen = len ( defaults or [ ] )
   def __str__ ( self ) :
  else :
 return data_set != initial_set
   @ property
              return [ ]
              assert not isinstance ( cc , six . string_types ) , '"cc" argument must be a list or tuple'
 request_repr = '\n{0}' . format ( filter . get_request_repr ( request ) )
              return super ( MultiValueDict , self ) . __getitem__ ( key )
          raise NotImplementedError ( 'subclasses of BaseArchive must provide a list() method' )
 super_set = super ( SortedDict , self ) . __setitem__
 default_validators = [ validators . validate_email ]
  get_valid_filename = allow_lazy ( get_valid_filename , six . text_type )
 from django . core . exceptions import ImproperlyConfigured
         @ register . filter ( is_safe = False )
 self . msguniq_options = self . msguniq_options [ : ] + [ '--no-wrap' ]
    def get_major_version ( version = None ) :
          _dec . __name__ = 'method_decorator(%s)' % decorator . __name__
 pass
 if len ( value ) >= 2 and value [ : 1 ] == value [ - 1 : ] == b'"' :
    @ register . filter ( is_safe = True )
      from django . utils . six . moves import cPickle as pickle
          return import_string ( app_path )
       def __init__ ( self , object_list , number , paginator ) :
                  return pgettext_lazy ( self . message_context , value )
              translation . activate ( settings . LANGUAGE_CODE )
 pass
              raise ValidationError ( self . message , code = self . code )
          if options [ 'verbosity' ] > 0 :
 if opts :
  return ''
 def __init__ ( self , content , name = None ) :
              return usage
  else :
          safe_data = { }
 self . _unget_history = [ num_bytes ] + self . _unget_history [ : 49 ]
  else :
                  try :
          git_changeset = get_git_changeset ( )
          min_num = DEFAULT_MIN_NUM
 def get_default_prefix ( cls ) :
          try :
                  migration . branch = migration . ancestry [  ( migration . ancestry . index ( common_ancestor ) + 1 ) :  ]
           hextets [ index ] = hextets [ index ] . lstrip ( '0' )
 if len ( fks_to_parent ) == 1 :
                          response = middleware_method ( request , e )
                  return bytes ( s )
      pass
  commands = get_commands ( )
  return '\n' . join ( output )
  else :
                  options += [ ( s_opt . get_opt_string ( ) , s_opt . nargs ) for s_opt in  parser . option_list ]
          output = [ ]
   return val , encoded
          year = int ( m . group ( 'year' ) )
          del self . dict [ item ]
  else :
 escaped = False
          return get_connection ( backend = self . email_backend , fail_silently = True )
 from django . utils . synch import RWLock
  def _generator ( ) :
    def __copy__ ( self ) :
                          out . write ( ' %s ' % p . split ( ':' , 1 ) [ 1 ] )
   def open ( self , mode = None ) :
  if value and hasattr ( value , "url" ) :
 logger = logging . getLogger ( name )
          return SafeBytes ( s )
              return path . join ( django . __path__ [ 0 ] , 'conf' , subdir )
                  lookup_view = get_callable ( lookup_view , True )
              self . flags = flags
  from django . core . exceptions import ValidationError , NON_FIELD_ERRORS
 super ( NullBooleanSelect , self ) . __init__ ( attrs , choices )
              return ( ( not pk . editable ) or ( pk . auto_created or isinstance ( pk , AutoField ) )  or ( pk . rel and pk . rel . parent_link and pk_is_not_editable ( pk . rel . to . _meta . pk ) ) )
   def load_middleware ( self ) :
 s = subject [ p : i ]
   else :
  else :
  except UnicodeDecodeError :
 def content ( self ) :
              token = self . next_token ( )
  for model in app_models :
              queryset = self . model . _default_manager
              for subnode in node :
  return True
 if ret :
              form = ManagementForm ( self . data , auto_id = self . auto_id , prefix = self . prefix )
  return force_str ( signature )
                          for sql in sql_list :
  return value
  errors . append (  Error (  "%s was connected to the '%s' signal "  "with a lazy reference to the '%s' sender, "  "which has not been installed." % (  description , name , '.' . join ( reference )  ) ,  obj = receiver . __module__ ,  hint = None ,  id = 'signals.E001'  )  )
 filelist = self . _list_cache_files ( )
  raise
                              if isinstance ( val , tuple ) :
 auto_id = self . auto_id
 lib = get_library ( taglib )
 regex_match = language_code_prefix_re . match ( path )
          return self . environ . get ( 'wsgi.url_scheme' )
                  key += item
          return False
 if value in self . empty_values :
    if sizeof ( c_ulong ) != sizeof ( c_void_p ) :
  exclude . append ( name )
 self . choices . append ( ( f , f . replace ( path , "" , 1 ) ) )
              related = getattr ( obj , field . name )
 self . var = var_obj
                      match = None
                          out . write ( ' _(%s) ' % cmatch )
   def gettext ( message ) :
  values = {  name : var . resolve ( context )  for name , var in six . iteritems ( self . extra_context )  }
  from django . conf import settings
 import sys
 translated = func ( ** kwargs )
       def from_current_timezone ( value ) :
              weight += 1
  __import__ ( name )
 if kw [ 'microsecond' ] :
 if push is not None :
 ch , escaped = next ( pattern_iter )
 for name in namelist :
              for widget in self . widgets :
                  self . stdout . write ( "No changes detected in apps '%s'" % ( "', '" . join ( app_labels ) ) )
  else :
              location = settings . MEDIA_ROOT
      from django . utils . six . moves import cPickle as pickle
 prefix_length = len ( template_dir ) + 1
          if model_list is None :
      def __init__ ( self , tokens ) :
              return EndToken
                  import_module ( '.management' , app_config . name )
  raise AttributeError ( "Unable to determine the file's size." )
  return new_value
 for option_value , option_label in chain ( self . choices , choices ) :
   def c ( self ) :
 def __init__ ( self , table ) :
       def get_standard_processors ( ) :
          if filepath . startswith ( root ) :
 obj_dict = super ( SimpleTemplateResponse , self ) . __getstate__ ( )
                  import_module ( templatetag_module )
  return self . as_widget ( )
  bits = token . contents . split ( )
 pass
          self . cyclevars = cyclevars
      pass
    return False
                  continue
  _iterkeys = "keys"
 _func_defaults = "__defaults__"
              return ''
  def __init__ ( self , limit_value ) :
 comment_lineno_cache = t . lineno
 subject = '%s (%s IP): %s' % (  record . levelname ,  ( 'internal' if request . META . get ( 'REMOTE_ADDR' ) in settings . INTERNAL_IPS  else 'EXTERNAL' ) ,  record . getMessage ( )  )
   def absolute_path ( self , path , prefix = None ) :
      from django . core . mail . utils import CachedDnsName , DNS_NAME
 for part in parts :
          for condition , nodelist in self . conditions_nodelists :
 if file_ :
 from django . utils . safestring import mark_safe
 import os
  new_value = value + delta
   def format ( number , decimal_sep , decimal_pos = None , grouping = 0 , thousand_sep = '' ,  force_grouping = False ) :
          return s . get_data ( )
 if options [ 'app_label' ] and options [ 'migration_name' ] :
              return 0
              object_data . update ( initial )
          self . setting , self . nodelist = setting , nodelist
          try :
 forms_to_delete = self . deleted_forms
    class PasswordInput ( TextInput ) :
 from django . utils import six
                      if not hasattr ( self , 'bad_cookies' ) :
                  self . stdout . write ( self . style . MIGRATE_LABEL ( "  Apply all migrations: " ) + ( ", " . join ( set ( a for a , n in targets ) ) or "(none)" ) )
              return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . lower ( )
  MAXSIZE = sys . maxsize
                      usage . append ( "    %s" % name )
              continue
                      arg_vals . append ( mark_safe ( arg ) )
                      disposition = meta_data [ 'content-disposition' ] [ 1 ]
  KB = 1 << 10
  def add_arguments ( self , parser ) :
              _html_parser . HTMLParser . __init__ ( self )
                              value = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
              return six . unichr ( html_entities . name2codepoint [ text ] )
          self . _archive = zipfile . ZipFile ( file )
              return 'st'
              if field is not None :
  def start_serialization ( self ) :
    tag_re = ( re . compile ( '(%s.*?%s|%s.*?%s|%s.*?%s)' %  ( re . escape ( BLOCK_TAG_START ) , re . escape ( BLOCK_TAG_END ) ,  re . escape ( VARIABLE_TAG_START ) , re . escape ( VARIABLE_TAG_END ) ,  re . escape ( COMMENT_TAG_START ) , re . escape ( COMMENT_TAG_END ) ) ) )
  else :
 if len ( value ) != 2 :
     class NullBooleanSelect ( Select ) :
 self . validate_key ( key )
 self . xml . startDocument ( )
  self . _boundary = boundary
 args = args [ : - 1 ]
    if form . _meta . fields :
 class File ( FileProxyMixin ) :
   def __bool__ ( self ) :
                  config [ 'address' ] = self . as_tuple ( config [ 'address' ] )
 if django . VERSION [ - 2 ] != 'final' :
 from django . core . management . base import BaseCommand
   self . _clean_fields ( )
 class_types = type ,
   @ property
 self . url_name = url_name
  fd = pyinotify . INotifyWrapper . create ( ) . inotify_init ( )
 self . validators . append ( self . _regex_validator )
 if 'pk' in d :
  __all__ = ( 'MultiPartParser' , 'MultiPartParserError' , 'InputStreamExhausted' )
  else :
  def items ( self ) :
 from django . core . management . color import no_style
 def write ( self , s ) :
   transfer_encoding = meta_data . get ( 'content-transfer-encoding' )
          for base in bases [ : : - 1 ] :
  from collections import OrderedDict
          return False
 weight += 2
 if imatch . group ( 2 ) :
                  with open ( filepath , 'rb' ) as fp :
   else :
     if errors :
              warning = kwargs [ 'warning' ]
  self . backout . append ( self . pointer )
   def __repr__ ( self ) :
     class RenameMethodsBase ( type ) :
   def __eq__ ( self , other ) :
  else :
 global _serializers
               kwargs . setdefault ( 'widget' , super ( IntegerField , self ) . widget )
  elif child . nodeType == child . ELEMENT_NODE :
              for field , error_list in self . error_dict . items ( ) :
          return mark_safe ( '\n' . join ( chain ( * [ getattr ( self , 'render_' + name ) ( ) for name in MEDIA_TYPES ] ) ) )
                      src_data = fp . read ( )
 from yaml import CSafeDumper as SafeDumper
   def end_serialization ( self ) :
 comment = [ ]
 def __init__ ( self , text ) :
    def deserialize ( format , stream_or_string , ** options ) :
 def find_fixtures ( self , fixture_label ) :
  if exctype is not WindowsError or 'Access is denied' not in str ( value ) :
  app_list = OrderedDict ( ( app_config , None )  for app_config in apps . get_app_configs ( )  if app_config . models_module is not None and app_config not in excluded_apps )
   class InvalidPage ( Exception ) :
   def render ( self , context ) :
  val . append ( iso_input )
 from django . conf import settings
   new_class . base_fields = fields
 self . use_ssl = settings . EMAIL_USE_SSL if use_ssl is None else use_ssl
  if _default is None :
              locks . unlock ( fd )
 for attr in _moved_attributes :
 re_tag = re . compile ( r'<(/)?([^ ]+?)(?:(\s*/)| .*?)?>' , re . S )
   def open ( self ) :
              if not package :
 binary_type = bytes
 if invalid_var_format_string is None :
  else :
   def __call__ ( self , * args , ** kwargs ) :
              result = self . buffer + self . _read_limited ( size - len ( self . buffer ) )
  elif not isinstance ( value , ConvertingTuple ) and isinstance ( value , tuple ) :
 def encoding ( self , value ) :
          return True
  elif args [ 1 ] == '304' :
 if isinstance ( cache , BaseDatabaseCache ) :
   def handle_m2m_field ( self , obj , field ) :
                   def handle_m2m ( value ) :
    else :
                  try :
      import pytz
 from __future__ import unicode_literals
 try :
              args = [ '"%s"' % arg for arg in args ]
 six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) ,  sys . exc_info ( ) [ 2 ] )
 alternative_subtype = 'alternative'
     @ classmethod
   def add_item ( self , title , link , description , author_email = None ,  author_name = None , author_link = None , pubdate = None , comments = None ,  unique_id = None , unique_id_is_permalink = None , enclosure = None ,  categories = ( ) , item_copyright = None , ttl = None , updateddate = None , ** kwargs ) :
 x = int ( x // len ( to_digits ) )
  if localized_fields is not None :
                  msgs = msgs . decode ( 'utf-8' )
                      m = self . INDEX_PATTERN . match ( rest )
    def iter_format_modules ( lang , format_module_path = None ) :
  SafeUnicode = SafeText
 from __future__ import unicode_literals
          ext_list . extend ( ext . replace ( ' ' , '' ) . split ( ',' ) )
  new_environ = os . environ . copy ( )
           default_attrs = { 'cols' : '40' , 'rows' : '10' }
   def E ( self ) :
          try :
   def read ( self ) :
  return Truncator ( value ) . chars ( length )
 self . pubid = pubid
 self . method = environ [ 'REQUEST_METHOD' ] . upper ( )
              body_msg = msg
  old_path = path . join ( root , filename )
  else :
                          raise CommandError ( "Unknown model: %s.%s" % ( app_label , model_label ) )
 for processor in get_standard_processors ( ) + processors :
  else :
   def __eq__ ( self , other ) :
 for ext in extensions :
 default_error_messages = {  'invalid' : _ ( "No file was submitted. Check the encoding type on the form." ) ,  'missing' : _ ( "No file was submitted." ) ,  'empty' : _ ( "The submitted file is empty." ) ,  'max_length' : ungettext_lazy (  'Ensure this filename has at most %(max)d character (it has %(length)d).' ,  'Ensure this filename has at most %(max)d characters (it has %(length)d).' ,  'max' ) ,  'contradiction' : _ ( 'Please either submit a file or check the clear checkbox, not both.' )  }
  else :
  except KeyError :
  else :
                      cursor . execute ( "SELECT cache_key, expires FROM %s "  "WHERE cache_key = %%s" % table , [ key ] )
 try :
  new_value = value + delta
                              out . write ( blankout ( part , 'S' ) )
              response = _set_response_etag ( response )
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Operations to perform:" ) )
 message = message % ( ', ' . join ( missing_fields ) ,  opts . model . __name__ )
 return major
              yield widget
          try :
  mail . send ( fail_silently = fail_silently )
          format_module_path = settings . FORMAT_MODULE_PATH
   def _resolve_name ( name , package , level ) :
          return date ( self . year , self . month , self . day )
              result = None
 from django . utils import six
    def assertRegex ( self , * args , ** kwargs ) :
 parser . add_argument ( '--fake' , action = 'store_true' , dest = 'fake' , default = False ,  help = 'Mark migrations as run without actually running them' )
   def as_tuple ( self , value ) :
  else :
                  if value is None and attr in declared_fields :
   default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. That choice is not one of'  ' the available choices.' ) ,  }
  return value
  if find_command ( self . program ) is None :
                  name = self . split_leading_dir ( name ) [ 1 ]
                field_name = field_node . getAttribute ( "name" )
from __future__ import unicode_literals
 for f in post_sql_fields :
  except NotImplementedError :
          wsgi_opts [ 'bindAddress' ] = None
 from django . db . migrations . loader import AmbiguityError
  else :
           seconds2 , name2 = chunks [ i + 1 ]
     def translation ( language ) :
  return TimestampSigner ( key , salt = salt ) . sign ( base64d )
 from django . conf import settings
     @ register . filter ( is_safe = True , needs_autoescape = True )
          response [ 'ETag' ] = '"%s"' % hashlib . md5 ( response . content ) . hexdigest ( )
  return self . object_list [ index ]
              raise TypeError ( 'Level not an integer or a '  'valid string: %r' % level )
  if 'message-id' not in header_names :
 for widget in self . widgets :
 return '%02d' % calendar . monthrange ( self . data . year , self . data . month ) [ 1 ]
                      lineno_comment_map . setdefault ( t . lineno ,  [ ] ) . append ( t . contents )
   from PIL import Image
 if p >= 0 :
 if not using_sysrandom :
              return key_func
 self . limit_choices_to = limit_choices_to
              if self . verbosity >= 1 :
  if maxsize == 0 :
 from django . template . smartif import IfParser , Literal
          return ''
              return list_ [ - 1 ]
 if not field_name :
      @ register . tag ( 'block' )
      class CacheClass ( LocMemCache ) :
 if nodelist . get_nodes_by_type ( ExtendsNode ) :
 match = tagfind . match ( rawdata , i + 1 )
   def _ipython ( self ) :
 try :
 if token == "not" and i + 1 < l and tokens [ i + 1 ] == "in" :
 self . paths_to_remove . append ( tempdir )
  result = super ( DateTimeField , self ) . to_python ( value )
  filter_raw_string = r""" ^(?P<constant>%(constant)s)| ^(?P<var>[%(var_chars)s]+|%(num)s)|  (?:\s*%(filter_sep)s\s*      (?P<filter_name>\w+)          (?:%(arg_sep)s              (?:               (?P<constant_arg>%(constant)s)|               (?P<var_arg>[%(var_chars)s]+|%(num)s)              )          )?  )""" % {  'constant' : constant_string ,  'num' : r'[-+\.]?\d[\d\.e]*' ,  'var_chars' : "\w\." ,  'filter_sep' : re . escape ( FILTER_SEPARATOR ) ,  'arg_sep' : re . escape ( FILTER_ARGUMENT_SEPARATOR ) ,  }
              return
 add_to_builtins ( 'django.template.defaultfilters' )
                  _ [ m [ k ] ] = v
              return ''
              result = handler . handle_raw_input ( self . _input_data ,  self . _meta ,  self . _content_length ,  self . _boundary ,  encoding )
    def deactivate ( ) :
          msg = (  "WSGI application '%(app_path)s' could not be loaded; "  "Error importing module: '%(exception)s'" % ( {  'app_path' : app_path ,  'exception' : e ,  } )  )
 self . _lock = threading . RLock ( )
          tt = ( dt . year , dt . month , dt . day ,  dt . hour , dt . minute , dt . second ,  dt . weekday ( ) , 0 , 0 )
  new_second_item . extend ( item )
 self . level = level
              sys . exit ( bool ( failures ) )
 to_python = self . _get_to_python ( pk_field )
 self . empty_value = kwargs . pop ( 'empty_value' , '' )
          return PALETTES [ DEFAULT_PALETTE ]
                  self . add_handlers ( logger , handlers )
 if limit_choices_to is not None :
                  continue
          reversed_text = ' reversed' if self . is_reversed else ''
   def render ( self , context ) :
                  raise ValidationError (  _ ( 'ManagementForm data is missing or has been tampered with' ) ,  code = 'missing_management_form' ,  )
    def has_key ( self , key ) :
   def lists ( self ) :
 def linebreaks_filter ( value , autoescape = None ) :
 self . verbose_name_plural = 'cache entries'
 self . setup_environ ( )
 v = datetime . datetime . strptime ( force_str ( value ) , input_format )
    def smart_bytes ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
 int2byte = chr
              response . content = b''
  TEMPLATE_FRAGMENT_KEY_TEMPLATE = 'template.cache.%s.%s'
              return [ ]
 result = logging . Formatter ( fmt , dfmt )
                      migration . merged_operations . extend (  loader . get_migration ( node_app , node_name ) . operations  )
   url = unquote ( force_str ( url ) )
 if domain and validate_host ( domain , settings . ALLOWED_HOSTS ) :
 def get_resolver ( urlconf ) :
      return ungettext ( singular , plural , number )
              import_module ( project_name )
  except KeyError :
 content_subtype = 'plain'
      if six . PY2 :
   self . year_none_value = self . none_value
    def __ne__ ( self , other ) :
  def nud ( self , parser ) :
 uclass , lookup , field , unique_for = date_check
   def eval ( self , context ) :
 text = unicodedata . normalize ( 'NFC' , self . _wrapped )
 self . _post_parse_error = False
 return self
 if not hasattr ( c , '__call__' ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType :
 raise TypeError ( msg )
  except ( OSError , IOError ) :
          return ''
 should_convert = ( isinstance ( value , datetime )  and ( settings . USE_TZ if use_tz is None else use_tz )  and not is_naive ( value )  and getattr ( value , 'convert_to_local_time' , True ) )
 def floatformat ( text , arg = - 1 ) :
 if not roots :
          file = open ( file_or_path , 'rb' )
     class RegexURLPattern ( LocaleRegexProvider ) :
   def resolve_error_handler ( self , view_type ) :
              self . domain_whitelist = whitelist
      def send_messages ( self , email_messages ) :
  except OSError :
   def __delitem__ ( self , key ) :
     class DefusedXmlException ( ValueError ) :
 self . waiting_writers -= 1
   def find_filter ( self , filter_name ) :
 get_method_self = operator . attrgetter ( _meth_self )
          super ( Command , self ) . add_arguments ( parser )
 file_size = data . size
              return None
  id = "(%s) " % self . id if self . id else ""
          delattr ( _MovedItems , name )
 from django . utils . translation import ugettext as _
              self . stdout . write ( "No conflicts detected to merge." )
   for o in opts :
     header_end = chunk . find ( b'\r\n\r\n' )
                      content = template_file . read ( )
 from django . utils . translation import ugettext as _
                      self . empty_block_tag ( token )
                      answer = six . moves . input ( "Do you wish to proceed? [yN] " )
          raise ExternalReferenceForbidden ( context , base , sysid , pubid )
 context_extras [ 'LANGUAGE_CODE' ] = translation . get_language ( )
  if delta < 0 :
   def save_new ( self , form , commit = True ) :
    def get_library ( library_name ) :
   return fixture_files
              raise BadSignature ( 'No "%s" found in value' % self . sep )
              try :
  while RUN_RELOADER :
 self . host = host or settings . EMAIL_HOST
              return lookup_view
 return self . id in settings . SILENCED_SYSTEM_CHECKS
 from django . forms . formsets import *
      from unittest import *
   if sys . version_info >= ( 2 , 7 , 2 ) :
 from django . utils . encoding import smart_text
          text = '%s\x1b[%sm' % ( text or '' , RESET )
          output , references = connection . creation . sql_create_model ( model , style , known_models )
                  if k [ 1 ] is None :
 return result
 defaults = dict ( defaults . __dict__ , ** options )
              if opname not in roots :
  try :
from __future__ import unicode_literals
             self . _choices = self . widget . choices = list ( value )
 kw [ 'tzinfo' ] = tzinfo
                  return self . __text_cast ( )
          handler . addQuickElement ( "title" , item [ 'title' ] )
 if filename :
      from django . utils . six . moves import _dummy_thread as thread
   def save ( self , save_m2m = True , using = None ) :
                      response = middleware_method ( request , callback , callback_args , callback_kwargs )
   _format_cache [ cache_key ] = None
 self . _errors = None
   def main_help_text ( self , commands_only = False ) :
                  args = match . groups ( )
 handler . addQuickElement ( "updated" , rfc3339_date ( self . latest_post_date ( ) ) )
      pass
   def is_serious ( self ) :
 def dictitem ( s ) :
                              raise AttributeError
 import sys
              raise AttributeError ( attr )
  else :
  def _get_image_dimensions ( self ) :
    return output
  for template_dir in template_dirs :
 try :
    else :
  for func , args in self . filters :
   if self . verbosity >= 2 :
  else :
              fp . write ( msgs )
      p = language . find ( '-' )
  elif options [ "daemonize" ] . lower ( ) in ( 'false' , 'no' , 'f' ) :
          raise TemplateSyntaxError ( "next-to-last argument to 'regroup' tag must"  " be 'as'" )
              result += ugettext ( ', ' ) + avoid_wrapping ( name2 % count2 )
                  return "[Didn't have permission to include file]"
          if app_config . models_module is None :
                  return kwargs
   def clean ( self , value ) :
 fields . sort ( key = lambda x : x [ 1 ] . creation_counter )
 parser . add_argument ( 'directory' , nargs = '?' , help = 'Optional destination directory' )
 def __add__ ( self , rhs ) :
 yield 'from %s import models' % self . db_module
    if self . _validate_unique :
  def copy ( self ) :
              if primary_keys :
     class MultipleChoiceField ( ChoiceField ) :
                      if not table_name_filter ( table_name ) :
  kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )
  if out_log :
                  raise TemplateSyntaxError ( "Only 'silent' flag is allowed after cycle's name, not '%s'." % args [ - 1 ] )
   try :
  else :
    return type ( form ) ( class_name , ( form , ) , form_class_attrs )
 try :
 return "%s%02d%02d" % ( sign , seconds // 3600 , ( seconds // 60 ) % 60 )
 memo [ id ( self ) ] = result
                      config [ 'target' ] = self . config [ 'handlers' ] [ config [ 'target' ] ]
  except ( AttributeError , UnsupportedOperation ) :
  url = quote ( url , safe = b'!*\'();:@&=+$,/?#[]~' )
 parser . delete_first_token ( )
    return force_bytes ( value , self . _charset )
              if token_string . startswith ( VARIABLE_TAG_START ) :
 if level is not None :
 import ssl
 from django . utils . module_loading import import_string
          self . new_objects = [ ]
 opts = instance . _meta
 if self . isolated_context :
          import pylibmc
  except ( LookupError , TypeError ) :
 from django . db import connections , DEFAULT_DB_ALIAS
              return None
 for filepath in self . get_template_sources ( template_name , template_dirs ) :
      def __init__ ( self , stream , boundary ) :
  else :
    elif name is not None and filter_func is not None :
 final_path = abspathu ( join ( base , * paths ) )
                  if t . contents . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :
 if self . connection is None :
          choices = ( ( '1' , ugettext_lazy ( 'Unknown' ) ) ,  ( '2' , ugettext_lazy ( 'Yes' ) ) ,  ( '3' , ugettext_lazy ( 'No' ) ) )
              if isinstance ( other , Promise ) :
   @ streaming_content . setter
              new_name = '%sfield' % new_name
 self . stream . write ( '-' * 79 )
 select_html = s . render ( field % name , val , local_attrs )
          self . data = obj
    for key , value in six . iteritems ( kwargs ) :
  except ( TypeError , AttributeError , KeyError , ValueError ) :
   def add_filters ( self , filterer , filters ) :
              raise TemplateSyntaxError ( "Second (optional) argument to %s tag"  " must be 'parsed'" % bits [ 0 ] )
  else :
   def handle ( self , ** options ) :
 from django . utils . _os import rmtree_errorhandler
 parser . add_argument ( '-n' , '--natural' , action = 'store_true' , dest = 'use_natural_keys' , default = False ,  help = 'Use natural keys if they are available (deprecated: use --natural-foreign instead).' )
      @ decorator
 if language in _DJANGO_DEPRECATED_LOCALES :
   elif count > 1 :
 def __init__ ( self , subject ) :
      return getattr ( self , _assertCountEqual ) ( * args , ** kwargs )
  __all__ = ( 'SelectDateWidget' , )
    _trans = Trans ( )
  def __init__ ( self , attrs = None , render_value = False ) :
                           if isinstance ( current , BaseContext ) and getattr ( type ( current ) , bit ) :
   return number
   else :
 import socket
 from django . utils . http import cookie_date
    s = s1
              import warnings
              yield 'year'
   def non_field_errors ( self ) :
   def _raw_value ( self , fieldname ) :
              top_dir = path . join ( os . getcwd ( ) , name )
    if not only_initial :
      def wrapper ( * args , ** kwargs ) :
          cache . close ( )
  except KeyboardInterrupt :
   @ property
 ratio = ( value / max_value ) * max_width
 bits = token . split_contents ( )
 from email . header import Header
 if urlconf_name :
    with context_instance . push ( dictionary ) :
 script_name = script_url [ : - len ( path_info ) ]
              if new_mod is None :
 if self . check_test ( value ) :
                      signal . signal ( signal . SIGTTOU , old_handler )
                  raise
 if not extra_context :
 if app_label not in executor . loader . migrated_apps :
              sys . stderr = NullDevice ( )
 from django . utils import six
  except KeyError :
   class UploadFileException ( Exception ) :
                          logger . disabled = True
  handler . addQuickElement ( "id" , self . feed [ 'id' ] )
   def cfg_convert ( self , value ) :
 d = Decimal ( input_val )
      fs_encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( )
              super ( Serializer , self ) . handle_field ( obj , field )
          try :
   raise TemplateDoesNotExist ( template_name )
              handler . addQuickElement ( 'published' , rfc3339_date ( item [ 'pubdate' ] ) )
 from django . utils . six . moves . urllib . parse import quote , unquote , urlsplit , urlunsplit
          wsgi_opts [ 'bindAddress' ] = ( options [ "host" ] , int ( options [ "port" ] ) )
    def save ( self , commit = True ) :
 command_dir = os . path . join ( management_dir , 'commands' )
 self . extra_context = kwargs . pop ( 'extra_context' , { } )
 _cached_filenames += new_filenames
      import pickle
                          continue
 def __init__ ( self , request , dict_ = None , processors = None , current_app = None ,  use_l10n = None , use_tz = None ) :
              return self . DSTDIFF
          for k , v in self . _iteritems ( ) :
   if max_age is not None :
  current = getattr ( current , bit )
  else :
          match = self . regex . search ( path )
              self . _ordering = [ ]
              return smart_text ( token )
  return translation
          output . extend ( connection . creation . sql_destroy_indexes_for_model ( model , style ) )
 u = dig2 . digest ( )
  elif isinstance ( value , datetime . datetime ) :
 from django . core . exceptions import ImproperlyConfigured , ViewDoesNotExist
               return False
 try :
 if path . isdir ( expanded_template ) :
                  return source , display_name
   class TemplateSyntaxError ( Exception ) :
              loader = find_template_loader ( loader_name )
              docs_version = '%d.%d' % django . VERSION [ : 2 ]
          from django . template . debug import DebugLexer , DebugParser
          if not value and self . required :
  else :
              data = self . flo . read ( self . chunk_size )
      return _trans . templatize ( src , origin )
 data = { }
     return text
 self . file . size = file_size
          if can_fail :
              parsed = True
   from django . template . base import ( compile_string , resolve_variable ,  unescape_string_literal , generic_tag_compiler )
              if parts [ - 1 ] in self . serialization_formats :
  import warnings
      def __init__ ( self , var , name , nodelist , extra_context = None ) :
 if 'id' in self . attrs :
 with lock :
              output . insert ( 0 , error_row % force_text ( top_errors ) )
  elif name is not None and compile_function is None :
              if isinstance ( form . _meta . fields , tuple ) :
 media = Media ( )
 readlines = property ( lambda self : self . file . readlines )
  if labels is not None :
 import warnings
                  return min ( self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] , self . absolute_max )
   if is_relation :
  self . replace_header ( 'Content-Type' , 'text/%s; charset="%s"' % ( subtype , charset ) )
      pass
 from django . utils . six import StringIO
          __call__ = type . __call__
  except ( ImportError , IndentationError , NameError , SyntaxError ,  TypeError , AttributeError ) :
    def _unpack_ipv4 ( ip_str ) :
              try :
  if confirm == 'yes' :
   def create_token ( self , token_string , source , in_tag ) :
   def _clean_fields ( self ) :
  return attr
 import errno
          if self . base_url is None :
 self . using = options . get ( 'database' )
  inner_text = [ ]
    def __call__ ( self , value ) :
  elif 'HTTP_HOST' in self . META :
 if self . L ( ) and self . data . month > 2 :
 return get_valid_filename ( name )
 return IfChangedNode ( nodelist_true , nodelist_false , * values )
              if not value or not [ v for v in value if v not in self . empty_values ] :
   try :
              raise ValidationError ( _ ( 'Enter a valid IPv4 or IPv6 address.' ) , code = 'invalid' )
  else :
 if isinstance ( context , Context ) :
              for key , value in parse_qsl ( query_string or '' ,  keep_blank_values = True ) :
          self . set_cookie ( key , max_age = 0 , path = path , domain = domain ,  expires = 'Thu, 01-Jan-1970 00:00:00 GMT' )
 lineno_comment_map = { }
  except ValueError :
 saved_instances . append ( self . save_existing ( form , obj , commit = commit ) )
                          model = app_config . get_model ( model_label )
   else :
  self . _stream . unget ( unused_char )
 self . chunk_size = chunk_size
          if value is True :
          if message is not None :
   else :
 self . timezone = None
    def has_key ( self , key , version = None ) :
      pass
              if six . PY3 :
 yield base . DeserializedObject ( obj , m2m_data )
          return any ( self . dicts )
              return timedelta ( 0 )
              self . file = BytesIO ( )
 iterator = None
 pass
  return force_text ( url )
  from __future__ import unicode_literals
      return force_text ( ngettext ( singular , plural , number ) )
      m = IDENTIFIER . match ( s )
              warnings . warn (  "AppCommand.handle_app() is superseded by "  "AppCommand.handle_app_config()." ,  RemovedInDjango19Warning , stacklevel = 2 )
       if sys . version_info [ : 2 ] >= ( 3 , 3 ) :
   def __getitem__ ( self , i ) :
          if to_lower :
               try :
 if kwds :
 line = ''
  from django . utils . encoding import force_str
                          date_data = ( getattr ( form . cleaned_data [ unique_for ] , lookup ) , )
  import os
   def add_arguments ( self , parser ) :
                      raise CommandError ( 'Unknown app in excludes: %s' % exclude )
   class Choice ( list ) :
  else :
                  output . append ( app_output )
              if not self . _has_expired ( key ) :
      ugettext = gettext
 pos = last = 0
    class TemplateDoesNotExist ( Exception ) :
  except ImportError :
          combined = Media ( )
 _iterlists = "iterlists"
   else :
  output_transaction = True
  from django . core . management . base import BaseCommand
          kwargs [ 'max_age' ] = min ( int ( cc [ 'max-age' ] ) , kwargs [ 'max_age' ] )
          self . _fname = None
  from django . db . models . fields import Field as ModelField
                  continue
  used_column_names . append ( att_name )
  end_tag = 'end' + bits [ 0 ]
              self . keyOrder . remove ( k )
 if not self . timezone :
 import warnings
 errors . extend ( _check_test_runner ( ** kwargs ) )
                          locale_dir = self . default_locale_path
 self . indent ( 1 )
                  fp . write ( src_data )
          return self . _get_image_dimensions ( ) [ 1 ]
  except StopIteration :
                  return False
              settings . BASE_DIR
  try :
          return
      string_types = basestring ,
 if command . use_argparse :
     def common_logger_config ( self , logger , config , incremental = False ) :
 created_models . add ( model )
 attrs . pop ( key )
  else :
 merge_migrations . append ( migration )
      kwargs [ 'strm' ] = kwargs . pop ( 'stream' )
 def __init__ ( self ) :
 parser . add_option ( '--pythonpath' ,  help = 'A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".' ) ,
 writer = MigrationWriter ( new_migration )
  def __init__ ( self , choices = ( ) , required = True , widget = None , label = None ,  initial = None , help_text = '' , * args , ** kwargs ) :
 content = template . render ( context )
   if six . PY2 :
              mimetype , _ = mimetypes . guess_type ( filename )
   def __nonzero__ ( self ) :
               value = self . _resolve_lookup ( context )
  if ( getattr ( Meta , 'fields' , None ) is None and  getattr ( Meta , 'exclude' , None ) is None ) :
          return self . input_type == 'hidden' if hasattr ( self , 'input_type' ) else False
 return self . _size
 _supported = None
 opt_dict = { 'bold' : '1' , 'underscore' : '4' , 'blink' : '5' , 'reverse' : '7' , 'conceal' : '8' }
              raise MultiPartParserError ( 'Invalid Content-Type: %s' % content_type )
                      relations = connection . introspection . get_relations ( cursor , table_name )
     class SafeMIMEMultipart ( MIMEMixin , MIMEMultipart ) :
 for match in tag_re . finditer ( self . template_string ) :
 if isinstance ( value , six . string_types ) and value != ALL_FIELDS :
                   result . append ( "." )
   @ property
              field_notes . append ( 'Field renamed to remove unsuitable characters.' )
  else :
                  raise ImproperlyConfigured ( 'Could not create directory for saving email messages: %s (%s)' % ( self . file_path , err ) )
          self . registered_checks = [ ]
                  _locs_ = frame . f_locals
                          raise ValueError ( 'Unable to configure '  'filter %r: %s' % ( name , e ) )
              val = Header ( val ) . encode ( )
  return _ ( 'a.m.' )
   self . _mutable = mutable
  return error_dict
     return offset . days * 86400 + offset . seconds
 databases = [ self . using , None ]
 return self
 if old_handler is not None :
   if func is None :
              raise
          offset = date . tzinfo . utcoffset ( date )
  if cache_timeout < 0 :
          return len ( self . object_list )
  finally :
    class ModelForm ( six . with_metaclass ( ModelFormMetaclass , BaseModelForm ) ) :
    @ lru_cache . lru_cache ( maxsize = 1000 )
  self . stderr . write ( "Error: %s" % error_text )
                      block = self
   from django . template . base import ( ALLOWED_VARIABLE_CHARS , BLOCK_TAG_END ,  BLOCK_TAG_START , COMMENT_TAG_END , COMMENT_TAG_START ,  FILTER_ARGUMENT_SEPARATOR , FILTER_SEPARATOR , SINGLE_BRACE_END ,  SINGLE_BRACE_START , TOKEN_BLOCK , TOKEN_COMMENT , TOKEN_TEXT , TOKEN_VAR ,  TRANSLATOR_COMMENT_MARK , UNKNOWN_SOURCE , VARIABLE_ATTRIBUTE_SEPARATOR ,  VARIABLE_TAG_END , VARIABLE_TAG_START , filter_re , tag_re )
 return FASTCGI_HELP
  except zlib . error as e :
              self . _object_dict = dict ( ( o . pk , o ) for o in self . get_queryset ( ) )
                  if not lookup :
 excludes = options . get ( 'exclude' )
   def reset ( self ) :
  elif bytes < TB :
          return [ ]
  else :
    def get_template_from_string ( source , origin = None , name = None ) :
 if not value or isinstance ( value , ( list , tuple ) ) :
              raise ValidationError ( self . message , code = self . code )
                      d = d [ m . groups ( ) [ 0 ] ]
 return [ value . date ( ) , value . time ( ) . replace ( microsecond = 0 ) ]
    def ext_convert ( self , value ) :
              return None
 if protocol != 'both' and unpack_ipv4 :
 global templatetags_modules
 for migration in merge_migrations :
                      errors = "strict"
   def validate ( self , value ) :
          if not self . render_value :
  for obj in objects :
          try :
   def validate ( self , value ) :
  if not cls :
 def ordered_forms ( self ) :
 super ( Command , self ) . handle ( ** options )
 if not squash :
          return '\n' . join ( sql_flush ( self . style , connections [ options [ 'database' ] ] , only_django = True ) )
 if language_code not in self . _regex_dict :
   repo_dir = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) )
              try :
 def content ( self ) :
              value = field . clean ( value )
 return getattr ( _active , "value" , get_default_timezone ( ) )
          kwargs [ 'number' ] = number
   def validate ( self , value ) :
  super ( HttpResponseRedirectBase , self ) . __init__ ( * args , ** kwargs )
              selected_html = mark_safe ( ' selected="selected"' )
 return '"%s"' % etag . replace ( '\\' , '\\\\' ) . replace ( '"' , '\\"' )
   return found
              form = self . forms [ i ]
     if hasattr ( response , 'render' ) and callable ( response . render ) :
  return obj
          return LoaderOrigin ( display_name , loader , name , dirs )
   except UnicodeDecodeError as e :
                  kwargs [ "initial" ] = getattr ( self . parent_instance , self . to_field )
 intrans = False
 keys = _iterkeys
          if template_dirs :
          for bit in bits :
 from datetime import datetime
  except Exception as e :
      SafeString = SafeBytes
 if fk_name :
    if is_protected_type ( value ) :
from __future__ import absolute_import
  streaming = True
          super ( BaseInlineFormSet , self ) . add_fields ( form , index )
 from django . core . management . sql import sql_delete
 self . content_type_extra = None
   def splitext ( self , the_path ) :
 self . xml = SimplerXMLGenerator ( self . stream , self . options . get ( "encoding" , settings . DEFAULT_CHARSET ) )
    smart_split_re = re . compile ( r"""     ((?:         [^\s'"]*         (?:             (?:"(?:[^"\\]|\\.)*" | '(?:[^'\\]|\\.)*')             [^\s'"]*         )+     ) | \S+) """ , re . VERBOSE )
               return '-' . join ( [ template_name , hashlib . sha1 ( force_bytes ( '|' . join ( template_dirs ) ) ) . hexdigest ( ) ] )
   def as_ul ( self ) :
  from django . utils import six
  messages . update ( error_messages or { } )
 return forms
       major = get_major_version ( version )
 try :
 self . connection = connection
  else :
          return t . render ( Context ( dictionary ) )
  value = getattr ( _module , attr )
 return name + '_id'
 return avoid_wrapping ( value )
              raise ValidationError (  self . error_messages [ 'max_decimal_places' ] ,  code = 'max_decimal_places' ,  params = { 'max' : self . decimal_places } ,  )
                                  break
              return bytes ( value . encode ( self . _charset ) )
 final_output . extend ( output )
                          raise ValueError ( 'Unable to configure root '  'logger: %s' % e )
 super ( TemporaryFileUploadHandler , self ) . new_file ( file_name , * args , ** kwargs )
              self . xml . addQuickElement ( "None" )
          data = zlib . decompress ( data )
                   for k2 , v2 in v :
              for path in data :
  return super ( SimpleTemplateResponse , self ) . content
   def handle ( self , * args , ** options ) :
          self . file . seek ( 0 )
  if i >= self . initial_form_count ( ) and not form . has_changed ( ) :
   def __str__ ( self ) :
 if '\n' in val or '\r' in val :
                  return p . image . size
 try :
  return id_
              value = str ( value )
                  bad_app_labels . add ( app_label )
              yield ch , False
  context_extras = { }
 self . widget . choices = self . choices
   def configure_logging ( logging_config , logging_settings ) :
              if self . verbosity >= 1 :
  LANGUAGE_SESSION_KEY = '_language'
 domain_whitelist = [ 'localhost' ]
 gettext . _translations = { }
 from django . forms . formsets import BaseFormSet , formset_factory
              return s
              value = ''
          response [ 'Expires' ] = http_date ( time . time ( ) + cache_timeout )
 current = context
 return form
   def fetch_command ( self , subcommand ) :
  def add_arguments ( self , parser ) :
  if DEFAULT_CACHE_ALIAS not in settings . CACHES :
                          objects = model . _base_manager
              questioner = MigrationQuestioner ( defaults = { 'ask_merge' : True } )
          result = super ( MultiValueField , self ) . __deepcopy__ ( memo )
          handler = SimplerXMLGenerator ( outfile , encoding )
  elif options [ 'method' ] in ( 'thread' , 'threaded' ) :
                      raise ValueError ( 'Unable to set target handler '  '%r: %s' % ( config [ 'target' ] , e ) )
   return super ( BaseModelFormSet , self ) . _construct_form ( i , ** kwargs )
   def __repr__ ( self ) :
                  raise
 BLOCK_TAG_START = '{%'
              origin = StringOrigin ( template_string )
   if not matches :
   if header_end == - 1 :
              return lang_code
          if value is None :
                      self . unlink ( self . name )
 if key_prefix is None :
          raise self . error ( token , "Empty variable tag" )
   class Command ( BaseCommand ) :
      class WithNode ( Node ) :
    def generic_tag_compiler ( parser , token , params , varargs , varkw , defaults ,  name , takes_context , node_class ) :
  else :
              self . GET = QueryDict ( mutable = True )
  elif len ( bits ) == 6 :
 from django . template import ( Lexer , TOKEN_TEXT , TOKEN_VAR , TOKEN_BLOCK ,  TOKEN_COMMENT , TRANSLATOR_COMMENT_MARK )
 def __init__ ( self , convert_charrefs = False , ** kwargs ) :
                  response = debug . technical_404_response ( request , e )
          pass
  except TypeError :
  self . name = name
  else :
          return number_format ( value , use_l10n = use_l10n )
   try :
          return ValidationError ( self . data ) . error_list
   kwargs = { }
          if isinstance ( self . var , Variable ) :
                      pass
     def select_template ( template_name_list , dirs = None ) :
  exhaust ( field_stream )
 from django . utils . six . moves import xrange
 return fp . getvalue ( )
 try :
          if self . domain_regex . match ( domain_part ) :
                  output . extend ( connection . creation . sql_destroy_model ( model , references_to_delete , style ) )
 WEEKDAYS_REV = {  'monday' : 0 , 'tuesday' : 1 , 'wednesday' : 2 , 'thursday' : 3 , 'friday' : 4 ,  'saturday' : 5 , 'sunday' : 6  }
                  break
   def error ( self , token , msg ) :
  if finder . find_module ( name ) :
 block_context . add_blocks ( blocks )
 base = base [ : - 4 ]
           connection = connections [ options [ 'database' ] ]
              try :
          self . _container . append ( self . make_bytes ( content ) )
   if os . path . isabs ( fixture_name ) :
  ISO_INPUT_FORMATS = {  'DATE_INPUT_FORMATS' : ( '%Y-%m-%d' , ) ,  'TIME_INPUT_FORMATS' : ( '%H:%M:%S' , '%H:%M:%S.%f' , '%H:%M' ) ,  'DATETIME_INPUT_FORMATS' : (  '%Y-%m-%d %H:%M:%S' ,  '%Y-%m-%d %H:%M:%S.%f' ,  '%Y-%m-%d %H:%M' ,  '%Y-%m-%d'  ) ,  }
 def content ( self , value ) :
  else :
  return super ( TimeField , self ) . to_python ( value )
  return plist
 self . buffer = b''
  except UnicodeError :
  TYPE = RAW
 if not buf :
              return self . empty_value
      def close ( self ) :
 def escapejs_filter ( value ) :
          encoding = self . encoding or settings . DEFAULT_CHARSET
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Optimizing..." ) )
              fh . write ( writer . as_string ( ) )
  def __init__ ( self , input_date_formats = None , input_time_formats = None , * args , ** kwargs ) :
 parser . add_argument ( '--no-color' , action = 'store_true' , dest = 'no_color' , default = False ,  help = "Don't colorize the command output." )
 if six . PY2 :
                   compare_to = nodelist_true_output = self . nodelist_true . render ( context )
   tags = options . get ( 'tags' , None )
 if not hasattr ( template , 'render' ) :
              return key [ 0 ]
 locale = to_locale ( lang )
       comment_re = re . compile ( r"^((?:'[^']*'|[^'])*?)--.*$" )
          return False
 from django . conf import settings
                 tok = tok . replace ( "\\" , "U" )
  full_statement . append ( ');' )
                  if self . _should_delete_form ( form ) :
 if is_templatized :
 self . POST = QueryDict ( mutable = True )
 result = ungettext ( * msgs_with_ctxt )
                  absolute_path = path . abspath ( expanded_template )
 zfile . close ( )
   def lex ( self , text ) :
     def rfc3339_date ( date ) :
                          self . configure_root ( root , True )
 seen_models = connection . introspection . installed_models ( tables )
              deactivate_all ( )
  elif not isinstance ( value , ( list , tuple ) ) :
 self . port = DEFAULT_PORT
 def get_ns_resolver ( ns_pattern , resolver ) :
   def __repr__ ( self ) :
 i = 0
  return False
                              self . stdout . write ( "    Creating table %s\n" % model . _meta . db_table )
  if result is not None :
      def __init__ ( self , content ) :
 self . xml . endElement ( "natural" )
 def check_for_language ( lang_code ) :
  tzinfo = kw . pop ( 'tzinfo' )
 if self . __language == settings . LANGUAGE_CODE :
  from django . apps import apps
 import datetime
   def write ( self , content ) :
      def __init__ ( self , target , expression , var_name ) :
          return [ ( '' , [ ] ) ]
 setattr ( obj , self . fk . get_attname ( ) , getattr ( pk_value , 'pk' , pk_value ) )
 if self . _non_form_errors is None :
 if queryset is None :
from django . template . base import Lexer , Parser , tag_re , NodeList , VariableNode , TemplateSyntaxError
          option = remaining_bits . pop ( 0 )
  requires_system_checks = False
    def xreadlines ( self ) :
   base64d = b64_encode ( data )
                  raise ValidationError ( ungettext (  "Please submit %d or more forms." ,  "Please submit %d or more forms." , self . min_num ) % self . min_num ,  code = 'too_few_forms' )
 return copy . copy ( self )
     request_finished . connect ( update_watch )
                   args . append ( parser . compile_filter ( bit ) )
  else :
 self . validate_key ( key )
 try :
   class BadHeaderError ( ValueError ) :
  return self . _non_form_errors
  else :
     class DictConfigurator ( BaseConfigurator ) :
 if sys . platform == "win32" :
                  del obj_dict [ attr ]
      if urlconf is None :
   def set_cdata_mode ( self , tag ) :
              assert not isinstance ( to , six . string_types ) , '"to" argument must be a list or tuple'
                      import logging . handlers
                      filter_expression = self . compile_filter ( token . contents )
    def get_renderer ( self , name , value , attrs = None , choices = ( ) ) :
 import sys
          return ZERO
                  year += 2000
   if path is not None :
                    return
  self . _size = self . _get_size_from_underlying_file ( )
              return self . empty_form . is_multipart ( )
          self . _assert_mutable ( )
 pass
  except ( HTMLParseError , UnboundLocalError ) :
          return self . as_ul ( )
 t = re . sub ( "([a-z])'([A-Z])" , lambda m : m . group ( 0 ) . lower ( ) , value . title ( ) )
  else :
 from django . template . base import ( Node , NodeList , Template , Context , Library ,  TemplateSyntaxError , VariableDoesNotExist , InvalidTemplateLibrary ,  BLOCK_TAG_START , BLOCK_TAG_END , VARIABLE_TAG_START , VARIABLE_TAG_END ,  SINGLE_BRACE_START , SINGLE_BRACE_END , COMMENT_TAG_START , COMMENT_TAG_END ,  VARIABLE_ATTRIBUTE_SEPARATOR , get_library , token_kwargs , kwarg_re ,  render_value_in_context )
 from django . core . management . base import CommandError
          self . seek ( 0 )
      help = 'Deprecated. Use "check" command instead. ' + CheckCommand . help
    return self . _changed_data
          return [ ]
 value = self . get ( key , version = version )
              self . years = years
   def prepend_token ( self , token ) :
                      for model in model_list :
          nodelist = parser . parse ( ( 'endif' , ) )
          return 'https' if os . environ . get ( "HTTPS" ) == "on" else 'http'
    def same_origin ( url1 , url2 ) :
 if neg :
 try :
   def handle ( self , ** options ) :
          if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
  else :
  self . startElement ( name , attrs )
                      yield line
 neg = 1
 break
      DEFAULT_CHUNK_SIZE = 64 * 2 ** 10
              label_suffix = ( self . field . label_suffix if self . field . label_suffix is not None  else self . form . label_suffix )
              cursor . execute ( "DELETE FROM %s WHERE cache_key = %%s" % table , [ key ] )
          return "<TranslatableFile: %s>" % os . sep . join ( [ self . dirpath , self . file ] )
     def format ( value , format_string ) :
 import sys
  self . errors
 return str ( '%s%s%s' ) % ( value , self . sep , self . signature ( value ) )
 if dirname and not os . path . exists ( dirname ) :
   def get_version ( version = None ) :
 base56 = BaseConverter ( BASE56_ALPHABET )
 try :
                  c = self . resolve ( c )
 mtime = stat . st_mtime
  return format_html ( '<input{0} />' , flatatt ( final_attrs ) )
 from django . db import connections , DEFAULT_DB_ALIAS
 parser . add_argument ( '--symlinks' , '-s' , action = 'store_true' , dest = 'symlinks' ,  default = False , help = 'Follows symlinks to directories when examining '  'source code and templates for translation strings.' )
                  config [ 'mailhost' ] = self . as_tuple ( config [ 'mailhost' ] )
                  qs = pk . rel . to . _default_manager . get_queryset ( )
  else :
 if '()' in config :
 def callback ( self ) :
 return SpacelessNode ( nodelist )
   for t in Lexer ( src , origin ) . tokenize ( ) :
 self . id = id
  fixture_files = [ ]
 id_ = self . attrs . get ( 'id' , None )
               self . __dict__ [ "_wrapped" ] = value
 yield SubWidget ( self , name , value , attrs , choices )
 global _supported
  with transaction . atomic ( using = self . using ) :
 from django . core . mail . utils import DNS_NAME
          for widget in self . get_renderer ( name , value , attrs , choices ) :
    _urllib_parse_moved_attributes = [  MovedAttribute ( "ParseResult" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "SplitResult" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "parse_qs" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "parse_qsl" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urldefrag" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urljoin" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlparse" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlsplit" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlunparse" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlunsplit" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "quote" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "quote_plus" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "unquote" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "unquote_plus" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "urlencode" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "splitquery" , "urllib" , "urllib.parse" ) ,  ]
  else :
                      return _CacheInfo ( stats [ HITS ] , stats [ MISSES ] , maxsize , len ( cache ) )
 parser . delete_first_token ( )
 self . next = next
    def _sanitize_ipv4_mapping ( ip_str ) :
              self . reason_phrase = REASON_PHRASES . get ( self . status_code ,  'UNKNOWN STATUS CODE' )
 from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit
 from django . db import connections , DEFAULT_DB_ALIAS
      @ register . filter ( is_safe = False )
 context . render_context . push ( )
          for key in self . keyOrder :
  sign , digittuple , exponent = value . as_tuple ( )
 break
   self . extend_nodelist ( nodelist , compiled_result , token )
 if self not in state_frame :
          self . _validate_unique = True
          return [  Warning (  "MIDDLEWARE_CLASSES is not set." ,  hint = ( "Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. "  "django.contrib.sessions.middleware.SessionMiddleware, "  "django.contrib.auth.middleware.AuthenticationMiddleware, and "  "django.contrib.messages.middleware.MessageMiddleware were removed from the defaults. "  "If your project needs these middleware then you should configure this setting." ) ,  obj = None ,  id = '1_7.W001' ,  )  ]
                  field_params [ 'db_column' ] = col_name
 autoescape = autoescape and not isinstance ( value , SafeData )
   def url ( self , name ) :
   if ',' in args [ 1 ] :
   return self . new_objects
 last = root [ PREV ]
  else :
   self . _post_parse_error = False
                  os . remove ( tmp_path )
                  self . _count = self . object_list . count ( )
              fmt = config . get ( 'format' , None )
 self . _set_regex ( regex )
   else :
 root [ : ] = [ root , root , None , None ]
 raise NotImplementedError ( 'subclasses of Storage must provide an exists() method' )
 self . _raw_ipv6 = True
                  raise
 self . name = name
 break
 return FilterExpression ( token , self )
 response = http . HttpResponseBadRequest ( )
   def add ( self , data , conn_type , squash = True ) :
                      for ( k , v ) in type_ . __dict__ . items ( ) :
 result = [ ]
      if module_has_submodule ( app_config . module , module_to_search ) :
                              return result
                  if self . cdata_tag is not None :
 self . stream . flush ( )
  filename = ( 'utf-8' , '' , filename )
 if constant_arg :
                    raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
  def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  queryset = None , ** kwargs ) :
 if auto_id and '%s' in smart_text ( auto_id ) :
  parser . __loaded_blocks . append ( block_name )
  except OSError as e :
  except IndexError :
   return command . execute ( * args , ** defaults )
   def _get_filename ( self ) :
 saved_locale = translation . get_language ( )
   regex = property ( _get_regex , _set_regex )
          old_setting = context . autoescape
   def __repr__ ( self ) :
              encode = lambda k , v : urlencode ( { k : v } )
          if input_val in special_floats :
 TRANSLATOR_COMMENT_MARK = 'Translators'
 if newretval is not None :
 if k in seen :
    def pgettext ( context , message ) :
          candidate = str ( candidate )
 import sys
     def parse_time ( value ) :
 obj . children = copy . deepcopy ( self . children , memodict )
                      m = base
              getattr ( self , 'add_' + name ) ( media_attrs . get ( name , None ) )
              locks . lock ( fd , locks . LOCK_EX )
 from . registry import register , run_checks , tag_exists , Tags
   def execute ( self ) :
                   break
  with context . push ( ) :
 if len ( bits ) not in ( 2 , 3 ) :
                  data [ field . attname ] = self . _handle_fk_field_node ( field_node , field )
              raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be pickled.' )
  else :
  if self . feed [ 'author_link' ] is not None :
 from django . utils import six , lru_cache
      pass
 if self . _errors is None :
 return value . strftime ( format )
 return result
 args [ 0 ] = force_text ( args [ 0 ] )
                          raise
 options = self . render_options ( choices , [ value ] )
          self . _assert_mutable ( )
                      new_result . append ( item + i_item )
 self . bcc = list ( bcc )
 value = value . replace ( arg , '' )
 etags = ETAG_MATCH . findall ( etag_str )
 if self . errors and hasattr ( self . form , 'error_css_class' ) :
                  r = r [ : 12 ]
      def render_node ( self , node , context ) :
                           from django . core . exceptions import ImproperlyConfigured
    def _parse_header_params ( s ) :
    @ register . filter ( is_safe = True )
                  output . append ( "### %s = %s" % ( key , user_settings [ key ] ) )
          value = self . get ( key , version = version )
              model , deps = model_dependencies . pop ( )
     def _iterkeys ( self ) :
          mod = import_module ( taglib_module )
   class Command ( AppCommand ) :
              pathext = [ '' ]
  def add_arguments ( self , parser ) :
      return _trans . check_for_language ( lang_code )
                  value = value . replace ( replacement , '' )
 return name + '-clear'
 try :
          new_class = super ( RenameMethodsBase , cls ) . __new__ ( cls , name , bases , attrs )
 return True
   possibilities = self . reverse_dict . getlist ( lookup_view )
          timeout = params . get ( 'timeout' , params . get ( 'TIMEOUT' , 300 ) )
    except UnicodeError as e :
   if host [ - 1 ] == ']' :
          from importlib import find_loader as importlib_find
                  before_import_registry = copy . copy ( register_to . _registry )
                  lineno , offset = self . getpos ( )
 return html
 if not self . timezone :
          connection = connections [ self . using ]
  return int ( values [ 0 ] ) , ch
  else :
          result = getattr ( t , translation_function ) ( eol_message )
      if current_version >= ( 3 , 4 ) :
  return super ( BooleanField , self ) . to_python ( value )
                          if not os . path . isdir ( migrations_directory ) :
                  with open ( filename , 'wb' ) as outfile :
  super ( IntegerField , self ) . __init__ ( * args , ** kwargs )
   def item_attributes ( self , item ) :
          return [ ]
  else :
              if field not in self . errors :
 return iter ( getattr ( d , _itervalues ) ( ** kw ) )
                   doublecolon_start = index
              self . stream = open ( self . _get_filename ( ) , 'ab' )
          return self . streaming_content
   def write ( self , msg , style_func = None , ending = None ) :
 for key , value in data . items ( ) :
 for opt in self . option_list :
              data = self . to_python ( data )
 while ch != terminal_char :
  from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
  if not isinstance ( cookie , http_cookies . BaseCookie ) :
 get_language_bidi = lambda : settings . LANGUAGE_CODE in settings . LANGUAGES_BIDI
   for __ in iterator :
          self . _wrapped = self . _setupfunc ( )
          self . template_cache = { }
   else :
  vary_headers = cc_delim_re . split ( response [ 'Vary' ] )
          return type ( self ) . __bool__ ( self )
   def flatatt ( attrs ) :
          raise NotImplementedError ( 'subclasses of BaseArchive must provide an extract() method' )
   def get_resolved_arguments ( self , context ) :
  return upload
 @ stringfilter
          return len ( value )
   def message ( self ) :
  def __init__ ( self , value ) :
  return bool ( initial ) != bool ( data )
 self . version = params . get ( 'VERSION' , 1 )
     def load_template_source ( self , template_name , template_dirs = None ) :
          def parts ( ) :
   no_settings_commands = [  'help' , 'version' , '--help' , '--version' , '-h' ,  'compilemessages' , 'makemessages' ,  'startapp' , 'startproject' ,  ]
               if not isinstance ( node , TextNode ) :
 return self . forms [ index ]
          if self . deactivate :
 format_type = force_str ( format_type )
 break
 if hasattr ( self , '_regex_validator' ) and self . _regex_validator in self . validators :
 for root in settings . ALLOWED_INCLUDE_ROOTS :
   def getvalue ( self ) :
      class Rss201rev2Feed ( RssFeed ) :
   def blankout ( src , char ) :
                  return [ ]
    def add_root_elements ( self , handler ) :
 super ( SortedDict , self ) . __init__ ( data )
  elif isinstance ( self . obj , models . base . ModelBase ) :
              return True
              return smart_text ( auto_id ) % self . html_name
  if subcommand == 'help' :
                  self . bad_cookies = set ( )
      class LabelCommand ( BaseCommand ) :
     csrf_token = context . get ( 'csrf_token' , None )
 self . waiting_readers = 0
    stream . unget ( chunk [ header_end + 4 : ] )
              chunk_buffer = BytesIO ( chunk )
 is_templatized = file_ext in command . extensions
              app_configs = reversed ( list ( apps . get_app_configs ( ) ) )
 fp = six . StringIO ( )
   else :
  if option == 'with' :
          return False
 def title ( value ) :
 from django . core import checks
           try :
 from lib2to3 . fixer_util import find_indentation , Name , syms , touch_import
                  self . default_locale_path = self . locale_paths [ 0 ]
 os . write ( fd , current_chunk )
  else :
 for i , ( dirpath , f ) in enumerate ( locations ) :
                  s = six . text_type ( bytes ( s ) , encoding , errors )
      default_validators = [ validators . validate_slug ]
 self . keyOrder = list ( data ) if data else [ ]
              d = Decimal ( force_text ( float ( text ) ) )
 return obj
    if not isinstance ( self . object_list , list ) :
   else :
   if confirm == 'yes' :
  elif args [ - 2 ] == "as" :
                   raise NotImplementedError ( 'Awaiting Implementation' )
 if url . endswith ( '/' ) :
 context [ 'block' ] = block
              start , end = match . span ( )
              if not app_labels :
              self . namespaces = [ ]
  Module_six_moves_urllib_request . _moved_attributes = _urllib_request_moved_attributes
          raise TemplateSyntaxError ( "'%s' takes one argument" % bits [ 0 ] )
          return value
              return list ( self . iteritems ( ) )
 if literal_match :
 self . _changed_data = None
              file = data . temporary_file_path ( )
  output = [ ]
                  other = other . __cast ( )
          return six . text_type ( s ) . encode ( encoding , errors )
 __delitem__ = new_method_proxy ( operator . delitem )
                  if isinstance ( field , FileField ) :
                                  val = list ( val )
       def __init__ ( self ) :
 try :
    for app_name , model_list in manifest . items ( ) :
              if callable ( name ) :
 for frag in name :
  elif param in kwargs :
          raise TemplateDoesNotExist ( "No template names provided" )
 if isinstance ( other , BaseContext ) :
 if ch != '?' or escaped :
      def __init__ ( self , attrs = None ) :
  def clean ( self , value ) :
                              matches = False
        def is_aware ( value ) :
   raise
                      for line in sequence_sql :
 self . error_list = [ self ]
 if origin :
 self . to = list ( to )
  except ( IndexError ,  ValueError ,  KeyError ,  TypeError ) :
  value = value . strip ( )
   try :
          super ( HttpResponseNotAllowed , self ) . __init__ ( * args , ** kwargs )
  except http_cookies . CookieError :
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to create SQL for. Defaults to the '  '"default" database.' )
 for name in pattern . reverse_dict :
      def strftime ( self , fmt ) :
 substitutions [ 'clear_template' ] = self . template_with_clear % substitutions
from __future__ import unicode_literals
              new_path = path [ match . end ( ) : ]
                  return True
 dirs = [ ]
  if not os . access ( filename , os . W_OK ) :
   def __hash__ ( self ) :
  else :
                      return '%s-%s-%s' % ( y , m , d )
               if upload :
                      raise TemplateSyntaxError ( "Could not find variable at "  "start of %s." % token )
 self . directory_permissions_mode = (  directory_permissions_mode if directory_permissions_mode is not None  else settings . FILE_UPLOAD_DIRECTORY_PERMISSIONS  )
          pass
          raise parser . error_class ( "Unexpected end of expression in if tag." )
              migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
      errors = [ model . check ( ** kwargs )  for model in apps . get_models ( )  if app_configs is None or model . _meta . app_config in app_configs ]
 return mark_safe ( conditional_escape ( sep ) . join (  format_html ( format_string , * tuple ( args ) )  for args in args_generator ) )
 for t in type ( res ) . mro ( ) :
 for name in sorted ( commands_dict [ app ] ) :
   def __ne__ ( self , other ) :
              pass
  else :
          if isinstance ( format_module_path , six . string_types ) :
 return re . sub ( r'>\s+<' , '><' , force_text ( value ) )
 if result :
              return
              return value
  def __init__ ( self , include_html = False , email_backend = None ) :
          self . id = Tok . num
  __all__ = [ 'File' ]
 from django . utils . six . moves import copyreg
 from django . utils . encoding import force_text
      input_type = 'radio'
     def __len__ ( self ) :
 data = serializer ( ) . dumps ( obj )
 if result :
 result_args = new_args
  formatted = "\n" . join ( sorted ( formatted ) )
    if current_len <= length :
              self . stream = six . StringIO ( stream_or_string )
     class ExtendsNode ( Node ) :
              break
 for node in graph . leaf_nodes ( app_name ) :
  else :
      t = s . split ( '=' , 1 )
  exec ( """exec _code_ in _globs_, _locs_""" )
          for loc in locales :
 days = ( 'Mon' , 'Tue' , 'Wed' , 'Thu' , 'Fri' , 'Sat' , 'Sun' )
   def Z ( self ) :
    except DatabaseError :
              return '(NOT (%s: %s))' % ( self . connector , ', ' . join ( [ str ( c ) for c  in self . children ] ) )
    except Exception as e :
                  dirs = [ basedir ]
                      messages = ValidationError ( messages )
 if len ( bits ) != 2 :
              message = list ( error ) [ 0 ]
   class Command ( BaseCommand ) :
 if not email_message . recipients ( ) :
 from django . utils import six
 if dirname and not os . path . exists ( dirname ) :
 super ( QueryDict , self ) . setlist ( key , list_ )
 constant_string = constant_string . replace ( "\n" , "" )
          if six . PY3 :
          if offset is not None :
   for filename in filenames :
 field_notes . append ( "Field renamed because it ended with '_'." )
       def __init__ ( self , file ) :
          return ( p1 . scheme , p1 . hostname , p1 . port ) == ( p2 . scheme , p2 . hostname , p2 . port )
              raise InvalidTemplateLibrary ( "Unsupported arguments to "  "Library.tag: (%r, %r)" , ( name , compile_function ) )
              confirm = input ( """You have requested a flush of the database. This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state. Are you sure you want to do this?     Type 'yes' to continue, or 'no' to cancel: """ % connection . settings_dict [ 'NAME' ] )
   def render ( self , context ) :
                  match = True
 if year < 100 :
                   chunk = self . _read_limited ( size - len ( self . buffer ) )
 return base64 . urlsafe_b64encode ( s ) . rstrip ( b'\n=' )
  else :
    class WSGIHandler ( base . BaseHandler ) :
 with Archive ( path ) as archive :
 FormSet . fk = fk
   def _proxy_method ( self , * args , ** kwargs ) :
 self . args = args
                  break
   def __enter__ ( self ) :
  return msg
          value = dict . get ( self , key , default )
   if bad_app_labels :
 if value is not None :
     def make_naive ( value , timezone ) :
    @ register . filter ( is_safe = False )
 result = factory ( ** kwargs )
  except AmbiguityError :
     @ python_2_unicode_compatible
 if conflicts :
   def exit_command ( self ) :
              for error in self . errors . as_data ( ) [ field ] :
                  return format_html ( "" )
 def scheme ( self ) :
          if hasattr ( value , '_meta' ) :
              if six . PY2 :
   def f ( self ) :
   else :
  import codecs
 return msgid
  if max_length is not None :
              command . stdout . write ( 'processing file %s in %s\n' % ( self . file , self . dirpath ) )
           result = ungettext ( singular , plural , number )
  return '%s %s' % ( self . f ( ) , self . a ( ) )
    class FileUploadHandler ( object ) :
 from django . utils . _os import npath , upath
  elif args [ 1 ] == '404' :
   class DebugLexer ( Lexer ) :
    @ register . filter ( is_safe = True )
 def __init__ ( self , regex ) :
 from django . utils . six . moves import xrange
                      want_unicode = True
  _serializers = { }
 all_locales . extend ( map ( os . path . basename , locale_dirs ) )
   except ( ValueError , TypeError ) :
                          file_ , _ , _ = imp . find_module ( module_name , [ entry ] )
 import warnings
   def configure_filter ( self , config ) :
  if filename . endswith ( ( '/' , '\\' ) ) :
                      super ( AssignmentNode , self ) . __init__ ( takes_context , args , kwargs )
    def receive_data_chunk ( self , raw_data , start ) :
  try :
                      raise CommandError (  "errors happened while running msgattrib\n%s" % errors )
 instance . keyOrder = [ ]
          format = options . get ( 'format' )
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
      def addQuickElement ( self , name , contents = None , attrs = None ) :
   def write_message ( self , message ) :
      @ total_ordering
   def to_python ( self , value ) :
    @ register . filter ( is_safe = True )
      if response is None :
   def __str__ ( self ) :
                  return getattr ( instance , name ) ( )
     class CharField ( Field ) :
              if not self . required :
 return any ( form . has_changed ( ) for form in self )
 field_params . update ( new_params )
      if not is_valid_ipv6_address ( value ) :
   def has_next ( self ) :
 from django . conf import settings
 def get_callable ( lookup_view , can_fail = False ) :
  from collections import OrderedDict
 from django . core . exceptions import DisallowedHost , ImproperlyConfigured
 message_context = context_match . group ( 1 )
          return self
   self . xml . endElement ( "field" )
  write ( arg )
 if not match :
   if errors :
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 while i < len ( subject ) and subject [ i ] != c :
                  msg += '\n'
 self . _cache = _caches . setdefault ( name , { } )
 if not supported_platform or not is_a_tty :
              return self . _choices
              attrs = { }
  def __init__ ( self , * args , ** kwargs ) :
  final_attrs = self . build_attrs ( attrs , type = self . input_type , name = name )
 if widgets and f . name in widgets :
  finally :
  except KeyError :
   def __getstate__ ( self ) :
              dklen = None
 if not os . path . exists ( potfile ) :
    def parse_accept_lang_header ( lang_string ) :
                     return FILE_INPUT_CONTRADICTION
 handler . endElement ( "rss" )
 if item [ 'description' ] is not None :
 if o . microsecond :
              try :
   @ property
 self . field = field
  except HTMLParseError :
              return super ( DjangoJSONEncoder , self ) . default ( o )
   @ property
                      if not self . _is_expired ( f ) :
 return pickle . loads ( base64 . b64decode ( force_bytes ( value ) ) )
               if condition is not None :
                  result = self . configure_custom ( config )
          return getattr ( t , translation_function ) ( singular , plural , number )
  sio = BytesIO ( self . buffer )
  elif basetype == 'message' and subtype == 'rfc822' :
 f = super ( ImageField , self ) . to_python ( data )
     def pgettext ( context , message ) :
              title = list_ [ i ]
 return header_query . lower ( ) in existing_headers
              if hasattr ( value , 'close' ) :
              pot_path = os . path . join ( path , '%s.pot' % str ( self . domain ) )
 from django . core . management . base import ( BaseCommand , CommandError ,  CommandParser , handle_default_options )
 self . file = os . fdopen ( fd , mode , bufsize )
              seen_data = set ( )
 return '%02d' % self . g ( )
                  result . parent = self
 d = get_deserializer ( format )
   def _assert_mutable ( self ) :
          super ( Command , self ) . add_arguments ( parser )
    if ip_str . count ( ':' ) > 7 :
                      resource = resource_string ( app_config . name , pkg_name )
 from django . utils . functional import cached_property
 self . __to_language = to_language ( language )
 self . validate_key ( key )
     def a ( self ) :
 WRAPPING_PUNCTUATION = [ ( '(' , ')' ) , ( '<' , '>' ) , ( '[' , ']' ) , ( '&lt;' , '&gt;' ) , ( '"' , '"' ) , ( '\'' , '\'' ) ]
from __future__ import unicode_literals
 if renderer :
 try :
  options [ option ] = value
 if not hasattr ( template , 'render' ) :
   update_wrapper ( _dec , decorator , assigned = available_attrs ( decorator ) )
 if _file is not None :
  def __init__ ( self , parser , * args , ** kwargs ) :
  if self . parsed :
   def handle_app_config ( self , app_config , ** options ) :
   return base . DeserializedObject ( obj , m2m_data )
  inner_result , inner_args = [ ] , [ ]
  else :
              format_module_path = [ format_module_path ]
  def close ( self ) :
          return mod . register
    try :
 TOKEN_COMMENT = 3
    def emit_pre_migrate_signal ( create_models , verbosity , interactive , db ) :
  if force_text ( value ) != force_text ( orig ) :
     _format_cache = { }
              yield self [ name ]
            return '%s%s' % ( self . path , ( '?' + iri_to_uri ( self . META . get ( 'QUERY_STRING' , '' ) ) ) if self . META . get ( 'QUERY_STRING' , '' ) else '' )
   cache = _create_cache ( alias )
      def __init__ ( self , obj , * args ) :
 while i < list_length :
   @ property
              self . _post_render_callbacks . append ( callback )
 self . _expire_info [ key ] = self . get_backend_timeout ( timeout )
              top_dir = os . path . abspath ( path . expanduser ( target ) )
 processors . append ( func )
 g . flatten ( self , unixfrom = unixfrom )
 self . number = number
 self . _namespace_dict [ language_code ] = namespaces
    for attr , value in base . __dict__ . items ( ) :
                  attrs [ 'id' ] = auto_id
              self . _close_files ( )
import copy
              self [ key ] = result
 def join ( value , arg , autoescape = None ) :
                  self . stdout . write ( "  Unapplying %s..." % migration , ending = "" )
 if not script_url :
    class MultiWidget ( Widget ) :
   finally :
 if not file_name :
    if hasattr ( data , 'temporary_file_path' ) :
              continue
 if six . PY2 :
 i = self . pointer
              self . unclosed_block_tag ( parse_until )
  def add_arguments ( self , parser ) :
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
   return '\n' . join ( output )
      fmt = get_format ( 'DATE_FORMAT' )
   class Command ( BaseCommand ) :
                  continue
  output = [ ]
              self . __starttag_text = None
 if self . _fname is None :
              if migration . replaces :
 message = email_message . message ( )
   def luhn ( candidate ) :
   return result
 if subcommand_cls . use_argparse :
 parser . add_argument ( '--no-initial-data' , action = 'store_false' ,  dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
    @ register . tag
 if value in self . empty_values :
              raise ValueError ( "Key '%s' not found" % key )
  else :
 from django . core . management . color import color_style
   def __repr__ ( self ) :
              raise ValueError ( "Base36 conversion input too large." )
          super ( MovedModule , self ) . __init__ ( name )
  def handle ( self , ** options ) :
     class TypedMultipleChoiceField ( MultipleChoiceField ) :
  def add_arguments ( self , parser ) :
              yield key , self [ key ]
 import warnings
                  try :
 inplural = False
              raise TypeError ( "Non-integer base36 conversion input." )
  return format_html ( '<input{0} />' , flatatt ( final_attrs ) )
                      if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
              return path
     class SortedDict ( dict ) :
 return chunk [ : - rollback ]
  from django . utils import six
   def __str__ ( self ) :
  else :
   def __len__ ( self ) :
   def render ( self , context ) :
                  return ''
  except KeyError :
   delta = ( d - now ) if reversed else ( now - d )
          encoding = 'ascii'
 from django . utils . encoding import force_bytes
                  self . stdout . write ( self . style . MIGRATE_HEADING ( "Merging %s" % app_label ) )
              obj_pk = obj . _get_pk_val ( )
              ret = fcntl . flock ( _fd ( f ) , fcntl . LOCK_UN )
   path , module = name . rsplit ( '.' , 1 )
     class EntitiesForbidden ( DefusedXmlException ) :
      compare = lambda self , a , b : a > b
  else :
                  disable_existing = config . pop ( 'disable_existing_loggers' , True )
          return datetime . fromtimestamp ( os . path . getctime ( self . path ( name ) ) )
 try :
          app_name , target = options . pop ( 'name' ) , options . pop ( 'directory' )
                  self . waiting_writers += 1
 from django . utils . _os import safe_join , abspathu
              self . _callback = callback
  except ImportError :
              assert content is None
                  return cached
 from django . db . migrations . autodetector import MigrationAutodetector
                      curs . execute ( "\n" . join ( full_statement ) )
 return self . as_widget ( self . field . hidden_widget ( ) , attrs , ** kwargs )
 from django . core . management . sql import sql_flush
 pickled = None
 if val is None :
 super ( SplitDateTimeField , self ) . __init__ ( fields , * args , ** kwargs )
   return False
 import json
 response = sys . modules [ __name__ + ".moves.urllib_response" ]
  return ''
                         self . _mark_post_parse_error ( )
              os . makedirs ( basedir )
  from django . template . base import Variable , Library , VariableDoesNotExist
   def resolve ( self , path ) :
 self . _current = None
 translators_comment_start = None
 TOKEN_BLOCK = 2
  __all__ = [  'UploadFileException' , 'StopUpload' , 'SkipFile' , 'FileUploadHandler' ,  'TemporaryFileUploadHandler' , 'MemoryFileUploadHandler' , 'load_handler' ,  'StopFutureHandlers'  ]
   def render ( self , name , value , attrs = None , choices = ( ) ) :
   if pickled is not None :
 self . func = func
 used = name . pop ( 0 )
                      self . handle_data ( rawdata [ i : j ] )
   check_programs ( 'xgettext' )
  import copy
 from django . utils import dateformat , numberformat , datetime_safe
 output = [ pformat ( val ) for val in context ]
   field_dict = OrderedDict ( field_list )
          kwargs = { }
    def download ( self , url ) :
     __delitem__ = complain
              six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
          try :
 name = name [ : 255 - len ( ext ) ] + ext
          if name == "_wrapped" :
 from django . conf import settings
              msg [ 'Cc' ] = ', ' . join ( self . cc )
 return '\n' . join ( statements )
              self . _populate ( )
 return [ globalpath ] + list ( settings . LOCALE_PATHS )
 import sys
 def comment ( parser , token ) :
 while 1 :
                  result |= x ^ y
 return
  else :
          templatetags_modules = get_templatetags_modules ( )
          try :
  except OSError :
     class HttpResponse ( HttpResponseBase ) :
                  continue
          return self . position
          if media :
       import datetime
 for obj in queryset :
 return klass ( fail_silently = fail_silently , ** kwds )
  loop_dict [ 'revcounter' ] = len_values - i
 from itertools import dropwhile
          sys . modules [ __name__ + ".moves." + attr . name ] = attr
     class NoArgsCommand ( BaseCommand ) :
       data = None
   def __str__ ( self ) :
 error = sys . modules [ __name__ + ".moves.urllib_error" ]
              inner_text . append ( child . data )
 def __init__ ( self , key_to_list_mapping = ( ) ) :
   if common_ancestor is None :
   if cwords [ 0 ] == 'runfcgi' :
                  msgs = self . copy_plural_forms ( msgs , locale )
   class AutoEscapeControlNode ( Node ) :
                  values = [ ]
          return '' , ''
 for key in c . keys ( ) :
 field_params [ 'decimal_places' ] = row [ 5 ]
 from django . utils . six . moves import http_cookies
  connection = connections [ options [ 'database' ] ]
  except ValueError :
              self . nodelist_empty = NodeList ( )
  return self . get_connection ( fail_silently ) . send_messages ( [ self ] )
          super ( MultipleHiddenInput , self ) . __init__ ( attrs )
                if data_list [ 0 ] in self . empty_values :
 object_data = { }
              size = self . remaining
 value . configurator = self
 unhandled_params = list ( params )
  @ total_ordering
  related = related . natural_key ( )
          self . _wrapped = empty
 _meth_self = "__self__"
  user_settings = module_to_dict ( settings . _wrapped )
 self . items . append ( item )
   view_path = url_name or self . _func_path
 if ch not in ( '<' , '=' ) :
 MONTHS_AP = {  1 : pgettext_lazy ( 'abbrev. month' , 'Jan.' ) ,  2 : pgettext_lazy ( 'abbrev. month' , 'Feb.' ) ,  3 : pgettext_lazy ( 'abbrev. month' , 'March' ) ,  4 : pgettext_lazy ( 'abbrev. month' , 'April' ) ,  5 : pgettext_lazy ( 'abbrev. month' , 'May' ) ,  6 : pgettext_lazy ( 'abbrev. month' , 'June' ) ,  7 : pgettext_lazy ( 'abbrev. month' , 'July' ) ,  8 : pgettext_lazy ( 'abbrev. month' , 'Aug.' ) ,  9 : pgettext_lazy ( 'abbrev. month' , 'Sept.' ) ,  10 : pgettext_lazy ( 'abbrev. month' , 'Oct.' ) ,  11 : pgettext_lazy ( 'abbrev. month' , 'Nov.' ) ,  12 : pgettext_lazy ( 'abbrev. month' , 'Dec.' )  }
  def __init__ ( self , loopvars , sequence , is_reversed , nodelist_loop , nodelist_empty = None ) :
 from django . core import signals
  if has_old_option :
  renamed_methods = ( )
                  i += 1
                  kwargs [ name ] = parser . compile_filter ( value )
          attrs [ 'exclude' ] = exclude
   if response is None :
 def id_for_label ( self ) :
              self . _closable_objects . append ( value )
 iterkeys = _iterkeys
  else :
          return key in caches [ DEFAULT_CACHE_ALIAS ]
          return ''
    return self [ key ]
 content = force_bytes ( content )
  else :
              self . setlist ( k , v )
 if not self . use_argparse :
  except AttributeError :
          if hasattr ( self , 'error_dict' ) :
  self . stream = options . pop ( "stream" , six . StringIO ( ) )
  field_desc += ')'
              self . file_path = kwargs . pop ( 'file_path' )
   def utcoffset ( self , dt ) :
  return obj_pk
  if cache_timeout is None :
 if value is None :
  else :
                      html_class_attr = ' class="%s"' % css_classes
 if not hasattr ( obj , "_meta" ) :
 return fp . getvalue ( )
                      initial = self . initial . get ( name , field . initial )
          if not hasattr ( self , '_dimensions_cache' ) :
 _dict = func ( * resolved_args , ** resolved_kwargs )
      if not _serializers :
 self . open ( )
          return "<DjangoTranslation lang:%s>" % self . __language
          return list ( self ) != other
   def getlist ( self , key , default = None ) :
 return template , None
 readline . set_completer ( rlcompleter . Completer ( imported_objects ) . complete )
                      continue
           if settings . SECURE_PROXY_SSL_HEADER :
              if not nesting :
    new_name , num_repl = re . subn ( r'\W' , '_' , new_name )
          return self . _headers [ header . lower ( ) ] [ 1 ]
  return self . connection
   def translate_token ( self , token ) :
          return str ( self )
    return self . getlist ( key )
   else :
                      warnings . warn (  "`%s.%s` method should be renamed `%s`." %  ( class_name , old_method_name , new_method_name ) ,  deprecation_warning , 2 )
       def get_format_modules ( lang = None , reverse = False ) :
          cache = BaseDatabaseCache ( tablename , { } )
          fn = inotify_code_changed
 raise ImproperlyConfigured ( msg . format ( name = self . urlconf_name ) )
                  self . active_writers += 1
              file = tempfile . NamedTemporaryFile ( suffix = '.upload' ,  dir = settings . FILE_UPLOAD_TEMP_DIR )
 return tt . tm_isdst > 0
                  raise CommandError ( "Incompatible values of 'leave_locale_alone' "  "(%s) and 'can_import_settings' (%s) command "  "options." % ( self . leave_locale_alone ,  self . can_import_settings ) )
  except Exception :
 silent = True
   def _has_changed ( self , initial , data ) :
                      raise ValueError (  "'%s' has no field named '%s'." % ( self . __class__ . __name__ , field ) )
  else :
              if contains ( elt , inst ) :
              connection . check_constraints ( table_names = table_names )
 auto_id = self . form . auto_id
                  widget . is_localized = self . is_localized
   new_key = self . key_func ( key , self . key_prefix , version )
    class Lexer ( object ) :
     trim_whitespace_re = re . compile ( '\s*\n\s*' )
  i += 1
              retval = handler . upload_complete ( )
 @ stringfilter
  handler . endElement ( "author" )
   self . no_obsolete = options . get ( 'no_obsolete' )
  return '(%s: %s)' % ( self . connector , ', ' . join ( [ str ( c ) for c in  self . children ] ) )
   if pop_context :
 parser . add_argument ( '--ignore' , '-i' , action = 'append' , dest = 'ignore_patterns' ,  default = [ ] , metavar = 'PATTERN' ,  help = 'Ignore files or directories matching this glob-style pattern. '  'Use multiple times to ignore more.' )
 return obj_dict
    basedirs = set ( map ( os . path . abspath , filter ( os . path . isdir , basedirs ) ) )
    class DeclarativeFieldsMetaclass ( MediaDefiningClass ) :
     def _get_model ( model_identifier ) :
                  handler . file . close ( )
              if default is not RAISE_ERROR :
    def dictvalue ( t ) :
          kwargs [ 'safe' ] = safe
 if primary_keys :
          if isinstance ( settings . TIME_ZONE , six . string_types ) and pytz is not None :
      class TokenParser ( object ) :
              template = get_template_from_string ( source , origin , template_name )
  except ImportError :
           pid = 1
 return s
                  message = 'make sure the name begins with a letter or underscore'
 break
    def send_messages ( self , email_messages ) :
    def urlize ( text , trim_url_limit = None , nofollow = False , autoescape = False ) :
  elif ch == '|' :
              self . label = pretty_name ( name )
 from django . utils . deprecation import RemovedInDjango19Warning
 class dummy :
              return host
          raise EntitiesForbidden ( name , value , base , sysid , pubid , notation_name )
                  validate_ipv46_address ( ip_address )
 chunks = [ ]
                  raise ImproperlyConfigured (  "Creating a ModelForm without either the 'fields' attribute "  "or the 'exclude' attribute is prohibited; form %s "  "needs updating." % name  )
                  return self . filter_function ( func , ** flags )
                                  value = value . pk
          obj_dict = self . __dict__ . copy ( )
                  try :
 setattr ( self , attr , value )
                              field_type = 'ForeignKey(%s' % rel_to
     @ python_2_unicode_compatible
 use_grouping = use_grouping or force_grouping
  sys . modules [ __name__ + ".moves.urllib_response" ] = sys . modules [ __name__ + ".moves.urllib.response" ] = Module_six_moves_urllib_response ( __name__ + ".moves.urllib.response" )
  return wraps ( func ) ( _dec )
                      encoded = '"' + encoded + '"'
  else :
 return self . _html_output (  normal_row = '<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>' ,  error_row = '<tr><td colspan="2">%s</td></tr>' ,  row_ender = '</td></tr>' ,  help_text_html = '<br /><span class="helptext">%s</span>' ,  errors_on_separate_row = False )
 if expires is not None :
                tok = '"REGEX"'
 parser . add_argument ( '--list-tags' , action = 'store_true' , dest = 'list_tags' ,  help = 'List available tags.' )
  self . connection = None
    def write_items ( self , handler ) :
                  if model in excluded_models :
  data_value = data if data is not None else ''
          super ( BaseMemcachedCache , self ) . __init__ ( params )
     return errors
 from django . utils . deprecation import RemovedInDjango19Warning
 run_checks = registry . run_checks
 return
   def add_truncation_text ( self , text , truncate = None ) :
    def _initialize_handlers ( self ) :
 return self . filter ( name , func , ** flags )
              del attrs [ attr ]
 clean = lambda self , x : len ( x )
          path = self . path ( path )
              self . match_re = re . compile ( self . match )
   if sys . version_info [ : 2 ] == ( 2 , 7 ) :
 def __init__ ( self , META , input_data , upload_handlers , encoding = None ) :
  mapped_tokens . append ( self . translate_token ( token ) )
   try :
          return ord ( bs [ 0 ] )
  def add_arguments ( self , parser ) :
  except ( ValueError , TypeError ) :
 raise NotImplementedError ( "This backend doesn't support absolute paths." )
           raise EntitiesForbidden ( name , None , base , sysid , pubid , notation_name )
 se = open ( err_log , 'a+' , buffering )
  lines . append ( line )
  except ValidationError :
  except ValueError :
  old_style_list = True
 if "\n" in self . __starttag_text :
                          global invalid_var_format_string
  result = self . __class__ ( )
 global _supported
 _url_drive_re = re . compile ( '^([a-z])[:|]' , re . I )
  except AttributeError :
  if not language_code_re . search ( lang_code ) :
 inverse_match = False
  cache_key = ( format_type , lang )
                  for model in model_list :
          return self . get_fqdn ( )
                      continue
                      if filename . endswith ( '.mo' ) :
 if hasattr ( self , '_coerce' ) :
  setattr ( self . _wrapped , name , value )
  else :
          s = s [ : site ] + syear + s [ site + 4 : ]
          self . _caches = local ( )
 @ stringfilter
                  return False
    @ register . filter ( is_safe = True )
 format = force_str ( default or get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ] )
   def end_serialization ( self ) :
 def url_patterns ( self ) :
  return render_value_in_context ( value , context )
 collect = [ ]
 file . seek ( 0 )
              return lambda x : x
  options = { }
  return self . _wrapped . __dict__
                      middle = middle [ : - len ( closing ) ]
 def __init__ ( self , mode = 'w+b' , bufsize = - 1 , suffix = '' , prefix = '' ,  dir = None ) :
          duplicate = copy ( super ( BaseContext , self ) )
              msg = "Invalid HTTP_HOST header: %r." % host
 value . configurator = self
   def clear ( self ) :
                   self . _done = True
    setattr ( form . instance , self . fk . get_attname ( ) , self . instance . pk )
          node . source = token . source
              break
   class MultiPartParser ( object ) :
 return _i18n_cache_key_suffix ( request , cache_key )
              yield v
   def _set_regex ( self , regex ) :
 def make_list ( value ) :
 for k , v in self . choices :
          if instance is not None :
                      try :
   def incr ( self , key , delta = 1 , version = None ) :
 self . files = files or { }
   try :
  bits = urlsplit ( location )
                  _error_files . append ( filename )
              MIMEText . __init__ ( self , text , subtype , charset )
 from xml . dom import pulldom
   if not response . has_header ( 'Last-Modified' ) :
          if 'warning' in kwargs :
   else :
   class ContextPopException ( Exception ) :
          return ord ( buf [ i ] )
 return resolved_args , resolved_kwargs
   return '\n' . join ( output )
   def get_version ( self ) :
 node = CycleNode ( values )
              if callable ( name ) :
                            errors . append ( self . get_unique_error_message ( unique_check ) )
              raise AttributeError ( "This method is available only on the view class." )
              ext = base [ - 4 : ] + ext
          if app_config . models_module is None :
                      shutil . rmtree ( path_to_remove ,  onerror = rmtree_errorhandler )
 if base . lower ( ) . endswith ( '.tar' ) :
               return 0
          ULONG_PTR = c_ulong
               ttl = force_text ( ttl )
  except Exception :
      return ( form_class is not None and (  hasattr ( form_class , '_meta' ) and  ( form_class . _meta . fields is not None or  form_class . _meta . exclude is not None )  ) )
 def get_default_prefix ( cls ) :
          value = ungettext ( "%(size)d byte" , "%(size)d bytes" , bytes ) % { 'size' : bytes }
                      continue
 return force_text ( self . prepare_value ( initial_value ) ) != force_text ( data_value )
  Module_six_moves_urllib_robotparser . _moved_attributes = _urllib_robotparser_moved_attributes
      _meth_func = "im_func"
          from django . conf import settings
  except Exception as e :
 from django . utils . encoding import force_str
   def created_time ( self , name ) :
              value = None
    possible_sizes = [ x . chunk_size for x in upload_handlers if x . chunk_size ]
 yield "#   * Rearrange models' order"
 self . validate_name ( app_name , "app" )
  return f
  else :
                              from __future__ import absolute_import
   return list ( zip ( * flatten_result ( result ) ) )
 return { 'STATIC_URL' : settings . STATIC_URL }
    def static ( request ) :
  def decorator ( klass ) :
   if options . get ( "list" , False ) :
  self . backout . append ( self . pointer )
          value = list . __getitem__ ( self , key )
  def add_item_elements ( self , handler , item ) :
 if 'charset' in content_params :
                      if not self . compile_filter_error ( token , e ) :
                      lineno = lineno + self . __starttag_text . count ( "\n" )
                  self . emit_post_migrate ( verbosity , interactive , database )
  FILE_MODIFIED = 1
  else :
  output , errors = p . communicate ( )
                  yield self . choice ( obj )
     self . instance = construct_instance ( self , self . instance , opts . fields , construct_instance_exclude )
  headerlist = cache . get ( cache_key , None )
  if not bytes :
  for i in range ( 0 , self . total_form_count ( ) ) :
                          raise
  return list ( _serializers )
                  self . remove_potfiles ( )
 from django . utils . encoding import force_text
 def truncatechars ( value , arg ) :
   if func is None :
          key = self . make_key ( key , version = version )
 stamp = _time . mktime ( tt )
          if value :
    def close ( self ) :
 return do_ifequal ( parser , token , False )
 indexbytes = operator . getitem
    def _createdir ( self ) :
          name , val = forbid_multi_line_headers ( name , val , self . encoding )
 doublecolon_start = - 1
 if day_of_year <= ( 8 - jan1_weekday ) and jan1_weekday > 4 :
  if BLOCK_CONTEXT_KEY not in context . render_context :
 trans_bit . append ( bit )
 parser . add_argument ( '--no-location' , action = 'store_true' , dest = 'no_location' ,  default = False , help = "Don't write '#: filename:line' lines." )
   def __getitem__ ( self , key ) :
 result = super ( TimestampSigner , self ) . unsign ( value )
 if row_data and None not in row_data :
                      attrvalue = attrvalue [ 1 : - 1 ]
              return ''
 lbp = 0
 ext_list = [ ]
                  raise CommandError ( "The %s file has a BOM (Byte Order Mark). "  "Django only supports .po files encoded in "  "UTF-8 and without any BOM." % po_path )
 s_len = 0
   def handle_field ( self , obj , field ) :
          return self . as_table ( )
   def render ( self , context ) :
              os . environ [ 'DJANGO_LIVE_TEST_SERVER_ADDRESS' ] = options [ 'liveserver' ]
              self . add_error ( None , e )
 acceptable_endblocks = ( 'endblock' , 'endblock %s' % block_name )
 child_nodelists = ( 'nodelist' , )
      help = ( "Creates a Django app directory structure for the given app "  "name in the current directory or optionally in the given "  "directory." )
  else :
              self . stdout . write ( '\n' . join ( sorted ( registry . tags_available ( ) ) ) )
              if row [ 4 ] is None or row [ 5 ] is None :
                              file_ , _ , _ = imp . find_module ( module_name , [ entry ] )
  if not self . allow_empty_file and not file_size :
 output = options . get ( 'output' )
 from django . utils . timesince import timesince , timeuntil
    class Command ( BaseCommand ) :
    to_delete . add ( model )
 default_validators = [ validators . URLValidator ( ) ]
                          try :
    self . _name = name
  if path . exists ( absolute_path ) :
                      os . makedirs ( filename )
          opts = self . _meta
  continue
   width = six . text_type ( len ( six . text_type ( len ( lines ) ) ) )
  else :
          self . _post = post
                      obj = None
    def next_char ( input_iter ) :
   return default_key_func
 handler . addQuickElement ( "link" , self . feed [ 'link' ] )
  return mark_safe ( '' . join ( bits ) )
 while escaped or ch != ']' :
 try :
                  self . timezone = get_default_timezone ( )
 parts = parts [ : - 1 ]
 if tzinfo == 'Z' :
      if not qs . ordered :
  return numberformat . format (  value ,  get_format ( 'DECIMAL_SEPARATOR' , lang , use_l10n = use_l10n ) ,  decimal_pos ,  get_format ( 'NUMBER_GROUPING' , lang , use_l10n = use_l10n ) ,  get_format ( 'THOUSAND_SEPARATOR' , lang , use_l10n = use_l10n ) ,  force_grouping = force_grouping  )
    class URLInput ( TextInput ) :
 bits = token . split_contents ( )
   def recipients ( self ) :
 for app_dir in app_dirs :
          return path . decode ( fs_encoding )
                  self . xml . characters ( smart_text ( related_att ) )
   if format_module_path is None :
     class BaseModelForm ( BaseForm ) :
   @ property
              result . setlist ( key , value )
          super ( URLValidator , self ) . __init__ ( ** kwargs )
 bits = bits [ : - 2 ]
              return '%s=%s' % ( t [ 0 ] , t [ 1 ] )
   def _set_name ( self , name ) :
 exp = pickle . load ( f )
  else :
 UnlockFileEx = windll . kernel32 . UnlockFileEx
              raise TemplateSyntaxError ( "No named cycles in template. '%s' is not defined" % name )
  try :
            if self . _request_middleware is None :
          if not support_legacy :
   __all__ = [  'get_cache' , 'cache' , 'DEFAULT_CACHE_ALIAS' , 'InvalidCacheBackendError' ,  'CacheKeyWarning' , 'BaseCache' ,  ]
      def pbkdf2 ( password , salt , iterations , dklen = 0 , digest = None ) :
          self . value = value
              self . file_path = getattr ( settings , 'EMAIL_FILE_PATH' , None )
   empty = object ( )
  try :
          os . environ [ 'DJANGO_SETTINGS_MODULE' ] = options . settings
   def render ( self , name , value , attrs = None , choices = ( ) ) :
                  current = settings . TEMPLATE_STRING_IF_INVALID
 return self . id
  num_sent = 0
 DIGIT_PATTERN = re . compile ( r'^\d+$' )
 from django . utils import six
                  return value . pk
   return __wrapper__
 if self . required and not value :
  except ( ValueError , TypeError ) :
  elif isinstance ( template , six . string_types ) :
              return self . handle_merge ( loader , conflicts )
                  if targets [ 0 ] [ 1 ] is None :
                          errors . append ( field . error_messages [ 'incomplete' ] )
 if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
                httpd . daemon_threads = True
  mail = EmailMultiAlternatives ( '%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) ,  message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . MANAGERS ] ,  connection = connection )
   def P ( self ) :
 from __future__ import unicode_literals
 try :
          self . _request_middleware = self . _view_middleware = self . _template_response_middleware = self . _response_middleware = self . _exception_middleware = None
         while True :
   def bound_data ( self , data , initial ) :
 for choice in value :
    plan = [ ( executor . loader . graph . nodes [ targets [ 0 ] ] , options [ 'backwards' ] ) ]
 return formatdate ( epoch_seconds , usegmt = True )
      from collections import UserList
          provided = list ( provided )
   requires_system_checks = False
 context . update ( unpacked_vars )
  else :
   def strip_entities ( value ) :
   if subcommand in no_settings_commands :
 nodelist_loop = parser . parse ( ( 'else' , end_tag ) )
     sys . modules [ __name__ + ".moves.urllib" ] = Module_six_moves_urllib ( __name__ + ".moves.urllib" )
 yield "#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table"
     def deactivate_all ( ) :
  if not isinstance ( s , six . string_types ) :
 proxy = lazy ( func , resultclass ) ( ** kwargs )
      compare = lambda self , a , b : a is not b
                  if supported_code . startswith ( generic_lang_code + '-' ) :
 return re . sub ( r'(?u)[^-\w.]' , '' , s )
                              raise ValueError ( "Non-reversible reg-exp portion: '(?P%s'" % ch )
  else :
  else :
          return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . upper ( )
 sort = complain
  except Exception as e :
              yield
 from django . utils import six
  from django . apps import apps
 msg [ 'From' ] = self . extra_headers . get ( 'From' , self . from_email )
 self . code = code
 hlen = digest ( ) . digest_size
                  try :
  except AttributeError :
 try :
 from django . utils . six import StringIO
     @ register . tag ( 'if' )
  if name is not None :
 wrapper = warn_about_renamed_method ( class_name , * renamed_method )
 return ( source , make_origin ( display_name , loader , name , dirs ) )
  else :
    kwargs = { }
 ns_pattern = ns_pattern + extra
 PY3 = sys . version_info [ 0 ] == 3
 self . file . seek ( pos )
  msg = ""
 for key , value in six . iterlists ( self ) :
   def __iter__ ( self ) :
  else :
  for domain in domains :
 table = connections [ db ] . ops . quote_name ( self . _table )
          raise ValueError ( "'package' not set to a string" )
 self . resolver_match = None
   def pop ( self , k , * args ) :
          return self . dicts [ - 1 ] . get ( key , otherwise )
 if related_att is not None :
          return caches [ DEFAULT_CACHE_ALIAS ] != other
        if ( not normcase ( final_path ) . startswith ( normcase ( base_path + sep ) ) and  normcase ( final_path ) != normcase ( base_path ) and  dirname ( normcase ( base_path ) ) != normcase ( base_path ) ) :
              dec_part = dec_part [ : decimal_pos ]
     def configure_handler ( self , config ) :
 for message in email_messages :
 import datetime
                  self . waiting_readers += 1
 try :
      global _default
          global _supported
 if fd >= 0 :
          ch , escaped = next ( pattern_iter )
                          loaded_objects_in_fixture += 1
   else :
   def __iter__ ( self ) :
   def module_has_submodule ( package , module_name ) :
          name = args [ - 1 ]
    executor = MigrationExecutor ( connection , self . migration_progress_callback )
              continue
   def skip_past ( self , endtag ) :
 if six . PY3 :
  output_transaction = True
   self . indent ( 1 )
  if hasattr ( self , '_post' ) :
    def _resolve ( self ) :
 def is_hidden ( self ) :
                          self . xml . startElement ( "natural" , { } )
   def is_iterable ( x ) :
              cookie_value = self . COOKIES [ key ]
 raise NotImplementedError ( 'subclasses of Storage must provide a url() method' )
          _anonymous_ = [ '_offset' ]
          result = self . __class__ ( '' , mutable = True , encoding = self . encoding )
  except KeyError :
    _PROTECTED_TYPES = six . integer_types + ( type ( None ) , float , Decimal ,  datetime . datetime , datetime . date , datetime . time )
   def _proxy_method ( self , * args , ** kwargs ) :
 if error . params :
  else :
     class RenderContext ( BaseContext ) :
                  i += 1
          super ( DateTimeBaseInput , self ) . __init__ ( attrs )
 if not os . path . exists ( self . _dir ) :
 from django . utils . functional import LazyObject
                            field_type , field_params , field_notes = self . get_field_type ( connection , table_name , row )
                              extra_params [ 'primary_key' ] = True
              return output
 def __init__ ( self , fail_silently = False , ** kwargs ) :
 if f is None :
  raise
  default_translation = translation ( settings . LANGUAGE_CODE )
   def send_messages ( self , email_messages ) :
 from django . utils import six
 import re
          return ( "%" + six . text_type ( arg ) ) % value
 if commit :
 return t . render ( context )
 for pattern in reversed ( self . url_patterns ) :
  for shell in available_shells :
    @ register . filter ( is_safe = True )
  if data is None :
 msgid = '<%s.%s.%s%s@%s>' % ( utcdate , pid , randint , idstring , idhost )
  if cc :
          for dict_ in self . dicts :
 raise NotImplementedError ( 'subclasses of Storage must provide a created_time() method' )
      if row [ 6 ] :
 self . current_app = current_app
 if meta is None :
 default_error_messages = {  'invalid' : _ ( 'Enter a valid URL.' ) ,  }
          if name not in data :
  else :
          _templatetags_modules = [ ]
  ALLOWED_VARIABLE_CHARS = ( 'abcdefghijklmnopqrstuvwxyz'  'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.' )
    def __setitem__ ( self , name , val ) :
              checks = self . registered_checks
  self . label_suffix = label_suffix if label_suffix is not None else _ ( ':' )
                      return
   except TypeError :
 class Media ( object ) :
 new_migration = subclass ( "0001_squashed_%s" % migration . name , app_label )
 statements = sql_all ( app_config , self . style , connection )
   def __setitem__ ( self , key , value ) :
                            if not isinstance ( item , ( list , tuple ) ) :
 MIMEMultipart . __setitem__ ( self , name , val )
          self . _size = size
      def _checkLevel ( level ) :
          return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)" % (  self . _func_path , self . args , self . kwargs , self . url_name , self . app_name , self . namespaces )
                          rel_to = "self" if relations [ i ] [ 1 ] == table_name else table2model ( relations [ i ] [ 1 ] )
  cc = dict ( _to_tuple ( el ) for el in  cc_delim_re . split ( response [ 'Cache-Control' ] ) )
     class WSGIRequest ( http . HttpRequest ) :
       except self . LibraryValueNotFoundException :
 if status is not None :
    DjangoSafeDumper . add_representer ( decimal . Decimal , DjangoSafeDumper . represent_decimal )
   def decompress ( self , value ) :
  from django . core . exceptions import ValidationError
  super ( Command , self ) . execute ( * args , ** options )
   def urlencode ( self , safe = None ) :
 return value . tzinfo is None or value . tzinfo . utcoffset ( value ) is None
   def _format_value ( self , value ) :
  if data_list [ 1 ] in self . empty_values :
 @ stringfilter
 raise NotImplementedError ( 'subclasses of BaseCache must provide a get() method' )
  return value
 def __init__ ( self , * args , ** kwargs ) :
 from django . utils . deprecation import RenameMethodsBase , RemovedInDjango19Warning
  elif self . nodelist_false :
   def _populate ( self ) :
  else :
  else :
                  sentinal = bit [ 2 ] + ')'
                              continue
          self . name = name
          del _active . value
    def tzname ( self , dt ) :
   else :
 from django . utils . translation import get_language
  except UnicodeEncodeError :
 for i , char in enumerate ( text ) :
 obj . widgets = copy . deepcopy ( self . widgets )
 parts = fixture_name . rsplit ( '.' , 2 )
  else :
 while model_dependencies :
  value = super ( DictWrapper , self ) . __getitem__ ( key )
 from __future__ import unicode_literals
              f . seek ( 0 )
  except NameError :
          if self . _isdst ( dt ) :
  from django . utils . deprecation import RemovedInDjango19Warning
  if six . PY2 :
   def decompress ( self , value ) :
 get_function_defaults = operator . attrgetter ( _func_defaults )
    def all_valid ( formsets ) :
              return clean_ipv6_address ( value , self . unpack_ipv4 )
                      continue
              raise TemplateSyntaxError ( "Searching for value. Expected another "  "value but found end of string: %s" %  subject )
                   import_string ( backend )
 content_type = info . get ( 'content-type' )
 v = ValueError ( 'Cannot resolve %r: %s' % ( s , e ) )
              handler . addQuickElement ( "dc:creator" , item [ "author_name" ] , { "xmlns:dc" : "http://purl.org/dc/elements/1.1/" } )
 for key , value in data . items ( ) :
   return s
 from django . utils . deprecation import RemovedInDjango19Warning
 from django . forms . fields import IntegerField , BooleanField
 self . hashvalue = hash ( tup )
                                  self . stderr . write ( "    Failed to install index for %s.%s model: %s\n" % ( app_name , model . _meta . object_name , e ) )
                  used += '.' + frag
               return context . render_context
              self . _callback = None
 return s . getvalue ( )
 os . chdir ( our_home_dir )
   class UTC ( tzinfo ) :
  else :
      help = "Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available."
  else :
               definition = { }
        try :
 self . indent ( 0 )
          return False
   def handle_data ( self , d ) :
from __future__ import unicode_literals
               if value :
   class BaseLoader ( object ) :
 if attrs :
 import sys
 parts . append ( "(?P<%s>%s)" % ( groupid , tok . regex ) )
  return timesince ( value )
   if fixture_name != 'initial_data' and not fixture_files :
 from django . core . management . base import BaseCommand , CommandError
 ERROR = 40
          return _time . tzname [ self . _isdst ( dt ) ]
  from binascii import Error as BinasciiError
  zfile . close ( )
                      natural = value . natural_key ( )
 result += ':' + ipv4_address
  viewname = parser . compile_filter ( bits [ 1 ] )
 return sys . modules [ name ]
  except LookupError :
                  priority = float ( priority )
 if hasattr ( signal , 'SIGTTOU' ) :
   def log_message ( self , format , * args ) :
      def __init__ ( self , attrs = None , check_test = None ) :
  if isinstance ( pattern , RegexURLResolver ) :
 extra_params . update ( params )
                      content = content . decode ( 'utf-8' )
                  raise ValueError ( 'Unable to set formatter '  '%r: %s' % ( formatter , e ) )
   new_ip = [ ]
          if filter_name in self . filters :
   def get_field_type ( self , connection , table_name , row ) :
              kwargs [ 'localize' ] = True
              raise CommandError ( "Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?" % (  migration_name , app_label ) )
          tt = ( dt . year , dt . month , dt . day ,  dt . hour , dt . minute , dt . second ,  dt . weekday ( ) , 0 , 0 )
 if self . body :
 writelines = property ( lambda self : self . file . writelines )
                  raise RawPostDataException ( "You cannot access body after reading from request's data stream" )
  def _get_num_pages ( self ) :
          super ( JsLexer , self ) . __init__ ( self . states , 'reg' )
   def handle_m2m_field ( self , obj , field ) :
   def colorize ( text = '' , opts = ( ) , ** kwargs ) :
 return '%02d' % self . data . month
 return base_lang in settings . LANGUAGES_BIDI
     def method_decorator ( decorator ) :
                   return self . add_truncation_text ( text [ : end_index or 0 ] ,  truncate )
 inplural = False
          language_code = get_language ( )
 parser . add_argument ( '--noinput' ,  action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' ) ,
   def U ( self ) :
 silent = False
              daemonize = False
     class ModelMultipleChoiceField ( ModelChoiceField ) :
 self . stream . write ( b'-' * 79 )
                               oldroot = root
              invalid_tag = next ( tag for tag in tags if not checks . tag_exists ( tag ) )
  mail = EmailMultiAlternatives ( '%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) ,  message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . ADMINS ] ,  connection = connection )
              try :
  else :
                          out . write ( blankout ( p , 'F' ) )
 _format_modules_cache = { }
      import termios
              self . add_filters ( result , filters )
 from django . conf import settings
 hint = "\n\tHINT: %s" % self . hint if self . hint else ''
   FILTER_SEPARATOR = '|'
 prec = abs ( p ) + units + 1
  elif closing_tag :
                  self . test_runner = arg [ len ( option ) : ]
 from xml . sax import handler
 language_code = get_language ( )
                  if not isinstance ( node , ExtendsNode ) :
 self . new_method_name = new_method_name
 get_function_closure = operator . attrgetter ( _func_closure )
   if isinstance ( boundary , six . text_type ) :
          return
   DEFAULT_LOCALE_ENCODING = get_system_encoding ( )
              full_statement . append ( '    %s%s' % ( line , ',' if i < len ( table_output ) - 1 else '' ) )
              return ipv4_unpacked
  style = dummy ( )
  else :
              other_dict = args [ 0 ]
          if sender and getattr ( sender , 'handles_files' , False ) :
   return BlockNode ( block_name , nodelist )
 pass
          raise ImproperlyConfigured (  "Calling modelform_factory without defining 'fields' or "  "'exclude' explicitly is prohibited."  )
  else :
  errors = [ ]
                  if field . serialize :
          return False
          get = ( pformat ( GET_override )  if GET_override is not None  else pformat ( request . GET ) )
 class BaseValidator ( object ) :
      from functools import total_ordering
    for hextet in ip_str . split ( ':' ) :
  elif size < len ( self . buffer ) :
              return list_ , False
    def render ( self ) :
   @ property
                name = self . fk . name
              return t . to_language ( )
    except StopIteration :
   return self . _count
              for item in six . iteritems ( dict_ ) :
   def is_ajax ( self ) :
 dict . __setitem__ ( self , key , http_cookies . Morsel ( ) )
  else :
 paths = [ force_text ( p ) for p in paths ]
  references_to_delete = { }
 try :
  def __init__ ( self , request = None ) :
  from django . http import Http404
 cache_key = 'views.decorators.cache.cache_page.%s.%s.%s.%s' % (  key_prefix , method , url . hexdigest ( ) , ctx . hexdigest ( ) )
                      plural_form_line = force_str ( m . group ( 'value' ) )
          retval = self . expression ( )
   def start_doctype_decl ( self , name , sysid , pubid , has_internal_subset ) :
          try :
  if message is not None :
   def parse_file_upload ( self , META , post_data ) :
  excluded_models . add ( model )
 if self . takes_context :
 date_keys = ( 'updateddate' , 'pubdate' )
              handler . startElement ( 'item' , self . item_attributes ( item ) )
 parser . add_argument ( '--empty' , action = 'store_true' , dest = 'empty' , default = False ,  help = "Create an empty migration." )
              repr_attr = self . _setupfunc
          return ModelChoiceIterator ( self )
 e . django_template_source = source
                  handle_m2m ( relobj )
          if not hasattr ( self , '_post' ) :
 _iteritems = "items"
 from django . db import connection
 singular = [ ]
   name = self . get_available_name ( name )
                  self . _callback_strs . add ( pattern . _callback_str )
 message = _ ( 'Enter a valid value.' )
 if simple_url_re . match ( middle ) :
  _add_doc ( b , """Byte literal""" )
              if e . errno != errno . ENOENT :
 if conflicts and not self . merge :
    def _iterlists ( self ) :
   else :
    raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 words [ i ] = mark_safe ( '%s%s%s' % ( lead , middle , trail ) )
 if isinstance ( item . get ( 'unique_id_is_permalink' ) , bool ) :
        class FixedOffset ( tzinfo ) :
  except LookupError :
    if weight >= 6 :
 from django . utils import formats
  from django . core . management . base import AppCommand
 attachment = SafeMIMEText ( content , subtype , encoding )
                  from django . core . servers . fastcgi import FASTCGI_OPTIONS
                   raise TemplateSyntaxError (  "'%s' received multiple values for keyword argument '%s'" %  ( name , param ) )
    def get_full_path ( self ) :
  num_loopvars = len ( self . loopvars )
 _func_code = "func_code"
          self . vars = variables
                  b64encoded = b64encoded . decode ( 'latin1' )
   cwords = os . environ [ 'COMP_WORDS' ] . split ( ) [ 1 : ]
              value = Decimal ( value )
   def validate ( self , value ) :
          return sorted ( value , key = Variable ( arg ) . resolve )
  import django
      _dec . _decorated_function = getattr ( func , '_decorated_function' , func )
                  output . append ( "%s = %s  ###" % ( key , user_settings [ key ] ) )
          return isinstance ( other , self . __class__ ) and ( self . limit_value == other . limit_value ) and ( self . message == other . message ) and ( self . code == other . code )
   def __repr__ ( self ) :
          handler . addQuickElement ( "title" , self . feed [ 'title' ] )
                  if nodelist . contains_nontext :
 validate_ipv4_address = RegexValidator ( ipv4_re , _ ( 'Enter a valid IPv4 address.' ) , 'invalid' )
  except KeyError :
   full_module_name = package_name + '.' + module_name
 if self . is_bound :
     kwargs [ 'stream' ] = None
 handler . endElement ( "entry" )
                  j = day_of_year + ( 7 - weekday ) + ( jan1_weekday - 1 )
  elif _locs_ is None :
 def streaming_content ( self ) :
  def __call__ ( self , environ , start_response ) :
              pos = self . file . tell ( )
 timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 )
 interactive = options . get ( 'interactive' )
          return mark_safe ( result )
                  try :
from __future__ import unicode_literals
              if force_text ( val ) not in pks :
  return dict ( self )
      if settings . TEMPLATE_DEBUG and display_name :
  if secure :
 if router . allow_migrate ( self . using , obj . object . __class__ ) :
  except Resolver404 as e :
 if 100 <= response . status_code < 200 or response . status_code in ( 204 , 304 ) :
   def handle ( self , * fixture_labels , ** options ) :
                  replaces . append ( ( migration . app_label , migration . name ) )
       def __init__ ( self , file ) :
 from django . utils import six
          return self . text
          for line in text . splitlines ( True ) :
 from email . mime . text import MIMEText
 import io
          msg = message . message ( )
          super ( SplitHiddenDateTimeWidget , self ) . __init__ ( attrs , date_format , time_format )
          filepath = self . filepath . resolve ( context )
   def as_json ( self , escape_html = False ) :
  try :
  module = type ( 'BadSerializerModule' , ( object , ) , {  'Deserializer' : bad_serializer ,  'Serializer' : bad_serializer ,  } )
   def _create_message ( self , msg ) :
   except ValueError :
    def __iter__ ( self ) :
  return results
      return ugettext ( message )
    def handle ( self , * test_labels , ** options ) :
   def tag ( self , name = None , compile_function = None ) :
          if not self . closed :
 from django . utils . text import Truncator , wrap , phone2numeric
 if text == '' and len ( opts ) == 1 and opts [ 0 ] == 'reset' :
 for f in file_list :
 b64encoded = base64 . b64encode ( pickled )
 for iso_input in ISO_INPUT_FORMATS . get ( format_type , ( ) ) :
              try :
          cleaned_line = comment_re . sub ( r"\1" , line ) . strip ( )
 from django . db import connections , DEFAULT_DB_ALIAS
          return value
  from django . db . models import ForeignKey
          self . _archive . list ( * args , ** kwargs )
      from django . conf . locale import LANG_INFO
 self . event_stream = pulldom . parse ( self . stream , self . _make_parser ( ) )
 if hasattr ( os , 'utime' ) :
          return "<%s: %s>" % ( self . __class__ . __name__ ,  super ( MultiValueDict , self ) . __repr__ ( ) )
              if isinstance ( self . _regex , six . string_types ) :
 def cleanup_url ( url ) :
  return mark_safe ( '\n' . join ( output ) )
              self . _cache [ key ] = pickled
   class Options ( object ) :
 result = self . configurator . convert ( value )
               ttl = force_text ( ttl )
 if six . PY2 :
  except ImportError :
    return mark_safe ( '' . join ( force_text ( n ) for n in nodelist ) )
  field = Model . _meta . get_field ( field_name )
 if len ( bits ) < 1 :
   def full_clean ( self ) :
     class ModelFormMetaclass ( DeclarativeFieldsMetaclass ) :
   message_context = None
   self . template_cache [ key ] = ( template , None )
              raise TemplateSyntaxError ( "'%s' tag with name '%s' appears more than once" % ( bits [ 0 ] , block_name ) )
      widget = ClearableFileInput
          return self . path < other . path
   objects = serializers . deserialize ( ser_fmt , fixture ,  using = self . using , ignorenonexistent = self . ignore )
              if this_bases is None :
          now = datetime . datetime ( now . year , now . month , now . day )
          while True :
 formatted = (  color_style ( ) . ERROR ( force_str ( e ) )  if e . is_serious ( )  else color_style ( ) . WARNING ( force_str ( e ) )  for e in issues )
  if hasattr ( mw_instance , 'process_template_response' ) :
  if bmatch . group ( 1 ) :
  elif self . name and os . path . exists ( self . name ) :
 import threading
   if not inhibit_post_migrate :
   if self . no_obsolete :
  if col_name . lower ( ) . find ( '__' ) >= 0 :
   return new_name , field_params , field_notes
  WEEKDAYS_ABBR = {  0 : _ ( 'Mon' ) , 1 : _ ( 'Tue' ) , 2 : _ ( 'Wed' ) , 3 : _ ( 'Thu' ) , 4 : _ ( 'Fri' ) ,  5 : _ ( 'Sat' ) , 6 : _ ( 'Sun' )  }
          memoryview = buffer
    def activate ( language ) :
 while i < len ( subject ) and subject [ i ] not in ( ' ' , '\t' ) :
 doy = self . year_days [ self . data . month ] + self . data . day
              del self . _headers [ header . lower ( ) ]
                  exclude . append ( f . name )
          if self not in context . render_context :
   connection_class = smtplib . SMTP_SSL if self . use_ssl else smtplib . SMTP
 try :
    class EmailInput ( TextInput ) :
   incomment = False
          return datetime . datetime . strptime ( force_str ( value ) , format ) . date ( )
                          raise CommandError (  "Unable to find a locale path to store translations for file %s" % file_path )
                                result [ - 1 ] = Choice ( [ None , result [ - 1 ] ] )
          parser . add_argument ( 'args' , metavar = self . label , nargs = '+' )
  elif common_prefix is None :
          for i , line in enumerate ( lines ) :
  return self . _text_words ( length , truncate )
 if keys :
          def activate ( timezone ) :
  from __future__ import unicode_literals
   def dictConfig ( config ) :
 kwargs [ 'instance' ] = self . _existing_object ( pk )
            return s . get_data ( ) + s . rawdata
          value = super ( TypedChoiceField , self ) . clean ( value )
   @ cached_property
                result = SimpleLazyObject ( self . _setupfunc )
              value = formats . sanitize_separators ( value )
 if not parent :
   def smart_split ( text ) :
   def language ( self ) :
  from django . utils . encoding import force_text , force_str
              return (  _lazy_proxy_unpickle ,  ( func , self . __args , self . __kw ) + resultclasses  )
  if item [ 'pubdate' ] is not None :
 sublist_item = None
  for root , dirs , files in os . walk ( template_dir ) :
 requires_system_checks = False
 result . key = key
              app_configs = None
  else :
  full_file = os . path . join ( self . path , f )
 tok = toks [ name ]
              package_name = package . __name__
  if ( getattr ( meta , 'fields' , fields ) is None and  getattr ( meta , 'exclude' , exclude ) is None ) :
   def enter_command ( self , command , token ) :
                  raise TypeError ( "end must be None or a string" )
  return _default
  initial_set = set ( force_text ( value ) for value in self . prepare_value ( initial ) )
   if len ( hextet ) > 1 :
 try :
 HttpResponse . content . fset ( self , value )
 return len ( value . split ( ) )
 result = 0
          self . autoescape = autoescape
 if not old_style_list :
 with io . open ( pofile , 'w' , encoding = 'utf-8' ) as fp :
              if isinstance ( other , Promise ) :
              return False
  except ( ValueError , TypeError ) :
 if val is not None :
 return strip_tags ( value )
 if over_bytes :
          return self . _reverse_with_prefix ( lookup_view , '' , * args , ** kwargs )
  from django . core . exceptions import ValidationError
  import warnings
 output , hidden_fields = [ ] , [ ]
 return escape ( value )
  super ( ContentFile , self ) . __init__ ( stream_class ( content ) , name = name )
          self . stream = stream
  key , value = match . groups ( )
   @ property
   def __setitem__ ( self , header , value ) :
   class _OFFSET_UNION ( Union ) :
  else :
   level = config . pop ( 'level' , None )
     def render_value_in_context ( value , context ) :
 def __init__ ( self , attrs = None , choices = ( ) ) :
                                          cursor . execute ( sql )
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a specific database to load '  'fixtures into. Defaults to the "default" database.' )
      setattr ( Module_six_moves_urllib_parse , attr . name , attr )
              result . append ( self . create_token ( last_bit , ( upto , upto + len ( last_bit ) ) , False ) )
 if options . settings :
                  if e . errno != errno . ENOENT :
 self . queryset = field . queryset
 if file_obj :
 utcdate = time . strftime ( '%Y%m%d%H%M%S' , time . gmtime ( timeval ) )
   def e ( self ) :
 return True
                      self . stdout . write ( errors )
  except ValueError :
 return '%s-%s' % ( self . prefix , field_name ) if self . prefix else field_name
          to_unicode = lambda s : force_text ( s , strings_only = True )
              from django . conf import settings
 from django . utils . deprecation import RemovedInDjango19Warning
  if strings_only and is_protected_type ( s ) :
   qs = self . queryset . filter ( ** { '%s__in' % key : value } )
  return value
 return message
  return int ( value )
   @ register . filter ( is_safe = True )
      pass
  except IndexError :
 self . _input_data = input_data
                  if is_templatized :
 parts . append ( decimals )
 ignore = options . pop ( 'ignorenonexistent' , False )
 result . key = key
  self . _cache [ key ] = value
           yes , no , maybe = bits [ 0 ] , bits [ 1 ] , bits [ 1 ]
 if not f . blank and not form_field . required and field_value in form_field . empty_values :
  elif total_forms > self . max_num >= 0 :
                  sent = self . _send ( message )
              return False
  else :
 if isinstance ( rhs , SafeText ) :
 itervalues = _itervalues
  else :
 exclude = options . get ( 'exclude' )
  except ValidationError :
   def empty_variable ( self , token ) :
 endblock_re = re . compile ( r"""^\s*endblocktrans$""" )
   class BaseMemcachedCacheMethods ( RenameMethodsBase ) :
 tables = connection . introspection . table_names ( )
  except ImportError :
              if self . active_writers == 0 and self . waiting_writers == 0 and self . active_readers == 0 :
    def end_object ( self , obj ) :
 continue
  self . bad_cookies . add ( key )
              del self . _expire_info [ key ]
               return sys . modules [ name ] is not None
     class StringOrigin ( Origin ) :
 length = int ( num )
          self . tagtype = tagtype
 from django . middleware . csrf import get_token
 from django . utils . deconstruct import deconstructible
  except ( ValueError , InvalidOperation , TypeError , UnicodeEncodeError ) :
  return [ m2m_convert ( c ) for c in node . getElementsByTagName ( "object" ) ]
 if truncate_text :
   default_error_messages = {  'required' : _ ( 'This field is required.' ) ,  }
               context [ self . var_name ] = [ ]
  __iter__ = _iterkeys
              iter ( patterns )
              value = self . val_expr . resolve ( context )
  return message
          return settings . LANGUAGE_CODE
                      os . mkdir ( target_dir )
          pass
   def size ( self , name ) :
              tmp = url . rstrip ( '/' )
 import errno
 del bits [ : 1 ]
                      help_text = ''
  except re . error as e :
   class UnreadablePostError ( IOError ) :
 result . key = key
                  result . append ( self . create_token ( bit , in_tag ) )
 from django . utils . module_loading import import_string
          self . func = func
              return ''
      options = FASTCGI_OPTIONS . copy ( )
                  for path in paths :
                       result = user_function ( * args , ** kwds )
                  return default
  self . cdata_tag = tag . lower ( )
              return ''
              return int ( time . mktime ( self . data . timetuple ( ) ) )
     @ python_2_unicode_compatible
  if prefix is None :
          raise TemplateSyntaxError ( "'for' statements should use the format"  " 'for x in y': %s" % token . contents )
                      if sub_match :
  else :
   def __copy__ ( self ) :
 parser = MultiPartParser ( META , post_data , self . upload_handlers , self . encoding )
  else :
 return tt . tm_isdst > 0
  __all__ = [  'SimpleCookie' , 'parse_cookie' , 'HttpRequest' , 'QueryDict' ,  'RawPostDataException' , 'UnreadablePostError' , 'build_request_repr' ,  'HttpResponse' , 'StreamingHttpResponse' , 'HttpResponseRedirect' ,  'HttpResponsePermanentRedirect' , 'HttpResponseNotModified' ,  'HttpResponseBadRequest' , 'HttpResponseForbidden' , 'HttpResponseNotFound' ,  'HttpResponseNotAllowed' , 'HttpResponseGone' , 'HttpResponseServerError' ,  'Http404' , 'BadHeaderError' , 'fix_location_header' , 'JsonResponse' ,  'conditional_content_removal' ,  ]
   class FixUnicode ( fixer_base . BaseFix ) :
  else :
  url = 'mailto:%s@%s' % ( local , domain )
 def __init__ ( self , context , base , sysid , pubid ) :
     templatetags_modules_candidates = [ 'django.templatetags' ]
          if site in sites2 :
   __all__ = ( 'Storage' , 'FileSystemStorage' , 'DefaultStorage' , 'default_storage' )
  closed = property ( _get_closed )
 for app_config in apps . get_app_configs ( ) :
     class SplitDateTimeWidget ( MultiWidget ) :
   def page ( self , number ) :
          self . _encoding = value
          form = self . form (  auto_id = self . auto_id ,  prefix = self . add_prefix ( '__prefix__' ) ,  empty_permitted = True ,  )
  if last == 2 :
  kwargs = dict ( ( k , config [ k ] ) for k in config if valid_ident ( k ) )
 from django . db . migrations . loader import MigrationLoader , AmbiguityError
              call_command (  'flush' ,  verbosity = max ( self . verbosity - 1 , 0 ) ,  interactive = False ,  database = db ,  reset_sequences = False ,  inhibit_post_migrate = True ,  )
              input_attrs = dict ( value = force_text ( v ) , ** final_attrs )
 use_grouping = use_grouping and grouping > 0
              signals . got_request_exception . send ( sender = self . __class__ , request = request )
              return ''
              return raw_data
      def get_quantifier ( ch , input_iter ) :
   def validate_number ( self , number ) :
 self . setlistdefault ( key ) . append ( value )
   def new ( self , values = None ) :
 if len ( bits ) == 4 :
 default_validators = [ ]
          if self . field . empty_label is not None :
              return SafeBytes ( data )
 self . charset = charset
 from itertools import product
  from io import BytesIO
          self . stream . write ( message . message ( ) . as_bytes ( ) + b'\n' )
 token = parser . next_token ( )
 self . validate_key ( key )
 if value and not self . valid_value ( value ) :
          pass
  with connections [ db ] . cursor ( ) as cursor :
 s = s [ end : ]
     class _LazyModule ( types . ModuleType ) :
          parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database onto which to '  'open a shell. Defaults to the "default" database.' )
 if callable ( getattr ( self . stream , 'getvalue' , None ) ) :
          return iri
    REASON_PHRASES = {  100 : 'CONTINUE' ,  101 : 'SWITCHING PROTOCOLS' ,  102 : 'PROCESSING' ,  200 : 'OK' ,  201 : 'CREATED' ,  202 : 'ACCEPTED' ,  203 : 'NON-AUTHORITATIVE INFORMATION' ,  204 : 'NO CONTENT' ,  205 : 'RESET CONTENT' ,  206 : 'PARTIAL CONTENT' ,  207 : 'MULTI-STATUS' ,  208 : 'ALREADY REPORTED' ,  226 : 'IM USED' ,  300 : 'MULTIPLE CHOICES' ,  301 : 'MOVED PERMANENTLY' ,  302 : 'FOUND' ,  303 : 'SEE OTHER' ,  304 : 'NOT MODIFIED' ,  305 : 'USE PROXY' ,  306 : 'RESERVED' ,  307 : 'TEMPORARY REDIRECT' ,  308 : 'PERMANENT REDIRECT' ,  400 : 'BAD REQUEST' ,  401 : 'UNAUTHORIZED' ,  402 : 'PAYMENT REQUIRED' ,  403 : 'FORBIDDEN' ,  404 : 'NOT FOUND' ,  405 : 'METHOD NOT ALLOWED' ,  406 : 'NOT ACCEPTABLE' ,  407 : 'PROXY AUTHENTICATION REQUIRED' ,  408 : 'REQUEST TIMEOUT' ,  409 : 'CONFLICT' ,  410 : 'GONE' ,  411 : 'LENGTH REQUIRED' ,  412 : 'PRECONDITION FAILED' ,  413 : 'REQUEST ENTITY TOO LARGE' ,  414 : 'REQUEST-URI TOO LONG' ,  415 : 'UNSUPPORTED MEDIA TYPE' ,  416 : 'REQUESTED RANGE NOT SATISFIABLE' ,  417 : 'EXPECTATION FAILED' ,  418 : "I'M A TEAPOT" ,  422 : 'UNPROCESSABLE ENTITY' ,  423 : 'LOCKED' ,  424 : 'FAILED DEPENDENCY' ,  426 : 'UPGRADE REQUIRED' ,  428 : 'PRECONDITION REQUIRED' ,  429 : 'TOO MANY REQUESTS' ,  431 : 'REQUEST HEADER FIELDS TOO LARGE' ,  500 : 'INTERNAL SERVER ERROR' ,  501 : 'NOT IMPLEMENTED' ,  502 : 'BAD GATEWAY' ,  503 : 'SERVICE UNAVAILABLE' ,  504 : 'GATEWAY TIMEOUT' ,  505 : 'HTTP VERSION NOT SUPPORTED' ,  506 : 'VARIANT ALSO NEGOTIATES' ,  507 : 'INSUFFICIENT STORAGE' ,  508 : 'LOOP DETECTED' ,  510 : 'NOT EXTENDED' ,  511 : 'NETWORK AUTHENTICATION REQUIRED' ,  }
    proxy = lazy ( lambda ** kwargs : NumberAwareString ( ) , NumberAwareString ) ( ** kwargs )
                          pk_value = None
              yield 'day'
      _prefixes = local ( )
   def create_var ( self , value ) :
 try :
      return getattr ( self , _assertRaisesRegex ) ( * args , ** kwargs )
 return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
                  self . handle_starttag ( tag , attrs )
              return 1 , ch2
                  raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : choice } ,  )
     class Deserializer ( base . Deserializer ) :
                       if lookup == 'date' :
 assert is_iterable ( new_errors ) , (  "The function %r did not return a list. All functions registered "  "with the checks registry must return a list." % check )
 if value in ( None , '' ) :
 self . initial_extra = kwargs . pop ( 'initial' , None )
      def compress_sequence ( sequence ) :
  args = token . contents . split ( )
   raise KeyError ( key )
              raise TypeError
              if self . stream is not None :
              obj . save ( )
          t = select_template ( template_name , dirs )
              temp_lib = Library ( )
  return six . unichr ( c )
                  mimetype = DEFAULT_ATTACHMENT_MIME_TYPE
  if field == NON_FIELD_ERRORS :
 INITIAL_FORM_COUNT = 'INITIAL_FORMS'
          for k , v in six . iteritems ( dict_ ) :
           return force_str ( super ( BaseMemcachedCache , self ) . make_key ( key , version ) )
 if self . _errors is None :
   output = [ ]
   return WidthRatioNode ( parser . compile_filter ( this_value_expr ) ,  parser . compile_filter ( max_value_expr ) ,  parser . compile_filter ( max_width ) ,  asvar = asvar )
  try :
  self . start_serialization ( )
 supports_microseconds = False
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Will squash the following migrations:" ) )
 server_port = str ( self . META [ 'SERVER_PORT' ] )
              for medium , paths in data . items ( ) :
                      if varargs is None :
  _ , rest = token . contents . split ( None , 1 )
                  t = Template ( output , name = filepath )
 table = connections [ db ] . ops . quote_name ( self . _table )
             chunk_size = 1024
    def delete ( self , key , version = None ) :
 self . use_tls = settings . EMAIL_USE_TLS if use_tls is None else use_tls
  return end , next
 if commit :
              return
  elif type ( s ) != six . text_type :
 def __init__ ( self , name , sysid , pubid ) :
 import re
 kwarg_format = match and match . group ( 1 )
 self . per_page = int ( per_page )
 pass
 roots = set ( dir ( cls ) ) & set ( convert )
      import pickle
 self . xgettext_options = self . xgettext_options [ : ] + [ '--no-location' ]
  arg = args [ 1 ]
   if not hasattr ( content , 'chunks' ) :
  from django import http
 if self . data . hour == 0 :
                  if value == k or text_value == force_text ( k ) :
          self . tags . update ( lib . tags )
              obj = form . instance
   def get_connection ( backend = None , fail_silently = False , ** kwds ) :
  return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . upper ( )
          try :
    stderr = getattr ( self , 'stderr' , OutputWrapper ( sys . stderr , self . style . ERROR ) )
  if self . translate :
  elif isinstance ( o , decimal . Decimal ) :
 convert = {  '__lt__' : [ ( '__gt__' , lambda self , other : not ( self < other or self == other ) ) ,  ( '__le__' , lambda self , other : self < other or self == other ) ,  ( '__ge__' , lambda self , other : not self < other ) ] ,  '__le__' : [ ( '__ge__' , lambda self , other : not self <= other or self == other ) ,  ( '__lt__' , lambda self , other : self <= other and not self == other ) ,  ( '__gt__' , lambda self , other : not self <= other ) ] ,  '__gt__' : [ ( '__lt__' , lambda self , other : not ( self > other or self == other ) ) ,  ( '__ge__' , lambda self , other : self > other or self == other ) ,  ( '__le__' , lambda self , other : not self > other ) ] ,  '__ge__' : [ ( '__le__' , lambda self , other : ( not self >= other ) or self == other ) ,  ( '__gt__' , lambda self , other : self >= other and not self == other ) ,  ( '__lt__' , lambda self , other : not self >= other ) ]  }
 import os
    def get_git_changeset ( ) :
      help = 'Prints the SQL statements for resetting sequences for the given app name(s).'
 if self . sep not in signed_value :
 from email import ( charset as Charset , encoders as Encoders ,  message_from_string , generator )
from importlib import import_module
 binary_type = str
 def __init__ ( self , host = None , port = None , username = None , password = None ,  use_tls = None , fail_silently = False , use_ssl = None , timeout = None ,  ** kwargs ) :
   else :
              self . stdout . ending = None
          self . context . pop ( )
 self . add_fallback ( default_translation )
  def __init__ ( self , max_value = None , min_value = None , max_digits = None , decimal_places = None , * args , ** kwargs ) :
      errors = [ ]
    class MediaDefiningClass ( type ) :
          cookies = ( pformat ( COOKIES_override )  if COOKIES_override is not None  else pformat ( request . COOKIES ) )
  def __init__ ( self , streaming_content = ( ) , * args , ** kwargs ) :
              media_attrs = kwargs
 self . help_texts = getattr ( options , 'help_texts' , None )
            media = sorted ( self . _css . keys ( ) )
          for base in bases [ : : - 1 ] :
   def extract ( self , to_path ) :
 for dict_ in self . dicts :
              sys . stderr . write ( "fork #1 failed: (%d) %s\n" % ( e . errno , e . strerror ) )
      url = ''
   yield '%s\n' % line [ : space - 1 ]
 if name . startswith ( '.' ) :
              args = list ( args )
                              try :
  else :
 from django . utils . safestring import mark_safe
   class Command ( BaseCommand ) :
  if self . feed [ 'subtitle' ] is not None :
 root = nonlocal_root [ 0 ]
    def __deepcopy__ ( self , memo ) :
 import warnings
 from django . utils . six . moves . urllib . parse import parse_qsl , urlencode , quote , urljoin , urlsplit
              try :
                  if isinstance ( s , bytes ) :
 if field . rel . through . _meta . auto_created :
 break
   def save_new_objects ( self , commit = True ) :
              try :
          return (  isinstance ( other , RegexValidator ) and  self . regex . pattern == other . regex . pattern and  self . regex . flags == other . regex . flags and  ( self . message == other . message ) and  ( self . code == other . code ) and  ( self . inverse_match == other . inverse_match )  )
              return list ( self . iterlists ( ) )
  elif ch == ')' :
   else :
   def s ( self ) :
          if not self . _mutable :
      @ lru_cache . lru_cache ( maxsize = None )
     class MultiValueDictKeyError ( KeyError ) :
                 return context [ 'forloop' ]
  sites = [ ]
                  name , ext = os . path . splitext ( name )
 if csrf_token is not None :
          return False
  cls . __dispatch [ klass ] [ funcname ] = method
 self . META = environ
   def exists ( self , name ) :
 from django . db . migrations . state import ProjectState
          if self . has_key ( key , version ) :
   raise TypeError ( "Lazy object returned unexpected type." )
              return SafeText ( t )
  if options [ 'method' ] in ( 'prefork' , 'fork' ) :
                warnings . warn (  'Using SplitDateTimeWidget with DateTimeField is deprecated. '  'Use SplitDateTimeField instead.' ,  RemovedInDjango19Warning , stacklevel = 2 )
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
  finally :
    if opts . model :
              contents = conditional_escape ( contents )
 from django . core . management . sql import sql_indexes
                      rawdata = force_str ( rawdata )
      def __init__ ( self , table , params ) :
                      result . extend ( [ result [ - 1 ] ] * ( count - 1 ) )
 while s [ : 1 ] == b';' :
  else :
   return '' . join ( pieces )
                          g = g . strip ( "'" )
          return self . _headers . values ( )
 from django . utils import lru_cache
  except signing . BadSignature :
   def __exit__ ( self , exc , value , tb ) :
     elif ch in "*?+{" :
      zbuf = BytesIO ( )
  return result . lower ( )
             cache_key += '.%s' % getattr ( request , 'LANGUAGE_CODE' , get_language ( ) )
  from datetime import datetime , timedelta , tzinfo
          return list ( iter ( self ) )
 if len ( bits ) != 3 :
                          data [ field . attname ] = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
   def make_aware ( value , timezone ) :
   def clean ( self , value ) :
              i += 1
  except AttributeError :
          os . rmdir ( original_path )
                      raise
  return False
 def __init__ ( self , out , style_func = None , ending = '\n' ) :
              for arg in args :
 msg [ 'Subject' ] = self . subject
 @ stringfilter
      pass
     class RadioFieldRenderer ( ChoiceFieldRenderer ) :
  def add_arguments ( self , parser ) :
    class JSONSerializer ( object ) :
    DNS_NAME = CachedDnsName ( )
  else :
 from django . utils . encoding import force_text
   def resolve_template ( self , template ) :
              return bytes ( ( i , ) )
 return value . strftime ( format )
   def write_items ( self , handler ) :
   def find_commands ( management_dir ) :
    add_move ( MovedModule ( "_dummy_thread" , "dummy_thread" ) )
  warnings . warn (  "get_declared_fields is deprecated and will be removed in Django 1.9." ,  RemovedInDjango19Warning ,  stacklevel = 2 ,  )
              settings . INSTALLED_APPS
  from django . utils . deprecation import RemovedInDjango19Warning
  value = new_value
 try :
  else :
  else :
  try :
                  os . unlink ( pot_path )
   except :
    migrations_to_squash = [  executor . loader . get_migration ( al , mn )  for al , mn in executor . loader . graph . forwards_plan ( ( migration . app_label , migration . name ) )  if al == migration . app_label  ]
              return self . filter_expr . resolve ( context )
 return from_current_timezone ( result )
 key = bytes_to_text ( key , self . encoding )
 parser . add_argument ( '-i' , '--interface' , choices = self . shells , dest = 'interface' ,  help = 'Specify an interactive interpreter interface. Available options: "ipython" and "bpython"' )
 from django . utils . encoding import force_text
                  groupid = "t%d" % tok . id
      return _trans . deactivate_all ( )
 safe_data [ key ] = value
   except OSError as e :
 from django . core . management . base import BaseCommand , CommandError
          widgets = ( DateInput ( attrs = attrs , format = date_format ) ,  TimeInput ( attrs = attrs , format = time_format ) )
    def _is_expired ( self , f ) :
  sys . modules [ __name__ + ".moves.urllib_parse" ] = sys . modules [ __name__ + ".moves.urllib.parse" ] = Module_six_moves_urllib_parse ( __name__ + ".moves.urllib_parse" )
             for handler in self . _upload_handlers :
              with open ( filepath , 'r' ) as fp :
          from django . core . mail import get_connection
  else :
 from django . db import connections , router , transaction , DEFAULT_DB_ALIAS
    def color_style ( ) :
 from django . utils . safestring import mark_safe
 if len ( bits ) < 4 :
  else :
                  total_forms = self . max_num
          exp = self . _expire_info . get ( key , - 1 )
  elif isinstance ( obj , EscapeData ) :
              ch2 = None
 ctx = hashlib . md5 ( )
  from django . core . management . base import AppCommand
  return result
   def Y ( self ) :
          time_str = time_str . decode ( 'utf-8' )
    def sql_all ( app_config , style , connection ) :
  def __init__ ( self , exception ) :
              timeout = self . default_timeout
   @ upload_handlers . setter
 import warnings
   __all__ = (  'ModelForm' , 'BaseModelForm' , 'model_to_dict' , 'fields_for_model' ,  'save_instance' , 'ModelChoiceField' , 'ModelMultipleChoiceField' ,  'ALL_FIELDS' , 'BaseModelFormSet' , 'modelformset_factory' ,  'BaseInlineFormSet' , 'inlineformset_factory' ,  )
 def split_leading_dir ( self , path ) :
     def get_tag_uri ( url , date ) :
 if isinstance ( error , ValidationError ) :
  if self . data . hour > 12 :
     class Critical ( CheckMessage ) :
                          tried . append ( [ pattern ] )
   self . filters = filters
  if os . path . exists ( self . file_path ) and not os . path . isdir ( self . file_path ) :
  elif msg :
              filename = file
                      raise ValueError ( 'Unable to convert '  '%r at %r' % ( value , rest ) )
 dict . __setitem__ ( self , key , M )
              lines [ i ] = ( "%0" + width + "d. %s" ) % ( i + 1 , escape ( line ) )
   def rss_attributes ( self ) :
 import warnings
  else :
    for f in file_field_list :
          attrs [ 'error_messages' ] = error_messages
          self . coerce = kwargs . pop ( 'coerce' , lambda val : val )
  _mtimes = { }
   optimizer = MigrationOptimizer ( )
  start_response ( force_str ( status ) , response_headers )
                      raise e
              self . xml . characters ( field . value_to_string ( obj ) )
   else :
 if cleaned_line . endswith ( ";" ) :
 for form in valid_forms :
 response [ 'Vary' ] = ', ' . join ( vary_headers + additional_headers )
          nodelist_empty = None
 quit_command = 'CTRL-BREAK' if sys . platform == 'win32' else 'CONTROL-C'
          m = regex . match ( date )
                  definition [ 'fg' ] = fg
              version = self . version
   self . end_serialization ( )
          super ( ErrorList , self ) . __init__ ( initlist )
              if self . field . choice_cache is None :
              try :
 def __init__ ( self ) :
 def pprint ( value ) :
          return type ( self ) . __bool__ ( self )
                       key = make_key ( args , kwds , typed ) if kwds or typed else args
          return value [ 0 ]
              return exit_code
   def __getitem__ ( self , index ) :
  cache_key = _generate_cache_header_key ( key_prefix , request )
                  bit = self . render_node ( node , context )
  if ch2 == '?' :
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
  from django . conf import settings
   def next_page_number ( self ) :
  raise TemplateDoesNotExist ( error_msg )
 found = True
 import re
  elif isinstance ( value , datetime . time ) :
   work_file = os . path . join ( self . dirpath , thefile )
 return (  output ,  force_text ( errors , DEFAULT_LOCALE_ENCODING , strings_only = True ) ,  p . returncode  )
                  final_output . extend ( connection . creation . sql_for_pending_references ( refto , style , pending_references ) )
   elif name in lib . filters :
      resource_string = None
          zfile . write ( item )
   try :
 self . msguniq_options = self . msguniq_options [ : ] + [ '--no-location' ]
          key = self . make_key ( key , version = version )
 from django . utils import six
  for obj in queryset . iterator ( ) :
 pass
              if isinstance ( expires , datetime . datetime ) :
    if callable ( callback ) :
              self . full_clean ( )
 from django . core . management . sql import sql_all
   except IOError :
 self . json_kwargs . pop ( 'stream' , None )
   def render ( self , name , value , attrs = None ) :
 msg_count += 1
  bf_errors = self . error_class ( [ conditional_escape ( error ) for error in bf . errors ] )
 self . content_type = content_type
 def regroup ( parser , token ) :
                          self . stdout . write ( "copying plural forms: %s\n" % plural_form_line )
  else :
 app = model . _meta . app_label
          self . flo = flo
   except SuspiciousOperation as e :
   def validate_ipv6_address ( value ) :
              retval = self . tokens [ self . pos ]
          try :
   def unsign ( self , value , max_age = None ) :
   return result
               return False
              sub = '.dev%s' % git_changeset
 from django . utils . functional import lazy
   def emit ( self , record ) :
 for accept_lang , unused in parse_accept_lang_header ( accept ) :
 self . negated = negated
                  raise ImproperlyConfigured (  '"%s" is not a valid regular expression: %s' %  ( regex , six . text_type ( e ) ) )
   def __setstate__ ( self , state ) :
              number = int ( number )
      must_be_first = True
 import decimal
 response [ 'Cache-Control' ] = cc
          parser . add_argument ( 'app_label' , nargs = '?' ,  help = 'App label of an application to synchronize the state.' )
  return cls
 if isinstance ( context , Context ) :
 self . _info = translation . _info . copy ( )
     def Deserializer ( stream_or_string , ** options ) :
      def __get__ ( self , instance , owner ) :
 super ( URLValidator , self ) . __call__ ( url )
 from django . core . management . base import BaseCommand
                  if pattern . namespace :
 def filesizeformat ( bytes ) :
  from django . core . management . base import AppCommand
  self . regexes [ state ] = re . compile ( "|" . join ( parts ) , re . MULTILINE | re . VERBOSE )
 import os
  if isinstance ( s , ( six . text_type , Promise ) ) :
  if 'DJANGO_AUTO_COMPLETE' not in os . environ :
                      initial_value = self . initial . get ( name , field . initial )
                                  del form . cleaned_data [ field ]
     def learn_cache_key ( request , response , cache_timeout = None , key_prefix = None , cache = None ) :
   class EmailBackend ( ConsoleEmailBackend ) :
  else :
    self . choices = list ( choices )
 six . reraise ( os_err_exc_type , os_err_exc_type ( 'Error executing %s: %s' %  ( args [ 0 ] , strerror ) ) , sys . exc_info ( ) [ 2 ] )
 return wrap ( value , int ( arg ) )
              top = self . count
  pos = m . end ( 0 )
              subcommand = 'help'
              daemonize = True
              raise CommandError ( "Can't find %s. Make sure you have GNU "  "gettext tools 0.15 or newer installed." % program )
                      self . create_table ( db , cache . _table )
          for path in self . locale_paths :
          for k , v in self . _iteritems ( ) :
          return os . path . exists ( self . path ( name ) )
 from django . utils . crypto import get_random_string
    def multiple_chunks ( self , chunk_size = None ) :
  try :
   def extend_nodelist ( self , nodelist , node , token ) :
              return text
   if field . rel . to . _meta . pk . rel :
          return self . value . resolve ( context , ignore_failures = True )
 from django . template . base import TemplateDoesNotExist
    def ngettext ( singular , plural , number ) :
  return original_urlencode (  [ ( force_str ( k ) ,  [ force_str ( i ) for i in v ] if isinstance ( v , ( list , tuple ) ) else force_str ( v ) )  for k , v in query ] ,  doseq )
   if content_length < 0 :
          pattern = pattern . lower ( )
  mail . send ( fail_silently = fail_silently )
  return None if timeout is None else time . time ( ) + timeout
 if len ( t ) == 2 :
 self . format = format if format else None
          cache_timeout = 0
 if not settings . ADMINS :
                   current_len += 1
 for name in MEDIA_TYPES :
 __M = r'(?P<mon>\w{3})'
                  for form in self . saved_forms :
   def __delitem__ ( self , key ) :
  self . stdout . write ( (  "%(started_at)s\n"  "Django version %(version)s, using settings %(settings)r\n"  "Starting development server at http://%(addr)s:%(port)s/\n"  "Quit the server with %(quit_command)s.\n"  ) % {  "started_at" : now ,  "version" : self . get_version ( ) ,  "settings" : settings . SETTINGS_MODULE ,  "addr" : '[%s]' % self . addr if self . _raw_ipv6 else self . addr ,  "port" : self . port ,  "quit_command" : quit_command ,  } )
 s1 = time . strftime ( fmt , ( year , ) + timetuple [ 1 : ] )
              initial = [ '' for x in range ( 0 , len ( data ) ) ]
                                  chunk_length = len ( chunk )
          if instance is None :
 try :
  except StopIteration :
              pk_key = "%s-%s" % ( self . add_prefix ( i ) , self . model . _meta . pk . name )
                      value = None
 try :
 stamp = time . mktime ( tt )
  try :
              continue
   with connection . constraint_checks_disabled ( ) :
                          result = middleware . process_exception ( request , e )
 if input_formats is not None :
  if settings . USE_ETAGS and not response . has_header ( 'ETag' ) :
          return formats . time_format ( value , arg )
                    self . translate = True
 usage = '%%prog %s [options] %s' % ( subcommand , self . args )
 outdict = { }
 attrs = dict ( self . attrs , ** kwargs )
 domain_regex = re . compile (    r'(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$' ,  re . IGNORECASE )
  for ext in pathext :
  if isinstance ( app_name , BaseCommand ) :
    def get_unique_error_message ( self , unique_check ) :
  connection = connections [ database ]
 from django . utils . deprecation import RemovedInDjango19Warning
                  self . literal = mark_safe ( unescape_string_literal ( var ) )
                  try :
 indent = options . get ( 'indent' )
 yield "# Feel free to rename the models, but don't rename db_table values or field names."
     seen_data . add ( row_data )
   def __repr__ ( self ) :
      _assertCountEqual = "assertItemsEqual"
 self . show_traceback = options . get ( 'traceback' )
  width = property ( _get_width )
 ignored = [ ]
 self . verbosity = int ( options . get ( 'verbosity' ) )
 name = "." . join ( [ package . __name__ , module_name ] )
   def _close_files ( self ) :
              return ''
                  pass
  try :
                          len_item = len ( item )
              if self . to_field_name :
                      try :
 while not answer or answer not in "yn" :
  if ( context . autoescape and not isinstance ( output , SafeData ) ) or isinstance ( output , EscapeData ) :
 try :
    UNKNOWN_SOURCE = '<unknown source>'
          return ''
   def setlistdefault ( self , key , default_list = None ) :
 result = ':' . join ( hextets [ 0 : 6 ] )
                   kwargs [ str ( param ) ] = value
 self . _producer = producer
  re_formatchars = re . compile ( r'(?<!\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])' )
                  raise InvalidCacheBackendError ( "Could not find backend '%s': %s" % (  backend , e ) )
 notifier . check_events ( timeout = None )
  else :
    if self . settings_exception is not None :
 try :
     class RegroupNode ( Node ) :
  return mark_safe ( self . format_output ( output ) )
          kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( match . groupdict ( ) ) )
              warning = 'ImmutableList object is immutable.'
              try :
          attrs [ 'fields' ] = fields
   except :
                              _file . close ( )
 return mark_safe ( re . sub ( '[-\s]+' , '-' , value ) )
     class PyLibMCCache ( BaseMemcachedCache ) :
    def has_vary_header ( response , header_query ) :
     def make_origin ( display_name , loader , name , dirs ) :
                      response = middleware_method ( request , response )
                  raise CommandError ( "You can only use --pks option with one model" )
          if self . options . get ( "indent" ) :
   def _fd ( f ) :
  else :
          return all ( w . is_hidden for w in self . widgets )
              for app_label in bad_app_labels :
 from django . utils . encoding import force_str , force_text , iri_to_uri
 self . stdout . write ( self . style . NOTICE ( "  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them." ) )
                  break
  return name . replace ( '_' , ' ' ) . capitalize ( )
  except ImportError :
   def render ( self , context ) :
 self . _content_length = content_length
 parser . delete_first_token ( )
 from django . utils . six . moves . urllib . parse import urljoin
                      args . append ( ( False , Variable ( constant_arg ) . resolve ( { } ) ) )
      msgs_with_ctxt = ( "%s%s%s" % ( context , CONTEXT_SEPARATOR , singular ) ,  "%s%s%s" % ( context , CONTEXT_SEPARATOR , plural ) ,  number )
                          input_format = get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ]
 readinto = property ( lambda self : self . file . readinto )
                          self . configure_logger ( name , loggers [ name ] )
       def constant_time_compare ( val1 , val2 ) :
 def _dec ( * args , ** kwargs ) :
          raise TemplateSyntaxError ( "'for' statements should have at least four"  " words: %s" % token . contents )
 return len ( self . non_form_errors ( ) ) + sum ( len ( form_errors ) for form_errors in self . errors )
      def __init__ ( self , * args , ** kwargs ) :
              raise AppRegistryNotReady (  "The translation infrastructure cannot be initialized before the "  "apps registry is ready. Check that you don't make non-lazy "  "gettext calls at import time." )
 six . reraise ( CommandError , CommandError ( new_msg ) , sys . exc_info ( ) [ 2 ] )
  else :
 import sys
 handler . startElement ( 'feed' , self . root_attributes ( ) )
     if response is None :
 _ , content_params = cgi . parse_header ( environ . get ( 'CONTENT_TYPE' , '' ) )
  import os
   def __init__ ( self , data = None ) :
  def __init__ ( self , content_type = None , status = None , reason = None ) :
 self . options = options
 @ stringfilter
  except smtplib . SMTPException :
 if six . PY3 and isinstance ( val1 , bytes ) and isinstance ( val2 , bytes ) :
 getattr ( combined , 'add_' + name ) ( getattr ( other , '_' + name , None ) )
  def iterbytes ( buf ) :
   else :
              for field , errors in self . error_dict . items ( ) :
   if not strict :
              cached = _format_cache [ cache_key ]
            getattr ( self , 'error_dict' )
  else :
              continue
                          for matches , pat , defaults in pattern . reverse_dict . getlist ( name ) :
      def copy_plural_forms ( self , msgs , locale ) :
 import warnings
 from django . db import connections , DEFAULT_DB_ALIAS
                  pass
 self . name = name
   def save ( self , name , content ) :
              if i :
     loggers = config . get ( 'loggers' , EMPTY_DICT )
  else :
   if not priority :
 return instance
  from django . conf import settings
from __future__ import unicode_literals
import os
                          sub_match_dict = dict ( match . groupdict ( ) , ** self . default_kwargs )
  language_code_prefix_re = re . compile ( r'^/([\w-]+)(/|$)' )
 plan = executor . migration_plan ( executor . loader . graph . leaf_nodes ( ) )
          return _import_module ( self . mod )
    def file_complete ( self , file_size ) :
  resolved_path = [ ]
                  qs = self . model . _default_manager . get_queryset ( )
 import warnings
          if incomment :
 if ( ( context . autoescape and not isinstance ( value , SafeData ) ) or  isinstance ( value , EscapeData ) ) :
          int ( value )
 if len ( bits ) < 2 or bits [ - 2 ] != 'as' :
   except OSError as e :
    if settings . is_overridden ( 'TEMPLATE_LOADERS' ) :
                      setattr ( base , old_method_name , wrapper ( new_method ) )
       self . fields = copy . deepcopy ( self . base_fields )
 if end not in ( ">" , "/>" ) :
 for attr in _urllib_response_moved_attributes :
  except ValidationError as e :
  except AttributeError :
 self . error_class = error_class
                  sublist = _helper ( sublist_item , tabs + 1 )
   return response
 upto = start
  if tablename in connection . introspection . table_names ( ) :
 def __getitem__ ( self , key ) :
 if leading :
 dictConfigClass ( config ) . configure ( )
 def __init__ ( self , file ) :
 bits = token . split_contents ( )
    def render_to_string ( template_name , dictionary = None , context_instance = None ,  dirs = None ) :
              value = self . _empty_value
          del cc [ 'private' ]
              return True
 if file_ :
 return getattr ( _urlconfs , "value" , default )
   except ValidationError as e :
              cmp_fmt = parts [ - 1 ]
  from __future__ import unicode_literals
 from django . utils import autoreload
 input_text = ugettext_lazy ( 'Change' )
 bits = bits [ 2 : ]
                       field_value = getInnerText ( node ) . strip ( )
 internal_use_only = False
 self . _expire_info . clear ( )
  def handle_raw_input ( self , input_data , META , content_length , boundary , encoding = None ) :
 import codecs
          items = _iteritems
 from django . utils . deprecation import RemovedInDjango19Warning
    potfiles = [ ]
 self . verbosity = int ( options . get ( 'verbosity' ) )
  except TemplateDoesNotExist :
  else :
           if only_new :
       for app_config in apps . get_app_configs ( ) :
  if not incremental :
  elif self . waiting_readers != 0 :
           if id_ :
 while 1 :
 salt = force_bytes ( salt )
   return result == 0
   is_compressed = False
              if not unicodedata . combining ( char ) :
  elif command . verbosity > 0 :
 namemap = options . get ( 'with' , { } )
 warnings . warn (  'import_by_path() has been deprecated. Use import_string() instead.' ,  RemovedInDjango19Warning , stacklevel = 2 )
   if self . max_length is not None and len ( file_name ) > self . max_length :
          self . config = ConvertingDict ( config )
                  return 'https'
 value , timestamp = result . rsplit ( self . sep , 1 )
 M . set ( key , real_value , coded_value )
 if age > max_age :
                  data [ field . name ] = field . to_python ( field_value )
                  m2m_data [ field . name ] = self . _handle_m2m_field_node ( field_node , field )
              return ''
  ret = _
      def __init__ ( self , format_string ) :
    return retval
   NOCOLOR_PALETTE = 'nocolor'
              raise TemplateSyntaxError ( "Invalid arguments provided to simple_tag" )
   base64d = force_bytes ( TimestampSigner ( key , salt = salt ) . unsign ( s , max_age = max_age ) )
              raise TemplateSyntaxError ( 'Unknown argument for %r tag: %r.' %  ( bits [ 0 ] , option ) )
   @ property
              sep = space
 force_str = force_bytes
                      plural . append ( contents )
 lookups . appendlist ( pattern . callback , ( bits , p_pattern , pattern . default_args ) )
                  exp = datetime . fromtimestamp ( timeout )
 import sys
    def setdefault ( self , key , default ) :
  else :
                cached_loaders = [ ]
 notifier . stop ( )
     field_desc = '%s = %s%s' % (  att_name ,   '' if '.' in field_type else 'models.' ,  field_type ,  )
 if first :
 if isinstance ( timezone , tzinfo ) :
              if cnt and not cnt % grouping :
  import django
 if size :
                  c = int ( text [ 1 : ] , 16 )
 plist . append ( f . strip ( ) )
              if kwargs :
                  if self . output_transaction :
  try :
    def attach_file ( self , path , mimetype = None ) :
 from django . template . loader import BaseLoader , get_template_from_string , find_template_loader , make_origin
 if language_code not in self . _app_dict :
 if self . _leftover :
          vary_on = ( )
 from django . template . loader import BaseLoader
   except Exception :
   def iterlists ( d , ** kw ) :
                      result = ( template , make_origin ( display_name , loader , name , dirs ) )
 self . stderr = OutputWrapper ( options . get ( 'stderr' , sys . stderr ) )
  if options . pythonpath :
          return super ( Debug , self ) . __init__ ( DEBUG , * args , ** kwargs )
  def indent ( self , level ) :
                       self . _request_middleware = None
          warnings . warn (  "FastCGI support has been deprecated and will be removed in Django 1.9." ,  RemovedInDjango19Warning )
              k , v = x , True
 MIMEMessage . __setitem__ ( self , name , val )
                      out . write ( blankout ( t . contents , 'B' ) )
   def import_string ( dotted_path ) :
  else :
  def add_arguments ( self , parser ) :
              pass
                      pass
    class RawPostDataException ( Exception ) :
import sys
 parser . add_argument ( '--tag' , '-t' , action = 'append' , dest = 'tags' ,  help = 'Run only checks labeled with given tag.' )
              raise ValueError ( "Key '%s' not found" % key )
                  self . stdout . write ( "  Creating tables...\n" )
          form = super ( BaseInlineFormSet , self ) . _construct_form ( i , ** kwargs )
 timestamp = baseconv . base62 . decode ( timestamp )
 import binascii
                          last_row = ( normal_row % { 'errors' : '' , 'label' : '' ,  'field' : '' , 'help_text' : '' ,  'html_class_attr' : html_class_attr } )
                  timeout = 300
  except AttributeError :
              return 'StopUpload: Halt current upload.'
 app_path = getattr ( settings , 'WSGI_APPLICATION' )
   if six . PY3 :
   callback , param_dict = resolver . resolve_error_handler ( 500 )
 if isinstance ( s , bytes ) :
 from threading import Lock
              six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
 from django . utils . module_loading import import_string
   def flush ( self ) :
  return val
  else :
  for fname in self . _list_cache_files ( ) :
     def _to_tuple ( s ) :
          if self . is_bound and i < self . initial_form_count ( ) :
 self . cdata_tag = None
  option_list = ( )
  else :
 max_value = self . max_expr . resolve ( context )
  try :
    signals . request_finished . connect ( cache . close )
   class EscapeData ( object ) :
 self . context_data = context
  else :
    def create_parser ( self , prog_name , subcommand ) :
 def _cache ( self ) :
 for key , value in data :
          self . _cache . clear ( )
              raise TemplateSyntaxError ( "'%s' is not a valid tag library: %s" %  ( taglib , e ) )
     class Resolver404 ( Http404 ) :
 parser . print_help ( )
 PB = 1 << 50
   declared_fields = OrderedDict ( )
 orig_file = os . path . join ( self . dirpath , self . file )
 related_att = getattr ( obj , field . get_attname ( ) )
  except ValidationError as e :
                                  current = settings . TEMPLATE_STRING_IF_INVALID
 self . subject = subject
                  result_args [ i ] . append ( param )
             self . _regex = regex
                if settings . DEBUG :
              self . stdout . write ( "Downloading %s\n" % display_url )
  try :
    if isinstance ( empty_label , ( list , tuple ) ) :
   response = self . get_exception_response ( request , resolver , 400 )
   except ( ImportError , AttributeError ) as e :
 from django . utils . encoding import force_bytes
   def reader_enters ( self ) :
 overlapped = OVERLAPPED ( )
 return hashlib . pbkdf2_hmac (  digest ( ) . name , password , salt , iterations , dklen )
   content_disposition = info . get ( 'content-disposition' )
 from django . template import Template , Context
          key = self . make_key ( key , version = version )
   def __copy__ ( self ) :
    def next_token ( self ) :
 return self . getvalue ( )
   importer = __import__
          self . s = s
  return id_
      def b ( s ) :
      def print_ ( * args , ** kwargs ) :
  else :
              field_type = connection . introspection . get_field_type ( row [ 1 ] , row )
    def __repr__ ( self ) :
 self . cleaned_data [ name ] = value
                      break
 if form . _meta . widgets :
 def GET ( self ) :
  table_output . append ( " " . join ( field_output ) )
              handler . addQuickElement ( "description" , item [ 'description' ] )
  sys . stdout , sys . stderr = so , se
 return self . field . widget . value_from_datadict ( self . form . data , self . form . files , self . html_name )
   def run_from_argv ( self , argv ) :
     headerlist = [ ]
  else :
 result = self . configurator . convert ( value )
 tok = '"' + guts + '"'
 msgs , errors , status = popen_wrapper ( args )
 if domain :
  sql , references = connection . creation . sql_create_model ( model , no_style ( ) , seen_models )
              locales = all_locales
  BASE2_ALPHABET = '01'
   finally :
 for line in content . split ( "\n" ) :
 if base64d [ : 1 ] == b'.' :
          callback = getattr ( self . urlconf_module , 'handler%s' % view_type , None )
  from django . utils import six
              final_attrs [ 'checked' ] = 'checked'
          if regex is not None :
 self . app_label = options . get ( 'app_label' )
          module_path , class_name = dotted_path . rsplit ( '.' , 1 )
 s = m . group ( 0 )
  except StandardError as e :
  else :
                          g = g . strip ( '"' )
 result = logging . Filter ( name )
  elif isinstance ( o , datetime . date ) :
              fk = fks_to_parent [ 0 ]
    _moved_attributes = [  MovedAttribute ( "cStringIO" , "cStringIO" , "io" , "StringIO" ) ,  MovedAttribute ( "filter" , "itertools" , "builtins" , "ifilter" , "filter" ) ,  MovedAttribute ( "filterfalse" , "itertools" , "itertools" , "ifilterfalse" , "filterfalse" ) ,  MovedAttribute ( "input" , "__builtin__" , "builtins" , "raw_input" , "input" ) ,  MovedAttribute ( "map" , "itertools" , "builtins" , "imap" , "map" ) ,  MovedAttribute ( "range" , "__builtin__" , "builtins" , "xrange" , "range" ) ,  MovedAttribute ( "reload_module" , "__builtin__" , "imp" , "reload" ) ,  MovedAttribute ( "reduce" , "__builtin__" , "functools" ) ,  MovedAttribute ( "StringIO" , "StringIO" , "io" ) ,  MovedAttribute ( "UserString" , "UserString" , "collections" ) ,  MovedAttribute ( "xrange" , "__builtin__" , "builtins" , "xrange" , "range" ) ,  MovedAttribute ( "zip" , "itertools" , "builtins" , "izip" , "zip" ) ,  MovedAttribute ( "zip_longest" , "itertools" , "itertools" , "izip_longest" , "zip_longest" ) ,   MovedModule ( "builtins" , "__builtin__" ) ,  MovedModule ( "configparser" , "ConfigParser" ) ,  MovedModule ( "copyreg" , "copy_reg" ) ,  MovedModule ( "dbm_gnu" , "gdbm" , "dbm.gnu" ) ,  MovedModule ( "http_cookiejar" , "cookielib" , "http.cookiejar" ) ,  MovedModule ( "http_cookies" , "Cookie" , "http.cookies" ) ,  MovedModule ( "html_entities" , "htmlentitydefs" , "html.entities" ) ,  MovedModule ( "html_parser" , "HTMLParser" , "html.parser" ) ,  MovedModule ( "http_client" , "httplib" , "http.client" ) ,  MovedModule ( "email_mime_multipart" , "email.MIMEMultipart" , "email.mime.multipart" ) ,  MovedModule ( "email_mime_text" , "email.MIMEText" , "email.mime.text" ) ,  MovedModule ( "email_mime_base" , "email.MIMEBase" , "email.mime.base" ) ,  MovedModule ( "BaseHTTPServer" , "BaseHTTPServer" , "http.server" ) ,  MovedModule ( "CGIHTTPServer" , "CGIHTTPServer" , "http.server" ) ,  MovedModule ( "SimpleHTTPServer" , "SimpleHTTPServer" , "http.server" ) ,  MovedModule ( "cPickle" , "cPickle" , "pickle" ) ,  MovedModule ( "queue" , "Queue" ) ,  MovedModule ( "reprlib" , "repr" ) ,  MovedModule ( "socketserver" , "SocketServer" ) ,  MovedModule ( "_thread" , "thread" , "_thread" ) ,  MovedModule ( "tkinter" , "Tkinter" ) ,  MovedModule ( "tkinter_dialog" , "Dialog" , "tkinter.dialog" ) ,  MovedModule ( "tkinter_filedialog" , "FileDialog" , "tkinter.filedialog" ) ,  MovedModule ( "tkinter_scrolledtext" , "ScrolledText" , "tkinter.scrolledtext" ) ,  MovedModule ( "tkinter_simpledialog" , "SimpleDialog" , "tkinter.simpledialog" ) ,  MovedModule ( "tkinter_tix" , "Tix" , "tkinter.tix" ) ,  MovedModule ( "tkinter_ttk" , "ttk" , "tkinter.ttk" ) ,  MovedModule ( "tkinter_constants" , "Tkconstants" , "tkinter.constants" ) ,  MovedModule ( "tkinter_dnd" , "Tkdnd" , "tkinter.dnd" ) ,  MovedModule ( "tkinter_colorchooser" , "tkColorChooser" ,  "tkinter.colorchooser" ) ,  MovedModule ( "tkinter_commondialog" , "tkCommonDialog" ,  "tkinter.commondialog" ) ,  MovedModule ( "tkinter_tkfiledialog" , "tkFileDialog" , "tkinter.filedialog" ) ,  MovedModule ( "tkinter_font" , "tkFont" , "tkinter.font" ) ,  MovedModule ( "tkinter_messagebox" , "tkMessageBox" , "tkinter.messagebox" ) ,  MovedModule ( "tkinter_tksimpledialog" , "tkSimpleDialog" ,  "tkinter.simpledialog" ) ,  MovedModule ( "urllib_parse" , __name__ + ".moves.urllib_parse" , "urllib.parse" ) ,  MovedModule ( "urllib_error" , __name__ + ".moves.urllib_error" , "urllib.error" ) ,  MovedModule ( "urllib" , __name__ + ".moves.urllib" , __name__ + ".moves.urllib" ) ,  MovedModule ( "urllib_robotparser" , "robotparser" , "urllib.robotparser" ) ,  MovedModule ( "xmlrpc_client" , "xmlrpclib" , "xmlrpc.client" ) ,  MovedModule ( "xmlrpc_server" , "xmlrpclib" , "xmlrpc.server" ) ,  MovedModule ( "winreg" , "_winreg" ) ,  ]
                  return False
 for item in sequence :
 def dictsortreversed ( value , arg ) :
                      if not self . compile_function_error ( token , e ) :
   def words ( self , num , truncate = None , html = False ) :
   def handle ( self , * app_labels , ** options ) :
 field_value = self . cleaned_data . get ( field , None )
              self . attrs = attrs . copy ( )
              view_func = getattr ( mod , func_name )
  elif cmatches :
  try :
              defaults [ 'data' ] = self . data
   for migration in merge_migrations :
  else :
  else :
                  raise TemplateSyntaxError (  "'%s' received some positional argument(s) after some "  "keyword argument(s)" % name )
    return False
  if self . is_url ( template ) :
          assert name , "The name argument is not allowed to be empty."
     self . run_validators ( value )
 from django . conf import settings
    parser = command . create_parser ( '' , name )
 self . stdout . write ( "  all instances of the codebase have applied the migrations you squashed," )
 if option in options :
  return value
              assert not isinstance ( bcc , six . string_types ) , '"bcc" argument must be a list or tuple'
 try :
  block_context = context . render_context [ BLOCK_CONTEXT_KEY ]
   try :
                    compare_to = [ var . resolve ( context , True ) for var in self . _varlist ]
  return plural
          ch = None
 if errors is None :
 if os . path . isdir ( template_dir ) :
 for item in elt :
   def __getitem__ ( self , key ) :
 if PY3 :
  else :
      error_class = ValueError
              self . _done = True
          if not app_config . path :
              response . add_post_render_callback ( _set_response_etag )
 utility . execute ( )
                  pass
     def __repr__ ( self ) :
  ipv4_re = re . compile ( r'^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$' )
     class RssFeed ( SyndicationFeed ) :
          language_code = get_language ( )
 if log in child_loggers :
      with open ( old_path , 'rb' ) as template_file :
  for sql_file in sql_files :
 from IPython import start_ipython
    def deactivate ( ) :
 from threading import local
 if m :
 lists = _iterlists
 parser . add_argument ( '--pks' , dest = 'primary_keys' ,  help = "Only dump objects with given primary keys. "  "Accepts a comma separated list of keys. "  "This option will only work when you specify one model." )
  if token . token_type == 0 :
   def migration_progress_callback ( self , action , migration , fake = False ) :
 return ResolverMatch ( sub_match . func , sub_match . args , sub_match_dict , sub_match . url_name , self . app_name or sub_match . app_name , [ self . namespace ] + sub_match . namespaces )
              exc_info = record . exc_info
  ch = next ( input_iter )
 if value is None :
 parser . add_argument ( '--natural-primary' , action = 'store_true' , dest = 'use_natural_primary_keys' , default = False ,  help = 'Use natural primary keys if they are available.' )
  from django . apps import apps
from django . core . management . base import BaseCommand
   self . check ( app_configs = app_configs , tags = tags , display_num_errors = True )
  app_dir = os . path . join ( app_config . path , 'fixtures' )
   data = { }
              stream_class = BytesIO
              yield k
 if data in self . children :
 stats [ MISSES ] += 1
          if hasattr ( self , '_files' ) :
   if field . rel and isinstance ( field . rel , models . ManyToManyRel ) :
 return self . __to_language
     def load_label ( self , fixture_label ) :
 if self . validate_domain_part ( domain_part ) :
 super ( ManagementForm , self ) . __init__ ( * args , ** kwargs )
 for lineno , line in enumerate ( content . splitlines ( True ) ) :
    def validate_domain_part ( self , domain_part ) :
  if hasattr ( settings , "SERIALIZATION_MODULES" ) :
                              out . write ( blankout ( part , 'S' ) )
 s = get_serializer ( format ) ( )
           value = timezone . normalize ( value )
                      if translators_comment_start is not None and lineno >= translators_comment_start :
 if o . microsecond :
  from django . apps import apps
                              return field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * value ) . pk
 for node in self :
              localedir = os . path . join ( app_config . path , 'locale' )
                      relations = { }
 new_ip = hextet [ 0 ] . split ( ':' )
 def check_1_6_compatibility ( ** kwargs ) :
  else :
 raise NoReverseMatch ( "Reverse for '%s' with arguments '%s' and keyword "  "arguments '%s' not found. %d pattern(s) tried: %s" %  ( lookup_view_s , args , kwargs , len ( patterns ) , patterns ) )
 setattr ( style , role , termcolors . make_style ( ** format ) )
 params = kwargs
 field_params = { }
          raise ValueError ( "Not a string literal: %r" % s )
  def to_python ( self , value ) :
   def handle_raw_input ( self , input_data , META , content_length , boundary , encoding = None ) :
 if mimetype is None :
          return self . render ( )
  raise
 src = force_text ( src , settings . FILE_CHARSET )
      if urlconf is None :
     def main ( main_func , args = None , kwargs = None ) :
                  output . append ( self . render_option ( selected_choices , option_value , option_label ) )
              msg = self . style . HTTP_REDIRECT ( msg )
 if token_string . find ( TRANSLATOR_COMMENT_MARK ) :
 return make_middleware_decorator ( middleware_class ) ( )
 try :
 self . file_permissions_mode = (  file_permissions_mode if file_permissions_mode is not None  else settings . FILE_UPLOAD_PERMISSIONS  )
              raise ValueError ( "Invalid header: %r" % line )
                  cull_num = num // self . _cull_frequency
 id_ = final_attrs . get ( 'id' , None )
    def ngettext ( singular , plural , number ) :
   def __next__ ( self ) :
   if hasattr ( mw_instance , 'process_request' ) :
              self . activated = True
 from django . core . mail . message import sanitize_address
              value = [ ]
 raise NotImplementedError ( 'subclasses of BaseEmailBackend must override send_messages() method' )
 return self . serialize_headers ( ) + b'\r\n\r\n' + self . content
          return ""
         if run_syncdb and executor . loader . unmigrated_apps :
                  loaders . append ( loader )
              if args [ - 1 ] != "silent" :
    @ register . tag
 if categories :
          self . encoding = encoding
 time_str = date . strftime ( '%Y-%m-%dT%H:%M:%S' )
 return "<For Node: for %s in %s, tail_len: %d%s>" % ( ', ' . join ( self . loopvars ) , self . sequence , len ( self . nodelist_loop ) ,  reversed_text )
    class Parser ( object ) :
  elif prefix != common_prefix :
 self . paths_to_remove . append ( tempdir )
                                      handler . setLevel ( _checkLevel ( level ) )
  return i
  elif auto_id :
   def get_meta ( self , table_name ) :
  import re
  return Truncator ( value ) . chars ( length , html = True )
  time_re = re . compile (  r'(?P<hour>\d{1,2}):(?P<minute>\d{1,2})'  r'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?'  )
 if sign :
          self . template = template
                  if inplural :
  def __init__ ( self , parent_instance , * args , ** kwargs ) :
                  return func ( context , self . first )
      buf = StreamingBuffer ( )
   def r ( self ) :
   def _coerce ( self , value ) :
 return duplicate
    EndToken = EndToken ( )
 def initial_forms ( self ) :
    def contains ( source , inst ) :
              raise ImproperlyConfigured ( 'Could not write to directory: %s' % self . file_path )
 if hasattr ( formfield , 'queryset' ) :
 import re
 if autoescape :
                  if _ipv6 :
          class HTMLParser ( _html_parser . HTMLParser ) :
          non_atomic_requests = getattr ( view , '_non_atomic_requests' , set ( ) )
              self . _servers = server . split ( ';' )
 try :
           self . is_bound = data is not None or files is not None
  def __init__ ( self , file = None , name = None , content_type = None , size = None , charset = None , content_type_extra = None ) :
    global _cached_modules , _cached_filenames
   def render_options ( self , choices , selected_choices ) :
 return mark_safe ( _urlize ( value , nofollow = True , autoescape = autoescape ) )
              e , tb = sys . exc_info ( ) [ 1 : ]
    def _generate_cache_key ( request , method , headerlist , key_prefix ) :
 bits = urlparse ( url )
 __nonzero__ = new_method_proxy ( bool )
             root = logging . root
                      raise
   if initial_forms > self . max_num >= 0 :
  except ( TypeError , ValueError ) :
                  if character != '.' :
              taglib_module = '%s.%s' % ( module , library_name )
              x = x * len ( from_digits ) + from_digits . index ( digit )
              return template
              if attr in obj_dict :
              escaped = False
                      command = token . contents . split ( ) [ 0 ]
                  handler . addQuickElement ( "email" , item [ 'author_email' ] )
from django . http import HttpResponse
 tried_modules . append ( taglib_module )
 mode = stat . S_IMODE ( st . st_mode )
   def end_object ( self , obj ) :
              return True
                  for i_item , i_args in zip ( inner_result , inner_args ) :
 from django . utils . encoding import force_str
 @ stringfilter
 result = cache_get ( key , root )
              widget . is_localized = True
   def dst ( self , dt ) :
                        if self . required :
 if loader is not None :
   class MergeDict ( object ) :
  data = b64_decode ( base64d )
 import zipfile
 def use_argparse ( self ) :
 return self . _html_output (  normal_row = '<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>' ,  error_row = '%s' ,  row_ender = '</p>' ,  help_text_html = ' <span class="helptext">%s</span>' ,  errors_on_separate_row = True )
 for f in filters :
 if not os . path . exists ( top_dir ) :
  return val
   def supports_color ( ) :
 return candidate_pat % candidate_subs
  now = datetime . now ( ) . strftime ( '%B %d, %Y - %X' )
   self . set ( key , value , version = version + delta )
   TOKEN_TEXT = 0
              raise TemplateSyntaxError ( "Invalid filter: '%s'" % filter_name )
 retval = self
                  widget_value = None
 from django . core . management . sql import sql_create
              result . setlist ( copy . deepcopy ( key , memo ) , copy . deepcopy ( value , memo ) )
      @ lru_cache . lru_cache ( maxsize = None )
 using_sysrandom = False
  else :
  if len ( bits ) == 3 :
  else :
      class FirstOfNode ( Node ) :
 def __prepare_class__ ( cls ) :
          return datetime . now ( )
   if check_path :
     def get_language_from_request ( request , check_path = False ) :
      mapping = { 'openblock' : BLOCK_TAG_START ,  'closeblock' : BLOCK_TAG_END ,  'openvariable' : VARIABLE_TAG_START ,  'closevariable' : VARIABLE_TAG_END ,  'openbrace' : SINGLE_BRACE_START ,  'closebrace' : SINGLE_BRACE_END ,  'opencomment' : COMMENT_TAG_START ,  'closecomment' : COMMENT_TAG_END ,  }
      help = "Creates new migration(s) for apps."
 if m :
 value = next ( cycle_iter ) . resolve ( context )
                        if os . path . isdir ( entry ) :
  else :
   def _set_choices ( self , value ) :
   def handle ( self , ** options ) :
  return _make_decorator
    def symlinks_supported ( ) :
              label_output = self . handle_label ( label , ** options )
 pass
          pass
    from django . conf import settings
 if not ext and content_type :
 import sys
    if ch == '<' :
  raise
  elif not isinstance ( end , str ) :
    def get_serializer_formats ( ) :
      self . _request_middleware = request_middleware
  except ( ValueError , self . queryset . model . DoesNotExist ) :
 if self . cc :
 found = getattr ( found , frag )
              value = ''
 if i < 0 :
   def render ( self , context ) :
    return msg_count
                  self . stdout . write ( "  No optimizations possible." )
              return SafeBytes ( data )
 trans_bit = [ bit ]
                      construct_instance_exclude . append ( name )
              parentloop = context [ 'forloop' ]
 if last_bit :
          name = getattr ( func , "_decorated_function" , func ) . __name__
                      incomment = True
 self . position -= len ( bytes )
 parser . add_argument ( '--no-startup' , action = 'store_true' , dest = 'no_startup' ,  help = 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.' )
  super ( BaseInlineFormSet , self ) . __init__ ( data , files , prefix = prefix ,  queryset = qs , ** kwargs )
   def _get_choices ( self ) :
          self . test_runner = None
  except UnicodeError :
                          references_to_delete . setdefault ( f . rel . to , [ ] ) . append ( ( model , f ) )
     class IPAddressField ( CharField ) :
  while k < endpos :
      if urlconf is None :
                  continue
 DEFAULT_PALETTE = DARK_PALETTE
              dot = package . rindex ( '.' , 0 , dot )
                      output . append ( self . render_option ( selected_choices , * option ) )
          super ( HttpResponseNotModified , self ) . __init__ ( * args , ** kwargs )
                      self . importer ( used )
          token = super ( DebugLexer , self ) . create_token ( token_string , in_tag )
              return self . show_migration_list ( connection , [ options [ 'app_label' ] ] if options [ 'app_label' ] else None )
  from django . core . management . base import BaseCommand
 from django . core . exceptions import ImproperlyConfigured
              self . mod = old
   def _get_queryset ( self ) :
              self . xml . ignorableWhitespace ( '\n' + ' ' * self . options . get ( 'indent' , None ) * level )
 digits = [ six . text_type ( digit ) for digit in reversed ( digits ) ]
 max_value = float ( max_value )
    def get_cache ( backend , ** kwargs ) :
                  nodes . extend ( nodelist . get_nodes_by_type ( nodetype ) )
 __setitem__ = new_method_proxy ( operator . setitem )
  from django . core . files import File
          return "<%s: %r>" % ( self . __class__ . __name__ , self . var )
 conditions_nodelists . append ( ( condition , nodelist ) )
          if args :
          arg = int ( arg )
         def total_ordering ( cls ) :
 if self . _is_rendered :
              return ''
   _serializers = serializers
 self . _leftover = b''
  dot = len ( package )
 if not os . path . exists ( directory ) :
          value = self . to_python ( value ) . strip ( )
              self . code = code
    def loaddata ( self , fixture_labels ) :
   def merge ( self , other ) :
                  yield field , list ( ValidationError ( errors ) )
                  want_unicode = True
   attachment = self . _create_mime_attachment ( content , mimetype )
                  pass
 assert rawdata [ i : i + 2 ] == "</" , "unexpected call to parse_endtag"
   self . unclosed_block_tag ( [ endtag ] )
   def __contains__ ( self , other ) :
 return True
                      return self . strptime ( value , format )
              raise TemplateSyntaxError ( "Named cycle '%s' does not exist" % name )
    def npgettext_lazy ( context , singular , plural , number = None ) :
 return zbuf . getvalue ( )
    _cookie_encodes_correctly = http_cookies . SimpleCookie ( ) . value_encode ( ';' ) == ( ';' , '"\\073"' )
 super ( WSGIRequestHandler , self ) . __init__ ( * args , ** kwargs )
 if m is not None :
 i += 1
     class Info ( CheckMessage ) :
 from __future__ import unicode_literals
  except NoReverseMatch :
               try :
      def __init__ ( self , variables ) :
                  contents = one_percent_re . sub ( '%%' , t . contents )
                          self . choices . append ( ( full_file , f ) )
 write = property ( lambda self : self . file . write )
  if os . path . exists ( filename ) :
   elif action == "unapply_start" :
  return encoding
   def _send ( self , email_message ) :
 _meth_self = "im_self"
                          for handler in handlers :
          super ( MultiValueDict , self ) . __setitem__ ( key , list_ )
   return obj
           defaults , _ = parser . parse_args ( args = [ ] )
          def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList , label_suffix = None ,  empty_permitted = False ) :
              if code in _supported and check_for_language ( code ) :
 output = localize ( output , use_l10n = context . use_l10n )
 return s [ 1 : - 1 ] . replace ( r'\%s' % quote , quote ) . replace ( r'\\' , '\\' )
  elif int ( timeout ) == 0 :
  if remaining_bits :
                  return
 tt = _time . localtime ( stamp )
          raise Exception ( "This %s instance cannot tell its position" % self . __class__ . __name__ )
     utc = pytz . utc if pytz else UTC ( )
  else :
  else :
  self . _container = [ ]
     else :
 translation . activate ( 'en-us' )
      return settings . LANGUAGE_CODE
      class TemporaryFile ( FileProxyMixin ) :
 import sys
                  pass
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
 if not isinstance ( candidate , six . string_types ) :
  encoding = self . _encoding
   def root_attributes ( self ) :
  except ImportError :
 import posixpath
          if truncate is None :
  except Exception as e :
   class Module_six_moves_urllib_request ( _LazyModule ) :
      def __init__ ( self , field ) :
 import django . core . checks . model_checks
              if isinstance ( s , Exception ) :
              self . stream = stream_or_string
          raise AttributeError ( "This %s instance has no `content` attribute. "  "Use `streaming_content` instead." % self . __class__ . __name__ )
 self . template_dirs = template_dirs
              yield buffer_
              return self . _cache . decr ( key , - delta )
 MB = 1 << 20
                  if settings . USE_L10N :
     def get_default_timezone_name ( ) :
  return value
  return initial_forms
    fields . update ( new_class . declared_fields )
  del cache [ oldkey ]
  return True
 errors . append ( {  'message' : escape ( message ) if escape_html else message ,  'code' : error . code or '' ,  } )
 self . use_natural_keys = options . pop ( "use_natural_keys" , False )
          return timeuntil ( value , arg )
 import os
              TYPE = FIELD
          super ( Command , self ) . add_arguments ( parser )
 self . _delete ( f . name )
  c . append ( tok )
 if not self . _is_rendered :
 self . validate ( out )
      if isinstance ( addr , six . string_types ) :
 response . add_post_render_callback ( callback )
  elif msg and visible_issue_count :
  else :
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
  else :
              if default is None :
  translation = self . _new_gnu_trans ( localedir , use_null_fallback )
 if len ( bits ) >= 2 and bits [ - 2 ] == 'as' :
              return path . split ( '/' , 1 )
 if j == - 1 :
          archive . extract ( to_path )
  return ustring_re . sub ( fix , s )
                      self . set_cdata_mode ( tag )
 try :
      return _entity_re . sub ( _replace_entity , text )
              f . required = False
          pass
              self . _cull_frequency = 3
      errors = [ ]
          super ( FloatField , self ) . validate ( value )
 from django . forms . forms import DeclarativeFieldsMetaclass , BaseForm
 return self
  else :
              defaults [ 'empty_permitted' ] = True
          if self . stream is None :
 for w in self . widgets :
from __future__ import unicode_literals
  parser . add_argument ( '--settings' ,  help = 'The Python path to a settings module, e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' )
 return node_class ( takes_context , args , kwargs )
  except ( ssl . SSLError , smtplib . SMTPServerDisconnected ) :
    def filepath_to_uri ( path ) :
 def templatetag ( parser , token ) :
 def is_rendered ( self ) :
    @ register . filter ( is_safe = False )
 self . options = options
  RESET = '0'
   _js_escapes . update ( ( ord ( '%c' % z ) , '\\u%04X' % z ) for z in range ( 32 ) )
   def open ( self , mode = None ) :
              if isinstance ( slots , str ) :
   def reset ( self ) :
   return tuple ( app_template_dirs )
 from django . core . handlers . wsgi import WSGIHandler
    def tzname ( self , dt ) :
  else :
   def __iter__ ( self ) :
              newline = "\n"
                      return
  return sites
   def clear ( self ) :
       BM_compatible = True
 for key , value in dict . items ( self ) :
   try :
    @ register . filter ( "escapejs" )
  m2m_data = { }
  except AttributeError :
   reverse_lazy = lazy ( reverse , str )
 lines = value . split ( '\n' )
 register = registry . register
  match = kwarg_re . match ( bits [ 0 ] )
   try :
 setattr ( cls , opname , opfunc )
   if serializers is None :
 overlapped = OVERLAPPED ( )
           return host , ''
     return ( os . path . normcase ( os . path . abspath ( src ) ) ==  os . path . normcase ( os . path . abspath ( dst ) ) )
                                      chunk = base64 . b64decode ( chunk )
              return input_val
  break
  except ImportError as e :
   except ImportError :
 unique_checks , date_checks = form . instance . _get_unique_checks ( exclude = exclude )
   def __repr__ ( self ) :
 loop_dict [ 'counter' ] = i + 1
          for dict_ in self . dicts :
                      raise CommandError ( '"%s" is not a valid IPv6 address.' % self . addr )
 code = 'invalid'
       def __init__ ( self , * args , ** kwargs ) :
    @ register . filter ( is_safe = True )
    invalid_var_format_string = None
      widget = DateTimeInput
 TB = 1 << 40
 if id_ :
  linebreaks = allow_lazy ( linebreaks , six . text_type )
              return
   def has_key ( self , key , version = None ) :
 return result
  with transaction . atomic ( using = database ,  savepoint = connection . features . can_rollback_ddl ) :
   return value [ slice ( * bits ) ]
              name = member . name
    @ lru_cache . lru_cache ( maxsize = 1000 )
  except ( ValueError , TypeError ) :
 self . write_items ( handler )
              data = self . _archive . read ( name )
                  response = self . get_exception_response ( request , resolver , 404 )
  item = {  'title' : to_unicode ( title ) ,  'link' : iri_to_uri ( link ) ,  'description' : to_unicode ( description ) ,  'author_email' : to_unicode ( author_email ) ,  'author_name' : to_unicode ( author_name ) ,  'author_link' : iri_to_uri ( author_link ) ,  'pubdate' : pubdate ,  'updateddate' : updateddate ,  'comments' : to_unicode ( comments ) ,  'unique_id' : to_unicode ( unique_id ) ,  'unique_id_is_permalink' : unique_id_is_permalink ,  'enclosure' : enclosure ,  'categories' : categories or ( ) ,  'item_copyright' : to_unicode ( item_copyright ) ,  'ttl' : ttl ,  }
                  for dirpath , dirnames , filenames in os . walk ( ldir ) :
  return value
 seek = property ( lambda self : self . file . seek )
 return data
   except UnicodeError :
                             six . reraise ( * exc_info )
   if kwargs :
 self . cc = list ( cc )
 if ch in "iLmsu#" :
                      self . can_read . release ( )
  quant = quant [ : - 1 ]
     class LocaleRegexURLResolver ( RegexURLResolver ) :
 response = self . get_exception_response ( request , resolver , 403 )
      def __init__ ( self , params ) :
      input_type = 'number'
      def __init__ ( self , filter_expr , nodelist ) :
 while ch != '}' :
          field_dict = OrderedDict (  [ ( f , field_dict . get ( f ) ) for f in fields  if ( ( not exclude ) or ( exclude and f not in exclude ) ) and ( f not in ignored ) ]  )
                      return supported_code
              fn ( * args , ** kwargs )
  elif i < list_length - 1 :
                  raise
                      temp_lib . filters [ name ] = lib . filters [ name ]
                  elt = [ elt ]
 self [ 'Location' ] = iri_to_uri ( redirect_to )
              form . fields [ DELETION_FIELD_NAME ] = BooleanField ( label = _ ( 'Delete' ) , required = False )
 security_logger . error (  force_text ( e ) ,  extra = {  'status_code' : 400 ,  'request' : request  } )
  def __init__ ( self , * args , ** kwargs ) :
  from django . conf import settings
 add_to_builtins ( 'django.template.loader_tags' )
 sys . exit ( 1 )
 __T = r'(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})'
      def __init__ ( self , * args , ** kwargs ) :
 base64 = BaseConverter ( BASE64_ALPHABET , sign = '$' )
  if len ( bits ) < 3 or bits [ 1 ] != 'as' :
 self . deactivate = deactivate
   return value . replace ( tzinfo = timezone )
  return value
  for part in singular :
           replacement = _BROWSERS_DEPRECATED_LOCALES . get ( lang_code )
          value = ugettext ( "%s TB" ) % filesize_number_format ( bytes / TB )
   if new_name . endswith ( '_' ) :
     class NullBooleanField ( BooleanField ) :
  if self . feed [ 'feed_copyright' ] is not None :
  else :
           if cursor :
      _tc . load ( str ( 'foo:bar=1' ) )
   def validate ( self , value ) :
                       exhaust ( stream )
                  template_dir = template_dir . decode ( fs_encoding )
              return self . queryset . none ( )
          return self . var
 self . _namespace_dict = { }
 self . _empty = False
              return self . create_var ( token )
    def check_for_language ( lang_code ) :
          return sorted ( value , key = Variable ( arg ) . resolve , reverse = True )
 if result is not None :
    class Http404 ( Exception ) :
  _standard_context_processors = tuple ( processors )
 args , kwargs = parse_bits ( parser , bits , params ,  varargs , varkw , defaults , takes_context , function_name )
                  return func ( * self . __args , ** self . __kw )
 while end > 0 and s . count ( b'"' , 0 , end ) % 2 :
              self . stream . write ( "\n" )
     self . state = state
                      data [ f . name ] = [ item . pk for item in qs ]
   def parse_color_setting ( config_string ) :
 return super ( EmailField , self ) . clean ( value )
              app_configs = None
                      self . saved_forms . append ( form )
 if not regex_match :
              val = None
          try :
  bit = ' ' . join ( trans_bit )
              self . full_clean ( )
 self . _current = None
 raise StopFutureHandlers ( )
 yield ''
 return SsiNode ( filepath , parsed )
              raise ValueError ( "The file cannot be reopened." )
 week_number = j // 7
              raise ValueError ( 'must define at least one ordering operation: < > <= >=' )
              val = ', ' . join ( sanitize_address ( addr , encoding )  for addr in getaddresses ( ( val , ) ) )
          self . tokens . insert ( 0 , token )
         model_list = [ ]
 from django . template . loader import BaseLoader
              activate ( self . language )
   def widget_attrs ( self , widget ) :
              return 'th'
  if isinstance ( s , ( six . text_type , Promise ) ) :
  elif args [ 1 ] [ 0 ] == '4' :
          parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database to '  'introspect. Defaults to using the "default" database.' )
 if match :
 import os
 attrs = { 'form' : form , 'extra' : extra ,  'can_order' : can_order , 'can_delete' : can_delete ,  'min_num' : min_num , 'max_num' : max_num ,  'absolute_max' : absolute_max , 'validate_min' : validate_min ,  'validate_max' : validate_max }
 return '' . join ( force_text ( s ) for s in strings )
 i = 0
 bf = self [ name ]
              self . stdout . write ( app_name , self . style . MIGRATE_LABEL )
                          extracted . close ( )
                      return True
 trans_real . _active = threading . local ( )
    return final_output
 _assertRegex = "assertRegexpMatches"
              raise StopIteration ( )
         for name , field in self . fields . items ( ) :
          key = self . make_key ( key , version = version )
 pass
  if sys . platform . startswith ( "java" ) :
              if saved_locale is not None :
   def connection ( self ) :
                      msg . attach ( self . _create_attachment ( * attachment ) )
                  display_url = tmp + '/'
 options = [ ( '--help' , None ) ]
 pass
                    if e . args [ 0 ] . startswith ( "Error -5" ) :
 for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :
              raise TemplateSyntaxError ( "expected another tag, found "  "end of string: %s" % subject )
 return self . expression . resolve ( context , True )
 fixture_name = os . path . basename ( fixture_name )
              os . chmod ( full_path , self . file_permissions_mode )
 super ( IPAddressField , self ) . __init__ ( * args , ** kwargs )
   def extract ( self ) :
          raise ValueError (  "You can only use `unpack_ipv4` if `protocol` is set to 'both'" )
 def encoding ( self , val ) :
              return
     not_installed_models = set ( pending_references . keys ( ) )
 import warnings
                  raise ValueError ( 'empty_label list/tuple must have 3 elements.' )
    self . xml . startElement ( "object" , attrs )
 FormSet . model = model
 from gzip import GzipFile
                      if settings . TEMPLATE_STRING_IF_INVALID :
  data = data . encode ( fp . encoding , errors )
     class FloatField ( IntegerField ) :
   def make_view_atomic ( self , view ) :
  try :
                               self . required , self . label , self . initial = required , label , initial
  try :
   if not re . search ( r'^[_a-zA-Z]\w*$' , name ) :
          return force_text ( list_ [ 0 ] )
  if fields is not None and f . name not in fields :
 args = args or [ ]
 row = cursor . fetchone ( )
              domains = ( 'djangojs' , 'django' )
 UnlockFileEx . argtypes = [ HANDLE , DWORD , DWORD , DWORD , LPOVERLAPPED ]
              path = join ( os . getcwdu ( ) , path )
 compatibility = 'compatibility'
                     pass
 self . _encoding = encoding or settings . DEFAULT_CHARSET
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " FAKED" ) )
   def setlistdefault ( self , key , default_list = None ) :
 from django . core . exceptions import ValidationError
   def add_root_elements ( self , handler ) :
   def path ( self , name ) :
              return context
    def as_data ( self ) :
                      g = imatch . group ( 1 )
 if not chunk_size :
   return name
                          custom_sql = custom_sql_for_model ( model , no_style ( ) , connection )
     class Warning ( CheckMessage ) :
 return (  path or '%s.%s' % ( obj . __class__ . __module__ , obj . __class__ . __name__ ) ,  obj . _constructor_args [ 0 ] ,  obj . _constructor_args [ 1 ] ,  )
     def parse_datetime ( value ) :
   for relobj in getattr ( obj , field . name ) . iterator ( ) :
              weight += 2
 return int ( value ) % int ( arg ) == 0
 excluded_models = set ( )
 parser . add_argument ( '--noreload' , action = 'store_false' , dest = 'use_reloader' , default = True ,  help = 'Tells Django to NOT use the auto-reloader.' )
   header = chunk [ : header_end ]
          return ugettext ( "Please correct the duplicate data for %(field_name)s "  "which must be unique for the %(lookup)s in %(date_field)s." ) % {  'field_name' : date_check [ 2 ] ,  'date_field' : date_check [ 3 ] ,  'lookup' : six . text_type ( date_check [ 1 ] ) ,  }
  elif isinstance ( value , datetime . date ) :
          self . var1 , self . var2 = var1 , var2
          with open ( path , 'a' ) :
 try :
  else :
  candidate_subs = dict ( zip ( prefix_args + params , text_args ) )
 if cache is None :
 self . params = params
      if os . environ . get ( "RUN_MAIN" ) == "true" :
       mime_type = 'application/atom+xml; charset=utf-8'
      input_type = 'text'
 for replacement in set ( [  thousand_sep , unicodedata . normalize ( 'NFKD' , thousand_sep ) ] ) :
 return None
 sys . stderr . write ( "  http://www.saddi.com/software/flup/   If you've already\n" )
              for result , params in possibility :
          if hasattr ( self , '_size' ) :
           if isinstance ( o , datetime . datetime ) :
   elif name == 'id' :
              field_type , new_params = field_type
  try :
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
                  handler . addQuickElement ( "uri" , self . feed [ 'author_link' ] )
              code_list . append ( background [ v ] )
          if response . streaming :
                      return ''
   def unescape_string_literal ( s ) :
 if self . verbosity > 1 :
 def __promise__ ( cls , klass , funcname , method ) :
           return ip_str
   self . key_prefix = params . get ( 'KEY_PREFIX' , '' )
      help = "Prints the DROP INDEX SQL statements for the given model module name(s)."
 return result
 toks = self . toks
      input_type = 'hidden'
 from django . utils . functional import cached_property
  if migration_name == "zero" :
     @ property
   for message in messages :
  with connections [ db ] . cursor ( ) as cursor :
  if name in lib . filters :
          if encoding == 'utf-8' :
 output = [ ]
   if strings_only and is_protected_type ( s ) :
 try :
                  widget_value = value [ i ]
  def add_arguments ( self , parser ) :
from django . conf import settings
  if unhandled_params :
 self . charset = charset
 from django . db import models
              value = bool ( value )
  output = [ ]
              value = values . get ( value . lower ( ) , value )
 prefix = d [ 'prefix' ]
   MEMCACHE_MAX_KEY_LENGTH = 250
   class Command ( BaseCommand ) :
     class TextInput ( Input ) :
   class Storage ( object ) :
              self . stdout . write ( self . style . NOTICE ( "\nYou have unapplied migrations; your app may not work properly until they are applied." ) )
    elif safe_input :
 node . replace ( decorated )
    return [ self . forms [ i [ 0 ] ] for i in self . _ordering ]
    suffixes = ( '.' . join ( ext for ext in combo if ext )  for combo in product ( databases , ser_fmts , cmp_fmts ) )
          return self . number > 1
 form = self . form ( ** defaults )
 super ( SplitDateTimeWidget , self ) . __init__ ( widgets , attrs )
   if errors_on_separate_row and bf_errors :
  except AttributeError :
              warnings . warn ( 'Cache key will cause errors if used with memcached: '  '%s (longer than %s)' % ( key , MEMCACHE_MAX_KEY_LENGTH ) ,  CacheKeyWarning )
 globalpath = os . path . join (  os . path . dirname ( upath ( sys . modules [ settings . __module__ ] . __file__ ) ) , 'locale' )
  if not self . user_regex . match ( user_part ) :
   def handle ( self , ** options ) :
 if self . __dispatch is None :
 self . find_template_cache . clear ( )
              _mtimes = { }
  words = allow_lazy ( words )
 from django . http . request import ( HttpRequest , QueryDict ,  RawPostDataException , UnreadablePostError , build_request_repr )
                      if line . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :
  import os
              return self . paginator . count
                  form . fields [ ORDERING_FIELD_NAME ] = IntegerField ( label = _ ( 'Order' ) , initial = index + 1 , required = False )
  except IndexError :
  return translated
              second_item = new_second_item
  elif settings . USE_TZ :
     def _post_clean ( self ) :
 args_safe = map ( conditional_escape , args )
   if p == 0 :
          return ZERO
          s . close ( )
   else :
from __future__ import absolute_import
 for x in arg . split ( ':' ) :
  from django . conf import settings
 import sys
 self . allow_empty_first_page = allow_empty_first_page
  elif template_tuple is None :
          command , source = self . command_stack . pop ( )
          items = _iteritems
              self . _mark_post_parse_error ( )
    _supported = None
  result = self . stream . read ( size )
          return item in self . dict
  def update_watch ( sender = None , ** kwargs ) :
                  return
              if "'stream'" not in str ( te ) :
              self . first = left
   def timesince ( d , now = None , reversed = False ) :
 raise ValidationError ( self . error_messages [ 'max_length' ] , code = 'max_length' , params = params )
  new_name = '%s_%d' % ( new_name , num )
              self [ key ] = result
 base_subdir = '%s_template' % app_or_project
import os
          self . app_or_project = app_or_project
 if m is None :
                      context [ self . loopvars [ 0 ] ] = item
  if not self . is_required :
 context_extras = { }
                   def dec ( func ) :
       date = datetime_safe . new_datetime ( date )
 from django . utils . safestring import mark_safe
 self . unget ( chunk [ remaining : ] )
          return iter ( self . keyOrder )
                          raise ValueError ( 'Unable to configure root '  'logger: %s' % e )
  warnings . warn (  "django.utils.tzinfo will be removed in Django 1.9. "  "Use django.utils.timezone instead." ,  RemovedInDjango19Warning , stacklevel = 2 )
              warnings . warn ( "``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead." ,  RemovedInDjango19Warning )
   if name == 'content-disposition' :
 if os . path . exists ( potfile ) :
   def resolve ( self , context , ignore_failures = False ) :
              self . choices = [ ]
 for member in members :
        months = ( 'Jan' , 'Feb' , 'Mar' , 'Apr' , 'May' , 'Jun' , 'Jul' , 'Aug' , 'Sep' , 'Oct' , 'Nov' , 'Dec' , )
                  if hasattr ( request , 'urlconf' ) :
              self . content = self . rendered_content
          if name is None and filter_func is None :
 class ChoiceInput ( SubWidget ) :
 self . file . seek ( 0 , os . SEEK_END )
  yield buf
 module = import_module ( '%s.management.commands.%s' % ( app_name , name ) )
 for app_label in app_labels :
 pickled = pickle . dumps ( new_value , pickle . HIGHEST_PROTOCOL )
  def items ( self ) :
          return language . lower ( )
  errors . extend ( e . error_list )
          self . func = func
 def __init__ ( self , token , parser ) :
      def __init__ ( self , filter_expression ) :
  else :
 self . parsed = parsed
  _iterkeys = "iterkeys"
                  self . none_value = ( 0 , empty_label )
 field_notes = [ ]
              if options [ 'plain' ] :
  else :
     class RssUserland091Feed ( RssFeed ) :
  elif self . verbosity > 0 :
 def __init__ ( self , * args , ** kwargs ) :
 if name in MEDIA_TYPES :
                  return result [ 0 ] , result [ 1 ]
                  raise ValueError ( "JSON can't represent timezone-aware times." )
    def strftime ( dt , fmt ) :
 truncate = property ( lambda self : self . file . truncate )
 try :
          _ExpatParser . __init__ ( self , * args , ** kwargs )
                  attrs_plus = self . attrs . copy ( )
      from unittest2 import *
      def __init__ ( self , protocol = 'both' , unpack_ipv4 = False , * args , ** kwargs ) :
 from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit
 oldkey = root [ KEY ]
   try :
 for sub_stream in boundarystream :
   def gen_filenames ( only_new = False ) :
           self . verbosity = options . get ( 'verbosity' )
from django . core . management . base import BaseCommand , CommandError
          os . symlink ( original_path , symlink_path )
                   logger = logging . getLogger ( 'py.warnings' )
               translation . _catalog = { }
 token = parser . next_token ( )
     emit_post_migrate_signal ( created_models , self . verbosity , self . interactive , connection . alias )
              extra_classes = extra_classes . split ( )
 pass
                  if isinstance ( value , str ) :
 from email . header import Header
              return
                              raise ValueError ( 'No handler found with '  'name %r' % name )
                  self . __prepare_class__ ( )
 import os
  from django . utils . functional import Promise
  from django . conf import settings
 i += 1
   def is_checked ( self ) :
   def get ( self , key , otherwise = None ) :
 var = var [ 2 : - 1 ]
 use_natural_keys = options . get ( 'use_natural_keys' )
 result = self . configurator . convert ( value )
   def handle ( self , * args , ** options ) :
 for migration in migrations_to_squash :
 inhibit_post_migrate = options . get ( 'inhibit_post_migrate' , False )
 return
 if not self . is_valid ( ) or not self . can_delete :
 warnings . warn ( 'A secure pseudo-random number generator is not available '  'on your system. Falling back to Mersenne Twister.' )
                   return False
  except ( OSError , TypeError ) :
  if verbosity >= 2 :
    class Variable ( object ) :
  except socket . error as e :
               context . render_context [ self ] = itertools_cycle ( self . cyclevars )
   raise ImportError
   def __nonzero__ ( self ) :
   return False
 from django . core . mail . backends . base import BaseEmailBackend
                  new_name = new_name . replace ( '__' , '_' )
              try :
   if len ( args ) == 2 :
  if six . PY2 :
  except IOError as e :
  _MovedItems . _moved_attributes = _moved_attributes
    exec_ ( """def reraise(tp, value, tb=None):     raise tp, value, tb """ )
  return ret
              if i % 2 :
     return new_class
    def value_from_datadict ( self , data , files , name ) :
                  return self . nodelist_empty . render ( context )
   def module_to_dict ( module , omittable = lambda k : k . startswith ( '_' ) ) :
 process_all = options . get ( 'all' )
 try :
              return '0'
   if getattr ( obj , field . name ) is not None :
          if self . save_as_new :
 setattr ( base , old_method_name , wrapper ( old_method ) )
      def render ( self , context ) :
 import time
   class EmailBackend ( BaseEmailBackend ) :
                      return True
                  if hasattr ( field . rel , 'to' ) :
                      self . _errors [ field ] = self . error_class ( )
          factor += 1
                          raw_data = field_stream . read ( )
              raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % (  migration_name , app_label ) )
     new_class . base_fields = declared_fields
   def _parse_date_fmt ( ) :
      def __init__ ( self ) :
              return False
    class LocaleRegexProvider ( object ) :
   def _create_message ( self , msg ) :
  def __init__ ( self , * args , ** kwargs ) :
 text_value = force_text ( value )
              return import_string ( key_func )
              return SafeText ( data )
  m2m_data [ field . name ] = [ m2m_convert ( pk ) for pk in field_value ]
 input_formats = formats . get_format_lazy ( 'DATETIME_INPUT_FORMATS' )
 self . args_check ( filter_name , filter_func , args )
              klass = self . resolve ( config . pop ( 'class' ) )
              ignore_patterns += [ 'CVS' , '.*' , '*~' , '*.pyc' ]
                      self . _errors [ field ] = self . error_class ( error_class = 'nonfield' )
              if key in d :
              name_str = "; " . join (  "%s in %s" % ( ", " . join ( names ) , app )  for app , names in conflicts . items ( )  )
   return out
              return base
                  os . makedirs ( top_dir )
      def jython_reloader ( main_func , args , kwargs ) :
                return False
 if isinstance ( widget , type ) :
    comma_separated_int_list_re = re . compile ( '^[\d,]+$' )
from __future__ import unicode_literals
  elif token_string . startswith ( BLOCK_TAG_START ) :
 global _localtime
    class InputStreamExhausted ( Exception ) :
   return new_value
                      attrs [ 'class' ] = self . form . required_css_class
  potfiles . append ( potfile )
                      try :
                  int_part_gd += thousand_sep
  def module_has_submodule ( package , module_name ) :
                          continue
 def path ( self ) :
 hour , minute = divmod ( timezone , 60 )
   def patch_cache_control ( response , ** kwargs ) :
 resolved_path . append ( ns )
          arg = settings . DATE_FORMAT
  def add_arguments ( self , parser ) :
 state [ 'cookies' ] = str ( state [ 'cookies' ] )
   if _samefile ( old_file_name , new_file_name ) :
          return WRAPPER_ASSIGNMENTS
   LockFileEx = windll . kernel32 . LockFileEx
              self . clear ( )
   return attrs
  else :
       _version = "2.0"
          return Field . validate ( self , value )
 try :
          value = signing . get_cookie_signer ( salt = key + salt ) . sign ( value )
  try :
  else :
 self . can_write . release ( )
          script_name = get_bytes_from_wsgi ( environ , 'SCRIPT_NAME' , '' )
 for digit in str ( number ) :
 self . hide_empty = options . get ( 'hide_empty' , False )
  if error_messages and f . name in error_messages :
              if hasattr ( pattern , '_callback_str' ) :
 space = unicode ( " " )
  headerlist . append ( 'HTTP_' + header )
   return statements
 hhmm = '%02d%02d' % divmod ( abs ( offset ) , 60 )
 if self . is_checked ( ) :
   def id_for_label ( self , id_ ) :
     class WidthRatioNode ( Node ) :
    def file_move_safe ( old_file_name , new_file_name , chunk_size = 1024 * 64 , allow_overwrite = False ) :
 from django . utils . dates import MONTHS
 if run_syncdb and executor . loader . unmigrated_apps :
 rollback = self . _rollback
   opts = new_class . _meta = ModelFormOptions ( getattr ( new_class , 'Meta' , None ) )
     shutdown_message = '\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.' % db_name
          if self . _isdst ( dt ) :
 values = _itervalues
                      break
   else :
              message = _ (  '%(datetime)s couldn\'t be interpreted '  'in time zone %(current_timezone)s; it '  'may be ambiguous or it may not exist.'  )
  import datetime
   def __repr__ ( self ) :
  except KeyError :
 import re
  else :
 if kwarg :
      help = "Introspects the database tables in the given database and outputs a Django model module."
          kw . extend ( [ d . hour , d . minute , d . second , d . microsecond , d . tzinfo ] )
              if not isinstance ( initial , list ) :
                  widget = HiddenInput
                      attrvalue = None
                  logger . addHandler ( self . config [ 'handlers' ] [ h ] )
 if extra_params :
  def _format_value ( self , value ) :
                  if self . verbosity >= 2 :
 def empty_form ( self ) :
          sign = '-'
  content_type , content_type_extra = meta_data . get ( 'content-type' , ( '' , { } ) )
 for key in self . bad_cookies :
 def widthratio ( parser , token ) :
  defaults . update ( kwargs )
 import sys
    def get_script_prefix ( ) :
 match = self . regex . search ( path )
              self . _post , self . _files = QueryDict ( self . body , encoding = self . _encoding ) , MultiValueDict ( )
          if key not in self :
 from io import BytesIO
   def __nonzero__ ( self ) :
 if self . instance . pk is None :
   @ property
     class BaseCommand ( object ) :
    __dir__ = new_method_proxy ( dir )
 LOCK_EX = fcntl . LOCK_EX
 from django . core . serializers . json import DjangoJSONEncoder
 pk_value = getattr ( self . instance , self . fk . rel . field_name )
 from django . utils import six
   def handle ( self , * app_labels , ** options ) :
  kwargs . setdefault ( 'content_type' , 'application/json' )
  def __init__ ( self , max_value = None , min_value = None , * args , ** kwargs ) :
              raise AttributeError ( "no such move, %r" % ( name , ) )
   class Module_six_moves_urllib_parse ( _LazyModule ) :
   if self . match is not None :
 template = Template ( content )
 if value in ( None , '' ) :
  except ( LookupError , ImportError ) as e :
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
   def handle_app_config ( self , app_config , ** options ) :
      help = "Updates database schema. Manages both apps with migrations and those without."
     def include_is_allowed ( filepath ) :
          bits = token . split_contents ( ) [ 1 : ]
              for accessor_name , object_list in self . m2m_data . items ( ) :
                      self . file . close ( )
 pk = to_python ( pk )
  logging . _handlers . clear ( )
 return http . QueryDict ( raw_query_string , encoding = self . _encoding )
          try :
  week_number = None
 if timeout == DEFAULT_TIMEOUT :
      lbp = 0
              str_hidden = '' . join ( hidden_fields )
    if settings . TEMPLATE_DEBUG :
              val = self . get ( k , version = version )
 from django . utils . jslex import prepare_js_for_gettext
   def to_python ( self , value ) :
 statements = sql_delete ( app_config , self . style , connection )
              return self . management_form . cleaned_data [ INITIAL_FORM_COUNT ]
   if not language_code_re . search ( accept_lang ) :
 self . origin = origin
 from django . core . validators import validate_ipv4_address
 import copy
 attrs += [ attr . name for attr in self . _moved_attributes ]
 yield item
 parser . add_argument ( '--version' , action = 'version' , version = self . get_version ( ) )
              if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
 break
 parser . add_option ( '--no-color' , action = 'store_true' , dest = 'no_color' , default = False ,  help = "Don't colorize the command output." )
   return value
 def check_1_7_compatibility ( ** kwargs ) :
   def add_handlers ( self , logger , handlers ) :
 fixture = open_method ( fixture_file , mode )
         for log in existing :
   def render ( self , name , value , attrs = None ) :
from django . http . cookie import SimpleCookie , parse_cookie
 return django . get_version ( )
                  value = value [ 1 : - 1 ]
 fp = six . BytesIO ( )
 for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :
      def __init__ ( self , display_name , loader , name , dirs ) :
 obj = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value )
                  raise ImproperlyConfigured ( "Error importing template source loader %s - can't pass arguments to function-based loader." % loader )
                  self . field . choice_cache = [  self . choice ( obj ) for obj in self . queryset . all ( )  ]
   def __getattr__ ( self , name ) :
  raise DisallowedHost ( msg )
        @ register . filter ( is_safe = False )
                  raise TemplateSyntaxError ( "%r must be the first tag "  "in the template." % node )
                       sublist_item = next_item
  EscapeUnicode = EscapeText
   def render ( self , name , value , attrs = None ) :
 result . append ( ch )
 from django . utils . module_loading import import_string
  except ImportError :
  def __init__ ( self , fields = ( ) , * args , ** kwargs ) :
  self . reset ( )
 raise NotImplementedError ( 'subclasses of BaseCache must provide an add() method' )
                                  raise
  pop_context = False
              args = [ 'msgattrib' ] + self . msgattrib_options + [ '-o' , pofile , pofile ]
   else :
              subject = '%s: %s' % (  record . levelname ,  record . getMessage ( )  )
      cache_suffix = '.djcache'
   def as_text ( self ) :
  return _HashedSeq ( key )
 singular = [ ]
   def get_many ( self , keys , version = None ) :
 content_type = content_type . strip ( )
      runfastcgi ( sys . argv [ 1 : ] )
              for item_type , meta_data , field_stream in Parser ( stream , self . _boundary ) :
                      pk_value = None
 if change == FILE_MODIFIED :
 if cache_timeout is None :
 from django . utils . translation import ungettext , ugettext as _
 pass
   else :
   def configure_custom ( self , config ) :
 from os . path import join , normcase , normpath , abspath , isabs , sep , dirname
    return LoadNode ( )
                               break
    def send_mail ( subject , message , from_email , recipient_list ,  fail_silently = False , auth_user = None , auth_password = None ,  connection = None , html_message = None ) :
 return list ( chain ( * errors ) )
   def popen_wrapper ( args , os_err_exc_type = CommandError ) :
    class Group ( list ) :
 from django . utils . translation import ugettext_lazy as _ , ugettext
   def is_protected_type ( obj ) :
  if len ( list_ ) == 1 :
  return message
              args = [ 'msgmerge' ] + self . msgmerge_options + [ pofile , potfile ]
  if options . get ( 'no_location' ) :
   def _get_size_from_underlying_file ( self ) :
 c . load ( cookie )
 self . current_token = self . next_token ( )
 def now ( parser , token ) :
                      app_config = apps . get_app_config ( exclude )
          s . feed ( value )
 if relative_dir :
              self . _current [ field . name ] = str ( getattr ( obj , field . name ) )
  return attachment
 self . default_kwargs = default_kwargs or { }
              result . setLevel ( _checkLevel ( level ) )
  self . stdout . write ( "Performing system checks...\n\n" )
   if hasattr ( error , 'error_dict' ) :
 for path in self . locale_paths :
  strip_spaces_between_tags = allow_lazy ( strip_spaces_between_tags , six . text_type )
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to flush. Defaults to the "default" database.' )
  except OSError as e :
              valid = False
  super ( SortedDict , self ) . __setitem__ ( key , value )
  except ValueError :
 self . value = force_text ( self . value )
  try :
   def construct_instance ( form , instance , fields = None , exclude = None ) :
  encoded = encoded . replace ( ";" , "\\073" ) . replace ( "," , "\\054" )
 self . toks [ groupid ] = tok
 if serializers is None and not _serializers :
 raise NotImplementedError ( 'subclasses of FileUploadHandler must provide a receive_data_chunk() method' )
                      cache . clear ( )
   si = open ( '/dev/null' , 'r' )
 common_prefix = None
          for i , line in enumerate ( lines ) :
 if not ip_str . lower ( ) . startswith ( '0000:0000:0000:0000:0000:ffff:' ) :
                  consume_next = True
                  continue
  def prepare_value ( self , value ) :
    def force_text ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
              for x , y in zip ( val1 , val2 ) :
                  raise TypeError ( "sep must be None or a string" )
                  cur_lineno = t . lineno + t . contents . count ( '\n' )
 return d ( stream_or_string , ** options )
 commands_dict = collections . defaultdict ( lambda : [ ] )
   try :
          self . mutex = threading . RLock ( )
          resolve ( path , urlconf )
 if not hasattr ( parser , '_namedCycleNodes' ) :
  from django . apps import apps
 if y == m == d == "0" :
     class ConvertingTuple ( tuple ) :
 parser . delete_first_token ( )
   def T ( self ) :
  func = TemplateLoader
 value = environ . get ( str ( key ) , str ( default ) )
 import zlib
 @ stringfilter
 return self . is_bound and not self . errors
                   ch , escaped = next ( pattern_iter )
 import re
              if form . is_bound :
     class ImmutableList ( tuple ) :
  if isinstance ( s , bytes ) or ( isinstance ( s , Promise ) and s . _delegate_bytes ) :
 def get_commands ( ) :
 self . _boundary = boundary
    class MIMEMixin ( ) :
              yield obj
          wsgi_opts = {  'maxSpare' : int ( options [ "maxspare" ] ) ,  'minSpare' : int ( options [ "minspare" ] ) ,  'maxThreads' : int ( options [ "maxchildren" ] ) ,  }
      def __init__ ( self , filepath , parsed ) :
 if six . PY2 :
 s = s . replace ( '</' , '<\\/' )
   def lru_cache ( maxsize = 100 , typed = False ) :
   self . write_migration_files ( changes )
          return len ( self . items )
 code = 'limit_value'
          self . nodelist = nodelist
          if hasattr ( self , 'error_dict' ) :
 widget = HiddenInput
          if data :
    def inlineformset_factory ( parent_model , model , form = ModelForm ,  formset = BaseInlineFormSet , fk_name = None ,  fields = None , exclude = None , extra = 3 , can_order = False ,  can_delete = True , max_num = None , formfield_callback = None ,  widgets = None , validate_max = False , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ,  min_num = None , validate_min = False ) :
  else :
  elif hasattr ( pattern , '_callback' ) :
 fileno = property ( lambda self : self . file . fileno )
  if request . method == 'HEAD' :
 new_filenames = [ filename . __file__ for filename in new_modules  if hasattr ( filename , '__file__' ) ]
  Iterator = object
 exclude = options . get ( 'exclude' )
 if key . startswith ( self . prefix ) :
                  if block_content [ : 9 ] in ( 'verbatim' , 'verbatim ' ) :
 show_traceback = options . get ( 'traceback' )
 if extra_attrs :
                  cache = caches [ cache_alias ]
          return self . value
 created_models = set ( )
   def listdir ( self , path ) :
 re_escaped = re . compile ( r'\\(.)' )
       def __init__ ( self , name , old_mod , new_mod , old_attr = None , new_attr = None ) :
 if self . data . minute == 0 :
 from django . core . management . sql import sql_custom
              if status != STATUS_OK :
 app . initialize ( argv = [ ] )
     class DateInput ( DateTimeBaseInput ) :
          instance = super ( SortedDict , cls ) . __new__ ( cls , * args , ** kwargs )
          return "<%s: %s>" % ( self . __class__ . __name__ , self or "None" )
  if 'args' in options :
 pass
 for v in self . validators :
  if not callable ( getattr ( template , 'render' , None ) ) :
 output = [ format_html ( '<select multiple="multiple"{0}>' , flatatt ( final_attrs ) ) ]
  phone2numeric = allow_lazy ( phone2numeric )
                  m2m_value = lambda value : value . natural_key ( )
  return iri_to_uri ( location )
  def __init__ ( self , takes_context , args , kwargs ) :
 self . common_logger_config ( logger , config , incremental )
              self . months = months
  def configure ( self ) :
 from functools import update_wrapper
     class FileInput ( Input ) :
       def __init__ ( self , name ) :
              return '1'
  import logging
   @ property
      from importlib import import_module
     @ python_2_unicode_compatible
          return b'' . join ( self . _container )
          _default = translation ( settings . LANGUAGE_CODE )
 return super ( QueryDict , self ) . pop ( key , * args )
                      if f == '__pycache__' :
 field = self . fields [ fieldname ]
              if not renamed :
 return mark_safe ( '\n' . join ( output ) )
 if not digest :
          mail . attach_alternative ( html_message , 'text/html' )
   if len ( bits ) :
              try :
          if isinstance ( elt , six . string_types ) :
    class CacheKeyWarning ( DjangoRuntimeWarning ) :
              state_frame [ self ] = compare_to
   if ( domain_part not in self . domain_whitelist and  not self . validate_domain_part ( domain_part ) ) :
              output . append ( options )
 if obj_list is None :
     for field in concrete_model . _meta . many_to_many :
   field = Model . _meta . get_field ( field_name )
              extra_classes . add ( self . form . error_css_class )
    def __iter__ ( self ) :
          nm = Header ( nm , 'utf-8' ) . encode ( )
              compare_to = None
          j = 36 ** factor
   elif name is not None and compile_function is not None :
            unhandled_params = unhandled_params [ : - len ( defaults ) ]
          return TemplateSyntaxError ( msg )
                      week_number -= 1
   def delete_first_token ( self ) :
      widget = EmailInput
 try :
      _cookie_allows_colon_in_names = False
          self . file_name = None
    def __iter__ ( self ) :
 raise NotImplementedError ( 'subclasses of Serializer must provide an handle_fk_field() method' )
  target_var = bits [ - 1 ]
     if isinstance ( value , six . string_types ) and value . lower ( ) in ( 'false' , '0' ) :
 basedirs . extend ( [ upath ( path ) for path in settings . LOCALE_PATHS ] )
                              result . append ( Group ( ( ( "%%(%s)s" % param ) , None ) ) )
              import_module ( app_name )
 self . connector = connector or self . default
 return _generate_cache_key ( request , request . method , headerlist , key_prefix )
 for migration in migrations_to_squash :
  if isinstance ( stream_or_string , six . string_types ) :
 if language_code not in self . _reverse_dict :
  for middleware_method in self . _request_middleware :
       sites = [ ]
       def stringfilter ( func ) :
 if bits and not kwarg_format :
 if t is not None :
 return '%02d' % self . data . day
 if self . _count is None :
 prefixed = name + "."
  except OSError :
          parts = viewname . split ( ':' )
          if data is None :
              if default is not RAISE_ERROR :
          return '<Page %s of %s>' % ( self . number , self . paginator . num_pages )
  else :
   def render_node ( self , node , context ) :
          tpl = "EntitiesForbidden(name='{}', system_id={!r}, public_id={!r})"
    if callable ( current ) :
      format_key = 'TIME_INPUT_FORMATS'
 raise NotImplementedError ( 'subclasses of Tokenparser must provide a top() method' )
  if app_config . models_module is None or app_config in excluded_apps :
  try :
 return token
          if len ( self . _cache ) >= self . _max_entries :
 def autoescape ( parser , token ) :
    class HttpResponseForbidden ( HttpResponse ) :
          return s
    @ python_2_unicode_compatible
             self . _headers = { }
                  raise CommandError ( '"%s" is not a valid port number '  'or address:port pair.' % options [ 'addrport' ] )
          lang = get_language ( )
   def pretty_name ( name ) :
   def value_from_datadict ( self , data , files , name ) :
 return iter ( getattr ( d , _iteritems ) ( ** kw ) )
          if self . is_localized :
              return
              for fixture_label in fixture_labels :
      pass
 basetype , subtype = mimetype . split ( '/' , 1 )
 from django . forms . widgets import *
                  e . django_template_source = node . source
  return wrapper
                      raise CommandError (  "errors happened while running msgmerge\n%s" % errors )
  self . add_arguments ( parser )
 if value != '' :
 parser . add_argument ( '--merge' , action = 'store_true' , dest = 'merge' , default = False ,  help = "Enable fixing of migration conflicts." )
      import threading
    def ngettext_lazy ( singular , plural , number = None ) :
 return '%s(%s)' % ( self . __class__ . __name__ , dictreprs )
              if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
  if bytes < KB :
          if not self . _is_rendered :
                  return bytes ( self ) % rhs
 pgettext_lazy = lazy ( pgettext , six . text_type )
   def _create_alternatives ( self , msg ) :
      default_error_messages = {  'invalid' : _ ( 'Enter a number.' ) ,  }
   def __getitem__ ( self , idx ) :
 if not self . recipients ( ) :
   if num_loopvars != len_item :
                       value . decode ( charset )
     try :
              return ''
          if data :
              weight += 1
 length = int ( num )
  if last == 3 :
   if new_name [ 0 ] . isdigit ( ) :
 raise CommandError ( 'There is no system check with the "%s" tag.' % invalid_tag )
    if not os . access ( self . file_path , os . W_OK ) :
     return Operator
 memo [ id ( self ) ] = result
 if '()' in config :
   def clear ( self ) :
  if exclude and f . name in exclude :
              out += truncate_text
 def __getitem__ ( self , key ) :
  else :
              exts = extensions if extensions else [ 'html' , 'txt' ]
     if not shown :
         from datetime import date as real_date , datetime as real_datetime
   self . attr = new_attr
 leading = self . has_leading_dir ( x . name for x in members )
              return default
     @ deconstructible
      def format ( self , formatstr ) :
              if getattr ( e , 'winerror' , 0 ) != 32 and getattr ( e , 'errno' , 0 ) != 13 :
                  self . load_label ( fixture_label )
   parts . append ( value )
 dir_name , file_name = os . path . split ( name )
     class IncludeNode ( Node ) :
 raise NotImplementedError ( 'subclasses of BaseCache must provide a set() method' )
              pass
                  pass
          parent = self . parent_name . resolve ( context )
   def pop ( self , key , * args ) :
      if vary_on is None :
              if len ( value ) != 1 :
 if not isabs ( path ) :
  return self . data . hour
          return { f : e . as_data ( ) for f , e in self . items ( ) }
 format = force_str ( default or get_format ( 'DATETIME_INPUT_FORMATS' ) [ 0 ] )
   raise TemplateDoesNotExist ( template_name )
 if representative is None :
  return [ form . cleaned_data for form in self . forms ]
          length = int ( arg )
 from django . utils import six
 styles . reverse ( )
 raise
              form = self . forms [ i ]
 if origin :
  commands_dict [ app ] . append ( name )
 from logging . config import dictConfig
               return dec ( func )
 obj . __class__ = self . __class__
                  sys . exit ( exit_code )
 return datetime . time ( ** kw )
          self . object = obj
  import copy
                          pass
 try :
 return dateformat . time_format ( value , get_format ( format or 'TIME_FORMAT' , use_l10n = use_l10n ) )
  self . urlconf_name = urlconf_name
  self . addr , _ipv4 , _ipv6 , _fqdn , self . port = m . groups ( )
   RAW = "raw"
          return iter ( self . file )
 template = '%(input)s'
 if p_pattern . startswith ( '^' ) :
          arg = settings . TIME_FORMAT
 results = ( [ ] , [ ] )
 if not hasattr ( translation , '_catalog' ) :
              line = sio . readline ( size )
  from django . core . exceptions import (  ImproperlyConfigured , ValidationError , NON_FIELD_ERRORS , FieldError )
              return [ super ( ModelMultipleChoiceField , self ) . prepare_value ( v ) for v in value ]
                form . data [ form . add_prefix ( self . _pk_field . name ) ] = None
     class SlugField ( CharField ) :
  except ImportError as e :
                  self . create_table ( db , tablename )
    return obj_dict
    @ register . filter ( is_safe = False )
          parser . __loaded_blocks = [ block_name ]
              self . blocks [ name ] . insert ( 0 , block )
  if getattr ( ev , 'filename' , None ) is None :
 if '()' in config :
 if not isinstance ( list_ , ( tuple , list ) ) or len ( list_ ) != 2 :
                      raise
  try :
          return value
 for attr in _urllib_robotparser_moved_attributes :
 from django . core . management . utils import find_command , popen_wrapper
   logger . error ( 'Internal Server Error: %s' , request . path ,  exc_info = exc_info ,  extra = {  'status_code' : 500 ,  'request' : request  }  )
   self . stdout . write ( output )
 import time
          if kwarg_format :
 cache_key += '.%s' % tz_name . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' ) . replace ( ' ' , '_' )
   else :
 _fields_ = [  ( '_offset' , _OFFSET ) ,  ( 'Pointer' , PVOID ) ]
 try :
          _supported = OrderedDict ( settings . LANGUAGES )
                      raise CommandError (  "Cache table '%s' could not be created.\nThe error was: %s." %  ( tablename , force_text ( e ) ) )
     class NowNode ( Node ) :
 if match :
 s = s . replace ( '\r' , '\\r' )
 if domain == 'djangojs' and file_ext in command . extensions :
  return urlquote ( value , ** kwargs )
 response_headers = [ ( str ( k ) , str ( v ) ) for k , v in response . items ( ) ]
 self . error_messages = messages
              try :
 self . stdout = OutputWrapper ( options . get ( 'stdout' , sys . stdout ) )
 get_language = lambda : settings . LANGUAGE_CODE
      setattr ( Module_six_moves_urllib_request , attr . name , attr )
                  try :
          if value in self . empty_values :
 if settings . USE_L10N and isinstance ( value , six . string_types ) :
      compare = lambda self , a , b : a < b
                      lookup_str = callback . __module__ + "." + callback . __name__
                      objects_in_fixture += 1
  if whitelist is not None :
 raise NotImplementedError ( 'subclasses of BaseCache must provide a clear() method' )
      help = ( "Runs the command-line client for specified database, or the "  "default database if none is provided." )
                      fp . write ( content )
              digest = hashlib . sha256
          value = self . to_python ( value ) . strip ( )
          bad_serializer = BadSerializer ( exc )
 super ( Command , self ) . __init__ ( )
      attrs = { 'model' : model }
  return name , ( value , params )
   def O ( self ) :
 if propagate is not None :
 if not isinstance ( fk , ForeignKey ) or ( fk . rel . to != parent_model and  fk . rel . to not in parent_model . _meta . get_parent_list ( ) ) :
 if isinstance ( elt , Group ) :
 return MONTHS_ALT [ self . data . month ]
   def reload ( self ) :
    def get_unique_error_message ( self , unique_check ) :
 if hasattr ( _active , "value" ) :
 if basetype == 'text' :
                  raise ValidationError ( ungettext (  "Please submit %d or fewer forms." ,  "Please submit %d or fewer forms." , self . max_num ) % self . max_num ,  code = 'too_many_forms' ,  )
              if getattr ( e , 'silent_variable_failure' , False ) :
 try :
       def __init__ ( self , obj ) :
 statements = [ ]
   @ cached_property
  illegal_formatting = _illegal_formatting . search ( fmt )
 def __init__ ( self , stream , limit , buf_size = 64 * 1024 * 1024 ) :
  return no
    if not os . path . isdir ( directory ) :
   _encoding = None
              six . reraise ( * exc_info )
  warnings . warn (  "The django.forms.util module has been renamed. "  "Use django.forms.utils instead." , RemovedInDjango19Warning , stacklevel = 2 )
   def loads ( self , data ) :
                  declared_fields . update ( base . declared_fields )
   def reload ( self ) :
      filepath = os . path . abspath ( filepath )
  self . encoding = encoding
 if not kwarg_format :
          try :
  except Exception :
 from django . utils import six
  self . position += len ( output )
 return result
 return retval
 sys . stderr . close ( )
          neg , value = self . convert ( s , self . digits , self . decimal_digits , self . sign )
  def items ( self ) :
 if processors is None :
 params = { 'limit_value' : self . limit_value , 'show_value' : cleaned }
      def compile_string ( template_string , origin ) :
 self . empty_permitted = empty_permitted
 self . empty = options . get ( 'empty' , False )
     def localize_input ( value , default = None ) :
    def remove_move ( name ) :
          j = text . find ( substr , i )
          cursor = None
 self . _tzname = self . tzname ( dt )
    except Exception as e :
                      try :
   self . can_write . acquire ( )
 self . style_func = None
                      cls . __str__ = cls . __text_cast
    EMPTY_VALUES = ( None , '' , [ ] , ( ) , { } )
 from django . utils . encoding import force_text
    DEBUG = 10
  password = force_bytes ( password )
              op = OPERATORS [ token ]
 pass
  else :
 def truncatewords_html ( value , arg ) :
                                  self . stdout . write ( "    No custom SQL for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
   class DefaultCacheProxy ( object ) :
                  break
                          if self . selected_fields is None or field . attname in self . selected_fields :
 try :
  except StandardError as e :
 norm_patterns = [ p [ : - len ( dir_suffix ) ] if p . endswith ( dir_suffix ) else p for p in self . ignore_patterns ]
              value = ConvertingDict ( value )
   LPOVERLAPPED = POINTER ( OVERLAPPED )
 self . pk_field = kwargs . pop ( "pk_field" , False )
  from __future__ import unicode_literals
                  if old_field_name :
              sys . stdout . write ( self . main_help_text ( ) + '\n' )
 I18N_MODIFIED = 2
 offset = ( len ( self . __starttag_text )  - self . __starttag_text . rfind ( "\n" ) )
 return b'\r\n' . join ( headers )
      default_validators = [ validators . validate_ipv4_address ]
  def __init__ ( self ) :
 try :
               cache = dict ( )
   def validate_name ( self , name , app_or_project ) :
 self . locale_paths . insert ( 0 , os . path . join ( os . path . abspath ( dirpath ) , dirname ) )
 use_grouping = settings . USE_L10N and settings . USE_THOUSAND_SEPARATOR
 return duplicate
 if trim :
  except Exception as e :
   size = property ( _get_size , _set_size )
   def incr ( self , key , delta = 1 , version = None ) :
          self . value = value
 if lang_code is not None :
   def get ( self , key , default = None , version = None ) :
  elif options [ 'app_label' ] :
 result = self . nodelist . render ( context )
  LUHN_ODD_LOOKUP = ( 0 , 2 , 4 , 6 , 8 , 1 , 3 , 5 , 7 , 9 )
                          if field_type == 'BooleanField(' :
          self . vals . append ( val )
   def __getitem__ ( self , key ) :
  self . attr = old_attr
          self . base_fields [ TOTAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput )
              return default
              return host
   def get_queryset ( self ) :
  except InvalidTemplateLibrary as e :
              if incremental :
  return IfNode ( conditions_nodelists )
   sign = '-' if offset < 0 else '+'
 name = sign + hhmm
      class WindowsError ( Exception ) :
 try :
 get_supported_language_variant . cache_clear ( )
 ORDERING_FIELD_NAME = 'ORDER'
 self . cookies = SimpleCookie ( self . cookies )
                  default_list = [ ]
     def validate_ipv46_address ( value ) :
 from django . utils . functional import lazy
  def to_python ( self , value ) :
 if len ( bits ) != 2 :
  from datetime import timedelta , tzinfo
                  result . append ( self . create_token ( self . template_string [ upto : start ] , ( upto , start ) , False ) )
          parser . add_argument ( 'args' , metavar = 'fixture' , nargs = '+' ,  help = 'Fixture labels.' )
   response . _closable_objects . append ( request )
 @ stringfilter
                  try :
 args = [  'xgettext' ,  '-d' , domain ,  '--language=Python' ,  '--keyword=gettext_noop' ,  '--keyword=gettext_lazy' ,  '--keyword=ngettext_lazy:1,2' ,  '--keyword=ugettext_noop' ,  '--keyword=ugettext_lazy' ,  '--keyword=ungettext_lazy:1,2' ,  '--keyword=pgettext:1c,2' ,  '--keyword=npgettext:1c,2,3' ,  '--keyword=pgettext_lazy:1c,2' ,  '--keyword=npgettext_lazy:1c,2,3' ,  '--output=-'  ] + command . xgettext_options
 shells = [ 'ipython' , 'bpython' ]
 for app_config in apps . get_app_configs ( ) :
    def lazy ( func , * resultclasses ) :
 @ stringfilter
    def _load_serializers ( ) :
 FormSet = formset_factory ( form , formset , extra = extra , min_num = min_num , max_num = max_num ,  can_order = can_order , can_delete = can_delete ,  validate_min = validate_min , validate_max = validate_max )
                         for middleware_method in self . _exception_middleware :
 self . _is_rendered = True
      if cookie == '' :
    def templatize ( src , origin = None ) :
    def do_ntranslate ( singular , plural , number , translation_function ) :
 FormSet = modelformset_factory ( model , ** kwargs )
  requires_system_checks = False
  else :
   def __iter__ ( self ) :
              return
                   continue
 if new_value == value :
   class Command ( AppCommand ) :
 if exp is not None and exp < time . time ( ) :
                  message = 'use only numbers, letters and underscores'
    def get_language_from_path ( request ) :
 default_error_messages = {  'invalid_choice' : _ ( 'The inline foreign key did not match the parent instance primary key.' ) ,  }
 self . stream . write ( b'\n' )
  def render ( self , context ) :
  strip_entities = allow_lazy ( strip_entities , six . text_type )
 from django . utils . timezone import is_aware
           if data is FILE_INPUT_CONTRADICTION :
    class ModelFormOptions ( object ) :
  if flags is not None :
     class TimeFormat ( Formatter ) :
 from django . conf import settings
 result . fields = tuple ( [ x . __deepcopy__ ( memo ) for x in self . fields ] )
 from django . forms . widgets import Media , MediaDefiningClass , TextInput , Textarea
 migration . ancestry = loader . graph . forwards_plan ( ( app_label , migration_name ) )
 return qs
  from django . core import mail
    return None
    definition = getattr ( cls , 'Media' , None )
   def n ( self ) :
 new_context . _reset_dicts ( values )
          six . reraise ( ValueError , ValueError ( "%r is not a valid date" % date ) , sys . exc_info ( ) [ 2 ] )
 if not commit :
   def __nonzero__ ( self ) :
          lbp = bp
 args = [ arg . resolve ( context ) for arg in self . args ]
                  name = match . lastgroup
              end = index
 super ( MemcachedCache , self ) . __init__ ( server , params ,  library = memcache ,  value_not_found_exception = ValueError )
 with io . open ( orig_file , encoding = settings . FILE_CHARSET ) as fp :
               _localtime = LocalTimezone ( )
                  if status != STATUS_OK :
 if m :
   def run_from_argv ( self , argv ) :
   def getvalue ( self ) :
  _ , file_ext = os . path . splitext ( self . file )
  return False
 context_extras [ 'sql_queries' ] = connection . queries
 def as_data ( self ) :
      class IfEqualNode ( Node ) :
  elif disable_existing :
 obj . attrs = self . attrs . copy ( )
 link [ PREV ] = last
          self . sign = sign
  for slots_var in slots :
          return self . scheme == 'https'
  if not self . _populated :
              self . empty_label = empty_label
 import os
                  answer = None
                  self . _delete ( k )
 def nodelist ( self ) :
  return serializer ( ) . loads ( data )
   import django . core . checks . compatibility . django_1_6_0
  else :
           return [ ( '' , [ ] ) ]
  def add_arguments ( self , parser ) :
    for f in fields :
   def reset ( self ) :
    @ register . tag
  self . _update_unget_history ( len ( bytes ) )
          return ''
 return calendar . isleap ( self . data . year )
   @ property
  new_class = ( super ( DeclarativeFieldsMetaclass , mcs )  . __new__ ( mcs , name , bases , attrs ) )
      help = ( "Runs over the entire source tree of the current directory and "  "pulls out all strings marked for translation. It creates (or updates) a message "  "file in the conf/locale (in the django tree) or locale (for projects and "  "applications) directory.\n\nYou must run this command with one of either the "  "--locale, --exclude or --all options." )
 parser . add_argument ( '--no-wrap' , action = 'store_true' , dest = 'no_wrap' ,  default = False , help = "Don't break long message lines into several lines." )
     self . _validate_unique = False
              kwargs [ 'help_text' ] = help_texts [ f . name ]
     def has_key ( self , key , version = None ) :
  except AttributeError :
          key = self . make_key ( key , version = version )
          self . tags [ getattr ( func , "_decorated_function" , func ) . __name__ ] = func
                  return code
 match = (  pattern == '*' or  pattern . startswith ( '.' ) and (  host . endswith ( pattern ) or host == pattern [ 1 : ]  ) or  pattern == host  )
 INDEX_PATTERN = re . compile ( r'^\[\s*(\w+)\s*\]\s*' )
  if os . path . exists ( pofile ) :
   if keyword . iskeyword ( new_name ) :
 return self . data . year
 from django . core . management . base import BaseCommand
    if six . PY3 :
 return super ( TimestampSigner , self ) . sign ( value )
  try :
   else :
  if arg is None :
 global _default
     class TimeField ( BaseTemporalField ) :
 if data [ last : last + 1 ] == b'\r' :
          super ( ChoiceField , self ) . __init__ ( required = required , widget = widget , label = label ,  initial = initial , help_text = help_text , * args , ** kwargs )
 VARIABLE_TAG_END = '}}'
                       old = '#: ' + work_file
              self . _load_post_and_files ( )
 while rbp < self . current_token . lbp :
 import sys
  def _get_page_range ( self ) :
                  field_params [ 'max_digits' ] = row [ 4 ]
 return list ( value )
              continue
   def setdefault ( self , key , default = None ) :
    def check_migrations ( self ) :
          from django . utils . daemonize import become_daemon
              raise CommandError ( "%r conflicts with the name of an existing "  "Python module and cannot be used as an app "  "name. Please try another name." % app_name )
 import hashlib
  except ValueError :
                  self . literal = int ( self . literal )
                  imatch = inline_re . match ( t . contents )
              filename = filename [ : - 1 ]
   def iteritems ( d , ** kw ) :
                  pieces . append ( re_escaped . sub ( r'\1' , piece ) )
  if hasattr ( mw_instance , 'process_response' ) :
              return default
 if err_log :
              handler . addQuickElement ( "comments" , item [ 'comments' ] )
 self . template_cache . clear ( )
      text = match . group ( 1 )
     class JsLexer ( Lexer ) :
          raise self . error ( None , "Unclosed tags: %s " % ', ' . join ( parse_until ) )
 if index_sql :
 def __init__ ( self , message , code = None , params = None ) :
 unpack = num_loopvars > 1
    class SerializationError ( Exception ) :
          self . nodelist = nodelist
  except ValueError :
 connection = connections [ options . get ( 'database' , DEFAULT_DB_ALIAS ) ]
 cword = int ( os . environ [ 'COMP_CWORD' ] )
 _win = ( sys . platform == "win32" )
   activate = lambda x : None
                  other = other . __cast ( )
          boundarystream = InterBoundaryIter ( self . _stream , self . _separator )
  try :
 if len ( key ) > MEMCACHE_MAX_KEY_LENGTH :
              guessed_filename = used_name
from __future__ import unicode_literals
              if default_list is None :
 has_new_option = hasattr ( self , 'requires_system_checks' )
 from django . db . migrations . writer import MigrationWriter
 os . dup2 ( se . fileno ( ) , sys . stderr . fileno ( ) )
          super ( _LazyModule , self ) . __init__ ( name )
 return tpl . format ( self . name , self . sysid , self . pubid )
               host = self . META [ 'SERVER_NAME' ]
      import dummy_threading as threading
  try :
 def __init__ ( self , callback ) :
  except NoReverseMatch :
                      visible_issue_count += len ( issues )
  except ImportError :
              raise CommandError ( "%r conflicts with the name of an existing "  "Python module and cannot be used as a "  "project name. Please try another name." %  project_name )
                  res , args = flatten_result ( item )
 wrapper . cache_info = cache_info
              print ( ' ' . join ( sorted ( filter ( lambda x : x . startswith ( curr ) , subcommands ) ) ) )
    def _check_middleware_classes ( app_configs = None , ** kwargs ) :
              return path . split ( '\\' , 1 )
  else :
   def unclosed_block_tag ( self , parse_until ) :
          self . command_stack . append ( ( command , token . source ) )
              boundary = boundary . encode ( 'ascii' )
              class ConvertingDict ( dict ) :
                          logger . level = logging . NOTSET
 self . __doc__ = self . __class__ . __doc__
                  payload = text . encode ( utf8_charset . output_charset )
   def file_complete ( self , file_size ) :
      pass
              return value . date ( )
 pass
          self . style = color_style ( )
     class LoadNode ( Node ) :
          self . language = language
     def open ( self , name , mode = 'rb' ) :
 import os
                      raise NoReverseMatch (  "%s is not a registered namespace inside '%s'" %  ( key , ':' . join ( resolved_path ) ) )
          if name is None :
  return context_extras
     return OrderedDict ( fields )
 if level :
  new_result = [ ]
 output . append ( pformat ( sys . modules ) )
   def handle_app_config ( self , app_config , ** options ) :
          count = since // seconds
           int2byte = operator . methodcaller ( "to_bytes" , 1 , "big" )
 start += len ( toktext )
          if hasattr ( _urlconfs , "value" ) :
  else :
 return self . data . isocalendar ( ) [ 0 ]
              self . execute ( * args , ** cmd_options )
 super ( DebugParser , self ) . extend_nodelist ( nodelist , node , token )
              self . __offset = timedelta ( minutes = offset )
  cleaned_data = form . cleaned_data
 def content ( self , value ) :
          self . _out = out
                          temp_lib . filters [ name ] = lib . filters [ name ]
                      continue
                  return default
   def build_attrs ( self , extra_attrs = None , ** kwargs ) :
  use_workaround = (  ( current_version < ( 2 , 7 , 3 ) ) or  ( current_version >= ( 3 , 0 ) and current_version < ( 3 , 2 , 3 ) )  )
   def prepare_value ( self , value ) :
      pass
   def __str__ ( self ) :
   def __getitem__ ( self , index ) :
 if use_func :
              u = salt + struct . pack ( b'>I' , i )
  return self . _fname
 errors = [ ]
   for val in value :
                  filter_name = match . group ( "filter_name" )
              f . error_messages . setdefault ( 'incomplete' ,  self . error_messages [ 'incomplete' ] )
 try :
  except TypeError :
  try :
   def unlock ( f ) :
   def __enter__ ( self ) :
                                  file_ . close ( )
   def _helper ( list_ , tabs = 1 ) :
           return datetime . utcnow ( ) . replace ( tzinfo = utc )
   def reraise ( tp , value , tb = None ) :
          return tag in self . tags_available ( )
  else :
    def http_date ( epoch_seconds = None ) :
   if consume_next :
              template_string = force_text ( template_string )
              questioner = InteractiveMigrationQuestioner ( )
 from django . utils . encoding import force_text
  from django . utils import six
  connection = connections [ options [ 'database' ] ]
  return ( resource , 'egg:%s:%s' % ( app_config . name , pkg_name ) )
  raise CommandError ( "Unable to serialize database: %s" % e )
 self . content_type = None
              value = False
  nesting -= 1
 if 'version' not in config :
   def get ( self , key , default = None ) :
                  TYPE = FILE
  if domain is not None :
     class TemplateTagNode ( Node ) :
   while True :
 self . _separator = b'--' + boundary
  def __init__ ( self , * args , ** kwargs ) :
              field_params [ 'max_length' ] = int ( row [ 3 ] )
                  trimmed = trim_url ( middle )
   def __enter__ ( self ) :
  logging_config_func ( DEFAULT_LOGGING )
 return { }
                  error = error . error_dict
          if attrs is not None :
                                  e . django_template_source = node . source
 loaded_objects_in_fixture = 0
     class DatabaseCache ( BaseDatabaseCache ) :
 pass
                      if set ( kwargs . keys ( ) ) | set ( defaults . keys ( ) ) != set ( params ) | set ( defaults . keys ( ) ) | set ( prefix_args ) :
 if self . is_bound :
          if self . _done :
  self . error ( "junk characters in start tag: %r"  % ( rawdata [ k : endpos ] [ : 20 ] , ) )
 try :
 if self . compare ( cleaned , self . limit_value ) :
      error_class = TemplateSyntaxError
          raise TemplateSyntaxError ( "'regroup' tag takes five arguments" )
 def capfirst ( value ) :
 top_errors = self . non_field_errors ( )
          return not ( self == other )
  f = s [ : end ]
   key_salt = force_bytes ( key_salt )
  if not UserModel . _default_manager . exists ( ) and options . get ( 'interactive' ) :
 try :
  self . validators = self . default_validators + validators
          warnings . warn (  "django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. "  "Use django.utils.timezone.get_default_timezone instead." ,  RemovedInDjango19Warning )
  return sign + int_part + dec_part
                   if not isinstance ( message , ValidationError ) :
  self . set ( key , value , timeout , version )
    @ register . filter ( is_safe = True )
  self . compression_formats = {  None : ( open , 'rb' ) ,  'gz' : ( gzip . GzipFile , 'rb' ) ,  'zip' : ( SingleZipReader , 'r' ) ,  }
 if os . path . isdir ( app_dir ) :
          self . _stream = stream
 if end is not None :
 def fdel ( instance , name = fdel . __name__ ) :
               if bit . startswith ( '_("' ) or bit . startswith ( "_('" ) :
              raise ValueError (  "'%s.%s' has more than one ForeignKey to '%s.%s'."  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
              func = import_string ( path )
  bits = token . split_contents ( ) [ 1 : ]
  if self . max_digits is not None and digits > self . max_digits :
  except ImproperlyConfigured :
  p_pattern = pattern . regex . pattern
                  self . stdout . write ( self . style . MIGRATE_HEADING ( "Migrations for '%s':" % app_label ) + "\n" )
  try :
          return t . render ( context_instance )
               age = time . time ( ) - timestamp
   def path ( self , name ) :
       def bytes_to_text ( s , encoding ) :
                  kwargs [ 'initial' ] = self . initial_extra [ i - self . initial_form_count ( ) ]
   _cached_modules = _cached_modules . union ( new_modules )
   def __exit__ ( self , exc_type , exc_value , traceback ) :
      pass
          return os . path . join ( self . dirpath , self . file )
     if PY3 :
  if exclude and f . name in exclude :
  if ch == '+' :
                  r = r [ : - 6 ] + 'Z'
 self . name = name
   if cword == 1 :
          if parse_until is None :
          self . form = form
    def inner_run ( self , * args , ** options ) :
 return default
              if not len ( empty_label ) == 3 :
 if self . verbosity >= 1 and sql :
   def value_from_datadict ( self , data , files , name ) :
  return response
   wsgi_opts [ 'debug' ] = options [ 'debug' ] is not None
          if initial is None :
 self . children = children [ : ] if children else [ ]
   elif not os . path . exists ( self . file_path ) :
  return template
 if self . verbosity >= 2 :
      format_key = 'DATE_INPUT_FORMATS'
              return escape ( output )
 @ stringfilter
              return get_template ( template_name , dirs )
              netloc = netloc . encode ( 'idna' ) . decode ( 'ascii' )
 if not response . has_header ( 'Cache-Control' ) :
     def _clean_form ( self ) :
          urlconf = get_urlconf ( )
 key = plist . pop ( 0 ) . lower ( ) . decode ( 'ascii' )
    def set_signed_cookie ( self , key , value , salt = '' , ** kwargs ) :
          if not var or ' ' in var :
   class Command ( CheckCommand ) :
   __contains__ = has_key
 self . upload_handlers = ImmutableList (  self . upload_handlers ,  warning = "You cannot alter upload handlers after the upload has been processed."  )
 msg_count = 0
 latest_date = None
              match = kwarg_re . match ( bits [ 0 ] )
          self . class_name = class_name
                      indexes = connection . introspection . get_indexes ( cursor , table_name )
   pos = 0
  options += [ ( app_config . label , 0 ) for app_config in app_configs ]
 import io
  try :
  return 'th'
              self . reason_phrase = reason
   for tag in open_tags :
 from django . utils . timezone import get_default_timezone , is_aware , is_naive
   if self . can_delete :
 return obj
              context [ self . variable_name ] = value
              self . _populate ( )
  return value
    def __iter__ ( self ) :
 super ( QueryDict , self ) . clear ( )
      format_key = ''
 str_number = str_number [ 1 : ]
   counters = [ 0 ] * len ( handlers )
     try :
   sys . stderr . write ( msg )
 with self . _lock . reader ( ) :
 self . error_messages = getattr ( options , 'error_messages' , None )
  except KeyError :
   else :
           raise parser . error_class (  "Not expecting '%s' in this position in if tag." % self . id  )
   class Command ( BaseCommand ) :
   except NameError :
 import sys
      initLock = Lock ( )
              locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % basedir ) )
  return self . _post
              return [ ]
              if self . message_context :
              for match in regexes [ state ] . finditer ( text , start ) :
 from django . utils import six
  return self . limit_choices_to
  while rest :
 if is_compressed :
                  raise ValidationError ( self . error_messages [ 'invalid_time' ] , code = 'invalid_time' )
 from django . utils import translation
   except GeneratorExit :
  return ResolverMatch ( self . callback , args , kwargs , self . name )
   return _localtime
                      fh . write ( writer . as_string ( ) )
  raise CommandError ( message )
                  if e . errno != errno . EEXIST :
  return ""
 return range ( 1 , self . num_pages + 1 )
 def ifchanged ( parser , token ) :
  bits = token . contents . split ( )
 if not value :
  for path in all_locale_paths ( ) :
   def write ( self , val ) :
   def add_fields ( self , form , index ) :
          try :
 import zlib
 try :
 return obj
   resolver_match = resolver . resolve ( request . path_info )
 option = '--testrunner='
 if decimal_separator in value :
  if not dictionary :
                  if self . asvar is None :
 if custom_sql :
  if i >= len ( subject ) :
 try :
 from django . core . files import uploadhandler
     class DjangoTranslation ( gettext_module . GNUTranslations ) :
  except ( KeyError , IndexError , AttributeError ) :
 self . _cache . delete_multi ( map ( l , keys ) )
    class CacheHandler ( object ) :
 class BoundField ( object ) :
   def get_parent ( self , context ) :
  else :
 while remaining_bits :
 self . pubid = pubid
  if self . verbosity > 0 :
              _mtimes [ filename ] = mtime
     capfirst = lambda x : x and force_text ( x ) [ 0 ] . upper ( ) + force_text ( x ) [ 1 : ]
              host = self . META [ 'HTTP_X_FORWARDED_HOST' ]
              return
          return s
      class _MovedItems ( _LazyModule ) :
  if fields and f . name not in fields :
 self . asvar = asvar
 LOCK_EX = 0x2
   def add ( self , item ) :
 return filenames
 from threading import local
   if pathext is None :
  args = [  'xgettext' ,  '-d' , domain ,  '--language=C' ,  '--keyword=gettext_noop' ,  '--keyword=gettext_lazy' ,  '--keyword=ngettext_lazy:1,2' ,  '--keyword=pgettext:1c,2' ,  '--keyword=npgettext:1c,2,3' ,  '--output=-'  ] + command . xgettext_options
              kwargs [ 'label' ] = labels [ f . name ]
              return ugettext ( "Please correct the duplicate data for %(field)s." ) % {  "field" : unique_check [ 0 ] ,  }
   value = value . astimezone ( timezone )
  def __init__ ( self , offset = None , name = None ) :
import collections
  from django . utils . translation import ugettext_lazy as _ , pgettext_lazy
  urlunquote = allow_lazy ( urlunquote , six . text_type )
  return result
      pass
              value = token_kwargs ( remaining_bits , parser , support_legacy = False )
   def __cast ( self ) :
              c = config . pop ( '()' )
    @ register . tag
              self . settings_exception = exc
                        open_tags = open_tags [ i + 1 : ]
 if decompress :
    elif cwords [ 0 ] in subcommands and cwords [ 0 ] != 'help' :
  return field_dict
  if now and not isinstance ( now , datetime . datetime ) :
 return header . lower ( ) in self . _headers
 output . append ( last_row )
 from django . utils . functional import curry , Promise
 result = str ( int ( round ( ratio ) ) )
 get_resolver . cache_clear ( )
          if self . cmd . _called_from_command_line :
          indent = '\t' * tabs
    def force_bytes ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
 m = self . WORD_PATTERN . match ( rest )
              pass
 if errors :
          return True
     ret_ip = [ ]
                          if not field_desc . endswith ( '(' ) :
      config [ 'fmt' ] = config . pop ( 'format' )
          path = os . path . join ( app_config . path , 'management' )
    with self . _lock . writer ( ) :
              while new_name . find ( '__' ) >= 0 :
   wrapped_main_func = check_errors ( main_func )
               obj = super ( klass , cls ) . __new__ ( cls )
      year_days = [ None , 0 , 31 , 59 , 90 , 120 , 151 , 181 , 212 , 243 , 273 , 304 , 334 ]
   return mark_safe ( '\n' . join ( output ) )
              return new_class
  return r
          return unbound . im_func
  return templatetags_modules
  else :
    if '.' not in var and 'e' not in var . lower ( ) :
   except NotImplementedError :
 ret = self . _cache . get_multi ( new_keys )
                          stats [ HITS ] += 1
  else :
              key = self . make_key ( key , version = version )
 if g [ 0 ] == '"' :
  else :
              hextets = [ '' ] + hextets
              return None
              return { }
   def __repr__ ( self ) :
          return 0
 values = _itervalues
   if locales :
          self . timezone = timezone
 words = word_split_re . split ( force_text ( text ) )
 raise NotImplementedError ( 'subclasses of Serializer must provide a start_serialization() method' )
  path = path_override if path_override is not None else request . path
          self . callback = callback
  try :
                      continue
     class MovedModule ( _LazyDescr ) :
          cache_timeout = settings . CACHE_MIDDLEWARE_SECONDS
      def _get_validation_exclusions ( self ) :
   def D ( self ) :
           l = len ( tokens )
 self . _done = False
          path = os . environ . get ( 'PATH' , '' ) . split ( os . pathsep )
                      response = wrapped_callback ( request , * callback_args , ** callback_kwargs )
 notifier = pyinotify . Notifier ( wm , EventHandler ( ) )
  try :
    dot_re = re . compile ( r'\S' )
    out = b'' . join ( parts ( ) )
  except :
 if server_port != ( '443' if self . is_secure ( ) else '80' ) :
 def linenumbers ( value , autoescape = None ) :
 for app_config in apps . get_app_configs ( ) :
          return reversed ( self . keyOrder )
  def __getitem__ ( self , key ) :
 context . autoescape = self . setting
          return pformat ( value )
   @ property
   def get_fqdn ( self ) :
 from django . utils import six
                  self . stdout . write ( "No changes detected in app '%s'" % app_labels . pop ( ) )
 self . loader , self . loadname , self . dirs = loader , name , dirs
  def add_arguments ( self , parser ) :
  if isinstance ( source , Group ) :
   @ property
   signals . request_finished . connect ( close_caches )
  if isinstance ( value , datetime . date ) :
 if not self . initial_forms :
  except AppRegistryNotReady :
  import collections
  if self . flags and not isinstance ( self . regex , six . string_types ) :
   app_list_value = app_list . setdefault ( app_config , [ ] )
                          number_value = rhs [ number ]
 def do_block ( parser , token ) :
               msg = self . style . HTTP_SUCCESS ( msg )
     @ python_2_unicode_compatible
    callable = callable
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
    def __exit__ ( self , exc_type , exc_value , traceback ) :
          max_num = 1
 if inplural :
                      migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
 dig1 . update ( u )
              return debug . technical_500_response ( request , * exc_info )
 def dictsort ( value , arg ) :
  date = datetime_safe . new_datetime ( date )
              state_frame [ self ] = None
    self . widget . choices = self . choices
 if settings . USE_I18N or settings . USE_L10N :
          if key not in self :
              raise TemplateSyntaxError ( "'for' tag received an invalid argument:"  " %s" % token . contents )
  if field_value in self . empty_values :
          if initial is None :
 self . delete ( key , version = version )
  try :
 import django . core . checks . compatibility . django_1_7_0
  else :
 if schemes is not None :
   response . _handler_class = self . __class__
 version = get_complete_version ( version )
  widget = self . field . widget
 df = DateFormat ( value )
 def load ( parser , token ) :
 if USE_INOTIFY :
 for func in self . response_fixes :
 supported = True
  check_for_migrations ( app_config , connection )
                  return dict_ [ key ]
 user_regex = re . compile (  r"(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*$"  r'|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"$)' ,  re . IGNORECASE )
     class NodeList ( list ) :
 index_output . append ( "CREATE %sINDEX %s ON %s (%s);" %  ( unique , qn ( '%s_%s' % ( tablename , f . name ) ) , qn ( tablename ) ,  qn ( f . name ) ) )
 template , origin = find_template ( template_name , dirs )
 self . can_write . release ( )
 for x in argset :
      status_code = 405
 localpart = str ( Header ( localpart , encoding ) )
 self . buf_size = buf_size
 if not supports_color ( ) :
  else :
    def get_language_bidi ( ) :
 try :
                  del self . _cache [ key ]
 value = self . queryset . get ( ** { key : value } )
  return _ ( 'AM' )
          return get_git_changeset . cache
  except IndexError :
 import stat
 from django . utils . translation import ugettext_lazy , pgettext_lazy
 trans_real . _translations = { }
     def dumps ( obj , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , compress = False ) :
                  callback = pattern . _callback
                  truncate_len -= 1
          return self . __name
  return backend_cls ( location , params )
                  url = smart_urlquote ( 'http://%s' % middle )
 if ',' not in arg :
                  definition [ 'bg' ] = colors [ - 1 ]
              value = { True : '2' , False : '3' , '2' : '2' , '3' : '3' } [ value ]
 self . _post_clean ( )
              return SafeText ( data )
   to_delete = set ( )
              del self . _post
 pattern_iter = next_char ( iter ( pattern ) )
  return save_instance ( self , self . instance , self . _meta . fields ,  fail_message , commit , self . _meta . exclude ,  construct = False )
          neg , value = self . convert ( i , self . decimal_digits , self . digits , '-' )
  return ' ' . join ( extra_classes )
  def __init__ ( self , iterable = None ) :
    def to_python ( self , value ) :
 readline = property ( lambda self : self . file . readline )
  final_attrs = self . build_attrs ( attrs , name = name )
              raise ValidationError ( self . error_messages [ 'empty' ] , code = 'empty' )
              return True
 from django . utils import six
                      dirs . remove ( dirname )
                  return expanded_template
          __slots__ = 'hashvalue'
 f . write ( zlib . compress ( pickle . dumps ( value ) , - 1 ) )
      try :
 contents = contents or self . label
 for app_config in apps . get_app_configs ( ) :
  msgs = '\n' . join ( lines )
 return j
 self . nodelist_true , self . nodelist_false = nodelist_true , nodelist_false
 fname = "%s-%s.log" % ( timestamp , abs ( id ( self ) ) )
  else :
  etags = [ e . encode ( 'ascii' ) . decode ( 'unicode_escape' ) for e in etags ]
  if self . current_token is not EndToken :
    class Signer ( object ) :
              if ( db . settings_dict [ 'ATOMIC_REQUESTS' ]  and db . alias not in non_atomic_requests ) :
 if response :
   def _has_changed ( self , initial , data ) :
   class Command ( AppCommand ) :
 return filter_func
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
          return type ( self ) . __bool__ ( self )
    def get_cache_key ( request , key_prefix = None , method = 'GET' , cache = None ) :
 @ stringfilter
 self . validate_key ( key )
    if url :
 none_value = ( 0 , '---' )
 self . xml . startElement ( "field" , {  "name" : field . name ,  "type" : field . get_internal_type ( )  } )
     class FilePathField ( ChoiceField ) :
          value = force_text ( value )
   if "help" in options :
              self . DSTOFFSET = timedelta ( seconds = - _time . altzone )
   elif form . has_changed ( ) :
          alter_sql = [ ]
          return ( ord ( byte ) for byte in buf )
 self . _non_form_errors = self . error_class ( )
    def resolve_context ( self , context ) :
 klass . __str__ = lambda self : self . __unicode__ ( ) . encode ( 'utf-8' )
              base = Media ( )
   module = import_module ( module_path )
   def create_bound_method ( func , obj ) :
  if sys . platform . startswith ( 'java' ) :
              if isinstance ( field , InlineForeignKeyField ) :
                  bits . append ( int ( x ) )
  else :
  if settings . USE_TZ :
                              locale_dir = path
 self . loaded_object_count = 0
 if label_suffix is None :
   if item [ 'pubdate' ] is not None :
  model_fields = Model . _meta . get_all_field_names ( )
 self . text = text
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
 return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
 qn = connection . ops . quote_name
  escape = allow_lazy ( escape , six . text_type )
 try :
 if self . _num_pages is None :
 self . test_database = options . get ( 'test_database' , False )
 import sys
          raise ValueError ( e )
                  message = error . message
  return self . __cast ( ) == other
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
                  view = transaction . atomic ( using = db . alias ) ( view )
  from django . conf import settings
 cache [ key ] = oldroot
 if constant :
  except NameError :
 while x > 0 :
 while i < len ( subject ) and subject [ i ] != subject [ p ] :
              continue
 chunk += over_chunk
  return wrapper
 if kwds :
 from django . utils . translation import ugettext_lazy
 self . json_kwargs . pop ( 'fields' , None )
          raise SerializerDoesNotExist ( format )
 if fp is None :
   if not last_row . endswith ( row_ender ) :
  if args :
                          app_config = apps . get_app_config ( app_label )
  else :
          output = self . nodelist . render ( context )
                  return os . path . getsize ( self . file . name )
 exit_code = os . spawnve ( os . P_WAIT , sys . executable , args , new_environ )
 os . rmdir ( tmpdir )
  from django . utils import six
  lineno_comment_map [ comment_lineno_cache ] = [ ]
  else :
   raise StopIteration
 import sys
  excluded_apps . add ( app_config )
  from collections import OrderedDict
              buf = self . readline ( )
  if bases == ( BaseModelForm , ) :
              if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
                  digit = x % len ( to_digits )
 self . lineno += token_string . count ( '\n' )
          return value
              data = self . read ( chunk_size )
 from django . utils . ipv6 import clean_ipv6_address
 if self . require_all_fields :
  HTMLParseError = _html_parser . HTMLParseError
 _assertRaisesRegex = "assertRaisesRegexp"
              @ wraps ( view_func , assigned = available_attrs ( view_func ) )
 formatter = config . pop ( 'formatter' , None )
              fail_message = 'created'
  digits = len ( digittuple )
                  self . _view_middleware . append ( mw_instance . process_view )
 yield 'class %s(models.Model):' % table2model ( table_name )
 dirs . append ( '' )
          try :
    if self . verbosity >= 1 :
  else :
    class _LazyDescr ( object ) :
          raise ValidationError ( _ ( 'Enter a valid integer.' ) , code = 'invalid' )
 if endpos < 0 :
     class BaseDatabaseCache ( BaseCache ) :
 loop_dict [ 'last' ] = ( i == len_values - 1 )
  int_part = int_part_gd [ : : - 1 ]
   def is_multipart ( self ) :
 from django . utils . module_loading import module_has_submodule
       def __init__ ( self , _subtype = 'mixed' , boundary = None , _subparts = None , encoding = None , ** _params ) :
 if hasattr ( _active , "value" ) :
                  warnings . warn ( 'Cache key contains characters that will cause '  'errors if used with memcached: %r' % key ,  CacheKeyWarning )
 if not self . connection :
 value = None
 n = getattr ( lookup_view , '__name__' , None )
 return do_ntranslate ( singular , plural , number , 'ungettext' )
                  apps . get_app_config ( app_label )
              pass
 if options [ 'verbosity' ] > 0 :
  template_dir = os . path . join ( app_config . path , 'templates' )
    return script_name . decode ( UTF_8 )
  except UnicodeDecodeError :
                      if t . token_type != TOKEN_COMMENT :
   return model_list
 from django . core . management . base import BaseCommand , CommandError
   def format_output ( self , rendered_widgets ) :
  RE_DATE = re . compile ( r'(\d{4})-(\d\d?)-(\d\d?)$' )
  else :
          length = int ( arg )
   def handle ( self , ** options ) :
  raise ValueError ( "The view %s.%s didn't return an HttpResponse object. It returned None instead."  % ( callback . __module__ , view_name ) )
 from email . mime . multipart import MIMEMultipart
          reloader = jython_reloader
 super ( FilePathField , self ) . __init__ ( choices = ( ) , required = required ,  widget = widget , label = label , initial = initial , help_text = help_text ,  * args , ** kwargs )
  def __ne__ ( self , other ) :
 def app_dict ( self ) :
 supports_microseconds = False
                      return self . compress ( [ ] )
  else :
 def forms ( self ) :
 intrans = False
              if is_naive ( obj ) :
   def create_var ( self , value ) :
                          for c in lineno_comment_map [ comment_lineno_cache ] :
    def clear ( self ) :
  var_name = bits [ 5 ]
              parser . _namedCycleNodes = { }
 obj = '%s.%s' % ( app , model . _meta . object_name )
          self . _stream = stream
                  try :
     def make_middleware_decorator ( middleware_class ) :
 super ( Field , self ) . __init__ ( )
          self . STDOFFSET = timedelta ( seconds = - _time . timezone )
 def reset_cache ( ** kwargs ) :
 break
 self . content_type_extra = content_type_extra
 if retval :
  self . _init_translation_catalog ( )
   def run_checks ( self , app_configs = None , tags = None ) :
                          queryset = queryset . filter ( pk__in = primary_keys )
              return t [ 0 ]
 import threading
   yield ''
 return iter ( getattr ( d , _iterkeys ) ( ** kw ) )
          return ''
              migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
              for root , dirs , files in sorted ( os . walk ( self . path ) ) :
 for i , piece in enumerate ( re_formatchars . split ( force_text ( formatstr ) ) ) :
 return self . __deepcopy__ ( { } )
  else :
                      raise EnvironmentError (  "Cache directory '%s' does not exist "  "and could not be created'" % self . _dir )
              field = f . name
                      os . unlink ( work_file )
                          raise CommandError ( "Unknown application: %s" % app_label )
  def to_python ( self , value ) :
 quant . append ( ch )
  else :
     class Debug ( CheckMessage ) :
   return self . check ( app_configs = app_configs , display_num_errors = display_num_errors )
 import warnings
 from django . core . servers . basehttp import run , get_internal_wsgi_application
 num = cursor . fetchone ( ) [ 0 ]
      input_type = 'password'
               break
          super ( CheckboxChoiceInput , self ) . __init__ ( * args , ** kwargs )
  from django . conf import settings
              words [ i ] = escape ( word )
          return language . lower ( )
 if isinstance ( offset , timedelta ) :
  self . _stream = BytesIO ( self . _body )
                  error_messages = opts . error_messages [ NON_FIELD_ERRORS ]
          output . extend ( connection . creation . sql_indexes_for_model ( model , style ) )
  bits = token . contents . split ( )
 if plan :
    class CheckboxFieldRenderer ( ChoiceFieldRenderer ) :
          return '<ExtendsNode: extends %s>' % self . parent_name . token
   is_reversed = bits [ - 1 ] == 'reversed'
  update_wrapper ( _wrapper , func )
  name = _resolve_name ( name [ level : ] , package , level )
                  if isinstance ( value , str ) :
                      self . xml . startElement ( "natural" , { } )
   if parse_until :
                  raise
    if hasattr ( request , 'session' ) :
  import copy
 self . validate_key ( key )
    def run_validators ( self , value ) :
 return value or arg
   def decode ( self , s ) :
  url_schemes = [ 'http' , 'https' , 'ftp' ]
          return None
              self . inner_run ( None , ** options )
  warn_msg = ( "The translator-targeted comment '%s' "  "(%sline %d) was ignored, because it wasn't the last item "  "on the line." ) % ( c , filemsg , comment_lineno_cache )
 if name is None :
 _empty_value = [ ]
   if getattr ( func , 'expects_localtime' , False ) :
  return _long_to_bin ( result , hex_format_string )
  def process_default ( self , event ) :
      from _systemrestart import SystemRestart
  if not ( value is True or value is False or value is None or value == '' ) :
 all_unique_checks = all_unique_checks . union ( set ( unique_checks ) )
 def changed_data ( self ) :
                      resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
 return val
  except VariableDoesNotExist :
  return lazy ( func , * resultclasses ) ( * args , ** kwargs )
                raise RuntimeError (  "The method to extend accepted command-line arguments by the "  "test management command has changed in Django 1.8. Please "  "create an add_arguments class method to achieve this." )
              return format ( value , arg )
    @ register . tag
 def __init__ ( self , func , name = None ) :
                      curs . execute ( statement )
 if app_label not in executor . loader . migrated_apps :
     class IfChangedNode ( Node ) :
 with self . _lock . writer ( ) :
   @ classmethod
                  self . add_error ( name , e )
                  raise
    @ lru_cache . lru_cache ( maxsize = None )
 kw = [ d . year , d . month , d . day ]
 if _time . daylight :
 inline_re = re . compile ( r"""^\s*trans\s+((?:"[^"]*?")|(?:'[^']*?'))(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?\s*""" )
       def __init__ ( self , text , subtype , charset ) :
  self . _callback_strs . add ( lookup_str )
   def _get_to_python ( self , field ) :
 try :
              return self . forms [ 0 ] . is_multipart ( )
          super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
 context [ self . target_var ] = func ( * resolved_args , ** resolved_kwargs )
              curr = cwords [ cword - 1 ]
              ip_address = literal_match . group ( 1 )
              return ""
              logging . _releaseLock ( )
   if commit and hasattr ( form , 'save_m2m' ) :
  else :
  except ValueError :
                  raise
   @ deconstructible
 assert mimetype is None
                   def render ( self , context ) :
               yield parse_boundary_stream ( sub_stream , 1024 )
    def mark_for_escaping ( s ) :
  return val
                          filters [ name ] = self . configure_filter ( filters [ name ] )
 raise NotImplementedError ( 'subclasses of FileUploadHandler must provide a file_complete() method' )
      if self . verbosity > 0 :
  else :
              self . __offset = timedelta ( minutes = offset )
 if ch == '(' :
  PALETTES = {  NOCOLOR_PALETTE : {  'ERROR' : { } ,  'WARNING' : { } ,  'NOTICE' : { } ,  'SQL_FIELD' : { } ,  'SQL_COLTYPE' : { } ,  'SQL_KEYWORD' : { } ,  'SQL_TABLE' : { } ,  'HTTP_INFO' : { } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { } ,  'HTTP_NOT_MODIFIED' : { } ,  'HTTP_BAD_REQUEST' : { } ,  'HTTP_NOT_FOUND' : { } ,  'HTTP_SERVER_ERROR' : { } ,  'MIGRATE_HEADING' : { } ,  'MIGRATE_LABEL' : { } ,  'MIGRATE_SUCCESS' : { } ,  'MIGRATE_FAILURE' : { } ,  } ,  DARK_PALETTE : {  'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } ,  'NOTICE' : { 'fg' : 'red' } ,  'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'SQL_COLTYPE' : { 'fg' : 'green' } ,  'SQL_KEYWORD' : { 'fg' : 'yellow' } ,  'SQL_TABLE' : { 'opts' : ( 'bold' , ) } ,  'HTTP_INFO' : { 'opts' : ( 'bold' , ) } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { 'fg' : 'green' } ,  'HTTP_NOT_MODIFIED' : { 'fg' : 'cyan' } ,  'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_FOUND' : { 'fg' : 'yellow' } ,  'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } ,  'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  } ,  LIGHT_PALETTE : {  'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } ,  'NOTICE' : { 'fg' : 'red' } ,  'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'SQL_COLTYPE' : { 'fg' : 'green' } ,  'SQL_KEYWORD' : { 'fg' : 'blue' } ,  'SQL_TABLE' : { 'opts' : ( 'bold' , ) } ,  'HTTP_INFO' : { 'opts' : ( 'bold' , ) } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_MODIFIED' : { 'fg' : 'green' } ,  'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_FOUND' : { 'fg' : 'red' } ,  'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } ,  'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  }  }
     if m :
  del attr
               for middleware_method in self . _response_middleware :
              continue
    if len ( app_labels ) == 0 :
   for middleware_method in self . _view_middleware :
          if fget is not None :
  return attrs
  if self . required :
 bits = token . split_contents ( )
   def add_error ( self , field , error ) :
  if not is_valid_ipv6_address ( ip_str ) :
 class ErrorDict ( dict ) :
 from django . core . management . sql import sql_flush , emit_post_migrate_signal
 @ stringfilter
     @ property
   def create_variable_node ( self , contents ) :
   def _setup ( self ) :
              content_length = 0
              return LANG_INFO [ generic_lang_code ]
     def split_domain_port ( host ) :
     _super = super
 first = second = None
 from decimal import Decimal
              self . _current [ field . name ] = value
 super ( GenericIPAddressField , self ) . __init__ ( * args , ** kwargs )
  values = { 'true' : True , 'false' : False }
              choice_value , choice_label = choice
 from lib2to3 . pytree import Leaf , Node
 outer . update ( password . translate ( hmac . trans_5C ) )
              p = i
              yield ( "" , self . field . empty_label )
     return URLNode ( viewname , args , kwargs , asvar )
   class ArchiveException ( Exception ) :
 from django . utils . html import escape
              return Media ( ** { str ( name ) : getattr ( self , '_' + name ) } )
                      callback = callback . func
   def utcoffset ( self , dt ) :
      self . _queryset = qs
  return t
              if msg :
 add_move ( MovedModule ( "_thread" , "thread" ) )
                  raise ValueError ( 'Unable to add handler %r: %s' % ( h , e ) )
              name = self . html_initial_name
 return '\n' . join ( statements )
 for obj in PythonDeserializer ( objects , ** options ) :
    def now ( ) :
    if text . endswith ( truncate ) :
   def unlock ( f ) :
 self . remaining -= len ( result )
          return int ( str ( value ) [ - arg ] )
          paras = [ '<p>%s</p>' % p . replace ( '\n' , '<br />' ) for p in paras ]
  except ImportError :
 field_name = disposition [ 'name' ] . strip ( )
          if self . negated :
 global _standard_context_processors
              obj = self . var
      class VerbatimNode ( Node ) :
              yield 'month'
   if self . verbosity > 1 :
  else :
 result = self . configurator . convert ( value )
 self . use_ipv6 = True
  def __new__ ( cls , * args , ** kwargs ) :
              self . error_class = 'errorlist {}' . format ( error_class )
 import sys
 trimmed = False
                  self . stdout . write ( 'processing file %s in %s\n' % ( f , dirpath ) )
   def render ( self , context ) :
  else :
                   call_command ( 'loaddata' , 'initial_data' , ** options )
          if ( hasattr ( value , '__iter__' ) and  not isinstance ( value , six . text_type ) and  not hasattr ( value , '_meta' ) ) :
              initial = bool ( initial )
  elif self . fixture_object_count == self . loaded_object_count :
              if hasattr ( self , '_body' ) :
 def __init__ ( self , widgets , attrs = None ) :
          raise ValidationError ( _ ( 'Enter a valid IPv6 address.' ) , code = 'invalid' )
                          continue
      decimal_digits = '0123456789'
                  if errors :
 __hash__ = new_method_proxy ( hash )
    def get_current_timezone_name ( ) :
    return self . _post , self . _files
          super ( StreamingHttpResponse , self ) . __init__ ( * args , ** kwargs )
              pass
              return self . blocks [ name ] [ - 1 ]
    def add_to_builtins ( module ) :
            class Trans ( object ) :
          USE_INOTIFY = True
          return any ( w . needs_multipart_form for w in self . widgets )
  raise CommandError ( msg )
 integer_types = ( int , long )
                          continue
  else :
 if tags and any ( not checks . tag_exists ( tag ) for tag in tags ) :
              args . append ( self . choices )
 if decimals > digits :
     if not url_info . netloc and url_info . scheme :
      Morsel = http_cookies . Morsel
 models = set ( )
              del _urlconfs . value
   def F ( self ) :
      def __init__ ( self , lexer ) :
  except ( ImportError , AttributeError ) :
              self . active_readers -= 1
 class MinLengthValidator ( BaseValidator ) :
                  if resolved_path :
                   content = content . message ( )
              for cache_alias in settings . CACHES :
                  if middle . endswith ( punctuation ) :
  def u ( s ) :
                  self . stdout . write ( "Installed %d object(s) from %d fixture(s)" %  ( self . loaded_object_count , self . fixture_count ) )
 if id_ :
                   return self . filter_function ( name , ** flags )
 return self . __copy__ ( )
              for f in chain . from_iterable ( l [ 1 ] for l in self . _files . lists ( ) ) :
              self . saved_forms = [ ]
          parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
 while i < len ( subject ) and subject [ i ] not in ( ' ' , '\t' ) :
 for app_name in app_names :
    class SimpleTemplateResponse ( HttpResponse ) :
 root = [ ]
 num_entries = len ( filelist )
  import copy
   def close ( self ) :
 parser = parser_class ( lexer . tokenize ( ) )
      help = 'Compiles .po files to .mo files for use with builtin gettext support.'
 options = self . render_options ( choices , value )
 if len ( bits ) != 2 :
 from django . core import signals
 for chunk in self . chunks ( ) :
    def __str__ ( self ) :
          _serializers [ format ] = module
                      match = condition . eval ( context )
          return ZERO
  return force_bytes ( s , encoding , strings_only , errors )
   def _new_gnu_trans ( self , localedir , use_null_fallback = True ) :
 statements = sql_create ( app_config , self . style , connection )
 is_relation = i in relations
              return timedelta ( seconds = - time . altzone )
      renamed_methods = (  ( '_get_memcache_timeout' , 'get_backend_timeout' , RemovedInDjango19Warning ) ,  )
                  e . django_template_source = self . source
 from django . core import signals
              code_list . append ( foreground [ v ] )
 from django . dispatch import receiver
    __class__ = property ( new_method_proxy ( operator . attrgetter ( "__class__" ) ) )
 return self . forms [ : self . initial_form_count ( ) ]
                  error_dict . setdefault ( field , [ ] ) . extend ( error_list )
  output . append ( '</select>' )
                          if not found and ( not line or plural_forms_re . search ( line ) ) :
                          if self . match is None or self . match_re . search ( f ) :
  else :
   def __repr__ ( self ) :
   def filter ( self , name = None , filter_func = None , ** flags ) :
            stream . unget ( chunk )
 self . write_items ( handler )
          return ''
      if sys . version_info [ : 2 ] >= ( 3 , 4 ) :
 if last == 1 :
              encoding = self . encoding or settings . DEFAULT_CHARSET
from __future__ import unicode_literals
  return proxy
      help = "Creates the tables needed to use the SQL cache backend."
    def npgettext ( context , singular , plural , number ) :
              super ( SortedDict , self ) . __init__ ( )
          key = self . make_key ( key , version = version )
                  self . set_payload ( text , utf8_charset )
 parser = self . _parser
          self . nodelist_true , self . nodelist_false = nodelist_true , nodelist_false
          self . filepath = filepath
  except KeyError :
  for app_config in app_configs :
 self . context = context
   def values ( self ) :
 if options . get ( 'use_default_ignore_patterns' ) :
 if not data :
          super ( Deserializer , self ) . __init__ ( stream_or_string , ** options )
 block_re = re . compile ( r"""^\s*blocktrans(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?(?:\s+|$)""" )
  except ValidationError :
                           context . pop ( )
 errors . extend ( _check_middleware_classes ( ** kwargs ) )
              if not self . valid_value ( val ) :
          return node . render ( context )
          result = copy . copy ( self )
  except StandardError as e :
  new_class = super ( ModelFormMetaclass , mcs ) . __new__ ( mcs , name , bases , attrs )
              return
  for attr in self . rendering_attrs :
  except KeyError :
 if not self . first :
 if self . timezone and self . timezone . dst ( self . data ) :
 self . invoked_for_django = True
  return value
 self . name = name
 kwargs [ 'error_messages' ] = error_messages
 url , trimmed = escape ( url ) , escape ( trimmed )
              break
      def __init__ ( self ) :
 missing_args_message = "Enter at least one application label."
 if isinstance ( file_name , Template ) :
                      try :
 def is_hidden ( self ) :
      pass
 _locks = { }
              if not self . fail_silently :
 try :
                      os . makedirs ( directory )
                  guts = re . sub ( r"\\.|." , escape_quotes , tok [ 1 : - 1 ] )
              return list_ , False
  if 'media' not in attrs :
              self . status_code = status
  warnings . warn ( "django.utils.dictconfig will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
  except UnicodeEncodeError :
                 if instance . pk is None :
              request = self . request_class ( environ )
   def __getitem__ ( self , index ) :
 from django . utils . html import conditional_escape , format_html
      class BlockNode ( Node ) :
  models . signals . pre_syncdb . send (  sender = app_config . models_module ,  app = app_config . models_module ,  create_models = create_models ,  verbosity = verbosity ,  interactive = interactive ,  db = db )
              check . tags = tags
 return mark_safe ( value )
 parts = 2 if version [ 2 ] == 0 else 3
              self . delete ( key , version = version )
    def time_format ( value , format_string ) :
                  if timezone . is_aware ( expires ) :
              return [ first_item ] , True
          is_dst = False if dt is None else self . _isdst ( dt )
 with self . _lock . writer ( ) :
                  return func ( context , self . first , self . second )
          return len ( value ) == int ( arg )
    else :
    class RequestContext ( Context ) :
          if key not in self :
              orig = getattr ( self . parent_instance , self . to_field )
      return latest_date or datetime . datetime . now ( )
                       urlconf = request . urlconf
 def __init__ ( self , dt ) :
              raise CommandError ( "Database inspection isn't supported for the currently selected database backend." )
                  new_msg = (  "Database %s couldn't be flushed. Possible reasons:\n"  "  * The database isn't running or isn't configured correctly.\n"  "  * At least one of the expected database tables doesn't exist.\n"  "  * The SQL was invalid.\n"  "Hint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n"  "The full error: %s" ) % ( connection . settings_dict [ 'NAME' ] , e )
    class DateTimeInput ( DateTimeBaseInput ) :
                      dirnames . remove ( dirname )
 key = key [ len ( self . prefix ) : ]
 yield "from __future__ import unicode_literals"
      def __new__ ( mcs , name , bases , attrs ) :
    return default
              os . unlink ( work_file )
              try :
       app_models = app_config . get_models ( include_auto_created = True )
 if not isinstance ( stream_or_string , ( bytes , six . string_types ) ) :
 if rel_to in known_models :
 comment_lineno_cache = None
          if hasattr ( response , 'render' ) and callable ( response . render ) :
                      if plan_node not in shown and plan_node [ 0 ] == app_name :
          raise NotImplementedError ( 'Subclasses must define this method.' )
    if field_type == 'CharField' and row [ 3 ] :
 model = None
 if os . path . exists ( pot_path ) :
 def add ( value , arg ) :
    def urlsafe_base64_encode ( s ) :
  import socket
                              pass
  if self . use_argparse :
                      deps = [ apps . get_model ( dep ) for dep in deps ]
  if node . getElementsByTagName ( 'None' ) :
   def y ( self ) :
 reason_phrase = None
 from django . utils . encoding import force_str , force_text , DEFAULT_LOCALE_ENCODING
 nan = ( 1e200 * 1e200 ) // ( 1e200 * 1e200 )
                  other = other . __cast ( )
                     self . connection . close ( )
 if slots is not None :
    class Serializer ( object ) :
  elif ch == "^" :
     class DateTimeBaseInput ( TextInput ) :
  except ( LookupError , TypeError ) :
                  for middleware_method in self . _template_response_middleware :
                  form = self . forms [ i ]
 try :
                  url = smart_urlquote ( middle )
 self . remaining = limit
 return etags
              name = self . html_name
              self . extra_context [ name ] = var
              if new is None :
   def flush ( self ) :
          return any ( "__call__" in klass . __dict__ for klass in type ( obj ) . __mro__ )
                  if buffer_ :
      def __init__ ( self , val_expr , max_expr , max_width , asvar = None ) :
  elif len ( app_labels ) > 1 :
            self . token_type , self . contents = token_type , contents
    unused_char = self . _stream . read ( 1 )
   def usage ( self , subcommand ) :
 ch , escaped = next ( pattern_iter )
 code = 'invalid'
 opts = instance . _meta
                      raise TemplateSyntaxError (  "'%s' tag takes at least 2 arguments and the "  "second last argument must be 'as'" % function_name )
                  skipped . append ( ( model , deps ) )
          value = escape ( value )
  res = instance . __dict__ [ self . name ] = self . func ( instance )
          self . file = file_name
          return 'ValidationError(%s)' % self
    def __delattr__ ( self , name ) :
 def errors ( self ) :
  else :
  else :
              self . connection = None
     def __deepcopy__ ( self , memo ) :
 if related :
 from django . test . signals import setting_changed
  MEDIA_TYPES = ( 'css' , 'js' )
  try :
   def __getstate__ ( self ) :
   from django . conf import settings
          fn = code_changed
     class TemplateIfParser ( IfParser ) :
                  self . stdout . write ( "UnicodeDecodeError: skipped file %s in %s" % ( f . file , f . dirpath ) )
 def __init__ ( self , data , func , prefix ) :
  self . callback = None
  return modules
  except ValidationError as e :
                  return getattr ( instance , name ) ( value )
  handler . addQuickElement ( "id" , unique_id )
   def handle ( self , * app_labels , ** options ) :
 return importlib_find ( full_module_name , package_path ) is not None
   return False
              self . addr = ''
          self . template_string = template_string
 if self . max_length is not None :
 from django . db import connections , router , transaction , DEFAULT_DB_ALIAS
 import random
from __future__ import unicode_literals
    try :
    class Paginator ( object ) :
 self . _encoding = val
    def __setitem__ ( self , key , value ) :
          def dec ( func ) :
    if isinstance ( self . regex , six . string_types ) :
 if git_changeset :
          pass
  if pk_is_not_editable ( pk ) or pk . name not in form . fields :
 return self . cleaned_data
 self . _done = True
  if field in self . errors :
                      pass
 def check_model_signals ( app_configs = None , ** kwargs ) :
              processors = ( )
   def handle_field ( self , obj , field ) :
           if not self . _cached_loaders :
          s = s [ 1 : ]
          return self . _choices
 self . html_name = form . add_prefix ( name )
    result = [ ]
 self . email_backend = email_backend
 _assertRaisesRegex = "assertRaisesRegex"
              potfiles = self . build_potfiles ( )
   html4_singlets = (  'br' , 'col' , 'link' , 'base' , 'img' ,  'param' , 'area' , 'hr' , 'input'  )
           instance . save ( )
      status_code = 410
          class NumberAwareString ( resultclass ) :
  if s_len > length :
 text_type = unicode
   class MultiPartParserError ( Exception ) :
    @ wraps ( func )
 import pickle
          return self . __offset ,
 return dirs
 if self . field . label is None :
    location = urljoin ( current_uri , location )
                model = self . obj
  return getattr ( _default , translation_function ) ( singular , plural , number )
 parser . add_argument ( '--ipv6' , '-6' , action = 'store_true' , dest = 'use_ipv6' , default = False ,  help = 'Tells Django to use an IPv6 address.' )
                          formatters [ name ] = self . configure_formatter (  formatters [ name ] )
                      message = e
          handler . addQuickElement ( "title" , item [ 'title' ] )
 try :
   try :
              self . stdout . write ( statement )
 def __init__ ( self , * args , ** kwargs ) :
 import sys
              raise SuspiciousFileOperation ( "Attempted access to '%s' denied." % name )
  elif var_arg :
              the_path , info = urlretrieve ( url , path . join ( tempdir , filename ) )
              return ""
  import time
  if all_issues :
 data = method ( self , * args , ** kwargs )
      replaces = [ ]
          try :
 self . pos += 1
 missing_args_message = ( "No database fixture specified. Please provide the "  "path of at least one fixture in the command line." )
 def slice_filter ( value , arg ) :
   class SerializerDoesNotExist ( KeyError ) :
 if i >= len ( subject ) :
 bits = token . split_contents ( ) [ 1 : ]
   def _iteritems ( self ) :
  def __deepcopy__ ( self , memo ) :
 if message :
 for form in self . initial_forms :
  bits = arg . split ( ',' )
              return True
      return not ( v is False or v is None or v == '' )
                      data = data . replace ( microsecond = 0 )
 if autoescape :
 continue
 LIGHT_PALETTE = 'light'
  name , value = match . groups ( )
 itervalues = _itervalues
  return str ( '<%s %s (%s:%s) %s>' ) % (  self . __class__ . __name__ , urlconf_repr , self . app_name ,  self . namespace , self . regex . pattern )
 m = dict ( zip ( new_keys , keys ) )
  else :
              raise ValueError (  "EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set "  "one of those settings to True." )
  except TemplateSyntaxError as e :
   def __iter__ ( self ) :
      import msvcrt
                  if not isinstance ( e , CommandError ) :
   if not isinstance ( self . file_path , six . string_types ) :
 if options :
 self . indent ( 2 )
 _super ( SimpleLazyObject , self ) . __init__ ( )
          if app_config . models_module is None :
    def __deepcopy__ ( self , memo ) :
  return self . _body
  except KeyError :
              raise ValueError ( "Key '%s' not found" % key )
  return mark_safe ( value . replace ( '\n' , '<br />' ) )
 lead = lead + opening
 from django . db . utils import DatabaseError
 if isinstance ( data , bytes ) :
  requires_system_checks = False
  if tok . next :
 cmatch = constant_re . match ( parts [ 0 ] )
  return response
    def cookie_date ( epoch_seconds = None ) :
      def getInnerText ( node ) :
   class Page ( collections . Sequence ) :
 cache [ mem_args ] = result
 sql_files = [ ]
from __future__ import unicode_literals
  return default
 DARK_PALETTE = 'dark'
  elif isinstance ( value , datetime . time ) :
                          translators_comment_start = lineno
              ext = mimetypes . guess_extension ( content_type )
                      raise CommandError ( "%s already exists, overlaying a "  "project or app into an existing "  "directory won't replace conflicting "  "files" % new_path )
                  field_value = value [ i ]
 self . _populated = False
              self . _max_entries = int ( max_entries )
 key = self . cache_key ( name , dirs )
              class dummy :
 from django . db import connection
    return result
              getattr ( combined , 'add_' + name ) ( getattr ( self , '_' + name , None ) )
   def subwidgets ( self , name , value , attrs = None , choices = ( ) ) :
 return self . set_cookie ( key , value , ** kwargs )
 from django . contrib . auth import get_user_model
  else :
  if i >= self . initial_form_count ( ) and self . initial_extra :
          _dec . __name__ = 'method_decorator(%s)' % decorator . __class__ . __name__
          return
  def add_arguments ( self , parser ) :
                merge_migrations = [ ]
                   if os . name == 'nt' :
   def add_fields ( self , form , index ) :
   for lineno , line in enumerate ( content . splitlines ( True ) ) :
 filename , display_url = cleanup_url ( url )
                  attrs [ 'pk' ] = smart_text ( obj_pk )
      if palette == PALETTES [ NOCOLOR_PALETTE ] :
 if secret is None :
          parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
  if isinstance ( value , datetime . datetime ) :
                         ns = app_list [ 0 ]
   writer = MigrationWriter ( new_migration )
  def __init__ ( self , children = None , connector = None , negated = False ) :
 return f . fileno ( ) if hasattr ( f , 'fileno' ) else f
 self . model_name = 'cacheentry'
          self . argv = argv or sys . argv [ : ]
  except ImportError as exc :
    widget . is_required = self . required
    value = value . astimezone ( timezone )
     class FileField ( Field ) :
 shell . mainloop ( )
          return set ( chain ( * [ check . tags for check in self . registered_checks if hasattr ( check , 'tags' ) ] ) )
              field = field . rel . get_related_field ( )
  msg_count = 0
 call_command (  'runserver' ,  addrport = options [ 'addrport' ] ,  shutdown_message = shutdown_message ,  use_reloader = False ,  use_ipv6 = options [ 'use_ipv6' ] ,  use_threading = use_threading  )
              raise CommandError ( "Type '%s help %s' for usage information." % (  os . path . basename ( sys . argv [ 0 ] ) , sys . argv [ 1 ] ) )
 doublecolon_start = - 1
              tzinfo = utc
 def wrapper ( * args ) :
 from django . utils import six
 handler . startDocument ( )
  for base in inspect . getmro ( new_class ) :
 cursor . execute ( "DELETE FROM %s "  "WHERE cache_key < %%s" % table ,  [ cursor . fetchone ( ) [ 0 ] ] )
   def d ( self ) :
 self . interactive = options . get ( 'interactive' )
 substitutions [ 'clear' ] = CheckboxInput ( ) . render ( checkbox_name , False , attrs = { 'id' : checkbox_id } )
 return '{%s}' % ', ' . join ( '%r: %r' % ( k , v ) for k , v in six . iteritems ( self ) )
                              if transfer_encoding == 'base64' :
                          len_item = 1
          _load_serializers ( )
 if not tag or current_len >= truncate_len :
      def advance_iterator ( it ) :
 return CommentNode ( )
 pass
 return '%02d' % self . data . second
              newline = unicode ( "\n" )
              raise BadHeaderError ( "Header values can't contain newlines (got %r)" % value )
                    step = str ( Decimal ( '1' ) / 10 ** self . decimal_places ) . lower ( )
          seen = set ( )
 return mark_safe ( linebreaks ( value , autoescape ) )
   formatters = config . get ( 'formatters' , EMPTY_DICT )
 if id_ :
                  regex = force_text ( self . _regex )
 raise v
  check_for_migrations ( app_config , connection )
   try :
 from IPython . frontend . terminal . ipapp import TerminalIPythonApp
          self . format_string = format_string
   if self . to_field :
 import mimetypes
              return str ( o )
              if field . _has_changed ( field . to_python ( initial ) , data ) :
    class DictWrapper ( dict ) :
   def __eq__ ( self , other ) :
                  for receiver , _ , _ in receivers :
           base64d = base64d [ 1 : ]
 default_error_messages = {  'invalid' : _ ( 'Enter a whole number.' ) ,  }
      def validate_integer ( value ) :
      return hmac . new ( key , msg = force_bytes ( value ) , digestmod = hashlib . sha1 )
  else :
 if tag not in TemplateTagNode . mapping :
  try :
  try :
 from django . utils . encoding import force_str , force_text
  else :
              import code
    def new_datetime ( d ) :
   def encode ( self , i ) :
              sys . stdout . write ( django . get_version ( ) + '\n' )
  register = Library ( )
   elif cls . _delegate_bytes :
                  return value . serializable_value ( self . to_field_name )
 value = normalize_newlines ( value )
  if self . localize :
          self . object_list = object_list
  try :
 if autoescape and not safe_input :
  return value
              if can_fail :
          if self . id_for_label :
 from django . utils . functional import total_ordering
    @ register . tag ( 'for' )
  tables . append ( connection . introspection . table_name_converter ( model . _meta . db_table ) )
              logger . warning ( 'Bad Request (UnicodeDecodeError)' ,  exc_info = sys . exc_info ( ) ,  extra = {  'status_code' : 400 ,  }  )
 criticals = [ e for e in all_issues if checks . CRITICAL <= e . level ]
          is_accept_language_redundant = settings . USE_I18N or settings . USE_L10N
   used_name = the_path . split ( '/' ) [ - 1 ]
    def load_template_source ( self , template_name , template_dirs = None ) :
 obj = Node ( children , connector , negated )
  def __init__ ( self , attrs = None ) :
    def add_never_cache_headers ( response ) :
     class ModelChoiceField ( ChoiceField ) :
    def assertCountEqual ( self , * args , ** kwargs ) :
  else :
 app_models = router . get_migratable_models ( app_config , connection . alias , include_auto_created = True )
           self . blocks = defaultdict ( list )
                          if message_context :
 self . validate_key ( key )
 file_name = self . IE_sanitize ( unescape_entities ( file_name ) )
   def list ( self , * args , ** kwargs ) :
           if hasattr ( value , '__iter__' ) and not isinstance ( value , ( bytes , six . string_types ) ) :
              return [ ]
  elif indexes [ column_name ] [ 'unique' ] :
 return tpl . format ( self . sysid , self . pubid )
                  if isinstance ( rhs , dict ) and number :
   class BadSignature ( Exception ) :
 import re
   finally :
              self . stdout . write ( msg )
   def list ( self , * args , ** kwargs ) :
  else :
   def as_hidden ( self , attrs = None , ** kwargs ) :
   return self . _num_pages
  def __init__ ( self , redirect_to , * args , ** kwargs ) :
                  project_name = settings . SETTINGS_MODULE . split ( '.' ) [ 0 ]
                      msg = "Execution of %s failed" % self . program
 self . data = data or { }
  except OSError as e :
 return mark_safe ( _urlize ( value , trim_url_limit = int ( limit ) , nofollow = True ,  autoescape = autoescape ) )
              response . streaming_content = [ ]
              if six . PY3 :
                  raise CommandError ( "You must supply at least one app label when using --empty." )
 msg = SafeMIMEMultipart ( _subtype = self . alternative_subtype , encoding = encoding )
  elif self . required :
 pass
  if not response . has_header ( 'Expires' ) :
  piece = '' . join ( source [ last : pos ] )
 for key in sorted ( user_settings ) :
  for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :
  else :
 try :
  if fk . unique :
          return self
   class ExtendsError ( Exception ) :
 errors = [ e for e in all_issues if checks . ERROR <= e . level < checks . CRITICAL ]
          return key in self . dicts [ - 1 ]
 return force_text ( iri_to_uri ( value ) )
              categories = [ ( c ) for c in categories ]
 urlresolvers . set_urlconf ( urlconf )
              raise TemplateSyntaxError ( "Could not parse the remainder: '%s' "  "from '%s'" % ( token [ upto : ] , token ) )
    if new_name . startswith ( '_' ) :
 if value is None :
 super ( BaseModelForm , self ) . __init__ ( data , files , auto_id , prefix , object_data ,  error_class , label_suffix , empty_permitted )
 return nodelist_true_output or self . nodelist_true . render ( context )
 args , kwargs = parse_bits ( parser , bits , params , varargs , varkw ,  defaults , takes_context , name )
      random = random . SystemRandom ( )
   elif name is not None and filter_func is None :
  program = 'msgfmt'
  table_name_filter = options . get ( 'table_name_filter' )
              value = ConvertingList ( value )
     class OutputWrapper ( object ) :
                    input_attrs [ 'id' ] = '%s_%s' % ( id_ , i )
              m = regex . search ( text , pos )
 from django . core . mail . backends . base import BaseEmailBackend
 for renamed_method in cls . renamed_methods :
           self . _iterator = iter ( value )
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
  handlers = config . get ( 'handlers' , None )
 migration . merged_operations = [ ]
   if typed :
              localpart , domain = addr . split ( '@' , 1 )
  isolated_context = options . get ( 'only' , False )
  level += 1
   class classonlymethod ( classmethod ) :
              return
 if new_attr is None :
                  self . stdout . write ( "  Optimized from %s operations to %s operations." % ( len ( operations ) , len ( new_operations ) ) )
   def token_kwargs ( bits , parser , support_legacy = False ) :
                return
                  return not self . _is_expired ( f )
   loopvars = re . split ( r' *, *' , ' ' . join ( bits [ 1 : in_index ] ) )
                  self . stderr . write ( "App '%s' could not be found. Is it in INSTALLED_APPS?" % app_label )
 if not indent :
  register = Library ( )
  self . cleaned_data = { }
              return None
                   try :
   UserModel = get_user_model ( )
          stat = os . stat ( filename )
                  space = line [ : max_width + 1 ] . rfind ( ' ' ) + 1
                  self . add_filters ( logger , filters )
   def close_caches ( ** kwargs ) :
  headerlist . sort ( )
  elif args [ 1 ] [ 0 ] == '3' :
 os . makedirs ( original_path )
          offset = offset . seconds // 60
  elif self . use_ipv6 and not _fqdn :
              logger . warning ( 'Not Found: %s' , request . path ,  extra = {  'status_code' : 404 ,  'request' : request  } )
    class TemplateEncodingError ( Exception ) :
          pathext = os . environ . get ( 'PATHEXT' , '.COM;.EXE;.BAT;.CMD' ) . split ( os . pathsep )
                       if transfer_encoding == 'base64' :
              return match . group ( 0 )
 self . _lock = threading . RLock ( )
   self . file . seek ( 0 )
    def to_locale ( language ) :
               exhaust ( self . _input_data )
 content = templatize ( src_data , orig_file [ 2 : ] )
 check_for_language . cache_clear ( )
                  attrs [ 'min' ] = self . min_value
 def time ( value , arg = None ) :
  import functools
    else :
                      stream . close ( )
              item , old_style_list = convert_old_style_list ( sublist )
  stats [ MISSES ] += 1
   try :
                  if fake :
      setattr ( Module_six_moves_urllib_response , attr . name , attr )
 from django . utils . safestring import mark_safe , SafeData , mark_for_escaping
    return quote ( force_bytes ( path ) . replace ( b"\\" , b"/" ) , safe = b"/~!*()'" )
     @ python_2_unicode_compatible
  except Exception as e :
              statements . append ( " " . join ( statement ) )
   __all__ = (  'Field' , 'CharField' , 'IntegerField' ,  'DateField' , 'TimeField' , 'DateTimeField' ,  'RegexField' , 'EmailField' , 'FileField' , 'ImageField' , 'URLField' ,  'BooleanField' , 'NullBooleanField' , 'ChoiceField' , 'MultipleChoiceField' ,  'ComboField' , 'MultiValueField' , 'FloatField' , 'DecimalField' ,  'SplitDateTimeField' , 'IPAddressField' , 'GenericIPAddressField' , 'FilePathField' ,  'SlugField' , 'TypedChoiceField' , 'TypedMultipleChoiceField'  )
   def update ( self , * args , ** kwargs ) :
              return from_current_timezone ( value )
  if hasattr ( os , 'chmod' ) :
   def __repr__ ( self ) :
 new_migration = subclass ( "%04i_merge" % ( biggest_number + 1 ) , app_label )
              if mime_encode :
 plist = _parse_header_params ( b';' + line )
  elif name == 'string' :
 end_index = None
              raise self . error ( token , "Invalid block tag: '%s', expected %s" %  ( command , get_text_list ( [ "'%s'" % p for p in parse_until ] ) ) )
          """         Set a value in the cache if the key does not already exist. If         timeout is given, that timeout will be used for the key; otherwise         the default cache timeout will be used.         Returns True if the value was stored, False otherwise.         """
 if min_length is not None :
 outer_html = '<ul{id_attr}>{content}</ul>'
              return
   if 'noreset' not in opts :
  else :
    if var . endswith ( '.' ) :
 raise NotImplementedError ( 'subclasses of Serializer must provide an handle_m2m_field() method' )
  self . attach ( filename , content , mimetype )
  TestRunner = get_runner ( settings , options . get ( 'testrunner' ) )
      raise ImproperlyConfigured ( "You must define a '%s' cache" % DEFAULT_CACHE_ALIAS )
          resolved_args = [ var . resolve ( context ) for var in self . args ]
 if autoescape :
     def load_template_source ( self , template_name , template_dirs = None ) :
 return self . file
 converter = connection . introspection . table_name_converter
   return result
                          raise ValueError ( 'Unable to configure '  'formatter %r: %s' % ( name , e ) )
          tpl = "ExternalReferenceForbidden(system_id='{}', public_id={})"
                              nodelist . append ( node . render ( context ) )
 if not answer :
              return None
                      self . handle_data ( rawdata [ i : j ] )
 from django . test . utils import get_runner
                  pass
  from collections import OrderedDict
          p = Popen ( args , shell = False , stdout = PIPE , stderr = PIPE ,  close_fds = os . name != 'nt' , universal_newlines = True )
              if '.' in exclude :
   @ property
 from django . utils . safestring import mark_safe
  else :
              selected_html = ''
      if isinstance ( number , int ) :
  with open ( filename , 'wb' ) as outfile :
              if locales :
 if not self . form . is_bound :
 file_list = self . find_files ( "." )
 key = args
 oldroot [ RESULT ] = result
  return False
 from django . utils . safestring import mark_safe
                  if ( isinstance ( message , ValidationError ) and  message . code in error_messages ) :
              remaining = self . _remaining if size is None else size
                      if model in created_models :
              try :
   if options [ "pidfile" ] :
 number = self . validate_number ( number )
     if att_name == 'id' and extra_params == { 'primary_key' : True } :
  output_transaction = True
 memo [ id ( self ) ] = result
   try :
     @ classmethod
   if new_name in used_column_names :
 parser . delete_first_token ( )
 conditions_nodelists = [ ( condition , nodelist ) ]
  self . default_args = default_args or { }
                              cursor . execute ( sql )
   def get_dump_object ( self , obj ) :
 import os
 if words and length <= 0 :
 if not e . connection_reset :
 clean = lambda self , x : x
          return getattr ( self . _out , name )
 COMMENT_TAG_END = '#}'
   def _get_request ( self ) :
   if is_templatized :
                  return getattr ( instance , name ) ( )
          import flup
  if value is None :
 if match :
  register_to = kwargs . get ( 'register_to' )
          super ( MovedAttribute , self ) . __init__ ( name )
   __getattr__ = new_method_proxy ( getattr )
  p = PillowImageFile . Parser ( )
   headers = [  ( b': ' . join ( [ to_bytes ( key , 'ascii' ) , to_bytes ( value , 'latin-1' ) ] ) )  for key , value in self . _headers . values ( )  ]
     class DebugNode ( Node ) :
  if response is None :
   def file_complete ( self , file_size ) :
          if data in self . empty_values :
          if value in self . empty_values and self . required :
 if source is None :
 if self . args :
              os . remove ( fname )
  url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )
                          self . setlistdefault ( key ) . append ( value )
   def new_file ( self , file_name , * args , ** kwargs ) :
   def __repr__ ( self ) :
              error_msg = "Your TEMPLATE_DIRS setting is empty. Change it to point to at least one template directory."
try :
  if formatter :
      widget = CheckboxInput
      from yaml import SafeLoader , SafeDumper
          return fastcgi_help ( )
 def linebreaksbr ( value , autoescape = None ) :
              words = words [ : length ]
   def handle_file_complete ( self , old_field_name , counters ) :
  else :
    def is_valid_ipv6_address ( ip_str ) :
 from subprocess import PIPE , Popen
 make_key = _make_key
 return { }
              self . start_object ( obj )
 try :
  except KeyError :
                      m = plural_forms_re . search ( fp . read ( ) )
                  options += [ ( sorted ( s_opt . option_strings ) [ 0 ] , s_opt . nargs != 0 ) for s_opt in  parser . _actions if s_opt . option_strings ]
      def sync_apps ( self , connection , app_labels ) :
          self . loopvars , self . sequence = loopvars , sequence
  while current_len <= length :
          attrs = super ( CharField , self ) . widget_attrs ( widget )
              try :
          formfield_callback = attrs . pop ( 'formfield_callback' , None )
    def get_complete_version ( version = None ) :
 use_base_manager = options . get ( 'use_base_manager' )
   def normalize_newlines ( text ) :
   parser . add_library ( temp_lib )
                      if self . verbosity > 1 :
              self . _post , self . _files = QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
 if isinstance ( rhs , SafeData ) :
 from django . utils import six
  output . append ( widget . render ( name + '_%s' % i , widget_value , final_attrs ) )
   ugettext_noop = gettext_noop
  if ch == '?' :
  except KeyError :
 return value . center ( int ( arg ) )
 self . stream . write ( '\n' )
 from django . utils . six . moves import input
 from django . utils . http import http_date
      status_code = 404
 os . umask ( umask )
 self . _expire_info = _expire_info . setdefault ( name , { } )
 return re . sub ( "\d([A-Z])" , lambda m : m . group ( 0 ) . lower ( ) , t )
   def pop ( self , key , default = None ) :
 base62 = BaseConverter ( BASE62_ALPHABET )
              return
 substitutions [ 'initial' ] = format_html ( self . url_markup_template ,  value . url ,  force_text ( value ) )
     def upath ( path ) :
  connection = connections [ options [ 'database' ] ]
  except KeyError :
     class LoaderOrigin ( Origin ) :
  used_column_names = [ ]
  import os
 msg = self . _create_message ( msg )
                                  self . stdout . write ( "    Installing index for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
 from django . utils . encoding import python_2_unicode_compatible
  if doublecolon_len > best_doublecolon_len :
              return mark_safe ( self . render ( self . context ) )
  except TypeError :
                  self . stdout . write ( "No fixture '%s' in %s." %  ( fixture_name , humanize ( fixture_dir ) ) )
   def subwidgets ( self , name , value , attrs = None , choices = ( ) ) :
  from django . utils . deprecation import RemovedInDjango19Warning
 self . files = files or { }
 parser . add_argument ( '--app' , action = 'store' , dest = 'app_label' ,  default = None , help = 'Only look for fixtures in the specified app.' )
  elif field in self . fields :
 upto = end
 httpd . serve_forever ( )
                  year += 1900
     ip_address_validator_map = {  'both' : ( [ validate_ipv46_address ] , _ ( 'Enter a valid IPv4 or IPv6 address.' ) ) ,  'ipv4' : ( [ validate_ipv4_address ] , _ ( 'Enter a valid IPv4 address.' ) ) ,  'ipv6' : ( [ validate_ipv6_address ] , _ ( 'Enter a valid IPv6 address.' ) ) ,  }
                  raise TemplateSyntaxError ( "Malformed arguments to url tag" )
                          nodelist . append ( node . render ( context ) )
                  usage . append ( style . NOTICE (  "Note that only Django core commands are listed "  "as settings are not properly configured (error: %s)."  % self . settings_exception ) )
    locales = locale or all_locales
          data = obj_dict . pop ( '_data' , { } )
                  common_prefix = prefix
 def from_dict ( cls , file_dict ) :
 for app_config in reversed ( list ( apps . get_app_configs ( ) ) ) :
          for taglib in bits [ 1 : ] :
  if min_value is not None :
 for name in loggers :
   if not locale_dir :
  if help_texts and f . name in help_texts :
 namespaces = { }
    def compile_function_error ( self , token , e ) :
    NON_FIELD_ERRORS = '__all__'
          pieces = [ ]
 if self . activated :
 return [ to_py ( val ) for val in value ]
 __unicode__ = new_method_proxy ( unicode )
 if sys . platform . startswith ( 'java' ) :
 from django . utils import six
                          break
     wm = pyinotify . WatchManager ( )
                  return ( copyreg . _reconstructor , ( self . __class__ , object , None ) , self . __getstate__ ( ) )
                           old_field_name = field_name
 for name in filters :
                if e . errno != errno . ENOENT :
     class Template ( object ) :
  else :
  import datetime
  try :
 self . domain = options . get ( 'domain' )
          return text . __html__ ( )
 from django . template . base import TemplateSyntaxError , Library , Node , TextNode , token_kwargs , Variable
  else :
              return timedelta ( seconds = - time . timezone )
                  new_name = new_name [ : - 3 ]
  from . import Error , Tags , register
     __all__ = [ 'file_move_safe' ]
  if command in parse_until :
                  cached_loaders . append ( find_template_loader ( loader ) )
 return
               if ( isinstance ( data , Node ) and not data . negated  and ( data . connector == conn_type or len ( data ) == 1 ) ) :
                      template = get_template_from_string ( template , origin , template_name )
          if '-' not in lang_code :
 return MONTHS_3 [ self . data . month ]
              self . _max_entries = 300
   @ property
 DELETION_FIELD_NAME = 'DELETE'
          project_name , target = options . pop ( 'name' ) , options . pop ( 'directory' )
  return wrapper
     def close ( self ) :
                        if isinstance ( receiver , types . FunctionType ) :
              e . django_template_source = token . source
                      app_configs = apps . get_app_configs ( )
  return copy . deepcopy ( self . _wrapped , memo )
          nm = Header ( nm , encoding ) . encode ( )
                  if self . directory_permissions_mode is not None :
                      logger = root . manager . loggerDict [ log ]
     _localtime = None
 return res
   child_loggers = [ ]
 raise NotImplementedError ( 'subclasses of Serializer must provide a start_object() method' )
              connections [ self . using ] . close ( )
 itervalues = _itervalues
  for name , field in self . fields . items ( ) :
from __future__ import unicode_literals
 import os
   def error ( self , message ) :
 return self
 if token . contents == 'else' :
   generic_lang_code = lang_code . split ( '-' ) [ 0 ]
   def __next__ ( self ) :
 return bool ( self . changed_data )
 toktext = match . group ( name )
                      self . verbatim = 'end%s' % block_content
              output = self . _leftover
 super ( InlineForeignKeyField , self ) . __init__ ( * args , ** kwargs )
 try :
              if len ( app_labels ) > 1 and primary_keys :
  return value
  handler . addQuickElement ( "guid" , item [ 'unique_id' ] , guid_attrs )
   def _get_model_from_node ( self , node , attr ) :
          self . name = name
 try :
      exec_ = getattr ( moves . builtins , "exec" )
      def __init__ ( self , template_string , origin ) :
 if html :
 self . to_field_name = to_field_name
              if calendar . isleap ( self . data . year ) :
  def _text_chars ( self , length , truncate , text , truncate_len ) :
 import re
                      resource = resource . decode ( settings . FILE_CHARSET )
 import random
   def clear_checkbox_id ( self , name ) :
 self . _start_relational_field ( field )
 return do_ntranslate ( singular , plural , number , 'ngettext' )
    else :
 if value in self . empty_values :
 from django . db . migrations . executor import MigrationExecutor
                  item_date = item . get ( date_key )
 yield "#   * Make sure each model has one field with primary_key=True"
  if settings . USE_X_FORWARDED_HOST and (  'HTTP_X_FORWARDED_HOST' in self . META ) :
              value = getattr ( obj , field . get_attname ( ) )
  except ValidationError as e :
     m2m_data = { }
              if isinstance ( value , Field ) :
  write ( end )
 return binascii . unhexlify ( ( hex_format_string % x ) . encode ( 'ascii' ) )
      def model_to_dict ( instance , fields = None , exclude = None ) :
  parent_name = parser . compile_filter ( bits [ 1 ] )
 default_error_messages = {  'list' : _ ( 'Enter a list of values.' ) ,  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the'  ' available choices.' ) ,  'invalid_pk_value' : _ ( '"%(pk)s" is not a valid value for a primary key.' )  }
 handler . name = name
              self . bcc = [ ]
 from django . utils . encoding import force_text
  except StandardError as e :
      directory = os . path . dirname ( full_path )
              self . inverse_match = inverse_match
              timestamp = datetime . datetime . now ( ) . strftime ( "%Y%m%d-%H%M%S" )
  def __init__ ( self , var ) :
 new = '#: ' + orig_file [ 2 : ]
   except StandardError as e :
          return singular
   def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :
 self . fixture_object_count += objects_in_fixture
 pending_references = { }
                      compiled_result = compile_func ( self , token )
 def urlencode ( value , safe = None ) :
          return True
    self . _reverse_dict [ language_code ] = lookups
 def get_digit ( value , arg ) :
   def render ( self , name , value , attrs = None ) :
          self . _queryset = queryset
  def indexbytes ( buf , i ) :
   if daemonize :
              data [ "pk" ] = smart_text ( obj . _get_pk_val ( ) , strings_only = True )
  return self . _dimensions_cache
          return LANG_INFO [ lang_code ]
 func . __doc__ = doc
 self . app_name = app_name
  else :
  return ''
  except LookupError :
   manifest = OrderedDict (  ( app_name , list ( filter ( model_installed , model_list ) ) )  for app_name , model_list in all_models  )
                  if isinstance ( attachment , MIMEBase ) :
              result = self . configure_custom ( config )
 if m is not None and n is not None :
 if mimetype is None :
                                  n = int ( idx )
 from django . utils . translation import ugettext , ungettext
    for i , handler in enumerate ( handlers ) :
  if sep is None :
   else :
                  initial = self . widget . decompress ( initial )
 paras = re . split ( '\n{2,}' , value )
                        start = non_capturing_groups . pop ( )
    @ register . filter ( "phone2numeric" , is_safe = True )
  else :
                          self . handle_m2m_field ( obj , field )
              if shutdown_message :
                      resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
                   continue
  @ wraps ( func )
 if print_ is None :
           raise parser . error_class (  "Not expecting '%s' as infix operator in if tag." % self . id  )
   if match :
   if col_name != new_name and field_notes :
 from django . utils import translation
 return Template ( source , origin , name )
 from django . utils . timezone import template_localtime
          e = TemplateSyntaxError ( msg )
              raise InvalidCacheBackendError (  "Could not find config for '%s' in settings.CACHES" % alias  )
   def validate ( self , value ) :
                  if six . PY3 :
   _standard_context_processors = None
 self . ignore = options . pop ( 'ignorenonexistent' , False )
  if line :
                  values = [ ]
       def __add__ ( self , other ) :
    if display_num_errors :
   def to_language ( self ) :
          return json . dumps ( obj , separators = ( ',' , ':' ) ) . encode ( 'latin-1' )
      class CacheClass ( DummyCache ) :
   def __repr__ ( self ) :
      opts = model . _meta
  else :
    autodetector = MigrationAutodetector (  loader . project_state ( ) ,  ProjectState . from_apps ( apps ) ,  InteractiveMigrationQuestioner ( specified_apps = app_labels , dry_run = self . dry_run ) ,  )
 _itervalues = "values"
              params = [ source [ 1 ] ]
 pluralmatch = plural_re . match ( t . contents )
 self . widgets = getattr ( options , 'widgets' , None )
  import os
 from django . utils . datastructures import MultiValueDict
   block = type ( self ) ( block . name , block . nodelist )
  else :
   DEFAULT_MIN_NUM = 0
 if bits [ in_index ] != 'in' :
    elif t . token_type == TOKEN_COMMENT :
          return 'form'
 from django . utils . html import conditional_escape , format_html
 import zipfile
  if code is not None :
          try :
              with self . initLock :
 from collections import OrderedDict
              translation = self . _new_gnu_trans ( localedir )
  logger = logging . getLogger ( 'django.request' )
              return type ( self ) . __next__ ( self )
 from django . utils . six . moves import socketserver
   end = kwargs . pop ( "end" , None )
  try :
 check_for_language = lambda x : True
      def exhaust ( stream_or_iterable ) :
  else :
                  limit_choices_to = formfield . limit_choices_to
 return size
 raise NotImplementedError ( 'subclasses of NoArgsCommand must provide a handle_noargs() method' )
 text = force_text ( text )
          self . reader_enters ( )
   @ cached_property
  else :
              raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : value } ,  )
              handler . addQuickElement ( "category" , "" , { "term" : cat } )
 if self_closing or tagname in html4_singlets :
 from lib2to3 . pgen2 import token
              return o . isoformat ( )
   def render ( self , context ) :
 self . regex = regex
              if isinstance ( elt , NonCapture ) :
  except DecimalException :
                  self . stdout . write ( "%s\n" % line )
    def sql_indexes ( app_config , style , connection ) :
 return self . resolve ( value )
              if ord ( char ) < 33 or ord ( char ) == 127 :
 import traceback
          key = self . make_key ( key , version = version )
  self . base_url = base_url
 from django . db import connections , router , transaction , models , DEFAULT_DB_ALIAS
                  migration = loader . get_migration ( app_label , migration_name )
                      var_obj = Variable ( var )
          return self . paginator . validate_number ( self . number - 1 )
  except InvalidOperation :
           try :
 self . warning = warning
  return [  Warning (  "BooleanField does not have a default value." ,  hint = ( "Django 1.6 changed the default value of BooleanField from False to None. "  "See https://docs.djangoproject.com/en/1.6/ref/models/fields/#booleanfield "  "for more information." ) ,  obj = field ,  id = '1_6.W002' ,  )  for field in problem_fields  ]
                          response = middleware . process_template_response ( request , response )
               try :
                  raise
              settings . SITE_ID
 field_params [ 'decimal_places' ] = row [ 5 ] if row [ 5 ] is not None else 5
              self . _delete ( fname )
   class ResolverMatch ( object ) :
  field_type += '('
 from django . utils . safestring import mark_safe
              if len ( bits ) < 3 or bits [ 1 ] != 'as' :
     def run ( addr , port , wsgi_handler , ipv6 = False , threading = False ) :
  if isinstance ( stream_or_string , bytes ) :
          if response . streaming :
 if not prefix or not hasattr ( self , '_callback_str' ) :
 break
   class Serializer ( base . Serializer ) :
 from django . utils import baseconv
                  data [ f . name ] = [ ]
   for field , initial , data in zip ( self . fields , initial , data ) :
 self . set ( key , new_value , version = version )
          y = data . get ( self . year_field % name )
   def temporary_file_path ( self ) :
     class HttpResponseBadRequest ( HttpResponse ) :
  check_for_migrations ( app_config , connection )
 for k , v in data . items ( ) :
 super ( QueryDict , self ) . __delitem__ ( key )
          val1 = self . var1 . resolve ( context , True )
 model_fields = Model . _meta . get_all_field_names ( )
  else :
           name = args [ 1 ]
 while '%s_%d' % ( new_name , num ) in used_column_names :
   def get_json_data ( self , escape_html = False ) :
                                  self . stdout . write ( "    Installing custom SQL for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
  loop_dict [ 'first' ] = ( i == 0 )
              field_params [ 'db_column' ] = col_name
              return timesince ( value , arg )
    if six . PY3 :
              data = bool ( data )
  if verbosity >= 2 :
from __future__ import unicode_literals
          super ( QueryDict , self ) . __init__ ( )
          header = self . _convert_to_charset ( header , 'ascii' )
 if submod and not module_has_submodule ( import_module ( parentmod ) , submod ) :
          self . encoding = charset
 extra_params = OrderedDict ( )
   def _get_post ( self ) :
  except AttributeError :
 if self . alternatives :
  return value
  except ValueError :
  nodelist = parser . parse ( ( 'endblock' , ) )
   def render_css ( self ) :
  def nud ( self , parser ) :
                      self . xml . addQuickElement ( "object" , attrs = {  'pk' : smart_text ( value . _get_pk_val ( ) )  } )
          if hasattr ( self . file , 'size' ) :
    class RWLock ( object ) :
 from django . utils . encoding import smart_text
                  offset = - offset
 def __new__ ( mcs , name , bases , attrs ) :
          key = self . make_key ( key , version = version )
                      raise CommandError ( "Cannot find a migration matching '%s' from app '%s'." % (  migration_name , app_label ) )
 for attr in _urllib_request_moved_attributes :
  def __init__ ( self , nodelist , parent_name , template_dirs = None ) :
 decimals = abs ( exponent )
   except KeyError :
      help = 'Installs the named fixture(s) in the database.'
                  closable . close ( )
 _format_modules_cache = { }
 from django . core . management . color import color_style , no_style
   class CommandError ( Exception ) :
 self . xml . characters ( smart_text ( key_value ) )
   delta = 2000 - year
 self . variable_name = variable_name
 if best_doublecolon_start == 0 :
                  return True
              super ( TypedMultipleChoiceField , self ) . validate ( value )
 import sys
 if not self . activated :
 ser_fmts = serializers . get_public_serializer_formats ( ) if ser_fmt is None else [ ser_fmt ]
              if self . app_label and app_config . label != self . app_label :
  for alternative in self . alternatives :
  new_ip += hextet [ 1 ] . split ( ':' )
              new_name = 'number_%s' % new_name
 using_sysrandom = True
 self . locale_dir = locale_dir
                  msgs = fp . read ( )
              file . seek ( file_pos )
    forms = ' ' . join ( form . as_table ( ) for form in self )
 parser . add_option ( '--traceback' , action = 'store_true' ,  help = 'Raise on exception' )
 from django . utils import lru_cache
  return self . _text_chars ( length , truncate , text , truncate_len )
          _anonymous_ = [ '_offset_union' ]
  password += b'\x00' * ( inner . block_size - len ( password ) )
              try :
                if not ip_str . split ( ':' ) [ - 1 ] == hextet :
  if prefix is None :
  from django . forms . utils import *
   _get_val = lazy ( _get_val , six . text_type )
 if start > upto :
 bits = token . split_contents ( )
    def debug ( request ) :
  else :
                  pieces . append ( force_text ( getattr ( self , piece ) ( ) ) )
   original_lookup = lookup_view
 __str__ = new_method_proxy ( str )
   else :
 handler . startDocument ( )
 sortable_virtual_fields = [ f for f in opts . virtual_fields  if isinstance ( f , ModelField ) ]
 self . connection . starttls ( )
              return self . html_name
  return get_template ( parent )
 import yaml
          return fastcgi_help ( "Invalid combination of host, port, socket." )
  for attachment in self . attachments :
              return 'nd'
 import warnings
 notifier . read_events ( )
 parser . add_argument ( '-a' , '--all' , action = 'store_true' , dest = 'use_base_manager' , default = False ,  help = "Use Django's base manager to dump all models stored in the database, "  "including those that would otherwise be filtered or modified by a custom manager." )
 cache [ key ] = result
   return True
  try :
     if options . get ( "test_flush" , False ) :
  elif isinstance ( value , six . string_types ) :
 super ( FileField , self ) . __init__ ( * args , ** kwargs )
   def clear_url_caches ( ) :
 import glob
 from django . db . migrations . loader import AmbiguityError
  elif not self . required and not value :
  loggers = config . get ( 'loggers' , EMPTY_DICT )
                      self . stdout . write ( self . style . MIGRATE_LABEL ( "  Branch %s" % migration . name ) )
           indent = self . options . get ( "indent" )
    wrapper . __wrapped__ = user_function
 options [ 'secret_key' ] = get_random_string ( 50 , chars )
          warnings . warn (  "django.utils.tzinfo.FixedOffset will be removed in Django 1.9. "  "Use django.utils.timezone.get_fixed_timezone instead." ,  RemovedInDjango19Warning )
 from django . core . urlresolvers import set_script_prefix
      elif self . _meta . fields and field not in self . _meta . fields :
  filename = os . path . join ( to_path , name )
 if six . PY3 :
              return self . nodelist . render ( context )
      if not sys . warnoptions :
  finally :
 from django . template . base import TemplateDoesNotExist
  if not basedirs :
              return '%s_%s' % ( id_ , first_select )
 return select_html
    def mark_safe ( s ) :
                  os . makedirs ( self . file_path )
    def base64_hmac ( salt , value , key ) :
                          content_length = int ( meta_data . get ( 'content-length' ) [ 0 ] )
          return ( len ( self . queryset ) +  ( 1 if self . field . empty_label is not None else 0 ) )
      def ugettext ( message ) :
              return initial
     def _has_changed ( self , initial , data ) :
 if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
  MONTHS = 'jan feb mar apr may jun jul aug sep oct nov dec' . split ( )
 return MONTHS [ self . data . month ]
 from django . db . migrations . state import ProjectState
                  try :
 for i in range ( 0 , self . total_form_count ( ) ) :
          for d in self . dicts [ - 1 ] :
                  current_chunk = old_file . read ( chunk_size )
    if not old_method and new_method :
    @ register . filter ( is_safe = True )
              encoding = self . encoding or settings . DEFAULT_CHARSET
                          filemsg = 'file %s, ' % origin
   def __deepcopy__ ( self , memo ) :
 forms = ' ' . join ( form . as_ul ( ) for form in self )
          msg = '%sError importing module %s: "%s"' % (  error_prefix , dotted_path , e )
 for i , line in enumerate ( table_output ) :
 import operator
   class Command ( BaseCommand ) :
              attrs . setdefault ( 'step' , 'any' )
 self . username = settings . EMAIL_HOST_USER if username is None else username
 handlers = self . _upload_handlers
 from django . utils import six , lru_cache
  from lib2to3 import fixer_base
      renderer = None
    for filename in files :
 from itertools import chain
   def render ( self , context ) :
              raise TemplateSyntaxError ( "back called without some previous "  "parsing" )
   def handle_entityref ( self , name ) :
 yield emitting
   format_locations = [ ]
    from django . conf import settings
              return _ ( 'noon' )
      help = 'Discover and run tests in the specified modules or the current directory.'
      while True :
          result = super ( ChoiceField , self ) . __deepcopy__ ( memo )
    def get_cookie_signer ( salt = 'django.core.signing.get_cookie_signer' ) :
              fixture_dirs = self . fixture_dirs
 from django . utils . html import format_html , format_html_join , escape
          pass
    if resolver . urlconf_module is None :
 options += [ ( k , 1 ) for k in FASTCGI_OPTIONS ]
              self . cookies [ key ] [ 'path' ] = path
                  self . fetch_command ( options . args [ 0 ] ) . print_help ( self . prog_name , options . args [ 0 ] )
 if self . feed [ 'author_name' ] is not None :
  MONTHS_ALT = {  1 : pgettext_lazy ( 'alt. month' , 'January' ) ,  2 : pgettext_lazy ( 'alt. month' , 'February' ) ,  3 : pgettext_lazy ( 'alt. month' , 'March' ) ,  4 : pgettext_lazy ( 'alt. month' , 'April' ) ,  5 : pgettext_lazy ( 'alt. month' , 'May' ) ,  6 : pgettext_lazy ( 'alt. month' , 'June' ) ,  7 : pgettext_lazy ( 'alt. month' , 'July' ) ,  8 : pgettext_lazy ( 'alt. month' , 'August' ) ,  9 : pgettext_lazy ( 'alt. month' , 'September' ) ,  10 : pgettext_lazy ( 'alt. month' , 'October' ) ,  11 : pgettext_lazy ( 'alt. month' , 'November' ) ,  12 : pgettext_lazy ( 'alt. month' , 'December' )  }
  def readlines ( self ) :
              callback , param_dict = resolver . resolve_error_handler ( status_code )
                   raise ViewDoesNotExist (  "Could not import '%s.%s'. View is not callable." %  ( mod_name , func_name ) )
      widget = DateInput
                  continue
                              t = file_name
  return ' ' . join ( words )
 import warnings
   class Command ( BaseCommand ) :
  for key_value in related :
  except IOError as e :
 return self . as_widget ( TextInput ( ) , attrs , ** kwargs )
  while factor >= 0 :
          pass
  super ( TextInput , self ) . __init__ ( attrs )
 reloader ( wrapped_main_func , args , kwargs )
    if options . get ( 'load_initial_data' ) :
              warnings . warn (  '"requires_model_validation" is deprecated '  'in favor of "requires_system_checks".' ,  RemovedInDjango19Warning )
          with open ( options [ "pidfile" ] , "w" ) as fp :
          stream = StringIO ( stream_or_string )
 return phone2numeric ( value )
          return ''
   def readline ( self , size = None ) :
          return time_str + 'Z'
  else :
          self . _upload_handlers = [ uploadhandler . load_handler ( handler , self )  for handler in settings . FILE_UPLOAD_HANDLERS ]
   def empty_block_tag ( self , token ) :
                          try :
 app = TerminalIPythonApp . instance ( )
 tzinfo . __init__ ( self )
                          os . makedirs ( directory , self . directory_permissions_mode )
 value = force_text ( value )
   for entry in package_path :
 raise NotImplementedError ( 'subclasses of SyndicationFeed must provide a write() method' )
 space = " "
 match = time_re . match ( value )
 for path in gen_filenames ( only_new = True ) :
 os . dup2 ( si . fileno ( ) , sys . stdin . fileno ( ) )
                  data = self . _coerce ( data )
  if self . silent :
                  if confirm not in ( 'yes' , 'no' ) :
   def _has_changed ( self , initial , data ) :
  if options . get ( 'liveserver' ) is not None :
 final_output = [ ]
  else :
                              title += " (%s squashed migrations)" % len ( graph . nodes [ plan_node ] . replaces )
      status_code = 403
                          root , = nonlocal_root
   def __str__ ( self ) :
          raise TemplateSyntaxError ( "'firstof' statement requires at least one argument" )
  __all__ = (  'Media' , 'MediaDefiningClass' , 'Widget' , 'TextInput' ,  'EmailInput' , 'URLInput' , 'NumberInput' , 'PasswordInput' ,  'HiddenInput' , 'MultipleHiddenInput' , 'ClearableFileInput' ,  'FileInput' , 'DateInput' , 'DateTimeInput' , 'TimeInput' , 'Textarea' , 'CheckboxInput' ,  'Select' , 'NullBooleanSelect' , 'SelectMultiple' , 'RadioSelect' ,  'CheckboxSelectMultiple' , 'MultiWidget' ,  'SplitDateTimeWidget' , 'SplitHiddenDateTimeWidget' ,  )
                       key = make_key ( args , kwds , typed )
   return path_info . decode ( UTF_8 )
 from django . core . management . base import BaseCommand , CommandError
  except pickle . PickleError :
    @ register . filter ( is_safe = True )
              kwargs [ 'error_messages' ] = error_messages [ f . name ]
 bits = bits [ : - 2 ]
                                  self . stderr . write ( "    Failed to install custom SQL for %s.%s model: %s\n" % ( app_name , model . _meta . object_name , e ) )
   elif self . META . get ( 'CONTENT_TYPE' , '' ) . startswith ( 'application/x-www-form-urlencoded' ) :
 return calendar . timegm ( result . utctimetuple ( ) )
   def __getitem__ ( self , name ) :
      def __init__ ( self , context , * args , ** kwargs ) :
 start_ipython ( argv = [ ] )
    while True :
    class ObjectDoesNotExist ( Exception ) :
   def widget_attrs ( self , widget ) :
  def add_arguments ( self , parser ) :
          key = self . make_key ( key , version = version )
              activate ( self . timezone )
          import memcache
              return self . _render ( context )
                           non_capturing_groups . append ( len ( result ) )
                      pass
 from django . http . cookie import SimpleCookie
   if klass not in cls . __dispatch :
    function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )
 if use_l10n or ( use_l10n is None and settings . USE_L10N ) :
          key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX
   del attr
 handler . startElement ( "rss" , self . rss_attributes ( ) )
 for site in sites1 :
   def get ( self , key , default = None , version = None ) :
          self . fed . append ( '&%s;' % name )
def deconstructible ( * args , ** kwargs ) :
                  message , code , params = message . message , message . code , message . params
          if callable ( key_func ) :
 if not attr_list [ 3 ] & termios . ECHO :
  return handle_app ( app_config . models_module , ** options )
    def linebreaks ( value , autoescape = False ) :
  return self . parent_instance
  normalize_newlines = allow_lazy ( normalize_newlines , six . text_type )
 for message in message :
 from django . utils import six
 self . kwargs = kwargs
   except TypeError :
  def __init__ ( self , * args , ** kwargs ) :
  expanded_template = path . expanduser ( template )
  if old_style_list :
 from django . utils . text import ( smart_split , unescape_string_literal ,  get_text_list )
 from django . core . exceptions import ImproperlyConfigured
    if item [ 'unique_id' ] is not None :
 for option in option_label :
              from django . utils . translation import trans_null as trans
    forms_valid = True
    def parse_http_date ( date ) :
      def __init__ ( self , server , params , library , value_not_found_exception ) :
 data_value = field . widget . value_from_datadict ( self . data , self . files , prefixed_name )
                error = ValidationError ( error )
                           context_match = context_re . match ( bmatch . group ( 1 ) )
          if self . verbosity >= 1 :
 from django . core . serializers . python import Deserializer as PythonDeserializer
 self . attrs , self . choices = attrs , choices
               initial = False
      import imp
               raise
  if self . connector == conn_type :
 @ stringfilter
 consume_next = True
                              invalid_var_format_string = '%s' in settings . TEMPLATE_STRING_IF_INVALID
    def sql_destroy_indexes ( app_config , style , connection ) :
   if hasattr ( middleware , 'process_view' ) :
              if self . verbosity > 0 :
   def as_ul ( self ) :
                      self . invalid_block_tag ( token , command , parse_until )
     class IntegerField ( Field ) :
   def unescape_entities ( text ) :
   loop_dict = context [ 'forloop' ] = { 'parentloop' : parentloop }
          locale = options . get ( 'locale' )
  def clean ( self , value ) :
 self . _cached_loaders = [ ]
 import sys
    except IndexError :
  matches = True
 checkbox_id = self . clear_checkbox_id ( checkbox_name )
     registry = CheckRegistry ( )
 size = self . file . tell ( )
  try :
                          raise ValueError ( 'Unable to configure logger '  '%r: %s' % ( name , e ) )
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
          return NodeList ( )
  except Exception as e :
              cmp_fmt = None
  with io . open ( potfile , 'a' , encoding = 'utf-8' ) as fp :
          strerror = force_text ( e . strerror , DEFAULT_LOCALE_ENCODING ,  strings_only = True )
                      if primary_keys :
 if len ( bits ) < 2 :
              value = '1'
   def urlunquote ( quoted_url ) :
              return
   existing_headers = set ( header . lower ( ) for header in vary_headers )
 if value :
          return [ widget . value_from_datadict ( data , files , name + '_%s' % i ) for i , widget in enumerate ( self . widgets ) ]
                      self . stdout . write ( self . style . MIGRATE_LABEL ( "  Unapply all migrations: " ) + "%s" % ( targets [ 0 ] [ 0 ] , ) )
    else :
  elif action == "unapply_success" :
                      result = middleware . process_view ( request , view_func , args , kwargs )
  if val == [ ] :
     class SelectMultiple ( Select ) :
          return self . _is_rendered
      renderer = CheckboxFieldRenderer
 self . attrs = attrs
 objects_in_fixture = 0
  else :
    DEFAULT_ATTACHMENT_MIME_TYPE = 'application/octet-stream'
  init_path = os . path . join ( migrations_directory , "__init__.py" )
  except AttributeError :
 EMPTY_DICT = { }
  elif not base_url . endswith ( '/' ) :
 from django . template import loader , Context , RequestContext
  field_desc += ', ' . join ( [  '%s=%s' % ( k , strip_prefix ( repr ( v ) ) )  for k , v in extra_params . items ( ) ] )
 if space == 0 :
 if props :
  try :
  def to_python ( self , value ) :
  except Exception :
   def back ( self ) :
   def _get_scheme ( self ) :
  elif bytes < GB :
  return self . _regex_dict [ language_code ]
 from itertools import chain
 simple_url_re = re . compile ( r'^https?://\[?\w' , re . IGNORECASE )
                  scheme , netloc , path , query , fragment = urlsplit ( value )
    def __eq__ ( self , other ) :
  if self . number == self . paginator . num_pages :
 self . url = iri_to_uri ( url )
   def label_tag ( self , contents = None , attrs = None , label_suffix = None ) :
          self . _assert_mutable ( )
          return ip_address_validator_map [ protocol . lower ( ) ]
                from django . conf import urls
 self . symlinks = options . get ( 'symlinks' )
  else :
 result = datetime . datetime ( year , month , day , hour , min , sec )
  import re
 django . setup ( )
 utf8_charset . body_encoding = None
                  self . stdout . write ( " - %s" % migration . name )
          tpl = "DTDForbidden(name='{}', system_id={!r}, public_id={!r})"
  self . mod = new
  if hasattr ( TemplateLoader , 'load_template_source' ) :
   elif var is None :
          return True
  if isinstance ( value , six . text_type ) :
          return iter ( self . _container )
                   s = ' ' . join ( [ force_text ( arg , encoding , strings_only ,  errors ) for arg in s ] )
  Meta = type ( str ( 'Meta' ) , parent , attrs )
  output . append ( '%s<li>%s%s</li>' % ( indent ,  escaper ( force_text ( title ) ) , sublist ) )
 self . name , self . value = name , value
   def __str__ ( self ) :
     subclass = type ( "Migration" , ( migrations . Migration , ) , {  "dependencies" : [ ] ,  "operations" : new_operations ,  "replaces" : replaces ,  } )
                  clean_data . append ( field . clean ( field_value ) )
   def close ( self ) :
          daemon_kwargs [ 'err_log' ] = options [ 'errlog' ]
 zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = zbuf )
          key = self . make_key ( key , version = version )
 self . indent ( 2 )
    if isinstance ( message , dict ) :
    opts = tuple ( s for s in styles if s in opt_dict . keys ( ) )
  except Exception :
                  regex = self . _regex
                  message = message . error_dict
   def __str__ ( self ) :
  else :
   klass . __new__ = staticmethod ( __new__ )
 exctype , value = exc_info [ : 2 ]
 import warnings
 from django . forms . utils import from_current_timezone , to_current_timezone
              fp . write ( "%d\n" % os . getpid ( ) )
     header_names = [ key . lower ( ) for key in self . extra_headers ]
          for item in self . items :
  targets = [ ( app_label , migration . name ) ]
              parts = [ ]
                  cls . __dispatch [ resultclass ] = { }
    def get_language ( ) :
 pass
   def _convert_to_charset ( self , value , charset , mime_encode = False ) :
     else :
                      return ( fp . read ( ) . decode ( settings . FILE_CHARSET ) , filepath )
 if only_django :
                      if index is not None :
              basedirs . append ( os . path . join ( app_config . path , 'locale' ) )
  except ValueError :
          if not isinstance ( s , six . string_types ) :
 self . validate ( value )
  else :
          pass
 from django . utils import archive
 if options . get ( 'no_color' ) :
 allow_cascade = options . get ( 'allow_cascade' , False )
  from django . conf import settings
 response = callback ( request , ** param_dict )
    for chunk in field_stream :
              alter_sql . extend ( [ '-- ' + sql for sql in  connection . creation . sql_for_pending_references ( model , style , pending_references ) ] )
                          yield obj
          return value
 self . location = abspathu ( self . base_location )
                  handler . addQuickElement ( "uri" , item [ 'author_link' ] )
  def tzname ( self , dt ) :
  if not self . is_bound :
  def chunks ( self , chunk_size = None ) :
  except TypeError as te :
   class Field ( object ) :
  else :
 pass
              request = record . request
   def _reverse_with_prefix ( self , lookup_view , _prefix , * args , ** kwargs ) :
      try :
   year = dt . year
   if i >= len ( subject ) :
 from email . utils import formatdate , getaddresses , formataddr , parseaddr
 _templatetags_modules . append ( templatetag_module )
 from django . db import models
 return func
 if not isinstance ( urlconf_name , six . string_types ) :
              sys . stdout = open ( out_log , 'a' , buffering )
   def fastcgi_help ( message = None ) :
    if six . PY3 :
 self . day_none_value = ( 0 , empty_label [ 2 ] )
 if not ( bits . scheme and bits . netloc ) :
 from django . utils . deprecation import RemovedInDjango20Warning
     absolute_max = max_num + DEFAULT_MAX_NUM
  except ValueError :
  self . buffer += chunk
 new_path = path . join ( top_dir , relative_dir ,  filename . replace ( base_name , name ) )
 from django . utils . encoding import python_2_unicode_compatible
                    content = message_from_string ( content )
          style = no_style ( )
              if template . startswith ( 'file://' ) :
   def css_classes ( self , extra_classes = None ) :
  self . stream . write ( "]" )
 for bytes in stream :
 from django . utils import six
              return reduce ( operator . add , dict ( self ) . values ( ) )
 __all__ = [ "runfastcgi" ]
 if version is None :
          length = int ( arg )
  modules = _format_modules_cache . setdefault ( lang , list ( iter_format_modules ( lang , settings . FORMAT_MODULE_PATH ) ) )
  self . extensions = handle_extensions ( exts )
  elif hasattr ( query , 'items' ) :
   block_context . add_blocks ( self . blocks )
   if script_url :
     class DateTimeField ( BaseTemporalField ) :
 self . keyOrder = [ ]
              dklen = hlen
   def add_item_elements ( self , handler , item ) :
              models . add ( model )
  except Exception :
  else :
          prefix = get_script_prefix ( )
              raise ImproperlyConfigured (  'Command %s defines both "requires_model_validation" '  'and "requires_system_checks", which is illegal. Use only '  '"requires_system_checks".' % self . __class__ . __name__ )
  elif bytes < MB :
  safe_input = isinstance ( text , SafeData )
   def previous_page_number ( self ) :
      choice_input_class = RadioChoiceInput
 units = len ( tupl [ 1 ] ) - tupl [ 2 ]
    if ( ( ip_str . startswith ( ':' ) and not ip_str . startswith ( '::' ) ) or  ( ip_str . endswith ( ':' ) and not ip_str . endswith ( '::' ) ) ) :
   try :
          key = self . cache_key ( template_name , template_dirs )
          raise InvalidCacheBackendError (  "Could not find backend '%s': %s" % ( backend , e ) )
                  if isinstance ( callback , types . FunctionType ) :
              return hash ( self . __cast ( ) )
 kwargs_safe = dict ( ( k , conditional_escape ( v ) ) for ( k , v ) in six . iteritems ( kwargs ) )
              base_url += '/'
   if not new_method and old_method :
              self . _populate ( )
                  if os . path . basename ( candidate ) in targets :
   if six . PY3 :
 if app_config . models_module is None :
 if not autoescape or isinstance ( value , SafeData ) :
   def create_select ( self , name , field , value , val , choices , none_value ) :
  except :
              output = self . filter_expression . resolve ( context )
  def __init__ ( self , permitted_methods , * args , ** kwargs ) :
 self . _raw_ipv6 = bool ( self . use_ipv6 )
 from django . utils import six
                  new = name
          exp = Decimal ( '1.0' ) / ( Decimal ( 10 ) ** abs ( p ) )
              name = getattr ( file , 'name' , None )
 parser . add_argument ( '--no-initial-data' , action = 'store_false' , dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
 response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
 return self . _html_output (  normal_row = '<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>' ,  error_row = '<li>%s</li>' ,  row_ender = '</li>' ,  help_text_html = ' <span class="helptext">%s</span>' ,  errors_on_separate_row = False )
   def add_prefix ( self , prefix ) :
          if arg :
  else :
   def __bool__ ( self ) :
   def extract ( self , to_path = '' ) :
        constant_string = r""" (?:%(i18n_open)s%(strdq)s%(i18n_close)s| %(i18n_open)s%(strsq)s%(i18n_close)s| %(strdq)s| %(strsq)s) """ % {  'strdq' : r'"[^"\\]*(?:\\.[^"\\]*)*"' ,  'strsq' : r"'[^'\\]*(?:\\.[^'\\]*)*'" ,  'i18n_open' : re . escape ( "_(" ) ,  'i18n_close' : re . escape ( ")" ) ,  }
  resolver = get_resolver ( urlconf )
   self . xml . endElement ( "field" )
          _fields_ = [  ( 'Offset' , DWORD ) ,  ( 'OffsetHigh' , DWORD ) ]
          if options [ "daemonize" ] . lower ( ) in ( 'true' , 'yes' , 't' ) :
                  error_msg += " Got this from the '%s' variable." % self . parent_name . token
 @ stringfilter
  else :
                   opts = model . _meta
                  pass
 import signal
 try :
 self . validate ( display_num_errors = True )
 tell = property ( lambda self : self . file . tell )
 from django . core . exceptions import MiddlewareNotUsed , PermissionDenied , SuspiciousOperation
          if not ext . startswith ( '.' ) :
   def utcoffset ( self , dt ) :
          return arg
 return res
  return self . _request
 def upload_handlers ( self ) :
   return str ( name ) , val
 if s == '"' :
from __future__ import unicode_literals
              if six . PY2 :
                              raise VariableDoesNotExist ( "Failed lookup for key "  "[%s] in %r" ,  ( bit , current ) )
          for name , block in six . iteritems ( blocks ) :
    class StopFutureHandlers ( UploadFileException ) :
 try :
   attachment = SafeMIMEMessage ( content , subtype )
  except ImportError :
  return list ( self )
     class FilterNode ( Node ) :
   def clear_cdata_mode ( self ) :
    try :
   def lazy_number ( func , resultclass , number = None , ** kwargs ) :
 self . choices . append ( ( f , f . replace ( path , "" , 1 ) ) )
   form = modelform_factory ( model , form = form , fields = fields , exclude = exclude ,  formfield_callback = formfield_callback ,  widgets = widgets , localized_fields = localized_fields ,  labels = labels , help_texts = help_texts , error_messages = error_messages )
                      return ( 1 , 0 )
  from django . utils import six
  if hasattr ( model , 'natural_key' ) :
          data = conditional_escape ( arg ) . join ( value )
          return value
 while field . rel is not None :
              self . stream = None
   def close ( self ) :
          if self . _wrapped is empty :
 from decimal import Decimal , InvalidOperation , Context , ROUND_HALF_UP
               name = os . path . basename ( name )
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
 root [ : ] = [ root , root , None , None ]
    def clear ( self ) :
 if css_classes :
    def dst ( self , dt ) :
   choices = property ( _get_choices , _set_choices )
                  del self . cleaned_data [ field ]
          defaults = parser . parse_args ( args = args )
 if len ( t ) > 1 :
    @ register . filter ( is_safe = True )
                  f . close ( )
  if widgets is not None :
          obj = super ( MultiWidget , self ) . __deepcopy__ ( memo )
  if f . name in cleaned_data :
              @ decorator
    def get_language_from_path ( path , strict = False ) :
          self . filter_expr , self . nodelist = filter_expr , nodelist
                           self . _changed_data . append ( name )
                  key = force_str ( key )
  else :
 for p in plist :
  del _serializers [ format ]
              usage = sorted ( get_commands ( ) . keys ( ) )
                    timeout += int ( time . time ( ) )
  if fields and f . name not in fields :
                  yield node
          namelist = self . _archive . namelist ( )
   @ classmethod
    def __exit__ ( self , exc_type , exc_value , traceback ) :
              self . connection = get_connection ( fail_silently = fail_silently )
     class CachedDnsName ( object ) :
              cursor . close ( )
                          raise CommandError ( "Unknown application: %s" % app_label )
 timetuple = dt . timetuple ( )
  try :
  resolved_kwargs = dict ( ( k , v . resolve ( context ) ) for k , v in self . kwargs . items ( ) )
          value = ugettext ( "%s PB" ) % filesize_number_format ( bytes / PB )
 return any ( ignore ( pattern ) for pattern in ignore_patterns )
   def __bool__ ( self ) :
   self . _container = [ value ]
                  break
 if token is None :
  if error_message is not None :
 if app_label not in executor . loader . migrated_apps :
    with open ( old_file_name , 'rb' ) as old_file :
 for subwidget in self . field . widget . subwidgets ( self . html_name , self . value ( ) , attrs ) :
 stderr . write ( '%s: %s' % ( e . __class__ . __name__ , e ) )
  except OSError :
 from importlib import import_module
                  i = 365
          self . max_digits , self . decimal_places = max_digits , decimal_places
  def __str__ ( self ) :
 self . base_fields [ INITIAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput )
          return decorator
 return self . format ( 'D, j M Y H:i:s O' )
  except AttributeError :
          return self
  from django . utils import six
 kwargs = { }
  output = self . handle ( * args , ** options )
      message = _ ( 'Enter a valid email address.' )
          parser . add_argument ( 'args' , nargs = argparse . REMAINDER ,  help = 'Various KEY=val options.' )
          return zipfile . ZipFile . read ( self , self . namelist ( ) [ 0 ] )
                              extra_params [ 'unique' ] = True
     utf8_charset = Charset . Charset ( 'utf-8' )
 import os
  from django . http import QueryDict
   if isinstance ( pk , OneToOneField ) or isinstance ( pk , ForeignKey ) :
 stats [ MISSES ] += 1
 decimal_separator = get_format ( 'DECIMAL_SEPARATOR' )
 if not boundary or not cgi . valid_boundary ( boundary ) :
              self . style_func = style_func
 if params . get ( 'filename' ) :
           pass
  else :
  if self . addr :
 absolute_http_url_re = re . compile ( r"^https?://" , re . I )
    return True
from django . core . management import call_command
    class PermissionDenied ( Exception ) :
              code_list . append ( opt_dict [ o ] )
              return self
              continue
 return mark_safe ( format_string . format ( * args_safe , ** kwargs_safe ) )
              if isinstance ( option_label , ( list , tuple ) ) :
    _urllib_error_moved_attributes = [  MovedAttribute ( "URLError" , "urllib2" , "urllib.error" ) ,  MovedAttribute ( "HTTPError" , "urllib2" , "urllib.error" ) ,  MovedAttribute ( "ContentTooShortError" , "urllib" , "urllib.error" ) ,  ]
      renderer = RadioFieldRenderer
              new_ip . append ( '0000' )
              params = { 'max' : self . max_length , 'length' : len ( file_name ) }
    sequence = parser . compile_filter ( bits [ in_index + 1 ] )
   sign = ''
 boolean_attrs = [ ]
  return t
    encode = curry ( _proxy_method , method = six . text_type . encode )
  return left
   def __eq__ ( self , other ) :
   if opts . fields == ALL_FIELDS :
   def unparsed_entity_decl ( self , name , base , sysid , pubid , notation_name ) :
     @ deconstructible
                              current = current [ int ( bit ) ]
 for key in keys :
 from django . template . loader import BaseLoader
              table_names = [ ]
              ext_list [ i ] = '.%s' % ext_list [ i ]
          return False
    def _lazy_proxy_unpickle ( func , args , kwargs , * resultclasses ) :
     for field in model . _meta . fields :
 if isinstance ( title , ( list , tuple ) ) :
 def rendered_content ( self ) :
  else :
  LOCK_SH = 0
  except TypeError :
  elif self . verbosity > 0 :
 if len_values < 1 :
              try :
              if ( self . requires_system_checks and  not options . get ( 'skip_validation' ) and  not options . get ( 'skip_checks' ) ) :
 def __init__ ( self , server , params ) :
  else :
 if block is None :
                   loop_dict [ 'counter0' ] = i
                          try :
   if not hasattr ( callback , '__name__' ) :
 return other_dict
   def _get_media ( self ) :
  if self . data . minute == 0 and self . data . hour == 12 :
    default_storage = DefaultStorage ( )
   def slugify ( value ) :
  filter_func = parser . find_filter ( filter_name )
 input_type = None
 if value in self . empty_values :
    @ register . filter ( is_safe = True )
 with open ( writer . path , "wb" ) as fh :
  import hashlib
 return value . ljust ( int ( arg ) )
              final_attrs [ 'checked' ] = 'checked'
              params = params [ 1 : ]
          return s
              chunk_size = self . DEFAULT_CHUNK_SIZE
  number = '' . join ( reversed ( digits ) )
 self [ 'Allow' ] = ', ' . join ( permitted_methods )
   class Iterator ( object ) :
  file_name = force_text ( file_name , encoding , errors = 'replace' )
  def __init__ ( self ) :
              return loader . select_template ( template )
          if part in PALETTES :
 from __future__ import unicode_literals
 t -= 1
 if num_repl > 0 :
     if self . verbosity > 1 :
  except VariableDoesNotExist :
 def __init__ ( self , cmd , ** kwargs ) :
      is_usable = True
    def read ( self ) :
   def _should_delete_form ( self , form ) :
          escaper = conditional_escape
              file_field_list . append ( f )
 for item in values :
  return self . _cached_loaders
              handler . addQuickElement ( "author" , item [ "author_email" ] )
 self . tags = { }
 signals . request_started . send ( sender = self . __class__ )
  if self . domain == 'djangojs' :
          raise CommandError ( "Unknown command: %r" % name )
 __D = r'(?P<day>\d{2})'
          stream_or_string = stream_or_string . decode ( 'utf-8' )
  elif ch != 'P' :
  def _parse_header ( line ) :
 if not directory_created . get ( app_label , False ) :
                  field_value = getInnerText ( node ) . strip ( )
   try :
                      pass
  else :
              pass
  else :
   def __call__ ( self , f ) :
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
  from collections import OrderedDict
              def value_encode ( self , val ) :
 from django . utils import six
 self . merge ( translation )
 one_percent_re = re . compile ( r"""(?<!%)%(?!%)""" )
          for key in self . keyOrder :
   def __getstate__ ( self ) :
   class Formatter ( object ) :
 from __future__ import unicode_literals
              return result
 if len ( bits ) != 2 :
 if os . path . exists ( fname ) :
  raise CommandError (  "errors happened while running xgettext on %s\n%s" %  ( self . file , errors ) )
   elif option == 'only' :
              if t . token_type == TOKEN_BLOCK and t . contents == 'endcomment' :
              return ( t [ 0 ] . lower ( ) , t [ 1 ] )
   def _set_queryset ( self , queryset ) :
 for node in self :
          if app_config . models_module is None :
                  pass
  return quote ( force_bytes ( iri ) , safe = b"/#%[]=:;$&()+,!?*@'~" )
 if len ( bits ) >= 4 and bits [ - 2 ] == "from" :
  self . stream . write ( "[" )
              value , decimals = value . split ( decimal_separator , 1 )
  else :
          return item in list ( self )
 secret = force_bytes ( secret )
   def next_token ( self ) :
   def values ( self ) :
  else :
  sys . exit ( 0 )
 cmd_options = vars ( options )
              raise AttributeError ( "This QueryDict instance is immutable" )
      return _trans . deactivate ( )
 raise NotImplementedError ( 'subclasses of Storage must provide a delete() method' )
          return mark_safe ( six . text_type ( value ) )
          return not settings . DEBUG
    filters = config . get ( 'filters' , EMPTY_DICT )
  else :
   if iterator is None :
   def created_time ( self , name ) :
  fields = [ ( field_name , attrs . pop ( field_name ) ) for field_name , obj in list ( six . iteritems ( attrs ) ) if isinstance ( obj , Field ) ]
  try :
   def widget_attrs ( self , widget ) :
                  for key , value_list in other_dict . lists ( ) :
  field_name = force_text ( field_name , encoding , errors = 'replace' )
 _func_code = "__code__"
  def __init__ ( self , loaders ) :
 if isinstance ( other_dict , MultiValueDict ) :
          fill_to = 7
 existing = list ( root . manager . loggerDict )
 from django . views import debug
 default_settings = module_to_dict ( global_settings )
           unicode_value = force_text ( value , strings_only = True )
  else :
   class Truncator ( SimpleLazyObject ) :
          if not hasattr ( self , '_files' ) :
  self . __dict__ . update ( obj_dict )
          self . _createdir ( )
  except TypeError :
 remove = complain
                  handler . addQuickElement ( "email" , self . feed [ 'author_email' ] )
 changed = True
    def pop ( self , name ) :
    for role in termcolors . PALETTES [ termcolors . NOCOLOR_PALETTE ] :
 if endblock . contents not in acceptable_endblocks :
  list_length = len ( list_ )
              name , ( value , params ) = _parse_header ( line )
          args = [ sys . executable ] + [ '-W%s' % o for o in sys . warnoptions ] + sys . argv
  return parser
 lock = RLock ( )
 extra_files = [ ]
          return self . as_ul ( )
           logging . captureWarnings ( True )
  initial_set = set ( force_text ( value ) for value in initial )
    PY2 = sys . version_info [ 0 ] == 2
 self . index = index
  if interactive :
   def _has_changed ( self , initial , data ) :
   def value ( self ) :
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
     class Command ( BaseCommand ) :
                def __wrapper__ ( self , * args , ** kw ) :
              try :
              self [ : ] = tup
  from django . utils . deprecation import RemovedInDjango19Warning
     @ register . filter ( is_safe = True , needs_autoescape = True )
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
   if six . PY3 :
   def _update_errors ( self , errors ) :
              return len ( self . get_queryset ( ) )
      help = "Deprecated - use 'migrate' instead."
 text = force_text ( text )
   queryset = property ( _get_queryset , _set_queryset )
  IDENTIFIER = re . compile ( '^[a-z_][a-z0-9_]*$' , re . I )
 return self . form . errors . get ( self . name , self . form . error_class ( ) )
 import datetime
 return self . choice_input_class ( self . name , self . value , self . attrs . copy ( ) , choice , idx )
          return self . _get_image_dimensions ( ) [ 0 ]
              param = None
 try :
    def make_style ( opts = ( ) , ** kwargs ) :
 def divisibleby ( value , arg ) :
 for item in sorted_items :
          _active . value = pytz . timezone ( timezone )
    class PageNotAnInteger ( InvalidPage ) :
          if not formset . is_valid ( ) :
              if isinstance ( arg , Promise ) :
      if path is None :
              name_str = "; " . join (  "%s in %s" % ( ", " . join ( names ) , app )  for app , names in conflicts . items ( )  )
    style . ERROR_OUTPUT = style . ERROR
          from importlib . util import find_spec as importlib_find
          if hasattr ( self , 'error_dict' ) :
                  raise base . DeserializationError ( "<field> node is missing the 'name' attribute" )
 import tempfile
  elif value in ( False , 'False' , '0' ) :
          for d in self . dicts :
              template = self . template_with_initial
          self . obj = obj
 regexes = self . regexes
  import importlib
    def parse_bits ( parser , bits , params , varargs , varkw , defaults ,  takes_context , name ) :
 import os
    def int_to_base36 ( i ) :
   if years :
          return self . path == other . path
  if r . endswith ( '+00:00' ) :
 self . _charset = settings . DEFAULT_CHARSET
   def add_prefix ( self , field_name ) :
    extensions = tuple (  handle_extensions ( options [ 'extensions' ] , ignored = ( ) ) )
 if kwargs . get ( 'localize' ) and self . widget == NumberInput :
 import glob
                  parts = t . contents . split ( '|' )
   def get_many ( self , keys , version = None ) :
   gettext_lazy = lazy ( gettext , str )
    else :
  return '%s%s' % ( text , truncate )
  from django . utils . encoding import smart_text
  return nodes
 return self . add_truncation_text ( ' ' . join ( words ) , truncate )
  self . namespace = ':' . join ( self . namespaces )
 self . length , self . mime_type = length , mime_type
 for var in loopvars :
  else :
 from django . utils . ipv6 import is_valid_ipv6_address
                  template = template [ 7 : ]
          command = load_command_class ( app_name , name )
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
  def __repr__ ( self ) :
                          latest_date = item_date
   def handle_charref ( self , name ) :
   def upload_complete ( self ) :
  except OSError :
  with connection . cursor ( ) as cursor :
 if not self . is_bound :
      pass
 for i , handler in enumerate ( self . _upload_handlers ) :
 from django . utils . six . moves . urllib . parse import quote
          if name == 'regex' :
      def __init__ ( self , class_name , old_method_name , new_method_name , deprecation_warning ) :
 memoryview = memoryview
                  pass
 expanded_template = path . normpath ( expanded_template )
              kw [ 'microsecond' ] = kw [ 'microsecond' ] . ljust ( 6 , '0' )
 all_date_checks = all_date_checks . union ( set ( date_checks ) )
   def get_wsgi_application ( ) :
 from django . conf import settings
          return json . dumps ( { f : e . get_json_data ( escape_html ) for f , e in self . items ( ) } )
          lang_code = get_language_from_path ( request . path_info )
 from django . utils import six
  if not self . invoked_for_django :
    def _generate_cache_header_key ( key_prefix , request ) :
      return lazy_number ( ungettext , six . text_type , singular = singular , plural = plural , number = number )
 if isinstance ( self , nodetype ) :
 import time as _time
              message = trim_whitespace ( message )
    imported_objects = { }
      def __init__ ( self , language , deactivate = False ) :
  if data in seen_data :
 try :
 raise TemplateDoesNotExist ( name )
 self . _post_parse_error = True
               if len ( language [ p + 1 : ] ) > 2 :
 for app_config in apps . get_app_configs ( ) :
  if settings . TEMPLATE_DEBUG and origin is None :
                 s = s . decode ( encoding , errors )
  return TemplateTagNode ( tag )
 if construct :
      return getattr ( self , _assertRegex ) ( * args , ** kwargs )
              return ''
 LOCK_NB = fcntl . LOCK_NB
 if sys . version_info [ 1 ] <= 1 :
 def __init__ ( self , initlist = None , error_class = None ) :
  if isinstance ( value , datetime . datetime ) :
 if check not in self . registered_checks :
 run_syncdb = True
 field_params [ 'max_digits' ] = row [ 4 ] if row [ 4 ] is not None else 10
          if self . old_timezone is None :
    def get_system_encoding ( ) :
 __init__ = type . __init__
   if any ( e . is_serious ( ) and not e . is_silenced ( ) for e in all_issues ) :
  elif change == I18N_MODIFIED :
  output_transaction = True
              self . fetch_command ( subcommand ) . run_from_argv ( self . argv )
     elif not hasattr ( message , 'message' if six . PY3 else 'code' ) :
  else :
      has_bz2 = False
   def __copy__ ( self ) :
  nodelist = [ ]
 from django . utils . encoding import force_str
                          locks . lock ( fd , locks . LOCK_EX )
          self . _archive . list ( )
   DOTS = [ '&middot;' , '*' , '\u2022' , '&#149;' , '&bull;' , '&#8226;' ]
   def render ( self , context ) :
                              try :
          if '.' in word or '@' in word or ':' in word :
 self . _varlist = varlist
 from __future__ import unicode_literals
  self . _ordering . append ( ( i , form . cleaned_data [ ORDERING_FIELD_NAME ] ) )
 column_name = row [ 0 ]
 return { 'MEDIA_URL' : settings . MEDIA_URL }
 view = parts [ 0 ]
   def render_option ( self , selected_choices , option_value , option_label ) :
 obj_pk = getattr ( obj , field . rel . field_name )
                      dirname = os . path . dirname ( filename )
 re_newlines = re . compile ( r'\r\n|\r' )
 return '%06d' % self . data . microsecond
 _empty_value = None
   def __ne__ ( self , other ) :
  bytes_read = 0
 from django . utils import six
  else :
          return repr ( list ( self ) )
              return list ( self . itervalues ( ) )
               for model in sort_dependencies ( app_list . items ( ) ) :
                  return type . __new__ ( cls , name , ( ) , d )
 stats [ : ] = [ 0 , 0 ]
                      netloc = netloc . encode ( 'idna' ) . decode ( 'ascii' )
 for db in connections . all ( ) :
              version = self . version
  except Exception as e :
 def __init__ ( self , language ) :
          exp = Decimal ( 1 )
 from django . core import serializers
              return False
 return from_current_timezone ( result )
  except LookupError :
   def __repr__ ( self ) :
 return force_text ( unquote_plus ( force_str ( quoted_url ) ) )
   def __str__ ( self ) :
   self . _callback = get_callable ( self . _callback_str )
 class ChoiceFieldRenderer ( object ) :
   elif ch == '(' :
  r = o . isoformat ( )
  else :
 def content ( self ) :
                  if app == 'django.core' :
                    continue
   @ staticmethod
  except AttributeError :
 params = { 'datetime' : value , 'current_timezone' : current_timezone }
   if t . token_type == TOKEN_BLOCK :
  def __init__ ( self , * args , ** kwargs ) :
   def as_text ( self ) :
   @ property
  self . ending = ending
 pass
   def __str__ ( self ) :
 left = t . nud ( self )
       response_fixes = [  http . fix_location_header ,  http . conditional_content_removal ,  ]
      def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList , label_suffix = None ,  empty_permitted = False , instance = None ) :
 from django . utils . deprecation import RemovedInDjango19Warning
 from __future__ import unicode_literals
                  settings . configure ( )
   def resolve ( self , s ) :
  return True
                      view_name = callback . __class__ . __name__ + '.__call__'
  def __getattr__ ( self , real_name ) :
 chunks = (  ( 60 * 60 * 24 * 365 , ungettext_lazy ( '%d year' , '%d years' ) ) ,  ( 60 * 60 * 24 * 30 , ungettext_lazy ( '%d month' , '%d months' ) ) ,  ( 60 * 60 * 24 * 7 , ungettext_lazy ( '%d week' , '%d weeks' ) ) ,  ( 60 * 60 * 24 , ungettext_lazy ( '%d day' , '%d days' ) ) ,  ( 60 * 60 , ungettext_lazy ( '%d hour' , '%d hours' ) ) ,  ( 60 , ungettext_lazy ( '%d minute' , '%d minutes' ) )  )
          timestamp = datetime . datetime . utcfromtimestamp ( int ( timestamp ) )
 if not encoding :
  self . _regex_validator = validators . RegexValidator ( regex = regex )
      DEFAULT_TIMEOUT = object ( )
 sql_statements = executor . collect_sql ( plan )
                          if os . path . abspath ( dirpath ) . startswith ( os . path . dirname ( path ) ) :
              raise KeyError (  "Key %r not found in '%s'" % ( name , self . __class__ . __name__ ) )
 return self . _callback
              return
          try :
  result = getattr ( _default , translation_function ) ( eol_message )
 self . locale_paths = [ ]
     if self . asvar :
    else :
  param = '' . join ( name )
  super ( Command , self ) . handle ( 'project' , project_name , target , ** options )
           self . sep = force_str ( sep )
  return value
          self . is_bound = data is not None or files is not None
          tables = connection . introspection . table_names ( )
   return name
 tried = [ ]
   def phone2numeric ( phone ) :
 result_args = [ [ ] ]
  except UnicodeError :
                  self . encoding = content_params [ 'charset' ]
          serializers [ format ] = module
 self . initial = initial
  from django . apps import apps
 self . buffer = b''
              raise ValidationError ( self . message , code = self . code )
 return ( RAW , { } , stream )
  for pattern in allowed_hosts :
          self . _read_started = True
 LOCK_NB = 0x1
   def _set_size ( self , size ) :
  if lang_code :
   url_fields = split_url ( urlunsplit ( url_fields ) )
 try :
          sys . stderr . write ( "ERROR: %s\n" % e )
 if self . setting :
 from django . db import connections , DEFAULT_DB_ALIAS , migrations
  status_code = 200
              return [ ]
  from django . core . serializers . base import DeserializationError
 self . alternatives = alternatives or [ ]
     loader = MigrationLoader ( None , ignore_no_migrations = True )
  else :
  out = text [ : end_text_pos ]
 self . base_fields [ MAX_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )
  return get_resolver ( urlconf ) . resolve ( path )
              if self . count == 0 and not self . allow_empty_first_page :
    def catalog ( ) :
   else :
              style = no_style ( )
              raise ValidationError ( self . error_messages [ 'invalid_list' ] , code = 'invalid_list' )
 for lookup , arg in args :
                      continue
 if timeout is not None :
  first_item , second_item = list_
      parser = CommandParser ( None , usage = "%(prog)s subcommand [options] [args]" , add_help = False )
   super_set ( key , value )
    else :
   if str ( '\n' ) in value or str ( '\r' ) in value :
 if not m :
    daemon_kwargs = { }
 __eq__ = new_method_proxy ( operator . eq )
          return True
 def do_filter ( parser , token ) :
 return super ( QueryDict , self ) . popitem ( )
 super ( JsonResponse , self ) . __init__ ( content = data , ** kwargs )
 year = year + off
  from argparse import ArgumentParser
 klass . deconstruct = deconstruct
 try :
                  if hasattr ( middleware , 'process_request' ) :
                      for node in self . nodelist_loop :
                      parent_pat = pattern . regex . pattern
  return result
  _js_escapes = {  ord ( '\\' ) : '\\u005C' ,  ord ( '\'' ) : '\\u0027' ,  ord ( '"' ) : '\\u0022' ,  ord ( '>' ) : '\\u003E' ,  ord ( '<' ) : '\\u003C' ,  ord ( '&' ) : '\\u0026' ,  ord ( '=' ) : '\\u003D' ,  ord ( '-' ) : '\\u002D' ,  ord ( ';' ) : '\\u003B' ,  ord ( '\u2028' ) : '\\u2028' ,  ord ( '\u2029' ) : '\\u2029'  }
  for field_name in self . fields :
  return super ( CommandParser , self ) . parse_args ( args , namespace )
          raise ValueError ( "The protocol '%s' is unknown. Supported: %s"  % ( protocol , list ( ip_address_validator_map ) ) )
              if key in d :
          natural_key = obj . natural_key ( )
   else :
  _prefixes . value = prefix
      return CsrfTokenNode ( )
          return value
          self . _archive . close ( )
  def __init__ ( self , attrs = None , date_format = None , time_format = None ) :
  return Truncator ( value ) . words ( length , truncate = ' ...' )
               urlconf_repr = '<%s list>' % self . urlconf_name [ 0 ] . __class__ . __name__
              self . stdout . write ( 'examining files with the extensions: %s\n'  % get_text_list ( list ( self . extensions ) , 'and' ) )
              if number == 1 and self . allow_empty_first_page :
          return super ( Critical , self ) . __init__ ( CRITICAL , * args , ** kwargs )
              self . active_writers -= 1
  from django . core import validators
  for basedir in basedirs :
                          pk_value = self . get_queryset ( ) [ index ] . pk
          raise TemplateSyntaxError ( "%r takes two arguments" % bits [ 0 ] )
  def __init__ ( self , name , regex , next = None ) :
 logger . propagate = True
 def regex ( self ) :
      status_code = 500
  for d in object_list :
 v . __cause__ , v . __traceback__ = e , tb
 self . paginator = paginator
 return self . to + self . cc + self . bcc
          new_keys = [ self . make_key ( x , version = version ) for x in keys ]
 return os . path . join ( self . _dir , '' . join (  [ hashlib . md5 ( force_bytes ( key ) ) . hexdigest ( ) , self . cache_suffix ] ) )
              content_length = int ( META . get ( 'HTTP_CONTENT_LENGTH' , META . get ( 'CONTENT_LENGTH' , 0 ) ) )
              self . instance = instance
          return self . objects
   def error ( self , token , msg ) :
    def mail_admins ( subject , message , fail_silently = False , connection = None ,  html_message = None ) :
 method = kwargs . pop ( 'method' )
   with io . open ( potfile , 'w' , encoding = 'utf-8' ) as fp :
              urlconf_repr = repr ( self . urlconf_name )
 from django . core . serializers . base import SerializerDoesNotExist
  from functools import wraps , update_wrapper , WRAPPER_ASSIGNMENTS
    @ register . tag ( 'extends' )
 min = int ( m . group ( 'min' ) )
               return dec ( func )
  else :
 from django . utils import timezone , six
 return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
    def patch_vary_headers ( response , newheaders ) :
 if value in ( True , 'True' , '1' ) :
   from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
                  def __init__ ( self , takes_context , args , kwargs , target_var ) :
 self . merge = options . get ( 'merge' , False )
 self . body = body
 if data [ last : last + 1 ] == b'\n' :
 self . objects = [ ]
 factor -= 1
                        tt = ( 2037 , ) + tt [ 1 : ]
 del self [ 'Content-Transfer-Encoding' ]
   connection_params = { 'local_hostname' : DNS_NAME . get_fqdn ( ) }
  if not file_name :
   if self . can_import_settings :
              try :
    if isinstance ( f , models . FileField ) :
  else :
 block . context = context
    class Command ( BaseCommand ) :
  else :
      def get_urlconf ( default = None ) :
 msgs , errors , status = popen_wrapper ( args )
  def add_arguments ( self , parser ) :
 context_extras [ 'LANGUAGE_BIDI' ] = translation . get_language_bidi ( )
          return force_str ( "<%s: %s (%s)>" % (  self . __class__ . __name__ , self . name , self . content_type ) )
 from django . utils . datastructures import MultiValueDict
 response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
 c = config . pop ( '()' )
 if graph . nodes [ plan_node ] . replaces :
 return statements
  url_info = urlparse ( url )
 class_types = ( type , types . ClassType )
  except ValueError :
          return None
              self . stream . write ( "\n" )
   def compile_function_error ( self , token , e ) :
              if settings . DEBUG :
from __future__ import unicode_literals
    @ register . filter ( is_safe = False )
  if error_class is None :
       def __init__ ( self , key = None , sep = ':' , salt = None ) :
          return self . paginator . validate_number ( self . number + 1 )
 return self
          return ''
  except Exception :
 return result
 simple_email_re = re . compile ( r'^\S+@\S+\.\S+$' )
  super ( SimpleCookie , self ) . load ( rawdata )
    except ValueError :
 ch , escaped = next ( pattern_iter )
              digits . append ( '0' )
    @ register . filter ( is_safe = True , needs_autoescape = True )
 for character in name :
 next = index + len ( self . _boundary )
     class TemplateResponse ( SimpleTemplateResponse ) :
  except AttributeError :
          token_name = TOKEN_MAPPING [ self . token_type ]
                      match = RE_DATE . match ( value )
                  try :
 key = force_bytes ( settings . SECRET_KEY )
 return timezone . make_naive ( value , current_timezone )
      advance_iterator = next
 self . remove_potfiles ( )
 default = bytes_to_text ( default , self . encoding )
 if csrf_token :
     def emit_post_migrate_signal ( created_models , verbosity , interactive , db ) :
  new_value = [ ]
     class OrderedSet ( object ) :
   if initial is not None :
   from django . template . base import ( ContextPopException , InvalidTemplateLibrary ,  TemplateDoesNotExist , TemplateEncodingError , TemplateSyntaxError ,  VariableDoesNotExist )
  import datetime
 if self . interactive :
      def _media ( self ) :
  finally :
   def u ( self ) :
              raise DjangoUnicodeDecodeError ( s , * e . args )
 from django . forms . utils import flatatt , ErrorDict , ErrorList
 pass
   class date ( real_date ) :
      WindowsError = WindowsError
              pass
   os . rename ( old_file_name , new_file_name )
  location = kwargs . pop ( 'LOCATION' , '' )
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
    def handle_extensions ( extensions = ( 'html' , ) , ignored = ( 'py' , ) ) :
                          return self . __dispatch [ t ] [ funcname ] ( res , * args , ** kw )
   _format_cache [ cache_key ] = val
 if self . choices :
   def get_many ( self , keys , version = None ) :
 for candidate in glob . iglob ( os . path . join ( fixture_dir , fixture_name + '*' ) ) :
  except ( OverflowError , ValueError ) as exc :
          raise TemplateSyntaxError ( "%r received an invalid token: %r" %  ( bits [ 0 ] , remaining_bits [ 0 ] ) )
  elif 'public' in cc and 'private' in kwargs :
    def npgettext ( context , singular , plural , number ) :
                  msg = ( "%(model)s.Meta.%(opt)s cannot be a string. "  "Did you mean to type: ('%(value)s',)?" % {  'model' : new_class . __name__ ,  'opt' : opt ,  'value' : value ,  } )
   def has_key ( self , key , version = None ) :
 errors . extend ( new_errors )
  def __init__ ( self ) :
          context_extras [ 'debug' ] = True
   return result
 if deps :
          return iter ( self . dict . keys ( ) )
 for fname in filelist :
              self . message = message
   def render ( self , name , value , attrs = None , choices = ( ) ) :
              id_ = self . attrs [ 'id' ]
   def __repr__ ( self ) :
 raise NotImplementedError ( 'subclasses of Storage must provide a listdir() method' )
   form_class_attrs = {  'Meta' : Meta ,  'formfield_callback' : formfield_callback  }
 self . vals = [ ]
   def new_method_proxy ( func ) :
                              open ( init_path , "w" ) . close ( )
  for p in parts [ 1 : ] :
   else :
          results [ predicate ( item ) ] . append ( item )
   def tags_available ( self ) :
 self . filters = { }
 if ( isinstance ( args [ 0 ] , SafeData ) and  getattr ( _dec . _decorated_function , 'is_safe' , False ) ) :
  except Exception :
                  endbmatch = endblock_re . match ( t . contents )
 from django . db . backends . utils import typecast_timestamp
 from functools import partial
                          raise CommandError ( "You can only use --pks option with one model" )
   for app_config in reversed ( list ( apps . get_app_configs ( ) ) ) :
                          var_obj = Variable ( constant ) . resolve ( { } )
  bits . append ( force_text ( bit ) )
  kwargs = dict ( ( k , config [ k ] ) for k in config if valid_ident ( k ) )
          module = importlib . import_module ( serializer_module )
 self . clear_cdata_mode ( )
  elif autoescape :
  cc_delim_re = re . compile ( r'\s*,\s*' )
          return self . __class__ ( * self . dicts )
          if not f . editable or isinstance ( f , models . AutoField ) or f . name not in cleaned_data :
 self . render_value = render_value
   def add_post_render_callback ( self , callback ) :
  def is_ignored ( path , ignore_patterns ) :
              fail_message = 'changed'
 self . tag ( function_name , compile_func )
  except ( OSError , NotImplementedError , AttributeError ) :
  color_names = ( 'black' , 'red' , 'green' , 'yellow' , 'blue' , 'magenta' , 'cyan' , 'white' )
          meta = '<could not parse>'
 for field , messages in message . items ( ) :
  return response
 collect . extend ( _builtin_context_processors )
  from django . conf import settings
  def __init__ ( self , name , value , attrs , choice , index ) :
                              current = current ( )
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
   def open ( self ) :
 input_formats = formats . get_format_lazy ( 'DATE_INPUT_FORMATS' )
              return field in self . errors
 def cleaned_data ( self ) :
          self . limit_value = limit_value
 pass
 self . lookups = None
                  if six . PY3 :
          return t
     class SafeBytes ( bytes , SafeData ) :
          super ( RadioChoiceInput , self ) . __init__ ( * args , ** kwargs )
          try :
          if bits [ 2 ] == 'parsed' :
   def enter_command ( self , command , token ) :
   def delete_many ( self , keys , version = None ) :
      abspathu = abspath
 context = self . resolve_context ( self . context_data )
   def ipython ( self ) :
 return Signer ( b'django.http.cookies' + key , salt = salt )
               if opts . fields is None and opts . exclude is None :
 if t is not None :
                  handlers = config . get ( 'handlers' , EMPTY_DICT )
 if sent :
                  pass
   def I ( self ) :
      global _mtimes , _win
                          cursor . execute ( "INSERT INTO %s (cache_key, value, expires) "  "VALUES (%%s, %%s, %%s)" % table ,  [ key , b64encoded , exp ] )
   def end_serialization ( self ) :
  else :
                         if field . error_messages [ 'incomplete' ] not in errors :
 try :
 return "%s: %s%s%s" % ( obj , id , self . msg , hint )
   else :
              self . file = open ( self . name , mode or self . mode )
  for choice in self . field . choice_cache :
              if len ( app_labels ) == 1 :
   def appendlist ( self , key , value ) :
  time . sleep ( 1 )
          self . fed . append ( '&#%s;' % name )
              return 0
 num_args += 1
                  raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : val } ,  )
  if target_app_labels_only :
 from django . core . files . uploadhandler import StopUpload , SkipFile , StopFutureHandlers
                  qs = qs . order_by ( self . model . _meta . pk . name )
  finally :
 from django . utils . encoding import smart_text , force_str , force_text
 import gettext as gettext_module
 from django . utils . html import ( conditional_escape , escapejs ,  escape , urlize as _urlize , linebreaks , strip_tags , avoid_wrapping ,  remove_tags )
 def length_is ( value , arg ) :
   def __text_cast ( self ) :
 return value
                              if field in form . cleaned_data :
  if item_type == FIELD :
  Module_six_moves_urllib_response . _moved_attributes = _urllib_response_moved_attributes
      tagfind = re . compile ( '([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\s|/(?!>))*' )
   if not lib :
 from django . db import connections , DEFAULT_DB_ALIAS
              self . _start_relational_field ( field )
 for post_callback in self . _post_render_callbacks :
                   ch , escaped = next ( pattern_iter )
          return "<%s: %s>" % ( self . __class__ . __name__ , self )
 if path is None :
 def auto_id ( self ) :
 if hasattr ( file , 'mode' ) :
 parser . add_argument ( '--addrport' , default = '' ,  help = 'Port number or ipaddr:port to run the server on.' )
   def handle ( self , * args , ** options ) :
 self . tag ( function_name , compile_func )
 for model in app_models :
          return ''
 force_str = force_text
 return "|" . join ( prefix + re . escape ( c ) + suffix for c in choices . split ( ) )
  for __ in xrange ( fill_to - sep ) :
  self . stream . write ( '%s\n' % msg_data )
 raise NotImplementedError ( 'subclasses of Storage must provide a modified_time() method' )
   return nodes
 return FilterNode ( filter_expr , nodelist )
  except StopFutureHandlers :
     def get_valid_name ( self , name ) :
 try :
 graph = loader . graph
 return self
  except AttributeError :
                          namespaces [ namespace ] = ( p_pattern + prefix , sub_pattern )
     def Deserializer ( stream_or_string , ** options ) :
      def sort_dependencies ( app_list ) :
                  self . stdout . write ( " (no migrations)" , self . style . MIGRATE_FAILURE )
   RUN_RELOADER = True
  return self . _encoding
 return self . data . isoformat ( )
   def value_from_datadict ( self , data , files , name ) :
  elif not isinstance ( content , Message ) :
  else :
   @ cached_property
          """Close the cache connection"""
 break
              context . render_context . pop ( )
  try :
                  attrs [ 'max' ] = self . max_value
    _moved_attributes = [ ]
 object_data = model_to_dict ( instance , opts . fields , opts . exclude )
              self . _setup ( )
  except StandardError as e :
   super ( Command , self ) . handle ( 'app' , app_name , target , ** options )
                                  getcallargs ( current )
 from django . db . migrations . executor import MigrationExecutor
 encoding = encoding or settings . DEFAULT_CHARSET
   def dst ( self , dt ) :
    @ deconstructible
          BaseCache . __init__ ( self , params )
     except Exception as e :
   return ( TYPE , outdict , stream )
  else :
 plural = [ ]
  raise CommandError ( "%r is not a valid %s name. Please %s." %  ( name , app_or_project , message ) )
 import sys
   def handle ( self , app_or_project , name , target = None , ** options ) :
  if current_app and current_app in app_list :
   class ContentNotRenderedError ( Exception ) :
                      raise
 six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) ,  sys . exc_info ( ) [ 2 ] )
 if self . data . hour > 11 :
 if hasattr ( rel_model , 'natural_key' ) and rel_model != model :
  if y and m and d :
 def deleted_forms ( self ) :
 for type_ in reversed ( resultclass . mro ( ) ) :
 from django . utils . six . moves . urllib . parse import urlparse
 statements = connection . ops . sequence_reset_sql ( self . style , models )
                          raise ValueError (  "%s.process_template_response didn't return an "  "HttpResponse object. It returned None instead."  % ( middleware_method . __self__ . __class__ . __name__ ) )
  exclude = self . _get_validation_exclusions ( )
                      value = field . clean ( value )
    construct_instance_exclude = list ( exclude )
 if in_tag and token_string . startswith ( BLOCK_TAG_START ) :
   return data
                                  with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) :
 return re_camel_case . sub ( r' \1' , value ) . strip ( ) . lower ( )
 current_chunk = None
                          if name not in logging . _handlers :
 html [ 'day' ] = self . create_select ( name , self . day_field , value , day_val , choices , self . day_none_value )
    def pgettext ( context , message ) :
 from django . views . debug import ExceptionReporter , get_exception_reporter_filter
   gettext_noop = gettext_lazy = _ = gettext
 self . key_func = get_key_func ( params . get ( 'KEY_FUNCTION' , None ) )
  else :
              handler = self . get_handler ( * args , ** options )
 import re
 self . waiting_writers = 0
    @ register . tag ( 'filter' )
   fields = fields_for_model ( opts . model , opts . fields , opts . exclude ,  opts . widgets , formfield_callback ,  opts . localized_fields , opts . labels ,  opts . help_texts , opts . error_messages )
  self . _stream = LimitedStream ( self . environ [ 'wsgi.input' ] , content_length )
 opts = model . _meta
   save . alters_data = True
              doomed = [ k for ( i , k ) in enumerate ( self . _cache ) if i % self . _cull_frequency == 0 ]
 if len ( args ) != 2 :
              if isinstance ( end , unicode ) :
                  f . save_form_data ( instance , cleaned_data [ f . name ] )
  del frame
    class HttpResponseNotAllowed ( HttpResponse ) :
   def forbid_multi_line_headers ( name , val , encoding ) :
  else :
 for field in self . fields :
      def __init__ ( self , view_name , args , kwargs , asvar ) :
                  self . compile_messages ( locations )
 num = cursor . fetchone ( ) [ 0 ]
      if termios :
          ch , escaped = next ( input_iter )
   def eval ( self , context ) :
    def __getitem__ ( self , header ) :
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
              self . _caches . caches = { }
   return False
  except ImportError :
          if self . pos >= len ( self . tokens ) :
 if settings . DEBUG and request . META . get ( 'REMOTE_ADDR' ) in settings . INTERNAL_IPS :
 from django . test . utils import get_runner
     @ register . filter ( "timeuntil" , is_safe = False )
  Module_six_moves_urllib_error . _moved_attributes = _urllib_error_moved_attributes
          path_info = get_bytes_from_wsgi ( environ , 'PATH_INFO' , '' )
  for node in self . nodelist_empty :
              response = self . get_response ( request )
 if settings . USE_TZ and value is not None and timezone . is_naive ( value ) :
 while len ( line ) > max_width :
 self . labels = getattr ( options , 'labels' , None )
          return apps . get_model ( model_identifier )
 from django . utils import six
     if buffer_ is not None :
  def handle ( self , ** options ) :
              value = to_current_timezone ( value )
  from __future__ import unicode_literals
 return compile_function
 if key_func is not None :
    def setlist ( self , key , list_ ) :
                  if status != STATUS_OK :
    def do_ifequal ( parser , token , negate ) :
    def _itervalues ( self ) :
  else :
 from django . utils . functional import cached_property
    if self . load_initial_data :
              raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be iterated over.' )
  else :
              return LazyStream ( BoundaryIter ( self . _stream , self . _boundary ) )
  def to_python ( self , value ) :
  except OSError as err :
 from django . utils . six . moves . urllib . request import urlretrieve
