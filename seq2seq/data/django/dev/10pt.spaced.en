from threading import local into default name space .
import module warnings .
from django . conf import settings into default name space .
from django . core import signals into default name space .
from django . core . cache . backends . base import InvalidCacheBackendError , CacheKeyWarning and BaseCache into default name space .
from django . core . exceptions import ImproperlyConfigured into default name space .
from django . utils . deprecation import RemovedInDjango19Warning into default name space .
from django . utils . module_loading import import_string into default name space .
__all__ is an list containing 6 elements: ' get_cache ' , ' cache ' , ' DEFAULT_CACHE_ALIAS ' , ' InvalidCacheBackendError ' , ' CacheKeyWarning ' and ' BaseCache '
DEFAULT_CACHE_ALIAS is a string ' default ' .
if DEFAULT_CACHE_ALIAS is not contained in settings . CACHES ,
raise an exception ImproperlyConfigured with string " You must define a ' %s ' cache " as argument , with ' %s ' replaced with DEFAULT_CACHE_ALIAS converted into a string .
define the function get_cache with backend and dictionary pair of elements kwargs as arguments .
call the function warnings . warn with string " ' get_cache ' is deprecated in favor of ' caches ' . " , RemovedInDjango19Warning , and stacklevel set to 2 as arguments .
call the _create_cache with backend and dictionary kwargs as arguments , substitute the result for cache .
call the function signals . request_finished . connect with argument cache . close .
return cache .
define the function _create_cache with backend and dictionary pair of elements kwargs as arguments .
try ,
try ,
substitute value under the backend key of settings . CACHES dictionary for conf .
if KeyError exception is caught ,
try ,
call the function import_string with argument backend .
if ImportError , renamed to e , exception is caught ,
raise and exception InvalidCacheBackendError with string " Could not find backend ' %s ' : %s " as argument , replace ' %s ' with backend and e , respectively .
remove ' LOCATION ' key from kwargs dictionary and put it into location , or use an empty string if key doesnt exists .
substitute kwargs for params .
if not ,
call the function conf . copy , substitute it for params .
call the function params . update with argument kwargs .
remove ' BACKEND ' key from params dictionary and put it into backend .
remove ' LOCATION ' key from kwargs dictionary and put it into location , or use an empty string if key doesnt exists .
call the import_string with argument backend , substitute it for backend_cls .
if ImportError , renamed to e , is caught ,
aise and exception InvalidCacheBackendError with string " Could not find backend ' %s ' : %s " as argument , replace ' %s ' with backend and e , respectively .
evaluate the function backend_cls with location and params as arguments , return the result .
derive the class CacheHandler from the object base class .
define the __init__ method with argument self .
call the function local , substitute the result for self . _caches .
define the __getitem__ method with self and alias arguments .
try ,
return value under the alias key of self . _caches . caches dictionary .
except if AttributeError is caught ,
self . _caches . caches is an empty dictionary .
except if KeyError exception is caught ,
do nothing .
if alias is not contained in setting . CACHES ,
raise and exception InvalidCacheBackendError with string " Could not find config for ' %s ' in settings . CACHES " as argument , replace ' %s ' with alias .
call the function _create_cache with argument alias .
substitute cache for value under the alias key of self . _caches . caches dictionary .
reuturn cache .
define the method all with argument self .
get attribute ' caches ' from the self . _caches if exists , otherwise get an empty dictionary , call the values method on the return value , return it .
call the CacheHandler function , substitute the result for caches .
derive the class DefaultCacheProxy from the base class object .
define the method __getattr__ with self and name as arguments .
get attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary , return it .
define the method __setattr__ with self , name and value as arguments .
set the attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary to value , return it .
define the method __delattr__ with self and name as arguments .
delete the attribute name from the cache dictionary under the DEFAULT_CACHE_ALIAS key .
define the method __contains__ with self and key as arguments .
if key if contained in value under the DEFAULT_CACHE_ALIAS key of caches dictionary , return boolean True , otherwise return False .
define the method __eq__ with self and other as arguments .
if value under the DEFAULT_CACHE_ALIAS key of caches dictionary equals to other , return boolean True , otherwise return False .
define the method __ne__ with self and other as arguments .
if value under the DEFAULT_CACHE_ALIAS key of caches dictionary is not equal to other , return boolean True , otherwise return False .
call the DefaultCacheProxy function , substitute it for cache .
define the function close_caches with dictionary pair of elements kwargs as argument .
for every cache in return value of the function caches . all .
call the function cache . close .
call the function signals . request_finished . connect with argument close_caches .
from __future__ import unicode_literals into default name space .
import module time .
import module warnings .
from django . core . exceptions import ImproperlyConfigured and DjangoRuntimeWarning into default name space .
from django . utils . module_loading import import_string into default name space .
derive class InvalidCacheBackendError from the ImproperlyConfigured base class .
do nothing .
derive class CacheKeyWarning from the DjangoRuntimeWarning base class .
do nothing .
DEFAULT_TIMEOUT is a instance of the class object .
MEMCACHE_MAX_KEY_LENGTH is integer 250 .
define the function default_key_func with 3 arguments , key , key_prefix and version .
convert key_prefix , version and key into strings , concatenate them respectively , with character ' : ' as delimiter , return the result .
define the function get_key_func with argument key_func .
if key_func is not of None type ,
if key_function is callable object ,
return key_func .
if not ,
evaluate the function import_string with key_func as argument , return the result .
return default_key_func .
derive the class BaseCache from the object base class .
define the initialization function __init__ with self class instance and params as arguments .
call the params . get method with string ' TIMEOUT ' and integer 300 as arguments , use the string ' timeout ' and previous result as the arguments for the call to the params . get method , substitute the result for timeout .
if timeout is not None ,
try ,
convert timeout into an integer .
if ValueError or TypeError exceptions occurred ,
timeout is integer 300 .
substitute timeout for self . default_timeout .
call the params . get with string ' OPTIONS ' and empty dictionary as arguments , substitute the result for options .
call the options . get method with string ' MAX_ENTRIES ' and integer 300 as arguments , use the string ' max_entries ' and previous result as the arguments for the call to the params . get method , substitute the result for max_entries .
try ,
convert max_entries into a string , substitute it for self . _max_entries .
if ValueError or TypeError exceptions occurred ,
self . _max_entries is integer 300 .
call the options . get method with string ' CULL_FREQUENCY ' and integer 3 as arguments , use the string ' cull_frequency ' and previous result as the arguments for the call to the params . get method , substitute the result for cull_frequency .
try ,
convert cull_frequency into an integer and substitute it for self . _cull_frequency .
if ValueError or TypeError exceptions occurred ,
self . _cull_frequency is integer 3 .
call the params . get method with string ' KEY_PREFIX ' and an empty string as arguments , substitute the result for self . _key_prefix .
call the params . get method wit string ' VERSION ' and integer 1 as arguments , substitute the result for self . version .
call the method params . get with 2 arguments , string ' KEY_FUNCTION ' and None , use the result as the argument for the call to the function get_key_func , substitute the result for the self . key_func .
define the method get_backend_timeout with self class instance and timeout set to DEFAULT_TIMEOUT as arguments ,
if timeout equals to DEFAULT_TIMEOUT ,
substitute self . default_timeout for timeout .
else if timeout equals to integer 0 ,
timeout is a integer -1 .
if timeouts is None return None , otherwise return the sum of function time . time return value and timeout .
define the function make_key with self class instance , key and version set to None as arguments .
if version is None ,
substitute self . version for version .
call the method self . key_function with key , self . key_prefix and version as arguments , substitute the result for new_key .
return new_key .
define the method add with 5 arguments , self , key , value , timeout defaulting to DEFAULT_TIMEOUT and version defaulting to None .
docsring
raise an exception of class NotImplementedError with string ' subclasses of BaseCache must provide an add ( ) method ' as argument .
define the method get with 4 arguments , self , key , default set to None and version set to None .
raise an exception of class NotImplementedError , with string ' subclasses of BaseCache must provide a get ( ) method ' as argument .
define the method set with 5 arguments , self , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
raise an exception of class NotImplementedError , with string ' subclasses of BaseCache must provide a set ( ) method ' as argument .
define delete method with self class instance , key and version set to None , as arguments .
raise an exception of class NotImplementedError , with string ' subclasses of BaseCache must provide a delete ( ) method ' as argument .
define the get_many method with self class instance , keys and version set to None as arguments .
d is an empty dictionary .
for every k in keys ,
call the self . get method with k and version set to version as arguments , substitute the result for val .
if val is not None ,
substitute val for value under the k key of dictionary d .
return d .
define method has_key with self class instance , key and version set to None as arguments .
call the self . get method with key and version set to version as arguments , return it if it is not None .
define the method incr with 4 arguments , self class instance , key , delta defaulting to integer 1 and version defaulting to None .
call the method self . get with key and version set to version as arguments , substitute the result for value .
if value is None ,
raise an exception of class ValueError , with string " Key ' %s ' not found " as argument , where ' %s ' is substituted for key .
add value and delta together , substitute the result for new_value .
call the self . set method with key , new_value and version set to version as arguments .
return new_value .
define the method decr with arguments self , key , delta defaulting to integer 1 and version defaulting to None .
call the self . incr method with key , negative delta and version set to version as arguments .
define the private method __contains__ with self class instance and key as arguments .
evaluate the self . has_key method with key as argument , return the result .
define the method set_many with arguments , self , data , timeout defaulting to DEFAULT_TIMEOUT and version set to None .
for every key and value in data . items method return value ,
call the method self . set with arguments key , value , timeout set to timeout , version set to version .
define the method delete_many with arguments self , keys and version defaulting to None .
for every key in keys ,
call the delete method with key and version set to version as arguments .
define the method clear with self class instance as the argument ,
raise an exception NotImplementedError with string ' subclasses of BaseCache must provide a clear ( ) method ' as argument .
define the method validate_key with self class instance and key as arguments .
if length of key is greater than MEMCACHE_MAX_KEY_LENGTH ,
substitute ' %s ' in string ' Cache key will cause errors if used with memcached: %s ( longer than %s ) ' with key , and MEMCACHE_MAX_KEY_LENGTH , call the function warnings . warn with previous string and CacheKeyWarning as arguments .
for every char in key ,
if ascii value of char is smaller than integer 33 or is equal to integer 127 ,
substitute ' %r ' in string ' Cache key contains characters that will cause errors if used with memcached: %r ' with key , call the function warnings . warn with previous string and CacheKeyWarning as arguments .
define the method incr_version with 4 arguments , self , key , delta defaulting to integer 1 and version defaulting to None .
if version is None ,
substitute self . version for version .
call the self . get method with arguments key and version set to version , substitute the result for value .
if value is None ,
raise an exception of the class ValueError with string " Key ' %s ' not found " as argument , ' %s ' is substituted for key .
call the method self . set with key , value , version incremented by delta , as arguments .
call the self . delete method with key and version set to version as arguments .
sum version and delta together , return the result .
define the method decr_version with 4 arguments , self , key , delta defaulting to integer 1 and version defaulting to None .
call the method self . incr_version with key , negative delta and version as arguments .
define the close method with 2 arguments , self and dictionary of argument pairs kwargs .
docstirng
do nothing .
import module base64 .
from datetime import datetime into default name space .
try ,
from django . utils . six . moves import cPickle as pickle , into default namespace .
if ImportError exception occurred ,
import pickle .
from django . conf import settings into default name space .
from django . core . cache . backends . base import BaseCache and DEFAULT_TIMEOUT into default name space .
from django . db import connections , transaction , router and DatabaseError into default name space .
from django . db . backends . utils import typecast_timestamp into default name space .
from django . utils import timezone and six into default name space .
from django . utils . encoding import force_bytes into default name space .
derive class Options from the base class object .
define the initialization method __init__ with self class instance and table as arguments .
substitute table for self . db_table .
self . app_label is a string ' django_cache ' .
self . model_name is a string ' cacheentry ' .
self . verbose_name is a string ' cache entry ' .
self . verbose_name_plural is a string ' cache entries ' .
self . object_name is a string ' CacheEntry ' .
self . abstract is boolean False .
self . managed is boolean True .
self . proxy is boolean False .
derive class BaseDatabaseCache from BaseCache base class .
define the initialization method __init__ with self , table and params as arguments .
call the BaseCache . __init__ method with self class instance and params as the arguments .
substitute table for self . _table .
derive CacheEntry class from the object base class .
_meta is class Options class instance initialized with table argument .
substitute CacheEntry for self . cache_model_class .
derive DatabaseCache from the BaseDatabaseCache base class .
define the method get with 4 arguments , self class instance , key , default set to None and version set to None .
call the method self . make_key Whit key and version set to version as arguments , substitute the result for key .
call the method self . validate_key with argument key .
call the method router . db_for_read with self . cache_model_class as argument , substitute the result for db .
call the ops . quote_name method with argument self . _table on the value under the db key of connections dictionary , substitute the result for table .
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
call the method cursor . execute with string " SELECT cache_key , value , expires FROM %s WHERE cache_key = %%s " as argument , substitute the ' %s ' with table and list containing key , respectively .
call the cursor . fetchone method , substitute the result for row .
if row is None ,
return default .
call the timezone . now function , substitute the result for now .
substitute third element of row list for expires .
if features . needs_datetime_string_cast field of the object represented stored under the db key of connections dictionary is true , and expires is not an instance of datetime .
convert expires to a string , use it as argument for the call to the function typecast_timestamp , substitute the result for expires .
if expires is lesser than now ,
call the method router . db_for_write with argument self . cache_model_class , substitute the result for db .
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
call the method cursor . execute with string " DELETE FROM %s WHERE cache_key = %%s " as argument , substitute the ' %s ' with table and list containing key , respectively .
return default .
call the method ops . process_clob with second element of row as argument , on the object under the db key of connections dictionary , substitute the result for value .
call the function force_bytes with argument value , use the result as an argument for the call to the method base64 . b64decode , use the result as the argument for the function call to the pickle . loads , return the result .
define the method set with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
call the method self . make_key with key and version set to version as arguments , substitute the result for key .
call the method self . validate_key with key as argument .
call the method self . _base_set with string ' set ' , key , value and timeout as arguments .
define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
call the method self . make_key with key and version set to version as arguments , substitute the result for key .
call the method self . validate_key with key as argument .
call the method self . _base_set with string ' add ' , key , value and timeout as arguments , return the result .
define the protected method _base_set with 4 arguments , self class instance , key , value and timeout set to DEFAULT_TIMEOUT .
call the method self . get_backend_timeout with argument timeout , substitute the result for timeout .
call the method router . db_for_write with argument self . cache_model_class , substitute the result for db .
call the ops . quote_name method with argument self . _table on the object under the db key of connections dictionary , substitute the result for table .
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
call the method cursor . execute with string " SELECT COUNT ( * ) FROM %s " as argument , substitute the ' %s ' with table .
fetch one record from the database cursor points at , substitute the first element of return value for num .
call the timezone . now function , substitute the result for now .
call the function now . replace with microseconds set to integer 0 , substitute the result for now .
if timeout is None ,
substitute the datetime . max for exp .
otherwise is settings . USE_TI is true ,
call the function datetime . utcfromtimestamp with argument timeout , substitute it for exp .
if not ,
call the function datetime . fromtimestamp with argument timeout , substitute it for exp .
call the exp . replace with microsecond set to integer 0 , substitute the result for exp .
if num is greater than self . _max_entries ,
call the method self . _cull with db , cursor and now as arguments .
call the method pickle . dumps with value and pickle . HIGHEST_PROTOCOL as arguments , substitute it for pickled .
call the method base64 . b64encode with argument pickled , substitute the result for b64encoded .
if six . PY3 is true ,
call the method b64encoded . decode with string ' latin1 ' as argument , substitute the result for b64encoded .
try ,
with return value of the function transaction . atomic with using set to db as arguments , perform the following ,
call the method cursor . execute with string " SELECT cache_key , expires FROM %s WHERE cache_key = %%s " as argument , substitute the ' %s ' with table and list containing key , respectively .
fetch one entry from the database that cursor points at , substitute it for the result .
if result is true ,
substitute the second element of result for current_expires .
if features . needs_datetime_string_cast field of object under the db key of connections dictionary is true and current_expires is not an instance of datetime object .
convert current_expires to a string , use it as the argument for the call to the function typecast_timestamp , substitute the result for current_expires .
on the object under the db key of connections dictionary call the method ops . value_to_db_datetime with argument exp , substitute the result for the exp .
if mode equals to string ' add ' and current_expires is lesser than now , or mode equals to string ' set ' , and result is true ,
call the method cursor . execute with string " UPDATE %s SET value = %%s , expires = %%s WHERE cache_key = %%s " as argument , substitute the ' %s ' with table and 3 elements of a list: b64encoded , exp and key , respectively .
if not ,
call the method cursor . execute with string " INSERT INTO %s ( cache_key , value , expires ) VALUES ( %%s , %%s , %%s ) " , substitute the ' %s ' with table and 3 elements of a list: b64encoded , exp and key , respectively .
if DatabaseError exception is caught ,
return boolean False .
if not ,
return boolean True .
define the method delete with self class instance , key and version set to None as arguments .
call the method self . make_key with key and version set to version as arguments , substitute the result for key .
call the method self . validate_key with argument key .
call the method router . db_for_write with argument self . cache_model_class , substitute the result for db .
call the ops . quote_name method with argument self . _table on the object under the db key of connections dictionary , substitute the result for table .
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
call the method cursor . execute with string " DELETE FROM %s WHERE cache_key = %%s " as argument , substitute the ' %s ' with table and list containing key , respectively .
define the method has_key with self class instance , key and version defaulting to None as arguments .
call the self . make_key with key and version set to version as arguments , substitute the result for key .
call the self . validate_key method with argument key .
call the method router . db_for_write with argument self . cache_model_class , substitute the result for db .
call the ops . quote_name method with argument self . _table on the object under the db key of connections dictionary , substitute the result for table .
if settings . USE_TZ is true ,
call the function datetime . utcnow , substitute the result for now .
if not ,
call the function datetime . now , substitute the result to now .
call the method now . replace with the argument microsecond set to integer 0 , substitute the result for now .
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
call the method cursor . execute with string " SELECT cache_key FROM %s WHERE cache_key = %%s and expires > %%s " as argument , substitute the ' %s ' with table and list containing return value of the method call ops . value_to_db_datetime with argument now on the object under the db key of connections dictionary , respectively .
if exists return next entry from the database that cursor points at .
define the protected method _cull with self class instance , db , cursor and now as arguments .
if self . _cull_frequency equals to integer 0 .
call the self . clear method .
if not ,
call the method now . replace with argument tzinfo set to None , substitute it for now .
call the ops . quote_name method with argument self . _table on the object under the db key of connections dictionary , substitute the result for table .
call the method cursor . execute with string " DELETE FROM %s WHERE expires < %%s " as argument , substitute the ' %s ' with table and list containing return value of the method call ops . value_to_db_datetime with argument now on the object under the db key of connections dictionary , respectively .
call the method cursor . execute with string " SELECT COUNT ( * ) FROM %s " as argument , substitute the ' %s ' with table .
fetch next entry for the database that cursor points into , substitute first element of it for num .
if num is greater than self . _max_entries ,
divide num by self . _cull_frequency , floor the result and substitute it for cull_num .
evaluate the method connections [ db ] . ops . cache_key_culling_sql , evaluate the result by table modulus , call the method cursor . execute , with previous result and list containing cull_num , respectively as arguments .
call the method cursor . execute with string " DELETE FROM %s WHERE cache_key < %%s " as argument , substitute the ' %s ' with table and list containing first element of cursor . fetchone method , respectively .
define the method clear with argument self .
call the method router . db_for_write with argument self . cache_model_class , substitute the result for db .
call the ops . quote_name method with argument self . _table on the object under the db key of connections dictionary , substitute the result for table .
call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,
call the method cursor . execute with string " DELETE FROM %s " as argument , substitute the ' %s ' with table .
derive the class CacheClass from the DatabaseCache base class .
do nothing .
from django . core . cache . backends . base import BaseCache and DEFAULT_TIMEOUT into default name space .
derive the class DummyCache from the base class BaseCache .
define initialization method __init__ with 4 arguments: self , host , list of arguments args and dictionary of arguments kwargs .
call the BaseCache initialization method __init__ with 3 arguments self , list of arguments args and dictionary of arguments kwargs .
define the method add with 5 arguments: self , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
call the method self . make_key with key and version set to version as arguments , substitute it for key .
call the method self . validate_key with argument key .
return boolean True .
define the method get with 4 arguments: self , key , default set to None and version set to None .
call the method self . make_key with key and version set to version as arguments , substitute it for key .
call the method self . validate_key with argument key .
return default .
define the method set with 5 arguments: self , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
call the method self . make_key with key and version set to version as arguments , substitute it for key .
call the method self . validate_key with argument key .
define the method delete with 3 arguments: self , key , and version set to None .
call the method self . make_key with key and version set to version as arguments , substitute it for key .
call the method self . validate_key with argument key .
define the method get_many with 3 arguments: self , keys , and version set to None .
return an empty dictionary .
define the method has_key with 3 arguments: self , key , and version set to None .
call the method self . make_key with key and version set to version as arguments , substitute it for key .
call the method self . validate_key with argument key .
return boolean False .
define the method set_many with 4 arguments: self , data , timeout set to DEFAULT_TIMEOUT and version set to None .
do nothing
define the method delete_many with 3 arguments: self , keys , and version set to None .
do nothing .
define the method clear with argument self .
do nothing .
derive the class CacheClass from the DummyCache base class .
do nothing .
import module errno .
import module glob .
import module hashlib .
import module io .
import module os .
import module random .
import module tempfile .
import module time .
import module zlib .
from django . core . cache . backends . base import BaseCache and DEFAULT_TIMEOUT into default name space .
from django . core . files . move import file_move_safe into default name space .
from django . utils . encoding import force_bytes into default name space .
try ,
from django . utils . six . moves import cPickle as pickle into default name space .
if ImportError exception is caught ,
import pickle .
derive the class FileBasedCache from BaseCache base class .
cache_suffix is a string ' . djcache ' .
define the initialization method __init__ with arguments: self class instance , dir and params .
call method __init__ with argument params from the base class of the FileBaseCache .
get absolute directory path of dir , substitute it for self . _dir .
call the self . _createdir method .
define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
evaluate method self . has_key with key and version as arguments , if the result is true ,
return boolean False .
call the method self . set with key , value , timeout and version as arguments .
return boolean True .
define the method get with 5 arguments , self class instance , key , default set to None and version set to None .
call the function self . _key_to_file with key and version as arguments , substitute it for fname .
if fname file path exists ,
try ,
with return value of the function io . open with fname and string ' rb ' as arguments , named as f ,
evaluate self . _is_expired method with f as argument , if the result is false ,
call f . read function , use the result as the argument for zlib . decompress function call , call the pickle . loads function with the previous result as argument , return the result .
if IOError , renamed to e , exception is caught ,
if e . errno equals to errno . ENOENT ,
do nothing .
return default .
define the method set with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
call the self . _createdir method .
call the function self . _key_to_file with key and version as arguments , substitute it for fname .
call the method self . _cull .
call the method tempfile . mkstemp with dir set to self . _dir , substitute result for fd and tmp_path , respectively .
renamed is boolean False .
try ,
with return value of the function io . open with fname and string ' rb ' as arguments , named as f ,
call the method self . get_backend_timeout with argument timeout , substitute it for expiry .
call the function pickle . dumps with expiry and integer -1 as arguments , use the result as the argument for the call to f . write function .
call the function pickle . dumps with argument value , use the result and integer -1 as arguments for the call to the function zlib . compress , use the result as an argument for the call to the f . write method .
call the function file_move_safe with tmp_path , fname , allow_overwrite set to boolean True as arguments .
renamed is boolean True .
finally perform ,
if renamed is boolean False ,
remove file tmp_path .
define the method delete with self class instance , key and version defaulting to None as arguments .
call the function self . _key_to_file with key and version as arguments , use the result as an argument for the call to the self . _delete method .
define the method _delete with self and fname as arguments .
if fname doesnt start with self . _dir and fname file path doesnt exists ,
return nothing .
try ,
call the function os . remove with argument fname .
if exception OSError , renamed to e , is caught ,
if e . errno does not equals to errno . ENOENT ,
raise an exception .
define the method has_key with self class instance , key and version defaulting to None as arguments .
call the function self . _key_to_file with key and version as arguments , substitute it for fname .
if fname file path exists ,
with call to the io . open function with fname and string ' rb ' as arguments , renamed to f ,
call the method self . _is_expired with argument f , invert the boolean result and return it .
return boolean False .
define the method _cull with argument self .
call the self . _list_cache_files method , substitute the result for filelist .
num_entries is length of filelist .
if num_entries is lesser than self . _max_entries ,
return nothing .
if self . _cull_frequency equals to integer 0 .
evaluate self . clear method and return the result .
divide num_entries by self . _cull_frequency , convert the result to an integer , call the random . sample function with filelist and previous result as arguments , substitute the result for filelist .
for every fname in filelist ,
call self . _delete method with argument fname .
define the method _createdir with argument self .
if self . _dir path doesnt exists ,
try ,
call os . makedirs function with self . _dir and hexadecimal 0o700 as arguments .
if OSError , renamed to e , exception is caught ,
if e . errno is not equal to errno . EEXIST ,
raise an EnvironmentError exception with string " Cache directory ' %s ' does not exist and could not be created " as argument , substitute ' %s ' with self . _dir converted to a string .
define the method key_to_file with self class instance , key and version defaulting to None as arguments .
call the method self . make_key with key and version set to version as arguments , substitute the result for key .
call the method self . validate_key with argument key .
join into a string: md5 hash sum of force_bytes ( key ) and self . cache_suffix , compose root file path out of self . _dir and previous result , return it .
define the method clear with argument self .
if self . _dir file path does not exists ,
return nothing .
if fname is contained in self . _list_cache_files method return value ,
call the self . _delete method with argument fname .
define the method _is_expired with self and f as arguments .
call the function pickle . load with argument f , substitute the result for exp .
if exp is not None and exp is lesser than return value of the function time . time ,
call close method on a file stream .
call the self . _delete method with argument f . name .
return boolean True .
return boolean False .
define the method _list_cache_files with argument self .
if self . _dir file path does not exists ,
return an empty list .
for every fname in return value of the glob . glob1 function called with 2 arguments: self . _dir and , self . cache_suffix converted to a string , appended to the character ' * ' , call os . path . join with self . _dir and fname as arguments , filelist is a list containing all the previous results .
return filelist .
derive the class CacheClass from the base class FileBasedCache .
do nothing .
import module time .
try ,
from django . utils . six . moves import cPickle as pickle into default name space .
if ImportError exception is caught ,
import pickle .
from django . core . cache . backends . base import BaseCache and DEFAULT_TIMEOUT into default name space .
from django . utils . synch import RWLock into default name space .
__caches is an empty dictionary .
__expire_info is an empty dictionary .
__locks is an empty dictionary .
derive the class LocMemCache from the base class BaseCache .
define the initialization method __init__ with 3 arguments: self , name and params .
call the __init__ method with self and params arguments from the base class BaseCache .
call the _caches . setdefault method with name and empty dictionary as arguments , substitute the result for self_cache .
call the _expire_info . setdefault method with name and empty dictionary as arguments , substitute the result for self_expire_info .
call the _lock . setdefault method with name and RWLock ( ) as arguments , substitute the result for self_lock .
define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
call the method self . make_key with key and version set to version as arguments , substitute the result for key .
call the method self . validate_key with argument key .
call the pickle . dumps function with value and pickle . HIGHEST_PROTOCOL as arguments .
call the self . _lock . writer method , with the result perform the following ,
evaluate self . _has_expired with argument key , if the result is True ,
call the method self . _set with key , pickled and timeout as arguments .
return boolean True .
return boolean False .
define the method get with 4 arguments , self class instance , key , default set to None and version set to None .
call the method self . make_key with key and version set to version as arguments , substitute the result for key .
call the method self . validate_key with argument key .
substitute None for pickled .
call the self . _lock . reader method , with the result perform the following ,
evaluate the method self . _has_expired with argument key , if it as False ,
substitute value under the key key of self . _cache dictionary for pickled .
if pickled is not None .
try ,
evaluate pickle . loads with argument pickled , return the result .
if pickle . PickleError exception is caught ,
return default .
call the self . _lock . writer method , with the result perform the following ,
try ,
delete the value under key key of self . _cache dictionary .
delete the value under key key of self . _expire_info .
if KeyError exception is caught ,
do nothing .
return default .
define the method _set with 4 arguments , self class instance , key , value and timeout set to DEFAULT_TIMEOUT .
if length of self . _cache is greater or equal to self . _max_entries ,
call the self . _cull method .
substitute value for the value under the key key of self . _cache dictionary .
call the self . get_backend_timeout with argument timeout , substitute it for the value under the key key of self . _expire_info dictionary .
define the method get with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
call the method self . make_key with key and version set to version as arguments , substitute the result for key .
call the method self . validate_key with argument key .
call the function pickle . dumps with value and pickle . HIGHEST_PROTOCOL as the arguments , substitute the result for pickled .
call the self . _lock . writer method , with the result perform the following ,
call the method self . _set with key , pickled and timeout as arguments .
define the method incr with self class instance , key , delta set to integer 1 and version set to None , as arguments .
call the self . get method with key and version set to version as arguments , substitute the result for value .
if value is None ,
raise an ValueError exception with string " Key ' %s ' not found " as argument , substitute ' %s ' with key converted into a string .
new_value is a sum of value and delta .
call the method self . make_key with key and version set to version as arguments , substitute the result for key .
call the function pickle . dumps with value and pickle . HIGHEST_PROTOCOL as the arguments , substitute the result for pickled .
call the self . _lock . writer method , with the result perform the following ,
substitute pickled for value under the key key of self . _cache dictionary .
return new_value .
define the method has_key with self class instance , key and version defaulting to None as arguments .
call the method self . make_key with key and version set to version as arguments , substitute the result for key .
call the method self . validate_key with argument key .
call the self . _lock . reader method , with the result perform the following ,
if call to the _has_expired method with argument key evaluates to boolean False ,
return boolean True .
call the self . _lock . writer method , with the result perform the following ,
try ,
delete the value under the key key of self . _cache dictionary .
delete the value under the key key of self . _expire_info dictionary .
if KeyError exception is caught ,
do nothing .
return boolean False .
define the method _has_expired with self and key as arguments .
call the method self . _expire_info . get with key and integer -1 as arguments , substitute the result for exp .
if exp is None or exp is greater than the return value of the call to the function time . time ,
return boolean False .
return boolean True .
define the method _cull with argument self .
if self . _cull_frequency equals to integer 0 .
call self . clear method .
if not ,
for every i and k in enumerated values of self . _cache , if i is divisible by self . _cull_frequency , append k to doomed list .
for every k in doomed ,
call the method self . _delete with argument k .
define the method _delete with arguments self and key .
try ,
delete the value under the key key of self . _cache dictionary .
if KeyError exception is caught ,
do nothing .
try ,
delete the value under the key key of the self . _expire_info dictionary .
if KeyError exception is caught ,
do nothing .
define the method delete with self class instance , key and version defaulting to None as arguments .
call the method self . make_key with key and version set to version as arguments , substitute the result for key .
call the method self . validate_key with argument key .
call the self . _lock . writer method , with the result perform the following ,
call the method self . _delete with argument key .
define the method clear with argument self .
call the method self . _cache . clear .
call the method self . _expire_info . clear .
derive the class CacheClass from the base class LocMemCache .
do nothing .
import module time .
import module pickle .
from django . core . cache . backends . base import BaseCache and DEFAULT_TIMEOUT into default name space .
from django . utils import six into default name space .
from django . utils . deprecation import RenameMethodsBase and RemovedInDjango19Warning into default name space .
from django . utils . encoding import force_str into default name space .
from django . utils . functional import cached_property into default name space .
derive the class BaseMemcachedCacheMethods from RenameMethodsBase the base class .
renamed methods is a tuple containing 3 elements: ' _get_memcache_timeout ' , ' get_backend_timeout ' and RemovedInDjango19Warning .
derive the class BaseMemcachedCache from base class BaseMemcachedCacheMethods and BaseCache .
define the method __init__ with , self , server , params , library , value_not_found_exception as arguments .
call the initialization method with argument params for the base class of the BaseMemcachedCache class .
if server is an instance of six . string_types ,
split server with ' ; ' as delimiter , substitute the result for self . _servers .
if not ,
substitute server for self . _servers .
substitute value_not_found_exception for self . LibraryValueNotFoundException .
substitute library for self . _lib .
call the params . get function with string ' OPTIONS ' and None as arguments , substitute the result for self . _options .
property decorator ,
define the method _cache with argument self .
if self object has an attribute ' _client ' ,
call the self . _lib . Client with argument self . _servers , substitute the result for self . _client .
return self . _client .
define the method get_backend_timeout with self and timeout set to DEFAULT_TIMEOUT as arguments .
if timeout equals to DEFAULT_TIMEOUT ,
substitute self . default_timeout for timeout .
if timeout is None ,
return integer 0 .
else if timeout converted into an integer equals to integer 0 ,
timeout is a integer -1 .
if timeout is greater than integer 2592000 ,
convert return value of the function time . time to an integer , increment timeout by it .
convert timeout into an integer , return it .
define the method make_key with self class instance , key and version defaulting to None as arguments .
call the method make_key with arguments key and version from the base class of the class BaseMemcachedCache , use it as an argument for the call to the function force_str , return the result .
define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
call the method self . make_key with key and version set to version as arguments , substitute the result for key .
call the method self . _cache . add with key , value , self . get_backend_timeout ( timeout ) as arguments .
define the method get with 5 arguments , self class instance , key , default set to None and version set to None .
call the method self . make_key with key and version set to version as arguments , substitute the result for key .
call the self . _cache . get method with argument key , substitute the result for val .
if val is None ,
return default .
return val .
define the method set with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None .
call the method self . make_key with key and version set to version as arguments , substitute the result for key .
call the method self . _cache . set with key , value , self . get_backend_timeout ( timeout ) as arguments .
define the method delete with self , key and version set to None as arguments .
call the method self . make_key with key and version set to version as arguments , substitute the result for key .
call the method self . _cache . delete with argument key .
define the method get_many with self class instance , keys and version defaulting to None as arguments .
define the method get_many with 3 arguments , self class instance , keys and version set to None .
call the method self . _cache . get_multi with argument new_keys , substitute the result for ret .
if ret is true .
_ is an empty dictionary .
zip together new_keys and keys , convert it to dictionary , assign it to m .
for every k and v in return value of the ret . items function ,
substitute v for value under the k-th element of m key of _ dictionary .
substitute _ for ret .
return ret .
define the method close with self and dictionary pairs of elements kwargs .
call the method self . _cache . disconnect_all .
define the method incr with self , key , delta defaulting to integer 1 and version defaulting to None as arguments .
call the method self . make_key with key and version set to version as arguments , substitute the result for key .
if delta is smaller than integer 0 ,
evaluate the method self . _cache . decr with key and negative delta as arguments , return the result .
try ,
call the method self . _cache . incr with key and delta as arguments , substitute the result for val .
if self . LibraryValueNotFoundException exception is caught ,
val is None .
if val is None ,
raise an ValueError exception with string " Key ' %s ' not found " as argument , substitute ' %s ' for key .
return val .
define the method decr with self , key , delta defaulting to integer 1 and version defaulting to None as arguments .
call the method self . make_key with key and version set to version as arguments , substitute the result for key .
if delta is smaller than integer 0 .
evaluate the method self . _cache . incr with key and negative delta as arguments , return the result .
try ,
call the method self . _cache . decr with key and delta as arguments , substitute the result for val .
if self . LibraryValueNotFoundException exception is caught ,
val is None .
if val is None ,
raise an ValueError exception with string " Key ' %s ' not found " as argument , substitute ' %s ' for key .
return val .
define the method set_many with self , data , timeout set to DEFAULT_TIMEOUT and version set to None as arguments .
safe_data is an empty dictionary .
for every key and value in data . items function return value ,
call the method self . make_key with key and version set to version as arguments , substitute the result for key .
substitute value for value under the key key of safe_data dictionary .
call the method self . _cache . set_multi with safe_data , self . get_backend_timeout ( timeout ) as arguments .
define the function delete_many with self , keys and version set to None as arguments .
l is lambda function with argument x , that calls the method self . make_key with x and version set to version as arguments .
call the method self_cache . delete_multi with argument list containing keys mapped through function l .
define the method clear with argument self .
call the method self . _cache_flush_all .
derive the class MemcachedCache from the BaseMemcachedCache base class .
define the method __init__ with argument self , server and params .
import memcache .
call method __init__ from the base class of the class MemcachedCache with arguments: server , params , library set to memcache and value_not_found_exception set to ValueError .
property decorator ,
define the method _cache with self class instance as an argument .
if attribute ' _client ' of the self object is None ,
call the method self . _lib . Client with self . _servers and pickleProtocol set to pickle . HIGHEST_PROTOCOL as arguments , substitute the result for self . _client .
return self . _client .
derive the class PyLibMCCache from BaseMemcachedCache base class .
define the method __init__ with self , server and params as arguments .
import pylibmc .
call method __init__ from the base class of the class PyLibMCCache with arguments: server , params , library set to pylibmc and value_not_found_exception set to pylibmc . NotFound .
decorator cached_property ,
define the method _cache with argument self .
call the method self . _lib . Client with argument self . _servers .
if self . _options exists ,
substitute self . _options for client . behaviors .
return client .
from __future__ import unicode_literals into default name space .
import module hashlib .
from django . utils . encoding import force_bytes into default name space .
from django . utils . http import urlquote into default name space .
TEMPLATE_FRAGMENT_KEY_TEMPLATE is a string ' template . cache . %s . %s ' .
define the function make_template_fragment_key with fragment_name and vary_on defaulting to None as arguments .
if vary_on is None ,
vary_on is an empty tuple .
call the function urlquote with argument var for every var in vary_on , join the results into a string separated by ' : ' , substitute it for key .
call the hashlib . md5 fuction with force_bytes ( key ) as argument .
substitute ' %s ' in TEMPLATE_FRAGMENT_KEY_TEMPLATE string with fragment_name and args . hexdigest ( ) , respectively , return the result .
from __future__ import unicode_literals into default name space .
from . messages import CheckMessage , Debug , Info , Warning , Error , Critical , DEBUG , INFO , WARNING , ERROR and CRITICAL into default name space .
from . registry import register , run_checks , tag_exists and Tags into default name space .
import module django . core . checks . compatibility . django_1_6_0 .
import module django . core . checks . compatibility . django_1_7_0 .
import module django . core . checks . model_checks .
__all__ is a list containing next strings , ' CheckMessage ' , ' Debug ' , ' Info ' , ' Warning ' , ' Error ' , ' Critical ' ,
from __future__ import unicode_literals into default name space .
from django . apps import apps into default name space .
from . . import Warning , register and Tags into default name space .
decorator register with argument Tags . compatibility .
define the function check_1_6_compatibility with argument kwargs dictionary .
errors is an empty list
call the function _check_test_runner with dictionary kwargs as argument , use the result as an argument for the call to the function errors . extend .
call the function _check_boolean_field_default_value with dictionary kwargs as argument , use the result as an argument for the call to the function errors . extend .
return errors .
define the function _check_test_runner with app_config set to None and kwargs dictionary as arguments .
from django . conf import settings into default name space .
weight is an integer 0 .
if call to the settings . is_overridden with string ' TEST_RUNNER ' evaluates to boolean False .
try ,
settings . SITE_ID .
increment weight by integer 2 .
if AttributeError exception is caught ,
do nothing .
try ,
settings . BASE_DIR .
if AttributeError exception is caught ,
increment weight by integer 2 .
call the function settings . is_overridden with argument string ' TEMPLATE_LOADERS ' , if it evaluates to boolean True ,
increment weight by integer 2 .
call the function settings . is_overridden with argument string ' MANAGERS ' , if it evaluates to boolean True ,
increment weight by integer 2 .
call the function settings . is_overridden with argument string ' ADMINS ' , if it evaluates to boolean True ,
increment weight by integer 2 .
if string ' django . middleware . clickjacking . XFrameOptionsMiddleware ' is not contained in settings . MIDDLEWARE_CLASSES set ,
increment weight by integer 2 .
if weight is greater or equal to integer 6 ,
call the Warning function with 3 arguments: hint tuple containing one string , Django 1 . 6 introduced a new default test runner . It looks like this project was generated using Django 1 . 5 or earlier . You should ensure your tests are all running & behaving as expected . See https://docs . djangoproject . com/en/dev/releases/1 . 6/#new-test-runner for more information . " , obj set to None and id set to a string ' 1_6 . W001 ' , put the result into a list and return it .
if not ,
return an empty list .
define the function _check_boolean_field_default_value with app_config set to None and kwargs dictionary as arguments .
from django . db import models into default name space .
append field to problem_fields list for every model in apps . get_models with argument kwargs dictionary , only if app_configs is None , or model . _meta . app_config is contained in app_configs , for every field in model . _meta . local_fields , only if field is an instance of models . BooleanField and field . has_default ( ) evaluates to False .
 call the Warning function with 4 arguments: string " BooleanField does not have a default value . " ,
from __future__ import unicode_literals into default name space .
from . . import Warning , register and Tags into default name space .
decorator register with argument Tags . compatibility .
define the function check_1_7_compatibility with argument kwargs dictionary .
errors is an empty list .
call the function _check_middleware_classes with dictionary kwargs as argument , use the result as an argument for the call to the function errors . extend .
return errors .
define the function _check_middleware_classes with app_config set to None and kwargs dictionary as arguments .
from django . conf import settings into default name space .
call the function settings . is_overridden with argument string ' MIDDLEWARE_CLASSES ' , if the result is boolean False ,
call the Warning function with 4 arguments: string " MIDDLEWARE_CLASSES is not set . " , hint tuple containing one string , " Django 1 . 7 changed the global defaults for the MIDDLEWARE_CLASSES . django . contrib . sessions . middleware . SessionMiddleware , django . contrib . auth . middleware . AuthenticationMiddleware , and django . contrib . messages . middleware . MessageMiddleware were removed from the defaults . If your project needs these middleware then you should configure this setting . " , obj set to None , and id set to a string ' 1_7 . W001 ' , put the result into a list and return it .
if not ,
return an empty list .
from __future__ import unicode_literals into default name space .
from django . utils . encoding import python_2_unicode_compatible and force_st into default name space .
DEBUG is integer 10 .
INFO is integer 20 .
WARNING is integer 30 .
ERROR is integer 40 .
CRITICAL is integer 50 .
decorator python_2_unicode_compatible .
derive class CheckMessage from object base class .
define initialization method __init__ with self class instance , level , msg , hint defaulting to None , obj defaulting to None and if defaulting to None as arguments .
if level is not an integer raise an error with message string " The first argument should be level . " .
substitute level for self . level .
substitute msg for self . msg .
substitute hint for self . hint .
substitute obj for self . obj .
substitute id for self . id .
define private method __eq__ with self class instance and other as arguments .
if for all attr in list of attributes ' level ' , ' msg ' , ' hint ' , ' obj ' and ' id ' , self and other have the same attribute attr , return boolean True , otherwise return boolean False .
define private method __ne__ with self class instance and other as arguments .
if self equals to other return boolean False , otherwise return True .
define private method __str__ with argument self .
from django . db import models into default name space .
if self . obj is None ,
obj is a string " ? " .
otherwise if self . object is an instance of the models . base . ModelBase class ,
substitute self . obj for model .
substitute model . _meta . app_label for app .
convert app and model . _meta . object_name to strings , join them with separating ' . ' character , substitute it for obj .
if not ,
call the function force_str with argument self . obj , substitute the result for obj .
if self . id exists , convert self . id to a string , surround it with round brackets , substitute id for it , otherwise id is an empty string .
if self . hint exists , replace ' %s ' in a string " \n\tHINT: %s " with value of self . hint , substitute it for hint , otherwise hint is an empty string .
replace all ' %s ' from string " %s: %s%s%s " with values of obj , id , self . msg and hint , respectively , return the result .
define private method __repr__ with argument self .
in the string " <%s: level=%r , msg=%r , hint=%r , obj=%r , id=%r> " , replace ' %s ' with the name of the type of this class instance , replace all the ' %r ' with self . level , self . msg , self . hint . self . obj and self . id , respectively , return the result .
define the method is_serious with argument self .
return boolean True if self . level is greater than or equals to ERROR , otherwise return boolean False .
define the method is_silence with argument self .
from django . conf import settings into default name space .
if self . id is contained in settings . SILENCED_SYSTEM_CHECKS return boolean True , False otherwise .
derive the class Debug from base class CheckMessage .
define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
call the __init__ method with 3 arguments: DEBUG , unpacked list args and unpacked dictionary kwargs from the base class of Debug .
derive the class Info from base class CheckMessage .
define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
call the __init__ method with 3 arguments: INFO , unpacked list args and unpacked dictionary kwargs from the base class of Info .
derive the class Warning from base class CheckMessage .
define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
call the __init__ method with 3 arguments: WARNING , unpacked list args and unpacked dictionary kwargs from the base class of Warning .
derive the class Error from base class CheckMessage .
define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
call the __init__ method with 3 arguments: ERROR , unpacked list args and unpacked dictionary kwargs from the base class of Error .
derive the class Critical from base class CheckMessage .
define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments .
call the __init__ method with 3 arguments: CRITICAL , unpacked list args and unpacked dictionary kwargs from the base class of Critical .
from __future__ import unicode_literals into default name space .
from itertools import chain into default name space .
import module types .
from django . apps import apps into default name space .
from . import Error , Tags and register into default name space .
decorator register with Tags . models as an argument .
define the function check_all_models with app_configs defaulting to None and unpacked dictionary kwargs as arguments .
call the model . check method with unpacked dictionary kwargs for every model in return value of function apps . get_models , only if app_configs is None ot model . _meta . app_config is contained in app_configs , error is a list containing all the previous elements .
chain all errors elements into a list , return it .
decorator register with Tags . models and Tags . signals as arguments .
define the function check_model_signals with app_config defaulting to None and unpacked dictionary kwargs as arguments ,
from django . db import models into default name space .
errors is an empty list .
for name in attributes of models_signals object ,
get models . signals name attribute , store it in obj .
if obj is instance of models . signals . ModelSignal class ,
for every reference and receivers in return value of the call of obj . unresolved_references . items method ,
for every receiver , _ and _ in receivers ,
if receiver is an instance of types . FunctionType type ,
description is a string " The ' %s ' function " replaced by value of receiver . __name__ .
if not ,
description is a string " An instance of the ' %s ' class " with ' %s ' replaced by value of receiver . __class__ . __name__ .
call the Error function with 4 arguments , string " %s was connected to the ' %s ' signal with a lazy reference to the ' %s ' sender , which has not been installed . " with all the ' %s ' replaced by values of description , name and reference joined into a string delimited by ' . ' , respectively , obj set to receiver . __module__ , hint set to None and id set to string ' signals . E001 ' , append the result to errors .
return errors .
from __future__ import unicode_literals into default name space .
from itertools import chain into default name space .
from django . utils . itercompat import is_iterable into default name space .
derive the class Tags with base class object .
admin is a string ' admin '
compatibility is a string ' compatibility ' .
models is a string ' models '
signal is a string ' signals '
derive the class CheckRegistry with object as base class .
define initialization method __init__ with argument self .
self . registered_checks is an empty list .
define the method register with self ans unpacked list tags as arguments .
define the method inner with argument check .
replace tags for check . tags .
if check is not contained in self . registered_checks .
call the method self . registered_checks . append with argument check .
return check .
return inner .
define the method run_checks with self class instance , app_configs defaulting to None , tags defaulting to None as argument .
errors is an empty list .
if tags is not None .
append check to checks list , for every check in self . register_checks , if check has an attribute ' tags ' and check . tags and tags set intersection is a non empty set .
if not .
substitute self . registered_checks for checks .
for every check in checks ,
call the check function with argument app_config set to app_config , substitute the result for new_errors .
if new_errors is not an iterable object raise an error with error message " The function %r did not return a list . All functions registered with the checks registry must return a list . " , with ' %s ' replaced by value of check .
call the method errors . extend with argument new_errors .
return errors .
define the method tag_exists with self class instance and tag as arguments .
return boolean True if tag is contained in self . tags_available method return value , return False otherwise .
define the method tags_available with argument self .
append check . tags into a list for every check in self . registered_checks if check has ' tags ' attribute , put the elements into a set and return it .
call the function CheckRegistry , substitute the result for registry .
substitute registry . register for register .
substitute registry . run_checks for run_checks .
substitute registry . tag_exists for tag_exists .
from __future__ import unicode_literals into default name space .
from django . conf import settings into default name space .
from django . middleware . csrf import get_token into default name space .
from django . utils import six into default name space .
from django . utils . encoding import smart_text into default name space .
from django . utils . functional import lazy into default name space .
define the function csrf with an argument request .
define the function _get_val .
call the function get_token with an argument request , substitute the result for token .
if token is None ,
return string ' NOTPROVIDED ' .
if not ,
call the smart_text function with an argument token , return the result .
call the function lazy with arguments _get_val and six . text_type , substitute the result for _get_val .
return an dictionary containing 1 entry: return value of the function _get_val for ' csrf_token ' .
define the function debug with an argument request .
context_extras is an empty dictionary .
if settings . DEBUG is true and value of the request . META dictionary under the ' REMOTE_ADDR ' key is contained in settings . INTERNAL_IPS ,
value under the ' debug ' key of the context_extras dictionary is boolean True .
from django . db import connection into default name space .
substitute connection . queries for value under the ' debug ' key of the context_extras dictionary .
return context_extras .
define the function i18n with an argument request .
from django . utils import translation into default name space .
context_extras is an empty dictionary .
substitute settings . LANGUAGES for the value under the ' LANGUAGES ' key of the context_extras dictionary .
call the translation . get_language function , substitute the result for the value under the ' LANGUAGE_CODE ' key of the context_extras dictionary .
call the translation . get_language_bidi function , substitute the result for the value under the ' LANGUAGE_BIDI ' key of the context_extras dictionary .
return context_extras .
define the function tz with an argument request .
 from django . utils import timezone into default name space .
return an dictionary containing 1 entry: return value of the function timezone . get_current_timezone_name for ' TIME_ZONE ' .
define the function static with an argument request .
return an dictionary containing 1 entry: settings . STATIC_URL for ' STATIC_URL ' .
define the function media with an argument request .
return an dictionary containing 1 entry: settings . MEDIA_URL for ' MEDIA_URL ' .
define the function request with an argument request .
return an dictionary containing 1 entry: request for ' request ' .
from functools import reduce into default name space .
import module operator .
from django . utils import six into default name space .
from django . utils . encoding import force_text into default name space .
derive the class DjangoRuntimeWarning from the RuntimeWarning base class .
do nothing .
derive the class AppRegistryNotReady from the Exception base class .
do nothing .
derive the class ObjectDoesNotExist from the Exception base class .
silent_variable_failure is an boolean True .
derive the class MultipleObjectsReturned from the Exception base class .
do nothing .
derive the class SuspiciousOperation from the Exception base class .
derive the class SuspiciousMultipartForm from the SuspiciousOperation base class .
do nothing .
derive the class SuspiciousFileOperation from the SuspiciousOperation base class .
do nothing .
derive the class DisallowedHost from the SuspiciousOperation base class .
do nothing .
derive the class DisallowedRedirect from the SuspiciousOperation base class .
do nothing .
derive the class PermissionDenied from the Exception base class .
do nothing .
derive the class ViewDoesNotExist from the Exception base class .
do nothing .
derive the class MiddlewareNotUsed from the Exception base class .
do nothing .
derive the class ImproperlyConfigured from the Exception base class .
do nothing .
derive the class FieldError from the Exception base class .
do nothing .
NON_FIELD_ERRORS is an string ' __all__ ' .
derive the class ValidationError from the Exception base class .
define the method __init__ with 4 arguments: self , message , code set to None and params set to None .
call the __init__ method from the base class of the class ValidationError with arguments message , code and params .
if message is an instance of ValidationError class ,
if message has an ' error_dict ' attribute ,
substitute message . error_dict for message .
alternatively , if six . PY3 is true check if message does not have an attribute ' message ' , if six . PY3 is false , check if message doesnt have an attribute ' code ' , perform the following ,
substitute message . error_list for message .
if not ,
substitute message . message , message . code , message . params for message , code and params , respectively .
if message is an instance of dict type ,
self . error_dict is an empty dictionary .
for every field , messages in return value of the message . items method ,
if messages is not an instance of the ValidationError class ,
messages is an instance of the ValidationError class created with an argument messages .
substitute messages . error_list for the value under the field key of the self . error_dict dictionary .
otherwise if message is an instance of the list type .
self . error_list is an empty list .
for every message is message ,
if message is not an instance of the ValidationError class ,
message is an instance of the ValidationError class created with an argument message .
extend the self . error_list list with message . error_list .
if not ,
substitute message for self . message .
substitute code for self . code .
substitute params for self . params .
substitute list containing element self for self . error_list .
property getter decorator ,
define the method message_dict with an argument self .
get attribute ' error_dict ' from the self object .
convert object self to a dictionary , return it .
property getter decorator ,
define the messages with an argument self .
if self has an ' error_dict ' attribute ,
call the operator . add on the values of the self object converted into a dictionary , until it is reduced to a single value , return it .
convert self to a list and return it .
define the method update_error_dict with arguments self and error_dict .
if self has an ' error_dict ' attribute ,
for every field , error_list in self . error_dict . items method return value ,
call the method extend with an argument error_list on the return value of the method error_dict . setdefault called with 2 arguments: field and an empty list .
if not ,
call the method extend with an argument error_list on the return value of the method error_dict . setdefault called with 2 arguments: NON_FIELD_ERRORS and an empty list .
return error_dict .
define the method __iter__ with an argument self .
if self has an ' error_dict ' attribute ,
for every field , errors in self . error_dict . items method return value ,
yield field and ValidationError object converted to an list , created with an argument errors .
if not ,
for every error in self . error_list ,
substitute error . message for message .
if error . params is true ,
divide message by error . params , substitute the residue of the division for message .
call the force_text with an argument message , yield the result .
define the method __str__ with an argument self .
if self has an attribute ' error_dict ' ,
return the printable representation of the self object converted to a dictionary .
return the printable representation of the self object converted to a list .
define the method __repr__ with an argument self .
return the string ' ValidationError ( %s ) ' , replace ' %s ' with self .
from django . core . files . base import File into default name space .
__all__ is an list containing a string ' File ' .
from __future__ import unicode_literals into default name space .
import module os .
from io import BytesIO , StringIO and UnsupportedOperation into default name space .
from django . utils . encoding import smart_text into default name space .
from django . core . files . utils import FileProxyMixin into default name space .
from django . utils import six into default name space .
from django . utils . encoding import force_bytes and python_2_unicode_compatible into default name space .
decorator python_2_unicode_compatible ,
derive the class File from the FileProxyMixin base class .
bring integer 2 to the power of 10 , multiply it by 64 , substitute the result for DEFAULT_CHUNK_SIZE .
define the method __init__ with self class instance , file , and name defaulting to None as arguments .
substitute file for self . file .
if name is None ,
get ' name ' attribute from the file object , if it doesnt exists use None , substitute it for name .
substitute name for self . name .
if file object has an attribute ' mode ' ,
substitute file . mode for self . mode .
define the method __str__ with argument self .
evaluate the function smart_text with argument self . name , if exists , or an empty string , if not , return the result .
define the method __repr__ with argument self .
substitute ' %s ' in string ' <%s: %s> ' with self . __class__ . __name__ and self , if exists , or string ' None ' if it doesnt , return it .
define the method __bool__ with argument self .
convert self . name into an boolean , return it .
define the method __nonzero__ with argument self .
call the __bool__ method with argument self , on the return value of the type function with argument self , return the result .
define the method __len__ with argument self .
return self . size .
define the method _get_size_from_underlying_file with argument self .
if self . file has an attribute ' size ' ,
return self . file . size .
if self . file has an attribute ' name ' ,
try ,
call the os . path . getsize function with argument self . file . name , return the result .
if OSError or TypeError errors occurred .
do nothing .
if self . file has an attribute ' tell ' and an attribute ' seek ' ,
get the position of the self . file file pointer , substitute it for pos .
position the file self . file pointer at the end .
get the position of the file self . file pointer , substitute it for size .
position file self . file pointer at the pos position .
return size .
raise an AttributeError exception with string " Unable to determine the file ' s size . " as argument .
define the method _get_size with argument self .
if self has an attribute ' _size ' .
return self . _size .
call the method self . _get_size_from_underlying_file , substitute the result for self . _size .
return self . _size .
define the method _set_size with arguments self and size .
substitute size for self . _size .
size is a property object with _get_size as getter method and _set_size as setter method .
define the method _get_closed with argument self .
if self . file is false or self . file . closed is true , return boolean true , otherwise return boolean false .
closed is a property object with _get_closed as a getter method .
define the method chunks with arguments self and chunk_size defaulting to None .
if chunk_size is false ,
substitute the self . DEFAULT_CHUNK_SIZE for chunk_size .
try ,
position the file pointer at the beginning of self file .
if AttributeError or UnsupportedOperation exception occurred .
do nothing .
endless loop ,
call the self . read method with argument chunk_size , substitute the result for data .
if data is false ,
break from the smallest enclosing loop .
yield one element of data iterable .
define the method __multiple_chunks__ with arguments self and chunk_size defaulting to None .
if chunk_size is false ,
substitute self . DEFAULT_CHUNK_SIZE for chunk_size .
if self . size is greater than chunk_size , return boolean True , otherwise return boolean False .
define the method __iter__ with argument self .
buffer_ is None .
for every chunk in return value of the method self . chunks ,
evaluate the function BytesIO with argument chunk , substitute it for chunk_buffer .
for every line in chunk_buffer ,
if buffer_ is true ,
increment line by buffer_ .
buffer_ is None .
if last element of line is newline or carriage return character ,
yield one element of line iterable .
if not ,
substitute line for buffer_ .
if buffer_ is not None ,
yield one element from the buffer_ iterable .
define the method __enter__ with argument self .
return self .
define the method __exit__ with self , exc_type , exc_value and tb as arguments .
close the file self .
define the method open with arguments self and mode defaulting to None .
if file self is not closed ,
position the file pointer at the beginning of self file .
otherwise if self . name exists and self . name file path exists ,
open the file self . name in mode or self . mode mode , whichever exists , assign the file handler to self . file .
if not ,
raise an ValueError exception with string " The file cannot be reopened . " as an argument .
define the method close with argument self .
call the method self . file . close .
decorator python_2_unicode_compatible ,
derive the class ContentFile from File base class .
define the method __init__ with arguments self , content and name defaulting to None .
if six . PY3 is boolean True ,
substitute StringIO for stream_class if content is an instance of six . text_type , otherwise substitute BytesIO for stream_class .
if not ,
substitute BytesIO for stream_class .
call the function force_bytes with argument content , substitute it for content .
call the __init__ method with stream_class ( content ) and name set to name arguments , from the base class of the ContentFile class .
substitute length of content for self . size .
define the method __str__ with argument self .
return a string ' Raw content ' .
define the method __bool__ with argument self .
return boolean True .
define the method __nonzero__ with argument self .
evaluate the method type ( self ) . __bool__ with argument self , return the result .
define the method open with arguments self and mode set to None .
call the self . seek method with argument integer 0 .
define the method close with argument self .
do nothing .
import module zlib .
from django . core . files import File into default name space .
derive class ImageFile from the base class File .
define method _get_width with self class instance as the argument .
return the first element of the return value of the call to the self . _det_image_dimensions method .
get property attribute _get_width , and substitute it for width .
define method _get_height with self class instance as the argument .
return the second element of the return value of the call to the self . _det_image_dimensions method .
get property attribute _get_height , and substitute it for width .
define the method _get_image_dimensions with self class instance as the argument .
if self does not have an attribute named ' _dimensions_cache ' .
substitute self . closed for close .
call the method self . open ( )
evaluate the method get_image_dimensions with self class instance and close set to close as the arguments , substitute the result for self . _dimensions_cache .
return self . _dimensions_cache .
define the function get_image_dimension with file_or_path and close set to boolean False as the arguments .
from PIL module import ImageFile as PillowImageFile .
p is image parser object , set by calling the PillowImageFile . Parser method .
if file_or_path has an attribute ' read ' ,
substitute file_or_path for file .
get the position in bytes from the start of the file , store it in file_pos .
set the file position pointer at the beginning .
if not ,
open file named file_or_path for reading , store the file object handle in file .
close is boolean True .
try ,
chunk_size is an integer 1024 .
endless while loop ,
read chunk_size bytes from file and store it in data .
if data is empty .
break from the endless loop .
try ,
feed data to the parser p .
if zlib . error as e exception is raised ,
if e . args list first element starts with string " Error -5 " ,
do nothig .
if not ,
raise an exception .
if p . image is not empty ,
return size of the image that was fed to the parser p .
double the chunk size .
return None .
execute regardless of the exception being raised ,
if close is True ,
close file file .
if not ,
set the file position pointer at file_pos .
import module os .
__all__ is a tuple containing strings: ' LOCK_EX ' , ' LOCK_SH ' , ' LOCK_NB ' , ' lock ' and ' unlock ' .
define the _fd function with argument f .
return result of the f . fileno method if f has an ' fileno ' attribute , otherwise return f .
if os . name equals to ' nt ' ,
import msvcrt .
from ctypes import sizeof , c_ulong , c_void_p , c_int64 , Structure , Union , POINTER , windll and byref into default name space .
from ctypes . wintypes import BOOL , DWORD and HANDLE into default name space .
LOCK_SH is a integer 0 .
LOCK_NB is a hexadecimal 1 .
LOCK_EX is a hexadecimal 2 .
if size of c_ulong does not equals to size of c_void_p ,
substitute c_int64 for ULONG_PTR .
if not ,
substitute c_ulong for ULONG_PTR .
substitute c_void_p for PVOID .
derive the class _OFFSET from the Structure base class .
_fields_ is a list containing 2 tuples: first tuple contains: string ' Offset ' and DWORD , second contains: string ' OffsetHigh ' and DWORD .
derive the class _OFFSET_UNION from the Union base class .
_anonymous_ is a list containing one string: ' _offset ' .
_fields_ is a list containing 2 tuples: first tuple contains: string ' _offset ' and _OFFSET , second contains: string ' Pointer ' and PVOID .
derive the class OVERLAPPED from the Structure base class .
_anonymous_ is a list containing one string: ' _offset_union ' .
_fields_ is a list containing 4 tuples: first tuple contains: string ' Internal ' and ULONG_PTR , second contains: string ' InternalHigh and ULONG_PTR , third: ' _offset_union ' and _OFFSET_UNION , forth ' hEvent ' and HANDLE .
call the function POINTER with argument OVERLAPPED , substitute the result for LPOVERLAPPED .
substitute windll . kernel32 . LockFileEx for LockFileEx .
substitute BOOL for LockFileEx . restype .
LockFileEx . argtypes is a list containing 6 elements: HANDLE , DWORD , DWORD , DWORD , DWORD and LPOVERLAPPED .
substitute windll . kernel32 . UnlockFileEx for UnlockFileEx .
substitute BOOL for UnlockFileEx . restype .
UnlockFileEx . argtypes is a list containing 5 elements: HANDLE , DWORD , DWORD , DWORD and LPOVERLAPPED .
define the function lock with arguments f and flags .
call the function msvcrt . get_osfhandle with return value of the _fd ( f ) function as argument , substitute the result for hfile .
call the OVERLAPPED function , substitute the result for overlapped .
call the LockFileEx function with 6 arguments: hfile , flags , integer 0 , integer 0 , hexadecimal value FFFF0000 , return value of the byref function called with argument overlapped , substitute the result for ret .
convert ret to a boolean , return it .
define the function unlock with argument f .
call the function msvcrt . get_osfhandle with return value of the _fd ( f ) function as argument , substitute the result for hfile .
call the OVERLAPPED function , substitute the result for overlapped .
call the LockFileEx function with 5 arguments: hfile , integer 0 , integer 0 , hexadecimal value FFFF0000 , return value of the byref function called with argument overlapped , substitute the result for ret .
convert ret to a boolean , return it .
if not ,
try ,
import fcntl .
substitute fcntl . LOCK_SH for LOCK_SH .
substitute fcntl . LOCK_NB for LOCK_NB .
substitute fcntl . LOCK_EX for LOCK_EX .
if ImportError or AttributeError exception occurred ,
LOCK_EX , LOCK_SH and LOCK_NB are all equal to integer 0 .
define the function lock with arguments f and flags .
return boolean False .
define the function unlock with argument f .
return boolean True .
if not ,
define the function lock with arguments f and flags .
call the function fcntl . flock with return value of the _fd ( f ) function and flags as arguments , substitute the result for ret .
if ret equals to integer 0 , return boolean True , otherwise return boolean False .
define the function unlock with argument f .
all the function fcntl . flock with return value of the _fd ( f ) function and fcntl . LOCK_UN as arguments , substitute the result for ret .
if ret equals to integer 0 , return boolean True , otherwise return boolean False .
import module os .
from django . core . files import locks into default name space .
try ,
from shutil import copystat into default name space .
if ImportError exception occurred ,
import stat .
define the function copystat with arguments src and dst .
call the os . stat function with argument src , substitute the result for st .
call the function stat . S_IMODE with argument st . st_mode , substitute the result for mode .
if os has an attribute ' utime ' ,
call the os . utime function with arguments dst and tuple containing 2 elements: st . st_atime and st . st_mtime .
if os has an attribute ' chmod ' ,
call the function os . chmod with arguments dst and mode .
__all__ is a list containing a string ' file_move_safe ' .
define the function _samefile with arguments src and dst .
if os . path has an attribute ' samefile ' ,
try ,
call the os . path . samefile with arguments src and dst , return the result .
if exception OSError occurred ,
return boolean False .
if file path of src and dst files are the same , return boolean True , otherwise return boolean False .
define the function file_move_safe with 4 arguments: old_file_name , new_file_name , chunk_size set to multiple of integers 1024 and 64 ,
if call to the function _samefile with old_file_name and new_file_name evaluates to boolean True ,
return nothing .
try ,
if allow_overwrite is boolean False and call to the os . access function with arguments new_file_name and os . F_OK evaluates to boolean True ,
raise an IOError exception with string " Destination file %s exists and allow_overwrite is False " as argument , where ' %s ' is replaced by new_file_name .
call the os . rename function with arguments old_file_name and new_file_name .
return nothing .
if OSError exception is caught ,
do nothing .
open file old_file_name in read bytes mode , with file descriptor as f ,
evaluate the binary expression with 4 operands: os . O_WRONLY , binary or os . O_CREATE , binary or ' O_BINARY ' attribute of object os , binary or os . O_EXCL if allow_overwrite is boolean False , use the previous as the mode to open new_file_name file , assign the file descriptor to fd .
try ,
call the function locks . lock with arguments fd and locks . LOCK_EX .
current_chunk is None .
as long as current_chunk is not an empty string ,
read chunk_size bytes from the old_file file , substitute the result for current_chunk .
write current_chunk to file fd .
finally perform ,
call the function locks . unlock with fd as argument .
close the file fd .
call the function copystat with old_file_name and new_file_name as arguments .
tr ,
remove the old_file_name file .
if OSError , renamed to e , is caught ,
if attribute ' winerror ' of object e is not equal to integer 32 and if ' errno ' attribute is not equal to integer 13 ,
raise an exception .
import module os .
import module errno .
import module itertools .
from datetime import datetime into default name space .
from django . conf import settings into default name space .
from django . core . exceptions import SuspiciousFileOperation into default name space .
from django . core . files import locks and File into default name space .
from django . core . files . move import file_move_safe into default name space .
from django . utils . encoding import force_text and filepath_to_uri into default name space .
from django . utils . functional import LazyObject into default name space .
from django . utils . module_loading import import_string into default name space .
from django . utils . six . moves . urllib . parse import urljoin into default name space .
from django . utils . text import get_valid_filename into default name space .
from django . utils . _os import safe_join and abspathu into default name space .
from django . utils . deconstruct import deconstructible into default name space .
__all__ is a tuple containing strings: ' Storage ' , ' FileSystemStorage ' , ' DefaultStorage ' and ' default_storage ' .
derive the class Storage from the object base class .
define the method open with arguments self , name and mode defaulting to string ' rb ' .
call the self . _open method with name and mode arguments , return the result .
define the method save with arguments self , name and content .
if name is None ,
substitute content . name for name .
if content has an ' chunks ' attribute ,
content is a File object instance created with content argument .
call the method self . get_available_name with argument name , substitute it for name .
call the method self . _save with arguments name and content , substitute it for name .
replace all the strings ' \\ ' with ' / ' in the string name , use it as an argument for the call to the force_text function , return the result .
define the method det_valid_name with arguments self and name .
call the get_valid_filename with argument name , return the result .
define the method get_available_name with arguments self and name .
call the os . path . split with argument name , assign the result to the dir_name and file_name respectively .
call the os . path . splitext with argument file_name , assign the result to the file_root and file_ext respectively .
call the itertools . count function with argument integer 1 , substitute the result for count .
as long as self . exists function with argument name evaluates to boolean True ,
substitute ' %s ' in string " %s_%s%s " with: file_root , next ( count ) and file_ext , join the dir_name and previous string into a valid file path , substitute it for name .
return name .
define the method path with arguments self and name .
raise an NotImplementedError exception with argument string " This backend doesn ' t support absolute paths . " .
define the method delete with arguments self and name .
raise an NotImplementedError exception with argument string ' subclasses of Storage must provide a delete ( ) method ' .
define the method exists with arguments self and name .
raise an NotImplementedError exception with argument string ' subclasses of Storage must provide an exists ( ) method ' .
define the method listdir with arguments self and path .
raise an NotImplementedError exception with argument string ' subclasses of Storage must provide a listdir ( ) method ' .
define the method size with arguments self and name .
raise an NotImplementedError exception with argument string ' subclasses of Storage must provide a size ( ) method ' .
define the method url with arguments self and name .
raise an NotImplementedError exception with argument string ' subclasses of Storage must provide a url ( ) method ' .
define the method accessed_time with arguments self and name .
raise an NotImplementedError exception with argument string ' subclasses of Storage must provide an accessed_time ( ) method ' .
define the method created_time with arguments self and name .
raise an NotImplementedError exception with argument string ' subclasses of Storage must provide a created_time ( ) method ' .
define the method modified_time with arguments self and name .
raise an NotImplementedError exception with argument string ' subclasses of Storage must provide a modified_time ( ) method ' .
decorator deconstructible ,
derive the class FileSystemStorage from the Storage base class .
define the method __init__ with 5 arguments: self , location set to None , base_url set to None , file_permissions_mode set to None , and directory_permissions_mode set to None .
if location is None ,
substitute the settings . MEDIA_ROOT for location .
substitute the location for self . base_location .
substitute the return value of the function abspathu with self . base_location as argument for self . location .
if base_url is None ,
substitute settings . MEDIA_URL for base_url .
otherwise if base_url does not ends with ' / ' character ,
append character ' / ' to the base_url .
substitute base_url for self . base_url .
self . file_permissions_mode is a tuple containing: file_permissions_mode if file_permissions_mode is not None , or settings . FILE_UPLOAD_PERMISSIONS if it is .
self . directory_permissions_mode is a tuple containing: directory_permissions_mode if directory_permissions_mode is not None , or settings . FILE_UPLOAD_DIRECTORY_PERMISSIONS if it is .
define the method _open with arguments self , name and mode defaulting to string ' rb ' .
call the function self . path with argument name , use it and mode as arguments for the call to the function open , use it as an argument for creatinon of a File object instance , return it .
define the method _save with arguments self , name and content .
substitute result of the self . path function with argument name for full_path .
call the function os . path . dirname with argument full_path , substitute the result for directory .
if call to the function os . path . exists with argument directory evaluates to boolean False ,
try ,
if self . directory_permissions_mode is not None ,
call the os . umask function with argument integer 0 , substitute the result for old_umask .
try ,
call the os . makedirs function with directory and self . directory_permissions_mode as arguments .
finally perform ,
call the os . umask function with argument old_umask .
if not ,
call the function os . makedirs with argument directory .
if exception OSError , renamed to e , occurred ,
if e . errno is not equal to errno . EEXIST ,
raise an exception .
if directory is not an directory ,
raise an IOError exception with argument string " %s exists and is not a directory . " , where ' %s ' is replaced by directory .
endless loop ,
try ,
if content has an attribute ' temporary_file_path ' ,
call the function file_move_safe with content . temporary_file_path function result and full_path .
if not ,
evaluate binary expression with 4 operands: os . O_WRONLY , binary or os . O_CREAT , binary or os . O_EXCL , binary or ' O_BINARY ' attribute of the os object , or integer 0 if it doesnt exists .
call the os . open function with full_path , flags and octal number 0o666 as arguments , substitute the result for fd .
_file is None .
try ,
call the function locks . lock with fd and locks . LOCK_EX as arguments .
for every chunk in content . chunks function return value ,
if _file is None ,
mode is a string ' wb ' is chunk is instance of the type bytes , otherwise mode is a string ' wt ' .
call the function os . fdopen with arguments fd and mode , substitute it for _file .
write the chunk to the file _file .
finally perform ,
call the function locks . unlock with argument fd .
if _file is not None ,
close the _file file .
if not ,
close fd file .
if OSError , renamed to e , is caught ,
if e . errno equals to errno . EEXIST ,
call the method self . get_available_name with argument name , substitute the result for name .
call the method self . path with argument name , substitute the result for full_path .
if not ,
raise an exception .
if not ,
break from the smallest enclosing loop .
 if self . file_permissions_mode is not None ,
call the function os . chmod with arguments full_path and self . file_permissions_mode .
return name .
define the method delete with arguments self and name .
if name is boolean False raise an assert error with message string " The name argument is not allowed to be empty . " .
call the self . path with argument name , substitute it for name .
if os . path . exists function with argument name , evaluates to boolean True ,
try ,
call the os . remove function with argument name .
if OSError , renamed to e , is caught ,
if e . errno equals to errno . EEXIST ,
raise an exception .
define the method exists with arguments self and name .
call the self . path function with argument name , use the result as the argument for the call to the os . path . exists function , return the result .
define the method listdir with arguments self and path .
call the self . path function with argument path , substitute it for path .
directories , files are empty lists .
for every entry in os . listdir function return value called with the argument path ,
join path and entry into a file path , if it exists ,
append entry to the directories list .
if not ,
append entry to files list .
return directories and files .
define the method path with arguments self and name .
try ,
call the safe_join function with arguments self . location and name , substitute it for path .
if ValueError exception is caught ,
raise an SuspiciousFileOperation exception with string " Attempted access to ' %s ' denied . " as argument , replace ' %s ' with name .
call the os . path . normpath with argument path , return the result .
define the method size with arguments self and name .
call the self . path with argument name , use the result as an argument for the call to the os . path . getsize function , return the result .
define the method url with arguments self and name .
if self . base_url is None ,
raise an ValueError with string " This file is not accessible via a URL . " as argument .
call the urljoin function with arguments: self . base_url and result of the call to the function filepath_to_uri with argument name , return the result .
define the method accessed_time with arguments self and name .
call the function self . path with argument name , use the result as an argument for the call to the function os . path . getatime , use the result as an argument for the call to the function datetime . fromtimestamp , return the result .
define the method created_time with arguments self and name .
call the function self . path with argument name , use the result as an argument for the call to the function os . path . getctime , use the result as an argument for the call to the function datetime . fromtimestamp , return the result .
define the method modified_time with arguments self and name .
call the function self . path with argument name , use the result as an argument for the call to the function os . path . getmtime , use the result as an argument for the call to the function datetime . fromtimestamp , return the result .
define the function get_storage_class with argument import_path=None defaulting to None .
call the import_string with argument: import_path if exists or settings . DEFAULT_FILE_STORAGE , if not , return the result .
derive the class DefaultStorage from the LazyObject base class .
define the _setup method with argument self .
call the function that is the return value of get_storage_class method , substitute the result for self . _wrapped .
call the DefaultStorage method , substitute the result for default_storage .
import module os .
import module tempfile .
from django . core . files . utils import FileProxyMixin into default name space .
__all__ is a tuple , containing strings ' NamedTemporaryFile ' and ' gettempdir ' .
if module os field name equals to string ' nt ' ,
derive class TemporaryFile from the base class FileProxyMixin .
define method __init__ with self class instance , mode string ' w+b ' , bufsize set to integer -1 , suffix and prefix set to empty strig , dir set to None as the arguments .
call the method tmpfile . mkstemp with suffix set to suffix , prefix set to prefix and dir set to dir , store the result in the fd and name , respective .
substitute name for self . name .
call the os . fdopen function with fd , mode and bufsize as the arguments , assign the file handle object to self . file .
substitute False for self . close_called .
substitute os . unlink for unlink .
define the method close with self class instance as the argument .
if self . close_called is False ,
substitute True for self . close_called .
try ,
close the file object .
if OSError or IOError exceptions were raised ,
do nothing .
try ,
call the method unlink on self with self . name as the argument .
if OSError exception was raised ,
do nothing .
property decorator , to be called by property built-in function .
define the method closed with self as the argument .
return self . file . closed .
define __del__ method with self as the argument .
call the method close on self .
define __enter__ method with self as the argument .
call the file . __enter__ method on self .
return self .
define method __exit__ with self , exc , value and tb as the arguments .
call the file . __exit__ method on self with exc , value and tb as the arguments .
substitute TemporaryFile for NamedTemporaryFile .
if not ,
substitute tempfile . NamedTemporaryFile for NamedTemporaryFile .
substitute tempfile . gettempdir for gettempdir .
import module errno .
import module os .
from io import BytesIO into default name space .
from django . conf import settings into default name space .
from django . core . files . base import File into default name space .
from django . core . files import temp as tempfile into default name space .
from django . utils . encoding import force_str into default name space .
__all__ is a tuple containing strings: ' UploadedFile ' , ' TemporaryUploadedFile ' , ' InMemoryUploadedFile ' and ' SimpleUploadedFile ' .
derive the UploadedFile class from the File base class .
bring integer 2 to the power of 10 , multiply it by integer 64 , substitute the result for DEFAULT_CHUNK_SIZE .
define the method __init__ with 7 arguments: self , file set to None , name set to None , content_type set to None , size set to None , charset set to None and content_type_extra set to None .
call the __init__ method with arguments file and name , from the base class of the UploadedFile class .
substitute size for self . size .
substitute content_type for self . content_type .
substitute charset for self . charset .
substitute content_type_extra for self . content_type_extra .
define the method __repr__ with argument self .
substitute ' %s ' from string " <%s: %s ( %s ) > " with self . __class__ . __name__ , self . name and self . content_type , respectively , use it as an argument for the call to the function force_str , return the result .
define the method _get_name with argument self .
return self . _name .
define the method _set_name with arguments self and name .
if name is not None ,
call the function os . path . basename with argument name , substitute the result for name .
if length of name is greater than integer 255 ,
call the os . path . splitex with argument name , assign the result to name and ext , respectively .
substitute the first 255 elements of ext for ext .
subtract length of the ext from the integer 255 , take first elements of the name list up to the previous result index , append ext to the end of it , substitute the resulting list for name .
substitute name for self . _name .
name is a property object with _get_name as a getter method and _set_name as a setter method .
derive the TemporaryUploadedFile class from the UploadedFile base class .
define the __init__ method with 6 arguments: self , name , content_type , size , charset and content_type_extra set to None .
 if settings . FILE_UPLOAD_TEMP_DIR is true ,
call the method tempfile . NamedTemporaryFile with arguments: suffix set to string ' . upload ' and dir set to settings . FILE_UPLOAD_TEMP_DIR .
if not ,
call the method tempfile . NamedTemporaryFile with argument suffix set to string ' . upload ' .
call the method __init__ from the base class of the TemporaryUploadedFile class with arguments: file , name , content_type , size , charset and content_type_extra .
define the method temporary_file_path with argument self .
return self . file . name .
define the method close with argument self .
try ,
call the self . file . close method , return the result .
if OSError , renamed to e , exception is caught ,
if e . errno is not equal to errno . ENOENT ,
raise an exception .
derive the InMemoryUploadedFile class from the UploadedFile base class .
define the method __init__ with 8 arguments: self , file , field_name , name , content_type , size , charset and content_type_extra set to None .
call the method __init__ from the base class of the InMemoryUploadedFile base class , with 6 arguments: file , name , content_type , size , charset , content_type_extra .
substitute field_name for self . field_name .
define the method open with arguments self and mode set to None .
set the file pointer at the beginning of the self . file file .
define the method chunks with arguments self ad chunk_size set to None .
set the file pointer at the beginning of the self . file file .
read the whole self file and yield it as a generator return value .
define the method multiple_chunks with arguments self and hunk_size set to None .
return boolean False .
derive the SimpleUploadedFile class from the InMemoryUploadedFile base class .
define the method __init__ with 4 arguments: self , name , content and content_type defaulting to a string ' text/plain ' .
if content is empty , substitute it for an empty string .
call the __init__ method from the base class of the SimpleUploadedFile class with 7 arguments: BytesIO ( content ) , None , name , content_type , length of content , None and None .
decorator classmethod .
define the method from_dict with argument cls and file_dict .
call the method cls with 3 arguments: value under the ' filename ' key of file_dict , value under the ' content ' key of file_dict ,
from __future__ import unicode_literals into default name space .
from io import BytesIO into default name space .
from django . conf import settings into default name space .
from django . core . files . uploadedfile import TemporaryUploadedFile and InMemoryUploadedFile into default name space .
from django . utils . encoding import python_2_unicode_compatible into default name space .
from django . utils . module_loading import import_string into default name space .
__all__ is a string containing strings: ' UploadFileException ' , ' StopUpload ' , ' SkipFile ' , ' FileUploadHandler ' , ' TemporaryFileUploadHandler ' , ' MemoryFileUploadHandler ' , ' load_handler ' and ' StopFutureHandlers ' .
derive the class UploadFileException from the Exception base class .
do nothing .
decorator python_2_unicode_compatible ,
derive the class StopUpload from the UploadFileException base class .
define the method __init__ with arguments self and connection_reset defaulting to boolean False .
substitute connection_reset for self . connection_reset .
define the method __str__ with argument self .
if self . connection_reset is true ,
return string ' StopUpload: Halt current upload . ' .
if not ,
return string ' StopUpload: Consume request data , then halt . ' .
derive the class SkipFile from the UploadFileException base class .
do nothing .
derive the class StopFutureHandlers from the UploadFileException base class .
do nothing .
derive the class FileUploadHandler from the object base class .
bring integer 2 to the power of 10 , multiply it by integer 64 , substitute the result for chunk_size .
define the method __init__ with arguments self and request defaulting to None .
self . file_name is None .
self . content_type is None .
self . content_length is None .
self . charset is None .
self . content_type_extra is None .
self . request is None .
define the method handle_raw_input with arguments: self , input_data , META , content_length , boundary and encoding set to None .
do nothing .
define the method new_file with arguments: self , field_name , file_name , content_type , content_length , charset set to None ,
substitute field_name for self . field_name .
substitute file_name for self . file_name .
substitute content_type for self . content_type .
substitute content_length for self . content_length .
substitute charset for self . charset .
substitute content_type_extra for self . content_type_extra .
define the method receive_data_chunk with arguments: self , raw_data and start .
raise an NotImplementedError with argument string ' subclasses of FileUploadHandler must provide a receive_data_chunk ( ) method ' .
define the method file_complete with arguments: self and file_size .
raise an NotImplementedError with argument string ' subclasses of FileUploadHandler must provide a file_complete ( ) method ' .
define the method upload_complete with argument self .
do nothing .
derive the class TemporaryFileUploadHandler from the FileUploadHandler base class .
define the method __init__ with arguments self , argument list args and dictionary of arguments kwargs .
call the __init__ method from the base class of the TemporaryFileUploadHandler class with arguments: unpacked list args , and unpacked dictionary kwargs .
define the method new_file with arguments: self , file_name , unpacked list args and unpacked dictionary kwargs .
call the method new_file from the base class of the TemporaryFileUploadHandler class with arguments: file_name , unpacked list args and unpacked dictionary kwargs .
self . file is a instance of a class TemporaryUploadedFile initialized with arguments: self . file_name , self . content_type , integer 0 , self . charset and self . content_type_extra .
define the method receive_data_chunk with arguments: self , raw_data and start .
call the method self . file . write with argument raw_data .
define the method file_complete with arguments self and file_size .
position the file pointer at the start of the self . file file .
substitute file_size for self . file . size .
return self . file .
derive the class MemoryFileUploadHandler from the FileUploadHandler base class .
define the method handle_raw_input with arguments: self , input_data , META , content_length , boundary and encoding set to None .
if content_length is greater than settings . FILE_UPLOAD_MAX_MEMORY_SIZE ,
self . activated is boolean False .
if not ,
self . activated is boolean True .
define the method new_file with arguments: self , unpacked list args and unpacked dictionary kwargs .
call the new_file method form the base class from the MemoryFileUploadHandler class with arguments: unpacked list args and unpacked list kwargs .
if self . activated is boolean True ,
call the function BytesIO , substitute the result for self . file .
raise an exception StopFutureHandlers .
define the function receive_data_chunk with arguments self , raw_data and start .
if self . activated is boolean True ,
write raw_data to self . file file .
if not ,
return raw_data .
define the function file_complete with arguments self and file_size .
if self . activated is boolean False ,
return nothing .
set file pointer at the beginning of the self . file file .
initialize the object of a InMemoryUploadedFile class with arguments: file set to self . file , field_name set to self . field_name , name set to self . file_name , content_type set to self . content_type , size set to file_size , charset set to self . charset , and content_type_extra set to self . content_type_extra , return it .
define the function load_handler with arguments: path , unpacked list args and unpacked dictionary kwargs .
call the import_string with arguments path , call the return function with arguments: unpacked list args and unpacked dictionary kwargs , return the result .
derive class FileProxyMixin from the base class object , making it a new-style class .
define lambda function that returns self . file . encoding field , use it as an argument for property function , put the result in encoding .
define lambda function that returns self . file . fileno field , use it as an argument for property function , put the result in fileno .
define lambda function that returns self . file . flush field , use it as an argument for property function , put the result in flush .
define lambda function that returns self . file . isatty field , use it as an argument for property function , put the result in isatty .
define lambda function that returns self . file . newlines field , use it as an argument for property function , put the result in newlines .
define lambda function that returns self . file . read field , use it as an argument for property function , put the result in read .
define lambda function that returns self . file . readinto field , use it as an argument for property function , put the result in readinto .
define lambda function that returns self . file . readline field , use it as an argument for property function , put the result in readline .
define lambda function that returns self . file . readlines field , use it as an argument for property function , put the result in readlines .
define lambda function that returns self . file . seek field , use it as an argument for property function , put the result in seek .
define lambda function that returns self . file . softspace field , use it as an argument for property function , put the result in softspace .
define lambda function that returns self . file . tell field , use it as an argument for property function , put the result in tell .
define lambda function that returns self . file . truncate field , use it as an argument for property function , put the result in truncate .
define lambda function that returns self . file . write field , use it as an argument for property function , put the result in write .
define lambda function that returns self . file . writelines field , use it as an argument for property function , put the result in writelines .
define lambda function that returns self . file . xreadlines field , use it as an argument for property function , put the result in xreadlines .
define iterator method __iter__ with self as the argument .
return iterator object based on the self . file collection object .
from __future__ import unicode_literals into default name space .
import module logging .
import module sys .
import module types .
from django import http into default name space .
from django . conf import settings into default name space .
from django . core import urlresolvers into default name space .
from django . core import signals into default name space .
from django . core . exceptions import MiddlewareNotUsed , PermissionDenied and SuspiciousOperation into default name space .
from django . db import connections and transaction into default name space .
from django . utils . encoding import force_text into default name space .
from django . utils . module_loading import import_string into default name space .
from django . utils import six into default name space .
from django . views import debug into default name space .
call the function logging . getLogger with string ' django . request ' as the argument , assign the return object handle to logger .
derive class BaseHandler , derive from the base class object , making this a new style class .
response_fixes is a list with http . fix_location_header and http . conditional_content_removal as elements .
define initialization method __init__ , with self class instance as the argument .
set class fields _request_middleware , _view_middleware , _template_response_middleware , _response_middleware and _exception_middleware to None .
define method load_middleware with class instance self as the argument .
self . _view_middleware is an empty list .
 self . _template_response_middleware is an empty list .
_response_middleware is an empty list .
exception_middleware is an empty list .
request_middleware is an empty list .
for every middleware_path in settings . MIDDLEWARE_CLASSES:
evaluate the function import_string with middleware_path as argument , substitute the result for my_class .
try ,
call the mw_class function , store the result in the mw_instance .
if MiddlewareNotUsed exception is raised ,
skip this iteration of he smallest enclosing loop .
if mw_instance has an attribute named ' process_request ' .
append mw_instance . process_request at the end of request_middleware .
if mw_instance has an attribute named ' process_view ' .
append mw_instance . process_view at the end of self . _view_middleware .
if mw_instance has an attribute named ' process_template_response ' .
insert mw_instance . process_template_response at the beginning of self . _template_response_middleware .
if mw_instance has an attribute named ' process_response ' .
insert mw_instance . process_response at the beginning of self . _response_middleware .
if mw_instance has an attribute named ' process_exception ' .
insert mw_instance . process_exception at the beginning of self . _exception_middleware .
substitute self . _request_middleware for request_middleware .
define the method make_view_atomic , with self class instance and view as the arguments .
get attribute ' _non_atomic_requests ' from the view object , if the attribute doesnt exist return the empty set , substitute the result for non_atomic_requests .
call the method connections . all ( ) , perform the following for every db in the result ,
if value under the key ' ATOMIC_REQUESTS of db . settings_dic dictionary is True and db . alias is not present in the non_atomic_requests ,
call the function transaction . atomic , with using set to db . alias as the argument , return value is a function which is called , with the argument view , store the result in the view .
return view
define method get_exception_response , with self class instance , request , resolver and status_code as the arguments .
try ,
call the function resolver . resolve_error_handler with status_code as an argument , assign the result to the callback and param_dict , respectively .
call the callback function with request and dictionary argument param_dict as the arguments , substitute it for response .
if an exception occurred ,
call the method signals . got_request_exception . send with the sender set to the type of this class , and request set to request as the arguments .
call the method self . handle_uncaught_exception with request , resolver and return value of the function sys . exec_info as the arguments .
return response
define the method get_response , with self class instance and request as the arguments .
substitute settings . ROOT_URLCONF for urlconf .
call the method urlresolvers . set_urlconf with urlconf as the argument .
call the method urlresolvers . RegexURLResolver with raw literal string ' ^/ ' and urlconf as the arguments , substitute the result for resolver .
try ,
set response to None .
for every middleware_method in self . _request_middleware ,
call the middleware_method with the request as an argument , substitute the result for response .
if response is True ,
breaks from the smallest enclosing loop execution .
if response is None ,
if request has an attribute named ' urlconf ' ,
substitute request . urlconf for urlconf .
call the function urlresolvers . set_urlconf with urlconf as the argument .
call the method urlresolvers . RegexURLResolver with raw literal string ' ^/ ' and urlconf as the arguments , substitute the result for resolver .
call to the resolver . resolve method with request . path_info as an argument .
assign the values to the callback , callback_args , callback_kwargs , respectively , from the resolver_match tuple .
substitute resolver_match for request . resolver_match .
for every middleware_method in self . _view_middleware ,
call the middleware_method with request , callback , callback_args and callback_kwargs as the arguments , substitute the result for response .
if response is True ,
break from the smallest enclosing loop execution .
if response is None ,
call the method self . make_view_atomic with callback as the argument , substitute the result for the wrapped_callback .
try ,
call the function wrapped_callback with request , list or arguments callback_args and dictionary arguments callback_kwargs , as the arguments , substitute the result for response .
if Exception , renamed to e , exception is caught ,
for every middleware_method in self . _exception_middleware ,
call the middleware_method with request and e as the arguments , substitute the result for response .
if response is True ,
break from the smallest enclosing loop execution .
if response is None ,
raise the exception .
if response is None ,
if callback is of instance types . FunctionType ,
get the name of the callback , substitute it for view_name .
if not ,
get the name of the type of the callback , append the string ' . __call__ ' to it , substitute it for view_name .
substitute the ' %s ' in the string " The view %s . %s didn ' t return an HttpResponse object . It returned None instead . " , with the name of the module callback is in and the view_name , respectively , use it as the argument for the ValueError exception raise .
if response has an attribute named ' render ' and response . render is a callable function ,
for every middleware_method in self . _template_response_middleware ,
call the function middleware_method with the request and response as the arguments , assign the result to response .
if response is None ,
replace ' %s ' in the string " %s . process_template_response didn ' t return an HttpResponse object . It returned None instead . " , with name of the class type of the middleware_method instance , use it as the argument for call to the ValueError exception raise .
call the response . render ( ) method and assign the return to the response .
if exception http . Http404 as e is caught ,
substitute ' %s ' in ' Not Found: %s ' with request . path , extra is an dictionary with two pairs of elements ' status_code ' with value 404 , and ' request with value request , respectively use the previous as the arguments for the call to the logger . warning function .
if settings . DEBUG is True ,
call the function debug . technical_404_response with request and e as arguments , assign the result to response .
if not ,
call the method self . get_exception_response with request , resolver and integer 404 as the arguments , assign the result to response .
if exception PermissionDenied is caught ,
substitute ' %s ' in ' Forbidden ( Permission denied ) : %s ' with request . path , extra is an dictionary with two pairs of elements , ' status_code ' with value 403 , and ' request with value request , respectively use the previous as the arguments for the call to the logger . warning function .
call the method self . get_exception_response with request , resolver and integer 403 as the arguments , assign the result to response .
if exception SuspiciousOperation as e is caught ,
substitute ' %s ' in ' django . security . %s ' with the name of the type of the class object e , use it as the argument for the call to the , function logging . getLogger , assign the result to the security_logger .
evaluate the function force_text with e as an argument , extra is an dictionary with two pair of elements , ' status code ' with integer value of 400 and ' request ' with value request , respectively use the previous to call the function security_logger . error .
if settings . DEBUG is True ,
evaluate the function debug . technical_500_response with request , evaluated value of function sys . exc_info as a list , status code set to integer 400 , return the result .
call the method self . get_exception_response with the request , resolver and integer 400 as the arguments , substitute the result for response .
if SystemExit exception is caught ,
raise an exception .
otherwise if any other exception is caught ,
call the method signals . got_request_exception . send with sender set to type of the self class instance and request set to request .
call to the self . handle_uncaught_exception method with request , resolver and value of the evaluated function sys . exec_info , as the arguments , substitute the result for response .
try ,
for every middleware_method in self . _response_middleware ,
call the function middleware_method with request and response as the arguments , substitute the result for response .
if response is None ,
substitute ' %s ' is " %s . process_response didn ' t return an HttpResponse object . It returned None instead . " , with the name of the type of the self class instance of the middleware_method , raise the ValueError with the previous as the argument .
call the method self . apply_response_fixes with the request and response as the arguments , substitute the result for response .
if any exception is caught ,
call the signals . got_request_exception . send method with sender set to type of the self class instance and request set to request .
call to the self . handle_uncaught_exception method with request , resolver and value of the evaluated function sys . exec_info , as the arguments , substitute the result for response .
append the request to the end of the protected class member response . _closable_objects .
return response .
define the method handle_uncaught_exception with self class instance , request , resolver and exec_info as arguments .
if settings . DEBUG_PROPAGATE_EXCEPTIONS is True ,
raise an exception .
substitute ' %s ' in ' Internal Server Error: %s ' with request . path , exc_info set to exc_info , extra is an dictionary with two pairs of elements ' status_code ' with value 500 , and ' request with value request , respectively use the previous as the arguments for the call to the logger . error function .
if settings . DEBUG is True ,
evaluate debug . technical_500_response with request and list of arguments exec_info , return the result .
if resolver . urlconf_module is None:
call the function reraise from the module six , with list of arguments exec_info .
call the resolver . resolve_error_handler with integer 500 as the argument , assign the resulting tuple elements to the callback , and param_dict , respectively .
evaluate the function callback with request and dictionary of parameters param_dict as the arguments , return the result .
define the method apply_response_fixes with self class instance , request and response as the arguments .
for every func in self . response_fixes ,
call the function func with request and response as arguments , assign the result to response .
return response .
from __future__ import unicode_literals into default name space .
import module cgi .
import module codecs .
import module logging .
import module sys .
from io import BytesIO into default name space .
from threading import Lock into default name space .
import module warnings .
from django import http into default name space .
from django . conf import settings into default name space .
from django . core import signals into default name space .
from django . core . handlers import base into default name space .
from django . core . urlresolvers import set_script_prefix into default name space .
from django . utils import datastructures into default name space .
from django . utils . deprecation import RemovedInDjango19Warning into default name space .
from django . utils . encoding import force_str and force_text into default name space .
from django . utils . functional import cached_property into default name space .
from django . utils import six into default name space .
from django . http . response import REASON_PHRASES as STATUS_CODE_TEXT into default name space .
call logging . getLogger method with string ' django . request ' as argument , store the result in logger .
