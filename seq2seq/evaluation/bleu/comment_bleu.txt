// if <unk> is true , substitute it for attrs , if not substitute id_ for attrs .
 attrs = { 'id' : id_ } if id_ else { }

// if not ,
  else :

// loaded_objects_in_fixture is integer <unk> .
 BASE56_ALPHABET = '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz'

// if self . ignore is true and field_name is not contained in model_fields ,
      if self . ignore and field_name not in model_fields :

// return self . value equals self . choice_value .
          return self . value == self . choice_value

// import module types .
 import types

// return value under the key key of self dictionary .
              return self [ key ]

// get the value under the <unk> key of the options dictionary , substitute it for alen .
 use_reloader = options . get ( 'use_reloader' )

// import module fnmatch .
                    import rlcompleter

// call the self . _lock . writer method , with the result perform the following ,
 with self . _lock . writer ( ) :

// get the value under the <unk> key of the params dictionary , if the key doesnt exists return the value under the <unk> key of the params dictionary , if the key doesnt exists return an empty tuple .
   cull_frequency = params . get ( 'cull_frequency' , options . get ( 'CULL_FREQUENCY' , 3 ) )

// self . path is an instance of <unk> class , created with 4 arguments : <unk> , result of the method <unk> . splitlines called with an argument <unk> , and result of the function <unk> , called with 2 arguments : <unk> and integer 1 .
    self . path = '%s/%s' % ( script_name . rstrip ( '/' ) ,  path_info . replace ( '/' , '' , 1 ) )

// if bits is false ,
 if not bits :

// skip this loop iteration .
                              continue

// for every key in self ,
 for key in self :

// substitute self . literal for value .
               value = self . literal

// for every i and ext in enumerated iterable unhandled_params ,
  for i , ext in enumerate ( ext_list ) :

// import module sys .
 import sys

// call the function local , substitute the result for _active .
 _active = local ( )

// call the method connection . creation . sql_for_pending_references with 3 arguments : refto , no_style ( ) , and pending_references , extend list with the result .
                                  sql . extend ( connection . creation . sql_for_pending_references ( refto , no_style ( ) , pending_references ) )

// property decorator ,
   @ property

// for every i and row in enumerated result of the method connection . introspection . <unk> ,
 for i , row in enumerate ( connection . introspection . get_table_description ( cursor , table_name ) ) :

// substitute third element of bits for key and second element of bits .
  key , value = bits [ 2 ] , bits [ 0 ]

// call the method self . connection . ehlo .
 self . connection . ehlo ( )

// if self . save_as_new is true ,
 if self . save_as_new :

// if etags is false ,
 if not etags :

// try ,
 try :

// define the method __repr__ with an argument self .
   def __repr__ ( self ) :

// increment doublecolon_len by one .
              doublecolon_len += 1

// call the method msgs . decode with an argument <unk> , substitute the result for msgs .
                  msgs = msgs . decode ( 'utf-8' )

// if not ,
  else :

// call the method parser . parse , return the result .
 return parser . parse ( )

// do nothing .
                   pass

// define the function gettext_noop with an argument message .
    def gettext_noop ( message ) :

// property decorator ,
   @ property

// substitute I18N_MODIFIED for LockFileEx . modified_code .
                  EventHandler . modified_code = I18N_MODIFIED

// output_transaction is boolean True .
  output_transaction = True

// locales is a list containing locale .
 locales = [ locale ]

// substitute bp for lbp .
          lbp = bp

// if register_to is true ,
              if register_to :

// call the function write with an argument sep .
                  write ( sep )

// substitute <unk> for priority .
              priority = 1.0

// for every i in sequence of result ,
 for i in range ( len ( result ) ) :

// append i to self . _deleted_form_indexes .
                      self . _deleted_form_indexes . append ( i )

// self . POST is an instance of MultiValueDict class .
 self . FILES = MultiValueDict ( )

// call the method MIMEText . __init__ with 5 arguments : self , text , subtype and None .
                 MIMEText . __init__ ( self , text , subtype , None )

// for every entry in return value of the os . makedirs function with path as argument ,
 for entry in os . listdir ( path ) :

// import module sys .
 import sys

// return output .
  return output

// substitute mapped_tokens for self . tokens .
   self . tokens = mapped_tokens

// from django . utils . _os import safe_join into default name space .
 from django . utils . _os import safe_join

// return boolean True .
                  return True

// call the method self . <unk> with 2 arguments tag and attrs .
                   self . handle_startendtag ( tag , attrs )

// define the method resolve_context with 2 arguments : self and context .
   def resolve_context ( self , context ) :

// define the method add_arguments with 2 arguments self and parser .
   def add_arguments ( self , parser ) :

// try ,
          try :

// if path is an instance of six . string_types ,
  if isinstance ( path , six . string_types ) :

// call the method handler . endElement with an argument <unk> .
          handler . endElement ( "channel" )

// define the method _truncate_html with 4 arguments : self , name , config and incremental set to boolean False .
     def configure_logger ( self , name , config , incremental = False ) :

// if val is None ,
  if val is None :

// if second element of bits is None ,
 if bits [ 2 ] != 'by' :

// set name attribute of the result to value .
                  setattr ( result , name , value )

// convert value into an floating point number , substitute it for value .
              value = int ( str ( value ) )

// if nodelist_empty is None ,
 if nodelist_empty is None :

// with self . mutex perform ,
          with self . mutex :

// derive the class Command from the BaseCommand base class .
   class Command ( BaseCommand ) :

// increment i-th element of result by piece .
              result [ i ] += piece

// call the method file . tell , substitute the result for attr_list .
 file_pos = file . tell ( )

// if f . unique is true , or if f . unique is true ,
                  unique = "UNIQUE " if f . unique else ""

// return value and arg .
              return value + arg

// if self . queryset is not None ,
              if self . queryset is not None :

// return errors .
  return errors

// do nothing .
                          pass

// if self . _pk_field is true and length of self . deleted_forms is lesser than self . min_num ,
  if ( self . validate_min and  self . total_form_count ( ) - len ( self . deleted_forms ) < self . min_num ) :

// return ip_str .
           return ip_str

// define the function extract with 2 arguments : path and to_path set to <unk> .
    def extract ( path , to_path = '' ) :

// append model to model_list .
                  model_list . append ( model )

// skip this loop iteration .
              continue

// call the method super_set . replace with an argument management_dir .
 unifunc . replace ( strfunc )

// substitute pending_references for pending_references .
 pending_references = { }

// define the method render with 2 arguments : self and context .
   def render ( self , context ) :

// from django . utils . translation import trans_real into default name space .
 from django . utils . translation import trans_real

// define the method parse with an argument self .
    def parse ( self ) :

// call the method self . g , return the result .
              return self . g ( )

// substitute self . STDOFFSET for self . DSTOFFSET .
              self . DSTOFFSET = self . STDOFFSET

// break from the loop execution .
                  break

// define the function EmailMultiAlternatives with arguments Model , data and db .
     def build_instance ( Model , data , db ) :

// substitute CheckboxChoiceInput for retval .
                      retval = newretval

// call the method parser . add_library with an argument lib .
 parser . add_library ( lib )

// define the method is_hidden with an argument self .
 def is_hidden ( self ) :

// call the function next_space_index with 2 arguments subject and i , substitute the result for i .
    i = next_space_index ( subject , i )

// from django . db . migrations . writer import MigrationWriter into default name space .
 from django . db . migrations . writer import MigrationWriter

// call the method parser . delete_first_token .
 parser . delete_first_token ( )

// if TypeError or ValueError exceptions are caught ,
  except ( ValueError , TypeError ) :

// split pks by <unk> , substitute the result for primary_keys .
              primary_keys = pks . split ( ',' )

// from django . conf import settings into default name space .
          from django . conf import settings

// call the method base64 . combining with an argument s , strip the result of whitespaces from <unk> , return the result .
      return base64 . urlsafe_b64encode ( s ) . strip ( b'=' )

// return result .
   return result

// self . saved_forms is an empty list .
          self . changed_objects = [ ]

// call the method self . clean , substitute the result for cleaned_data .
              cleaned_data = self . clean ( )

// from django . core import checks into default name space .
 from django . core import checks

// define the method _truncate_html with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
    def assertRaisesRegex ( self , * args , ** kwargs ) :

// call the function _checkLevel with an argument level , use the result as an argument for the call to the function logger . setLevel .
              logger . setLevel ( _checkLevel ( level ) )

// call the method __init__ from the base class of the class Context , with an argument dict_ .
 super ( Context , self ) . __init__ ( dict_ )

// try ,
 try :

// from django . utils . html import escape into default name space .
 from django . utils . html import escape

// for every migration_name in MEDIA_TYPES ,
 for migration_name in migration_names :

// return None .
              return None

// delete the object object with arguments obj and self . name .
  delattr ( obj . __class__ , self . name )

// call the method middleware . process_response with 2 arguments : request and response , return the result .
                          return middleware . process_response ( request , response )

// if traceback is true ,
              if show_traceback :

// import module os .
 import os

// self . _changed_data is an empty list .
              self . _changed_data = [ ]

// if <unk> is not contained in te ,
                  if "'format'" not in str ( te ) :

// multiply offset . days by integer 60 , append the result to timezone . seconds , append the result to timezone . seconds , substitute the result for timezone .
 timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 )

// if self . _wrapped is empty ,
  if self . _wrapped is empty :

// substitute language for self . __language .
  self . __language = language

// derive the class Node from the object base class .
   class Node ( object ) :

// if lib is true ,
 if lib :

// substitute test_runner for form . save_m2m .
            form . save_m2m = save_m2m

// python_2_unicode_compatible decorator ,
     @ python_2_unicode_compatible

// return <unk> .
          return ''

// if not ,
    else :

// call the method self . sync_apps . render with an argument unpacked list args , return the result .
  return self . parent_widget . render ( * args )

// if <unk> is true , return boolean True , otherwise return boolean False .
 return localtime ( value ) if should_convert else value

// parse_until is an empty list .
              parse_until = [ ]

// call the function check_for_language with an argument lang , if it evaluates to false ,
 if not check_for_language ( lang ) :

// remove first element from colors , substitute it for fg .
 fg = colors . pop ( )

// for every v in match of the method match . groups , called with an argument v , for every v in the result of the method pattern_iter . groups ,
                          year_val , month_val , day_val = [ int ( v ) for v in match . groups ( ) ]

// define the method _format_value with 2 arguments : self and obj .
    def label_from_instance ( self , obj ) :

// divide <unk> by integer <unk> , substitute the result for message .
                      message = "'%s' already exists" % top_dir

// divide timezone by integer 60 , substitute the result for hour and reminder .
 hour , minute = divmod ( timezone , 60 )

// if tag is contained in self . <unk> ,
 if tag in self . CDATA_CONTENT_ELEMENTS :

// for every f in fields ,
 for f in fields :

// finally perform ,
     finally :

// if lang_code is contained in _supported and lang_code is not None and call to the function check_for_language with an argument lang_code , evaluates to true ,
 if lang_code in _supported and lang_code is not None and check_for_language ( lang_code ) :

// if IndexError exception is caught ,
  except IndexError :

// with call to the function transaction . atomic with using set to connection . alias , and savepoint set to connection . features . can_rollback_ddl , with the result ,
  with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) :

// if not ,
  else :

// call the function gen_filenames , for every filename in the result ,
 for filename in gen_filenames ( ) :

// define the method __deepcopy__ with 2 arguments : self and memo .
   def __deepcopy__ ( self , memo ) :

// substitute self . _stream for stream .
   stream = self . _stream

// define the function firstof with 2 arguments value and arg .
 def center ( value , arg ) :

// define the method render with 4 arguments : self , name , value and attrs set to None .
   def render ( self , name , value , attrs = None ) :

// substitute key for result . key .
 result . key = key

// settings . USE_I18N is boolean True .
              settings . USE_I18N = True

// if ImportError exception is caught ,
  except ImportError :

// if first last elements of chunk is false ,
                if not chunk [ : - rollback ] :

// call the function chain with an argument list with 2 elements : return value of the function format_html called with 2 arguments : unpacked list <unk> and return value of the function no_style called with an argument : result of the function flatatt called with an argument : result of the function flatatt called with an argument : result of the function flatatt called with an argument path , for every path in media , for every medium in media .
 return chain ( * [  [ format_html ( '<link href="{0}" type="text/css" media="{1}" rel="stylesheet" />' , self . absolute_path ( path ) , medium )  for path in self . _css [ medium ] ]  for medium in media ] )

// get attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary , return it .
          return delattr ( caches [ DEFAULT_CACHE_ALIAS ] , name )

// import module re .
 import re

// if not ,
  else :

// for every handler in handlers ,
     for handler in handlers :

// new_second_item is an integer 7 .
          fill_to = 8

// if value equals self . empty_value or value is contained in self . empty_values ,
 if value == self . empty_value or value in self . empty_values :

// mapped_tokens is an empty list .
 index_output = [ ]

// substitute fail_silently for self . fail_silently .
          self . fail_silently = fail_silently

// self . activated is boolean False .
              self . activated = False

// define the method to_python with arguments self and value .
    def to_python ( self , value ) :

// _cookie_allows_colon_in_names is None .
          modified_code = None

// substitute self . _wrapped for <unk> .
              repr_attr = self . _wrapped

// define the function safe_join with 2 arguments : base and unpacked list paths .
    def safe_join ( base , * paths ) :

// if key is contained in d ,
              if key in d :

// created_models is an empty list .
              created_models = [ ]

// try ,
 try :

// if num is greater than self . _max_entries ,
 if num > self . _max_entries :

// break from the loop execution .
                                       break

// run_syncdb is boolean False .
    run_syncdb = False

// _iteritems is integer <unk> .
 _iteritems = "iteritems"

// substitute offset for self . __offset .
              self . __offset = offset

// if max_age is not None ,
 if max_age is not None :

// define the method to_python with arguments self and value .
    def to_python ( self , value ) :

// if expires is false ,
  if not expires :

// locales is a difference between the locales and exclude sets .
 locales = set ( locales ) - set ( exclude )

// property decorator ,
   @ property

// call the function warnings . warn with 3 arguments : <unk> , warnings and stacklevel set to integer 2 .
   warnings . warn ( "django.utils.importlib will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )

// if not ,
  else :

// return callback and <unk> .
          return callback , ''

// define the method render with 2 arguments : self and context .
   def render ( self , context ) :

// delete the value under the key key of the self . dicts dictionary .
 del self . dicts [ - 1 ] [ key ]

// substitute name for old_attr .
                  old_attr = name

// call the method self . make_key with key and version set to version as arguments , substitute the result for key .
 key = self . make_key ( key , version = version )

// call the method parser . compile_filter with an argument arg , for every arg in args without the first element , substitute the result for values .
          values = [ parser . compile_filter ( arg ) for arg in args [ 1 : ] ]

// self . m2m_data is None .
      self . m2m_data = None

// if not ,
  else :

// call the function digest , assign the result to inner and varkw , respectively .
  inner , outer = digest ( ) , digest ( )

// call the function _check_test_runner with dictionary kwargs as argument , use the result as an argument for the call to the function errors . extend .
 errors . extend ( _check_boolean_field_default_value ( ** kwargs ) )

// substitute choices for self . choices .
 self . choices = choices

// define the method has_leading_dir with an argument self .
   def get_host ( self ) :

// if not ,
  else :

// append value under key key of the <unk> dictionary , append it to output .
                  output . append ( "%s = %s" % ( key , user_settings [ key ] ) )

// from django . utils import six into default name space .
 from django . utils import six

// from django . utils import formats and six into default name space .
 from django . utils import formats , six

// call the function force_text with an argument s , call the strip method on the result with an argument string ' ' , ' , substitute the result for s .
 s = force_text ( s ) . strip ( ) . replace ( ' ' , '_' )

// call the method f . formfield with an argument unpacked dictionary kwargs , substitute the result for formfield .
              formfield = f . formfield ( ** kwargs )

// if self has an attribute <unk> ,
 if hasattr ( self , '_get' ) :

// derive the class ChoiceField from the base class Field class .
     class ChoiceField ( Field ) :

// define the method __init__ with an argument self .
      def __init__ ( self ) :

// append string " <unk> ( <unk> are not be in %s <unk> " , where ' %s ' is replaced with charset .
                  e . reason += ', HTTP response headers must be in %s format' % charset

// otherwise if value under the ' : ' key of the options dictionary equals to string " <unk> : ( <unk> ) : " ,
  elif ( attrvalue [ : 1 ] == '\'' == attrvalue [ - 1 : ] or  attrvalue [ : 1 ] == '"' == attrvalue [ - 1 : ] ) :

// derive the class FieldError from the Exception base class .
    class FieldError ( Exception ) :

// if safe is not None ,
 if safe is not None :

// call the method request . META . get with 2 arguments : <unk> and <unk> .
   accept = request . META . get ( 'HTTP_ACCEPT_LANGUAGE' , '' )

// define the method unget with arguments self and bytes .
   def unget ( self , bytes ) :

// <unk> is integer <unk> .
 MAX_NUM_FORM_COUNT = 'MAX_NUM_FORMS'

// call the method self . format with an argument <unk> , substitute the result for name .
              name = self . format ( 'O' )

// call the method handler . addQuickElement with 2 arguments : <unk> and value under the <unk> key of the item dictionary .
 handler . addQuickElement ( "link" , item [ 'link' ] )

// if categories is true ,
 if categories :

// call the method parser . add_argument with 5 arguments : <unk> , <unk> set to string ' <unk> ' , dest set to string ' <unk> ' , default set to <unk> , and help set to string ' <unk> <unk> <unk> : <unk> <unk> <unk> ' , substitute the result for parser . add_argument .
 parser . add_argument ( '--extension' , '-e' , dest = 'extensions' ,  action = 'append' , default = [ 'py' ] ,  help = 'The file extension(s) to render (default: "py"). '  'Separate multiple extensions with commas, or use '  '-e multiple times.' )

// define the method _isdst with 2 arguments self and dt .
    def _isdst ( self , dt ) :

// if value under the <unk> key of the item dictionary is not None ,
    if item [ 'enclosure' ] is not None :

// Model is an instance of RenderContext class , created with value under the <unk> key of dictionary d .
              Model = _get_model ( d [ "model" ] )

// define the method writer with an argument self .
 def writer ( self ) :

// <unk> is a property object of this class .
  page_range = property ( _get_page_range )

// define the method create_variable_node with 2 arguments : self and filter_expression .
   def create_variable_node ( self , filter_expression ) :

// define the function resolve with 2 arguments : path and urlconf set to None .
     def resolve ( path , urlconf = None ) :

// obj is an tuple with 2 elements : args and kwargs .
 obj . _constructor_args = ( args , kwargs )

// for every key_value in natural ,
 for key_value in natural :

// define the function verbatim with 2 arguments : parser and token .
 def verbatim ( parser , token ) :

// if squash is false ,
   if not changed :

// get the value under the <unk> key of the options dictionary , substitute it for threading .
  threading = options . get ( 'use_threading' )

// call the function warnings . warn with 2 arguments : <unk> set to <unk> <unk> <unk> <unk> <unk> .
              warnings . warn ( "``--natural`` is deprecated; use ``--natural-foreign`` instead." ,  RemovedInDjango19Warning )

// try ,
  try :

// call the color_style method , substitute the result for self . style .
          self . style = color_style ( )

// derive the class RWLock from the HttpResponse base class .
    class JsonResponse ( HttpResponse ) :

// from django . core . management . base import BaseCommand and CommandError into default name space .
 from django . core . management . base import BaseCommand , CommandError

// derive the class SimpleLazyObject from the LazyObject base class .
   class SimpleLazyObject ( LazyObject ) :

// return value under the language key of the _translations dictionary .
  return _translations [ language ]

// call the method self . style . NOTICE with an argument <unk> , use the result as an argument for the call to the self . style . NOTICE method , write the result to self . stdout .
 self . stdout . write ( self . style . NOTICE ( "Run 'python manage.py migrate' to apply them.\n" ) )

// return s .
          return s

// call the function make_origin with 4 arguments : display_name , self . load_template_source and template_dirs , substitute the result for origin .
 origin = make_origin ( display_name , self . load_template_source , template_name , template_dirs )

// call the method self . appendlist with 2 arguments : key and value .
                  self . appendlist ( key , value )

// import module errno .
 import errno

// if value is not contained in result ,
  if value is not result :

// if AttributeError exception is caught ,
  except AttributeError :

// from django . apps import apps into default name space .
  from django . apps import apps

// get the value under the name key of the data dictionary , if it exists return it , if not , return None .
  return data . get ( name , None )

// if p is greater or equal to integer 0 ,
 if p >= 0 :

// call the method node . <unk> with an argument <unk> , if it evaluates to true ,
 if node . hasAttribute ( 'pk' ) :

// append self . fk . name to form . _meta . name , respectively .
  form . _meta . fields . append ( self . fk . name )

// increment i by integer 1 .
 i += 1

// replace ' %s ' in string ' <unk> <unk> ' with message_context of ' <unk> ' with message_context , write it to out .
  out . write ( ' pgettext(%r, %r) ' % ( message_context , g ) )

// derive the class MultipleHiddenInput from the HiddenInput base class .
    class MultipleHiddenInput ( HiddenInput ) :

// if ImportError exception is caught ,
  except ImportError :

// call the Model with an argument unpacked dictionary , substitute the result for obj .
 obj = Model ( ** data )

// try ,
  try :

// convert <unk> to a string and substitute it for msg .
                                       msg = "Could not decode base64 data: %r" % e

// raise an NotImplementedError exception with an argument string
 raise NotImplementedError ( 'subclasses of BaseCommand must provide a handle() method' )

// kwargs is a <unk> object with 4 initial entries : form , <unk> , <unk> , <unk> , <unk> ,
  kwargs = {  'form' : form ,  'formfield_callback' : formfield_callback ,  'formset' : formset ,  'extra' : extra ,  'can_delete' : can_delete ,  'can_order' : can_order ,  'fields' : fields ,  'exclude' : exclude ,  'min_num' : min_num ,  'max_num' : max_num ,  'widgets' : widgets ,  'validate_min' : validate_min ,  'validate_max' : validate_max ,  'localized_fields' : localized_fields ,  'labels' : labels ,  'help_texts' : help_texts ,  'error_messages' : error_messages ,  }

// call the function conditional_escape with an argument checkbox_name , substitute the result for value under the <unk> key of the substitutions dictionary .
 substitutions [ 'clear_checkbox_name' ] = conditional_escape ( checkbox_name )

// self . _closable_objects is an empty list .
 self . _closable_objects = [ ]

// get <unk> attribute of the lookup_view object , substitute it for m .
       m = getattr ( lookup_view , '__module__' , None )

// if response is None ,
  if response is None :

// raise an DisallowedHost exception with an argument : return value of the function urlquote called with an argument key .
              raise MultiValueDictKeyError ( repr ( key ) )

// return _curried .
  return _wrapper

// call the method __init__ from the base class of the class JsLexer .
 super ( NoArgsCommand , self ) . __init__ ( )

// from django . core . management . base import CommandError into default name space .
  from django . core . management . base import CommandError

// from django . conf import settings into default name space .
 from django . conf import settings

// raise an EmptyPage exception with an argument <unk> .
              raise EmptyPage ( 'That page number is less than 1' )

// if not ,
  else :

// raise an TypeError exception with an argument <unk> .
              raise TypeError ( 'In order to allow non-dict objects to be '  'serialized set the safe parameter to False' )

// print <unk> to the standard output .
          print ( "Can't import flup." + flup_module )

// write s to zfile stream .
 zfile . write ( s )

// from django . core . management . base import CommandError and BaseCommand into default name space .
 from django . core . management . base import CommandError , BaseCommand

// call the os . utime function with fd and mode as arguments , substitute the result for _file .
 _file = os . fdopen ( fd , mode )

// if not ,
  else :

// substitute self . _meta for opts .
          opts = self . _meta

// import module warnings .
      import warnings

// substitute self . origin and source for token . source .
 token . source = self . origin , source

// app_template_dirs is an instance of GzipFile class .
     app_template_dirs = calculate_app_template_dirs ( )

// try ,
  try :

// return <unk> .
          return "<WithNode>"

// import module tarfile .
import cgi

// call the function format_html with 3 arguments : <unk> , contents and label_suffix , substitute the result for contents .
              contents = format_html ( '{0}{1}' , contents , label_suffix )

// call the function urlunsplit with an argument value , substitute the result for url_fields .
              url_fields = split_url ( value )

// add loader to a list , substitute it for app_names .
              app_names = sorted ( loader . migrated_apps )

// if s is an instance of EscapeData ,
 if isinstance ( s , ( SafeData , EscapeData ) ) :

// join comment_notes into a string , separated by ' # ' , append it to field_desc .
                          field_desc += '  # ' + ' ' . join ( comment_notes )

// try ,
  try :

// if settings . STATIC_URL is None ,
              if settings . STATIC_URL is None :

// substitute prefix for self . prefix .
 self . prefix = prefix

// call get_script_name function , substitute the result for self . _wrapped .
          self . _wrapped = get_storage_class ( ) ( )

// delete the value under the <unk> key of self dictionary .
 del self [ 'content-type' ]

// convert name to lowercase , if it equals to <unk> ,
          if name . lower ( ) == 'subject' :

// define the method __str__ with an argument self .
   def __str__ ( self ) :

// call the function vars with an argument options , substitute the result for cmd_options .
 cmd_options = vars ( options )

// if has_old_option is true and forms_valid is true ,
  if has_old_option and has_new_option :

// call the method self . xml . endElement with an argument <unk> .
 self . xml . endElement ( "natural" )

// try ,
              try :

// call the method connection . introspection . table_name_converter with an argument model . _meta . db_table , if it evaluates to true ,
              if connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names :

// return valid .
   return valid

// if <unk> is contained in context ,
            if 'forloop' in context :

// do nothing .
              pass

// endless while loop ,
 while 1 :

// substitute self for self . _body .
 self . COOKIES = { }

// return dec .
  return dec

// define the function sanitize_address with 2 arguments : addr and encoding .
    def sanitize_address ( addr , encoding ) :

// call the method lookups . appendlist with 3 arguments : return value of the method lookups . appendlist , called with 2 arguments : result of the method lookups . getElementsByTagName called with 2 arguments : unpacked list p_pattern , and unpacked dictionary kwargs .
 lookups . appendlist ( name , ( new_matches , p_pattern + pat , dict ( defaults , ** pattern . default_kwargs ) ) )

// substitute klass for factory .
  factory = klass

// call the function <unk> with an argument record , convert the result to a <unk> , substitute the result for message converted into a string , substitute the result for message .
   message = "%s\n\nRequest repr(): %s" % ( self . format ( record ) , request_repr )

// call the method self . build_attrs with arguments attrs , type as self . input_type , name as name , substitute the result for final_attrs .
  final_attrs = self . build_attrs ( attrs , type = self . input_type , name = name )

// define the method create_nodelist with an argument self .
   def create_nodelist ( self ) :

// call the method self . handle_noargs with value under the <unk> key of the options dictionary as an argument .
   self . run_shell ( shell = options [ 'interface' ] )

// if length of args is greater than integer 4 ,
  if len ( args ) > 4 :

// __all__ is a list containing an element <unk> .
  __all__ = [ 'SelectDateWidget' ]

// define the method create_token with 3 arguments : self , token_string and in_tag .
   def create_token ( self , token_string , in_tag ) :

// all_locales is an empty list .
    all_locales = [ ]

// remove param and first element of param .
                        unhandled_params . remove ( param )

// raise an InvalidTemplateLibrary exception with an argument <unk> .
              raise InvalidTemplateLibrary ( "Unsupported arguments to "  "Library.filter: (%r, %r)" , ( name , filter_func ) )

// from functools import copystat into default name space .
      from shutil import copystat

// raise an NotImplementedError exception with an argument string
 raise NotImplementedError ( 'subclasses of LabelCommand must provide a handle_label() method' )

// try ,
                          try :

// delete first element of bits .
 del bits [ : 3 ]

// return self . DSTOFFSET .
              return self . STDOFFSET

// join basedir and l into a list for every l in locales .
                  dirs = [ os . path . join ( basedir , l , 'LC_MESSAGES' ) for l in locales ]

// if key is not contained in extracted ,
              if key not in default_settings :

// define the function callable with an argument obj .
      def callable ( obj ) :

// call the function datetime_safe with an argument date , call the result with an argument <unk> , substitute the result for d .
          d = ',%s' % datetime_safe . new_datetime ( date ) . strftime ( '%Y-%m-%d' )

// return nothing .
              return

// define the function _checkLevel with 2 arguments : potfile and msgs .
      def write_pot_file ( potfile , msgs ) :

// substitute base . __name__ for class_name .
              class_name = base . __name__

// from django . template . base import TemplateDoesNotExist into default name space .
 from django . template . base import TemplateDoesNotExist

// get the value under the ' <unk> ' key of the options dictionary , substitute it for connection .
  connection = connections [ options [ 'database' ] ]

// raise an CommandError exception with an argument <unk> , use the result as an argument for the call to the <unk> function , return the result .
 raise CommandError ( "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'" % name_str )

// define the method __init__ with 3 arguments : self , escape_html and value set to value .
  def __init__ ( self , tup , hash = hash ) :

// if fake is true ,
                  if fake :

// skip this loop iteration .
                  continue

// if settings . <unk> is true ,
 if settings . DEBUG_PROPAGATE_EXCEPTIONS :

// call the method formats . group with an argument integer 1 , use the result as an argument for the call to the function out . write , write the result to out .
                      out . write ( ' _(%s) ' % cmatch . group ( 1 ) )

// substitute stream for self . _stream .
          self . _stream = stream

// from django . template . dates import date into default name space .
 from django . template . defaultfilters import date

// if OSError , renamed to e , exception is caught ,
  except OSError as e :

// call the method self . stdout . start_transaction_sql , write the result to self . stdout .
                          self . stdout . write ( "    - %s\n" % operation . describe ( ) )

// call the function six . reraise with 3 arguments : MultiPartParserError , UnreadablePostError set to msg , and third element of the result of the function sys . exc_info .
 six . reraise ( MultiPartParserError , MultiPartParserError ( msg ) , sys . exc_info ( ) [ 2 ] )

// slice the order of the elements from i-th to i-th element of p , substitute it for value .
 value = p [ i + 1 : ] . strip ( )

// otherwise if value is an instance of datetime . date ,
  elif isinstance ( value , datetime . date ) :

// if middleware has an attribute <unk> ,
                      if hasattr ( middleware , 'process_exception' ) :

// call the method MIMEMultipart . decode with 2 arguments <unk> and <unk> , substitute the result for self . <unk> .
 self . _payload = payload . decode ( 'ascii' , 'surrogateescape' )

// call the method gettext_module . translation with 5 arguments : domain set to <unk> , localedir set to localedir , <unk> set to negative integer <unk> , substitute the result for translation .
 translation = gettext_module . translation (  domain = 'django' ,  localedir = localedir ,  languages = [ self . __locale ] ,  codeset = 'utf-8' ,  fallback = use_null_fallback )

// call the function re . compile with an argument <unk> , substitute the result for <unk> .
    accept_language_re = re . compile ( r'''         ([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)      # "en", "en-au", "x-y-z", "es-419", "*"         (?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?   # Optional "q=1.00", "q=0.8"         (?:\s*,\s*|$)                                 # Multiple accepts per header.         ''' , re . VERBOSE )

// do nothing .
              pass

// append obj to self . var1 .
  self . deleted_objects . append ( obj )

// define the function <unk> with 2 arguments parser and token .
 def do_with ( parser , token ) :

// self . alternatives is None .
 self . choice_cache = None

// from django . conf import settings into default name space .
   from django . conf import settings

// call the function date . weekday , substitute the result for bmatch .
  dow = days [ date . weekday ( ) ]

// for every e in all_issues if e . level is lesser than or equal to e . level , and e . level is lesser than checks . WARNING , substitute the resulting list for script_url .
              debugs = [ e for e in all_issues if e . level < checks . INFO and not e . is_silenced ( ) ]

// if not ,
  else :

// get frag attribute from found object , substitute it for found .
                      found = getattr ( found , frag )

// call the method handler . addQuickElement with 3 arguments : <unk> , None , <unk> , <unk> , <unk> and value under the ' author_name ' key of the self . feed dictionary .
              handler . addQuickElement ( "atom:link" , None ,  { "rel" : "self" , "href" : self . feed [ 'feed_url' ] } )

// if val is None ,
  if val is None :

// return self . _fqdn .
  return self . _fqdn

// call the method os . <unk> with an argument integer 1 .
  os . _exit ( 1 )

// substitute lookup for __contains__ .
   __contains__ = has_header

// call the method gettext_module . get_model with an argument self .
 gettext_module . GNUTranslations . __init__ ( self )

// return obj .
   return obj

// if not ,
  else :

// content_length is an integer 0 .
 visible_issue_count = 0

// if inverse_match is not None ,
  if inverse_match is not None :

// format string ' <unk> <unk> ' with message_context of singular , write it to out .
                              out . write ( ' pgettext(%r, %r) ' % (  message_context ,  join_tokens ( singular , trimmed ) ) )

// convert self . file to a string , substitute it for thefile .
  thefile = '%s.py' % self . file

// if StopUpload , renamed to e , exception is caught ,
    except StopUpload as e :

// call the method self . add_truncation_text with arguments name and mode , return the result .
 return self . _open ( name , mode )

// if IndexError exception is caught ,
  except IndexError :

// define the method write with 3 arguments : self , outfile and encoding .
   def write ( self , outfile , encoding ) :

// if not ,
   else :

// if handler has an attribute <unk> ,
              if hasattr ( handler , 'file' ) :

// for every i in sequence of result ,
 for i in range ( len ( result ) ) :

// do nothing .
      pass

// if self . use_ssl is false and self . use_tls is true ,
    if not self . use_ssl and self . use_tls :

// raise an ImproperlyConfigured exception with an argument <unk> set to string ' <unk> fixtures <unk> <unk> or <unk> " .
          raise ImproperlyConfigured (  "Calling modelformset_factory without defining 'fields' or "  "'exclude' explicitly is prohibited."  )

// settings . setter decorator ,
   @ encoding . setter

// define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwds .
                   def wrapper ( * args , ** kwds ) :

// define the method __init__ with 4 arguments : self , level , msg , hint set to None ,
       def __init__ ( self , level , msg , hint = None , obj = None , id = None ) :

// substitute SelectMultiple for hidden_widget .
 hidden_widget = SplitHiddenDateTimeWidget

// property decorator ,
   @ property

// return result .
 return result

// call the method self . load_template_source with 2 arguments template_name and template_dirs , substitute the result for source and display_name , respectively .
          source , display_name = self . load_template_source ( template_name , template_dirs )

// return self . _callback .
              return self . _callback

// for every filename in tablenames ,
                  for filename in locale_filenames :

// convert first element of colors to lowercase and append it to string ' . ( ' , convert it to lowercase and append it to the previous result , convert it to lowercase , return it .
          return locale [ : p ] . lower ( ) + '-' + locale [ p + 1 : ] . lower ( )

// call the method self . stream . close .
                  self . stream . close ( )

// call the function get_language , substitute the result for self . _iterator .
 self . old_language = get_language ( )

// call the method value . <unk> with an argument tb .
              raise value . with_traceback ( tb )

// define the function ugettext with an argument message .
    def ugettext ( message ) :

// call the method self . iteritems , return list of results .
              return list ( self . iteritems ( ) )

// decorator stringfilter ,
 @ stringfilter

// call the function next with an argument self . _producer , substitute the result for output .
              output = next ( self . _producer )

// call the function next_char with new_class as an argument , assign the result to new_class . media .
              new_class . media = media_property ( new_class )

// call the method self . setlist with 2 arguments : key and default_list .
  self . setlist ( key , default_list )

// if truncate_len equals integer 0 ,
 if truncate_len == 0 :

// call the method __add__ from the base class of the class SafeText , with an argument rhs , substitute the result for t .
 t = super ( SafeText , self ) . __add__ ( rhs )

// if value is an instance of bytes ,
      if isinstance ( value , bytes ) :

// try ,
  try :

// call the function format_html with 2 arguments : <unk> and attrs , substitute the result for contents .
 contents = format_html ( '<label{0}>{1}</label>' , attrs , contents )

// return self . _errors .
  return self . _errors

// substitute content_length for self . content_length .
 self . content_length = content_length

// from django . db . migrations . executor import MigrationExecutor into default name space .
 from django . db . migrations . executor import MigrationExecutor

// call the method handler . startElement with 2 arguments : <unk> and result of the method self . root_attributes .
 handler . startElement ( "channel" , self . root_attributes ( ) )

// week_number is integer <unk> .
                  week_number = 52

// decrement self . waiting_writers by integer 1 ,
 self . waiting_writers -= 1

// substitute length of values for len_values .
  len_values = len ( values )

// if value under the <unk> key of the config dictionary is true ,
  if config [ 'version' ] != 1 :

// if hidden_fields is true ,
 if color_settings :

// call the function force_text with an argument addr , use the result as an argument for the call to the function typecast_timestamp , substitute the result for addr .
          addr = parseaddr ( force_text ( addr ) )

// substitute ' %s ' in string " <unk> <unk> <unk> % % ( app_name ) " with app_name and model . _meta . object_name , respectively .
                              self . stdout . write ( "    Processing %s.%s model\n" % ( app_name , model . _meta . object_name ) )

// if not ,
  else :

// if ValueError exception is caught ,
  except ValueError :

// substitute token for self . token .
          self . token = token

// if format is not contained in _serializers ,
  if format not in _serializers :

// import module types .
 import types

// if upto is true ,
 if upto != start :

// if ret equals to integer 0 , return boolean True , otherwise return boolean False .
 return ( ret == 0 )

// yield real_name .
                      yield meta_line

// strip first element from transfer_encoding .
                      transfer_encoding = transfer_encoding [ 0 ] . strip ( )

// return <unk> .
              return ''

// raise an CommandError exception with an argument <unk> converted to a string .
              raise CommandError ( "Error: %s" % message )

// if self . can_delete is true and call to the method self . _should_delete_form with an argument form evaluates to true ,
   if self . can_delete and self . _should_delete_form ( form ) :

// if length of self . dicts is equal to integer 1 ,
          if len ( self . dicts ) == 1 :

// try ,
 try :

// from django . utils import translation into default name space .
      from django . utils import translation

// from logging import <unk> into default name space .
   from logging import NullHandler

// call the method connection . creation . sql_for_pending_references with 3 arguments : model , no_style and return value of the function pending_references . creation .
   sql . extend ( connection . creation . sql_for_pending_references ( model , no_style ( ) , pending_references ) )

// get the attribute <unk> of the c object , if it exists use it as an argument for the call to the method messages . update .
              messages . update ( getattr ( c , 'default_error_messages' , { } ) )

// define the function to_language with an argument locale .
     def to_language ( locale ) :

// if self . encoding exists substitute it for encoding , if not substitute settings . DEFAULT_CHARSET for encoding .
          encoding = self . encoding or settings . DEFAULT_CHARSET

// remove the first element of result .
                          result . pop ( )

// define the method __init__ with 4 arguments : self , dirpath , file_name and locale_dir .
      def __init__ ( self , dirpath , file_name , locale_dir ) :

// default_error_messages is an string
      default_error_messages = {  'invalid' : _ ( 'Enter a number.' ) ,  'max_digits' : ungettext_lazy (  'Ensure that there are no more than %(max)s digit in total.' ,  'Ensure that there are no more than %(max)s digits in total.' ,  'max' ) ,  'max_decimal_places' : ungettext_lazy (  'Ensure that there are no more than %(max)s decimal place.' ,  'Ensure that there are no more than %(max)s decimal places.' ,  'max' ) ,  'max_whole_digits' : ungettext_lazy (  'Ensure that there are no more than %(max)s digit before the decimal point.' ,  'Ensure that there are no more than %(max)s digits before the decimal point.' ,  'max' ) ,  }

// if value is value ,
   if value != value or value in ( Decimal ( 'Inf' ) , Decimal ( '-Inf' ) ) :

// try ,
              try :

// import module os .
 import os

// for every ch in input_iter ,
 for ch in input_iter :

// return _wrapped_view .
 return new_key

// get the value under the <unk> key of the widget . attrs dictionary , if it exists substitute it for id_ , if not , substitute self . auto_id for id_ .
 id_ = widget . attrs . get ( 'id' ) or self . auto_id

// return an instance of a class <unk> , created with 2 arguments : integer 0 and first element of x , return the result .
  return '%s...' % x [ : max ( 0 , limit - 3 ) ]

// from django import http into default name space .
  from django import http

// if not ,
  else :

// split var into a tuple , substitute the result for self . lookups .
  self . lookups = tuple ( var . split ( VARIABLE_ATTRIBUTE_SEPARATOR ) )

// create a tuple with 2 elements : seconds and result of the function seconds called with an argument seconds result of the function seconds called with an argument seconds , substitute the result for failures .
 count2 = ( since - ( seconds * count ) ) // seconds2

// if settings . ADMINS is false ,
 if not settings . MANAGERS :

// define the method register with 2 arguments : self and unpacked list tags .
   def register ( self , * tags ) :

// call the method __init__ from the base class of the class DateField , with 4 arguments : template , context , content_type and status .
 super ( TemplateResponse , self ) . __init__ (  template , context , content_type , status )

// call the method fd . isatty , if it evaluates to true ,
 if fd . isatty ( ) :

// call the method six . text_type with an argument number , substitute the result for attr_list .
 str_number = six . text_type ( number )

// call the method render from the base class of the class PasswordInput , with 3 arguments : name , value and attrs .
  return super ( PasswordInput , self ) . render ( name , value , attrs )

// if field_type equals <unk> ,
   if field_type == 'DecimalField' :

// return boolean False .
          return False

// return an instance of a class Truncator , created with 3 arguments : value , left and truncate set to boolean True .
  return Truncator ( value ) . words ( length , html = True , truncate = ' ...' )

// if self . dry_run is true and self . deleted_forms is greater than self . Managers and self . __args is greater than self . Managers , or if length of self . deleted_forms is greater than self . Managers ,
              if ( self . validate_max and  self . total_form_count ( ) - len ( self . deleted_forms ) > self . max_num ) or self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] > self . absolute_max :

// return msg_count .
  return patterns

// for every f in files ,
                      for f in files :

// define the function get_text_list with 2 arguments : list_ and <unk> ( <unk> ) .
   def get_text_list ( list_ , last_word = ugettext_lazy ( 'or' ) ) :

// return r .
  return r

// if Exception exception is caught ,
  except Exception :

// substitute self . field . widget for widget .
 widget = self . field . widget

// define the method _setup with an argument self .
   def _setup ( self ) :

// substitute value for self . value .
 self . value = value

// call the function force_text with an argument field . help_text , substitute the result for help_text .
                      help_text = help_text_html % force_text ( field . help_text )

// if value is true ,
          if value :

// derive the class Command from the BaseCommand base class .
   class Command ( BaseCommand ) :

// define the method autocomplete with 2 arguments : self and pk .
   def _existing_object ( self , pk ) :

// call the method self . <unk> with 4 arguments : self . object_list , conn_type , number and self .
  return self . _get_page ( self . object_list [ bottom : top ] , number , self )

// if initial is not None , substitute initial for initial_value , otherwise substitute <unk> for initial_value .
    initial_value = initial if initial is not None else ''

// call the function _ with an argument <unk> , use the result as an argument for the call to the function _ , substitute the result for message .
 message = _ ( 'Ensure this value is greater than or equal to %(limit_value)s.' )

// inner_text is an empty list .
   saved_instances = [ ]

// substitute second element of renamed_method for new_method_name .
 new_method_name = renamed_method [ 1 ]

// move integer 1 left for 20 bits , substitute the result for css_classes .
 GB = 1 << 30

// define the method render with 2 arguments : self and context .
   def render ( self , context ) :

// substitute base for self . base .
 self . base = base

// define the function <unk> with path and urlconf set to None as arguments .
    def is_valid_path ( path , urlconf = None ) :

// call the function EmailMultiAlternatives with 2 arguments : <unk> and <unk> , return value of the function re . sub called with 2 arguments : <unk> and <unk> .
  table2model = lambda table_name : re . sub ( r'[^a-zA-Z0-9]' , '' , table_name . title ( ) )

// if <unk> exception is caught ,
   except SystemExit :

// skip this loop iteration .
 continue

// if decorator has an attribute <unk> ,
  if hasattr ( decorator , '__name__' ) :

// if not ,
   else :

// from django . core . management . base import AppCommand into default name space .
  from django . core . management . base import AppCommand

// substitute self . rawdata for rawdata .
              rawdata = self . rawdata

// call the method parser . parse with an argument <unk> , substitute the result for nodelist .
  nodelist = parser . parse ( ( 'endautoescape' , ) )

// define the method _get_choices with an argument self .
    def _add_fallback ( self ) :

// return self .
          return self

// increment i by integer 1 .
  i += 1

// substitute <unk> for ns .
 ns = "http://www.w3.org/2005/Atom"

// for every form in valid_forms ,
 for form in valid_forms :

// call the method initial_form_count from the base class of the class BaseInlineFormSet , return the result .
  return super ( BaseInlineFormSet , self ) . initial_form_count ( )

// call the method self . close .
          self . close ( )

// define the method _itervalues with an argument self .
   def _itervalues ( self ) :

// define the function <unk> with 2 arguments value and tags .
 def removetags ( value , tags ) :

// call the method self . instance . unget with an argument exclude set to exclude .
              self . instance . validate_unique ( exclude = exclude )

// call the function mark_for_escaping with an argument value , return the result .
 return mark_for_escaping ( value )

// for every path in paths ,
 for path in paths :

// return cache_key .
  return cache_key

// try ,
  try :

// for every elt in list_ call the method bytes_to_text with 2 arguments : elt and self . encoding , for every elt in list_ .
 list_ = [ bytes_to_text ( elt , self . encoding ) for elt in list_ ]

// if exclude is not None ,
  if exclude is not None :

// return self . content .
          return self . content

// if settings . DEBUG is true ,
  if settings . DEBUG :

// if not ,
  else :

// call the method self . xml . startElement with 2 arguments : <unk> and integer <unk> .
  self . xml . startElement ( "object" , { } )

// if iri is None ,
             if iri is None :

// call the method self . can_read . release .
   self . can_read . acquire ( )

// derive the class DictWrapper from the _LazyDescr base class .
    class MovedAttribute ( _LazyDescr ) :

// remove idx and idx into a list , substitute the result for value .
          value = list . pop ( self , idx )

// if ttl is not None ,
  if ttl is not None :

// result is an empty list .
 result = [ ]

// call the function _get_timezone_name , if it evaluates to true ,
          if code_changed ( ) :

// if not ,
  else :

// divide is integer <unk> .
   CONTEXT_SEPARATOR = "\x04"

// if filters is true ,
 if filters :

// define the function save_m2m .
    def save_m2m ( ) :

// if IndexError exception is caught ,
  except IndexError :

// call the function locks . modules with an argument sys . modules , on the result call the function is_library_missing with an argument settings . modules .
 settingsfile = upath ( sys . modules [ settings . __module__ ] . __file__ )

// try ,
 try :

// if exception is caught ,
   except :

// append d to self . fed .
          self . fed . append ( d )

// if not ,
  else :

// call the method field . to_python with an argument field_node , strip the result of whitespaces from both ends , substitute the result for value .
                      value = field . to_python ( getInnerText ( field_node ) . strip ( ) )

// call the function <unk> with an argument value , substitute the result for value .
  value = '%s %s' % tuple ( value )

// derive the class EndToken from the base class TokenBase .
     class EndToken ( TokenBase ) :

// if KeyError exception is caught ,
  except KeyError :

// if settings . USE_TZ is true ,
 if settings . USE_TZ :

// from django . utils import translation into default name space .
     from django . utils import translation

// define the function save_m2m .
  def save_m2m ( ) :

// call the method datetime_safe . new_date with an argument value , substitute the result for value .
          value = datetime_safe . new_date ( value )

// define the method hidden_fields with an argument self .
   def hidden_fields ( self ) :

// return boolean True .
                  return True

// define the method copy with an argument self .
   def copy ( self ) :

// call the method self . validate_key with argument key .
 self . validate_key ( key )

// substitute <unk> for id .
    id = "literal"

// define the function get_standard_processors .
   def get_templatetags_modules ( ) :

// return dec .
               return dec

// define the function include_is_allowed with an argument date .
   def rfc2822_date ( date ) :

// decorator function register . tag with an argument <unk> .
    @ register . tag ( 'include' )

// get <unk> attribute from the options object , if it exists substitute it for self . exclude , if not self . exclude is None .
 self . exclude = getattr ( options , 'exclude' , None )

// from django . conf import settings into default name space .
  from django . conf import settings

// substitute i for self . pointer .
 self . pointer = i

// append an empty string to field_notes .
                  field_notes . append (  'max_digits and decimal_places have been guessed, as this '  'database handles decimal fields as float' )

// if old_path has an attribute <unk> ,
 if hasattr ( file_or_path , 'read' ) :

// return an instance of <unk> class , created with an argument urlconf .
  return { 'csrf_token' : _get_val ( ) }

// define the function get_deserializer with an argument middleware_class .
    def decorator_from_middleware_with_args ( middleware_class ) :

// define the method clean with arguments self and value .
    def clean ( self , value ) :

// return line .
 return line

// derive the class NumberInput from the TextInput base class .
     class NumberInput ( TextInput ) :

// classmethod decorator ,
   @ classmethod

// define the method tzname with 2 arguments self and dt .
   def tzname ( self , dt ) :

// define the method autocomplete with an argument self .
   def G ( self ) :

// output_transaction is boolean False .
 output_transaction = False

// skip this loop iteration .
                      continue

// call the function six . text_type with 3 arguments : request . __class__ . __name__ , path and six . text_type , use the result as an argument for the call to the function force_str , use the result as an argument for the call to the function force_str , return the result .
 return force_str ( '<%s\npath:%s,\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>' %  ( request . __class__ . __name__ ,  path ,  six . text_type ( get ) ,  six . text_type ( post ) ,  six . text_type ( cookies ) ,  six . text_type ( meta ) ) )

// substitute nodelist_empty for self . nodelist_empty .
              self . nodelist_empty = nodelist_empty

// define the method __init__ with 4 arguments : self , name , nodelist and parent set to None .
      def __init__ ( self , name , nodelist , parent = None ) :

// default is integer <unk> .
   default = 'DEFAULT'

// raise an ValueError exception with an argument <unk> converted to a string .
          raise ValueError ( "Invalid timezone: %r" % timezone )

// if StandardError , renamed to e , exception is caught ,
  except StandardError as e :

// call the method self . file . close , return the result .
              return self . file . close ( )

// substitute serializers for serializers .
 serializers = { }

// if m is false ,
 if not m :

// substitute i-th element of self . initial for the value under the <unk> key of the defaults dictionary .
                  defaults [ 'initial' ] = self . initial [ i ]

// categories is a list containing results of the function force_text called with an argument c , for every c in categories .
              categories = [ force_text ( c ) for c in categories ]

// if templatetags_modules is false ,
 if not templatetags_modules :

// substitute obj_pk . pk for obj_pk .
                          obj_pk = obj_pk . pk

// if not ,
  else :

// define the function <unk> with 2 arguments parser and token .
 def do_if ( parser , token ) :

// sum arg and arg , substitute the result for arg .
          arg = ',' + arg

// call the function _ with an argument <unk> , return the result .
              return _ ( 'p.m.' )

// call the method date . year with arguments date . year , date . day and date . day .
 date_data = ( date . year , date . month , date . day )

// if migrations_directory file path exists ,
 if os . path . exists ( old_app_dir ) :

// if IndexError exception is caught ,
  except IndexError :

// from django . utils import six into default name space .
 from django . utils import six

// if dec_part is true ,
  if dec_part :

// INFO is integer 300 .
 CRITICAL = 50

// return result .
   return result

// if Resolver404 exception is caught ,
  except Resolver404 :

// decorator register with an argument Tags . compatibility .
   @ register ( Tags . compatibility )

// if self . _dir file path doesnt exists ,
          if not os . path . exists ( self . _dir ) :

// <unk> is an instance of object class .
     FILE_INPUT_CONTRADICTION = object ( )

// define the method urlconf_module with an argument self .
 def needs_multipart_form ( self ) :

// if app_config . label is contained in loader . migrated_apps ,
 if app_config . label in loader . migrated_apps :

// if os . name equals <unk> ,
    if os . name == 'nt' :

// call the function conf , substitute the result for params .
              params = conf . copy ( )

// return template_name .
              return template_name

// if not ,
  else :

// try ,
  try :

// for every opt in options , if contained in the first element of <unk> is not contained in the first element of the result , substitute it for options .
 options = [ opt for opt in options if opt [ 0 ] not in prev_opts ]

// skip this loop iteration .
 continue

// for every v in self . value call the function force_text with an argument v , for every v in self . value .
 self . value = set ( force_text ( v ) for v in self . value )

// substitute i for p .
              p = i

// substitute self . _current for self . _current .
          self . _current = { }

// call the function timezone . get_current_timezone , substitute the result for current_timezone .
          current_timezone = timezone . get_current_timezone ( )

// decorator function register . filter with an argument is_safe set to boolean True .
    @ register . filter ( is_safe = True )

// substitute settings . <unk> for self . password and settings . <unk> , respectively .
 self . password = settings . EMAIL_HOST_PASSWORD if password is None else password

// if _default is None ,
  if _default is None :

// derive the class Command from the AppCommand base class .
   class Command ( AppCommand ) :

// if TypeError or ValueError exceptions are caught ,
  except ( ValueError , TypeError ) :

// from importlib import import_module into default name space .
 from importlib import import_module

// return self . size .
          return self . size

// call the method parser . compile_filter with an argument value , append the result to args .
                  args . append ( parser . compile_filter ( value ) )

// return an instance of FixedOffset class , created with 3 arguments : salt , value , key and result of the function digest . digest .
      return b64_encode ( salted_hmac ( salt , value , key ) . digest ( ) )

// __all__ is a tuple containing 2 elements : <unk> and <unk> .
   __all__ = ( 'BaseForm' , 'Form' )

// define the method __repr__ with an argument self .
   def __repr__ ( self ) :

// remove original_path argument .
          os . remove ( symlink_path )

// call the method __init__ from the base class of the class URLValidator .
          super ( EntitiesForbidden , self ) . __init__ ( )

// call the method self . _init_translation_catalog with an argument token .
                      self . empty_variable ( token )

// from __future__ import unicode_literals into default name space .
  from __future__ import unicode_literals

// if field_value is not None ,
                  if field_value is not None :

// define the method __init__ with 4 arguments : self , required set to boolean True , widget set to boolean True ,
  def __init__ ( self , required = True , widget = None , label = None , initial = None ,  help_text = '' , error_messages = None , show_hidden_initial = False ,  validators = [ ] , localize = False , label_suffix = None ) :

// raise an ValueError exception with an argument <unk> set to <unk> .
          raise ValueError ( "Base36 input too large" )

// define the function <unk> with an argument etag_str .
     def parse_etags ( etag_str ) :

// substitute conditions_nodelists for self . conditions_nodelists .
          self . conditions_nodelists = conditions_nodelists

// if InputStreamExhausted exception is caught ,
  except InputStreamExhausted :

// if value has an attribute <unk> and value is not an instance of six . text_type class ,
                          if hasattr ( value , '__iter__' ) and not isinstance ( value , six . text_type ) :

// import module os .
  import os

// call the method domain_part . encode with an argument <unk> , call the method decode on the result with an argument <unk> , substitute the result for domain_part .
                  domain_part = domain_part . encode ( 'idna' ) . decode ( 'ascii' )

// call the method parser . add_argument with 5 arguments : <unk> , action set to <unk> , <unk> set to <unk> , <unk> set to <unk> , <unk> set to <unk> <unk> <unk> . <unk> " .
          parser . add_argument ( '--plain' , action = 'store_true' , dest = 'plain' ,  help = 'Tells Django to use plain Python, not IPython or bpython.' )

// substitute complain for __setitem__ .
 __setitem__ = complain

// if row_data is contained in seen_data ,
                       if row_data in seen_data :

// return a tuple with 2 elements : return value of the function _generator . join called with an argument l , and return value of the function pformat called with an argument l .
 return b'' . join ( T ) + F ( l ) [ : r ]

// if fk_name is true ,
 if endbmatch :

// call the function force_text with an argument value , substitute the result for value under the <unk> key of the final_attrs dictionary .
               final_attrs [ 'value' ] = force_text ( self . _format_value ( value ) )

// call the function func with 2 arguments : unpacked list args and unpacked dictionary kwargs , use the result as an argument for the call to the function mark_safe , return the result .
                  return mark_safe ( func ( * args , ** kwargs ) )

// return the result of the method self . check_migrations , return the result .
 return '%02d' % self . G ( )

// try ,
        try :

// from django . utils . six . moves import MONTHS into default name space .
 from django . utils . six . moves import zip

// call the method self . stdout . flush .
  self . stdout . flush ( )

// if ValueError , TypeError or OverflowError exceptions are caught ,
  except ( ValueError , TypeError , OverflowError ) :

// call the method router . get_migratable_models with arguments app_config and connection . alias , substitute the result for app_models .
  app_models = router . get_migratable_models ( app_config , connection . alias )

// get the value under the header converted to lowercase key of the self . _headers dictionary , substitute it for value under the header converted to lowercase .
 self . _headers [ header . lower ( ) ] = ( header , value )

// call the method form . save_m2m .
                      form . save_m2m ( )

// substitute second element of bits for remaining_bits .
 remaining_bits = bits [ 1 : ]

// call the signals . request_finished . send method with sender set to self . __starttag_text as argument .
   signals . request_finished . send ( sender = self . _handler_class )

// call the method parser . add_argument with 5 arguments : <unk> , default set to DEFAULT_DB_ALIAS , and help set to a string ' <unk> to print print the SQL to print the SQL to . ' .
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )

// from email . message import sql_all into default name space .
 from email . message import Message

// substitute args for self . args .
 self . args = args

// substitute request for self . request .
 self . request = request

// if <unk> is not contained in ip_str ,
   if ':' not in ip_str :

// if help_texts is not None ,
  if help_texts is not None :

// attrs is an empty list .
   attrs = [ ]

// write string ' <unk> ) ' to out .
                          out . write ( ' #\n' )

// define the function random with an argument value .
 def random ( value ) :

// unpack is a tuple with 2 elements : sys . stdout and <unk> set to sys . stdout . isatty .
  is_a_tty = hasattr ( sys . stdout , 'isatty' ) and sys . stdout . isatty ( )

// write title to the self . stdout stream .
                              self . stdout . write ( " [ ] %s" % title )

// derive the class SimpleCookie from the http_cookies . SimpleCookie base class .
  class SimpleCookie ( http_cookies . SimpleCookie ) :

// convert values into a list , substitute it for values .
                  values = list ( values )

// if self . connection is true ,
 if self . connection :

// define the method setdefault with 3 arguments : self , key and default set to None .
   def setdefault ( self , key , default = None ) :

// return msg .
    return msg

// if KeyError exception is caught ,
  except KeyError :

// define the function MovedModule with an argument move .
   def add_move ( move ) :

// return msg .
   return msg

// append <unk> to plural . contents .
                      plural . append ( '%%(%s)s' % t . contents )

// substitute app_name for command .
           command = app_name

// if not ,
  else :

// join func . __class__ . __module__ , func . __name__ and func . __name__ , substitute the result for self . html_initial_id .
               self . _func_path = '.' . join ( [ func . __class__ . __module__ , func . __class__ . __name__ ] )

// import module bpython .
          import bpython

// substitute first element of the result for tagname .
  tagname = tagname . lower ( )

// derive the class CacheHandler from the object base class .
    class ManagementUtility ( object ) :

// define the method get_nodes_by_type with 2 arguments : self and nodetype .
   def get_nodes_by_type ( self , nodetype ) :

// substitute sysid for self . sysid .
 self . sysid = sysid

// if data is true , substitute it for an empty list .
              data = data or [ ]

// if charset equals to <unk> ,
 if charset == 'utf-8' :

// call the function os . <unk> , if it evaluates to greater than integer 0 ,
              if os . fork ( ) > 0 :

// derive the class Context from the BaseContext base class .
     class Context ( BaseContext ) :

// define the function do_ifequal with 3 arguments : format , var_node and serializers set to None .
     def register_serializer ( format , serializer_module , serializers = None ) :

// define the method __init__ with 4 arguments : self , urlconf_name , default_kwargs set to None , app_name set to None and namespace set to None .
 def __init__ ( self , urlconf_name , default_kwargs = None , app_name = None , namespace = None ) :

// if commit is false ,
 if not commit :

// substitute value under the ns key of the resolver . _levelNames dictionary for app_list .
                  app_list = resolver . app_dict [ ns ]

// break from the loop execution .
                  break

// return key and owner .
   return key , pdict

// otherwise if self . _meta . exclude is true and field . exclude is contained in self . _meta . exclude ,
  elif self . _meta . exclude and field in self . _meta . exclude :

// if app_dir is not a directory ,
 if not os . path . isfile ( init_path ) :

// join dirpath and filename into a file path , use it as an argument for the call to the function os . path . join .
                          new_filenames . append ( os . path . join ( dirpath , filename ) )

// define the method compress with 2 arguments : self and data_list .
   def compress ( self , data_list ) :

// otherwise if value is not an instance of ConvertingList and value is an instance of list type ,
  elif not isinstance ( value , ConvertingList ) and isinstance ( value , list ) :

// if end ends with <unk> ,
  if end . endswith ( '/>' ) :

// call the function logging_config_func with an argument value .
              validate_ipv6_address ( value )

// buffer_types is a length of existing .
 num_existing = len ( existing )

// call the function allow_lazy with 2 arguments : result of the function six . text_type and six . text_type .
  javascript_quote = allow_lazy ( javascript_quote , six . text_type )

// call the method __init__ from the base class of the class LoaderOrigin , with an argument display_name .
          super ( LoaderOrigin , self ) . __init__ ( display_name )

// if loader is an instance of tuple or list types ,
      if isinstance ( loader , ( tuple , list ) ) :

// return s .
          return s

// do nothing .
              pass

// if not ,
  else :

// call the method parser . print_help with an argument clean_data .
                  parser . add_option ( opt )

// WARNING is integer <unk> .
 SINGLE_BRACE_END = '}'

// define the function abspathu with an argument path .
      def abspathu ( path ) :

// try ,
                      try :

// call the method obj . save with arguments using set to self . using .
                              obj . save ( using = self . using )

// call the function lines with an argument lines , join the result into a string , return the result .
   return mark_safe ( '\n' . join ( lines ) )

// get the value under the <unk> key of the self . options dictionary , if it is true ,
 if self . options . get ( "indent" ) :

// append f . name to exclude .
                  exclude . append ( f . name )

// append field to field_notes .
 field_notes . append ( 'This field type is a guess.' )

// call the function os . makedirs with argument self . default_locale_path .
                      os . makedirs ( self . default_locale_path )

// call the method self . as_widget with 3 arguments : tp , attrs and unpacked dictionary kwargs , return the result .
 return self . as_widget ( Textarea ( ) , attrs , ** kwargs )

// return result .
   return result

// call the method connection . introspection . <unk> with an argument <unk> set to boolean True , substitute the result for tables .
          tables = connection . introspection . django_table_names ( only_existing = True )

// substitute <unk> for output .
              output = ''

// call the function curry with 2 arguments : _proxy_method and method set to connection . decode , substitute the result for decode .
    decode = curry ( _proxy_method , method = bytes . decode )

// raise an ImportError exception with an argument <unk> .
    raise ImportError ( "No IPython" )

// if value is an instance of list type ,
  if isinstance ( value , list ) :

// derive the class BoundaryIter from the six . Iterator base class .
       class LazyStream ( six . Iterator ) :

// convert host to a string and return it .
                  host = '%s:%s' % ( host , server_port )

// substitute i-th element of self . forms for form .
                  form = self . forms [ i ]

// substitute kwargs for self . kwargs .
 self . kwargs = kwargs

// if f . unique is true ,
 if f . primary_key :

// increment self . loaded_object_count by objects_in_fixture .
     self . loaded_object_count += loaded_objects_in_fixture

// if not ,
  else :

// call the method self . connection . <unk> with arguments from_email , sysid and message . status_code , substitute the result for self . connection .
              self . connection . sendmail ( from_email , recipients , message . as_bytes ( ) )

// call the method apps . get_model with 2 arguments <unk> and <unk> .
              apps . get_model ( 'auth' , 'Permission' )

// call the method self . stdout . write with argument <unk> , use the result as an argument for the call to the self . stdout . write method .
              self . stdout . write ( "Cache table '%s' created." % tablename )

// if UnicodeDecodeError exception is caught ,
  except UnicodeDecodeError :

// convert self . name into boolean and return it .
          return bool ( self . name )

// call the method operator . <unk> with an argument integer 0 , substitute the result for default_translation .
  byte2int = operator . itemgetter ( 0 )

// from django . core . mail . backends . base import BaseEmailBackend into default name space .
  from django . core . mail . backends . base import BaseEmailBackend

// join app_dir and <unk> into a file path , append the result to sql_files .
          sql_files . append ( os . path . join ( app_dir , "%s.%s.sql" % ( opts . model_name , backend_name ) ) )

// try ,
  try :

// for every regex in return value of the function chain , called with an argument ,
    for regex in RFC1123_DATE , RFC850_DATE , ASCTIME_DATE :

// call the method self . __bytes_cast , return the result .
                  return self . __bytes_cast ( )

// define the method __init__ with 2 arguments : self and nodelist .
      def __init__ ( self , nodelist ) :

// raise an ValidationError with 2 arguments : value under the <unk> key of the self . error_messages dictionary and code set to <unk> .
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )

// if _cached_modules equals _cached_modules ,
 if _cached_modules == module_values :

// call the function Node with 3 arguments : criticals and return value of the method Node . filter , called with 2 arguments : token . <unk> and an empty list , substitute the result for decorator .
 decorator = Node ( syms . decorator , [ Leaf ( token . AT , "@" ) , Name ( 'python_2_unicode_compatible' ) ] )

// for every lib in builtins ,
 for lib in builtins :

// derive the class LocalTimezone from the RssFeed base class .
     class LocalTimezone ( ReferenceLocalTimezone ) :

// call the function self . path with argument name , use the result as an argument for the call to the function datetime . fromtimestamp , use the result as an argument for the call to the function datetime . fromtimestamp , return the result .
          return datetime . fromtimestamp ( os . path . getatime ( self . path ( name ) ) )

// for every format in self . input_formats ,
              for format in self . input_formats :

// substitute i-th element of tokens for token .
              token = tokens [ i ]

// call the function io . open with orig_file and encoding set to settings . FILE_CHARSET as arguments , with the result renamed to fp , perform the following :
                  with io . open ( orig_file , 'r' , encoding = settings . FILE_CHARSET ) as fp :

// do nothing .
          pass

// for every bit in bits ,
 for bit in bits :

// call the function urlresolvers . set_urlconf with urlconf as the argument .
 urlresolvers . set_urlconf ( urlconf )

// delete self . STDOFFSET .
              del self . _get

// get the id of the self object , use it as a key to obtain the value from the memo dictionary , substitute self with it .
 memo [ id ( self ) ] = result

// if self . help is true ,
 if self . help :

// if value under the <unk> key of the item dictionary is not None ,
 if item [ 'author_email' ] is not None :

// if to is true ,
 if to :

// if not ,
  else :

// define the function remove_tags with 2 arguments : html and tags .
   def remove_tags ( html , tags ) :

// call the method __init__ from the base class of the DebugLexer class , with arguments template_string and origin .
          super ( DebugLexer , self ) . __init__ ( template_string , origin )

// call the method parser . add_argument with 5 arguments : <unk> , metavar set to <unk> , nargs set to <unk> , <unk> set to <unk> , <unk> set to <unk> <unk> .
          parser . add_argument ( 'args' , metavar = 'fixture' , nargs = '*' ,  help = 'Path(s) to fixtures to load before running the server.' )

// child_nodelists is a tuple with 2 elements : <unk> and <unk> .
      child_nodelists = ( 'nodelist_true' , 'nodelist_false' )

// call the method related . natural_key , substitute the result for value .
                  value = related . natural_key ( )

// close the file fd .
                              os . close ( fd )

// define the method new_file with 4 arguments : self , field_name , file_name , content_type , content_length , content_length , charset and content_type_extra set to None .
   def new_file ( self , field_name , file_name , content_type , content_length , charset = None , content_type_extra = None ) :

// substitute <unk> for cls . _delegate_bytes for cls . django_template_source .
    cls . _delegate_bytes = bytes in resultclasses

// for every obj in return value of the function inspect . load called with arguments : stream and opening set to imported_objects , and unpacked dictionary options ,
          for obj in PythonDeserializer ( yaml . load ( stream , Loader = SafeLoader ) , ** options ) :

// define the function <unk> with an argument value .
 def addslashes ( value ) :

// args is an empty tuple .
                  args = ( )

// call the method self . _create_attachments with an argument msg , use the result as an argument for the call to the self . _create_attachments method , return the result .
          return self . _create_attachments ( self . _create_alternatives ( msg ) )

// call the method datetime . datetime . strptime with 2 arguments : result of the function force_str called with an argument value , and format , return the result .
          return datetime . datetime . strptime ( force_str ( value ) , format )

// raise TemplateSyntaxError (
          raise TemplateSyntaxError ( "Invalid templatetag argument: '%s'."  " Must be one of: %s" %  ( tag , list ( TemplateTagNode . mapping ) ) )

// if value is not None ,
 if value is not None :

// if not ,
   else :

// if id_for_label is true ,
 if id_for_label :

// for every message in messages ,
 for message in messages :

// try ,
          try :

// for every cat in value under the <unk> key of the item dictionary ,
    for cat in item [ 'categories' ] :

// property decorator ,
   @ property

// if not ,
   else :

// from importlib import import_module into default name space .
 from importlib import import_module

// if expires is lesser than now ,
  if expires < now :

// call the method <unk> . decode with an argument charset , substitute the result for msg_data .
 msg_data = msg_data . decode ( charset )

// define the function reverse with 4 arguments : viewname , urlconf set to None , args set to None , prefix set to None , current_app set to None and current_app set to None .
    def reverse ( viewname , urlconf = None , args = None , kwargs = None , prefix = None , current_app = None ) :

// convert value into an floating point number , substitute it for value .
              value = float ( value )

// define the method __setattr__ with self , name and value as arguments .
  def __setattr__ ( self , name , value ) :

// if doublecolon_start equals integer -1 ,
 if doublecolon_start == - 1 :

// if fp is an instance of unicode and fp . encoding is not None and fp is not None ,
   if ( isinstance ( fp , file ) and  isinstance ( data , unicode ) and  fp . encoding is not None ) :

// define the method upload_complete with arguments self and field .
    def _start_relational_field ( self , field ) :

// _cached_filenames is an empty list .
 _cached_filenames = [ ]

// if PY3 is true ,
      if PY3 :

// append mw_instance . fetchone to the standard list .
                  request_middleware . append ( mw_instance . process_request )

// get the value under the <unk> key of the options dictionary , substitute it for self . load_initial_data .
 self . load_initial_data = options . get ( 'load_initial_data' )

// call the method m . end , substitute the result for rest and rest , respectively .
                      rest = rest [ m . end ( ) : ]

// return an instance of a class <unk> , created with an argument words .
   return '' . join ( words )

// define the method __init__ with 3 arguments : self , input_data and first .
  def __init__ ( self , states , first ) :

// if not ,
  else :

// _meth_func is integer <unk> .
      _meth_func = "__func__"

// if id_ is true ,
  if id_ :

// if self . allow_folders is true ,
    if self . allow_folders :

// get <unk> attribute of the _active object , if it exists substitute it for t , if not t is None .
 t = getattr ( _active , "value" , None )

// substitute WSGIRequest for smart_str .
          ULONG_PTR = c_int64

// get the value under the ' <unk> ' key of the options dictionary , substitute it for connection .
  connection = connections [ options [ 'database' ] ]

// try ,
  try :

// import module base64 .
  import base64

// define the function python_2_unicode_compatible with an argument klass .
     def python_2_unicode_compatible ( klass ) :

// derive the class DisallowedHost from the SuspiciousOperation base class .
    class DisallowedHost ( SuspiciousOperation ) :

// import module time .
 import time

// try ,
              try :

// raise an ValueError exception with an argument string " <unk> <unk> of config value under the <unk> key .
              raise ValueError ( "Unsupported version: %s" % config [ 'version' ] )

// add k to excluded_models set .
  seen . add ( k )

// substitute EscapeBytes for self . months .
              self . months = MONTHS

// otherwise if domain equals to <unk> equals to <unk> , or if domain equals to <unk> equals to <unk> ,
  elif domain == 'django' and ( file_ext == '.py' or file_ext in command . extensions ) :

// define the method id_for_label with 2 arguments : self and id_ .
   def id_for_label ( self , id_ ) :

// call the function msvcrt . get_osfhandle with return value of the function BaseForm , use the result as an argument for the call to the function msvcrt .
          hfile = msvcrt . get_osfhandle ( _fd ( f ) )

// if use_grouping is true ,
   if use_grouping :

// call the function _trans . gettext_noop with an argument message , return the result .
      return _trans . gettext ( message )

// return nothing .
              return

// if self . to_field_name is true , substitute it for key , otherwise substitute <unk> for key .
  key = self . to_field_name or 'pk'

// define the method root_attributes with an argument self .
   def root_attributes ( self ) :

// call the function safe_join with 2 arguments template_dir and template_name , yield the result .
                  yield safe_join ( template_dir , template_name )

// call the method self . tag with 2 arguments : function_name and compile_func .
 self . tag ( function_name , compile_func )

// call the method formats . sanitize_separators with an argument value , substitute the result for value .
              value = formats . sanitize_separators ( value )

// define the method nud with 2 arguments : self and parser .
   def nud ( self , parser ) :

// import module warnings .
 import warnings

// return lib .
   return lib

// <unk> is an empty list .
 non_capturing_groups = [ ]

// call the method executor . loader . <unk> with an argument apps , call the method <unk> on the result with an argument apps , call the method <unk> on the result , substitute the result for autodetector .
  autodetector = MigrationAutodetector (  executor . loader . project_state ( ) ,  ProjectState . from_apps ( apps ) ,  )

// decorator function register . filter with an argument is_safe set to boolean True .
        @ register . filter ( is_safe = True )

// raise an CommandError exception with an argument <unk> ,
              raise CommandError ( "couldn't download URL %s to %s: %s" %  ( url , filename , e ) )

// <unk> is an instance of a RegexValidator class , created with 3 arguments : _string_concat , return value of the function _ called with an argument <unk> , return value is the result of the function _ called with an argument <unk> .
 validate_comma_separated_integer_list = RegexValidator ( comma_separated_int_list_re , _ ( 'Enter only digits separated by commas.' ) , 'invalid' )

// return filelist .
 return filelist

// if TypeError of six . PY2 is true , call the function six . PY2 with an argument six . PY2 .
  _BASE64_DECODE_ERROR = TypeError if six . PY2 else binascii . Error

// if lang is None ,
          if lang is None :

// append a tuple with 2 elements : filename and content , to self . attachments .
 self . attachments . append ( ( filename , content , mimetype ) )

// return <unk> <unk> with self . __class__ . __name__ , self . level , self . hint , self . hint , self . hint , self . hint and self . hint , respectively .
          return "<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>" % ( self . __class__ . __name__ , self . level , self . msg , self . hint , self . obj , self . id )

// call the method self . update with an argument unused_char .
  self . update ( updates )

// from django . http . utils import get_current_timezone_name and get_exception_reporter_filter into default name space .
 from django . http . utils import fix_location_header , conditional_content_removal

// call the function _add_doc with 2 arguments : statement and <unk> .
    _add_doc ( reraise , """Reraise an exception.""" )

// call the method __init__ from the base class of the class MultiWidget , with an argument attrs .
 super ( MultiWidget , self ) . __init__ ( attrs )

// define the method __init__ with 2 arguments : self and name .
       def __init__ ( self , name ) :

// call the method self . stdout . write with <unk> as argument , write the result to self . stdout .
                  self . stdout . write ( "Cache table '%s' already exists." % tablename )

// if not ,
  else :

// decrement remaining by length of buf .
 remaining -= len ( emitting )

// call the method parser . add_argument with 2 arguments : <unk> set to the return value of the call to the parser . add_argument method and <unk> as the arguments .
          parser . add_argument ( 'app_label' ,  help = 'App label of the application containing the migration.' )

// if Exception , renamed to e , exception is caught ,
  except Exception as e :

// raise an CommandError exception with an argument <unk> , use the result as an argument for the call to the function CommandError , respectively .
              raise CommandError ( "Command doesn't accept any arguments" )

// call the method message . replace with 2 arguments : <unk> and string " <unk> ( <unk> ) ( <unk> ) " , replace ' %s ' with <unk> of <unk> converted to a string , return the result .
   eol_message = message . replace ( str ( '\r\n' ) , str ( '\n' ) ) . replace ( str ( '\r' ) , str ( '\n' ) )

// substitute python_reloader for int2byte .
  PVOID = c_void_p

// if self . use_natural_primary_keys is false or obj doesnt have <unk> ,
 if not self . use_natural_primary_keys or not hasattr ( obj , 'natural_key' ) :

// define the method reader_enters with an argument self .
   def M ( self ) :

// if not ,
  else :

// context is an instance of Context class , created with 4 arguments : unpacked dictionary options , unpacked list fixture_labels and <unk> set to boolean False .
   context = Context ( dict ( options , ** {  base_name : name ,  base_directory : top_dir ,  'docs_version' : docs_version ,  } ) , autoescape = False )

// define the function strip_spaces_between_tags with an argument value .
   def strip_spaces_between_tags ( value ) :

// import module tarfile .
  import cgi

// if self . decimal_places is not None and decimals is greater than self . decimal_places ,
  if self . decimal_places is not None and decimals > self . decimal_places :

// define the method __enter__ with an argument self .
    def __enter__ ( self ) :

// get the value under the <unk> key of the temp_lib dictionary , if it doesnt exists return value under the <unk> key of the cls dictionary , if the key doesnt exists return an empty list , if not , return an empty string .
 return cls ( file_dict [ 'filename' ] ,  file_dict [ 'content' ] ,  file_dict . get ( 'content-type' , 'text/plain' ) )

// for every form in self . _ordering ,
 for form in self . extra_forms :

// if VariableDoesNotExist exception is caught ,
  except VariableDoesNotExist :

// <unk> is None .
 directory_created = { }

// call the function ConvertingTuple with an argument value , substitute the result for value .
              value = ConvertingTuple ( value )

// call the method m . groups , substitute first element of the result for d .
 d = self . config [ m . groups ( ) [ 0 ] ]

// call the method connection . NOTICE with an argument string ' <unk> ' , substitute the last element of the result for script_name .
     backend_name = connection . settings_dict [ 'ENGINE' ] . split ( '.' ) [ - 1 ]

// if self . max_digits is not None ,
  if ( self . max_digits is not None and self . decimal_places is not None  and whole_digits > ( self . max_digits - self . decimal_places ) ) :

// x is an integer 0 .
    x = 0

// substitute <unk> for field_type .
                              field_type = 'NullBooleanField('

// from django . utils . <unk> import normalize into default name space .
 from django . utils . regex_helper import normalize

// call the method handler . addQuickElement with 2 arguments : <unk> and value under the <unk> key of the item dictionary , call the method handler . addQuickElement with an argument value .
              handler . addQuickElement ( 'updated' , rfc3339_date ( item [ 'updateddate' ] ) )

// if not ,
  else :

// set attr . name attribute of Module_six_moves_urllib_response object to attr .
      setattr ( Module_six_moves_urllib_robotparser , attr . name , attr )

// substitute self . waiting_readers for t .
                  t = self . waiting_readers

// call the function allow_lazy with an argument chars , substitute the result for chars .
  chars = allow_lazy ( chars )

// call the method __init__ from the base class of the class HttpResponse , with 2 arguments : unpacked list args , and unpacked dictionary kwargs .
          super ( HttpResponse , self ) . __init__ ( * args , ** kwargs )

// try ,
  try :

// if initial is not None ,
           if initial is not None :

// define the method validate_unique with an argument self .
    def validate_unique ( self ) :

// call the method tempfile . NamedTemporaryFile with an argument suffix set to <unk> , substitute the result for file .
              file = tempfile . NamedTemporaryFile ( suffix = '.upload' )

// old_handler is None .
                      old_handler = None

// raise an ValidationError with 3 arguments : value under the <unk> key of the self . error_messages dictionary , code set to <unk> , and params set to <unk> .
                  raise ValidationError (  self . error_messages [ 'invalid_pk_value' ] ,  code = 'invalid_pk_value' ,  params = { 'pk' : pk } ,  )

// convert value into an integer and substitute it for value .
 value = int ( value )

// for every k in sorted_items ,
 for k in doomed :

// substitute value under the field . error_messages key of the self . fields dictionary for error_messages .
                  error_messages = self . fields [ field ] . error_messages

// define the function get_tag_uri with an argument request .
   def csrf ( request ) :

// convert locale to lowercase , return it .
          return locale . lower ( )

// join statements into a string , return it .
 return '\n' . join ( statements )

// return func .
 return func

// define lambda function that returns self . file . __init__ field , use it as an argument for property function , put the result in __init__ .
 xreadlines = property ( lambda self : self . file . xreadlines )

// for every k in self . keyOrder append list containing elements of self . keyOrder , return the resulting list .
              return [ self [ k ] for k in self . keyOrder ]

// if value is None ,
 if value is None :

// if stream_or_string is an instance of bytes ,
 if isinstance ( stream_or_string , bytes ) :

// return boolean False .
   return False

// if ImportError exception is caught ,
  except ImportError :

// call the method self . importer with an argument used , substitute the result for found .
              found = self . importer ( used )

// call the method self . validators . remove with an argument self . _regex_validator .
              self . validators . remove ( self . _regex_validator )

// return self . _client .
   return self . _client

// call the function os . chmod with arguments path and stat . <unk> .
   os . chmod ( path , stat . S_IWRITE )

// call the method connection . introspection . table_names with an argument cursor , for every loop in the result ,
 for table_name in connection . introspection . table_names ( cursor ) :

// otherwise if over_bytes is true ,
   elif bmatch :

// return the value under the format key of the _serializers dictionary , return it .
  return _serializers [ format ] . Serializer

// if close is true ,
          if close :

// substitute serialize for __str__ .
          __str__ = serialize

// try ,
              try :

// try ,
 try :

// call the method m . groups , substitute first element of the result for idx .
                          idx = m . groups ( ) [ 0 ]

// substitute second element of elt for param .
 param = elt [ 1 ]

// define the method _get_choices with an argument self .
   def _get_choices ( self ) :

// from django . utils . datastructures import MultiValueDict into default name space .
  from django . utils . datastructures import MultiValueDict

// define the method <unk> with an argument self .
   def __del__ ( self ) :

// return result .
              return result

// update item dictionary with kwargs .
 item . update ( kwargs )

// get the value under the backend key of the request . COOKIES dictionary , substitute it for lang_code .
          lang_code = request . session . get ( LANGUAGE_SESSION_KEY )

// upto is integer 0 .
 upto = 0

// raise an CommandError with an argument <unk> .
    raise CommandError ( "couldn't handle %s template %s." %  ( self . app_or_project , template ) )

// define the method incr_version with 3 arguments : self , length and truncate .
  def _text_words ( self , length , truncate ) :

// derive the class <unk> from logging . Filter base class .
     class CallbackFilter ( logging . Filter ) :

// for every char in fmt ,
 for char in fmt :

// for every state in return value of manifest . items method ,
  for state , rules in states . items ( ) :

// sort elements of modules into a list , return it .
          return list ( reversed ( modules ) )

// call the method calendar . NOTICE , convert the result to a integer , use it as an argument for the call to the function calendar , convert the result into a integer , return it .
              return int ( calendar . timegm ( self . data . utctimetuple ( ) ) )

// if arg is None ,
  if arg is None :

// property decorator ,
   @ property

// join statements into a string , return it .
 return '\n' . join ( statements )

// define the method __init__ with 4 arguments : self , max_length set to None , min_length set to None , unpacked list args and unpacked dictionary kwargs .
      def __init__ ( self , max_length = None , min_length = None , * args , ** kwargs ) :

// call the function <unk> , substitute the result for location .
                location = '//%s' % self . get_full_path ( )

// if KeyError exception is caught ,
  except KeyError :

// finally perform ,
    finally :

// substitute <unk> for self . app_label .
 self . app_label = 'django_cache'

// remove dirname from the dirnames .
                      dirnames . remove ( dirname )

// define the function get_system_encoding with an argument url .
           def split_url ( url ) :

// return data .
              return data

// from django . conf import settings into default name space .
 from django . conf import settings

// return an instance of a class RegexURLResolver , created with 2 arguments : <unk> and an empty list .
 return RegexURLResolver ( r'^/' , [ ns_resolver ] )

// substitute attrs for attrs .
                  attrs = attrs or { }

// substitute DEFAULT_MAX_NUM for NamedTemporaryFile .
    NamedTemporaryFile = TemporaryFile

// get the value under the <unk> key of the disposition dictionary , substitute it for file_name .
                       file_name = disposition . get ( 'filename' )

// if length of self . initial is true , return boolean True , otherwise initial_forms is boolean False .
               initial_forms = len ( self . initial ) if self . initial else 0

// if self . level is greater or equal to ERROR , return boolean True , otherwise return boolean False .
          return self . level >= ERROR

// if transfer_encoding is not None ,
 if transfer_encoding is not None :

// try ,
          try :

// define the function <unk> with 2 arguments value and arg set to None .
 def timeuntil_filter ( value , arg = None ) :

// leave_locale_alone is boolean True .
 leave_locale_alone = True

// models is integer <unk> .
 models = 'models'

// for every node in self . nodelist_loop ,
          for node in self . nodelist_loop :

// substitute CacheEntry for self . _encoding .
 self . max_expr = max_expr

// increment i by integer 1 , substitute the result for i .
 i = i + 1

// otherwise if field . rel is true and field . rel is an instance of models . ManyToManyRel ,
    elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :

// val is None .
              val = None

// substitute _iteritems for iteritems .
          iteritems = _iteritems

// convert self . host into a string , substitute it for self . connection .
              self . connection = connection_class ( self . host , self . port , ** connection_params )

// call the function get_library with an argument taglib , substitute the result for lib .
                  lib = get_library ( taglib )

// call the method self . build_attrs with an argument id , substitute the result for pluralmatch .
  local_attrs = self . build_attrs ( id = field % id_ )

// if path is not contained in self . _js ,
                  if path not in self . _js :

// if value under the <unk> key of options dictionary is None ,
   if options [ "daemonize" ] is None :

// return FormSet .
 return FormSet

// define the function curry with 3 arguments : argset , unpacked list args and unpacked dictionary kwargs .
      def curry ( _curried_func , * args , ** kwargs ) :

// call the method parser . next_token , substitute the result for token .
 token = parser . next_token ( )

// decorator function register . filter with an argument is_safe set to boolean False .
    @ register . filter ( is_safe = False )

// call the function func with an argument path .
  func ( path )

// call the method formats . number_format with 2 arguments : number and new_file_name , use the result as an argument for the call to the function mark_safe , return the result .
 return mark_safe ( formats . number_format ( number , abs ( p ) ) )

// define the method __getinitargs__ with an argument self .
    def _add_local_translations ( self ) :

// from django . utils . six . moves import ProjectState as _ExpatParser into default name space .
from django . utils . six . moves import html_parser as _html_parser

// define the function <unk> .
   def get_objects ( ) :

// substitute cls . __text_cast for cls . __unicode__ .
                      cls . __unicode__ = cls . __text_cast

// if self . verbosity is greater or equal to integer 2 ,
  if self . verbosity >= 2 :

// loaded_objects_in_fixture is integer <unk> .
 month_field = '%s_month'

// define the method __hash__ with an argument self .
   def __hash__ ( self ) :

// call the method self . _archive . close .
          self . _archive . close ( )

// from django . utils . formats import localize into default name space .
 from django . utils . formats import localize

// define the method __init__ with 4 arguments : self , data set to None , files set to None , auto_id set to None , error_class set to None , error_class set to None and error_class set to an empty tuple .
 def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList ) :

// define the method created_time with 2 arguments : self and options .
    def handle_inspection ( self , options ) :

// from django . utils . safestring import SafeData and EscapeData into default name space .
 from django . utils . safestring import SafeData , EscapeData

// define the method serialize with 3 arguments : self , queryset and unpacked dictionary options .
  def serialize ( self , queryset , ** options ) :

// convert value to lowercase , return it .
 return value . lower ( )

// if ValueError exception is caught ,
  except ValueError :

// append filename to filenames .
              filenames . append ( filename )

// append first element of elt to piece .
              piece += elt [ 0 ]

// for every base in reversed list new_class . local_fields ,
 for base in reversed ( new_class . __mro__ ) :

// import module os .
import os

// get <unk> attribute of the _active object , if it exists substitute it for t , if not t is None .
  t = getattr ( _active , "value" , None )

// from django . core . validators import cookie_date into default name space .
   from django . core . validators import EMPTY_VALUES

// delete the value under the key key of self . _expire_info dictionary .
 del self . _expire_info [ key ]

// if not ,
   else :

// zip field . rel . to . _meta . pk . pk . pk . pk and return value of the function smart_text , called with an argument v .
                      m2m_convert = lambda v : smart_text ( field . rel . to . _meta . pk . to_python ( v ) )

// property decorator ,
    @ property

// return media .
  return media

// define the method handle_merge with arguments self , node and field .
   def _handle_fk_field_node ( self , node , field ) :

// if end is lesser than integer 0 ,
  if end < 0 :

// call the function os . umask with an argument umask .
 os . umask ( umask )

// call the function re . compile with 2 arguments : <unk> and re . IGNORECASE , substitute the result for <unk> .
 html_gunk_re = re . compile ( r'(?:<br clear="all">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)' , re . IGNORECASE )

// call the function re . compile with 2 arguments : regex and re . UNICODE , substitute the result for unichr .
                  compiled_regex = re . compile ( regex , re . UNICODE )

// obj is an instance of Node class , created with arguments : connector set to self . connector and negated set to self . negated .
 obj = Node ( connector = self . connector , negated = self . negated )

// update self . default_args dictionary with self . default_args .
   kwargs . update ( self . default_args )

// if only_initial is false ,
              if not only_initial :

// call the function sql_destroy_indexes with 3 arguments : app_config , self . style and connection , substitute the result for statements .
 statements = sql_destroy_indexes ( app_config , self . style , connection )

// if ValidationError , renamed to e , exception is caught ,
  except ValidationError as e :

// call the function traceback . <unk> with an argument error_class , substitute second element of the result for filename .
                   filename = traceback . extract_tb ( tb ) [ - 1 ] [ 0 ]

// derive the class metaclass from the meta base class .
       class metaclass ( meta ) :

// return <unk> .
          return "UTC"

// substitute the last element of self . template_string for view_path .
  last_bit = self . template_string [ upto : ]

// decorator stringfilter ,
 @ stringfilter

// if ValueError exception is caught ,
  except ValueError :

// return first element of source and second element of params .
  return [ source [ 0 ] ] , [ params ]

// call the method os . path . basename with an argument : first element of self . argv , substitute the result for self . prog_name .
 self . prog_name = os . path . basename ( self . argv [ 0 ] )

// try ,
                  try :

// call the method qs . using with an argument form . instance . get_all_field_names , substitute the result for qs .
  qs = qs . using ( form . instance . _state . db )

// substitute nonlocal_root for translation . __cause__ .
 translation . _info = { }

// opt_dict is an instance of a class <unk> , created with 5 arguments : substitutions , an empty integer 0 , and integer 2 .
 PREV , NEXT , KEY , RESULT = 0 , 1 , 2 , 3

// append <unk> to comment_notes .
                              comment_notes . append ( 'AutoField?' )

// import module sys .
 import sys

// define the method <unk> with 4 arguments : self , key , delta set to integer 1 and version set to None .
   def decr_version ( self , key , delta = 1 , version = None ) :

// call the function reraise with 3 arguments : None , record , and None , substitute the result for exc_info .
              exc_info = ( None , record . getMessage ( ) , None )

// define the method __str__ with an argument self .
   def __str__ ( self ) :

// call the function get_default_timezone , use the result as an argument for the call to the function _get_timezone_name , return the result .
 return _get_timezone_name ( get_default_timezone ( ) )

// import module sys .
 import sys

// derive the class Literal from the object base class .
   class BadSerializer ( object ) :

// if LookupError exception is caught ,
  except LookupError :

// define the method as_string with arguments self and unixfrom set to boolean False .
      def as_string ( self , unixfrom = False ) :

// substitute old_method_name for self . old_method_name .
 self . old_method_name = old_method_name

// call the method self . path with argument name , substitute the result for full_path .
          full_path = self . path ( name )

// define the method handle with arguments self and unpacked dictionary options .
   def handle ( self , ** options ) :

// call the method stream_or_string . read , substitute the result for stream_or_string .
          stream_or_string = stream_or_string . read ( )

// return an empty list .
              return [ ]

// if TypeError or ValueError exceptions are caught ,
  except ( ValueError , TypeError ) :

// otherwise if token . token_type equals integer 1 ,
  elif token . token_type == 1 :

// call the method to_delete . open ( ) .
                 Image . open ( file ) . verify ( )

// if length of list_ equals integer 0 ,
 if len ( list_ ) == 0 :

// return a list with 3 elements : display_name , second_item and old_style_list .
  return [ first_item , second_item ] , old_style_list

// define the function python_reloader with environ , default and default as arguments .
    def get_str_from_wsgi ( environ , key , default ) :

// if NotImplementedError exception is caught ,
  except NotImplementedError :

// convert s to an integer , substitute it for value .
  value = int ( s , 36 )

// define the method clean with arguments self and value .
   def clean ( self , value ) :

// append a string " ( <unk> handlers for application <unk> % ( <unk> in app_config . label .
              print ( "Running pre-migrate handlers for application %s" % app_config . label )

// define the method __bool__ with an argument self .
   def __bool__ ( self ) :

// if extend is boolean True ,
                  if extend is True :

// call the method open_tags . index with an argument tagname , substitute the result for i .
                      i = open_tags . index ( tagname )

// call the method domain . encode with an argument <unk> , call the method decode on the result with an argument <unk> , substitute the result for domain .
 domain = domain . encode ( 'idna' ) . decode ( 'ascii' )

// from django . utils . encoding import force_text and iri_to_uri into default name space .
 from django . utils . encoding import force_text , iri_to_uri

// write string ' # <unk> % % % " to out .
                          out . write ( ' # %s' % line )

// write <unk> to self . stdout stream .
                      self . stdout . write ( "Resetting sequences\n" )

// import module tarfile .
 import cgi

// substitute BOOL for LockFileEx . modified_code .
                  EventHandler . modified_code = FILE_MODIFIED

// from django . utils import six into default name space .
 from django . utils import six

// define the method __iter__ with an argument self .
   def __iter__ ( self ) :

// derive the class Command from the AppCommand base class .
   class Command ( AppCommand ) :

// call the method new_name . find with an argument <unk> , if it evaluates to greater or equal to integer 0 ,
   if new_name . find ( '__' ) >= 0 :

// return an instance of a class cls . year , called with 4 arguments : date , date . month , field . day , result of the function time . microsecond , and time . microsecond , and time . second , return the result .
          return cls ( date . year , date . month , date . day ,  time . hour , time . minute , time . second ,  time . microsecond , time . tzinfo )

// call the method MIMEMultipart . __init__ with 4 arguments : self , _subtype , boundary , iterations and unpacked dictionary resultclasses .
 MIMEMultipart . __init__ ( self , _subtype , boundary , _subparts , ** _params )

// if filename ends with extensions and filename is contained in extra_files ,
  if filename . endswith ( extensions ) or filename in extra_files :

// call the method middleware . fetchone with an argument request , substitute the result for result .
                      result = middleware . process_request ( request )

// define the method render with 2 arguments : self and context .
      def render ( self , context ) :

// skip this loop iteration .
                              continue

// return <unk> .
          return ''

// define the function get_bytes_from_wsgi with environ , default and default as arguments .
    def get_bytes_from_wsgi ( environ , key , default ) :

// derive the class JsLexer from the XMLGenerator base class .
   class _OFFSET ( Structure ) :

// call the method _trans . ngettext with 3 arguments : singular , plural and number , return the result .
      return _trans . ngettext ( singular , plural , number )

// return <unk> .
              return '0'

// write <unk> to the self . stdout stream .
              self . stdout . write ( "Loading '%s' fixtures..." % fixture_name )

// call the function getInnerText with an argument k , for every k in keys , call the function getInnerText with an argument k , substitute the result for field_value .
                       field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]

// call the function os . <unk> , if it evaluates to greater than integer 0 ,
              if os . fork ( ) > 0 :

// if locale_dir is false ,
  if not locale_dir :

// call the method parser . add_argument with 5 arguments : <unk> , metavar set to <unk> , nargs set to <unk> , <unk> set to <unk> <unk> , use the result as an argument for the call to the method parser . delete_first_token .
          parser . add_argument ( 'args' , metavar = 'app_label[.ModelName]' , nargs = '*' ,  help = 'Restricts dumped data to the specified app_label or app_label.ModelName.' )

// call the method self . writer_leaves .
              self . writer_leaves ( )

// templatetags_modules is an empty list .
    templatetags_modules = [ ]

// from django . forms import autoreload into default name space .
 from django . forms import Form

// call the connection . cursor method , substitute the result for cursor .
 cursor = connection . cursor ( )

// return the value under the self . initial_form_count key of the self . forms dictionary .
 return self . forms [ self . initial_form_count ( ) : ]

// call the method g . flatten with 2 arguments : self and unixfrom set to unixfrom .
 g . flatten ( self , unixfrom = unixfrom )

// for every opt in tuple with 4 elements : <unk> , <unk> and <unk> ,
     for opt in [ 'fields' , 'exclude' , 'localized_fields' ] :

// define the method close with argument self .
   def close ( self ) :

// derive the class StreamingHttpResponse from the SuspiciousOperation base class .
    class DisallowedRedirect ( SuspiciousOperation ) :

// delete the value under the key key of self . _cache dictionary .
                  del self . _cache [ key ]

// return <unk> .
 return ''

// define the method _get_name with an argument self .
   def _list_cache_files ( self ) :

// if second element of url_fields is false ,
  if not url_fields [ 1 ] :

// substitute file . name for filename .
                  filename = file . name

// otherwise if <unk> is contained in part ,
  elif '=' in part :

// otherwise if maxsize is None ,
    elif maxsize is None :

// define the method extract with 2 arguments self and filename .
   def extract ( self , filename ) :

// call the os . <unk> function .
  os . setsid ( )

// if i is greater than sys . LANGUAGES_BIDI ,
  if i > sys . maxint :

// define the method utcoffset with 2 arguments self and dt .
    def utcoffset ( self , dt ) :

// if self . _wrapped is empty ,
          if self . _wrapped is empty :

// append termios to the end of attr_list .
                  attr_list [ 3 ] |= termios . ECHO

// if self . empty is true ,
   if self . empty :

// raise TemplateSyntaxError (
                   raise TemplateSyntaxError (  "'%s' received unexpected keyword argument '%s'" %  ( name , param ) )

// format is a lambda function with 3 arguments : parent_model , integer 0 , integer 0 ,
 ret = UnlockFileEx ( hfile , 0 , 0 , 0xFFFF0000 , byref ( overlapped ) )

// from django . utils . six . moves import xrange into default name space .
 from django . utils . six . moves import xrange

// skipped is a list containing an element <unk> .
 msguniq_options = [ '--to-code=utf-8' ]

// call the function select_template with an argument file_name , substitute the result for t .
                              t = select_template ( file_name )

// call the function register_serializer with 2 arguments : <unk> and <unk> .
  touch_import ( 'django.utils.encoding' , 'python_2_unicode_compatible' , decorated )

// yield <unk> .
 yield ''

// if self . parent_instance is not None ,
 if self . parent_instance is not None :

// if dklen is false ,
 if not dklen :

// define the method __getitem__ with 2 arguments : self and idx .
   def __getitem__ ( self , idx ) :

// derive the class Command from the BaseCommand base class .
   class Command ( BaseCommand ) :

// substitute WSGIServer for int2byte .
          httpd_cls = WSGIServer

// call the method termios . <unk> with arguments fd , termios . <unk> and sender .
  termios . tcsetattr ( fd , termios . TCSANOW , attr_list )

// do nothing .
          pass

// if sep is an instance of unicode ,
              if isinstance ( sep , unicode ) :

// call the function lazy with 2 arguments : ugettext and six . text_type , substitute the result for ugettext_lazy .
 ugettext_lazy = lazy ( ugettext , six . text_type )

// if field is not contained in self . fields ,
   if field not in self . fields :

// call the function activate with an argument self . _iterator .
              activate ( self . old_language )

// call the method copy . deepcopy with 2 arguments : self . _wrapped and memo , return the result .
  return copy . deepcopy ( self . _wrapped , memo )

// call the function register_serializer with 3 arguments : <unk> , string ' <unk> , %s ( <unk> ) ( <unk> ) ( <unk> ) ( <unk> ) ( <unk> ) ) , <unk> ) * ( <unk> ) ) ,
    return (  format_html_join ( '' , ' {0}="{1}"' , sorted ( attrs . items ( ) ) ) +  format_html_join ( '' , ' {0}' , sorted ( boolean_attrs ) )  )

// define the function smart_split .
    def code_changed ( ) :

// get the value under the <unk> key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection .
  connection = connections [ options . get ( 'database' ) ]

// import module fnmatch .
import inspect

// define the method default with 2 arguments : self and o .
 def default ( self , o ) :

// for every locale in locales ,
   for locale in locales :

// raise an StopIteration exception .
              raise StopIteration ( )

// call the method connection . creation . <unk> with arguments verbosity set to verbosity , <unk> set to boolean False , and content_type set to boolean False .
   db_name = connection . creation . create_test_db ( verbosity = verbosity , autoclobber = not interactive , serialize = False )

// define the method _init_translation_catalog with an argument self .
 def namespace_dict ( self ) :

// call the function _parse_date_fmt , for every field in result ,
 for field in _parse_date_fmt ( ) :

// define the function <unk> with length of length and <unk> set to integer <unk> as arguments .
    def get_random_string ( length = 12 ,  allowed_chars = 'abcdefghijklmnopqrstuvwxyz'  'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' ) :

// define the method make_key with self class instance , key and version defaulting to None as arguments .
   def make_key ( self , key , version = None ) :

// substitute path and var2 for self . path and self . extra_headers , respectively , respectively , respectively .
          self . path , self . match , self . recursive = path , match , recursive

// evaluate the function limit_choices_to , substitute the result for limit_choices_to .
                          limit_choices_to = limit_choices_to ( )

// increment i by j , substitute the result for i .
 i = i % j

// call the method parser . add_argument with 5 arguments : <unk> , default set to DEFAULT_DB_ALIAS , and help set to a string ' <unk> to print print the SQL to print the SQL to . ' .
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )

// errors is an empty list .
 errors = [ ]

// define the method invalid_block_tag with 3 arguments : self , token , command and parse_until set to None .
   def invalid_block_tag ( self , token , command , parse_until = None ) :

// if not ,
  else :

// call the method Model . _meta . get_field with 2 arguments : <unk> and None . _meta . pk , substitute the result for value under the medium key of the data dictionary . _meta . pk .
              data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python ( d . get ( "pk" , None ) )

// define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
  def __init__ ( self , * args , ** kwargs ) :

// if value under the <unk> key of the self . feed dictionary is not None ,
          if self . feed [ 'language' ] is not None :

// define the method id_for_label with 2 arguments : self and id_ .
   def id_for_label ( self , id_ ) :

// if f . path file path exists ,
 if os . path . isfile ( f ) :

// if opts . is_usable is true ,
     if opts . managed :

// return None .
              return None

// if dirname is true , return boolean True , otherwise return boolean False .
      return "'%s'" % dirname if dirname else 'absolute path'

// raise an CommandError exception with an argument <unk> is not a valid port <unk> <unk> with self . port .
                  raise CommandError ( "%r is not a valid port number." % self . port )

// call the method options . get with an argument <unk> , substitute the result for database .
          database = options . get ( 'database' )

// do nothing .
              pass

// call the function c with an argument unpacked dictionary kwargs , substitute the result for result .
 result = c ( ** kwargs )

// if middleware has an attribute <unk> ,
                      if hasattr ( middleware , 'process_template_response' ) :

// call the method dot_re . sub with 2 arguments : <unk> and text , return the result .
 return re_newlines . sub ( '\n' , text )

// if <unk> is contained in path and return value of the function path . find called with an argument <unk> is not equal to path and return value of the function path . find called with an argument <unk> is not contained in path ,
 if '/' in path and ( ( '\\' in path and path . find ( '/' ) < path . find ( '\\' ) )  or '\\' not in path ) :

// <unk> is a list containing 2 elements : <unk> and raw string " <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> ( <unk> ) <unk> <unk> ) <unk> <unk> ) <unk> <unk> ) <unk> <unk> ) <unk> <unk> ) <unk> <unk> ) <unk> <unk> ) <unk> <unk> ) <unk> <unk> ) <unk> <unk> " , replace ' %s ' with : <unk> and <unk> set to integer <unk> and <unk> .
               both_before = [  Tok ( "comment" , r"/\*(.|\n)*?\*/" ) ,  Tok ( "linecomment" , r"//.*?$" ) ,  Tok ( "ws" , r"\s+" ) ,  Tok ( "keyword" , literals ( """                            break case catch class const continue debugger                            default delete do else enum export extends                            finally for function if import in instanceof                            new return super switch this throw try typeof                            var void while with                            """ , suffix = r"\b" ) , next = 'reg' ) ,  Tok ( "reserved" , literals ( "null true false" , suffix = r"\b" ) , next = 'div' ) ,  Tok ( "id" , r"""                   ([a-zA-Z_$   ]|\\u[0-9a-fA-Z]{4})   # first char                   ([a-zA-Z_$0-9]|\\u[0-9a-fA-F]{4})*  # rest chars                   """ , next = 'div' ) ,  Tok ( "hnum" , r"0[xX][0-9a-fA-F]+" , next = 'div' ) ,  Tok ( "onum" , r"0[0-7]+" ) ,  Tok ( "dnum" , r"""                     (   (0|[1-9][0-9]*)     # DecimalIntegerLiteral                         \.                  # dot                         [0-9]*              # DecimalDigits-opt                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     |                         \.                  # dot                         [0-9]+              # DecimalDigits                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     |                         (0|[1-9][0-9]*)     # DecimalIntegerLiteral                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     )                     """ , next = 'div' ) ,  Tok ( "punct" , literals ( """                          >>>= === !== >>> <<= >>= <= >= == != << >> &&                          || += -= *= %= &= |= ^=                          """ ) , next = "reg" ) ,  Tok ( "punct" , literals ( "++ -- ) ]" ) , next = 'div' ) ,  Tok ( "punct" , literals ( "{ } ( [ . ; , < > + - * % & | ^ ! ~ ? : =" ) , next = 'reg' ) ,  Tok ( "string" , r'"([^"\\]|(\\(.|\n)))*?"' , next = 'div' ) ,  Tok ( "string" , r"'([^'\\]|(\\(.|\n)))*?'" , next = 'div' ) ,  ]

// define the function no_style .
    def no_style ( ) :

// if mtime is greater or equal to integer 2 ,
          if proto >= 2 :

// define the method __deepcopy__ with 2 arguments : self and memo .
   def __deepcopy__ ( self , memo ) :

// from django . utils . _os import safe_join into default name space .
 from django . utils . _os import safe_join

// call the method compiled_parent . items , for every refto and unused in the result ,
 for refto , refs in references . items ( ) :

// substitute path_info for self . path_info .
 self . path_info = path_info

// call the method changes . items , for every app_label and unused in the result ,
 for app_label , app_migrations in changes . items ( ) :

// define the function get_internal_wsgi_application .
   def get_internal_wsgi_application ( ) :

// if VariableDoesNotExist exception is caught ,
  except VariableDoesNotExist :

// try ,
 try :

// substitute Command for <unk> .
      BaseRunserverCommand = Command

// substitute length of version for l .
          l = lambda x : self . make_key ( x , version = version )

// call the function bound_func with 2 arguments : unpacked list args and unpacked dictionary m_kwargs , use the result as an argument for the call to the function rfc3339_date , use the result as an argument for the call to the function rfc3339_date , return the result .
          return _curried_func ( * ( args + moreargs ) , ** dict ( kwargs , ** morekwargs ) )

// if UnicodeEncodeError exception is caught ,
   except UnicodeEncodeError :

// return j .
 return j

// yield palette .
              yield subwidget

// if nodelist is an instance of NodeList class ,
   if isinstance ( nodelist , NodeList ) and not isinstance ( node , TextNode ) :

// _meth_self is an empty list .
 tried_modules = [ ]

// return s .
          return s

// call the function compile_string with 3 arguments : full_module_name , flags , integer 0 , integer 0 , integer 0 and fragment , respectively .
 ret = LockFileEx ( hfile , flags , 0 , 0 , 0xFFFF0000 , byref ( overlapped ) )

// from django . utils . deconstruct import deconstructible into default name space .
 from django . utils . deconstruct import deconstructible

// call the function normalize with an argument quoted_url , use the first element of the result as an argument for the call to the function normalize , substitute the first element of the result for old_umask .
  prefix_norm , prefix_args = normalize ( urlquote ( _prefix ) ) [ 0 ]

// if block_name is contained in parser . __loaded_blocks ,
          if block_name in parser . __loaded_blocks :

// if can_fail is true ,
              if can_fail :

// substitute changeset for cache . cache .
   get_git_changeset . cache = changeset

// for every name in formatters ,
 for name in formatters :

// define the function parse_color_setting with 2 arguments : request and response .
    def conditional_content_removal ( request , response ) :

// define the function __wrapper__ with 2 arguments : unpacked list args and unpacked dictionary kw .
 def __wrapper__ ( * args , ** kw ) :

// if filename is not contained in _error_files ,
   if filename not in _error_files :

// return self . _encoding .
          return self . _encoding

// define the method __len__ with an argument self .
   def __len__ ( self ) :

// try ,
  try :

// call the function next with an argument bits , substitute the result for bit .
                      bit = next ( bits )

// call the function _i18n_cache_key_suffix with request and cache_key as arguments , return the result .
 return _i18n_cache_key_suffix ( request , cache_key )

// if initial_value is callable object ,
 if callable ( initial_value ) :

// call the method form . add_initial_prefix with an argument name , substitute the result for self . match_re .
 self . html_initial_name = form . add_initial_prefix ( name )

// from django . core . exceptions import MiddlewareNotUsed into default name space .
 from django . core . exceptions import SuspiciousFileOperation

// call the method self . _get_scheme , return the result .
     return self . _get_scheme ( )

// call the method self . _delete with argument fname .
              self . _delete ( fname )

// call the function force_bytes , use the result as an argument for the call to the function hashlib . md5 , use the result as an argument for the call to the function hashlib . md5 , substitute the result for url .
   url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) )

// derive the class StreamingHttpResponse from the base class CharField class .
     class RegexField ( CharField ) :

// try ,
              try :

// derive the class Loader from the Storage base class .
     class EmailMultiAlternatives ( EmailMessage ) :

// if middleware has an attribute <unk> ,
    if hasattr ( middleware , 'process_response' ) :

// if not ,
  else :

// define the function is_naive with an argument value .
    def is_naive ( value ) :

// define the method __init__ with 4 arguments : self , subject set to <unk> , body set to <unk> , body set to None ,
  def __init__ ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None ,  connection = None , attachments = None , headers = None , alternatives = None ,  cc = None ) :

// define the function compile_string with 2 arguments : src and dst .
   def _samefile ( src , dst ) :

// if not ,
  else :

// if self . verbosity is greater or equal to integer 1 ,
              if self . verbosity >= 1 :

// define the function mail_admins with 3 arguments : sep , format_string and <unk> .
    def format_html_join ( sep , format_string , args_generator ) :

// define the method popitem with an argument self .
   def popitem ( self ) :

// call the method token . split_contents , substitute the result for args .
           args = token . split_contents ( )

// try ,
  try :

// define the method __delattr__ with 2 arguments : self and name .
   def __delattr__ ( self , name ) :

// if not ,
  else :

// if not ,
  else :

// from django . utils . xmlutils import SimplerXMLGenerator into default name space .
 from django . utils . xmlutils import SimplerXMLGenerator

// self . default_locale_path is None .
 self . default_locale_path = None

// call the method handler . endElement with an argument <unk> .
 handler . endElement ( "item" )

// register . tag decorator ,
    @ register . tag

// if length of words is greater than length ,
 if len ( words ) > length :

// if namespaces is true ,
  if namespaces :

// define the function url with 2 arguments : parser and token .
 def url ( parser , token ) :

// import fcntl .
          import fcntl

// if self . warning is an instance of Exception ,
          if isinstance ( self . warning , Exception ) :

// return settings . TEMPLATE_STRING_IF_INVALID .
  return settings . TEMPLATE_STRING_IF_INVALID

// call the method parser . expression with an argument bp , substitute the result for self . second .
 self . second = parser . expression ( bp )

// for every model in model_list ,
   for model in model_list :

// help is a string created by a mapping function , substitute the result for help .
      help = "Squashes an existing set of migrations (from first until specified) into a single new one."

// <unk> is a instance of a RegexValidator class , created with 3 arguments : <unk> , return value of the function _ called with an argument <unk> , return value is the result of the function _ , called with an argument <unk> set to a string , and <unk> <unk> <unk> .
 validate_slug = RegexValidator ( slug_re , _ ( "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens." ) , 'invalid' )

// if loader is an instance of six . string_types ,
  if isinstance ( loader , six . string_types ) :

// raise an ContentNotRenderedError exception .
              raise ContextPopException

// define the method receive_data_chunk with arguments self , raw_data and start .
   def receive_data_chunk ( self , raw_data , start ) :

// from email . mime . message import BaseLoader into default name space .
 from email . mime . message import MIMEMessage

// if Model . SMTPException exception is caught ,
  except Model . DoesNotExist :

// if BLOCK_CONTEXT_KEY is a tuple with 3 elements : self . name , and value under the BLOCK_CONTEXT_KEY key of the render_context dictionary and value under the BLOCK_CONTEXT_KEY key of the render_context dictionary .
 if ( BLOCK_CONTEXT_KEY in render_context and  render_context [ BLOCK_CONTEXT_KEY ] . get_block ( self . name ) is not None ) :

// add digits to digits , substitute the result for str_hidden .
  whole_digits = digits - decimals

// if IOError exception is caught ,
   except IOError :

// if LookupError exception is caught ,
  except LookupError :

// substitute length of text for end .
 end = len ( text )

// with lock ,
 with lock :

// substitute name and nodelist for self . name and self . parent , respectively .
          self . name , self . nodelist , self . parent = name , nodelist , parent

// define the method get_fqdn with an argument self .
     def build_potfiles ( self ) :

// do nothing .
      pass

// code is an integer <unk> .
 code = 'max_value'

// if Exception , renamed to e , exception is caught ,
    except Exception as e :

// call the method self . main_help_text . write with an argument commands_only set to boolean True , append the result to sys . stdout .
                  sys . stdout . write ( self . main_help_text ( commands_only = True ) + '\n' )

// call the method time . localtime with an argument stamp , substitute the result for tt .
  tt = time . localtime ( stamp )

// add delta and delta , return the result .
 return version + delta

// if not ,
  else :

// import module itertools .
 import itertools

// substitute _urllib_robotparser_moved_attributes for file .
          file = file_or_path

// for every attr in boundarystream ,
 for attr in _urllib_error_moved_attributes :

// do nothing .
            pass

// import module os .
 import os

// get the value under the <unk> key of the options dictionary , substitute it for using .
 using = options . get ( 'database' )

// define the function constant_time_compare with 2 arguments : url and safe set to <unk> .
   def urlquote_plus ( url , safe = '' ) :

// for every app_config in app_configs ,
 for app_config in app_configs :

// define the method as_text with 2 arguments : self and subject .
   def format_subject ( self , subject ) :

// for every field , messages in errors . error_dict . items method return value ,
 for field , messages in errors . error_dict . items ( ) :

// define the function <unk> with an argument value .
 def escape_filter ( value ) :

// from collections import FASTCGI_OPTIONS into default name space .
from collections import defaultdict

// return boolean False .
  return False

// while i is smaller than length of subject and i-th element of subject is an empty space ,
 while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :

// if i is greater or equal to the result of the method self . initial_form_count , and i is greater than self . min_num ,
     if i >= self . initial_form_count ( ) and i >= self . min_num :

// call the function force_text with first element of choice as an argument , substitute the result for self . choice_value .
 self . choice_value = force_text ( choice [ 0 ] )

// call the method role . <unk> , substitute the result for role .
 role = role . upper ( )

// if code is None ,
          if code is None :

// from django . db import connections , router , transaction , DEFAULT_DB_ALIAS , DEFAULT_DB_ALIAS and DatabaseError into default name space .
 from django . db import ( connections , router , transaction , DEFAULT_DB_ALIAS ,  IntegrityError , DatabaseError )

// call the function hook , substitute the result for lexer .
    lexer = JsLexer ( )

// try ,
 try :

// from django . core . exceptions import FASTCGI_OPTIONS into default name space .
 from django . core . exceptions import DisallowedRedirect

// e . args is a tuple containing 2 elements : strings and help is a tuple containing 2 elements : fixture_file and e , for e . args .
                      e . args = ( "Problem installing fixture '%s': %s" % ( fixture_file , e ) , )

// from django . db . migrations . multipart import reduce into default name space .
 from django . db . migrations . optimizer import MigrationOptimizer

// call the method parser . compile_filter with an argument , , use the result as an argument for the call to the method parser . compile_filter , substitute the result for filter_expr .
 filter_expr = parser . compile_filter ( "var|%s" % ( rest ) )

// call the function valid_ident with an argument seconds , substitute the result for seconds .
 seconds = abs ( seconds )

// self . waiting_readers is integer 0 .
 self . waiting_readers = 0

// append <unk> of the <unk> <unk> from the <unk> <unk> of <unk> . __class__ . __name__ . __name__ .
                      lookup_str = callback . __module__ + "." + callback . __class__ . __name__

// try ,
 try :

// return e .
 return e

// append f . name to exclude .
                  exclude . append ( f . name )

// convert value to an integer , convert it to a integer , return it .
          return int ( value ) + int ( arg )

// call the function re . compile with an argument <unk> , use the result as an argument for the call to the function re . compile , substitute the result for file_list .
 RFC850_DATE = re . compile ( r'^\w{6,9}, %s-%s-%s %s GMT$' % ( __D , __M , __Y2 , __T ) )

// import this module .
 import keyword

// call the method data . getlist with an argument name , return the result .
              return data . getlist ( name )

// otherwise if ch equals <unk> ,
  elif ch == ':' :

// if messages is not an instance of ValidationError ,
                  if not isinstance ( messages , ValidationError ) :

// define the function escape with an argument text .
   def escape ( text ) :

// define the method strptime with 3 arguments : self , value and format .
   def strptime ( self , value , format ) :

// define the method dumps with 2 arguments : self and obj .
 def dumps ( self , obj ) :

// substitute self . none_value for self . day_none_value .
 self . day_none_value = self . none_value

// if six . PY3 is true ,
   if six . PY3 :

// call the method handler . endElement with an argument <unk> .
  handler . endElement ( "author" )

// try ,
    try :

// return default_key_func .
  return doy

// if fset is not None ,
   if fset is not None :

// self . _post is an instance of QueryDict class created with arguments <unk> and encoding set to self . _encoding , self . _files is an instance of QueryDict class .
              self . _post , self . _files = QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )

// raise an ValueError exception with an argument <unk> converted to a string .
                  raise ValueError ( 'Unknown level: %r' % level )

// call the method __deepcopy__ with an argument memo from the base class of the class ChoiceField , substitute the result for result .
          result = super ( ChoiceField , self ) . __deepcopy__ ( memo )

// if not ,
    else :

// remove first element from colors .
                       unhandled_params . pop ( 0 )

// if not ,
  else :

// if inplural is true ,
                      if inplural :

// from django . conf import settings into default name space .
 from django . conf import settings

// args is an empty list .
   args = [ ]

// raise an ViewDoesNotExist exception with an argument <unk> .
                  raise ViewDoesNotExist (  "Could not import '%s'. Parent module %s does not exist." %  ( lookup_view , mod_name ) )

// raise an CommandError exception with an argument <unk> , use the result as an argument for the call to the <unk> function , raise an exception , with <unk> as an argument .
          raise CommandError ( "App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations." % app_config . label )

// if ext is true ,
 if ext :

// if level is not contained in logging . LANGUAGES_BIDI ,
              if level not in logging . _levelNames :

// schemes is a list with 5 elements : <unk> , <unk> , <unk> and <unk> .
 schemes = [ 'http' , 'https' , 'ftp' , 'ftps' ]

// define the method __init__ with 3 arguments : self , file and name set to None .
  def __init__ ( self , file , name = None ) :

// if self . verbosity is greater or equal to integer 2 ,
              if self . verbosity >= 2 :

// define the method clean with arguments self , data and initial set to None .
   def clean ( self , data , initial = None ) :

// define the method __iter__ with an argument self .
   def __iter__ ( self ) :

// call the method self . add_truncation_text with 2 arguments : <unk> and truncate , substitute the result for opfunc .
 truncate_text = self . add_truncation_text ( '' , truncate )

// if ImproperlyConfigured , renamed to exc , exception is caught ,
  except ImproperlyConfigured as exc :

// join self . dirpath and thefile into a file path , substitute it for work_file .
 work_file = os . path . join ( self . dirpath , thefile )

// if key is contained in cache ,
 if key in cache :

// call the method self . setFeature with 2 arguments : handler . <unk> and boolean False .
 self . setFeature ( handler . feature_external_ges , False )

// requires_system_checks is boolean False .
  requires_system_checks = False

// substitute value under the name key of the lib . tags dictionary for value under the name key of the temp_lib . tags .
                      temp_lib . tags [ name ] = lib . tags [ name ]

// import module re .
 import re

// define the function all_valid with an argument m .
 def escape_quotes ( m ) :

// from django . conf import settings into default name space .
 from django . conf import settings

// call the function allow_lazy with 2 arguments : display_name and six . text_type , substitute the result for exit_code .
  urlquote = allow_lazy ( urlquote , six . text_type )

// return wrapper .
    return wrapper

// call the function kw with 2 arguments : integer <unk> and <unk> , substitute the result for value under the <unk> key of the kw dictionary .
              kw [ 'microsecond' ] = kw [ 'microsecond' ] . ljust ( 6 , '0' )

// from django . utils . deprecation import RemovedInDjango19Warning into default name space .
 from django . utils . deprecation import RemovedInDjango19Warning

// return boolean True .
 return True

// child_nodelists is a tuple with 2 elements : <unk> and <unk> .
      child_nodelists = ( 'nodelist_true' , 'nodelist_false' )

// msg is a tuple with 2 elements : old_file_name and fdel , respectively .
 msg += '\n%s:\n%s\n' % ( group_name , formatted )

// define the function default with 2 arguments value and arg .
 def default ( value , arg ) :

// raise an TemplateDoesNotExist exception .
              raise TemplateDoesNotExist

// call the method self . data . replace with 2 arguments : month and day , increment the result by integer 1 , multiply the result by integer 1 , substitute the result for jan1_weekday .
 jan1_weekday = self . data . replace ( month = 1 , day = 1 ) . weekday ( ) + 1

// return <unk> .
  return ''

// help is a tuple containing a string : the result of the function database called with an argument string " <unk> the contents of the database to <unk> <unk> if the given <unk> <unk> <unk> " .
      help = ( "Output the contents of the database as a fixture of the given "  "format (using each model's default manager unless --all is "  "specified)." )

// property decorator ,
    @ property

// call the method parser . add_argument with 5 arguments : <unk> , action set to integer <unk> , dest set to integer <unk> , default set to boolean True , default set to boolean True , and help set to integer <unk> .
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )

// value is not None ,
              year_val = month_val = day_val = None

// yield integer <unk> .
  db_module = 'django.db'

// return a tuple with 2 elements : reversed and result of the call to the function _len with an argument , return value converted to integer 0 .
 return ( ( evens + odds ) % 10 == 0 )

// call the method self . _should_delete_form with 2 arguments source and msg .
 raise self . source_error ( source , msg )

// if link is not None ,
 if link is not None :

// derive the class Command from the BaseCommand base class .
    class Command ( BaseCommand ) :

// if msg is true ,
   if msg :

// define the method __repr__ with an argument self .
   def __repr__ ( self ) :

// define the method _set_name with an argument self .
   def more ( self ) :

// call the function sys . exc_info , substitute the result for <unk> and tb , respectively .
              et , ev , tb = sys . exc_info ( )

// call the function thread . start_new_thread with main_func and args as arguments .
 thread . start_new_thread ( main_func , args )

// call the function mark_safe with an argument message , return the result .
          return mark_safe ( message )

// break from the loop execution .
                      break

// substitute pos for SafeString .
                      end_text_pos = pos

// import module glob .
 import glob

// call the method self . __class__ with 3 arguments : <unk> , mutable set to boolean True , encoding set to self . encoding , substitute the result for result .
          result = self . __class__ ( '' , mutable = True , encoding = self . encoding )

// append tuple with 2 elements : f . name and formfield .
              field_list . append ( ( f . name , formfield ) )

// substitute newline for end .
              end = newline

// clean_data is an empty list .
 all_files = [ ]

// call the function smart_text with 3 arguments : field_value , value , value under the <unk> key of the options dictionary and strings_only set to boolean True , substitute the result for field_value .
                  field_value = smart_text ( field_value , options . get ( "encoding" , settings . DEFAULT_CHARSET ) , strings_only = True )

// substitute <unk> for widget . input_type .
              widget . input_type = 'hidden'

// call the method json . loads with an argument stream_or_string , substitute the result for objects .
          objects = json . loads ( stream_or_string )

// define the function <unk> with 2 arguments : unpacked list args and unpacked dictionary kwargs .
    def autodiscover_modules ( * args , ** kwargs ) :

// register is an instance of Library class .
  register = Library ( )

// define the method value_from_datadict with 4 arguments : self , data , files and name .
   def value_from_datadict ( self , data , files , name ) :

// create directories from the elements in filename .
                      os . makedirs ( filename )

// call the function sys . exc_info , substitute the result for exc_info .
              exc_info = sys . exc_info ( )

// return the_path .
    return the_path

// if <unk> is None substitute self . ending for ending , if not substitute ending for ending .
          ending = self . ending if ending is None else ending

// call the method self . path with argument name , substitute the result for full_path .
 full_path = self . path ( name )

// return boolean False .
              return False

// return <unk> .
 return ''

// call the function pgettext_lazy . isleap with 3 arguments : self . objects , self . stream , self . options and unpacked dictionary options .
          yaml . dump ( self . objects , self . stream , Dumper = DjangoSafeDumper , ** self . options )

// from __future__ import unicode_literals into default name space .
from __future__ import unicode_literals

// if not ,
  else :

// return an instance of op class .
              return op ( )

// return integer 0 .
  return split

// call the function pickle . dumps with value and pickle . HIGHEST_PROTOCOL as the arguments , substitute the result for pickled .
 pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )

// return an empty list .
                  return [ ]

// define the method _has_changed with arguments self , initial and data .
   def _has_changed ( self , initial , data ) :

// raise an ValidationError with arguments protocol and code set to <unk> .
          raise ValidationError ( error_message , code = 'invalid' )

// call the method self . format_output with 2 arguments template_name and template_dirs , return the result .
          return self . load_template ( template_name , template_dirs )

// if name is true , substitute it for function_name , if not substitute func . __name__ for function_name , otherwise substitute func . __name__ for function_name .
    function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )

// substitute the length of middle for middle .
                      middle = middle [ len ( opening ) : ]

// call the function datetime with an argument unpacked list kw , return the result .
  return datetime ( * kw )

// substitute view_name for self . view_name .
          self . view_name = view_name

// call the method httpd . set_urlconf with an argument new_params .
  httpd . set_app ( wsgi_handler )

// define the method accessed_time with 2 arguments : self and name .
   def accessed_time ( self , name ) :

// return nothing .
          return

// substitute app_name for self . app_name .
 self . app_name = app_name

// raise an ImportError exception .
                   raise ImportError

// define the function to_locale with 2 arguments : language and module_name set to boolean False .
     def to_locale ( language , to_lower = False ) :

// append form to self . saved_forms .
                  self . saved_forms . append ( form )

// substitute func for value under the <unk> key of the self . __dict__ dictionary .
 self . __dict__ [ '_setupfunc' ] = func

// call the import_string with an argument dotted_path , substitute the result for attr .
          attr = import_string ( dotted_path )

// try ,
 try :

// post is a tuple with 2 elements : return value of the function pformat called with an argument : result of the function pformat called with an argument : result of the call to the function pformat with an argument request . POST .
              post = ( pformat ( POST_override )  if POST_override is not None  else pformat ( request . POST ) )

// targets is a list containing tuple with two elements app_label and None .
                  targets = [ ( app_label , None ) ]

// raise an AttributeError with an argument self . warning .
              raise AttributeError ( self . warning )

// if size is None ,
          if size is None :

// call the method self . _lib . Client with an argument self . _servers , substitute the result for client .
          client = self . _lib . Client ( self . _servers )

// substitute _ for _ .
              _ = { }

// call the function random . <unk> with an argument <unk> , substitute the result for str_hidden .
  randint = random . randrange ( 100000 )

// join app_dir and domain into a list , substitute it for addr .
 addr = '@' . join ( [ localpart , domain ] )

// if remaining is None ,
  if remaining is None :

// from django . core . management . base import CommandError into default name space .
  from django . core . management . base import CommandError

// call the method nodelist . render , use the result as an argument for the call to the function _slugify , return the result .
 return VerbatimNode ( nodelist . render ( Context ( ) ) )

// call the method translation . activate with an argument settings . LANGUAGE_CODE .
    translation . activate ( settings . LANGUAGE_CODE )

// substitute csrf_token for value under the <unk> key of the wsgi_opts dictionary .
                          new_context [ 'csrf_token' ] = csrf_token

// if self . data . minute equals integer 0 and self . data . hour equals integer 0 ,
 if self . data . minute == 0 and self . data . hour == 0 :

// call the method self . config . addHandler with an argument value under the f key of the self . config dictionary .
                  filterer . addFilter ( self . config [ 'filters' ] [ f ] )

// self . _view_middleware is an empty list .
 self . _view_middleware = [ ]

// call the method signing . get_cookie_signer with 2 arguments : salt set to key and salt set to max_age , call the method unsign on the result , substitute the result for value .
              value = signing . get_cookie_signer ( salt = key + salt ) . unsign (  cookie_value , max_age = max_age )

// do nothing .
      pass

// raise an <unk> exception with an argument <unk> , use the result as an argument for the call to the <unk> function , substitute the result for <unk> .
                  raise SignatureExpired (  'Signature age %s > %s seconds' % ( age , max_age ) )

// write string " Installing custom <unk> " to self . stdout stream .
                  self . stdout . write ( "  Installing custom SQL...\n" )

// skip this loop iteration .
              continue

// call the function template_localtime with arguments obj and context . use_tz , substitute the result for obj .
                  obj = template_localtime ( obj , context . use_tz )

// if not ,
  else :

// substitute resolver_match for callback , and param_dict , respectively .
 callback , callback_args , callback_kwargs = resolver_match

// read lambda function that returns self . file . read field , use it as an argument for property function , put the result in read .
 read = property ( lambda self : self . file . read )

// define the method __enter__ with an argument self .
   def __enter__ ( self ) :

// for every dirname in list out of files ,
    for dirname in dirs [ : ] :

// if app_labels is true ,
   if app_labels :

// call the method self . _truncate_html with 3 arguments : token . source , and msg , return the result .
          return self . source_error ( token . source , msg )

// call the mail . send method , return the result .
   return mail . send ( )

// for every _ and nodelist in self . conditions_nodelists ,
          for _ , nodelist in self . conditions_nodelists :

// call the method self . fields . values , for every field in result ,
 for field in self . fields . values ( ) :

// convert data into a string , substitute it for data .
                  data = str ( data )

// call the function escape with an argument lead , substitute the result for lead and trail , respectively .
                      lead , trail = escape ( lead ) , escape ( trail )

// try ,
  try :

// call the method qs . <unk> with 2 arguments : <unk> and limit set to boolean True , substitute the result for value under the f . name key of the data dictionary .
                      data [ f . name ] = list ( qs . values_list ( 'pk' , flat = True ) )

// import module re .
 import re

// from django . db import connections and DEFAULT_DB_ALIAS into default name space .
 from django . db import connections , DEFAULT_DB_ALIAS

// property decorator ,
   @ property

// call the method self . extra_headers . get with 2 arguments : <unk> and string ' . %s ' , substitute the result for value under the <unk> key of msg dictionary .
 msg [ 'To' ] = self . extra_headers . get ( 'To' , ', ' . join ( self . to ) )

// convert format_type to an integer , convert the result to a integer , substitute it for self . _num_pages converted to an integer .
 self . _num_pages = int ( ceil ( hits / float ( self . per_page ) ) )

// method lru_cache . lru_cache with an argument maxsize set to None , as a decorator ,
    @ lru_cache . lru_cache ( maxsize = None )

// if not ,
   else :

// define the method sign with arguments self and value .
   def sign ( self , value ) :

// define the method __init__ with 2 arguments : self and escape_html .
  def __init__ ( self , tagtype ) :

// LOCK_SH is integer <unk> .
 SINGLE_BRACE_START = '{'

// define the method load_template with 3 arguments : self , template_name , template_dirs set to None .
    def load_template ( self , template_name , template_dirs = None ) :

// derive the class LoadNode from Node base class .
      class CommentNode ( Node ) :

// token is an instance of Token class , created with 2 arguments : TOKEN_BLOCK and block_content .
  token = Token ( TOKEN_BLOCK , block_content )

// for every name in return value of the function _parse_date_fmt , called with an argument first element of renamed_method , for every name in sorted .
 commands = { name : 'django.core' for name in find_commands ( __path__ [ 0 ] ) }

// import module calendar .
 import calendar

// call the method queryset . none , substitute the result for qs .
              qs = queryset . none ( )

// raise an ValidationError with 2 arguments : value under the <unk> key of the self . error_messages dictionary and code set to <unk> .
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )

// if value under the <unk> key of the self . feed dictionary is not None ,
 if self . feed [ 'feed_url' ] is not None :

// if value is false ,
          if not value :

// if StandardError , renamed to e , exception is caught ,
  except StandardError as e :

// calculate the length of plan_node .
 pflen = len ( prefixed )

// signals is an integer <unk> .
 signals = 'signals'

// call the method lookups . appendlist with 3 arguments : pattern . name , tuple with 2 elements : bits and p_pattern , and pattern . default_args .
                      lookups . appendlist ( pattern . name , ( bits , p_pattern , pattern . default_args ) )

// define the method __str__ with an argument self .
   def __str__ ( self ) :

// register . tag decorator ,
    @ register . tag

// define the method write_message with arguments self and message .
   def write_message ( self , message ) :

// if smtplib . SMTPException exception is caught ,
  except smtplib . SMTPException :

// is_usable is not None .
      is_usable = resource_string is not None

// call the function custom_sql_for_model with 3 arguments : model , style and connection , extend the output with the result .
          output . extend ( custom_sql_for_model ( model , style , connection ) )

// default_validators is an list with 2 elements : 2 elements : 2 elements : integer 2 and an empty list .
  singular_suffix , plural_suffix = bits [ : 2 ]

// define the method getlist with 2 arguments : self and key .
     def getlist ( self , key ) :

// define the method __iter__ with an argument self .
 def __iter__ ( self ) :

// deps is an empty list .
                  deps = [ ]

// if AttributeError exception is caught ,
  except AttributeError :

// if not ,
  else :

// call the method self . clear_checkbox_name with an argument name , substitute the result for default_translation .
                  checkbox_name = self . clear_checkbox_name ( name )

// raise CommandError (
                  raise CommandError (  "Multiple fixtures named '%s' in %s. Aborting." %  ( fixture_name , humanize ( fixture_dir ) ) )

// if self . match is None or call to the method self . match_re . search with an argument f , evaluates to true ,
  if self . match is None or self . match_re . search ( f ) :

// from django . utils import six into default name space .
 from django . utils import six

// if value under the <unk> key of the item dictionary is not None ,
  if item [ 'comments' ] is not None :

// return endpos .
   return endpos

// define the method __init__ with 4 arguments : self , template_string , origin set to None and name set to None .
      def __init__ ( self , template_string , origin = None , name = None ) :

// from django . core . serializers . python import Deserializer as trans into default name space .
 from django . core . serializers . python import Deserializer as PythonDeserializer

// substitute regex for self . regex .
              self . regex = regex

// define the method handle_noargs with 2 arguments : self and shell set to None .
   def run_shell ( self , shell = None ) :

// raise an NotImplementedError with an argument string " subclasses of Storage must provide a <unk> ( ) method <unk> .
 raise NotImplementedError ( 'subclasses of Storage must provide a size() method' )

// if register_to is true ,
                  if register_to :

// call the method __init__ from the base class of the class TemplateIfParser , with 2 arguments : unpacked list args , and unpacked dictionary kwargs .
 super ( TemplateIfParser , self ) . __init__ ( * args , ** kwargs )

// define the method writer_leaves with an argument self .
  def _get_closed ( self ) :

// call the method self . file . __enter__ .
              self . file . __enter__ ( )

// calculate is a instance of a class <unk> , created with an argument dt . year .
 syear = "%04d" % ( dt . year , )

// output is an empty list .
 output = [ ]

// convert path into a string , substitute it for path .
          path = str ( path )

// call the method __init__ from the base class of the class BaseTemporalField , with 2 arguments : unpacked list args , and unpacked dictionary kwargs .
          super ( BaseTemporalField , self ) . __init__ ( * args , ** kwargs )

// call the method handler . addQuickElement with 2 arguments : <unk> and value under the <unk> key of the self . feed dictionary .
 handler . addQuickElement ( "description" , self . feed [ 'description' ] )

// raise an ValueError exception with an argument <unk> , for <unk> <unk> is a lambda function with 2 arguments : <unk> <unk> is not a ForeignKey <unk> . _meta . app_label and pkg_name , respectively .
                  raise ValueError (  "fk_name '%s' is not a ForeignKey to '%s.%'."  % ( fk_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )

// try ,
   try :

// if value under the <unk> key of the item dictionary is true and value under the <unk> key of the item dictionary is true ,
    if item [ "author_name" ] and item [ "author_email" ] :

// call the method dot_re . split with 2 arguments : length of result of the method msgs . split , join the result into a string , substitute the result for msgs .
           msgs = '\n' . join ( dropwhile ( len , msgs . split ( '\n' ) ) )

// otherwise if first element of g equals <unk> ,
  elif g [ 0 ] == "'" :

// call the method app . <unk> with an argument <unk> , substitute the result without the first element for app .
                      app = app . rpartition ( '.' ) [ - 1 ]

// otherwise if tzinfo is not None ,
  elif tzinfo is not None :

// needs_multipart_form is boolean False .
      needs_multipart_form = False

// append node to nodelist .
  nodelist . append ( node )

// define the method value_from_datadict with 4 arguments : self , data , files and name .
   def value_from_datadict ( self , data , files , name ) :

// define the function _long_to_bin with 2 arguments : protocol and unpack_ipv4 .
   def ip_address_validators ( protocol , unpack_ipv4 ) :

// define the function make_middleware_decorator with an argument dirname .
     def humanize ( dirname ) :

// substitute schemes for self . schemes .
              self . schemes = schemes

// call the method self . to_python with an argument value , strip the result of whitespaces from both ends , substitute the result for value .
          value = self . to_python ( value ) . strip ( )

// derive the class RegexURLResolver from the MIMEMixin base class .
     class RegexURLResolver ( LocaleRegexProvider ) :

// define the method __init__ with 4 arguments : self , _subtype , name , value , attrs and choices .
 def __init__ ( self , parent_widget , name , value , attrs , choices ) :

// otherwise if first element of args equals to <unk> ,
  elif args [ 1 ] [ 0 ] == '1' :

// call the function os . stat with an argument os . <unk> , if the result starts with <unk> ,
   if ( ( os . stat ( path ) . st_mode & stat . S_IREAD ) != stat . S_IREAD ) :

// call the method self . add_library with an argument lib .
              self . add_library ( lib )

// define the function dec with an argument func .
                   def dec ( func ) :

// if value under the <unk> key of the self . feed dictionary is not None ,
  if self . feed [ 'feed_copyright' ] is not None :

// append app_name to invalid_apps .
                      invalid_apps . append ( app_name )

// call the function new_method_proxy with an argument operator . LANGUAGES , substitute the result for __contains__ .
 __contains__ = new_method_proxy ( operator . contains )

// define the function <unk> with an argument s .
       def base36_to_int ( s ) :

// from django . db import models into default name space .
 from django . db import models

// for every localedir in reversed list settings . LOCALE_PATHS ,
 for localedir in reversed ( settings . LOCALE_PATHS ) :

// call the method form . is_valid , if it evaluates to false ,
 if not form . is_valid ( ) :

// define the method __init__ with 4 arguments : self , regex , urlconf_name , default_kwargs , default_kwargs , attrs set to None and namespace set to None .
      def __init__ ( self , regex , urlconf_name , default_kwargs = None , app_name = None , namespace = None ) :

// define the function parse_color_setting with an argument model .
  def model_installed ( model ) :

// substitute link for UnlockFileEx and var2 , result of the link function .
 link_prev , link_next , key , result = link

// if <unk> is contained in ip_str ,
    if ':::' in ip_str :

// get the value under the field . name key of the self . _current dictionary , call the iterator method on the result , substitute the resulting list for value under the field . name key of the self . _current dictionary .
  self . _current [ field . name ] = [ m2m_value ( related )  for related in getattr ( obj , field . name ) . iterator ( ) ]

// attrs is a dictionary created with 2 elements : attrs and unpacked dictionary <unk> , substitute the result for attrs .
                  attrs = dict ( attrs or { } , ** { 'for' : id_for_label } )

// if dt is None , call the method dt . _isdst with an argument dt , substitute the result for is_dst .
          is_dst = False if dt is None else self . _isdst ( dt )

// substitute old_setting for self . negate .
 self . negate = negate

// call the function func with 2 arguments : unpacked list args and unpacked dictionary kwargs , return the result .
   return func ( * args , ** kwargs )

// define the method __iter__ with an argument self .
   def __iter__ ( self ) :

// from django . core . signals import request_finished into default name space .
 from django . core . signals import request_finished

// raise an Resolver404 exception with an argument <unk> .
   raise Resolver404 ( { 'tried' : tried , 'path' : new_path } )

// if version is None ,
 if version is None :

// substitute self . fixture_object_count for self . fixture_object_count .
 self . _reverse_dict = { }

// substitute silent for self . silent .
 self . silent = silent

// call the function new_method_proxy with an argument bool , substitute the result for __bool__ .
 __bool__ = new_method_proxy ( bool )

// call the function module . Command , return the result .
 return module . Command ( )

// with lock ,
 with lock :

// substitute node for bit .
                  bit = node

// with self . mutex perform ,
          with self . mutex :

// if second element of bits is None ,
  if bits [ 4 ] != 'as' :

// raise an exception .
                      raise

// call the method attrs . setdefault with 2 arguments : <unk> and step .
  attrs . setdefault ( 'step' , step )

// call the method self . extend_nodelist with 3 arguments : nodelist , opname as an empty tuple , and token as an empty tuple .
                  self . extend_nodelist ( nodelist , TextNode ( token . contents ) , token )

// update zfile dictionary with sub_match . kwargs .
 sub_match_dict . update ( sub_match . kwargs )

// raise CommandError (
              raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % ( migration_name , app_label ) )

// define the method __init__ with 3 arguments : self , digits and sign set to <unk> .
  def __init__ ( self , digits , sign = '-' ) :

// get <unk> attribute of the _active object , if it exists substitute it for t , if not t is None .
 t = getattr ( _active , "value" , None )

// call the function next with an argument input_iter , assign the result to tmpdir and escaped , respectively .
              ch2 , escaped = next ( input_iter )

// if timeout is None ,
 if timeout is None :

// from django . utils . encoding import force_st into default name space .
 from django . utils . encoding import force_str

// call the method settings . is_overridden with an argument <unk> , if it evaluates to false ,
    if not settings . is_overridden ( 'MIDDLEWARE_CLASSES' ) :

// join elements of self . vals into a <unk> , substitute it for ret .
          ret = b'' . join ( self . vals )

// call the method handler . addQuickElement with 2 arguments : <unk> and cat .
              handler . addQuickElement ( "category" , cat )

// from __future__ import unicode_literals into default name space .
from __future__ import unicode_literals

// help is a tuple containing 2 elements : _subtype and help for ' model ' .
      help = "Prints the CREATE INDEX SQL statements for the given model module name(s)."

// raise an NotImplementedError with an argument string " <unk> of BaseCache must provide a <unk> <unk> " .
 raise NotImplementedError ( 'subclasses of BaseCache must provide a delete() method' )

// raise an ValidationError with 2 arguments : value under the <unk> key of the self . error_messages dictionary and code set to <unk> .
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )

// derive the class JsLexer from the BaseArchive base class .
     class TarArchive ( BaseArchive ) :

// substitute connection_reset for self . connection_reset .
 self . connection_reset = connection_reset

// for every namespace and tempdir in pattern . <unk> method return value , for every namespace and tb in the result ,
   for namespace , ( prefix , sub_pattern ) in pattern . namespace_dict . items ( ) :

// call the method callback . rindex with an argument <unk> , substitute the result for dot .
          dot = callback . rindex ( '.' )

// _meth_self is a <unk> .
  url_markup_template = '<a href="{0}">{1}</a>'

// raise an DisallowedHost exception with an argument <unk> set to string " <unk> only be <unk> <unk> " .
              raise TemplateEncodingError ( "Templates can only be constructed "  "from unicode or UTF-8 strings." )

// define the method as_ul with an argument self .
    def negate ( self ) :

// self . bad_cookies is an empty set .
                          self . bad_cookies = set ( )

// if not ,
  else :

// from django . core . serializers import base into default name space .
 from django . core . serializers import base

// call the method cursor . close .
              cursor . close ( )

// if not ,
  else :

// raise an InvalidTemplateLibrary exception with an argument <unk> , <unk> <unk> <unk> <unk> % ( taglib_module ) " .
              raise InvalidTemplateLibrary ( "ImportError raised loading %s: %s" %  ( taglib_module , e ) )

// if not ,
  else :

// define the method __init__ with 4 arguments : self , location set to None , base_url set to None , ipv6 set to None and directory_permissions_mode set to None .
  def __init__ ( self , location = None , base_url = None , file_permissions_mode = None ,  directory_permissions_mode = None ) :

// try ,
 try :

// decorator stringfilter ,
 @ stringfilter

// try ,
 try :

// for every e in self call the method self . join , join the results in a string , return the result .
          return '\n' . join ( '* %s' % e for e in self )

// update self . __dict__ dictionary with state .
          self . __dict__ . update ( state )

// call the method initial_form_count from the base class of the class BaseModelFormSet , return the result .
  return super ( BaseModelFormSet , self ) . initial_form_count ( )

// substitute settings . MEDIA_URL for base_url .
              base_url = settings . MEDIA_URL

// self . pointer is an integer 0 .
 self . pointer = 0

// define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwds .
                   def wrapper ( * args , ** kwds ) :

// return boolean False .
   return False

// answer is integer <unk> .
                          answer = "n"

// try ,
                   try :

// if ImportError exception is caught ,
  except ImportError :

// for every char in key ,
  for char in key :

// ns_pattern is a integer <unk> .
 ns_pattern = ''

// define the method __repr__ with an argument self .
    def __repr__ ( self ) :

// call the function get_bytes_from_wsgi with environ , <unk> and <unk> as arguments , substitute the result for script_url .
          script_url = get_bytes_from_wsgi ( environ , 'REDIRECT_URL' , '' )

// call the method content . encode with an argument <unk> , substitute the result for content .
 content = content . encode ( 'utf-8' )

// define the method media with an argument self .
 def media ( self ) :

// derive the class Error from base class CheckMessage .
     class Error ( CheckMessage ) :

// if greater is greater than or equal to integer 6 and return value of the method calendar . isleap called with an argument self . data . year , evaluates to true ,
              if jan1_weekday == 5 or ( jan1_weekday == 6 and calendar . isleap ( self . data . year - 1 ) ) :

// if pofile is true ,
 if _win :

// break from the loop execution .
 break

// call the function user_function with 2 arguments : unpacked list args and unpacked dictionary kwds , substitute the result for result .
   result = user_function ( * args , ** kwds )

// substitute file . mode for self . mode .
              self . mode = file . mode

// define the method delete_many with 3 arguments : self , keys , and version set to None .
    def delete_many ( self , keys , version = None ) :

// call the method s . encode with an argument <unk> , return the result .
          return s . encode ( "latin-1" )

// define the method add_fields with arguments self , form and index .
   def add_fields ( self , form , index ) :

// get the type of the self object , call the __bool__ method on the result with an argument self , return the result .
          return type ( self ) . __bool__ ( self )

// child_nodelists is a tuple with 2 elements : <unk> and <unk> .
      child_nodelists = ( 'nodelist_loop' , 'nodelist_empty' )

// get attr attribute from the self object , if it exists substitute it for nodelist , if not nodelist is None .
              nodelist = getattr ( self , attr , None )

// derive the class DeserializationError from the Exception base class .
    class DeserializationError ( Exception ) :

// call the method self . get with key and newretval as arguments , use the result as an argument for the call to the self . get method .
                      M = self . get ( key , Morsel ( ) )

// from django . utils import six into default name space .
  from django . utils import six

// define the method __call__ with arguments self and value .
    def __call__ ( self , value ) :

// return plural_suffix .
                  return plural_suffix

// while self . tokens is true ,
 while self . tokens :

// call the method __init__ from the base class of the EmailBackend class with arguments : unpacked list args , and unpacked dictionary kwargs .
 super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )

// call the method handler . addQuickElement with 2 arguments : <unk> and value under the <unk> key of the self . feed dictionary .
              handler . addQuickElement ( "rights" , self . feed [ 'feed_copyright' ] )

// call the method self . requires_system_checks . copy , substitute the result for errors .
          errors = self . default_error_messages . copy ( )

// define the method __init__ with 2 arguments : self and source .
      def __init__ ( self , source ) :

// write errors to self . stdout stream .
                      self . stdout . write ( errors )

// otherwise if item_type equals all_unique_checks ,
  elif item_type == FILE :

// derive the class RendererMixin from the object base class .
    class RendererMixin ( object ) :

// define the method date with an argument self .
   def date ( self ) :

// if app_config is None ,
  if app_config is None :

// if not ,
  else :

// call the method data . get with an argument self . _iterator , substitute the result for m .
 m = data . get ( self . month_field % name )

// substitute settings . ROOT_URLCONF for urlconf .
 urlconf = settings . ROOT_URLCONF

// call the method <unk> . finditer with an argument text , for every bit in result ,
 for bit in smart_split_re . finditer ( text ) :

// substitute <unk> for value under the <unk> key of the _format_cache dictionary .
 new_environ [ "RUN_MAIN" ] = 'true'

// settings . setter decorator ,
   @ encoding . setter

// increment i by integer 1 .
                          i += 1

// call the method HTMLParser . __init__ with an argument self .
              HTMLParser . __init__ ( self )

// from django . db import models and DEFAULT_DB_ALIAS into default name space .
 from django . db import models , DEFAULT_DB_ALIAS

// if length of bits is greater than integer 2 ,
 if len ( bits ) > 2 :

// data_set is a set created with return value of the function force_text called with an argument value , for every value in data .
 data_set = set ( force_text ( value ) for value in data )

// yield it and boolean True .
  yield representative , True

// define the method __getstate__ with an argument self .
        def __getstate__ ( self ) :

// call the function <unk> with an argument ip_str , substitute the result for ip_str .
  ip_str = _sanitize_ipv4_mapping ( ip_str )

// substitute collect and DebugParser for lexer_class and parser_class , respectively .
 lexer_class , parser_class = DebugLexer , DebugParser

// if six . PY3 is true ,
   if six . PY3 :

// raise an exception .
          raise

// write errors to command . stdout .
                   command . stdout . write ( errors )

// define the method prepare_value with 2 arguments : self and value .
   def prepare_value ( self , value ) :

// name is an empty list .
  name = [ ]

// if format_module_path is true ,
 if format_module_path :

// call the method readline . <unk> with an argument <unk> .
 readline . parse_and_bind ( "tab:complete" )

// get config dictionary element under <unk> key , if it exists substitute it for name , if not , name is an empty string .
              name = config . get ( 'name' , '' )

// define the method __str__ with an argument self .
     def __str__ ( self ) :

// derive the class Command from the AppCommand base class .
   class Command ( AppCommand ) :

// define the method _add_installed_apps_translations with an argument self .
   def is_secure ( self ) :

// for every app_label in app_labels ,
              for app_label in app_labels :

// if settings . USE_TZ is not None ,
 if settings . FORCE_SCRIPT_NAME is not None :

// sum offset and length of self . __starttag_text , substitute the result for offset .
                      offset = offset + len ( self . __starttag_text )

// if KeyError exception is caught ,
  except KeyError :

// increment nesting by one .
                      opt_label += '='

// if name is not contained in parser . _namedCycleNodes ,
  if name not in parser . _namedCycleNodes :

// call the method self . main_help_text . write , use the result as an argument for the call to the function sys . stdout . write .
                  sys . stdout . write ( self . main_help_text ( ) + '\n' )

// define the method start_object with arguments self and obj .
   def start_object ( self , obj ) :

// compare is a <unk> function with 4 elements : <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> , <unk> and <unk> .
    extension_map = {  '.tar' : TarArchive ,  '.tar.bz2' : TarArchive ,  '.tar.gz' : TarArchive ,  '.tgz' : TarArchive ,  '.tz2' : TarArchive ,  '.zip' : ZipArchive ,  }

// return data .
  return data

// call the method base64 . <unk> with length of s as an argument , use the result as an argument for the call to the method base64 . <unk> , return the length of the result .
          return base64 . urlsafe_b64decode ( s . ljust ( len ( s ) + len ( s ) % 4 , b'=' ) )

// call the function allow_lazy with an argument mod_name , substitute the result for mod_name .
  unescape_string_literal = allow_lazy ( unescape_string_literal )

// if tok starts with <unk> ,
                if tok . startswith ( "'" ) :

// for every program in template_name_list ,
      for program in programs :

// if f . <unk> is true ,
  if f . db_index :

// return last element of self . dicts .
          return self . dicts [ - 1 ] [ key ]

// define the function get_unbound_function with an argument unbound .
      def get_unbound_function ( unbound ) :

// substitute value under the <unk> key of the options dictionary for app_label .
              app_label = options [ 'app_label' ]

// if self . domain equals integer <unk> ,
 if self . domain == 'djangojs' :

// if imatch is true ,
 if imatch :

// return last last elements of output .
    return output [ : : - 1 ]

// call the method shutil . unget with 2 arguments : the_path and ignore_failures .
 shutil . move ( the_path , guessed_path )

// if self . _num_pages is true ,
 if self . show_traceback :

// if file path doesnt exists ,
 if not path . exists ( target_dir ) :

// call the function pickle . loads with argument pickled , return the result .
                  return pickle . loads ( pickled )

// return s .
           return s

// text_type is a string .
 text_type = str

// return <unk>
          return '\x1b[%sm' % RESET

// try ,
 try :

// do nothing .
          pass

// return data .
 return data

// call the function conditional_escape with 2 arguments : force_text and value , substitute the result for value .
 value = map ( force_text , value )

// buffer_types is a tuple with 2 elements : addr and port .
      server_address = ( addr , port )

// if not ,
  else :

// raise an StopIteration exception .
              raise InputStreamExhausted ( )

// if settings . configured is true ,
 if settings . configured :

// call the method run_from_argv from the base class of the class Command , with an argument argv .
   super ( Command , self ) . run_from_argv ( argv )

// call the function _trans . get_language , return the result .
      return _trans . get_language ( )

// call the method __copy__ from the base class of the class Context , substitute the result for duplicate .
          duplicate = super ( Context , self ) . __copy__ ( )

// for every handler in handlers ,
    for handler in handlers :

// return an instance of <unk> class , created with an argument timezone .
  return { 'TIME_ZONE' : timezone . get_current_timezone_name ( ) }

// if key and version are not None , return boolean True , otherwise return boolean False .
 return self . get ( key , version = version ) is not None

// if can_fail is true ,
          if can_fail :

// define the method strptime with arguments self and value .
    def valid_value ( self , value ) :

// from django . apps import apps into default name space .
  from django . apps import apps

// call the function _ with an argument <unk> set to a string , substitute the result for message .
 message = _ ( 'Enter a valid URL.' )

// from django . utils . safestring import mark_safe and SafeData into default name space .
 from django . utils . safestring import mark_safe , SafeData

// call the function validate_ipv46_address .
                  ip ( )

// multiply is a <unk> object with <unk> , <unk> and <unk> .
   _BROWSERS_DEPRECATED_LOCALES = {  'zh-cn' : 'zh-hans' ,  'zh-tw' : 'zh-hant' ,  }

// from django . utils import six into default name space .
 from django . utils import six

// if not ,
  else :

// define the function python_reloader with 3 arguments : model , form , fields set to create_models , exclude set to None ,
    def modelform_factory ( model , form = ModelForm , fields = None , exclude = None ,  formfield_callback = None , widgets = None , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ) :

// call the function _slugify with an argument value , substitute the result for new_value .
          new_value = _strip_once ( value )

// call the function get_exception_reporter_filter with an argument ip_str , substitute the result for step .
          ipv4_unpacked = _unpack_ipv4 ( ip_str )

// if self . asvar is true ,
   if self . asvar :

// remove attr dictionary entry under the attr key .
                      declared_fields . pop ( attr )

// allow_multiple_selected is boolean False .
      allow_multiple_selected = False

// import module tempfile .
 import tempfile

// call the method __init__ from the base class of the class ComboField , with 2 arguments : unpacked list args , and unpacked dictionary kwargs .
          super ( ComboField , self ) . __init__ ( * args , ** kwargs )

// call the function trim_whitespace with an argument request , use the result as an argument for the call to the method to_delete . update .
              updates . update ( processor ( request ) )

// call the method token . split_contents , substitute the result for bits .
 bits = token . split_contents ( )

// call the os . makedirs function with self . _dir and <unk> as arguments .
                  os . makedirs ( self . _dir , 0o700 )

// derive the class Serializer from the base . Serializer base class .
   class Serializer ( base . Serializer ) :

// if not ,
  else :

// substitute save_m2m for self . test_runner .
   self . save_m2m = save_m2m

// call the method self . _cache . decr with key and delta as arguments , substitute the result for val .
              val = self . _cache . decr ( key , delta )

// derive the class HttpResponseRedirectBase from the HttpResponse base class .
     class HttpResponseRedirectBase ( HttpResponse ) :

// return ret .
 return ret

// call the method fp . write with an argument data .
  fp . write ( data )

// call the function new_method_proxy with an argument str , substitute the result for __str__ .
          __str__ = new_method_proxy ( str )

// call the function convert_old_style_list with an argument best_doublecolon_len , substitute the result for forms_valid .
          best_doublecolon_end = ( best_doublecolon_start +  best_doublecolon_len )

// to_unicode is a list containing tuple with 2 elements : <unk> and <unk> .
 _fields_ = [  ( 'Internal' , ULONG_PTR ) ,  ( 'InternalHigh' , ULONG_PTR ) ,  ( '_offset_union' , _OFFSET_UNION ) ,  ( 'hEvent' , HANDLE ) ]

// call the function call_command with 4 arguments : <unk> , <unk> , verbosity set to self . verbosity , connection set to boolean True ,
                  call_command ( 'loaddata' , 'initial_data' , verbosity = self . verbosity , database = connection . alias , skip_validation = True , app_label = app_label , hide_empty = True )

// call the method self . add_error with an argument fixture_labels .
              self . loaddata ( fixture_labels )

// call the function _add_doc with 2 arguments : <unk> and <unk> .
              check_programs ( 'msguniq' , 'msgmerge' , 'msgattrib' )

// vary_headers is an instance of the class OrderedDict .
    validate_email = EmailValidator ( )

// return value .
    return value

// if callback is an instance of BaseEmailBackend ,
 if isinstance ( callback , functools . partial ) :

// if widget is an instance of NumberInput and <unk> is not contained in widget . attrs ,
 if isinstance ( widget , NumberInput ) and 'step' not in widget . attrs :

// define the method _cull with self , db , cursor and now as arguments .
    def _cull ( self , db , cursor , now ) :

// call the method pattern . resolve with an argument new_path , substitute the result for filter_name .
                      sub_match = pattern . resolve ( new_path )

// get config dictionary element under the <unk> key , substitute it for propagate .
 propagate = config . get ( 'propagate' , None )

// call the method sys . stderr . write with an argument <unk> , use the result as an argument for the call to the function sys . stderr . write , write the result to sys . stderr .
              sys . stderr . write ( "fork #2 failed: (%d) %s\n" % ( e . errno , e . strerror ) )

// derive the class CacheClass from the Origin base class .
      class CacheClass ( DatabaseCache ) :

// skip this loop iteration .
                      continue

// has_bz2 is boolean False .
   _called_from_command_line = False

// value under the self . _pk_field key of the form . fields is an instance of ModelChoiceField class , created with 2 arguments : qs , initial set to unpack_ipv4 , required set to function_name and widget set to widget .
  form . fields [ self . _pk_field . name ] = ModelChoiceField ( qs , initial = pk_value , required = False , widget = widget )

// call the method <unk> . join with an argument chunk , for every chunk in value , join the results into a string , substitute the result for value .
  value = b'' . join ( self . make_bytes ( chunk ) for chunk in value )

// if Exception exception is caught ,
  except Exception :

// call the method m . end , substitute the result for k .
 k = m . end ( )

// if column_name equals TOKEN_COMMENT ,
   if TYPE == RAW :

// define the method handle_merge with 3 arguments : self , col_name , used_column_names and is_relation .
      def normalize_col_name ( self , col_name , used_column_names , is_relation ) :

// property decorator ,
   @ property

// substitute self . _app_dict for self . _app_dict .
 self . _app_dict = { }

// define the method modified_time with arguments self and name .
   def modified_time ( self , name ) :

// for every i and choice in enumerated iterable self . choices ,
 for i , choice in enumerate ( self . choices ) :

// define the function <unk> with 2 arguments value and arg .
 def truncatechars_html ( value , arg ) :

// call the method arg . split with an argument <unk> , substitute the result for bits .
  bits = arg . split ( ',' )

// bring is a <unk> <unk> integer <unk> .
  template_with_clear = '%(clear)s <label for="%(clear_checkbox_id)s">%(clear_checkbox_label)s</label>'

// define the method write with an argument data .
  def write ( data ) :

// call the method self . render_options with an argument : value under name key of handlers dictionary , substitute the result for handler .
                          handler = self . configure_handler ( handlers [ name ] )

// define the method _render with 2 arguments : self and context .
     def _render ( self , context ) :

// define the method compile_function_error with 3 arguments : self , unpacked list args and unpacked dictionary kwargs .
          def _wrapper ( self , * args , ** kwargs ) :

// call the function digest with an argument password , substitute the result for password .
              password = digest ( password ) . digest ( )

// substitute <unk> and <unk> for defaults .
 defaults = {  'auto_id' : self . auto_id ,  'prefix' : self . add_prefix ( i ) ,  'error_class' : self . error_class ,  }

// call the function new_method_proxy with an argument length , substitute the result for __len__ .
  __len__ = new_method_proxy ( len )

// substitute i for end_index .
                  end_index = i

// if AttributeError exception is caught ,
  except AttributeError :

// if ValueError exception is caught ,
  except ValueError :

// raise an ValueError exception with an argument <unk> .
              raise ValueError ( "Unable to convert %r" % value )

// from django . utils . module_loading import import_string into default name space .
 from django . utils . module_loading import import_string

// call the method formats . localize_input with 3 arguments : value , self . format , if the result is true , and first element of result of the method self . format , return the first element of the result .
          return formats . localize_input ( value ,  self . format or formats . get_format ( self . format_key ) [ 0 ] )

// derive the class <unk> from the object base class .
     class Enclosure ( object ) :

// define the function get_major_version with an argument value .
     def _strip_once ( value ) :

// substitute NullBooleanSelect for widget .
      widget = NumberInput

// code is an integer <unk> .
 code = 'min_length'

// terminal_char is integer <unk> .
                              terminal_char = '>'

// load_template_source . is_usable is boolean True .
  load_template_source . is_usable = True

// import module shutil .
 import shutil

// strip message_context of <unk> from <unk> ends , substitute it for message_context .
                              message_context = message_context . strip ( '"' )

// substitute token . source for e . django_template_source .
              e . django_template_source = token . source

// substitute first 12 elements of ext for ext .
 ext = ext [ : 255 ]

// call the method self . full_clean .
              self . full_clean ( )

// append self to nodes .
              nodes . append ( self )

// substitute value under the entry key of the sys . <unk> dictionary for finder .
                   finder = sys . path_importer_cache [ entry ]

// if value is true ,
 if value :

// call the method formfield . queryset . <unk> with an argument limit_choices_to , substitute the result for formfield . queryset .
  formfield . queryset = formfield . queryset . complex_filter ( limit_choices_to )

// if not ,
  else :

// if base has an attribute <unk> ,
               if hasattr ( base , 'declared_fields' ) :

// renamed is boolean True .
 renamed = True

// convert value into boolean and return it .
  return bool ( value )

// call the function force_text with an argument message .
  yield force_text ( message )

// return result .
  return result

// if self . _callback is not None ,
          if self . _callback is not None :

// append work_file to args .
 args . append ( work_file )

// from django . core . management . base import BaseCommand into default name space .
  from django . core . management . base import BaseCommand

// if not ,
   else :

// return <unk> .
                 return 'NOTPROVIDED'

// if <unk> is not equal to ip_str and call to the method ip_str . count with an argument <unk> , evaluates to true ,
    if '::' not in ip_str and ip_str . count ( ':' ) != 7 :

// append settings . LOCALE_PATHS to a list .
              self . locale_paths . extend ( list ( settings . LOCALE_PATHS ) )

// call the method self . make_bytes with an argument value , substitute the result for value .
              value = self . make_bytes ( value )

// from django . utils . crypto import clean_ipv6_address and get_exception_reporter_filter into default name space .
 from django . utils . crypto import constant_time_compare , salted_hmac

// if self . m2m_data is true and bf_errors is true ,
 if self . m2m_data and save_m2m :

// decorator stringfilter ,
 @ stringfilter

// call the method self . error_class with an argument list with an element self . base_location , substitute the result for value under the NON_FIELD_ERRORS key of the form . _errors dictionary .
 form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] )

// try ,
                  try :

// call the function time . tzname with 2 arguments : return value of the function time . tzname and DEFAULT_LOCALE_ENCODING , return the result .
              return force_text ( time . tzname [ is_dst ] , DEFAULT_LOCALE_ENCODING )

// define the function <unk> with app_config set to None and kwargs dictionary as arguments .
 def check_all_models ( app_configs = None , ** kwargs ) :

// slice the last element of the return value of the function get_format called with an argument domain_part , increment the last element of the result to the last element .
  output [ - 1 ] = last_row [ : - len ( row_ender ) ] + str_hidden + row_ender

// if not ,
  else :

// create the values of the function context .
              resolved_args = [ context ] + resolved_args

// call the method field . clean with 2 arguments : value and initial , substitute the result for value .
 value = field . clean ( value , initial )

// write errors to self . stdout stream .
                      self . stdout . write ( errors )

// if arg is not an instance of <unk> or <unk> ,
 if arg not in ( 'on' , 'off' ) :

// extend mail . outbox list with messages .
  mail . outbox . extend ( messages )

// call the method parser . parse with an argument tuple , use the result as an argument for the call to the method parser . parse , substitute the result for nodelist_false .
          nodelist_false = parser . parse ( ( end_tag , ) )

// if safe is true ,
 if safe :

// if self . verbosity is greater or equal to integer 3 ,
                           if self . verbosity >= 3 :

// join dirpath and filename into a file path , use it as an argument for the call to the os . path . normpath function , substitute the result for file_path .
                  file_path = os . path . normpath ( os . path . join ( dirpath , filename ) )

// if not ,
  else :

// call the function copy with an argument self . render_context , substitute the result for duplicate . render_context .
 duplicate . render_context = copy ( self . render_context )

// if plan_node is contained in loader . <unk> ,
   if plan_node in loader . applied_migrations :

// call the method header . <unk> with 2 arguments : <unk> and <unk> , substitute the result for header and <unk> , respectively .
              header = header . upper ( ) . replace ( '-' , '_' )

// if ImportError exception is caught ,
  except ImportError :

// call the function bytes with an argument value , return the result .
              return bytes ( value )

// intrans is boolean True .
   intrans = True

// call the method apps . get_app_config with an argument model . _meta . app_label , append the result to app_dir .
 app_dir = apps . get_app_config ( model . _meta . app_label ) . path

// return a tuple with 3 elements : self . func , self . args and self . kwargs , respectively .
          return ( self . func , self . args , self . kwargs ) [ index ]

// try ,
   try :

// if _file is None ,
                              if _file is None :

// define the method close with argument self .
        def close ( self ) :

// from datetime import datetime into default name space .
 from datetime import datetime

// from django . core . serializers import base into default name space .
 from django . core . serializers import base

// define the function to_locale with an argument language .
   def to_locale ( language ) :

// from <unk> import baseconv into default name space .
 from optparse import OptionParser

// if ValueError exception is caught ,
  except ValueError :

// model_dependencies is an empty list .
  model_dependencies = [ ]

// if content is not None raise an error .
              assert content is not None

// call the function reverse with 6 arguments : project_name , <unk> args , args , kwargs set to args , and current_app set to context . current_app , substitute the result for url .
                      url = reverse ( project_name + '.' + view_name ,  args = args , kwargs = kwargs ,  current_app = context . current_app )

// endless loop ,
          while True :

// if not ,
  else :

// call the function mark_safe with an argument word , substitute the result for i-th element of words .
              words [ i ] = mark_safe ( word )

// sum filelist and closing , substitute the result for filelist .
          filelist = _cached_filenames + new_filenames + _error_files

// for every message in email_messages ,
 for message in email_messages :

// convert name to lowercase , if it is contained in <unk> ,
          if name . lower ( ) in ADDRESS_HEADERS :

// status_code is an integer <unk> .
      status_code = 301

// if data is an instance of bytes ,
 if isinstance ( data , bytes ) :

// for every p in path ,
    for p in path :

// define the function gettext_noop with an argument message .
   def gettext_noop ( message ) :

// decorator deconstructible ,
    @ deconstructible

// define the method bound_data with arguments self , data and initial .
   def bound_data ( self , data , initial ) :

// if name is contained in existing ,
                      if name in existing :

// define the method __new__ with 4 arguments : cls , name , real_value and d .
 def __new__ ( cls , name , this_bases , d ) :

// define the function get_language_from_request with 2 arguments : request and check_path set to boolean False .
    def get_language_from_request ( request , check_path = False ) :

// if field_type equals <unk> ,
                          if field_type == 'AutoField(' :

// if path_info is false ,
 if not path_info :

// define the function urlunquote with an argument obj .
   def deconstruct ( obj ) :

// call the function _trans . gettext_noop with an argument message , return the result .
      return _trans . gettext_noop ( message )

// substitute content_type for value under the <unk> key of self dictionary .
  self [ 'Content-Type' ] = content_type

// call the method connection . RLock . <unk> .
              connection . client . runshell ( )

// define the function dec with an argument func .
          def dec ( func ) :

// substitute <unk> for max_width .
 __version__ = "1.6.1"

// call the method self . _update_errors with an argument e .
              self . _update_errors ( e )

// return boolean False .
   return False

// substitute self . closed for close .
              close = self . closed

// map is a list containing 2 elements : <unk> and <unk> .
    _urllib_robotparser_moved_attributes = [  MovedAttribute ( "RobotFileParser" , "robotparser" , "urllib.robotparser" ) ,  ]

// if digest is None ,
 if digest is None :

// define the method tell with an argument self .
   def tell ( self ) :

// derive the class MemcachedCache from the HttpResponseRedirectBase base class .
    class HttpResponsePermanentRedirect ( HttpResponseRedirectBase ) :

// call the function get_format with an argument <unk> , substitute the first element of the result for input_format .
                  input_format = get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ]

